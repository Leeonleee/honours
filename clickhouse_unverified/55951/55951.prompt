You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
ClickHouse Server v23.7.4.5 crashed by a SELECT statement with allow_experimental_analyzer enabled ("SELECT 1 % (CASE ...")
**Describe the bug**
ClickHouse Server v23.7.4.5 crashed by a SELECT statement with allow_experimental_analyzer enabled.
It was found by an in-development fuzzer of WINGFUZZ.

**How to reproduce**
The SQL statement to reproduce:
```sql
SELECT 1 % ( CASE WHEN 1 THEN (1 IS NOT NULL + *) ELSE NULL END ) SETTINGS allow_experimental_analyzer = 1 ;
```
It can be reproduced on the official docker image. (`clickhouse/clickhouse-server:head` (version 23.8.1.2413) and `clickhouse/clickhouse-server:latest` (version 23.7.4.5)).

The log traced by ClickHouse Server:
```
SELECT 1 % multiIf(1, (1 IS NOT NULL) + *, NULL)
SETTINGS allow_experimental_analyzer = 1

Query id: e2914ca0-8b1f-476d-b485-f8a178f3a877

[8af69c367457] 2023.08.23 07:50:54.379251 [ 345 ] <Fatal> BaseDaemon: ########################################
[8af69c367457] 2023.08.23 07:50:54.379306 [ 345 ] <Fatal> BaseDaemon: (version 23.8.1.2413 (official build), build id: 4DCA66DD83B2161C82851B4655CD14334A08D535, git hash: 926533306c5969b77571e66163a6930cfce1cf86) (from thread 48) (query_id: e2914ca0-8b1f-476d-b485-f8a178f3a877) (query: SELECT 1 % ( CASE WHEN 1 THEN (1 IS NOT NULL + *) ELSE NULL END ) SETTINGS allow_experimental_analyzer = 1 ;) Received signal Segmentation fault (11)
[8af69c367457] 2023.08.23 07:50:54.379360 [ 345 ] <Fatal> BaseDaemon: Address: 0x18. Access: read. Address not mapped to object.
[8af69c367457] 2023.08.23 07:50:54.379414 [ 345 ] <Fatal> BaseDaemon: Stack trace: 0x000000000a67c7ad 0x000000000a67be4b 0x000000000a67aeba 0x00000000070ba30a 0x00000000070b98ae 0x0000000010a92d6a 0x0000000010a93a82 0x0000000010a94d79 0x00000000113fbecc 0x0000000013253084 0x00000000133ae54e 0x0000000011da4e75 0x0000000011d9f237 0x0000000012137b51 0x000000001213398e 0x0000000012f98d19 0x0000000012faa959 0x0000000015997514 0x0000000015998711 0x0000000015ace847 0x0000000015accb1c 0x00007ffff7f9a609 0x00007ffff7ebf133
[8af69c367457] 2023.08.23 07:50:54.379526 [ 345 ] <Fatal> BaseDaemon: 2. DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false, true, true>::executeImpl2(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const*) const @ 0x000000000a67c7ad in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379576 [ 345 ] <Fatal> BaseDaemon: 3. DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false, true, true>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a67be4b in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379604 [ 345 ] <Fatal> BaseDaemon: 4. DB::FunctionBinaryArithmeticWithConstants<DB::ModuloImpl, DB::NameModulo, false, true, true>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000a67aeba in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379660 [ 345 ] <Fatal> BaseDaemon: 5. DB::IFunction::executeImplDryRun(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000070ba30a in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379704 [ 345 ] <Fatal> BaseDaemon: 6. DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000070b98ae in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379747 [ 345 ] <Fatal> BaseDaemon: 7. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000010a92d6a in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379777 [ 345 ] <Fatal> BaseDaemon: 8. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000010a93a82 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379803 [ 345 ] <Fatal> BaseDaemon: 9. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000010a94d79 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379848 [ 345 ] <Fatal> BaseDaemon: 10. DB::ActionsDAG::updateHeader(DB::Block) const @ 0x00000000113fbecc in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379899 [ 345 ] <Fatal> BaseDaemon: 11. DB::ExpressionTransform::transformHeader(DB::Block, DB::ActionsDAG const&) @ 0x0000000013253084 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379950 [ 345 ] <Fatal> BaseDaemon: 12. DB::ExpressionStep::ExpressionStep(DB::DataStream const&, std::shared_ptr<DB::ActionsDAG> const&) @ 0x00000000133ae54e in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.379988 [ 345 ] <Fatal> BaseDaemon: 13. DB::Planner::buildPlanForQueryNode() @ 0x0000000011da4e75 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380014 [ 345 ] <Fatal> BaseDaemon: 14. DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000011d9f237 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380049 [ 345 ] <Fatal> BaseDaemon: 15. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000012137b51 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380083 [ 345 ] <Fatal> BaseDaemon: 16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x000000001213398e in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380119 [ 345 ] <Fatal> BaseDaemon: 17. DB::TCPHandler::runImpl() @ 0x0000000012f98d19 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380162 [ 345 ] <Fatal> BaseDaemon: 18. DB::TCPHandler::run() @ 0x0000000012faa959 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380192 [ 345 ] <Fatal> BaseDaemon: 19. Poco::Net::TCPServerConnection::start() @ 0x0000000015997514 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380229 [ 345 ] <Fatal> BaseDaemon: 20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015998711 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380286 [ 345 ] <Fatal> BaseDaemon: 21. Poco::PooledThread::run() @ 0x0000000015ace847 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380323 [ 345 ] <Fatal> BaseDaemon: 22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015accb1c in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:50:54.380349 [ 345 ] <Fatal> BaseDaemon: 23. ? @ 0x00007ffff7f9a609 in ?
[8af69c367457] 2023.08.23 07:50:54.380368 [ 345 ] <Fatal> BaseDaemon: 24. ? @ 0x00007ffff7ebf133 in ?
[8af69c367457] 2023.08.23 07:50:54.540563 [ 345 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: F37F4F1F1F05354DFEECD70FAB61DC73)
[8af69c367457] 2023.08.23 07:50:54.540852 [ 345 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[8af69c367457] 2023.08.23 07:50:54.541005 [ 345 ] <Fatal> BaseDaemon: Changed settings: allow_experimental_analyzer = true
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
