{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44850,
  "instance_id": "ClickHouse__ClickHouse-44850",
  "issue_numbers": [
    "44844"
  ],
  "base_commit": "37262e577e8cd47bf662c7d8f9e546a5ea3899ea",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 6eb979e59596..3a944ffada70 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -6118,6 +6118,7 @@ std::optional<ProjectionCandidate> MergeTreeData::getQueryProcessingStageWithAgg\n     {\n         ProjectionCandidate candidate{};\n         candidate.desc = &projection;\n+        candidate.context = select.getContext();\n \n         auto sample_block = projection.sample_block;\n         auto sample_block_for_keys = projection.sample_block_for_keys;\ndiff --git a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\nindex 65f54495b3c8..1ca1779e4b0d 100644\n--- a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\n@@ -466,6 +466,7 @@ QueryPlanPtr MergeTreeDataSelectExecutor::read(\n         fmt::format(\"MergeTree(with {} projection {})\", query_info.projection->desc->type, query_info.projection->desc->name),\n         query_info.storage_limits);\n     plan->addStep(std::move(step));\n+    plan->addInterpreterContext(query_info.projection->context);\n     return plan;\n }\n \ndiff --git a/src/Storages/SelectQueryInfo.h b/src/Storages/SelectQueryInfo.h\nindex c93531973b87..a8a8ae4e877f 100644\n--- a/src/Storages/SelectQueryInfo.h\n+++ b/src/Storages/SelectQueryInfo.h\n@@ -163,6 +163,9 @@ struct ProjectionCandidate\n     SortDescription group_by_elements_order_descr;\n     MergeTreeDataSelectAnalysisResultPtr merge_tree_projection_select_result_ptr;\n     MergeTreeDataSelectAnalysisResultPtr merge_tree_normal_select_result_ptr;\n+\n+    /// Because projection analysis uses a separate interpreter.\n+    ContextPtr context;\n };\n \n /** Query along with some additional data,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02516_projections_and_context.reference b/tests/queries/0_stateless/02516_projections_and_context.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02516_projections_and_context.sql b/tests/queries/0_stateless/02516_projections_and_context.sql\nnew file mode 100644\nindex 000000000000..a7c143c7900b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02516_projections_and_context.sql\n@@ -0,0 +1,6 @@\n+DROP TABLE IF EXISTS test1__fuzz_37;\n+CREATE TABLE test1__fuzz_37 (`i` Date) ENGINE = MergeTree ORDER BY i;\n+insert into test1__fuzz_37 values ('2020-10-10');\n+SELECT count() FROM test1__fuzz_37 GROUP BY dictHas(NULL, (dictHas(NULL, (('', materialize(NULL)), materialize(NULL))), 'KeyKey')), dictHas('test_dictionary', tuple(materialize('Ke\\0'))), tuple(dictHas(NULL, (tuple('Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0\\0\\0\\0Ke\\0'), materialize(NULL)))), 'test_dicti\\0nary', (('', materialize(NULL)), dictHas(NULL, (dictHas(NULL, tuple(materialize(NULL))), 'KeyKeyKeyKeyKeyKeyKeyKey')), materialize(NULL)); -- { serverError BAD_ARGUMENTS }\n+SELECT count() FROM test1__fuzz_37 GROUP BY dictHas('non_existing_dictionary', materialize('a')); -- { serverError BAD_ARGUMENTS }\n+DROP TABLE test1__fuzz_37;\n",
  "problem_statement": "Context has expired (while reading from non-existing dict)\n```\r\nCREATE TABLE test1__fuzz_37 (`i` Date) ENGINE = MergeTree ORDER BY i;\r\ninsert into test1__fuzz_37 values ('2020-10-10');\r\nSELECT count() FROM test1__fuzz_37 GROUP BY dictHas(NULL, (dictHas(NULL, (('', materialize(NULL)), materialize(NULL))), 'KeyKey')), dictHas('test_dictionary', tuple(materialize('Ke\\0'))), tuple(dictHas(NULL, (tuple('Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0\\0\\0\\0Ke\\0'), materialize(NULL)))), 'test_dicti\\0nary', (('', materialize(NULL)), dictHas(NULL, (dictHas(NULL, tuple(materialize(NULL))), 'KeyKeyKeyKeyKeyKeyKeyKey')), materialize(NULL));\r\n\r\nSELECT count()\r\nFROM test1__fuzz_37\r\nGROUP BY\r\n    dictHas(NULL, (dictHas(NULL, (('', materialize(NULL)), materialize(NULL))), 'KeyKey')),\r\n    dictHas('test_dictionary', tuple(materialize('Ke\\0'))),\r\n    tuple(dictHas(NULL, (tuple('Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0\\0\\0\\0Ke\\0'), materialize(NULL)))),\r\n    'test_dicti\\0nary',\r\n    (('', materialize(NULL)), dictHas(NULL, (dictHas(NULL, tuple(materialize(NULL))), 'KeyKeyKeyKeyKeyKeyKeyKey')), materialize(NULL))\r\n\r\nQuery id: 17710b2b-8955-418c-ae25-0eb422078d94\r\n\r\n\r\n0 rows in set. Elapsed: 0.014 sec. \r\n\r\nReceived exception from server (version 22.13.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Context has expired: while executing 'FUNCTION dictHas('test_dictionary' :: 3, tuple(materialize('Ke\\0')) :: 10) -> dictHas('test_dictionary', tuple(materialize('Ke\\0'))) UInt8 : 5'. (LOGICAL_ERROR)\r\n\r\n{18802d15-8cb4-4d5e-84f5-680741d0e406} <Error> executeQuery: Code: 49. DB::Exception: Context has expired: while executing 'FUNCTION dictHas('test_dictionary' :: 3, tuple(materialize('Ke\\0')) :: 10) -> dictHas('test_dictionary', tuple(materialize('Ke\\0'))) UInt8 : 5'. (LOGICAL_ERROR) (version 22.13.1.1) (from [::ffff:127.0.0.1]:47550) (in query: SELECT count() FROM test1__fuzz_37 GROUP BY dictHas(NULL, (dictHas(NULL, (('', materialize(NULL)), materialize(NULL))), 'KeyKey')), dictHas('test_dictionary', tuple(materialize('Ke\\0'))), tuple(dictHas(NULL, (tuple('Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0\\0\\0\\0Ke\\0'), materialize(NULL)))), 'test_dicti\\0nary', (('', materialize(NULL)), dictHas(NULL, (dictHas(NULL, tuple(materialize(NULL))), 'KeyKeyKeyKeyKeyKeyKeyKey')), materialize(NULL))), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./build/./contrib/llvm-project/libcxx/include/exception:134: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int) @ 0x164d7193 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n1. ./build/./src/Common/Exception.cpp:77: DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0xf828afa in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n2. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, bool) @ 0xaada74d in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n3. DB::WithContextImpl<std::__1::shared_ptr<DB::Context const>>::getContext() const @ 0xaf08fb6 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n4. DB::FunctionDictHelper::getDictionary(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) @ 0xb0e77dc in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n5. DB::FunctionDictHas::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xb0e6791 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n6. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xaada8ce in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n7. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13b8c6c7 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n8. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13b8cf0c in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n9. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13b8dfad in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n10. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x1436ecad in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n11. ./build/./src/Processors/Transforms/ExpressionTransform.cpp:0: DB::ExpressionTransform::transform(DB::Chunk&) @ 0x15b482fc in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n12. ./build/./contrib/llvm-project/libcxx/include/__utility/swap.h:35: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x11e05ef0 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n13. ./build/./src/Processors/ISimpleTransform.cpp:99: DB::ISimpleTransform::work() @ 0x159844b6 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n14. ./build/./contrib/llvm-project/libcxx/include/list:616: DB::ExecutionThreadContext::executeTask() @ 0x1599fb60 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n15. ./build/./src/Processors/Executors/PipelineExecutor.cpp:229: DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x15995b5a in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n16. ./build/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: DB::PipelineExecutor::executeImpl(unsigned long) @ 0x15995451 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n17. ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:274: DB::PipelineExecutor::execute(unsigned long) @ 0x159952f8 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n18. ./build/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:0: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) @ 0x159a270a in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n19. ./build/./base/base/../base/wide_integer_impl.h:786: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xf8df19c in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n20. ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: void* std::__1::__thread_proxy[abi:v15000]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0xf8e256e in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n21. ? @ 0x7f5e2c8a0609 in ?\r\n22. clone @ 0x7f5e2c7c5133 in ?\r\n\r\n```\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/44824/b859cc2ddcf70e78caa54c56422841f74f26f72c/fuzzer_astfuzzerasan/report.html\n",
  "hints_text": "",
  "created_at": "2023-01-02T17:58:00Z"
}