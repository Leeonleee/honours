{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 61091,
  "instance_id": "ClickHouse__ClickHouse-61091",
  "issue_numbers": [
    "61064"
  ],
  "base_commit": "2e61f2bb99189e457b9669b7a9e9084987ca144b",
  "patch": "diff --git a/src/Storages/StorageMerge.cpp b/src/Storages/StorageMerge.cpp\nindex 981f133791a5..f9f905624264 100644\n--- a/src/Storages/StorageMerge.cpp\n+++ b/src/Storages/StorageMerge.cpp\n@@ -231,9 +231,14 @@ bool StorageMerge::isRemote() const\n     return first_remote_table != nullptr;\n }\n \n-bool StorageMerge::tableSupportsPrewhere() const\n+bool StorageMerge::supportsPrewhere() const\n {\n-    /// NOTE: This check is used during query analysis as condition for applying\n+    return getFirstTable([](const auto & table) { return !table->supportsPrewhere(); }) == nullptr;\n+}\n+\n+bool StorageMerge::canMoveConditionsToPrewhere() const\n+{\n+    /// NOTE: This check and the above check are used during query analysis as condition for applying\n     /// \"move to PREWHERE\" optimization. However, it contains a logical race:\n     /// If new table that matches regexp for current storage and doesn't support PREWHERE\n     /// will appear after this check and before calling \"read\" method, the optimized query may fail.\ndiff --git a/src/Storages/StorageMerge.h b/src/Storages/StorageMerge.h\nindex 882744df675f..82f8fb78feca 100644\n--- a/src/Storages/StorageMerge.h\n+++ b/src/Storages/StorageMerge.h\n@@ -50,9 +50,11 @@ class StorageMerge final : public IStorage, WithContext\n     bool supportsFinal() const override { return true; }\n     bool supportsSubcolumns() const override { return true; }\n     bool supportsDynamicSubcolumns() const override { return true; }\n-    bool supportsPrewhere() const override { return tableSupportsPrewhere(); }\n+    bool supportsPrewhere() const override;\n     std::optional<NameSet> supportedPrewhereColumns() const override;\n \n+    bool canMoveConditionsToPrewhere() const override;\n+\n     QueryProcessingStage::Enum\n     getQueryProcessingStage(ContextPtr, QueryProcessingStage::Enum, const StorageSnapshotPtr &, SelectQueryInfo &) const override;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03012_prewhere_merge_distributed.reference b/tests/queries/0_stateless/03012_prewhere_merge_distributed.reference\nnew file mode 100644\nindex 000000000000..7ab1c8e82908\n--- /dev/null\n+++ b/tests/queries/0_stateless/03012_prewhere_merge_distributed.reference\n@@ -0,0 +1,5 @@\n+22\n+22\n+22\n+22\n+22\ndiff --git a/tests/queries/0_stateless/03012_prewhere_merge_distributed.sql b/tests/queries/0_stateless/03012_prewhere_merge_distributed.sql\nnew file mode 100644\nindex 000000000000..5c060440d1d2\n--- /dev/null\n+++ b/tests/queries/0_stateless/03012_prewhere_merge_distributed.sql\n@@ -0,0 +1,35 @@\n+DROP TABLE IF EXISTS test_local;\n+DROP TABLE IF EXISTS test_distributed;\n+\n+CREATE TABLE test_local ( name String, date Date, sign Int8 ) ENGINE MergeTree PARTITION BY date ORDER BY name SETTINGS index_granularity = 8192;\n+\n+CREATE TABLE test_distributed ( name String, date Date, sign Int8 ) ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), test_local, rand64());\n+\n+SET insert_distributed_sync = 1;\n+\n+INSERT INTO test_distributed (name, date, sign) VALUES ('1', '2024-01-01', 1),('2', '2024-01-02', 1),('3', '2024-01-03', 1),('4', '2024-01-04', 1),('5', '2024-01-05', 1),('6', '2024-01-06', 1),('7', '2024-01-07', 1),('8', '2024-01-08', 1),('9', '2024-01-09', 1),('10', '2024-01-10', 1),('11', '2024-01-11', 1);\n+\n+SELECT count() FROM test_distributed WHERE name GLOBAL IN ( SELECT name FROM test_distributed );\n+\n+SET prefer_localhost_replica = 1;\n+\n+SELECT count() FROM merge(currentDatabase(), '^test_distributed$') WHERE name GLOBAL IN ( SELECT name FROM test_distributed );\n+SELECT count() FROM merge(currentDatabase(), '^test_distributed$') PREWHERE name GLOBAL IN ( SELECT name FROM test_distributed );\n+\n+SET prefer_localhost_replica = 0;\n+\n+SELECT count() FROM merge(currentDatabase(), '^test_distributed$') WHERE name GLOBAL IN ( SELECT name FROM test_distributed );\n+SELECT count() FROM merge(currentDatabase(), '^test_distributed$') PREWHERE name GLOBAL IN ( SELECT name FROM test_distributed );\n+\n+DROP TABLE test_local;\n+DROP TABLE test_distributed;\n+\n+DROP TABLE IF EXISTS test_log;\n+\n+CREATE TABLE test_log ( a int, b int ) ENGINE Log;\n+\n+INSERT INTO test_log values (1, 2);\n+\n+SELECT count() FROM merge(currentDatabase(), '^test_log$') PREWHERE a = 3; -- { serverError 182 }\n+\n+DROP TABLE test_log;\n",
  "problem_statement": "Prewhere over engine=Merge was broken between 24.1 and 24.2\nThe test:\r\n\r\n```\r\nDROP TABLE IF EXISTS default.test_local ON CLUSTER '{cluster}';\r\nDROP TABLE IF EXISTS default.test_distributed ON CLUSTER '{cluster}';\r\n\r\nCREATE TABLE default.test_local ON CLUSTER '{cluster}' \r\n( name String,date Date,sign Int8 ) \r\nENGINE = ReplicatedCollapsingMergeTree('/clickhouse/tables/{uuid}/{shard}', '{replica}', sign)\r\nPARTITION BY date\r\nORDER BY name\r\nSETTINGS index_granularity = 8192;\r\n\r\nCREATE TABLE default.test_distributed ON CLUSTER '{cluster}' ( name String, date Date, sign Int8 ) \r\nENGINE = Distributed('{cluster}', 'default', 'test_local', rand64());\r\n\r\nSET insert_distributed_sync = 1;\r\n\r\nINSERT INTO default.test_distributed (name, date, sign) VALUES ('1', '2024-01-01', 1),('2', '2024-01-02', 1),('3', '2024-01-03', 1),('4', '2024-01-04', 1),('5', '2024-01-05', 1),('6', '2024-01-06', 1),('7', '2024-01-07', 1),('8', '2024-01-08', 1),('9', '2024-01-09', 1),('10', '2024-01-10', 1),('11', '2024-01-11', 1);\r\n\r\nSYSTEM SYNC REPLICA ON CLUSTER '{cluster}' default.test_local;\r\n\r\nSELECT hostName(), * FROM clusterAllReplicas('{cluster}', 'default', 'test_local') ORDER BY date FORMAT PrettyCompactMonoBlock;\r\n\r\nSELECT count() FROM default.test_distributed WHERE name GLOBAL IN ( SELECT name FROM default.test_distributed );\r\n\r\nSET prefer_localhost_replica = 1;\r\n\r\nSELECT count() FROM merge('default', '^test_distributed$') WHERE name GLOBAL IN ( SELECT name FROM default.test_distributed );\r\nSELECT count() FROM merge('default', '^test_distributed$') PREWHERE name GLOBAL IN ( SELECT name FROM default.test_distributed );\r\n\r\nSET prefer_localhost_replica = 0;\r\n\r\nSELECT count() FROM merge('default', '^test_distributed$') WHERE name GLOBAL IN ( SELECT name FROM default.test_distributed );\r\nSELECT count() FROM merge('default', '^test_distributed$') PREWHERE name GLOBAL IN ( SELECT name FROM default.test_distributed );\r\n```\r\n\r\n```\r\nReceived exception from server (version 24.2.1):\r\nCode: 182. DB::Exception: Received from localhost:9000. DB::Exception: Storage Merge doesn't support PREWHERE. Stack trace:\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000cf5565b\r\n1. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x00000000078c7743\r\n2. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>)::$_0::operator()(bool) const @ 0x0000000011b17056\r\n3. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000011b0d305\r\n4. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000011bce338\r\n5. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerInterpreterSelectWithUnionQuery(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.9474012881415105514) @ 0x0000000011bd4737\r\n6. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x0000000011af1f99\r\n7. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000011f6616a\r\n8. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000011f62e7a\r\n9. DB::TCPHandler::runImpl() @ 0x0000000012fb9429\r\n10. DB::TCPHandler::run() @ 0x0000000012fd14d9\r\n11. Poco::Net::TCPServerConnection::start() @ 0x00000000158af152\r\n12. Poco::Net::TCPServerDispatcher::run() @ 0x00000000158aff51\r\n13. Poco::PooledThread::run() @ 0x00000000159a85e7\r\n14. Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000159a6c1d\r\n15. ? @ 0x00007fa46773f609\r\n16. ? @ 0x00007fa467664353\r\n. (ILLEGAL_PREWHERE)\r\n```\r\n\r\nDiscovered while testsing #59401 \n",
  "hints_text": "@SaltTan  it's about Engine Merge on top of Distributed\r\n\r\nhttps://fiddle.clickhouse.com/e6ed000b-6b19-47bd-95db-9745fd5b729c",
  "created_at": "2024-03-08T12:09:41Z"
}