{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11653,
  "instance_id": "ClickHouse__ClickHouse-11653",
  "issue_numbers": [
    "7876"
  ],
  "base_commit": "f53da4d36b8c3a214567c935caed478edce08363",
  "patch": "diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex 879b885cf66e..83417a3229b1 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -722,10 +722,10 @@ struct ConvertThroughParsing\n                         parsed = ToDataType::tryReadText(vec_to[i], read_buffer, ToDataType::maxPrecision(), vec_to.getScale());\n                     else\n                         parsed = tryParseImpl<ToDataType>(vec_to[i], read_buffer, local_time_zone);\n-\n-                    parsed = parsed && isAllRead(read_buffer);\n                 }\n \n+                parsed = parsed && isAllRead(read_buffer);\n+\n                 if (!parsed)\n                     vec_to[i] = 0;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00569_parse_date_time_best_effort.reference b/tests/queries/0_stateless/00569_parse_date_time_best_effort.reference\nindex b873e8b848d5..bf11e1c1d71c 100644\n--- a/tests/queries/0_stateless/00569_parse_date_time_best_effort.reference\n+++ b/tests/queries/0_stateless/00569_parse_date_time_best_effort.reference\n@@ -13,7 +13,7 @@\n  11 Feb 2018 06:40:50 +0300        2018-02-11 03:40:50   2018-02-11 03:40:50 \n  17 Apr 2 1:2:3                    2000-04-17 01:02:03   2000-04-17 01:02:03 \n  19700102 01:00:00                 1970-01-02 01:00:00   1970-01-02 01:00:00 \n- 1970010201:00:00                  2032-06-06 02:03:21   2032-06-06 02:03:21 \n+ 1970010201:00:00                                 \u1d3a\u1d41\u1d38\u1d38   0000-00-00 00:00:00 \n  19700102010203                    1970-01-02 01:02:03   1970-01-02 01:02:03 \n  19700102010203Z                   1970-01-02 01:02:03   1970-01-02 01:02:03 \n  1970/01/02 010203Z                1970-01-02 01:02:03   1970-01-02 01:02:03 \n@@ -61,7 +61,7 @@\n  2017/01/32                        0000-00-00 00:00:00   0000-00-00 00:00:00 \n  2017-01 MSD Jun                   2017-05-31 20:00:00   2017-05-31 20:00:00 \n  201701 MSD Jun                    2017-05-31 20:00:00   2017-05-31 20:00:00 \n- 2017 25 1:2:3                     0000-00-00 00:00:00   0000-00-00 00:00:00 \n+ 2017 25 1:2:3                                    \u1d3a\u1d41\u1d38\u1d38   0000-00-00 00:00:00 \n  2017 25 Apr 1:2:3                 2017-04-01 01:02:03   2017-04-01 01:02:03 \n  2017 Apr 01 11:22:33              2017-04-01 11:22:33   2017-04-01 11:22:33 \n  2017 Apr 02 01/02/03 UTC+0300                    \u1d3a\u1d41\u1d38\u1d38   0000-00-00 00:00:00 \n@@ -74,8 +74,8 @@\n  2017 Apr 02 1:2:3                 2017-04-02 01:02:03   2017-04-02 01:02:03 \n  2017 Apr 02 1:2:33                2017-04-02 01:02:33   2017-04-02 01:02:33 \n  2017 Apr 02 1:2:3 MSK             2017-04-01 22:02:03   2017-04-01 22:02:03 \n- 2017 Apr 02 1:2:3 MSK 2017        2017-04-01 22:02:03   2017-04-01 22:02:03 \n- 2017 Apr 02 1:2:3 MSK 2018        2017-04-01 22:02:03   2017-04-01 22:02:03 \n+ 2017 Apr 02 1:2:3 MSK 2017                       \u1d3a\u1d41\u1d38\u1d38   0000-00-00 00:00:00 \n+ 2017 Apr 02 1:2:3 MSK 2018                       \u1d3a\u1d41\u1d38\u1d38   0000-00-00 00:00:00 \n  2017 Apr 02 1:2:3 UTC+0000        2017-04-02 01:02:03   2017-04-02 01:02:03 \n  2017 Apr 02 1:2:3 UTC+0300        2017-04-01 22:02:03   2017-04-01 22:02:03 \n  2017 Apr 02 1:2:3 UTC+0400        2017-04-01 21:02:03   2017-04-01 21:02:03 \n@@ -101,6 +101,6 @@\n  25 Jan 2017 1:2:3 Z PM            2017-01-25 13:02:03   2017-01-25 13:02:03 \n  25 Jan 2017 1:2:3Z PM             2017-01-25 13:02:03   2017-01-25 13:02:03 \n  25 Jan 2017 1:2:3 Z PM +03:00     2017-01-25 10:02:03   2017-01-25 10:02:03 \n- Jun, 11 Feb 2018 06:40:50 +0300   2000-06-01 00:00:00   2000-06-01 00:00:00 \n+ Jun, 11 Feb 2018 06:40:50 +0300                  \u1d3a\u1d41\u1d38\u1d38   0000-00-00 00:00:00 \n  Sun 11 Feb 2018 06:40:50 +0300    2018-02-11 03:40:50   2018-02-11 03:40:50 \n  Sun, 11 Feb 2018 06:40:50 +0300   2018-02-11 03:40:50   2018-02-11 03:40:50 \ndiff --git a/tests/queries/0_stateless/01313_parse_date_time_best_effort_null_zero.reference b/tests/queries/0_stateless/01313_parse_date_time_best_effort_null_zero.reference\nnew file mode 100644\nindex 000000000000..90bb776ca107\n--- /dev/null\n+++ b/tests/queries/0_stateless/01313_parse_date_time_best_effort_null_zero.reference\n@@ -0,0 +1,6 @@\n+\\N\n+0000-00-00 00:00:00\n+\\N\n+0000-00-00 00:00:00.000\n+\\N\n+0000-00-00 00:00:00\ndiff --git a/tests/queries/0_stateless/01313_parse_date_time_best_effort_null_zero.sql b/tests/queries/0_stateless/01313_parse_date_time_best_effort_null_zero.sql\nnew file mode 100644\nindex 000000000000..69b66b46df71\n--- /dev/null\n+++ b/tests/queries/0_stateless/01313_parse_date_time_best_effort_null_zero.sql\n@@ -0,0 +1,12 @@\n+SELECT parseDateTimeBestEffort('<Empty>'); -- { serverError 6 }\n+SELECT parseDateTimeBestEffortOrNull('<Empty>');\n+SELECT parseDateTimeBestEffortOrZero('<Empty>');\n+\n+SELECT parseDateTime64BestEffort('<Empty>'); -- { serverError 6 }\n+SELECT parseDateTime64BestEffortOrNull('<Empty>');\n+SELECT parseDateTime64BestEffortOrZero('<Empty>');\n+\n+SET date_time_input_format = 'best_effort';\n+SELECT toDateTime('<Empty>'); -- { serverError 41 }\n+SELECT toDateTimeOrNull('<Empty>');\n+SELECT toDateTimeOrZero('<Empty>');\n",
  "problem_statement": "parseDateTimeBestEffortOrZero / OrNull misbehaves\nThat is correct:\r\n```\r\nSELECT parseDateTimeBestEffort('<Empty>')\r\n\r\nReceived exception from server (version 19.18.1):\r\nCode: 6. DB::Exception: Received from localhost:9000. DB::Exception: Cannot parse string '<Empty>' as DateTime: syntax error at begin of string. \r\n```\r\n\r\nThat is not:\r\n```\r\nSELECT parseDateTimeBestEffortOrNull('<Empty>')\r\n\r\n\u250c\u2500parseDateTimeBestEffortOrNull('<Empty>')\u2500\u2510\r\n\u2502                      2000-01-01 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.004 sec. \r\n\r\nSELECT parseDateTimeBestEffortOrZero('<Empty>')\r\n\r\n\u250c\u2500parseDateTimeBestEffortOrZero('<Empty>')\u2500\u2510\r\n\u2502                      2000-01-01 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.004 sec. \r\n```\r\n\n",
  "hints_text": "as a workaround / expected behavior:\r\n```\r\nSET date_time_input_format = 'best_effort'\r\n\r\nSELECT toDateTime('<Empty>')\r\n\r\nReceived exception from server (version 19.18.1):\r\nCode: 41. DB::Exception: Received from localhost:9000. DB::Exception: Cannot parse datetime: Cannot parse DateTime from String. \r\n\r\n0 rows in set. Elapsed: 0.007 sec. \r\n\r\nSELECT toDateTimeOrZero('<Empty>')\r\n\r\n\u250c\u2500toDateTimeOrZero('<Empty>')\u2500\u2510\r\n\u2502         0000-00-00 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.010 sec. \r\n\r\nSELECT toDateTimeOrNull('<Empty>')\r\n\r\n\u250c\u2500toDateTimeOrNull('<Empty>')\u2500\u2510\r\n\u2502                        \u1d3a\u1d41\u1d38\u1d38 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.005 sec. \r\n```",
  "created_at": "2020-06-14T01:47:03Z"
}