{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 5919,
  "instance_id": "ClickHouse__ClickHouse-5919",
  "issue_numbers": [
    "5310"
  ],
  "base_commit": "97b8b2c769093cae362cd68eff021d737613b485",
  "patch": "diff --git a/dbms/src/Storages/MergeTree/KeyCondition.cpp b/dbms/src/Storages/MergeTree/KeyCondition.cpp\nindex 8990f322ea0c..442bab743827 100644\n--- a/dbms/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/dbms/src/Storages/MergeTree/KeyCondition.cpp\n@@ -191,6 +191,27 @@ const KeyCondition::AtomMap KeyCondition::atom_map\n \n             String right_bound = firstStringThatIsGreaterThanAllStringsWithPrefix(prefix);\n \n+            out.function = RPNElement::FUNCTION_IN_RANGE;\n+            out.range = !right_bound.empty()\n+                ? Range(prefix, true, right_bound, false)\n+                : Range::createLeftBounded(prefix, true);\n+\n+            return true;\n+        }\n+    },\n+    {\n+        \"startsWith\",\n+        [] (RPNElement & out, const Field & value)\n+        {\n+            if (value.getType() != Field::Types::String)\n+                return false;\n+\n+            String prefix = value.get<const String &>();\n+            if (prefix.empty())\n+                return false;\n+\n+            String right_bound = firstStringThatIsGreaterThanAllStringsWithPrefix(prefix);\n+\n             out.function = RPNElement::FUNCTION_IN_RANGE;\n             out.range = !right_bound.empty()\n                 ? Range(prefix, true, right_bound, false)\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00963_startsWith_force_primary_key.reference b/dbms/tests/queries/0_stateless/00963_startsWith_force_primary_key.reference\nnew file mode 100644\nindex 000000000000..f1e5eeed2d93\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00963_startsWith_force_primary_key.reference\n@@ -0,0 +1,2 @@\n+3\n+2\ndiff --git a/dbms/tests/queries/0_stateless/00963_startsWith_force_primary_key.sql b/dbms/tests/queries/0_stateless/00963_startsWith_force_primary_key.sql\nnew file mode 100644\nindex 000000000000..b3895a93b641\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00963_startsWith_force_primary_key.sql\n@@ -0,0 +1,6 @@\n+DROP TABLE IF EXISTS test_startsWith;\n+CREATE TABLE test_startsWith (a String) Engine = MergeTree PARTITION BY tuple() ORDER BY a;\n+INSERT INTO test_startsWith (a) values ('a'), ('abcd'), ('bbb'), (''), ('abc');\n+SELECT count() from test_startsWith where startsWith(a, 'a') settings force_primary_key=1;\n+SELECT count() from test_startsWith where startsWith(a, 'abc') settings force_primary_key=1;\n+DROP TABLE test_startsWith;\n",
  "problem_statement": "startsWith() does not use the PK index\n\r\n**Describe the bug**\r\n\r\nstartsWith(a, 'a') does not use the index, though functionally identical like 'a%' does. This is confusing. \r\n\r\n**How to reproduce**\r\n\r\n```\r\ncreate table test_index (a String) Engine = MergeTree PARTITION BY tuple() ORDER BY a;\r\n\r\nINSERT INTO test_index (a) values ('a');\r\n\r\nselect count() from test_index where startsWith(a, 'abc') settings force_primary_key=1;\r\n\r\nReceived exception from server (version 19.4.3):\r\nCode: 277. DB::Exception: Received from localhost:9000, ::1. DB::Exception: Primary key (a) is not used and setting 'force_primary_key' is set.. \r\n```\r\n\r\nSimilar query with LIKE:\r\n\r\n```\r\nselect count() from test_index where a like 'abc%' settings force_primary_key=1;\r\n\r\nOk.\r\n```\r\n\r\n**Expected behaviour**\r\n\r\nstartsWith to use index if possible.\n",
  "hints_text": "How to implement:\r\n`KeyCondition.cpp`, look at `atom_map` and its usage.",
  "created_at": "2019-07-07T15:58:01Z"
}