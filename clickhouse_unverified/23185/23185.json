{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23185,
  "instance_id": "ClickHouse__ClickHouse-23185",
  "issue_numbers": [
    "22573"
  ],
  "base_commit": "b5cbbce31402620037509a37590295fc43766ca2",
  "patch": "diff --git a/src/Databases/DatabaseOnDisk.cpp b/src/Databases/DatabaseOnDisk.cpp\nindex 358f9030db51..14ad1c7e4c56 100644\n--- a/src/Databases/DatabaseOnDisk.cpp\n+++ b/src/Databases/DatabaseOnDisk.cpp\n@@ -58,7 +58,7 @@ std::pair<String, StoragePtr> createTableFromAST(\n         auto table_function = factory.get(ast_create_query.as_table_function, context);\n         ColumnsDescription columns;\n         if (ast_create_query.columns_list && ast_create_query.columns_list->columns)\n-            columns = InterpreterCreateQuery::getColumnsDescription(*ast_create_query.columns_list->columns, context, false);\n+            columns = InterpreterCreateQuery::getColumnsDescription(*ast_create_query.columns_list->columns, context, true);\n         StoragePtr storage = table_function->execute(ast_create_query.as_table_function, context, ast_create_query.table, std::move(columns));\n         storage->renameInMemory(ast_create_query);\n         return {ast_create_query.table, storage};\n@@ -69,7 +69,7 @@ std::pair<String, StoragePtr> createTableFromAST(\n     if (!ast_create_query.columns_list || !ast_create_query.columns_list->columns)\n         throw Exception(\"Missing definition of columns.\", ErrorCodes::EMPTY_LIST_OF_COLUMNS_PASSED);\n \n-    ColumnsDescription columns = InterpreterCreateQuery::getColumnsDescription(*ast_create_query.columns_list->columns, context, false);\n+    ColumnsDescription columns = InterpreterCreateQuery::getColumnsDescription(*ast_create_query.columns_list->columns, context, true);\n     ConstraintsDescription constraints = InterpreterCreateQuery::getConstraintsDescription(ast_create_query.columns_list->constraints);\n \n     return\ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 6d234f5f846e..8db4415822f4 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -363,7 +363,7 @@ ASTPtr InterpreterCreateQuery::formatConstraints(const ConstraintsDescription &\n }\n \n ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n-    const ASTExpressionList & columns_ast, ContextPtr context_, bool sanity_check_compression_codecs)\n+    const ASTExpressionList & columns_ast, ContextPtr context_, bool attach)\n {\n     /// First, deduce implicit types.\n \n@@ -372,6 +372,7 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n \n     ASTPtr default_expr_list = std::make_shared<ASTExpressionList>();\n     NamesAndTypesList column_names_and_types;\n+    bool make_columns_nullable = !attach && context_->getSettingsRef().data_type_default_nullable;\n \n     for (const auto & ast : columns_ast.children)\n     {\n@@ -390,8 +391,7 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n                 if (*col_decl.null_modifier)\n                     column_type = makeNullable(column_type);\n             }\n-            /// XXX: context_ or context ?\n-            else if (context_->getSettingsRef().data_type_default_nullable)\n+            else if (make_columns_nullable)\n             {\n                 column_type = makeNullable(column_type);\n             }\n@@ -436,6 +436,7 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n     if (!default_expr_list->children.empty())\n         defaults_sample_block = validateColumnsDefaultsAndGetSampleBlock(default_expr_list, column_names_and_types, context_);\n \n+    bool sanity_check_compression_codecs = !attach && !context_->getSettingsRef().allow_suspicious_codecs;\n     ColumnsDescription res;\n     auto name_type_it = column_names_and_types.begin();\n     for (auto ast_it = columns_ast.children.begin(); ast_it != columns_ast.children.end(); ++ast_it, ++name_type_it)\n@@ -511,8 +512,7 @@ InterpreterCreateQuery::TableProperties InterpreterCreateQuery::setProperties(AS\n \n         if (create.columns_list->columns)\n         {\n-            bool sanity_check_compression_codecs = !create.attach && !getContext()->getSettingsRef().allow_suspicious_codecs;\n-            properties.columns = getColumnsDescription(*create.columns_list->columns, getContext(), sanity_check_compression_codecs);\n+            properties.columns = getColumnsDescription(*create.columns_list->columns, getContext(), create.attach);\n         }\n \n         if (create.columns_list->indices)\ndiff --git a/src/Interpreters/InterpreterCreateQuery.h b/src/Interpreters/InterpreterCreateQuery.h\nindex 30db7dbdc8ee..f674bf19123e 100644\n--- a/src/Interpreters/InterpreterCreateQuery.h\n+++ b/src/Interpreters/InterpreterCreateQuery.h\n@@ -53,7 +53,7 @@ class InterpreterCreateQuery : public IInterpreter, WithContext\n \n     /// Obtain information about columns, their types, default values and column comments,\n     ///  for case when columns in CREATE query is specified explicitly.\n-    static ColumnsDescription getColumnsDescription(const ASTExpressionList & columns, ContextPtr context, bool sanity_check_compression_codecs);\n+    static ColumnsDescription getColumnsDescription(const ASTExpressionList & columns, ContextPtr context, bool attach);\n     static ConstraintsDescription getConstraintsDescription(const ASTExpressionList * constraints);\n \n     static void prepareOnClusterQuery(ASTCreateQuery & create, ContextPtr context, const String & cluster_name);\ndiff --git a/src/Interpreters/InterpreterSystemQuery.cpp b/src/Interpreters/InterpreterSystemQuery.cpp\nindex c13b9d970379..02d5296a9d20 100644\n--- a/src/Interpreters/InterpreterSystemQuery.cpp\n+++ b/src/Interpreters/InterpreterSystemQuery.cpp\n@@ -429,7 +429,7 @@ StoragePtr InterpreterSystemQuery::tryRestartReplica(const StorageID & replica,\n     auto & create = create_ast->as<ASTCreateQuery &>();\n     create.attach = true;\n \n-    auto columns = InterpreterCreateQuery::getColumnsDescription(*create.columns_list->columns, system_context, false);\n+    auto columns = InterpreterCreateQuery::getColumnsDescription(*create.columns_list->columns, system_context, true);\n     auto constraints = InterpreterCreateQuery::getConstraintsDescription(create.columns_list->constraints);\n     auto data_path = database->getTableDataPath(create);\n \ndiff --git a/src/TableFunctions/parseColumnsListForTableFunction.cpp b/src/TableFunctions/parseColumnsListForTableFunction.cpp\nindex 659aa779edee..08e80ef425ad 100644\n--- a/src/TableFunctions/parseColumnsListForTableFunction.cpp\n+++ b/src/TableFunctions/parseColumnsListForTableFunction.cpp\n@@ -25,7 +25,7 @@ ColumnsDescription parseColumnsListFromString(const std::string & structure, Con\n     if (!columns_list)\n         throw Exception(\"Could not cast AST to ASTExpressionList\", ErrorCodes::LOGICAL_ERROR);\n \n-    return InterpreterCreateQuery::getColumnsDescription(*columns_list, context, !settings.allow_suspicious_codecs);\n+    return InterpreterCreateQuery::getColumnsDescription(*columns_list, context, false);\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01269_create_with_null.reference b/tests/queries/0_stateless/01269_create_with_null.reference\nindex 86be41bc06ad..73f834da75ab 100644\n--- a/tests/queries/0_stateless/01269_create_with_null.reference\n+++ b/tests/queries/0_stateless/01269_create_with_null.reference\n@@ -2,3 +2,6 @@ Nullable(Int32)\tInt32\tNullable(Int32)\tInt32\n CREATE TABLE default.data_null\\n(\\n    `a` Nullable(Int32),\\n    `b` Int32,\\n    `c` Nullable(Int32),\\n    `d` Int32\\n)\\nENGINE = Memory\n Nullable(Int32)\tInt32\tNullable(Int32)\tNullable(Int32)\n CREATE TABLE default.set_null\\n(\\n    `a` Nullable(Int32),\\n    `b` Int32,\\n    `c` Nullable(Int32),\\n    `d` Nullable(Int32)\\n)\\nENGINE = Memory\n+CREATE TABLE default.set_null\\n(\\n    `a` Nullable(Int32),\\n    `b` Int32,\\n    `c` Nullable(Int32),\\n    `d` Nullable(Int32)\\n)\\nENGINE = Memory\n+CREATE TABLE default.cannot_be_nullable\\n(\\n    `n` Nullable(Int8),\\n    `a` Array(UInt8)\\n)\\nENGINE = Memory\n+CREATE TABLE default.cannot_be_nullable\\n(\\n    `n` Nullable(Int8),\\n    `a` Array(UInt8)\\n)\\nENGINE = Memory\ndiff --git a/tests/queries/0_stateless/01269_create_with_null.sql b/tests/queries/0_stateless/01269_create_with_null.sql\nindex 856b6ea75f47..faa6b84e9e4e 100644\n--- a/tests/queries/0_stateless/01269_create_with_null.sql\n+++ b/tests/queries/0_stateless/01269_create_with_null.sql\n@@ -1,5 +1,6 @@\n DROP TABLE IF EXISTS data_null;\n DROP TABLE IF EXISTS set_null;\n+DROP TABLE IF EXISTS cannot_be_nullable;\n \n SET data_type_default_nullable='false';\n \n@@ -45,6 +46,17 @@ INSERT INTO set_null VALUES (NULL, 2, NULL, NULL);\n SELECT toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d) FROM set_null;\n \n SHOW CREATE TABLE set_null;\n+DETACH TABLE set_null;\n+ATTACH TABLE set_null;\n+SHOW CREATE TABLE set_null;\n+\n+CREATE TABLE cannot_be_nullable (n Int8, a Array(UInt8)) ENGINE=Memory; -- { serverError 43 }\n+CREATE TABLE cannot_be_nullable (n Int8, a Array(UInt8) NOT NULL) ENGINE=Memory;\n+SHOW CREATE TABLE cannot_be_nullable;\n+DETACH TABLE cannot_be_nullable;\n+ATTACH TABLE cannot_be_nullable;\n+SHOW CREATE TABLE cannot_be_nullable;\n \n DROP TABLE data_null;\n DROP TABLE set_null;\n+DROP TABLE cannot_be_nullable;\n",
  "problem_statement": "data_type_default_nullable=1 in default profile prevent clickhouse from start\n**How to reproduce**\r\nClickhouse version 21.5\r\n\r\n```\r\ncat /etc/clickhouse-server/users.xml\r\n<?xml version=\"1.0\"?>\r\n<yandex>\r\n    <!-- Profiles of settings. -->\r\n    <profiles>\r\n        <!-- Default settings. -->\r\n        <default>\r\n            <data_type_default_nullable>1</data_type_default_nullable>\r\n            <load_balancing>random</load_balancing>\r\n        </default>\r\n....\r\n\r\n2021.04.04 01:23:42.453678 [ 29048 ] {} <Error> Application: DB::Exception: Nested type Array(UInt64) cannot be inside Nullable type: Cannot attach table `system`.`crash_log` from metadata file /var/lib/clickhouse/metadata/system/crash_log.sql from query ATTACH TABLE system.crash_log (`event_date` Date, `event_time` DateTime, `timestamp_ns` UInt64, `signal` Int32, `thread_id` UInt64, `query_id` String, `trace` Array(UInt64), `trace_full` Array(String), `version` String, `revision` UInt32, `build_id` String) ENGINE = MergeTree ORDER BY (event_date, event_time) SETTINGS index_granularity = 8192: while loading database `system` from path /var/lib/clickhouse/metadata/system\r\n```\n",
  "hints_text": "",
  "created_at": "2021-04-16T10:32:00Z",
  "modified_files": [
    "src/Databases/DatabaseOnDisk.cpp",
    "src/Interpreters/InterpreterCreateQuery.cpp",
    "src/Interpreters/InterpreterCreateQuery.h",
    "src/Interpreters/InterpreterSystemQuery.cpp",
    "src/TableFunctions/parseColumnsListForTableFunction.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01269_create_with_null.reference",
    "tests/queries/0_stateless/01269_create_with_null.sql"
  ]
}