{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16612,
  "instance_id": "ClickHouse__ClickHouse-16612",
  "issue_numbers": [
    "9359"
  ],
  "base_commit": "268c80520fb13fdeaaff6085d8705fb470f142cd",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex ddb1d738031a..6a8bdbea1ec7 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -6,6 +6,7 @@\n #include <Common/escapeForFileName.h>\n #include <Common/typeid_cast.h>\n #include <Common/Macros.h>\n+#include <Common/randomSeed.h>\n \n #include <Core/Defines.h>\n #include <Core/Settings.h>\n@@ -362,7 +363,7 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n             if (col_decl.type)\n             {\n                 const auto & final_column_name = col_decl.name;\n-                const auto tmp_column_name = final_column_name + \"_tmp\";\n+                const auto tmp_column_name = final_column_name + \"_tmp_alter\" + toString(randomSeed());\n                 const auto * data_type_ptr = column_names_and_types.back().type.get();\n \n                 default_expr_list->children.emplace_back(\ndiff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex 8cae78667486..559121d6911e 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -22,12 +22,11 @@\n #include <Parsers/ASTIndexDeclaration.h>\n #include <Parsers/ASTLiteral.h>\n #include <Parsers/ASTSetQuery.h>\n+#include <Parsers/queryToString.h>\n #include <Storages/AlterCommands.h>\n #include <Storages/IStorage.h>\n #include <Common/typeid_cast.h>\n-\n-\n-#include <Parsers/queryToString.h>\n+#include <Common/randomSeed.h>\n \n \n namespace DB\n@@ -1117,7 +1116,7 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, const Con\n                     data_type_ptr = command.data_type;\n \n                 const auto & final_column_name = column_name;\n-                const auto tmp_column_name = final_column_name + \"_tmp\";\n+                const auto tmp_column_name = final_column_name + \"_tmp_alter\" + toString(randomSeed());\n \n                 default_expr_list->children.emplace_back(setAlias(\n                     addTypeConversionToAST(std::make_shared<ASTIdentifier>(tmp_column_name), data_type_ptr->getName()),\n@@ -1133,7 +1132,7 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, const Con\n                     continue;\n \n                 const auto & final_column_name = column_name;\n-                const auto tmp_column_name = final_column_name + \"_tmp\";\n+                const auto tmp_column_name = final_column_name + \"_tmp_alter\" + toString(randomSeed());\n                 const auto data_type_ptr = command.data_type;\n \n                 default_expr_list->children.emplace_back(setAlias(\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01093_cyclic_defaults_filimonov.sql b/tests/queries/0_stateless/01093_cyclic_defaults_filimonov.sql\nindex 548cd794ba31..f5f88db9d666 100644\n--- a/tests/queries/0_stateless/01093_cyclic_defaults_filimonov.sql\n+++ b/tests/queries/0_stateless/01093_cyclic_defaults_filimonov.sql\n@@ -1,7 +1,7 @@\n CREATE TABLE test\n (\n-    `a1` UInt64 DEFAULT a + 1,\n-    `a1` UInt64 DEFAULT a + 1,\n+    `a0` UInt64 DEFAULT a1 + 1,\n+    `a1` UInt64 DEFAULT a0 + 1,\n     `a2` UInt64 DEFAULT a3 + a4,\n     `a3` UInt64 DEFAULT a2 + 1,\n     `a4` UInt64 ALIAS a3 + 1\ndiff --git a/tests/queries/0_stateless/01552_alter_name_collision.reference b/tests/queries/0_stateless/01552_alter_name_collision.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01552_alter_name_collision.sql b/tests/queries/0_stateless/01552_alter_name_collision.sql\nnew file mode 100644\nindex 000000000000..dc717f1071a2\n--- /dev/null\n+++ b/tests/queries/0_stateless/01552_alter_name_collision.sql\n@@ -0,0 +1,3 @@\n+DROP TABLE IF EXISTS test;\n+CREATE TABLE test(test String DEFAULT 'test', test_tmp Int DEFAULT 1)ENGINE = Memory;\n+DROP TABLE test;\n",
  "problem_statement": "Bug with CREATE query default expression\n**How to reproduce**\r\n\r\n``` sql\r\nCREATE TABLE test(test String DEFAULT 'test', test_tmp Int DEFAULT 1)ENGINE = Memory;\r\n```\r\n\r\nrelated #8429\r\nI will fixes it.\n",
  "hints_text": "",
  "created_at": "2020-11-02T18:39:10Z"
}