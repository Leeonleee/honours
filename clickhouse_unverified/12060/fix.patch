diff --git a/src/DataTypes/DataTypeNullable.h b/src/DataTypes/DataTypeNullable.h
index 1766b399c2a8..22d403da6c43 100644
--- a/src/DataTypes/DataTypeNullable.h
+++ b/src/DataTypes/DataTypeNullable.h
@@ -90,7 +90,7 @@ class DataTypeNullable final : public IDataType
     bool canBeComparedWithCollation() const override { return nested_data_type->canBeComparedWithCollation(); }
     bool canBeUsedAsVersion() const override { return false; }
     bool isSummable() const override { return nested_data_type->isSummable(); }
-    bool canBeUsedInBooleanContext() const override { return nested_data_type->canBeUsedInBooleanContext(); }
+    bool canBeUsedInBooleanContext() const override { return nested_data_type->canBeUsedInBooleanContext() || onlyNull(); }
     bool haveMaximumSizeOfValue() const override { return nested_data_type->haveMaximumSizeOfValue(); }
     size_t getMaximumSizeOfValueInMemory() const override { return 1 + nested_data_type->getMaximumSizeOfValueInMemory(); }
     bool isNullable() const override { return true; }
diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp
index 44aa70b16978..bfb7abe8fe52 100644
--- a/src/Interpreters/ExpressionAnalyzer.cpp
+++ b/src/Interpreters/ExpressionAnalyzer.cpp
@@ -78,6 +78,7 @@ namespace ErrorCodes
     extern const int ILLEGAL_PREWHERE;
     extern const int LOGICAL_ERROR;
     extern const int ILLEGAL_TYPE_OF_ARGUMENT;
+    extern const int ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER;
 }
 
 namespace
@@ -636,6 +637,11 @@ bool SelectQueryExpressionAnalyzer::appendPrewhere(
     step.required_output.push_back(prewhere_column_name);
     step.can_remove_required_output.push_back(true);
 
+    auto filter_type = step.actions->getSampleBlock().getByName(prewhere_column_name).type;
+    if (!filter_type->canBeUsedInBooleanContext())
+        throw Exception("Invalid type for filter in PREWHERE: " + filter_type->getName(),
+                        ErrorCodes::ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER);
+
     {
         /// Remove unused source_columns from prewhere actions.
         auto tmp_actions = std::make_shared<ExpressionActions>(sourceColumns(), context);
@@ -716,11 +722,17 @@ bool SelectQueryExpressionAnalyzer::appendWhere(ExpressionActionsChain & chain,
 
     ExpressionActionsChain::Step & step = chain.lastStep(sourceColumns());
 
-    step.required_output.push_back(select_query->where()->getColumnName());
+    auto where_column_name = select_query->where()->getColumnName();
+    step.required_output.push_back(where_column_name);
     step.can_remove_required_output = {true};
 
     getRootActions(select_query->where(), only_types, step.actions);
 
+    auto filter_type = step.actions->getSampleBlock().getByName(where_column_name).type;
+    if (!filter_type->canBeUsedInBooleanContext())
+        throw Exception("Invalid type for filter in WHERE: " + filter_type->getName(),
+                        ErrorCodes::ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER);
+
     return true;
 }
 
diff --git a/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp b/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp
index 0e2dca76f58d..8cb24bb0cd6b 100644
--- a/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp
+++ b/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp
@@ -6,6 +6,7 @@
 #include <Columns/FilterDescription.h>
 #include <Common/typeid_cast.h>
 #include <DataTypes/DataTypeNothing.h>
+#include <DataTypes/DataTypeNullable.h>
 
 
 namespace DB
@@ -316,6 +317,12 @@ void MergeTreeBaseSelectProcessor::executePrewhereActions(Block & block, const P
             prewhere_info->alias_actions->execute(block);
 
         prewhere_info->prewhere_actions->execute(block);
+        auto & prewhere_column = block.getByName(prewhere_info->prewhere_column_name);
+
+        if (!prewhere_column.type->canBeUsedInBooleanContext())
+            throw Exception("Invalid type for filter in PREWHERE: " + prewhere_column.type->getName(),
+                            ErrorCodes::LOGICAL_ERROR);
+
         if (prewhere_info->remove_prewhere_column)
             block.erase(prewhere_info->prewhere_column_name);
         else
