{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46387,
  "instance_id": "ClickHouse__ClickHouse-46387",
  "issue_numbers": [
    "46345"
  ],
  "base_commit": "1c0c662fe1b5a98e0ab272820cb21afc9699bbb9",
  "patch": "diff --git a/src/Storages/MergeTree/MutateTask.cpp b/src/Storages/MergeTree/MutateTask.cpp\nindex 4a7224b0722b..4b9265488e71 100644\n--- a/src/Storages/MergeTree/MutateTask.cpp\n+++ b/src/Storages/MergeTree/MutateTask.cpp\n@@ -497,7 +497,15 @@ static NameSet collectFilesToSkip(\n     auto source_updated_stream_counts = getStreamCounts(source_part, updated_header.getNames());\n     auto new_updated_stream_counts = getStreamCounts(new_part, updated_header.getNames());\n \n-    /// Skip updated files\n+    /// Skip all modified files in new part.\n+    for (const auto & [stream_name, _] : new_updated_stream_counts)\n+    {\n+        files_to_skip.insert(stream_name + \".bin\");\n+        files_to_skip.insert(stream_name + mrk_extension);\n+    }\n+\n+    /// Skip files that we read from source part and do not write in new part.\n+    /// E.g. ALTER MODIFY from LowCardinality(String) to String.\n     for (const auto & [stream_name, _] : source_updated_stream_counts)\n     {\n         /// If we read shared stream and do not write it\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02565_update_empty_nested.reference b/tests/queries/0_stateless/02565_update_empty_nested.reference\nnew file mode 100644\nindex 000000000000..3d358ef673ef\n--- /dev/null\n+++ b/tests/queries/0_stateless/02565_update_empty_nested.reference\n@@ -0,0 +1,1 @@\n+450000\t450000\ndiff --git a/tests/queries/0_stateless/02565_update_empty_nested.sql b/tests/queries/0_stateless/02565_update_empty_nested.sql\nnew file mode 100644\nindex 000000000000..ca1c1f5f36e2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02565_update_empty_nested.sql\n@@ -0,0 +1,22 @@\n+DROP TABLE IF EXISTS t_update_empty_nested;\n+\n+CREATE TABLE t_update_empty_nested\n+(\n+    `id` UInt32,\n+    `nested.arr1` Array(UInt64),\n+)\n+ENGINE = MergeTree\n+ORDER BY id\n+SETTINGS min_bytes_for_wide_part = 0;\n+\n+SET mutations_sync = 2;\n+\n+INSERT INTO t_update_empty_nested SELECT 1, range(number % 10) FROM numbers(100000);\n+ALTER TABLE t_update_empty_nested ADD COLUMN `nested.arr2` Array(UInt64);\n+\n+ALTER TABLE t_update_empty_nested UPDATE `nested.arr2` = `nested.arr1` WHERE 1;\n+\n+SELECT * FROM t_update_empty_nested FORMAT Null;\n+SELECT sum(length(nested.arr1)), sum(length(nested.arr2)) FROM t_update_empty_nested;\n+\n+DROP TABLE t_update_empty_nested;\n",
  "problem_statement": "CORRUPTED_DATA after ALTER TABLE UPDATE on nested data structure.\nThis bug has been tested on version 23.1.3.\r\n\r\nBaseline test which works fine:\r\n\r\n```sql\r\nDROP TABLE IF EXISTS test;\r\nCREATE TABLE test(\r\n`id` UInt32,                               \r\n`data` Array(UInt32),\r\n)\r\nENGINE = MergeTree\r\nORDER BY id;\r\n\r\nINSERT INTO test (id, `data`) SELECT 1, [0,1,2,999999] FROM numbers(10000000);\r\nALTER TABLE test ADD COLUMN `data_dict` Array(LowCardinality(UInt32));\r\nALTER TABLE test UPDATE `data_dict` = `data` WHERE 1;\r\n\r\n-- after some time, 1-2 seconds run\r\nSELECT * FROM test LIMIT 10;\r\n-- works fine\r\n```\r\n\r\nIf we now use a nested data structure:\r\n```sql\r\nDROP TABLE IF EXISTS test;\r\nCREATE TABLE test(\r\n`id` UInt32,                               \r\n`nested.data` Array(UInt32),\r\n)\r\nENGINE = MergeTree\r\nORDER BY id;\r\n\r\nINSERT INTO test (id, `nested.data`) SELECT 1, [0,1,2,999999] FROM numbers(10000000);\r\nALTER TABLE test ADD COLUMN `nested.data_dict` Array(LowCardinality(UInt32));\r\nALTER TABLE test UPDATE `nested.data_dict` = `nested.data` WHERE 1;\r\n```\r\n\r\nAnd now run `select * from test limit 10;` after 1-2 seconds, we get the following error message:\r\n\r\n```\r\nReceived exception from server (version 23.1.3):\r\nCode: 246. DB::Exception: Received from localhost:9000. DB::Exception: Bad size of marks file '/work/clickhouse/store/022/02209c6c-bfcc-4874-b0f8-8e7708703923/all_1_5_1_11/nested.size0.mrk2': 0, must be: 15384: (while reading column nested.data): (while reading from part /work/clickhouse/store/022/02209c6c-bfcc-4874-b0f8-8e7708703923/all_1_5_1_11/ from mark 0 with max_rows_to_read = 10): While executing MergeTreeInOrder. (CORRUPTED_DATA)\r\n```\r\n\r\nSame error happens without `LowCardinality`.\r\n\r\n```\r\nDROP TABLE IF EXISTS test;\r\nCREATE TABLE test(\r\n`id` UInt32,                               \r\n`nested.data` Array(UInt32),\r\n)\r\nENGINE = MergeTree\r\nORDER BY id;\r\n\r\nINSERT INTO test (id, `nested.data`) SELECT 1, [0,1,2,999999] FROM numbers(10000000);\r\nALTER TABLE test ADD COLUMN `nested.data_dict` Array(UInt32);\r\nALTER TABLE test UPDATE `nested.data_dict` = `nested.data` WHERE 1;\r\n\r\n-- after some time, 1-2 seconds run\r\nSELECT * FROM test LIMIT 10;\r\n-- results in CORRUPTED_DATA\r\n``` \r\n\r\n\n",
  "hints_text": "the same with a single row (wide parts related)\r\n\r\n```\r\nCREATE TABLE test(\r\n`id` UInt32,                               \r\n`nested.data` Array(UInt32)\r\n)\r\nENGINE = MergeTree\r\nORDER BY id \r\nsettings min_bytes_for_wide_part=0\r\nas SELECT 1, [0,1,2,999999];\r\n\r\nALTER TABLE test ADD COLUMN `nested.data_dict` Array(UInt32);\r\n\r\nALTER TABLE test UPDATE `nested.data_dict` = `nested.data` WHERE 1 settings mutations_sync=1;\r\n\r\nselect * from test limit 10;\r\nDB::Exception: Bad size of marks file\r\n```",
  "created_at": "2023-02-14T02:32:36Z",
  "modified_files": [
    "src/Storages/MergeTree/MutateTask.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02565_update_empty_nested.reference",
    "b/tests/queries/0_stateless/02565_update_empty_nested.sql"
  ]
}