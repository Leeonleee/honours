diff --git a/src/Interpreters/ActionsDAG.h b/src/Interpreters/ActionsDAG.h
index 9bea1d1c0400..6c2513d0d928 100644
--- a/src/Interpreters/ActionsDAG.h
+++ b/src/Interpreters/ActionsDAG.h
@@ -212,6 +212,7 @@ class ActionsDAG
     /// Conversion should be possible with only usage of CAST function and renames.
     /// @param ignore_constant_values - Do not check that constants are same. Use value from result_header.
     /// @param add_casted_columns - Create new columns with converted values instead of replacing original.
+    /// @param new_names - Output parameter for new column names when add_casted_columns is used.
     static ActionsDAGPtr makeConvertingActions(
         const ColumnsWithTypeAndName & source,
         const ColumnsWithTypeAndName & result,
diff --git a/src/Storages/StorageView.cpp b/src/Storages/StorageView.cpp
index 75b48925704f..5119c5b121dc 100644
--- a/src/Storages/StorageView.cpp
+++ b/src/Storages/StorageView.cpp
@@ -31,7 +31,10 @@ namespace ErrorCodes
 
 
 StorageView::StorageView(
-    const StorageID & table_id_, const ASTCreateQuery & query, const ColumnsDescription & columns_, const String & comment)
+    const StorageID & table_id_,
+    const ASTCreateQuery & query,
+    const ColumnsDescription & columns_,
+    const String & comment)
     : IStorage(table_id_)
 {
     StorageInMemoryMetadata storage_metadata;
@@ -40,7 +43,6 @@ StorageView::StorageView(
 
     if (!query.select)
         throw Exception("SELECT query is not specified for " + getName(), ErrorCodes::INCORRECT_QUERY);
-
     SelectQueryDescription description;
 
     description.inner_query = query.select->ptr();
@@ -84,7 +86,12 @@ void StorageView::read(
         current_inner_query = query_info.view_query->clone();
     }
 
-    InterpreterSelectWithUnionQuery interpreter(current_inner_query, context, {}, column_names);
+    auto modified_context = Context::createCopy(context);
+    /// Use settings from global context,
+    /// because difference between settings set on VIEW creation and query execution can break queries
+    modified_context->setSettings(context->getGlobalContext()->getSettingsRef());
+
+    InterpreterSelectWithUnionQuery interpreter(current_inner_query, modified_context, {}, column_names);
     interpreter.buildQueryPlan(query_plan);
 
     /// It's expected that the columns read from storage are not constant.
diff --git a/src/Storages/StorageView.h b/src/Storages/StorageView.h
index 35e2c21265a2..a59328cd4710 100644
--- a/src/Storages/StorageView.h
+++ b/src/Storages/StorageView.h
@@ -49,7 +49,11 @@ class StorageView final : public shared_ptr_helper<StorageView>, public IStorage
     static ASTPtr restoreViewName(ASTSelectQuery & select_query, const ASTPtr & view_name);
 
 protected:
-    StorageView(const StorageID & table_id_, const ASTCreateQuery & query, const ColumnsDescription & columns_, const String & comment);
+    StorageView(
+        const StorageID & table_id_,
+        const ASTCreateQuery & query,
+        const ColumnsDescription & columns_,
+        const String & comment);
 };
 
 }
diff --git a/src/TableFunctions/TableFunctionView.cpp b/src/TableFunctions/TableFunctionView.cpp
index 8ca061c43d55..2cab8aeca252 100644
--- a/src/TableFunctions/TableFunctionView.cpp
+++ b/src/TableFunctions/TableFunctionView.cpp
@@ -42,7 +42,7 @@ StoragePtr TableFunctionView::executeImpl(
     const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const
 {
     auto columns = getActualTableStructure(context);
-    auto res = StorageView::create(StorageID(getDatabaseName(), table_name), create, columns, String{});
+    auto res = StorageView::create(StorageID(getDatabaseName(), table_name), create, columns, "");
     res->startup();
     return res;
 }
