{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 24095,
  "instance_id": "ClickHouse__ClickHouse-24095",
  "issue_numbers": [
    "20551"
  ],
  "base_commit": "3f88bc604eef8a79c5cc66e0b7a090677e6ed714",
  "patch": "diff --git a/src/Interpreters/ActionsDAG.h b/src/Interpreters/ActionsDAG.h\nindex 9bea1d1c0400..6c2513d0d928 100644\n--- a/src/Interpreters/ActionsDAG.h\n+++ b/src/Interpreters/ActionsDAG.h\n@@ -212,6 +212,7 @@ class ActionsDAG\n     /// Conversion should be possible with only usage of CAST function and renames.\n     /// @param ignore_constant_values - Do not check that constants are same. Use value from result_header.\n     /// @param add_casted_columns - Create new columns with converted values instead of replacing original.\n+    /// @param new_names - Output parameter for new column names when add_casted_columns is used.\n     static ActionsDAGPtr makeConvertingActions(\n         const ColumnsWithTypeAndName & source,\n         const ColumnsWithTypeAndName & result,\ndiff --git a/src/Storages/StorageView.cpp b/src/Storages/StorageView.cpp\nindex 75b48925704f..5119c5b121dc 100644\n--- a/src/Storages/StorageView.cpp\n+++ b/src/Storages/StorageView.cpp\n@@ -31,7 +31,10 @@ namespace ErrorCodes\n \n \n StorageView::StorageView(\n-    const StorageID & table_id_, const ASTCreateQuery & query, const ColumnsDescription & columns_, const String & comment)\n+    const StorageID & table_id_,\n+    const ASTCreateQuery & query,\n+    const ColumnsDescription & columns_,\n+    const String & comment)\n     : IStorage(table_id_)\n {\n     StorageInMemoryMetadata storage_metadata;\n@@ -40,7 +43,6 @@ StorageView::StorageView(\n \n     if (!query.select)\n         throw Exception(\"SELECT query is not specified for \" + getName(), ErrorCodes::INCORRECT_QUERY);\n-\n     SelectQueryDescription description;\n \n     description.inner_query = query.select->ptr();\n@@ -84,7 +86,12 @@ void StorageView::read(\n         current_inner_query = query_info.view_query->clone();\n     }\n \n-    InterpreterSelectWithUnionQuery interpreter(current_inner_query, context, {}, column_names);\n+    auto modified_context = Context::createCopy(context);\n+    /// Use settings from global context,\n+    /// because difference between settings set on VIEW creation and query execution can break queries\n+    modified_context->setSettings(context->getGlobalContext()->getSettingsRef());\n+\n+    InterpreterSelectWithUnionQuery interpreter(current_inner_query, modified_context, {}, column_names);\n     interpreter.buildQueryPlan(query_plan);\n \n     /// It's expected that the columns read from storage are not constant.\ndiff --git a/src/Storages/StorageView.h b/src/Storages/StorageView.h\nindex 35e2c21265a2..a59328cd4710 100644\n--- a/src/Storages/StorageView.h\n+++ b/src/Storages/StorageView.h\n@@ -49,7 +49,11 @@ class StorageView final : public shared_ptr_helper<StorageView>, public IStorage\n     static ASTPtr restoreViewName(ASTSelectQuery & select_query, const ASTPtr & view_name);\n \n protected:\n-    StorageView(const StorageID & table_id_, const ASTCreateQuery & query, const ColumnsDescription & columns_, const String & comment);\n+    StorageView(\n+        const StorageID & table_id_,\n+        const ASTCreateQuery & query,\n+        const ColumnsDescription & columns_,\n+        const String & comment);\n };\n \n }\ndiff --git a/src/TableFunctions/TableFunctionView.cpp b/src/TableFunctions/TableFunctionView.cpp\nindex 8ca061c43d55..2cab8aeca252 100644\n--- a/src/TableFunctions/TableFunctionView.cpp\n+++ b/src/TableFunctions/TableFunctionView.cpp\n@@ -42,7 +42,7 @@ StoragePtr TableFunctionView::executeImpl(\n     const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const\n {\n     auto columns = getActualTableStructure(context);\n-    auto res = StorageView::create(StorageID(getDatabaseName(), table_name), create, columns, String{});\n+    auto res = StorageView::create(StorageID(getDatabaseName(), table_name), create, columns, \"\");\n     res->startup();\n     return res;\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00109_shard_totals_after_having.sql b/tests/queries/0_stateless/00109_shard_totals_after_having.sql\nindex 72e5e011e19e..ae143f594c5e 100644\n--- a/tests/queries/0_stateless/00109_shard_totals_after_having.sql\n+++ b/tests/queries/0_stateless/00109_shard_totals_after_having.sql\n@@ -3,7 +3,9 @@ SET max_block_size = 100001;\n SET group_by_overflow_mode = 'any';\n \n DROP TABLE IF EXISTS numbers500k;\n-CREATE VIEW numbers500k AS SELECT number FROM system.numbers LIMIT 500000;\n+CREATE TABLE  numbers500k (number UInt32) ENGINE = TinyLog;\n+\n+INSERT INTO numbers500k SELECT number FROM system.numbers LIMIT 500000;\n \n SET totals_mode = 'after_having_auto';\n SELECT intDiv(number, 2) AS k, count(), argMax(toString(number), number) FROM remote('127.0.0.{2,3}', currentDatabase(), numbers500k) GROUP BY k WITH TOTALS ORDER BY k LIMIT 10;\ndiff --git a/tests/queries/0_stateless/01866_view_persist_settings.reference b/tests/queries/0_stateless/01866_view_persist_settings.reference\nnew file mode 100644\nindex 000000000000..07c96e768753\n--- /dev/null\n+++ b/tests/queries/0_stateless/01866_view_persist_settings.reference\n@@ -0,0 +1,34 @@\n+join_use_nulls = 1\n+-\n+1\t11\t0\n+2\t12\t22\n+3\t0\t23\n+-\n+1\t11\t0\n+2\t12\t22\n+3\t0\t23\n+-\n+1\t11\t\\N\n+2\t12\t22\n+3\t\\N\t23\n+-\n+1\t11\t0\n+2\t12\t22\n+3\t0\t23\n+join_use_nulls = 0\n+-\n+1\t11\t0\n+2\t12\t22\n+3\t0\t23\n+-\n+1\t11\t0\n+2\t12\t22\n+3\t0\t23\n+-\n+1\t11\t\\N\n+2\t12\t22\n+3\t\\N\t23\n+-\n+1\t11\t0\n+2\t12\t22\n+3\t0\t23\ndiff --git a/tests/queries/0_stateless/01866_view_persist_settings.sql b/tests/queries/0_stateless/01866_view_persist_settings.sql\nnew file mode 100644\nindex 000000000000..71d6c856b9bf\n--- /dev/null\n+++ b/tests/queries/0_stateless/01866_view_persist_settings.sql\n@@ -0,0 +1,61 @@\n+DROP TABLE IF EXISTS view_no_nulls;\n+DROP TABLE IF EXISTS view_no_nulls_set;\n+DROP TABLE IF EXISTS view_nulls_set;\n+DROP TABLE IF EXISTS view_nulls;\n+\n+SET join_use_nulls = 0;\n+\n+CREATE OR REPLACE VIEW view_no_nulls AS\n+SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1\n+FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2\n+USING a ORDER BY a;\n+\n+CREATE OR REPLACE VIEW view_nulls_set AS\n+SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1\n+FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2\n+USING a ORDER BY a\n+SETTINGS join_use_nulls = 1;\n+\n+SET join_use_nulls = 1;\n+\n+CREATE OR REPLACE VIEW view_nulls AS\n+SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1\n+FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2\n+USING a ORDER BY a;\n+\n+CREATE OR REPLACE VIEW view_no_nulls_set AS\n+SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1\n+FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2\n+USING a ORDER BY a\n+SETTINGS join_use_nulls = 0;\n+\n+SET join_use_nulls = 1;\n+\n+SELECT 'join_use_nulls = 1';\n+\n+SELECT '-';\n+SELECT * FROM view_no_nulls;\n+SELECT '-';\n+SELECT * FROM view_no_nulls_set;\n+SELECT '-';\n+SELECT * FROM view_nulls_set;\n+SELECT '-';\n+SELECT * FROM view_nulls;\n+\n+SET join_use_nulls = 0;\n+\n+SELECT 'join_use_nulls = 0';\n+\n+SELECT '-';\n+SELECT * FROM view_no_nulls;\n+SELECT '-';\n+SELECT * FROM view_no_nulls_set;\n+SELECT '-';\n+SELECT * FROM view_nulls_set;\n+SELECT '-';\n+SELECT * FROM view_nulls;\n+\n+DROP TABLE IF EXISTS view_no_nulls;\n+DROP TABLE IF EXISTS view_no_nulls_set;\n+DROP TABLE IF EXISTS view_nulls_set;\n+DROP TABLE IF EXISTS view_nulls;\n",
  "problem_statement": "select with join_use_nulls=1 breaks some views created under join_use_nulls=0\nReproduction example:\r\n\r\n```(sql)\r\nSET join_use_nulls = 0;\r\n\r\ncreate or replace view\r\n  some_test_view\r\nas\r\nselect *\r\nfrom\r\n  (\r\n    select\r\n      arrayJoin([1, 2]) as a,\r\n      arrayJoin([11, 12]) as b\r\n  ) as t1\r\n  full join\r\n  (\r\n    select\r\n      arrayJoin([2, 3]) as a,\r\n      arrayJoin([22, 23]) as c\r\n  ) as t2\r\n  using a\r\norder by a\r\n```\r\n\r\nIn `describe table some_test_view` the resulting columns are non-nullable, as expected.\r\n\r\nHowever, changing the setting and selecting from the view:\r\n\r\n```(sql)\r\nSET join_use_nulls = 1;\r\nselect * from some_test_view\r\n```\r\n\r\nResults in an error: `Code: 349, e.displayText() = DB::Exception: Cannot convert NULL value to non-Nullable type: while converting source column c to destination column c: while executing 'FUNCTION CAST(c :: 2, UInt8 :: 5) -> CAST(c, UInt8) UInt8 : 4' (version 21.2.3.15 (official build))`\r\n\r\nThere's no clearly-good solution to this problem;\r\none of the suggestions is to add the setting to the view schema, e.g.:\r\n\r\n```(sql)\r\nSET join_use_nulls = 0;\r\n\r\ncreate or replace view\r\n  some_test_view\r\nas\r\nselect *\r\nfrom\r\n  (\r\n    select\r\n      arrayJoin([1, 2]) as a,\r\n      arrayJoin([11, 12]) as b\r\n  ) as t1\r\n  full join\r\n  (\r\n    select\r\n      arrayJoin([2, 3]) as a,\r\n      arrayJoin([22, 23]) as c\r\n  ) as t2\r\n  using a\r\norder by a\r\nsettings join_use_nulls = 0  -- prevent the join behavior inside the view from changing\r\n```\r\n\r\nwhich could be done implicitly by CH to improve the user experience.\r\n\r\nSide note: `\u2026 settings join_use_nulls = \u2026` seems to be poorly documented, only appearing in a few examples without any explanation.\r\n\n",
  "hints_text": "Possibly related: https://github.com/ClickHouse/ClickHouse/issues/20549\nSeems that it's actually not a bug. \r\n\r\nWe can improve exception message to make more clear reason of error.\r\n\r\nOr, as you said, use same `join_use_nulls` as for the moment of view creation and ignore changed value.\r\n\n> Seems that it's actually not a bug.\r\n\r\nYes, it's not exactly a bug, but it's a very unclear unexpected behavior. The \"enhancement\" label doesn't seem quite right either.\r\n\r\nEither of the mentioned improvements (clearer error, or saving `join_use_nulls` setting) would help.\r\n",
  "created_at": "2021-05-13T14:23:07Z",
  "modified_files": [
    "src/Interpreters/ActionsDAG.h",
    "src/Storages/StorageView.cpp",
    "src/Storages/StorageView.h",
    "src/TableFunctions/TableFunctionView.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00109_shard_totals_after_having.sql",
    "b/tests/queries/0_stateless/01866_view_persist_settings.reference",
    "b/tests/queries/0_stateless/01866_view_persist_settings.sql"
  ]
}