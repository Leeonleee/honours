{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13075,
  "instance_id": "ClickHouse__ClickHouse-13075",
  "issue_numbers": [
    "11327"
  ],
  "base_commit": "bf575bba2b87d53e256b0b0deed16e5f9be635f0",
  "patch": "diff --git a/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp b/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp\nindex 51f7e93552a7..5c41b4a1fc04 100644\n--- a/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp\n+++ b/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp\n@@ -80,7 +80,7 @@ QueryPipeline createLocalStream(\n     pipeline.addSimpleTransform([&](const Block & source_header)\n     {\n         return std::make_shared<ConvertingTransform>(\n-                source_header, header, ConvertingTransform::MatchColumnsMode::Name);\n+                source_header, header, ConvertingTransform::MatchColumnsMode::Name, true);\n     });\n \n     /** Materialization is needed, since from remote servers the constants come materialized.\ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex c13ed22b1114..f5ea9ec965d3 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -474,7 +474,7 @@ void InterpreterSelectQuery::buildQueryPlan(QueryPlan & query_plan)\n     /// We must guarantee that result structure is the same as in getSampleBlock()\n     if (!blocksHaveEqualStructure(query_plan.getCurrentDataStream().header, result_header))\n     {\n-        auto converting = std::make_unique<ConvertingStep>(query_plan.getCurrentDataStream(), result_header);\n+        auto converting = std::make_unique<ConvertingStep>(query_plan.getCurrentDataStream(), result_header, true);\n         query_plan.addStep(std::move(converting));\n     }\n }\ndiff --git a/src/Processors/QueryPlan/ConvertingStep.cpp b/src/Processors/QueryPlan/ConvertingStep.cpp\nindex 4713a3c44027..356aad638241 100644\n--- a/src/Processors/QueryPlan/ConvertingStep.cpp\n+++ b/src/Processors/QueryPlan/ConvertingStep.cpp\n@@ -16,9 +16,10 @@ static ITransformingStep::DataStreamTraits getTraits()\n     };\n }\n \n-ConvertingStep::ConvertingStep(const DataStream & input_stream_, Block result_header_)\n+ConvertingStep::ConvertingStep(const DataStream & input_stream_, Block result_header_, bool ignore_constant_values_)\n     : ITransformingStep(input_stream_, result_header_, getTraits())\n     , result_header(std::move(result_header_))\n+    , ignore_constant_values(ignore_constant_values_)\n {\n     updateDistinctColumns(output_stream->header, output_stream->distinct_columns);\n }\n@@ -27,14 +28,14 @@ void ConvertingStep::transformPipeline(QueryPipeline & pipeline)\n {\n     pipeline.addSimpleTransform([&](const Block & header)\n     {\n-        return std::make_shared<ConvertingTransform>(header, result_header, ConvertingTransform::MatchColumnsMode::Name);\n+        return std::make_shared<ConvertingTransform>(header, result_header, ConvertingTransform::MatchColumnsMode::Name, ignore_constant_values);\n     });\n }\n \n void ConvertingStep::describeActions(FormatSettings & settings) const\n {\n     const auto & header = input_streams[0].header;\n-    auto conversion = ConvertingTransform(header, result_header, ConvertingTransform::MatchColumnsMode::Name)\n+    auto conversion = ConvertingTransform(header, result_header, ConvertingTransform::MatchColumnsMode::Name, ignore_constant_values)\n             .getConversion();\n \n     auto dump_description = [&](const ColumnWithTypeAndName & elem, bool is_const)\ndiff --git a/src/Processors/QueryPlan/ConvertingStep.h b/src/Processors/QueryPlan/ConvertingStep.h\nindex 5591b49028c5..70fd34330d15 100644\n--- a/src/Processors/QueryPlan/ConvertingStep.h\n+++ b/src/Processors/QueryPlan/ConvertingStep.h\n@@ -8,7 +8,7 @@ namespace DB\n class ConvertingStep : public ITransformingStep\n {\n public:\n-    ConvertingStep(const DataStream & input_stream_, Block result_header_);\n+    ConvertingStep(const DataStream & input_stream_, Block result_header_, bool ignore_constant_values_ = false);\n \n     String getName() const override { return \"Converting\"; }\n \n@@ -18,6 +18,8 @@ class ConvertingStep : public ITransformingStep\n \n private:\n     Block result_header;\n+    /// Do not check that constants are same. Use value from result_header.\n+    bool ignore_constant_values;\n };\n \n }\ndiff --git a/src/Processors/Transforms/ConvertingTransform.cpp b/src/Processors/Transforms/ConvertingTransform.cpp\nindex a0e9626b3025..e9d6f36adec3 100644\n--- a/src/Processors/Transforms/ConvertingTransform.cpp\n+++ b/src/Processors/Transforms/ConvertingTransform.cpp\n@@ -35,9 +35,11 @@ static ColumnPtr castColumnWithDiagnostic(\n ConvertingTransform::ConvertingTransform(\n     Block source_header_,\n     Block result_header_,\n-    MatchColumnsMode mode_)\n+    MatchColumnsMode mode_,\n+    bool ignore_constant_values_)\n     : ISimpleTransform(std::move(source_header_), std::move(result_header_), false)\n     , conversion(getOutputPort().getHeader().columns())\n+    , ignore_constant_values(ignore_constant_values_)\n {\n     const auto & source = getInputPort().getHeader();\n     const auto & result = getOutputPort().getHeader();\n@@ -79,7 +81,7 @@ ConvertingTransform::ConvertingTransform(\n         {\n             if (const auto * src_const = typeid_cast<const ColumnConst *>(src_elem.column.get()))\n             {\n-                if (res_const->getField() != src_const->getField())\n+                if (!ignore_constant_values && res_const->getField() != src_const->getField())\n                     throw Exception(\"Cannot convert column \" + backQuoteIfNeed(res_elem.name) + \" because \"\n                                     \"it is constant but values of constants are different in source and result\",\n                                     ErrorCodes::BLOCKS_HAVE_DIFFERENT_STRUCTURE);\n@@ -115,6 +117,12 @@ void ConvertingTransform::transform(Chunk & chunk)\n         src_elem.column = src_columns[conversion[res_pos]];\n         auto res_elem = result.getByPosition(res_pos);\n \n+        if (ignore_constant_values && isColumnConst(*res_elem.column))\n+        {\n+            res_columns.emplace_back(res_elem.column->cloneResized(num_rows));\n+            continue;\n+        }\n+\n         ColumnPtr converted = castColumnWithDiagnostic(src_elem, res_elem);\n \n         if (!isColumnConst(*res_elem.column))\ndiff --git a/src/Processors/Transforms/ConvertingTransform.h b/src/Processors/Transforms/ConvertingTransform.h\nindex b4b42dcb6ead..68a914e84416 100644\n--- a/src/Processors/Transforms/ConvertingTransform.h\n+++ b/src/Processors/Transforms/ConvertingTransform.h\n@@ -31,7 +31,8 @@ class ConvertingTransform : public ISimpleTransform\n     ConvertingTransform(\n         Block source_header_,\n         Block result_header_,\n-        MatchColumnsMode mode_);\n+        MatchColumnsMode mode_,\n+        bool ignore_constant_values_ = false); /// Do not check that constants are same. Use value from result_header.\n \n     String getName() const override { return \"Converting\"; }\n \n@@ -43,6 +44,11 @@ class ConvertingTransform : public ISimpleTransform\n private:\n     /// How to construct result block. Position in source block, where to get each column.\n     ColumnNumbers conversion;\n+    /// Do not check that constants are same. Use value from result_header.\n+    /// This is needed in case run functions which are constatn in query scope, \n+    /// but may return different result being executed remotely, like `now64()` or `randConstant()`.\n+    /// In this case we replace constants from remote source to constatns from initiator.\n+    bool ignore_constant_values;\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01418_query_scope_constants_and_remote.reference b/tests/queries/0_stateless/01418_query_scope_constants_and_remote.reference\nnew file mode 100644\nindex 000000000000..627e1097cda3\n--- /dev/null\n+++ b/tests/queries/0_stateless/01418_query_scope_constants_and_remote.reference\n@@ -0,0 +1,5 @@\n+1\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/01418_query_scope_constants_and_remote.sql b/tests/queries/0_stateless/01418_query_scope_constants_and_remote.sql\nnew file mode 100644\nindex 000000000000..fcdf2f7896ed\n--- /dev/null\n+++ b/tests/queries/0_stateless/01418_query_scope_constants_and_remote.sql\n@@ -0,0 +1,3 @@\n+select c >= 0 from (SELECT randConstant() as c FROM remote('127.0.0.{1,2}', numbers_mt(1)));\n+select c >= 0 from (SELECT randConstant() as c FROM remote('127.0.0.{3,2}', numbers_mt(1)));\n+select c >= 0 from (SELECT randConstant() as c FROM remote('127.0.0.1', numbers_mt(1)));\n\\ No newline at end of file\n",
  "problem_statement": "Cannot convert column `now64()` because it is constant but values of constants are different in source and result.\n```\r\nclickhouse benchmark <<< \"SELECT now64() FROM remote('127.0.0.1', 'system', 'numbers_mt') WHERE number<100000 LIMIT 100000\"\r\nLoaded 1 queries.\r\nAn error occurred while processing query:\r\nSELECT now64() FROM remote('127.0.0.1', 'system', 'numbers_mt') WHERE number<100000 LIMIT 100000\r\nDB::Exception: Received from localhost:9000. DB::Exception: Cannot convert column `now64()` because it is constant but values of constants are different in source and result. Stack trace:\r\n\r\n0. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1065a1f0 in /usr/lib/debug/usr/bin/clickhouse\r\n1. /build/obj-x86_64-linux-gnu/../src/Common/Exception.cpp:32: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x914dd3d in /usr/lib/debug/usr/bin/clickhouse\r\n2. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/string:2134: DB::ConvertingTransform::ConvertingTransform(DB::Block, DB::Block, DB::ConvertingTransform::MatchColumnsMode) (.cold) @ 0xe0f1a6b in /usr/lib/debug/usr/bin/clickhouse\r\n3. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:2214: std::__1::__function::__func<DB::ClusterProxy::(anonymous namespace)::createLocalStream(std::__1::shared_ptr<DB::IAST> const&, DB::Block const&, DB::Context const&, DB::QueryProcessingStage::Enum, bool, bool, bool)::'lambda'(DB::Block const&), std::__1::allocator<DB::ClusterProxy::(anonymous namespace)::createLocalStream(std::__1::shared_ptr<DB::IAST> const&, DB::Block const&, DB::Context const&, DB::QueryProcessingStage::Enum, bool, bool, bool)::'lambda'(DB::Block const&)>, std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)>::operator()(DB::Block const&) @ 0xda854f2 in /usr/lib/debug/usr/bin/clickhouse\r\n4. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:3821: void DB::QueryPipeline::addSimpleTransformImpl<std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> >(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::'lambda'(DB::OutputPort*&, DB::QueryPipeline::StreamType, unsigned long)::operator()(DB::OutputPort*&, DB::QueryPipeline::StreamType, unsigned long) const @ 0xdf1ea77 in /usr/lib/debug/usr/bin/clickhouse\r\n5. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:656: void DB::QueryPipeline::addSimpleTransformImpl<std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> >(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&) @ 0xdf1f221 in /usr/lib/debug/usr/bin/clickhouse\r\n6. /build/obj-x86_64-linux-gnu/../src/Interpreters/ClusterProxy/SelectStreamFactory.cpp:103: DB::ClusterProxy::(anonymous namespace)::createLocalStream(std::__1::shared_ptr<DB::IAST> const&, DB::Block const&, DB::Context const&, DB::QueryProcessingStage::Enum, bool, bool, bool) @ 0xda86529 in /usr/lib/debug/usr/bin/clickhouse\r\n7. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:1681: DB::ClusterProxy::SelectStreamFactory::createForShard(DB::Cluster::ShardInfo const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::Throttler> const&, DB::SelectQueryInfo const&, std::__1::vector<DB::Pipe, std::__1::allocator<DB::Pipe> >&)::'lambda'()::operator()() const @ 0xda86707 in /usr/lib/debug/usr/bin/clickhouse\r\n8. /build/obj-x86_64-linux-gnu/../src/Interpreters/ClusterProxy/SelectStreamFactory.cpp:212: DB::ClusterProxy::SelectStreamFactory::createForShard(DB::Cluster::ShardInfo const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::Throttler> const&, DB::SelectQueryInfo const&, std::__1::vector<DB::Pipe, std::__1::allocator<DB::Pipe> >&) @ 0xda878cd in /usr/lib/debug/usr/bin/clickhouse\r\n9. /build/obj-x86_64-linux-gnu/../src/Interpreters/ClusterProxy/executeQuery.cpp:71: DB::ClusterProxy::executeQuery(DB::ClusterProxy::IStreamFactory&, std::__1::shared_ptr<DB::Cluster> const&, std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::Settings const&, DB::SelectQueryInfo const&) @ 0xda8e678 in /usr/lib/debug/usr/bin/clickhouse\r\n10. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/__tree:1085: DB::StorageDistributed::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0xda78a50 in /usr/lib/debug/usr/bin/clickhouse\r\n11. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:1383: void DB::InterpreterSelectQuery::executeFetchColumns<DB::QueryPipeline>(DB::QueryProcessingStage::Enum, DB::QueryPipeline&, std::__1::shared_ptr<DB::PrewhereInfo> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::QueryPipeline&) @ 0xd67ed2b in /usr/lib/debug/usr/bin/clickhouse\r\n12. /build/obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectQuery.cpp:788: void DB::InterpreterSelectQuery::executeImpl<DB::QueryPipeline>(DB::QueryPipeline&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, DB::QueryPipeline&) @ 0xd6824c2 in /usr/lib/debug/usr/bin/clickhouse\r\n13. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/optional:224: DB::InterpreterSelectQuery::executeWithProcessors() @ 0xd6464fd in /usr/lib/debug/usr/bin/clickhouse\r\n14. /build/obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:256: DB::InterpreterSelectWithUnionQuery::executeWithProcessors() @ 0xd817c75 in /usr/lib/debug/usr/bin/clickhouse\r\n15. /build/obj-x86_64-linux-gnu/../src/Interpreters/executeQuery.cpp:341: DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*, bool) @ 0xd956d94 in /usr/lib/debug/usr/bin/clickhouse\r\n16. /build/obj-x86_64-linux-gnu/../src/Interpreters/executeQuery.cpp:588: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) @ 0xd95a735 in /usr/lib/debug/usr/bin/clickhouse\r\n17. /build/obj-x86_64-linux-gnu/../programs/server/TCPHandler.cpp:252: DB::TCPHandler::runImpl() @ 0x9256a98 in /usr/lib/debug/usr/bin/clickhouse\r\n18. /build/obj-x86_64-linux-gnu/../programs/server/TCPHandler.cpp:1244: DB::TCPHandler::run() @ 0x9257a70 in /usr/lib/debug/usr/bin/clickhouse\r\n19. /build/obj-x86_64-linux-gnu/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x1057801b in /usr/lib/debug/usr/bin/clickhouse\r\n20. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:856: Poco::Net::TCPServerDispatcher::run() @ 0x105784ab in /usr/lib/debug/usr/bin/clickhouse\r\n21. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/include/Poco/Mutex_POSIX.h:59: Poco::PooledThread::run() @ 0x106f6fd6 in /usr/lib/debug/usr/bin/clickhouse\r\n22. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/include/Poco/AutoPtr.h:223: Poco::ThreadImpl::runnableEntry(void*) @ 0x106f23d0 in /usr/lib/debug/usr/bin/clickhouse\r\n23. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n24. /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __clone @ 0x12188f in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n\r\nException in ThreadPool(max_threads: 1, max_free_threads: 1, queue_size: 1, shutdown_on_exception: 1).: Code: 171, e.displayText() = DB::Exception: Received from localhost:9000. DB::Exception: Cannot convert column `now64()` because it is constant but values of constants are different in source and result. Stack trace:\r\n\r\n0. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1065a1f0 in /usr/lib/debug/usr/bin/clickhouse\r\n1. /build/obj-x86_64-linux-gnu/../src/Common/Exception.cpp:32: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x914dd3d in /usr/lib/debug/usr/bin/clickhouse\r\n2. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/string:2134: DB::ConvertingTransform::ConvertingTransform(DB::Block, DB::Block, DB::ConvertingTransform::MatchColumnsMode) (.cold) @ 0xe0f1a6b in /usr/lib/debug/usr/bin/clickhouse\r\n3. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:2214: std::__1::__function::__func<DB::ClusterProxy::(anonymous namespace)::createLocalStream(std::__1::shared_ptr<DB::IAST> const&, DB::Block const&, DB::Context const&, DB::QueryProcessingStage::Enum, bool, bool, bool)::'lambda'(DB::Block const&), std::__1::allocator<DB::ClusterProxy::(anonymous namespace)::createLocalStream(std::__1::shared_ptr<DB::IAST> const&, DB::Block const&, DB::Context const&, DB::QueryProcessingStage::Enum, bool, bool, bool)::'lambda'(DB::Block const&)>, std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)>::operator()(DB::Block const&) @ 0xda854f2 in /usr/lib/debug/usr/bin/clickhouse\r\n4. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:3821: void DB::QueryPipeline::addSimpleTransformImpl<std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> >(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::'lambda'(DB::OutputPort*&, DB::QueryPipeline::StreamType, unsigned long)::operator()(DB::OutputPort*&, DB::QueryPipeline::StreamType, unsigned long) const @ 0xdf1ea77 in /usr/lib/debug/usr/bin/clickhouse\r\n5. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:656: void DB::QueryPipeline::addSimpleTransformImpl<std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> >(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&) @ 0xdf1f221 in /usr/lib/debug/usr/bin/clickhouse\r\n6. /build/obj-x86_64-linux-gnu/../src/Interpreters/ClusterProxy/SelectStreamFactory.cpp:103: DB::ClusterProxy::(anonymous namespace)::createLocalStream(std::__1::shared_ptr<DB::IAST> const&, DB::Block const&, DB::Context const&, DB::QueryProcessingStage::Enum, bool, bool, bool) @ 0xda86529 in /usr/lib/debug/usr/bin/clickhouse\r\n7. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:1681: DB::ClusterProxy::SelectStreamFactory::createForShard(DB::Cluster::ShardInfo const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::Throttler> const&, DB::SelectQueryInfo const&, std::__1::vector<DB::Pipe, std::__1::allocator<DB::Pipe> >&)::'lambda'()::operator()() const @ 0xda86707 in /usr/lib/debug/usr/bin/clickhouse\r\n8. /build/obj-x86_64-linux-gnu/../src/Interpreters/ClusterProxy/SelectStreamFactory.cpp:212: DB::ClusterProxy::SelectStreamFactory::createForShard(DB::Cluster::ShardInfo const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::Throttler> const&, DB::SelectQueryInfo const&, std::__1::vector<DB::Pipe, std::__1::allocator<DB::Pipe> >&) @ 0xda878cd in /usr/lib/debug/usr/bin/clickhouse\r\n9. /build/obj-x86_64-linux-gnu/../src/Interpreters/ClusterProxy/executeQuery.cpp:71: DB::ClusterProxy::executeQuery(DB::ClusterProxy::IStreamFactory&, std::__1::shared_ptr<DB::Cluster> const&, std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::Settings const&, DB::SelectQueryInfo const&) @ 0xda8e678 in /usr/lib/debug/usr/bin/clickhouse\r\n10. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/__tree:1085: DB::StorageDistributed::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0xda78a50 in /usr/lib/debug/usr/bin/clickhouse\r\n11. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:1383: void DB::InterpreterSelectQuery::executeFetchColumns<DB::QueryPipeline>(DB::QueryProcessingStage::Enum, DB::QueryPipeline&, std::__1::shared_ptr<DB::PrewhereInfo> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::QueryPipeline&) @ 0xd67ed2b in /usr/lib/debug/usr/bin/clickhouse\r\n12. /build/obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectQuery.cpp:788: void DB::InterpreterSelectQuery::executeImpl<DB::QueryPipeline>(DB::QueryPipeline&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, DB::QueryPipeline&) @ 0xd6824c2 in /usr/lib/debug/usr/bin/clickhouse\r\n13. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/optional:224: DB::InterpreterSelectQuery::executeWithProcessors() @ 0xd6464fd in /usr/lib/debug/usr/bin/clickhouse\r\n14. /build/obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:256: DB::InterpreterSelectWithUnionQuery::executeWithProcessors() @ 0xd817c75 in /usr/lib/debug/usr/bin/clickhouse\r\n15. /build/obj-x86_64-linux-gnu/../src/Interpreters/executeQuery.cpp:341: DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*, bool) @ 0xd956d94 in /usr/lib/debug/usr/bin/clickhouse\r\n16. /build/obj-x86_64-linux-gnu/../src/Interpreters/executeQuery.cpp:588: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) @ 0xd95a735 in /usr/lib/debug/usr/bin/clickhouse\r\n17. /build/obj-x86_64-linux-gnu/../programs/server/TCPHandler.cpp:252: DB::TCPHandler::runImpl() @ 0x9256a98 in /usr/lib/debug/usr/bin/clickhouse\r\n18. /build/obj-x86_64-linux-gnu/../programs/server/TCPHandler.cpp:1244: DB::TCPHandler::run() @ 0x9257a70 in /usr/lib/debug/usr/bin/clickhouse\r\n19. /build/obj-x86_64-linux-gnu/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x1057801b in /usr/lib/debug/usr/bin/clickhouse\r\n20. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:856: Poco::Net::TCPServerDispatcher::run() @ 0x105784ab in /usr/lib/debug/usr/bin/clickhouse\r\n21. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/include/Poco/Mutex_POSIX.h:59: Poco::PooledThread::run() @ 0x106f6fd6 in /usr/lib/debug/usr/bin/clickhouse\r\n22. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/include/Poco/AutoPtr.h:223: Poco::ThreadImpl::runnableEntry(void*) @ 0x106f23d0 in /usr/lib/debug/usr/bin/clickhouse\r\n23. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n24. /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __clone @ 0x12188f in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1065a1f0 in /usr/lib/debug/usr/bin/clickhouse\r\n1. /build/obj-x86_64-linux-gnu/../src/Common/Exception.cpp:32: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x914dd3d in /usr/lib/debug/usr/bin/clickhouse\r\n2. /build/obj-x86_64-linux-gnu/../src/IO/WriteBufferFromVector.h:70: DB::readException(DB::ReadBuffer&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x9186d89 in /usr/lib/debug/usr/bin/clickhouse\r\n3. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:3028: DB::Connection::receiveException() @ 0xdea92df in /usr/lib/debug/usr/bin/clickhouse\r\n4. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:2608: DB::Connection::receivePacket() @ 0xdeaf295 in /usr/lib/debug/usr/bin/clickhouse\r\n5. /build/obj-x86_64-linux-gnu/../src/Client/MultiplexedConnections.cpp:253: DB::MultiplexedConnections::receivePacket() @ 0xdebfe9a in /usr/lib/debug/usr/bin/clickhouse\r\n6. /build/obj-x86_64-linux-gnu/../src/DataStreams/RemoteBlockInputStream.cpp:244: DB::RemoteBlockInputStream::readImpl() @ 0xd2697b4 in /usr/lib/debug/usr/bin/clickhouse\r\n7. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0xd2466dd in /usr/lib/debug/usr/bin/clickhouse\r\n8. /build/obj-x86_64-linux-gnu/../programs/benchmark/Benchmark.cpp:380: DB::Benchmark::execute(std::__1::vector<std::__1::shared_ptr<PoolBase<DB::Connection>::Entry>, std::__1::allocator<std::__1::shared_ptr<PoolBase<DB::Connection>::Entry> > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, unsigned long) @ 0x92e2713 in /usr/lib/debug/usr/bin/clickhouse\r\n9. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:840: DB::Benchmark::thread(std::__1::vector<std::__1::shared_ptr<PoolBase<DB::Connection>::Entry>, std::__1::allocator<std::__1::shared_ptr<PoolBase<DB::Connection>::Entry> > >&) @ 0x92e3077 in /usr/lib/debug/usr/bin/clickhouse\r\n10. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:856: ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x91765eb in /usr/lib/debug/usr/bin/clickhouse\r\n11. /build/obj-x86_64-linux-gnu/../src/Common/ThreadPool.h:159: ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() const @ 0x91773ba in /usr/lib/debug/usr/bin/clickhouse\r\n12. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:856: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x91754ab in /usr/lib/debug/usr/bin/clickhouse\r\n13. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:2615: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()> >(void*) @ 0x9173993 in /usr/lib/debug/usr/bin/clickhouse\r\n14. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n15. /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __clone @ 0x12188f in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 20.5.1.3327 (official build))\r\n```\r\n\r\nReincarnation of \r\nhttps://github.com/ClickHouse/ClickHouse/issues/6546\r\nhttps://github.com/ClickHouse/ClickHouse/issues/7100\r\n\n",
  "hints_text": "Still relevant in 20.7.\n@KochetovNicolai It also reproduces with `now`, just wait for a minute.",
  "created_at": "2020-07-29T14:57:30Z",
  "modified_files": [
    "src/Interpreters/ClusterProxy/SelectStreamFactory.cpp",
    "src/Interpreters/InterpreterSelectQuery.cpp",
    "src/Processors/QueryPlan/ConvertingStep.cpp",
    "src/Processors/QueryPlan/ConvertingStep.h",
    "src/Processors/Transforms/ConvertingTransform.cpp",
    "src/Processors/Transforms/ConvertingTransform.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01418_query_scope_constants_and_remote.reference",
    "b/tests/queries/0_stateless/01418_query_scope_constants_and_remote.sql"
  ]
}