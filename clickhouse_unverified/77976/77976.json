{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 77976,
  "instance_id": "ClickHouse__ClickHouse-77976",
  "issue_numbers": [
    "71009"
  ],
  "base_commit": "f7dc2d08b7e27a181d45e90cc63cb3ace2d928f6",
  "patch": "diff --git a/src/Storages/MergeTree/ActiveDataPartSet.h b/src/Storages/MergeTree/ActiveDataPartSet.h\nindex ca744b3ed2a5..02f37d349589 100644\n--- a/src/Storages/MergeTree/ActiveDataPartSet.h\n+++ b/src/Storages/MergeTree/ActiveDataPartSet.h\n@@ -17,7 +17,6 @@ using Strings = std::vector<String>;\n \n /** Supports multiple names of active parts of data.\n   * Repeats part of the MergeTreeData functionality.\n-  * TODO: generalize with MergeTreeData\n   */\n class ActiveDataPartSet\n {\ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 5f627c69a2a7..c8d76e1ccb19 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -6800,6 +6800,20 @@ MergeTreeData::MutableDataPartsVector MergeTreeData::tryLoadPartsToAttach(const\n \n         LOG_DEBUG(log, \"{} of them are active\", active_parts.size());\n \n+        /// Take care to process parts in the correct order. This is needed for Replacing and other special MergeTree variants.\n+        std::erase_if(detached_parts, [&](const auto & part_info)\n+        {\n+            String containing_part = active_parts.getContainingPart(part_info.dir_name);\n+            return containing_part.empty();\n+        });\n+\n+        std::sort(detached_parts.begin(), detached_parts.end(), [&](const auto & a, const auto & b)\n+        {\n+            MergeTreePartInfo info_a = MergeTreePartInfo::fromPartName(active_parts.getContainingPart(a), format_version);\n+            MergeTreePartInfo info_b = MergeTreePartInfo::fromPartName(active_parts.getContainingPart(b), format_version);\n+            return info_a < info_b;\n+        });\n+\n         /// Inactive parts are renamed so they can not be attached in case of repeated ATTACH.\n         for (const auto & part_info : detached_parts)\n         {\n@@ -6817,7 +6831,6 @@ MergeTreeData::MutableDataPartsVector MergeTreeData::tryLoadPartsToAttach(const\n         }\n     }\n \n-\n     /// Try to rename all parts before attaching to prevent race with DROP DETACHED and another ATTACH.\n     renamed_parts.tryRenameAll();\n \ndiff --git a/src/Storages/MergeTree/MergeTreePartInfo.h b/src/Storages/MergeTree/MergeTreePartInfo.h\nindex 28b043fcf20f..533a8dae9b82 100644\n--- a/src/Storages/MergeTree/MergeTreePartInfo.h\n+++ b/src/Storages/MergeTree/MergeTreePartInfo.h\n@@ -197,7 +197,7 @@ struct DetachedPartInfo : public MergeTreePartInfo\n     static DetachedPartInfo parseDetachedPartName(const DiskPtr & disk, std::string_view dir_name, MergeTreeDataFormatVersion format_version);\n \n private:\n-    void addParsedPartInfo(const MergeTreePartInfo& part);\n+    void addParsedPartInfo(const MergeTreePartInfo & part);\n };\n \n using DetachedPartsInfo = std::vector<DetachedPartInfo>;\n",
  "test_patch": "diff --git a/tests/queries/bugs/03254_attach_part_order.reference b/tests/queries/0_stateless/03254_attach_part_order.reference\nsimilarity index 100%\nrename from tests/queries/bugs/03254_attach_part_order.reference\nrename to tests/queries/0_stateless/03254_attach_part_order.reference\ndiff --git a/tests/queries/bugs/03254_attach_part_order.sql b/tests/queries/0_stateless/03254_attach_part_order.sql\nsimilarity index 100%\nrename from tests/queries/bugs/03254_attach_part_order.sql\nrename to tests/queries/0_stateless/03254_attach_part_order.sql\n",
  "problem_statement": "ReplacingMergeTree depends on the order of part attachment\nWhen attaching a partition, parts are attached in an unspecifing order. If the order of the parts is violated, ReplacingMergeTree might lose data. I have written a test to reproduce this scenario.\r\n\r\nReason:\r\n\r\nTo get the list of detached parts, the following function is used:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/master/src/Storages/MergeTree/MergeTreeData.cpp#L6446\r\n\r\nThis function uses an iterator to traverse the directory for the local disk:\r\n```cpp\r\ndisk->iterateDirectory(detached_path)\r\n```\r\nThis iterator is a wrapper around the standard:\r\n```cpp\r\nfs::directory_iterator entry\r\n```\r\nAnd its order is unspecified - The iteration order is unspecified\r\n\r\nhttps://en.cppreference.com/w/cpp/filesystem/directory_iterator\r\n\r\nSolution:\r\nI suggest providing guaranteed order for part attachment for some engines (ReplacingMergeTree).\r\n\r\nWhat do you think?\n",
  "hints_text": "",
  "created_at": "2025-03-20T03:21:06Z",
  "modified_files": [
    "src/Storages/MergeTree/ActiveDataPartSet.h",
    "src/Storages/MergeTree/MergeTreeData.cpp",
    "src/Storages/MergeTree/MergeTreePartInfo.h"
  ],
  "modified_test_files": []
}