{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23919,
  "instance_id": "ClickHouse__ClickHouse-23919",
  "issue_numbers": [
    "17112"
  ],
  "base_commit": "a979a86930f5125320ff6174481e557f6d54d562",
  "patch": "diff --git a/src/DataTypes/EnumValues.cpp b/src/DataTypes/EnumValues.cpp\nindex d4ca7e4dfddb..39c24bf1122f 100644\n--- a/src/DataTypes/EnumValues.cpp\n+++ b/src/DataTypes/EnumValues.cpp\n@@ -66,11 +66,22 @@ T EnumValues<T>::getValue(StringRef field_name, bool try_treat_as_id) const\n             if (tmp_buf.eof() && value_to_name_map.find(x) != value_to_name_map.end())\n                 return x;\n         }\n-        throw Exception{\"Unknown element '\" + field_name.toString() + \"' for enum\", ErrorCodes::BAD_ARGUMENTS};\n+        auto hints = this->getHints(field_name.toString());\n+        auto hints_string = !hints.empty() ? \", may be you meant: \" + toString(hints) : \"\";\n+        throw Exception{\"Unknown element '\" + field_name.toString() + \"' for enum\" + hints_string, ErrorCodes::BAD_ARGUMENTS};\n     }\n     return it->getMapped();\n }\n \n+template <typename T>\n+Names EnumValues<T>::getAllRegisteredNames() const\n+{\n+    Names result;\n+    for (const auto & value : values)\n+        result.emplace_back(value.first);\n+    return result;\n+}\n+\n template class EnumValues<Int8>;\n template class EnumValues<Int16>;\n \ndiff --git a/src/DataTypes/EnumValues.h b/src/DataTypes/EnumValues.h\nindex 45ac30f9cd74..d03a8867e420 100644\n--- a/src/DataTypes/EnumValues.h\n+++ b/src/DataTypes/EnumValues.h\n@@ -1,7 +1,8 @@\n #pragma once\n \n-#include <Common/HashTable/HashMap.h>\n #include <unordered_map>\n+#include <Common/HashTable/HashMap.h>\n+#include <Common/NamePrompter.h>\n \n namespace DB\n {\n@@ -12,7 +13,7 @@ namespace ErrorCodes\n }\n \n template <typename T>\n-class EnumValues\n+class EnumValues : public IHints<1, EnumValues<T>>\n {\n public:\n     using Value = std::pair<std::string, T>;\n@@ -65,6 +66,8 @@ class EnumValues\n \n         return std::all_of(rhs_values.begin(), rhs_values.end(), check);\n     }\n+\n+    Names getAllRegisteredNames() const override;\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01852_hints_enum_name.reference b/tests/queries/0_stateless/01852_hints_enum_name.reference\nnew file mode 100644\nindex 000000000000..d86bac9de59a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01852_hints_enum_name.reference\n@@ -0,0 +1,1 @@\n+OK\ndiff --git a/tests/queries/0_stateless/01852_hints_enum_name.sh b/tests/queries/0_stateless/01852_hints_enum_name.sh\nnew file mode 100755\nindex 000000000000..bffde6e6c8c0\n--- /dev/null\n+++ b/tests/queries/0_stateless/01852_hints_enum_name.sh\n@@ -0,0 +1,8 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT --query=\"SELECT CAST('Helo', 'Enum(\\'Hello\\' = 1, \\'World\\' = 2)')\" 2>&1 | grep -q \"may be you meant: \\['Hello'\\]\" && echo 'OK' || echo 'FAIL'\n+\n",
  "problem_statement": "Hints for Enum names and column names based on Levenshtein distance.\n**Use case**\r\nProvide \"Did you mean: ...\" with nearest matches when user made a typo in Enum name or column name.\r\n\r\n**Describe the solution you'd like**\r\nSee `NamePrompter.h`\n",
  "hints_text": "It looks that the column name should be registered in the IHints.\r\nPlease assign it to me.\r\n\nYes, looks like we only have to put every name into IHints and then ask for possible matches.\nHints for Enum names are still to be implemented. A test:\r\n```\r\nSELECT CAST('Helo' AS Enum('Hello' = 1, 'World' = 2))\r\n```",
  "created_at": "2021-05-06T13:09:27Z",
  "modified_files": [
    "src/DataTypes/EnumValues.cpp",
    "src/DataTypes/EnumValues.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01852_hints_enum_name.reference",
    "b/tests/queries/0_stateless/01852_hints_enum_name.sh"
  ]
}