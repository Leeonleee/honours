{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63662,
  "instance_id": "ClickHouse__ClickHouse-63662",
  "issue_numbers": [
    "63496"
  ],
  "base_commit": "2d138d3d7e8f2efb035a8f9004b0ba7a8e367381",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex 396cd3e646b1..9ae5dd735edb 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -1178,7 +1178,7 @@ void Client::processConfig()\n \n     pager = config().getString(\"pager\", \"\");\n \n-    setDefaultFormatsFromConfiguration();\n+    setDefaultFormatsAndCompressionFromConfiguration();\n \n     global_context->setClientName(std::string(DEFAULT_CLIENT_NAME));\n     global_context->setQueryKindInitial();\ndiff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 5f2a51406e15..f18c03062546 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -611,7 +611,7 @@ void LocalServer::processConfig()\n     if (config().has(\"macros\"))\n         global_context->setMacros(std::make_unique<Macros>(config(), \"macros\", log));\n \n-    setDefaultFormatsFromConfiguration();\n+    setDefaultFormatsAndCompressionFromConfiguration();\n \n     /// Sets external authenticators config (LDAP, Kerberos).\n     global_context->setExternalAuthenticatorsConfig(config());\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex bd4430648c58..61d95e6eb4c8 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -21,6 +21,7 @@\n #include <Common/StringUtils/StringUtils.h>\n #include <Common/filesystemHelpers.h>\n #include <Common/NetException.h>\n+#include <Common/tryGetFileNameByFileDescriptor.h>\n #include <Columns/ColumnString.h>\n #include <Columns/ColumnsNumber.h>\n #include <Formats/FormatFactory.h>\n@@ -643,6 +644,9 @@ try\n         bool extras_into_stdout = need_render_progress || logs_into_stdout;\n         bool select_only_into_file = select_into_file && !select_into_file_and_stdout;\n \n+        if (!out_file_buf && default_output_compression_method != CompressionMethod::None)\n+            out_file_buf = wrapWriteBufferWithCompressionMethod(out_buf, default_output_compression_method, 3, 0);\n+\n         /// It is not clear how to write progress and logs\n         /// intermixed with data with parallel formatting.\n         /// It may increase code complexity significantly.\n@@ -735,7 +739,7 @@ bool ClientBase::isRegularFile(int fd)\n     return fstat(fd, &file_stat) == 0 && S_ISREG(file_stat.st_mode);\n }\n \n-void ClientBase::setDefaultFormatsFromConfiguration()\n+void ClientBase::setDefaultFormatsAndCompressionFromConfiguration()\n {\n     if (config().has(\"output-format\"))\n     {\n@@ -759,6 +763,10 @@ void ClientBase::setDefaultFormatsFromConfiguration()\n             default_output_format = *format_from_file_name;\n         else\n             default_output_format = \"TSV\";\n+\n+        std::optional<String> file_name = tryGetFileNameFromFileDescriptor(STDOUT_FILENO);\n+        if (file_name)\n+            default_output_compression_method = chooseCompressionMethod(*file_name, \"\");\n     }\n     else if (is_interactive)\n     {\ndiff --git a/src/Client/ClientBase.h b/src/Client/ClientBase.h\nindex 64cbdbe8989c..7a0489641c8c 100644\n--- a/src/Client/ClientBase.h\n+++ b/src/Client/ClientBase.h\n@@ -190,7 +190,7 @@ class ClientBase : public Poco::Util::Application, public IHints<2>\n     /// Adjust some settings after command line options and config had been processed.\n     void adjustSettings();\n \n-    void setDefaultFormatsFromConfiguration();\n+    void setDefaultFormatsAndCompressionFromConfiguration();\n \n     void initTTYBuffer(ProgressOption progress);\n \n@@ -224,6 +224,7 @@ class ClientBase : public Poco::Util::Application, public IHints<2>\n     String pager;\n \n     String default_output_format; /// Query results output format.\n+    CompressionMethod default_output_compression_method = CompressionMethod::None;\n     String default_input_format; /// Tables' format for clickhouse-local.\n \n     bool select_into_file = false; /// If writing result INTO OUTFILE. It affects progress rendering.\ndiff --git a/src/Common/tryGetFileNameByFileDescriptor.cpp b/src/Common/tryGetFileNameByFileDescriptor.cpp\nnew file mode 100644\nindex 000000000000..47e810503886\n--- /dev/null\n+++ b/src/Common/tryGetFileNameByFileDescriptor.cpp\n@@ -0,0 +1,33 @@\n+#include <Common/tryGetFileNameByFileDescriptor.h>\n+\n+#ifdef OS_LINUX\n+#    include <unistd.h>\n+#elif defined(OS_DARWIN)\n+#    include <fcntl.h>\n+#endif\n+\n+#include <fmt/format.h>\n+\n+\n+namespace DB\n+{\n+std::optional<String> tryGetFileNameFromFileDescriptor(int fd)\n+{\n+#ifdef OS_LINUX\n+    std::string proc_path = fmt::format(\"/proc/self/fd/{}\", fd);\n+    char file_path[PATH_MAX] = {'\\0'};\n+    if (readlink(proc_path.c_str(), file_path, sizeof(file_path) - 1) != -1)\n+        return file_path;\n+    return std::nullopt;\n+#elif defined(OS_DARWIN)\n+    char file_path[PATH_MAX] = {'\\0'};\n+    if (fcntl(fd, F_GETPATH, file_path) != -1)\n+        return file_path;\n+    return std::nullopt;\n+#else\n+    (void)fd;\n+    return std::nullopt;\n+#endif\n+}\n+\n+}\ndiff --git a/src/Common/tryGetFileNameByFileDescriptor.h b/src/Common/tryGetFileNameByFileDescriptor.h\nnew file mode 100644\nindex 000000000000..c38ccb4f8510\n--- /dev/null\n+++ b/src/Common/tryGetFileNameByFileDescriptor.h\n@@ -0,0 +1,10 @@\n+#pragma once\n+\n+#include <optional>\n+#include <base/types.h>\n+\n+namespace DB\n+{\n+/// Supports only Linux/MacOS. On other platforms, returns nullopt.\n+std::optional<String> tryGetFileNameFromFileDescriptor(int fd);\n+}\ndiff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex b7e9899da46d..783daba44fd1 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -1,6 +1,7 @@\n #include <Formats/FormatFactory.h>\n \n #include <algorithm>\n+#include <unistd.h>\n #include <Formats/FormatSettings.h>\n #include <Interpreters/Context.h>\n #include <Interpreters/ProcessList.h>\n@@ -15,7 +16,7 @@\n #include <Poco/URI.h>\n #include <Common/Exception.h>\n #include <Common/KnownObjectNames.h>\n-#include <unistd.h>\n+#include <Common/tryGetFileNameByFileDescriptor.h>\n \n #include <boost/algorithm/string/case_conv.hpp>\n \n@@ -692,21 +693,12 @@ String FormatFactory::getFormatFromFileName(String file_name)\n \n std::optional<String> FormatFactory::tryGetFormatFromFileDescriptor(int fd)\n {\n-#ifdef OS_LINUX\n-    std::string proc_path = fmt::format(\"/proc/self/fd/{}\", fd);\n-    char file_path[PATH_MAX] = {'\\0'};\n-    if (readlink(proc_path.c_str(), file_path, sizeof(file_path) - 1) != -1)\n-        return tryGetFormatFromFileName(file_path);\n-    return std::nullopt;\n-#elif defined(OS_DARWIN)\n-    char file_path[PATH_MAX] = {'\\0'};\n-    if (fcntl(fd, F_GETPATH, file_path) != -1)\n-        return tryGetFormatFromFileName(file_path);\n-    return std::nullopt;\n-#else\n-    (void)fd;\n+    std::optional<String> file_name = tryGetFileNameFromFileDescriptor(fd);\n+\n+    if (file_name)\n+        return tryGetFormatFromFileName(*file_name);\n+\n     return std::nullopt;\n-#endif\n }\n \n String FormatFactory::getFormatFromFileDescriptor(int fd)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03144_compress_stdout.reference b/tests/queries/0_stateless/03144_compress_stdout.reference\nnew file mode 100644\nindex 000000000000..6f51dfc24e1e\n--- /dev/null\n+++ b/tests/queries/0_stateless/03144_compress_stdout.reference\n@@ -0,0 +1,2 @@\n+Hello, World! From client.\n+Hello, World! From local.\ndiff --git a/tests/queries/0_stateless/03144_compress_stdout.sh b/tests/queries/0_stateless/03144_compress_stdout.sh\nnew file mode 100755\nindex 000000000000..569754303a74\n--- /dev/null\n+++ b/tests/queries/0_stateless/03144_compress_stdout.sh\n@@ -0,0 +1,23 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+set -e\n+\n+[ -e \"${CLICKHOUSE_TMP}\"/test_compression_of_output_file_from_client.gz ] && rm \"${CLICKHOUSE_TMP}\"/test_compression_of_output_file_from_client.gz\n+\n+${CLICKHOUSE_CLIENT} --query \"SELECT * FROM (SELECT 'Hello, World! From client.')\" > ${CLICKHOUSE_TMP}/test_compression_of_output_file_from_client.gz\n+gunzip ${CLICKHOUSE_TMP}/test_compression_of_output_file_from_client.gz\n+cat ${CLICKHOUSE_TMP}/test_compression_of_output_file_from_client\n+\n+rm -f \"${CLICKHOUSE_TMP}/test_compression_of_output_file_from_client\"\n+\n+[ -e \"${CLICKHOUSE_TMP}\"/test_compression_of_output_file_from_local.gz ] && rm \"${CLICKHOUSE_TMP}\"/test_compression_of_output_file_from_local.gz\n+\n+${CLICKHOUSE_LOCAL} --query \"SELECT * FROM (SELECT 'Hello, World! From local.')\" > ${CLICKHOUSE_TMP}/test_compression_of_output_file_from_local.gz\n+gunzip ${CLICKHOUSE_TMP}/test_compression_of_output_file_from_local.gz\n+cat ${CLICKHOUSE_TMP}/test_compression_of_output_file_from_local\n+\n+rm -f \"${CLICKHOUSE_TMP}/test_compression_of_output_file_from_local\"\n",
  "problem_statement": "Compression is not autodetected from an output file name in clickhouse-local\n**Use case**\r\n\r\n```\r\n$ clickhouse-local --query \"SELECT 1\" > test.native\r\n$ clickhouse-local --query \"SELECT 1\" > test.native.zst\r\n```\r\n\r\nThe second variant does not produce zstd compressed data.\n",
  "hints_text": "Hello,\r\nI'm working on this issue . I think I would like to add some code to `Client/ClientBase.cpp` to take care of that. There is already existing code to get the filepath/filename from the file descriptor in `FormatFactor.cpp` (for Linux/MacOS only though). Where should I put this sort of OS overlay code ?\nHi! Thank you for working on it!\r\nYou can create a new function `std::optional<std::string> tryGetFileNameByFileDescriptor(int fd)` (the code will be almost the same as in `FormatFactory::tryGetFormatFromFileDescriptor`) and place it in a separate file in `src/Common/tryGetFileNameByFileDescriptor.h/cpp`. And then this function can be used both in `FormatFactory::tryGetFormatFromFileDescriptor` and in `ClientBase` for choosing the compression method.\r\n\r\nAbout the implementation, I think we should add new field `CompressionMethod default_output_compression_method` in `ClientBase` class similar to `default_output_format` and set it accordingly to the file name here after we set `default_output_format` (we can use our new function `tryGetFormatFromFileDescriptor`):\r\nhttps://github.com/ClickHouse/ClickHouse/blob/6247f6a2b0650c093e66d77599bbe34005ce0a56/src/Client/ClientBase.cpp#L755-L762\r\n\r\nAnd then here when we create output buffer we can check the `default_output_compression_method` and create corresponding buffer:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/6247f6a2b0650c093e66d77599bbe34005ce0a56/src/Client/ClientBase.cpp#L623\r\n\r\nIt will look smth like:\r\n```c++\r\n}\r\nelse if (default_output_compression_method != CompressionMethod::None)\r\n{\r\n    out_file_buf = wrapWriteBufferWithCompressionMethod(out_buf, default_output_compression_method, 3);\r\n}\r\n```\r\n\r\n(but I am not 100% sure it will work, maybe something else is needed, need to test).\r\n",
  "created_at": "2024-05-11T19:05:39Z"
}