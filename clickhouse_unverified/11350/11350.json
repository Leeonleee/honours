{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11350,
  "instance_id": "ClickHouse__ClickHouse-11350",
  "issue_numbers": [
    "9933"
  ],
  "base_commit": "92ac608447289ef5fd484b0dd06a813afd323b1a",
  "patch": "diff --git a/base/common/LineReader.cpp b/base/common/LineReader.cpp\nindex 0d06e5ef2252..dd2e09b0393e 100644\n--- a/base/common/LineReader.cpp\n+++ b/base/common/LineReader.cpp\n@@ -67,8 +67,8 @@ LineReader::Suggest::WordsRange LineReader::Suggest::getCompletions(const String\n         });\n }\n \n-LineReader::LineReader(const String & history_file_path_, char extender_, char delimiter_)\n-    : history_file_path(history_file_path_), extender(extender_), delimiter(delimiter_)\n+LineReader::LineReader(const String & history_file_path_, bool multiline_, Patterns extenders_, Patterns delimiters_)\n+    : history_file_path(history_file_path_), multiline(multiline_), extenders(std::move(extenders_)), delimiters(std::move(delimiters_))\n {\n     /// FIXME: check extender != delimiter\n }\n@@ -76,38 +76,60 @@ LineReader::LineReader(const String & history_file_path_, char extender_, char d\n String LineReader::readLine(const String & first_prompt, const String & second_prompt)\n {\n     String line;\n-    bool is_multiline = false;\n+    bool need_next_line = false;\n \n-    while (auto status = readOneLine(is_multiline ? second_prompt : first_prompt))\n+    while (auto status = readOneLine(need_next_line ? second_prompt : first_prompt))\n     {\n         if (status == RESET_LINE)\n         {\n             line.clear();\n-            is_multiline = false;\n+            need_next_line = false;\n             continue;\n         }\n \n         if (input.empty())\n         {\n-            if (!line.empty() && !delimiter && !hasInputData())\n+            if (!line.empty() && !multiline && !hasInputData())\n                 break;\n             else\n                 continue;\n         }\n \n-        is_multiline = (input.back() == extender) || (delimiter && input.back() != delimiter) || hasInputData();\n+#if !defined(ARCADIA_BUILD) /// C++20\n+        const char * has_extender = nullptr;\n+        for (const auto * extender : extenders)\n+        {\n+            if (input.ends_with(extender))\n+            {\n+                has_extender = extender;\n+                break;\n+            }\n+        }\n \n-        if (input.back() == extender)\n+        const char * has_delimiter = nullptr;\n+        for (const auto * delimiter : delimiters)\n         {\n-            input = input.substr(0, input.size() - 1);\n+            if (input.ends_with(delimiter))\n+            {\n+                has_delimiter = delimiter;\n+                break;\n+            }\n+        }\n+\n+        need_next_line = has_extender || (multiline && !has_delimiter) || hasInputData();\n+\n+        if (has_extender)\n+        {\n+            input.resize(input.size() - strlen(has_extender));\n             trim(input);\n             if (input.empty())\n                 continue;\n         }\n+#endif\n \n         line += (line.empty() ? \"\" : \" \") + input;\n \n-        if (!is_multiline)\n+        if (!need_next_line)\n             break;\n     }\n \ndiff --git a/base/common/LineReader.h b/base/common/LineReader.h\nindex 3e64bc858ade..f31459078ab6 100644\n--- a/base/common/LineReader.h\n+++ b/base/common/LineReader.h\n@@ -21,7 +21,9 @@ class LineReader\n         WordsRange getCompletions(const String & prefix, size_t prefix_length) const;\n     };\n \n-    LineReader(const String & history_file_path, char extender, char delimiter = 0);  /// if delimiter != 0, then it's multiline mode\n+    using Patterns = std::vector<const char *>;\n+\n+    LineReader(const String & history_file_path, bool multiline, Patterns extenders, Patterns delimiters);\n     virtual ~LineReader() {}\n \n     /// Reads the whole line until delimiter (in multiline mode) or until the last line without extender.\n@@ -51,8 +53,10 @@ class LineReader\n     String input;\n \n private:\n-    const char extender;\n-    const char delimiter;\n+    bool multiline;\n+\n+    Patterns extenders;\n+    Patterns delimiters;\n \n     String prev_line;\n \ndiff --git a/base/common/ReadlineLineReader.cpp b/base/common/ReadlineLineReader.cpp\nindex ee9a37d2168c..d52ac0e97695 100644\n--- a/base/common/ReadlineLineReader.cpp\n+++ b/base/common/ReadlineLineReader.cpp\n@@ -56,8 +56,9 @@ static char * generate(const char * text, int state)\n     return nextMatch();\n };\n \n-ReadlineLineReader::ReadlineLineReader(const Suggest & suggest_, const String & history_file_path_, char extender_, char delimiter_)\n-    : LineReader(history_file_path_, extender_, delimiter_)\n+ReadlineLineReader::ReadlineLineReader(\n+    const Suggest & suggest_, const String & history_file_path_, bool multiline_, Patterns extenders_, Patterns delimiters_)\n+    : LineReader(history_file_path_, multiline_, std::move(extenders_), std::move(delimiters_))\n {\n     suggest = &suggest_;\n \ndiff --git a/base/common/ReadlineLineReader.h b/base/common/ReadlineLineReader.h\nindex 395ae56c7242..95bd23b46347 100644\n--- a/base/common/ReadlineLineReader.h\n+++ b/base/common/ReadlineLineReader.h\n@@ -8,7 +8,7 @@\n class ReadlineLineReader : public LineReader\n {\n public:\n-    ReadlineLineReader(const Suggest & suggest, const String & history_file_path, char extender, char delimiter = 0);\n+    ReadlineLineReader(const Suggest & suggest, const String & history_file_path, bool multiline, Patterns extenders_, Patterns delimiters_);\n     ~ReadlineLineReader() override;\n \n     void enableBracketedPaste() override;\ndiff --git a/base/common/ReplxxLineReader.cpp b/base/common/ReplxxLineReader.cpp\nindex 52c42235f1b7..141237d5d945 100644\n--- a/base/common/ReplxxLineReader.cpp\n+++ b/base/common/ReplxxLineReader.cpp\n@@ -16,8 +16,9 @@ void trim(String & s)\n \n }\n \n-ReplxxLineReader::ReplxxLineReader(const Suggest & suggest, const String & history_file_path_, char extender_, char delimiter_)\n-    : LineReader(history_file_path_, extender_, delimiter_)\n+ReplxxLineReader::ReplxxLineReader(\n+    const Suggest & suggest, const String & history_file_path_, bool multiline_, Patterns extenders_, Patterns delimiters_)\n+    : LineReader(history_file_path_, multiline_, std::move(extenders_), std::move(delimiters_))\n {\n     using namespace std::placeholders;\n     using Replxx = replxx::Replxx;\ndiff --git a/base/common/ReplxxLineReader.h b/base/common/ReplxxLineReader.h\nindex e7821f54ad3c..472198bcfafa 100644\n--- a/base/common/ReplxxLineReader.h\n+++ b/base/common/ReplxxLineReader.h\n@@ -7,7 +7,7 @@\n class ReplxxLineReader : public LineReader\n {\n public:\n-    ReplxxLineReader(const Suggest & suggest, const String & history_file_path, char extender, char delimiter = 0);\n+    ReplxxLineReader(const Suggest & suggest, const String & history_file_path, bool multiline, Patterns extenders_, Patterns delimiters_);\n     ~ReplxxLineReader() override;\n \n     void enableBracketedPaste() override;\ndiff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex f45daa737fdd..1c2e0925c2a7 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -498,12 +498,15 @@ class Client : public Poco::Util::Application\n             if (!history_file.empty() && !Poco::File(history_file).exists())\n                 Poco::File(history_file).createFile();\n \n+            LineReader::Patterns query_extenders = {\"\\\\\"};\n+            LineReader::Patterns query_delimiters = {\";\", \"\\\\G\"};\n+\n #if USE_REPLXX\n-            ReplxxLineReader lr(Suggest::instance(), history_file, '\\\\', config().has(\"multiline\") ? ';' : 0);\n+            ReplxxLineReader lr(Suggest::instance(), history_file, config().has(\"multiline\"), query_extenders, query_delimiters);\n #elif defined(USE_READLINE) && USE_READLINE\n-            ReadlineLineReader lr(Suggest::instance(), history_file, '\\\\', config().has(\"multiline\") ? ';' : 0);\n+            ReadlineLineReader lr(Suggest::instance(), history_file, config().has(\"multiline\"), query_extenders, query_delimiters);\n #else\n-            LineReader lr(history_file, '\\\\', config().has(\"multiline\") ? ';' : 0);\n+            LineReader lr(history_file, config().has(\"multiline\"), query_extenders, query_delimiters);\n #endif\n \n             /// Enable bracketed-paste-mode only when multiquery is enabled and multiline is\ndiff --git a/utils/zookeeper-cli/zookeeper-cli.cpp b/utils/zookeeper-cli/zookeeper-cli.cpp\nindex 6fd7b39ab687..17a8c9f0da8c 100644\n--- a/utils/zookeeper-cli/zookeeper-cli.cpp\n+++ b/utils/zookeeper-cli/zookeeper-cli.cpp\n@@ -70,7 +70,7 @@ int main(int argc, char ** argv)\n         Poco::Logger::root().setLevel(\"trace\");\n \n         zkutil::ZooKeeper zk(argv[1]);\n-        LineReader lr({}, '\\\\');\n+        LineReader lr({}, false, {\"\\\\\"}, {});\n \n         do\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.reference b/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.sh b/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.sh\nnew file mode 100755\nindex 000000000000..4d4292472da8\n--- /dev/null\n+++ b/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.sh\n@@ -0,0 +1,88 @@\n+#!/usr/bin/expect -f\n+\n+log_user 0\n+set timeout 60\n+spawn clickhouse-client\n+match_max 100000\n+\n+expect \":) \"\n+\n+send -- \"SELECT 1\\r\"\n+expect \"\u2502 1 \u2502\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\\\G\\r\"\n+expect \"Row 1:\"\n+expect \"1: 1\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\\\\\r\"\n+expect \":-] \"\n+send -- \", 2\\r\"\n+expect \"\u2502 1 \u2502 2 \u2502\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\\\\\r\"\n+expect \":-] \"\n+send -- \", 2\\\\G\\r\"\n+expect \"Row 1:\"\n+expect \"1: 1\"\n+expect \"2: 2\"\n+expect \":) \"\n+\n+send -- \"\u0004\"\n+expect eof\n+\n+set timeout 60\n+spawn clickhouse-client --multiline\n+match_max 100000\n+\n+expect \":) \"\n+\n+send -- \"SELECT 1;\\r\"\n+expect \"\u2502 1 \u2502\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\\\G\\r\"\n+expect \"Row 1:\"\n+expect \"1: 1\"\n+expect \":) \"\n+\n+send -- \"SELECT 1; \\r\"\n+expect \"\u2502 1 \u2502\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\\\G  \\r\"\n+expect \"Row 1:\"\n+expect \"1: 1\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\r\"\n+expect \":-] \"\n+send -- \";\\r\"\n+expect \"\u2502 1 \u2502\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\r\"\n+expect \":-] \"\n+send -- \"\\\\G\\r\"\n+expect \"Row 1:\"\n+expect \"1: 1\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\r\"\n+expect \":-] \"\n+send -- \", 2;\\r\"\n+expect \"\u2502 1 \u2502 2 \u2502\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\r\"\n+expect \":-] \"\n+send -- \", 2\\\\G\\r\"\n+expect \"Row 1:\"\n+expect \"1: 1\"\n+expect \"2: 2\"\n+expect \":) \"\n+\n+send -- \"\u0004\"\n+expect eof\ndiff --git a/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.reference b/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.sh b/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.sh\nnew file mode 100755\nindex 000000000000..3b98caeff2ec\n--- /dev/null\n+++ b/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.sh\n@@ -0,0 +1,34 @@\n+#!/usr/bin/expect -f\n+\n+log_user 0\n+set timeout 60\n+spawn clickhouse-client\n+match_max 100000\n+\n+expect \":) \"\n+\n+send -- \"SELECT 1\\r\"\n+expect \"\u2502 1 \u2502\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\\\G\\r\"\n+expect \"Row 1:\"\n+expect \"1: 1\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\\\\\r\"\n+expect \":-] \"\n+send -- \", 2\\r\"\n+expect \"\u2502 1 \u2502 2 \u2502\"\n+expect \":) \"\n+\n+send -- \"SELECT 1\\\\\\r\"\n+expect \":-] \"\n+send -- \", 2\\\\G\\r\"\n+expect \"Row 1:\"\n+expect \"1: 1\"\n+expect \"2: 2\"\n+expect \":) \"\n+\n+send -- \"\u0004\"\n+expect eof\n",
  "problem_statement": "clickhouse-client ignores \\G and Ctrl+C in multiline mode\n```\r\nclickhouse-client -m\r\nClickHouse client version 20.4.1.2742 (official build).\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 20.4.1 revision 54434.\r\n\r\nlaptop5591.local :) select 1\\G\r\n:-] ;\r\n\r\nSyntax error: failed at position 9:\r\n\r\nselect 1\\G ;\r\n\r\nUnrecognized token\r\n\r\nlaptop5591.local :) exit\r\n:-] ^C\r\nlaptop5591.local :) ^C\r\nlaptop5591.local :) exit;\r\nBye.\r\n```\r\n\r\n19.17 - works\r\n\r\nRelated:\r\nhttps://github.com/ClickHouse/ClickHouse/pull/8795\r\n\n",
  "hints_text": "@abyss7 Do you want to take this task?\n@abyss7 Did not respond in 21 days.",
  "created_at": "2020-06-02T03:27:28Z",
  "modified_files": [
    "base/common/LineReader.cpp",
    "base/common/LineReader.h",
    "base/common/ReadlineLineReader.cpp",
    "base/common/ReadlineLineReader.h",
    "base/common/ReplxxLineReader.cpp",
    "base/common/ReplxxLineReader.h",
    "programs/client/Client.cpp",
    "utils/zookeeper-cli/zookeeper-cli.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.sh",
    "b/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.sh"
  ]
}