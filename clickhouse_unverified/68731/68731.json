{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 68731,
  "instance_id": "ClickHouse__ClickHouse-68731",
  "issue_numbers": [
    "68687"
  ],
  "base_commit": "00aa60ca032f2b858579bd8c220bfcebfbe57f09",
  "patch": "diff --git a/src/Functions/FunctionsHashing.h b/src/Functions/FunctionsHashing.h\nindex 0cf4246fd662..3da0b2cd9bef 100644\n--- a/src/Functions/FunctionsHashing.h\n+++ b/src/Functions/FunctionsHashing.h\n@@ -93,9 +93,9 @@ namespace impl\n             if (is_const)\n                 i = 0;\n             assert(key0->size() == key1->size());\n-            if (offsets != nullptr)\n+            if (offsets != nullptr && i > 0)\n             {\n-                const auto * const begin = offsets->begin();\n+                const auto * const begin = std::upper_bound(offsets->begin(), offsets->end(), i - 1);\n                 const auto * upper = std::upper_bound(begin, offsets->end(), i);\n                 if (upper != offsets->end())\n                     i = upper - begin;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02534_keyed_siphash.reference b/tests/queries/0_stateless/02534_keyed_siphash.reference\nindex 31c0cae89819..a05446a494e2 100644\n--- a/tests/queries/0_stateless/02534_keyed_siphash.reference\n+++ b/tests/queries/0_stateless/02534_keyed_siphash.reference\n@@ -239,10 +239,15 @@ Check bug found fuzzing\n Test arrays and maps\n 608E1FF030C9E206185B112C2A25F1A7\n ABB65AE97711A2E053E324ED88B1D08B\n-Test emtpy arrays and maps\n+Test empty arrays and maps\n 4761183170873013810\n 0AD04BFD000000000000000000000000\n 4761183170873013810\n 0AD04BFD000000000000000000000000\n+Test maps with arrays as keys\n 16734549324845627102\n-D675BB3D687973A238AB891DD99C7047\n+1D03941D808D04810D2363A6C107D622\n+16734549324845627102\n+16734549324845627102\n+1D03941D808D04810D2363A6C107D622\n+1D03941D808D04810D2363A6C107D622\ndiff --git a/tests/queries/0_stateless/02534_keyed_siphash.sql b/tests/queries/0_stateless/02534_keyed_siphash.sql\nindex b499d8ef02b5..7cfc82512bdd 100644\n--- a/tests/queries/0_stateless/02534_keyed_siphash.sql\n+++ b/tests/queries/0_stateless/02534_keyed_siphash.sql\n@@ -346,10 +346,13 @@ INSERT INTO sipHashKeyed_keys FORMAT VALUES ({'a':'b', 'c':'d'}), ({'e':'f', 'g'\n SELECT hex(sipHash128ReferenceKeyed((0::UInt64, materialize(0::UInt64)), a)) FROM sipHashKeyed_keys ORDER BY a;\n DROP TABLE sipHashKeyed_keys;\n \n-SELECT 'Test emtpy arrays and maps';\n+SELECT 'Test empty arrays and maps';\n SELECT sipHash64Keyed((1::UInt64, 2::UInt64), []);\n SELECT hex(sipHash128Keyed((1::UInt64, 2::UInt64), []));\n SELECT sipHash64Keyed((1::UInt64, 2::UInt64), mapFromArrays([], []));\n SELECT hex(sipHash128Keyed((1::UInt64, 2::UInt64), mapFromArrays([], [])));\n+SELECT 'Test maps with arrays as keys';\n SELECT sipHash64Keyed((1::UInt64, 2::UInt64), map([0], 1, [2], 3));\n-SELECT hex(sipHash128Keyed((0::UInt64, 0::UInt64), map([0], 1, [2], 3)));\n+SELECT hex(sipHash128Keyed((1::UInt64, 2::UInt64), map([0], 1, [2], 3)));\n+SELECT sipHash64Keyed((materialize(1::UInt64), 2::UInt64), map([0], 1, [2], 3)) FROM numbers(2);\n+SELECT hex(sipHash128Keyed((materialize(1::UInt64), 2::UInt64), map([0], 1, [2], 3))) FROM numbers(2);\n",
  "problem_statement": "AST Fuzzer: `Assertion `key0->size() > i' failed`\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/6fefc900a60c4e10ca4eae098d6d11c0654e3f99/ast_fuzzer__debug_.html\r\n\r\nThis was likely introduced by https://github.com/ClickHouse/ClickHouse/pull/68630\r\n\r\nRepro:\r\n\r\n```sql\r\nCREATE TABLE cube__fuzz_42 (`a` Nullable(Float32), `b` UInt32, `s` Nullable(UInt32)) ENGINE = Memory;\r\nINSERT INTO cube__fuzz_42 FORMAT Values(null, 2, null);\r\nINSERT INTO cube__fuzz_42 FORMAT Values(3, 3, 3);\r\nSELECT char(sipHash64Keyed((CAST(materialize('1'), 'UInt64'), CAST('2', 'UInt64')), map([0], materialize(1), [2], toLowCardinality(3))), 22) FROM cube__fuzz_42 GROUP BY GROUPING SETS ((a), (b)) ORDER BY [sipHash128(materialize(44), tuple(1)) = sipHash128('2', toNullable(1), 1, 1, 1, toLowCardinality(5))] DESC;\r\n```\n",
  "hints_text": "Minimized repro:\r\n\r\n```sql\r\nSELECT sipHash64Keyed((materialize(1::UInt64), 2::UInt64), map([0], 1, [2], 3)) FROM numbers(2);\r\n```\n@aiven-sal In case you want to look. Otherwise, I'll check tomorrow.\nI can take a look",
  "created_at": "2024-08-22T14:52:03Z"
}