{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 70458,
  "instance_id": "ClickHouse__ClickHouse-70458",
  "issue_numbers": [
    "70396"
  ],
  "base_commit": "44b4bd38b987fd067ad464800f9760f8b3be3dff",
  "patch": "diff --git a/src/Parsers/ParserCreateQuery.h b/src/Parsers/ParserCreateQuery.h\nindex 82da2e7ea0ba..a58e190ecd95 100644\n--- a/src/Parsers/ParserCreateQuery.h\n+++ b/src/Parsers/ParserCreateQuery.h\n@@ -237,6 +237,7 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n             null_modifier.emplace(true);\n     }\n \n+    bool is_comment = false;\n     /// Collate is also allowed after NULL/NOT NULL\n     if (!collation_expression && s_collate.ignore(pos, expected)\n         && !collation_parser.parse(pos, collation_expression, expected))\n@@ -254,7 +255,9 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     else if (s_ephemeral.ignore(pos, expected))\n     {\n         default_specifier = s_ephemeral.getName();\n-        if (!expr_parser.parse(pos, default_expression, expected) && type)\n+        if (s_comment.ignore(pos, expected))\n+            is_comment = true;\n+        if ((is_comment || !expr_parser.parse(pos, default_expression, expected)) && type)\n         {\n             ephemeral_default = true;\n \n@@ -289,19 +292,22 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     if (require_type && !type && !default_expression)\n         return false; /// reject column name without type\n \n-    if ((type || default_expression) && allow_null_modifiers && !null_modifier.has_value())\n+    if (!is_comment)\n     {\n-        if (s_not.ignore(pos, expected))\n+        if ((type || default_expression) && allow_null_modifiers && !null_modifier.has_value())\n         {\n-            if (!s_null.ignore(pos, expected))\n-                return false;\n-            null_modifier.emplace(false);\n+            if (s_not.ignore(pos, expected))\n+            {\n+                if (!s_null.ignore(pos, expected))\n+                    return false;\n+                null_modifier.emplace(false);\n+            }\n+            else if (s_null.ignore(pos, expected))\n+                null_modifier.emplace(true);\n         }\n-        else if (s_null.ignore(pos, expected))\n-            null_modifier.emplace(true);\n     }\n \n-    if (s_comment.ignore(pos, expected))\n+    if (is_comment || s_comment.ignore(pos, expected))\n     {\n         /// should be followed by a string literal\n         if (!string_literal_parser.parse(pos, comment_expression, expected))\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03250_ephemeral_comment.reference b/tests/queries/0_stateless/03250_ephemeral_comment.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03250_ephemeral_comment.sql b/tests/queries/0_stateless/03250_ephemeral_comment.sql\nnew file mode 100644\nindex 000000000000..906417b9c296\n--- /dev/null\n+++ b/tests/queries/0_stateless/03250_ephemeral_comment.sql\n@@ -0,0 +1,11 @@\n+drop table if exists test;\n+CREATE TABLE test (\n+    `start_s`  UInt32 EPHEMERAL COMMENT 'start UNIX time' ,\n+    `start_us` UInt16 EPHEMERAL COMMENT 'start microseconds',\n+    `finish_s`  UInt32 EPHEMERAL COMMENT 'finish UNIX time',\n+    `finish_us` UInt16 EPHEMERAL COMMENT 'finish microseconds',\n+    `captured` DateTime MATERIALIZED fromUnixTimestamp(start_s),\n+    `duration` Decimal32(6) MATERIALIZED finish_s - start_s + (finish_us - start_us)/1000000\n+)\n+ENGINE Null;\n+drop table if exists test;\n",
  "problem_statement": "Comments with EPHEMERAL columns\nWhen trying to set comment to ephemeral columns, syntax error occurred.\r\n\r\n> ClickHouse Server version: 24.7.4\r\n\r\n`CREATE` table statement fails immediately.\r\n\r\nComment may be applied when using `ALTER TABLE my_table COMMENT my_column 'my glorious comment'` and will be shown in the `DESCRIBE my_table`, **BUT** after that any query associated with the table will fail.\r\n\r\nExample:\r\n```SQL\r\nCREATE TABLE api_profiler (\r\n    `start_s`  UInt32 EPHEMERAL COMMENT 'start UNIX time' ,\r\n    `start_us` UInt16 EPHEMERAL COMMENT 'start microseconds',\r\n    `finish_s`  UInt32 EPHEMERAL COMMENT 'finish UNIX time',\r\n    `finish_us` UInt16 EPHEMERAL COMMENT 'finish microseconds',\r\n    `captured` DateTime MATERIALIZED fromUnixTimestamp(start_s),\r\n    `duration` Decimal32(6) MATERIALIZED finish_s - start_s + (finish_us - start_us)/1000000\r\n)\r\nENGINE Null\r\n```\r\nProduces this:\r\n```\r\nCode: 62. DB::Exception: Syntax error: failed at position 69 (''start UNIX time'') (line 2, col 41): 'start UNIX time' ,\r\n    `start_us` UInt16 EPHEMERAL COMMENT 'start microseconds',\r\n    `finish_s`  UInt32 EPHEMERAL COMMENT 'finish UNIX time',\r\n    `finish_us` U. Expected one of: token, Dot, OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, NOT, NULL, COMMENT, CODEC, STATISTICS, TTL, PRIMARY KEY, SETTINGS, Comma, ClosingRoundBracket. (SYNTAX_ERROR) (version 24.7.4.51 (official build))\r\n```\n",
  "hints_text": "",
  "created_at": "2024-10-08T02:31:54Z"
}