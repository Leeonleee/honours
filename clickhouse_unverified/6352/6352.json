{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 6352,
  "instance_id": "ClickHouse__ClickHouse-6352",
  "issue_numbers": [
    "6182"
  ],
  "base_commit": "2d0c34cffafe31a0217a0e213cab83d51c504aa4",
  "patch": "diff --git a/dbms/src/Common/CounterInFile.h b/dbms/src/Common/CounterInFile.h\nindex cbf7105a7285..537d399e84fa 100644\n--- a/dbms/src/Common/CounterInFile.h\n+++ b/dbms/src/Common/CounterInFile.h\n@@ -67,13 +67,13 @@ class CounterInFile\n \n         int fd = ::open(path.c_str(), O_RDWR | O_CREAT, 0666);\n         if (-1 == fd)\n-            DB::throwFromErrno(\"Cannot open file \" + path, DB::ErrorCodes::CANNOT_OPEN_FILE);\n+            DB::throwFromErrnoWithPath(\"Cannot open file \" + path, path, DB::ErrorCodes::CANNOT_OPEN_FILE);\n \n         try\n         {\n             int flock_ret = flock(fd, LOCK_EX);\n             if (-1 == flock_ret)\n-                DB::throwFromErrno(\"Cannot lock file \" + path, DB::ErrorCodes::CANNOT_OPEN_FILE);\n+                DB::throwFromErrnoWithPath(\"Cannot lock file \" + path, path, DB::ErrorCodes::CANNOT_OPEN_FILE);\n \n             if (!file_doesnt_exists)\n             {\n@@ -141,7 +141,7 @@ class CounterInFile\n \n         int fd = ::open(path.c_str(), O_RDWR | O_CREAT, 0666);\n         if (-1 == fd)\n-            DB::throwFromErrno(\"Cannot open file \" + path, DB::ErrorCodes::CANNOT_OPEN_FILE);\n+            DB::throwFromErrnoWithPath(\"Cannot open file \" + path, path, DB::ErrorCodes::CANNOT_OPEN_FILE);\n \n         try\n         {\ndiff --git a/dbms/src/Common/Exception.cpp b/dbms/src/Common/Exception.cpp\nindex 958f254fe921..0b64c65b7913 100644\n--- a/dbms/src/Common/Exception.cpp\n+++ b/dbms/src/Common/Exception.cpp\n@@ -9,6 +9,9 @@\n #include <IO/ReadBufferFromString.h>\n #include <common/demangle.h>\n #include <Common/config_version.h>\n+#include <Common/formatReadable.h>\n+#include <Storages/MergeTree/DiskSpaceMonitor.h>\n+#include <filesystem>\n \n namespace DB\n {\n@@ -52,6 +55,11 @@ void throwFromErrno(const std::string & s, int code, int e)\n     throw ErrnoException(s + \", \" + errnoToString(code, e), code, e);\n }\n \n+void throwFromErrnoWithPath(const std::string & s, const std::string & path, int code, int the_errno)\n+{\n+    throw ErrnoException(s + \", \" + errnoToString(code, the_errno), code, the_errno, path);\n+}\n+\n void tryLogCurrentException(const char * log_name, const std::string & start_of_message)\n {\n     tryLogCurrentException(&Logger::get(log_name), start_of_message);\n@@ -68,7 +76,52 @@ void tryLogCurrentException(Poco::Logger * logger, const std::string & start_of_\n     }\n }\n \n-std::string getCurrentExceptionMessage(bool with_stacktrace, bool check_embedded_stacktrace)\n+void getNoSpaceLeftInfoMessage(std::filesystem::path path, std::string & msg)\n+{\n+    path = std::filesystem::absolute(path);\n+    /// It's possible to get ENOSPC for non existent file (e.g. if there are no free inodes and creat() fails)\n+    /// So try to get info for existent parent directory.\n+    while (!std::filesystem::exists(path) && path.has_relative_path())\n+        path = path.parent_path();\n+\n+    auto fs = DiskSpaceMonitor::getStatVFS(path);\n+    msg += \"\\nTotal space: \"      + formatReadableSizeWithBinarySuffix(fs.f_blocks * fs.f_bsize)\n+         + \"\\nAvailable space: \"  + formatReadableSizeWithBinarySuffix(fs.f_bavail * fs.f_bsize)\n+         + \"\\nTotal inodes: \"     + formatReadableQuantity(fs.f_files)\n+         + \"\\nAvailable inodes: \" + formatReadableQuantity(fs.f_favail);\n+\n+    auto mount_point = DiskSpaceMonitor::getMountPoint(path).string();\n+    msg += \"\\nMount point: \" + mount_point;\n+#if defined(__linux__)\n+    msg += \"\\nFilesystem: \" + DiskSpaceMonitor::getFilesystemName(mount_point);\n+#endif\n+}\n+\n+std::string getExtraExceptionInfo(const std::exception & e)\n+{\n+    String msg;\n+    try\n+    {\n+        if (auto file_exception = dynamic_cast<const Poco::FileException *>(&e))\n+        {\n+            if (file_exception->code() == ENOSPC)\n+                getNoSpaceLeftInfoMessage(file_exception->message(), msg);\n+        }\n+        else if (auto errno_exception = dynamic_cast<const DB::ErrnoException *>(&e))\n+        {\n+            if (errno_exception->getErrno() == ENOSPC && errno_exception->getPath())\n+                getNoSpaceLeftInfoMessage(errno_exception->getPath().value(), msg);\n+        }\n+    }\n+    catch (...)\n+    {\n+        msg += \"\\nCannot print extra info: \" + getCurrentExceptionMessage(false, false, false);\n+    }\n+\n+    return msg;\n+}\n+\n+std::string getCurrentExceptionMessage(bool with_stacktrace, bool check_embedded_stacktrace /*= false*/, bool with_extra_info /*= true*/)\n {\n     std::stringstream stream;\n \n@@ -78,7 +131,9 @@ std::string getCurrentExceptionMessage(bool with_stacktrace, bool check_embedded\n     }\n     catch (const Exception & e)\n     {\n-        stream << getExceptionMessage(e, with_stacktrace, check_embedded_stacktrace) << \" (version \" << VERSION_STRING << VERSION_OFFICIAL << \")\";\n+        stream << getExceptionMessage(e, with_stacktrace, check_embedded_stacktrace)\n+               << (with_extra_info ? getExtraExceptionInfo(e) : \"\")\n+               << \" (version \" << VERSION_STRING << VERSION_OFFICIAL << \")\";\n     }\n     catch (const Poco::Exception & e)\n     {\n@@ -86,7 +141,8 @@ std::string getCurrentExceptionMessage(bool with_stacktrace, bool check_embedded\n         {\n             stream << \"Poco::Exception. Code: \" << ErrorCodes::POCO_EXCEPTION << \", e.code() = \" << e.code()\n                 << \", e.displayText() = \" << e.displayText()\n-                << \" (version \" << VERSION_STRING << VERSION_OFFICIAL << \")\";\n+                << (with_extra_info ? getExtraExceptionInfo(e) : \"\")\n+                << \" (version \" << VERSION_STRING << VERSION_OFFICIAL;\n         }\n         catch (...) {}\n     }\n@@ -100,7 +156,9 @@ std::string getCurrentExceptionMessage(bool with_stacktrace, bool check_embedded\n             if (status)\n                 name += \" (demangling status: \" + toString(status) + \")\";\n \n-            stream << \"std::exception. Code: \" << ErrorCodes::STD_EXCEPTION << \", type: \" << name << \", e.what() = \" << e.what() << \", version = \" << VERSION_STRING << VERSION_OFFICIAL;\n+            stream << \"std::exception. Code: \" << ErrorCodes::STD_EXCEPTION << \", type: \" << name << \", e.what() = \" << e.what()\n+                   << (with_extra_info ? getExtraExceptionInfo(e) : \"\")\n+                   << \", version = \" << VERSION_STRING << VERSION_OFFICIAL;\n         }\n         catch (...) {}\n     }\ndiff --git a/dbms/src/Common/Exception.h b/dbms/src/Common/Exception.h\nindex 6b0656f48283..bd4d6e0be09b 100644\n--- a/dbms/src/Common/Exception.h\n+++ b/dbms/src/Common/Exception.h\n@@ -52,16 +52,18 @@ class Exception : public Poco::Exception\n class ErrnoException : public Exception\n {\n public:\n-    ErrnoException(const std::string & msg, int code, int saved_errno_)\n-        : Exception(msg, code), saved_errno(saved_errno_) {}\n+    ErrnoException(const std::string & msg, int code, int saved_errno_, const std::optional<std::string> & path_ = {})\n+        : Exception(msg, code), saved_errno(saved_errno_), path(path_) {}\n \n     ErrnoException * clone() const override { return new ErrnoException(*this); }\n     void rethrow() const override { throw *this; }\n \n     int getErrno() const { return saved_errno; }\n+    const std::optional<std::string> getPath() const { return path; }\n \n private:\n     int saved_errno;\n+    std::optional<std::string> path;\n \n     const char * name() const throw() override { return \"DB::ErrnoException\"; }\n     const char * className() const throw() override { return \"DB::ErrnoException\"; }\n@@ -73,6 +75,8 @@ using Exceptions = std::vector<std::exception_ptr>;\n \n std::string errnoToString(int code, int the_errno = errno);\n [[noreturn]] void throwFromErrno(const std::string & s, int code, int the_errno = errno);\n+[[noreturn]] void throwFromErrnoWithPath(const std::string & s, const std::string & path, int code,\n+                                         int the_errno = errno);\n \n \n /** Try to write an exception to the log (and forget about it).\n@@ -87,7 +91,8 @@ void tryLogCurrentException(Poco::Logger * logger, const std::string & start_of_\n   * check_embedded_stacktrace - if DB::Exception has embedded stacktrace then\n   *  only this stack trace will be printed.\n   */\n-std::string getCurrentExceptionMessage(bool with_stacktrace, bool check_embedded_stacktrace = false);\n+std::string getCurrentExceptionMessage(bool with_stacktrace, bool check_embedded_stacktrace = false,\n+                                       bool with_extra_info = true);\n \n /// Returns error code from ErrorCodes\n int getCurrentExceptionCode();\ndiff --git a/dbms/src/Common/StatusFile.cpp b/dbms/src/Common/StatusFile.cpp\nindex afe42262b557..e0f7788815c2 100644\n--- a/dbms/src/Common/StatusFile.cpp\n+++ b/dbms/src/Common/StatusFile.cpp\n@@ -51,7 +51,7 @@ StatusFile::StatusFile(const std::string & path_)\n     fd = ::open(path.c_str(), O_WRONLY | O_CREAT, 0666);\n \n     if (-1 == fd)\n-        throwFromErrno(\"Cannot open file \" + path, ErrorCodes::CANNOT_OPEN_FILE);\n+        throwFromErrnoWithPath(\"Cannot open file \" + path, path, ErrorCodes::CANNOT_OPEN_FILE);\n \n     try\n     {\n@@ -61,14 +61,14 @@ StatusFile::StatusFile(const std::string & path_)\n             if (errno == EWOULDBLOCK)\n                 throw Exception(\"Cannot lock file \" + path + \". Another server instance in same directory is already running.\", ErrorCodes::CANNOT_OPEN_FILE);\n             else\n-                throwFromErrno(\"Cannot lock file \" + path, ErrorCodes::CANNOT_OPEN_FILE);\n+                throwFromErrnoWithPath(\"Cannot lock file \" + path, path, ErrorCodes::CANNOT_OPEN_FILE);\n         }\n \n         if (0 != ftruncate(fd, 0))\n-            throwFromErrno(\"Cannot ftruncate \" + path, ErrorCodes::CANNOT_TRUNCATE_FILE);\n+            throwFromErrnoWithPath(\"Cannot ftruncate \" + path, path, ErrorCodes::CANNOT_TRUNCATE_FILE);\n \n         if (0 != lseek(fd, 0, SEEK_SET))\n-            throwFromErrno(\"Cannot lseek \" + path, ErrorCodes::CANNOT_SEEK_THROUGH_FILE);\n+            throwFromErrnoWithPath(\"Cannot lseek \" + path, path, ErrorCodes::CANNOT_SEEK_THROUGH_FILE);\n \n         /// Write information about current server instance to the file.\n         {\ndiff --git a/dbms/src/Common/createHardLink.cpp b/dbms/src/Common/createHardLink.cpp\nindex 824b7e99086d..5ed82231b269 100644\n--- a/dbms/src/Common/createHardLink.cpp\n+++ b/dbms/src/Common/createHardLink.cpp\n@@ -26,16 +26,19 @@ void createHardLink(const String & source_path, const String & destination_path)\n             struct stat destination_descr;\n \n             if (0 != lstat(source_path.c_str(), &source_descr))\n-                throwFromErrno(\"Cannot stat \" + source_path, ErrorCodes::CANNOT_STAT);\n+                throwFromErrnoWithPath(\"Cannot stat \" + source_path, source_path, ErrorCodes::CANNOT_STAT);\n \n             if (0 != lstat(destination_path.c_str(), &destination_descr))\n-                throwFromErrno(\"Cannot stat \" + destination_path, ErrorCodes::CANNOT_STAT);\n+                throwFromErrnoWithPath(\"Cannot stat \" + destination_path, destination_path, ErrorCodes::CANNOT_STAT);\n \n             if (source_descr.st_ino != destination_descr.st_ino)\n-                throwFromErrno(\"Destination file \" + destination_path + \" is already exist and have different inode.\", ErrorCodes::CANNOT_LINK, link_errno);\n+                throwFromErrnoWithPath(\n+                        \"Destination file \" + destination_path + \" is already exist and have different inode.\",\n+                        destination_path, ErrorCodes::CANNOT_LINK, link_errno);\n         }\n         else\n-            throwFromErrno(\"Cannot link \" + source_path + \" to \" + destination_path, ErrorCodes::CANNOT_LINK);\n+            throwFromErrnoWithPath(\"Cannot link \" + source_path + \" to \" + destination_path, destination_path,\n+                                   ErrorCodes::CANNOT_LINK);\n     }\n }\n \ndiff --git a/dbms/src/IO/MMapReadBufferFromFile.cpp b/dbms/src/IO/MMapReadBufferFromFile.cpp\nindex 74c07c407827..e478a11c16ac 100644\n--- a/dbms/src/IO/MMapReadBufferFromFile.cpp\n+++ b/dbms/src/IO/MMapReadBufferFromFile.cpp\n@@ -29,7 +29,8 @@ void MMapReadBufferFromFile::open(const std::string & file_name)\n     fd = ::open(file_name.c_str(), O_RDONLY);\n \n     if (-1 == fd)\n-        throwFromErrno(\"Cannot open file \" + file_name, errno == ENOENT ? ErrorCodes::FILE_DOESNT_EXIST : ErrorCodes::CANNOT_OPEN_FILE);\n+        throwFromErrnoWithPath(\"Cannot open file \" + file_name, file_name,\n+                               errno == ENOENT ? ErrorCodes::FILE_DOESNT_EXIST : ErrorCodes::CANNOT_OPEN_FILE);\n }\n \n \ndiff --git a/dbms/src/IO/ReadBufferAIO.cpp b/dbms/src/IO/ReadBufferAIO.cpp\nindex f47e04bff751..ada6bca907dd 100644\n--- a/dbms/src/IO/ReadBufferAIO.cpp\n+++ b/dbms/src/IO/ReadBufferAIO.cpp\n@@ -54,7 +54,7 @@ ReadBufferAIO::ReadBufferAIO(const std::string & filename_, size_t buffer_size_,\n     if (fd == -1)\n     {\n         auto error_code = (errno == ENOENT) ? ErrorCodes::FILE_DOESNT_EXIST : ErrorCodes::CANNOT_OPEN_FILE;\n-        throwFromErrno(\"Cannot open file \" + filename, error_code);\n+        throwFromErrnoWithPath(\"Cannot open file \" + filename, filename, error_code);\n     }\n }\n \ndiff --git a/dbms/src/IO/ReadBufferFromFile.cpp b/dbms/src/IO/ReadBufferFromFile.cpp\nindex b94fce8e0330..b9cd7caf155f 100644\n--- a/dbms/src/IO/ReadBufferFromFile.cpp\n+++ b/dbms/src/IO/ReadBufferFromFile.cpp\n@@ -41,12 +41,13 @@ ReadBufferFromFile::ReadBufferFromFile(\n     fd = ::open(file_name.c_str(), flags == -1 ? O_RDONLY : flags);\n \n     if (-1 == fd)\n-        throwFromErrno(\"Cannot open file \" + file_name, errno == ENOENT ? ErrorCodes::FILE_DOESNT_EXIST : ErrorCodes::CANNOT_OPEN_FILE);\n+        throwFromErrnoWithPath(\"Cannot open file \" + file_name, file_name,\n+                               errno == ENOENT ? ErrorCodes::FILE_DOESNT_EXIST : ErrorCodes::CANNOT_OPEN_FILE);\n #ifdef __APPLE__\n     if (o_direct)\n     {\n         if (fcntl(fd, F_NOCACHE, 1) == -1)\n-            throwFromErrno(\"Cannot set F_NOCACHE on file \" + file_name, ErrorCodes::CANNOT_OPEN_FILE);\n+            throwFromErrno(\"Cannot set F_NOCACHE on file \" + file_name, file_name, ErrorCodes::CANNOT_OPEN_FILE);\n     }\n #endif\n }\ndiff --git a/dbms/src/IO/ReadBufferFromFileDescriptor.cpp b/dbms/src/IO/ReadBufferFromFileDescriptor.cpp\nindex 70cc84567f32..db79d078c65a 100644\n--- a/dbms/src/IO/ReadBufferFromFileDescriptor.cpp\n+++ b/dbms/src/IO/ReadBufferFromFileDescriptor.cpp\n@@ -61,7 +61,8 @@ bool ReadBufferFromFileDescriptor::nextImpl()\n         if (-1 == res && errno != EINTR)\n         {\n             ProfileEvents::increment(ProfileEvents::ReadBufferFromFileDescriptorReadFailed);\n-            throwFromErrno(\"Cannot read from file \" + getFileName(), ErrorCodes::CANNOT_READ_FROM_FILE_DESCRIPTOR);\n+            throwFromErrnoWithPath(\"Cannot read from file \" + getFileName(), getFileName(),\n+                                   ErrorCodes::CANNOT_READ_FROM_FILE_DESCRIPTOR);\n         }\n \n         if (res > 0)\n@@ -124,7 +125,8 @@ off_t ReadBufferFromFileDescriptor::doSeek(off_t offset, int whence)\n         pos = working_buffer.end();\n         off_t res = ::lseek(fd, new_pos, SEEK_SET);\n         if (-1 == res)\n-            throwFromErrno(\"Cannot seek through file \" + getFileName(), ErrorCodes::CANNOT_SEEK_THROUGH_FILE);\n+            throwFromErrnoWithPath(\"Cannot seek through file \" + getFileName(), getFileName(),\n+                                   ErrorCodes::CANNOT_SEEK_THROUGH_FILE);\n         pos_in_file = new_pos;\n \n         watch.stop();\ndiff --git a/dbms/src/IO/WriteBufferAIO.cpp b/dbms/src/IO/WriteBufferAIO.cpp\nindex 2fe7da278096..2dc177111a18 100644\n--- a/dbms/src/IO/WriteBufferAIO.cpp\n+++ b/dbms/src/IO/WriteBufferAIO.cpp\n@@ -62,7 +62,7 @@ WriteBufferAIO::WriteBufferAIO(const std::string & filename_, size_t buffer_size\n     if (fd == -1)\n     {\n         auto error_code = (errno == ENOENT) ? ErrorCodes::FILE_DOESNT_EXIST : ErrorCodes::CANNOT_OPEN_FILE;\n-        throwFromErrno(\"Cannot open file \" + filename, error_code);\n+        throwFromErrnoWithPath(\"Cannot open file \" + filename, filename, error_code);\n     }\n }\n \n@@ -96,7 +96,7 @@ void WriteBufferAIO::sync()\n     /// Ask OS to flush data to disk.\n     int res = ::fsync(fd);\n     if (res == -1)\n-        throwFromErrno(\"Cannot fsync \" + getFileName(), ErrorCodes::CANNOT_FSYNC);\n+        throwFromErrnoWithPath(\"Cannot fsync \" + getFileName(), getFileName(), ErrorCodes::CANNOT_FSYNC);\n }\n \n void WriteBufferAIO::nextImpl()\n@@ -173,7 +173,7 @@ void WriteBufferAIO::doTruncate(off_t length)\n \n     int res = ::ftruncate(fd, length);\n     if (res == -1)\n-        throwFromErrno(\"Cannot truncate file \" + filename, ErrorCodes::CANNOT_TRUNCATE_FILE);\n+        throwFromErrnoWithPath(\"Cannot truncate file \" + filename, filename, ErrorCodes::CANNOT_TRUNCATE_FILE);\n }\n \n void WriteBufferAIO::flush()\n@@ -427,7 +427,7 @@ void WriteBufferAIO::finalize()\n         /// Truncate the file to remove unnecessary zeros from it.\n         int res = ::ftruncate(fd, max_pos_in_file);\n         if (res == -1)\n-            throwFromErrno(\"Cannot truncate file \" + filename, ErrorCodes::CANNOT_TRUNCATE_FILE);\n+            throwFromErrnoWithPath(\"Cannot truncate file \" + filename, filename, ErrorCodes::CANNOT_TRUNCATE_FILE);\n     }\n }\n \ndiff --git a/dbms/src/IO/WriteBufferFromFile.cpp b/dbms/src/IO/WriteBufferFromFile.cpp\nindex 3082f674fffc..5e6fd7d6fe17 100644\n--- a/dbms/src/IO/WriteBufferFromFile.cpp\n+++ b/dbms/src/IO/WriteBufferFromFile.cpp\n@@ -44,13 +44,14 @@ WriteBufferFromFile::WriteBufferFromFile(\n     fd = ::open(file_name.c_str(), flags == -1 ? O_WRONLY | O_TRUNC | O_CREAT : flags, mode);\n \n     if (-1 == fd)\n-        throwFromErrno(\"Cannot open file \" + file_name, errno == ENOENT ? ErrorCodes::FILE_DOESNT_EXIST : ErrorCodes::CANNOT_OPEN_FILE);\n+        throwFromErrnoWithPath(\"Cannot open file \" + file_name, file_name,\n+                               errno == ENOENT ? ErrorCodes::FILE_DOESNT_EXIST : ErrorCodes::CANNOT_OPEN_FILE);\n \n #ifdef __APPLE__\n     if (o_direct)\n     {\n         if (fcntl(fd, F_NOCACHE, 1) == -1)\n-            throwFromErrno(\"Cannot set F_NOCACHE on file \" + file_name, ErrorCodes::CANNOT_OPEN_FILE);\n+            throwFromErrno(\"Cannot set F_NOCACHE on file \" + file_name, file_name, ErrorCodes::CANNOT_OPEN_FILE);\n     }\n #endif\n }\ndiff --git a/dbms/src/IO/WriteBufferFromFileDescriptor.cpp b/dbms/src/IO/WriteBufferFromFileDescriptor.cpp\nindex 0ca39b47ada6..bfa1e9582d3d 100644\n--- a/dbms/src/IO/WriteBufferFromFileDescriptor.cpp\n+++ b/dbms/src/IO/WriteBufferFromFileDescriptor.cpp\n@@ -56,7 +56,8 @@ void WriteBufferFromFileDescriptor::nextImpl()\n         if ((-1 == res || 0 == res) && errno != EINTR)\n         {\n             ProfileEvents::increment(ProfileEvents::WriteBufferFromFileDescriptorWriteFailed);\n-            throwFromErrno(\"Cannot write to file \" + getFileName(), ErrorCodes::CANNOT_WRITE_TO_FILE_DESCRIPTOR);\n+            throwFromErrnoWithPath(\"Cannot write to file \" + getFileName(), getFileName(),\n+                                   ErrorCodes::CANNOT_WRITE_TO_FILE_DESCRIPTOR);\n         }\n \n         if (res > 0)\n@@ -111,7 +112,7 @@ void WriteBufferFromFileDescriptor::sync()\n     /// Request OS to sync data with storage medium.\n     int res = fsync(fd);\n     if (-1 == res)\n-        throwFromErrno(\"Cannot fsync \" + getFileName(), ErrorCodes::CANNOT_FSYNC);\n+        throwFromErrnoWithPath(\"Cannot fsync \" + getFileName(), getFileName(), ErrorCodes::CANNOT_FSYNC);\n }\n \n \n@@ -119,7 +120,8 @@ off_t WriteBufferFromFileDescriptor::doSeek(off_t offset, int whence)\n {\n     off_t res = lseek(fd, offset, whence);\n     if (-1 == res)\n-        throwFromErrno(\"Cannot seek through file \" + getFileName(), ErrorCodes::CANNOT_SEEK_THROUGH_FILE);\n+        throwFromErrnoWithPath(\"Cannot seek through file \" + getFileName(), getFileName(),\n+                               ErrorCodes::CANNOT_SEEK_THROUGH_FILE);\n     return res;\n }\n \n@@ -128,7 +130,7 @@ void WriteBufferFromFileDescriptor::doTruncate(off_t length)\n {\n     int res = ftruncate(fd, length);\n     if (-1 == res)\n-        throwFromErrno(\"Cannot truncate file \" + getFileName(), ErrorCodes::CANNOT_TRUNCATE_FILE);\n+        throwFromErrnoWithPath(\"Cannot truncate file \" + getFileName(), getFileName(), ErrorCodes::CANNOT_TRUNCATE_FILE);\n }\n \n }\ndiff --git a/dbms/src/IO/WriteBufferFromTemporaryFile.cpp b/dbms/src/IO/WriteBufferFromTemporaryFile.cpp\nindex e1250c58097e..c5a6bc043507 100644\n--- a/dbms/src/IO/WriteBufferFromTemporaryFile.cpp\n+++ b/dbms/src/IO/WriteBufferFromTemporaryFile.cpp\n@@ -39,7 +39,8 @@ class ReadBufferFromTemporaryWriteBuffer : public ReadBufferFromFile\n \n         off_t res = lseek(fd, 0, SEEK_SET);\n         if (-1 == res)\n-            throwFromErrno(\"Cannot reread temporary file \" + file_name, ErrorCodes::CANNOT_SEEK_THROUGH_FILE);\n+            throwFromErrnoWithPath(\"Cannot reread temporary file \" + file_name, file_name,\n+                                   ErrorCodes::CANNOT_SEEK_THROUGH_FILE);\n \n         return std::make_shared<ReadBufferFromTemporaryWriteBuffer>(fd, file_name, std::move(origin->tmp_file));\n     }\ndiff --git a/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp b/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp\nindex da374b1b65d8..97104fc8f715 100644\n--- a/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp\n+++ b/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp\n@@ -565,7 +565,8 @@ void DistributedBlockOutputStream::writeToShard(const Block & block, const std::\n         }\n \n         if (link(first_file_tmp_path.data(), block_file_path.data()))\n-            throwFromErrno(\"Could not link \" + block_file_path + \" to \" + first_file_tmp_path, ErrorCodes::CANNOT_LINK);\n+            throwFromErrnoWithPath(\"Could not link \" + block_file_path + \" to \" + first_file_tmp_path, block_file_path,\n+                                   ErrorCodes::CANNOT_LINK);\n     }\n \n     /** remove the temporary file, enabling the OS to reclaim inode after all threads\ndiff --git a/dbms/src/Storages/MergeTree/DiskSpaceMonitor.h b/dbms/src/Storages/MergeTree/DiskSpaceMonitor.h\nindex d518fea54905..bd95d10e8349 100644\n--- a/dbms/src/Storages/MergeTree/DiskSpaceMonitor.h\n+++ b/dbms/src/Storages/MergeTree/DiskSpaceMonitor.h\n@@ -2,7 +2,15 @@\n \n #include <mutex>\n #include <sys/statvfs.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <unistd.h>\n+#if defined(__linux__)\n+#include <cstdio>\n+#include <mntent.h>\n+#endif\n #include <memory>\n+#include <filesystem>\n #include <boost/noncopyable.hpp>\n #include <common/logger_useful.h>\n #include <Common/Exception.h>\n@@ -23,6 +31,7 @@ namespace ErrorCodes\n {\n     extern const int CANNOT_STATVFS;\n     extern const int NOT_ENOUGH_SPACE;\n+    extern const int SYSTEM_ERROR;\n }\n \n \n@@ -96,12 +105,18 @@ class DiskSpaceMonitor\n \n     using ReservationPtr = std::unique_ptr<Reservation>;\n \n-    static UInt64 getUnreservedFreeSpace(const std::string & path)\n+    inline static struct statvfs getStatVFS(const std::string & path)\n     {\n         struct statvfs fs;\n-\n         if (statvfs(path.c_str(), &fs) != 0)\n-            throwFromErrno(\"Could not calculate available disk space (statvfs)\", ErrorCodes::CANNOT_STATVFS);\n+            throwFromErrnoWithPath(\"Could not calculate available disk space (statvfs)\", path,\n+                                   ErrorCodes::CANNOT_STATVFS);\n+        return fs;\n+    }\n+\n+    static UInt64 getUnreservedFreeSpace(const std::string & path)\n+    {\n+        struct statvfs fs = getStatVFS(path);\n \n         UInt64 res = fs.f_bfree * fs.f_bsize;\n \n@@ -140,6 +155,62 @@ class DiskSpaceMonitor\n         return std::make_unique<Reservation>(size);\n     }\n \n+    /// Returns mount point of filesystem where absoulte_path (must exist) is located\n+    static std::filesystem::path getMountPoint(std::filesystem::path absolute_path)\n+    {\n+        if (absolute_path.is_relative())\n+            throw Exception(\"Path is relative. It's a bug.\", ErrorCodes::LOGICAL_ERROR);\n+\n+        absolute_path = std::filesystem::canonical(absolute_path);\n+\n+        const auto get_device_id = [](const std::filesystem::path & p)\n+        {\n+            struct stat st;\n+            if (stat(p.c_str(), &st))\n+                throwFromErrnoWithPath(\"Cannot stat \" + p.string(), p.string(), ErrorCodes::SYSTEM_ERROR);\n+            return st.st_dev;\n+        };\n+\n+        /// If /some/path/to/dir/ and /some/path/to/ have different device id,\n+        /// then device which contains /some/path/to/dir/filename is mounted to /some/path/to/dir/\n+        auto device_id = get_device_id(absolute_path);\n+        while (absolute_path.has_relative_path())\n+        {\n+            auto parent = absolute_path.parent_path();\n+            auto parent_device_id = get_device_id(parent);\n+            if (device_id != parent_device_id)\n+                return absolute_path;\n+            absolute_path = parent;\n+            device_id = parent_device_id;\n+        }\n+\n+        return absolute_path;\n+    }\n+\n+    /// Returns name of filesystem mounted to mount_point\n+#if !defined(__linux__)\n+[[noreturn]]\n+#endif\n+    static std::string getFilesystemName([[maybe_unused]] const std::string & mount_point)\n+    {\n+#if defined(__linux__)\n+        auto mounted_filesystems = setmntent(\"/etc/mtab\", \"r\");\n+        if (!mounted_filesystems)\n+            throw DB::Exception(\"Cannot open /etc/mtab to get name of filesystem\", ErrorCodes::SYSTEM_ERROR);\n+        mntent fs_info;\n+        constexpr size_t buf_size = 4096;     /// The same as buffer used for getmntent in glibc. It can happen that it's not enough\n+        char buf[buf_size];\n+        while (getmntent_r(mounted_filesystems, &fs_info, buf, buf_size) && fs_info.mnt_dir != mount_point)\n+            ;\n+        endmntent(mounted_filesystems);\n+        if (fs_info.mnt_dir != mount_point)\n+            throw DB::Exception(\"Cannot find name of filesystem by mount point \" + mount_point, ErrorCodes::SYSTEM_ERROR);\n+        return fs_info.mnt_fsname;\n+#else\n+        throw DB::Exception(\"Supported on linux only\", ErrorCodes::NOT_IMPLEMENTED);\n+#endif\n+    }\n+\n private:\n     static UInt64 reserved_bytes;\n     static UInt64 reservation_count;\ndiff --git a/dbms/src/Storages/MergeTree/MergeTreeDataPart.cpp b/dbms/src/Storages/MergeTree/MergeTreeDataPart.cpp\nindex cdd72a222bd8..f64bdcc97402 100644\n--- a/dbms/src/Storages/MergeTree/MergeTreeDataPart.cpp\n+++ b/dbms/src/Storages/MergeTree/MergeTreeDataPart.cpp\n@@ -413,7 +413,8 @@ void MergeTreeDataPart::remove() const\n         {\n             String path_to_remove = to + \"/\" + file;\n             if (0 != unlink(path_to_remove.c_str()))\n-                throwFromErrno(\"Cannot unlink file \" + path_to_remove, ErrorCodes::CANNOT_UNLINK);\n+                throwFromErrnoWithPath(\"Cannot unlink file \" + path_to_remove, path_to_remove,\n+                                       ErrorCodes::CANNOT_UNLINK);\n         }\n #if !__clang__\n #pragma GCC diagnostic pop\n@@ -423,11 +424,12 @@ void MergeTreeDataPart::remove() const\n         {\n             String path_to_remove = to + \"/\" + file;\n             if (0 != unlink(path_to_remove.c_str()))\n-                throwFromErrno(\"Cannot unlink file \" + path_to_remove, ErrorCodes::CANNOT_UNLINK);\n+                throwFromErrnoWithPath(\"Cannot unlink file \" + path_to_remove, path_to_remove,\n+                                       ErrorCodes::CANNOT_UNLINK);\n         }\n \n         if (0 != rmdir(to.c_str()))\n-            throwFromErrno(\"Cannot rmdir file \" + to, ErrorCodes::CANNOT_UNLINK);\n+            throwFromErrnoWithPath(\"Cannot rmdir file \" + to, to, ErrorCodes::CANNOT_UNLINK);\n     }\n     catch (...)\n     {\ndiff --git a/dbms/src/Storages/StorageStripeLog.cpp b/dbms/src/Storages/StorageStripeLog.cpp\nindex 3052962606da..42745e119718 100644\n--- a/dbms/src/Storages/StorageStripeLog.cpp\n+++ b/dbms/src/Storages/StorageStripeLog.cpp\n@@ -214,7 +214,8 @@ StorageStripeLog::StorageStripeLog(\n     {\n         /// create files if they do not exist\n         if (0 != mkdir(full_path.c_str(), S_IRWXU | S_IRWXG | S_IRWXO) && errno != EEXIST)\n-            throwFromErrno(\"Cannot create directory \" + full_path, ErrorCodes::CANNOT_CREATE_DIRECTORY);\n+            throwFromErrnoWithPath(\"Cannot create directory \" + full_path, full_path,\n+                                   ErrorCodes::CANNOT_CREATE_DIRECTORY);\n     }\n }\n \ndiff --git a/dbms/src/Storages/StorageTinyLog.cpp b/dbms/src/Storages/StorageTinyLog.cpp\nindex 214964c32b45..096fe5b76e55 100644\n--- a/dbms/src/Storages/StorageTinyLog.cpp\n+++ b/dbms/src/Storages/StorageTinyLog.cpp\n@@ -343,7 +343,8 @@ StorageTinyLog::StorageTinyLog(\n     {\n         /// create files if they do not exist\n         if (0 != mkdir(full_path.c_str(), S_IRWXU | S_IRWXG | S_IRWXO) && errno != EEXIST)\n-            throwFromErrno(\"Cannot create directory \" + full_path, ErrorCodes::CANNOT_CREATE_DIRECTORY);\n+            throwFromErrnoWithPath(\"Cannot create directory \" + full_path, full_path,\n+                                   ErrorCodes::CANNOT_CREATE_DIRECTORY);\n     }\n \n     for (const auto & col : getColumns().getAllPhysical())\n",
  "test_patch": "diff --git a/dbms/src/Storages/tests/remove_symlink_directory.cpp b/dbms/src/Storages/tests/remove_symlink_directory.cpp\nindex 8098ee5dc32b..b455357863e6 100644\n--- a/dbms/src/Storages/tests/remove_symlink_directory.cpp\n+++ b/dbms/src/Storages/tests/remove_symlink_directory.cpp\n@@ -22,7 +22,7 @@ try\n     Poco::File(\"./test_dir/file\").createFile();\n \n     if (0 != symlink(\"./test_dir\", \"./test_link\"))\n-        DB::throwFromErrno(\"Cannot create symlink\", DB::ErrorCodes::SYSTEM_ERROR);\n+        DB::throwFromErrnoWithPath(\"Cannot create symlink\", \"./test_link\", DB::ErrorCodes::SYSTEM_ERROR);\n \n     Poco::File link(\"./test_link\");\n     link.renameTo(\"./test_link2\");\n",
  "problem_statement": "In \"no space left on device\" exception message, output what filesystem path is used and what total space the fs has.\n**Use case**\r\n#6179\r\nLook at the error messages of this test suite:\r\nhttps://clickhouse-test-reports.s3.yandex.net/6179/2ced6a3adb0229d92d6186590adfe7927fefb523/functional_stateless_tests_(debug).html\n",
  "hints_text": "",
  "created_at": "2019-08-05T19:46:17Z"
}