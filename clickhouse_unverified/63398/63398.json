{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63398,
  "instance_id": "ClickHouse__ClickHouse-63398",
  "issue_numbers": [
    "46335"
  ],
  "base_commit": "4eb5bea203dea8ab17fb89cb273e1d373e1ed06d",
  "patch": "diff --git a/src/Functions/grouping.h b/src/Functions/grouping.h\nindex 830c509f1f51..22cbcf17d6c1 100644\n--- a/src/Functions/grouping.h\n+++ b/src/Functions/grouping.h\n@@ -47,6 +47,10 @@ class FunctionGroupingBase : public IFunction\n \n     bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n \n+    /// Change it to never return LowCardinality, making it consistent when using groupingForRollup / groupingForforCube\n+    /// with __grouping_set\n+    bool canBeExecutedOnLowCardinalityDictionary() const override { return false; }\n+\n     DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override\n     {\n         return std::make_shared<DataTypeUInt64>();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03146_tpc_ds_grouping.reference b/tests/queries/0_stateless/03146_tpc_ds_grouping.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03146_tpc_ds_grouping.sql b/tests/queries/0_stateless/03146_tpc_ds_grouping.sql\nnew file mode 100644\nindex 000000000000..f48c40e9bc44\n--- /dev/null\n+++ b/tests/queries/0_stateless/03146_tpc_ds_grouping.sql\n@@ -0,0 +1,71 @@\n+-- https://github.com/ClickHouse/ClickHouse/issues/46335\n+SET allow_experimental_analyzer = 1;\n+SELECT\n+    key_a + key_b AS d,\n+    rank() OVER () AS f\n+FROM\n+    (\n+        SELECT\n+            rand() % 10 AS key_a,\n+            rand(1) % 5 AS key_b,\n+            number\n+        FROM numbers(100)\n+        )\n+GROUP BY\n+    key_a,\n+    key_b\n+WITH ROLLUP\n+ORDER BY multiIf(d = 0, key_a, NULL) ASC\n+FORMAT Null;\n+\n+SELECT\n+    key_a + key_b AS d,\n+    rank() OVER (PARTITION BY key_a + key_b) AS f\n+FROM\n+    (\n+        SELECT\n+            rand() % 10 AS key_a,\n+            rand(1) % 5 AS key_b,\n+            number\n+        FROM numbers(100)\n+        )\n+GROUP BY\n+    key_a,\n+    key_b\n+WITH ROLLUP\n+ORDER BY multiIf(d = 0, key_a, NULL) ASC\n+FORMAT Null;\n+\n+\n+SELECT\n+    grouping(key_a) + grouping(key_b) AS d,\n+    rank() OVER (PARTITION BY grouping(key_a) + grouping(key_b), multiIf(grouping(key_b) = 0, key_a, NULL)) AS f\n+FROM\n+    (\n+        SELECT\n+            rand() % 10 AS key_a,\n+            rand(1) % 5 AS key_b,\n+            number\n+        FROM numbers(100)\n+        )\n+GROUP BY\n+    key_a,\n+    key_b\n+WITH ROLLUP\n+ORDER BY multiIf(d = 0, key_a, NULL) ASC\n+FORMAT Null;\n+\n+SELECT grouping(key_a) + grouping(key_b) AS d\n+FROM\n+    (\n+        SELECT\n+            rand() % 10 AS key_a,\n+            rand(toLowCardinality(1)) % 5 AS key_b,\n+            number\n+        FROM numbers(100)\n+        )\n+GROUP BY\n+    key_a,\n+    key_b\n+WITH ROLLUP\n+FORMAT Null;\n",
  "problem_statement": "Unknown column: if(equals(plus(...))) bug TPC-DS\n\r\n**Describe what's wrong**\r\n\r\n23.2\r\n\r\n```sql\r\nSELECT key_a + key_b as d, rank() OVER () as f FROM (SELECT rand() % 10 as key_a, rand(1) % 5 as key_b, number  FROM numbers(100)) GROUP BY rollup(key_a,key_b) ORDER BY  case when d = 0 then key_a end;\r\n\r\nCode: 47. DB::Exception: Unknown column: if(equals(plus(key_a, key_b), 0), key_a, NULL), there are only columns __grouping_set, key_a, key_b, plus(key_a, key_b). (UNKNOWN_IDENTIFIER)\r\n\r\nSELECT key_a + key_b as d, rank() OVER (PARTITION BY key_a + key_b) as f FROM (SELECT rand() % 10 as key_a, rand(1) % 5 as key_b, number  FROM numbers(100)) GROUP BY rollup(key_a,key_b) ORDER BY  case when d = 0 then key_a end;\r\n\r\nCode: 47. DB::Exception: Unknown column: if(equals(plus(key_a, key_b), 0), key_a, NULL), there are only columns __grouping_set, key_a, key_b, plus(key_a, key_b). (UNKNOWN_IDENTIFIER)\r\n\r\n SELECT grouping(key_a) + grouping(key_b) as d, rank() OVER (PARTITION BY grouping(key_a) + grouping(key_b), case when grouping(key_b) = 0 then key_a end) as f FROM (SELECT rand() % 10 as key_a, rand(1) % 5 as key_b, number  FROM numbers(100)) GROUP BY rollup(key_a,key_b) ORDER BY  case when d = 0 then key_a end;\r\n\r\nReceived exception:\r\nCode: 47. DB::Exception: Unknown column: if(equals(plus(grouping(key_a), grouping(key_b)), 0), key_a, NULL), there are only columns __grouping_set, key_a, key_b, grouping(key_a), grouping(key_b), plus(grouping(key_a), grouping(key_b)), 0, equals(grouping(key_b), 0), NULL, if(equals(grouping(key_b), 0), key_a, NULL). (UNKNOWN_IDENTIFIER)\r\n```\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes, 23.2\r\n\r\n**Expected behavior**\r\n\r\nQuery works\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```sql\r\nReceived exception from server (version 23.2.1):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Unknown column: if(equals(plus(grouping(i_category), grouping(i_class)), 0), i_category, NULL), there are only columns __grouping_set, i_category, i_class, sum(ws_net_paid), grouping(i_category), grouping(i_class), plus(grouping(i_category), grouping(i_class)), 0, equals(grouping(i_class), 0), NULL, if(equals(grouping(i_class), 0), i_category, NULL). (UNKNOWN_IDENTIFIER)\r\n(query: select   \r\n    sum(ws_net_paid) as total_sum\r\n   ,i_category\r\n   ,i_class\r\n   ,grouping(i_category)+grouping(i_class) as lochierarchy\r\n   ,rank() over (\r\n    partition by grouping(i_category)+grouping(i_class),\r\n    case when grouping(i_class) = 0 then i_category end \r\n    order by sum(ws_net_paid) desc) as rank_within_parent\r\n from\r\n    web_sales\r\n   ,date_dim       d1\r\n   ,item\r\n where\r\n    d1.d_month_seq between 1212 and 1212+11\r\n and d1.d_date_sk = ws_sold_date_sk\r\n and i_item_sk  = ws_item_sk\r\n group by rollup(i_category,i_class)\r\n order by\r\n   lochierarchy desc,\r\n   case when lochierarchy = 0 then i_category end,\r\n   rank_within_parent\r\n LIMIT 100;)\r\n```\r\n\n",
  "hints_text": "Works with the analyzer",
  "created_at": "2024-05-06T10:40:21Z"
}