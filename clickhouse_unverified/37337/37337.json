{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37337,
  "instance_id": "ClickHouse__ClickHouse-37337",
  "issue_numbers": [
    "37229",
    "35889"
  ],
  "base_commit": "168814ed7840b65e0997e45bf1ec5b27dbc5a796",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex df53333b6357..304cfa2f3f40 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -578,7 +578,12 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n             if (col_decl.type)\n                 column.type = name_type_it->type;\n             else\n+            {\n                 column.type = defaults_sample_block.getByName(column.name).type;\n+                /// set nullability for case of column declaration w/o type but with default expression\n+                if ((col_decl.null_modifier && *col_decl.null_modifier) || make_columns_nullable)\n+                    column.type = makeNullable(column.type);\n+            }\n \n             column.default_desc.kind = columnDefaultKindFromString(col_decl.default_specifier);\n             column.default_desc.expression = default_expr;\ndiff --git a/src/Parsers/ParserCreateQuery.h b/src/Parsers/ParserCreateQuery.h\nindex 29cd08554b5b..daf27c0dc679 100644\n--- a/src/Parsers/ParserCreateQuery.h\n+++ b/src/Parsers/ParserCreateQuery.h\n@@ -105,9 +105,9 @@ class IParserColumnDeclaration : public IParserBase\n \n     bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override;\n \n-    bool require_type = true;\n-    bool allow_null_modifiers = false;\n-    bool check_keywords_after_name = false;\n+    const bool require_type = true;\n+    const bool allow_null_modifiers = false;\n+    const bool check_keywords_after_name = false;\n     /// just for ALTER TABLE ALTER COLUMN use\n     bool check_type_keyword = false;\n };\n@@ -175,7 +175,22 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     ASTPtr ttl_expression;\n     ASTPtr collation_expression;\n \n-    if (!s_default.checkWithoutMoving(pos, expected)\n+    auto null_check_without_moving = [&]() -> bool\n+    {\n+        if (!allow_null_modifiers)\n+            return false;\n+\n+        if (s_null.checkWithoutMoving(pos, expected))\n+            return true;\n+\n+        Pos before_null = pos;\n+        bool res = s_not.check(pos, expected) && s_null.checkWithoutMoving(pos, expected);\n+        pos = before_null;\n+        return res;\n+    };\n+\n+    if (!null_check_without_moving()\n+        && !s_default.checkWithoutMoving(pos, expected)\n         && !s_materialized.checkWithoutMoving(pos, expected)\n         && !s_ephemeral.checkWithoutMoving(pos, expected)\n         && !s_alias.checkWithoutMoving(pos, expected)\n@@ -195,6 +210,18 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n         }\n     }\n \n+    if (allow_null_modifiers)\n+    {\n+        if (s_not.check(pos, expected))\n+        {\n+            if (!s_null.check(pos, expected))\n+                return false;\n+            null_modifier.emplace(false);\n+        }\n+        else if (s_null.check(pos, expected))\n+            null_modifier.emplace(true);\n+    }\n+\n     Pos pos_before_specifier = pos;\n     if (s_default.ignore(pos, expected) || s_materialized.ignore(pos, expected) || s_alias.ignore(pos, expected))\n     {\n@@ -230,7 +257,7 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     if (require_type && !type && !default_expression)\n         return false; /// reject column name without type\n \n-    if (type && allow_null_modifiers)\n+    if ((type || default_expression) && allow_null_modifiers && !null_modifier.has_value())\n     {\n         if (s_not.ignore(pos, expected))\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01269_create_with_null.reference b/tests/queries/0_stateless/01269_create_with_null.reference\nindex 73f834da75ab..4e52c4a42d68 100644\n--- a/tests/queries/0_stateless/01269_create_with_null.reference\n+++ b/tests/queries/0_stateless/01269_create_with_null.reference\n@@ -1,7 +1,7 @@\n Nullable(Int32)\tInt32\tNullable(Int32)\tInt32\n CREATE TABLE default.data_null\\n(\\n    `a` Nullable(Int32),\\n    `b` Int32,\\n    `c` Nullable(Int32),\\n    `d` Int32\\n)\\nENGINE = Memory\n-Nullable(Int32)\tInt32\tNullable(Int32)\tNullable(Int32)\n-CREATE TABLE default.set_null\\n(\\n    `a` Nullable(Int32),\\n    `b` Int32,\\n    `c` Nullable(Int32),\\n    `d` Nullable(Int32)\\n)\\nENGINE = Memory\n-CREATE TABLE default.set_null\\n(\\n    `a` Nullable(Int32),\\n    `b` Int32,\\n    `c` Nullable(Int32),\\n    `d` Nullable(Int32)\\n)\\nENGINE = Memory\n+Nullable(Int32)\tInt32\tNullable(Int32)\tNullable(Int32)\tNullable(UInt8)\n+CREATE TABLE default.set_null\\n(\\n    `a` Nullable(Int32),\\n    `b` Int32,\\n    `c` Nullable(Int32),\\n    `d` Nullable(Int32),\\n    `f` Nullable(UInt8) DEFAULT 1\\n)\\nENGINE = Memory\n+CREATE TABLE default.set_null\\n(\\n    `a` Nullable(Int32),\\n    `b` Int32,\\n    `c` Nullable(Int32),\\n    `d` Nullable(Int32),\\n    `f` Nullable(UInt8) DEFAULT 1\\n)\\nENGINE = Memory\n CREATE TABLE default.cannot_be_nullable\\n(\\n    `n` Nullable(Int8),\\n    `a` Array(UInt8)\\n)\\nENGINE = Memory\n CREATE TABLE default.cannot_be_nullable\\n(\\n    `n` Nullable(Int8),\\n    `a` Array(UInt8)\\n)\\nENGINE = Memory\ndiff --git a/tests/queries/0_stateless/01269_create_with_null.sql b/tests/queries/0_stateless/01269_create_with_null.sql\nindex 7548070ce4b3..ac57f613dfdd 100644\n--- a/tests/queries/0_stateless/01269_create_with_null.sql\n+++ b/tests/queries/0_stateless/01269_create_with_null.sql\n@@ -39,13 +39,14 @@ CREATE TABLE set_null (\n     a INT NULL,\n     b INT NOT NULL,\n     c Nullable(INT),\n-    d INT\n+    d INT,\n+    f DEFAULT 1\n ) engine=Memory();\n \n \n-INSERT INTO set_null VALUES (NULL, 2, NULL, NULL);\n+INSERT INTO set_null VALUES (NULL, 2, NULL, NULL, NULL);\n \n-SELECT toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d) FROM set_null;\n+SELECT toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d), toTypeName(f) FROM set_null;\n \n SHOW CREATE TABLE set_null;\n DETACH TABLE set_null;\ndiff --git a/tests/queries/0_stateless/02302_column_decl_null_before_defaul_value.reference b/tests/queries/0_stateless/02302_column_decl_null_before_defaul_value.reference\nnew file mode 100644\nindex 000000000000..2079872ee730\n--- /dev/null\n+++ b/tests/queries/0_stateless/02302_column_decl_null_before_defaul_value.reference\n@@ -0,0 +1,22 @@\n+create table, column +type +NULL\n+id\tNullable(Int32)\t\t\t\t\t\n+create table, column +type +NOT NULL\n+id\tInt32\t\t\t\t\t\n+create table, column +type +NULL +DEFAULT\n+id\tNullable(Int32)\tDEFAULT\t1\t\t\t\n+create table, column +type +NOT NULL +DEFAULT\n+id\tInt32\tDEFAULT\t1\t\t\t\n+create table, column +type +DEFAULT +NULL\n+id\tNullable(Int32)\tDEFAULT\t1\t\t\t\n+create table, column +type +DEFAULT +NOT NULL\n+id\tInt32\tDEFAULT\t1\t\t\t\n+create table, column -type +NULL +DEFAULT\n+id\tNullable(UInt8)\tDEFAULT\t1\t\t\t\n+create table, column -type +NOT NULL +DEFAULT\n+id\tUInt8\tDEFAULT\t1\t\t\t\n+create table, column -type +DEFAULT +NULL\n+id\tNullable(UInt8)\tDEFAULT\t1\t\t\t\n+create table, column -type +DEFAULT +NOT NULL\n+id\tUInt8\tDEFAULT\t1\t\t\t\n+alter column, NULL modifier is not allowed\n+modify column, NULL modifier is not allowed\ndiff --git a/tests/queries/0_stateless/02302_column_decl_null_before_defaul_value.sql b/tests/queries/0_stateless/02302_column_decl_null_before_defaul_value.sql\nnew file mode 100644\nindex 000000000000..3825df1e557b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02302_column_decl_null_before_defaul_value.sql\n@@ -0,0 +1,61 @@\n+select 'create table, column +type +NULL';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id INT NULL) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'create table, column +type +NOT NULL';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id INT NOT NULL) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'create table, column +type +NULL +DEFAULT';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id INT NULL DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'create table, column +type +NOT NULL +DEFAULT';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id INT NOT NULL DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'create table, column +type +DEFAULT +NULL';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id INT DEFAULT 1 NULL) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'create table, column +type +DEFAULT +NOT NULL';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id INT DEFAULT 1 NOT NULL) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'create table, column -type +NULL +DEFAULT';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id NULL DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'create table, column -type +NOT NULL +DEFAULT';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id NOT NULL DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'create table, column -type +DEFAULT +NULL';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id DEFAULT 1 NULL) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'create table, column -type +DEFAULT +NOT NULL';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id DEFAULT 1 NOT NULL) ENGINE=MergeTree() ORDER BY tuple();\n+DESCRIBE TABLE null_before;\n+\n+select 'alter column, NULL modifier is not allowed';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id INT NOT NULL) ENGINE=MergeTree() ORDER BY tuple();\n+ALTER TABLE null_before ALTER COLUMN id TYPE INT NULL; -- { clientError SYNTAX_ERROR }\n+\n+select 'modify column, NULL modifier is not allowed';\n+DROP TABLE IF EXISTS null_before SYNC;\n+CREATE TABLE null_before (id INT NOT NULL) ENGINE=MergeTree() ORDER BY tuple();\n+ALTER TABLE null_before MODIFY COLUMN id NULL DEFAULT 1; -- { serverError UNKNOWN_TYPE }\n+\n+DROP TABLE IF EXISTS null_before SYNC;\n",
  "problem_statement": "Column declaration: [NOT] NULL right after type\nExecution of this query\r\n```\r\ncreate table t (c1 int(11) DEFAULT 1 NULL) engine=MergeTree order by tuple()\r\n```\r\nwill return parsed query\r\n```\r\nCREATE TABLE t\r\n(\r\n     `c1` int NULL DEFAULT 1\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple()\r\n```\r\nIn the parsed query, NULL comes before DEFAULT, in the initial - other way around.\r\nIf I try to execute the parsed query, I\u2019ll get the following error:\r\n```\r\nSyntax error: failed at position 36 ('DEFAULT') (line 3, col 19):\r\n\r\nCREATE TABLE t\r\n(\r\n    `c1` int NULL DEFAULT 1\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple()\r\n\r\nExpected one of: COMMENT, CODEC, TTL, token, Comma, ClosingRoundBracket\r\n```\r\nThis is confusing. \r\nSee also discussion in #37087\r\n\r\nConsiderations:\r\n(1) considering simplification of migration from other databases (see, for example, #37178) probably it makes sense to keep support for old column declaration, - MySQL supports both ways: `NULL DEFAULT 1` and `DEFAULT 1 NULL`, even `COMMENT '1' NULL` which we don't support. This way it'll keep the change backward compatible\r\n(2) from another side ... I guess ... there is no target to support all variants of different syntax. It's not desirable to complicate parser implementation just for this reason\r\n\r\n\nWrong order of NOT NULL data type modifier and DEFAULT.\n**Describe the unexpected behaviour**\r\n\r\n```\r\n:) CREATE TEMPORARY TABLE test (x INT NOT NULL DEFAULT 1)\r\n\r\nSyntax error: failed at position 52 ('DEFAULT') (line 3, col 22):\r\n\r\nCREATE TEMPORARY TABLE test\r\n(\r\n    `x` INT NOT NULL DEFAULT 1\r\n                     ^\r\n)\r\n\r\nExpected one of: COMMENT, CODEC, TTL, token, Comma, ClosingRoundBracket\r\n```\r\n\r\nBut this query succeeded:\r\n\r\n```\r\n:) CREATE TEMPORARY TABLE test (x INT DEFAULT 1 NOT NULL)\r\n\r\nCREATE TEMPORARY TABLE test\r\n(\r\n    `x` INT NOT NULL DEFAULT 1\r\n)\r\n```\n",
  "hints_text": "\nShould both of them succeed or just the first one?",
  "created_at": "2022-05-18T21:59:55Z"
}