You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Segmentation fault on CSV inserts after upgrading to v24.x
**Describe what's wrong**

After upgrading from 23.5.3.24 to 24.x (e.g., 24.10.1.2812), ClickHouse crashes on the following query:
```bash
curl 'http://localhost:8123/?query=INSERT%20INTO%20table(a,b,c)%20FORMAT%20CSV' --data-binary @data.csv
```
**How to reproduce**

* Which ClickHouse server version to use: `any v24.10`
* Which interface to use, if it matters: `HTTP (8123/tcp) only`
* Non-default settings, if any: `vanilla configuration`
* `CREATE TABLE` statements for all tables involved: [table definition](https://fiddle.clickhouse.com/23d772cf-4f9c-4b63-94b8-a95594bf2119)
* Sample data for all these tables (success via native):
```bash
clickhouse-client -q "INSERT INTO t2 FORMAT CSV" <<EOF
c1,c2,c3,c4,c5,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c36,c37,c38,c39,c40,c41,c42,c43,c45,c47,c59,c60,c61,c62,c63,c64,c65,c66,c67,c69,c70
2024-11-28,2024-11-28 12:07:27,num2,a,c,"",8729573116184671696,37515450,RU,2023468,2023469,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) WebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 YaBrowser/24.10.0.0 Safari/537.36",86da5280-8903-4a30-95c8-8be5ed74afc9,3,1,windows,10,yandex-browser,24.10,287,0,262162957,82d21e644968b94ada30bb807b1838a3,23530971,,,0,14,16938683,mid,"","","",0,0,"",0,0,"",""
2024-11-28,2024-11-28 12:00:38,num2,a,c,"",4787695949136185212,37515450,RU,2023468,2023469,Android,bd8eafe6-8b29-4054-b35c-15dcde4b3ac5,2,0,android,"","","",25867133,0,282136854,40bc4823456e3d47c3fe2ace56929cd3,40643490,,,0,15,16938683,pre,"","","",0,0,"",0,0,"",""
EOF
```
* Queries to run that lead to an unexpected result (same data without CSV header, HTTP interface):
```bash
curl 'http://localhost:8123/?query=INSERT%20INTO%20t2%20FORMAT%20CSV' --data-binary @- <<EOF
2024-11-28,2024-11-28 12:07:27,num2,a,c,"",8729573116184671696,37515450,RU,2023468,2023469,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) WebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 YaBrowser/24.10.0.0 Safari/537.36",86da5280-8903-4a30-95c8-8be5ed74afc9,3,1,windows,10,yandex-browser,24.10,287,0,262162957,82d21e644968b94ada30bb807b1838a3,23530971,,,0,14,16938683,mid,"","","",0,0,"",0,0,"",""
2024-11-28,2024-11-28 12:00:38,num2,a,c,"",4787695949136185212,37515450,RU,2023468,2023469,Android,bd8eafe6-8b29-4054-b35c-15dcde4b3ac5,2,0,android,"","","",25867133,0,282136854,40bc4823456e3d47c3fe2ace56929cd3,40643490,,,0,15,16938683,pre,"","","",0,0,"",0,0,"",""
EOF
```

**Expected behavior**

No segfaults, successful inserts with valid CSV. Otherwise: `DB::Exception: Cannot parse input`

**Error message and/or stacktrace**
```
2024.12.05 20:59:03.884057 [ 18667 ] {} <Fatal> BaseDaemon: ########## Short fault info ############
2024.12.05 20:59:03.884104 [ 18667 ] {} <Fatal> BaseDaemon: (version 24.10.1.2812 (official build), build id: 012A16C8538DB153D53D2A7FF95661825CF0C33C, git hash: 9cd0a3738d5c067197557100b6862bd43c2b0233, architecture: x86_64) (from thread 15253) Received signal 11
2024.12.05 20:59:03.884116 [ 18667 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault
2024.12.05 20:59:03.884128 [ 18667 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
2024.12.05 20:59:03.884139 [ 18667 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000d26b861 0x00007fabab790d20 0x0000000007a561b3 0x000000001080302b 0x0000000012a7166f 0x0000000012a4cf19 0x0000000012a43396 0x0000000012a4c9cb 0x0000000012a4cbdd 0x0000000012a1c879 0x00000000129bd116 0x000000001299985b 0x0000000012999567 0x0000000012b24421 0x000000000d04452b 0x000000000d04ad42 0x000000000d041a5f 0x000000000d0488fa 0x00007fabab7861ca 0x00007fabab3e18d3
2024.12.05 20:59:03.884147 [ 18667 ] {} <Fatal> BaseDaemon: ########################################
2024.12.05 20:59:03.884154 [ 18667 ] {} <Fatal> BaseDaemon: (version 24.10.1.2812 (official build), build id: 012A16C8538DB153D53D2A7FF95661825CF0C33C, git hash: 9cd0a3738d5c067197557100b6862bd43c2b0233) (from thread 15253) (query_id: f1ba9b16-c7f4-4b06-8bbe-a92bafb130e4) (query: INSERT INTO t2 FORMAT CSV
2024.12.05 20:59:03.884160 [ 18667 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
2024.12.05 20:59:03.884164 [ 18667 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000d26b861 0x00007fabab790d20 0x0000000007a561b3 0x000000001080302b 0x0000000012a7166f 0x0000000012a4cf19 0x0000000012a43396 0x0000000012a4c9cb 0x0000000012a4cbdd 0x0000000012a1c879 0x00000000129bd116 0x000000001299985b 0x0000000012999567 0x0000000012b24421 0x000000000d04452b 0x000000000d04ad42 0x000000000d041a5f 0x000000000d0488fa 0x00007fabab7861ca 0x00007fabab3e18d3
2024.12.05 20:59:03.884200 [ 18667 ] {} <Fatal> BaseDaemon: 0. signalHandler(int, siginfo_t*, void*) @ 0x000000000d26b861
2024.12.05 20:59:03.884213 [ 18667 ] {} <Fatal> BaseDaemon: 1. ? @ 0x0000000000012d20
2024.12.05 20:59:03.884234 [ 18667 ] {} <Fatal> BaseDaemon: 2. DB::SerializationNumber<unsigned short>::deserializeTextCSV(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const @ 0x0000000007a561b3
2024.12.05 20:59:03.884244 [ 18667 ] {} <Fatal> BaseDaemon: 3. DB::SerializationSparse::deserializeTextCSV(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const @ 0x000000001080302b
2024.12.05 20:59:03.884283 [ 18667 ] {} <Fatal> BaseDaemon: 4. DB::CSVFormatReader::readField(DB::IColumn&, std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::ISerialization const> const&, bool, String const&) @ 0x0000000012a7166f
2024.12.05 20:59:03.884306 [ 18667 ] {} <Fatal> BaseDaemon: 5. DB::RowInputFormatWithDiagnosticInfo::deserializeFieldAndPrintDiagnosticInfo(String const&, std::shared_ptr<DB::IDataType const> const&, DB::IColumn&, DB::WriteBuffer&, unsigned long) @ 0x0000000012a4cf19
2024.12.05 20:59:03.884319 [ 18667 ] {} <Fatal> BaseDaemon: 6. DB::RowInputFormatWithNamesAndTypes<DB::CSVFormatReader>::parseRowAndPrintDiagnosticInfo(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::WriteBuffer&) @ 0x0000000012a43396
2024.12.05 20:59:03.884335 [ 18667 ] {} <Fatal> BaseDaemon: 7. DB::RowInputFormatWithDiagnosticInfo::getDiagnosticAndRawDataImpl(bool) @ 0x0000000012a4c9cb
2024.12.05 20:59:03.884345 [ 18667 ] {} <Fatal> BaseDaemon: 8. DB::RowInputFormatWithDiagnosticInfo::getDiagnosticInfo() @ 0x0000000012a4cbdd
2024.12.05 20:59:03.884357 [ 18667 ] {} <Fatal> BaseDaemon: 9. DB::IRowInputFormat::read() @ 0x0000000012a1c879
2024.12.05 20:59:03.884368 [ 18667 ] {} <Fatal> BaseDaemon: 10. DB::IInputFormat::generate() @ 0x00000000129bd116
2024.12.05 20:59:03.884374 [ 18667 ] {} <Fatal> BaseDaemon: 11. DB::ISource::tryGenerate() @ 0x000000001299985b
2024.12.05 20:59:03.884382 [ 18667 ] {} <Fatal> BaseDaemon: 12. DB::ISource::work() @ 0x0000000012999567
2024.12.05 20:59:03.884401 [ 18667 ] {} <Fatal> BaseDaemon: 13. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::ParallelParsingInputFormat::scheduleParserThreadForUnitWithNumber(unsigned long)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000012b24421
2024.12.05 20:59:03.884414 [ 18667 ] {} <Fatal> BaseDaemon: 14. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x000000000d04452b
2024.12.05 20:59:03.884430 [ 18667 ] {} <Fatal> BaseDaemon: 15. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000d04ad42
2024.12.05 20:59:03.884438 [ 18667 ] {} <Fatal> BaseDaemon: 16. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000d041a5f
2024.12.05 20:59:03.884453 [ 18667 ] {} <Fatal> BaseDaemon: 17. void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000d0488fa
2024.12.05 20:59:03.884460 [ 18667 ] {} <Fatal> BaseDaemon: 18. start_thread @ 0x00000000000081ca
2024.12.05 20:59:03.884476 [ 18667 ] {} <Fatal> BaseDaemon: 19. clone @ 0x00000000000398d3
2024.12.05 20:59:04.057539 [ 18667 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 8E1CF31706649FB3F1049E398ADB6A33)
2024.12.05 20:59:04.057731 [ 18667 ] {} <Information> SentryWriter: Not sending crash report
2024.12.05 20:59:04.057735 [ 18667 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
2024.12.05 20:59:04.057838 [ 18667 ] {} <Fatal> BaseDaemon: No settings were changed
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
