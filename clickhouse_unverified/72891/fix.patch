diff --git a/src/Core/Block.cpp b/src/Core/Block.cpp
index 02176a6b77a0..7d58c25a3723 100644
--- a/src/Core/Block.cpp
+++ b/src/Core/Block.cpp
@@ -449,6 +449,14 @@ MutableColumns Block::cloneEmptyColumns() const
     return columns;
 }
 
+MutableColumns Block::cloneEmptyColumns(const Serializations & serializations) const
+{
+    size_t num_columns = data.size();
+    MutableColumns columns(num_columns);
+    for (size_t i = 0; i < num_columns; ++i)
+        columns[i] = data[i].type->createColumn(*serializations[i]);
+    return columns;
+}
 
 Columns Block::getColumns() const
 {
diff --git a/src/Core/Block.h b/src/Core/Block.h
index 841fb3fb6639..a045e2acdf07 100644
--- a/src/Core/Block.h
+++ b/src/Core/Block.h
@@ -141,6 +141,9 @@ class Block
     /** Get empty columns with the same types as in block. */
     MutableColumns cloneEmptyColumns() const;
 
+    /** Get empty columns with the same types as in block and given serializations. */
+    MutableColumns cloneEmptyColumns(const Serializations & serializations) const;
+
     /** Get columns from block for mutation. Columns in block will be nullptr. */
     MutableColumns mutateColumns();
 
diff --git a/src/Processors/Formats/IRowInputFormat.cpp b/src/Processors/Formats/IRowInputFormat.cpp
index ea316f97521d..928be5d7c394 100644
--- a/src/Processors/Formats/IRowInputFormat.cpp
+++ b/src/Processors/Formats/IRowInputFormat.cpp
@@ -104,12 +104,8 @@ Chunk IRowInputFormat::read()
     }
 
     const Block & header = getPort().getHeader();
-
     size_t num_columns = header.columns();
-    MutableColumns columns(num_columns);
-
-    for (size_t i = 0; i < num_columns; ++i)
-        columns[i] = header.getByPosition(i).type->createColumn(*serializations[i]);
+    MutableColumns columns = header.cloneEmptyColumns(serializations);
 
     ColumnCheckpoints checkpoints(columns.size());
     for (size_t column_idx = 0; column_idx < columns.size(); ++column_idx)
diff --git a/src/Processors/Formats/RowInputFormatWithDiagnosticInfo.cpp b/src/Processors/Formats/RowInputFormatWithDiagnosticInfo.cpp
index c1dd77aecaf3..12e9b650acd2 100644
--- a/src/Processors/Formats/RowInputFormatWithDiagnosticInfo.cpp
+++ b/src/Processors/Formats/RowInputFormatWithDiagnosticInfo.cpp
@@ -44,7 +44,7 @@ std::pair<String, String> RowInputFormatWithDiagnosticInfo::getDiagnosticAndRawD
             "Buffer has gone, cannot extract information about what has been parsed.");
 
     const auto & header = getPort().getHeader();
-    MutableColumns columns = header.cloneEmptyColumns();
+    MutableColumns columns = header.cloneEmptyColumns(serializations);
 
     /// It is possible to display detailed diagnostics only if the last and next to last rows are still in the read buffer.
     size_t bytes_read_at_start_of_buffer = in->count() - in->offset();
