{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66486,
  "instance_id": "ClickHouse__ClickHouse-66486",
  "issue_numbers": [
    "51264"
  ],
  "base_commit": "7c7783e2cec158d28f1849c1666b37b82e676830",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 86e04b2ab4e7..c7a1a7e27394 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -186,7 +186,7 @@ class IColumn;\n     M(Bool, allow_suspicious_ttl_expressions, false, \"Reject TTL expressions that don't depend on any of table's columns. It indicates a user error most of the time.\", 0) \\\n     M(Bool, allow_suspicious_variant_types, false, \"In CREATE TABLE statement allows specifying Variant type with similar variant types (for example, with different numeric or date types). Enabling this setting may introduce some ambiguity when working with values with similar types.\", 0) \\\n     M(Bool, allow_suspicious_primary_key, false, \"Forbid suspicious PRIMARY KEY/ORDER BY for MergeTree (i.e. SimpleAggregateFunction)\", 0) \\\n-    M(Bool, compile_expressions, false, \"Compile some scalar functions and operators to native code.\", 0) \\\n+    M(Bool, compile_expressions, true, \"Compile some scalar functions and operators to native code.\", 0) \\\n     M(UInt64, min_count_to_compile_expression, 3, \"The number of identical expressions before they are JIT-compiled\", 0) \\\n     M(Bool, compile_aggregate_expressions, true, \"Compile aggregate functions to native code.\", 0) \\\n     M(UInt64, min_count_to_compile_aggregate_expression, 3, \"The number of identical aggregate expressions before they are JIT-compiled\", 0) \\\ndiff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp\nindex 9faf77e90878..87eaeff0ca9d 100644\n--- a/src/Core/SettingsChangesHistory.cpp\n+++ b/src/Core/SettingsChangesHistory.cpp\n@@ -57,6 +57,7 @@ String ClickHouseVersion::toString() const\n /// Note: please check if the key already exists to prevent duplicate entries.\n static std::initializer_list<std::pair<ClickHouseVersion, SettingsChangesHistory::SettingsChanges>> settings_changes_history_initializer =\n {\n+    {\"24.8\", {{\"compile_expressions\", false, true, \"We believe that the LLVM infrastructure behind the JIT compiler is stable enough to enable this setting by default.\"}}},\n     {\"24.7\", {{\"output_format_parquet_write_page_index\", false, true, \"Add a possibility to write page index into parquet files.\"},\n               {\"output_format_binary_encode_types_in_binary_format\", false, false, \"Added new setting to allow to write type names in binary format in RowBinaryWithNamesAndTypes output format\"},\n               {\"input_format_binary_decode_types_in_binary_format\", false, false, \"Added new setting to allow to read type names in binary format in RowBinaryWithNamesAndTypes input format\"},\n@@ -80,7 +81,7 @@ static std::initializer_list<std::pair<ClickHouseVersion, SettingsChangesHistory\n               {\"ignore_on_cluster_for_replicated_named_collections_queries\", false, false, \"Ignore ON CLUSTER clause for replicated named collections management queries.\"},\n               {\"backup_restore_s3_retry_attempts\", 1000,1000, \"Setting for Aws::Client::RetryStrategy, Aws::Client does retries itself, 0 means no retries. It takes place only for backup/restore.\"},\n               {\"postgresql_connection_attempt_timeout\", 2, 2, \"Allow to control 'connect_timeout' parameter of PostgreSQL connection.\"},\n-              {\"postgresql_connection_pool_retries\", 2, 2, \"Allow to control the number of retries in PostgreSQL connection pool.\"}\n+              {\"postgresql_connection_pool_retries\", 2, 2, \"Allow to control the number of retries in PostgreSQL connection pool.\"},\n               }},\n     {\"24.6\", {{\"materialize_skip_indexes_on_insert\", true, true, \"Added new setting to allow to disable materialization of skip indexes on insert\"},\n               {\"materialize_statistics_on_insert\", true, true, \"Added new setting to allow to disable materialization of statistics on insert\"},\n",
  "test_patch": "diff --git a/tests/clickhouse-test b/tests/clickhouse-test\nindex a29c786e998f..55ce88917f42 100755\n--- a/tests/clickhouse-test\n+++ b/tests/clickhouse-test\n@@ -779,7 +779,7 @@ class SettingsRandomizer:\n         \"filesystem_prefetch_step_bytes\": lambda: random.choice(\n             [0, \"100Mi\"]\n         ),  # 0 means 'auto'\n-        # \"compile_expressions\": lambda: random.randint(0, 1), - this setting has a bug: https://github.com/ClickHouse/ClickHouse/issues/51264\n+        \"compile_expressions\": lambda: random.randint(0, 1),\n         \"compile_aggregate_expressions\": lambda: random.randint(0, 1),\n         \"compile_sort_description\": lambda: random.randint(0, 1),\n         \"merge_tree_coarse_index_granularity\": lambda: random.randint(2, 32),\n",
  "problem_statement": "LLVM: Msan - use of uninitialized value in stress test\n@kitaisreal Do you know if this is a known issue? Thanks.\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/51132/75b7121759ac4bb1fc12078042d52a445ae319a5/stress_test__msan_.html\r\n\r\n```\r\n==1673==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n    #0 0x55edb962f6b3 in llvm::SelectionDAGBuilder::visitInsertValue(llvm::InsertValueInst const&) (/usr/bin/clickhouse+0x497af6b3) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #1 0x55edb95d913b in llvm::SelectionDAGBuilder::visit(unsigned int, llvm::User const&) (/usr/bin/clickhouse+0x4975913b) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #2 0x55edb95d555d in llvm::SelectionDAGBuilder::visit(llvm::Instruction const&) (/usr/bin/clickhouse+0x4975555d) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #3 0x55edb989ad29 in llvm::SelectionDAGISel::SelectBasicBlock(llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, false, false, void>, false, true>, llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, false, false, void>, false, true>, bool&) (/usr/bin/clickhouse+0x49a1ad29) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #4 0x55edb9897e46 in llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&) (/usr/bin/clickhouse+0x49a17e46) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #5 0x55edb988cb8d in llvm::SelectionDAGISel::runOnMachineFunction(llvm::MachineFunction&) (/usr/bin/clickhouse+0x49a0cb8d) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #6 0x55edb8b3a598 in (anonymous namespace)::X86DAGToDAGISel::runOnMachineFunction(llvm::MachineFunction&) X86ISelDAGToDAG.cpp\r\n    #7 0x55edba0f321d in llvm::MachineFunctionPass::runOnFunction(llvm::Function&) (/usr/bin/clickhouse+0x4a27321d) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #8 0x55edbdfb7d2f in llvm::FPPassManager::runOnFunction(llvm::Function&) (/usr/bin/clickhouse+0x4e137d2f) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #9 0x55edbdfd9ca9 in llvm::FPPassManager::runOnModule(llvm::Module&) (/usr/bin/clickhouse+0x4e159ca9) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #10 0x55edbdfbba37 in llvm::legacy::PassManagerImpl::run(llvm::Module&) (/usr/bin/clickhouse+0x4e13ba37) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #11 0x55edbdfda6a2 in llvm::legacy::PassManager::run(llvm::Module&) (/usr/bin/clickhouse+0x4e15a6a2) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #12 0x55edb1634109 in DB::JITCompiler::compile(llvm::Module&) build_docker/./src/Interpreters/JIT/CHJIT.cpp:78:22\r\n    #13 0x55edb162ff82 in DB::CHJIT::compileModule(std::__1::unique_ptr<llvm::Module, std::__1::default_delete<llvm::Module>>) build_docker/./src/Interpreters/JIT/CHJIT.cpp:378:29\r\n    #14 0x55edb162f35e in DB::CHJIT::compileModule(std::__1::function<void (llvm::Module&)>) build_docker/./src/Interpreters/JIT/CHJIT.cpp:359:24\r\n    #15 0x55edb1667671 in DB::compileFunction(DB::CHJIT&, DB::IFunctionBase const&) build_docker/./src/Interpreters/JIT/compileFunction.cpp:169:32\r\n    #16 0x55edaeec1414 in DB::compile(DB::CompileDAG const&, unsigned long)::$_0::operator()() const build_docker/./src/Interpreters/ExpressionJIT.cpp:303:38\r\n    #17 0x55edaeec1414 in std::__1::pair<std::__1::shared_ptr<DB::CompiledExpressionCacheEntry>, bool> DB::CacheBase<wide::integer<128ul, unsigned int>, DB::CompiledExpressionCacheEntry, UInt128Hash, DB::CompiledFunctionWeightFunction>::getOrSet<DB::compile(DB::CompileDAG const&, unsigned long)::$_0>(wide::integer<128ul, unsigned int> const&, DB::compile(DB::CompileDAG const&, unsigned long)::$_0&&) build_docker/./src/Common/CacheBase.h:148:24\r\n    #18 0x55edaeec1414 in DB::compile(DB::CompileDAG const&, unsigned long) build_docker/./src/Interpreters/ExpressionJIT.cpp:300:70\r\n    #19 0x55edaeec1414 in DB::ActionsDAG::compileFunctions(unsigned long, std::__1::unordered_set<DB::ActionsDAG::Node const*, std::__1::hash<DB::ActionsDAG::Node const*>, std::__1::equal_to<DB::ActionsDAG::Node const*>, std::__1::allocator<DB::ActionsDAG::Node const*>> const&) build_docker/./src/Interpreters/ExpressionJIT.cpp:593:23\r\n    #20 0x55edad7d454d in DB::ActionsDAG::compileExpressions(unsigned long, std::__1::unordered_set<DB::ActionsDAG::Node const*, std::__1::hash<DB::ActionsDAG::Node const*>, std::__1::equal_to<DB::ActionsDAG::Node const*>, std::__1::allocator<DB::ActionsDAG::Node const*>> const&) build_docker/./src/Interpreters/ActionsDAG.cpp:1071:5\r\n    #21 0x55edadeb0aaf in DB::ExpressionActions::ExpressionActions(std::__1::shared_ptr<DB::ActionsDAG>, DB::ExpressionActionsSettings const&) build_docker/./src/Interpreters/ExpressionActions.cpp:62:22\r\n    #22 0x55edb3e9d187 in DB::ExpressionActions* std::__1::construct_at[abi:v15000]<DB::ExpressionActions, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&, DB::ExpressionActions*>(DB::ExpressionActions*, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/construct_at.h:35:48\r\n    #23 0x55edb3e9d187 in void std::__1::allocator_traits<std::__1::allocator<DB::ExpressionActions>>::construct[abi:v15000]<DB::ExpressionActions, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&, void, void>(std::__1::allocator<DB::ExpressionActions>&, DB::ExpressionActions*, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:298:9\r\n    #24 0x55edb3e9d187 in std::__1::__shared_ptr_emplace<DB::ExpressionActions, std::__1::allocator<DB::ExpressionActions>>::__shared_ptr_emplace[abi:v15000]<std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&>(std::__1::allocator<DB::ExpressionActions>, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:292:9\r\n    #25 0x55edb3e9d187 in std::__1::shared_ptr<DB::ExpressionActions> std::__1::allocate_shared[abi:v15000]<DB::ExpressionActions, std::__1::allocator<DB::ExpressionActions>, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&, void>(std::__1::allocator<DB::ExpressionActions> const&, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:953:55\r\n    #26 0x55edb57e8c50 in std::__1::shared_ptr<DB::ExpressionActions> std::__1::make_shared[abi:v15000]<DB::ExpressionActions, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&, void>(std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:962:12\r\n    #27 0x55edb57e8c50 in DB::ExpressionStep::transformPipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) build_docker/./src/Processors/QueryPlan/ExpressionStep.cpp:39:23\r\n    #28 0x55edb5829baf in DB::ITransformingStep::updatePipeline(std::__1::vector<std::__1::unique_ptr<DB::QueryPipelineBuilder, std::__1::default_delete<DB::QueryPipelineBuilder>>, std::__1::allocator<std::__1::unique_ptr<DB::QueryPipelineBuilder, std::__1::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) build_docker/./src/Processors/QueryPlan/ITransformingStep.cpp:41:9\r\n    #29 0x55edb587feb0 in DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) build_docker/./src/Processors/QueryPlan/QueryPlan.cpp:189:47\r\n    #30 0x55edb083493a in DB::InterpreterSelectWithUnionQuery::execute() build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:379:31\r\n    #31 0x55edb13d86f1 in DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) build_docker/./src/Interpreters/executeQuery.cpp:746:40\r\n```\n",
  "hints_text": "",
  "created_at": "2024-07-13T21:48:21Z",
  "modified_files": [
    "src/Core/Settings.h",
    "src/Core/SettingsChangesHistory.cpp"
  ],
  "modified_test_files": [
    "tests/clickhouse-test"
  ]
}