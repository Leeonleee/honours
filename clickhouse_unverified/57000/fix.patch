diff --git a/docs/en/sql-reference/functions/string-functions.md b/docs/en/sql-reference/functions/string-functions.md
index 4b6e03563013..1940993ce0b1 100644
--- a/docs/en/sql-reference/functions/string-functions.md
+++ b/docs/en/sql-reference/functions/string-functions.md
@@ -439,7 +439,7 @@ concat(s1, s2, ...)
 
 **Arguments**
 
-At least two values of arbitrary type.
+At least one value of arbitrary type.
 
 Arguments which are not of types [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md) are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments.
 
diff --git a/src/Functions/concat.cpp b/src/Functions/concat.cpp
index f426f662868e..6403c4b8416a 100644
--- a/src/Functions/concat.cpp
+++ b/src/Functions/concat.cpp
@@ -207,6 +207,8 @@ class ConcatOverloadResolver : public IFunctionOverloadResolver
 
     FunctionBasePtr buildImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & return_type) const override
     {
+        if (arguments.size() == 1)
+            return FunctionFactory::instance().getImpl("toString", context)->build(arguments);
         if (std::ranges::all_of(arguments, [](const auto & elem) { return isArray(elem.type); }))
             return FunctionFactory::instance().getImpl("arrayConcat", context)->build(arguments);
         if (std::ranges::all_of(arguments, [](const auto & elem) { return isMap(elem.type); }))
@@ -221,10 +223,10 @@ class ConcatOverloadResolver : public IFunctionOverloadResolver
 
     DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override
     {
-        if (arguments.size() < 2)
+        if (arguments.empty())
             throw Exception(
                 ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,
-                "Number of arguments for function {} doesn't match: passed {}, should be at least 2.",
+                "Number of arguments for function {} doesn't match: passed {}, should be at least 1.",
                 getName(),
                 arguments.size());
 
