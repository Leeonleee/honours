{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17211,
  "instance_id": "ClickHouse__ClickHouse-17211",
  "issue_numbers": [
    "18438"
  ],
  "base_commit": "cf3a89cd7b722d3ba00af7deec52aebac14a1b0d",
  "patch": "diff --git a/programs/server/config.xml b/programs/server/config.xml\nindex 372315c79227..849d3dc32ba1 100644\n--- a/programs/server/config.xml\n+++ b/programs/server/config.xml\n@@ -321,9 +321,9 @@\n              Parameters:\n                 host - LDAP server hostname or IP, this parameter is mandatory and cannot be empty.\n                 port - LDAP server port, default is 636 if enable_tls is set to true, 389 otherwise.\n-                auth_dn_prefix, auth_dn_suffix - prefix and suffix used to construct the DN to bind to.\n-                        Effectively, the resulting DN will be constructed as auth_dn_prefix + escape(user_name) + auth_dn_suffix string.\n-                        Note, that this implies that auth_dn_suffix should usually have comma ',' as its first non-space character.\n+                bind_dn - template used to construct the DN to bind to.\n+                        The resulting DN will be constructed by replacing all '{user_name}' substrings of the template with the actual\n+                         user name during each authentication attempt.\n                 verification_cooldown - a period of time, in seconds, after a successful bind attempt, during which a user will be assumed\n                          to be successfully authenticated for all consecutive requests without contacting the LDAP server.\n                         Specify 0 (the default) to disable caching and force contacting the LDAP server for each authentication request.\n@@ -344,8 +344,7 @@\n                 <my_ldap_server>\n                     <host>localhost</host>\n                     <port>636</port>\n-                    <auth_dn_prefix>uid=</auth_dn_prefix>\n-                    <auth_dn_suffix>,ou=users,dc=example,dc=com</auth_dn_suffix>\n+                    <bind_dn>uid={user_name},ou=users,dc=example,dc=com</bind_dn>\n                     <verification_cooldown>300</verification_cooldown>\n                     <enable_tls>yes</enable_tls>\n                     <tls_minimum_protocol_version>tls1.2</tls_minimum_protocol_version>\n@@ -375,9 +374,29 @@\n                 server - one of LDAP server names defined in 'ldap_servers' config section above.\n                         This parameter is mandatory and cannot be empty.\n                 roles - section with a list of locally defined roles that will be assigned to each user retrieved from the LDAP server.\n-                        If no roles are specified, user will not be able to perform any actions after authentication.\n-                        If any of the listed roles is not defined locally at the time of authentication, the authenthication attempt\n-                         will fail as if the provided password was incorrect.\n+                        If no roles are specified here or assigned during role mapping (below), user will not be able to perform any\n+                         actions after authentication.\n+                role_mapping - section with LDAP search parameters and mapping rules.\n+                        When a user authenticates, while still bound to LDAP, an LDAP search is performed using search_filter and the\n+                         name of the logged in user. For each entry found during that search, the value of the specified attribute is\n+                         extracted. For each attribute value that has the specified prefix, the prefix is removed, and the rest of the\n+                         value becomes the name of a local role defined in ClickHouse, which is expected to be created beforehand by\n+                         CREATE ROLE command.\n+                        There can be multiple 'role_mapping' sections defined inside the same 'ldap' section. All of them will be\n+                         applied.\n+                    base_dn - template used to construct the base DN for the LDAP search.\n+                            The resulting DN will be constructed by replacing all '{user_name}' and '{bind_dn}' substrings\n+                             of the template with the actual user name and bind DN during each LDAP search.\n+                    scope - scope of the LDAP search.\n+                            Accepted values are: 'base', 'one_level', 'children', 'subtree' (the default).\n+                    search_filter - template used to construct the search filter for the LDAP search.\n+                            The resulting filter will be constructed by replacing all '{user_name}', '{bind_dn}', and '{base_dn}'\n+                             substrings of the template with the actual user name, bind DN, and base DN during each LDAP search.\n+                            Note, that the special characters must be escaped properly in XML.\n+                    attribute - attribute name whose values will be returned by the LDAP search.\n+                    prefix - prefix, that will be expected to be in front of each string in the original list of strings returned by\n+                             the LDAP search. Prefix will be removed from the original strings and resulting strings will be treated\n+                             as local role names. Empty, by default.\n              Example:\n                 <ldap>\n                     <server>my_ldap_server</server>\n@@ -385,6 +404,13 @@\n                         <my_local_role1 />\n                         <my_local_role2 />\n                     </roles>\n+                    <role_mapping>\n+                        <base_dn>ou=groups,dc=example,dc=com</base_dn>\n+                        <scope>subtree</scope>\n+                        <search_filter>(&amp;(objectClass=groupOfNames)(member={bind_dn}))</search_filter>\n+                        <attribute>cn</attribute>\n+                        <prefix>clickhouse_</prefix>\n+                    </role_mapping>\n                 </ldap>\n         -->\n     </user_directories>\ndiff --git a/src/Access/Authentication.cpp b/src/Access/Authentication.cpp\nindex 5fab2c92624e..19c40c068b47 100644\n--- a/src/Access/Authentication.cpp\n+++ b/src/Access/Authentication.cpp\n@@ -33,13 +33,13 @@ Authentication::Digest Authentication::getPasswordDoubleSHA1() const\n         }\n \n         case SHA256_PASSWORD:\n-            throw Exception(\"Cannot get password double SHA1 for user with 'SHA256_PASSWORD' authentication.\", ErrorCodes::BAD_ARGUMENTS);\n+            throw Exception(\"Cannot get password double SHA1 for user with 'SHA256_PASSWORD' authentication\", ErrorCodes::BAD_ARGUMENTS);\n \n         case DOUBLE_SHA1_PASSWORD:\n             return password_hash;\n \n         case LDAP_SERVER:\n-            throw Exception(\"Cannot get password double SHA1 for user with 'LDAP_SERVER' authentication.\", ErrorCodes::BAD_ARGUMENTS);\n+            throw Exception(\"Cannot get password double SHA1 for user with 'LDAP_SERVER' authentication\", ErrorCodes::BAD_ARGUMENTS);\n \n         case MAX_TYPE:\n             break;\ndiff --git a/src/Access/Authentication.h b/src/Access/Authentication.h\nindex f98d2ed46792..bd22b7f0ff50 100644\n--- a/src/Access/Authentication.h\n+++ b/src/Access/Authentication.h\n@@ -6,6 +6,8 @@\n #include <Poco/SHA1Engine.h>\n #include <boost/algorithm/hex.hpp>\n #include <boost/algorithm/string/case_conv.hpp>\n+#include <set>\n+#include <vector>\n \n \n namespace DB\n@@ -19,6 +21,10 @@ namespace ErrorCodes\n }\n \n class ExternalAuthenticators;\n+struct LDAPSearchParams;\n+using LDAPSearchParamsList = std::vector<LDAPSearchParams>;\n+using LDAPSearchResults = std::set<String>;\n+using LDAPSearchResultsList = std::vector<LDAPSearchResults>;\n \n /// Authentication type and encrypted password for checking when an user logins.\n class Authentication\ndiff --git a/src/Access/ExternalAuthenticators.cpp b/src/Access/ExternalAuthenticators.cpp\nindex 81ab1af3b295..6f66f4303e16 100644\n--- a/src/Access/ExternalAuthenticators.cpp\n+++ b/src/Access/ExternalAuthenticators.cpp\n@@ -31,6 +31,7 @@ auto parseLDAPServer(const Poco::Util::AbstractConfiguration & config, const Str\n \n     const bool has_host = config.has(ldap_server_config + \".host\");\n     const bool has_port = config.has(ldap_server_config + \".port\");\n+    const bool has_bind_dn = config.has(ldap_server_config + \".bind_dn\");\n     const bool has_auth_dn_prefix = config.has(ldap_server_config + \".auth_dn_prefix\");\n     const bool has_auth_dn_suffix = config.has(ldap_server_config + \".auth_dn_suffix\");\n     const bool has_verification_cooldown = config.has(ldap_server_config + \".verification_cooldown\");\n@@ -51,11 +52,19 @@ auto parseLDAPServer(const Poco::Util::AbstractConfiguration & config, const Str\n     if (params.host.empty())\n         throw Exception(\"Empty 'host' entry\", ErrorCodes::BAD_ARGUMENTS);\n \n-    if (has_auth_dn_prefix)\n-        params.auth_dn_prefix = config.getString(ldap_server_config + \".auth_dn_prefix\");\n+    if (has_bind_dn)\n+    {\n+        if (has_auth_dn_prefix || has_auth_dn_suffix)\n+            throw Exception(\"Deprecated 'auth_dn_prefix' and 'auth_dn_suffix' entries cannot be used with 'bind_dn' entry\", ErrorCodes::BAD_ARGUMENTS);\n \n-    if (has_auth_dn_suffix)\n-        params.auth_dn_suffix = config.getString(ldap_server_config + \".auth_dn_suffix\");\n+        params.bind_dn = config.getString(ldap_server_config + \".bind_dn\");\n+    }\n+    else if (has_auth_dn_prefix || has_auth_dn_suffix)\n+    {\n+        const auto auth_dn_prefix = config.getString(ldap_server_config + \".auth_dn_prefix\");\n+        const auto auth_dn_suffix = config.getString(ldap_server_config + \".auth_dn_suffix\");\n+        params.bind_dn = auth_dn_prefix + \"{user_name}\" + auth_dn_suffix;\n+    }\n \n     if (has_verification_cooldown)\n         params.verification_cooldown = std::chrono::seconds{config.getUInt64(ldap_server_config + \".verification_cooldown\")};\n@@ -168,7 +177,8 @@ void ExternalAuthenticators::setConfiguration(const Poco::Util::AbstractConfigur\n     }\n }\n \n-bool ExternalAuthenticators::checkLDAPCredentials(const String & server, const String & user_name, const String & password) const\n+bool ExternalAuthenticators::checkLDAPCredentials(const String & server, const String & user_name, const String & password,\n+    const LDAPSearchParamsList * search_params, LDAPSearchResultsList * search_results) const\n {\n     std::optional<LDAPServerParams> params;\n     std::size_t params_hash = 0;\n@@ -184,7 +194,15 @@ bool ExternalAuthenticators::checkLDAPCredentials(const String & server, const S\n         params = pit->second;\n         params->user = user_name;\n         params->password = password;\n-        params_hash = params->getCoreHash();\n+\n+        params->combineCoreHash(params_hash);\n+        if (search_params)\n+        {\n+            for (const auto & params_instance : *search_params)\n+            {\n+                params_instance.combineHash(params_hash);\n+            }\n+        }\n \n         // Check the cache, but only if the caching is enabled at all.\n         if (params->verification_cooldown > std::chrono::seconds{0})\n@@ -208,9 +226,19 @@ bool ExternalAuthenticators::checkLDAPCredentials(const String & server, const S\n                         // Check if we can safely \"reuse\" the result of the previous successful password verification.\n                         entry.last_successful_params_hash == params_hash &&\n                         last_check_period >= std::chrono::seconds{0} &&\n-                        last_check_period <= params->verification_cooldown\n+                        last_check_period <= params->verification_cooldown &&\n+\n+                        // Ensure that search_params are compatible.\n+                        (\n+                            search_params == nullptr ?\n+                            entry.last_successful_search_results.empty() :\n+                            search_params->size() == entry.last_successful_search_results.size()\n+                        )\n                     )\n                     {\n+                        if (search_results)\n+                            *search_results = entry.last_successful_search_results;\n+\n                         return true;\n                     }\n \n@@ -227,7 +255,7 @@ bool ExternalAuthenticators::checkLDAPCredentials(const String & server, const S\n     }\n \n     LDAPSimpleAuthClient client(params.value());\n-    const auto result = client.check();\n+    const auto result = client.authenticate(search_params, search_results);\n     const auto current_check_timestamp = std::chrono::steady_clock::now();\n \n     // Update the cache, but only if this is the latest check and the server is still configured in a compatible way.\n@@ -244,8 +272,18 @@ bool ExternalAuthenticators::checkLDAPCredentials(const String & server, const S\n         new_params.user = user_name;\n         new_params.password = password;\n \n+        std::size_t new_params_hash = 0;\n+        new_params.combineCoreHash(new_params_hash);\n+        if (search_params)\n+        {\n+            for (const auto & params_instance : *search_params)\n+            {\n+                params_instance.combineHash(new_params_hash);\n+            }\n+        }\n+\n         // If the critical server params have changed while we were checking the password, we discard the current result.\n-        if (params_hash != new_params.getCoreHash())\n+        if (params_hash != new_params_hash)\n             return false;\n \n         auto & entry = ldap_server_caches[server][user_name];\n@@ -253,8 +291,20 @@ bool ExternalAuthenticators::checkLDAPCredentials(const String & server, const S\n         {\n             entry.last_successful_params_hash = params_hash;\n             entry.last_successful_authentication_timestamp = current_check_timestamp;\n+\n+            if (search_results)\n+                entry.last_successful_search_results = *search_results;\n+            else\n+                entry.last_successful_search_results.clear();\n         }\n-        else if (entry.last_successful_params_hash != params_hash)\n+        else if (\n+            entry.last_successful_params_hash != params_hash ||\n+            (\n+                search_params == nullptr ?\n+                !entry.last_successful_search_results.empty() :\n+                search_params->size() != entry.last_successful_search_results.size()\n+            )\n+        )\n         {\n             // Somehow a newer check with different params/password succeeded, so the current result is obsolete and we discard it.\n             return false;\ndiff --git a/src/Access/ExternalAuthenticators.h b/src/Access/ExternalAuthenticators.h\nindex fa618c92b3f4..abcc8e8d10d6 100644\n--- a/src/Access/ExternalAuthenticators.h\n+++ b/src/Access/ExternalAuthenticators.h\n@@ -28,13 +28,15 @@ class ExternalAuthenticators\n public:\n     void reset();\n     void setConfiguration(const Poco::Util::AbstractConfiguration & config, Poco::Logger * log);\n-    bool checkLDAPCredentials(const String & server, const String & user_name, const String & password) const;\n+    bool checkLDAPCredentials(const String & server, const String & user_name, const String & password,\n+        const LDAPSearchParamsList * search_params = nullptr, LDAPSearchResultsList * search_results = nullptr) const;\n \n private:\n     struct LDAPCacheEntry\n     {\n         std::size_t last_successful_params_hash = 0;\n         std::chrono::steady_clock::time_point last_successful_authentication_timestamp;\n+        LDAPSearchResultsList last_successful_search_results;\n     };\n \n     using LDAPServerCache = std::unordered_map<String, LDAPCacheEntry>; // user name   -> cache entry\ndiff --git a/src/Access/LDAPAccessStorage.cpp b/src/Access/LDAPAccessStorage.cpp\nindex 92de7fce8d79..2602422a59ac 100644\n--- a/src/Access/LDAPAccessStorage.cpp\n+++ b/src/Access/LDAPAccessStorage.cpp\n@@ -1,7 +1,9 @@\n #include <Access/LDAPAccessStorage.h>\n #include <Access/AccessControlManager.h>\n+#include <Access/ExternalAuthenticators.h>\n #include <Access/User.h>\n #include <Access/Role.h>\n+#include <Access/LDAPClient.h>\n #include <Common/Exception.h>\n #include <common/logger_useful.h>\n #include <ext/scope_guard.h>\n@@ -9,9 +11,11 @@\n #include <Poco/JSON/JSON.h>\n #include <Poco/JSON/Object.h>\n #include <Poco/JSON/Stringifier.h>\n+#include <boost/container_hash/hash.hpp>\n #include <boost/range/algorithm/copy.hpp>\n #include <iterator>\n #include <sstream>\n+#include <unordered_map>\n \n \n namespace DB\n@@ -44,95 +48,327 @@ void LDAPAccessStorage::setConfiguration(AccessControlManager * access_control_m\n \n     const bool has_server = config.has(prefix_str + \"server\");\n     const bool has_roles = config.has(prefix_str + \"roles\");\n+    const bool has_role_mapping = config.has(prefix_str + \"role_mapping\");\n \n     if (!has_server)\n-        throw Exception(\"Missing 'server' field for LDAP user directory.\", ErrorCodes::BAD_ARGUMENTS);\n+        throw Exception(\"Missing 'server' field for LDAP user directory\", ErrorCodes::BAD_ARGUMENTS);\n \n     const auto ldap_server_cfg = config.getString(prefix_str + \"server\");\n     if (ldap_server_cfg.empty())\n-        throw Exception(\"Empty 'server' field for LDAP user directory.\", ErrorCodes::BAD_ARGUMENTS);\n+        throw Exception(\"Empty 'server' field for LDAP user directory\", ErrorCodes::BAD_ARGUMENTS);\n \n-    std::set<String> roles_cfg;\n+    std::set<String> common_roles_cfg;\n     if (has_roles)\n     {\n         Poco::Util::AbstractConfiguration::Keys role_names;\n         config.keys(prefix_str + \"roles\", role_names);\n \n         // Currently, we only extract names of roles from the section names and assign them directly and unconditionally.\n-        roles_cfg.insert(role_names.begin(), role_names.end());\n+        common_roles_cfg.insert(role_names.begin(), role_names.end());\n+    }\n+\n+    LDAPSearchParamsList role_search_params_cfg;\n+    if (has_role_mapping)\n+    {\n+        Poco::Util::AbstractConfiguration::Keys all_keys;\n+        config.keys(prefix, all_keys);\n+        for (const auto & key : all_keys)\n+        {\n+            if (key != \"role_mapping\" && key.find(\"role_mapping[\") != 0)\n+                continue;\n+\n+            const String rm_prefix = prefix_str + key;\n+            const String rm_prefix_str = rm_prefix + '.';\n+            role_search_params_cfg.emplace_back();\n+            auto & rm_params = role_search_params_cfg.back();\n+\n+            rm_params.base_dn = config.getString(rm_prefix_str + \"base_dn\", \"\");\n+            rm_params.search_filter = config.getString(rm_prefix_str + \"search_filter\", \"\");\n+            rm_params.attribute = config.getString(rm_prefix_str + \"attribute\", \"cn\");\n+            rm_params.prefix = config.getString(rm_prefix_str + \"prefix\", \"\");\n+\n+            auto scope = config.getString(rm_prefix_str + \"scope\", \"subtree\");\n+            boost::algorithm::to_lower(scope);\n+            if (scope == \"base\")           rm_params.scope = LDAPSearchParams::Scope::BASE;\n+            else if (scope == \"one_level\") rm_params.scope = LDAPSearchParams::Scope::ONE_LEVEL;\n+            else if (scope == \"subtree\")   rm_params.scope = LDAPSearchParams::Scope::SUBTREE;\n+            else if (scope == \"children\")  rm_params.scope = LDAPSearchParams::Scope::CHILDREN;\n+            else\n+                throw Exception(\"Invalid value of 'scope' field in '\" + key + \"' section of LDAP user directory, must be one of 'base', 'one_level', 'subtree', or 'children'\", ErrorCodes::BAD_ARGUMENTS);\n+        }\n     }\n \n     access_control_manager = access_control_manager_;\n     ldap_server = ldap_server_cfg;\n-    default_role_names.swap(roles_cfg);\n-    roles_of_interest.clear();\n+    role_search_params.swap(role_search_params_cfg);\n+    common_role_names.swap(common_roles_cfg);\n+\n+    external_role_hashes.clear();\n+    users_per_roles.clear();\n+    roles_per_users.clear();\n+    granted_role_names.clear();\n+    granted_role_ids.clear();\n+\n     role_change_subscription = access_control_manager->subscribeForChanges<Role>(\n         [this] (const UUID & id, const AccessEntityPtr & entity)\n         {\n             return this->processRoleChange(id, entity);\n         }\n     );\n-\n-    /// Update `roles_of_interests` with initial values.\n-    for (const auto & role_name : default_role_names)\n-    {\n-        if (auto role_id = access_control_manager->find<Role>(role_name))\n-            roles_of_interest.emplace(*role_id, role_name);\n-    }\n }\n \n \n void LDAPAccessStorage::processRoleChange(const UUID & id, const AccessEntityPtr & entity)\n {\n     std::scoped_lock lock(mutex);\n+    const auto role = typeid_cast<std::shared_ptr<const Role>>(entity);\n+    const auto it = granted_role_names.find(id);\n+\n+    if (role) // Added or renamed a role.\n+    {\n+        const auto & new_role_name = role->getName();\n+        if (it != granted_role_names.end()) // Renamed a granted role.\n+        {\n+            const auto & old_role_name = it->second;\n+            if (new_role_name != old_role_name)\n+            {\n+                // Revoke the old role first, then grant the new role.\n+                applyRoleChangeNoLock(false /* revoke */, id, old_role_name);\n+                applyRoleChangeNoLock(true /* grant */, id, new_role_name);\n+            }\n+        }\n+        else // Added a role.\n+        {\n+            applyRoleChangeNoLock(true /* grant */, id, new_role_name);\n+        }\n+    }\n+    else // Removed a role.\n+    {\n+        if (it != granted_role_names.end()) // Removed a granted role.\n+        {\n+            const auto & old_role_name = it->second;\n+            applyRoleChangeNoLock(false /* revoke */, id, old_role_name);\n+        }\n+    }\n+}\n+\n \n-    /// Update `roles_of_interests`.\n-    auto role = typeid_cast<std::shared_ptr<const Role>>(entity);\n-    bool need_to_update_users = false;\n+void LDAPAccessStorage::applyRoleChangeNoLock(bool grant, const UUID & role_id, const String & role_name)\n+{\n+    std::vector<UUID> user_ids;\n \n-    if (role && default_role_names.count(role->getName()))\n+    // Build a list of ids of the relevant users.\n+    if (common_role_names.count(role_name))\n     {\n-        /// If a role was created with one of the `default_role_names` or renamed to one of the `default_role_names`,\n-        /// then set `need_to_update_users`.\n-        need_to_update_users = roles_of_interest.insert_or_assign(id, role->getName()).second;\n+        user_ids = memory_storage.findAll<User>();\n     }\n     else\n     {\n-        /// If a role was removed or renamed to a name which isn't contained in the `default_role_names`,\n-        /// then set `need_to_update_users`.\n-        need_to_update_users = roles_of_interest.erase(id) > 0;\n+        const auto it = users_per_roles.find(role_name);\n+        if (it != users_per_roles.end())\n+        {\n+            const auto & user_names = it->second;\n+            user_ids.reserve(user_names.size());\n+\n+            for (const auto & user_name : user_names)\n+            {\n+                if (const auto user_id = memory_storage.find<User>(user_name))\n+                    user_ids.emplace_back(*user_id);\n+            }\n+        }\n     }\n \n-    /// Update users which have been created.\n-    if (need_to_update_users)\n+    // Update the granted roles of the relevant users.\n+    if (!user_ids.empty())\n     {\n-        auto update_func = [this] (const AccessEntityPtr & entity_) -> AccessEntityPtr\n+        auto update_func = [&role_id, &grant] (const AccessEntityPtr & entity_) -> AccessEntityPtr\n         {\n             if (auto user = typeid_cast<std::shared_ptr<const User>>(entity_))\n             {\n                 auto changed_user = typeid_cast<std::shared_ptr<User>>(user->clone());\n                 auto & granted_roles = changed_user->granted_roles.roles;\n-                granted_roles.clear();\n-                boost::range::copy(roles_of_interest | boost::adaptors::map_keys, std::inserter(granted_roles, granted_roles.end()));\n+\n+                if (grant)\n+                    granted_roles.insert(role_id);\n+                else\n+                    granted_roles.erase(role_id);\n+\n                 return changed_user;\n             }\n             return entity_;\n         };\n-        memory_storage.update(memory_storage.findAll<User>(), update_func);\n+\n+        memory_storage.update(user_ids, update_func);\n     }\n+\n+    // Actualize granted_role_* mappings.\n+    if (grant)\n+    {\n+        if (!user_ids.empty())\n+        {\n+            granted_role_names.insert_or_assign(role_id, role_name);\n+            granted_role_ids.insert_or_assign(role_name, role_id);\n+        }\n+    }\n+    else\n+    {\n+        granted_role_names.erase(role_id);\n+        granted_role_ids.erase(role_name);\n+    }\n+}\n+\n+\n+void LDAPAccessStorage::assignRolesNoLock(User & user, const LDAPSearchResultsList & external_roles) const\n+{\n+    const auto external_roles_hash = boost::hash<LDAPSearchResultsList>{}(external_roles);\n+    return assignRolesNoLock(user, external_roles, external_roles_hash);\n }\n \n \n-void LDAPAccessStorage::checkAllDefaultRoleNamesFoundNoLock() const\n+void LDAPAccessStorage::assignRolesNoLock(User & user, const LDAPSearchResultsList & external_roles, const std::size_t external_roles_hash) const\n {\n-    boost::container::flat_set<std::string_view> role_names_of_interest;\n-    boost::range::copy(roles_of_interest | boost::adaptors::map_values, std::inserter(role_names_of_interest, role_names_of_interest.end()));\n+    const auto & user_name = user.getName();\n+    auto & granted_roles = user.granted_roles.roles;\n+    const auto local_role_names = mapExternalRolesNoLock(external_roles);\n \n-    for (const auto & role_name : default_role_names)\n+    auto grant_role = [this, &user_name, &granted_roles] (const String & role_name, const bool common)\n     {\n-        if (!role_names_of_interest.count(role_name))\n-            throwDefaultRoleNotFound(role_name);\n+        auto it = granted_role_ids.find(role_name);\n+        if (it == granted_role_ids.end())\n+        {\n+            if (const auto role_id = access_control_manager->find<Role>(role_name))\n+            {\n+                granted_role_names.insert_or_assign(*role_id, role_name);\n+                it = granted_role_ids.insert_or_assign(role_name, *role_id).first;\n+            }\n+        }\n+\n+        if (it != granted_role_ids.end())\n+        {\n+            const auto & role_id = it->second;\n+            granted_roles.insert(role_id);\n+        }\n+        else\n+        {\n+            LOG_WARNING(getLogger(), \"Unable to grant {} role '{}' to user '{}': role not found\", (common ? \"common\" : \"mapped\"), role_name, user_name);\n+        }\n+    };\n+\n+    external_role_hashes.erase(user_name);\n+    granted_roles.clear();\n+    const auto old_role_names = std::move(roles_per_users[user_name]);\n+\n+    // Grant the common roles first.\n+    for (const auto & role_name : common_role_names)\n+    {\n+        grant_role(role_name, true /* common */);\n     }\n+\n+    // Grant the mapped external roles and actualize users_per_roles mapping.\n+    // local_role_names allowed to overlap with common_role_names.\n+    for (const auto & role_name : local_role_names)\n+    {\n+        grant_role(role_name, false /* mapped */);\n+        users_per_roles[role_name].insert(user_name);\n+    }\n+\n+    // Cleanup users_per_roles and granted_role_* mappings.\n+    for (const auto & old_role_name : old_role_names)\n+    {\n+        if (local_role_names.count(old_role_name))\n+            continue;\n+\n+        const auto rit = users_per_roles.find(old_role_name);\n+        if (rit == users_per_roles.end())\n+            continue;\n+\n+        auto & user_names = rit->second;\n+        user_names.erase(user_name);\n+\n+        if (!user_names.empty())\n+            continue;\n+\n+        users_per_roles.erase(rit);\n+\n+        if (common_role_names.count(old_role_name))\n+            continue;\n+\n+        const auto iit = granted_role_ids.find(old_role_name);\n+        if (iit == granted_role_ids.end())\n+            continue;\n+\n+        const auto old_role_id = iit->second;\n+        granted_role_names.erase(old_role_id);\n+        granted_role_ids.erase(iit);\n+    }\n+\n+    // Actualize roles_per_users mapping and external_role_hashes cache.\n+    if (local_role_names.empty())\n+        roles_per_users.erase(user_name);\n+    else\n+        roles_per_users[user_name] = std::move(local_role_names);\n+\n+    external_role_hashes[user_name] = external_roles_hash;\n+}\n+\n+\n+void LDAPAccessStorage::updateAssignedRolesNoLock(const UUID & id, const String & user_name, const LDAPSearchResultsList & external_roles) const\n+{\n+    // No need to include common_role_names in this hash each time, since they don't change.\n+    const auto external_roles_hash = boost::hash<LDAPSearchResultsList>{}(external_roles);\n+\n+    // Map and grant the roles from scratch only if the list of external role has changed.\n+    const auto it = external_role_hashes.find(user_name);\n+    if (it != external_role_hashes.end() && it->second == external_roles_hash)\n+        return;\n+\n+    auto update_func = [this, &external_roles, external_roles_hash] (const AccessEntityPtr & entity_) -> AccessEntityPtr\n+    {\n+        if (auto user = typeid_cast<std::shared_ptr<const User>>(entity_))\n+        {\n+            auto changed_user = typeid_cast<std::shared_ptr<User>>(user->clone());\n+            assignRolesNoLock(*changed_user, external_roles, external_roles_hash);\n+            return changed_user;\n+        }\n+        return entity_;\n+    };\n+\n+    memory_storage.update(id, update_func);\n+}\n+\n+\n+std::set<String> LDAPAccessStorage::mapExternalRolesNoLock(const LDAPSearchResultsList & external_roles) const\n+{\n+    std::set<String> role_names;\n+\n+    if (external_roles.size() != role_search_params.size())\n+        throw Exception(\"Unable to map external roles\", ErrorCodes::BAD_ARGUMENTS);\n+\n+    for (std::size_t i = 0; i < external_roles.size(); ++i)\n+    {\n+        const auto & external_role_set = external_roles[i];\n+        const auto & prefix = role_search_params[i].prefix;\n+\n+        for (const auto & external_role : external_role_set)\n+        {\n+            if (\n+                prefix.size() < external_role.size() &&\n+                external_role.compare(0, prefix.size(), prefix) == 0\n+            )\n+            {\n+                role_names.emplace(external_role, prefix.size());\n+            }\n+        }\n+    }\n+\n+    return role_names;\n+}\n+\n+\n+bool LDAPAccessStorage::isPasswordCorrectLDAPNoLock(const String & user_name, const String & password,\n+    const ExternalAuthenticators & external_authenticators, LDAPSearchResultsList & search_results) const\n+{\n+    return external_authenticators.checkLDAPCredentials(ldap_server, user_name, password, &role_search_params, &search_results);\n }\n \n \n@@ -148,7 +384,37 @@ String LDAPAccessStorage::getStorageParamsJSON() const\n     Poco::JSON::Object params_json;\n \n     params_json.set(\"server\", ldap_server);\n-    params_json.set(\"roles\", default_role_names);\n+\n+    Poco::JSON::Array common_role_names_json;\n+    for (const auto & role : common_role_names)\n+    {\n+        common_role_names_json.add(role);\n+    }\n+    params_json.set(\"roles\", common_role_names_json);\n+\n+    Poco::JSON::Array role_mappings_json;\n+    for (const auto & role_mapping : role_search_params)\n+    {\n+        Poco::JSON::Object role_mapping_json;\n+\n+        role_mapping_json.set(\"base_dn\", role_mapping.base_dn);\n+        role_mapping_json.set(\"search_filter\", role_mapping.search_filter);\n+        role_mapping_json.set(\"attribute\", role_mapping.attribute);\n+        role_mapping_json.set(\"prefix\", role_mapping.prefix);\n+\n+        String scope;\n+        switch (role_mapping.scope)\n+        {\n+            case LDAPSearchParams::Scope::BASE:      scope = \"base\"; break;\n+            case LDAPSearchParams::Scope::ONE_LEVEL: scope = \"one_level\"; break;\n+            case LDAPSearchParams::Scope::SUBTREE:   scope = \"subtree\"; break;\n+            case LDAPSearchParams::Scope::CHILDREN:  scope = \"children\"; break;\n+        }\n+        role_mapping_json.set(\"scope\", scope);\n+\n+        role_mappings_json.add(role_mapping_json);\n+    }\n+    params_json.set(\"role_mappings\", role_mappings_json);\n \n     std::ostringstream oss;     // STYLE_CHECK_ALLOW_STD_STRING_STREAM\n     oss.exceptions(std::ios::failbit);\n@@ -251,17 +517,21 @@ bool LDAPAccessStorage::hasSubscriptionImpl(EntityType type) const\n UUID LDAPAccessStorage::loginImpl(const String & user_name, const String & password, const Poco::Net::IPAddress & address, const ExternalAuthenticators & external_authenticators) const\n {\n     std::scoped_lock lock(mutex);\n+    LDAPSearchResultsList external_roles;\n     auto id = memory_storage.find<User>(user_name);\n     if (id)\n     {\n         auto user = memory_storage.read<User>(*id);\n \n-        if (!isPasswordCorrectImpl(*user, password, external_authenticators))\n+        if (!isPasswordCorrectLDAPNoLock(user->getName(), password, external_authenticators, external_roles))\n             throwInvalidPassword();\n \n         if (!isAddressAllowedImpl(*user, address))\n             throwAddressNotAllowed(address);\n \n+        // Just in case external_roles are changed. This will be no-op if they are not.\n+        updateAssignedRolesNoLock(*id, user_name, external_roles);\n+\n         return *id;\n     }\n     else\n@@ -272,16 +542,13 @@ UUID LDAPAccessStorage::loginImpl(const String & user_name, const String & passw\n         user->authentication = Authentication(Authentication::Type::LDAP_SERVER);\n         user->authentication.setServerName(ldap_server);\n \n-        if (!isPasswordCorrectImpl(*user, password, external_authenticators))\n+        if (!isPasswordCorrectLDAPNoLock(user->getName(), password, external_authenticators, external_roles))\n             throwInvalidPassword();\n \n         if (!isAddressAllowedImpl(*user, address))\n             throwAddressNotAllowed(address);\n \n-        checkAllDefaultRoleNamesFoundNoLock();\n-\n-        auto & granted_roles = user->granted_roles.roles;\n-        boost::range::copy(roles_of_interest | boost::adaptors::map_keys, std::inserter(granted_roles, granted_roles.end()));\n+        assignRolesNoLock(*user, external_roles);\n \n         return memory_storage.insert(user);\n     }\n@@ -303,18 +570,14 @@ UUID LDAPAccessStorage::getIDOfLoggedUserImpl(const String & user_name) const\n         user->authentication = Authentication(Authentication::Type::LDAP_SERVER);\n         user->authentication.setServerName(ldap_server);\n \n-        checkAllDefaultRoleNamesFoundNoLock();\n+        LDAPSearchResultsList external_roles;\n+\n+        // TODO: mapped external roles are not available here. Without a password we can't authenticate and retrieve roles from LDAP server.\n \n-        auto & granted_roles = user->granted_roles.roles;\n-        boost::range::copy(roles_of_interest | boost::adaptors::map_keys, std::inserter(granted_roles, granted_roles.end()));\n+        assignRolesNoLock(*user, external_roles);\n \n         return memory_storage.insert(user);\n     }\n }\n \n-void LDAPAccessStorage::throwDefaultRoleNotFound(const String & role_name)\n-{\n-    throw Exception(\"One of the default roles, the role '\" + role_name + \"', is not found\", IAccessEntity::TypeInfo::get(IAccessEntity::Type::ROLE).not_found_error_code);\n-}\n-\n }\ndiff --git a/src/Access/LDAPAccessStorage.h b/src/Access/LDAPAccessStorage.h\nindex b1b0001d9bcc..b3d82d1e86bb 100644\n--- a/src/Access/LDAPAccessStorage.h\n+++ b/src/Access/LDAPAccessStorage.h\n@@ -6,6 +6,7 @@\n #include <map>\n #include <mutex>\n #include <set>\n+#include <vector>\n \n \n namespace Poco\n@@ -20,6 +21,10 @@ namespace Poco\n namespace DB\n {\n class AccessControlManager;\n+struct LDAPSearchParams;\n+using LDAPSearchParamsList = std::vector<LDAPSearchParams>;\n+using LDAPSearchResults = std::set<String>;\n+using LDAPSearchResultsList = std::vector<LDAPSearchResults>;\n \n /// Implementation of IAccessStorage which allows attaching users from a remote LDAP server.\n /// Currently, any user name will be treated as a name of an existing remote user,\n@@ -58,15 +63,25 @@ class LDAPAccessStorage : public IAccessStorage\n private:\n     void setConfiguration(AccessControlManager * access_control_manager_, const Poco::Util::AbstractConfiguration & config, const String & prefix);\n     void processRoleChange(const UUID & id, const AccessEntityPtr & entity);\n-    void checkAllDefaultRoleNamesFoundNoLock() const;\n \n-    [[noreturn]] static void throwDefaultRoleNotFound(const String & role_name);\n+    void applyRoleChangeNoLock(bool grant, const UUID & role_id, const String & role_name);\n+    void assignRolesNoLock(User & user, const LDAPSearchResultsList & external_roles) const;\n+    void assignRolesNoLock(User & user, const LDAPSearchResultsList & external_roles, const std::size_t external_roles_hash) const;\n+    void updateAssignedRolesNoLock(const UUID & id, const String & user_name, const LDAPSearchResultsList & external_roles) const;\n+    std::set<String> mapExternalRolesNoLock(const LDAPSearchResultsList & external_roles) const;\n+    bool isPasswordCorrectLDAPNoLock(const String & user_name, const String & password,\n+        const ExternalAuthenticators & external_authenticators, LDAPSearchResultsList & search_results) const;\n \n     mutable std::recursive_mutex mutex;\n     AccessControlManager * access_control_manager = nullptr;\n     String ldap_server;\n-    std::set<String> default_role_names;\n-    std::map<UUID, String> roles_of_interest;\n+    LDAPSearchParamsList role_search_params;\n+    std::set<String> common_role_names;                         // role name that should be granted to all users at all times\n+    mutable std::map<String, std::size_t> external_role_hashes; // user name -> LDAPSearchResultsList hash (most recently retrieved and processed)\n+    mutable std::map<String, std::set<String>> users_per_roles; // role name -> user names (...it should be granted to; may but don't have to exist for common roles)\n+    mutable std::map<String, std::set<String>> roles_per_users; // user name -> role names (...that should be granted to it; may but don't have to include common roles)\n+    mutable std::map<UUID, String> granted_role_names;          // (currently granted) role id -> its name\n+    mutable std::map<String, UUID> granted_role_ids;            // (currently granted) role name -> its id\n     ext::scope_guard role_change_subscription;\n     mutable MemoryAccessStorage memory_storage;\n };\ndiff --git a/src/Access/LDAPClient.cpp b/src/Access/LDAPClient.cpp\nindex a32239023611..41756aebb9a5 100644\n--- a/src/Access/LDAPClient.cpp\n+++ b/src/Access/LDAPClient.cpp\n@@ -1,8 +1,14 @@\n #include <Access/LDAPClient.h>\n #include <Common/Exception.h>\n #include <ext/scope_guard.h>\n+#include <common/logger_useful.h>\n+\n+#include <Poco/Logger.h>\n+#include <boost/algorithm/string/predicate.hpp>\n \n #include <mutex>\n+#include <utility>\n+#include <vector>\n \n #include <cstring>\n \n@@ -63,38 +69,63 @@ namespace\n         return dest;\n     }\n \n+    auto replacePlaceholders(const String & src, const std::vector<std::pair<String, String>> & pairs)\n+    {\n+        String dest = src;\n+\n+        for (const auto & pair : pairs)\n+        {\n+            const auto & placeholder = pair.first;\n+            const auto & value = pair.second;\n+            for (\n+                 auto pos = dest.find(placeholder);\n+                 pos != std::string::npos;\n+                 pos = dest.find(placeholder, pos)\n+            )\n+            {\n+                dest.replace(pos, placeholder.size(), value);\n+                pos += value.size();\n+            }\n+        }\n+\n+        return dest;\n+    }\n+\n }\n \n-void LDAPClient::diag(const int rc)\n+void LDAPClient::diag(const int rc, String text)\n {\n     std::scoped_lock lock(ldap_global_mutex);\n \n     if (rc != LDAP_SUCCESS)\n     {\n-        String text;\n         const char * raw_err_str = ldap_err2string(rc);\n-\n-        if (raw_err_str)\n-            text = raw_err_str;\n+        if (raw_err_str && *raw_err_str != '\\0')\n+        {\n+            if (!text.empty())\n+                text += \": \";\n+            text += raw_err_str;\n+        }\n \n         if (handle)\n         {\n-            String message;\n             char * raw_message = nullptr;\n-            ldap_get_option(handle, LDAP_OPT_DIAGNOSTIC_MESSAGE, &raw_message);\n \n-            if (raw_message)\n-            {\n-                message = raw_message;\n-                ldap_memfree(raw_message);\n-                raw_message = nullptr;\n-            }\n+            SCOPE_EXIT({\n+                if (raw_message)\n+                {\n+                    ldap_memfree(raw_message);\n+                    raw_message = nullptr;\n+                }\n+            });\n+\n+            ldap_get_option(handle, LDAP_OPT_DIAGNOSTIC_MESSAGE, &raw_message);\n \n-            if (!message.empty())\n+            if (raw_message && *raw_message != '\\0')\n             {\n                 if (!text.empty())\n                     text += \": \";\n-                text += message;\n+                text += raw_message;\n             }\n         }\n \n@@ -240,20 +271,20 @@ void LDAPClient::openConnection()\n     {\n         case LDAPServerParams::SASLMechanism::SIMPLE:\n         {\n-            const String dn = params.auth_dn_prefix + escapeForLDAP(params.user) + params.auth_dn_suffix;\n+            const auto escaped_user_name = escapeForLDAP(params.user);\n+            const auto bind_dn = replacePlaceholders(params.bind_dn, { {\"{user_name}\", escaped_user_name} });\n \n             ::berval cred;\n             cred.bv_val = const_cast<char *>(params.password.c_str());\n             cred.bv_len = params.password.size();\n \n-            diag(ldap_sasl_bind_s(handle, dn.c_str(), LDAP_SASL_SIMPLE, &cred, nullptr, nullptr, nullptr));\n+            diag(ldap_sasl_bind_s(handle, bind_dn.c_str(), LDAP_SASL_SIMPLE, &cred, nullptr, nullptr, nullptr));\n \n             break;\n         }\n+\n         default:\n-        {\n             throw Exception(\"Unknown SASL mechanism\", ErrorCodes::LDAP_ERROR);\n-        }\n     }\n }\n \n@@ -268,13 +299,167 @@ void LDAPClient::closeConnection() noexcept\n     handle = nullptr;\n }\n \n-bool LDAPSimpleAuthClient::check()\n+LDAPSearchResults LDAPClient::search(const LDAPSearchParams & search_params)\n {\n     std::scoped_lock lock(ldap_global_mutex);\n \n+    LDAPSearchResults result;\n+\n+    int scope = 0;\n+    switch (search_params.scope)\n+    {\n+        case LDAPSearchParams::Scope::BASE:      scope = LDAP_SCOPE_BASE;     break;\n+        case LDAPSearchParams::Scope::ONE_LEVEL: scope = LDAP_SCOPE_ONELEVEL; break;\n+        case LDAPSearchParams::Scope::SUBTREE:   scope = LDAP_SCOPE_SUBTREE;  break;\n+        case LDAPSearchParams::Scope::CHILDREN:  scope = LDAP_SCOPE_CHILDREN; break;\n+    }\n+\n+    const auto escaped_user_name = escapeForLDAP(params.user);\n+    const auto bind_dn = replacePlaceholders(params.bind_dn, { {\"{user_name}\", escaped_user_name} });\n+    const auto base_dn = replacePlaceholders(search_params.base_dn, { {\"{user_name}\", escaped_user_name}, {\"{bind_dn}\", bind_dn} });\n+    const auto search_filter = replacePlaceholders(search_params.search_filter, { {\"{user_name}\", escaped_user_name}, {\"{bind_dn}\", bind_dn}, {\"{base_dn}\", base_dn} });\n+    char * attrs[] = { const_cast<char *>(search_params.attribute.c_str()), nullptr };\n+    ::timeval timeout = { params.search_timeout.count(), 0 };\n+    LDAPMessage* msgs = nullptr;\n+\n+    SCOPE_EXIT({\n+        if (msgs)\n+        {\n+            ldap_msgfree(msgs);\n+            msgs = nullptr;\n+        }\n+    });\n+\n+    diag(ldap_search_ext_s(handle, base_dn.c_str(), scope, search_filter.c_str(), attrs, 0, nullptr, nullptr, &timeout, params.search_limit, &msgs));\n+\n+    for (\n+         auto * msg = ldap_first_message(handle, msgs);\n+         msg != nullptr;\n+         msg = ldap_next_message(handle, msg)\n+    )\n+    {\n+        switch (ldap_msgtype(msg))\n+        {\n+            case LDAP_RES_SEARCH_ENTRY:\n+            {\n+                BerElement * ber = nullptr;\n+\n+                SCOPE_EXIT({\n+                    if (ber)\n+                    {\n+                        ber_free(ber, 0);\n+                        ber = nullptr;\n+                    }\n+                });\n+\n+                for (\n+                     auto * attr = ldap_first_attribute(handle, msg, &ber);\n+                     attr != nullptr;\n+                     attr = ldap_next_attribute(handle, msg, ber)\n+                )\n+                {\n+                    SCOPE_EXIT({\n+                        ldap_memfree(attr);\n+                        attr = nullptr;\n+                    });\n+\n+                    if (search_params.attribute.empty() || boost::iequals(attr, search_params.attribute))\n+                    {\n+                        auto ** vals = ldap_get_values_len(handle, msg, attr);\n+                        if (vals)\n+                        {\n+                            SCOPE_EXIT({\n+                                ldap_value_free_len(vals);\n+                                vals = nullptr;\n+                            });\n+\n+                            for (std::size_t i = 0; vals[i]; i++)\n+                            {\n+                                if (vals[i]->bv_val && vals[i]->bv_len > 0)\n+                                    result.emplace(vals[i]->bv_val, vals[i]->bv_len);\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                break;\n+            }\n+\n+            case LDAP_RES_SEARCH_REFERENCE:\n+            {\n+                char ** referrals = nullptr;\n+                diag(ldap_parse_reference(handle, msg, &referrals, nullptr, 0));\n+\n+                if (referrals)\n+                {\n+                    SCOPE_EXIT({\n+//                      ldap_value_free(referrals);\n+                        ber_memvfree(reinterpret_cast<void **>(referrals));\n+                        referrals = nullptr;\n+                    });\n+\n+                    for (std::size_t i = 0; referrals[i]; i++)\n+                    {\n+                        LOG_WARNING(&Poco::Logger::get(\"LDAPClient\"), \"Received reference during LDAP search but not following it: {}\", referrals[i]);\n+                    }\n+                }\n+\n+                break;\n+            }\n+\n+            case LDAP_RES_SEARCH_RESULT:\n+            {\n+                int rc = LDAP_SUCCESS;\n+                char * matched_msg = nullptr;\n+                char * error_msg = nullptr;\n+\n+                diag(ldap_parse_result(handle, msg, &rc, &matched_msg, &error_msg, nullptr, nullptr, 0));\n+\n+                if (rc != LDAP_SUCCESS)\n+                {\n+                    String message = \"LDAP search failed\";\n+\n+                    const char * raw_err_str = ldap_err2string(rc);\n+                    if (raw_err_str && *raw_err_str != '\\0')\n+                    {\n+                        message += \": \";\n+                        message += raw_err_str;\n+                    }\n+\n+                    if (error_msg && *error_msg != '\\0')\n+                    {\n+                        message += \", \";\n+                        message += error_msg;\n+                    }\n+\n+                    if (matched_msg && *matched_msg != '\\0')\n+                    {\n+                        message += \", matching DN part: \";\n+                        message += matched_msg;\n+                    }\n+\n+                    throw Exception(message, ErrorCodes::LDAP_ERROR);\n+                }\n+\n+                break;\n+            }\n+\n+            case -1:\n+                throw Exception(\"Failed to process LDAP search message\", ErrorCodes::LDAP_ERROR);\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+bool LDAPSimpleAuthClient::authenticate(const LDAPSearchParamsList * search_params, LDAPSearchResultsList * search_results)\n+{\n     if (params.user.empty())\n         throw Exception(\"LDAP authentication of a user with empty name is not allowed\", ErrorCodes::BAD_ARGUMENTS);\n \n+    if (!search_params != !search_results)\n+        throw Exception(\"Cannot return LDAP search results\", ErrorCodes::BAD_ARGUMENTS);\n+\n     // Silently reject authentication attempt if the password is empty as if it didn't match.\n     if (params.password.empty())\n         return false;\n@@ -284,12 +469,32 @@ bool LDAPSimpleAuthClient::check()\n     // Will throw on any error, including invalid credentials.\n     openConnection();\n \n+    // While connected, run search queries and save the results, if asked.\n+    if (search_params)\n+    {\n+        search_results->clear();\n+        search_results->reserve(search_params->size());\n+\n+        try\n+        {\n+            for (const auto & single_search_params : *search_params)\n+            {\n+                search_results->emplace_back(search(single_search_params));\n+            }\n+        }\n+        catch (...)\n+        {\n+            search_results->clear();\n+            throw;\n+        }\n+    }\n+\n     return true;\n }\n \n #else // USE_LDAP\n \n-void LDAPClient::diag(const int)\n+void LDAPClient::diag(const int, String)\n {\n     throw Exception(\"ClickHouse was built without LDAP support\", ErrorCodes::FEATURE_IS_NOT_ENABLED_AT_BUILD_TIME);\n }\n@@ -303,7 +508,12 @@ void LDAPClient::closeConnection() noexcept\n {\n }\n \n-bool LDAPSimpleAuthClient::check()\n+LDAPSearchResults LDAPClient::search(const LDAPSearchParams &)\n+{\n+    throw Exception(\"ClickHouse was built without LDAP support\", ErrorCodes::FEATURE_IS_NOT_ENABLED_AT_BUILD_TIME);\n+}\n+\n+bool LDAPSimpleAuthClient::authenticate(const LDAPSearchParamsList *, LDAPSearchResultsList *)\n {\n     throw Exception(\"ClickHouse was built without LDAP support\", ErrorCodes::FEATURE_IS_NOT_ENABLED_AT_BUILD_TIME);\n }\ndiff --git a/src/Access/LDAPClient.h b/src/Access/LDAPClient.h\nindex 777c87c5b943..f0ace69649bf 100644\n--- a/src/Access/LDAPClient.h\n+++ b/src/Access/LDAPClient.h\n@@ -30,9 +30,10 @@ class LDAPClient\n     LDAPClient & operator= (LDAPClient &&) = delete;\n \n protected:\n-    MAYBE_NORETURN void diag(const int rc);\n+    MAYBE_NORETURN void diag(const int rc, String text = \"\");\n     MAYBE_NORETURN void openConnection();\n     void closeConnection() noexcept;\n+    LDAPSearchResults search(const LDAPSearchParams & search_params);\n \n protected:\n     const LDAPServerParams params;\n@@ -46,7 +47,7 @@ class LDAPSimpleAuthClient\n {\n public:\n     using LDAPClient::LDAPClient;\n-    bool check();\n+    bool authenticate(const LDAPSearchParamsList * search_params, LDAPSearchResultsList * search_results);\n };\n \n }\ndiff --git a/src/Access/LDAPParams.h b/src/Access/LDAPParams.h\nindex 28dcc5fe50fd..5181b2d16214 100644\n--- a/src/Access/LDAPParams.h\n+++ b/src/Access/LDAPParams.h\n@@ -5,11 +5,43 @@\n #include <boost/container_hash/hash.hpp>\n \n #include <chrono>\n+#include <set>\n+#include <vector>\n \n \n namespace DB\n {\n \n+struct LDAPSearchParams\n+{\n+    enum class Scope\n+    {\n+        BASE,\n+        ONE_LEVEL,\n+        SUBTREE,\n+        CHILDREN\n+    };\n+\n+    String base_dn;\n+    Scope scope = Scope::SUBTREE;\n+    String search_filter;\n+    String attribute = \"cn\";\n+    String prefix;\n+\n+    void combineHash(std::size_t & seed) const\n+    {\n+        boost::hash_combine(seed, base_dn);\n+        boost::hash_combine(seed, static_cast<int>(scope));\n+        boost::hash_combine(seed, search_filter);\n+        boost::hash_combine(seed, attribute);\n+        boost::hash_combine(seed, prefix);\n+    }\n+};\n+\n+using LDAPSearchParamsList = std::vector<LDAPSearchParams>;\n+using LDAPSearchResults = std::set<String>;\n+using LDAPSearchResultsList = std::vector<LDAPSearchResults>;\n+\n struct LDAPServerParams\n {\n     enum class ProtocolVersion\n@@ -64,9 +96,7 @@ struct LDAPServerParams\n \n     SASLMechanism sasl_mechanism = SASLMechanism::SIMPLE;\n \n-    String auth_dn_prefix;\n-    String auth_dn_suffix;\n-\n+    String bind_dn;\n     String user;\n     String password;\n \n@@ -77,18 +107,13 @@ struct LDAPServerParams\n     std::chrono::seconds search_timeout{20};\n     std::uint32_t search_limit = 100;\n \n-    std::size_t getCoreHash() const\n+    void combineCoreHash(std::size_t & seed) const\n     {\n-        std::size_t seed = 0;\n-\n         boost::hash_combine(seed, host);\n         boost::hash_combine(seed, port);\n-        boost::hash_combine(seed, auth_dn_prefix);\n-        boost::hash_combine(seed, auth_dn_suffix);\n+        boost::hash_combine(seed, bind_dn);\n         boost::hash_combine(seed, user);\n         boost::hash_combine(seed, password);\n-\n-        return seed;\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/testflows/aes_encryption/docker-compose/clickhouse-service.yml b/tests/testflows/aes_encryption/docker-compose/clickhouse-service.yml\nindex 9787b37abbba..0789decf022f 100644\n--- a/tests/testflows/aes_encryption/docker-compose/clickhouse-service.yml\n+++ b/tests/testflows/aes_encryption/docker-compose/clickhouse-service.yml\n@@ -18,10 +18,10 @@ services:\n     entrypoint: bash -c \"clickhouse server --config-file=/etc/clickhouse-server/config.xml --log-file=/var/log/clickhouse-server/clickhouse-server.log --errorlog-file=/var/log/clickhouse-server/clickhouse-server.err.log\"\n     healthcheck:\n       test: clickhouse client --query='select 1'\n-      interval: 3s\n-      timeout: 2s\n-      retries: 40\n-      start_period: 2s\n+      interval: 10s\n+      timeout: 10s\n+      retries: 10\n+      start_period: 300s\n     cap_add:\n       - SYS_PTRACE\n     security_opt:\ndiff --git a/tests/testflows/example/docker-compose/clickhouse-service.yml b/tests/testflows/example/docker-compose/clickhouse-service.yml\nindex 2a56876c72e1..0789decf022f 100644\n--- a/tests/testflows/example/docker-compose/clickhouse-service.yml\n+++ b/tests/testflows/example/docker-compose/clickhouse-service.yml\n@@ -20,7 +20,7 @@ services:\n       test: clickhouse client --query='select 1'\n       interval: 10s\n       timeout: 10s\n-      retries: 3\n+      retries: 10\n       start_period: 300s\n     cap_add:\n       - SYS_PTRACE\ndiff --git a/tests/testflows/ldap/authentication/docker-compose/clickhouse-service.yml b/tests/testflows/ldap/authentication/docker-compose/clickhouse-service.yml\nindex 2a56876c72e1..0789decf022f 100644\n--- a/tests/testflows/ldap/authentication/docker-compose/clickhouse-service.yml\n+++ b/tests/testflows/ldap/authentication/docker-compose/clickhouse-service.yml\n@@ -20,7 +20,7 @@ services:\n       test: clickhouse client --query='select 1'\n       interval: 10s\n       timeout: 10s\n-      retries: 3\n+      retries: 10\n       start_period: 300s\n     cap_add:\n       - SYS_PTRACE\ndiff --git a/tests/testflows/ldap/authentication/regression.py b/tests/testflows/ldap/authentication/regression.py\nindex 50677d78cb8b..ff004a998cac 100755\n--- a/tests/testflows/ldap/authentication/regression.py\n+++ b/tests/testflows/ldap/authentication/regression.py\n@@ -23,11 +23,7 @@\n     \"connection protocols/starttls with custom port\":\n      [(Fail, \"it seems that starttls is not enabled by default on custom plain-text ports in LDAP server\")],\n     \"connection protocols/tls cipher suite\":\n-     [(Fail, \"can't get it to work\")],\n-    \"external user directory/user authentications/valid verification cooldown value ldap unavailable\":\n-     [(Fail, \"flaky, ask Vitaly Zakaznikov, Telegram @vzakaznikov\")],\n-    \"user authentications/rbac=True/verification cooldown/verification cooldown performance\":\n-     [(Fail, \"flaky, ask Vitaly Zakaznikov, Telegram @vzakaznikov\")]\n+     [(Fail, \"can't get it to work\")]\n }\n \n @TestFeature\ndiff --git a/tests/testflows/ldap/authentication/tests/authentications.py b/tests/testflows/ldap/authentication/tests/authentications.py\nindex 46bcae000b8c..b54cc880bbc0 100644\n--- a/tests/testflows/ldap/authentication/tests/authentications.py\n+++ b/tests/testflows/ldap/authentication/tests/authentications.py\n@@ -131,7 +131,7 @@ def login_after_user_is_deleted_from_ldap(self, server, rbac=False):\n             user = add_user_to_ldap(**user)\n \n         with ldap_authenticated_users({\"username\": user[\"cn\"], \"server\": server}, config_file=f\"ldap_users_{getuid()}.xml\",\n-            restart=True, rbac=rbac):\n+                restart=True, rbac=rbac):\n             login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"])\n \n             with When(\"I delete this user from LDAP\"):\n@@ -202,7 +202,7 @@ def login_after_user_cn_changed_in_ldap(self, server, rbac=False):\n             user = add_user_to_ldap(**user)\n \n         with ldap_authenticated_users({\"username\": user[\"cn\"], \"server\": server},\n-            config_file=f\"ldap_users_{getuid()}.xml\", restart=True, rbac=rbac):\n+                config_file=f\"ldap_users_{getuid()}.xml\", restart=True, rbac=rbac):\n             login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"])\n \n             with When(\"I change user password in LDAP\"):\ndiff --git a/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml b/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml\nindex 2a56876c72e1..0789decf022f 100644\n--- a/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml\n+++ b/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml\n@@ -20,7 +20,7 @@ services:\n       test: clickhouse client --query='select 1'\n       interval: 10s\n       timeout: 10s\n-      retries: 3\n+      retries: 10\n       start_period: 300s\n     cap_add:\n       - SYS_PTRACE\ndiff --git a/tests/testflows/ldap/external_user_directory/requirements/requirements.md b/tests/testflows/ldap/external_user_directory/requirements/requirements.md\nindex cf9650f2cae2..998996c5874c 100644\n--- a/tests/testflows/ldap/external_user_directory/requirements/requirements.md\n+++ b/tests/testflows/ldap/external_user_directory/requirements/requirements.md\n@@ -51,6 +51,7 @@\n       * 4.2.2.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.New](#rqsrs-009ldapexternaluserdirectoryrolenew)\n       * 4.2.2.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NewPrivilege](#rqsrs-009ldapexternaluserdirectoryrolenewprivilege)\n       * 4.2.2.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.RemovedPrivilege](#rqsrs-009ldapexternaluserdirectoryroleremovedprivilege)\n+      * 4.2.2.7 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NotPresent.Added](#rqsrs-009ldapexternaluserdirectoryrolenotpresentadded)\n     * 4.2.3 [Configuration](#configuration)\n       * 4.2.3.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid](#rqsrs-009ldapexternaluserdirectoryconfigurationserverinvalid)\n       * 4.2.3.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Definition](#rqsrs-009ldapexternaluserdirectoryconfigurationserverdefinition)\n@@ -340,12 +341,10 @@ are configured during parallel [LDAP] user logins.\n #### Roles\n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed\n-version: 1.0\n+version: 2.0\n \n-[ClickHouse] SHALL reject authentication attempt if any of the roles that are specified in the configuration\n-of the external user directory are not defined at the time of the authentication attempt\n-with an exception that if a user was able to authenticate in past and its internal user object was created and cached\n-then the user SHALL be able to authenticate again, even if one of the roles is missing.\n+[ClickHouse] SHALL allow authentication even if the roles that are specified in the configuration\n+of the external user directory are not defined at the time of the authentication attempt.\n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed.Privileges\n version: 1.0\n@@ -383,6 +382,14 @@ version: 1.0\n including cached users when privilege is removed from all the roles specified\n in the configuration of the external user directory.\n \n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NotPresent.Added\n+version: 1.0\n+\n+[ClickHouse] SHALL add a role to the users authenticated using LDAP external user directory\n+that did not exist during the time of authentication but are defined in the \n+configuration file as soon as the role with that name becomes\n+available.\n+\n #### Configuration\n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid\n@@ -701,10 +708,10 @@ in the `<ldap>` sub-section in the `<user_directories>`\n if more than one `roles` parameter is defined in the configuration.\n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Invalid\n-version: 1.0\n+version: 2.0\n \n-[ClickHouse] SHALL return an error if the role specified in the `<roles>`\n-parameter does not exist locally.\n+[ClickHouse] SHALL not return an error if the role specified in the `<roles>`\n+parameter does not exist locally. \n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Empty\n version: 1.0\ndiff --git a/tests/testflows/ldap/external_user_directory/requirements/requirements.py b/tests/testflows/ldap/external_user_directory/requirements/requirements.py\nindex 0e9f9320b141..4256ba627161 100644\n--- a/tests/testflows/ldap/external_user_directory/requirements/requirements.py\n+++ b/tests/testflows/ldap/external_user_directory/requirements/requirements.py\n@@ -514,16 +514,14 @@\n \n RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed = Requirement(\n     name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed',\n-    version='1.0',\n+    version='2.0',\n     priority=None,\n     group=None,\n     type=None,\n     uid=None,\n     description=(\n-        '[ClickHouse] SHALL reject authentication attempt if any of the roles that are specified in the configuration\\n'\n-        'of the external user directory are not defined at the time of the authentication attempt\\n'\n-        'with an exception that if a user was able to authenticate in past and its internal user object was created and cached\\n'\n-        'then the user SHALL be able to authenticate again, even if one of the roles is missing.\\n'\n+        '[ClickHouse] SHALL allow authentication even if the roles that are specified in the configuration\\n'\n+        'of the external user directory are not defined at the time of the authentication attempt.\\n'\n         '\\n'\n         ),\n     link=None,\n@@ -616,6 +614,24 @@\n     level=4,\n     num='4.2.2.6')\n \n+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_NotPresent_Added = Requirement(\n+    name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NotPresent.Added',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL add a role to the users authenticated using LDAP external user directory\\n'\n+        'that did not exist during the time of authentication but are defined in the \\n'\n+        'configuration file as soon as the role with that name becomes\\n'\n+        'available.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.2.2.7')\n+\n RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid = Requirement(\n     name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid',\n     version='1.0',\n@@ -1353,14 +1369,14 @@\n \n RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Invalid = Requirement(\n     name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Invalid',\n-    version='1.0',\n+    version='2.0',\n     priority=None,\n     group=None,\n     type=None,\n     uid=None,\n     description=(\n-        '[ClickHouse] SHALL return an error if the role specified in the `<roles>`\\n'\n-        'parameter does not exist locally.\\n'\n+        '[ClickHouse] SHALL not return an error if the role specified in the `<roles>`\\n'\n+        'parameter does not exist locally. \\n'\n         '\\n'\n         ),\n     link=None,\n@@ -1620,6 +1636,7 @@\n         Heading(name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.New', level=4, num='4.2.2.4'),\n         Heading(name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NewPrivilege', level=4, num='4.2.2.5'),\n         Heading(name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.RemovedPrivilege', level=4, num='4.2.2.6'),\n+        Heading(name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NotPresent.Added', level=4, num='4.2.2.7'),\n         Heading(name='Configuration', level=3, num='4.2.3'),\n         Heading(name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid', level=4, num='4.2.3.1'),\n         Heading(name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Definition', level=4, num='4.2.3.2'),\n@@ -1716,6 +1733,7 @@\n         RQ_SRS_009_LDAP_ExternalUserDirectory_Role_New,\n         RQ_SRS_009_LDAP_ExternalUserDirectory_Role_NewPrivilege,\n         RQ_SRS_009_LDAP_ExternalUserDirectory_Role_RemovedPrivilege,\n+        RQ_SRS_009_LDAP_ExternalUserDirectory_Role_NotPresent_Added,\n         RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid,\n         RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Definition,\n         RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Name,\n@@ -1825,6 +1843,7 @@\n       * 4.2.2.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.New](#rqsrs-009ldapexternaluserdirectoryrolenew)\n       * 4.2.2.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NewPrivilege](#rqsrs-009ldapexternaluserdirectoryrolenewprivilege)\n       * 4.2.2.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.RemovedPrivilege](#rqsrs-009ldapexternaluserdirectoryroleremovedprivilege)\n+      * 4.2.2.7 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NotPresent.Added](#rqsrs-009ldapexternaluserdirectoryrolenotpresentadded)\n     * 4.2.3 [Configuration](#configuration)\n       * 4.2.3.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid](#rqsrs-009ldapexternaluserdirectoryconfigurationserverinvalid)\n       * 4.2.3.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Definition](#rqsrs-009ldapexternaluserdirectoryconfigurationserverdefinition)\n@@ -2114,12 +2133,10 @@\n #### Roles\n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed\n-version: 1.0\n+version: 2.0\n \n-[ClickHouse] SHALL reject authentication attempt if any of the roles that are specified in the configuration\n-of the external user directory are not defined at the time of the authentication attempt\n-with an exception that if a user was able to authenticate in past and its internal user object was created and cached\n-then the user SHALL be able to authenticate again, even if one of the roles is missing.\n+[ClickHouse] SHALL allow authentication even if the roles that are specified in the configuration\n+of the external user directory are not defined at the time of the authentication attempt.\n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed.Privileges\n version: 1.0\n@@ -2157,6 +2174,14 @@\n including cached users when privilege is removed from all the roles specified\n in the configuration of the external user directory.\n \n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NotPresent.Added\n+version: 1.0\n+\n+[ClickHouse] SHALL add a role to the users authenticated using LDAP external user directory\n+that did not exist during the time of authentication but are defined in the \n+configuration file as soon as the role with that name becomes\n+available.\n+\n #### Configuration\n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid\n@@ -2475,10 +2500,10 @@\n if more than one `roles` parameter is defined in the configuration.\n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Invalid\n-version: 1.0\n+version: 2.0\n \n-[ClickHouse] SHALL return an error if the role specified in the `<roles>`\n-parameter does not exist locally.\n+[ClickHouse] SHALL not return an error if the role specified in the `<roles>`\n+parameter does not exist locally. \n \n ##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Empty\n version: 1.0\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/common.py b/tests/testflows/ldap/external_user_directory/tests/common.py\nindex 6d8a97e86110..e5980640721e 100644\n--- a/tests/testflows/ldap/external_user_directory/tests/common.py\n+++ b/tests/testflows/ldap/external_user_directory/tests/common.py\n@@ -77,7 +77,7 @@ def verify_ldap_user_exists(server, username, password):\n     with By(\"searching LDAP database\"):\n         ldap_node = current().context.cluster.node(server)\n         r = ldap_node.command(\n-            f\"ldapwhoami -H ldap://localhost -D 'cn={username},ou=users,dc=company,dc=com' -w {password}\")\n+            f\"ldapwhoami -H ldap://localhost -D 'cn={user_name},ou=users,dc=company,dc=com' -w {password}\")\n         assert r.exitcode == 0, error()\n \n def create_ldap_external_user_directory_config_content(server=None, roles=None, **kwargs):\n@@ -96,7 +96,10 @@ def create_entries_ldap_external_user_directory_config_content(entries, config_d\n         <user_directories>\n             <ldap>\n                 <server>my_ldap_server</server>\n-                <user_template>my_user</user_template>\n+                <roles>\n+                    <my_local_role1 />\n+                    <my_local_role2 />\n+                </roles>\n             </ldap>\n         </user_directories>\n     ```\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py b/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py\nindex b5677eba4b22..9ff480426bf1 100644\n--- a/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py\n+++ b/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py\n@@ -220,15 +220,12 @@ def defined_twice_roles(self, timeout=20):\n \n @TestScenario\n @Requirements(\n-    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Invalid(\"1.0\")\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Invalid(\"2.0\")\n )\n def invalid_role_in_roles(self, timeout=20):\n-    \"\"\"Check that an error is returned when LDAP users try to authenticate\n+    \"\"\"Check that no error is returned when LDAP users try to authenticate\n     if an invalid role is specified inside the `roles` section.\n     \"\"\"\n-    exitcode = 4\n-    message = \"DB::Exception: user1: Authentication failed\"\n-\n     servers = {\n         \"openldap1\": {\n             \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n@@ -241,8 +238,7 @@ def invalid_role_in_roles(self, timeout=20):\n         with ldap_external_user_directory(\"openldap1\", roles=[\"foo\"], restart=True):\n             with When(f\"I login as {user['username']} and execute query\"):\n                 current().context.node.query(\"SELECT 1\",\n-                settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])],\n-                exitcode=exitcode, message=message)\n+                    settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])])\n \n @TestScenario\n @Requirements(\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/roles.py b/tests/testflows/ldap/external_user_directory/tests/roles.py\nindex 8a6c6f465d17..2b68c1da36b9 100644\n--- a/tests/testflows/ldap/external_user_directory/tests/roles.py\n+++ b/tests/testflows/ldap/external_user_directory/tests/roles.py\n@@ -139,17 +139,15 @@ def remove_privilege(self, server, timeout=20):\n \n @TestScenario\n @Requirements(\n-    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed(\"1.0\")\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed(\"2.0\")\n )\n def remove_role(self, server, timeout=20):\n     \"\"\"Check that when a role used in the external user directory configuration\n-    is dynamically removed then any non-cached LDAP users should not be authenticated using\n+    is dynamically removed then any LDAP users should still be authenticated using\n     LDAP external user directory.\n     \"\"\"\n     node = self.context.node\n     uid = getuid()\n-    exitcode = 4\n-    message = \"DB::Exception: {user}: Authentication failed: password is incorrect or there is no user with such name\"\n \n     self.context.ldap_node = self.context.cluster.node(server)\n \n@@ -174,8 +172,7 @@ def remove_role(self, server, timeout=20):\n \n                     with And(f\"I try to login again using non-cached LDAP user\"):\n                         node.query(f\"SELECT 1\",\n-                            settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])],\n-                            exitcode=exitcode, message=message.format(user=users[1][\"username\"]))\n+                            settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])])\n \n @TestScenario\n @Requirements(\n@@ -228,7 +225,7 @@ def readd_privilege_by_readding_role(self, server, timeout=20):\n     \"\"\"Check that when the role used in the external user directory configuration\n     is dynamically removed then all the privileges are removed from any\n     LDAP users authenticated using external user directory but when the role is re-added\n-    then privileges are restored and non-cached users can login again.\n+    then privileges are restored.\n     \"\"\"\n     node = self.context.node\n     uid = getuid()\n@@ -265,13 +262,9 @@ def readd_privilege_by_readding_role(self, server, timeout=20):\n                                 settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])],\n                                 exitcode=exitcode, message=message.format(user=users[0][\"username\"]))\n \n-                        message = \"DB::Exception: {user}: Authentication failed: password is incorrect or there is no user with such name\"\n-                        exitcode = 4\n-\n-                        with And(f\"I try to login using non-cached LDAP user and expect it to fail\"):\n+                        with And(f\"I try to login using non-cached LDAP user and expect it to succeed\"):\n                             node.query(f\"SELECT 1\",\n-                                settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])],\n-                                exitcode=exitcode, message=message.format(user=users[1][\"username\"]))\n+                                settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])])\n \n                         with When(\"I re-add the role\"):\n                             node.query(f\"CREATE ROLE {roles[0]}\")\n@@ -284,11 +277,65 @@ def readd_privilege_by_readding_role(self, server, timeout=20):\n                             node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n                                 settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n \n-                        with And(\"I try to login using non-cached LDAP expect it to work \"\n-                                \"with user also having privilege provided by the role\"):\n+                        with And(\"I try to login using non-cached LDAP expect it to also work again and expect\"\n+                                \"for the user also to have privilege provided by the role\"):\n                             node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n                                 settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])])\n \n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_NotPresent_Added(\"1.0\")\n+)\n+def not_present_role_added(self, server, timeout=20):\n+    \"\"\"Check that when the role used in the external user directory configuration\n+    which was not present during LDAP user authentication\n+    is dynamically added then all the privileges granted by the role\n+    are given to all users authenticated using external LDAP user directory.\n+    \"\"\"\n+    node = self.context.node\n+    uid = getuid()\n+\n+    self.context.ldap_node = self.context.cluster.node(server)\n+\n+    users = [\n+        {\"username\": f\"user0_{uid}\", \"password\": \"user0_password\"},\n+        {\"username\": f\"user1_{uid}\", \"password\": \"user1_password\"}\n+    ]\n+\n+    roles = [f\"role0_{uid}\", f\"role1_{uid}\"]\n+\n+    with table(f\"table_{getuid()}\", \"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\") as table_name:\n+        with ldap_external_user_directory(server=server, roles=roles, restart=True):\n+            with ldap_users(*[{\"cn\": user[\"username\"], \"userpassword\": user[\"password\"]} for user in users]):\n+                with When(f\"I login using clickhouse-client\"):\n+                    with self.context.cluster.shell(node=node.name) as shell:\n+                        with shell(f\"TERM=dumb clickhouse client --user {users[0]['username']} --password {users[0]['password']} | tee\",\n+                                asynchronous=True, name=\"client\") as client:\n+                            client.app.expect(\"clickhouse1 :\\) \")\n+\n+                            with When(\"I execute select on the table\"):\n+                                client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                            with Then(\"I expect to get not enough privileges error\"):\n+                                client.app.expect(\"Not enough privileges\")\n+                                client.app.expect(\"clickhouse1 :\\) \")\n+\n+                            try:\n+                                with Given(\"I add the role and grant the select privilege to it for the table\"):\n+                                    node.query(f\"CREATE ROLE {roles[0]}\")\n+                                    node.query(f\"GRANT SELECT ON {table_name} TO {roles[0]}\")\n+\n+                                with When(\"I re-execute select on the table\"):\n+                                    client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                                with Then(\"I expect to get no errors\"):\n+                                    client.app.expect(\"Ok\\.\")\n+                                    client.app.expect(\"clickhouse1 :\\) \")\n+\n+                            finally:\n+                                with Finally(\"I delete the role\"):\n+                                    node.query(f\"DROP ROLE IF EXISTS {roles[0]}\")\n+\n @TestFeature\n @Name(\"roles\")\n @Requirements(\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/server_config.py b/tests/testflows/ldap/external_user_directory/tests/server_config.py\nindex 617c0ee32e59..4e2e586f77c8 100644\n--- a/tests/testflows/ldap/external_user_directory/tests/server_config.py\n+++ b/tests/testflows/ldap/external_user_directory/tests/server_config.py\n@@ -148,7 +148,7 @@ def invalid_enable_tls_value(self, timeout=60):\n     servers = {\"openldap1\": {\"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"foo\",\n         \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n     }}\n-    invalid_server_config(servers, message=message, tail=17, timeout=timeout)\n+    invalid_server_config(servers, message=message, tail=18, timeout=timeout)\n \n @TestScenario\n @Requirements(\ndiff --git a/tests/testflows/ldap/regression.py b/tests/testflows/ldap/regression.py\nindex 9cc9aa85f93d..579223c4b357 100755\n--- a/tests/testflows/ldap/regression.py\n+++ b/tests/testflows/ldap/regression.py\n@@ -16,6 +16,7 @@ def regression(self, local, clickhouse_binary_path, parallel=None, stress=None):\n \n     Feature(test=load(\"ldap.authentication.regression\", \"regression\"))(**args)\n     Feature(test=load(\"ldap.external_user_directory.regression\", \"regression\"))(**args)\n+    Feature(test=load(\"ldap.role_mapping.regression\", \"regression\"))(**args)\n \n if main():\n-    regression()\n\\ No newline at end of file\n+    regression()\ndiff --git a/tests/testflows/ldap/role_mapping/__init__.py b/tests/testflows/ldap/role_mapping/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/testflows/ldap/role_mapping/configs/CA/ca.crt b/tests/testflows/ldap/role_mapping/configs/CA/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/CA/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/CA/ca.key b/tests/testflows/ldap/role_mapping/configs/CA/ca.key\nnew file mode 100644\nindex 000000000000..e7a7f664dcf5\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/CA/ca.key\n@@ -0,0 +1,30 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+Proc-Type: 4,ENCRYPTED\n+DEK-Info: AES-256-CBC,D06B9754A2069EBB4E77065DC9B605A1\n+\n+FJT794Z6AUuUB5Vp5W2iR6zzCvQUg2dtKoE+xhFdbgC7lmSfA2W/O9fx15Il67Yj\n+Bbpm9Y6yteUSDQpJrvBdkhXeBkYEa5K1CA+0Jdx98nzwP3KBhHNxVVrTWRc5kniB\n+LMV3iBQEbAafxgL7gN+EWr3eV7w7ZSqT7D5br/mlBALU62gv2UzwTXLu1CgyNWMC\n+HIPjIX50Zga+BnhZhtQvM4Yj1gOsn+X6AaEZ3KjTfCDqthYQf2ldswW4gAlPAq83\n++INq9Spx+QG97Z+1XO2DmmGTZL0z+OFLT+3y26/UcftM26ODY09Dcf3gt0n6RIUV\n+0KsD1qQL0ppu4CHVnbIkOKMBe86qBl+kG8FVmyhgZ8D9ULlF1tpyTVKvHR82V2B5\n+ztbc5EY1Fhb+r7OVVJlbCeo/bWmWybODZrpN49x5gGZpM3+8ApaHupGZ+cRFkQKG\n+rDpqC5gflT3WwFNxtP5noWcV+Gzb3riXNM3c8G5aIpLZwmmaTLK9ahKqMcq4Ljf+\n+hir8kuCMqIKt3m7Ceoj4wAHSP8xO0y/cc1WYNb3CI0Emk795aR6IPUw4vDEXHG27\n+OLoCJTvl/JKRWJGkdQx8wKAs/uw/qwtbhYoQJccTjfvy4NXH3tpSgxCE8OTWuEch\n+TAN8ra1PDGAUu+1MeT5gZ9uI1BEU6hXMME4mVRpJdcmw9MVy3V+B6rkUqX3kFAfR\n+e2ueF5qgIp+A4/UlVe5cKdWAQxu4BnUESLooA7cbgcLypdao9bRx9bXH8S3aNgxW\n+IdgICpc/v8wAX2yqMe191KgR9Vh1p0RCw/kEGVgWfY/IaQpsaYuq5quZbvr/fN5T\n+d++ySAMaPysaCadLUdZJLw56uk4Y+PYzR+ygjTX9dCCHedrAU8RYM55FJ/fyD3bQ\n+Hn9/n7PZyWy6u/TYt6dhlcYxaS3Opzw4eAQB8tGZJRYQ3AKpHpTEC57lXoMnUPKo\n++nBmb0+YulylMZdns0WIBJlcv6qzIaNhDMrjyi18n1ezzPIGH7ivUjoXy2FL23q5\n+f3aqJK4UUDEDkC8IeZkS+ykYxnohjFDhUyBe5gjryLqdMdy9EerehCWPf425AztX\n+c/EWPzDl46qmxWhugOlz3Fiw95VlYu0MUDRayHuZiYPplgJypChuU4EHJ+q8V2z3\n+BwjSo1bD4nfc8f68qEOtdZ1u/ClcolMwlZQYDJz/DiE4JOcd2Gx4QSF5vaInm0/4\n+mMj/ZWna4DAYFbH8IGh7xUPDqeIWhBYlgrD69ajKyay5Vu3La/d2QW20BhX35Ro2\n+ZJVR+lfioMmxn4y481H2pv+5gOlGwh02Oa8qLhZBb8W+DvFShNk6mk87eCForFFT\n+CDgmvfsC/cS2wZkcFTecq6vbjFlt+OF13NCKlcO3wCm44D+bwVPeMrU6HycCVQw7\n+SASrnP/th5sJbv11byb2lKgVdVHWk090bqnDwB9H2hGIb9JnPC9ZpaL/mocYyzTi\n+H9fcBrMYkL09FJGr3Uff7qEY4XQTMlLadXue3iKd19PRgV8cRyKp37MYI9/3iLwv\n+eYHLtMfrifZahf1ksOPeBphnlfzWo9qqfooUCaGxfSlNPUHhrHZ4aMiRyTE8Xeh2\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/CA/ca.srl b/tests/testflows/ldap/role_mapping/configs/CA/ca.srl\nnew file mode 100644\nindex 000000000000..66feb9c8a359\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/CA/ca.srl\n@@ -0,0 +1,1 @@\n+227B125D27B6B1A4B5955361365DF8EC2D7098C1\ndiff --git a/tests/testflows/ldap/role_mapping/configs/CA/dhparam.pem b/tests/testflows/ldap/role_mapping/configs/CA/dhparam.pem\nnew file mode 100644\nindex 000000000000..554d75696ee1\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/CA/dhparam.pem\n@@ -0,0 +1,8 @@\n+-----BEGIN DH PARAMETERS-----\n+MIIBCAKCAQEA1iatTn4jdw1WIu09qeLj8OEeLhzG/w2lI4RUeJT9nU+WTwegpvLN\n+/MvrIMIKHRmItyxgraYFau2moC7RKm7OKLmFt6e34QeMvM1vXpuwQav6mfp8GsYL\n+mEIw5riFcB73E32NN3g7qmfmurkTF28BohmqhuQp2et7FNoGBKQ6ePZzGHWil3yG\n+nEnCwyK0o3eP2IEytx2N50uUWVdfg3MN34L3wqpUivArrjBkoMpqm3/V3wdfoYG9\n+ZQkH0gIxT/2FIixCLGlfBsJ1qA/Apz1BJZbGqVu5M5iiQmq+LWN5JLS3xYai4wJL\n+rIY8DhjbciSNVWkwTJHzaLwIQa9a6p6mUwIBAg==\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/CA/passphrase.txt b/tests/testflows/ldap/role_mapping/configs/CA/passphrase.txt\nnew file mode 100644\nindex 000000000000..2cf58b2364c3\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/CA/passphrase.txt\n@@ -0,0 +1,1 @@\n+altinity\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/common.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse/common.xml\nnew file mode 100644\nindex 000000000000..df952b28c82d\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/common.xml\n@@ -0,0 +1,6 @@\n+<yandex>\n+    <timezone>Europe/Moscow</timezone>\n+    <listen_host replace=\"replace\">0.0.0.0</listen_host>\n+    <path>/var/lib/clickhouse/</path>\n+    <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/logs.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/logs.xml\nnew file mode 100644\nindex 000000000000..bdf1bbc11c11\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/logs.xml\n@@ -0,0 +1,17 @@\n+<yandex>\n+    <shutdown_wait_unfinished>3</shutdown_wait_unfinished>\n+    <logger>\n+        <level>trace</level>\n+        <log>/var/log/clickhouse-server/log.log</log>\n+        <errorlog>/var/log/clickhouse-server/log.err.log</errorlog>\n+        <size>1000M</size>\n+        <count>10</count>\n+        <stderr>/var/log/clickhouse-server/stderr.log</stderr>\n+        <stdout>/var/log/clickhouse-server/stdout.log</stdout>\n+    </logger>\n+    <part_log>\n+        <database>system</database>\n+        <table>part_log</table>\n+        <flush_interval_milliseconds>500</flush_interval_milliseconds>\n+    </part_log>\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/ports.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/ports.xml\nnew file mode 100644\nindex 000000000000..fbc6cea74c0c\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/ports.xml\n@@ -0,0 +1,5 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <https_port>8443</https_port>\n+    <tcp_port_secure>9440</tcp_port_secure>\n+</yandex>\n\\ No newline at end of file\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/remote.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/remote.xml\nnew file mode 100644\nindex 000000000000..51be2a6e8e3b\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/remote.xml\n@@ -0,0 +1,107 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <remote_servers>\n+        <replicated_cluster>\n+            <shard>\n+                <internal_replication>true</internal_replication>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9000</port>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9000</port>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+        </replicated_cluster>\n+        <!--\n+        <replicated_cluster_readonly>\n+            <shard>\n+                <internal_replication>true</internal_replication>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9000</port>\n+                    <user>readonly</user>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9000</port>\n+                    <user>readonly</user>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9000</port>\n+                    <user>readonly</user>\n+                </replica>\n+            </shard>\n+        </replicated_cluster_readonly>\n+        -->\n+        <replicated_cluster_secure>\n+            <shard>\n+                <internal_replication>true</internal_replication>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+        </replicated_cluster_secure>\n+        <sharded_cluster>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+        </sharded_cluster>\n+        <sharded_cluster_secure>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+        </sharded_cluster_secure>\n+    </remote_servers>\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/ssl.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/ssl.xml\nnew file mode 100644\nindex 000000000000..ca65ffd5e043\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/ssl.xml\n@@ -0,0 +1,17 @@\n+<yandex>\n+    <openSSL>\n+        <server>\n+            <certificateFile>/etc/clickhouse-server/ssl/server.crt</certificateFile>\n+            <privateKeyFile>/etc/clickhouse-server/ssl/server.key</privateKeyFile>\n+            <verificationMode>none</verificationMode>\n+            <cacheSessions>true</cacheSessions>\n+        </server>\n+        <client>\n+            <cacheSessions>true</cacheSessions>\n+            <verificationMode>none</verificationMode>\n+            <invalidCertificateHandler>\n+                <name>AcceptCertificateHandler</name>\n+            </invalidCertificateHandler>\n+        </client>\n+    </openSSL>\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/storage.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/storage.xml\nnew file mode 100644\nindex 000000000000..618fd6b6d24a\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/storage.xml\n@@ -0,0 +1,20 @@\n+<yandex>\n+\n+<storage_configuration>\n+    <disks>\n+        <default>\n+            <keep_free_space_bytes>1024</keep_free_space_bytes>\n+        </default>\n+    </disks>\n+    <policies>\n+        <default>\n+            <volumes>\n+                <default>\n+                    <disk>default</disk>\n+                </default>\n+            </volumes>\n+        </default>\n+    </policies>\n+</storage_configuration>\n+\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/zookeeper.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/zookeeper.xml\nnew file mode 100644\nindex 000000000000..96270e7b645a\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.d/zookeeper.xml\n@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <zookeeper>\n+\t    <node index=\"1\">\n+\t\t    <host>zookeeper</host>\n+\t\t    <port>2181</port>\n+\t    </node>\n+        <session_timeout_ms>15000</session_timeout_ms>\n+    </zookeeper>\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/config.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.xml\nnew file mode 100644\nindex 000000000000..e28a0c8e255b\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/config.xml\n@@ -0,0 +1,442 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  NOTE: User and query level settings are set up in \"users.xml\" file.\n+-->\n+<yandex>\n+    <logger>\n+        <!-- Possible levels: https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/Logger.h#L105 -->\n+        <level>trace</level>\n+        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\n+        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\n+        <size>1000M</size>\n+        <count>10</count>\n+        <!-- <console>1</console> --> <!-- Default behavior is autodetection (log to console if not daemon mode and is tty) -->\n+    </logger>\n+    <!--display_name>production</display_name--> <!-- It is the name that will be shown in the client -->\n+    <http_port>8123</http_port>\n+    <tcp_port>9000</tcp_port>\n+\n+    <!-- For HTTPS and SSL over native protocol. -->\n+    <!--\n+    <https_port>8443</https_port>\n+    <tcp_port_secure>9440</tcp_port_secure>\n+    -->\n+\n+    <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->\n+    <openSSL>\n+        <server> <!-- Used for https server AND secure tcp port -->\n+            <!-- openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->\n+            <certificateFile>/etc/clickhouse-server/server.crt</certificateFile>\n+            <privateKeyFile>/etc/clickhouse-server/server.key</privateKeyFile>\n+            <!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 -->\n+            <dhParamsFile>/etc/clickhouse-server/dhparam.pem</dhParamsFile>\n+            <verificationMode>none</verificationMode>\n+            <loadDefaultCAFile>true</loadDefaultCAFile>\n+            <cacheSessions>true</cacheSessions>\n+            <disableProtocols>sslv2,sslv3</disableProtocols>\n+            <preferServerCiphers>true</preferServerCiphers>\n+        </server>\n+\n+        <client> <!-- Used for connecting to https dictionary source -->\n+            <loadDefaultCAFile>true</loadDefaultCAFile>\n+            <cacheSessions>true</cacheSessions>\n+            <disableProtocols>sslv2,sslv3</disableProtocols>\n+            <preferServerCiphers>true</preferServerCiphers>\n+            <!-- Use for self-signed: <verificationMode>none</verificationMode> -->\n+            <invalidCertificateHandler>\n+                <!-- Use for self-signed: <name>AcceptCertificateHandler</name> -->\n+                <name>RejectCertificateHandler</name>\n+            </invalidCertificateHandler>\n+        </client>\n+    </openSSL>\n+\n+    <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 -->\n+    <!--\n+    <http_server_default_response><![CDATA[<html ng-app=\"SMI2\"><head><base href=\"http://ui.tabix.io/\"></head><body><div ui-view=\"\" class=\"content-ui\"></div><script src=\"http://loader.tabix.io/master.js\"></script></body></html>]]></http_server_default_response>\n+    -->\n+\n+    <!-- Port for communication between replicas. Used for data exchange. -->\n+    <interserver_http_port>9009</interserver_http_port>\n+\n+    <!-- Hostname that is used by other replicas to request this server.\n+         If not specified, than it is determined analoguous to 'hostname -f' command.\n+         This setting could be used to switch replication to another network interface.\n+      -->\n+    <!--\n+    <interserver_http_host>example.yandex.ru</interserver_http_host>\n+    -->\n+\n+    <!-- Listen specified host. use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from everywhere. -->\n+    <!-- <listen_host>::</listen_host> -->\n+    <!-- Same for hosts with disabled ipv6: -->\n+    <!-- <listen_host>0.0.0.0</listen_host> -->\n+\n+    <!-- Default values - try listen localhost on ipv4 and ipv6: -->\n+    <!--\n+    <listen_host>::1</listen_host>\n+    <listen_host>127.0.0.1</listen_host>\n+    -->\n+    <!-- Don't exit if ipv6 or ipv4 unavailable, but listen_host with this protocol specified -->\n+    <!-- <listen_try>0</listen_try> -->\n+\n+    <!-- Allow listen on same address:port -->\n+    <!-- <listen_reuse_port>0</listen_reuse_port> -->\n+\n+    <!-- <listen_backlog>64</listen_backlog> -->\n+\n+    <max_connections>4096</max_connections>\n+    <keep_alive_timeout>3</keep_alive_timeout>\n+\n+    <!-- Maximum number of concurrent queries. -->\n+    <max_concurrent_queries>100</max_concurrent_queries>\n+\n+    <!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X because getrlimit() fails to retrieve\n+         correct maximum value. -->\n+    <!-- <max_open_files>262144</max_open_files> -->\n+\n+    <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.\n+         In bytes. Cache is single for server. Memory is allocated only on demand.\n+         Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).\n+         Uncompressed cache is advantageous only for very short queries and in rare cases.\n+      -->\n+    <uncompressed_cache_size>8589934592</uncompressed_cache_size>\n+\n+    <!-- Approximate size of mark cache, used in tables of MergeTree family.\n+         In bytes. Cache is single for server. Memory is allocated only on demand.\n+         You should not lower this value.\n+      -->\n+    <mark_cache_size>5368709120</mark_cache_size>\n+\n+\n+    <!-- Path to data directory, with trailing slash. -->\n+    <path>/var/lib/clickhouse/</path>\n+\n+    <!-- Path to temporary data for processing hard queries. -->\n+    <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>\n+\n+    <!-- Directory with user provided files that are accessible by 'file' table function. -->\n+    <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>\n+\n+    <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->\n+    <user_directories>\n+        <users_xml>\n+            <!-- Path to configuration file with predefined users. -->\n+            <path>users.xml</path>\n+        </users_xml>\n+        <local_directory>\n+            <!-- Path to folder where users created by SQL commands are stored. -->\n+            <path>/var/lib/clickhouse/access/</path>\n+        </local_directory>\n+    </user_directories>\n+\n+    <!-- Default profile of settings. -->\n+    <default_profile>default</default_profile>\n+\n+    <!-- System profile of settings. This settings are used by internal processes (Buffer storage, Distibuted DDL worker and so on). -->\n+    <!-- <system_profile>default</system_profile> -->\n+\n+    <!-- Default database. -->\n+    <default_database>default</default_database>\n+\n+    <!-- Server time zone could be set here.\n+\n+         Time zone is used when converting between String and DateTime types,\n+          when printing DateTime in text formats and parsing DateTime from text,\n+          it is used in date and time related functions, if specific time zone was not passed as an argument.\n+\n+         Time zone is specified as identifier from IANA time zone database, like UTC or Africa/Abidjan.\n+         If not specified, system time zone at server startup is used.\n+\n+         Please note, that server could display time zone alias instead of specified name.\n+         Example: W-SU is an alias for Europe/Moscow and Zulu is an alias for UTC.\n+    -->\n+    <!-- <timezone>Europe/Moscow</timezone> -->\n+\n+    <!-- You can specify umask here (see \"man umask\"). Server will apply it on startup.\n+         Number is always parsed as octal. Default umask is 027 (other users cannot read logs, data files, etc; group can only read).\n+    -->\n+    <!-- <umask>022</umask> -->\n+\n+    <!-- Perform mlockall after startup to lower first queries latency\n+          and to prevent clickhouse executable from being paged out under high IO load.\n+         Enabling this option is recommended but will lead to increased startup time for up to a few seconds.\n+    -->\n+    <mlock_executable>false</mlock_executable>\n+\n+    <!-- Configuration of clusters that could be used in Distributed tables.\n+         https://clickhouse.yandex/docs/en/table_engines/distributed/\n+      -->\n+    <remote_servers incl=\"remote\" >\n+        <!-- Test only shard config for testing distributed storage -->\n+        <test_shard_localhost>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+        </test_shard_localhost>\n+        <test_cluster_two_shards_localhost>\n+             <shard>\n+                 <replica>\n+                     <host>localhost</host>\n+                     <port>9000</port>\n+                 </replica>\n+             </shard>\n+             <shard>\n+                 <replica>\n+                     <host>localhost</host>\n+                     <port>9000</port>\n+                 </replica>\n+             </shard>\n+         </test_cluster_two_shards_localhost>\n+        <test_shard_localhost_secure>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+        </test_shard_localhost_secure>\n+        <test_unavailable_shard>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>1</port>\n+                </replica>\n+            </shard>\n+        </test_unavailable_shard>\n+    </remote_servers>\n+\n+\n+    <!-- If element has 'incl' attribute, then for it's value will be used corresponding substitution from another file.\n+         By default, path to file with substitutions is /etc/metrika.xml. It could be changed in config in 'include_from' element.\n+         Values for substitutions are specified in /yandex/name_of_substitution elements in that file.\n+      -->\n+\n+    <!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.\n+         Optional. If you don't use replicated tables, you could omit that.\n+\n+         See https://clickhouse.yandex/docs/en/table_engines/replication/\n+      -->\n+    <zookeeper incl=\"zookeeper\" optional=\"true\" />\n+\n+    <!-- Substitutions for parameters of replicated tables.\n+          Optional. If you don't use replicated tables, you could omit that.\n+\n+         See https://clickhouse.yandex/docs/en/table_engines/replication/#creating-replicated-tables\n+      -->\n+    <macros incl=\"macros\" optional=\"true\" />\n+\n+\n+    <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. -->\n+    <builtin_dictionaries_reload_interval>3600</builtin_dictionaries_reload_interval>\n+\n+\n+    <!-- Maximum session timeout, in seconds. Default: 3600. -->\n+    <max_session_timeout>3600</max_session_timeout>\n+\n+    <!-- Default session timeout, in seconds. Default: 60. -->\n+    <default_session_timeout>60</default_session_timeout>\n+\n+    <!-- Sending data to Graphite for monitoring. Several sections can be defined. -->\n+    <!--\n+        interval - send every X second\n+        root_path - prefix for keys\n+        hostname_in_path - append hostname to root_path (default = true)\n+        metrics - send data from table system.metrics\n+        events - send data from table system.events\n+        asynchronous_metrics - send data from table system.asynchronous_metrics\n+    -->\n+    <!--\n+    <graphite>\n+        <host>localhost</host>\n+        <port>42000</port>\n+        <timeout>0.1</timeout>\n+        <interval>60</interval>\n+        <root_path>one_min</root_path>\n+        <hostname_in_path>true</hostname_in_path>\n+\n+        <metrics>true</metrics>\n+        <events>true</events>\n+        <asynchronous_metrics>true</asynchronous_metrics>\n+    </graphite>\n+    <graphite>\n+        <host>localhost</host>\n+        <port>42000</port>\n+        <timeout>0.1</timeout>\n+        <interval>1</interval>\n+        <root_path>one_sec</root_path>\n+\n+        <metrics>true</metrics>\n+        <events>true</events>\n+        <asynchronous_metrics>false</asynchronous_metrics>\n+    </graphite>\n+    -->\n+\n+\n+    <!-- Query log. Used only for queries with setting log_queries = 1. -->\n+    <query_log>\n+        <!-- What table to insert data. If table is not exist, it will be created.\n+             When query log structure is changed after system update,\n+              then old table will be renamed and new table will be created automatically.\n+        -->\n+        <database>system</database>\n+        <table>query_log</table>\n+        <!--\n+            PARTITION BY expr https://clickhouse.yandex/docs/en/table_engines/custom_partitioning_key/\n+            Example:\n+                event_date\n+                toMonday(event_date)\n+                toYYYYMM(event_date)\n+                toStartOfHour(event_time)\n+        -->\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <!-- Interval of flushing data. -->\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </query_log>\n+\n+    <!-- Trace log. Stores stack traces collected by query profilers.\n+         See query_profiler_real_time_period_ns and query_profiler_cpu_time_period_ns settings. -->\n+    <trace_log>\n+        <database>system</database>\n+        <table>trace_log</table>\n+\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </trace_log>\n+\n+    <!-- Query thread log. Has information about all threads participated in query execution.\n+         Used only for queries with setting log_query_threads = 1. -->\n+    <query_thread_log>\n+        <database>system</database>\n+        <table>query_thread_log</table>\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </query_thread_log>\n+\n+    <!-- Uncomment if use part log.\n+         Part log contains information about all actions with parts in MergeTree tables (creation, deletion, merges, downloads).\n+    <part_log>\n+        <database>system</database>\n+        <table>part_log</table>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </part_log>\n+    -->\n+\n+    <!-- Uncomment to write text log into table.\n+         Text log contains all information from usual server log but stores it in structured and efficient way.\n+    <text_log>\n+        <database>system</database>\n+        <table>text_log</table>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </text_log>\n+    -->\n+\n+    <!-- Parameters for embedded dictionaries, used in Yandex.Metrica.\n+         See https://clickhouse.yandex/docs/en/dicts/internal_dicts/\n+    -->\n+\n+    <!-- Path to file with region hierarchy. -->\n+    <!-- <path_to_regions_hierarchy_file>/opt/geo/regions_hierarchy.txt</path_to_regions_hierarchy_file> -->\n+\n+    <!-- Path to directory with files containing names of regions -->\n+    <!-- <path_to_regions_names_files>/opt/geo/</path_to_regions_names_files> -->\n+\n+\n+    <!-- Configuration of external dictionaries. See:\n+         https://clickhouse.yandex/docs/en/dicts/external_dicts/\n+    -->\n+    <dictionaries_config>*_dictionary.xml</dictionaries_config>\n+\n+    <!-- Uncomment if you want data to be compressed 30-100% better.\n+         Don't do that if you just started using ClickHouse.\n+      -->\n+    <compression incl=\"compression\">\n+    <!--\n+        <!- - Set of variants. Checked in order. Last matching case wins. If nothing matches, lz4 will be used. - ->\n+        <case>\n+\n+            <!- - Conditions. All must be satisfied. Some conditions may be omitted. - ->\n+            <min_part_size>10000000000</min_part_size>        <!- - Min part size in bytes. - ->\n+            <min_part_size_ratio>0.01</min_part_size_ratio>   <!- - Min size of part relative to whole table size. - ->\n+\n+            <!- - What compression method to use. - ->\n+            <method>zstd</method>\n+        </case>\n+    -->\n+    </compression>\n+\n+    <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.\n+         Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->\n+    <distributed_ddl>\n+        <!-- Path in ZooKeeper to queue with DDL queries -->\n+        <path>/clickhouse/task_queue/ddl</path>\n+\n+        <!-- Settings from this profile will be used to execute DDL queries -->\n+        <!-- <profile>default</profile> -->\n+    </distributed_ddl>\n+\n+    <!-- Settings to fine tune MergeTree tables. See documentation in source code, in MergeTreeSettings.h -->\n+    <!--\n+    <merge_tree>\n+        <max_suspicious_broken_parts>5</max_suspicious_broken_parts>\n+    </merge_tree>\n+    -->\n+\n+    <!-- Protection from accidental DROP.\n+         If size of a MergeTree table is greater than max_table_size_to_drop (in bytes) than table could not be dropped with any DROP query.\n+         If you want do delete one table and don't want to restart clickhouse-server, you could create special file <clickhouse-path>/flags/force_drop_table and make DROP once.\n+         By default max_table_size_to_drop is 50GB; max_table_size_to_drop=0 allows to DROP any tables.\n+         The same for max_partition_size_to_drop.\n+         Uncomment to disable protection.\n+    -->\n+    <!-- <max_table_size_to_drop>0</max_table_size_to_drop> -->\n+    <!-- <max_partition_size_to_drop>0</max_partition_size_to_drop> -->\n+\n+    <!-- Example of parameters for GraphiteMergeTree table engine -->\n+    <graphite_rollup_example>\n+        <pattern>\n+            <regexp>click_cost</regexp>\n+            <function>any</function>\n+            <retention>\n+                <age>0</age>\n+                <precision>3600</precision>\n+            </retention>\n+            <retention>\n+                <age>86400</age>\n+                <precision>60</precision>\n+            </retention>\n+        </pattern>\n+        <default>\n+            <function>max</function>\n+            <retention>\n+                <age>0</age>\n+                <precision>60</precision>\n+            </retention>\n+            <retention>\n+                <age>3600</age>\n+                <precision>300</precision>\n+            </retention>\n+            <retention>\n+                <age>86400</age>\n+                <precision>3600</precision>\n+            </retention>\n+        </default>\n+    </graphite_rollup_example>\n+\n+    <!-- Directory in <clickhouse-path> containing schema files for various input formats.\n+         The directory will be created if it doesn't exist.\n+      -->\n+    <format_schema_path>/var/lib/clickhouse/format_schemas/</format_schema_path>\n+\n+    <!-- Uncomment to disable ClickHouse internal DNS caching. -->\n+    <!-- <disable_internal_dns_cache>1</disable_internal_dns_cache> -->\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/ssl/dhparam.pem b/tests/testflows/ldap/role_mapping/configs/clickhouse/ssl/dhparam.pem\nnew file mode 100644\nindex 000000000000..2e6cee0798d7\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/ssl/dhparam.pem\n@@ -0,0 +1,8 @@\n+-----BEGIN DH PARAMETERS-----\n+MIIBCAKCAQEAua92DDli13gJ+//ZXyGaggjIuidqB0crXfhUlsrBk9BV1hH3i7fR\n+XGP9rUdk2ubnB3k2ejBStL5oBrkHm9SzUFSQHqfDjLZjKoUpOEmuDc4cHvX1XTR5\n+Pr1vf5cd0yEncJWG5W4zyUB8k++SUdL2qaeslSs+f491HBLDYn/h8zCgRbBvxhxb\n+9qeho1xcbnWeqkN6Kc9bgGozA16P9NLuuLttNnOblkH+lMBf42BSne/TWt3AlGZf\n+slKmmZcySUhF8aKfJnLKbkBCFqOtFRh8zBA9a7g+BT/lSANATCDPaAk1YVih2EKb\n+dpc3briTDbRsiqg2JKMI7+VdULY9bh3EawIBAg==\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/ssl/server.crt b/tests/testflows/ldap/role_mapping/configs/clickhouse/ssl/server.crt\nnew file mode 100644\nindex 000000000000..7ade2d962733\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/ssl/server.crt\n@@ -0,0 +1,19 @@\n+-----BEGIN CERTIFICATE-----\n+MIIC/TCCAeWgAwIBAgIJANjx1QSR77HBMA0GCSqGSIb3DQEBCwUAMBQxEjAQBgNV\n+BAMMCWxvY2FsaG9zdDAgFw0xODA3MzAxODE2MDhaGA8yMjkyMDUxNDE4MTYwOFow\n+FDESMBAGA1UEAwwJbG9jYWxob3N0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\n+CgKCAQEAs9uSo6lJG8o8pw0fbVGVu0tPOljSWcVSXH9uiJBwlZLQnhN4SFSFohfI\n+4K8U1tBDTnxPLUo/V1K9yzoLiRDGMkwVj6+4+hE2udS2ePTQv5oaMeJ9wrs+5c9T\n+4pOtlq3pLAdm04ZMB1nbrEysceVudHRkQbGHzHp6VG29Fw7Ga6YpqyHQihRmEkTU\n+7UCYNA+Vk7aDPdMS/khweyTpXYZimaK9f0ECU3/VOeG3fH6Sp2X6FN4tUj/aFXEj\n+sRmU5G2TlYiSIUMF2JPdhSihfk1hJVALrHPTU38SOL+GyyBRWdNcrIwVwbpvsvPg\n+pryMSNxnpr0AK0dFhjwnupIv5hJIOQIDAQABo1AwTjAdBgNVHQ4EFgQUjPLb3uYC\n+kcamyZHK4/EV8jAP0wQwHwYDVR0jBBgwFoAUjPLb3uYCkcamyZHK4/EV8jAP0wQw\n+DAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAM/ocuDvfPus/KpMVD51j\n+4IdlU8R0vmnYLQ+ygzOAo7+hUWP5j0yvq4ILWNmQX6HNvUggCgFv9bjwDFhb/5Vr\n+85ieWfTd9+LTjrOzTw4avdGwpX9G+6jJJSSq15tw5ElOIFb/qNA9O4dBiu8vn03C\n+L/zRSXrARhSqTW5w/tZkUcSTT+M5h28+Lgn9ysx4Ff5vi44LJ1NnrbJbEAIYsAAD\n++UA+4MBFKx1r6hHINULev8+lCfkpwIaeS8RL+op4fr6kQPxnULw8wT8gkuc8I4+L\n+P9gg/xDHB44T3ADGZ5Ib6O0DJaNiToO6rnoaaxs0KkotbvDWvRoxEytSbXKoYjYp\n+0g==\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/ssl/server.key b/tests/testflows/ldap/role_mapping/configs/clickhouse/ssl/server.key\nnew file mode 100644\nindex 000000000000..f0fb61ac443f\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/ssl/server.key\n@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----\n+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCz25KjqUkbyjyn\n+DR9tUZW7S086WNJZxVJcf26IkHCVktCeE3hIVIWiF8jgrxTW0ENOfE8tSj9XUr3L\n+OguJEMYyTBWPr7j6ETa51LZ49NC/mhox4n3Cuz7lz1Pik62WreksB2bThkwHWdus\n+TKxx5W50dGRBsYfMenpUbb0XDsZrpimrIdCKFGYSRNTtQJg0D5WTtoM90xL+SHB7\n+JOldhmKZor1/QQJTf9U54bd8fpKnZfoU3i1SP9oVcSOxGZTkbZOViJIhQwXYk92F\n+KKF+TWElUAusc9NTfxI4v4bLIFFZ01ysjBXBum+y8+CmvIxI3GemvQArR0WGPCe6\n+ki/mEkg5AgMBAAECggEATrbIBIxwDJOD2/BoUqWkDCY3dGevF8697vFuZKIiQ7PP\n+TX9j4vPq0DfsmDjHvAPFkTHiTQXzlroFik3LAp+uvhCCVzImmHq0IrwvZ9xtB43f\n+7Pkc5P6h1l3Ybo8HJ6zRIY3TuLtLxuPSuiOMTQSGRL0zq3SQ5DKuGwkz+kVjHXUN\n+MR2TECFwMHKQ5VLrC+7PMpsJYyOMlDAWhRfUalxC55xOXTpaN8TxNnwQ8K2ISVY5\n+212Jz/a4hn4LdwxSz3Tiu95PN072K87HLWx3EdT6vW4Ge5P/A3y+smIuNAlanMnu\n+plHBRtpATLiTxZt/n6npyrfQVbYjSH7KWhB8hBHtaQKBgQDh9Cq1c/KtqDtE0Ccr\n+/r9tZNTUwBE6VP+3OJeKdEdtsfuxjOCkS1oAjgBJiSDOiWPh1DdoDeVZjPKq6pIu\n+Mq12OE3Doa8znfCXGbkSzEKOb2unKZMJxzrz99kXt40W5DtrqKPNb24CNqTiY8Aa\n+CjtcX+3weat82VRXvph6U8ltMwKBgQDLxjiQQzNoY7qvg7CwJCjf9qq8jmLK766g\n+1FHXopqS+dTxDLM8eJSRrpmxGWJvNeNc1uPhsKsKgotqAMdBUQTf7rSTbt4MyoH5\n+bUcRLtr+0QTK9hDWMOOvleqNXha68vATkohWYfCueNsC60qD44o8RZAS6UNy3ENq\n+cM1cxqe84wKBgQDKkHutWnooJtajlTxY27O/nZKT/HA1bDgniMuKaz4R4Gr1PIez\n+on3YW3V0d0P7BP6PWRIm7bY79vkiMtLEKdiKUGWeyZdo3eHvhDb/3DCawtau8L2K\n+GZsHVp2//mS1Lfz7Qh8/L/NedqCQ+L4iWiPnZ3THjjwn3CoZ05ucpvrAMwKBgB54\n+nay039MUVq44Owub3KDg+dcIU62U+cAC/9oG7qZbxYPmKkc4oL7IJSNecGHA5SbU\n+2268RFdl/gLz6tfRjbEOuOHzCjFPdvAdbysanpTMHLNc6FefJ+zxtgk9sJh0C4Jh\n+vxFrw9nTKKzfEl12gQ1SOaEaUIO0fEBGbe8ZpauRAoGAMAlGV+2/K4ebvAJKOVTa\n+dKAzQ+TD2SJmeR1HZmKDYddNqwtZlzg3v4ZhCk4eaUmGeC1Bdh8MDuB3QQvXz4Dr\n+vOIP4UVaOr+uM+7TgAgVnP4/K6IeJGzUDhX93pmpWhODfdu/oojEKVcpCojmEmS1\n+KCBtmIrQLqzMpnBpLNuSY+Q=\n+-----END PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse/users.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse/users.xml\nnew file mode 100644\nindex 000000000000..86b2cd9e1e3d\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse/users.xml\n@@ -0,0 +1,133 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <!-- Profiles of settings. -->\n+    <profiles>\n+        <!-- Default settings. -->\n+        <default>\n+            <!-- Maximum memory usage for processing single query, in bytes. -->\n+            <max_memory_usage>10000000000</max_memory_usage>\n+\n+            <!-- Use cache of uncompressed blocks of data. Meaningful only for processing many of very short queries. -->\n+            <use_uncompressed_cache>0</use_uncompressed_cache>\n+\n+            <!-- How to choose between replicas during distributed query processing.\n+                 random - choose random replica from set of replicas with minimum number of errors\n+                 nearest_hostname - from set of replicas with minimum number of errors, choose replica\n+                  with minimum number of different symbols between replica's hostname and local hostname\n+                  (Hamming distance).\n+                 in_order - first live replica is chosen in specified order.\n+                 first_or_random - if first replica one has higher number of errors, pick a random one from replicas with minimum number of errors.\n+            -->\n+            <load_balancing>random</load_balancing>\n+        </default>\n+\n+        <!-- Profile that allows only read queries. -->\n+        <readonly>\n+            <readonly>1</readonly>\n+        </readonly>\n+    </profiles>\n+\n+    <!-- Users and ACL. -->\n+    <users>\n+        <!-- If user name was not specified, 'default' user is used. -->\n+        <default>\n+            <!-- Password could be specified in plaintext or in SHA256 (in hex format).\n+\n+                 If you want to specify password in plaintext (not recommended), place it in 'password' element.\n+                 Example: <password>qwerty</password>.\n+                 Password could be empty.\n+\n+                 If you want to specify SHA256, place it in 'password_sha256_hex' element.\n+                 Example: <password_sha256_hex>65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5</password_sha256_hex>\n+                 Restrictions of SHA256: impossibility to connect to ClickHouse using MySQL JS client (as of July 2019).\n+\n+                 If you want to specify double SHA1, place it in 'password_double_sha1_hex' element.\n+                 Example: <password_double_sha1_hex>e395796d6546b1b65db9d665cd43f0e858dd4303</password_double_sha1_hex>\n+\n+                 How to generate decent password:\n+                 Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" | sha256sum | tr -d '-'\n+                 In first line will be password and in second - corresponding SHA256.\n+\n+                 How to generate double SHA1:\n+                 Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" | openssl dgst -sha1 -binary | openssl dgst -sha1\n+                 In first line will be password and in second - corresponding double SHA1.\n+            -->\n+            <password></password>\n+\n+            <!-- List of networks with open access.\n+\n+                 To open access from everywhere, specify:\n+                    <ip>::/0</ip>\n+\n+                 To open access only from localhost, specify:\n+                    <ip>::1</ip>\n+                    <ip>127.0.0.1</ip>\n+\n+                 Each element of list has one of the following forms:\n+                 <ip> IP-address or network mask. Examples: 213.180.204.3 or 10.0.0.1/8 or 10.0.0.1/255.255.255.0\n+                     2a02:6b8::3 or 2a02:6b8::3/64 or 2a02:6b8::3/ffff:ffff:ffff:ffff::.\n+                 <host> Hostname. Example: server01.yandex.ru.\n+                     To check access, DNS query is performed, and all received addresses compared to peer address.\n+                 <host_regexp> Regular expression for host names. Example, ^server\\d\\d-\\d\\d-\\d\\.yandex\\.ru$\n+                     To check access, DNS PTR query is performed for peer address and then regexp is applied.\n+                     Then, for result of PTR query, another DNS query is performed and all received addresses compared to peer address.\n+                     Strongly recommended that regexp is ends with $\n+                 All results of DNS requests are cached till server restart.\n+            -->\n+            <networks incl=\"networks\" replace=\"replace\">\n+                <ip>::/0</ip>\n+            </networks>\n+\n+            <!-- Settings profile for user. -->\n+            <profile>default</profile>\n+\n+            <!-- Quota for user. -->\n+            <quota>default</quota>\n+\n+            <!-- Allow access management -->\n+            <access_management>1</access_management>\n+\n+            <!-- Example of row level security policy. -->\n+            <!-- <databases>\n+                <test>\n+                    <filtered_table1>\n+                        <filter>a = 1</filter>\n+                    </filtered_table1>\n+                    <filtered_table2>\n+                        <filter>a + b &lt; 1 or c - d &gt; 5</filter>\n+                    </filtered_table2>\n+                </test>\n+            </databases> -->\n+        </default>\n+\n+        <!-- Example of user with readonly access. -->\n+        <!-- <readonly>\n+            <password></password>\n+            <networks incl=\"networks\" replace=\"replace\">\n+                <ip>::1</ip>\n+                <ip>127.0.0.1</ip>\n+            </networks>\n+            <profile>readonly</profile>\n+            <quota>default</quota>\n+        </readonly> -->\n+    </users>\n+\n+    <!-- Quotas. -->\n+    <quotas>\n+        <!-- Name of quota. -->\n+        <default>\n+            <!-- Limits for time interval. You could specify many intervals with different limits. -->\n+            <interval>\n+                <!-- Length of interval. -->\n+                <duration>3600</duration>\n+\n+                <!-- No limits. Just calculate resource usage for time interval. -->\n+                <queries>0</queries>\n+                <errors>0</errors>\n+                <result_rows>0</result_rows>\n+                <read_rows>0</read_rows>\n+                <execution_time>0</execution_time>\n+            </interval>\n+        </default>\n+    </quotas>\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse1/config.d/macros.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse1/config.d/macros.xml\nnew file mode 100644\nindex 000000000000..6cdcc1b440c3\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse1/config.d/macros.xml\n@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <macros>\n+        <replica>clickhouse1</replica>\n+        <shard>01</shard>\n+        <shard2>01</shard2>\n+    </macros>\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse2/config.d/macros.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse2/config.d/macros.xml\nnew file mode 100644\nindex 000000000000..a114a9ce4ab1\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse2/config.d/macros.xml\n@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <macros>\n+        <replica>clickhouse2</replica>\n+        <shard>01</shard>\n+        <shard2>02</shard2>\n+    </macros>\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/clickhouse3/config.d/macros.xml b/tests/testflows/ldap/role_mapping/configs/clickhouse3/config.d/macros.xml\nnew file mode 100644\nindex 000000000000..904a27b01723\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/clickhouse3/config.d/macros.xml\n@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <macros>\n+        <replica>clickhouse3</replica>\n+        <shard>01</shard>\n+        <shard2>03</shard2>\n+    </macros>\n+</yandex>\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap1/config/export.ldif b/tests/testflows/ldap/role_mapping/configs/ldap1/config/export.ldif\nnew file mode 100644\nindex 000000000000..621dd32ca0c0\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap1/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user1,ou=users,dc=company,dc=com\n+dn: cn=user1,ou=users,dc=company,dc=com\n+cn: user1\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user1\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user1\n+uidnumber: 1101\n+userpassword: user1\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ca.crt b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap2/certs/dhparam.pem b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/dhparam.pem\nnew file mode 100644\nindex 000000000000..0a96faffd627\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/dhparam.pem\n@@ -0,0 +1,5 @@\n+-----BEGIN DH PARAMETERS-----\n+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV\n+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2\n+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ldap.crt b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ldap.crt\nnew file mode 100644\nindex 000000000000..9167cbf861d0\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ldap.crt\n@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox\n+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD\n+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw\n+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE\n+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV\n+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG\n+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr\n+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO\n+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2\n+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e\n+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD\n+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS\n+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK\n+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi\n+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D\n+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR\n+CX4zWGFNJu/ieSGVWLYKQzbYxp8=\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ldap.csr b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ldap.csr\nnew file mode 100644\nindex 000000000000..bf569f727d63\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ldap.csr\n@@ -0,0 +1,17 @@\n+-----BEGIN CERTIFICATE REQUEST-----\n+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH\n+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE\n+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5\n+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab\n+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z\n+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h\n+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK\n+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD\n+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7\n+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3\n+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/\n+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ\n+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC\n+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG\n+RyLyqu3IVOI=\n+-----END CERTIFICATE REQUEST-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ldap.key b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ldap.key\nnew file mode 100644\nindex 000000000000..5ab3a3f8b590\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap2/certs/ldap.key\n@@ -0,0 +1,27 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF\n+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M\n+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k\n+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr\n+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9\n+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX\n+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy\n+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI\n+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn\n+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7\n+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn\n+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr\n+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9\n+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na\n+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR\n+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v\n+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb\n+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr\n+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt\n+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+\n+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB\n+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y\n+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U\n+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O\n+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap2/config/export.ldif b/tests/testflows/ldap/role_mapping/configs/ldap2/config/export.ldif\nnew file mode 100644\nindex 000000000000..6766aaae6f10\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap2/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user2,ou=users,dc=company,dc=com\n+dn: cn=user2,ou=users,dc=company,dc=com\n+cn: user2\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user2\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user2\n+uidnumber: 1002\n+userpassword: user2\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ca.crt b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap3/certs/dhparam.pem b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/dhparam.pem\nnew file mode 100644\nindex 000000000000..0a96faffd627\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/dhparam.pem\n@@ -0,0 +1,5 @@\n+-----BEGIN DH PARAMETERS-----\n+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV\n+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2\n+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ldap.crt b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ldap.crt\nnew file mode 100644\nindex 000000000000..9167cbf861d0\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ldap.crt\n@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox\n+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD\n+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw\n+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE\n+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV\n+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG\n+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr\n+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO\n+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2\n+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e\n+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD\n+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS\n+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK\n+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi\n+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D\n+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR\n+CX4zWGFNJu/ieSGVWLYKQzbYxp8=\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ldap.csr b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ldap.csr\nnew file mode 100644\nindex 000000000000..bf569f727d63\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ldap.csr\n@@ -0,0 +1,17 @@\n+-----BEGIN CERTIFICATE REQUEST-----\n+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH\n+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE\n+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5\n+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab\n+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z\n+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h\n+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK\n+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD\n+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7\n+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3\n+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/\n+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ\n+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC\n+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG\n+RyLyqu3IVOI=\n+-----END CERTIFICATE REQUEST-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ldap.key b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ldap.key\nnew file mode 100644\nindex 000000000000..5ab3a3f8b590\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap3/certs/ldap.key\n@@ -0,0 +1,27 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF\n+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M\n+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k\n+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr\n+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9\n+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX\n+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy\n+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI\n+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn\n+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7\n+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn\n+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr\n+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9\n+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na\n+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR\n+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v\n+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb\n+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr\n+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt\n+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+\n+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB\n+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y\n+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U\n+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O\n+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap3/config/export.ldif b/tests/testflows/ldap/role_mapping/configs/ldap3/config/export.ldif\nnew file mode 100644\nindex 000000000000..6ac9a995efd0\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap3/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user3,ou=users,dc=company,dc=com\n+dn: cn=user3,ou=users,dc=company,dc=com\n+cn: user3\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user3\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user3\n+uidnumber: 1003\n+userpassword: user3\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ca.crt b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap4/certs/dhparam.pem b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/dhparam.pem\nnew file mode 100644\nindex 000000000000..0a96faffd627\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/dhparam.pem\n@@ -0,0 +1,5 @@\n+-----BEGIN DH PARAMETERS-----\n+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV\n+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2\n+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ldap.crt b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ldap.crt\nnew file mode 100644\nindex 000000000000..9167cbf861d0\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ldap.crt\n@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox\n+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD\n+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw\n+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE\n+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV\n+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG\n+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr\n+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO\n+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2\n+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e\n+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD\n+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS\n+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK\n+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi\n+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D\n+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR\n+CX4zWGFNJu/ieSGVWLYKQzbYxp8=\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ldap.csr b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ldap.csr\nnew file mode 100644\nindex 000000000000..bf569f727d63\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ldap.csr\n@@ -0,0 +1,17 @@\n+-----BEGIN CERTIFICATE REQUEST-----\n+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH\n+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE\n+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5\n+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab\n+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z\n+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h\n+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK\n+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD\n+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7\n+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3\n+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/\n+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ\n+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC\n+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG\n+RyLyqu3IVOI=\n+-----END CERTIFICATE REQUEST-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ldap.key b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ldap.key\nnew file mode 100644\nindex 000000000000..5ab3a3f8b590\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap4/certs/ldap.key\n@@ -0,0 +1,27 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF\n+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M\n+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k\n+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr\n+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9\n+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX\n+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy\n+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI\n+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn\n+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7\n+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn\n+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr\n+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9\n+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na\n+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR\n+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v\n+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb\n+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr\n+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt\n+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+\n+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB\n+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y\n+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U\n+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O\n+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap4/config/export.ldif b/tests/testflows/ldap/role_mapping/configs/ldap4/config/export.ldif\nnew file mode 100644\nindex 000000000000..36afdb4e350e\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap4/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user4,ou=users,dc=company,dc=com\n+dn: cn=user4,ou=users,dc=company,dc=com\n+cn: user4\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user4\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user4\n+uidnumber: 1004\n+userpassword: user4\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap5/config/export.ldif b/tests/testflows/ldap/role_mapping/configs/ldap5/config/export.ldif\nnew file mode 100644\nindex 000000000000..bc3d2ff75fc7\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap5/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user5,ou=users,dc=company,dc=com\n+dn: cn=user5,ou=users,dc=company,dc=com\n+cn: user5\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user5\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user5\n+uidnumber: 1005\n+userpassword: user5\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ca.crt b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/dhparam.pem b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/dhparam.pem\nnew file mode 100644\nindex 000000000000..0a96faffd627\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/dhparam.pem\n@@ -0,0 +1,5 @@\n+-----BEGIN DH PARAMETERS-----\n+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV\n+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2\n+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ldap.crt b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ldap.crt\nnew file mode 100644\nindex 000000000000..9167cbf861d0\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ldap.crt\n@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox\n+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD\n+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw\n+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE\n+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV\n+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG\n+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr\n+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO\n+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2\n+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e\n+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD\n+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS\n+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK\n+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi\n+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D\n+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR\n+CX4zWGFNJu/ieSGVWLYKQzbYxp8=\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ldap.csr b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ldap.csr\nnew file mode 100644\nindex 000000000000..bf569f727d63\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ldap.csr\n@@ -0,0 +1,17 @@\n+-----BEGIN CERTIFICATE REQUEST-----\n+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH\n+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE\n+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5\n+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab\n+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z\n+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h\n+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK\n+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD\n+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7\n+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3\n+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/\n+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ\n+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC\n+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG\n+RyLyqu3IVOI=\n+-----END CERTIFICATE REQUEST-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ldap.key b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ldap.key\nnew file mode 100644\nindex 000000000000..5ab3a3f8b590\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/certs/ldap.key\n@@ -0,0 +1,27 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF\n+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M\n+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k\n+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr\n+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9\n+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX\n+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy\n+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI\n+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn\n+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7\n+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn\n+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr\n+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9\n+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na\n+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR\n+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v\n+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb\n+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr\n+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt\n+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+\n+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB\n+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y\n+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U\n+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O\n+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/config/export.ldif b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/config/export.ldif\nnew file mode 100644\nindex 000000000000..c6470176a5e7\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/configs/ldap5/ldap2/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user1,ou=users,dc=company,dc=com\n+dn: cn=user1,ou=users,dc=company,dc=com\n+cn: user1\n+gidnumber: 501\n+givenname: John1\n+homedirectory: /home/users/user1\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User1\n+uid: user1\n+uidnumber: 1001\n+userpassword: user1\ndiff --git a/tests/testflows/ldap/role_mapping/docker-compose/clickhouse-service.yml b/tests/testflows/ldap/role_mapping/docker-compose/clickhouse-service.yml\nnew file mode 100644\nindex 000000000000..0789decf022f\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/docker-compose/clickhouse-service.yml\n@@ -0,0 +1,28 @@\n+version: '2.3'\n+\n+services:\n+  clickhouse:\n+    image: yandex/clickhouse-integration-test\n+    expose:\n+      - \"9000\"\n+      - \"9009\"\n+      - \"8123\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/config.d:/etc/clickhouse-server/config.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/users.d/:/etc/clickhouse-server/users.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/ssl:/etc/clickhouse-server/ssl\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/config.xml:/etc/clickhouse-server/config.xml\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/users.xml:/etc/clickhouse-server/users.xml\"\n+      - \"${CLICKHOUSE_TESTS_SERVER_BIN_PATH:-/usr/bin/clickhouse}:/usr/bin/clickhouse\"\n+      - \"${CLICKHOUSE_TESTS_ODBC_BRIDGE_BIN_PATH:-/usr/bin/clickhouse-odbc-bridge}:/usr/bin/clickhouse-odbc-bridge\"\n+    entrypoint: bash -c \"clickhouse server --config-file=/etc/clickhouse-server/config.xml --log-file=/var/log/clickhouse-server/clickhouse-server.log --errorlog-file=/var/log/clickhouse-server/clickhouse-server.err.log\"\n+    healthcheck:\n+      test: clickhouse client --query='select 1'\n+      interval: 10s\n+      timeout: 10s\n+      retries: 10\n+      start_period: 300s\n+    cap_add:\n+      - SYS_PTRACE\n+    security_opt:\n+      - label:disable\ndiff --git a/tests/testflows/ldap/role_mapping/docker-compose/docker-compose.yml b/tests/testflows/ldap/role_mapping/docker-compose/docker-compose.yml\nnew file mode 100644\nindex 000000000000..c8ff683df587\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/docker-compose/docker-compose.yml\n@@ -0,0 +1,162 @@\n+version: '2.3'\n+\n+services:\n+  openldap1:\n+    # plain text\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap1/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+\n+  openldap2:\n+    # TLS - never\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    environment:\n+      LDAP_TLS: \"true\"\n+      LDAP_TLS_CRT_FILENAME: \"ldap.crt\"\n+      LDAP_TLS_KEY_FILENAME: \"ldap.key\"\n+      LDAP_TLS_DH_PARAM_FILENAME: \"dhparam.pem\"\n+      LDAP_TLS_CA_CRT_FILENAME: \"ca.crt\"\n+      LDAP_TLS_ENFORCE: \"false\"\n+      LDAP_TLS_VERIFY_CLIENT: \"never\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap2/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap2/certs:/container/service/slapd/assets/certs/\"\n+\n+  openldap3:\n+    # plain text - custom port\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    expose:\n+      - \"3089\"\n+    environment:\n+      LDAP_PORT: \"3089\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap3/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+\n+  openldap4:\n+    # TLS - never custom port\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    expose:\n+      - \"3089\"\n+      - \"6036\"\n+    environment:\n+      LDAP_PORT: \"3089\"\n+      LDAPS_PORT: \"6036\"\n+      LDAP_TLS: \"true\"\n+      LDAP_TLS_CRT_FILENAME: \"ldap.crt\"\n+      LDAP_TLS_KEY_FILENAME: \"ldap.key\"\n+      LDAP_TLS_DH_PARAM_FILENAME: \"dhparam.pem\"\n+      LDAP_TLS_CA_CRT_FILENAME: \"ca.crt\"\n+      LDAP_TLS_ENFORCE: \"false\"\n+      LDAP_TLS_VERIFY_CLIENT: \"never\"\n+      LDAP_TLS_CIPHER_SUITE: \"SECURE256:+SECURE128:-VERS-TLS-ALL:+VERS-TLS1.2:-RSA:-DHE-DSS:-CAMELLIA-128-CBC:-CAMELLIA-256-CBC\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap4/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap4/certs:/container/service/slapd/assets/certs/\"\n+\n+  openldap5:\n+    # TLS - try\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    environment:\n+      LDAP_TLS: \"true\"\n+      LDAP_TLS_CRT_FILENAME: \"ldap.crt\"\n+      LDAP_TLS_KEY_FILENAME: \"ldap.key\"\n+      LDAP_TLS_DH_PARAM_FILENAME: \"dhparam.pem\"\n+      LDAP_TLS_CA_CRT_FILENAME: \"ca.crt\"\n+      LDAP_TLS_ENFORCE: \"false\"\n+      LDAP_TLS_VERIFY_CLIENT: \"try\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap5/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap5/certs:/container/service/slapd/assets/certs/\"\n+\n+  phpldapadmin:\n+    extends:\n+      file: openldap-service.yml\n+      service: phpldapadmin\n+    environment:\n+      PHPLDAPADMIN_LDAP_HOSTS: \"openldap1\"\n+    depends_on:\n+      openldap1:\n+        condition: service_healthy\n+\n+  zookeeper:\n+    extends:\n+      file: zookeeper-service.yml\n+      service: zookeeper\n+\n+  clickhouse1:\n+    extends:\n+      file: clickhouse-service.yml\n+      service: clickhouse\n+    hostname: clickhouse1\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse1/database/:/var/lib/clickhouse/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse1/logs/:/var/log/clickhouse-server/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse1/config.d:/etc/clickhouse-server/config.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse1/users.d:/etc/clickhouse-server/users.d\"\n+    depends_on:\n+      zookeeper:\n+        condition: service_healthy\n+\n+  clickhouse2:\n+    extends:\n+      file: clickhouse-service.yml\n+      service: clickhouse\n+    hostname: clickhouse2\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse2/database/:/var/lib/clickhouse/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse2/logs/:/var/log/clickhouse-server/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse2/config.d:/etc/clickhouse-server/config.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse2/users.d:/etc/clickhouse-server/users.d\"\n+    depends_on:\n+      zookeeper:\n+        condition: service_healthy\n+\n+  clickhouse3:\n+    extends:\n+      file: clickhouse-service.yml\n+      service: clickhouse\n+    hostname: clickhouse3\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse3/database/:/var/lib/clickhouse/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse3/logs/:/var/log/clickhouse-server/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse3/config.d:/etc/clickhouse-server/config.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse3/users.d:/etc/clickhouse-server/users.d\"\n+    depends_on:\n+      zookeeper:\n+        condition: service_healthy\n+\n+  # dummy service which does nothing, but allows to postpone \n+  # 'docker-compose up -d' till all dependecies will go healthy\n+  all_services_ready:\n+    image: hello-world\n+    depends_on:\n+      clickhouse1:\n+        condition: service_healthy\n+      clickhouse2:\n+        condition: service_healthy\n+      clickhouse3:\n+        condition: service_healthy\n+      zookeeper:\n+        condition: service_healthy\n+      openldap1:\n+        condition: service_healthy\n+      openldap2:\n+        condition: service_healthy\n+      openldap3:\n+        condition: service_healthy\n+      openldap4:\n+        condition: service_healthy\n+      openldap5:\n+        condition: service_healthy\n+      phpldapadmin:\n+        condition: service_healthy\ndiff --git a/tests/testflows/ldap/role_mapping/docker-compose/openldap-service.yml b/tests/testflows/ldap/role_mapping/docker-compose/openldap-service.yml\nnew file mode 100644\nindex 000000000000..139907c513cf\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/docker-compose/openldap-service.yml\n@@ -0,0 +1,40 @@\n+version: '2.3'\n+\n+services:\n+  openldap:\n+    image: osixia/openldap:1.4.0\n+    command: \"--copy-service --loglevel debug\"\n+    environment:\n+      LDAP_ORGANIZATION: \"company\"\n+      LDAP_DOMAIN: \"company.com\"\n+      LDAP_ADMIN_PASSWORD: \"admin\"\n+      LDAP_TLS: \"false\"\n+    expose:\n+      - \"389\"\n+      - \"636\"\n+    healthcheck:\n+      test: ldapsearch -x -H ldap://localhost:$${LDAP_PORT:-389} -b \"dc=company,dc=com\" -D \"cn=admin,dc=company,dc=com\" -w admin\n+      interval: 10s\n+      timeout: 10s\n+      retries: 3\n+      start_period: 300s\n+    security_opt:\n+      - label:disable\n+\n+\n+  phpldapadmin:\n+    image: osixia/phpldapadmin:0.9.0\n+    container_name: phpldapadmin\n+    environment:\n+      PHPLDAPADMIN_HTTPS=false:\n+    ports:\n+      - \"8080:80\"      \n+    healthcheck:\n+      test: echo 1\n+      interval: 10s\n+      timeout: 10s\n+      retries: 3\n+      start_period: 300s\n+    security_opt:\n+      - label:disable\n+\ndiff --git a/tests/testflows/ldap/role_mapping/docker-compose/zookeeper-service.yml b/tests/testflows/ldap/role_mapping/docker-compose/zookeeper-service.yml\nnew file mode 100644\nindex 000000000000..6691a2df31c1\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/docker-compose/zookeeper-service.yml\n@@ -0,0 +1,18 @@\n+version: '2.3'\n+\n+services:\n+  zookeeper:\n+    image: zookeeper:3.4.12\n+    expose:\n+      - \"2181\"\n+    environment:\n+      ZOO_TICK_TIME: 500\n+      ZOO_MY_ID: 1\n+    healthcheck:\n+      test: echo stat | nc localhost 2181\n+      interval: 10s\n+      timeout: 10s\n+      retries: 3\n+      start_period: 300s\n+    security_opt:\n+      - label:disable\ndiff --git a/tests/testflows/ldap/role_mapping/regression.py b/tests/testflows/ldap/role_mapping/regression.py\nnew file mode 100755\nindex 000000000000..fff1e72a945f\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/regression.py\n@@ -0,0 +1,47 @@\n+#!/usr/bin/env python3\n+import sys\n+from testflows.core import *\n+\n+append_path(sys.path, \"..\", \"..\")\n+\n+from helpers.cluster import Cluster\n+from helpers.argparser import argparser\n+from ldap.role_mapping.requirements import *\n+\n+# Cross-outs of known fails\n+xfails = {\n+   \"mapping/roles removed and added in parallel\":\n+       [(Fail, \"known bug\")]\n+}\n+\n+@TestFeature\n+@Name(\"role mapping\")\n+@ArgumentParser(argparser)\n+@Specifications(\n+    QA_SRS014_ClickHouse_LDAP_Role_Mapping\n+)\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping(\"1.0\")\n+)\n+@XFails(xfails)\n+def regression(self, local, clickhouse_binary_path, stress=None, parallel=None):\n+    \"\"\"ClickHouse LDAP role mapping regression module.\n+    \"\"\"\n+    nodes = {\n+        \"clickhouse\": (\"clickhouse1\", \"clickhouse2\", \"clickhouse3\"),\n+    }\n+\n+    with Cluster(local, clickhouse_binary_path, nodes=nodes) as cluster:\n+        self.context.cluster = cluster\n+        \n+        if stress is not None or not hasattr(self.context, \"stress\"):\n+            self.context.stress = stress\n+        if parallel is not None or not hasattr(self.context, \"parallel\"):\n+            self.context.parallel = parallel\n+\n+        Scenario(run=load(\"ldap.authentication.tests.sanity\", \"scenario\"), name=\"ldap sanity\")\n+        Feature(run=load(\"ldap.role_mapping.tests.server_config\", \"feature\"))\n+        Feature(run=load(\"ldap.role_mapping.tests.mapping\", \"feature\"))\n+\n+if main():\n+    regression()\ndiff --git a/tests/testflows/ldap/role_mapping/requirements/__init__.py b/tests/testflows/ldap/role_mapping/requirements/__init__.py\nnew file mode 100644\nindex 000000000000..02f7d4301544\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/requirements/__init__.py\n@@ -0,0 +1,1 @@\n+from .requirements import *\ndiff --git a/tests/testflows/ldap/role_mapping/requirements/requirements.py b/tests/testflows/ldap/role_mapping/requirements/requirements.py\nnew file mode 100644\nindex 000000000000..ca7192e9dadb\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/requirements/requirements.py\n@@ -0,0 +1,1475 @@\n+# These requirements were auto generated\n+# from software requirements specification (SRS)\n+# document by TestFlows v1.6.210101.1235930.\n+# Do not edit by hand but re-generate instead\n+# using 'tfs requirements generate' command.\n+from testflows.core import Specification\n+from testflows.core import Requirement\n+\n+Heading = Specification.Heading\n+\n+RQ_SRS_014_LDAP_RoleMapping = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support mapping of [LDAP] groups to [RBAC] roles\\n'\n+        'for users authenticated using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.1.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_WithFixedRoles = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.WithFixedRoles',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support mapping of [LDAP] groups to [RBAC] roles\\n'\n+        'for users authenticated using [LDAP] external user directory when\\n'\n+        'one or more roles are specified in the `<roles>` section.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.1.2')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Search = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Search',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL perform search on the [LDAP] server and map the results to [RBAC] role names \\n'\n+        'when authenticating users using the [LDAP] external user directory if the `<role_mapping>` section is configured\\n'\n+        'as part of the [LDAP] external user directory. The matched roles SHALL be assigned to the user.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.1.3')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_WithUTF8Characters = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithUTF8Characters',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support mapping [LDAP] search results for users authenticated using [LDAP] external user directory\\n'\n+        'to an [RBAC] role that contains UTF-8 characters.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.2.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_Long = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.Long',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support mapping [LDAP] search results for users authenticated using [LDAP] external user directory\\n'\n+        'to an [RBAC] role that has a name with more than 128 characters.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.2.2')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_WithSpecialXMLCharacters = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithSpecialXMLCharacters',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support mapping [LDAP] search results for users authenticated using [LDAP] external user directory\\n'\n+        'to an [RBAC] role that has a name that contains special characters that need to be escaped in XML.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.2.3')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_WithSpecialRegexCharacters = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithSpecialRegexCharacters',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support mapping [LDAP] search results for users authenticated using [LDAP] external user directory\\n'\n+        'to an [RBAC] role that has a name that contains special characters that need to be escaped in regex.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.2.4')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Map_MultipleRoles = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Map.MultipleRoles',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support mapping one or more [LDAP] search results for users authenticated using \\n'\n+        '[LDAP] external user directory to one or more [RBAC] role.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.3.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_Removed = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.Removed',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL not assign [RBAC] role(s) for any users authenticated using [LDAP] external user directory\\n'\n+        'if the corresponding [LDAP] group(s) that map those role(s) are removed. Any users that have active sessions SHALL still\\n'\n+        'have privileges provided by the role(s) until the next time they are authenticated.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.4.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_RemovedAndAdded_Parallel = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.RemovedAndAdded.Parallel',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support authenticating users using [LDAP] external user directory \\n'\n+        'when [LDAP] groups are removed and added \\n'\n+        'at the same time as [LDAP] user authentications are performed in parallel.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.4.2')\n+\n+RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_UserRemoved = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.UserRemoved',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL not assign [RBAC] role(s) for the user authenticated using [LDAP] external user directory\\n'\n+        'if the user has been removed from the corresponding [LDAP] group(s) that map those role(s). \\n'\n+        'Any active user sessions SHALL have privileges provided by the role(s) until the next time the user is authenticated.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.4.3')\n+\n+RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_UserRemovedAndAdded_Parallel = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.UserRemovedAndAdded.Parallel',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support authenticating users using [LDAP] external user directory\\n'\n+        'when [LDAP] users are added and removed from [LDAP] groups used to map to [RBAC] roles\\n'\n+        'at the same time as [LDAP] user authentications are performed in parallel.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.4.4')\n+\n+RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_NotPresent = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.NotPresent',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL not reject authentication attempt using [LDAP] external user directory if any of the roles that are \\n'\n+        'are mapped from [LDAP] but are not present locally.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.5.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_Added = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Added',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL add the privileges provided by the [LDAP] mapped role when the\\n'\n+        'role is not present during user authentication using [LDAP] external user directory\\n'\n+        'as soon as the role is added.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.5.2')\n+\n+RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_Removed = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Removed',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL remove the privileges provided by the role from all the\\n'\n+        'users authenticated using [LDAP] external user directory if the [RBAC] role that was mapped\\n'\n+        'as a result of [LDAP] search is removed.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.5.3')\n+\n+RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_Readded = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Readded',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL reassign the [RBAC] role and add all the privileges provided by the role\\n'\n+        'when it is re-added after removal for all [LDAP] users authenticated using external user directory\\n'\n+        'for any role that was mapped as a result of [LDAP] search.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.5.4')\n+\n+RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_RemovedAndAdded_Parallel = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.RemovedAndAdded.Parallel',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support authenticating users using [LDAP] external user directory\\n'\n+        'when [RBAC] roles that are mapped by [LDAP] groups\\n'\n+        'are added and removed at the same time as [LDAP] user authentications are performed in parallel.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.5.5')\n+\n+RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_New = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.New',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL not allow any new roles to be assigned to any\\n'\n+        'users authenticated using [LDAP] external user directory unless the role is specified\\n'\n+        'in the configuration of the external user directory or was mapped as a result of [LDAP] search.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.5.6')\n+\n+RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_NewPrivilege = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.NewPrivilege',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL add new privilege to all the users authenticated using [LDAP] external user directory\\n'\n+        'when new privilege is added to one of the roles that were mapped as a result of [LDAP] search.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.5.7')\n+\n+RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_RemovedPrivilege = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.RemovedPrivilege',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL remove privilege from all the users authenticated using [LDAP] external user directory\\n'\n+        'when the privilege that was provided by the mapped role is removed from all the roles \\n'\n+        'that were mapped as a result of [LDAP] search.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.5.8')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support parallel authentication of users using [LDAP] server\\n'\n+        'when using [LDAP] external user directory that has role mapping enabled.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.6.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_ValidAndInvalid = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.ValidAndInvalid',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support authentication of valid users and\\n'\n+        'prohibit authentication of invalid users using [LDAP] server\\n'\n+        'in parallel without having invalid attempts affecting valid authentications\\n'\n+        'when using [LDAP] external user directory that has role mapping enabled.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.6.2')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_MultipleServers = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.MultipleServers',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support parallel authentication of external [LDAP] users\\n'\n+        'authenticated using multiple [LDAP] external user directories that have\\n'\n+        'role mapping enabled.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.6.3')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_LocalOnly = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.LocalOnly',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support parallel authentication of users defined only locally\\n'\n+        'when one or more [LDAP] external user directories with role mapping\\n'\n+        'are specified in the configuration file.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.6.4')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_LocalAndMultipleLDAP = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.LocalAndMultipleLDAP',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support parallel authentication of local and external [LDAP] users\\n'\n+        'authenticated using multiple [LDAP] external user directories with role mapping enabled.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.6.5')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_SameUser = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.SameUser',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support parallel authentication of the same external [LDAP] user\\n'\n+        'authenticated using the same [LDAP] external user directory with role mapping enabled.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=3,\n+    num='4.6.6')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_Server_BindDN = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.Server.BindDN',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `<bind_dn>` parameter in the `<ldap_servers><server_name>` section\\n'\n+        'of the `config.xml` that SHALL be used to construct the `DN` to bind to.\\n'\n+        'The resulting `DN` SHALL be constructed by replacing all `{user_name}` substrings of the template \\n'\n+        'with the actual user name during each authentication attempt.\\n'\n+        '\\n'\n+        'For example, \\n'\n+        '\\n'\n+        '```xml\\n'\n+        '<yandex>\\n'\n+        '    <ldap_servers>\\n'\n+        '        <my_ldap_server>\\n'\n+        '            <!-- ... -->\\n'\n+        '            <bind_dn>uid={user_name},ou=users,dc=example,dc=com</bind_dn>\\n'\n+        '            <!-- ... -->\\n'\n+        '        </my_ldap_server>\\n'\n+        '    </ldap_servers>\\n'\n+        '</yandex>\\n'\n+        '```\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.7.1.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_Server_BindDN_ConflictWith_AuthDN = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.Server.BindDN.ConflictWith.AuthDN',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL return an error if both `<bind_dn>` and `<auth_dn_prefix>` or `<auth_dn_suffix>` parameters\\n'\n+        'are specified as part of [LDAP] server description in the `<ldap_servers>` section of the `config.xml`.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.7.1.2')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Syntax = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Syntax',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `role_mapping` sub-section in the `<user_directories><ldap>` section\\n'\n+        'of the `config.xml`.\\n'\n+        '\\n'\n+        'For example,\\n'\n+        '\\n'\n+        '```xml\\n'\n+        '<yandex>\\n'\n+        '    <user_directories>\\n'\n+        '        <ldap>\\n'\n+        '            <!-- ... -->\\n'\n+        '            <role_mapping>\\n'\n+        '                <base_dn>ou=groups,dc=example,dc=com</base_dn>\\n'\n+        '                <attribute>cn</attribute>\\n'\n+        '                <scope>subtree</scope>\\n'\n+        '                <search_filter>(&amp;(objectClass=groupOfNames)(member={bind_dn}))</search_filter>\\n'\n+        '                <prefix>clickhouse_</prefix>\\n'\n+        '            </role_mapping>\\n'\n+        '        </ldap>\\n'\n+        '    </user_directories>\\n'\n+        '</yandex>\\n'\n+        '```\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.1.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_SpecialCharactersEscaping = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.SpecialCharactersEscaping',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support properly escaped special XML characters that can be present\\n'\n+        'as part of the values for different configuration parameters inside the\\n'\n+        '`<user_directories><ldap><role_mapping>` section of the `config.xml` such as\\n'\n+        '\\n'\n+        '* `<search_filter>` parameter\\n'\n+        '* `<prefix>` parameter\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.2.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_MultipleSections = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.MultipleSections',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support multiple `<role_mapping>` sections defined inside the same `<user_directories><ldap>` section \\n'\n+        'of the `config.xml` and all of the `<role_mapping>` sections SHALL be applied.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.3.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_MultipleSections_IdenticalParameters = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.MultipleSections.IdenticalParameters',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL not duplicate mapped roles when multiple `<role_mapping>` sections \\n'\n+        'with identical parameters are defined inside the `<user_directories><ldap>` section \\n'\n+        'of the `config.xml`.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.3.2')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_BaseDN = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.BaseDN',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `<base_dn>` parameter in the `<user_directories><ldap><role_mapping>` section \\n'\n+        'of the `config.xml` that SHALL specify the template to be used to construct the base `DN` for the [LDAP] search.\\n'\n+        '\\n'\n+        'The resulting `DN` SHALL be constructed by replacing all the `{user_name}` and `{bind_dn}` substrings of \\n'\n+        'the template with the actual user name and bind `DN` during each [LDAP] search.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.4.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Attribute = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Attribute',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `<attribute>` parameter in the `<user_directories><ldap><role_mapping>` section of \\n'\n+        'the `config.xml` that SHALL specify the name of the attribute whose values SHALL be returned by the [LDAP] search.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.5.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `<scope>` parameter in the `<user_directories><ldap><role_mapping>` section of \\n'\n+        'the `config.xml` that SHALL define the scope of the LDAP search as defined \\n'\n+        'by the https://ldapwiki.com/wiki/LDAP%20Search%20Scopes.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.6.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_Base = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Base',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `base` value for the the `<scope>` parameter in the \\n'\n+        '`<user_directories><ldap><role_mapping>` section of the `config.xml` that SHALL\\n'\n+        'limit the scope as specified by the https://ldapwiki.com/wiki/BaseObject.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.6.2')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_OneLevel = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.OneLevel',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `one_level` value for the the `<scope>` parameter in the \\n'\n+        '`<user_directories><ldap><role_mapping>` section of the `config.xml` that SHALL\\n'\n+        'limit the scope as specified by the https://ldapwiki.com/wiki/SingleLevel.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.6.3')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_Children = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Children',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `children` value for the the `<scope>` parameter in the \\n'\n+        '`<user_directories><ldap><role_mapping>` section of the `config.xml` that SHALL\\n'\n+        'limit the scope as specified by the https://ldapwiki.com/wiki/SubordinateSubtree.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.6.4')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_Subtree = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Subtree',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `children` value for the the `<scope>` parameter in the \\n'\n+        '`<user_directories><ldap><role_mapping>` section of the `config.xml` that SHALL\\n'\n+        'limit the scope as specified by the https://ldapwiki.com/wiki/WholeSubtree.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.6.5')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_Default = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Default',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `subtree` as the default value for the the `<scope>` parameter in the \\n'\n+        '`<user_directories><ldap><role_mapping>` section of the `config.xml` when the `<scope>` parameter is not specified.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.6.6')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_SearchFilter = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.SearchFilter',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `<search_filter>` parameter in the `<user_directories><ldap><role_mapping>`\\n'\n+        'section of the `config.xml` that SHALL specify the template used to construct \\n'\n+        'the [LDAP filter](https://ldap.com/ldap-filters/) for the search.\\n'\n+        '\\n'\n+        'The resulting filter SHALL be constructed by replacing all `{user_name}`, `{bind_dn}`, and `{base_dn}` substrings \\n'\n+        'of the template with the actual user name, bind `DN`, and base `DN` during each the [LDAP] search.\\n'\n+        ' \\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.7.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support the `<prefix>` parameter in the `<user directories><ldap><role_mapping>`\\n'\n+        'section of the `config.xml` that SHALL be expected to be in front of each string in \\n'\n+        'the original list of strings returned by the [LDAP] search. \\n'\n+        'Prefix SHALL be removed from the original strings and resulting strings SHALL be treated as [RBAC] role names. \\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.8.1')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_Default = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.Default',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support empty string as the default value of the `<prefix>` parameter in \\n'\n+        'the `<user directories><ldap><role_mapping>` section of the `config.xml`.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.8.2')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_WithUTF8Characters = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithUTF8Characters',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support UTF8 characters as the value of the `<prefix>` parameter in\\n'\n+        'the `<user directories><ldap><role_mapping>` section of the `config.xml`.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.8.3')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_WithSpecialXMLCharacters = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithSpecialXMLCharacters',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support XML special characters as the value of the `<prefix>` parameter in\\n'\n+        'the `<user directories><ldap><role_mapping>` section of the `config.xml`.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.8.4')\n+\n+RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_WithSpecialRegexCharacters = Requirement(\n+    name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithSpecialRegexCharacters',\n+    version='1.0',\n+    priority=None,\n+    group=None,\n+    type=None,\n+    uid=None,\n+    description=(\n+        '[ClickHouse] SHALL support regex special characters as the value of the `<prefix>` parameter in\\n'\n+        'the `<user directories><ldap><role_mapping>` section of the `config.xml`.\\n'\n+        '\\n'\n+        ),\n+    link=None,\n+    level=4,\n+    num='4.8.8.5')\n+\n+QA_SRS014_ClickHouse_LDAP_Role_Mapping = Specification(\n+    name='QA-SRS014 ClickHouse LDAP Role Mapping', \n+    description=None,\n+    author='vzakaznikov',\n+    date='December 4, 2020', \n+    status='-', \n+    approved_by='-',\n+    approved_date='-',\n+    approved_version='-',\n+    version=None,\n+    group=None,\n+    type=None,\n+    link=None,\n+    uid=None,\n+    parent=None,\n+    children=None,\n+    headings=(\n+        Heading(name='Revision History', level=1, num='1'),\n+        Heading(name='Introduction', level=1, num='2'),\n+        Heading(name='Terminology', level=1, num='3'),\n+        Heading(name='LDAP', level=2, num='3.1'),\n+        Heading(name='Requirements', level=1, num='4'),\n+        Heading(name='General', level=2, num='4.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping', level=3, num='4.1.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.WithFixedRoles', level=3, num='4.1.2'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Search', level=3, num='4.1.3'),\n+        Heading(name='Mapped Role Names', level=2, num='4.2'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithUTF8Characters', level=3, num='4.2.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.Long', level=3, num='4.2.2'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithSpecialXMLCharacters', level=3, num='4.2.3'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithSpecialRegexCharacters', level=3, num='4.2.4'),\n+        Heading(name='Multiple Roles', level=2, num='4.3'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Map.MultipleRoles', level=3, num='4.3.1'),\n+        Heading(name='LDAP Groups', level=2, num='4.4'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.Removed', level=3, num='4.4.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.RemovedAndAdded.Parallel', level=3, num='4.4.2'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.UserRemoved', level=3, num='4.4.3'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.UserRemovedAndAdded.Parallel', level=3, num='4.4.4'),\n+        Heading(name='RBAC Roles', level=2, num='4.5'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.NotPresent', level=3, num='4.5.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Added', level=3, num='4.5.2'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Removed', level=3, num='4.5.3'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Readded', level=3, num='4.5.4'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.RemovedAndAdded.Parallel', level=3, num='4.5.5'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.New', level=3, num='4.5.6'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.NewPrivilege', level=3, num='4.5.7'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.RemovedPrivilege', level=3, num='4.5.8'),\n+        Heading(name='Authentication', level=2, num='4.6'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel', level=3, num='4.6.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.ValidAndInvalid', level=3, num='4.6.2'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.MultipleServers', level=3, num='4.6.3'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.LocalOnly', level=3, num='4.6.4'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.LocalAndMultipleLDAP', level=3, num='4.6.5'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.SameUser', level=3, num='4.6.6'),\n+        Heading(name='Server Configuration', level=2, num='4.7'),\n+        Heading(name='BindDN Parameter', level=3, num='4.7.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.Server.BindDN', level=4, num='4.7.1.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.Server.BindDN.ConflictWith.AuthDN', level=4, num='4.7.1.2'),\n+        Heading(name='External User Directory Configuration', level=2, num='4.8'),\n+        Heading(name='Syntax', level=3, num='4.8.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Syntax', level=4, num='4.8.1.1'),\n+        Heading(name='Special Characters Escaping', level=3, num='4.8.2'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.SpecialCharactersEscaping', level=4, num='4.8.2.1'),\n+        Heading(name='Multiple Sections', level=3, num='4.8.3'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.MultipleSections', level=4, num='4.8.3.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.MultipleSections.IdenticalParameters', level=4, num='4.8.3.2'),\n+        Heading(name='BaseDN Parameter', level=3, num='4.8.4'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.BaseDN', level=4, num='4.8.4.1'),\n+        Heading(name='Attribute Parameter', level=3, num='4.8.5'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Attribute', level=4, num='4.8.5.1'),\n+        Heading(name='Scope Parameter', level=3, num='4.8.6'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope', level=4, num='4.8.6.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Base', level=4, num='4.8.6.2'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.OneLevel', level=4, num='4.8.6.3'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Children', level=4, num='4.8.6.4'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Subtree', level=4, num='4.8.6.5'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Default', level=4, num='4.8.6.6'),\n+        Heading(name='Search Filter Parameter', level=3, num='4.8.7'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.SearchFilter', level=4, num='4.8.7.1'),\n+        Heading(name='Prefix Parameter', level=3, num='4.8.8'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix', level=4, num='4.8.8.1'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.Default', level=4, num='4.8.8.2'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithUTF8Characters', level=4, num='4.8.8.3'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithSpecialXMLCharacters', level=4, num='4.8.8.4'),\n+        Heading(name='RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithSpecialRegexCharacters', level=4, num='4.8.8.5'),\n+        Heading(name='References', level=1, num='5'),\n+        ),\n+    requirements=(\n+        RQ_SRS_014_LDAP_RoleMapping,\n+        RQ_SRS_014_LDAP_RoleMapping_WithFixedRoles,\n+        RQ_SRS_014_LDAP_RoleMapping_Search,\n+        RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_WithUTF8Characters,\n+        RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_Long,\n+        RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_WithSpecialXMLCharacters,\n+        RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_WithSpecialRegexCharacters,\n+        RQ_SRS_014_LDAP_RoleMapping_Map_MultipleRoles,\n+        RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_Removed,\n+        RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_RemovedAndAdded_Parallel,\n+        RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_UserRemoved,\n+        RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_UserRemovedAndAdded_Parallel,\n+        RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_NotPresent,\n+        RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_Added,\n+        RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_Removed,\n+        RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_Readded,\n+        RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_RemovedAndAdded_Parallel,\n+        RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_New,\n+        RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_NewPrivilege,\n+        RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_RemovedPrivilege,\n+        RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel,\n+        RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_ValidAndInvalid,\n+        RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_MultipleServers,\n+        RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_LocalOnly,\n+        RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_LocalAndMultipleLDAP,\n+        RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_SameUser,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_Server_BindDN,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_Server_BindDN_ConflictWith_AuthDN,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Syntax,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_SpecialCharactersEscaping,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_MultipleSections,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_MultipleSections_IdenticalParameters,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_BaseDN,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Attribute,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_Base,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_OneLevel,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_Children,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_Subtree,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Scope_Value_Default,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_SearchFilter,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_Default,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_WithUTF8Characters,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_WithSpecialXMLCharacters,\n+        RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_WithSpecialRegexCharacters,\n+        ),\n+    content='''\n+# QA-SRS014 ClickHouse LDAP Role Mapping\n+# Software Requirements Specification\n+\n+(c) 2020 Altinity LTD. All Rights Reserved.\n+\n+**Document status:** Confidential\n+\n+**Author:** vzakaznikov\n+\n+**Date:** December 4, 2020\n+\n+## Approval\n+\n+**Status:** -\n+\n+**Version:** -\n+\n+**Approved by:** -\n+\n+**Date:** -\n+\n+## Table of Contents\n+\n+* 1 [Revision History](#revision-history)\n+* 2 [Introduction](#introduction)\n+* 3 [Terminology](#terminology)\n+  * 3.1 [LDAP](#ldap)\n+* 4 [Requirements](#requirements)\n+  * 4.1 [General](#general)\n+    * 4.1.1 [RQ.SRS-014.LDAP.RoleMapping](#rqsrs-014ldaprolemapping)\n+    * 4.1.2 [RQ.SRS-014.LDAP.RoleMapping.WithFixedRoles](#rqsrs-014ldaprolemappingwithfixedroles)\n+    * 4.1.3 [RQ.SRS-014.LDAP.RoleMapping.Search](#rqsrs-014ldaprolemappingsearch)\n+  * 4.2 [Mapped Role Names](#mapped-role-names)\n+    * 4.2.1 [RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithUTF8Characters](#rqsrs-014ldaprolemappingmaprolenamewithutf8characters)\n+    * 4.2.2 [RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.Long](#rqsrs-014ldaprolemappingmaprolenamelong)\n+    * 4.2.3 [RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithSpecialXMLCharacters](#rqsrs-014ldaprolemappingmaprolenamewithspecialxmlcharacters)\n+    * 4.2.4 [RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithSpecialRegexCharacters](#rqsrs-014ldaprolemappingmaprolenamewithspecialregexcharacters)\n+  * 4.3 [Multiple Roles](#multiple-roles)\n+    * 4.3.1 [RQ.SRS-014.LDAP.RoleMapping.Map.MultipleRoles](#rqsrs-014ldaprolemappingmapmultipleroles)\n+  * 4.4 [LDAP Groups](#ldap-groups)\n+    * 4.4.1 [RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.Removed](#rqsrs-014ldaprolemappingldapgroupremoved)\n+    * 4.4.2 [RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.RemovedAndAdded.Parallel](#rqsrs-014ldaprolemappingldapgroupremovedandaddedparallel)\n+    * 4.4.3 [RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.UserRemoved](#rqsrs-014ldaprolemappingldapgroupuserremoved)\n+    * 4.4.4 [RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.UserRemovedAndAdded.Parallel](#rqsrs-014ldaprolemappingldapgroupuserremovedandaddedparallel)\n+  * 4.5 [RBAC Roles](#rbac-roles)\n+    * 4.5.1 [RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.NotPresent](#rqsrs-014ldaprolemappingrbacrolenotpresent)\n+    * 4.5.2 [RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Added](#rqsrs-014ldaprolemappingrbacroleadded)\n+    * 4.5.3 [RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Removed](#rqsrs-014ldaprolemappingrbacroleremoved)\n+    * 4.5.4 [RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Readded](#rqsrs-014ldaprolemappingrbacrolereadded)\n+    * 4.5.5 [RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.RemovedAndAdded.Parallel](#rqsrs-014ldaprolemappingrbacroleremovedandaddedparallel)\n+    * 4.5.6 [RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.New](#rqsrs-014ldaprolemappingrbacrolenew)\n+    * 4.5.7 [RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.NewPrivilege](#rqsrs-014ldaprolemappingrbacrolenewprivilege)\n+    * 4.5.8 [RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.RemovedPrivilege](#rqsrs-014ldaprolemappingrbacroleremovedprivilege)\n+  * 4.6 [Authentication](#authentication)\n+    * 4.6.1 [RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel](#rqsrs-014ldaprolemappingauthenticationparallel)\n+    * 4.6.2 [RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.ValidAndInvalid](#rqsrs-014ldaprolemappingauthenticationparallelvalidandinvalid)\n+    * 4.6.3 [RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.MultipleServers](#rqsrs-014ldaprolemappingauthenticationparallelmultipleservers)\n+    * 4.6.4 [RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.LocalOnly](#rqsrs-014ldaprolemappingauthenticationparallellocalonly)\n+    * 4.6.5 [RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.LocalAndMultipleLDAP](#rqsrs-014ldaprolemappingauthenticationparallellocalandmultipleldap)\n+    * 4.6.6 [RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.SameUser](#rqsrs-014ldaprolemappingauthenticationparallelsameuser)\n+  * 4.7 [Server Configuration](#server-configuration)\n+    * 4.7.1 [BindDN Parameter](#binddn-parameter)\n+      * 4.7.1.1 [RQ.SRS-014.LDAP.RoleMapping.Configuration.Server.BindDN](#rqsrs-014ldaprolemappingconfigurationserverbinddn)\n+      * 4.7.1.2 [RQ.SRS-014.LDAP.RoleMapping.Configuration.Server.BindDN.ConflictWith.AuthDN](#rqsrs-014ldaprolemappingconfigurationserverbinddnconflictwithauthdn)\n+  * 4.8 [External User Directory Configuration](#external-user-directory-configuration)\n+    * 4.8.1 [Syntax](#syntax)\n+      * 4.8.1.1 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Syntax](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingsyntax)\n+    * 4.8.2 [Special Characters Escaping](#special-characters-escaping)\n+      * 4.8.2.1 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.SpecialCharactersEscaping](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingspecialcharactersescaping)\n+    * 4.8.3 [Multiple Sections](#multiple-sections)\n+      * 4.8.3.1 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.MultipleSections](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingmultiplesections)\n+      * 4.8.3.2 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.MultipleSections.IdenticalParameters](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingmultiplesectionsidenticalparameters)\n+    * 4.8.4 [BaseDN Parameter](#basedn-parameter)\n+      * 4.8.4.1 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.BaseDN](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingbasedn)\n+    * 4.8.5 [Attribute Parameter](#attribute-parameter)\n+      * 4.8.5.1 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Attribute](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingattribute)\n+    * 4.8.6 [Scope Parameter](#scope-parameter)\n+      * 4.8.6.1 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingscope)\n+      * 4.8.6.2 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Base](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingscopevaluebase)\n+      * 4.8.6.3 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.OneLevel](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingscopevalueonelevel)\n+      * 4.8.6.4 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Children](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingscopevaluechildren)\n+      * 4.8.6.5 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Subtree](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingscopevaluesubtree)\n+      * 4.8.6.6 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Default](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingscopevaluedefault)\n+    * 4.8.7 [Search Filter Parameter](#search-filter-parameter)\n+      * 4.8.7.1 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.SearchFilter](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingsearchfilter)\n+    * 4.8.8 [Prefix Parameter](#prefix-parameter)\n+      * 4.8.8.1 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingprefix)\n+      * 4.8.8.2 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.Default](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingprefixdefault)\n+      * 4.8.8.3 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithUTF8Characters](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingprefixwithutf8characters)\n+      * 4.8.8.4 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithSpecialXMLCharacters](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingprefixwithspecialxmlcharacters)\n+      * 4.8.8.5 [RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithSpecialRegexCharacters](#rqsrs-014ldaprolemappingconfigurationuserdirectoryrolemappingprefixwithspecialregexcharacters)\n+* 5 [References](#references)\n+\n+## Revision History\n+\n+This document is stored in an electronic form using [Git] source control management software\n+hosted in a [GitLab Repository].\n+All the updates are tracked using the [Revision History].\n+\n+## Introduction\n+\n+The [QA-SRS007 ClickHouse Authentication of Users via LDAP] added support for authenticating\n+users using an [LDAP] server and the [QA-SRS009 ClickHouse LDAP External User Directory] added\n+support for authenticating users using an [LDAP] external user directory. \n+\n+This requirements specification adds additional functionality for mapping [LDAP] groups to \n+the corresponding [ClickHouse] [RBAC] roles when [LDAP] external user directory is configured.\n+This functionality will enable easier access management for [LDAP] authenticated users\n+as the privileges granted by the roles can be granted or revoked by granting or revoking\n+a corresponding [LDAP] group to one or more [LDAP] users.\n+\n+For the use case when only [LDAP] user authentication is used, the roles can be\n+managed using [RBAC] in the same way as for non-[LDAP] authenticated users.\n+\n+## Terminology\n+\n+### LDAP\n+\n+* Lightweight Directory Access Protocol\n+\n+## Requirements\n+\n+### General\n+\n+#### RQ.SRS-014.LDAP.RoleMapping\n+version: 1.0\n+\n+[ClickHouse] SHALL support mapping of [LDAP] groups to [RBAC] roles\n+for users authenticated using [LDAP] external user directory.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.WithFixedRoles\n+version: 1.0\n+\n+[ClickHouse] SHALL support mapping of [LDAP] groups to [RBAC] roles\n+for users authenticated using [LDAP] external user directory when\n+one or more roles are specified in the `<roles>` section.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Search\n+version: 1.0\n+\n+[ClickHouse] SHALL perform search on the [LDAP] server and map the results to [RBAC] role names \n+when authenticating users using the [LDAP] external user directory if the `<role_mapping>` section is configured\n+as part of the [LDAP] external user directory. The matched roles SHALL be assigned to the user.\n+\n+### Mapped Role Names\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithUTF8Characters\n+version: 1.0\n+\n+[ClickHouse] SHALL support mapping [LDAP] search results for users authenticated using [LDAP] external user directory\n+to an [RBAC] role that contains UTF-8 characters.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.Long\n+version: 1.0\n+\n+[ClickHouse] SHALL support mapping [LDAP] search results for users authenticated using [LDAP] external user directory\n+to an [RBAC] role that has a name with more than 128 characters.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithSpecialXMLCharacters\n+version: 1.0\n+\n+[ClickHouse] SHALL support mapping [LDAP] search results for users authenticated using [LDAP] external user directory\n+to an [RBAC] role that has a name that contains special characters that need to be escaped in XML.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Map.Role.Name.WithSpecialRegexCharacters\n+version: 1.0\n+\n+[ClickHouse] SHALL support mapping [LDAP] search results for users authenticated using [LDAP] external user directory\n+to an [RBAC] role that has a name that contains special characters that need to be escaped in regex.\n+\n+### Multiple Roles\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Map.MultipleRoles\n+version: 1.0\n+\n+[ClickHouse] SHALL support mapping one or more [LDAP] search results for users authenticated using \n+[LDAP] external user directory to one or more [RBAC] role.\n+\n+### LDAP Groups\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.Removed\n+version: 1.0\n+\n+[ClickHouse] SHALL not assign [RBAC] role(s) for any users authenticated using [LDAP] external user directory\n+if the corresponding [LDAP] group(s) that map those role(s) are removed. Any users that have active sessions SHALL still\n+have privileges provided by the role(s) until the next time they are authenticated.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.RemovedAndAdded.Parallel\n+version: 1.0\n+\n+[ClickHouse] SHALL support authenticating users using [LDAP] external user directory \n+when [LDAP] groups are removed and added \n+at the same time as [LDAP] user authentications are performed in parallel.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.UserRemoved\n+version: 1.0\n+\n+[ClickHouse] SHALL not assign [RBAC] role(s) for the user authenticated using [LDAP] external user directory\n+if the user has been removed from the corresponding [LDAP] group(s) that map those role(s). \n+Any active user sessions SHALL have privileges provided by the role(s) until the next time the user is authenticated.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.LDAP.Group.UserRemovedAndAdded.Parallel\n+version: 1.0\n+\n+[ClickHouse] SHALL support authenticating users using [LDAP] external user directory\n+when [LDAP] users are added and removed from [LDAP] groups used to map to [RBAC] roles\n+at the same time as [LDAP] user authentications are performed in parallel.\n+\n+### RBAC Roles\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.NotPresent\n+version: 1.0\n+\n+[ClickHouse] SHALL not reject authentication attempt using [LDAP] external user directory if any of the roles that are \n+are mapped from [LDAP] but are not present locally.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Added\n+version: 1.0\n+\n+[ClickHouse] SHALL add the privileges provided by the [LDAP] mapped role when the\n+role is not present during user authentication using [LDAP] external user directory\n+as soon as the role is added.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Removed\n+version: 1.0\n+\n+[ClickHouse] SHALL remove the privileges provided by the role from all the\n+users authenticated using [LDAP] external user directory if the [RBAC] role that was mapped\n+as a result of [LDAP] search is removed.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.Readded\n+version: 1.0\n+\n+[ClickHouse] SHALL reassign the [RBAC] role and add all the privileges provided by the role\n+when it is re-added after removal for all [LDAP] users authenticated using external user directory\n+for any role that was mapped as a result of [LDAP] search.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.RemovedAndAdded.Parallel\n+version: 1.0\n+\n+[ClickHouse] SHALL support authenticating users using [LDAP] external user directory\n+when [RBAC] roles that are mapped by [LDAP] groups\n+are added and removed at the same time as [LDAP] user authentications are performed in parallel.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.New\n+version: 1.0\n+\n+[ClickHouse] SHALL not allow any new roles to be assigned to any\n+users authenticated using [LDAP] external user directory unless the role is specified\n+in the configuration of the external user directory or was mapped as a result of [LDAP] search.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.NewPrivilege\n+version: 1.0\n+\n+[ClickHouse] SHALL add new privilege to all the users authenticated using [LDAP] external user directory\n+when new privilege is added to one of the roles that were mapped as a result of [LDAP] search.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.RBAC.Role.RemovedPrivilege\n+version: 1.0\n+\n+[ClickHouse] SHALL remove privilege from all the users authenticated using [LDAP] external user directory\n+when the privilege that was provided by the mapped role is removed from all the roles \n+that were mapped as a result of [LDAP] search.\n+\n+### Authentication\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of users using [LDAP] server\n+when using [LDAP] external user directory that has role mapping enabled.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.ValidAndInvalid\n+version: 1.0\n+\n+[ClickHouse] SHALL support authentication of valid users and\n+prohibit authentication of invalid users using [LDAP] server\n+in parallel without having invalid attempts affecting valid authentications\n+when using [LDAP] external user directory that has role mapping enabled.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.MultipleServers\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of external [LDAP] users\n+authenticated using multiple [LDAP] external user directories that have\n+role mapping enabled.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.LocalOnly\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of users defined only locally\n+when one or more [LDAP] external user directories with role mapping\n+are specified in the configuration file.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.LocalAndMultipleLDAP\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of local and external [LDAP] users\n+authenticated using multiple [LDAP] external user directories with role mapping enabled.\n+\n+#### RQ.SRS-014.LDAP.RoleMapping.Authentication.Parallel.SameUser\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of the same external [LDAP] user\n+authenticated using the same [LDAP] external user directory with role mapping enabled.\n+\n+### Server Configuration\n+\n+#### BindDN Parameter\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.Server.BindDN\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `<bind_dn>` parameter in the `<ldap_servers><server_name>` section\n+of the `config.xml` that SHALL be used to construct the `DN` to bind to.\n+The resulting `DN` SHALL be constructed by replacing all `{user_name}` substrings of the template \n+with the actual user name during each authentication attempt.\n+\n+For example, \n+\n+```xml\n+<yandex>\n+    <ldap_servers>\n+        <my_ldap_server>\n+            <!-- ... -->\n+            <bind_dn>uid={user_name},ou=users,dc=example,dc=com</bind_dn>\n+            <!-- ... -->\n+        </my_ldap_server>\n+    </ldap_servers>\n+</yandex>\n+```\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.Server.BindDN.ConflictWith.AuthDN\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error if both `<bind_dn>` and `<auth_dn_prefix>` or `<auth_dn_suffix>` parameters\n+are specified as part of [LDAP] server description in the `<ldap_servers>` section of the `config.xml`.\n+\n+### External User Directory Configuration\n+\n+#### Syntax\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Syntax\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `role_mapping` sub-section in the `<user_directories><ldap>` section\n+of the `config.xml`.\n+\n+For example,\n+\n+```xml\n+<yandex>\n+    <user_directories>\n+        <ldap>\n+            <!-- ... -->\n+            <role_mapping>\n+                <base_dn>ou=groups,dc=example,dc=com</base_dn>\n+                <attribute>cn</attribute>\n+                <scope>subtree</scope>\n+                <search_filter>(&amp;(objectClass=groupOfNames)(member={bind_dn}))</search_filter>\n+                <prefix>clickhouse_</prefix>\n+            </role_mapping>\n+        </ldap>\n+    </user_directories>\n+</yandex>\n+```\n+\n+#### Special Characters Escaping\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.SpecialCharactersEscaping\n+version: 1.0\n+\n+[ClickHouse] SHALL support properly escaped special XML characters that can be present\n+as part of the values for different configuration parameters inside the\n+`<user_directories><ldap><role_mapping>` section of the `config.xml` such as\n+\n+* `<search_filter>` parameter\n+* `<prefix>` parameter\n+\n+#### Multiple Sections\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.MultipleSections\n+version: 1.0\n+\n+[ClickHouse] SHALL support multiple `<role_mapping>` sections defined inside the same `<user_directories><ldap>` section \n+of the `config.xml` and all of the `<role_mapping>` sections SHALL be applied.\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.MultipleSections.IdenticalParameters\n+version: 1.0\n+\n+[ClickHouse] SHALL not duplicate mapped roles when multiple `<role_mapping>` sections \n+with identical parameters are defined inside the `<user_directories><ldap>` section \n+of the `config.xml`.\n+\n+#### BaseDN Parameter\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.BaseDN\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `<base_dn>` parameter in the `<user_directories><ldap><role_mapping>` section \n+of the `config.xml` that SHALL specify the template to be used to construct the base `DN` for the [LDAP] search.\n+\n+The resulting `DN` SHALL be constructed by replacing all the `{user_name}` and `{bind_dn}` substrings of \n+the template with the actual user name and bind `DN` during each [LDAP] search.\n+\n+#### Attribute Parameter\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Attribute\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `<attribute>` parameter in the `<user_directories><ldap><role_mapping>` section of \n+the `config.xml` that SHALL specify the name of the attribute whose values SHALL be returned by the [LDAP] search.\n+\n+#### Scope Parameter\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `<scope>` parameter in the `<user_directories><ldap><role_mapping>` section of \n+the `config.xml` that SHALL define the scope of the LDAP search as defined \n+by the https://ldapwiki.com/wiki/LDAP%20Search%20Scopes.\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Base\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `base` value for the the `<scope>` parameter in the \n+`<user_directories><ldap><role_mapping>` section of the `config.xml` that SHALL\n+limit the scope as specified by the https://ldapwiki.com/wiki/BaseObject.\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.OneLevel\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `one_level` value for the the `<scope>` parameter in the \n+`<user_directories><ldap><role_mapping>` section of the `config.xml` that SHALL\n+limit the scope as specified by the https://ldapwiki.com/wiki/SingleLevel.\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Children\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `children` value for the the `<scope>` parameter in the \n+`<user_directories><ldap><role_mapping>` section of the `config.xml` that SHALL\n+limit the scope as specified by the https://ldapwiki.com/wiki/SubordinateSubtree.\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Subtree\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `children` value for the the `<scope>` parameter in the \n+`<user_directories><ldap><role_mapping>` section of the `config.xml` that SHALL\n+limit the scope as specified by the https://ldapwiki.com/wiki/WholeSubtree.\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Scope.Value.Default\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `subtree` as the default value for the the `<scope>` parameter in the \n+`<user_directories><ldap><role_mapping>` section of the `config.xml` when the `<scope>` parameter is not specified.\n+\n+#### Search Filter Parameter\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.SearchFilter\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `<search_filter>` parameter in the `<user_directories><ldap><role_mapping>`\n+section of the `config.xml` that SHALL specify the template used to construct \n+the [LDAP filter](https://ldap.com/ldap-filters/) for the search.\n+\n+The resulting filter SHALL be constructed by replacing all `{user_name}`, `{bind_dn}`, and `{base_dn}` substrings \n+of the template with the actual user name, bind `DN`, and base `DN` during each the [LDAP] search.\n+ \n+#### Prefix Parameter\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix\n+version: 1.0\n+\n+[ClickHouse] SHALL support the `<prefix>` parameter in the `<user directories><ldap><role_mapping>`\n+section of the `config.xml` that SHALL be expected to be in front of each string in \n+the original list of strings returned by the [LDAP] search. \n+Prefix SHALL be removed from the original strings and resulting strings SHALL be treated as [RBAC] role names. \n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.Default\n+version: 1.0\n+\n+[ClickHouse] SHALL support empty string as the default value of the `<prefix>` parameter in \n+the `<user directories><ldap><role_mapping>` section of the `config.xml`.\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithUTF8Characters\n+version: 1.0\n+\n+[ClickHouse] SHALL support UTF8 characters as the value of the `<prefix>` parameter in\n+the `<user directories><ldap><role_mapping>` section of the `config.xml`.\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithSpecialXMLCharacters\n+version: 1.0\n+\n+[ClickHouse] SHALL support XML special characters as the value of the `<prefix>` parameter in\n+the `<user directories><ldap><role_mapping>` section of the `config.xml`.\n+\n+##### RQ.SRS-014.LDAP.RoleMapping.Configuration.UserDirectory.RoleMapping.Prefix.WithSpecialRegexCharacters\n+version: 1.0\n+\n+[ClickHouse] SHALL support regex special characters as the value of the `<prefix>` parameter in\n+the `<user directories><ldap><role_mapping>` section of the `config.xml`.\n+\n+## References\n+\n+* **Access Control and Account Management**: https://clickhouse.tech/docs/en/operations/access-rights/\n+* **LDAP**: https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol\n+* **ClickHouse:** https://clickhouse.tech\n+* **GitLab Repository**: https://gitlab.com/altinity-qa/documents/qa-srs014-clickhouse-ldap-role-mapping/-/blob/master/QA_SRS014_ClickHouse_LDAP_Role_Mapping.md\n+* **Revision History**: https://gitlab.com/altinity-qa/documents/qa-srs014-clickhouse-ldap-role-mapping/-/commits/master/QA_SRS014_ClickHouse_LDAP_Role_Mapping.md\n+* **Git:** https://git-scm.com/\n+\n+[RBAC]: https://clickhouse.tech/docs/en/operations/access-rights/\n+[SRS]: #srs\n+[Access Control and Account Management]: https://clickhouse.tech/docs/en/operations/access-rights/\n+[QA-SRS009 ClickHouse LDAP External User Directory]: https://gitlab.com/altinity-qa/documents/qa-srs009-clickhouse-ldap-external-user-directory/-/blob/master/QA_SRS009_ClickHouse_LDAP_External_User_Directory.md\n+[QA-SRS007 ClickHouse Authentication of Users via LDAP]: https://gitlab.com/altinity-qa/documents/qa-srs007-clickhouse-athentication-of-users-via-ldap/-/blob/master/QA_SRS007_ClickHouse_Authentication_of_Users_via_LDAP.md\n+[LDAP]: https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol\n+[ClickHouse]: https://clickhouse.tech\n+[GitLab Repository]: https://gitlab.com/altinity-qa/documents/qa-srs014-clickhouse-ldap-role-mapping/-/blob/master/QA_SRS014_ClickHouse_LDAP_Role_Mapping.md\n+[Revision History]: https://gitlab.com/altinity-qa/documents/qa-srs014-clickhouse-ldap-role-mapping/-/commits/master/QA_SRS014_ClickHouse_LDAP_Role_Mapping.md\n+[Git]: https://git-scm.com/\n+[GitLab]: https://gitlab.com\n+''')\ndiff --git a/tests/testflows/ldap/role_mapping/tests/common.py b/tests/testflows/ldap/role_mapping/tests/common.py\nnew file mode 100644\nindex 000000000000..33ad4a46f526\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/tests/common.py\n@@ -0,0 +1,252 @@\n+import os\n+\n+from testflows.core import *\n+from testflows.asserts import error\n+\n+from ldap.authentication.tests.common import getuid, create_ldap_servers_config_content, add_config, Config\n+from ldap.external_user_directory.tests.common import rbac_roles, rbac_users, ldap_users\n+from ldap.authentication.tests.common import xmltree, xml_indent, xml_append, xml_with_utf8\n+\n+@TestStep(Given)\n+def create_table(self, name, create_statement, on_cluster=False):\n+    \"\"\"Create table.\n+    \"\"\"\n+    node = current().context.node\n+    try:\n+        with Given(f\"I have a {name} table\"):\n+            node.query(create_statement.format(name=name))\n+        yield name\n+    finally:\n+        with Finally(\"I drop the table\"):\n+            if on_cluster:\n+                node.query(f\"DROP TABLE IF EXISTS {name} ON CLUSTER {on_cluster}\")\n+            else:\n+                node.query(f\"DROP TABLE IF EXISTS {name}\")\n+\n+@TestStep(Given)\n+def add_ldap_servers_configuration(self, servers, config_d_dir=\"/etc/clickhouse-server/config.d\",\n+        config_file=\"ldap_servers.xml\", timeout=60, restart=False):\n+    \"\"\"Add LDAP servers configuration to config.xml.\n+    \"\"\"\n+    config = create_ldap_servers_config_content(servers, config_d_dir, config_file)\n+    return add_config(config, restart=restart)\n+\n+@TestStep(Given)\n+def add_ldap_groups(self, groups, node=None):\n+    \"\"\"Add multiple new groups to the LDAP server.\n+    \"\"\"\n+    try:\n+        _groups = []\n+        for group in groups:\n+            with By(f\"adding group {group['cn']}\"):\n+                _groups.append(add_group_to_ldap(**group, node=node))\n+        yield _groups\n+    finally:\n+        with Finally(f\"I delete groups from LDAP\"):\n+            for _group in _groups:\n+                delete_group_from_ldap(_group, node=node)\n+\n+@TestStep(Given)\n+def add_ldap_external_user_directory(self, server, roles=None, role_mappings=None,\n+        config_d_dir=\"/etc/clickhouse-server/config.d\",\n+        config_file=None, timeout=60, restart=True, config=None):\n+    \"\"\"Add LDAP external user directory.\n+    \"\"\"\n+    if config_file is None:\n+        config_file = f\"ldap_external_user_directory_with_role_mapping_{getuid()}.xml\"\n+\n+    if config is None:\n+        config = create_ldap_external_user_directory_config_content(server=server, roles=roles,\n+            role_mappings=role_mappings, config_d_dir=config_d_dir, config_file=config_file)\n+\n+    return add_config(config, restart=restart)\n+\n+@TestStep(Given)\n+def add_rbac_roles(self, roles):\n+    \"\"\"Add RBAC roles.\n+    \"\"\"\n+    with rbac_roles(*roles) as _roles:\n+        yield _roles\n+\n+@TestStep(Given)\n+def add_rbac_users(self, users):\n+    \"\"\"Add RBAC users.\n+    \"\"\"\n+    with rbac_users(*users) as _users:\n+        yield _users\n+\n+@TestStep(Given)\n+def add_ldap_users(self, users, node=None):\n+    \"\"\"Add LDAP users.\n+    \"\"\"\n+    with ldap_users(*users, node=node) as _users:\n+        yield _users\n+\n+def add_group_to_ldap(cn, gidnumber=None, node=None, _gidnumber=[600], exitcode=0):\n+    \"\"\"Add new group entry to LDAP.\n+    \"\"\"\n+    _gidnumber[0] += 1\n+\n+    if node is None:\n+        node = current().context.ldap_node\n+\n+    if gidnumber is None:\n+        gidnumber = _gidnumber[0]\n+\n+    group = {\n+        \"dn\": f\"cn={cn},ou=groups,dc=company,dc=com\",\n+        \"objectclass\": [\"top\", \"groupOfUniqueNames\"],\n+        \"uniquemember\": \"cn=admin,dc=company,dc=com\",\n+        \"_server\": node.name\n+    }\n+\n+    lines = []\n+\n+    for key, value in list(group.items()):\n+        if key.startswith(\"_\"):\n+            continue\n+        elif type(value) is list:\n+            for v in value:\n+                lines.append(f\"{key}: {v}\")\n+        else:\n+            lines.append(f\"{key}: {value}\")\n+\n+    ldif = \"\\n\".join(lines)\n+\n+    r = node.command(\n+        f\"echo -e \\\"{ldif}\\\" | ldapadd -x -H ldap://localhost -D \\\"cn=admin,dc=company,dc=com\\\" -w admin\")\n+\n+    if exitcode is not None:\n+        assert r.exitcode == exitcode, error()\n+\n+    return group\n+\n+def delete_group_from_ldap(group, node=None, exitcode=0):\n+    \"\"\"Delete group entry from LDAP.\n+    \"\"\"\n+    if node is None:\n+        node = current().context.ldap_node\n+\n+    with By(f\"deleting group {group['dn']}\"):\n+        r = node.command(\n+            f\"ldapdelete -x -H ldap://localhost -D \\\"cn=admin,dc=company,dc=com\\\" -w admin \\\"{group['dn']}\\\"\")\n+\n+    if exitcode is not None:\n+        assert r.exitcode == exitcode, error()\n+\n+def fix_ldap_permissions(node=None, exitcode=0):\n+    \"\"\"Fix LDAP access permissions.\n+    \"\"\"\n+    if node is None:\n+        node = current().context.ldap_node\n+\n+    ldif = (\n+        \"dn: olcDatabase={1}mdb,cn=config\\n\"\n+        \"changetype: modify\\n\"\n+        \"delete: olcAccess\\n\"\n+        \"-\\n\"\n+        \"add: olcAccess\\n\"\n+        \"olcAccess: to attrs=userPassword,shadowLastChange by self write by dn=\\\\\\\"cn=admin,dc=company,dc=com\\\\\\\" write by anonymous auth by * none\\n\"\n+        \"olcAccess: to * by self write by dn=\\\\\\\"cn=admin,dc=company,dc=com\\\\\\\" read by users read by * none\"\n+    )\n+\n+    r = node.command(\n+        f\"echo -e \\\"{ldif}\\\" | ldapmodify -Y EXTERNAL -Q -H ldapi:///\")\n+\n+    if exitcode is not None:\n+        assert r.exitcode == exitcode, error()\n+\n+def add_user_to_group_in_ldap(user, group, node=None, exitcode=0):\n+    \"\"\"Add user to a group in LDAP.\n+    \"\"\"\n+    if node is None:\n+        node = current().context.ldap_node\n+\n+    ldif = (f\"dn: {group['dn']}\\n\"\n+        \"changetype: modify\\n\"\n+        \"add: uniquemember\\n\"\n+        f\"uniquemember: {user['dn']}\")\n+\n+    with By(f\"adding user {user['dn']} to group {group['dn']}\"):\n+        r = node.command(\n+            f\"echo -e \\\"{ldif}\\\" | ldapmodify -x -H ldap://localhost -D \\\"cn=admin,dc=company,dc=com\\\" -w admin\")\n+\n+    if exitcode is not None:\n+        assert r.exitcode == exitcode, error()\n+\n+def delete_user_from_group_in_ldap(user, group, node=None, exitcode=0):\n+    \"\"\"Delete user from a group in LDAP.\n+    \"\"\"\n+    if node is None:\n+        node = current().context.ldap_node\n+\n+    ldif = (f\"dn: {group['dn']}\\n\"\n+        \"changetype: modify\\n\"\n+        \"delete: uniquemember\\n\"\n+        f\"uniquemember: {user['dn']}\")\n+\n+    with By(f\"deleting user {user['dn']} from group {group['dn']}\"):\n+        r = node.command(\n+            f\"echo -e \\\"{ldif}\\\" | ldapmodify -x -H ldap://localhost -D \\\"cn=admin,dc=company,dc=com\\\" -w admin\")\n+\n+    if exitcode is not None:\n+        assert r.exitcode == exitcode, error()\n+\n+def create_xml_config_content(entries, config_d_dir=\"/etc/clickhouse-server/config.d\",\n+        config_file=\"ldap_external_user_directories.xml\"):\n+    \"\"\"Create XML configuration file from a dictionary.\n+    \"\"\"\n+    uid = getuid()\n+    path = os.path.join(config_d_dir, config_file)\n+    name = config_file\n+    root = xmltree.Element(\"yandex\")\n+    root.append(xmltree.Comment(text=f\"config uid: {uid}\"))\n+\n+    def create_xml_tree(entries, root):\n+        for k,v in entries.items():\n+            if type(v) is dict:\n+                xml_element = xmltree.Element(k)\n+                create_xml_tree(v, xml_element)\n+                root.append(xml_element)\n+            elif type(v) in (list, tuple):\n+                xml_element = xmltree.Element(k)\n+                for e in v:\n+                    create_xml_tree(e, xml_element)\n+                root.append(xml_element)\n+            else:\n+                xml_append(root, k, v)\n+\n+    create_xml_tree(entries, root)\n+    xml_indent(root)\n+    content = xml_with_utf8 + str(xmltree.tostring(root, short_empty_elements=False, encoding=\"utf-8\"), \"utf-8\")\n+\n+    return Config(content, path, name, uid, \"config.xml\")\n+\n+def create_ldap_external_user_directory_config_content(server=None, roles=None, role_mappings=None, **kwargs):\n+    \"\"\"Create LDAP external user directory configuration file content.\n+    \"\"\"\n+    entries = {\n+        \"user_directories\": {\n+            \"ldap\": {\n+            }\n+        }\n+    }\n+\n+    entries[\"user_directories\"][\"ldap\"] = []\n+\n+    if server:\n+        entries[\"user_directories\"][\"ldap\"].append({\"server\": server})\n+\n+    if roles:\n+        entries[\"user_directories\"][\"ldap\"].append({\"roles\": [{r: None} for r in roles]})\n+\n+    if role_mappings:\n+        for role_mapping in role_mappings:\n+            entries[\"user_directories\"][\"ldap\"].append({\"role_mapping\": role_mapping})\n+\n+    return create_xml_config_content(entries, **kwargs)\n+\n+def create_entries_ldap_external_user_directory_config_content(entries, **kwargs):\n+    \"\"\"Create LDAP external user directory configuration file content.\n+    \"\"\"\n+    return create_xml_config_content(entries, **kwargs)\n\\ No newline at end of file\ndiff --git a/tests/testflows/ldap/role_mapping/tests/mapping.py b/tests/testflows/ldap/role_mapping/tests/mapping.py\nnew file mode 100644\nindex 000000000000..971881997821\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/tests/mapping.py\n@@ -0,0 +1,1372 @@\n+# -*- coding: utf-8 -*-\n+from testflows.core import *\n+from testflows.asserts import error\n+\n+from multiprocessing.dummy import Pool\n+\n+from ldap.role_mapping.requirements import *\n+from ldap.role_mapping.tests.common import *\n+from ldap.external_user_directory.tests.common import join, randomword\n+\n+from ldap.external_user_directory.tests.authentications import login_with_valid_username_and_password\n+from ldap.external_user_directory.tests.authentications import login_with_invalid_username_and_valid_password\n+from ldap.external_user_directory.tests.authentications import login_with_valid_username_and_invalid_password\n+\n+def remove_ldap_groups_in_parallel(groups, i, iterations=10):\n+    \"\"\"Remove LDAP groups.\n+    \"\"\"\n+    with When(f\"LDAP groups are removed #{i}\"):\n+        for j in range(iterations):\n+            for group in groups:\n+                with When(f\"I delete group #{j}\", description=f\"{group}\"):\n+                    delete_group_from_ldap(group, exitcode=None)\n+\n+def add_ldap_groups_in_parallel(ldap_user, names, i, iterations=10):\n+    \"\"\"Add LDAP groups.\n+    \"\"\"\n+    with When(f\"LDAP groups are added #{i}\"):\n+        for j in range(iterations):\n+            for name in names:\n+                with When(f\"I add group {name} #{j}\", description=f\"{name}\"):\n+                    group = add_group_to_ldap(cn=name, exitcode=None)\n+\n+                    with When(f\"I add user to the group\"):\n+                        add_user_to_group_in_ldap(user=ldap_user, group=group, exitcode=None)\n+\n+def add_user_to_ldap_groups_in_parallel(ldap_user, groups, i, iterations=10):\n+    \"\"\"Add user to LDAP groups.\n+    \"\"\"\n+    with When(f\"user is added to LDAP groups #{i}\"):\n+        for j in range(iterations):\n+            for group in groups:\n+                with When(f\"I add user to the group {group['dn']} #{j}\"):\n+                    add_user_to_group_in_ldap(user=ldap_user, group=group, exitcode=None)\n+\n+def remove_user_from_ldap_groups_in_parallel(ldap_user, groups, i, iterations=10):\n+    \"\"\"Remove user from LDAP groups.\n+    \"\"\"\n+    with When(f\"user is removed from LDAP groups #{i}\"):\n+        for j in range(iterations):\n+            for group in groups:\n+                with When(f\"I remove user from the group {group['dn']} #{j}\"):\n+                    delete_user_from_group_in_ldap(user=ldap_user, group=group, exitcode=None)\n+\n+def add_roles_in_parallel(role_names, i, iterations=10):\n+    \"\"\"Add roles.\n+    \"\"\"\n+    with When(f\"roles are added #{i}\"):\n+        for j in range(iterations):\n+            for role_name in role_names:\n+                with When(f\"I add role {role_name} #{j}\"):\n+                    current().context.node.query(f\"CREATE ROLE OR REPLACE {role_name}\")\n+\n+def remove_roles_in_parallel(role_names, i, iterations=10):\n+    \"\"\"Remove roles.\n+    \"\"\"\n+    with When(f\"roles are removed #{i}\"):\n+        for j in range(iterations):\n+            for role_name in role_names:\n+                with When(f\"I remove role {role_name} #{j}\"):\n+                    current().context.node.query(f\"DROP ROLE IF EXISTS {role_name}\")\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Map_MultipleRoles(\"1.0\")\n+)\n+def multiple_roles(self, ldap_server, ldap_user):\n+    \"\"\"Check that users authenticated using LDAP external user directory\n+    can be assigned multiple LDAP mapped roles.\n+    \"\"\"\n+    uid = getuid()\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\":\"\"\n+        }\n+    ]\n+\n+    with Given(\"I add LDAP groups\"):\n+        groups = add_ldap_groups(groups=({\"cn\": f\"role0_{uid}\"}, {\"cn\": f\"role1_{uid}\"}))\n+\n+    with And(\"I add LDAP user to each LDAP group\"):\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[0])\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[1])\n+\n+    with And(\"I add RBAC roles\"):\n+        roles = add_rbac_roles(roles=(f\"role0_{uid}\", f\"role1_{uid}\"))\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as an LDAP user\"):\n+        r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+            (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])])\n+\n+    with Then(\"I expect the user to have mapped LDAP roles\"):\n+        with By(f\"checking that first role is assigned\", description=f\"{roles[0]}\"):\n+            assert roles[0] in r.output, error()\n+        with And(f\"checking that second role is also assigned\", description=f\"{roles[1]}\"):\n+            assert roles[1] in r.output, error()\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_WithFixedRoles(\"1.0\")\n+)\n+def with_fixed_roles(self, ldap_server, ldap_user):\n+    \"\"\"Check that LDAP users can be assigned roles dynamically\n+    and statically using the `<roles>` section.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+    fixed_role_name = f\"role_fixed_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+\n+    with Given(\"I add LDAP group\"):\n+        groups = add_ldap_groups(groups=({\"cn\": role_name},))\n+\n+    with And(\"I add LDAP user to the group\"):\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[0])\n+\n+    with And(\"I add matching RBAC role\"):\n+        mapped_roles = add_rbac_roles(roles=(f\"{role_name}\",))\n+\n+    with And(\"I add an RBAC role that will be added statically\"):\n+        roles = add_rbac_roles(roles=(f\"{fixed_role_name}\",))\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, roles=roles, restart=True)\n+\n+    with When(f\"I login as an LDAP user\"):\n+        r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+            (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])])\n+\n+    with Then(\"I expect the user to have mapped and fixed roles\"):\n+        with By(\"checking that mapped role is assigned\"):\n+            assert mapped_roles[0].strip(\"'\") in r.output, error()\n+        with And(\"checking that fixed role is assigned\"):\n+            assert roles[0] in r.output, error()\n+\n+@TestOutline\n+def map_role(self, role_name, ldap_server, ldap_user, rbac_role_name=None, role_mappings=None):\n+    \"\"\"Check that we can map a role with a given name.\n+    \"\"\"\n+    if role_mappings is None:\n+        role_mappings = [\n+            {\n+                \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+                \"attribute\": \"cn\",\n+                \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+                \"prefix\": \"\"\n+            }\n+        ]\n+\n+    if rbac_role_name is None:\n+        rbac_role_name = role_name\n+\n+    with Given(\"I add LDAP group\"):\n+        groups = add_ldap_groups(groups=({\"cn\": role_name},))\n+\n+    with And(\"I add LDAP user to the group\"):\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[0])\n+\n+    with And(\"I add matching RBAC role\"):\n+        roles = add_rbac_roles(roles=(f\"'{rbac_role_name}'\",))\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as an LDAP user\"):\n+        r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+            (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])])\n+\n+    with Then(\"I expect the user to have mapped LDAP role\"):\n+        with By(f\"checking that the role is assigned\", description=f\"{role_name}\"):\n+            assert roles[0].strip(\"'\") in r.output, error()\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_WithUTF8Characters(\"1.0\")\n+)\n+def role_name_with_utf8_characters(self, ldap_server, ldap_user):\n+    \"\"\"Check that we can map a role that contains UTF8 characters.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}_G\u00e3\u0144d\u00e5\u0142f_Th\u00ea_Gr\u0119\u00e2t\"\n+\n+    map_role(role_name=role_name, ldap_server=ldap_server, ldap_user=ldap_user)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_Long(\"1.0\")\n+)\n+def role_name_with_more_than_128_characters(self, ldap_server, ldap_user):\n+    \"\"\"Check that we can map a role that contains more than 128 characters.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}_{'r'*128}\"\n+\n+    map_role(role_name=role_name, ldap_server=ldap_server, ldap_user=ldap_user)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_WithSpecialXMLCharacters(\"1.0\")\n+)\n+def role_name_with_special_xml_characters(self, ldap_server, ldap_user):\n+    \"\"\"Check that we can map a role that contains special XML\n+    characters that must be escaped.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}_\\\\<\\\\>\"\n+    rbac_role_name = f\"role_{uid}_<>\"\n+\n+    map_role(role_name=role_name, ldap_server=ldap_server, ldap_user=ldap_user, rbac_role_name=rbac_role_name)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Map_Role_Name_WithSpecialRegexCharacters(\"1.0\")\n+)\n+def role_name_with_special_regex_characters(self, ldap_server, ldap_user):\n+    \"\"\"Check that we can map a role that contains special regex\n+    characters that must be escaped.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}_\\\\+.?$\"\n+    rbac_role_name = f\"role_{uid}_+.?$\"\n+\n+    map_role(role_name=role_name, ldap_server=ldap_server, ldap_user=ldap_user, rbac_role_name=rbac_role_name)\n+\n+@TestOutline\n+def map_groups_with_prefixes(self, prefixes, group_names, role_names,\n+        expected, not_expected, ldap_server, ldap_user):\n+    \"\"\"Check that we can map multiple groups to roles whith one or more prefixes.\n+    \"\"\"\n+    role_mappings = []\n+\n+    for prefix in prefixes:\n+        role_mappings.append({\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": prefix\n+        })\n+\n+    with Given(\"I add LDAP group\"):\n+        groups = add_ldap_groups(groups=({\"cn\": name} for name in group_names))\n+\n+    with And(\"I add LDAP user to the group\"):\n+        for group in groups:\n+            add_user_to_group_in_ldap(user=ldap_user, group=group)\n+\n+    with And(\"I add RBAC roles\"):\n+        roles = add_rbac_roles(roles=(f\"'{name}'\" for name in role_names))\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as an LDAP user\"):\n+        r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+            (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])])\n+\n+    with Then(\"I expect the user to have mapped roles\"):\n+        with By(f\"checking that the roles are assigned\", description=f\"{', '.join(expected)}\"):\n+            for name in expected:\n+                assert name in r.output, error()\n+\n+    with And(\"I expect the user not to have mapped roles\"):\n+        with By(f\"checking that the roles are not assigned\", description=f\"{', '.join(not_expected)}\"):\n+            for name in not_expected:\n+                assert name not in r.output, error()\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Syntax(\"1.0\"),\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix(\"1.0\")\n+)\n+def prefix_non_empty(self, ldap_server, ldap_user):\n+    \"\"\"Check that only group names with specified prefix are mapped to roles\n+    when prefix is not empty.\n+    \"\"\"\n+    uid = getuid()\n+\n+    with Given(\"I define group names\"):\n+        group_names=[\n+            f\"clickhouse_role_{uid}\",\n+            f\"role0_{uid}\"\n+        ]\n+\n+    with And(\"I define role names\"):\n+        role_names=[\n+            f\"role_{uid}\",\n+            f\"role0_{uid}\"\n+        ]\n+\n+    with And(\"I define group prefixes to be mapped\"):\n+        prefixes = [\"clickhouse_\"]\n+\n+    with And(\"I define the expected mapped and not mapped roles\"):\n+        expected=[f\"role_{uid}\"]\n+        not_expected=[f\"role0_{uid}\"]\n+\n+    map_groups_with_prefixes(ldap_server=ldap_server, ldap_user=ldap_user,\n+        prefixes=prefixes, group_names=group_names, role_names=role_names,\n+        expected=expected, not_expected=not_expected)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_Default(\"1.0\")\n+)\n+def prefix_default_value(self, ldap_server, ldap_user):\n+    \"\"\"Check that when prefix is not specified the default value of prefix\n+    is empty and therefore ldap groups are mapped directly to roles.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+        }\n+    ]\n+\n+    map_role(role_name=role_name, ldap_server=ldap_server, ldap_user=ldap_user, role_mappings=role_mappings)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_WithUTF8Characters(\"1.0\")\n+)\n+def prefix_with_utf8_characters(self, ldap_server, ldap_user):\n+    \"\"\"Check that we can map a role when prefix contains UTF8 characters.\n+    \"\"\"\n+    uid = getuid()\n+\n+    with Given(\"I define group names\"):\n+        group_names=[\n+            f\"G\u00e3\u0144d\u00e5\u0142f_Th\u00ea_Gr\u0119\u00e2t_role_{uid}\",\n+            f\"role0_{uid}\"\n+        ]\n+\n+    with And(\"I define role names\"):\n+        role_names=[\n+            f\"role_{uid}\",\n+            f\"role0_{uid}\"\n+        ]\n+\n+    with And(\"I define group prefixes to be mapped\"):\n+        prefixes = [\"G\u00e3\u0144d\u00e5\u0142f_Th\u00ea_Gr\u0119\u00e2t_\"]\n+\n+    with And(\"I define the expected mapped and not mapped roles\"):\n+        expected=[f\"role_{uid}\"]\n+        not_expected=[f\"role0_{uid}\"]\n+\n+    map_groups_with_prefixes(ldap_server=ldap_server, ldap_user=ldap_user,\n+        prefixes=prefixes, group_names=group_names, role_names=role_names,\n+        expected=expected, not_expected=not_expected)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_SpecialCharactersEscaping(\"1.0\"),\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_WithSpecialXMLCharacters(\"1.0\")\n+)\n+def prefix_with_special_xml_characters(self, ldap_server, ldap_user):\n+    \"\"\"Check that we can map a role when prefix contains special XML characters.\n+    \"\"\"\n+    uid = getuid()\n+\n+    with Given(\"I define group names\"):\n+        group_names=[\n+            f\"clickhouse\\\\<\\\\>_role_{uid}\",\n+            f\"role0_{uid}\"\n+        ]\n+\n+    with And(\"I define role names\"):\n+        role_names=[\n+            f\"role_{uid}\",\n+            f\"role0_{uid}\"\n+        ]\n+\n+    with And(\"I define group prefixes to be mapped\"):\n+        prefixes = [\"clickhouse<>_\"]\n+\n+    with And(\"I define the expected mapped and not mapped roles\"):\n+        expected=[f\"role_{uid}\"]\n+        not_expected=[f\"role0_{uid}\"]\n+\n+    map_groups_with_prefixes(ldap_server=ldap_server, ldap_user=ldap_user,\n+        prefixes=prefixes, group_names=group_names, role_names=role_names,\n+        expected=expected, not_expected=not_expected)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_Prefix_WithSpecialRegexCharacters(\"1.0\")\n+)\n+def prefix_with_special_regex_characters(self, ldap_server, ldap_user):\n+    \"\"\"Check that we can map a role when prefix contains special regex characters.\n+    \"\"\"\n+    uid = getuid()\n+\n+    with Given(\"I define group names\"):\n+        group_names=[\n+            f\"clickhouse\\\\+.?\\\\$_role_{uid}\",\n+            f\"role0_{uid}\"\n+        ]\n+\n+    with And(\"I define role names\"):\n+        role_names=[\n+            f\"role_{uid}\",\n+            f\"role0_{uid}\"\n+        ]\n+\n+    with And(\"I define group prefixes to be mapped\"):\n+        prefixes = [\"clickhouse+.?\\\\$_\"]\n+\n+    with And(\"I define the expected mapped and not mapped roles\"):\n+        expected=[f\"role_{uid}\"]\n+        not_expected=[f\"role0_{uid}\"]\n+\n+    map_groups_with_prefixes(ldap_server=ldap_server, ldap_user=ldap_user,\n+        prefixes=prefixes, group_names=group_names, role_names=role_names,\n+        expected=expected, not_expected=not_expected)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_MultipleSections(\"1.0\")\n+)\n+def multiple_sections_with_different_prefixes(self, ldap_server, ldap_user):\n+    \"\"\"Check that we can map multiple roles with multiple role mapping sections\n+    that use different prefixes.\n+    \"\"\"\n+    uid = getuid()\n+\n+    with Given(\"I define group names\"):\n+        group_names=[\n+            f\"clickhouse0_role0_{uid}\",\n+            f\"clickhouse1_role1_{uid}\",\n+            f\"role2_{uid}\"\n+        ]\n+\n+    with And(\"I define role names\"):\n+        role_names=[\n+            f\"role0_{uid}\",\n+            f\"role1_{uid}\",\n+            f\"role2_{uid}\"\n+        ]\n+\n+    with And(\"I define group prefixes to be mapped\"):\n+        prefixes = [\"clickhouse0_\", \"clickhouse1_\"]\n+\n+    with And(\"I define the expected mapped and not mapped roles\"):\n+        expected=[f\"role0_{uid}\", f\"role1_{uid}\"]\n+        not_expected=[f\"role2_{uid}\"]\n+\n+    map_groups_with_prefixes(ldap_server=ldap_server, ldap_user=ldap_user,\n+        prefixes=prefixes, group_names=group_names, role_names=role_names,\n+        expected=expected, not_expected=not_expected)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_Removed(\"1.0\")\n+)\n+def group_removed(self, ldap_server, ldap_user):\n+    \"\"\"Check that roles are not mapped after the corresponding LDAP group\n+    is removed.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+\n+    try:\n+        with Given(\"I add LDAP group\"):\n+            group = add_group_to_ldap(**{\"cn\": role_name})\n+\n+        with And(\"I add LDAP user to the group\"):\n+            add_user_to_group_in_ldap(user=ldap_user, group=group)\n+\n+        with And(\"I add matching RBAC role\"):\n+            roles = add_rbac_roles(roles=(f\"{role_name}\",))\n+\n+        with And(\"I add LDAP external user directory configuration\"):\n+            add_ldap_external_user_directory(server=ldap_server,\n+                role_mappings=role_mappings, restart=True)\n+\n+        with When(f\"I login as an LDAP user\"):\n+            r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+                (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])])\n+\n+        with Then(\"I expect the user to have mapped LDAP role\"):\n+            with By(f\"checking that the role is assigned\", description=f\"{role_name}\"):\n+                assert role_name in r.output, error()\n+    finally:\n+        with Finally(\"I remove LDAP group\"):\n+            delete_group_from_ldap(group)\n+\n+    with When(f\"I login as an LDAP user after LDAP group is removed\"):\n+        r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+            (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])])\n+\n+    with Then(\"I expect the user not to have mapped LDAP role\"):\n+        with By(f\"checking that the role is not assigned\", description=f\"{role_name}\"):\n+            assert role_name not in r.output, error()\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_UserRemoved(\"1.0\")\n+)\n+def user_removed_from_group(self, ldap_server, ldap_user):\n+    \"\"\"Check that roles are not mapped after the user has been removed\n+    from the corresponding LDAP group.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+\n+    with Given(\"I add LDAP group\"):\n+        groups = add_ldap_groups(groups=({\"cn\": role_name},))\n+\n+    with And(\"I add LDAP user to the group\"):\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[0])\n+\n+    with And(\"I add matching RBAC role\"):\n+        roles = add_rbac_roles(roles=(f\"{role_name}\",))\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as an LDAP user\"):\n+        r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+            (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])])\n+\n+    with Then(\"I expect the user to have mapped LDAP role\"):\n+        with By(f\"checking that the role is assigned\", description=f\"{role_name}\"):\n+            assert role_name in r.output, error()\n+\n+    with When(\"I remove user from the LDAP group\"):\n+        delete_user_from_group_in_ldap(user=ldap_user, group=groups[0])\n+\n+    with And(f\"I login as an LDAP user after user has been removed from the group\"):\n+        r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+            (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])])\n+\n+    with Then(\"I expect the user not to have mapped LDAP role\"):\n+        with By(f\"checking that the role is not assigned\", description=f\"{role_name}\"):\n+            assert role_name not in r.output, error()\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_NotPresent(\"1.0\")\n+)\n+def role_not_present(self, ldap_server, ldap_user):\n+    \"\"\"Check that LDAP users can still be authenticated even if\n+    the mapped role is not present.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+\n+    with Given(\"I add LDAP group\"):\n+        groups = add_ldap_groups(groups=({\"cn\": role_name},))\n+\n+    with And(\"I add LDAP user to the group for which no matching roles are present\"):\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[0])\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as an LDAP user\"):\n+        r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+            (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])], no_checks=True)\n+\n+    with Then(\"I expect the login to succeed\"):\n+        assert r.exitcode == 0, error()\n+\n+    with And(\"the user not to have any mapped LDAP role\"):\n+        assert r.output == \"\", error()\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_Removed(\"1.0\"),\n+    RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_Readded(\"1.0\")\n+)\n+def role_removed_and_readded(self, ldap_server, ldap_user):\n+    \"\"\"Check that when a mapped role is removed the privileges provided by the role\n+    are revoked from all the authenticated LDAP users and when the role\n+    is added back the privileges to the authenticated LDAP users are re-granted.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+    with Given(\"I add LDAP group\"):\n+        groups = add_ldap_groups(groups=({\"cn\": role_name},))\n+\n+    with And(\"I add LDAP user to the group\"):\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[0])\n+\n+    with And(\"I add matching RBAC role\"):\n+        roles = add_rbac_roles(roles=(f\"{role_name}\",))\n+\n+    with And(\"I create a table for which the role will provide privilege\"):\n+        table_name = create_table(name=f\"table_{uid}\",\n+            create_statement=\"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\")\n+\n+    with And(\"I grant select privilege on the table to the role\"):\n+        self.context.node.query(f\"GRANT SELECT ON {table_name} TO {role_name}\")\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as LDAP user using clickhouse-client\"):\n+        with self.context.cluster.shell(node=self.context.node.name) as shell:\n+            with shell(\n+                    f\"TERM=dumb clickhouse client --user {ldap_user['username']} --password {ldap_user['password']}\",\n+                    asynchronous=True, name=\"client\") as client:\n+                client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I execute SHOW GRANTS\"):\n+                    client.app.send(f\"SHOW GRANTS\")\n+\n+                    with Then(\"I expect the user to have the mapped role\"):\n+                        client.app.expect(f\"{role_name}\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I execute select on the table\"):\n+                    client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                    with Then(\"I expect to get no errors\"):\n+                        client.app.expect(\"Ok\\.\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I remove the role that grants the privilege\"):\n+                    self.context.node.query(f\"DROP ROLE {role_name}\")\n+\n+                with And(\"I re-execute select on the table\"):\n+                    client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                    with Then(\"I expect to get not enough privileges error\"):\n+                        client.app.expect(f\"DB::Exception: {ldap_user['username']}: Not enough privileges.\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I add the role that grant the privilege back\"):\n+                    self.context.node.query(f\"CREATE ROLE {role_name}\")\n+                    self.context.node.query(f\"GRANT SELECT ON {table_name} TO {role_name}\")\n+\n+                with And(\"I execute select on the table after role is added back\"):\n+                    client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                    with Then(\"I expect to get no errors\"):\n+                        client.app.expect(\"Ok\\.\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_NewPrivilege(\"1.0\"),\n+    RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_RemovedPrivilege(\"1.0\")\n+)\n+def privilege_new_and_removed(self, ldap_server, ldap_user):\n+    \"\"\"Check that when a new privilege is added to the mapped role\n+    it is granted to all authenticated LDAP users and when\n+    the privilege is removed from the role it is also revoked\n+    from all authenticated LDAP users.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+    with Given(\"I add LDAP group\"):\n+        groups = add_ldap_groups(groups=({\"cn\": role_name},))\n+\n+    with And(\"I add LDAP user to the group\"):\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[0])\n+\n+    with And(\"I add matching RBAC role\"):\n+        roles = add_rbac_roles(roles=(f\"{role_name}\",))\n+\n+    with And(\"I create a table for which the role will provide privilege\"):\n+        table_name = create_table(name=f\"table_{uid}\",\n+            create_statement=\"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\")\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as LDAP user using clickhouse-client\"):\n+        with self.context.cluster.shell(node=self.context.node.name) as shell:\n+            with shell(\n+                    f\"TERM=dumb clickhouse client --user {ldap_user['username']} --password {ldap_user['password']}\",\n+                    asynchronous=True, name=\"client\") as client:\n+                client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I execute SHOW GRANTS\"):\n+                    client.app.send(f\"SHOW GRANTS\")\n+\n+                    with Then(\"I expect the user to have the mapped role\"):\n+                        client.app.expect(f\"{role_name}\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with And(\"I execute select on the table when the mapped role does not provide this privilege\"):\n+                    client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                    with Then(\"I expect to get not enough privileges error\"):\n+                        client.app.expect(f\"DB::Exception: {ldap_user['username']}: Not enough privileges.\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I grant select privilege on the table to the mapped role\"):\n+                    self.context.node.query(f\"GRANT SELECT ON {table_name} TO {role_name}\")\n+\n+                with And(\"I execute select on the table\"):\n+                    client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                    with Then(\"I expect to get no errors\"):\n+                        client.app.expect(\"Ok\\.\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I remove the privilege from the mapped role\"):\n+                    self.context.node.query(f\"REVOKE SELECT ON {table_name} FROM {role_name}\")\n+\n+                with And(\"I re-execute select on the table\"):\n+                    client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                    with Then(\"I expect to get not enough privileges error\"):\n+                        client.app.expect(f\"DB::Exception: {ldap_user['username']}: Not enough privileges.\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_Added(\"1.0\")\n+)\n+def role_added(self, ldap_server, ldap_user):\n+    \"\"\"Check that when the mapped role is not present during LDAP user authentication but\n+    is later added then the authenticated LDAP users is granted the privileges provided\n+    by the mapped role.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+    with Given(\"I add LDAP group\"):\n+        groups = add_ldap_groups(groups=({\"cn\": role_name},))\n+\n+    with And(\"I add LDAP user to the group\"):\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[0])\n+\n+    with And(\"I create a table for which the role will provide privilege\"):\n+        table_name = create_table(name=f\"table_{uid}\",\n+            create_statement=\"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\")\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as LDAP user using clickhouse-client\"):\n+        with self.context.cluster.shell(node=self.context.node.name) as shell:\n+            with shell(\n+                    f\"TERM=dumb clickhouse client --user {ldap_user['username']} --password {ldap_user['password']}\",\n+                    asynchronous=True, name=\"client\") as client:\n+                client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I execute SHOW GRANTS\"):\n+                    client.app.send(f\"SHOW GRANTS\")\n+\n+                    with Then(\"I expect the user not to have any mapped role\"):\n+                        client.app.expect(f\"Ok\\.\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with And(\"I execute select on the table\"):\n+                    client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                    with Then(\"I expect to get not enough privileges error\"):\n+                        client.app.expect(f\"DB::Exception: {ldap_user['username']}: Not enough privileges.\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I add the role that grant the privilege\"):\n+                    self.context.node.query(f\"CREATE ROLE {role_name}\")\n+                    self.context.node.query(f\"GRANT SELECT ON {table_name} TO {role_name}\")\n+\n+                with And(\"I execute select on the table after role is added\"):\n+                    client.app.send(f\"SELECT * FROM {table_name} LIMIT 1\")\n+\n+                    with Then(\"I expect to get no errors\"):\n+                        client.app.expect(\"Ok\\.\")\n+                        client.app.expect(\"clickhouse1 :\\) \")\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_New(\"1.0\")\n+)\n+def role_new(self, ldap_server, ldap_user):\n+    \"\"\"Check that no new roles can be granted to LDAP authenticated users.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+\n+    message = f\"DB::Exception: Cannot update user `{ldap_user['username']}` in ldap because this storage is readonly\"\n+    exitcode = 239\n+\n+    with Given(\"I a have RBAC role that is not mapped\"):\n+        roles = add_rbac_roles(roles=(f\"{role_name}\",))\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as LDAP user using clickhouse-client\"):\n+        with self.context.cluster.shell(node=self.context.node.name) as shell:\n+            with shell(\n+                    f\"TERM=dumb clickhouse client --user {ldap_user['username']} --password {ldap_user['password']}\",\n+                    asynchronous=True, name=\"client\") as client:\n+                client.app.expect(\"clickhouse1 :\\) \")\n+\n+                with When(\"I try to grant new role to user\"):\n+                    self.context.node.query(f\"GRANT {role_name} TO {ldap_user['username']}\",\n+                        message=message, exitcode=exitcode)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_UserDirectory_RoleMapping_MultipleSections_IdenticalParameters(\"1.0\")\n+)\n+def multiple_sections_with_identical_parameters(self, ldap_server, ldap_user):\n+    \"\"\"Check behaviour when multiple role mapping sections\n+    have exactly the same parameters.\n+    \"\"\"\n+    uid = getuid()\n+    role_name = f\"role_{uid}\"\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ] * 4\n+\n+    with Given(\"I add LDAP group\"):\n+        groups = add_ldap_groups(groups=({\"cn\": role_name},))\n+\n+    with And(\"I add LDAP user to the group\"):\n+        add_user_to_group_in_ldap(user=ldap_user, group=groups[0])\n+\n+    with And(\"I add matching RBAC role\"):\n+        roles = add_rbac_roles(roles=(f\"{role_name}\",))\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    with When(f\"I login as an LDAP user\"):\n+        r = self.context.node.query(f\"SHOW GRANTS\", settings=[\n+            (\"user\", ldap_user[\"username\"]), (\"password\", ldap_user[\"password\"])])\n+\n+    with Then(\"I expect the user to have mapped LDAP role\"):\n+        with By(f\"checking that the role is assigned\", description=f\"{role_name}\"):\n+            assert roles[0].strip(\"'\") in r.output, error()\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_RemovedAndAdded_Parallel(\"1.0\")\n+)\n+def group_removed_and_added_in_parallel(self, ldap_server, ldap_user, count=20, timeout=200):\n+    \"\"\"Check that user can be authenticated successfully when LDAP groups\n+    are removed and added in parallel.\n+    \"\"\"\n+    uid = getuid()\n+    role_names = [f\"role{i}_{uid}\" for i in range(count)]\n+    users = [{\"cn\": ldap_user[\"username\"], \"userpassword\": ldap_user[\"password\"]}]\n+    groups = []\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+\n+    try:\n+        with Given(\"I initially add all LDAP groups\"):\n+            for role_name in role_names:\n+                with When(f\"I add LDAP groop {role_name}\"):\n+                    group = add_group_to_ldap(**{\"cn\": role_name})\n+                with And(f\"I add LDAP user to the group {role_name}\"):\n+                    add_user_to_group_in_ldap(user=ldap_user, group=group)\n+                groups.append(group)\n+\n+        with And(\"I add RBAC roles\"):\n+            add_rbac_roles(roles=role_names)\n+\n+        with And(\"I add LDAP external user directory configuration\"):\n+            add_ldap_external_user_directory(server=ldap_server,\n+                role_mappings=role_mappings, restart=True)\n+\n+        tasks = []\n+        try:\n+            with When(\"user try to login while LDAP groups are added and removed in parallel\"):\n+                p = Pool(15)\n+                for i in range(15):\n+                    tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))\n+                    tasks.append(p.apply_async(remove_ldap_groups_in_parallel, (groups, i, 10,)))\n+                    tasks.append(p.apply_async(add_ldap_groups_in_parallel,(ldap_user, role_names, i, 10,)))\n+\n+        finally:\n+            with Finally(\"it should work\", flags=TE):\n+                join(tasks, timeout)\n+    finally:\n+        with Finally(\"I clean up all LDAP groups\"):\n+            for group in groups:\n+                delete_group_from_ldap(group, exitcode=None)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_LDAP_Group_UserRemovedAndAdded_Parallel(\"1.0\")\n+)\n+def user_removed_and_added_in_ldap_groups_in_parallel(self, ldap_server, ldap_user, count=20, timeout=200):\n+    \"\"\"Check that user can be authenticated successfully when it is\n+    removed and added from mapping LDAP groups in parallel.\n+    \"\"\"\n+    uid = getuid()\n+    role_names = [f\"role{i}_{uid}\" for i in range(count)]\n+    users = [{\"cn\": ldap_user[\"username\"], \"userpassword\": ldap_user[\"password\"]}]\n+    groups = [{\"cn\": role_name} for role_name in role_names]\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+\n+    with Given(\"I add all LDAP groups\"):\n+        groups = add_ldap_groups(groups=groups)\n+\n+        for group in groups:\n+            with And(f\"I add LDAP user to the group {group['dn']}\"):\n+                add_user_to_group_in_ldap(user=ldap_user, group=group)\n+\n+    with And(\"I add RBAC roles\"):\n+        add_rbac_roles(roles=role_names)\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    tasks = []\n+    try:\n+        with When(\"user try to login while user is added and removed from LDAP groups in parallel\"):\n+            p = Pool(15)\n+            for i in range(15):\n+                tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))\n+                tasks.append(p.apply_async(remove_user_from_ldap_groups_in_parallel, (ldap_user, groups, i, 1,)))\n+                tasks.append(p.apply_async(add_user_to_ldap_groups_in_parallel, (ldap_user, groups, i, 1,)))\n+\n+    finally:\n+        with Finally(\"it should work\", flags=TE):\n+            join(tasks, timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_RBAC_Role_RemovedAndAdded_Parallel(\"1.0\")\n+)\n+def roles_removed_and_added_in_parallel(self, ldap_server, ldap_user, count=20, timeout=200):\n+    \"\"\"Check that user can be authenticated successfully when roles that are mapped\n+    by the LDAP groups are removed and added in parallel.\n+    \"\"\"\n+    uid = getuid()\n+    role_names = [f\"role{i}_{uid}\" for i in range(count)]\n+    users = [{\"cn\": ldap_user[\"username\"], \"userpassword\": ldap_user[\"password\"]}]\n+    groups = [{\"cn\": role_name} for role_name in role_names]\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"\"\n+        }\n+    ]\n+\n+    fail(\"known bug that needs to be investigated\")\n+\n+    with Given(\"I add all LDAP groups\"):\n+        groups = add_ldap_groups(groups=groups)\n+        for group in groups:\n+            with And(f\"I add LDAP user to the group {group['dn']}\"):\n+                add_user_to_group_in_ldap(user=ldap_user, group=group)\n+\n+    with And(\"I add RBAC roles\"):\n+        add_rbac_roles(roles=role_names)\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    tasks = []\n+    try:\n+        with When(\"user try to login while mapped roles are added and removed in parallel\"):\n+            p = Pool(15)\n+            for i in range(15):\n+                tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))\n+                tasks.append(p.apply_async(remove_roles_in_parallel, (role_names, i, 10,)))\n+                tasks.append(p.apply_async(add_roles_in_parallel, (role_names, i, 10,)))\n+\n+    finally:\n+        with Finally(\"it should work\", flags=TE):\n+            join(tasks, timeout)\n+\n+        with And(\"I clean up all the roles\"):\n+            for role_name in role_names:\n+                with By(f\"dropping role {role_name}\", flags=TE):\n+                    self.context.node.query(f\"DROP ROLE IF EXISTS {role_name}\")\n+\n+@TestOutline\n+def parallel_login(self, ldap_server, ldap_user, user_count=10, timeout=200, role_count=10):\n+    \"\"\"Check that login of valid and invalid LDAP authenticated users\n+    with mapped roles works in parallel.\n+    \"\"\"\n+    uid = getuid()\n+\n+    role_names = [f\"role{i}_{uid}\" for i in range(role_count)]\n+    users = [{\"cn\": f\"parallel_user{i}\", \"userpassword\": randomword(20)} for i in range(user_count)]\n+    groups = [{\"cn\": f\"clickhouse_{role_name}\"} for role_name in role_names]\n+\n+    role_mappings = [\n+        {\n+            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+            \"attribute\": \"cn\",\n+            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+            \"prefix\": \"clickhouse_\"\n+        }\n+    ]\n+\n+    with Given(\"I add LDAP users\"):\n+        users = add_ldap_users(users=users)\n+\n+    with And(\"I add all LDAP groups\"):\n+        groups = add_ldap_groups(groups=groups)\n+\n+    for group in groups:\n+        for user in users:\n+            with And(f\"I add LDAP user {user['dn']} to the group {group['dn']}\"):\n+                add_user_to_group_in_ldap(user=user, group=group)\n+\n+    with And(\"I add RBAC roles\"):\n+        add_rbac_roles(roles=role_names)\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=ldap_server,\n+            role_mappings=role_mappings, restart=True)\n+\n+    tasks = []\n+    try:\n+        with When(\"users try to login in parallel\", description=\"\"\"\n+            * with valid username and password\n+            * with invalid username and valid password\n+            * with valid username and invalid password\n+            \"\"\"):\n+            p = Pool(15)\n+            for i in range(25):\n+                tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))\n+                tasks.append(p.apply_async(login_with_valid_username_and_invalid_password, (users, i, 50,)))\n+                tasks.append(p.apply_async(login_with_invalid_username_and_valid_password, (users, i, 50,)))\n+\n+    finally:\n+        with Then(\"it should work\"):\n+            join(tasks, timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel(\"1.0\"),\n+    RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_ValidAndInvalid(\"1.0\")\n+)\n+def parallel_login_of_multiple_users(self, ldap_server, ldap_user, timeout=200, role_count=10):\n+    \"\"\"Check that valid and invalid logins of multiple LDAP authenticated users\n+    with mapped roles works in parallel.\n+    \"\"\"\n+    parallel_login(user_count=10, ldap_user=ldap_user,ldap_server=ldap_server,\n+        timeout=timeout, role_count=role_count)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_SameUser(\"1.0\"),\n+    RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_ValidAndInvalid(\"1.0\")\n+)\n+def parallel_login_of_the_same_user(self, ldap_server, ldap_user, timeout=200, role_count=10):\n+    \"\"\"Check that valid and invalid logins of the same LDAP authenticated user\n+    with mapped roles works in parallel.\n+    \"\"\"\n+    parallel_login(user_count=10, ldap_user=ldap_user,ldap_server=ldap_server,\n+        timeout=timeout, role_count=role_count)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_MultipleServers(\"1.0\"),\n+    RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_ValidAndInvalid(\"1.0\")\n+)\n+def parallel_login_of_ldap_users_with_multiple_servers(self, ldap_server, ldap_user, timeout=200):\n+    \"\"\"Check that valid and invalid logins of multiple LDAP users that have mapped roles\n+    works in parallel using multiple LDAP external user directories.\n+    \"\"\"\n+    parallel_login_with_multiple_servers(ldap_server=ldap_server, ldap_user=ldap_user,\n+        user_count=10, role_count=10,timeout=timeout, with_ldap_users=True, with_local_users=False)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_LocalAndMultipleLDAP(\"1.0\"),\n+    RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_ValidAndInvalid(\"1.0\")\n+)\n+def parallel_login_of_local_and_ldap_users_with_multiple_servers(self, ldap_server, ldap_user, timeout=200):\n+    \"\"\"Check that valid and invalid logins of local users and LDAP users that have mapped roles\n+    works in parallel using multiple LDAP external user directories.\n+    \"\"\"\n+    parallel_login_with_multiple_servers(ldap_server=ldap_server, ldap_user=ldap_user,\n+        user_count=10, role_count=10, timeout=timeout, with_local_users=True, with_ldap_users=True)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Authentication_Parallel_LocalOnly(\"1.0\")\n+)\n+def parallel_login_of_local_users(self, ldap_server, ldap_user, timeout=200):\n+    \"\"\"Check that valid and invalid logins of local users\n+    works in parallel when multiple LDAP external user directories\n+    with role mapping are configured.\n+    \"\"\"\n+    parallel_login_with_multiple_servers(ldap_server=ldap_server, ldap_user=ldap_user,\n+        user_count=10, role_count=10, timeout=timeout, with_local_users=True, with_ldap_users=False)\n+\n+@TestOutline\n+def parallel_login_with_multiple_servers(self, ldap_server, ldap_user, user_count=10,\n+        role_count=10, timeout=200, with_ldap_users=True, with_local_users=False):\n+    \"\"\"Check that login of valid and invalid local users or LDAP users that have mapped roles\n+    works in parallel using multiple LDAP external user directories.\n+    \"\"\"\n+    uid = getuid()\n+\n+    cluster = self.context.cluster\n+    user_groups = {}\n+\n+    with Given(\"I define role names\"):\n+        role_names = [f\"role{i}_{uid}\" for i in range(role_count)]\n+\n+    with And(\"I define corresponding group names\"):\n+        groups = [{\"cn\": f\"clickhouse_{role_name}\"} for role_name in role_names]\n+\n+    if with_ldap_users:\n+        with And(\"I define a group of users to be created on each LDAP server\"):\n+            user_groups[\"openldap1_users\"] = [\n+                {\"cn\": f\"openldap1_parallel_user{i}_{uid}\", \"userpassword\": randomword(20)} for i in range(user_count)\n+            ]\n+            user_groups[\"openldap2_users\"] = [\n+                {\"cn\": f\"openldap2_parallel_user{i}_{uid}\", \"userpassword\": randomword(20)} for i in range(user_count)\n+            ]\n+\n+    if with_local_users:\n+        with And(\"I define a group of local users to be created\"):\n+            user_groups[\"local_users\"] = [\n+                {\"cn\": f\"local_parallel_user{i}_{uid}\", \"userpassword\": randomword(20)} for i in range(user_count)\n+            ]\n+\n+    with And(\"I have a list of checks that I want to run for each user group\"):\n+        checks = [\n+            login_with_valid_username_and_password,\n+            login_with_valid_username_and_invalid_password,\n+            login_with_invalid_username_and_valid_password\n+        ]\n+\n+    with And(\"I create config file to define LDAP external user directory for each LDAP server\"):\n+        entries = {\n+            \"user_directories\": [\n+                {\"ldap\": [\n+                    {\"server\": \"openldap1\"},\n+                    {\"role_mappings\" : [\n+                        {\n+                            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+                            \"attribute\": \"cn\",\n+                            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+                            \"prefix\": \"clickhouse_\"\n+                        }\n+                    ]}\n+                ]},\n+                {\"ldap\": [\n+                    {\"server\": \"openldap2\"},\n+                    {\"role_mappings\": [\n+                        {\n+                            \"base_dn\": \"ou=groups,dc=company,dc=com\",\n+                            \"attribute\": \"cn\",\n+                            \"search_filter\": \"(&(objectClass=groupOfUniqueNames)(uniquemember={bind_dn}))\",\n+                            \"prefix\": \"clickhouse_\"\n+                        }\n+                    ]}\n+                ]}\n+            ]\n+        }\n+        config = create_entries_ldap_external_user_directory_config_content(entries)\n+\n+    with And(\"I add LDAP external user directory configuration\"):\n+        add_ldap_external_user_directory(server=None, restart=True, config=config)\n+\n+    if with_ldap_users:\n+        with And(\"I add LDAP users to each LDAP server\"):\n+            openldap1_users = add_ldap_users(users=user_groups[\"openldap1_users\"], node=cluster.node(\"openldap1\"))\n+            openldap2_users = add_ldap_users(users=user_groups[\"openldap2_users\"], node=cluster.node(\"openldap2\"))\n+\n+        with And(\"I add all LDAP groups to each LDAP server\"):\n+            openldap1_groups = add_ldap_groups(groups=groups, node=cluster.node(\"openldap1\"))\n+            openldap2_groups = add_ldap_groups(groups=groups, node=cluster.node(\"openldap2\"))\n+\n+        with And(\"I add all users to LDAP groups on the first LDAP server\"):\n+            for group in openldap1_groups:\n+                for user in openldap1_users:\n+                    with By(f\"adding LDAP user {user['dn']} to the group {group['dn']}\"):\n+                        add_user_to_group_in_ldap(user=user, group=group, node=cluster.node(\"openldap1\"))\n+\n+        with And(\"I add all users to LDAP groups on the second LDAP server\"):\n+            for group in openldap2_groups:\n+                for user in openldap2_users:\n+                    with By(f\"adding LDAP user {user['dn']} to the group {group['dn']}\"):\n+                        add_user_to_group_in_ldap(user=user, group=group, node=cluster.node(\"openldap2\"))\n+\n+    with And(\"I add RBAC roles\"):\n+        add_rbac_roles(roles=role_names)\n+\n+    if with_local_users:\n+        with And(\"I add local users\"):\n+            add_rbac_users(users=user_groups[\"local_users\"])\n+\n+        with And(\"I grant the same RBAC roles to local users\"):\n+            for user in user_groups[\"local_users\"]:\n+                for role_name in role_names:\n+                    self.context.node.query(f\"GRANT {role_name} TO {user['cn']}\")\n+\n+    tasks = []\n+\n+    try:\n+        with When(\"users in each group try to login in parallel\", description=\"\"\"\n+            * with valid username and password\n+            * with invalid username and valid password\n+            * with valid username and invalid password\n+            \"\"\"):\n+            p = Pool(15)\n+            for i in range(25):\n+                for users in user_groups.values():\n+                    for check in checks:\n+                        tasks.append(p.apply_async(check, (users, i, 50,)))\n+\n+    finally:\n+        with Then(\"it should work\"):\n+            join(tasks, timeout)\n+\n+@TestFeature\n+@Name(\"mapping\")\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Search(\"1.0\")\n+)\n+def feature(self):\n+    \"\"\"Check role LDAP role mapping.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(\"clickhouse1\")\n+    self.context.ldap_node = self.context.cluster.node(\"openldap1\")\n+\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\",\n+            \"port\": \"389\",\n+            \"enable_tls\": \"no\",\n+            \"bind_dn\": \"cn={user_name},ou=users,dc=company,dc=com\"\n+        },\n+        \"openldap2\": {\n+            \"host\": \"openldap2\",\n+            \"port\": \"636\",\n+            \"enable_tls\": \"yes\",\n+            \"bind_dn\": \"cn={user_name},ou=users,dc=company,dc=com\",\n+            \"tls_require_cert\": \"never\",\n+        }\n+    }\n+\n+    users = [\n+        {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n+         \"dn\": \"cn=user1,ou=users,dc=company,dc=com\"},\n+    ]\n+\n+    with Given(\"I fix LDAP access permissions\"):\n+        fix_ldap_permissions()\n+\n+    with And(\"I add LDAP servers configuration\", description=f\"{servers}\"):\n+        add_ldap_servers_configuration(servers=servers)\n+\n+    for scenario in loads(current_module(), Scenario):\n+        scenario(ldap_server=\"openldap1\", ldap_user=users[0])\ndiff --git a/tests/testflows/ldap/role_mapping/tests/server_config.py b/tests/testflows/ldap/role_mapping/tests/server_config.py\nnew file mode 100644\nindex 000000000000..85fe33f43881\n--- /dev/null\n+++ b/tests/testflows/ldap/role_mapping/tests/server_config.py\n@@ -0,0 +1,78 @@\n+from testflows.core import *\n+from testflows.asserts import error\n+\n+from ldap.role_mapping.requirements import *\n+\n+from ldap.authentication.tests.common import invalid_server_config\n+from ldap.external_user_directory.tests.common import login\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_Server_BindDN(\"1.0\")\n+)\n+def valid_bind_dn(self):\n+    \"\"\"Check that LDAP users can login when `bind_dn` is valid.\n+    \"\"\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"bind_dn\": \"cn={user_name},ou=users,dc=company,dc=com\"\n+        }\n+    }\n+\n+    user = {\n+        \"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n+    }\n+\n+    login(servers, \"openldap1\", user)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_Server_BindDN(\"1.0\")\n+)\n+def invalid_bind_dn(self):\n+    \"\"\"Check that LDAP users can't login when `bind_dn` is invalid.\n+    \"\"\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"bind_dn\": \"cn={user_name},ou=users,dc=company2,dc=com\"\n+        }}\n+\n+    user = {\n+        \"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name.\"\n+    }\n+\n+    login(servers, \"openldap1\", user)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_014_LDAP_RoleMapping_Configuration_Server_BindDN_ConflictWith_AuthDN(\"1.0\")\n+)\n+def bind_dn_conflict_with_auth_dn(self, timeout=60):\n+    \"\"\"Check that an error is returned with both `bind_dn` and\n+    `auth_dn_prefix` and `auth_dn_suffix` are specified at the same time.\n+    \"\"\"\n+    message = \"DB::Exception: Deprecated 'auth_dn_prefix' and 'auth_dn_suffix' entries cannot be used with 'bind_dn' entry\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"bind_dn\": \"cn={user_name},ou=users,dc=company,dc=com\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+\n+    invalid_server_config(servers, message=message, tail=18, timeout=timeout)\n+\n+\n+@TestFeature\n+@Name(\"server config\")\n+def feature(self, node=\"clickhouse1\"):\n+    \"\"\"Check LDAP server configuration.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+    for scenario in loads(current_module(), Scenario):\n+        scenario()\n\\ No newline at end of file\ndiff --git a/tests/testflows/rbac/docker-compose/clickhouse-service.yml b/tests/testflows/rbac/docker-compose/clickhouse-service.yml\nindex 2d79443dcbbd..d5f981ca8b77 100755\n--- a/tests/testflows/rbac/docker-compose/clickhouse-service.yml\n+++ b/tests/testflows/rbac/docker-compose/clickhouse-service.yml\n@@ -20,7 +20,7 @@ services:\n       test: clickhouse client --query='select 1'\n       interval: 10s\n       timeout: 10s\n-      retries: 3\n+      retries: 10\n       start_period: 300s\n     cap_add:\n       - SYS_PTRACE\ndiff --git a/tests/testflows/regression.py b/tests/testflows/regression.py\nindex 6e19e4e49e10..0e9a821cae0f 100755\n--- a/tests/testflows/regression.py\n+++ b/tests/testflows/regression.py\n@@ -14,11 +14,10 @@ def regression(self, local, clickhouse_binary_path, stress=None, parallel=None):\n     \"\"\"\n     args = {\"local\": local, \"clickhouse_binary_path\": clickhouse_binary_path, \"stress\": stress, \"parallel\": parallel}\n \n-#    Feature(test=load(\"example.regression\", \"regression\"))(**args)\n-#    Feature(test=load(\"ldap.regression\", \"regression\"))(**args)\n-#    for i in range(10):\n-#        Feature(test=load(\"rbac.regression\", \"regression\"))(**args)\n-#    Feature(test=load(\"aes_encryption.regression\", \"regression\"))(**args)\n+    Feature(test=load(\"example.regression\", \"regression\"))(**args)\n+    Feature(test=load(\"ldap.regression\", \"regression\"))(**args)\n+    Feature(test=load(\"rbac.regression\", \"regression\"))(**args)\n+    Feature(test=load(\"aes_encryption.regression\", \"regression\"))(**args)\n \n if main():\n     regression()\n",
  "problem_statement": "system.user_directories Can not convert to std::string with ldap server.\n\r\n**How to reproduce**\r\nClickhouse version 20.13.1.5509\r\nconfig.xml:\r\n```\r\n    <!-- LDAP server definitions. -->\r\n    <ldap_servers>\r\n        <my_ldap_server>\r\n           <host>192.168.1.44</host>\r\n           <port>3890</port>\r\n           <auth_dn_prefix>CN=</auth_dn_prefix>\r\n           <auth_dn_suffix>,CN=admin_group,CN=clickhouse,DC=example,DC=com</auth_dn_suffix>\r\n           <enable_tls>no</enable_tls>\r\n        </my_ldap_server>\r\n    </ldap_servers>\r\n\r\n    <user_directories>\r\n        <users_xml>\r\n            <!-- Path to configuration file with predefined users. -->\r\n            <path>users.xml</path>\r\n        </users_xml>\r\n        <local_directory>\r\n            <!-- Path to folder where users created by SQL commands are stored. -->\r\n            <path>/var/lib/clickhouse/access/</path>\r\n        </local_directory>\r\n\r\n        <ldap>\r\n            <server>my_ldap_server</server>\r\n            <roles>\r\n                <admin/>\r\n            </roles>\r\n        </ldap>\r\n    </user_directories>\r\n  ```\r\n```\r\nSELECT *\r\nFROM system.user_directories\r\n\r\n2020.12.23 21:02:59.592291 [ 1718 ] {fc335ba2-415c-4265-9c11-72b1b12475ca} <Debug> executeQuery: (from 127.0.0.1:54954, using old parser) SELECT * FROM system.user_directories;\r\n2020.12.23 21:02:59.592722 [ 1718 ] {fc335ba2-415c-4265-9c11-72b1b12475ca} <Trace> ContextAccess (default): Access granted: SELECT(name, type, params, precedence) ON system.user_directories\r\n2020.12.23 21:02:59.593133 [ 1718 ] {fc335ba2-415c-4265-9c11-72b1b12475ca} <Error> executeQuery: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = Bad cast exception: Can not convert to std::string (version 20.13.1.5509 (official build)) (from 127.0.0.1:54954) (in query: SELECT * FROM system.user_directories;), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Dynamic::VarHolder::convert(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&) const @ 0xcebe55a in /usr/bin/clickhouse\r\n1. std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > Poco::Dynamic::Var::convert<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >() const @ 0xf1112e3 in /usr/bin/clickhouse\r\n2. Poco::JSON::Stringifier::stringify(Poco::Dynamic::Var const&, std::__1::basic_ostream<char, std::__1::char_traits<char> >&, unsigned int, int, int) @ 0x11845f0c in /usr/bin/clickhouse\r\n3. void Poco::JSON::Object::doStringify<std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Poco::Dynamic::Var, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, Poco::Dynamic::Var> > > >(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Poco::Dynamic::Var, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, Poco::Dynamic::Var> > > const&, std::__1::basic_ostream<char, std::__1::char_traits<char> >&, unsigned int, unsigned int) const @ 0x1183a5d2 in /usr/bin/clickhouse\r\n4. DB::LDAPAccessStorage::getStorageParamsJSON() const @ 0xe175f64 in /usr/bin/clickhouse\r\n5. DB::StorageSystemUserDirectories::fillData(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::Context const&, DB::SelectQueryInfo const&) const @ 0xe02a5b0 in /usr/bin/clickhouse\r\n6. DB::IStorageSystemOneBlock<DB::StorageSystemUserDirectories>::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0xdfbb432 in /usr/bin/clickhouse\r\n7. DB::IStorage::read(DB::QueryPlan&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0xecdf093 in /usr/bin/clickhouse\r\n8. DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&, std::__1::shared_ptr<DB::PrewhereDAGInfo> const&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xe84a291 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>) @ 0xe83f931 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0xe83edac in /usr/bin/clickhouse\r\n11. DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0xe9ee8d5 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectWithUnionQuery::execute() @ 0xe9efc8e in /usr/bin/clickhouse\r\n13. ? @ 0xeb6a4c9 in /usr/bin/clickhouse\r\n14. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xeb68e0d in /usr/bin/clickhouse\r\n15. DB::TCPHandler::runImpl() @ 0xf263de6 in /usr/bin/clickhouse\r\n16. DB::TCPHandler::run() @ 0xf2727a7 in /usr/bin/clickhouse\r\n17. Poco::Net::TCPServerConnection::start() @ 0x117a60cf in /usr/bin/clickhouse\r\n18. Poco::Net::TCPServerDispatcher::run() @ 0x117a7ae1 in /usr/bin/clickhouse\r\n19. Poco::PooledThread::run() @ 0x118d3469 in /usr/bin/clickhouse\r\n20. Poco::ThreadImpl::runnableEntry(void*) @ 0x118cf3fa in /usr/bin/clickhouse\r\n21. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n22. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n\r\n\r\nReceived exception from server (version 20.13.1):\r\nCode: 1000. DB::Exception: Received from localhost:9000. DB::Exception: Bad cast exception: Can not convert to std::string.\r\n```\r\n\r\n\r\n**Expected behavior**\r\nQuery is working.\r\n\r\n**Additional context**\r\nldap server is Active Directory Lightweight Directory Services (ADLDS).\r\nldap user bindings are working normally and i can log with users from ldap.\r\nIf we remove the ldap server from user_directories, the query is working correctly.\r\n\r\n```\r\nSELECT *\r\nFROM system.user_directories\r\n\r\nQuery id: c11e8e30-5dfb-4629-a4ea-1f813c176941\r\n\r\n\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500params\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500precedence\u2500\u2510\r\n\u2502 users.xml       \u2502 users.xml       \u2502 {\"path\":\"\\/etc\\/clickhouse-server\\/users.xml\"} \u2502          1 \u2502\r\n\u2502 local directory \u2502 local directory \u2502 {\"path\":\"\\/var\\/lib\\/clickhouse\\/access\\/\"}    \u2502          2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2020-11-19T22:04:48Z"
}