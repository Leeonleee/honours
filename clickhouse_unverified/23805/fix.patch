diff --git a/src/Client/Connection.cpp b/src/Client/Connection.cpp
index 70d8109545bd..d26f7454bccf 100644
--- a/src/Client/Connection.cpp
+++ b/src/Client/Connection.cpp
@@ -680,8 +680,12 @@ void Connection::sendExternalTablesData(ExternalTablesData & data)
         PipelineExecutorPtr executor;
         auto on_cancel = [& executor]() { executor->cancel(); };
 
+        if (!elem->pipe)
+            elem->pipe = elem->creating_pipe_callback();
+
         QueryPipeline pipeline;
         pipeline.init(std::move(*elem->pipe));
+        elem->pipe.reset();
         pipeline.resize(1);
         auto sink = std::make_shared<ExternalTableDataSink>(pipeline.getHeader(), *this, *elem, std::move(on_cancel));
         pipeline.setSinks([&](const Block &, QueryPipeline::StreamType type) -> ProcessorPtr
diff --git a/src/Client/Connection.h b/src/Client/Connection.h
index 6c7edfb2761d..80dbd9ed44e5 100644
--- a/src/Client/Connection.h
+++ b/src/Client/Connection.h
@@ -41,6 +41,7 @@ struct ExternalTableData
     /// Pipe of data form table;
     std::unique_ptr<Pipe> pipe;
     std::string table_name;
+    std::function<std::unique_ptr<Pipe>()> creating_pipe_callback;
     /// Flag if need to stop reading.
     std::atomic_bool is_cancelled = false;
 };
diff --git a/src/DataStreams/RemoteQueryExecutor.cpp b/src/DataStreams/RemoteQueryExecutor.cpp
index 0961dd41458f..f15e54d34c6a 100644
--- a/src/DataStreams/RemoteQueryExecutor.cpp
+++ b/src/DataStreams/RemoteQueryExecutor.cpp
@@ -458,8 +458,6 @@ void RemoteQueryExecutor::sendScalars()
 
 void RemoteQueryExecutor::sendExternalTables()
 {
-    SelectQueryInfo query_info;
-
     size_t count = connections->size();
 
     {
@@ -474,24 +472,29 @@ void RemoteQueryExecutor::sendExternalTables()
             for (const auto & table : external_tables)
             {
                 StoragePtr cur = table.second;
-                auto metadata_snapshot = cur->getInMemoryMetadataPtr();
-                QueryProcessingStage::Enum read_from_table_stage = cur->getQueryProcessingStage(
-                    context, QueryProcessingStage::Complete, query_info);
-
-                Pipe pipe = cur->read(
-                    metadata_snapshot->getColumns().getNamesOfPhysical(),
-                    metadata_snapshot, query_info, context,
-                    read_from_table_stage, DEFAULT_BLOCK_SIZE, 1);
 
                 auto data = std::make_unique<ExternalTableData>();
                 data->table_name = table.first;
-
-                if (pipe.empty())
-                    data->pipe = std::make_unique<Pipe>(
+                data->creating_pipe_callback = [cur, context = this->context]()
+                {
+                    SelectQueryInfo query_info;
+                    auto metadata_snapshot = cur->getInMemoryMetadataPtr();
+                    QueryProcessingStage::Enum read_from_table_stage = cur->getQueryProcessingStage(
+                        context, QueryProcessingStage::Complete, query_info);
+
+                    Pipe pipe = cur->read(
+                        metadata_snapshot->getColumns().getNamesOfPhysical(),
+                        metadata_snapshot, query_info, context,
+                        read_from_table_stage, DEFAULT_BLOCK_SIZE, 1);
+
+                    if (pipe.empty())
+                        return std::make_unique<Pipe>(
                             std::make_shared<SourceFromSingleChunk>(metadata_snapshot->getSampleBlock(), Chunk()));
-                else
-                    data->pipe = std::make_unique<Pipe>(std::move(pipe));
 
+                    return std::make_unique<Pipe>(std::move(pipe));
+                };
+
+                data->pipe = data->creating_pipe_callback();
                 res.emplace_back(std::move(data));
             }
             external_tables_data.push_back(std::move(res));
