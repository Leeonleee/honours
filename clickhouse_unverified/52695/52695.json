{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52695,
  "instance_id": "ClickHouse__ClickHouse-52695",
  "issue_numbers": [
    "49510"
  ],
  "base_commit": "d48b1cadb00ed00bce789bd1ca0fcacc1eceb534",
  "patch": "diff --git a/src/Storages/System/attachInformationSchemaTables.cpp b/src/Storages/System/attachInformationSchemaTables.cpp\nindex 61a916853242..43a3840cdf01 100644\n--- a/src/Storages/System/attachInformationSchemaTables.cpp\n+++ b/src/Storages/System/attachInformationSchemaTables.cpp\n@@ -18,7 +18,6 @@ static void createInformationSchemaView(ContextMutablePtr context, IDatabase & d\n                database.getDatabaseName() == DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE);\n         if (database.getEngineName() != \"Memory\")\n             return;\n-        bool is_uppercase = database.getDatabaseName() == DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE;\n \n         String metadata_resource_name = view_name + \".sql\";\n         auto attach_query = getResource(metadata_resource_name);\n@@ -34,13 +33,18 @@ static void createInformationSchemaView(ContextMutablePtr context, IDatabase & d\n         assert(view_name == ast_create.getTable());\n         ast_create.attach = false;\n         ast_create.setDatabase(database.getDatabaseName());\n-        if (is_uppercase)\n-            ast_create.setTable(Poco::toUpper(view_name));\n \n         StoragePtr view = createTableFromAST(ast_create, database.getDatabaseName(),\n                                              database.getTableDataPath(ast_create), context, true).second;\n-\n         database.createTable(context, ast_create.getTable(), view, ast);\n+        ASTPtr ast_upper = ast_create.clone();\n+        auto & ast_create_upper = ast_upper->as<ASTCreateQuery &>();\n+        ast_create_upper.setTable(Poco::toUpper(view_name));\n+        StoragePtr view_upper = createTableFromAST(ast_create_upper, database.getDatabaseName(),\n+                                             database.getTableDataPath(ast_create_upper), context, true).second;\n+\n+        database.createTable(context, ast_create_upper.getTable(), view_upper, ast_upper);\n+\n     }\n     catch (...)\n     {\n",
  "test_patch": "diff --git a/tests/integration/test_mysql_protocol/golang.reference b/tests/integration/test_mysql_protocol/golang.reference\nindex 4069b2a086af..7680c8c74dcc 100644\n--- a/tests/integration/test_mysql_protocol/golang.reference\n+++ b/tests/integration/test_mysql_protocol/golang.reference\n@@ -14,6 +14,7 @@ a UNSIGNED TINYINT\n Result:\n tables 1\n tables 1\n+tables 1\n Columns:\n a\n b\ndiff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py\nindex 5e03c4883b4c..494af3c219d9 100644\n--- a/tests/integration/test_mysql_protocol/test.py\n+++ b/tests/integration/test_mysql_protocol/test.py\n@@ -679,7 +679,7 @@ def test_php_client(started_cluster, php_container):\n         demux=True,\n     )\n     assert code == 0\n-    assert stdout.decode() == \"tables\\ntables\\n\"\n+    assert stdout.decode() == \"tables\\ntables\\ntables\\n\"\n \n     code, (stdout, stderr) = php_container.exec_run(\n         \"php -f test_ssl.php {host} {port} default 123\".format(\n@@ -688,7 +688,7 @@ def test_php_client(started_cluster, php_container):\n         demux=True,\n     )\n     assert code == 0\n-    assert stdout.decode() == \"tables\\ntables\\n\"\n+    assert stdout.decode() == \"tables\\ntables\\ntables\\n\"\n \n     code, (stdout, stderr) = php_container.exec_run(\n         \"php -f test.php {host} {port} user_with_double_sha1 abacaba\".format(\n@@ -697,7 +697,7 @@ def test_php_client(started_cluster, php_container):\n         demux=True,\n     )\n     assert code == 0\n-    assert stdout.decode() == \"tables\\ntables\\n\"\n+    assert stdout.decode() == \"tables\\ntables\\ntables\\n\"\n \n     code, (stdout, stderr) = php_container.exec_run(\n         \"php -f test_ssl.php {host} {port} user_with_double_sha1 abacaba\".format(\n@@ -706,7 +706,7 @@ def test_php_client(started_cluster, php_container):\n         demux=True,\n     )\n     assert code == 0\n-    assert stdout.decode() == \"tables\\ntables\\n\"\n+    assert stdout.decode() == \"tables\\ntables\\ntables\\n\"\n \n \n def test_mysqljs_client(started_cluster, nodejs_container):\ndiff --git a/tests/integration/test_select_access_rights/test_from_system_tables.py b/tests/integration/test_select_access_rights/test_from_system_tables.py\nindex ac938a9694a7..cd29183561a8 100644\n--- a/tests/integration/test_select_access_rights/test_from_system_tables.py\n+++ b/tests/integration/test_select_access_rights/test_from_system_tables.py\n@@ -190,3 +190,15 @@ def test_information_schema():\n         )\n         == \"1\\n\"\n     )\n+    assert (\n+        node.query(\n+            \"SELECT count() FROM information_schema.TABLES WHERE table_name='TABLES'\"\n+        )\n+        == \"2\\n\"\n+    )\n+    assert (\n+        node.query(\n+            \"SELECT count() FROM INFORMATION_SCHEMA.tables WHERE table_name='tables'\"\n+        )\n+        == \"3\\n\"\n+    )\ndiff --git a/tests/queries/0_stateless/01161_information_schema.reference b/tests/queries/0_stateless/01161_information_schema.reference\nindex 5331e30b899c..4ec33a70be08 100644\n--- a/tests/queries/0_stateless/01161_information_schema.reference\n+++ b/tests/queries/0_stateless/01161_information_schema.reference\n@@ -1,3 +1,7 @@\n+COLUMNS\n+SCHEMATA\n+TABLES\n+VIEWS\n columns\n schemata\n tables\n@@ -6,6 +10,10 @@ COLUMNS\n SCHEMATA\n TABLES\n VIEWS\n+columns\n+schemata\n+tables\n+views\n INFORMATION_SCHEMA\tINFORMATION_SCHEMA\tdefault\t\\N\t\\N\t\\N\t\\N\n information_schema\tinformation_schema\tdefault\t\\N\t\\N\t\\N\t\\N\n default\tdefault\tmv\tVIEW\ndiff --git a/tests/queries/0_stateless/02206_information_schema_show_database.reference b/tests/queries/0_stateless/02206_information_schema_show_database.reference\nindex 821fddbb9338..0cf7913e28ed 100644\n--- a/tests/queries/0_stateless/02206_information_schema_show_database.reference\n+++ b/tests/queries/0_stateless/02206_information_schema_show_database.reference\n@@ -1,4 +1,6 @@\n CREATE DATABASE INFORMATION_SCHEMA\\nENGINE = Memory\n CREATE VIEW INFORMATION_SCHEMA.COLUMNS\\n(\\n    `table_catalog` String,\\n    `table_schema` String,\\n    `table_name` String,\\n    `TABLE_SCHEMA` String,\\n    `TABLE_NAME` String,\\n    `column_name` String,\\n    `ordinal_position` UInt64,\\n    `column_default` String,\\n    `is_nullable` String,\\n    `data_type` String,\\n    `character_maximum_length` Nullable(UInt64),\\n    `character_octet_length` Nullable(UInt64),\\n    `numeric_precision` Nullable(UInt64),\\n    `numeric_precision_radix` Nullable(UInt64),\\n    `numeric_scale` Nullable(UInt64),\\n    `datetime_precision` Nullable(UInt64),\\n    `character_set_catalog` Nullable(String),\\n    `character_set_schema` Nullable(String),\\n    `character_set_name` Nullable(String),\\n    `collation_catalog` Nullable(String),\\n    `collation_schema` Nullable(String),\\n    `collation_name` Nullable(String),\\n    `domain_catalog` Nullable(String),\\n    `domain_schema` Nullable(String),\\n    `domain_name` Nullable(String),\\n    `column_comment` String,\\n    `column_type` String,\\n    `TABLE_CATALOG` String ALIAS table_catalog,\\n    `COLUMN_NAME` String ALIAS column_name,\\n    `ORDINAL_POSITION` UInt64 ALIAS ordinal_position,\\n    `COLUMN_DEFAULT` String ALIAS column_default,\\n    `IS_NULLABLE` String ALIAS is_nullable,\\n    `DATA_TYPE` String ALIAS data_type,\\n    `CHARACTER_MAXIMUM_LENGTH` Nullable(UInt64) ALIAS character_maximum_length,\\n    `CHARACTER_OCTET_LENGTH` Nullable(UInt64) ALIAS character_octet_length,\\n    `NUMERIC_PRECISION` Nullable(UInt64) ALIAS numeric_precision,\\n    `NUMERIC_PRECISION_RADIX` Nullable(UInt64) ALIAS numeric_precision_radix,\\n    `NUMERIC_SCALE` Nullable(UInt64) ALIAS numeric_scale,\\n    `DATETIME_PRECISION` Nullable(UInt64) ALIAS datetime_precision,\\n    `CHARACTER_SET_CATALOG` Nullable(String) ALIAS character_set_catalog,\\n    `CHARACTER_SET_SCHEMA` Nullable(String) ALIAS character_set_schema,\\n    `CHARACTER_SET_NAME` Nullable(String) ALIAS character_set_name,\\n    `COLLATION_CATALOG` Nullable(String) ALIAS collation_catalog,\\n    `COLLATION_SCHEMA` Nullable(String) ALIAS collation_schema,\\n    `COLLATION_NAME` Nullable(String) ALIAS collation_name,\\n    `DOMAIN_CATALOG` Nullable(String) ALIAS domain_catalog,\\n    `DOMAIN_SCHEMA` Nullable(String) ALIAS domain_schema,\\n    `DOMAIN_NAME` Nullable(String) ALIAS domain_name,\\n    `COLUMN_COMMENT` String ALIAS column_comment,\\n    `COLUMN_TYPE` String ALIAS column_type\\n) AS\\nSELECT\\n    database AS table_catalog,\\n    database AS table_schema,\\n    database AS TABLE_SCHEMA,\\n    table AS table_name,\\n    table AS TABLE_NAME,\\n    name AS column_name,\\n    position AS ordinal_position,\\n    default_expression AS column_default,\\n    type LIKE \\'Nullable(%)\\' AS is_nullable,\\n    type AS data_type,\\n    character_octet_length AS character_maximum_length,\\n    character_octet_length,\\n    numeric_precision,\\n    numeric_precision_radix,\\n    numeric_scale,\\n    datetime_precision,\\n    NULL AS character_set_catalog,\\n    NULL AS character_set_schema,\\n    NULL AS character_set_name,\\n    NULL AS collation_catalog,\\n    NULL AS collation_schema,\\n    NULL AS collation_name,\\n    NULL AS domain_catalog,\\n    NULL AS domain_schema,\\n    NULL AS domain_name,\\n    comment AS column_comment,\\n    type AS column_type\\nFROM system.columns\n CREATE VIEW INFORMATION_SCHEMA.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` Enum8(\\'BASE TABLE\\' = 1, \\'VIEW\\' = 2, \\'FOREIGN TABLE\\' = 3, \\'LOCAL TEMPORARY\\' = 4, \\'SYSTEM VIEW\\' = 5), `TABLE_CATALOG` String ALIAS table_catalog, `TABLE_SCHEMA` String ALIAS table_schema, `TABLE_NAME` String ALIAS table_name, `TABLE_TYPE` Enum8(\\'BASE TABLE\\' = 1, \\'VIEW\\' = 2, \\'FOREIGN TABLE\\' = 3, \\'LOCAL TEMPORARY\\' = 4, \\'SYSTEM VIEW\\' = 5) ALIAS table_type) AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, 4, engine LIKE \\'%View\\', 2, engine LIKE \\'System%\\', 5, has_own_data = 0, 3, 1) AS table_type FROM system.tables\n+CREATE VIEW INFORMATION_SCHEMA.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` Enum8(\\'BASE TABLE\\' = 1, \\'VIEW\\' = 2, \\'FOREIGN TABLE\\' = 3, \\'LOCAL TEMPORARY\\' = 4, \\'SYSTEM VIEW\\' = 5), `TABLE_CATALOG` String ALIAS table_catalog, `TABLE_SCHEMA` String ALIAS table_schema, `TABLE_NAME` String ALIAS table_name, `TABLE_TYPE` Enum8(\\'BASE TABLE\\' = 1, \\'VIEW\\' = 2, \\'FOREIGN TABLE\\' = 3, \\'LOCAL TEMPORARY\\' = 4, \\'SYSTEM VIEW\\' = 5) ALIAS table_type) AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, 4, engine LIKE \\'%View\\', 2, engine LIKE \\'System%\\', 5, has_own_data = 0, 3, 1) AS table_type FROM system.tables\n+CREATE VIEW information_schema.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` Enum8(\\'BASE TABLE\\' = 1, \\'VIEW\\' = 2, \\'FOREIGN TABLE\\' = 3, \\'LOCAL TEMPORARY\\' = 4, \\'SYSTEM VIEW\\' = 5), `TABLE_CATALOG` String ALIAS table_catalog, `TABLE_SCHEMA` String ALIAS table_schema, `TABLE_NAME` String ALIAS table_name, `TABLE_TYPE` Enum8(\\'BASE TABLE\\' = 1, \\'VIEW\\' = 2, \\'FOREIGN TABLE\\' = 3, \\'LOCAL TEMPORARY\\' = 4, \\'SYSTEM VIEW\\' = 5) ALIAS table_type) AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, 4, engine LIKE \\'%View\\', 2, engine LIKE \\'System%\\', 5, has_own_data = 0, 3, 1) AS table_type FROM system.tables\n CREATE VIEW information_schema.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` Enum8(\\'BASE TABLE\\' = 1, \\'VIEW\\' = 2, \\'FOREIGN TABLE\\' = 3, \\'LOCAL TEMPORARY\\' = 4, \\'SYSTEM VIEW\\' = 5), `TABLE_CATALOG` String ALIAS table_catalog, `TABLE_SCHEMA` String ALIAS table_schema, `TABLE_NAME` String ALIAS table_name, `TABLE_TYPE` Enum8(\\'BASE TABLE\\' = 1, \\'VIEW\\' = 2, \\'FOREIGN TABLE\\' = 3, \\'LOCAL TEMPORARY\\' = 4, \\'SYSTEM VIEW\\' = 5) ALIAS table_type) AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, 4, engine LIKE \\'%View\\', 2, engine LIKE \\'System%\\', 5, has_own_data = 0, 3, 1) AS table_type FROM system.tables\n",
  "problem_statement": "MySQL compatibility: mixed case queries\n**Use case**\r\n\r\nWhen using MySQL protocol to connect BI tools (for example, QuickSight) to ClickHouse, the following query is executed to introspect the dataset size, and it fails:\r\n\r\n```sql\r\nSELECT \r\n  data_length \r\nFROM \r\n  information_schema.TABLES \r\nWHERE \r\n  table_schema = 'default' \r\n  AND table_name = 'cell_towers';\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nMixed case `<database>.<TABLE>` (or maybe even `<DATABASE>.<table>`) works.\r\n\r\n**Additional context**\r\n\r\nAn example log of a failing query:\r\n\r\n```\r\n2023.04.25 13:26:44.562738 [ 319 ] {mysql:96:11ad169d-0139-456a-abc7-e9fdfae004f6} <Error> executeQuery: Code: 60. DB::Exception: Table information_schema.TABLES doesn't exist. (UNKNOWN_TABLE) (version 23.4.1.1157 (official build)) (from 35.158.127.201:43000) (in query: SELECT data_length FROM information_schema.TABLES WHERE table_schema = 'default' AND table_name = 'cell_towers')\r\n```\r\n\n",
  "hints_text": "As workaround, you can create such table by yourself\r\n\r\n```\r\nCREATE VIEW information_schema.TABLES\r\n(\r\n    `table_catalog` String,\r\n    `table_schema` String,\r\n    `table_name` String,\r\n    `table_type` Enum8('BASE TABLE' = 1, 'VIEW' = 2, 'FOREIGN TABLE' = 3, 'LOCAL TEMPORARY' = 4, 'SYSTEM VIEW' = 5),\r\n    `TABLE_CATALOG` String ALIAS table_catalog,\r\n    `TABLE_SCHEMA` String ALIAS table_schema,\r\n    `TABLE_NAME` String ALIAS table_name,\r\n    `TABLE_TYPE` Enum8('BASE TABLE' = 1, 'VIEW' = 2, 'FOREIGN TABLE' = 3, 'LOCAL TEMPORARY' = 4, 'SYSTEM VIEW' = 5) ALIAS table_type\r\n) AS\r\nSELECT\r\n    database AS table_catalog,\r\n    database AS table_schema,\r\n    name AS table_name,\r\n    multiIf(is_temporary, 4, engine LIKE '%View', 2, engine LIKE 'System%', 5, has_own_data = 0, 3, 1) AS table_type\r\nFROM system.tables\r\n```\r\n\r\nDuplicate https://github.com/ClickHouse/ClickHouse/issues/29068\nshould be closed by https://github.com/ClickHouse/ClickHouse/pull/50961",
  "created_at": "2023-07-27T18:32:36Z"
}