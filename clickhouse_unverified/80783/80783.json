{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80783,
  "instance_id": "ClickHouse__ClickHouse-80783",
  "issue_numbers": [
    "80742"
  ],
  "base_commit": "dabdffdc6855b4ef78f5b3b306d62cbf7ccaa700",
  "patch": "diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex d0c0602f1893..0ee4283cf950 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -2866,8 +2866,21 @@ struct ToNumberMonotonicity\n         /// Only support types represented by native integers.\n         /// It can be extended to big integers, decimals and DateTime64 later.\n         /// By the way, NULLs are representing unbounded ranges.\n-        if (!((left.isNull() || left.getType() == Field::Types::UInt64 || left.getType() == Field::Types::Int64)\n-            && (right.isNull() || right.getType() == Field::Types::UInt64 || right.getType() == Field::Types::Int64)))\n+        /// For null Field, check if the type is a big integer. Monotonicity does not apply to big integers.\n+        /// See : https://github.com/ClickHouse/ClickHouse/issues/80742\n+        auto is_valid_uint64_or_int64_or_null = [&](const Field & f)\n+        {\n+            /// allow NULL only when inner type is *not* a non-native integer\n+            if (f.isNull())\n+                return !(which_inner_type.isInteger() && !which_inner_type.isNativeInteger());\n+            /// otherwise must be one of the two 64-bit types\n+            auto t = f.getType();\n+            return t == Field::Types::UInt64\n+                || t == Field::Types::Int64;\n+        };\n+\n+        if (!is_valid_uint64_or_int64_or_null(left)\n+            || !is_valid_uint64_or_int64_or_null(right))\n             return {};\n \n         const bool from_is_unsigned = type.isValueRepresentedByUnsignedInteger();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03518_key_condition_binary_search.reference b/tests/queries/0_stateless/03518_key_condition_binary_search.reference\nindex 58daeb128cdb..5215ca4e43d7 100644\n--- a/tests/queries/0_stateless/03518_key_condition_binary_search.reference\n+++ b/tests/queries/0_stateless/03518_key_condition_binary_search.reference\n@@ -1,2 +1,2 @@\n 3\t0\n-0\t1\n+0\t2\ndiff --git a/tests/queries/0_stateless/03518_key_condition_binary_search.sh b/tests/queries/0_stateless/03518_key_condition_binary_search.sh\nindex 10506753bdcb..c3a89a152da3 100755\n--- a/tests/queries/0_stateless/03518_key_condition_binary_search.sh\n+++ b/tests/queries/0_stateless/03518_key_condition_binary_search.sh\n@@ -33,7 +33,24 @@ ENGINE = MergeTree\n ORDER BY timestamp;\n INSERT INTO t1 VALUES ('2025-05-21 00:00:00');\"\n \n-$CLICKHOUSE_CLIENT -n -q \"SELECT * FROM t1 WHERE toDayOfMonth(timestamp) = 1 FORMAT Null;\" --query-id=\"${query_prefix}_generic\"\n+$CLICKHOUSE_CLIENT -n -q \"SELECT * FROM t1 WHERE toDayOfMonth(timestamp) = 1 FORMAT Null;\" --query-id=\"${query_prefix}_generic1\"\n+\n+# Non-native integer type edge case in ToNumberMonotonicity\n+# See: https://github.com/ClickHouse/ClickHouse/issues/80742\n+$CLICKHOUSE_CLIENT -n -q \"\n+DROP TABLE IF EXISTS t2;\n+CREATE TABLE t2\n+(\n+  a UInt128,\n+  b UInt64\n+)\n+ENGINE = MergeTree\n+ORDER BY a\n+SETTINGS index_granularity = 64, index_granularity_bytes = '10M', min_bytes_for_wide_part = 0;\n+INSERT INTO t2 SELECT number, number FROM numbers(10000);\"\n+\n+$CLICKHOUSE_CLIENT -n -q \"SELECT count() FROM t2 WHERE (a < toUInt256(200)) FORMAT Null;\" --query-id=\"${query_prefix}_generic2\"\n+\n $CLICKHOUSE_CLIENT -n -q \"SYSTEM FLUSH LOGS query_log;\"\n \n $CLICKHOUSE_CLIENT -n -q \"SELECT sum(ProfileEvents['IndexBinarySearchAlgorithm']), sum(ProfileEvents['IndexGenericExclusionSearchAlgorithm']) FROM system.query_log\n",
  "problem_statement": "Logical error: 'check_in_range(result_exact_range, BoolMask::consider_only_can_be_false) == BoolMask(true, false)'.\n### Describe the bug\n\nFailed assertion with UInt128 primary key and UInt256 constant. I didn't check whether it can lead to user facing bug.\n\n### How to reproduce\n\n```sql\nDROP TABLE IF EXISTS t_primary_index_cache__fuzz_37;\n\nCREATE TABLE t_primary_index_cache__fuzz_37 (`a` UInt128, `b` UInt64)\nENGINE = MergeTree PARTITION BY a % 2 ORDER BY a\nSETTINGS index_granularity = 64, index_granularity_bytes = '10M', min_bytes_for_wide_part = 0;\n\nINSERT INTO t_primary_index_cache__fuzz_37 SELECT number, number FROM numbers(10000);\n\nSELECT count() FROM t_primary_index_cache__fuzz_37 WHERE (a < toUInt256(200));\n```\n\n```\n<Fatal> BaseDaemon: ########## Short fault info ############\n<Fatal> BaseDaemon: (version 25.6.1.785 (official build), build id: 226869BB9FC2F0C9062B7F5BF8268881008873DE, git hash: e96a66498b97e5c1ab84143b99f179e44d7c515f, architecture: x86_64) (from thread 714245) Received signal 6\n<Fatal> BaseDaemon: Signal description: Aborted\n<Fatal> BaseDaemon:\n<Fatal> BaseDaemon: Stack trace: 0x000071c7ca2969fd 0x000071c7ca242476 0x000071c7ca2287f3 0x00005d091c97a4c3 0x00005d091c97a6d0 0x00005d093008a05d 0x00005d09300a62a1 0x00005d09300b7f89 0x00005d091cc6bcf3 0x00005d091cc79e10 0x00005d091cc6636e 0x00005d091cc74b10 0x00005d090b89ce77 0x000071c7ca294ac3 0x000071c7ca326850\n<Fatal> BaseDaemon: ########################################\n<Fatal> BaseDaemon: (version 25.6.1.785 (official build), build id: 226869BB9FC2F0C9062B7F5BF8268881008873DE, git hash: e96a66498b97e5c1ab84143b99f179e44d7c515f) (from thread 714245) (query_id: 593fdc08-a6de-464a-9d4a-668077eea635) (query: SELECT count() FROM t_primary_index_cache__fuzz_37 WHERE (a < toUInt256(200));) Received signal Aborted (6)\n<Fatal> BaseDaemon:\n<Fatal> BaseDaemon: Stack trace: 0x000071c7ca2969fd 0x000071c7ca242476 0x000071c7ca2287f3 0x00005d091c97a4c3 0x00005d091c97a6d0 0x00005d093008a05d 0x00005d09300a62a1 0x00005d09300b7f89 0x00005d091cc6bcf3 0x00005d091cc79e10 0x00005d091cc6636e 0x00005d091cc74b10 0x00005d090b89ce77 0x000071c7ca294ac3 0x000071c7ca326850\n<Fatal> BaseDaemon: 3. pthread_kill@@GLIBC_2.34 @ 0x00000000000969fd\n<Fatal> BaseDaemon: 4. gsignal @ 0x0000000000042476\n<Fatal> BaseDaemon: 5. __GI_abort @ 0x00000000000287f3\n<Fatal> BaseDaemon: 6. ./ci/tmp/build/./src/Common/Exception.cpp:50: DB::abortOnFailedAssertion(String const&, void* const*, unsigned long, unsigned long) @ 0x000000001d49f4c3\n<Fatal> BaseDaemon: 7. ./ci/tmp/build/./src/Common/Exception.cpp:56: ? @ 0x000000001d49f6d0\n<Fatal> BaseDaemon: 8. ./ci/tmp/build/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1562: DB::MergeTreeDataSelectExecutor::markRangesFromPKRange(DB::RangesInDataPart const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, std::optional<DB::KeyCondition> const&, DB::MarkRanges*, DB::Settings const&, std::shared_ptr<Poco::Logger>) @ 0x0000000030baf05d\n<Fatal> BaseDaemon: 9. ./ci/tmp/build/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:767: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(DB::RangesInDataParts, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool, bool)::$_1::operator()(unsigned long) const @ 0x0000000030bcb2a1\n<Fatal> BaseDaemon: 10.0. inlined from ./ci/tmp/build/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:876: operator()\n<Fatal> BaseDaemon: 10.1. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(DB::RangesInDataParts, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool, bool)::$_2&>()()) std::__invoke[abi:ne190107]<DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(DB::RangesInDataParts, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool, bool)::$_2&>(DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(DB::RangesInDataParts, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool, bool)::$_2&)\n<Fatal> BaseDaemon: 10.2. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:224: void std::__invoke_void_return_wrapper<void, true>::__call[abi:ne190107]<DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(DB::RangesInDataParts, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool, bool)::$_2&>(DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(DB::RangesInDataParts, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool, bool)::$_2&)\n<Fatal> BaseDaemon: 10.3. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:210: ?\n<Fatal> BaseDaemon: 10. ./contrib/llvm-project/libcxx/include/__functional/function.h:610: ? @ 0x0000000030bdcf89\n<Fatal> BaseDaemon: 11.0. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:716: ?\n<Fatal> BaseDaemon: 11.1. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:989: ?\n<Fatal> BaseDaemon: 11. ./ci/tmp/build/./src/Common/ThreadPool.cpp:799: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x000000001d790cf3\n<Fatal> BaseDaemon: 12.0. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: decltype(*std::declval<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&>().*std::declval<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)()>()()) std::__invoke[abi:ne190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&, void>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&)\n<Fatal> BaseDaemon: 12.1. inlined from ./contrib/llvm-project/libcxx/include/tuple:1354: decltype(auto) std::__apply_tuple_impl[abi:ne190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&, 0ul>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&, std::__tuple_indices<0ul>)\n<Fatal> BaseDaemon: 12.2. inlined from ./contrib/llvm-project/libcxx/include/tuple:1358: decltype(auto) std::apply[abi:ne190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&)\n<Fatal> BaseDaemon: 12. ./src/Common/ThreadPool.h:312: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() @ 0x000000001d79ee10\n```\n\n### Error message and/or stacktrace\n\n_No response_\n",
  "hints_text": "I suspect the issue might be in ToNumberMonotonicity. When field is null, getMonotonicityForRange(UInt128, field, field) appears to be monotonic. However, if field's type is UInt128, getMonotonicityForRange(UInt128, field, field) seems to lose monotonicity, possibly because only native integer types are currently supported.",
  "created_at": "2025-05-25T04:33:36Z"
}