{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42236,
  "instance_id": "ClickHouse__ClickHouse-42236",
  "issue_numbers": [
    "42226"
  ],
  "base_commit": "7fa7e1d822e694784ffdbf5e259d80c5770f6494",
  "patch": "diff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex 3fc00a79bbe3..f6b397950ed5 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -26,6 +26,8 @@\n #include <Processors/QueryPlan/ExpressionStep.h>\n #include <Processors/Transforms/FilterTransform.h>\n #include <Processors/Transforms/ExpressionTransform.h>\n+#include <Processors/Transforms/ReverseTransform.h>\n+#include <Processors/Transforms/PartialSortingTransform.h>\n #include <Processors/Sinks/SinkToStorage.h>\n #include <Processors/ISource.h>\n #include <Processors/QueryPlan/QueryPlan.h>\n@@ -334,6 +336,14 @@ void StorageBuffer::read(\n             pipes_from_buffers.emplace_back(std::make_shared<BufferSource>(column_names, buf, storage_snapshot));\n \n         pipe_from_buffers = Pipe::unitePipes(std::move(pipes_from_buffers));\n+        if (query_info.getInputOrderInfo())\n+        {\n+            /// Each buffer has one block, and it not guaranteed that rows in each block are sorted by order keys\n+            pipe_from_buffers.addSimpleTransform([&](const Block & header)\n+            {\n+                return std::make_shared<PartialSortingTransform>(header, query_info.getInputOrderInfo()->sort_description_for_merging, 0);\n+            });\n+        }\n     }\n \n     if (pipe_from_buffers.empty())\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02459_read_in_order_bufer.reference b/tests/queries/0_stateless/02459_read_in_order_bufer.reference\nnew file mode 100644\nindex 000000000000..b040bdf61679\n--- /dev/null\n+++ b/tests/queries/0_stateless/02459_read_in_order_bufer.reference\n@@ -0,0 +1,5 @@\n+9\n+8\n+7\n+6\n+5\ndiff --git a/tests/queries/0_stateless/02459_read_in_order_bufer.sql b/tests/queries/0_stateless/02459_read_in_order_bufer.sql\nnew file mode 100644\nindex 000000000000..5a6e0a3dbc6c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02459_read_in_order_bufer.sql\n@@ -0,0 +1,13 @@\n+CREATE TABLE mytable_stored (`a` UInt8) ENGINE = MergeTree ORDER BY a;\n+CREATE TABLE mytable (`a` UInt8) ENGINE = Buffer(currentDatabase(), 'mytable_stored', 4, 600, 3600, 10, 100, 10000, 10000000);\n+INSERT INTO mytable VALUES (0);\n+INSERT INTO mytable VALUES (1);\n+INSERT INTO mytable VALUES (2);\n+INSERT INTO mytable VALUES (3);\n+INSERT INTO mytable VALUES (4);\n+INSERT INTO mytable VALUES (5);\n+INSERT INTO mytable VALUES (6);\n+INSERT INTO mytable VALUES (7);\n+INSERT INTO mytable VALUES (8);\n+INSERT INTO mytable VALUES (9);\n+SELECT a FROM mytable ORDER BY a DESC LIMIT 5;\n",
  "problem_statement": "Unexpected / incorrect result when selecting from Buffer table with ORDER BY DESC\n**Describe what's wrong**\r\n\r\nSelecting from a Buffer table with ORDER BY <col> DESC clause returns wrong rows, and the returned rows are not ordered.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nTested version: 22.7.2.15\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use\r\n22.7.2.15\r\n* `CREATE TABLE` statements for all tables involved\r\n\r\n        CREATE TABLE mydb.mytable_stored\r\n        (\r\n            `a` UInt8\r\n        )\r\n        ENGINE = MergeTree\r\n        ORDER BY a;\r\n\r\n        CREATE TABLE mydb.mytable\r\n        (\r\n            `a` UInt8\r\n        )\r\n        ENGINE = Buffer('mydb', 'mytable_stored', 4, 600, 3600, 10, 100, 10000, 10000000);\r\n\r\n* Sample data for all these tables\r\nNote: rows must be inserted one-by-one:\r\n\r\n        INSERT INTO mydb.mytable VALUES (0);\r\n        INSERT INTO mydb.mytable VALUES (1);\r\n        INSERT INTO mydb.mytable VALUES (2);\r\n        INSERT INTO mydb.mytable VALUES (3);\r\n        INSERT INTO mydb.mytable VALUES (4);\r\n        INSERT INTO mydb.mytable VALUES (5);\r\n        INSERT INTO mydb.mytable VALUES (6);\r\n        INSERT INTO mydb.mytable VALUES (7);\r\n        INSERT INTO mydb.mytable VALUES (8);\r\n        INSERT INTO mydb.mytable VALUES (9);\r\n\r\n* Queries to run that lead to unexpected result\r\n\r\n        SELECT a FROM mydb.mytable ORDER BY a DESC LIMIT 5;\r\n        \u250c\u2500a\u2500\u2510\r\n        \u2502 3 \u2502\r\n        \u2502 7 \u2502\r\n        \u2514\u2500\u2500\u2500\u2518\r\n        \u250c\u2500a\u2500\u2510\r\n        \u2502 2 \u2502\r\n        \u2502 6 \u2502\r\n        \u2514\u2500\u2500\u2500\u2518\r\n        \u250c\u2500a\u2500\u2510\r\n        \u2502 1 \u2502\r\n        \u2514\u2500\u2500\u2500\u2518\r\n        5 rows in set. Elapsed: 0.007 sec.\r\n\r\n(Interestingly, ascending order *seems* to work, did not test it thoroughly though.)\r\n\r\n**Expected behavior**\r\n\r\nGet the results in descending order, ie. `9, 8, 7, 6, 5`.\r\n\r\n**Additional context**\r\n\r\nSelecting the maximal value works:\r\n\r\n        SELECT max(a) FROM mydb.mytable;\r\n        \u250c\u2500max(a)\u2500\u2510\r\n        \u2502      9 \u2502\r\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n        1 row in set. Elapsed: 0.007 sec.\r\n\r\nAfter the rows are flushed to the backing MergeTree table, the results are good.\r\n\r\n        OPTIMIZE TABLE mydb.mytable;\r\n        SELECT a FROM mydb.mytable ORDER BY a DESC LIMIT 5;\r\n        \u250c\u2500a\u2500\u2510\r\n        \u2502 9 \u2502\r\n        \u2502 8 \u2502\r\n        \u2502 7 \u2502\r\n        \u2502 6 \u2502\r\n        \u2502 5 \u2502\r\n        \u2514\u2500\u2500\u2500\u2518\r\n        5 rows in set. Elapsed: 0.008 sec. \r\n\r\n\n",
  "hints_text": "https://fiddle.clickhouse.com/9cccf31d-8289-4671-b3ec-5be941dd07c5\r\n\r\n```sql\r\nSELECT a FROM mytable ORDER BY a DESC LIMIT 5 settings optimize_read_in_order=0;\r\n9\r\n8\r\n7\r\n6\r\n5\r\n\r\n\r\nSELECT a FROM mytable ORDER BY a DESC LIMIT 5 settings optimize_read_in_order=1;\r\n3\r\n7\r\n2\r\n6\r\n1\r\n```\n```\r\nEXPLAIN PIPELINE\r\nSELECT a\r\nFROM mydb.mytable\r\nORDER BY a DESC\r\nLIMIT 5\r\n\r\nQuery id: 10d59ddd-9f8f-4364-9c0e-c9f2e49066b0\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (Expression)                     \u2502\r\n\u2502 ExpressionTransform              \u2502\r\n\u2502   (Limit)                        \u2502\r\n\u2502   Limit                          \u2502\r\n\u2502     (Sorting)                    \u2502\r\n\u2502     MergingSortedTransform 4 \u2192 1 \u2502\r\n\u2502       (Expression)               \u2502\r\n\u2502       ExpressionTransform \u00d7 4    \u2502\r\n\u2502         (ReadFromPreparedSource) \u2502\r\n\u2502         Buffer \u00d7 4 0 \u2192 1         \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nMissing `ReverseTransform` when reading from buffer with `optimize_read_in_order` DESC",
  "created_at": "2022-10-11T01:48:09Z"
}