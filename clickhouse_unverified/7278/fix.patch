diff --git a/dbms/src/Common/ErrorCodes.cpp b/dbms/src/Common/ErrorCodes.cpp
index f606151cd944..27381811a8d1 100644
--- a/dbms/src/Common/ErrorCodes.cpp
+++ b/dbms/src/Common/ErrorCodes.cpp
@@ -490,6 +490,7 @@ namespace ErrorCodes
     extern const int AUTHENTICATION_FAILED = 516;
     extern const int CANNOT_ASSIGN_ALTER = 517;
     extern const int CANNOT_COMMIT_OFFSET = 518;
+    extern const int NO_REMOTE_SHARD_AVAILABLE = 519;
 
     extern const int KEEPER_EXCEPTION = 999;
     extern const int POCO_EXCEPTION = 1000;
diff --git a/dbms/src/Storages/ColumnsDescription.h b/dbms/src/Storages/ColumnsDescription.h
index f930b3335775..fc85566a8c07 100644
--- a/dbms/src/Storages/ColumnsDescription.h
+++ b/dbms/src/Storages/ColumnsDescription.h
@@ -103,6 +103,11 @@ class ColumnsDescription
     String toString() const;
     static ColumnsDescription parse(const String & str);
 
+    size_t size() const
+    {
+        return columns.size();
+    }
+
     /// Keep the sequence of columns and allow to lookup by name.
     using Container = boost::multi_index_container<
         ColumnDescription,
diff --git a/dbms/src/Storages/getStructureOfRemoteTable.cpp b/dbms/src/Storages/getStructureOfRemoteTable.cpp
index af19403cbbc0..5e2afa9f85d4 100644
--- a/dbms/src/Storages/getStructureOfRemoteTable.cpp
+++ b/dbms/src/Storages/getStructureOfRemoteTable.cpp
@@ -20,6 +20,7 @@ namespace DB
 
 namespace ErrorCodes
 {
+    extern const int NO_REMOTE_SHARD_AVAILABLE;
 }
 
 
@@ -29,9 +30,48 @@ ColumnsDescription getStructureOfRemoteTable(
     const Context & context,
     const ASTPtr & table_func_ptr)
 {
-    /// Send to the first any remote shard.
-    const auto & shard_info = cluster.getAnyShardInfo();
+    const auto & shards_info = cluster.getShardsInfo();
 
+    std::string fail_messages;
+
+    for (auto & shard_info : shards_info)
+    {
+        try
+        {
+            const auto & res = getStructureOfRemoteTableInShard(shard_info, database, table, context, table_func_ptr);
+
+            /// Expect at least some columns.
+            /// This is a hack to handle the empty block case returned by Connection when skip_unavailable_shards is set.
+            if (res.size() == 0)
+                continue;
+
+            return res;
+        }
+        catch (const NetException &)
+        {
+            if (context.getSettingsRef().skip_unavailable_shards)
+            {
+                std::string fail_message = getCurrentExceptionMessage(false);
+                fail_messages += fail_message + '
';
+
+                continue;
+            }
+            throw;
+        }
+    }
+
+    throw NetException(
+        "All attempts to get table structure failed. Log: 

" + fail_messages + "
",
+        ErrorCodes::NO_REMOTE_SHARD_AVAILABLE);
+}
+
+ColumnsDescription getStructureOfRemoteTableInShard(
+    const Cluster::ShardInfo & shard_info,
+    const std::string & database,
+    const std::string & table,
+    const Context & context,
+    const ASTPtr & table_func_ptr)
+{
     String query;
 
     if (table_func_ptr)
diff --git a/dbms/src/Storages/getStructureOfRemoteTable.h b/dbms/src/Storages/getStructureOfRemoteTable.h
index 468c9c685d56..2db97669270b 100644
--- a/dbms/src/Storages/getStructureOfRemoteTable.h
+++ b/dbms/src/Storages/getStructureOfRemoteTable.h
@@ -3,12 +3,11 @@
 #include <Storages/ColumnsDescription.h>
 #include <Parsers/IAST.h>
 #include <Parsers/queryToString.h>
+#include <Interpreters/Cluster.h>
 
 
 namespace DB
 {
-
-class Cluster;
 class Context;
 struct StorageID;
 
@@ -20,4 +19,11 @@ ColumnsDescription getStructureOfRemoteTable(
     const Context & context,
     const ASTPtr & table_func_ptr = nullptr);
 
+ColumnsDescription getStructureOfRemoteTableInShard(
+    const Cluster::ShardInfo & shard_info,
+    const std::string & database,
+    const std::string & table,
+    const Context & context,
+    const ASTPtr & table_func_ptr = nullptr);
+
 }
