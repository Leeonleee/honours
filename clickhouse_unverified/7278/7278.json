{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 7278,
  "instance_id": "ClickHouse__ClickHouse-7278",
  "issue_numbers": [
    "7268"
  ],
  "base_commit": "621bcaf2eba65d7352ac3bbc22ad1e77965977aa",
  "patch": "diff --git a/dbms/src/Common/ErrorCodes.cpp b/dbms/src/Common/ErrorCodes.cpp\nindex f606151cd944..27381811a8d1 100644\n--- a/dbms/src/Common/ErrorCodes.cpp\n+++ b/dbms/src/Common/ErrorCodes.cpp\n@@ -490,6 +490,7 @@ namespace ErrorCodes\n     extern const int AUTHENTICATION_FAILED = 516;\n     extern const int CANNOT_ASSIGN_ALTER = 517;\n     extern const int CANNOT_COMMIT_OFFSET = 518;\n+    extern const int NO_REMOTE_SHARD_AVAILABLE = 519;\n \n     extern const int KEEPER_EXCEPTION = 999;\n     extern const int POCO_EXCEPTION = 1000;\ndiff --git a/dbms/src/Storages/ColumnsDescription.h b/dbms/src/Storages/ColumnsDescription.h\nindex f930b3335775..fc85566a8c07 100644\n--- a/dbms/src/Storages/ColumnsDescription.h\n+++ b/dbms/src/Storages/ColumnsDescription.h\n@@ -103,6 +103,11 @@ class ColumnsDescription\n     String toString() const;\n     static ColumnsDescription parse(const String & str);\n \n+    size_t size() const\n+    {\n+        return columns.size();\n+    }\n+\n     /// Keep the sequence of columns and allow to lookup by name.\n     using Container = boost::multi_index_container<\n         ColumnDescription,\ndiff --git a/dbms/src/Storages/getStructureOfRemoteTable.cpp b/dbms/src/Storages/getStructureOfRemoteTable.cpp\nindex af19403cbbc0..5e2afa9f85d4 100644\n--- a/dbms/src/Storages/getStructureOfRemoteTable.cpp\n+++ b/dbms/src/Storages/getStructureOfRemoteTable.cpp\n@@ -20,6 +20,7 @@ namespace DB\n \n namespace ErrorCodes\n {\n+    extern const int NO_REMOTE_SHARD_AVAILABLE;\n }\n \n \n@@ -29,9 +30,48 @@ ColumnsDescription getStructureOfRemoteTable(\n     const Context & context,\n     const ASTPtr & table_func_ptr)\n {\n-    /// Send to the first any remote shard.\n-    const auto & shard_info = cluster.getAnyShardInfo();\n+    const auto & shards_info = cluster.getShardsInfo();\n \n+    std::string fail_messages;\n+\n+    for (auto & shard_info : shards_info)\n+    {\n+        try\n+        {\n+            const auto & res = getStructureOfRemoteTableInShard(shard_info, database, table, context, table_func_ptr);\n+\n+            /// Expect at least some columns.\n+            /// This is a hack to handle the empty block case returned by Connection when skip_unavailable_shards is set.\n+            if (res.size() == 0)\n+                continue;\n+\n+            return res;\n+        }\n+        catch (const NetException &)\n+        {\n+            if (context.getSettingsRef().skip_unavailable_shards)\n+            {\n+                std::string fail_message = getCurrentExceptionMessage(false);\n+                fail_messages += fail_message + '\\n';\n+\n+                continue;\n+            }\n+            throw;\n+        }\n+    }\n+\n+    throw NetException(\n+        \"All attempts to get table structure failed. Log: \\n\\n\" + fail_messages + \"\\n\",\n+        ErrorCodes::NO_REMOTE_SHARD_AVAILABLE);\n+}\n+\n+ColumnsDescription getStructureOfRemoteTableInShard(\n+    const Cluster::ShardInfo & shard_info,\n+    const std::string & database,\n+    const std::string & table,\n+    const Context & context,\n+    const ASTPtr & table_func_ptr)\n+{\n     String query;\n \n     if (table_func_ptr)\ndiff --git a/dbms/src/Storages/getStructureOfRemoteTable.h b/dbms/src/Storages/getStructureOfRemoteTable.h\nindex 468c9c685d56..2db97669270b 100644\n--- a/dbms/src/Storages/getStructureOfRemoteTable.h\n+++ b/dbms/src/Storages/getStructureOfRemoteTable.h\n@@ -3,12 +3,11 @@\n #include <Storages/ColumnsDescription.h>\n #include <Parsers/IAST.h>\n #include <Parsers/queryToString.h>\n+#include <Interpreters/Cluster.h>\n \n \n namespace DB\n {\n-\n-class Cluster;\n class Context;\n struct StorageID;\n \n@@ -20,4 +19,11 @@ ColumnsDescription getStructureOfRemoteTable(\n     const Context & context,\n     const ASTPtr & table_func_ptr = nullptr);\n \n+ColumnsDescription getStructureOfRemoteTableInShard(\n+    const Cluster::ShardInfo & shard_info,\n+    const std::string & database,\n+    const std::string & table,\n+    const Context & context,\n+    const ASTPtr & table_func_ptr = nullptr);\n+\n }\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.reference b/dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.reference\nindex 0cfbf08886fc..51993f072d58 100644\n--- a/dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.reference\n+++ b/dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.reference\n@@ -1,1 +1,2 @@\n 2\n+2\ndiff --git a/dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.sql b/dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.sql\nindex db7cb24dfd8a..2f2fe4074000 100644\n--- a/dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.sql\n+++ b/dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.sql\n@@ -1,2 +1,3 @@\n SET send_logs_level = 'none';\n SELECT count() FROM remote('{127,1}.0.0.{2,3}', system.one) SETTINGS skip_unavailable_shards = 1;\n+SELECT count() FROM remote('{1,127}.0.0.{2,3}', system.one) SETTINGS skip_unavailable_shards = 1;\n",
  "problem_statement": "skip_unavailable_shards is not working as expected\n```sql\r\n-- This works as expected.\r\nSELECT count()\r\nFROM remote('{127,1}.0.0.{2,3}', system.one)\r\nSETTINGS skip_unavailable_shards = 1\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502       2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n-- However if we change the pattern so that the first host in unavailable it will fail.\r\nSELECT count()\r\nFROM remote('{1,127}.0.0.{2,3}', system.one)\r\nSETTINGS skip_unavailable_shards = 1\r\n\r\nReceived exception from server (version 19.14.3):\r\nCode: 279. DB::Exception: Received from localhost:9000. DB::NetException. DB::NetException: All connection tries failed. Log:\r\n\r\nCode: 209, e.displayText() = DB::NetException: Timeout: connect timed out: 1.0.0.2:9000 (1.0.0.2:9000) (version 19.14.3.3 (official build))\r\nCode: 209, e.displayText() = DB::NetException: Timeout: connect timed out: 1.0.0.2:9000 (1.0.0.2:9000) (version 19.14.3.3 (official build))\r\nCode: 209, e.displayText() = DB::NetException: Timeout: connect timed out: 1.0.0.2:9000 (1.0.0.2:9000) (version 19.14.3.3 (official build))\r\n\r\n.\r\n\r\n0 rows in set. Elapsed: 0.162 sec.\r\n```\n",
  "hints_text": "version 19.16.1\r\n\r\nSELECT count()\r\nFROM remote('{1,127}.0.0.{2,3}', system.one)\r\nSETTINGS skip_unavailable_shards = 1\r\n\r\nReceived exception from server (version 19.16.1):\r\nCode: 90. DB::Exception: Received from localhost:9000. DB::Exception: Empty list of columns passed.\r\n\r\n\r\nI think there is a deep problem in distributed table. It assumes that everything is available at localhost? tables/dictionaries.\r\nhttps://github.com/ClickHouse/ClickHouse/issues/6571\r\nhttps://github.com/ClickHouse/ClickHouse/issues/3196\nI assume the problem in this case is pointed out by stacktrace (19.14):\r\n\r\n```\r\n7. 0x5576f2e093b0 DB::getStructureOfRemoteTable(DB::Cluster const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context const&, std::shared_ptr<DB::IAST> const&) /usr/bin/clickhouse\r\n8. 0x5576f29139f0 DB::TableFunctionRemote::executeImpl(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const /usr/bin/clickhouse\r\n```\r\n\r\ngetStructureOfRemoteTable calls getAnyShardInfo which returns `return shards_info.front();`.",
  "created_at": "2019-10-11T14:47:43Z",
  "modified_files": [
    "dbms/src/Common/ErrorCodes.cpp",
    "dbms/src/Storages/ColumnsDescription.h",
    "dbms/src/Storages/getStructureOfRemoteTable.cpp",
    "dbms/src/Storages/getStructureOfRemoteTable.h"
  ],
  "modified_test_files": [
    "dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.reference",
    "dbms/tests/queries/0_stateless/00183_skip_unavailable_shards.sql"
  ]
}