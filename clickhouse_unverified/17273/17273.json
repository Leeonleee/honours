{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17273,
  "instance_id": "ClickHouse__ClickHouse-17273",
  "issue_numbers": [
    "17244"
  ],
  "base_commit": "f4a61ac3c3abc1042a7166b9661d4f3f3177bbc5",
  "patch": "diff --git a/src/Interpreters/ExtractExpressionInfoVisitor.cpp b/src/Interpreters/ExtractExpressionInfoVisitor.cpp\nindex c730f49fe908..75e94de0db57 100644\n--- a/src/Interpreters/ExtractExpressionInfoVisitor.cpp\n+++ b/src/Interpreters/ExtractExpressionInfoVisitor.cpp\n@@ -27,8 +27,14 @@ void ExpressionInfoMatcher::visit(const ASTFunction & ast_function, const ASTPtr\n         const auto & function = FunctionFactory::instance().tryGet(ast_function.name, data.context);\n \n         /// Skip lambda, tuple and other special functions\n-        if (function && function->isStateful())\n-            data.is_stateful_function = true;\n+        if (function)\n+        {\n+            if (function->isStateful())\n+                data.is_stateful_function = true;\n+\n+            if (!function->isDeterministicInScopeOfQuery())\n+                data.is_deterministic_function = false;\n+        }\n     }\n }\n \ndiff --git a/src/Interpreters/ExtractExpressionInfoVisitor.h b/src/Interpreters/ExtractExpressionInfoVisitor.h\nindex a412704edcc5..0cb43e5b00ae 100644\n--- a/src/Interpreters/ExtractExpressionInfoVisitor.h\n+++ b/src/Interpreters/ExtractExpressionInfoVisitor.h\n@@ -21,6 +21,7 @@ struct ExpressionInfoMatcher\n         bool is_array_join = false;\n         bool is_stateful_function = false;\n         bool is_aggregate_function = false;\n+        bool is_deterministic_function = true;\n         std::unordered_set<size_t> unique_reference_tables_pos = {};\n     };\n \ndiff --git a/src/Interpreters/PredicateExpressionsOptimizer.cpp b/src/Interpreters/PredicateExpressionsOptimizer.cpp\nindex 86bdec628cd2..614693b5ae05 100644\n--- a/src/Interpreters/PredicateExpressionsOptimizer.cpp\n+++ b/src/Interpreters/PredicateExpressionsOptimizer.cpp\n@@ -90,8 +90,8 @@ std::vector<ASTs> PredicateExpressionsOptimizer::extractTablesPredicates(const A\n         ExpressionInfoVisitor::Data expression_info{.context = context, .tables = tables_with_columns};\n         ExpressionInfoVisitor(expression_info).visit(predicate_expression);\n \n-        if (expression_info.is_stateful_function)\n-            return {};   /// give up the optimization when the predicate contains stateful function\n+        if (expression_info.is_stateful_function || !expression_info.is_deterministic_function)\n+            return {};   /// Not optimized when predicate contains stateful function or indeterministic function\n \n         if (!expression_info.is_array_join)\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01582_deterministic_function_with_predicate.reference b/tests/queries/0_stateless/01582_deterministic_function_with_predicate.reference\nnew file mode 100644\nindex 000000000000..a1b4bfdcc030\n--- /dev/null\n+++ b/tests/queries/0_stateless/01582_deterministic_function_with_predicate.reference\n@@ -0,0 +1,11 @@\n+SELECT count()\n+FROM \n+(\n+    SELECT number\n+    FROM \n+    (\n+        SELECT number\n+        FROM numbers(1000000)\n+    )\n+    WHERE rand64() < (0.01 * 18446744073709552000.)\n+)\ndiff --git a/tests/queries/0_stateless/01582_deterministic_function_with_predicate.sql b/tests/queries/0_stateless/01582_deterministic_function_with_predicate.sql\nnew file mode 100644\nindex 000000000000..9f64c292a655\n--- /dev/null\n+++ b/tests/queries/0_stateless/01582_deterministic_function_with_predicate.sql\n@@ -0,0 +1,1 @@\n+EXPLAIN SYNTAX SELECT count(*) FROM ( SELECT number FROM ( SELECT number FROM numbers(1000000) ) WHERE rand64() < (0.01 * 18446744073709552000.));\n",
  "problem_statement": "Condition pushdown for rand() > value multiply the probabilities\n**Describe the bug**\r\n If we pushdown \u0441onditions with rand() function in subquery, we actually multiply the probabilities.\r\n\r\n**How to reproduce**\r\nClickhouse version 20.12\r\n\r\n```\r\nSELECT count(*)\r\nFROM\r\n(\r\n    SELECT number\r\n    FROM\r\n    (\r\n        SELECT number\r\n        FROM numbers(1000000)\r\n    )\r\n    WHERE rand64() < (0.01 * 18446744073709552000.)\r\n)\r\n\r\nQuery id: 13c8ae5e-ed90-4610-b7c3-8e8d3bf27f12\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502     114 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.008 sec. Processed 1.05 million rows, 8.38 MB (136.06 million rows/s., 1.09 GB/s.)\r\n\r\n\r\nEXPLAIN SYNTAX\r\nSELECT count(*)\r\nFROM\r\n(\r\n    SELECT number\r\n    FROM\r\n    (\r\n        SELECT number\r\n        FROM numbers(1000000)\r\n    )\r\n    WHERE rand64() < (0.01 * 18446744073709552000.)\r\n)\r\nQuery id: 6036d15a-32ba-4161-a6fe-41eff40af246\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SELECT count()                                          \u2502\r\n\u2502 FROM                                                    \u2502\r\n\u2502 (                                                       \u2502\r\n\u2502     SELECT number                                       \u2502\r\n\u2502     FROM                                                \u2502\r\n\u2502     (                                                   \u2502\r\n\u2502         SELECT number                                   \u2502\r\n\u2502         FROM numbers(1000000)                           \u2502\r\n\u2502         WHERE rand64() < (0.01 * 18446744073709552000.) \u2502\r\n\u2502     )                                                   \u2502\r\n\u2502     WHERE rand64() < (0.01 * 18446744073709552000.)     \u2502\r\n\u2502 )                                                       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\n",
  "hints_text": "@zhang2014 Better to disable condition pushdown for rand at all.",
  "created_at": "2020-11-22T14:19:10Z"
}