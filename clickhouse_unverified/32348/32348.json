{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32348,
  "instance_id": "ClickHouse__ClickHouse-32348",
  "issue_numbers": [
    "29702"
  ],
  "base_commit": "514120adfefd8836b8e0c9c6f89e878d5faf883e",
  "patch": "diff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp\nindex 471ad67d4e75..ecf79c034457 100644\n--- a/src/Interpreters/MutationsInterpreter.cpp\n+++ b/src/Interpreters/MutationsInterpreter.cpp\n@@ -569,7 +569,10 @@ ASTPtr MutationsInterpreter::prepare(bool dry_run)\n                 stages.emplace_back(context);\n \n             const auto & column = columns_desc.get(command.column_name);\n-            stages.back().column_to_updated.emplace(column.name, column.default_desc.expression->clone());\n+            auto materialized_column = makeASTFunction(\n+                \"_CAST\", column.default_desc.expression->clone(), std::make_shared<ASTLiteral>(column.type->getName()));\n+\n+            stages.back().column_to_updated.emplace(column.name, materialized_column);\n         }\n         else if (command.type == MutationCommand::MATERIALIZE_INDEX)\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02131_materialize_column_cast.reference b/tests/queries/0_stateless/02131_materialize_column_cast.reference\nnew file mode 100644\nindex 000000000000..8c94b2ade9cf\n--- /dev/null\n+++ b/tests/queries/0_stateless/02131_materialize_column_cast.reference\n@@ -0,0 +1,14 @@\n+1_1_1_0_2\ti\tInt32\n+1_1_1_0_2\ts\tLowCardinality(String)\n+===========\n+1_1_1_0_2\ti\tInt32\n+1_1_1_0_2\ts\tLowCardinality(String)\n+2_3_3_0\ti\tInt32\n+2_3_3_0\ts\tLowCardinality(String)\n+===========\n+1_1_1_0_4\ti\tInt32\n+1_1_1_0_4\ts\tLowCardinality(String)\n+2_3_3_0_4\ti\tInt32\n+2_3_3_0_4\ts\tLowCardinality(String)\n+1\t1\n+2\t2\ndiff --git a/tests/queries/0_stateless/02131_materialize_column_cast.sql b/tests/queries/0_stateless/02131_materialize_column_cast.sql\nnew file mode 100644\nindex 000000000000..3bfeaf5baebe\n--- /dev/null\n+++ b/tests/queries/0_stateless/02131_materialize_column_cast.sql\n@@ -0,0 +1,35 @@\n+DROP TABLE IF EXISTS t_materialize_column;\n+\n+CREATE TABLE t_materialize_column (i Int32)\n+ENGINE = MergeTree ORDER BY i PARTITION BY i\n+SETTINGS min_bytes_for_wide_part = 0;\n+\n+INSERT INTO t_materialize_column VALUES (1);\n+\n+ALTER TABLE t_materialize_column ADD COLUMN s LowCardinality(String) DEFAULT toString(i);\n+ALTER TABLE t_materialize_column MATERIALIZE COLUMN s SETTINGS mutations_sync = 2;\n+\n+SELECT name, column, type FROM system.parts_columns\n+WHERE table = 't_materialize_column' AND database = currentDatabase() AND active\n+ORDER BY name, column;\n+\n+SELECT '===========';\n+\n+INSERT INTO t_materialize_column (i) VALUES (2);\n+\n+SELECT name, column, type FROM system.parts_columns\n+WHERE table = 't_materialize_column' AND database = currentDatabase() AND active\n+ORDER BY name, column;\n+\n+SELECT '===========';\n+\n+ALTER TABLE t_materialize_column ADD INDEX s_bf (s) TYPE bloom_filter(0.01) GRANULARITY 1;\n+ALTER TABLE t_materialize_column MATERIALIZE INDEX s_bf SETTINGS mutations_sync = 2;\n+\n+SELECT name, column, type FROM system.parts_columns\n+WHERE table = 't_materialize_column' AND database = currentDatabase() AND active\n+ORDER BY name, column;\n+\n+SELECT * FROM t_materialize_column ORDER BY i;\n+\n+DROP TABLE t_materialize_column;\n",
  "problem_statement": "Logical error when trying to use bloom filter index on `Array(LowCardinality(String))`\n**Describe what's wrong**\r\n\r\nGet data from #29693.\r\n\r\n```\r\nALTER TABLE hackernews\r\n    ADD COLUMN words Array(LowCardinality(String))\r\n    DEFAULT arraySort(\r\n              arrayDistinct(\r\n                extractAll(\r\n                  lower(\r\n                    decodeXMLComponent(\r\n                      extractTextFromHTML(text))),\r\n                  '\\w+')));\r\n\r\nALTER TABLE hackernews MATERIALIZE COLUMN words;\r\n\r\nALTER TABLE hackernews ADD INDEX words_bf (words) TYPE bloom_filter(0.01) GRANULARITY 1;\r\n\r\nALTER TABLE hackernews MATERIALIZE INDEX words_bf;\r\n\r\nSELECT * FROM system.merges \\G;\r\n\r\n...\r\n\r\nSELECT count() FROM hackernews WHERE has(words, 'clickhouse');\r\n\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Got empty stream for SerializationLowCardinality keys.: (while reading column words): (while reading from part /var/lib/clickhouse/store/f43/f4347434-b836-44ba-b434-7434b836f4ba/all_1_2874_5_2884/ from mark 46 with max_rows_to_read = 8192): While executing MergeTreeThread. (LOGICAL_ERROR)\r\n```\r\n\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nmaster.\n",
  "hints_text": "Can confirm problems: A _materialized_ column using `Array(LowCardinality(String))` in combination with a bloom filter leads to corrupted parts. The bloom index can then not be deleted by `ALTER TABLE DROP INDEX`.\r\n\r\nError:\r\n`Invalid Type for SerializationLowCardinality index column`.\nAlso confirmed for a regular `` LowCardinality(String)`` column participating in the ``ORDER BY`` clause (no sampling or primary key directives, tiered storage backed by S3).\r\n\r\nSolution: downgrade ``21.11.1.8636 (main, now) -> 21.10.1.8013 (main)``\n```\r\nCode: 117. DB::Exception: Invalid type for SerializationLowCardinality index column.: (while reading column service): (while reading from part /var/lib/clickhouse/data/rum/errors_lr/20211203_6778_11103_10/ from mark 6917 with max_rows_to_read = 41): While executing MergeTreeThread. (INCORRECT_DATA), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x9b605d4 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n1. DB::IndexesSerializationType::checkType(unsigned long) @ 0x11cf056d in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n2. DB::IndexesSerializationType::deserialize(DB::ReadBuffer&, DB::ISerialization::DeserializeBinaryBulkSettings const&) @ 0x11cefa2a in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n3. DB::SerializationLowCardinality::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > >*) const @ 0x11cec935 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n4. DB::MergeTreeReaderWide::readData(DB::NameAndTypePair const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, bool, unsigned long, unsigned long, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > >&, bool) @ 0x12e84a02 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n5. DB::MergeTreeReaderWide::readRows(unsigned long, unsigned long, bool, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&) @ 0x12e837d9 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n6. DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&) @ 0x133b29ce in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n7. DB::MergeTreeRangeReader::continueReadingChain(DB::MergeTreeRangeReader::ReadResult&, unsigned long&) @ 0x133b682a in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n8. DB::MergeTreeRangeReader::read(unsigned long, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&) @ 0x133b5ad3 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n9. DB::MergeTreeBaseSelectProcessor::readFromPartImpl() @ 0x133ae1ba in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n10. DB::MergeTreeBaseSelectProcessor::readFromPart() @ 0x133af40d in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n11. DB::MergeTreeBaseSelectProcessor::generate() @ 0x133adaab in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n12. DB::ISource::tryGenerate() @ 0x13114d95 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n13. DB::ISource::work() @ 0x1311495a in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n14. DB::SourceWithProgress::work() @ 0x13320742 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n15. void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()> >(std::__1::__function::__policy_storage const*) @ 0x131301fb in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n16. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1312c1b1 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n17. void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0x13132185 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n18. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x9ba2697 in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n19. void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*) @ 0x9ba609d in /usr/lib/debug/.build-id/83/32e80f7acf6de1033e1a6d9f16415c6e03dbf0.debug\r\n20. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n21. __clone @ 0x12171f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n```\r\n\r\non version 21.11.4.14",
  "created_at": "2021-12-07T13:46:01Z"
}