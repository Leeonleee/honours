{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 39600,
  "instance_id": "ClickHouse__ClickHouse-39600",
  "issue_numbers": [
    "30341"
  ],
  "base_commit": "3a5f05bd227d8ccd5d634bad5fc09ce3ec1cd0bc",
  "patch": "diff --git a/src/Functions/FunctionBinaryArithmetic.h b/src/Functions/FunctionBinaryArithmetic.h\nindex 4aaaf37e6cfe..fa13008f352c 100644\n--- a/src/Functions/FunctionBinaryArithmetic.h\n+++ b/src/Functions/FunctionBinaryArithmetic.h\n@@ -39,6 +39,7 @@\n #include <Common/FieldVisitorsAccurateComparison.h>\n #include <Common/assert_cast.h>\n #include <Common/typeid_cast.h>\n+#include <Interpreters/Context.h>\n \n #if USE_EMBEDDED_COMPILER\n #    pragma GCC diagnostic push\n@@ -1179,6 +1180,21 @@ class FunctionBinaryArithmetic : public IFunction\n                 {\n                     if constexpr (IsDataTypeDecimal<LeftDataType> && IsDataTypeDecimal<RightDataType>)\n                     {\n+                        if constexpr (is_division)\n+                        {\n+                            if (context->getSettingsRef().decimal_check_overflow)\n+                            {\n+                                /// Check overflow by using operands scale (based on big decimal division implementation details):\n+                                /// big decimal arithmetic is based on big integers, decimal operands are converted to big integers\n+                                /// i.e. int_operand = decimal_operand*10^scale\n+                                /// For division, left operand will be scaled by right operand scale also to do big integer division,\n+                                /// BigInt result = left*10^(left_scale + right_scale) / right * 10^right_scale\n+                                /// So, we can check upfront possible overflow just by checking max scale used for left operand\n+                                /// Note: it doesn't detect all possible overflow during big decimal division\n+                                if (left.getScale() + right.getScale() > ResultDataType::maxPrecision())\n+                                    throw Exception(\"Overflow during decimal division\", ErrorCodes::DECIMAL_OVERFLOW);\n+                            }\n+                        }\n                         ResultDataType result_type = decimalResultType<is_multiply, is_division>(left, right);\n                         type_res = std::make_shared<ResultDataType>(result_type.getPrecision(), result_type.getScale());\n                     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00700_decimal_arithm.reference b/tests/queries/0_stateless/00700_decimal_arithm.reference\nindex a41ef5b05571..811946c87e06 100644\n--- a/tests/queries/0_stateless/00700_decimal_arithm.reference\n+++ b/tests/queries/0_stateless/00700_decimal_arithm.reference\n@@ -35,3 +35,14 @@\n 0\t\\N\t\\N\n 0\t\\N\t\\N\n 0\t\\N\t\\N\n+-- { echoOn }\n+SELECT toDecimal128(1, 38) / toDecimal128(1, 0) SETTINGS decimal_check_overflow=1;\n+1\n+SELECT toDecimal128(1, 38) / toDecimal128(1, 1) SETTINGS decimal_check_overflow=1; -- { serverError DECIMAL_OVERFLOW }\n+SELECT toDecimal128(1, 38) / toDecimal128(1, 1) SETTINGS decimal_check_overflow=0;\n+-0.02084710076281539039012382229530463436\n+SELECT toDecimal128(1, 37) / toDecimal128(1, 1) SETTINGS decimal_check_overflow=1;\n+1\n+SELECT toDecimal128(1, 19) / toDecimal128(1, 19) SETTINGS decimal_check_overflow=1;\n+1\n+SELECT toDecimal128(1, 20) / toDecimal128(1, 19) SETTINGS decimal_check_overflow=1; -- { serverError DECIMAL_OVERFLOW }\ndiff --git a/tests/queries/0_stateless/00700_decimal_arithm.sql b/tests/queries/0_stateless/00700_decimal_arithm.sql\nindex c305a850e5b3..d24b593dac13 100644\n--- a/tests/queries/0_stateless/00700_decimal_arithm.sql\n+++ b/tests/queries/0_stateless/00700_decimal_arithm.sql\n@@ -82,4 +82,14 @@ SELECT toDecimal32(0, 4) AS x, multiIf(x = 0, NULL, intDivOrZero(1, x)), multiIf\n SELECT toDecimal64(0, 8) AS x, multiIf(x = 0, NULL, intDivOrZero(1, x)), multiIf(x = 0, NULL, intDivOrZero(x, 0));\n SELECT toDecimal64(0, 18) AS x, multiIf(x = 0, NULL, intDivOrZero(1, x)), multiIf(x = 0, NULL, intDivOrZero(x, 0));\n \n+-- { echoOn }\n+SELECT toDecimal128(1, 38) / toDecimal128(1, 0) SETTINGS decimal_check_overflow=1;\n+SELECT toDecimal128(1, 38) / toDecimal128(1, 1) SETTINGS decimal_check_overflow=1; -- { serverError DECIMAL_OVERFLOW }\n+SELECT toDecimal128(1, 38) / toDecimal128(1, 1) SETTINGS decimal_check_overflow=0;\n+SELECT toDecimal128(1, 37) / toDecimal128(1, 1) SETTINGS decimal_check_overflow=1;\n+\n+SELECT toDecimal128(1, 19) / toDecimal128(1, 19) SETTINGS decimal_check_overflow=1;\n+SELECT toDecimal128(1, 20) / toDecimal128(1, 19) SETTINGS decimal_check_overflow=1; -- { serverError DECIMAL_OVERFLOW }\n+-- { echoOff }\n+\n DROP TABLE IF EXISTS decimal;\n",
  "problem_statement": "Big Decimal can overflow without exception\n**Describe what's wrong**\r\n\r\nIt's possible to get meaningless result after big decimal division.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes. ClickHouse 21.11, 21.8\r\n\r\n**How to reproduce**\r\n\r\nClickHouse 21.11\r\n\r\n```\r\nSELECT toDecimal128(1, 20) / toDecimal128(1, 20)\r\n\r\nQuery id: 080e9ddd-9060-4095-8752-3b24dca42bb3\r\n\r\n\u250c\u2500divide(toDecimal128(1, 20), toDecimal128(1, 20))\u2500\u2510\r\n\u2502                           0.01318113592927845595 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n- P from [ 19 : 38 ] - for Decimal128(S)\r\n\r\nSELECT\r\n    toDecimal128(1, 20) / toDecimal128(1, 20) AS a,\r\n    toDecimal128(1, 19) / toDecimal128(1, 19) AS b\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u252c\u2500b\u2500\u2510\r\n\u2502 0.01318113592927845595 \u2502 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\r\n\r\nSELECT\r\n    [1, 1] AS vs,\r\n    toDecimal128(vs[2], 12) / toDecimal128(vs[1], 12) AS frac_dec128_12,\r\n    toDecimal128(vs[2], 24) / toDecimal128(vs[1], 24) AS frac_dec128_24a,\r\n    toFloat64(vs[2]) / toFloat64(vs[1]) AS frac_float64\r\n\r\nQuery id: 6e0fc55d-14a7-4cab-9d03-ccee9200c6b1\r\n\r\n\u250c\u2500vs\u2500\u2500\u2500\u2500\u252c\u2500frac_dec128_12\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500frac_dec128_24a\u2500\u252c\u2500frac_float64\u2500\u2510\r\n\u2502 [1,1] \u2502              1 \u2502 0.000000000018960114910927 \u2502            1 \u2502\r\n\r\n\r\nSELECT toDecimal64(2, 12) / toDecimal64(2, 12)\r\n\r\nQuery id: 5e5681dd-9984-43c9-a317-e9e232cd12ed\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n\r\nReceived exception from server (version 21.11.1):\r\nCode: 407. DB::Exception: Received from localhost:9000. DB::Exception: Decimal math overflow: While processing toDecimal64(2, 12) / toDecimal64(2, 12). (DECIMAL_OVERFLOW)\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\nException most likely.\n",
  "hints_text": "Problematic statement with `decimal scale` 20:\r\n```sql\r\nselect toDecimal128(1, 19) / toDecimal128(1, 19) -- OK\r\nselect toDecimal128(1, 20) / toDecimal128(1, 20) -- wrong\r\n```\r\n\r\nRoot cause is overflow inside function https://github.com/ClickHouse/ClickHouse/blob/7700c26076efc9c5087f9c74d6dceab7afb7a8e4/src/Functions/FunctionBinaryArithmetic.h#L588 here\r\nhttps://github.com/ClickHouse/ClickHouse/blob/7700c26076efc9c5087f9c74d6dceab7afb7a8e4/src/Functions/FunctionBinaryArithmetic.h#L597\r\n\r\nHere we multiply variable `a` (`scaled divident` i.e. original `divident` value(=`1`) multiplied by `decimal scale` i.e. `1 * 10^20`) by variable `scale` (= `10^20` where `20` power is `decimal scale`), to divide it afterwards by `divisor`. So the further division will divide incorrect `divident` which lead to incorrect result.\r\n\r\nTechnically it's similar to [#33301](https://github.com/ClickHouse/ClickHouse/issues/33301#issuecomment-1134425556) but in context of division, - 128 bit integer multiplication w/o overflow control:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/7700c26076efc9c5087f9c74d6dceab7afb7a8e4/base/base/wide_integer_impl.h#L581 where\r\n```\r\na = 1.00000.00000.00000.00000\r\nb = 1.00000.00000.00000.00000\r\nc = 131811359292784559562136384478721867776\r\n```\r\n\r\nStack:\r\n```\r\n#0  wide::integer<128ul, int>::_impl::multiply<wide::integer<128ul, int> > (lhs=..., rhs=...) at ../base/base/../base/wide_integer_impl.h:583\r\n#1  0x0000000011831e5e in wide::integer<128ul, int>::_impl::operator_star<wide::integer<128ul, int> > (lhs=..., rhs=...) at ../base/base/../base/wide_integer_impl.h:691\r\n#2  0x000000001183197d in wide::operator*<128ul, int, 128ul, int> (lhs=..., rhs=...) at ../base/base/../base/wide_integer_impl.h:1276\r\n#3  0x0000000013442765 in common::mulIgnoreOverflow<wide::integer<128ul, int>, wide::integer<128ul, int> > (x=..., y=...) at ../base/base/../base/arithmeticOverflow.h:13\r\n#4  0x0000000013442591 in common::mulOverflow<wide::integer<128ul, int> > (x=..., y=..., res=...) at ../base/base/../base/arithmeticOverflow.h:184\r\n#5  0x00000000166b8a00 in DB::impl_::DecimalBinaryOperation<DB::DivideFloatingImpl, DB::Decimal<wide::integer<128ul, int> >, true>::applyScaledDiv<true> (a=..., b=..., scale=...) at ../src/Functions/FunctionBinaryArithmetic.h:597\r\n#6  0x00000000166b8498 in DB::impl_::DecimalBinaryOperation<DB::DivideFloatingImpl, DB::Decimal<wide::integer<128ul, int> >, true>::process<true, true, wide::integer<128ul, int>, wide::integer<128ul, int> > (a=..., b=..., scale_a=..., scale_b=...) at ../src/Functions/FunctionBinaryArithmetic.h:471\r\n#7  0x0000000016836adb in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeNumericWithDecimal<DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::ColumnDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::ColumnDecimal<DB::Decimal<wide::integer<128ul, int> > > > (this=0x7f9f112ff558, left=..., right=..., col_left_const=0x7f9f55b289a0, col_right_const=0x7f9f55b289a0, col_left=0x0, col_right=0x0, col_left_size=1, right_nullmap=0x0) at ../src/Functions/FunctionBinaryArithmetic.h:1003\r\n#8  0x00000000168367e7 in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeNumeric<DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > > (this=0x7f9f112ff558, arguments=..., left=..., right=..., right_nullmap=0x0) at ../src/Functions/FunctionBinaryArithmetic.h:1458\r\n#9  0x00000000168365db in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}::operator()<DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::Decimal<wide::integer<128ul, int> > >(DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > const&, DB::Decimal<wide::integer<128ul, int> > const&) const (this=0x7f9f586fc5f0, left=..., right=...) at ../src/Functions/FunctionBinaryArithmetic.h:1608\r\n#10 0x0000000016829a44 in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}::operator()<DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > >(DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > const&) const::{lambda(auto:1 const&)#1}::operator()<wide::integer<128ul, int> >(wide::integer<128ul, int> const&) const (this=0x7f9f586fc2f0, right_=...) at ../src/Functions/FunctionBinaryArithmetic.h:653\r\n#11 0x000000001682927a in DB::castTypeToEither<DB::DataTypeNumber<char8_t>, DB::DataTypeNumber<unsigned short>, DB::DataTypeNumber<unsigned int>, DB::DataTypeNumber<unsigned long>, DB::DataTypeNumber<wide::integer<128ul, unsigned int> >, DB::DataTypeNumber<wide::integer<256ul, unsigned int> >, DB::DataTypeNumber<signed char>, DB::DataTypeNumber<short>, DB::DataTypeNumber<int>, DB::DataTypeNumber<long>, DB::DataTypeNumber<wide::integer<128ul, int> >, DB::DataTypeNumber<wide::integer<256ul, int>>, DB::DataTypeDecimal<DB::Decimal<int> >, DB::DataTypeDecimal<DB::Decimal<long> >, DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::DataTypeDecimal<DB::Decimal<wide::integer<256ul, int> > >, DB::DataTypeDate, DB::DataTypeDateTime, DB::DataTypeFixedString, DB::DataTypeString, DB::DataTypeNumber<float>, DB::DataTypeNumber<double>, DB::IDataType, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}::operator()<DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > >(DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > const&) const::{lambda(auto:1 const&)#1}>(TypeList<DB::DataTypeNumber<char8_t>, DB::DataTypeNumber<unsigned short>, DB::DataTypeNumber<unsigned int>, DB::DataTypeNumber<unsigned long>, DB::DataTypeNumber<wide::integer<128ul, unsigned int> >, DB::DataTypeNumber<wide::integer<256ul, unsigned int> >, DB::DataTypeNumber<signed char>, DB::DataTypeNumber<short>, DB::DataTypeNumber<int>, DB::DataTypeNumber<long>, DB::DataTypeNumber<wide::integer<128ul, int> >, DB::DataTypeNumber<wide::integer<256ul, int> >, DB::DataTypeDecimal<DB::Decimal<int> >, DB::DataTypeDecimal<DB::Decimal<long> >, DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::DataTypeDecimal<DB::Decimal<wide::integer<256ul, int> > >, DB::DataTypeDate, DB::DataTypeDateTime, DB::DataTypeFixedString, DB::DataTypeString, DB::DataTypeNumber<float>, DB::DataTypeNumber<double> >, DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&,auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}::operator()<DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > >(DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > const&) const::{lambda(auto:1 const&)#1}&&) (type=0x7f9f55bb26d8, f=...) at ../src/Functions/castTypeToEither.h:20\r\n#12 0x0000000016828c8d in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castType<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}::operator()<DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > >(DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > const&) const::{lambda(auto:1 const&)#1}>(DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::IDataType const*) (type=0x7f9f55bb26d8, f=...) at ../src/Functions/FunctionBinaryArithmetic.h:643\r\n#13 0x000000001678ad73 in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}::operator()<DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > >(DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > > const&) const (this=0x7f9f586fc4e8, left_=...) at ../src/Functions/FunctionBinaryArithmetic.h:651\r\n#14 0x000000001678a59a in DB::castTypeToEither<DB::DataTypeNumber<char8_t>, DB::DataTypeNumber<unsigned short>, DB::DataTypeNumber<unsigned int>, DB::DataTypeNumber<unsigned long>, DB::DataTypeNumber<wide::integer<128ul, unsigned int> >, DB::DataTypeNumber<wide::integer<256ul, unsigned int> >, DB::DataTypeNumber<signed char>, DB::DataTypeNumber<short>, DB::DataTypeNumber<int>, DB::DataTypeNumber<long>, DB::DataTypeNumber<wide::integer<128ul, int> >, DB::DataTypeNumber<wide::integer<256ul, int>>, DB::DataTypeDecimal<DB::Decimal<int> >, DB::DataTypeDecimal<DB::Decimal<long> >, DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::DataTypeDecimal<DB::Decimal<wide::integer<256ul, int> > >, DB::DataTypeDate, DB::DataTypeDateTime, DB::DataTypeFixedString, DB::DataTypeString, DB::DataTypeNumber<float>, DB::DataTypeNumber<double>, DB::IDataType, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}>(TypeList<DB::DataTypeNumber<char8_t>, DB::DataTypeNumber<unsigned short>, DB::DataTypeNumber<unsigned int>, DB::DataTypeNumber<unsigned long>, DB::DataTypeNumber<wide::integer<128ul, unsigned int> >, DB::DataTypeNumber<wide::integer<256ul, unsigned int> >, DB::DataTypeNumber<signed char>, DB::DataTypeNumber<short>, DB::DataTypeNumber<int>, DB::DataTypeNumber<long>, DB::DataTypeNumber<wide::integer<128ul, int> >, DB::DataTypeNumber<wide::integer<256ul, int> >, DB::DataTypeDecimal<DB::Decimal<int> >, DB::DataTypeDecimal<DB::Decimal<long> >, DB::DataTypeDecimal<DB::Decimal<wide::integer<128ul, int> > >, DB::DataTypeDecimal<DB::Decimal<wide::integer<256ul, int> > >, DB::DataTypeDate, DB::DataTypeDateTime, DB::DataTypeFixedString, DB::DataTypeString, DB::DataTypeNumber<float>, DB::DataTypeNumber<double> >, DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl,DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}&&) (type=0x7f9f55bb26d8, f=...) at ../src/Functions/castTypeToEither.h:20\r\n#15 0x0000000016789fad in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castType<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}>(DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::IDataType const*) (type=0x7f9f55bb26d8, f=...) at ../src/Functions/FunctionBinaryArithmetic.h:643\r\n#16 0x0000000016789f71 in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}, DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) const::{lambda(auto:1 const&, auto:2 const&)#1}&&) (left=0x7f9f55bb26d8, right=0x7f9f55bb26d8, f=...) at ../src/Functions/FunctionBinaryArithmetic.h:649\r\n#17 0x0000000016789ceb in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl2 (this=0x7f9f112ff558, arguments=..., result_type=..., input_rows_count=1, right_nullmap=0x0) at ../src/Functions/FunctionBinaryArithmetic.h:1579\r\n#18 0x000000001678853f in DB::FunctionBinaryArithmetic<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl (this=0x7f9f112ff558, arguments=..., result_type=..., input_rows_count=1) at ../src/Functions/FunctionBinaryArithmetic.h:1552\r\n#19 0x000000001678746f in DB::FunctionBinaryArithmeticWithConstants<DB::DivideFloatingImpl, DB::NameDivide, true, true, false>::executeImpl (this=0x7f9f112ff558, arguments=..., result_type=..., input_rows_count=1) at ../src/Functions/FunctionBinaryArithmetic.h:1723\r\n#20 0x0000000014abd1dc in DB::IFunction::executeImplDryRun (this=0x7f9f112ff558, arguments=..., result_type=..., input_rows_count=1) at ../src/Functions/IFunction.h:409\r\n#21 0x0000000014abba8d in DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl (this=0x7f9f55b289e0, arguments=..., result_type=..., input_rows_count=1) at ../src/Functions/IFunctionAdaptors.h:26\r\n#22 0x000000001e809bb7 in DB::IExecutableFunction::executeWithoutLowCardinalityColumns (this=0x7f9f55b289e0, args=..., result_type=..., input_rows_count=1, dry_run=true) at ../src/Functions/IFunction.cpp:247\r\n#23 0x000000001e80ac79 in DB::IExecutableFunction::executeWithoutSparseColumns (this=0x7f9f55b289e0, arguments=..., result_type=..., input_rows_count=1, dry_run=true) at ../src/Functions/IFunction.cpp:303\r\n#24 0x000000001e80bb83 in DB::IExecutableFunction::execute (this=0x7f9f55b289e0, arguments=..., result_type=..., input_rows_count=1, dry_run=true) at ../src/Functions/IFunction.cpp:373\r\n#25 0x000000001f108198 in DB::ActionsDAG::addFunction (this=0x7f9f55b0ffa8, function=..., children=..., result_name=...) at ../src/Interpreters/ActionsDAG.cpp:199\r\n#26 0x000000001f665121 in DB::ScopeStack::addFunction (this=0x7f9f586febb8, function=..., argument_names=..., result_name=...) at ../src/Interpreters/ActionsVisitor.cpp:618\r\n#27 0x000000001f670a05 in DB::ActionsMatcher::Data::addFunction (this=0x7f9f586feb60, function=..., argument_names=..., result_name=...) at ../src/Interpreters/ActionsVisitor.h:180\r\n#28 0x000000001f669ca9 in DB::ActionsMatcher::visit (node=..., ast=..., data=...) at ../src/Interpreters/ActionsVisitor.cpp:1183\r\n#29 0x000000001f6655cd in DB::ActionsMatcher::visit (ast=..., data=...) at ../src/Interpreters/ActionsVisitor.cpp:675\r\n#30 0x000000001f66a4fc in DB::ActionsMatcher::visit (expression_list=..., data=...) at ../src/Interpreters/ActionsVisitor.cpp:783\r\n#31 0x000000001f665639 in DB::ActionsMatcher::visit (ast=..., data=...) at ../src/Interpreters/ActionsVisitor.cpp:679\r\n#32 0x000000001f63a905 in DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::__1::shared_ptr<DB::IAST> const>::visit (this=0x7f9f586fead8, ast=...) at ../src/Interpreters/InDepthNodeVisitor.h:34\r\n#33 0x000000001f62ab06 in DB::ExpressionAnalyzer::getRootActions (this=0x7f9f55af7f80, ast=..., no_makeset_for_subqueries=false, actions=..., only_consts=false) at ../src/Interpreters/ExpressionAnalyzer.cpp:614\r\n#34 0x000000001f631a3e in DB::SelectQueryExpressionAnalyzer::appendSelect (this=0x7f9f55af7f80, chain=..., only_types=false) at ../src/Interpreters/ExpressionAnalyzer.cpp:1412\r\n#35 0x000000001f6357c8 in DB::ExpressionAnalysisResult::ExpressionAnalysisResult (this=0x7f9f586fff68, query_analyzer=..., metadata_snapshot=..., first_stage_=true, second_stage_=true, only_types=false, filter_info_=..., source_header=...) at ../src/Interpreters/ExpressionAnalyzer.cpp:1863\r\n#36 0x000000001fc6561d in DB::InterpreterSelectQuery::getSampleBlockImpl (this=0x7f9f55b9f800) at ../src/Interpreters/InterpreterSelectQuery.cpp:736\r\n#37 0x000000001fc5f159 in DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::SubqueryForSet, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, DB::SubqueryForSet> > >, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >)::$_1::operator()(bool) const (this=0x7f9f58701638, try_move_to_prewhere=true) at ../src/Interpreters/InterpreterSelectQuery.cpp:584\r\n#38 0x000000001fc5b316 in DB::InterpreterSelectQuery::InterpreterSelectQuery (this=0x7f9f55b9f800, query_ptr_=..., context_=..., input_pipe_=..., storage_=..., options_=..., required_result_column_names=..., metadata_snapshot_=..., subquery_for_sets_=..., prepared_sets_=...) at ../src/Interpreters/InterpreterSelectQuery.cpp:587\r\n#39 0x000000001fc59713 in DB::InterpreterSelectQuery::InterpreterSelectQuery (this=0x7f9f55b9f800, query_ptr_=..., context_=..., options_=..., required_result_column_names_=...) at ../src/Interpreters/InterpreterSelectQuery.cpp:173\r\n#40 0x000000001fcefae5 in std::__1::make_unique<DB::InterpreterSelectQuery, std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>&, DB::SelectQueryOptions&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&> (__args=..., __args=..., __args=..., __args=...) at ../contrib/libcxx/include/__memory/unique_ptr.h:725\r\n#41 0x000000001fced809 in DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter (this=0x7f9f55ba5480, ast_ptr_=..., current_required_result_column_names=...) at ../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:233\r\n#42 0x000000001fcecef7 in DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery (this=0x7f9f55ba5480, query_ptr_=..., context_=..., options_=..., required_result_column_names=...) at ../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:150\r\n#43 0x000000001fc02350 in std::__1::make_unique<DB::InterpreterSelectWithUnionQuery, std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>&, DB::SelectQueryOptions const&> (__args=..., __args=..., __args=...) at ../contrib/libcxx/include/__memory/unique_ptr.h:725\r\n#44 0x000000001fc0095d in DB::InterpreterFactory::get (query=..., context=..., options=...) at ../src/Interpreters/InterpreterFactory.cpp:122\r\n#45 0x000000002013de91 in DB::executeQueryImpl (begin=0x7f9f55a63cc0 \"SELECT toDecimal128(1, 20) / toDecimal128(1, 20)\", end=0x7f9f55a63cf0 \"\", context=..., internal=false, stage=DB::QueryProcessingStage::Complete, istr=0x0) at ../src/Interpreters/executeQuery.cpp:629\r\n#46 0x000000002013b644 in DB::executeQuery (query=..., context=..., internal=false, stage=DB::QueryProcessingStage::Complete) at ../src/Interpreters/executeQuery.cpp:1038\r\n#47 0x0000000020fe26a3 in DB::TCPHandler::runImpl (this=0x7f9f55ac2800) at ../src/Server/TCPHandler.cpp:331\r\n#48 0x0000000020ff1265 in DB::TCPHandler::run (this=0x7f9f55ac2800) at ../src/Server/TCPHandler.cpp:1778\r\n#49 0x00000000226efaf9 in Poco::Net::TCPServerConnection::start (this=0x7f9f55ac2800) at ../contrib/poco/Net/src/TCPServerConnection.cpp:43\r\n#50 0x00000000226f0306 in Poco::Net::TCPServerDispatcher::run (this=0x7f9f3d645200) at ../contrib/poco/Net/src/TCPServerDispatcher.cpp:115\r\n#51 0x000000002278bf14 in Poco::PooledThread::run (this=0x7fa00087bf00) at ../contrib/poco/Foundation/src/ThreadPool.cpp:199\r\n#52 0x0000000022788a9a in Poco::(anonymous namespace)::RunnableHolder::run (this=0x7fa00080c230) at ../contrib/poco/Foundation/src/Thread.cpp:55\r\n#53 0x000000002278787e in Poco::ThreadImpl::runnableEntry (pThread=0x7fa00087bf38) at ../contrib/poco/Foundation/src/Thread_POSIX.cpp:345\r\n#54 0x00007fa0017ed609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#55 0x00007fa001712133 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\r\n\nWhat exactly do we want to have here? The simplest solution can be to throw an exception like multiplication does:\r\n```sql\r\nSELECT toDecimal128(1, 20) * toDecimal128(1, 20)\r\n\r\nReceived exception from server (version 22.7.1):\r\nCode: 69. DB::Exception: Received from localhost:9000. DB::Exception: Scale 40 is out of bounds: While processing toDecimal128(1, 20) * toDecimal128(1, 20). (ARGUMENT_OUT_OF_BOUND)\r\n```\r\n\r\nHowever, implicitly setting scale to 40 at some point is strange in some way. I understand that from arithmetic point of view it is correct, but since both operands are 20-precise, why don't we operate with 20s and throw away smaller units?\r\nAnd since I understand why we need 40 in multiplication, using this upscaling in division is unobvious.\r\n\r\nSo the question is: what is the most acceptable solution?\nPlease respect `decimal_check_overflow`. SHould be enough for now.",
  "created_at": "2022-07-26T09:37:03Z"
}