diff --git a/base/poco/Foundation/include/Poco/Logger.h b/base/poco/Foundation/include/Poco/Logger.h
index f7da3c08fa32..74ddceea9dd5 100644
--- a/base/poco/Foundation/include/Poco/Logger.h
+++ b/base/poco/Foundation/include/Poco/Logger.h
@@ -952,8 +952,6 @@ class Foundation_API Logger : public Channel
     static std::pair<LoggerMapIterator, bool> add(Logger * pLogger);
     static std::optional<LoggerMapIterator> find(const std::string & name);
     static Logger * findRawPtr(const std::string & name);
-    void unsafeSetChannel(Channel * pChannel);
-    Channel* unsafeGetChannel() const;
 
     Logger();
     Logger(const Logger &);
diff --git a/base/poco/Foundation/src/Logger.cpp b/base/poco/Foundation/src/Logger.cpp
index 55564a7a1759..779af384b0be 100644
--- a/base/poco/Foundation/src/Logger.cpp
+++ b/base/poco/Foundation/src/Logger.cpp
@@ -61,13 +61,6 @@ Logger::~Logger()
 
 
 void Logger::setChannel(Channel* pChannel)
-{
-	std::lock_guard<std::mutex> lock(getLoggerMutex());
-	unsafeSetChannel(pChannel);
-}
-
-
-void Logger::unsafeSetChannel(Channel* pChannel)
 {
 	if (_pChannel) _pChannel->release();
 	_pChannel = pChannel;
@@ -76,14 +69,6 @@ void Logger::unsafeSetChannel(Channel* pChannel)
 
 
 Channel* Logger::getChannel() const
-{
-	std::lock_guard<std::mutex> lock(getLoggerMutex());
-
-	return unsafeGetChannel();
-}
-
-
-Channel* Logger::unsafeGetChannel() const
 {
 	return _pChannel;
 }
@@ -104,7 +89,7 @@ void Logger::setLevel(const std::string& level)
 void Logger::setProperty(const std::string& name, const std::string& value)
 {
 	if (name == "channel")
-		unsafeSetChannel(LoggingRegistry::defaultRegistry().channelForName(value));
+		setChannel(LoggingRegistry::defaultRegistry().channelForName(value));
 	else if (name == "level")
 		setLevel(value);
 	else
@@ -175,7 +160,7 @@ void Logger::setChannel(const std::string& name, Channel* pChannel)
 			if (len == 0 ||
 				(it.first.compare(0, len, name) == 0 && (it.first.length() == len || it.first[len] == '.')))
 			{
-				it.second.logger->unsafeSetChannel(pChannel);
+				it.second.logger->setChannel(pChannel);
 			}
 		}
 	}
@@ -408,7 +393,7 @@ std::pair<Logger::LoggerMapIterator, bool> Logger::unsafeGet(const std::string&
 		else
 		{
 			Logger& par = parent(name);
-			logger = new Logger(name, par.unsafeGetChannel(), par.getLevel());
+			logger = new Logger(name, par.getChannel(), par.getLevel());
 		}
 
 		return add(logger);
diff --git a/docs/en/operations/server-configuration-parameters/settings.md b/docs/en/operations/server-configuration-parameters/settings.md
index 30440522b4ab..b8cbf4f555f8 100644
--- a/docs/en/operations/server-configuration-parameters/settings.md
+++ b/docs/en/operations/server-configuration-parameters/settings.md
@@ -13,7 +13,7 @@ import TabItem from '@theme/TabItem';
 
 This section contains descriptions of server settings that cannot be changed at the session or query level. These settings are stored in the `config.xml` file on the ClickHouse server. For more information on configuration files in ClickHouse see ["Configuration Files"](/docs/en/operations/configuration-files).
 
-Other settings are described in the “[Settings](../../operations/settings/index.md#session-settings-intro)” section. 
+Other settings are described in the “[Settings](../../operations/settings/index.md#session-settings-intro)” section.
 Before studying the settings, we recommend to read the [Configuration files](../../operations/configuration-files.md#configuration_files) section and note the use of substitutions (the `incl` and `optional` attributes).
 
 ## allow_use_jemalloc_memory
@@ -121,7 +121,7 @@ Default: `16`
 
 ## background_merges_mutations_concurrency_ratio
 
-Sets a ratio between the number of threads and the number of background merges and mutations that can be executed concurrently. 
+Sets a ratio between the number of threads and the number of background merges and mutations that can be executed concurrently.
 
 For example, if the ratio equals to 2 and [`background_pool_size`](#background_pool_size) is set to 16 then ClickHouse can execute 32 background merges concurrently. This is possible, because background operations could be suspended and postponed. This is needed to give small merges more execution priority.
 
@@ -430,11 +430,11 @@ Default: `1000`
 
 ## max_concurrent_queries
 
-Limit on total number of concurrently executed queries. Note that limits on `INSERT` and `SELECT` queries, and on the maximum number of queries for users must also be considered. 
+Limit on total number of concurrently executed queries. Note that limits on `INSERT` and `SELECT` queries, and on the maximum number of queries for users must also be considered.
 
-See also: 
+See also:
 - [`max_concurrent_insert_queries`](#max_concurrent_insert_queries)
-- [`max_concurrent_select_queries`](#max_concurrent_select_queries) 
+- [`max_concurrent_select_queries`](#max_concurrent_select_queries)
 - [`max_concurrent_queries_for_all_users`](/docs/en/operations/settings/settings/#max_concurrent_queries_for_all_users)
 
 :::note
@@ -465,7 +465,7 @@ Default: `0`
 
 ## max_concurrent_select_queries
 
-Limit on total number of concurrently select queries. 
+Limit on total number of concurrently select queries.
 
 :::note
 
@@ -481,12 +481,12 @@ Default: `0`
 ## max_waiting_queries
 
 Limit on total number of concurrently waiting queries.
-Execution of a waiting query is blocked while required tables are loading asynchronously (see [`async_load_databases`](#async_load_databases). 
+Execution of a waiting query is blocked while required tables are loading asynchronously (see [`async_load_databases`](#async_load_databases).
 
 :::note
 Waiting queries are not counted when limits controlled by the following settings are checked:
 
-- [`max_concurrent_queries`](#max_concurrent_queries) 
+- [`max_concurrent_queries`](#max_concurrent_queries)
 - [`max_concurrent_insert_queries`](#max_concurrent_insert_queries)
 - [`max_concurrent_select_queries`](#max_concurrent_select_queries)
 - [`max_concurrent_queries_for_user`](/docs/en/operations/settings/settings#max_concurrent_select_queries)
@@ -646,7 +646,7 @@ Interval in seconds during which the server's maximum allowed memory consumption
 
 To disable the cgroup observer, set this value to `0`.
 
-see settings: 
+see settings:
 - [`cgroup_memory_watcher_hard_limit_ratio`](#cgroup_memory_watcher_hard_limit_ratio)
 - [`cgroup_memory_watcher_soft_limit_ratio`](#cgroup_memory_watcher_soft_limit_ratio).
 
@@ -750,7 +750,7 @@ Default: `100000`
 
 ## max_table_num_to_throw
 
-If number of tables is greater than this value, server will throw an exception. 
+If number of tables is greater than this value, server will throw an exception.
 
 The following tables are not counted:
 - view
@@ -779,7 +779,7 @@ Default: `0`
 
 ## max_replicated_table_num_to_throw
 
-If the number of replicated tables is greater than this value, the server will throw an exception. 
+If the number of replicated tables is greater than this value, the server will throw an exception.
 
 Only counts tables for database engines:
 - Atomic
@@ -911,7 +911,7 @@ Default: `10000`
 
 ## mmap_cache_size
 
-Sets the cache size (in bytes) for mapped files. This setting allows avoiding frequent open/close calls (which are very expensive due to consequent page faults), and to reuse mappings from several threads and queries. The setting value is the number of mapped regions (usually equal to the number of mapped files). 
+Sets the cache size (in bytes) for mapped files. This setting allows avoiding frequent open/close calls (which are very expensive due to consequent page faults), and to reuse mappings from several threads and queries. The setting value is the number of mapped regions (usually equal to the number of mapped files).
 
 The amount of data in mapped files can be monitored in the following system tables with the following metrics:
 
@@ -1388,7 +1388,7 @@ Default: `16`
 ## database_catalog_unused_dir_cleanup_period_sec
 
 Parameter of a task that cleans up garbage from `store/` directory.
-Sets scheduling period of the task. 
+Sets scheduling period of the task.
 
 :::note
 A value of `0` means "never". The default value corresponds to 1 day.
@@ -1597,7 +1597,7 @@ A value of `0` means ClickHouse disables HSTS. If you set a positive number, the
 
 ## mlock_executable
 
-Perform `mlockall` after startup to lower first queries latency and to prevent clickhouse executable from being paged out under high IO load. 
+Perform `mlockall` after startup to lower first queries latency and to prevent clickhouse executable from being paged out under high IO load.
 
 :::note
 Enabling this option is recommended but will lead to increased startup time for up to a few seconds.
@@ -1828,11 +1828,9 @@ The location and format of log messages.
 | `stream_compress`         | Compress log messages using LZ4. Set to `1` or `true` to enable.                                                                                                                    |
 | `console`                 | Do not write log messages to log files, instead print them in the console. Set to `1` or `true` to enable. Default is `1` if Clickhouse does not run in daemon mode, `0` otherwise. |
 | `console_log_level`       | Log level for console output. Defaults to `level`.                                                                                                                                  |
-| `formatting`              | Log format for console output. Currently, only `json` is supported                                                                                                                  | 
+| `formatting`              | Log format for console output. Currently, only `json` is supported                                                                                                                  |
 | `use_syslog`              | Also forward log output to syslog.                                                                                                                                                  |
 | `syslog_level`            | Log level for logging to syslog.                                                                                                                                                    |
-| `message_regexp`          | Only log messages that match this regular expression. Defaults to `""`, indicating no filtering.                                                                                    |
-| `message_regexp_negative` | Only log messages that don't match this regular expression. Defaults to `""`, indicating no filtering.                                                                              |
 
 **Log format specifiers**
 
@@ -1921,27 +1919,6 @@ The log level of individual log names can be overridden. For example, to mute al
 </logger>
 ```
 
-**Regular Expression Filtering**
-
-The messages logged can be filtered using regular expressions using `message_regexp` and `message_regexp_negative`. This can be done on a per-level basis or globally. If both a global and logger-specific pattern is specified, the global pattern is overridden (ignored) and only the logger-specific pattern applies. The positive and negative patterns are considered independently for this situation. Note: Using this feature may cause a slight slowdown in performance.
-
-```xml
-    <logger>
-        <level>trace</level>
-        <!-- Global: Don't log Trace messages -->
-        <message_regexp_negative>.*Trace.*</message_regexp_negative>
-
-        <message_regexps>
-            <logger>
-                <!-- For the executeQuery logger, only log if message has "Read", but not "from" -->
-                <name>executeQuery</name>
-                <message_regexp>.*Read.*</message_regexp>
-                <message_regexp_negative>.*from.*</message_regexp_negative>
-            </logger>
-        </message_regexps>
-    </logger>
-```
-
 **syslog**
 
 To write log messages additionally to syslog:
@@ -1969,7 +1946,7 @@ Keys for `<syslog>`:
 
 **Log formats**
 
-You can specify the log format that will be outputted in the console log. Currently, only JSON is supported. 
+You can specify the log format that will be outputted in the console log. Currently, only JSON is supported.
 
 **Example**
 
@@ -2117,12 +2094,12 @@ Default: 50 GB.
 
 ## background_pool_size
 
-Sets the number of threads performing background merges and mutations for tables with MergeTree engines. 
+Sets the number of threads performing background merges and mutations for tables with MergeTree engines.
 
 :::note
-- This setting could also be applied at server startup from the `default` profile configuration for backward compatibility at the ClickHouse server start. 
-- You can only increase the number of threads at runtime. 
-- To lower the number of threads you have to restart the server. 
+- This setting could also be applied at server startup from the `default` profile configuration for backward compatibility at the ClickHouse server start.
+- You can only increase the number of threads at runtime.
+- To lower the number of threads you have to restart the server.
 - By adjusting this setting, you manage CPU and disk load.
 :::
 
@@ -2359,10 +2336,10 @@ Use the following parameters to configure logging:
 | `engine`                           | [MergeTree Engine Definition](../../engines/table-engines/mergetree-family/mergetree.md#table_engine-mergetree-creating-a-table) for a system table. Can't be used if `partition_by` or `order_by` defined. |                     |
 | `flush_interval_milliseconds`      | Interval for flushing data from the buffer in memory to the table.                                                                                                                                          |                     |
 | `max_size_rows`                    | Maximal size in lines for the logs. When non-flushed logs amount reaches max_size, logs dumped to the disk.                                                                                                 | `1048576`           |
-| `reserved_size_rows`               | Pre-allocated memory size in lines for the logs.                                                                                                                                                            | `8192`              | 
+| `reserved_size_rows`               | Pre-allocated memory size in lines for the logs.                                                                                                                                                            | `8192`              |
 | `buffer_size_rows_flush_threshold` | Lines amount threshold, reaching it launches flushing logs to the disk in background.                                                                                                                       | `max_size_rows / 2` |
 | `flush_on_crash`                   | Indication whether logs should be dumped to the disk in case of a crash.                                                                                                                                    | `false`             |
-| `storage_policy`                   | Name of storage policy to use for the table (optional)                                                                                                                                                      |                     | 
+| `storage_policy`                   | Name of storage policy to use for the table (optional)                                                                                                                                                      |                     |
 | `settings`                         | [Additional parameters](../../engines/table-engines/mergetree-family/mergetree.md/#settings) that control the behavior of the MergeTree (optional).                                                         |                     |
 
 **Example**
@@ -2545,7 +2522,7 @@ Use the following parameters to configure logging:
 | Parameter                          | Description                                                                                                                                                                                                     | Default Value       |
 |------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------|
 | `database`                         | Name of the database.                                                                                                                                                                                           |                     |
-| `table`                            | Name of the system table the queries will be logged in.                                                                                                                                                         |                     | 
+| `table`                            | Name of the system table the queries will be logged in.                                                                                                                                                         |                     |
 | `partition_by`                     | [Custom partitioning key](../../engines/table-engines/mergetree-family/custom-partitioning-key.md) for a system table. Can't be used if `engine` is defined.                                                                                                                        |                     |
 | `order_by`                         | [Custom sorting key](../../engines/table-engines/mergetree-family/mergetree.md#order_by) for a system table. Can't be used if `engine` is defined.                                                                                                                             |                     |
 | `engine`                           | [MergeTree Engine Definition](../../engines/table-engines/mergetree-family/mergetree.md#table_engine-mergetree-creating-a-table) for a system table. Can't be used if `partition_by` or `order_by` are defined. |                     |
@@ -2554,7 +2531,7 @@ Use the following parameters to configure logging:
 | `reserved_size_rows`               | Pre-allocated memory size in lines for the logs.                                                                                                                                                                | `8192`              |
 | `buffer_size_rows_flush_threshold` | Lines amount threshold, reaching it launches flushing logs to the disk in background.                                                                                                                           | `max_size_rows / 2` |
 | `flush_on_crash`                   | Indication whether logs should be dumped to the disk in case of a crash                                                                                                                                         | `false`             |
-| `storage_policy`                   | Name of storage policy to use for the table (optional)                                                                                                                                                          |                     |                                                                                                                                         
+| `storage_policy`                   | Name of storage policy to use for the table (optional)                                                                                                                                                          |                     |
 | `settings`                         | [Additional parameters](../../engines/table-engines/mergetree-family/mergetree.md/#settings) that control the behavior of the MergeTree (optional).                                                             |                     |
 
 If the table does not exist, ClickHouse will create it. If the structure of the query thread log changed when the ClickHouse server was updated, the table with the old structure is renamed, and a new table is created automatically.
@@ -3077,7 +3054,7 @@ Storage method for data part headers in ZooKeeper. This setting only applies to
 
 ClickHouse uses the setting for all the tables on the server. You can change the setting at any time. Existing tables change their behaviour when the setting changes.
 
-**For each table** 
+**For each table**
 
 When creating a table, specify the corresponding [engine setting](../../engines/table-engines/mergetree-family/mergetree.md#table_engine-mergetree-creating-a-table). The behaviour of an existing table with this setting does not change, even if the global setting changes.
 
@@ -3261,7 +3238,7 @@ Default: `0`
 
 Define proxy servers for HTTP and HTTPS requests, currently supported by S3 storage, S3 table functions, and URL functions.
 
-There are three ways to define proxy servers: 
+There are three ways to define proxy servers:
 - environment variables
 - proxy lists
 - remote proxy resolvers.
@@ -3524,7 +3501,7 @@ Changing this setting does not affect existing users. Create/alter authenticatio
 Non authentication create/alter queries will succeed.
 
 :::note
-A value of `0` means unlimited. 
+A value of `0` means unlimited.
 :::
 
 Type: UInt64
diff --git a/src/Loggers/Loggers.cpp b/src/Loggers/Loggers.cpp
index ce91a07fabd7..e7bfb0754fdf 100644
--- a/src/Loggers/Loggers.cpp
+++ b/src/Loggers/Loggers.cpp
@@ -1,14 +1,12 @@
 #include "Loggers.h"
 
-#include <Loggers/OwnFilteringChannel.h>
-#include <Loggers/OwnFormattingChannel.h>
-#include <Loggers/OwnPatternFormatter.h>
-#include <Loggers/OwnSplitChannel.h>
+#include "OwnFormattingChannel.h"
+#include "OwnPatternFormatter.h"
+#include "OwnSplitChannel.h"
 
 #include <iostream>
 #include <sstream>
 
-#include <Poco/AutoPtr.h>
 #include <Poco/ConsoleChannel.h>
 #include <Poco/Logger.h>
 #include <Poco/Net/RemoteSyslogChannel.h>
@@ -224,18 +222,6 @@ void Loggers::buildLoggers(Poco::Util::AbstractConfiguration & config, Poco::Log
     logger.close();
 
     logger.setChannel(split);
-
-    const std::string global_pos_pattern = config.getRawString("logger.message_regexp", "");
-    const std::string global_neg_pattern = config.getRawString("logger.message_regexp_negative", "");
-
-    Poco::AutoPtr<OwnPatternFormatter> pf;
-    if (config.getString("logger.formatting.type", "") == "json")
-        pf = new OwnJSONPatternFormatter(config);
-    else
-        pf = new OwnPatternFormatter;
-
-    DB::createOrUpdateFilterChannel(logger, global_pos_pattern, global_neg_pattern, pf, Poco::Logger::ROOT);
-
     logger.setLevel(max_log_level);
 
     // Global logging level and channel (it can be overridden for specific loggers).
@@ -250,8 +236,6 @@ void Loggers::buildLoggers(Poco::Util::AbstractConfiguration & config, Poco::Log
     {
         logger.get(name).setLevel(max_log_level);
         logger.get(name).setChannel(split);
-
-        DB::createOrUpdateFilterChannel(logger.get(name), global_pos_pattern, global_neg_pattern, pf, name);
     }
 
     // Explicitly specified log levels for specific loggers.
@@ -278,26 +262,6 @@ void Loggers::buildLoggers(Poco::Util::AbstractConfiguration & config, Poco::Log
             }
         }
     }
-    // Explicitly specified regexp patterns for filtering specific loggers
-    {
-        Poco::Util::AbstractConfiguration::Keys loggers_regexp;
-        config.keys("logger.message_regexps", loggers_regexp);
-
-        if (!loggers_regexp.empty())
-        {
-            for (const auto & key : loggers_regexp)
-            {
-                if (key == "logger" || key.starts_with("logger["))
-                {
-                    const std::string name = config.getString("logger.message_regexps." + key + ".name");
-                    const std::string pos_pattern = config.getRawString("logger.message_regexps." + key + ".message_regexp", global_pos_pattern);
-                    const std::string neg_pattern = config.getRawString("logger.message_regexps." + key + ".message_regexp_negative", global_neg_pattern);
-
-                    DB::createOrUpdateFilterChannel(logger.root().get(name), pos_pattern, neg_pattern, pf, name);
-                }
-            }
-        }
-    }
 #ifndef WITHOUT_TEXT_LOG
     if (allowTextLog() && config.has("text_log"))
     {
@@ -383,32 +347,16 @@ void Loggers::updateLevels(Poco::Util::AbstractConfiguration & config, Poco::Log
     }
     split->setLevel("syslog", syslog_level);
 
-    const std::string global_pos_pattern = config.getRawString("logger.message_regexp", "");
-    const std::string global_neg_pattern = config.getRawString("logger.message_regexp_negative", "");
-
-    Poco::AutoPtr<OwnPatternFormatter> pf;
-    if (config.getString("logger.formatting.type", "") == "json")
-        pf = new OwnJSONPatternFormatter(config);
-    else
-        pf = new OwnPatternFormatter;
-
-    DB::createOrUpdateFilterChannel(logger, global_pos_pattern, global_neg_pattern, pf, Poco::Logger::ROOT);
-
     // Global logging level (it can be overridden for specific loggers).
     logger.setLevel(max_log_level);
 
     // Set level to all already created loggers
     std::vector<std::string> names;
-    logger.root().names(names);
 
-    // Set all to global in case logger.levels are not specified
+    logger.root().names(names);
     for (const auto & name : names)
-    {
         logger.root().get(name).setLevel(max_log_level);
 
-        DB::createOrUpdateFilterChannel(logger.root().get(name), global_pos_pattern, global_neg_pattern, pf, name);
-    }
-
     logger.root().setLevel(max_log_level);
 
     // Explicitly specified log levels for specific loggers.
@@ -435,27 +383,6 @@ void Loggers::updateLevels(Poco::Util::AbstractConfiguration & config, Poco::Log
             }
         }
     }
-
-    // Explicitly specified regexp patterns for filtering specific loggers
-    {
-        Poco::Util::AbstractConfiguration::Keys loggers_regexp;
-        config.keys("logger.message_regexps", loggers_regexp);
-
-        if (!loggers_regexp.empty())
-        {
-            for (const auto & key : loggers_regexp)
-            {
-                if (key == "logger" || key.starts_with("logger["))
-                {
-                    const std::string name(config.getString("logger.message_regexps." + key + ".name"));
-                    const std::string pos_pattern(config.getRawString("logger.message_regexps." + key + ".message_regexp", global_pos_pattern));
-                    const std::string neg_pattern(config.getRawString("logger.message_regexps." + key + ".message_regexp_negative", global_neg_pattern));
-
-                    DB::createOrUpdateFilterChannel(logger.root().get(name), pos_pattern, neg_pattern, pf, name);
-                }
-            }
-        }
-    }
 }
 
 /// NOLINTEND(readability-static-accessed-through-instance)
diff --git a/src/Loggers/OwnFilteringChannel.cpp b/src/Loggers/OwnFilteringChannel.cpp
deleted file mode 100644
index 36193c463142..000000000000
--- a/src/Loggers/OwnFilteringChannel.cpp
+++ /dev/null
@@ -1,96 +0,0 @@
-#include <shared_mutex>
-#include <Loggers/OwnFilteringChannel.h>
-#include <Poco/RegularExpression.h>
-
-
-namespace DB
-{
-
-void OwnFilteringChannel::log(const Poco::Message & msg)
-{
-    if (regexpFilteredOut(msg))
-        return;
-
-    pChannel->log(msg);
-}
-
-bool OwnFilteringChannel::regexpFilteredOut(const Poco::Message & msg)
-{
-    std::string formatted_text;
-    auto [pos_pattern, neg_pattern] = safeGetPatterns();
-
-    // Skip checks if both patterns are empty
-    if (!pos_pattern.empty() || !neg_pattern.empty())
-    {
-        // Apply formatting to the text
-        if (pFormatter)
-        {
-            pFormatter->formatExtended(ExtendedLogMessage::getFrom(msg), formatted_text);
-        }
-        else
-        {
-            formatted_text = msg.getText();
-        }
-
-        // Check for patterns in formatted text
-        Poco::RegularExpression positive_regexp(pos_pattern);
-        if (!pos_pattern.empty() && !positive_regexp.match(formatted_text))
-        {
-            return true;
-        }
-
-        Poco::RegularExpression negative_regexp(neg_pattern);
-        if (!neg_pattern.empty() && negative_regexp.match(formatted_text))
-        {
-            return true;
-        }
-    }
-
-    return false;
-}
-
-void OwnFilteringChannel::setRegexpPatterns(const std::string & new_pos_pattern, const std::string & new_neg_pattern)
-{
-    auto [old_pos_pattern, old_neg_pattern] = safeGetPatterns();
-    if (old_pos_pattern != new_pos_pattern || old_neg_pattern != new_neg_pattern)
-    {
-        std::unique_lock<std::shared_mutex> write_lock(pattern_mutex);
-        positive_pattern = new_pos_pattern;
-        negative_pattern = new_neg_pattern;
-    }
-}
-
-std::pair<std::string, std::string> OwnFilteringChannel::safeGetPatterns()
-{
-    std::shared_lock<std::shared_mutex> read_lock(pattern_mutex);
-    return std::make_pair(positive_pattern, negative_pattern);
-}
-
-void createOrUpdateFilterChannel(Poco::Logger & logger, const std::string & pos_pattern, const std::string & neg_pattern, Poco::AutoPtr<OwnPatternFormatter> pf, const std::string & name)
-{
-    Poco::AutoPtr<Poco::Channel> src_channel(logger.getChannel(), true /*shared*/);
-    Poco::AutoPtr<DB::OwnFilteringChannel> filter_channel(dynamic_cast<DB::OwnFilteringChannel*>(src_channel.get()), true);
-
-    // If this logger doesn't have it's own unique filter channel
-    if (!filter_channel)
-    {
-        // Skip if regexp feature has never been used yet
-        if (pos_pattern.empty() && neg_pattern.empty())
-            return;
-
-        Poco::AutoPtr<DB::OwnFilteringChannel> new_filter_channel = new DB::OwnFilteringChannel(src_channel, pf, pos_pattern, neg_pattern, name);
-        logger.setChannel(new_filter_channel);
-    }
-    // If logger has filter channel, but not it's own unique one (e.g copied from another by default), create copy
-    else if (filter_channel->getAssignedLoggerName() != name)
-    {
-        Poco::AutoPtr<DB::OwnFilteringChannel> new_filter_channel = new DB::OwnFilteringChannel(filter_channel, pos_pattern, neg_pattern, name);
-        logger.setChannel(new_filter_channel);
-    }
-    else
-    {
-        filter_channel->setRegexpPatterns(pos_pattern, neg_pattern);
-    }
-}
-
-}
diff --git a/src/Loggers/OwnFilteringChannel.h b/src/Loggers/OwnFilteringChannel.h
deleted file mode 100644
index 5dce6007baf0..000000000000
--- a/src/Loggers/OwnFilteringChannel.h
+++ /dev/null
@@ -1,84 +0,0 @@
-#pragma once
-#include <Poco/AutoPtr.h>
-#include <Poco/Channel.h>
-#include <Poco/Message.h>
-#include <Poco/Logger.h>
-#include <Poco/Util/AbstractConfiguration.h>
-#include <Loggers/OwnPatternFormatter.h>
-#include <shared_mutex>
-
-
-namespace DB
-{
-
-// Filters the logs based on regular expressions. Should be processed after formatting channel to read entire formatted text
-class OwnFilteringChannel : public Poco::Channel
-{
-public:
-    explicit OwnFilteringChannel(Poco::AutoPtr<Poco::Channel> pChannel_, Poco::AutoPtr<OwnPatternFormatter> pf,
-        const std::string & positive_pattern_, const std::string & negative_pattern_, const std::string & name_)
-    : logger_name(name_), positive_pattern(positive_pattern_), negative_pattern(negative_pattern_), pChannel(pChannel_), pFormatter(pf)
-    {
-    }
-
-    explicit OwnFilteringChannel(Poco::AutoPtr<OwnFilteringChannel> other, const std::string & positive_pattern_, const std::string & negative_pattern_, const std::string & name_)
-    : logger_name(name_), positive_pattern(positive_pattern_), negative_pattern(negative_pattern_), pChannel(other->pChannel), pFormatter(other->pFormatter)
-    {
-    }
-
-    // Only log if pass both positive and negative regexp checks.
-    // Checks the regexps on the formatted text (without color), but then passes the raw text
-    // to the split channel to handle formatting for individual channels (e.g apply color)
-    void log(const Poco::Message & msg) override;
-
-    // Sets the regex patterns to use for filtering. Specifying an empty string pattern "" indicates no filtering
-    void setRegexpPatterns(const std::string & new_pos_pattern, const std::string & new_neg_pattern);
-
-    std::string getAssignedLoggerName() const
-    {
-        return logger_name;
-    }
-
-    void open() override
-    {
-        if (pChannel)
-            pChannel->open();
-    }
-
-    void close() override
-    {
-        if (pChannel)
-            pChannel->close();
-    }
-
-    void setProperty(const std::string & name, const std::string & value) override
-    {
-        if (pChannel)
-            pChannel->setProperty(name, value);
-    }
-
-    std::string getProperty(const std::string & name) const override
-    {
-        if (pChannel)
-            return pChannel->getProperty(name);
-        return "";
-    }
-
-private:
-    bool regexpFilteredOut(const Poco::Message & msg);
-
-    // Create copy safely, so we don't have to worry about race conditions from reading and writing at the same time
-    std::pair<std::string, std::string> safeGetPatterns();
-
-    const std::string logger_name;
-    std::string positive_pattern;
-    std::string negative_pattern;
-    Poco::AutoPtr<Poco::Channel> pChannel;
-    Poco::AutoPtr<OwnPatternFormatter> pFormatter;
-    std::shared_mutex pattern_mutex;
-};
-
-// Creates filter channel only if needed or updates if it already exists
-void createOrUpdateFilterChannel(Poco::Logger & logger, const std::string & pos_pattern, const std::string & neg_pattern, Poco::AutoPtr<OwnPatternFormatter> pf, const std::string & name = "");
-
-}
