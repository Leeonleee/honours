{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64783,
  "instance_id": "ClickHouse__ClickHouse-64783",
  "issue_numbers": [
    "64543"
  ],
  "base_commit": "f52ca21db0263002cb7c2a7f776debaaafe1f389",
  "patch": "diff --git a/src/Columns/FilterDescription.h b/src/Columns/FilterDescription.h\nindex 63457b8b5447..b4335a49787a 100644\n--- a/src/Columns/FilterDescription.h\n+++ b/src/Columns/FilterDescription.h\n@@ -23,15 +23,10 @@ struct ConstantFilterDescription\n \n struct IFilterDescription\n {\n-    /// has_one can be pre-compute during creating the filter description in some cases\n-    Int64 has_one = -1;\n     virtual ColumnPtr filter(const IColumn & column, ssize_t result_size_hint) const = 0;\n     virtual size_t countBytesInFilter() const = 0;\n     virtual ~IFilterDescription() = default;\n-    bool hasOne() { return has_one >= 0 ? has_one : hasOneImpl();}\n protected:\n-    /// Calculate if filter has a non-zero from the filter values, may update has_one\n-    virtual bool hasOneImpl() = 0;\n };\n \n /// Obtain a filter from non constant Column, that may have type: UInt8, Nullable(UInt8).\n@@ -45,7 +40,6 @@ struct FilterDescription final : public IFilterDescription\n     ColumnPtr filter(const IColumn & column, ssize_t result_size_hint) const override { return column.filter(*data, result_size_hint); }\n     size_t countBytesInFilter() const override { return DB::countBytesInFilter(*data); }\n protected:\n-    bool hasOneImpl() override { return data ? (has_one = !memoryIsZero(data->data(), 0, data->size())) : false; }\n };\n \n struct SparseFilterDescription final : public IFilterDescription\n@@ -56,7 +50,6 @@ struct SparseFilterDescription final : public IFilterDescription\n     ColumnPtr filter(const IColumn & column, ssize_t) const override { return column.index(*filter_indices, 0); }\n     size_t countBytesInFilter() const override { return filter_indices->size(); }\n protected:\n-    bool hasOneImpl() override { return filter_indices && !filter_indices->empty(); }\n };\n \n struct ColumnWithTypeAndName;\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 6848dfb196ee..40c5b37988d6 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -398,7 +398,7 @@ class IColumn;\n     M(Bool, allow_experimental_analyzer, true, \"Allow experimental analyzer.\", 0) \\\n     M(Bool, analyzer_compatibility_join_using_top_level_identifier, false, \"Force to resolve identifier in JOIN USING from projection (for example, in `SELECT a + 1 AS b FROM t1 JOIN t2 USING (b)` join will be performed by `t1.a + 1 = t2.b`, rather then `t1.b = t2.b`).\", 0) \\\n     M(Bool, prefer_global_in_and_join, false, \"If enabled, all IN/JOIN operators will be rewritten as GLOBAL IN/JOIN. It's useful when the to-be-joined tables are only available on the initiator and we need to always scatter their data on-the-fly during distributed processing with the GLOBAL keyword. It's also useful to reduce the need to access the external sources joining external tables.\", 0) \\\n-    M(Bool, enable_vertical_final, false, \"Not recommended. If enable, remove duplicated rows during FINAL by marking rows as deleted and filtering them later instead of merging rows\", 0) \\\n+    M(Bool, enable_vertical_final, true, \"If enable, remove duplicated rows during FINAL by marking rows as deleted and filtering them later instead of merging rows\", 0) \\\n     \\\n     \\\n     /** Limits during query execution are part of the settings. \\\ndiff --git a/src/Core/SettingsChangesHistory.h b/src/Core/SettingsChangesHistory.h\nindex 6734c0dc525b..313b5547f4df 100644\n--- a/src/Core/SettingsChangesHistory.h\n+++ b/src/Core/SettingsChangesHistory.h\n@@ -101,6 +101,7 @@ static const std::map<ClickHouseVersion, SettingsChangesHistory::SettingsChanges\n               {\"allow_experimental_statistic\", false, false, \"Old setting which popped up here being renamed.\"},\n               {\"allow_statistics_optimize\", false, false, \"The setting was renamed. The previous name is `allow_statistic_optimize`.\"},\n               {\"allow_experimental_statistics\", false, false, \"The setting was renamed. The previous name is `allow_experimental_statistic`.\"},\n+              {\"enable_vertical_final\", false, true, \"Enable vertical final by default again after fixing bug\"},\n               {\"parallel_replicas_custom_key_range_lower\", 0, 0, \"Add settings to control the range filter when using parallel replicas with dynamic shards\"},\n               {\"parallel_replicas_custom_key_range_upper\", 0, 0, \"Add settings to control the range filter when using parallel replicas with dynamic shards. A value of 0 disables the upper limit\"},\n               }},\ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex b72399df2c1a..2b135e83cf7c 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -2601,10 +2601,6 @@ void InterpreterSelectQuery::executeFetchColumns(QueryProcessingStage::Enum proc\n \n         query_info.storage_limits = std::make_shared<StorageLimitsList>(storage_limits);\n         query_info.settings_limit_offset_done = options.settings_limit_offset_done;\n-        /// Possible filters: row-security, additional filter, replica filter (before array join), where (after array join)\n-        query_info.has_filters_and_no_array_join_before_filter = row_policy_filter || additional_filter_info\n-            || parallel_replicas_custom_filter_info\n-            || (analysis_result.hasWhere() && !analysis_result.before_where->hasArrayJoin() && !analysis_result.array_join);\n         storage->read(query_plan, required_columns, storage_snapshot, query_info, context, processing_stage, max_block_size, max_streams);\n \n         if (context->hasQueryContext() && !options.is_internal)\ndiff --git a/src/Processors/QueryPlan/ReadFromMergeTree.cpp b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\nindex 887a95da60da..96388550f4db 100644\n--- a/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n+++ b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n@@ -1092,8 +1092,7 @@ static void addMergingFinal(\n     MergeTreeData::MergingParams merging_params,\n     Names partition_key_columns,\n     size_t max_block_size_rows,\n-    bool enable_vertical_final,\n-    bool can_merge_final_indices_to_next_step_filter)\n+    bool enable_vertical_final)\n {\n     const auto & header = pipe.getHeader();\n     size_t num_outputs = pipe.numOutputPorts();\n@@ -1135,7 +1134,7 @@ static void addMergingFinal(\n     };\n \n     pipe.addTransform(get_merging_processor());\n-    if (enable_vertical_final && !can_merge_final_indices_to_next_step_filter)\n+    if (enable_vertical_final)\n         pipe.addSimpleTransform([](const Block & header_)\n                                 { return std::make_shared<SelectByIndicesTransform>(header_); });\n }\n@@ -1323,8 +1322,7 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(\n                 data.merging_params,\n                 partition_key_columns,\n                 block_size.max_block_size_rows,\n-                enable_vertical_final,\n-                query_info.has_filters_and_no_array_join_before_filter);\n+                enable_vertical_final);\n \n         merging_pipes.emplace_back(Pipe::unitePipes(std::move(pipes)));\n     }\ndiff --git a/src/Processors/Transforms/FilterTransform.cpp b/src/Processors/Transforms/FilterTransform.cpp\nindex e8e7f99ce53d..cd87019a8e04 100644\n--- a/src/Processors/Transforms/FilterTransform.cpp\n+++ b/src/Processors/Transforms/FilterTransform.cpp\n@@ -14,7 +14,6 @@ namespace DB\n namespace ErrorCodes\n {\n     extern const int ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER;\n-    extern const int LOGICAL_ERROR;\n }\n \n static void replaceFilterToConstant(Block & block, const String & filter_column_name)\n@@ -37,147 +36,6 @@ static void replaceFilterToConstant(Block & block, const String & filter_column_\n     }\n }\n \n-static std::shared_ptr<const ChunkSelectFinalIndices> getSelectByFinalIndices(Chunk & chunk)\n-{\n-    if (auto select_final_indices_info = std::dynamic_pointer_cast<const ChunkSelectFinalIndices>(chunk.getChunkInfo()))\n-    {\n-        const auto & index_column = select_final_indices_info->select_final_indices;\n-        chunk.setChunkInfo(nullptr);\n-        if (index_column && index_column->size() != chunk.getNumRows())\n-            return select_final_indices_info;\n-    }\n-    return nullptr;\n-}\n-\n-static void\n-executeSelectByIndices(Columns & columns, std::shared_ptr<const ChunkSelectFinalIndices> & select_final_indices_info, size_t & num_rows)\n-{\n-    if (select_final_indices_info)\n-    {\n-        const auto & index_column = select_final_indices_info->select_final_indices;\n-\n-        for (auto & column : columns)\n-            column = column->index(*index_column, 0);\n-\n-        num_rows = index_column->size();\n-    }\n-}\n-\n-static std::unique_ptr<IFilterDescription> combineFilterAndIndices(\n-    std::unique_ptr<FilterDescription> description,\n-    std::shared_ptr<const ChunkSelectFinalIndices> & select_final_indices_info,\n-    size_t num_rows)\n-{\n-    if (select_final_indices_info)\n-    {\n-        const auto * index_column = select_final_indices_info->select_final_indices;\n-\n-        if (description->hasOne())\n-        {\n-            const auto & selected_by_indices = index_column->getData();\n-            const auto * selected_by_filter = description->data->data();\n-            /// We will recompute new has_one\n-            description->has_one = 0;\n-            /// At this point we know that the filter is not constant, just create a new filter\n-            auto mutable_holder = ColumnUInt8::create(num_rows, 0);\n-            auto & data = mutable_holder->getData();\n-            for (auto idx : selected_by_indices)\n-            {\n-                if (idx >= num_rows)\n-                    throw Exception(ErrorCodes::LOGICAL_ERROR, \"Index {} out of range {}\", idx, num_rows);\n-                data[idx] = 1;\n-            }\n-\n-            /// AND two filters\n-            auto * begin = data.data();\n-            const auto * end = begin + num_rows;\n-#if defined(__AVX2__)\n-            while (end - begin >= 32)\n-            {\n-                _mm256_storeu_si256(\n-                    reinterpret_cast<__m256i *>(begin),\n-                    _mm256_and_si256(\n-                        _mm256_loadu_si256(reinterpret_cast<const __m256i *>(begin)),\n-                        _mm256_loadu_si256(reinterpret_cast<const __m256i *>(selected_by_filter))));\n-                description->has_one |= !memoryIsZero(begin, 0, 32);\n-                begin += 32;\n-                selected_by_filter += 32;\n-            }\n-#elif defined(__SSE2__)\n-            while (end - begin >= 16)\n-            {\n-                _mm_storeu_si128(\n-                    reinterpret_cast<__m128i *>(begin),\n-                    _mm_and_si128(\n-                        _mm_loadu_si128(reinterpret_cast<const __m128i *>(begin)),\n-                        _mm_loadu_si128(reinterpret_cast<const __m128i *>(selected_by_filter))));\n-                description->has_one |= !memoryIsZero(begin, 0, 16);\n-                begin += 16;\n-                selected_by_filter += 16;\n-            }\n-#endif\n-\n-            while (end - begin >= 8)\n-            {\n-                *reinterpret_cast<UInt64 *>(begin) &= *reinterpret_cast<const UInt64 *>(selected_by_filter);\n-                description->has_one |= *reinterpret_cast<UInt64 *>(begin);\n-                begin += 8;\n-                selected_by_filter += 8;\n-            }\n-\n-            while (end - begin > 0)\n-            {\n-                *begin &= *selected_by_filter;\n-                description->has_one |= *begin;\n-                begin++;\n-                selected_by_filter++;\n-            }\n-\n-            description->data_holder = std::move(mutable_holder);\n-            description->data = &data;\n-        }\n-    }\n-    return std::move(description);\n-}\n-\n-static std::unique_ptr<IFilterDescription> combineFilterAndIndices(\n-    std::unique_ptr<SparseFilterDescription> description,\n-    std::shared_ptr<const ChunkSelectFinalIndices> & select_final_indices_info,\n-    size_t num_rows)\n-{\n-    /// Iterator interface to decorate data from output of std::set_intersection\n-    struct Iterator\n-    {\n-        UInt8 * data;\n-        Int64 & pop_cnt;\n-        explicit Iterator(UInt8 * data_, Int64 & pop_cnt_) : data(data_), pop_cnt(pop_cnt_) {}\n-        Iterator & operator = (UInt64 index) { data[index] = 1; ++pop_cnt; return *this; }\n-        Iterator & operator ++ () { return *this; }\n-        Iterator & operator * () { return *this; }\n-    };\n-\n-    if (select_final_indices_info)\n-    {\n-        const auto * index_column = select_final_indices_info->select_final_indices;\n-\n-        if (description->hasOne())\n-        {\n-            std::unique_ptr<FilterDescription> res;\n-            res->has_one = 0;\n-            const auto & selected_by_indices = index_column->getData();\n-            const auto & selected_by_filter = description->filter_indices->getData();\n-            auto mutable_holder = ColumnUInt8::create(num_rows, 0);\n-            auto & data = mutable_holder->getData();\n-            Iterator decorator(data.data(), res->has_one);\n-            std::set_intersection(selected_by_indices.begin(), selected_by_indices.end(), selected_by_filter.begin(), selected_by_filter.end(), decorator);\n-            res->data_holder = std::move(mutable_holder);\n-            res->data = &data;\n-            return res;\n-        }\n-    }\n-    return std::move(description);\n-}\n-\n Block FilterTransform::transformHeader(\n     const Block & header, const ActionsDAG * expression, const String & filter_column_name, bool remove_filter_column)\n {\n@@ -267,7 +125,6 @@ void FilterTransform::doTransform(Chunk & chunk)\n     size_t num_rows_before_filtration = chunk.getNumRows();\n     auto columns = chunk.detachColumns();\n     DataTypes types;\n-    auto select_final_indices_info = getSelectByFinalIndices(chunk);\n \n     {\n         Block block = getInputPort().getHeader().cloneWithColumns(columns);\n@@ -282,7 +139,6 @@ void FilterTransform::doTransform(Chunk & chunk)\n \n     if (constant_filter_description.always_true || on_totals)\n     {\n-        executeSelectByIndices(columns, select_final_indices_info, num_rows_before_filtration);\n         chunk.setColumns(std::move(columns), num_rows_before_filtration);\n         removeFilterIfNeed(chunk);\n         return;\n@@ -303,7 +159,6 @@ void FilterTransform::doTransform(Chunk & chunk)\n \n     if (constant_filter_description.always_true)\n     {\n-        executeSelectByIndices(columns, select_final_indices_info, num_rows_before_filtration);\n         chunk.setColumns(std::move(columns), num_rows_before_filtration);\n         removeFilterIfNeed(chunk);\n         return;\n@@ -311,15 +166,9 @@ void FilterTransform::doTransform(Chunk & chunk)\n \n     std::unique_ptr<IFilterDescription> filter_description;\n     if (filter_column->isSparse())\n-        filter_description = combineFilterAndIndices(\n-            std::make_unique<SparseFilterDescription>(*filter_column), select_final_indices_info, num_rows_before_filtration);\n+        filter_description = std::make_unique<SparseFilterDescription>(*filter_column);\n     else\n-        filter_description = combineFilterAndIndices(\n-            std::make_unique<FilterDescription>(*filter_column), select_final_indices_info, num_rows_before_filtration);\n-\n-\n-    if (!filter_description->has_one)\n-        return;\n+        filter_description = std::make_unique<FilterDescription>(*filter_column);\n \n     /** Let's find out how many rows will be in result.\n       * To do this, we filter out the first non-constant column\ndiff --git a/src/Storages/SelectQueryInfo.h b/src/Storages/SelectQueryInfo.h\nindex 11e2a2fc5e7f..c3db0f510f9c 100644\n--- a/src/Storages/SelectQueryInfo.h\n+++ b/src/Storages/SelectQueryInfo.h\n@@ -215,12 +215,6 @@ struct SelectQueryInfo\n     /// If query has aggregate functions\n     bool has_aggregates = false;\n \n-    /// If query has any filter and no arrayJoin before filter. Used by skipping FINAL\n-    /// Skipping FINAL algorithm will output the original chunk and a column indices of\n-    /// selected rows. If query has filter and doesn't have array join before any filter,\n-    /// we can merge the indices with the first filter in FilterTransform later.\n-    bool has_filters_and_no_array_join_before_filter = false;\n-\n     ClusterPtr getCluster() const { return !optimized_cluster ? cluster : optimized_cluster; }\n \n     bool settings_limit_offset_done = false;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02893_vertical_final_array_join.reference b/tests/queries/0_stateless/02893_vertical_final_bugs.reference\nsimilarity index 99%\nrename from tests/queries/0_stateless/02893_vertical_final_array_join.reference\nrename to tests/queries/0_stateless/02893_vertical_final_bugs.reference\nindex 27b54a2e42e3..ab23116aa5f2 100644\n--- a/tests/queries/0_stateless/02893_vertical_final_array_join.reference\n+++ b/tests/queries/0_stateless/02893_vertical_final_bugs.reference\n@@ -1,3 +1,4 @@\n+1\t2\tb\t1\n -- { echo ON }\n SELECT arrayJoin([(k1, v), (k2, v)]) AS row, row.1 as k FROM t FINAL WHERE k1 != 3 AND k = 1 ORDER BY row SETTINGS enable_vertical_final = 0;\n (1,4)\t1\ndiff --git a/tests/queries/0_stateless/02893_vertical_final_array_join.sql b/tests/queries/0_stateless/02893_vertical_final_bugs.sql\nsimilarity index 65%\nrename from tests/queries/0_stateless/02893_vertical_final_array_join.sql\nrename to tests/queries/0_stateless/02893_vertical_final_bugs.sql\nindex cc2e37fdc6ef..e82ab674c58c 100644\n--- a/tests/queries/0_stateless/02893_vertical_final_array_join.sql\n+++ b/tests/queries/0_stateless/02893_vertical_final_bugs.sql\n@@ -1,3 +1,15 @@\n+-- https://github.com/ClickHouse/ClickHouse/issues/64543\n+DROP TABLE IF EXISTS foo;\n+DROP TABLE IF EXISTS bar;\n+CREATE TABLE foo (id UInt64, seq UInt64) ENGINE = Memory;\n+CREATE TABLE bar (id UInt64, seq UInt64, name String) ENGINE = ReplacingMergeTree ORDER BY id;\n+INSERT INTO foo VALUES (1, 1);\n+INSERT INTO bar VALUES (1, 1, 'a') (2, 2, 'b');\n+INSERT INTO bar VALUES (1, 2, 'b') (2, 3, 'c');\n+SELECT * FROM bar INNER JOIN foo USING id WHERE bar.seq > foo.seq SETTINGS final = 1;\n+\n+-- Same problem possible can happen with array join\n+DROP TABLE IF EXISTS t;\n CREATE TABLE t (k1 UInt64, k2 UInt64, v UInt64) ENGINE = ReplacingMergeTree() ORDER BY (k1, k2);\n SET optimize_on_insert = 0;\n INSERT INTO t VALUES (1, 2, 3) (1, 2, 4) (2, 3, 4), (2, 3, 5);\n",
  "problem_statement": "Asan: heap-buffer-overflow in `combineFilterAndIndices` (`enable_vertical_final`)\nIt happened on a build without debug symbols, so I had to symbolize manually:\r\n\r\n```\r\n==74==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x5140001a01ef at pc 0x56395d25e4ae bp 0x7f095b2656b0 sp 0x7f095b2656a8\r\n\r\nWRITE of size 1 at 0x5140001a01ef thread T1441 (QueryPipelineEx)\r\n\r\n \uf312 \ue0b0 \uf07c ~/ch/logs \ue0b0 llvm-addr2line -afiCe ./clickhouse 0x33a724ad 0x33a6f9a3 0x33a6dbcd 0x21fcd45d 0x332169ec 0x3326dcad 0x3324dd42 0x3324ef65 0x1cece31a 0x1ced6ed2 0x1cec5fac 0x1ced25cc 0xa947f9a    \ue0b2 \u2714 \r\n0x33a724ad\r\nDB::combineFilterAndIndices(std::__1::unique_ptr<DB::FilterDescription, std::__1::default_delete<DB::FilterDescription>>, std::__1::shared_ptr<DB::ChunkSelectFinalIndices const>&, unsigned long)\r\n./build_docker/./src/Processors/Transforms/FilterTransform.cpp:84\r\n0x33a6f9a3\r\nDB::FilterTransform::doTransform(DB::Chunk&)\r\n./build_docker/./src/Processors/Transforms/FilterTransform.cpp:316\r\n0x33a6dbcd\r\nDB::FilterTransform::transform(DB::Chunk&)\r\n./build_docker/./src/Processors/Transforms/FilterTransform.cpp:259\r\n0x21fcd45d\r\nDB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&)\r\n./build_docker/./src/Processors/ISimpleTransform.h:32\r\n0x332169ec\r\nDB::ISimpleTransform::work()\r\n./build_docker/./src/Processors/ISimpleTransform.cpp:89\r\n0x3326dcad\r\nDB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\r\n./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:47\r\nDB::ExecutionThreadContext::executeTask()\r\n./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:95\r\n0x3324dd42\r\nDB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*)\r\n./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:273\r\nDB::PipelineExecutor::executeSingleThread(unsigned long)\r\n./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:239\r\n0x3324ef65\r\nDB::PipelineExecutor::spawnThreads()::$_0::operator()() const\r\n./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:373\r\ndecltype(std::declval<DB::PipelineExecutor::spawnThreads()::$_0&>()()) std::__1::__invoke[abi:v15000]<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\nvoid std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479\r\nstd::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>::operator()[abi:v15000]()\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:235\r\nvoid std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__1::__function::__policy_storage const*)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716\r\n0x1cece31a\r\nstd::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:848\r\nstd::__1::function<void ()>::operator()() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:1187\r\nThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>)\r\n./build_docker/./src/Common/ThreadPool.cpp:458\r\n0x1ced6ed2\r\nvoid ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const\r\n./build_docker/./src/Common/ThreadPool.cpp:220\r\ndecltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\ndecltype(auto) std::__1::__apply_tuple_impl[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&, std::__1::__tuple_indices<>)\r\n./build_docker/./contrib/llvm-project/libcxx/include/tuple:1789\r\ndecltype(auto) std::__1::apply[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/tuple:1798\r\nThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()()\r\n./build_docker/./src/Common/ThreadPool.h:225\r\n0x1cec5fac\r\nstd::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:848\r\nstd::__1::function<void ()>::operator()() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:1187\r\nThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)\r\n./build_docker/./src/Common/ThreadPool.cpp:458\r\n0x1ced25cc\r\nvoid ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const\r\n./build_docker/./src/Common/ThreadPool.cpp:220\r\ndecltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\nvoid std::__1::__thread_execute[abi:v15000]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>)\r\n./build_docker/./contrib/llvm-project/libcxx/include/thread:284\r\nvoid* std::__1::__thread_proxy[abi:v15000]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*)\r\n./build_docker/./contrib/llvm-project/libcxx/include/thread:295\r\n0xa947f9a\r\nasan_thread_start(void*)\r\ncrtstuff.c:0\r\n\r\n\r\n0x5140001a01ef is located 0 bytes after 431-byte region [0x5140001a0040,0x5140001a01ef)\r\nallocated by thread T1441 (QueryPipelineEx) here:\r\n\r\n \uf312 \ue0b0 \uf07c ~/ch/logs \ue0b0 llvm-addr2line -afiCe ./clickhouse 0xa94a22e 0x1cc19847 0x105ce41c 0x33a723bd 0x33a6f9a3 0x33a6dbcd 0x21fcd45d 0x332169ec 0x3326dcad 0x3324dd42 0x3324ef65 0x1cece31a 0x1ced6ed2 0x1cec5fac 0x1ced25cc 0xa947f9a\r\n0xa94a22e\r\n__interceptor_malloc\r\n??:0\r\n0x1cc19847\r\nvoid* (anonymous namespace)::allocNoTrack<false, false>(unsigned long, unsigned long)\r\n./build_docker/./src/Common/Allocator.cpp:68\r\nAllocator<false, false>::alloc(unsigned long, unsigned long)\r\n./build_docker/./src/Common/Allocator.cpp:115\r\n0x105ce41c\r\nCOW<DB::IColumn>::mutable_ptr<DB::ColumnVector<char8_t>> COWHelper<DB::IColumnHelper<DB::ColumnVector<char8_t>, DB::ColumnFixedSizeHelper>, DB::ColumnVector<char8_t>>::create<unsigned long&, int>(unsigned long&, int&&)\r\n??:0\r\n0x33a723bd\r\nDB::combineFilterAndIndices(std::__1::unique_ptr<DB::FilterDescription, std::__1::default_delete<DB::FilterDescription>>, std::__1::shared_ptr<DB::ChunkSelectFinalIndices const>&, unsigned long)\r\n./build_docker/./src/Processors/Transforms/FilterTransform.cpp:81\r\n0x33a6f9a3\r\nDB::FilterTransform::doTransform(DB::Chunk&)\r\n./build_docker/./src/Processors/Transforms/FilterTransform.cpp:316\r\n0x33a6dbcd\r\nDB::FilterTransform::transform(DB::Chunk&)\r\n./build_docker/./src/Processors/Transforms/FilterTransform.cpp:259\r\n0x21fcd45d\r\nDB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&)\r\n./build_docker/./src/Processors/ISimpleTransform.h:32\r\n0x332169ec\r\nDB::ISimpleTransform::work()\r\n./build_docker/./src/Processors/ISimpleTransform.cpp:89\r\n0x3326dcad\r\nDB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\r\n./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:47\r\nDB::ExecutionThreadContext::executeTask()\r\n./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:95\r\n0x3324dd42\r\nDB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*)\r\n./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:273\r\nDB::PipelineExecutor::executeSingleThread(unsigned long)\r\n./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:239\r\n0x3324ef65\r\nDB::PipelineExecutor::spawnThreads()::$_0::operator()() const\r\n./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:373\r\ndecltype(std::declval<DB::PipelineExecutor::spawnThreads()::$_0&>()()) std::__1::__invoke[abi:v15000]<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\nvoid std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479\r\nstd::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>::operator()[abi:v15000]()\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:235\r\nvoid std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__1::__function::__policy_storage const*)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716\r\n0x1cece31a\r\nstd::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:848\r\nstd::__1::function<void ()>::operator()() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:1187\r\nThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>)\r\n./build_docker/./src/Common/ThreadPool.cpp:458\r\n0x1ced6ed2\r\nvoid ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const\r\n./build_docker/./src/Common/ThreadPool.cpp:220\r\ndecltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\ndecltype(auto) std::__1::__apply_tuple_impl[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&, std::__1::__tuple_indices<>)\r\n./build_docker/./contrib/llvm-project/libcxx/include/tuple:1789\r\ndecltype(auto) std::__1::apply[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/tuple:1798\r\nThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()()\r\n./build_docker/./src/Common/ThreadPool.h:225\r\n0x1cec5fac\r\nstd::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:848\r\nstd::__1::function<void ()>::operator()() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:1187\r\nThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)\r\n./build_docker/./src/Common/ThreadPool.cpp:458\r\n0x1ced25cc\r\nvoid ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const\r\n./build_docker/./src/Common/ThreadPool.cpp:220\r\ndecltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\nvoid std::__1::__thread_execute[abi:v15000]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>)\r\n./build_docker/./contrib/llvm-project/libcxx/include/thread:284\r\nvoid* std::__1::__thread_proxy[abi:v15000]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*)\r\n./build_docker/./contrib/llvm-project/libcxx/include/thread:295\r\n0xa947f9a\r\nasan_thread_start(void*)\r\ncrtstuff.c:0\r\n```\r\n\r\nIntroduced in https://github.com/ClickHouse/ClickHouse/pull/54366\r\ncc: @canhld94 \n",
  "hints_text": "I will fix this asap\n@tavplubix can we get some information about the query that triggered the issue?\nWe're running some tests to find if we can reproduce the issue. Nevertheless, it's likely that even without this bug, we will remove `combineFilterAndIndices` in `FilterTransform`. \r\n\r\nRemind that for vertical FINAL, there're two major steps: \r\n- (1) in merging final step, we don't copy selected row but remember the position of selected row and generate a filter (in the form of list of indices).\r\n- (2) if query has `WHERE`, we will merge this filter with the filter generated by `WHERE` expression in `FilterTransform`, otherwise we have a filter step right after merging final step.\r\n\r\nThe feature has been tested thoroughly in our environment. During testing, we hardly found any issue with (1), but we found two issues with (2), including 1 bug and 1 potential performance issue:\r\n\r\n- The bug is if there's an additional steps between merging final and filter transform, those steps may change number of rows in the chunk and (2) will not work correctly anymore. At that time, the case we found is when query has `ARRAY JOIN` before filter. We fixed the bug by checking if query has any `ARRAY JOIN` before `WHERE` before applying (2). We thought that the fix is sufficient because `ARRAY JOIN` is the only possible expression that will change number of rows in chunk.\r\n- The performance issue is when `WHERE` expression is heavy to compute, (2) may be worse than normal because we need to compute `WHERE` on more rows.\r\n\r\nNevertheless, we decided to keep (2). But now with this bug, I think it's rational to remove (2). The bug appears to me that the number of rows in chunk produced by merging final step has been changed before it reaches `FilterTransform`. And to be honest, at this point I'm not 100% sure that `ARRAY JOIN` is the only possible expression that can change number of rows in a chunk, or how we can guarantee that the `FilterTransform` right after merging final step is produced by `WHERE`.\r\n\r\nSo in stead of doing (2), there is a more solid and less error-prone optimization: to leverage the PREWHERE filter in the chunk (if any) to skip row in merging final step.\r\n\r\n@tavplubix @nickitat @KochetovNicolai would like to hear your opinion.\r\ncc @jorisgio \n> @tavplubix can we get some information about the query that triggered the issue?\r\n\r\nQueries: https://pastila.nl/?00284a6d/b9f593e877d4fc08bf24527eb12b441d#uwnDTfUiXeT+niA0HNPkvw==\r\n(however, I failed to reproduce it with synthetic data)\n@tavplubix thanks for your information. It confirms my hypothesis of the root cause of the bug:\r\n\r\n> The bug appears to me that the number of rows in chunk produced by merging final step has been changed before it reaches `FilterTransform`.\r\n\r\nThis is the query pipeline of the query in the example:\r\n\r\n```\r\n    \u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n 1. \u2502 (Expression)                                                                                           \u2502\r\n 2. \u2502 ExpressionTransform                                                                                    \u2502\r\n 3. \u2502   (Sorting)                                                                                            \u2502\r\n 4. \u2502   MergeSortingTransform                                                                                \u2502\r\n 5. \u2502     LimitsCheckingTransform                                                                            \u2502\r\n 6. \u2502       PartialSortingTransform                                                                          \u2502\r\n 7. \u2502         (Expression)                                                                                   \u2502\r\n 8. \u2502         ExpressionTransform                                                                            \u2502\r\n 9. \u2502           (Join)                                                                                       \u2502\r\n10. \u2502           JoiningTransform 2 \u2192 1                                                                       \u2502\r\n11. \u2502             (Expression)                                                                               \u2502\r\n12. \u2502             ExpressionTransform                                                                        \u2502\r\n13. \u2502               (Window)                                                                                 \u2502\r\n14. \u2502               WindowTransform                                                                          \u2502\r\n15. \u2502                 (Expression)                                                                           \u2502\r\n16. \u2502                 ExpressionTransform                                                                    \u2502\r\n17. \u2502                   (ReadFromMergeTree)                                                                  \u2502\r\n18. \u2502                   Concat 3 \u2192 1                                                                         \u2502\r\n19. \u2502                     MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder) \u00d7 3 0 \u2192 1               \u2502\r\n20. \u2502             (Expression)                                                                               \u2502\r\n21. \u2502             FillingRightJoinSide                                                                       \u2502\r\n22. \u2502               ExpressionTransform                                                                      \u2502\r\n23. \u2502                 (Aggregating)                                                                          \u2502\r\n24. \u2502                 AggregatingTransform                                                                   \u2502\r\n25. \u2502                   (Expression)                                                                         \u2502\r\n26. \u2502                   ExpressionTransform                                                                  \u2502\r\n27. \u2502                     (Filter)                                                                           \u2502\r\n28. \u2502                     FilterTransform                                                                    \u2502\r\n29. \u2502                       (Join)                                                                           \u2502\r\n30. \u2502                       JoiningTransform 2 \u2192 1                                                           \u2502\r\n31. \u2502                         (Expression)                                                                   \u2502\r\n32. \u2502                         ExpressionTransform                                                            \u2502\r\n33. \u2502                           (ReadFromMergeTree)                                                          \u2502\r\n34. \u2502                           ExpressionTransform                                                          \u2502\r\n35. \u2502                             ReplacingSorted 2 \u2192 1                                                      \u2502\r\n36. \u2502                               ExpressionTransform \u00d7 2                                                  \u2502\r\n37. \u2502                                 MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder) \u00d7 2 0 \u2192 1   \u2502\r\n38. \u2502                         (Expression)                                                                   \u2502\r\n39. \u2502                         FillingRightJoinSide                                                           \u2502\r\n40. \u2502                           ExpressionTransform                                                          \u2502\r\n41. \u2502                             (Window)                                                                   \u2502\r\n42. \u2502                             WindowTransform                                                            \u2502\r\n43. \u2502                               (Expression)                                                             \u2502\r\n44. \u2502                               ExpressionTransform                                                      \u2502\r\n45. \u2502                                 (ReadFromMergeTree)                                                    \u2502\r\n46. \u2502                                 Concat 3 \u2192 1                                                           \u2502\r\n47. \u2502                                   MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder) \u00d7 3 0 \u2192 1 \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nWe have INNER JOIN `JoiningTransform` stands between `ReplacingSorted` and WHERE `FilterTransform`, and it's obviously that INNER JOIN can change number of rows in chunk. I think the reason you cannot reproduce the bug is because the optimization (merging filter produced by FINAL and WHERE filter) was only implemented for non-analyzer. If you enable analyzer, we will have `SelectByIndicesTransform` after `ReplacingSorted` to filter the chunk, and the bug won't happen.\r\n\r\n```\r\n    \u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n 1. \u2502 (Expression)                                                                                           \u2502\r\n 2. \u2502 ExpressionTransform                                                                                    \u2502\r\n 3. \u2502   (Sorting)                                                                                            \u2502\r\n 4. \u2502   MergeSortingTransform                                                                                \u2502\r\n 5. \u2502     LimitsCheckingTransform                                                                            \u2502\r\n 6. \u2502       PartialSortingTransform                                                                          \u2502\r\n 7. \u2502         (Expression)                                                                                   \u2502\r\n 8. \u2502         ExpressionTransform                                                                            \u2502\r\n 9. \u2502           (Join)                                                                                       \u2502\r\n10. \u2502           JoiningTransform 2 \u2192 1                                                                       \u2502\r\n11. \u2502             (Expression)                                                                               \u2502\r\n12. \u2502             ExpressionTransform                                                                        \u2502\r\n13. \u2502               (Window)                                                                                 \u2502\r\n14. \u2502               WindowTransform                                                                          \u2502\r\n15. \u2502                 (Expression)                                                                           \u2502\r\n16. \u2502                 ExpressionTransform                                                                    \u2502\r\n17. \u2502                   (ReadFromMergeTree)                                                                  \u2502\r\n18. \u2502                   Concat 3 \u2192 1                                                                         \u2502\r\n19. \u2502                     MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder) \u00d7 3 0 \u2192 1               \u2502\r\n20. \u2502             (Expression)                                                                               \u2502\r\n21. \u2502             FillingRightJoinSide                                                                       \u2502\r\n22. \u2502               ExpressionTransform                                                                      \u2502\r\n23. \u2502                 (Aggregating)                                                                          \u2502\r\n24. \u2502                 AggregatingTransform                                                                   \u2502\r\n25. \u2502                   (Expression)                                                                         \u2502\r\n26. \u2502                   ExpressionTransform                                                                  \u2502\r\n27. \u2502                     (Filter)                                                                           \u2502\r\n28. \u2502                     FilterTransform                                                                    \u2502\r\n29. \u2502                       (Join)                                                                           \u2502\r\n30. \u2502                       JoiningTransform 2 \u2192 1                                                           \u2502\r\n31. \u2502                         (Expression)                                                                   \u2502\r\n32. \u2502                         ExpressionTransform                                                            \u2502\r\n33. \u2502                           (ReadFromMergeTree)                                                          \u2502\r\n34. \u2502                           ExpressionTransform                                                          \u2502\r\n35. \u2502                             SelectByIndicesTransform                                                   \u2502\r\n36. \u2502                               ReplacingSorted 2 \u2192 1                                                    \u2502\r\n37. \u2502                                 ExpressionTransform \u00d7 2                                                \u2502\r\n38. \u2502                                   MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder) \u00d7 2 0 \u2192 1 \u2502\r\n39. \u2502                         (Expression)                                                                   \u2502\r\n40. \u2502                         FillingRightJoinSide                                                           \u2502\r\n41. \u2502                           ExpressionTransform                                                          \u2502\r\n42. \u2502                             (Window)                                                                   \u2502\r\n43. \u2502                             WindowTransform                                                            \u2502\r\n44. \u2502                               (Expression)                                                             \u2502\r\n45. \u2502                               ExpressionTransform                                                      \u2502\r\n46. \u2502                                 (ReadFromMergeTree)                                                    \u2502\r\n47. \u2502                                 Concat 3 \u2192 1                                                           \u2502\r\n48. \u2502                                   MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder) \u00d7 3 0 \u2192 1 \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI think the problem is clear now, I will implement the fix described in https://github.com/ClickHouse/ClickHouse/issues/64543#issuecomment-2141256708.\nMinimal reproduce:\r\n\r\n```sql\r\ndrop table if exists foo;\r\ndrop table if exists bar;\r\ncreate table foo (id UInt64, seq UInt64) engine = Memory;\r\ncreate table bar (id UInt64, seq UInt64, name String) ENGINE = ReplacingMergeTree ORDER BY id;\r\ninsert into foo values (1, 1);\r\ninsert into bar values (1, 1, 'a') (2, 2, 'b');\r\ninsert into bar values (1, 2, 'b') (2, 3, 'c');\r\nselect * from bar inner join foo using id where bar.seq > foo.seq settings final = 1, allow_experimental_analyzer = 1;\r\n\r\n[devbox-sg] 2024.06.04 09:28:16.165056 [ 3562175 ] {3ec8f732-95c6-4954-832f-4591c9a47351} <Error> executeQuery: Code: 49. DB::Exception: Index 1 out of range 1. (LOGICAL_ERROR) (version 24.3.2.1) (from 127.0.0.1:57910) (in query: SELECT * FROM bar INNER JOIN foo USING (id) WHERE bar.seq > foo.seq SETTINGS final = 1), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./build/./src/Common/Exception.cpp:96: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c7250bb\r\n1. DB::Exception::Exception<unsigned long&, unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type, std::type_identity<unsigned long&>::type>, unsigned long&, unsigned long&) @ 0x00000000079be038\r\n2. ./build/./src/Processors/Transforms/FilterTransform.cpp:86: DB::FilterTransform::doTransform(DB::Chunk&) @ 0x00000000122813f4\r\n3. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:801: DB::FilterTransform::transform(DB::Chunk&) @ 0x000000001227fad4\r\n4. ./contrib/llvm-project/libcxx/include/__utility/swap.h:35: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x000000000e1f1950\r\n5. ./build/./src/Processors/ISimpleTransform.cpp:99: DB::ISimpleTransform::work() @ 0x0000000011fe77d2\r\n6. ./build/./src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::ExecutionThreadContext::executeTask() @ 0x0000000012005431\r\n7. ./build/./src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000011ff99e7\r\n8. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:833: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000011ffb138\r\n9. ./base/base/../base/wide_integer_impl.h:810: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c7d35df\r\n10. ./build/./src/Common/ThreadPool.cpp:0: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c7d6f1a\r\n11. ./base/base/../base/wide_integer_impl.h:810: void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c7d5cf3\r\n12. start_thread @ 0x0000000000007ea7\r\n13. ? @ 0x00000000000fba6f\r\n\r\n\r\nElapsed: 0.006 sec.\r\n\r\nReceived exception from server (version 24.3.2):\r\nCode: 49. DB::Exception: Received from localhost:9100. DB::Exception: Index 1 out of range 1. (LOGICAL_ERROR)\r\n```",
  "created_at": "2024-06-04T08:24:42Z",
  "modified_files": [
    "src/Columns/FilterDescription.h",
    "src/Core/Settings.h",
    "src/Core/SettingsChangesHistory.h",
    "src/Interpreters/InterpreterSelectQuery.cpp",
    "src/Processors/QueryPlan/ReadFromMergeTree.cpp",
    "src/Processors/Transforms/FilterTransform.cpp",
    "src/Storages/SelectQueryInfo.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02893_vertical_final_bugs.reference",
    "b/tests/queries/0_stateless/02893_vertical_final_bugs.sql"
  ]
}