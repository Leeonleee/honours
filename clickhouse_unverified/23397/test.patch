diff --git a/tests/queries/0_stateless/01824_move_to_prewhere_many_columns.reference b/tests/queries/0_stateless/01824_move_to_prewhere_many_columns.reference
new file mode 100644
index 000000000000..adce19321d54
--- /dev/null
+++ b/tests/queries/0_stateless/01824_move_to_prewhere_many_columns.reference
@@ -0,0 +1,14 @@
+1	Wide
+2	Compact
+35
+SELECT count()
+FROM t_move_to_prewhere
+PREWHERE a AND b AND c
+WHERE (a AND b AND c) AND (NOT ignore(fat_string))
+1	Compact
+2	Compact
+35
+SELECT count()
+FROM t_move_to_prewhere
+PREWHERE a
+WHERE a AND (b AND c AND (NOT ignore(fat_string)))
diff --git a/tests/queries/0_stateless/01824_move_to_prewhere_many_columns.sql b/tests/queries/0_stateless/01824_move_to_prewhere_many_columns.sql
new file mode 100644
index 000000000000..e03972e818d2
--- /dev/null
+++ b/tests/queries/0_stateless/01824_move_to_prewhere_many_columns.sql
@@ -0,0 +1,37 @@
+DROP TABLE IF EXISTS t_move_to_prewhere;
+
+CREATE TABLE t_move_to_prewhere (id UInt32, a UInt8, b UInt8, c UInt8, fat_string String)
+ENGINE = MergeTree ORDER BY id PARTITION BY id
+SETTINGS min_rows_for_wide_part = 100, min_bytes_for_wide_part = 0;
+
+INSERT INTO t_move_to_prewhere SELECT 1, number % 2 = 0, number % 3 = 0, number % 5 = 0, repeat('a', 1000) FROM numbers(1000);
+INSERT INTO t_move_to_prewhere SELECT 2, number % 2 = 0, number % 3 = 0, number % 5 = 0, repeat('a', 1000) FROM numbers(10);
+
+SELECT partition, part_type FROM system.parts
+WHERE table = 't_move_to_prewhere' AND database = currentDatabase()
+ORDER BY partition;
+
+SELECT count() FROM t_move_to_prewhere WHERE a AND b AND c AND NOT ignore(fat_string);
+EXPLAIN SYNTAX SELECT count() FROM t_move_to_prewhere WHERE a AND b AND c AND NOT ignore(fat_string);
+
+DROP TABLE IF EXISTS t_move_to_prewhere;
+
+-- With only compact parts, we cannot move 3 conditions to PREWHERE,
+-- because we don't know sizes and we can use only number of columns in conditions.
+-- Sometimes moving a lot of columns to prewhere may be harmful.
+
+CREATE TABLE t_move_to_prewhere (id UInt32, a UInt8, b UInt8, c UInt8, fat_string String)
+ENGINE = MergeTree ORDER BY id PARTITION BY id
+SETTINGS min_rows_for_wide_part = 10000, min_bytes_for_wide_part = 100000000;
+
+INSERT INTO t_move_to_prewhere SELECT 1, number % 2 = 0, number % 3 = 0, number % 5 = 0, repeat('a', 1000) FROM numbers(1000);
+INSERT INTO t_move_to_prewhere SELECT 2, number % 2 = 0, number % 3 = 0, number % 5 = 0, repeat('a', 1000) FROM numbers(10);
+
+SELECT partition, part_type FROM system.parts
+WHERE table = 't_move_to_prewhere' AND database = currentDatabase()
+ORDER BY partition;
+
+SELECT count() FROM t_move_to_prewhere WHERE a AND b AND c AND NOT ignore(fat_string);
+EXPLAIN SYNTAX SELECT count() FROM t_move_to_prewhere WHERE a AND b AND c AND NOT ignore(fat_string);
+
+DROP TABLE IF EXISTS t_move_to_prewhere;
