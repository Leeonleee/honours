diff --git a/src/Access/AccessType.h b/src/Access/AccessType.h
index 0e2959853031..47153b5ab63d 100644
--- a/src/Access/AccessType.h
+++ b/src/Access/AccessType.h
@@ -66,7 +66,7 @@ enum class AccessType
     M(ALTER_TTL, "ALTER MODIFY TTL, MODIFY TTL", TABLE, ALTER_TABLE) /* allows to execute ALTER MODIFY TTL */\
     M(ALTER_MATERIALIZE_TTL, "MATERIALIZE TTL", TABLE, ALTER_TABLE) /* allows to execute ALTER MATERIALIZE TTL;
                                                                        enabled implicitly by the grant ALTER_TABLE */\
-    M(ALTER_SETTINGS, "ALTER SETTING, ALTER MODIFY SETTING, MODIFY SETTING", TABLE, ALTER_TABLE) /* allows to execute ALTER MODIFY SETTING */\
+    M(ALTER_SETTINGS, "ALTER SETTING, ALTER MODIFY SETTING, MODIFY SETTING, RESET SETTING", TABLE, ALTER_TABLE) /* allows to execute ALTER MODIFY SETTING */\
     M(ALTER_MOVE_PARTITION, "ALTER MOVE PART, MOVE PARTITION, MOVE PART", TABLE, ALTER_TABLE) \
     M(ALTER_FETCH_PARTITION, "ALTER FETCH PART, FETCH PARTITION", TABLE, ALTER_TABLE) \
     M(ALTER_FREEZE_PARTITION, "FREEZE PARTITION, UNFREEZE", TABLE, ALTER_TABLE) \
diff --git a/src/Interpreters/InterpreterAlterQuery.cpp b/src/Interpreters/InterpreterAlterQuery.cpp
index f9bf5a70ef91..6f0af049d05c 100644
--- a/src/Interpreters/InterpreterAlterQuery.cpp
+++ b/src/Interpreters/InterpreterAlterQuery.cpp
@@ -269,6 +269,7 @@ AccessRightsElements InterpreterAlterQuery::getRequiredAccessForCommand(const AS
             required_access.emplace_back(AccessType::ALTER_MATERIALIZE_TTL, database, table);
             break;
         }
+        case ASTAlterCommand::RESET_SETTING: [[fallthrough]];
         case ASTAlterCommand::MODIFY_SETTING:
         {
             required_access.emplace_back(AccessType::ALTER_SETTINGS, database, table);
diff --git a/src/Parsers/ASTAlterQuery.cpp b/src/Parsers/ASTAlterQuery.cpp
index 918abc39037a..459fa0f81b31 100644
--- a/src/Parsers/ASTAlterQuery.cpp
+++ b/src/Parsers/ASTAlterQuery.cpp
@@ -52,6 +52,11 @@ ASTPtr ASTAlterCommand::clone() const
         res->settings_changes = settings_changes->clone();
         res->children.push_back(res->settings_changes);
     }
+    if (settings_resets)
+    {
+        res->settings_resets = settings_resets->clone();
+        res->children.push_back(res->settings_resets);
+    }
     if (values)
     {
         res->values = values->clone();
@@ -378,6 +383,11 @@ void ASTAlterCommand::formatImpl(
         settings.ostr << (settings.hilite ? hilite_keyword : "") << indent_str << "MODIFY SETTING " << (settings.hilite ? hilite_none : "");
         settings_changes->formatImpl(settings, state, frame);
     }
+    else if (type == ASTAlterCommand::RESET_SETTING)
+    {
+        settings.ostr << (settings.hilite ? hilite_keyword : "") << indent_str << "RESET SETTING " << (settings.hilite ? hilite_none : "");
+        settings_resets->formatImpl(settings, state, frame);
+    }
     else if (type == ASTAlterCommand::MODIFY_QUERY)
     {
         settings.ostr << (settings.hilite ? hilite_keyword : "") << indent_str << "MODIFY QUERY " << settings.nl_or_ws << (settings.hilite ? hilite_none : "");
diff --git a/src/Parsers/ASTAlterQuery.h b/src/Parsers/ASTAlterQuery.h
index f8677c10a7be..5fc146a30721 100644
--- a/src/Parsers/ASTAlterQuery.h
+++ b/src/Parsers/ASTAlterQuery.h
@@ -36,6 +36,7 @@ class ASTAlterCommand : public IAST
         MODIFY_TTL,
         MATERIALIZE_TTL,
         MODIFY_SETTING,
+        RESET_SETTING,
         MODIFY_QUERY,
         REMOVE_TTL,
 
@@ -141,6 +142,9 @@ class ASTAlterCommand : public IAST
     /// FOR MODIFY_SETTING
     ASTPtr settings_changes;
 
+    /// FOR RESET_SETTING
+    ASTPtr settings_resets;
+
     /// For MODIFY_QUERY
     ASTPtr select;
 
diff --git a/src/Parsers/ParserAlterQuery.cpp b/src/Parsers/ParserAlterQuery.cpp
index d659db64b834..fdfaef3df6af 100644
--- a/src/Parsers/ParserAlterQuery.cpp
+++ b/src/Parsers/ParserAlterQuery.cpp
@@ -33,6 +33,7 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected
     ParserKeyword s_modify_ttl("MODIFY TTL");
     ParserKeyword s_materialize_ttl("MATERIALIZE TTL");
     ParserKeyword s_modify_setting("MODIFY SETTING");
+    ParserKeyword s_reset_setting("RESET SETTING");
     ParserKeyword s_modify_query("MODIFY QUERY");
 
     ParserKeyword s_add_index("ADD INDEX");
@@ -115,6 +116,9 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected
         std::make_unique<ParserAssignment>(), std::make_unique<ParserToken>(TokenType::Comma),
         /* allow_empty = */ false);
     ParserSetQuery parser_settings(true);
+    ParserList parser_reset_setting(
+        std::make_unique<ParserIdentifier>(), std::make_unique<ParserToken>(TokenType::Comma),
+        /* allow_empty = */ false);
     ParserNameList values_p;
     ParserSelectWithUnionQuery select_p;
     ParserTTLExpressionList parser_ttl_list;
@@ -703,6 +707,12 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected
                 return false;
             command->type = ASTAlterCommand::MODIFY_SETTING;
         }
+        else if (s_reset_setting.ignore(pos, expected))
+        {
+            if (!parser_reset_setting.parse(pos, command->settings_resets, expected))
+                return false;
+            command->type = ASTAlterCommand::RESET_SETTING;
+        }
         else if (s_modify_query.ignore(pos, expected))
         {
             if (!select_p.parse(pos, command->select, expected))
diff --git a/src/Parsers/ParserAlterQuery.h b/src/Parsers/ParserAlterQuery.h
index b22b1c6ded2e..2e54c4ddbaf7 100644
--- a/src/Parsers/ParserAlterQuery.h
+++ b/src/Parsers/ParserAlterQuery.h
@@ -15,6 +15,7 @@ namespace DB
   *     [RENAME COLUMN [IF EXISTS] col_name TO col_name]
   *     [MODIFY PRIMARY KEY (a, b, c...)]
   *     [MODIFY SETTING setting_name=setting_value, ...]
+  *     [RESET SETTING setting_name, ...]
   *     [COMMENT COLUMN [IF EXISTS] col_name string]
   *     [DROP|DETACH|ATTACH PARTITION|PART partition, ...]
   *     [FETCH PARTITION partition FROM ...]
diff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp
index 1cb936cbb842..d4ee299a5394 100644
--- a/src/Storages/AlterCommands.cpp
+++ b/src/Storages/AlterCommands.cpp
@@ -311,6 +311,21 @@ std::optional<AlterCommand> AlterCommand::parse(const ASTAlterCommand * command_
         command.settings_changes = command_ast->settings_changes->as<ASTSetQuery &>().changes;
         return command;
     }
+    else if (command_ast->type == ASTAlterCommand::RESET_SETTING)
+    {
+        AlterCommand command;
+        command.ast = command_ast->clone();
+        command.type = AlterCommand::RESET_SETTING;
+        for (const ASTPtr & identifier_ast : command_ast->settings_resets->children)
+        {
+            const auto & identifier = identifier_ast->as<ASTIdentifier &>();
+            auto insertion = command.settings_resets.emplace(identifier.name());
+            if (!insertion.second)
+                throw Exception("Duplicate setting name " + backQuote(identifier.name()),
+                                ErrorCodes::BAD_ARGUMENTS);
+        }
+        return command;
+    }
     else if (command_ast->type == ASTAlterCommand::MODIFY_QUERY)
     {
         AlterCommand command;
@@ -570,6 +585,20 @@ void AlterCommand::apply(StorageInMemoryMetadata & metadata, ContextPtr context)
                 settings_from_storage.push_back(change);
         }
     }
+    else if (type == RESET_SETTING)
+    {
+        auto & settings_from_storage = metadata.settings_changes->as<ASTSetQuery &>().changes;
+        for (const auto & setting_name : settings_resets)
+        {
+            auto finder = [&setting_name](const SettingChange & c) { return c.name == setting_name; };
+            auto it = std::find_if(settings_from_storage.begin(), settings_from_storage.end(), finder);
+
+            if (it != settings_from_storage.end())
+                settings_from_storage.erase(it);
+
+            /// Intentionally ignore if there is no such setting name
+        }
+    }
     else if (type == RENAME_COLUMN)
     {
         metadata.columns.rename(column_name, rename_to);
@@ -678,7 +707,7 @@ bool isMetadataOnlyConversion(const IDataType * from, const IDataType * to)
 
 bool AlterCommand::isSettingsAlter() const
 {
-    return type == MODIFY_SETTING;
+    return type == MODIFY_SETTING || type == RESET_SETTING;
 }
 
 bool AlterCommand::isRequireMutationStage(const StorageInMemoryMetadata & metadata) const
@@ -838,6 +867,8 @@ String alterTypeToString(const AlterCommand::Type type)
         return "MODIFY TTL";
     case AlterCommand::Type::MODIFY_SETTING:
         return "MODIFY SETTING";
+    case AlterCommand::Type::RESET_SETTING:
+        return "RESET SETTING";
     case AlterCommand::Type::MODIFY_QUERY:
         return "MODIFY QUERY";
     case AlterCommand::Type::RENAME_COLUMN:
@@ -1123,7 +1154,7 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, ContextPt
                                     ErrorCodes::NOT_FOUND_COLUMN_IN_BLOCK};
             }
         }
-        else if (command.type == AlterCommand::MODIFY_SETTING)
+        else if (command.type == AlterCommand::MODIFY_SETTING || command.type == AlterCommand::RESET_SETTING)
         {
             if (metadata.settings_changes == nullptr)
                 throw Exception{"Cannot alter settings, because table engine doesn't support settings changes", ErrorCodes::BAD_ARGUMENTS};
diff --git a/src/Storages/AlterCommands.h b/src/Storages/AlterCommands.h
index 4e9c97647530..3c42f0fc8908 100644
--- a/src/Storages/AlterCommands.h
+++ b/src/Storages/AlterCommands.h
@@ -38,6 +38,7 @@ struct AlterCommand
         DROP_PROJECTION,
         MODIFY_TTL,
         MODIFY_SETTING,
+        RESET_SETTING,
         MODIFY_QUERY,
         RENAME_COLUMN,
         REMOVE_TTL,
@@ -80,7 +81,7 @@ struct AlterCommand
     /// For ADD_COLUMN, MODIFY_COLUMN - Add to the begin if it is true.
     bool first = false;
 
-    /// For DROP_COLUMN, MODIFY_COLUMN, COMMENT_COLUMN
+    /// For DROP_COLUMN, MODIFY_COLUMN, COMMENT_COLUMN, RESET_SETTING
     bool if_exists = false;
 
     /// For ADD_COLUMN
@@ -127,6 +128,9 @@ struct AlterCommand
     /// For MODIFY SETTING
     SettingsChanges settings_changes;
 
+    /// For RESET SETTING
+    std::set<String> settings_resets;
+
     /// For MODIFY_QUERY
     ASTPtr select = nullptr;
 
diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp
index dc09a783a29a..c2ba01deed6e 100644
--- a/src/Storages/MergeTree/MergeTreeData.cpp
+++ b/src/Storages/MergeTree/MergeTreeData.cpp
@@ -1802,6 +1802,31 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, Context
             if (setting_name == "storage_policy")
                 checkStoragePolicy(getContext()->getStoragePolicy(new_value.safeGet<String>()));
         }
+
+        /// Check if it is safe to reset the settings
+        for (const auto & current_setting : current_changes)
+        {
+            const auto & setting_name = current_setting.name;
+            const Field * new_value = new_changes.tryGet(setting_name);
+            /// Prevent unsetting readonly setting
+            if (MergeTreeSettings::isReadonlySetting(setting_name) && !new_value)
+            {
+                throw Exception{"Setting '" + setting_name + "' is readonly for storage '" + getName() + "'",
+                                ErrorCodes::READONLY_SETTING};
+            }
+
+            if (MergeTreeSettings::isPartFormatSetting(setting_name) && !new_value)
+            {
+                /// Use default settings + new and check if doesn't affect part format settings
+                MergeTreeSettings copy = *getSettings();
+                copy.resetToDefault();
+                copy.applyChanges(new_changes);
+                String reason;
+                if (!canUsePolymorphicParts(copy, &reason) && !reason.empty())
+                    throw Exception("Can't change settings. Reason: " + reason, ErrorCodes::NOT_IMPLEMENTED);
+            }
+
+        }
     }
 
     for (const auto & part : getDataPartsVector())
@@ -1960,6 +1985,8 @@ void MergeTreeData::changeSettings(
         }
 
         MergeTreeSettings copy = *getSettings();
+        /// reset to default settings before applying existing
+        copy.resetToDefault();
         copy.applyChanges(new_changes);
 
         copy.sanityCheck(getContext()->getSettingsRef());
