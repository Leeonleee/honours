{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17769,
  "instance_id": "ClickHouse__ClickHouse-17769",
  "issue_numbers": [
    "14449"
  ],
  "base_commit": "aa8d4aea54b0a6fec2f2cf9073e70b406c0e67c9",
  "patch": "diff --git a/src/Access/AccessType.h b/src/Access/AccessType.h\nindex 0e2959853031..47153b5ab63d 100644\n--- a/src/Access/AccessType.h\n+++ b/src/Access/AccessType.h\n@@ -66,7 +66,7 @@ enum class AccessType\n     M(ALTER_TTL, \"ALTER MODIFY TTL, MODIFY TTL\", TABLE, ALTER_TABLE) /* allows to execute ALTER MODIFY TTL */\\\n     M(ALTER_MATERIALIZE_TTL, \"MATERIALIZE TTL\", TABLE, ALTER_TABLE) /* allows to execute ALTER MATERIALIZE TTL;\n                                                                        enabled implicitly by the grant ALTER_TABLE */\\\n-    M(ALTER_SETTINGS, \"ALTER SETTING, ALTER MODIFY SETTING, MODIFY SETTING\", TABLE, ALTER_TABLE) /* allows to execute ALTER MODIFY SETTING */\\\n+    M(ALTER_SETTINGS, \"ALTER SETTING, ALTER MODIFY SETTING, MODIFY SETTING, RESET SETTING\", TABLE, ALTER_TABLE) /* allows to execute ALTER MODIFY SETTING */\\\n     M(ALTER_MOVE_PARTITION, \"ALTER MOVE PART, MOVE PARTITION, MOVE PART\", TABLE, ALTER_TABLE) \\\n     M(ALTER_FETCH_PARTITION, \"ALTER FETCH PART, FETCH PARTITION\", TABLE, ALTER_TABLE) \\\n     M(ALTER_FREEZE_PARTITION, \"FREEZE PARTITION, UNFREEZE\", TABLE, ALTER_TABLE) \\\ndiff --git a/src/Interpreters/InterpreterAlterQuery.cpp b/src/Interpreters/InterpreterAlterQuery.cpp\nindex f9bf5a70ef91..6f0af049d05c 100644\n--- a/src/Interpreters/InterpreterAlterQuery.cpp\n+++ b/src/Interpreters/InterpreterAlterQuery.cpp\n@@ -269,6 +269,7 @@ AccessRightsElements InterpreterAlterQuery::getRequiredAccessForCommand(const AS\n             required_access.emplace_back(AccessType::ALTER_MATERIALIZE_TTL, database, table);\n             break;\n         }\n+        case ASTAlterCommand::RESET_SETTING: [[fallthrough]];\n         case ASTAlterCommand::MODIFY_SETTING:\n         {\n             required_access.emplace_back(AccessType::ALTER_SETTINGS, database, table);\ndiff --git a/src/Parsers/ASTAlterQuery.cpp b/src/Parsers/ASTAlterQuery.cpp\nindex 918abc39037a..459fa0f81b31 100644\n--- a/src/Parsers/ASTAlterQuery.cpp\n+++ b/src/Parsers/ASTAlterQuery.cpp\n@@ -52,6 +52,11 @@ ASTPtr ASTAlterCommand::clone() const\n         res->settings_changes = settings_changes->clone();\n         res->children.push_back(res->settings_changes);\n     }\n+    if (settings_resets)\n+    {\n+        res->settings_resets = settings_resets->clone();\n+        res->children.push_back(res->settings_resets);\n+    }\n     if (values)\n     {\n         res->values = values->clone();\n@@ -378,6 +383,11 @@ void ASTAlterCommand::formatImpl(\n         settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY SETTING \" << (settings.hilite ? hilite_none : \"\");\n         settings_changes->formatImpl(settings, state, frame);\n     }\n+    else if (type == ASTAlterCommand::RESET_SETTING)\n+    {\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"RESET SETTING \" << (settings.hilite ? hilite_none : \"\");\n+        settings_resets->formatImpl(settings, state, frame);\n+    }\n     else if (type == ASTAlterCommand::MODIFY_QUERY)\n     {\n         settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY QUERY \" << settings.nl_or_ws << (settings.hilite ? hilite_none : \"\");\ndiff --git a/src/Parsers/ASTAlterQuery.h b/src/Parsers/ASTAlterQuery.h\nindex f8677c10a7be..5fc146a30721 100644\n--- a/src/Parsers/ASTAlterQuery.h\n+++ b/src/Parsers/ASTAlterQuery.h\n@@ -36,6 +36,7 @@ class ASTAlterCommand : public IAST\n         MODIFY_TTL,\n         MATERIALIZE_TTL,\n         MODIFY_SETTING,\n+        RESET_SETTING,\n         MODIFY_QUERY,\n         REMOVE_TTL,\n \n@@ -141,6 +142,9 @@ class ASTAlterCommand : public IAST\n     /// FOR MODIFY_SETTING\n     ASTPtr settings_changes;\n \n+    /// FOR RESET_SETTING\n+    ASTPtr settings_resets;\n+\n     /// For MODIFY_QUERY\n     ASTPtr select;\n \ndiff --git a/src/Parsers/ParserAlterQuery.cpp b/src/Parsers/ParserAlterQuery.cpp\nindex d659db64b834..fdfaef3df6af 100644\n--- a/src/Parsers/ParserAlterQuery.cpp\n+++ b/src/Parsers/ParserAlterQuery.cpp\n@@ -33,6 +33,7 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n     ParserKeyword s_modify_ttl(\"MODIFY TTL\");\n     ParserKeyword s_materialize_ttl(\"MATERIALIZE TTL\");\n     ParserKeyword s_modify_setting(\"MODIFY SETTING\");\n+    ParserKeyword s_reset_setting(\"RESET SETTING\");\n     ParserKeyword s_modify_query(\"MODIFY QUERY\");\n \n     ParserKeyword s_add_index(\"ADD INDEX\");\n@@ -115,6 +116,9 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n         std::make_unique<ParserAssignment>(), std::make_unique<ParserToken>(TokenType::Comma),\n         /* allow_empty = */ false);\n     ParserSetQuery parser_settings(true);\n+    ParserList parser_reset_setting(\n+        std::make_unique<ParserIdentifier>(), std::make_unique<ParserToken>(TokenType::Comma),\n+        /* allow_empty = */ false);\n     ParserNameList values_p;\n     ParserSelectWithUnionQuery select_p;\n     ParserTTLExpressionList parser_ttl_list;\n@@ -703,6 +707,12 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n                 return false;\n             command->type = ASTAlterCommand::MODIFY_SETTING;\n         }\n+        else if (s_reset_setting.ignore(pos, expected))\n+        {\n+            if (!parser_reset_setting.parse(pos, command->settings_resets, expected))\n+                return false;\n+            command->type = ASTAlterCommand::RESET_SETTING;\n+        }\n         else if (s_modify_query.ignore(pos, expected))\n         {\n             if (!select_p.parse(pos, command->select, expected))\ndiff --git a/src/Parsers/ParserAlterQuery.h b/src/Parsers/ParserAlterQuery.h\nindex b22b1c6ded2e..2e54c4ddbaf7 100644\n--- a/src/Parsers/ParserAlterQuery.h\n+++ b/src/Parsers/ParserAlterQuery.h\n@@ -15,6 +15,7 @@ namespace DB\n   *     [RENAME COLUMN [IF EXISTS] col_name TO col_name]\n   *     [MODIFY PRIMARY KEY (a, b, c...)]\n   *     [MODIFY SETTING setting_name=setting_value, ...]\n+  *     [RESET SETTING setting_name, ...]\n   *     [COMMENT COLUMN [IF EXISTS] col_name string]\n   *     [DROP|DETACH|ATTACH PARTITION|PART partition, ...]\n   *     [FETCH PARTITION partition FROM ...]\ndiff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex 1cb936cbb842..d4ee299a5394 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -311,6 +311,21 @@ std::optional<AlterCommand> AlterCommand::parse(const ASTAlterCommand * command_\n         command.settings_changes = command_ast->settings_changes->as<ASTSetQuery &>().changes;\n         return command;\n     }\n+    else if (command_ast->type == ASTAlterCommand::RESET_SETTING)\n+    {\n+        AlterCommand command;\n+        command.ast = command_ast->clone();\n+        command.type = AlterCommand::RESET_SETTING;\n+        for (const ASTPtr & identifier_ast : command_ast->settings_resets->children)\n+        {\n+            const auto & identifier = identifier_ast->as<ASTIdentifier &>();\n+            auto insertion = command.settings_resets.emplace(identifier.name());\n+            if (!insertion.second)\n+                throw Exception(\"Duplicate setting name \" + backQuote(identifier.name()),\n+                                ErrorCodes::BAD_ARGUMENTS);\n+        }\n+        return command;\n+    }\n     else if (command_ast->type == ASTAlterCommand::MODIFY_QUERY)\n     {\n         AlterCommand command;\n@@ -570,6 +585,20 @@ void AlterCommand::apply(StorageInMemoryMetadata & metadata, ContextPtr context)\n                 settings_from_storage.push_back(change);\n         }\n     }\n+    else if (type == RESET_SETTING)\n+    {\n+        auto & settings_from_storage = metadata.settings_changes->as<ASTSetQuery &>().changes;\n+        for (const auto & setting_name : settings_resets)\n+        {\n+            auto finder = [&setting_name](const SettingChange & c) { return c.name == setting_name; };\n+            auto it = std::find_if(settings_from_storage.begin(), settings_from_storage.end(), finder);\n+\n+            if (it != settings_from_storage.end())\n+                settings_from_storage.erase(it);\n+\n+            /// Intentionally ignore if there is no such setting name\n+        }\n+    }\n     else if (type == RENAME_COLUMN)\n     {\n         metadata.columns.rename(column_name, rename_to);\n@@ -678,7 +707,7 @@ bool isMetadataOnlyConversion(const IDataType * from, const IDataType * to)\n \n bool AlterCommand::isSettingsAlter() const\n {\n-    return type == MODIFY_SETTING;\n+    return type == MODIFY_SETTING || type == RESET_SETTING;\n }\n \n bool AlterCommand::isRequireMutationStage(const StorageInMemoryMetadata & metadata) const\n@@ -838,6 +867,8 @@ String alterTypeToString(const AlterCommand::Type type)\n         return \"MODIFY TTL\";\n     case AlterCommand::Type::MODIFY_SETTING:\n         return \"MODIFY SETTING\";\n+    case AlterCommand::Type::RESET_SETTING:\n+        return \"RESET SETTING\";\n     case AlterCommand::Type::MODIFY_QUERY:\n         return \"MODIFY QUERY\";\n     case AlterCommand::Type::RENAME_COLUMN:\n@@ -1123,7 +1154,7 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, ContextPt\n                                     ErrorCodes::NOT_FOUND_COLUMN_IN_BLOCK};\n             }\n         }\n-        else if (command.type == AlterCommand::MODIFY_SETTING)\n+        else if (command.type == AlterCommand::MODIFY_SETTING || command.type == AlterCommand::RESET_SETTING)\n         {\n             if (metadata.settings_changes == nullptr)\n                 throw Exception{\"Cannot alter settings, because table engine doesn't support settings changes\", ErrorCodes::BAD_ARGUMENTS};\ndiff --git a/src/Storages/AlterCommands.h b/src/Storages/AlterCommands.h\nindex 4e9c97647530..3c42f0fc8908 100644\n--- a/src/Storages/AlterCommands.h\n+++ b/src/Storages/AlterCommands.h\n@@ -38,6 +38,7 @@ struct AlterCommand\n         DROP_PROJECTION,\n         MODIFY_TTL,\n         MODIFY_SETTING,\n+        RESET_SETTING,\n         MODIFY_QUERY,\n         RENAME_COLUMN,\n         REMOVE_TTL,\n@@ -80,7 +81,7 @@ struct AlterCommand\n     /// For ADD_COLUMN, MODIFY_COLUMN - Add to the begin if it is true.\n     bool first = false;\n \n-    /// For DROP_COLUMN, MODIFY_COLUMN, COMMENT_COLUMN\n+    /// For DROP_COLUMN, MODIFY_COLUMN, COMMENT_COLUMN, RESET_SETTING\n     bool if_exists = false;\n \n     /// For ADD_COLUMN\n@@ -127,6 +128,9 @@ struct AlterCommand\n     /// For MODIFY SETTING\n     SettingsChanges settings_changes;\n \n+    /// For RESET SETTING\n+    std::set<String> settings_resets;\n+\n     /// For MODIFY_QUERY\n     ASTPtr select = nullptr;\n \ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex dc09a783a29a..c2ba01deed6e 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -1802,6 +1802,31 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, Context\n             if (setting_name == \"storage_policy\")\n                 checkStoragePolicy(getContext()->getStoragePolicy(new_value.safeGet<String>()));\n         }\n+\n+        /// Check if it is safe to reset the settings\n+        for (const auto & current_setting : current_changes)\n+        {\n+            const auto & setting_name = current_setting.name;\n+            const Field * new_value = new_changes.tryGet(setting_name);\n+            /// Prevent unsetting readonly setting\n+            if (MergeTreeSettings::isReadonlySetting(setting_name) && !new_value)\n+            {\n+                throw Exception{\"Setting '\" + setting_name + \"' is readonly for storage '\" + getName() + \"'\",\n+                                ErrorCodes::READONLY_SETTING};\n+            }\n+\n+            if (MergeTreeSettings::isPartFormatSetting(setting_name) && !new_value)\n+            {\n+                /// Use default settings + new and check if doesn't affect part format settings\n+                MergeTreeSettings copy = *getSettings();\n+                copy.resetToDefault();\n+                copy.applyChanges(new_changes);\n+                String reason;\n+                if (!canUsePolymorphicParts(copy, &reason) && !reason.empty())\n+                    throw Exception(\"Can't change settings. Reason: \" + reason, ErrorCodes::NOT_IMPLEMENTED);\n+            }\n+\n+        }\n     }\n \n     for (const auto & part : getDataPartsVector())\n@@ -1960,6 +1985,8 @@ void MergeTreeData::changeSettings(\n         }\n \n         MergeTreeSettings copy = *getSettings();\n+        /// reset to default settings before applying existing\n+        copy.resetToDefault();\n         copy.applyChanges(new_changes);\n \n         copy.sanityCheck(getContext()->getSettingsRef());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00980_merge_alter_settings.reference b/tests/queries/0_stateless/00980_merge_alter_settings.reference\nindex 20146ed9d1e5..7a958c40651e 100644\n--- a/tests/queries/0_stateless/00980_merge_alter_settings.reference\n+++ b/tests/queries/0_stateless/00980_merge_alter_settings.reference\n@@ -4,3 +4,9 @@ CREATE TABLE default.table_for_alter\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\\n 2\n CREATE TABLE default.table_for_alter\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 4096, parts_to_throw_insert = 100, parts_to_delay_insert = 100, check_delay_period = 30\n CREATE TABLE default.table_for_alter\\n(\\n    `id` UInt64,\\n    `Data` String,\\n    `Data2` UInt64\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 4096, parts_to_throw_insert = 100, parts_to_delay_insert = 100, check_delay_period = 15\n+CREATE TABLE default.table_for_reset_setting\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 4096\n+CREATE TABLE default.table_for_reset_setting\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 4096, parts_to_throw_insert = 1, parts_to_delay_insert = 1\n+CREATE TABLE default.table_for_reset_setting\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 4096\n+CREATE TABLE default.table_for_reset_setting\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 4096\n+CREATE TABLE default.table_for_reset_setting\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 4096, merge_with_ttl_timeout = 300, max_concurrent_queries = 1\n+CREATE TABLE default.table_for_reset_setting\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 4096\ndiff --git a/tests/queries/0_stateless/00980_merge_alter_settings.sql b/tests/queries/0_stateless/00980_merge_alter_settings.sql\nindex 6bf043fe4c86..755983ac62ba 100644\n--- a/tests/queries/0_stateless/00980_merge_alter_settings.sql\n+++ b/tests/queries/0_stateless/00980_merge_alter_settings.sql\n@@ -53,3 +53,50 @@ SHOW CREATE TABLE table_for_alter;\n \n DROP TABLE IF EXISTS table_for_alter;\n \n+\n+DROP TABLE IF EXISTS table_for_reset_setting;\n+\n+CREATE TABLE table_for_reset_setting (\n+ id UInt64,\n+ Data String\n+) ENGINE = MergeTree() ORDER BY id SETTINGS index_granularity=4096;\n+\n+ALTER TABLE table_for_reset_setting MODIFY SETTING index_granularity=555; -- { serverError 472 }\n+\n+SHOW CREATE TABLE table_for_reset_setting;\n+\n+INSERT INTO table_for_reset_setting VALUES (1, '1');\n+INSERT INTO table_for_reset_setting VALUES (2, '2');\n+\n+ALTER TABLE table_for_reset_setting MODIFY SETTING  parts_to_throw_insert = 1, parts_to_delay_insert = 1;\n+\n+SHOW CREATE TABLE table_for_reset_setting;\n+\n+INSERT INTO table_for_reset_setting VALUES (1, '1'); -- { serverError 252 }\n+\n+ALTER TABLE table_for_reset_setting RESET SETTING parts_to_delay_insert, parts_to_throw_insert;\n+\n+SHOW CREATE TABLE table_for_reset_setting;\n+\n+INSERT INTO table_for_reset_setting VALUES (1, '1');\n+INSERT INTO table_for_reset_setting VALUES (2, '2');\n+\n+DETACH TABLE table_for_reset_setting;\n+ATTACH TABLE table_for_reset_setting;\n+\n+SHOW CREATE TABLE table_for_reset_setting;\n+\n+ALTER TABLE table_for_reset_setting RESET SETTING index_granularity; -- { serverError 472 }\n+\n+-- ignore undefined setting\n+ALTER TABLE table_for_reset_setting RESET SETTING merge_with_ttl_timeout, unknown_setting;\n+\n+ALTER TABLE table_for_reset_setting MODIFY SETTING merge_with_ttl_timeout = 300, max_concurrent_queries = 1;\n+\n+SHOW CREATE TABLE table_for_reset_setting;\n+\n+ALTER TABLE table_for_reset_setting RESET SETTING max_concurrent_queries, merge_with_ttl_timeout;\n+\n+SHOW CREATE TABLE table_for_reset_setting;\n+\n+DROP TABLE IF EXISTS table_for_reset_setting;\n\\ No newline at end of file\ndiff --git a/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.reference b/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.reference\nindex ee5a8024a92f..357d1bef78d5 100644\n--- a/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.reference\n+++ b/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.reference\n@@ -10,3 +10,12 @@ CREATE TABLE default.replicated_table_for_alter1\\n(\\n    `id` UInt64,\\n    `Data\n CREATE TABLE default.replicated_table_for_alter2\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_alter\\', \\'2\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192, parts_to_throw_insert = 1, parts_to_delay_insert = 1\n CREATE TABLE default.replicated_table_for_alter1\\n(\\n    `id` UInt64,\\n    `Data` String,\\n    `Data2` UInt64\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_alter\\', \\'1\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192, use_minimalistic_part_header_in_zookeeper = 1, check_delay_period = 15\n CREATE TABLE default.replicated_table_for_alter2\\n(\\n    `id` UInt64,\\n    `Data` String,\\n    `Data2` UInt64\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_alter\\', \\'2\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192, parts_to_throw_insert = 1, parts_to_delay_insert = 1\n+CREATE TABLE default.replicated_table_for_reset_setting1\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_reset_setting\\', \\'1\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.replicated_table_for_reset_setting2\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_reset_setting\\', \\'2\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.replicated_table_for_reset_setting1\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_reset_setting\\', \\'1\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.replicated_table_for_reset_setting1\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_reset_setting\\', \\'1\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192, merge_with_ttl_timeout = 100\n+CREATE TABLE default.replicated_table_for_reset_setting2\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_reset_setting\\', \\'2\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192, merge_with_ttl_timeout = 200\n+CREATE TABLE default.replicated_table_for_reset_setting1\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_reset_setting\\', \\'1\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192, merge_with_ttl_timeout = 100\n+CREATE TABLE default.replicated_table_for_reset_setting2\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_reset_setting\\', \\'2\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192, merge_with_ttl_timeout = 200\n+CREATE TABLE default.replicated_table_for_reset_setting1\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_reset_setting\\', \\'1\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.replicated_table_for_reset_setting2\\n(\\n    `id` UInt64,\\n    `Data` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test_00980/replicated_table_for_reset_setting\\', \\'2\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192\ndiff --git a/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql b/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql\nindex 60e4cfff4e18..6ad8860227dc 100644\n--- a/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql\n+++ b/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql\n@@ -67,3 +67,51 @@ SHOW CREATE TABLE replicated_table_for_alter2;\n \n DROP TABLE IF EXISTS replicated_table_for_alter2;\n DROP TABLE IF EXISTS replicated_table_for_alter1;\n+\n+DROP TABLE IF EXISTS replicated_table_for_reset_setting1;\n+DROP TABLE IF EXISTS replicated_table_for_reset_setting2;\n+\n+SET replication_alter_partitions_sync = 2;\n+\n+CREATE TABLE replicated_table_for_reset_setting1 (\n+ id UInt64,\n+ Data String\n+) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_00980/replicated_table_for_reset_setting', '1') ORDER BY id;\n+\n+CREATE TABLE replicated_table_for_reset_setting2 (\n+ id UInt64,\n+ Data String\n+) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_00980/replicated_table_for_reset_setting', '2') ORDER BY id;\n+\n+SHOW CREATE TABLE replicated_table_for_reset_setting1;\n+SHOW CREATE TABLE replicated_table_for_reset_setting2;\n+\n+ALTER TABLE replicated_table_for_reset_setting1 MODIFY SETTING index_granularity = 4096; -- { serverError 472 }\n+\n+SHOW CREATE TABLE replicated_table_for_reset_setting1;\n+\n+ALTER TABLE replicated_table_for_reset_setting1 MODIFY SETTING merge_with_ttl_timeout = 100;\n+ALTER TABLE replicated_table_for_reset_setting2 MODIFY SETTING merge_with_ttl_timeout = 200;\n+\n+SHOW CREATE TABLE replicated_table_for_reset_setting1;\n+SHOW CREATE TABLE replicated_table_for_reset_setting2;\n+\n+DETACH TABLE replicated_table_for_reset_setting2;\n+ATTACH TABLE replicated_table_for_reset_setting2;\n+\n+DETACH TABLE replicated_table_for_reset_setting1;\n+ATTACH TABLE replicated_table_for_reset_setting1;\n+\n+SHOW CREATE TABLE replicated_table_for_reset_setting1;\n+SHOW CREATE TABLE replicated_table_for_reset_setting2;\n+\n+-- ignore undefined setting\n+ALTER TABLE replicated_table_for_reset_setting1 RESET SETTING check_delay_period, unknown_setting;\n+ALTER TABLE replicated_table_for_reset_setting1 RESET SETTING merge_with_ttl_timeout;\n+ALTER TABLE replicated_table_for_reset_setting2 RESET SETTING merge_with_ttl_timeout;\n+\n+SHOW CREATE TABLE replicated_table_for_reset_setting1;\n+SHOW CREATE TABLE replicated_table_for_reset_setting2;\n+\n+DROP TABLE IF EXISTS replicated_table_for_reset_setting2;\n+DROP TABLE IF EXISTS replicated_table_for_reset_setting1;\ndiff --git a/tests/queries/0_stateless/01271_show_privileges.reference b/tests/queries/0_stateless/01271_show_privileges.reference\nindex 343d8ceeca36..035cb902bff3 100644\n--- a/tests/queries/0_stateless/01271_show_privileges.reference\n+++ b/tests/queries/0_stateless/01271_show_privileges.reference\n@@ -31,7 +31,7 @@ ALTER DROP CONSTRAINT\t['DROP CONSTRAINT']\tTABLE\tALTER CONSTRAINT\n ALTER CONSTRAINT\t['CONSTRAINT']\t\\N\tALTER TABLE\n ALTER TTL\t['ALTER MODIFY TTL','MODIFY TTL']\tTABLE\tALTER TABLE\n ALTER MATERIALIZE TTL\t['MATERIALIZE TTL']\tTABLE\tALTER TABLE\n-ALTER SETTINGS\t['ALTER SETTING','ALTER MODIFY SETTING','MODIFY SETTING']\tTABLE\tALTER TABLE\n+ALTER SETTINGS\t['ALTER SETTING','ALTER MODIFY SETTING','MODIFY SETTING','RESET SETTING']\tTABLE\tALTER TABLE\n ALTER MOVE PARTITION\t['ALTER MOVE PART','MOVE PARTITION','MOVE PART']\tTABLE\tALTER TABLE\n ALTER FETCH PARTITION\t['ALTER FETCH PART','FETCH PARTITION']\tTABLE\tALTER TABLE\n ALTER FREEZE PARTITION\t['FREEZE PARTITION','UNFREEZE']\tTABLE\tALTER TABLE\ndiff --git a/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference b/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference\nindex 8863d3b57c73..63f00b6f9c57 100644\n--- a/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference\n+++ b/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference\n@@ -1,6 +1,6 @@\n AlterQuery  t1 (children 1)\n  ExpressionList (children 1)\n-  AlterCommand 30 (children 1)\n+  AlterCommand 31 (children 1)\n    Function equals (children 1)\n     ExpressionList (children 2)\n      Identifier date\n",
  "problem_statement": "Allow to undo ALTER TABLE ... MODIFY SETTING\nI run\r\n\r\n```sql\r\nALTER TABLE target_table on CLUSTER '{cluster}' MODIFY SETTING merge_with_ttl_timeout = 3600\r\n```\r\n\r\nBut there's no way to undo it. I want the default TTL value to be mirrored for the table so I need to reset this settings.\r\n\r\nI can run\r\n\r\n```sql\r\nALTER TABLE target_table on CLUSTER '{cluster}' MODIFY SETTING merge_with_ttl_timeout = 86400\r\n```\r\n\r\nbut that still would be only static setting and default would not be mirrored.\n",
  "hints_text": "maybe implement something like \r\nALTER TABLE ... REMOVE SETTINGS\r\nALTER TABLE ... RESET SETTINGS\nOr  ALTER TABLE ... MODIFY SETTINGS xxx = DEFAULT\r\n\r\n",
  "created_at": "2020-12-03T20:20:46Z",
  "modified_files": [
    "src/Access/AccessType.h",
    "src/Interpreters/InterpreterAlterQuery.cpp",
    "src/Parsers/ASTAlterQuery.cpp",
    "src/Parsers/ASTAlterQuery.h",
    "src/Parsers/ParserAlterQuery.cpp",
    "src/Parsers/ParserAlterQuery.h",
    "src/Storages/AlterCommands.cpp",
    "src/Storages/AlterCommands.h",
    "src/Storages/MergeTree/MergeTreeData.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00980_merge_alter_settings.reference",
    "tests/queries/0_stateless/00980_merge_alter_settings.sql",
    "tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.reference",
    "tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql",
    "tests/queries/0_stateless/01271_show_privileges.reference",
    "tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference"
  ]
}