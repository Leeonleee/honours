{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 4170,
  "instance_id": "ClickHouse__ClickHouse-4170",
  "issue_numbers": [
    "3360"
  ],
  "base_commit": "339bcc8ceb92cfdd4315accb9eef530f46a3e4de",
  "patch": "diff --git a/dbms/programs/CMakeLists.txt b/dbms/programs/CMakeLists.txt\nindex 9d7c6f2cda10..d284adca6fa4 100644\n--- a/dbms/programs/CMakeLists.txt\n+++ b/dbms/programs/CMakeLists.txt\n@@ -28,11 +28,18 @@ add_subdirectory (copier)\n add_subdirectory (format)\n add_subdirectory (clang)\n add_subdirectory (obfuscator)\n-add_subdirectory (odbc-bridge)\n+\n+if (ENABLE_CLICKHOUSE_ODBC_BRIDGE)\n+    add_subdirectory (odbc-bridge)\n+endif ()\n \n if (CLICKHOUSE_SPLIT_BINARY)\n     set (CLICKHOUSE_ALL_TARGETS clickhouse-server clickhouse-client clickhouse-local clickhouse-benchmark clickhouse-performance-test\n-            clickhouse-extract-from-config clickhouse-compressor clickhouse-format clickhouse-copier clickhouse-odbc-bridge)\n+            clickhouse-extract-from-config clickhouse-compressor clickhouse-format clickhouse-copier)\n+\n+    if (ENABLE_CLICKHOUSE_ODBC_BRIDGE)\n+        list (APPEND CLICKHOUSE_ALL_TARGETS clickhouse-odbc-bridge)\n+    endif ()\n \n     if (USE_EMBEDDED_COMPILER)\n         list (APPEND CLICKHOUSE_ALL_TARGETS clickhouse-clang clickhouse-lld)\n@@ -85,9 +92,6 @@ else ()\n     if (USE_EMBEDDED_COMPILER)\n         target_link_libraries (clickhouse PRIVATE clickhouse-compiler-lib)\n     endif ()\n-    if (ENABLE_CLICKHOUSE_ODBC_BRIDGE)\n-        target_link_libraries (clickhouse PRIVATE clickhouse-odbc-bridge-lib)\n-    endif()\n \n     set (CLICKHOUSE_BUNDLE)\n     if (ENABLE_CLICKHOUSE_SERVER)\n@@ -141,9 +145,8 @@ else ()\n         list(APPEND CLICKHOUSE_BUNDLE clickhouse-obfuscator)\n     endif ()\n     if (ENABLE_CLICKHOUSE_ODBC_BRIDGE)\n-        add_custom_target (clickhouse-odbc-bridge ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-odbc-bridge DEPENDS clickhouse)\n-        install (FILES ${CMAKE_CURRENT_BINARY_DIR}/clickhouse-odbc-bridge DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)\n-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-odbc-bridge)\n+        # just to be able to run integration tests\n+        add_custom_target (clickhouse-odbc-bridge-copy ALL COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_BINARY_DIR}/odbc-bridge/clickhouse-odbc-bridge clickhouse-odbc-bridge DEPENDS clickhouse-odbc-bridge)\n     endif ()\n \n \ndiff --git a/dbms/programs/main.cpp b/dbms/programs/main.cpp\nindex e8b8cd365d63..2b88a5b7b0f8 100644\n--- a/dbms/programs/main.cpp\n+++ b/dbms/programs/main.cpp\n@@ -56,9 +56,6 @@ int mainEntryClickHouseClusterCopier(int argc, char ** argv);\n #if ENABLE_CLICKHOUSE_OBFUSCATOR || !defined(ENABLE_CLICKHOUSE_OBFUSCATOR)\n int mainEntryClickHouseObfuscator(int argc, char ** argv);\n #endif\n-#if ENABLE_CLICKHOUSE_ODBC_BRIDGE || !defined(ENABLE_CLICKHOUSE_ODBC_BRIDGE)\n-int mainEntryClickHouseODBCBridge(int argc, char ** argv);\n-#endif\n \n \n #if USE_EMBEDDED_COMPILER\n@@ -105,9 +102,6 @@ std::pair<const char *, MainFunc> clickhouse_applications[] =\n #if ENABLE_CLICKHOUSE_OBFUSCATOR || !defined(ENABLE_CLICKHOUSE_OBFUSCATOR)\n     {\"obfuscator\", mainEntryClickHouseObfuscator},\n #endif\n-#if ENABLE_CLICKHOUSE_ODBC_BRIDGE || !defined(ENABLE_CLICKHOUSE_ODBC_BRIDGE)\n-    {\"odbc-bridge\", mainEntryClickHouseODBCBridge},\n-#endif\n \n #if USE_EMBEDDED_COMPILER\n     {\"clang\", mainEntryClickHouseClang},\ndiff --git a/dbms/programs/odbc-bridge/CMakeLists.txt b/dbms/programs/odbc-bridge/CMakeLists.txt\nindex dd712a93c5a0..12062b5a939e 100644\n--- a/dbms/programs/odbc-bridge/CMakeLists.txt\n+++ b/dbms/programs/odbc-bridge/CMakeLists.txt\n@@ -9,7 +9,7 @@ add_library (clickhouse-odbc-bridge-lib ${LINK_MODE}\n     validateODBCConnectionString.cpp\n )\n \n-target_link_libraries (clickhouse-odbc-bridge-lib PRIVATE clickhouse_dictionaries daemon dbms clickhouse_common_io)\n+target_link_libraries (clickhouse-odbc-bridge-lib PRIVATE daemon dbms clickhouse_common_io)\n target_include_directories (clickhouse-odbc-bridge-lib PUBLIC ${ClickHouse_SOURCE_DIR}/libs/libdaemon/include)\n \n if (USE_POCO_SQLODBC)\n@@ -33,8 +33,11 @@ if (ENABLE_TESTS)\n     add_subdirectory (tests)\n endif ()\n \n-if (CLICKHOUSE_SPLIT_BINARY)\n-    add_executable (clickhouse-odbc-bridge odbc-bridge.cpp)\n-    target_link_libraries (clickhouse-odbc-bridge PRIVATE clickhouse-odbc-bridge-lib)\n-    install (TARGETS clickhouse-odbc-bridge ${CLICKHOUSE_ALL_TARGETS} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)\n-endif ()\n+# clickhouse-odbc-bridge is always a separate binary.\n+# Reason: it must not export symbols from SSL, mariadb-client, etc. to not break ABI compatibility with ODBC drivers.\n+# For this reason, we disabling -rdynamic linker flag. But we do it in strange way:\n+SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS \"\")\n+\n+add_executable (clickhouse-odbc-bridge odbc-bridge.cpp)\n+target_link_libraries (clickhouse-odbc-bridge PRIVATE clickhouse-odbc-bridge-lib)\n+install (TARGETS clickhouse-odbc-bridge RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)\ndiff --git a/dbms/src/Common/SharedLibrary.cpp b/dbms/src/Common/SharedLibrary.cpp\nindex 92083055098f..30ed3bccaab1 100644\n--- a/dbms/src/Common/SharedLibrary.cpp\n+++ b/dbms/src/Common/SharedLibrary.cpp\n@@ -1,9 +1,9 @@\n #include \"SharedLibrary.h\"\n #include <string>\n-#include <dlfcn.h>\n #include <boost/core/noncopyable.hpp>\n #include \"Exception.h\"\n \n+\n namespace DB\n {\n namespace ErrorCodes\n@@ -12,9 +12,9 @@ namespace ErrorCodes\n     extern const int CANNOT_DLSYM;\n }\n \n-SharedLibrary::SharedLibrary(const std::string & path)\n+SharedLibrary::SharedLibrary(const std::string & path, int flags)\n {\n-    handle = dlopen(path.c_str(), RTLD_LAZY);\n+    handle = dlopen(path.c_str(), flags);\n     if (!handle)\n         throw Exception(std::string(\"Cannot dlopen: \") + dlerror(), ErrorCodes::CANNOT_DLOPEN);\n }\ndiff --git a/dbms/src/Common/SharedLibrary.h b/dbms/src/Common/SharedLibrary.h\nindex 96c8f6fe025f..9d2b9bc78437 100644\n--- a/dbms/src/Common/SharedLibrary.h\n+++ b/dbms/src/Common/SharedLibrary.h\n@@ -1,5 +1,6 @@\n #pragma once\n \n+#include <dlfcn.h>\n #include <memory>\n #include <string>\n #include <boost/noncopyable.hpp>\n@@ -8,12 +9,12 @@\n namespace DB\n {\n \n-    /** Allows you to open a dynamic library and get a pointer to a function from it.\n+/** Allows you to open a dynamic library and get a pointer to a function from it.\n   */\n class SharedLibrary : private boost::noncopyable\n {\n public:\n-    explicit SharedLibrary(const std::string & path);\n+    explicit SharedLibrary(const std::string & path, int flags = RTLD_LAZY);\n \n     ~SharedLibrary();\n \ndiff --git a/dbms/src/Common/XDBCBridgeHelper.h b/dbms/src/Common/XDBCBridgeHelper.h\nindex 3ff91c902f5a..c820075add39 100644\n--- a/dbms/src/Common/XDBCBridgeHelper.h\n+++ b/dbms/src/Common/XDBCBridgeHelper.h\n@@ -262,13 +262,7 @@ struct ODBCBridgeMixin\n \n \n         std::vector<std::string> cmd_args;\n-        path.setFileName(\n-#if CLICKHOUSE_SPLIT_BINARY\n-            \"clickhouse-odbc-bridge\"\n-#else\n-            \"clickhouse\"\n-#endif\n-        );\n+        path.setFileName(\"clickhouse-odbc-bridge\");\n \n         std::stringstream command;\n \ndiff --git a/dbms/src/Dictionaries/LibraryDictionarySource.cpp b/dbms/src/Dictionaries/LibraryDictionarySource.cpp\nindex eec291321add..fe6a294c1acf 100644\n--- a/dbms/src/Dictionaries/LibraryDictionarySource.cpp\n+++ b/dbms/src/Dictionaries/LibraryDictionarySource.cpp\n@@ -135,7 +135,7 @@ LibraryDictionarySource::LibraryDictionarySource(\n             \"LibraryDictionarySource: Can't load lib \" + toString() + \": \" + Poco::File(path).path() + \" - File doesn't exist\",\n             ErrorCodes::FILE_DOESNT_EXIST);\n     description.init(sample_block);\n-    library = std::make_shared<SharedLibrary>(path);\n+    library = std::make_shared<SharedLibrary>(path, RTLD_LAZY | RTLD_DEEPBIND);\n     settings = std::make_shared<CStringsHolder>(getLibSettings(config, config_prefix + lib_config_settings));\n     if (auto libNew = library->tryGet<decltype(lib_data) (*)(decltype(&settings->strings), decltype(&ClickHouseLibrary::log))>(\n             \"ClickHouseDictionary_v3_libNew\"))\n",
  "test_patch": "diff --git a/dbms/tests/integration/helpers/cluster.py b/dbms/tests/integration/helpers/cluster.py\nindex 329ea631bfc9..1090eb297e96 100644\n--- a/dbms/tests/integration/helpers/cluster.py\n+++ b/dbms/tests/integration/helpers/cluster.py\n@@ -43,6 +43,17 @@ def subprocess_call(args):\n     # print('run:', ' ' . join(args))\n     subprocess.call(args)\n \n+def get_odbc_bridge_path():\n+    path = os.environ.get('CLICKHOUSE_TESTS_ODBC_BRIDGE_BIN_PATH')\n+    if path is None:\n+        server_path = os.environ.get('CLICKHOUSE_TESTS_SERVER_BIN_PATH')\n+        if server_path is not None:\n+            return os.path.join(os.path.dirname(server_path), 'clickhouse-odbc-bridge')\n+        else:\n+            return '/usr/bin/clickhouse-odbc-bridge'\n+    return path\n+\n+\n class ClickHouseCluster:\n     \"\"\"ClickHouse cluster with several instances and (possibly) ZooKeeper.\n \n@@ -53,12 +64,13 @@ class ClickHouseCluster:\n     \"\"\"\n \n     def __init__(self, base_path, name=None, base_configs_dir=None, server_bin_path=None, client_bin_path=None,\n-                 zookeeper_config_path=None, custom_dockerd_host=None):\n+                 odbc_bridge_bin_path=None, zookeeper_config_path=None, custom_dockerd_host=None):\n         self.base_dir = p.dirname(base_path)\n         self.name = name if name is not None else ''\n \n         self.base_configs_dir = base_configs_dir or os.environ.get('CLICKHOUSE_TESTS_BASE_CONFIG_DIR', '/etc/clickhouse-server/')\n         self.server_bin_path = p.realpath(server_bin_path or os.environ.get('CLICKHOUSE_TESTS_SERVER_BIN_PATH', '/usr/bin/clickhouse'))\n+        self.odbc_bridge_bin_path = p.realpath(odbc_bridge_bin_path or get_odbc_bridge_path())\n         self.client_bin_path = p.realpath(client_bin_path or os.environ.get('CLICKHOUSE_TESTS_CLIENT_BIN_PATH', '/usr/bin/clickhouse-client'))\n         self.zookeeper_config_path = p.join(self.base_dir, zookeeper_config_path) if zookeeper_config_path else p.join(HELPERS_DIR, 'zookeeper_config.xml')\n \n@@ -116,8 +128,8 @@ def add_instance(self, name, config_dir=None, main_configs=[], user_configs=[],\n         instance = ClickHouseInstance(\n             self, self.base_dir, name, config_dir, main_configs, user_configs, macros, with_zookeeper,\n             self.zookeeper_config_path, with_mysql, with_kafka, self.base_configs_dir, self.server_bin_path,\n-            clickhouse_path_dir, with_odbc_drivers, hostname=hostname, env_variables=env_variables, image=image,\n-            stay_alive=stay_alive, ipv4_address=ipv4_address, ipv6_address=ipv6_address)\n+            self.odbc_bridge_bin_path, clickhouse_path_dir, with_odbc_drivers, hostname=hostname,\n+            env_variables=env_variables, image=image, stay_alive=stay_alive, ipv4_address=ipv4_address, ipv6_address=ipv6_address)\n \n         self.instances[name] = instance\n         self.base_cmd.extend(['--file', instance.docker_compose_path])\n@@ -340,6 +352,7 @@ def add_zookeeper_startup_command(self, command):\n         hostname: {hostname}\n         volumes:\n             - {binary_path}:/usr/bin/clickhouse:ro\n+            - {odbc_bridge_bin_path}:/usr/bin/clickhouse-odbc-bridge:ro\n             - {configs_dir}:/etc/clickhouse-server/\n             - {db_dir}:/var/lib/clickhouse/\n             - {logs_dir}:/var/log/clickhouse-server/\n@@ -372,7 +385,7 @@ class ClickHouseInstance:\n \n     def __init__(\n             self, cluster, base_path, name, custom_config_dir, custom_main_configs, custom_user_configs, macros,\n-            with_zookeeper, zookeeper_config_path, with_mysql, with_kafka, base_configs_dir, server_bin_path,\n+            with_zookeeper, zookeeper_config_path, with_mysql, with_kafka, base_configs_dir, server_bin_path, odbc_bridge_bin_path,\n             clickhouse_path_dir, with_odbc_drivers, hostname=None, env_variables={}, image=\"yandex/clickhouse-integration-test\",\n             stay_alive=False, ipv4_address=None, ipv6_address=None):\n \n@@ -392,6 +405,7 @@ def __init__(\n \n         self.base_configs_dir = base_configs_dir\n         self.server_bin_path = server_bin_path\n+        self.odbc_bridge_bin_path = odbc_bridge_bin_path\n \n         self.with_mysql = with_mysql\n         self.with_kafka = with_kafka\n@@ -649,6 +663,7 @@ def create_dir(self, destroy_dir=True):\n                 name=self.name,\n                 hostname=self.hostname,\n                 binary_path=self.server_bin_path,\n+                odbc_bridge_bin_path=self.odbc_bridge_bin_path,\n                 configs_dir=configs_dir,\n                 config_d_dir=config_d_dir,\n                 db_dir=db_dir,\ndiff --git a/dbms/tests/integration/image/Dockerfile b/dbms/tests/integration/image/Dockerfile\nindex 897c210d7ac8..118968bd7450 100644\n--- a/dbms/tests/integration/image/Dockerfile\n+++ b/dbms/tests/integration/image/Dockerfile\n@@ -18,7 +18,8 @@ RUN apt-get update && env DEBIAN_FRONTEND=noninteractive apt-get install --yes -\n     python-pip \\\n     tzdata \\\n     libreadline-dev \\\n-    libicu-dev\n+    libicu-dev \\\n+    curl\n \n ENV TZ=Europe/Moscow\n RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\ndiff --git a/dbms/tests/integration/image/dockerd-entrypoint.sh b/dbms/tests/integration/image/dockerd-entrypoint.sh\nindex d8bf95110235..6866da5f2766 100755\n--- a/dbms/tests/integration/image/dockerd-entrypoint.sh\n+++ b/dbms/tests/integration/image/dockerd-entrypoint.sh\n@@ -9,5 +9,6 @@ echo \"Start tests\"\n export CLICKHOUSE_TESTS_SERVER_BIN_PATH=/clickhouse\n export CLICKHOUSE_TESTS_CLIENT_BIN_PATH=/clickhouse\n export CLICKHOUSE_TESTS_BASE_CONFIG_DIR=/clickhouse-config\n+export CLICKHOUSE_ODBC_BRIDGE_BINARY_PATH=/clickhouse-odbc-bridge\n \n cd /ClickHouse/dbms/tests/integration && pytest $PYTEST_OPTS\ndiff --git a/dbms/tests/integration/runner b/dbms/tests/integration/runner\nindex 9d664065e644..3a84c3be23a0 100755\n--- a/dbms/tests/integration/runner\n+++ b/dbms/tests/integration/runner\n@@ -51,6 +51,11 @@ if __name__ == \"__main__\":\n         default=os.environ.get(\"CLICKHOUSE_TESTS_SERVER_BIN_PATH\", os.environ.get(\"CLICKHOUSE_TESTS_CLIENT_BIN_PATH\", \"/usr/bin/clickhouse\")),\n         help=\"Path to clickhouse binary\")\n \n+    parser.add_argument(\n+        \"--bridge-binary\",\n+        default=os.environ.get(\"CLICKHOUSE_TESTS_ODBC_BRIDGE_BIN_PATH\", \"/usr/bin/clickhouse-odbc-bridge\"),\n+        help=\"Path to clickhouse-odbc-bridge binary\")\n+\n     parser.add_argument(\n         \"--configs-dir\",\n         default=os.environ.get(\"CLICKHOUSE_TESTS_BASE_CONFIG_DIR\", os.path.join(DEFAULT_CLICKHOUSE_ROOT, \"dbms/programs/server\")),\n@@ -77,10 +82,11 @@ if __name__ == \"__main__\":\n     if not args.disable_net_host:\n         net = \"--net=host\"\n \n-    cmd = \"docker run {net} --name {name} --user={user} --privileged --volume={bin}:/clickhouse \\\n+    cmd = \"docker run {net} --name {name} --user={user} --privileged --volume={bridge_bin}:/clickhouse-odbc-bridge --volume={bin}:/clickhouse \\\n         --volume={cfg}:/clickhouse-config --volume={pth}:/ClickHouse -e PYTEST_OPTS='{opts}' {img} \".format(\n         net=net,\n         bin=args.binary,\n+        bridge_bin=args.bridge_binary,\n         cfg=args.configs_dir,\n         pth=args.clickhouse_root,\n         opts=' '.join(args.pytest_args),\ndiff --git a/dbms/tests/integration/test_odbc_interaction/configs/config.xml b/dbms/tests/integration/test_odbc_interaction/configs/config.xml\nindex 1e4c14585a96..ac85a24152ea 100644\n--- a/dbms/tests/integration/test_odbc_interaction/configs/config.xml\n+++ b/dbms/tests/integration/test_odbc_interaction/configs/config.xml\n@@ -1,12 +1,18 @@\n <?xml version=\"1.0\"?>\n <yandex>\n-\t<logger>\n-\t\t<level>trace</level>\n-\t\t<log>/var/log/clickhouse-server/clickhouse-server.log</log>\n-\t\t<errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\n-\t\t<size>1000M</size>\n-\t\t<count>10</count>\n-\t</logger>\n+    <logger>\n+        <level>trace</level>\n+        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\n+        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\n+        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\n+        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\n+        <odbc_bridge_log>/var/log/clickhouse-server/clickhouse-odbc-bridge.log</odbc_bridge_log>\n+        <odbc_bridge_errlog>/var/log/clickhouse-server/clickhouse-odbc-bridge.err.log</odbc_bridge_errlog>\n+        <odbc_bridge_level>trace</odbc_bridge_level>\n+\n+        <size>1000M</size>\n+        <count>10</count>\n+    </logger>\n \n     <tcp_port>9000</tcp_port>\n     <listen_host>127.0.0.1</listen_host>\ndiff --git a/dbms/tests/integration/test_odbc_interaction/test.py b/dbms/tests/integration/test_odbc_interaction/test.py\nindex bca7eb93b863..a19c71944dad 100644\n--- a/dbms/tests/integration/test_odbc_interaction/test.py\n+++ b/dbms/tests/integration/test_odbc_interaction/test.py\n@@ -92,10 +92,10 @@ def test_mysql_simple_select_works(started_cluster):\n \n     node1.query(\"INSERT INTO {}(id, name, money) select number, concat('name_', toString(number)), 3 from numbers(100) \".format(table_name))\n \n-    # actually, I don't know, what wrong with that connection string, but libmyodbc always falls into segfault\n-    node1.query(\"SELECT * FROM odbc('DSN={}', '{}')\".format(mysql_setup[\"DSN\"], table_name), ignore_error=True)\n+    assert node1.query(\"SELECT count(*) FROM odbc('DSN={}', '{}')\".format(mysql_setup[\"DSN\"], table_name)) == '100\\n'\n \n-    # server still works after segfault\n+    # previously this test fails with segfault\n+    # just to be sure :)\n     assert node1.query(\"select 1\") == \"1\\n\"\n \n     conn.close()\n",
  "problem_statement": "external dictionary, PSQL: No message received\n```\r\n\u250c\u2500version()\u2500\u2510\r\n\u2502 18.12.17  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n`/etc/odbc.ini`\r\n```\r\n[DEFAULT]\r\nDriver = NAME\r\n\r\n[NAME]\r\nDescription         = PostgreSQL connection to NAME db\r\nDriver              = PostgreSQL Unicode\r\nDatabase            = DBNAME\r\nServername          = HOST\r\nUserName            = USER\r\nPassword            = PASSWORD\r\nPort                = 5432\r\nProtocol            = 10.03\r\nReadOnly            = No\r\nRowVersioning       = No\r\nShowSystemTables    = No\r\nConnSettings        =\r\nSSLmode             = require\r\n```\r\n\r\n`/etc/odbcinst.ini`\r\n```\r\n[PostgreSQL ANSI]\r\nDescription=PostgreSQL ODBC driver (ANSI version)\r\nDriver=psqlodbca.so\r\nSetup=libodbcpsqlS.so\r\nDebug=0\r\nCommLog=1\r\nUsageCount=1\r\n\r\n[PostgreSQL Unicode]\r\nDescription=PostgreSQL ODBC driver (Unicode version)\r\nDriver=/usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so\r\nSetup=libodbcpsqlS.so\r\nDebug=0\r\nCommLog=1\r\nUsageCount=1\r\n```\r\n\r\n\u0415rrors appear in the log\r\n\r\n`/var/log/clickhouse-server/clickhouse-server.log`\r\n```\r\n2018.10.11 23:37:42.175835 [ 43 ] {7f266ad7-8ae8-4b85-8678-7cc80afe44ac} <Error> ExternalDictionaries: Cannot create external dictionary 'campaigns' from config path /etc/clickhouse-server/psql_dictionary.xml: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = No message received, e.what() = No message received\r\n2018.10.11 23:37:52.206453 [ 43 ] {7f266ad7-8ae8-4b85-8678-7cc80afe44ac} <Error> ExternalDictionaries: Cannot create external dictionary 'advertisers' from config path /etc/clickhouse-server/psql_dictionary.xml: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = No message received, e.what() = No message received\r\n```\r\n\r\n```\r\nii  clickhouse-client                   18.12.17                                   all          Client binary for ClickHouse\r\nii  clickhouse-common-static            18.12.17                                   amd64        Common files for ClickHouse\r\nii  clickhouse-server                   18.12.17                                   all          Server binary for ClickHouse\r\nii  clickhouse-server-base              18.12.17                                   amd64        DEPRECATED PACKAGE (use clickhouse-common-static): Server binary for clickhouse\r\n```\r\n\r\nNo problem only in version `18.4.0`. In the versions `18.5.1`,` 18.6.0` errors are different. At the same time, nothing changed between the versions.\n",
  "hints_text": "```\r\nii  libiodbc2:amd64                     3.52.9-2                                   amd64        iODBC Driver Manager\r\nii  libodbc1:amd64                      2.3.1-4.1                                  amd64        ODBC library for Unix\r\nii  odbc-postgresql:amd64               1:10.03.0000-1.pgdg16.04+1                 amd64        ODBC driver for PostgreSQL\r\nii  odbcinst                            2.3.1-4.1                                  amd64        Helper program for accessing odbc ini files\r\nii  odbcinst1debian2:amd64              2.3.1-4.1                                  amd64        Support library for accessing odbc ini files\r\nii  unixodbc                            2.3.1-4.1                                  amd64        Basic ODBC tools\r\nii  unixodbc-dev                        2.3.1-4.1                                  amd64        ODBC libraries for UNIX (development files)\r\n```\n```\r\nSELECT version()\r\n\r\n\u250c\u2500version()\u2500\u2510\r\n\u2502 18.14.18  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\npostgresql log:\r\n```\r\n2018-12-13 19:19:00.750 UTC [13409] [unknown]@10.99.67.110/[unknown] LOG:  could not accept SSL connection: EOF detected\r\n2018-12-13 19:19:10.770 UTC [13416] [unknown]@10.99.67.110/[unknown] LOG:  could not accept SSL connection: EOF detected\r\n2018-12-13 19:19:20.791 UTC [13418] [unknown]@10.99.67.110/[unknown] LOG:  could not accept SSL connection: EOF detected\r\n```\r\n\r\nany idea?\nSolution: enable the ability to connect to PSQL without SSL and remove from config\r\n`/etc/odbc.ini` line:\r\n\r\n```\r\nSSLmode = require\r\n```\r\n\r\nBut in the old version, it works with SSL:\r\n\r\n```\r\nSELECT version()\r\n\r\n\u250c\u2500version()\u2500\u2510\r\n\u2502 18.4.0    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nThrough `isql` also works without problems.\nWe've figured out the root cause and the way to fix it.",
  "created_at": "2019-01-28T16:08:26Z",
  "modified_files": [
    "dbms/programs/CMakeLists.txt",
    "dbms/programs/main.cpp",
    "dbms/programs/odbc-bridge/CMakeLists.txt",
    "dbms/src/Common/SharedLibrary.cpp",
    "dbms/src/Common/SharedLibrary.h",
    "dbms/src/Common/XDBCBridgeHelper.h",
    "dbms/src/Dictionaries/LibraryDictionarySource.cpp"
  ],
  "modified_test_files": [
    "dbms/tests/integration/helpers/cluster.py",
    "dbms/tests/integration/image/Dockerfile",
    "dbms/tests/integration/image/dockerd-entrypoint.sh",
    "dbms/tests/integration/runner",
    "dbms/tests/integration/test_odbc_interaction/configs/config.xml",
    "dbms/tests/integration/test_odbc_interaction/test.py"
  ]
}