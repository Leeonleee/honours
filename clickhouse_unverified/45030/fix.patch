diff --git a/src/Functions/array/range.cpp b/src/Functions/array/range.cpp
index 46284ce95bfe..6bf65662d8c9 100644
--- a/src/Functions/array/range.cpp
+++ b/src/Functions/array/range.cpp
@@ -165,7 +165,7 @@ class FunctionRange : public IFunction
         {
             for (size_t idx = 0; idx < row_length[row_idx]; ++idx)
             {
-                out_data[offset] = static_cast<T>(start + offset * step);
+                out_data[offset] = static_cast<T>(start + idx * step);
                 ++offset;
             }
             out_offsets[row_idx] = offset;
@@ -225,8 +225,11 @@ class FunctionRange : public IFunction
         IColumn::Offset offset{};
         for (size_t row_idx = 0; row_idx < input_rows_count; ++row_idx)
         {
-            for (size_t idx = 0; idx < row_length[row_idx]; idx++)
-                out_data[offset++] = static_cast<T>(start_data[row_idx] + idx * step);
+            for (size_t idx = 0; idx < row_length[row_idx]; ++idx)
+            {
+                out_data[offset] = static_cast<T>(start_data[row_idx] + idx * step);
+                ++offset;
+            }
             out_offsets[row_idx] = offset;
         }
 
@@ -284,8 +287,11 @@ class FunctionRange : public IFunction
         IColumn::Offset offset{};
         for (size_t row_idx = 0; row_idx < input_rows_count; ++row_idx)
         {
-            for (size_t idx = 0; idx < row_length[row_idx]; idx++)
-                out_data[offset++] = static_cast<T>(start + offset * step_data[row_idx]);
+            for (size_t idx = 0; idx < row_length[row_idx]; ++idx)
+            {
+                out_data[offset] = static_cast<T>(start + idx * step_data[row_idx]);
+                ++offset;
+            }
             out_offsets[row_idx] = offset;
         }
 
@@ -314,8 +320,8 @@ class FunctionRange : public IFunction
         for (size_t row_idx = 0; row_idx < input_rows_count; ++row_idx)
         {
             if (step_data[row_idx] == 0)
-                throw Exception{"A call to function " + getName() + " overflows, the 3rd argument step can't less or equal to zero",
-                            ErrorCodes::ARGUMENT_OUT_OF_BOUND};
+                throw Exception{ErrorCodes::ARGUMENT_OUT_OF_BOUND,
+                    "A call to function {} underflows, the 3rd argument step can't be less or equal to zero", getName()};
             if (start_data[row_idx] < end_start[row_idx] && step_data[row_idx] > 0)
                 row_length[row_idx] = (static_cast<__int128_t>(end_start[row_idx]) - static_cast<__int128_t>(start_data[row_idx]) - 1) / static_cast<__int128_t>(step_data[row_idx]) + 1;
             else if (start_data[row_idx] > end_start[row_idx] && step_data[row_idx] < 0)
@@ -345,8 +351,11 @@ class FunctionRange : public IFunction
         IColumn::Offset offset{};
         for (size_t row_idx = 0; row_idx < input_rows_count; ++row_idx)
         {
-            for (size_t idx = 0; idx < row_length[row_idx]; idx++)
-                out_data[offset++] = static_cast<T>(start_data[row_idx] + idx * step_data[row_idx]);
+            for (size_t idx = 0; idx < row_length[row_idx]; ++idx)
+            {
+                out_data[offset] = static_cast<T>(start_data[row_idx] + idx * step_data[row_idx]);
+                ++offset;
+            }
             out_offsets[row_idx] = offset;
         }
 
