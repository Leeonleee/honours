diff --git a/tests/queries/0_stateless/02002_row_level_filter_bug.reference b/tests/queries/0_stateless/02002_row_level_filter_bug.reference
new file mode 100644
index 000000000000..ea14f6fa1dd0
--- /dev/null
+++ b/tests/queries/0_stateless/02002_row_level_filter_bug.reference
@@ -0,0 +1,3 @@
+600
+AWD	3130	2021-07-15	600
+0
diff --git a/tests/queries/0_stateless/02002_row_level_filter_bug.sh b/tests/queries/0_stateless/02002_row_level_filter_bug.sh
new file mode 100755
index 000000000000..2c473ddd9871
--- /dev/null
+++ b/tests/queries/0_stateless/02002_row_level_filter_bug.sh
@@ -0,0 +1,78 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+
+$CLICKHOUSE_CLIENT --query "drop table if exists test_table"
+$CLICKHOUSE_CLIENT --query "CREATE TABLE test_table
+(
+    a      UInt16 DEFAULT 0,
+    c      LowCardinality(String) DEFAULT '',
+    t_date LowCardinality(String) DEFAULT '',
+    ex     LowCardinality(String) DEFAULT '',
+    team   LowCardinality(String) DEFAULT '',
+    g      LowCardinality(String) DEFAULT '',
+    mt     FixedString(1) DEFAULT ' ',
+    rw_ts  Int64 DEFAULT 0,
+    exr_t  Int64 DEFAULT 0,
+    en     UInt16 DEFAULT 0,
+    f_t    Int64 DEFAULT 0,
+    j      UInt64 DEFAULT 0,
+    oj     UInt64 DEFAULT 0
+)
+ENGINE = MergeTree
+PARTITION BY (c, t_date)
+ORDER BY (ex, team, g, mt, rw_ts, exr_t, en, f_t, j, oj)
+SETTINGS index_granularity = 8192"
+
+$CLICKHOUSE_CLIENT --query "
+INSERT INTO test_table(t_date, c,team, a) SELECT
+arrayJoin([toDate('2021-07-15'),toDate('2021-07-16')]) as t_date,
+arrayJoin(['aur','rua']) as c,
+arrayJoin(['AWD','ZZZ']) as team,
+arrayJoin([3183,3106,0,3130,3108,3126,3109,3107,3182,3180,3129,3128,3125,3266]) as a
+FROM numbers(600);"
+
+$CLICKHOUSE_CLIENT --query "DROP ROLE IF exists AWD;"
+$CLICKHOUSE_CLIENT --query "create role AWD;"
+$CLICKHOUSE_CLIENT --query "REVOKE ALL ON *.* FROM AWD;"
+
+$CLICKHOUSE_CLIENT --query "DROP USER IF EXISTS AWD_user;"
+$CLICKHOUSE_CLIENT --query "CREATE USER AWD_user IDENTIFIED WITH plaintext_password BY 'AWD_pwd' DEFAULT ROLE AWD;"
+
+$CLICKHOUSE_CLIENT --query "GRANT SELECT ON test_table TO AWD;"
+
+$CLICKHOUSE_CLIENT --query "DROP ROW POLICY IF EXISTS ttt_bu_test_table_AWD ON test_table;"
+$CLICKHOUSE_CLIENT --query "CREATE ROW POLICY ttt_bu_test_table_AWD ON test_table FOR SELECT USING team = 'AWD' TO AWD;"
+
+$CLICKHOUSE_CLIENT  --user=AWD_user --password=AWD_pwd  --query "
+SELECT count() AS count
+ FROM test_table
+WHERE
+ t_date = '2021-07-15' AND c = 'aur' AND a=3130;
+"
+
+$CLICKHOUSE_CLIENT  --user=AWD_user --password=AWD_pwd  --query "
+SELECT
+    team,
+    a,
+    t_date,
+    count() AS count
+FROM test_table
+WHERE (t_date = '2021-07-15') AND (c = 'aur') AND (a = 3130)
+GROUP BY
+    team,
+    a,
+    t_date;
+"
+
+$CLICKHOUSE_CLIENT  --user=AWD_user --password=AWD_pwd  --query "
+SELECT count() AS count
+FROM test_table
+WHERE (t_date = '2021-07-15') AND (c = 'aur') AND (a = 313)
+"
+
+$CLICKHOUSE_CLIENT --query "DROP ROW POLICY IF EXISTS ttt_bu_test_table_AWD ON test_table;"
+$CLICKHOUSE_CLIENT --query "drop table if exists test_table"
diff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json
index aef91ddf57d6..1d0929488f8d 100644
--- a/tests/queries/skip_list.json
+++ b/tests/queries/skip_list.json
@@ -780,6 +780,48 @@
         "01702_system_query_log", // It's ok to execute in parallel with oter tests but not several instances of the same test.
         "01748_dictionary_table_dot", // creates database
         "00950_dict_get",
-        "01850_dist_INSERT_preserve_error" // uses cluster with different static databases shard_0/shard_1
+        "01615_random_one_shard_insertion",
+        "01683_flat_dictionary",
+        "01681_cache_dictionary_simple_key",
+        "01682_cache_dictionary_complex_key",
+        "01684_ssd_cache_dictionary_simple_key",
+        "01685_ssd_cache_dictionary_complex_key",
+        "01737_clickhouse_server_wait_server_pool_long", // This test is fully compatible to run in parallel, however under ASAN processes are pretty heavy and may fail under flaky adress check.
+        "01954_clickhouse_benchmark_round_robin", // This test is fully compatible to run in parallel, however under ASAN processes are pretty heavy and may fail under flaky adress check.
+        "01594_too_low_memory_limits", // This test is fully compatible to run in parallel, however under ASAN processes are pretty heavy and may fail under flaky adress check.
+        "01760_system_dictionaries",
+        "01760_polygon_dictionaries",
+        "01778_hierarchical_dictionaries",
+        "01780_clickhouse_dictionary_source_loop",
+        "01785_dictionary_element_count",
+        "01802_test_postgresql_protocol_with_row_policy", /// Creates database and users
+        "01804_dictionary_decimal256_type",
+        "01850_dist_INSERT_preserve_error", // uses cluster with different static databases shard_0/shard_1
+        "01821_table_comment",
+        "01824_prefer_global_in_and_join",
+        "01870_modulo_partition_key",
+        "01870_buffer_flush", // creates database
+        "01889_sqlite_read_write",
+        "01889_postgresql_protocol_null_fields",
+        "01889_check_row_policy_defined_using_user_function",
+        "01921_concurrent_ttl_and_normal_merges_zookeeper_long", // heavy test, better to run sequentially
+        "01913_replace_dictionary",
+        "01914_exchange_dictionaries",
+        "01915_create_or_replace_dictionary",
+        "01925_test_storage_merge_aliases",
+        "01933_client_replxx_convert_history", /// Uses non unique history file
+        "01939_user_with_default_database", //create user and database
+        "01999_grant_with_replace",
+        "01902_table_function_merge_db_repr",
+        "01946_test_zstd_decompression_with_escape_sequence_at_the_end_of_buffer",
+        "01946_test_wrong_host_name_access",
+        "01493_alter_remove_properties_zookeeper",
+        "00510_materizlized_view_and_deduplication_zookeeper", /// static UUID
+        "00509_extended_storage_definition_syntax_zookeeper", /// leftovers
+        "00083_create_merge_tree_zookeeper", /// leftovers
+        "01532_execute_merges_on_single_replica", /// static zk path
+        "01530_drop_database_atomic_sync", /// creates database
+        "02001_add_default_database_to_system_users", ///create user
+        "02002_row_level_filter_bug" ///create user
     ]
 }
