{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48517,
  "instance_id": "ClickHouse__ClickHouse-48517",
  "issue_numbers": [
    "48514"
  ],
  "base_commit": "1520f3e924d061cb5d719553d3b352e5e5b2c164",
  "patch": "diff --git a/src/Interpreters/getColumnFromBlock.cpp b/src/Interpreters/getColumnFromBlock.cpp\nindex ce6fa2904db9..972e109afb31 100644\n--- a/src/Interpreters/getColumnFromBlock.cpp\n+++ b/src/Interpreters/getColumnFromBlock.cpp\n@@ -15,23 +15,18 @@ ColumnPtr tryGetColumnFromBlock(const Block & block, const NameAndTypePair & req\n     if (!elem)\n         return nullptr;\n \n-    DataTypePtr elem_type;\n-    ColumnPtr elem_column;\n+    auto elem_type = elem->type;\n+    auto elem_column = elem->column->decompress();\n \n     if (requested_column.isSubcolumn())\n     {\n         auto subcolumn_name = requested_column.getSubcolumnName();\n-        elem_type = elem->type->tryGetSubcolumnType(subcolumn_name);\n-        elem_column = elem->type->tryGetSubcolumn(subcolumn_name, elem->column);\n+        elem_column = elem_type->tryGetSubcolumn(subcolumn_name, elem_column);\n+        elem_type = elem_type->tryGetSubcolumnType(subcolumn_name);\n \n         if (!elem_type || !elem_column)\n             return nullptr;\n     }\n-    else\n-    {\n-        elem_type = elem->type;\n-        elem_column = elem->column;\n-    }\n \n     return castColumn({elem_column, elem_type, \"\"}, requested_column.type);\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02709_storage_memory_compressed.reference b/tests/queries/0_stateless/02709_storage_memory_compressed.reference\nnew file mode 100644\nindex 000000000000..9a665fab8098\n--- /dev/null\n+++ b/tests/queries/0_stateless/02709_storage_memory_compressed.reference\n@@ -0,0 +1,2 @@\n+1\tfoo\t['0','1','2','3','4']\t{'k1':'v1'}\n+2\tbar\t['0','1','2','3','4']\t{'k2':'v2'}\ndiff --git a/tests/queries/0_stateless/02709_storage_memory_compressed.sql b/tests/queries/0_stateless/02709_storage_memory_compressed.sql\nnew file mode 100644\nindex 000000000000..0e12b47998cc\n--- /dev/null\n+++ b/tests/queries/0_stateless/02709_storage_memory_compressed.sql\n@@ -0,0 +1,11 @@\n+DROP TABLE IF EXISTS t_memory_compressed;\n+\n+CREATE TABLE t_memory_compressed (id UInt64, s String, arr Array(LowCardinality(String)), m Map(String, String))\n+ENGINE = Memory SETTINGS compress = 1;\n+\n+INSERT INTO t_memory_compressed VALUES (1, 'foo', range(5), map('k1', 'v1'));\n+INSERT INTO t_memory_compressed VALUES (2, 'bar', range(5), map('k2', 'v2'));\n+\n+SELECT * FROM t_memory_compressed ORDER BY id;\n+\n+DROP TABLE t_memory_compressed;\n",
  "problem_statement": "segmentation fault in Memory engine with compression\nsee https://fiddle.clickhouse.com/865783e7-90a1-4bee-afa2-244ccd363ae4\r\n\r\n```sql\r\nCREATE TABLE users (uid Int16, name String, age Int16) ENGINE=Memory SETTINGS compress=1;\r\n\r\nINSERT INTO users VALUES (1231, 'John', 33);\r\nINSERT INTO users VALUES (6666, 'Ksenia', 48);\r\nINSERT INTO users VALUES (8888, 'Alice', 50);\r\n\r\nSELECT * FROM users;\r\n\r\n\r\nReceived exception from server (version 23.3.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Bad cast from type DB::ColumnCompressed to DB::ColumnVector<short>. (LOGICAL_ERROR)\r\n(query: SELECT * FROM users;)\r\n\r\n```\r\n\r\n\r\nalso segment fault (custom build):\r\n```sql\r\nCREATE TABLE default.hits_memory AS datasets.hits_v1 Engine=Memory SETTINGS compress=1;\r\nINSERT INTO default.hits_memory SELECT * FROM datasets.hits_v1 LIMIT 100000; -- dataset hits_v1 is populate before hand\r\n\r\nSELECT * FROM default.hits_memory LIMIT 10\r\n\r\nSELECT *\r\nFROM default.hits_memory\r\nLIMIT 10\r\n\r\nQuery id: b8db6b14-78bd-44aa-8a60-915900959c70\r\n\r\n2023.04.07 01:24:42.947757 [ 341 ] <Fatal> BaseDaemon: ########################################\r\n2023.04.07 01:24:42.947960 [ 341 ] <Fatal> BaseDaemon: (version 23.2.4.7, build id: 8EC24C8B6DF9DDD4DFEBCF86CA67A3E429748E2B) (from thread 337) (query_id: b8db6b14-78bd-44aa-8a60-915900959c70) (query: SELECT * FROM default.hits_memory LIMIT 10) Received signal Segmentation fault (11)\r\n2023.04.07 01:24:42.948067 [ 341 ] <Fatal> BaseDaemon: Address: 0x44b85 Access: write. Address not mapped to object.\r\n2023.04.07 01:24:42.948175 [ 341 ] <Fatal> BaseDaemon: Stack trace: 0x124dcbaf 0x124d6441 0x1351d725 0x139bb161 0x142f3ad5 0x142f3646 0x1430cf6c 0x1430217b 0x143012d9 0x14301020 0x14310c9f 0xdcd3b4a 0xdcd9201 0x7f4aa859b609 0x7f4aa84c0133\r\n2023.04.07 01:24:42.948295 [ 341 ] <Fatal> BaseDaemon: 2. DB::SerializationArray::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x124dcbaf in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948406 [ 341 ] <Fatal> BaseDaemon: 3. DB::ISerialization::enumerateStreams(std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, std::__1::shared_ptr<DB::IDataType const> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const @ 0x124d6441 in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948474 [ 341 ] <Fatal> BaseDaemon: 4. DB::fillMissingColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long, DB::NamesAndTypesList const&, DB::NamesAndTypesList const&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>) @ 0x1351d725 in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948568 [ 341 ] <Fatal> BaseDaemon: 5. ? @ 0x139bb161 in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948615 [ 341 ] <Fatal> BaseDaemon: 6. DB::ISource::tryGenerate() @ 0x142f3ad5 in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948651 [ 341 ] <Fatal> BaseDaemon: 7. DB::ISource::work() @ 0x142f3646 in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948689 [ 341 ] <Fatal> BaseDaemon: 8. DB::ExecutionThreadContext::executeTask() @ 0x1430cf6c in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948741 [ 341 ] <Fatal> BaseDaemon: 9. DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x1430217b in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948809 [ 341 ] <Fatal> BaseDaemon: 10. DB::PipelineExecutor::executeImpl(unsigned long) @ 0x143012d9 in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948870 [ 341 ] <Fatal> BaseDaemon: 11. DB::PipelineExecutor::execute(unsigned long) @ 0x14301020 in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948908 [ 341 ] <Fatal> BaseDaemon: 12. ? @ 0x14310c9f in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948952 [ 341 ] <Fatal> BaseDaemon: 13. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xdcd3b4a in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.948990 [ 341 ] <Fatal> BaseDaemon: 14. ? @ 0xdcd9201 in /usr/bin/clickhouse\r\n2023.04.07 01:24:42.949022 [ 341 ] <Fatal> BaseDaemon: 15. ? @ 0x7f4aa859b609 in ?\r\n2023.04.07 01:24:42.949050 [ 341 ] <Fatal> BaseDaemon: 16. __clone @ 0x7f4aa84c0133 in ?\r\n2023.04.07 01:24:42.949088 [ 341 ] <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n\r\n-- server host name stripped from log\r\n```\r\n\r\n\n",
  "hints_text": "reproducible on latest version:\r\n\r\nhttps://fiddle.clickhouse.com/1cf35667-b25c-4458-9dbe-d9a6fcb7fbc1\r\n\r\n```sql\r\nCREATE DATABASE IF NOT EXISTS datasets;\r\nCREATE TABLE datasets.hits_v1 ( WatchID UInt64,  JavaEnable UInt8,  Title String,  GoodEvent Int16,  EventTime DateTime,  EventDate Date,  CounterID UInt32,  ClientIP UInt32,  ClientIP6 FixedString(16),  RegionID UInt32,  UserID UInt64,  CounterClass Int8,  OS UInt8,  UserAgent UInt8,  URL String,  Referer String,  URLDomain String,  RefererDomain String,  Refresh UInt8,  IsRobot UInt8,  RefererCategories Array(UInt16),  URLCategories Array(UInt16), URLRegions Array(UInt32),  RefererRegions Array(UInt32),  ResolutionWidth UInt16,  ResolutionHeight UInt16,  ResolutionDepth UInt8,  FlashMajor UInt8, FlashMinor UInt8,  FlashMinor2 String,  NetMajor UInt8,  NetMinor UInt8, UserAgentMajor UInt16,  UserAgentMinor FixedString(2),  CookieEnable UInt8, JavascriptEnable UInt8,  IsMobile UInt8,  MobilePhone UInt8,  MobilePhoneModel String,  Params String,  IPNetworkID UInt32,  TraficSourceID Int8, SearchEngineID UInt16,  SearchPhrase String,  AdvEngineID UInt8,  IsArtifical UInt8,  WindowClientWidth UInt16,  WindowClientHeight UInt16,  ClientTimeZone Int16,  ClientEventTime DateTime,  SilverlightVersion1 UInt8, SilverlightVersion2 UInt8,  SilverlightVersion3 UInt32,  SilverlightVersion4 UInt16,  PageCharset String,  CodeVersion UInt32,  IsLink UInt8,  IsDownload UInt8,  IsNotBounce UInt8,  FUniqID UInt64,  HID UInt32,  IsOldCounter UInt8, IsEvent UInt8,  IsParameter UInt8,  DontCountHits UInt8,  WithHash UInt8, HitColor FixedString(1),  UTCEventTime DateTime,  Age UInt8,  Sex UInt8,  Income UInt8,  Interests UInt16,  Robotness UInt8,  GeneralInterests Array(UInt16), RemoteIP UInt32,  RemoteIP6 FixedString(16),  WindowName Int32,  OpenerName Int32,  HistoryLength Int16,  BrowserLanguage FixedString(2),  BrowserCountry FixedString(2),  SocialNetwork String,  SocialAction String,  HTTPError UInt16, SendTiming Int32,  DNSTiming Int32,  ConnectTiming Int32,  ResponseStartTiming Int32,  ResponseEndTiming Int32,  FetchTiming Int32,  RedirectTiming Int32, DOMInteractiveTiming Int32,  DOMContentLoadedTiming Int32,  DOMCompleteTiming Int32,  LoadEventStartTiming Int32,  LoadEventEndTiming Int32, NSToDOMContentLoadedTiming Int32,  FirstPaintTiming Int32,  RedirectCount Int8, SocialSourceNetworkID UInt8,  SocialSourcePage String,  ParamPrice Int64, ParamOrderID String,  ParamCurrency FixedString(3),  ParamCurrencyID UInt16, GoalsReached Array(UInt32),  OpenstatServiceName String,  OpenstatCampaignID String,  OpenstatAdID String,  OpenstatSourceID String,  UTMSource String, UTMMedium String,  UTMCampaign String,  UTMContent String,  UTMTerm String, FromTag String,  HasGCLID UInt8,  RefererHash UInt64,  URLHash UInt64,  CLID UInt32,  YCLID UInt64,  ShareService String,  ShareURL String,  ShareTitle String,  ParsedParams Nested(Key1 String,  Key2 String, Key3 String, Key4 String, Key5 String,  ValueDouble Float64),  IslandID FixedString(16),  RequestNum UInt32,  RequestTry UInt8)\r\nENGINE = Memory SETTINGS compress=1;\r\n\r\nINSERT INTO datasets.hits_v1 SELECT * FROM generateRandom('WatchID UInt64,  JavaEnable UInt8,  Title String,  GoodEvent Int16,  EventTime DateTime,  EventDate Date,  CounterID UInt32,  ClientIP UInt32,  ClientIP6 FixedString(16),  RegionID UInt32,  UserID UInt64,  CounterClass Int8,  OS UInt8,  UserAgent UInt8,  URL String,  Referer String,  URLDomain String,  RefererDomain String,  Refresh UInt8,  IsRobot UInt8,  RefererCategories Array(UInt16),  URLCategories Array(UInt16), URLRegions Array(UInt32),  RefererRegions Array(UInt32),  ResolutionWidth UInt16,  ResolutionHeight UInt16,  ResolutionDepth UInt8,  FlashMajor UInt8, FlashMinor UInt8,  FlashMinor2 String,  NetMajor UInt8,  NetMinor UInt8, UserAgentMajor UInt16,  UserAgentMinor FixedString(2),  CookieEnable UInt8, JavascriptEnable UInt8,  IsMobile UInt8,  MobilePhone UInt8,  MobilePhoneModel String,  Params String,  IPNetworkID UInt32,  TraficSourceID Int8, SearchEngineID UInt16,  SearchPhrase String,  AdvEngineID UInt8,  IsArtifical UInt8,  WindowClientWidth UInt16,  WindowClientHeight UInt16,  ClientTimeZone Int16,  ClientEventTime DateTime,  SilverlightVersion1 UInt8, SilverlightVersion2 UInt8,  SilverlightVersion3 UInt32,  SilverlightVersion4 UInt16,  PageCharset String,  CodeVersion UInt32,  IsLink UInt8,  IsDownload UInt8,  IsNotBounce UInt8,  FUniqID UInt64,  HID UInt32,  IsOldCounter UInt8, IsEvent UInt8,  IsParameter UInt8,  DontCountHits UInt8,  WithHash UInt8, HitColor FixedString(1),  UTCEventTime DateTime,  Age UInt8,  Sex UInt8,  Income UInt8,  Interests UInt16,  Robotness UInt8,  GeneralInterests Array(UInt16), RemoteIP UInt32,  RemoteIP6 FixedString(16),  WindowName Int32,  OpenerName Int32,  HistoryLength Int16,  BrowserLanguage FixedString(2),  BrowserCountry FixedString(2),  SocialNetwork String,  SocialAction String,  HTTPError UInt16, SendTiming Int32,  DNSTiming Int32,  ConnectTiming Int32,  ResponseStartTiming Int32,  ResponseEndTiming Int32,  FetchTiming Int32,  RedirectTiming Int32, DOMInteractiveTiming Int32,  DOMContentLoadedTiming Int32,  DOMCompleteTiming Int32,  LoadEventStartTiming Int32,  LoadEventEndTiming Int32, NSToDOMContentLoadedTiming Int32,  FirstPaintTiming Int32,  RedirectCount Int8, SocialSourceNetworkID UInt8,  SocialSourcePage String,  ParamPrice Int64, ParamOrderID String,  ParamCurrency FixedString(3),  ParamCurrencyID UInt16, GoalsReached Array(UInt32),  OpenstatServiceName String,  OpenstatCampaignID String,  OpenstatAdID String,  OpenstatSourceID String,  UTMSource String, UTMMedium String,  UTMCampaign String,  UTMContent String,  UTMTerm String, FromTag String,  HasGCLID UInt8,  RefererHash UInt64,  URLHash UInt64,  CLID UInt32,  YCLID UInt64,  ShareService String,  ShareURL String,  ShareTitle String,  ParsedParams Nested(Key1 String,  Key2 String, Key3 String, Key4 String, Key5 String,  ValueDouble Float64),  IslandID FixedString(16),  RequestNum UInt32,  RequestTry UInt8') LIMIT 100;\r\n\r\nSELECT count() FROM datasets.hits_v1;\r\n-- SELECT URL FROM datasets.hits_v1 LIMIT 1; -- Code: 48. DB::Exception: Cannot cloneResized() column Compressed. (NOT_IMPLEMENTED)\r\nSELECT * FROM datasets.hits_v1 LIMIT 1; -- segment fault\r\n```\r\n",
  "created_at": "2023-04-06T18:29:34Z"
}