{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22939,
  "instance_id": "ClickHouse__ClickHouse-22939",
  "issue_numbers": [
    "22857"
  ],
  "base_commit": "dfa6e34fb25d0ede67ac4c07957d4392b583bdbe",
  "patch": "diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex 10aa1987559e..c732ce5f931d 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -2641,7 +2641,7 @@ class FunctionCast final : public IFunctionBaseImpl\n     WrapperType createMapToMapWrrapper(const DataTypes & from_kv_types, const DataTypes & to_kv_types) const\n     {\n         return [element_wrappers = getElementWrappers(from_kv_types, to_kv_types), from_kv_types, to_kv_types]\n-            (ColumnsWithTypeAndName & arguments, const DataTypePtr &, const ColumnNullable * nullable_source, size_t input_rows_count) -> ColumnPtr\n+            (ColumnsWithTypeAndName & arguments, const DataTypePtr &, const ColumnNullable * nullable_source, size_t /*input_rows_count*/) -> ColumnPtr\n         {\n             const auto * col = arguments.front().column.get();\n             const auto & column_map = typeid_cast<const ColumnMap &>(*col);\n@@ -2651,7 +2651,7 @@ class FunctionCast final : public IFunctionBaseImpl\n             for (size_t i = 0; i < 2; ++i)\n             {\n                 ColumnsWithTypeAndName element = {{nested_data.getColumnPtr(i), from_kv_types[i], \"\"}};\n-                converted_columns[i] = element_wrappers[i](element, to_kv_types[i], nullable_source, input_rows_count);\n+                converted_columns[i] = element_wrappers[i](element, to_kv_types[i], nullable_source, (element[0].column)->size());\n             }\n \n             return ColumnMap::create(converted_columns[0], converted_columns[1], column_map.getNestedColumn().getOffsetsPtr());\n@@ -2662,7 +2662,7 @@ class FunctionCast final : public IFunctionBaseImpl\n     WrapperType createArrayToMapWrrapper(const DataTypes & from_kv_types, const DataTypes & to_kv_types) const\n     {\n         return [element_wrappers = getElementWrappers(from_kv_types, to_kv_types), from_kv_types, to_kv_types]\n-            (ColumnsWithTypeAndName & arguments, const DataTypePtr &, const ColumnNullable * nullable_source, size_t input_rows_count) -> ColumnPtr\n+            (ColumnsWithTypeAndName & arguments, const DataTypePtr &, const ColumnNullable * nullable_source, size_t /*input_rows_count*/) -> ColumnPtr\n         {\n             const auto * col = arguments.front().column.get();\n             const auto & column_array = typeid_cast<const ColumnArray &>(*col);\n@@ -2672,7 +2672,7 @@ class FunctionCast final : public IFunctionBaseImpl\n             for (size_t i = 0; i < 2; ++i)\n             {\n                 ColumnsWithTypeAndName element = {{nested_data.getColumnPtr(i), from_kv_types[i], \"\"}};\n-                converted_columns[i] = element_wrappers[i](element, to_kv_types[i], nullable_source, input_rows_count);\n+                converted_columns[i] = element_wrappers[i](element, to_kv_types[i], nullable_source, (element[0].column)->size());\n             }\n \n             return ColumnMap::create(converted_columns[0], converted_columns[1], column_array.getOffsetsPtr());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01803_const_nullable_map.reference b/tests/queries/0_stateless/01803_const_nullable_map.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/tests/queries/0_stateless/01803_const_nullable_map.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/01803_const_nullable_map.sql b/tests/queries/0_stateless/01803_const_nullable_map.sql\nnew file mode 100644\nindex 000000000000..4ac9f925e241\n--- /dev/null\n+++ b/tests/queries/0_stateless/01803_const_nullable_map.sql\n@@ -0,0 +1,9 @@\n+DROP TABLE IF EXISTS t_map_null;\n+\n+SET allow_experimental_map_type = 1;\n+\n+CREATE TABLE t_map_null (a Map(String, String), b String) engine = MergeTree() ORDER BY a;\n+INSERT INTO t_map_null VALUES (map('a', 'b', 'c', 'd'), 'foo');\n+SELECT count() FROM t_map_null WHERE a = map('name', NULL, '', NULL);\n+\n+DROP TABLE t_map_null;\n",
  "problem_statement": "Experimental data type Map: segfault.\nAlways reproduced:\r\n\r\n```\r\nmilovidov-desktop :) create table table_map (a Map(String, String), b String) engine = MergeTree() order by a;\r\n\r\nCREATE TABLE table_map\r\n(\r\n    `a` Map(String, String),\r\n    `b` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY a\r\n\r\nQuery id: 8f8120c1-c165-452a-815f-2bcae3957e2a\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.002 sec. \r\n\r\nmilovidov-desktop :) SELECT b FROM table_map WHERE a = map('name', NULL, '', NULL)\r\n\r\nSELECT b\r\nFROM table_map\r\nWHERE a = {'name', NULL, '', NULL}\r\n```\n",
  "hints_text": "```\r\nCREATE TABLE table_map (a Map(String, String), b String) ENGINE = MergeTree() ORDER BY a;\r\nINSERT INTO table_map values ({'name':'zhangsan', 'gender':'male'}, 'name'), ({'name':'lisi', 'gender':'female'}, 'gender');\r\nSELECT toDecimal32OrZero(NULL, '0.03', NULL), b FROM table_map WHERE a = map('name', NULL, '', NULL)\r\n```\r\nhttps://github.com/ClickHouse/ClickHouse/pull/22833",
  "created_at": "2021-04-09T17:52:26Z"
}