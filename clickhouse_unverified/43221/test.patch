diff --git a/src/Columns/tests/gtest_column_vector.cpp b/src/Columns/tests/gtest_column_vector.cpp
index 5017d6877912..14bf36434b65 100644
--- a/src/Columns/tests/gtest_column_vector.cpp
+++ b/src/Columns/tests/gtest_column_vector.cpp
@@ -1,4 +1,5 @@
 #include <limits>
+#include <type_traits>
 #include <typeinfo>
 #include <vector>
 #include <Columns/ColumnsNumber.h>
@@ -14,6 +15,12 @@ static constexpr size_t MAX_ROWS = 10000;
 static const std::vector<size_t> filter_ratios = {1, 2, 5, 11, 32, 64, 100, 1000};
 static const size_t K = filter_ratios.size();
 
+template <typename, typename = void >
+struct HasUnderlyingType : std::false_type {};
+
+template <typename T>
+struct HasUnderlyingType<T, std::void_t<typename T::UnderlyingType>> : std::true_type {};
+
 template <typename T>
 static MutableColumnPtr createColumn(size_t n)
 {
@@ -21,7 +28,10 @@ static MutableColumnPtr createColumn(size_t n)
     auto & values = column->getData();
 
     for (size_t i = 0; i < n; ++i)
-        values.push_back(static_cast<T>(i));
+        if constexpr (HasUnderlyingType<T>::value)
+            values.push_back(static_cast<typename T::UnderlyingType>(i));
+        else
+            values.push_back(static_cast<T>(i));
 
     return column;
 }
@@ -85,6 +95,8 @@ TEST(ColumnVector, Filter)
     testFilter<Float32>();
     testFilter<Float64>();
     testFilter<UUID>();
+    testFilter<IPv4>();
+    testFilter<IPv6>();
 }
 
 template <typename T>
diff --git a/tests/integration/test_backward_compatibility/test_ip_types_binary_compatibility.py b/tests/integration/test_backward_compatibility/test_ip_types_binary_compatibility.py
new file mode 100644
index 000000000000..bb40dff27ac8
--- /dev/null
+++ b/tests/integration/test_backward_compatibility/test_ip_types_binary_compatibility.py
@@ -0,0 +1,41 @@
+import pytest
+
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+# Version 21.6.3.14 has incompatible partition id for tables with UUID in partition key.
+node_22_6 = cluster.add_instance(
+    "node_22_6",
+    image="clickhouse/clickhouse-server",
+    tag="22.6",
+    stay_alive=True,
+    with_installed_binary=True,
+)
+
+
+@pytest.fixture(scope="module")
+def start_cluster():
+    try:
+        cluster.start()
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+def test_ip_types_binary_compatibility(start_cluster):
+    node_22_6.query(
+        "create table tab (ipv4 IPv4, ipv6 IPv6) engine = MergeTree order by tuple()"
+    )
+    node_22_6.query(
+        "insert into tab values ('123.231.213.132', '0123:4567:89ab:cdef:fedc:ba98:7654:3210')"
+    )
+    res_22_6 = node_22_6.query("select * from tab")
+
+    node_22_6.restart_with_latest_version()
+
+    res_latest = node_22_6.query("select * from tab")
+
+    assert res_22_6 == res_latest
+
+    node_22_6.query("drop table tab")
diff --git a/tests/queries/0_stateless/00937_ipv4_cidr_range.reference b/tests/queries/0_stateless/00937_ipv4_cidr_range.reference
index 01f85dc6447b..3824c190627c 100644
--- a/tests/queries/0_stateless/00937_ipv4_cidr_range.reference
+++ b/tests/queries/0_stateless/00937_ipv4_cidr_range.reference
@@ -1,4 +1,3 @@
-check invalid params
 tests
 4
 3
diff --git a/tests/queries/0_stateless/00937_ipv4_cidr_range.sql b/tests/queries/0_stateless/00937_ipv4_cidr_range.sql
index badefe223833..2cc33eb9f583 100644
--- a/tests/queries/0_stateless/00937_ipv4_cidr_range.sql
+++ b/tests/queries/0_stateless/00937_ipv4_cidr_range.sql
@@ -1,7 +1,3 @@
-SELECT 'check invalid params';
-SELECT IPv4CIDRToRange(1, 1); -- { serverError 43 }
-SELECT IPv4CIDRToRange(toUInt32(1), 512); -- { serverError 43 }
-
 SELECT 'tests';
 
 DROP TABLE IF EXISTS ipv4_range;
diff --git a/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.sql b/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.sql
index b303d580e727..f392d0125d93 100644
--- a/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.sql
+++ b/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.sql
@@ -7,7 +7,7 @@ SELECT CAST(toIPv6('2001:0db8:0000:85a3:0000:0000:ac1f:8001') as String) as v, t
 SELECT toIPv4OrDefault('hello') as v, toTypeName(v);
 SELECT toIPv6OrDefault('hello') as v, toTypeName(v);
 
-SELECT CAST('hello' as IPv4) as v, toTypeName(v); -- { serverError CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING }
-SELECT CAST('hello' as IPv6) as v, toTypeName(v); -- { serverError CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING }
+SELECT CAST('hello' as IPv4) as v, toTypeName(v); -- { serverError CANNOT_PARSE_IPV4 }
+SELECT CAST('hello' as IPv6) as v, toTypeName(v); -- { serverError CANNOT_PARSE_IPV6 }
 
 SELECT CAST('1.1.1.1' as IPv6) as v, toTypeName(v);
diff --git a/tests/queries/0_stateless/02234_cast_to_ip_address.reference b/tests/queries/0_stateless/02234_cast_to_ip_address.reference
index 3a4c40a07cfd..96aae2a978c9 100644
--- a/tests/queries/0_stateless/02234_cast_to_ip_address.reference
+++ b/tests/queries/0_stateless/02234_cast_to_ip_address.reference
@@ -41,5 +41,6 @@ IPv6 functions
 ::
 ::
 --
-::ffff:127.0.0.1	::ffff:127.0.0.1	::ffff:127.0.0.1
 ::1\0\0	::1	::1
+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0	::
+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0	::
diff --git a/tests/queries/0_stateless/02234_cast_to_ip_address.sql b/tests/queries/0_stateless/02234_cast_to_ip_address.sql
index d436c93b9db1..436f232e441e 100644
--- a/tests/queries/0_stateless/02234_cast_to_ip_address.sql
+++ b/tests/queries/0_stateless/02234_cast_to_ip_address.sql
@@ -1,6 +1,6 @@
 SELECT 'IPv4 functions';
 
-SELECT IPv4StringToNum('test'); --{serverError 441}
+SELECT IPv4StringToNum('test'); --{serverError CANNOT_PARSE_IPV4}
 SELECT IPv4StringToNumOrDefault('test');
 SELECT IPv4StringToNumOrNull('test');
 
@@ -10,7 +10,7 @@ SELECT IPv4StringToNumOrNull('127.0.0.1');
 
 SELECT '--';
 
-SELECT toIPv4('test'); --{serverError 441}
+SELECT toIPv4('test'); --{serverError CANNOT_PARSE_IPV4}
 SELECT toIPv4OrDefault('test');
 SELECT toIPv4OrNull('test');
 
@@ -20,7 +20,7 @@ SELECT toIPv4OrNull('127.0.0.1');
 
 SELECT '--';
 
-SELECT cast('test' , 'IPv4'); --{serverError 441}
+SELECT cast('test' , 'IPv4'); --{serverError CANNOT_PARSE_IPV4}
 SELECT cast('127.0.0.1' , 'IPv4');
 
 SELECT '--';
@@ -38,7 +38,7 @@ SET cast_ipv4_ipv6_default_on_conversion_error = 0;
 
 SELECT 'IPv6 functions';
 
-SELECT IPv6StringToNum('test'); --{serverError 441}
+SELECT IPv6StringToNum('test'); --{serverError CANNOT_PARSE_IPV6}
 SELECT IPv6StringToNumOrDefault('test');
 SELECT IPv6StringToNumOrNull('test');
 
@@ -48,7 +48,7 @@ SELECT IPv6StringToNumOrNull('::ffff:127.0.0.1');
 
 SELECT '--';
 
-SELECT toIPv6('test'); --{serverError 441}
+SELECT toIPv6('test'); --{serverError CANNOT_PARSE_IPV6}
 SELECT toIPv6OrDefault('test');
 SELECT toIPv6OrNull('test');
 
@@ -58,7 +58,7 @@ SELECT toIPv6OrNull('::ffff:127.0.0.1');
 
 SELECT '--';
 
-SELECT cast('test' , 'IPv6'); --{serverError 441}
+SELECT cast('test' , 'IPv6'); --{serverError CANNOT_PARSE_IPV6}
 SELECT cast('::ffff:127.0.0.1', 'IPv6');
 
 SELECT '--';
@@ -76,7 +76,6 @@ SELECT '--';
 
 SET cast_ipv4_ipv6_default_on_conversion_error = 0;
 
-SELECT toFixedString('::ffff:127.0.0.1', 16) as value, cast(value, 'IPv6'), toIPv6(value);
 SELECT toFixedString('::1', 5) as value, cast(value, 'IPv6'), toIPv6(value);
-SELECT toFixedString('', 16) as value, cast(value, 'IPv6'); --{serverError 441}
-SELECT toFixedString('', 16) as value, toIPv6(value); --{serverError 441}
+SELECT toFixedString('', 16) as value, cast(value, 'IPv6');
+SELECT toFixedString('', 16) as value, toIPv6(value);
diff --git a/tests/queries/0_stateless/02244_ip_address_invalid_insert.reference b/tests/queries/0_stateless/02244_ip_address_invalid_insert.reference
index 60e6a5da083b..a7b2fcc11b40 100644
--- a/tests/queries/0_stateless/02244_ip_address_invalid_insert.reference
+++ b/tests/queries/0_stateless/02244_ip_address_invalid_insert.reference
@@ -3,7 +3,7 @@
 1.1.1.1	1.1.1.1
 	0.0.0.0
 fe80::9801:43ff:fe1f:7690	fe80::9801:43ff:fe1f:7690
-1.1.1.1	::
+1.1.1.1	::ffff:1.1.1.1
 	::
 fe80::9801:43ff:fe1f:7690	fe80::9801:43ff:fe1f:7690
 1.1.1.1	::ffff:1.1.1.1
diff --git a/tests/queries/0_stateless/02244_ip_address_invalid_insert.sql b/tests/queries/0_stateless/02244_ip_address_invalid_insert.sql
index 4057b9b2d98d..27e2ab219d4d 100644
--- a/tests/queries/0_stateless/02244_ip_address_invalid_insert.sql
+++ b/tests/queries/0_stateless/02244_ip_address_invalid_insert.sql
@@ -5,7 +5,7 @@ CREATE TABLE test_table_ipv4
     ipv4 IPv4
 ) ENGINE = TinyLog;
 
-INSERT INTO test_table_ipv4 VALUES ('1.1.1.1', '1.1.1.1'), ('', ''); --{clientError 441}
+INSERT INTO test_table_ipv4 VALUES ('1.1.1.1', '1.1.1.1'), ('', ''); --{clientError CANNOT_PARSE_IPV4}
 
 SET input_format_ipv4_default_on_conversion_error = 1;
 
@@ -23,11 +23,11 @@ CREATE TABLE test_table_ipv4_materialized
     ipv6 IPv4 MATERIALIZED toIPv4(ip)
 ) ENGINE = TinyLog;
 
-INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), (''); --{serverError 441}
+INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), (''); --{serverError CANNOT_PARSE_IPV4}
 
 SET input_format_ipv4_default_on_conversion_error = 1;
 
-INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), (''); --{serverError 441}
+INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), (''); --{serverError CANNOT_PARSE_IPV4}
 
 SET cast_ipv4_ipv6_default_on_conversion_error = 1;
 
@@ -46,7 +46,7 @@ CREATE TABLE test_table_ipv6
     ipv6 IPv6
 ) ENGINE = TinyLog;
 
-INSERT INTO test_table_ipv6 VALUES ('fe80::9801:43ff:fe1f:7690', 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1', '1.1.1.1'), ('', ''); --{clientError 441}
+INSERT INTO test_table_ipv6 VALUES ('fe80::9801:43ff:fe1f:7690', 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1', '1.1.1.1'), ('', ''); --{clientError CANNOT_PARSE_IPV6}
 
 SET input_format_ipv6_default_on_conversion_error = 1;
 
@@ -64,11 +64,11 @@ CREATE TABLE test_table_ipv6_materialized
     ipv6 IPv6 MATERIALIZED toIPv6(ip)
 ) ENGINE = TinyLog;
 
-INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''); --{serverError 441}
+INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''); --{serverError CANNOT_PARSE_IPV6}
 
 SET input_format_ipv6_default_on_conversion_error = 1;
 
-INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''); --{serverError 441}
+INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''); --{serverError CANNOT_PARSE_IPV6}
 
 SET cast_ipv4_ipv6_default_on_conversion_error = 1;
 
diff --git a/tests/queries/0_stateless/02303_cast_nullable_to_custom_types.sql b/tests/queries/0_stateless/02303_cast_nullable_to_custom_types.sql
index 1a0d9a4c830b..1cc5140f3399 100644
--- a/tests/queries/0_stateless/02303_cast_nullable_to_custom_types.sql
+++ b/tests/queries/0_stateless/02303_cast_nullable_to_custom_types.sql
@@ -12,6 +12,7 @@ select CAST(number % 2 ? 'true' : NULL, 'Nullable(Bool)') from numbers(2);
 select CAST(number % 2 ? '0.0.0.0' : NULL, 'Nullable(IPv4)') from numbers(2);
 select CAST(number % 2 ? '0000:0000:0000:0000:0000:0000:0000:0000' : NULL, 'Nullable(IPv6)') from numbers(2);
 
+set cast_keep_nullable = 1;
 select toBool(number % 2 ? 'true' : NULL) from numbers(2);
 select toIPv4(number % 2 ? '0.0.0.0' : NULL) from numbers(2);
 select toIPv4OrDefault(number % 2 ? '' : NULL) from numbers(2);
diff --git a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference
index 0996ad37e6ef..9d747f9c5723 100644
--- a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference
+++ b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference
@@ -240,42 +240,6 @@ detectCharset
 detectLanguageUnknown
 detectProgrammingLanguage
 detectTonality
-dictGet
-dictGetChildren
-dictGetDate
-dictGetDateOrDefault
-dictGetDateTime
-dictGetDateTimeOrDefault
-dictGetDescendants
-dictGetFloat32
-dictGetFloat32OrDefault
-dictGetFloat64
-dictGetFloat64OrDefault
-dictGetHierarchy
-dictGetInt16
-dictGetInt16OrDefault
-dictGetInt32
-dictGetInt32OrDefault
-dictGetInt64
-dictGetInt64OrDefault
-dictGetInt8
-dictGetInt8OrDefault
-dictGetOrDefault
-dictGetOrNull
-dictGetString
-dictGetStringOrDefault
-dictGetUInt16
-dictGetUInt16OrDefault
-dictGetUInt32
-dictGetUInt32OrDefault
-dictGetUInt64
-dictGetUInt64OrDefault
-dictGetUInt8
-dictGetUInt8OrDefault
-dictGetUUID
-dictGetUUIDOrDefault
-dictHas
-dictIsIn
 divide
 dotProduct
 dumpColumnStructure
@@ -773,9 +737,11 @@ toHour
 toIPv4
 toIPv4OrDefault
 toIPv4OrNull
+toIPv4OrZero
 toIPv6
 toIPv6OrDefault
 toIPv6OrNull
+toIPv6OrZero
 toISOWeek
 toISOYear
 toInt128
