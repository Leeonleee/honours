{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17563,
  "instance_id": "ClickHouse__ClickHouse-17563",
  "issue_numbers": [
    "10976"
  ],
  "base_commit": "00da5148a105f9306b6d15492090453e96988d39",
  "patch": "diff --git a/src/Parsers/ASTAssignment.h b/src/Parsers/ASTAssignment.h\nindex 6753711f9e30..88d4bb96c158 100644\n--- a/src/Parsers/ASTAssignment.h\n+++ b/src/Parsers/ASTAssignment.h\n@@ -10,21 +10,18 @@ class ASTAssignment : public IAST\n {\n public:\n     String column_name;\n-    ASTPtr expression;\n+\n+    ASTPtr expression() const\n+    {\n+        return children.at(0);\n+    }\n \n     String getID(char delim) const override { return \"Assignment\" + (delim + column_name); }\n \n     ASTPtr clone() const override\n     {\n         auto res = std::make_shared<ASTAssignment>(*this);\n-        res->children.clear();\n-\n-        if (expression)\n-        {\n-            res->expression = expression->clone();\n-            res->children.push_back(res->expression);\n-        }\n-\n+        res->children = { expression()->clone() };\n         return res;\n     }\n \n@@ -37,7 +34,7 @@ class ASTAssignment : public IAST\n \n         settings.ostr << (settings.hilite ? hilite_operator : \"\") << \" = \" << (settings.hilite ? hilite_none : \"\");\n \n-        expression->formatImpl(settings, state, frame);\n+        expression()->formatImpl(settings, state, frame);\n     }\n };\n \ndiff --git a/src/Parsers/ParserAlterQuery.cpp b/src/Parsers/ParserAlterQuery.cpp\nindex 7050614007ed..b3f40eb42eb1 100644\n--- a/src/Parsers/ParserAlterQuery.cpp\n+++ b/src/Parsers/ParserAlterQuery.cpp\n@@ -588,7 +588,6 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n         }\n         else\n             return false;\n-\n     }\n \n     if (command->col_decl)\n@@ -601,6 +600,14 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n         command->children.push_back(command->order_by);\n     if (command->sample_by)\n         command->children.push_back(command->sample_by);\n+    if (command->index_decl)\n+        command->children.push_back(command->index_decl);\n+    if (command->index)\n+        command->children.push_back(command->index);\n+    if (command->constraint_decl)\n+        command->children.push_back(command->constraint_decl);\n+    if (command->constraint)\n+        command->children.push_back(command->constraint);\n     if (command->predicate)\n         command->children.push_back(command->predicate);\n     if (command->update_assignments)\n@@ -613,6 +620,10 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n         command->children.push_back(command->ttl);\n     if (command->settings_changes)\n         command->children.push_back(command->settings_changes);\n+    if (command->select)\n+        command->children.push_back(command->select);\n+    if (command->rename_to)\n+        command->children.push_back(command->rename_to);\n \n     return true;\n }\n@@ -656,12 +667,13 @@ bool ParserAssignment::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     if (!s_equals.ignore(pos, expected))\n         return false;\n \n-    if (!p_expression.parse(pos, assignment->expression, expected))\n+    ASTPtr expression;\n+    if (!p_expression.parse(pos, expression, expected))\n         return false;\n \n     tryGetIdentifierNameInto(column, assignment->column_name);\n-    if (assignment->expression)\n-        assignment->children.push_back(assignment->expression);\n+    if (expression)\n+        assignment->children.push_back(expression);\n \n     return true;\n }\ndiff --git a/src/Storages/MutationCommands.cpp b/src/Storages/MutationCommands.cpp\nindex daa7665403fd..f832e6744448 100644\n--- a/src/Storages/MutationCommands.cpp\n+++ b/src/Storages/MutationCommands.cpp\n@@ -47,7 +47,7 @@ std::optional<MutationCommand> MutationCommand::parse(ASTAlterCommand * command,\n         for (const ASTPtr & assignment_ast : command->update_assignments->children)\n         {\n             const auto & assignment = assignment_ast->as<ASTAssignment &>();\n-            auto insertion = res.column_to_update_expression.emplace(assignment.column_name, assignment.expression);\n+            auto insertion = res.column_to_update_expression.emplace(assignment.column_name, assignment.expression());\n             if (!insertion.second)\n                 throw Exception(\"Multiple assignments in the single statement to column \" + backQuote(assignment.column_name),\n                     ErrorCodes::MULTIPLE_ASSIGNMENTS_TO_COLUMN);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01599_mutation_query_params.reference b/tests/queries/0_stateless/01599_mutation_query_params.reference\nnew file mode 100644\nindex 000000000000..8e6c69b87b2c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01599_mutation_query_params.reference\n@@ -0,0 +1,2 @@\n+2\t1\n+1\t1\ndiff --git a/tests/queries/0_stateless/01599_mutation_query_params.sh b/tests/queries/0_stateless/01599_mutation_query_params.sh\nnew file mode 100755\nindex 000000000000..6bc12b5409ef\n--- /dev/null\n+++ b/tests/queries/0_stateless/01599_mutation_query_params.sh\n@@ -0,0 +1,32 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+\n+$CLICKHOUSE_CLIENT -n --query \"\n+DROP TABLE IF EXISTS test;\n+\n+CREATE TABLE test\n+(\n+  id UUID,\n+  date_time DateTime,\n+  x UInt32,\n+  y UInt32\n+) ENGINE = MergeTree()\n+PARTITION BY toYYYYMMDD(date_time)\n+ORDER BY (date_time);\n+\n+INSERT INTO test (x, y) VALUES (2, 1);\n+\"\n+\n+$CLICKHOUSE_CLIENT --query \"SELECT x, y FROM test\"\n+\n+$CLICKHOUSE_CLIENT --mutations_sync 1 --param_x 1 --param_y 1 --query \"\n+ALTER TABLE test\n+UPDATE x = {x:UInt32}\n+WHERE y = {y:UInt32};\n+\"\n+\n+$CLICKHOUSE_CLIENT --query \"SELECT x, y FROM test\"\n+$CLICKHOUSE_CLIENT --query \"DROP TABLE test\"\n",
  "problem_statement": "Query parameters don't work for mutations\n**Describe the bug**\r\n\r\nWhen a parameter is used in `UPDATE` part of the query ```Query parameter `field` was not set``` occurs on an `ALTER` query.\r\n\r\n**How to reproduce**\r\n\r\n* ClickHouse server version 20.4.2.9 (official build).\r\n* HTTP interface\r\n* Non-default settings, if any\r\n\r\nTable: \r\n\r\n```sql\r\nCREATE TABLE table\r\n(\r\n  id UUID,\r\n  date_time DateTime,\r\n  x UInt32,\r\n  y UInt32\r\n) ENGINE = MergeTree()\r\nPARTITION BY toYYYYMMDD(date_time)\r\nORDER BY (date_time);\r\n```\r\n\r\nQuery: \r\n\r\n```sql\r\nALTER TABLE table\r\nUPDATE x = {x:UInt32}\r\nWHERE y = {y:UInt32};\r\n```\r\n\r\nrequest:\r\n\r\n<img width=\"1479\" alt=\"Screen Shot 2020-05-17 at 11 33 08\" src=\"https://user-images.githubusercontent.com/698079/82139661-41538200-9832-11ea-8554-b16b43c4e373.png\">\r\n\r\ncurl:\r\n\r\n```sh\r\n$ curl --location --request POST 'http://clickhouse-url/?query=ALTER%20TABLE%20table%0AUPDATE%20x%20%3D%20{x:UInt32}%0AWHERE%20y%20%3D%20{y:UInt32};&param_x=1&param_y=7'\r\n```\r\n\r\n**Expected behavior**\r\n\r\nUpdate query should run without any issues.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nCode: 456, e.displayText() = DB::Exception: Query parameter `x` was not set (version 20.4.2.9 (official build))\r\n```\r\n\n",
  "hints_text": "I have the same problem\nI have a table that is partitioned by date, and I want to drop the specified partition with the passed date parameter",
  "created_at": "2020-11-29T13:30:59Z"
}