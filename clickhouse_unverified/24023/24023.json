{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 24023,
  "instance_id": "ClickHouse__ClickHouse-24023",
  "issue_numbers": [
    "24020"
  ],
  "base_commit": "3dd7401985d1f31b2b068b6219d2d9360e71b68a",
  "patch": "diff --git a/src/Functions/FunctionsComparison.h b/src/Functions/FunctionsComparison.h\nindex f724915b3bcc..f7c45558750e 100644\n--- a/src/Functions/FunctionsComparison.h\n+++ b/src/Functions/FunctionsComparison.h\n@@ -1148,17 +1148,24 @@ class FunctionComparison : public IFunction\n         /// NOTE: We consider NaN comparison to be implementation specific (and in our implementation NaNs are sometimes equal sometimes not).\n         if (left_type->equals(*right_type) && !left_type->isNullable() && !isTuple(left_type) && col_left_untyped == col_right_untyped)\n         {\n+            ColumnPtr result_column;\n+\n             /// Always true: =, <=, >=\n             if constexpr (IsOperation<Op>::equals\n                 || IsOperation<Op>::less_or_equals\n                 || IsOperation<Op>::greater_or_equals)\n             {\n-                return DataTypeUInt8().createColumnConst(input_rows_count, 1u);\n+                result_column = DataTypeUInt8().createColumnConst(input_rows_count, 1u);\n             }\n             else\n             {\n-                return DataTypeUInt8().createColumnConst(input_rows_count, 0u);\n+                result_column = DataTypeUInt8().createColumnConst(input_rows_count, 0u);\n             }\n+\n+            if (!isColumnConst(*col_left_untyped))\n+                result_column = result_column->convertToFullColumnIfConst();\n+\n+            return result_column;\n         }\n \n         WhichDataType which_left{left_type};\ndiff --git a/src/Interpreters/ExpressionJIT.cpp b/src/Interpreters/ExpressionJIT.cpp\nindex 4169d95bfa4e..3b23e2321840 100644\n--- a/src/Interpreters/ExpressionJIT.cpp\n+++ b/src/Interpreters/ExpressionJIT.cpp\n@@ -316,28 +316,6 @@ static bool isCompilableConstant(const ActionsDAG::Node & node)\n     return node.column && isColumnConst(*node.column) && canBeNativeType(*node.result_type) && node.allow_constant_folding;\n }\n \n-static bool checkIfFunctionIsComparisonEdgeCase(const ActionsDAG::Node & node, const IFunctionBase & impl)\n-{\n-    static std::unordered_set<std::string_view> comparison_functions\n-    {\n-        NameEquals::name,\n-        NameNotEquals::name,\n-        NameLess::name,\n-        NameGreater::name,\n-        NameLessOrEquals::name,\n-        NameGreaterOrEquals::name\n-    };\n-\n-    auto it = comparison_functions.find(impl.getName());\n-    if (it == comparison_functions.end())\n-        return false;\n-\n-    const auto * lhs_node = node.children[0];\n-    const auto * rhs_node = node.children[1];\n-\n-    return lhs_node == rhs_node && !isTuple(lhs_node->result_type);\n-}\n-\n static bool isCompilableFunction(const ActionsDAG::Node & node)\n {\n     if (node.type != ActionsDAG::ActionType::FUNCTION)\n@@ -354,9 +332,6 @@ static bool isCompilableFunction(const ActionsDAG::Node & node)\n             return false;\n     }\n \n-    if (checkIfFunctionIsComparisonEdgeCase(node, *node.function_base))\n-        return false;\n-\n     return function.isCompilable();\n }\n \n",
  "test_patch": "diff --git a/tests/performance/column_column_comparison.xml b/tests/performance/column_column_comparison.xml\ndeleted file mode 100644\nindex 2b59a65a54b1..000000000000\n--- a/tests/performance/column_column_comparison.xml\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-<test>\n-    <tags>\n-        <tag>comparison</tag>\n-    </tags>\n-\n-    <preconditions>\n-        <table_exists>hits_100m_single</table_exists>\n-    </preconditions>\n-\n-\n-    <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE URL < URL]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE URL < PageCharset]]></query>\n-    <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE SearchPhrase < SearchPhrase SETTINGS max_threads = 2]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE SearchPhrase < URL]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE SearchPhrase < PageCharset SETTINGS max_threads = 2]]></query>\n-    <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < SearchPhrase SETTINGS max_threads = 2]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < URL]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < PageCharset SETTINGS max_threads = 2]]></query>\n-    <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < MobilePhoneModel SETTINGS max_threads = 1]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < URL]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < PageCharset SETTINGS max_threads = 2]]></query>\n-    <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < MobilePhoneModel SETTINGS max_threads = 1]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < URL]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < PageCharset SETTINGS max_threads = 2]]></query>\n-    <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE PageCharset < PageCharset SETTINGS max_threads = 2]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE PageCharset < URL]]></query>\n-    <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE Title < Title]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE Title < URL]]></query>\n-    <query><![CDATA[SELECT count() FROM hits_100m_single WHERE Title < PageCharset]]></query>\n-\n-</test>\ndiff --git a/tests/queries/0_stateless/00911_tautological_compare.reference b/tests/queries/0_stateless/00911_tautological_compare.reference\nindex 405d33487754..e69de29bb2d1 100644\n--- a/tests/queries/0_stateless/00911_tautological_compare.reference\n+++ b/tests/queries/0_stateless/00911_tautological_compare.reference\n@@ -1,8 +0,0 @@\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\ndiff --git a/tests/queries/0_stateless/00911_tautological_compare.sql b/tests/queries/0_stateless/00911_tautological_compare.sql\nindex 34c95d737164..bcbbbeb514bc 100644\n--- a/tests/queries/0_stateless/00911_tautological_compare.sql\n+++ b/tests/queries/0_stateless/00911_tautological_compare.sql\n@@ -1,10 +1,49 @@\n-SELECT count() FROM system.numbers WHERE number != number;\n-SELECT count() FROM system.numbers WHERE number < number;\n-SELECT count() FROM system.numbers WHERE number > number;\n+-- TODO: Tautological optimization breaks JIT expression compilation, because it can return constant result\n+-- for non constant columns. And then sample blocks from same ActionsDAGs can be mismatched.\n+-- This optimization cannot be performed on AST rewrite level, because we does not have information about types\n+-- and equals(tuple(NULL), tuple(NULL)) have same hash code, but should not be optimized.\n+-- Return this test after refactoring of InterpreterSelectQuery.\n \n-SELECT count() FROM system.numbers WHERE NOT (number = number);\n-SELECT count() FROM system.numbers WHERE NOT (number <= number);\n-SELECT count() FROM system.numbers WHERE NOT (number >= number);\n+-- SELECT count() FROM system.numbers WHERE number != number;\n+-- SELECT count() FROM system.numbers WHERE number < number;\n+-- SELECT count() FROM system.numbers WHERE number > number;\n \n-SELECT count() FROM system.numbers WHERE SHA256(toString(number)) != SHA256(toString(number));\n-SELECT count() FROM system.numbers WHERE SHA256(toString(number)) != SHA256(toString(number)) AND rand() > 10;\n+-- SELECT count() FROM system.numbers WHERE NOT (number = number);\n+-- SELECT count() FROM system.numbers WHERE NOT (number <= number);\n+-- SELECT count() FROM system.numbers WHERE NOT (number >= number);\n+\n+-- SELECT count() FROM system.numbers WHERE SHA256(toString(number)) != SHA256(toString(number));\n+-- SELECT count() FROM system.numbers WHERE SHA256(toString(number)) != SHA256(toString(number)) AND rand() > 10;\n+\n+-- column_column_comparison.xml\n+-- <test>\n+--     <tags>\n+--         <tag>comparison</tag>\n+--     </tags>\n+\n+--     <preconditions>\n+--         <table_exists>hits_100m_single</table_exists>\n+--     </preconditions>\n+\n+\n+--     <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE URL < URL]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE URL < PageCharset]]></query>\n+--     <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE SearchPhrase < SearchPhrase SETTINGS max_threads = 2]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE SearchPhrase < URL]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE SearchPhrase < PageCharset SETTINGS max_threads = 2]]></query>\n+--     <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < SearchPhrase SETTINGS max_threads = 2]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < URL]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(SearchPhrase) AND SearchPhrase < PageCharset SETTINGS max_threads = 2]]></query>\n+--     <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < MobilePhoneModel SETTINGS max_threads = 1]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < URL]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE MobilePhoneModel < PageCharset SETTINGS max_threads = 2]]></query>\n+--     <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < MobilePhoneModel SETTINGS max_threads = 1]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < URL]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE notEmpty(MobilePhoneModel) AND MobilePhoneModel < PageCharset SETTINGS max_threads = 2]]></query>\n+--     <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE PageCharset < PageCharset SETTINGS max_threads = 2]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE PageCharset < URL]]></query>\n+--     <query short=\"1\"><![CDATA[SELECT count() FROM hits_100m_single WHERE Title < Title]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE Title < URL]]></query>\n+--     <query><![CDATA[SELECT count() FROM hits_100m_single WHERE Title < PageCharset]]></query>\n+\n+-- </test>\ndiff --git a/tests/queries/0_stateless/01855_jit_comparison_constant_result.reference b/tests/queries/0_stateless/01855_jit_comparison_constant_result.reference\nindex a9e2f17562ae..e97edac16d69 100644\n--- a/tests/queries/0_stateless/01855_jit_comparison_constant_result.reference\n+++ b/tests/queries/0_stateless/01855_jit_comparison_constant_result.reference\n@@ -1,3 +1,11 @@\n+ComparisionOperator column with same column\n+1\n+1\n+1\n+1\n+1\n+1\n+ComparisionOperator column with alias on same column\n 1\n 1\n 1\ndiff --git a/tests/queries/0_stateless/01855_jit_comparison_constant_result.sql b/tests/queries/0_stateless/01855_jit_comparison_constant_result.sql\nindex b8d06e218e08..51cf9aa1d174 100644\n--- a/tests/queries/0_stateless/01855_jit_comparison_constant_result.sql\n+++ b/tests/queries/0_stateless/01855_jit_comparison_constant_result.sql\n@@ -1,6 +1,8 @@\n SET compile_expressions = 1;\n SET min_count_to_compile_expression = 0;\n \n+SELECT 'ComparisionOperator column with same column';\n+\n DROP TABLE IF EXISTS test_table;\n CREATE TABLE test_table (a UInt64) ENGINE = MergeTree() ORDER BY tuple();\n INSERT INTO test_table VALUES (1);\n@@ -13,3 +15,22 @@ SELECT test_table.a FROM test_table ORDER BY (test_table.a <= test_table.a) + 1;\n \n SELECT test_table.a FROM test_table ORDER BY (test_table.a == test_table.a) + 1;\n SELECT test_table.a FROM test_table ORDER BY (test_table.a != test_table.a) + 1;\n+\n+DROP TABLE test_table;\n+\n+SELECT 'ComparisionOperator column with alias on same column';\n+\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table (a UInt64, b ALIAS a, c ALIAS b) ENGINE = MergeTree() ORDER BY tuple();\n+INSERT INTO test_table VALUES (1);\n+\n+SELECT test_table.a FROM test_table ORDER BY (test_table.a > test_table.b) + 1 AND (test_table.a > test_table.c) + 1;\n+SELECT test_table.a FROM test_table ORDER BY (test_table.a >= test_table.b) + 1 AND (test_table.a >= test_table.c) + 1;\n+\n+SELECT test_table.a FROM test_table ORDER BY (test_table.a < test_table.b) + 1 AND (test_table.a < test_table.c) + 1;\n+SELECT test_table.a FROM test_table ORDER BY (test_table.a <= test_table.b) + 1 AND (test_table.a <= test_table.c) + 1;\n+\n+SELECT test_table.a FROM test_table ORDER BY (test_table.a == test_table.b) + 1 AND (test_table.a == test_table.c) + 1;\n+SELECT test_table.a FROM test_table ORDER BY (test_table.a != test_table.b) + 1 AND (test_table.a != test_table.c) + 1;\n+\n+DROP TABLE test_table;\n",
  "problem_statement": " Cannot convert column `less(c0, c1)` because it is non constant in source stream but must be constant in result\n``` sql\r\nCREATE TABLE IF NOT EXISTS t0 (c0 Int32, c1  ALIAS c0) ENGINE = Memory() ;\r\nINSERT INTO t0(c0) VALUES (-341725483);\r\nINSERT INTO t0(c0) VALUES (-781504249), (-1079304144);\r\nINSERT INTO t0(c0) VALUES (-1959608342), (1263536992), (1194580216);\r\nINSERT INTO t0(c0) VALUES (-1639118561), (436683656), (275548633);\r\nINSERT INTO t0(c0) VALUES (-871574473), (-397603882);\r\nINSERT INTO t0(c0) VALUES (-1307576992), (-2034446574);\r\nINSERT INTO t0(c0) VALUES (-1717404319), (-2004827833);\r\nINSERT INTO t0(c0) VALUES (-1604878293), (172290479), (-1808153737);\r\nINSERT INTO t0(c0) VALUES (-1808153737);\r\nINSERT INTO t0(c0) VALUES (1196759186);\r\nINSERT INTO t0(c0) VALUES (-1748576439);\r\nINSERT INTO t0(c0) VALUES (2051389761), (1204228597);\r\nINSERT INTO t0(c0) VALUES (1651756927), (681110175);\r\nINSERT INTO t0(c0) VALUES (-1156920855);\r\nINSERT INTO t0(c0) VALUES (-772388572), (-537624259), (-370697325);\r\nINSERT INTO t0(c0) VALUES (2022909935);\r\nINSERT INTO t0(c0) VALUES (713759928), (1172984613);\r\nINSERT INTO t0(c0) VALUES (1739371629), (-111374952);\r\nINSERT INTO t0(c0) VALUES (139603219), (-2131108571);\r\nINSERT INTO t0(c0) VALUES (-1549239644), (784065114), (420077195);\r\nINSERT INTO t0(c0) VALUES (-1843334206), (-6457985);\r\nINSERT INTO t0(c0) VALUES (-638819909), (-1909459444), (-943510506);\r\nINSERT INTO t0(c0) VALUES (1894781567), (-1985859792), (-476468556);\r\nINSERT INTO t0(c0) VALUES (-618823782), (460423584);\r\nINSERT INTO t0(c0) VALUES (-940596656);\r\nINSERT INTO t0(c0) VALUES (-857101409), (-397603882);\r\nINSERT INTO t0(c0) VALUES (-428805410), (2051389761);\r\nINSERT INTO t0(c0) VALUES (297657448);\r\nINSERT INTO t0(c0) VALUES (-163039758);\r\nSELECT MIN(((t0.c0)<(t0.c1))) FROM t0 SETTINGS aggregate_functions_null_for_empty = 1 FORMAT TabSeparatedWithNamesAndTypes;\r\n```\r\n\r\n```\r\n2021.05.11 14:34:57.075596 [ 200 ] {c0304913-59cb-4210-8f3e-7f22acec69c4} <Error> DynamicQueryHandler: Code: 44, e.displayText() = DB::Exception: Cannot convert column `less(c0, c1)` because it is non constant in source stream but must be constant in result, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/exception:133: std::exception::capture() @ 0x120b19c8 in /usr/bin/clickhouse\r\n1. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/exception:111: std::exception::exception() @ 0x120b1995 in /usr/bin/clickhouse\r\n2. ./obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x214f78c3 in /usr/bin/clickhouse\r\n3. ./obj-x86_64-linux-gnu/../src/Common/Exception.cpp:55: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x12092150 in /usr/bin/clickhouse\r\n4. ./obj-x86_64-linux-gnu/../src/Interpreters/ActionsDAG.cpp:819: DB::ActionsDAG::makeConvertingActions(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, DB::ActionsDAG::MatchColumnsMode, bool, bool, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >*) @ 0x1c0d120a in /usr/bin/clickhouse\r\n5. ./obj-x86_64-linux-gnu/../src/Processors/QueryPlan/ExpressionStep.cpp:66: DB::ExpressionStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&) @ 0x1db7d464 in /usr/bin/clickhouse\r\n6. ./obj-x86_64-linux-gnu/../src/Processors/QueryPlan/ITransformingStep.cpp:44: DB::ITransformingStep::updatePipeline(std::__1::vector<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> >, std::__1::allocator<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> > > >, DB::BuildQueryPipelineSettings const&) @ 0x1db8e23f in /usr/bin/clickhouse\r\n7. ./obj-x86_64-linux-gnu/../src/Processors/QueryPlan/QueryPlan.cpp:168: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x1dbb50c6 in /usr/bin/clickhouse\r\n8. ./obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:313: DB::InterpreterSelectWithUnionQuery::execute() @ 0x1c9a36e5 in /usr/bin/clickhouse\r\n9. ./obj-x86_64-linux-gnu/../src/Interpreters/executeQuery.cpp:561: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) @ 0x1cc00559 in /usr/bin/clickhouse\r\n10. ./obj-x86_64-linux-gnu/../src/Interpreters/executeQuery.cpp:997: DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0x1cc02a2b in /usr/bin/clickhouse\r\n11. ./obj-x86_64-linux-gnu/../src/Server/HTTPHandler.cpp:772: DB::HTTPHandler::processQuery(std::__1::shared_ptr<DB::Context>, DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::__1::optional<DB::CurrentThread::QueryScope>&) @ 0x1d655089 in /usr/bin/clickhouse\r\n12. ./obj-x86_64-linux-gnu/../src/Server/HTTPHandler.cpp:911: DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x1d656d1f in /usr/bin/clickhouse\r\n13. ./obj-x86_64-linux-gnu/../src/Server/HTTP/HTTPServerConnection.cpp:48: DB::HTTPServerConnection::run() @ 0x1d6fffc2 in /usr/bin/clickhouse\r\n14. ./obj-x86_64-linux-gnu/../contrib/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x21428f5c in /usr/bin/clickhouse\r\n15. ./obj-x86_64-linux-gnu/../contrib/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x214297e4 in /usr/bin/clickhouse\r\n16. ./obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/ThreadPool.cpp:199: Poco::PooledThread::run() @ 0x21584ac3 in /usr/bin/clickhouse\r\n17. ./obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Thread.cpp:56: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x2158137d in /usr/bin/clickhouse\r\n18. ./obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Thread_POSIX.cpp:345: Poco::ThreadImpl::runnableEntry(void*) @ 0x21580108 in /usr/bin/clickhouse\r\n19. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n20. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n (version 21.6.1.6804)\r\n```\r\nFound by SQLancer https://clickhouse-test-reports.s3.yandex.net/20393/6aa7c0fafcca9c1493e6923ef68592ab68b286da/sqlancer_test.html#fail1\n",
  "hints_text": "Same here https://clickhouse-test-reports.s3.yandex.net/24017/591abbadede68ef5eda4d0153332983954c69edf/sqlancer_test.html#fail1",
  "created_at": "2021-05-11T19:02:42Z"
}