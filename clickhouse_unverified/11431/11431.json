{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11431,
  "instance_id": "ClickHouse__ClickHouse-11431",
  "issue_numbers": [
    "11365"
  ],
  "base_commit": "dad84af70fe90c6254955c5c8d343bf1ff83bdea",
  "patch": "diff --git a/src/Compression/CompressionCodecDelta.cpp b/src/Compression/CompressionCodecDelta.cpp\nindex 2369e2ca2327..6c7cf92a41df 100644\n--- a/src/Compression/CompressionCodecDelta.cpp\n+++ b/src/Compression/CompressionCodecDelta.cpp\n@@ -166,6 +166,9 @@ void registerCodecDelta(CompressionCodecFactory & factory)\n \n             const auto children = arguments->children;\n             const auto * literal = children[0]->as<ASTLiteral>();\n+            if (!literal)\n+                throw Exception(\"Delta codec argument must be integer\", ErrorCodes::ILLEGAL_CODEC_PARAMETER);\n+\n             size_t user_bytes_size = literal->value.safeGet<UInt64>();\n             if (user_bytes_size != 1 && user_bytes_size != 2 && user_bytes_size != 4 && user_bytes_size != 8)\n                 throw Exception(\"Delta value for delta codec can be 1, 2, 4 or 8, given \" + toString(user_bytes_size), ErrorCodes::ILLEGAL_CODEC_PARAMETER);\ndiff --git a/src/Compression/CompressionCodecLZ4.cpp b/src/Compression/CompressionCodecLZ4.cpp\nindex cf8f8e976ea6..32c3958e65e2 100644\n--- a/src/Compression/CompressionCodecLZ4.cpp\n+++ b/src/Compression/CompressionCodecLZ4.cpp\n@@ -19,6 +19,7 @@ namespace ErrorCodes\n {\n extern const int CANNOT_COMPRESS;\n extern const int ILLEGAL_SYNTAX_FOR_CODEC_TYPE;\n+extern const int ILLEGAL_CODEC_PARAMETER;\n }\n \n \n@@ -84,6 +85,9 @@ void registerCodecLZ4HC(CompressionCodecFactory & factory)\n \n             const auto children = arguments->children;\n             const auto * literal = children[0]->as<ASTLiteral>();\n+            if (!literal)\n+                throw Exception(\"LZ4HC codec argument must be integer\", ErrorCodes::ILLEGAL_CODEC_PARAMETER);\n+\n             level = literal->value.safeGet<UInt64>();\n         }\n \ndiff --git a/src/Compression/CompressionCodecZSTD.cpp b/src/Compression/CompressionCodecZSTD.cpp\nindex a9dc5de59ade..f1030d87dddb 100644\n--- a/src/Compression/CompressionCodecZSTD.cpp\n+++ b/src/Compression/CompressionCodecZSTD.cpp\n@@ -74,6 +74,9 @@ void registerCodecZSTD(CompressionCodecFactory & factory)\n \n             const auto children = arguments->children;\n             const auto * literal = children[0]->as<ASTLiteral>();\n+            if (!literal)\n+                throw Exception(\"ZSTD codec argument must be integer\", ErrorCodes::ILLEGAL_CODEC_PARAMETER);\n+\n             level = literal->value.safeGet<UInt64>();\n             if (level > ZSTD_maxCLevel())\n                 throw Exception(\"ZSTD codec can't have level more that \" + toString(ZSTD_maxCLevel()) + \", given \" + toString(level), ErrorCodes::ILLEGAL_CODEC_PARAMETER);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01296_codecs_bad_arguments.reference b/tests/queries/0_stateless/01296_codecs_bad_arguments.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01296_codecs_bad_arguments.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01296_codecs_bad_arguments.sql b/tests/queries/0_stateless/01296_codecs_bad_arguments.sql\nnew file mode 100644\nindex 000000000000..d7eb53300ecd\n--- /dev/null\n+++ b/tests/queries/0_stateless/01296_codecs_bad_arguments.sql\n@@ -0,0 +1,15 @@\n+DROP TABLE IF EXISTS delta_table;\n+DROP TABLE IF EXISTS zstd_table;\n+DROP TABLE IF EXISTS lz4_table;\n+\n+CREATE TABLE delta_table (`id` UInt64 CODEC(Delta(tuple()))) ENGINE = MergeTree() ORDER BY tuple(); --{serverError 433}\n+CREATE TABLE zstd_table (`id` UInt64 CODEC(ZSTD(tuple()))) ENGINE = MergeTree() ORDER BY tuple(); --{serverError 433}\n+CREATE TABLE lz4_table (`id` UInt64 CODEC(LZ4HC(tuple()))) ENGINE = MergeTree() ORDER BY tuple(); --{serverError 433}\n+\n+CREATE TABLE lz4_table (`id` UInt64 CODEC(LZ4(tuple()))) ENGINE = MergeTree() ORDER BY tuple(); --{serverError 378}\n+\n+SELECT 1;\n+\n+DROP TABLE IF EXISTS delta_table;\n+DROP TABLE IF EXISTS zstd_table;\n+DROP TABLE IF EXISTS lz4_table;\n",
  "problem_statement": "segfault on wrong codec spec\n```\r\nCREATE TABLE delta_codec_synthetic (`id` UInt64 CODEC(Delta, ZSTD(tuple()))) ENGINE = MergeTree() ORDER BY tuple()\r\n```\n",
  "hints_text": "",
  "created_at": "2020-06-04T08:58:35Z",
  "modified_files": [
    "src/Compression/CompressionCodecDelta.cpp",
    "src/Compression/CompressionCodecLZ4.cpp",
    "src/Compression/CompressionCodecZSTD.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01296_codecs_bad_arguments.reference",
    "b/tests/queries/0_stateless/01296_codecs_bad_arguments.sql"
  ]
}