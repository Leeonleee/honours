{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17480,
  "instance_id": "ClickHouse__ClickHouse-17480",
  "issue_numbers": [
    "17294"
  ],
  "base_commit": "d99ad3499d41322bc81cac7134ca39c3aa33cb7c",
  "patch": "diff --git a/src/Processors/QueryPlan/DistinctStep.cpp b/src/Processors/QueryPlan/DistinctStep.cpp\nindex 8c7195e36b7b..60966b08beb1 100644\n--- a/src/Processors/QueryPlan/DistinctStep.cpp\n+++ b/src/Processors/QueryPlan/DistinctStep.cpp\n@@ -8,12 +8,16 @@ namespace DB\n \n static bool checkColumnsAlreadyDistinct(const Names & columns, const NameSet & distinct_names)\n {\n-    bool columns_already_distinct = true;\n-    for (const auto & name : columns)\n-        if (distinct_names.count(name) == 0)\n-            columns_already_distinct = false;\n+    if (distinct_names.empty())\n+        return false;\n \n-    return columns_already_distinct;\n+    /// Now we need to check that distinct_names is a subset of columns.\n+    std::unordered_set<std::string_view> columns_set(columns.begin(), columns.end());\n+    for (const auto & name : distinct_names)\n+        if (columns_set.count(name) == 0)\n+            return false;\n+\n+    return true;\n }\n \n static ITransformingStep::Traits getTraits(bool pre_distinct, bool already_distinct_columns)\ndiff --git a/src/Processors/QueryPlan/ExpressionStep.cpp b/src/Processors/QueryPlan/ExpressionStep.cpp\nindex c42bbc5b9665..6f4725cefc4a 100644\n--- a/src/Processors/QueryPlan/ExpressionStep.cpp\n+++ b/src/Processors/QueryPlan/ExpressionStep.cpp\n@@ -93,7 +93,6 @@ InflatingExpressionStep::InflatingExpressionStep(const DataStream & input_stream\n         getTraits(expression_))\n     , expression(std::move(expression_))\n {\n-    updateDistinctColumns(output_stream->header, output_stream->distinct_columns);\n }\n \n void InflatingExpressionStep::transformPipeline(QueryPipeline & pipeline)\ndiff --git a/src/Processors/QueryPlan/ITransformingStep.cpp b/src/Processors/QueryPlan/ITransformingStep.cpp\nindex 7ae2dd4284f1..cb27bf382787 100644\n--- a/src/Processors/QueryPlan/ITransformingStep.cpp\n+++ b/src/Processors/QueryPlan/ITransformingStep.cpp\n@@ -55,9 +55,9 @@ void ITransformingStep::updateDistinctColumns(const Block & res_header, NameSet\n     if (distinct_columns.empty())\n         return;\n \n-    for (const auto & column : res_header)\n+    for (const auto & column : distinct_columns)\n     {\n-        if (distinct_columns.count(column.name) == 0)\n+        if (!res_header.has(column))\n         {\n             distinct_columns.clear();\n             break;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01582_distinct_optimization.reference b/tests/queries/0_stateless/01582_distinct_optimization.reference\nnew file mode 100644\nindex 000000000000..4763dc095d65\n--- /dev/null\n+++ b/tests/queries/0_stateless/01582_distinct_optimization.reference\n@@ -0,0 +1,4 @@\n+----\n+DistinctTransform\n+DistinctTransform\n+----\ndiff --git a/tests/queries/0_stateless/01582_distinct_optimization.sh b/tests/queries/0_stateless/01582_distinct_optimization.sh\nnew file mode 100755\nindex 000000000000..f1ca484befbb\n--- /dev/null\n+++ b/tests/queries/0_stateless/01582_distinct_optimization.sh\n@@ -0,0 +1,12 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+\n+$CLICKHOUSE_CLIENT --query=\"CREATE TABLE test_local (a String, b Int) Engine=TinyLog\"\n+$CLICKHOUSE_CLIENT --query=\"INSERT INTO test_local VALUES('a', 0), ('a', 1), ('b', 0)\"\n+echo \"----\"\n+$CLICKHOUSE_CLIENT --query=\"EXPLAIN PIPELINE SELECT DISTINCT b FROM (SELECT b FROM remote('127.0.0.{1,2}', currentDatabase(), test_local) GROUP BY a, b)\" | grep -o \"DistinctTransform\" || true\n+echo \"----\"\n+$CLICKHOUSE_CLIENT --query=\"EXPLAIN PIPELINE SELECT DISTINCT a, b, b + 1 FROM (SELECT a, b FROM remote('127.0.0.{1,2}', currentDatabase(), test_local) GROUP BY a, b)\" | grep -o \"DistinctTransform\" || true\ndiff --git a/tests/queries/0_stateless/01582_distinct_subquery_groupby.reference b/tests/queries/0_stateless/01582_distinct_subquery_groupby.reference\nnew file mode 100644\nindex 000000000000..69d09141fb30\n--- /dev/null\n+++ b/tests/queries/0_stateless/01582_distinct_subquery_groupby.reference\n@@ -0,0 +1,9 @@\n+a\t0\n+a\t1\n+b\t0\n+---\n+0\n+1\n+---\n+0\n+1\ndiff --git a/tests/queries/0_stateless/01582_distinct_subquery_groupby.sql b/tests/queries/0_stateless/01582_distinct_subquery_groupby.sql\nnew file mode 100644\nindex 000000000000..7251dc4286b1\n--- /dev/null\n+++ b/tests/queries/0_stateless/01582_distinct_subquery_groupby.sql\n@@ -0,0 +1,18 @@\n+DROP TABLE IF EXISTS t;\n+DROP TABLE IF EXISTS d;\n+\n+CREATE TABLE t (a String, b Int) ENGINE = TinyLog;\n+INSERT INTO t VALUES ('a', 0), ('a', 1), ('b', 0);\n+SELECT * FROM t;\n+\n+SELECT '---';\n+CREATE TABLE d (a String, b Int) ENGINE = Distributed(test_shard_localhost, currentDatabase(), t);\n+SELECT DISTINCT b FROM (SELECT a, b FROM d GROUP BY a, b) order by b;\n+DROP TABLE d;\n+\n+SELECT '---';\n+CREATE TABLE d (a String, b Int) ENGINE = Distributed(test_cluster_two_shards_localhost, currentDatabase(), t);\n+SELECT DISTINCT b FROM (SELECT a, b FROM d GROUP BY a, b) order by b;\n+DROP TABLE d;\n+\n+DROP TABLE t;\n",
  "problem_statement": "Distinct on subquery with group by may return duplicate result\n**Describe the bug**\r\nClickHouse version: 20.8.2.3\r\n`SELECT DISTINCT b FROM (SELECT a, b FROM d GROUP BY a, b)` may return duplicate result, here is the step to reproduce:\r\n\r\n```sql\r\nCREATE TABLE test_local ON CLUSTER xxx (a String, b Int) Engine=TinyLog;\r\nCREATE TABLE test ON CLUSTER xxx (a String, b Int) Engine = Distributed('xxx', 'default', 'test_local', b);\r\nINSERT INTO test VALUES('a', 0), ('a', 1), ('b', 0)\r\nSELECT DISTINCT b FROM (SELECT b FROM test GROUP BY a, b)\r\n```\r\nExpected result:\r\n0\r\n1\r\nActual result:\r\n0\r\n0\r\n1\r\n\r\n**Possible reason:**\r\n\r\n`DistinctStep::checkColumnsAlreadyDistinct` return true while `b` exists in its front inputstream's `distinct_columns`(which is `a` and `b` in previous SQL), so `DistinctStep` is skipped in the final execution pipeline. As the comment of  `DataStream::distinct_columns` says: \"Tuples with those columns are distinct. It doesn't mean that columns are distinct separately.\", `DistinctStep::checkColumnsAlreadyDistinct` may return wrong result.\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2020-11-27T11:38:09Z"
}