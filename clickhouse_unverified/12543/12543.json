{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12543,
  "instance_id": "ClickHouse__ClickHouse-12543",
  "issue_numbers": [
    "12536"
  ],
  "base_commit": "ff372ec0f0535975a6086f783cf0bb6f5f5fb63d",
  "patch": "diff --git a/src/Storages/MergeTree/MergedBlockOutputStream.cpp b/src/Storages/MergeTree/MergedBlockOutputStream.cpp\nindex 9f5316be7518..a09fb6b86bfd 100644\n--- a/src/Storages/MergeTree/MergedBlockOutputStream.cpp\n+++ b/src/Storages/MergeTree/MergedBlockOutputStream.cpp\n@@ -46,7 +46,7 @@ MergedBlockOutputStream::MergedBlockOutputStream(\n {\n     MergeTreeWriterSettings writer_settings(\n         storage.global_context.getSettings(),\n-        storage.canUseAdaptiveGranularity(),\n+        data_part->index_granularity_info.is_adaptive,\n         aio_threshold,\n         blocks_are_granules_size);\n \n",
  "test_patch": "diff --git a/tests/integration/test_adaptive_granularity_different_settings/test.py b/tests/integration/test_adaptive_granularity_different_settings/test.py\nindex b066c437e06a..d1ff785cfba7 100644\n--- a/tests/integration/test_adaptive_granularity_different_settings/test.py\n+++ b/tests/integration/test_adaptive_granularity_different_settings/test.py\n@@ -6,6 +6,9 @@\n node1 = cluster.add_instance('node1', with_zookeeper=True)\n node2 = cluster.add_instance('node2', with_zookeeper=True)\n \n+# no adaptive granularity by default\n+node3 = cluster.add_instance('node3', image='yandex/clickhouse-server:19.9.5.36', with_installed_binary=True, stay_alive=True)\n+\n @pytest.fixture(scope=\"module\")\n def start_cluster():\n     try:\n@@ -47,3 +50,29 @@ def test_attach_detach(start_cluster):\n \n     assert node1.query(\"SELECT COUNT() FROM  test\") == \"4\\n\"\n     assert node2.query(\"SELECT COUNT() FROM  test\") == \"4\\n\"\n+\n+\n+def test_mutate_with_mixed_granularity(start_cluster):\n+    node3.query(\"\"\"\n+        CREATE TABLE test (date Date, key UInt64, value1 String, value2 String)\n+        ENGINE = MergeTree\n+        ORDER BY key PARTITION BY date\"\"\")\n+\n+    node3.query(\"INSERT INTO test SELECT toDate('2019-10-01') + number % 5, number, toString(number), toString(number * number) FROM numbers(500)\")\n+\n+    assert node3.query(\"SELECT COUNT() FROM test\") == \"500\\n\"\n+\n+    node3.restart_with_latest_version()\n+\n+    assert node3.query(\"SELECT COUNT() FROM test\") == \"500\\n\"\n+\n+    node3.query(\"ALTER TABLE test MODIFY SETTING enable_mixed_granularity_parts = 1\")\n+\n+    node3.query(\"INSERT INTO test SELECT toDate('2019-10-01') + number % 5, number, toString(number), toString(number * number) FROM numbers(500, 500)\")\n+\n+    assert node3.query(\"SELECT COUNT() FROM test\") == \"1000\\n\"\n+    assert node3.query(\"SELECT COUNT() FROM test WHERE key % 100 == 0\") == \"10\\n\"\n+\n+    node3.query(\"ALTER TABLE test DELETE WHERE key % 100 == 0\", settings={\"mutations_sync\": \"2\"})\n+\n+    assert node3.query(\"SELECT COUNT() FROM test WHERE key % 100 == 0\") == \"0\\n\"\n",
  "problem_statement": "enable_mixed_granularity_parts + delete mutation lead to broken parts\n**Describe the bug**\r\nImagine that we have a table with old non-adaptive parts (.mrk extension) and enabled mixed granularity in the server's config in section (`<enable_mixed_granularity_parts>1<enable_mixed_granularity_parts>`) or using `ALTER SETTING` query. \r\nIn this case, when we execute `ALTER DELETE` mutation (actually use `MergedBlockOutputStream`) we will take information about index granularity from our source part https://github.com/ClickHouse/ClickHouse/blob/master/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp#L1066-L1067, and mark file extension will be the same as in source part https://github.com/ClickHouse/ClickHouse/blob/master/src/Storages/MergeTree/MergeTreeDataPartWide.cpp#L65 `.mrk` for the old part. But on the other hand, in the stream settings, we will write index granularity using information from storage https://github.com/ClickHouse/ClickHouse/blob/master/src/Storages/MergeTree/MergedBlockOutputStream.cpp#L49 which will be set to `true`. So we will get part with `.mrk` extension and adaptive granularity which server will not be able to read and mark as broken.\r\n\r\nBroken since #8290.\n",
  "hints_text": "Maybe as a workaround we can autodetect mark format from the file size?",
  "created_at": "2020-07-16T09:11:54Z"
}