{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48500,
  "instance_id": "ClickHouse__ClickHouse-48500",
  "issue_numbers": [
    "48473"
  ],
  "base_commit": "4ab8b35b008abdd811e729762f2908ad4cd5dbaf",
  "patch": "diff --git a/src/Interpreters/Cache/QueryCache.cpp b/src/Interpreters/Cache/QueryCache.cpp\nindex ba5388847f5a..fede871aba34 100644\n--- a/src/Interpreters/Cache/QueryCache.cpp\n+++ b/src/Interpreters/Cache/QueryCache.cpp\n@@ -242,8 +242,9 @@ void QueryCache::Writer::finalizeWrite()\n         Chunks squashed_chunks;\n         size_t rows_remaining_in_squashed = 0; /// how many further rows can the last squashed chunk consume until it reaches max_block_size\n \n-        for (const auto & chunk : *query_result)\n+        for (auto & chunk : *query_result)\n         {\n+            convertToFullIfSparse(chunk);\n             const size_t rows_chunk = chunk.getNumRows();\n             size_t rows_chunk_processed = 0;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02708_query_cache_sparse_columns.reference b/tests/queries/0_stateless/02708_query_cache_sparse_columns.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02708_query_cache_sparse_columns.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02708_query_cache_sparse_columns.sql b/tests/queries/0_stateless/02708_query_cache_sparse_columns.sql\nnew file mode 100644\nindex 000000000000..952c32278526\n--- /dev/null\n+++ b/tests/queries/0_stateless/02708_query_cache_sparse_columns.sql\n@@ -0,0 +1,23 @@\n+-- Tags: no-parallel\n+\n+DROP TABLE IF EXISTS t_cache_sparse;\n+SYSTEM DROP QUERY CACHE;\n+\n+CREATE TABLE t_cache_sparse (id UInt64, v UInt64)\n+ENGINE = MergeTree ORDER BY id\n+SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;\n+\n+SYSTEM STOP MERGES t_cache_sparse;\n+\n+INSERT INTO t_cache_sparse SELECT number, number FROM numbers(10000);\n+INSERT INTO t_cache_sparse SELECT number, 0 FROM numbers(10000);\n+\n+SET allow_experimental_query_cache = 1;\n+SET use_query_cache = 1;\n+SET max_threads = 1;\n+\n+SELECT v FROM t_cache_sparse FORMAT Null;\n+SELECT v FROM t_cache_sparse FORMAT Null;\n+SELECT count() FROM system.query_cache WHERE query LIKE 'SELECT v FROM t_cache_sparse%';\n+\n+DROP TABLE t_cache_sparse;\n",
  "problem_statement": "Bad cast from type DB::ColumnSparse to DB::ColumnVector<int>\nStress Test (debug):\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/47104/554c9285347b80663a494aae25c8b7181c5ae1a5/stress_test__debug_.html\r\n\r\n<details>\r\n<summary> Trace </summary>\r\n\r\n```\r\n2023.04.06 06:00:40.577174 [ 7748 ] {3cef0038-870c-417a-bbe5-bba614dbd65c} <Fatal> : Logical error: 'Bad cast from type DB::ColumnSparse to DB::ColumnVector<int>'.\r\n2023.04.06 06:02:19.740266 [ 17336 ] {} <Fatal> BaseDaemon: ########################################\r\n2023.04.06 06:02:19.743196 [ 17336 ] {} <Fatal> BaseDaemon: (version 23.4.1.1, build id: 898F37FEC7E0701EFD3E2D0BE6B5C41F511808BC) (from thread 7748) (query_id: 3cef0038-870c-417a-bbe5-bba614dbd65c) (query: select * from rmt1;) Received signal Aborted (6)\r\n2023.04.06 06:02:19.743528 [ 17336 ] {} <Fatal> BaseDaemon: \r\n2023.04.06 06:02:19.743747 [ 17336 ] {} <Fatal> BaseDaemon: Stack trace: 0x7efc20cd200b 0x7efc20cb1859 0x2220f0d6 0x2220f155 0x2220f55f 0x1978178a 0x19784f0c 0x20e0ffc1 0x2b50ab0f 0x2c665854 0x2b26ee86 0x2cb9cd58 0x2974efd8 0x2b1f8339 0x2b1f815d 0x2b1f811d 0x2b1f80dd 0x2b1f80a8 0x2972b3fe 0x2972addd 0x2972a964 0x2c616b1c 0x2c60e9ab 0x2c620185 0x31ac06d9 0x31ac0f1c 0x31d11534 0x31d0e2da 0x31d0cfde 0x7efc20e89609 0x7efc20dae133\r\n2023.04.06 06:02:19.743979 [ 17336 ] {} <Fatal> BaseDaemon: 4. gsignal @ 0x7efc20cd200b in ?\r\n2023.04.06 06:02:19.744113 [ 17336 ] {} <Fatal> BaseDaemon: 5. abort @ 0x7efc20cb1859 in ?\r\n2023.04.06 06:02:20.124542 [ 17336 ] {} <Fatal> BaseDaemon: 6. /build/src/Common/Exception.cpp:41: DB::abortOnFailedAssertion(String const&) @ 0x2220f0d6 in /usr/bin/clickhouse\r\n2023.04.06 06:02:20.236755 [ 17336 ] {} <Fatal> BaseDaemon: 7. /build/src/Common/Exception.cpp:64: DB::handle_error_code(String const&, int, bool, std::vector<void*, std::allocator<void*>> const&) @ 0x2220f155 in /usr/bin/clickhouse\r\n2023.04.06 06:02:20.336276 [ 17336 ] {} <Fatal> BaseDaemon: 8. /build/src/Common/Exception.cpp:92: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x2220f55f in /usr/bin/clickhouse\r\n2023.04.06 06:02:20.480903 [ 17336 ] {} <Fatal> BaseDaemon: 9. /build/src/Common/Exception.h:55: DB::Exception::Exception(String&&, int, bool) @ 0x1978178a in /usr/bin/clickhouse\r\n2023.04.06 06:02:20.612134 [ 17336 ] {} <Fatal> BaseDaemon: 10. /build/src/Common/Exception.h:82: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x19784f0c in /usr/bin/clickhouse\r\n2023.04.06 06:02:20.801027 [ 17336 ] {} <Fatal> BaseDaemon: 11. /build/src/Common/assert_cast.h:47: DB::ColumnVector<int> const& assert_cast<DB::ColumnVector<int> const&, DB::IColumn const&>(DB::IColumn const&) @ 0x20e0ffc1 in /usr/bin/clickhouse\r\n2023.04.06 06:02:21.800866 [ 17336 ] {} <Fatal> BaseDaemon: 12. /build/src/Columns/ColumnVector.cpp:466: DB::ColumnVector<int>::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x2b50ab0f in /usr/bin/clickhouse\r\n2023.04.06 06:02:22.004686 [ 17336 ] {} <Fatal> BaseDaemon: 13. /build/src/Processors/Chunk.cpp:183: DB::Chunk::append(DB::Chunk const&, unsigned long, unsigned long) @ 0x2c665854 in /usr/bin/clickhouse\r\n2023.04.06 06:02:22.363531 [ 17336 ] {} <Fatal> BaseDaemon: 14. /build/src/Interpreters/Cache/QueryCache.cpp:263: DB::QueryCache::Writer::finalizeWrite() @ 0x2b26ee86 in /usr/bin/clickhouse\r\n2023.04.06 06:02:22.463450 [ 17336 ] {} <Fatal> BaseDaemon: 15. /build/src/Processors/Transforms/StreamInQueryCacheTransform.cpp:27: DB::StreamInQueryCacheTransform::finalizeWriteInQueryCache() @ 0x2cb9cd58 in /usr/bin/clickhouse\r\n2023.04.06 06:02:23.028396 [ 17336 ] {} <Fatal> BaseDaemon: 16. /build/src/QueryPipeline/QueryPipeline.cpp:598: DB::QueryPipeline::finalizeWriteInQueryCache() @ 0x2974efd8 in /usr/bin/clickhouse\r\n2023.04.06 06:02:24.609646 [ 17336 ] {} <Fatal> BaseDaemon: 17. /build/src/Interpreters/executeQuery.cpp:939: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*)::$_3::operator()(DB::QueryPipeline&) @ 0x2b1f8339 in /usr/bin/clickhouse\r\n2023.04.06 06:02:25.066612 [ 17336 ] {} <Fatal> BaseDaemon: 18. /build/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: decltype(std::declval<DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*)::$_3&>()(std::declval<DB::QueryPipeline&>())) std::__invoke[abi:v15000]<DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*)::$_3&, DB::QueryPipeline&>(DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*)::$_3&, DB::QueryPipeline&) @ 0x2b1f815d in /usr/bin/clickhouse\r\n2023.04.06 06:02:25.414738 [ 17336 ] {} <Fatal> BaseDaemon: 19. /build/contrib/llvm-project/libcxx/include/__functional/invoke.h:480: void std::__invoke_void_return_wrapper<void, true>::__call<DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*)::$_3&, DB::QueryPipeline&>(DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*)::$_3&, DB::QueryPipeline&) @ 0x2b1f811d in /usr/bin/clickhouse\r\n2023.04.06 06:02:25.752193 [ 17336 ] {} <Fatal> BaseDaemon: 20. /build/contrib/llvm-project/libcxx/include/__functional/function.h:235: std::__function::__default_alloc_func<DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*)::$_3, void (DB::QueryPipeline&)>::operator()[abi:v15000](DB::QueryPipeline&) @ 0x2b1f80dd in /usr/bin/clickhouse\r\n2023.04.06 06:02:26.114573 [ 17336 ] {} <Fatal> BaseDaemon: 21. /build/contrib/llvm-project/libcxx/include/__functional/function.h:716: void std::__function::__policy_invoker<void (DB::QueryPipeline&)>::__call_impl<std::__function::__default_alloc_func<DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*)::$_3, void (DB::QueryPipeline&)>>(std::__function::__policy_storage const*, DB::QueryPipeline&) @ 0x2b1f80a8 in /usr/bin/clickhouse\r\n2023.04.06 06:02:26.169400 [ 17336 ] {} <Fatal> BaseDaemon: 22. /build/contrib/llvm-project/libcxx/include/__functional/function.h:848: std::__function::__policy_func<void (DB::QueryPipeline&)>::operator()[abi:v15000](DB::QueryPipeline&) const @ 0x2972b3fe in /usr/bin/clickhouse\r\n2023.04.06 06:02:26.219882 [ 17336 ] {} <Fatal> BaseDaemon: 23. /build/contrib/llvm-project/libcxx/include/__functional/function.h:1187: std::function<void (DB::QueryPipeline&)>::operator()(DB::QueryPipeline&) const @ 0x2972addd in /usr/bin/clickhouse\r\n2023.04.06 06:02:26.273138 [ 17336 ] {} <Fatal> BaseDaemon: 24. /build/src/QueryPipeline/BlockIO.cpp:0: DB::BlockIO::onFinish() @ 0x2972a964 in /usr/bin/clickhouse\r\n2023.04.06 06:02:26.947654 [ 17336 ] {} <Fatal> BaseDaemon: 25. /build/src/Server/TCPHandler.cpp:431: DB::TCPHandler::runImpl()::$_9::operator()() const @ 0x2c616b1c in /usr/bin/clickhouse\r\n2023.04.06 06:02:27.300954 [ 17336 ] {} <Fatal> BaseDaemon: 26. /build/src/Server/TCPHandler.cpp:443: DB::TCPHandler::runImpl() @ 0x2c60e9ab in /usr/bin/clickhouse\r\n2023.04.06 06:02:27.713892 [ 17336 ] {} <Fatal> BaseDaemon: 27. /build/src/Server/TCPHandler.cpp:2038: DB::TCPHandler::run() @ 0x2c620185 in /usr/bin/clickhouse\r\n2023.04.06 06:02:27.752994 [ 17336 ] {} <Fatal> BaseDaemon: 28. /build/base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x31ac06d9 in /usr/bin/clickhouse\r\n2023.04.06 06:02:27.814469 [ 17336 ] {} <Fatal> BaseDaemon: 29. /build/base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x31ac0f1c in /usr/bin/clickhouse\r\n2023.04.06 06:02:27.882258 [ 17336 ] {} <Fatal> BaseDaemon: 30. /build/base/poco/Foundation/src/ThreadPool.cpp:188: Poco::PooledThread::run() @ 0x31d11534 in /usr/bin/clickhouse\r\n2023.04.06 06:02:27.938938 [ 17336 ] {} <Fatal> BaseDaemon: 31. /build/base/poco/Foundation/src/Thread.cpp:46: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x31d0e2da in /usr/bin/clickhouse\r\n2023.04.06 06:02:27.979173 [ 17336 ] {} <Fatal> BaseDaemon: 32. /build/base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x31d0cfde in /usr/bin/clickhouse\r\n2023.04.06 06:02:27.979515 [ 17336 ] {} <Fatal> BaseDaemon: 33. ? @ 0x7efc20e89609 in ?\r\n2023.04.06 06:02:27.979799 [ 17336 ] {} <Fatal> BaseDaemon: 34. clone @ 0x7efc20dae133 in ?\r\n2023.04.06 06:02:27.980044 [ 17336 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n2023.04.06 06:03:30.538028 [ 1623 ] {} <Fatal> Application: Child process was terminated by signal 6.\r\n```\r\n\r\n</details>\n",
  "hints_text": "",
  "created_at": "2023-04-06T15:59:59Z",
  "modified_files": [
    "src/Interpreters/Cache/QueryCache.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02708_query_cache_sparse_columns.reference",
    "b/tests/queries/0_stateless/02708_query_cache_sparse_columns.sql"
  ]
}