{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 45873,
  "instance_id": "ClickHouse__ClickHouse-45873",
  "issue_numbers": [
    "45808"
  ],
  "base_commit": "79883b5b6a319aaff91aa025128f4c8a97d4af3b",
  "patch": "diff --git a/src/TableFunctions/TableFunctionFormat.cpp b/src/TableFunctions/TableFunctionFormat.cpp\nindex f2a92b41560d..1e37775f574b 100644\n--- a/src/TableFunctions/TableFunctionFormat.cpp\n+++ b/src/TableFunctions/TableFunctionFormat.cpp\n@@ -4,6 +4,7 @@\n \n #include <Interpreters/Context.h>\n #include <Interpreters/evaluateConstantExpression.h>\n+#include <Interpreters/parseColumnsListForTableFunction.h>\n \n #include <Parsers/ASTLiteral.h>\n \n@@ -38,23 +39,29 @@ void TableFunctionFormat::parseArguments(const ASTPtr & ast_function, ContextPtr\n \n     ASTs & args = args_func.at(0)->children;\n \n-    if (args.size() != 2)\n-        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Table function '{}' requires 2 arguments: format and data\", getName());\n+    if (args.size() != 2 && args.size() != 3)\n+        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Table function '{}' requires 2 or 3 arguments: format, [structure], data\", getName());\n \n     for (auto & arg : args)\n         arg = evaluateConstantExpressionOrIdentifierAsLiteral(arg, context);\n \n     format = checkAndGetLiteralArgument<String>(args[0], \"format\");\n-    data = checkAndGetLiteralArgument<String>(args[1], \"data\");\n+    data = checkAndGetLiteralArgument<String>(args.back(), \"data\");\n+    if (args.size() == 3)\n+        structure = checkAndGetLiteralArgument<String>(args[1], \"structure\");\n }\n \n ColumnsDescription TableFunctionFormat::getActualTableStructure(ContextPtr context) const\n {\n-    ReadBufferIterator read_buffer_iterator = [&](ColumnsDescription &)\n+    if (structure == \"auto\")\n     {\n-        return std::make_unique<ReadBufferFromString>(data);\n-    };\n-    return readSchemaFromFormat(format, std::nullopt, read_buffer_iterator, false, context);\n+        ReadBufferIterator read_buffer_iterator = [&](ColumnsDescription &)\n+        {\n+            return std::make_unique<ReadBufferFromString>(data);\n+        };\n+        return readSchemaFromFormat(format, std::nullopt, read_buffer_iterator, false, context);\n+    }\n+    return parseColumnsListFromString(structure, context);\n }\n \n Block TableFunctionFormat::parseData(ColumnsDescription columns, ContextPtr context) const\ndiff --git a/src/TableFunctions/TableFunctionFormat.h b/src/TableFunctions/TableFunctionFormat.h\nindex c6db322343b3..d64ab14cb641 100644\n--- a/src/TableFunctions/TableFunctionFormat.h\n+++ b/src/TableFunctions/TableFunctionFormat.h\n@@ -28,6 +28,7 @@ class TableFunctionFormat : public ITableFunction\n \n     String format;\n     String data;\n+    String structure = \"auto\";\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02542_table_function_format.reference b/tests/queries/0_stateless/02542_table_function_format.reference\nnew file mode 100644\nindex 000000000000..c84889671449\n--- /dev/null\n+++ b/tests/queries/0_stateless/02542_table_function_format.reference\n@@ -0,0 +1,22 @@\n+a\tNullable(String)\t\t\t\t\t\n+b\tNullable(Int64)\t\t\t\t\t\n+a\tString\t\t\t\t\t\n+b\tInt64\t\t\t\t\t\n+Hello\t111\n+World\t123\n+Hello\t111\n+World\t123\n+c1\tNullable(Int64)\t\t\t\t\t\n+c2\tNullable(Int64)\t\t\t\t\t\n+c3\tArray(Nullable(Int64))\t\t\t\t\t\n+c4\tArray(Array(Nullable(String)))\t\t\t\t\t\n+a1\tInt32\t\t\t\t\t\n+a2\tUInt64\t\t\t\t\t\n+a3\tArray(Int32)\t\t\t\t\t\n+a4\tArray(Array(String))\t\t\t\t\t\n+1\t2\t[1,2,3]\t[['abc'],[],['d','e']]\n+1\t2\t[1,2,3]\t[['abc'],[],['d','e']]\n+20210129005809043707\n+123456789\n+987654321\n+cust_id\tUInt128\t\t\t\t\t\ndiff --git a/tests/queries/0_stateless/02542_table_function_format.sql b/tests/queries/0_stateless/02542_table_function_format.sql\nnew file mode 100644\nindex 000000000000..e32e9001b9fb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02542_table_function_format.sql\n@@ -0,0 +1,36 @@\n+desc format(JSONEachRow, \n+$$\n+{\"a\": \"Hello\", \"b\": 111}\n+{\"a\": \"World\", \"b\": 123}\n+{\"a\": \"Hello\", \"b\": 111}\n+{\"a\": \"World\", \"b\": 123}\n+$$);\n+\n+desc format(JSONEachRow, 'a String, b Int64',\n+$$\n+{\"a\": \"Hello\", \"b\": 111}\n+{\"a\": \"World\", \"b\": 123}\n+{\"a\": \"Hello\", \"b\": 111}\n+{\"a\": \"World\", \"b\": 123}\n+$$);\n+\n+select * from format(JSONEachRow, 'a String, b Int64',\n+$$\n+{\"a\": \"Hello\", \"b\": 111}\n+{\"a\": \"World\", \"b\": 123}\n+{\"a\": \"Hello\", \"b\": 111}\n+{\"a\": \"World\", \"b\": 123}\n+$$);\n+\n+desc format(CSV, '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"');\n+desc format(CSV, 'a1 Int32, a2 UInt64, a3 Array(Int32), a4 Array(Array(String))', '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"');\n+select * from format(CSV, '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"');\n+select * from format(CSV, 'a1 Int32, a2 UInt64, a3 Array(Int32), a4 Array(Array(String))', '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"');\n+\n+drop table if exists test;\n+\n+create table test as format(TSV, 'cust_id UInt128', '20210129005809043707\\n123456789\\n987654321');\n+\n+select * from test;\n+desc table test;\n+drop table test;\n",
  "problem_statement": "Cannot specity table structure for table function `format`\nhttps://clickhouse.com/docs/en/sql-reference/table-functions/format/\r\n\r\n**Use case**\r\n\r\n```\r\nSELECT * FROM format(TSV, 'cust_id UInt128', '20210129005809043707')\r\n```\r\n\r\n**How to solve**\r\n\r\nAllow a three-argument version.\n",
  "hints_text": "Hi, I\u2019d like to have a try :)",
  "created_at": "2023-02-01T03:27:59Z",
  "modified_files": [
    "src/TableFunctions/TableFunctionFormat.cpp",
    "src/TableFunctions/TableFunctionFormat.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02542_table_function_format.reference",
    "b/tests/queries/0_stateless/02542_table_function_format.sql"
  ]
}