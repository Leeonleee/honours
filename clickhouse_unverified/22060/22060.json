{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22060,
  "instance_id": "ClickHouse__ClickHouse-22060",
  "issue_numbers": [
    "9510"
  ],
  "base_commit": "c08289517a6a4482e1a13349dadf14ced7498fea",
  "patch": "diff --git a/base/common/DateLUTImpl.h b/base/common/DateLUTImpl.h\nindex 8d393465b82c..363f281584ef 100644\n--- a/base/common/DateLUTImpl.h\n+++ b/base/common/DateLUTImpl.h\n@@ -853,15 +853,43 @@ class DateLUTImpl\n     {\n         if (hours == 1)\n             return toStartOfHour(t);\n+\n+        /** We will round the hour number since the midnight.\n+          * It may split the day into non-equal intervals.\n+          * For example, if we will round to 11-hour interval,\n+          * the day will be split to the intervals 00:00:00..10:59:59, 11:00:00..21:59:59, 22:00:00..23:59:59.\n+          * In case of daylight saving time or other transitions,\n+          * the intervals can be shortened or prolonged to the amount of transition.\n+          */\n+\n         UInt64 seconds = hours * 3600;\n \n-        t = roundDown(t, seconds);\n+        const LUTIndex index = findIndex(t);\n+        const Values & values = lut[index];\n \n-        if (t >= 0 && offset_is_whole_number_of_hours_during_epoch)\n-            return t;\n+        time_t time = t - values.date;\n+        if (time >= values.time_at_offset_change())\n+        {\n+            /// Align to new hour numbers before rounding.\n+            time += values.amount_of_offset_change();\n+            time = time / seconds * seconds;\n \n-        /// TODO check if it's correct.\n-        return toStartOfHour(t);\n+            /// Should subtract the shift back but only if rounded time is not before shift.\n+            if (time >= values.time_at_offset_change())\n+            {\n+                time -= values.amount_of_offset_change();\n+\n+                /// With cutoff at the time of the shift. Otherwise we may end up with something like 23:00 previous day.\n+                if (time < values.time_at_offset_change())\n+                    time = values.time_at_offset_change();\n+            }\n+        }\n+        else\n+        {\n+            time = time / seconds * seconds;\n+        }\n+\n+        return values.date + time;\n     }\n \n     inline time_t toStartOfMinuteInterval(time_t t, UInt64 minutes) const\n@@ -869,6 +897,14 @@ class DateLUTImpl\n         if (minutes == 1)\n             return toStartOfMinute(t);\n \n+        /** In contrast to \"toStartOfHourInterval\" function above,\n+          * the minute intervals are not aligned to the midnight.\n+          * You will get unexpected results if for example, you round down to 60 minute interval\n+          * and there was a time shift to 30 minutes.\n+          *\n+          * But this is not specified in docs and can be changed in future.\n+          */\n+\n         UInt64 seconds = 60 * minutes;\n         return roundDown(t, seconds);\n     }\n",
  "test_patch": "diff --git a/src/Common/tests/gtest_DateLUTImpl.cpp b/src/Common/tests/gtest_DateLUTImpl.cpp\nindex e18bd16e7313..4be04e44fc14 100644\n--- a/src/Common/tests/gtest_DateLUTImpl.cpp\n+++ b/src/Common/tests/gtest_DateLUTImpl.cpp\n@@ -130,7 +130,6 @@ TEST(DateLUTTest, TimeValuesInMiddleOfRange)\n     EXPECT_EQ(lut.toRelativeQuarterNum(time), 8078 /*unsigned*/);\n     EXPECT_EQ(lut.toRelativeHourNum(time), 435736 /*time_t*/);\n     EXPECT_EQ(lut.toRelativeMinuteNum(time), 26144180 /*time_t*/);\n-    EXPECT_EQ(lut.toStartOfHourInterval(time, 5), 1568646000 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfMinuteInterval(time, 6), 1568650680 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfSecondInterval(time, 7), 1568650811 /*time_t*/);\n     EXPECT_EQ(lut.toNumYYYYMM(time), 201909 /*UInt32*/);\n@@ -191,7 +190,6 @@ TEST(DateLUTTest, TimeValuesAtLeftBoderOfRange)\n     EXPECT_EQ(lut.toRelativeQuarterNum(time), 7880 /*unsigned*/); // ?\n     EXPECT_EQ(lut.toRelativeHourNum(time), 0 /*time_t*/);\n     EXPECT_EQ(lut.toRelativeMinuteNum(time), 0 /*time_t*/);\n-    EXPECT_EQ(lut.toStartOfHourInterval(time, 5), 0 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfMinuteInterval(time, 6), 0 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfSecondInterval(time, 7), 0 /*time_t*/);\n     EXPECT_EQ(lut.toNumYYYYMM(time), 197001 /*UInt32*/);\n@@ -253,7 +251,6 @@ TEST(DateLUTTest, TimeValuesAtRightBoderOfRangeOfOldLUT)\n     EXPECT_EQ(lut.toRelativeQuarterNum(time), 8424 /*unsigned*/);\n     EXPECT_EQ(lut.toRelativeHourNum(time), 1192873 /*time_t*/);\n     EXPECT_EQ(lut.toRelativeMinuteNum(time), 71572397 /*time_t*/);\n-    EXPECT_EQ(lut.toStartOfHourInterval(time, 5), 4294332000 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfMinuteInterval(time, 6), 4294343520 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfSecondInterval(time, 7), 4294343872 /*time_t*/);\n     EXPECT_EQ(lut.toNumYYYYMM(time), 210601 /*UInt32*/);\ndiff --git a/tests/queries/0_stateless/00189_time_zones.reference b/tests/queries/0_stateless/00189_time_zones_long.reference\nsimilarity index 98%\nrename from tests/queries/0_stateless/00189_time_zones.reference\nrename to tests/queries/0_stateless/00189_time_zones_long.reference\nindex e7e5a71782aa..df42e8f1b6ed 100644\n--- a/tests/queries/0_stateless/00189_time_zones.reference\n+++ b/tests/queries/0_stateless/00189_time_zones_long.reference\n@@ -148,9 +148,9 @@ toStartOfInterval\n 2019-02-05 00:00:00\n 2019-02-03 00:00:00\n 2019-02-06 22:00:00\n-2019-02-06 21:00:00\n-2019-02-06 21:00:00\n-2019-02-06 03:00:00\n+2019-02-06 22:00:00\n+2019-02-06 18:00:00\n+2019-02-06 00:00:00\n 2019-02-06 22:57:00\n 2019-02-06 22:56:00\n 2019-02-06 22:55:00\ndiff --git a/tests/queries/0_stateless/00189_time_zones.sql b/tests/queries/0_stateless/00189_time_zones_long.sql\nsimilarity index 100%\nrename from tests/queries/0_stateless/00189_time_zones.sql\nrename to tests/queries/0_stateless/00189_time_zones_long.sql\ndiff --git a/tests/queries/0_stateless/01772_to_start_of_hour_align.reference b/tests/queries/0_stateless/01772_to_start_of_hour_align.reference\nnew file mode 100644\nindex 000000000000..f130df3bef55\n--- /dev/null\n+++ b/tests/queries/0_stateless/01772_to_start_of_hour_align.reference\n@@ -0,0 +1,86 @@\n+2021-03-23 00:00:00\n+2021-03-23 11:00:00\n+2021-03-23 22:00:00\n+2021-03-23 13:00:00\n+2021-03-23 12:00:00\n+2021-03-23 00:00:00\n+2010-03-28 00:00:00\t2010-03-28 00:00:00\t1269723600\n+2010-03-28 00:15:00\t2010-03-28 00:00:00\t1269724500\n+2010-03-28 00:30:00\t2010-03-28 00:00:00\t1269725400\n+2010-03-28 00:45:00\t2010-03-28 00:00:00\t1269726300\n+2010-03-28 01:00:00\t2010-03-28 00:00:00\t1269727200\n+2010-03-28 01:15:00\t2010-03-28 00:00:00\t1269728100\n+2010-03-28 01:30:00\t2010-03-28 00:00:00\t1269729000\n+2010-03-28 01:45:00\t2010-03-28 00:00:00\t1269729900\n+2010-03-28 03:00:00\t2010-03-28 03:00:00\t1269730800\n+2010-03-28 03:15:00\t2010-03-28 03:00:00\t1269731700\n+2010-03-28 03:30:00\t2010-03-28 03:00:00\t1269732600\n+2010-03-28 03:45:00\t2010-03-28 03:00:00\t1269733500\n+2010-03-28 04:00:00\t2010-03-28 04:00:00\t1269734400\n+2010-03-28 04:15:00\t2010-03-28 04:00:00\t1269735300\n+2010-03-28 04:30:00\t2010-03-28 04:00:00\t1269736200\n+2010-03-28 04:45:00\t2010-03-28 04:00:00\t1269737100\n+2010-03-28 05:00:00\t2010-03-28 04:00:00\t1269738000\n+2010-03-28 05:15:00\t2010-03-28 04:00:00\t1269738900\n+2010-03-28 05:30:00\t2010-03-28 04:00:00\t1269739800\n+2010-03-28 05:45:00\t2010-03-28 04:00:00\t1269740700\n+2010-10-31 00:00:00\t2010-10-31 00:00:00\t1288468800\n+2010-10-31 00:15:00\t2010-10-31 00:00:00\t1288469700\n+2010-10-31 00:30:00\t2010-10-31 00:00:00\t1288470600\n+2010-10-31 00:45:00\t2010-10-31 00:00:00\t1288471500\n+2010-10-31 01:00:00\t2010-10-31 00:00:00\t1288472400\n+2010-10-31 01:15:00\t2010-10-31 00:00:00\t1288473300\n+2010-10-31 01:30:00\t2010-10-31 00:00:00\t1288474200\n+2010-10-31 01:45:00\t2010-10-31 00:00:00\t1288475100\n+2010-10-31 02:00:00\t2010-10-31 02:00:00\t1288476000\n+2010-10-31 02:15:00\t2010-10-31 02:00:00\t1288476900\n+2010-10-31 02:30:00\t2010-10-31 02:00:00\t1288477800\n+2010-10-31 02:45:00\t2010-10-31 02:00:00\t1288478700\n+2010-10-31 02:00:00\t2010-10-31 02:00:00\t1288479600\n+2010-10-31 02:15:00\t2010-10-31 02:00:00\t1288480500\n+2010-10-31 02:30:00\t2010-10-31 02:00:00\t1288481400\n+2010-10-31 02:45:00\t2010-10-31 02:00:00\t1288482300\n+2010-10-31 03:00:00\t2010-10-31 02:00:00\t1288483200\n+2010-10-31 03:15:00\t2010-10-31 02:00:00\t1288484100\n+2010-10-31 03:30:00\t2010-10-31 02:00:00\t1288485000\n+2010-10-31 03:45:00\t2010-10-31 02:00:00\t1288485900\n+2020-04-05 00:00:00\t2020-04-05 00:00:00\t1586005200\n+2020-04-05 00:15:00\t2020-04-05 00:00:00\t1586006100\n+2020-04-05 00:30:00\t2020-04-05 00:00:00\t1586007000\n+2020-04-05 00:45:00\t2020-04-05 00:00:00\t1586007900\n+2020-04-05 01:00:00\t2020-04-05 00:00:00\t1586008800\n+2020-04-05 01:15:00\t2020-04-05 00:00:00\t1586009700\n+2020-04-05 01:30:00\t2020-04-05 00:00:00\t1586010600\n+2020-04-05 01:45:00\t2020-04-05 00:00:00\t1586011500\n+2020-04-05 01:30:00\t2020-04-05 00:00:00\t1586012400\n+2020-04-05 01:45:00\t2020-04-05 00:00:00\t1586013300\n+2020-04-05 02:00:00\t2020-04-05 02:00:00\t1586014200\n+2020-04-05 02:15:00\t2020-04-05 02:00:00\t1586015100\n+2020-04-05 02:30:00\t2020-04-05 02:00:00\t1586016000\n+2020-04-05 02:45:00\t2020-04-05 02:00:00\t1586016900\n+2020-04-05 03:00:00\t2020-04-05 02:00:00\t1586017800\n+2020-04-05 03:15:00\t2020-04-05 02:00:00\t1586018700\n+2020-04-05 03:30:00\t2020-04-05 02:00:00\t1586019600\n+2020-04-05 03:45:00\t2020-04-05 02:00:00\t1586020500\n+2020-04-05 04:00:00\t2020-04-05 04:00:00\t1586021400\n+2020-04-05 04:15:00\t2020-04-05 04:00:00\t1586022300\n+2020-10-04 00:00:00\t2020-10-04 00:00:00\t1601731800\n+2020-10-04 00:15:00\t2020-10-04 00:00:00\t1601732700\n+2020-10-04 00:30:00\t2020-10-04 00:00:00\t1601733600\n+2020-10-04 00:45:00\t2020-10-04 00:00:00\t1601734500\n+2020-10-04 01:00:00\t2020-10-04 00:00:00\t1601735400\n+2020-10-04 01:15:00\t2020-10-04 00:00:00\t1601736300\n+2020-10-04 01:30:00\t2020-10-04 00:00:00\t1601737200\n+2020-10-04 01:45:00\t2020-10-04 00:00:00\t1601738100\n+2020-10-04 02:30:00\t2020-10-04 02:30:00\t1601739000\n+2020-10-04 02:45:00\t2020-10-04 02:30:00\t1601739900\n+2020-10-04 03:00:00\t2020-10-04 02:30:00\t1601740800\n+2020-10-04 03:15:00\t2020-10-04 02:30:00\t1601741700\n+2020-10-04 03:30:00\t2020-10-04 02:30:00\t1601742600\n+2020-10-04 03:45:00\t2020-10-04 02:30:00\t1601743500\n+2020-10-04 04:00:00\t2020-10-04 04:00:00\t1601744400\n+2020-10-04 04:15:00\t2020-10-04 04:00:00\t1601745300\n+2020-10-04 04:30:00\t2020-10-04 04:00:00\t1601746200\n+2020-10-04 04:45:00\t2020-10-04 04:00:00\t1601747100\n+2020-10-04 05:00:00\t2020-10-04 04:00:00\t1601748000\n+2020-10-04 05:15:00\t2020-10-04 04:00:00\t1601748900\ndiff --git a/tests/queries/0_stateless/01772_to_start_of_hour_align.sql b/tests/queries/0_stateless/01772_to_start_of_hour_align.sql\nnew file mode 100644\nindex 000000000000..6d1bb460f905\n--- /dev/null\n+++ b/tests/queries/0_stateless/01772_to_start_of_hour_align.sql\n@@ -0,0 +1,21 @@\n+-- Rounding down to hour intervals is aligned to midnight even if the interval length does not divide the whole day.\n+SELECT toStartOfInterval(toDateTime('2021-03-23 03:58:00'), INTERVAL 11 HOUR);\n+SELECT toStartOfInterval(toDateTime('2021-03-23 13:58:00'), INTERVAL 11 HOUR);\n+SELECT toStartOfInterval(toDateTime('2021-03-23 23:58:00'), INTERVAL 11 HOUR);\n+\n+-- It should work correctly even in timezones with non-whole hours offset. India have +05:30.\n+SELECT toStartOfHour(toDateTime('2021-03-23 13:58:00', 'Asia/Kolkata'));\n+SELECT toStartOfInterval(toDateTime('2021-03-23 13:58:00', 'Asia/Kolkata'), INTERVAL 6 HOUR);\n+\n+-- Specifying the interval longer than 24 hours is not correct, but it works as expected by just rounding to midnight.\n+SELECT toStartOfInterval(toDateTime('2021-03-23 13:58:00', 'Asia/Kolkata'), INTERVAL 66 HOUR);\n+\n+-- In case of timezone shifts, rounding is performed to the hour number on \"wall clock\" time.\n+-- The intervals may become shorter or longer due to time shifts. For example, the three hour interval may actually last two hours.\n+-- If the same hour number on \"wall clock\" time correspond to multiple time points due to shifting backwards, the unspecified time point is selected among the candidates.\n+SELECT toDateTime('2010-03-28 00:00:00', 'Europe/Moscow') + INTERVAL 15 * number MINUTE AS src, toStartOfInterval(src, INTERVAL 2 HOUR) AS rounded, toUnixTimestamp(src) AS t FROM numbers(20);\n+SELECT toDateTime('2010-10-31 00:00:00', 'Europe/Moscow') + INTERVAL 15 * number MINUTE AS src, toStartOfInterval(src, INTERVAL 2 HOUR) AS rounded, toUnixTimestamp(src) AS t FROM numbers(20);\n+\n+-- And this should work even for non whole number of hours shifts.\n+SELECT toDateTime('2020-04-05 00:00:00', 'Australia/Lord_Howe') + INTERVAL 15 * number MINUTE AS src, toStartOfInterval(src, INTERVAL 2 HOUR) AS rounded, toUnixTimestamp(src) AS t FROM numbers(20);\n+SELECT toDateTime('2020-10-04 00:00:00', 'Australia/Lord_Howe') + INTERVAL 15 * number MINUTE AS src, toStartOfInterval(src, INTERVAL 2 HOUR) AS rounded, toUnixTimestamp(src) AS t FROM numbers(20);\n",
  "problem_statement": "toStartOfInterval ignores DateTime timezone\nTrying to round local DateTime to start of 12-hour interval. In this expression I expect to see \"2016-07-09 12:00:00\" local time:\r\n\r\n```\r\nSELECT\r\n    toDateTime('2016-07-09 18:31:12', 'Europe/Moscow') AS dt,\r\n    toTypeName(dt) AS dt_type,\r\n    toStartOfInterval(dt, toIntervalHour(12), 'Europe/Moscow') AS hours12,\r\n    toTypeName(hours12) AS hours12_type\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500dt\u2500\u252c\u2500dt_type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500hours12\u2500\u252c\u2500hours12_type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 2016-07-09 18:31:12 \u2502 DateTime('Europe/Moscow') \u2502 2016-07-09 15:00:00 \u2502 DateTime('Europe/Moscow') \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nSame expression in UTC works as expected:\r\n\r\n```\r\nSELECT\r\n    toDateTime('2016-07-09 18:31:12', 'UTC') AS dt,\r\n    toTypeName(dt) AS dt_type,\r\n    toStartOfInterval(dt, toIntervalHour(12), 'UTC') AS hours12,\r\n    toTypeName(hours12) AS hours12_type\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500dt\u2500\u252c\u2500dt_type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500hours12\u2500\u252c\u2500hours12_type\u2500\u2500\u2500\u2500\u2510\r\n\u2502 2016-07-09 18:31:12 \u2502 DateTime('UTC') \u2502 2016-07-09 12:00:00 \u2502 DateTime('UTC') \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI'm using `clickhouse-client` wtih ClickHouse server: 20.1.4.14.\r\n\n",
  "hints_text": "I've looked at the code and found this https://github.com/ClickHouse/ClickHouse/blob/master/base/common/DateLUTImpl.h#L640:\r\n\r\n```c++\r\n    inline time_t toStartOfHourInterval(time_t t, UInt64 hours) const\r\n    {\r\n        if (hours == 1)\r\n            return toStartOfHour(t);\r\n        UInt64 seconds = hours * 3600;\r\n        t = t / seconds * seconds;\r\n        if (offset_is_whole_number_of_hours_everytime)\r\n            return t;\r\n        return toStartOfHour(t);\r\n    }\r\n```\r\n\r\nIt is an integer rounding of POSIX timestamp which actually works only with a UTC date time. I was thinking, what if timestamp will be shifted at timezone offset, then rounded by 12 hours, and then shifted back to UTC? So here it is:\r\n\r\n```\r\nWITH \r\n    'Europe/Moscow' AS timezone, \r\n    (3 * 60) * 60 AS timezone_delta, \r\n    (12 * 60) * 60 AS round_interval\r\nSELECT \r\n    timestamp, \r\n    toDateTime(timestamp, timezone) AS date, \r\n    toStartOfInterval(date, toIntervalSecond(round_interval), timezone) AS round_date, \r\n    (intDiv(timestamp + timezone_delta, round_interval) * round_interval) - timezone_delta AS round_timestamp, \r\n    toDateTime(round_timestamp, timezone) AS round_date2\r\nFROM \r\n(\r\n    SELECT 1584707696 + (number * 11184) AS timestamp\r\n    FROM numbers(10)\r\n)\r\n\r\n\u250c\u2500\u2500timestamp\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500round_date\u2500\u252c\u2500round_timestamp\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500round_date2\u2500\u2510\r\n\u2502 1584707696 \u2502 2020-03-20 15:34:56 \u2502 2020-03-20 15:00:00 \u2502      1584694800 \u2502 2020-03-20 12:00:00 \u2502\r\n\u2502 1584718880 \u2502 2020-03-20 18:41:20 \u2502 2020-03-20 15:00:00 \u2502      1584694800 \u2502 2020-03-20 12:00:00 \u2502\r\n\u2502 1584730064 \u2502 2020-03-20 21:47:44 \u2502 2020-03-20 15:00:00 \u2502      1584694800 \u2502 2020-03-20 12:00:00 \u2502\r\n\u2502 1584741248 \u2502 2020-03-21 00:54:08 \u2502 2020-03-20 15:00:00 \u2502      1584738000 \u2502 2020-03-21 00:00:00 \u2502\r\n\u2502 1584752432 \u2502 2020-03-21 04:00:32 \u2502 2020-03-21 03:00:00 \u2502      1584738000 \u2502 2020-03-21 00:00:00 \u2502\r\n\u2502 1584763616 \u2502 2020-03-21 07:06:56 \u2502 2020-03-21 03:00:00 \u2502      1584738000 \u2502 2020-03-21 00:00:00 \u2502\r\n\u2502 1584774800 \u2502 2020-03-21 10:13:20 \u2502 2020-03-21 03:00:00 \u2502      1584738000 \u2502 2020-03-21 00:00:00 \u2502\r\n\u2502 1584785984 \u2502 2020-03-21 13:19:44 \u2502 2020-03-21 03:00:00 \u2502      1584781200 \u2502 2020-03-21 12:00:00 \u2502\r\n\u2502 1584797168 \u2502 2020-03-21 16:26:08 \u2502 2020-03-21 15:00:00 \u2502      1584781200 \u2502 2020-03-21 12:00:00 \u2502\r\n\u2502 1584808352 \u2502 2020-03-21 19:32:32 \u2502 2020-03-21 15:00:00 \u2502      1584781200 \u2502 2020-03-21 12:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n10 rows in set. Elapsed: 0.022 sec. \r\n```\r\n\r\nThe `round_date2` column is what I actually want from `toStartOfInterval` function at first place.\r\n\r\nIs it possible to modify toStartOfInterval function to work as I wanted? Or maybe add new function `toStartOfLocalInterval`?\nWe too are running into this issue. It would be nice if toStartOfInterval will work in the correct time zone (aligning with 00:00:00 for that day in the correct time zone). It seems this is only an issue with time, not with date.\r\n\r\nFor example:\r\n\r\n```\r\ne5ad12e1236a :) SELECT toStartOfInterval(toDateTime('2021-02-19 01:00:00', 'Europe/Amsterdam'), INTERVAL 3 hour, 'Europe/Amsterdam');\r\n\r\nSELECT toStartOfInterval(toDateTime('2021-02-19 01:00:00', 'Europe/Amsterdam'), toIntervalHour(3), 'Europe/Amsterdam')\r\n\r\nQuery id: bbba5bb4-c876-4931-a25e-ff7fadaaf138\r\n\r\n\u250c\u2500toStartOfInterval(toDateTime('2021-02-19 01:00:00', 'Europe/Amsterdam'), toIntervalHour(3), 'Europe/Amsterdam')\u2500\u2510\r\n\u2502                                                                                             2021-02-19 01:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nWe would expect this result:\r\n```\r\n\u250c\u2500toStartOfInterval(toDateTime('2021-02-19 01:00:00', 'Europe/Amsterdam'), toIntervalHour(3), 'Europe/Amsterdam')\u2500\u2510\r\n\u2502                                                                                             2021-02-19 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nThis DOES work correctly already with INTERVAL of a day or larger.  For example:\r\n\r\n```\r\ne5ad12e1236a :) SELECT toStartOfInterval(toDateTime('2021-02-01 00:00:00', 'Europe/Amsterdam'), INTERVAL 1 day, 'Europe/Amsterdam');\r\n\r\nSELECT toStartOfInterval(toDateTime('2021-02-01 00:00:00', 'Europe/Amsterdam'), toIntervalDay(1), 'Europe/Amsterdam')\r\n\r\nQuery id: 406a1b06-cee1-4c8e-8d36-68968c11f207\r\n\r\n\u250c\u2500toStartOfInterval(toDateTime('2021-02-01 00:00:00', 'Europe/Amsterdam'), toIntervalDay(1), 'Europe/Amsterdam')\u2500\u2510\r\n\u2502                                                                                            2021-02-01 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nand \r\n\r\n```\r\ne5ad12e1236a :) SELECT toStartOfInterval(toDateTime('2021-02-01 00:00:00', 'Europe/Amsterdam'), INTERVAL 1 month, 'Europe/Amsterdam');\r\n\r\nSELECT toStartOfInterval(toDateTime('2021-02-01 00:00:00', 'Europe/Amsterdam'), toIntervalMonth(1), 'Europe/Amsterdam')\r\n\r\nQuery id: c9e446d2-1a0a-4551-8070-95ccd3d81055\r\n\r\n\u250c\u2500toStartOfInterval(toDateTime('2021-02-01 00:00:00', 'Europe/Amsterdam'), toIntervalMonth(1), 'Europe/Amsterdam')\u2500\u2510\r\n\u2502                                                                                                       2021-02-01 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n\nWe can perform alignment to hour intervals that are divisors of 24 hours:\r\n\r\n1, 2, 3, 4, 6, 8, 12, 24\r\n\r\nDuring time shifts (due to daylight saving time or other) the intervals can become longer or shorter.\r\n\r\nWe can also perform alignment of all hour intervals to the \"wall clock time\", so rounding to start of 9hr interval will split every day into three intervals:\r\n\r\n0 am .. 9 am - 9 hours\r\n9 am .. 6 pm - 9 hours\r\n6 pm .. 0 am - 6 hours\r\n\r\nIt will be backward incompatible change.\r\n\r\n@arsenicum @PHameete @den-crane what do you think?\nHi @alexey-milovidov thank you for opening a discussion! I prefer the second option. Because then users can choose for themselves:\r\n\r\n- use a divisor of 24 to get intervals of equal length (except in the case DST changes or other)\r\n- use another number that is not a divisor of 24, and then your last interval will be shorter\r\n\r\nI think DST changes is no issue: this problem also exists with periods of 1 day or more. Some periods can be longer or shorter than others. The crucial aspect here is that the hour intervals will be aligned with 00:00 in the timezone of the datetime. Currently this is aligned with UTC always.\r\n",
  "created_at": "2021-03-23T22:56:12Z"
}