You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Logical error: Statistics CountMin doesn't support Nullable Int types
**Describe the bug**
With `ALTER TABLE ADD STATISTICS TYPE CountMin` on Nullable(any Int) col, gives a logical error.

**How to reproduce**
The Fiddle crashes before returning. Run:

```sql
SET allow_experimental_statistics = 1;
CREATE TABLE t0 (c0 Nullable(Int)) ENGINE = MergeTree() ORDER BY tuple();
INSERT INTO t0 (c0) VALUES (1);
DELETE FROM t0 WHERE TRUE;
INSERT INTO t0 (c0) VALUES (2);
ALTER TABLE t0 ADD STATISTICS c0 TYPE CountMin;
OPTIMIZE TABLE t0;
SELECT 1 FROM t0 WHERE t0.c0 = 0;
```
Server stack trace:

```
<Fatal> : Logical error: 'Statistics 'countmin' does not support estimate data type of Nullable(Int32)'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x00000000371ac9d1
1. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001e5008cd
2. src/Common/Exception.h:110: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000e67a066
3. src/Common/Exception.h:128: DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000e6be095
4. src/Storages/Statistics/StatisticsCountMinSketch.cpp:52: DB::StatisticsCountMinSketch::estimateEqual(DB::Field const&) const @ 0x000000002f238b76
5. src/Storages/Statistics/ConditionSelectivityEstimator.cpp:48: DB::ConditionSelectivityEstimator::ColumnSelectivityEstimator::estimateEqual(DB::Field const&, double) const @ 0x000000002f22ad29
6. src/Storages/Statistics/ConditionSelectivityEstimator.cpp:157: DB::ConditionSelectivityEstimator::estimateRowCount(DB::RPNBuilderTreeNode const&) const @ 0x000000002f22bdd6
7. src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp:284: DB::MergeTreeWhereOptimizer::analyzeImpl(std::list<DB::MergeTreeWhereOptimizer::Condition, std::allocator<DB::MergeTreeWhereOptimizer::Condition>>&, DB::RPNBuilderTreeNode const&, DB::MergeTreeWhereOptimizer::WhereOptimizerContext const&, std::set<long, std::less<long>, std::allocator<long>>&) const @ 0x000000002ef66448
8. src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp:309: DB::MergeTreeWhereOptimizer::analyze(DB::RPNBuilderTreeNode const&, DB::MergeTreeWhereOptimizer::WhereOptimizerContext const&) const @ 0x000000002ef69044
9. src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp:358: DB::MergeTreeWhereOptimizer::optimizeImpl(DB::RPNBuilderTreeNode const&, DB::MergeTreeWhereOptimizer::WhereOptimizerContext const&) const @ 0x000000002ef62c81
10. src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp:132: DB::MergeTreeWhereOptimizer::optimize(DB::ActionsDAG const&, String const&, std::shared_ptr<DB::Context const> const&, bool) @ 0x000000002ef65388
11. src/Processors/QueryPlan/Optimizations/optimizePrewhere.cpp:97: DB::QueryPlanOptimizations::optimizePrewhere(std::vector<DB::QueryPlanOptimizations::Frame, std::allocator<DB::QueryPlanOptimizations::Frame>>&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x000000003045380b
12. src/Processors/QueryPlan/Optimizations/optimizeTree.cpp:123: DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x000000003044f50b
13. src/Processors/QueryPlan/QueryPlan.cpp:506: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x0000000030315674
14. src/Processors/QueryPlan/QueryPlan.cpp:161: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000303148f4
15. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:252: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x000000002c119a04
16. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:221: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x000000002c1192a8
17. src/Interpreters/executeQuery.cpp:1251: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000002c74885a
18. src/Interpreters/executeQuery.cpp:1417: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002c741949
19. src/Server/TCPHandler.cpp:564: DB::TCPHandler::runImpl() @ 0x000000002f6cca65
20. src/Server/TCPHandler.cpp:2484: DB::TCPHandler::run() @ 0x000000002f6fd069
21. base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x000000003736966f
22. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003736a277
23. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000003728b74b
24. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000037286408
25. asan_thread_start(void*) @ 0x000000000e62ebcd
26. ? @ 0x00007ffff7c9ca94
27. ? @ 0x00007ffff7d29c3
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
