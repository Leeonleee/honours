{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 69881,
  "instance_id": "ClickHouse__ClickHouse-69881",
  "issue_numbers": [
    "69589"
  ],
  "base_commit": "aa84f0523a8c63f60920280fd1d7e63d7a4c3da1",
  "patch": "diff --git a/src/Interpreters/parseColumnsListForTableFunction.cpp b/src/Interpreters/parseColumnsListForTableFunction.cpp\nindex 13d10c7d7e72..d8f526db592a 100644\n--- a/src/Interpreters/parseColumnsListForTableFunction.cpp\n+++ b/src/Interpreters/parseColumnsListForTableFunction.cpp\n@@ -62,7 +62,7 @@ void validateDataType(const DataTypePtr & type_to_check, const DataTypeValidatio\n                     throw Exception(\n                         ErrorCodes::SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY,\n                         \"Creating columns of type {} is prohibited by default due to expected negative impact on performance. \"\n-                        \"It can be enabled with the \\\"allow_suspicious_low_cardinality_types\\\" setting.\",\n+                        \"It can be enabled with the \\\"allow_suspicious_low_cardinality_types\\\" setting\",\n                         lc_type->getName());\n             }\n         }\ndiff --git a/src/Storages/Statistics/StatisticsCountMinSketch.cpp b/src/Storages/Statistics/StatisticsCountMinSketch.cpp\nindex 7d9f741f8236..83907e9a8f11 100644\n--- a/src/Storages/Statistics/StatisticsCountMinSketch.cpp\n+++ b/src/Storages/Statistics/StatisticsCountMinSketch.cpp\n@@ -27,7 +27,7 @@ static constexpr auto num_buckets = 2718uz;\n StatisticsCountMinSketch::StatisticsCountMinSketch(const SingleStatisticsDescription & description, const DataTypePtr & data_type_)\n     : IStatistics(description)\n     , sketch(num_hashes, num_buckets)\n-    , data_type(data_type_)\n+    , data_type(removeNullable(data_type_))\n {\n }\n \ndiff --git a/src/Storages/Statistics/StatisticsMinMax.cpp b/src/Storages/Statistics/StatisticsMinMax.cpp\nindex 88c937642926..be8b0fdeab90 100644\n--- a/src/Storages/Statistics/StatisticsMinMax.cpp\n+++ b/src/Storages/Statistics/StatisticsMinMax.cpp\n@@ -17,7 +17,7 @@ extern const int ILLEGAL_STATISTICS;\n \n StatisticsMinMax::StatisticsMinMax(const SingleStatisticsDescription & description, const DataTypePtr & data_type_)\n     : IStatistics(description)\n-    , data_type(data_type_)\n+    , data_type(removeNullable(data_type_))\n {\n }\n \ndiff --git a/src/Storages/Statistics/StatisticsTDigest.cpp b/src/Storages/Statistics/StatisticsTDigest.cpp\nindex 7bcbc3da805b..2c3e2be0c0a8 100644\n--- a/src/Storages/Statistics/StatisticsTDigest.cpp\n+++ b/src/Storages/Statistics/StatisticsTDigest.cpp\n@@ -11,7 +11,7 @@ extern const int ILLEGAL_STATISTICS;\n \n StatisticsTDigest::StatisticsTDigest(const SingleStatisticsDescription & description, const DataTypePtr & data_type_)\n     : IStatistics(description)\n-    , data_type(data_type_)\n+    , data_type(removeNullable(data_type_))\n {\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02864_statistics_bugs.reference b/tests/queries/0_stateless/02864_statistics_bug_67742.reference\nsimilarity index 100%\nrename from tests/queries/0_stateless/02864_statistics_bugs.reference\nrename to tests/queries/0_stateless/02864_statistics_bug_67742.reference\ndiff --git a/tests/queries/0_stateless/02864_statistics_bug_67742.sql b/tests/queries/0_stateless/02864_statistics_bug_67742.sql\nnew file mode 100644\nindex 000000000000..82b60c64221b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02864_statistics_bug_67742.sql\n@@ -0,0 +1,27 @@\n+SET allow_experimental_statistics = 1;\n+SET allow_statistics_optimize = 1;\n+SET mutations_sync = 1;\n+\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab (a Float64 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();\n+INSERT INTO tab SELECT number FROM system.numbers LIMIT 10000;\n+SELECT count(*) FROM tab WHERE a < '10';\n+DROP TABLE tab;\n+\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab (a Int32 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();\n+INSERT INTO tab SELECT number FROM system.numbers LIMIT 10000;\n+SELECT count(*) FROM tab WHERE a < '10.5'; -- { serverError TYPE_MISMATCH }\n+DROP TABLE tab;\n+\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab (a Int32 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();\n+INSERT INTO tab SELECT number FROM system.numbers LIMIT 10000;\n+SELECT count(*) FROM tab WHERE a < 10.5;\n+DROP TABLE tab;\n+\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab (a Int16 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();\n+INSERT INTO tab SELECT number FROM system.numbers LIMIT 10000;\n+SELECT count(*) FROM tab WHERE a < '9999999999999999999999999';\n+DROP TABLE tab;\ndiff --git a/tests/queries/0_stateless/02864_statistics_bug_69589.reference b/tests/queries/0_stateless/02864_statistics_bug_69589.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02864_statistics_bug_69589.sql b/tests/queries/0_stateless/02864_statistics_bug_69589.sql\nnew file mode 100644\nindex 000000000000..79ce23411d12\n--- /dev/null\n+++ b/tests/queries/0_stateless/02864_statistics_bug_69589.sql\n@@ -0,0 +1,13 @@\n+-- Tags: no-fasttest\n+-- no-fasttest: 'countmin' sketches need a 3rd party library\n+\n+SET allow_experimental_statistics = 1;\n+SET allow_statistics_optimize = 1;\n+\n+CREATE TABLE tab (c Nullable(Int)) ENGINE = MergeTree() ORDER BY tuple();\n+INSERT INTO tab (c) VALUES (1);\n+DELETE FROM tab WHERE TRUE;\n+INSERT INTO tab (c) VALUES (2);\n+ALTER TABLE tab ADD STATISTICS c TYPE countmin;\n+OPTIMIZE TABLE tab;\n+SELECT 1 FROM tab WHERE tab.c = 0;\ndiff --git a/tests/queries/0_stateless/02864_statistics_bugs.sql b/tests/queries/0_stateless/02864_statistics_bugs.sql\ndeleted file mode 100644\nindex 01bbe221b0fd..000000000000\n--- a/tests/queries/0_stateless/02864_statistics_bugs.sql\n+++ /dev/null\n@@ -1,27 +0,0 @@\n-SET allow_experimental_statistics = 1;\n-SET allow_statistics_optimize = 1;\n-SET mutations_sync = 1;\n-\n-DROP TABLE IF EXISTS bug_67742;\n-CREATE TABLE bug_67742 (a Float64 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();\n-INSERT INTO bug_67742 SELECT number FROM system.numbers LIMIT 10000;\n-SELECT count(*) FROM bug_67742 WHERE a < '10';\n-DROP TABLE bug_67742;\n-\n-DROP TABLE IF EXISTS bug_67742;\n-CREATE TABLE bug_67742 (a Int32 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();\n-INSERT INTO bug_67742 SELECT number FROM system.numbers LIMIT 10000;\n-SELECT count(*) FROM bug_67742 WHERE a < '10.5'; -- { serverError TYPE_MISMATCH }\n-DROP TABLE bug_67742;\n-\n-DROP TABLE IF EXISTS bug_67742;\n-CREATE TABLE bug_67742 (a Int32 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();\n-INSERT INTO bug_67742 SELECT number FROM system.numbers LIMIT 10000;\n-SELECT count(*) FROM bug_67742 WHERE a < 10.5;\n-DROP TABLE bug_67742;\n-\n-DROP TABLE IF EXISTS bug_67742;\n-CREATE TABLE bug_67742 (a Int16 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();\n-INSERT INTO bug_67742 SELECT number FROM system.numbers LIMIT 10000;\n-SELECT count(*) FROM bug_67742 WHERE a < '9999999999999999999999999';\n-DROP TABLE bug_67742;\n",
  "problem_statement": "Logical error: Statistics CountMin doesn't support Nullable Int types\n**Describe the bug**\r\nWith `ALTER TABLE ADD STATISTICS TYPE CountMin` on Nullable(any Int) col, gives a logical error.\r\n\r\n**How to reproduce**\r\nThe Fiddle crashes before returning. Run:\r\n\r\n```sql\r\nSET allow_experimental_statistics = 1;\r\nCREATE TABLE t0 (c0 Nullable(Int)) ENGINE = MergeTree() ORDER BY tuple();\r\nINSERT INTO t0 (c0) VALUES (1);\r\nDELETE FROM t0 WHERE TRUE;\r\nINSERT INTO t0 (c0) VALUES (2);\r\nALTER TABLE t0 ADD STATISTICS c0 TYPE CountMin;\r\nOPTIMIZE TABLE t0;\r\nSELECT 1 FROM t0 WHERE t0.c0 = 0;\r\n```\r\nServer stack trace:\r\n\r\n```\r\n<Fatal> : Logical error: 'Statistics 'countmin' does not support estimate data type of Nullable(Int32)'.\r\n<Fatal> : Stack trace (when copying this message, always include the lines below):\r\n\r\n0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x00000000371ac9d1\r\n1. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001e5008cd\r\n2. src/Common/Exception.h:110: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000e67a066\r\n3. src/Common/Exception.h:128: DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000e6be095\r\n4. src/Storages/Statistics/StatisticsCountMinSketch.cpp:52: DB::StatisticsCountMinSketch::estimateEqual(DB::Field const&) const @ 0x000000002f238b76\r\n5. src/Storages/Statistics/ConditionSelectivityEstimator.cpp:48: DB::ConditionSelectivityEstimator::ColumnSelectivityEstimator::estimateEqual(DB::Field const&, double) const @ 0x000000002f22ad29\r\n6. src/Storages/Statistics/ConditionSelectivityEstimator.cpp:157: DB::ConditionSelectivityEstimator::estimateRowCount(DB::RPNBuilderTreeNode const&) const @ 0x000000002f22bdd6\r\n7. src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp:284: DB::MergeTreeWhereOptimizer::analyzeImpl(std::list<DB::MergeTreeWhereOptimizer::Condition, std::allocator<DB::MergeTreeWhereOptimizer::Condition>>&, DB::RPNBuilderTreeNode const&, DB::MergeTreeWhereOptimizer::WhereOptimizerContext const&, std::set<long, std::less<long>, std::allocator<long>>&) const @ 0x000000002ef66448\r\n8. src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp:309: DB::MergeTreeWhereOptimizer::analyze(DB::RPNBuilderTreeNode const&, DB::MergeTreeWhereOptimizer::WhereOptimizerContext const&) const @ 0x000000002ef69044\r\n9. src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp:358: DB::MergeTreeWhereOptimizer::optimizeImpl(DB::RPNBuilderTreeNode const&, DB::MergeTreeWhereOptimizer::WhereOptimizerContext const&) const @ 0x000000002ef62c81\r\n10. src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp:132: DB::MergeTreeWhereOptimizer::optimize(DB::ActionsDAG const&, String const&, std::shared_ptr<DB::Context const> const&, bool) @ 0x000000002ef65388\r\n11. src/Processors/QueryPlan/Optimizations/optimizePrewhere.cpp:97: DB::QueryPlanOptimizations::optimizePrewhere(std::vector<DB::QueryPlanOptimizations::Frame, std::allocator<DB::QueryPlanOptimizations::Frame>>&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x000000003045380b\r\n12. src/Processors/QueryPlan/Optimizations/optimizeTree.cpp:123: DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x000000003044f50b\r\n13. src/Processors/QueryPlan/QueryPlan.cpp:506: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x0000000030315674\r\n14. src/Processors/QueryPlan/QueryPlan.cpp:161: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000303148f4\r\n15. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:252: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x000000002c119a04\r\n16. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:221: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x000000002c1192a8\r\n17. src/Interpreters/executeQuery.cpp:1251: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000002c74885a\r\n18. src/Interpreters/executeQuery.cpp:1417: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002c741949\r\n19. src/Server/TCPHandler.cpp:564: DB::TCPHandler::runImpl() @ 0x000000002f6cca65\r\n20. src/Server/TCPHandler.cpp:2484: DB::TCPHandler::run() @ 0x000000002f6fd069\r\n21. base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x000000003736966f\r\n22. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003736a277\r\n23. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000003728b74b\r\n24. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000037286408\r\n25. asan_thread_start(void*) @ 0x000000000e62ebcd\r\n26. ? @ 0x00007ffff7c9ca94\r\n27. ? @ 0x00007ffff7d29c3\r\n```\r\n\r\n\n",
  "hints_text": "Perhaps an old build was used but this one did not reproduce with v24.8 for me: https://fiddle.clickhouse.com/7e7585d9-aca9-4f1b-8588-3498195263b5\nI am able to reproduce it on my local setup. I compiled the latest master branch on Debug build with ASAN.",
  "created_at": "2024-09-23T19:50:50Z",
  "modified_files": [
    "src/Interpreters/parseColumnsListForTableFunction.cpp",
    "src/Storages/Statistics/StatisticsCountMinSketch.cpp",
    "src/Storages/Statistics/StatisticsMinMax.cpp",
    "src/Storages/Statistics/StatisticsTDigest.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02864_statistics_bug_67742.sql",
    "b/tests/queries/0_stateless/02864_statistics_bug_69589.sql",
    "tests/queries/0_stateless/02864_statistics_bugs.sql"
  ]
}