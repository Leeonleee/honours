{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9610,
  "instance_id": "ClickHouse__ClickHouse-9610",
  "issue_numbers": [
    "9601"
  ],
  "base_commit": "bbd9eb3d3ef0a770d19bb165594a23fc9ba02c3c",
  "patch": "diff --git a/dbms/src/Interpreters/InterpreterSelectQuery.cpp b/dbms/src/Interpreters/InterpreterSelectQuery.cpp\nindex 8285978c7bda..7434608f652f 100644\n--- a/dbms/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -824,12 +824,13 @@ void InterpreterSelectQuery::executeImpl(TPipeline & pipeline, const BlockInputS\n \n             if (expressions.hasJoin())\n             {\n-                Block header_before_join;\n+                Block join_result_sample;\n                 JoinPtr join = expressions.before_join->getTableJoinAlgo();\n \n                 if constexpr (pipeline_with_processors)\n                 {\n-                    header_before_join = pipeline.getHeader();\n+                    join_result_sample = ExpressionBlockInputStream(\n+                        std::make_shared<OneBlockInputStream>(pipeline.getHeader()), expressions.before_join).getHeader();\n \n                     /// In case joined subquery has totals, and we don't, add default chunk to totals.\n                     bool default_totals = false;\n@@ -855,17 +856,15 @@ void InterpreterSelectQuery::executeImpl(TPipeline & pipeline, const BlockInputS\n                 }\n                 else\n                 {\n-                    header_before_join = pipeline.firstStream()->getHeader();\n                     /// Applies to all sources except stream_with_non_joined_data.\n                     for (auto & stream : pipeline.streams)\n                         stream = std::make_shared<InflatingExpressionBlockInputStream>(stream, expressions.before_join);\n+\n+                    join_result_sample = pipeline.firstStream()->getHeader();\n                 }\n \n                 if (join)\n                 {\n-                    Block join_result_sample = ExpressionBlockInputStream(\n-                        std::make_shared<OneBlockInputStream>(header_before_join), expressions.before_join).getHeader();\n-\n                     if (auto stream = join->createStreamWithNonJoinedRows(join_result_sample, settings.max_block_size))\n                     {\n                         if constexpr (pipeline_with_processors)\ndiff --git a/dbms/src/Interpreters/Join.cpp b/dbms/src/Interpreters/Join.cpp\nindex 4693cfb4ec2c..51219fb957d9 100644\n--- a/dbms/src/Interpreters/Join.cpp\n+++ b/dbms/src/Interpreters/Join.cpp\n@@ -116,6 +116,68 @@ static void changeNullability(MutableColumnPtr & mutable_column)\n     mutable_column = (*std::move(column)).mutate();\n }\n \n+static ColumnPtr emptyNotNullableClone(const ColumnPtr & column)\n+{\n+    if (column->isNullable())\n+        return checkAndGetColumn<ColumnNullable>(*column)->getNestedColumnPtr()->cloneEmpty();\n+    return column->cloneEmpty();\n+}\n+\n+static ColumnPtr changeLowCardinality(const ColumnPtr & column, const ColumnPtr & dst_sample)\n+{\n+    if (dst_sample->lowCardinality())\n+    {\n+        MutableColumnPtr lc = dst_sample->cloneEmpty();\n+        typeid_cast<ColumnLowCardinality &>(*lc).insertRangeFromFullColumn(*column, 0, column->size());\n+        return lc;\n+    }\n+\n+    return column->convertToFullColumnIfLowCardinality();\n+}\n+\n+/// Change both column nullability and low cardinality\n+static void changeColumnRepresentation(const ColumnPtr & src_column, ColumnPtr & dst_column)\n+{\n+    bool nullable_src = src_column->isNullable();\n+    bool nullable_dst = dst_column->isNullable();\n+\n+    ColumnPtr dst_not_null = emptyNotNullableClone(dst_column);\n+    bool lowcard_src = emptyNotNullableClone(src_column)->lowCardinality();\n+    bool lowcard_dst = dst_not_null->lowCardinality();\n+    bool change_lowcard = (!lowcard_src && lowcard_dst) || (lowcard_src && !lowcard_dst);\n+\n+    if (nullable_src && !nullable_dst)\n+    {\n+        auto * nullable = checkAndGetColumn<ColumnNullable>(*src_column);\n+        if (change_lowcard)\n+            dst_column = changeLowCardinality(nullable->getNestedColumnPtr(), dst_column);\n+        else\n+            dst_column = nullable->getNestedColumnPtr();\n+    }\n+    else if (!nullable_src && nullable_dst)\n+    {\n+        if (change_lowcard)\n+            dst_column = makeNullable(changeLowCardinality(src_column, dst_not_null));\n+        else\n+            dst_column = makeNullable(src_column);\n+    }\n+    else /// same nullability\n+    {\n+        if (change_lowcard)\n+        {\n+            if (auto * nullable = checkAndGetColumn<ColumnNullable>(*src_column))\n+            {\n+                dst_column = makeNullable(changeLowCardinality(nullable->getNestedColumnPtr(), dst_not_null));\n+                assert_cast<ColumnNullable &>(*dst_column->assumeMutable()).applyNullMap(nullable->getNullMapColumn());\n+            }\n+            else\n+                dst_column = changeLowCardinality(src_column, dst_not_null);\n+        }\n+        else\n+            dst_column = src_column;\n+    }\n+}\n+\n \n Join::Join(std::shared_ptr<AnalyzedJoin> table_join_, const Block & right_sample_block, bool any_take_last_row_)\n     : table_join(table_join_)\n@@ -315,11 +377,15 @@ void Join::setSampleBlock(const Block & block)\n     if (!empty())\n         return;\n \n-    ColumnRawPtrs key_columns = JoinCommon::extractKeysForJoin(key_names_right, block, right_table_keys, sample_block_with_columns_to_add);\n+    JoinCommon::splitAdditionalColumns(block, key_names_right, right_table_keys, sample_block_with_columns_to_add);\n \n-    initRightBlockStructure(data->sample_block);\n     initRequiredRightKeys();\n \n+    JoinCommon::removeLowCardinalityInplace(right_table_keys);\n+    initRightBlockStructure(data->sample_block);\n+\n+    ColumnRawPtrs key_columns = JoinCommon::extractKeysForJoin(right_table_keys, key_names_right);\n+\n     JoinCommon::createMissedColumns(sample_block_with_columns_to_add);\n     if (nullable_right_side)\n         JoinCommon::convertColumnsToNullable(sample_block_with_columns_to_add);\n@@ -1249,7 +1315,10 @@ class NonJoinedBlockInputStream : public IBlockInputStream\n     ///\n     std::unordered_map<size_t, size_t> same_result_keys;\n     /// Which right columns (saved in parent) need nullability change before placing them in result block\n-    std::vector<size_t> right_nullability_changes;\n+    std::vector<size_t> right_nullability_adds;\n+    std::vector<size_t> right_nullability_removes;\n+    /// Which right columns (saved in parent) need LowCardinality change before placing them in result block\n+    std::vector<std::pair<size_t, ColumnPtr>> right_lowcard_changes;\n \n     std::any position;\n     std::optional<Join::BlockNullmapList::const_iterator> nulls_position;\n@@ -1259,19 +1328,28 @@ class NonJoinedBlockInputStream : public IBlockInputStream\n         if (!column_indices_right.count(right_pos))\n         {\n             column_indices_right[right_pos] = result_position;\n-\n-            if (hasNullabilityChange(right_pos, result_position))\n-                right_nullability_changes.push_back(right_pos);\n+            extractColumnChanges(right_pos, result_position);\n         }\n         else\n             same_result_keys[result_position] = column_indices_right[right_pos];\n     }\n \n-    bool hasNullabilityChange(size_t right_pos, size_t result_pos) const\n+    void extractColumnChanges(size_t right_pos, size_t result_pos)\n     {\n         const auto & src = parent.savedBlockSample().getByPosition(right_pos).column;\n         const auto & dst = result_sample_block.getByPosition(result_pos).column;\n-        return src->isNullable() != dst->isNullable();\n+\n+        if (!src->isNullable() && dst->isNullable())\n+            right_nullability_adds.push_back(right_pos);\n+\n+        if (src->isNullable() && !dst->isNullable())\n+            right_nullability_removes.push_back(right_pos);\n+\n+        ColumnPtr src_not_null = emptyNotNullableClone(src);\n+        ColumnPtr dst_not_null = emptyNotNullableClone(dst);\n+\n+        if (src_not_null->lowCardinality() != dst_not_null->lowCardinality())\n+            right_lowcard_changes.push_back({right_pos, dst_not_null});\n     }\n \n     Block createBlock()\n@@ -1293,7 +1371,13 @@ class NonJoinedBlockInputStream : public IBlockInputStream\n         if (!rows_added)\n             return {};\n \n-        for (size_t pos : right_nullability_changes)\n+        for (size_t pos : right_nullability_removes)\n+            changeNullability(columns_right[pos]);\n+\n+        for (auto & [pos, dst_sample] : right_lowcard_changes)\n+            columns_right[pos] = changeLowCardinality(std::move(columns_right[pos]), dst_sample)->assumeMutable();\n+\n+        for (size_t pos : right_nullability_adds)\n             changeNullability(columns_right[pos]);\n \n         Block res = result_sample_block.cloneEmpty();\n@@ -1318,16 +1402,7 @@ class NonJoinedBlockInputStream : public IBlockInputStream\n         {\n             auto & src_column = res.getByPosition(pr.second).column;\n             auto & dst_column = res.getByPosition(pr.first).column;\n-\n-            if (src_column->isNullable() && !dst_column->isNullable())\n-            {\n-                auto * nullable = checkAndGetColumn<ColumnNullable>(*src_column);\n-                dst_column = nullable->getNestedColumnPtr();\n-            }\n-            else if (!src_column->isNullable() && dst_column->isNullable())\n-                dst_column = makeNullable(src_column);\n-            else\n-                dst_column = src_column;\n+            changeColumnRepresentation(src_column, dst_column);\n         }\n \n         return res;\ndiff --git a/dbms/src/Interpreters/MergeJoin.cpp b/dbms/src/Interpreters/MergeJoin.cpp\nindex 6e88ea4e1590..fde6ba2003de 100644\n--- a/dbms/src/Interpreters/MergeJoin.cpp\n+++ b/dbms/src/Interpreters/MergeJoin.cpp\n@@ -483,7 +483,8 @@ MergeJoin::MergeJoin(std::shared_ptr<AnalyzedJoin> table_join_, const Block & ri\n                             ErrorCodes::PARAMETER_OUT_OF_BOUND);\n     }\n \n-    JoinCommon::extractKeysForJoin(table_join->keyNamesRight(), right_sample_block, right_table_keys, right_columns_to_add);\n+    JoinCommon::splitAdditionalColumns(right_sample_block, table_join->keyNamesRight(), right_table_keys, right_columns_to_add);\n+    JoinCommon::removeLowCardinalityInplace(right_table_keys);\n \n     const NameSet required_right_keys = table_join->requiredRightKeys();\n     for (const auto & column : right_table_keys)\ndiff --git a/dbms/src/Interpreters/join_common.cpp b/dbms/src/Interpreters/join_common.cpp\nindex bb61870dacac..7ef8d66d752d 100644\n--- a/dbms/src/Interpreters/join_common.cpp\n+++ b/dbms/src/Interpreters/join_common.cpp\n@@ -98,34 +98,31 @@ void removeLowCardinalityInplace(Block & block)\n     }\n }\n \n-ColumnRawPtrs extractKeysForJoin(const Names & key_names_right, const Block & right_sample_block,\n-                                 Block & sample_block_with_keys, Block & sample_block_with_columns_to_add)\n+void splitAdditionalColumns(const Block & sample_block, const Names & key_names, Block & block_keys, Block & block_others)\n {\n-    size_t keys_size = key_names_right.size();\n-    ColumnRawPtrs key_columns(keys_size);\n-\n-    sample_block_with_columns_to_add = materializeBlock(right_sample_block);\n+    block_others = materializeBlock(sample_block);\n \n-    for (size_t i = 0; i < keys_size; ++i)\n+    for (const String & column_name : key_names)\n     {\n-        const String & column_name = key_names_right[i];\n-\n-        /// there could be the same key names\n-        if (sample_block_with_keys.has(column_name))\n+        /// Extract right keys with correct keys order. There could be the same key names.\n+        if (!block_keys.has(column_name))\n         {\n-            key_columns[i] = sample_block_with_keys.getByName(column_name).column.get();\n-            continue;\n+            auto & col = block_others.getByName(column_name);\n+            block_keys.insert(col);\n+            block_others.erase(column_name);\n         }\n+    }\n+}\n \n-        auto & col = sample_block_with_columns_to_add.getByName(column_name);\n-        col.column = recursiveRemoveLowCardinality(col.column);\n-        col.type = recursiveRemoveLowCardinality(col.type);\n-\n-        /// Extract right keys with correct keys order.\n-        sample_block_with_keys.insert(col);\n-        sample_block_with_columns_to_add.erase(column_name);\n+ColumnRawPtrs extractKeysForJoin(const Block & block_keys, const Names & key_names)\n+{\n+    size_t keys_size = key_names.size();\n+    ColumnRawPtrs key_columns(keys_size);\n \n-        key_columns[i] = sample_block_with_keys.getColumns().back().get();\n+    for (size_t i = 0; i < keys_size; ++i)\n+    {\n+        const String & column_name = key_names[i];\n+        key_columns[i] = block_keys.getByName(column_name).column.get();\n \n         /// We will join only keys, where all components are not NULL.\n         if (auto * nullable = checkAndGetColumn<ColumnNullable>(*key_columns[i]))\ndiff --git a/dbms/src/Interpreters/join_common.h b/dbms/src/Interpreters/join_common.h\nindex 7c5ec0dc6933..b69a0a4a993d 100644\n--- a/dbms/src/Interpreters/join_common.h\n+++ b/dbms/src/Interpreters/join_common.h\n@@ -22,8 +22,8 @@ ColumnRawPtrs getRawPointers(const Columns & columns);\n void removeLowCardinalityInplace(Block & block);\n \n /// Split key and other columns by keys name list\n-ColumnRawPtrs extractKeysForJoin(const Names & key_names_right, const Block & right_sample_block,\n-                                 Block & sample_block_with_keys, Block & sample_block_with_columns_to_add);\n+void splitAdditionalColumns(const Block & sample_block, const Names & key_names, Block & block_keys, Block & block_others);\n+ColumnRawPtrs extractKeysForJoin(const Block & block_keys, const Names & key_names_right);\n \n /// Throw an exception if blocks have different types of key columns. Compare up to Nullability.\n void checkTypesOfKeys(const Block & block_left, const Names & key_names_left, const Block & block_right, const Names & key_names_right);\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01049_join_low_card_bug.reference b/dbms/tests/queries/0_stateless/01049_join_low_card_bug.reference\nnew file mode 100644\nindex 000000000000..ece76c99662a\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01049_join_low_card_bug.reference\n@@ -0,0 +1,80 @@\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\tString\n+\tstr\tLowCardinality(String)\tString\n+\tstr\tLowCardinality(String)\tString\n+\tstr\tLowCardinality(String)\tString\n+\tString\n+str\tString\n+\tString\n+str\tString\n+\tstr\tString\tLowCardinality(String)\n+\tstr\tString\tLowCardinality(String)\n+\tstr\tString\tLowCardinality(String)\n+\tstr\tString\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\tNullable(String)\n+\tstr\tLowCardinality(String)\tNullable(String)\n+\tstr\tLowCardinality(String)\tNullable(String)\n+\tstr\tLowCardinality(String)\tNullable(String)\n+\\N\tNullable(String)\n+str\tNullable(String)\n+\\N\tNullable(String)\n+str\tNullable(String)\n+\\N\tstr\tNullable(String)\tLowCardinality(String)\n+\\N\tstr\tNullable(String)\tLowCardinality(String)\n+\\N\tstr\tNullable(String)\tLowCardinality(String)\n+\\N\tstr\tNullable(String)\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\\N\tNullable(String)\n+str\tNullable(String)\n+\\N\tNullable(String)\n+str\tNullable(String)\n+\\N\tstr\tNullable(String)\n+\\N\tstr\tNullable(String)\n+\\N\tstr\tNullable(String)\n+\\N\tstr\tNullable(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tLowCardinality(String)\n+str\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\tstr\tLowCardinality(String)\n+\\N\tNullable(String)\n+str\tNullable(String)\n+\\N\tNullable(String)\n+str\tNullable(String)\n+\\N\tstr\tNullable(String)\n+\\N\tstr\tNullable(String)\n+\\N\tstr\tNullable(String)\n+\\N\tstr\tNullable(String)\ndiff --git a/dbms/tests/queries/0_stateless/01049_join_low_card_bug.sql b/dbms/tests/queries/0_stateless/01049_join_low_card_bug.sql\nnew file mode 100644\nindex 000000000000..dee7f5923aa1\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01049_join_low_card_bug.sql\n@@ -0,0 +1,145 @@\n+DROP TABLE IF EXISTS l;\n+DROP TABLE IF EXISTS r;\n+DROP TABLE IF EXISTS nl;\n+DROP TABLE IF EXISTS nr;\n+DROP TABLE IF EXISTS l_lc;\n+DROP TABLE IF EXISTS r_lc;\n+\n+CREATE TABLE l (x UInt32, lc String) ENGINE = Memory;\n+CREATE TABLE r (x UInt32, lc String) ENGINE = Memory;\n+CREATE TABLE nl (x Nullable(UInt32), lc Nullable(String)) ENGINE = Memory;\n+CREATE TABLE nr (x Nullable(UInt32), lc Nullable(String)) ENGINE = Memory;\n+CREATE TABLE l_lc (x UInt32, lc LowCardinality(String)) ENGINE = Memory;\n+CREATE TABLE r_lc (x UInt32, lc LowCardinality(String)) ENGINE = Memory;\n+\n+INSERT INTO r VALUES (0, 'str');\n+INSERT INTO nr VALUES (0, 'str');\n+INSERT INTO r_lc VALUES (0, 'str');\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc);\n+ \n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(r.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(r.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(r.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(r.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc);\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (lc);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (lc);\n+\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l_lc AS l RIGHT JOIN r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l_lc AS l RIGHT JOIN r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l_lc AS l FULL JOIN r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l_lc AS l FULL JOIN r USING (lc);\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (x);\n+SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (lc);\n+SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (x);\n+SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (lc);\n+\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l RIGHT JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l RIGHT JOIN r_lc AS r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l FULL JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l FULL JOIN r_lc AS r USING (lc);\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (lc);\n+SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (lc);\n+\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l_lc AS l RIGHT JOIN nr AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l_lc AS l RIGHT JOIN nr AS r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l_lc AS l FULL JOIN nr AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM l_lc AS l FULL JOIN nr AS r USING (lc);\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (x);\n+SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (lc);\n+SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (x);\n+SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (lc);\n+\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM nl AS l RIGHT JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM nl AS l RIGHT JOIN r_lc AS r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM nl AS l FULL JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM nl AS l FULL JOIN r_lc AS r USING (lc);\n+\n+-- TODO: LC nullability\n+SET join_use_nulls = 1;\n+\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc);\n+\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc);\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (lc);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (lc);\n+\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l RIGHT JOIN r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l RIGHT JOIN r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l FULL JOIN r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l FULL JOIN r USING (lc);\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (x);\n+SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (lc);\n+SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (x);\n+SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (lc);\n+\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l RIGHT JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l RIGHT JOIN r_lc AS r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l FULL JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l FULL JOIN r_lc AS r USING (lc);\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (lc);\n+SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (x);\n+SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (lc);\n+\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (lc);\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (x);\n+SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (lc);\n+SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (x);\n+SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (lc);\n+\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (lc);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (x);\n+SELECT l.lc, r.lc, toTypeName(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (lc);\n+\n+DROP TABLE l;\n+DROP TABLE r;\n+DROP TABLE nl;\n+DROP TABLE nr;\n+DROP TABLE l_lc;\n+DROP TABLE r_lc;\n",
  "problem_statement": "19.16+ Exception in FULL JOIN on a LowCardinality column\nHow to reproduce:\r\n```\r\nCREATE TABLE left \r\n(\r\n  lc   LowCardinality(String)\r\n)\r\nENGINE = Memory;\r\n\r\nCREATE TABLE right \r\n(\r\n  lc   LowCardinality(String)\r\n)\r\nENGINE = Memory;\r\n\r\ninsert into right values ('FNRNaHOZUErO');\r\n\r\nSELECT * FROM left FULL JOIN right USING (lc)\r\n```\r\n19.13.7\r\n```\r\n\u250c\u2500lc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 FNRNaHOZUErO \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n1 rows in set. Elapsed: 0.002 sec.\r\n```\r\n19.16.14\r\nReceived exception from server (version 19.16.14):\r\nCode: 241. DB::Exception: Received from localhost:9000. DB::Exception: Memory limit (for query) exceeded: would use 128.00 TiB (attempt to allocate chunk of 140737488355544 bytes), maximum: 47.03 GiB.\r\n\r\n20.1.6\r\nException on client:\r\nCode: 271. DB::Exception: Data compressed with different methods, given method byte 69, previous method byte 82: while receiving packet from localhost:9000\n",
  "hints_text": "",
  "created_at": "2020-03-11T20:38:32Z"
}