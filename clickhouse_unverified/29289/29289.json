{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 29289,
  "instance_id": "ClickHouse__ClickHouse-29289",
  "issue_numbers": [
    "29227"
  ],
  "base_commit": "0bd962630e9957e032aad39cba73378a4e603382",
  "patch": "diff --git a/src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp b/src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp\nindex 459c0879cdaa..7c5d36b37ced 100644\n--- a/src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp\n+++ b/src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp\n@@ -36,6 +36,7 @@\n #include <rocksdb/convenience.h>\n \n #include <filesystem>\n+#include <shared_mutex>\n \n \n namespace fs = std::filesystem;\n@@ -213,9 +214,9 @@ class EmbeddedRocksDBSource : public SourceWithProgress\n         std::vector<rocksdb::Slice> slices_keys(num_keys);\n \n         const auto & sample_block = metadata_snapshot->getSampleBlock();\n-        const auto & key_column = sample_block.getByName(storage.primary_key);\n+        const auto & key_column = sample_block.getByName(storage.getPrimaryKey());\n         auto columns = sample_block.cloneEmptyColumns();\n-        size_t primary_key_pos = sample_block.getPositionByName(storage.primary_key);\n+        size_t primary_key_pos = sample_block.getPositionByName(storage.getPrimaryKey());\n \n         size_t rows_processed = 0;\n         while (it < end && rows_processed < max_block_size)\n@@ -230,8 +231,7 @@ class EmbeddedRocksDBSource : public SourceWithProgress\n         }\n \n         std::vector<String> values;\n-        auto statuses = storage.rocksdb_ptr->MultiGet(rocksdb::ReadOptions(), slices_keys, &values);\n-\n+        auto statuses = storage.multiGet(slices_keys, values);\n         for (size_t i = 0; i < statuses.size(); ++i)\n         {\n             if (statuses[i].ok())\n@@ -285,7 +285,10 @@ StorageEmbeddedRocksDB::StorageEmbeddedRocksDB(const StorageID & table_id_,\n \n void StorageEmbeddedRocksDB::truncate(const ASTPtr &, const StorageMetadataPtr & , ContextPtr, TableExclusiveLockHolder &)\n {\n+    std::unique_lock<std::shared_mutex> lock(rocksdb_ptr_mx);\n     rocksdb_ptr->Close();\n+    rocksdb_ptr = nullptr;\n+\n     fs::remove_all(rocksdb_dir);\n     fs::create_directories(rocksdb_dir);\n     initDb();\n@@ -460,9 +463,20 @@ static StoragePtr create(const StorageFactory::Arguments & args)\n \n std::shared_ptr<rocksdb::Statistics> StorageEmbeddedRocksDB::getRocksDBStatistics() const\n {\n+    std::shared_lock<std::shared_mutex> lock(rocksdb_ptr_mx);\n+    if (!rocksdb_ptr)\n+        return nullptr;\n     return rocksdb_ptr->GetOptions().statistics;\n }\n \n+std::vector<rocksdb::Status> StorageEmbeddedRocksDB::multiGet(const std::vector<rocksdb::Slice> & slices_keys, std::vector<String> & values) const\n+{\n+    std::shared_lock<std::shared_mutex> lock(rocksdb_ptr_mx);\n+    if (!rocksdb_ptr)\n+        return {};\n+    return rocksdb_ptr->MultiGet(rocksdb::ReadOptions(), slices_keys, &values);\n+}\n+\n void registerStorageEmbeddedRocksDB(StorageFactory & factory)\n {\n     StorageFactory::StorageFeatures features{\ndiff --git a/src/Storages/RocksDB/StorageEmbeddedRocksDB.h b/src/Storages/RocksDB/StorageEmbeddedRocksDB.h\nindex 3f1b3b49492f..71460a1667ed 100644\n--- a/src/Storages/RocksDB/StorageEmbeddedRocksDB.h\n+++ b/src/Storages/RocksDB/StorageEmbeddedRocksDB.h\n@@ -1,8 +1,10 @@\n #pragma once\n \n #include <memory>\n+#include <shared_mutex>\n #include <common/shared_ptr_helper.h>\n #include <Storages/IStorage.h>\n+#include <rocksdb/status.h>\n \n \n namespace rocksdb\n@@ -20,7 +22,6 @@ class Context;\n class StorageEmbeddedRocksDB final : public shared_ptr_helper<StorageEmbeddedRocksDB>, public IStorage, WithContext\n {\n     friend struct shared_ptr_helper<StorageEmbeddedRocksDB>;\n-    friend class EmbeddedRocksDBSource;\n     friend class EmbeddedRocksDBSink;\n     friend class EmbeddedRocksDBBlockInputStream;\n public:\n@@ -50,6 +51,8 @@ class StorageEmbeddedRocksDB final : public shared_ptr_helper<StorageEmbeddedRoc\n     Strings getDataPaths() const override { return {rocksdb_dir}; }\n \n     std::shared_ptr<rocksdb::Statistics> getRocksDBStatistics() const;\n+    std::vector<rocksdb::Status> multiGet(const std::vector<rocksdb::Slice> & slices_keys, std::vector<String> & values) const;\n+    const String & getPrimaryKey() const { return primary_key; }\n \n protected:\n     StorageEmbeddedRocksDB(const StorageID & table_id_,\n@@ -63,6 +66,7 @@ class StorageEmbeddedRocksDB final : public shared_ptr_helper<StorageEmbeddedRoc\n     const String primary_key;\n     using RocksDBPtr = std::unique_ptr<rocksdb::DB>;\n     RocksDBPtr rocksdb_ptr;\n+    mutable std::shared_mutex rocksdb_ptr_mx;\n     String rocksdb_dir;\n \n     void initDb();\ndiff --git a/src/Storages/RocksDB/StorageSystemRocksDB.cpp b/src/Storages/RocksDB/StorageSystemRocksDB.cpp\nindex 7d31d5ddc219..cbb96ed40018 100644\n--- a/src/Storages/RocksDB/StorageSystemRocksDB.cpp\n+++ b/src/Storages/RocksDB/StorageSystemRocksDB.cpp\n@@ -43,7 +43,8 @@ void StorageSystemRocksDB::fillData(MutableColumns & res_columns, ContextPtr con\n     const auto access = context->getAccess();\n     const bool check_access_for_databases = !access->isGranted(AccessType::SHOW_TABLES);\n \n-    std::map<String, std::map<String, StoragePtr>> tables;\n+    using RocksDBStoragePtr = std::shared_ptr<StorageEmbeddedRocksDB>;\n+    std::map<String, std::map<String, RocksDBStoragePtr>> tables;\n     for (const auto & db : DatabaseCatalog::instance().getDatabases())\n     {\n         const bool check_access_for_tables = check_access_for_databases && !access->isGranted(AccessType::SHOW_TABLES, db.first);\n@@ -51,18 +52,17 @@ void StorageSystemRocksDB::fillData(MutableColumns & res_columns, ContextPtr con\n         for (auto iterator = db.second->getTablesIterator(context); iterator->isValid(); iterator->next())\n         {\n             StoragePtr table = iterator->table();\n-            if (!table)\n+            RocksDBStoragePtr rocksdb_table = table ? std::dynamic_pointer_cast<StorageEmbeddedRocksDB>(table) : nullptr;\n+            if (!rocksdb_table)\n                 continue;\n \n-            if (!dynamic_cast<const StorageEmbeddedRocksDB *>(table.get()))\n-                continue;\n             if (check_access_for_tables && !access->isGranted(AccessType::SHOW_TABLES, db.first, iterator->name()))\n                 continue;\n-            tables[db.first][iterator->name()] = table;\n+\n+            tables[db.first][iterator->name()] = rocksdb_table;\n         }\n     }\n \n-\n     MutableColumnPtr col_database_mut = ColumnString::create();\n     MutableColumnPtr col_table_mut = ColumnString::create();\n \n@@ -101,10 +101,9 @@ void StorageSystemRocksDB::fillData(MutableColumns & res_columns, ContextPtr con\n         String database = (*col_database_to_filter)[i].safeGet<const String &>();\n         String table = (*col_table_to_filter)[i].safeGet<const String &>();\n \n-        auto & rocksdb_table = dynamic_cast<StorageEmbeddedRocksDB &>(*tables[database][table]);\n-        auto statistics = rocksdb_table.getRocksDBStatistics();\n+        auto statistics = tables[database][table]->getRocksDBStatistics();\n         if (!statistics)\n-            throw Exception(ErrorCodes::LOGICAL_ERROR, \"rocksdb statistics is not enabled\");\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"RocksDB statistics are not available\");\n \n         for (auto [tick, name] : rocksdb::TickersNameMap)\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02030_rocksdb_race_long.reference b/tests/queries/0_stateless/02030_rocksdb_race_long.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02030_rocksdb_race_long.sh b/tests/queries/0_stateless/02030_rocksdb_race_long.sh\nnew file mode 100755\nindex 000000000000..88c30852c862\n--- /dev/null\n+++ b/tests/queries/0_stateless/02030_rocksdb_race_long.sh\n@@ -0,0 +1,49 @@\n+#!/usr/bin/env bash\n+# Tags: race\n+\n+unset CLICKHOUSE_LOG_COMMENT\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+set -o errexit\n+set -o pipefail\n+\n+echo \"\n+\tDROP TABLE IF EXISTS rocksdb_race;\n+\tCREATE TABLE rocksdb_race (key String, value UInt32) Engine=EmbeddedRocksDB PRIMARY KEY(key);\n+    INSERT INTO rocksdb_race SELECT '1_' || toString(number), number FROM numbers(100000);\n+\" | $CLICKHOUSE_CLIENT -n\n+\n+function read_stat_thread()\n+{\n+    while true; do\n+        echo \"\n+            SELECT * FROM system.rocksdb FORMAT Null;\n+        \" | $CLICKHOUSE_CLIENT -n\n+    done\n+}\n+\n+function truncate_thread()\n+{\n+    while true; do\n+        sleep 3s;\n+        echo \"\n+            TRUNCATE TABLE rocksdb_race;\n+        \" | $CLICKHOUSE_CLIENT -n\n+    done\n+}\n+\n+# https://stackoverflow.com/questions/9954794/execute-a-shell-function-with-timeout\n+export -f read_stat_thread;\n+export -f truncate_thread;\n+\n+TIMEOUT=20\n+\n+timeout $TIMEOUT bash -c read_stat_thread 2> /dev/null &\n+timeout $TIMEOUT bash -c truncate_thread 2> /dev/null &\n+\n+wait\n+\n+$CLICKHOUSE_CLIENT -q \"DROP TABLE rocksdb_race\"\n",
  "problem_statement": "Segfault in StorageEmbeddedRocksDB\nhttps://clickhouse-test-reports.s3.yandex.net/29044/5be9ad2b09c7d10ba80da573b971794aac7837b7/stress_test_(address).html#fail1\r\n\r\n```\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:11.395839 [ 22744 ] {} <Fatal> BaseDaemon: ########################################\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:11.587120 [ 22744 ] {} <Fatal> BaseDaemon: (version 21.11.1.8105, build id: 3CD890B84455123690A5C1FA040744E6D5606EF9) (from thread 3639) (query_id: 187001bc-4862-43ca-9fe5-bd6d48975562) Received signal Segmentation fault (11)\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:11.593330 [ 22744 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:11.596015 [ 22744 ] {} <Fatal> BaseDaemon: Stack trace: 0x31539d06 0x315870e9 0x219b3422 0x219a71b5 0x214fdd4d 0x245cf08a 0x23428006 0x23419cc0 0x23418aa2 0x23a7b79e 0x23a7dac4 0x23ff3910 0x23fee7a0 0x2582f984 0x25855da0 0x2cd25d2f 0x2cd26a21 0x2d01cfe6 0x2d0164fa 0x7fea4aed3609 0x7fea4adfa293\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:17.791030 [ 22771 ] {} <Fatal> BaseDaemon: ########################################\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:17.791811 [ 22771 ] {} <Fatal> BaseDaemon: (version 21.11.1.8105, build id: 3CD890B84455123690A5C1FA040744E6D5606EF9) (from thread 1184) (query_id: 0df5bbc8-1c02-4150-ae3f-831eb83967d0) Received signal Aborted (6)\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:17.796426 [ 22771 ] {} <Fatal> BaseDaemon: \r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:17.799269 [ 22771 ] {} <Fatal> BaseDaemon: Stack trace: 0x7fea4ad1e18b 0x7fea4acfd859 0x31fc61aa 0x31509f0e 0x3150ac0e 0x219adde0 0x219b008d 0x22c54af6 0x22c516db 0x22c509c8 0x23ff3910 0x23fee7a0 0x2582f984 0x25855da0 0x2cd25d2f 0x2cd26a21 0x2d01cfe6 0x2d0164fa 0x7fea4aed3609 0x7fea4adfa293\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:17.839371 [ 22771 ] {} <Fatal> BaseDaemon: 3. gsignal @ 0x4618b in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:17.887459 [ 22771 ] {} <Fatal> BaseDaemon: 4. abort @ 0x25859 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:18.358134 [ 22771 ] {} <Fatal> BaseDaemon: 5.1. inlined from ./obj-x86_64-linux-gnu/../contrib/libcxx/include/string:1444: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__is_long() const\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:18.360867 [ 22771 ] {} <Fatal> BaseDaemon: 5.2. inlined from ../contrib/libcxx/include/string:1538: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_pointer() const\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:18.362911 [ 22771 ] {} <Fatal> BaseDaemon: 5.3. inlined from ../contrib/libcxx/include/string:1264: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::data() const\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:18.363727 [ 22771 ] {} <Fatal> BaseDaemon: 5.4. inlined from ../contrib/libcxx/include/string:1262: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::c_str() const\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:18.366246 [ 22771 ] {} <Fatal> BaseDaemon: 5.5. inlined from ../contrib/rocksdb/port/port_posix.cc:51: rocksdb::port::PthreadCall(char const*, int)\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:18.367026 [ 22771 ] {} <Fatal> BaseDaemon: 5. ../contrib/rocksdb/port/port_posix.cc:77: rocksdb::port::Mutex::~Mutex() @ 0x31fc61aa in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:20.655199 [ 22771 ] {} <Fatal> BaseDaemon: 6. ./obj-x86_64-linux-gnu/../contrib/rocksdb/db/db_impl/db_impl.cc:721: rocksdb::DBImpl::~DBImpl() @ 0x31509f0e in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:22.584279 [ 22744 ] {} <Fatal> BaseDaemon: 3. ./obj-x86_64-linux-gnu/../contrib/rocksdb/db/db_impl/db_impl.cc:3242: rocksdb::DBImpl::GetOptions(rocksdb::ColumnFamilyHandle*) const @ 0x31539d06 in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:24.257962 [ 22771 ] {} <Fatal> BaseDaemon: 7. ./obj-x86_64-linux-gnu/../contrib/rocksdb/db/db_impl/db_impl.cc:716: rocksdb::DBImpl::~DBImpl() @ 0x3150ac0e in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:25.652398 [ 22744 ] {} <Fatal> BaseDaemon: 4. ./obj-x86_64-linux-gnu/../contrib/rocksdb/include/rocksdb/db.h:1259: rocksdb::DB::GetOptions() const @ 0x315870e9 in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:26.439372 [ 22771 ] {} <Fatal> BaseDaemon: 8. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:0: DB::StorageEmbeddedRocksDB::initDb() @ 0x219adde0 in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:26.579350 [ 22744 ] {} <Fatal> BaseDaemon: 5. ./obj-x86_64-linux-gnu/../src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp:463: DB::StorageEmbeddedRocksDB::getRocksDBStatistics() const @ 0x219b3422 in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:27.284973 [ 22771 ] {} <Fatal> BaseDaemon: 9. ./obj-x86_64-linux-gnu/../src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp:0: DB::StorageEmbeddedRocksDB::truncate(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::Context const>, DB::TableExclusiveLockHolder&) @ 0x219b008d in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:28.119433 [ 22744 ] {} <Fatal> BaseDaemon: 6. ./obj-x86_64-linux-gnu/../src/Storages/RocksDB/StorageSystemRocksDB.cpp:0: DB::StorageSystemRocksDB::fillData(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryInfo const&) const @ 0x219a71b5 in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:28.536641 [ 22771 ] {} <Fatal> BaseDaemon: 10. ./obj-x86_64-linux-gnu/../src/Interpreters/InterpreterDropQuery.cpp:207: DB::InterpreterDropQuery::executeToTableImpl(DB::ASTDropQuery&, std::__1::shared_ptr<DB::IDatabase>&, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>&) @ 0x22c54af6 in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:28.841604 [ 22771 ] {} <Fatal> BaseDaemon: 11. ./obj-x86_64-linux-gnu/../src/Interpreters/InterpreterDropQuery.cpp:86: DB::InterpreterDropQuery::executeToTable(DB::ASTDropQuery&) @ 0x22c516db in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:28.946739 [ 22771 ] {} <Fatal> BaseDaemon: 12. ./obj-x86_64-linux-gnu/../src/Interpreters/InterpreterDropQuery.cpp:0: DB::InterpreterDropQuery::execute() @ 0x22c509c8 in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:29.687136 [ 22744 ] {} <Fatal> BaseDaemon: 7.1. inlined from ./obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:658: std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >::size() const\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:29.691227 [ 22744 ] {} <Fatal> BaseDaemon: 7.2. inlined from ../contrib/libcxx/include/vector:1566: std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >::at(unsigned long)\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:29.693257 [ 22744 ] {} <Fatal> BaseDaemon: 7. ../src/Storages/System/IStorageSystemOneBlock.h:63: DB::IStorageSystemOneBlock<DB::StorageSystemRocksDB>::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x214fdd4d in /usr/bin/clickhouse\r\n/var/log/clickhouse-server/clickhouse-server.log.2:2021.09.17 20:15:33.125039 [ 517 ] {} <Fatal> Application: Child process was terminated by signal 11.\r\n```\n",
  "hints_text": "Easily repeatable? \nNo, I don't know how to reproduce it\n> Easily repeatable?\r\n\r\nThat happened during TRUNCATE command for RocksDB table from that line,\r\nhttps://github.com/ClickHouse/ClickHouse/blob/512786346c5d615e512b8cea1c237699d1fe7153/tests/queries/0_stateless/01504_rocksdb.sql#L46\r\n\r\nAnd simultaneously some other query on RocksDB table (probably the other one) was executed.\r\n\r\n```\r\nThread 670 (Thread 0x7fe7b7b2e700 (LWP 3639)):\r\n#0  0x0000000031539d06 in rocksdb::DBImpl::GetOptions (this=<optimized out>, column_family=<optimized out>) at ../contrib/rocksdb/db/db_impl/db_impl.cc:3242\r\n#1  0x00000000315870e9 in rocksdb::DB::GetOptions (this=0x6220001c5100) at ../contrib/rocksdb/include/rocksdb/db.h:1259\r\n#2  0x00000000219b3422 in DB::StorageEmbeddedRocksDB::getRocksDBStatistics (this=<optimized out>) at ../src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp:463\r\n#3  0x00000000219a71b5 in DB::StorageSystemRocksDB::fillData (this=<optimized out>, res_columns=..., context=..., query_info=...) at ../src/Storages/RocksDB/StorageSystemRocksDB.cpp:105\r\n#4  0x00000000214fdd4d in DB::IStorageSystemOneBlock<DB::StorageSystemRocksDB>::read (this=<optimized out>, column_names=..., metadata_snapshot=..., query_info=..., context=...) at ../src/Storages/System/IStorageSystemOneBlock.h:61\r\n#5  0x00000000245cf08a in DB::IStorage::read (this=<optimized out>, query_plan=..., column_names=..., metadata_snapshot=..., query_info=..., context=..., processed_stage=<optimized out>, max_block_size=<optimized out>, num_streams=<optimized out>) at ../src/Storages/IStorage.cpp:108\r\n#6  0x0000000023428006 in DB::InterpreterSelectQuery::executeFetchColumns (this=0x61c005ccb080, processing_stage=<optimized out>, query_plan=...) at ../src/Interpreters/InterpreterSelectQuery.cpp:1984\r\n#7  0x0000000023419cc0 in DB::InterpreterSelectQuery::executeImpl (this=0x61c005ccb080, query_plan=..., prepared_input=..., prepared_pipe=...) at ../src/Interpreters/InterpreterSelectQuery.cpp:1037\r\n#8  0x0000000023418aa2 in DB::InterpreterSelectQuery::buildQueryPlan (this=0x61c005ccb080, query_plan=...) at ../src/Interpreters/InterpreterSelectQuery.cpp:580\r\n#9  0x0000000023a7b79e in DB::InterpreterSelectWithUnionQuery::buildQueryPlan (this=0x6110011857c0, query_plan=...) at ../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:254\r\n#10 0x0000000023a7dac4 in DB::InterpreterSelectWithUnionQuery::execute (this=<optimized out>) at ../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:321\r\n#11 0x0000000023ff3910 in DB::executeQueryImpl (begin=<optimized out>, end=<optimized out>, context=..., internal=false, stage=<optimized out>, istr=<optimized out>) at ../src/Interpreters/executeQuery.cpp:633\r\n#12 0x0000000023fee7a0 in DB::executeQuery (query=..., context=..., internal=<optimized out>, stage=<optimized out>) at ../src/Interpreters/executeQuery.cpp:993\r\n#13 0x000000002582f984 in DB::TCPHandler::runImpl (this=0x61a001992680) at ../src/Server/TCPHandler.cpp:290\r\n#14 0x0000000025855da0 in DB::TCPHandler::run (this=0x61a001992680) at ../src/Server/TCPHandler.cpp:1661\r\n#15 0x000000002cd25d2f in Poco::Net::TCPServerConnection::start (this=0x0) at ../contrib/poco/Net/src/TCPServerConnection.cpp:43\r\n#16 0x000000002cd26a21 in Poco::Net::TCPServerDispatcher::run (this=<optimized out>) at ../contrib/poco/Net/src/TCPServerDispatcher.cpp:115\r\n#17 0x000000002d01cfe6 in Poco::PooledThread::run (this=<optimized out>) at ../contrib/poco/Foundation/src/ThreadPool.cpp:199\r\n#18 0x000000002d0164fa in Poco::ThreadImpl::runnableEntry (pThread=0x61600027c0b8) at ../contrib/poco/Foundation/src/Thread_POSIX.cpp:345\r\n#19 0x00007fea4aed3609 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\r\n#20 0x00007fea4adfa293 in clone () from /lib/x86_64-linux-gnu/libc.so.6\r\n\r\n\r\n\r\nThread 252 (Thread 0x7fe8eb403700 (LWP 1184)):\r\n#0  0x0000000031b1ab98 in rocksdb::HistogramStat::HistogramStat (this=0x7fe74dec8fb0) at ../contrib/rocksdb/monitoring/histogram.cc:65\r\n#1  0x0000000031b320f6 in rocksdb::HistogramImpl::HistogramImpl (this=<optimized out>) at ../contrib/rocksdb/monitoring/histogram.h:120\r\n#2  rocksdb::StatisticsImpl::StatisticsData::StatisticsData (this=0x7fe74dec3b00) at ../contrib/rocksdb/monitoring/statistics.h:83\r\n#3  rocksdb::CoreLocalArray<rocksdb::StatisticsImpl::StatisticsData>::CoreLocalArray (this=this@entry=0x60b002769930) at ../contrib/rocksdb/util/core_local.h:51\r\n#4  0x0000000031b32cdd in rocksdb::StatisticsImpl::StatisticsImpl (this=0x60b0027698e8, stats=...) at ../contrib/rocksdb/monitoring/statistics.cc:271\r\n#5  std::__1::allocator<rocksdb::StatisticsImpl>::construct<rocksdb::StatisticsImpl, decltype(nullptr)>(rocksdb::StatisticsImpl*, decltype(nullptr)&&) (__p=0x60b0027698e8, this=<optimized out>, __args=<optimized out>) at ../contrib/libcxx/include/memory:886\r\n#6  std::__1::allocator_traits<std::__1::allocator<rocksdb::StatisticsImpl> >::__construct<rocksdb::StatisticsImpl, decltype(nullptr)>(std::__1::integral_constant<bool, true>, std::__1::allocator<rocksdb::StatisticsImpl>&, rocksdb::StatisticsImpl*, decltype(nullptr)&&) (__p=0x60b0027698e8, __a=..., __args=<optimized out>) at ../contrib/libcxx/include/__memory/allocator_traits.h:519\r\n#7  std::__1::allocator_traits<std::__1::allocator<rocksdb::StatisticsImpl> >::construct<rocksdb::StatisticsImpl, decltype(nullptr)>(std::__1::allocator<rocksdb::StatisticsImpl>&, rocksdb::StatisticsImpl*, decltype(nullptr)&&) (__p=0x60b0027698e8, __a=..., __args=<optimized out>) at ../contrib/libcxx/include/__memory/allocator_traits.h:481\r\n#8  std::__1::__shared_ptr_emplace<rocksdb::StatisticsImpl, std::__1::allocator<rocksdb::StatisticsImpl> >::__shared_ptr_emplace<decltype(nullptr)>(std::__1::allocator<rocksdb::StatisticsImpl>, decltype(nullptr)&&) (this=0x60b0027698d0, __a=..., __args=<optimized out>) at ../contrib/libcxx/include/memory:2594\r\n#9  std::__1::allocate_shared<rocksdb::StatisticsImpl, std::__1::allocator<rocksdb::StatisticsImpl>, decltype(nullptr), void>(std::__1::allocator<rocksdb::StatisticsImpl> const&, decltype(nullptr)&&) (__a=..., __args=<optimized out>) at ../contrib/libcxx/include/memory:3360\r\n#10 0x0000000031b2ed44 in std::__1::make_shared<rocksdb::StatisticsImpl, decltype(nullptr), void>(decltype(nullptr)&&) (__args=<optimized out>) at ../contrib/libcxx/include/memory:3369\r\n#11 rocksdb::CreateDBStatistics () at ../contrib/rocksdb/monitoring/statistics.cc:268\r\n#12 0x00000000219ab460 in DB::StorageEmbeddedRocksDB::initDb (this=<optimized out>) at ../src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp:302\r\n#13 0x00000000219b008d in DB::StorageEmbeddedRocksDB::truncate (this=0x612000e866c0) at ../src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp:291\r\n#14 0x0000000022c54af6 in DB::InterpreterDropQuery::executeToTableImpl (this=<optimized out>, query=..., db=..., uuid_to_wait=...) at ../src/Interpreters/InterpreterDropQuery.cpp:207\r\n#15 0x0000000022c516db in DB::InterpreterDropQuery::executeToTable (this=0x7fe8eb3f5000, query=...) at ../src/Interpreters/InterpreterDropQuery.cpp:85\r\n#16 0x0000000022c509c8 in DB::InterpreterDropQuery::execute (this=0x604001d6ac50) at ../src/Interpreters/InterpreterDropQuery.cpp:62\r\n#17 0x0000000023ff3910 in DB::executeQueryImpl (begin=<optimized out>, end=<optimized out>, context=..., internal=false, stage=<optimized out>, istr=<optimized out>) at ../src/Interpreters/executeQuery.cpp:633\r\n#18 0x0000000023fee7a0 in DB::executeQuery (query=..., context=..., internal=<optimized out>, stage=<optimized out>) at ../src/Interpreters/executeQuery.cpp:993\r\n#19 0x000000002582f984 in DB::TCPHandler::runImpl (this=0x61a000022e80) at ../src/Server/TCPHandler.cpp:290\r\n#20 0x0000000025855da0 in DB::TCPHandler::run (this=0x61a000022e80) at ../src/Server/TCPHandler.cpp:1661\r\n#21 0x000000002cd25d2f in Poco::Net::TCPServerConnection::start (this=0x7fe74dec9340) at ../contrib/poco/Net/src/TCPServerConnection.cpp:43\r\n#22 0x000000002cd26a21 in Poco::Net::TCPServerDispatcher::run (this=<optimized out>) at ../contrib/poco/Net/src/TCPServerDispatcher.cpp:115\r\n#23 0x000000002d01cfe6 in Poco::PooledThread::run (this=<optimized out>) at ../contrib/poco/Foundation/src/ThreadPool.cpp:199\r\n#24 0x000000002d0164fa in Poco::ThreadImpl::runnableEntry (pThread=0x616000271eb8) at ../contrib/poco/Foundation/src/Thread_POSIX.cpp:345\r\n#25 0x00007fea4aed3609 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\r\n#26 0x00007fea4adfa293 in clone () from /lib/x86_64-linux-gnu/libc.so.6\r\n```",
  "created_at": "2021-09-23T10:54:38Z"
}