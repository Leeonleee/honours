{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67522,
  "instance_id": "ClickHouse__ClickHouse-67522",
  "issue_numbers": [
    "66026"
  ],
  "base_commit": "344000c89a3000b61ef71d5e7fbe08f30df81552",
  "patch": "diff --git a/src/Planner/findParallelReplicasQuery.cpp b/src/Planner/findParallelReplicasQuery.cpp\nindex c89a70be541a..39edb1e6516b 100644\n--- a/src/Planner/findParallelReplicasQuery.cpp\n+++ b/src/Planner/findParallelReplicasQuery.cpp\n@@ -113,13 +113,13 @@ std::stack<const QueryNode *> getSupportingParallelReplicasQuery(const IQueryTre\n     return res;\n }\n \n-class ReplaceTableNodeToDummyVisitor : public InDepthQueryTreeVisitor<ReplaceTableNodeToDummyVisitor, true>\n+class ReplaceTableNodeToDummyVisitor : public InDepthQueryTreeVisitorWithContext<ReplaceTableNodeToDummyVisitor>\n {\n public:\n-    using Base = InDepthQueryTreeVisitor<ReplaceTableNodeToDummyVisitor, true>;\n+    using Base = InDepthQueryTreeVisitorWithContext<ReplaceTableNodeToDummyVisitor>;\n     using Base::Base;\n \n-    void visitImpl(const QueryTreeNodePtr & node)\n+    void enterImpl(QueryTreeNodePtr & node)\n     {\n         auto * table_node = node->as<TableNode>();\n         auto * table_function_node = node->as<TableFunctionNode>();\n@@ -134,21 +134,19 @@ class ReplaceTableNodeToDummyVisitor : public InDepthQueryTreeVisitor<ReplaceTab\n                 ColumnsDescription(storage_snapshot->getColumns(get_column_options)),\n                 storage_snapshot);\n \n-            auto dummy_table_node = std::make_shared<TableNode>(std::move(storage_dummy), context);\n+            auto dummy_table_node = std::make_shared<TableNode>(std::move(storage_dummy), getContext());\n \n             dummy_table_node->setAlias(node->getAlias());\n             replacement_map.emplace(node.get(), std::move(dummy_table_node));\n         }\n     }\n \n-    ContextPtr context;\n     std::unordered_map<const IQueryTreeNode *, QueryTreeNodePtr> replacement_map;\n };\n \n-QueryTreeNodePtr replaceTablesWithDummyTables(const QueryTreeNodePtr & query, const ContextPtr & context)\n+QueryTreeNodePtr replaceTablesWithDummyTables(QueryTreeNodePtr query, const ContextPtr & context)\n {\n-    ReplaceTableNodeToDummyVisitor visitor;\n-    visitor.context = context;\n+    ReplaceTableNodeToDummyVisitor visitor(context);\n     visitor.visit(query);\n \n     return query->cloneAndReplace(visitor.replacement_map);\ndiff --git a/src/Planner/findQueryForParallelReplicas.h b/src/Planner/findQueryForParallelReplicas.h\nindex f5dc69dfa0e0..cdce4ad0b47c 100644\n--- a/src/Planner/findQueryForParallelReplicas.h\n+++ b/src/Planner/findQueryForParallelReplicas.h\n@@ -13,7 +13,7 @@ using QueryTreeNodePtr = std::shared_ptr<IQueryTreeNode>;\n \n struct SelectQueryOptions;\n \n-/// Find a qury which can be executed with parallel replicas up to WithMergableStage.\n+/// Find a query which can be executed with parallel replicas up to WithMergableStage.\n /// Returned query will always contain some (>1) subqueries, possibly with joins.\n const QueryNode * findQueryForParallelReplicas(const QueryTreeNodePtr & query_tree_node, SelectQueryOptions & select_query_options);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03215_analyzer_replace_with_dummy_tables.reference b/tests/queries/0_stateless/03215_analyzer_replace_with_dummy_tables.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03215_analyzer_replace_with_dummy_tables.sql b/tests/queries/0_stateless/03215_analyzer_replace_with_dummy_tables.sql\nnew file mode 100644\nindex 000000000000..6d084c2ac501\n--- /dev/null\n+++ b/tests/queries/0_stateless/03215_analyzer_replace_with_dummy_tables.sql\n@@ -0,0 +1,15 @@\n+create table t (number UInt64) engine MergeTree order by number;\n+\n+SELECT 1\n+FROM\n+(\n+    SELECT number IN (\n+            SELECT number\n+            FROM view(\n+                SELECT number\n+                FROM numbers(1)\n+            )\n+        )\n+    FROM t\n+)\n+SETTINGS allow_experimental_parallel_reading_from_replicas = 1, max_parallel_replicas = 2, allow_experimental_analyzer = 1; -- { serverError CLUSTER_DOESNT_EXIST }\n",
  "problem_statement": "Analyzer: `Table function node numbers_mt is not resolved`\n```sql\r\nwith tab as (select min(number) from t1 prewhere number in (select number from view(select number, row_number() OVER (partition by number % 2 ORDER BY number DESC) from numbers_mt(1e4)) where number != 2 order by number)) select number from t1 union all select * from tab\r\n```\r\nFrom test `02841_not_ready_set_bug.sh`\r\n```\r\n2024.07.03 03:29:22.405928 [ 3886 ] {2f6d89ab-62f6-4977-a443-6dbb6a2500ce} <Debug> executeQuery: (from [::1]:35428) (comment: 02841_not_ready_set_bug.sh) with tab as (select min(number) from t1 prewhere number in (select number from view(select number, row_number() OVER (partition by number % 2 ORDER BY number DESC) from numbers_mt(1e4)) where number != 2 order by number)) select number from t1 union all select * from tab; (stage: Complete)\r\n2024.07.03 03:29:22.417630 [ 3886 ] {2f6d89ab-62f6-4977-a443-6dbb6a2500ce} <Trace> Planner: Query to stage Complete only analyze\r\n2024.07.03 03:29:22.421644 [ 3886 ] {2f6d89ab-62f6-4977-a443-6dbb6a2500ce} <Trace> Planner: Query from stage FetchColumns to stage Complete only analyze\r\n2024.07.03 03:29:22.431515 [ 3886 ] {2f6d89ab-62f6-4977-a443-6dbb6a2500ce} <Fatal> : Logical error: 'Table function node numbers_mt is not resolved'.\r\n```\r\n\r\n\n",
  "hints_text": "cc @KochetovNicolai, @novikd \nRelated to parallel replicas (findQueryForParallelReplicas in stack trace). Minimized repro:\r\n```\r\ndrop table if exists t;\r\ncreate table t (number UInt64) engine MergeTree order by number;\r\n\r\nselect 1 from (select number in (select number from view(select number from numbers(1))) from t) settings allow_experimental_parallel_reading_from_replicas=1, max_parallel_replicas=2;\r\n```\r\n\r\ngdb.log with stack trace: https://s3.amazonaws.com/clickhouse-test-reports/58934/31dc49de8d46a1fdd86d42fdadc90a689ecffd07/stress_test__debug_/gdb.log\nWith old analyzer\r\n```\r\n:) select 1 from (select number in (select number from view(select number from numbers(1))) from t) settings allow_experimental_parallel_reading_from_replicas=1, max_parallel_replicas=2, allow_experimental_analyzer=0; \r\n\r\nSELECT 1\r\nFROM\r\n(\r\n    SELECT number IN (\r\n            SELECT number\r\n            FROM view(\r\n                SELECT number\r\n                FROM numbers(1)\r\n            )\r\n        )\r\n    FROM t\r\n)\r\nSETTINGS allow_experimental_parallel_reading_from_replicas = 1, max_parallel_replicas = 2, allow_experimental_analyzer = 0\r\n\r\nQuery id: 1d93a413-f0b5-49ad-87a9-db0ba950f05e\r\n\r\n\r\nElapsed: 0.017 sec. \r\n\r\nReceived exception from server (version 24.7.1):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Unknown column: in(number, _subquery3), there are only columns . (UNKNOWN_IDENTIFIER)\r\n\r\n\r\n```\nAlso here: https://s3.amazonaws.com/clickhouse-test-reports/67324/7a53a14940ae1be299305548f0d024de7f279fe3/stress_test__debug_.html",
  "created_at": "2024-07-31T12:50:44Z"
}