diff --git a/src/Columns/IColumn.h b/src/Columns/IColumn.h
index 090537d67704..4af593bb6583 100644
--- a/src/Columns/IColumn.h
+++ b/src/Columns/IColumn.h
@@ -44,7 +44,7 @@ class IColumn : public COW<IColumn>
     /// Name of a Column kind, without parameters (example: FixedString, Array).
     virtual const char * getFamilyName() const = 0;
 
-    /** If column isn't constant, returns nullptr (or itself).
+    /** If column isn't constant, returns itself.
       * If column is constant, transforms constant to full column (if column type allows such transform) and return it.
       */
     virtual Ptr convertToFullColumnIfConst() const { return getPtr(); }
diff --git a/src/Functions/least.cpp b/src/Functions/least.cpp
index f2e7c1f15d21..ba87e4bd7e41 100644
--- a/src/Functions/least.cpp
+++ b/src/Functions/least.cpp
@@ -1,6 +1,8 @@
 #include <Functions/FunctionFactory.h>
 #include <Functions/FunctionBinaryArithmetic.h>
 #include <Core/AccurateComparison.h>
+#include <Functions/LeastGreatestGeneric.h>
+
 
 namespace DB
 {
@@ -57,7 +59,7 @@ using FunctionLeast = FunctionBinaryArithmetic<LeastImpl, NameLeast>;
 
 void registerFunctionLeast(FunctionFactory & factory)
 {
-    factory.registerFunction<FunctionLeast>(FunctionFactory::CaseInsensitive);
+    factory.registerFunction<LeastGreatestOverloadResolver<LeastGreatest::Least, FunctionLeast>>(FunctionFactory::CaseInsensitive);
 }
 
 }
