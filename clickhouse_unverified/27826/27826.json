{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27826,
  "instance_id": "ClickHouse__ClickHouse-27826",
  "issue_numbers": [
    "27825"
  ],
  "base_commit": "cd07cabada3c12c520a234447a34717025c72a6b",
  "patch": "diff --git a/src/Columns/ColumnArray.cpp b/src/Columns/ColumnArray.cpp\nindex 1601fb1ff94e..7c7c6a4d9dbe 100644\n--- a/src/Columns/ColumnArray.cpp\n+++ b/src/Columns/ColumnArray.cpp\n@@ -565,7 +565,7 @@ void ColumnArray::expand(const IColumn::Filter & mask, bool inverted)\n     while (index >= 0)\n     {\n         offsets_data[index] = last_offset;\n-        if (mask[index] ^ inverted)\n+        if (!!mask[index] ^ inverted)\n         {\n             if (from < 0)\n                 throw Exception(\"Too many bytes in mask\", ErrorCodes::LOGICAL_ERROR);\ndiff --git a/src/Columns/ColumnFixedString.cpp b/src/Columns/ColumnFixedString.cpp\nindex e818e9744935..ce4f11a38d6a 100644\n--- a/src/Columns/ColumnFixedString.cpp\n+++ b/src/Columns/ColumnFixedString.cpp\n@@ -354,7 +354,7 @@ void ColumnFixedString::expand(const IColumn::Filter & mask, bool inverted)\n     chars.resize_fill(mask.size() * n, 0);\n     while (index >= 0)\n     {\n-        if (mask[index] ^ inverted)\n+        if (!!mask[index] ^ inverted)\n         {\n             if (from < 0)\n                 throw Exception(\"Too many bytes in mask\", ErrorCodes::LOGICAL_ERROR);\ndiff --git a/src/Columns/ColumnString.cpp b/src/Columns/ColumnString.cpp\nindex 2f5903abfc1a..d02fa66baf46 100644\n--- a/src/Columns/ColumnString.cpp\n+++ b/src/Columns/ColumnString.cpp\n@@ -178,7 +178,7 @@ void ColumnString::expand(const IColumn::Filter & mask, bool inverted)\n     while (index >= 0)\n     {\n         offsets_data[index] = last_offset;\n-        if (mask[index] ^ inverted)\n+        if (!!mask[index] ^ inverted)\n         {\n             if (from < 0)\n                 throw Exception(\"Too many bytes in mask\", ErrorCodes::LOGICAL_ERROR);\ndiff --git a/src/Columns/MaskOperations.cpp b/src/Columns/MaskOperations.cpp\nindex 6852c895d517..759d0af71272 100644\n--- a/src/Columns/MaskOperations.cpp\n+++ b/src/Columns/MaskOperations.cpp\n@@ -26,7 +26,7 @@ void expandDataByMask(PaddedPODArray<T> & data, const PaddedPODArray<UInt8> & ma\n     data.resize(mask.size());\n     while (index >= 0)\n     {\n-        if (mask[index] ^ inverted)\n+        if (!!mask[index] ^ inverted)\n         {\n             if (from < 0)\n                 throw Exception(\"Too many bytes in mask\", ErrorCodes::LOGICAL_ERROR);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01822_short_circuit.reference b/tests/queries/0_stateless/01822_short_circuit.reference\nindex ec805b2aa763..96c4e1612447 100644\n--- a/tests/queries/0_stateless/01822_short_circuit.reference\n+++ b/tests/queries/0_stateless/01822_short_circuit.reference\n@@ -100,6 +100,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -160,6 +180,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -220,6 +260,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -280,6 +340,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -340,6 +420,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -400,6 +500,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -460,6 +580,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -520,6 +660,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -580,6 +740,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -640,6 +820,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -700,6 +900,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -759,6 +979,26 @@\n 17\n 18\n 19\n+0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n 00\n 22\n 33\n@@ -819,6 +1059,26 @@\n 1717\n 1818\n 1919\n+00\n+\\N\n+\\N\n+\\N\n+\\N\n+55\n+\\N\n+\\N\n+\\N\n+\\N\n+1010\n+\\N\n+\\N\n+\\N\n+\\N\n+1515\n+\\N\n+\\N\n+\\N\n+\\N\n 10\n 12\n 13\n@@ -879,6 +1139,26 @@\n 27\n 28\n 29\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+20\n+\\N\n+\\N\n+\\N\n+\\N\n+25\n+\\N\n+\\N\n+\\N\n+\\N\n 1970-01-01\n 1970-01-01\n 1970-01-01\n@@ -939,6 +1219,26 @@\n 1970-01-01\n 1970-01-01\n 1970-01-01\n+1970-01-01\n+\\N\n+\\N\n+\\N\n+\\N\n+1970-01-01\n+\\N\n+\\N\n+\\N\n+\\N\n+1970-01-01\n+\\N\n+\\N\n+\\N\n+\\N\n+1970-01-01\n+\\N\n+\\N\n+\\N\n+\\N\n 1970-01-01 00:00:00\n 1970-01-01 05:33:20\n 1970-01-01 08:20:00\n@@ -999,6 +1299,26 @@\n 1970-01-02 23:13:20\n 1970-01-03 02:00:00\n 1970-01-03 04:46:40\n+1970-01-01 00:00:00\n+\\N\n+\\N\n+\\N\n+\\N\n+1970-01-01 13:53:20\n+\\N\n+\\N\n+\\N\n+\\N\n+1970-01-02 03:46:40\n+\\N\n+\\N\n+\\N\n+\\N\n+1970-01-02 17:40:00\n+\\N\n+\\N\n+\\N\n+\\N\n 0\n 2\n 3\n@@ -1060,6 +1380,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -1120,6 +1460,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -1180,6 +1540,26 @@\n 18\n 19\n 0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n+0\n 2\n 3\n 4\n@@ -1239,6 +1619,26 @@\n 17\n 18\n 19\n+0\n+\\N\n+\\N\n+\\N\n+\\N\n+5\n+\\N\n+\\N\n+\\N\n+\\N\n+10\n+\\N\n+\\N\n+\\N\n+\\N\n+15\n+\\N\n+\\N\n+\\N\n+\\N\n []\n [0,1]\n [0,1,2]\ndiff --git a/tests/queries/0_stateless/01822_short_circuit.sql b/tests/queries/0_stateless/01822_short_circuit.sql\nindex db50721a4681..fe8a0315d4a4 100644\n--- a/tests/queries/0_stateless/01822_short_circuit.sql\n+++ b/tests/queries/0_stateless/01822_short_circuit.sql\n@@ -11,82 +11,102 @@ select count() from (select if(number >= 0, number, sleep(1)) from numbers(10000\n select if(number % 5 == 0, toInt8OrZero(toString(number)), toInt8OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toInt8OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toInt8OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toInt8OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toUInt8OrZero(toString(number)), toUInt8OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toUInt8OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toUInt8OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toUInt8OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toInt32OrZero(toString(number)), toInt32OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toInt32OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toInt32OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toInt32OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toUInt32OrZero(toString(number)), toUInt32OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toUInt32OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toUInt32OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toUInt32OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toInt64OrZero(toString(number)), toInt64OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toInt64OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toInt64OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toInt64OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toUInt64OrZero(toString(number)), toUInt64OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toUInt64OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toUInt64OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toUInt64OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toInt128OrZero(toString(number)), toInt128OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toInt128OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toInt128OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toInt128OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toUInt128OrZero(toString(number)), toUInt128OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toUInt128OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toUInt128OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toUInt128OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toInt256OrZero(toString(number)), toInt256OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toInt256OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toInt256OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toInt256OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toUInt256OrZero(toString(number)), toUInt256OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toUInt256OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toUInt256OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toUInt256OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toFloat32OrZero(toString(number)), toFloat32OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toFloat32OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toFloat32OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toFloat32OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toFloat64OrZero(toString(number)), toFloat64OrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toFloat64OrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toFloat64OrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toFloat64OrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, repeat(toString(number), 2), repeat(toString(number + 1), 2)) from numbers(20);\n select if(number % 5 == 0, repeat(toString(number), 2), Null) from numbers(20);\n select if(number % 5 == 0, Null, repeat(toString(number), 2)) from numbers(20);\n+select if(number % 5, Null, repeat(toString(number), 2)) from numbers(20);\n \n select if(number % 5 == 0, toFixedString(toString(number + 10), 2), toFixedString(toString(number + 11), 2)) from numbers(20);\n select if(number % 5 == 0, toFixedString(toString(number + 10), 2), Null) from numbers(20);\n select if(number % 5 == 0, Null, toFixedString(toString(number + 10), 2)) from numbers(20);\n+select if(number % 5, Null, toFixedString(toString(number + 10), 2)) from numbers(20);\n \n select if(number % 5 == 0, toDateOrZero(toString(number)), toDateOrZero(toString(number + 1))) from numbers(20);\n select if(number % 5 == 0, toDateOrZero(toString(number)), Null) from numbers(20);\n select if(number % 5 == 0, Null, toDateOrZero(toString(number))) from numbers(20);\n+select if(number % 5, Null, toDateOrZero(toString(number))) from numbers(20);\n \n select if(number % 5 == 0, toDateTimeOrZero(toString(number * 10000), 'UTC'), toDateTimeOrZero(toString((number + 1) * 10000), 'UTC')) from numbers(20);\n select if(number % 5 == 0, toDateTimeOrZero(toString(number * 10000), 'UTC'), Null) from numbers(20);\n select if(number % 5 == 0, Null, toDateTimeOrZero(toString(number * 10000), 'UTC')) from numbers(20);\n+select if(number % 5, Null, toDateTimeOrZero(toString(number * 10000), 'UTC')) from numbers(20);\n \n select if(number % 5 == 0, toDecimal32OrZero(toString(number), 5), toDecimal32OrZero(toString(number + 1), 5)) from numbers(20);\n select if(number % 5 == 0, toDecimal32OrZero(toString(number), 5), Null) from numbers(20);\n select if(number % 5 == 0, Null, toDecimal32OrZero(toString(number), 5)) from numbers(20);\n+select if(number % 5, Null, toDecimal32OrZero(toString(number), 5)) from numbers(20);\n \n select if(number % 5 == 0, toDecimal64OrZero(toString(number), 5), toDecimal64OrZero(toString(number + 1), 5)) from numbers(20);\n select if(number % 5 == 0, toDecimal64OrZero(toString(number), 5), Null) from numbers(20);\n select if(number % 5 == 0, Null, toDecimal64OrZero(toString(number), 5)) from numbers(20);\n+select if(number % 5, Null, toDecimal64OrZero(toString(number), 5)) from numbers(20);\n \n select if(number % 5 == 0, toDecimal128OrZero(toString(number), 5), toDecimal128OrZero(toString(number + 1), 5)) from numbers(20);\n select if(number % 5 == 0, toDecimal128OrZero(toString(number), 5), Null) from numbers(20);\n select if(number % 5 == 0, Null, toDecimal128OrZero(toString(number), 5)) from numbers(20);\n+select if(number % 5, Null, toDecimal128OrZero(toString(number), 5)) from numbers(20);\n \n select if(number % 5 == 0, toDecimal256OrZero(toString(number), 5), toDecimal256OrZero(toString(number + 1), 5)) from numbers(20);\n select if(number % 5 == 0, toDecimal256OrZero(toString(number), 5), Null) from numbers(20);\n select if(number % 5 == 0, Null, toDecimal256OrZero(toString(number), 5)) from numbers(20);\n+select if(number % 5, Null, toDecimal256OrZero(toString(number), 5)) from numbers(20);\n \n select if(number % 5 == 0, range(number), range(number + 1)) from numbers(20);\n select if(number % 5 == 0, replicate(toString(number), range(number)), replicate(toString(number), range(number + 1))) from numbers(20);\n",
  "problem_statement": "if(): Logical error: 'Too many bytes in mask'.\nFrom https://github.com/ClickHouse/ClickHouse/pull/27816 CI fuzzer\r\nhttps://clickhouse-test-reports.s3.yandex.net/27816/08b9f75e966a360fb2963dd5b7aa91839c3811de/fuzzer_debug/report.html#fail1\r\n\r\nMinimized:\r\n```sql\r\n    SELECT\r\n        if(number % -2, toFixedString(toString(number), NULL), toFixedString(toString(-number), 65536)) AS x\r\n    FROM system.numbers\r\n    LIMIT 3\r\n```\r\n\r\nAssertion:\r\n```\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:00.928373 [ 268 ] {70e80805-74ef-4b12-9ef0-64fd78480273} <Fatal> : Logical error: 'Too many bytes in mask'.\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:00.929758 [ 288 ] <Fatal> BaseDaemon: ########################################\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:00.929981 [ 288 ] <Fatal> BaseDaemon: (version 21.9.1.7811, build id: 53E2D6CF5BD31F68345DA6F7A2ABF780843916CB) (from thread 268) (query_id: 70e80805-74ef-4b12-9ef0-64fd78480273) Received signal Aborted (6)\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:00.930155 [ 288 ] <Fatal> BaseDaemon: \r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:00.930401 [ 288 ] <Fatal> BaseDaemon: Stack trace: 0x7fe3b781218b 0x7fe3b77f1859 0x1369c966 0x1369ca75 0x1f12fc2f 0x1a21d468 0x1a21b201 0x1631a77e 0x1dc56e8d 0x1dc579d4 0x1e542a82 0x1e541ef6 0x1ffeaf49 0x1bc53825 0x1fc48848 0x1fcb5d1c 0x1fcb5c7f 0x1fcb5c1d 0x1fcb5bdd 0x1fcb5bb5 0x1fcb5b7d 0x136eb7a9 0x136ea8d5 0x1fcb456d 0x1fcb4f59 0x1fcb2e04 0x1fcb20f3 0x1fcd4037 0x1fcd3f66 0x1fcd3edd 0x1fcd3e81 0x1fcd3d92 0x1fcd3c8c 0x1fcd3b9d 0x1fcd3b5d 0x1fcd3b35 0x1fcd3b00 0x136eb7a9 0x136ea8d5 0x1371196e 0x13719024\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:00.930703 [ 288 ] <Fatal> BaseDaemon: 4. raise @ 0x4618b in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:00.930855 [ 288 ] <Fatal> BaseDaemon: 5. abort @ 0x25859 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:01.213913 [ 288 ] <Fatal> BaseDaemon: 6. ./obj-x86_64-linux-gnu/../src/Common/Exception.cpp:53: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool, std::__1::vector<void*, std::__1::allocator<void*> > const&) @ 0x1369c966 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:01.493926 [ 288 ] <Fatal> BaseDaemon: 7. ./obj-x86_64-linux-gnu/../src/Common/Exception.cpp:60: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x1369ca75 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:01.647100 [ 288 ] <Fatal> BaseDaemon: 8. ./obj-x86_64-linux-gnu/../src/Columns/ColumnFixedString.cpp:360: DB::ColumnFixedString::expand(DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul> const&, bool) @ 0x1f12fc2f in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:02.315645 [ 288 ] <Fatal> BaseDaemon: 9. ./obj-x86_64-linux-gnu/../src/Functions/if.cpp:902: DB::(anonymous namespace)::FunctionIf::executeForNullThenElse(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x1a21d468 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:02.978943 [ 288 ] <Fatal> BaseDaemon: 10. ./obj-x86_64-linux-gnu/../src/Functions/if.cpp:1034: DB::(anonymous namespace)::FunctionIf::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x1a21b201 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:03.083469 [ 288 ] <Fatal> BaseDaemon: 11. ./obj-x86_64-linux-gnu/../src/Functions/IFunctionAdaptors.h:21: DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x1631a77e in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:03.413299 [ 288 ] <Fatal> BaseDaemon: 12. ./obj-x86_64-linux-gnu/../src/Functions/IFunction.cpp:217: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x1dc56e8d in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:03.737926 [ 288 ] <Fatal> BaseDaemon: 13. ./obj-x86_64-linux-gnu/../src/Functions/IFunction.cpp:260: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x1dc579d4 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:04.377409 [ 288 ] <Fatal> BaseDaemon: 14. ./obj-x86_64-linux-gnu/../src/Interpreters/ExpressionActions.cpp:601: DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool) @ 0x1e542a82 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:04.926734 [ 288 ] <Fatal> BaseDaemon: 15. ./obj-x86_64-linux-gnu/../src/Interpreters/ExpressionActions.cpp:718: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x1e541ef6 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:05.103233 [ 288 ] <Fatal> BaseDaemon: 16. ./obj-x86_64-linux-gnu/../src/Processors/Transforms/ExpressionTransform.cpp:23: DB::ExpressionTransform::transform(DB::Chunk&) @ 0x1ffeaf49 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:05.374215 [ 288 ] <Fatal> BaseDaemon: 17. ./obj-x86_64-linux-gnu/../src/Processors/ISimpleTransform.h:43: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x1bc53825 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:05.502076 [ 288 ] <Fatal> BaseDaemon: 18. ./obj-x86_64-linux-gnu/../src/Processors/ISimpleTransform.cpp:89: DB::ISimpleTransform::work() @ 0x1fc48848 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:06.013628 [ 288 ] <Fatal> BaseDaemon: 19. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:88: DB::executeJob(DB::IProcessor*) @ 0x1fcb5d1c in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:06.518688 [ 288 ] <Fatal> BaseDaemon: 20. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:105: DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0::operator()() const @ 0x1fcb5c7f in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:07.032405 [ 288 ] <Fatal> BaseDaemon: 21. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3676: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x1fcb5c1d in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:07.522096 [ 288 ] <Fatal> BaseDaemon: 22. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x1fcb5bdd in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:08.013799 [ 288 ] <Fatal> BaseDaemon: 23. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:1608: std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()>::operator()() @ 0x1fcb5bb5 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:08.506159 [ 288 ] <Fatal> BaseDaemon: 24. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2089: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()> >(std::__1::__function::__policy_storage const*) @ 0x1fcb5b7d in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:08.754163 [ 288 ] <Fatal> BaseDaemon: 25. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2221: std::__1::__function::__policy_func<void ()>::operator()() const @ 0x136eb7a9 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:09.000065 [ 288 ] <Fatal> BaseDaemon: 26. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2560: std::__1::function<void ()>::operator()() const @ 0x136ea8d5 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:09.476803 [ 288 ] <Fatal> BaseDaemon: 27. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:600: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1fcb456d in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:09.957124 [ 288 ] <Fatal> BaseDaemon: 28. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:485: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0x1fcb4f59 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:10.415315 [ 288 ] <Fatal> BaseDaemon: 29. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:824: DB::PipelineExecutor::executeImpl(unsigned long) @ 0x1fcb2e04 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:10.898254 [ 288 ] <Fatal> BaseDaemon: 30. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:407: DB::PipelineExecutor::execute(unsigned long) @ 0x1fcb20f3 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:11.303097 [ 288 ] <Fatal> BaseDaemon: 31. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:80: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) @ 0x1fcd4037 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:11.699627 [ 288 ] <Fatal> BaseDaemon: 32. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:108: DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const @ 0x1fcd3f66 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:12.094405 [ 288 ] <Fatal> BaseDaemon: 33. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3682: decltype(std::__1::forward<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) @ 0x1fcd3edd in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:12.488310 [ 288 ] <Fatal> BaseDaemon: 34. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/tuple:1415: decltype(auto) std::__1::__apply_tuple_impl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) @ 0x1fcd3e81 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:12.880922 [ 288 ] <Fatal> BaseDaemon: 35. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/tuple:1424: decltype(auto) std::__1::apply<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&) @ 0x1fcd3d92 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:13.277191 [ 288 ] <Fatal> BaseDaemon: 36. ./obj-x86_64-linux-gnu/../src/Common/ThreadPool.h:183: ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()::operator()() @ 0x1fcd3c8c in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:13.669550 [ 288 ] <Fatal> BaseDaemon: 37. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3676: decltype(std::__1::forward<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) @ 0x1fcd3b9d in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:14.062313 [ 288 ] <Fatal> BaseDaemon: 38. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&...) @ 0x1fcd3b5d in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:14.460004 [ 288 ] <Fatal> BaseDaemon: 39. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:1608: std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>::operator()() @ 0x1fcd3b35 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:14.864839 [ 288 ] <Fatal> BaseDaemon: 40. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2089: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0x1fcd3b00 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:15.120158 [ 288 ] <Fatal> BaseDaemon: 41. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2221: std::__1::__function::__policy_func<void ()>::operator()() const @ 0x136eb7a9 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:15.372076 [ 288 ] <Fatal> BaseDaemon: 42. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2560: std::__1::function<void ()>::operator()() const @ 0x136ea8d5 in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:15.462576 [ 288 ] <Fatal> BaseDaemon: 43. ./obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:269: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x1371196e in /workspace/clickhouse\r\n[linux-ubuntu-16-04-xenial] 2021.08.18 17:57:15.563145 [ 288 ] <Fatal> BaseDaemon: 44. ./obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:136: void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()::operator()() const @ 0x13719024 in /workspace/clickhouse\r\n```\r\n\r\n\r\nA build from 2 days ago is fine and master/HEAD fails so it's fairly recent. Likely introduced by https://github.com/ClickHouse/ClickHouse/pull/23367 cc/ @Avogar \r\n\r\n\n",
  "hints_text": "",
  "created_at": "2021-08-18T16:14:59Z"
}