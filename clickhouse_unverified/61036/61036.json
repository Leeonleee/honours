{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 61036,
  "instance_id": "ClickHouse__ClickHouse-61036",
  "issue_numbers": [
    "48634"
  ],
  "base_commit": "086ef14fe62ed0c58bdaf1d46df045672dc53ebf",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex a2bd6b6016ad..fac34003553f 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -50,6 +50,7 @@\n #include <Functions/registerFunctions.h>\n #include <AggregateFunctions/registerAggregateFunctions.h>\n #include <Formats/registerFormats.h>\n+#include <Formats/FormatFactory.h>\n \n namespace fs = std::filesystem;\n using namespace std::literals;\n@@ -1137,6 +1138,13 @@ void Client::processOptions(const OptionsDescription & options_description,\n }\n \n \n+static bool checkIfStdoutIsRegularFile()\n+{\n+    struct stat file_stat;\n+    return fstat(STDOUT_FILENO, &file_stat) == 0 && S_ISREG(file_stat.st_mode);\n+}\n+\n+\n void Client::processConfig()\n {\n     if (!queries.empty() && config().has(\"queries-file\"))\n@@ -1173,7 +1181,14 @@ void Client::processConfig()\n     pager = config().getString(\"pager\", \"\");\n \n     is_default_format = !config().has(\"vertical\") && !config().has(\"format\");\n-    if (config().has(\"vertical\"))\n+    if (is_default_format && checkIfStdoutIsRegularFile())\n+    {\n+        is_default_format = false;\n+        std::optional<String> format_from_file_name;\n+        format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(STDOUT_FILENO);\n+        format = format_from_file_name ? *format_from_file_name : \"TabSeparated\";\n+    }\n+    else if (config().has(\"vertical\"))\n         format = config().getString(\"format\", \"Vertical\");\n     else\n         format = config().getString(\"format\", is_interactive ? \"PrettyCompact\" : \"TabSeparated\");\ndiff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 68f0e52ce087..20974dd97512 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -327,6 +327,14 @@ static bool checkIfStdinIsRegularFile()\n     return fstat(STDIN_FILENO, &file_stat) == 0 && S_ISREG(file_stat.st_mode);\n }\n \n+\n+static bool checkIfStdoutIsRegularFile()\n+{\n+    struct stat file_stat;\n+    return fstat(STDOUT_FILENO, &file_stat) == 0 && S_ISREG(file_stat.st_mode);\n+}\n+\n+\n std::string LocalServer::getInitialCreateTableQuery()\n {\n     if (!config().has(\"table-structure\") && !config().has(\"table-file\") && !config().has(\"table-data-format\") && (!checkIfStdinIsRegularFile() || queries.empty()))\n@@ -638,7 +646,14 @@ void LocalServer::processConfig()\n     if (config().has(\"macros\"))\n         global_context->setMacros(std::make_unique<Macros>(config(), \"macros\", log));\n \n-    format = config().getString(\"output-format\", config().getString(\"format\", is_interactive ? \"PrettyCompact\" : \"TSV\"));\n+    if (!config().has(\"output-format\") && !config().has(\"format\") && checkIfStdoutIsRegularFile())\n+    {\n+        std::optional<String> format_from_file_name;\n+        format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(STDOUT_FILENO);\n+        format = format_from_file_name ? *format_from_file_name : \"TSV\";\n+    }\n+    else\n+        format = config().getString(\"output-format\", config().getString(\"format\", is_interactive ? \"PrettyCompact\" : \"TSV\"));\n     insert_format = \"Values\";\n \n     /// Setting value from cmd arg overrides one from config\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02181_detect_output_format_by_file_extension.reference b/tests/queries/0_stateless/02181_detect_output_format_by_file_extension.reference\nnew file mode 100644\nindex 000000000000..7b36cc96f5ec\n--- /dev/null\n+++ b/tests/queries/0_stateless/02181_detect_output_format_by_file_extension.reference\n@@ -0,0 +1,20 @@\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\ndiff --git a/tests/queries/0_stateless/02181_detect_output_format_by_file_extension.sh b/tests/queries/0_stateless/02181_detect_output_format_by_file_extension.sh\nnew file mode 100755\nindex 000000000000..ec1edd710a1f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02181_detect_output_format_by_file_extension.sh\n@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel, no-fasttest\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+\n+$CLICKHOUSE_LOCAL -q \"select * from numbers(10)\" > $CLICKHOUSE_TMP/data.parquet\n+$CLICKHOUSE_LOCAL -q \"select * from table\" < $CLICKHOUSE_TMP/data.parquet \n+\n+$CLICKHOUSE_CLIENT -q \"select * from numbers(10)\" > $CLICKHOUSE_TMP/data.parquet\n+$CLICKHOUSE_LOCAL -q \"select * from table\" < $CLICKHOUSE_TMP/data.parquet \n",
  "problem_statement": "Detect output format by file exctension in clickhouse-local (and maybe in client also)\n```\r\nclickhouse local --query \"SELECT * FROM table\" < California.jsonl > California.parquet\r\n```\r\n\r\nSimilar how we detect it for input format.\n",
  "hints_text": "Hey there! \ud83d\udc4b I'm new to this repository and eager to contribute! \ud83c\udf1f Are you still working on this?\nHi! No, currently I don't work on it. Feel free to implement it. I will assign it to you. If you have any questions, ask here, I will try to help\nIs this still working?\nNobody is working on it right now, feel free to implement it.",
  "created_at": "2024-03-07T13:45:07Z"
}