{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32490,
  "instance_id": "ClickHouse__ClickHouse-32490",
  "issue_numbers": [
    "32391"
  ],
  "base_commit": "eaf1d764a703a9304d44b0e955f15b46823bbfde",
  "patch": "diff --git a/src/IO/WriteHelpers.cpp b/src/IO/WriteHelpers.cpp\nindex 61bfc281050a..b41f621e0b93 100644\n--- a/src/IO/WriteHelpers.cpp\n+++ b/src/IO/WriteHelpers.cpp\n@@ -68,8 +68,13 @@ void writeException(const Exception & e, WriteBuffer & buf, bool with_stack_trac\n template <typename F>\n static inline void writeProbablyQuotedStringImpl(const StringRef & s, WriteBuffer & buf, F && write_quoted_string)\n {\n-    if (isValidIdentifier(std::string_view{s}))\n+    if (isValidIdentifier(std::string_view{s})\n+        /// This are valid identifiers but are problematic if present unquoted in SQL query.\n+        && !(s.size == strlen(\"distinct\") && 0 == strncasecmp(s.data, \"distinct\", strlen(\"distinct\")))\n+        && !(s.size == strlen(\"all\") && 0 == strncasecmp(s.data, \"all\", strlen(\"all\"))))\n+    {\n         writeString(s, buf);\n+    }\n     else\n         write_quoted_string(s, buf);\n }\ndiff --git a/src/Interpreters/ClusterProxy/executeQuery.h b/src/Interpreters/ClusterProxy/executeQuery.h\nindex 0a77b7b60356..4cf85870e48e 100644\n--- a/src/Interpreters/ClusterProxy/executeQuery.h\n+++ b/src/Interpreters/ClusterProxy/executeQuery.h\n@@ -34,7 +34,8 @@ class IStreamFactory;\n ///   - optimize_skip_unused_shards_nesting\n ///\n /// @return new Context with adjusted settings\n-ContextMutablePtr updateSettingsForCluster(const Cluster & cluster, ContextPtr context, const Settings & settings, Poco::Logger * log = nullptr);\n+ContextMutablePtr updateSettingsForCluster(\n+    const Cluster & cluster, ContextPtr context, const Settings & settings, Poco::Logger * log = nullptr);\n \n /// Execute a distributed query, creating a vector of BlockInputStreams, from which the result can be read.\n /// `stream_factory` object encapsulates the logic of creating streams for a different type of query\ndiff --git a/src/Processors/QueryPlan/ReadFromRemote.cpp b/src/Processors/QueryPlan/ReadFromRemote.cpp\nindex 8fcec03d746c..826ef084d87c 100644\n--- a/src/Processors/QueryPlan/ReadFromRemote.cpp\n+++ b/src/Processors/QueryPlan/ReadFromRemote.cpp\n@@ -61,8 +61,12 @@ static String formattedAST(const ASTPtr & ast)\n {\n     if (!ast)\n         return {};\n+\n     WriteBufferFromOwnString buf;\n-    formatAST(*ast, buf, false, true);\n+    IAST::FormatSettings ast_format_settings(buf, /*one_line*/ true);\n+    ast_format_settings.hilite = false;\n+    ast_format_settings.always_quote_identifiers = true;\n+    ast->format(ast_format_settings);\n     return buf.str();\n }\n \ndiff --git a/src/Storages/StorageDistributed.cpp b/src/Storages/StorageDistributed.cpp\nindex e033d319fc8c..ddf363e3957c 100644\n--- a/src/Storages/StorageDistributed.cpp\n+++ b/src/Storages/StorageDistributed.cpp\n@@ -36,7 +36,7 @@\n #include <Parsers/ParserAlterQuery.h>\n #include <Parsers/TablePropertiesQueriesASTs.h>\n #include <Parsers/parseQuery.h>\n-#include <Parsers/queryToString.h>\n+#include <Parsers/IAST.h>\n \n #include <Interpreters/ClusterProxy/SelectStreamFactory.h>\n #include <Interpreters/ClusterProxy/executeQuery.h>\n@@ -730,7 +730,15 @@ QueryPipelineBuilderPtr StorageDistributed::distributedWrite(const ASTInsertQuer\n \n     std::vector<std::unique_ptr<QueryPipelineBuilder>> pipelines;\n \n-    String new_query_str = queryToString(new_query);\n+    String new_query_str;\n+    {\n+        WriteBufferFromOwnString buf;\n+        IAST::FormatSettings ast_format_settings(buf, /*one_line*/ true);\n+        ast_format_settings.always_quote_identifiers = true;\n+        new_query->IAST::format(ast_format_settings);\n+        new_query_str = buf.str();\n+    }\n+\n     for (size_t shard_index : collections::range(0, shards_info.size()))\n     {\n         const auto & shard_info = shards_info[shard_index];\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01455_opentelemetry_distributed.reference b/tests/queries/0_stateless/01455_opentelemetry_distributed.reference\nindex 1712ca329cf0..119642df395d 100644\n--- a/tests/queries/0_stateless/01455_opentelemetry_distributed.reference\n+++ b/tests/queries/0_stateless/01455_opentelemetry_distributed.reference\n@@ -1,9 +1,9 @@\n ===http===\n {\"query\":\"select 1 from remote('127.0.0.2', system, one) format Null\\n\",\"status\":\"QueryFinish\",\"tracestate\":\"some custom state\",\"sorted_by_start_time\":1}\n {\"query\":\"DESC TABLE system.one\",\"status\":\"QueryFinish\",\"tracestate\":\"some custom state\",\"sorted_by_start_time\":1}\n-{\"query\":\"SELECT 1 FROM system.one\",\"status\":\"QueryFinish\",\"tracestate\":\"some custom state\",\"sorted_by_start_time\":1}\n+{\"query\":\"SELECT 1 FROM `system`.`one`\",\"status\":\"QueryFinish\",\"tracestate\":\"some custom state\",\"sorted_by_start_time\":1}\n {\"query\":\"DESC TABLE system.one\",\"query_status\":\"QueryFinish\",\"tracestate\":\"some custom state\",\"sorted_by_finish_time\":1}\n-{\"query\":\"SELECT 1 FROM system.one\",\"query_status\":\"QueryFinish\",\"tracestate\":\"some custom state\",\"sorted_by_finish_time\":1}\n+{\"query\":\"SELECT 1 FROM `system`.`one`\",\"query_status\":\"QueryFinish\",\"tracestate\":\"some custom state\",\"sorted_by_finish_time\":1}\n {\"query\":\"select 1 from remote('127.0.0.2', system, one) format Null\\n\",\"query_status\":\"QueryFinish\",\"tracestate\":\"some custom state\",\"sorted_by_finish_time\":1}\n {\"total spans\":\"3\",\"unique spans\":\"3\",\"unique non-zero parent spans\":\"3\"}\n {\"initial query spans with proper parent\":\"1\"}\ndiff --git a/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.reference b/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.reference\nindex 66fbe8a5d1c9..9b76ca917803 100644\n--- a/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.reference\n+++ b/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.reference\n@@ -1,17 +1,17 @@\n (0, 2)\n 0\t0\n 0\t0\n-WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS id_no SELECT one.dummy, ignore(id_no) FROM system.one WHERE dummy IN (0, 2)\n-WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS id_no SELECT one.dummy, ignore(id_no) FROM system.one WHERE dummy IN (0, 2)\n+WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS `id_no` SELECT `one`.`dummy`, ignore(`id_no`) FROM `system`.`one` WHERE `dummy` IN (0, 2)\n+WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS `id_no` SELECT `one`.`dummy`, ignore(`id_no`) FROM `system`.`one` WHERE `dummy` IN (0, 2)\n optimize_skip_unused_shards_rewrite_in(0, 2)\n 0\t0\n-WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS id_02 SELECT one.dummy, ignore(id_02) FROM system.one WHERE dummy IN tuple(0)\n-WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS id_02 SELECT one.dummy, ignore(id_02) FROM system.one WHERE dummy IN tuple(2)\n+WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS `id_02` SELECT `one`.`dummy`, ignore(`id_02`) FROM `system`.`one` WHERE `dummy` IN tuple(0)\n+WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS `id_02` SELECT `one`.`dummy`, ignore(`id_02`) FROM `system`.`one` WHERE `dummy` IN tuple(2)\n optimize_skip_unused_shards_rewrite_in(2,)\n-WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS id_2 SELECT one.dummy, ignore(id_2) FROM system.one WHERE dummy IN tuple(2)\n+WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS `id_2` SELECT `one`.`dummy`, ignore(`id_2`) FROM `system`.`one` WHERE `dummy` IN tuple(2)\n optimize_skip_unused_shards_rewrite_in(0,)\n 0\t0\n-WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS id_0 SELECT one.dummy, ignore(id_0) FROM system.one WHERE dummy IN tuple(0)\n+WITH _CAST(\\'default\\', \\'Nullable(String)\\') AS `id_0` SELECT `one`.`dummy`, ignore(`id_0`) FROM `system`.`one` WHERE `dummy` IN tuple(0)\n 0\n 0\n errors\ndiff --git a/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql b/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql\nindex efde0ac1e608..6e4337fc05fd 100644\n--- a/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql\n+++ b/tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql\n@@ -35,8 +35,8 @@ select query from system.query_log where\n     event_date = today() and\n     event_time > now() - interval 1 hour and\n     not is_initial_query and\n-    query not like '%system.query_log%' and\n-    query like concat('WITH%', currentDatabase(), '%AS id_no %') and\n+    query not like '%system%query_log%' and\n+    query like concat('WITH%', currentDatabase(), '%AS `id_no` %') and\n     type = 'QueryFinish'\n order by query;\n \n@@ -54,8 +54,8 @@ select query from system.query_log where\n     event_date = today() and\n     event_time > now() - interval 1 hour and\n     not is_initial_query and\n-    query not like '%system.query_log%' and\n-    query like concat('WITH%', currentDatabase(), '%AS id_02 %') and\n+    query not like '%system%query_log%' and\n+    query like concat('WITH%', currentDatabase(), '%AS `id_02` %') and\n     type = 'QueryFinish'\n order by query;\n \n@@ -66,8 +66,8 @@ select query from system.query_log where\n     event_date = today() and\n     event_time > now() - interval 1 hour and\n     not is_initial_query and\n-    query not like '%system.query_log%' and\n-    query like concat('WITH%', currentDatabase(), '%AS id_2 %') and\n+    query not like '%system%query_log%' and\n+    query like concat('WITH%', currentDatabase(), '%AS `id_2` %') and\n     type = 'QueryFinish'\n order by query;\n \n@@ -78,8 +78,8 @@ select query from system.query_log where\n     event_date = today() and\n     event_time > now() - interval 1 hour and\n     not is_initial_query and\n-    query not like '%system.query_log%' and\n-    query like concat('WITH%', currentDatabase(), '%AS id_0 %') and\n+    query not like '%system%query_log%' and\n+    query like concat('WITH%', currentDatabase(), '%AS `id_0` %') and\n     type = 'QueryFinish'\n order by query;\n \n@@ -87,6 +87,7 @@ order by query;\n select * from dist_01756 where dummy in (0);\n select * from dist_01756 where dummy in ('0');\n \n+\n --\n -- errors\n --\ndiff --git a/tests/queries/0_stateless/01999_grant_with_replace.reference b/tests/queries/0_stateless/01999_grant_with_replace.reference\nindex 9e089a05e527..740c55d53253 100644\n--- a/tests/queries/0_stateless/01999_grant_with_replace.reference\n+++ b/tests/queries/0_stateless/01999_grant_with_replace.reference\n@@ -13,7 +13,7 @@ GRANT SELECT(cola) ON db5.table TO test_user_01999\n GRANT INSERT(colb) ON db6.tb61 TO test_user_01999\n GRANT SHOW ON db7.* TO test_user_01999\n F\n-GRANT SELECT ON all.* TO test_user_01999\n+GRANT SELECT ON `all`.* TO test_user_01999\n G\n H\n GRANT SELECT ON db1.tb1 TO test_user_01999\ndiff --git a/tests/queries/0_stateless/02133_distributed_queries_formatting.reference b/tests/queries/0_stateless/02133_distributed_queries_formatting.reference\nnew file mode 100644\nindex 000000000000..191936fe00bd\n--- /dev/null\n+++ b/tests/queries/0_stateless/02133_distributed_queries_formatting.reference\n@@ -0,0 +1,2 @@\n+Hello\tWorld\n+Hello\tWorld\ndiff --git a/tests/queries/0_stateless/02133_distributed_queries_formatting.sql b/tests/queries/0_stateless/02133_distributed_queries_formatting.sql\nnew file mode 100644\nindex 000000000000..3015ddf18e3d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02133_distributed_queries_formatting.sql\n@@ -0,0 +1,1 @@\n+SELECT * FROM cluster(test_cluster_two_shards, view(SELECT 'Hello' AS all, 'World' AS distinct));\n",
  "problem_statement": "Syntax error when column named ALL or DISTINCT in distributed query\n**Describe what's wrong**\r\n\r\nIf a column named `ALL` or `DISTINCT` appears in the first position of the select list in a distributed query, the query fails with `Syntax error`.\r\n\r\nIn the rewriten query the column name appears without quotation marks, so remote server interprets `DISTINCT` as part of `SELECT DISTINCT` instead of column name. Same thing applies to column named `ALL`.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes, It reproduces on 21.11.5 official build\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use\r\n* Which interface to use, if matters\r\n* Non-default settings, if any\r\n```sql\r\nSET prefer_localhost_replica=0\r\n```\r\n* `CREATE TABLE` statements for all tables involved\r\n```sql\r\nCREATE TABLE  t0 (\"KEY\" Int64, \"ALL\" Int64, \"DISTINCT\" Int64) ENGINE = MergeTree() ORDER BY KEY\r\nCREATE TABLE dist_t0 (\"KEY\" Int64, \"ALL\" Int64, \"DISTINCT\" Int64) ENGINE = Distributed(test_shard_localhost, default, t0)\r\n```\r\n* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary\r\n* Queries to run that lead to unexpected result\r\n\r\n```sql\r\n:) select \"DISTINCT\" from dist_t0\r\n\r\nSELECT DISTINCT\r\nFROM dist_t0\r\n\r\nQuery id: d9024cf2-777e-4f5e-a7fa-f9d2eb8dc661\r\n\r\n\r\n0 rows in set. Elapsed: 0.013 sec. \r\n\r\nReceived exception from server (version 21.11.5):\r\nCode: 62. DB::Exception: Received from localhost:9000. DB::Exception: Received from localhost:9000. DB::Exception: Syntax error: failed at position 22 ('default'): default.t0. Expected one of: UNION, LIMIT, WHERE, WINDOW, DoubleColon, LIKE, GLOBAL NOT IN, end of query, HAVING, AS, DIV, IS, UUID, GROUP BY, INTO OUTFILE, OR, EXCEPT, QuestionMark, OFFSET, BETWEEN, NOT LIKE, MOD, PREWHERE, AND, Comma, alias, ORDER BY, SETTINGS, IN, ILIKE, INTERSECT, FROM, FORMAT, Dot, NOT ILIKE, WITH, NOT, Arrow, token, NOT IN, GLOBAL IN. (SYNTAX_ERROR)\r\n```\r\n\n",
  "hints_text": "May be related https://github.com/ClickHouse/ClickHouse/issues/32374",
  "created_at": "2021-12-09T22:03:16Z",
  "modified_files": [
    "src/IO/WriteHelpers.cpp",
    "src/Interpreters/ClusterProxy/executeQuery.h",
    "src/Processors/QueryPlan/ReadFromRemote.cpp",
    "src/Storages/StorageDistributed.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01455_opentelemetry_distributed.reference",
    "tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.reference",
    "tests/queries/0_stateless/01756_optimize_skip_unused_shards_rewrite_in.sql",
    "tests/queries/0_stateless/01999_grant_with_replace.reference",
    "b/tests/queries/0_stateless/02133_distributed_queries_formatting.reference",
    "b/tests/queries/0_stateless/02133_distributed_queries_formatting.sql"
  ]
}