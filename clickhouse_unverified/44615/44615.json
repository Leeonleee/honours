{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44615,
  "instance_id": "ClickHouse__ClickHouse-44615",
  "issue_numbers": [
    "44614",
    "42772"
  ],
  "base_commit": "a92a9b4d55a0e20e293792aa650eaee9c19ac9d1",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex a8cfc72ad224..0089d06e8d9b 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -5982,20 +5982,25 @@ std::optional<ProjectionCandidate> MergeTreeData::getQueryProcessingStageWithAgg\n     if (select_query->interpolate() && !select_query->interpolate()->children.empty())\n         return std::nullopt;\n \n-    // Currently projections don't support GROUPING SET yet.\n-    if (select_query->group_by_with_grouping_sets)\n+    // Projections don't support grouping sets yet.\n+    if (select_query->group_by_with_grouping_sets\n+        || select_query->group_by_with_totals\n+        || select_query->group_by_with_rollup\n+        || select_query->group_by_with_cube)\n         return std::nullopt;\n \n     auto query_options = SelectQueryOptions(\n         QueryProcessingStage::WithMergeableState,\n         /* depth */ 1,\n         /* is_subquery_= */ true\n-    ).ignoreProjections().ignoreAlias();\n+        ).ignoreProjections().ignoreAlias();\n+\n     InterpreterSelectQuery select(\n         query_ptr,\n         query_context,\n         query_options,\n         query_info.prepared_sets);\n+\n     const auto & analysis_result = select.getAnalysisResult();\n \n     query_info.prepared_sets = select.getQueryAnalyzer()->getPreparedSets();\ndiff --git a/src/Storages/SelectQueryInfo.h b/src/Storages/SelectQueryInfo.h\nindex bad2539ef071..c93531973b87 100644\n--- a/src/Storages/SelectQueryInfo.h\n+++ b/src/Storages/SelectQueryInfo.h\n@@ -171,7 +171,6 @@ struct ProjectionCandidate\n   */\n struct SelectQueryInfo\n {\n-\n     SelectQueryInfo()\n         : prepared_sets(std::make_shared<PreparedSets>())\n     {}\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02515_projections_with_totals.reference b/tests/queries/0_stateless/02515_projections_with_totals.reference\nnew file mode 100644\nindex 000000000000..c6359cae0323\n--- /dev/null\n+++ b/tests/queries/0_stateless/02515_projections_with_totals.reference\n@@ -0,0 +1,3 @@\n+0\n+\n+0\ndiff --git a/tests/queries/0_stateless/02515_projections_with_totals.sql b/tests/queries/0_stateless/02515_projections_with_totals.sql\nnew file mode 100644\nindex 000000000000..4d43d5381da8\n--- /dev/null\n+++ b/tests/queries/0_stateless/02515_projections_with_totals.sql\n@@ -0,0 +1,6 @@\n+DROP TABLE IF EXISTS t;\n+CREATE TABLE t (x UInt8, PROJECTION p (SELECT x GROUP BY x)) ENGINE = MergeTree ORDER BY ();\n+INSERT INTO t VALUES (0);\n+SET group_by_overflow_mode = 'any', max_rows_to_group_by = 1000, totals_mode = 'after_having_auto';\n+SELECT x FROM t GROUP BY x WITH TOTALS;\n+DROP TABLE t;\ndiff --git a/tests/queries/0_stateless/02516_projections_with_rollup.reference b/tests/queries/0_stateless/02516_projections_with_rollup.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02516_projections_with_rollup.sql b/tests/queries/0_stateless/02516_projections_with_rollup.sql\nnew file mode 100644\nindex 000000000000..e670fbb78271\n--- /dev/null\n+++ b/tests/queries/0_stateless/02516_projections_with_rollup.sql\n@@ -0,0 +1,120 @@\n+DROP TABLE IF EXISTS video_log;\n+DROP TABLE IF EXISTS video_log_result__fuzz_0;\n+DROP TABLE IF EXISTS rng;\n+\n+CREATE TABLE video_log\n+(\n+    `datetime` DateTime,\n+    `user_id` UInt64,\n+    `device_id` UInt64,\n+    `domain` LowCardinality(String),\n+    `bytes` UInt64,\n+    `duration` UInt64\n+)\n+ENGINE = MergeTree\n+PARTITION BY toDate(datetime)\n+ORDER BY (user_id, device_id);\n+\n+CREATE TABLE video_log_result__fuzz_0\n+(\n+    `hour` Nullable(DateTime),\n+    `sum_bytes` UInt64,\n+    `avg_duration` Float64\n+)\n+ENGINE = MergeTree\n+PARTITION BY toDate(hour)\n+ORDER BY sum_bytes\n+SETTINGS allow_nullable_key = 1;\n+\n+CREATE TABLE rng\n+(\n+    `user_id_raw` UInt64,\n+    `device_id_raw` UInt64,\n+    `domain_raw` UInt64,\n+    `bytes_raw` UInt64,\n+    `duration_raw` UInt64\n+)\n+ENGINE = GenerateRandom(1024);\n+\n+INSERT INTO video_log SELECT\n+    toUnixTimestamp('2022-07-22 01:00:00') + (rowNumberInAllBlocks() / 20000),\n+    user_id_raw % 100000000 AS user_id,\n+    device_id_raw % 200000000 AS device_id,\n+    domain_raw % 100,\n+    (bytes_raw % 1024) + 128,\n+    (duration_raw % 300) + 100\n+FROM rng\n+LIMIT 1728000;\n+\n+INSERT INTO video_log SELECT\n+    toUnixTimestamp('2022-07-22 01:00:00') + (rowNumberInAllBlocks() / 20000),\n+    user_id_raw % 100000000 AS user_id,\n+    100 AS device_id,\n+    domain_raw % 100,\n+    (bytes_raw % 1024) + 128,\n+    (duration_raw % 300) + 100\n+FROM rng\n+LIMIT 10;\n+\n+ALTER TABLE video_log\n+    ADD PROJECTION p_norm\n+    (\n+        SELECT \n+            datetime,\n+            device_id,\n+            bytes,\n+            duration\n+        ORDER BY device_id\n+    );\n+\n+ALTER TABLE video_log\n+    MATERIALIZE PROJECTION p_norm\n+SETTINGS mutations_sync = 1;\n+\n+ALTER TABLE video_log\n+    ADD PROJECTION p_agg\n+    (\n+        SELECT \n+            toStartOfHour(datetime) AS hour,\n+            domain,\n+            sum(bytes),\n+            avg(duration)\n+        GROUP BY \n+            hour,\n+            domain\n+    );\n+\n+ALTER TABLE video_log\n+    MATERIALIZE PROJECTION p_agg\n+SETTINGS mutations_sync = 1;\n+\n+-- We are not interested in the result of this query, but it should not produce a logical error.\n+SELECT\n+    avg_duration1,\n+    avg_duration1 = avg_duration2\n+FROM\n+(\n+    SELECT\n+        sum(bytes),\n+        hour,\n+        toStartOfHour(datetime) AS hour,\n+        avg(duration) AS avg_duration1\n+    FROM video_log\n+    GROUP BY hour\n+        WITH ROLLUP\n+        WITH TOTALS\n+)\n+LEFT JOIN\n+(\n+    SELECT\n+        hour,\n+        sum_bytes AS sum_bytes2,\n+        avg_duration AS avg_duration2\n+    FROM video_log_result__fuzz_0\n+) USING (hour)\n+SETTINGS joined_subquery_requires_alias = 0\n+FORMAT Null;\n+\n+DROP TABLE video_log;\n+DROP TABLE video_log_result__fuzz_0;\n+DROP TABLE rng;\n",
  "problem_statement": "Projections and WITH TOTALS don't work with non-default totals_mode\n```\r\nCREATE TABLE t (x UInt8, PROJECTION p (SELECT x GROUP BY x)) ENGINE = MergeTree ORDER BY ();\r\nINSERT INTO t VALUES (0);\r\n\r\nSET group_by_overflow_mode = 'any', max_rows_to_group_by = 1000, totals_mode = 'after_having_auto';\r\nSELECT x FROM t GROUP BY x WITH TOTALS;\r\n```\nProjections and mismatched number of columns\n```\r\n$ clickhouse-local \r\nClickHouse local version 22.10.1.1.\r\n\r\nmilovidov-desktop :) CREATE TABLE video_log\r\n                     (\r\n                         `datetime` DateTime,\r\n                         `user_id` UInt64,\r\n                         `device_id` UInt64,\r\n                         `domain` LowCardinality(String),\r\n                         `bytes` UInt64,\r\n                         `duration` UInt64\r\n                     )\r\n                     ENGINE = MergeTree\r\n                     PARTITION BY toDate(datetime)\r\n                     ORDER BY (user_id, device_id);\r\n\r\nCREATE TABLE video_log\r\n(\r\n    `datetime` DateTime,\r\n    `user_id` UInt64,\r\n    `device_id` UInt64,\r\n    `domain` LowCardinality(String),\r\n    `bytes` UInt64,\r\n    `duration` UInt64\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY toDate(datetime)\r\nORDER BY (user_id, device_id)\r\n\r\nQuery id: dd100967-0fce-4dea-b937-ca10e5fc1d0a\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.019 sec. \r\n\r\nmilovidov-desktop :) CREATE TABLE video_log_result__fuzz_0 (`hour` Nullable(DateTime), `sum_bytes` UInt64, `avg_duration` Float64) ENGINE = MergeTree PARTITION BY toDate(hour) ORDER BY sum_bytes SETTINGS allow_nullable_key = 1\r\n\r\nCREATE TABLE video_log_result__fuzz_0\r\n(\r\n    `hour` Nullable(DateTime),\r\n    `sum_bytes` UInt64,\r\n    `avg_duration` Float64\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY toDate(hour)\r\nORDER BY sum_bytes\r\nSETTINGS allow_nullable_key = 1\r\n\r\nQuery id: fe2c04ec-566c-4704-b7af-af2e226d9dad\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.014 sec. \r\n\r\nmilovidov-desktop :) CREATE TABLE rng\r\n                     (\r\n                         `user_id_raw` UInt64,\r\n                         `device_id_raw` UInt64,\r\n                         `domain_raw` UInt64,\r\n                         `bytes_raw` UInt64,\r\n                         `duration_raw` UInt64\r\n                     )\r\n                     ENGINE = GenerateRandom(1024);\r\n\r\nCREATE TABLE rng\r\n(\r\n    `user_id_raw` UInt64,\r\n    `device_id_raw` UInt64,\r\n    `domain_raw` UInt64,\r\n    `bytes_raw` UInt64,\r\n    `duration_raw` UInt64\r\n)\r\nENGINE = GenerateRandom(1024)\r\n\r\nQuery id: 1b4dc5ab-8784-4ef3-a7b3-a99869a06332\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.000 sec. \r\n\r\nmilovidov-desktop :) INSERT INTO video_log SELECT\r\n                       toUnixTimestamp('2022-07-22 01:00:00')\r\n                       + (rowNumberInAllBlocks() / 20000),\r\n                       user_id_raw % 100000000 AS user_id,\r\n                       device_id_raw % 200000000 AS device_id,\r\n                       domain_raw % 100,\r\n                       (bytes_raw % 1024) + 128,\r\n                       (duration_raw % 300) + 100\r\n                     FROM rng\r\n                     LIMIT 1728000;\r\n\r\nINSERT INTO video_log SELECT\r\n    toUnixTimestamp('2022-07-22 01:00:00') + (rowNumberInAllBlocks() / 20000),\r\n    user_id_raw % 100000000 AS user_id,\r\n    device_id_raw % 200000000 AS device_id,\r\n    domain_raw % 100,\r\n    (bytes_raw % 1024) + 128,\r\n    (duration_raw % 300) + 100\r\nFROM rng\r\nLIMIT 1728000\r\n\r\nQuery id: 8a57c429-568d-40cb-9d13-98ccbbd7aafe\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.341 sec. Processed 2.10 million rows, 83.88 MB (6.15 million rows/s., 246.14 MB/s.)\r\n\r\nmilovidov-desktop :) INSERT INTO video_log SELECT\r\n                       toUnixTimestamp('2022-07-22 01:00:00')\r\n                       + (rowNumberInAllBlocks() / 20000),\r\n                       user_id_raw % 100000000 AS user_id,\r\n                       100 AS device_id,\r\n                       domain_raw % 100,\r\n                       (bytes_raw % 1024) + 128,\r\n                       (duration_raw % 300) + 100\r\n                     FROM rng\r\n                     LIMIT 10;\r\n                     \r\n\r\nINSERT INTO video_log SELECT\r\n    toUnixTimestamp('2022-07-22 01:00:00') + (rowNumberInAllBlocks() / 20000),\r\n    user_id_raw % 100000000 AS user_id,\r\n    100 AS device_id,\r\n    domain_raw % 100,\r\n    (bytes_raw % 1024) + 128,\r\n    (duration_raw % 300) + 100\r\nFROM rng\r\nLIMIT 10\r\n\r\nQuery id: 2e7bb653-73c7-4687-908e-4b6178c90ade\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nmilovidov-desktop :) ALTER TABLE video_log ADD PROJECTION p_norm\r\n                     (\r\n                         SELECT\r\n                             datetime,\r\n                             device_id,\r\n                             bytes,\r\n                             duration\r\n                         ORDER BY device_id\r\n                     );\r\n                     \r\n\r\nALTER TABLE video_log\r\n    ADD PROJECTION p_norm\r\n    (\r\n        SELECT \r\n            datetime,\r\n            device_id,\r\n            bytes,\r\n            duration\r\n        ORDER BY device_id\r\n    )\r\n\r\nQuery id: 7d970599-65ae-4b6b-af63-72671d9badd0\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.002 sec. \r\n\r\nmilovidov-desktop :) ALTER TABLE video_log MATERIALIZE PROJECTION p_norm settings mutations_sync=1;\r\n                     \r\n\r\nALTER TABLE video_log\r\n    MATERIALIZE PROJECTION p_norm\r\nSETTINGS mutations_sync = 1\r\n\r\nQuery id: 73fdfd46-7bb8-475f-9e11-dfaa8216692f\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.173 sec. \r\n\r\nmilovidov-desktop :) ALTER TABLE video_log ADD PROJECTION p_agg\r\n                     (\r\n                         SELECT\r\n                             toStartOfHour(datetime) AS hour,\r\n                             domain,\r\n                             sum(bytes),\r\n                             avg(duration)\r\n                         GROUP BY\r\n                             hour,\r\n                             domain\r\n                     );\r\n                     \r\n\r\nALTER TABLE video_log\r\n    ADD PROJECTION p_agg\r\n    (\r\n        SELECT \r\n            toStartOfHour(datetime) AS hour,\r\n            domain,\r\n            sum(bytes),\r\n            avg(duration)\r\n        GROUP BY \r\n            hour,\r\n            domain\r\n    )\r\n\r\nQuery id: b90da0ab-550d-4a99-9f64-184b9eb06f37\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nmilovidov-desktop :) ALTER TABLE video_log MATERIALIZE PROJECTION p_agg settings mutations_sync=1;\r\n\r\nALTER TABLE video_log\r\n    MATERIALIZE PROJECTION p_agg\r\nSETTINGS mutations_sync = 1\r\n\r\nQuery id: 8fb48891-5cb4-4434-9e20-88cae17afd8f\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.103 sec. \r\n\r\nmilovidov-desktop :) SELECT avg_duration1, avg_duration1 = avg_duration2 FROM (SELECT sum(bytes), hour, toStartOfHour(datetime) AS hour, avg(duration) AS avg_duration1 FROM video_log GROUP BY hour WITH ROLLUP WITH TOTALS) LEFT JOIN (SELECT hour, sum_bytes AS sum_bytes2, avg_duration AS avg_duration2 FROM video_log_result__fuzz_0) USING (hour) SETTINGS joined_subquery_requires_alias = 0\r\n\r\nSELECT\r\n    avg_duration1,\r\n    avg_duration1 = avg_duration2\r\nFROM\r\n(\r\n    SELECT\r\n        sum(bytes),\r\n        hour,\r\n        toStartOfHour(datetime) AS hour,\r\n        avg(duration) AS avg_duration1\r\n    FROM video_log\r\n    GROUP BY hour\r\n        WITH ROLLUP\r\n        WITH TOTALS\r\n)\r\nLEFT JOIN\r\n(\r\n    SELECT\r\n        hour,\r\n        sum_bytes AS sum_bytes2,\r\n        avg_duration AS avg_duration2\r\n    FROM video_log_result__fuzz_0\r\n) USING (hour)\r\nSETTINGS joined_subquery_requires_alias = 0\r\n\r\nQuery id: 44d6d293-55e0-4cce-a28a-9b08fa1b7b5a\r\n\r\n\r\n0 rows in set. Elapsed: 0.004 sec. \r\n\r\nReceived exception:\r\nCode: 49. DB::Exception: Block structure mismatch in QueryPipeline stream: different number of columns:\r\n__grouping_set UInt64 UInt64(size = 0), toStartOfHour(datetime) DateTime UInt32(size = 0), avg(duration) Float64 Float64(size = 0)\r\n__grouping_set UInt64 UInt64(size = 0), toStartOfHour(datetime) DateTime UInt32(size = 0), sum(bytes) AggregateFunction(sum, UInt64) AggregateFunction(size = 0), avg(duration) Float64 Float64(size = 0). (LOGICAL_ERROR)\r\n```\n",
  "hints_text": "\nThis is total shame, we have logical error not fixed in months :(\nLet's disable projections optimization if any of the grouping sets are used.",
  "created_at": "2022-12-26T21:33:33Z"
}