{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11051,
  "instance_id": "ClickHouse__ClickHouse-11051",
  "issue_numbers": [
    "10907"
  ],
  "base_commit": "f18eedc5e785bcaa3aa65aa40a936cbe4fefd26e",
  "patch": "diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex 4a94bc833688..8bff2816df1d 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -1025,6 +1025,12 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n         chain.clear();\n     };\n \n+    if (storage)\n+    {\n+        query_analyzer.makeSetsForIndex(query.where());\n+        query_analyzer.makeSetsForIndex(query.prewhere());\n+    }\n+\n     {\n         ExpressionActionsChain chain(context);\n         Names additional_required_columns_after_prewhere;\ndiff --git a/src/Interpreters/ExpressionAnalyzer.h b/src/Interpreters/ExpressionAnalyzer.h\nindex 72a4ead6a141..1afb289430ef 100644\n--- a/src/Interpreters/ExpressionAnalyzer.h\n+++ b/src/Interpreters/ExpressionAnalyzer.h\n@@ -243,8 +243,6 @@ class SelectQueryExpressionAnalyzer : public ExpressionAnalyzer\n     const NamesAndTypesList & aggregationKeys() const { return aggregation_keys; }\n     const AggregateDescriptions & aggregates() const { return aggregate_descriptions; }\n \n-    /// Create Set-s that we make from IN section to use index on them.\n-    void makeSetsForIndex(const ASTPtr & node);\n     const PreparedSets & getPreparedSets() const { return prepared_sets; }\n \n     /// Tables that will need to be sent to remote servers for distributed query processing.\n@@ -275,6 +273,9 @@ class SelectQueryExpressionAnalyzer : public ExpressionAnalyzer\n       */\n     SetPtr isPlainStorageSetInSubquery(const ASTPtr & subquery_or_table_name);\n \n+    /// Create Set-s that we make from IN section to use index on them.\n+    void makeSetsForIndex(const ASTPtr & node);\n+\n     JoinPtr makeTableJoin(const ASTTablesInSelectQueryElement & join_element);\n \n     const ASTSelectQuery * getAggregatingQuery() const;\ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex aa124d9843f2..1e300ae3c5af 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -309,12 +309,29 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n     ASTSelectQuery & query = getSelectQuery();\n     std::shared_ptr<TableJoin> table_join = joined_tables.makeTableJoin(query);\n \n-    auto analyze = [&] (bool try_move_to_prewhere = true)\n+    ASTPtr row_policy_filter;\n+    if (storage)\n+        row_policy_filter = context->getRowPolicyCondition(table_id.getDatabaseName(), table_id.getTableName(), RowPolicy::SELECT_FILTER);\n+\n+    auto analyze = [&] (bool try_move_to_prewhere)\n     {\n         syntax_analyzer_result = SyntaxAnalyzer(*context).analyzeSelect(\n                 query_ptr, SyntaxAnalyzerResult(source_header.getNamesAndTypesList(), storage),\n                 options, joined_tables.tablesWithColumns(), required_result_column_names, table_join);\n \n+        if (try_move_to_prewhere && storage && !row_policy_filter && query.where() && !query.prewhere() && !query.final())\n+        {\n+            /// PREWHERE optimization: transfer some condition from WHERE to PREWHERE if enabled and viable\n+            if (const auto * merge_tree = dynamic_cast<const MergeTreeData *>(storage.get()))\n+            {\n+                SelectQueryInfo current_info;\n+                current_info.query = query_ptr;\n+                current_info.syntax_analyzer_result = syntax_analyzer_result;\n+\n+                MergeTreeWhereOptimizer{current_info, *context, *merge_tree, syntax_analyzer_result->requiredSourceColumns(), log};\n+            }\n+        }\n+\n         /// Save scalar sub queries's results in the query context\n         if (!options.only_analyze && context->hasQueryContext())\n             for (const auto & it : syntax_analyzer_result->getScalars())\n@@ -365,7 +382,6 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n             source_header = storage->getSampleBlockForColumns(required_columns);\n \n             /// Fix source_header for filter actions.\n-            auto row_policy_filter = context->getRowPolicyCondition(table_id.getDatabaseName(), table_id.getTableName(), RowPolicy::SELECT_FILTER);\n             if (row_policy_filter)\n             {\n                 filter_info = std::make_shared<FilterInfo>();\n@@ -378,10 +394,10 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n             throw Exception(\"PREWHERE is not supported if the table is filtered by row-level security expression\", ErrorCodes::ILLEGAL_PREWHERE);\n \n         /// Calculate structure of the result.\n-        result_header = getSampleBlockImpl(try_move_to_prewhere);\n+        result_header = getSampleBlockImpl();\n     };\n \n-    analyze();\n+    analyze(settings.optimize_move_to_prewhere);\n \n     bool need_analyze_again = false;\n     if (analysis_result.prewhere_constant_filter_description.always_false || analysis_result.prewhere_constant_filter_description.always_true)\n@@ -481,40 +497,8 @@ QueryPipeline InterpreterSelectQuery::executeWithProcessors()\n }\n \n \n-Block InterpreterSelectQuery::getSampleBlockImpl(bool try_move_to_prewhere)\n+Block InterpreterSelectQuery::getSampleBlockImpl()\n {\n-    auto & query = getSelectQuery();\n-    const Settings & settings = context->getSettingsRef();\n-\n-    /// Do all AST changes here, because actions from analysis_result will be used later in readImpl.\n-\n-    if (storage)\n-    {\n-        query_analyzer->makeSetsForIndex(query.where());\n-        query_analyzer->makeSetsForIndex(query.prewhere());\n-\n-        /// PREWHERE optimization.\n-        /// Turn off, if the table filter (row-level security) is applied.\n-        if (!context->getRowPolicyCondition(table_id.getDatabaseName(), table_id.getTableName(), RowPolicy::SELECT_FILTER))\n-        {\n-            auto optimize_prewhere = [&](auto & merge_tree)\n-            {\n-                SelectQueryInfo current_info;\n-                current_info.query = query_ptr;\n-                current_info.syntax_analyzer_result = syntax_analyzer_result;\n-                current_info.sets = query_analyzer->getPreparedSets();\n-\n-                /// Try transferring some condition from WHERE to PREWHERE if enabled and viable\n-                if (settings.optimize_move_to_prewhere && try_move_to_prewhere && query.where() && !query.prewhere() && !query.final())\n-                    MergeTreeWhereOptimizer{current_info, *context, merge_tree,\n-                                            syntax_analyzer_result->requiredSourceColumns(), log};\n-            };\n-\n-            if (const auto * merge_tree_data = dynamic_cast<const MergeTreeData *>(storage.get()))\n-                optimize_prewhere(*merge_tree_data);\n-        }\n-    }\n-\n     if (storage && !options.only_analyze)\n         from_stage = storage->getQueryProcessingStage(*context, options.to_stage, query_ptr);\n \ndiff --git a/src/Interpreters/InterpreterSelectQuery.h b/src/Interpreters/InterpreterSelectQuery.h\nindex 1415143dd63e..87a95c5b8367 100644\n--- a/src/Interpreters/InterpreterSelectQuery.h\n+++ b/src/Interpreters/InterpreterSelectQuery.h\n@@ -106,7 +106,7 @@ class InterpreterSelectQuery : public IInterpreter\n \n     ASTSelectQuery & getSelectQuery() { return query_ptr->as<ASTSelectQuery &>(); }\n \n-    Block getSampleBlockImpl(bool try_move_to_prewhere);\n+    Block getSampleBlockImpl();\n \n     struct Pipeline\n     {\ndiff --git a/src/Interpreters/SyntaxAnalyzer.cpp b/src/Interpreters/SyntaxAnalyzer.cpp\nindex 84d11122de4c..b3d566dbdc84 100644\n--- a/src/Interpreters/SyntaxAnalyzer.cpp\n+++ b/src/Interpreters/SyntaxAnalyzer.cpp\n@@ -767,8 +767,13 @@ SyntaxAnalyzerResultPtr SyntaxAnalyzer::analyzeSelect(\n     const auto & settings = context.getSettingsRef();\n \n     const NameSet & source_columns_set = result.source_columns_set;\n-    result.analyzed_join = table_join;\n-    if (!result.analyzed_join) /// ExpressionAnalyzer expects some not empty object here\n+\n+    if (table_join)\n+    {\n+        result.analyzed_join = table_join;\n+        result.analyzed_join->resetCollected();\n+    }\n+    else /// TODO: remove. For now ExpressionAnalyzer expects some not empty object here\n         result.analyzed_join = std::make_shared<TableJoin>();\n \n     if (remove_duplicates)\ndiff --git a/src/Interpreters/TableJoin.cpp b/src/Interpreters/TableJoin.cpp\nindex 02eb321fdd8c..aa88df2e921d 100644\n--- a/src/Interpreters/TableJoin.cpp\n+++ b/src/Interpreters/TableJoin.cpp\n@@ -29,6 +29,18 @@ TableJoin::TableJoin(const Settings & settings, VolumeJBODPtr tmp_volume_)\n         join_algorithm = JoinAlgorithm::PREFER_PARTIAL_MERGE;\n }\n \n+void TableJoin::resetCollected()\n+{\n+    key_names_left.clear();\n+    key_names_right.clear();\n+    key_asts_left.clear();\n+    key_asts_right.clear();\n+    columns_from_joined_table.clear();\n+    columns_added_by_join.clear();\n+    original_names.clear();\n+    renames.clear();\n+}\n+\n void TableJoin::addUsingKey(const ASTPtr & ast)\n {\n     key_names_left.push_back(ast->getColumnName());\ndiff --git a/src/Interpreters/TableJoin.h b/src/Interpreters/TableJoin.h\nindex 0eeb724ab7b3..46d2c2e457c1 100644\n--- a/src/Interpreters/TableJoin.h\n+++ b/src/Interpreters/TableJoin.h\n@@ -112,6 +112,7 @@ class TableJoin\n     const String & temporaryFilesCodec() const { return temporary_files_codec; }\n     bool enablePartialMergeJoinOptimizations() const { return partial_merge_join_optimizations; }\n \n+    void resetCollected();\n     void addUsingKey(const ASTPtr & ast);\n     void addOnKeys(ASTPtr & left_table_ast, ASTPtr & right_table_ast);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01281_join_with_prewhere_fix.reference b/tests/queries/0_stateless/01281_join_with_prewhere_fix.reference\nnew file mode 100644\nindex 000000000000..535d2b01d339\n--- /dev/null\n+++ b/tests/queries/0_stateless/01281_join_with_prewhere_fix.reference\n@@ -0,0 +1,8 @@\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\ndiff --git a/tests/queries/0_stateless/01281_join_with_prewhere_fix.sql b/tests/queries/0_stateless/01281_join_with_prewhere_fix.sql\nnew file mode 100644\nindex 000000000000..3d772c7ad12b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01281_join_with_prewhere_fix.sql\n@@ -0,0 +1,21 @@\n+drop table if exists t;\n+\n+create table t (x UInt8, id UInt8) ENGINE = MergeTree() order by (id);\n+insert into t values (1, 1);\n+\n+set enable_optimize_predicate_expression = 0;\n+\n+select 1 from t as l join t as r on l.id = r.id prewhere l.x;\n+select 2 from t as l join t as r on l.id = r.id where r.x;\n+select 3 from t as l join t as r on l.id = r.id prewhere l.x where r.x;\n+select 4 from t as l join t as r using id prewhere l.x where r.x;\n+\n+select 5 from t as l join t as r on l.id = r.id where l.x and r.x;\n+select 6 from t as l join t as r using id where l.x and r.x;\n+\n+set optimize_move_to_prewhere = 0;\n+\n+select 7 from t as l join t as r on l.id = r.id where l.x and r.x;\n+select 8 from t as l join t as r using id where l.x and r.x;\n+    \n+drop table t;\n",
  "problem_statement": "No such name in Block::erase()\nSQL:\r\nSELECT\r\n       campaignName AS campaign_name,\r\n       sum(impressions) / 10000 AS impressions,\r\n       sum(clicks) / 10000 AS clicks,\r\n       if(impressions = 0, 0, round(clicks / impressions * 100, 2)) AS ctr,\r\n       sum(toFloat64(cost * exchange_rate)) / 10000 / 10000 AS spend,\r\n       if(clicks = 0, 0, round(spend / clicks, 2)) AS cpc,\r\n       sum(attributedConversions7d) / 10000 AS orders,\r\n       if(clicks = 0, 0, round(orders / clicks * 100, 2)) AS cvr,\r\n       if(orders = 0, 0, round(spend / orders, 2)) AS cpa,\r\n       sum(toFloat64(attributedSales7d * exchange_rate)) / 10000 / 10000 AS sales,\r\n       if(sales = 0, 0, round(spend / sales * 100, 2)) AS acos\r\nFROM ptx_db.fct_apa_report_sp_campaigns AS A\r\nANY LEFT JOIN ptx_db.c_exchange_rate_day AS B\r\n    ON A.report_date = toString(formatDateTime(B.exchange_date, '%Y%m%d')) AND A.country = B.countrys\r\nWHERE flag = 1 AND campaignName != '' AND account = 'OT' AND country = 'CA'\r\nAND A.report_date >= '20200507' AND A.report_date <= '20200513' GROUP BY campaignName ORDER BY campaign_name desc LIMIT 0,25\uff1b\r\n\r\nERROR:\r\n ClickHouse exception, code: 10, host: 172.16.6.210, port: 8123; Code: 10, e.displayText() = DB::Exception: No such name in Block::erase(): 'exchange_date' (version 20.4.2.9 (official build))\r\n\r\nSolution\uff1a\r\nReplace \uff08PTX dB. C exchange rate as B \uff09 with subquery\uff1a\r\nSELECT\r\n       campaignName AS campaign_name,\r\n       sum(impressions) / 10000 AS impressions,\r\n       sum(clicks) / 10000 AS clicks,\r\n       if(impressions = 0, 0, round(clicks / impressions * 100, 2)) AS ctr,\r\n       sum(toFloat64(cost * exchange_rate)) / 10000 / 10000 AS spend,\r\n       if(clicks = 0, 0, round(spend / clicks, 2)) AS cpc,\r\n       sum(attributedConversions7d) / 10000 AS orders,\r\n       if(clicks = 0, 0, round(orders / clicks * 100, 2)) AS cvr,\r\n       if(orders = 0, 0, round(spend / orders, 2)) AS cpa,\r\n       sum(toFloat64(attributedSales7d * exchange_rate)) / 10000 / 10000 AS sales,\r\n       if(sales = 0, 0, round(spend / sales * 100, 2)) AS acos\r\nFROM ptx_db.fct_apa_report_sp_campaigns AS A\r\nANY LEFT JOIN (select formatDateTime(exchange_date, '%Y%m%d') as exchange_date,exchange_rate,countrys from ptx_db.c_exchange_rate_day ) AS B\r\n    ON A.report_date =B.exchange_date  AND A.country = B.countrys\r\nWHERE flag = 1 AND campaignName != '' AND account = 'OT' AND country = 'CA' AND A.report_date >= '20200507' AND A.report_date <= '20200513' GROUP BY campaignName ORDER BY campaign_name desc LIMIT 0,25\uff1b\r\n\r\nWhy not compatible  \uff1f\uff1f\uff1f\uff1f\n",
  "hints_text": "Same here.\nCould you add trace in server log related to to the error, please?\nAs temporary workaround `set optimize_move_to_prewhere = 0` should help.\n> As temporary workaround `set optimize_move_to_prewhere = 0` should help.\r\n\r\nok, I try .  \n> Could you add trace in server log related to to the error, please?\r\n\r\nerror.log\r\n(version 20.4.2.9 (official build))\r\n2020.05.14 15:05:19.859835 [ 22692 ] {0e5e5c31-0d77-46c3-becc-49f0a6a2c5ef} <Error> executeQuery: Code: 10, e.displayText() = DB::Exception: No such name in Block::erase(): 'exchange_date' (version 20.4.2.9 (official build)) (from 172.16.6.230:56728) (in query: SELECT campaignName AS campaign_name,sum(impressions) / 10000 AS impressions,sum(clicks) / 10000 AS clicks,if(impressions = 0, 0, round(clicks / impressions * 100, 2)) AS ctr,sum(toFloat64(cost * exchange_rate)) / 10000 / 10000 AS spend,if(clicks = 0, 0, round(spend / clicks, 2)) AS cpc,sum(attributedConversions7d) / 10000 AS orders,if(clicks = 0, 0, round(orders / clicks * 100, 2)) AS cvr,if(orders = 0, 0, round(spend / orders, 2)) AS cpa,sum(toFloat64(attributedSales7d * exchange_rate)) / 10000 / 10000 AS sales,if(sales = 0, 0, round(spend / sales * 100, 2)) AS acos FROM ptx_db.fct_apa_report_sp_campaigns AS A ANY LEFT JOIN ptx_db.c_exchange_rate_day AS B ON A.report_date = toString(formatDateTime(B.exchange_date, '%Y%m%d')) AND A.country = B.countrys WHERE flag = 1 AND campaignName != '' AND account = 'SY' AND country = 'UK' AND A.report_date >= '20200507' AND A.report_date <= '20200513' GROUP BY campaignName ORDER BY campaign_name desc LIMIT 0,25 FORMAT JSON), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10406ef0 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8ff88ad in /usr/bin/clickhouse\r\n2. ? @ 0xcd78850 in /usr/bin/clickhouse\r\n3. DB::ExpressionActions::finalize(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd1d6fee in /usr/bin/clickhouse\r\n4. DB::ExpressionActionsChain::finalize() @ 0xd1d974e in /usr/bin/clickhouse\r\n5. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, bool, bool, bool, std::__1::shared_ptr<DB::FilterInfo> const&, DB::Block const&) @ 0xd3be7a0 in /usr/bin/clickhouse\r\n6. DB::InterpreterSelectQuery::getSampleBlockImpl(bool) @ 0xd225fa3 in /usr/bin/clickhouse\r\n7. ? @ 0xd2274bb in /usr/bin/clickhouse\r\n8. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd22843d in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd229939 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd3fa361 in /usr/bin/clickhouse\r\n11. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum) @ 0xd197474 in /usr/bin/clickhouse\r\n12. ? @ 0xd5375ae in /usr/bin/clickhouse\r\n13. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xd53b4b0 in /usr/bin/clickhouse\r\n14. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x90dd7fc in /usr/bin/clickhouse\r\n15. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x90e1256 in /usr/bin/clickhouse\r\n16. Poco::Net::HTTPServerConnection::run() @ 0x102b78a3 in /usr/bin/clickhouse\r\n17. Poco::Net::TCPServerConnection::start() @ 0x102f2c6b in /usr/bin/clickhouse\r\n18. Poco::Net::TCPServerDispatcher::run() @ 0x102f30fb in /usr/bin/clickhouse\r\n19. Poco::PooledThread::run() @ 0x104a0cc6 in /usr/bin/clickhouse\r\n20. Poco::ThreadImpl::runnableEntry(void*) @ 0x1049bf80 in /usr/bin/clickhouse\r\n21. start_thread @ 0x7e25 in /usr/lib64/libpthread-2.17.so\r\n22. clone @ 0xfebad in /usr/lib64/libc-2.17.so\r\n\r\n2020.05.14 15:05:19.860348 [ 22692 ] {} <Error> DynamicQueryHandler: Code: 10, e.displayText() = DB::Exception: No such name in Block::erase(): 'exchange_date', Stack trace (when copying this message, always include the lines below):\r\n",
  "created_at": "2020-05-19T20:00:14Z"
}