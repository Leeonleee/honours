diff --git a/tests/integration/helpers/postgres_utility.py b/tests/integration/helpers/postgres_utility.py
index 468c3b3bb636..76dddd7d0cfa 100644
--- a/tests/integration/helpers/postgres_utility.py
+++ b/tests/integration/helpers/postgres_utility.py
@@ -359,6 +359,7 @@ def check_tables_are_synchronized(
     postgres_database="postgres_database",
     materialized_database="test_database",
     schema_name="",
+    columns=["*"],
 ):
     assert_nested_table_is_created(
         instance, table_name, materialized_database, schema_name
@@ -374,7 +375,7 @@ def check_tables_are_synchronized(
     result_query = f"select * from {table_path} order by {order_by};"
 
     expected = instance.query(
-        f"select * from `{postgres_database}`.`{table_name}` order by {order_by};"
+        f"select {','.join(columns)} from `{postgres_database}`.`{table_name}` order by {order_by};"
     )
     result = instance.query(result_query)
 
diff --git a/tests/integration/test_postgresql_replica_database_engine_2/test.py b/tests/integration/test_postgresql_replica_database_engine_2/test.py
index 7fdd17625a9c..e64c9eb9d1ec 100644
--- a/tests/integration/test_postgresql_replica_database_engine_2/test.py
+++ b/tests/integration/test_postgresql_replica_database_engine_2/test.py
@@ -1141,6 +1141,110 @@ def test_dependent_loading(started_cluster):
     instance.query(f"DROP TABLE {table} SYNC")
 
 
+def test_partial_table(started_cluster):
+    table = "test_partial_table"
+
+    pg_manager.create_postgres_table(
+        table,
+        "",
+        f"""CREATE TABLE {table} (
+             key integer PRIMARY KEY,
+             x integer DEFAULT 0,
+             y integer,
+             z text DEFAULT 'z');
+         """,
+    )
+    pg_manager.execute(f"insert into {table} (key, x, z) values (1,1,'a');")
+    pg_manager.execute(f"insert into {table} (key, x, z) values (2,2,'b');")
+
+    pg_manager.create_materialized_db(
+        ip=started_cluster.postgres_ip,
+        port=started_cluster.postgres_port,
+        settings=[
+            f"materialized_postgresql_tables_list = '{table}(z, key)'",
+            "materialized_postgresql_backoff_min_ms = 100",
+            "materialized_postgresql_backoff_max_ms = 100",
+        ],
+    )
+    check_tables_are_synchronized(
+        instance,
+        table,
+        postgres_database=pg_manager.get_default_database(),
+        columns=["key", "z"],
+    )
+
+    pg_manager.execute(f"insert into {table} (key, x, z) values (3,3,'c');")
+    pg_manager.execute(f"insert into {table} (key, x, z) values (4,4,'d');")
+
+    check_tables_are_synchronized(
+        instance,
+        table,
+        postgres_database=pg_manager.get_default_database(),
+        columns=["key", "z"],
+    )
+
+
+def test_partial_and_full_table(started_cluster):
+    table = "test_partial_and_full_table"
+
+    pg_manager.create_postgres_table(
+        table,
+        "",
+        f"""CREATE TABLE {table}1 (
+             key integer PRIMARY KEY,
+             x integer DEFAULT 0,
+             y integer,
+             z text DEFAULT 'z');
+         """,
+    )
+    pg_manager.execute(f"insert into {table}1 (key, x, y, z) values (1,1,1,'1');")
+    pg_manager.execute(f"insert into {table}1 (key, x, y, z) values (2,2,2,'2');")
+    pg_manager.create_postgres_table(
+        table,
+        "",
+        f"""CREATE TABLE {table}2 (
+             key integer PRIMARY KEY,
+             x integer DEFAULT 0,
+             y integer,
+             z text DEFAULT 'z');
+         """,
+    )
+    pg_manager.execute(f"insert into {table}2 (key, x, y, z) values (3,3,3,'3');")
+    pg_manager.execute(f"insert into {table}2 (key, x, y, z) values (4,4,4,'4');")
+
+    pg_manager.create_materialized_db(
+        ip=started_cluster.postgres_ip,
+        port=started_cluster.postgres_port,
+        settings=[
+            f"materialized_postgresql_tables_list = '{table}1(key, x, z), {table}2'",
+            "materialized_postgresql_backoff_min_ms = 100",
+            "materialized_postgresql_backoff_max_ms = 100",
+        ],
+    )
+    check_tables_are_synchronized(
+        instance,
+        f"{table}1",
+        postgres_database=pg_manager.get_default_database(),
+        columns=["key", "x", "z"],
+    )
+    check_tables_are_synchronized(
+        instance, f"{table}2", postgres_database=pg_manager.get_default_database()
+    )
+
+    pg_manager.execute(f"insert into {table}1 (key, x, z) values (3,3,'3');")
+    pg_manager.execute(f"insert into {table}2 (key, x, z) values (5,5,'5');")
+
+    check_tables_are_synchronized(
+        instance,
+        f"{table}1",
+        postgres_database=pg_manager.get_default_database(),
+        columns=["key", "x", "z"],
+    )
+    check_tables_are_synchronized(
+        instance, f"{table}2", postgres_database=pg_manager.get_default_database()
+    )
+
+
 if __name__ == "__main__":
     cluster.start()
     input("Cluster created, press any key to destroy...")
