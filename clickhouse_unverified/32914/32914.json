{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32914,
  "instance_id": "ClickHouse__ClickHouse-32914",
  "issue_numbers": [
    "32487"
  ],
  "base_commit": "70937088e9d6a87fae15cf1cd808c1f9fce3f997",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionTopK.cpp b/src/AggregateFunctions/AggregateFunctionTopK.cpp\nindex c3b80cae0808..801f3d5e28d2 100644\n--- a/src/AggregateFunctions/AggregateFunctionTopK.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionTopK.cpp\n@@ -7,18 +7,20 @@\n #include <DataTypes/DataTypeDateTime.h>\n \n \n-#define TOP_K_MAX_SIZE 0xFFFFFF\n+static inline constexpr UInt64 TOP_K_MAX_SIZE = 0xFFFFFF;\n \n \n namespace DB\n {\n+\n struct Settings;\n \n namespace ErrorCodes\n {\n-    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n     extern const int ARGUMENT_OUT_OF_BOUND;\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+    extern const int LOGICAL_ERROR;\n+    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n }\n \n \n@@ -42,19 +44,22 @@ class AggregateFunctionTopKDateTime : public AggregateFunctionTopK<DataTypeDateT\n \n \n template <bool is_weighted>\n-static IAggregateFunction * createWithExtraTypes(const DataTypePtr & argument_type, UInt64 threshold, UInt64 load_factor, const Array & params)\n+static IAggregateFunction * createWithExtraTypes(const DataTypes & argument_types, UInt64 threshold, UInt64 load_factor, const Array & params)\n {\n-    WhichDataType which(argument_type);\n+    if (argument_types.empty())\n+        throw DB::Exception(ErrorCodes::LOGICAL_ERROR, \"Got empty arguments list\");\n+\n+    WhichDataType which(argument_types[0]);\n     if (which.idx == TypeIndex::Date)\n-        return new AggregateFunctionTopKDate<is_weighted>(threshold, load_factor, {argument_type}, params);\n+        return new AggregateFunctionTopKDate<is_weighted>(threshold, load_factor, argument_types, params);\n     if (which.idx == TypeIndex::DateTime)\n-        return new AggregateFunctionTopKDateTime<is_weighted>(threshold, load_factor, {argument_type}, params);\n+        return new AggregateFunctionTopKDateTime<is_weighted>(threshold, load_factor, argument_types, params);\n \n     /// Check that we can use plain version of AggregateFunctionTopKGeneric\n-    if (argument_type->isValueUnambiguouslyRepresentedInContiguousMemoryRegion())\n-        return new AggregateFunctionTopKGeneric<true, is_weighted>(threshold, load_factor, argument_type, params);\n+    if (argument_types[0]->isValueUnambiguouslyRepresentedInContiguousMemoryRegion())\n+        return new AggregateFunctionTopKGeneric<true, is_weighted>(threshold, load_factor, argument_types, params);\n     else\n-        return new AggregateFunctionTopKGeneric<false, is_weighted>(threshold, load_factor, argument_type, params);\n+        return new AggregateFunctionTopKGeneric<false, is_weighted>(threshold, load_factor, argument_types, params);\n }\n \n \n@@ -78,40 +83,37 @@ AggregateFunctionPtr createAggregateFunctionTopK(const std::string & name, const\n     if (!params.empty())\n     {\n         if (params.size() > 2)\n-            throw Exception(\"Aggregate function \" + name + \" requires two parameters or less.\",\n-                            ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n+            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n+                            \"Aggregate function '{}' requires two parameters or less\", name);\n \n-        UInt64 k = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), params[0]);\n         if (params.size() == 2)\n         {\n             load_factor = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), params[1]);\n \n             if (load_factor < 1)\n-                throw Exception(\"Too small parameter 'load_factor' for aggregate function \" + name + \". Minimum: 1\",\n-                    ErrorCodes::ARGUMENT_OUT_OF_BOUND);\n+                throw Exception(ErrorCodes::ARGUMENT_OUT_OF_BOUND,\n+                                \"Too small parameter 'load_factor' for aggregate function '{}' (got {}, minimum is 1)\", name, load_factor);\n         }\n \n-        if (k > TOP_K_MAX_SIZE || load_factor > TOP_K_MAX_SIZE || k * load_factor > TOP_K_MAX_SIZE)\n-            throw Exception(\"Too large parameter(s) for aggregate function \" + name + \". Maximum: \" + toString(TOP_K_MAX_SIZE),\n-                ErrorCodes::ARGUMENT_OUT_OF_BOUND);\n+        threshold = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), params[0]);\n \n-        if (k == 0)\n-            throw Exception(\"Parameter 0 is illegal for aggregate function \" + name,\n-                ErrorCodes::ARGUMENT_OUT_OF_BOUND);\n+        if (threshold > TOP_K_MAX_SIZE || load_factor > TOP_K_MAX_SIZE || threshold * load_factor > TOP_K_MAX_SIZE)\n+            throw Exception(ErrorCodes::ARGUMENT_OUT_OF_BOUND,\n+                            \"Too large parameter(s) for aggregate function '{}' (maximum is {})\", name, toString(TOP_K_MAX_SIZE));\n \n-        threshold = k;\n+        if (threshold == 0)\n+            throw Exception(ErrorCodes::ARGUMENT_OUT_OF_BOUND, \"Parameter 0 is illegal for aggregate function '{}'\", name);\n     }\n \n     AggregateFunctionPtr res(createWithNumericType<AggregateFunctionTopK, is_weighted>(\n         *argument_types[0], threshold, load_factor, argument_types, params));\n \n     if (!res)\n-        res = AggregateFunctionPtr(createWithExtraTypes<is_weighted>(argument_types[0], threshold, load_factor, params));\n+        res = AggregateFunctionPtr(createWithExtraTypes<is_weighted>(argument_types, threshold, load_factor, params));\n \n     if (!res)\n-        throw Exception(\"Illegal type \" + argument_types[0]->getName() +\n-            \" of argument for aggregate function \" + name, ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n-\n+        throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                        \"Illegal type {} of argument for aggregate function '{}'\", argument_types[0]->getName(), name);\n     return res;\n }\n \ndiff --git a/src/AggregateFunctions/AggregateFunctionTopK.h b/src/AggregateFunctions/AggregateFunctionTopK.h\nindex eb84288a1ae7..987742546951 100644\n--- a/src/AggregateFunctions/AggregateFunctionTopK.h\n+++ b/src/AggregateFunctions/AggregateFunctionTopK.h\n@@ -132,8 +132,8 @@ class AggregateFunctionTopKGeneric\n \n public:\n     AggregateFunctionTopKGeneric(\n-        UInt64 threshold_, UInt64 load_factor, const DataTypePtr & input_data_type_, const Array & params)\n-        : IAggregateFunctionDataHelper<AggregateFunctionTopKGenericData, AggregateFunctionTopKGeneric<is_plain_column, is_weighted>>({input_data_type_}, params)\n+        UInt64 threshold_, UInt64 load_factor, const DataTypes & argument_types_, const Array & params)\n+        : IAggregateFunctionDataHelper<AggregateFunctionTopKGenericData, AggregateFunctionTopKGeneric<is_plain_column, is_weighted>>(argument_types_, params)\n         , threshold(threshold_), reserved(load_factor * threshold), input_data_type(this->argument_types[0]) {}\n \n     String getName() const override { return is_weighted ? \"topKWeighted\" : \"topK\"; }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02149_issue_32487.reference b/tests/queries/0_stateless/02149_issue_32487.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02149_issue_32487.sql b/tests/queries/0_stateless/02149_issue_32487.sql\nnew file mode 100644\nindex 000000000000..4e75c9817749\n--- /dev/null\n+++ b/tests/queries/0_stateless/02149_issue_32487.sql\n@@ -0,0 +1,1 @@\n+SELECT topKWeightedState(2)(now(), 1) FORMAT Null;\n",
  "problem_statement": "topKWeightedState fails for some input types\n**Describe what's wrong**\r\n\r\n> A clear and concise description of what works not as it is supposed to.\r\n\r\nRecent versions of topKWeightedState fail on some input types.\r\n\r\nOK:\r\n\r\n```sql\r\nSELECT topKWeightedState(2)(1, 1)\r\n\r\nQuery id: d74c6d5b-f4d7-49a4-a0b4-93ef0916f5b4\r\n\r\n\u250c\u2500topKWeightedState(2)(1, 1)\u2500\u2510\r\n\u2502 @                          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.003 sec. \r\n```\r\n\r\nNOT OK:\r\n\r\n```sql\r\nSELECT topKWeightedState(2)(now(), 1)\r\n\r\nQuery id: 5842828e-5dfc-47ea-b52d-ebfa498b1c92\r\n\r\nException on client:\r\nCode: 42. DB::Exception: Aggregate function topKWeighted requires two arguments: while receiving packet from 0.0.0.0:9000. (NUMBER_OF_ARGUMENTS_DOESNT_MATCH)\r\n\r\nConnecting to 0.0.0.0:9000 as user default.\r\nConnected to ClickHouse server version 21.11.5 revision 54450.\r\n```\r\n\r\nWhen looking for the types:\r\n\r\n```sql\r\nDESCRIBE TABLE \r\n(\r\n    SELECT\r\n        topKWeightedState(2)(1, 1),\r\n        topKWeightedState(2)(now(), 1)\r\n)\r\nFORMAT Vertical\r\n\r\nQuery id: 62814122-3c1c-470a-b461-6e3b90dabb81\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nname:               topKWeightedState(2)(1, 1)\r\ntype:               AggregateFunction(topKWeighted(2), UInt8, UInt8)\r\ndefault_type:       \r\ndefault_expression: \r\ncomment:            \r\ncodec_expression:   \r\nttl_expression:     \r\n\r\nRow 2:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nname:               topKWeightedState(2)(now(), 1)\r\ntype:               AggregateFunction(topKWeighted(2), DateTime)\r\ndefault_type:       \r\ndefault_expression: \r\ncomment:            \r\ncodec_expression:   \r\nttl_expression:     \r\n\r\n2 rows in set. Elapsed: 0.003 sec. \r\n```\r\n\r\nThe `topKWeightedState(2)(now(), 1)` misses the weight type in the aggregate function.\r\n\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes. It happens in `21.11.5.33`. It also happens in `21.9.6.24`, `21.8.11.4`, `21.7.11.3`, and `21.5.9.4`. It works for version `21.3.8.76` and for versions older than that.\r\n\r\n**How to reproduce**\r\n\r\nWith version `21.11.5.33`, run the query:\r\n\r\n```\r\nSELECT topKWeightedState(2)(now(), 1)\r\n\r\nQuery id: dc844e76-250d-42f4-ac67-1ff3c61f57c0\r\n\r\nException on client:\r\nCode: 42. DB::Exception: Aggregate function topKWeighted requires two arguments: while receiving packet from 0.0.0.0:9000. (NUMBER_OF_ARGUMENTS_DOESNT_MATCH)\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI would expect to have the behavior found in older releases or the one that you have for some other types:\r\n\r\n```sql\r\nSELECT \r\n    topKWeightedState(2)(now(), 1),\r\n    topKWeightedState(2)(1, 1)\r\n\r\n\u250c\u2500topKWeightedState(2)(now(), 1)\u2500\u252c\u2500topKWeightedState(2)(1, 1)\u2500\u2510\r\n\u2502 \ufffdk\ufffda@                           \u2502 @                          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.016 sec. \r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2021-12-17T15:05:35Z"
}