You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
TSV import error (Exception: Cannot parse input: expected \t before)
Hi. I encountered a problem with importing TabSeparated data.
An exception is thrown when trying to import tsv data starting with a Date (or DateTime) column.

Table:
```SQL
CREATE TABLE IF NOT EXISTS tests.t01
(
    CreatedOnDate Date,
    ActionLowCardinality LowCardinality(String),
    CreatedOn DateTime,
    UserTrackingId UUID,
    Action String,
    StringField String,
    IntValue UInt16,
    TestName String,
    DecimalField Decimal(5, 5),
    WrongInt Int32,
    BoolField UInt8,
    LongField UInt64,
    UUIDField UUID,
    NestedTest Nested 
    (
        NestedInt UInt16, 
        NestedString LowCardinality(String)
    ),
    ObjectTest__ObjectInt UInt16,
    ObjectTest__ObjectString LowCardinality(String),
    ObjectTest__ArrayInt Array(Int32),
    ObjectTest__SecondLevelObject__ObjectInt UInt16,
    ObjectTest__SecondLevelObject__ObjectString LowCardinality(String),
    ObjectTest__SecondLevelObject__ArrayInt Array(Int32),
    ObjectTest__SecondLevelObject__SecondLevelObject__ObjectInt UInt16,
    ObjectTest__SecondLevelObject__SecondLevelObject__ObjectString LowCardinality(String),
    ObjectTest__SecondLevelObject__SecondLevelObject__ArrayInt Array(Int32),
    ArrayString Array(String),
    ArrayInt Array(Int32)
) 
ENGINE MergeTree() 
PARTITION BY toYYYYMM(CreatedOnDate)
ORDER BY ( CreatedOnDate, UserTrackingId)
SAMPLE BY UserTrackingId 
SETTINGS index_granularity=8192
```
TSV file to insert:

```
2020-04-16	beaea8ad-a045-46c6-ac41-d886e6307bb7	2020-04-16T10:22:42	c9183984-5bb4-4fde-b50f-d1c66458f4a7	83B8C742-EA70-46F4-BDE9-BE6D4A978BA8		54	TsvInsertTest	0.5464	0	1	9223372036854775807	3cc7c190-0b2c-4456-915b-425dd7d375c7			0			0			0				

```

Error:
```bash
root@ch_logs_b2:/data/reporting/temp# cat tsv.txt | clickhouse-client --database=tests  --query="INSERT INTO tests.t01 (CreatedOnDate, ActionLowCardinality, CreatedOn, UserTrackingId, Action, StringField, IntValue, TestName, DecimalField, WrongInt, BoolField, LongField, UUIDField, NestedTest.NestedInt, NestedTest.NestedString, ObjectTest__SecondLevelObject__SecondLevelObject__ObjectInt, ObjectTest__SecondLevelObject__SecondLevelObject__ObjectString, ObjectTest__SecondLevelObject__SecondLevelObject__ArrayInt, ObjectTest__SecondLevelObject__ObjectInt, ObjectTest__SecondLevelObject__ObjectString, ObjectTest__SecondLevelObject__ArrayInt, ObjectTest__ObjectInt, ObjectTest__ObjectString, ObjectTest__ArrayInt, ArrayString, ArrayInt) FORMAT TSV" --input_format_tsv_empty_as_default=1
Code: 27, e.displayText() = DB::Exception: Cannot parse input: expected \t before: -16\tbeaea8ad-a045-46c6-ac41-d886e6307bb7\t2020-04-16T10:22:42\tc9183984-5bb4-4fde-b50f-d1c66458f4a7\t83B8C742-EA70-46F4-BDE9-BE6D4A978BA8\t\t54\tTsvInsertTest\t0.5464\t: (at row 1)

Row 1:
Column 0,   name: CreatedOnDate,                                                  type: Date,                          parsed text: "2020-04"
ERROR: garbage after Date: "-16<TAB>beaea8"
ERROR: Date must be in YYYY-MM-DD format.

, Stack trace (when copying this message, always include the lines below):

0. 0x100fe40c Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)  in /usr/bin/clickhouse
1. 0x8e9e849 DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)  in /usr/bin/clickhouse
2. 0x8ed5985 ?  in /usr/bin/clickhouse
3. 0xda69147 DB::TabSeparatedRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&)  in /usr/bin/clickhouse
4. 0xd9288b9 DB::IRowInputFormat::generate()  in /usr/bin/clickhouse
5. 0xd8bb137 DB::ISource::work()  in /usr/bin/clickhouse
6. 0xd87babd DB::InputStreamFromInputFormat::readImpl()  in /usr/bin/clickhouse
7. 0xcc712bf DB::IBlockInputStream::read()  in /usr/bin/clickhouse
8. 0xd880822 DB::ParallelParsingBlockInputStream::parserThreadFunction(unsigned long)  in /usr/bin/clickhouse
9. 0x8ec248b ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>)  in /usr/bin/clickhouse
10. 0x8ec30e4 ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() const  in /usr/bin/clickhouse
11. 0x8ec138b ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse
12. 0x8ebf80f ?  in /usr/bin/clickhouse
13. 0x76db start_thread  in /lib/x86_64-linux-gnu/libpthread-2.27.so
14. 0x12188f __clone  in /lib/x86_64-linux-gnu/libc-2.27.so
 (version 20.1.8.41 (official build))
Code: 27. DB::Exception: Cannot parse input: expected \t before: -16\tbeaea8ad-a045-46c6-ac41-d886e6307bb7\t2020-04-16T10:22:42\tc9183984-5bb4-4fde-b50f-d1c66458f4a7\t83B8C742-EA70-46F4-BDE9-BE6D4A978BA8\t\t54\tTsvInsertTest\t0.5464\t: (at row 1)

Row 1:
Column 0,   name: CreatedOnDate,                                                  type: Date,                          parsed text: "2020-04"
ERROR: garbage after Date: "-16<TAB>beaea8"
ERROR: Date must be in YYYY-MM-DD format.

```
If a Date column isn't first a query is executed without exceptions:

TSV file: 
```
beaea8ad-a045-46c6-ac41-d886e6307bb7	2020-04-16	2020-04-16T10:22:42	c9183984-5bb4-4fde-b50f-d1c66458f4a7	83B8C742-EA70-46F4-BDE9-BE6D4A978BA8		54	TsvInsertTest	0.5464	0	1	9223372036854775807	3cc7c190-0b2c-4456-915b-425dd7d375c7			0			0			0				

```

Query:
```SQL
root@ch_logs_b2:/data/reporting/temp# cat tsv.txt | clickhouse-client --database=tests  --query="INSERT INTO tests.t01 (ActionLowCardinality, CreatedOnDate, CreatedOn, UserTrackingId, Action, StringField, IntValue, TestName, DecimalField, WrongInt, BoolField, LongField, UUIDField, NestedTest.NestedInt, NestedTest.NestedString, ObjectTest__SecondLevelObject__SecondLevelObject__ObjectInt, ObjectTest__SecondLevelObject__SecondLevelObject__ObjectString, ObjectTest__SecondLevelObject__SecondLevelObject__ArrayInt, ObjectTest__SecondLevelObject__ObjectInt, ObjectTest__SecondLevelObject__ObjectString, ObjectTest__SecondLevelObject__ArrayInt, ObjectTest__ObjectInt, ObjectTest__ObjectString, ObjectTest__ArrayInt, ArrayString, ArrayInt) FORMAT TSV" --input_format_tsv_empty_as_default=1
```

Result:
```SQL
select * from tests.t01 FORMAT Vertical

SELECT *
FROM tests.t01
FORMAT Vertical

Row 1:
──────
CreatedOnDate:                                                  2020-04-16
ActionLowCardinality:                                           beaea8ad-a045-46c6-ac41-d886e6307bb7
CreatedOn:                                                      2020-04-16 10:22:42
UserTrackingId:                                                 c9183984-5bb4-4fde-b50f-d1c66458f4a7
Action:                                                         83B8C742-EA70-46F4-BDE9-BE6D4A978BA8
StringField:
IntValue:                                                       54
TestName:                                                       TsvInsertTest
DecimalField:                                                   0.54640
WrongInt:                                                       0
BoolField:                                                      1
LongField:                                                      9223372036854775807
UUIDField:                                                      3cc7c190-0b2c-4456-915b-425dd7d375c7
NestedTest.NestedInt:                                           []
NestedTest.NestedString:                                        []
ObjectTest__ObjectInt:                                          0
ObjectTest__ObjectString:
ObjectTest__ArrayInt:                                           []
ObjectTest__SecondLevelObject__ObjectInt:                       0
ObjectTest__SecondLevelObject__ObjectString:
ObjectTest__SecondLevelObject__ArrayInt:                        []
ObjectTest__SecondLevelObject__SecondLevelObject__ObjectInt:    0
ObjectTest__SecondLevelObject__SecondLevelObject__ObjectString:
ObjectTest__SecondLevelObject__SecondLevelObject__ArrayInt:     []
ArrayString:                                                    []
ArrayInt:                                                       []

1 rows in set. Elapsed: 0.007 sec.
```
ClickHouse clients and servers used (the same behavior):
1) ClickHouse client version 20.1.8.41 (official build).
ClickHouse server version 20.1.8 revision 54431.

2) ClickHouse client version 20.3.5.21 (official build).
ClickHouse server version 20.3.5 revision 54433.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
