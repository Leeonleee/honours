{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10424,
  "instance_id": "ClickHouse__ClickHouse-10424",
  "issue_numbers": [
    "10301"
  ],
  "base_commit": "8df64543b7eb2123985863c80a622a5355e63a71",
  "patch": "diff --git a/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp b/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp\nindex 706941a3dc6e..0dd7245b965d 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp\n@@ -126,7 +126,7 @@ void TabSeparatedRowInputFormat::fillUnreadColumnsWithDefaults(MutableColumns &\n \n void TabSeparatedRowInputFormat::readPrefix()\n {\n-    if (with_names || with_types)\n+    if (with_names || with_types || data_types.at(0)->textCanContainOnlyValidUTF8())\n     {\n         /// In this format, we assume that column name or type cannot contain BOM,\n         ///  so, if format has header,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01258_bom_tsv.reference b/tests/queries/0_stateless/01258_bom_tsv.reference\nnew file mode 100644\nindex 000000000000..6622044ee6e6\n--- /dev/null\n+++ b/tests/queries/0_stateless/01258_bom_tsv.reference\n@@ -0,0 +1,2 @@\n+1\t2\t3\n+4\t5\t6\ndiff --git a/tests/queries/0_stateless/01258_bom_tsv.sh b/tests/queries/0_stateless/01258_bom_tsv.sh\nnew file mode 100755\nindex 000000000000..5668b00f069a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01258_bom_tsv.sh\n@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+# BOM can be parsed if TSV format has first column that cannot contain arbitrary binary data (such as integer)\n+# In contrast, BOM cannot be parsed if the first column in String as it can contain arbitrary binary data.\n+\n+echo 'DROP TABLE IF EXISTS bom' | ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" --data-binary @-\n+echo 'CREATE TABLE bom (a UInt8, b UInt8, c UInt8) ENGINE = Memory' | ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" --data-binary @-\n+echo -ne '1\\t2\\t3\\n' | ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&query=INSERT+INTO+bom+FORMAT+TSV\" --data-binary @-\n+echo -ne '\\xEF\\xBB\\xBF4\\t5\\t6\\n' | ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&query=INSERT+INTO+bom+FORMAT+TSV\" --data-binary @-\n+echo 'SELECT * FROM bom ORDER BY a' | ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" --data-binary @-\n+echo 'DROP TABLE bom' | ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" --data-binary @-\n",
  "problem_statement": "TSV import error (Exception: Cannot parse input: expected \\t before)\nHi. I encountered a problem with importing TabSeparated data.\r\nAn exception is thrown when trying to import tsv data starting with a Date (or DateTime) column.\r\n\r\nTable:\r\n```SQL\r\nCREATE TABLE IF NOT EXISTS tests.t01\r\n(\r\n    CreatedOnDate Date,\r\n    ActionLowCardinality LowCardinality(String),\r\n    CreatedOn DateTime,\r\n    UserTrackingId UUID,\r\n    Action String,\r\n    StringField String,\r\n    IntValue UInt16,\r\n    TestName String,\r\n    DecimalField Decimal(5, 5),\r\n    WrongInt Int32,\r\n    BoolField UInt8,\r\n    LongField UInt64,\r\n    UUIDField UUID,\r\n    NestedTest Nested \r\n    (\r\n        NestedInt UInt16, \r\n        NestedString LowCardinality(String)\r\n    ),\r\n    ObjectTest__ObjectInt UInt16,\r\n    ObjectTest__ObjectString LowCardinality(String),\r\n    ObjectTest__ArrayInt Array(Int32),\r\n    ObjectTest__SecondLevelObject__ObjectInt UInt16,\r\n    ObjectTest__SecondLevelObject__ObjectString LowCardinality(String),\r\n    ObjectTest__SecondLevelObject__ArrayInt Array(Int32),\r\n    ObjectTest__SecondLevelObject__SecondLevelObject__ObjectInt UInt16,\r\n    ObjectTest__SecondLevelObject__SecondLevelObject__ObjectString LowCardinality(String),\r\n    ObjectTest__SecondLevelObject__SecondLevelObject__ArrayInt Array(Int32),\r\n    ArrayString Array(String),\r\n    ArrayInt Array(Int32)\r\n) \r\nENGINE MergeTree() \r\nPARTITION BY toYYYYMM(CreatedOnDate)\r\nORDER BY ( CreatedOnDate, UserTrackingId)\r\nSAMPLE BY UserTrackingId \r\nSETTINGS index_granularity=8192\r\n```\r\nTSV file to insert:\r\n\r\n```\r\n2020-04-16\tbeaea8ad-a045-46c6-ac41-d886e6307bb7\t2020-04-16T10:22:42\tc9183984-5bb4-4fde-b50f-d1c66458f4a7\t83B8C742-EA70-46F4-BDE9-BE6D4A978BA8\t\t54\tTsvInsertTest\t0.5464\t0\t1\t9223372036854775807\t3cc7c190-0b2c-4456-915b-425dd7d375c7\t\t\t0\t\t\t0\t\t\t0\t\t\t\t\r\n\r\n```\r\n\r\nError:\r\n```bash\r\nroot@ch_logs_b2:/data/reporting/temp# cat tsv.txt | clickhouse-client --database=tests  --query=\"INSERT INTO tests.t01 (CreatedOnDate, ActionLowCardinality, CreatedOn, UserTrackingId, Action, StringField, IntValue, TestName, DecimalField, WrongInt, BoolField, LongField, UUIDField, NestedTest.NestedInt, NestedTest.NestedString, ObjectTest__SecondLevelObject__SecondLevelObject__ObjectInt, ObjectTest__SecondLevelObject__SecondLevelObject__ObjectString, ObjectTest__SecondLevelObject__SecondLevelObject__ArrayInt, ObjectTest__SecondLevelObject__ObjectInt, ObjectTest__SecondLevelObject__ObjectString, ObjectTest__SecondLevelObject__ArrayInt, ObjectTest__ObjectInt, ObjectTest__ObjectString, ObjectTest__ArrayInt, ArrayString, ArrayInt) FORMAT TSV\" --input_format_tsv_empty_as_default=1\r\nCode: 27, e.displayText() = DB::Exception: Cannot parse input: expected \\t before: -16\\tbeaea8ad-a045-46c6-ac41-d886e6307bb7\\t2020-04-16T10:22:42\\tc9183984-5bb4-4fde-b50f-d1c66458f4a7\\t83B8C742-EA70-46F4-BDE9-BE6D4A978BA8\\t\\t54\\tTsvInsertTest\\t0.5464\\t: (at row 1)\r\n\r\nRow 1:\r\nColumn 0,   name: CreatedOnDate,                                                  type: Date,                          parsed text: \"2020-04\"\r\nERROR: garbage after Date: \"-16<TAB>beaea8\"\r\nERROR: Date must be in YYYY-MM-DD format.\r\n\r\n, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. 0x100fe40c Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)  in /usr/bin/clickhouse\r\n1. 0x8e9e849 DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)  in /usr/bin/clickhouse\r\n2. 0x8ed5985 ?  in /usr/bin/clickhouse\r\n3. 0xda69147 DB::TabSeparatedRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&)  in /usr/bin/clickhouse\r\n4. 0xd9288b9 DB::IRowInputFormat::generate()  in /usr/bin/clickhouse\r\n5. 0xd8bb137 DB::ISource::work()  in /usr/bin/clickhouse\r\n6. 0xd87babd DB::InputStreamFromInputFormat::readImpl()  in /usr/bin/clickhouse\r\n7. 0xcc712bf DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n8. 0xd880822 DB::ParallelParsingBlockInputStream::parserThreadFunction(unsigned long)  in /usr/bin/clickhouse\r\n9. 0x8ec248b ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>)  in /usr/bin/clickhouse\r\n10. 0x8ec30e4 ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() const  in /usr/bin/clickhouse\r\n11. 0x8ec138b ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse\r\n12. 0x8ebf80f ?  in /usr/bin/clickhouse\r\n13. 0x76db start_thread  in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n14. 0x12188f __clone  in /lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 20.1.8.41 (official build))\r\nCode: 27. DB::Exception: Cannot parse input: expected \\t before: -16\\tbeaea8ad-a045-46c6-ac41-d886e6307bb7\\t2020-04-16T10:22:42\\tc9183984-5bb4-4fde-b50f-d1c66458f4a7\\t83B8C742-EA70-46F4-BDE9-BE6D4A978BA8\\t\\t54\\tTsvInsertTest\\t0.5464\\t: (at row 1)\r\n\r\nRow 1:\r\nColumn 0,   name: CreatedOnDate,                                                  type: Date,                          parsed text: \"2020-04\"\r\nERROR: garbage after Date: \"-16<TAB>beaea8\"\r\nERROR: Date must be in YYYY-MM-DD format.\r\n\r\n```\r\nIf a Date column isn't first a query is executed without exceptions:\r\n\r\nTSV file: \r\n```\r\nbeaea8ad-a045-46c6-ac41-d886e6307bb7\t2020-04-16\t2020-04-16T10:22:42\tc9183984-5bb4-4fde-b50f-d1c66458f4a7\t83B8C742-EA70-46F4-BDE9-BE6D4A978BA8\t\t54\tTsvInsertTest\t0.5464\t0\t1\t9223372036854775807\t3cc7c190-0b2c-4456-915b-425dd7d375c7\t\t\t0\t\t\t0\t\t\t0\t\t\t\t\r\n\r\n```\r\n\r\nQuery:\r\n```SQL\r\nroot@ch_logs_b2:/data/reporting/temp# cat tsv.txt | clickhouse-client --database=tests  --query=\"INSERT INTO tests.t01 (ActionLowCardinality, CreatedOnDate, CreatedOn, UserTrackingId, Action, StringField, IntValue, TestName, DecimalField, WrongInt, BoolField, LongField, UUIDField, NestedTest.NestedInt, NestedTest.NestedString, ObjectTest__SecondLevelObject__SecondLevelObject__ObjectInt, ObjectTest__SecondLevelObject__SecondLevelObject__ObjectString, ObjectTest__SecondLevelObject__SecondLevelObject__ArrayInt, ObjectTest__SecondLevelObject__ObjectInt, ObjectTest__SecondLevelObject__ObjectString, ObjectTest__SecondLevelObject__ArrayInt, ObjectTest__ObjectInt, ObjectTest__ObjectString, ObjectTest__ArrayInt, ArrayString, ArrayInt) FORMAT TSV\" --input_format_tsv_empty_as_default=1\r\n```\r\n\r\nResult:\r\n```SQL\r\nselect * from tests.t01 FORMAT Vertical\r\n\r\nSELECT *\r\nFROM tests.t01\r\nFORMAT Vertical\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nCreatedOnDate:                                                  2020-04-16\r\nActionLowCardinality:                                           beaea8ad-a045-46c6-ac41-d886e6307bb7\r\nCreatedOn:                                                      2020-04-16 10:22:42\r\nUserTrackingId:                                                 c9183984-5bb4-4fde-b50f-d1c66458f4a7\r\nAction:                                                         83B8C742-EA70-46F4-BDE9-BE6D4A978BA8\r\nStringField:\r\nIntValue:                                                       54\r\nTestName:                                                       TsvInsertTest\r\nDecimalField:                                                   0.54640\r\nWrongInt:                                                       0\r\nBoolField:                                                      1\r\nLongField:                                                      9223372036854775807\r\nUUIDField:                                                      3cc7c190-0b2c-4456-915b-425dd7d375c7\r\nNestedTest.NestedInt:                                           []\r\nNestedTest.NestedString:                                        []\r\nObjectTest__ObjectInt:                                          0\r\nObjectTest__ObjectString:\r\nObjectTest__ArrayInt:                                           []\r\nObjectTest__SecondLevelObject__ObjectInt:                       0\r\nObjectTest__SecondLevelObject__ObjectString:\r\nObjectTest__SecondLevelObject__ArrayInt:                        []\r\nObjectTest__SecondLevelObject__SecondLevelObject__ObjectInt:    0\r\nObjectTest__SecondLevelObject__SecondLevelObject__ObjectString:\r\nObjectTest__SecondLevelObject__SecondLevelObject__ArrayInt:     []\r\nArrayString:                                                    []\r\nArrayInt:                                                       []\r\n\r\n1 rows in set. Elapsed: 0.007 sec.\r\n```\r\nClickHouse clients and servers used (the same behavior):\r\n1) ClickHouse client version 20.1.8.41 (official build).\r\nClickHouse server version 20.1.8 revision 54431.\r\n\r\n2) ClickHouse client version 20.3.5.21 (official build).\r\nClickHouse server version 20.3.5 revision 54433.\r\n\n",
  "hints_text": "All builds are from \r\nhttps://hub.docker.com/r/yandex/clickhouse-server/\nMay be your input file have a BOM mark at the very beginning?\n> May be your input file have a BOM mark at the very beginning?\r\n\r\nYes.\nTSV without header does not support BOM because it is not possible to distinguish it with binary data in the value in first row first column.\nIt is possible to distinguish if the first column cannot contain binary data.",
  "created_at": "2020-04-21T23:47:39Z",
  "modified_files": [
    "src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01258_bom_tsv.reference",
    "b/tests/queries/0_stateless/01258_bom_tsv.sh"
  ]
}