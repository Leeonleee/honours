{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23262,
  "instance_id": "ClickHouse__ClickHouse-23262",
  "issue_numbers": [
    "23236"
  ],
  "base_commit": "366ef28d66c6b4be5b72860412b2006440cc68bb",
  "patch": "diff --git a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\nindex 55a965394a1d..5ab8213020bb 100644\n--- a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\n+++ b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\n@@ -307,7 +307,22 @@ void buildPrimaryKeyConfiguration(\n         AutoPtr<Element> name_element(doc->createElement(\"name\"));\n         id_element->appendChild(name_element);\n \n-        const ASTDictionaryAttributeDeclaration * dict_attr = children.front()->as<const ASTDictionaryAttributeDeclaration>();\n+        auto identifier_name = key_names.front();\n+\n+        auto it = std::find_if(children.begin(), children.end(), [&](const ASTPtr & node)\n+        {\n+            const ASTDictionaryAttributeDeclaration * dict_attr = node->as<const ASTDictionaryAttributeDeclaration>();\n+            return dict_attr->name == identifier_name;\n+        });\n+\n+        if (it == children.end())\n+        {\n+            throw Exception(ErrorCodes::INCORRECT_DICTIONARY_DEFINITION,\n+                \"Primary key field '{}' not found among attributes\",\n+                identifier_name);\n+        }\n+\n+        const ASTDictionaryAttributeDeclaration * dict_attr = (*it)->as<const ASTDictionaryAttributeDeclaration>();\n \n         AutoPtr<Text> name(doc->createTextNode(dict_attr->name));\n         name_element->appendChild(name);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01821_dictionary_primary_key_wrong_order.reference b/tests/queries/0_stateless/01821_dictionary_primary_key_wrong_order.reference\nnew file mode 100644\nindex 000000000000..9833cbcc9b6b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01821_dictionary_primary_key_wrong_order.reference\n@@ -0,0 +1,1 @@\n+1\t20\ndiff --git a/tests/queries/0_stateless/01821_dictionary_primary_key_wrong_order.sql b/tests/queries/0_stateless/01821_dictionary_primary_key_wrong_order.sql\nnew file mode 100644\nindex 000000000000..636426fcc915\n--- /dev/null\n+++ b/tests/queries/0_stateless/01821_dictionary_primary_key_wrong_order.sql\n@@ -0,0 +1,24 @@\n+DROP TABLE IF EXISTS dictionary_primary_key_source_table;\n+CREATE TABLE dictionary_primary_key_source_table\n+(\n+    identifier UInt64,\n+    v UInt64\n+) ENGINE = TinyLog;\n+\n+INSERT INTO dictionary_primary_key_source_table VALUES (20, 1);\n+\n+DROP DICTIONARY IF EXISTS flat_dictionary;\n+CREATE DICTIONARY flat_dictionary\n+(\n+    identifier UInt64,\n+    v UInt64\n+)\n+PRIMARY KEY v\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_primary_key_source_table'))\n+LIFETIME(MIN 1 MAX 1000)\n+LAYOUT(FLAT());\n+\n+SELECT * FROM flat_dictionary;\n+\n+DROP DICTIONARY flat_dictionary;\n+DROP TABLE dictionary_primary_key_source_table;\n",
  "problem_statement": "Wrong behavior in dictionaries when key columns are not the first in column order\n(you don't have to strictly follow this form)\r\n\r\n**Describe the bug**\r\nAfter upgrade to 21.3 below dictionaries stopped working properly (confirmed on layout hashed, Clickhouse and ODBC source). All other layouts and sources not tested. \r\n\r\n**Does it reproduce on recent release?**\r\nReproduces in 21.3.4.25\r\n\r\n**How to reproduce**\r\n\r\nClickhouse source:\r\n\r\n```\r\nDROP table If exists default.dicTest;\r\nDROP DICTIONARY if exists default.testWorking;\r\ncreate table default.dicTest Engine=MergeTree order by tuple() as select cityHash64(number,1) k, cityHash64(number, 2) v from numbers(100) ;\r\nCREATE DICTIONARY default.testWorking ( k UInt64, v UInt64 )\r\nPRIMARY KEY k\r\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' DB 'default' TABLE 'dicTest' ) )\r\nLIFETIME(MIN 300 MAX 360)\r\nLAYOUT(HASHED());\r\n\r\nCREATE DICTIONARY default.testBuggy ( k UInt64, v UInt64 )\r\nPRIMARY KEY v\r\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' DB 'default' TABLE 'dicTest' ) )\r\nLIFETIME(MIN 300 MAX 360)\r\nLAYOUT(HASHED());\r\nselect * from default.testWorking ;\r\nselect * from default.testBuggy ; -- returns only one column, cannot query \"v\" - key column\r\nselect v,k from default.testBuggy ; \r\n-- DB::Exception: Missing columns: 'v' while processing query: 'SELECT v, k FROM default.testBuggy', required columns: 'v' 'k', maybe you meant: ['k','k'] (version 21.3.4.25 (official build))\r\n```\r\n\r\nODBC:\r\n\r\n```\r\n----TEST_1 ( Key column is in first place )\r\nhostname :) CREATE DICTIONARY test_dictionary_1 (`XID` UInt8, `XNAME` String, `XSURNAME` String) PRIMARY KEY XID SOURCE(ODBC(CONNECTION_STRING 'DSN=MYODBCSRC' TABLE 'V_TEST_TEST' )) LIFETIME(MIN 300 MAX 86400) LAYOUT(HASHED())\r\n\r\nCREATE DICTIONARY test_dictionary_1\r\n(\r\n    `XID` UInt8,\r\n    `XNAME` String,\r\n    `XSURNAME` String\r\n)\r\nPRIMARY KEY XID\r\nSOURCE(ODBC(CONNECTION_STRING 'DSN=MYODBCSRC' TABLE 'V_TEST_TEST'))\r\nLIFETIME(MIN 300 MAX 86400)\r\nLAYOUT(HASHED())\r\n\r\nQuery id: 360d6407-7049-44ff-b1db-946c3e78bdd8\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.004 sec. \r\n\r\nhostname :) select * from test_dictionary_1;\r\n\r\nSELECT *\r\nFROM test_dictionary_1\r\n\r\nQuery id: 1ee658a0-8898-4ac9-bab1-e8c41ba4c102\r\n\r\n--- returns data\r\n1 rows in set. Elapsed: 4.580 sec. \r\n\r\ntuna-clickhouse  :) select version();\r\n\r\nSELECT version()\r\n\r\nQuery id: 8ba03bb1-c3b5-42d8-9396-cc8deb0da61f\r\n\r\n\u00e2\u201d\u0152\u00e2\u201d\u20acversion()\u00e2\u201d\u20ac\u00e2\u201d\u0090\r\n\u00e2\u201d\u201a 21.3.4.25 \u00e2\u201d\u201a\r\n\u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u02dc\r\n\r\n1 rows in set. Elapsed: 0.002 sec. \r\n\r\n\r\n\r\n\r\n----TEST_2 ( Key column is not in first place )\r\nhostname :) CREATE DICTIONARY test_dictionary_2 (`XNAME` String, `XID` UInt8, `XSURNAME` String) PRIMARY KEY XID SOURCE(ODBC(CONNECTION_STRING 'DSN=MYODBCSRC' TABLE 'V_TEST_TEST_2' )) LIFETIME(MIN 300 MAX 86400) LAYOUT(HASHED())\r\n\r\nCREATE DICTIONARY test_dictionary_2\r\n(\r\n    `XNAME` String,\r\n    `XID` UInt8,\r\n    `XSURNAME` String\r\n)\r\nPRIMARY KEY XID\r\nSOURCE(ODBC(CONNECTION_STRING 'DSN=MYODBCSRC' TABLE 'V_TEST_TEST_2'))\r\nLIFETIME(MIN 300 MAX 86400)\r\nLAYOUT(HASHED())\r\n\r\nQuery id: 64e06917-8040-41e5-8511-539d129e4c00\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nhostname :) select * from test_dictionary_2 ;\r\n\r\nSELECT *\r\nFROM test_dictionary_2\r\n\r\nQuery id: 02d070cd-ace7-45ec-b85d-bdcb693547d8\r\n\r\n\r\n0 rows in set. Elapsed: 2.013 sec. \r\n\r\nReceived exception from server (version 21.3.4):\r\nCode: 86. DB::Exception: Received from localhost:9000. \r\nDB::Exception: Received error from remote server /?connection_string=DSN%3DMYODBCSRC&columns=columns%20format%20version%3A%201%0A3%20columns%3A%0A%60XNAME%60%20UInt64%0A%60XNAME%60%20String%0A%60XSURNAME%60%20String%0A&max_block_size=8192. \r\nHTTP status code: 500 Internal Server Error, \r\nbody: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = Syntax error: Not a valid unsigned integer: textstring,\r\n\r\nhostname :) select version();\r\n\r\nSELECT version()\r\n\r\nQuery id: 5c76be4b-9f34-45da-a712-847e8c006a54\r\n\r\n\u00e2\u201d\u0152\u00e2\u201d\u20acversion()\u00e2\u201d\u20ac\u00e2\u201d\u0090\r\n\u00e2\u201d\u201a 21.3.4.25 \u00e2\u201d\u201a\r\n\u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u02dc\r\n\r\n1 rows in set. Elapsed: 0.002 sec. \r\n```\r\n\r\n**Expected behavior**\r\nBackward compatibility shall not be broken. All querying to dictionaries shall work exactly in the same way as in previous LTS version. \r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2021-04-18T12:22:01Z",
  "modified_files": [
    "src/Dictionaries/getDictionaryConfigurationFromAST.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01821_dictionary_primary_key_wrong_order.reference",
    "b/tests/queries/0_stateless/01821_dictionary_primary_key_wrong_order.sql"
  ]
}