{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 61037,
  "instance_id": "ClickHouse__ClickHouse-61037",
  "issue_numbers": [
    "60760"
  ],
  "base_commit": "086ef14fe62ed0c58bdaf1d46df045672dc53ebf",
  "patch": "diff --git a/src/TableFunctions/TableFunctionExecutable.cpp b/src/TableFunctions/TableFunctionExecutable.cpp\nindex 9fa5ddf15c23..2c3802e86676 100644\n--- a/src/TableFunctions/TableFunctionExecutable.cpp\n+++ b/src/TableFunctions/TableFunctionExecutable.cpp\n@@ -71,6 +71,9 @@ std::vector<size_t> TableFunctionExecutable::skipAnalysisForArguments(const Quer\n     const auto & table_function_node_arguments = table_function_node.getArguments().getNodes();\n     size_t table_function_node_arguments_size = table_function_node_arguments.size();\n \n+    if (table_function_node_arguments_size <= 2)\n+        return {};\n+\n     std::vector<size_t> result_indexes;\n     result_indexes.reserve(table_function_node_arguments_size - 2);\n     for (size_t i = 2; i < table_function_node_arguments_size; ++i)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03006_analyzer_executable_table_function.reference b/tests/queries/0_stateless/03006_analyzer_executable_table_function.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03006_analyzer_executable_table_function.sql b/tests/queries/0_stateless/03006_analyzer_executable_table_function.sql\nnew file mode 100644\nindex 000000000000..4edbcc97f50f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03006_analyzer_executable_table_function.sql\n@@ -0,0 +1,4 @@\n+SELECT\n+    toFixedString(toFixedString(toLowCardinality(toFixedString('--------------------', toNullable(20))), toLowCardinality(20)), 20),\n+    *\n+FROM executable('data String', SETTINGS max_command_execution_time = 100); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\n",
  "problem_statement": "[Analyzer] Assert in table function executable\nLink: https://s3.amazonaws.com/clickhouse-test-reports/60384/0820fd49e9dc149a95f57cbbe1a5829cd4cc40cb/ast_fuzzer__ubsan_.html\r\n\r\nReproducer:\r\n```\r\nSELECT\r\n    toFixedString(toFixedString(toLowCardinality(toFixedString('--------------------', toNullable(20))), toLowCardinality(20)), 20),\r\n    *\r\nFROM executable('data String', SETTINGS max_command_execution_time = 100)\r\nSETTINGS allow_experimental_analyzer = 1\r\n```\r\n\r\n```\r\nMordor :) SELECT toFixedString(toFixedString(toLowCardinality(toFixedString('--------------------', toNullable(20))), toLowCardinality(20)), 20), * FROM executable('data String', SETTINGS max_command_execution_time = 100) settings allow_experimental_analyzer=1 \r\n\r\nSELECT\r\n    toFixedString(toFixedString(toLowCardinality(toFixedString('--------------------', toNullable(20))), toLowCardinality(20)), 20),\r\n    *\r\nFROM executable('data String', SETTINGS max_command_execution_time = 100)\r\nSETTINGS allow_experimental_analyzer = 1\r\n\r\nQuery id: 10efbebc-fb1e-492c-bfb4-9ec05309c255\r\n\r\n\r\nThread 1 \"clickhouse\" hit Breakpoint 1, DB::(anonymous namespace)::TableFunctionExecutable::skipAnalysisForArguments (this=0x7ffebd02c6d8, query_node_table_function=...) at /mnt/ch/ClickHouse/src/TableFunctions/TableFunctionExecutable.cpp:70\r\n70          const auto & table_function_node = query_node_table_function->as<TableFunctionNode &>();\r\n(gdb) n\r\n71          const auto & table_function_node_arguments = table_function_node.getArguments().getNodes();\r\n(gdb) n\r\n72          size_t table_function_node_arguments_size = table_function_node_arguments.size();\r\n(gdb) n\r\n74          std::vector<size_t> result_indexes;\r\n(gdb) p table_function_node_arguments_size\r\n$1 = 1\r\n(gdb) n\r\n75          result_indexes.reserve(table_function_node_arguments_size - 2);\r\n(gdb) n\r\n2024.03.04 12:04:11.102078 [ 88003 ] {10efbebc-fb1e-492c-bfb4-9ec05309c255} <Fatal> : Logical error: 'std::exception. Code: 1001, type: std::length_error, e.what() = vector (version 24.2.1.1), Stack trace:\r\n\r\n0. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/exception:141: std::exception::capture() @ 0x000000000ac3de62\r\n1. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/exception:116: std::exception::exception[abi:v15000]() @ 0x000000000ac3de2d\r\n2. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/src/support/runtime/stdexcept_default.ipp:24: std::logic_error::logic_error(char const*) @ 0x0000000029aba5dd\r\n3. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/stdexcept:154: std::length_error::length_error[abi:v15000](char const*) @ 0x000000000ac1e7a1\r\n4. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/stdexcept:257: std::__throw_length_error[abi:v15000](char const*) @ 0x000000000ac1e729\r\n5. ? @ 0x000000000ac6e498\r\n6. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/vector:0: std::vector<unsigned long, std::allocator<unsigned long>>::reserve(unsigned long) @ 0x0000000012339e52\r\n7. /mnt/ch/ClickHouse/src/TableFunctions/TableFunctionExecutable.cpp:75: DB::(anonymous namespace)::TableFunctionExecutable::skipAnalysisForArguments(std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) const @ 0x000000001ac741dc\r\n8. /mnt/ch/ClickHouse/src/Analyzer/Passes/QueryAnalysisPass.cpp:6792: DB::(anonymous namespace)::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::QueryExpressionsAliasVisitor&, bool) @ 0x000000001db32a1c\r\n9. /mnt/ch/ClickHouse/src/Analyzer/Passes/QueryAnalysisPass.cpp:7300: DB::(anonymous namespace)::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::QueryExpressionsAliasVisitor&) @ 0x000000001db38c8c\r\n10. /mnt/ch/ClickHouse/src/Analyzer/Passes/QueryAnalysisPass.cpp:7544: DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x000000001db2b859\r\n11. /mnt/ch/ClickHouse/src/Analyzer/Passes/QueryAnalysisPass.cpp:1088: DB::(anonymous namespace)::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001db29b97\r\n12. /mnt/ch/ClickHouse/src/Analyzer/Passes/QueryAnalysisPass.cpp:7759: DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000001db297f0\r\n13. /mnt/ch/ClickHouse/src/Analyzer/QueryTreePassManager.cpp:186: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001db19102\r\n14. /mnt/ch/ClickHouse/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:114: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000001e00ee93\r\n15. /mnt/ch/ClickHouse/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:131: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x000000001e00e030\r\n16. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: std::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::make_unique[abi:v15000]<DB::InterpreterSelectQueryAnalyzer, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) @ 0x000000001e0111c8\r\n17. /mnt/ch/ClickHouse/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:240: DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0::operator()(DB::InterpreterFactory::Arguments const&) const @ 0x000000001e0106cc\r\n18. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ? @ 0x000000001e01067d\r\n19. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:470: ? @ 0x000000001e01060a\r\n20. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:235: ? @ 0x000000001e0105bd\r\n21. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000001e010585\r\n22. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000001df1dd1e\r\n23. /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:1187: ? @ 0x000000001df18e5d\r\n24. /mnt/ch/ClickHouse/src/Interpreters/InterpreterFactory.cpp:351: DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000001df17a12\r\n25. /mnt/ch/ClickHouse/src/Interpreters/executeQuery.cpp:1085: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001e743aa6\r\n26. /mnt/ch/ClickHouse/src/Interpreters/executeQuery.cpp:1326: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001e73eabe\r\n27. /mnt/ch/ClickHouse/src/Client/LocalConnection.cpp:134: DB::LocalConnection::sendQuery(DB::ConnectionTimeouts const&, String const&, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>> const&, String const&, unsigned long, DB::Settings const*, DB::ClientInfo const*, bool, std::function<void (DB::Progress const&)>) @ 0x000000002006155d\r\n28. /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:984: DB::ClientBase::processOrdinaryQuery(String const&, std::shared_ptr<DB::IAST>) @ 0x000000001ffb90e6\r\n29. /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:1894: DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x000000001ffb79c1\r\n30. /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:858: DB::ClientBase::processTextAsSingleQuery(String const&) @ 0x000000001ffb64a3\r\n31. /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:2293: DB::ClientBase::processQueryText(String const&) @ 0x000000001ffc2c44\r\n'.\r\n\r\nThread 1 \"clickhouse\" received signal SIGABRT, Aborted.\r\n__pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44\r\n44            return INTERNAL_SYSCALL_ERROR_P (ret) ? INTERNAL_SYSCALL_ERRNO (ret) : 0;\r\n```\r\n\n",
  "hints_text": "Introduced in https://github.com/ClickHouse/ClickHouse/pull/60339\r\n@yakov-olkhovskiy ",
  "created_at": "2024-03-07T13:51:39Z"
}