{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46839,
  "instance_id": "ClickHouse__ClickHouse-46839",
  "issue_numbers": [
    "46169"
  ],
  "base_commit": "3cff38b15838610db8f9af31dbe14b2d11291fb0",
  "patch": "diff --git a/src/Storages/IndicesDescription.cpp b/src/Storages/IndicesDescription.cpp\nindex 2e07aceeaa95..a93ac248c98e 100644\n--- a/src/Storages/IndicesDescription.cpp\n+++ b/src/Storages/IndicesDescription.cpp\n@@ -94,14 +94,15 @@ IndexDescription IndexDescription::getIndexFromAST(const ASTPtr & definition_ast\n \n     auto syntax = TreeRewriter(context).analyze(expr_list, columns.getAllPhysical());\n     result.expression = ExpressionAnalyzer(expr_list, syntax, context).getActions(true);\n-    Block block_without_columns = result.expression->getSampleBlock();\n+    result.sample_block = result.expression->getSampleBlock();\n \n-    for (size_t i = 0; i < block_without_columns.columns(); ++i)\n+    for (auto & elem : result.sample_block)\n     {\n-        const auto & column = block_without_columns.getByPosition(i);\n-        result.column_names.emplace_back(column.name);\n-        result.data_types.emplace_back(column.type);\n-        result.sample_block.insert(ColumnWithTypeAndName(column.type->createColumn(), column.type, column.name));\n+        if (!elem.column)\n+            elem.column = elem.type->createColumn();\n+\n+        result.column_names.push_back(elem.name);\n+        result.data_types.push_back(elem.type);\n     }\n \n     const auto & definition_arguments = index_definition->type->arguments;\ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 0d4e54453d77..f49ecba13854 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -524,7 +524,6 @@ void MergeTreeData::checkProperties(\n \n         for (const auto & index : new_metadata.secondary_indices)\n         {\n-\n             MergeTreeIndexFactory::instance().validate(index, attach);\n \n             if (indices_names.find(index.name) != indices_names.end())\ndiff --git a/src/Storages/MergeTree/MergeTreeIndices.cpp b/src/Storages/MergeTree/MergeTreeIndices.cpp\nindex 2be9ecd8de35..6ae96d001711 100644\n--- a/src/Storages/MergeTree/MergeTreeIndices.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndices.cpp\n@@ -35,6 +35,7 @@ MergeTreeIndexPtr MergeTreeIndexFactory::get(\n {\n     auto it = creators.find(index.type);\n     if (it == creators.end())\n+    {\n         throw Exception(ErrorCodes::INCORRECT_QUERY,\n                 \"Unknown Index type '{}'. Available index types: {}\", index.type,\n                 std::accumulate(creators.cbegin(), creators.cend(), std::string{},\n@@ -46,6 +47,7 @@ MergeTreeIndexPtr MergeTreeIndexFactory::get(\n                                 return left + \", \" + right.first;\n                         })\n                 );\n+    }\n \n     return it->second(index);\n }\n@@ -61,8 +63,31 @@ MergeTreeIndices MergeTreeIndexFactory::getMany(const std::vector<IndexDescripti\n \n void MergeTreeIndexFactory::validate(const IndexDescription & index, bool attach) const\n {\n+    /// Do not allow constant and non-deterministic expressions.\n+    /// Do not throw on attach for compatibility.\n+    if (!attach)\n+    {\n+        if (index.expression->hasArrayJoin())\n+            throw Exception(ErrorCodes::INCORRECT_QUERY, \"Secondary index '{}' cannot contain array joins\", index.name);\n+\n+        try\n+        {\n+            index.expression->assertDeterministic();\n+        }\n+        catch (Exception & e)\n+        {\n+            e.addMessage(fmt::format(\"for secondary index '{}'\", index.name));\n+            throw;\n+        }\n+\n+        for (const auto & elem : index.sample_block)\n+            if (elem.column && (isColumnConst(*elem.column) || elem.column->isDummy()))\n+                throw Exception(ErrorCodes::INCORRECT_QUERY, \"Secondary index '{}' cannot contain constants\", index.name);\n+    }\n+\n     auto it = validators.find(index.type);\n     if (it == validators.end())\n+    {\n         throw Exception(ErrorCodes::INCORRECT_QUERY,\n             \"Unknown Index type '{}'. Available index types: {}\", index.type,\n                 std::accumulate(\n@@ -77,6 +102,7 @@ void MergeTreeIndexFactory::validate(const IndexDescription & index, bool attach\n                             return left + \", \" + right.first;\n                     })\n             );\n+    }\n \n     it->second(index, attach);\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01705_normalize_create_alter_function_names.reference b/tests/queries/0_stateless/01705_normalize_create_alter_function_names.reference\nindex b6f5fe99ca19..b5b93c34c001 100644\n--- a/tests/queries/0_stateless/01705_normalize_create_alter_function_names.reference\n+++ b/tests/queries/0_stateless/01705_normalize_create_alter_function_names.reference\n@@ -1,2 +1,2 @@\n-CREATE TABLE default.x\\n(\\n    `i` Int32,\\n    INDEX mm rand() TYPE minmax GRANULARITY 1,\\n    INDEX nn rand() TYPE minmax GRANULARITY 1,\\n    PROJECTION p\\n    (\\n        SELECT max(i)\\n    ),\\n    PROJECTION p2\\n    (\\n        SELECT min(i)\\n    )\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/default/x\\', \\'r\\')\\nORDER BY i\\nSETTINGS index_granularity = 8192\n-metadata format version: 1\\ndate column: \\nsampling expression: \\nindex granularity: 8192\\nmode: 0\\nsign column: \\nprimary key: i\\ndata format version: 1\\npartition key: \\nindices: mm rand() TYPE minmax GRANULARITY 1, nn rand() TYPE minmax GRANULARITY 1\\nprojections: p (SELECT max(i)), p2 (SELECT min(i))\\ngranularity bytes: 10485760\\n\n+CREATE TABLE default.x\\n(\\n    `i` Int32,\\n    INDEX mm log2(i) TYPE minmax GRANULARITY 1,\\n    INDEX nn log2(i) TYPE minmax GRANULARITY 1,\\n    PROJECTION p\\n    (\\n        SELECT max(i)\\n    ),\\n    PROJECTION p2\\n    (\\n        SELECT min(i)\\n    )\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/default/x\\', \\'r\\')\\nORDER BY i\\nSETTINGS index_granularity = 8192\n+metadata format version: 1\\ndate column: \\nsampling expression: \\nindex granularity: 8192\\nmode: 0\\nsign column: \\nprimary key: i\\ndata format version: 1\\npartition key: \\nindices: mm log2(i) TYPE minmax GRANULARITY 1, nn log2(i) TYPE minmax GRANULARITY 1\\nprojections: p (SELECT max(i)), p2 (SELECT min(i))\\ngranularity bytes: 10485760\\n\ndiff --git a/tests/queries/0_stateless/01705_normalize_create_alter_function_names.sql b/tests/queries/0_stateless/01705_normalize_create_alter_function_names.sql\nindex 683bd2714052..be0f7e8b7106 100644\n--- a/tests/queries/0_stateless/01705_normalize_create_alter_function_names.sql\n+++ b/tests/queries/0_stateless/01705_normalize_create_alter_function_names.sql\n@@ -2,9 +2,9 @@\n \n drop table if exists x;\n \n-create table x(i int, index mm RAND() type minmax granularity 1, projection p (select MAX(i))) engine ReplicatedMergeTree('/clickhouse/tables/{database}/x', 'r') order by i;\n+create table x(i int, index mm LOG2(i) type minmax granularity 1, projection p (select MAX(i))) engine ReplicatedMergeTree('/clickhouse/tables/{database}/x', 'r') order by i;\n \n-alter table x add index nn RAND() type minmax granularity 1, add projection p2 (select MIN(i));\n+alter table x add index nn LOG2(i) type minmax granularity 1, add projection p2 (select MIN(i));\n \n show create x;\n \ndiff --git a/tests/queries/0_stateless/02670_constant_skip_index.reference b/tests/queries/0_stateless/02670_constant_skip_index.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02670_constant_skip_index.sql b/tests/queries/0_stateless/02670_constant_skip_index.sql\nnew file mode 100644\nindex 000000000000..97dd2ab33c9f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02670_constant_skip_index.sql\n@@ -0,0 +1,25 @@\n+\n+DROP TABLE IF EXISTS t_constant_index;\n+\n+CREATE TABLE t_constant_index\n+(\n+    id UInt64,\n+    INDEX t_constant_index 'foo' TYPE set(2) GRANULARITY 1\n+) ENGINE = MergeTree\n+ORDER BY id; -- { serverError INCORRECT_QUERY }\n+\n+CREATE TABLE t_constant_index\n+(\n+    id UInt64,\n+    INDEX t_constant_index id + rand() TYPE set(2) GRANULARITY 1\n+) ENGINE = MergeTree\n+ORDER BY id; -- { serverError BAD_ARGUMENTS }\n+\n+CREATE TABLE t_constant_index\n+(\n+    id UInt64,\n+    INDEX t_constant_index id * 2 TYPE set(2) GRANULARITY 1\n+) ENGINE = MergeTree\n+ORDER BY id;\n+\n+DROP TABLE t_constant_index;\n",
  "problem_statement": "Crash with constant expression in skip index\nThis index definition doesn't make any sense but crashes the server (several runs may be required). \r\n\r\n**How to reproduce**\r\n```sql\r\nDROP TABLE IF EXISTS logins__fuzz_63;\r\n\r\nCREATE TABLE logins__fuzz_63\r\n(\r\n    id UInt64,\r\n    INDEX __idx_fuzz_10829467000260387718 'asdasd' TYPE set(2) GRANULARITY 1\r\n) ENGINE = MergeTree\r\nORDER BY id;\r\n\r\nINSERT INTO logins__fuzz_63 SELECT number FROM numbers(1000);\r\n\r\nDROP TABLE logins__fuzz_63;\r\n```\r\n\r\n```\r\n2023.02.08 20:08:26.705259 [ 3936720 ] <Fatal> BaseDaemon: ########################################\r\n2023.02.08 20:08:26.705340 [ 3936720 ] <Fatal> BaseDaemon: (version 23.2.1.1022 (official build), build id: 5264B62ECB409DBD66B4FEBE79CC24CD77239CA6) (from thread 3936227) (query_id: ba7a0c23-2fd2-491c-9adb-7698fcc3c886) (query: INSERT INTO logins__fuzz_63 SELECT number FROM numbers(1000);) Received signal Segmentation fault (11)\r\n2023.02.08 20:08:26.705383 [ 3936720 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n2023.02.08 20:08:26.705424 [ 3936720 ] <Fatal> BaseDaemon: Stack trace: 0x88a1030 0x13a60204 0x14335942 0x142e1824 0x142d378a 0x142d4d31 0x142d57fc 0x143f52dc 0x143ee757 0x1463f88b 0x14af0d62 0x149e5feb 0x149e5d39 0x149e561f 0x1480744c 0x147fc4dc 0x147faf19 0x147fac60 0x147f9cd2 0xdf5d056 0xdf628a1 0x7f5494191609 0x7f54940b6163\r\n2023.02.08 20:08:26.705479 [ 3936720 ] <Fatal> BaseDaemon: 2. memcpy @ 0x88a1030 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705522 [ 3936720 ] <Fatal> BaseDaemon: 3. DB::ColumnString::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x13a60204 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705551 [ 3936720 ] <Fatal> BaseDaemon: 4. DB::MergeTreeIndexAggregatorSet::update(DB::Block const&, unsigned long*, unsigned long) @ 0x14335942 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705588 [ 3936720 ] <Fatal> BaseDaemon: 5. DB::MergeTreeDataPartWriterOnDisk::calculateAndSerializeSkipIndices(DB::Block const&, std::__1::vector<DB::Granule, std::__1::allocator<DB::Granule>> const&) @ 0x142e1824 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705623 [ 3936720 ] <Fatal> BaseDaemon: 6. DB::MergeTreeDataPartWriterCompact::writeDataBlockPrimaryIndexAndSkipIndices(DB::Block const&, std::__1::vector<DB::Granule, std::__1::allocator<DB::Granule>> const&) @ 0x142d378a in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705653 [ 3936720 ] <Fatal> BaseDaemon: 7. DB::MergeTreeDataPartWriterCompact::fillDataChecksums(DB::MergeTreeDataPartChecksums&) @ 0x142d4d31 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705687 [ 3936720 ] <Fatal> BaseDaemon: 8. DB::MergeTreeDataPartWriterCompact::fillChecksums(DB::MergeTreeDataPartChecksums&) @ 0x142d57fc in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705714 [ 3936720 ] <Fatal> BaseDaemon: 9. DB::MergedBlockOutputStream::finalizePartAsync(std::__1::shared_ptr<DB::IMergeTreeDataPart> const&, bool, DB::NamesAndTypesList const*, DB::MergeTreeDataPartChecksums*) @ 0x143f52dc in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705751 [ 3936720 ] <Fatal> BaseDaemon: 10. DB::MergeTreeDataWriter::writeTempPartImpl(DB::BlockWithPartition&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::Context const>, long, bool) @ 0x143ee757 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705781 [ 3936720 ] <Fatal> BaseDaemon: 11. DB::MergeTreeSink::consume(DB::Chunk) @ 0x1463f88b in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705829 [ 3936720 ] <Fatal> BaseDaemon: 12. DB::SinkToStorage::onConsume(DB::Chunk) @ 0x14af0d62 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705859 [ 3936720 ] <Fatal> BaseDaemon: 13. ? @ 0x149e5feb in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705883 [ 3936720 ] <Fatal> BaseDaemon: 14. ? @ 0x149e5d39 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705913 [ 3936720 ] <Fatal> BaseDaemon: 15. DB::ExceptionKeepingTransform::work() @ 0x149e561f in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705958 [ 3936720 ] <Fatal> BaseDaemon: 16. DB::ExecutionThreadContext::executeTask() @ 0x1480744c in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.705988 [ 3936720 ] <Fatal> BaseDaemon: 17. DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x147fc4dc in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.706018 [ 3936720 ] <Fatal> BaseDaemon: 18. DB::PipelineExecutor::executeImpl(unsigned long) @ 0x147faf19 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.706044 [ 3936720 ] <Fatal> BaseDaemon: 19. DB::PipelineExecutor::execute(unsigned long) @ 0x147fac60 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.706077 [ 3936720 ] <Fatal> BaseDaemon: 20. ? @ 0x147f9cd2 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.706113 [ 3936720 ] <Fatal> BaseDaemon: 21. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xdf5d056 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.706170 [ 3936720 ] <Fatal> BaseDaemon: 22. ? @ 0xdf628a1 in /usr/bin/clickhouse\r\n2023.02.08 20:08:26.706206 [ 3936720 ] <Fatal> BaseDaemon: 23. ? @ 0x7f5494191609 in ?\r\n2023.02.08 20:08:26.706232 [ 3936720 ] <Fatal> BaseDaemon: 24. clone @ 0x7f54940b6163 in ?\r\n2023.02.08 20:08:26.852972 [ 3936720 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 0FE8DDB43EE348AD0A00CFBC4C423542)\r\n```\n",
  "hints_text": "",
  "created_at": "2023-02-24T19:21:26Z",
  "modified_files": [
    "src/Storages/IndicesDescription.cpp",
    "src/Storages/MergeTree/MergeTreeData.cpp",
    "src/Storages/MergeTree/MergeTreeIndices.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01705_normalize_create_alter_function_names.reference",
    "tests/queries/0_stateless/01705_normalize_create_alter_function_names.sql",
    "b/tests/queries/0_stateless/02670_constant_skip_index.sql"
  ]
}