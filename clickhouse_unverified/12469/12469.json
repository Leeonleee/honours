{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12469,
  "instance_id": "ClickHouse__ClickHouse-12469",
  "issue_numbers": [
    "12468"
  ],
  "base_commit": "3a3d815c7661a0ceb936da80bf98e4b923f8bbfb",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 5e10e6308b94..21650b0c6fa3 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -377,7 +377,7 @@ struct Settings : public SettingsCollection<Settings>\n     \\\n     M(SettingBool, deduplicate_blocks_in_dependent_materialized_views, false, \"Should deduplicate blocks for materialized views if the block is not a duplicate for the table. Use true to always deduplicate in dependent tables.\", 0) \\\n     M(SettingBool, use_compact_format_in_distributed_parts_names, false, \"Changes format of directories names for distributed table insert parts.\", 0) \\\n-    M(SettingUInt64, multiple_joins_rewriter_version, 1, \"1 or 2. Second rewriter version knows about table columns and keep not clashed names as is.\", 0) \\\n+    M(SettingUInt64, multiple_joins_rewriter_version, 2, \"1 or 2. Second rewriter version knows about table columns and keep not clashed names as is.\", 0) \\\n     M(SettingBool, validate_polygons, true, \"Throw exception if polygon is invalid in function pointInPolygon (e.g. self-tangent, self-intersecting). If the setting is false, the function will accept invalid polygons but may silently return wrong result.\", 0) \\\n     M(SettingUInt64, max_parser_depth, DBMS_DEFAULT_MAX_PARSER_DEPTH, \"Maximum parser depth (recursion depth of recursive descend parser).\", 0) \\\n     M(SettingSeconds, temporary_live_view_timeout, DEFAULT_TEMPORARY_LIVE_VIEW_TIMEOUT_SEC, \"Timeout after which temporary live view is deleted.\", 0) \\\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01392_column_resolve.reference b/tests/queries/0_stateless/01392_column_resolve.reference\nnew file mode 100644\nindex 000000000000..26d66bc08530\n--- /dev/null\n+++ b/tests/queries/0_stateless/01392_column_resolve.reference\n@@ -0,0 +1,3 @@\n+Conversion 1\tClick 1\t14\n+Conversion 1\tClick 2\t15\n+Conversion 1\tClick 3\t16\ndiff --git a/tests/queries/0_stateless/01392_column_resolve.sql b/tests/queries/0_stateless/01392_column_resolve.sql\nnew file mode 100644\nindex 000000000000..93d84359e1f8\n--- /dev/null\n+++ b/tests/queries/0_stateless/01392_column_resolve.sql\n@@ -0,0 +1,33 @@\n+DROP TABLE IF EXISTS tableConversion;\n+DROP TABLE IF EXISTS tableClick;\n+DROP TABLE IF EXISTS leftjoin;\n+\n+CREATE TABLE default.tableConversion (conversionId String, value Nullable(Double)) ENGINE = Log();\n+CREATE TABLE default.tableClick (clickId String, conversionId String, value Nullable(Double)) ENGINE = Log();\n+CREATE TABLE default.leftjoin (id String) ENGINE = Log();\n+\n+INSERT INTO default.tableConversion(conversionId, value) VALUES ('Conversion 1', 1);\n+INSERT INTO default.tableClick(clickId, conversionId, value) VALUES ('Click 1', 'Conversion 1', 14);\n+INSERT INTO default.tableClick(clickId, conversionId, value) VALUES ('Click 2', 'Conversion 1', 15);\n+INSERT INTO default.tableClick(clickId, conversionId, value) VALUES ('Click 3', 'Conversion 1', 16);\n+\n+SELECT\n+    conversion.conversionId AS myConversionId,\n+    click.clickId AS myClickId,\n+    click.myValue AS myValue\n+FROM (\n+    SELECT conversionId, value as myValue\n+    FROM default.tableConversion\n+) AS conversion\n+INNER JOIN (\n+    SELECT clickId, conversionId, value as myValue\n+    FROM default.tableClick\n+) AS click ON click.conversionId = conversion.conversionId\n+LEFT JOIN (\n+    SELECT * FROM default.leftjoin\n+) AS dummy ON (dummy.id = conversion.conversionId)\n+ORDER BY myValue;\n+\n+DROP TABLE IF EXISTS tableConversion;\n+DROP TABLE IF EXISTS tableClick;\n+DROP TABLE IF EXISTS leftjoin;\n",
  "problem_statement": "Wrong column resolution in query with multiple JOIN\n**Describe the unexpected behaviour**\r\n\r\nThe column resolution seems to resolve an alias to the wrong column when there is a left join in the query.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use: `20.3.12.112`\r\n* Which interface to use, if matters: HTTP Interface (but should not matter)\r\n\r\nPlease run the following queries:\r\n```sql\r\n-- Tables\r\nCREATE TABLE default.tableConversion (\r\n\tconversionId String,\r\n\tvalue Nullable(Double)\r\n) ENGINE = Log();\r\n\r\nCREATE TABLE default.tableClick (\r\n\tclickId String,\r\n\tconversionId String,\r\n\tvalue Nullable(Double)\r\n) ENGINE = Log();\r\n\r\nCREATE TABLE default.leftjoin (\r\n\tid String\r\n) ENGINE = Log();\r\n\r\n-- Values\r\nINSERT INTO default.tableConversion(conversionId, value) VALUES ('Conversion 1', 1);\r\nINSERT INTO default.tableClick(clickId, conversionId, value) VALUES ('Click 1', 'Conversion 1', 14);\r\nINSERT INTO default.tableClick(clickId, conversionId, value) VALUES ('Click 2', 'Conversion 1', 15);\r\nINSERT INTO default.tableClick(clickId, conversionId, value) VALUES ('Click 3', 'Conversion 1', 16);\r\n\r\n-- Query\r\nSELECT\r\n\tconversion.conversionId as myConversionId,\r\n\tclick.clickId as myClickId,\r\n\tclick.myValue as myValue\r\nFROM (\r\n\tSELECT conversionId, value as myValue\r\n\tFROM default.tableConversion\r\n) as conversion\r\nINNER JOIN (\r\n\tSELECT clickId, conversionId, value as myValue\r\n\tFROM default.tableClick\r\n) as click ON click.conversionId = conversion.conversionId\r\nLEFT JOIN (\r\n\tSELECT * FROM default.leftjoin\r\n) as dummy on (dummy.id = conversion.conversionId)\r\n```\r\n\r\n**Expected behavior**\r\nThe values in the `myValue` column should be 14, 15 and 16.\r\n\r\n**Actual behaviour**\r\nThe values in the `myValue` column is 1.\r\n\r\nThis means, that the colum `click.myValue as myValue` gets resolved as `conversion.myValue`. Please notice that the source table has been changed!\r\n\r\n**Additional context**\r\n\r\nThe behaviour is only visible when there is a `LEFT JOIN` in the Query. Referencing the `leftjoin` table in the `SELECT` statement does not change the result. **Leaving the `LEFT JOIN` out of the query makes it return the correct results.**\r\n\n",
  "hints_text": "`set multiple_joins_rewriter_version = 2` as workaround",
  "created_at": "2020-07-13T14:57:02Z",
  "modified_files": [
    "src/Core/Settings.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01392_column_resolve.reference",
    "b/tests/queries/0_stateless/01392_column_resolve.sql"
  ]
}