{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 54957,
  "instance_id": "ClickHouse__ClickHouse-54957",
  "issue_numbers": [
    "49507"
  ],
  "base_commit": "6bd0fbfc2577a015e67819b07810193a1e4013b8",
  "patch": "diff --git a/docs/en/operations/server-configuration-parameters/settings.md b/docs/en/operations/server-configuration-parameters/settings.md\nindex a2fba612f76f..a45609eca159 100644\n--- a/docs/en/operations/server-configuration-parameters/settings.md\n+++ b/docs/en/operations/server-configuration-parameters/settings.md\n@@ -2427,6 +2427,8 @@ This section contains the following parameters:\n   * hostname_levenshtein_distance - just like nearest_hostname, but it compares hostname in a levenshtein distance manner.\n   * first_or_random - selects the first ZooKeeper node, if it's not available then randomly selects one of remaining ZooKeeper nodes.\n   * round_robin - selects the first ZooKeeper node, if reconnection happens selects the next.\n+- `use_compression` \u2014 If set to true, enables compression in Keeper protocol.\n+\n \n **Example configuration**\n \ndiff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex d2985665db38..bf9cdd557d4c 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -89,6 +89,17 @@ add_headers_and_sources(clickhouse_common_io IO/Resource)\n add_headers_and_sources(clickhouse_common_io IO/S3)\n list (REMOVE_ITEM clickhouse_common_io_sources Common/malloc.cpp Common/new_delete.cpp)\n \n+\n+add_headers_and_sources(clickhouse_compression Compression)\n+add_headers_and_sources(clickhouse_compression Parsers)\n+add_headers_and_sources(clickhouse_compression Core)\n+#Included these specific files to avoid linking grpc\n+add_glob(clickhouse_compression_headers Server/ServerType.h)\n+add_glob(clickhouse_compression_sources Server/ServerType.cpp)\n+add_headers_and_sources(clickhouse_compression Common/SSH)\n+add_library(clickhouse_compression ${clickhouse_compression_headers} ${clickhouse_compression_sources})\n+\n+\n add_headers_and_sources(dbms Disks/IO)\n add_headers_and_sources(dbms Disks/ObjectStorages)\n if (TARGET ch_contrib::sqlite)\n@@ -270,6 +281,7 @@ target_include_directories (clickhouse_common_io PUBLIC \"${ClickHouse_SOURCE_DIR\n \n if (TARGET ch_contrib::llvm)\n     dbms_target_link_libraries (PUBLIC ch_contrib::llvm)\n+    target_link_libraries (clickhouse_compression PUBLIC ch_contrib::llvm)\n endif ()\n \n if (TARGET ch_contrib::gwp_asan)\n@@ -293,6 +305,18 @@ target_link_libraries (clickhouse_common_io\n             common\n             ch_contrib::double_conversion\n             ch_contrib::dragonbox_to_chars\n+            ch_contrib::libdivide\n+)\n+\n+\n+target_link_libraries (clickhouse_compression\n+        PUBLIC\n+            string_utils\n+            pcg_random\n+            clickhouse_parsers\n+        PRIVATE\n+            ch_contrib::lz4\n+            ch_contrib::roaring\n )\n \n # Use X86 AVX2/AVX512 instructions to accelerate filter operations\n@@ -340,6 +364,7 @@ if (TARGET ch_contrib::crc32-vpmsum)\n \n if (TARGET ch_contrib::ssh)\n  target_link_libraries(clickhouse_common_io PUBLIC ch_contrib::ssh)\n+ target_link_libraries(clickhouse_compression PUBLIC ch_contrib::ssh)\n endif()\n \n dbms_target_link_libraries(PUBLIC ch_contrib::abseil_swiss_tables)\n@@ -363,10 +388,12 @@ endif()\n \n if (TARGET ch_contrib::krb5)\n     dbms_target_link_libraries(PRIVATE ch_contrib::krb5)\n+    target_link_libraries (clickhouse_compression PRIVATE ch_contrib::krb5)\n endif()\n \n if (TARGET ch_contrib::nuraft)\n     dbms_target_link_libraries(PUBLIC ch_contrib::nuraft)\n+    target_link_libraries (clickhouse_compression PUBLIC ch_contrib::nuraft)\n endif()\n \n dbms_target_link_libraries (\n@@ -436,6 +463,7 @@ endif ()\n \n if (TARGET ch_contrib::ldap)\n     dbms_target_link_libraries (PRIVATE ch_contrib::ldap ch_contrib::lber)\n+    target_link_libraries (clickhouse_compression PRIVATE ch_contrib::ldap ch_contrib::lber)\n endif ()\n dbms_target_link_libraries (PUBLIC ch_contrib::sparsehash)\n \ndiff --git a/src/Common/ZooKeeper/CMakeLists.txt b/src/Common/ZooKeeper/CMakeLists.txt\nindex 3f7e87ff4a7e..aa06375bd6a3 100644\n--- a/src/Common/ZooKeeper/CMakeLists.txt\n+++ b/src/Common/ZooKeeper/CMakeLists.txt\n@@ -10,6 +10,7 @@ target_compile_definitions (clickhouse_common_zookeeper PRIVATE -DZOOKEEPER_LOG)\n target_link_libraries (clickhouse_common_zookeeper\n     PUBLIC\n         clickhouse_common_io\n+        clickhouse_compression\n         common\n     PRIVATE\n         string_utils\n@@ -20,6 +21,7 @@ add_library(clickhouse_common_zookeeper_no_log ${clickhouse_common_zookeeper_hea\n target_link_libraries (clickhouse_common_zookeeper_no_log\n     PUBLIC\n         clickhouse_common_io\n+        clickhouse_compression\n         common\n     PRIVATE\n         string_utils\ndiff --git a/src/Common/ZooKeeper/ZooKeeperArgs.cpp b/src/Common/ZooKeeper/ZooKeeperArgs.cpp\nindex 55ba2d02e550..539ecdd02043 100644\n--- a/src/Common/ZooKeeper/ZooKeeperArgs.cpp\n+++ b/src/Common/ZooKeeper/ZooKeeperArgs.cpp\n@@ -214,6 +214,10 @@ void ZooKeeperArgs::initFromKeeperSection(const Poco::Util::AbstractConfiguratio\n                 .max_sec = config.getUInt(config_name + \".\" + key + \".max\"),\n             };\n         }\n+        else if (key == \"use_compression\")\n+        {\n+            use_compression = config.getBool(config_name + \".\" + key);\n+        }\n         else\n             throw KeeperException(Coordination::Error::ZBADARGUMENTS, \"Unknown key {} in config file\", key);\n     }\ndiff --git a/src/Common/ZooKeeper/ZooKeeperArgs.h b/src/Common/ZooKeeper/ZooKeeperArgs.h\nindex 9c48de02f619..ff44a1b191b5 100644\n--- a/src/Common/ZooKeeper/ZooKeeperArgs.h\n+++ b/src/Common/ZooKeeper/ZooKeeperArgs.h\n@@ -44,6 +44,7 @@ struct ZooKeeperArgs\n     double recv_sleep_probability = 0.0;\n     UInt64 send_sleep_ms = 0;\n     UInt64 recv_sleep_ms = 0;\n+    bool use_compression = false;\n \n     SessionLifetimeConfiguration fallback_session_lifetime = {};\n     DB::GetPriorityForLoadBalancing get_priority_load_balancing;\ndiff --git a/src/Common/ZooKeeper/ZooKeeperCommon.cpp b/src/Common/ZooKeeper/ZooKeeperCommon.cpp\nindex e9803d165e19..592d142e9250 100644\n--- a/src/Common/ZooKeeper/ZooKeeperCommon.cpp\n+++ b/src/Common/ZooKeeper/ZooKeeperCommon.cpp\n@@ -27,7 +27,6 @@ void ZooKeeperResponse::write(WriteBuffer & out) const\n     if (error == Error::ZOK)\n         writeImpl(buf);\n     Coordination::write(buf.str(), out);\n-    out.next();\n }\n \n std::string ZooKeeperRequest::toString() const\n@@ -49,7 +48,6 @@ void ZooKeeperRequest::write(WriteBuffer & out) const\n     Coordination::write(getOpNum(), buf);\n     writeImpl(buf);\n     Coordination::write(buf.str(), out);\n-    out.next();\n }\n \n void ZooKeeperSyncRequest::writeImpl(WriteBuffer & out) const\ndiff --git a/src/Common/ZooKeeper/ZooKeeperConstants.h b/src/Common/ZooKeeper/ZooKeeperConstants.h\nindex a1d1be86a34c..1a868963b572 100644\n--- a/src/Common/ZooKeeper/ZooKeeperConstants.h\n+++ b/src/Common/ZooKeeper/ZooKeeperConstants.h\n@@ -46,6 +46,7 @@ enum class OpNum : int32_t\n OpNum getOpNum(int32_t raw_op_num);\n \n static constexpr int32_t ZOOKEEPER_PROTOCOL_VERSION = 0;\n+static constexpr int32_t ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION = 10;\n static constexpr int32_t KEEPER_PROTOCOL_VERSION_CONNECTION_REJECT = 42;\n static constexpr int32_t CLIENT_HANDSHAKE_LENGTH = 44;\n static constexpr int32_t CLIENT_HANDSHAKE_LENGTH_WITH_READONLY = 45;\ndiff --git a/src/Common/ZooKeeper/ZooKeeperImpl.cpp b/src/Common/ZooKeeper/ZooKeeperImpl.cpp\nindex 709dabf15063..5e84a4310979 100644\n--- a/src/Common/ZooKeeper/ZooKeeperImpl.cpp\n+++ b/src/Common/ZooKeeper/ZooKeeperImpl.cpp\n@@ -16,6 +16,9 @@\n #include <Common/ZooKeeper/ZooKeeperIO.h>\n #include <Common/logger_useful.h>\n #include <Common/setThreadName.h>\n+#include <Compression/CompressedReadBuffer.h>\n+#include <Compression/CompressedWriteBuffer.h>\n+#include <Compression/CompressionFactory.h>\n \n #include \"Coordination/KeeperConstants.h\"\n #include \"config.h\"\n@@ -274,13 +277,34 @@ using namespace DB;\n template <typename T>\n void ZooKeeper::write(const T & x)\n {\n-    Coordination::write(x, *out);\n+    Coordination::write(x, getWriteBuffer());\n }\n \n template <typename T>\n void ZooKeeper::read(T & x)\n {\n-    Coordination::read(x, *in);\n+    Coordination::read(x, getReadBuffer());\n+}\n+\n+WriteBuffer & ZooKeeper::getWriteBuffer()\n+{\n+    if (compressed_out)\n+        return *compressed_out;\n+    return *out;\n+}\n+\n+void ZooKeeper::flushWriteBuffer()\n+{\n+    if (compressed_out)\n+         compressed_out->next();\n+    out->next();\n+}\n+\n+ReadBuffer & ZooKeeper::getReadBuffer()\n+{\n+    if (compressed_in)\n+        return *compressed_in;\n+    return *in;\n }\n \n static void removeRootPath(String & path, const String & chroot)\n@@ -345,7 +369,23 @@ ZooKeeper::ZooKeeper(\n     if (args.enable_fault_injections_during_startup)\n         setupFaultDistributions();\n \n-    connect(nodes, args.connection_timeout_ms * 1000);\n+    try\n+    {\n+        use_compression = args.use_compression;\n+        connect(nodes, args.connection_timeout_ms * 1000);\n+    }\n+    catch (...)\n+    {\n+        /// If we get exception & compression is enabled, then its possible that keeper does not support compression,\n+        /// try without compression\n+        if (use_compression)\n+        {\n+            use_compression = false;\n+            connect(nodes, args.connection_timeout_ms * 1000);\n+        }\n+        else\n+            throw;\n+    }\n \n     if (!args.auth_scheme.empty())\n         sendAuth(args.auth_scheme, args.identity);\n@@ -424,6 +464,8 @@ void ZooKeeper::connect(\n \n                 in.emplace(socket);\n                 out.emplace(socket);\n+                compressed_in.reset();\n+                compressed_out.reset();\n \n                 try\n                 {\n@@ -444,7 +486,14 @@ void ZooKeeper::connect(\n                     e.addMessage(\"while receiving handshake from ZooKeeper\");\n                     throw;\n                 }\n+\n                 connected = true;\n+                if (use_compression)\n+                {\n+                    compressed_in.emplace(*in);\n+                    compressed_out.emplace(*out, CompressionCodecFactory::instance().get(\"ZSTD\", {}));\n+                }\n+\n                 original_index = static_cast<Int8>(node.original_index);\n \n                 if (i != 0)\n@@ -511,16 +560,17 @@ void ZooKeeper::sendHandshake()\n     std::array<char, passwd_len> passwd {};\n \n     write(handshake_length);\n-    write(ZOOKEEPER_PROTOCOL_VERSION);\n+    if (use_compression)\n+        write(ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION);\n+    else\n+        write(ZOOKEEPER_PROTOCOL_VERSION);\n     write(last_zxid_seen);\n     write(timeout);\n     write(previous_session_id);\n     write(passwd);\n-\n-    out->next();\n+    flushWriteBuffer();\n }\n \n-\n void ZooKeeper::receiveHandshake()\n {\n     int32_t handshake_length;\n@@ -533,18 +583,22 @@ void ZooKeeper::receiveHandshake()\n         throw Exception(Error::ZMARSHALLINGERROR, \"Unexpected handshake length received: {}\", handshake_length);\n \n     read(protocol_version_read);\n-    if (protocol_version_read != ZOOKEEPER_PROTOCOL_VERSION)\n+\n+    /// Special way to tell a client that server is not ready to serve it.\n+    /// It's better for faster failover than just connection drop.\n+    /// Implemented in clickhouse-keeper.\n+    if (protocol_version_read == KEEPER_PROTOCOL_VERSION_CONNECTION_REJECT)\n+        throw Exception::fromMessage(Error::ZCONNECTIONLOSS,\n+                                     \"Keeper server rejected the connection during the handshake. \"\n+                                     \"Possibly it's overloaded, doesn't see leader or stale\");\n+\n+    if (use_compression)\n     {\n-        /// Special way to tell a client that server is not ready to serve it.\n-        /// It's better for faster failover than just connection drop.\n-        /// Implemented in clickhouse-keeper.\n-        if (protocol_version_read == KEEPER_PROTOCOL_VERSION_CONNECTION_REJECT)\n-            throw Exception::fromMessage(Error::ZCONNECTIONLOSS,\n-                            \"Keeper server rejected the connection during the handshake. \"\n-                            \"Possibly it's overloaded, doesn't see leader or stale\");\n-        else\n-            throw Exception(Error::ZMARSHALLINGERROR, \"Unexpected protocol version: {}\", protocol_version_read);\n+        if (protocol_version_read != ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION)\n+            throw Exception(Error::ZMARSHALLINGERROR,\"Unexpected protocol version with compression: {}\", protocol_version_read);\n     }\n+    else if (protocol_version_read != ZOOKEEPER_PROTOCOL_VERSION)\n+        throw Exception(Error::ZMARSHALLINGERROR, \"Unexpected protocol version: {}\", protocol_version_read);\n \n     read(timeout);\n     if (timeout != args.session_timeout_ms)\n@@ -562,7 +616,8 @@ void ZooKeeper::sendAuth(const String & scheme, const String & data)\n     request.scheme = scheme;\n     request.data = data;\n     request.xid = AUTH_XID;\n-    request.write(*out);\n+    request.write(getWriteBuffer());\n+    flushWriteBuffer();\n \n     int32_t length;\n     XID read_xid;\n@@ -578,10 +633,14 @@ void ZooKeeper::sendAuth(const String & scheme, const String & data)\n     if (read_xid != AUTH_XID)\n         throw Exception(Error::ZMARSHALLINGERROR, \"Unexpected event received in reply to auth request: {}\", read_xid);\n \n-    int32_t actual_length = static_cast<int32_t>(in->count() - count_before_event);\n-    if (length != actual_length)\n+    if (!use_compression)\n+    {\n+        int32_t actual_length = static_cast<int32_t>(in->count() - count_before_event);\n+        if (length != actual_length)\n         throw Exception(Error::ZMARSHALLINGERROR, \"Response length doesn't match. Expected: {}, actual: {}\", length, actual_length);\n \n+    }\n+\n     if (err != Error::ZOK)\n         throw Exception(Error::ZMARSHALLINGERROR, \"Error received in reply to auth request. Code: {}. Message: {}\",\n                         static_cast<int32_t>(err), err);\n@@ -637,7 +696,8 @@ void ZooKeeper::sendThread()\n                     info.request->addRootPath(args.chroot);\n \n                     info.request->probably_sent = true;\n-                    info.request->write(*out);\n+                    info.request->write(getWriteBuffer());\n+                    flushWriteBuffer();\n \n                     logOperationIfNeeded(info.request);\n \n@@ -653,7 +713,8 @@ void ZooKeeper::sendThread()\n \n                 ZooKeeperHeartbeatRequest request;\n                 request.xid = PING_XID;\n-                request.write(*out);\n+                request.write(getWriteBuffer());\n+                flushWriteBuffer();\n             }\n \n             ProfileEvents::increment(ProfileEvents::ZooKeeperBytesSent, out->count() - prev_bytes_sent);\n@@ -825,7 +886,7 @@ void ZooKeeper::receiveEvent()\n         }\n         else\n         {\n-            response->readImpl(*in);\n+            response->readImpl(getReadBuffer());\n             response->removeRootPath(args.chroot);\n         }\n         /// Instead of setting the watch in sendEvent, set it in receiveEvent because need to check the response.\n@@ -858,9 +919,14 @@ void ZooKeeper::receiveEvent()\n             }\n         }\n \n-        int32_t actual_length = static_cast<int32_t>(in->count() - count_before_event);\n-        if (length != actual_length)\n-            throw Exception(Error::ZMARSHALLINGERROR, \"Response length doesn't match. Expected: {}, actual: {}\", length, actual_length);\n+        if (!use_compression)\n+        {\n+            int32_t actual_length = static_cast<int32_t>(in->count() - count_before_event);\n+\n+            if (length != actual_length)\n+                throw Exception(Error::ZMARSHALLINGERROR, \"Response length doesn't match. Expected: {}, actual: {}\",\n+                                length, actual_length);\n+        }\n \n         logOperationIfNeeded(request_info.request, response, /* finalize= */ false, elapsed_ms);\n     }\ndiff --git a/src/Common/ZooKeeper/ZooKeeperImpl.h b/src/Common/ZooKeeper/ZooKeeperImpl.h\nindex 8b3633982008..13e1dc9e3cd8 100644\n--- a/src/Common/ZooKeeper/ZooKeeperImpl.h\n+++ b/src/Common/ZooKeeper/ZooKeeperImpl.h\n@@ -15,6 +15,8 @@\n #include <IO/WriteBuffer.h>\n #include <IO/ReadBufferFromPocoSocket.h>\n #include <IO/WriteBufferFromPocoSocket.h>\n+#include <Compression/CompressedReadBuffer.h>\n+#include <Compression/CompressedWriteBuffer.h>\n \n #include <Poco/Net/StreamSocket.h>\n #include <Poco/Net/SocketAddress.h>\n@@ -239,8 +241,13 @@ class ZooKeeper final : public IKeeper\n     Poco::Net::StreamSocket socket;\n     /// To avoid excessive getpeername(2) calls.\n     Poco::Net::SocketAddress socket_address;\n+\n     std::optional<ReadBufferFromPocoSocket> in;\n     std::optional<WriteBufferFromPocoSocket> out;\n+    std::optional<CompressedReadBuffer> compressed_in;\n+    std::optional<CompressedWriteBuffer> compressed_out;\n+\n+    bool use_compression = false;\n \n     int64_t session_id = 0;\n \n@@ -328,6 +335,10 @@ class ZooKeeper final : public IKeeper\n     template <typename T>\n     void read(T &);\n \n+    WriteBuffer & getWriteBuffer();\n+    void flushWriteBuffer();\n+    ReadBuffer & getReadBuffer();\n+\n     void logOperationIfNeeded(const ZooKeeperRequestPtr & request, const ZooKeeperResponsePtr & response = nullptr, bool finalize = false, UInt64 elapsed_ms = 0);\n \n     void initFeatureFlags();\ndiff --git a/src/Common/ZooKeeper/examples/CMakeLists.txt b/src/Common/ZooKeeper/examples/CMakeLists.txt\nindex e8932fd3088d..a99fbe55dd89 100644\n--- a/src/Common/ZooKeeper/examples/CMakeLists.txt\n+++ b/src/Common/ZooKeeper/examples/CMakeLists.txt\n@@ -2,7 +2,7 @@ clickhouse_add_executable(zkutil_test_commands zkutil_test_commands.cpp)\n target_link_libraries(zkutil_test_commands PRIVATE clickhouse_common_zookeeper_no_log)\n \n clickhouse_add_executable(zkutil_test_commands_new_lib zkutil_test_commands_new_lib.cpp)\n-target_link_libraries(zkutil_test_commands_new_lib PRIVATE clickhouse_common_zookeeper_no_log string_utils)\n+target_link_libraries(zkutil_test_commands_new_lib PRIVATE clickhouse_common_zookeeper_no_log clickhouse_compression string_utils)\n \n clickhouse_add_executable(zkutil_test_async zkutil_test_async.cpp)\n target_link_libraries(zkutil_test_async PRIVATE clickhouse_common_zookeeper_no_log)\ndiff --git a/src/Server/KeeperTCPHandler.cpp b/src/Server/KeeperTCPHandler.cpp\nindex 742300f9b2eb..30233134fa8c 100644\n--- a/src/Server/KeeperTCPHandler.cpp\n+++ b/src/Server/KeeperTCPHandler.cpp\n@@ -20,6 +20,7 @@\n #include <queue>\n #include <mutex>\n #include <Coordination/FourLetterCommand.h>\n+#include <IO/CompressionMethod.h>\n #include <base/hex.h>\n \n \n@@ -110,13 +111,13 @@ struct SocketInterruptablePollWrapper\n         return pipe.fds_rw[1];\n     }\n \n-    PollResult poll(Poco::Timespan remaining_time, const std::shared_ptr<ReadBufferFromPocoSocket> & in)\n+    PollResult poll(Poco::Timespan remaining_time, const ReadBufferFromPocoSocket & in)\n     {\n \n         bool socket_ready = false;\n         bool fd_ready = false;\n \n-        if (in->available() != 0)\n+        if (in.available() != 0)\n             socket_ready = true;\n \n         if (response_in.available() != 0)\n@@ -242,12 +243,15 @@ KeeperTCPHandler::KeeperTCPHandler(\n     KeeperTCPHandler::registerConnection(this);\n }\n \n-void KeeperTCPHandler::sendHandshake(bool has_leader)\n+void KeeperTCPHandler::sendHandshake(bool has_leader, bool & use_compression)\n {\n     Coordination::write(Coordination::SERVER_HANDSHAKE_LENGTH, *out);\n     if (has_leader)\n     {\n-        Coordination::write(Coordination::ZOOKEEPER_PROTOCOL_VERSION, *out);\n+        if (use_compression)\n+            Coordination::write(Coordination::ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION, *out);\n+        else\n+            Coordination::write(Coordination::ZOOKEEPER_PROTOCOL_VERSION, *out);\n     }\n     else\n     {\n@@ -269,7 +273,7 @@ void KeeperTCPHandler::run()\n     runImpl();\n }\n \n-Poco::Timespan KeeperTCPHandler::receiveHandshake(int32_t handshake_length)\n+Poco::Timespan KeeperTCPHandler::receiveHandshake(int32_t handshake_length, bool & use_compression)\n {\n     int32_t protocol_version;\n     int64_t last_zxid_seen;\n@@ -282,9 +286,11 @@ Poco::Timespan KeeperTCPHandler::receiveHandshake(int32_t handshake_length)\n \n     Coordination::read(protocol_version, *in);\n \n-    if (protocol_version != Coordination::ZOOKEEPER_PROTOCOL_VERSION)\n+    if (protocol_version != Coordination::ZOOKEEPER_PROTOCOL_VERSION && protocol_version != Coordination::ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION)\n         throw Exception(ErrorCodes::UNEXPECTED_PACKET_FROM_CLIENT, \"Unexpected protocol version: {}\", toString(protocol_version));\n \n+    use_compression = (protocol_version == Coordination::ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION);\n+\n     Coordination::read(last_zxid_seen, *in);\n     Coordination::read(timeout_ms, *in);\n \n@@ -309,8 +315,12 @@ void KeeperTCPHandler::runImpl()\n     socket().setSendTimeout(send_timeout);\n     socket().setNoDelay(true);\n \n-    in = std::make_shared<ReadBufferFromPocoSocket>(socket());\n-    out = std::make_shared<WriteBufferFromPocoSocket>(socket());\n+    in.emplace(socket());\n+    out.emplace(socket());\n+    compressed_in.reset();\n+    compressed_out.reset();\n+\n+    bool use_compression = false;\n \n     if (in->eof())\n     {\n@@ -343,7 +353,7 @@ void KeeperTCPHandler::runImpl()\n     try\n     {\n         int32_t handshake_length = header;\n-        auto client_timeout = receiveHandshake(handshake_length);\n+        auto client_timeout = receiveHandshake(handshake_length, use_compression);\n \n         if (client_timeout.totalMilliseconds() == 0)\n             client_timeout = Poco::Timespan(Coordination::DEFAULT_SESSION_TIMEOUT_MS * Poco::Timespan::MILLISECONDS);\n@@ -367,20 +377,26 @@ void KeeperTCPHandler::runImpl()\n         catch (const Exception & e)\n         {\n             LOG_WARNING(log, \"Cannot receive session id {}\", e.displayText());\n-            sendHandshake(false);\n+            sendHandshake(/* has_leader */ false, use_compression);\n             return;\n \n         }\n \n-        sendHandshake(true);\n+        sendHandshake(/* has_leader */ true, use_compression);\n     }\n     else\n     {\n         LOG_WARNING(log, \"Ignoring user request, because the server is not active yet\");\n-        sendHandshake(false);\n+        sendHandshake(/* has_leader */ false, use_compression);\n         return;\n     }\n \n+    if (use_compression)\n+    {\n+        compressed_in.emplace(*in);\n+        compressed_out.emplace(*out, CompressionCodecFactory::instance().get(\"ZSTD\",{}));\n+    }\n+\n     auto response_fd = poll_wrapper->getResponseFD();\n     auto response_callback = [responses_ = this->responses, response_fd](const Coordination::ZooKeeperResponsePtr & response)\n     {\n@@ -415,7 +431,7 @@ void KeeperTCPHandler::runImpl()\n         {\n             using namespace std::chrono_literals;\n \n-            PollResult result = poll_wrapper->poll(session_timeout, in);\n+            PollResult result = poll_wrapper->poll(session_timeout, *in);\n             log_long_operation(\"Polling socket\");\n             if (result.has_requests && !close_received)\n             {\n@@ -467,7 +483,8 @@ void KeeperTCPHandler::runImpl()\n                 updateStats(response);\n                 packageSent();\n \n-                response->write(*out);\n+                response->write(getWriteBuffer());\n+                flushWriteBuffer();\n                 log_long_operation(\"Sending response\");\n                 if (response->error == Coordination::Error::ZSESSIONEXPIRED)\n                 {\n@@ -525,7 +542,7 @@ bool KeeperTCPHandler::tryExecuteFourLetterWordCmd(int32_t command)\n         try\n         {\n             String res = command_ptr->run();\n-            out->write(res.data(), res.size());\n+            out->write(res.data(),res.size());\n             out->next();\n         }\n         catch (...)\n@@ -537,19 +554,41 @@ bool KeeperTCPHandler::tryExecuteFourLetterWordCmd(int32_t command)\n     }\n }\n \n+WriteBuffer & KeeperTCPHandler::getWriteBuffer()\n+{\n+    if (compressed_out)\n+        return *compressed_out;\n+    return *out;\n+}\n+\n+void KeeperTCPHandler::flushWriteBuffer()\n+{\n+    if (compressed_out)\n+        compressed_out->next();\n+    out->next();\n+}\n+\n+ReadBuffer & KeeperTCPHandler::getReadBuffer()\n+{\n+    if (compressed_in)\n+        return *compressed_in;\n+    return *in;\n+}\n+\n std::pair<Coordination::OpNum, Coordination::XID> KeeperTCPHandler::receiveRequest()\n {\n+    auto & read_buffer = getReadBuffer();\n     int32_t length;\n-    Coordination::read(length, *in);\n+    Coordination::read(length, read_buffer);\n     int32_t xid;\n-    Coordination::read(xid, *in);\n+    Coordination::read(xid, read_buffer);\n \n     Coordination::OpNum opnum;\n-    Coordination::read(opnum, *in);\n+    Coordination::read(opnum, read_buffer);\n \n     Coordination::ZooKeeperRequestPtr request = Coordination::ZooKeeperRequestFactory::instance().get(opnum);\n     request->xid = xid;\n-    request->readImpl(*in);\n+    request->readImpl(read_buffer);\n \n     if (!keeper_dispatcher->putRequest(request, session_id))\n         throw Exception(ErrorCodes::TIMEOUT_EXCEEDED, \"Session {} already disconnected\", session_id);\ndiff --git a/src/Server/KeeperTCPHandler.h b/src/Server/KeeperTCPHandler.h\nindex 588cdf6305e7..adb1baa084f9 100644\n--- a/src/Server/KeeperTCPHandler.h\n+++ b/src/Server/KeeperTCPHandler.h\n@@ -17,6 +17,8 @@\n #include <unordered_map>\n #include <Coordination/KeeperConnectionStats.h>\n #include <Poco/Timestamp.h>\n+#include <Compression/CompressedReadBuffer.h>\n+#include <Compression/CompressedWriteBuffer.h>\n \n namespace DB\n {\n@@ -78,15 +80,21 @@ class KeeperTCPHandler : public Poco::Net::TCPServerConnection\n     Coordination::XID close_xid = Coordination::CLOSE_XID;\n \n     /// Streams for reading/writing from/to client connection socket.\n-    std::shared_ptr<ReadBufferFromPocoSocket> in;\n-    std::shared_ptr<WriteBufferFromPocoSocket> out;\n+    std::optional<ReadBufferFromPocoSocket> in;\n+    std::optional<WriteBufferFromPocoSocket> out;\n+    std::optional<CompressedReadBuffer> compressed_in;\n+    std::optional<CompressedWriteBuffer> compressed_out;\n \n     std::atomic<bool> connected{false};\n \n     void runImpl();\n \n-    void sendHandshake(bool has_leader);\n-    Poco::Timespan receiveHandshake(int32_t handshake_length);\n+    WriteBuffer & getWriteBuffer();\n+    void flushWriteBuffer();\n+    ReadBuffer & getReadBuffer();\n+\n+    void sendHandshake(bool has_leader, bool & use_compression);\n+    Poco::Timespan receiveHandshake(int32_t handshake_length, bool & use_compression);\n \n     static bool isHandShake(int32_t handshake_length);\n     bool tryExecuteFourLetterWordCmd(int32_t command);\ndiff --git a/utils/keeper-bench/Runner.cpp b/utils/keeper-bench/Runner.cpp\nindex bc9945020174..13855c6d94e9 100644\n--- a/utils/keeper-bench/Runner.cpp\n+++ b/utils/keeper-bench/Runner.cpp\n@@ -127,6 +127,9 @@ void Runner::parseHostsFromConfig(const Poco::Util::AbstractConfiguration & conf\n \n         if (config.has(key + \".connection_timeout_ms\"))\n             connection_info.connection_timeout_ms = config.getInt(key + \".connection_timeout_ms\");\n+\n+        if (config.has(key + \".use_compression\"))\n+            connection_info.use_compression = config.getBool(key + \".use_compression\");\n     };\n \n     fill_connection_details(\"connections\", default_connection_info);\n@@ -430,8 +433,9 @@ std::shared_ptr<Coordination::ZooKeeper> Runner::getConnection(const ConnectionI\n     nodes.push_back(node);\n     zkutil::ZooKeeperArgs args;\n     args.session_timeout_ms = connection_info.session_timeout_ms;\n-    args.connection_timeout_ms = connection_info.operation_timeout_ms;\n-    args.operation_timeout_ms = connection_info.connection_timeout_ms;\n+    args.connection_timeout_ms = connection_info.connection_timeout_ms;\n+    args.operation_timeout_ms = connection_info.operation_timeout_ms;\n+    args.use_compression = connection_info.use_compression;\n     return std::make_shared<Coordination::ZooKeeper>(nodes, args, nullptr);\n }\n \ndiff --git a/utils/keeper-bench/Runner.h b/utils/keeper-bench/Runner.h\nindex 14d9b13938b1..4f4a75e6ecf1 100644\n--- a/utils/keeper-bench/Runner.h\n+++ b/utils/keeper-bench/Runner.h\n@@ -79,6 +79,7 @@ class Runner\n         int32_t session_timeout_ms = Coordination::DEFAULT_SESSION_TIMEOUT_MS;\n         int32_t connection_timeout_ms = Coordination::DEFAULT_CONNECTION_TIMEOUT_MS;\n         int32_t operation_timeout_ms = Coordination::DEFAULT_OPERATION_TIMEOUT_MS;\n+        bool use_compression = false;\n \n         size_t sessions = 1;\n     };\n",
  "test_patch": "diff --git a/docker/test/stateless/stress_tests.lib b/docker/test/stateless/stress_tests.lib\nindex ea79089175e8..2309e3073241 100644\n--- a/docker/test/stateless/stress_tests.lib\n+++ b/docker/test/stateless/stress_tests.lib\n@@ -53,31 +53,28 @@ function configure()\n       > /etc/clickhouse-server/config.d/keeper_port.xml.tmp\n     sudo mv /etc/clickhouse-server/config.d/keeper_port.xml.tmp /etc/clickhouse-server/config.d/keeper_port.xml\n \n-    function randomize_config_boolean_value {\n+    function randomize_keeper_config_boolean_value {\n         value=$(($RANDOM % 2))\n-        sudo cat /etc/clickhouse-server/config.d/keeper_port.xml \\\n+        sudo cat /etc/clickhouse-server/config.d/$2.xml \\\n         | sed \"s|<$1>[01]</$1>|<$1>$value</$1>|\" \\\n-        > /etc/clickhouse-server/config.d/keeper_port.xml.tmp\n-        sudo mv /etc/clickhouse-server/config.d/keeper_port.xml.tmp /etc/clickhouse-server/config.d/keeper_port.xml\n+        > /etc/clickhouse-server/config.d/$2.xml.tmp\n+        sudo mv /etc/clickhouse-server/config.d/$2.xml.tmp /etc/clickhouse-server/config.d/$2.xml\n     }\n \n     if [[ -n \"$RANDOMIZE_KEEPER_FEATURE_FLAGS\" ]] && [[ \"$RANDOMIZE_KEEPER_FEATURE_FLAGS\" -eq 1 ]]; then\n         # Randomize all Keeper feature flags\n-        randomize_config_boolean_value filtered_list\n-        randomize_config_boolean_value multi_read\n-        randomize_config_boolean_value check_not_exists\n-        randomize_config_boolean_value create_if_not_exists\n+        randomize_config_boolean_value filtered_list keeper_port\n+        randomize_config_boolean_value multi_read keeper_port\n+        randomize_config_boolean_value check_not_exists keeper_port\n+        randomize_config_boolean_value create_if_not_exists keeper_port\n     fi\n \n     sudo chown clickhouse /etc/clickhouse-server/config.d/keeper_port.xml\n     sudo chgrp clickhouse /etc/clickhouse-server/config.d/keeper_port.xml\n \n-    #Randomize merge tree setting allow_experimental_block_number_column\n-    value=$(($RANDOM % 2))\n-    sudo cat /etc/clickhouse-server/config.d/merge_tree_settings.xml \\\n-    | sed \"s|<allow_experimental_block_number_column>[01]</allow_experimental_block_number_column>|<allow_experimental_block_number_column>$value</allow_experimental_block_number_column>|\" \\\n-    > /etc/clickhouse-server/config.d/merge_tree_settings.xml.tmp\n-    sudo mv /etc/clickhouse-server/config.d/merge_tree_settings.xml.tmp /etc/clickhouse-server/config.d/merge_tree_settings.xml\n+    randomize_config_boolean_value use_compression zookeeper\n+\n+    randomize_config_boolean_value allow_experimental_block_number_column merge_tree_settings\n \n     # for clickhouse-server (via service)\n     echo \"ASAN_OPTIONS='malloc_context_size=10 verbosity=1 allocator_release_to_os_interval_ms=10000'\" >> /etc/environment\ndiff --git a/tests/config/config.d/zookeeper.xml b/tests/config/config.d/zookeeper.xml\nindex 07142b1a55e8..a54149e66174 100644\n--- a/tests/config/config.d/zookeeper.xml\n+++ b/tests/config/config.d/zookeeper.xml\n@@ -2,6 +2,7 @@\n     <zookeeper>\n         <!--<zookeeper_load_balancing>random / in_order / nearest_hostname / hostname_levenshtein_distance / first_or_random / round_robin</zookeeper_load_balancing>-->\n         <zookeeper_load_balancing>random</zookeeper_load_balancing>\n+        <use_compression>true</use_compression>\n         <node index=\"1\">\n             <host>127.0.0.1</host>\n             <port>9181</port>\ndiff --git a/tests/integration/test_keeper_compression/__init__.py b/tests/integration/test_keeper_compression/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_keeper_compression/configs/keeper.xml b/tests/integration/test_keeper_compression/configs/keeper.xml\nnew file mode 100644\nindex 000000000000..322938c3dc8b\n--- /dev/null\n+++ b/tests/integration/test_keeper_compression/configs/keeper.xml\n@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<clickhouse>\n+    <keeper_server>\n+        <tcp_port>9181</tcp_port>\n+        <server_id>1</server_id>\n+        <log_storage_path>/var/lib/clickhouse/coordination/log</log_storage_path>\n+        <snapshot_storage_path>/var/lib/clickhouse/coordination/snapshots</snapshot_storage_path>\n+        <coordination_settings>\n+            <operation_timeout_ms>5000</operation_timeout_ms>\n+            <raft_logs_level>trace</raft_logs_level>\n+            <session_timeout_ms>10000</session_timeout_ms>\n+        </coordination_settings>\n+        <raft_configuration>\n+            <server>\n+                <can_become_leader>true</can_become_leader>\n+                <hostname>node1</hostname>\n+                <id>1</id>\n+                <port>2888</port>\n+                <priority>1</priority>\n+            </server>\n+        </raft_configuration>\n+    </keeper_server>\n+\n+    <user_directories>\n+        <replicated>\n+            <zookeeper_path>/clickhouse/access</zookeeper_path>\n+        </replicated>\n+    </user_directories>\n+</clickhouse>\ndiff --git a/tests/integration/test_keeper_compression/configs/keeper_with_compression.xml b/tests/integration/test_keeper_compression/configs/keeper_with_compression.xml\nnew file mode 100644\nindex 000000000000..566eb93af366\n--- /dev/null\n+++ b/tests/integration/test_keeper_compression/configs/keeper_with_compression.xml\n@@ -0,0 +1,9 @@\n+<clickhouse>\n+    <zookeeper>\n+        <use_compression>true</use_compression>\n+        <node index=\"1\">\n+            <host>node1</host>\n+            <port>9181</port>\n+        </node>\n+    </zookeeper>\n+</clickhouse>\ndiff --git a/tests/integration/test_keeper_compression/configs/keeper_without_compression.xml b/tests/integration/test_keeper_compression/configs/keeper_without_compression.xml\nnew file mode 100644\nindex 000000000000..e328dd43b83e\n--- /dev/null\n+++ b/tests/integration/test_keeper_compression/configs/keeper_without_compression.xml\n@@ -0,0 +1,9 @@\n+<clickhouse>\n+    <zookeeper>\n+        <use_compression>false</use_compression>\n+        <node index=\"1\">\n+            <host>node1</host>\n+            <port>9181</port>\n+        </node>\n+    </zookeeper>\n+</clickhouse>\ndiff --git a/tests/integration/test_keeper_compression/test_with_compression.py b/tests/integration/test_keeper_compression/test_with_compression.py\nnew file mode 100644\nindex 000000000000..1c0697ebcbba\n--- /dev/null\n+++ b/tests/integration/test_keeper_compression/test_with_compression.py\n@@ -0,0 +1,28 @@\n+#!/usr/bin/env python3\n+\n+import pytest\n+\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+\n+node1 = cluster.add_instance(\n+    \"node1\",\n+    main_configs=[\"configs/keeper.xml\", \"configs/keeper_with_compression.xml\"],\n+    stay_alive=True,\n+)\n+\n+\n+# test that server is able to start\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_select(started_cluster):\n+    assert node1.query(\"SELECT 1\") == \"1\\n\"\ndiff --git a/tests/integration/test_keeper_compression/test_without_compression.py b/tests/integration/test_keeper_compression/test_without_compression.py\nnew file mode 100644\nindex 000000000000..eb7936cfd42f\n--- /dev/null\n+++ b/tests/integration/test_keeper_compression/test_without_compression.py\n@@ -0,0 +1,28 @@\n+#!/usr/bin/env python3\n+\n+import pytest\n+\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+\n+node1 = cluster.add_instance(\n+    \"node1\",\n+    main_configs=[\"configs/keeper.xml\", \"configs/keeper_without_compression.xml\"],\n+    stay_alive=True,\n+)\n+\n+\n+# test that server is able to start\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_select(started_cluster):\n+    assert node1.query(\"SELECT 1\") == \"1\\n\"\n",
  "problem_statement": "Support compression for Keeper protocol\n[Zoo]Keeper Client and [Zoo]Keeper server communicate using custom TCP protocol: https://github.com/ClickHouse/ClickHouse/blob/27f9384717ba12f99a5fca74021edbacee4d3fc0/src/Common/ZooKeeper/ZooKeeperImpl.cpp#L57-L265.\r\nZooKeeper has quite strict (but configurable) limitations on request/response size but for Keeper we don't have them. For large multi-requests and big responses (for example `getChildren` response) we can have big advantages from compression, because both requests and responses should compress well.\r\n\r\nWe already support compression in client-server TCP protocol: https://github.com/ClickHouse/clickhouse-private/blob/c496ff8dc14f1a5f115c257e96c9b1d16e628e32/src/Server/TCPHandler.cpp#L1745-L1748. And in client-server HTTP protocol: https://github.com/ClickHouse/clickhouse-private/blob/c496ff8dc14f1a5f115c257e96c9b1d16e628e32/src/Server/HTTPHandler.cpp#L575-L581. \r\n\r\nThe same technique can be applied -- wrap our TCP socket with compressed buffer on both sides:\r\n1) Server: https://github.com/ClickHouse/ClickHouse/blob/27f9384717ba12f99a5fca74021edbacee4d3fc0/src/Server/KeeperTCPHandler.cpp#L309-L310\r\n2) Client: https://github.com/ClickHouse/ClickHouse/blob/27f9384717ba12f99a5fca74021edbacee4d3fc0/src/Common/ZooKeeper/ZooKeeperImpl.cpp#L412-L413\r\n\r\nTo determine do we need to use compression or not, user can specify special tag in client's configuration: https://github.com/ClickHouse/ClickHouse/blob/master/tests/config/config.d/zookeeper.xml#LL1C1-L10C1, like `<compressed_protocol>true</compressed_protocol>`. I think the best way for Keeper Client to tell Server about compression is protocol version constant https://github.com/ClickHouse/ClickHouse/blob/27f9384717ba12f99a5fca74021edbacee4d3fc0/src/Common/ZooKeeper/ZooKeeperConstants.h#L47. If client configured to use compression, tried to send `ZOOKEEPER_PROTOCOL_VERSION_WITH_COMPRESSION` (1) but received an exception it should just retry without compression.\r\n\r\n\r\ncc @antonio2368, @alexey-milovidov \n",
  "hints_text": "@alesapin What't the performance of keeper comparing with apache zookeeper nowadays?\nSeems only one single thread processes the requests, so there is no chance of a big performance improvement, am I right?\r\n\r\nHere is the code:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/bb2acb50d2d65226e5ceb51d0d83a70f4283ce60/src/Coordination/KeeperDispatcher.cpp#LL188C40-L188C40\n@helifu \r\nRequests are processed in a single thread because of the ordering guarantees, and because the operations are simple multithreading could have negative effects (based on some tests I did).\r\n\r\nReceiving requests and sending responses is done in different threads. What's more each connection has its own thread for receiving requests. Decompressing would be done in a multithreaded way so we expect some improvements for bigger requests.\nThanks @antonio2368 ~",
  "created_at": "2023-09-24T09:42:59Z",
  "modified_files": [
    "docs/en/operations/server-configuration-parameters/settings.md",
    "src/CMakeLists.txt",
    "src/Common/ZooKeeper/CMakeLists.txt",
    "src/Common/ZooKeeper/ZooKeeperArgs.cpp",
    "src/Common/ZooKeeper/ZooKeeperArgs.h",
    "src/Common/ZooKeeper/ZooKeeperCommon.cpp",
    "src/Common/ZooKeeper/ZooKeeperConstants.h",
    "src/Common/ZooKeeper/ZooKeeperImpl.cpp",
    "src/Common/ZooKeeper/ZooKeeperImpl.h",
    "src/Common/ZooKeeper/examples/CMakeLists.txt",
    "src/Server/KeeperTCPHandler.cpp",
    "src/Server/KeeperTCPHandler.h",
    "utils/keeper-bench/Runner.cpp",
    "utils/keeper-bench/Runner.h"
  ],
  "modified_test_files": [
    "docker/test/stateless/stress_tests.lib",
    "tests/config/config.d/zookeeper.xml",
    "b/tests/integration/test_keeper_compression/configs/keeper.xml",
    "b/tests/integration/test_keeper_compression/configs/keeper_with_compression.xml",
    "b/tests/integration/test_keeper_compression/configs/keeper_without_compression.xml",
    "b/tests/integration/test_keeper_compression/test_with_compression.py",
    "b/tests/integration/test_keeper_compression/test_without_compression.py"
  ]
}