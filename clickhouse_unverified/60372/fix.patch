diff --git a/docs/en/sql-reference/table-functions/merge.md b/docs/en/sql-reference/table-functions/merge.md
index a1f376ba0ebb..1d21bd504afd 100644
--- a/docs/en/sql-reference/table-functions/merge.md
+++ b/docs/en/sql-reference/table-functions/merge.md
@@ -11,11 +11,11 @@ Creates a temporary [Merge](../../engines/table-engines/special/merge.md) table.
 **Syntax**
 
 ```sql
-merge('db_name', 'tables_regexp')
+merge(['db_name',] 'tables_regexp')
 ```
 **Arguments**
 
-- `db_name` — Possible values:
+- `db_name` — Possible values (optional, default is `currentDatabase()`):
     - database name,
     - constant expression that returns a string with a database name, for example, `currentDatabase()`,
     - `REGEXP(expression)`, where `expression` is a regular expression to match the DB names.
diff --git a/src/TableFunctions/TableFunctionMerge.cpp b/src/TableFunctions/TableFunctionMerge.cpp
index e7b5a34958fb..ff1459ca34bf 100644
--- a/src/TableFunctions/TableFunctionMerge.cpp
+++ b/src/TableFunctions/TableFunctionMerge.cpp
@@ -88,26 +88,38 @@ void TableFunctionMerge::parseArguments(const ASTPtr & ast_function, ContextPtr
 
     if (args_func.size() != 1)
         throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,
-                        "Table function 'merge' requires exactly 2 arguments - name "
-                        "of source database and regexp for table names.");
+                        "Table function 'merge' requires from 1 to 2 parameters: "
+                        "merge(['db_name',] 'tables_regexp')");
 
     ASTs & args = args_func.at(0)->children;
 
-    if (args.size() != 2)
-        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,
-                        "Table function 'merge' requires exactly 2 arguments - name "
-                        "of source database and regexp for table names.");
+    if (args.size() == 1)
+    {
+        database_is_regexp = false;
+        source_database_name_or_regexp = context->getCurrentDatabase();
 
-    auto [is_regexp, database_ast] = StorageMerge::evaluateDatabaseName(args[0], context);
+        args[0] = evaluateConstantExpressionAsLiteral(args[0], context);
+        source_table_regexp = checkAndGetLiteralArgument<String>(args[0], "table_name_regexp");
+    }
+    else if (args.size() == 2)
+    {
+        auto [is_regexp, database_ast] = StorageMerge::evaluateDatabaseName(args[0], context);
 
-    database_is_regexp = is_regexp;
+        database_is_regexp = is_regexp;
 
-    if (!is_regexp)
-        args[0] = database_ast;
-    source_database_name_or_regexp = checkAndGetLiteralArgument<String>(database_ast, "database_name");
+        if (!is_regexp)
+            args[0] = database_ast;
+        source_database_name_or_regexp = checkAndGetLiteralArgument<String>(database_ast, "database_name");
 
-    args[1] = evaluateConstantExpressionAsLiteral(args[1], context);
-    source_table_regexp = checkAndGetLiteralArgument<String>(args[1], "table_name_regexp");
+        args[1] = evaluateConstantExpressionAsLiteral(args[1], context);
+        source_table_regexp = checkAndGetLiteralArgument<String>(args[1], "table_name_regexp");
+    }
+    else
+    {
+        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,
+                        "Table function 'merge' requires from 1 to 2 parameters: "
+                        "merge(['db_name',] 'tables_regexp')");
+    }
 }
 
 
