diff --git a/src/IO/HTTPChunkedReadBuffer.cpp b/src/IO/HTTPChunkedReadBuffer.cpp
index bd9bbba4c6c4..374e04031d07 100644
--- a/src/IO/HTTPChunkedReadBuffer.cpp
+++ b/src/IO/HTTPChunkedReadBuffer.cpp
@@ -14,7 +14,6 @@ namespace ErrorCodes
     extern const int ARGUMENT_OUT_OF_BOUND;
     extern const int UNEXPECTED_END_OF_FILE;
     extern const int CORRUPTED_DATA;
-    extern const int TOO_MANY_BYTES;
 }
 
 size_t HTTPChunkedReadBuffer::readChunkHeader()
@@ -40,9 +39,6 @@ size_t HTTPChunkedReadBuffer::readChunkHeader()
     if (in->eof())
         throw Exception("Unexpected end of file while reading chunk header of HTTP chunked data", ErrorCodes::UNEXPECTED_END_OF_FILE);
 
-    if (res > max_size)
-        throw Exception("Chunk size is too large", ErrorCodes::TOO_MANY_BYTES);
-
     assertString("
", *in);
     return res;
 }
diff --git a/src/IO/HTTPChunkedReadBuffer.h b/src/IO/HTTPChunkedReadBuffer.h
index 0ccebc69d08e..378835cafc0c 100644
--- a/src/IO/HTTPChunkedReadBuffer.h
+++ b/src/IO/HTTPChunkedReadBuffer.h
@@ -10,11 +10,10 @@ namespace DB
 class HTTPChunkedReadBuffer : public BufferWithOwnMemory<ReadBuffer>
 {
 public:
-    HTTPChunkedReadBuffer(std::unique_ptr<ReadBuffer> in_, size_t max_chunk_size) : in(std::move(in_)), max_size(max_chunk_size) {}
+    explicit HTTPChunkedReadBuffer(std::unique_ptr<ReadBuffer> in_) : in(std::move(in_)) {}
 
 private:
     std::unique_ptr<ReadBuffer> in;
-    const size_t max_size;
 
     size_t readChunkHeader();
     void readChunkFooter();
diff --git a/src/Server/HTTP/HTTPServerRequest.cpp b/src/Server/HTTP/HTTPServerRequest.cpp
index bdba6a51d91a..2a765f36fd7b 100644
--- a/src/Server/HTTP/HTTPServerRequest.cpp
+++ b/src/Server/HTTP/HTTPServerRequest.cpp
@@ -26,7 +26,6 @@ HTTPServerRequest::HTTPServerRequest(const Context & context, HTTPServerResponse
 
     auto receive_timeout = context.getSettingsRef().http_receive_timeout;
     auto send_timeout = context.getSettingsRef().http_send_timeout;
-    auto max_query_size = context.getSettingsRef().max_query_size;
 
     session.socket().setReceiveTimeout(receive_timeout);
     session.socket().setSendTimeout(send_timeout);
@@ -37,7 +36,7 @@ HTTPServerRequest::HTTPServerRequest(const Context & context, HTTPServerResponse
     readRequest(*in);  /// Try parse according to RFC7230
 
     if (getChunkedTransferEncoding())
-        stream = std::make_unique<HTTPChunkedReadBuffer>(std::move(in), max_query_size);
+        stream = std::make_unique<HTTPChunkedReadBuffer>(std::move(in));
     else if (hasContentLength())
         stream = std::make_unique<LimitReadBuffer>(std::move(in), getContentLength(), false);
     else if (getMethod() != HTTPRequest::HTTP_GET && getMethod() != HTTPRequest::HTTP_HEAD && getMethod() != HTTPRequest::HTTP_DELETE)
