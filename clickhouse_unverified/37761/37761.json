{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37761,
  "instance_id": "ClickHouse__ClickHouse-37761",
  "issue_numbers": [
    "35156"
  ],
  "base_commit": "a16cf7e77e0391c0f464fa6bf05b9197ca53f8aa",
  "patch": "diff --git a/src/Functions/CastOverloadResolver.h b/src/Functions/CastOverloadResolver.h\nindex 9b579c34923a..e62020e10fe9 100644\n--- a/src/Functions/CastOverloadResolver.h\n+++ b/src/Functions/CastOverloadResolver.h\n@@ -45,7 +45,7 @@ class CastOverloadResolverImpl : public IFunctionOverloadResolver\n         const auto & settings_ref = context->getSettingsRef();\n \n         if constexpr (internal)\n-            return createImpl({}, false /*keep_nullable*/, false /*cast_ipv4_ipv6_default_on_conversion_error*/);\n+            return createImpl({}, false /*keep_nullable*/, settings_ref.cast_ipv4_ipv6_default_on_conversion_error);\n \n         return createImpl({}, settings_ref.cast_keep_nullable, settings_ref.cast_ipv4_ipv6_default_on_conversion_error);\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02316_cast_to_ip_address_default_column.reference b/tests/queries/0_stateless/02316_cast_to_ip_address_default_column.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02316_cast_to_ip_address_default_column.sql b/tests/queries/0_stateless/02316_cast_to_ip_address_default_column.sql\nnew file mode 100644\nindex 000000000000..e80718773790\n--- /dev/null\n+++ b/tests/queries/0_stateless/02316_cast_to_ip_address_default_column.sql\n@@ -0,0 +1,24 @@\n+SET cast_ipv4_ipv6_default_on_conversion_error = 1;\n+\n+DROP TABLE IF EXISTS ipv4_test;\n+CREATE TABLE ipv4_test\n+(\n+    id UInt64,\n+    value String\n+) ENGINE=MergeTree ORDER BY id;\n+\n+ALTER TABLE ipv4_test MODIFY COLUMN value IPv4 DEFAULT '';\n+\n+DROP TABLE ipv4_test;\n+\n+DROP TABLE IF EXISTS ipv6_test;\n+CREATE TABLE ipv6_test\n+(\n+    id UInt64,\n+    value String\n+) ENGINE=MergeTree ORDER BY id;\n+\n+ALTER TABLE ipv6_test MODIFY COLUMN value IPv4 DEFAULT '';\n+SELECT * FROM ipv6_test;\n+\n+DROP TABLE ipv6_test;\n",
  "problem_statement": "CAST to IPv6 on empty strings changed between 21.x and 22.x\n**Describe the issue**\r\nOn empty strings, the behaviour of the function `CAST('', 'IPv6')` changed between the versions 21.x and 22.x\r\n\r\n**How to reproduce**\r\nOn 21.8.14.5:\r\n```\r\nSELECT CAST('', 'IPv6');\r\nReturns: \r\n\t\r\n::\r\n```\r\n\r\nOn 22.2.2.1:\r\n```\r\nSELECT CAST('', 'IPv6');\r\nTriggers error: \r\n\r\nCode: 441. DB::Exception: Invalid IPv6 value.: While processing CAST('', 'IPv6'). (CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING) (version 22.2.2.1)\r\n\r\n```\r\n\r\n**Additional context**\r\nThis can prevent some users from upgrading to 22.x when the use of this function is spread across a number of table definitions and environments. The following workaround `CAST(toFixedString('', 16), 'IPv6')` works but the manual task of updating all the occurrences is challenging.\r\n\n",
  "hints_text": "@kitaisreal checked the code and found that previous behaviour was a bug.\r\nIn previous versions, every invalid input was casted to `::`.\r\n\r\nFor bug-compatibility with old versions we are going to introduce a setting that a customer can enable.\nUnfortunately the fix doesn't work for column default expressions.  We have a request to extend the setting/fix behavior.\r\n\r\n```\r\nset cast_ipv4_ipv6_default_on_conversion_error = 1\r\n\r\nALTER TABLE ipv6_test\r\n    MODIFY COLUMN `value` IPv6 DEFAULT ''\r\n\r\nReceived exception from server (version 22.4.1):\r\nCode: 441. DB::Exception: Received from localhost:9000. DB::Exception: Invalid IPv6 value: While processing _CAST('' AS value_tmp_alter12115621927106792052, 'IPv6') AS value: default expression and column type are incompatible.. (CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING)\r\n```",
  "created_at": "2022-06-01T16:56:31Z",
  "modified_files": [
    "src/Functions/CastOverloadResolver.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02316_cast_to_ip_address_default_column.sql"
  ]
}