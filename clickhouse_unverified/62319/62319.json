{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 62319,
  "instance_id": "ClickHouse__ClickHouse-62319",
  "issue_numbers": [
    "62045"
  ],
  "base_commit": "b6d46317d1bd9fd88aebdddf55d1c0046321de69",
  "patch": "diff --git a/src/Storages/StorageMaterializedView.cpp b/src/Storages/StorageMaterializedView.cpp\nindex 344b5dfce9b7..696865dfa2f6 100644\n--- a/src/Storages/StorageMaterializedView.cpp\n+++ b/src/Storages/StorageMaterializedView.cpp\n@@ -91,6 +91,12 @@ StorageMaterializedView::StorageMaterializedView(\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n+    auto * storage_def = query.storage;\n+    if (storage_def && storage_def->primary_key)\n+        storage_metadata.primary_key = KeyDescription::getKeyFromAST(storage_def->primary_key->ptr(),\n+                                                                     storage_metadata.columns,\n+                                                                     local_context->getGlobalContext());\n+\n     if (query.sql_security)\n         storage_metadata.setSQLSecurity(query.sql_security->as<ASTSQLSecurity &>());\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03035_materialized_primary_key.reference b/tests/queries/0_stateless/03035_materialized_primary_key.reference\nnew file mode 100644\nindex 000000000000..4ee050c1d92c\n--- /dev/null\n+++ b/tests/queries/0_stateless/03035_materialized_primary_key.reference\n@@ -0,0 +1,3 @@\n+test\tid\n+test_mv\t\n+test_mv_pk\tvalue\ndiff --git a/tests/queries/0_stateless/03035_materialized_primary_key.sql b/tests/queries/0_stateless/03035_materialized_primary_key.sql\nnew file mode 100644\nindex 000000000000..928aebc340b3\n--- /dev/null\n+++ b/tests/queries/0_stateless/03035_materialized_primary_key.sql\n@@ -0,0 +1,28 @@\n+DROP TABLE IF EXISTS test;\n+CREATE TABLE test\n+(\n+    id UInt64,\n+    value String\n+) ENGINE=MergeTree ORDER BY id;\n+\n+INSERT INTO test VALUES (1, 'Alice'), (2, 'Bob');\n+\n+DROP VIEW IF EXISTS test_mv;\n+CREATE MATERIALIZED VIEW test_mv\n+(\n+    id UInt64,\n+    value String\n+) ENGINE=MergeTree\n+ORDER BY id AS SELECT id, value FROM test;\n+\n+DROP VIEW IF EXISTS test_mv_pk;\n+CREATE MATERIALIZED VIEW test_mv_pk\n+(\n+    value String,\n+    id UInt64\n+) ENGINE=MergeTree PRIMARY KEY value\n+POPULATE AS SELECT value, id FROM test;\n+\n+SELECT name, primary_key\n+FROM system.tables\n+WHERE database = currentDatabase() AND name LIKE 'test%';\n\\ No newline at end of file\n",
  "problem_statement": "\"system.tables\" doesn't show primary key for materialized views\n**Describe the unexpected behavior**\r\nMaterialized views don't have primary key in \"system.tables\"\r\n\r\n**How to reproduce**\r\n```sql\r\nCREATE TABLE sample (uid Int16, name String)\r\nENGINE = MergeTree\r\nPRIMARY KEY uid;\r\n\r\nINSERT INTO sample VALUES (1, 'Alice'), (2, 'Bob');\r\n\r\nCREATE MATERIALIZED VIEW sample_mv\r\nENGINE = MergeTree\r\nPRIMARY KEY name\r\nPOPULATE AS\r\nSELECT name, uid\r\nFROM sample;\r\n\r\nSELECT name, primary_key\r\nFROM system.tables\r\nWHERE name LIKE 'sample%';\r\n-- sample    | uid\r\n-- sample_mv | \r\n-- [*] for some reason, sample_mv has empty primary_key\r\n\r\nSHOW CREATE TABLE sample_mv;\r\n-- CREATE MATERIALIZED VIEW default.sample_mv (\r\n--     `name` String,\r\n--     `uid` Int16\r\n-- )\r\n-- ENGINE = MergeTree\r\n-- PRIMARY KEY name             <- primary key really exists\r\n-- ORDER BY name ...\r\n```\r\nExample: https://fiddle.clickhouse.com/87587364-10d4-4338-b1cc-c6c01f83684e\r\n\r\n**Expected behavior**\r\n\"system.tables\" must show primary key for materialized views in same way as it shows for tables\r\n\n",
  "hints_text": "Hi, I'd like to work on this.",
  "created_at": "2024-04-05T10:08:50Z",
  "modified_files": [
    "src/Storages/StorageMaterializedView.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03035_materialized_primary_key.reference",
    "b/tests/queries/0_stateless/03035_materialized_primary_key.sql"
  ]
}