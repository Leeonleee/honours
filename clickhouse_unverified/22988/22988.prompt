You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Read error from S3
**Describe the bug**
When reading from table using diskS3, such exception occurs:

```
Code: 23. DB::Exception: Received from localhost:9000. DB::Exception: Cannot read from istream at offset 0: (while reading column LO_ORDERDATE): (while reading from part ... from mark 14287 with max_rows_to_read = 16384): While executing MergeTreeThread.
```
**Does it reproduce on recent release?**
Yes.

**Stack trace**

```
2021.03.22 14:39:43.010425 [ 65795 ] {} <Error> DB::IBackgroundJobExecutor::jobExecutingTask()::<lambda()>: Code: 23, e.displayText() = DB::Exception: Cannot read from istream at offset 0: (while reading column LO_SUPPKEY): While executing MergeTreeSequentialSource, Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xd1610e0 in /essd/CK/s3/programs/clickhouse
1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x3ecfda1 in /essd/CK/s3/programs/clickhouse
2. DB::ReadBufferFromIStream::nextImpl() (.cold) @ 0x3c7f652 in /essd/CK/s3/programs/clickhouse
3. DB::ReadBufferFromS3::nextImpl() @ 0xca457c7 in /essd/CK/s3/programs/clickhouse
4. DB::ReadIndirectBufferFromS3::nextImpl() @ 0xae6e517 in /essd/CK/s3/programs/clickhouse
5. DB::SeekAvoidingReadBuffer::nextImpl() @ 0xca509c2 in /essd/CK/s3/programs/clickhouse
6. DB::ReadBuffer::readStrict(char*, unsigned long) @ 0x3f02af1 in /essd/CK/s3/programs/clickhouse
7. DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool) @ 0x9c85949 in /essd/CK/s3/programs/clickhouse
8. DB::CompressedReadBufferFromFile::readBig(char*, unsigned long) @ 0x9c86b67 in /essd/CK/s3/programs/clickhouse
9. DB::DataTypeNumberBase<unsigned int>::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const @ 0x9d66eb3 in /essd/CK/s3/programs/clickhouse
10. DB::IDataType::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, DB::IDataType::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::IDataType::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > >*) const @ 0x9d97f38 in /essd/CK/s3/programs/clickhouse
11. DB::MergeTreeReaderCompact::readData(DB::NameAndTypePair const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, bool) @ 0xa4505b2 in /essd/CK/s3/programs/clickhouse
12. DB::MergeTreeReaderCompact::readRows(unsigned long, bool, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&) @ 0xa450a54 in /essd/CK/s3/programs/clickhouse
13. DB::MergeTreeSequentialSource::generate() @ 0xa461ba9 in /essd/CK/s3/programs/clickhouse
14. DB::ISource::work() @ 0xa5af04b in /essd/CK/s3/programs/clickhouse
15. DB::SourceWithProgress::work() @ 0xa70aed7 in /essd/CK/s3/programs/clickhouse
16. void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0xa5d5bed in /essd/CK/s3/programs/clickhouse
17. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) (.constprop.0) @ 0xa5dac24 in /essd/CK/s3/programs/clickhouse
18. DB::PipelineExecutor::executeStep(std::__1::atomic<bool>*) @ 0xa5dc5a9 in /essd/CK/s3/programs/clickhouse
19. DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0xa5e4475 in /essd/CK/s3/programs/clickhouse
20. DB::PullingPipelineExecutor::pull(DB::Block&) @ 0xa5e4be7 in /essd/CK/s3/programs/clickhouse
21. DB::PipelineExecutingBlockInputStream::readImpl() @ 0xa5d4a78 in /essd/CK/s3/programs/clickhouse
22. DB::IBlockInputStream::read() @ 0x9c9ec3e in /essd/CK/s3/programs/clickhouse
23. DB::MergeTreeDataMergerMutator::mergePartsToTemporaryPart(DB::FutureMergedMutatedPart const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::BackgroundProcessListEntry<DB::MergeListElement, DB::MergeInfo>&, std::__1::shared_ptr<DB::RWLockImpl::LockHolderImpl>&, long, DB::Context const&, std::__1::unique_ptr<DB::IReservation, std::__1::default_delete<DB::IReservation> > const&, bool, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xa3d3d65 in /essd/CK/s3/programs/clickhouse
24. DB::StorageMergeTree::mergeSelectedParts(std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::StorageMergeTree::MergeMutateSelectedEntry&, std::__1::shared_ptr<DB::RWLockImpl::LockHolderImpl>&) @ 0xa22dfa7 in /essd/CK/s3/programs/clickhouse
25. bool std::__1::__function::__policy_invoker<bool ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::StorageMergeTree::getDataProcessingJob()::'lambda'(), bool ()> >(std::__1::__function::__policy_storage const*) @ 0xa22e64a in /essd/CK/s3/programs/clickhouse
26. void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::IBackgroundJobExecutor::jobExecutingTask()::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0xa33d1b0 in /essd/CK/s3/programs/clickhouse
27. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x3f2f4f3 in /essd/CK/s3/programs/clickhouse
28. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x3f2fbdf in /essd/CK/s3/programs/clickhouse
29. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x3f2eb83 in /essd/CK/s3/programs/clickhouse
30. void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()> >(void*) @ 0x3f2e44f in /essd/CK/s3/programs/clickhouse
31. start_thread @ 0x7ebe in /home/fenglv/gentoo/lib64/libpthread-2.32.so
 (version 21.4.1.1)
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
