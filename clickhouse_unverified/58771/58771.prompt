You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Segfault in `SlabsPolygonIndex::find` on high longitude polygons
**Describe what's wrong**

A polygonal dictionary is created with longitudes and latitudes. The keys are `MultiPolygon`s with a single polygon each.

When some of the polygon points contain coordinate with longitude close to +-180째, a segfault appears in [`SlabsPolygonIndex::find`](https://github.com/ClickHouse/ClickHouse/blob/d3e73ff6e668652687a3fd8156dd8426c17c25ab/src/Dictionaries/PolygonDictionaryUtils.cpp#L260) and makes the entire server crash.

**Does it reproduce on recent release?**

This is present on version 23.12.2.59 (official build), build id: 7F4C1A822F9C67A4D137A58F9A95BD4B0F1B6A8A, git hash: 17ab210e76170917215be8cc3ae07d465a341d42) 

**How to reproduce**

- Create a polygon dictionary that contains points having longitude up to 179째.
- Run a query that uses the dictionary, e.g. with `dictGet`.
- The server crashes with a segfault.
- Clamp the longitudes to 170째: no segfault.
- Clamp the longitudes to 175째: still a segfault.

I have not yet tried creating a minimal example reproducing the bug.
Maybe it is clear to someone faimilar with `SlabsPolygonIndex::find` what line could be causing an invalid memory access.

**Expected behavior**

Even if some polygons are invalid, the server should not segfault

**Error message and/or stacktrace**

```
[533a9f31784d] 2024.01.08 22:28:56.775037 [ 765 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
[533a9f31784d] 2024.01.08 22:28:56.775050 [ 765 ] <Fatal> BaseDaemon: Stack trace: 0x000000000e83760b 0x000000000e80ac04 0x000000000e83079c 0x000000000e82d470 0x000000000760de2c 0x000000000716cbce 0x000000000fc09ade 0x000000000fc0a65e 0x000000000fc0bc09 0x0000000010a7d4f9 0x0000000010a7e7a6 0x00000000122bd1bd 0x00000000122ba0ed 0x00000000122c28b6 0x0000000012b3080f 0x00000000122affca 0x0000000012b5d218 0x00000000126d2de3 0x00000000126ebd7a 0x00000000126e27b0 0x00000000126e3881 0x000000000c7bda84 0x000000000c7c12dc 0x000000000c7c00d8 0x00007f5b1e90bea7 0x00007f5b1e82ba2f
[533a9f31784d] 2024.01.08 22:28:56.775089 [ 765 ] <Fatal> BaseDaemon: 2. DB::SlabsPolygonIndex::find(boost::geometry::model::d2::point_xy<float, boost::geometry::cs::cartesian> const&, unsigned long&) const @ 0x000000000e83760b in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775102 [ 765 ] <Fatal> BaseDaemon: 3. DB::PolygonDictionaryIndexCell::find(boost::geometry::model::d2::point_xy<float, boost::geometry::cs::cartesian> const&, unsigned long&) const @ 0x000000000e80ac04 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775157 [ 765 ] <Fatal> BaseDaemon: 4. void detail::static_for<DB::AttributeUnderlyingType, void DB::callOnDictionaryAttributeType<DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&>(DB::AttributeUnderlyingType, DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)::'lambda'(DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&), 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul, 13ul, 14ul, 15ul, 16ul, 17ul, 18ul, 19ul, 20ul, 21ul, 22ul, 23ul>(void DB::callOnDictionaryAttributeType<DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&>(DB::AttributeUnderlyingType, DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)::'lambda'(DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)&&, std::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul, 13ul, 14ul, 15ul, 16ul, 17ul, 18ul, 19ul, 20ul, 21ul, 22ul, 23ul>) @ 0x000000000e83079c in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775174 [ 765 ] <Fatal> BaseDaemon: 5. DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const @ 0x000000000e82d470 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775197 [ 765 ] <Fatal> BaseDaemon: 6. DB::FunctionDictGetNoType<(DB::DictionaryGetFunctionType)0>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000760de2c in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775224 [ 765 ] <Fatal> BaseDaemon: 7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000716cbce in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775257 [ 765 ] <Fatal> BaseDaemon: 8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000fc09ade in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775276 [ 765 ] <Fatal> BaseDaemon: 9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000fc0a65e in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775297 [ 765 ] <Fatal> BaseDaemon: 10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000fc0bc09 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775323 [ 765 ] <Fatal> BaseDaemon: 11. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x0000000010a7d4f9 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775347 [ 765 ] <Fatal> BaseDaemon: 12. DB::ExpressionActions::execute(DB::Block&, bool) const @ 0x0000000010a7e7a6 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775384 [ 765 ] <Fatal> BaseDaemon: 13. DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x00000000122bd1bd in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775401 [ 765 ] <Fatal> BaseDaemon: 14. DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x00000000122ba0ed in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775419 [ 765 ] <Fatal> BaseDaemon: 15. DB::MergeTreeReadTask::read(DB::MergeTreeReadTask::BlockSizeParams const&) @ 0x00000000122c28b6 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775442 [ 765 ] <Fatal> BaseDaemon: 16. DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&, DB::MergeTreeReadTask::BlockSizeParams const&) @ 0x0000000012b3080f in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775466 [ 765 ] <Fatal> BaseDaemon: 17. DB::MergeTreeSelectProcessor::read() @ 0x00000000122affca in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775485 [ 765 ] <Fatal> BaseDaemon: 18. DB::MergeTreeSource::tryGenerate() @ 0x0000000012b5d218 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775501 [ 765 ] <Fatal> BaseDaemon: 19. DB::ISource::work() @ 0x00000000126d2de3 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775520 [ 765 ] <Fatal> BaseDaemon: 20. DB::ExecutionThreadContext::executeTask() @ 0x00000000126ebd7a in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775553 [ 765 ] <Fatal> BaseDaemon: 21. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000126e27b0 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775579 [ 765 ] <Fatal> BaseDaemon: 22. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000126e3881 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775604 [ 765 ] <Fatal> BaseDaemon: 23. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c7bda84 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775629 [ 765 ] <Fatal> BaseDaemon: 24. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c7c12dc in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775657 [ 765 ] <Fatal> BaseDaemon: 25. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c7c00d8 in /usr/bin/clickhouse
[533a9f31784d] 2024.01.08 22:28:56.775688 [ 765 ] <Fatal> BaseDaemon: 26. start_thread @ 0x0000000000007ea7 in /lib/x86_64-linux-gnu/[libpthread-2.31.so](http://libpthread-2.31.so/)
[533a9f31784d] 2024.01.08 22:28:56.775714 [ 765 ] <Fatal> BaseDaemon: 27. ? @ 0x00000000000fba2f in /lib/x86_64-linux-gnu/[libc-2.31.so](http://libc-2.31.so/)
[533a9f31784d] 2024.01.08 22:28:56.786388 [ 763 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: AC32B04C37311E5E413148969FBCE1EA)
[533a9f31784d] 2024.01.08 22:28:56.786737 [ 763 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[533a9f31784d] 2024.01.08 22:28:56.786880 [ 763 ] <Fatal> BaseDaemon: No settings were changed
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
