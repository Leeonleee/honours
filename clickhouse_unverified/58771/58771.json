{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58771,
  "instance_id": "ClickHouse__ClickHouse-58771",
  "issue_numbers": [
    "58612"
  ],
  "base_commit": "6b666f20a93aedb43ac90a310f233fd0e8266fd6",
  "patch": "diff --git a/src/Dictionaries/PolygonDictionaryUtils.cpp b/src/Dictionaries/PolygonDictionaryUtils.cpp\nindex c28c7c15aa7b..2af97d3fc6fa 100644\n--- a/src/Dictionaries/PolygonDictionaryUtils.cpp\n+++ b/src/Dictionaries/PolygonDictionaryUtils.cpp\n@@ -267,7 +267,7 @@ bool SlabsPolygonIndex::find(const Point & point, size_t & id) const\n     Coord y = point.y();\n \n     /** Not in bounding box */\n-    if (x < sorted_x[0] || x > sorted_x.back())\n+    if (x < sorted_x.front() || x > sorted_x.back())\n         return false;\n \n     bool found = false;\ndiff --git a/src/Dictionaries/PolygonDictionaryUtils.h b/src/Dictionaries/PolygonDictionaryUtils.h\nindex 63d97e9dabd4..5268cb93f780 100644\n--- a/src/Dictionaries/PolygonDictionaryUtils.h\n+++ b/src/Dictionaries/PolygonDictionaryUtils.h\n@@ -157,6 +157,12 @@ class DividedCell : public ICell<ReturnCell>\n         auto y_ratio = y * kSplit;\n         auto x_bin = static_cast<int>(x_ratio);\n         auto y_bin = static_cast<int>(y_ratio);\n+        /// In case if we have a lot of values and argument is very close to max_x (max_y) so x_ratio (y_ratio) = 1.\n+        if (x_bin == kSplit)\n+            --x_bin;\n+        /// => x_bin (y_bin) will be 4, which can lead to wrong vector access.\n+        if (y_bin == kSplit)\n+            --y_bin;\n         return children[y_bin + x_bin * kSplit]->find(x_ratio - x_bin, y_ratio - y_bin);\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02960_polygon_bound_bug.reference b/tests/queries/0_stateless/02960_polygon_bound_bug.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/tests/queries/0_stateless/02960_polygon_bound_bug.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/02960_polygon_bound_bug.sh b/tests/queries/0_stateless/02960_polygon_bound_bug.sh\nnew file mode 100755\nindex 000000000000..0c3db01a77cd\n--- /dev/null\n+++ b/tests/queries/0_stateless/02960_polygon_bound_bug.sh\n@@ -0,0 +1,11 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_LOCAL -nm -q \"CREATE TABLE test_table (geom MultiPolygon) engine=MergeTree ORDER BY geom;\n+INSERT INTO test_table SELECT * FROM file('$CURDIR/data_parquet/02960_polygon_bound_bug.parquet', Parquet);\n+CREATE DICTIONARY test_dict (geom MultiPolygon) PRIMARY KEY geom SOURCE (CLICKHOUSE(TABLE 'test_table')) LIFETIME(MIN 0 MAX 0) LAYOUT(POLYGON(STORE_POLYGON_KEY_COLUMN 1));\n+SELECT dictHas(test_dict,(174.84729269276494,-36.99524960275426));\"\ndiff --git a/tests/queries/0_stateless/data_parquet/02960_polygon_bound_bug.parquet b/tests/queries/0_stateless/data_parquet/02960_polygon_bound_bug.parquet\nnew file mode 100644\nindex 000000000000..b4aedb8f964f\nBinary files /dev/null and b/tests/queries/0_stateless/data_parquet/02960_polygon_bound_bug.parquet differ\n",
  "problem_statement": "Segfault in `SlabsPolygonIndex::find` on high longitude polygons\n**Describe what's wrong**\r\n\r\nA polygonal dictionary is created with longitudes and latitudes. The keys are `MultiPolygon`s with a single polygon each.\r\n\r\nWhen some of the polygon points contain coordinate with longitude close to +-180\u00b0, a segfault appears in [`SlabsPolygonIndex::find`](https://github.com/ClickHouse/ClickHouse/blob/d3e73ff6e668652687a3fd8156dd8426c17c25ab/src/Dictionaries/PolygonDictionaryUtils.cpp#L260) and makes the entire server crash.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nThis is present on version 23.12.2.59 (official build), build id: 7F4C1A822F9C67A4D137A58F9A95BD4B0F1B6A8A, git hash: 17ab210e76170917215be8cc3ae07d465a341d42) \r\n\r\n**How to reproduce**\r\n\r\n- Create a polygon dictionary that contains points having longitude up to 179\u00b0.\r\n- Run a query that uses the dictionary, e.g. with `dictGet`.\r\n- The server crashes with a segfault.\r\n- Clamp the longitudes to 170\u00b0: no segfault.\r\n- Clamp the longitudes to 175\u00b0: still a segfault.\r\n\r\nI have not yet tried creating a minimal example reproducing the bug.\r\nMaybe it is clear to someone faimilar with `SlabsPolygonIndex::find` what line could be causing an invalid memory access.\r\n\r\n**Expected behavior**\r\n\r\nEven if some polygons are invalid, the server should not segfault\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n[533a9f31784d] 2024.01.08 22:28:56.775037 [ 765 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n[533a9f31784d] 2024.01.08 22:28:56.775050 [ 765 ] <Fatal> BaseDaemon: Stack trace: 0x000000000e83760b 0x000000000e80ac04 0x000000000e83079c 0x000000000e82d470 0x000000000760de2c 0x000000000716cbce 0x000000000fc09ade 0x000000000fc0a65e 0x000000000fc0bc09 0x0000000010a7d4f9 0x0000000010a7e7a6 0x00000000122bd1bd 0x00000000122ba0ed 0x00000000122c28b6 0x0000000012b3080f 0x00000000122affca 0x0000000012b5d218 0x00000000126d2de3 0x00000000126ebd7a 0x00000000126e27b0 0x00000000126e3881 0x000000000c7bda84 0x000000000c7c12dc 0x000000000c7c00d8 0x00007f5b1e90bea7 0x00007f5b1e82ba2f\r\n[533a9f31784d] 2024.01.08 22:28:56.775089 [ 765 ] <Fatal> BaseDaemon: 2. DB::SlabsPolygonIndex::find(boost::geometry::model::d2::point_xy<float, boost::geometry::cs::cartesian> const&, unsigned long&) const @ 0x000000000e83760b in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775102 [ 765 ] <Fatal> BaseDaemon: 3. DB::PolygonDictionaryIndexCell::find(boost::geometry::model::d2::point_xy<float, boost::geometry::cs::cartesian> const&, unsigned long&) const @ 0x000000000e80ac04 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775157 [ 765 ] <Fatal> BaseDaemon: 4. void detail::static_for<DB::AttributeUnderlyingType, void DB::callOnDictionaryAttributeType<DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&>(DB::AttributeUnderlyingType, DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)::'lambda'(DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&), 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul, 13ul, 14ul, 15ul, 16ul, 17ul, 18ul, 19ul, 20ul, 21ul, 22ul, 23ul>(void DB::callOnDictionaryAttributeType<DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&>(DB::AttributeUnderlyingType, DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)::'lambda'(DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)&&, std::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul, 13ul, 14ul, 15ul, 16ul, 17ul, 18ul, 19ul, 20ul, 21ul, 22ul, 23ul>) @ 0x000000000e83079c in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775174 [ 765 ] <Fatal> BaseDaemon: 5. DB::IPolygonDictionary::getColumn(String const&, std::shared_ptr<DB::IDataType const> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const @ 0x000000000e82d470 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775197 [ 765 ] <Fatal> BaseDaemon: 6. DB::FunctionDictGetNoType<(DB::DictionaryGetFunctionType)0>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000760de2c in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775224 [ 765 ] <Fatal> BaseDaemon: 7. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000716cbce in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775257 [ 765 ] <Fatal> BaseDaemon: 8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000fc09ade in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775276 [ 765 ] <Fatal> BaseDaemon: 9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000fc0a65e in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775297 [ 765 ] <Fatal> BaseDaemon: 10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000fc0bc09 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775323 [ 765 ] <Fatal> BaseDaemon: 11. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x0000000010a7d4f9 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775347 [ 765 ] <Fatal> BaseDaemon: 12. DB::ExpressionActions::execute(DB::Block&, bool) const @ 0x0000000010a7e7a6 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775384 [ 765 ] <Fatal> BaseDaemon: 13. DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x00000000122bd1bd in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775401 [ 765 ] <Fatal> BaseDaemon: 14. DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x00000000122ba0ed in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775419 [ 765 ] <Fatal> BaseDaemon: 15. DB::MergeTreeReadTask::read(DB::MergeTreeReadTask::BlockSizeParams const&) @ 0x00000000122c28b6 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775442 [ 765 ] <Fatal> BaseDaemon: 16. DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&, DB::MergeTreeReadTask::BlockSizeParams const&) @ 0x0000000012b3080f in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775466 [ 765 ] <Fatal> BaseDaemon: 17. DB::MergeTreeSelectProcessor::read() @ 0x00000000122affca in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775485 [ 765 ] <Fatal> BaseDaemon: 18. DB::MergeTreeSource::tryGenerate() @ 0x0000000012b5d218 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775501 [ 765 ] <Fatal> BaseDaemon: 19. DB::ISource::work() @ 0x00000000126d2de3 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775520 [ 765 ] <Fatal> BaseDaemon: 20. DB::ExecutionThreadContext::executeTask() @ 0x00000000126ebd7a in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775553 [ 765 ] <Fatal> BaseDaemon: 21. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000126e27b0 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775579 [ 765 ] <Fatal> BaseDaemon: 22. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000126e3881 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775604 [ 765 ] <Fatal> BaseDaemon: 23. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c7bda84 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775629 [ 765 ] <Fatal> BaseDaemon: 24. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c7c12dc in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775657 [ 765 ] <Fatal> BaseDaemon: 25. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c7c00d8 in /usr/bin/clickhouse\r\n[533a9f31784d] 2024.01.08 22:28:56.775688 [ 765 ] <Fatal> BaseDaemon: 26. start_thread @ 0x0000000000007ea7 in /lib/x86_64-linux-gnu/[libpthread-2.31.so](http://libpthread-2.31.so/)\r\n[533a9f31784d] 2024.01.08 22:28:56.775714 [ 765 ] <Fatal> BaseDaemon: 27. ? @ 0x00000000000fba2f in /lib/x86_64-linux-gnu/[libc-2.31.so](http://libc-2.31.so/)\r\n[533a9f31784d] 2024.01.08 22:28:56.786388 [ 763 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: AC32B04C37311E5E413148969FBCE1EA)\r\n[533a9f31784d] 2024.01.08 22:28:56.786737 [ 763 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[533a9f31784d] 2024.01.08 22:28:56.786880 [ 763 ] <Fatal> BaseDaemon: No settings were changed\r\n```\n",
  "hints_text": "```\r\n$ llvm-addr2line-13 -afiCe ./23.12.2.58/usr/lib/debug/usr/bin/clickhouse.debug 0x000000000e83760b 0x000000000e80ac04 0x000000000e83079c 0x000000000e82d470 0x000000000760de2c 0x000000000716cbce 0x000000000fc09ade 0x000000000fc0a65e 0x000000000fc0bc09 0x0000000010a7d4f9 0x0000000010a7e7a6 0x00000000122bd1bd 0x00000000122ba0ed 0x00000000122c28b6 0x0000000012b3080f 0x00000000122affca 0x0000000012b5d218 0x00000000126d2de3 0x00000000126ebd7a 0x00000000126e27b0 0x00000000126e3881 0x000000000c7bda84 0x000000000c7c12dc 0x000000000c7c00d8 0x00007f5b1e90bea7 0x00007f5b1e82ba2f\r\n0xe83760b\r\nDB::SlabsPolygonIndex::find(boost::geometry::model::d2::point_xy<float, boost::geometry::cs::cartesian> const&, unsigned long&) const\r\n./build_docker/./build_docker/./src/Dictionaries/PolygonDictionaryUtils.cpp:270\r\n0xe80ac04\r\nDB::PolygonDictionaryIndexCell::find(boost::geometry::model::d2::point_xy<float, boost::geometry::cs::cartesian> const&, unsigned long&) const\r\n./build_docker/./build_docker/./src/Dictionaries/PolygonDictionaryImplementations.cpp:146\r\n0xe83079c\r\nvoid DB::IPolygonDictionary::getItemsImpl<StringRef, auto DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0::operator()<DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> >(DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> const&) const::'lambda'(unsigned long), auto DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0::operator()<DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> >(DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> const&) const::'lambda'(StringRef), DB::DefaultValueProvider>(std::__1::vector<boost::geometry::model::d2::point_xy<float, boost::geometry::cs::cartesian>, std::__1::allocator<boost::geometry::model::d2::point_xy<float, boost::geometry::cs::cartesian> > > const&, auto DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0::operator()<DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> >(DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> const&) const::'lambda'(unsigned long)&&, auto DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0::operator()<DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> >(DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> const&) const::'lambda'(StringRef)&&, DB::DefaultValueProvider&) const\r\n./build_docker/./build_docker/./src/Dictionaries/PolygonDictionary.cpp:358\r\nauto DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0::operator()<DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> >(DB::DictionaryAttributeType<(DB::AttributeUnderlyingType)19> const&) const\r\n./build_docker/./build_docker/./src/Dictionaries/PolygonDictionary.cpp:123\r\nauto void DB::callOnDictionaryAttributeType<DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&>(DB::AttributeUnderlyingType, DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)::'lambda'(DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)::operator()<std::__1::integral_constant<DB::AttributeUnderlyingType, (DB::AttributeUnderlyingType)19> >(DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&) const\r\n./build_docker/./src/Dictionaries/DictionaryStructure.h:88\r\nvoid detail::static_for<DB::AttributeUnderlyingType, void DB::callOnDictionaryAttributeType<DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&>(DB::AttributeUnderlyingType, DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)::'lambda'(DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&), 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul, 13ul, 14ul, 15ul, 16ul, 17ul, 18ul, 19ul, 20ul, 21ul, 22ul, 23ul>(void DB::callOnDictionaryAttributeType<DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&>(DB::AttributeUnderlyingType, DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)::'lambda'(DB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const::$_0&)&&, std::__1::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul, 6ul, 7ul, 8ul, 9ul, 10ul, 11ul, 12ul, 13ul, 14ul, 15ul, 16ul, 17ul, 18ul, 19ul, 20ul, 21ul, 22ul, 23ul>)\r\n./build_docker/./base/base/../base/EnumReflection.h:14\r\n0xe82d470\r\nboost::intrusive_ptr<DB::IColumn const>::intrusive_ptr<DB::IColumn>(boost::intrusive_ptr<DB::IColumn>&&, boost::detail::sp_enable_if_convertible<DB::IColumn, DB::IColumn const>::type)\r\n./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:140\r\nCOW<DB::IColumn>::immutable_ptr<DB::IColumn>::immutable_ptr<DB::IColumn>(COW<DB::IColumn>::mutable_ptr<DB::IColumn>&&)\r\n./build_docker/./src/Common/COW.h:144\r\nDB::IPolygonDictionary::getColumn(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const> > > const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const\r\n./build_docker/./build_docker/./src/Dictionaries/PolygonDictionary.cpp:145\r\n0x760de2c\r\nDB::FunctionDictGetNoType<(DB::DictionaryGetFunctionType)0>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const\r\nFunctionsExternalDictionaries.cpp:0\r\n0x716cbce\r\nDB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const\r\nCRC.cpp:0\r\n0xfc09ade\r\nboost::intrusive_ptr<DB::IColumn const>::intrusive_ptr(boost::intrusive_ptr<DB::IColumn const>&&)\r\n./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117\r\nboost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:124\r\nCOW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n./build_docker/./src/Common/COW.h:136\r\nDB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const\r\n./build_docker/./build_docker/./src/Functions/IFunction.cpp:0\r\n0xfc0a65e\r\nboost::intrusive_ptr<DB::IColumn const>::intrusive_ptr(boost::intrusive_ptr<DB::IColumn const>&&)\r\n./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117\r\nboost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:124\r\nCOW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n./build_docker/./src/Common/COW.h:136\r\nDB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const\r\n./build_docker/./build_docker/./src/Functions/IFunction.cpp:303\r\n0xfc0bc09\r\nstd::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >::~vector[abi:v15000]()\r\n./build_docker/./contrib/llvm-project/libcxx/include/vector:434\r\nDB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const\r\n./build_docker/./build_docker/./src/Functions/IFunction.cpp:379\r\n0x10a7d4f9\r\nboost::intrusive_ptr<DB::IColumn const>::intrusive_ptr(boost::intrusive_ptr<DB::IColumn const>&&)\r\n./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117\r\nboost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:124\r\nCOW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n./build_docker/./src/Common/COW.h:136\r\nDB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool)\r\n./build_docker/./build_docker/./src/Interpreters/ExpressionActions.cpp:613\r\nDB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const\r\n./build_docker/./build_docker/./src/Interpreters/ExpressionActions.cpp:730\r\n0x10a7e7a6\r\nstd::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >::size[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/vector:537\r\nDB::Block::columns() const\r\n./build_docker/./src/Core/Block.h:106\r\nDB::Block::operator bool() const\r\n./build_docker/./src/Core/Block.h:117\r\nDB::Block::operator!() const\r\n./build_docker/./src/Core/Block.h:118\r\nDB::ExpressionActions::execute(DB::Block&, bool) const\r\n./build_docker/./build_docker/./src/Interpreters/ExpressionActions.cpp:776\r\n0x122bd1bd\r\nstd::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__is_long[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/string:1499\r\nstd::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::size[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/string:968\r\nstd::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::empty[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/string:996\r\nDB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&) const\r\n./build_docker/./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1393\r\nDB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&)\r\n./build_docker/./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1084\r\n0x122ba0ed\r\nDB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&)\r\n./build_docker/./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:0\r\n0x122c28b6\r\nDB::MergeTreeReadTask::read(DB::MergeTreeReadTask::BlockSizeParams const&)\r\n./build_docker/./build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:163\r\n0x12b3080f\r\nDB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&, DB::MergeTreeReadTask::BlockSizeParams const&)\r\n./build_docker/./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38\r\n0x122affca\r\nDB::MergeTreeSelectProcessor::read()\r\n./build_docker/./build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:162\r\n0x12b5d218\r\nDB::MergeTreeSource::processReadResult(DB::ChunkAndProgress)\r\n./build_docker/./build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:181\r\nDB::MergeTreeSource::tryGenerate()\r\n./build_docker/./build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:226\r\n0x126d2de3\r\nstd::__1::__optional_storage_base<DB::Chunk, false>::has_value[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/optional:344\r\nstd::__1::optional<DB::Chunk>::operator bool[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/optional:998\r\nDB::ISource::work()\r\n./build_docker/./build_docker/./src/Processors/ISource.cpp:108\r\n0x126ebd7a\r\nDB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\r\n./build_docker/./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:0\r\nDB::ExecutionThreadContext::executeTask()\r\n./build_docker/./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:95\r\n0x126e27b0\r\nDB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*)\r\n./build_docker/./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:273\r\n0x126e3881\r\nstd::__1::shared_ptr<DB::ThreadGroup>::operator bool[abi:v15000]() const\r\n./build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:833\r\nDB::PipelineExecutor::spawnThreads()::$_0::operator()() const::'lambda'()::operator()() const\r\n./build_docker/./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:362\r\nBasicScopeGuard<DB::PipelineExecutor::spawnThreads()::$_0::operator()() const::'lambda'()>::invoke()\r\n./build_docker/./base/base/../base/scope_guard.h:99\r\nBasicScopeGuard<DB::PipelineExecutor::spawnThreads()::$_0::operator()() const::'lambda'()>::~BasicScopeGuard()\r\n./build_docker/./base/base/../base/scope_guard.h:48\r\nDB::PipelineExecutor::spawnThreads()::$_0::operator()() const\r\n./build_docker/./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:381\r\ndecltype(std::declval<DB::PipelineExecutor::spawnThreads()::$_0&>()()) std::__1::__invoke[abi:v15000]<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\nvoid std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479\r\nstd::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>::operator()[abi:v15000]()\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:235\r\nvoid std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()> >(std::__1::__function::__policy_storage const*)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716\r\n0xc7bda84\r\nbool wide::integer<128ul, unsigned int>::_impl::operator_eq<wide::integer<128ul, unsigned int> >(wide::integer<128ul, unsigned int> const&, wide::integer<128ul, unsigned int> const&)\r\n./build_docker/./base/base/../base/wide_integer_impl.h:809\r\nbool wide::operator==<128ul, unsigned int, 128ul, unsigned int>(wide::integer<128ul, unsigned int> const&, wide::integer<128ul, unsigned int> const&)\r\n./build_docker/./base/base/../base/wide_integer_impl.h:1482\r\nStrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>::operator==(StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&) const\r\n./build_docker/./base/base/../base/strong_typedef.h:42\r\nDB::OpenTelemetry::Span::isTraceEnabled() const\r\n./build_docker/./src/Common/OpenTelemetryTraceContext.h:65\r\nThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>)\r\n./build_docker/./build_docker/./src/Common/ThreadPool.cpp:457\r\n0xc7c12dc\r\nThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()()\r\n./build_docker/./build_docker/./src/Common/ThreadPool.cpp:0\r\ndecltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\nvoid std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479\r\nstd::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>::operator()[abi:v15000]()\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:235\r\nvoid std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716\r\n0xc7c00d8\r\nbool wide::integer<128ul, unsigned int>::_impl::operator_eq<wide::integer<128ul, unsigned int> >(wide::integer<128ul, unsigned int> const&, wide::integer<128ul, unsigned int> const&)\r\n./build_docker/./base/base/../base/wide_integer_impl.h:809\r\nbool wide::operator==<128ul, unsigned int, 128ul, unsigned int>(wide::integer<128ul, unsigned int> const&, wide::integer<128ul, unsigned int> const&)\r\n./build_docker/./base/base/../base/wide_integer_impl.h:1482\r\nStrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>::operator==(StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&) const\r\n./build_docker/./base/base/../base/strong_typedef.h:42\r\nDB::OpenTelemetry::Span::isTraceEnabled() const\r\n./build_docker/./src/Common/OpenTelemetryTraceContext.h:65\r\nThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)\r\n./build_docker/./build_docker/./src/Common/ThreadPool.cpp:457\r\nvoid ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const\r\n./build_docker/./build_docker/./src/Common/ThreadPool.cpp:217\r\ndecltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)\r\n./build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\nvoid std::__1::__thread_execute[abi:v15000]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>)\r\n./build_docker/./contrib/llvm-project/libcxx/include/thread:284\r\nvoid* std::__1::__thread_proxy[abi:v15000]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()> >(void*)\r\n./build_docker/./contrib/llvm-project/libcxx/include/thread:295\r\n0x7f5b1e90bea7\r\n??\r\n??:0\r\n0x7f5b1e82ba2f\r\n??\r\n??:0\r\n\r\n```\nHi, @cpg314 !\ud83d\ude00 Thanks for reporting an issue! Can you please provide an example, of how you got this error?\nI've been trying to create a repro, but this is fairly difficult:\r\nThis works:\r\n`SELECT sum(dictHas(dict, position)) FROM source`\r\nThis segfaults\r\n`SELECT sum(dictHas(dict, position)) FROM other_big_table`\r\nProbably some points in `big_table` are triggering the segfault, but I have not been able to identify them. It doesn't segfault with the min/max points.\r\n\r\nDo you have an idea how I could easily find the offending point(s)? I could write something that performs binary search among the points until a segfault occurs, but the big tables has 100 million rows.\n> I've been trying to create a repro, but this is fairly difficult: This works: `SELECT sum(dictHas(dict, position)) FROM source` This segfaults `SELECT sum(dictHas(dict, position)) FROM other_big_table` Probably some points in `big_table` are triggering the segfault, but I have not been able to identify them. It doesn't segfault with the min/max points.\r\n> \r\n> Do you have an idea how I could easily find the offending point(s)? I could write something that performs binary search among the points until a segfault occurs, but the big tables has 100 million rows.\r\n\r\nJust in case, is it possible that some values simply didn't exist in your table? It'd be appreciated to give some hints(e.g. structure of dicts, data that causes segfaults etc) because now it's not clear what can go wrong here.\n>  It'd be appreciated to give some hints(e.g. structure of dicts, data that causes segfaults etc) because now it's not clear what can go wrong here.\r\n\r\nThe dict looks like this:\r\n```\r\nCREATE DICTIONARY dict\r\n(\r\n  ident String,\r\n  geom MultiPolygon\r\n)\r\nPRIMARY KEY geom\r\nSOURCE(TABLE 'source')\r\nLIFETIME(MIN 0 MAX 0)\r\nLAYOUT(POLYGON(STORE_POLYGON_KEY_COLUMN 1))\r\n```\r\nThe `source` table has the same fields.\r\n\r\nThe `big_table` like this:\r\n\r\n```\r\nCREATE TABLE IF NOT EXISTS big_table  (\r\n    name String,\r\n    position Point,\r\n)\r\nENGINE = ReplacingMergeTree()\r\nPRIMARY KEY name\r\n```\r\n\r\nNo segfault: `SELECT sum(dictHas(dict, position)) FROM source`\r\nSegfault: `SELECT sum(dictHas(dict, position)) FROM big_table`\r\n\r\nThe segfault seems to be triggered by a combination of certain polygons in the dictionary and certain points in the `big_table`. Indeed:\r\n- On many subsets of `big_table`, the query above does not segfault (`SELECT sum(dictHas(dict, position)) FROM (SELECT position from big_table LIMIT N`).\r\n- As mentioned in the first message, if I exclude some polygons (the ones with high longitudes) from the dictionary, then no segfault either. I made another dictionary with only these polygons, which also triggers the segfault.\r\n\r\nThe dictionary is very small (3MB), so I could share it privately. On the other hand, the other table is very large, so I would need to identify the offending points first.\r\n\r\n> Just in case, is it possible that some values simply didn't exist in your table?\r\n\r\nAll of the `position` in `big_table` are finite floating point, and summing them works fine.\r\n\r\nAlso there is no segfault with `POLYGON_SIMPLE`, so it has to be something with the polygon index.\nOk, with a bit of pain, I managed to find a single point that makes the server segfault with:\r\n`SELECT dictHas(dict,(174.84729269276494,-36.99524960275426))`\r\nI can share `dict` privately if that helps debugging.\n> Ok, with a bit of pain, I managed to find a single point that makes the server segfault with: `SELECT dictHas(dict,(174.84729269276494,-36.99524960275426))` I can share `dict` privately if that helps debugging.\r\n\r\nIt will definitely help. I have link to my telegram in my github account info: https://t.me/yarik_kk. We can discuss sharing there\nThanks, I have messaged you the reproduction data.",
  "created_at": "2024-01-12T23:48:59Z"
}