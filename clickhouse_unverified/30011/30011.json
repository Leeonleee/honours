{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 30011,
  "instance_id": "ClickHouse__ClickHouse-30011",
  "issue_numbers": [
    "30462",
    "27133",
    "21435"
  ],
  "base_commit": "ac66433650667f0d6a6cd0c515f6d5a8d3bc95d4",
  "patch": "diff --git a/PreLoad.cmake b/PreLoad.cmake\nindex 0a25a55e7bf0..51bae39603de 100644\n--- a/PreLoad.cmake\n+++ b/PreLoad.cmake\n@@ -18,3 +18,27 @@ if (NOT DEFINED ENV{CLION_IDE} AND NOT DEFINED ENV{XCODE_IDE})\n         set(CMAKE_GENERATOR \"Ninja\" CACHE INTERNAL \"\" FORCE)\n     endif ()\n endif()\n+\n+\n+# Default toolchain - this is needed to avoid dependency on OS files.\n+execute_process(COMMAND uname -s OUTPUT_VARIABLE OS)\n+execute_process(COMMAND uname -m OUTPUT_VARIABLE ARCH)\n+\n+if (OS MATCHES \"Linux\"\n+    AND NOT DEFINED CMAKE_TOOLCHAIN_FILE\n+    AND NOT UNBUNDLED\n+    AND NOT DISABLE_HERMETIC_BUILD\n+    AND ($ENV{CC} MATCHES \".*clang.*\" OR CMAKE_C_COMPILER MATCHES \".*clang.*\")\n+    AND (USE_STATIC_LIBRARIES OR NOT DEFINED USE_STATIC_LIBRARIES))\n+\n+    if (ARCH MATCHES \"amd64|x86_64\")\n+        set (CMAKE_TOOLCHAIN_FILE \"cmake/linux/toolchain-x86_64.cmake\" CACHE INTERNAL \"\" FORCE)\n+    elseif (ARCH MATCHES \"^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)\")\n+        set (CMAKE_TOOLCHAIN_FILE \"cmake/linux/toolchain-aarch64.cmake\" CACHE INTERNAL \"\" FORCE)\n+    elseif (ARCH MATCHES \"^(ppc64le.*|PPC64LE.*)\")\n+        set (CMAKE_TOOLCHAIN_FILE \"cmake/linux/toolchain-ppc64le.cmake\" CACHE INTERNAL \"\" FORCE)\n+    else ()\n+        message (FATAL_ERROR \"Unsupported architecture: ${ARCH}\")\n+    endif ()\n+\n+endif()\ndiff --git a/cmake/add_warning.cmake b/cmake/add_warning.cmake\nindex bc9642c9cc67..e7797fcc7a6c 100644\n--- a/cmake/add_warning.cmake\n+++ b/cmake/add_warning.cmake\n@@ -12,13 +12,13 @@ macro (add_warning flag)\n     if (SUPPORTS_CXXFLAG_${underscored_flag})\n         set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -W${flag}\")\n     else ()\n-        message (WARNING \"Flag -W${flag} is unsupported\")\n+        message (STATUS \"Flag -W${flag} is unsupported\")\n     endif ()\n \n     if (SUPPORTS_CFLAG_${underscored_flag})\n         set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -W${flag}\")\n     else ()\n-        message (WARNING \"Flag -W${flag} is unsupported\")\n+        message (STATUS \"Flag -W${flag} is unsupported\")\n     endif ()\n \n endmacro ()\n@@ -39,7 +39,7 @@ macro (target_add_warning target flag)\n     if (SUPPORTS_CXXFLAG_${underscored_flag})\n         target_compile_options (${target} PRIVATE \"-W${flag}\")\n     else ()\n-        message (WARNING \"Flag -W${flag} is unsupported\")\n+        message (STATUS \"Flag -W${flag} is unsupported\")\n     endif ()\n endmacro ()\n \ndiff --git a/cmake/linux/default_libs.cmake b/cmake/linux/default_libs.cmake\nindex 86fd7fddcff4..233749164184 100644\n--- a/cmake/linux/default_libs.cmake\n+++ b/cmake/linux/default_libs.cmake\n@@ -5,8 +5,12 @@ set (DEFAULT_LIBS \"-nodefaultlibs\")\n \n # We need builtins from Clang's RT even without libcxx - for ubsan+int128.\n # See https://bugs.llvm.org/show_bug.cgi?id=16404\n-if (COMPILER_CLANG AND NOT CMAKE_CROSSCOMPILING)\n-    execute_process (COMMAND ${CMAKE_CXX_COMPILER} --print-libgcc-file-name --rtlib=compiler-rt OUTPUT_VARIABLE BUILTINS_LIBRARY OUTPUT_STRIP_TRAILING_WHITESPACE)\n+if (COMPILER_CLANG)\n+    execute_process (COMMAND ${CMAKE_CXX_COMPILER} --target=${CMAKE_CXX_COMPILER_TARGET} --print-libgcc-file-name --rtlib=compiler-rt OUTPUT_VARIABLE BUILTINS_LIBRARY OUTPUT_STRIP_TRAILING_WHITESPACE)\n+\n+    if (NOT EXISTS \"${BUILTINS_LIBRARY}\")\n+        set (BUILTINS_LIBRARY \"-lgcc\")\n+    endif ()\n else ()\n     set (BUILTINS_LIBRARY \"-lgcc\")\n endif ()\ndiff --git a/contrib/krb5-cmake/CMakeLists.txt b/contrib/krb5-cmake/CMakeLists.txt\nindex d6c3c23b14e8..f7318a5bf8a0 100644\n--- a/contrib/krb5-cmake/CMakeLists.txt\n+++ b/contrib/krb5-cmake/CMakeLists.txt\n@@ -500,7 +500,6 @@ function(preprocess_et out_var)\n       COMMAND perl \"${KRB5_SOURCE_DIR}/util/et/compile_et\" -d \"${KRB5_SOURCE_DIR}/util/et\" ${in_f}\n       DEPENDS ${in_f} \"${KRB5_SOURCE_DIR}/util/et/compile_et\"\n       WORKING_DIRECTORY ${ET_PATH}\n-      COMMENT \"Creating preprocessed file ${F_C}\"\n       VERBATIM\n       )\n     list(APPEND result ${F_C})\n@@ -526,7 +525,6 @@ add_custom_command(\n add_custom_target(\n     ERROR_MAP_H\n     DEPENDS \"${KRB5_SOURCE_DIR}/lib/gssapi/krb5/error_map.h\"\n-    COMMENT \"generating error_map.h\"\n     VERBATIM\n )\n \n@@ -539,14 +537,12 @@ add_custom_command(\n add_custom_target(\n     ERRMAP_H\n     DEPENDS \"${KRB5_SOURCE_DIR}/lib/gssapi/generic/errmap.h\"\n-    COMMENT \"generating errmap.h\"\n     VERBATIM\n )\n \n add_custom_target(\n     KRB_5_H\n     DEPENDS \"${CMAKE_CURRENT_BINARY_DIR}/include/krb5/krb5.h\"\n-    COMMENT \"generating krb5.h\"\n     VERBATIM\n )\n \ndiff --git a/contrib/protobuf-cmake/CMakeLists.txt b/contrib/protobuf-cmake/CMakeLists.txt\nindex 82e212417acf..484524f4278e 100644\n--- a/contrib/protobuf-cmake/CMakeLists.txt\n+++ b/contrib/protobuf-cmake/CMakeLists.txt\n@@ -211,7 +211,9 @@ add_library(protobuf::libprotoc ALIAS libprotoc)\n \n set(protoc_files ${protobuf_source_dir}/src/google/protobuf/compiler/main.cc)\n \n-if (NOT CMAKE_CROSSCOMPILING)\n+if (CMAKE_HOST_SYSTEM_NAME STREQUAL CMAKE_SYSTEM_NAME\n+    AND CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL CMAKE_SYSTEM_PROCESSOR)\n+\n     add_executable(protoc ${protoc_files})\n     target_link_libraries(protoc libprotoc libprotobuf pthread)\n     add_executable(protobuf::protoc ALIAS protoc)\ndiff --git a/contrib/sysroot b/contrib/sysroot\nindex c04ba53ba661..4ef348b7f30f 160000\n--- a/contrib/sysroot\n+++ b/contrib/sysroot\n@@ -1,1 +1,1 @@\n-Subproject commit c04ba53ba661fda2cd8386c6c08ea81a253d901f\n+Subproject commit 4ef348b7f30f2ad5b02b266268b3c948e51ad457\ndiff --git a/src/Common/renameat2.cpp b/src/Common/renameat2.cpp\nindex 238268d36244..8ee9081af56c 100644\n--- a/src/Common/renameat2.cpp\n+++ b/src/Common/renameat2.cpp\n@@ -99,11 +99,16 @@ bool supportsRenameat2()\n     return supports;\n }\n \n+}\n+\n #else\n \n #define RENAME_NOREPLACE -1\n #define RENAME_EXCHANGE -1\n \n+namespace DB\n+{\n+\n static bool renameat2(const std::string &, const std::string &, int)\n {\n     return false;\n@@ -114,8 +119,13 @@ bool supportsRenameat2()\n     return false;\n }\n \n+}\n+\n #endif\n \n+namespace DB\n+{\n+\n static void renameNoReplaceFallback(const std::string & old_path, const std::string & new_path)\n {\n     /// NOTE it's unsafe\n",
  "test_patch": "diff --git a/docker/test/fasttest/run.sh b/docker/test/fasttest/run.sh\nindex 925ac6f797c2..10c896c15f21 100755\n--- a/docker/test/fasttest/run.sh\n+++ b/docker/test/fasttest/run.sh\n@@ -159,6 +159,7 @@ function clone_submodules\n         cd \"$FASTTEST_SOURCE\"\n \n         SUBMODULES_TO_UPDATE=(\n+            contrib/sysroot\n             contrib/magic_enum\n             contrib/abseil-cpp\n             contrib/boost\ndiff --git a/docker/test/pvs/Dockerfile b/docker/test/pvs/Dockerfile\nindex 77cbd9109227..5dc32ebcc228 100644\n--- a/docker/test/pvs/Dockerfile\n+++ b/docker/test/pvs/Dockerfile\n@@ -40,7 +40,7 @@ RUN set -x \\\n ENV CCACHE_DIR=/test_output/ccache\n \n CMD echo \"Running PVS version $PKG_VERSION\" && mkdir -p $CCACHE_DIR && cd /repo_folder && pvs-studio-analyzer credentials $LICENCE_NAME $LICENCE_KEY -o ./licence.lic  \\\n-    && cmake . -D\"ENABLE_EMBEDDED_COMPILER\"=OFF -D\"USE_INTERNAL_PROTOBUF_LIBRARY\"=OFF -D\"USE_INTERNAL_GRPC_LIBRARY\"=OFF -DCMAKE_C_COMPILER=clang-13 -DCMAKE_CXX_COMPILER=clang\\+\\+-13 \\\n+    && cmake . -D\"ENABLE_EMBEDDED_COMPILER\"=OFF -D\"DISABLE_HERMETIC_BUILD\"=ON -DCMAKE_C_COMPILER=clang-13 -DCMAKE_CXX_COMPILER=clang\\+\\+-13 \\\n     && ninja re2_st clickhouse_grpc_protos \\\n     && pvs-studio-analyzer analyze -o pvs-studio.log -e contrib -j 4 -l ./licence.lic; \\\n     cp /repo_folder/pvs-studio.log /test_output; \\\n",
  "problem_statement": "`__pthread_mutex_(lock|unlock)` are not exported in glibc 2.34\n**Operating system**\r\n\r\nopenSUSE Tumbleweed\r\nglibc 2.34\r\n\r\n**Cmake version**\r\n\r\ncmake 3.21.3\r\n\r\n**Ninja version**\r\n\r\nninja 1.10.2\r\n\r\n**Compiler name and version**\r\n\r\ngcc 11.2.1\r\n\r\n**Full cmake and/or ninja output**\r\n\r\n\r\n```\r\n[  436s] + /usr/bin/cmake /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/. -GNinja -DCMAKE_INSTALL_PREFIX:PATH=/usr -DINCLUDE_INSTALL_DIR:PATH=/usr/include -DLIB_INSTALL_DIR:PATH=/usr/lib64 -DSYSCONF_INSTALL_DIR:PATH=/etc -DSHARE_INSTALL_PREFIX:PATH=/usr/share -DCMAKE_INSTALL_LIBDIR:PATH=lib64 -DCMAKE_INSTALL_LIBEXECDIR=/usr/libexec -DCMAKE_BUILD_TYPE=RelWithDebInfo '-DCMAKE_C_FLAGS=-O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type  -g -DNDEBUG' '-DCMAKE_CXX_FLAGS=-O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type  -g -DNDEBUG' '-DCMAKE_Fortran_FLAGS=-O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type  -g -DNDEBUG' '-DCMAKE_EXE_LINKER_FLAGS= -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now' '-DCMAKE_MODULE_LINKER_FLAGS= -Wl,--as-needed' '-DCMAKE_SHARED_LINKER_FLAGS= -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now' -DLIB_SUFFIX=64 -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_STATIC_LIBS:BOOL=OFF -DCMAKE_COLOR_MAKEFILE:BOOL=OFF -DCMAKE_INSTALL_DO_STRIP:BOOL=OFF -DCMAKE_MODULES_INSTALL_DIR=/usr/lib64/cmake/clickhouse -DARCH_NATIVE:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_STATIC_LIBS:BOOL=ON -DCOMPILER_PIPE:BOOL=OFF -DDISABLE_CPU_OPTIMIZE:BOOL=ON -DENABLE_AVRO:BOOL=OFF -DENABLE_CCACHE:BOOL=OFF -DENABLE_EMBEDDED_COMPILER:BOOL=OFF -DENABLE_FASTOPS:BOOL=OFF -DENABLE_GRPC:BOOL=OFF -DENABLE_PARQUET:BOOL=OFF -DENABLE_ROCKSDB:BOOL=OFF -DENABLE_S3:BOOL=OFF -DENABLE_TESTS:BOOL=OFF -DGLIBC_COMPATIBILITY:BOOL=OFF -DPARALLEL_COMPILE_JOBS=6 -DPARALLEL_LINK_JOBS=1 -DUNBUNDLED:BOOL=ON -DUSE_INTERNAL_BOOST_LIBRARY:BOOL=OFF -DUSE_INTERNAL_CAPNP_LIBRARY:BOOL=OFF -DUSE_INTERNAL_CCTZ_LIBRARY:BOOL=ON -DUSE_INTERNAL_FARMHASH_LIBRARY:BOOL=ON -DUSE_INTERNAL_ICU_LIBRARY:BOOL=OFF -DUSE_INTERNAL_JEMALLOC_LIBRARY:BOOL=OFF -DUSE_INTERNAL_LIBCXX_LIBRARY:BOOL=OFF -DUSE_INTERNAL_LIBGSASL_LIBRARY:BOOL=OFF -DUSE_INTERNAL_LIBXML2_LIBRARY:BOOL=OFF -DUSE_INTERNAL_LLVM_LIBRARY:BOOL=OFF -DUSE_INTERNAL_MYSQL_LIBRARY:BOOL=OFF -DUSE_INTERNAL_ODBC_LIBRARY:BOOL=OFF -DUSE_INTERNAL_POCO_LIBRARY:BOOL=ON -DUSE_INTERNAL_RDKAFKA_LIBRARY:BOOL=OFF -DUSE_INTERNAL_RE2_LIBRARY:BOOL=OFF -DUSE_INTERNAL_SSL_LIBRARY:BOOL=OFF -DUSE_INTERNAL_ZLIB_LIBRARY:BOOL=OFF -DUSE_LIBCXX:BOOL=OFF -DUSE_SIMDJSON:BOOL=OFF -DWERROR:BOOL=OFF\r\n[  436s] -- The C compiler identification is GNU 11.2.1\r\n[  436s] -- The CXX compiler identification is GNU 11.2.1\r\n[  436s] -- Detecting C compiler ABI info\r\n[  436s] -- Detecting C compiler ABI info - done\r\n[  436s] -- Check for working C compiler: /var/lib/build/ccache/bin/cc - skipped\r\n[  436s] -- Detecting C compile features\r\n[  436s] -- Detecting C compile features - done\r\n[  436s] -- Detecting CXX compiler ABI info\r\n[  437s] -- Detecting CXX compiler ABI info - done\r\n[  437s] -- Check for working CXX compiler: /var/lib/build/ccache/bin/c++ - skipped\r\n[  437s] -- Detecting CXX compile features\r\n[  437s] -- Detecting CXX compile features - done\r\n[  437s] -- The ASM compiler identification is GNU\r\n[  437s] -- Found assembler: /var/lib/build/ccache/bin/cc\r\n[  437s] CMake Warning at cmake/tools.cmake:16 (message):\r\n[  437s]   GCC compiler is not officially supported for ClickHouse.  You should\r\n[  437s]   migrate to clang.\r\n[  437s] Call Stack (most recent call first):\r\n[  437s]   CMakeLists.txt:46 (include)\r\n[  437s] \r\n[  437s] \r\n[  437s] -- Using custom linker by name: gold\r\n[  437s] -- CMAKE_BUILD_TYPE: RelWithDebInfo\r\n[  437s] -- Using objcopy: /usr/bin/llvm-objcopy\r\n[  437s] -- Disabling compiler -pipe option (have only 30849 mb of memory)\r\n[  437s] -- Performing Test HAVE_SSE41\r\n[  437s] -- Performing Test HAVE_SSE41 - Success\r\n[  437s] -- Performing Test HAVE_SSE42\r\n[  437s] -- Performing Test HAVE_SSE42 - Success\r\n[  437s] -- Performing Test HAVE_SSSE3\r\n[  437s] -- Performing Test HAVE_SSSE3 - Success\r\n[  437s] -- Performing Test HAVE_AVX\r\n[  438s] -- Performing Test HAVE_AVX - Success\r\n[  438s] -- Performing Test HAVE_AVX2\r\n[  439s] -- Performing Test HAVE_AVX2 - Success\r\n[  439s] -- Performing Test HAVE_PCLMULQDQ\r\n[  439s] -- Performing Test HAVE_PCLMULQDQ - Success\r\n[  439s] -- Performing Test HAVE_POPCNT\r\n[  440s] -- Performing Test HAVE_POPCNT - Success\r\n[  440s] -- Default libraries: -nodefaultlibs -lgcc  -lc -lm -lrt -lpthread -ldl\r\n[  440s] -- Looking for pthread.h\r\n[  440s] -- Looking for pthread.h - found\r\n[  440s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD\r\n[  440s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success\r\n[  440s] -- Found Threads: TRUE  \r\n[  440s] -- Performing Test HAVE_WARNING_UNUSED_BUT_SET_VARIABLE\r\n[  440s] -- Performing Test HAVE_WARNING_UNUSED_BUT_SET_VARIABLE - Success\r\n[  440s] -- Performing Test HAVE_WARNING_MISSING_ATTRIBUTES\r\n[  440s] -- Performing Test HAVE_WARNING_MISSING_ATTRIBUTES - Success\r\n[  440s] -- Performing Test HAVE_WARNING_MAYBE_UNINITIALIZED\r\n[  440s] -- Performing Test HAVE_WARNING_MAYBE_UNINITIALIZED - Success\r\n[  440s] -- Performing Test HAVE_WARNING_REGISTER\r\n[  440s] -- Performing Test HAVE_WARNING_REGISTER - Success\r\n[  440s] -- Using libunwind: unwind\r\n[  440s] -- Using exception handler: unwind\r\n[  440s] -- Unit tests are disabled\r\n[  440s] -- Building for: Linux-5.14.11-1-default x86_64  ;\r\n[  440s]     USE_STATIC_LIBRARIES=ON\r\n[  440s]     MAKE_STATIC_LIBRARIES=ON\r\n[  440s]     SPLIT_SHARED=\r\n[  440s]     UNBUNDLED=ON\r\n[  440s]     CCACHE= \r\n[  440s] CMake Warning (dev) at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:438 (message):\r\n[  440s]   The package name passed to `find_package_handle_standard_args`\r\n[  440s]   (double_conversion) does not match the name of the calling package\r\n[  440s]   (double-conversion).  This can lead to problems in calling code that\r\n[  440s]   expects `find_package` result variables (e.g., `_FOUND`) to follow a\r\n[  440s]   certain pattern.\r\n[  440s] Call Stack (most recent call first):\r\n[  440s]   cmake/Modules/Finddouble-conversion.cmake:35 (find_package_handle_standard_args)\r\n[  440s]   cmake/contrib_finder.cmake:10 (find_package)\r\n[  440s]   CMakeLists.txt:501 (find_contrib_lib)\r\n[  440s] This warning is for project developers.  Use -Wno-dev to suppress it.\r\n[  440s] \r\n[  440s] -- Found double_conversion: /usr/lib64/libdouble-conversion.so  \r\n[  440s] -- Using double-conversion: /usr/include : /usr/lib64/libdouble-conversion.so\r\n[  441s] -- Could NOT find OpenSSL, try to set the path to OpenSSL root folder in the system variable OPENSSL_ROOT_DIR (missing: OPENSSL_CRYPTO_LIBRARY) (found version \"1.1.1l\")\r\n[  441s] -- Using ssl=1: /usr/include : /usr/lib64/libssl.so;/usr/lib64/libcrypto.so\r\n[  441s] -- Found the following ICU libraries:\r\n[  441s] --   i18n (required)\r\n[  441s] --   uc (required)\r\n[  441s] --   data (required)\r\n[  441s] -- Found ICU: /usr/include (found version \"69.1\") \r\n[  441s] -- Using icu=1: /usr/include : /usr/lib64/libicui18n.so;/usr/lib64/libicuuc.so;/usr/lib64/libicudata.so\r\n[  441s] -- Using xz (lzma): /usr/include : /usr/lib64/liblzma.so\r\n[  441s] -- Found ZLIB: /usr/lib64/libz.so (found version \"1.2.11\") \r\n[  441s] -- Using libz: /usr/include : /usr/lib64/libz.so\r\n[  441s] -- Using zstd: /usr/include : /usr/lib64/libzstd.so\r\n[  441s] -- Using sparsehash: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/sparsehash-c11\r\n[  441s] -- Using re2: /usr/include : /usr/lib64/libre2.so;  : /usr/lib64/libre2.so\r\n[  441s] -- Using krb5=1: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/krb5/src/include;/home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/build/contrib/krb5-cmake/include : krb5\r\n[  441s] -- Using libgsasl=1: /usr/include : /usr/lib64/libgsasl.so\r\n[  441s] -- Using cyrus-sasl: krb5=1: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/cyrus-sasl/include : sasl2\r\n[  441s] -- Using librdkafka=1: /usr/include : rdkafka_imp;/usr/lib64/libssl.so;/usr/lib64/libcrypto.so;/usr/lib64/libsasl2.so cppkafka\r\n[  441s] -- Using libuv: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/libuv : uv_a\r\n[  441s] -- Using AMQP-CPP=1: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/AMQP-CPP/include;/home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/libuv/include;/home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/AMQP-CPP : amqp-cpp;uv_a\r\n[  441s] -- Using capnp=1: /usr/lib64/libcapnpc.so;/usr/lib64/libcapnp.so;/usr/lib64/libkj.so\r\n[  441s] -- Using h3=1: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/h3/src/h3lib/include : h3\r\n[  441s] -- Found LibXml2: /usr/lib64/libxml2.so (found version \"2.9.12\") \r\n[  441s] -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so\r\n[  441s] -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found\r\n[  441s] -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so\r\n[  441s] -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found\r\n[  441s] -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so\r\n[  441s] -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found\r\n[  441s] -- Found LibLZMA: /usr/lib64/liblzma.so (found version \"5.2.5\") \r\n[  441s] -- Using libxml2: /usr/include/libxml2 : /usr/lib64/libxml2.so;/usr/lib64/liblzma.so\r\n[  441s] -- Using brotli=1: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/brotli/c/include : brotli\r\n[  441s] -- Found Protobuf: /usr/lib64/libprotobuf.so (found version \"3.17.3\") \r\n[  441s] -- Using protobuf=1: /usr/include : /usr/lib64/libprotobuf.so : /usr/bin/protoc : /usr/lib64/libprotoc.so\r\n[  441s] -- Using pdqsort: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/pdqsort\r\n[  441s] -- Using miniselect: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/miniselect/include\r\n[  441s] -- Using hdfs3=1: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/libhdfs3/include : hdfs3\r\n[  441s] -- Found CURL: /usr/lib64/libcurl.so (found version \"7.79.1\")  \r\n[  441s] -- Using curl: /usr/include : /usr/lib64/libcurl.so\r\n[  441s] -- Building without Parquet support\r\n[  441s] -- Using simdjson=OFF\r\n[  441s] -- Using rapidjson=1: /usr/include\r\n[  441s] -- Found odbc: /usr/lib64/libodbc.so\r\n[  441s] -- Using unixodbc\r\n[  441s] -- Using nanodbc: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/nanodbc/nanodbc : nanodbc\r\n[  441s] -- Using NuRaft=1: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/NuRaft/include : nuraft\r\n[  441s] -- Using msgpack=1: /usr/include\r\n[  441s] -- Using cassandra=1: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/cassandra/include/ : cassandra_static\r\n[  441s] -- Using stats=1 : /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/stats/include\r\n[  441s] -- Using gcem=1: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/contrib/gcem/include\r\n[  441s] -- Using datasketches=: DATASKETCHES_INCLUDE_DIR-NOTFOUND : DATASKETCHES_LIBRARY-NOTFOUND\r\n[  441s] -- Using cityhash:  : cityhash\r\n[  441s] -- Using farmhash:  : farmhash\r\n[  441s] -- Using mysqlclient=1: /usr/include/mysql : ; staticlib=/usr/lib64/libmysqlclient.so\r\n[  441s] -- compiler C   = /var/lib/build/ccache/bin/cc -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type  -g -DNDEBUG -fdiagnostics-color=always  -msse4.1 -msse4.2 -mpopcnt -fasynchronous-unwind-tables -falign-functions=32  -Wall  -O2 -g -DNDEBUG -O3  -fno-pie\r\n[  441s] -- compiler CXX = /var/lib/build/ccache/bin/c++ -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type  -g -DNDEBUG -fdiagnostics-color=always -fsized-deallocation  -msse4.1 -msse4.2 -mpopcnt -fasynchronous-unwind-tables -falign-functions=32   -Wall  -O2 -g -DNDEBUG -O3  -fno-pie\r\n[  441s] -- LINKER_FLAGS =  -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -fuse-ld=gold -rdynamic -Wl,--no-undefined -Wl,-no-pie \r\n[  442s] -- Found Boost: /usr/lib64/cmake/Boost-1.77.0/BoostConfig.cmake (found suitable version \"1.77.0\", minimum required is \"1.71\") found components: system filesystem iostreams program_options regex context coroutine \r\n[  442s] -- Packaging with tzdata version: 2020e\r\n[  442s] -- Using cctz\r\n[  442s] -- Using hyperscan\r\n[  442s] -- jemalloc malloc_conf: percpu_arena:percpu,oversize_threshold:0,muzzy_decay_ms:5000,dirty_decay_ms:5000\r\n[  442s] -- Using jemalloc\r\n[  442s] -- Using cpuid\r\n[  442s] -- Using replxx\r\n[  442s] -- Using Poco::Crypto\r\n[  442s] -- Using Poco::Data::ODBC\r\n[  442s] -- checking compiler: GCC (11.2.)\r\n[  442s] -- Looking for dladdr\r\n[  442s] -- Looking for dladdr - found\r\n[  442s] -- Looking for nanosleep\r\n[  442s] -- Looking for nanosleep - found\r\n[  442s] -- Checking whether strerror_r returns an int\r\n[  442s] -- Checking whether strerror_r returns an int -- no\r\n[  443s] -- libuv version: v1.34.1\r\n[  443s] -- Found Libuv: uv_a (found suitable version \"1.34.1\", minimum required is \"1.0.0\") \r\n[  443s] -- Found OpenSSL: /usr/lib64/libssl.so (found version \"1.1.1l\") \r\n[  443s] -- OpenSSL version: v1.1.1l\r\n[  443s] -- Could NOT find CLANG_FORMAT (missing: CLANG_FORMAT_EXE) \r\n[  443s] -- Unable to find clang-format. Not creating format targets.\r\n[  443s] -- Driver version: 2.15.3\r\n[  443s] -- Using std::atomic implementation for atomic operations\r\n[  443s] -- Checking to see if CXX compiler accepts flag -std=c++11\r\n[  444s] -- Checking to see if CXX compiler accepts flag -std=c++11 - yes\r\n[  445s] -- Using hash header <functional> and namespace \"std\"\r\n[  445s] -- Looking for inttypes.h\r\n[  445s] -- Looking for inttypes.h - found\r\n[  445s] -- Looking for stdint.h\r\n[  445s] -- Looking for stdint.h - found\r\n[  445s] -- Looking for sys/types.h\r\n[  445s] -- Looking for sys/types.h - found\r\n[  445s] -- Looking for memcpy\r\n[  445s] -- Looking for memcpy - found\r\n[  445s] -- Looking for stddef.h\r\n[  445s] -- Looking for stddef.h - found\r\n[  445s] -- Check size of long long\r\n[  445s] -- Check size of long long - done\r\n[  445s] -- Check size of uint16_t\r\n[  446s] -- Check size of uint16_t - done\r\n[  446s] -- Check size of u_int16_t\r\n[  446s] -- Check size of u_int16_t - done\r\n[  446s] -- Check size of __uint16_t\r\n[  446s] -- Check size of __uint16_t - done\r\n[  446s] -- Looking for GRND_NONBLOCK\r\n[  446s] -- Looking for GRND_NONBLOCK - found\r\n[  446s] -- Looking for SO_NOSIGPIPE\r\n[  446s] -- Looking for SO_NOSIGPIPE - not found\r\n[  446s] -- Looking for sigtimedwait\r\n[  446s] -- Looking for sigtimedwait - found\r\n[  446s] -- Performing Test HAVE_BUILTIN_BSWAP32\r\n[  447s] -- Performing Test HAVE_BUILTIN_BSWAP32 - Success\r\n[  447s] -- Performing Test HAVE_BUILTIN_BSWAP64\r\n[  447s] -- Performing Test HAVE_BUILTIN_BSWAP64 - Success\r\n[  447s] -- GCE-Math version 1.13.0\r\n[  447s] -- Performing Test SUPPORTS_CXXFLAG_frame_larger_than=65536\r\n[  447s] -- Performing Test SUPPORTS_CXXFLAG_frame_larger_than=65536 - Success\r\n[  447s] -- Performing Test SUPPORTS_CFLAG_frame_larger_than=65536\r\n[  447s] -- Performing Test SUPPORTS_CFLAG_frame_larger_than=65536 - Success\r\n[  447s] -- Performing Test HAS_SUGGEST_DESTRUCTOR_OVERRIDE\r\n[  447s] -- Performing Test HAS_SUGGEST_DESTRUCTOR_OVERRIDE - Failed\r\n[  447s] -- Performing Test HAS_SHADOW\r\n[  447s] -- Performing Test HAS_SHADOW - Success\r\n[  447s] -- Performing Test HAS_SUGGEST_OVERRIDE\r\n[  447s] -- Performing Test HAS_SUGGEST_OVERRIDE - Success\r\n[  447s] CMake Warning at base/mysqlxx/CMakeLists.txt:53 (message):\r\n[  447s]   Statically linking with system mysql/mariadb only works if mysql client\r\n[  447s]   libraries are built with same openssl version as we are going to use now.\r\n[  447s]   It wouldn't work if GnuTLS is used.  Try -D\"USE_INTERNAL_MYSQL_LIBRARY\"=ON\r\n[  447s]   or -D\"ENABLE_MYSQL\"=OFF or -D\"USE_STATIC_LIBRARIES\"=OFF\r\n[  447s] \r\n[  447s] \r\n[  448s] -- /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/src: Have 30816 megabytes of memory.\r\n[  448s]         Limiting concurrent linkers jobs to 1 and compiler jobs to 6\r\n[  448s] -- Will build ClickHouse 21.8.9.1 revision 54453 \r\n[  448s] CMake Warning at src/Functions/CMakeLists.txt:54 (message):\r\n[  448s]   Not generating debugger info for ClickHouse functions\r\n[  448s] \r\n[  448s] \r\n[  448s] -- ClickHouse modes:\r\n[  448s] -- Server mode: ON\r\n[  448s] -- Client mode: ON\r\n[  448s] -- Local mode: ON\r\n[  448s] -- Benchmark mode: ON\r\n[  448s] -- Extract from config mode: ON\r\n[  448s] -- Compressor mode: ON\r\n[  448s] -- Copier mode: ON\r\n[  448s] -- Format mode: ON\r\n[  448s] -- Obfuscator mode: ON\r\n[  448s] -- ODBC bridge mode: ON\r\n[  448s] -- Library bridge mode: ON\r\n[  448s] -- ClickHouse install: ON\r\n[  448s] -- ClickHouse git-import: ON\r\n[  448s] -- ClickHouse keeper mode: ON\r\n[  448s] -- ClickHouse keeper-converter mode: ON\r\n[  448s] -- bash_completion will be written to /usr/share/bash-completion/completions\r\n[  448s] -- Target check already exists\r\n[  448s] -- /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/utils: Have 30813 megabytes of memory.\r\n[  448s]         Limiting concurrent linkers jobs to 1 and compiler jobs to 6\r\n[  448s] -- Configuring done\r\n[  450s] -- Generating done\r\n[  450s] CMake Warning:\r\n[  450s]   Manually-specified variables were not used by the project:\r\n[  450s] \r\n[  450s]     BUILD_STATIC_LIBS\r\n[  450s]     CMAKE_COLOR_MAKEFILE\r\n[  450s]     CMAKE_Fortran_FLAGS\r\n[  450s]     CMAKE_INSTALL_DO_STRIP\r\n[  450s]     CMAKE_MODULES_INSTALL_DIR\r\n[  450s]     CMAKE_VERBOSE_MAKEFILE\r\n[  450s]     DISABLE_CPU_OPTIMIZE\r\n[  450s]     INCLUDE_INSTALL_DIR\r\n[  450s]     LIB_INSTALL_DIR\r\n[  450s]     LIB_SUFFIX\r\n[  450s]     SHARE_INSTALL_PREFIX\r\n[  450s]     SYSCONF_INSTALL_DIR\r\n[  450s]     USE_INTERNAL_JEMALLOC_LIBRARY\r\n[  450s] \r\n[  450s] \r\n[  450s] -- Build files have been written to: /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/build\r\n\r\n```\r\n\r\nskipped unrelated\r\n\r\n```\r\n[ 7546s] FAILED: programs/clickhouse-library-bridge \r\n[ 7546s] : && /var/lib/build/ccache/bin/c++ -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type  -g -DNDEBUG -fdiagnostics-color=always -fsized-deallocation  -msse4.1 -msse4.2 -mpopcnt -fasynchronous-unwind-tables -falign-functions=32   -Wall  -Wextra -Wframe-larger-than=65536 -O2 -g -DNDEBUG -O3  -fno-pie -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -fuse-ld=gold -rdynamic -Wl,--no-undefined -Wl,-no-pie -Wl,--no-export-dynamic   -rdynamic src/CMakeFiles/clickhouse_malloc.dir/Common/malloc.cpp.o programs/library-bridge/CMakeFiles/clickhouse-library-bridge.dir/library-bridge.cpp.o programs/library-bridge/CMakeFiles/clickhouse-library-bridge.dir/LibraryInterface.cpp.o programs/library-bridge/CMakeFiles/clickhouse-library-bridge.dir/LibraryBridge.cpp.o programs/library-bridge/CMakeFiles/clickhouse-library-bridge.dir/Handlers.cpp.o programs/library-bridge/CMakeFiles/clickhouse-library-bridge.dir/HandlerFactory.cpp.o programs/library-bridge/CMakeFiles/clickhouse-library-bridge.dir/SharedLibraryHandler.cpp.o programs/library-bridge/CMakeFiles/clickhouse-library-bridge.dir/SharedLibraryHandlerFactory.cpp.o -o programs/clickhouse-library-bridge  src/libclickhouse_new_delete.a  base/daemon/libdaemon.a  src/libdbms.a  base/bridge/libbridge.a  base/daemon/libdaemon.a  base/loggers/libloggers.a  src/libdbms.a  contrib/jemalloc-cmake/libjemalloc.a  src/Common/Config/libclickhouse_common_config.a  contrib/yaml-cpp-cmake/libyaml-cpp.a  contrib/cppkafka-cmake/libcppkafka.a  /usr/lib64/librdkafka.so  /usr/lib64/libsasl2.so  contrib/cyrus-sasl-cmake/libsasl2.a  contrib/nuraft-cmake/libnuraft.a  /usr/lib64/libboost_coroutine.so.1.77.0  /usr/lib64/libboost_chrono.so.1.77.0  /usr/lib64/libboost_thread.so.1.77.0  /usr/lib64/libboost_filesystem.so.1.77.0  /usr/lib64/libboost_atomic.so.1.77.0  src/Common/ZooKeeper/libclickhouse_common_zookeeper.a  src/Dictionaries/Embedded/libclickhouse_dictionaries_embedded.a  src/Parsers/libclickhouse_parsers.a  src/libclickhouse_common_io.a  /usr/lib64/libboost_program_options.so.1.77.0  base/widechar_width/libwidechar_width.a  /usr/lib64/libdouble-conversion.so  contrib/dragonbox-cmake/libdragonbox_to_chars.a  /usr/lib64/libre2.so  contrib/libcpuid-cmake/libcpuid.a  contrib/croaring-cmake/libroaring.a  contrib/brotli-cmake/libbrotli.a  /usr/lib64/liblz4.so  contrib/poco-cmake/MongoDB/lib_poco_mongodb.a  src/Common/StringUtils/libstring_utils.a  base/mysqlxx/libmysqlxx.a  base/common/libcommon.a  contrib/cityhash102/libcityhash.a  contrib/poco-cmake/Net/SSL/lib_poco_net_ssl.a  contrib/poco-cmake/Net/lib_poco_net.a  contrib/poco-cmake/Crypto/lib_poco_crypto.a  -lcrypto  contrib/poco-cmake/Util/lib_poco_util.a  contrib/poco-cmake/JSON/lib_poco_json.a  contrib/poco-cmake/JSON/lib_poco_json_pdjson.a  contrib/poco-cmake/XML/lib_poco_xml.a  contrib/poco-cmake/XML/lib_poco_xml_expat.a  contrib/replxx-cmake/libreplxx.a  contrib/cctz-cmake/libcctz.a  -Wl,--whole-archive /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/build/contrib/cctz-cmake/libtzdata.a -Wl,--no-whole-archive  contrib/fmtlib-cmake/libfmt.a  /usr/lib64/libmysqlclient.so  /usr/lib64/libboost_system.so.1.77.0  /usr/lib64/libzstd.so  /usr/lib64/libicui18n.so  /usr/lib64/libicuuc.so  /usr/lib64/libicudata.so  /usr/lib64/libcapnpc.so  /usr/lib64/libcapnp.so  /usr/lib64/libkj.so  contrib/libhdfs3-cmake/libhdfs3.a  contrib/krb5-cmake/libkrb5.a  /usr/lib64/libgsasl.so  /usr/lib64/libxml2.so  /usr/lib64/libprotobuf.so  /usr/lib64/liblzma.so  contrib/amqpcpp-cmake/libamqp-cpp.a  -lssl  libcassandra_static.a  /usr/lib64/libssl.so  /usr/lib64/libcrypto.so  contrib/libuv/libuv_a.a  -lpthread  -ldl  -lrt  /usr/lib64/libboost_context.so.1.77.0  contrib/poco-cmake/Data/ODBC/lib_poco_data_odbc.a  contrib/poco-cmake/Data/lib_poco_data.a  contrib/poco-cmake/Foundation/lib_poco_foundation.a  /usr/lib64/libz.so  contrib/poco-cmake/Foundation/lib_poco_foundation_pcre.a  -Wl,--start-group  -l:libstdc++.a  -l:libstdc++fs.a  contrib/libunwind-cmake/libunwind.a  -Wl,--end-group  /usr/lib64/libodbc.so  /usr/lib64/libltdl.a  -nodefaultlibs -lgcc  -lc -lm -lrt -lpthread -ldl && :\r\n[ 7546s] /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/src/Common/ThreadFuzzer.cpp:268: error: undefined reference to '__pthread_mutex_lock'\r\n[ 7546s] /home/abuild/rpmbuild/BUILD/clickhouse-21.8.8.29/src/Common/ThreadFuzzer.cpp:268: error: undefined reference to '__pthread_mutex_unlock'\r\n```\r\n\r\n\r\nUnfortunately, glibc 2.34 dropped `__pthread_mutex_lock` and `__pthread_mutex_unlock` from the public interface: https://sourceware.org/git/?p=glibc.git;a=commit;h=8ec022a037788cc540c5670b0c9b1aa137bfbf97\r\n\r\nMind double underscore prefix, regular `pthread_mutex_lock` and `pthread_mutex_unlock` are still there, but the ThreadFuzzer relies on the underscored symbols.\nGLIBC 2.32 / 2.33 / 2.34 compatibility\nIt would be nice if Clickhouse supported building in an enviornment with GLIBC 2.32+ like it supports older releases (pinning symbols).\r\n\r\nMy usecase is that I'm building in a new machine (Archlinux with GLIBC 2.33) and that works great until I want to run the integration tests, which run under an old Ubuntu (20.04) with 2.31-0ubuntu9.2 and that will fail when using the binary:\r\n\r\n```\r\nE               Exception: Timed out while waiting for instance `node1' with ip address 172.16.0.4 to start. Container status: running, logs: clickhouse: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32' not found (required by clickhouse)\r\nE               clickhouse: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.33' not found (required by clickhouse)\r\n```\r\n\r\nI see that @amosbird started working on it but ended up discarding the PR (https://github.com/ClickHouse/ClickHouse/pull/24015). I've tested it and it doesn't work for 2.33.\r\n\r\nAre there any plans to support this or should I look for a better way to run those tests locally?\nUnable to run integration tests if Ubuntu 20.10 host\nUbuntu 20.10 has glibc 2.32 and ClickHouse built in a plain way has two symbols marked GLIBC_2.32,\r\nnamely\r\n \r\n```\r\n ilejn@ilejn-Latitude-5400:~/projects/ClickHouse/build$ objdump -T ./programs/clickhouse | grep GLIBC_2.32\r\n 0000000000000000      DF *UND*  0000000000000000  GLIBC_2.32  pthread_sigmask\r\n 0000000000000000      DF *UND*  0000000000000000  GLIBC_2.32  pthread_getattr_np\r\n```\n",
  "hints_text": "\nStarting from 2.34 we will require a new __libc_main_start which is basically impossible. So we either need to ship a libc blob in submodule, or do static linking.\nYes, we need to provide full environment during build, similar to what we do with cross-compilation.\r\n\r\nThe option with static linking is also *possible* but quite hard, because we need to open and load .so for CatBoost dynamically.\r\n\nUbuntu 21.04 has glibc 2.33 and ClickHouse built in a plain way has number of symbols marked GLIBC_2.32 and GLIBC_2.33,\r\nnamely\r\n\r\n```\r\nobjdump -T ./build/programs/clickhouse | egrep \"GLIBC_2.32|GLIBC_2.33\"\r\n0000000000000000      DF *UND*\t0000000000000000  GLIBC_2.33  mknodat\r\n0000000000000000      DF *UND*\t0000000000000000  GLIBC_2.33  fstatat\r\n0000000000000000      DF *UND*\t0000000000000000  GLIBC_2.32  pthread_getattr_np\r\n0000000000000000      DF *UND*\t0000000000000000  GLIBC_2.32  pthread_sigmask\r\n0000000009884580      DF *UND*\t0000000000000000  GLIBC_2.33  lstat64\r\n0000000009883790      DF *UND*\t0000000000000000  GLIBC_2.33  stat\r\n0000000009883850      DF *UND*\t0000000000000000  GLIBC_2.33  fstat\r\n0000000009884550      DF *UND*\t0000000000000000  GLIBC_2.33  lstat\r\n0000000009884560      DF *UND*\t0000000000000000  GLIBC_2.33  stat64\r\n0000000009884570      DF *UND*\t0000000000000000  GLIBC_2.33  fstat64\r\n0000000009884590      DF *UND*\t0000000000000000  GLIBC_2.33  mknod\r\n```",
  "created_at": "2021-10-12T00:35:04Z"
}