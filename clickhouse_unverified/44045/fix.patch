diff --git a/src/Common/ProfileEvents.cpp b/src/Common/ProfileEvents.cpp
index e4e718e7ebc3..25ba56fa0465 100644
--- a/src/Common/ProfileEvents.cpp
+++ b/src/Common/ProfileEvents.cpp
@@ -531,6 +531,11 @@ void increment(Event event, Count amount)
     DB::CurrentThread::getProfileEvents().increment(event, amount);
 }
 
+void incrementNoTrace(Event event, Count amount)
+{
+    DB::CurrentThread::getProfileEvents().incrementNoTrace(event, amount);
+}
+
 void Counters::increment(Event event, Count amount)
 {
     Counters * current = this;
@@ -547,6 +552,16 @@ void Counters::increment(Event event, Count amount)
         DB::TraceSender::send(DB::TraceType::ProfileEvent, StackTrace(), {.event = event, .increment = amount});
 }
 
+void Counters::incrementNoTrace(Event event, Count amount)
+{
+    Counters * current = this;
+    do
+    {
+        current->counters[event].fetch_add(amount, std::memory_order_relaxed);
+        current = current->parent;
+    } while (current != nullptr);
+}
+
 CountersIncrement::CountersIncrement(Counters::Snapshot const & snapshot)
 {
     init();
diff --git a/src/Common/ProfileEvents.h b/src/Common/ProfileEvents.h
index 256a17cc0804..867b5b551c62 100644
--- a/src/Common/ProfileEvents.h
+++ b/src/Common/ProfileEvents.h
@@ -54,6 +54,7 @@ namespace ProfileEvents
         }
 
         void increment(Event event, Count amount = 1);
+        void incrementNoTrace(Event event, Count amount = 1);
 
         struct Snapshot
         {
@@ -105,6 +106,10 @@ namespace ProfileEvents
     /// Increment a counter for event. Thread-safe.
     void increment(Event event, Count amount = 1);
 
+    /// The same as above but ignores value of setting 'trace_profile_events'
+    /// and never sends profile event to trace log.
+    void incrementNoTrace(Event event, Count amount = 1);
+
     /// Get name of event by identifier. Returns statically allocated string.
     const char * getName(Event event);
 
diff --git a/src/Common/QueryProfiler.cpp b/src/Common/QueryProfiler.cpp
index 14a6a06088cd..e0a59405a62f 100644
--- a/src/Common/QueryProfiler.cpp
+++ b/src/Common/QueryProfiler.cpp
@@ -50,11 +50,11 @@ namespace
                 /// But pass with some frequency to avoid drop of all traces.
                 if (overrun_count > 0 && write_trace_iteration % (overrun_count + 1) == 0)
                 {
-                    ProfileEvents::increment(ProfileEvents::QueryProfilerSignalOverruns, overrun_count);
+                    ProfileEvents::incrementNoTrace(ProfileEvents::QueryProfilerSignalOverruns, overrun_count);
                 }
                 else
                 {
-                    ProfileEvents::increment(ProfileEvents::QueryProfilerSignalOverruns, std::max(0, overrun_count) + 1);
+                    ProfileEvents::incrementNoTrace(ProfileEvents::QueryProfilerSignalOverruns, std::max(0, overrun_count) + 1);
                     return;
                 }
             }
@@ -67,7 +67,7 @@ namespace
         const StackTrace stack_trace(signal_context);
 
         TraceSender::send(trace_type, stack_trace, {});
-        ProfileEvents::increment(ProfileEvents::QueryProfilerRuns);
+        ProfileEvents::incrementNoTrace(ProfileEvents::QueryProfilerRuns);
 
         errno = saved_errno;
     }
diff --git a/src/IO/WriteBufferFromFileDescriptorDiscardOnFailure.cpp b/src/IO/WriteBufferFromFileDescriptorDiscardOnFailure.cpp
index 3d9c70f03965..69be24f0fae8 100644
--- a/src/IO/WriteBufferFromFileDescriptorDiscardOnFailure.cpp
+++ b/src/IO/WriteBufferFromFileDescriptorDiscardOnFailure.cpp
@@ -17,7 +17,10 @@ void WriteBufferFromFileDescriptorDiscardOnFailure::nextImpl()
 
         if ((-1 == res || 0 == res) && errno != EINTR)
         {
-            ProfileEvents::increment(ProfileEvents::CannotWriteToWriteBufferDiscard);
+            /// Never send this profile event to trace log because it may cause another
+            /// write into the same fd and likely will trigger the same error
+            /// and will lead to infinite recursion.
+            ProfileEvents::incrementNoTrace(ProfileEvents::CannotWriteToWriteBufferDiscard);
             break;  /// Discard
         }
 
