diff --git a/src/Core/DecimalFunctions.h b/src/Core/DecimalFunctions.h
index 89fbe94bf487..36f1d79f8880 100644
--- a/src/Core/DecimalFunctions.h
+++ b/src/Core/DecimalFunctions.h
@@ -17,7 +17,6 @@ class DataTypeNumber;
 
 namespace ErrorCodes
 {
-    extern const int NOT_IMPLEMENTED;
     extern const int DECIMAL_OVERFLOW;
     extern const int ARGUMENT_OUT_OF_BOUND;
 }
@@ -312,16 +311,11 @@ ReturnType convertToImpl(const DecimalType & decimal, UInt32 scale, To & result)
     using DecimalNativeType = typename DecimalType::NativeType;
     static constexpr bool throw_exception = std::is_void_v<ReturnType>;
 
-    if constexpr (std::is_same_v<To, BFloat16>)
+    if constexpr (is_floating_point<To>)
     {
-        if constexpr (throw_exception)
-            throw Exception(ErrorCodes::NOT_IMPLEMENTED, "Conversion from Decimal to BFloat16 is not implemented");
-        else
-            return ReturnType(false);
-    }
-    else if constexpr (is_floating_point<To>)
-    {
-        result = static_cast<To>(decimal.value) / static_cast<To>(scaleMultiplier<DecimalNativeType>(scale));
+        /// Float64 is enough to accommodate the digits of the biggest decimal (with possible precision loss),
+        /// while Float32 is not enough, and it can overflow to infinity.
+        result = static_cast<To>(static_cast<Float64>(decimal.value) / static_cast<Float64>(scaleMultiplier<DecimalNativeType>(scale)));
     }
     else if constexpr (is_integer<To> && (sizeof(To) >= sizeof(DecimalNativeType)))
     {
diff --git a/src/Formats/NumpyDataTypes.h b/src/Formats/NumpyDataTypes.h
index fbb0a11c5593..25fd74fd22b8 100644
--- a/src/Formats/NumpyDataTypes.h
+++ b/src/Formats/NumpyDataTypes.h
@@ -1,9 +1,14 @@
 #pragma once
+
 #include <cstddef>
 #include <Storages/NamedCollectionsHelpers.h>
 #include <IO/WriteBufferFromString.h>
 #include <IO/WriteHelpers.h>
 
+
+namespace DB
+{
+
 namespace ErrorCodes
 {
     extern const int BAD_ARGUMENTS;
@@ -44,9 +49,9 @@ class NumpyDataType
     Endianness getEndianness() const { return endianness; }
 
     virtual NumpyDataTypeIndex getTypeIndex() const = 0;
-    virtual size_t getSize() const { throw DB::Exception(DB::ErrorCodes::NOT_IMPLEMENTED, "Function getSize is not implemented"); }
-    virtual void setSize(size_t) { throw DB::Exception(DB::ErrorCodes::NOT_IMPLEMENTED, "Function setSize is not implemented"); }
-    virtual String str() const { throw DB::Exception(DB::ErrorCodes::NOT_IMPLEMENTED, "Function str is not implemented"); }
+    virtual size_t getSize() const { throw Exception(ErrorCodes::NOT_IMPLEMENTED, "Function getSize is not implemented"); }
+    virtual void setSize(size_t) { throw Exception(ErrorCodes::NOT_IMPLEMENTED, "Function setSize is not implemented"); }
+    virtual String str() const { throw Exception(ErrorCodes::NOT_IMPLEMENTED, "Function str is not implemented"); }
 
 protected:
     Endianness endianness;
@@ -64,7 +69,7 @@ class NumpyDataTypeInt : public NumpyDataType
             case 4: type_index = is_signed ? NumpyDataTypeIndex::Int32 : NumpyDataTypeIndex::UInt32; break;
             case 8: type_index = is_signed ? NumpyDataTypeIndex::Int64 : NumpyDataTypeIndex::UInt64; break;
             default:
-                throw DB::Exception(DB::ErrorCodes::BAD_ARGUMENTS, "Incorrect int type with size {}", size);
+                throw Exception(ErrorCodes::BAD_ARGUMENTS, "Incorrect int type with size {}", size);
         }
     }
 
@@ -75,7 +80,7 @@ class NumpyDataTypeInt : public NumpyDataType
     bool isSigned() const { return is_signed; }
     String str() const override
     {
-        DB::WriteBufferFromOwnString buf;
+        WriteBufferFromOwnString buf;
         writeChar(static_cast<char>(endianness), buf);
         writeChar(is_signed ? 'i' : 'u', buf);
         writeIntText(size, buf);
@@ -98,7 +103,7 @@ class NumpyDataTypeFloat : public NumpyDataType
             case 4: type_index = NumpyDataTypeIndex::Float32; break;
             case 8: type_index = NumpyDataTypeIndex::Float64; break;
             default:
-                throw DB::Exception(DB::ErrorCodes::BAD_ARGUMENTS, "Numpy float type with size {} is not supported", size);
+                throw Exception(ErrorCodes::BAD_ARGUMENTS, "Numpy float type with size {} is not supported", size);
         }
     }
 
@@ -108,7 +113,7 @@ class NumpyDataTypeFloat : public NumpyDataType
     }
     String str() const override
     {
-        DB::WriteBufferFromOwnString buf;
+        WriteBufferFromOwnString buf;
         writeChar(static_cast<char>(endianness), buf);
         writeChar('f', buf);
         writeIntText(size, buf);
@@ -131,7 +136,7 @@ class NumpyDataTypeString : public NumpyDataType
     void setSize(size_t size_) override { size = size_; }
     String str() const override
     {
-        DB::WriteBufferFromOwnString buf;
+        WriteBufferFromOwnString buf;
         writeChar(static_cast<char>(endianness), buf);
         writeChar('S', buf);
         writeIntText(size, buf);
@@ -154,3 +159,5 @@ class NumpyDataTypeUnicode : public NumpyDataType
 private:
     size_t size;
 };
+
+}
diff --git a/src/Storages/VirtualColumnUtils.cpp b/src/Storages/VirtualColumnUtils.cpp
index 4e8575d4142f..367457b6694c 100644
--- a/src/Storages/VirtualColumnUtils.cpp
+++ b/src/Storages/VirtualColumnUtils.cpp
@@ -2,7 +2,6 @@
 #include <stack>
 
 #include <Storages/VirtualColumnUtils.h>
-#include "Formats/NumpyDataTypes.h"
 
 #include <Core/NamesAndTypes.h>
 #include <Core/TypeId.h>
