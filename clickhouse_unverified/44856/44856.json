{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44856,
  "instance_id": "ClickHouse__ClickHouse-44856",
  "issue_numbers": [
    "44831"
  ],
  "base_commit": "7d7de3833bf092c51f03b6d68022d8508962564b",
  "patch": "diff --git a/src/Common/HashTable/ClearableHashSet.h b/src/Common/HashTable/ClearableHashSet.h\nindex 371302dd8a9f..292f0e4059a3 100644\n--- a/src/Common/HashTable/ClearableHashSet.h\n+++ b/src/Common/HashTable/ClearableHashSet.h\n@@ -48,6 +48,30 @@ struct ClearableHashTableCell : public BaseCell\n     ClearableHashTableCell(const Key & key_, const State & state) : BaseCell(key_, state), version(state.version) {}\n };\n \n+using StringRefBaseCell = HashSetCellWithSavedHash<StringRef, DefaultHash<StringRef>, ClearableHashSetState>;\n+\n+/// specialization for StringRef to allow zero size key (empty string)\n+template <>\n+struct ClearableHashTableCell<StringRef, StringRefBaseCell> : public StringRefBaseCell\n+{\n+    using State = ClearableHashSetState;\n+    using value_type = typename StringRefBaseCell::value_type;\n+\n+    UInt32 version;\n+\n+    bool isZero(const State & state) const { return version != state.version; }\n+    static bool isZero(const StringRef & key_, const State & state_) { return StringRefBaseCell::isZero(key_, state_); }\n+\n+    /// Set the key value to zero.\n+    void setZero() { version = 0; }\n+\n+    /// Do I need to store the zero key separately (that is, can a zero key be inserted into the hash table).\n+    static constexpr bool need_zero_value_storage = true;\n+\n+    ClearableHashTableCell() { } //-V730 /// NOLINT\n+    ClearableHashTableCell(const StringRef & key_, const State & state) : StringRefBaseCell(key_, state), version(state.version) { }\n+};\n+\n template <\n     typename Key,\n     typename Hash = DefaultHash<Key>,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02515_distinct_zero_size_key_bug_44831.reference b/tests/queries/0_stateless/02515_distinct_zero_size_key_bug_44831.reference\nnew file mode 100644\nindex 000000000000..8908480c027d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02515_distinct_zero_size_key_bug_44831.reference\n@@ -0,0 +1,1 @@\n+\\N\t\ndiff --git a/tests/queries/0_stateless/02515_distinct_zero_size_key_bug_44831.sql b/tests/queries/0_stateless/02515_distinct_zero_size_key_bug_44831.sql\nnew file mode 100644\nindex 000000000000..96072b281db6\n--- /dev/null\n+++ b/tests/queries/0_stateless/02515_distinct_zero_size_key_bug_44831.sql\n@@ -0,0 +1,1 @@\n+SELECT DISTINCT NULL, if(number > 0, 't', '') AS res FROM numbers(1) ORDER BY res;\n",
  "problem_statement": "Failed assertion in Distinct-Sorted transform.\n**How to reproduce**\r\n```\r\n$ build_debug/programs/clickhouse local --query \"SELECT DISTINCT NULL, if(number > 0, 't', '') AS res FROM numbers(1) ORDER BY res\"\r\nclickhouse: /home/milovidov/work/ClickHouse/src/Common/HashTable/HashTableKeyHolder.h:92: void keyHolderPersistKey(DB::ArenaKeyHolder &): Assertion `holder.key.size > 0' failed.\r\n```\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/44824/6e946cc75779980b65804c70898beaee3d2e621e/fuzzer_astfuzzerdebug/report.html\r\n\r\nSee https://aretestsgreenyet.com/\n",
  "hints_text": "",
  "created_at": "2023-01-03T00:25:03Z"
}