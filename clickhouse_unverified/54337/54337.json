{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 54337,
  "instance_id": "ClickHouse__ClickHouse-54337",
  "issue_numbers": [
    "52757"
  ],
  "base_commit": "d891a7cad0b27519b1bd58b89cea6b6a50c7cb0e",
  "patch": "diff --git a/docs/en/sql-reference/statements/show.md b/docs/en/sql-reference/statements/show.md\nindex 1c399d2072b4..e94718394de3 100644\n--- a/docs/en/sql-reference/statements/show.md\n+++ b/docs/en/sql-reference/statements/show.md\n@@ -638,3 +638,16 @@ Outputs the content of the [system.table_engines](../../operations/system-tables\n **See Also**\n \n - [system.table_engines](../../operations/system-tables/table_engines.md) table\n+\n+## SHOW FUNCTIONS\n+\n+``` sql\n+SHOW FUNCTIONS [LIKE | ILIKE '<pattern>']\n+```\n+\n+Outputs the content of the [system.functions](../../operations/system-tables/functions.md) table.\n+\n+If either `LIKE` or `ILIKE` clause is specified, the query returns a list of system functions whose names match the provided `<pattern>`.\n+\n+**See Also**\n+- [system.functions](../../operations/system-tables/functions.md) table\ndiff --git a/src/Interpreters/InterpreterFactory.cpp b/src/Interpreters/InterpreterFactory.cpp\nindex 27c941197501..de3a3d68d396 100644\n--- a/src/Interpreters/InterpreterFactory.cpp\n+++ b/src/Interpreters/InterpreterFactory.cpp\n@@ -19,6 +19,7 @@\n #include <Parsers/ASTSelectWithUnionQuery.h>\n #include <Parsers/ASTSetQuery.h>\n #include <Parsers/ASTShowEngineQuery.h>\n+#include <Parsers/ASTShowFunctionsQuery.h>\n #include <Parsers/ASTShowProcesslistQuery.h>\n #include <Parsers/ASTShowTablesQuery.h>\n #include <Parsers/ASTShowColumnsQuery.h>\n@@ -80,6 +81,7 @@\n #include <Interpreters/InterpreterSetQuery.h>\n #include <Interpreters/InterpreterShowCreateQuery.h>\n #include <Interpreters/InterpreterShowEngineQuery.h>\n+#include <Interpreters/InterpreterShowFunctionsQuery.h>\n #include <Interpreters/InterpreterShowProcesslistQuery.h>\n #include <Interpreters/InterpreterShowTablesQuery.h>\n #include <Interpreters/InterpreterShowColumnsQuery.h>\n@@ -203,6 +205,10 @@ std::unique_ptr<IInterpreter> InterpreterFactory::get(ASTPtr & query, ContextMut\n     {\n         return std::make_unique<InterpreterShowEnginesQuery>(query, context);\n     }\n+    else if (query->as<ASTShowFunctionsQuery>())\n+    {\n+        return std::make_unique<InterpreterShowFunctionsQuery>(query, context);\n+    }\n     else if (query->as<ASTUseQuery>())\n     {\n         return std::make_unique<InterpreterUseQuery>(query, context);\ndiff --git a/src/Interpreters/InterpreterShowFunctionsQuery.cpp b/src/Interpreters/InterpreterShowFunctionsQuery.cpp\nnew file mode 100644\nindex 000000000000..efadb929451f\n--- /dev/null\n+++ b/src/Interpreters/InterpreterShowFunctionsQuery.cpp\n@@ -0,0 +1,46 @@\n+#include <Interpreters/InterpreterShowFunctionsQuery.h>\n+\n+#include <Interpreters/Context.h>\n+#include <Interpreters/DatabaseCatalog.h>\n+#include <Interpreters/executeQuery.h>\n+#include <Parsers/ASTShowFunctionsQuery.h>\n+\n+namespace DB\n+{\n+\n+InterpreterShowFunctionsQuery::InterpreterShowFunctionsQuery(const ASTPtr & query_ptr_, ContextMutablePtr context_)\n+    : WithMutableContext(context_), query_ptr(query_ptr_)\n+{\n+}\n+\n+BlockIO InterpreterShowFunctionsQuery::execute()\n+{\n+    return executeQuery(getRewrittenQuery(), getContext(), true);\n+}\n+\n+String InterpreterShowFunctionsQuery::getRewrittenQuery()\n+{\n+    constexpr const char * functions_table = \"functions\";\n+\n+    const auto & query = query_ptr->as<ASTShowFunctionsQuery &>();\n+\n+    DatabasePtr systemDb = DatabaseCatalog::instance().getSystemDatabase();\n+\n+    String rewritten_query = fmt::format(\n+        R\"(\n+SELECT *\n+FROM {}.{})\",\n+        systemDb->getDatabaseName(),\n+        functions_table);\n+\n+    if (!query.like.empty())\n+    {\n+        rewritten_query += \" WHERE name \";\n+        rewritten_query += query.case_insensitive_like ? \"ILIKE \" : \"LIKE \";\n+        rewritten_query += fmt::format(\"'{}'\", query.like);\n+    }\n+\n+    return rewritten_query;\n+}\n+\n+}\ndiff --git a/src/Interpreters/InterpreterShowFunctionsQuery.h b/src/Interpreters/InterpreterShowFunctionsQuery.h\nnew file mode 100644\nindex 000000000000..f15e1ae67b27\n--- /dev/null\n+++ b/src/Interpreters/InterpreterShowFunctionsQuery.h\n@@ -0,0 +1,27 @@\n+#pragma once\n+\n+#include <Interpreters/IInterpreter.h>\n+#include <Parsers/IAST_fwd.h>\n+\n+namespace DB\n+{\n+\n+class Context;\n+\n+class InterpreterShowFunctionsQuery : public IInterpreter, WithMutableContext\n+{\n+public:\n+    InterpreterShowFunctionsQuery(const ASTPtr & query_ptr_, ContextMutablePtr context_);\n+\n+    BlockIO execute() override;\n+\n+    bool ignoreQuota() const override { return true; }\n+    bool ignoreLimits() const override { return true; }\n+\n+private:\n+    ASTPtr query_ptr;\n+\n+    String getRewrittenQuery();\n+};\n+\n+}\ndiff --git a/src/Parsers/ASTShowFunctionsQuery.cpp b/src/Parsers/ASTShowFunctionsQuery.cpp\nnew file mode 100644\nindex 000000000000..9253dcf5cb27\n--- /dev/null\n+++ b/src/Parsers/ASTShowFunctionsQuery.cpp\n@@ -0,0 +1,25 @@\n+#include <Parsers/ASTShowFunctionsQuery.h>\n+\n+#include <Common/quoteString.h>\n+\n+namespace DB\n+{\n+\n+ASTPtr ASTShowFunctionsQuery::clone() const\n+{\n+    auto res = std::make_shared<ASTShowFunctionsQuery>(*this);\n+    res->children.clear();\n+    cloneOutputOptions(*res);\n+    return res;\n+}\n+\n+void ASTShowFunctionsQuery::formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const\n+{\n+    settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"SHOW FUNCTIONS\" << (settings.hilite ? hilite_none : \"\");\n+\n+    if (!like.empty())\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << (case_insensitive_like ? \" ILIKE \" : \" LIKE \")\n+                      << (settings.hilite ? hilite_none : \"\") << DB::quote << like;\n+}\n+\n+}\ndiff --git a/src/Parsers/ASTShowFunctionsQuery.h b/src/Parsers/ASTShowFunctionsQuery.h\nnew file mode 100644\nindex 000000000000..6993f939888e\n--- /dev/null\n+++ b/src/Parsers/ASTShowFunctionsQuery.h\n@@ -0,0 +1,23 @@\n+#pragma once\n+\n+#include <Parsers/ASTQueryWithOutput.h>\n+#include <Parsers/IAST_fwd.h>\n+\n+namespace DB\n+{\n+\n+class ASTShowFunctionsQuery : public ASTQueryWithOutput\n+{\n+public:\n+    bool case_insensitive_like = false;\n+    String like;\n+\n+    String getID(char) const override { return \"ShowFunctions\"; }\n+    ASTPtr clone() const override;\n+    QueryKind getQueryKind() const override { return QueryKind::Show; }\n+\n+protected:\n+    void formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override;\n+};\n+\n+}\ndiff --git a/src/Parsers/ParserQueryWithOutput.cpp b/src/Parsers/ParserQueryWithOutput.cpp\nindex a23914950715..9a71bc222b5e 100644\n--- a/src/Parsers/ParserQueryWithOutput.cpp\n+++ b/src/Parsers/ParserQueryWithOutput.cpp\n@@ -18,6 +18,7 @@\n #include <Parsers/ParserShowTablesQuery.h>\n #include <Parsers/ParserShowColumnsQuery.h>\n #include <Parsers/ParserShowEngineQuery.h>\n+#include <Parsers/ParserShowFunctionsQuery.h>\n #include <Parsers/ParserShowIndexesQuery.h>\n #include <Parsers/ParserTablePropertiesQuery.h>\n #include <Parsers/ParserWatchQuery.h>\n@@ -40,6 +41,7 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n     ParserShowTablesQuery show_tables_p;\n     ParserShowColumnsQuery show_columns_p;\n     ParserShowEnginesQuery show_engine_p;\n+    ParserShowFunctionsQuery show_functions_p;\n     ParserShowIndexesQuery show_indexes_p;\n     ParserSelectWithUnionQuery select_p;\n     ParserTablePropertiesQuery table_p;\n@@ -71,6 +73,7 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n         || show_tables_p.parse(pos, query, expected)\n         || show_columns_p.parse(pos, query, expected)\n         || show_engine_p.parse(pos, query, expected)\n+        || show_functions_p.parse(pos, query, expected)\n         || show_indexes_p.parse(pos, query, expected)\n         || table_p.parse(pos, query, expected)\n         || describe_cache_p.parse(pos, query, expected)\ndiff --git a/src/Parsers/ParserShowFunctionsQuery.cpp b/src/Parsers/ParserShowFunctionsQuery.cpp\nnew file mode 100644\nindex 000000000000..524d936c4f1d\n--- /dev/null\n+++ b/src/Parsers/ParserShowFunctionsQuery.cpp\n@@ -0,0 +1,35 @@\n+#include <Parsers/ParserShowFunctionsQuery.h>\n+\n+#include <Parsers/ASTLiteral.h>\n+#include <Parsers/ASTShowFunctionsQuery.h>\n+#include <Parsers/CommonParsers.h>\n+#include <Parsers/ExpressionElementParsers.h>\n+\n+namespace DB\n+{\n+\n+bool ParserShowFunctionsQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n+{\n+    ASTPtr like;\n+\n+    auto query = std::make_shared<ASTShowFunctionsQuery>();\n+    if (!ParserKeyword(\"SHOW FUNCTIONS\").ignore(pos, expected))\n+        return false;\n+\n+    if (bool insensitive = ParserKeyword(\"ILIKE\").ignore(pos, expected); insensitive || ParserKeyword(\"LIKE\").ignore(pos, expected))\n+    {\n+        if (insensitive)\n+            query->case_insensitive_like = true;\n+\n+        if (!ParserStringLiteral().parse(pos, like, expected))\n+            return false;\n+    }\n+\n+    if (like)\n+        query->like = like->as<ASTLiteral &>().value.safeGet<const String &>();\n+    node = query;\n+\n+    return true;\n+}\n+\n+}\ndiff --git a/src/Parsers/ParserShowFunctionsQuery.h b/src/Parsers/ParserShowFunctionsQuery.h\nnew file mode 100644\nindex 000000000000..25241d180db1\n--- /dev/null\n+++ b/src/Parsers/ParserShowFunctionsQuery.h\n@@ -0,0 +1,19 @@\n+#pragma once\n+\n+#include <Parsers/IParserBase.h>\n+\n+namespace DB\n+{\n+\n+/** Parses queries of the form\n+ * SHOW FUNCTIONS [LIKE | ILIKE '<pattern>']\n+ */\n+class ParserShowFunctionsQuery : public IParserBase\n+{\n+protected:\n+    const char * getName() const override { return \"SHOW FUNCTIONS query\"; }\n+\n+    bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override;\n+};\n+\n+}\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00419_show_sql_queries.sh b/tests/queries/0_stateless/00419_show_sql_queries.sh\nindex 607703b385a7..99252eeb1baf 100755\n--- a/tests/queries/0_stateless/00419_show_sql_queries.sh\n+++ b/tests/queries/0_stateless/00419_show_sql_queries.sh\n@@ -8,3 +8,4 @@ $CLICKHOUSE_CLIENT -q \"SHOW PROCESSLIST\" &>/dev/null\n $CLICKHOUSE_CLIENT -q \"SHOW DATABASES\" &>/dev/null\n $CLICKHOUSE_CLIENT -q \"SHOW TABLES\" &>/dev/null\n $CLICKHOUSE_CLIENT -q \"SHOW ENGINES\" &>/dev/null\n+$CLICKHOUSE_CLIENT -q \"SHOW FUNCTIONS\" &>/dev/null\ndiff --git a/tests/queries/0_stateless/02875_show_functions.reference b/tests/queries/0_stateless/02875_show_functions.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02875_show_functions.sh b/tests/queries/0_stateless/02875_show_functions.sh\nnew file mode 100755\nindex 000000000000..6f8da63ca9ef\n--- /dev/null\n+++ b/tests/queries/0_stateless/02875_show_functions.sh\n@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+diff -q <($CLICKHOUSE_CLIENT -q \"SELECT * from system.functions\") \\\n+        <($CLICKHOUSE_CLIENT -q \"SHOW FUNCTIONS\")\n+\n+diff -q <($CLICKHOUSE_CLIENT -q \"SELECT * FROM system.functions WHERE name ILIKE 'quantile%'\") \\\n+        <($CLICKHOUSE_CLIENT -q \"SHOW FUNCTIONS ILIKE 'quantile%'\")\n+\n+diff -q <($CLICKHOUSE_CLIENT -q \"SELECT * FROM system.functions WHERE name LIKE 'median%'\") \\\n+\t<($CLICKHOUSE_CLIENT -q \"SHOW FUNCTIONS LIKE 'median%'\")\n",
  "problem_statement": "SHOW FUNCTIONS and SHOW FUNCTIONS LIKE\n**Use case**\r\n\r\nQuickly type it in clickhouse-client.\r\n\r\n**Additional context**\r\n\r\nIt could be identical to:\r\n`SELECT * FROM system.functions` and `SELECT * FROM system.functions WHERE name LIKE '...'`\r\nbut please also take a look at how it works in MySQL, Postgres, and SQLite.\n",
  "hints_text": "Could you let me try this?\nYes, please.\n@lingtaolf @alexey-milovidov \r\nSorry, but this task is already booked. ",
  "created_at": "2023-09-06T01:23:55Z"
}