{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 82818,
  "instance_id": "ClickHouse__ClickHouse-82818",
  "issue_numbers": [
    "82817"
  ],
  "base_commit": "b5bfd1d4ab2b6d73f8040be0759a40bf2a8bc83b",
  "patch": "diff --git a/src/Functions/FunctionBinaryArithmetic.h b/src/Functions/FunctionBinaryArithmetic.h\nindex 5c1712f620bd..a30d93aa6c25 100644\n--- a/src/Functions/FunctionBinaryArithmetic.h\n+++ b/src/Functions/FunctionBinaryArithmetic.h\n@@ -1783,7 +1783,7 @@ class FunctionBinaryArithmetic : public IFunction\n                     isIPv4(arguments[1]) ? std::make_shared<DataTypeUInt32>() : arguments[1],\n             };\n \n-            return getReturnTypeImplStatic(new_arguments, context);\n+            return getReturnTypeImplStatic2(new_arguments, context);\n         }\n \n         /// Special case - one or both arguments are IPv6\n@@ -1794,7 +1794,7 @@ class FunctionBinaryArithmetic : public IFunction\n                     isIPv6(arguments[1]) ? std::make_shared<DataTypeUInt128>() : arguments[1],\n             };\n \n-            return getReturnTypeImplStatic(new_arguments, context);\n+            return getReturnTypeImplStatic2(new_arguments, context);\n         }\n \n \n@@ -1864,6 +1864,11 @@ class FunctionBinaryArithmetic : public IFunction\n             }\n         }\n \n+        return getReturnTypeImplStatic2(arguments, context);\n+    }\n+\n+    static DataTypePtr getReturnTypeImplStatic2(const DataTypes & arguments, ContextPtr context)\n+    {\n         /// Special case when the function is plus or minus, one of arguments is Date/DateTime/String and another is Interval.\n         if (auto function_builder = getFunctionForIntervalArithmetic(arguments[0], arguments[1], context))\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03549_aggregate_arithmetic_logical_error.reference b/tests/queries/0_stateless/03549_aggregate_arithmetic_logical_error.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03549_aggregate_arithmetic_logical_error.sql b/tests/queries/0_stateless/03549_aggregate_arithmetic_logical_error.sql\nnew file mode 100644\nindex 000000000000..3ece5aec53c5\n--- /dev/null\n+++ b/tests/queries/0_stateless/03549_aggregate_arithmetic_logical_error.sql\n@@ -0,0 +1,6 @@\n+SELECT sumMerge(initializeAggregation('sumState', 1) * CAST('1.1.1.1', 'IPv4')); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+\n+DROP TABLE IF EXISTS t;\n+CREATE TABLE t (a IPv4, b BFloat16) ENGINE = Memory;\n+SELECT sumMerge(y * a) FROM (SELECT a, sumState(b) AS y FROM t GROUP BY a); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+DROP TABLE t;\n",
  "problem_statement": "Logical error: Arguments of 'multiply' have incorrect data types, ... AggregateFunction\n### Describe the bug\n\n```\nSELECT sumMerge(initializeAggregation('sumState', 1) * CAST('1.1.1.1', 'IPv4'))\n\nQuery id: e268e4fd-98d2-4503-ace2-e18dd0f58739\n\n\nElapsed: 0.029 sec. \n\nReceived exception:\nCode: 49. DB::Exception: Arguments of 'multiply' have incorrect data types: 'initializeAggregation('sumState', 1)' of type 'AggregateFunction(sum, UInt8)', 'CAST('1.1.1.1', 'IPv4')' of type 'UInt32': In scope SELECT sumMerge(initializeAggregation('sumState', 1) * CAST('1.1.1.1', 'IPv4')). (LOGICAL_ERROR)\n```\n\n### How to reproduce\n\n^\n\n### Error message and/or stacktrace\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-06-29T02:55:12Z",
  "modified_files": [
    "src/Functions/FunctionBinaryArithmetic.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03549_aggregate_arithmetic_logical_error.sql"
  ]
}