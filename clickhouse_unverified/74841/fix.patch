diff --git a/src/Functions/hasColumnInTable.cpp b/src/Functions/hasColumnInTable.cpp
index cc496270b018..8f1d9f5b9123 100644
--- a/src/Functions/hasColumnInTable.cpp
+++ b/src/Functions/hasColumnInTable.cpp
@@ -115,6 +115,7 @@ ColumnPtr FunctionHasColumnInTable::executeImpl(const ColumnsWithTypeAndName & a
         throw Exception(ErrorCodes::UNKNOWN_TABLE, "Table name is empty");
 
     bool has_column;
+    bool has_alias_column;
     if (host_name.empty())
     {
         // FIXME this (probably) needs a non-constant access to query context,
@@ -125,6 +126,7 @@ ColumnPtr FunctionHasColumnInTable::executeImpl(const ColumnsWithTypeAndName & a
             const_pointer_cast<Context>(getContext()));
         auto table_metadata = table->getInMemoryMetadataPtr();
         has_column = table_metadata->getColumns().hasPhysical(column_name);
+        has_alias_column = table_metadata->getColumns().hasAlias(column_name);
     }
     else
     {
@@ -153,9 +155,10 @@ ColumnPtr FunctionHasColumnInTable::executeImpl(const ColumnsWithTypeAndName & a
             const_pointer_cast<Context>(getContext()));
 
         has_column = remote_columns.hasPhysical(column_name);
+        has_alias_column = remote_columns.hasAlias(column_name);
     }
 
-    return DataTypeUInt8().createColumnConst(input_rows_count, Field{static_cast<UInt64>(has_column)});
+    return DataTypeUInt8().createColumnConst(input_rows_count, Field{static_cast<UInt64>(has_column || has_alias_column)});
 }
 
 }
