{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 74841,
  "instance_id": "ClickHouse__ClickHouse-74841",
  "issue_numbers": [
    "74829"
  ],
  "base_commit": "8773a5b04f3e13092c0d721a819c0922b7556573",
  "patch": "diff --git a/src/Functions/hasColumnInTable.cpp b/src/Functions/hasColumnInTable.cpp\nindex cc496270b018..8f1d9f5b9123 100644\n--- a/src/Functions/hasColumnInTable.cpp\n+++ b/src/Functions/hasColumnInTable.cpp\n@@ -115,6 +115,7 @@ ColumnPtr FunctionHasColumnInTable::executeImpl(const ColumnsWithTypeAndName & a\n         throw Exception(ErrorCodes::UNKNOWN_TABLE, \"Table name is empty\");\n \n     bool has_column;\n+    bool has_alias_column;\n     if (host_name.empty())\n     {\n         // FIXME this (probably) needs a non-constant access to query context,\n@@ -125,6 +126,7 @@ ColumnPtr FunctionHasColumnInTable::executeImpl(const ColumnsWithTypeAndName & a\n             const_pointer_cast<Context>(getContext()));\n         auto table_metadata = table->getInMemoryMetadataPtr();\n         has_column = table_metadata->getColumns().hasPhysical(column_name);\n+        has_alias_column = table_metadata->getColumns().hasAlias(column_name);\n     }\n     else\n     {\n@@ -153,9 +155,10 @@ ColumnPtr FunctionHasColumnInTable::executeImpl(const ColumnsWithTypeAndName & a\n             const_pointer_cast<Context>(getContext()));\n \n         has_column = remote_columns.hasPhysical(column_name);\n+        has_alias_column = remote_columns.hasAlias(column_name);\n     }\n \n-    return DataTypeUInt8().createColumnConst(input_rows_count, Field{static_cast<UInt64>(has_column)});\n+    return DataTypeUInt8().createColumnConst(input_rows_count, Field{static_cast<UInt64>(has_column || has_alias_column)});\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03314_has_column_in_table_alias_column.reference b/tests/queries/0_stateless/03314_has_column_in_table_alias_column.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_has_column_in_table_alias_column.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/03314_has_column_in_table_alias_column.sql b/tests/queries/0_stateless/03314_has_column_in_table_alias_column.sql\nnew file mode 100644\nindex 000000000000..f85f0038cf6d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_has_column_in_table_alias_column.sql\n@@ -0,0 +1,4 @@\n+DROP TABLE IF EXISTS test;\n+CREATE TABLE test(`a` String, `alias_col_a` String ALIAS a) ENGINE = MergeTree ORDER BY a;\n+SELECT hasColumnInTable(currentDatabase(), 'test', 'alias_col_a');\n+DROP TABLE test;\n",
  "problem_statement": "the `hasColumnInTable` function does not recognize alias columns\n### Company or project name\n\n_No response_\n\n### Describe what's wrong\n\n\nWhen `hasColumnInTable` is used with an alias column, it returns 0.\n\nReproducer: https://fiddle.clickhouse.com/006e3f56-d2a5-4484-8fc8-60b7878a7a56.\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\nReproducer: https://fiddle.clickhouse.com/006e3f56-d2a5-4484-8fc8-60b7878a7a56.\n\n\n### Expected behavior\n\n_No response_\n\n### Error message and/or stacktrace\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-01-20T21:22:46Z"
}