diff --git a/docs/en/engines/table-engines/integrations/s3.md b/docs/en/engines/table-engines/integrations/s3.md
index 2675c193519a..20ee4823c1c6 100644
--- a/docs/en/engines/table-engines/integrations/s3.md
+++ b/docs/en/engines/table-engines/integrations/s3.md
@@ -290,6 +290,7 @@ The following settings can be specified in configuration file for given endpoint
 - `expiration_window_seconds` — Grace period for checking if expiration-based credentials have expired. Optional, default value is `120`.
 - `no_sign_request` - Ignore all the credentials so requests are not signed. Useful for accessing public buckets.
 - `header` —  Adds specified HTTP header to a request to given endpoint. Optional, can be specified multiple times.
+- `access_header` - Adds specified HTTP header to a request to given endpoint, in cases where there are no other credentials from another source.
 - `server_side_encryption_customer_key_base64` — If specified, required headers for accessing S3 objects with SSE-C encryption will be set. Optional.
 - `server_side_encryption_kms_key_id` - If specified, required headers for accessing S3 objects with [SSE-KMS encryption](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html) will be set. If an empty string is specified, the AWS managed S3 key will be used. Optional.
 - `server_side_encryption_kms_encryption_context` - If specified alongside `server_side_encryption_kms_key_id`, the given encryption context header for SSE-KMS will be set. Optional.
diff --git a/docs/ru/engines/table-engines/integrations/s3.md b/docs/ru/engines/table-engines/integrations/s3.md
index a1c69df4d0ab..2bab78c0612b 100644
--- a/docs/ru/engines/table-engines/integrations/s3.md
+++ b/docs/ru/engines/table-engines/integrations/s3.md
@@ -138,6 +138,7 @@ CREATE TABLE table_with_asterisk (name String, value UInt32)
 -   `use_insecure_imds_request` — признак использования менее безопасного соединения при выполнении запроса к IMDS при получении учётных данных из метаданных Amazon EC2. Значение по умолчанию — `false`.
 -   `region` — название региона S3.
 -   `header` — добавляет указанный HTTP-заголовок к запросу на заданную точку приема запроса. Может быть определен несколько раз.
+-   `access_header` - добавляет указанный HTTP-заголовок к запросу на заданную точку приема запроса, в случая если не указаны другие способы авторизации.
 -   `server_side_encryption_customer_key_base64` — устанавливает необходимые заголовки для доступа к объектам S3 с шифрованием SSE-C.
 -   `single_read_retries` — Максимальное количество попыток запроса при единичном чтении. Значение по умолчанию — `4`.
 
diff --git a/src/Disks/ObjectStorages/S3/diskSettings.cpp b/src/Disks/ObjectStorages/S3/diskSettings.cpp
index 1ae3730e4c71..92be835560b8 100644
--- a/src/Disks/ObjectStorages/S3/diskSettings.cpp
+++ b/src/Disks/ObjectStorages/S3/diskSettings.cpp
@@ -177,7 +177,7 @@ std::unique_ptr<S3::Client> getClient(
         auth_settings[S3AuthSetting::secret_access_key],
         auth_settings[S3AuthSetting::server_side_encryption_customer_key_base64],
         auth_settings.server_side_encryption_kms_config,
-        auth_settings.headers,
+        auth_settings.getHeaders(),
         credentials_configuration,
         auth_settings[S3AuthSetting::session_token]);
 }
diff --git a/src/IO/S3AuthSettings.cpp b/src/IO/S3AuthSettings.cpp
index 799dc6692fa7..5d7d4678977e 100644
--- a/src/IO/S3AuthSettings.cpp
+++ b/src/IO/S3AuthSettings.cpp
@@ -105,7 +105,9 @@ S3AuthSettings::S3AuthSettings(
         }
     }
 
-    headers = getHTTPHeaders(config_prefix, config);
+    headers = getHTTPHeaders(config_prefix, config, "header");
+    access_headers = getHTTPHeaders(config_prefix, config, "access_header");
+
     server_side_encryption_kms_config = getSSEKMSConfig(config_prefix, config);
 
     Poco::Util::AbstractConfiguration::Keys keys;
@@ -119,6 +121,7 @@ S3AuthSettings::S3AuthSettings(
 
 S3AuthSettings::S3AuthSettings(const S3AuthSettings & settings)
     : headers(settings.headers)
+    , access_headers(settings.access_headers)
     , users(settings.users)
     , server_side_encryption_kms_config(settings.server_side_encryption_kms_config)
     , impl(std::make_unique<S3AuthSettingsImpl>(*settings.impl))
@@ -127,6 +130,7 @@ S3AuthSettings::S3AuthSettings(const S3AuthSettings & settings)
 
 S3AuthSettings::S3AuthSettings(S3AuthSettings && settings) noexcept
     : headers(std::move(settings.headers))
+    , access_headers(std::move(settings.access_headers))
     , users(std::move(settings.users))
     , server_side_encryption_kms_config(std::move(settings.server_side_encryption_kms_config))
     , impl(std::make_unique<S3AuthSettingsImpl>(std::move(*settings.impl)))
@@ -145,6 +149,7 @@ S3AUTH_SETTINGS_SUPPORTED_TYPES(S3AuthSettings, IMPLEMENT_SETTING_SUBSCRIPT_OPER
 S3AuthSettings & S3AuthSettings::operator=(S3AuthSettings && settings) noexcept
 {
     headers = std::move(settings.headers);
+    access_headers = std::move(settings.access_headers);
     users = std::move(settings.users);
     server_side_encryption_kms_config = std::move(settings.server_side_encryption_kms_config);
     *impl = std::move(*settings.impl);
@@ -157,6 +162,9 @@ bool S3AuthSettings::operator==(const S3AuthSettings & right)
     if (headers != right.headers)
         return false;
 
+    if (access_headers != right.access_headers)
+        return false;
+
     if (users != right.users)
         return false;
 
@@ -196,6 +204,9 @@ void S3AuthSettings::updateIfChanged(const S3AuthSettings & settings)
     if (!settings.headers.empty())
         headers = settings.headers;
 
+    if (!settings.access_headers.empty())
+        access_headers = settings.access_headers;
+
     if (!settings.users.empty())
         users.insert(settings.users.begin(), settings.users.end());
 
@@ -205,6 +216,17 @@ void S3AuthSettings::updateIfChanged(const S3AuthSettings & settings)
         server_side_encryption_kms_config = settings.server_side_encryption_kms_config;
 }
 
+HTTPHeaderEntries S3AuthSettings::getHeaders() const
+{
+    bool auth_settings_is_default = !impl->isChanged("access_key_id");
+    if (access_headers.empty() || !auth_settings_is_default)
+        return headers;
+
+    HTTPHeaderEntries result(headers);
+    result.insert(result.end(), access_headers.begin(), access_headers.end());
+
+    return result;
+}
 
 }
 }
diff --git a/src/IO/S3AuthSettings.h b/src/IO/S3AuthSettings.h
index 4026adb1e68e..38f46cfeccd8 100644
--- a/src/IO/S3AuthSettings.h
+++ b/src/IO/S3AuthSettings.h
@@ -55,8 +55,11 @@ struct S3AuthSettings
     bool hasUpdates(const S3AuthSettings & other) const;
     void updateIfChanged(const S3AuthSettings & settings);
     bool canBeUsedByUser(const String & user) const { return users.empty() || users.contains(user); }
+    HTTPHeaderEntries getHeaders() const;
 
     HTTPHeaderEntries headers;
+    HTTPHeaderEntries access_headers;
+
     std::unordered_set<std::string> users;
     ServerSideEncryptionKMSConfig server_side_encryption_kms_config;
 
diff --git a/src/IO/S3Common.cpp b/src/IO/S3Common.cpp
index 5c1ee6ccc784..f12de6a7b546 100644
--- a/src/IO/S3Common.cpp
+++ b/src/IO/S3Common.cpp
@@ -74,14 +74,14 @@ namespace ErrorCodes
 namespace S3
 {
 
-HTTPHeaderEntries getHTTPHeaders(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config)
+HTTPHeaderEntries getHTTPHeaders(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config, const std::string header_key)
 {
     HTTPHeaderEntries headers;
     Poco::Util::AbstractConfiguration::Keys subconfig_keys;
     config.keys(config_elem, subconfig_keys);
     for (const std::string & subkey : subconfig_keys)
     {
-        if (subkey.starts_with("header"))
+        if (subkey.starts_with(header_key))
         {
             auto header_str = config.getString(config_elem + "." + subkey);
             auto delimiter = header_str.find(':');
diff --git a/src/IO/S3Common.h b/src/IO/S3Common.h
index 1e40108b09f1..22b590dcb18c 100644
--- a/src/IO/S3Common.h
+++ b/src/IO/S3Common.h
@@ -69,7 +69,7 @@ struct ProxyConfigurationResolver;
 namespace S3
 {
 
-HTTPHeaderEntries getHTTPHeaders(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config);
+HTTPHeaderEntries getHTTPHeaders(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config, std::string header_key = "header");
 ServerSideEncryptionKMSConfig getSSEKMSConfig(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config);
 
 }
