{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 71011,
  "instance_id": "ClickHouse__ClickHouse-71011",
  "issue_numbers": [
    "70519"
  ],
  "base_commit": "2c4d93f5523da36e4e7fb491a4e338a7c59e4d28",
  "patch": "diff --git a/docs/en/engines/table-engines/integrations/s3.md b/docs/en/engines/table-engines/integrations/s3.md\nindex 2675c193519a..20ee4823c1c6 100644\n--- a/docs/en/engines/table-engines/integrations/s3.md\n+++ b/docs/en/engines/table-engines/integrations/s3.md\n@@ -290,6 +290,7 @@ The following settings can be specified in configuration file for given endpoint\n - `expiration_window_seconds` \u2014 Grace period for checking if expiration-based credentials have expired. Optional, default value is `120`.\n - `no_sign_request` - Ignore all the credentials so requests are not signed. Useful for accessing public buckets.\n - `header` \u2014  Adds specified HTTP header to a request to given endpoint. Optional, can be specified multiple times.\n+- `access_header` - Adds specified HTTP header to a request to given endpoint, in cases where there are no other credentials from another source.\n - `server_side_encryption_customer_key_base64` \u2014 If specified, required headers for accessing S3 objects with SSE-C encryption will be set. Optional.\n - `server_side_encryption_kms_key_id` - If specified, required headers for accessing S3 objects with [SSE-KMS encryption](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html) will be set. If an empty string is specified, the AWS managed S3 key will be used. Optional.\n - `server_side_encryption_kms_encryption_context` - If specified alongside `server_side_encryption_kms_key_id`, the given encryption context header for SSE-KMS will be set. Optional.\ndiff --git a/docs/ru/engines/table-engines/integrations/s3.md b/docs/ru/engines/table-engines/integrations/s3.md\nindex a1c69df4d0ab..2bab78c0612b 100644\n--- a/docs/ru/engines/table-engines/integrations/s3.md\n+++ b/docs/ru/engines/table-engines/integrations/s3.md\n@@ -138,6 +138,7 @@ CREATE TABLE table_with_asterisk (name String, value UInt32)\n -   `use_insecure_imds_request` \u2014 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u043d\u0435\u0435 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a IMDS \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0443\u0447\u0451\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 Amazon EC2. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 `false`.\n -   `region` \u2014 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 S3.\n -   `header` \u2014 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 HTTP-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u043f\u0440\u0438\u0435\u043c\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437.\n+-   `access_header` - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 HTTP-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u043f\u0440\u0438\u0435\u043c\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432 \u0441\u043b\u0443\u0447\u0430\u044f \u0435\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438.\n -   `server_side_encryption_customer_key_base64` \u2014 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c S3 \u0441 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c SSE-C.\n -   `single_read_retries` \u2014 \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u0438 \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u043c \u0447\u0442\u0435\u043d\u0438\u0438. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 `4`.\n \ndiff --git a/src/Disks/ObjectStorages/S3/diskSettings.cpp b/src/Disks/ObjectStorages/S3/diskSettings.cpp\nindex 1ae3730e4c71..92be835560b8 100644\n--- a/src/Disks/ObjectStorages/S3/diskSettings.cpp\n+++ b/src/Disks/ObjectStorages/S3/diskSettings.cpp\n@@ -177,7 +177,7 @@ std::unique_ptr<S3::Client> getClient(\n         auth_settings[S3AuthSetting::secret_access_key],\n         auth_settings[S3AuthSetting::server_side_encryption_customer_key_base64],\n         auth_settings.server_side_encryption_kms_config,\n-        auth_settings.headers,\n+        auth_settings.getHeaders(),\n         credentials_configuration,\n         auth_settings[S3AuthSetting::session_token]);\n }\ndiff --git a/src/IO/S3AuthSettings.cpp b/src/IO/S3AuthSettings.cpp\nindex 799dc6692fa7..5d7d4678977e 100644\n--- a/src/IO/S3AuthSettings.cpp\n+++ b/src/IO/S3AuthSettings.cpp\n@@ -105,7 +105,9 @@ S3AuthSettings::S3AuthSettings(\n         }\n     }\n \n-    headers = getHTTPHeaders(config_prefix, config);\n+    headers = getHTTPHeaders(config_prefix, config, \"header\");\n+    access_headers = getHTTPHeaders(config_prefix, config, \"access_header\");\n+\n     server_side_encryption_kms_config = getSSEKMSConfig(config_prefix, config);\n \n     Poco::Util::AbstractConfiguration::Keys keys;\n@@ -119,6 +121,7 @@ S3AuthSettings::S3AuthSettings(\n \n S3AuthSettings::S3AuthSettings(const S3AuthSettings & settings)\n     : headers(settings.headers)\n+    , access_headers(settings.access_headers)\n     , users(settings.users)\n     , server_side_encryption_kms_config(settings.server_side_encryption_kms_config)\n     , impl(std::make_unique<S3AuthSettingsImpl>(*settings.impl))\n@@ -127,6 +130,7 @@ S3AuthSettings::S3AuthSettings(const S3AuthSettings & settings)\n \n S3AuthSettings::S3AuthSettings(S3AuthSettings && settings) noexcept\n     : headers(std::move(settings.headers))\n+    , access_headers(std::move(settings.access_headers))\n     , users(std::move(settings.users))\n     , server_side_encryption_kms_config(std::move(settings.server_side_encryption_kms_config))\n     , impl(std::make_unique<S3AuthSettingsImpl>(std::move(*settings.impl)))\n@@ -145,6 +149,7 @@ S3AUTH_SETTINGS_SUPPORTED_TYPES(S3AuthSettings, IMPLEMENT_SETTING_SUBSCRIPT_OPER\n S3AuthSettings & S3AuthSettings::operator=(S3AuthSettings && settings) noexcept\n {\n     headers = std::move(settings.headers);\n+    access_headers = std::move(settings.access_headers);\n     users = std::move(settings.users);\n     server_side_encryption_kms_config = std::move(settings.server_side_encryption_kms_config);\n     *impl = std::move(*settings.impl);\n@@ -157,6 +162,9 @@ bool S3AuthSettings::operator==(const S3AuthSettings & right)\n     if (headers != right.headers)\n         return false;\n \n+    if (access_headers != right.access_headers)\n+        return false;\n+\n     if (users != right.users)\n         return false;\n \n@@ -196,6 +204,9 @@ void S3AuthSettings::updateIfChanged(const S3AuthSettings & settings)\n     if (!settings.headers.empty())\n         headers = settings.headers;\n \n+    if (!settings.access_headers.empty())\n+        access_headers = settings.access_headers;\n+\n     if (!settings.users.empty())\n         users.insert(settings.users.begin(), settings.users.end());\n \n@@ -205,6 +216,17 @@ void S3AuthSettings::updateIfChanged(const S3AuthSettings & settings)\n         server_side_encryption_kms_config = settings.server_side_encryption_kms_config;\n }\n \n+HTTPHeaderEntries S3AuthSettings::getHeaders() const\n+{\n+    bool auth_settings_is_default = !impl->isChanged(\"access_key_id\");\n+    if (access_headers.empty() || !auth_settings_is_default)\n+        return headers;\n+\n+    HTTPHeaderEntries result(headers);\n+    result.insert(result.end(), access_headers.begin(), access_headers.end());\n+\n+    return result;\n+}\n \n }\n }\ndiff --git a/src/IO/S3AuthSettings.h b/src/IO/S3AuthSettings.h\nindex 4026adb1e68e..38f46cfeccd8 100644\n--- a/src/IO/S3AuthSettings.h\n+++ b/src/IO/S3AuthSettings.h\n@@ -55,8 +55,11 @@ struct S3AuthSettings\n     bool hasUpdates(const S3AuthSettings & other) const;\n     void updateIfChanged(const S3AuthSettings & settings);\n     bool canBeUsedByUser(const String & user) const { return users.empty() || users.contains(user); }\n+    HTTPHeaderEntries getHeaders() const;\n \n     HTTPHeaderEntries headers;\n+    HTTPHeaderEntries access_headers;\n+\n     std::unordered_set<std::string> users;\n     ServerSideEncryptionKMSConfig server_side_encryption_kms_config;\n \ndiff --git a/src/IO/S3Common.cpp b/src/IO/S3Common.cpp\nindex 5c1ee6ccc784..f12de6a7b546 100644\n--- a/src/IO/S3Common.cpp\n+++ b/src/IO/S3Common.cpp\n@@ -74,14 +74,14 @@ namespace ErrorCodes\n namespace S3\n {\n \n-HTTPHeaderEntries getHTTPHeaders(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config)\n+HTTPHeaderEntries getHTTPHeaders(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config, const std::string header_key)\n {\n     HTTPHeaderEntries headers;\n     Poco::Util::AbstractConfiguration::Keys subconfig_keys;\n     config.keys(config_elem, subconfig_keys);\n     for (const std::string & subkey : subconfig_keys)\n     {\n-        if (subkey.starts_with(\"header\"))\n+        if (subkey.starts_with(header_key))\n         {\n             auto header_str = config.getString(config_elem + \".\" + subkey);\n             auto delimiter = header_str.find(':');\ndiff --git a/src/IO/S3Common.h b/src/IO/S3Common.h\nindex 1e40108b09f1..22b590dcb18c 100644\n--- a/src/IO/S3Common.h\n+++ b/src/IO/S3Common.h\n@@ -69,7 +69,7 @@ struct ProxyConfigurationResolver;\n namespace S3\n {\n \n-HTTPHeaderEntries getHTTPHeaders(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config);\n+HTTPHeaderEntries getHTTPHeaders(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config, std::string header_key = \"header\");\n ServerSideEncryptionKMSConfig getSSEKMSConfig(const std::string & config_elem, const Poco::Util::AbstractConfiguration & config);\n \n }\n",
  "test_patch": "diff --git a/tests/integration/test_s3_access_headers/__init__.py b/tests/integration/test_s3_access_headers/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_s3_access_headers/configs/config.d/named_collections.xml b/tests/integration/test_s3_access_headers/configs/config.d/named_collections.xml\nnew file mode 100644\nindex 000000000000..d08d34017789\n--- /dev/null\n+++ b/tests/integration/test_s3_access_headers/configs/config.d/named_collections.xml\n@@ -0,0 +1,9 @@\n+<clickhouse>\n+  <named_collections>\n+    <s3_mock>\n+        <url>http://resolver:8081/root/test_named_colections.csv</url>\n+        <access_key_id>minio</access_key_id>\n+        <secret_access_key>minio123</secret_access_key>\n+    </s3_mock>\n+  </named_collections>\n+</clickhouse>\ndiff --git a/tests/integration/test_s3_access_headers/configs/config.d/s3_headers.xml b/tests/integration/test_s3_access_headers/configs/config.d/s3_headers.xml\nnew file mode 100644\nindex 000000000000..2d2eeb3c7b1d\n--- /dev/null\n+++ b/tests/integration/test_s3_access_headers/configs/config.d/s3_headers.xml\n@@ -0,0 +1,8 @@\n+<clickhouse>\n+  <s3>\n+      <s3_mock>\n+          <endpoint>http://resolver:8081/</endpoint>\n+          <access_header>custom-auth-token: ValidToken1234</access_header>\n+      </s3_mock>\n+  </s3>\n+</clickhouse>\ndiff --git a/tests/integration/test_s3_access_headers/configs/users.d/users.xml b/tests/integration/test_s3_access_headers/configs/users.d/users.xml\nnew file mode 100644\nindex 000000000000..4b6ba057ecb1\n--- /dev/null\n+++ b/tests/integration/test_s3_access_headers/configs/users.d/users.xml\n@@ -0,0 +1,9 @@\n+<clickhouse>\n+    <users>\n+        <default>\n+            <password></password>\n+            <profile>default</profile>\n+            <named_collection_control>1</named_collection_control>\n+        </default>\n+    </users>\n+</clickhouse>\ndiff --git a/tests/integration/test_s3_access_headers/s3_mocks/mocker_s3.py b/tests/integration/test_s3_access_headers/s3_mocks/mocker_s3.py\nnew file mode 100644\nindex 000000000000..0bbcb2e60e8f\n--- /dev/null\n+++ b/tests/integration/test_s3_access_headers/s3_mocks/mocker_s3.py\n@@ -0,0 +1,97 @@\n+import http.client\n+import http.server\n+import random\n+import socketserver\n+import sys\n+import urllib.parse\n+\n+UPSTREAM_HOST = \"minio1:9001\"\n+random.seed(\"No list objects/1.0\")\n+\n+\n+def request(command, url, headers={}, data=None):\n+    \"\"\"Mini-requests.\"\"\"\n+\n+    class Dummy:\n+        pass\n+\n+    parts = urllib.parse.urlparse(url)\n+    c = http.client.HTTPConnection(parts.hostname, parts.port)\n+    c.request(\n+        command,\n+        urllib.parse.urlunparse(parts._replace(scheme=\"\", netloc=\"\")),\n+        headers=headers,\n+        body=data,\n+    )\n+    r = c.getresponse()\n+    result = Dummy()\n+    result.status_code = r.status\n+    result.headers = r.headers\n+    result.content = r.read()\n+    return result\n+\n+\n+CUSTOM_AUTH_TOKEN_HEADER = \"custom-auth-token\"\n+CUSTOM_AUTH_TOKEN_VALID_VALUE = \"ValidToken1234\"\n+\n+\n+class RequestHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        if self.path == \"/\":\n+            self.send_response(200)\n+            self.send_header(\"Content-Type\", \"text/plain\")\n+            self.end_headers()\n+            self.wfile.write(b\"OK\")\n+            return\n+        self.do_HEAD()\n+\n+    def do_PUT(self):\n+        self.do_HEAD()\n+\n+    def do_DELETE(self):\n+        self.do_HEAD()\n+\n+    def do_POST(self):\n+        self.do_HEAD()\n+\n+    def do_HEAD(self):\n+\n+        custom_auth_token = self.headers.get(CUSTOM_AUTH_TOKEN_HEADER)\n+        if custom_auth_token and custom_auth_token != CUSTOM_AUTH_TOKEN_VALID_VALUE:\n+            self.send_response(403)\n+            self.send_header(\"Content-Type\", \"application/xml\")\n+            self.end_headers()\n+\n+            body = f\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Error>\n+    <Code>AccessDenied</Code>\n+    <Message>Access Denied. Custom token was {custom_auth_token}, the correct one: {CUSTOM_AUTH_TOKEN_VALID_VALUE}.</Message>\n+    <Resource>RESOURCE</Resource>\n+    <RequestId>REQUEST_ID</RequestId>\n+</Error>\n+\"\"\"\n+            self.wfile.write(body.encode())\n+            return\n+\n+        content_length = self.headers.get(\"Content-Length\")\n+        data = self.rfile.read(int(content_length)) if content_length else None\n+        r = request(\n+            self.command,\n+            f\"http://{UPSTREAM_HOST}{self.path}\",\n+            headers=self.headers,\n+            data=data,\n+        )\n+        self.send_response(r.status_code)\n+        for k, v in r.headers.items():\n+            self.send_header(k, v)\n+        self.end_headers()\n+        self.wfile.write(r.content)\n+        self.wfile.close()\n+\n+\n+class ThreadedHTTPServer(socketserver.ThreadingMixIn, http.server.HTTPServer):\n+    \"\"\"Handle requests in a separate thread.\"\"\"\n+\n+\n+httpd = ThreadedHTTPServer((\"0.0.0.0\", int(sys.argv[1])), RequestHandler)\n+httpd.serve_forever()\ndiff --git a/tests/integration/test_s3_access_headers/test.py b/tests/integration/test_s3_access_headers/test.py\nnew file mode 100644\nindex 000000000000..4d4a5b81230e\n--- /dev/null\n+++ b/tests/integration/test_s3_access_headers/test.py\n@@ -0,0 +1,124 @@\n+import logging\n+import os\n+\n+import pytest\n+\n+from helpers.cluster import ClickHouseCluster\n+from helpers.mock_servers import start_mock_servers\n+from helpers.s3_tools import prepare_s3_bucket\n+\n+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n+\n+\n+def run_s3_mocks(started_cluster):\n+    script_dir = os.path.join(os.path.dirname(__file__), \"s3_mocks\")\n+    start_mock_servers(\n+        started_cluster,\n+        script_dir,\n+        [\n+            (\"mocker_s3.py\", \"resolver\", \"8081\"),\n+        ],\n+    )\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    cluster = ClickHouseCluster(__file__, with_spark=True)\n+    try:\n+        cluster.add_instance(\n+            \"node1\",\n+            main_configs=[\n+                \"configs/config.d/named_collections.xml\",\n+                \"configs/config.d/s3_headers.xml\",\n+            ],\n+            user_configs=[\"configs/users.d/users.xml\"],\n+            with_minio=True,\n+        )\n+\n+        logging.info(\"Starting cluster...\")\n+        cluster.start()\n+\n+        prepare_s3_bucket(cluster)\n+        logging.info(\"S3 bucket created\")\n+\n+        run_s3_mocks(cluster)\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+CUSTOM_AUTH_TOKEN = \"custom-auth-token\"\n+CORRECT_TOKEN = \"ValidToken1234\"\n+INCORRECT_TOKEN = \"InvalidToken1234\"\n+\n+\n+@pytest.mark.parametrize(\n+    \"table_name, engine, query_with_invalid_token_must_fail\",\n+    [\n+        pytest.param(\n+            \"test_access_header\",\n+            \"S3('http://resolver:8081/root/test_access_header.csv', 'CSV')\",\n+            True,\n+            id=\"test_access_over_custom_header\",\n+        ),\n+        pytest.param(\n+            \"test_static_override\",\n+            \"S3('http://resolver:8081/root/test_static_override.csv', 'minio', 'minio123',  'CSV')\",\n+            False,\n+            id=\"test_access_key_id_overrides_access_header\",\n+        ),\n+        pytest.param(\n+            \"test_named_colections\",\n+            \"S3(s3_mock, format='CSV')\",\n+            False,\n+            id=\"test_named_coll_overrides_access_header\",\n+        ),\n+    ],\n+)\n+def test_custom_access_header(\n+    started_cluster, table_name, engine, query_with_invalid_token_must_fail\n+):\n+    instance = started_cluster.instances[\"node1\"]\n+\n+    instance.query(\n+        f\"\"\"\n+        SET s3_truncate_on_insert=1;\n+        INSERT INTO FUNCTION s3('http://minio1:9001/root/{table_name}.csv', 'minio', 'minio123','CSV')\n+        SELECT number as a, toString(number) as b FROM numbers(3);\n+        \"\"\"\n+    )\n+    instance.query(\n+        f\"\"\"\n+        DROP TABLE IF EXISTS {table_name};\n+        CREATE TABLE {table_name} (name String, value UInt32)\n+        ENGINE={engine};\n+        \"\"\"\n+    )\n+    instance.query(\"SYSTEM DROP QUERY CACHE\")\n+\n+    assert instance.query(f\"SELECT count(*) FROM {table_name}\") == \"3\\n\"\n+\n+    config_path = \"/etc/clickhouse-server/config.d/s3_headers.xml\"\n+\n+    instance.replace_in_config(\n+        config_path,\n+        f\"<access_header>{CUSTOM_AUTH_TOKEN}: {CORRECT_TOKEN}\",\n+        f\"<access_header>{CUSTOM_AUTH_TOKEN}: {INCORRECT_TOKEN}\",\n+    )\n+    instance.query(\"SYSTEM RELOAD CONFIG\")\n+\n+    if query_with_invalid_token_must_fail:\n+        instance.query_and_get_error(f\"SELECT count(*) FROM {table_name}\")\n+\n+    else:\n+        assert instance.query(f\"SELECT count(*) FROM {table_name}\") == \"3\\n\"\n+\n+    instance.replace_in_config(\n+        config_path,\n+        f\"<access_header>{CUSTOM_AUTH_TOKEN}: {INCORRECT_TOKEN}\",\n+        f\"<access_header>{CUSTOM_AUTH_TOKEN}: {CORRECT_TOKEN}\",\n+    )\n+\n+    instance.query(\"SYSTEM RELOAD CONFIG\")\n+    assert instance.query(f\"SELECT count(*) FROM {table_name}\") == \"3\\n\"\n",
  "problem_statement": "S3-based table engines never update headers from the endpoint configuration if access_key_id is specified in the table schema.\n**Describe the unexpected behaviour**\r\nS3-based table engines never updates headers from the configuration if access_key_id is specified in the table schema.\r\n\r\n**How to reproduce**\r\n* ch 24.8\r\n\r\nIn the config:\r\n```\r\n<clickhouse>\r\n  <s3>\r\n      <s3_hudi>\r\n          <endpoint>'<s3_url>'</endpoint>\r\n          <header>'Some auth header'</header>\r\n      </s3_hudi>\r\n  </s3>\r\n</clickhouse>\r\n```\r\n\r\nSQL: \r\n```\r\nCREATE TABLE t_hudi\r\n(\r\n    `a` int\r\n)\r\nENGINE = Hudi('<s3_path_to_hudi_table>', 'aaaaaa', 'bbbbbb')\r\n\r\n\r\nCREATE TABLE t_hudi_without\r\n(\r\n    `a` int\r\n)\r\nENGINE = Hudi('<s3_path_to_hudi_table>')\r\n\r\n\r\nSELECT *\r\nFROM t_hudi_without\r\n\r\nQuery id: 5b1e62ff-21a2-47cb-aa34-4add2d980ffc\r\n\r\n   \u250c\u2500a\u2500\u2510\r\n1. \u2502 0 \u2502\r\n2. \u2502 1 \u2502\r\n   \u2514\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.064 sec. \r\n\r\nrc1a-7c4ec69k7tc5d1qn.mdb.yandexcloud.net :) SELECT * from t_hudi\r\n\r\nSELECT *\r\nFROM t_hudi\r\n\r\nQuery id: 501beb0a-04ed-4a1a-9ab1-34a3c7e6dfe7\r\n\r\n   \u250c\u2500a\u2500\u2510\r\n1. \u2502 0 \u2502\r\n2. \u2502 1 \u2502\r\n   \u2514\u2500\u2500\u2500\u2518\r\n\r\n### Make token in the config invalid. To make sure that  it has been updated\r\n\r\nSYSTEM RELOAD CONFIG\r\n\r\nSELECT *\r\nFROM t_hudi_without\r\n\r\n\r\nElapsed: 0.010 sec. \r\n\r\nReceived exception from server (version 24.8.4):\r\nCode: 499. DB::Exception: Received from localhost:9000. DB::Exception: Access Denied (Code: 15, s3 exception: AccessDenied). (S3_ERROR)\r\n\r\nSELECT *\r\nFROM t_hudi\r\n\r\nQuery id: 469f6900-d090-4c4b-80a1-fa30bc629741\r\n\r\n   \u250c\u2500a\u2500\u2510\r\n1. \u2502 0 \u2502\r\n2. \u2502 1 \u2502\r\n   \u2514\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n**Expected behavior**\r\nAccess denied in the query to `t_hudi` after updating the header in the endpoint config.\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-10-24T09:56:37Z"
}