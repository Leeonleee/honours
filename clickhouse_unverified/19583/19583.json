{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19583,
  "instance_id": "ClickHouse__ClickHouse-19583",
  "issue_numbers": [
    "18549"
  ],
  "base_commit": "405e9c8f4b1e4fc705897aea894b48aa165e1a31",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex cc32417af092..aa1c7a094bea 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -326,6 +326,7 @@ class IColumn;\n     M(Bool, log_profile_events, true, \"Log query performance statistics into the query_log and query_thread_log.\", 0) \\\n     M(Bool, log_query_settings, true, \"Log query settings into the query_log.\", 0) \\\n     M(Bool, log_query_threads, true, \"Log query threads into system.query_thread_log table. This setting have effect only when 'log_queries' is true.\", 0) \\\n+    M(String, log_comment, \"\", \"Log comment into system.query_log table and server log. It can be set to arbitrary string no longer than max_query_size.\", 0) \\\n     M(LogsLevel, send_logs_level, LogsLevel::fatal, \"Send server text logs with specified minimum level to client. Valid values: 'trace', 'debug', 'information', 'warning', 'error', 'fatal', 'none'\", 0) \\\n     M(Bool, enable_optimize_predicate_expression, 1, \"If it is set to true, optimize predicates to subqueries.\", 0) \\\n     M(Bool, enable_optimize_predicate_expression_to_final_subquery, 1, \"Allow push predicate to final subquery.\", 0) \\\ndiff --git a/src/Interpreters/ProcessList.cpp b/src/Interpreters/ProcessList.cpp\nindex 818ead7b28b6..9b0d69b6ac46 100644\n--- a/src/Interpreters/ProcessList.cpp\n+++ b/src/Interpreters/ProcessList.cpp\n@@ -60,12 +60,6 @@ static bool isUnlimitedQuery(const IAST * ast)\n }\n \n \n-ProcessList::ProcessList(size_t max_size_)\n-    : max_size(max_size_)\n-{\n-}\n-\n-\n ProcessList::EntryPtr ProcessList::insert(const String & query_, const IAST * ast, Context & query_context)\n {\n     EntryPtr res;\ndiff --git a/src/Interpreters/ProcessList.h b/src/Interpreters/ProcessList.h\nindex 5eb9c01b8f1f..f6151bb3429f 100644\n--- a/src/Interpreters/ProcessList.h\n+++ b/src/Interpreters/ProcessList.h\n@@ -297,8 +297,6 @@ class ProcessList\n     QueryStatus * tryGetProcessListElement(const String & current_query_id, const String & current_user);\n \n public:\n-    ProcessList(size_t max_size_ = 0);\n-\n     using EntryPtr = std::shared_ptr<ProcessListEntry>;\n \n     /** Register running query. Returns refcounted object, that will remove element from list in destructor.\ndiff --git a/src/Interpreters/QueryLog.cpp b/src/Interpreters/QueryLog.cpp\nindex 12ebfb0e27b4..82b957f895b6 100644\n--- a/src/Interpreters/QueryLog.cpp\n+++ b/src/Interpreters/QueryLog.cpp\n@@ -92,6 +92,8 @@ Block QueryLogElement::createBlock()\n \n         {std::make_shared<DataTypeUInt32>(),                                  \"revision\"},\n \n+        {std::make_shared<DataTypeString>(),                                  \"log_comment\"},\n+\n         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"thread_ids\"},\n         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"ProfileEvents.Names\"},\n         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"ProfileEvents.Values\"},\n@@ -168,6 +170,8 @@ void QueryLogElement::appendToBlock(MutableColumns & columns) const\n \n     columns[i++]->insert(ClickHouseRevision::getVersionRevision());\n \n+    columns[i++]->insertData(log_comment.data(), log_comment.size());\n+\n     {\n         Array threads_array;\n         threads_array.reserve(thread_ids.size());\ndiff --git a/src/Interpreters/QueryLog.h b/src/Interpreters/QueryLog.h\nindex ceb9124cbecf..8617a8d1cbc9 100644\n--- a/src/Interpreters/QueryLog.h\n+++ b/src/Interpreters/QueryLog.h\n@@ -74,6 +74,8 @@ struct QueryLogElement\n \n     ClientInfo client_info;\n \n+    String log_comment;\n+\n     std::vector<UInt64> thread_ids;\n     std::shared_ptr<ProfileEvents::Counters> profile_counters;\n     std::shared_ptr<Settings> query_settings;\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex 7003e6f5ee9a..dff0f0bf6f5d 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -157,11 +157,21 @@ static void logQuery(const String & query, const Context & context, bool interna\n         const auto & initial_query_id = client_info.initial_query_id;\n         const auto & current_user = client_info.current_user;\n \n-        LOG_DEBUG(&Poco::Logger::get(\"executeQuery\"), \"(from {}{}{}, using {} parser) {}\",\n+        String comment = context.getSettingsRef().log_comment;\n+        size_t max_query_size = context.getSettingsRef().max_query_size;\n+\n+        if (comment.size() > max_query_size)\n+            comment.resize(max_query_size);\n+\n+        if (!comment.empty())\n+            comment = fmt::format(\" (comment: {})\", comment);\n+\n+        LOG_DEBUG(&Poco::Logger::get(\"executeQuery\"), \"(from {}{}{}, using {} parser){} {}\",\n             client_info.current_address.toString(),\n             (current_user != \"default\" ? \", user: \" + current_user : \"\"),\n             (!initial_query_id.empty() && current_query_id != initial_query_id ? \", initial_query_id: \" + initial_query_id : std::string()),\n             (context.getSettingsRef().use_antlr_parser ? \"experimental\" : \"production\"),\n+            comment,\n             joinLines(query));\n \n         if (client_info.client_trace_context.trace_id)\n@@ -196,13 +206,17 @@ static void setExceptionStackTrace(QueryLogElement & elem)\n /// Log exception (with query info) into text log (not into system table).\n static void logException(Context & context, QueryLogElement & elem)\n {\n+    String comment;\n+    if (!elem.log_comment.empty())\n+        comment = fmt::format(\" (comment: {})\", elem.log_comment);\n+\n     if (elem.stack_trace.empty())\n-        LOG_ERROR(&Poco::Logger::get(\"executeQuery\"), \"{} (from {}) (in query: {})\",\n-            elem.exception, context.getClientInfo().current_address.toString(), joinLines(elem.query));\n+        LOG_ERROR(&Poco::Logger::get(\"executeQuery\"), \"{} (from {}){} (in query: {})\",\n+            elem.exception, context.getClientInfo().current_address.toString(), comment, joinLines(elem.query));\n     else\n-        LOG_ERROR(&Poco::Logger::get(\"executeQuery\"), \"{} (from {}) (in query: {})\"\n+        LOG_ERROR(&Poco::Logger::get(\"executeQuery\"), \"{} (from {}){} (in query: {})\"\n             \", Stack trace (when copying this message, always include the lines below):\\n\\n{}\",\n-            elem.exception, context.getClientInfo().current_address.toString(), joinLines(elem.query), elem.stack_trace);\n+            elem.exception, context.getClientInfo().current_address.toString(), comment, joinLines(elem.query), elem.stack_trace);\n }\n \n inline UInt64 time_in_microseconds(std::chrono::time_point<std::chrono::system_clock> timepoint)\n@@ -248,6 +262,10 @@ static void onExceptionBeforeStart(const String & query_for_logging, Context & c\n \n     elem.client_info = context.getClientInfo();\n \n+    elem.log_comment = settings.log_comment;\n+    if (elem.log_comment.size() > settings.max_query_size)\n+        elem.log_comment.resize(settings.max_query_size);\n+\n     if (settings.calculate_text_stack_trace)\n         setExceptionStackTrace(elem);\n     logException(context, elem);\n@@ -626,6 +644,10 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n                 if (settings.log_query_settings)\n                     elem.query_settings = std::make_shared<Settings>(context.getSettingsRef());\n \n+                elem.log_comment = settings.log_comment;\n+                if (elem.log_comment.size() > settings.max_query_size)\n+                    elem.log_comment.resize(settings.max_query_size);\n+\n                 if (elem.type >= settings.log_queries_min_type && !settings.log_queries_min_query_duration_ms.totalMilliseconds())\n                 {\n                     if (auto query_log = context.getQueryLog())\n",
  "test_patch": "diff --git a/tests/clickhouse-test b/tests/clickhouse-test\nindex 91e9700e32cf..b1282ad5f412 100755\n--- a/tests/clickhouse-test\n+++ b/tests/clickhouse-test\n@@ -151,7 +151,7 @@ def run_single_test(args, ext, server_logs_level, client_options, case_file, std\n     pattern = '{test} > {stdout} 2> {stderr}'\n \n     if ext == '.sql':\n-        pattern = \"{client} --send_logs_level={logs_level} --testmode --multiquery {options} < \" + pattern\n+        pattern = \"{client} --send_logs_level={logs_level} --testmode --multiquery {options} --log_comment='{test}' < \" + pattern\n \n     command = pattern.format(**params)\n \ndiff --git a/tests/queries/0_stateless/01670_log_comment.reference b/tests/queries/0_stateless/01670_log_comment.reference\nnew file mode 100644\nindex 000000000000..b6335f432cf7\n--- /dev/null\n+++ b/tests/queries/0_stateless/01670_log_comment.reference\n@@ -0,0 +1,3 @@\n+1\n+QueryStart\tSELECT 1;\n+QueryFinish\tSELECT 1;\ndiff --git a/tests/queries/0_stateless/01670_log_comment.sql b/tests/queries/0_stateless/01670_log_comment.sql\nnew file mode 100644\nindex 000000000000..bbe7330cc743\n--- /dev/null\n+++ b/tests/queries/0_stateless/01670_log_comment.sql\n@@ -0,0 +1,5 @@\n+SET log_comment = 'log_comment test', log_queries = 1;\n+SELECT 1;\n+SYSTEM FLUSH LOGS;\n+SELECT type, query FROM system.query_log WHERE log_comment = 'log_comment test' AND event_date >= yesterday() AND type = 1 ORDER BY event_time DESC LIMIT 1;\n+SELECT type, query FROM system.query_log WHERE log_comment = 'log_comment test' AND event_date >= yesterday() AND type = 2 ORDER BY event_time DESC LIMIT 1;\n",
  "problem_statement": "Add log_comment setting\nI hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en\r\n\r\nChangelog category \r\n- New Feature\r\n\r\n\r\n\r\nChangelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nAdd log_comment setting\r\nrelated to : [#18494](https://github.com/ClickHouse/ClickHouse/issues/18494)\r\n\r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2021-01-25T19:20:16Z"
}