You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Setting use_structure_from_insertion_table_in_table_functions doesn't work properly with virtual columns.
**Describe what's wrong**
The setting `set use_structure_from_insertion_table_in_table_functions=1` doesn't work properly

setting:
```
set use_structure_from_insertion_table_in_table_functions=1;
insert into function file(data.LineAsString) select 'Hello';
```

table with the same column name:
```
create table test (_path String) engine=Memory;
insert into test select _path from file(data.LineAsString);

Received exception:
Code: 352. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different types:
_path String String(size = 0)
_path LowCardinality(String) ColumnLowCardinality(size = 0, UInt8(size = 0), ColumnUnique(size = 1, String(size = 1))). (AMBIGUOUS_COLUMN_NAME)
```
here error makes perfect sense, since virtual column `_path` is a LowCardinality(String) but table column is `String`, however, the cause of error shows that something wrong is going on here - apparently the columns matched by name and not by position which is stated in manual. And seemingly due to this we have some wrong behavior here:
```
insert into test select CAST(_path as String) from file(data.LineAsString);

Received exception:
Code: 352. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different types:
_path String String(size = 0)
_path LowCardinality(String) ColumnLowCardinality(size = 0, UInt8(size = 0), ColumnUnique(size = 1, String(size = 1))). (AMBIGUOUS_COLUMN_NAME)
```
and even more strange here:
```
drop table test;
create table test (_path LowCardinality(String)) engine=Memory;
insert into test select _path from file(data.LineAsString);

Received exception:
Code: 80. DB::Exception: This input format is only suitable for tables with a single column of type String.: While executing File. (INCORRECT_QUERY)
```
not sure about this one - probably this is because `file()` table function produce single `String` column, and virtual columns were not taken into account.

However for table with different than `_path` column name there is no issue:
```
drop table test;
create table test (aaa String) engine=Memory;
insert into test select _path from file(data.LineAsString);
```
but from code it's seems that in this case the setting `use_structure_from_insertion_table_in_table_functions` is ignored and CAST is added.

**Does it reproduce on recent release?**
reproduces on current master
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
