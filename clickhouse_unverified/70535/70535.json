{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 70535,
  "instance_id": "ClickHouse__ClickHouse-70535",
  "issue_numbers": [
    "70319"
  ],
  "base_commit": "1d689518ff3a7d8b6fb14769d8633e081c066dad",
  "patch": "diff --git a/src/Analyzer/Resolve/IdentifierResolver.cpp b/src/Analyzer/Resolve/IdentifierResolver.cpp\nindex 15a90c52a2a0..7efc0d2a367b 100644\n--- a/src/Analyzer/Resolve/IdentifierResolver.cpp\n+++ b/src/Analyzer/Resolve/IdentifierResolver.cpp\n@@ -432,14 +432,6 @@ QueryTreeNodePtr IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalo\n     else\n         storage = DatabaseCatalog::instance().tryGetTable(storage_id, context);\n \n-    if (!storage && storage_id.hasUUID())\n-    {\n-        // If `storage_id` has UUID, it is possible that the UUID is removed from `DatabaseCatalog` after `context->resolveStorageID(storage_id)`\n-        // We try to get the table with the database name and the table name.\n-        auto database = DatabaseCatalog::instance().tryGetDatabase(storage_id.getDatabaseName());\n-        if (database)\n-            storage = database->tryGetTable(table_name, context);\n-    }\n     if (!storage)\n         return {};\n \ndiff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp\nindex 9f07c3ed5d5d..09a5375191b8 100644\n--- a/src/Common/ErrorCodes.cpp\n+++ b/src/Common/ErrorCodes.cpp\n@@ -452,7 +452,7 @@\n     M(553, LZMA_STREAM_ENCODER_FAILED) \\\n     M(554, LZMA_STREAM_DECODER_FAILED) \\\n     M(555, ROCKSDB_ERROR) \\\n-    M(556, SYNC_MYSQL_USER_ACCESS_ERROR) \\\n+    M(556, SYNC_MYSQL_USER_ACCESS_ERROR)\\\n     M(557, UNKNOWN_UNION) \\\n     M(558, EXPECTED_ALL_OR_DISTINCT) \\\n     M(559, INVALID_GRPC_QUERY_INFO) \\\n@@ -578,7 +578,7 @@\n     M(697, CANNOT_RESTORE_TO_NONENCRYPTED_DISK) \\\n     M(698, INVALID_REDIS_STORAGE_TYPE) \\\n     M(699, INVALID_REDIS_TABLE_STRUCTURE) \\\n-    M(700, USER_SESSION_LIMIT_EXCEEDED) \\\n+    M(700, USER_SESSION_LIMIT_EXCEEDED)  \\\n     M(701, CLUSTER_DOESNT_EXIST) \\\n     M(702, CLIENT_INFO_DOES_NOT_MATCH) \\\n     M(703, INVALID_IDENTIFIER) \\\n@@ -610,16 +610,15 @@\n     M(729, ILLEGAL_TIME_SERIES_TAGS) \\\n     M(730, REFRESH_FAILED) \\\n     M(731, QUERY_CACHE_USED_WITH_NON_THROW_OVERFLOW_MODE) \\\n-    M(733, TABLE_IS_BEING_RESTARTED) \\\n-\\\n+    \\\n     M(900, DISTRIBUTED_CACHE_ERROR) \\\n     M(901, CANNOT_USE_DISTRIBUTED_CACHE) \\\n-\\\n+    \\\n     M(999, KEEPER_EXCEPTION) \\\n     M(1000, POCO_EXCEPTION) \\\n     M(1001, STD_EXCEPTION) \\\n     M(1002, UNKNOWN_EXCEPTION) \\\n-    /* See END */\n+/* See END */\n \n #ifdef APPLY_FOR_EXTERNAL_ERROR_CODES\n     #define APPLY_FOR_ERROR_CODES(M) APPLY_FOR_BUILTIN_ERROR_CODES(M) APPLY_FOR_EXTERNAL_ERROR_CODES(M)\ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 647a1ba098eb..83904e7ad217 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -1668,8 +1668,7 @@ BlockIO InterpreterCreateQuery::createTable(ASTCreateQuery & create)\n     if (need_add_to_database && !database)\n         throw Exception(ErrorCodes::UNKNOWN_DATABASE, \"Database {} does not exist\", backQuoteIfNeed(database_name));\n \n-    if (create.replace_table\n-        || (create.replace_view && (database->getEngineName() == \"Atomic\" || database->getEngineName() == \"Replicated\")))\n+    if (create.replace_table)\n     {\n         chassert(!ddl_guard);\n         return doCreateOrReplaceTable(create, properties, mode);\n@@ -2030,16 +2029,16 @@ BlockIO InterpreterCreateQuery::doCreateOrReplaceTable(ASTCreateQuery & create,\n \n         auto ast_rename = std::make_shared<ASTRenameQuery>(ASTRenameQuery::Elements{std::move(elem)});\n         ast_rename->dictionary = create.is_dictionary;\n-        if (create.create_or_replace || create.replace_view)\n+        if (create.create_or_replace)\n         {\n-            /// CREATE OR REPLACE TABLE/VIEW\n+            /// CREATE OR REPLACE TABLE\n             /// Will execute ordinary RENAME instead of EXCHANGE if the target table does not exist\n             ast_rename->rename_if_cannot_exchange = true;\n             ast_rename->exchange = false;\n         }\n         else\n         {\n-            /// REPLACE TABLE/VIEW\n+            /// REPLACE TABLE\n             /// Will execute EXCHANGE query and fail if the target table does not exist\n             ast_rename->exchange = true;\n         }\ndiff --git a/src/Storages/IStorage.cpp b/src/Storages/IStorage.cpp\nindex 23f1811d3306..a2efa4201a71 100644\n--- a/src/Storages/IStorage.cpp\n+++ b/src/Storages/IStorage.cpp\n@@ -31,7 +31,6 @@ namespace ErrorCodes\n     extern const int NOT_IMPLEMENTED;\n     extern const int DEADLOCK_AVOIDED;\n     extern const int CANNOT_RESTORE_TABLE;\n-    extern const int TABLE_IS_BEING_RESTARTED;\n }\n \n IStorage::IStorage(StorageID storage_id_, std::unique_ptr<StorageInMemoryMetadata> metadata_)\n@@ -67,13 +66,12 @@ RWLockImpl::LockHolder IStorage::tryLockTimed(\n TableLockHolder IStorage::lockForShare(const String & query_id, const std::chrono::milliseconds & acquire_timeout)\n {\n     TableLockHolder result = tryLockTimed(drop_lock, RWLockImpl::Read, query_id, acquire_timeout);\n-    auto table_id = getStorageID();\n-    if (!table_id.hasUUID() && (is_dropped || is_detached))\n-        throw Exception(ErrorCodes::TABLE_IS_DROPPED, \"Table {}.{} is dropped or detached\", table_id.database_name, table_id.table_name);\n \n-    if (is_being_restarted)\n-        throw Exception(\n-            ErrorCodes::TABLE_IS_BEING_RESTARTED, \"Table {}.{} is being restarted\", table_id.database_name, table_id.table_name);\n+    if (is_dropped || is_detached)\n+    {\n+        auto table_id = getStorageID();\n+        throw Exception(ErrorCodes::TABLE_IS_DROPPED, \"Table {}.{} is dropped or detached\", table_id.database_name, table_id.table_name);\n+    }\n     return result;\n }\n \n@@ -81,10 +79,12 @@ TableLockHolder IStorage::tryLockForShare(const String & query_id, const std::ch\n {\n     TableLockHolder result = tryLockTimed(drop_lock, RWLockImpl::Read, query_id, acquire_timeout);\n \n-    auto table_id = getStorageID();\n-    if (is_being_restarted || (!table_id.hasUUID() && (is_dropped || is_detached)))\n-        // Table was dropped or is being restarted while acquiring the lock\n+    if (is_dropped || is_detached)\n+    {\n+        // Table was dropped while acquiring the lock\n         result = nullptr;\n+    }\n+\n     return result;\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02437_drop_mv_restart_replicas.sh b/tests/queries/0_stateless/02437_drop_mv_restart_replicas.sh\nindex af6d15b60e65..44076aeba18e 100755\n--- a/tests/queries/0_stateless/02437_drop_mv_restart_replicas.sh\n+++ b/tests/queries/0_stateless/02437_drop_mv_restart_replicas.sh\n@@ -53,7 +53,7 @@ export -f thread_restart;\n \n TIMEOUT=15\n \n-timeout $TIMEOUT bash -c thread_ddl 2>&1| grep -Fa \"Exception: \" | grep -Fv -e \"TABLE_IS_DROPPED\" -e \"UNKNOWN_TABLE\" -e \"DATABASE_NOT_EMPTY\" -e \"TABLE_IS_BEING_RESTARTED\" &\n+timeout $TIMEOUT bash -c thread_ddl 2>&1| grep -Fa \"Exception: \" | grep -Fv -e \"TABLE_IS_DROPPED\" -e \"UNKNOWN_TABLE\" -e \"DATABASE_NOT_EMPTY\" &\n timeout $TIMEOUT bash -c thread_insert 2> /dev/null &\n timeout $TIMEOUT bash -c thread_restart 2>&1| grep -Fa \"Exception: \" | grep -Fv -e \"is currently dropped or renamed\" -e \"is being dropped or detached\" &\n \ndiff --git a/tests/queries/0_stateless/03237_create_or_replace_view_atomically_with_atomic_engine.reference b/tests/queries/0_stateless/03237_create_or_replace_view_atomically_with_atomic_engine.reference\ndeleted file mode 100644\nindex e69de29bb2d1..000000000000\ndiff --git a/tests/queries/0_stateless/03237_create_or_replace_view_atomically_with_atomic_engine.sh b/tests/queries/0_stateless/03237_create_or_replace_view_atomically_with_atomic_engine.sh\ndeleted file mode 100755\nindex cc0e6c0d1134..000000000000\n--- a/tests/queries/0_stateless/03237_create_or_replace_view_atomically_with_atomic_engine.sh\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-#!/usr/bin/env bash\n-\n-CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n-# shellcheck source=../shell_config.sh\n-. \"$CUR_DIR\"/../shell_config.sh\n-\n-# with Atomic engine\n-$CLICKHOUSE_CLIENT --query \"CREATE DATABASE IF NOT EXISTS ${CLICKHOUSE_DATABASE}_db ENGINE=Atomic\"\n-\n-function create_or_replace_view_thread\n-{\n-    for _ in {1..20}; do\n-        $CLICKHOUSE_CLIENT --query \"CREATE OR REPLACE VIEW ${CLICKHOUSE_DATABASE}_db.test_view AS SELECT 'abcdef'\" > /dev/null\n-    done\n-}\n-export -f create_or_replace_view_thread;\n-\n-function select_view_thread\n-{\n-    for _ in {1..20}; do\n-        $CLICKHOUSE_CLIENT --query \"SELECT * FROM ${CLICKHOUSE_DATABASE}_db.test_view\" > /dev/null\n-    done\n-}\n-export -f select_view_thread;\n-\n-$CLICKHOUSE_CLIENT --query \"CREATE OR REPLACE VIEW ${CLICKHOUSE_DATABASE}_db.test_view AS SELECT 'abcdef'\" > /dev/null\n-\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-\n-wait\n\\ No newline at end of file\ndiff --git a/tests/queries/0_stateless/03238_create_or_replace_view_atomically_with_replicated_engine.reference b/tests/queries/0_stateless/03238_create_or_replace_view_atomically_with_replicated_engine.reference\ndeleted file mode 100644\nindex e69de29bb2d1..000000000000\ndiff --git a/tests/queries/0_stateless/03238_create_or_replace_view_atomically_with_replicated_engine.sh b/tests/queries/0_stateless/03238_create_or_replace_view_atomically_with_replicated_engine.sh\ndeleted file mode 100755\nindex 04adc38e34bd..000000000000\n--- a/tests/queries/0_stateless/03238_create_or_replace_view_atomically_with_replicated_engine.sh\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-#!/usr/bin/env bash\n-\n-CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n-# shellcheck source=../shell_config.sh\n-. \"$CUR_DIR\"/../shell_config.sh\n-\n-# with Replicated engine\n-$CLICKHOUSE_CLIENT --query \"CREATE DATABASE IF NOT EXISTS ${CLICKHOUSE_DATABASE}_db ENGINE=Replicated('/test/clickhouse/db/${CLICKHOUSE_DATABASE}_db', 's1', 'r1')\"\n-\n-function create_or_replace_view_thread\n-{\n-    for _ in {1..15}; do\n-        $CLICKHOUSE_CLIENT --query \"CREATE OR REPLACE VIEW ${CLICKHOUSE_DATABASE}_db.test_view AS SELECT 'abcdef'\" > /dev/null\n-    done\n-}\n-export -f create_or_replace_view_thread;\n-\n-function select_view_thread\n-{\n-    for _ in {1..15}; do\n-        $CLICKHOUSE_CLIENT --query \"SELECT * FROM ${CLICKHOUSE_DATABASE}_db.test_view\" > /dev/null\n-    done\n-}\n-export -f select_view_thread;\n-\n-$CLICKHOUSE_CLIENT --query \"CREATE OR REPLACE VIEW ${CLICKHOUSE_DATABASE}_db.test_view AS SELECT 'abcdef'\" > /dev/null\n-\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-bash -c select_view_thread &\n-\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-bash -c create_or_replace_view_thread &\n-\n-wait\n\\ No newline at end of file\n",
  "problem_statement": "Test 03237_create_or_replace_view_atomically_with_atomic_engine is flaky\nhttps://play.clickhouse.com/play?user=play#c2VsZWN0IAp0b1N0YXJ0T2ZIb3VyKGNoZWNrX3N0YXJ0X3RpbWUpIGFzIGQsCmNvdW50KCksIGdyb3VwVW5pcUFycmF5KHB1bGxfcmVxdWVzdF9udW1iZXIpLCAgYW55KHJlcG9ydF91cmwpCmZyb20gY2hlY2tzIHdoZXJlIHRvZGF5KCkgLSBJTlRFUlZBTCAnMyBtb250aHMnIDw9IGNoZWNrX3N0YXJ0X3RpbWUgYW5kIHRlc3RfbmFtZSBsaWtlICclMDMyMzdfY3JlYXRlX29yX3JlcGxhY2Vfdmlld19hdG9taWNhbGx5X3dpdGhfYXRvbWljX2VuZ2luZSUnIGFuZCB0ZXN0X3N0YXR1cyBpbiAoJ0ZBSUwnLCAnRkxBS1knKSBncm91cCBieSBkIG9yZGVyIGJ5IGQgZGVzYw==\r\n\r\ncc @tuanpach \n",
  "hints_text": "Still flaky and not addressed. Let's revert the PR and reintroduce when fixed",
  "created_at": "2024-10-10T02:12:51Z"
}