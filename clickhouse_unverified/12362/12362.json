{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12362,
  "instance_id": "ClickHouse__ClickHouse-12362",
  "issue_numbers": [
    "10437"
  ],
  "base_commit": "c410ae3ebf69b56d7d5e8e7b5b34bbad476b0390",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex dc50a6a69578..b00d0fb20b48 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -363,7 +363,7 @@ struct Settings : public SettingsCollection<Settings>\n     M(SettingBool, optimize_move_functions_out_of_any, true, \"Move functions out of aggregate functions 'any', 'anyLast'.\", 0) \\\n     M(SettingBool, optimize_arithmetic_operations_in_aggregate_functions, false, \"Move arithmetic operations out of aggregation functions\", 0) \\\n     M(SettingBool, optimize_duplicate_order_by_and_distinct, true, \"Remove duplicate ORDER BY and DISTINCT if it's possible\", 0) \\\n-    M(SettingBool, optimize_if_chain_to_miltiif, false, \"Replace if(cond1, then1, if(cond2, ...)) chains to multiIf. Currently it's not beneficial for numeric types.\", 0) \\\n+    M(SettingBool, optimize_if_chain_to_multiif, false, \"Replace if(cond1, then1, if(cond2, ...)) chains to multiIf. Currently it's not beneficial for numeric types.\", 0) \\\n     M(SettingBool, allow_experimental_alter_materialized_view_structure, false, \"Allow atomic alter on Materialized views. Work in progress.\", 0) \\\n     M(SettingBool, enable_early_constant_folding, true, \"Enable query optimization where we analyze function and subqueries results and rewrite query if there're constants there\", 0) \\\n     \\\ndiff --git a/src/Interpreters/SyntaxAnalyzer.cpp b/src/Interpreters/SyntaxAnalyzer.cpp\nindex 5e83287433b5..c475d4b0cb5f 100644\n--- a/src/Interpreters/SyntaxAnalyzer.cpp\n+++ b/src/Interpreters/SyntaxAnalyzer.cpp\n@@ -546,12 +546,12 @@ void optimizeUsing(const ASTSelectQuery * select_query)\n         expression_list = uniq_expressions_list;\n }\n \n-void optimizeIf(ASTPtr & query, Aliases & aliases, bool if_chain_to_miltiif)\n+void optimizeIf(ASTPtr & query, Aliases & aliases, bool if_chain_to_multiif)\n {\n     /// Optimize if with constant condition after constants was substituted instead of scalar subqueries.\n     OptimizeIfWithConstantConditionVisitor(aliases).visit(query);\n \n-    if (if_chain_to_miltiif)\n+    if (if_chain_to_multiif)\n         OptimizeIfChainsVisitor().visit(query);\n }\n \n@@ -949,7 +949,7 @@ SyntaxAnalyzerResultPtr SyntaxAnalyzer::analyzeSelect(\n     executeScalarSubqueries(query, context, subquery_depth, result.scalars, select_options.only_analyze);\n \n     {\n-        optimizeIf(query, result.aliases, settings.optimize_if_chain_to_miltiif);\n+        optimizeIf(query, result.aliases, settings.optimize_if_chain_to_multiif);\n \n         /// Move arithmetic operations out of aggregation functions\n         optimizeArithmeticOperationsInAgr(query, settings.optimize_arithmetic_operations_in_aggregate_functions);\n@@ -1019,7 +1019,7 @@ SyntaxAnalyzerResultPtr SyntaxAnalyzer::analyze(ASTPtr & query, const NamesAndTy\n     /// Executing scalar subqueries. Column defaults could be a scalar subquery.\n     executeScalarSubqueries(query, context, 0, result.scalars, false);\n \n-    optimizeIf(query, result.aliases, settings.optimize_if_chain_to_miltiif);\n+    optimizeIf(query, result.aliases, settings.optimize_if_chain_to_multiif);\n \n     if (allow_aggregations)\n     {\n",
  "test_patch": "diff --git a/src/Storages/tests/gtest_SplitTokenExtractor.cpp b/src/Storages/tests/gtest_SplitTokenExtractor.cpp\nindex 9255e5ca817e..cb801cff808e 100644\n--- a/src/Storages/tests/gtest_SplitTokenExtractor.cpp\n+++ b/src/Storages/tests/gtest_SplitTokenExtractor.cpp\n@@ -35,7 +35,7 @@ class SplitTokenExtractorTest : public ::testing::TestWithParam<SplitTokenExtrac\n     {\n         const auto & param = GetParam();\n         const auto & source = param.source;\n-        data = std::make_unique<PaddedPODArray<const char>>(source.data(), source.data() + source.size());\n+        data = std::make_unique<PaddedPODArray<char>>(source.data(), source.data() + source.size());\n \n         // add predefined padding that forms tokens to ensure no reads past end of buffer.\n         const char extra_padding[] = \"this is the end \\xd1\\x8d\\xd1\\x82\\xd0\\xbe\\xd0\\xba\\xd0\\xbe \\xd0\\xbd\\xd0\\xb5\\xd1\\x86\";\n@@ -44,7 +44,7 @@ class SplitTokenExtractorTest : public ::testing::TestWithParam<SplitTokenExtrac\n         data->resize(data->size() - sizeof(extra_padding));\n     }\n \n-    std::unique_ptr<PaddedPODArray<const char>> data;\n+    std::unique_ptr<PaddedPODArray<char>> data;\n };\n \n TEST_P(SplitTokenExtractorTest, next)\ndiff --git a/tests/queries/0_stateless/01388_multi_if_optimization.reference b/tests/queries/0_stateless/01388_multi_if_optimization.reference\nnew file mode 100644\nindex 000000000000..6dbe0f0d96f6\n--- /dev/null\n+++ b/tests/queries/0_stateless/01388_multi_if_optimization.reference\n@@ -0,0 +1,4 @@\n+SELECT if(number = 1, \\'hello\\', if(number = 2, \\'world\\', \\'xyz\\'))\n+FROM numbers(10)\n+SELECT multiIf(number = 1, \\'hello\\', number = 2, \\'world\\', \\'xyz\\')\n+FROM numbers(10)\ndiff --git a/tests/queries/0_stateless/01388_multi_if_optimization.sql b/tests/queries/0_stateless/01388_multi_if_optimization.sql\nnew file mode 100644\nindex 000000000000..345fcfb6fcc9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01388_multi_if_optimization.sql\n@@ -0,0 +1,5 @@\n+-- If you are reading this test please note that as of now this setting does not provide benefits in most of the cases.\n+SET optimize_if_chain_to_multiif = 0;\n+EXPLAIN SYNTAX SELECT number = 1 ? 'hello' : (number = 2 ? 'world' : 'xyz') FROM numbers(10);\n+SET optimize_if_chain_to_multiif = 1;\n+EXPLAIN SYNTAX SELECT number = 1 ? 'hello' : (number = 2 ? 'world' : 'xyz') FROM numbers(10);\n",
  "problem_statement": "Mat view subquery + buffer table results in DB::Exception: There is no query\n```\r\nCREATE TABLE t1 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE TABLE t2 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE MATERIALIZED VIEW mv1\r\nTO t2\r\nAS SELECT * FROM (SELECT * FROM t1)\r\n\r\nCREATE TABLE b1 AS t1\r\nENGINE = Buffer(default, t1, 1, 0, 0, 1, 1, 1, 1)\r\n\r\nvmihailenco :) INSERT INTO b1 VALUES (1, now());\r\n\r\nINSERT INTO b1 VALUES\r\n\r\nReceived exception from server (version 20.3.7):\r\nCode: 393. DB::Exception: Received from localhost:9000. DB::Exception: There is no query.\r\n```\n",
  "hints_text": "I'm having same issue,\r\nI have \r\n1. table A engine ReplaceMergeTree()\r\n2. MV B on table A\r\n3. Buffer table on table A\r\n\r\nData is not written to the destination A table from the buffer.\r\nEven DROPing the Buffer that should trigger flush the data fails\r\n\r\n```\r\n2020.05.02 21:31:28.038219 [ 526 ] {06a0c14c-6c81-4204-9ab7-968755e881ce} <Error> virtual void DB::StorageBuffer::shutdown(): Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xbecd55c in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x5009d49 in /usr/bin/clickhouse\r\n2. ? @ 0x4bfb800 in /usr/bin/clickhouse\r\n3. DB::Context::getSampleBlockCache() const @ 0x8cdcb99 in /usr/bin/clickhouse\r\n4. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) @ 0x8da5c02 in /usr/bin/clickhouse\r\n5. ? @ 0x8f365b9 in /usr/bin/clickhouse\r\n6. DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool) @ 0x8f394f8 in /usr/bin/clickhouse\r\n7. DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const @ 0x8ef3983 in /usr/bin/clickhouse\r\n8. ? @ 0x8d6d616 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6e8c8 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n11. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n15. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n17. DB::PushingToViewsBlockOutputStream::PushingToViewsBlockOutputStream(std::__1::shared_ptr<DB::IStorage> const&, DB::Context const&, std::__1::shared_ptr<DB::IAST> const&, bool) @ 0x96f8baa in /usr/bin/clickhouse\r\n18. DB::InterpreterInsertQuery::execute() @ 0x8d4f07f in /usr/bin/clickhouse\r\n19. DB::StorageBuffer::writeBlockToDestination(DB::Block const&, std::__1::shared_ptr<DB::IStorage>) @ 0x99469fe in /usr/bin/clickhouse\r\n20. DB::StorageBuffer::flushBuffer(DB::StorageBuffer::Buffer&, bool, bool) @ 0x994796f in /usr/bin/clickhouse\r\n21. DB::StorageBuffer::optimize(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IAST> const&, bool, bool, DB::Context const&) @ 0x9947baf in /usr/bin/clickhouse\r\n22. DB::StorageBuffer::shutdown() @ 0x9944103 in /usr/bin/clickhouse\r\n23. DB::InterpreterDropQuery::executeToTable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTDropQuery::Kind, bool, bool, bool) @ 0x8d47dd0 in /usr/bin/clickhouse\r\n24. DB::InterpreterDropQuery::execute() @ 0x8d49e3e in /usr/bin/clickhouse\r\n25. ? @ 0x8f2f50a in /usr/bin/clickhouse\r\n26. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0x8f32b06 in /usr/bin/clickhouse\r\n27. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x5084816 in /usr/bin/clickhouse\r\n28. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x5087f03 in /usr/bin/clickhouse\r\n29. Poco::Net::HTTPServerConnection::run() @ 0x9e0480c in /usr/bin/clickhouse\r\n30. Poco::Net::TCPServerConnection::start() @ 0x9e01297 in /usr/bin/clickhouse\r\n31. Poco::Net::TCPServerDispatcher::run() @ 0x9e0168d in /usr/bin/clickhouse\r\n (version 20.2.1.2442 (official build))\r\n```",
  "created_at": "2020-07-09T18:53:24Z"
}