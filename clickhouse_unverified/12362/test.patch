diff --git a/src/Storages/tests/gtest_SplitTokenExtractor.cpp b/src/Storages/tests/gtest_SplitTokenExtractor.cpp
index 9255e5ca817e..cb801cff808e 100644
--- a/src/Storages/tests/gtest_SplitTokenExtractor.cpp
+++ b/src/Storages/tests/gtest_SplitTokenExtractor.cpp
@@ -35,7 +35,7 @@ class SplitTokenExtractorTest : public ::testing::TestWithParam<SplitTokenExtrac
     {
         const auto & param = GetParam();
         const auto & source = param.source;
-        data = std::make_unique<PaddedPODArray<const char>>(source.data(), source.data() + source.size());
+        data = std::make_unique<PaddedPODArray<char>>(source.data(), source.data() + source.size());
 
         // add predefined padding that forms tokens to ensure no reads past end of buffer.
         const char extra_padding[] = "this is the end \xd1\x8d\xd1\x82\xd0\xbe\xd0\xba\xd0\xbe \xd0\xbd\xd0\xb5\xd1\x86";
@@ -44,7 +44,7 @@ class SplitTokenExtractorTest : public ::testing::TestWithParam<SplitTokenExtrac
         data->resize(data->size() - sizeof(extra_padding));
     }
 
-    std::unique_ptr<PaddedPODArray<const char>> data;
+    std::unique_ptr<PaddedPODArray<char>> data;
 };
 
 TEST_P(SplitTokenExtractorTest, next)
diff --git a/tests/queries/0_stateless/01388_multi_if_optimization.reference b/tests/queries/0_stateless/01388_multi_if_optimization.reference
new file mode 100644
index 000000000000..6dbe0f0d96f6
--- /dev/null
+++ b/tests/queries/0_stateless/01388_multi_if_optimization.reference
@@ -0,0 +1,4 @@
+SELECT if(number = 1, \'hello\', if(number = 2, \'world\', \'xyz\'))
+FROM numbers(10)
+SELECT multiIf(number = 1, \'hello\', number = 2, \'world\', \'xyz\')
+FROM numbers(10)
diff --git a/tests/queries/0_stateless/01388_multi_if_optimization.sql b/tests/queries/0_stateless/01388_multi_if_optimization.sql
new file mode 100644
index 000000000000..345fcfb6fcc9
--- /dev/null
+++ b/tests/queries/0_stateless/01388_multi_if_optimization.sql
@@ -0,0 +1,5 @@
+-- If you are reading this test please note that as of now this setting does not provide benefits in most of the cases.
+SET optimize_if_chain_to_multiif = 0;
+EXPLAIN SYNTAX SELECT number = 1 ? 'hello' : (number = 2 ? 'world' : 'xyz') FROM numbers(10);
+SET optimize_if_chain_to_multiif = 1;
+EXPLAIN SYNTAX SELECT number = 1 ? 'hello' : (number = 2 ? 'world' : 'xyz') FROM numbers(10);
