{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40807,
  "instance_id": "ClickHouse__ClickHouse-40807",
  "issue_numbers": [
    "38671"
  ],
  "base_commit": "738551dbf1ce3fadf94511ae6ff5b8729eff308e",
  "patch": "diff --git a/src/Processors/Transforms/buildPushingToViewsChain.cpp b/src/Processors/Transforms/buildPushingToViewsChain.cpp\nindex a58d70a84281..870106d794f4 100644\n--- a/src/Processors/Transforms/buildPushingToViewsChain.cpp\n+++ b/src/Processors/Transforms/buildPushingToViewsChain.cpp\n@@ -387,7 +387,8 @@ Chain buildPushingToViewsChain(\n         chains.emplace_back(std::move(out));\n \n         /// Add the view to the query access info so it can appear in system.query_log\n-        if (!no_destination)\n+        /// hasQueryContext - for materialized tables with background replication process query context is not added\n+        if (!no_destination && context->hasQueryContext())\n         {\n             context->getQueryContext()->addQueryAccessInfo(\n                 backQuoteIfNeed(view_id.getDatabaseName()), views_data->views.back().runtime_stats->target_name, {}, \"\", view_id.getFullTableName());\n@@ -757,7 +758,6 @@ IProcessor::Status FinalizingViewsTransform::prepare()\n         output.finish();\n         return Status::Finished;\n     }\n-\n     return Status::NeedData;\n }\n \n",
  "test_patch": "diff --git a/tests/integration/test_postgresql_replica_database_engine_2/test.py b/tests/integration/test_postgresql_replica_database_engine_2/test.py\nindex 68c7cb96b714..33796336550d 100644\n--- a/tests/integration/test_postgresql_replica_database_engine_2/test.py\n+++ b/tests/integration/test_postgresql_replica_database_engine_2/test.py\n@@ -628,6 +628,27 @@ def test_table_override(started_cluster):\n     assert_eq_with_retry(instance, query, expected)\n \n \n+def test_materialized_view(started_cluster):\n+    cursor = pg_manager.get_db_cursor()\n+    cursor.execute(f\"DROP TABLE IF EXISTS test_table\")\n+    cursor.execute(f\"CREATE TABLE test_table (key integer PRIMARY KEY, value integer)\")\n+    cursor.execute(f\"INSERT INTO test_table SELECT 1, 2\")\n+    instance.query(\"DROP DATABASE IF EXISTS test_database\")\n+    instance.query(\n+        \"CREATE DATABASE test_database ENGINE = MaterializedPostgreSQL(postgres1) SETTINGS materialized_postgresql_tables_list='test_table'\"\n+    )\n+    check_tables_are_synchronized(instance, \"test_table\")\n+    instance.query(\"DROP TABLE IF EXISTS mv\")\n+    instance.query(\n+        \"CREATE MATERIALIZED VIEW mv ENGINE=MergeTree ORDER BY tuple() POPULATE AS SELECT * FROM test_database.test_table\"\n+    )\n+    assert \"1\\t2\" == instance.query(\"SELECT * FROM mv\").strip()\n+    cursor.execute(f\"INSERT INTO test_table SELECT 3, 4\")\n+    check_tables_are_synchronized(instance, \"test_table\")\n+    assert \"1\\t2\\n3\\t4\" == instance.query(\"SELECT * FROM mv ORDER BY 1, 2\").strip()\n+    pg_manager.drop_materialized_db()\n+\n+\n if __name__ == \"__main__\":\n     cluster.start()\n     input(\"Cluster created, press any key to destroy...\")\n",
  "problem_statement": "Replication from PostgreSQL to CH with MaterializedPostgreSQL database engine stopped after materialized view created\nWhen create materialized view on ClickHouse table in materialized PostgreSQL database, replication process not update or insert data into this table. After remove MV, replication resumes, but data lossed. \r\n\r\nClickHouse version: 22.6.1.1399\r\nPostgres version: PostgreSQL 12.11 (Ubuntu 12.11-0ubuntu0.20.04.1)\r\n\r\n\r\n**Postgres:**\r\n\r\n```\r\nCREATE TABLE test.test_table (\r\n\tid int4 NOT NULL,\r\n\tval int4 NOT NULL,\r\n\tCONSTRAINT tt_pk PRIMARY KEY (id)\r\n);\r\nINSERT INTO test.test_table\r\n(id, val)\r\nVALUES(1, 1);\r\n\r\nINSERT INTO test.test_table\r\n(id, val)\r\nVALUES(2, 2);\r\n\r\nSELECT * FROM test.test_table;\r\n\r\nid|val|\r\n--+---+\r\n 1|  1|\r\n 2|  2|\r\n\r\n```\r\n\r\n**ClickHouse:**\r\n\r\n```\r\nCREATE DATABASE mpsql_test \r\nENGINE = MaterializedPostgreSQL\r\n ( \r\n   'localhost:5432', 'test_db', 'postgres', 'postgres'\r\n )\r\n SETTINGS\r\n   materialized_postgresql_schema = 'test',\r\n   materialized_postgresql_tables_list = 'test_table';\r\n\r\nSHOW TABLES FROM mpsql_test;\r\n\r\nname      |\r\n----------+\r\ntest_table|\r\n\r\nSELECT * FROM mpsql_test.test_table;\r\n\r\nid|val|\r\n--+---+\r\n 1|  1|\r\n 2|  2|\r\n\r\n```\r\n**Postgres:**\r\n\r\n```\r\nINSERT INTO test.test_table\r\n(id, val)\r\nVALUES(3, 3);\r\n\r\nSELECT * FROM test.test_table;\r\n\r\nid|val|\r\n--+---+\r\n 1|  1|\r\n 2|  2|\r\n 3|  3|\r\n\r\n```\r\n**ClickHouse:**\r\n\r\n```\r\nSELECT * FROM mpsql_test.test_table;\r\n\r\nid|val|\r\n--+---+\r\n 1|  1|\r\n 2|  2|\r\n 3|  3|\r\n\r\nCREATE DATABASE test_db;\r\n\r\nCREATE MATERIALIZED VIEW test_db.test_view\r\nENGINE = MergeTree()\r\nORDER BY (id)\r\nAS SELECT * from mpsql_test.test_table;\r\n\r\nSELECT * FROM test_db.test_view;\r\nid|val|\r\n--+---+\r\n\r\n\r\n```\r\n**Postgres:**\r\n\r\n```\r\nINSERT INTO test.test_table\r\n(id, val)\r\nVALUES(4, 4);\r\n\r\nINSERT INTO test.test_table\r\n(id, val)\r\nVALUES(5, 5);\r\n\r\nSELECT * FROM test.test_table;\r\nid|val|\r\n--+---+\r\n 1|  1|\r\n 2|  2|\r\n 3|  3|\r\n 4|  4|\r\n 5|  5|\r\n\r\n```\r\n**ClickHouse:**\r\n\r\n```\r\nSELECT * FROM mpsql_test.test_table;\r\nid|val|\r\n--+---+\r\n 1|  1|\r\n 2|  2|\r\n 3|  3|\r\n\r\nDROP VIEW test_db.test_view;\r\n\r\nSELECT * FROM mpsql_test.test_table;\r\nid|val|\r\n--+---+\r\n 1|  1|\r\n 2|  2|\r\n 3|  3|\r\n\r\n```\r\n**Postgres:**\r\n\r\n```\r\nINSERT INTO test.test_table\r\n(id, val)\r\nVALUES(6, 6);\r\n\r\nINSERT INTO test.test_table\r\n(id, val)\r\nVALUES(7, 7);\r\n\r\nSELECT * FROM test.test_table;\r\nid|val|\r\n--+---+\r\n 1|  1|\r\n 2|  2|\r\n 3|  3|\r\n 4|  4|\r\n 5|  5|\r\n 6|  6|\r\n 7|  7|\r\n\r\n```\r\n**ClickHouse:**\r\n\r\n```\r\nSELECT * FROM mpsql_test.test_table;\r\n\r\nid|val|\r\n--+---+\r\n 1|  1|\r\n 2|  2|\r\n 3|  3|\r\n 6|  6|\r\n 7|  7|\r\n\r\n```\n",
  "hints_text": "",
  "created_at": "2022-08-30T12:18:11Z"
}