diff --git a/tests/integration/test_storage_dict/__init__.py b/tests/integration/test_storage_dict/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/integration/test_storage_dict/configs/conf.xml b/tests/integration/test_storage_dict/configs/conf.xml
new file mode 100644
index 000000000000..e37ca358e634
--- /dev/null
+++ b/tests/integration/test_storage_dict/configs/conf.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0"?>
+<clickhouse>
+    <named_collections>
+        <urldb>
+            <url>http://nginx:80/test_dict</url>
+            <method>PUT</method>
+            <format>TSV</format>
+            <structure>k String, v String</structure>
+        </urldb>
+        <urldict>
+            <url>http://nginx:80/</url>
+            <endpoint>/test_dict</endpoint>
+            <format>TabSeparated</format>
+        </urldict>
+        <urldict1>
+            <url>http://nginx:80/</url>
+            <endpoint>/test_dict</endpoint>
+        </urldict1>
+        <urldict2>
+            <url>http://nginx:80/</url>
+            <endpoint>/test_dict</endpoint>
+            <format>CSV</format>
+        </urldict2>
+    </named_collections>
+</clickhouse>
diff --git a/tests/integration/test_storage_dict/test.py b/tests/integration/test_storage_dict/test.py
new file mode 100644
index 000000000000..1ed974f267d7
--- /dev/null
+++ b/tests/integration/test_storage_dict/test.py
@@ -0,0 +1,46 @@
+import pytest
+
+from helpers.cluster import ClickHouseCluster
+
+uuids = []
+
+
+@pytest.fixture(scope="module")
+def cluster():
+    try:
+        cluster = ClickHouseCluster(__file__)
+        cluster.add_instance(
+            "node1", main_configs=["configs/conf.xml"], with_nginx=True
+        )
+        cluster.start()
+
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+def test_storage_dict(cluster):
+    node1 = cluster.instances["node1"]
+
+    node1.query(f"insert into table function url(urldb) values ('foo', 'bar')")
+    result = node1.query(f"select * from url(urldb)")
+    assert result.strip() == "foo\tbar"
+
+    node1.query(
+        f"create dictionary dict (k String, v String) primary key k source(http(name urldict)) layout(complex_key_hashed()) lifetime(min 0 max 100)"
+    )
+    result = node1.query(f"select * from dict")
+    assert result.strip() == "foo\tbar"
+
+    node1.query(
+        f"create dictionary dict1 (k String, v String) primary key k source(http(name urldict1 format TabSeparated)) layout(complex_key_hashed()) lifetime(min 0 max 100)"
+    )
+    result = node1.query(f"select * from dict1")
+    assert result.strip() == "foo\tbar"
+
+    node1.query(
+        f"create dictionary dict2 (k String, v String) primary key k source(http(name urldict2 format TabSeparated)) layout(complex_key_hashed()) lifetime(min 0 max 100)"
+    )
+    result = node1.query(f"select * from dict2")
+    assert result.strip() == "foo\tbar"
