{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15192,
  "instance_id": "ClickHouse__ClickHouse-15192",
  "issue_numbers": [
    "15117"
  ],
  "base_commit": "626c2dad9f84c686b743fa14cf3b5b870e94bd96",
  "patch": "diff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex 5b9957f4ed4d..14f188275e5e 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -547,7 +547,7 @@ bool StorageBuffer::optimize(\n     if (deduplicate)\n         throw Exception(\"DEDUPLICATE cannot be specified when optimizing table of type Buffer\", ErrorCodes::NOT_IMPLEMENTED);\n \n-    flushAllBuffers(false);\n+    flushAllBuffers(false, true);\n     return true;\n }\n \n@@ -595,14 +595,14 @@ bool StorageBuffer::checkThresholdsImpl(size_t rows, size_t bytes, time_t time_p\n }\n \n \n-void StorageBuffer::flushAllBuffers(const bool check_thresholds)\n+void StorageBuffer::flushAllBuffers(bool check_thresholds, bool reset_blocks_structure)\n {\n     for (auto & buf : buffers)\n-        flushBuffer(buf, check_thresholds);\n+        flushBuffer(buf, check_thresholds, false, reset_blocks_structure);\n }\n \n \n-void StorageBuffer::flushBuffer(Buffer & buffer, bool check_thresholds, bool locked)\n+void StorageBuffer::flushBuffer(Buffer & buffer, bool check_thresholds, bool locked, bool reset_block_structure)\n {\n     Block block_to_write;\n     time_t current_time = time(nullptr);\n@@ -655,6 +655,8 @@ void StorageBuffer::flushBuffer(Buffer & buffer, bool check_thresholds, bool loc\n     try\n     {\n         writeBlockToDestination(block_to_write, DatabaseCatalog::instance().tryGetTable(destination_id, global_context));\n+        if (reset_block_structure)\n+            buffer.data.clear();\n     }\n     catch (...)\n     {\n@@ -829,7 +831,9 @@ void StorageBuffer::alter(const AlterCommands & params, const Context & context,\n     checkAlterIsPossible(params, context.getSettingsRef());\n     auto metadata_snapshot = getInMemoryMetadataPtr();\n \n-    /// So that no blocks of the old structure remain.\n+    /// Flush all buffers to storages, so that no non-empty blocks of the old\n+    /// structure remain. Structure of empty blocks will be updated during first\n+    /// insert.\n     optimize({} /*query*/, metadata_snapshot, {} /*partition_id*/, false /*final*/, false /*deduplicate*/, context);\n \n     StorageInMemoryMetadata new_metadata = *metadata_snapshot;\ndiff --git a/src/Storages/StorageBuffer.h b/src/Storages/StorageBuffer.h\nindex 8f1354399efd..b18b574ec6c5 100644\n--- a/src/Storages/StorageBuffer.h\n+++ b/src/Storages/StorageBuffer.h\n@@ -130,9 +130,11 @@ friend class BufferBlockOutputStream;\n \n     Poco::Logger * log;\n \n-    void flushAllBuffers(bool check_thresholds = true);\n-    /// Reset the buffer. If check_thresholds is set - resets only if thresholds are exceeded.\n-    void flushBuffer(Buffer & buffer, bool check_thresholds, bool locked = false);\n+    void flushAllBuffers(bool check_thresholds = true, bool reset_blocks_structure = false);\n+    /// Reset the buffer. If check_thresholds is set - resets only if thresholds\n+    /// are exceeded. If reset_block_structure is set - clears inner block\n+    /// structure inside buffer (useful in OPTIMIZE and ALTER).\n+    void flushBuffer(Buffer & buffer, bool check_thresholds, bool locked = false, bool reset_block_structure = false);\n     bool checkThresholds(const Buffer & buffer, time_t current_time, size_t additional_rows = 0, size_t additional_bytes = 0) const;\n     bool checkThresholdsImpl(size_t rows, size_t bytes, time_t time_passed) const;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01506_buffer_table_alter_block_structure.reference b/tests/queries/0_stateless/01506_buffer_table_alter_block_structure.reference\nnew file mode 100644\nindex 000000000000..1f90610041b0\n--- /dev/null\n+++ b/tests/queries/0_stateless/01506_buffer_table_alter_block_structure.reference\n@@ -0,0 +1,3 @@\n+2020-01-01 00:05:00\t\n+2020-01-01 00:05:00\t\n+2020-01-01 00:06:00\thello\ndiff --git a/tests/queries/0_stateless/01506_buffer_table_alter_block_structure.sql b/tests/queries/0_stateless/01506_buffer_table_alter_block_structure.sql\nnew file mode 100644\nindex 000000000000..cba7d84fac6e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01506_buffer_table_alter_block_structure.sql\n@@ -0,0 +1,22 @@\n+DROP TABLE IF EXISTS buf_dest;\n+DROP TABLE IF EXISTS buf;\n+\n+CREATE TABLE buf_dest (timestamp DateTime)\n+ENGINE = MergeTree PARTITION BY toYYYYMMDD(timestamp)\n+ORDER BY (timestamp);\n+\n+CREATE TABLE buf (timestamp DateTime) Engine = Buffer(currentDatabase(), buf_dest, 16, 3, 20, 2000000, 20000000, 100000000, 300000000);;\n+\n+INSERT INTO buf (timestamp) VALUES (toDateTime('2020-01-01 00:05:00'));\n+\n+ALTER TABLE buf_dest ADD COLUMN s String;\n+ALTER TABLE buf ADD COLUMN s String;\n+\n+SELECT * FROM buf;\n+\n+INSERT INTO buf (timestamp, s) VALUES (toDateTime('2020-01-01 00:06:00'), 'hello');\n+\n+SELECT * FROM buf ORDER BY timestamp;\n+\n+DROP TABLE IF EXISTS buf;\n+DROP TABLE IF EXISTS buf_dest;\n",
  "problem_statement": "ALTER TABLE ADD COLUMN on Buffer table breaks block structure\n**Describe the bug**\r\nINSERT fails after adding a column to a buffer table.\r\nFYI SELECT works.\r\n\r\n**How to reproduce**\r\n* ClickHouse server version 20.8.3.18 Debian official build.  Error message showed version 20.8.2.\r\n* `CREATE TABLE` statement\r\n```\r\nCREATE TABLE t_local (timestamp DateTime)\r\nENGINE = MergeTree PARTITION BY toYYYYMMDD(timestamp)\r\nORDER BY ( timestamp )\r\n;\r\nCREATE TABLE t_buffer (timestamp DateTime)\r\nEngine = Buffer(default, t_local, 16, 3, 20, 2000000, 20000000, 100000000, 300000000);\r\n```\r\n\r\n* Queries to run that lead to unexpected result\r\n```\r\nINSERT INTO t_buffer (timestamp) VALUES (now());\r\n\r\nALTER TABLE t_local ADD COLUMN s String;\r\nALTER TABLE t_buffer ADD COLUMN s String;\r\n\r\n-- SELECT works.   It successfully returns two columns\r\nSELECT * FROM t_buffer;  \r\n\r\n-- INSERT fails\r\nINSERT INTO t_buffer (timestamp, s) VALUES (now(), 'hello'); \r\n```\r\n\r\n**Expected behavior**\r\nINSERT should be successful.\r\n\r\n**Error message**\r\n```\r\nReceived exception from server (version 20.8.2):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Block structure mismatch in Buffer stream: different number of columns:\r\ns String String(size = 1), timestamp DateTime UInt32(size = 1)\r\ntimestamp DateTime UInt32(size = 0).\r\n```\r\n\r\n**Stack trace**\r\n```\r\n2020.09.22 05:14:31.973903 [ 2044016 ] {5dede1ca-e5c5-4f57-bac1-ba11a89fdbdc} <Error> executeQuery: Code: 49, e.displayText() = DB::Exception: Block structure mismatch in Buffer stream: different number of columns:\r\ns String String(size = 1), timestamp DateTime UInt32(size = 1)\r\ntimestamp DateTime UInt32(size = 0) (version 20.8.2.3 (official build)) (from [::1]:44036) (in query: INSERT into t_buffer (timestamp, s) values ), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1a80ae30 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xff9e75d in /usr/bin/clickhouse\r\n2. ? @ 0x16f1b264 in /usr/bin/clickhouse\r\n3. ? @ 0x16f16906 in /usr/bin/clickhouse\r\n4. DB::BufferBlockOutputStream::insertIntoBuffer(DB::Block const&, DB::StorageBuffer::Buffer&) @ 0x17aea10a in /usr/bin/clickhouse\r\n5. DB::BufferBlockOutputStream::write(DB::Block const&) @ 0x17aeae41 in /usr/bin/clickhouse\r\n6. DB::PushingToViewsBlockOutputStream::write(DB::Block const&) @ 0x17453176 in /usr/bin/clickhouse\r\n7. DB::AddingDefaultBlockOutputStream::write(DB::Block const&) @ 0x17459329 in /usr/bin/clickhouse\r\n8. DB::SquashingBlockOutputStream::finalize() @ 0x17458b77 in /usr/bin/clickhouse\r\n9. DB::SquashingBlockOutputStream::writeSuffix() @ 0x17458c5d in /usr/bin/clickhouse\r\n10. DB::TCPHandler::processInsertQuery(DB::Settings const&) @ 0x17e9c4aa in /usr/bin/clickhouse\r\n11. DB::TCPHandler::runImpl() @ 0x17e9d6ab in /usr/bin/clickhouse\r\n12. DB::TCPHandler::run() @ 0x17e9dd50 in /usr/bin/clickhouse\r\n13. Poco::Net::TCPServerConnection::start() @ 0x1a728c9b in /usr/bin/clickhouse\r\n14. Poco::Net::TCPServerDispatcher::run() @ 0x1a72912b in /usr/bin/clickhouse\r\n15. Poco::PooledThread::run() @ 0x1a8a7c06 in /usr/bin/clickhouse\r\n16. Poco::ThreadImpl::runnableEntry(void*) @ 0x1a8a3000 in /usr/bin/clickhouse\r\n17. start_thread @ 0x9609 in /lib/x86_64-linux-gnu/libpthread-2.31.so\r\n18. /build/glibc-YYA7BZ/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __GI___clone @ 0x122103 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\r\n\r\n**Additional context**\r\nTo work around the problem DROP and CREATE t_buffer table with s String column.  Make sure the content of the buffer table has been flushed to the local table before dropping.\r\n\n",
  "hints_text": "",
  "created_at": "2020-09-23T12:08:49Z",
  "modified_files": [
    "src/Storages/StorageBuffer.cpp",
    "src/Storages/StorageBuffer.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01506_buffer_table_alter_block_structure.reference",
    "b/tests/queries/0_stateless/01506_buffer_table_alter_block_structure.sql"
  ]
}