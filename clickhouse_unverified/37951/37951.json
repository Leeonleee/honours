{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37951,
  "instance_id": "ClickHouse__ClickHouse-37951",
  "issue_numbers": [
    "16260"
  ],
  "base_commit": "fffeab2e86dde41f9f04860d9f5c26cafc8f7082",
  "patch": "diff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md\nindex 621429fb02cb..8a595b63bdfc 100644\n--- a/docs/en/sql-reference/functions/date-time-functions.md\n+++ b/docs/en/sql-reference/functions/date-time-functions.md\n@@ -950,9 +950,28 @@ SELECT\n \n ## timeSlots(StartTime, Duration,\\[, Size\\])\n \n-For a time interval starting at \u2018StartTime\u2019 and continuing for \u2018Duration\u2019 seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the \u2018Size\u2019 in seconds. \u2018Size\u2019 is an optional parameter: a constant UInt32, set to 1800 by default.\n-For example, `timeSlots(toDateTime('2012-01-01 12:20:00'), 600) = [toDateTime('2012-01-01 12:00:00'), toDateTime('2012-01-01 12:30:00')]`.\n-This is necessary for searching for pageviews in the corresponding session.\n+For a time interval starting at \u2018StartTime\u2019 and continuing for \u2018Duration\u2019 seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the \u2018Size\u2019 in seconds. \u2018Size\u2019 is an optional parameter set to 1800 (30 minutes) by default.  \n+This is necessary, for example, when searching for pageviews in the corresponding session.  \n+Accepts DateTime and DateTime64 as \u2019StartTime\u2019 argument. For DateTime, \u2019Duration\u2019 and \u2019Size\u2019 arguments must be `UInt32`. For \u2019DateTime64\u2019 they must be `Decimal64`.  \n+Returns an array of DateTime/DateTime64 (return type matches the type of \u2019StartTime\u2019). For DateTime64, the return value's scale can differ from the scale of \u2019StartTime\u2019 --- the highest scale among all given arguments is taken.\n+\n+Example:\n+```sql\n+SELECT timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600));\n+SELECT timeSlots(toDateTime('1980-12-12 21:01:02', 'UTC'), toUInt32(600), 299);\n+SELECT timeSlots(toDateTime64('1980-12-12 21:01:02.1234', 4, 'UTC'), toDecimal64(600.1, 1), toDecimal64(299, 0));\n+``` \n+``` text\n+\u250c\u2500timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600))\u2500\u2510\n+\u2502 ['2012-01-01 12:00:00','2012-01-01 12:30:00']               \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500timeSlots(toDateTime('1980-12-12 21:01:02', 'UTC'), toUInt32(600), 299)\u2500\u2510\n+\u2502 ['1980-12-12 20:56:13','1980-12-12 21:01:12','1980-12-12 21:06:11']     \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500timeSlots(toDateTime64('1980-12-12 21:01:02.1234', 4, 'UTC'), toDecimal64(600.1, 1), toDecimal64(299, 0))\u2500\u2510\n+\u2502 ['1980-12-12 20:56:13.0000','1980-12-12 21:01:12.0000','1980-12-12 21:06:11.0000']                        \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n \n ## formatDateTime\n \ndiff --git a/docs/ru/sql-reference/functions/date-time-functions.md b/docs/ru/sql-reference/functions/date-time-functions.md\nindex da48cd940a72..5a214fe2664b 100644\n--- a/docs/ru/sql-reference/functions/date-time-functions.md\n+++ b/docs/ru/sql-reference/functions/date-time-functions.md\n@@ -944,14 +944,31 @@ SELECT now('Europe/Moscow');\n ## timeSlot {#timeslot}\n \n \u041e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u0434\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0441\u0430.\n-\u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e\u0439 \u0434\u043b\u044f \u042f\u043d\u0434\u0435\u043a\u0441.\u041c\u0435\u0442\u0440\u0438\u043a\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u043b \u0447\u0430\u0441\u0430 - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e, \u0435\u0441\u043b\u0438 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0445\u0438\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0435 \u043e\u0442\u0441\u0442\u043e\u044f\u0442 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u0441\u0442\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c \u043d\u0430 \u044d\u0442\u043e \u0432\u0440\u0435\u043c\u044f, \u0432\u0438\u0437\u0438\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0431\u0438\u0442 \u043d\u0430 \u0434\u0432\u0430 \u0432\u0438\u0437\u0438\u0442\u0430. \u0422\u043e \u0435\u0441\u0442\u044c, \u043a\u043e\u0440\u0442\u0435\u0436\u0438 (\u043d\u043e\u043c\u0435\u0440 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0430, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f, \u0442\u0430\u0439\u043c-\u0441\u043b\u043e\u0442) \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0445\u0438\u0442\u043e\u0432, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0432\u0438\u0437\u0438\u0442.\n+\u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e\u0439 \u0434\u043b\u044f \u042f\u043d\u0434\u0435\u043a\u0441.\u041c\u0435\u0442\u0440\u0438\u043a\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u043b\u0447\u0430\u0441\u0430 - \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e, \u0435\u0441\u043b\u0438 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0445\u0438\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0435 \u043e\u0442\u0441\u0442\u043e\u044f\u0442 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u0441\u0442\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c \u043d\u0430 \u044d\u0442\u043e \u0432\u0440\u0435\u043c\u044f, \u0432\u0438\u0437\u0438\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0431\u0438\u0442 \u043d\u0430 \u0434\u0432\u0430 \u0432\u0438\u0437\u0438\u0442\u0430. \u0422\u043e \u0435\u0441\u0442\u044c, \u043a\u043e\u0440\u0442\u0435\u0436\u0438 (\u043d\u043e\u043c\u0435\u0440 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0430, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f, \u0442\u0430\u0439\u043c-\u0441\u043b\u043e\u0442) \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0445\u0438\u0442\u043e\u0432, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0432\u0438\u0437\u0438\u0442.\n \n ## timeSlots(StartTime, Duration,\\[, Size\\]) {#timeslotsstarttime-duration-size}\n+\u0414\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0432 `StartTime` \u0438 \u0434\u043b\u044f\u0449\u0435\u0433\u043e\u0441\u044f `Duration` \u0441\u0435\u043a\u0443\u043d\u0434, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u0440\u0430\u0442\u043d\u044b\u0445 `Size`. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `Size` \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u043d \u0440\u0430\u0432\u0435\u043d 1800 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u043c (30 \u043c\u0438\u043d\u0443\u0442\u0430\u043c) - \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440.\n+\u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0437\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e. \n+\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 `StartTime` \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0442\u0438\u043f `DateTime` \u0438\u043b\u0438 `DateTime64`. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f `DateTime`, \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b `Duration` \u0438 `Size` \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0442\u0438\u043f `UInt32`; \u0414\u043b\u044f DateTime64 \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0442\u0438\u043f\u0430 `Decimal64`.  \n+\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 DateTime/DateTime64 (\u0442\u0438\u043f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u0442\u0438\u043f\u043e\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u2019StartTime\u2019). \u0414\u043b\u044f DateTime64 \u043c\u0430\u0441\u0448\u0442\u0430\u0431(scale) \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430 \u0444\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u2019StartTime\u2019 --- \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043c\u0430\u0441\u0448\u0442\u0430\u0431 \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n \n-\u0414\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0432 \u2018StartTime\u2019 \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u2018Duration\u2019 \u0441\u0435\u043a\u0443\u043d\u0434, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0439 \u0432\u043d\u0438\u0437 \u0434\u043e \u2018Size\u2019 \u0442\u043e\u0447\u0435\u043a \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430. \u2018Size\u2019 - \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0439 UInt32, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0440\u0430\u0432\u0435\u043d 1800.\n-\n-\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, `timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600)) = [toDateTime('2012-01-01 12:00:00'), toDateTime('2012-01-01 12:30:00')]`.\n-\u042d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0445\u0438\u0442\u043e\u0432, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0432\u0438\u0437\u0438\u0442.\n+\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:\n+```sql\n+SELECT timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600));\n+SELECT timeSlots(toDateTime('1980-12-12 21:01:02', 'UTC'), toUInt32(600), 299);\n+SELECT timeSlots(toDateTime64('1980-12-12 21:01:02.1234', 4, 'UTC'), toDecimal64(600.1, 1), toDecimal64(299, 0));\n+```\n+``` text\n+\u250c\u2500timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600))\u2500\u2510\n+\u2502 ['2012-01-01 12:00:00','2012-01-01 12:30:00']               \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500timeSlots(toDateTime('1980-12-12 21:01:02', 'UTC'), toUInt32(600), 299)\u2500\u2510\n+\u2502 ['1980-12-12 20:56:13','1980-12-12 21:01:12','1980-12-12 21:06:11']     \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500timeSlots(toDateTime64('1980-12-12 21:01:02.1234', 4, 'UTC'), toDecimal64(600.1, 1), toDecimal64(299, 0))\u2500\u2510\n+\u2502 ['1980-12-12 20:56:13.0000','1980-12-12 21:01:12.0000','1980-12-12 21:06:11.0000']                        \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n \n ## toYYYYMM\n \ndiff --git a/src/Functions/timeSlots.cpp b/src/Functions/timeSlots.cpp\nindex a19ccf62565e..382d7131bf38 100644\n--- a/src/Functions/timeSlots.cpp\n+++ b/src/Functions/timeSlots.cpp\n@@ -1,6 +1,7 @@\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeDateTime64.h>\n+#include <DataTypes/DataTypesDecimal.h>\n #include <Columns/ColumnArray.h>\n #include <Columns/ColumnsNumber.h>\n \n@@ -23,9 +24,9 @@ namespace ErrorCodes\n namespace\n {\n \n-/** timeSlots(StartTime, Duration)\n+/** timeSlots(StartTime, Duration[, Size=1800])\n   * - for the time interval beginning at `StartTime` and continuing `Duration` seconds,\n-  *   returns an array of time points, consisting of rounding down to half an hour (default; or another value) of points from this interval.\n+  *   returns an array of time points, consisting of rounding down to Size (1800 seconds by default) of points from this interval.\n   *  For example, timeSlots(toDateTime('2012-01-01 12:20:00'), 600) = [toDateTime('2012-01-01 12:00:00'), toDateTime('2012-01-01 12:30:00')].\n   *  This is necessary to search for hits that are part of the corresponding visit.\n   *\n@@ -33,11 +34,11 @@ namespace\n   * But this function was adopted by wider audience.\n   */\n \n-template <typename DurationType>\n struct TimeSlotsImpl\n {\n+    /// The following three methods process DateTime type\n     static void vectorVector(\n-        const PaddedPODArray<UInt32> & starts, const PaddedPODArray<DurationType> & durations, UInt32 time_slot_size,\n+        const PaddedPODArray<UInt32> & starts, const PaddedPODArray<UInt32> & durations, UInt32 time_slot_size,\n         PaddedPODArray<UInt32> & result_values, ColumnArray::Offsets & result_offsets)\n     {\n         size_t size = starts.size();\n@@ -59,7 +60,7 @@ struct TimeSlotsImpl\n     }\n \n     static void vectorConstant(\n-        const PaddedPODArray<UInt32> & starts, DurationType duration, UInt32 time_slot_size,\n+        const PaddedPODArray<UInt32> & starts, UInt32 duration, UInt32 time_slot_size,\n         PaddedPODArray<UInt32> & result_values, ColumnArray::Offsets & result_offsets)\n     {\n         size_t size = starts.size();\n@@ -81,7 +82,7 @@ struct TimeSlotsImpl\n     }\n \n     static void constantVector(\n-        UInt32 start, const PaddedPODArray<DurationType> & durations, UInt32 time_slot_size,\n+        UInt32 start, const PaddedPODArray<UInt32> & durations, UInt32 time_slot_size,\n         PaddedPODArray<UInt32> & result_values, ColumnArray::Offsets & result_offsets)\n     {\n         size_t size = durations.size();\n@@ -101,6 +102,99 @@ struct TimeSlotsImpl\n             result_offsets[i] = current_offset;\n         }\n     }\n+    /*\n+    The following three methods process DateTime64 type\n+    NO_SANITIZE_UNDEFINED is put here because user shall be careful when working with Decimal\n+    Adjusting different scales can cause overflow -- it is OK for us. Don't use scales that differ a lot :)\n+    */\n+    static NO_SANITIZE_UNDEFINED void vectorVector(\n+        const PaddedPODArray<DateTime64> & starts, const PaddedPODArray<Decimal64> & durations, Decimal64 time_slot_size,\n+        PaddedPODArray<DateTime64> & result_values, ColumnArray::Offsets & result_offsets, UInt16 dt_scale, UInt16 duration_scale, UInt16 time_slot_scale)\n+    {\n+        size_t size = starts.size();\n+\n+        result_offsets.resize(size);\n+        result_values.reserve(size);\n+\n+        /// Modify all units to have same scale\n+        UInt16 max_scale = std::max({dt_scale, duration_scale, time_slot_scale});\n+\n+        Int64 dt_multiplier = DecimalUtils::scaleMultiplier<DateTime64>(max_scale - dt_scale);\n+        Int64 dur_multiplier = DecimalUtils::scaleMultiplier<DateTime64>(max_scale - duration_scale);\n+        Int64 ts_multiplier = DecimalUtils::scaleMultiplier<DateTime64>(max_scale - time_slot_scale);\n+\n+        ColumnArray::Offset current_offset = 0;\n+        time_slot_size = time_slot_size.value * ts_multiplier;\n+        for (size_t i = 0; i < size; ++i)\n+        {\n+            for (DateTime64 value = (starts[i] * dt_multiplier) / time_slot_size, end = (starts[i] * dt_multiplier + durations[i] * dur_multiplier) / time_slot_size; value <= end; value += 1)\n+            {\n+                result_values.push_back(value * time_slot_size);\n+                ++current_offset;\n+            }\n+            result_offsets[i] = current_offset;\n+        }\n+    }\n+\n+    static NO_SANITIZE_UNDEFINED void vectorConstant(\n+        const PaddedPODArray<DateTime64> & starts, Decimal64 duration, Decimal64 time_slot_size,\n+        PaddedPODArray<DateTime64> & result_values, ColumnArray::Offsets & result_offsets, UInt16 dt_scale, UInt16 duration_scale, UInt16 time_slot_scale)\n+    {\n+        size_t size = starts.size();\n+\n+        result_offsets.resize(size);\n+        result_values.reserve(size);\n+\n+        /// Modify all units to have same scale\n+        UInt16 max_scale = std::max({dt_scale, duration_scale, time_slot_scale});\n+\n+        Int64 dt_multiplier = DecimalUtils::scaleMultiplier<DateTime64>(max_scale - dt_scale);\n+        Int64 dur_multiplier = DecimalUtils::scaleMultiplier<DateTime64>(max_scale - duration_scale);\n+        Int64 ts_multiplier = DecimalUtils::scaleMultiplier<DateTime64>(max_scale - time_slot_scale);\n+\n+        ColumnArray::Offset current_offset = 0;\n+        duration = duration * dur_multiplier;\n+        time_slot_size = time_slot_size.value * ts_multiplier;\n+        for (size_t i = 0; i < size; ++i)\n+        {\n+            for (DateTime64 value = (starts[i] * dt_multiplier) / time_slot_size, end = (starts[i] * dt_multiplier + duration) / time_slot_size; value <= end; value += 1)\n+            {\n+                result_values.push_back(value * time_slot_size);\n+                ++current_offset;\n+            }\n+            result_offsets[i] = current_offset;\n+        }\n+    }\n+\n+    static NO_SANITIZE_UNDEFINED void constantVector(\n+        DateTime64 start, const PaddedPODArray<Decimal64> & durations, Decimal64 time_slot_size,\n+        PaddedPODArray<DateTime64> & result_values, ColumnArray::Offsets & result_offsets, UInt16 dt_scale, UInt16 duration_scale, UInt16 time_slot_scale)\n+    {\n+        size_t size = durations.size();\n+\n+        result_offsets.resize(size);\n+        result_values.reserve(size);\n+\n+        /// Modify all units to have same scale\n+        UInt16 max_scale = std::max({dt_scale, duration_scale, time_slot_scale});\n+\n+        Int64 dt_multiplier = DecimalUtils::scaleMultiplier<DateTime64>(max_scale - dt_scale);\n+        Int64 dur_multiplier = DecimalUtils::scaleMultiplier<DateTime64>(max_scale - duration_scale);\n+        Int64 ts_multiplier = DecimalUtils::scaleMultiplier<DateTime64>(max_scale - time_slot_scale);\n+\n+        ColumnArray::Offset current_offset = 0;\n+        start = dt_multiplier * start;\n+        time_slot_size = time_slot_size.value * ts_multiplier;\n+        for (size_t i = 0; i < size; ++i)\n+        {\n+            for (DateTime64 value = start / time_slot_size, end = (start + durations[i] * dur_multiplier) / time_slot_size; value <= end; value += 1)\n+            {\n+                result_values.push_back(value * time_slot_size);\n+                ++current_offset;\n+            }\n+            result_offsets[i] = current_offset;\n+        }\n+    }\n };\n \n \n@@ -108,7 +202,6 @@ class FunctionTimeSlots : public IFunction\n {\n public:\n     static constexpr auto name = \"timeSlots\";\n-    static constexpr UInt32 TIME_SLOT_SIZE = 1800;\n     static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionTimeSlots>(); }\n \n     String getName() const override\n@@ -129,67 +222,154 @@ class FunctionTimeSlots : public IFunction\n                             + toString(arguments.size()) + \", should be 2 or 3\",\n                             ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n \n-        if (!WhichDataType(arguments[0].type).isDateTime())\n-            throw Exception(\"Illegal type \" + arguments[0].type->getName() + \" of first argument of function \" + getName() + \". Must be DateTime.\",\n-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n-\n-        if (!WhichDataType(arguments[1].type).isUInt32())\n-            throw Exception(\"Illegal type \" + arguments[1].type->getName() + \" of second argument of function \" + getName() + \". Must be UInt32.\",\n-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n-\n-        if (arguments.size() == 3 && !WhichDataType(arguments[2].type).isNativeUInt())\n-            throw Exception(\"Illegal type \" + arguments[2].type->getName() + \" of third argument of function \" + getName() + \". Must be UInt32.\",\n-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+        if (WhichDataType(arguments[0].type).isDateTime())\n+        {\n+            if (!WhichDataType(arguments[1].type).isUInt32())\n+                throw Exception(\n+                    \"Illegal type \" + arguments[1].type->getName() + \" of second argument of function \" + getName() + \". Must be UInt32 when first argument is DateTime.\",\n+                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+\n+            if (arguments.size() == 3 && !WhichDataType(arguments[2].type).isNativeUInt())\n+                throw Exception(\n+                    \"Illegal type \" + arguments[2].type->getName() + \" of third argument of function \" + getName() + \". Must be UInt32 when first argument is DateTime.\",\n+                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+        }\n+        else if (WhichDataType(arguments[0].type).isDateTime64())\n+        {\n+            if (!WhichDataType(arguments[1].type).isDecimal64())\n+                throw Exception(\n+                    \"Illegal type \" + arguments[1].type->getName() + \" of second argument of function \" + getName() + \". Must be Decimal64 when first argument is DateTime64.\",\n+                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+\n+            if (arguments.size() == 3 && !WhichDataType(arguments[2].type).isDecimal64())\n+                throw Exception(\n+                    \"Illegal type \" + arguments[2].type->getName() + \" of third argument of function \" + getName() + \". Must be Decimal64 when first argument is DateTime64.\",\n+                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+        }\n+        else\n+            throw Exception(\"Illegal type \" + arguments[0].type->getName() + \" of first argument of function \" + getName()\n+                                + \". Must be DateTime or DateTime64.\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n \n         /// If time zone is specified for source data type, attach it to the resulting type.\n         /// Note that there is no explicit time zone argument for this function (we specify 2 as an argument number with explicit time zone).\n-        return std::make_shared<DataTypeArray>(std::make_shared<DataTypeDateTime>(extractTimeZoneNameFromFunctionArguments(arguments, 3, 0)));\n+        if (WhichDataType(arguments[0].type).isDateTime())\n+        {\n+            return std::make_shared<DataTypeArray>(std::make_shared<DataTypeDateTime>(extractTimeZoneNameFromFunctionArguments(arguments, 3, 0)));\n+        }\n+        else\n+        {\n+            auto start_time_scale = assert_cast<const DataTypeDateTime64 &>(*arguments[0].type).getScale();\n+            auto duration_scale = assert_cast<const DataTypeDecimal64 &>(*arguments[1].type).getScale();\n+            return std::make_shared<DataTypeArray>(\n+                std::make_shared<DataTypeDateTime64>(std::max(start_time_scale, duration_scale), extractTimeZoneNameFromFunctionArguments(arguments, 3, 0)));\n+        }\n+\n     }\n \n     ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t) const override\n     {\n-        const auto * starts = checkAndGetColumn<ColumnUInt32>(arguments[0].column.get());\n-        const auto * const_starts = checkAndGetColumnConst<ColumnUInt32>(arguments[0].column.get());\n-\n-        const auto * durations = checkAndGetColumn<ColumnUInt32>(arguments[1].column.get());\n-        const auto * const_durations = checkAndGetColumnConst<ColumnUInt32>(arguments[1].column.get());\n+        if (WhichDataType(arguments[0].type).isDateTime())\n+        {\n+            UInt32 time_slot_size = 1800;\n+            if (arguments.size() == 3)\n+            {\n+                const auto * time_slot_column = checkAndGetColumn<ColumnConst>(arguments[2].column.get());\n+                if (!time_slot_column)\n+                    throw Exception(\"Third argument for function \" + getName() + \" must be constant UInt32\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n \n-        auto res = ColumnArray::create(ColumnUInt32::create());\n-        ColumnUInt32::Container & res_values = typeid_cast<ColumnUInt32 &>(res->getData()).getData();\n+                if (time_slot_size = time_slot_column->getValue<UInt32>(); time_slot_size <= 0)\n+                    throw Exception(\"Third argument for function \" + getName() + \" must be greater than zero\", ErrorCodes::ILLEGAL_COLUMN);\n+            }\n \n-        auto time_slot_size = TIME_SLOT_SIZE;\n+            const auto * dt_starts = checkAndGetColumn<ColumnUInt32>(arguments[0].column.get());\n+            const auto * dt_const_starts = checkAndGetColumnConst<ColumnUInt32>(arguments[0].column.get());\n \n-        if (arguments.size() == 3)\n-        {\n-            const auto * time_slot_column = checkAndGetColumn<ColumnConst>(arguments[2].column.get());\n-            if (!time_slot_column)\n-                throw Exception(\"Third argument for function \" + getName() + \" must be constant UInt32\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+            const auto * durations = checkAndGetColumn<ColumnUInt32>(arguments[1].column.get());\n+            const auto * const_durations = checkAndGetColumnConst<ColumnUInt32>(arguments[1].column.get());\n \n-            if (time_slot_size = time_slot_column->getValue<UInt32>(); time_slot_size == 0)\n-                throw Exception(\"Third argument for function \" + getName() + \" must be greater than zero\", ErrorCodes::ILLEGAL_COLUMN);\n-        }\n+            auto res = ColumnArray::create(ColumnUInt32::create());\n+            ColumnUInt32::Container & res_values = typeid_cast<ColumnUInt32 &>(res->getData()).getData();\n \n-        if (starts && durations)\n-        {\n-            TimeSlotsImpl<UInt32>::vectorVector(starts->getData(), durations->getData(), time_slot_size, res_values, res->getOffsets());\n-            return res;\n+            if (dt_starts && durations)\n+            {\n+                TimeSlotsImpl::vectorVector(dt_starts->getData(), durations->getData(), time_slot_size, res_values, res->getOffsets());\n+                return res;\n+            }\n+            else if (dt_starts && const_durations)\n+            {\n+                TimeSlotsImpl::vectorConstant(dt_starts->getData(), const_durations->getValue<UInt32>(), time_slot_size, res_values, res->getOffsets());\n+                return res;\n+            }\n+            else if (dt_const_starts && durations)\n+            {\n+                TimeSlotsImpl::constantVector(dt_const_starts->getValue<UInt32>(), durations->getData(), time_slot_size, res_values, res->getOffsets());\n+                return res;\n+            }\n         }\n-        else if (starts && const_durations)\n+        else\n         {\n-            TimeSlotsImpl<UInt32>::vectorConstant(starts->getData(), const_durations->getValue<UInt32>(), time_slot_size, res_values, res->getOffsets());\n-            return res;\n+            assert(WhichDataType(arguments[0].type).isDateTime64());\n+            Decimal64 time_slot_size = Decimal64(1800);\n+            UInt16 time_slot_scale = 0;\n+            if (arguments.size() == 3)\n+            {\n+                const auto * time_slot_column = checkAndGetColumn<ColumnConst>(arguments[2].column.get());\n+                if (!time_slot_column)\n+                    throw Exception(\"Third argument for function \" + getName() + \" must be constant Decimal64\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+\n+                if (time_slot_size = time_slot_column->getValue<Decimal64>(); time_slot_size <= 0)\n+                    throw Exception(\"Third argument for function \" + getName() + \" must be greater than zero\", ErrorCodes::ILLEGAL_COLUMN);\n+                time_slot_scale = assert_cast<const DataTypeDecimal64 *>(arguments[2].type.get())->getScale();\n+            }\n+\n+            const auto * starts = checkAndGetColumn<DataTypeDateTime64::ColumnType>(arguments[0].column.get());\n+            const auto * const_starts = checkAndGetColumnConst<DataTypeDateTime64::ColumnType>(arguments[0].column.get());\n+\n+            const auto * durations = checkAndGetColumn<ColumnDecimal<Decimal64>>(arguments[1].column.get());\n+            const auto * const_durations = checkAndGetColumnConst<ColumnDecimal<Decimal64>>(arguments[1].column.get());\n+\n+            const auto start_time_scale = assert_cast<const DataTypeDateTime64 *>(arguments[0].type.get())->getScale();\n+            const auto duration_scale = assert_cast<const DataTypeDecimal64 *>(arguments[1].type.get())->getScale();\n+\n+            auto res = ColumnArray::create(DataTypeDateTime64(start_time_scale).createColumn());\n+            DataTypeDateTime64::ColumnType::Container & res_values = typeid_cast<DataTypeDateTime64::ColumnType &>(res->getData()).getData();\n+\n+            if (starts && durations)\n+            {\n+                TimeSlotsImpl::vectorVector(starts->getData(), durations->getData(), time_slot_size, res_values, res->getOffsets(),\n+                    start_time_scale, duration_scale, time_slot_scale);\n+                return res;\n+            }\n+            else if (starts && const_durations)\n+            {\n+                TimeSlotsImpl::vectorConstant(\n+                    starts->getData(), const_durations->getValue<Decimal64>(), time_slot_size, res_values, res->getOffsets(),\n+                    start_time_scale, duration_scale, time_slot_scale);\n+                return res;\n+            }\n+            else if (const_starts && durations)\n+            {\n+                TimeSlotsImpl::constantVector(\n+                    const_starts->getValue<DateTime64>(), durations->getData(), time_slot_size, res_values, res->getOffsets(),\n+                    start_time_scale, duration_scale, time_slot_scale);\n+                return res;\n+            }\n         }\n-        else if (const_starts && durations)\n+\n+        if (arguments.size() == 3)\n         {\n-            TimeSlotsImpl<UInt32>::constantVector(const_starts->getValue<UInt32>(), durations->getData(), time_slot_size, res_values, res->getOffsets());\n-            return res;\n+            throw Exception(\n+                \"Illegal columns \" + arguments[0].column->getName() + \", \" + arguments[1].column->getName() + \", \"\n+                    + arguments[2].column->getName() + \" of arguments of function \" + getName(),\n+                ErrorCodes::ILLEGAL_COLUMN);\n         }\n         else\n-            throw Exception(\"Illegal columns \" + arguments[0].column->getName()\n-                    + \", \" + arguments[1].column->getName()\n-                    + \", \" + arguments[2].column->getName()\n+        {\n+            throw Exception(\n+                \"Illegal columns \" + arguments[0].column->getName() + \", \" + arguments[1].column->getName()\n                     + \" of arguments of function \" + getName(),\n                 ErrorCodes::ILLEGAL_COLUMN);\n+        }\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02319_timeslots_dt64.reference b/tests/queries/0_stateless/02319_timeslots_dt64.reference\nnew file mode 100644\nindex 000000000000..83041581fe63\n--- /dev/null\n+++ b/tests/queries/0_stateless/02319_timeslots_dt64.reference\n@@ -0,0 +1,3 @@\n+['2000-01-02 03:00:00.00','2000-01-02 03:30:00.00','2000-01-02 04:00:00.00','2000-01-02 04:30:00.00','2000-01-02 05:00:00.00','2000-01-02 05:30:00.00']\n+['2000-01-02 02:54:45.100','2000-01-02 03:05:19.200','2000-01-02 03:15:53.300','2000-01-02 03:26:27.400','2000-01-02 03:37:01.500','2000-01-02 03:47:35.600','2000-01-02 03:58:09.700','2000-01-02 04:08:43.800','2000-01-02 04:19:17.900','2000-01-02 04:29:52.000','2000-01-02 04:40:26.100','2000-01-02 04:51:00.200','2000-01-02 05:01:34.300','2000-01-02 05:12:08.400','2000-01-02 05:22:42.500','2000-01-02 05:33:16.600','2000-01-02 05:43:50.700']\n+['2000-01-02 03:04:00.0000','2000-01-02 03:04:30.0000','2000-01-02 03:05:00.0000','2000-01-02 03:05:30.0000','2000-01-02 03:06:00.0000','2000-01-02 03:06:30.0000','2000-01-02 03:07:00.0000','2000-01-02 03:07:30.0000','2000-01-02 03:08:00.0000','2000-01-02 03:08:30.0000','2000-01-02 03:09:00.0000','2000-01-02 03:09:30.0000','2000-01-02 03:10:00.0000','2000-01-02 03:10:30.0000','2000-01-02 03:11:00.0000','2000-01-02 03:11:30.0000','2000-01-02 03:12:00.0000','2000-01-02 03:12:30.0000','2000-01-02 03:13:00.0000','2000-01-02 03:13:30.0000','2000-01-02 03:14:00.0000']\ndiff --git a/tests/queries/0_stateless/02319_timeslots_dt64.sql b/tests/queries/0_stateless/02319_timeslots_dt64.sql\nnew file mode 100644\nindex 000000000000..3d8f8a22e5a0\n--- /dev/null\n+++ b/tests/queries/0_stateless/02319_timeslots_dt64.sql\n@@ -0,0 +1,9 @@\n+SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.12', 2, 'UTC'), toDecimal64(10000, 0));\n+SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.233', 3, 'UTC'), toDecimal64(10000.12, 2), toDecimal64(634.1, 1));\n+SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.3456', 4, 'UTC'), toDecimal64(600, 0), toDecimal64(30, 0));\n+\n+SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.23', 2, 'UTC')); -- { serverError 42 }\n+SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.345', 3, 'UTC'), toDecimal64(62.3, 1), toDecimal64(12.34, 2), 'one more'); -- { serverError 42 }\n+SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.456', 3, 'UTC'), 'wrong argument'); -- { serverError 43 }\n+SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.123', 3, 'UTC'), toDecimal64(600, 0), 'wrong argument'); -- { serverError 43 }\n+SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.1232', 4, 'UTC'), toDecimal64(600, 0), toDecimal64(0, 0)); -- { serverError 44 }\n\\ No newline at end of file\n",
  "problem_statement": "timeSlots() does not support DateTime64\n**`timeSlots() ` is not working with DateTime64 date type at all, even when within normal range:**\r\n```sql\r\nSELECT timeSlots(toDateTime64('2012-01-01 12:20:00', 0, 'UTC'), 600)\r\n\r\nReceived exception from server (version 22.1.3):\r\nCode: 43. DB::Exception: Received from localhost:9000. DB::Exception: Illegal type DateTime64(0, 'UTC') of first argument of function timeSlots. Must be DateTime.: While processing timeSlots(toDateTime64('2012-01-01 12:20:00', 0, 'UTC'), 600). (ILLEGAL_TYPE_OF_ARGUMENT)\r\n```\n",
  "hints_text": "Function `minus` is not working either (tested on version 20.9.2):\r\n```sql\r\nSELECT now64() - now64()\r\n\r\nReceived exception from server (version 20.9.2):\r\nCode: 43. DB::Exception: Received from localhost:9000. DB::Exception: Illegal types DateTime64(3) and DateTime64(3) of arguments of function minus.\r\n```\r\nthough it works well with DateTime:\r\n```sql\r\nSELECT now() - now()\r\n\r\n\u250c\u2500minus(now(), now())\u2500\u2510\r\n\u2502                   0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nDateDiff issue does not reproduce on 22.1 - already fixed.\nI took this, WiP",
  "created_at": "2022-06-09T12:34:09Z"
}