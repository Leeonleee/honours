{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48591,
  "instance_id": "ClickHouse__ClickHouse-48591",
  "issue_numbers": [
    "48580"
  ],
  "base_commit": "267cd097bfba60b684cc3e7b7d73c506642f9c0d",
  "patch": "diff --git a/docs/en/sql-reference/statements/show.md b/docs/en/sql-reference/statements/show.md\nindex f6d6d51b1239..599dda634007 100644\n--- a/docs/en/sql-reference/statements/show.md\n+++ b/docs/en/sql-reference/statements/show.md\n@@ -6,13 +6,15 @@ sidebar_label: SHOW\n \n # SHOW Statements\n \n-## SHOW CREATE TABLE\n+## SHOW CREATE TABLE | DICTIONARY | VIEW | DATABASE\n \n ``` sql\n-SHOW CREATE [TEMPORARY] [TABLE|DICTIONARY|VIEW] [db.]table|view [INTO OUTFILE filename] [FORMAT format]\n+SHOW [CREATE] [TEMPORARY] TABLE|DICTIONARY|VIEW|DATABASE [db.]table|view [INTO OUTFILE filename] [FORMAT format]\n ```\n \n-Returns a single `String`-type \u2018statement\u2019 column, which contains a single value \u2013 the `CREATE` query used for creating the specified object.\n+Returns a single column of type String containing the CREATE query used for creating the specified object.\n+\n+`SHOW TABLE t` and `SHOW DATABASE db` have the same meaning as `SHOW CREATE TABLE|DATABASE t|db`, but `SHOW t` and `SHOW db` are not supported.\n \n Note that if you use this statement to get `CREATE` query of system tables, you will get a *fake* query, which only declares table structure, but cannot be used to create table.\n \ndiff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp\nindex d62c9af366c9..cff8c2a97bb8 100644\n--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp\n+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp\n@@ -118,7 +118,7 @@ namespace ErrorCodes\n     extern const int NUMBER_OF_COLUMNS_DOESNT_MATCH;\n }\n \n-/** Query analyzer implementation overview. Please check documentation in QueryAnalysisPass.h before.\n+/** Query analyzer implementation overview. Please check documentation in QueryAnalysisPass.h first.\n   * And additional documentation for each method, where special cases are described in detail.\n   *\n   * Each node in query must be resolved. For each query tree node resolved state is specific.\n@@ -159,7 +159,7 @@ namespace ErrorCodes\n   *\n   * TODO: This does not supported properly before, because matchers could not be resolved from aliases.\n   *\n-  * Identifiers are resolved with following resules:\n+  * Identifiers are resolved with following rules:\n   * Resolution starts with current scope.\n   * 1. Try to resolve identifier from expression scope arguments. Lambda expression arguments are greatest priority.\n   * 2. Try to resolve identifier from aliases.\ndiff --git a/src/Parsers/ParserTablePropertiesQuery.cpp b/src/Parsers/ParserTablePropertiesQuery.cpp\nindex 84f12f97ea1b..b73ce8de3598 100644\n--- a/src/Parsers/ParserTablePropertiesQuery.cpp\n+++ b/src/Parsers/ParserTablePropertiesQuery.cpp\n@@ -61,8 +61,13 @@ bool ParserTablePropertiesQuery::parseImpl(Pos & pos, ASTPtr & node, Expected &\n     }\n     else if (s_show.ignore(pos, expected))\n     {\n-        if (!s_create.ignore(pos, expected))\n-            return false;\n+        bool has_create = false;\n+\n+        if (s_create.checkWithoutMoving(pos, expected))\n+        {\n+            has_create = true;\n+            s_create.ignore(pos, expected);\n+        }\n \n         if (s_database.ignore(pos, expected))\n         {\n@@ -77,7 +82,15 @@ bool ParserTablePropertiesQuery::parseImpl(Pos & pos, ASTPtr & node, Expected &\n             parse_show_create_view = true;\n         }\n         else\n-            query = std::make_shared<ASTShowCreateTableQuery>();\n+        {\n+            /// We support `SHOW CREATE tbl;` and `SHOW TABLE tbl`,\n+            /// but do not support `SHOW tbl`, which is ambiguous\n+            /// with other statement like `SHOW PRIVILEGES`.\n+            if (has_create || s_table.checkWithoutMoving(pos, expected))\n+                query = std::make_shared<ASTShowCreateTableQuery>();\n+            else\n+                return false;\n+        }\n     }\n     else\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02710_show_table.reference b/tests/queries/0_stateless/02710_show_table.reference\nnew file mode 100644\nindex 000000000000..7b12c079a9bc\n--- /dev/null\n+++ b/tests/queries/0_stateless/02710_show_table.reference\n@@ -0,0 +1,5 @@\n+CREATE TABLE default.t_2710_show_table\\n(\\n    `n1` UInt32,\\n    `s` String\\n)\\nENGINE = Log\n+CREATE TABLE default.t_2710_show_table\\n(\\n    `n1` UInt32,\\n    `s` String\\n)\\nENGINE = Log\n+CREATE TABLE default.t_2710_show_table\\n(\\n    `n1` UInt32,\\n    `s` String\\n)\\nENGINE = Log\n+CREATE DATABASE t_2710_db\\nENGINE = Atomic\n+CREATE DATABASE t_2710_db\\nENGINE = Atomic\ndiff --git a/tests/queries/0_stateless/02710_show_table.sql b/tests/queries/0_stateless/02710_show_table.sql\nnew file mode 100644\nindex 000000000000..52682ce83daf\n--- /dev/null\n+++ b/tests/queries/0_stateless/02710_show_table.sql\n@@ -0,0 +1,16 @@\n+-- Tags: no-parallel\n+DROP TABLE IF EXISTS t_2710_show_table;\n+\n+CREATE TABLE t_2710_show_table(n1 UInt32, s String) engine=Log;\n+SHOW TABLE t_2710_show_table;\n+SHOW CREATE TABLE t_2710_show_table;\n+SHOW CREATE t_2710_show_table;\n+\n+DROP TABLE t_2710_show_table;\n+\n+DROP DATABASE IF EXISTS t_2710_db;\n+CREATE DATABASE t_2710_db engine=Atomic;\n+SHOW DATABASE t_2710_db;\n+SHOW CREATE DATABASE t_2710_db;\n+\n+DROP DATABASE t_2710_db;\n",
  "problem_statement": "Support `SHOW TABLE` syntax meaning the same as `SHOW CREATE TABLE`\n**Use case**\r\n\r\nRead https://staging.clickhouse.com/blog/redshift-vs-clickhouse-comparison\r\n\r\n**Describe the solution you'd like**\r\n\r\nTrivial.\n",
  "hints_text": "",
  "created_at": "2023-04-10T06:39:57Z"
}