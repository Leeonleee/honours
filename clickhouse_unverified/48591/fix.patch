diff --git a/docs/en/sql-reference/statements/show.md b/docs/en/sql-reference/statements/show.md
index f6d6d51b1239..599dda634007 100644
--- a/docs/en/sql-reference/statements/show.md
+++ b/docs/en/sql-reference/statements/show.md
@@ -6,13 +6,15 @@ sidebar_label: SHOW
 
 # SHOW Statements
 
-## SHOW CREATE TABLE
+## SHOW CREATE TABLE | DICTIONARY | VIEW | DATABASE
 
 ``` sql
-SHOW CREATE [TEMPORARY] [TABLE|DICTIONARY|VIEW] [db.]table|view [INTO OUTFILE filename] [FORMAT format]
+SHOW [CREATE] [TEMPORARY] TABLE|DICTIONARY|VIEW|DATABASE [db.]table|view [INTO OUTFILE filename] [FORMAT format]
 ```
 
-Returns a single `String`-type ‘statement’ column, which contains a single value – the `CREATE` query used for creating the specified object.
+Returns a single column of type String containing the CREATE query used for creating the specified object.
+
+`SHOW TABLE t` and `SHOW DATABASE db` have the same meaning as `SHOW CREATE TABLE|DATABASE t|db`, but `SHOW t` and `SHOW db` are not supported.
 
 Note that if you use this statement to get `CREATE` query of system tables, you will get a *fake* query, which only declares table structure, but cannot be used to create table.
 
diff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp
index d62c9af366c9..cff8c2a97bb8 100644
--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp
+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp
@@ -118,7 +118,7 @@ namespace ErrorCodes
     extern const int NUMBER_OF_COLUMNS_DOESNT_MATCH;
 }
 
-/** Query analyzer implementation overview. Please check documentation in QueryAnalysisPass.h before.
+/** Query analyzer implementation overview. Please check documentation in QueryAnalysisPass.h first.
   * And additional documentation for each method, where special cases are described in detail.
   *
   * Each node in query must be resolved. For each query tree node resolved state is specific.
@@ -159,7 +159,7 @@ namespace ErrorCodes
   *
   * TODO: This does not supported properly before, because matchers could not be resolved from aliases.
   *
-  * Identifiers are resolved with following resules:
+  * Identifiers are resolved with following rules:
   * Resolution starts with current scope.
   * 1. Try to resolve identifier from expression scope arguments. Lambda expression arguments are greatest priority.
   * 2. Try to resolve identifier from aliases.
diff --git a/src/Parsers/ParserTablePropertiesQuery.cpp b/src/Parsers/ParserTablePropertiesQuery.cpp
index 84f12f97ea1b..b73ce8de3598 100644
--- a/src/Parsers/ParserTablePropertiesQuery.cpp
+++ b/src/Parsers/ParserTablePropertiesQuery.cpp
@@ -61,8 +61,13 @@ bool ParserTablePropertiesQuery::parseImpl(Pos & pos, ASTPtr & node, Expected &
     }
     else if (s_show.ignore(pos, expected))
     {
-        if (!s_create.ignore(pos, expected))
-            return false;
+        bool has_create = false;
+
+        if (s_create.checkWithoutMoving(pos, expected))
+        {
+            has_create = true;
+            s_create.ignore(pos, expected);
+        }
 
         if (s_database.ignore(pos, expected))
         {
@@ -77,7 +82,15 @@ bool ParserTablePropertiesQuery::parseImpl(Pos & pos, ASTPtr & node, Expected &
             parse_show_create_view = true;
         }
         else
-            query = std::make_shared<ASTShowCreateTableQuery>();
+        {
+            /// We support `SHOW CREATE tbl;` and `SHOW TABLE tbl`,
+            /// but do not support `SHOW tbl`, which is ambiguous
+            /// with other statement like `SHOW PRIVILEGES`.
+            if (has_create || s_table.checkWithoutMoving(pos, expected))
+                query = std::make_shared<ASTShowCreateTableQuery>();
+            else
+                return false;
+        }
     }
     else
     {
