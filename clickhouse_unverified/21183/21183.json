{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 21183,
  "instance_id": "ClickHouse__ClickHouse-21183",
  "issue_numbers": [
    "21168"
  ],
  "base_commit": "36c178c0231a073fdb3f75ca52a85ba9e4fbea7e",
  "patch": "diff --git a/src/Interpreters/InterpreterAlterQuery.cpp b/src/Interpreters/InterpreterAlterQuery.cpp\nindex bf624507574b..6294b31cc8cd 100644\n--- a/src/Interpreters/InterpreterAlterQuery.cpp\n+++ b/src/Interpreters/InterpreterAlterQuery.cpp\n@@ -104,6 +104,7 @@ BlockIO InterpreterAlterQuery::execute()\n \n     if (!mutation_commands.empty())\n     {\n+        table->checkMutationIsPossible(mutation_commands, context.getSettingsRef());\n         MutationsInterpreter(table, metadata_snapshot, mutation_commands, context, false).validate();\n         table->mutate(mutation_commands, context);\n     }\ndiff --git a/src/Storages/IStorage.cpp b/src/Storages/IStorage.cpp\nindex 5f5005185169..2400b0587ba6 100644\n--- a/src/Storages/IStorage.cpp\n+++ b/src/Storages/IStorage.cpp\n@@ -145,6 +145,11 @@ void IStorage::checkAlterIsPossible(const AlterCommands & commands, const Settin\n     }\n }\n \n+void IStorage::checkMutationIsPossible(const MutationCommands & /*commands*/, const Settings & /*settings*/) const\n+{\n+    throw Exception(\"Table engine \" + getName() + \" doesn't support mutations\", ErrorCodes::NOT_IMPLEMENTED);\n+}\n+\n void IStorage::checkAlterPartitionIsPossible(\n     const PartitionCommands & /*commands*/, const StorageMetadataPtr & /*metadata_snapshot*/, const Settings & /*settings*/) const\n {\ndiff --git a/src/Storages/IStorage.h b/src/Storages/IStorage.h\nindex 651688f41bb9..1a27dbd637f0 100644\n--- a/src/Storages/IStorage.h\n+++ b/src/Storages/IStorage.h\n@@ -364,6 +364,11 @@ class IStorage : public std::enable_shared_from_this<IStorage>, public TypePromo\n       */\n     virtual void checkAlterIsPossible(const AlterCommands & commands, const Settings & settings) const;\n \n+    /**\n+      * Checks that mutation commands can be applied to storage.\n+      */\n+    virtual void checkMutationIsPossible(const MutationCommands & commands, const Settings & settings) const;\n+\n     /** ALTER tables with regard to its partitions.\n       * Should handle locks for each command on its own.\n       */\ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex b09f068f509c..2d841b98c599 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -1670,6 +1670,12 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, const S\n     }\n }\n \n+\n+void MergeTreeData::checkMutationIsPossible(const MutationCommands & /*commands*/, const Settings & /*settings*/) const\n+{\n+    /// Some validation will be added\n+}\n+\n MergeTreeDataPartType MergeTreeData::choosePartType(size_t bytes_uncompressed, size_t rows_count) const\n {\n     const auto settings = getSettings();\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex 2aefa66ac58e..f03f3f1dd8c2 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -519,6 +519,10 @@ class MergeTreeData : public IStorage\n     /// If something is wrong, throws an exception.\n     void checkAlterIsPossible(const AlterCommands & commands, const Settings & settings) const override;\n \n+    /// Checks if the Mutation can be performed.\n+    /// (currently no additional checks: always ok)\n+    void checkMutationIsPossible(const MutationCommands & commands, const Settings & settings) const override;\n+\n     /// Checks that partition name in all commands is valid\n     void checkAlterPartitionIsPossible(const PartitionCommands & commands, const StorageMetadataPtr & metadata_snapshot, const Settings & settings) const override;\n \ndiff --git a/src/Storages/StorageMaterializedView.cpp b/src/Storages/StorageMaterializedView.cpp\nindex 325bf3d2f742..2d211c8061b8 100644\n--- a/src/Storages/StorageMaterializedView.cpp\n+++ b/src/Storages/StorageMaterializedView.cpp\n@@ -320,6 +320,12 @@ void StorageMaterializedView::checkAlterIsPossible(const AlterCommands & command\n     }\n }\n \n+void StorageMaterializedView::checkMutationIsPossible(const MutationCommands & commands, const Settings & settings) const\n+{\n+    checkStatementCanBeForwarded();\n+    getTargetTable()->checkMutationIsPossible(commands, settings);\n+}\n+\n Pipe StorageMaterializedView::alterPartition(\n     const StorageMetadataPtr & metadata_snapshot, const PartitionCommands & commands, const Context & context)\n {\ndiff --git a/src/Storages/StorageMaterializedView.h b/src/Storages/StorageMaterializedView.h\nindex 94e4295cd343..4b10cf7a9b5e 100644\n--- a/src/Storages/StorageMaterializedView.h\n+++ b/src/Storages/StorageMaterializedView.h\n@@ -52,6 +52,8 @@ class StorageMaterializedView final : public ext::shared_ptr_helper<StorageMater\n \n     void alter(const AlterCommands & params, const Context & context, TableLockHolder & table_lock_holder) override;\n \n+    void checkMutationIsPossible(const MutationCommands & commands, const Settings & settings) const override;\n+\n     void checkAlterIsPossible(const AlterCommands & commands, const Settings & settings) const override;\n \n     Pipe alterPartition(const StorageMetadataPtr & metadata_snapshot, const PartitionCommands & commands, const Context & context) override;\ndiff --git a/src/Storages/StorageMemory.cpp b/src/Storages/StorageMemory.cpp\nindex d7b0ae055ab3..d98cd4212e93 100644\n--- a/src/Storages/StorageMemory.cpp\n+++ b/src/Storages/StorageMemory.cpp\n@@ -253,6 +253,11 @@ static inline void updateBlockData(Block & old_block, const Block & new_block)\n     }\n }\n \n+void StorageMemory::checkMutationIsPossible(const MutationCommands & /*commands*/, const Settings & /*settings*/) const\n+{\n+    /// Some validation will be added\n+}\n+\n void StorageMemory::mutate(const MutationCommands & commands, const Context & context)\n {\n     std::lock_guard lock(mutex);\ndiff --git a/src/Storages/StorageMemory.h b/src/Storages/StorageMemory.h\nindex db71c13ca991..b7fa4d7b222e 100644\n--- a/src/Storages/StorageMemory.h\n+++ b/src/Storages/StorageMemory.h\n@@ -51,6 +51,7 @@ friend struct ext::shared_ptr_helper<StorageMemory>;\n \n     void drop() override;\n \n+    void checkMutationIsPossible(const MutationCommands & commands, const Settings & settings) const override;\n     void mutate(const MutationCommands & commands, const Context & context) override;\n \n     void truncate(const ASTPtr &, const StorageMetadataPtr &, const Context &, TableExclusiveLockHolder &) override;\ndiff --git a/src/Storages/StorageView.cpp b/src/Storages/StorageView.cpp\nindex 38349ef8df9a..22a1992d9223 100644\n--- a/src/Storages/StorageView.cpp\n+++ b/src/Storages/StorageView.cpp\n@@ -105,6 +105,9 @@ void StorageView::read(\n \n static ASTTableExpression * getFirstTableExpression(ASTSelectQuery & select_query)\n {\n+    if (!select_query.tables() || select_query.tables()->children.empty())\n+        throw Exception(\"Logical error: no table expression in view select AST\", ErrorCodes::LOGICAL_ERROR);\n+\n     auto * select_element = select_query.tables()->children[0]->as<ASTTablesInSelectQueryElement>();\n \n     if (!select_element->table_expression)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01745_alter_delete_view.reference b/tests/queries/0_stateless/01745_alter_delete_view.reference\nnew file mode 100644\nindex 000000000000..dc3ab50ab0d1\n--- /dev/null\n+++ b/tests/queries/0_stateless/01745_alter_delete_view.reference\n@@ -0,0 +1,4 @@\n+1\t1\n+2\t1\n+1\t1\n+2\t1\ndiff --git a/tests/queries/0_stateless/01745_alter_delete_view.sql b/tests/queries/0_stateless/01745_alter_delete_view.sql\nnew file mode 100644\nindex 000000000000..c242f1be63e6\n--- /dev/null\n+++ b/tests/queries/0_stateless/01745_alter_delete_view.sql\n@@ -0,0 +1,28 @@\n+DROP VIEW IF EXISTS test_view;\n+DROP TABLE IF EXISTS test_table;\n+\n+CREATE TABLE test_table\n+(\n+    f1 Int32,\n+    f2 Int32,\n+    pk Int32\n+)\n+ENGINE = MergeTree()\n+ORDER BY f1\n+PARTITION BY pk;\n+\n+CREATE VIEW test_view AS\n+SELECT f1, f2\n+FROM test_table\n+WHERE pk = 2;\n+\n+INSERT INTO test_table (f1, f2, pk) VALUES (1,1,1), (1,1,2), (2,1,1), (2,1,2);\n+\n+SELECT * FROM test_view ORDER BY f1, f2;\n+\n+ALTER TABLE test_view DELETE WHERE pk = 2; --{serverError 48}\n+\n+SELECT * FROM test_view ORDER BY f1, f2;\n+\n+DROP VIEW IF EXISTS test_view;\n+DROP TABLE IF EXISTS test_table;\n",
  "problem_statement": "Segmentation fault after mutation ALTER TABLE view ON CLUSTER DELETE\n**Describe the bug**\r\nI accidentally started migration on view instead of table with `on cluster` statement. All nodes of cluster are down and failed to restart.\r\n\r\n**Does it reproduce on recent release?**\r\nmet on 20.8.7.15\r\nreproduced on 21.2.4.6\r\n\r\n**How to reproduce**\r\n```sql\r\ncreate table test_shard on cluster ClusterName\r\n(f1 Int32, f2 Int32, pk Int32)\r\nengine=ReplicatedMergeTree('/clickhouse/tables/test_shard/{uuid}/{shard}/table_name','{replica}')\r\norder by f1\r\npartition by pk;\r\n\r\ncreate table test on cluster ClusterName\r\n(f1 Int32, f2 Int32, pk Int32)\r\nengine=Distributed(ClusterName,default,test_shard, f1);\r\n\r\ncreate view test_view on cluster ClusterName\r\nas \r\nselect f1, f2\r\nfrom test \r\nwhere pk = 2;\r\n\r\ninsert into test (f1,f2,pk)\r\nvalues (1,1,1)\r\n         , (1,1,2)\r\n         , (2,1,1)\r\n         , (2,1,2);\r\n\r\nselect * from test_view;\r\n\r\nalter table test_view on cluster ClusterName delete where pk=2;\r\n```\r\n\r\n**Expected behavior**\r\nClickhouse throws exception, cancel query, all nodes continue to work\r\n\r\n**Error message and/or stacktrace**\r\n<details>\r\n<summary>executing query logs</summary>\r\n\r\n```\r\n2021.02.25 09:02:20.312595 [ 11 ] {} <Trace> HTTPHandler-factory: HTTP Request for HTTPHandler-factory. Method: POST, Address: 172.20.0.1:61666, User-Agent: Apache-HttpClient/4.5.2 (Java/11.0.5), Length: 59, Content Type: text/plain; charset=UTF-8, Transfer Encoding: identity, X-Forwarded-For: (none)\r\n2021.02.25 09:02:20.313232 [ 11 ] {} <Trace> DynamicQueryHandler: Request URI: /?user=default&max_result_rows=200&result_overflow_mode=break&extremes=0&database=default\r\n2021.02.25 09:02:20.314077 [ 11 ] {2b3df895-12ec-49dd-afc7-72fcf5d41cda} <Debug> executeQuery: (from 172.20.0.1:61666, using production parser) alter table test_view on cluster ClusterName delete where pk=2\r\n2021.02.25 09:02:20.314834 [ 11 ] {2b3df895-12ec-49dd-afc7-72fcf5d41cda} <Trace> ContextAccess (default): Access granted: ALTER DELETE ON default.test_view\r\n2021.02.25 09:02:20.360995 [ 27 ] {} <Debug> DDLWorker: Scheduling tasks\r\n2021.02.25 09:02:20.361195 [ 28 ] {} <Trace> DDLWorker: Too early to clean queue, will do it later.\r\n2021.02.25 09:02:20.371947 [ 11 ] {2b3df895-12ec-49dd-afc7-72fcf5d41cda} <Debug> executeQuery: Query pipeline:\r\nDDLQueryStatusInputStream\r\n\r\n2021.02.25 09:02:20.373201 [ 27 ] {} <Debug> DDLWorker: Waiting a watch\r\n2021.02.25 09:02:20.373223 [ 52 ] {d5011220-84ab-4fb1-a5a1-32e1cfa92d41} <Debug> DDLWorker: Processing task query-0000000003 (ALTER TABLE default.test_view ON CLUSTER ClusterName DELETE WHERE pk = 2)\r\n2021.02.25 09:02:20.407004 [ 52 ] {d5011220-84ab-4fb1-a5a1-32e1cfa92d41} <Debug> DDLWorker: Executing query: ALTER TABLE default.test_view DELETE WHERE pk = 2\r\n2021.02.25 09:02:20.407952 [ 52 ] {33d8f2f8-05bf-44bc-b03e-c20987229ad0} <Debug> executeQuery: (from 0.0.0.0:0, user: , using production parser) /* ddl_entry=query-0000000003 */ ALTER TABLE default.test_view DELETE WHERE pk = 2\r\n2021.02.25 09:02:20.408866 [ 8 ] {} <Trace> BaseDaemon: Received signal 11\r\n2021.02.25 09:02:20.409754 [ 56 ] {} <Fatal> BaseDaemon: ########################################\r\n2021.02.25 09:02:20.410437 [ 56 ] {} <Fatal> BaseDaemon: (version 21.2.4.6 (official build), build id: 6E2E926515F53BCF094B3D6BD7E9EB65BC5BCE6B) (from thread 52) (query_id: 33d8f2f8-05bf-44bc-b03e-c20987229ad0) Received signal Segmentation fault (11)\r\n2021.02.25 09:02:20.411206 [ 56 ] {} <Fatal> BaseDaemon: Address: 0x18 Access: read. Address not mapped to object.\r\n2021.02.25 09:02:20.411959 [ 56 ] {} <Fatal> BaseDaemon: Stack trace: 0xf1d67d9 0xf1d5e12 0xeb86e64 0xeb83645 0xeb85d54 0xed8073a 0xeb40752 0xeeb94f2 0xeebcbe2 0xe8733c6 0xe875d1c 0xe873ddd 0x84f9878 0x84fb82f 0x84f6e4f 0x84fa8e3 0x7f1889cd3ea5 0x7f18899fc8dd\r\n2021.02.25 09:02:20.412591 [ 56 ] {} <Fatal> BaseDaemon: 2. ? @ 0xf1d67d9 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.413159 [ 56 ] {} <Fatal> BaseDaemon: 3. DB::StorageView::replaceWithSubquery(DB::ASTSelectQuery&, std::__1::shared_ptr<DB::IAST>, std::__1::shared_ptr<DB::IAST>&) @ 0xf1d5e12 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.413676 [ 56 ] {} <Fatal> BaseDaemon: 4. ? @ 0xeb86e64 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.414234 [ 56 ] {} <Fatal> BaseDaemon: 5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&) @ 0xeb83645 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.414802 [ 56 ] {} <Fatal> BaseDaemon: 6. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IStorage> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryOptions const&) @ 0xeb85d54 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.415334 [ 56 ] {} <Fatal> BaseDaemon: 7. DB::MutationsInterpreter::MutationsInterpreter(std::__1::shared_ptr<DB::IStorage>, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::MutationCommands, DB::Context const&, bool) @ 0xed8073a in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.415822 [ 56 ] {} <Fatal> BaseDaemon: 8. DB::InterpreterAlterQuery::execute() @ 0xeb40752 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.416293 [ 56 ] {} <Fatal> BaseDaemon: 9. ? @ 0xeeb94f2 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.416956 [ 56 ] {} <Fatal> BaseDaemon: 10. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xeebcbe2 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.417594 [ 56 ] {} <Fatal> BaseDaemon: 11. DB::DDLWorker::tryExecuteQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::DDLTask const&, DB::ExecutionStatus&) @ 0xe8733c6 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.418141 [ 56 ] {} <Fatal> BaseDaemon: 12. DB::DDLWorker::processTask(DB::DDLTask&) @ 0xe875d1c in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.418611 [ 56 ] {} <Fatal> BaseDaemon: 13. DB::DDLWorker::enqueueTask(std::__1::unique_ptr<DB::DDLTask, std::__1::default_delete<DB::DDLTask> >) @ 0xe873ddd in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.419147 [ 56 ] {} <Fatal> BaseDaemon: 14. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x84f9878 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.419686 [ 56 ] {} <Fatal> BaseDaemon: 15. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x84fb82f in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.420368 [ 56 ] {} <Fatal> BaseDaemon: 16. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x84f6e4f in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.420873 [ 56 ] {} <Fatal> BaseDaemon: 17. ? @ 0x84fa8e3 in /usr/bin/clickhouse\r\n2021.02.25 09:02:20.421427 [ 56 ] {} <Fatal> BaseDaemon: 18. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n2021.02.25 09:02:20.421860 [ 56 ] {} <Fatal> BaseDaemon: 19. clone @ 0xfe8dd in /usr/lib64/libc-2.17.so\r\n2021.02.25 09:02:20.692197 [ 56 ] {} <Fatal> BaseDaemon: Checksum of the binary: 88E22F0584BA91872F2E9BE493E6985B, integrity check passed.\r\n2021.02.25 09:02:20.693673 [ 56 ] {} <Information> SentryWriter: Not sending crash report\r\n```\r\n</details>\r\n<details>\r\n<summary>reexecuting after restart logs</summary>\r\n\r\n```\r\n2021.02.25 09:02:24.969588 [ 43 ] {} <Debug> DDLWorker: Processing task query-0000000003 (ALTER TABLE default.test_view ON CLUSTER ClusterName DELETE WHERE pk = 2)\r\n2021.02.25 09:02:24.979387 [ 43 ] {} <Debug> DDLWorker: Executing query: ALTER TABLE default.test_view DELETE WHERE pk = 2\r\n2021.02.25 09:02:24.980222 [ 43 ] {91da6995-ade7-423e-9543-ed87b3d8e1e7} <Debug> executeQuery: (from 0.0.0.0:0, user: , using production parser) /* ddl_entry=query-0000000003 */ ALTER TABLE default.test_view DELETE WHERE pk = 2\r\n2021.02.25 09:02:24.982954 [ 8 ] {} <Trace> BaseDaemon: Received signal 11\r\n2021.02.25 09:02:24.988512 [ 44 ] {} <Fatal> BaseDaemon: ########################################\r\n2021.02.25 09:02:24.990487 [ 44 ] {} <Fatal> BaseDaemon: (version 21.2.4.6 (official build), build id: 6E2E926515F53BCF094B3D6BD7E9EB65BC5BCE6B) (from thread 43) (query_id: 91da6995-ade7-423e-9543-ed87b3d8e1e7) Received signal Segmentation fault (11)\r\n2021.02.25 09:02:25.003985 [ 44 ] {} <Fatal> BaseDaemon: Address: 0x18 Access: read. Address not mapped to object.\r\n2021.02.25 09:02:25.005288 [ 44 ] {} <Fatal> BaseDaemon: Stack trace: 0xf1d67d9 0xf1d5e12 0xeb86e64 0xeb83645 0xeb85d54 0xed8073a 0xeb40752 0xeeb94f2 0xeebcbe2 0xe8733c6 0xe875d1c 0xe873ddd 0x84f9878 0x84fb82f 0x84f6e4f 0x84fa8e3 0x7efeb307cea5 0x7efeb2da58dd\r\n2021.02.25 09:02:25.008766 [ 44 ] {} <Fatal> BaseDaemon: 2. ? @ 0xf1d67d9 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.009556 [ 44 ] {} <Fatal> BaseDaemon: 3. DB::StorageView::replaceWithSubquery(DB::ASTSelectQuery&, std::__1::shared_ptr<DB::IAST>, std::__1::shared_ptr<DB::IAST>&) @ 0xf1d5e12 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.010856 [ 44 ] {} <Fatal> BaseDaemon: 4. ? @ 0xeb86e64 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.011520 [ 44 ] {} <Fatal> BaseDaemon: 5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&) @ 0xeb83645 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.012250 [ 44 ] {} <Fatal> BaseDaemon: 6. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IStorage> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryOptions const&) @ 0xeb85d54 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.014873 [ 44 ] {} <Fatal> BaseDaemon: 7. DB::MutationsInterpreter::MutationsInterpreter(std::__1::shared_ptr<DB::IStorage>, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::MutationCommands, DB::Context const&, bool) @ 0xed8073a in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.016880 [ 44 ] {} <Fatal> BaseDaemon: 8. DB::InterpreterAlterQuery::execute() @ 0xeb40752 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.017508 [ 44 ] {} <Fatal> BaseDaemon: 9. ? @ 0xeeb94f2 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.018150 [ 44 ] {} <Fatal> BaseDaemon: 10. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xeebcbe2 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.019532 [ 44 ] {} <Fatal> BaseDaemon: 11. DB::DDLWorker::tryExecuteQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::DDLTask const&, DB::ExecutionStatus&) @ 0xe8733c6 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.022481 [ 44 ] {} <Fatal> BaseDaemon: 12. DB::DDLWorker::processTask(DB::DDLTask&) @ 0xe875d1c in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.025294 [ 44 ] {} <Fatal> BaseDaemon: 13. DB::DDLWorker::enqueueTask(std::__1::unique_ptr<DB::DDLTask, std::__1::default_delete<DB::DDLTask> >) @ 0xe873ddd in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.025916 [ 44 ] {} <Fatal> BaseDaemon: 14. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x84f9878 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.026529 [ 44 ] {} <Fatal> BaseDaemon: 15. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x84fb82f in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.027217 [ 44 ] {} <Fatal> BaseDaemon: 16. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x84f6e4f in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.028182 [ 44 ] {} <Fatal> BaseDaemon: 17. ? @ 0x84fa8e3 in /usr/bin/clickhouse\r\n2021.02.25 09:02:25.028754 [ 44 ] {} <Fatal> BaseDaemon: 18. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n2021.02.25 09:02:25.029768 [ 44 ] {} <Fatal> BaseDaemon: 19. clone @ 0xfe8dd in /usr/lib64/libc-2.17.so\r\n2021.02.25 09:02:25.282273 [ 44 ] {} <Fatal> BaseDaemon: Checksum of the binary: 88E22F0584BA91872F2E9BE493E6985B, integrity check passed.\r\n```\r\n</details>\r\n\n",
  "hints_text": "",
  "created_at": "2021-02-25T10:09:12Z"
}