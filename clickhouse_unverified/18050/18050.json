{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18050,
  "instance_id": "ClickHouse__ClickHouse-18050",
  "issue_numbers": [
    "13804"
  ],
  "base_commit": "9c1516bd740259959b4488ac20ff58052afb804a",
  "patch": "diff --git a/src/Functions/FunctionsComparison.h b/src/Functions/FunctionsComparison.h\nindex e674f8690ff4..957c7e0ab3e2 100644\n--- a/src/Functions/FunctionsComparison.h\n+++ b/src/Functions/FunctionsComparison.h\n@@ -1216,7 +1216,10 @@ class FunctionComparison : public IFunction\n         {\n             return res;\n         }\n-        else if (isColumnedAsDecimal(left_type) || isColumnedAsDecimal(right_type))\n+        else if ((isColumnedAsDecimal(left_type) || isColumnedAsDecimal(right_type))\n+                 // Comparing Date and DateTime64 requires implicit conversion,\n+                 // otherwise Date is treated as number.\n+                 && !(date_and_datetime && (isDate(left_type) || isDate(right_type))))\n         {\n             // compare\n             if (!allowDecimalComparison(left_type, right_type) && !date_and_datetime)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01560_DateTime_and_DateTime64_comparision.reference b/tests/queries/0_stateless/01560_DateTime_and_DateTime64_comparision.reference\nnew file mode 100644\nindex 000000000000..088030bbc280\n--- /dev/null\n+++ b/tests/queries/0_stateless/01560_DateTime_and_DateTime64_comparision.reference\n@@ -0,0 +1,3 @@\n+-1\tDateTime64(1, \\'UTC\\')\t<\t1\t1\t1\t<=\t1\t1\t1\t=\t0\t0\t0\t>=\t0\t0\t0\t>\t0\t0\t0\t!=\t1\t1\t1\n+0\tDateTime64(1, \\'UTC\\')\t<\t0\t0\t0\t<=\t1\t1\t1\t=\t1\t1\t1\t>=\t1\t1\t1\t>\t0\t0\t0\t!=\t0\t0\t0\n+1\tDateTime64(1, \\'UTC\\')\t<\t0\t0\t0\t<=\t0\t0\t0\t=\t0\t0\t0\t>=\t1\t1\t1\t>\t1\t1\t1\t!=\t1\t1\t1\ndiff --git a/tests/queries/0_stateless/01560_DateTime_and_DateTime64_comparision.sql b/tests/queries/0_stateless/01560_DateTime_and_DateTime64_comparision.sql\nnew file mode 100644\nindex 000000000000..c5e677570ea8\n--- /dev/null\n+++ b/tests/queries/0_stateless/01560_DateTime_and_DateTime64_comparision.sql\n@@ -0,0 +1,43 @@\n+SELECT\n+    n,\n+    toTypeName(dt64) AS dt64_typename,\n+\n+    '<',\n+    dt64 < dt,\n+    toDateTime(dt64) < dt,\n+    dt64 < toDateTime64(dt, 1, 'UTC'),\n+    \n+    '<=',\n+    dt64 <= dt,\n+    toDateTime(dt64) <= dt,\n+    dt64 <= toDateTime64(dt, 1, 'UTC'),\n+\n+    '=',\n+    dt64 = dt,\n+    toDateTime(dt64) = dt,\n+    dt64 = toDateTime64(dt, 1, 'UTC'),\n+    \n+    '>=',\n+    dt64 >= dt,\n+    toDateTime(dt64) >= dt,\n+    dt64 >= toDateTime64(dt, 1, 'UTC'),\n+    \n+    '>',\n+    dt64 > dt,\n+    toDateTime(dt64) > dt,\n+    dt64 > toDateTime64(dt, 1, 'UTC'),\n+\n+    '!=',\n+    dt64 != dt,\n+    toDateTime(dt64) != dt,\n+    dt64 != toDateTime64(dt, 1, 'UTC')\n+FROM \n+(\n+    WITH toDateTime('2015-05-18 07:40:11') as value\n+    SELECT\n+        number - 1 as n,\n+        toDateTime64(value, 1, 'UTC') AS dt64,\n+        value - n as dt\n+    FROM system.numbers\n+    LIMIT 3\n+)\ndiff --git a/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.reference b/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.reference\nnew file mode 100644\nindex 000000000000..e5183ec6a8a7\n--- /dev/null\n+++ b/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.reference\n@@ -0,0 +1,3 @@\n+-1\tDateTime64(1, \\'UTC\\')\t<\t1\t1\t1\t<=\t1\t1\t1\t=\t0\t0\t0\t>=\t0\t0\t0\t>\t0\t0\t0\t!=\t1\t1\t1\n+0\tDateTime64(1, \\'UTC\\')\t<\t0\t0\t0\t<=\t0\t1\t0\t=\t0\t1\t0\t>=\t1\t1\t1\t>\t1\t0\t1\t!=\t1\t0\t1\n+1\tDateTime64(1, \\'UTC\\')\t<\t0\t0\t0\t<=\t0\t0\t0\t=\t0\t0\t0\t>=\t1\t1\t1\t>\t1\t1\t1\t!=\t1\t1\t1\ndiff --git a/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.sql b/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.sql\nnew file mode 100644\nindex 000000000000..7e75d871e077\n--- /dev/null\n+++ b/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.sql\n@@ -0,0 +1,43 @@\n+SELECT\n+    n,\n+    toTypeName(dt64) AS dt64_typename,\n+\n+    '<',\n+    dt64 < d,\n+    toDate(dt64) < d,\n+    dt64 < toDateTime64(d, 1, 'UTC'),\n+    \n+    '<=',\n+    dt64 <= d,\n+    toDate(dt64) <= d,\n+    dt64 <= toDateTime64(d, 1, 'UTC'),\n+\n+    '=',\n+    dt64 = d,\n+    toDate(dt64) = d,\n+    dt64 = toDateTime64(d, 1, 'UTC'),\n+    \n+    '>=',\n+    dt64 >= d,\n+    toDate(dt64) >= d,\n+    dt64 >= toDateTime64(d, 1, 'UTC'),\n+\n+    '>',\n+    dt64 > d,\n+    toDate(dt64) > d,\n+    dt64 > toDateTime64(d, 1, 'UTC'),\n+\n+    '!=',\n+    dt64 != d,\n+    toDate(dt64) != d,\n+    dt64 != toDateTime64(d, 1, 'UTC')\n+FROM \n+(\n+    WITH toDateTime('2019-09-16 19:20:11') as val\n+    SELECT\n+        number - 1 as n,\n+        toDateTime64(val, 1, 'UTC') AS dt64,\n+        toDate(val, 'UTC') - n as d\n+    FROM system.numbers\n+    LIMIT 3\n+)\n",
  "problem_statement": "Comparison DateTime64 to DateTime / Date\n**Use case**\r\n\r\nComparison between DateTime64 and DateTime / Date types is allowed but the behavior is confusing (it looks like used numerical comparison):\r\n\r\n* from one side for zero-precision it works as expected (values compared as datetime-based ones): \r\n\r\n```sql\r\nSELECT toTypeName(dt64) AS dt64_typename, dt64 = dt\r\nFROM \r\n(\r\n    SELECT \r\n        toDateTime64(toStartOfInterval(now(), toIntervalSecond(1), 'UTC'), 0, 'UTC') AS dt64,\r\n        toStartOfInterval(now(), toIntervalSecond(1), 'UTC') AS dt\r\n)\r\n\r\n/*\r\n\u250c\u2500dt64_typename\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500equals(dt64, dt)\u2500\u2510\r\n\u2502 DateTime64(0, 'UTC') \u2502                1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n*/\r\n```\r\n* from another side for non-zero-precision its behavior is unexpected if not used explicit type conversion:\r\n\r\n```sql\r\nSELECT \r\n    toTypeName(dt64) AS dt64_typename,\r\n    dt64 = dt,\r\n    toDateTime(dt64) = dt,\r\n    dt64 = toDateTime64(dt, 1, 'UTC')\r\nFROM \r\n(\r\n    SELECT \r\n        toDateTime64(toStartOfInterval(now(), toIntervalSecond(1), 'UTC'), 1, 'UTC') AS dt64,\r\n        toStartOfInterval(now(), toIntervalSecond(1), 'UTC') AS dt\r\n)\r\n/*\r\n\u250c\u2500dt64_typename\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500equals(dt64, dt)\u2500\u252c\u2500equals(toDateTime(dt64), dt)\u2500\u252c\u2500equals(dt64, toDateTime64(dt, 1, 'UTC'))\u2500\u2510\r\n\u2502 DateTime64(1, 'UTC') \u2502                0 \u2502                            1 \u2502                                        1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n*/\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI think this comparison either:\r\n- should be not allowed and throw an exception to ask for user uses explicit conversion\r\n- or make valid implicit conversion relying on datetime/date essence of values\r\n\n",
  "hints_text": "related (duplicate?) https://github.com/ClickHouse/ClickHouse/issues/11222\nIt looks like this issue was recently fixed with #16952 :\r\n\r\n```SQL\r\nSELECT\r\n    n,\r\n    toTypeName(dt64) AS dt64_typename,\r\n\r\n    '<',\r\n    dt64 < dt,\r\n    toDateTime(dt64) < dt,\r\n    dt64 < toDateTime64(dt, 1, 'UTC'),\r\n    \r\n    '<=',\r\n    dt64 <= dt,\r\n    toDateTime(dt64) <= dt,\r\n    dt64 <= toDateTime64(dt, 1, 'UTC'),\r\n\r\n    '=',\r\n    dt64 = dt,\r\n    toDateTime(dt64) = dt,\r\n    dt64 = toDateTime64(dt, 1, 'UTC'),\r\n    \r\n    '>=',\r\n    dt64 >= dt,\r\n    toDateTime(dt64) >= dt,\r\n    dt64 >= toDateTime64(dt, 1, 'UTC'),\r\n    \r\n    '>',\r\n    dt64 > dt,\r\n    toDateTime(dt64) > dt,\r\n    dt64 > toDateTime64(dt, 1, 'UTC'),\r\n\r\n    '!=',\r\n    dt64 != dt,\r\n    toDateTime(dt64) != dt,\r\n    dt64 != toDateTime64(dt, 1, 'UTC')\r\nFROM \r\n(\r\n    SELECT\r\n        number - 1 as n,\r\n        toDateTime64(toStartOfInterval(now(), toIntervalSecond(1), 'UTC'), 1, 'UTC') + n AS dt64,\r\n        toStartOfInterval(now(), toIntervalSecond(1), 'UTC') AS dt\r\n    FROM system.numbers\r\n    LIMIT 3\r\n)\r\nFORMAT TabSeparated\r\n\r\n/*\r\n-1      DateTime64(1, \\'UTC\\')  <       1       1       1       <=      1       1       1       =       0       0       0       >=      0       0       0       >       0       0       0       !=      1       1       1\r\n0       DateTime64(1, \\'UTC\\')  <       0       0       0       <=      1       1       1       =       1       1       1       >=      1       1       1       >       0       0       0       !=      0       0       0\r\n1       DateTime64(1, \\'UTC\\')  <       0       0       0       <=      0       0       0       =       0       0       0       >=      1       1       1       >       1       1       1       !=      1       1       1\r\n*/\r\n```\r\nCould you please confirm?\n@Enmk PR was reverted due to flaky test, please make another PR.",
  "created_at": "2020-12-13T18:22:15Z"
}