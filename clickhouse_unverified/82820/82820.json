{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 82820,
  "instance_id": "ClickHouse__ClickHouse-82820",
  "issue_numbers": [
    "82664"
  ],
  "base_commit": "4929c205b017172a3c7c4d57ca8ee429a01fb95e",
  "patch": "diff --git a/src/Interpreters/SelectIntersectExceptQueryVisitor.cpp b/src/Interpreters/SelectIntersectExceptQueryVisitor.cpp\nindex c72961493f04..c39742e2e2fb 100644\n--- a/src/Interpreters/SelectIntersectExceptQueryVisitor.cpp\n+++ b/src/Interpreters/SelectIntersectExceptQueryVisitor.cpp\n@@ -32,12 +32,12 @@ void SelectIntersectExceptQueryMatcher::visit(ASTPtr & ast, Data & data)\n \n void SelectIntersectExceptQueryMatcher::visit(ASTSelectWithUnionQuery & ast, Data & data)\n {\n-    auto union_modes = std::move(ast.list_of_modes);\n+    auto union_modes = ast.list_of_modes;\n \n     if (union_modes.empty())\n         return;\n \n-    auto selects = std::move(ast.list_of_selects->children);\n+    auto selects = ast.list_of_selects->children;\n \n     if (union_modes.size() + 1 != selects.size())\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"Incorrect ASTSelectWithUnionQuery (modes: {}, selects: {})\",\n@@ -59,7 +59,7 @@ void SelectIntersectExceptQueryMatcher::visit(ASTSelectWithUnionQuery & ast, Dat\n             else if (data.except_default_mode == SetOperationMode::DISTINCT)\n                 mode = SelectUnionMode::EXCEPT_DISTINCT;\n             else\n-                throw Exception(DB::ErrorCodes::EXPECTED_ALL_OR_DISTINCT,\n+                throw Exception(ErrorCodes::EXPECTED_ALL_OR_DISTINCT,\n                     \"Expected ALL or DISTINCT in EXCEPT query, because setting (except_default_mode) is empty\");\n         }\n         else if (mode == SelectUnionMode::INTERSECT_DEFAULT)\n@@ -69,7 +69,7 @@ void SelectIntersectExceptQueryMatcher::visit(ASTSelectWithUnionQuery & ast, Dat\n             else if (data.intersect_default_mode == SetOperationMode::DISTINCT)\n                 mode = SelectUnionMode::INTERSECT_DISTINCT;\n             else\n-                throw Exception(DB::ErrorCodes::EXPECTED_ALL_OR_DISTINCT,\n+                throw Exception(ErrorCodes::EXPECTED_ALL_OR_DISTINCT,\n                     \"Expected ALL or DISTINCT in INTERSECT query, because setting (intersect_default_mode) is empty\");\n         }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03550_union_intersect_except_default_mode_rewrite_exception_safety.reference b/tests/queries/0_stateless/03550_union_intersect_except_default_mode_rewrite_exception_safety.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03550_union_intersect_except_default_mode_rewrite_exception_safety.sql b/tests/queries/0_stateless/03550_union_intersect_except_default_mode_rewrite_exception_safety.sql\nnew file mode 100644\nindex 000000000000..e638e0314d42\n--- /dev/null\n+++ b/tests/queries/0_stateless/03550_union_intersect_except_default_mode_rewrite_exception_safety.sql\n@@ -0,0 +1,1 @@\n+(SELECT 1 EXCEPT SELECT 1) SETTINGS except_default_mode = ''; -- { serverError EXPECTED_ALL_OR_DISTINCT }\n",
  "problem_statement": "Trivial EXCEPT query crash\n### Describe the bug\n\nHow was this not found before? Failing since v24.1\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/c8744f80-76a0-4198-b7cc-459a6ed3bf96\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\ncontrib/llvm-project/libcxx/include/vector:1443: assertion __n < size() failed: vector[] index out of bounds\n\n#0  __pthread_kill_implementation (threadid=<optimized out>, signo=6, no_tid=0) at ./nptl/pthread_kill.c:44\n#1  __pthread_kill_internal (threadid=<optimized out>, signo=6) at ./nptl/pthread_kill.c:89\n#2  __GI___pthread_kill (threadid=<optimized out>, signo=signo@entry=6) at ./nptl/pthread_kill.c:100\n#3  0x00007ffff7c456de in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\n#4  0x00007ffff7c288cd in __GI_abort () at ./stdlib/abort.c:73\n#5  0x000055557a23039d in std::__1::__libcpp_verbose_abort (format=<optimized out>) at  contrib/llvm-project/libcxx/src/verbose_abort.cpp:74\n#6  0x000055557276a3ac in std::__1::vector<DB::SelectUnionMode, std::__1::allocator<DB::SelectUnionMode> >::operator[][abi:se190107](unsigned long) const (this=0x7ffd4e7a9c20, __n=<optimized out>)\n    at  contrib/llvm-project/libcxx/include/vector:1443\n#7  DB::ASTSelectWithUnionQuery::formatQueryImpl(DB::WriteBuffer&, DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const::$_1::operator()(std::__1::shared_ptr<DB::IAST> const*) const (\n    it=0x7ffd4e79e128, this=<optimized out>) at  src/Parsers/ASTSelectWithUnionQuery.cpp:67\n#8  DB::ASTSelectWithUnionQuery::formatQueryImpl (this=0x7ffd4e7a9b18, ostr=..., settings=..., state=..., frame=...) at  src/Parsers/ASTSelectWithUnionQuery.cpp:89\n#9  0x000055557275d61a in DB::ASTQueryWithOutput::formatImpl (this=0x7ffd4e7a9b18, ostr=..., s=..., state=..., frame=...) at  src/Parsers/ASTQueryWithOutput.cpp:40\n#10 0x000055556401fd2e in DB::IAST::format (this=0x10c495, ostr=..., settings=...) at  src/Parsers/IAST.h:262\n#11 0x00005555727c636b in DB::IAST::formatWithPossiblyHidingSensitiveData (this=0x7ffd4e7a9b18, max_length=0, one_line=true, show_secrets=false, print_pretty_type_names=false, \n    identifier_quoting_rule=DB::IdentifierQuotingRule::WhenNecessary, identifier_quoting_style=DB::IdentifierQuotingStyle::Backticks) at  src/Parsers/IAST.cpp:187\n#12 0x00005555727c64da in DB::IAST::formatForErrorMessage (this=0x10c49d) at  src/Parsers/IAST.cpp:204\n#13 0x000055556f98265b in DB::InDepthNodeVisitor<DB::SelectIntersectExceptQueryMatcher, false, false, std::__1::shared_ptr<DB::IAST> >::doVisit (this=this@entry=0x7ffe951eea70, ast=...)\n    at  src/Interpreters/InDepthNodeVisitor.h:75\n#14 0x000055556f973c95 in DB::InDepthNodeVisitor<DB::SelectIntersectExceptQueryMatcher, false, false, std::__1::shared_ptr<DB::IAST> >::visitImplMain<false> (this=0x7ffe951eea70, ast=...)\n    at  src/Interpreters/InDepthNodeVisitor.h:61\n#15 DB::InDepthNodeVisitor<DB::SelectIntersectExceptQueryMatcher, false, false, std::__1::shared_ptr<DB::IAST> >::visitImpl<false> (this=0x7ffe951eea70, ast=...)\n    at  src/Interpreters/InDepthNodeVisitor.h:51\n#16 DB::InDepthNodeVisitor<DB::SelectIntersectExceptQueryMatcher, false, false, std::__1::shared_ptr<DB::IAST> >::visit (this=0x7ffe951eea70, ast=...)\n    at  src/Interpreters/InDepthNodeVisitor.h:32\n#17 DB::executeQueryImpl (begin=<optimized out>, end=<optimized out>, context=..., flags=..., stage=DB::QueryProcessingStage::Complete, istr=0x0, out_ast=...)\n    at  src/Interpreters/executeQuery.cpp:1222\n#18 0x000055556f972051 in DB::executeQuery (query=..., context=..., flags=..., stage=DB::QueryProcessingStage::Complete) at  src/Interpreters/executeQuery.cpp:1715\n#19 0x00005555717333b2 in DB::TCPHandler::runImpl (this=0x7ffd4e7ab000) at  src/Server/TCPHandler.cpp:722\n#20 0x000055557174c9e4 in DB::TCPHandler::run (this=0x10c495) at  src/Server/TCPHandler.cpp:2729\n#21 0x0000555575a72167 in Poco::Net::TCPServerConnection::start (this=0x10c495) at  base/poco/Net/src/TCPServerConnection.cpp:40\n#22 0x0000555575a72665 in Poco::Net::TCPServerDispatcher::run (this=0x7ffd70b8f700) at  base/poco/Net/src/TCPServerDispatcher.cpp:115\n#23 0x0000555575a1ab5f in Poco::PooledThread::run (this=0x7ffff5159880) at  base/poco/Foundation/src/ThreadPool.cpp:205\n#24 0x0000555575a18711 in Poco::ThreadImpl::runnableEntry (pThread=<optimized out>) at  base/poco/Foundation/src/Thread_POSIX.cpp:335\n#25 0x00007ffff7ca2ef1 in start_thread (arg=<optimized out>) at ./nptl/pthread_create.c:448\n#26 0x00007ffff7d3445c in __GI___clone3 () at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:78\n```\n",
  "hints_text": "",
  "created_at": "2025-06-29T04:07:49Z",
  "modified_files": [
    "src/Interpreters/SelectIntersectExceptQueryVisitor.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03550_union_intersect_except_default_mode_rewrite_exception_safety.sql"
  ]
}