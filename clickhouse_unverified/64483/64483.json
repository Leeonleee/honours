{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64483,
  "instance_id": "ClickHouse__ClickHouse-64483",
  "issue_numbers": [
    "63460"
  ],
  "base_commit": "253fa03503de8436e266dc39dfb43be11abc1fc8",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp b/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp\nindex bc1b3695d88c..c175cd516ac7 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp\n@@ -22,6 +22,7 @@\n #include <Processors/QueryPlan/TotalsHavingStep.h>\n #include <Processors/QueryPlan/UnionStep.h>\n #include <Processors/QueryPlan/WindowStep.h>\n+#include \"Storages/KeyDescription.h\"\n #include <Storages/StorageMerge.h>\n #include <Common/typeid_cast.h>\n \n@@ -332,8 +333,7 @@ InputOrderInfoPtr buildInputOrderInfo(\n     const FixedColumns & fixed_columns,\n     const ActionsDAGPtr & dag,\n     const SortDescription & description,\n-    const ActionsDAG & sorting_key_dag,\n-    const Names & sorting_key_columns,\n+    const KeyDescription & sorting_key,\n     size_t limit)\n {\n     //std::cerr << \"------- buildInputOrderInfo \" << std::endl;\n@@ -343,6 +343,8 @@ InputOrderInfoPtr buildInputOrderInfo(\n     MatchedTrees::Matches matches;\n     FixedColumns fixed_key_columns;\n \n+    const auto & sorting_key_dag = sorting_key.expression->getActionsDAG();\n+\n     if (dag)\n     {\n         matches = matchTrees(sorting_key_dag.getOutputs(), *dag);\n@@ -371,9 +373,9 @@ InputOrderInfoPtr buildInputOrderInfo(\n     size_t next_description_column = 0;\n     size_t next_sort_key = 0;\n \n-    while (next_description_column < description.size() && next_sort_key < sorting_key_columns.size())\n+    while (next_description_column < description.size() && next_sort_key < sorting_key.column_names.size())\n     {\n-        const auto & sorting_key_column = sorting_key_columns[next_sort_key];\n+        const auto & sorting_key_column = sorting_key.column_names[next_sort_key];\n         const auto & sort_column_description = description[next_description_column];\n \n         /// If required order depend on collation, it cannot be matched with primary key order.\n@@ -381,6 +383,12 @@ InputOrderInfoPtr buildInputOrderInfo(\n         if (sort_column_description.collator)\n             break;\n \n+        /// Since sorting key columns are always sorted with NULLS LAST, reading in order\n+        /// supported only for ASC NULLS LAST (\"in order\"), and DESC NULLS FIRST (\"reverse\")\n+        const auto column_is_nullable = sorting_key.data_types[next_sort_key]->isNullable();\n+        if (column_is_nullable && sort_column_description.nulls_direction != 1)\n+            break;\n+\n         /// Direction for current sort key.\n         int current_direction = 0;\n         bool strict_monotonic = true;\n@@ -691,12 +699,11 @@ InputOrderInfoPtr buildInputOrderInfo(\n     size_t limit)\n {\n     const auto & sorting_key = reading->getStorageMetadata()->getSortingKey();\n-    const auto & sorting_key_columns = sorting_key.column_names;\n \n     return buildInputOrderInfo(\n         fixed_columns,\n         dag, description,\n-        sorting_key.expression->getActionsDAG(), sorting_key_columns,\n+        sorting_key,\n         limit);\n }\n \n@@ -714,15 +721,14 @@ InputOrderInfoPtr buildInputOrderInfo(\n     {\n         auto storage = std::get<StoragePtr>(table);\n         const auto & sorting_key = storage->getInMemoryMetadataPtr()->getSortingKey();\n-        const auto & sorting_key_columns = sorting_key.column_names;\n \n-        if (sorting_key_columns.empty())\n+        if (sorting_key.column_names.empty())\n             return nullptr;\n \n         auto table_order_info = buildInputOrderInfo(\n             fixed_columns,\n             dag, description,\n-            sorting_key.expression->getActionsDAG(), sorting_key_columns,\n+            sorting_key,\n             limit);\n \n         if (!table_order_info)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03164_optimize_read_in_order_nullable.reference b/tests/queries/0_stateless/03164_optimize_read_in_order_nullable.reference\nnew file mode 100644\nindex 000000000000..7e866b496a81\n--- /dev/null\n+++ b/tests/queries/0_stateless/03164_optimize_read_in_order_nullable.reference\n@@ -0,0 +1,32 @@\n+-- Reproducer result:\n+\\N\tMark\t50\n+1\tJohn\t33\n+2\tKsenia\t48\n+\n+-- Read in order, no sort required:\n+0\t0\n+1\t\\N\n+4\t4\n+\\N\t2\n+\\N\t\\N\n+\n+-- Read in order, partial sort for second key:\n+0\t0\n+1\t\\N\n+4\t4\n+\\N\t\\N\n+\\N\t2\n+\n+-- No reading in order, sort for first key:\n+\\N\t2\n+\\N\t\\N\n+0\t0\n+1\t\\N\n+4\t4\n+\n+-- Reverse order, partial sort for the second key:\n+\\N\t2\n+\\N\t\\N\n+4\t4\n+1\t\\N\n+0\t0\ndiff --git a/tests/queries/0_stateless/03164_optimize_read_in_order_nullable.sql b/tests/queries/0_stateless/03164_optimize_read_in_order_nullable.sql\nnew file mode 100644\nindex 000000000000..7af6e55bf98f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03164_optimize_read_in_order_nullable.sql\n@@ -0,0 +1,55 @@\n+-- Reproducer from https://github.com/ClickHouse/ClickHouse/issues/63460\n+DROP TABLE IF EXISTS 03164_users;\n+CREATE TABLE 03164_users (uid Nullable(Int16), name String, age Int16) ENGINE=MergeTree ORDER BY (uid) SETTINGS allow_nullable_key=1;\n+\n+INSERT INTO 03164_users VALUES (1, 'John', 33);\n+INSERT INTO 03164_users VALUES (2, 'Ksenia', 48);\n+INSERT INTO 03164_users VALUES (NULL, 'Mark', 50);\n+OPTIMIZE TABLE 03164_users FINAL;\n+\n+SELECT '-- Reproducer result:';\n+\n+SELECT * FROM 03164_users ORDER BY uid ASC NULLS FIRST LIMIT 10 SETTINGS optimize_read_in_order = 1;\n+\n+DROP TABLE IF EXISTS 03164_users;\n+\n+DROP TABLE IF EXISTS 03164_multi_key;\n+CREATE TABLE 03164_multi_key (c1 Nullable(UInt32), c2 Nullable(UInt32)) ENGINE = MergeTree ORDER BY (c1, c2) SETTINGS allow_nullable_key=1;\n+\n+INSERT INTO 03164_multi_key VALUES (0, 0), (1, NULL), (NULL, 2), (NULL, NULL), (4, 4);\n+-- Just in case\n+OPTIMIZE TABLE 03164_multi_key FINAL;\n+\n+SELECT '';\n+SELECT '-- Read in order, no sort required:';\n+\n+SELECT c1, c2\n+FROM 03164_multi_key\n+ORDER BY c1 ASC NULLS LAST, c2 ASC NULLS LAST\n+SETTINGS optimize_read_in_order = 1;\n+\n+SELECT '';\n+SELECT '-- Read in order, partial sort for second key:';\n+\n+SELECT c1, c2\n+FROM 03164_multi_key\n+ORDER BY c1 ASC NULLS LAST, c2 ASC NULLS FIRST\n+SETTINGS optimize_read_in_order = 1;\n+\n+SELECT '';\n+SELECT '-- No reading in order, sort for first key:';\n+\n+SELECT c1, c2\n+FROM 03164_multi_key\n+ORDER BY c1 ASC NULLS FIRST, c2 ASC NULLS LAST\n+SETTINGS optimize_read_in_order = 1;\n+\n+SELECT '';\n+SELECT '-- Reverse order, partial sort for the second key:';\n+\n+SELECT c1, c2\n+FROM 03164_multi_key\n+ORDER BY c1 DESC NULLS FIRST, c2 DESC NULLS LAST\n+SETTINGS optimize_read_in_order = 1;\n+\n+DROP TABLE IF EXISTS 03164_multi_key;\n",
  "problem_statement": "ORDER BY NULLS FIRST doesn't work correctly with optimize_read_in_order=1 and rows in same part.\n**Describe what's wrong**\r\n\r\nORDER BY NULLS FIRST doesn't work correctly with optimize_read_in_order=1 and rows in same part\r\n\r\n**How to reproduce**\r\n\r\n```\r\nCREATE TABLE users (uid Nullable(Int16), name String, age Int16) ENGINE=MergeTree ORDER BY (uid) SETTINGS allow_nullable_key=1;\r\n\r\nINSERT INTO users VALUES (1, 'John', 33);\r\nINSERT INTO users VALUES (2, 'Ksenia', 48);\r\nINSERT INTO users VALUES (NULL, 'Mark', 50);\r\nOPTIMIZE TABLE users FINAL;\r\n\r\nSELECT * FROM users ORDER BY uid ASC LIMIT 10;\r\n\r\nSELECT '##########################';\r\n\r\nSELECT * FROM users ORDER BY uid ASC NULLS FIRST LIMIT 10;\r\n\r\nSELECT '##########################';\r\n\r\n\r\nSELECT * FROM users ORDER BY uid ASC NULLS FIRST SETTINGS optimize_read_in_order=0;\r\n\r\n\r\n1\tJohn\t33\r\n2\tKsenia\t48\r\n\\N\tMark\t50\r\n##########################\r\n1\tJohn\t33\r\n2\tKsenia\t48\r\n\\N\tMark\t50\r\n##########################\r\n\\N\tMark\t50\r\n1\tJohn\t33\r\n2\tKsenia\t48\r\n\r\n```\r\n\r\nhttps://fiddle.clickhouse.com/ec292b92-aa93-4df9-9372-d9aee1a045ba\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-05-27T17:14:12Z",
  "modified_files": [
    "src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03164_optimize_read_in_order_nullable.reference",
    "b/tests/queries/0_stateless/03164_optimize_read_in_order_nullable.sql"
  ]
}