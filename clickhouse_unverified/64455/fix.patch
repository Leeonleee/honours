diff --git a/src/Storages/ColumnDefault.cpp b/src/Storages/ColumnDefault.cpp
index dcb59f7bd655..a5f8e8df4258 100644
--- a/src/Storages/ColumnDefault.cpp
+++ b/src/Storages/ColumnDefault.cpp
@@ -56,6 +56,30 @@ std::string toString(const ColumnDefaultKind kind)
     throw Exception(ErrorCodes::LOGICAL_ERROR, "Invalid ColumnDefaultKind");
 }
 
+ColumnDefault & ColumnDefault::operator=(const ColumnDefault & other)
+{
+    if (this == &other)
+        return *this;
+
+    kind = other.kind;
+    expression = other.expression ? other.expression->clone() : nullptr;
+    ephemeral_default = other.ephemeral_default;
+
+    return *this;
+}
+
+ColumnDefault & ColumnDefault::operator=(ColumnDefault && other) noexcept
+{
+    if (this == &other)
+        return *this;
+
+    kind = std::exchange(other.kind, ColumnDefaultKind{});
+    expression = other.expression ? other.expression->clone() : nullptr;
+    other.expression.reset();
+    ephemeral_default = std::exchange(other.ephemeral_default, false);
+
+    return *this;
+}
 
 bool operator==(const ColumnDefault & lhs, const ColumnDefault & rhs)
 {
diff --git a/src/Storages/ColumnDefault.h b/src/Storages/ColumnDefault.h
index a2ca8da4678e..0ec486e022f0 100644
--- a/src/Storages/ColumnDefault.h
+++ b/src/Storages/ColumnDefault.h
@@ -24,15 +24,19 @@ std::string toString(ColumnDefaultKind kind);
 
 struct ColumnDefault
 {
+    ColumnDefault() = default;
+    ColumnDefault(const ColumnDefault & other) { *this = other; }
+    ColumnDefault & operator=(const ColumnDefault & other);
+    ColumnDefault(ColumnDefault && other) noexcept { *this = std::move(other); }
+    ColumnDefault & operator=(ColumnDefault && other) noexcept;
+
     ColumnDefaultKind kind = ColumnDefaultKind::Default;
     ASTPtr expression;
     bool ephemeral_default = false;
 };
 
-
 bool operator==(const ColumnDefault & lhs, const ColumnDefault & rhs);
 
-
 using ColumnDefaults = std::unordered_map<std::string, ColumnDefault>;
 
 }
diff --git a/src/Storages/ColumnsDescription.cpp b/src/Storages/ColumnsDescription.cpp
index 4cf66649ad18..a88699703003 100644
--- a/src/Storages/ColumnsDescription.cpp
+++ b/src/Storages/ColumnsDescription.cpp
@@ -60,6 +60,46 @@ ColumnDescription::ColumnDescription(String name_, DataTypePtr type_, ASTPtr cod
 {
 }
 
+ColumnDescription & ColumnDescription::operator=(const ColumnDescription & other)
+{
+    if (this == &other)
+        return *this;
+
+    name = other.name;
+    type = other.type;
+    default_desc = other.default_desc;
+    comment = other.comment;
+    codec = other.codec ? other.codec->clone() : nullptr;
+    settings = other.settings;
+    ttl = other.ttl ? other.ttl->clone() : nullptr;
+    stat = other.stat;
+
+    return *this;
+}
+
+ColumnDescription & ColumnDescription::operator=(ColumnDescription && other) noexcept
+{
+    if (this == &other)
+        return *this;
+
+    name = std::move(other.name);
+    type = std::move(other.type);
+    default_desc = std::move(other.default_desc);
+    comment = std::move(other.comment);
+
+    codec = other.codec ? other.codec->clone() : nullptr;
+    other.codec.reset();
+
+    settings = std::move(other.settings);
+
+    ttl = other.ttl ? other.ttl->clone() : nullptr;
+    other.ttl.reset();
+
+    stat = std::move(other.stat);
+
+    return *this;
+}
+
 bool ColumnDescription::operator==(const ColumnDescription & other) const
 {
     auto ast_to_str = [](const ASTPtr & ast) { return ast ? queryToString(ast) : String{}; };
diff --git a/src/Storages/ColumnsDescription.h b/src/Storages/ColumnsDescription.h
index 82e55e29073e..79e43d0a4e46 100644
--- a/src/Storages/ColumnsDescription.h
+++ b/src/Storages/ColumnsDescription.h
@@ -92,8 +92,11 @@ struct ColumnDescription
     std::optional<StatisticDescription> stat;
 
     ColumnDescription() = default;
-    ColumnDescription(ColumnDescription &&) = default;
-    ColumnDescription(const ColumnDescription &) = default;
+    ColumnDescription(const ColumnDescription & other) { *this = other; }
+    ColumnDescription & operator=(const ColumnDescription & other);
+    ColumnDescription(ColumnDescription && other) noexcept { *this = std::move(other); }
+    ColumnDescription & operator=(ColumnDescription && other) noexcept;
+
     ColumnDescription(String name_, DataTypePtr type_);
     ColumnDescription(String name_, DataTypePtr type_, String comment_);
     ColumnDescription(String name_, DataTypePtr type_, ASTPtr codec_, String comment_);
diff --git a/src/Storages/StatisticsDescription.cpp b/src/Storages/StatisticsDescription.cpp
index a427fb6a7cda..7d4226f2fbef 100644
--- a/src/Storages/StatisticsDescription.cpp
+++ b/src/Storages/StatisticsDescription.cpp
@@ -22,6 +22,31 @@ namespace ErrorCodes
     extern const int LOGICAL_ERROR;
 };
 
+StatisticDescription & StatisticDescription::operator=(const StatisticDescription & other)
+{
+    if (this == &other)
+        return *this;
+
+    type = other.type;
+    column_name = other.column_name;
+    ast = other.ast ? other.ast->clone() : nullptr;
+
+    return *this;
+}
+
+StatisticDescription & StatisticDescription::operator=(StatisticDescription && other) noexcept
+{
+    if (this == &other)
+        return *this;
+
+    type = std::exchange(other.type, StatisticType{});
+    column_name = std::move(other.column_name);
+    ast = other.ast ? other.ast->clone() : nullptr;
+    other.ast.reset();
+
+    return *this;
+}
+
 StatisticType stringToType(String type)
 {
     if (type == "tdigest")
@@ -55,15 +80,7 @@ std::vector<StatisticDescription> StatisticDescription::getStatisticsFromAST(con
 
         const auto & column = columns.getPhysical(column_name);
         stat.column_name = column.name;
-
-        auto function_node = std::make_shared<ASTFunction>();
-        function_node->name = "STATISTIC";
-        function_node->arguments = std::make_shared<ASTExpressionList>();
-        function_node->arguments->children.push_back(std::make_shared<ASTIdentifier>(stat_definition->type));
-        function_node->children.push_back(function_node->arguments);
-
-        stat.ast = function_node;
-
+        stat.ast = makeASTFunction("STATISTIC", std::make_shared<ASTIdentifier>(stat_definition->type));
         stats.push_back(stat);
     }
 
@@ -80,6 +97,7 @@ StatisticDescription StatisticDescription::getStatisticFromColumnDeclaration(con
     const auto & stat_type_list_ast = column.stat_type->as<ASTFunction &>().arguments;
     if (stat_type_list_ast->children.size() != 1)
         throw Exception(ErrorCodes::INCORRECT_QUERY, "We expect only one statistic type for column {}", queryToString(column));
+
     const auto & stat_type = stat_type_list_ast->children[0]->as<ASTFunction &>().name;
 
     StatisticDescription stat;
diff --git a/src/Storages/StatisticsDescription.h b/src/Storages/StatisticsDescription.h
index 9a66951ab523..b571fa31e9d7 100644
--- a/src/Storages/StatisticsDescription.h
+++ b/src/Storages/StatisticsDescription.h
@@ -27,6 +27,10 @@ struct StatisticDescription
     String getTypeName() const;
 
     StatisticDescription() = default;
+    StatisticDescription(const StatisticDescription & other) { *this = other; }
+    StatisticDescription & operator=(const StatisticDescription & other);
+    StatisticDescription(StatisticDescription && other) noexcept { *this = std::move(other); }
+    StatisticDescription & operator=(StatisticDescription && other) noexcept;
 
     bool operator==(const StatisticDescription & other) const
     {
