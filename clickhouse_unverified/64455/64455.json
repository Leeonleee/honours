{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64455,
  "instance_id": "ClickHouse__ClickHouse-64455",
  "issue_numbers": [
    "64385"
  ],
  "base_commit": "b180004e08fc6b273312a45de79023e0f50f5cb6",
  "patch": "diff --git a/src/Storages/ColumnDefault.cpp b/src/Storages/ColumnDefault.cpp\nindex dcb59f7bd655..a5f8e8df4258 100644\n--- a/src/Storages/ColumnDefault.cpp\n+++ b/src/Storages/ColumnDefault.cpp\n@@ -56,6 +56,30 @@ std::string toString(const ColumnDefaultKind kind)\n     throw Exception(ErrorCodes::LOGICAL_ERROR, \"Invalid ColumnDefaultKind\");\n }\n \n+ColumnDefault & ColumnDefault::operator=(const ColumnDefault & other)\n+{\n+    if (this == &other)\n+        return *this;\n+\n+    kind = other.kind;\n+    expression = other.expression ? other.expression->clone() : nullptr;\n+    ephemeral_default = other.ephemeral_default;\n+\n+    return *this;\n+}\n+\n+ColumnDefault & ColumnDefault::operator=(ColumnDefault && other) noexcept\n+{\n+    if (this == &other)\n+        return *this;\n+\n+    kind = std::exchange(other.kind, ColumnDefaultKind{});\n+    expression = other.expression ? other.expression->clone() : nullptr;\n+    other.expression.reset();\n+    ephemeral_default = std::exchange(other.ephemeral_default, false);\n+\n+    return *this;\n+}\n \n bool operator==(const ColumnDefault & lhs, const ColumnDefault & rhs)\n {\ndiff --git a/src/Storages/ColumnDefault.h b/src/Storages/ColumnDefault.h\nindex a2ca8da4678e..0ec486e022f0 100644\n--- a/src/Storages/ColumnDefault.h\n+++ b/src/Storages/ColumnDefault.h\n@@ -24,15 +24,19 @@ std::string toString(ColumnDefaultKind kind);\n \n struct ColumnDefault\n {\n+    ColumnDefault() = default;\n+    ColumnDefault(const ColumnDefault & other) { *this = other; }\n+    ColumnDefault & operator=(const ColumnDefault & other);\n+    ColumnDefault(ColumnDefault && other) noexcept { *this = std::move(other); }\n+    ColumnDefault & operator=(ColumnDefault && other) noexcept;\n+\n     ColumnDefaultKind kind = ColumnDefaultKind::Default;\n     ASTPtr expression;\n     bool ephemeral_default = false;\n };\n \n-\n bool operator==(const ColumnDefault & lhs, const ColumnDefault & rhs);\n \n-\n using ColumnDefaults = std::unordered_map<std::string, ColumnDefault>;\n \n }\ndiff --git a/src/Storages/ColumnsDescription.cpp b/src/Storages/ColumnsDescription.cpp\nindex 4cf66649ad18..a88699703003 100644\n--- a/src/Storages/ColumnsDescription.cpp\n+++ b/src/Storages/ColumnsDescription.cpp\n@@ -60,6 +60,46 @@ ColumnDescription::ColumnDescription(String name_, DataTypePtr type_, ASTPtr cod\n {\n }\n \n+ColumnDescription & ColumnDescription::operator=(const ColumnDescription & other)\n+{\n+    if (this == &other)\n+        return *this;\n+\n+    name = other.name;\n+    type = other.type;\n+    default_desc = other.default_desc;\n+    comment = other.comment;\n+    codec = other.codec ? other.codec->clone() : nullptr;\n+    settings = other.settings;\n+    ttl = other.ttl ? other.ttl->clone() : nullptr;\n+    stat = other.stat;\n+\n+    return *this;\n+}\n+\n+ColumnDescription & ColumnDescription::operator=(ColumnDescription && other) noexcept\n+{\n+    if (this == &other)\n+        return *this;\n+\n+    name = std::move(other.name);\n+    type = std::move(other.type);\n+    default_desc = std::move(other.default_desc);\n+    comment = std::move(other.comment);\n+\n+    codec = other.codec ? other.codec->clone() : nullptr;\n+    other.codec.reset();\n+\n+    settings = std::move(other.settings);\n+\n+    ttl = other.ttl ? other.ttl->clone() : nullptr;\n+    other.ttl.reset();\n+\n+    stat = std::move(other.stat);\n+\n+    return *this;\n+}\n+\n bool ColumnDescription::operator==(const ColumnDescription & other) const\n {\n     auto ast_to_str = [](const ASTPtr & ast) { return ast ? queryToString(ast) : String{}; };\ndiff --git a/src/Storages/ColumnsDescription.h b/src/Storages/ColumnsDescription.h\nindex 82e55e29073e..79e43d0a4e46 100644\n--- a/src/Storages/ColumnsDescription.h\n+++ b/src/Storages/ColumnsDescription.h\n@@ -92,8 +92,11 @@ struct ColumnDescription\n     std::optional<StatisticDescription> stat;\n \n     ColumnDescription() = default;\n-    ColumnDescription(ColumnDescription &&) = default;\n-    ColumnDescription(const ColumnDescription &) = default;\n+    ColumnDescription(const ColumnDescription & other) { *this = other; }\n+    ColumnDescription & operator=(const ColumnDescription & other);\n+    ColumnDescription(ColumnDescription && other) noexcept { *this = std::move(other); }\n+    ColumnDescription & operator=(ColumnDescription && other) noexcept;\n+\n     ColumnDescription(String name_, DataTypePtr type_);\n     ColumnDescription(String name_, DataTypePtr type_, String comment_);\n     ColumnDescription(String name_, DataTypePtr type_, ASTPtr codec_, String comment_);\ndiff --git a/src/Storages/StatisticsDescription.cpp b/src/Storages/StatisticsDescription.cpp\nindex a427fb6a7cda..7d4226f2fbef 100644\n--- a/src/Storages/StatisticsDescription.cpp\n+++ b/src/Storages/StatisticsDescription.cpp\n@@ -22,6 +22,31 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n };\n \n+StatisticDescription & StatisticDescription::operator=(const StatisticDescription & other)\n+{\n+    if (this == &other)\n+        return *this;\n+\n+    type = other.type;\n+    column_name = other.column_name;\n+    ast = other.ast ? other.ast->clone() : nullptr;\n+\n+    return *this;\n+}\n+\n+StatisticDescription & StatisticDescription::operator=(StatisticDescription && other) noexcept\n+{\n+    if (this == &other)\n+        return *this;\n+\n+    type = std::exchange(other.type, StatisticType{});\n+    column_name = std::move(other.column_name);\n+    ast = other.ast ? other.ast->clone() : nullptr;\n+    other.ast.reset();\n+\n+    return *this;\n+}\n+\n StatisticType stringToType(String type)\n {\n     if (type == \"tdigest\")\n@@ -55,15 +80,7 @@ std::vector<StatisticDescription> StatisticDescription::getStatisticsFromAST(con\n \n         const auto & column = columns.getPhysical(column_name);\n         stat.column_name = column.name;\n-\n-        auto function_node = std::make_shared<ASTFunction>();\n-        function_node->name = \"STATISTIC\";\n-        function_node->arguments = std::make_shared<ASTExpressionList>();\n-        function_node->arguments->children.push_back(std::make_shared<ASTIdentifier>(stat_definition->type));\n-        function_node->children.push_back(function_node->arguments);\n-\n-        stat.ast = function_node;\n-\n+        stat.ast = makeASTFunction(\"STATISTIC\", std::make_shared<ASTIdentifier>(stat_definition->type));\n         stats.push_back(stat);\n     }\n \n@@ -80,6 +97,7 @@ StatisticDescription StatisticDescription::getStatisticFromColumnDeclaration(con\n     const auto & stat_type_list_ast = column.stat_type->as<ASTFunction &>().arguments;\n     if (stat_type_list_ast->children.size() != 1)\n         throw Exception(ErrorCodes::INCORRECT_QUERY, \"We expect only one statistic type for column {}\", queryToString(column));\n+\n     const auto & stat_type = stat_type_list_ast->children[0]->as<ASTFunction &>().name;\n \n     StatisticDescription stat;\ndiff --git a/src/Storages/StatisticsDescription.h b/src/Storages/StatisticsDescription.h\nindex 9a66951ab523..b571fa31e9d7 100644\n--- a/src/Storages/StatisticsDescription.h\n+++ b/src/Storages/StatisticsDescription.h\n@@ -27,6 +27,10 @@ struct StatisticDescription\n     String getTypeName() const;\n \n     StatisticDescription() = default;\n+    StatisticDescription(const StatisticDescription & other) { *this = other; }\n+    StatisticDescription & operator=(const StatisticDescription & other);\n+    StatisticDescription(StatisticDescription && other) noexcept { *this = std::move(other); }\n+    StatisticDescription & operator=(StatisticDescription && other) noexcept;\n \n     bool operator==(const StatisticDescription & other) const\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03164_create_as_default.reference b/tests/queries/0_stateless/03164_create_as_default.reference\nnew file mode 100644\nindex 000000000000..aceba23beaf3\n--- /dev/null\n+++ b/tests/queries/0_stateless/03164_create_as_default.reference\n@@ -0,0 +1,5 @@\n+CREATE TABLE default.src_table\\n(\\n    `time` DateTime(\\'UTC\\') DEFAULT fromUnixTimestamp(sipTimestamp),\\n    `sipTimestamp` UInt64\\n)\\nENGINE = MergeTree\\nORDER BY time\\nSETTINGS index_granularity = 8192\n+sipTimestamp\t\n+time\tfromUnixTimestamp(sipTimestamp)\n+{\"time\":\"2024-05-20 09:00:00\",\"sipTimestamp\":\"1716195600\"}\n+{\"time\":\"2024-05-20 09:00:00\",\"sipTimestamp\":\"1716195600\"}\ndiff --git a/tests/queries/0_stateless/03164_create_as_default.sql b/tests/queries/0_stateless/03164_create_as_default.sql\nnew file mode 100644\nindex 000000000000..e9fd7c1e35a8\n--- /dev/null\n+++ b/tests/queries/0_stateless/03164_create_as_default.sql\n@@ -0,0 +1,27 @@\n+DROP TABLE IF EXISTS src_table;\n+DROP TABLE IF EXISTS copied_table;\n+\n+CREATE TABLE src_table\n+(\n+    time DateTime('UTC') DEFAULT fromUnixTimestamp(sipTimestamp),\n+    sipTimestamp UInt64\n+)\n+ENGINE = MergeTree\n+ORDER BY time;\n+\n+INSERT INTO src_table(sipTimestamp) VALUES (toUnixTimestamp(toDateTime('2024-05-20 09:00:00', 'UTC')));\n+\n+CREATE TABLE copied_table AS src_table;\n+\n+ALTER TABLE copied_table RENAME COLUMN `sipTimestamp` TO `timestamp`;\n+\n+SHOW CREATE TABLE src_table;\n+\n+SELECT name, default_expression FROM system.columns WHERE database = currentDatabase() AND table = 'src_table' ORDER BY name;\n+INSERT INTO src_table(sipTimestamp) VALUES (toUnixTimestamp(toDateTime('2024-05-20 09:00:00', 'UTC')));\n+\n+SELECT * FROM src_table ORDER BY time FORMAT JSONEachRow;\n+SELECT * FROM copied_table ORDER BY time FORMAT JSONEachRow;\n+\n+DROP TABLE src_table;\n+DROP TABLE copied_table;\n",
  "problem_statement": "Modifying column with default expression in copied table (using AS) affects source table\n**Describe the unexpected behaviour**\r\n\r\nBasically the flow:\r\n\r\n- creating a new table with a default expression using CREATE TABLE AS from another table\r\n- renaming the columns in the new table with DEFAULT expression modifies the DEFAULT expression in old table and INSERT fails\r\n\r\n**How to reproduce**\r\nhttps://fiddle.clickhouse.com/9d48b670-e2b6-4f53-9e8e-6153023bd88c\r\n\r\n```\r\ncreate table src_table (\r\n    _time DateTime default fromUnixTimestamp(sipTimestamp)\r\n  , sipTimestamp UInt64\r\n)\r\nengine = MergeTree\r\norder by _time\r\n;\r\n\r\ninsert into src_table(sipTimestamp) select toUnixTimestamp(toDateTime('2024-05-20 09:00:00'));\r\n\r\ncreate table copied_table as src_table;\r\n\r\nalter table copied_table\r\n    rename column `sipTimestamp` to `timestamp`\r\n;\r\n\r\nselect '----------------------------------------';\r\nselect '---- \"show create table\" shows no change';\r\nshow create table src_table format TabSeparatedRaw;\r\nselect '----------------------------------------';\r\nselect '---- \"system.columns\" shows default was modified in src table and it should not, only in copied_table';\r\nselect name, default_expression from system.columns where table = 'src_table' format PrettyCompactMonoBlock;\r\nselect '----------------------------------------';\r\nselect '---- insert fails because \"_time\" default expression has changed';\r\ninsert into src_table(sipTimestamp) select toUnixTimestamp(toDateTime('2024-05-20 09:00:00'));\r\n\r\nMissing columns: 'timestamp' while processing query: '_CAST(fromUnixTimestamp(timestamp), 'DateTime') AS _time', required columns: 'timestamp' 'timestamp'. (UNKNOWN_IDENTIFIER)\r\n(query: insert into src_table(sipTimestamp) select toUnixTimestamp(toDateTime('2024-05-20 09:00:00'));)\r\n\r\n```\r\n\r\n* Which ClickHouse server version to use\r\n\r\nTested in latest\r\n\r\n**Expected behavior**\r\nInsert should work\r\n\r\n**Error message and/or stacktrace**\r\n```\r\nMissing columns: 'timestamp' while processing query: '_CAST(fromUnixTimestamp(timestamp), 'DateTime') AS _time', required columns: 'timestamp' 'timestamp'. (UNKNOWN_IDENTIFIER)\r\n(query: insert into src_table(sipTimestamp) select toUnixTimestamp(toDateTime('2024-05-20 09:00:00'));)\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2024-05-27T15:00:44Z",
  "modified_files": [
    "src/Storages/ColumnDefault.cpp",
    "src/Storages/ColumnDefault.h",
    "src/Storages/ColumnsDescription.cpp",
    "src/Storages/ColumnsDescription.h",
    "src/Storages/StatisticsDescription.cpp",
    "src/Storages/StatisticsDescription.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03164_create_as_default.reference",
    "b/tests/queries/0_stateless/03164_create_as_default.sql"
  ]
}