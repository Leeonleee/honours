{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73852,
  "instance_id": "ClickHouse__ClickHouse-73852",
  "issue_numbers": [
    "49153"
  ],
  "base_commit": "e9dcfc754300304e9f2f021ce1a77934ab62bd22",
  "patch": "diff --git a/src/Core/FormatFactorySettings.h b/src/Core/FormatFactorySettings.h\nindex 661518007b1d..c432f46bb349 100644\n--- a/src/Core/FormatFactorySettings.h\n+++ b/src/Core/FormatFactorySettings.h\n@@ -911,6 +911,13 @@ The value 0 means - never cut.\n )\", 0) \\\n     DECLARE(UInt64, output_format_pretty_max_value_width_apply_for_single_value, false, R\"(\n Only cut values (see the `output_format_pretty_max_value_width` setting) when it is not a single value in a block. Otherwise output it entirely, which is useful for the `SHOW CREATE TABLE` query.\n+)\", 0) \\\n+DECLARE(UInt64, output_format_pretty_squash_consecutive_ms, 50, R\"(\n+Wait for the next block for up to specified number of milliseconds and squash it to the previous before writing.\n+This avoids frequent output of too small blocks, but still allows to display data in a streaming fashion.\n+)\", 0) \\\n+DECLARE(UInt64, output_format_pretty_squash_max_wait_ms, 1000, R\"(\n+Output the pending block in pretty formats if more than the specified number of milliseconds has passed since the previous output.\n )\", 0) \\\n     DECLARE(UInt64Auto, output_format_pretty_color, \"auto\", R\"(\n Use ANSI escape sequences in Pretty formats. 0 - disabled, 1 - enabled, 'auto' - enabled if a terminal.\ndiff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp\nindex 773538bf7d94..a4d23332ef75 100644\n--- a/src/Core/SettingsChangesHistory.cpp\n+++ b/src/Core/SettingsChangesHistory.cpp\n@@ -82,6 +82,8 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()\n             {\"output_format_orc_writer_time_zone_name\", \"GMT\", \"GMT\", \"The time zone name for ORC writer, the default ORC writer's time zone is GMT.\"},\n             {\"output_format_pretty_highlight_trailing_spaces\", false, true, \"A new setting.\"},\n             {\"allow_experimental_bfloat16_type\", false, true, \"Add new BFloat16 type\"},\n+            {\"output_format_pretty_squash_consecutive_ms\", 0, 50, \"Add new setting\"},\n+            {\"output_format_pretty_squash_max_wait_ms\", 0, 1000, \"Add new setting\"},\n             {\"output_format_pretty_max_column_name_width_cut_to\", 0, 24, \"A new setting\"},\n             {\"output_format_pretty_max_column_name_width_min_chars_to_cut\", 0, 4, \"A new setting\"},\n             {\"max_autoincrement_series\", 1000, 1000, \"A new setting\"},\ndiff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex 32c22861854c..b94b4e3db1d7 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -218,11 +218,13 @@ FormatSettings getFormatSettings(const ContextPtr & context, const Settings & se\n     format_settings.pretty.max_value_width = settings[Setting::output_format_pretty_max_value_width];\n     format_settings.pretty.max_value_width_apply_for_single_value = settings[Setting::output_format_pretty_max_value_width_apply_for_single_value];\n     format_settings.pretty.highlight_digit_groups = settings[Setting::output_format_pretty_highlight_digit_groups];\n+    format_settings.pretty.row_numbers = settings[Setting::output_format_pretty_row_numbers];\n+    format_settings.pretty.single_large_number_tip_threshold = settings[Setting::output_format_pretty_single_large_number_tip_threshold];\n+    format_settings.pretty.display_footer_column_names = settings[Setting::output_format_pretty_display_footer_column_names];\n+    format_settings.pretty.display_footer_column_names_min_rows = settings[Setting::output_format_pretty_display_footer_column_names_min_rows];\n+    format_settings.pretty.squash_consecutive_ms = settings[Setting::output_format_pretty_squash_consecutive_ms];\n+    format_settings.pretty.squash_max_wait_ms = settings[Setting::output_format_pretty_squash_max_wait_ms];\n     format_settings.pretty.highlight_trailing_spaces = settings[Setting::output_format_pretty_highlight_trailing_spaces];\n-    format_settings.pretty.output_format_pretty_row_numbers = settings[Setting::output_format_pretty_row_numbers];\n-    format_settings.pretty.output_format_pretty_single_large_number_tip_threshold = settings[Setting::output_format_pretty_single_large_number_tip_threshold];\n-    format_settings.pretty.output_format_pretty_display_footer_column_names = settings[Setting::output_format_pretty_display_footer_column_names];\n-    format_settings.pretty.output_format_pretty_display_footer_column_names_min_rows = settings[Setting::output_format_pretty_display_footer_column_names_min_rows];\n     format_settings.protobuf.input_flatten_google_wrappers = settings[Setting::input_format_protobuf_flatten_google_wrappers];\n     format_settings.protobuf.output_nullables_with_google_wrappers = settings[Setting::output_format_protobuf_nullables_with_google_wrappers];\n     format_settings.protobuf.skip_fields_with_unsupported_types_in_schema_inference = settings[Setting::input_format_protobuf_skip_fields_with_unsupported_types_in_schema_inference];\ndiff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h\nindex 884f4157f79c..50d933cd9268 100644\n--- a/src/Formats/FormatSettings.h\n+++ b/src/Formats/FormatSettings.h\n@@ -313,10 +313,13 @@ struct FormatSettings\n         /// Set to 2 for auto\n         UInt64 color = 2;\n \n-        bool output_format_pretty_row_numbers = false;\n-        UInt64 output_format_pretty_single_large_number_tip_threshold = 1'000'000;\n-        UInt64 output_format_pretty_display_footer_column_names = 1;\n-        UInt64 output_format_pretty_display_footer_column_names_min_rows = 50;\n+        bool row_numbers = false;\n+        UInt64 single_large_number_tip_threshold = 1'000'000;\n+        UInt64 display_footer_column_names = 1;\n+        UInt64 display_footer_column_names_min_rows = 50;\n+\n+        UInt64 squash_consecutive_ms = 50;\n+        UInt64 squash_max_wait_ms = 1000;\n \n         enum class Charset : uint8_t\n         {\ndiff --git a/src/Formats/PrettyFormatHelpers.cpp b/src/Formats/PrettyFormatHelpers.cpp\nindex 7548b846827a..b85ada9f96d1 100644\n--- a/src/Formats/PrettyFormatHelpers.cpp\n+++ b/src/Formats/PrettyFormatHelpers.cpp\n@@ -28,7 +28,7 @@ void writeReadableNumberTip(WriteBuffer & out, const IColumn & column, size_t ro\n         return;\n \n     auto value = column.getFloat64(row);\n-    auto threshold = settings.pretty.output_format_pretty_single_large_number_tip_threshold;\n+    auto threshold = settings.pretty.single_large_number_tip_threshold;\n \n     if (threshold && isFinite(value) && abs(value) > threshold)\n     {\ndiff --git a/src/Processors/Formats/IOutputFormat.h b/src/Processors/Formats/IOutputFormat.h\nindex 300267caf47c..c34ddb893e30 100644\n--- a/src/Processors/Formats/IOutputFormat.h\n+++ b/src/Processors/Formats/IOutputFormat.h\n@@ -209,6 +209,9 @@ class IOutputFormat : public IProcessor\n     Statistics statistics;\n     std::atomic_bool has_progress_update_to_write = false;\n \n+    /// To serialize the calls to writeProgress (which could be called from another thread) and other writing methods.\n+    std::mutex writing_mutex;\n+\n private:\n     size_t rows_read_before = 0;\n     bool are_totals_written = false;\n@@ -216,9 +219,6 @@ class IOutputFormat : public IProcessor\n     /// Counters for consumed chunks. Are used for QueryLog.\n     size_t result_rows = 0;\n     size_t result_bytes = 0;\n-\n-    /// To serialize the calls to writeProgress (which could be called from another thread) and other writing methods.\n-    std::mutex writing_mutex;\n };\n \n }\ndiff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\nindex caa784a8b37e..c8633b4610dd 100644\n--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n@@ -124,14 +124,31 @@ void PrettyBlockOutputFormat::write(Chunk chunk, PortKind port_kind)\n         total_rows += chunk.getNumRows();\n         return;\n     }\n-    if (mono_block)\n+    if (mono_block || format_settings.pretty.squash_consecutive_ms)\n     {\n         if (port_kind == PortKind::Main)\n         {\n+            if (format_settings.pretty.squash_consecutive_ms && !mono_block && !thread)\n+            {\n+                thread.emplace([this, thread_group = CurrentThread::getGroup()]\n+                {\n+                    SCOPE_EXIT_SAFE(\n+                        if (thread_group)\n+                            CurrentThread::detachFromGroupIfNotDetached();\n+                    );\n+                    if (thread_group)\n+                        CurrentThread::attachToGroupIfDetached(thread_group);\n+\n+                    setThreadName(\"PrettyWriter\");\n+                    writingThread();\n+                });\n+            }\n+\n             if (mono_chunk)\n                 mono_chunk.append(chunk);\n             else\n                 mono_chunk = std::move(chunk);\n+            mono_chunk_condvar.notify_one();\n             return;\n         }\n \n@@ -142,6 +159,21 @@ void PrettyBlockOutputFormat::write(Chunk chunk, PortKind port_kind)\n     writeChunk(chunk, port_kind);\n }\n \n+void PrettyBlockOutputFormat::writingThread()\n+{\n+    std::unique_lock lock(writing_mutex);\n+    Stopwatch watch(CLOCK_MONOTONIC_COARSE);\n+    while (!finish)\n+    {\n+        if (std::cv_status::timeout == mono_chunk_condvar.wait_for(lock, std::chrono::milliseconds(format_settings.pretty.squash_consecutive_ms))\n+            || watch.elapsedMilliseconds() > format_settings.pretty.squash_max_wait_ms)\n+        {\n+            writeMonoChunkIfNeeded();\n+            watch.restart();\n+        }\n+    }\n+}\n+\n void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind)\n {\n     auto num_rows = chunk.getNumRows();\n@@ -162,7 +194,7 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind\n     /// Create separators\n \n     String left_blank;\n-    if (format_settings.pretty.output_format_pretty_row_numbers)\n+    if (format_settings.pretty.row_numbers)\n         left_blank.assign(row_number_width, ' ');\n \n     String header_begin;    /// \u250f\u2501\u2501\u2533\u2501\u2501\u2501\u2513\n@@ -202,7 +234,6 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind\n \n     std::string_view vertical_bold_bar   = unicode ? \"\u2503\" : \"|\";\n     std::string_view vertical_bar        = unicode ? \"\u2502\" : \"|\";\n-    std::string_view horizontal_bold_bar = unicode ? \"\u2501\" : \"-\";\n     std::string_view horizontal_bar      = unicode ? \"\u2500\" : \"-\";\n \n     if (style == Style::Full)\n@@ -390,7 +421,7 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind\n             if (i != 0)\n                 writeString(rows_separator, out);\n \n-            if (format_settings.pretty.output_format_pretty_row_numbers)\n+            if (format_settings.pretty.row_numbers)\n             {\n                 /// Write row number;\n                 auto row_num_string = std::to_string(i + 1 + total_rows) + \". \";\n@@ -436,7 +467,7 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind\n     }\n \n     /// output column names in the footer\n-    if ((num_rows >= format_settings.pretty.output_format_pretty_display_footer_column_names_min_rows) && format_settings.pretty.output_format_pretty_display_footer_column_names)\n+    if ((num_rows >= format_settings.pretty.display_footer_column_names_min_rows) && format_settings.pretty.display_footer_column_names)\n     {\n         writeString(footer_begin, out);\n         write_names(false);\n@@ -543,10 +574,33 @@ void PrettyBlockOutputFormat::writeMonoChunkIfNeeded()\n     }\n }\n \n+void PrettyBlockOutputFormat::stopThread()\n+{\n+    if (thread)\n+    {\n+        finish = true;\n+        mono_chunk_condvar.notify_one();\n+    }\n+}\n+\n+PrettyBlockOutputFormat::~PrettyBlockOutputFormat()\n+{\n+    if (thread)\n+    {\n+        stopThread();\n+        thread->join();\n+    }\n+}\n+\n void PrettyBlockOutputFormat::writeSuffix()\n {\n+    stopThread();\n     writeMonoChunkIfNeeded();\n+    writeSuffixImpl();\n+}\n \n+void PrettyBlockOutputFormat::writeSuffixImpl()\n+{\n     if (total_rows >= format_settings.pretty.max_rows)\n     {\n         if (style == Style::Space)\ndiff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\nindex 7773708e258b..671c09abefc8 100644\n--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\n@@ -26,7 +26,10 @@ class PrettyBlockOutputFormat : public IOutputFormat\n \n     /// no_escapes - do not use ANSI escape sequences - to display in the browser, not in the console.\n     PrettyBlockOutputFormat(WriteBuffer & out_, const Block & header_, const FormatSettings & format_settings_, Style style_, bool mono_block_, bool color_);\n+    ~PrettyBlockOutputFormat() override;\n+\n     String getName() const override { return \"PrettyBlockOutputFormat\"; }\n+\n protected:\n     void consume(Chunk) override;\n     void consumeTotals(Chunk) override;\n@@ -46,6 +49,7 @@ class PrettyBlockOutputFormat : public IOutputFormat\n     virtual void writeChunk(const Chunk & chunk, PortKind port_kind);\n     void writeMonoChunkIfNeeded();\n     void writeSuffix() override;\n+    virtual void writeSuffixImpl();\n \n     void onRowsReadBeforeUpdate() override { total_rows = getRowsReadBefore(); }\n \n@@ -73,6 +77,12 @@ class PrettyBlockOutputFormat : public IOutputFormat\n     bool color;\n     /// For mono_block == true only\n     Chunk mono_chunk;\n+    /// Implements squashing of chunks by time\n+    std::condition_variable mono_chunk_condvar;\n+    std::optional<ThreadFromGlobalPool> thread;\n+    std::atomic_bool finish{false};\n+    void writingThread();\n+    void stopThread();\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00098_k_union_all.sql b/tests/queries/0_stateless/00098_k_union_all.sql\nindex 280ad5ca2e6a..a3da234d4a57 100644\n--- a/tests/queries/0_stateless/00098_k_union_all.sql\n+++ b/tests/queries/0_stateless/00098_k_union_all.sql\n@@ -1,5 +1,6 @@\n SET output_format_pretty_color=1;\n SET output_format_pretty_display_footer_column_names=0;\n+SET output_format_pretty_squash_consecutive_ms = 0;\n SELECT 1 FORMAT PrettySpace;\n SELECT 1 UNION ALL SELECT 1 FORMAT PrettySpace;\n SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 FORMAT PrettySpace;\ndiff --git a/tests/queries/0_stateless/00405_output_format_pretty_color.sql b/tests/queries/0_stateless/00405_output_format_pretty_color.sql\nindex de83567dd5dc..af9635e9724a 100644\n--- a/tests/queries/0_stateless/00405_output_format_pretty_color.sql\n+++ b/tests/queries/0_stateless/00405_output_format_pretty_color.sql\n@@ -1,5 +1,6 @@\n SET output_format_pretty_display_footer_column_names=0;\n SET output_format_pretty_color = 0;\n+SET output_format_pretty_squash_consecutive_ms = 0;\n SHOW SETTING output_format_pretty_color;\n \n SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT Pretty;\ndiff --git a/tests/queries/0_stateless/00405_pretty_formats.sql b/tests/queries/0_stateless/00405_pretty_formats.sql\nindex 4715f4fc1105..3d6017163a72 100644\n--- a/tests/queries/0_stateless/00405_pretty_formats.sql\n+++ b/tests/queries/0_stateless/00405_pretty_formats.sql\n@@ -1,5 +1,6 @@\n SET output_format_pretty_display_footer_column_names=0;\n SET output_format_pretty_color = 1;\n+SET output_format_pretty_squash_consecutive_ms = 0;\n \n SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT Pretty;\n SELECT number AS hello, toString(number) AS world, (hello, world) AS tuple, nullIf(hello % 3, 0) AS sometimes_nulls FROM system.numbers LIMIT 10 SETTINGS max_block_size = 5 FORMAT PrettyCompact;\ndiff --git a/tests/queries/0_stateless/00730_unicode_terminal_format.sql b/tests/queries/0_stateless/00730_unicode_terminal_format.sql\nindex 8e9e6a9b29c1..19750d13b6ea 100644\n--- a/tests/queries/0_stateless/00730_unicode_terminal_format.sql\n+++ b/tests/queries/0_stateless/00730_unicode_terminal_format.sql\n@@ -1,3 +1,4 @@\n+SET output_format_pretty_squash_consecutive_ms = 0;\n SET output_format_pretty_max_column_name_width_cut_to = 0;\n DROP TABLE IF EXISTS unicode;\n \ndiff --git a/tests/queries/0_stateless/01509_output_format_pretty_row_numbers.sql b/tests/queries/0_stateless/01509_output_format_pretty_row_numbers.sql\nindex 04d02b8d3896..b0e03c1bd502 100644\n--- a/tests/queries/0_stateless/01509_output_format_pretty_row_numbers.sql\n+++ b/tests/queries/0_stateless/01509_output_format_pretty_row_numbers.sql\n@@ -1,6 +1,8 @@\n SET output_format_pretty_color=1;\n SET output_format_pretty_row_numbers=0;\n SET output_format_pretty_display_footer_column_names=0;\n+SET output_format_pretty_squash_consecutive_ms = 0;\n+\n SELECT * FROM numbers(10) FORMAT Pretty;\n SELECT * FROM numbers(10) FORMAT PrettyCompact;\n SELECT * FROM numbers(10) FORMAT PrettyCompactMonoBlock;\ndiff --git a/tests/queries/0_stateless/02122_parallel_formatting.lib b/tests/queries/0_stateless/02122_parallel_formatting.lib\nindex a26e6917c90e..b92b08be2765 100755\n--- a/tests/queries/0_stateless/02122_parallel_formatting.lib\n+++ b/tests/queries/0_stateless/02122_parallel_formatting.lib\n@@ -11,14 +11,14 @@ non_parallel_file=$CLICKHOUSE_TMP/$CLICKHOUSE_TEST_UNIQUE_NAME\"_non_parallel\"\n format=$1\n \n echo $format-1\n-$CLICKHOUSE_CLIENT -q \"select number, number + 1, concat('string: ', toString(number)) from numbers(200000) format $format\" --output_format_write_statistics=0 --output_format_parallel_formatting=0 --output_format_pretty_max_rows=1000000 | grep -a -v \"elapsed\" > $non_parallel_file\n-$CLICKHOUSE_CLIENT -q \"select number, number + 1, concat('string: ', toString(number)) from numbers(200000) format $format\" --output_format_write_statistics=0 --output_format_parallel_formatting=1 --output_format_pretty_max_rows=1000000 | grep -a -v \"elapsed\" > $parallel_file\n+$CLICKHOUSE_CLIENT -q \"select number, number + 1, concat('string: ', toString(number)) from numbers(200000) format $format\" --output_format_write_statistics=0 --output_format_parallel_formatting=0 --output_format_pretty_max_rows=1000000 --output_format_pretty_squash_consecutive_ms=0 | grep -a -v \"elapsed\" > $non_parallel_file\n+$CLICKHOUSE_CLIENT -q \"select number, number + 1, concat('string: ', toString(number)) from numbers(200000) format $format\" --output_format_write_statistics=0 --output_format_parallel_formatting=1 --output_format_pretty_max_rows=1000000 --output_format_pretty_squash_consecutive_ms=0 | grep -a -v \"elapsed\" > $parallel_file\n \n diff $non_parallel_file $parallel_file\n \n echo $format-2\n-$CLICKHOUSE_CLIENT -q \"select number, number + 1, concat('string: ', toString(number)) from numbers(200000) group by number with totals order by number limit 190000 format $format\" --extremes=1 --output_format_write_statistics=0 --output_format_parallel_formatting=0 --output_format_pretty_max_rows=1000000 | grep -a -v \"elapsed\" > $non_parallel_file\n-$CLICKHOUSE_CLIENT -q \"select number, number + 1, concat('string: ', toString(number)) from numbers(200000) group by number with totals order by number limit 190000 format $format\" --extremes=1 --output_format_write_statistics=0 --output_format_parallel_formatting=1 --output_format_pretty_max_rows=1000000 | grep -a -v \"elapsed\" > $parallel_file\n+$CLICKHOUSE_CLIENT -q \"select number, number + 1, concat('string: ', toString(number)) from numbers(200000) group by number with totals order by number limit 190000 format $format\" --extremes=1 --output_format_write_statistics=0 --output_format_parallel_formatting=0 --output_format_pretty_max_rows=1000000 --output_format_pretty_squash_consecutive_ms=0 | grep -a -v \"elapsed\" > $non_parallel_file\n+$CLICKHOUSE_CLIENT -q \"select number, number + 1, concat('string: ', toString(number)) from numbers(200000) group by number with totals order by number limit 190000 format $format\" --extremes=1 --output_format_write_statistics=0 --output_format_parallel_formatting=1 --output_format_pretty_max_rows=1000000 --output_format_pretty_squash_consecutive_ms=0 | grep -a -v \"elapsed\" > $parallel_file\n \n diff $non_parallel_file $parallel_file\n \ndiff --git a/tests/queries/0_stateless/02375_pretty_formats.sql.j2 b/tests/queries/0_stateless/02375_pretty_formats.sql.j2\nindex 36a4479260cf..374fd89294bd 100644\n--- a/tests/queries/0_stateless/02375_pretty_formats.sql.j2\n+++ b/tests/queries/0_stateless/02375_pretty_formats.sql.j2\n@@ -2,6 +2,7 @@\n                   'PrettyCompactMonoBlock', 'PrettyCompactNoEscapesMonoBlock', 'PrettySpace', 'PrettySpaceNoEscapes', 'PrettySpaceMonoBlock',\n                   'PrettySpaceNoEscapesMonoBlock'] -%}\n \n+SET output_format_pretty_squash_consecutive_ms = 0;\n select '{{ format }}';\n select number as x, number + 1 as y from numbers(4) settings max_block_size=2, output_format_pretty_color=1, output_format_pretty_display_footer_column_names=0 format {{ format }};\n \ndiff --git a/tests/queries/0_stateless/03160_pretty_format_tty.sh b/tests/queries/0_stateless/03160_pretty_format_tty.sh\nindex 200bd52f3fa7..4a7991e91056 100755\n--- a/tests/queries/0_stateless/03160_pretty_format_tty.sh\n+++ b/tests/queries/0_stateless/03160_pretty_format_tty.sh\n@@ -5,4 +5,4 @@ CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n . \"$CUR_DIR\"/../shell_config.sh\n \n # default output_format_pretty_max_rows is 10K\n-$CLICKHOUSE_LOCAL -q \"select * from numbers(100e3) format PrettySpace settings max_threads=1, output_format_pretty_display_footer_column_names=0\" | wc -l\n+$CLICKHOUSE_LOCAL --output_format_pretty_squash_consecutive_ms 0 -q \"select * from numbers(100e3) format PrettySpace settings max_threads=1, output_format_pretty_display_footer_column_names=0\" | wc -l\ndiff --git a/tests/queries/0_stateless/03299_pretty_squash.reference b/tests/queries/0_stateless/03299_pretty_squash.reference\nnew file mode 100644\nindex 000000000000..fd6e8e954f64\n--- /dev/null\n+++ b/tests/queries/0_stateless/03299_pretty_squash.reference\n@@ -0,0 +1,42 @@\n+    \u250c\u2500number\u2500\u2510\n+ 1. \u2502      0 \u2502\n+ 2. \u2502      1 \u2502\n+ 3. \u2502      2 \u2502\n+ 4. \u2502      3 \u2502\n+ 5. \u2502      4 \u2502\n+ 6. \u2502      5 \u2502\n+ 7. \u2502      6 \u2502\n+ 8. \u2502      7 \u2502\n+ 9. \u2502      8 \u2502\n+10. \u2502      9 \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500number\u2500\u2510\n+1. \u2502      0 \u2502\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500number\u2500\u2510\n+2. \u2502      1 \u2502\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500number\u2500\u2510\n+3. \u2502      2 \u2502\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500number\u2500\u2510\n+4. \u2502      3 \u2502\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500number\u2500\u2510\n+5. \u2502      4 \u2502\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500number\u2500\u2510\n+6. \u2502      5 \u2502\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500number\u2500\u2510\n+7. \u2502      6 \u2502\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500number\u2500\u2510\n+8. \u2502      7 \u2502\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500number\u2500\u2510\n+9. \u2502      8 \u2502\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+    \u250c\u2500number\u2500\u2510\n+10. \u2502      9 \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndiff --git a/tests/queries/0_stateless/03299_pretty_squash.sql b/tests/queries/0_stateless/03299_pretty_squash.sql\nnew file mode 100644\nindex 000000000000..e3bddba792b7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03299_pretty_squash.sql\n@@ -0,0 +1,3 @@\n+--- Despite max_block_size = 1, this will squash the blocks and output everything as a single block:\n+SELECT number FROM numbers(10) FORMAT PrettyCompact SETTINGS max_block_size = 1, output_format_pretty_squash_consecutive_ms = 60000, output_format_pretty_squash_max_wait_ms = 60000;\n+SELECT number FROM numbers(10) FORMAT PrettyCompact SETTINGS max_block_size = 1, output_format_pretty_squash_consecutive_ms = 0;\n",
  "problem_statement": "Pretty formats: squash blocks if not much time passed since output of the previous block.\n```\r\n\u250c\u2500exception_code\u2500\u252c\u2500\u2500count()\u2500\u2510\r\n\u2502            252 \u2502 35961274 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500exception_code\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502            645 \u2502  721594 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500exception_code\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502           1001 \u2502  719897 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500exception_code\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502             26 \u2502  679782 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500exception_code\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502             62 \u2502  465018 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500exception_code\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502            241 \u2502  443922 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nThis output looks bad.\r\n\r\nLet's squash blocks before formatting unless they are large or 100 ms passed since the first block.\r\nThe max timeout can be controlled by a setting.\r\n\r\nThe feature can be implemented by extending the Squashing... something, but it should apply only for pretty formats.\n",
  "hints_text": "",
  "created_at": "2024-12-26T17:43:37Z",
  "modified_files": [
    "src/Core/FormatFactorySettings.h",
    "src/Core/SettingsChangesHistory.cpp",
    "src/Formats/FormatFactory.cpp",
    "src/Formats/FormatSettings.h",
    "src/Formats/PrettyFormatHelpers.cpp",
    "src/Processors/Formats/IOutputFormat.h",
    "src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp",
    "src/Processors/Formats/Impl/PrettyBlockOutputFormat.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00098_k_union_all.sql",
    "tests/queries/0_stateless/00405_output_format_pretty_color.sql",
    "tests/queries/0_stateless/00405_pretty_formats.sql",
    "tests/queries/0_stateless/00730_unicode_terminal_format.sql",
    "tests/queries/0_stateless/01509_output_format_pretty_row_numbers.sql",
    "tests/queries/0_stateless/02122_parallel_formatting.lib",
    "tests/queries/0_stateless/02375_pretty_formats.sql.j2",
    "tests/queries/0_stateless/03160_pretty_format_tty.sh",
    "b/tests/queries/0_stateless/03299_pretty_squash.reference",
    "b/tests/queries/0_stateless/03299_pretty_squash.sql"
  ]
}