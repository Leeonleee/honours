{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26094,
  "instance_id": "ClickHouse__ClickHouse-26094",
  "issue_numbers": [
    "9390"
  ],
  "base_commit": "9c2aad6c1781b7b4554f792c27089f5f2e4ebcce",
  "patch": "diff --git a/src/Functions/FunctionsCoding.h b/src/Functions/FunctionsCoding.h\nindex 72f2aa1be1c7..00b09acea1ff 100644\n--- a/src/Functions/FunctionsCoding.h\n+++ b/src/Functions/FunctionsCoding.h\n@@ -19,6 +19,7 @@\n #include <Functions/FunctionHelpers.h>\n #include <Functions/IFunction.h>\n #include <Interpreters/Context_fwd.h>\n+#include <Interpreters/castColumn.h>\n #include <IO/WriteHelpers.h>\n #include <Common/IPv6ToBinary.h>\n #include <Common/formatIPv6.h>\n@@ -978,7 +979,8 @@ class EncodeToBinaryRepr : public IFunction\n             !which.isDateTime64() &&\n             !which.isUInt() &&\n             !which.isFloat() &&\n-            !which.isDecimal())\n+            !which.isDecimal() &&\n+            !which.isAggregateFunction())\n             throw Exception(\"Illegal type \" + arguments[0]->getName() + \" of argument of function \" + getName(),\n                 ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n \n@@ -990,6 +992,15 @@ class EncodeToBinaryRepr : public IFunction\n         const IColumn * column = arguments[0].column.get();\n         ColumnPtr res_column;\n \n+        WhichDataType which(column->getDataType());\n+        if (which.isAggregateFunction())\n+        {\n+            const ColumnPtr to_string = castColumn(arguments[0], std::make_shared<DataTypeString>());\n+            const auto * str_column = checkAndGetColumn<ColumnString>(to_string.get());\n+            tryExecuteString(str_column, res_column);\n+            return res_column;\n+        }\n+\n         if (tryExecuteUInt<UInt8>(column, res_column) ||\n             tryExecuteUInt<UInt16>(column, res_column) ||\n             tryExecuteUInt<UInt32>(column, res_column) ||\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01926_bin_unbin.reference b/tests/queries/0_stateless/01926_bin_unbin.reference\nindex f84a858e4498..731d0223bb96 100644\n--- a/tests/queries/0_stateless/01926_bin_unbin.reference\n+++ b/tests/queries/0_stateless/01926_bin_unbin.reference\n@@ -33,3 +33,7 @@\n 1\n 1\n 1\n+1\n+1\n+2D000000000000000A\n+001011010000000000000000000000000000000000000000000000000000000000001010\ndiff --git a/tests/queries/0_stateless/01926_bin_unbin.sql b/tests/queries/0_stateless/01926_bin_unbin.sql\nindex 555770d09c65..e112f8bd8a4d 100644\n--- a/tests/queries/0_stateless/01926_bin_unbin.sql\n+++ b/tests/queries/0_stateless/01926_bin_unbin.sql\n@@ -37,3 +37,9 @@ select bin(unbin('0')) == '00000000';\n select hex('') == bin('');\n select unhex('') == unbin('');\n select unhex('0') == unbin('0');\n+\n+-- hex and bin support AggregateFunction\n+select hex(sumState(number)) == hex(toString(sumState(number))) from numbers(10);\n+select hex(avgState(number)) == hex(toString(avgState(number))) from numbers(99);\n+select hex(avgState(number)) from numbers(10);\n+select bin(avgState(number)) from numbers(10);\n",
  "problem_statement": "Implement function `hex` from AggregateFunction states.\n**Use case**\r\nTesting and debugging purposes. #9387\n",
  "hints_text": "Is this issue is to implement a hex dump function to dump the content in a raw format in the log? If you describe the needs in more detail, I may be able to help. Could you please describe the interface, where to add it, and how to use/test it?\nIt should work like the following:\r\n\r\n```\r\nmilovidov-desktop :) SELECT hex(avgState(number)) FROM numbers(10)\r\n\r\nSELECT hex(avgState(number))\r\nFROM numbers(10)\r\n\r\nQuery id: 7958ee90-677f-4ef6-bdb4-54b11701bf41\r\n\r\n\r\n0 rows in set. Elapsed: 0.017 sec. \r\n\r\nReceived exception from server (version 21.6.1):\r\nCode: 43. DB::Exception: Received from localhost:9000. DB::Exception: Illegal type AggregateFunction(avg, UInt64) of argument of function hex: While processing hex(avgState(number)). \r\n\r\nmilovidov-desktop :) SELECT hex(toString(avgState(number))) FROM numbers(10)\r\n\r\nSELECT hex(toString(avgState(number)))\r\nFROM numbers(10)\r\n\r\nQuery id: 65e3dbc9-5e3b-4453-b7d2-2863c5f5253b\r\n\r\n\u250c\u2500hex(toString(avgState(number)))\u2500\u2510\r\n\u2502 2D000000000000000A              \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.002 sec.\r\n```",
  "created_at": "2021-07-08T16:42:46Z"
}