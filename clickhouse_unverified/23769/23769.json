{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23769,
  "instance_id": "ClickHouse__ClickHouse-23769",
  "issue_numbers": [
    "20309"
  ],
  "base_commit": "d02d14fa00d2102b305a753e47e48158623db983",
  "patch": "diff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp\nindex d6163ff773a3..4cbf0886d6b3 100644\n--- a/src/Interpreters/HashJoin.cpp\n+++ b/src/Interpreters/HashJoin.cpp\n@@ -680,7 +680,19 @@ namespace\n class AddedColumns\n {\n public:\n-    using TypeAndNames = std::vector<std::pair<decltype(ColumnWithTypeAndName::type), decltype(ColumnWithTypeAndName::name)>>;\n+\n+    struct TypeAndName\n+    {\n+        DataTypePtr type;\n+        String name;\n+        String qualified_name;\n+\n+        TypeAndName(DataTypePtr type_, const String & name_, const String & qualified_name_)\n+            : type(type_)\n+            , name(name_)\n+            , qualified_name(qualified_name_)\n+        {}\n+    };\n \n     AddedColumns(const Block & block_with_columns_to_add,\n                  const Block & block,\n@@ -705,27 +717,30 @@ class AddedColumns\n \n         for (const auto & src_column : block_with_columns_to_add)\n         {\n+            /// Column names `src_column.name` and `qualified_name` can differ for StorageJoin,\n+            /// because it uses not qualified right block column names\n+            auto qualified_name = join.getTableJoin().renamedRightColumnName(src_column.name);\n             /// Don't insert column if it's in left block\n-            if (!block.has(src_column.name))\n-                addColumn(src_column);\n+            if (!block.has(qualified_name))\n+                addColumn(src_column, qualified_name);\n         }\n \n         if (is_asof_join)\n         {\n             const ColumnWithTypeAndName & right_asof_column = join.rightAsofKeyColumn();\n-            addColumn(right_asof_column);\n+            addColumn(right_asof_column, right_asof_column.name);\n             left_asof_key = key_columns.back();\n         }\n \n         for (auto & tn : type_name)\n-            right_indexes.push_back(saved_block_sample.getPositionByName(tn.second));\n+            right_indexes.push_back(saved_block_sample.getPositionByName(tn.name));\n     }\n \n     size_t size() const { return columns.size(); }\n \n     ColumnWithTypeAndName moveColumn(size_t i)\n     {\n-        return ColumnWithTypeAndName(std::move(columns[i]), type_name[i].first, type_name[i].second);\n+        return ColumnWithTypeAndName(std::move(columns[i]), type_name[i].type, type_name[i].qualified_name);\n     }\n \n     template <bool has_defaults>\n@@ -748,7 +763,7 @@ class AddedColumns\n         if (lazy_defaults_count)\n         {\n             for (size_t j = 0, size = right_indexes.size(); j < size; ++j)\n-                JoinCommon::addDefaultValues(*columns[j], type_name[j].first, lazy_defaults_count);\n+                JoinCommon::addDefaultValues(*columns[j], type_name[j].type, lazy_defaults_count);\n             lazy_defaults_count = 0;\n         }\n     }\n@@ -764,7 +779,7 @@ class AddedColumns\n     bool need_filter = false;\n \n private:\n-    TypeAndNames type_name;\n+    std::vector<TypeAndName> type_name;\n     MutableColumns columns;\n     std::vector<size_t> right_indexes;\n     size_t lazy_defaults_count = 0;\n@@ -773,11 +788,11 @@ class AddedColumns\n     ASOF::Inequality asof_inequality;\n     const IColumn * left_asof_key = nullptr;\n \n-    void addColumn(const ColumnWithTypeAndName & src_column)\n+    void addColumn(const ColumnWithTypeAndName & src_column, const std::string & qualified_name)\n     {\n         columns.push_back(src_column.column->cloneEmpty());\n         columns.back()->reserve(src_column.column->size());\n-        type_name.emplace_back(src_column.type, src_column.name);\n+        type_name.emplace_back(src_column.type, src_column.name, qualified_name);\n     }\n };\n \n@@ -1081,7 +1096,8 @@ void HashJoin::joinBlockImpl(\n \n             const auto & col = block.getByName(left_name);\n             bool is_nullable = nullable_right_side || right_key.type->isNullable();\n-            block.insert(correctNullability({col.column, col.type, right_key.name}, is_nullable));\n+            auto right_col_name = getTableJoin().renamedRightColumnName(right_key.name);\n+            block.insert(correctNullability({col.column, col.type, right_col_name}, is_nullable));\n         }\n     }\n     else if (has_required_right_keys)\n@@ -1106,7 +1122,8 @@ void HashJoin::joinBlockImpl(\n             bool is_nullable = nullable_right_side || right_key.type->isNullable();\n \n             ColumnPtr thin_column = filterWithBlanks(col.column, filter);\n-            block.insert(correctNullability({thin_column, col.type, right_key.name}, is_nullable, null_map_filter));\n+            auto right_col_name = getTableJoin().renamedRightColumnName(right_key.name);\n+            block.insert(correctNullability({thin_column, col.type, right_col_name}, is_nullable, null_map_filter));\n \n             if constexpr (need_replication)\n                 right_keys_to_replicate.push_back(block.getPositionByName(right_key.name));\n@@ -1311,7 +1328,12 @@ void HashJoin::joinBlock(Block & block, ExtraBlockPtr & not_processed)\n \n void HashJoin::joinTotals(Block & block) const\n {\n-    JoinCommon::joinTotals(totals, sample_block_with_columns_to_add, *table_join, block);\n+    Block sample_right_block = sample_block_with_columns_to_add.cloneEmpty();\n+    /// For StorageJoin column names isn't qualified in sample_block_with_columns_to_add\n+    for (auto & col : sample_right_block)\n+        col.name = getTableJoin().renamedRightColumnName(col.name);\n+\n+    JoinCommon::joinTotals(totals, sample_right_block, *table_join, block);\n }\n \n \ndiff --git a/src/Interpreters/TableJoin.cpp b/src/Interpreters/TableJoin.cpp\nindex f547e011a737..122e2cd64793 100644\n--- a/src/Interpreters/TableJoin.cpp\n+++ b/src/Interpreters/TableJoin.cpp\n@@ -156,9 +156,12 @@ NameSet TableJoin::requiredRightKeys() const\n {\n     NameSet required;\n     for (const auto & name : key_names_right)\n+    {\n+        auto rename = renamedRightColumnName(name);\n         for (const auto & column : columns_added_by_join)\n-            if (name == column.name)\n+            if (rename == column.name)\n                 required.insert(name);\n+    }\n     return required;\n }\n \n@@ -464,4 +467,11 @@ ActionsDAGPtr TableJoin::applyKeyConvertToTable(\n     return dag;\n }\n \n+String TableJoin::renamedRightColumnName(const String & name) const\n+{\n+    if (const auto it = renames.find(name); it != renames.end())\n+        return it->second;\n+    return name;\n+}\n+\n }\ndiff --git a/src/Interpreters/TableJoin.h b/src/Interpreters/TableJoin.h\nindex b75ef848f13a..dc8ebeb74131 100644\n--- a/src/Interpreters/TableJoin.h\n+++ b/src/Interpreters/TableJoin.h\n@@ -203,6 +203,8 @@ class TableJoin\n     /// Split key and other columns by keys name list\n     void splitAdditionalColumns(const Block & sample_block, Block & block_keys, Block & block_others) const;\n     Block getRequiredRightKeys(const Block & right_table_keys, std::vector<String> & keys_sources) const;\n+\n+    String renamedRightColumnName(const String & name) const;\n };\n \n }\ndiff --git a/src/Storages/StorageJoin.cpp b/src/Storages/StorageJoin.cpp\nindex d9970bab22ca..dda2cc39d6bb 100644\n--- a/src/Storages/StorageJoin.cpp\n+++ b/src/Storages/StorageJoin.cpp\n@@ -92,7 +92,9 @@ HashJoinPtr StorageJoin::getJoinLocked(std::shared_ptr<TableJoin> analyzed_join)\n \n     /// TODO: check key columns\n \n-    /// Some HACK to remove wrong names qualifiers: table.column -> column.\n+    /// Set names qualifiers: table.column -> column\n+    /// It's required because storage join stores non-qualified names\n+    /// Qualifies will be added by join implementation (HashJoin)\n     analyzed_join->setRightKeys(key_names);\n \n     HashJoinPtr join_clone = std::make_shared<HashJoin>(analyzed_join, metadata_snapshot->getSampleBlock().sortColumns());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00118_storage_join.reference b/tests/queries/0_stateless/00118_storage_join.reference\nindex dad5b94e47b3..56920b290e6b 100644\n--- a/tests/queries/0_stateless/00118_storage_join.reference\n+++ b/tests/queries/0_stateless/00118_storage_join.reference\n@@ -18,3 +18,49 @@\n 7\t\n 8\t\n 9\t\n+0\t0\t\n+1\t1\tabc\n+2\t2\tdef\n+3\t3\t\n+4\t4\t\n+5\t5\t\n+6\t6\tghi\n+7\t7\t\n+8\t8\t\n+9\t9\t\n+0\t0\t0\t\n+1\t1\t1\tabc\n+2\t2\t2\tdef\n+3\t0\t3\t\n+4\t0\t4\t\n+5\t0\t5\t\n+6\t6\t6\tghi\n+7\t0\t7\t\n+8\t0\t8\t\n+9\t0\t9\t\n+0\t3\t\n+3\t9\t\n+2\t21\tdef\n+1\t12\tabc\n+\n+0\t45\t\n+0\t0\t\n+1\t1\tabc\n+2\t2\tdef\n+3\t3\t\n+4\t4\t\n+5\t5\t\n+6\t6\tghi\n+7\t7\t\n+8\t8\t\n+9\t9\t\n+0\t0\t0\t\n+1\t1\t1\tabc\n+2\t2\t2\tdef\n+3\t0\t3\t\n+4\t0\t4\t\n+5\t0\t5\t\n+6\t6\t6\tghi\n+7\t0\t7\t\n+8\t0\t8\t\n+9\t0\t9\t\ndiff --git a/tests/queries/0_stateless/00118_storage_join.sql b/tests/queries/0_stateless/00118_storage_join.sql\nindex 9da8829e5c7a..47896d3316ca 100644\n--- a/tests/queries/0_stateless/00118_storage_join.sql\n+++ b/tests/queries/0_stateless/00118_storage_join.sql\n@@ -1,11 +1,19 @@\n-DROP TABLE IF EXISTS join;\n+DROP TABLE IF EXISTS t2;\n \n-CREATE TABLE join (k UInt64, s String) ENGINE = Join(ANY, LEFT, k);\n+CREATE TABLE t2 (k UInt64, s String) ENGINE = Join(ANY, LEFT, k);\n \n-INSERT INTO join VALUES (1, 'abc'), (2, 'def');\n-SELECT k, s FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN join USING k;\n+INSERT INTO t2 VALUES (1, 'abc'), (2, 'def');\n+SELECT k, s FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;\n \n-INSERT INTO join VALUES (6, 'ghi');\n-SELECT k, s FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN join USING k;\n+INSERT INTO t2 VALUES (6, 'ghi');\n+SELECT k, s FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;\n \n-DROP TABLE join;\n+SELECT k, js1.s, t2.s FROM (SELECT number AS k, number as s FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;\n+SELECT k, t2.k, js1.s, t2.s FROM (SELECT number AS k, number as s FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;\n+\n+SELECT k, js1.s, t2.s FROM (SELECT toUInt64(number / 3) AS k, sum(number) as s FROM numbers(10) GROUP BY toUInt64(number / 3) WITH TOTALS) js1 ANY LEFT JOIN t2 USING k;\n+\n+SELECT k, js1.s, t2.s FROM (SELECT number AS k, number AS s FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 ON js1.k == t2.k;\n+SELECT k, t2.k, js1.s, t2.s FROM (SELECT number AS k, number AS s FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 ON js1.k == t2.k;\n+\n+DROP TABLE t2;\ndiff --git a/tests/queries/0_stateless/00119_storage_join.sql b/tests/queries/0_stateless/00119_storage_join.sql\nindex e1cc7a67588f..2569a64d2c39 100644\n--- a/tests/queries/0_stateless/00119_storage_join.sql\n+++ b/tests/queries/0_stateless/00119_storage_join.sql\n@@ -1,18 +1,18 @@\n-DROP TABLE IF EXISTS join;\n+DROP TABLE IF EXISTS t2;\n \n-CREATE TABLE join (s String, x Array(UInt8), k UInt64) ENGINE = Join(ANY, LEFT, k);\n+CREATE TABLE t2 (s String, x Array(UInt8), k UInt64) ENGINE = Join(ANY, LEFT, k);\n \n-INSERT INTO join VALUES ('abc', [0], 1), ('def', [1, 2], 2);\n-INSERT INTO join (k, s) VALUES (3, 'ghi');\n-INSERT INTO join (x, k) VALUES ([3, 4, 5], 4);\n+INSERT INTO t2 VALUES ('abc', [0], 1), ('def', [1, 2], 2);\n+INSERT INTO t2 (k, s) VALUES (3, 'ghi');\n+INSERT INTO t2 (x, k) VALUES ([3, 4, 5], 4);\n \n-SELECT k, s FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN join USING k;\n-SELECT s, x FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN join USING k;\n-SELECT x, s, k FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN join USING k;\n-SELECT 1, x, 2, s, 3, k, 4 FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN join USING k;\n+SELECT k, s FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;\n+SELECT s, x FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;\n+SELECT x, s, k FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;\n+SELECT 1, x, 2, s, 3, k, 4 FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN t2 USING k;\n \n SELECT t1.k, t1.s, t2.x\n FROM ( SELECT number AS k, 'a' AS s FROM numbers(2) GROUP BY number WITH TOTALS ) AS t1\n-ANY LEFT JOIN join AS t2 USING(k);\n+ANY LEFT JOIN t2 AS t2 USING(k);\n \n-DROP TABLE join;\n+DROP TABLE t2;\n",
  "problem_statement": "StorageJoin and with equals column names\nIf name of key column equals in both tables in Storage Join `JOIN ON` trows an error:\r\n\r\n```\r\n:) CREATE TABLE t1 (x String) ENGINE = TinyLog;\r\n\r\n:) CREATE TABLE t2 (x String) ENGINE = Join(ALL, INNER, x);\r\n\r\n:) select * from t1 join t2 USING(x);\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.036 sec.\r\n\r\n:) select * from t1 join t2 ON (t1.x == t2.x);\r\n\r\n0 rows in set. Elapsed: 0.026 sec.\r\n\r\nReceived exception from server (version 21.3.1):\r\nCode: 8. DB::Exception: Received from localhost:9000. DB::Exception: Cannot find column `t2.x` in source stream.\r\n\r\n```\r\n\r\nIf secondary column name match we tables cannot be joined with `USING` too:\r\n\r\n```\r\n:) CREATE TABLE t1 (x String, y String) ENGINE = TinyLog;\r\n\r\n:) CREATE TABLE t2 (x String, y String) ENGINE = Join(ALL, INNER, x);\r\n\r\n:) select * from t1 join t2 USING(x);\r\n\r\n\r\n0 rows in set. Elapsed: 0.027 sec.\r\n\r\nReceived exception from server (version 21.3.1):\r\nCode: 8. DB::Exception: Received from localhost:9000. DB::Exception: Cannot find column `t2.y` in source stream.\r\n\r\n```\n",
  "hints_text": "",
  "created_at": "2021-04-29T14:31:25Z"
}