{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48880,
  "instance_id": "ClickHouse__ClickHouse-48880",
  "issue_numbers": [
    "48716"
  ],
  "base_commit": "99677f3d1a58f0d143c0bf079bd35bcb4b94bc69",
  "patch": "diff --git a/docs/en/sql-reference/statements/select/into-outfile.md b/docs/en/sql-reference/statements/select/into-outfile.md\nindex bd6db9e7d55a..352af16042ab 100644\n--- a/docs/en/sql-reference/statements/select/into-outfile.md\n+++ b/docs/en/sql-reference/statements/select/into-outfile.md\n@@ -12,7 +12,7 @@ Compressed files are supported. Compression type is detected by the extension of\n **Syntax**\n \n ```sql\n-SELECT <expr_list> INTO OUTFILE file_name [AND STDOUT] [COMPRESSION type [LEVEL level]]\n+SELECT <expr_list> INTO OUTFILE file_name [AND STDOUT] [APPEND] [COMPRESSION type [LEVEL level]]\n ```\n \n `file_name` and `type` are string literals. Supported compression types are: `'none'`, `'gzip'`, `'deflate'`, `'br'`, `'xz'`, `'zstd'`, `'lz4'`, `'bz2'`.\n@@ -25,6 +25,7 @@ SELECT <expr_list> INTO OUTFILE file_name [AND STDOUT] [COMPRESSION type [LEVEL\n - The query will fail if a file with the same file name already exists.\n - The default [output format](../../../interfaces/formats.md) is `TabSeparated` (like in the command-line client batch mode). Use [FORMAT](format.md) clause to change it.\n - If `AND STDOUT` is mentioned in the query then the output that is written to the file is also displayed on standard output. If used with compression, the plaintext is displayed on standard output.\n+- If `APPEND` is mentioned in the query then the output is appended to an existing file. If compression is used, append cannot be used.\n \n **Example**\n \ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 7ae75ba250df..77a93a25e9bd 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -573,6 +573,13 @@ try\n                 CompressionMethod compression_method = chooseCompressionMethod(out_file, compression_method_string);\n                 UInt64 compression_level = 3;\n \n+                if (query_with_output->is_outfile_append && compression_method != CompressionMethod::None)\n+                {\n+                    throw Exception(\n+                        ErrorCodes::BAD_ARGUMENTS,\n+                        \"Cannot append to compressed file. Please use uncompressed file or remove APPEND keyword.\");\n+                }\n+\n                 if (query_with_output->compression_level)\n                 {\n                     const auto & compression_level_node = query_with_output->compression_level->as<ASTLiteral &>();\n@@ -587,8 +594,14 @@ try\n                             range.second);\n                 }\n \n+                auto flags = O_WRONLY | O_EXCL;\n+                if (query_with_output->is_outfile_append)\n+                    flags |= O_APPEND;\n+                else\n+                    flags |= O_CREAT;\n+\n                 out_file_buf = wrapWriteBufferWithCompressionMethod(\n-                    std::make_unique<WriteBufferFromFile>(out_file, DBMS_DEFAULT_BUFFER_SIZE, O_WRONLY | O_EXCL | O_CREAT),\n+                    std::make_unique<WriteBufferFromFile>(out_file, DBMS_DEFAULT_BUFFER_SIZE, flags),\n                     compression_method,\n                     static_cast<int>(compression_level)\n                 );\ndiff --git a/src/Parsers/ASTQueryWithOutput.h b/src/Parsers/ASTQueryWithOutput.h\nindex 892d911e2e21..09f087724681 100644\n--- a/src/Parsers/ASTQueryWithOutput.h\n+++ b/src/Parsers/ASTQueryWithOutput.h\n@@ -16,6 +16,7 @@ class ASTQueryWithOutput : public IAST\n public:\n     ASTPtr out_file;\n     bool is_into_outfile_with_stdout;\n+    bool is_outfile_append;\n     ASTPtr format;\n     ASTPtr settings_ast;\n     ASTPtr compression;\ndiff --git a/src/Parsers/ParserQueryWithOutput.cpp b/src/Parsers/ParserQueryWithOutput.cpp\nindex 22e32fa5c459..6796f4528c4d 100644\n--- a/src/Parsers/ParserQueryWithOutput.cpp\n+++ b/src/Parsers/ParserQueryWithOutput.cpp\n@@ -103,6 +103,12 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n         if (!out_file_p.parse(pos, query_with_output.out_file, expected))\n             return false;\n \n+        ParserKeyword s_append(\"APPEND\");\n+        if (s_append.ignore(pos, expected))\n+        {\n+            query_with_output.is_outfile_append = true;\n+        }\n+\n         ParserKeyword s_stdout(\"AND STDOUT\");\n         if (s_stdout.ignore(pos, expected))\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02001_append_output_file.reference b/tests/queries/0_stateless/02001_append_output_file.reference\nnew file mode 100644\nindex 000000000000..6f51dfc24e1e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02001_append_output_file.reference\n@@ -0,0 +1,2 @@\n+Hello, World! From client.\n+Hello, World! From local.\ndiff --git a/tests/queries/0_stateless/02001_append_output_file.sh b/tests/queries/0_stateless/02001_append_output_file.sh\nnew file mode 100755\nindex 000000000000..47ac0183d91f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02001_append_output_file.sh\n@@ -0,0 +1,15 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+set -e\n+\n+[ -e \"${CLICKHOUSE_TMP}\"/test_append_to_output_file ] && rm \"${CLICKHOUSE_TMP}\"/test_append_to_output_file\n+\n+${CLICKHOUSE_CLIENT} --query \"SELECT * FROM (SELECT 'Hello, World! From client.') INTO OUTFILE '${CLICKHOUSE_TMP}/test_append_to_output_file'\"\n+${CLICKHOUSE_LOCAL} --query \"SELECT * FROM (SELECT 'Hello, World! From local.') INTO OUTFILE '${CLICKHOUSE_TMP}/test_append_to_output_file' APPEND\"\n+cat ${CLICKHOUSE_TMP}/test_append_to_output_file\n+\n+rm -f \"${CLICKHOUSE_TMP}/test_append_to_output_file\"\n",
  "problem_statement": "Enhance usability of `INTO OUTFILE` clause for SELECT queries\n**Use case**\r\n\r\nThere is a possibility to write `INTO OUTFILE` to export the result of SELECT query, but if a file with a specified name exists on filesystem - there will be an exception.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAdd another keywords to parser to be able to write something like `INTO OUTFILE APPEND 'file.txt'` or `INTO OUTFILE REWRITE 'file.txt'`\r\n\r\n**Describe alternatives you've considered**\r\n\r\nProbably we can add a user-level setting instead?\r\n\r\n\n",
  "hints_text": "It will sound better as `APPEND INTO OUTFILE`, not `INTO OUTFILE ... APPEND`.\r\nBut it should also be considered with OVERWRITE option.",
  "created_at": "2023-04-18T07:43:03Z",
  "modified_files": [
    "docs/en/sql-reference/statements/select/into-outfile.md",
    "src/Client/ClientBase.cpp",
    "src/Parsers/ASTQueryWithOutput.h",
    "src/Parsers/ParserQueryWithOutput.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02001_append_output_file.reference",
    "b/tests/queries/0_stateless/02001_append_output_file.sh"
  ]
}