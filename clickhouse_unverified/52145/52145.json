{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52145,
  "instance_id": "ClickHouse__ClickHouse-52145",
  "issue_numbers": [
    "52049"
  ],
  "base_commit": "2ad7d121ae78df94132076a3673de2e2bd074f5c",
  "patch": "diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex f27d23e8e94c..9a450fabd5b1 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -1378,10 +1378,9 @@ void SelectQueryExpressionAnalyzer::appendWindowFunctionsArguments(\n void SelectQueryExpressionAnalyzer::appendExpressionsAfterWindowFunctions(ExpressionActionsChain & chain, bool /* only_types */)\n {\n     ExpressionActionsChain::Step & step = chain.lastStep(columns_after_window);\n+\n     for (const auto & expression : syntax->expressions_with_window_function)\n-    {\n         getRootActionsForWindowFunctions(expression->clone(), true, step.actions());\n-    }\n }\n \n void SelectQueryExpressionAnalyzer::appendGroupByModifiers(ActionsDAGPtr & before_aggregation, ExpressionActionsChain & chain, bool /* only_types */)\n@@ -1760,9 +1759,9 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n     /// second_stage: Do I need to execute the second part of the pipeline - running on the initiating server during distributed processing.\n \n     /** First we compose a chain of actions and remember the necessary steps from it.\n-        *  Regardless of from_stage and to_stage, we will compose a complete sequence of actions to perform optimization and\n-        *  throw out unnecessary columns based on the entire query. In unnecessary parts of the query, we will not execute subqueries.\n-        */\n+      * Regardless of from_stage and to_stage, we will compose a complete sequence of actions to perform optimization and\n+      * throw out unnecessary columns based on the entire query. In unnecessary parts of the query, we will not execute subqueries.\n+      */\n \n     const ASTSelectQuery & query = *query_analyzer.getSelectQuery();\n     auto context = query_analyzer.getContext();\n@@ -1805,7 +1804,7 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n \n         if (storage && (query.sampleSize() || settings.parallel_replicas_count > 1))\n         {\n-            // we evaluate sampling for Merge lazily so we need to get all the columns\n+            // we evaluate sampling for Merge lazily, so we need to get all the columns\n             if (storage->getName() == \"Merge\")\n             {\n                 const auto columns = metadata_snapshot->getColumns().getAll();\ndiff --git a/src/Interpreters/GetAggregatesVisitor.cpp b/src/Interpreters/GetAggregatesVisitor.cpp\nindex dd958693d899..718721308b16 100644\n--- a/src/Interpreters/GetAggregatesVisitor.cpp\n+++ b/src/Interpreters/GetAggregatesVisitor.cpp\n@@ -1,4 +1,6 @@\n #include <Interpreters/GetAggregatesVisitor.h>\n+#include <Common/checkStackSize.h>\n+\n \n namespace DB\n {\n@@ -13,7 +15,7 @@ struct WindowExpressionsCollectorChildInfo\n     bool window_function_in_subtree = false;\n };\n \n-// This visitor travers AST and collects the list of expressions which depend on\n+// This visitor traverses the AST and collects the list of expressions which depend on\n // evaluation of window functions. Expression is collected only if\n // it's not a part of another expression.\n //\n@@ -26,15 +28,18 @@ struct WindowExpressionsCollectorMatcher\n     {\n         if (child->as<ASTSubquery>() || child->as<ASTSelectQuery>())\n             return false;\n+\n         if (auto * select = node->as<ASTSelectQuery>())\n         {\n-            // We don't analysis WITH statement because it might contain useless aggregates\n+            // We don't analyse the WITH statement because it might contain useless aggregates\n             if (child == select->with())\n                 return false;\n         }\n-        // We procces every expression manually\n+\n+        // We process every expression manually\n         if (auto * func = node->as<ASTFunction>())\n             return false;\n+\n         return true;\n     }\n \n@@ -50,6 +55,8 @@ struct WindowExpressionsCollectorMatcher\n         ASTPtr & ast,\n         const ASTPtr & parent)\n     {\n+        checkStackSize();\n+\n         if (auto * func = ast->as<ASTFunction>())\n         {\n             if (func->is_window_function)\n@@ -67,7 +74,7 @@ struct WindowExpressionsCollectorMatcher\n             {\n                 func->compute_after_window_functions = true;\n                 if ((!parent || !parent->as<ASTFunction>()))\n-                    expressions_with_window_functions.push_back(func);\n+                    expressions_with_window_functions.push_back(ast);\n             }\n \n             return result;\n@@ -75,15 +82,16 @@ struct WindowExpressionsCollectorMatcher\n         return {};\n     }\n \n-    std::vector<const ASTFunction *> expressions_with_window_functions {};\n+    ASTs expressions_with_window_functions;\n };\n \n using WindowExpressionsCollectorVisitor = InDepthNodeVisitorWithChildInfo<WindowExpressionsCollectorMatcher>;\n \n-std::vector<const ASTFunction *> getExpressionsWithWindowFunctions(ASTPtr & ast)\n+ASTs getExpressionsWithWindowFunctions(ASTPtr & ast)\n {\n     WindowExpressionsCollectorVisitor visitor;\n     visitor.visit(ast);\n+\n     return std::move(visitor.expressions_with_window_functions);\n }\n \ndiff --git a/src/Interpreters/GetAggregatesVisitor.h b/src/Interpreters/GetAggregatesVisitor.h\nindex 3f5804c39a00..fdf54de3e571 100644\n--- a/src/Interpreters/GetAggregatesVisitor.h\n+++ b/src/Interpreters/GetAggregatesVisitor.h\n@@ -114,6 +114,6 @@ inline void assertNoAggregates(const ASTPtr & ast, const char * description)\n     GetAggregatesVisitor(data).visit(ast);\n }\n \n-std::vector<const ASTFunction *> getExpressionsWithWindowFunctions(ASTPtr & ast);\n+ASTs getExpressionsWithWindowFunctions(ASTPtr & ast);\n \n }\ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex cda5ceeb1643..65b5d9509755 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -1287,6 +1287,7 @@ TreeRewriterResultPtr TreeRewriter::analyzeSelect(\n \n         bool is_changed = replaceAliasColumnsInQuery(query, result.storage_snapshot->metadata->getColumns(),\n                                                      result.array_join_result_to_source, getContext(), excluded_nodes);\n+\n         /// If query is changed, we need to redo some work to correct name resolution.\n         if (is_changed)\n         {\ndiff --git a/src/Interpreters/TreeRewriter.h b/src/Interpreters/TreeRewriter.h\nindex b94043b89831..ea16c432d0f2 100644\n--- a/src/Interpreters/TreeRewriter.h\n+++ b/src/Interpreters/TreeRewriter.h\n@@ -40,11 +40,10 @@ struct TreeRewriterResult\n     NameSet expanded_aliases;\n \n     Aliases aliases;\n-    std::vector<const ASTFunction *> aggregates;\n \n+    std::vector<const ASTFunction *> aggregates;\n     std::vector<const ASTFunction *> window_function_asts;\n-\n-    std::vector<const ASTFunction *> expressions_with_window_function;\n+    ASTs expressions_with_window_function;\n \n     /// Which column is needed to be ARRAY-JOIN'ed to get the specified.\n     /// For example, for `SELECT s.v ... ARRAY JOIN a AS s` will get \"s.v\" -> \"a.v\".\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02814_order_by_tuple_window_function.reference b/tests/queries/0_stateless/02814_order_by_tuple_window_function.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02814_order_by_tuple_window_function.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02814_order_by_tuple_window_function.sql b/tests/queries/0_stateless/02814_order_by_tuple_window_function.sql\nnew file mode 100644\nindex 000000000000..8ba54fc11d0a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02814_order_by_tuple_window_function.sql\n@@ -0,0 +1,1 @@\n+SELECT 1 ORDER BY tuple(count() OVER ());\n",
  "problem_statement": "ClickHouse Server 23.7.1.857 terminated by SIGABRT through create table and select stmts\n**Describe the bug**\r\n ClickHouse 23.7.1.857 Server is terminated by SIGABRT through create table and select statements.\r\n\r\n**How to reproduce**\r\nThe SQL statement to reproduce:\r\n```SQL\r\nCREATE TABLE v0 ( v1 Nullable ( Int32 ) , col2 String , col3 Int32 , col4 Int32 ) ENGINE = MergeTree ( ) ORDER BY tuple ( ) ;\r\nSELECT * FROM v0 ORDER BY tuple ( count ( * ) OVER ( ) , v1 , v1 , v0 . v1 ) ;\r\n```\r\n\r\nIt can be reproduced on the official docker image. (`clickhouse/clickhouse-server:head` and `clickhouse/clickhouse-server:latest`).\r\n\r\nThe log traced by ClickHouse Server:\r\n```\r\n[a75f227bd0b9] 2023.07.12 04:14:15.507802 [ 356 ] <Fatal> BaseDaemon: ########################################\r\n[a75f227bd0b9] 2023.07.12 04:14:15.507854 [ 356 ] <Fatal> BaseDaemon: (version 23.7.1.857 (official build), build id: EBF7F00D257A03E61ABF10B376C4A7BDD0EED2BA, git hash: 9aef39a7888e10995ea85faad559a110c0e22a82) (from thread 48) (query_id: 84622d16-135f-4140-8cec-4fa60a717536) (query:  SELECT * FROM v0 ORDER BY tuple ( count ( * ) OVER ( ) , v1 , v1 , v0 . v1 ) ;) Received signal Aborted (6)\r\n[a75f227bd0b9] 2023.07.12 04:14:15.507884 [ 356 ] <Fatal> BaseDaemon: \r\n[a75f227bd0b9] 2023.07.12 04:14:15.507909 [ 356 ] <Fatal> BaseDaemon: Stack trace: 0x00007f63bb9b800b 0x00007f63bb997859 0x000000001a75c1a4 0x000000001a77a42d 0x00000000130db5a7 0x00000000130e2f56 0x000000001380df4c 0x0000000013805ffa 0x00000000137ffa3d 0x00000000138a6066 0x00000000138a3c73 0x00000000137b8f9e 0x0000000013bd79d6 0x0000000013bd422e 0x00000000149f8284 0x0000000014a0f759 0x000000001798e714 0x000000001798f931 0x0000000017b11727 0x0000000017b0f15c 0x00007f63bbb6f609 0x00007f63bba94133\r\n[a75f227bd0b9] 2023.07.12 04:14:15.507945 [ 356 ] <Fatal> BaseDaemon: 2. raise @ 0x00007f63bb9b800b in ?\r\n[a75f227bd0b9] 2023.07.12 04:14:15.507970 [ 356 ] <Fatal> BaseDaemon: 3. abort @ 0x00007f63bb997859 in ?\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508010 [ 356 ] <Fatal> BaseDaemon: 4. ? @ 0x000000001a75c1a4 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508056 [ 356 ] <Fatal> BaseDaemon: 5. ? @ 0x000000001a77a42d in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508096 [ 356 ] <Fatal> BaseDaemon: 6. DB::SelectQueryExpressionAnalyzer::appendExpressionsAfterWindowFunctions(DB::ExpressionActionsChain&, bool) @ 0x00000000130db5a7 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508135 [ 356 ] <Fatal> BaseDaemon: 7. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x00000000130e2f56 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508167 [ 356 ] <Fatal> BaseDaemon: 8. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x000000001380df4c in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508187 [ 356 ] <Fatal> BaseDaemon: 9. ? @ 0x0000000013805ffa in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508228 [ 356 ] <Fatal> BaseDaemon: 10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x00000000137ffa3d in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508283 [ 356 ] <Fatal> BaseDaemon: 11. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000138a6066 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508379 [ 356 ] <Fatal> BaseDaemon: 12. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000138a3c73 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508465 [ 356 ] <Fatal> BaseDaemon: 13. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000137b8f9e in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508519 [ 356 ] <Fatal> BaseDaemon: 14. ? @ 0x0000000013bd79d6 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508594 [ 356 ] <Fatal> BaseDaemon: 15. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013bd422e in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508663 [ 356 ] <Fatal> BaseDaemon: 16. DB::TCPHandler::runImpl() @ 0x00000000149f8284 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508748 [ 356 ] <Fatal> BaseDaemon: 17. DB::TCPHandler::run() @ 0x0000000014a0f759 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508820 [ 356 ] <Fatal> BaseDaemon: 18. Poco::Net::TCPServerConnection::start() @ 0x000000001798e714 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.508885 [ 356 ] <Fatal> BaseDaemon: 19. Poco::Net::TCPServerDispatcher::run() @ 0x000000001798f931 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.511404 [ 356 ] <Fatal> BaseDaemon: 20. Poco::PooledThread::run() @ 0x0000000017b11727 in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.511441 [ 356 ] <Fatal> BaseDaemon: 21. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017b0f15c in /usr/bin/clickhouse\r\n[a75f227bd0b9] 2023.07.12 04:14:15.511492 [ 356 ] <Fatal> BaseDaemon: 22. ? @ 0x00007f63bbb6f609 in ?\r\n[a75f227bd0b9] 2023.07.12 04:14:15.511557 [ 356 ] <Fatal> BaseDaemon: 23. clone @ 0x00007f63bba94133 in ?\r\n[a75f227bd0b9] 2023.07.12 04:14:15.700024 [ 356 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: C8DB2CC6CEEB111C8AB95A0F4BA5538E)\r\n[a75f227bd0b9] 2023.07.12 04:14:15.700392 [ 356 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[a75f227bd0b9] 2023.07.12 04:14:15.700532 [ 356 ] <Fatal> BaseDaemon: No settings were changed\r\n```\r\n\n",
  "hints_text": "Reproduced:\r\n\r\n```\r\nclickhouse-local --multiquery \"CREATE TABLE v0 ( v1 Nullable ( Int32 ) , col2 String , col3 Int32 , col4 Int32 ) ENGINE = MergeTree ( ) ORDER BY tuple ( ) ; SELECT * FROM v0 ORDER BY tuple ( count ( * ) OVER ( ) , v1 , v1 , v0 . v1 ) ;\"\r\n```\nWhich tool did you use to find this test case? We need to integrate it into our CI.\nMinimized example:\r\n```\r\nclickhouse-local --query \"SELECT 1 ORDER BY tuple(count() OVER ());\"\r\n```",
  "created_at": "2023-07-16T00:54:28Z",
  "modified_files": [
    "src/Interpreters/ExpressionAnalyzer.cpp",
    "src/Interpreters/GetAggregatesVisitor.cpp",
    "src/Interpreters/GetAggregatesVisitor.h",
    "src/Interpreters/TreeRewriter.cpp",
    "src/Interpreters/TreeRewriter.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02814_order_by_tuple_window_function.reference",
    "b/tests/queries/0_stateless/02814_order_by_tuple_window_function.sql"
  ]
}