You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Logical error: 'Bad cast from type DB::FunctionNode to DB::ColumnNode'
### Describe the bug

Easy to reproduce. Run Fiddle.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/547ce171-03f1-4c61-a7af-fce221a6fe5a

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'Bad cast from type DB::FunctionNode to DB::ColumnNode'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:ne180100]() @ 0x000000001980c5b4
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x000000003985ef00
2. src/Common/Exception.cpp:106: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002563c28b
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000196bda76
4. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x00000000196bfdef
5. src/Common/typeid_cast.h:33: T typeid_cast<DB::ColumnNode&, DB::IQueryTreeNode>(DB::IQueryTreeNode&) @ 0x0000000030bd071d
6. src/Common/TypePromotion.h:31: DB::(anonymous namespace)::buildQueryPlanForJoinNodeLegacy(std::shared_ptr<DB::IQueryTreeNode> const&, DB::JoinTreeQueryPlan, DB::JoinTreeQueryPlan, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&, DB::SelectQueryInfo const&) @ 0x0000000031e377af
7. src/Planner/PlannerJoinTree.cpp:2044: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x0000000031e257fd
8. src/Planner/Planner.cpp:1556: DB::Planner::buildPlanForQueryNode() @ 0x0000000031dfbf5a
9. src/Planner/Planner.cpp:1303: DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000031df70ea
10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:235: DB::InterpreterSelectQueryAnalyzer::getSampleBlockAndPlannerContext() @ 0x0000000031df32b2
11. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:217: DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x0000000031df34b9
12. src/Storages/StorageDistributed.cpp:863: DB::StorageDistributed::read(DB::QueryPlan&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageSnapshot> const&, DB::SelectQueryInfo&, std::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned long) @ 0x000000003444b250
13. src/Planner/PlannerJoinTree.cpp:943: DB::(anonymous namespace)::buildQueryPlanForTableExpression(std::shared_ptr<DB::IQueryTreeNode>, std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::PlannerContext>&, bool, bool) @ 0x0000000031e2e7fd
14. src/Planner/PlannerJoinTree.cpp:2239: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x0000000031e2209b
15. src/Planner/Planner.cpp:1556: DB::Planner::buildPlanForQueryNode() @ 0x0000000031dfbf5a
16. src/Planner/Planner.cpp:1303: DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000031df70ea
17. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:254: DB::InterpreterSelectQueryAnalyzer::getQueryPlan() @ 0x0000000031df3c19
18. src/Interpreters/executeQuery.cpp:1403: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000323144d6
19. src/Interpreters/executeQuery.cpp:1622: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000003230ecfb
20. src/Server/TCPHandler.cpp:662: DB::TCPHandler::runImpl() @ 0x0000000035701d1c
21. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x0000000035730b6e
22. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x00000000399894a2
23. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003998a172
24. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000398f38f7
25. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000398ef32e
26. ? @ 0x00007ffff7ca1e2e
27. ? @ 0x00007ffff7d33a4c
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
