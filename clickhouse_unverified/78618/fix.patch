diff --git a/src/Planner/PlannerJoinTree.cpp b/src/Planner/PlannerJoinTree.cpp
index 4d6d9d413094..7cb521080041 100644
--- a/src/Planner/PlannerJoinTree.cpp
+++ b/src/Planner/PlannerJoinTree.cpp
@@ -1837,19 +1837,27 @@ JoinTreeQueryPlan buildQueryPlanForJoinNodeLegacy(
             auto & inner_columns_list = join_node_using_column_node.getExpressionOrThrow()->as<ListNode &>();
 
             auto & left_inner_column_node = inner_columns_list.getNodes().at(0);
-            auto & left_inner_column = left_inner_column_node->as<ColumnNode &>();
+            auto * left_inner_column = left_inner_column_node->as<ColumnNode>();
+            if (!left_inner_column)
+                throw Exception(ErrorCodes::BAD_ARGUMENTS,
+                    "JOIN USING clause expected column identifier. Actual {}",
+                    left_inner_column_node->formatASTForErrorMessage());
 
             auto & right_inner_column_node = inner_columns_list.getNodes().at(1);
-            auto & right_inner_column = right_inner_column_node->as<ColumnNode &>();
+            auto * right_inner_column = right_inner_column_node->as<ColumnNode>();
+            if (!right_inner_column)
+                throw Exception(ErrorCodes::BAD_ARGUMENTS,
+                    "JOIN USING clause expected column identifier. Actual {}",
+                    right_inner_column_node->formatASTForErrorMessage());
 
             const auto & join_node_using_column_node_type = join_node_using_column_node.getColumnType();
-            if (!left_inner_column.getColumnType()->equals(*join_node_using_column_node_type))
+            if (!left_inner_column->getColumnType()->equals(*join_node_using_column_node_type))
             {
                 const auto & left_inner_column_identifier = planner_context->getColumnNodeIdentifierOrThrow(left_inner_column_node);
                 left_plan_column_name_to_cast_type.emplace(left_inner_column_identifier, join_node_using_column_node_type);
             }
 
-            if (!right_inner_column.getColumnType()->equals(*join_node_using_column_node_type))
+            if (!right_inner_column->getColumnType()->equals(*join_node_using_column_node_type))
             {
                 const auto & right_inner_column_identifier = planner_context->getColumnNodeIdentifierOrThrow(right_inner_column_node);
                 right_plan_column_name_to_cast_type.emplace(right_inner_column_identifier, join_node_using_column_node_type);
diff --git a/src/Planner/PlannerJoinsLogical.cpp b/src/Planner/PlannerJoinsLogical.cpp
index 76f49a44cd28..1070289d20e4 100644
--- a/src/Planner/PlannerJoinsLogical.cpp
+++ b/src/Planner/PlannerJoinsLogical.cpp
@@ -59,6 +59,7 @@ namespace ErrorCodes
     extern const int LOGICAL_ERROR;
     extern const int NOT_IMPLEMENTED;
     extern const int INVALID_JOIN_ON_EXPRESSION;
+    extern const int BAD_ARGUMENTS;
 }
 
 namespace Setting
@@ -104,11 +105,25 @@ struct JoinInfoBuildContext
             {
                 auto & column_node = join_using_node->as<ColumnNode &>();
                 auto & column_node_sources = column_node.getExpressionOrThrow()->as<ListNode &>();
+
+                const auto column_left = column_node_sources.getNodes().at(0);
+                if (!column_left->as<ColumnNode>())
+                    throw Exception(ErrorCodes::BAD_ARGUMENTS,
+                        "JOIN USING clause expected column identifier. Actual {}",
+                        column_left->formatASTForErrorMessage());
+
                 changed_types.emplace(
-                    planner_context_->getColumnNodeIdentifierOrThrow(column_node_sources.getNodes().at(0)),
+                    planner_context_->getColumnNodeIdentifierOrThrow(column_left),
                     column_node.getColumnType());
+
+                const auto column_right = column_node_sources.getNodes().at(1);
+                if (!column_right->as<ColumnNode>())
+                    throw Exception(ErrorCodes::BAD_ARGUMENTS,
+                        "JOIN USING clause expected column identifier. Actual {}",
+                        column_right->formatASTForErrorMessage());
+
                 changed_types.emplace(
-                    planner_context_->getColumnNodeIdentifierOrThrow(column_node_sources.getNodes().at(1)),
+                    planner_context_->getColumnNodeIdentifierOrThrow(column_right),
                     column_node.getColumnType());
             }
         }
