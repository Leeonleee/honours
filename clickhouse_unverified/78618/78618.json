{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 78618,
  "instance_id": "ClickHouse__ClickHouse-78618",
  "issue_numbers": [
    "75806"
  ],
  "base_commit": "9a480c974e760fb62957f478c97a0820f23631e6",
  "patch": "diff --git a/src/Planner/PlannerJoinTree.cpp b/src/Planner/PlannerJoinTree.cpp\nindex 4d6d9d413094..7cb521080041 100644\n--- a/src/Planner/PlannerJoinTree.cpp\n+++ b/src/Planner/PlannerJoinTree.cpp\n@@ -1837,19 +1837,27 @@ JoinTreeQueryPlan buildQueryPlanForJoinNodeLegacy(\n             auto & inner_columns_list = join_node_using_column_node.getExpressionOrThrow()->as<ListNode &>();\n \n             auto & left_inner_column_node = inner_columns_list.getNodes().at(0);\n-            auto & left_inner_column = left_inner_column_node->as<ColumnNode &>();\n+            auto * left_inner_column = left_inner_column_node->as<ColumnNode>();\n+            if (!left_inner_column)\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+                    \"JOIN USING clause expected column identifier. Actual {}\",\n+                    left_inner_column_node->formatASTForErrorMessage());\n \n             auto & right_inner_column_node = inner_columns_list.getNodes().at(1);\n-            auto & right_inner_column = right_inner_column_node->as<ColumnNode &>();\n+            auto * right_inner_column = right_inner_column_node->as<ColumnNode>();\n+            if (!right_inner_column)\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+                    \"JOIN USING clause expected column identifier. Actual {}\",\n+                    right_inner_column_node->formatASTForErrorMessage());\n \n             const auto & join_node_using_column_node_type = join_node_using_column_node.getColumnType();\n-            if (!left_inner_column.getColumnType()->equals(*join_node_using_column_node_type))\n+            if (!left_inner_column->getColumnType()->equals(*join_node_using_column_node_type))\n             {\n                 const auto & left_inner_column_identifier = planner_context->getColumnNodeIdentifierOrThrow(left_inner_column_node);\n                 left_plan_column_name_to_cast_type.emplace(left_inner_column_identifier, join_node_using_column_node_type);\n             }\n \n-            if (!right_inner_column.getColumnType()->equals(*join_node_using_column_node_type))\n+            if (!right_inner_column->getColumnType()->equals(*join_node_using_column_node_type))\n             {\n                 const auto & right_inner_column_identifier = planner_context->getColumnNodeIdentifierOrThrow(right_inner_column_node);\n                 right_plan_column_name_to_cast_type.emplace(right_inner_column_identifier, join_node_using_column_node_type);\ndiff --git a/src/Planner/PlannerJoinsLogical.cpp b/src/Planner/PlannerJoinsLogical.cpp\nindex 76f49a44cd28..1070289d20e4 100644\n--- a/src/Planner/PlannerJoinsLogical.cpp\n+++ b/src/Planner/PlannerJoinsLogical.cpp\n@@ -59,6 +59,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n     extern const int NOT_IMPLEMENTED;\n     extern const int INVALID_JOIN_ON_EXPRESSION;\n+    extern const int BAD_ARGUMENTS;\n }\n \n namespace Setting\n@@ -104,11 +105,25 @@ struct JoinInfoBuildContext\n             {\n                 auto & column_node = join_using_node->as<ColumnNode &>();\n                 auto & column_node_sources = column_node.getExpressionOrThrow()->as<ListNode &>();\n+\n+                const auto column_left = column_node_sources.getNodes().at(0);\n+                if (!column_left->as<ColumnNode>())\n+                    throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+                        \"JOIN USING clause expected column identifier. Actual {}\",\n+                        column_left->formatASTForErrorMessage());\n+\n                 changed_types.emplace(\n-                    planner_context_->getColumnNodeIdentifierOrThrow(column_node_sources.getNodes().at(0)),\n+                    planner_context_->getColumnNodeIdentifierOrThrow(column_left),\n                     column_node.getColumnType());\n+\n+                const auto column_right = column_node_sources.getNodes().at(1);\n+                if (!column_right->as<ColumnNode>())\n+                    throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+                        \"JOIN USING clause expected column identifier. Actual {}\",\n+                        column_right->formatASTForErrorMessage());\n+\n                 changed_types.emplace(\n-                    planner_context_->getColumnNodeIdentifierOrThrow(column_node_sources.getNodes().at(1)),\n+                    planner_context_->getColumnNodeIdentifierOrThrow(column_right),\n                     column_node.getColumnType());\n             }\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03402_join_using_alias.reference b/tests/queries/0_stateless/03402_join_using_alias.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03402_join_using_alias.sql b/tests/queries/0_stateless/03402_join_using_alias.sql\nnew file mode 100644\nindex 000000000000..deb9458f2633\n--- /dev/null\n+++ b/tests/queries/0_stateless/03402_join_using_alias.sql\n@@ -0,0 +1,10 @@\n+set enable_analyzer=1;\n+\n+DROP TABLE IF EXISTS t0;\n+\n+CREATE TABLE t0 (c0 Int, c1 Int ALIAS 1) ENGINE = Memory;\n+SELECT c0 FROM remote('localhost', currentDatabase(), 't0') tx JOIN t0 USING (c1); -- { serverError BAD_ARGUMENTS }\n+\n+SELECT c0 FROM remote('localhost', currentDatabase(), 't0') tx JOIN t0 USING (c1) SETTINGS query_plan_use_new_logical_join_step=0; -- { serverError BAD_ARGUMENTS }\n+\n+DROP TABLE IF EXISTS t0;\n",
  "problem_statement": "Logical error: 'Bad cast from type DB::FunctionNode to DB::ColumnNode'\n### Describe the bug\n\nEasy to reproduce. Run Fiddle.\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/547ce171-03f1-4c61-a7af-fce221a6fe5a\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n<Fatal> : Logical error: 'Bad cast from type DB::FunctionNode to DB::ColumnNode'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. std::exception::exception[abi:ne180100]() @ 0x000000001980c5b4\n1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x000000003985ef00\n2. src/Common/Exception.cpp:106: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002563c28b\n3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000196bda76\n4. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x00000000196bfdef\n5. src/Common/typeid_cast.h:33: T typeid_cast<DB::ColumnNode&, DB::IQueryTreeNode>(DB::IQueryTreeNode&) @ 0x0000000030bd071d\n6. src/Common/TypePromotion.h:31: DB::(anonymous namespace)::buildQueryPlanForJoinNodeLegacy(std::shared_ptr<DB::IQueryTreeNode> const&, DB::JoinTreeQueryPlan, DB::JoinTreeQueryPlan, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&, DB::SelectQueryInfo const&) @ 0x0000000031e377af\n7. src/Planner/PlannerJoinTree.cpp:2044: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x0000000031e257fd\n8. src/Planner/Planner.cpp:1556: DB::Planner::buildPlanForQueryNode() @ 0x0000000031dfbf5a\n9. src/Planner/Planner.cpp:1303: DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000031df70ea\n10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:235: DB::InterpreterSelectQueryAnalyzer::getSampleBlockAndPlannerContext() @ 0x0000000031df32b2\n11. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:217: DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x0000000031df34b9\n12. src/Storages/StorageDistributed.cpp:863: DB::StorageDistributed::read(DB::QueryPlan&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageSnapshot> const&, DB::SelectQueryInfo&, std::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned long) @ 0x000000003444b250\n13. src/Planner/PlannerJoinTree.cpp:943: DB::(anonymous namespace)::buildQueryPlanForTableExpression(std::shared_ptr<DB::IQueryTreeNode>, std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::PlannerContext>&, bool, bool) @ 0x0000000031e2e7fd\n14. src/Planner/PlannerJoinTree.cpp:2239: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x0000000031e2209b\n15. src/Planner/Planner.cpp:1556: DB::Planner::buildPlanForQueryNode() @ 0x0000000031dfbf5a\n16. src/Planner/Planner.cpp:1303: DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000031df70ea\n17. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:254: DB::InterpreterSelectQueryAnalyzer::getQueryPlan() @ 0x0000000031df3c19\n18. src/Interpreters/executeQuery.cpp:1403: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000323144d6\n19. src/Interpreters/executeQuery.cpp:1622: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000003230ecfb\n20. src/Server/TCPHandler.cpp:662: DB::TCPHandler::runImpl() @ 0x0000000035701d1c\n21. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x0000000035730b6e\n22. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x00000000399894a2\n23. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003998a172\n24. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000398f38f7\n25. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000398ef32e\n26. ? @ 0x00007ffff7ca1e2e\n27. ? @ 0x00007ffff7d33a4c\n```\n",
  "hints_text": "",
  "created_at": "2025-04-02T23:39:35Z"
}