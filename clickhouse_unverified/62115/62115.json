{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 62115,
  "instance_id": "ClickHouse__ClickHouse-62115",
  "issue_numbers": [
    "62108"
  ],
  "base_commit": "6b9b597051636661784cfb1a283a1364104443a7",
  "patch": "diff --git a/src/Core/ExternalTable.cpp b/src/Core/ExternalTable.cpp\nindex e043a2f94921..f8bbd16d0383 100644\n--- a/src/Core/ExternalTable.cpp\n+++ b/src/Core/ExternalTable.cpp\n@@ -81,8 +81,10 @@ void BaseExternalTable::parseStructureFromStructureField(const std::string & arg\n     for (auto & child : columns_list_raw->children)\n     {\n         auto * column = child->as<ASTNameTypePair>();\n+        /// We use `formatWithPossiblyHidingSensitiveData` instead of `getColumnNameWithoutAlias` because `column->type` is an ASTFunction.\n+        /// `getColumnNameWithoutAlias` will return name of the function with `(arguments)` even if arguments is empty.\n         if (column)\n-            structure.emplace_back(column->name, column->type->getColumnNameWithoutAlias());\n+            structure.emplace_back(column->name, column->type->formatWithPossiblyHidingSensitiveData(0, true, true));\n         else\n             throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Error while parsing table structure: expected column definition, got {}\", child->formatForErrorMessage());\n     }\n@@ -99,7 +101,7 @@ void BaseExternalTable::parseStructureFromTypesField(const std::string & argumen\n         throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Error while parsing table structure: {}\", error);\n \n     for (size_t i = 0; i < type_list_raw->children.size(); ++i)\n-        structure.emplace_back(\"_\" + toString(i + 1), type_list_raw->children[i]->getColumnNameWithoutAlias());\n+        structure.emplace_back(\"_\" + toString(i + 1), type_list_raw->children[i]->formatWithPossiblyHidingSensitiveData(0, true, true));\n }\n \n void BaseExternalTable::initSampleBlock()\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02935_external_table_enum_type.reference b/tests/queries/0_stateless/02935_external_table_enum_type.reference\nindex ed152e608b96..d13bb1e990c6 100644\n--- a/tests/queries/0_stateless/02935_external_table_enum_type.reference\n+++ b/tests/queries/0_stateless/02935_external_table_enum_type.reference\n@@ -2,3 +2,9 @@ foo\t1\n bar\t2\n foo\t1\n bar\t2\n+true\n+true\n+true\n+[1]\n+('foo',1)\n+(1,1)\ndiff --git a/tests/queries/0_stateless/02935_external_table_enum_type.sh b/tests/queries/0_stateless/02935_external_table_enum_type.sh\nindex 61d5508e9f95..bbbf79fce4af 100755\n--- a/tests/queries/0_stateless/02935_external_table_enum_type.sh\n+++ b/tests/queries/0_stateless/02935_external_table_enum_type.sh\n@@ -10,3 +10,13 @@ curl -s \"${http_url}temp_structure=x+Enum8('foo'%3D1,'bar'%3D2),y+Int\" -F \"$(pri\n curl -s \"${http_url}temp_types=Enum8('foo'%3D1,'bar'%3D2),Int\" -F \"$(printf 'temp='\"bar\"'\\t2');filename=data1\" -F \"query=SELECT * FROM temp\"\n echo -ne 'foo\\t1' | ${CLICKHOUSE_CLIENT} --query=\"select * from tmp\" --external --file=- --name=tmp --structure=\"x Enum8('foo'=1,'bar'=2),y Int\"\n echo -ne 'bar\\t2' | ${CLICKHOUSE_CLIENT} --query=\"select * from tmp\" --external --file=- --name=tmp --types=\"Enum8('foo'=1,'bar'=2),Int\"\n+\n+# https://github.com/ClickHouse/ClickHouse/issues/62108\n+echo -ne 'true' | ${CLICKHOUSE_CLIENT} --query=\"select * from tmp\" --external --file=- --name=tmp --structure=\"x Bool\"\n+echo -ne 'true' | ${CLICKHOUSE_CLIENT} --query=\"select * from tmp\" --external --file=- --name=tmp --types=\"Bool\"\n+\n+# Test for some complex and custome types\n+echo -ne 'true' | ${CLICKHOUSE_CLIENT} --query=\"select * from tmp\" --external --file=- --name=tmp --structure=\"x Nullable(FixedString(4))\"\n+echo -ne '[1]' | ${CLICKHOUSE_CLIENT} --query=\"select * from tmp\" --external --file=- --name=tmp --structure=\"x Array(UInt8)\"\n+echo -ne '('\"'\"'foo'\"'\"',1)' | ${CLICKHOUSE_CLIENT} --query=\"select * from tmp\" --external --file=- --name=tmp --structure=\"x Tuple(String, UInt8)\"\n+echo -ne '(1,1)' | ${CLICKHOUSE_CLIENT} --query=\"select * from tmp\" --external --file=- --name=tmp --structure=\"x Point\"\n",
  "problem_statement": "Boolean values are broken with the http interface\n**Describe what's wrong**\r\n\r\nBoolean values aren't usable via the http interface anymore.\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes.\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use\r\n\r\n```\r\n\u276f clickhouse client --query='select version()'\r\n24.3.1.2672\r\n```\r\n\r\n* Which interface to use, if it matters\r\n\r\nThe http interface.\r\n\r\n* Queries to run that lead to an unexpected result: see below\r\n\r\nHere's a script that fails:\r\n\r\n```bash\r\n#!/usr/bin/env bash\r\n\r\nset -euxo pipefail\r\n\r\nclickhouse client --query='select true' > data.csv\r\n\r\ncurl -F 't=@data.csv' 'http://localhost:8123/?query=SELECT+*+FROM+t&t_structure=a+Bool&t_format=CSV'\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI would expect the output to be `true`.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nCode: 378. DB::Exception: Data type Bool cannot have arguments. (DATA_TYPE_CANNOT_HAVE_ARGUMENTS) (version 24.3.1.2672 (official build))\r\n```\r\n\n",
  "hints_text": "@canhld94, PTAL",
  "created_at": "2024-03-31T07:56:34Z"
}