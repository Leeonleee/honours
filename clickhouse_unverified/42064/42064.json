{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42064,
  "instance_id": "ClickHouse__ClickHouse-42064",
  "issue_numbers": [
    "35076"
  ],
  "base_commit": "00554ecd0016dcb1151f236a0b6fe074e7f2f82e",
  "patch": "diff --git a/src/Functions/filesystem.cpp b/src/Functions/filesystem.cpp\nindex 12813c3d8526..7af1c61d3b83 100644\n--- a/src/Functions/filesystem.cpp\n+++ b/src/Functions/filesystem.cpp\n@@ -1,31 +1,40 @@\n-#include <Functions/IFunction.h>\n-#include <Functions/FunctionFactory.h>\n+#include <Columns/ColumnString.h>\n+#include <Columns/ColumnVector.h>\n #include <DataTypes/DataTypesNumber.h>\n+#include <Disks/IDisk.h>\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/IFunction.h>\n #include <Interpreters/Context.h>\n-#include <filesystem>\n #include <Poco/Util/AbstractConfiguration.h>\n \n namespace DB\n {\n+namespace ErrorCodes\n+{\n+    extern const int ILLEGAL_COLUMN;\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int UNKNOWN_DISK;\n+}\n namespace\n {\n \n struct FilesystemAvailable\n {\n     static constexpr auto name = \"filesystemAvailable\";\n-    static std::uintmax_t get(const std::filesystem::space_info & spaceinfo) { return spaceinfo.available; }\n+    static std::uintmax_t get(const DiskPtr & disk) { return disk->getAvailableSpace(); }\n };\n \n-struct FilesystemFree\n+struct FilesystemUnreserved\n {\n-    static constexpr auto name = \"filesystemFree\";\n-    static std::uintmax_t get(const std::filesystem::space_info & spaceinfo) { return spaceinfo.free; }\n+    static constexpr auto name = \"filesystemUnreserved\";\n+    static std::uintmax_t get(const DiskPtr & disk) { return disk->getUnreservedSpace(); }\n };\n \n struct FilesystemCapacity\n {\n     static constexpr auto name = \"filesystemCapacity\";\n-    static std::uintmax_t get(const std::filesystem::space_info & spaceinfo) { return spaceinfo.capacity; }\n+    static std::uintmax_t get(const DiskPtr & disk) { return disk->getTotalSpace(); }\n };\n \n template <typename Impl>\n@@ -34,34 +43,72 @@ class FilesystemImpl : public IFunction\n public:\n     static constexpr auto name = Impl::name;\n \n-    static FunctionPtr create(ContextPtr context)\n-    {\n-        return std::make_shared<FilesystemImpl<Impl>>(std::filesystem::space(context->getPath()));\n-    }\n+    static FunctionPtr create(ContextPtr context_) { return std::make_shared<FilesystemImpl<Impl>>(context_); }\n+\n+    explicit FilesystemImpl(ContextPtr context_) : context(context_) { }\n+\n+    bool useDefaultImplementationForConstants() const override { return true; }\n \n     bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override\n     {\n         return false;\n     }\n \n-    explicit FilesystemImpl(std::filesystem::space_info spaceinfo_) : spaceinfo(spaceinfo_) { }\n-\n     String getName() const override { return name; }\n+\n+    bool isVariadic() const override { return true; }\n+\n     size_t getNumberOfArguments() const override { return 0; }\n     bool isDeterministic() const override { return false; }\n \n-    DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override\n+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n     {\n+        if (arguments.size() > 1)\n+        {\n+            throw Exception(\"Arguments size of function \" + getName() + \" should be 0 or 1\", ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n+        }\n+        if (arguments.size() == 1 && !isStringOrFixedString(arguments[0]))\n+        {\n+            throw Exception(\n+                \"Arguments of function \" + getName() + \" should be String or FixedString\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+        }\n         return std::make_shared<DataTypeUInt64>();\n     }\n \n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName &, const DataTypePtr &, size_t input_rows_count) const override\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t input_rows_count) const override\n     {\n-        return DataTypeUInt64().createColumnConst(input_rows_count, static_cast<UInt64>(Impl::get(spaceinfo)));\n+        if (arguments.empty())\n+        {\n+            auto disk = context->getDisk(\"default\");\n+            return DataTypeUInt64().createColumnConst(input_rows_count, Impl::get(disk));\n+        }\n+        else\n+        {\n+            auto col = arguments[0].column;\n+            if (const ColumnString * col_str = checkAndGetColumn<ColumnString>(col.get()))\n+            {\n+                auto disk_map = context->getDisksMap();\n+\n+                auto col_res = ColumnVector<UInt64>::create(col_str->size());\n+                auto & data = col_res->getData();\n+                for (size_t i = 0; i < col_str->size(); ++i)\n+                {\n+                    auto disk_name = col_str->getDataAt(i).toString();\n+                    if (auto it = disk_map.find(disk_name); it != disk_map.end())\n+                        data[i] = Impl::get(it->second);\n+                    else\n+                        throw Exception(\n+                            \"Unknown disk name \" + disk_name + \" while execute function \" + getName(), ErrorCodes::UNKNOWN_DISK);\n+                }\n+                return col_res;\n+            }\n+            throw Exception(\n+                \"Illegal column \" + arguments[0].column->getName() + \" of argument of function \" + getName(), ErrorCodes::ILLEGAL_COLUMN);\n+        }\n     }\n \n private:\n-    std::filesystem::space_info spaceinfo;\n+    ContextPtr context;\n };\n \n }\n@@ -70,7 +117,7 @@ REGISTER_FUNCTION(Filesystem)\n {\n     factory.registerFunction<FilesystemImpl<FilesystemAvailable>>();\n     factory.registerFunction<FilesystemImpl<FilesystemCapacity>>();\n-    factory.registerFunction<FilesystemImpl<FilesystemFree>>();\n+    factory.registerFunction<FilesystemImpl<FilesystemUnreserved>>();\n }\n \n }\n",
  "test_patch": "diff --git a/tests/fuzz/dictionaries/functions.dict b/tests/fuzz/dictionaries/functions.dict\nindex e4f347babf83..e2668d7d0933 100644\n--- a/tests/fuzz/dictionaries/functions.dict\n+++ b/tests/fuzz/dictionaries/functions.dict\n@@ -249,7 +249,7 @@\n \"cosh\"\n \"basename\"\n \"evalMLMethod\"\n-\"filesystemFree\"\n+\"filesystemUnreserved\"\n \"filesystemCapacity\"\n \"reinterpretAsDate\"\n \"filesystemAvailable\"\ndiff --git a/tests/queries/0_stateless/00824_filesystem.sql b/tests/queries/0_stateless/00824_filesystem.sql\nindex cd4d69a703ea..cecf66810cfa 100644\n--- a/tests/queries/0_stateless/00824_filesystem.sql\n+++ b/tests/queries/0_stateless/00824_filesystem.sql\n@@ -1,1 +1,1 @@\n-SELECT filesystemCapacity() >= filesystemFree() AND filesystemFree() >= filesystemAvailable() AND filesystemAvailable() >= 0;\n+SELECT filesystemCapacity() >= filesystemAvailable() AND filesystemAvailable() >= filesystemUnreserved() AND filesystemUnreserved() >= 0;\ndiff --git a/tests/queries/0_stateless/02345_filesystem_local.sh b/tests/queries/0_stateless/02345_filesystem_local.sh\nindex 6771df2ae2df..aac66f9f7b9a 100755\n--- a/tests/queries/0_stateless/02345_filesystem_local.sh\n+++ b/tests/queries/0_stateless/02345_filesystem_local.sh\n@@ -5,4 +5,4 @@ CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n . \"$CUR_DIR\"/../shell_config.sh\n \n # Checks that these functions are working inside clickhouse-local. Does not check specific values.\n-$CLICKHOUSE_LOCAL --query \"SELECT filesystemAvailable() > 0, filesystemFree() <= filesystemCapacity()\"\n+$CLICKHOUSE_LOCAL --query \"SELECT filesystemAvailable() > 0, filesystemUnreserved() <= filesystemCapacity()\"\ndiff --git a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference\nindex 040a8c8d3178..341800206804 100644\n--- a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference\n+++ b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference\n@@ -322,7 +322,7 @@ farmHash64\n file\n filesystemAvailable\n filesystemCapacity\n-filesystemFree\n+filesystemUnreserved\n finalizeAggregation\n firstSignificantSubdomainCustom\n firstSignificantSubdomainCustomRFC\ndiff --git a/tests/queries/0_stateless/02457_filesystem_function.reference b/tests/queries/0_stateless/02457_filesystem_function.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02457_filesystem_function.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02457_filesystem_function.sql b/tests/queries/0_stateless/02457_filesystem_function.sql\nnew file mode 100644\nindex 000000000000..fac418c046a1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02457_filesystem_function.sql\n@@ -0,0 +1,2 @@\n+select filesystemCapacity('default') >= filesystemAvailable('default') and filesystemAvailable('default') >= filesystemUnreserved('default');\n+select filesystemCapacity('__un_exists_disk'); -- { serverError UNKNOWN_DISK }\n",
  "problem_statement": "`filesystemAvailable` and similar functions should take optional argument with disk name.\nWhen disk name is not specified, it should use the default disk.\r\nThey should return max UInt64 for \"infinite\" virtual filesystems.\r\n\r\n**Use case**\r\n\r\nClickHouse cloud.\n",
  "hints_text": "Since we should get the space info by Disk, maybe it's better to change and rename these functions to:\r\n`diskTotalSpace`, `diskAvailableSpace` and `diskUnreservedSpace`?\n`filesystem` is better.\n> `filesystem` is better.\r\n\r\nOK, but former functions are `filesystemCapacity`, `filesystemFree` and `filesystemAvailable`, maybe we should change `filesystemFree` to `filesystemUnreserved`?",
  "created_at": "2022-10-04T15:31:20Z",
  "modified_files": [
    "src/Functions/filesystem.cpp"
  ],
  "modified_test_files": [
    "tests/fuzz/dictionaries/functions.dict",
    "tests/queries/0_stateless/00824_filesystem.sql",
    "tests/queries/0_stateless/02345_filesystem_local.sh",
    "tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference",
    "b/tests/queries/0_stateless/02457_filesystem_function.reference",
    "b/tests/queries/0_stateless/02457_filesystem_function.sql"
  ]
}