diff --git a/src/Planner/Planner.cpp b/src/Planner/Planner.cpp
index 56cc73456cef..28be1a830887 100644
--- a/src/Planner/Planner.cpp
+++ b/src/Planner/Planner.cpp
@@ -498,17 +498,6 @@ void Planner::buildQueryPlanIfNeeded()
             should_produce_results_in_order_of_bucket_number);
         query_plan.addStep(std::move(aggregating_step));
 
-        if (query_node.isGroupByWithRollup())
-        {
-            auto rollup_step = std::make_unique<RollupStep>(query_plan.getCurrentDataStream(), std::move(aggregator_params), true /*final*/, settings.group_by_use_nulls);
-            query_plan.addStep(std::move(rollup_step));
-        }
-        else if (query_node.isGroupByWithCube())
-        {
-            auto cube_step = std::make_unique<CubeStep>(query_plan.getCurrentDataStream(), std::move(aggregator_params), true /*final*/, settings.group_by_use_nulls);
-            query_plan.addStep(std::move(cube_step));
-        }
-
         if (query_node.isGroupByWithTotals())
         {
             const auto & having_analysis_result = expression_analysis_result.getHaving();
@@ -528,6 +517,17 @@ void Planner::buildQueryPlanIfNeeded()
 
             query_plan.addStep(std::move(totals_having_step));
         }
+
+        if (query_node.isGroupByWithRollup())
+        {
+            auto rollup_step = std::make_unique<RollupStep>(query_plan.getCurrentDataStream(), std::move(aggregator_params), true /*final*/, settings.group_by_use_nulls);
+            query_plan.addStep(std::move(rollup_step));
+        }
+        else if (query_node.isGroupByWithCube())
+        {
+            auto cube_step = std::make_unique<CubeStep>(query_plan.getCurrentDataStream(), std::move(aggregator_params), true /*final*/, settings.group_by_use_nulls);
+            query_plan.addStep(std::move(cube_step));
+        }
     }
 
     if (!having_executed && expression_analysis_result.hasHaving())
