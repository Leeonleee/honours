diff --git a/tests/integration/test_lost_part/test.py b/tests/integration/test_lost_part/test.py
index 614df52063f2..7b2d54a5ea46 100644
--- a/tests/integration/test_lost_part/test.py
+++ b/tests/integration/test_lost_part/test.py
@@ -178,18 +178,20 @@ def test_lost_part_mutation(start_cluster):
 def test_lost_last_part(start_cluster):
     for node in [node1, node2]:
         node.query(
-            "CREATE TABLE mt3 (id UInt64) ENGINE ReplicatedMergeTree('/clickhouse/tables/t3', '{}') ORDER BY tuple()".format(node.name))
+            "CREATE TABLE mt3 (id UInt64, p String) ENGINE ReplicatedMergeTree('/clickhouse/tables/t3', '{}') "
+            "ORDER BY tuple() PARTITION BY p".format(node.name))
 
     node1.query("SYSTEM STOP MERGES mt3")
     node2.query("SYSTEM STOP REPLICATION QUEUES")
 
     for i in range(1):
-        node1.query("INSERT INTO mt3 VALUES ({})".format(i))
+        node1.query("INSERT INTO mt3 VALUES ({}, 'x')".format(i))
 
     # actually not important
     node1.query("ALTER TABLE mt3 UPDATE id = 777 WHERE 1", settings={"mutations_sync": "0"})
 
-    remove_part_from_disk(node1, 'mt3', 'all_0_0_0')
+    partition_id = node1.query("select partitionId('x')").strip()
+    remove_part_from_disk(node1, 'mt3', '{}_0_0_0'.format(partition_id))
 
     # other way to detect broken parts
     node1.query("CHECK TABLE mt3")
@@ -199,13 +201,13 @@ def test_lost_last_part(start_cluster):
     for i in range(10):
         result = node1.query("SELECT count() FROM system.replication_queue")
         assert int(result) <= 1, "Have a lot of entries in queue {}".format(node1.query("SELECT * FROM system.replication_queue FORMAT Vertical"))
-        if node1.contains_in_log("Cannot create empty part") and node1.contains_in_log("DROP PARTITION"):
+        if node1.contains_in_log("Cannot create empty part") and node1.contains_in_log("DROP/DETACH PARTITION"):
             break
         time.sleep(1)
     else:
         assert False, "Don't have required messages in node1 log"
 
-    node1.query("ALTER TABLE mt3 DROP PARTITION ID 'all'")
+    node1.query("ALTER TABLE mt3 DROP PARTITION ID '{}'".format(partition_id))
 
     assert_eq_with_retry(node1, "SELECT COUNT() FROM mt3", "0")
     assert_eq_with_retry(node1, "SELECT COUNT() FROM system.replication_queue", "0")
diff --git a/tests/queries/0_stateless/01165_lost_part_empty_partition.reference b/tests/queries/0_stateless/01165_lost_part_empty_partition.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/01165_lost_part_empty_partition.sql b/tests/queries/0_stateless/01165_lost_part_empty_partition.sql
new file mode 100644
index 000000000000..9279de1a5b39
--- /dev/null
+++ b/tests/queries/0_stateless/01165_lost_part_empty_partition.sql
@@ -0,0 +1,37 @@
+-- Tags: zookeeper
+
+create table rmt1 (d DateTime, n int) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '1') order by n partition by toYYYYMMDD(d);
+create table rmt2 (d DateTime, n int) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '2') order by n partition by toYYYYMMDD(d);
+
+system stop replicated sends rmt1;
+insert into rmt1 values (now(), arrayJoin([1, 2])); -- { clientError 36 }
+insert into rmt1(n) select * from system.numbers limit arrayJoin([1, 2]); -- { serverError 36 }
+insert into rmt1 values (now(), rand());
+drop table rmt1;
+
+system sync replica rmt2;
+drop table rmt2;
+
+
+create table rmt1 (d DateTime, n int) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '1') order by n partition by tuple();
+create table rmt2 (d DateTime, n int) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '2') order by n partition by tuple();
+
+system stop replicated sends rmt1;
+insert into rmt1 values (now(), rand());
+drop table rmt1;
+
+system sync replica rmt2;
+drop table rmt2;
+
+
+create table rmt1 (n UInt8, m Int32, d Date, t DateTime) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '1') order by n partition by (n, m, d, t);
+create table rmt2 (n UInt8, m Int32, d Date, t DateTime) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '2') order by n partition by (n, m, d, t);
+
+system stop replicated sends rmt1;
+insert into rmt1 values (rand(), rand(), now(), now());
+insert into rmt1 values (rand(), rand(), now(), now());
+insert into rmt1 values (rand(), rand(), now(), now());
+drop table rmt1;
+
+system sync replica rmt2;
+drop table rmt2;
diff --git a/tests/queries/0_stateless/02009_array_join_partition.sql b/tests/queries/0_stateless/02009_array_join_partition.sql
index a78efe96f66a..b8eedb5592f4 100644
--- a/tests/queries/0_stateless/02009_array_join_partition.sql
+++ b/tests/queries/0_stateless/02009_array_join_partition.sql
@@ -1,4 +1,4 @@
 CREATE TABLE table_2009_part (`i` Int64, `d` Date, `s` String) ENGINE = MergeTree PARTITION BY toYYYYMM(d) ORDER BY i;
 
-ALTER TABLE table_2009_part ATTACH PARTITION tuple(arrayJoin([0, 1])); -- {serverError 248}
-ALTER TABLE table_2009_part ATTACH PARTITION tuple(toYYYYMM(toDate([arrayJoin([arrayJoin([arrayJoin([arrayJoin([3, materialize(NULL), arrayJoin([1025, materialize(NULL), materialize(NULL)]), NULL])])]), materialize(NULL)])], NULL))); -- {serverError 248}
+ALTER TABLE table_2009_part ATTACH PARTITION tuple(arrayJoin([0, 1])); -- {serverError 36}
+ALTER TABLE table_2009_part ATTACH PARTITION tuple(toYYYYMM(toDate([arrayJoin([arrayJoin([arrayJoin([arrayJoin([3, materialize(NULL), arrayJoin([1025, materialize(NULL), materialize(NULL)]), NULL])])]), materialize(NULL)])], NULL))); -- {serverError 36}
