diff --git a/tests/integration/test_dictionaries_mysql/test.py b/tests/integration/test_dictionaries_mysql/test.py
index fe284f71e00a..fa3855d1e16e 100644
--- a/tests/integration/test_dictionaries_mysql/test.py
+++ b/tests/integration/test_dictionaries_mysql/test.py
@@ -1,4 +1,5 @@
 ## sudo -H pip install PyMySQL
+import warnings
 import pymysql.cursors
 import pytest
 from helpers.cluster import ClickHouseCluster
@@ -46,23 +47,114 @@ def started_cluster():
         cluster.shutdown()
 
 
-def test_load_mysql_dictionaries(started_cluster):
-    # Load dictionaries
+def test_mysql_dictionaries_custom_query_full_load(started_cluster):
+    mysql_connection = get_mysql_conn(started_cluster)
+
+    execute_mysql_query(mysql_connection, "CREATE TABLE IF NOT EXISTS test.test_table_1 (id Integer, value_1 Text);")
+    execute_mysql_query(mysql_connection, "CREATE TABLE IF NOT EXISTS test.test_table_2 (id Integer, value_2 Text);")
+    execute_mysql_query(mysql_connection, "INSERT INTO test.test_table_1 VALUES (1, 'Value_1');")
+    execute_mysql_query(mysql_connection, "INSERT INTO test.test_table_2 VALUES (1, 'Value_2');")
+
     query = instance.query
-    query("SYSTEM RELOAD DICTIONARIES")
+    query("""
+    CREATE DICTIONARY test_dictionary_custom_query
+    (
+        id UInt64,
+        value_1 String,
+        value_2 String
+    )
+    PRIMARY KEY id
+    LAYOUT(FLAT())
+    SOURCE(MYSQL(
+        HOST 'mysql57'
+        PORT 3306
+        USER 'root'
+        PASSWORD 'clickhouse'
+        QUERY $doc$SELECT id, value_1, value_2 FROM test.test_table_1 INNER JOIN test.test_table_2 USING (id);$doc$))
+    LIFETIME(0)
+    """)
+
+    result = query("SELECT id, value_1, value_2 FROM test_dictionary_custom_query")
+
+    assert result == '1\tValue_1\tValue_2
'
+
+    query("DROP DICTIONARY test_dictionary_custom_query;")
+
+    execute_mysql_query(mysql_connection, "DROP TABLE test.test_table_1;")
+    execute_mysql_query(mysql_connection, "DROP TABLE test.test_table_2;")
+
+
+def test_mysql_dictionaries_custom_query_partial_load_simple_key(started_cluster):
+    mysql_connection = get_mysql_conn(started_cluster)
+
+    execute_mysql_query(mysql_connection, "CREATE TABLE IF NOT EXISTS test.test_table_1 (id Integer, value_1 Text);")
+    execute_mysql_query(mysql_connection, "CREATE TABLE IF NOT EXISTS test.test_table_2 (id Integer, value_2 Text);")
+    execute_mysql_query(mysql_connection, "INSERT INTO test.test_table_1 VALUES (1, 'Value_1');")
+    execute_mysql_query(mysql_connection, "INSERT INTO test.test_table_2 VALUES (1, 'Value_2');")
 
-    for n in range(0, 5):
-        # Create MySQL tables, fill them and create CH dict tables
-        prepare_mysql_table(started_cluster, 'test', str(n))
+    query = instance.query
+    query("""
+    CREATE DICTIONARY test_dictionary_custom_query
+    (
+        id UInt64,
+        value_1 String,
+        value_2 String
+    )
+    PRIMARY KEY id
+    LAYOUT(DIRECT())
+    SOURCE(MYSQL(
+        HOST 'mysql57'
+        PORT 3306
+        USER 'root'
+        PASSWORD 'clickhouse'
+        QUERY $doc$SELECT id, value_1, value_2 FROM test.test_table_1 INNER JOIN test.test_table_2 USING (id) WHERE {condition};$doc$))
+    """)
+
+    result = query("SELECT dictGet('test_dictionary_custom_query', ('value_1', 'value_2'), toUInt64(1))")
+
+    assert result == "('Value_1','Value_2')
"
+
+    query("DROP DICTIONARY test_dictionary_custom_query;")
+
+    execute_mysql_query(mysql_connection, "DROP TABLE test.test_table_1;")
+    execute_mysql_query(mysql_connection, "DROP TABLE test.test_table_2;")
+
+
+def test_mysql_dictionaries_custom_query_partial_load_complex_key(started_cluster):
+    mysql_connection = get_mysql_conn(started_cluster)
 
-    # Check dictionaries are loaded and have correct number of elements
-    for n in range(0, 100):
-        # Force reload of dictionaries (each 10 iteration)
-        if (n % 10) == 0:
-            query("SYSTEM RELOAD DICTIONARIES")
+    execute_mysql_query(mysql_connection, "CREATE TABLE IF NOT EXISTS test.test_table_1 (id Integer, id_key Text, value_1 Text);")
+    execute_mysql_query(mysql_connection, "CREATE TABLE IF NOT EXISTS test.test_table_2 (id Integer, id_key Text, value_2 Text);")
+    execute_mysql_query(mysql_connection, "INSERT INTO test.test_table_1 VALUES (1, 'Key', 'Value_1');")
+    execute_mysql_query(mysql_connection, "INSERT INTO test.test_table_2 VALUES (1, 'Key', 'Value_2');")
 
-        # Check number of row
-        assert query("SELECT count() FROM `test`.`dict_table_{}`".format('test' + str(n % 5))).rstrip() == '10000'
+    query = instance.query
+    query("""
+    CREATE DICTIONARY test_dictionary_custom_query
+    (
+        id UInt64,
+        id_key String,
+        value_1 String,
+        value_2 String
+    )
+    PRIMARY KEY id, id_key
+    LAYOUT(COMPLEX_KEY_DIRECT())
+    SOURCE(MYSQL(
+        HOST 'mysql57'
+        PORT 3306
+        USER 'root'
+        PASSWORD 'clickhouse'
+        QUERY $doc$SELECT id, id_key, value_1, value_2 FROM test.test_table_1 INNER JOIN test.test_table_2 USING (id, id_key) WHERE {condition};$doc$))
+    """)
+
+    result = query("SELECT dictGet('test_dictionary_custom_query', ('value_1', 'value_2'), (toUInt64(1), 'Key'))")
+
+    assert result == "('Value_1','Value_2')
"
+
+    query("DROP DICTIONARY test_dictionary_custom_query;")
+
+    execute_mysql_query(mysql_connection, "DROP TABLE test.test_table_1;")
+    execute_mysql_query(mysql_connection, "DROP TABLE test.test_table_2;")
 
 
 def create_mysql_db(mysql_connection, name):
@@ -102,9 +194,17 @@ def get_mysql_conn(started_cluster):
         except Exception as e:
             errors += [str(e)]
             time.sleep(1)
-    
+
     raise Exception("Connection not establised, {}".format(errors))
 
+def execute_mysql_query(connection, query):
+    logging.debug("Execute MySQL query:{}".format(query))
+    with warnings.catch_warnings():
+        warnings.simplefilter("ignore")
+        with connection.cursor() as cursor:
+            cursor.execute(query)
+        connection.commit()
+
 def create_mysql_table(conn, table_name):
     with conn.cursor() as cursor:
         cursor.execute(create_table_mysql_template.format(table_name))
diff --git a/tests/integration/test_dictionaries_postgresql/test.py b/tests/integration/test_dictionaries_postgresql/test.py
index d35182e15a17..6eb4a04ed2c8 100644
--- a/tests/integration/test_dictionaries_postgresql/test.py
+++ b/tests/integration/test_dictionaries_postgresql/test.py
@@ -90,6 +90,121 @@ def test_load_dictionaries(started_cluster):
     node1.query("DROP DICTIONARY IF EXISTS {}".format(dict_name))
 
 
+def test_postgres_dictionaries_custom_query_full_load(started_cluster):
+    conn = get_postgres_conn(ip=started_cluster.postgres_ip, database=True, port=started_cluster.postgres_port)
+    cursor = conn.cursor()
+
+    cursor.execute("CREATE TABLE IF NOT EXISTS test_table_1 (id Integer, value_1 Text);")
+    cursor.execute("CREATE TABLE IF NOT EXISTS test_table_2 (id Integer, value_2 Text);")
+    cursor.execute("INSERT INTO test_table_1 VALUES (1, 'Value_1');")
+    cursor.execute("INSERT INTO test_table_2 VALUES (1, 'Value_2');")
+
+    query = node1.query
+    query("""
+    CREATE DICTIONARY test_dictionary_custom_query
+    (
+        id UInt64,
+        value_1 String,
+        value_2 String
+    )
+    PRIMARY KEY id
+    LAYOUT(FLAT())
+    SOURCE(PostgreSQL(
+        DB 'clickhouse'
+        HOST '{}'
+        PORT {}
+        USER 'postgres'
+        PASSWORD 'mysecretpassword'
+        QUERY $doc$SELECT id, value_1, value_2 FROM test_table_1 INNER JOIN test_table_2 USING (id);$doc$))
+    LIFETIME(0)
+    """.format(started_cluster.postgres_ip, started_cluster.postgres_port))
+
+    result = query("SELECT id, value_1, value_2 FROM test_dictionary_custom_query")
+
+    assert result == '1\tValue_1\tValue_2
'
+
+    query("DROP DICTIONARY test_dictionary_custom_query;")
+
+    cursor.execute("DROP TABLE test_table_2;")
+    cursor.execute("DROP TABLE test_table_1;")
+
+
+def test_postgres_dictionaries_custom_query_partial_load_simple_key(started_cluster):
+    conn = get_postgres_conn(ip=started_cluster.postgres_ip, database=True, port=started_cluster.postgres_port)
+    cursor = conn.cursor()
+
+    cursor.execute("CREATE TABLE IF NOT EXISTS test_table_1 (id Integer, value_1 Text);")
+    cursor.execute("CREATE TABLE IF NOT EXISTS test_table_2 (id Integer, value_2 Text);")
+    cursor.execute("INSERT INTO test_table_1 VALUES (1, 'Value_1');")
+    cursor.execute("INSERT INTO test_table_2 VALUES (1, 'Value_2');")
+
+    query = node1.query
+    query("""
+    CREATE DICTIONARY test_dictionary_custom_query
+    (
+        id UInt64,
+        value_1 String,
+        value_2 String
+    )
+    PRIMARY KEY id
+    LAYOUT(DIRECT())
+    SOURCE(PostgreSQL(
+        DB 'clickhouse'
+        HOST '{}'
+        PORT {}
+        USER 'postgres'
+        PASSWORD 'mysecretpassword'
+        QUERY $doc$SELECT id, value_1, value_2 FROM test_table_1 INNER JOIN test_table_2 USING (id) WHERE {{condition}};$doc$))
+    """.format(started_cluster.postgres_ip, started_cluster.postgres_port))
+
+    result = query("SELECT dictGet('test_dictionary_custom_query', ('value_1', 'value_2'), toUInt64(1))")
+
+    assert result == '(\'Value_1\',\'Value_2\')
'
+
+    query("DROP DICTIONARY test_dictionary_custom_query;")
+
+    cursor.execute("DROP TABLE test_table_2;")
+    cursor.execute("DROP TABLE test_table_1;")
+
+
+def test_postgres_dictionaries_custom_query_partial_load_complex_key(started_cluster):
+    conn = get_postgres_conn(ip=started_cluster.postgres_ip, database=True, port=started_cluster.postgres_port)
+    cursor = conn.cursor()
+
+    cursor.execute("CREATE TABLE IF NOT EXISTS test_table_1 (id Integer, key Text, value_1 Text);")
+    cursor.execute("CREATE TABLE IF NOT EXISTS test_table_2 (id Integer, key Text, value_2 Text);")
+    cursor.execute("INSERT INTO test_table_1 VALUES (1, 'Key', 'Value_1');")
+    cursor.execute("INSERT INTO test_table_2 VALUES (1, 'Key', 'Value_2');")
+
+    query = node1.query
+    query("""
+    CREATE DICTIONARY test_dictionary_custom_query
+    (
+        id UInt64,
+        key String,
+        value_1 String,
+        value_2 String
+    )
+    PRIMARY KEY id, key
+    LAYOUT(COMPLEX_KEY_DIRECT())
+    SOURCE(PostgreSQL(
+        DB 'clickhouse'
+        HOST '{}'
+        PORT {}
+        USER 'postgres'
+        PASSWORD 'mysecretpassword'
+        QUERY $doc$SELECT id, key, value_1, value_2 FROM test_table_1 INNER JOIN test_table_2 USING (id, key) WHERE {{condition}};$doc$))
+    """.format(started_cluster.postgres_ip, started_cluster.postgres_port))
+
+    result = query("SELECT dictGet('test_dictionary_custom_query', ('value_1', 'value_2'), (toUInt64(1), 'Key'))")
+
+    assert result == '(\'Value_1\',\'Value_2\')
'
+
+    query("DROP DICTIONARY test_dictionary_custom_query;")
+
+    cursor.execute("DROP TABLE test_table_2;")
+    cursor.execute("DROP TABLE test_table_1;")
+
 def test_invalidate_query(started_cluster):
     conn = get_postgres_conn(ip=started_cluster.postgres_ip, database=True, port=started_cluster.postgres_port)
     cursor = conn.cursor()
@@ -158,7 +273,7 @@ def test_dictionary_with_replicas(started_cluster):
     node1.query("DROP DICTIONARY IF EXISTS dict1")
 
 
-def test_postgres_scema(started_cluster):
+def test_postgres_schema(started_cluster):
     conn = get_postgres_conn(ip=started_cluster.postgres_ip, port=started_cluster.postgres_port, database=True)
     cursor = conn.cursor()
 
