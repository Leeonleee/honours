{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 69336,
  "instance_id": "ClickHouse__ClickHouse-69336",
  "issue_numbers": [
    "69287"
  ],
  "base_commit": "82fd9bab4edec264b3a0480de916893de462a4ae",
  "patch": "diff --git a/src/Functions/LowerUpperUTF8Impl.h b/src/Functions/LowerUpperUTF8Impl.h\nindex 7d60bd54d2f1..f174bcd5f3e1 100644\n--- a/src/Functions/LowerUpperUTF8Impl.h\n+++ b/src/Functions/LowerUpperUTF8Impl.h\n@@ -6,6 +6,7 @@\n \n #    include <Columns/ColumnString.h>\n #    include <Functions/LowerUpperImpl.h>\n+#    include <base/scope_guard.h>\n #    include <unicode/ucasemap.h>\n #    include <unicode/unistr.h>\n #    include <unicode/urename.h>\n@@ -49,6 +50,11 @@ struct LowerUpperUTF8Impl\n         if (U_FAILURE(error_code))\n             throw DB::Exception(ErrorCodes::LOGICAL_ERROR, \"Error calling ucasemap_open: {}\", u_errorName(error_code));\n \n+        SCOPE_EXIT(\n+        {\n+            ucasemap_close(case_map);\n+        });\n+\n         size_t curr_offset = 0;\n         for (size_t row_i = 0; row_i < input_rows_count; ++row_i)\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00170_lower_upper_utf8_memleak.reference b/tests/queries/0_stateless/00170_lower_upper_utf8_memleak.reference\nnew file mode 100644\nindex 000000000000..7f6160bace3f\n--- /dev/null\n+++ b/tests/queries/0_stateless/00170_lower_upper_utf8_memleak.reference\n@@ -0,0 +1,1 @@\n+espa\u00f1a\ndiff --git a/tests/queries/0_stateless/00170_lower_upper_utf8_memleak.sh b/tests/queries/0_stateless/00170_lower_upper_utf8_memleak.sh\nnew file mode 100755\nindex 000000000000..8436659c6a88\n--- /dev/null\n+++ b/tests/queries/0_stateless/00170_lower_upper_utf8_memleak.sh\n@@ -0,0 +1,11 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest\n+# no-fasttest: upper/lowerUTF8 use ICU\n+\n+# Test for issue #69336\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_LOCAL --query \"SELECT lowerUTF8('ESPA\u00d1A')\"\n",
  "problem_statement": "Memory leak on lowerUTF8 function\n**Company or project name**\r\n\r\nClickhouse employee\r\n\r\n**Describe what's wrong**\r\n\r\nRunning a `lowerUTF8` function call reports a memory leak when the server shuts down.\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes\r\n\r\n**How to reproduce**\r\n\r\nCompile Clickhouse with ASAN and run:\r\n```sql\r\nSELECT lowerUTF8('ESPA\u00d1A');\r\n```\r\nThen shut down the server.\r\n\r\n**Expected behavior**\r\n\r\nNo memory leak should happen.\r\n\r\n**Error message and/or stacktrace**\r\n\r\nStack trace of the memory leak:\r\n```\r\nDirect leak of 48 byte(s) in 1 object(s) allocated from:\r\n    #0 0x58ae2b640083 in malloc (clickhouse+0xe5eb083) (BuildId: dc0c7fe3a11b409905aa576ded0b5ffb4b979855)\r\n    #1 0x58ae4ec025aa in icu_75::UMemory::operator new(unsigned long) contrib/icu/icu4c/source/common/uobject.cpp:62:12\r\n    #2 0x58ae4eccc36d in ucasemap_open_75 contrib/icu/icu4c/source/common/ucasemap.cpp:68:21\r\n    #3 0x58ae34b333ba in DB::LowerUpperUTF8Impl<(char)65, (char)90, false>::vector(DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul> const&, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul>&, unsigned long) src/Functions/LowerUpperUTF8Impl.h:48:31\r\n    #4 0x58ae34b31eb5 in DB::FunctionStringToString<DB::LowerUpperUTF8Impl<(char)65, (char)90, false>, DB::(anonymous namespace)::NameLowerUTF8, false>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const src/Functions/FunctionStringToString.h:68:13\r\n    #5 0x58ae2b6872d4 in DB::IFunction::executeImplDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const src/Functions/IFunction.h:448:16\r\n    #6 0x58ae2b6c1f34 in DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const src/Functions/IFunctionAdaptors.h:28:26\r\n    #7 0x58ae2d70c1ba in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:245:15\r\n    #8 0x58ae2d70b50c in DB::IExecutableFunction::defaultImplementationForConstantArguments(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:159:31\r\n    #9 0x58ae2d70c0e4 in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:237:20\r\n    #10 0x58ae2d70e34e in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:303:22\r\n    #11 0x58ae2d711424 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:380:16\r\n    #12 0x58ae47fdb9e5 in DB::QueryAnalyzer::resolveFunction(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) src/Analyzer/Resolve/QueryAnalyzer.cpp:3449:47\r\n    #13 0x58ae47fab5f5 in DB::QueryAnalyzer::resolveExpressionNode(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) src/Analyzer/Resolve/QueryAnalyzer.cpp:3749:46\r\n    #14 0x58ae47fa9dac in DB::QueryAnalyzer::resolveExpressionNodeList(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) src/Analyzer/Resolve/QueryAnalyzer.cpp:3907:49\r\n    #15 0x58ae47ff4768 in DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) src/Analyzer/Resolve/QueryAnalyzer.cpp:4155:40\r\n    #16 0x58ae47f9f1cc in DB::QueryAnalyzer::resolveQuery(std::__1::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) src/Analyzer/Resolve/QueryAnalyzer.cpp:5419:30\r\n    #17 0x58ae47f9d203 in DB::QueryAnalyzer::resolve(std::__1::shared_ptr<DB::IQueryTreeNode>&, std::__1::shared_ptr<DB::IQueryTreeNode> const&, std::__1::shared_ptr<DB::Context const>) src/Analyzer/Resolve/QueryAnalyzer.cpp:139:13\r\n    #18 0x58ae47f9c0eb in DB::QueryAnalysisPass::run(std::__1::shared_ptr<DB::IQueryTreeNode>&, std::__1::shared_ptr<DB::Context const>) src/Analyzer/Resolve/QueryAnalysisPass.cpp:18:14\r\n    #19 0x58ae48e630cb in DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>) src/Analyzer/QueryTreePassManager.cpp:185:20\r\n    #20 0x58ae4906ee12 in DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context const> const&, std::__1::shared_ptr<DB::IStorage> const&) src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:142:33\r\n    #21 0x58ae4906ab2e in DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:160:18\r\n    #22 0x58ae490718f5 in std::__1::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::__1::make_unique[abi:v15007]<DB::InterpreterSelectQueryAnalyzer, std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714:32\r\n    #23 0x58ae48f6f41e in std::__1::__function::__policy_func<std::__1::unique_ptr<DB::IInterpreter, std::__1::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::operator()[abi:v15007](DB::InterpreterFactory::Arguments const&) const contrib/llvm-project/libcxx/include/__functional/function.h:848:16\r\n    #24 0x58ae48f6f41e in std::__1::function<std::__1::unique_ptr<DB::IInterpreter, std::__1::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::operator()(DB::InterpreterFactory::Arguments const&) const contrib/llvm-project/libcxx/include/__functional/function.h:1197:12\r\n    #25 0x58ae48f6f41e in DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) src/Interpreters/InterpreterFactory.cpp:356:12\r\n    #26 0x58ae4969df52 in DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) src/Interpreters/executeQuery.cpp:1174:62\r\n    #27 0x58ae49697d48 in DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) src/Interpreters/executeQuery.cpp:1404:26\r\n    #28 0x58ae4c5f8d24 in DB::TCPHandler::runImpl() src/Server/TCPHandler.cpp:564:54\r\n    #29 0x58ae4c629268 in DB::TCPHandler::run() src/Server/TCPHandler.cpp:2484:9\r\n    #30 0x58ae54258b2e in Poco::Net::TCPServerConnection::start() base/poco/Net/src/TCPServerConnection.cpp:43:3\r\n    #31 0x58ae54259736 in Poco::Net::TCPServerDispatcher::run() base/poco/Net/src/TCPServerDispatcher.cpp:115:38\r\n```\r\n\n",
  "hints_text": "Affects both lowerUTF8 and upperUTF8. https://github.com/ClickHouse/ClickHouse/pull/68822 seems to be the cause (it does not happen with an asan build from 2024-08-25 20:23:43 +0000).\r\n\r\nFix seems pretty simple: We should make sure to call `ucasemap_exit` in all cases (via AT_EXIT or similar) in the function.\nA local asan build did not complain for me. Anyways, I pushed a fix - it would be nice if @PedroTadim could check if it helps, thanks!\n> A local asan build did not complain for me. Anyways, I pushed a fix - it would be nice if @PedroTadim could check if it helps, thanks!\r\n\r\nIt complains at the exit of the process, so it's easier to test with clickhouse local. It triggers with master:\r\n```\r\nclickhouse  local --query \"SELECT lowerUTF8('ESPA\u00d1A')\"\r\n```\nAh, this reproduced it for me, thanks.",
  "created_at": "2024-09-06T15:57:24Z"
}