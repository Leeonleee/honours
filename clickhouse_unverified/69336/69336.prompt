You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Memory leak on lowerUTF8 function
**Company or project name**

Clickhouse employee

**Describe what's wrong**

Running a `lowerUTF8` function call reports a memory leak when the server shuts down.

**Does it reproduce on the most recent release?**

Yes

**How to reproduce**

Compile Clickhouse with ASAN and run:
```sql
SELECT lowerUTF8('ESPAÃ‘A');
```
Then shut down the server.

**Expected behavior**

No memory leak should happen.

**Error message and/or stacktrace**

Stack trace of the memory leak:
```
Direct leak of 48 byte(s) in 1 object(s) allocated from:
    #0 0x58ae2b640083 in malloc (clickhouse+0xe5eb083) (BuildId: dc0c7fe3a11b409905aa576ded0b5ffb4b979855)
    #1 0x58ae4ec025aa in icu_75::UMemory::operator new(unsigned long) contrib/icu/icu4c/source/common/uobject.cpp:62:12
    #2 0x58ae4eccc36d in ucasemap_open_75 contrib/icu/icu4c/source/common/ucasemap.cpp:68:21
    #3 0x58ae34b333ba in DB::LowerUpperUTF8Impl<(char)65, (char)90, false>::vector(DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul> const&, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul>&, unsigned long) src/Functions/LowerUpperUTF8Impl.h:48:31
    #4 0x58ae34b31eb5 in DB::FunctionStringToString<DB::LowerUpperUTF8Impl<(char)65, (char)90, false>, DB::(anonymous namespace)::NameLowerUTF8, false>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const src/Functions/FunctionStringToString.h:68:13
    #5 0x58ae2b6872d4 in DB::IFunction::executeImplDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const src/Functions/IFunction.h:448:16
    #6 0x58ae2b6c1f34 in DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const src/Functions/IFunctionAdaptors.h:28:26
    #7 0x58ae2d70c1ba in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:245:15
    #8 0x58ae2d70b50c in DB::IExecutableFunction::defaultImplementationForConstantArguments(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:159:31
    #9 0x58ae2d70c0e4 in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:237:20
    #10 0x58ae2d70e34e in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:303:22
    #11 0x58ae2d711424 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const src/Functions/IFunction.cpp:380:16
    #12 0x58ae47fdb9e5 in DB::QueryAnalyzer::resolveFunction(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) src/Analyzer/Resolve/QueryAnalyzer.cpp:3449:47
    #13 0x58ae47fab5f5 in DB::QueryAnalyzer::resolveExpressionNode(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) src/Analyzer/Resolve/QueryAnalyzer.cpp:3749:46
    #14 0x58ae47fa9dac in DB::QueryAnalyzer::resolveExpressionNodeList(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) src/Analyzer/Resolve/QueryAnalyzer.cpp:3907:49
    #15 0x58ae47ff4768 in DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) src/Analyzer/Resolve/QueryAnalyzer.cpp:4155:40
    #16 0x58ae47f9f1cc in DB::QueryAnalyzer::resolveQuery(std::__1::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) src/Analyzer/Resolve/QueryAnalyzer.cpp:5419:30
    #17 0x58ae47f9d203 in DB::QueryAnalyzer::resolve(std::__1::shared_ptr<DB::IQueryTreeNode>&, std::__1::shared_ptr<DB::IQueryTreeNode> const&, std::__1::shared_ptr<DB::Context const>) src/Analyzer/Resolve/QueryAnalyzer.cpp:139:13
    #18 0x58ae47f9c0eb in DB::QueryAnalysisPass::run(std::__1::shared_ptr<DB::IQueryTreeNode>&, std::__1::shared_ptr<DB::Context const>) src/Analyzer/Resolve/QueryAnalysisPass.cpp:18:14
    #19 0x58ae48e630cb in DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>) src/Analyzer/QueryTreePassManager.cpp:185:20
    #20 0x58ae4906ee12 in DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context const> const&, std::__1::shared_ptr<DB::IStorage> const&) src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:142:33
    #21 0x58ae4906ab2e in DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:160:18
    #22 0x58ae490718f5 in std::__1::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::__1::make_unique[abi:v15007]<DB::InterpreterSelectQueryAnalyzer, std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714:32
    #23 0x58ae48f6f41e in std::__1::__function::__policy_func<std::__1::unique_ptr<DB::IInterpreter, std::__1::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::operator()[abi:v15007](DB::InterpreterFactory::Arguments const&) const contrib/llvm-project/libcxx/include/__functional/function.h:848:16
    #24 0x58ae48f6f41e in std::__1::function<std::__1::unique_ptr<DB::IInterpreter, std::__1::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::operator()(DB::InterpreterFactory::Arguments const&) const contrib/llvm-project/libcxx/include/__functional/function.h:1197:12
    #25 0x58ae48f6f41e in DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) src/Interpreters/InterpreterFactory.cpp:356:12
    #26 0x58ae4969df52 in DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) src/Interpreters/executeQuery.cpp:1174:62
    #27 0x58ae49697d48 in DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) src/Interpreters/executeQuery.cpp:1404:26
    #28 0x58ae4c5f8d24 in DB::TCPHandler::runImpl() src/Server/TCPHandler.cpp:564:54
    #29 0x58ae4c629268 in DB::TCPHandler::run() src/Server/TCPHandler.cpp:2484:9
    #30 0x58ae54258b2e in Poco::Net::TCPServerConnection::start() base/poco/Net/src/TCPServerConnection.cpp:43:3
    #31 0x58ae54259736 in Poco::Net::TCPServerDispatcher::run() base/poco/Net/src/TCPServerDispatcher.cpp:115:38
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
