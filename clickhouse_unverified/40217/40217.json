{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40217,
  "instance_id": "ClickHouse__ClickHouse-40217",
  "issue_numbers": [
    "39249"
  ],
  "base_commit": "7d1e3ecfa35edf23bae83081b4385f994697b6ab",
  "patch": "diff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md\nindex d54028582c54..2c1fcd05bf7d 100644\n--- a/docs/en/sql-reference/functions/date-time-functions.md\n+++ b/docs/en/sql-reference/functions/date-time-functions.md\n@@ -266,8 +266,14 @@ Result:\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-:::note\n-The return type `toStartOf*` functions described below is `Date` or `DateTime`. Though these functions can take `DateTime64` as an argument, passing them a `DateTime64` that is out of the normal range (years 1900 - 2299) will give an incorrect result.\n+:::Attention\n+The return type of `toStartOf*`, `toLastDayOfMonth`, `toMonday` functions described below is `Date` or `DateTime`.\n+Though these functions can take values of the extended types `Date32` and `DateTime64` as an argument, passing them a time outside the normal range (year 1970 to 2149 for `Date` / 2106 for `DateTime`) will produce wrong results.\n+In case argument is out of normal range:\n+  * If the argument is smaller than 1970, the result will be calculated from the argument `1970-01-01 (00:00:00)` instead.\n+  * If the return type is `DateTime` and the argument is larger than `2106-02-07 08:28:15`, the result will be calculated from the argument `2106-02-07 08:28:15` instead.\n+  * If the return type is `Date` and the argument is larger than `2149-06-06`, the result will be calculated from the argument `2149-06-06` instead.\n+  *  If `toLastDayOfMonth` is called with an argument greater then `2149-05-31`, the result will be calculated from the argument `2149-05-31` instead.\n :::\n \n ## toStartOfYear\n@@ -291,20 +297,23 @@ Returns the date.\n Rounds down a date or date with time to the first day of the month.\n Returns the date.\n \n-:::note\n-The behavior of parsing incorrect dates is implementation specific. ClickHouse may return zero date, throw an exception or do \u201cnatural\u201d overflow.\n-:::\n+## toLastDayOfMonth\n+\n+Rounds up a date or date with time to the last day of the month.\n+Returns the date.\n \n ## toMonday\n \n Rounds down a date or date with time to the nearest Monday.\n+As a special case, date arguments `1970-01-01`, `1970-01-02`, `1970-01-03` and `1970-01-04` return date `1970-01-01`.\n Returns the date.\n \n ## toStartOfWeek(t\\[,mode\\])\n \n Rounds down a date or date with time to the nearest Sunday or Monday by mode.\n Returns the date.\n-The mode argument works exactly like the mode argument to toWeek(). For the single-argument syntax, a mode value of 0 is used.\n+As a special case, date arguments `1970-01-01`, `1970-01-02`, `1970-01-03` and `1970-01-04` (and `1970-01-05` if `mode` is `1`) return date `1970-01-01`.\n+The `mode` argument works exactly like the mode argument to toWeek(). For the single-argument syntax, a mode value of 0 is used.\n \n ## toStartOfDay\n \n@@ -1039,7 +1048,7 @@ Example:\n SELECT timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600));\n SELECT timeSlots(toDateTime('1980-12-12 21:01:02', 'UTC'), toUInt32(600), 299);\n SELECT timeSlots(toDateTime64('1980-12-12 21:01:02.1234', 4, 'UTC'), toDecimal64(600.1, 1), toDecimal64(299, 0));\n-``` \n+```\n ``` text\n \u250c\u2500timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600))\u2500\u2510\n \u2502 ['2012-01-01 12:00:00','2012-01-01 12:30:00']               \u2502\ndiff --git a/docs/ru/sql-reference/data-types/date.md b/docs/ru/sql-reference/data-types/date.md\nindex 46f73bc8cb7c..c4088102ac3e 100644\n--- a/docs/ru/sql-reference/data-types/date.md\n+++ b/docs/ru/sql-reference/data-types/date.md\n@@ -5,7 +5,7 @@ sidebar_label: Date\n \n # Date {#data-type-date}\n \n-\u0414\u0430\u0442\u0430. \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0434\u0432\u0443\u0445 \u0431\u0430\u0439\u0442\u0430\u0445 \u0432 \u0432\u0438\u0434\u0435 (\u0431\u0435\u0437\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e) \u0447\u0438\u0441\u043b\u0430 \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043e\u0442 1970-01-01. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u0430 unix-\u044d\u043f\u043e\u0445\u0438 \u0434\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u043f\u043e\u0440\u043e\u0433\u0430, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043e\u0439 \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 (\u0441\u0435\u0439\u0447\u0430\u0441 - \u0434\u043e 2106 \u0433\u043e\u0434\u0430, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0433\u043e\u0434 - 2105).\n+\u0414\u0430\u0442\u0430. \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0434\u0432\u0443\u0445 \u0431\u0430\u0439\u0442\u0430\u0445 \u0432 \u0432\u0438\u0434\u0435 (\u0431\u0435\u0437\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e) \u0447\u0438\u0441\u043b\u0430 \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043e\u0442 1970-01-01. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u0430 unix-\u044d\u043f\u043e\u0445\u0438 \u0434\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u043f\u043e\u0440\u043e\u0433\u0430, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043e\u0439 \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 (\u0441\u0435\u0439\u0447\u0430\u0441 - \u0434\u043e 2149 \u0433\u043e\u0434\u0430, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0433\u043e\u0434 - 2148).\n \n \u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: \\[1970-01-01, 2149-06-06\\].\n \ndiff --git a/docs/ru/sql-reference/functions/date-time-functions.md b/docs/ru/sql-reference/functions/date-time-functions.md\nindex 2c033a9bba2f..dbd4151f31e9 100644\n--- a/docs/ru/sql-reference/functions/date-time-functions.md\n+++ b/docs/ru/sql-reference/functions/date-time-functions.md\n@@ -266,10 +266,25 @@ SELECT toUnixTimestamp('2017-11-05 08:07:47', 'Asia/Tokyo') AS unix_timestamp;\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-:::note \"Attention\"\n-    `Date` \u0438\u043b\u0438 `DateTime` \u044d\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 `toStartOf*`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0438\u0441\u0430\u043d \u043d\u0438\u0436\u0435. \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u044d\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c `DateTime64` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 `DateTime64` \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u044b \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 (\u0441 1900 \u043f\u043e 2299 \u0433\u043e\u0434), \u0442\u043e \u044d\u0442\u043e \u0434\u0430\u0441\u0442 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n+:::Attention\n+\u0422\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043b\u0435\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 `toStartOf*`, `toMonday` \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - `Date` \u0438\u043b\u0438 `DateTime`.\n+\u0425\u043e\u0442\u044f \u044d\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 `Date32` \u0438\u043b\u0438 `DateTime64` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0432\u043d\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (`1970` - `2148` \u0434\u043b\u044f `Date` \u0438 `1970-01-01 00:00:00`-`2106-02-07 08:28:15` \u0434\u043b\u044f `DateTime`) \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n+\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u043d\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430:\n+* `1970-01-01 (00:00:00)` \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0451\u043d \u0434\u043b\u044f \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0434\u043e 1970 \u0433\u043e\u0434\u0430,\n+* `2106-02-07 08:28:15` \u0431\u0443\u0434\u0435\u0442 \u0432\u0437\u044f\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 \u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f - `DateTime`,\n+* `2149-06-06` \u0431\u0443\u0434\u0435\u0442 \u0432\u0437\u044f\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 \u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f - `Date`,\n+* `2149-05-31` \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `toLastDayOfMonth` \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 `2149-05-31`.\n :::\n \n+:::Attention\n+\u0422\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043b\u0435\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 `toStartOf*`, `toLastDayOfMonth`, `toMonday` \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - `Date` \u0438\u043b\u0438 `DateTime`.\n+\u0425\u043e\u0442\u044f \u044d\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 `Date32` \u0438\u043b\u0438 `DateTime64` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0432\u043d\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (`1970` - `2148` \u0434\u043b\u044f `Date` \u0438 `1970-01-01 00:00:00`-`2106-02-07 08:28:15` \u0434\u043b\u044f `DateTime`) \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n+\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u043d\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430:\n+* `1970-01-01 (00:00:00)` \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0451\u043d \u0434\u043b\u044f \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0434\u043e 1970 \u0433\u043e\u0434\u0430,\n+* `2106-02-07 08:28:15` \u0431\u0443\u0434\u0435\u0442 \u0432\u0437\u044f\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 \u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f - `DateTime`,\n+* `2149-06-06` \u0431\u0443\u0434\u0435\u0442 \u0432\u0437\u044f\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 \u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f - `Date`.\n+  :::\n+*\n ## toStartOfYear {#tostartofyear}\n \n \u041e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442 \u0434\u0430\u0442\u0443 \u0438\u043b\u0438 \u0434\u0430\u0442\u0443-\u0441-\u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0432\u043d\u0438\u0437 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0434\u043d\u044f \u0433\u043e\u0434\u0430.\n@@ -303,20 +318,23 @@ SELECT toStartOfISOYear(toDate('2017-01-01')) AS ISOYear20170101;\n \u041e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442 \u0434\u0430\u0442\u0443 \u0438\u043b\u0438 \u0434\u0430\u0442\u0443-\u0441-\u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0432\u043d\u0438\u0437 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0434\u043d\u044f \u043c\u0435\u0441\u044f\u0446\u0430.\n \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430.\n \n-:::note \"Attention\"\n-    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0434\u0430\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. ClickHouse \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043d\u0443\u043b\u0435\u0432\u0443\u044e \u0434\u0430\u0442\u0443, \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0438\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u00ab\u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435\u00bb \u043f\u0435\u0440\u0435\u0442\u0435\u043a\u0430\u043d\u0438\u0435 \u0434\u0430\u0442 \u043c\u0435\u0436\u0434\u0443 \u043c\u0435\u0441\u044f\u0446\u0430\u043c\u0438.\n-:::\n-    \n+## toLastDayOfMonth\n+\n+\u041e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442 \u0434\u0430\u0442\u0443 \u0438\u043b\u0438 \u0434\u0430\u0442\u0443-\u0441-\u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0434\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043c\u0435\u0441\u044f\u0446\u0430.\n+\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430.\n+\n ## toMonday {#tomonday}\n \n \u041e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442 \u0434\u0430\u0442\u0443 \u0438\u043b\u0438 \u0434\u0430\u0442\u0443-\u0441-\u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0432\u043d\u0438\u0437 \u0434\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a\u0430.\n+\u0427\u0430\u0441\u0442\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439: \u0434\u043b\u044f \u0434\u0430\u0442 `1970-01-01`, `1970-01-02`, `1970-01-03` \u0438 `1970-01-04` \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0431\u0443\u0434\u0435\u0442 `1970-01-01`.\n \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430.\n \n ## toStartOfWeek(t[,mode]) {#tostartofweek}\n \n \u041e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442 \u0434\u0430\u0442\u0443 \u0438\u043b\u0438 \u0434\u0430\u0442\u0443 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0434\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0433\u043e \u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u044f \u0438\u043b\u0438 \u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 mode.\n \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430.\n-\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 mode \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 mode [toWeek()](#toweek). \u0415\u0441\u043b\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 mode \u043e\u043f\u0443\u0449\u0435\u043d, \u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0436\u0438\u043c 0.\n+\u0427\u0430\u0441\u0442\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439: \u0434\u043b\u044f \u0434\u0430\u0442 `1970-01-01`, `1970-01-02`, `1970-01-03` \u0438 `1970-01-04` (\u0438 `1970-01-05`, \u0435\u0441\u043b\u0438 `mode` \u0440\u0430\u0432\u0435\u043d `1`) \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0431\u0443\u0434\u0435\u0442 `1970-01-01`.\n+\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 `mode` \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 mode [toWeek()](#toweek). \u0415\u0441\u043b\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 mode \u043e\u043f\u0443\u0449\u0435\u043d, \u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0436\u0438\u043c 0.\n \n ## toStartOfDay {#tostartofday}\n \n@@ -957,7 +975,7 @@ SELECT now('Europe/Moscow');\n \n ## timeSlots(StartTime, Duration,\\[, Size\\]) {#timeslotsstarttime-duration-size}\n \u0414\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0432 `StartTime` \u0438 \u0434\u043b\u044f\u0449\u0435\u0433\u043e\u0441\u044f `Duration` \u0441\u0435\u043a\u0443\u043d\u0434, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u0440\u0430\u0442\u043d\u044b\u0445 `Size`. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `Size` \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u043d \u0440\u0430\u0432\u0435\u043d 1800 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u043c (30 \u043c\u0438\u043d\u0443\u0442\u0430\u043c) - \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440.\n-\u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0437\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e. \n+\u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0437\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e.\n \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 `StartTime` \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0442\u0438\u043f `DateTime` \u0438\u043b\u0438 `DateTime64`. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f `DateTime`, \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b `Duration` \u0438 `Size` \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0442\u0438\u043f `UInt32`; \u0414\u043b\u044f DateTime64 \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0442\u0438\u043f\u0430 `Decimal64`.  \n \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 DateTime/DateTime64 (\u0442\u0438\u043f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u0442\u0438\u043f\u043e\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u2019StartTime\u2019). \u0414\u043b\u044f DateTime64 \u043c\u0430\u0441\u0448\u0442\u0430\u0431(scale) \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430 \u0444\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u2019StartTime\u2019 --- \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043c\u0430\u0441\u0448\u0442\u0430\u0431 \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n \ndiff --git a/docs/zh/sql-reference/data-types/date.md b/docs/zh/sql-reference/data-types/date.md\nindex ab5d3acae1bf..35d0299bb374 100644\n--- a/docs/zh/sql-reference/data-types/date.md\n+++ b/docs/zh/sql-reference/data-types/date.md\n@@ -1,6 +1,6 @@\n # \u65e5\u671f {#date}\n \n-\u65e5\u671f\u7c7b\u578b\uff0c\u7528\u4e24\u4e2a\u5b57\u8282\u5b58\u50a8\uff0c\u8868\u793a\u4ece 1970-01-01 (\u65e0\u7b26\u53f7) \u5230\u5f53\u524d\u7684\u65e5\u671f\u503c\u3002\u5141\u8bb8\u5b58\u50a8\u4ece Unix \u7eaa\u5143\u5f00\u59cb\u5230\u7f16\u8bd1\u9636\u6bb5\u5b9a\u4e49\u7684\u4e0a\u9650\u9608\u503c\u5e38\u91cf\uff08\u76ee\u524d\u4e0a\u9650\u662f2106\u5e74\uff0c\u4f46\u6700\u7ec8\u5b8c\u5168\u652f\u6301\u7684\u5e74\u4efd\u4e3a2105\uff09\u3002\u6700\u5c0f\u503c\u8f93\u51fa\u4e3a1970-01-01\u3002\n+\u65e5\u671f\u7c7b\u578b\uff0c\u7528\u4e24\u4e2a\u5b57\u8282\u5b58\u50a8\uff0c\u8868\u793a\u4ece 1970-01-01 (\u65e0\u7b26\u53f7) \u5230\u5f53\u524d\u7684\u65e5\u671f\u503c\u3002\u5141\u8bb8\u5b58\u50a8\u4ece Unix \u7eaa\u5143\u5f00\u59cb\u5230\u7f16\u8bd1\u9636\u6bb5\u5b9a\u4e49\u7684\u4e0a\u9650\u9608\u503c\u5e38\u91cf\uff08\u76ee\u524d\u4e0a\u9650\u662f2149\u5e74\uff0c\u4f46\u6700\u7ec8\u5b8c\u5168\u652f\u6301\u7684\u5e74\u4efd\u4e3a2148\uff09\u3002\u6700\u5c0f\u503c\u8f93\u51fa\u4e3a1970-01-01\u3002\n \n \u503c\u7684\u8303\u56f4: \\[1970-01-01, 2149-06-06\\]\u3002\n \ndiff --git a/src/Functions/CustomWeekTransforms.h b/src/Functions/CustomWeekTransforms.h\nindex c296c8228b13..3378aec02d5b 100644\n--- a/src/Functions/CustomWeekTransforms.h\n+++ b/src/Functions/CustomWeekTransforms.h\n@@ -62,7 +62,10 @@ struct ToStartOfWeekImpl\n \n     static inline UInt16 execute(Int64 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t), week_mode);\n+        if (t < 0)\n+            return 0;\n+\n+        return time_zone.toFirstDayNumOfWeek(DayNum(std::min(Int32(time_zone.toDayNum(t)), Int32(DATE_LUT_MAX_DAY_NUM))), week_mode);\n     }\n     static inline UInt16 execute(UInt32 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n@@ -70,7 +73,10 @@ struct ToStartOfWeekImpl\n     }\n     static inline UInt16 execute(Int32 d, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfWeek(ExtendedDayNum(d), week_mode);\n+        if (d < 0)\n+            return 0;\n+\n+        return time_zone.toFirstDayNumOfWeek(DayNum(std::min(d, Int32(DATE_LUT_MAX_DAY_NUM))), week_mode);\n     }\n     static inline UInt16 execute(UInt16 d, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\ndiff --git a/src/Functions/DateTimeTransforms.h b/src/Functions/DateTimeTransforms.h\nindex 065f08296d0d..66d57f2463f6 100644\n--- a/src/Functions/DateTimeTransforms.h\n+++ b/src/Functions/DateTimeTransforms.h\n@@ -61,15 +61,15 @@ struct ToDateImpl\n \n     static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return UInt16(time_zone.toDayNum(t));\n+        return t < 0 ? 0 : std::min(Int32(time_zone.toDayNum(t)), Int32(DATE_LUT_MAX_DAY_NUM));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n-        return UInt16(time_zone.toDayNum(t));\n+        return time_zone.toDayNum(t);\n     }\n-    static inline UInt16 execute(Int32, const DateLUTImpl &)\n+    static inline UInt16 execute(Int32 t, const DateLUTImpl &)\n     {\n-        return dateIsNotSupported(name);\n+        return t < 0 ? 0 : std::min(t, Int32(DATE_LUT_MAX_DAY_NUM));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl &)\n     {\n@@ -111,7 +111,10 @@ struct ToStartOfDayImpl\n     //TODO: right now it is hardcoded to produce DateTime only, needs fixing later. See date_and_time_type_details::ResultDataTypeMap for deduction of result type example.\n     static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toDate(static_cast<time_t>(t.whole));\n+        if (t.whole < 0 || (t.whole >= 0 && t.fractional < 0))\n+            return 0;\n+\n+        return time_zone.toDate(std::min<Int64>(t.whole, Int64(0xffffffff)));\n     }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n@@ -119,11 +122,19 @@ struct ToStartOfDayImpl\n     }\n     static inline UInt32 execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toDate(ExtendedDayNum(d));\n+        if (d < 0)\n+            return 0;\n+\n+        auto date_time = time_zone.fromDayNum(ExtendedDayNum(d));\n+        if (date_time <= 0xffffffff)\n+            return date_time;\n+        else\n+            return time_zone.toDate(0xffffffff);\n     }\n     static inline UInt32 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toDate(DayNum(d));\n+        auto date_time = time_zone.fromDayNum(ExtendedDayNum(d));\n+        return date_time < 0xffffffff ? date_time : time_zone.toDate(0xffffffff);\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -135,17 +146,16 @@ struct ToMondayImpl\n \n     static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        //return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t));\n-        return time_zone.toFirstDayNumOfWeek(t);\n+        return t < 0 ? 0 : time_zone.toFirstDayNumOfWeek(ExtendedDayNum(\n+                   std::min(Int32(time_zone.toDayNum(t)), Int32(DATE_LUT_MAX_DAY_NUM))));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n-        //return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t));\n         return time_zone.toFirstDayNumOfWeek(t);\n     }\n     static inline UInt16 execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfWeek(ExtendedDayNum(d));\n+        return d < 0 ? 0 : time_zone.toFirstDayNumOfWeek(ExtendedDayNum(std::min(d, Int32(DATE_LUT_MAX_DAY_NUM))));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n@@ -161,15 +171,15 @@ struct ToStartOfMonthImpl\n \n     static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfMonth(time_zone.toDayNum(t));\n+        return t < 0 ? 0 : time_zone.toFirstDayNumOfMonth(ExtendedDayNum(std::min(Int32(time_zone.toDayNum(t)), Int32(DATE_LUT_MAX_DAY_NUM))));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfMonth(time_zone.toDayNum(t));\n+        return time_zone.toFirstDayNumOfMonth(ExtendedDayNum(time_zone.toDayNum(t)));\n     }\n     static inline UInt16 execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfMonth(ExtendedDayNum(d));\n+        return d < 0 ? 0 : time_zone.toFirstDayNumOfMonth(ExtendedDayNum(std::min(d, Int32(DATE_LUT_MAX_DAY_NUM))));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n@@ -185,7 +195,11 @@ struct ToLastDayOfMonthImpl\n \n     static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toLastDayNumOfMonth(time_zone.toDayNum(t));\n+        if (t < 0)\n+            return 0;\n+\n+        /// 0xFFF9 is Int value for 2149-05-31 -- the last day where we can actually find LastDayOfMonth. This will also be the return value.\n+        return time_zone.toLastDayNumOfMonth(ExtendedDayNum(std::min(Int32(time_zone.toDayNum(t)), Int32(0xFFF9))));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n@@ -193,11 +207,16 @@ struct ToLastDayOfMonthImpl\n     }\n     static inline UInt16 execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toLastDayNumOfMonth(ExtendedDayNum(d));\n+        if (d < 0)\n+            return 0;\n+\n+        /// 0xFFF9 is Int value for 2149-05-31 -- the last day where we can actually find LastDayOfMonth. This will also be the return value.\n+        return time_zone.toLastDayNumOfMonth(ExtendedDayNum(std::min(d, Int32(0xFFF9))));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toLastDayNumOfMonth(DayNum(d));\n+        /// 0xFFF9 is Int value for 2149-05-31 -- the last day where we can actually find LastDayOfMonth. This will also be the return value.\n+        return time_zone.toLastDayNumOfMonth(DayNum(std::min(d, UInt16(0xFFF9))));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -209,7 +228,7 @@ struct ToStartOfQuarterImpl\n \n     static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfQuarter(time_zone.toDayNum(t));\n+        return t < 0 ? 0 : time_zone.toFirstDayNumOfQuarter(ExtendedDayNum(std::min<Int64>(Int64(time_zone.toDayNum(t)), Int64(DATE_LUT_MAX_DAY_NUM))));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n@@ -217,7 +236,7 @@ struct ToStartOfQuarterImpl\n     }\n     static inline UInt16 execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfQuarter(ExtendedDayNum(d));\n+        return d < 0 ? 0 : time_zone.toFirstDayNumOfQuarter(ExtendedDayNum(std::min<Int32>(d, Int32(DATE_LUT_MAX_DAY_NUM))));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n@@ -233,7 +252,7 @@ struct ToStartOfYearImpl\n \n     static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfYear(time_zone.toDayNum(t));\n+        return t < 0 ? 0 : time_zone.toFirstDayNumOfYear(ExtendedDayNum(std::min(Int32(time_zone.toDayNum(t)), Int32(DATE_LUT_MAX_DAY_NUM))));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n@@ -241,7 +260,7 @@ struct ToStartOfYearImpl\n     }\n     static inline UInt16 execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfYear(ExtendedDayNum(d));\n+        return d < 0 ? 0 : time_zone.toFirstDayNumOfYear(ExtendedDayNum(std::min(d, Int32(DATE_LUT_MAX_DAY_NUM))));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n@@ -283,7 +302,10 @@ struct ToStartOfMinuteImpl\n \n     static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toStartOfMinute(t.whole);\n+        if (t.whole < 0 || (t.whole >= 0 && t.fractional < 0))\n+            return 0;\n+\n+        return time_zone.toStartOfMinute(std::min<Int64>(t.whole, Int64(0xffffffff)));\n     }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n@@ -574,7 +596,10 @@ struct ToStartOfHourImpl\n \n     static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toStartOfHour(t.whole);\n+        if (t.whole < 0 || (t.whole >= 0 && t.fractional < 0))\n+            return 0;\n+\n+        return time_zone.toStartOfHour(std::min<Int64>(t.whole, Int64(0xffffffff)));\n     }\n \n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\ndiff --git a/src/Functions/FunctionCustomWeekToSomething.h b/src/Functions/FunctionCustomWeekToSomething.h\nindex 6ed751fd8892..8a0f474a7e87 100644\n--- a/src/Functions/FunctionCustomWeekToSomething.h\n+++ b/src/Functions/FunctionCustomWeekToSomething.h\n@@ -41,23 +41,20 @@ class FunctionCustomWeekToSomething : public IFunction\n             if (!isDate(arguments[0].type) && !isDate32(arguments[0].type) && !isDateTime(arguments[0].type) && !isDateTime64(arguments[0].type))\n                 throw Exception(\n                     \"Illegal type \" + arguments[0].type->getName() + \" of argument of function \" + getName()\n-                        + \". Should be a date or a date with time\",\n+                        + \". Must be Date, Date32, DateTime or DateTime64.\",\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n         }\n         else if (arguments.size() == 2)\n         {\n             if (!isDate(arguments[0].type) && !isDate32(arguments[0].type) && !isDateTime(arguments[0].type) && !isDateTime64(arguments[0].type))\n                 throw Exception(\n-                    \"Illegal type \" + arguments[0].type->getName() + \" of argument of function \" + getName()\n-                        + \". Should be a date or a date with time\",\n+                    \"Illegal type \" + arguments[0].type->getName() + \" of 1st argument of function \" + getName()\n+                        + \". Must be Date, Date32, DateTime or DateTime64.\",\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n             if (!isUInt8(arguments[1].type))\n                 throw Exception(\n-                    \"Function \" + getName()\n-                        + \" supports 1 or 2 or 3 arguments. The 1st argument \"\n-                          \"must be of type Date or DateTime. The 2nd argument (optional) must be \"\n-                          \"a constant UInt8 with week mode. The 3rd argument (optional) must be \"\n-                          \"a constant string with timezone name\",\n+                    \"Illegal type of 2nd (optional) argument of function \" + getName()\n+                        + \". Must be constant UInt8 (week mode).\",\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n         }\n         else if (arguments.size() == 3)\n@@ -65,33 +62,28 @@ class FunctionCustomWeekToSomething : public IFunction\n             if (!isDate(arguments[0].type) && !isDate32(arguments[0].type) && !isDateTime(arguments[0].type) && !isDateTime64(arguments[0].type))\n                 throw Exception(\n                     \"Illegal type \" + arguments[0].type->getName() + \" of argument of function \" + getName()\n-                        + \". Should be a date or a date with time\",\n+                        + \". Must be Date, Date32, DateTime or DateTime64\",\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n             if (!isUInt8(arguments[1].type))\n                 throw Exception(\n-                    \"Function \" + getName()\n-                        + \" supports 1 or 2 or 3 arguments. The 1st argument \"\n-                          \"must be of type Date or DateTime. The 2nd argument (optional) must be \"\n-                          \"a constant UInt8 with week mode. The 3rd argument (optional) must be \"\n-                          \"a constant string with timezone name\",\n+                    \"Illegal type of 2nd (optional) argument of function \" + getName()\n+                        + \". Must be constant UInt8 (week mode).\",\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n             if (!isString(arguments[2].type))\n                 throw Exception(\n-                    \"Function \" + getName()\n-                        + \" supports 1 or 2 or 3 arguments. The 1st argument \"\n-                          \"must be of type Date or DateTime. The 2nd argument (optional) must be \"\n-                          \"a constant UInt8 with week mode. The 3rd argument (optional) must be \"\n-                          \"a constant string with timezone name\",\n+                    \"Illegal type of 3rd (optional) argument of function \" + getName()\n+                        + \". Must be constant string (timezone name).\",\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n-            if (isDate(arguments[0].type) && std::is_same_v<ToDataType, DataTypeDate>)\n+            if ((isDate(arguments[0].type) || isDate32(arguments[0].type))\n+                && (std::is_same_v<ToDataType, DataTypeDate> || std::is_same_v<ToDataType, DataTypeDate32>))\n                 throw Exception(\n-                    \"The timezone argument of function \" + getName() + \" is allowed only when the 1st argument has the type DateTime\",\n+                    \"The timezone argument of function \" + getName() + \" is allowed only when the 1st argument is DateTime or DateTime64.\",\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n         }\n         else\n             throw Exception(\n                 \"Number of arguments for function \" + getName() + \" doesn't match: passed \" + toString(arguments.size())\n-                    + \", should be 1 or 2 or 3\",\n+                    + \", expected 1, 2 or 3.\",\n                 ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n \n         return std::make_shared<ToDataType>();\ndiff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex 231ec188ade8..96c28b21ef05 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -301,6 +301,11 @@ struct ConvertImpl\n     }\n };\n \n+/** Conversion of Date32 to Date: check bounds.\n+  */\n+template <typename Name> struct ConvertImpl<DataTypeDate32, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n+    : DateTimeTransformImpl<DataTypeDate32, DataTypeDate, ToDateImpl> {};\n+\n /** Conversion of DateTime to Date: throw off time component.\n   */\n template <typename Name> struct ConvertImpl<DataTypeDateTime, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n@@ -319,12 +324,17 @@ struct ToDateTimeImpl\n \n     static inline UInt32 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.fromDayNum(DayNum(d));\n+        auto date_time = time_zone.fromDayNum(ExtendedDayNum(d));\n+        return date_time <= 0xffffffff ? UInt32(date_time) : UInt32(0xffffffff);\n     }\n \n-    static inline Int64 execute(Int32 d, const DateLUTImpl & time_zone)\n+    static inline UInt32 execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.fromDayNum(ExtendedDayNum(d));\n+        if (d < 0)\n+            return 0;\n+\n+        auto date_time = time_zone.fromDayNum(ExtendedDayNum(d));\n+        return date_time <= 0xffffffff ? date_time : 0xffffffff;\n     }\n \n     static inline UInt32 execute(UInt32 dt, const DateLUTImpl & /*time_zone*/)\n@@ -332,10 +342,21 @@ struct ToDateTimeImpl\n         return dt;\n     }\n \n-    // TODO: return UInt32 ???\n-    static inline Int64 execute(Int64 dt64, const DateLUTImpl & /*time_zone*/)\n+    static inline UInt32 execute(Int64 d, const DateLUTImpl & time_zone)\n+    {\n+        if (d < 0)\n+            return 0;\n+\n+        auto date_time = time_zone.toDate(d);\n+        return date_time <= 0xffffffff ? date_time : 0xffffffff;\n+    }\n+\n+    static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & /*time_zone*/)\n     {\n-        return dt64;\n+        if (t.whole < 0 || (t.whole >= 0 && t.fractional < 0))\n+            return 0;\n+\n+        return std::min<Int64>(t.whole, Int64(0xFFFFFFFF));\n     }\n };\n \n@@ -355,9 +376,12 @@ struct ToDateTransform32Or64\n     static inline NO_SANITIZE_UNDEFINED ToType execute(const FromType & from, const DateLUTImpl & time_zone)\n     {\n         // since converting to Date, no need in values outside of default LUT range.\n+        if (from < 0)\n+            return 0;\n+\n         return (from < DATE_LUT_MAX_DAY_NUM)\n             ? from\n-            : time_zone.toDayNum(std::min(time_t(from), time_t(0xFFFFFFFF)));\n+            : std::min<Int32>(Int32(time_zone.toDayNum(from)), Int32(DATE_LUT_MAX_DAY_NUM));\n     }\n };\n \n@@ -372,9 +396,14 @@ struct ToDateTransform32Or64Signed\n         /// The function should be monotonic (better for query optimizations), so we saturate instead of overflow.\n         if (from < 0)\n             return 0;\n+\n+        auto day_num = time_zone.toDayNum(ExtendedDayNum(from));\n+        return day_num < DATE_LUT_MAX_DAY_NUM ? day_num : DATE_LUT_MAX_DAY_NUM;\n+\n         return (from < DATE_LUT_MAX_DAY_NUM)\n             ? from\n-            : time_zone.toDayNum(std::min(time_t(from), time_t(0xFFFFFFFF)));\n+            : std::min<Int32>(Int32(time_zone.toDayNum(from)), Int32(0xFFFFFFFF));\n+\n     }\n };\n \n@@ -405,7 +434,7 @@ struct ToDate32Transform32Or64\n     {\n         return (from < DATE_LUT_MAX_EXTEND_DAY_NUM)\n             ? from\n-            : time_zone.toDayNum(std::min(time_t(from), time_t(0xFFFFFFFF)));\n+            : std::min<Int32>(Int32(time_zone.toDayNum(from)), Int32(DATE_LUT_MAX_EXTEND_DAY_NUM));\n     }\n };\n \n@@ -421,7 +450,7 @@ struct ToDate32Transform32Or64Signed\n             return daynum_min_offset;\n         return (from < DATE_LUT_MAX_EXTEND_DAY_NUM)\n             ? from\n-            : time_zone.toDayNum(std::min(time_t(from), time_t(0xFFFFFFFF)));\n+            : time_zone.toDayNum(std::min<Int64>(Int64(from), Int64(0xFFFFFFFF)));\n     }\n };\n \n@@ -447,35 +476,49 @@ struct ToDate32Transform8Or16Signed\n   */\n template <typename Name> struct ConvertImpl<DataTypeUInt32, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeUInt32, DataTypeDate, ToDateTransform32Or64<UInt32, UInt16>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeUInt64, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeUInt64, DataTypeDate, ToDateTransform32Or64<UInt64, UInt16>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeInt8, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeInt8, DataTypeDate, ToDateTransform8Or16Signed<Int8, UInt16>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeInt16, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeInt16, DataTypeDate, ToDateTransform8Or16Signed<Int16, UInt16>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeInt32, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeInt32, DataTypeDate, ToDateTransform32Or64Signed<Int32, UInt16>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeInt64, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeInt64, DataTypeDate, ToDateTransform32Or64Signed<Int64, UInt16>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeFloat32, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeFloat32, DataTypeDate, ToDateTransform32Or64Signed<Float32, UInt16>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeFloat64, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeFloat64, DataTypeDate, ToDateTransform32Or64Signed<Float64, UInt16>> {};\n \n template <typename Name> struct ConvertImpl<DataTypeUInt32, DataTypeDate32, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeUInt32, DataTypeDate32, ToDate32Transform32Or64<UInt32, Int32>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeUInt64, DataTypeDate32, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeUInt64, DataTypeDate32, ToDate32Transform32Or64<UInt64, Int32>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeInt8, DataTypeDate32, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeInt8, DataTypeDate32, ToDate32Transform8Or16Signed<Int8, Int32>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeInt16, DataTypeDate32, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeInt16, DataTypeDate32, ToDate32Transform8Or16Signed<Int16, Int32>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeInt32, DataTypeDate32, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeInt32, DataTypeDate32, ToDate32Transform32Or64Signed<Int32, Int32>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeInt64, DataTypeDate32, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeInt64, DataTypeDate32, ToDate32Transform32Or64Signed<Int64, Int32>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeFloat32, DataTypeDate32, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeFloat32, DataTypeDate32, ToDate32Transform32Or64Signed<Float32, Int32>> {};\n+\n template <typename Name> struct ConvertImpl<DataTypeFloat64, DataTypeDate32, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeFloat64, DataTypeDate32, ToDate32Transform32Or64Signed<Float64, Int32>> {};\n \n@@ -487,7 +530,7 @@ struct ToDateTimeTransform64\n \n     static inline NO_SANITIZE_UNDEFINED ToType execute(const FromType & from, const DateLUTImpl &)\n     {\n-        return std::min(time_t(from), time_t(0xFFFFFFFF));\n+        return std::min<Int64>(Int64(from), Int64(0xFFFFFFFF));\n     }\n };\n \n@@ -509,11 +552,12 @@ struct ToDateTimeTransform64Signed\n {\n     static constexpr auto name = \"toDateTime\";\n \n-    static inline NO_SANITIZE_UNDEFINED ToType execute(const FromType & from, const DateLUTImpl &)\n+    static inline NO_SANITIZE_UNDEFINED ToType execute(const FromType & from, const DateLUTImpl & /* time_zone */)\n     {\n         if (from < 0)\n             return 0;\n-        return std::min(time_t(from), time_t(0xFFFFFFFF));\n+\n+        return std::min<Int64>(Int64(from), Int64(0xFFFFFFFF));\n     }\n };\n \n@@ -634,8 +678,6 @@ struct FromDateTime64Transform\n     }\n };\n \n-/** Conversion of DateTime64 to Date or DateTime: discards fractional part.\n- */\n template <typename Name> struct ConvertImpl<DataTypeDateTime64, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n     : DateTimeTransformImpl<DataTypeDateTime64, DataTypeDate, TransformDateTime64<ToDateImpl>> {};\n template <typename Name> struct ConvertImpl<DataTypeDateTime64, DataTypeDateTime, Name, ConvertDefaultBehaviorTag>\n@@ -659,7 +701,7 @@ struct ToDateTime64Transform\n \n     inline DateTime64::NativeType execute(Int32 d, const DateLUTImpl & time_zone) const\n     {\n-        const auto dt = ToDateTimeImpl::execute(d, time_zone);\n+        const auto dt = time_zone.fromDayNum(ExtendedDayNum(d));\n         return DecimalUtils::decimalFromComponentsWithMultiplier<DateTime64>(dt, 0, scale_multiplier);\n     }\n \n@@ -1806,7 +1848,7 @@ class FunctionConvert : public IFunction\n                 {\n                     /// Account for optional timezone argument.\n                     if (arguments.size() != 2 && arguments.size() != 3)\n-                        throw Exception{\"Function \" + getName() + \" expects 2 or 3 arguments for DataTypeDateTime64.\",\n+                        throw Exception{\"Function \" + getName() + \" expects 2 or 3 arguments for DateTime64.\",\n                             ErrorCodes::TOO_FEW_ARGUMENTS_FOR_FUNCTION};\n                 }\n                 else if (arguments.size() != 2)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00900_long_parquet.reference b/tests/queries/0_stateless/00900_long_parquet.reference\nindex bbdad7243bde..4dfc726145e6 100644\n--- a/tests/queries/0_stateless/00900_long_parquet.reference\n+++ b/tests/queries/0_stateless/00900_long_parquet.reference\n@@ -44,12 +44,12 @@ converted:\n diff:\n dest:\n 79\t81\t82\t83\t84\t85\t86\t87\t88\t89\tstr01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\tfstr1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\t2003-03-04\t2004-05-06 00:00:00\t2004-05-06 07:08:09.012000000\n-80\t81\t82\t83\t84\t85\t86\t87\t88\t89\tstr02\tfstr2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\t2005-03-04\t2006-08-09 10:11:12\t2006-08-09 10:11:12.345000000\n+80\t81\t82\t83\t84\t85\t86\t87\t88\t89\tstr02\tfstr2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\t2149-06-06\t2006-08-09 10:11:12\t2006-08-09 10:11:12.345000000\n min:\n--128\t0\t0\t0\t0\t0\t0\t0\t-1\t-1\tstring-1\\0\\0\\0\\0\\0\\0\\0\tfixedstring-1\\0\\0\t2003-04-05\t2003-02-03\t2003-02-03 04:05:06.789000000\n--108\t108\t8\t92\t-8\t108\t-40\t-116\t-1\t-1\tstring-0\\0\\0\\0\\0\\0\\0\\0\tfixedstring\\0\\0\\0\\0\t2001-02-03\t2002-02-03\t2002-02-03 04:05:06.789000000\n+-128\t0\t0\t0\t0\t0\t0\t0\t-1\t-1\tstring-1\\0\\0\\0\\0\\0\\0\\0\tfixedstring-1\\0\\0\t2003-04-05\t2149-06-06\t2003-02-03 04:05:06.789000000\n+-108\t108\t8\t92\t-8\t108\t-40\t-116\t-1\t-1\tstring-0\\0\\0\\0\\0\\0\\0\\0\tfixedstring\\0\\0\\0\\0\t2001-02-03\t2149-06-06\t2002-02-03 04:05:06.789000000\n 79\t81\t82\t83\t84\t85\t86\t87\t88\t89\tstr01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\tfstr1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\t2003-03-04\t2004-05-06\t2004-05-06 07:08:09.012000000\n-127\t-1\t-1\t-1\t-1\t-1\t-1\t-1\t-1\t-1\tstring-2\\0\\0\\0\\0\\0\\0\\0\tfixedstring-2\\0\\0\t2004-06-07\t2004-02-03\t2004-02-03 04:05:06.789000000\n+127\t-1\t-1\t-1\t-1\t-1\t-1\t-1\t-1\t-1\tstring-2\\0\\0\\0\\0\\0\\0\\0\tfixedstring-2\\0\\0\t2004-06-07\t2149-06-06\t2004-02-03 04:05:06.789000000\n max:\n -128\t0\t-32768\t0\t-2147483648\t0\t-9223372036854775808\t0\t-1\t-1\tstring-1\tfixedstring-1\\0\\0\t2003-04-05 00:00:00\t2003-02-03 04:05:06\t2003-02-03 04:05:06.789000000\n -108\t108\t-1016\t1116\t-1032\t1132\t-1064\t1164\t-1\t-1\tstring-0\tfixedstring\\0\\0\\0\\0\t2001-02-03 00:00:00\t2002-02-03 04:05:06\t2002-02-03 04:05:06.789000000\ndiff --git a/tests/queries/0_stateless/00941_to_custom_week.sql b/tests/queries/0_stateless/00941_to_custom_week.sql\nindex 4dd5d2093060..04ff08d41170 100644\n--- a/tests/queries/0_stateless/00941_to_custom_week.sql\n+++ b/tests/queries/0_stateless/00941_to_custom_week.sql\n@@ -49,4 +49,3 @@ SELECT\n     toStartOfWeek(x, 3) AS w3,\n     toStartOfWeek(x_t, 3) AS wt3\n FROM numbers(10);\n-\ndiff --git a/tests/queries/0_stateless/01440_to_date_monotonicity.reference b/tests/queries/0_stateless/01440_to_date_monotonicity.reference\nindex 2dbec540fbb1..dd8545b721da 100644\n--- a/tests/queries/0_stateless/01440_to_date_monotonicity.reference\n+++ b/tests/queries/0_stateless/01440_to_date_monotonicity.reference\n@@ -1,4 +1,4 @@\n 0\n-1970-01-01\t2106-02-07\t1970-04-11\t1970-01-01\t2149-06-06\n+1970-01-01\t2120-07-26\t1970-04-11\t1970-01-01\t2149-06-06\n 1970-01-01 02:00:00\t2106-02-07 09:28:15\t1970-01-01 02:16:40\n 2000-01-01 13:12:12\ndiff --git a/tests/queries/0_stateless/01921_datatype_date32.reference b/tests/queries/0_stateless/01921_datatype_date32.reference\nindex acb0cc4ca598..a33a96ffffbc 100644\n--- a/tests/queries/0_stateless/01921_datatype_date32.reference\n+++ b/tests/queries/0_stateless/01921_datatype_date32.reference\n@@ -43,16 +43,16 @@\n -------toMinute---------\n -------toSecond---------\n -------toStartOfDay---------\n-2036-02-07 07:31:20\n-2036-02-07 07:31:20\n-2027-10-01 11:03:28\n-2027-10-17 11:03:28\n+1970-01-01 02:00:00\n+1970-01-01 02:00:00\n+2106-02-07 00:00:00\n+2106-02-07 00:00:00\n 2021-06-22 00:00:00\n -------toMonday---------\n-2079-06-07\n-2079-06-07\n-2120-07-06\n-2120-07-20\n+1970-01-01\n+1970-01-01\n+2149-06-02\n+2149-06-02\n 2021-06-21\n -------toISOWeek---------\n 1\n@@ -79,28 +79,28 @@\n 229953\n 202125\n -------toStartOfWeek---------\n-2079-06-06\n-2079-06-06\n-2120-07-05\n-2120-07-26\n+1970-01-01\n+1970-01-01\n+2149-06-01\n+2149-06-01\n 2021-06-20\n -------toStartOfMonth---------\n-2079-06-07\n-2079-06-07\n-2120-06-26\n-2120-06-26\n+1970-01-01\n+1970-01-01\n+2149-06-01\n+2149-06-01\n 2021-06-01\n -------toStartOfQuarter---------\n-2079-06-07\n-2079-06-07\n-2120-04-26\n-2120-04-26\n+1970-01-01\n+1970-01-01\n+2149-04-01\n+2149-04-01\n 2021-04-01\n -------toStartOfYear---------\n-2079-06-07\n-2079-06-07\n-2119-07-28\n-2119-07-28\n+1970-01-01\n+1970-01-01\n+2149-01-01\n+2149-01-01\n 2021-01-01\n -------toStartOfSecond---------\n -------toStartOfMinute---------\ndiff --git a/tests/queries/0_stateless/02403_date_time_narrowing.reference b/tests/queries/0_stateless/02403_date_time_narrowing.reference\nnew file mode 100644\nindex 000000000000..7d6e91c61b82\n--- /dev/null\n+++ b/tests/queries/0_stateless/02403_date_time_narrowing.reference\n@@ -0,0 +1,20 @@\n+1970-01-01\t2149-06-06\t1970-01-01\t2149-06-06\t1900-01-01\t1970-01-02\t1970-01-01 00:00:00\t2106-02-07 06:28:15\n+1970-01-01\t2149-06-06\n+1970-01-01\t2149-06-06\n+1970-01-01 00:00:00\t2106-02-07 06:28:15\n+1970-01-01 00:00:00\t2106-02-07 06:28:15\n+2106-02-07 06:28:15\n+toStartOfDay\n+2106-02-07 00:00:00\t1970-01-01 00:00:00\t2106-02-07 00:00:00\t1970-01-01 00:00:00\t2106-02-07 00:00:00\n+toStartOfWeek\n+1970-01-01\t1970-01-01\t1970-01-01\t1970-01-01\t1970-01-01\t2149-06-01\t1970-01-01\t2149-06-02\n+toMonday\n+1970-01-01\t1970-01-01\t2149-06-02\t1970-01-01\t2149-06-02\n+toStartOfMonth\n+1970-01-01\t2149-06-01\t1970-01-01\t2149-06-01\n+toLastDayOfMonth\n+2149-05-31\t1970-01-01\t2149-05-31\t1970-01-01\t2149-05-31\n+toStartOfQuarter\n+1970-01-01\t2149-04-01\t1970-01-01\t2149-04-01\n+toStartOfYear\n+1970-01-01\t2149-01-01\t1970-01-01\t2149-01-01\ndiff --git a/tests/queries/0_stateless/02403_date_time_narrowing.sql b/tests/queries/0_stateless/02403_date_time_narrowing.sql\nnew file mode 100644\nindex 000000000000..07cbba6f31ca\n--- /dev/null\n+++ b/tests/queries/0_stateless/02403_date_time_narrowing.sql\n@@ -0,0 +1,74 @@\n+-- check conversion of numbers to date/time --\n+SELECT toDate(toInt32(toDate32('1930-01-01', 'UTC')), 'UTC'),\n+       toDate(toInt32(toDate32('2151-01-01', 'UTC')), 'UTC'),\n+       toDate(toInt64(toDateTime64('1930-01-01 12:12:12.123', 3, 'UTC')), 'UTC'),\n+       toDate(toInt64(toDateTime64('2151-01-01 12:12:12.123', 3, 'UTC')), 'UTC'),\n+       toDate32(toInt32(toDate32('1900-01-01', 'UTC')) - 1, 'UTC'),\n+       toDate32(toInt32(toDate32('2299-12-31', 'UTC')) + 1, 'UTC'),\n+       toDateTime(toInt64(toDateTime64('1930-01-01 12:12:12.123', 3, 'UTC')), 'UTC'),\n+       toDateTime(toInt64(toDateTime64('2151-01-01 12:12:12.123', 3, 'UTC')), 'UTC');\n+\n+-- check conversion of extended range type to normal range type --\n+SELECT toDate(toDate32('1930-01-01', 'UTC'), 'UTC'),\n+       toDate(toDate32('2151-01-01', 'UTC'), 'UTC');\n+\n+SELECT toDate(toDateTime64('1930-01-01 12:12:12.12', 3, 'UTC'), 'UTC'),\n+       toDate(toDateTime64('2151-01-01 12:12:12.12', 3, 'UTC'), 'UTC');\n+\n+SELECT toDateTime(toDateTime64('1930-01-01 12:12:12.12', 3, 'UTC'), 'UTC'),\n+       toDateTime(toDateTime64('2151-01-01 12:12:12.12', 3, 'UTC'), 'UTC');\n+\n+SELECT toDateTime(toDate32('1930-01-01', 'UTC'), 'UTC'),\n+       toDateTime(toDate32('2151-01-01', 'UTC'), 'UTC');\n+\n+SELECT toDateTime(toDate('2141-01-01', 'UTC'), 'UTC');\n+\n+-- test DateTimeTransforms --\n+SELECT 'toStartOfDay';\n+SELECT toStartOfDay(toDate('2141-01-01', 'UTC'), 'UTC'),\n+       toStartOfDay(toDate32('1930-01-01', 'UTC'), 'UTC'),\n+       toStartOfDay(toDate32('2141-01-01', 'UTC'), 'UTC'),\n+       toStartOfDay(toDateTime64('1930-01-01 12:12:12.123', 3, 'UTC'), 'UTC'),\n+       toStartOfDay(toDateTime64('2141-01-01 12:12:12.123', 3, 'UTC'), 'UTC');\n+\n+SELECT 'toStartOfWeek';\n+SELECT toStartOfWeek(toDate('1970-01-01', 'UTC')),\n+       toStartOfWeek(toDate32('1970-01-01', 'UTC')),\n+       toStartOfWeek(toDateTime('1970-01-01 10:10:10', 'UTC'), 0, 'UTC'),\n+       toStartOfWeek(toDateTime64('1970-01-01 10:10:10.123', 3, 'UTC'), 1, 'UTC'),\n+       toStartOfWeek(toDate32('1930-01-01', 'UTC')),\n+       toStartOfWeek(toDate32('2151-01-01', 'UTC')),\n+       toStartOfWeek(toDateTime64('1930-01-01 12:12:12.123', 3, 'UTC'), 2, 'UTC'),\n+       toStartOfWeek(toDateTime64('2151-01-01 12:12:12.123', 3, 'UTC'), 3, 'UTC');\n+\n+SELECT 'toMonday';\n+SELECT toMonday(toDate('1970-01-02', 'UTC')),\n+       toMonday(toDate32('1930-01-01', 'UTC')),\n+       toMonday(toDate32('2151-01-01', 'UTC')),\n+       toMonday(toDateTime64('1930-01-01 12:12:12.123', 3, 'UTC'), 'UTC'),\n+       toMonday(toDateTime64('2151-01-01 12:12:12.123', 3, 'UTC'), 'UTC');\n+\n+SELECT 'toStartOfMonth';\n+SELECT toStartOfMonth(toDate32('1930-01-01', 'UTC')),\n+       toStartOfMonth(toDate32('2151-01-01', 'UTC')),\n+       toStartOfMonth(toDateTime64('1930-01-01 12:12:12.123', 3, 'UTC'), 'UTC'),\n+       toStartOfMonth(toDateTime64('2151-01-01 12:12:12.123', 3, 'UTC'), 'UTC');\n+\n+SELECT 'toLastDayOfMonth';\n+SELECT toLastDayOfMonth(toDate('2149-06-03', 'UTC')),\n+       toLastDayOfMonth(toDate32('1930-01-01', 'UTC')),\n+       toLastDayOfMonth(toDate32('2151-01-01', 'UTC')),\n+       toLastDayOfMonth(toDateTime64('1930-01-01 12:12:12.123', 3, 'UTC'), 'UTC'),\n+       toLastDayOfMonth(toDateTime64('2151-01-01 12:12:12.123', 3, 'UTC'), 'UTC');\n+\n+SELECT 'toStartOfQuarter';\n+SELECT toStartOfQuarter(toDate32('1930-01-01', 'UTC')),\n+       toStartOfQuarter(toDate32('2151-01-01', 'UTC')),\n+       toStartOfQuarter(toDateTime64('1930-01-01 12:12:12.123', 3, 'UTC'), 'UTC'),\n+       toStartOfQuarter(toDateTime64('2151-01-01 12:12:12.123', 3, 'UTC'), 'UTC');\n+\n+SELECT 'toStartOfYear';\n+SELECT toStartOfYear(toDate32('1930-01-01', 'UTC')),\n+       toStartOfYear(toDate32('2151-01-01', 'UTC')),\n+       toStartOfYear(toDateTime64('1930-01-01 12:12:12.123', 3, 'UTC'), 'UTC'),\n+       toStartOfYear(toDateTime64('2151-01-01 12:12:12.123', 3, 'UTC'), 'UTC');\n",
  "problem_statement": "Casting of the date/timestamps to smaller types should return min/max instead of overflow\n```sql\r\nSELECT\r\n    toDate32('2160-01-01') AS a,\r\n    toDate('2160-01-01') AS b,\r\n    toDate(a),\r\n    toDateTime(a),\r\n    toDateTime(b)\r\n\r\nQuery id: b1043ea4-a5c4-4ab8-98f2-e6d0fbcfbdf5\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\na:                                  2160-01-01\r\nb:                                  2149-06-06\r\ntoDate(toDate32('2160-01-01')):     1980-07-27 -- max date value expected, i.e. 2149-06-06  \r\ntoDateTime(toDate32('2160-01-01')): 2023-11-24 17:31:44 -- max datetime value expected, i.e. 2106-02-07 06:28:15\r\ntoDateTime(toDate('2160-01-01')):   2013-04-29 17:31:44 -- max datetime value expected, i.e. 2106-02-07 06:28:15\r\n```\r\n\r\n```sql\r\nSELECT\r\n    toDateTime64('2160-01-01 00:00:00', 0) AS a,\r\n    toDateTime('2160-01-01 00:00:00') AS b,\r\n    toDate(a),\r\n    toDateTime(a)\r\n\r\nQuery id: a6085a36-4a41-467b-915d-b69638445754\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\na:                                                  2160-01-01 00:00:00\r\nb:                                                  2106-02-07 06:28:15\r\ntoDate(toDateTime64('2160-01-01 00:00:00', 0)):     1980-07-27 -- max malue, i.e. 2149-06-06  is expected\r\ntoDateTime(toDateTime64('2160-01-01 00:00:00', 0)): 2023-11-24 17:31:44 -- max value, i.e. 2106-02-07 06:28:15 is expected\r\n```\r\n\r\nP.S. It seems like fixing that may also be a fix for https://github.com/ClickHouse/ClickHouse/issues/39248 (which also can be fixed independently). \n",
  "hints_text": "More tests with negative timestamps:\r\n\r\n```sql\r\nSELECT\r\n    toDate32('1930-01-01') AS a,\r\n    toDate('1930-01-01') AS b,\r\n    toDate(a),\r\n    toDateTime(a),\r\n    toDateTime(b)\r\n\r\nQuery id: 1b99647e-fa0b-45c2-bfa3-d1bfab4e7ab2\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\na:                                  1930-01-01\r\nb:                                  1970-01-01\r\ntoDate(toDate32('1930-01-01')):     2109-06-07 -- 1970-01-01!\r\ntoDateTime(toDate32('1930-01-01')): 2066-02-06 06:28:16  -- 1970-01-01 00:00:00!\r\ntoDateTime(toDate('1930-01-01')):   1970-01-01 00:00:00\r\n\r\nSELECT\r\n    toDateTime64('1930-01-01 00:00:00', 0) AS a,\r\n    toDateTime('1930-01-01 00:00:00') AS b,\r\n    toDate(a),\r\n    toDateTime(a)\r\n\r\nQuery id: f2949984-8d78-4127-aac4-b491af2e93ed\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\na:                                                  1930-01-01 00:00:00\r\nb:                                                  1970-01-01 00:00:00\r\ntoDate(toDateTime64('1930-01-01 00:00:00', 0)):     2109-06-07 -- 1970-01-01\r\ntoDateTime(toDateTime64('1930-01-01 00:00:00', 0)): 2066-02-06 06:28:16 -- 1970-01-01 00:00:00!\r\n```\nThe same behavior is expected from toStartOf.. and other functions when 'cropping' the datatype happens.\r\nhttps://github.com/ClickHouse/ClickHouse/issues/25284",
  "created_at": "2022-08-14T22:22:15Z",
  "modified_files": [
    "docs/en/sql-reference/functions/date-time-functions.md",
    "docs/ru/sql-reference/data-types/date.md",
    "docs/ru/sql-reference/functions/date-time-functions.md",
    "docs/zh/sql-reference/data-types/date.md",
    "src/Functions/CustomWeekTransforms.h",
    "src/Functions/DateTimeTransforms.h",
    "src/Functions/FunctionCustomWeekToSomething.h",
    "src/Functions/FunctionsConversion.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00900_long_parquet.reference",
    "tests/queries/0_stateless/00941_to_custom_week.sql",
    "tests/queries/0_stateless/01440_to_date_monotonicity.reference",
    "tests/queries/0_stateless/01921_datatype_date32.reference",
    "b/tests/queries/0_stateless/02403_date_time_narrowing.reference",
    "b/tests/queries/0_stateless/02403_date_time_narrowing.sql"
  ]
}