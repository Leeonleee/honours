{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 14143,
  "instance_id": "ClickHouse__ClickHouse-14143",
  "issue_numbers": [
    "13027"
  ],
  "base_commit": "8430584640f4162cc875407f448fb5b8063e5664",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex ef81eb41672d..c2593b1ee90a 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -241,11 +241,11 @@ ASTPtr InterpreterCreateQuery::formatColumns(const NamesAndTypesList & columns)\n         const auto column_declaration = std::make_shared<ASTColumnDeclaration>();\n         column_declaration->name = column.name;\n \n-        ParserIdentifierWithOptionalParameters storage_p;\n+        ParserDataType type_parser;\n         String type_name = column.type->getName();\n         const char * pos = type_name.data();\n         const char * end = pos + type_name.size();\n-        column_declaration->type = parseQuery(storage_p, pos, end, \"data type\", 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n+        column_declaration->type = parseQuery(type_parser, pos, end, \"data type\", 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n         columns_list->children.emplace_back(column_declaration);\n     }\n \n@@ -263,11 +263,11 @@ ASTPtr InterpreterCreateQuery::formatColumns(const ColumnsDescription & columns)\n \n         column_declaration->name = column.name;\n \n-        ParserIdentifierWithOptionalParameters storage_p;\n+        ParserDataType type_parser;\n         String type_name = column.type->getName();\n         const char * type_name_pos = type_name.data();\n         const char * type_name_end = type_name_pos + type_name.size();\n-        column_declaration->type = parseQuery(storage_p, type_name_pos, type_name_end, \"data type\", 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n+        column_declaration->type = parseQuery(type_parser, type_name_pos, type_name_end, \"data type\", 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n \n         if (column.default_desc.expression)\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01458_named_tuple_millin.reference b/tests/queries/0_stateless/01458_named_tuple_millin.reference\nnew file mode 100644\nindex 000000000000..b826566c74b2\n--- /dev/null\n+++ b/tests/queries/0_stateless/01458_named_tuple_millin.reference\n@@ -0,0 +1,12 @@\n+CREATE TABLE default.tuple\n+(\n+    `j` Tuple(    a Int8,     b String)\n+)\n+ENGINE = Memory\n+j\tTuple(a Int8, b String)\t\t\t\t\t\n+CREATE TABLE default.tuple\n+(\n+    `j` Tuple(    a Int8,     b String)\n+)\n+ENGINE = Memory\n+j\tTuple(a Int8, b String)\t\t\t\t\t\ndiff --git a/tests/queries/0_stateless/01458_named_tuple_millin.sql b/tests/queries/0_stateless/01458_named_tuple_millin.sql\nnew file mode 100644\nindex 000000000000..7687dd4c158a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01458_named_tuple_millin.sql\n@@ -0,0 +1,19 @@\n+DROP TABLE IF EXISTS tuple;\n+\n+CREATE TABLE tuple\n+(\n+    `j` Tuple(a Int8, b String)\n+)\n+ENGINE = Memory;\n+\n+SHOW CREATE TABLE tuple FORMAT TSVRaw;\n+DESC tuple;\n+DROP TABLE tuple;\n+\n+CREATE TABLE tuple\n+ENGINE = Memory AS\n+SELECT CAST((1, 'Test'), 'Tuple(a Int8,  b String)') AS j;\n+\n+SHOW CREATE TABLE tuple FORMAT TSVRaw;\n+DESC tuple;\n+DROP TABLE tuple;\n",
  "problem_statement": "20.5 Table creation with named tuples is broken\n**Describe the bug**\r\nTable creation with named tuples is broken\r\n\r\n**How to reproduce**\r\nClickHouse server version 20.5.3.27\r\n\r\n```\r\n:) SELECT version();\r\n\r\n\u250c\u2500version()\u2500\u2510\r\n\u2502 20.5.3.27 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```\r\n:) CREATE TABLE test.tuple\r\n(\r\n    `j` Tuple( a Int8, b String)\r\n)\r\nENGINE = Memory;\r\n\r\n\r\nReceived exception from server (version 20.5.3):\r\nCode: 62. DB::Exception: Received from localhost:9000. DB::Exception: Syntax error (data type): failed at position 9: Int8, b String). Expected one of: LIKE, GLOBAL NOT IN, AS, IS, OR, QuestionMark, BETWEEN, NOT LIKE, AND, Comma, alias, IN, Dot, NOT, Arrow, token, NOT IN, GLOBAL IN.\r\n```\r\n```\r\n:) CREATE TABLE test.tuple_from_select\r\nENGINE = Memory AS\r\nSELECT CAST((1, 'Test'), 'Tuple( a Int8,  b String)') AS j;\r\n\r\n\r\nReceived exception from server (version 20.5.3):\r\nCode: 62. DB::Exception: Received from localhost:9000. DB::Exception: Syntax error (data type): failed at position 9: Int8, b String). Expected one of: LIKE, GLOBAL NOT IN, AS, IS, OR, QuestionMark, BETWEEN, NOT LIKE, AND, Comma, alias, IN, Dot, NOT, Arrow, token, NOT IN, GLOBAL IN.\r\n```\r\n\r\n**This works fine on 20.4.6.53:**\r\n```\r\n:) SELECT version();\r\n\r\n\u250c\u2500version()\u2500\u2510\r\n\u2502 20.4.6.53 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```\r\n:) CREATE TABLE test.tuple\r\n(\r\n    `j` Tuple( a Int8, b String)\r\n)\r\nENGINE = Memory;\r\n\r\nOk.\r\n```\r\n```\r\n:) SHOW CREATE TABLE test.tuple\r\n\r\n\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CREATE TABLE test.tuple\r\n(\r\n    `j` Tuple(\r\n    a Int8, \r\n    b String)\r\n)\r\nENGINE = Memory \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```\r\n:) CREATE TABLE test.tuple_from_select\r\nENGINE = Memory AS\r\nSELECT CAST((1, 'Test'), 'Tuple( a Int8,  b String)') AS j;\r\n\r\nOk.\r\n```\n",
  "hints_text": "@alexey-milovidov Will this be fixed or are named tuples obsolete?\nIssue still persists in 20.6.4.44\nNamed tuples are not obsolete and should be supported and covered by tests. But they are rarely used.",
  "created_at": "2020-08-26T21:58:27Z",
  "modified_files": [
    "src/Interpreters/InterpreterCreateQuery.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01458_named_tuple_millin.reference",
    "b/tests/queries/0_stateless/01458_named_tuple_millin.sql"
  ]
}