{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 24523,
  "instance_id": "ClickHouse__ClickHouse-24523",
  "issue_numbers": [
    "24461"
  ],
  "base_commit": "4ca651838cb529f0901ce441dbd4dc5b713df11c",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionUniq.cpp b/src/AggregateFunctions/AggregateFunctionUniq.cpp\nindex bc44eb8eece1..ba4e041a4668 100644\n--- a/src/AggregateFunctions/AggregateFunctionUniq.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionUniq.cpp\n@@ -5,11 +5,8 @@\n \n #include <DataTypes/DataTypeDate.h>\n #include <DataTypes/DataTypeDateTime.h>\n-#include <DataTypes/DataTypeString.h>\n-#include <DataTypes/DataTypeFixedString.h>\n #include <DataTypes/DataTypeTuple.h>\n #include <DataTypes/DataTypeUUID.h>\n-#include \"registerAggregateFunctions.h\"\n \n \n namespace DB\n@@ -18,6 +15,7 @@ namespace DB\n namespace ErrorCodes\n {\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n }\n \n \n@@ -39,6 +37,12 @@ AggregateFunctionPtr createAggregateFunctionUniq(const std::string & name, const\n \n     bool use_exact_hash_function = !isAllArgumentsContiguousInMemory(argument_types);\n \n+    const WhichDataType t(argument_types[0]);\n+    if (t.isAggregateFunction())\n+        throw Exception(\n+            \"Illegal type \" + argument_types[0]->getName() + \" of argument for aggregate function \" + name,\n+            ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+\n     if (argument_types.size() == 1)\n     {\n         const IDataType & argument_type = *argument_types[0];\n@@ -81,6 +85,12 @@ AggregateFunctionPtr createAggregateFunctionUniq(const std::string & name, const\n         throw Exception(\"Incorrect number of arguments for aggregate function \" + name,\n             ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n \n+    const WhichDataType t(argument_types[0]);\n+    if (t.isAggregateFunction())\n+        throw Exception(\n+            \"Illegal type \" + argument_types[0]->getName() + \" of argument for aggregate function \" + name,\n+            ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+\n     /// We use exact hash function if the user wants it;\n     /// or if the arguments are not contiguous in memory, because only exact hash function have support for this case.\n     bool use_exact_hash_function = is_exact || !isAllArgumentsContiguousInMemory(argument_types);\ndiff --git a/src/AggregateFunctions/AggregateFunctionUniqCombined.cpp b/src/AggregateFunctions/AggregateFunctionUniqCombined.cpp\nindex 84a9267ffe0f..e6843a326420 100644\n--- a/src/AggregateFunctions/AggregateFunctionUniqCombined.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionUniqCombined.cpp\n@@ -17,6 +17,7 @@ namespace ErrorCodes\n {\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n     extern const int ARGUMENT_OUT_OF_BOUND;\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n }\n \n namespace\n@@ -102,6 +103,11 @@ namespace\n \n         if (argument_types.empty())\n             throw Exception(\"Incorrect number of arguments for aggregate function \" + name, ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n+        const WhichDataType t(argument_types[0]);\n+        if (t.isAggregateFunction())\n+            throw Exception(\n+                \"Illegal type \" + argument_types[0]->getName() + \" of argument for aggregate function \" + name,\n+                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n \n         switch (precision)\n         {\ndiff --git a/src/AggregateFunctions/AggregateFunctionUniqUpTo.cpp b/src/AggregateFunctions/AggregateFunctionUniqUpTo.cpp\nindex 8195bd8964c5..4a9d006cae91 100644\n--- a/src/AggregateFunctions/AggregateFunctionUniqUpTo.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionUniqUpTo.cpp\n@@ -15,6 +15,7 @@ namespace ErrorCodes\n {\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n     extern const int ARGUMENT_OUT_OF_BOUND;\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n }\n \n \n@@ -45,6 +46,11 @@ AggregateFunctionPtr createAggregateFunctionUniqUpTo(const std::string & name, c\n     if (argument_types.empty())\n         throw Exception(\"Incorrect number of arguments for aggregate function \" + name,\n             ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n+    const WhichDataType t(argument_types[0]);\n+    if (t.isAggregateFunction())\n+        throw Exception(\n+            \"Illegal type \" + argument_types[0]->getName() + \" of argument for aggregate function \" + name,\n+            ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n \n     bool use_exact_hash_function = !isAllArgumentsContiguousInMemory(argument_types);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01882_uniqueState_over_uniqueState.reference b/tests/queries/0_stateless/01882_uniqueState_over_uniqueState.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01882_uniqueState_over_uniqueState.sh b/tests/queries/0_stateless/01882_uniqueState_over_uniqueState.sh\nnew file mode 100755\nindex 000000000000..6be05a128d75\n--- /dev/null\n+++ b/tests/queries/0_stateless/01882_uniqueState_over_uniqueState.sh\n@@ -0,0 +1,20 @@\n+#!/usr/bin/env bash\n+\n+export CLICKHOUSE_CLIENT_SERVER_LOGS_LEVEL=fatal\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+\n+function check()\n+{\n+    $CLICKHOUSE_CLIENT -q \"SELECT id, $1(s) FROM ( SELECT number % 10 as id, uniqState(number) as s FROM ( SELECT number FROM system.numbers LIMIT 100 ) GROUP BY number ) GROUP BY id\" 2>&1 | grep -v -P '^(Received exception from server|Code: 43)' ||:\n+}\n+\n+stateFunctions=(\"uniqState\" \"uniqExactState\" \"uniqHLL12State\" \"uniqCombinedState\" \"uniqUpToState\")  # \"uniqThetaState\" not tested because its availability depends on compilation options\n+\n+for i1 in \"${stateFunctions[@]}\"\n+do\n+    check \"$i1\"\n+done\n",
  "problem_statement": "Crash when chaining different uniq*State\n**Describe the bug**\r\n\r\nChaining **different** uniqXXXXState calls (uniqState, uniqExactState, uniqThetaState, uniqHLL12State or uniqCombinedState) crashes the server.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes. I've tested 20.7 and current master/HEAD.\r\n\r\n**How to reproduce**\r\n\r\nExample with a query:\r\n\r\n```sql\r\nSELECT\r\n    id,\r\n    uniqState(s)\r\nFROM\r\n(\r\n    SELECT\r\n        number % 10 as id,\r\n        uniqExactState(number) as s\r\n    FROM\r\n    (\r\n        SELECT number\r\n        FROM system.numbers\r\n        LIMIT 1000\r\n    )\r\n    GROUP BY number\r\n)\r\nGROUP BY id\r\n```\r\n\r\nThe other way around (uniqState -> uniqExactState) also crashes, as well as other combinations with other uniq*State.\r\n\r\nSame can be done using a table:\r\n```sql\r\nDROP TABLE IF EXISTS uniq_crash_table;\r\n\r\nCREATE TABLE uniq_crash_table\r\n(\r\n    `id` Int64,\r\n    `hits` AggregateFunction(uniq, UInt64)\r\n)\r\nENGINE = AggregatingMergeTree\r\nPARTITION BY id\r\nORDER BY id AS\r\nSELECT\r\n    number % 10 AS id,\r\n    uniqState(number) AS hits\r\nFROM\r\n(\r\n    SELECT number\r\n    FROM system.numbers\r\n    LIMIT 1000\r\n)\r\nGROUP BY number\r\n\r\nSELECT\r\n    id,\r\n    uniqExactState(hits)\r\nFROM uniq_crash_table\r\nGROUP BY id\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe server shouldn't crash. If the SQL is invalid then an exception should be raised instead.\r\n\r\n**Error message and/or stacktrace**\r\n\r\nDifferent queries crash in different parts, for example when running the first query from above you get an error like this in the clickhouse-client:\r\n```\r\nException on client:\r\nCode: 173. DB::ErrnoException: Allocator: Cannot mmap 1.00 TiB., errno: 12, strerror: Cannot allocate memory: while receiving packet from localhost:9000\r\n\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 21.7.1 revision 54448.\r\n```\r\n\r\nAnd the coredump looks like this:\r\n\r\n```\r\n(gdb) bt\r\n#0  0x00007f2685cacd22 in raise () from /usr/lib/libc.so.6\r\n#1  0x00007f2685c96862 in abort () from /usr/lib/libc.so.6\r\n#2  0x00007f2687701fd4 in terminate_handler () at ../base/daemon/BaseDaemon.cpp:432\r\n#3  0x00007f2685e7d888 in std::__terminate (func=0x2) at ../contrib/libcxxabi/src/cxa_handlers.cpp:59\r\n#4  0x00007f2685e7d7ea in std::terminate () at ../contrib/libcxxabi/src/cxa_handlers.cpp:88\r\n#5  0x00007f2683ee213b in __clang_call_terminate () from /mnt/ch/ClickHouse/build/src/AggregateFunctions/libclickhouse_aggregate_functions.so\r\n#6  0x00007f2685579690 in HashTable<unsigned long, HashTableCell<unsigned long, HashCRC32<unsigned long>, HashTableNoState>, HashCRC32<unsigned long>, HashTableGrower<4ul>, AllocatorWithStackMemory<Allocator<true, true>, 128ul, 1ul> >::~HashTable (\r\n    this=0x7f258483f0a0) at ../src/Common/HashTable/HashTable.h:703\r\n#7  DB::AggregateFunctionUniqExactData<unsigned long>::~AggregateFunctionUniqExactData (this=0x7f258483f0a0) at ../src/AggregateFunctions/AggregateFunctionUniq.h:93\r\n#8  DB::IAggregateFunctionDataHelper<DB::AggregateFunctionUniqExactData<unsigned long>, DB::AggregateFunctionUniq<unsigned long, DB::AggregateFunctionUniqExactData<unsigned long> > >::destroy (this=<optimized out>, place=0x7f258483f0a0 \"\")\r\n    at ../src/AggregateFunctions/IAggregateFunction.h:443\r\n#9  0x00007f267960cdbc in DB::ColumnAggregateFunction::~ColumnAggregateFunction (this=0x7f2566fbc980) at ../src/Columns/ColumnAggregateFunction.cpp:80\r\n#10 0x00007f267960cf8e in DB::ColumnAggregateFunction::~ColumnAggregateFunction (this=0x7f2566fbc980) at ../src/Columns/ColumnAggregateFunction.cpp:77\r\n#11 0x00007f2687eb8c32 in boost::sp_adl_block::intrusive_ptr_release<DB::IColumn, boost::sp_adl_block::thread_safe_counter> (p=<optimized out>) at ../contrib/boost/boost/smart_ptr/intrusive_ref_counter.hpp:173\r\n#12 boost::intrusive_ptr<DB::IColumn const>::~intrusive_ptr (this=0x7f25831a4770) at ../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:98\r\n#13 DB::ColumnWithTypeAndName::~ColumnWithTypeAndName (this=0x7f25831a4770) at ../src/Core/ColumnWithTypeAndName.h:19\r\n#14 std::__1::allocator<DB::ColumnWithTypeAndName>::destroy (this=0x7f258edf0a50, __p=0x7f25831a4770) at ../contrib/libcxx/include/memory:891\r\n#15 std::__1::allocator_traits<std::__1::allocator<DB::ColumnWithTypeAndName> >::__destroy<DB::ColumnWithTypeAndName> (__a=..., __p=0x7f25831a4770) at ../contrib/libcxx/include/__memory/allocator_traits.h:539\r\n#16 std::__1::allocator_traits<std::__1::allocator<DB::ColumnWithTypeAndName> >::destroy<DB::ColumnWithTypeAndName> (__a=..., __p=0x7f25831a4770) at ../contrib/libcxx/include/__memory/allocator_traits.h:487\r\n#17 std::__1::__vector_base<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >::__destruct_at_end (this=0x7f258edf0a40, __new_last=0x7f25831a4740) at ../contrib/libcxx/include/vector:428\r\n#18 std::__1::__vector_base<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >::clear (this=0x7f258edf0a40) at ../contrib/libcxx/include/vector:371\r\n#19 std::__1::__vector_base<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >::~__vector_base (this=0x7f258edf0a40) at ../contrib/libcxx/include/vector:465\r\n#20 std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >::~vector (this=0x7f258edf0a40) at ../contrib/libcxx/include/vector:557\r\n#21 DB::Block::~Block (this=0x7f258edf0a40) at ../src/Core/Block.h:25\r\n#22 0x00007f26783e29b9 in DB::TCPHandler::processOrdinaryQueryWithProcessors (this=<optimized out>, this@entry=0x7f2583167500) at ../src/Server/TCPHandler.cpp:722\r\n#23 0x00007f26783dd487 in DB::TCPHandler::runImpl (this=0x7f2583167500) at ../src/Server/TCPHandler.cpp:331\r\n#24 0x00007f26783e90a9 in DB::TCPHandler::run (this=0x7f2583167500) at ../src/Server/TCPHandler.cpp:1621\r\n#25 0x00007f26869b110c in Poco::Net::TCPServerConnection::start (this=0x2) at ../contrib/poco/Net/src/TCPServerConnection.cpp:43\r\n#26 0x00007f26869b1647 in Poco::Net::TCPServerDispatcher::run (this=0x7f2583d8d800) at ../contrib/poco/Net/src/TCPServerDispatcher.cpp:115\r\n#27 0x00007f268668ddaa in Poco::PooledThread::run (this=0x7f266f769380) at ../contrib/poco/Foundation/src/ThreadPool.cpp:199\r\n#28 0x00007f268668b660 in Poco::ThreadImpl::runnableEntry (pThread=0x7f266f7693b8) at ../contrib/poco/Foundation/src/Thread_POSIX.cpp:345\r\n#29 0x00007f2685f9c259 in start_thread () from /usr/lib/libpthread.so.0\r\n#30 0x00007f2685d6e5e3 in clone () from /usr/lib/libc.so.6\r\n```\r\n\r\nAny pointers on where to look to fix this myself are also appreciated.\n",
  "hints_text": "Here is an msan report of the query in case it's helpful:\r\n\r\n```\r\n==146744==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n    #0 0x9a555b4 in DB::writeVarUInt(unsigned long, DB::WriteBuffer&) /mnt/ch/ClickHouse/build/../src/IO/VarInt.h\r\n    #1 0xc846655 in HashTable<unsigned long, HashTableCell<unsigned long, HashCRC32<unsigned long>, HashTableNoState>, HashCRC32<unsigned long>, HashTableGrower<4ul>, AllocatorWithStackMemory<Allocator<true, true>, 128ul, 1ul> >::write(DB::WriteBuffer&) const /mnt/ch/ClickHouse/build/../src/Common/HashTable/HashTable.h:1179:9\r\n    #2 0xc846655 in DB::AggregateFunctionUniq<unsigned long, DB::AggregateFunctionUniqExactData<unsigned long> >::serialize(char const*, DB::WriteBuffer&) const /mnt/ch/ClickHouse/build/../src/AggregateFunctions/AggregateFunctionUniq.h:246:31\r\n    #3 0x3076dbdb in DB::SerializationAggregateFunction::serializeBinaryBulk(DB::IColumn const&, DB::WriteBuffer&, unsigned long, unsigned long) const /mnt/ch/ClickHouse/build/../src/DataTypes/Serializations/SerializationAggregateFunction.cpp:77:19\r\n    #4 0x30761f0a in DB::ISerialization::serializeBinaryBulkWithMultipleStreams(DB::IColumn const&, unsigned long, unsigned long, DB::ISerialization::SerializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::SerializeBinaryBulkState>&) const /mnt/ch/ClickHouse/build/../src/DataTypes/Serializations/ISerialization.cpp:82:9\r\n    #5 0x32705732 in DB::writeData(DB::IDataType const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, DB::WriteBuffer&, unsigned long, unsigned long) /mnt/ch/ClickHouse/build/../src/DataStreams/NativeBlockOutputStream.cpp:60:20\r\n    #6 0x32705732 in DB::NativeBlockOutputStream::write(DB::Block const&) /mnt/ch/ClickHouse/build/../src/DataStreams/NativeBlockOutputStream.cpp:126:13\r\n    #7 0x354aa517 in DB::TCPHandler::sendData(DB::Block const&) /mnt/ch/ClickHouse/build/../src/Server/TCPHandler.cpp:1504:26\r\n    #8 0x354a1b67 in DB::TCPHandler::processOrdinaryQueryWithProcessors() /mnt/ch/ClickHouse/build/../src/Server/TCPHandler.cpp:698:21\r\n    #9 0x35485654 in DB::TCPHandler::runImpl() /mnt/ch/ClickHouse/build/../src/Server/TCPHandler.cpp:331:17\r\n    #10 0x354ca958 in DB::TCPHandler::run() /mnt/ch/ClickHouse/build/../src/Server/TCPHandler.cpp:1621:9\r\n    #11 0x4267f18a in Poco::Net::TCPServerConnection::start() /mnt/ch/ClickHouse/build/../contrib/poco/Net/src/TCPServerConnection.cpp:43:3\r\n    #12 0x42680870 in Poco::Net::TCPServerDispatcher::run() /mnt/ch/ClickHouse/build/../contrib/poco/Net/src/TCPServerDispatcher.cpp:115:20\r\n    #13 0x42b70064 in Poco::PooledThread::run() /mnt/ch/ClickHouse/build/../contrib/poco/Foundation/src/ThreadPool.cpp:199:14\r\n    #14 0x42b6ae08 in Poco::(anonymous namespace)::RunnableHolder::run() /mnt/ch/ClickHouse/build/../contrib/poco/Foundation/src/Thread.cpp:55:11\r\n    #15 0x42b66b80 in Poco::ThreadImpl::runnableEntry(void*) /mnt/ch/ClickHouse/build/../contrib/poco/Foundation/src/Thread_POSIX.cpp:345:27\r\n    #16 0x7f4969d39258 in start_thread (/usr/lib/libpthread.so.0+0x9258)\r\n    #17 0x7f4969c625e2 in clone (/usr/lib/libc.so.6+0xfe5e2)\r\n\r\n  Uninitialized value was created by a heap allocation\r\n    #0 0x98af713 in malloc (/mnt/ch/ClickHouse/build/programs/clickhouse+0x98af713)\r\n    #1 0x9b56b01 in Allocator<false, false>::allocNoTrack(unsigned long, unsigned long) /mnt/ch/ClickHouse/build/../src/Common/Allocator.h:227:27\r\n    #2 0xa50fee3 in Allocator<false, false>::alloc(unsigned long, unsigned long) /mnt/ch/ClickHouse/build/../src/Common/Allocator.h:96:16\r\n    #3 0xa50fee3 in DB::Arena::MemoryChunk::MemoryChunk(unsigned long, DB::Arena::MemoryChunk*) /mnt/ch/ClickHouse/build/../src/Common/Arena.h:54:64\r\n    #4 0x1b5d59a3 in std::__1::shared_ptr<DB::Arena> std::__1::allocate_shared<DB::Arena, std::__1::allocator<DB::Arena>, void>(std::__1::allocator<DB::Arena> const&) (/mnt/ch/ClickHouse/build/programs/clickhouse+0x1b5d59a3)\r\n    #5 0x321b1029 in std::__1::shared_ptr<DB::Arena> std::__1::make_shared<DB::Arena, void>() /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:3369:12\r\n    #6 0x321b1029 in DB::AggregatedDataVariants::AggregatedDataVariants() /mnt/ch/ClickHouse/build/../src/Interpreters/Aggregator.h:637:52\r\n    #7 0x34bd8ef8 in void std::__1::allocator<DB::AggregatedDataVariants>::construct<DB::AggregatedDataVariants>(DB::AggregatedDataVariants*) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:886:28\r\n    #8 0x34bd8ef8 in void std::__1::allocator_traits<std::__1::allocator<DB::AggregatedDataVariants> >::__construct<DB::AggregatedDataVariants>(std::__1::integral_constant<bool, true>, std::__1::allocator<DB::AggregatedDataVariants>&, DB::AggregatedDataVariants*) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/__memory/allocator_traits.h:519:21\r\n    #9 0x34bd8ef8 in void std::__1::allocator_traits<std::__1::allocator<DB::AggregatedDataVariants> >::construct<DB::AggregatedDataVariants>(std::__1::allocator<DB::AggregatedDataVariants>&, DB::AggregatedDataVariants*) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/__memory/allocator_traits.h:481:14\r\n    #10 0x34bd8ef8 in std::__1::__shared_ptr_emplace<DB::AggregatedDataVariants, std::__1::allocator<DB::AggregatedDataVariants> >::__shared_ptr_emplace<>(std::__1::allocator<DB::AggregatedDataVariants>) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:2594:9\r\n    #11 0x34bd8ef8 in std::__1::shared_ptr<DB::AggregatedDataVariants> std::__1::allocate_shared<DB::AggregatedDataVariants, std::__1::allocator<DB::AggregatedDataVariants>, void>(std::__1::allocator<DB::AggregatedDataVariants> const&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:3360:55\r\n    #12 0x34bd8ef8 in std::__1::shared_ptr<DB::AggregatedDataVariants> std::__1::make_shared<DB::AggregatedDataVariants, void>() /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:3369:12\r\n    #13 0x34bd81bf in DB::ManyAggregatedData::ManyAggregatedData(unsigned long) /mnt/ch/ClickHouse/build/../src/Processors/Transforms/AggregatingTransform.h:54:20\r\n    #14 0x35cc75c2 in std::__1::__unique_if<DB::ManyAggregatedData>::__unique_single std::__1::make_unique<DB::ManyAggregatedData, int>(int&&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:2068:32\r\n    #15 0x35cc75c2 in DB::AggregatingTransform::AggregatingTransform(DB::Block, std::__1::shared_ptr<DB::AggregatingTransformParams>) /mnt/ch/ClickHouse/build/../src/Processors/Transforms/AggregatingTransform.cpp:393:7\r\n    #16 0x35f28ce8 in void std::__1::allocator<DB::AggregatingTransform>::construct<DB::AggregatingTransform, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&>(DB::AggregatingTransform*, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:886:28\r\n    #17 0x35f28ce8 in void std::__1::allocator_traits<std::__1::allocator<DB::AggregatingTransform> >::__construct<DB::AggregatingTransform, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&>(std::__1::integral_constant<bool, true>, std::__1::allocator<DB::AggregatingTransform>&, DB::AggregatingTransform*, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/__memory/allocator_traits.h:519:21\r\n    #18 0x35f28ce8 in void std::__1::allocator_traits<std::__1::allocator<DB::AggregatingTransform> >::construct<DB::AggregatingTransform, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&>(std::__1::allocator<DB::AggregatingTransform>&, DB::AggregatingTransform*, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/__memory/allocator_traits.h:481:14\r\n    #19 0x35f28ce8 in std::__1::__shared_ptr_emplace<DB::AggregatingTransform, std::__1::allocator<DB::AggregatingTransform> >::__shared_ptr_emplace<DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&>(std::__1::allocator<DB::AggregatingTransform>, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:2594:9\r\n    #20 0x35f28ce8 in std::__1::shared_ptr<DB::AggregatingTransform> std::__1::allocate_shared<DB::AggregatingTransform, std::__1::allocator<DB::AggregatingTransform>, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&, void>(std::__1::allocator<DB::AggregatingTransform> const&, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:3360:55\r\n    #21 0x35f1bb60 in std::__1::shared_ptr<DB::AggregatingTransform> std::__1::make_shared<DB::AggregatingTransform, DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&, void>(DB::Block const&, std::__1::shared_ptr<DB::AggregatingTransformParams>&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/memory:3369:12\r\n    #22 0x35f1bb60 in DB::AggregatingStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&)::$_4::operator()(DB::Block const&) const /mnt/ch/ClickHouse/build/../src/Processors/QueryPlan/AggregatingStep.cpp:154:20\r\n    #23 0x35f1bb60 in decltype(std::__1::forward<DB::AggregatingStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&)::$_4&>(fp)(std::__1::forward<DB::Block const&>(fp0))) std::__1::__invoke<DB::AggregatingStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&)::$_4&, DB::Block const&>(DB::AggregatingStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&)::$_4&, DB::Block const&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/type_traits:3676:1\r\n    #24 0x35f1bb60 in std::__1::shared_ptr<DB::IProcessor> std::__1::__invoke_void_return_wrapper<std::__1::shared_ptr<DB::IProcessor> >::__call<DB::AggregatingStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&)::$_4&, DB::Block const&>(DB::AggregatingStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&)::$_4&, DB::Block const&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/__functional_base:317:16\r\n    #25 0x35f1bb60 in std::__1::__function::__default_alloc_func<DB::AggregatingStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&)::$_4, std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)>::operator()(DB::Block const&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/functional:1608:12\r\n    #26 0x35f1bb60 in std::__1::shared_ptr<DB::IProcessor> std::__1::__function::__policy_invoker<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)>::__call_impl<std::__1::__function::__default_alloc_func<DB::AggregatingStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&)::$_4, std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> >(std::__1::__function::__policy_storage const*, DB::Block const&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/functional:2089:16\r\n    #27 0x355e1acf in std::__1::__function::__policy_func<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)>::operator()(DB::Block const&) const /mnt/ch/ClickHouse/build/../contrib/libcxx/include/functional:2221:16\r\n    #28 0x355e1acf in std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)>::operator()(DB::Block const&) const /mnt/ch/ClickHouse/build/../contrib/libcxx/include/functional:2560:12\r\n    #29 0x355e1acf in DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::$_2::operator()(DB::Block const&, DB::Pipe::StreamType) const /mnt/ch/ClickHouse/build/../src/Processors/Pipe.cpp:666:78\r\n    #30 0x355e1acf in decltype(std::__1::forward<DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::$_2&>(fp)(std::__1::forward<DB::Block const&>(fp0), std::__1::forward<DB::Pipe::StreamType>(fp0))) std::__1::__invoke<DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::$_2&, DB::Block const&, DB::Pipe::StreamType>(DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::$_2&, DB::Block const&, DB::Pipe::StreamType&&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/type_traits:3676:1\r\n    #31 0x355e1acf in std::__1::shared_ptr<DB::IProcessor> std::__1::__invoke_void_return_wrapper<std::__1::shared_ptr<DB::IProcessor> >::__call<DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::$_2&, DB::Block const&, DB::Pipe::StreamType>(DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::$_2&, DB::Block const&, DB::Pipe::StreamType&&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/__functional_base:317:16\r\n    #32 0x355e1acf in std::__1::__function::__default_alloc_func<DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::$_2, std::__1::shared_ptr<DB::IProcessor> (DB::Block const&, DB::Pipe::StreamType)>::operator()(DB::Block const&, DB::Pipe::StreamType&&) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/functional:1608:12\r\n    #33 0x355e1acf in std::__1::shared_ptr<DB::IProcessor> std::__1::__function::__policy_invoker<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&, DB::Pipe::StreamType)>::__call_impl<std::__1::__function::__default_alloc_func<DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&)::$_2, std::__1::shared_ptr<DB::IProcessor> (DB::Block const&, DB::Pipe::StreamType)> >(std::__1::__function::__policy_storage const*, DB::Block const&, DB::Pipe::StreamType) /mnt/ch/ClickHouse/build/../contrib/libcxx/include/functional:2089:16\r\n    #34 0x355d3528 in std::__1::__function::__policy_func<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&, DB::Pipe::StreamType)>::operator()(DB::Block const&, DB::Pipe::StreamType&&) const /mnt/ch/ClickHouse/build/../contrib/libcxx/include/functional:2221:16\r\n    #35 0x355d3528 in std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&, DB::Pipe::StreamType)>::operator()(DB::Block const&, DB::Pipe::StreamType) const /mnt/ch/ClickHouse/build/../contrib/libcxx/include/functional:2560:12\r\n    #36 0x355d3528 in DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&, DB::Pipe::StreamType)> const&)::$_1::operator()(DB::OutputPort*&, DB::Pipe::StreamType) const /mnt/ch/ClickHouse/build/../src/Processors/Pipe.cpp:620:26\r\n    #37 0x355d2deb in DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&, DB::Pipe::StreamType)> const&) /mnt/ch/ClickHouse/build/../src/Processors/Pipe.cpp:656:9\r\n    #38 0x355d54f6 in DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&) /mnt/ch/ClickHouse/build/../src/Processors/Pipe.cpp:666:5\r\n    #39 0x3560cd61 in DB::QueryPipeline::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&) /mnt/ch/ClickHouse/build/../src/Processors/QueryPipeline.cpp:85:10\r\n    #40 0x35f16c85 in DB::AggregatingStep::transformPipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&) /mnt/ch/ClickHouse/build/../src/Processors/QueryPlan/AggregatingStep.cpp:152:18\r\n    #41 0x35fcf45c in DB::ITransformingStep::updatePipeline(std::__1::vector<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> >, std::__1::allocator<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> > > >, DB::BuildQueryPipelineSettings const&) /mnt/ch/ClickHouse/build/../src/Processors/QueryPlan/ITransformingStep.cpp:48:9\r\n    #42 0x3603cf8f in DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) /mnt/ch/ClickHouse/build/../src/Processors/QueryPlan/QueryPlan.cpp:168:47\r\n    #43 0x32735fe4 in DB::InterpreterSelectWithUnionQuery::execute() /mnt/ch/ClickHouse/build/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:313:32\r\n    #44 0x32f179a9 in DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) /mnt/ch/ClickHouse/build/../src/Interpreters/executeQuery.cpp:561:32\r\n\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /mnt/ch/ClickHouse/build/../src/IO/VarInt.h in DB::writeVarUInt(unsigned long, DB::WriteBuffer&)\r\n```\nOf course crash is not acceptable, but building state on the top of some other state is kinda odd. Do you have any practical use case when it may be needed?\r\n\r\nMaybe we can just forbid it, instead of fixing it? \n> Of course crash is not acceptable, but building state on the top of some other state is kinda odd. Do you have any practical use case when it may be needed?\r\n\r\nNot at all, this originally comes from an error in a larger SQL.\r\n\r\n> Maybe we can just forbid it, instead of fixing it?\r\n\r\nI don't see an issue with that. Would that also forbid calling Agg2Merge over Agg1State (which I also don't see an issue with)?",
  "created_at": "2021-05-26T11:18:50Z"
}