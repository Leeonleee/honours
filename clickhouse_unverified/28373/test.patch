diff --git a/tests/integration/test_dictionaries_dependency_xml/test.py b/tests/integration/test_dictionaries_dependency_xml/test.py
index cfd7d58d574f..849fdf579804 100644
--- a/tests/integration/test_dictionaries_dependency_xml/test.py
+++ b/tests/integration/test_dictionaries_dependency_xml/test.py
@@ -6,7 +6,7 @@
                     'configs/dictionaries/dep_z.xml']
 
 cluster = ClickHouseCluster(__file__)
-instance = cluster.add_instance('instance', dictionaries=DICTIONARY_FILES)
+instance = cluster.add_instance('instance', dictionaries=DICTIONARY_FILES, stay_alive=True)
 
 
 @pytest.fixture(scope="module")
@@ -73,3 +73,45 @@ def test_get_data(started_cluster):
     assert query("SELECT dictGetString('dep_x', 'a', toUInt64(4))") == "ether
"
     assert query("SELECT dictGetString('dep_y', 'a', toUInt64(4))") == "ether
"
     assert query("SELECT dictGetString('dep_z', 'a', toUInt64(4))") == "ether
"
+
+def dependent_tables_assert():
+    res = instance.query("select database || '.' || name from system.tables")
+    assert "system.join" in res
+    assert "default.src" in res
+    assert "dict.dep_y" in res
+    assert "lazy.log" in res
+    assert "test.d" in res
+    assert "default.join" in res
+    assert "a.t" in res
+
+def test_dependent_tables(started_cluster):
+    query = instance.query
+    query("create database lazy engine=Lazy(10)")
+    query("create database a")
+    query("create table lazy.src (n int, m int) engine=Log")
+    query("create dictionary a.d (n int default 0, m int default 42) primary key n "
+          "source(clickhouse(host 'localhost' port tcpPort() user 'default' table 'src' password '' db 'lazy'))"
+          "lifetime(min 1 max 10) layout(flat())")
+    query("create table system.join (n int, m int) engine=Join(any, left, n)")
+    query("insert into system.join values (1, 1)")
+    query("create table src (n int, m default joinGet('system.join', 'm', 1::int),"
+                                   "t default dictGetOrNull('a.d', 'm', toUInt64(3)),"
+                                   "k default dictGet('a.d', 'm', toUInt64(4))) engine=MergeTree order by n")
+    query("create dictionary test.d (n int default 0, m int default 42) primary key n "
+          "source(clickhouse(host 'localhost' port tcpPort() user 'default' table 'src' password '' db 'default'))"
+          "lifetime(min 1 max 10) layout(flat())")
+    query("create table join (n int, m default dictGet('a.d', 'm', toUInt64(3)),"
+                                    "k default dictGet('test.d', 'm', toUInt64(0))) engine=Join(any, left, n)")
+    query("create table lazy.log (n default dictGet(test.d, 'm', toUInt64(0))) engine=Log")
+    query("create table a.t (n default joinGet('system.join', 'm', 1::int),"
+                            "m default dictGet('test.d', 'm', toUInt64(3)),"
+                            "k default joinGet(join, 'm', 1::int)) engine=MergeTree order by n")
+
+    dependent_tables_assert()
+    instance.restart_clickhouse()
+    dependent_tables_assert()
+    query("drop database a")
+    query("drop database lazy")
+    query("drop table src")
+    query("drop table join")
+    query("drop table system.join")
diff --git a/tests/queries/0_stateless/01160_table_dependencies.reference b/tests/queries/0_stateless/01160_table_dependencies.reference
new file mode 100644
index 000000000000..39a58b06076a
--- /dev/null
+++ b/tests/queries/0_stateless/01160_table_dependencies.reference
@@ -0,0 +1,6 @@
+dict1
+dict2
+dict_src
+join
+s
+t
diff --git a/tests/queries/0_stateless/01160_table_dependencies.sh b/tests/queries/0_stateless/01160_table_dependencies.sh
new file mode 100755
index 000000000000..149439f2981e
--- /dev/null
+++ b/tests/queries/0_stateless/01160_table_dependencies.sh
@@ -0,0 +1,45 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+
+$CLICKHOUSE_CLIENT -q "drop table if exists dict_src;"
+$CLICKHOUSE_CLIENT -q "drop dictionary if exists dict1;"
+$CLICKHOUSE_CLIENT -q "drop dictionary if exists dict2;"
+$CLICKHOUSE_CLIENT -q "drop table if exists join;"
+$CLICKHOUSE_CLIENT -q "drop table if exists t;"
+
+$CLICKHOUSE_CLIENT -q "create table dict_src (n int, m int, s String) engine=MergeTree order by n;"
+
+$CLICKHOUSE_CLIENT -q "create dictionary dict1 (n int default 0, m int default 1, s String default 'qqq')
+PRIMARY KEY n
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dict_src' PASSWORD '' DB '$CLICKHOUSE_DATABASE'))
+LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT());"
+
+$CLICKHOUSE_CLIENT -q "create table join(n int, m int default dictGet('$CLICKHOUSE_DATABASE.dict1', 'm', 42::UInt64)) engine=Join(any, left, n);"
+
+$CLICKHOUSE_CLIENT -q "create dictionary dict2 (n int default 0, m int DEFAULT 2, s String default 'asd')
+PRIMARY KEY n
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'join' PASSWORD '' DB '$CLICKHOUSE_DATABASE'))
+LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT());"
+
+$CLICKHOUSE_CLIENT -q "create table s (x default joinGet($CLICKHOUSE_DATABASE.join, 'm', 42::int)) engine=Set"
+
+$CLICKHOUSE_CLIENT -q "create table t (n int, m int default joinGet($CLICKHOUSE_DATABASE.join, 'm', 42::int),
+s String default dictGet($CLICKHOUSE_DATABASE.dict1, 's', 42::UInt64), x default in(1, $CLICKHOUSE_DATABASE.s)) engine=MergeTree order by n;"
+
+CLICKHOUSE_CLIENT_DEFAULT_DB=$(echo ${CLICKHOUSE_CLIENT} | sed 's/'"--database=${CLICKHOUSE_DATABASE}"'/--database=default/g')
+
+for _ in {1..10}; do
+  $CLICKHOUSE_CLIENT_DEFAULT_DB -q "detach database $CLICKHOUSE_DATABASE;"
+  $CLICKHOUSE_CLIENT_DEFAULT_DB -q "attach database $CLICKHOUSE_DATABASE;"
+done
+$CLICKHOUSE_CLIENT -q "show tables from $CLICKHOUSE_DATABASE;"
+
+$CLICKHOUSE_CLIENT -q "drop table dict_src;"
+$CLICKHOUSE_CLIENT -q "drop dictionary dict1;"
+$CLICKHOUSE_CLIENT -q "drop dictionary dict2;"
+$CLICKHOUSE_CLIENT -q "drop table join;"
+$CLICKHOUSE_CLIENT -q "drop table t;"
diff --git a/tests/queries/0_stateless/01372_remote_table_function_empty_table.sql b/tests/queries/0_stateless/01372_remote_table_function_empty_table.sql
index 4153dc632f3f..55c9d3f63d35 100644
--- a/tests/queries/0_stateless/01372_remote_table_function_empty_table.sql
+++ b/tests/queries/0_stateless/01372_remote_table_function_empty_table.sql
@@ -1,4 +1,4 @@
-SELECT * FROM remote('127..2', 'a.'); -- { serverError 36 }
+SELECT * FROM remote('127..2', 'a.'); -- { serverError 62 }
 
 -- Clear cache to avoid future errors in the logs
 SYSTEM DROP DNS CACHE
