{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67733,
  "instance_id": "ClickHouse__ClickHouse-67733",
  "issue_numbers": [
    "66074"
  ],
  "base_commit": "a38700e5d1d0507873449e1c9d30e198f4c16920",
  "patch": "diff --git a/docs/en/sql-reference/statements/system.md b/docs/en/sql-reference/statements/system.md\nindex 2b3ce53f1c72..baa108a93a51 100644\n--- a/docs/en/sql-reference/statements/system.md\n+++ b/docs/en/sql-reference/statements/system.md\n@@ -506,6 +506,18 @@ Will do sync syscall.\n SYSTEM SYNC FILE CACHE [ON CLUSTER cluster_name]\n ```\n \n+### LOAD PRIMARY KEY\n+\n+Load the primary keys for the given table or for all tables.\n+\n+```sql\n+SYSTEM LOAD PRIMARY KEY [db.]name\n+```\n+\n+```sql\n+SYSTEM LOAD PRIMARY KEY\n+```\n+\n ### UNLOAD PRIMARY KEY\n \n Unload the primary keys for the given table or for all tables.\ndiff --git a/src/Access/Common/AccessType.h b/src/Access/Common/AccessType.h\nindex 1027567a753f..facb71134244 100644\n--- a/src/Access/Common/AccessType.h\n+++ b/src/Access/Common/AccessType.h\n@@ -219,6 +219,7 @@ enum class AccessType : uint8_t\n     M(SYSTEM_FAILPOINT, \"SYSTEM ENABLE FAILPOINT, SYSTEM DISABLE FAILPOINT, SYSTEM WAIT FAILPOINT\", GLOBAL, SYSTEM) \\\n     M(SYSTEM_LISTEN, \"SYSTEM START LISTEN, SYSTEM STOP LISTEN\", GLOBAL, SYSTEM) \\\n     M(SYSTEM_JEMALLOC, \"SYSTEM JEMALLOC PURGE, SYSTEM JEMALLOC ENABLE PROFILE, SYSTEM JEMALLOC DISABLE PROFILE, SYSTEM JEMALLOC FLUSH PROFILE\", GLOBAL, SYSTEM) \\\n+    M(SYSTEM_LOAD_PRIMARY_KEY, \"SYSTEM LOAD PRIMARY KEY\", TABLE, SYSTEM) \\\n     M(SYSTEM_UNLOAD_PRIMARY_KEY, \"SYSTEM UNLOAD PRIMARY KEY\", TABLE, SYSTEM) \\\n     M(SYSTEM, \"\", GROUP, ALL) /* allows to execute SYSTEM {SHUTDOWN|RELOAD CONFIG|...} */ \\\n     \\\ndiff --git a/src/Interpreters/InterpreterSystemQuery.cpp b/src/Interpreters/InterpreterSystemQuery.cpp\nindex 63e5fe1a3bd5..9aec16a3fb79 100644\n--- a/src/Interpreters/InterpreterSystemQuery.cpp\n+++ b/src/Interpreters/InterpreterSystemQuery.cpp\n@@ -818,6 +818,10 @@ BlockIO InterpreterSystemQuery::execute()\n             resetCoverage();\n             break;\n         }\n+        case Type::LOAD_PRIMARY_KEY: {\n+            loadPrimaryKeys();\n+            break;\n+        }\n         case Type::UNLOAD_PRIMARY_KEY:\n         {\n             unloadPrimaryKeys();\n@@ -1224,28 +1228,38 @@ void InterpreterSystemQuery::waitLoadingParts()\n     }\n }\n \n+void InterpreterSystemQuery::loadPrimaryKeys()\n+{\n+    loadOrUnloadPrimaryKeysImpl(true);\n+};\n+\n void InterpreterSystemQuery::unloadPrimaryKeys()\n+{\n+    loadOrUnloadPrimaryKeysImpl(false);\n+}\n+\n+void InterpreterSystemQuery::loadOrUnloadPrimaryKeysImpl(bool load)\n {\n     if (!table_id.empty())\n     {\n-        getContext()->checkAccess(AccessType::SYSTEM_UNLOAD_PRIMARY_KEY, table_id.database_name, table_id.table_name);\n+        getContext()->checkAccess(load ? AccessType::SYSTEM_LOAD_PRIMARY_KEY : AccessType::SYSTEM_UNLOAD_PRIMARY_KEY, table_id.database_name, table_id.table_name);\n         StoragePtr table = DatabaseCatalog::instance().getTable(table_id, getContext());\n \n         if (auto * merge_tree = dynamic_cast<MergeTreeData *>(table.get()))\n         {\n-            LOG_TRACE(log, \"Unloading primary keys for table {}\", table_id.getFullTableName());\n-            merge_tree->unloadPrimaryKeys();\n+            LOG_TRACE(log, \"{} primary keys for table {}\", load ? \"Loading\" : \"Unloading\", table_id.getFullTableName());\n+            load ? merge_tree->loadPrimaryKeys() : merge_tree->unloadPrimaryKeys();\n         }\n         else\n         {\n-            throw Exception(ErrorCodes::BAD_ARGUMENTS,\n-                \"Command UNLOAD PRIMARY KEY is supported only for MergeTree table, but got: {}\", table->getName());\n+            throw Exception(\n+                ErrorCodes::BAD_ARGUMENTS, \"Command {} PRIMARY KEY is supported only for MergeTree tables, but got: {}\", load ? \"LOAD\" : \"UNLOAD\", table->getName());\n         }\n     }\n     else\n     {\n-        getContext()->checkAccess(AccessType::SYSTEM_UNLOAD_PRIMARY_KEY);\n-        LOG_TRACE(log, \"Unloading primary keys for all tables\");\n+        getContext()->checkAccess(load ? AccessType::SYSTEM_LOAD_PRIMARY_KEY : AccessType::SYSTEM_UNLOAD_PRIMARY_KEY);\n+        LOG_TRACE(log, \"{} primary keys for all tables\", load ? \"Loading\" : \"Unloading\");\n \n         for (auto & database : DatabaseCatalog::instance().getDatabases())\n         {\n@@ -1253,7 +1267,7 @@ void InterpreterSystemQuery::unloadPrimaryKeys()\n             {\n                 if (auto * merge_tree = dynamic_cast<MergeTreeData *>(it->table().get()))\n                 {\n-                    merge_tree->unloadPrimaryKeys();\n+                    load ? merge_tree->loadPrimaryKeys() : merge_tree->unloadPrimaryKeys();\n                 }\n             }\n         }\n@@ -1635,6 +1649,14 @@ AccessRightsElements InterpreterSystemQuery::getRequiredAccessForDDLOnCluster()\n             required_access.emplace_back(AccessType::SYSTEM_JEMALLOC);\n             break;\n         }\n+        case Type::LOAD_PRIMARY_KEY:\n+        {\n+            if (!query.table)\n+                required_access.emplace_back(AccessType::SYSTEM_LOAD_PRIMARY_KEY);\n+            else\n+                required_access.emplace_back(AccessType::SYSTEM_LOAD_PRIMARY_KEY, query.getDatabase(), query.getTable());\n+            break;\n+        }\n         case Type::UNLOAD_PRIMARY_KEY:\n         {\n             if (!query.table)\ndiff --git a/src/Interpreters/InterpreterSystemQuery.h b/src/Interpreters/InterpreterSystemQuery.h\nindex 09cdeb720939..4c41f319de6c 100644\n--- a/src/Interpreters/InterpreterSystemQuery.h\n+++ b/src/Interpreters/InterpreterSystemQuery.h\n@@ -64,7 +64,10 @@ class InterpreterSystemQuery : public IInterpreter, WithMutableContext\n     void syncReplica(ASTSystemQuery & query);\n     void setReplicaReadiness(bool ready);\n     void waitLoadingParts();\n+\n+    void loadPrimaryKeys();\n     void unloadPrimaryKeys();\n+    void loadOrUnloadPrimaryKeysImpl(bool load);\n \n     void syncReplicatedDatabase(ASTSystemQuery & query);\n \ndiff --git a/src/Parsers/ASTSystemQuery.cpp b/src/Parsers/ASTSystemQuery.cpp\nindex ec908b02e7b7..7058c2cf5646 100644\n--- a/src/Parsers/ASTSystemQuery.cpp\n+++ b/src/Parsers/ASTSystemQuery.cpp\n@@ -173,6 +173,7 @@ void ASTSystemQuery::formatImpl(const FormatSettings & settings, FormatState & s\n         case Type::START_PULLING_REPLICATION_LOG:\n         case Type::STOP_CLEANUP:\n         case Type::START_CLEANUP:\n+        case Type::LOAD_PRIMARY_KEY:\n         case Type::UNLOAD_PRIMARY_KEY:\n         {\n             if (table)\ndiff --git a/src/Parsers/ASTSystemQuery.h b/src/Parsers/ASTSystemQuery.h\nindex 78852cd9fac0..d738ff5661e4 100644\n--- a/src/Parsers/ASTSystemQuery.h\n+++ b/src/Parsers/ASTSystemQuery.h\n@@ -105,6 +105,7 @@ class ASTSystemQuery : public IAST, public ASTQueryWithOnCluster\n         STOP_VIEWS,\n         CANCEL_VIEW,\n         TEST_VIEW,\n+        LOAD_PRIMARY_KEY,\n         UNLOAD_PRIMARY_KEY,\n         END\n     };\ndiff --git a/src/Parsers/ParserSystemQuery.cpp b/src/Parsers/ParserSystemQuery.cpp\nindex c1f33dc74a35..c498e3ecf012 100644\n--- a/src/Parsers/ParserSystemQuery.cpp\n+++ b/src/Parsers/ParserSystemQuery.cpp\n@@ -325,6 +325,7 @@ bool ParserSystemQuery::parseImpl(IParser::Pos & pos, ASTPtr & node, Expected &\n         /// START/STOP DISTRIBUTED SENDS does not require table\n         case Type::STOP_DISTRIBUTED_SENDS:\n         case Type::START_DISTRIBUTED_SENDS:\n+        case Type::LOAD_PRIMARY_KEY:\n         case Type::UNLOAD_PRIMARY_KEY:\n         {\n             if (!parseQueryWithOnClusterAndMaybeTable(res, pos, expected, /* require table = */ false, /* allow_string_literal = */ false))\ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex b4be117a208e..d7f478d2f8c1 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -9088,6 +9088,20 @@ bool MergeTreeData::initializeDiskOnConfigChange(const std::set<String> & new_ad\n     return true;\n }\n \n+void MergeTreeData::loadPrimaryKeys()\n+{\n+    static DataPartStates affordable_states = { MergeTreeDataPartState::Active, MergeTreeDataPartState::Outdated, MergeTreeDataPartState::Deleting };\n+    for (const auto & data_part : getDataParts(affordable_states))\n+    {\n+        if (data_part->isProjectionPart())\n+            continue;\n+\n+        if (!data_part->isIndexLoaded())\n+            /// We call getIndex() because it calls loadIndex() after locking its mutex, but we don't need its value.\n+            UNUSED(const_cast<IMergeTreeDataPart &>(*data_part).getIndex());\n+    }\n+}\n+\n void MergeTreeData::unloadPrimaryKeys()\n {\n     for (auto & part : getAllDataPartsVector())\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex 240cfa717487..f2dc828b29b5 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -1160,7 +1160,8 @@ class MergeTreeData : public IStorage, public WithMutableContext\n \n     static VirtualColumnsDescription createVirtuals(const StorageInMemoryMetadata & metadata);\n \n-    /// Unloads primary keys of all parts.\n+    /// Load/unload primary keys of all data parts\n+    void loadPrimaryKeys();\n     void unloadPrimaryKeys();\n \n     /// Unloads primary keys of outdated parts that are not used by any query.\n",
  "test_patch": "diff --git a/src/Access/tests/gtest_access_rights_ops.cpp b/src/Access/tests/gtest_access_rights_ops.cpp\nindex 41567905a10b..7bb187c56ca9 100644\n--- a/src/Access/tests/gtest_access_rights_ops.cpp\n+++ b/src/Access/tests/gtest_access_rights_ops.cpp\n@@ -288,7 +288,7 @@ TEST(AccessRights, Union)\n               \"SYSTEM REPLICATION QUEUES, SYSTEM VIRTUAL PARTS UPDATE, SYSTEM REDUCE BLOCKING PARTS, \"\n               \"SYSTEM DROP REPLICA, SYSTEM SYNC REPLICA, SYSTEM RESTART REPLICA, \"\n               \"SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM SYNC DATABASE REPLICA, SYSTEM FLUSH DISTRIBUTED, \"\n-              \"SYSTEM UNLOAD PRIMARY KEY, dictGet ON db1.*, GRANT TABLE ENGINE ON db1, \"\n+              \"SYSTEM LOAD PRIMARY KEY, SYSTEM UNLOAD PRIMARY KEY, dictGet ON db1.*, GRANT TABLE ENGINE ON db1, \"\n               \"GRANT SET DEFINER ON db1, GRANT NAMED COLLECTION ADMIN ON db1\");\n \n     lhs = {};\ndiff --git a/tests/integration/test_grant_and_revoke/test_with_table_engine_grant.py b/tests/integration/test_grant_and_revoke/test_with_table_engine_grant.py\nindex 63e7a2ae400e..e2cd2979a76b 100644\n--- a/tests/integration/test_grant_and_revoke/test_with_table_engine_grant.py\n+++ b/tests/integration/test_grant_and_revoke/test_with_table_engine_grant.py\n@@ -192,7 +192,7 @@ def test_grant_all_on_table():\n     instance.query(\"GRANT ALL ON test.table TO B\", user=\"A\")\n     assert (\n         instance.query(\"SHOW GRANTS FOR B\")\n-        == \"GRANT SHOW TABLES, SHOW COLUMNS, SHOW DICTIONARIES, SELECT, INSERT, ALTER TABLE, ALTER VIEW, CREATE TABLE, CREATE VIEW, CREATE DICTIONARY, DROP TABLE, DROP VIEW, DROP DICTIONARY, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, CREATE ROW POLICY, ALTER ROW POLICY, DROP ROW POLICY, SHOW ROW POLICIES, SYSTEM MERGES, SYSTEM TTL MERGES, SYSTEM FETCHES, SYSTEM MOVES, SYSTEM PULLING REPLICATION LOG, SYSTEM CLEANUP, SYSTEM VIEWS, SYSTEM SENDS, SYSTEM REPLICATION QUEUES, SYSTEM VIRTUAL PARTS UPDATE, SYSTEM REDUCE BLOCKING PARTS, SYSTEM DROP REPLICA, SYSTEM SYNC REPLICA, SYSTEM RESTART REPLICA, SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM FLUSH DISTRIBUTED, SYSTEM UNLOAD PRIMARY KEY, dictGet ON test.`table` TO B\\n\"\n+        == \"GRANT SHOW TABLES, SHOW COLUMNS, SHOW DICTIONARIES, SELECT, INSERT, ALTER TABLE, ALTER VIEW, CREATE TABLE, CREATE VIEW, CREATE DICTIONARY, DROP TABLE, DROP VIEW, DROP DICTIONARY, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, CREATE ROW POLICY, ALTER ROW POLICY, DROP ROW POLICY, SHOW ROW POLICIES, SYSTEM MERGES, SYSTEM TTL MERGES, SYSTEM FETCHES, SYSTEM MOVES, SYSTEM PULLING REPLICATION LOG, SYSTEM CLEANUP, SYSTEM VIEWS, SYSTEM SENDS, SYSTEM REPLICATION QUEUES, SYSTEM VIRTUAL PARTS UPDATE, SYSTEM REDUCE BLOCKING PARTS, SYSTEM DROP REPLICA, SYSTEM SYNC REPLICA, SYSTEM RESTART REPLICA, SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM FLUSH DISTRIBUTED, SYSTEM LOAD PRIMARY KEY, SYSTEM UNLOAD PRIMARY KEY, dictGet ON test.`table` TO B\\n\"\n     )\n     instance.query(\"REVOKE ALL ON test.table FROM B\", user=\"A\")\n     assert instance.query(\"SHOW GRANTS FOR B\") == \"\"\ndiff --git a/tests/queries/0_stateless/01271_show_privileges.reference b/tests/queries/0_stateless/01271_show_privileges.reference\nindex dddedb25f5a7..385ad6b443d5 100644\n--- a/tests/queries/0_stateless/01271_show_privileges.reference\n+++ b/tests/queries/0_stateless/01271_show_privileges.reference\n@@ -168,6 +168,7 @@ SYSTEM UNFREEZE\t['SYSTEM UNFREEZE']\tGLOBAL\tSYSTEM\n SYSTEM FAILPOINT\t['SYSTEM ENABLE FAILPOINT','SYSTEM DISABLE FAILPOINT','SYSTEM WAIT FAILPOINT']\tGLOBAL\tSYSTEM\n SYSTEM LISTEN\t['SYSTEM START LISTEN','SYSTEM STOP LISTEN']\tGLOBAL\tSYSTEM\n SYSTEM JEMALLOC\t['SYSTEM JEMALLOC PURGE','SYSTEM JEMALLOC ENABLE PROFILE','SYSTEM JEMALLOC DISABLE PROFILE','SYSTEM JEMALLOC FLUSH PROFILE']\tGLOBAL\tSYSTEM\n+SYSTEM LOAD PRIMARY KEY\t['SYSTEM LOAD PRIMARY KEY']\tTABLE\tSYSTEM\n SYSTEM UNLOAD PRIMARY KEY\t['SYSTEM UNLOAD PRIMARY KEY']\tTABLE\tSYSTEM\n SYSTEM\t[]\t\\N\tALL\n dictGet\t['dictHas','dictGetHierarchy','dictIsIn']\tDICTIONARY\tALL\ndiff --git a/tests/queries/0_stateless/03202_system_load_primary_key.reference b/tests/queries/0_stateless/03202_system_load_primary_key.reference\nnew file mode 100644\nindex 000000000000..5c6918eceba3\n--- /dev/null\n+++ b/tests/queries/0_stateless/03202_system_load_primary_key.reference\n@@ -0,0 +1,25 @@\n+-- Insert data into columns\n+100000\t100000\n+-- Check primary key memory after inserting into both tables\n+test\t100000000\t100000000\n+test2\t100000000\t100000000\n+-- Unload primary keys for all tables in the database\n+OK\n+-- Check the primary key memory after unloading all tables\n+test\t0\t0\n+test2\t0\t0\n+-- Load primary key for all tables\n+OK\n+-- Check the primary key memory after loading all tables\n+test\t100000000\t100000000\n+test2\t100000000\t100000000\n+-- Unload primary keys for all tables in the database\n+OK\n+-- Check the primary key memory after unloading all tables\n+test\t0\t0\n+test2\t0\t0\n+-- Load primary key for only one table\n+OK\n+-- Check the primary key memory after loading only one table\n+test\t100000000\t100000000\n+test2\t0\t0\ndiff --git a/tests/queries/0_stateless/03202_system_load_primary_key.sql b/tests/queries/0_stateless/03202_system_load_primary_key.sql\nnew file mode 100644\nindex 000000000000..485f9cd156f5\n--- /dev/null\n+++ b/tests/queries/0_stateless/03202_system_load_primary_key.sql\n@@ -0,0 +1,85 @@\n+-- Tags: no-parallel\n+DROP TABLE IF EXISTS test;\n+DROP TABLE IF EXISTS test2;\n+\n+CREATE TABLE test (s String) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;\n+CREATE TABLE test2 (s String) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;\n+\n+SELECT '-- Insert data into columns';\n+INSERT INTO test SELECT randomString(1000) FROM numbers(100000);\n+INSERT INTO test2 SELECT randomString(1000) FROM numbers(100000);\n+SELECT (SELECT count() FROM test), (SELECT count() FROM test2);\n+\n+SELECT '-- Check primary key memory after inserting into both tables';\n+SELECT\n+    table,\n+    round(primary_key_bytes_in_memory, -7),\n+    round(primary_key_bytes_in_memory_allocated, -7)\n+FROM system.parts\n+WHERE\n+    database = currentDatabase()\n+    AND table IN ('test', 'test2')\n+ORDER BY table;\n+\n+SELECT '-- Unload primary keys for all tables in the database';\n+SYSTEM UNLOAD PRIMARY KEY;\n+SELECT 'OK';\n+\n+SELECT '-- Check the primary key memory after unloading all tables';\n+SELECT\n+    table,\n+    round(primary_key_bytes_in_memory, -7),\n+    round(primary_key_bytes_in_memory_allocated, -7)\n+FROM system.parts\n+WHERE\n+    database = currentDatabase()\n+    AND table IN ('test', 'test2')\n+ORDER BY table;\n+\n+SELECT '-- Load primary key for all tables';\n+SYSTEM LOAD PRIMARY KEY;\n+SELECT 'OK';\n+\n+SELECT '-- Check the primary key memory after loading all tables';\n+SELECT\n+    table,\n+    round(primary_key_bytes_in_memory, -7),\n+    round(primary_key_bytes_in_memory_allocated, -7)\n+FROM system.parts\n+WHERE\n+    database = currentDatabase()\n+    AND table IN ('test', 'test2')\n+ORDER BY table;\n+\n+SELECT '-- Unload primary keys for all tables in the database';\n+SYSTEM UNLOAD PRIMARY KEY;\n+SELECT 'OK';\n+\n+SELECT '-- Check the primary key memory after unloading all tables';\n+SELECT\n+    table,\n+    round(primary_key_bytes_in_memory, -7),\n+    round(primary_key_bytes_in_memory_allocated, -7)\n+FROM system.parts\n+WHERE\n+    database = currentDatabase()\n+    AND table IN ('test', 'test2')\n+ORDER BY table;\n+\n+SELECT '-- Load primary key for only one table';\n+SYSTEM LOAD PRIMARY KEY test;\n+SELECT 'OK';\n+\n+SELECT '-- Check the primary key memory after loading only one table';\n+SELECT\n+    table,\n+    round(primary_key_bytes_in_memory, -7),\n+    round(primary_key_bytes_in_memory_allocated, -7)\n+FROM system.parts\n+WHERE\n+    database = currentDatabase()\n+    AND table IN ('test', 'test2')\n+ORDER BY table;\n+\n+DROP TABLE test;\n+DROP TABLE test2;\n",
  "problem_statement": "Query `SYSTEM LOAD PRIMARY KEY`\n**Use case**\r\n\r\nThere is a query `SYSTEM UNLOAD PRIMARY KEY`, why not to have `SYSTEM LOAD PRIMARY KEY`. Probably may be useful for benchmarks to be sure that index is loaded for all parts and loading index doesn't give extra latency.\r\n\r\n**Describe the solution you'd like**\r\n\r\nPrimary index is loaded for all parts of table.\r\n\n",
  "hints_text": "Hi! I think I could take a look at this issue. And trying to add test cases on my changes right now :)",
  "created_at": "2024-08-03T18:03:13Z"
}