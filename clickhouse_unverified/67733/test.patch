diff --git a/src/Access/tests/gtest_access_rights_ops.cpp b/src/Access/tests/gtest_access_rights_ops.cpp
index 41567905a10b..7bb187c56ca9 100644
--- a/src/Access/tests/gtest_access_rights_ops.cpp
+++ b/src/Access/tests/gtest_access_rights_ops.cpp
@@ -288,7 +288,7 @@ TEST(AccessRights, Union)
               "SYSTEM REPLICATION QUEUES, SYSTEM VIRTUAL PARTS UPDATE, SYSTEM REDUCE BLOCKING PARTS, "
               "SYSTEM DROP REPLICA, SYSTEM SYNC REPLICA, SYSTEM RESTART REPLICA, "
               "SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM SYNC DATABASE REPLICA, SYSTEM FLUSH DISTRIBUTED, "
-              "SYSTEM UNLOAD PRIMARY KEY, dictGet ON db1.*, GRANT TABLE ENGINE ON db1, "
+              "SYSTEM LOAD PRIMARY KEY, SYSTEM UNLOAD PRIMARY KEY, dictGet ON db1.*, GRANT TABLE ENGINE ON db1, "
               "GRANT SET DEFINER ON db1, GRANT NAMED COLLECTION ADMIN ON db1");
 
     lhs = {};
diff --git a/tests/integration/test_grant_and_revoke/test_with_table_engine_grant.py b/tests/integration/test_grant_and_revoke/test_with_table_engine_grant.py
index 63e7a2ae400e..e2cd2979a76b 100644
--- a/tests/integration/test_grant_and_revoke/test_with_table_engine_grant.py
+++ b/tests/integration/test_grant_and_revoke/test_with_table_engine_grant.py
@@ -192,7 +192,7 @@ def test_grant_all_on_table():
     instance.query("GRANT ALL ON test.table TO B", user="A")
     assert (
         instance.query("SHOW GRANTS FOR B")
-        == "GRANT SHOW TABLES, SHOW COLUMNS, SHOW DICTIONARIES, SELECT, INSERT, ALTER TABLE, ALTER VIEW, CREATE TABLE, CREATE VIEW, CREATE DICTIONARY, DROP TABLE, DROP VIEW, DROP DICTIONARY, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, CREATE ROW POLICY, ALTER ROW POLICY, DROP ROW POLICY, SHOW ROW POLICIES, SYSTEM MERGES, SYSTEM TTL MERGES, SYSTEM FETCHES, SYSTEM MOVES, SYSTEM PULLING REPLICATION LOG, SYSTEM CLEANUP, SYSTEM VIEWS, SYSTEM SENDS, SYSTEM REPLICATION QUEUES, SYSTEM VIRTUAL PARTS UPDATE, SYSTEM REDUCE BLOCKING PARTS, SYSTEM DROP REPLICA, SYSTEM SYNC REPLICA, SYSTEM RESTART REPLICA, SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM FLUSH DISTRIBUTED, SYSTEM UNLOAD PRIMARY KEY, dictGet ON test.`table` TO B
"
+        == "GRANT SHOW TABLES, SHOW COLUMNS, SHOW DICTIONARIES, SELECT, INSERT, ALTER TABLE, ALTER VIEW, CREATE TABLE, CREATE VIEW, CREATE DICTIONARY, DROP TABLE, DROP VIEW, DROP DICTIONARY, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, CREATE ROW POLICY, ALTER ROW POLICY, DROP ROW POLICY, SHOW ROW POLICIES, SYSTEM MERGES, SYSTEM TTL MERGES, SYSTEM FETCHES, SYSTEM MOVES, SYSTEM PULLING REPLICATION LOG, SYSTEM CLEANUP, SYSTEM VIEWS, SYSTEM SENDS, SYSTEM REPLICATION QUEUES, SYSTEM VIRTUAL PARTS UPDATE, SYSTEM REDUCE BLOCKING PARTS, SYSTEM DROP REPLICA, SYSTEM SYNC REPLICA, SYSTEM RESTART REPLICA, SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM FLUSH DISTRIBUTED, SYSTEM LOAD PRIMARY KEY, SYSTEM UNLOAD PRIMARY KEY, dictGet ON test.`table` TO B
"
     )
     instance.query("REVOKE ALL ON test.table FROM B", user="A")
     assert instance.query("SHOW GRANTS FOR B") == ""
diff --git a/tests/queries/0_stateless/01271_show_privileges.reference b/tests/queries/0_stateless/01271_show_privileges.reference
index dddedb25f5a7..385ad6b443d5 100644
--- a/tests/queries/0_stateless/01271_show_privileges.reference
+++ b/tests/queries/0_stateless/01271_show_privileges.reference
@@ -168,6 +168,7 @@ SYSTEM UNFREEZE	['SYSTEM UNFREEZE']	GLOBAL	SYSTEM
 SYSTEM FAILPOINT	['SYSTEM ENABLE FAILPOINT','SYSTEM DISABLE FAILPOINT','SYSTEM WAIT FAILPOINT']	GLOBAL	SYSTEM
 SYSTEM LISTEN	['SYSTEM START LISTEN','SYSTEM STOP LISTEN']	GLOBAL	SYSTEM
 SYSTEM JEMALLOC	['SYSTEM JEMALLOC PURGE','SYSTEM JEMALLOC ENABLE PROFILE','SYSTEM JEMALLOC DISABLE PROFILE','SYSTEM JEMALLOC FLUSH PROFILE']	GLOBAL	SYSTEM
+SYSTEM LOAD PRIMARY KEY	['SYSTEM LOAD PRIMARY KEY']	TABLE	SYSTEM
 SYSTEM UNLOAD PRIMARY KEY	['SYSTEM UNLOAD PRIMARY KEY']	TABLE	SYSTEM
 SYSTEM	[]	\N	ALL
 dictGet	['dictHas','dictGetHierarchy','dictIsIn']	DICTIONARY	ALL
diff --git a/tests/queries/0_stateless/03202_system_load_primary_key.reference b/tests/queries/0_stateless/03202_system_load_primary_key.reference
new file mode 100644
index 000000000000..5c6918eceba3
--- /dev/null
+++ b/tests/queries/0_stateless/03202_system_load_primary_key.reference
@@ -0,0 +1,25 @@
+-- Insert data into columns
+100000	100000
+-- Check primary key memory after inserting into both tables
+test	100000000	100000000
+test2	100000000	100000000
+-- Unload primary keys for all tables in the database
+OK
+-- Check the primary key memory after unloading all tables
+test	0	0
+test2	0	0
+-- Load primary key for all tables
+OK
+-- Check the primary key memory after loading all tables
+test	100000000	100000000
+test2	100000000	100000000
+-- Unload primary keys for all tables in the database
+OK
+-- Check the primary key memory after unloading all tables
+test	0	0
+test2	0	0
+-- Load primary key for only one table
+OK
+-- Check the primary key memory after loading only one table
+test	100000000	100000000
+test2	0	0
diff --git a/tests/queries/0_stateless/03202_system_load_primary_key.sql b/tests/queries/0_stateless/03202_system_load_primary_key.sql
new file mode 100644
index 000000000000..485f9cd156f5
--- /dev/null
+++ b/tests/queries/0_stateless/03202_system_load_primary_key.sql
@@ -0,0 +1,85 @@
+-- Tags: no-parallel
+DROP TABLE IF EXISTS test;
+DROP TABLE IF EXISTS test2;
+
+CREATE TABLE test (s String) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;
+CREATE TABLE test2 (s String) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;
+
+SELECT '-- Insert data into columns';
+INSERT INTO test SELECT randomString(1000) FROM numbers(100000);
+INSERT INTO test2 SELECT randomString(1000) FROM numbers(100000);
+SELECT (SELECT count() FROM test), (SELECT count() FROM test2);
+
+SELECT '-- Check primary key memory after inserting into both tables';
+SELECT
+    table,
+    round(primary_key_bytes_in_memory, -7),
+    round(primary_key_bytes_in_memory_allocated, -7)
+FROM system.parts
+WHERE
+    database = currentDatabase()
+    AND table IN ('test', 'test2')
+ORDER BY table;
+
+SELECT '-- Unload primary keys for all tables in the database';
+SYSTEM UNLOAD PRIMARY KEY;
+SELECT 'OK';
+
+SELECT '-- Check the primary key memory after unloading all tables';
+SELECT
+    table,
+    round(primary_key_bytes_in_memory, -7),
+    round(primary_key_bytes_in_memory_allocated, -7)
+FROM system.parts
+WHERE
+    database = currentDatabase()
+    AND table IN ('test', 'test2')
+ORDER BY table;
+
+SELECT '-- Load primary key for all tables';
+SYSTEM LOAD PRIMARY KEY;
+SELECT 'OK';
+
+SELECT '-- Check the primary key memory after loading all tables';
+SELECT
+    table,
+    round(primary_key_bytes_in_memory, -7),
+    round(primary_key_bytes_in_memory_allocated, -7)
+FROM system.parts
+WHERE
+    database = currentDatabase()
+    AND table IN ('test', 'test2')
+ORDER BY table;
+
+SELECT '-- Unload primary keys for all tables in the database';
+SYSTEM UNLOAD PRIMARY KEY;
+SELECT 'OK';
+
+SELECT '-- Check the primary key memory after unloading all tables';
+SELECT
+    table,
+    round(primary_key_bytes_in_memory, -7),
+    round(primary_key_bytes_in_memory_allocated, -7)
+FROM system.parts
+WHERE
+    database = currentDatabase()
+    AND table IN ('test', 'test2')
+ORDER BY table;
+
+SELECT '-- Load primary key for only one table';
+SYSTEM LOAD PRIMARY KEY test;
+SELECT 'OK';
+
+SELECT '-- Check the primary key memory after loading only one table';
+SELECT
+    table,
+    round(primary_key_bytes_in_memory, -7),
+    round(primary_key_bytes_in_memory_allocated, -7)
+FROM system.parts
+WHERE
+    database = currentDatabase()
+    AND table IN ('test', 'test2')
+ORDER BY table;
+
+DROP TABLE test;
+DROP TABLE test2;
