{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 47535,
  "instance_id": "ClickHouse__ClickHouse-47535",
  "issue_numbers": [
    "47529"
  ],
  "base_commit": "fa6fd10e1b166375ea67c70a4ff67937efc28223",
  "patch": "diff --git a/src/Functions/positionCaseInsensitive.cpp b/src/Functions/positionCaseInsensitive.cpp\nindex 4e3b670fe54a..f71ce0078ccc 100644\n--- a/src/Functions/positionCaseInsensitive.cpp\n+++ b/src/Functions/positionCaseInsensitive.cpp\n@@ -20,5 +20,6 @@ using FunctionPositionCaseInsensitive = FunctionsStringSearch<PositionImpl<NameP\n REGISTER_FUNCTION(PositionCaseInsensitive)\n {\n     factory.registerFunction<FunctionPositionCaseInsensitive>();\n+    factory.registerAlias(\"instr\", NamePositionCaseInsensitive::name, FunctionFactory::CaseInsensitive);\n }\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02680_instr_alias_for_position_case_insensitive.reference b/tests/queries/0_stateless/02680_instr_alias_for_position_case_insensitive.reference\nnew file mode 100644\nindex 000000000000..4792e70f3330\n--- /dev/null\n+++ b/tests/queries/0_stateless/02680_instr_alias_for_position_case_insensitive.reference\n@@ -0,0 +1,2 @@\n+2\n+3\ndiff --git a/tests/queries/0_stateless/02680_instr_alias_for_position_case_insensitive.sql b/tests/queries/0_stateless/02680_instr_alias_for_position_case_insensitive.sql\nnew file mode 100644\nindex 000000000000..c1c55c2c9827\n--- /dev/null\n+++ b/tests/queries/0_stateless/02680_instr_alias_for_position_case_insensitive.sql\n@@ -0,0 +1,2 @@\n+select INSTR('hello', 'e');\n+select INSTR('hELlo', 'L');\n",
  "problem_statement": "MySQL compatibility: INSTR function support\n**Use case**\r\n\r\n_NB: [the cell towers dataset](https://clickhouse.com/docs/en/getting-started/example-datasets/cell-towers/) is used here as an example._\r\n\r\nWhen using Looker Studio with ClickHouse as a pseudo-MySQL data source, the following query fails because [INSTR](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_instr) is not supported yet:\r\n\r\n```\r\nSELECT radio, mcc, net, area, cell, unit, lon, lat, range, samples, changeable, created, updated, averageSignal \r\nFROM datasets.cell_towers \r\nWHERE INSTR(radio, 'M') > 0\r\n```\r\n\r\nThis limits the usage of the string-type filters in Looker Studio.\r\n\r\nFull stack trace:\r\n\r\n```\r\n2023.03.10 20:12:34.022342 [ 512 ] {mysql:2634:6c4d87ce-4b56-4ddb-80a7-92d81a69eb9b} <Error> executeQuery: Code: 46. DB::Exception: Unknown function INSTR: While processing SELECT radio, mcc, net, area, cell, unit, lon, lat, range, samples, changeable, created, updated, averageSignal FROM datasets.cell_towers WHERE INSTR(radio, 'M') > 0. (UNKNOWN_FUNCTION) (version 23.3.1.387 (official build)) (from 74.125.88.50:36828) (in query: SELECT AVG(area) AS qt_3rarca233c, COUNT(1) AS qt_6er8nps33c, MAX(range) AS qt_6huada233c, SUM(area) AS qt_b9ehfa233c, MIN(range) AS qt_ufjdha233c, radio FROM (SELECT * FROM datasets.cell_towers) AS t WHERE (INSTR(radio, 'M') > 0) GROUP BY radio;), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xe0cb6d5 in /usr/bin/clickhouse\r\n1. ? @ 0xe17079e in /usr/bin/clickhouse\r\n2. DB::FunctionFactory::getImpl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context const>) const @ 0x123d659f in /usr/bin/clickhouse\r\n3. DB::FunctionFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context const>) const @ 0x123d70ca in /usr/bin/clickhouse\r\n4. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x12d13746 in /usr/bin/clickhouse\r\n5. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x12d14369 in /usr/bin/clickhouse\r\n6. DB::ActionsMatcher::visit(std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x12d10941 in /usr/bin/clickhouse\r\n7. ? @ 0x12d07e55 in /usr/bin/clickhouse\r\n8. DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ActionsDAG>&, bool) @ 0x12ce691b in /usr/bin/clickhouse\r\n9. DB::KeyCondition::getBlockWithConstants(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::TreeRewriterResult const> const&, std::__1::shared_ptr<DB::Context const>) @ 0x1421db35 in /usr/bin/clickhouse\r\n10. DB::MergeTreeWhereOptimizer::MergeTreeWhereOptimizer(DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context const>, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, unsigned long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, unsigned long>>>, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, Poco::Logger*) @ 0x1444474a in /usr/bin/clickhouse\r\n11. ? @ 0x135e89e3 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135e42f9 in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x136761a2 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1367414a in /usr/bin/clickhouse\r\n15. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x136734ec in /usr/bin/clickhouse\r\n16. ? @ 0x135e99f2 in /usr/bin/clickhouse\r\n17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135e42f9 in /usr/bin/clickhouse\r\n18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x136761a2 in /usr/bin/clickhouse\r\n19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1367414a in /usr/bin/clickhouse\r\n20. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x1359ddd0 in /usr/bin/clickhouse\r\n21. ? @ 0x13996cc0 in /usr/bin/clickhouse\r\n22. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (DB::QueryResultDetails const&)>, std::__1::optional<DB::FormatSettings> const&) @ 0x1399cf32 in /usr/bin/clickhouse\r\n23. DB::MySQLHandler::comQuery(DB::ReadBuffer&) @ 0x146f5a13 in /usr/bin/clickhouse\r\n24. DB::MySQLHandler::run() @ 0x146f2502 in /usr/bin/clickhouse\r\n25. Poco::Net::TCPServerConnection::start() @ 0x176321b4 in /usr/bin/clickhouse\r\n26. Poco::Net::TCPServerDispatcher::run() @ 0x176333db in /usr/bin/clickhouse\r\n27. Poco::PooledThread::run() @ 0x177bac87 in /usr/bin/clickhouse\r\n28. Poco::ThreadImpl::runnableEntry(void*) @ 0x177b86bd in /usr/bin/clickhouse\r\n29. ? @ 0x7fcbd2203609 in ?\r\n30. __clone @ 0x7fcbd2128133 in ?\r\n\r\n2023.03.10 20:12:34.022723 [ 512 ] {} <Error> MySQLHandler: MySQLHandler: Cannot read packet: : Code: 46. DB::Exception: Unknown function INSTR: While processing SELECT radio, mcc, net, area, cell, unit, lon, lat, range, samples, changeable, created, updated, averageSignal FROM datasets.cell_towers WHERE INSTR(radio, 'M') > 0. (UNKNOWN_FUNCTION), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xe0cb6d5 in /usr/bin/clickhouse\r\n1. ? @ 0xe17079e in /usr/bin/clickhouse\r\n2. DB::FunctionFactory::getImpl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context const>) const @ 0x123d659f in /usr/bin/clickhouse\r\n3. DB::FunctionFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context const>) const @ 0x123d70ca in /usr/bin/clickhouse\r\n4. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x12d13746 in /usr/bin/clickhouse\r\n5. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x12d14369 in /usr/bin/clickhouse\r\n6. DB::ActionsMatcher::visit(std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x12d10941 in /usr/bin/clickhouse\r\n7. ? @ 0x12d07e55 in /usr/bin/clickhouse\r\n8. DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ActionsDAG>&, bool) @ 0x12ce691b in /usr/bin/clickhouse\r\n9. DB::KeyCondition::getBlockWithConstants(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::TreeRewriterResult const> const&, std::__1::shared_ptr<DB::Context const>) @ 0x1421db35 in /usr/bin/clickhouse\r\n10. DB::MergeTreeWhereOptimizer::MergeTreeWhereOptimizer(DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context const>, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, unsigned long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, unsigned long>>>, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, Poco::Logger*) @ 0x1444474a in /usr/bin/clickhouse\r\n11. ? @ 0x135e89e3 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135e42f9 in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x136761a2 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1367414a in /usr/bin/clickhouse\r\n15. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x136734ec in /usr/bin/clickhouse\r\n16. ? @ 0x135e99f2 in /usr/bin/clickhouse\r\n17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135e42f9 in /usr/bin/clickhouse\r\n18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x136761a2 in /usr/bin/clickhouse\r\n19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1367414a in /usr/bin/clickhouse\r\n20. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x1359ddd0 in /usr/bin/clickhouse\r\n21. ? @ 0x13996cc0 in /usr/bin/clickhouse\r\n22. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (DB::QueryResultDetails const&)>, std::__1::optional<DB::FormatSettings> const&) @ 0x1399cf32 in /usr/bin/clickhouse\r\n23. DB::MySQLHandler::comQuery(DB::ReadBuffer&) @ 0x146f5a13 in /usr/bin/clickhouse\r\n24. DB::MySQLHandler::run() @ 0x146f2502 in /usr/bin/clickhouse\r\n25. Poco::Net::TCPServerConnection::start() @ 0x176321b4 in /usr/bin/clickhouse\r\n26. Poco::Net::TCPServerDispatcher::run() @ 0x176333db in /usr/bin/clickhouse\r\n27. Poco::PooledThread::run() @ 0x177bac87 in /usr/bin/clickhouse\r\n28. Poco::ThreadImpl::runnableEntry(void*) @ 0x177b86bd in /usr/bin/clickhouse\r\n29. ? @ 0x7fcbd2203609 in ?\r\n30. __clone @ 0x7fcbd2128133 in ?\r\n (version 23.3.1.387 (official build))\r\n``` \r\n\r\n**Describe the solution you'd like**\r\n\r\nINSTR function is supported via MySQL wire protocol.\r\n\r\nCC @alexey-milovidov @mshustov \r\n\n",
  "hints_text": "You can use https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions#positioncaseinsensitive, also, we can add an alias for compatibility.\n@ucasfl, thanks for the quick response. Unfortunately, the query is generated by Looker Studio itself, so we cannot substitute the function call. \r\n\r\nIf functionally `positionCaseInsensitive` is exactly the same as `INSTR`, then the alias will be more than enough :+1: \r\n",
  "created_at": "2023-03-13T15:46:06Z",
  "modified_files": [
    "src/Functions/positionCaseInsensitive.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02680_instr_alias_for_position_case_insensitive.reference",
    "b/tests/queries/0_stateless/02680_instr_alias_for_position_case_insensitive.sql"
  ]
}