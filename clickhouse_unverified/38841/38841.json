{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 38841,
  "instance_id": "ClickHouse__ClickHouse-38841",
  "issue_numbers": [
    "38611"
  ],
  "base_commit": "b94489d52cf0135bbf74e5133b6940a49c0038a7",
  "patch": "diff --git a/src/Functions/isNullable.cpp b/src/Functions/isNullable.cpp\nnew file mode 100644\nindex 000000000000..35cefdbfe63e\n--- /dev/null\n+++ b/src/Functions/isNullable.cpp\n@@ -0,0 +1,61 @@\n+#include <Functions/IFunction.h>\n+#include <Functions/FunctionFactory.h>\n+#include <DataTypes/DataTypesNumber.h>\n+#include <Columns/ColumnsNumber.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+\n+/// Return true if the column is nullable.\n+class FunctionIsNullable : public IFunction\n+{\n+public:\n+    static constexpr auto name = \"isNullable\";\n+    static FunctionPtr create(ContextPtr)\n+    {\n+        return std::make_shared<FunctionIsNullable>();\n+    }\n+\n+    String getName() const override\n+    {\n+        return name;\n+    }\n+\n+    bool useDefaultImplementationForNulls() const override { return false; }\n+\n+    bool useDefaultImplementationForNothing() const override { return false; }\n+\n+    bool useDefaultImplementationForConstants() const override { return true; }\n+\n+    ColumnNumbers getArgumentsThatDontImplyNullableReturnType(size_t /*number_of_arguments*/) const override { return {0}; }\n+\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n+\n+    size_t getNumberOfArguments() const override\n+    {\n+        return 1;\n+    }\n+\n+    DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override\n+    {\n+        return std::make_shared<DataTypeUInt8>();\n+    }\n+\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t input_rows_count) const override\n+    {\n+        const auto & elem = arguments[0];\n+        return ColumnUInt8::create(input_rows_count, isColumnNullable(*elem.column));\n+    }\n+};\n+\n+}\n+\n+void registerFunctionIsNullable(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionIsNullable>();\n+}\n+\n+}\n+\ndiff --git a/src/Functions/registerFunctionsNull.cpp b/src/Functions/registerFunctionsNull.cpp\nindex 238133fbb67f..d94ee95d28f6 100644\n--- a/src/Functions/registerFunctionsNull.cpp\n+++ b/src/Functions/registerFunctionsNull.cpp\n@@ -11,6 +11,7 @@ void registerFunctionNullIf(FunctionFactory & factory);\n void registerFunctionAssumeNotNull(FunctionFactory & factory);\n void registerFunctionToNullable(FunctionFactory & factory);\n void registerFunctionIsZeroOrNull(FunctionFactory & factory);\n+void registerFunctionIsNullable(FunctionFactory & factory);\n \n \n void registerFunctionsNull(FunctionFactory & factory)\n@@ -23,6 +24,7 @@ void registerFunctionsNull(FunctionFactory & factory)\n     registerFunctionAssumeNotNull(factory);\n     registerFunctionToNullable(factory);\n     registerFunctionIsZeroOrNull(factory);\n+    registerFunctionIsNullable(factory);\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02353_isnullable.reference b/tests/queries/0_stateless/02353_isnullable.reference\nnew file mode 100644\nindex 000000000000..74240c4b196d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02353_isnullable.reference\n@@ -0,0 +1,4 @@\n+0\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/02353_isnullable.sql b/tests/queries/0_stateless/02353_isnullable.sql\nnew file mode 100644\nindex 000000000000..567e294d4987\n--- /dev/null\n+++ b/tests/queries/0_stateless/02353_isnullable.sql\n@@ -0,0 +1,5 @@\n+SELECT isNullable(3);\n+SELECT isNullable(toNullable(3));\n+\n+SELECT isNullable(NULL);\n+SELECT isNullable(materialize(NULL));\n",
  "problem_statement": "isNullable function\n**Use case**\r\n\r\nIs that column nullable or not \r\n\r\n**Describe the solution you'd like**\r\n\r\nSELECT isNullable(NULL);\r\n\r\n1 -- or true\r\n\r\n**Describe alternatives you've considered**\r\n\r\n```\r\nWITH materialize(NULL) AS x\r\nSELECT match(toColumnTypeName(x), 'Nullable') AS res\r\n\r\nQuery id: fa279bf2-38d5-41ae-89cb-187e588908db\r\n\r\n\u250c\u2500res\u2500\u2510\r\n\u2502   1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Additional context**\r\n\n",
  "hints_text": "Is anyone doing this task? I'm new to the source code of Clickhouse. This task looks like a good start for me.\n> Is anyone doing this task?\r\n\r\nNo\r\n\r\n> This task looks like a good start for me.\r\n\r\nI think, you welcome. \r\n\r\nThere is isConstant function, which you can use as inspiration i guess. ",
  "created_at": "2022-07-05T08:09:40Z"
}