diff --git a/src/Functions/isNullable.cpp b/src/Functions/isNullable.cpp
new file mode 100644
index 000000000000..35cefdbfe63e
--- /dev/null
+++ b/src/Functions/isNullable.cpp
@@ -0,0 +1,61 @@
+#include <Functions/IFunction.h>
+#include <Functions/FunctionFactory.h>
+#include <DataTypes/DataTypesNumber.h>
+#include <Columns/ColumnsNumber.h>
+
+namespace DB
+{
+namespace
+{
+
+/// Return true if the column is nullable.
+class FunctionIsNullable : public IFunction
+{
+public:
+    static constexpr auto name = "isNullable";
+    static FunctionPtr create(ContextPtr)
+    {
+        return std::make_shared<FunctionIsNullable>();
+    }
+
+    String getName() const override
+    {
+        return name;
+    }
+
+    bool useDefaultImplementationForNulls() const override { return false; }
+
+    bool useDefaultImplementationForNothing() const override { return false; }
+
+    bool useDefaultImplementationForConstants() const override { return true; }
+
+    ColumnNumbers getArgumentsThatDontImplyNullableReturnType(size_t /*number_of_arguments*/) const override { return {0}; }
+
+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }
+
+    size_t getNumberOfArguments() const override
+    {
+        return 1;
+    }
+
+    DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override
+    {
+        return std::make_shared<DataTypeUInt8>();
+    }
+
+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t input_rows_count) const override
+    {
+        const auto & elem = arguments[0];
+        return ColumnUInt8::create(input_rows_count, isColumnNullable(*elem.column));
+    }
+};
+
+}
+
+void registerFunctionIsNullable(FunctionFactory & factory)
+{
+    factory.registerFunction<FunctionIsNullable>();
+}
+
+}
+
diff --git a/src/Functions/registerFunctionsNull.cpp b/src/Functions/registerFunctionsNull.cpp
index 238133fbb67f..d94ee95d28f6 100644
--- a/src/Functions/registerFunctionsNull.cpp
+++ b/src/Functions/registerFunctionsNull.cpp
@@ -11,6 +11,7 @@ void registerFunctionNullIf(FunctionFactory & factory);
 void registerFunctionAssumeNotNull(FunctionFactory & factory);
 void registerFunctionToNullable(FunctionFactory & factory);
 void registerFunctionIsZeroOrNull(FunctionFactory & factory);
+void registerFunctionIsNullable(FunctionFactory & factory);
 
 
 void registerFunctionsNull(FunctionFactory & factory)
@@ -23,6 +24,7 @@ void registerFunctionsNull(FunctionFactory & factory)
     registerFunctionAssumeNotNull(factory);
     registerFunctionToNullable(factory);
     registerFunctionIsZeroOrNull(factory);
+    registerFunctionIsNullable(factory);
 }
 
 }
