diff --git a/src/Analyzer/ConstantNode.cpp b/src/Analyzer/ConstantNode.cpp
index 3a99ad08ad84..1fbeaa0530ed 100644
--- a/src/Analyzer/ConstantNode.cpp
+++ b/src/Analyzer/ConstantNode.cpp
@@ -114,7 +114,12 @@ void ConstantNode::dumpTreeImpl(WriteBuffer & buffer, FormatState & format_state
 
     buffer << ", constant_value: ";
     if (mask_id)
-        buffer << "[HIDDEN id: " << mask_id << "]";
+    {
+        if (mask_id == std::numeric_limits<decltype(mask_id)>::max())
+            buffer << "[HIDDEN]";
+        else
+            buffer << "[HIDDEN id: " << mask_id << "]";
+    }
     else
         buffer << constant_value->getValue().dump();
 
diff --git a/src/Analyzer/ConstantNode.h b/src/Analyzer/ConstantNode.h
index 0c88862b8792..1e1b8003ff8e 100644
--- a/src/Analyzer/ConstantNode.h
+++ b/src/Analyzer/ConstantNode.h
@@ -82,7 +82,7 @@ class ConstantNode final : public IQueryTreeNode
     /// Check if constant is a result of _CAST function constant folding.
     bool receivedFromInitiatorServer() const;
 
-    void setMaskId(size_t id)
+    void setMaskId(size_t id = std::numeric_limits<decltype(mask_id)>::max())
     {
         mask_id = id;
     }
diff --git a/src/Analyzer/FunctionSecretArgumentsFinderTreeNode.h b/src/Analyzer/FunctionSecretArgumentsFinderTreeNode.h
index c598adfd98e1..8bcb6e147420 100644
--- a/src/Analyzer/FunctionSecretArgumentsFinderTreeNode.h
+++ b/src/Analyzer/FunctionSecretArgumentsFinderTreeNode.h
@@ -3,13 +3,30 @@
 #include <Parsers/FunctionSecretArgumentsFinder.h>
 #include <Analyzer/ConstantNode.h>
 #include <Analyzer/FunctionNode.h>
+#include <Analyzer/TableFunctionNode.h>
 #include <Analyzer/IdentifierNode.h>
 
 
 namespace DB
 {
 
-class FunctionTreeNode : public AbstractFunction
+template <typename FunctionNodeType>
+inline String getFunctionNameImpl(const FunctionNodeType *);
+
+template <>
+inline String getFunctionNameImpl<FunctionNode>(const FunctionNode * function)
+{
+    return function->getFunctionName();
+}
+
+template <>
+inline String getFunctionNameImpl<TableFunctionNode>(const TableFunctionNode * function)
+{
+    return function->getTableFunctionName();
+}
+
+template <typename FunctionNodeType>
+class FunctionTreeNodeImpl : public AbstractFunction
 {
 public:
     class ArgumentTreeNode : public Argument
@@ -19,7 +36,7 @@ class FunctionTreeNode : public AbstractFunction
         std::unique_ptr<AbstractFunction> getFunction() const override
         {
             if (const auto * f = argument->as<FunctionNode>())
-                return std::make_unique<FunctionTreeNode>(*f);
+                return std::make_unique<FunctionTreeNodeImpl<FunctionNode>>(*f);
             return nullptr;
         }
         bool isIdentifier() const override { return argument->as<IdentifierNode>(); }
@@ -60,24 +77,24 @@ class FunctionTreeNode : public AbstractFunction
         const QueryTreeNodes * arguments = nullptr;
     };
 
-    explicit FunctionTreeNode(const FunctionNode & function_) : function(&function_)
+    explicit FunctionTreeNodeImpl(const FunctionNodeType & function_) : function(&function_)
     {
         if (const auto & nodes = function->getArguments().getNodes(); !nodes.empty())
             arguments = std::make_unique<ArgumentsTreeNode>(&nodes);
     }
-    String name() const override { return function->getFunctionName(); }
+    String name() const override { return getFunctionNameImpl(function); }
 private:
-    const FunctionNode * function = nullptr;
+    const FunctionNodeType * function = nullptr;
 };
 
-
 /// Finds arguments of a specified function which should not be displayed for most users for security reasons.
 /// That involves passwords and secret keys.
-class FunctionSecretArgumentsFinderTreeNode : public FunctionSecretArgumentsFinder
+template <typename FunctionNodeType>
+class FunctionSecretArgumentsFinderTreeNodeImpl : public FunctionSecretArgumentsFinder
 {
 public:
-    explicit FunctionSecretArgumentsFinderTreeNode(const FunctionNode & function_)
-        : FunctionSecretArgumentsFinder(std::make_unique<FunctionTreeNode>(function_))
+    explicit FunctionSecretArgumentsFinderTreeNodeImpl(const FunctionNodeType & function_)
+        : FunctionSecretArgumentsFinder(std::make_unique<FunctionTreeNodeImpl<FunctionNodeType>>(function_))
     {
         if (!function->hasArguments())
             return;
@@ -88,4 +105,8 @@ class FunctionSecretArgumentsFinderTreeNode : public FunctionSecretArgumentsFind
     FunctionSecretArgumentsFinder::Result getResult() const { return result; }
 };
 
+
+using FunctionSecretArgumentsFinderTreeNode = FunctionSecretArgumentsFinderTreeNodeImpl<FunctionNode>;
+using TableFunctionSecretArgumentsFinderTreeNode = FunctionSecretArgumentsFinderTreeNodeImpl<TableFunctionNode>;
+
 }
diff --git a/src/Interpreters/InterpreterExplainQuery.cpp b/src/Interpreters/InterpreterExplainQuery.cpp
index 85dd4bcc9470..cd25b7672239 100644
--- a/src/Interpreters/InterpreterExplainQuery.cpp
+++ b/src/Interpreters/InterpreterExplainQuery.cpp
@@ -21,6 +21,7 @@
 #include <Parsers/ASTSelectQuery.h>
 #include <Parsers/ASTSelectWithUnionQuery.h>
 #include <Parsers/ASTSetQuery.h>
+#include <Parsers/FunctionSecretArgumentsFinder.h>
 
 #include <Storages/StorageView.h>
 #include <Processors/QueryPlan/QueryPlan.h>
@@ -33,6 +34,9 @@
 
 #include <Analyzer/QueryTreeBuilder.h>
 #include <Analyzer/QueryTreePassManager.h>
+#include <Analyzer/InDepthQueryTreeVisitor.h>
+#include <Analyzer/FunctionSecretArgumentsFinderTreeNode.h>
+
 
 namespace DB
 {
@@ -40,6 +44,7 @@ namespace Setting
 {
     extern const SettingsBool allow_experimental_analyzer;
     extern const SettingsBool allow_statistics_optimize;
+    extern const SettingsBool format_display_secrets_in_show_and_select;
 }
 
 namespace ErrorCodes
@@ -90,6 +95,36 @@ namespace
 
     using ExplainAnalyzedSyntaxVisitor = InDepthNodeVisitor<ExplainAnalyzedSyntaxMatcher, true>;
 
+    class TableFunctionSecretsVisitor : public InDepthQueryTreeVisitor<TableFunctionSecretsVisitor>
+    {
+        friend class InDepthQueryTreeVisitor;
+        bool needChildVisit(VisitQueryTreeNodeType & parent [[maybe_unused]], VisitQueryTreeNodeType & child [[maybe_unused]])
+        {
+            QueryTreeNodeType type = parent->getNodeType();
+            return type == QueryTreeNodeType::QUERY || type == QueryTreeNodeType::JOIN || type == QueryTreeNodeType::TABLE_FUNCTION;
+        }
+
+        void visitImpl(VisitQueryTreeNodeType & query_tree_node)
+        {
+            auto * table_function_node_ptr = query_tree_node->as<TableFunctionNode>();
+            if (!table_function_node_ptr)
+                return;
+
+            if (FunctionSecretArgumentsFinder::Result secret_arguments = TableFunctionSecretArgumentsFinderTreeNode(*table_function_node_ptr).getResult(); secret_arguments.count)
+            {
+                auto & argument_nodes = table_function_node_ptr->getArgumentsNode()->as<ListNode &>().getNodes();
+
+                for (size_t n = secret_arguments.start; n < secret_arguments.start + secret_arguments.count; ++n)
+                {
+                    if (secret_arguments.are_named)
+                        argument_nodes[n]->as<FunctionNode&>().getArguments().getNodes()[1]->as<ConstantNode&>().setMaskId();
+                    else
+                        argument_nodes[n]->as<ConstantNode&>().setMaskId();
+                }
+            }
+        }
+    };
+
 }
 
 BlockIO InterpreterExplainQuery::execute()
@@ -411,6 +446,12 @@ QueryPipeline InterpreterExplainQuery::executeImpl()
             auto query_tree = buildQueryTree(ast.getExplainedQuery(), getContext());
             bool need_newline = false;
 
+            if (!getContext()->getSettingsRef()[Setting::format_display_secrets_in_show_and_select])
+            {
+                TableFunctionSecretsVisitor visitor;
+                visitor.visit(query_tree);
+            }
+
             if (settings.run_passes)
             {
                 auto query_tree_pass_manager = QueryTreePassManager(getContext());
@@ -441,7 +482,10 @@ QueryPipeline InterpreterExplainQuery::executeImpl()
                 if (need_newline)
                     buf << "

";
 
-                query_tree->toAST()->format(buf, IAST::FormatSettings(false));
+                IAST::FormatSettings format_settings(false);
+                format_settings.show_secrets = getContext()->getSettingsRef()[Setting::format_display_secrets_in_show_and_select];
+
+                query_tree->toAST()->format(buf, format_settings);
             }
 
             break;
