diff --git a/dbms/src/DataStreams/CubeBlockInputStream.cpp b/dbms/src/DataStreams/CubeBlockInputStream.cpp
index c32378d97e67..50a6c0a970b2 100644
--- a/dbms/src/DataStreams/CubeBlockInputStream.cpp
+++ b/dbms/src/DataStreams/CubeBlockInputStream.cpp
@@ -36,43 +36,58 @@ Block CubeBlockInputStream::getHeader() const
 
 Block CubeBlockInputStream::readImpl()
 {
-    /** After reading a block from input stream,
+    /** After reading all blocks from input stream,
       * we will calculate all subsets of columns on next iterations of readImpl
       * by zeroing columns at positions, where bits are zero in current bitmask.
       */
-    if (mask)
+
+    if (!is_data_read)
     {
-        --mask;
-        Block cube_block = source_block;
-        for (size_t i = 0; i < keys.size(); ++i)
+        BlocksList source_blocks;
+        while (auto block = children[0]->read())
+            source_blocks.push_back(block);
+
+        if (source_blocks.empty())
+            return {};
+
+        is_data_read = true;
+        mask = (1 << keys.size()) - 1;
+
+        if (source_blocks.size() > 1)
+            source_block = aggregator.mergeBlocks(source_blocks, false);
+        else
+            source_block = std::move(source_blocks.front());
+
+        zero_block = source_block.cloneEmpty();
+        for (auto key : keys)
         {
-            if (!((mask >> i) & 1))
-            {
-                size_t pos = keys.size() - i - 1;
-                auto & current = cube_block.getByPosition(keys[pos]);
-                current.column = zero_block.getByPosition(keys[pos]).column;
-            }
+            auto & current = zero_block.getByPosition(key);
+            current.column = current.column->cloneResized(source_block.rows());
         }
 
-        BlocksList cube_blocks = { cube_block };
-        Block finalized = aggregator.mergeBlocks(cube_blocks, true);
+        auto finalized = source_block;
+        finalizeBlock(finalized);
         return finalized;
     }
 
-    source_block = children[0]->read();
-    if (!source_block)
-        return source_block;
+    if (!mask)
+        return {};
+
+    --mask;
+    auto cube_block = source_block;
 
-    zero_block = source_block.cloneEmpty();
-    for (auto key : keys)
+    for (size_t i = 0; i < keys.size(); ++i)
     {
-        auto & current = zero_block.getByPosition(key);
-        current.column = current.column->cloneResized(source_block.rows());
+        if (!((mask >> i) & 1))
+        {
+            size_t pos = keys.size() - i - 1;
+            auto & current = cube_block.getByPosition(keys[pos]);
+            current.column = zero_block.getByPosition(keys[pos]).column;
+        }
     }
-    Block finalized = source_block;
-    finalizeBlock(finalized);
-    mask = (1 << keys.size()) - 1;
 
+    BlocksList cube_blocks = { cube_block };
+    Block finalized = aggregator.mergeBlocks(cube_blocks, true);
     return finalized;
 }
 }
diff --git a/dbms/src/DataStreams/CubeBlockInputStream.h b/dbms/src/DataStreams/CubeBlockInputStream.h
index 2f435a6031cf..7e62950e8ee6 100644
--- a/dbms/src/DataStreams/CubeBlockInputStream.h
+++ b/dbms/src/DataStreams/CubeBlockInputStream.h
@@ -36,6 +36,7 @@ class CubeBlockInputStream : public IBlockInputStream
     UInt32 mask = 0;
     Block source_block;
     Block zero_block;
+    bool is_data_read = false;
 };
 
 }
diff --git a/dbms/src/DataStreams/RollupBlockInputStream.cpp b/dbms/src/DataStreams/RollupBlockInputStream.cpp
index e43aa51e6177..a913dc727fa0 100644
--- a/dbms/src/DataStreams/RollupBlockInputStream.cpp
+++ b/dbms/src/DataStreams/RollupBlockInputStream.cpp
@@ -33,26 +33,40 @@ Block RollupBlockInputStream::readImpl()
       * by zeroing out every column one-by-one and re-merging a block.
       */
 
-    if (current_key >= 0)
+    if (!is_data_read)
     {
-        auto & current = rollup_block.getByPosition(keys[current_key]);
-        current.column = current.column->cloneEmpty()->cloneResized(rollup_block.rows());
-        --current_key;
+        BlocksList source_blocks;
+        while (auto block = children[0]->read())
+            source_blocks.push_back(block);
 
-        BlocksList rollup_blocks = { rollup_block };
-        rollup_block = aggregator.mergeBlocks(rollup_blocks, false);
+        if (source_blocks.empty())
+            return {};
 
-        Block finalized = rollup_block;
+        is_data_read = true;
+        if (source_blocks.size() > 1)
+            rollup_block = aggregator.mergeBlocks(source_blocks, false);
+        else
+            rollup_block = std::move(source_blocks.front());
+
+        current_key = keys.size() - 1;
+
+        auto finalized = rollup_block;
         finalizeBlock(finalized);
         return finalized;
     }
 
-    Block block = children[0]->read();
-    current_key = keys.size() - 1;
+    if (current_key < 0)
+        return {};
+
+    auto & current = rollup_block.getByPosition(keys[current_key]);
+    current.column = current.column->cloneEmpty()->cloneResized(rollup_block.rows());
+    --current_key;
 
-    rollup_block = block;
-    finalizeBlock(block);
+    BlocksList rollup_blocks = { rollup_block };
+    rollup_block = aggregator.mergeBlocks(rollup_blocks, false);
 
-    return block;
+    auto finalized = rollup_block;
+    finalizeBlock(finalized);
+    return finalized;
 }
 }
diff --git a/dbms/src/DataStreams/RollupBlockInputStream.h b/dbms/src/DataStreams/RollupBlockInputStream.h
index 1c1e29e7a134..dabf1e392a31 100644
--- a/dbms/src/DataStreams/RollupBlockInputStream.h
+++ b/dbms/src/DataStreams/RollupBlockInputStream.h
@@ -35,6 +35,7 @@ class RollupBlockInputStream : public IBlockInputStream
     ColumnNumbers keys;
     ssize_t current_key = -1;
     Block rollup_block;
+    bool is_data_read = false;
 };
 
 }
