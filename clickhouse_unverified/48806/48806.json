{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48806,
  "instance_id": "ClickHouse__ClickHouse-48806",
  "issue_numbers": [
    "48736"
  ],
  "base_commit": "e312c4c29911452e77551b6dcf253afa7abdfa4b",
  "patch": "diff --git a/src/Interpreters/convertFieldToType.cpp b/src/Interpreters/convertFieldToType.cpp\nindex 1e69a73e9f2e..08ac2fce556d 100644\n--- a/src/Interpreters/convertFieldToType.cpp\n+++ b/src/Interpreters/convertFieldToType.cpp\n@@ -237,6 +237,20 @@ Field convertFieldToTypeImpl(const Field & src, const IDataType & type, const ID\n             return src;\n         }\n \n+        /// For toDate('xxx') in 1::Int64, we CAST `src` to UInt64, which may\n+        /// produce wrong result in some special cases.\n+        if (which_type.isDate() && src.getType() == Field::Types::Int64)\n+        {\n+            return convertNumericType<UInt64>(src, type);\n+        }\n+\n+        /// For toDate32('xxx') in 1, we CAST `src` to Int64. Also, it may\n+        /// produce wrong result in some special cases.\n+        if (which_type.isDate32() && src.getType() == Field::Types::UInt64)\n+        {\n+            return convertNumericType<Int64>(src, type);\n+        }\n+\n         if (which_type.isDateTime64()\n             && (src.getType() == Field::Types::UInt64 || src.getType() == Field::Types::Int64 || src.getType() == Field::Types::Decimal64))\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02714_date_date32_in.reference b/tests/queries/0_stateless/02714_date_date32_in.reference\nnew file mode 100644\nindex 000000000000..d9ff83f19498\n--- /dev/null\n+++ b/tests/queries/0_stateless/02714_date_date32_in.reference\n@@ -0,0 +1,4 @@\n+1\n+1\n+0\n+0\ndiff --git a/tests/queries/0_stateless/02714_date_date32_in.sql b/tests/queries/0_stateless/02714_date_date32_in.sql\nnew file mode 100644\nindex 000000000000..69a087eff6f8\n--- /dev/null\n+++ b/tests/queries/0_stateless/02714_date_date32_in.sql\n@@ -0,0 +1,4 @@\n+select toDate32('2020-01-01') in (toDate('2020-01-01'));\n+select toDate('2020-01-01') in (toDate32('2020-01-01'));\n+select toDate('2020-01-01') in 1::Int64;\n+select toDate32('2020-01-01') in 1::UInt64;\n",
  "problem_statement": "Please add support for the IN operator over combinations of Date and Date32\nRight now it is impossible to compare `Date` and `Date32` via the `IN` operator. This breaks queries when you don't know which one you are going to get.\r\n\r\nExample 1 (Date32 in (Date list)):\r\n```\r\n5d7a06876b79 :) select toDate32('2020-01-01') in (toDate('2020-01-01'))\r\n\r\nSELECT toDate32('2020-01-01') IN toDate('2020-01-01')\r\n\r\nQuery id: 5070c5b0-0151-4a29-8655-55c5657b9308\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nReceived exception from server (version 22.8.16):\r\nCode: 53. DB::Exception: Received from clickhouse-server:9000. DB::Exception: Type mismatch in IN or VALUES section. Expected: Date32. Got: UInt64: While processing toDate32('2020-01-01') IN toDate('2020-01-01'). (TYPE_MISMATCH)\r\n```\r\n\r\nExample 2 (Date in (Date32 list)):\r\n```\r\n5d7a06876b79 :) select toDate('2020-01-01') in (toDate32('2020-01-01'))\r\n\r\nSELECT toDate('2020-01-01') IN toDate32('2020-01-01')\r\n\r\nQuery id: 13fe9e87-7f42-466d-9d29-6c437cbeffd3\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nReceived exception from server (version 22.8.16):\r\nCode: 53. DB::Exception: Received from clickhouse-server:9000. DB::Exception: Type mismatch in IN or VALUES section. Expected: Date. Got: Int64: While processing toDate('2020-01-01') IN toDate32('2020-01-01'). (TYPE_MISMATCH)\r\n```\n",
  "hints_text": "yeah, it is strange since equality comparison is allowed",
  "created_at": "2023-04-15T12:43:02Z"
}