{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 24399,
  "instance_id": "ClickHouse__ClickHouse-24399",
  "issue_numbers": [
    "23905"
  ],
  "base_commit": "3d8e7c95c7c9a90b5dd477036a4cb50ed27dfb75",
  "patch": "diff --git a/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp b/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp\nindex 36b57e242d73..2d820a5985f3 100644\n--- a/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp\n@@ -28,7 +28,7 @@ bool BinaryRowInputFormat::readRow(MutableColumns & columns, RowReadExtension &)\n \n void BinaryRowInputFormat::readPrefix()\n {\n-    /// NOTE The header is completely ignored. This can be easily improved.\n+    /// NOTE: The header is completely ignored. This can be easily improved.\n \n     UInt64 columns = 0;\n     String tmp;\ndiff --git a/src/Server/HTTP/HTMLForm.cpp b/src/Server/HTTP/HTMLForm.cpp\nindex 7a87f484b5cb..9e0f74dcc331 100644\n--- a/src/Server/HTTP/HTMLForm.cpp\n+++ b/src/Server/HTTP/HTMLForm.cpp\n@@ -244,7 +244,7 @@ bool HTMLForm::MultipartReadBuffer::skipToNextBoundary()\n \n     while (!in.eof())\n     {\n-        auto line = readLine();\n+        auto line = readLine(true);\n         if (startsWith(line, boundary))\n         {\n             set(in.position(), 0);\n@@ -256,29 +256,36 @@ bool HTMLForm::MultipartReadBuffer::skipToNextBoundary()\n     throw Poco::Net::HTMLFormException(\"No boundary line found\");\n }\n \n-std::string HTMLForm::MultipartReadBuffer::readLine(bool strict)\n+std::string HTMLForm::MultipartReadBuffer::readLine(bool append_crlf)\n {\n     std::string line;\n     char ch = 0;  // silence \"uninitialized\" warning from gcc-*\n \n-    while (in.read(ch) && ch != '\\r' && ch != '\\n')\n+    /// If we don't append CRLF, it means that we may have to prepend CRLF from previous content line, which wasn't the boundary.\n+    if (in.read(ch))\n         line += ch;\n-\n-    if (in.eof())\n-    {\n-        if (strict)\n-            throw Poco::Net::HTMLFormException(\"Unexpected end of message\");\n+    if (in.read(ch))\n+        line += ch;\n+    if (append_crlf && line == \"\\r\\n\")\n         return line;\n-    }\n-\n-    line += ch;\n \n-    if (ch == '\\r')\n+    while (!in.eof())\n     {\n-        if (!in.read(ch) || ch != '\\n')\n-            throw Poco::Net::HTMLFormException(\"No CRLF found\");\n-        else\n+        while (in.read(ch) && ch != '\\r')\n             line += ch;\n+\n+        if (in.eof()) break;\n+\n+        assert(ch == '\\r');\n+\n+        if (in.peek(ch) && ch == '\\n')\n+        {\n+            in.ignore();\n+            if (append_crlf) line += \"\\r\\n\";\n+            break;\n+        }\n+\n+        line += ch;\n     }\n \n     return line;\n@@ -300,19 +307,12 @@ bool HTMLForm::MultipartReadBuffer::nextImpl()\n     /// FIXME: there is an extra copy because we cannot traverse PeekableBuffer from checkpoint to position()\n     ///        since it may store different data parts in different sub-buffers,\n     ///        anyway calling makeContinuousMemoryFromCheckpointToPos() will also make an extra copy.\n-    std::string line = readLine(false);\n-\n     /// According to RFC2046 the preceding CRLF is a part of boundary line.\n-    if (line == \"\\r\\n\")\n-    {\n-        line = readLine(false);\n-        boundary_hit = startsWith(line, boundary);\n-        if (!boundary_hit) line = \"\\r\\n\";\n-    }\n-    else\n-        boundary_hit = startsWith(line, boundary);\n+    std::string line = readLine(false);\n+    boundary_hit = startsWith(line, \"\\r\\n\" + boundary);\n+    bool has_next = !boundary_hit && !line.empty();\n \n-    if (!line.empty())\n+    if (has_next)\n         /// If we don't make sure that memory is contiguous then situation may happen, when part of the line is inside internal memory\n         /// and other part is inside sub-buffer, thus we'll be unable to setup our working buffer properly.\n         in.makeContinuousMemoryFromCheckpointToPos();\n@@ -323,7 +323,7 @@ bool HTMLForm::MultipartReadBuffer::nextImpl()\n     /// Limit readable data to a single line.\n     BufferBase::set(in.position(), line.size(), 0);\n \n-    return !boundary_hit && !line.empty();\n+    return has_next;\n }\n \n }\ndiff --git a/src/Server/HTTP/HTMLForm.h b/src/Server/HTTP/HTMLForm.h\nindex 8d8fb0d1719f..ca6bb9048f14 100644\n--- a/src/Server/HTTP/HTMLForm.h\n+++ b/src/Server/HTTP/HTMLForm.h\n@@ -118,7 +118,7 @@ class HTMLForm::MultipartReadBuffer : public ReadBuffer\n     const std::string boundary;\n     bool boundary_hit = true;\n \n-    std::string readLine(bool strict = true);\n+    std::string readLine(bool append_crlf);\n \n     bool nextImpl() override;\n };\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00304_http_external_data.reference b/tests/queries/0_stateless/00304_http_external_data.reference\nindex 93428f8768eb..859091075841 100644\n--- a/tests/queries/0_stateless/00304_http_external_data.reference\n+++ b/tests/queries/0_stateless/00304_http_external_data.reference\n@@ -2,3 +2,5 @@\n 2\tWorld\n 1\tHello\n 2\tWorld\n+1\n+2\ndiff --git a/tests/queries/0_stateless/00304_http_external_data.sh b/tests/queries/0_stateless/00304_http_external_data.sh\nindex 41a9dea1ebbb..4a097249cca9 100755\n--- a/tests/queries/0_stateless/00304_http_external_data.sh\n+++ b/tests/queries/0_stateless/00304_http_external_data.sh\n@@ -6,3 +6,4 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n \n echo -ne '1,Hello\\n2,World\\n' | ${CLICKHOUSE_CURL} -sSF 'file=@-' \"${CLICKHOUSE_URL}&query=SELECT+*+FROM+file&file_format=CSV&file_types=UInt8,String\";\n echo -ne '1@Hello\\n2@World\\n' | ${CLICKHOUSE_CURL} -sSF 'file=@-' \"${CLICKHOUSE_URL}&query=SELECT+*+FROM+file&file_format=CSV&file_types=UInt8,String&format_csv_delimiter=@\";\n+echo -ne '\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00' | ${CLICKHOUSE_CURL} -sSF \"tmp=@-\" \"${CLICKHOUSE_URL}&query=SELECT+*+FROM+tmp&tmp_structure=TaskID+UInt32&tmp_format=RowBinary\";\n",
  "problem_statement": "\"Cannot read all data\" exception when sending External Data in RowBinary format\n**Describe the bug**\r\nSupplying External Data in RowBinary format is broken.\r\n\r\n**Does it reproduce on recent release?**\r\nshould be reproducible with 21.4.6.55\r\n[The list of releases](https://github.com/ClickHouse/ClickHouse/blob/master/utils/list-versions/version_date.tsv)\r\n\r\n**How to reproduce**\r\nrun docker container using fresh ClickHouse image:\r\n`docker run --rm -t -i --name=ch --net=host --ulimit nofile=262144:262144 yandex/clickhouse-server`\r\n\r\nExecuting a straightforward query fetching a couple of integers from supplied data consisting of 32-bit integers 1 and 2 transferred in RowBinary format as 8 bytes fails complaining about third row even though we've sent only two:\r\n```\r\necho \"0x0: 0100000002000000\" | xxd -r - | curl -F \"tmp=@-\" \"http://localhost:8123/?query=select+TaskID+from+tmp+format+JSON&tmp_structure=TaskID+UInt32&tmp_format=RowBinary\"\r\nCode: 33, e.displayText() = DB::Exception: Cannot read all data. Bytes read: 2. Bytes expected: 4.: (at row 3)\r\n: While executing SourceFromInputStream (version 21.4.6.55 (official build))\r\n```\r\nWhile it should've executed fine returning two rows \"TaskID\": 1 and \"TaskID\": 2\r\n\r\nAdding two stray bytes at the end of the RowBinary buffer causes error to disappear:\r\n```\r\necho \"0x0: 01000000020000000304\" | xxd -r - | curl -F \"tmp=@-\" \"http://localhost:8123/?query=select+TaskID+from+tmp+format+JSON&tmp_structure=TaskID+UInt32&tmp_format=RowBinary\"\r\n{\r\n\t\"meta\":\r\n\t[\r\n\t\t{\r\n\t\t\t\"name\": \"TaskID\",\r\n\t\t\t\"type\": \"UInt32\"\r\n\t\t}\r\n\t],\r\n\r\n\t\"data\":\r\n\t[\r\n\t\t{\r\n\t\t\t\"TaskID\": 1\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"TaskID\": 2\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"TaskID\": 168625155\r\n\t\t}\r\n\t],\r\n\r\n\t\"rows\": 3,\r\n\r\n\t\"statistics\":\r\n\t{\r\n\t\t\"elapsed\": 0.000203513,\r\n\t\t\"rows_read\": 3,\r\n\t\t\"bytes_read\": 12\r\n\t}\r\n}\r\n```\r\nHowever now query returns a gibberish third value 168625155 which is 03040DOA in hex suggesting that trailing `\\r\\n` after multipart/form-data value are erroneously treated as part of the value causing parsing of correct RowBinary block to fail.\n",
  "hints_text": "",
  "created_at": "2021-05-21T12:51:34Z"
}