{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23781,
  "instance_id": "ClickHouse__ClickHouse-23781",
  "issue_numbers": [
    "23764"
  ],
  "base_commit": "d0c0054ff02ad13d405427dd54b1bb4bdfe4006e",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 5d1400138b43..f677f745080b 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -1653,13 +1653,16 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, Context\n                     ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n             }\n \n-            const auto & deps_mv = name_deps[command.column_name];\n-            if (!deps_mv.empty())\n+            if (!command.clear)\n             {\n-                throw Exception(\n-                    \"Trying to ALTER DROP column \" + backQuoteIfNeed(command.column_name) + \" which is referenced by materialized view \"\n-                        + toString(deps_mv),\n-                    ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n+                const auto & deps_mv = name_deps[command.column_name];\n+                if (!deps_mv.empty())\n+                {\n+                    throw Exception(\n+                        \"Trying to ALTER DROP column \" + backQuoteIfNeed(command.column_name) + \" which is referenced by materialized view \"\n+                            + toString(deps_mv),\n+                        ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n+                }\n             }\n \n             dropped_columns.emplace(command.column_name);\ndiff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex afe37d0bcbe7..58161a94f45b 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -998,7 +998,7 @@ void StorageBuffer::checkAlterIsPossible(const AlterCommands & commands, Context\n             throw Exception(\n                 \"Alter of type '\" + alterTypeToString(command.type) + \"' is not supported by storage \" + getName(),\n                 ErrorCodes::NOT_IMPLEMENTED);\n-        if (command.type == AlterCommand::Type::DROP_COLUMN)\n+        if (command.type == AlterCommand::Type::DROP_COLUMN && !command.clear)\n         {\n             const auto & deps_mv = name_deps[command.column_name];\n             if (!deps_mv.empty())\ndiff --git a/src/Storages/StorageDistributed.cpp b/src/Storages/StorageDistributed.cpp\nindex 483a602c80c8..a402c3e02189 100644\n--- a/src/Storages/StorageDistributed.cpp\n+++ b/src/Storages/StorageDistributed.cpp\n@@ -723,7 +723,7 @@ void StorageDistributed::checkAlterIsPossible(const AlterCommands & commands, Co\n \n             throw Exception(\"Alter of type '\" + alterTypeToString(command.type) + \"' is not supported by storage \" + getName(),\n                 ErrorCodes::NOT_IMPLEMENTED);\n-        if (command.type == AlterCommand::DROP_COLUMN)\n+        if (command.type == AlterCommand::DROP_COLUMN && !command.clear)\n         {\n             const auto & deps_mv = name_deps[command.column_name];\n             if (!deps_mv.empty())\ndiff --git a/src/Storages/StorageMerge.cpp b/src/Storages/StorageMerge.cpp\nindex 6ad7b0bce6e4..bf7141576e8c 100644\n--- a/src/Storages/StorageMerge.cpp\n+++ b/src/Storages/StorageMerge.cpp\n@@ -510,7 +510,7 @@ void StorageMerge::checkAlterIsPossible(const AlterCommands & commands, ContextP\n             throw Exception(\n                 \"Alter of type '\" + alterTypeToString(command.type) + \"' is not supported by storage \" + getName(),\n                 ErrorCodes::NOT_IMPLEMENTED);\n-        if (command.type == AlterCommand::Type::DROP_COLUMN)\n+        if (command.type == AlterCommand::Type::DROP_COLUMN && !command.clear)\n         {\n             const auto & deps_mv = name_deps[command.column_name];\n             if (!deps_mv.empty())\ndiff --git a/src/Storages/StorageNull.cpp b/src/Storages/StorageNull.cpp\nindex 46f88bbc7ac4..6c8a21db571b 100644\n--- a/src/Storages/StorageNull.cpp\n+++ b/src/Storages/StorageNull.cpp\n@@ -46,7 +46,7 @@ void StorageNull::checkAlterIsPossible(const AlterCommands & commands, ContextPt\n             throw Exception(\n                 \"Alter of type '\" + alterTypeToString(command.type) + \"' is not supported by storage \" + getName(),\n                 ErrorCodes::NOT_IMPLEMENTED);\n-        if (command.type == AlterCommand::DROP_COLUMN)\n+        if (command.type == AlterCommand::DROP_COLUMN && !command.clear)\n         {\n             const auto & deps_mv = name_deps[command.column_name];\n             if (!deps_mv.empty())\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01851_clear_column_referenced_by_mv.reference b/tests/queries/0_stateless/01851_clear_column_referenced_by_mv.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01851_clear_column_referenced_by_mv.sql b/tests/queries/0_stateless/01851_clear_column_referenced_by_mv.sql\nnew file mode 100644\nindex 000000000000..a0239ff482cb\n--- /dev/null\n+++ b/tests/queries/0_stateless/01851_clear_column_referenced_by_mv.sql\n@@ -0,0 +1,35 @@\n+DROP TABLE IF EXISTS `01851_merge_tree`;\n+CREATE TABLE `01851_merge_tree`\n+(\n+    `n1` Int8,\n+    `n2` Int8,\n+    `n3` Int8,\n+    `n4` Int8\n+)\n+ENGINE = MergeTree\n+ORDER BY n1;\n+\n+DROP TABLE IF EXISTS `001851_merge_tree_mv`;\n+CREATE MATERIALIZED VIEW `01851_merge_tree_mv`\n+ENGINE = Memory AS\n+SELECT\n+    n2,\n+    n3\n+FROM `01851_merge_tree`;\n+\n+ALTER TABLE `01851_merge_tree`\n+    DROP COLUMN n3;  -- { serverError 524 }\n+\n+ALTER TABLE `01851_merge_tree`\n+    DROP COLUMN n2;  -- { serverError 524 }\n+\n+-- ok\n+ALTER TABLE `01851_merge_tree`\n+    DROP COLUMN n4;\n+\n+-- CLEAR COLUMN is OK\n+ALTER TABLE `01851_merge_tree`\n+    CLEAR COLUMN n2;\n+\n+DROP TABLE `01851_merge_tree`;\n+DROP TABLE `01851_merge_tree_mv`;\n",
  "problem_statement": "CLEAR COLUMN doesn't work for columns referenced by materialized view\nLooks like https://github.com/ClickHouse/ClickHouse/pull/21303 is broke also \"clear column\" for such columns.\r\n\r\nHow to reproduce:\r\n\r\n```\r\nCREATE TABLE test.TTAdmLog\r\n(\r\n    `ts` DateTime,\r\n    `event_date` Date DEFAULT toDate(ts),\r\n    `impression_id` String DEFAULT '',\r\n    `creative_id` String DEFAULT '',\r\n    `creative_adm` String DEFAULT '',\r\n    `impression_id_compressed` FixedString(16) DEFAULT UUIDStringToNum(impression_id),\r\n    `impression_id_hashed` UInt16 DEFAULT reinterpretAsUInt16(impression_id_compressed),\r\n)\r\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard}/TTAdmLogTest', '{replica}')\r\nPARTITION BY toMonday(event_date)\r\nORDER BY (event_date, impression_id_hashed)\r\nSAMPLE BY impression_id_hashed\r\nSETTINGS replicated_deduplication_window = 1000, replicated_deduplication_window_seconds = 864000, index_granularity = 8192\r\n\r\nCREATE MATERIALIZED VIEW test.TTView\r\n(\r\n    `event_date` Date,\r\n    `creative_id` String,\r\n    `creative_adm` AggregateFunction(anyLast, String),\r\n)\r\nENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{shard}/TTViewTest', '{replica}', event_date, (event_date, creative_id), 8192) AS\r\nSELECT \r\n    toStartOfMonth(event_date) AS event_date,\r\n    arrayJoin(splitByChar(',', creative_id)) AS creative_id,\r\n    anyLastState(creative_adm) AS creative_adm,\r\nFROM test.TTAdmLog\r\nGROUP BY \r\n    event_date,\r\n    creative_id,\r\n\r\n```\r\n\r\n\r\nClickHouse server version 20.9.3 revision 54439.\r\n\r\n```\r\nalter table test.TTAdmLog clear column creative_adm in partition '2021-03-22'\r\n\r\nOK\r\n\r\n```\r\nClickHouse server version 21.4.3 revision 54447.\r\n\r\n```\r\nalter table test.TTAdmLog  clear column creative_adm in partition '2021-03-22'\r\n\r\nDB::Exception: Trying to ALTER DROP column creative_adm which is referenced by materialized view ['TTView'].\r\n\r\n```\r\n\n",
  "hints_text": "@ucasFL can you fix it? ",
  "created_at": "2021-04-30T05:05:32Z"
}