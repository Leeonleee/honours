{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 20211,
  "instance_id": "ClickHouse__ClickHouse-20211",
  "issue_numbers": [
    "20195"
  ],
  "base_commit": "4840d663e64f3623716a0339980c91789a037a6e",
  "patch": "diff --git a/src/Interpreters/ExecuteScalarSubqueriesVisitor.cpp b/src/Interpreters/ExecuteScalarSubqueriesVisitor.cpp\nindex affd9d0678fe..e6061aabe947 100644\n--- a/src/Interpreters/ExecuteScalarSubqueriesVisitor.cpp\n+++ b/src/Interpreters/ExecuteScalarSubqueriesVisitor.cpp\n@@ -96,7 +96,7 @@ void ExecuteScalarSubqueriesMatcher::visit(const ASTSubquery & subquery, ASTPtr\n \n         ASTPtr subquery_select = subquery.children.at(0);\n \n-        auto options = SelectQueryOptions(QueryProcessingStage::Complete, data.subquery_depth + 1);\n+        auto options = SelectQueryOptions(QueryProcessingStage::Complete, data.subquery_depth + 1, true);\n         options.analyze(data.only_analyze);\n \n         auto interpreter = InterpreterSelectWithUnionQuery(subquery_select, subquery_context, options);\ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex 4b89273cd861..1158007d9575 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -294,7 +294,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n     }\n \n     // Only propagate WITH elements to subqueries if we're not a subquery\n-    if (options.subquery_depth == 0)\n+    if (!options.is_subquery)\n     {\n         if (context->getSettingsRef().enable_global_with_statement)\n             ApplyWithAliasVisitor().visit(query_ptr);\ndiff --git a/src/Interpreters/SelectQueryOptions.h b/src/Interpreters/SelectQueryOptions.h\nindex 611c2b1601ee..b21d27ef5c8d 100644\n--- a/src/Interpreters/SelectQueryOptions.h\n+++ b/src/Interpreters/SelectQueryOptions.h\n@@ -33,9 +33,10 @@ struct SelectQueryOptions\n     bool ignore_quota = false;\n     bool ignore_limits = false;\n     bool is_internal = false;\n+    bool is_subquery = false; // non-subquery can also have subquery_depth > 0, e.g. insert select\n \n-    SelectQueryOptions(QueryProcessingStage::Enum stage = QueryProcessingStage::Complete, size_t depth = 0)\n-        : to_stage(stage), subquery_depth(depth)\n+    SelectQueryOptions(QueryProcessingStage::Enum stage = QueryProcessingStage::Complete, size_t depth = 0, bool is_subquery_ = false)\n+        : to_stage(stage), subquery_depth(depth), is_subquery(is_subquery_)\n     {\n     }\n \n@@ -46,6 +47,7 @@ struct SelectQueryOptions\n         SelectQueryOptions out = *this;\n         out.to_stage = QueryProcessingStage::Complete;\n         ++out.subquery_depth;\n+        out.is_subquery = true;\n         return out;\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01711_cte_subquery_fix.reference b/tests/queries/0_stateless/01711_cte_subquery_fix.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01711_cte_subquery_fix.sql b/tests/queries/0_stateless/01711_cte_subquery_fix.sql\nnew file mode 100644\nindex 000000000000..ddea548eada2\n--- /dev/null\n+++ b/tests/queries/0_stateless/01711_cte_subquery_fix.sql\n@@ -0,0 +1,3 @@\n+drop table if exists t;\n+create table t engine = Memory as with cte as (select * from numbers(10)) select * from cte;\n+drop table t;\n",
  "problem_statement": "Regression in the query parsing: 21.1.2 -> 21.2.2\n**Describe the issue**\r\nThe following query worked in 21.1.2, but doesn't work in 21.2.2\r\n\r\n```sql\r\nINSERT INTO ztf.dr4_source_obs_02 SELECT\r\n    match.oid1 AS sid,\r\n    obs.oid AS oid,\r\n    obs.filter AS filter,\r\n    obs.fieldid AS fieldid,\r\n    obs.rcid AS rcid,\r\n    coord.ra AS ra,\r\n    coord.dec AS dec,\r\n    obs.mjd AS mjd,\r\n    obs.mag AS mag,\r\n    obs.magerr AS magerr,\r\n    obs.clrcoeff AS clrcoeff\r\nFROM ztf.dr4_obs AS obs\r\nINNER JOIN\r\n(\r\n    SELECT\r\n        oid1,\r\n        oid2\r\n    FROM ztf.dr4_xmatch_02\r\n    WHERE (oid1 <= oid2) AND (oid1 NOT IN\r\n        (\r\n            SELECT oid2\r\n            FROM ztf.dr4_xmatch_02\r\n            WHERE oid1 < oid2 AND (oid2 >= -inf) AND (oid2 < 639110200101898)\r\n        )\r\n    ) AND (oid1 >= -inf) AND (oid1 < 639110200101898)\r\n) AS match ON match.oid2 = obs.oid\r\nINNER JOIN (\r\n    WITH\r\n        (pi() / 180.0) AS deg_to_rad,\r\n        (180.0 / pi()) AS rad_to_deg\r\n    SELECT\r\n        oid1,\r\n        rad_to_deg * atan2(avg(sin(deg_to_rad * ra2)), avg(cos(deg_to_rad * ra2))) AS ra,\r\n        rad_to_deg * atan2(avg(sin(deg_to_rad * dec2)), avg(cos(deg_to_rad * dec2))) AS dec\r\n    FROM ztf.dr4_xmatch_02\r\n    WHERE (oid1 <= oid2) AND (oid1 NOT IN\r\n        (\r\n            SELECT oid2\r\n            FROM ztf.dr4_xmatch_02\r\n            WHERE oid1 < oid2  AND (oid2 >= -inf) AND (oid2 < 639110200101898)\r\n        )\r\n    ) AND (oid1 >= -inf) AND (oid1 < 639110200101898)\r\n    GROUP BY oid1\r\n) AS coord ON match.oid1 = coord.oid1\r\nWHERE (obs.catflags = 0) AND (obs.magerr > 0)\r\n```\r\n\r\n(Yes, I know, that it is suboptimal to make these identical sub-sub-queries)\r\n\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nDifferent expressions with the same alias _subquery4:\r\n(WITH pi() / 180. AS deg_to_rad, 180. / pi() AS rad_to_deg SELECT oid2 FROM ztf.dr4_xmatch_02 WHERE (oid1 < oid2) AND (oid2 >= -inf) AND (oid2 < 639110200101898)) AS _subquery4\r\nand\r\n(WITH pi() / 180. AS deg_to_rad, 180. / pi() AS rad_to_deg SELECT oid2 FROM ztf.dr4_xmatch_02 WHERE (oid1 < oid2) AND (oid2 >= -inf) AND (oid2 < 639110200101898)) AS _subquery4\r\n: While processing (WITH pi() / 180. AS deg_to_rad, 180. / pi() AS rad_to_deg SELECT oid2 FROM ztf.dr4_xmatch_02 WHERE (oid1 < oid2) AND (oid2 >= -inf) AND (oid2 < 639110200101898)) AS _subquery4. Stack trace:\r\n\r\n0. DB::QueryAliasesMatcher<DB::QueryAliasesWithSubqueries>::visitOther(std::__1::shared_ptr<DB::IAST> const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IAST> > > >&) @ 0xedb9fe0 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n1. DB::QueryAliasesMatcher<DB::QueryAliasesWithSubqueries>::visit(DB::ASTSubquery const&, std::__1::shared_ptr<DB::IAST> const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IAST> > > >&) @ 0xedb9270 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n2. DB::InDepthNodeVisitor<DB::QueryAliasesMatcher<DB::QueryAliasesWithSubqueries>, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0xedba1fb in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n3. DB::InDepthNodeVisitor<DB::QueryAliasesMatcher<DB::QueryAliasesWithSubqueries>, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0xedba17b in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n4. DB::InDepthNodeVisitor<DB::QueryAliasesMatcher<DB::QueryAliasesWithSubqueries>, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0xedba17b in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n5. DB::InDepthNodeVisitor<DB::QueryAliasesMatcher<DB::QueryAliasesWithSubqueries>, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0xedba17b in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n6. DB::InDepthNodeVisitor<DB::QueryAliasesMatcher<DB::QueryAliasesWithSubqueries>, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0xedba17b in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n7. DB::InDepthNodeVisitor<DB::QueryAliasesMatcher<DB::QueryAliasesWithSubqueries>, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0xedba17b in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n8. DB::TreeRewriter::normalize(std::__1::shared_ptr<DB::IAST>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IAST> > > >&, DB::Settings const&) @ 0xee81633 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n9. DB::TreeRewriter::analyzeSelect(std::__1::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::__1::vector<DB::TableWithColumnNamesAndTypes, std::__1::allocator<DB::TableWithColumnNamesAndTypes> > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::TableJoin>) const @ 0xee7c416 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n10. ? @ 0xeb9ec7e in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&) @ 0xeb9bb42 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xeb99b4d in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n13. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xed46025 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xed446e0 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n15. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) @ 0xed46bd1 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n16. ? @ 0xeee19be in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n17. DB::getDatabaseAndTablesWithColumns(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&) @ 0xeee27eb in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n18. DB::JoinedTables::resolveTables() @ 0xed7b2f4 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n19. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&) @ 0xeb9a928 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n20. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xeb99b4d in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n21. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xed46025 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n22. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xed446e0 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n23. DB::InterpreterInsertQuery::execute() @ 0xeb7a3ec in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n24. ? @ 0xeed0ea2 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n25. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xeecf7fc in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n26. DB::TCPHandler::runImpl() @ 0xf5ca265 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n27. DB::TCPHandler::run() @ 0xf5d9ee9 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n28. Poco::Net::TCPServerConnection::start() @ 0x11b76baf in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n29. Poco::Net::TCPServerDispatcher::run() @ 0x11b785c1 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n30. Poco::PooledThread::run() @ 0x11caf669 in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n31. Poco::ThreadImpl::runnableEntry(void*) @ 0x11cab4ca in /projects/caps/uiucsn/ztf_dr/clickhouse/bin/clickhouse\r\n```\r\n\r\n* `CREATE TABLE` statements for all tables involved\r\n\r\n```sql\r\nCREATE TABLE ztf.dr4_source_obs_02\r\n(\r\n    `sid` UInt64 CODEC(Delta(8), LZ4),\r\n    `oid` UInt64 CODEC(Delta(8), LZ4),\r\n    `filter` UInt8 CODEC(T64, LZ4),\r\n    `fieldid` UInt16 CODEC(T64, LZ4),\r\n    `rcid` UInt8 CODEC(Delta(1), LZ4),\r\n    `ra` Float64 CODEC(Gorilla),\r\n    `dec` Float64 CODEC(Gorilla),\r\n    `h3index10` UInt64 MATERIALIZED geoToH3(ra, dec, 10) CODEC(Delta(8), LZ4),\r\n    `mjd` Float64,\r\n    `mag` Float32,\r\n    `magerr` Float32,\r\n    `clrcoeff` Float32\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY intDiv(oid, 1000000000000)\r\nPRIMARY KEY h3index10\r\nORDER BY (h3index10, sid, mjd)\r\n```\r\n\r\n```sql\r\nCREATE TABLE ztf.dr4_obs\r\n(\r\n    `oid` UInt64 CODEC(Delta(8), LZ4),\r\n    `nobs` UInt16 CODEC(T64, LZ4),\r\n    `filter` UInt8 CODEC(T64, LZ4),\r\n    `fieldid` UInt16 CODEC(T64, LZ4),\r\n    `rcid` UInt8 CODEC(Delta(1), LZ4),\r\n    `ra` Float64 CODEC(Gorilla),\r\n    `dec` Float64 CODEC(Gorilla),\r\n    `h3index10` UInt64 MATERIALIZED geoToH3(ra, dec, 10) CODEC(Delta(8), LZ4),\r\n    `mjd` Float64,\r\n    `mag` Float32,\r\n    `magerr` Float32,\r\n    `clrcoeff` Float32,\r\n    `catflags` UInt16 CODEC(T64, LZ4)\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY fieldid\r\nPRIMARY KEY h3index10\r\nORDER BY (h3index10, oid, mjd)\r\n```\r\n\r\n```sql\r\nCREATE TABLE ztf.dr4_xmatch_02\r\n(\r\n    `oid1` UInt64,\r\n    `oid2` UInt64,\r\n    `ra2` Float64,\r\n    `dec2` Float64\r\n)\r\nENGINE = MergeTree\r\nORDER BY oid2\r\n```\n",
  "hints_text": "",
  "created_at": "2021-02-08T16:27:06Z"
}