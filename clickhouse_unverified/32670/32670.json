{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32670,
  "instance_id": "ClickHouse__ClickHouse-32670",
  "issue_numbers": [
    "20009",
    "32512"
  ],
  "base_commit": "2b5409120db19c12724c917541536f2814ab6c43",
  "patch": "diff --git a/src/Interpreters/TreeOptimizer.cpp b/src/Interpreters/TreeOptimizer.cpp\nindex 5e355cd52af3..86fd9ae5dddd 100644\n--- a/src/Interpreters/TreeOptimizer.cpp\n+++ b/src/Interpreters/TreeOptimizer.cpp\n@@ -410,12 +410,19 @@ void optimizeDuplicateDistinct(ASTSelectQuery & select)\n /// has a single argument and not an aggregate functions.\n void optimizeMonotonousFunctionsInOrderBy(ASTSelectQuery * select_query, ContextPtr context,\n                                           const TablesWithColumns & tables_with_columns,\n-                                          const Names & sorting_key_columns)\n+                                          const TreeRewriterResult & result)\n {\n     auto order_by = select_query->orderBy();\n     if (!order_by)\n         return;\n \n+    /// Do not apply optimization for Distributed and Merge storages,\n+    /// because we can't get the sorting key of their undelying tables\n+    /// and we can break the matching of the sorting key for `read_in_order`\n+    /// optimization by removing monotonous functions from the prefix of key.\n+    if (result.is_remote_storage || (result.storage && result.storage->getName() == \"Merge\"))\n+        return;\n+\n     for (const auto & child : order_by->children)\n     {\n         auto * order_by_element = child->as<ASTOrderByElement>();\n@@ -438,6 +445,8 @@ void optimizeMonotonousFunctionsInOrderBy(ASTSelectQuery * select_query, Context\n         }\n     }\n \n+    auto sorting_key_columns = result.metadata_snapshot ? result.metadata_snapshot->getSortingKeyColumns() : Names{};\n+\n     bool is_sorting_key_prefix = true;\n     for (size_t i = 0; i < order_by->children.size(); ++i)\n     {\n@@ -802,8 +811,7 @@ void TreeOptimizer::apply(ASTPtr & query, TreeRewriterResult & result,\n \n     /// Replace monotonous functions with its argument\n     if (settings.optimize_monotonous_functions_in_order_by)\n-        optimizeMonotonousFunctionsInOrderBy(select_query, context, tables_with_columns,\n-            result.metadata_snapshot ? result.metadata_snapshot->getSortingKeyColumns() : Names{});\n+        optimizeMonotonousFunctionsInOrderBy(select_query, context, tables_with_columns, result);\n \n     /// Remove duplicate items from ORDER BY.\n     /// Execute it after all order by optimizations,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02147_order_by_optimizations.reference b/tests/queries/0_stateless/02147_order_by_optimizations.reference\nnew file mode 100644\nindex 000000000000..8708826ea2bd\n--- /dev/null\n+++ b/tests/queries/0_stateless/02147_order_by_optimizations.reference\n@@ -0,0 +1,21 @@\n+SELECT\n+    date,\n+    v\n+FROM t_02147\n+ORDER BY\n+    toStartOfHour(date) ASC,\n+    v ASC\n+SELECT\n+    date,\n+    v\n+FROM t_02147_dist\n+ORDER BY\n+    toStartOfHour(date) ASC,\n+    v ASC\n+SELECT\n+    date,\n+    v\n+FROM t_02147_merge\n+ORDER BY\n+    toStartOfHour(date) ASC,\n+    v ASC\ndiff --git a/tests/queries/0_stateless/02147_order_by_optimizations.sql b/tests/queries/0_stateless/02147_order_by_optimizations.sql\nnew file mode 100644\nindex 000000000000..7aa631ff4322\n--- /dev/null\n+++ b/tests/queries/0_stateless/02147_order_by_optimizations.sql\n@@ -0,0 +1,15 @@\n+DROP TABLE IF EXISTS t_02147;\n+DROP TABLE IF EXISTS t_02147_dist;\n+DROP TABLE IF EXISTS t_02147_merge;\n+\n+CREATE TABLE t_02147 (date DateTime, v UInt32)\n+ENGINE = MergeTree ORDER BY toStartOfHour(date);\n+\n+CREATE TABLE t_02147_dist AS t_02147 ENGINE = Distributed(test_shard_localhost, currentDatabase(), t_02147);\n+CREATE TABLE t_02147_merge AS t_02147 ENGINE = Merge(currentDatabase(), 't_02147');\n+\n+SET optimize_monotonous_functions_in_order_by = 1;\n+\n+EXPLAIN SYNTAX SELECT * FROM t_02147 ORDER BY toStartOfHour(date), v;\n+EXPLAIN SYNTAX SELECT * FROM t_02147_dist ORDER BY toStartOfHour(date), v;\n+EXPLAIN SYNTAX SELECT * FROM t_02147_merge ORDER BY toStartOfHour(date), v;\n",
  "problem_statement": "Issue with optimize_read_in_order on Merge table\nThis is an issue similar to https://github.com/ClickHouse/ClickHouse/issues/7617 but with slight difference.\r\n\r\nI am seeing optimize_read_in_order working in MergeTree table but not honored by Merge table on top of it, the issue can be reproduced on ClickHouse server version 20.12.4 revision 54442 through the following commands:\r\n\r\n**Table Setup:**\r\n_create table mt( A Int64, B Int64, V Int64) Engine=MergeTree order by (A,-B)_\r\n\r\n_create table m as mt ENGINE = Merge(default, 'mt')_\r\n\r\n_insert into mt select 111, number, number from numbers(10000000)_\r\n\r\n\r\n\r\n\r\n\r\n**Queries:**\r\nSelecting on the MergeTree table honors optimize_read_in_order and only processes 400K rows:\r\n```\r\nselect * from mt where A = 111 order by A,-B limit 3 settings max_threads=1,optimize_read_in_order=1;\r\n\u250c\u2500\u2500\u2500A\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500B\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500V\u2500\u2510\r\n\u2502 111 \u2502 9999999 \u2502 9999999 \u2502\r\n\u2502 111 \u2502 9999998 \u2502 9999998 \u2502\r\n\u2502 111 \u2502 9999997 \u2502 9999997 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n3 rows in set. Elapsed: 0.048 sec. Processed 409.60 thousand rows, 9.83 MB (8.46 million rows/s., 203.06 MB/s.)\r\n```\r\n\r\nSelecting on the Merge table does not honor optimize_read_in_order and processes all 10M rows:\r\n```\r\n\u250c\u2500\u2500\u2500A\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500B\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500V\u2500\u2510\r\n\u2502 111 \u2502 9999999 \u2502 9999999 \u2502\r\n\u2502 111 \u2502 9999999 \u2502 9999999 \u2502\r\n\u2502 111 \u2502 9999998 \u2502 9999998 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nselect * from m where A = 111 order by A,-B limit 3 settings max_threads=1,optimize_read_in_order=1;\r\n3 rows in set. Elapsed: 0.424 sec. Processed 10.00 million rows, 240.00 MB (23.56 million rows/s., 565.48 MB/s.)\r\n```\r\n\r\n\r\n\n`optimize_monotonous_functions_in_order_by` optimization breaks matching of primary key for `optimize_read_in_order` optimization in `Distributed` tables\n\r\n\r\n**How to reproduce**\r\n\r\n```sql\r\nCREATE TABLE t_local\r\n(\r\n    `d` DateTime,\r\n    `v` UInt32\r\n)\r\nENGINE = MergeTree\r\nORDER BY toStartOfHour(d);\r\n\r\nCREATE TABLE t_dist AS t_local\r\nENGINE = Distributed(test_shard_localhost, currentDatabase(), t_local);\r\n\r\nINSERT INTO t_local VALUES (now(), 1);\r\n```\r\n\r\n```sql\r\n\r\nEXPLAIN PIPELINE\r\nSELECT v\r\nFROM t_dist\r\nORDER BY\r\n    toStartOfHour(d) ASC,\r\n    v ASC\r\nSETTINGS optimize_monotonous_functions_in_order_by = 0\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (SettingQuotaAndLimits)            \u2502\r\n\u2502   (Expression)                     \u2502\r\n\u2502   ExpressionTransform              \u2502\r\n\u2502     (Sorting)                      \u2502\r\n\u2502  -> FinishSortingTransform <-      \u2502\r\n\u2502       PartialSortingTransform      \u2502\r\n\u2502         (Expression)               \u2502\r\n\u2502         ExpressionTransform        \u2502\r\n\u2502           (SettingQuotaAndLimits)  \u2502\r\n\u2502             (ReadFromMergeTree)    \u2502\r\n\u2502             MergeTreeInOrder 0 \u2192 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nEXPLAIN PIPELINE\r\nSELECT v\r\nFROM t_dist\r\nORDER BY\r\n    toStartOfHour(d) ASC,\r\n    v ASC\r\nSETTINGS optimize_monotonous_functions_in_order_by = 1\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (SettingQuotaAndLimits)              \u2502\r\n\u2502   (Expression)                       \u2502\r\n\u2502   ExpressionTransform                \u2502\r\n\u2502     (Sorting)                        \u2502\r\n\u2502  -> MergeSortingTransform   <-            \u2502\r\n\u2502       LimitsCheckingTransform        \u2502\r\n\u2502         PartialSortingTransform      \u2502\r\n\u2502           (Expression)               \u2502\r\n\u2502           ExpressionTransform        \u2502\r\n\u2502             (SettingQuotaAndLimits)  \u2502\r\n\u2502               (ReadFromMergeTree)    \u2502\r\n\u2502               MergeTreeInOrder 0 \u2192 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nEXPLAIN SYNTAX\r\nSELECT v\r\nFROM t_dist\r\nORDER BY\r\n    toStartOfHour(d) ASC,\r\n    v ASC\r\nSETTINGS optimize_monotonous_functions_in_order_by = 1\r\n\r\nQuery id: 1add8abb-1f3c-4f50-82df-cadcf162358d\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SELECT v                                               \u2502\r\n\u2502 FROM t_dist                                            \u2502\r\n\u2502 ORDER BY                                               \u2502\r\n\u2502     d ASC,                                             \u2502\r\n\u2502     v ASC                                              \u2502\r\n\u2502 SETTINGS optimize_monotonous_functions_in_order_by = 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nIt happens, because `optimize_monotonous_functions_in_order_by` eliminates monotonous function from `ORDER BY`, while it is used for matching the prefix of primary key and `optimize_read_in_order` doesn't work.\n",
  "hints_text": "The issue is in recently introduced optimizations on ast level.\r\nWhen `set optimize_monotonous_functions_in_order_by = 0` the query works as expected.\r\n\r\n```\r\nset optimize_monotonous_functions_in_order_by = 0;\r\nselect * from m where A = 111 order by A,-B limit 3 settings max_threads=1,optimize_read_in_order=1;\r\n\r\n\u250c\u2500\u2500\u2500A\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500B\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500V\u2500\u2510\r\n\u2502 111 \u2502 9999999 \u2502 9999999 \u2502\r\n\u2502 111 \u2502 9999998 \u2502 9999998 \u2502\r\n\u2502 111 \u2502 9999997 \u2502 9999997 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n3 rows in set. Elapsed: 0.008 sec. Processed 81.92 thousand rows, 1.97 MB (10.69 million rows/s., 256.55 MB/s.)\r\n```\r\n\r\nRelated to #16107. It was fixed for `MergeTree`, but seems not for `Merge` tables.\nSimilar issue appears when using Distributed tables.\npossibly related #20009",
  "created_at": "2021-12-13T12:43:44Z"
}