You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Issue with optimize_read_in_order on Merge table
This is an issue similar to https://github.com/ClickHouse/ClickHouse/issues/7617 but with slight difference.

I am seeing optimize_read_in_order working in MergeTree table but not honored by Merge table on top of it, the issue can be reproduced on ClickHouse server version 20.12.4 revision 54442 through the following commands:

**Table Setup:**
_create table mt( A Int64, B Int64, V Int64) Engine=MergeTree order by (A,-B)_

_create table m as mt ENGINE = Merge(default, 'mt')_

_insert into mt select 111, number, number from numbers(10000000)_





**Queries:**
Selecting on the MergeTree table honors optimize_read_in_order and only processes 400K rows:
```
select * from mt where A = 111 order by A,-B limit 3 settings max_threads=1,optimize_read_in_order=1;
┌───A─┬───────B─┬───────V─┐
│ 111 │ 9999999 │ 9999999 │
│ 111 │ 9999998 │ 9999998 │
│ 111 │ 9999997 │ 9999997 │
└─────┴─────────┴─────────┘
3 rows in set. Elapsed: 0.048 sec. Processed 409.60 thousand rows, 9.83 MB (8.46 million rows/s., 203.06 MB/s.)
```

Selecting on the Merge table does not honor optimize_read_in_order and processes all 10M rows:
```
┌───A─┬───────B─┬───────V─┐
│ 111 │ 9999999 │ 9999999 │
│ 111 │ 9999999 │ 9999999 │
│ 111 │ 9999998 │ 9999998 │
└─────┴─────────┴─────────┘
select * from m where A = 111 order by A,-B limit 3 settings max_threads=1,optimize_read_in_order=1;
3 rows in set. Elapsed: 0.424 sec. Processed 10.00 million rows, 240.00 MB (23.56 million rows/s., 565.48 MB/s.)
```



`optimize_monotonous_functions_in_order_by` optimization breaks matching of primary key for `optimize_read_in_order` optimization in `Distributed` tables


**How to reproduce**

```sql
CREATE TABLE t_local
(
    `d` DateTime,
    `v` UInt32
)
ENGINE = MergeTree
ORDER BY toStartOfHour(d);

CREATE TABLE t_dist AS t_local
ENGINE = Distributed(test_shard_localhost, currentDatabase(), t_local);

INSERT INTO t_local VALUES (now(), 1);
```

```sql

EXPLAIN PIPELINE
SELECT v
FROM t_dist
ORDER BY
    toStartOfHour(d) ASC,
    v ASC
SETTINGS optimize_monotonous_functions_in_order_by = 0

┌─explain────────────────────────────┐
│ (SettingQuotaAndLimits)            │
│   (Expression)                     │
│   ExpressionTransform              │
│     (Sorting)                      │
│  -> FinishSortingTransform <-      │
│       PartialSortingTransform      │
│         (Expression)               │
│         ExpressionTransform        │
│           (SettingQuotaAndLimits)  │
│             (ReadFromMergeTree)    │
│             MergeTreeInOrder 0 → 1 │
└────────────────────────────────────┘

EXPLAIN PIPELINE
SELECT v
FROM t_dist
ORDER BY
    toStartOfHour(d) ASC,
    v ASC
SETTINGS optimize_monotonous_functions_in_order_by = 1

┌─explain──────────────────────────────┐
│ (SettingQuotaAndLimits)              │
│   (Expression)                       │
│   ExpressionTransform                │
│     (Sorting)                        │
│  -> MergeSortingTransform   <-            │
│       LimitsCheckingTransform        │
│         PartialSortingTransform      │
│           (Expression)               │
│           ExpressionTransform        │
│             (SettingQuotaAndLimits)  │
│               (ReadFromMergeTree)    │
│               MergeTreeInOrder 0 → 1 │
└──────────────────────────────────────┘

EXPLAIN SYNTAX
SELECT v
FROM t_dist
ORDER BY
    toStartOfHour(d) ASC,
    v ASC
SETTINGS optimize_monotonous_functions_in_order_by = 1

Query id: 1add8abb-1f3c-4f50-82df-cadcf162358d

┌─explain────────────────────────────────────────────────┐
│ SELECT v                                               │
│ FROM t_dist                                            │
│ ORDER BY                                               │
│     d ASC,                                             │
│     v ASC                                              │
│ SETTINGS optimize_monotonous_functions_in_order_by = 1 │
└────────────────────────────────────────────────────────┘
```
It happens, because `optimize_monotonous_functions_in_order_by` eliminates monotonous function from `ORDER BY`, while it is used for matching the prefix of primary key and `optimize_read_in_order` doesn't work.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
