diff --git a/src/Compression/tests/gtest_compressionCodec.cpp b/src/Compression/tests/gtest_compressionCodec.cpp
index f3652366a24f..eca1c3c0a8f2 100644
--- a/src/Compression/tests/gtest_compressionCodec.cpp
+++ b/src/Compression/tests/gtest_compressionCodec.cpp
@@ -470,7 +470,7 @@ CompressionCodecPtr makeCodec(const std::string & codec_string, const DataTypePt
 
     parser.parse(token_iterator, codec_ast, expected);
 
-    return CompressionCodecFactory::instance().get(codec_ast, data_type);
+    return CompressionCodecFactory::instance().get(codec_ast, data_type, false);
 }
 
 template <typename Timer>
diff --git a/tests/integration/test_non_default_compression/configs/allow_suspicious_codecs.xml b/tests/integration/test_non_default_compression/configs/allow_suspicious_codecs.xml
new file mode 100644
index 000000000000..eb75c339e510
--- /dev/null
+++ b/tests/integration/test_non_default_compression/configs/allow_suspicious_codecs.xml
@@ -0,0 +1,7 @@
+<yandex>
+    <profiles>
+        <default>
+            <allow_suspicious_codecs>1</allow_suspicious_codecs>
+        </default>
+    </profiles>
+</yandex>
diff --git a/tests/integration/test_non_default_compression/configs/enable_uncompressed_cache.xml b/tests/integration/test_non_default_compression/configs/enable_uncompressed_cache.xml
index c899b1225195..15ebf6a74ded 100644
--- a/tests/integration/test_non_default_compression/configs/enable_uncompressed_cache.xml
+++ b/tests/integration/test_non_default_compression/configs/enable_uncompressed_cache.xml
@@ -1,24 +1,7 @@
-<?xml version="1.0"?>
 <yandex>
     <profiles>
         <default>
             <use_uncompressed_cache>1</use_uncompressed_cache>
         </default>
     </profiles>
-    <users>
-        <default>
-            <password></password>
-            <networks incl="networks" replace="replace">
-                <ip>::/0</ip>
-            </networks>
-            <profile>default</profile>
-            <quota>default</quota>
-        </default>
-    </users>
-
-    <quotas>
-        <default>
-        </default>
-    </quotas>
-
 </yandex>
diff --git a/tests/integration/test_non_default_compression/test.py b/tests/integration/test_non_default_compression/test.py
index f5fe349a929a..2c099e84e89b 100644
--- a/tests/integration/test_non_default_compression/test.py
+++ b/tests/integration/test_non_default_compression/test.py
@@ -7,11 +7,11 @@
 
 cluster = ClickHouseCluster(__file__)
 
-node1 = cluster.add_instance('node1', main_configs=['configs/zstd_compression_by_default.xml'])
-node2 = cluster.add_instance('node2', main_configs=['configs/lz4hc_compression_by_default.xml'])
-node3 = cluster.add_instance('node3', main_configs=['configs/custom_compression_by_default.xml'])
-node4 = cluster.add_instance('node4', user_configs=['configs/enable_uncompressed_cache.xml'])
-node5 = cluster.add_instance('node5', main_configs=['configs/zstd_compression_by_default.xml'], user_configs=['configs/enable_uncompressed_cache.xml'])
+node1 = cluster.add_instance('node1', main_configs=['configs/zstd_compression_by_default.xml'], user_configs=['configs/allow_suspicious_codecs.xml'])
+node2 = cluster.add_instance('node2', main_configs=['configs/lz4hc_compression_by_default.xml'], user_configs=['configs/allow_suspicious_codecs.xml'])
+node3 = cluster.add_instance('node3', main_configs=['configs/custom_compression_by_default.xml'], user_configs=['configs/allow_suspicious_codecs.xml'])
+node4 = cluster.add_instance('node4', user_configs=['configs/enable_uncompressed_cache.xml', 'configs/allow_suspicious_codecs.xml'])
+node5 = cluster.add_instance('node5', main_configs=['configs/zstd_compression_by_default.xml'], user_configs=['configs/enable_uncompressed_cache.xml', 'configs/allow_suspicious_codecs.xml'])
 
 @pytest.fixture(scope="module")
 def start_cluster():
diff --git a/tests/queries/0_stateless/00804_test_alter_compression_codecs.sql b/tests/queries/0_stateless/00804_test_alter_compression_codecs.sql
index d071fc1831a0..8a4cb9f81d7f 100644
--- a/tests/queries/0_stateless/00804_test_alter_compression_codecs.sql
+++ b/tests/queries/0_stateless/00804_test_alter_compression_codecs.sql
@@ -28,6 +28,7 @@ SELECT * FROM alter_compression_codec ORDER BY id;
 OPTIMIZE TABLE alter_compression_codec FINAL;
 SELECT * FROM alter_compression_codec ORDER BY id;
 
+SET allow_suspicious_codecs = 1;
 ALTER TABLE alter_compression_codec MODIFY COLUMN alter_column CODEC(ZSTD, LZ4HC, LZ4, LZ4, NONE);
 SELECT compression_codec FROM system.columns WHERE database = currentDatabase() AND table = 'alter_compression_codec' AND name = 'alter_column';
 
diff --git a/tests/queries/0_stateless/00804_test_custom_compression_codecs.sql b/tests/queries/0_stateless/00804_test_custom_compression_codecs.sql
index 973230be60ef..2c7b3b39469a 100644
--- a/tests/queries/0_stateless/00804_test_custom_compression_codecs.sql
+++ b/tests/queries/0_stateless/00804_test_custom_compression_codecs.sql
@@ -1,4 +1,5 @@
 SET send_logs_level = 'none';
+SET allow_suspicious_codecs = 1;
 
 DROP TABLE IF EXISTS compression_codec;
 
diff --git a/tests/queries/0_stateless/00804_test_custom_compression_codes_log_storages.sql b/tests/queries/0_stateless/00804_test_custom_compression_codes_log_storages.sql
index 5210b1d7706e..f61adccefd57 100644
--- a/tests/queries/0_stateless/00804_test_custom_compression_codes_log_storages.sql
+++ b/tests/queries/0_stateless/00804_test_custom_compression_codes_log_storages.sql
@@ -1,4 +1,5 @@
 SET send_logs_level = 'none';
+SET allow_suspicious_codecs = 1;
 
 -- copy-paste for storage log
 
diff --git a/tests/queries/0_stateless/00804_test_delta_codec_no_type_alter.sql b/tests/queries/0_stateless/00804_test_delta_codec_no_type_alter.sql
index 69afc2d4915d..f49b8b2ee32d 100644
--- a/tests/queries/0_stateless/00804_test_delta_codec_no_type_alter.sql
+++ b/tests/queries/0_stateless/00804_test_delta_codec_no_type_alter.sql
@@ -1,4 +1,5 @@
 SET send_logs_level = 'none';
+SET allow_suspicious_codecs = 1;
 
 DROP TABLE IF EXISTS delta_codec_for_alter;
 CREATE TABLE delta_codec_for_alter (date Date, x UInt32 Codec(Delta), s FixedString(128)) ENGINE = MergeTree ORDER BY tuple();
diff --git a/tests/queries/0_stateless/00910_zookeeper_custom_compression_codecs_replicated.sql b/tests/queries/0_stateless/00910_zookeeper_custom_compression_codecs_replicated.sql
index d3bbbacd2a6c..be83f040e044 100644
--- a/tests/queries/0_stateless/00910_zookeeper_custom_compression_codecs_replicated.sql
+++ b/tests/queries/0_stateless/00910_zookeeper_custom_compression_codecs_replicated.sql
@@ -1,4 +1,5 @@
 SET send_logs_level = 'none';
+SET allow_suspicious_codecs = 1;
 
 DROP TABLE IF EXISTS test.compression_codec_replicated1;
 DROP TABLE IF EXISTS test.compression_codec_replicated2;
diff --git a/tests/queries/0_stateless/00910_zookeeper_test_alter_compression_codecs.sql b/tests/queries/0_stateless/00910_zookeeper_test_alter_compression_codecs.sql
index d9ca0595fa53..cec9ff86cd0c 100644
--- a/tests/queries/0_stateless/00910_zookeeper_test_alter_compression_codecs.sql
+++ b/tests/queries/0_stateless/00910_zookeeper_test_alter_compression_codecs.sql
@@ -46,6 +46,7 @@ SYSTEM SYNC REPLICA alter_compression_codec1;
 SELECT * FROM alter_compression_codec1 ORDER BY id;
 SELECT * FROM alter_compression_codec2 ORDER BY id;
 
+SET allow_suspicious_codecs = 1;
 ALTER TABLE alter_compression_codec1 MODIFY COLUMN alter_column CODEC(ZSTD, LZ4HC, LZ4, LZ4, NONE);
 SYSTEM SYNC REPLICA alter_compression_codec1;
 SYSTEM SYNC REPLICA alter_compression_codec2;
diff --git a/tests/queries/0_stateless/00926_adaptive_index_granularity_pk.sql b/tests/queries/0_stateless/00926_adaptive_index_granularity_pk.sql
index e79731edad73..53e640a40327 100644
--- a/tests/queries/0_stateless/00926_adaptive_index_granularity_pk.sql
+++ b/tests/queries/0_stateless/00926_adaptive_index_granularity_pk.sql
@@ -57,6 +57,7 @@ SET force_primary_key = 0;
 DROP TABLE IF EXISTS large_alter_table_00926;
 DROP TABLE IF EXISTS store_of_hash_00926;
 
+SET allow_suspicious_codecs = 1;
 CREATE TABLE large_alter_table_00926 (
     somedate Date CODEC(ZSTD, ZSTD, ZSTD(12), LZ4HC(12)),
     id UInt64 CODEC(LZ4, ZSTD, NONE, LZ4HC),
diff --git a/tests/queries/0_stateless/00957_delta_diff_bug.sql b/tests/queries/0_stateless/00957_delta_diff_bug.sql
index 0c5fb6ce7e1a..86584d3cdf35 100644
--- a/tests/queries/0_stateless/00957_delta_diff_bug.sql
+++ b/tests/queries/0_stateless/00957_delta_diff_bug.sql
@@ -1,3 +1,5 @@
+SET allow_suspicious_codecs = 1;
+
 DROP TABLE IF EXISTS segfault_table;
 
 CREATE TABLE segfault_table (id UInt16 CODEC(Delta(2))) ENGINE MergeTree() order by tuple();
diff --git a/tests/queries/0_stateless/01272_suspicious_codecs.reference b/tests/queries/0_stateless/01272_suspicious_codecs.reference
new file mode 100644
index 000000000000..559b6df2693e
--- /dev/null
+++ b/tests/queries/0_stateless/01272_suspicious_codecs.reference
@@ -0,0 +1,16 @@
+CREATE TABLE default.codecs1
(
    `a` UInt8 CODEC(NONE, NONE)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs2
(
    `a` UInt8 CODEC(NONE, LZ4)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs3
(
    `a` UInt8 CODEC(LZ4, NONE)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs4
(
    `a` UInt8 CODEC(LZ4, LZ4)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs5
(
    `a` UInt8 CODEC(LZ4, ZSTD(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs6
(
    `a` UInt8 CODEC(Delta(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs7
(
    `a` UInt8 CODEC(Delta(1), Delta(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs8
(
    `a` UInt8 CODEC(LZ4, Delta(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs1
(
    `a` UInt8 CODEC(NONE, NONE)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs2
(
    `a` UInt8 CODEC(NONE, LZ4)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs3
(
    `a` UInt8 CODEC(LZ4, NONE)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs4
(
    `a` UInt8 CODEC(LZ4, LZ4)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs5
(
    `a` UInt8 CODEC(LZ4, ZSTD(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs6
(
    `a` UInt8 CODEC(Delta(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs7
(
    `a` UInt8 CODEC(Delta(1), Delta(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.codecs8
(
    `a` UInt8 CODEC(LZ4, Delta(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
diff --git a/tests/queries/0_stateless/01272_suspicious_codecs.sql b/tests/queries/0_stateless/01272_suspicious_codecs.sql
new file mode 100644
index 000000000000..3ec3e480da40
--- /dev/null
+++ b/tests/queries/0_stateless/01272_suspicious_codecs.sql
@@ -0,0 +1,107 @@
+DROP TABLE IF EXISTS codecs;
+
+-- test what should work
+
+CREATE TABLE codecs
+(
+    a UInt8 CODEC(LZ4),
+    b UInt16 CODEC(ZSTD),
+    c Float32 CODEC(Gorilla),
+    d UInt8 CODEC(Delta, LZ4),
+    e Float64 CODEC(Gorilla, ZSTD),
+    f UInt32 CODEC(Delta, Delta, Gorilla),
+    g DateTime CODEC(DoubleDelta),
+    h DateTime64 CODEC(DoubleDelta, LZ4),
+    i String CODEC(NONE)
+) ENGINE = MergeTree ORDER BY tuple();
+
+DROP TABLE codecs;
+
+-- test what should not work
+
+CREATE TABLE codecs (a UInt8 CODEC(NONE, NONE)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError 36 }
+CREATE TABLE codecs (a UInt8 CODEC(NONE, LZ4)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError 36 }
+CREATE TABLE codecs (a UInt8 CODEC(LZ4, NONE)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError 36 }
+CREATE TABLE codecs (a UInt8 CODEC(LZ4, LZ4)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError 36 }
+CREATE TABLE codecs (a UInt8 CODEC(LZ4, ZSTD)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError 36 }
+CREATE TABLE codecs (a UInt8 CODEC(Delta)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError 36 }
+CREATE TABLE codecs (a UInt8 CODEC(Delta, Delta)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError 36 }
+CREATE TABLE codecs (a UInt8 CODEC(LZ4, Delta)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError 36 }
+
+-- test that sanity check is not performed in ATTACH query
+
+DROP TABLE IF EXISTS codecs1;
+DROP TABLE IF EXISTS codecs2;
+DROP TABLE IF EXISTS codecs3;
+DROP TABLE IF EXISTS codecs4;
+DROP TABLE IF EXISTS codecs5;
+DROP TABLE IF EXISTS codecs6;
+DROP TABLE IF EXISTS codecs7;
+DROP TABLE IF EXISTS codecs8;
+
+SET allow_suspicious_codecs = 1;
+
+CREATE TABLE codecs1 (a UInt8 CODEC(NONE, NONE)) ENGINE = MergeTree ORDER BY tuple();
+CREATE TABLE codecs2 (a UInt8 CODEC(NONE, LZ4)) ENGINE = MergeTree ORDER BY tuple();
+CREATE TABLE codecs3 (a UInt8 CODEC(LZ4, NONE)) ENGINE = MergeTree ORDER BY tuple();
+CREATE TABLE codecs4 (a UInt8 CODEC(LZ4, LZ4)) ENGINE = MergeTree ORDER BY tuple();
+CREATE TABLE codecs5 (a UInt8 CODEC(LZ4, ZSTD)) ENGINE = MergeTree ORDER BY tuple();
+CREATE TABLE codecs6 (a UInt8 CODEC(Delta)) ENGINE = MergeTree ORDER BY tuple();
+CREATE TABLE codecs7 (a UInt8 CODEC(Delta, Delta)) ENGINE = MergeTree ORDER BY tuple();
+CREATE TABLE codecs8 (a UInt8 CODEC(LZ4, Delta)) ENGINE = MergeTree ORDER BY tuple();
+
+SET allow_suspicious_codecs = 0;
+
+SHOW CREATE TABLE codecs1;
+SHOW CREATE TABLE codecs2;
+SHOW CREATE TABLE codecs3;
+SHOW CREATE TABLE codecs4;
+SHOW CREATE TABLE codecs5;
+SHOW CREATE TABLE codecs6;
+SHOW CREATE TABLE codecs7;
+SHOW CREATE TABLE codecs8;
+
+DETACH TABLE codecs1;
+DETACH TABLE codecs2;
+DETACH TABLE codecs3;
+DETACH TABLE codecs4;
+DETACH TABLE codecs5;
+DETACH TABLE codecs6;
+DETACH TABLE codecs7;
+DETACH TABLE codecs8;
+
+ATTACH TABLE codecs1;
+ATTACH TABLE codecs2;
+ATTACH TABLE codecs3;
+ATTACH TABLE codecs4;
+ATTACH TABLE codecs5;
+ATTACH TABLE codecs6;
+ATTACH TABLE codecs7;
+ATTACH TABLE codecs8;
+
+SHOW CREATE TABLE codecs1;
+SHOW CREATE TABLE codecs2;
+SHOW CREATE TABLE codecs3;
+SHOW CREATE TABLE codecs4;
+SHOW CREATE TABLE codecs5;
+SHOW CREATE TABLE codecs6;
+SHOW CREATE TABLE codecs7;
+SHOW CREATE TABLE codecs8;
+
+SELECT * FROM codecs1;
+SELECT * FROM codecs2;
+SELECT * FROM codecs3;
+SELECT * FROM codecs4;
+SELECT * FROM codecs5;
+SELECT * FROM codecs6;
+SELECT * FROM codecs7;
+SELECT * FROM codecs8;
+
+DROP TABLE codecs1;
+DROP TABLE codecs2;
+DROP TABLE codecs3;
+DROP TABLE codecs4;
+DROP TABLE codecs5;
+DROP TABLE codecs6;
+DROP TABLE codecs7;
+DROP TABLE codecs8;
