diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 0fe66314114e..b51fad2ca252 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -567,6 +567,7 @@ if (ENABLE_TESTS AND USE_GTEST)
         clickhouse_storages_system
         dbms
         clickhouse_common_zookeeper
+        clickhouse_common_config
         string_utils)
 
     add_check(unit_tests_dbms)
diff --git a/src/Common/Config/CMakeLists.txt b/src/Common/Config/CMakeLists.txt
index 3da44be2af67..4d72960f7270 100644
--- a/src/Common/Config/CMakeLists.txt
+++ b/src/Common/Config/CMakeLists.txt
@@ -4,6 +4,7 @@ set (SRCS
     configReadClient.cpp
     ConfigReloader.cpp
     YAMLParser.cpp
+    ConfigHelper.cpp
 )
 
 add_library(clickhouse_common_config ${SRCS})
diff --git a/src/Common/Config/ConfigHelper.cpp b/src/Common/Config/ConfigHelper.cpp
new file mode 100644
index 000000000000..69fe42de86c1
--- /dev/null
+++ b/src/Common/Config/ConfigHelper.cpp
@@ -0,0 +1,23 @@
+#include <Common/Config/ConfigHelper.h>
+#include <Poco/Util/AbstractConfiguration.h>
+
+namespace DB
+{
+
+namespace ConfigHelper
+{
+
+bool getBool(const Poco::Util::AbstractConfiguration & config, const std::string & key, bool default_, bool empty_as)
+{
+    if (!config.has(key))
+        return default_;
+    Poco::Util::AbstractConfiguration::Keys sub_keys;
+    config.keys(key, sub_keys);
+    if (sub_keys.empty() && config.getString(key).empty())
+        return empty_as;
+    return config.getBool(key, default_);
+}
+
+}
+
+}
diff --git a/src/Common/Config/ConfigHelper.h b/src/Common/Config/ConfigHelper.h
new file mode 100644
index 000000000000..62271bbaf0ad
--- /dev/null
+++ b/src/Common/Config/ConfigHelper.h
@@ -0,0 +1,18 @@
+#pragma once
+
+namespace Poco
+{
+    namespace Util
+    {
+        class AbstractConfiguration;
+    }
+}
+
+namespace DB::ConfigHelper
+{
+
+/// The behavior is like `config.getBool(key, default_)`,
+/// except when the tag is empty (aka. self-closing), `empty_as` will be used instead of throwing Poco::Exception.
+bool getBool(const Poco::Util::AbstractConfiguration & config, const std::string & key, bool default_, bool empty_as);
+
+}
diff --git a/src/Interpreters/Cluster.cpp b/src/Interpreters/Cluster.cpp
index b7b6b84439bf..05972f2ee50d 100644
--- a/src/Interpreters/Cluster.cpp
+++ b/src/Interpreters/Cluster.cpp
@@ -5,6 +5,7 @@
 #include <Common/StringUtils/StringUtils.h>
 #include <Common/parseAddress.h>
 #include <Common/Config/AbstractConfigurationComparison.h>
+#include <Common/Config/ConfigHelper.h>
 #include <Core/Settings.h>
 #include <IO/WriteHelpers.h>
 #include <IO/ReadHelpers.h>
@@ -101,7 +102,7 @@ Cluster::Address::Address(
     user = config.getString(config_prefix + ".user", "default");
     password = config.getString(config_prefix + ".password", "");
     default_database = config.getString(config_prefix + ".default_database", "");
-    secure = config.getBool(config_prefix + ".secure", false) ? Protocol::Secure::Enable : Protocol::Secure::Disable;
+    secure = ConfigHelper::getBool(config, config_prefix + ".secure", false, /* empty_as */true) ? Protocol::Secure::Enable : Protocol::Secure::Disable;
     priority = config.getInt(config_prefix + ".priority", 1);
     const char * port_type = secure == Protocol::Secure::Enable ? "tcp_port_secure" : "tcp_port";
     is_local = isLocal(config.getInt(port_type, 0));
