{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 33330,
  "instance_id": "ClickHouse__ClickHouse-33330",
  "issue_numbers": [
    "33270"
  ],
  "base_commit": "3d500f5299f6949cfd408f0315f60da7e238fbb6",
  "patch": "diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex 0fe66314114e..b51fad2ca252 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -567,6 +567,7 @@ if (ENABLE_TESTS AND USE_GTEST)\n         clickhouse_storages_system\n         dbms\n         clickhouse_common_zookeeper\n+        clickhouse_common_config\n         string_utils)\n \n     add_check(unit_tests_dbms)\ndiff --git a/src/Common/Config/CMakeLists.txt b/src/Common/Config/CMakeLists.txt\nindex 3da44be2af67..4d72960f7270 100644\n--- a/src/Common/Config/CMakeLists.txt\n+++ b/src/Common/Config/CMakeLists.txt\n@@ -4,6 +4,7 @@ set (SRCS\n     configReadClient.cpp\n     ConfigReloader.cpp\n     YAMLParser.cpp\n+    ConfigHelper.cpp\n )\n \n add_library(clickhouse_common_config ${SRCS})\ndiff --git a/src/Common/Config/ConfigHelper.cpp b/src/Common/Config/ConfigHelper.cpp\nnew file mode 100644\nindex 000000000000..69fe42de86c1\n--- /dev/null\n+++ b/src/Common/Config/ConfigHelper.cpp\n@@ -0,0 +1,23 @@\n+#include <Common/Config/ConfigHelper.h>\n+#include <Poco/Util/AbstractConfiguration.h>\n+\n+namespace DB\n+{\n+\n+namespace ConfigHelper\n+{\n+\n+bool getBool(const Poco::Util::AbstractConfiguration & config, const std::string & key, bool default_, bool empty_as)\n+{\n+    if (!config.has(key))\n+        return default_;\n+    Poco::Util::AbstractConfiguration::Keys sub_keys;\n+    config.keys(key, sub_keys);\n+    if (sub_keys.empty() && config.getString(key).empty())\n+        return empty_as;\n+    return config.getBool(key, default_);\n+}\n+\n+}\n+\n+}\ndiff --git a/src/Common/Config/ConfigHelper.h b/src/Common/Config/ConfigHelper.h\nnew file mode 100644\nindex 000000000000..62271bbaf0ad\n--- /dev/null\n+++ b/src/Common/Config/ConfigHelper.h\n@@ -0,0 +1,18 @@\n+#pragma once\n+\n+namespace Poco\n+{\n+    namespace Util\n+    {\n+        class AbstractConfiguration;\n+    }\n+}\n+\n+namespace DB::ConfigHelper\n+{\n+\n+/// The behavior is like `config.getBool(key, default_)`,\n+/// except when the tag is empty (aka. self-closing), `empty_as` will be used instead of throwing Poco::Exception.\n+bool getBool(const Poco::Util::AbstractConfiguration & config, const std::string & key, bool default_, bool empty_as);\n+\n+}\ndiff --git a/src/Interpreters/Cluster.cpp b/src/Interpreters/Cluster.cpp\nindex b7b6b84439bf..05972f2ee50d 100644\n--- a/src/Interpreters/Cluster.cpp\n+++ b/src/Interpreters/Cluster.cpp\n@@ -5,6 +5,7 @@\n #include <Common/StringUtils/StringUtils.h>\n #include <Common/parseAddress.h>\n #include <Common/Config/AbstractConfigurationComparison.h>\n+#include <Common/Config/ConfigHelper.h>\n #include <Core/Settings.h>\n #include <IO/WriteHelpers.h>\n #include <IO/ReadHelpers.h>\n@@ -101,7 +102,7 @@ Cluster::Address::Address(\n     user = config.getString(config_prefix + \".user\", \"default\");\n     password = config.getString(config_prefix + \".password\", \"\");\n     default_database = config.getString(config_prefix + \".default_database\", \"\");\n-    secure = config.getBool(config_prefix + \".secure\", false) ? Protocol::Secure::Enable : Protocol::Secure::Disable;\n+    secure = ConfigHelper::getBool(config, config_prefix + \".secure\", false, /* empty_as */true) ? Protocol::Secure::Enable : Protocol::Secure::Disable;\n     priority = config.getInt(config_prefix + \".priority\", 1);\n     const char * port_type = secure == Protocol::Secure::Enable ? \"tcp_port_secure\" : \"tcp_port\";\n     is_local = isLocal(config.getInt(port_type, 0));\n",
  "test_patch": "diff --git a/src/Common/tests/gtest_config_helper.cpp b/src/Common/tests/gtest_config_helper.cpp\nnew file mode 100644\nindex 000000000000..59a6cfa0ae0c\n--- /dev/null\n+++ b/src/Common/tests/gtest_config_helper.cpp\n@@ -0,0 +1,37 @@\n+#include <Common/Config/ConfigHelper.h>\n+#include <Poco/AutoPtr.h>\n+#include <Poco/Util/XMLConfiguration.h>\n+#include <Poco/DOM/DOMParser.h>\n+\n+#include <gtest/gtest.h>\n+\n+\n+using namespace DB;\n+\n+TEST(Common, ConfigHelperGetBool)\n+{\n+    std::string xml(R\"CONFIG(<clickhouse>\n+    <zero_as_false>0</zero_as_false>\n+    <one_as_true>1</one_as_true>\n+    <yes_as_true>Yes</yes_as_true>\n+    <empty_as_true_1/>\n+    <empty_as_true_2></empty_as_true_2>\n+    <has_empty_child_1><empty_child/></has_empty_child_1>\n+    <has_empty_child_2><empty_child/><child>1</child></has_empty_child_2>\n+    <has_child_1><child>1</child></has_child_1>\n+    <has_child_2><child0>Yes</child0><child>1</child></has_child_2>\n+</clickhouse>)CONFIG\");\n+\n+    Poco::XML::DOMParser dom_parser;\n+    Poco::AutoPtr<Poco::XML::Document> document = dom_parser.parseString(xml);\n+    Poco::AutoPtr<Poco::Util::XMLConfiguration> config = new Poco::Util::XMLConfiguration(document);\n+    EXPECT_EQ(ConfigHelper::getBool(*config, \"zero_as_false\", false, true), false);\n+    EXPECT_EQ(ConfigHelper::getBool(*config, \"one_as_true\", false, true), true);\n+    EXPECT_EQ(ConfigHelper::getBool(*config, \"yes_as_true\", false, true), true);\n+    EXPECT_EQ(ConfigHelper::getBool(*config, \"empty_as_true_1\", false, true), true);\n+    EXPECT_EQ(ConfigHelper::getBool(*config, \"empty_as_true_2\", false, true), true);\n+    ASSERT_THROW(ConfigHelper::getBool(*config, \"has_empty_child_1\", false, true), Poco::Exception);\n+    EXPECT_EQ(ConfigHelper::getBool(*config, \"has_empty_child_2\", false, true), true);\n+    EXPECT_EQ(ConfigHelper::getBool(*config, \"has_child_1\", false, true), true);\n+    ASSERT_THROW(ConfigHelper::getBool(*config, \"has_child_2\", false, true), Poco::Exception);\n+}\ndiff --git a/tests/integration/test_config_xml_full/configs/config.xml b/tests/integration/test_config_xml_full/configs/config.xml\nindex c277ff7341f2..76eceedbceaf 100644\n--- a/tests/integration/test_config_xml_full/configs/config.xml\n+++ b/tests/integration/test_config_xml_full/configs/config.xml\n@@ -639,6 +639,24 @@\n                 </replica>\n             </shard>\n         </test_shard_localhost_secure>\n+        <test_shard_localhost_secure_empty_tag>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>9440</port>\n+                    <secure></secure>\n+                </replica>\n+            </shard>\n+        </test_shard_localhost_secure_empty_tag>\n+        <test_shard_localhost_secure_empty_tag_2>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>9440</port>\n+                    <secure />\n+                </replica>\n+            </shard>\n+        </test_shard_localhost_secure_empty_tag_2>\n         <test_unavailable_shard>\n             <shard>\n                 <replica>\ndiff --git a/tests/integration/test_config_yaml_full/configs/config.yaml b/tests/integration/test_config_yaml_full/configs/config.yaml\nindex 5958d463d21a..21cf439f7ec7 100644\n--- a/tests/integration/test_config_yaml_full/configs/config.yaml\n+++ b/tests/integration/test_config_yaml_full/configs/config.yaml\n@@ -100,6 +100,12 @@ remote_servers:\n         host: localhost\n         port: 9440\n         secure: 1\n+  test_shard_localhost_secure_empty_tag:\n+    shard:\n+      replica:\n+        host: localhost\n+        port: 9440\n+        secure:\n   test_unavailable_shard:\n     shard:\n       - replica:\n",
  "problem_statement": "Cannot write `<secure/>` instead of `<secure>1</secure>` in cluster configuration.\n\n",
  "hints_text": "Should this work for all possible boolean settings? It seems better to change in `Poco`\nIt is not obvious should it work for all places... looks like it's ok for most places, but probably not for all.\r\nLet's first fix for cluster.\n@alexey-milovidov OK, I'd like take it.",
  "created_at": "2021-12-30T16:28:41Z"
}