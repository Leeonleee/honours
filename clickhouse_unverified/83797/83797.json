{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 83797,
  "instance_id": "ClickHouse__ClickHouse-83797",
  "issue_numbers": [
    "82700"
  ],
  "base_commit": "c633f752f0f1c3384b94b429888511bdae0b55d6",
  "patch": "diff --git a/src/Analyzer/Resolve/IdentifierResolveScope.cpp b/src/Analyzer/Resolve/IdentifierResolveScope.cpp\nindex 0f9f099b9e25..da9094a7746a 100644\n--- a/src/Analyzer/Resolve/IdentifierResolveScope.cpp\n+++ b/src/Analyzer/Resolve/IdentifierResolveScope.cpp\n@@ -27,6 +27,7 @@ IdentifierResolveScope::IdentifierResolveScope(QueryTreeNodePtr scope_node_, Ide\n         subquery_depth = parent_scope->subquery_depth;\n         context = parent_scope->context;\n         projection_mask_map = parent_scope->projection_mask_map;\n+        global_with_aliases = parent_scope->global_with_aliases;\n     }\n     else\n         projection_mask_map = std::make_shared<std::map<IQueryTreeNode::Hash, size_t>>();\ndiff --git a/src/Analyzer/Resolve/IdentifierResolveScope.h b/src/Analyzer/Resolve/IdentifierResolveScope.h\nindex 68e6cc6c7efa..aec30231bbbf 100644\n--- a/src/Analyzer/Resolve/IdentifierResolveScope.h\n+++ b/src/Analyzer/Resolve/IdentifierResolveScope.h\n@@ -144,6 +144,9 @@ struct IdentifierResolveScope\n \n     ScopeAliases aliases;\n \n+    /// Store current scope aliases defined in WITH clause if `enable_scopes_for_with_statement` setting is disabled.\n+    ScopeAliases global_with_aliases;\n+\n     /// Table column name to column node. Valid only during table ALIAS columns resolve.\n     ColumnNameToColumnNodeMap column_name_to_column_node;\n \ndiff --git a/src/Analyzer/Resolve/QueryAnalyzer.cpp b/src/Analyzer/Resolve/QueryAnalyzer.cpp\nindex baf77e603aa4..d8b49acf0fb0 100644\n--- a/src/Analyzer/Resolve/QueryAnalyzer.cpp\n+++ b/src/Analyzer/Resolve/QueryAnalyzer.cpp\n@@ -92,6 +92,7 @@ namespace Setting\n     extern const SettingsBool asterisk_include_materialized_columns;\n     extern const SettingsString count_distinct_implementation;\n     extern const SettingsBool enable_global_with_statement;\n+    extern const SettingsBool enable_scopes_for_with_statement;\n     extern const SettingsBool enable_order_by_all;\n     extern const SettingsBool enable_positional_arguments;\n     extern const SettingsBool enable_scalar_subquery_optimization;\n@@ -5690,8 +5691,17 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n     /// Initialize aliases in query node scope\n     QueryExpressionsAliasVisitor visitor(scope.aliases);\n \n-    if (query_node_typed.hasWith())\n+    if (scope.context->getSettingsRef()[Setting::enable_scopes_for_with_statement])\n+    {\n         visitor.visit(query_node_typed.getWithNode());\n+    }\n+    else\n+    {\n+        QueryExpressionsAliasVisitor alias_collector(scope.global_with_aliases);\n+        alias_collector.visit(query_node_typed.getWithNode());\n+\n+        scope.aliases = scope.global_with_aliases;\n+    }\n \n     if (!query_node_typed.getProjection().getNodes().empty())\n         visitor.visit(query_node_typed.getProjectionNode());\ndiff --git a/src/Core/Settings.cpp b/src/Core/Settings.cpp\nindex 7462a90e64f9..7b571fdad7bf 100644\n--- a/src/Core/Settings.cpp\n+++ b/src/Core/Settings.cpp\n@@ -4496,6 +4496,11 @@ Allow to execute alters which affects not only tables metadata, but also data on\n )\", 0) \\\n     DECLARE(Bool, enable_global_with_statement, true, R\"(\n Propagate WITH statements to UNION queries and all subqueries\n+)\", 0) \\\n+    DECLARE(Bool, enable_scopes_for_with_statement, true, R\"(\n+If disabled, declarations in parent WITH cluases will behave the same scope as they declared in the current scope.\n+\n+Note that this is a compatibility setting for new analyzer to allow running some invalid queries that old analyzer could execute.\n )\", 0) \\\n     DECLARE(Bool, aggregate_functions_null_for_empty, false, R\"(\n Enables or disables rewriting all aggregate functions in a query, adding [-OrNull](/sql-reference/aggregate-functions/combinators#-ornull) suffix to them. Enable it for SQL standard compatibility.\ndiff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp\nindex fcbc975604a4..5f434434d66d 100644\n--- a/src/Core/SettingsChangesHistory.cpp\n+++ b/src/Core/SettingsChangesHistory.cpp\n@@ -54,6 +54,7 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()\n             {\"min_joined_block_size_rows\", 0, DEFAULT_BLOCK_SIZE, \"New setting.\"},\n             {\"table_engine_read_through_distributed_cache\", false, false, \"New setting\"},\n             {\"distributed_cache_alignment\", 0, 0, \"Rename of distributed_cache_read_alignment\"},\n+            {\"enable_scopes_for_with_statement\", true, true, \"New setting for backward compatibility with the old analyzer.\"},\n             {\"output_format_parquet_enum_as_byte_array\", false, false, \"Write enum using parquet physical type: BYTE_ARRAY and logical type: ENUM\"},\n         });\n         addSettingsChanges(settings_changes_history, \"25.6\",\n@@ -80,6 +81,7 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()\n             {\"enable_parallel_blocks_marshalling\", \"false\", \"true\", \"A new setting\"},\n             {\"format_schema_source\", \"file\", \"file\", \"New setting\"},\n             {\"format_schema_message_name\", \"\", \"\", \"New setting\"},\n+            {\"enable_scopes_for_with_statement\", true, true, \"New setting for backward compatibility with the old analyzer.\"},\n             /// RELEASE CLOSED\n         });\n         addSettingsChanges(settings_changes_history, \"25.5\",\n@@ -123,6 +125,7 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()\n             {\"input_format_parquet_allow_geoparquet_parser\", false, true, \"A new setting to use geo columns in parquet file\"},\n             {\"enable_url_encoding\", true, false, \"Changed existing setting's default value\"},\n             {\"s3_slow_all_threads_after_network_error\", false, true, \"New setting\"},\n+            {\"enable_scopes_for_with_statement\", true, true, \"New setting for backward compatibility with the old analyzer.\"},\n             /// Release closed. Please use 25.6\n         });\n         addSettingsChanges(settings_changes_history, \"25.4\",\n@@ -152,7 +155,8 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()\n             {\"query_plan_join_shard_by_pk_ranges\", false, false, \"New setting\"},\n             {\"parallel_replicas_insert_select_local_pipeline\", false, false, \"Use local pipeline during distributed INSERT SELECT with parallel replicas. Currently disabled due to performance issues\"},\n             {\"parallel_hash_join_threshold\", 0, 0, \"New setting\"},\n-            {\"function_date_trunc_return_type_behavior\", 1, 0, \"Change the result type for dateTrunc function for DateTime64/Date32 arguments to DateTime64/Date32 regardless of time unit to get correct result for negative values\"}\n+            {\"function_date_trunc_return_type_behavior\", 1, 0, \"Change the result type for dateTrunc function for DateTime64/Date32 arguments to DateTime64/Date32 regardless of time unit to get correct result for negative values\"},\n+            {\"enable_scopes_for_with_statement\", true, true, \"New setting for backward compatibility with the old analyzer.\"},\n             /// Release closed. Please use 25.5\n         });\n         addSettingsChanges(settings_changes_history, \"25.3\",\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03566_analyzer_single_with_scope.reference b/tests/queries/0_stateless/03566_analyzer_single_with_scope.reference\nnew file mode 100644\nindex 000000000000..bea4d8d5eb90\n--- /dev/null\n+++ b/tests/queries/0_stateless/03566_analyzer_single_with_scope.reference\n@@ -0,0 +1,8 @@\n+1\n+1\n+1\n+1\n+ENABLED COMPATIBILITY MODE\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/03566_analyzer_single_with_scope.sql b/tests/queries/0_stateless/03566_analyzer_single_with_scope.sql\nnew file mode 100644\nindex 000000000000..d8935f23249c\n--- /dev/null\n+++ b/tests/queries/0_stateless/03566_analyzer_single_with_scope.sql\n@@ -0,0 +1,49 @@\n+create table tab (x String, y UInt8) engine = MergeTree order by tuple();\n+insert into tab select 'rue', 1;\n+\n+with ('t' || x) as y \n+  select 1 from tab where y = 'true' settings enable_analyzer=0;\n+with ('t' || x) as y \n+  select 1 from tab where y = 'true' settings enable_analyzer=1;\n+\n+with ('t' || x) as y select * from \n+  (select 1 from tab where y = 'true') settings enable_analyzer=0;\n+with ('t' || x) as y select * from \n+  (select 1 from tab where y = 'true') settings enable_analyzer=1; -- { serverError TYPE_MISMATCH }\n+\n+with\n+  ('t' || x) as y,\n+  'rue' as x\n+select 1 from tab where y = 'true' settings enable_analyzer=1;\n+\n+with ('t' || x) as y,\n+  'rue' as x \n+select * from \n+  (select 1 from tab where y = 'true') settings enable_analyzer=1; -- { serverError TYPE_MISMATCH }\n+\n+SET enable_scopes_for_with_statement = 0;\n+\n+SELECT 'ENABLED COMPATIBILITY MODE';\n+\n+with ('t' || x) as y select * from \n+  (select 1 from tab where y = 'true') settings enable_analyzer=1;\n+\n+with\n+  ('t' || x) as y,\n+  'rue' as x\n+select 1 from tab where y = 'true' settings enable_analyzer=1;\n+\n+with ('t' || x) as y,\n+  'rue' as x \n+select * from \n+  (select 1 from tab where y = 'true') settings enable_analyzer=1;\n+\n+with\n+  ('t' || x) as y,\n+  'rue' as x\n+select 1 from tab where y = 'true' settings enable_analyzer=0; -- { serverError TYPE_MISMATCH }\n+\n+with ('t' || x) as y,\n+  'rue' as x \n+select * from \n+  (select 1 from tab where y = 'true') settings enable_analyzer=0; -- { serverError TYPE_MISMATCH }\ndiff --git a/tests/queries/0_stateless/03567_analyzer_single_with_scope_cycle.reference b/tests/queries/0_stateless/03567_analyzer_single_with_scope_cycle.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03567_analyzer_single_with_scope_cycle.sql b/tests/queries/0_stateless/03567_analyzer_single_with_scope_cycle.sql\nnew file mode 100644\nindex 000000000000..7ffa1cc8d34d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03567_analyzer_single_with_scope_cycle.sql\n@@ -0,0 +1,30 @@\n+create table tab (x String, y UInt8) engine = MergeTree order by tuple();\n+insert into tab select 'rue', 1;\n+\n+WITH\n+    a as b\n+SELECT 1 FROM (\n+    WITH b as c \n+    SELECT 1 FROM (\n+        WITH c as d\n+        SELECT 1 FROM (\n+            SELECT 1 FROM tab WHERE e = 'true'\n+        )\n+    )\n+)\n+SETTINGS allow_experimental_analyzer = 0; -- { serverError UNKNOWN_IDENTIFIER }\n+\n+SET enable_scopes_for_with_statement = 0;\n+\n+WITH\n+    a as b\n+SELECT 1 FROM (\n+    WITH b as c \n+    SELECT 1 FROM (\n+        WITH c as d\n+        SELECT 1 FROM (\n+            SELECT 1 FROM tab WHERE e = 'true'\n+        )\n+    )\n+)\n+SETTINGS allow_experimental_analyzer = 1; -- { serverError UNKNOWN_IDENTIFIER }\n",
  "problem_statement": "Alias expression from parent `WITH` statement has different priority with and without analyzer.\nhttps://fiddle.clickhouse.com/5fbe15bb-f89d-4e65-abae-ebe54e475196\n\n```\ncreate table tab (x String, y UInt8) engine = MergeTree order by tuple();\ninsert into tab select 'rue', 1;\n\nwith ('t' || x) as y \n  select 1 from tab where y = 'true' settings enable_analyzer=0;\nwith ('t' || x) as y \n  select 1 from tab where y = 'true' settings enable_analyzer=1;\n\nwith ('t' || x) as y select * from \n  (select 1 from tab where y = 'true') settings enable_analyzer=0;\nwith ('t' || x) as y select * from \n  (select 1 from tab where y = 'true') settings enable_analyzer=1;\n\n\n1\n1\n1\n\nReceived exception from server (version 25.6.1):\nCode: 53. DB::Exception: Received from localhost:9000. DB::Exception: Cannot convert string 'true' to type UInt8. (TYPE_MISMATCH)\n(query: with ('t' || x) as y select * from \n  (select 1 from tab where y = 'true') settings enable_analyzer=1;)\n\n```\n\nI think the last query should prefer `y` as an expression vs `y` as a column to work consistently.\n",
  "hints_text": "The previous behavior with the old analyzer was also inconsistent:\nhttps://fiddle.clickhouse.com/411180f6-6f6c-489f-bce1-0a32d23717cb\n\nThe following queries don't work:\n```sql\nwith\n  ('t' || x) as y,\n  'rue' as x\nselect 1 from tab where y = 'true' settings enable_analyzer=0; -- { serverError TYPE_MISMATCH }\n\nwith ('t' || x) as y,\n  'rue' as x \nselect * from \n  (select 1 from tab where y = 'true') settings enable_analyzer=0; -- { serverError TYPE_MISMATCH }\n```\n\nThe problem is that the query analyzer introduced identifier resolution scopes, and identifiers are now resolved into the closest definition (in the closest scope). This means that if identifier `foo` is defined as a column in the subquery, it won't be resolved into an alias from the parent scope.\n\nIt's possible to make aliases defined in `WITH` clause global (with control via a setting), but I'm afraid there could be other corner cases that would be a problem.",
  "created_at": "2025-07-15T16:51:33Z"
}