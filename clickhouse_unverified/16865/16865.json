{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16865,
  "instance_id": "ClickHouse__ClickHouse-16865",
  "issue_numbers": [
    "16862"
  ],
  "base_commit": "637e3dc2c2863cc051fc252bb0261496b2ccaa7a",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionTimeSeriesGroupSum.h b/src/AggregateFunctions/AggregateFunctionTimeSeriesGroupSum.h\nindex b755fbf081b4..a1399a89e53f 100644\n--- a/src/AggregateFunctions/AggregateFunctionTimeSeriesGroupSum.h\n+++ b/src/AggregateFunctions/AggregateFunctionTimeSeriesGroupSum.h\n@@ -189,7 +189,10 @@ struct AggregateFunctionTimeSeriesGroupSumData\n     {\n         size_t size = result.size();\n         writeVarUInt(size, buf);\n-        buf.write(reinterpret_cast<const char *>(result.data()), sizeof(result[0]));\n+        if (size > 0)\n+        {\n+            buf.write(reinterpret_cast<const char *>(result.data()), size * sizeof(result[0]));\n+        }\n     }\n \n     void deserialize(ReadBuffer & buf)\n@@ -197,7 +200,10 @@ struct AggregateFunctionTimeSeriesGroupSumData\n         size_t size = 0;\n         readVarUInt(size, buf);\n         result.resize(size);\n-        buf.read(reinterpret_cast<char *>(result.data()), size * sizeof(result[0]));\n+        if (size > 0)\n+        {\n+            buf.read(reinterpret_cast<char *>(result.data()), size * sizeof(result[0]));\n+        }\n     }\n };\n template <bool rate>\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01560_timeseriesgroupsum_segfault.reference b/tests/queries/0_stateless/01560_timeseriesgroupsum_segfault.reference\nnew file mode 100644\nindex 000000000000..814095e78182\n--- /dev/null\n+++ b/tests/queries/0_stateless/01560_timeseriesgroupsum_segfault.reference\n@@ -0,0 +1,3 @@\n+[]\n+1\n+server is still alive\ndiff --git a/tests/queries/0_stateless/01560_timeseriesgroupsum_segfault.sql b/tests/queries/0_stateless/01560_timeseriesgroupsum_segfault.sql\nnew file mode 100644\nindex 000000000000..eb7c91967e5a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01560_timeseriesgroupsum_segfault.sql\n@@ -0,0 +1,23 @@\n+DROP TABLE IF EXISTS tsgs_local;\n+DROP TABLE IF EXISTS tsgs;\n+\n+CREATE TABLE tsgs_local ENGINE = MergeTree ORDER BY tuple() AS\n+SELECT\n+    toUInt64(13820745146630357293) AS a,\n+    toInt64(1604422500000000000) AS b,\n+    toFloat64(0) AS c\n+FROM numbers(100);\n+\n+-- the issue (https://github.com/ClickHouse/ClickHouse/issues/16862) happens during serialization of the state\n+-- so happens only when Distributed tables are used or with -State modifier.\n+\n+CREATE TABLE tsgs AS tsgs_local ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), tsgs_local);\n+\n+SELECT timeSeriesGroupSum(a, b, c) FROM tsgs;\n+\n+SELECT count() FROM ( SELECT timeSeriesGroupSumState(a, b, c) as x FROM tsgs_local) WHERE NOT ignore(*);\n+\n+SELECT 'server is still alive';\n+\n+DROP TABLE tsgs_local;\n+DROP TABLE tsgs;\n",
  "problem_statement": "DB::AggregateFunctionTimeSeriesGroupSum<false>::serialize segfault\nHappens when AggregateFunctionTimeSeriesGroupSum state is serialized. \r\n\r\nCan lead to:\r\n\r\n```\r\n2020.11.11 08:50:26.219001 [ 259 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.11.11 08:50:26.219056 [ 259 ] {} <Fatal> BaseDaemon: (version 20.3.13.127 (official build)) (from thread 207) (query_id: 9d885998-851a-4c70-b668-439cd260dc4f) Received signal Segmentation fault (11).\r\n2020.11.11 08:50:26.219095 [ 259 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2020.11.11 08:50:26.219113 [ 259 ] {} <Fatal> BaseDaemon: Stack trace: 0xca03160\r\n2020.11.11 08:50:26.219172 [ 259 ] {} <Fatal> BaseDaemon: 3. DB::AggregateFunctionTimeSeriesGroupSum<false>::serialize(char const*, DB::WriteBuffer&) const @ 0xca03160 in /usr/bin/clickhouse\r\n```\r\n\r\nOr to \r\n```\r\n(gdb) bt\r\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\r\n#1  0x00007fd280ad3859 in __GI_abort () at abort.c:79\r\n#2  0x0000000023f46812 in Poco::SignalHandler::handleSignal (sig=11) at ../contrib/poco/Foundation/src/SignalHandler.cpp:94\r\n#3  <signal handler called>\r\n#4  memcpy () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:142\r\n#5  0x0000000009cda5e2 in __asan_memcpy ()\r\n#6  0x0000000009d666f5 in DB::WriteBuffer::write (this=0x7fff20748540, from=0x0, n=16) at ../src/IO/WriteBuffer.h:78\r\n#7  0x000000001b374125 in DB::serializeToString (function=..., column=..., row_num=<optimized out>) at ../src/DataTypes/DataTypeAggregateFunction.cpp:160\r\n#8  0x000000001b37461c in DB::DataTypeAggregateFunction::serializeTextEscaped (this=<optimized out>, column=..., row_num=140542080921600, ostr=...) at ../src/DataTypes/DataTypeAggregateFunction.cpp:196\r\n#9  0x000000001dc1120c in DB::IRowOutputFormat::write (this=0x6190000230a0, columns=..., row_num=0) at ../src/Processors/Formats/IRowOutputFormat.cpp:85\r\n#10 0x000000001dc0fd87 in DB::IRowOutputFormat::consume (this=0x6190000230a0, chunk=<error reading variable: Cannot access memory at address 0x0>) at ../src/Processors/Formats/IRowOutputFormat.cpp:25\r\n#11 0x000000001db7bc7c in DB::IOutputFormat::work (this=0x6190000230a0) at ../src/Processors/Formats/IOutputFormat.cpp:89\r\n#12 0x000000001db58e16 in DB::executeJob (processor=0x6190000230a0) at ../src/Processors/Executors/PipelineExecutor.cpp:78\r\n#13 DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0::operator()() const (this=<optimized out>) at ../src/Processors/Executors/PipelineExecutor.cpp:95\r\n#14 std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&> (__f=...) at ../contrib/libcxx/include/type_traits:3519\r\n#15 std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) (__args=...)\r\n    at ../contrib/libcxx/include/__functional_base:348\r\n#16 std::__1::__function::__alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, std::__1::allocator<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0>, void ()>::operator()() (\r\n    this=<optimized out>) at ../contrib/libcxx/include/functional:1540\r\n#17 std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, std::__1::allocator<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0>, void ()>::operator()() (\r\n    this=<optimized out>) at ../contrib/libcxx/include/functional:1714\r\n#18 0x000000001db54c27 in std::__1::__function::__value_func<void ()>::operator()() const (this=<optimized out>) at ../contrib/libcxx/include/functional:1867\r\n#19 std::__1::function<void ()>::operator()() const (this=<optimized out>) at ../contrib/libcxx/include/functional:2473\r\n#20 DB::PipelineExecutor::executeStepImpl (this=<optimized out>, thread_num=<optimized out>, num_threads=<optimized out>, yield_flag=<optimized out>) at ../src/Processors/Executors/PipelineExecutor.cpp:561\r\n#21 0x000000001db5083f in DB::PipelineExecutor::executeSingleThread (this=0x6130000049d8, thread_num=0, num_threads=16) at ../src/Processors/Executors/PipelineExecutor.cpp:477\r\n#22 DB::PipelineExecutor::executeImpl (this=0x6130000049d8, num_threads=1) at ../src/Processors/Executors/PipelineExecutor.cpp:752\r\n#23 0x000000001db4fcef in DB::PipelineExecutor::execute (this=0x6130000049d8, num_threads=1) at ../src/Processors/Executors/PipelineExecutor.cpp:399\r\n#24 0x000000001c8c951a in DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) (istr=..., ostr=..., allow_into_outfile=<optimized out>, context=..., set_result_details=...)\r\n    at ../src/Interpreters/executeQuery.cpp:995\r\n#25 0x0000000009fac674 in DB::LocalServer::processQueries (this=0x7fff2074c2e8) at ../programs/local/LocalServer.cpp:384\r\n#26 0x0000000009fa6485 in DB::LocalServer::main (this=0x7fff2074ea50) at ../programs/local/LocalServer.cpp:289\r\n#27 0x0000000023ce5ac6 in Poco::Util::Application::run (this=0x7fff2074ea50) at ../contrib/poco/Util/src/Application.cpp:334\r\n#28 0x0000000009fb9dc0 in mainEntryClickHouseLocal (argc=3, argv=0x6030000060d0) at ../programs/local/LocalServer.cpp:609\r\n#29 0x0000000009d0e554 in main (argc_=<optimized out>, argv_=<optimized out>) at ../programs/main.cpp:400\r\n```\r\n\r\nor similar.\r\n\r\nIt seems all versions are affected (we will need a fix for 20.3).\r\n\r\nI'll commit a test case soon. \r\n\n",
  "hints_text": "",
  "created_at": "2020-11-11T10:18:49Z"
}