{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 68630,
  "instance_id": "ClickHouse__ClickHouse-68630",
  "issue_numbers": [
    "67997"
  ],
  "base_commit": "1c54c0d23910af475f16d884c74a0550230370f1",
  "patch": "diff --git a/src/Functions/FunctionsHashing.h b/src/Functions/FunctionsHashing.h\nindex 95c54ac95284..0cf4246fd662 100644\n--- a/src/Functions/FunctionsHashing.h\n+++ b/src/Functions/FunctionsHashing.h\n@@ -77,64 +77,70 @@ namespace impl\n         ColumnPtr key0;\n         ColumnPtr key1;\n         bool is_const;\n-        const ColumnArray::Offsets * offsets{};\n+        const ColumnArray::Offsets * offsets = nullptr;\n \n         size_t size() const\n         {\n             assert(key0 && key1);\n             assert(key0->size() == key1->size());\n-            assert(offsets == nullptr || offsets->size() == key0->size());\n-            if (offsets != nullptr)\n+            if (offsets != nullptr && !offsets->empty())\n                 return offsets->back();\n             return key0->size();\n         }\n+\n         SipHashKey getKey(size_t i) const\n         {\n             if (is_const)\n                 i = 0;\n+            assert(key0->size() == key1->size());\n             if (offsets != nullptr)\n             {\n-                const auto *const begin = offsets->begin();\n+                const auto * const begin = offsets->begin();\n                 const auto * upper = std::upper_bound(begin, offsets->end(), i);\n-                if (upper == offsets->end())\n-                    throw Exception(ErrorCodes::LOGICAL_ERROR, \"offset {} not found in function SipHashKeyColumns::getKey\", i);\n-                i = upper - begin;\n+                if (upper != offsets->end())\n+                    i = upper - begin;\n             }\n             const auto & key0data = assert_cast<const ColumnUInt64 &>(*key0).getData();\n             const auto & key1data = assert_cast<const ColumnUInt64 &>(*key1).getData();\n+            assert(key0->size() > i);\n             return {key0data[i], key1data[i]};\n         }\n     };\n \n     static SipHashKeyColumns parseSipHashKeyColumns(const ColumnWithTypeAndName & key)\n     {\n-        const ColumnTuple * tuple = nullptr;\n-        const auto * column = key.column.get();\n-        bool is_const = false;\n-        if (isColumnConst(*column))\n+        const auto * col_key = key.column.get();\n+\n+        bool is_const;\n+        const ColumnTuple * col_key_tuple;\n+        if (isColumnConst(*col_key))\n         {\n             is_const = true;\n-            tuple = checkAndGetColumnConstData<ColumnTuple>(column);\n+            col_key_tuple = checkAndGetColumnConstData<ColumnTuple>(col_key);\n         }\n         else\n-            tuple = checkAndGetColumn<ColumnTuple>(column);\n-        if (!tuple)\n-            throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"key must be a tuple\");\n-        if (tuple->tupleSize() != 2)\n-            throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"wrong tuple size: key must be a tuple of 2 UInt64\");\n-\n-        SipHashKeyColumns ret{tuple->getColumnPtr(0), tuple->getColumnPtr(1), is_const};\n-        assert(ret.key0);\n-        if (!checkColumn<ColumnUInt64>(*ret.key0))\n-            throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"first element of the key tuple is not UInt64\");\n-        assert(ret.key1);\n-        if (!checkColumn<ColumnUInt64>(*ret.key1))\n-            throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"second element of the key tuple is not UInt64\");\n-\n-        if (ret.size() == 1)\n-            ret.is_const = true;\n-\n-        return ret;\n+        {\n+            is_const = false;\n+            col_key_tuple = checkAndGetColumn<ColumnTuple>(col_key);\n+        }\n+\n+        if (!col_key_tuple || col_key_tuple->tupleSize() != 2)\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The key must be of type Tuple(UInt64, UInt64)\");\n+\n+        SipHashKeyColumns result{.key0 = col_key_tuple->getColumnPtr(0), .key1 = col_key_tuple->getColumnPtr(1), .is_const = is_const};\n+\n+        assert(result.key0);\n+        assert(result.key1);\n+\n+        if (!checkColumn<ColumnUInt64>(*result.key0))\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The 1st element of the key tuple is not of type UInt64\");\n+        if (!checkColumn<ColumnUInt64>(*result.key1))\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The 2nd element of the key tuple is not of type UInt64\");\n+\n+        if (result.size() == 1)\n+            result.is_const = true;\n+\n+        return result;\n     }\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02534_keyed_siphash.reference b/tests/queries/0_stateless/02534_keyed_siphash.reference\nindex 3f478218ff11..31c0cae89819 100644\n--- a/tests/queries/0_stateless/02534_keyed_siphash.reference\n+++ b/tests/queries/0_stateless/02534_keyed_siphash.reference\n@@ -236,6 +236,13 @@ Check asan bug\n 0\n Check bug found fuzzing\n 9042C6691B1A75F0EA3314B6F55728BB\n-Check bug 2 found fuzzing\n+Test arrays and maps\n 608E1FF030C9E206185B112C2A25F1A7\n ABB65AE97711A2E053E324ED88B1D08B\n+Test emtpy arrays and maps\n+4761183170873013810\n+0AD04BFD000000000000000000000000\n+4761183170873013810\n+0AD04BFD000000000000000000000000\n+16734549324845627102\n+D675BB3D687973A238AB891DD99C7047\ndiff --git a/tests/queries/0_stateless/02534_keyed_siphash.sql b/tests/queries/0_stateless/02534_keyed_siphash.sql\nindex fb707109c83f..b499d8ef02b5 100644\n--- a/tests/queries/0_stateless/02534_keyed_siphash.sql\n+++ b/tests/queries/0_stateless/02534_keyed_siphash.sql\n@@ -263,10 +263,10 @@ select sipHash128Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4, 5, 6, 7, 8,\n select sipHash128Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62)) == sipHash128(char(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62));\n select sipHash128Keyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63)) == sipHash128(char(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63));\n \n-select sipHash64Keyed((0, 0), '1'); -- { serverError NOT_IMPLEMENTED }\n-select sipHash128Keyed((0, 0), '1'); -- { serverError NOT_IMPLEMENTED }\n-select sipHash64Keyed(toUInt64(0), '1'); -- { serverError NOT_IMPLEMENTED }\n-select sipHash128Keyed(toUInt64(0), '1'); -- { serverError NOT_IMPLEMENTED }\n+select sipHash64Keyed((0, 0), '1'); -- { serverError BAD_ARGUMENTS }\n+select sipHash128Keyed((0, 0), '1'); -- { serverError BAD_ARGUMENTS }\n+select sipHash64Keyed(toUInt64(0), '1'); -- { serverError BAD_ARGUMENTS }\n+select sipHash128Keyed(toUInt64(0), '1'); -- { serverError BAD_ARGUMENTS }\n \n select hex(sipHash64());\n SELECT hex(sipHash128());\n@@ -339,9 +339,17 @@ SELECT 'Check bug found fuzzing';\n SELECT [(255, 1048575)], sipHash128ReferenceKeyed((toUInt64(2147483646), toUInt64(9223372036854775807)), ([(NULL, 100), (NULL, NULL), (1024, 10)], toUInt64(2), toUInt64(1024)), ''), hex(sipHash128ReferenceKeyed((-9223372036854775807, 1.), '-1', NULL)), ('', toUInt64(65535), [(9223372036854775807, 9223372036854775806)], toUInt64(65536)), arrayJoin((NULL, 65537, 255), [(NULL, NULL)]) GROUP BY tupleElement((NULL, NULL, NULL, -1), toUInt64(2), 2) = NULL;  -- { serverError NOT_IMPLEMENTED }\n SELECT hex(sipHash128ReferenceKeyed((0::UInt64, 0::UInt64), ([1, 1])));\n \n-SELECT 'Check bug 2 found fuzzing';\n+SELECT 'Test arrays and maps';\n DROP TABLE IF EXISTS sipHashKeyed_keys;\n CREATE TABLE sipHashKeyed_keys (`a` Map(String, String)) ENGINE = Memory;\n INSERT INTO sipHashKeyed_keys FORMAT VALUES ({'a':'b', 'c':'d'}), ({'e':'f', 'g':'h'});\n SELECT hex(sipHash128ReferenceKeyed((0::UInt64, materialize(0::UInt64)), a)) FROM sipHashKeyed_keys ORDER BY a;\n DROP TABLE sipHashKeyed_keys;\n+\n+SELECT 'Test emtpy arrays and maps';\n+SELECT sipHash64Keyed((1::UInt64, 2::UInt64), []);\n+SELECT hex(sipHash128Keyed((1::UInt64, 2::UInt64), []));\n+SELECT sipHash64Keyed((1::UInt64, 2::UInt64), mapFromArrays([], []));\n+SELECT hex(sipHash128Keyed((1::UInt64, 2::UInt64), mapFromArrays([], [])));\n+SELECT sipHash64Keyed((1::UInt64, 2::UInt64), map([0], 1, [2], 3));\n+SELECT hex(sipHash128Keyed((0::UInt64, 0::UInt64), map([0], 1, [2], 3)));\ndiff --git a/tests/queries/0_stateless/02552_siphash128_reference.sql b/tests/queries/0_stateless/02552_siphash128_reference.sql\nindex f7324ed0ee48..46f292d667dd 100644\n--- a/tests/queries/0_stateless/02552_siphash128_reference.sql\n+++ b/tests/queries/0_stateless/02552_siphash128_reference.sql\n@@ -200,8 +200,8 @@ select sipHash128ReferenceKeyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4, 5,\n select sipHash128ReferenceKeyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62)) == sipHash128Reference(char(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62));\n select sipHash128ReferenceKeyed((toUInt64(0),toUInt64(0)),char(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63)) == sipHash128Reference(char(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63));\n \n-select sipHash128ReferenceKeyed((0, 0), '1'); -- { serverError NOT_IMPLEMENTED }\n-select sipHash128ReferenceKeyed(toUInt64(0), '1'); -- { serverError NOT_IMPLEMENTED }\n+select sipHash128ReferenceKeyed((0, 0), '1'); -- { serverError BAD_ARGUMENTS }\n+select sipHash128ReferenceKeyed(toUInt64(0), '1'); -- { serverError BAD_ARGUMENTS }\n \n SELECT hex(sipHash128Reference()) = hex(reverse(unhex('1CE422FEE7BD8DE20000000000000000'))) or hex(sipHash128()) = '1CE422FEE7BD8DE20000000000000000';\n SELECT hex(sipHash128ReferenceKeyed()) = hex(reverse(unhex('1CE422FEE7BD8DE20000000000000000'))) or hex(sipHash128Keyed()) = '1CE422FEE7BD8DE20000000000000000';\n",
  "problem_statement": "Logical error: offset 0 not found in function SipHashKeyColumns::getKey\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/66f95cd0732dffd32f0a5f356689f2de83ce4ac4/ast_fuzzer__msan_.html\r\n\r\nMinimized:\r\n```sql\r\nSELECT sipHash64Keyed(\r\n    (1::UInt64, 2::UInt64),\r\n    []::Array(UInt8))\r\n```\n",
  "hints_text": "@aiven-sal, still not fixed!",
  "created_at": "2024-08-20T18:03:59Z"
}