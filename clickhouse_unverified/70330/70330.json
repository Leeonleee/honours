{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 70330,
  "instance_id": "ClickHouse__ClickHouse-70330",
  "issue_numbers": [
    "70319"
  ],
  "base_commit": "8d8a707977846868f4821666b186069fa660b479",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 83904e7ad217..69e2e2d74cd7 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -16,6 +16,7 @@\n #include <Common/StringUtils.h>\n #include <Common/atomicRename.h>\n #include <Common/escapeForFileName.h>\n+#include <Common/getRandomASCIIString.h>\n #include <Common/logger_useful.h>\n #include <Common/randomSeed.h>\n #include <Common/typeid_cast.h>\n@@ -1978,15 +1979,19 @@ BlockIO InterpreterCreateQuery::doCreateOrReplaceTable(ASTCreateQuery & create,\n \n \n         UInt64 name_hash = sipHash64(create.getDatabase() + create.getTable());\n-        UInt16 random_suffix = thread_local_rng();\n+        String random_suffix;\n         if (auto txn = current_context->getZooKeeperMetadataTransaction())\n         {\n             /// Avoid different table name on database replicas\n-            random_suffix = sipHash64(txn->getTaskZooKeeperPath());\n+            UInt16 hashed_zk_path = sipHash64(txn->getTaskZooKeeperPath());\n+            random_suffix = getHexUIntLowercase(hashed_zk_path);\n         }\n-        create.setTable(fmt::format(\"_tmp_replace_{}_{}\",\n-                            getHexUIntLowercase(name_hash),\n-                            getHexUIntLowercase(random_suffix)));\n+        else\n+        {\n+            random_suffix = getRandomASCIIString(/*length=*/4);\n+        }\n+\n+        create.setTable(fmt::format(\"_tmp_replace_{}_{}\", getHexUIntLowercase(name_hash), random_suffix));\n \n         ast_drop->setTable(create.getTable());\n         ast_drop->is_dictionary = create.is_dictionary;\ndiff --git a/src/Interpreters/InterpreterCreateQuery.h b/src/Interpreters/InterpreterCreateQuery.h\nindex 25ff32a09d3a..cb7af25383e0 100644\n--- a/src/Interpreters/InterpreterCreateQuery.h\n+++ b/src/Interpreters/InterpreterCreateQuery.h\n@@ -85,7 +85,8 @@ class InterpreterCreateQuery : public IInterpreter, WithMutableContext\n     void extendQueryLogElemImpl(QueryLogElement & elem, const ASTPtr & ast, ContextPtr) const override;\n \n     /// Check access right, validate definer statement and replace `CURRENT USER` with actual name.\n-    static void processSQLSecurityOption(ContextPtr context_, ASTSQLSecurity & sql_security, bool is_materialized_view = false, bool skip_check_permissions = false);\n+    static void processSQLSecurityOption(\n+        ContextPtr context_, ASTSQLSecurity & sql_security, bool is_materialized_view = false, bool skip_check_permissions = false);\n \n private:\n     struct TableProperties\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03247_create-same-table-concurrently-with-atomic-engine.reference b/tests/queries/0_stateless/03247_create-same-table-concurrently-with-atomic-engine.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03247_create-same-table-concurrently-with-atomic-engine.sh b/tests/queries/0_stateless/03247_create-same-table-concurrently-with-atomic-engine.sh\nnew file mode 100755\nindex 000000000000..1a05d5bf8907\n--- /dev/null\n+++ b/tests/queries/0_stateless/03247_create-same-table-concurrently-with-atomic-engine.sh\n@@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+# with Atomic engine\n+$CLICKHOUSE_CLIENT --query \"CREATE DATABASE IF NOT EXISTS ${CLICKHOUSE_DATABASE}_db ENGINE=Atomic\"\n+\n+function create_or_replace_table_thread\n+{\n+    for _ in {1..20}; do\n+        $CLICKHOUSE_CLIENT --query \"CREATE OR REPLACE TABLE ${CLICKHOUSE_DATABASE}_db.test_table (x Int) ENGINE=Memory\" > /dev/null\n+    done\n+}\n+export -f create_or_replace_table_thread;\n+\n+for _ in {1..20}; do\n+    bash -c create_or_replace_table_thread &\n+done\n+\n+wait\n+\n+$CLICKHOUSE_CLIENT --query \"DROP DATABASE IF EXISTS ${CLICKHOUSE_DATABASE}_db SYNC\";\n\\ No newline at end of file\ndiff --git a/tests/queries/0_stateless/03248_create-same-table-concurrently-with-replicated-engine.reference b/tests/queries/0_stateless/03248_create-same-table-concurrently-with-replicated-engine.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03248_create-same-table-concurrently-with-replicated-engine.sh b/tests/queries/0_stateless/03248_create-same-table-concurrently-with-replicated-engine.sh\nnew file mode 100755\nindex 000000000000..27bb65ff2db0\n--- /dev/null\n+++ b/tests/queries/0_stateless/03248_create-same-table-concurrently-with-replicated-engine.sh\n@@ -0,0 +1,25 @@\n+#!/usr/bin/env bash\n+# Tags: long\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+# with Replicated engine\n+$CLICKHOUSE_CLIENT --query \"CREATE DATABASE IF NOT EXISTS ${CLICKHOUSE_DATABASE}_db ENGINE=Replicated('/test/clickhouse/db/${CLICKHOUSE_DATABASE}_db', 's1', 'r1')\"\n+\n+function create_or_replace_table_thread\n+{\n+    for _ in {1..15}; do\n+        $CLICKHOUSE_CLIENT --query \"CREATE OR REPLACE TABLE ${CLICKHOUSE_DATABASE}_db.test_table (x Int) ENGINE=Memory\" > /dev/null\n+    done\n+}\n+export -f create_or_replace_table_thread;\n+\n+for _ in {1..15}; do\n+    bash -c create_or_replace_table_thread &\n+done\n+\n+wait\n+\n+$CLICKHOUSE_CLIENT --query \"DROP DATABASE IF EXISTS ${CLICKHOUSE_DATABASE}_db SYNC\";\n\\ No newline at end of file\n",
  "problem_statement": "Test 03237_create_or_replace_view_atomically_with_atomic_engine is flaky\nhttps://play.clickhouse.com/play?user=play#c2VsZWN0IAp0b1N0YXJ0T2ZIb3VyKGNoZWNrX3N0YXJ0X3RpbWUpIGFzIGQsCmNvdW50KCksIGdyb3VwVW5pcUFycmF5KHB1bGxfcmVxdWVzdF9udW1iZXIpLCAgYW55KHJlcG9ydF91cmwpCmZyb20gY2hlY2tzIHdoZXJlIHRvZGF5KCkgLSBJTlRFUlZBTCAnMyBtb250aHMnIDw9IGNoZWNrX3N0YXJ0X3RpbWUgYW5kIHRlc3RfbmFtZSBsaWtlICclMDMyMzdfY3JlYXRlX29yX3JlcGxhY2Vfdmlld19hdG9taWNhbGx5X3dpdGhfYXRvbWljX2VuZ2luZSUnIGFuZCB0ZXN0X3N0YXR1cyBpbiAoJ0ZBSUwnLCAnRkxBS1knKSBncm91cCBieSBkIG9yZGVyIGJ5IGQgZGVzYw==\r\n\r\ncc @tuanpach \n",
  "hints_text": "",
  "created_at": "2024-10-03T15:43:05Z",
  "modified_files": [
    "src/Interpreters/InterpreterCreateQuery.cpp",
    "src/Interpreters/InterpreterCreateQuery.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03247_create-same-table-concurrently-with-atomic-engine.sh",
    "b/tests/queries/0_stateless/03248_create-same-table-concurrently-with-replicated-engine.sh"
  ]
}