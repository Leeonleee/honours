diff --git a/src/Common/CacheBase.h b/src/Common/CacheBase.h
index 27b6a190c7f4..de1df4940e64 100644
--- a/src/Common/CacheBase.h
+++ b/src/Common/CacheBase.h
@@ -64,7 +64,10 @@ class CacheBase
         size_t max_count,
         double size_ratio)
     {
-        auto on_weight_loss_function = [&](size_t weight_loss) { onRemoveOverflowWeightLoss(weight_loss); };
+        auto on_remove_entry_function = [this](size_t weight_loss, const MappedPtr & mapped_ptr)
+        {
+            onEntryRemoval(weight_loss, mapped_ptr);
+        };
 
         if (cache_policy_name.empty())
         {
@@ -75,12 +78,12 @@ class CacheBase
         if (cache_policy_name == "LRU")
         {
             using LRUPolicy = LRUCachePolicy<TKey, TMapped, HashFunction, WeightFunction>;
-            cache_policy = std::make_unique<LRUPolicy>(size_in_bytes_metric, count_metric, max_size_in_bytes, max_count, on_weight_loss_function);
+            cache_policy = std::make_unique<LRUPolicy>(size_in_bytes_metric, count_metric, max_size_in_bytes, max_count, on_remove_entry_function);
         }
         else if (cache_policy_name == "SLRU")
         {
             using SLRUPolicy = SLRUCachePolicy<TKey, TMapped, HashFunction, WeightFunction>;
-            cache_policy = std::make_unique<SLRUPolicy>(size_in_bytes_metric, count_metric, max_size_in_bytes, max_count, size_ratio, on_weight_loss_function);
+            cache_policy = std::make_unique<SLRUPolicy>(size_in_bytes_metric, count_metric, max_size_in_bytes, max_count, size_ratio, on_remove_entry_function);
         }
         else
             throw Exception(ErrorCodes::BAD_ARGUMENTS, "Unknown cache policy name: {}", cache_policy_name);
@@ -335,8 +338,9 @@ class CacheBase
 
     InsertTokenById insert_tokens TSA_GUARDED_BY(mutex);
 
-    /// Override this method if you want to track how much weight was lost in removeOverflow method.
-    virtual void onRemoveOverflowWeightLoss(size_t /*weight_loss*/) {}
+    /// This is called when an entry is being evicted from the cache.
+    /// Override this method if you want to handle individual entry removals from cache
+    virtual void onEntryRemoval(size_t /*weight_loss*/, const MappedPtr &) { }
 };
 
 
diff --git a/src/Common/ICachePolicy.h b/src/Common/ICachePolicy.h
index f764f15b4f6b..990321a8b4a4 100644
--- a/src/Common/ICachePolicy.h
+++ b/src/Common/ICachePolicy.h
@@ -26,7 +26,7 @@ class ICachePolicy
     using Key = TKey;
     using Mapped = TMapped;
     using MappedPtr = std::shared_ptr<Mapped>;
-    using OnWeightLossFunction = std::function<void(size_t)>;
+    using OnRemoveEntryFunction = std::function<void(size_t, const MappedPtr &)>;  /// For per-item callback
 
     struct KeyMapped
     {
diff --git a/src/Common/LRUCachePolicy.h b/src/Common/LRUCachePolicy.h
index ea87272d835e..124eca84d7e2 100644
--- a/src/Common/LRUCachePolicy.h
+++ b/src/Common/LRUCachePolicy.h
@@ -21,7 +21,7 @@ class LRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFunc
     using Base = ICachePolicy<Key, Mapped, HashFunction, WeightFunction>;
     using typename Base::MappedPtr;
     using typename Base::KeyMapped;
-    using typename Base::OnWeightLossFunction;
+    using typename Base::OnRemoveEntryFunction;
 
     /** Initialize LRUCachePolicy with max_size_in_bytes and max_count.
      *  max_size_in_bytes == 0 means the cache accepts no entries.
@@ -32,13 +32,13 @@ class LRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFunc
         CurrentMetrics::Metric count_metric_,
         size_t max_size_in_bytes_,
         size_t max_count_,
-        OnWeightLossFunction on_weight_loss_function_)
+        OnRemoveEntryFunction on_remove_entry_function_)
         : Base(std::make_unique<NoCachePolicyUserQuota>())
         , max_size_in_bytes(max_size_in_bytes_)
         , max_count(max_count_)
         , current_size_in_bytes_metric(size_in_bytes_metric_)
         , count_metric(count_metric_)
-        , on_weight_loss_function(on_weight_loss_function_)
+        , on_remove_entry_function(on_remove_entry_function_)
     {
     }
 
@@ -221,7 +221,7 @@ class LRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFunc
     CurrentMetrics::Metric count_metric;
 
     WeightFunction weight_function;
-    OnWeightLossFunction on_weight_loss_function;
+    OnRemoveEntryFunction on_remove_entry_function;
 
     void removeOverflow()
     {
@@ -243,14 +243,13 @@ class LRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFunc
 
             current_size_in_bytes -= cell.size;
             current_weight_lost += cell.size;
+            on_remove_entry_function(cell.size, cell.value);
 
             cells.erase(it);
             queue.pop_front();
             --queue_size;
         }
 
-        on_weight_loss_function(current_weight_lost);
-
         if (current_size_in_bytes > (1ull << 63))
             std::terminate(); // Queue became inconsistent
 
diff --git a/src/Common/PageCache.cpp b/src/Common/PageCache.cpp
index f74652c10f22..01cd629b89ec 100644
--- a/src/Common/PageCache.cpp
+++ b/src/Common/PageCache.cpp
@@ -145,9 +145,10 @@ bool PageCache::contains(const PageCacheKey & key, bool inject_eviction) const
     return shard.contains(key_hash);
 }
 
-void PageCache::Shard::onRemoveOverflowWeightLoss(size_t weight_loss)
+void PageCache::Shard::onEntryRemoval(const size_t weight_loss, const MappedPtr & mapped_ptr)
 {
     ProfileEvents::increment(ProfileEvents::PageCacheWeightLost, weight_loss);
+    UNUSED(mapped_ptr);
 }
 
 void PageCache::autoResize(Int64 memory_usage_signed, size_t memory_limit)
diff --git a/src/Common/PageCache.h b/src/Common/PageCache.h
index 3bb27bcd8bce..13addd84c742 100644
--- a/src/Common/PageCache.h
+++ b/src/Common/PageCache.h
@@ -98,7 +98,7 @@ class PageCache
     public:
         using Base::Base;
 
-        void onRemoveOverflowWeightLoss(size_t /*weight_loss*/) override;
+        void onEntryRemoval(size_t weight_loss, const MappedPtr & mapped_ptr) override;
     };
 
 public:
diff --git a/src/Common/ProfileEvents.cpp b/src/Common/ProfileEvents.cpp
index 3407d76e7659..f8239ecb4ffd 100644
--- a/src/Common/ProfileEvents.cpp
+++ b/src/Common/ProfileEvents.cpp
@@ -274,6 +274,9 @@
     M(LoadedMarksFiles, "Number of mark files loaded.", ValueType::Number) \
     M(LoadedMarksCount, "Number of marks loaded (total across columns).", ValueType::Number) \
     M(LoadedMarksMemoryBytes, "Size of in-memory representations of loaded marks.", ValueType::Bytes) \
+    M(MarkCacheEvictedBytes, "Number of bytes evicted from the mark cache.", ValueType::Bytes) \
+    M(MarkCacheEvictedMarks, "Number of marks evicted from the mark cache.", ValueType::Number) \
+    M(MarkCacheEvictedFiles, "Number of mark files evicted from the mark cache.", ValueType::Number) \
     M(LoadedPrimaryIndexFiles, "Number of primary index files loaded.", ValueType::Number) \
     M(LoadedPrimaryIndexRows, "Number of rows of primary key loaded.", ValueType::Number) \
     M(LoadedPrimaryIndexBytes, "Number of rows of primary key loaded.", ValueType::Bytes) \
diff --git a/src/Common/SLRUCachePolicy.h b/src/Common/SLRUCachePolicy.h
index e08a64c6bb22..e63690da83d4 100644
--- a/src/Common/SLRUCachePolicy.h
+++ b/src/Common/SLRUCachePolicy.h
@@ -23,7 +23,7 @@ class SLRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFun
     using Base = ICachePolicy<Key, Mapped, HashFunction, WeightFunction>;
     using typename Base::MappedPtr;
     using typename Base::KeyMapped;
-    using typename Base::OnWeightLossFunction;
+    using typename Base::OnRemoveEntryFunction;
 
     /** Initialize SLRUCachePolicy with max_size_in_bytes and max_protected_size.
       * max_protected_size shows how many of the most frequently used entries will not be evicted after a sequential scan.
@@ -36,7 +36,7 @@ class SLRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFun
         size_t max_size_in_bytes_,
         size_t max_count_,
         double size_ratio_,
-        OnWeightLossFunction on_weight_loss_function_)
+        OnRemoveEntryFunction on_remove_entry_function_)
         : Base(std::make_unique<NoCachePolicyUserQuota>())
         , max_size_in_bytes(max_size_in_bytes_)
         , max_protected_size(calculateMaxProtectedSize(max_size_in_bytes_, size_ratio_))
@@ -44,7 +44,7 @@ class SLRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFun
         , size_ratio(size_ratio_)
         , current_size_in_bytes_metric(size_in_bytes_metric_)
         , count_metric(count_metric_)
-        , on_weight_loss_function(on_weight_loss_function_)
+        , on_remove_entry_function(on_remove_entry_function_)
     {
     }
 
@@ -270,7 +270,7 @@ class SLRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFun
     CurrentMetrics::Metric count_metric;
 
     WeightFunction weight_function;
-    OnWeightLossFunction on_weight_loss_function;
+    OnRemoveEntryFunction on_remove_entry_function;
 
     static size_t calculateMaxProtectedSize(size_t max_size_in_bytes, double size_ratio)
     {
@@ -326,6 +326,11 @@ class SLRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFun
             else
             {
                 current_weight_lost += cell.size;
+
+                /// We cannot have protected cells in non-protected queue
+                chassert(!is_protected);
+                on_remove_entry_function(cell.size, cell.value);
+
                 cells.erase(it);
                 queue.pop_front();
             }
@@ -333,9 +338,6 @@ class SLRUCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFun
             --queue_size;
         }
 
-        if (!is_protected)
-            on_weight_loss_function(current_weight_lost);
-
         if (current_size_in_bytes > (1ull << 63))
             std::terminate(); // Queue became inconsistent
 
diff --git a/src/Common/TTLCachePolicy.h b/src/Common/TTLCachePolicy.h
index 2070718c87c8..79e34dc2ebd5 100644
--- a/src/Common/TTLCachePolicy.h
+++ b/src/Common/TTLCachePolicy.h
@@ -93,7 +93,7 @@ class TTLCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFunc
     using Base = ICachePolicy<Key, Mapped, HashFunction, WeightFunction>;
     using typename Base::MappedPtr;
     using typename Base::KeyMapped;
-    using typename Base::OnWeightLossFunction;
+    using typename Base::OnRemoveEntryFunction;
 
     explicit TTLCachePolicy(CurrentMetrics::Metric size_in_bytes_metric_, CurrentMetrics::Metric count_metric_, CachePolicyUserQuotaPtr quotas_)
         : Base(std::move(quotas_))
@@ -288,7 +288,7 @@ class TTLCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFunc
 
     WeightFunction weight_function;
     IsStaleFunction is_stale_function;
-    /// TODO support OnWeightLossFunction callback
+    /// TODO support OnRemoveEntryFunction callback
 
     void clearImpl()
     {
@@ -300,6 +300,7 @@ class TTLCachePolicy : public ICachePolicy<Key, Mapped, HashFunction, WeightFunc
 
         size_in_bytes = 0;
     }
+
 };
 
 }
diff --git a/src/Formats/MarkInCompressedFile.h b/src/Formats/MarkInCompressedFile.h
index 12acb1d1333e..801987751c34 100644
--- a/src/Formats/MarkInCompressedFile.h
+++ b/src/Formats/MarkInCompressedFile.h
@@ -50,6 +50,8 @@ class MarksInCompressedFile
 
     size_t approximateMemoryUsage() const;
 
+    size_t getNumberOfMarks() const { return num_marks; }
+
 private:
     /** Throughout this class:
      *   * "x" stands for offset_in_compressed_file,
diff --git a/src/IO/UncompressedCache.h b/src/IO/UncompressedCache.h
index 125d58e2eee3..ba8081ba962c 100644
--- a/src/IO/UncompressedCache.h
+++ b/src/IO/UncompressedCache.h
@@ -61,9 +61,11 @@ class UncompressedCache : public CacheBase<UInt128, UncompressedCacheCell, UInt1
     }
 
 private:
-    void onRemoveOverflowWeightLoss(size_t weight_loss) override
+    /// Called for each individual entry being evicted from cache
+    void onEntryRemoval(const size_t weight_loss, const MappedPtr & mapped_ptr) override
     {
         ProfileEvents::increment(ProfileEvents::UncompressedCacheWeightLost, weight_loss);
+        UNUSED(mapped_ptr);
     }
 };
 
diff --git a/src/Storages/MarkCache.h b/src/Storages/MarkCache.h
index 9d9acabf68e6..81af2dd1c6dd 100644
--- a/src/Storages/MarkCache.h
+++ b/src/Storages/MarkCache.h
@@ -12,6 +12,9 @@ namespace ProfileEvents
 {
     extern const Event MarkCacheHits;
     extern const Event MarkCacheMisses;
+    extern const Event MarkCacheEvictedBytes;
+    extern const Event MarkCacheEvictedMarks;
+    extern const Event MarkCacheEvictedFiles;
 }
 
 namespace DB
@@ -41,7 +44,7 @@ class MarkCache : public CacheBase<UInt128, MarksInCompressedFile, UInt128Trivia
 public:
     MarkCache(const String & cache_policy, size_t max_size_in_bytes, double size_ratio);
 
-    /// Calculate key from path to file and offset.
+    /// Calculate key from path to file.
     static UInt128 hash(const String & path_to_file);
 
     template <typename LoadFunc>
@@ -55,6 +58,19 @@ class MarkCache : public CacheBase<UInt128, MarksInCompressedFile, UInt128Trivia
 
         return result.first;
     }
+
+private:
+    /// Called for each individual entry being evicted from cache
+    void onEntryRemoval(const size_t weight_loss, const MappedPtr & mapped_ptr) override
+    {
+        /// File is the key of MarkCache, each removal means eviction of 1 file from the cache.
+        ProfileEvents::increment(ProfileEvents::MarkCacheEvictedFiles);
+        ProfileEvents::increment(ProfileEvents::MarkCacheEvictedBytes, weight_loss);
+
+        const auto * marks_in_compressed_file = static_cast<const MarksInCompressedFile *>(mapped_ptr.get());
+        ProfileEvents::increment(ProfileEvents::MarkCacheEvictedMarks, marks_in_compressed_file->getNumberOfMarks());
+    }
+
 };
 
 using MarkCachePtr = std::shared_ptr<MarkCache>;
diff --git a/src/Storages/MergeTree/VectorSimilarityIndexCache.h b/src/Storages/MergeTree/VectorSimilarityIndexCache.h
index afde1a01dfeb..85063d233047 100644
--- a/src/Storages/MergeTree/VectorSimilarityIndexCache.h
+++ b/src/Storages/MergeTree/VectorSimilarityIndexCache.h
@@ -89,9 +89,11 @@ class VectorSimilarityIndexCache : public CacheBase<UInt128, VectorSimilarityInd
     }
 
 private:
-    void onRemoveOverflowWeightLoss(size_t weight_loss) override
+    /// Called for each individual entry being evicted from cache
+    void onEntryRemoval(const size_t weight_loss, const MappedPtr & mapped_ptr) override
     {
         ProfileEvents::increment(ProfileEvents::VectorSimilarityIndexCacheWeightLost, weight_loss);
+        UNUSED(mapped_ptr);
     }
 };
 
diff --git a/src/Storages/ObjectStorage/DataLakes/Iceberg/IcebergMetadataFilesCache.h b/src/Storages/ObjectStorage/DataLakes/Iceberg/IcebergMetadataFilesCache.h
index 2ad276d6e38d..fd57458cd170 100644
--- a/src/Storages/ObjectStorage/DataLakes/Iceberg/IcebergMetadataFilesCache.h
+++ b/src/Storages/ObjectStorage/DataLakes/Iceberg/IcebergMetadataFilesCache.h
@@ -149,9 +149,11 @@ class IcebergMetadataFilesCache : public CacheBase<String, IcebergMetadataFilesC
     }
 
 private:
-    void onRemoveOverflowWeightLoss(size_t weight_loss) override
+    /// Called for each individual entry being evicted from cache
+    void onEntryRemoval(const size_t weight_loss, const MappedPtr & mapped_ptr) override
     {
         ProfileEvents::increment(ProfileEvents::IcebergMetadataFilesCacheWeightLost, weight_loss);
+        UNUSED(mapped_ptr);
     }
 };
 
