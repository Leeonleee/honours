diff --git a/src/Functions/nested.cpp b/src/Functions/nested.cpp
index 85c342b5e7cd..29d99b8a6df9 100644
--- a/src/Functions/nested.cpp
+++ b/src/Functions/nested.cpp
@@ -108,27 +108,29 @@ class FunctionNested : public IFunction
     {
         size_t arguments_size = arguments.size();
 
-        const auto * lhs_array = assert_cast<const ColumnArray *>(arguments.at(1).column.get());
+        ColumnPtr first_array_materialized = arguments[1].column->convertToFullColumnIfConst();
+        const ColumnArray & first_array = assert_cast<const ColumnArray &>(*first_array_materialized);
 
         Columns data_columns;
         data_columns.reserve(arguments_size);
-        data_columns.push_back(lhs_array->getDataPtr());
+        data_columns.push_back(first_array.getDataPtr());
 
         for (size_t i = 2; i < arguments_size; ++i)
         {
-            const auto * rhs_array = assert_cast<const ColumnArray *>(arguments[i].column.get());
+            ColumnPtr other_array_materialized = arguments[i].column->convertToFullColumnIfConst();
+            const ColumnArray & other_array = assert_cast<const ColumnArray &>(*other_array_materialized);
 
-            if (!lhs_array->hasEqualOffsets(*rhs_array))
+            if (!first_array.hasEqualOffsets(other_array))
                 throw Exception(ErrorCodes::SIZES_OF_ARRAYS_DONT_MATCH,
                     "The argument 2 and argument {} of function {} have different array offsets",
                     i + 1,
                     getName());
 
-            data_columns.push_back(rhs_array->getDataPtr());
+            data_columns.push_back(other_array.getDataPtr());
         }
 
         auto tuple_column = ColumnTuple::create(std::move(data_columns));
-        auto array_column = ColumnArray::create(std::move(tuple_column), lhs_array->getOffsetsPtr());
+        auto array_column = ColumnArray::create(std::move(tuple_column), first_array.getOffsetsPtr());
 
         return array_column;
     }
@@ -168,7 +170,12 @@ REGISTER_FUNCTION(Nested)
 {
     factory.registerFunction<FunctionNested>(FunctionDocumentation{
         .description=R"(
+This is a function used internally by the ClickHouse engine and not meant to be used directly.
+
 Returns the array of tuples from multiple arrays.
+
+The first argument must be a constant array of Strings determining the names of the resulting Tuple.
+The other arguments must be arrays of the same size.
 )",
         .examples{{"nested", "SELECT nested(['keys', 'values'], ['key_1', 'key_2'], ['value_1','value_2'])", ""}},
         .categories{"OtherFunctions"}
