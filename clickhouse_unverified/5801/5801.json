{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 5801,
  "instance_id": "ClickHouse__ClickHouse-5801",
  "issue_numbers": [
    "5305"
  ],
  "base_commit": "c3f01166020b8833f2cbc9adb85d9d50aa9a1e42",
  "patch": "diff --git a/dbms/src/Common/ThreadPool.cpp b/dbms/src/Common/ThreadPool.cpp\nindex 6ed350240c65..91ec29dc1889 100644\n--- a/dbms/src/Common/ThreadPool.cpp\n+++ b/dbms/src/Common/ThreadPool.cpp\n@@ -30,10 +30,18 @@ template <typename Thread>\n template <typename ReturnType>\n ReturnType ThreadPoolImpl<Thread>::scheduleImpl(Job job, int priority, std::optional<uint64_t> wait_microseconds)\n {\n-    auto on_error = []\n+    auto on_error = [&]\n     {\n         if constexpr (std::is_same_v<ReturnType, void>)\n+        {\n+            if (first_exception)\n+            {\n+                std::exception_ptr exception;\n+                std::swap(exception, first_exception);\n+                std::rethrow_exception(exception);\n+            }\n             throw DB::Exception(\"Cannot schedule a task\", DB::ErrorCodes::CANNOT_SCHEDULE_TASK);\n+        }\n         else\n             return false;\n     };\n",
  "test_patch": "diff --git a/dbms/src/Common/tests/CMakeLists.txt b/dbms/src/Common/tests/CMakeLists.txt\nindex 1c6c7e9f5049..23b1614e704d 100644\n--- a/dbms/src/Common/tests/CMakeLists.txt\n+++ b/dbms/src/Common/tests/CMakeLists.txt\n@@ -41,9 +41,6 @@ target_link_libraries (compact_array PRIVATE clickhouse_common_io ${Boost_FILESY\n add_executable (radix_sort radix_sort.cpp)\n target_link_libraries (radix_sort PRIVATE clickhouse_common_io)\n \n-add_executable (shell_command_test shell_command_test.cpp)\n-target_link_libraries (shell_command_test PRIVATE clickhouse_common_io)\n-\n add_executable (arena_with_free_lists arena_with_free_lists.cpp)\n target_link_libraries (arena_with_free_lists PRIVATE clickhouse_compression clickhouse_common_io)\n \n@@ -53,15 +50,6 @@ target_link_libraries (pod_array PRIVATE clickhouse_common_io)\n add_executable (thread_creation_latency thread_creation_latency.cpp)\n target_link_libraries (thread_creation_latency PRIVATE clickhouse_common_io)\n \n-add_executable (thread_pool thread_pool.cpp)\n-target_link_libraries (thread_pool PRIVATE clickhouse_common_io)\n-\n-add_executable (thread_pool_2 thread_pool_2.cpp)\n-target_link_libraries (thread_pool_2 PRIVATE clickhouse_common_io)\n-\n-add_executable (thread_pool_3 thread_pool_3.cpp)\n-target_link_libraries (thread_pool_3 PRIVATE clickhouse_common_io)\n-\n add_executable (multi_version multi_version.cpp)\n target_link_libraries (multi_version PRIVATE clickhouse_common_io)\n add_check(multi_version)\ndiff --git a/dbms/src/Common/tests/gtest_shell_command.cpp b/dbms/src/Common/tests/gtest_shell_command.cpp\nnew file mode 100644\nindex 000000000000..2378cda2ee77\n--- /dev/null\n+++ b/dbms/src/Common/tests/gtest_shell_command.cpp\n@@ -0,0 +1,72 @@\n+#include <iostream>\n+#include <Core/Types.h>\n+#include <Common/ShellCommand.h>\n+#include <IO/copyData.h>\n+#include <IO/WriteBufferFromFileDescriptor.h>\n+#include <IO/ReadBufferFromString.h>\n+#include <IO/ReadHelpers.h>\n+\n+#include <chrono>\n+#include <thread>\n+\n+#pragma GCC diagnostic ignored \"-Wsign-compare\"\n+#ifdef __clang__\n+    #pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"\n+    #pragma clang diagnostic ignored \"-Wundef\"\n+#endif\n+#include <gtest/gtest.h>\n+\n+\n+using namespace DB;\n+\n+\n+TEST(ShellCommand, Execute)\n+{\n+    auto command = ShellCommand::execute(\"echo 'Hello, world!'\");\n+\n+    std::string res;\n+    readStringUntilEOF(res, command->out);\n+    command->wait();\n+\n+    EXPECT_EQ(res, \"Hello, world!\\n\");\n+}\n+\n+TEST(ShellCommand, ExecuteDirect)\n+{\n+    auto command = ShellCommand::executeDirect(\"/bin/echo\", {\"Hello, world!\"});\n+\n+    std::string res;\n+    readStringUntilEOF(res, command->out);\n+    command->wait();\n+\n+    EXPECT_EQ(res, \"Hello, world!\\n\");\n+}\n+\n+TEST(ShellCommand, ExecuteWithInput)\n+{\n+    auto command = ShellCommand::execute(\"cat\");\n+\n+    String in_str = \"Hello, world!\\n\";\n+    ReadBufferFromString in(in_str);\n+    copyData(in, command->in);\n+    command->in.close();\n+\n+    std::string res;\n+    readStringUntilEOF(res, command->out);\n+    command->wait();\n+\n+    EXPECT_EQ(res, \"Hello, world!\\n\");\n+}\n+\n+TEST(ShellCommand, AutoWait)\n+{\n+    // <defunct> hunting:\n+    for (int i = 0; i < 1000; ++i)\n+    {\n+        auto command = ShellCommand::execute(\"echo \" + std::to_string(i));\n+        //command->wait(); // now automatic\n+    }\n+\n+    // std::cerr << \"inspect me: ps auxwwf\" << \"\\n\";\n+    // std::this_thread::sleep_for(std::chrono::seconds(100));\n+}\ndiff --git a/dbms/src/Common/tests/thread_pool.cpp b/dbms/src/Common/tests/gtest_thread_pool_concurrent_wait.cpp\nsimilarity index 73%\nrename from dbms/src/Common/tests/thread_pool.cpp\nrename to dbms/src/Common/tests/gtest_thread_pool_concurrent_wait.cpp\nindex 23dba2aadecb..1e38e418a22b 100644\n--- a/dbms/src/Common/tests/thread_pool.cpp\n+++ b/dbms/src/Common/tests/gtest_thread_pool_concurrent_wait.cpp\n@@ -1,11 +1,18 @@\n #include <Common/ThreadPool.h>\n \n+#pragma GCC diagnostic ignored \"-Wsign-compare\"\n+#ifdef __clang__\n+    #pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"\n+    #pragma clang diagnostic ignored \"-Wundef\"\n+#endif\n+#include <gtest/gtest.h>\n+\n /** Reproduces bug in ThreadPool.\n   * It get stuck if we call 'wait' many times from many other threads simultaneously.\n   */\n \n \n-int main(int, char **)\n+TEST(ThreadPool, ConcurrentWait)\n {\n     auto worker = []\n     {\n@@ -29,6 +36,4 @@ int main(int, char **)\n         waiting_pool.schedule([&pool]{ pool.wait(); });\n \n     waiting_pool.wait();\n-\n-    return 0;\n }\ndiff --git a/dbms/src/Common/tests/gtest_thread_pool_limit.cpp b/dbms/src/Common/tests/gtest_thread_pool_limit.cpp\nnew file mode 100644\nindex 000000000000..2bd38f34d108\n--- /dev/null\n+++ b/dbms/src/Common/tests/gtest_thread_pool_limit.cpp\n@@ -0,0 +1,32 @@\n+#include <atomic>\n+#include <iostream>\n+#include <Common/ThreadPool.h>\n+\n+#pragma GCC diagnostic ignored \"-Wsign-compare\"\n+#ifdef __clang__\n+    #pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"\n+    #pragma clang diagnostic ignored \"-Wundef\"\n+#endif\n+#include <gtest/gtest.h>\n+\n+/// Test for thread self-removal when number of free threads in pool is too large.\n+/// Just checks that nothing weird happens.\n+\n+template <typename Pool>\n+int test()\n+{\n+    Pool pool(10, 2, 10);\n+\n+    std::atomic<int> counter{0};\n+    for (size_t i = 0; i < 10; ++i)\n+        pool.schedule([&]{ ++counter; });\n+    pool.wait();\n+\n+    return counter;\n+}\n+\n+TEST(ThreadPool, ThreadRemoval)\n+{\n+    EXPECT_EQ(test<FreeThreadPool>(), 10);\n+    EXPECT_EQ(test<ThreadPool>(), 10);\n+}\ndiff --git a/dbms/src/Common/tests/thread_pool_2.cpp b/dbms/src/Common/tests/gtest_thread_pool_loop.cpp\nsimilarity index 50%\nrename from dbms/src/Common/tests/thread_pool_2.cpp\nrename to dbms/src/Common/tests/gtest_thread_pool_loop.cpp\nindex 029c3695e36b..80b7b94d9886 100644\n--- a/dbms/src/Common/tests/thread_pool_2.cpp\n+++ b/dbms/src/Common/tests/gtest_thread_pool_loop.cpp\n@@ -2,10 +2,17 @@\n #include <iostream>\n #include <Common/ThreadPool.h>\n \n+#pragma GCC diagnostic ignored \"-Wsign-compare\"\n+#ifdef __clang__\n+    #pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"\n+    #pragma clang diagnostic ignored \"-Wundef\"\n+#endif\n+#include <gtest/gtest.h>\n \n-int main(int, char **)\n+\n+TEST(ThreadPool, Loop)\n {\n-    std::atomic<size_t> res{0};\n+    std::atomic<int> res{0};\n \n     for (size_t i = 0; i < 1000; ++i)\n     {\n@@ -16,6 +23,5 @@ int main(int, char **)\n         pool.wait();\n     }\n \n-    std::cerr << res << \"\\n\";\n-    return 0;\n+    EXPECT_EQ(res, 16000);\n }\ndiff --git a/dbms/src/Common/tests/gtest_thread_pool_schedule_exception.cpp b/dbms/src/Common/tests/gtest_thread_pool_schedule_exception.cpp\nnew file mode 100644\nindex 000000000000..001d9c30b27e\n--- /dev/null\n+++ b/dbms/src/Common/tests/gtest_thread_pool_schedule_exception.cpp\n@@ -0,0 +1,38 @@\n+#include <iostream>\n+#include <stdexcept>\n+#include <Common/ThreadPool.h>\n+\n+#pragma GCC diagnostic ignored \"-Wsign-compare\"\n+#ifdef __clang__\n+    #pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"\n+    #pragma clang diagnostic ignored \"-Wundef\"\n+#endif\n+#include <gtest/gtest.h>\n+\n+\n+bool check()\n+{\n+    ThreadPool pool(10);\n+\n+    pool.schedule([]{ throw std::runtime_error(\"Hello, world!\"); });\n+\n+    try\n+    {\n+        for (size_t i = 0; i < 100; ++i)\n+            pool.schedule([]{});    /// An exception will be rethrown from this method.\n+    }\n+    catch (const std::runtime_error &)\n+    {\n+        return true;\n+    }\n+\n+    pool.wait();\n+\n+    return false;\n+}\n+\n+\n+TEST(ThreadPool, ExceptionFromSchedule)\n+{\n+    EXPECT_TRUE(check());\n+}\ndiff --git a/dbms/src/Common/tests/shell_command_test.cpp b/dbms/src/Common/tests/shell_command_test.cpp\ndeleted file mode 100644\nindex 7de6c18bfdfc..000000000000\n--- a/dbms/src/Common/tests/shell_command_test.cpp\n+++ /dev/null\n@@ -1,63 +0,0 @@\n-#include <iostream>\n-#include <Core/Types.h>\n-#include <Common/ShellCommand.h>\n-#include <IO/copyData.h>\n-#include <IO/WriteBufferFromFileDescriptor.h>\n-#include <IO/ReadBufferFromString.h>\n-\n-#include <chrono>\n-#include <thread>\n-\n-using namespace DB;\n-\n-\n-int main(int, char **)\n-try\n-{\n-    {\n-        auto command = ShellCommand::execute(\"echo 'Hello, world!'\");\n-\n-        WriteBufferFromFileDescriptor out(STDOUT_FILENO);\n-        copyData(command->out, out);\n-\n-        command->wait();\n-    }\n-\n-    {\n-        auto command = ShellCommand::executeDirect(\"/bin/echo\", {\"Hello, world!\"});\n-\n-        WriteBufferFromFileDescriptor out(STDOUT_FILENO);\n-        copyData(command->out, out);\n-\n-        command->wait();\n-    }\n-\n-    {\n-        auto command = ShellCommand::execute(\"cat\");\n-\n-        String in_str = \"Hello, world!\\n\";\n-        ReadBufferFromString in(in_str);\n-        copyData(in, command->in);\n-        command->in.close();\n-\n-        WriteBufferFromFileDescriptor out(STDOUT_FILENO);\n-        copyData(command->out, out);\n-\n-        command->wait();\n-    }\n-\n-    // <defunct> hunting:\n-    for (int i = 0; i < 1000; ++i)\n-    {\n-        auto command = ShellCommand::execute(\"echo \" + std::to_string(i));\n-        //command->wait(); // now automatic\n-    }\n-\n-    // std::cerr << \"inspect me: ps auxwwf\" << \"\\n\";\n-    // std::this_thread::sleep_for(std::chrono::seconds(100));\n-}\n-catch (...)\n-{\n-    std::cerr << getCurrentExceptionMessage(false) << \"\\n\";\n-    return 1;\n-}\ndiff --git a/dbms/src/Common/tests/thread_pool_3.cpp b/dbms/src/Common/tests/thread_pool_3.cpp\ndeleted file mode 100644\nindex 924895de3088..000000000000\n--- a/dbms/src/Common/tests/thread_pool_3.cpp\n+++ /dev/null\n@@ -1,27 +0,0 @@\n-#include <mutex>\n-#include <iostream>\n-#include <Common/ThreadPool.h>\n-\n-/// Test for thread self-removal when number of free threads in pool is too large.\n-/// Just checks that nothing weird happens.\n-\n-template <typename Pool>\n-void test()\n-{\n-    Pool pool(10, 2, 10);\n-\n-    std::mutex mutex;\n-    for (size_t i = 0; i < 10; ++i)\n-        pool.schedule([&]{ std::lock_guard lock(mutex); std::cerr << '.'; });\n-    pool.wait();\n-}\n-\n-int main(int, char **)\n-{\n-    test<FreeThreadPool>();\n-    std::cerr << '\\n';\n-    test<ThreadPool>();\n-    std::cerr << '\\n';\n-\n-    return 0;\n-}\n",
  "problem_statement": "Run sql error: Cannot schedule a task\nversion: 19.6.2.11\r\n\r\nI run a simple sql. then return err message.\r\n\r\n0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x767c3f6]\r\n1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x39294a2]\r\n2. /usr/bin/clickhouse-server(DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&)+0x1753) [0x6ae23f3]\r\n3. /usr/bin/clickhouse-server(DB::InterpreterCreateQuery::execute()+0x60) [0x6ae3190]\r\n4. /usr/bin/clickhouse-server() [0x6c1ae61]\r\n5. /usr/bin/clickhouse-server(DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>)+0x134) [0x6c1ccc4]\r\n6. /usr/bin/clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x339e) [0x3943e4e]\r\n7. /usr/bin/clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x3f1) [0x3946131]\r\n8. /usr/bin/clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x32c) [0x778d9bc]\r\n9. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x77879bf]\r\n10. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0xe9) [0x77880f9]\r\n11. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x81) [0x783b231]\r\n12. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0x78373f8]\r\n13. /usr/bin/clickhouse-server() [0xb5488bf]\r\n14. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76ba) [0x7fdb0f57b6ba]\r\n15. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7fdb0eb9c41d]\r\n\r\n[query_err.txt](https://github.com/yandex/ClickHouse/files/3187173/query_err.txt)\r\n\r\n\r\nIs there many db Parameters to avoid this error?\r\n\r\nbut when data type LowCardinality(String) convert to String  . it run well\n",
  "hints_text": "1) Can you try to run clickhouse-client, then run `set send_logs_level='trace'`, and after - run that problematic query? and attach the results here.\r\n2) Are you able to create a reproducible example? It would make diagnosing and fixing much simpler\nPlease show full error (maybe from server logs)\r\n\r\nDo you have database dw_hr ?\r\n\ni run  in clickhouse-client. \r\n\r\n[master] 2019.05.16 22:51:44.834426 [ 73 ] <Trace> Aggregator: Written part in 0.819 sec., 146174 rows, 90.803 MiB uncompressed, 14.800 MiB compressed, 651.374 uncompressed bytes per row, 106.170 compressed bytes per row, compression rate: 6.135 (178483.931 rows/sec., 110.874 MiB/sec. uncompressed, 18.072 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:44.842359 [ 102 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053stgaaa.\r\n[master] 2019.05.16 22:51:44.843824 [ 20 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053ttgaaa.\r\n[master] 2019.05.16 22:51:44.844474 [ 144 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053utgaaa.\r\n[master] 2019.05.16 22:51:44.849621 [ 101 ] <Trace> Aggregator: Max size of temporary block: 611 rows, 11264.084 MiB.\r\n[master] 2019.05.16 22:51:44.862331 [ 101 ] <Trace> Aggregator: Written part in 0.850 sec., 138190 rows, 85.904 MiB uncompressed, 13.840 MiB compressed, 651.830 uncompressed bytes per row, 105.020 compressed bytes per row, compression rate: 6.207 (162653.958 rows/sec., 101.111 MiB/sec. uncompressed, 16.291 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:44.870119 [ 140 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053vtgaaa.\r\n[master] 2019.05.16 22:51:44.870185 [ 70 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053wtgaaa.\r\n[master] 2019.05.16 22:51:44.871773 [ 125 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053xtgaaa.\r\n[master] 2019.05.16 22:51:44.871938 [ 109 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053ytgaaa.\r\n[master] 2019.05.16 22:51:44.872096 [ 128 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053ztgaaa.\r\n[master] 2019.05.16 22:51:44.874242 [ 73 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053augaaa.\r\n[master] 2019.05.16 22:51:44.877446 [ 118 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053bugaaa.\r\n[master] 2019.05.16 22:51:44.882337 [ 103 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053cugaaa.\r\n\u2190 Progress: 16.21 million rows, 6.42 GB (2.00 million rows/s., 792.86 MB/s.) \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   97%[master] 2019.05.16 22:51:44.969754 [ 89 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053dugaaa.\r\n[master] 2019.05.16 22:51:44.973142 [ 101 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053eugaaa.\r\n[master] 2019.05.16 22:51:44.974153 [ 78 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053fugaaa.\r\n[master] 2019.05.16 22:51:44.975159 [ 131 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053gugaaa.\r\n[master] 2019.05.16 22:51:44.976474 [ 93 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053hugaaa.\r\n[master] 2019.05.16 22:51:44.981394 [ 117 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053iugaaa.\r\n[master] 2019.05.16 22:51:44.981670 [ 126 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053jugaaa.\r\n[master] 2019.05.16 22:51:44.983973 [ 137 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053kugaaa.\r\n[master] 2019.05.16 22:51:44.990397 [ 25 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053lugaaa.\r\n[master] 2019.05.16 22:51:44.990467 [ 141 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053mugaaa.\r\n\u2196 Progress: 16.29 million rows, 6.45 GB (1.99 million rows/s., 787.13 MB/s.) \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  98%[master] 2019.05.16 22:51:45.065476 [ 73 ] <Trace> Aggregator: Max size of temporary block: 89 rows, 1407.865 MiB.\r\n[master] 2019.05.16 22:51:45.067794 [ 73 ] <Trace> Aggregator: Written part in 0.194 sec., 16384 rows, 10.833 MiB uncompressed, 1.093 MiB compressed, 693.325 uncompressed bytes per row, 69.978 compressed bytes per row, compression rate: 9.908 (84590.318 rows/sec., 55.932 MiB/sec. uncompressed, 5.645 MiB/sec. compressed)\r\n\u2191 Progress: 16.35 million rows, 6.48 GB (1.97 million rows/s., 780.76 MB/s.) \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c 98%[master] 2019.05.16 22:51:45.146799 [ 88 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053nugaaa.\r\n[master] 2019.05.16 22:51:45.188526 [ 109 ] <Trace> Aggregator: Max size of temporary block: 201 rows, 2815.912 MiB.\r\n[master] 2019.05.16 22:51:45.191265 [ 109 ] <Trace> Aggregator: Written part in 0.319 sec., 40743 rows, 25.854 MiB uncompressed, 4.003 MiB compressed, 665.381 uncompressed bytes per row, 103.015 compressed bytes per row, compression rate: 6.459 (127540.024 rows/sec., 80.931 MiB/sec. uncompressed, 12.530 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.202146 [ 70 ] <Trace> Aggregator: Max size of temporary block: 153 rows, 2815.892 MiB.\r\n[master] 2019.05.16 22:51:45.205065 [ 70 ] <Trace> Aggregator: Written part in 0.335 sec., 32690 rows, 20.879 MiB uncompressed, 3.077 MiB compressed, 669.720 uncompressed bytes per row, 98.686 compressed bytes per row, compression rate: 6.786 (97583.350 rows/sec., 62.326 MiB/sec. uncompressed, 9.184 MiB/sec. compressed)\r\n\u2197 Progress: 16.37 million rows, 6.49 GB (1.95 million rows/s., 772.18 MB/s.) \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b 98%[master] 2019.05.16 22:51:45.244316 [ 20 ] <Trace> Aggregator: Max size of temporary block: 268 rows, 5631.940 MiB.\r\n[master] 2019.05.16 22:51:45.246576 [ 20 ] <Trace> Aggregator: Written part in 0.403 sec., 57231 rows, 36.047 MiB uncompressed, 5.224 MiB compressed, 660.452 uncompressed bytes per row, 95.709 compressed bytes per row, compression rate: 6.901 (142049.956 rows/sec., 89.471 MiB/sec. uncompressed, 12.966 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.248119 [ 79 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053ougaaa.\r\n[master] 2019.05.16 22:51:45.256352 [ 48 ] <Debug> Aggregator: Writing part of aggregation data into temporary file /data/clickhouse/data/tmp/tmp1053pugaaa.\r\n[master] 2019.05.16 22:51:45.312228 [ 125 ] <Trace> Aggregator: Max size of temporary block: 306 rows, 5631.956 MiB.\r\n[master] 2019.05.16 22:51:45.314111 [ 102 ] <Trace> Aggregator: Max size of temporary block: 309 rows, 5631.958 MiB.\r\n[master] 2019.05.16 22:51:45.315795 [ 125 ] <Trace> Aggregator: Written part in 0.444 sec., 65239 rows, 41.130 MiB uncompressed, 5.790 MiB compressed, 661.072 uncompressed bytes per row, 93.059 compressed bytes per row, compression rate: 7.104 (146870.666 rows/sec., 92.594 MiB/sec. uncompressed, 13.035 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.317771 [ 102 ] <Trace> Aggregator: Written part in 0.476 sec., 65476 rows, 41.271 MiB uncompressed, 6.417 MiB compressed, 660.935 uncompressed bytes per row, 102.765 compressed bytes per row, compression rate: 6.432 (137671.178 rows/sec., 86.776 MiB/sec. uncompressed, 13.492 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.318639 [ 101 ] <Trace> Aggregator: Max size of temporary block: 197 rows, 2815.911 MiB.\r\n[master] 2019.05.16 22:51:45.319899 [ 101 ] <Trace> Aggregator: Written part in 0.347 sec., 40941 rows, 26.029 MiB uncompressed, 3.701 MiB compressed, 666.654 uncompressed bytes per row, 94.802 compressed bytes per row, compression rate: 7.032 (118013.716 rows/sec., 75.030 MiB/sec. uncompressed, 10.670 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.369187 [ 128 ] <Trace> Aggregator: Max size of temporary block: 358 rows, 5631.978 MiB.\r\n[master] 2019.05.16 22:51:45.375025 [ 128 ] <Trace> Aggregator: Written part in 0.503 sec., 79768 rows, 49.965 MiB uncompressed, 7.766 MiB compressed, 656.800 uncompressed bytes per row, 102.093 compressed bytes per row, compression rate: 6.433 (158567.401 rows/sec., 99.322 MiB/sec. uncompressed, 15.439 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.388635 [ 144 ] <Trace> Aggregator: Max size of temporary block: 462 rows, 11264.021 MiB.\r\n[master] 2019.05.16 22:51:45.392754 [ 118 ] <Trace> Aggregator: Max size of temporary block: 358 rows, 5631.977 MiB.\r\n[master] 2019.05.16 22:51:45.393096 [ 103 ] <Trace> Aggregator: Max size of temporary block: 388 rows, 5631.990 MiB.\r\n[master] 2019.05.16 22:51:45.396957 [ 144 ] <Trace> Aggregator: Written part in 0.553 sec., 105848 rows, 65.908 MiB uncompressed, 10.500 MiB compressed, 652.917 uncompressed bytes per row, 104.015 compressed bytes per row, compression rate: 6.277 (191522.163 rows/sec., 119.255 MiB/sec. uncompressed, 18.998 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.400157 [ 118 ] <Trace> Aggregator: Written part in 0.523 sec., 80056 rows, 49.946 MiB uncompressed, 7.397 MiB compressed, 654.200 uncompressed bytes per row, 96.885 compressed bytes per row, compression rate: 6.752 (153109.189 rows/sec., 95.524 MiB/sec. uncompressed, 14.147 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.405156 [ 103 ] <Trace> Aggregator: Written part in 0.523 sec., 86120 rows, 53.844 MiB uncompressed, 7.574 MiB compressed, 655.587 uncompressed bytes per row, 92.224 compressed bytes per row, compression rate: 7.109 (164671.433 rows/sec., 102.955 MiB/sec. uncompressed, 14.483 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.413629 [ 89 ] <Trace> Aggregator: Max size of temporary block: 310 rows, 5631.958 MiB.\r\n[master] 2019.05.16 22:51:45.417552 [ 89 ] <Trace> Aggregator: Written part in 0.448 sec., 64866 rows, 40.867 MiB uncompressed, 6.500 MiB compressed, 660.625 uncompressed bytes per row, 105.070 compressed bytes per row, compression rate: 6.287 (144800.799 rows/sec., 91.228 MiB/sec. uncompressed, 14.509 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.422618 [ 78 ] <Trace> Aggregator: Max size of temporary block: 368 rows, 5631.982 MiB.\r\n[master] 2019.05.16 22:51:45.428009 [ 78 ] <Trace> Aggregator: Written part in 0.454 sec., 82510 rows, 51.736 MiB uncompressed, 7.784 MiB compressed, 657.484 uncompressed bytes per row, 98.927 compressed bytes per row, compression rate: 6.646 (181742.722 rows/sec., 113.957 MiB/sec. uncompressed, 17.146 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.438581 [ 93 ] <Trace> Aggregator: Max size of temporary block: 342 rows, 5631.971 MiB.\r\n[master] 2019.05.16 22:51:45.442259 [ 93 ] <Trace> Aggregator: Written part in 0.467 sec., 73574 rows, 46.016 MiB uncompressed, 6.292 MiB compressed, 655.824 uncompressed bytes per row, 89.668 compressed bytes per row, compression rate: 7.314 (157510.252 rows/sec., 98.514 MiB/sec. uncompressed, 13.469 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.451982 [ 137 ] <Trace> Aggregator: Max size of temporary block: 367 rows, 5631.981 MiB.\r\n[master] 2019.05.16 22:51:45.457194 [ 137 ] <Trace> Aggregator: Written part in 0.473 sec., 81858 rows, 50.988 MiB uncompressed, 7.179 MiB compressed, 653.138 uncompressed bytes per row, 91.965 compressed bytes per row, compression rate: 7.102 (172923.607 rows/sec., 107.711 MiB/sec. uncompressed, 15.166 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.483840 [ 131 ] <Trace> Aggregator: Max size of temporary block: 363 rows, 5631.980 MiB.\r\n[master] 2019.05.16 22:51:45.487644 [ 131 ] <Trace> Aggregator: Written part in 0.513 sec., 81706 rows, 51.023 MiB uncompressed, 7.341 MiB compressed, 654.807 uncompressed bytes per row, 94.214 compressed bytes per row, compression rate: 6.950 (159373.787 rows/sec., 99.525 MiB/sec. uncompressed, 14.320 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.522335 [ 117 ] <Trace> Aggregator: Max size of temporary block: 399 rows, 11263.995 MiB.\r\n[master] 2019.05.16 22:51:45.528209 [ 117 ] <Trace> Aggregator: Written part in 0.547 sec., 89277 rows, 55.829 MiB uncompressed, 8.362 MiB compressed, 655.721 uncompressed bytes per row, 98.210 compressed bytes per row, compression rate: 6.677 (163217.589 rows/sec., 102.067 MiB/sec. uncompressed, 15.287 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.532478 [ 140 ] <Trace> Aggregator: Max size of temporary block: 529 rows, 11264.050 MiB.\r\n[master] 2019.05.16 22:51:45.540578 [ 140 ] <Trace> Aggregator: Written part in 0.671 sec., 119423 rows, 74.472 MiB uncompressed, 12.246 MiB compressed, 653.893 uncompressed bytes per row, 107.527 compressed bytes per row, compression rate: 6.081 (178076.396 rows/sec., 111.049 MiB/sec. uncompressed, 18.261 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.576447 [ 25 ] <Trace> Aggregator: Max size of temporary block: 502 rows, 11264.039 MiB.\r\n[master] 2019.05.16 22:51:45.583905 [ 25 ] <Trace> Aggregator: Written part in 0.594 sec., 113738 rows, 71.072 MiB uncompressed, 11.813 MiB compressed, 655.227 uncompressed bytes per row, 108.909 compressed bytes per row, compression rate: 6.016 (191585.411 rows/sec., 119.717 MiB/sec. uncompressed, 19.899 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.608911 [ 141 ] <Trace> Aggregator: Max size of temporary block: 505 rows, 11264.040 MiB.\r\n[master] 2019.05.16 22:51:45.616578 [ 141 ] <Trace> Aggregator: Written part in 0.626 sec., 113732 rows, 71.193 MiB uncompressed, 11.799 MiB compressed, 656.382 uncompressed bytes per row, 108.786 compressed bytes per row, compression rate: 6.034 (181591.403 rows/sec., 113.672 MiB/sec. uncompressed, 18.839 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.675009 [ 126 ] <Trace> Aggregator: Max size of temporary block: 610 rows, 11264.084 MiB.\r\n[master] 2019.05.16 22:51:45.684916 [ 126 ] <Trace> Aggregator: Written part in 0.703 sec., 142791 rows, 89.015 MiB uncompressed, 14.689 MiB compressed, 653.674 uncompressed bytes per row, 107.868 compressed bytes per row, compression rate: 6.060 (203005.569 rows/sec., 126.552 MiB/sec. uncompressed, 20.883 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:45.763410 [ 88 ] <Trace> Aggregator: Max size of temporary block: 587 rows, 11264.074 MiB.\r\n[master] 2019.05.16 22:51:45.773656 [ 88 ] <Trace> Aggregator: Written part in 0.627 sec., 136664 rows, 85.184 MiB uncompressed, 13.956 MiB compressed, 653.589 uncompressed bytes per row, 107.078 compressed bytes per row, compression rate: 6.104 (217949.283 rows/sec., 135.850 MiB/sec. uncompressed, 22.257 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:46.148329 [ 79 ] <Trace> Aggregator: Max size of temporary block: 856 rows, 16896.187 MiB.\r\n[master] 2019.05.16 22:51:46.163790 [ 79 ] <Trace> Aggregator: Written part in 0.916 sec., 203492 rows, 126.558 MiB uncompressed, 20.971 MiB compressed, 652.142 uncompressed bytes per row, 108.061 compressed bytes per row, compression rate: 6.035 (222192.542 rows/sec., 138.189 MiB/sec. uncompressed, 22.898 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:46.279573 [ 48 ] <Trace> Aggregator: Max size of temporary block: 924 rows, 16896.215 MiB.\r\n[master] 2019.05.16 22:51:46.299284 [ 48 ] <Trace> Aggregator: Written part in 1.043 sec., 218284 rows, 135.518 MiB uncompressed, 22.290 MiB compressed, 650.992 uncompressed bytes per row, 107.074 compressed bytes per row, compression rate: 6.080 (209263.424 rows/sec., 129.918 MiB/sec. uncompressed, 21.369 MiB/sec. compressed)\r\n[master] 2019.05.16 22:51:46.300245 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 753664 to 0 rows (from 283.369 MiB) in 9.314 sec. (80921.582 rows/sec., 30.426 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300323 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 589824 to 0 rows (from 221.774 MiB) in 9.314 sec. (63329.933 rows/sec., 23.812 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300355 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 581632 to 0 rows (from 218.701 MiB) in 9.314 sec. (62450.351 rows/sec., 23.482 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300384 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 819200 to 0 rows (from 307.906 MiB) in 9.314 sec. (87958.241 rows/sec., 33.060 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300411 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 638976 to 0 rows (from 240.369 MiB) in 9.314 sec. (68607.428 rows/sec., 25.809 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300459 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 729088 to 0 rows (from 274.048 MiB) in 9.314 sec. (78282.834 rows/sec., 29.425 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300496 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 565248 to 0 rows (from 212.505 MiB) in 9.314 sec. (60691.186 rows/sec., 22.817 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300548 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 753664 to 0 rows (from 283.116 MiB) in 9.314 sec. (80921.582 rows/sec., 30.398 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300595 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 778240 to 0 rows (from 292.579 MiB) in 9.314 sec. (83560.329 rows/sec., 31.414 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300636 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 614400 to 0 rows (from 231.115 MiB) in 9.314 sec. (65968.681 rows/sec., 24.815 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300681 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 753664 to 0 rows (from 283.361 MiB) in 9.314 sec. (80921.582 rows/sec., 30.425 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300730 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 508604 to 0 rows (from 191.499 MiB) in 9.314 sec. (54609.269 rows/sec., 20.561 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300781 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 802816 to 0 rows (from 302.495 MiB) in 9.314 sec. (86199.076 rows/sec., 32.479 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300824 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 589824 to 0 rows (from 221.330 MiB) in 9.314 sec. (63329.933 rows/sec., 23.764 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300857 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 804219 to 0 rows (from 303.348 MiB) in 9.314 sec. (86349.717 rows/sec., 32.571 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300889 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 753664 to 0 rows (from 283.397 MiB) in 9.314 sec. (80921.582 rows/sec., 30.429 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300922 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 553397 to 0 rows (from 207.801 MiB) in 9.314 sec. (59418.734 rows/sec., 22.312 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300961 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 606208 to 0 rows (from 227.321 MiB) in 9.314 sec. (65089.098 rows/sec., 24.408 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.300993 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 770048 to 0 rows (from 288.812 MiB) in 9.314 sec. (82680.746 rows/sec., 31.010 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.301038 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 707131 to 0 rows (from 266.181 MiB) in 9.314 sec. (75925.292 rows/sec., 28.580 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.301086 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 606208 to 0 rows (from 227.316 MiB) in 9.314 sec. (65089.098 rows/sec., 24.407 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.301121 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 737280 to 0 rows (from 277.441 MiB) in 9.314 sec. (79162.417 rows/sec., 29.789 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.301157 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 771097 to 0 rows (from 290.456 MiB) in 9.314 sec. (82793.378 rows/sec., 31.187 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.301199 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Aggregated. 581632 to 0 rows (from 218.717 MiB) in 9.314 sec. (62450.351 rows/sec., 23.484 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.301247 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Total aggregated. 16369728 rows (from 6154.955 MiB) in 9.314 sec. (1757632.420 rows/sec., 660.863 MiB/sec.)\r\n[master] 2019.05.16 22:51:46.303332 [ 47 ] <Trace> ParallelAggregatingBlockInputStream: Will merge 198 temporary files of size 1568.19 MiB compressed, 10129.4 MiB uncompressed.\r\n[master] 2019.05.16 22:51:46.308983 {77c0f96e-57ee-40ee-b35b-86c2ae530dac} [ 92 ] <Error> executeQuery: Code: 439, e.displayText() = DB::Exception: Cannot schedule a task (version 19.6.2.11 (official build)) (from 192.168.1.103:40828) (in query: select stat_year,        stat_month,        out_buid,        out_shop_id,        in_shop_id,        datasource,        venderid,        categorytreeid,        categoryid,        goodsid,        logistics,        buntype,        dctype,        shopformid,        sum(rt_qty),        sum(rt_cost),        sum(rt_taxcost),        max(rt_shops),        sum(rt_drygood_qty),        sum(rt_drygood_cost),        sum(rt_drygood_boxes),        max(rt_drygood_shops),        sum(rt_fresh_qty),        sum(rt_fresh_cost),        max(rt_fresh_shops),        sum(rt_supshop_cost),        sum(rt_supshop_qty),        sum(rt_supshop_boxes),        max(rt_supshop_shops),        sum(rt_smallshop_cost),        sum(rt_smallshop_qty),        sum(rt_smallshop_boxes),        max(rt_smallshop_shops),        sum(rt_dc_cost),        sum(rt_dc_qty),        sum(rt_dc_boxes),        max(rt_dc_shops),        sum(rt_drygood_supshop_cost),        sum(rt_drygood_supshop_qty),        sum(rt_drygood_supshop_boxes),        max(rt_drygood_supshop_shops),        sum(rt_drygood_smallshop_cost),        sum(rt_drygood_smallshop_qty),        sum(rt_drygood_smallshop_boxes),        max(rt_drygood_smallshop_shops),        sum(rt_drygood_dc_cost),        sum(rt_drygood_dc_qty),        sum(rt_drygood_dc_boxes),        max(rt_drygood_dc_shops),        sum(rt_fresh_supshop_cost),        sum(rt_fresh_supshop_qty),        max(rt_fresh_supshop_shops),        sum(rt_fresh_smallshop_cost),        sum(rt_fresh_smallshop_qty),        max(rt_fresh_smallshop_shops),        sum(rt_fresh_dc_cost),        sum(rt_fresh_dc_qty),        max(rt_fresh_dc_shops) from dw_hr.fct_rt_dc_shop_sku_vender_day_test frdssvd where stat_day >= toDate('2016-01-01')   and stat_day < addMonths(toDate('2016-01-01'), 1) group by stat_year,          stat_month,          out_buid,          out_shop_id,          in_shop_id,          datasource,          venderid,          categorytreeid,          categoryid,          goodsid,          logistics,          buntype,          dctype,          shopformid;), Stack trace:\r\n\r\n0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x767c3f6]\r\n1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x39294a2]\r\n2. /usr/bin/clickhouse-server() [0x7681a35]\r\n3. /usr/bin/clickhouse-server(void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)+0x431) [0x7686a41]\r\n4. /usr/bin/clickhouse-server(ThreadPoolImpl<ThreadFromGlobalPool>::schedule(std::function<void ()>, int)+0x5b) [0x7686fab]\r\n5. /usr/bin/clickhouse-server(DB::MergingAggregatedMemoryEfficientBlockInputStream::getNextBlocksToMerge[abi:cxx11]()+0x163) [0x6fa4fb3]\r\n6. /usr/bin/clickhouse-server(DB::MergingAggregatedMemoryEfficientBlockInputStream::mergeThread(std::shared_ptr<DB::ThreadGroupStatus>)+0x10f) [0x6fa76bf]\r\n7. /usr/bin/clickhouse-server() [0x6fa863d]\r\n8. /usr/bin/clickhouse-server(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0x1ab) [0x76831ab]\r\n9. /usr/bin/clickhouse-server(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x3c) [0x76843cc]\r\n10. /usr/bin/clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x1ab) [0x768238b]\r\n11. /usr/bin/clickhouse-server() [0xb5488bf]\r\n12. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76ba) [0x7fdb0f57b6ba]\r\n13. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7fdb0eb9c41d]\r\n\r\nReceived exception from server (version 19.6.2):\r\nCode: 439. DB::Exception: Received from 192.168.1.103:9000. DB::Exception: Cannot schedule a task. \r\n\r\n0 rows in set. Elapsed: 9.388 sec. Processed 16.37 million rows, 6.49 GB (1.74 million rows/s., 690.92 MB/s.) \r\n\n@proller \r\n",
  "created_at": "2019-06-29T22:47:00Z",
  "modified_files": [
    "dbms/src/Common/ThreadPool.cpp"
  ],
  "modified_test_files": [
    "dbms/src/Common/tests/CMakeLists.txt",
    "b/dbms/src/Common/tests/gtest_shell_command.cpp",
    "dbms/src/Common/tests/thread_pool.cpp",
    "b/dbms/src/Common/tests/gtest_thread_pool_limit.cpp",
    "dbms/src/Common/tests/thread_pool_2.cpp",
    "b/dbms/src/Common/tests/gtest_thread_pool_schedule_exception.cpp",
    "dbms/src/Common/tests/shell_command_test.cpp",
    "dbms/src/Common/tests/thread_pool_3.cpp"
  ]
}