{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63024,
  "instance_id": "ClickHouse__ClickHouse-63024",
  "issue_numbers": [
    "62602"
  ],
  "base_commit": "e6f97fd4c72a8b514e39808a4160cfc5fcdb551b",
  "patch": "diff --git a/src/Processors/Merges/Algorithms/MergingSortedAlgorithm.cpp b/src/Processors/Merges/Algorithms/MergingSortedAlgorithm.cpp\nindex 1debfcec8e0a..408d9a16c31e 100644\n--- a/src/Processors/Merges/Algorithms/MergingSortedAlgorithm.cpp\n+++ b/src/Processors/Merges/Algorithms/MergingSortedAlgorithm.cpp\n@@ -47,16 +47,6 @@ void MergingSortedAlgorithm::addInput()\n     cursors.emplace_back();\n }\n \n-static void prepareChunk(Chunk & chunk)\n-{\n-    auto num_rows = chunk.getNumRows();\n-    auto columns = chunk.detachColumns();\n-    for (auto & column : columns)\n-        column = column->convertToFullColumnIfConst();\n-\n-    chunk.setColumns(std::move(columns), num_rows);\n-}\n-\n void MergingSortedAlgorithm::initialize(Inputs inputs)\n {\n     current_inputs = std::move(inputs);\n@@ -68,7 +58,7 @@ void MergingSortedAlgorithm::initialize(Inputs inputs)\n         if (!chunk)\n             continue;\n \n-        prepareChunk(chunk);\n+        convertToFullIfConst(chunk);\n         cursors[source_num] = SortCursorImpl(header, chunk.getColumns(), description, source_num);\n     }\n \n@@ -92,7 +82,7 @@ void MergingSortedAlgorithm::initialize(Inputs inputs)\n \n void MergingSortedAlgorithm::consume(Input & input, size_t source_num)\n {\n-    prepareChunk(input.chunk);\n+    convertToFullIfConst(input.chunk);\n     current_inputs[source_num].swap(input);\n     cursors[source_num].reset(current_inputs[source_num].chunk.getColumns(), header);\n \ndiff --git a/src/Processors/Transforms/SortingTransform.cpp b/src/Processors/Transforms/SortingTransform.cpp\nindex 3d6bad6ed069..8e7a526864db 100644\n--- a/src/Processors/Transforms/SortingTransform.cpp\n+++ b/src/Processors/Transforms/SortingTransform.cpp\n@@ -39,6 +39,9 @@ MergeSorter::MergeSorter(const Block & header, Chunks chunks_, SortDescription &\n         /// which can be inefficient.\n         convertToFullIfSparse(chunk);\n \n+        /// Convert to full column, because some cursors expect non-contant columns\n+        convertToFullIfConst(chunk);\n+\n         cursors.emplace_back(header, chunk.getColumns(), description, chunk_index);\n         has_collation |= cursors.back().has_collation;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03132_jit_sort_description_crash_fix.reference b/tests/queries/0_stateless/03132_jit_sort_description_crash_fix.reference\nnew file mode 100644\nindex 000000000000..2eb9621ad838\n--- /dev/null\n+++ b/tests/queries/0_stateless/03132_jit_sort_description_crash_fix.reference\n@@ -0,0 +1,25 @@\n+5\n+--\n+5\n+--\n+2\t5\n+2\t5\n+\n+2\t5\n+--\n+2\t5\n+2\t5\n+\n+2\t5\n+--\n+1\n+1\n+1\n+1\n+1\n+--\n+1\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/03132_jit_sort_description_crash_fix.sql b/tests/queries/0_stateless/03132_jit_sort_description_crash_fix.sql\nnew file mode 100644\nindex 000000000000..f3b48afb4fb7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03132_jit_sort_description_crash_fix.sql\n@@ -0,0 +1,47 @@\n+SET allow_deprecated_syntax_for_merge_tree = 1;\n+SET compile_sort_description = 1;\n+SET min_count_to_compile_sort_description = 0;\n+\n+DROP TABLE IF EXISTS test1_00395;\n+CREATE TABLE test1_00395\n+(\n+    col1 UInt64,\n+    col2 Nullable(UInt64),\n+    col3 String,\n+    col4 Nullable(String),\n+    col5 Array(UInt64),\n+    col6 Array(Nullable(UInt64)),\n+    col7 Array(String),\n+    col8 Array(Nullable(String)),\n+    d Date\n+) Engine = MergeTree(d, (col1, d), 8192);\n+\n+INSERT INTO test1_00395 VALUES (1, 1, 'a', 'a', [1], [1], ['a'], ['a'], '2000-01-01');\n+INSERT INTO test1_00395 VALUES (1, NULL, 'a', 'a', [1], [1], ['a'], ['a'], '2000-01-01');\n+INSERT INTO test1_00395 VALUES (1, 1, 'a', NULL, [1], [1], ['a'], ['a'], '2000-01-01');\n+INSERT INTO test1_00395 VALUES (1, 1, 'a', 'a', [1], [NULL], ['a'], ['a'], '2000-01-01');\n+INSERT INTO test1_00395 VALUES (1, 1, 'a', 'a', [1], [1], ['a'], [NULL], '2000-01-01');\n+\n+SELECT count(greatest(multiIf(1, 2, toNullable(NULL), 3, 4))) FROM test1_00395 WHERE toNullable(27) GROUP BY col1 ORDER BY multiIf(27, 1, multiIf(materialize(1), toLowCardinality(2), 3, 1, 4), NULL, 4) ASC NULLS LAST, col1 DESC;\n+\n+SELECT '--';\n+\n+SELECT count(greatest(multiIf(1, 2, toNullable(NULL), 3, 4))) FROM test1_00395 WHERE toNullable(27) GROUP BY col1 ORDER BY multiIf(27, 1, multiIf(materialize(1), toLowCardinality(2), 3, 1, 4), NULL, 4) ASC NULLS LAST, col1 DESC;\n+\n+SELECT '--';\n+\n+SELECT multiIf(1, 2, NULL, 3, 4), count(greatest(multiIf(1, 2, NULL, toUInt256(3), 4), multiIf(1, 2, NULL, 3, 4))) FROM test1_00395 GROUP BY col1 WITH CUBE WITH TOTALS ORDER BY multiIf(27, 1, multiIf(materialize(1), toLowCardinality(2), 3, 1, 4), NULL, 4) ASC NULLS LAST;\n+\n+SELECT '--';\n+\n+SELECT multiIf(1, 2, NULL, 3, 4), count(greatest(multiIf(1, 2, NULL, toUInt256(3), 4), multiIf(1, 2, NULL, 3, 4))) FROM test1_00395 GROUP BY col1 WITH CUBE WITH TOTALS ORDER BY multiIf(27, 1, multiIf(materialize(1), toLowCardinality(2), 3, 1, 4), NULL, 4) ASC NULLS LAST;\n+\n+SELECT '--';\n+\n+SELECT col1 FROM test1_00395 ORDER BY multiIf(27, 1, multiIf(materialize(1), toLowCardinality(2), 3, 1, 4), NULL, 4) ASC;\n+\n+SELECT '--';\n+\n+SELECT col1 FROM test1_00395 ORDER BY multiIf(27, 1, multiIf(materialize(1), toLowCardinality(2), 3, 1, 4), NULL, 4) ASC;\n+\n+DROP TABLE test1_00395;\n",
  "problem_statement": "JIT: Logical error: Input columns should not be constant\nhttps://s3.amazonaws.com/clickhouse-test-reports/62266/b5ff1c0a6e258354feed60b3662eb3134627c0b8/ast_fuzzer__ubsan_.html\r\n\r\n```\r\n12000781:2024.04.12 15:25:14.035475 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Debug> executeQuery: (from [::ffff:127.0.0.1]:33404) (comment: /workspace/ch/tests/queries/0_stateless/02343_group_by_use_nulls_distributed.sql) SELECT sum(number) IGNORE NULLS AS val FROM remote('127.0.0.{2,3}', numbers(10)) GROUP BY number, number % 2 WITH TOTALS ORDER BY toNullable(34) ASC, 'size0' ASC NULLS FIRST, multiIf(1, toNullable(3), count(multiIf(1, toUInt256(3), toUInt128(0))) IGNORE NULLS) DESC NULLS LAST, (number, number % 2, val) ASC SETTINGS group_by_use_nulls = 0 (stage: Complete)\r\n12000782:2024.04.12 15:25:14.035783 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> ContextAccess (default): Access granted: CREATE TEMPORARY TABLE, REMOTE ON *.*\r\n12000783:2024.04.12 15:25:14.036310 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Connection (127.0.0.2:9000): Connecting. Database: (not specified). User: default\r\n12000789:2024.04.12 15:25:14.036600 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Connection (127.0.0.2:9000): Connected to ClickHouse server version 24.4.1.\r\n12000791:2024.04.12 15:25:14.037308 [ 1251 ] {c98ac149-90f9-4b53-8afa-d1cc5b41dfff} <Debug> executeQuery: (from [::ffff:127.0.0.1]:57588, initial_query_id: c0e1a370-d23d-4326-b7d4-65f4130437d8) (comment: /workspace/ch/tests/queries/0_stateless/02343_group_by_use_nulls_distributed.sql) DESC TABLE numbers(10) (stage: Complete)\r\n12000794:2024.04.12 15:25:14.039213 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM _table_function.remote AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC SETTINGS group_by_use_nulls = 0 to stage Complete\r\n12000795:2024.04.12 15:25:14.039374 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM _table_function.remote AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC SETTINGS group_by_use_nulls = 0 from stage FetchColumns to stage Complete\r\n12000796:2024.04.12 15:25:14.039959 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM remote('127.0.0.{2,3}', numbers(10) AS __table2) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC SETTINGS group_by_use_nulls = 0 to stage Complete\r\n12000797:2024.04.12 15:25:14.040229 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM numbers(10) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC to stage WithMergeableState only analyze\r\n12000798:2024.04.12 15:25:14.040358 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM numbers(10) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC from stage FetchColumns to stage WithMergeableState only analyze\r\n12000799:2024.04.12 15:25:14.040822 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM numbers(10) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC to stage WithMergeableState only analyze\r\n12000800:2024.04.12 15:25:14.040948 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM numbers(10) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC from stage FetchColumns to stage WithMergeableState only analyze\r\n12000801:2024.04.12 15:25:14.041370 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM numbers(10) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC to stage WithMergeableState only analyze\r\n12000802:2024.04.12 15:25:14.041501 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM numbers(10) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC from stage FetchColumns to stage WithMergeableState only analyze\r\n12000803:2024.04.12 15:25:14.041914 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM remote('127.0.0.{2,3}', numbers(10) AS __table2) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC SETTINGS group_by_use_nulls = 0 to stage WithMergeableState only analyze\r\n12000804:2024.04.12 15:25:14.042060 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM remote('127.0.0.{2,3}', numbers(10) AS __table2) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC SETTINGS group_by_use_nulls = 0 from stage FetchColumns to stage WithMergeableState only analyze\r\n12000805:2024.04.12 15:25:14.042383 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Planner: Query SELECT sum(__table1.number) IGNORE NULLS AS val FROM remote('127.0.0.{2,3}', numbers(10) AS __table2) AS __table1 GROUP BY __table1.number, __table1.number % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, __table1.number ASC, __table1.number % 2 ASC, sum(__table1.number) IGNORE NULLS ASC SETTINGS group_by_use_nulls = 0 from stage WithMergeableState to stage Complete\r\n12000806:2024.04.12 15:25:14.043685 [ 164 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> SortDescription: Compile sort description Nullable(UInt64) -1 -1UInt64 1 1UInt8 1 1UInt64 1 1\r\n12000807:2024.04.12 15:25:14.052478 [ 1230 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Connection (127.0.0.3:9000): Connecting. Database: (not specified). User: default\r\n12000813:2024.04.12 15:25:14.052821 [ 1224 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Debug> Connection (127.0.0.2:9000): Sent data for 2 scalars, total 2 rows in 6.1289e-05 sec., 31875 rows/sec., 68.00 B (1.03 MiB/sec.), compressed 0.4594594594594595 times to 148.00 B (2.25 MiB/sec.)\r\n12000814:2024.04.12 15:25:14.052899 [ 1230 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Connection (127.0.0.3:9000): Connected to ClickHouse server version 24.4.1.\r\n12000816:2024.04.12 15:25:14.053128 [ 1230 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Debug> Connection (127.0.0.3:9000): Sent data for 2 scalars, total 2 rows in 4.8409e-05 sec., 40614 rows/sec., 68.00 B (1.32 MiB/sec.), compressed 0.4594594594594595 times to 148.00 B (2.86 MiB/sec.)\r\n12000818:2024.04.12 15:25:14.053411 [ 1251 ] {378cc114-c68d-4624-9b66-4832060b1c81} <Debug> executeQuery: (from [::ffff:127.0.0.1]:57588, initial_query_id: c0e1a370-d23d-4326-b7d4-65f4130437d8) (comment: /workspace/ch/tests/queries/0_stateless/02343_group_by_use_nulls_distributed.sql) SELECT sum(`__table1`.`number`) IGNORE NULLS AS `val` FROM numbers(10) AS `__table1` GROUP BY `__table1`.`number`, `__table1`.`number` % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, `__table1`.`number` ASC, `__table1`.`number` % 2 ASC, sum(`__table1`.`number`) IGNORE NULLS ASC (stage: WithMergeableState)\r\n12000819:2024.04.12 15:25:14.053744 [ 1250 ] {1ae44249-7317-4617-ad7c-ed90a593c004} <Debug> executeQuery: (from [::ffff:127.0.0.1]:55874, initial_query_id: c0e1a370-d23d-4326-b7d4-65f4130437d8) (comment: /workspace/ch/tests/queries/0_stateless/02343_group_by_use_nulls_distributed.sql) SELECT sum(`__table1`.`number`) IGNORE NULLS AS `val` FROM numbers(10) AS `__table1` GROUP BY `__table1`.`number`, `__table1`.`number` % 2 WITH TOTALS ORDER BY _CAST(34, 'Nullable(UInt8)') ASC, 'size0' ASC NULLS FIRST, multiIf(1, _CAST(3, 'Nullable(UInt8)'), count() IGNORE NULLS) DESC NULLS LAST, `__table1`.`number` ASC, `__table1`.`number` % 2 ASC, sum(`__table1`.`number`) IGNORE NULLS ASC (stage: WithMergeableState)\r\n12000838:2024.04.12 15:25:14.056173 [ 1230 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Trace> Aggregator: Merging partially aggregated blocks (bucket = -1).\r\n12000839:2024.04.12 15:25:14.056233 [ 1230 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Debug> Aggregator: Merged partially aggregated blocks for bucket #-1. Got 10 rows, 250.00 B from 20 source rows in 3.983e-05 sec. (251067.035 rows/sec., 5.99 MiB/sec.)\r\n12000840:2024.04.12 15:25:14.056437 [ 1230 ] {c0e1a370-d23d-4326-b7d4-65f4130437d8} <Fatal> : Logical error: 'Input columns should not be constant'.\r\n```\r\n\r\n(for some reason, there's no stacktrace)\n",
  "hints_text": "How to reproduce:\r\nSetup:\r\n```\r\nset allow_deprecated_syntax_for_merge_tree=1;\r\nCREATE TABLE test1_00395(\r\ncol1 UInt64, col2 Nullable(UInt64),\r\ncol3 String, col4 Nullable(String),\r\ncol5 Array(UInt64), col6 Array(Nullable(UInt64)),\r\ncol7 Array(String), col8 Array(Nullable(String)),\r\nd Date) Engine = MergeTree(d, (col1, d), 8192);\r\n\r\nINSERT INTO test1_00395 VALUES (1, 1, 'a', 'a', [1], [1], ['a'], ['a'], '2000-01-01');\r\nINSERT INTO test1_00395 VALUES (1, NULL, 'a', 'a', [1], [1], ['a'], ['a'], '2000-01-01');\r\nINSERT INTO test1_00395 VALUES (1, 1, 'a', NULL, [1], [1], ['a'], ['a'], '2000-01-01');\r\nINSERT INTO test1_00395 VALUES (1, 1, 'a', 'a', [1], [NULL], ['a'], ['a'], '2000-01-01');\r\nINSERT INTO test1_00395 VALUES (1, 1, 'a', 'a', [1], [1], ['a'], [NULL], '2000-01-01');\r\n```\r\n\r\nQuery:\r\n```\r\nSELECT count(greatest(multiIf(1, 2, toNullable(NULL), 3, 4))) FROM test1_00395 WHERE toNullable(27) GROUP BY col1 ORDER BY multiIf(27, 1, multiIf(materialize(1), toLowCardinality(2), 3, 1, 4), NULL, 4) ASC NULLS LAST, col1 DESC\r\n```\r\n\r\nIt reproduced after 3-4 execution of this query. Disabling setting `compile_sort_description` fixes the issue.\r\n\r\nStacktrace:\r\n```\r\nReceived exception:\r\nCode: 49. DB::Exception: Input columns should not be constant: While executing MergeSortingTransform. (LOGICAL_ERROR), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./build_docker/./src/Common/Exception.cpp:97: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000ca422fb\r\n1. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000007652cc3\r\n2. ./src/Interpreters/JIT/compileFunction.cpp:52: DB::SortCursorImpl::reset(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, DB::Block const&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul>*) @ 0x0000000010d97c98\r\n3. ./src/Core/SortCursor.h:92: DB::SortCursorImpl::SortCursorImpl(DB::Block const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, DB::SortDescription const&, unsigned long, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul>*) @ 0x00000000124cb52d\r\n4. ./contrib/llvm-project/libcxx/include/vector:1580: DB::MergeSorter::MergeSorter(DB::Block const&, std::vector<DB::Chunk, std::allocator<DB::Chunk>>, DB::SortDescription&, unsigned long, unsigned long) @ 0x00000000124ebd24\r\n5. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:0: DB::MergeSortingTransform::generate() @ 0x00000000124dbe8d\r\n6. ./build_docker/./src/Processors/Transforms/SortingTransform.cpp:354: DB::SortingTransform::work() @ 0x00000000124f2818\r\n7. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::ExecutionThreadContext::executeTask() @ 0x00000000122410fa\r\n8. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000012235650\r\n9. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:833: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000012236d78\r\n10. ./base/base/../base/wide_integer_impl.h:817: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false, true>, void*>) @ 0x000000000caf0e59\r\n11. ./build_docker/./src/Common/ThreadPool.cpp:0: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000caf46ea\r\n12. ./base/base/../base/wide_integer_impl.h:817: void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000caf34ed\r\n13. ? @ 0x00007fed03494ac3\r\n14. ? @ 0x00007fed03526850\r\n\r\n```\r\nCC: @kitaisreal ",
  "created_at": "2024-04-26T10:41:53Z",
  "modified_files": [
    "src/Processors/Merges/Algorithms/MergingSortedAlgorithm.cpp",
    "src/Processors/Transforms/SortingTransform.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03132_jit_sort_description_crash_fix.reference",
    "b/tests/queries/0_stateless/03132_jit_sort_description_crash_fix.sql"
  ]
}