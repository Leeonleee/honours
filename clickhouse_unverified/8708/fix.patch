diff --git a/dbms/src/Functions/bitCount.cpp b/dbms/src/Functions/bitCount.cpp
new file mode 100644
index 000000000000..1e17d52ab602
--- /dev/null
+++ b/dbms/src/Functions/bitCount.cpp
@@ -0,0 +1,45 @@
+#include <ext/bit_cast.h>
+#include <Functions/FunctionFactory.h>
+#include <Functions/FunctionUnaryArithmetic.h>
+
+
+namespace DB
+{
+
+template <typename A>
+struct BitCountImpl
+{
+    using ResultType = UInt8;
+
+    static inline ResultType apply(A a)
+    {
+        /// We count bits in the value representation in memory. For example, we support floats.
+        /// We need to avoid sign-extension when converting signed numbers to larger type. So, uint8_t(-1) has 8 bits.
+
+        return __builtin_popcountll(ext::bit_cast<unsigned long long>(a));
+    }
+
+#if USE_EMBEDDED_COMPILER
+    static constexpr bool compilable = false;
+#endif
+};
+
+struct NameBitCount { static constexpr auto name = "bitCount"; };
+using FunctionBitCount = FunctionUnaryArithmetic<BitCountImpl, NameBitCount, false /* is injective */>;
+
+/// The function has no ranges of monotonicity.
+template <> struct FunctionUnaryArithmeticMonotonicity<NameBitCount>
+{
+    static bool has() { return false; }
+    static IFunction::Monotonicity get(const Field &, const Field &)
+    {
+        return {};
+    }
+};
+
+void registerFunctionBitCount(FunctionFactory & factory)
+{
+    factory.registerFunction<FunctionBitCount>();
+}
+
+}
diff --git a/dbms/src/Functions/registerFunctionsArithmetic.cpp b/dbms/src/Functions/registerFunctionsArithmetic.cpp
index eb68fc32fa15..88350b4fac74 100644
--- a/dbms/src/Functions/registerFunctionsArithmetic.cpp
+++ b/dbms/src/Functions/registerFunctionsArithmetic.cpp
@@ -20,6 +20,7 @@ void registerFunctionBitShiftLeft(FunctionFactory & factory);
 void registerFunctionBitShiftRight(FunctionFactory & factory);
 void registerFunctionBitRotateLeft(FunctionFactory & factory);
 void registerFunctionBitRotateRight(FunctionFactory & factory);
+void registerFunctionBitCount(FunctionFactory & factory);
 void registerFunctionLeast(FunctionFactory & factory);
 void registerFunctionGreatest(FunctionFactory & factory);
 void registerFunctionBitTest(FunctionFactory & factory);
@@ -58,6 +59,7 @@ void registerFunctionsArithmetic(FunctionFactory & factory)
     registerFunctionBitShiftRight(factory);
     registerFunctionBitRotateLeft(factory);
     registerFunctionBitRotateRight(factory);
+    registerFunctionBitCount(factory);
     registerFunctionLeast(factory);
     registerFunctionGreatest(factory);
     registerFunctionBitTest(factory);
