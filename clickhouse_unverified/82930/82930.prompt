You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Logical error: 'check_invariant()'
### Describe the bug

Easy to reproduce.

### How to reproduce

I only reproduce it in a debug build:

```sql
CREATE TABLE t0 (c0 Int) ENGINE = Memory;
CREATE VIEW v0 AS (SELECT 1 AS a0, (1) IN a0 FROM t0 tx JOIN t0 ty ON 1 CROSS JOIN t0 tz);
```
Only happens with the new analyzer enabled, and when creating a view.

### Error message and/or stacktrace

Stack trace:
```
<Fatal> : Logical error: 'check_invariant()'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. src/Common/StackTrace.cpp:389: StackTrace::StackTrace() @ 0x00000000137820c4
1. src/Common/Exception.cpp:55: DB::abortOnFailedAssertion(String const&) @ 0x00000000136ea895
2. src/Analyzer/Resolve/IdentifierLookup.h:121: DB::IdentifierResolver::tryResolveIdentifierFromCrossJoin(DB::IdentifierLookup const&, std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000019830cdb
3. src/Analyzer/Resolve/IdentifierResolver.cpp:1383: DB::IdentifierResolver::tryResolveIdentifierFromJoinTreeNode(DB::IdentifierLookup const&, std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001983114f
4. src/Analyzer/Resolve/IdentifierResolver.cpp:0: DB::IdentifierResolver::tryResolveIdentifierFromJoinTree(DB::IdentifierLookup const&, DB::IdentifierResolveScope&) @ 0x0000000019834bf1
5. src/Analyzer/Resolve/QueryAnalyzer.cpp:1517: DB::QueryAnalyzer::tryResolveIdentifier(DB::IdentifierLookup const&, DB::IdentifierResolveScope&, DB::IdentifierResolveContext) @ 0x000000001958b0ea
6. src/Analyzer/Resolve/QueryAnalyzer.cpp:3807: DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000001957bd01
7. src/Analyzer/Resolve/QueryAnalyzer.cpp:4091: DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000001957a291
8. src/Analyzer/Resolve/QueryAnalyzer.cpp:2998: DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000001959225d
9. src/Analyzer/Resolve/QueryAnalyzer.cpp:3940: DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000001957af5e
10. src/Analyzer/Resolve/QueryAnalyzer.cpp:4091: DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000001957a291
11. src/Analyzer/Resolve/QueryAnalyzer.cpp:4415: DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x00000000195a5e72
12. src/Analyzer/Resolve/QueryAnalyzer.cpp:5774: DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x00000000195743fe
13. src/Analyzer/Resolve/QueryAnalyzer.cpp:181: DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000019573414
14. src/Analyzer/Resolve/QueryAnalysisPass.cpp:18: DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000019572bee
15. src/Analyzer/QueryTreePassManager.cpp:187: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x00000000195d2833
16. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:165: DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000001a15c247
17. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:182: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001a15a9ed
18. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:219: DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x000000001a15c506
19. src/Interpreters/InterpreterCreateQuery.cpp:962: DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001a0b556b
20. src/Interpreters/InterpreterCreateQuery.cpp:1674: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001a0beb8f
21. src/Interpreters/InterpreterCreateQuery.cpp:2370: DB::InterpreterCreateQuery::execute() @ 0x000000001a0cc272
22. src/Interpreters/executeQuery.cpp:1561: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000001a435543
23. src/Interpreters/executeQuery.cpp:1769: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001a430d1b
24. src/Server/TCPHandler.cpp:722: DB::TCPHandler::runImpl() @ 0x000000001c1f3232
25. src/Server/TCPHandler.cpp:2729: DB::TCPHandler::run() @ 0x000000001c20c864
26. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000020532267
27. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000020532765
28. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000204dac5f
29. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000204d8811
30. start_thread @ 0x00000000000a2ef1
31. __clone3 @ 0x000000000013445c
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
