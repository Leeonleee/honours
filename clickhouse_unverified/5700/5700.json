{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 5700,
  "instance_id": "ClickHouse__ClickHouse-5700",
  "issue_numbers": [
    "5620"
  ],
  "base_commit": "4cc9f632a0ed84bdf9d8549a5c26bebccf5e622b",
  "patch": "diff --git a/dbms/src/Core/Settings.h b/dbms/src/Core/Settings.h\nindex 0cd132ef9ed5..12effac1a283 100644\n--- a/dbms/src/Core/Settings.h\n+++ b/dbms/src/Core/Settings.h\n@@ -193,7 +193,7 @@ struct Settings : public SettingsCollection<Settings>\n     M(SettingUInt64, input_format_allow_errors_num, 0, \"Maximum absolute amount of errors while reading text formats (like CSV, TSV). In case of error, if both absolute and relative values are non-zero, and at least absolute or relative amount of errors is lower than corresponding value, will skip until next line and continue.\") \\\n     M(SettingFloat, input_format_allow_errors_ratio, 0, \"Maximum relative amount of errors while reading text formats (like CSV, TSV). In case of error, if both absolute and relative values are non-zero, and at least absolute or relative amount of errors is lower than corresponding value, will skip until next line and continue.\") \\\n     \\\n-    M(SettingBool, join_use_nulls, 0, \"Use NULLs for non-joined rows of outer JOINs. If false, use default value of corresponding columns data type.\") \\\n+    M(SettingBool, join_use_nulls, 0, \"Use NULLs for non-joined rows of outer JOINs for types that can be inside Nullable. If false, use default value of corresponding columns data type.\") \\\n     \\\n     M(SettingJoinStrictness, join_default_strictness, JoinStrictness::ALL, \"Set default strictness in JOIN query. Possible values: empty string, 'ANY', 'ALL'. If empty, query without strictness will throw exception.\") \\\n     \\\ndiff --git a/dbms/src/Interpreters/AnalyzedJoin.cpp b/dbms/src/Interpreters/AnalyzedJoin.cpp\nindex 9fbe709ac94e..993434fca72f 100644\n--- a/dbms/src/Interpreters/AnalyzedJoin.cpp\n+++ b/dbms/src/Interpreters/AnalyzedJoin.cpp\n@@ -123,7 +123,7 @@ void AnalyzedJoin::calculateAvailableJoinedColumns(bool make_nullable)\n \n             joined_columns.insert(column_name);\n \n-            auto type = make_nullable ? makeNullable(column_type) : column_type;\n+            auto type = make_nullable && column_type->canBeInsideNullable() ? makeNullable(column_type) : column_type;\n             available_joined_columns.emplace_back(NameAndTypePair(column_name, std::move(type)), original_name);\n         }\n     }\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00956_join_use_nulls_with_array_column.reference b/dbms/tests/queries/0_stateless/00956_join_use_nulls_with_array_column.reference\nnew file mode 100644\nindex 000000000000..aa47d0d46d47\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00956_join_use_nulls_with_array_column.reference\n@@ -0,0 +1,2 @@\n+0\n+0\ndiff --git a/dbms/tests/queries/0_stateless/00956_join_use_nulls_with_array_column.sql b/dbms/tests/queries/0_stateless/00956_join_use_nulls_with_array_column.sql\nnew file mode 100644\nindex 000000000000..94fc3042f423\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00956_join_use_nulls_with_array_column.sql\n@@ -0,0 +1,3 @@\n+SET join_use_nulls = 1;\n+SELECT number FROM system.numbers ANY INNER JOIN (SELECT number, ['test'] FROM system.numbers LIMIT 1) USING (number) LIMIT 1;\n+SELECT number FROM system.numbers ANY LEFT  JOIN (SELECT number, ['test'] FROM system.numbers LIMIT 1) USING (number) LIMIT 1;\n\\ No newline at end of file\n",
  "problem_statement": "join_use_nulls does not work for Array columns.\nBecause Array columns cannot be Nullable.\r\nThe only solution is to output empty Array instead of NULL - as the `join_use_nulls` setting has no effect for Array columns. The same for all types that not `IDataType::canBeInsideNullable()`.\n",
  "hints_text": "@den-crane \n```\r\nSELECT number FROM system.numbers ANY INNER JOIN (SELECT number, ['test'] FROM system.numbers LIMIT 1) USING (number) LIMIT 1\r\n\r\n-- OK\r\n\r\nSELECT number FROM system.numbers ANY LEFT  JOIN (SELECT number, ['test'] FROM system.numbers LIMIT 1) USING (number) LIMIT 1\r\n\r\nCode: 43, e.displayText() = DB::Exception: Nested type Array(String) cannot be inside Nullable type (version 19.5.3.8 (official build))\r\n```",
  "created_at": "2019-06-20T13:16:39Z"
}