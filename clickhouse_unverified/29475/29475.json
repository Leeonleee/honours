{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 29475,
  "instance_id": "ClickHouse__ClickHouse-29475",
  "issue_numbers": [
    "29010"
  ],
  "base_commit": "8eaff1a02d473d16b8941af5191a7f0ebe6210fd",
  "patch": "diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex 1dd63695ad4d..182553cb91bb 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -1481,18 +1481,15 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n     const Settings & settings = context->getSettingsRef();\n     const ConstStoragePtr & storage = query_analyzer.storage();\n \n-    bool finalized = false;\n-    size_t where_step_num = 0;\n+    ssize_t prewhere_step_num = -1;\n+    ssize_t where_step_num = -1;\n+    ssize_t having_step_num = -1;\n \n     auto finalize_chain = [&](ExpressionActionsChain & chain)\n     {\n         chain.finalize();\n \n-        if (!finalized)\n-        {\n-            finalize(chain, where_step_num, query);\n-            finalized = true;\n-        }\n+        finalize(chain, prewhere_step_num, where_step_num, having_step_num, query);\n \n         chain.clear();\n     };\n@@ -1523,6 +1520,8 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n \n         if (auto actions = query_analyzer.appendPrewhere(chain, !first_stage, additional_required_columns_after_prewhere))\n         {\n+            /// Prewhere is always the first one.\n+            prewhere_step_num = 0;\n             prewhere_info = std::make_shared<PrewhereInfo>(actions, query.prewhere()->getColumnName());\n \n             if (allowEarlyConstantFolding(*prewhere_info->prewhere_actions, settings))\n@@ -1591,6 +1590,7 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n \n             if (query_analyzer.appendHaving(chain, only_types || !second_stage))\n             {\n+                having_step_num = chain.steps.size() - 1;\n                 before_having = chain.getLastActions();\n                 chain.addStep();\n             }\n@@ -1691,13 +1691,16 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n     checkActions();\n }\n \n-void ExpressionAnalysisResult::finalize(const ExpressionActionsChain & chain, size_t where_step_num, const ASTSelectQuery & query)\n+void ExpressionAnalysisResult::finalize(\n+    const ExpressionActionsChain & chain,\n+    ssize_t & prewhere_step_num,\n+    ssize_t & where_step_num,\n+    ssize_t & having_step_num,\n+    const ASTSelectQuery & query)\n {\n-    size_t next_step_i = 0;\n-\n-    if (hasPrewhere())\n+    if (prewhere_step_num >= 0)\n     {\n-        const ExpressionActionsChain::Step & step = *chain.steps.at(next_step_i++);\n+        const ExpressionActionsChain::Step & step = *chain.steps.at(prewhere_step_num);\n         prewhere_info->prewhere_actions->projectInput(false);\n \n         NameSet columns_to_remove;\n@@ -1710,12 +1713,21 @@ void ExpressionAnalysisResult::finalize(const ExpressionActionsChain & chain, si\n         }\n \n         columns_to_remove_after_prewhere = std::move(columns_to_remove);\n+        prewhere_step_num = -1;\n     }\n \n-    if (hasWhere())\n+    if (where_step_num >= 0)\n     {\n         where_column_name = query.where()->getColumnName();\n         remove_where_filter = chain.steps.at(where_step_num)->required_output.find(where_column_name)->second;\n+        where_step_num = -1;\n+    }\n+\n+    if (having_step_num >= 0)\n+    {\n+        having_column_name = query.having()->getColumnName();\n+        remove_having_filter = chain.steps.at(having_step_num)->required_output.find(having_column_name)->second;\n+        having_step_num = -1;\n     }\n }\n \ndiff --git a/src/Interpreters/ExpressionAnalyzer.h b/src/Interpreters/ExpressionAnalyzer.h\nindex 5e3a7af8e9ee..c785b085a570 100644\n--- a/src/Interpreters/ExpressionAnalyzer.h\n+++ b/src/Interpreters/ExpressionAnalyzer.h\n@@ -229,6 +229,8 @@ struct ExpressionAnalysisResult\n     ActionsDAGPtr before_where;\n     ActionsDAGPtr before_aggregation;\n     ActionsDAGPtr before_having;\n+    String having_column_name;\n+    bool remove_having_filter = false;\n     ActionsDAGPtr before_window;\n     ActionsDAGPtr before_order_by;\n     ActionsDAGPtr before_limit_by;\n@@ -274,7 +276,12 @@ struct ExpressionAnalysisResult\n \n     void removeExtraColumns() const;\n     void checkActions() const;\n-    void finalize(const ExpressionActionsChain & chain, size_t where_step_num, const ASTSelectQuery & query);\n+    void finalize(\n+        const ExpressionActionsChain & chain,\n+        ssize_t & prewhere_step_num,\n+        ssize_t & where_step_num,\n+        ssize_t & having_step_num,\n+        const ASTSelectQuery & query);\n };\n \n /// SelectQuery specific ExpressionAnalyzer part.\ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex 5fe9948f857f..e5adb03e08ef 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -1248,7 +1248,7 @@ void InterpreterSelectQuery::executeImpl(QueryPlan & query_plan, const BlockInpu\n                     {\n                         bool final = !query.group_by_with_rollup && !query.group_by_with_cube;\n                         executeTotalsAndHaving(\n-                            query_plan, expressions.hasHaving(), expressions.before_having, aggregate_overflow_row, final);\n+                            query_plan, expressions.hasHaving(), expressions.before_having, expressions.remove_having_filter, aggregate_overflow_row, final);\n                     }\n \n                     if (query.group_by_with_rollup)\n@@ -1262,11 +1262,11 @@ void InterpreterSelectQuery::executeImpl(QueryPlan & query_plan, const BlockInpu\n                             throw Exception(\n                                 \"WITH TOTALS and WITH ROLLUP or CUBE are not supported together in presence of HAVING\",\n                                 ErrorCodes::NOT_IMPLEMENTED);\n-                        executeHaving(query_plan, expressions.before_having);\n+                        executeHaving(query_plan, expressions.before_having, expressions.remove_having_filter);\n                     }\n                 }\n                 else if (expressions.hasHaving())\n-                    executeHaving(query_plan, expressions.before_having);\n+                    executeHaving(query_plan, expressions.before_having, expressions.remove_having_filter);\n             }\n             else if (query.group_by_with_totals || query.group_by_with_rollup || query.group_by_with_cube)\n                 throw Exception(\"WITH TOTALS, ROLLUP or CUBE are not supported without aggregation\", ErrorCodes::NOT_IMPLEMENTED);\n@@ -2133,10 +2133,10 @@ void InterpreterSelectQuery::executeMergeAggregated(QueryPlan & query_plan, bool\n }\n \n \n-void InterpreterSelectQuery::executeHaving(QueryPlan & query_plan, const ActionsDAGPtr & expression)\n+void InterpreterSelectQuery::executeHaving(QueryPlan & query_plan, const ActionsDAGPtr & expression, bool remove_filter)\n {\n     auto having_step\n-        = std::make_unique<FilterStep>(query_plan.getCurrentDataStream(), expression, getSelectQuery().having()->getColumnName(), false);\n+        = std::make_unique<FilterStep>(query_plan.getCurrentDataStream(), expression, getSelectQuery().having()->getColumnName(), remove_filter);\n \n     having_step->setStepDescription(\"HAVING\");\n     query_plan.addStep(std::move(having_step));\n@@ -2144,7 +2144,7 @@ void InterpreterSelectQuery::executeHaving(QueryPlan & query_plan, const Actions\n \n \n void InterpreterSelectQuery::executeTotalsAndHaving(\n-    QueryPlan & query_plan, bool has_having, const ActionsDAGPtr & expression, bool overflow_row, bool final)\n+    QueryPlan & query_plan, bool has_having, const ActionsDAGPtr & expression, bool remove_filter, bool overflow_row, bool final)\n {\n     const Settings & settings = context->getSettingsRef();\n \n@@ -2153,6 +2153,7 @@ void InterpreterSelectQuery::executeTotalsAndHaving(\n         overflow_row,\n         expression,\n         has_having ? getSelectQuery().having()->getColumnName() : \"\",\n+        remove_filter,\n         settings.totals_mode,\n         settings.totals_auto_threshold,\n         final);\ndiff --git a/src/Interpreters/InterpreterSelectQuery.h b/src/Interpreters/InterpreterSelectQuery.h\nindex aec3b0b8bd38..99c95a8d6248 100644\n--- a/src/Interpreters/InterpreterSelectQuery.h\n+++ b/src/Interpreters/InterpreterSelectQuery.h\n@@ -131,8 +131,8 @@ class InterpreterSelectQuery : public IInterpreterUnionOrSelectQuery\n     void executeAggregation(\n         QueryPlan & query_plan, const ActionsDAGPtr & expression, bool overflow_row, bool final, InputOrderInfoPtr group_by_info);\n     void executeMergeAggregated(QueryPlan & query_plan, bool overflow_row, bool final);\n-    void executeTotalsAndHaving(QueryPlan & query_plan, bool has_having, const ActionsDAGPtr & expression, bool overflow_row, bool final);\n-    void executeHaving(QueryPlan & query_plan, const ActionsDAGPtr & expression);\n+    void executeTotalsAndHaving(QueryPlan & query_plan, bool has_having, const ActionsDAGPtr & expression, bool remove_filter, bool overflow_row, bool final);\n+    void executeHaving(QueryPlan & query_plan, const ActionsDAGPtr & expression, bool remove_filter);\n     static void executeExpression(QueryPlan & query_plan, const ActionsDAGPtr & expression, const std::string & description);\n     /// FIXME should go through ActionsDAG to behave as a proper function\n     void executeWindow(QueryPlan & query_plan);\ndiff --git a/src/Processors/QueryPlan/TotalsHavingStep.cpp b/src/Processors/QueryPlan/TotalsHavingStep.cpp\nindex db82538d5a0f..4cac12639a89 100644\n--- a/src/Processors/QueryPlan/TotalsHavingStep.cpp\n+++ b/src/Processors/QueryPlan/TotalsHavingStep.cpp\n@@ -30,6 +30,7 @@ TotalsHavingStep::TotalsHavingStep(\n     bool overflow_row_,\n     const ActionsDAGPtr & actions_dag_,\n     const std::string & filter_column_,\n+    bool remove_filter_,\n     TotalsMode totals_mode_,\n     double auto_include_threshold_,\n     bool final_)\n@@ -38,11 +39,14 @@ TotalsHavingStep::TotalsHavingStep(\n             TotalsHavingTransform::transformHeader(\n                     input_stream_.header,\n                     actions_dag_.get(),\n+                    filter_column_,\n+                    remove_filter_,\n                     final_),\n             getTraits(!filter_column_.empty()))\n     , overflow_row(overflow_row_)\n     , actions_dag(actions_dag_)\n     , filter_column_name(filter_column_)\n+    , remove_filter(remove_filter_)\n     , totals_mode(totals_mode_)\n     , auto_include_threshold(auto_include_threshold_)\n     , final(final_)\n@@ -58,6 +62,7 @@ void TotalsHavingStep::transformPipeline(QueryPipeline & pipeline, const BuildQu\n         overflow_row,\n         expression_actions,\n         filter_column_name,\n+        remove_filter,\n         totals_mode,\n         auto_include_threshold,\n         final);\n@@ -85,7 +90,10 @@ static String totalsModeToString(TotalsMode totals_mode, double auto_include_thr\n void TotalsHavingStep::describeActions(FormatSettings & settings) const\n {\n     String prefix(settings.offset, ' ');\n-    settings.out << prefix << \"Filter column: \" << filter_column_name << '\\n';\n+    settings.out << prefix << \"Filter column: \" << filter_column_name;\n+    if (remove_filter)\n+        settings.out << \" (removed)\";\n+    settings.out << '\\n';\n     settings.out << prefix << \"Mode: \" << totalsModeToString(totals_mode, auto_include_threshold) << '\\n';\n \n     if (actions_dag)\ndiff --git a/src/Processors/QueryPlan/TotalsHavingStep.h b/src/Processors/QueryPlan/TotalsHavingStep.h\nindex bc053c96970b..1ad98a70a01f 100644\n--- a/src/Processors/QueryPlan/TotalsHavingStep.h\n+++ b/src/Processors/QueryPlan/TotalsHavingStep.h\n@@ -18,6 +18,7 @@ class TotalsHavingStep : public ITransformingStep\n             bool overflow_row_,\n             const ActionsDAGPtr & actions_dag_,\n             const std::string & filter_column_,\n+            bool remove_filter_,\n             TotalsMode totals_mode_,\n             double auto_include_threshold_,\n             bool final_);\n@@ -35,6 +36,7 @@ class TotalsHavingStep : public ITransformingStep\n     bool overflow_row;\n     ActionsDAGPtr actions_dag;\n     String filter_column_name;\n+    bool remove_filter;\n     TotalsMode totals_mode;\n     double auto_include_threshold;\n     bool final;\ndiff --git a/src/Processors/Transforms/TotalsHavingTransform.cpp b/src/Processors/Transforms/TotalsHavingTransform.cpp\nindex 9724d332f15e..c475b87e08f6 100644\n--- a/src/Processors/Transforms/TotalsHavingTransform.cpp\n+++ b/src/Processors/Transforms/TotalsHavingTransform.cpp\n@@ -28,13 +28,22 @@ void finalizeChunk(Chunk & chunk)\n     chunk.setColumns(std::move(columns), num_rows);\n }\n \n-Block TotalsHavingTransform::transformHeader(Block block, const ActionsDAG * expression, bool final)\n+Block TotalsHavingTransform::transformHeader(\n+    Block block,\n+    const ActionsDAG * expression,\n+    const std::string & filter_column_name,\n+    bool remove_filter,\n+    bool final)\n {\n     if (final)\n         finalizeBlock(block);\n \n     if (expression)\n+    {\n         block = expression->updateHeader(std::move(block));\n+        if (remove_filter)\n+            block.erase(filter_column_name);\n+    }\n \n     return block;\n }\n@@ -44,20 +53,19 @@ TotalsHavingTransform::TotalsHavingTransform(\n     bool overflow_row_,\n     const ExpressionActionsPtr & expression_,\n     const std::string & filter_column_,\n+    bool remove_filter_,\n     TotalsMode totals_mode_,\n     double auto_include_threshold_,\n     bool final_)\n-    : ISimpleTransform(header, transformHeader(header, expression_  ? &expression_->getActionsDAG() : nullptr, final_), true)\n+    : ISimpleTransform(header, transformHeader(header, expression_  ? &expression_->getActionsDAG() : nullptr, filter_column_, remove_filter_, final_), true)\n     , overflow_row(overflow_row_)\n     , expression(expression_)\n     , filter_column_name(filter_column_)\n+    , remove_filter(remove_filter_)\n     , totals_mode(totals_mode_)\n     , auto_include_threshold(auto_include_threshold_)\n     , final(final_)\n {\n-    if (!filter_column_name.empty())\n-        filter_column_pos = outputs.front().getHeader().getPositionByName(filter_column_name);\n-\n     finalized_header = getInputPort().getHeader();\n     finalizeBlock(finalized_header);\n \n@@ -67,10 +75,17 @@ TotalsHavingTransform::TotalsHavingTransform(\n         auto totals_header = finalized_header;\n         size_t num_rows = totals_header.rows();\n         expression->execute(totals_header, num_rows);\n+        filter_column_pos = totals_header.getPositionByName(filter_column_name);\n+        if (remove_filter)\n+            totals_header.erase(filter_column_name);\n         outputs.emplace_back(totals_header, this);\n     }\n     else\n+    {\n+        if (!filter_column_name.empty())\n+            filter_column_pos = finalized_header.getPositionByName(filter_column_name);\n         outputs.emplace_back(finalized_header, this);\n+    }\n \n     /// Initialize current totals with initial state.\n     current_totals.reserve(header.columns());\n@@ -167,9 +182,11 @@ void TotalsHavingTransform::transform(Chunk & chunk)\n         }\n \n         expression->execute(finalized_block, num_rows);\n+        ColumnPtr filter_column_ptr = finalized_block.getByPosition(filter_column_pos).column;\n+        if (remove_filter)\n+            finalized_block.erase(filter_column_name);\n         auto columns = finalized_block.getColumns();\n \n-        ColumnPtr filter_column_ptr = columns[filter_column_pos];\n         ConstantFilterDescription const_filter_description(*filter_column_ptr);\n \n         if (const_filter_description.always_true)\n@@ -270,6 +287,8 @@ void TotalsHavingTransform::prepareTotals()\n         size_t num_rows = totals.getNumRows();\n         auto block = finalized_header.cloneWithColumns(totals.detachColumns());\n         expression->execute(block, num_rows);\n+        if (remove_filter)\n+            block.erase(filter_column_name);\n         /// Note: after expression totals may have several rows if `arrayJoin` was used in expression.\n         totals = Chunk(block.getColumns(), num_rows);\n     }\ndiff --git a/src/Processors/Transforms/TotalsHavingTransform.h b/src/Processors/Transforms/TotalsHavingTransform.h\nindex d42543d311ae..03635054c653 100644\n--- a/src/Processors/Transforms/TotalsHavingTransform.h\n+++ b/src/Processors/Transforms/TotalsHavingTransform.h\n@@ -28,6 +28,7 @@ class TotalsHavingTransform : public ISimpleTransform\n         bool overflow_row_,\n         const ExpressionActionsPtr & expression_,\n         const std::string & filter_column_,\n+        bool remove_filter_,\n         TotalsMode totals_mode_,\n         double auto_include_threshold_,\n         bool final_);\n@@ -39,7 +40,7 @@ class TotalsHavingTransform : public ISimpleTransform\n     Status prepare() override;\n     void work() override;\n \n-    static Block transformHeader(Block block, const ActionsDAG * expression, bool final);\n+    static Block transformHeader(Block block, const ActionsDAG * expression, const std::string & filter_column_name, bool remove_filter, bool final);\n \n protected:\n     void transform(Chunk & chunk) override;\n@@ -55,6 +56,7 @@ class TotalsHavingTransform : public ISimpleTransform\n     bool overflow_row;\n     ExpressionActionsPtr expression;\n     String filter_column_name;\n+    bool remove_filter;\n     TotalsMode totals_mode;\n     double auto_include_threshold;\n     bool final;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/2025_having_filter_column.reference b/tests/queries/0_stateless/2025_having_filter_column.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/2025_having_filter_column.sql b/tests/queries/0_stateless/2025_having_filter_column.sql\nnew file mode 100644\nindex 000000000000..aab419adc160\n--- /dev/null\n+++ b/tests/queries/0_stateless/2025_having_filter_column.sql\n@@ -0,0 +1,40 @@\n+drop table if exists test;\n+\n+-- #29010\n+CREATE TABLE test\n+(\n+    d DateTime,\n+    a String,\n+    b UInt64\n+)\n+ENGINE = MergeTree\n+PARTITION BY toDate(d)\n+ORDER BY d;\n+\n+SELECT *\n+FROM (\n+    SELECT\n+        a,\n+        max((d, b)).2 AS value\n+    FROM test\n+    GROUP BY rollup(a)\n+)\n+WHERE a <> '';\n+\n+-- the same query, but after syntax optimization\n+SELECT\n+    a,\n+    value\n+FROM\n+(\n+    SELECT\n+        a,\n+        max((d, b)).2 AS value\n+    FROM test\n+    GROUP BY a\n+        WITH ROLLUP\n+    HAVING a != ''\n+)\n+WHERE a != '';\n+\n+drop table if exists test;\n",
  "problem_statement": "Query using GROUP BY ROLLUP fails on Block structure mismatch when selected field name matches column name\n**Describe what's wrong**\r\n\r\nQuery with rollup using same selected field name as the name of underlying column reports structure mismatch\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nyes\r\n\r\n**How to reproduce**\r\n\r\n`21.9.2.17`\r\n\r\n```sql\r\nCREATE TABLE test\r\n(\r\n    `d` DateTime,\r\n    `a` LowCardinality(String),\r\n    `b` UInt64\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY toDate(d)\r\nORDER BY d;\r\n\r\nSELECT *\r\nFROM (\r\n    SELECT\r\n        a,\r\n        max((d, b)).2 AS value\r\n    FROM test\r\n    GROUP BY rollup(a)\r\n)\r\nWHERE a <> '';\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThis used to return an ok result on v21.8\r\n\r\n**Error message and/or stacktrace**\r\n\r\n> Code: 352. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different columns:\r\n> notEquals(a, '') LowCardinality(UInt8) ColumnLowCardinality(size = 0, UInt8(size = 0), ColumnUnique(size = 1, UInt8(size = 1)))\r\n> notEquals(a, '') LowCardinality(UInt8) Const(size = 0, ColumnLowCardinality(size = 1, UInt8(size = 1), ColumnUnique(size = 2, UInt8(size = 2)))). (AMBIGUOUS_COLUMN_NAME) (version 21.9.2.17 (official build))\r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2021-09-28T10:01:35Z",
  "modified_files": [
    "src/Interpreters/ExpressionAnalyzer.cpp",
    "src/Interpreters/ExpressionAnalyzer.h",
    "src/Interpreters/InterpreterSelectQuery.cpp",
    "src/Interpreters/InterpreterSelectQuery.h",
    "src/Processors/QueryPlan/TotalsHavingStep.cpp",
    "src/Processors/QueryPlan/TotalsHavingStep.h",
    "src/Processors/Transforms/TotalsHavingTransform.cpp",
    "src/Processors/Transforms/TotalsHavingTransform.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/2025_having_filter_column.sql"
  ]
}