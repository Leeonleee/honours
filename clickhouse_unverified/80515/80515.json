{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80515,
  "instance_id": "ClickHouse__ClickHouse-80515",
  "issue_numbers": [
    "72089"
  ],
  "base_commit": "ef9b37e2cee4457ee53ca71c788ad00cbeb2b787",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp b/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp\nindex c6423fbb4823..dd0080eea820 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp\n@@ -425,10 +425,12 @@ SortingInputOrder buildInputOrderFromSortDescription(\n         if (sort_column_description.collator)\n             break;\n \n-        /// Since sorting key columns are always sorted with NULLS LAST, reading in order\n-        /// supported only for ASC NULLS LAST (\"in order\"), and DESC NULLS FIRST (\"reverse\")\n-        const auto column_is_nullable = sorting_key.data_types[next_sort_key]->isNullable();\n-        if (column_is_nullable && sort_column_description.nulls_direction != sort_column_description.direction)\n+        /// Since sorting key columns are always sorted with\n+        // ASC NULLS LAST (\"in order\") or DESC NULLS FIRST (\"reverse\")\n+        /// supported only this direction, other cases are represented as nulls_direction==-1\n+        /// Also actual for floating point values NaN.\n+        const auto column_is_nullable = sorting_key.data_types[next_sort_key]->isNullable() || isFloat(*sorting_key.data_types[next_sort_key]);\n+        if (column_is_nullable && sort_column_description.nulls_direction == -1)\n             break;\n \n         /// Direction for current sort key.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.reference b/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.reference\nindex 4c1a3fd5c153..91dade3a7c4b 100644\n--- a/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.reference\n+++ b/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.reference\n@@ -44,7 +44,7 @@ select * from tab order by (a + b) * c, sin(a / b);\n select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b)) where explain like '%sort description%';\n   Prefix sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC\n   Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC\n-select * from tab order by (a + b) * c desc, sin(a / b) desc;\n+select * from tab order by (a + b) * c desc, sin(a / b) desc nulls first;\n 4\t4\t4\t4\n 4\t4\t4\t4\n 3\t3\t3\t3\n@@ -55,7 +55,7 @@ select * from tab order by (a + b) * c desc, sin(a / b) desc;\n 1\t1\t1\t1\n 0\t0\t0\t0\n 0\t0\t0\t0\n-select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc) where explain like '%sort description%';\n+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc nulls first) where explain like '%sort description%';\n   Prefix sort description: multiply(plus(a, b), c) DESC, sin(divide(a, b)) DESC\n   Result sort description: multiply(plus(a, b), c) DESC, sin(divide(a, b)) DESC\n -- Exact match, mixed direction\n@@ -168,7 +168,7 @@ select * from (explain plan actions = 1 select * from tab order by (a + b) * c,\n   Prefix sort description: multiply(plus(a, b), c) ASC\n   Result sort description: multiply(plus(a, b), c) ASC, intDiv(sin(divide(a, b)), 2) DESC\n -- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc;\n-select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';\n+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc nulls first) where explain like '%sort description%';\n   Prefix sort description: multiply(plus(a, b), c) DESC, intDiv(sin(divide(a, b)), 2) DESC\n   Result sort description: multiply(plus(a, b), c) DESC, intDiv(sin(divide(a, b)), 2) DESC\n -- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2);\ndiff --git a/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.sql b/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.sql\nindex 0421cadf868b..81f27f3c441e 100644\n--- a/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.sql\n+++ b/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.sql\n@@ -23,8 +23,8 @@ select * from (explain plan actions = 1 select * from tab order by (a + b) * c d\n select * from tab order by (a + b) * c, sin(a / b);\n select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b)) where explain like '%sort description%';\n \n-select * from tab order by (a + b) * c desc, sin(a / b) desc;\n-select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc) where explain like '%sort description%';\n+select * from tab order by (a + b) * c desc, sin(a / b) desc nulls first;\n+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc nulls first) where explain like '%sort description%';\n \n -- Exact match, mixed direction\n select * from tab order by (a + b) * c desc, sin(a / b);\n@@ -68,7 +68,7 @@ select * from (explain plan actions = 1 select * from tab order by (a + b) * c d\n select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';\n \n -- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc;\n-select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';\n+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc nulls first) where explain like '%sort description%';\n \n -- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2);\n select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2)) where explain like '%sort description%';\ndiff --git a/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.reference b/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.reference\nindex d8f2decba37e..3d94c5b5ebe1 100644\n--- a/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.reference\n+++ b/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.reference\n@@ -44,7 +44,7 @@ select * from tab order by (a + b) * c, sin(a / b);\n select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b)) where explain like '%sort description%';\n   Prefix sort description: multiply(plus(__table1.a, __table1.b), __table1.c) ASC, sin(divide(__table1.a, __table1.b)) ASC\n   Result sort description: multiply(plus(__table1.a, __table1.b), __table1.c) ASC, sin(divide(__table1.a, __table1.b)) ASC\n-select * from tab order by (a + b) * c desc, sin(a / b) desc;\n+select * from tab order by (a + b) * c desc, sin(a / b) desc nulls first;\n 4\t4\t4\t4\n 4\t4\t4\t4\n 3\t3\t3\t3\n@@ -55,7 +55,7 @@ select * from tab order by (a + b) * c desc, sin(a / b) desc;\n 1\t1\t1\t1\n 0\t0\t0\t0\n 0\t0\t0\t0\n-select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc) where explain like '%sort description%';\n+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc nulls first) where explain like '%sort description%';\n   Prefix sort description: multiply(plus(__table1.a, __table1.b), __table1.c) DESC, sin(divide(__table1.a, __table1.b)) DESC\n   Result sort description: multiply(plus(__table1.a, __table1.b), __table1.c) DESC, sin(divide(__table1.a, __table1.b)) DESC\n -- Exact match, mixed direction\n@@ -168,7 +168,7 @@ select * from (explain plan actions = 1 select * from tab order by (a + b) * c,\n   Prefix sort description: multiply(plus(__table1.a, __table1.b), __table1.c) ASC\n   Result sort description: multiply(plus(__table1.a, __table1.b), __table1.c) ASC, intDiv(sin(divide(__table1.a, __table1.b)), 2_UInt8) DESC\n -- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc;\n-select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';\n+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc nulls first) where explain like '%sort description%';\n   Prefix sort description: multiply(plus(__table1.a, __table1.b), __table1.c) DESC, intDiv(sin(divide(__table1.a, __table1.b)), 2_UInt8) DESC\n   Result sort description: multiply(plus(__table1.a, __table1.b), __table1.c) DESC, intDiv(sin(divide(__table1.a, __table1.b)), 2_UInt8) DESC\n -- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2);\ndiff --git a/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql b/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql\nindex 907263168d0e..2c1941f2a914 100644\n--- a/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql\n+++ b/tests/queries/0_stateless/02911_analyzer_order_by_read_in_order_query_plan.sql\n@@ -23,8 +23,8 @@ select * from (explain plan actions = 1 select * from tab order by (a + b) * c d\n select * from tab order by (a + b) * c, sin(a / b);\n select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b)) where explain like '%sort description%';\n \n-select * from tab order by (a + b) * c desc, sin(a / b) desc;\n-select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc) where explain like '%sort description%';\n+select * from tab order by (a + b) * c desc, sin(a / b) desc nulls first;\n+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc nulls first) where explain like '%sort description%';\n \n -- Exact match, mixed direction\n select * from tab order by (a + b) * c desc, sin(a / b);\n@@ -68,7 +68,7 @@ select * from (explain plan actions = 1 select * from tab order by (a + b) * c d\n select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';\n \n -- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc;\n-select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';\n+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc nulls first) where explain like '%sort description%';\n \n -- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2);\n select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2)) where explain like '%sort description%';\ndiff --git a/tests/queries/0_stateless/03257_reverse_sorting_key.sql b/tests/queries/0_stateless/03257_reverse_sorting_key.sql\nindex 0777d101ca18..9dbb468734bd 100644\n--- a/tests/queries/0_stateless/03257_reverse_sorting_key.sql\n+++ b/tests/queries/0_stateless/03257_reverse_sorting_key.sql\n@@ -17,8 +17,8 @@ select * from x1 where i = 3;\n \n select count() from x1 where i between 3 and 10;\n \n-select trimLeft(explain) from (explain actions=1 select * from x1 order by i desc limit 5) where explain ilike '%sort%' settings max_threads=1, enable_analyzer=1;\n-explain pipeline select * from x1 order by i desc limit 5 settings max_threads=1;\n+select trimLeft(explain) from (explain actions=1 select * from x1 order by i desc nulls first limit 5) where explain ilike '%sort%' settings max_threads=1, enable_analyzer=1;\n+explain pipeline select * from x1 order by i desc nulls first limit 5 settings max_threads=1;\n \n select * from x1 order by i desc limit 5;\n \n@@ -37,8 +37,8 @@ select * from x2 where j = 1003;\n \n select count() from x2 where i between 3 and 10 and j between 1003 and 1008;\n \n-select trimLeft(explain) from (explain actions=1 select * from x2 order by i, j desc limit 5) where explain ilike '%sort%' settings max_threads=1, enable_analyzer=1;\n-explain pipeline select * from x2 order by i, j desc limit 5 settings max_threads=1;\n+select trimLeft(explain) from (explain actions=1 select * from x2 order by i, j desc nulls first limit 5) where explain ilike '%sort%' settings max_threads=1, enable_analyzer=1;\n+explain pipeline select * from x2 order by i, j desc nulls first limit 5 settings max_threads=1;\n \n select * from x2 order by i, j desc limit 5;\n \ndiff --git a/tests/queries/0_stateless/03513_read_in_order_nullable.reference b/tests/queries/0_stateless/03513_read_in_order_nullable.reference\nnew file mode 100644\nindex 000000000000..fed4783a9e25\n--- /dev/null\n+++ b/tests/queries/0_stateless/03513_read_in_order_nullable.reference\n@@ -0,0 +1,64 @@\n+--- table asc, query desc, last\n+1\n+0\n+\\N\n+--- table asc, query desc, first\n+\\N\n+1\n+0\n+--- table asc, query asc, last\n+0\n+1\n+\\N\n+--- table asc, query asc, first\n+\\N\n+0\n+1\n+--- table desc, query desc, last\n+1\n+0\n+\\N\n+--- table desc, query desc, first\n+\\N\n+1\n+0\n+--- table desc, query asc, last\n+0\n+1\n+\\N\n+--- table desc, query asc, first\n+\\N\n+0\n+1\n+--- table asc, query desc, last\n+1\n+0\n+nan\n+--- table asc, query desc, first\n+nan\n+1\n+0\n+--- table asc, query asc, last\n+0\n+1\n+nan\n+--- table asc, query asc, first\n+nan\n+0\n+1\n+--- table desc, query desc, last\n+1\n+0\n+nan\n+--- table desc, query desc, first\n+nan\n+1\n+0\n+--- table desc, query asc, last\n+0\n+1\n+nan\n+--- table desc, query asc, first\n+nan\n+0\n+1\ndiff --git a/tests/queries/0_stateless/03513_read_in_order_nullable.sql b/tests/queries/0_stateless/03513_read_in_order_nullable.sql\nnew file mode 100644\nindex 000000000000..461cf1c959f1\n--- /dev/null\n+++ b/tests/queries/0_stateless/03513_read_in_order_nullable.sql\n@@ -0,0 +1,54 @@\n+SET optimize_read_in_order = 1;\n+SET max_threads = 1;\n+\n+CREATE TABLE t0 (c0 Nullable(Int64)) ENGINE = MergeTree() ORDER BY c0 SETTINGS allow_nullable_key=1;\n+INSERT INTO TABLE t0 VALUES (0);\n+INSERT INTO TABLE t0 VALUES (NULL), (1);\n+\n+SELECT '--- table asc, query desc, last';\n+SELECT * FROM t0 ORDER BY c0 DESC NULLS LAST;\n+SELECT '--- table asc, query desc, first';\n+SELECT * FROM t0 ORDER BY c0 DESC NULLS FIRST;\n+SELECT '--- table asc, query asc, last';\n+SELECT * FROM t0 ORDER BY c0 ASC NULLS LAST;\n+SELECT '--- table asc, query asc, first';\n+SELECT * FROM t0 ORDER BY c0 ASC NULLS FIRST;\n+\n+CREATE TABLE t1 (c0 Nullable(Int64)) ENGINE = MergeTree() ORDER BY c0 DESC SETTINGS allow_nullable_key=1, allow_experimental_reverse_key=1;\n+INSERT INTO TABLE t1 VALUES (0);\n+INSERT INTO TABLE t1 VALUES (NULL), (1);\n+\n+SELECT '--- table desc, query desc, last';\n+SELECT * FROM t1 ORDER BY c0 DESC NULLS LAST;\n+SELECT '--- table desc, query desc, first';\n+SELECT * FROM t1 ORDER BY c0 DESC NULLS FIRST;\n+SELECT '--- table desc, query asc, last';\n+SELECT * FROM t1 ORDER BY c0 ASC NULLS LAST;\n+SELECT '--- table desc, query asc, first';\n+SELECT * FROM t1 ORDER BY c0 ASC NULLS FIRST;\n+\n+CREATE TABLE f0 (c0 Float64) ENGINE = MergeTree() ORDER BY c0;\n+INSERT INTO TABLE f0 VALUES (0);\n+INSERT INTO TABLE f0 VALUES (0/0), (1);\n+\n+SELECT '--- table asc, query desc, last';\n+SELECT * FROM f0 ORDER BY c0 DESC NULLS LAST;\n+SELECT '--- table asc, query desc, first';\n+SELECT * FROM f0 ORDER BY c0 DESC NULLS FIRST;\n+SELECT '--- table asc, query asc, last';\n+SELECT * FROM f0 ORDER BY c0 ASC NULLS LAST;\n+SELECT '--- table asc, query asc, first';\n+SELECT * FROM f0 ORDER BY c0 ASC NULLS FIRST;\n+\n+CREATE TABLE f1 (c0 Float64) ENGINE = MergeTree() ORDER BY c0 DESC SETTINGS allow_experimental_reverse_key=1;\n+INSERT INTO TABLE f1 VALUES (0);\n+INSERT INTO TABLE f1 VALUES (0/0), (1);\n+\n+SELECT '--- table desc, query desc, last';\n+SELECT * FROM f1 ORDER BY c0 DESC NULLS LAST;\n+SELECT '--- table desc, query desc, first';\n+SELECT * FROM f1 ORDER BY c0 DESC NULLS FIRST;\n+SELECT '--- table desc, query asc, last';\n+SELECT * FROM f1 ORDER BY c0 ASC NULLS LAST;\n+SELECT '--- table desc, query asc, first';\n+SELECT * FROM f1 ORDER BY c0 ASC NULLS FIRST;\n",
  "problem_statement": "ORDER BY with NULLS wrong for LowCardinality type\n**Describe the bug**\r\nNulls don't show on the top or bottom for `ORDER BY` with LowCardinality type.\r\n\r\n**How to reproduce**\r\nRun:\r\nhttps://fiddle.clickhouse.com/4c5e2370-52dc-4a4c-afcd-a2eddf3dffc2\r\n\n",
  "hints_text": "A side note: `SET optimize_read_in_order = 0;` fixes the behavior. ",
  "created_at": "2025-05-19T17:35:46Z"
}