{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46044,
  "instance_id": "ClickHouse__ClickHouse-46044",
  "issue_numbers": [
    "43421"
  ],
  "base_commit": "539cb6f3c1a84967b7bdd463405a04664667a3ce",
  "patch": "diff --git a/src/Storages/StorageLog.cpp b/src/Storages/StorageLog.cpp\nindex 7d445c0d7ec0..f2eca42ed0b8 100644\n--- a/src/Storages/StorageLog.cpp\n+++ b/src/Storages/StorageLog.cpp\n@@ -1104,7 +1104,7 @@ void registerStorageLog(StorageFactory & factory)\n             throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Engine {} doesn't support any arguments ({} given)\",\n                 args.engine_name, args.engine_args.size());\n \n-        String disk_name = getDiskName(*args.storage_def);\n+        String disk_name = getDiskName(*args.storage_def, args.getContext());\n         DiskPtr disk = args.getContext()->getDisk(disk_name);\n \n         return std::make_shared<StorageLog>(\ndiff --git a/src/Storages/StorageLogSettings.cpp b/src/Storages/StorageLogSettings.cpp\nindex 900e1070eacf..71039f0ecd11 100644\n--- a/src/Storages/StorageLogSettings.cpp\n+++ b/src/Storages/StorageLogSettings.cpp\n@@ -1,18 +1,42 @@\n #include \"StorageLogSettings.h\"\n+#include <Disks/StoragePolicy.h>\n+#include <Interpreters/Context.h>\n #include <Parsers/ASTCreateQuery.h>\n #include <Parsers/ASTSetQuery.h>\n \n namespace DB\n {\n-String getDiskName(ASTStorage & storage_def)\n+\n+namespace ErrorCodes\n+{\n+    extern const int INVALID_SETTING_VALUE;\n+}\n+\n+String getDiskName(ASTStorage & storage_def, ContextPtr context)\n {\n     if (storage_def.settings)\n     {\n         SettingsChanges changes = storage_def.settings->changes;\n-        for (const auto & change : changes)\n-            if (change.name == \"disk\")\n-                return change.value.safeGet<String>();\n+\n+        const auto disk_change\n+            = std::find_if(changes.begin(), changes.end(), [&](const SettingChange & change) { return change.name == \"disk\"; });\n+        const auto storage_policy_change\n+            = std::find_if(changes.begin(), changes.end(), [&](const SettingChange & change) { return change.name == \"storage_policy\"; });\n+\n+        if (disk_change != changes.end() && storage_policy_change != changes.end())\n+            throw Exception(\n+                ErrorCodes::INVALID_SETTING_VALUE, \"Could not specify `disk` and `storage_policy` at the same time for storage Log Family\");\n+\n+        if (disk_change != changes.end())\n+            return disk_change->value.safeGet<String>();\n+\n+        if (storage_policy_change != changes.end())\n+        {\n+            auto policy = context->getStoragePolicy(storage_policy_change->value.safeGet<String>());\n+            return policy->getDisks()[0]->getName();\n+        }\n     }\n+\n     return \"default\";\n }\n \ndiff --git a/src/Storages/StorageLogSettings.h b/src/Storages/StorageLogSettings.h\nindex 0903c034ec66..fa8bb2823600 100644\n--- a/src/Storages/StorageLogSettings.h\n+++ b/src/Storages/StorageLogSettings.h\n@@ -5,6 +5,8 @@\n namespace DB\n {\n     class ASTStorage;\n+    class Context;\n+    using ContextPtr = std::shared_ptr<const Context>;\n \n-    String getDiskName(ASTStorage & storage_def);\n+    String getDiskName(ASTStorage & storage_def, ContextPtr context);\n }\ndiff --git a/src/Storages/StorageStripeLog.cpp b/src/Storages/StorageStripeLog.cpp\nindex be5045b884f8..870f6b96ae66 100644\n--- a/src/Storages/StorageStripeLog.cpp\n+++ b/src/Storages/StorageStripeLog.cpp\n@@ -678,7 +678,7 @@ void registerStorageStripeLog(StorageFactory & factory)\n             throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Engine {} doesn't support any arguments ({} given)\",\n                 args.engine_name, args.engine_args.size());\n \n-        String disk_name = getDiskName(*args.storage_def);\n+        String disk_name = getDiskName(*args.storage_def, args.getContext());\n         DiskPtr disk = args.getContext()->getDisk(disk_name);\n \n         return std::make_shared<StorageStripeLog>(\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02554_log_faminy_support_storage_policy.reference b/tests/queries/0_stateless/02554_log_faminy_support_storage_policy.reference\nnew file mode 100644\nindex 000000000000..e8183f05f5db\n--- /dev/null\n+++ b/tests/queries/0_stateless/02554_log_faminy_support_storage_policy.reference\n@@ -0,0 +1,3 @@\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/02554_log_faminy_support_storage_policy.sql b/tests/queries/0_stateless/02554_log_faminy_support_storage_policy.sql\nnew file mode 100644\nindex 000000000000..4dbb4569c0f2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02554_log_faminy_support_storage_policy.sql\n@@ -0,0 +1,27 @@\n+-- Tags: no-fasttest\n+\n+DROP TABLE IF EXISTS test_2554_log;\n+CREATE TABLE test_2554_log (n UInt32) ENGINE = Log SETTINGS storage_policy = 'default';\n+\n+INSERT INTO test_2554_log SELECT 1;\n+SELECT * FROM test_2554_log;\n+\n+DROP TABLE test_2554_log;\n+\n+DROP TABLE IF EXISTS test_2554_tinylog;\n+CREATE TABLE test_2554_tinylog (n UInt32) ENGINE = Log SETTINGS storage_policy = 'default';\n+\n+INSERT INTO test_2554_tinylog SELECT 1;\n+SELECT * FROM test_2554_tinylog;\n+\n+DROP TABLE test_2554_tinylog;\n+\n+DROP TABLE IF EXISTS test_2554_stripelog;\n+CREATE TABLE test_2554_stripelog (n UInt32) ENGINE = StripeLog SETTINGS storage_policy = 's3_cache';\n+\n+INSERT INTO test_2554_stripelog SELECT 1;\n+SELECT * FROM test_2554_stripelog;\n+\n+DROP TABLE test_2554_stripelog;\n+\n+CREATE TABLE test_2554_error (n UInt32) ENGINE = Log SETTINGS disk = 'default', storage_policy = 'default'; -- { serverError 471 }\n",
  "problem_statement": "Storage policies don't work for `StripeLog` table engine at all\nhttps://pastila.nl/?00ad7b6b/de8e258f58c3483bb8028a627d636398\n",
  "hints_text": "btw it works with `disk` argument https://github.com/ClickHouse/ClickHouse/blob/3cb202a63b526927a41a7c45e09fb7717b4bdf1e/tests/integration/test_log_family_s3/test.py#L52\r\nhttps://github.com/ClickHouse/ClickHouse/blob/3cb202a63b526927a41a7c45e09fb7717b4bdf1e/tests/integration/test_log_family_s3/test.py#L55-L81\r\nand looks like storage policy does not work for all log family engines because they all use this method https://github.com/ClickHouse/ClickHouse/blob/3cb202a63b526927a41a7c45e09fb7717b4bdf1e/src/Storages/StorageLogSettings.cpp#L9-L16\r\nwhich checks only disk setting.\r\nThen seems like it does not make sense (in log family engine case) to support storage_policy as well.\nWe can simply select the disk from the storage_policy.",
  "created_at": "2023-02-04T14:32:05Z"
}