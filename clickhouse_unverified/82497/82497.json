{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 82497,
  "instance_id": "ClickHouse__ClickHouse-82497",
  "issue_numbers": [
    "82040"
  ],
  "base_commit": "e9ebc657ff782b760ad19616da0846e44091bfbb",
  "patch": "diff --git a/src/Processors/QueryPlan/JoinStepLogical.cpp b/src/Processors/QueryPlan/JoinStepLogical.cpp\nindex 4026d04b2e76..f9dc485f040e 100644\n--- a/src/Processors/QueryPlan/JoinStepLogical.cpp\n+++ b/src/Processors/QueryPlan/JoinStepLogical.cpp\n@@ -375,7 +375,7 @@ void predicateOperandsToCommonType(JoinPredicate & predicate, JoinExpressionActi\n             expression_actions.left_pre_join_actions);\n     }\n \n-    if (!join_context.prepared_join_storage && !right_type->equals(*common_type))\n+    if (!right_type->equals(*common_type) && (!join_context.prepared_join_storage || join_context.prepared_join_storage->storage_key_value))\n     {\n         const std::string & result_name = join_context.is_using ? right_node.getColumnName() : \"\";\n         right_node = addNewOutput(\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03546_join_key_value_storage_with_casted_key.reference b/tests/queries/0_stateless/03546_join_key_value_storage_with_casted_key.reference\nnew file mode 100644\nindex 000000000000..bb101b641b9b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03546_join_key_value_storage_with_casted_key.reference\n@@ -0,0 +1,2 @@\n+true\n+true\ndiff --git a/tests/queries/0_stateless/03546_join_key_value_storage_with_casted_key.sql b/tests/queries/0_stateless/03546_join_key_value_storage_with_casted_key.sql\nnew file mode 100644\nindex 000000000000..d663531002df\n--- /dev/null\n+++ b/tests/queries/0_stateless/03546_join_key_value_storage_with_casted_key.sql\n@@ -0,0 +1,9 @@\n+-- Tags: use-rocksdb\n+-- Old analyzer doesn't support this case\n+SET enable_analyzer=1;\n+\n+CREATE TABLE t0 (c0 Bool) ENGINE = EmbeddedRocksDB PRIMARY KEY (c0);\n+INSERT INTO TABLE t0 (c0) VALUES (TRUE);\n+\n+SELECT t0.c0 FROM (SELECT NULL c0) v0 RIGHT JOIN t0 USING (c0);\n+SELECT t0.c0 FROM (SELECT NULL c0) v0 LEFT JOIN t0 USING (c0);\n",
  "problem_statement": "Logical error: 'Bad cast from type DB::ColumnVector<char8_t> to DB::ColumnNullable'\n### Describe the bug\n\nNot related to https://github.com/ClickHouse/ClickHouse/issues/78572 I think\n\n### How to reproduce\n\nOn a debug build run:\n\n```sql\nCREATE TABLE t0 (c0 Bool) ENGINE = EmbeddedRocksDB PRIMARY KEY (c0);\nINSERT INTO TABLE t0 (c0) VALUES (TRUE);\nSELECT t0.c0 FROM (SELECT NULL c0 FROM t0) v0 RIGHT JOIN t0 USING (c0);\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n<Fatal> : Logical error: 'Bad cast from type DB::ColumnVector<char8_t> to DB::ColumnNullable'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x0000000021145e32\n1. src/Common/Exception.cpp:115: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000011e7b1c6\n2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000ba6c0ac\n3. src/Common/Exception.h:137: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000ba6b0f6\n4. src/Common/assert_cast.h:48: DB::ColumnNullable const& assert_cast<DB::ColumnNullable const&, DB::IColumn const&>(DB::IColumn const&) @ 0x000000000c56a04e\n5. src/DataTypes/Serializations/SerializationNullable.cpp:67: DB::SerializationNullable::serializeBinaryBulkStatePrefix(DB::IColumn const&, DB::ISerialization::SerializeBinaryBulkSettings&, std::shared_ptr<DB::ISerialization::SerializeBinaryBulkState>&) const @ 0x000000001629a3fc\n6. src/Formats/NativeWriter.cpp:91: DB::NativeWriter::writeData(DB::ISerialization const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, DB::WriteBuffer&, std::optional<DB::FormatSettings> const&, unsigned long, unsigned long, unsigned long) @ 0x0000000019190ef0\n7. src/Formats/NativeWriter.cpp:218: DB::NativeWriter::write(DB::Block const&) @ 0x0000000019191b5d\n8. src/Server/TCPHandler.cpp:2582: DB::TCPHandler::sendData(DB::QueryState&, DB::Block const&) @ 0x0000000019113067\n9. src/Server/TCPHandler.cpp:1326: DB::TCPHandler::processOrdinaryQuery(DB::QueryState&) @ 0x000000001910954c\n10. src/Server/TCPHandler.cpp:735: DB::TCPHandler::runImpl() @ 0x00000000190fe103\n11. src/Server/TCPHandler.cpp:2727: DB::TCPHandler::run() @ 0x00000000191175e4\n12. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x00000000211eaac7\n13. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x00000000211eafc5\n14. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000211936df\n15. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000021191291\n16. start_thread @ 0x00000000000a2ef1\n17. __clone3 @ 0x000000000013445c\n```\n",
  "hints_text": "Got another crash today: https://fiddle.clickhouse.com/5e9352d5-3112-4fc8-8b51-627200e4da5b, not sure if related.\n```\n<Fatal> : Logical error: 'Bad cast from type DB::ColumnNullable to DB::ColumnString'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. std::exception::exception[abi:ne190107]() @ 0x0000000019ca9594\n1. ci/tmp/build/./base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x000000003af47480\n2. ci/tmp/build/./src/Common/Exception.cpp:115: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000027c1a98b\n3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000019b4eef6\n4. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000019b4dd6f\n5. DB::ColumnString const& assert_cast<DB::ColumnString const&, DB::IColumn const&>(DB::IColumn const&) @ 0x0000000019d1777d\n6. ci/tmp/build/./src/AggregateFunctions/SingleValueData.cpp:1260: DB::SingleValueDataString::set(DB::IColumn const&, unsigned long, DB::Arena*) @ 0x0000000029f66dd3\n7. ci/tmp/build/./src/Processors/Transforms/WindowTransform.cpp:1034: DB::WindowTransform::updateAggregationState() @ 0x0000000037649a09\n8. ci/tmp/build/./src/Processors/Transforms/WindowTransform.cpp:1234: DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x000000003764b6da\n9. ci/tmp/build/./src/Processors/Transforms/WindowTransform.cpp:1462: DB::WindowTransform::work() @ 0x000000003764fa44\n10. ci/tmp/build/./src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::ExecutionThreadContext::executeTask() @ 0x0000000036efdbce\n11. ci/tmp/build/./src/Processors/Executors/PipelineExecutor.cpp:306: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000036ee834e\n12. ci/tmp/build/./src/Processors/Executors/PipelineExecutor.cpp:276: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000036ee9c8d\n13. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x0000000027e2c7b9\n14. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() @ 0x0000000027e3518a\n15. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x0000000027e2990f\n16. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x0000000027e3170a\n17. start_thread @ 0x00000000000a2ef1\n18. __GI___clone3 @ 0x000000000013445c\n```",
  "created_at": "2025-06-24T14:07:44Z",
  "modified_files": [
    "src/Processors/QueryPlan/JoinStepLogical.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03546_join_key_value_storage_with_casted_key.reference",
    "b/tests/queries/0_stateless/03546_join_key_value_storage_with_casted_key.sql"
  ]
}