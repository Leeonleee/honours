{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 45276,
  "instance_id": "ClickHouse__ClickHouse-45276",
  "issue_numbers": [
    "45275"
  ],
  "base_commit": "4087ce4f71cdfb08644a87b114ead82dbb927508",
  "patch": "diff --git a/src/Processors/Formats/Impl/AvroRowInputFormat.cpp b/src/Processors/Formats/Impl/AvroRowInputFormat.cpp\nindex da7f18260a9f..8c6cd8bd91b3 100644\n--- a/src/Processors/Formats/Impl/AvroRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/AvroRowInputFormat.cpp\n@@ -304,7 +304,9 @@ AvroDeserializer::DeserializeFn AvroDeserializer::createDeserializeFn(avro::Node\n                     };\n                 }\n \n-                if (null_as_default)\n+                /// If the Union is ['Null', Nested-Type], since the Nested-Type can not be inside\n+                /// Nullable, so we will get Nested-Type, instead of Nullable type.\n+                if (null_as_default || !target.isNullable())\n                 {\n                     auto nested_deserialize = this->createDeserializeFn(root_node->leafAt(non_null_union_index), target_type);\n                     return [non_null_union_index, nested_deserialize](IColumn & column, avro::Decoder & decoder)\n@@ -1001,7 +1003,7 @@ DataTypePtr AvroSchemaReader::avroNodeToDataType(avro::NodePtr node)\n         case avro::Type::AVRO_STRING:\n             return std::make_shared<DataTypeString>();\n         case avro::Type::AVRO_BYTES:\n-            return std::make_shared<DataTypeFloat32>();\n+            return std::make_shared<DataTypeString>();\n         case avro::Type::AVRO_ENUM:\n         {\n             if (node->names() < 128)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02521_avro_union_null_nested.reference b/tests/queries/0_stateless/02521_avro_union_null_nested.reference\nnew file mode 100644\nindex 000000000000..e4818b4bcacb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02521_avro_union_null_nested.reference\n@@ -0,0 +1,15 @@\n+manifest_path\tString\t\t\t\t\t\n+manifest_length\tInt64\t\t\t\t\t\n+partition_spec_id\tInt32\t\t\t\t\t\n+added_snapshot_id\tNullable(Int64)\t\t\t\t\t\n+added_data_files_count\tNullable(Int32)\t\t\t\t\t\n+existing_data_files_count\tNullable(Int32)\t\t\t\t\t\n+deleted_data_files_count\tNullable(Int32)\t\t\t\t\t\n+partitions\tArray(Tuple(contains_null Bool, contains_nan Nullable(Bool), lower_bound Nullable(String), upper_bound Nullable(String)))\t\t\t\t\t\n+added_rows_count\tNullable(Int64)\t\t\t\t\t\n+existing_rows_count\tNullable(Int64)\t\t\t\t\t\n+deleted_rows_count\tNullable(Int64)\t\t\t\t\t\n+file:/warehouse/nyc.db/taxis/metadata/f9e891e9-fbd3-4411-a5c6-0cc14a2f1392-m0.avro\t6488\t0\t1793608066486471262\t8\t0\t0\t[(false,false,'\u0001\\0\\0\\0\\0\\0\\0\\0','\\b\\0\\0\\0\\0\\0\\0\\0')]\t12\t0\t0\n+file:/warehouse/nyc.db/taxis/metadata/a51dd31d-ea86-42dd-82d1-1981332a0f6d-m0.avro\t6363\t0\t5735460159761889536\t4\t0\t0\t[(false,false,'\u0005\\0\\0\\0\\0\\0\\0\\0','\\b\\0\\0\\0\\0\\0\\0\\0')]\t4\t0\t0\n+file:/warehouse/nyc.db/taxis/metadata/7ae325bd-fe20-4a55-917c-36cb8f6a488c-m0.avro\t6370\t0\t7171740521400098346\t4\t0\t0\t[(false,false,'\u0002\\0\\0\\0\\0\\0\\0\\0','\u0005\\0\\0\\0\\0\\0\\0\\0')]\t4\t0\t0\n+file:/warehouse/nyc.db/taxis/metadata/5e3c62a9-1537-455f-98e5-0a067af5752a-m0.avro\t6324\t0\t6850377589038341628\t2\t0\t0\t[(false,false,'\u0001\\0\\0\\0\\0\\0\\0\\0','\u0002\\0\\0\\0\\0\\0\\0\\0')]\t4\t0\t0\ndiff --git a/tests/queries/0_stateless/02521_avro_union_null_nested.sh b/tests/queries/0_stateless/02521_avro_union_null_nested.sh\nnew file mode 100755\nindex 000000000000..d4d14c8ca8e1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02521_avro_union_null_nested.sh\n@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel, no-fasttest\n+\n+set -e\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+DATA_DIR=$CUR_DIR/data_avro\n+\n+$CLICKHOUSE_LOCAL -q \"desc file('$DATA_DIR/union_null_nested.avro')\"\n+$CLICKHOUSE_LOCAL -q \"select * from file('$DATA_DIR/union_null_nested.avro')\"\ndiff --git a/tests/queries/0_stateless/02522_avro_complicate_schema.reference b/tests/queries/0_stateless/02522_avro_complicate_schema.reference\nnew file mode 100644\nindex 000000000000..55c0369020fe\n--- /dev/null\n+++ b/tests/queries/0_stateless/02522_avro_complicate_schema.reference\n@@ -0,0 +1,5 @@\n+status\tInt32\t\t\t\t\t\n+snapshot_id\tNullable(Int64)\t\t\t\t\t\n+data_file\tTuple(file_path String, file_format String, partition Tuple(vendor_id Nullable(Int64)), record_count Int64, file_size_in_bytes Int64, block_size_in_bytes Int64, column_sizes Array(Tuple(key Int32, value Int64)), value_counts Array(Tuple(key Int32, value Int64)), null_value_counts Array(Tuple(key Int32, value Int64)), nan_value_counts Array(Tuple(key Int32, value Int64)), lower_bounds Array(Tuple(key Int32, value String)), upper_bounds Array(Tuple(key Int32, value String)), key_metadata Nullable(String), split_offsets Array(Int64), sort_order_id Nullable(Int32))\t\t\t\t\t\n+1\t6850377589038341628\t('file:/warehouse/nyc.db/taxis/data/vendor_id=1/00000-0-c070e655-dc44-43d2-a01a-484f107210cb-00001.parquet','PARQUET',(1),2,1565,67108864,[(1,87),(2,51),(3,51),(4,57),(5,51)],[(1,2),(2,2),(3,2),(4,2),(5,2)],[(1,0),(2,0),(3,0),(4,0),(5,0)],[(3,0),(4,0)],[(1,'\u0001\\0\\0\\0\\0\\0\\0\\0'),(2,'\ufffdC\u000f\\0\\0\\0\\0\\0'),(3,'ff\ufffd?'),(4,'\ufffdp=\\n\u05e3.@'),(5,'N')],[(1,'\u0001\\0\\0\\0\\0\\0\\0\\0'),(2,'\ufffdC\u000f\\0\\0\\0\\0\\0'),(3,'ff\u0006A'),(4,'q=\\n\u05e3\u0010E@'),(5,'Y')],NULL,[4],0)\n+1\t6850377589038341628\t('file:/warehouse/nyc.db/taxis/data/vendor_id=2/00000-0-c070e655-dc44-43d2-a01a-484f107210cb-00002.parquet','PARQUET',(2),2,1620,67108864,[(1,87),(2,51),(3,51),(4,57),(5,89)],[(1,2),(2,2),(3,2),(4,2),(5,2)],[(1,0),(2,0),(3,0),(4,0),(5,0)],[(3,0),(4,0)],[(1,'\u0002\\0\\0\\0\\0\\0\\0\\0'),(2,'\ufffdC\u000f\\0\\0\\0\\0\\0'),(3,'fff?'),(4,'\ufffd\ufffdQ\ufffd\u001e\u0005\"@'),(5,'N')],[(1,'\u0002\\0\\0\\0\\0\\0\\0\\0'),(2,'\ufffdC\u000f\\0\\0\\0\\0\\0'),(3,'\\0\\0 @'),(4,'fffff&6@'),(5,'N')],NULL,[4],0)\ndiff --git a/tests/queries/0_stateless/02522_avro_complicate_schema.sh b/tests/queries/0_stateless/02522_avro_complicate_schema.sh\nnew file mode 100755\nindex 000000000000..fa23c7e6f341\n--- /dev/null\n+++ b/tests/queries/0_stateless/02522_avro_complicate_schema.sh\n@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel, no-fasttest\n+\n+set -e\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+DATA_DIR=$CUR_DIR/data_avro\n+\n+$CLICKHOUSE_LOCAL -q \"desc file('$DATA_DIR/complicated_schema.avro')\"\n+$CLICKHOUSE_LOCAL -q \"select * from file('$DATA_DIR/complicated_schema.avro')\"\ndiff --git a/tests/queries/0_stateless/data_avro/complicated_schema.avro b/tests/queries/0_stateless/data_avro/complicated_schema.avro\nnew file mode 100644\nindex 000000000000..a3385f4b23b7\nBinary files /dev/null and b/tests/queries/0_stateless/data_avro/complicated_schema.avro differ\ndiff --git a/tests/queries/0_stateless/data_avro/union_null_nested.avro b/tests/queries/0_stateless/data_avro/union_null_nested.avro\nnew file mode 100644\nindex 000000000000..c5246c3dd644\nBinary files /dev/null and b/tests/queries/0_stateless/data_avro/union_null_nested.avro differ\n",
  "problem_statement": "Read Avro File faild, DB::Exception: Type Array(Tuple(key Int32, value Int64)) is not compatible with Avro union\n```sql\r\n:) select * from file('5e3c62a9-1537-455f-98e5-0a067af5752a-m0.avro')            \r\n\r\nSELECT *\r\nFROM file('5e3c62a9-1537-455f-98e5-0a067af5752a-m0.avro')\r\n\r\nQuery id: 6960516c-5a16-4d0c-b1b2-6d2571f3ab11\r\n\r\n\r\n0 rows in set. Elapsed: 0.019 sec. \r\n\r\nReceived exception from server (version 22.13.1):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Type Array(Tuple(key Int32, value Int64)) is not compatible with Avro union:\r\n[\r\n    \"null\",\r\n    {\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n            \"type\": \"record\",\r\n            \"name\": \"k117_v118\",\r\n            \"fields\": [\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"type\": \"int\"\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"type\": \"long\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n]: column data_file: While executing AvroRowInputFormat: While executing File. (ILLEGAL_COLUMN)\r\n```\r\nFile schema:\r\n```\r\n{'type': 'record', 'name': 'manifest_entry', 'fields': [{'field-id': 0, 'name': 'status', 'type': 'int'}, {'field-id': 1, 'default': None, 'name': 'snapshot_id', 'type': ['null', 'long']}, {'field-id': 2, 'name': 'data_file', 'type': {'type': 'record', 'name': 'r2', 'fields': [{'field-id': 100, 'doc': 'Location URI with FS scheme', 'name': 'file_path', 'type': 'string'}, {'field-id': 101, 'doc': 'File format name: avro, orc, or parquet', 'name': 'file_format', 'type': 'string'}, {'field-id': 102, 'name': 'partition', 'type': {'type': 'record', 'name': 'r102', 'fields': [{'field-id': 1000, 'default': None, 'name': 'vendor_id', 'type': ['null', 'long']}]}}, {'field-id': 103, 'doc': 'Number of records in the file', 'name': 'record_count', 'type': 'long'}, {'field-id': 104, 'doc': 'Total file size in bytes', 'name': 'file_size_in_bytes', 'type': 'long'}, {'field-id': 105, 'name': 'block_size_in_bytes', 'type': 'long'}, {'field-id': 108, 'doc': 'Map of column id to total size on disk', 'default': None, 'name': 'column_sizes', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k117_v118', 'fields': [{'field-id': 117, 'name': 'key', 'type': 'int'}, {'field-id': 118, 'name': 'value', 'type': 'long'}]}}]}, {'field-id': 109, 'doc': 'Map of column id to total count, including null and NaN', 'default': None, 'name': 'value_counts', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k119_v120', 'fields': [{'field-id': 119, 'name': 'key', 'type': 'int'}, {'field-id': 120, 'name': 'value', 'type': 'long'}]}}]}, {'field-id': 110, 'doc': 'Map of column id to null value count', 'default': None, 'name': 'null_value_counts', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k121_v122', 'fields': [{'field-id': 121, 'name': 'key', 'type': 'int'}, {'field-id': 122, 'name': 'value', 'type': 'long'}]}}]}, {'field-id': 137, 'doc': 'Map of column id to number of NaN values in the column', 'default': None, 'name': 'nan_value_counts', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k138_v139', 'fields': [{'field-id': 138, 'name': 'key', 'type': 'int'}, {'field-id': 139, 'name': 'value', 'type': 'long'}]}}]}, {'field-id': 125, 'doc': 'Map of column id to lower bound', 'default': None, 'name': 'lower_bounds', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k126_v127', 'fields': [{'field-id': 126, 'name': 'key', 'type': 'int'}, {'field-id': 127, 'name': 'value', 'type': 'bytes'}]}}]}, {'field-id': 128, 'doc': 'Map of column id to upper bound', 'default': None, 'name': 'upper_bounds', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k129_v130', 'fields': [{'field-id': 129, 'name': 'key', 'type': 'int'}, {'field-id': 130, 'name': 'value', 'type': 'bytes'}]}}]}, {'field-id': 131, 'doc': 'Encryption key metadata blob', 'default': None, 'name': 'key_metadata', 'type': ['null', 'bytes']}, {'field-id': 132, 'doc': 'Splittable offsets', 'default': None, 'name': 'split_offsets', 'type': ['null', {'element-id': 133, 'type': 'array', 'items': 'long'}]}, {'field-id': 140, 'doc': 'Sort order ID', 'default': None, 'name': 'sort_order_id', 'type': ['null', 'int']}]}}]}\r\n```\n",
  "hints_text": "File:\r\n[5e3c62a9-1537-455f-98e5-0a067af5752a-m0.avro.gz](https://github.com/ClickHouse/ClickHouse/files/10418259/5e3c62a9-1537-455f-98e5-0a067af5752a-m0.avro.gz)\r\n",
  "created_at": "2023-01-14T18:23:35Z"
}