You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Read Avro File faild, DB::Exception: Type Array(Tuple(key Int32, value Int64)) is not compatible with Avro union
```sql
:) select * from file('5e3c62a9-1537-455f-98e5-0a067af5752a-m0.avro')            

SELECT *
FROM file('5e3c62a9-1537-455f-98e5-0a067af5752a-m0.avro')

Query id: 6960516c-5a16-4d0c-b1b2-6d2571f3ab11


0 rows in set. Elapsed: 0.019 sec. 

Received exception from server (version 22.13.1):
Code: 44. DB::Exception: Received from localhost:9000. DB::Exception: Type Array(Tuple(key Int32, value Int64)) is not compatible with Avro union:
[
    "null",
    {
        "type": "array",
        "items": {
            "type": "record",
            "name": "k117_v118",
            "fields": [
                {
                    "name": "key",
                    "type": "int"
                },
                {
                    "name": "value",
                    "type": "long"
                }
            ]
        }
    }
]: column data_file: While executing AvroRowInputFormat: While executing File. (ILLEGAL_COLUMN)
```
File schema:
```
{'type': 'record', 'name': 'manifest_entry', 'fields': [{'field-id': 0, 'name': 'status', 'type': 'int'}, {'field-id': 1, 'default': None, 'name': 'snapshot_id', 'type': ['null', 'long']}, {'field-id': 2, 'name': 'data_file', 'type': {'type': 'record', 'name': 'r2', 'fields': [{'field-id': 100, 'doc': 'Location URI with FS scheme', 'name': 'file_path', 'type': 'string'}, {'field-id': 101, 'doc': 'File format name: avro, orc, or parquet', 'name': 'file_format', 'type': 'string'}, {'field-id': 102, 'name': 'partition', 'type': {'type': 'record', 'name': 'r102', 'fields': [{'field-id': 1000, 'default': None, 'name': 'vendor_id', 'type': ['null', 'long']}]}}, {'field-id': 103, 'doc': 'Number of records in the file', 'name': 'record_count', 'type': 'long'}, {'field-id': 104, 'doc': 'Total file size in bytes', 'name': 'file_size_in_bytes', 'type': 'long'}, {'field-id': 105, 'name': 'block_size_in_bytes', 'type': 'long'}, {'field-id': 108, 'doc': 'Map of column id to total size on disk', 'default': None, 'name': 'column_sizes', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k117_v118', 'fields': [{'field-id': 117, 'name': 'key', 'type': 'int'}, {'field-id': 118, 'name': 'value', 'type': 'long'}]}}]}, {'field-id': 109, 'doc': 'Map of column id to total count, including null and NaN', 'default': None, 'name': 'value_counts', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k119_v120', 'fields': [{'field-id': 119, 'name': 'key', 'type': 'int'}, {'field-id': 120, 'name': 'value', 'type': 'long'}]}}]}, {'field-id': 110, 'doc': 'Map of column id to null value count', 'default': None, 'name': 'null_value_counts', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k121_v122', 'fields': [{'field-id': 121, 'name': 'key', 'type': 'int'}, {'field-id': 122, 'name': 'value', 'type': 'long'}]}}]}, {'field-id': 137, 'doc': 'Map of column id to number of NaN values in the column', 'default': None, 'name': 'nan_value_counts', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k138_v139', 'fields': [{'field-id': 138, 'name': 'key', 'type': 'int'}, {'field-id': 139, 'name': 'value', 'type': 'long'}]}}]}, {'field-id': 125, 'doc': 'Map of column id to lower bound', 'default': None, 'name': 'lower_bounds', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k126_v127', 'fields': [{'field-id': 126, 'name': 'key', 'type': 'int'}, {'field-id': 127, 'name': 'value', 'type': 'bytes'}]}}]}, {'field-id': 128, 'doc': 'Map of column id to upper bound', 'default': None, 'name': 'upper_bounds', 'type': ['null', {'logicalType': 'map', 'type': 'array', 'items': {'type': 'record', 'name': 'k129_v130', 'fields': [{'field-id': 129, 'name': 'key', 'type': 'int'}, {'field-id': 130, 'name': 'value', 'type': 'bytes'}]}}]}, {'field-id': 131, 'doc': 'Encryption key metadata blob', 'default': None, 'name': 'key_metadata', 'type': ['null', 'bytes']}, {'field-id': 132, 'doc': 'Splittable offsets', 'default': None, 'name': 'split_offsets', 'type': ['null', {'element-id': 133, 'type': 'array', 'items': 'long'}]}, {'field-id': 140, 'doc': 'Sort order ID', 'default': None, 'name': 'sort_order_id', 'type': ['null', 'int']}]}}]}
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
