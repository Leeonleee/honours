diff --git a/src/Processors/QueryPlan/AddingMissedStep.cpp b/src/Processors/QueryPlan/AddingMissedStep.cpp
index d354405b5ac9..359d0d46a878 100644
--- a/src/Processors/QueryPlan/AddingMissedStep.cpp
+++ b/src/Processors/QueryPlan/AddingMissedStep.cpp
@@ -11,7 +11,7 @@ static ITransformingStep::Traits getTraits()
     return ITransformingStep::Traits
     {
         {
-            .preserves_distinct_columns = true,
+            .preserves_distinct_columns = false, /// TODO: check if true later.
             .returns_single_stream = false,
             .preserves_number_of_streams = true,
             .preserves_sorting = true,
diff --git a/src/Processors/QueryPlan/DistinctStep.cpp b/src/Processors/QueryPlan/DistinctStep.cpp
index 8c7195e36b7b..60966b08beb1 100644
--- a/src/Processors/QueryPlan/DistinctStep.cpp
+++ b/src/Processors/QueryPlan/DistinctStep.cpp
@@ -8,12 +8,16 @@ namespace DB
 
 static bool checkColumnsAlreadyDistinct(const Names & columns, const NameSet & distinct_names)
 {
-    bool columns_already_distinct = true;
-    for (const auto & name : columns)
-        if (distinct_names.count(name) == 0)
-            columns_already_distinct = false;
+    if (distinct_names.empty())
+        return false;
 
-    return columns_already_distinct;
+    /// Now we need to check that distinct_names is a subset of columns.
+    std::unordered_set<std::string_view> columns_set(columns.begin(), columns.end());
+    for (const auto & name : distinct_names)
+        if (columns_set.count(name) == 0)
+            return false;
+
+    return true;
 }
 
 static ITransformingStep::Traits getTraits(bool pre_distinct, bool already_distinct_columns)
diff --git a/src/Processors/QueryPlan/ExpressionStep.cpp b/src/Processors/QueryPlan/ExpressionStep.cpp
index 6e148909bedc..f7ca0a972dca 100644
--- a/src/Processors/QueryPlan/ExpressionStep.cpp
+++ b/src/Processors/QueryPlan/ExpressionStep.cpp
@@ -109,7 +109,6 @@ JoinStep::JoinStep(const DataStream & input_stream_, JoinPtr join_)
         getJoinTraits())
     , join(std::move(join_))
 {
-    updateDistinctColumns(output_stream->header, output_stream->distinct_columns);
 }
 
 void JoinStep::transformPipeline(QueryPipeline & pipeline)
diff --git a/src/Processors/QueryPlan/ITransformingStep.cpp b/src/Processors/QueryPlan/ITransformingStep.cpp
index 7ae2dd4284f1..cb27bf382787 100644
--- a/src/Processors/QueryPlan/ITransformingStep.cpp
+++ b/src/Processors/QueryPlan/ITransformingStep.cpp
@@ -55,9 +55,9 @@ void ITransformingStep::updateDistinctColumns(const Block & res_header, NameSet
     if (distinct_columns.empty())
         return;
 
-    for (const auto & column : res_header)
+    for (const auto & column : distinct_columns)
     {
-        if (distinct_columns.count(column.name) == 0)
+        if (!res_header.has(column))
         {
             distinct_columns.clear();
             break;
