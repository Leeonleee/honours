{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 56456,
  "instance_id": "ClickHouse__ClickHouse-56456",
  "issue_numbers": [
    "57253",
    "52654",
    "56729"
  ],
  "base_commit": "4a097cd373e87399396502c2d000effaa7e73091",
  "patch": "diff --git a/src/Storages/transformQueryForExternalDatabase.cpp b/src/Storages/transformQueryForExternalDatabase.cpp\nindex 84a696a1e9c7..fd3c47e0e3f1 100644\n--- a/src/Storages/transformQueryForExternalDatabase.cpp\n+++ b/src/Storages/transformQueryForExternalDatabase.cpp\n@@ -75,6 +75,33 @@ class ReplacingConstantExpressionsMatcherNumOrStr\n     }\n };\n \n+struct ReplaceLiteralToExprVisitorData\n+{\n+    using TypeToVisit = ASTFunction;\n+\n+    void visit(ASTFunction & func, ASTPtr &) const\n+    {\n+        if (func.name == \"and\" || func.name == \"or\")\n+        {\n+            for (auto & argument : func.arguments->children)\n+            {\n+                auto * literal_expr = typeid_cast<ASTLiteral *>(argument.get());\n+                UInt64 value;\n+                if (literal_expr && literal_expr->value.tryGet<UInt64>(value) && (value == 0 || value == 1))\n+                {\n+                    /// 1 -> 1=1, 0 -> 1=0.\n+                    if (value)\n+                        argument = makeASTFunction(\"equals\", std::make_shared<ASTLiteral>(1), std::make_shared<ASTLiteral>(1));\n+                    else\n+                        argument = makeASTFunction(\"equals\", std::make_shared<ASTLiteral>(1), std::make_shared<ASTLiteral>(0));\n+                }\n+            }\n+        }\n+    }\n+};\n+\n+using ReplaceLiteralToExprVisitor = InDepthNodeVisitor<OneTypeMatcher<ReplaceLiteralToExprVisitorData>, true>;\n+\n class DropAliasesMatcher\n {\n public:\n@@ -288,6 +315,10 @@ String transformQueryForExternalDatabaseImpl(\n     {\n         replaceConstantExpressions(original_where, context, available_columns);\n \n+        /// Replace like WHERE 1 AND 1 to WHERE 1 = 1 AND 1 = 1\n+        ReplaceLiteralToExprVisitor::Data replace_literal_to_expr_data;\n+        ReplaceLiteralToExprVisitor(replace_literal_to_expr_data).visit(original_where);\n+\n         if (isCompatible(original_where))\n         {\n             select->setExpression(ASTSelectQuery::Expression::WHERE, std::move(original_where));\n",
  "test_patch": "diff --git a/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\nindex 749a154c19db..1b2a4187c940 100644\n--- a/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n+++ b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n@@ -279,9 +279,13 @@ TEST(TransformQueryForExternalDatabase, MultipleAndSubqueries)\n {\n     const State & state = State::instance();\n \n-    check(state, 1, {\"column\"},\n-          \"SELECT column FROM test.table WHERE 1 = 1 AND toString(column) = '42' AND column = 42 AND left(toString(column), 10) = RIGHT(toString(column), 10) AND column IN (1, 42) AND SUBSTRING(toString(column) FROM 1 FOR 2) = 'Hello' AND column != 4\",\n-          R\"(SELECT \"column\" FROM \"test\".\"table\" WHERE 1 AND (\"column\" = 42) AND (\"column\" IN (1, 42)) AND (\"column\" != 4))\");\n+    check(\n+        state,\n+        1,\n+        {\"column\"},\n+        \"SELECT column FROM test.table WHERE 1 = 1 AND toString(column) = '42' AND column = 42 AND left(toString(column), 10) = \"\n+        \"RIGHT(toString(column), 10) AND column IN (1, 42) AND SUBSTRING(toString(column) FROM 1 FOR 2) = 'Hello' AND column != 4\",\n+        R\"(SELECT \"column\" FROM \"test\".\"table\" WHERE (1 = 1) AND (\"column\" = 42) AND (\"column\" IN (1, 42)) AND (\"column\" != 4))\");\n     check(state, 1, {\"column\"},\n           \"SELECT column FROM test.table WHERE toString(column) = '42' AND left(toString(column), 10) = RIGHT(toString(column), 10) AND column = 42\",\n           R\"(SELECT \"column\" FROM \"test\".\"table\" WHERE \"column\" = 42)\");\n",
  "problem_statement": "_shard_num bug fix \nCreate a table based on engine PostgreSQL like this \r\n\r\n```\r\n'CREATE TABLE IF NOT EXISTS xxx\r\n(\r\nxxxx\r\n) ENGINE = PostgreSQL(own_pg, table='xxx');'\r\n```\r\nWhen I exec this sql , it will be transfered like below:\r\nClickhouse : \r\n```\r\nSELECT * FROM proxy.sys_nic WHERE  mode !=100 and type=0 and name!='' and _shard_num in (1) ORDER BY _shard_num,name LIMIT 20;\r\n```\r\nPostgres receive:\r\n ```\r\nSELECT \"id\", \"type\", \"mode\", \"state\", \"name\", \"nick_name\", \"description\", \"speed\", \"mac\", \"pci_no\", \"exist\", \"create_by\", \"create_time\", \"update_by\", \"update_time\" \r\n FROM \"sys_nic\" WHERE (\"mode\" != 100) AND (\"type\" = 0) AND 1\r\n```\r\nSo, Postgres will report a error :  The argument to AND must be of type boolean, not of type integer,because of  PG can't recognize **and 1**\nerror when select from postgresql() where 1=1 and (id=id)\nCH 22.8.12.45\r\n\r\nWhen trying to query postgresql function with condition WHERE 1=1 and (id=id) (generated query) ch generates query with wrong syntax for postgres.\r\n\r\nAny query to postgres:\r\n```sql\r\nselect * from postgresql(...)\r\nwhere 1=1 and id=id \r\n\r\n```\r\n\r\nCode: 1001. DB::Exception: Received from localhost:9000. DB::Exception: pqxx::sql_error: ERROR:  argument of AND must be type boolean, not type integer\r\nLINE 1: ...column\" FROM \"table\" WHERE 1 AND (\"id...\r\n\r\nIt's same issue as #33152 but when condition (which ch can not optimize) added provided fix is not working\nclickhouse adapts to postgresql\nWhen I use the ch table and the table imported by the PostgreSql table (pg_algo_input_customer) engine as views, I filter the fields in pg_algo_input_customer. Clickhouse embedded the condition in the pg_algo_input_customer table sql as where 1, but the syntax of where 1 is not supported in pgsql, how do I make this view sql valid using the pg table engine?\r\n\r\nThe sql statement\uff1a\r\n       select date, customer, level\r\n       from pg_algo_input_customer\r\n       where level != 'ZZ'.\r\n\r\nThe view contains the 'level' above, And when i used 'level' column, ch embeds 'and 1' into sql: WHERE (\"level\" != 'ZZ') AND 1), then throw this error 'std::exception. Code: 1001, type: pqxx::sql_error, e.what() = ERROR: argument of AND must be type boolean, not type integer'.\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/42367793/7d22ba16-ca1e-4bf9-89a6-0f22fc4e300e)\r\n\n```[tasklist]\n### Tasks\n```\n\n",
  "hints_text": "\n\n",
  "created_at": "2023-11-08T11:35:47Z",
  "modified_files": [
    "src/Storages/transformQueryForExternalDatabase.cpp"
  ],
  "modified_test_files": [
    "src/Storages/tests/gtest_transform_query_for_external_database.cpp"
  ]
}