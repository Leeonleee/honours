{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 5902,
  "instance_id": "ClickHouse__ClickHouse-5902",
  "issue_numbers": [
    "5901"
  ],
  "base_commit": "2469ec1af303bd2739a3aec4fe2e2ac508caac16",
  "patch": "diff --git a/dbms/src/Functions/FunctionsVisitParam.h b/dbms/src/Functions/FunctionsVisitParam.h\nindex 41a49dfd9080..353dda930ef3 100644\n--- a/dbms/src/Functions/FunctionsVisitParam.h\n+++ b/dbms/src/Functions/FunctionsVisitParam.h\n@@ -100,7 +100,7 @@ struct ExtractRaw\n \n         for (auto extract_begin = pos; pos != end; ++pos)\n         {\n-            if (*pos == current_expect_end)\n+            if (current_expect_end && *pos == current_expect_end)\n             {\n                 expects_end.pop_back();\n                 current_expect_end = expects_end.empty() ? 0 : expects_end.back();\n@@ -192,7 +192,7 @@ struct ExtractParamImpl\n \n             /// We check that the entry does not pass through the boundaries of strings.\n             if (pos + needle.size() < begin + offsets[i])\n-                res[i] = ParamExtractor::extract(pos + needle.size(), begin + offsets[i]);\n+                res[i] = ParamExtractor::extract(pos + needle.size(), begin + offsets[i] - 1);  /// don't include terminating zero\n             else\n                 res[i] = 0;\n \n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00961_visit_param_buffer_underflow.reference b/dbms/tests/queries/0_stateless/00961_visit_param_buffer_underflow.reference\nnew file mode 100644\nindex 000000000000..8b137891791f\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00961_visit_param_buffer_underflow.reference\n@@ -0,0 +1,1 @@\n+\ndiff --git a/dbms/tests/queries/0_stateless/00961_visit_param_buffer_underflow.sql b/dbms/tests/queries/0_stateless/00961_visit_param_buffer_underflow.sql\nnew file mode 100644\nindex 000000000000..92b7501d7002\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00961_visit_param_buffer_underflow.sql\n@@ -0,0 +1,1 @@\n+SELECT visitParamExtractRaw('\\\"a\\\":', 'a');\ndiff --git a/dbms/tests/queries/0_stateless/00962_visit_param_various.reference b/dbms/tests/queries/0_stateless/00962_visit_param_various.reference\nnew file mode 100644\nindex 000000000000..e1b066a61352\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00962_visit_param_various.reference\n@@ -0,0 +1,4 @@\n+123\n+Hello\n+Hello\n+0\ndiff --git a/dbms/tests/queries/0_stateless/00962_visit_param_various.sql b/dbms/tests/queries/0_stateless/00962_visit_param_various.sql\nnew file mode 100644\nindex 000000000000..d65cb88c3929\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00962_visit_param_various.sql\n@@ -0,0 +1,5 @@\n+SELECT visitParamExtractUInt('\"a\":123', 'a');\n+SELECT visitParamExtractString('\"a\":\"Hello\"', 'a');\n+SELECT visitParamExtractRaw('\"a\":Hello}', 'a');\n+\n+SELECT sum(ignore(visitParamExtractRaw(concat('{\"a\":', reinterpretAsString(rand64())), 'a'))) FROM numbers(1000000);\n",
  "problem_statement": "Function visitParamExtractRaw does not pass simple fuzz testing\n```\r\nSELECT DISTINCT visitParamExtractRaw(reinterpretAsString(rand64()), 'a') FROM numbers(1000000000)\r\n```\n",
  "hints_text": "",
  "created_at": "2019-07-05T18:24:35Z",
  "modified_files": [
    "dbms/src/Functions/FunctionsVisitParam.h"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/00961_visit_param_buffer_underflow.reference",
    "b/dbms/tests/queries/0_stateless/00961_visit_param_buffer_underflow.sql",
    "b/dbms/tests/queries/0_stateless/00962_visit_param_various.reference",
    "b/dbms/tests/queries/0_stateless/00962_visit_param_various.sql"
  ]
}