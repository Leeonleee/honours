diff --git a/src/Common/tests/gtest_morton_utils.cpp b/src/Common/tests/gtest_morton_utils.cpp
new file mode 100644
index 000000000000..c2cbce2c3e15
--- /dev/null
+++ b/src/Common/tests/gtest_morton_utils.cpp
@@ -0,0 +1,131 @@
+#include <gtest/gtest.h>
+#include <iostream>
+#include <Common/MortonUtils.h>
+
+
+GTEST_TEST(MortonUtils, Intervals)
+{
+    {
+        std::stringstream res;
+        intervalBinaryPartition(6, 13, [&](UInt64 first, UInt64 last)
+        {
+            res << first << ", " << last << "; ";
+        });
+        ASSERT_EQ(res.str(), "6, 7; 8, 11; 12, 13; ");
+    }
+
+    {
+        std::stringstream res;
+        intervalBinaryPartition(15, 31, [&](UInt64 first, UInt64 last)
+        {
+            res << first << ", " << last << "; ";
+        });
+        ASSERT_EQ(res.str(), "15, 15; 16, 31; ");
+    }
+
+    {
+        std::stringstream res;
+        intervalBinaryPartition(15, 16, [&](UInt64 first, UInt64 last)
+        {
+            res << first << ", " << last << "; ";
+        });
+        ASSERT_EQ(res.str(), "15, 15; 16, 16; ");
+    }
+
+    {
+        std::stringstream res;
+        intervalBinaryPartition(191, 769, [&](UInt64 first, UInt64 last)
+        {
+            res << first << ", " << last << "; ";
+        });
+        ASSERT_EQ(res.str(), "191, 191; 192, 255; 256, 511; 512, 767; 768, 769; ");
+    }
+
+    {
+        std::array<std::pair<UInt64, UInt64>, 2> input = {std::pair{6, 13}, std::pair{15, 31}};
+
+        std::stringstream res;
+        hyperrectangleBinaryPartition<2>(input, [&](auto hyperrectangle)
+        {
+            res << "[" << hyperrectangle[0].first << ", " << hyperrectangle[0].second
+                << "] x [" << hyperrectangle[1].first << ", " << hyperrectangle[1].second
+                << "]; ";
+        });
+
+        ASSERT_EQ(res.str(), "[6, 7] x [15, 15]; [6, 7] x [16, 31]; [8, 11] x [15, 15]; [8, 11] x [16, 31]; [12, 13] x [15, 15]; [12, 13] x [16, 31]; ");
+    }
+
+    {
+        std::array<std::pair<UInt64, UInt64>, 2> input = {std::pair{23, 24}, std::pair{15, 16}};
+
+        std::stringstream res;
+        hyperrectangleBinaryPartition<2>(input, [&](auto hyperrectangle)
+        {
+            res << "[" << hyperrectangle[0].first << ", " << hyperrectangle[0].second
+                << "] x [" << hyperrectangle[1].first << ", " << hyperrectangle[1].second
+                << "]; ";
+        });
+
+        ASSERT_EQ(res.str(), "[23, 23] x [15, 15]; [23, 23] x [16, 16]; [24, 24] x [15, 15]; [24, 24] x [16, 16]; ");
+    }
+
+    {
+        std::stringstream res;
+        mortonIntervalToHyperrectangles<2>(191, 769, [&](auto hyperrectangle)
+        {
+            res << "[" << hyperrectangle[0].first << ", " << hyperrectangle[0].second
+                << "] x [" << hyperrectangle[1].first << ", " << hyperrectangle[1].second
+                << "]; ";
+        });
+
+        ASSERT_EQ(res.str(), "[7, 7] x [15, 15]; [8, 15] x [8, 15]; [16, 31] x [0, 15]; [0, 15] x [16, 31]; [16, 17] x [16, 16]; ");
+    }
+
+    {
+        std::stringstream res;
+        mortonIntervalToHyperrectangles<2>(500, 600, [&](auto hyperrectangle)
+        {
+            res << "[" << hyperrectangle[0].first << ", " << hyperrectangle[0].second
+                << "] x [" << hyperrectangle[1].first << ", " << hyperrectangle[1].second
+                << "]; ";
+        });
+
+        ASSERT_EQ(res.str(), "[30, 31] x [12, 13]; [28, 31] x [14, 15]; [0, 7] x [16, 23]; [8, 11] x [16, 19]; [12, 15] x [16, 17]; [12, 12] x [18, 18]; ");
+    }
+
+    {
+        std::array<std::pair<UInt64, UInt64>, 2> input = {std::pair{23, 24}, std::pair{15, 16}};
+
+        std::stringstream res;
+        hyperrectangleToPossibleMortonIntervals<2>(input, [&](UInt64 first, UInt64 last)
+        {
+            res << first << ", " << last << "; ";
+        });
+
+        ASSERT_EQ(res.str(), "447, 447; 789, 789; 490, 490; 832, 832; ");
+    }
+
+    {
+        std::array<std::pair<UInt64, UInt64>, 2> input = {std::pair{6, 7}, std::pair{16, 31}};
+
+        std::stringstream res;
+        hyperrectangleToPossibleMortonIntervals<2>(input, [&](UInt64 first, UInt64 last)
+        {
+            res << first << ", " << last << "; ";
+        });
+
+        ASSERT_EQ(res.str(), "512, 767; ");
+    }
+
+    {
+        std::array<std::pair<UInt64, UInt64>, 2> input = {std::pair{6, 13}, std::pair{15, 31}};
+
+        std::stringstream res;
+        hyperrectangleToPossibleMortonIntervals<2>(input, [&](UInt64 first, UInt64 last)
+        {
+            res << first << ", " << last << "; ";
+        });
+
+        ASSERT_EQ(res.str(), "188, 191; 512, 767; 224, 239; 248, 251; ");
+    }
+}
diff --git a/tests/queries/0_stateless/02899_indexing_by_space_filling_curves.reference b/tests/queries/0_stateless/02899_indexing_by_space_filling_curves.reference
new file mode 100644
index 000000000000..6e8a5df9145f
--- /dev/null
+++ b/tests/queries/0_stateless/02899_indexing_by_space_filling_curves.reference
@@ -0,0 +1,9 @@
+121
+121
+32
+21
+10
+32
+22
+11
+1
diff --git a/tests/queries/0_stateless/02899_indexing_by_space_filling_curves.sql b/tests/queries/0_stateless/02899_indexing_by_space_filling_curves.sql
new file mode 100644
index 000000000000..c7325b2478dc
--- /dev/null
+++ b/tests/queries/0_stateless/02899_indexing_by_space_filling_curves.sql
@@ -0,0 +1,35 @@
+DROP TABLE IF EXISTS test;
+
+CREATE TABLE test (x UInt32, y UInt32) ENGINE = MergeTree ORDER BY mortonEncode(x, y) SETTINGS index_granularity = 8192, index_granularity_bytes = '1Mi';
+INSERT INTO test SELECT number DIV 1024, number % 1024 FROM numbers(1048576);
+
+SET max_rows_to_read = 8192, force_primary_key = 1, analyze_index_with_space_filling_curves = 1;
+SELECT count() FROM test WHERE x >= 10 AND x <= 20 AND y >= 20 AND y <= 30;
+
+SET max_rows_to_read = 8192, force_primary_key = 1, analyze_index_with_space_filling_curves = 0;
+SELECT count() FROM test WHERE x >= 10 AND x <= 20 AND y >= 20 AND y <= 30;  -- { serverError 277 }
+
+DROP TABLE test;
+
+-- The same, but with more precise index
+
+CREATE TABLE test (x UInt32, y UInt32) ENGINE = MergeTree ORDER BY mortonEncode(x, y) SETTINGS index_granularity = 1;
+SET max_rows_to_read = 0;
+INSERT INTO test SELECT number DIV 32, number % 32 FROM numbers(1024);
+
+SET max_rows_to_read = 200, force_primary_key = 1, analyze_index_with_space_filling_curves = 1;
+SELECT count() FROM test WHERE x >= 10 AND x <= 20 AND y >= 20 AND y <= 30;
+
+-- Various other conditions
+
+SELECT count() FROM test WHERE x = 10 SETTINGS max_rows_to_read = 64;
+SELECT count() FROM test WHERE x = 10 AND y > 10 SETTINGS max_rows_to_read = 42;
+SELECT count() FROM test WHERE x = 10 AND y < 10 SETTINGS max_rows_to_read = 20;
+
+SELECT count() FROM test WHERE y = 10 SETTINGS max_rows_to_read = 48;
+SELECT count() FROM test WHERE x >= 10 AND y = 10 SETTINGS max_rows_to_read = 33;
+SELECT count() FROM test WHERE y = 10 AND x <= 10 SETTINGS max_rows_to_read = 17;
+
+SELECT count() FROM test PREWHERE x >= 10 WHERE x < 11 AND y = 10 SETTINGS max_rows_to_read = 3;
+
+DROP TABLE test;
