{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 76346,
  "instance_id": "ClickHouse__ClickHouse-76346",
  "issue_numbers": [
    "76006",
    "77600",
    "75969"
  ],
  "base_commit": "0c4ee25ff77539f6f56edbb291d343beeff5d6c5",
  "patch": "diff --git a/src/Storages/MergeTree/IMergeTreeReader.cpp b/src/Storages/MergeTree/IMergeTreeReader.cpp\nindex 3c20b8857d5f..f86f48ad2bb8 100644\n--- a/src/Storages/MergeTree/IMergeTreeReader.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeReader.cpp\n@@ -59,14 +59,13 @@ IMergeTreeReader::IMergeTreeReader(\n \n     for (const auto & column : requested_columns)\n     {\n-        columns_to_read.emplace_back(getColumnInPart(column));\n+        const auto & column_to_read = columns_to_read.emplace_back(getColumnInPart(column));\n         serializations.emplace_back(getSerializationInPart(column));\n \n         if (column.isSubcolumn())\n         {\n-            auto name_in_storage = column.getNameInStorage();\n-            auto type_in_storage = column.getTypeInStorage();\n-            serializations_of_full_columns.emplace(name_in_storage, getSerializationInPart({name_in_storage, type_in_storage}));\n+            NameAndTypePair requested_column_in_storage{column.getNameInStorage(), column.getTypeInStorage()};\n+            serializations_of_full_columns.emplace(column_to_read.getNameInStorage(), getSerializationInPart(requested_column_in_storage));\n         }\n     }\n }\n@@ -242,6 +241,12 @@ bool IMergeTreeReader::isSubcolumnOffsetsOfNested(const String & name_in_storage\n }\n \n String IMergeTreeReader::getColumnNameInPart(const NameAndTypePair & required_column) const\n+{\n+    auto name_pair = getStorageAndSubcolumnNameInPart(required_column);\n+    return Nested::concatenateName(name_pair.first, name_pair.second);\n+}\n+\n+std::pair<String, String> IMergeTreeReader::getStorageAndSubcolumnNameInPart(const NameAndTypePair & required_column) const\n {\n     auto name_in_storage = required_column.getNameInStorage();\n     auto subcolumn_name = required_column.getSubcolumnName();\n@@ -254,25 +259,41 @@ String IMergeTreeReader::getColumnNameInPart(const NameAndTypePair & required_co\n     if (isSubcolumnOffsetsOfNested(name_in_storage, subcolumn_name))\n         name_in_storage = Nested::splitName(name_in_storage).first;\n \n-    return Nested::concatenateName(name_in_storage, subcolumn_name);\n+    return {name_in_storage, subcolumn_name};\n }\n \n NameAndTypePair IMergeTreeReader::getColumnInPart(const NameAndTypePair & required_column) const\n {\n-    auto name_in_part = getColumnNameInPart(required_column);\n+    auto name_pair = getStorageAndSubcolumnNameInPart(required_column);\n+    auto name_in_part = Nested::concatenateName(name_pair.first, name_pair.second);\n     auto column_in_part = part_columns.tryGetColumnOrSubcolumn(GetColumnsOptions::AllPhysical, name_in_part);\n-    if (column_in_part)\n-        return *column_in_part;\n \n-    return required_column;\n+    if (!column_in_part)\n+    {\n+        /// If column is missing in part, return column with required type but with name that should be\n+        /// in part according to renames to avoid ambiguity in case of transitive renames.\n+        ///\n+        /// Consider that we have column A in part and the following chain (not materialized in current part) of alters:\n+        /// ADD COLUMN B, RENAME COLUMN A TO C, RENAME COLUMN B TO A.\n+        /// If requested columns are A and C, we will read column A from part (as column C) and will\n+        /// add missing column B (as column A) to fill with default values, because the first name of this column was B.\n+        return NameAndTypePair{name_pair.first, name_pair.second, required_column.getTypeInStorage(), required_column.type};\n+    }\n+\n+    return *column_in_part;\n }\n \n SerializationPtr IMergeTreeReader::getSerializationInPart(const NameAndTypePair & required_column) const\n {\n-    auto name_in_part = getColumnNameInPart(required_column);\n+    auto name_pair = getStorageAndSubcolumnNameInPart(required_column);\n+    auto name_in_part = Nested::concatenateName(name_pair.first, name_pair.second);\n     auto column_in_part = part_columns.tryGetColumnOrSubcolumn(GetColumnsOptions::AllPhysical, name_in_part);\n+\n     if (!column_in_part)\n-        return IDataType::getSerialization(required_column);\n+    {\n+        NameAndTypePair missed_column{name_pair.first, name_pair.second, required_column.getTypeInStorage(), required_column.type};\n+        return IDataType::getSerialization(missed_column);\n+    }\n \n     const auto & infos = data_part_info_for_read->getSerializationInfos();\n     if (auto it = infos.find(column_in_part->getNameInStorage()); it != infos.end())\ndiff --git a/src/Storages/MergeTree/IMergeTreeReader.h b/src/Storages/MergeTree/IMergeTreeReader.h\nindex ad40ae01197c..fa64cfeb9e3c 100644\n--- a/src/Storages/MergeTree/IMergeTreeReader.h\n+++ b/src/Storages/MergeTree/IMergeTreeReader.h\n@@ -118,6 +118,7 @@ class IMergeTreeReader : private boost::noncopyable\n private:\n     /// Returns actual column name in part, which can differ from table metadata.\n     String getColumnNameInPart(const NameAndTypePair & required_column) const;\n+    std::pair<String, String> getStorageAndSubcolumnNameInPart(const NameAndTypePair & required_column) const;\n     /// Returns actual column name and type in part, which can differ from table metadata.\n     NameAndTypePair getColumnInPart(const NameAndTypePair & required_column) const;\n     /// Returns actual serialization in part, which can differ from table metadata.\ndiff --git a/src/Storages/MergeTree/MergeTreeReaderCompact.cpp b/src/Storages/MergeTree/MergeTreeReaderCompact.cpp\nindex 99febe5552ea..dd21b5fa7fc6 100644\n--- a/src/Storages/MergeTree/MergeTreeReaderCompact.cpp\n+++ b/src/Storages/MergeTree/MergeTreeReaderCompact.cpp\n@@ -126,8 +126,6 @@ void MergeTreeReaderCompact::findPositionForMissedNested(size_t pos)\n     if (!column_for_offsets)\n         return;\n \n-    column_positions[pos] = data_part_info_for_read->getColumnPosition(column_for_offsets->column.name);\n-\n     if (is_offsets_subcolumn)\n     {\n         /// Read offsets from antoher array from the same Nested column.\n@@ -135,9 +133,12 @@ void MergeTreeReaderCompact::findPositionForMissedNested(size_t pos)\n     }\n     else\n     {\n-        columns_for_offsets[pos] = std::move(column_for_offsets);\n+        columns_for_offsets[pos] = column_for_offsets;\n         partially_read_columns.insert(column.name);\n     }\n+\n+    column_positions[pos] = data_part_info_for_read->getColumnPosition(column_for_offsets->column.name);\n+    serializations_of_full_columns[column.getNameInStorage()] = column_for_offsets->serialization;\n }\n \n static ColumnPtr getFullColumnFromCache(std::unordered_map<String, ColumnPtr> * columns_cache_for_subcolumns, const String & column_name)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03203_fill_missed_subcolumns.reference b/tests/queries/0_stateless/03203_fill_missed_subcolumns.reference\nindex 9faa3b358489..ce9454ac66d9 100644\n--- a/tests/queries/0_stateless/03203_fill_missed_subcolumns.reference\n+++ b/tests/queries/0_stateless/03203_fill_missed_subcolumns.reference\n@@ -23,6 +23,11 @@\n 3\t[1]\t[1]\n 4\t[1,0]\t[0,1]\n 5\t[1]\t[1]\n+2\n+1\n+1\n+2\n+1\n 1\t('foo','bar')\t[1,NULL,3]\n 2\t('aaa','bbb')\t[1,NULL,3]\n 3\t('ccc','ddd')\t[4,5,6]\ndiff --git a/tests/queries/0_stateless/03203_fill_missed_subcolumns.sql b/tests/queries/0_stateless/03203_fill_missed_subcolumns.sql\nindex 2789c9de35cf..9fd69c1105c9 100644\n--- a/tests/queries/0_stateless/03203_fill_missed_subcolumns.sql\n+++ b/tests/queries/0_stateless/03203_fill_missed_subcolumns.sql\n@@ -25,6 +25,7 @@ INSERT INTO t_missed_subcolumns VALUES (4, [NULL, 'bbb'], ['ddd', NULL]), (5, [N\n SELECT id, n.a, n.b FROM t_missed_subcolumns ORDER BY id;\n SELECT id, n.a.size0, n.b.size0 FROM t_missed_subcolumns ORDER BY id;\n SELECT id, n.a.null, n.b.null FROM t_missed_subcolumns ORDER BY id;\n+SELECT n.b.size0 FROM t_missed_subcolumns ORDER BY id;\n \n DROP TABLE IF EXISTS t_missed_subcolumns;\n \ndiff --git a/tests/queries/0_stateless/03352_concurrent_rename_alter.sh b/tests/queries/0_stateless/03352_concurrent_rename_alter.sh\nindex 4571d24350f9..dd7fcbf13765 100755\n--- a/tests/queries/0_stateless/03352_concurrent_rename_alter.sh\n+++ b/tests/queries/0_stateless/03352_concurrent_rename_alter.sh\n@@ -4,6 +4,9 @@ CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n # shellcheck source=../shell_config.sh\n . \"$CUR_DIR\"/../shell_config.sh\n \n+# shellcheck source=./mergetree_mutations.lib\n+. \"$CUR_DIR\"/mergetree_mutations.lib\n+\n $CLICKHOUSE_CLIENT --query \"\n     DROP TABLE IF EXISTS t_rename_alter SYNC;\n \n",
  "problem_statement": "Logical error: 'std::exception. Code: 1001, type: std::out_of_range, e.what() = unordered_map::at: key not found\n### Describe the bug\n\nhttps://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=75870&sha=latest&name_0=PR&name_1=AST+fuzzer+%28debug%29\n\nI expect it is the one:\n``` sql\nCREATE TABLE t_missed_subcolumns (id UInt64, `n.a` Array(Nullable(String))) ENGINE = MergeTree ORDER BY id;\n\nINSERT INTO t_missed_subcolumns VALUES (1, ['aaa', NULL]) (2, ['ccc']) (3, [NULL]);\nALTER TABLE t_missed_subcolumns ADD COLUMN `n.b` Array(Nullable(String));\nINSERT INTO t_missed_subcolumns VALUES (4, [NULL, 'bbb'], ['ddd', NULL]), (5, [NULL], [NULL]);\n\n\nSELECT n.b.size0 FROM t_missed_subcolumns ORDER BY toLowCardinality(materialize(30)) DESC NULLS LAST, id DESC NULLS LAST SETTINGS receive_timeout = 10., receive_data_timeout_ms = 10000, allow_suspicious_low_cardinality_types = true, log_queries = true, table_function_remote_max_addresses = 200, max_execution_time = 10., max_memory_usage = 10000000000, parallel_view_processing = false, allow_introspection_functions = true, allow_experimental_analyzer = true;\n\n\n```\n\n```\n2025.02.12 16:18:22.772389 [ 1832 ] {26e5490f-c16d-404b-950a-71fb48f9df06} <Fatal> : Logical error: 'std::exception. Code: 1001, type: std::out_of_range, e.what() = unordered_map::at: key not found (version 25.2.1.1943), Stack trace:\n2025.02.12 16:18:22.777249 [ 1832 ] {26e5490f-c16d-404b-950a-71fb48f9df06} <Fatal> : Stack trace (when copying this message, always include the lines below):\n2025.02.12 16:23:11.405971 [ 1838 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\n2025.02.12 16:23:11.406013 [ 1838 ] {} <Fatal> BaseDaemon: (version 25.2.1.1943, build id: D44C8051144BDACECBDB1E8BC90252EC22CA6EED, git hash: ba741c48dc1a29b93ffe876a73994a537dd37a98, architecture: x86_64) (from thread 1832) Received signal 6\n2025.02.12 16:23:11.406032 [ 1838 ] {} <Fatal> BaseDaemon: Signal description: Aborted\n2025.02.12 16:23:11.406036 [ 1838 ] {} <Fatal> BaseDaemon:\n2025.02.12 16:23:11.406045 [ 1838 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000d0bfea8 0x000000000d3a5da2 0x00007fac071ae520 0x00007fac072029fd 0x00007fac071ae476 0x00007fac071947f3 0x000000000d08d148 0x000000000d08d1cc 0x000000000d092ec4 0x000000000d091d16 0x000000000d0940ce 0x0000000014d4b084 0x0000000014d5a40a 0x000000000d15202f 0x000000000d157e60 0x00007fac07200ac3 0x00007fac07292850\n2025.02.12 16:23:11.406058 [ 1838 ] {} <Fatal> BaseDaemon: ########################################\n2025.02.12 16:23:11.406091 [ 1838 ] {} <Fatal> BaseDaemon: (version 25.2.1.1943, build id: D44C8051144BDACECBDB1E8BC90252EC22CA6EED, git hash: ba741c48dc1a29b93ffe876a73994a537dd37a98) (from thread 1832) (query_id: 26e5490f-c16d-404b-950a-71fb48f9df06) (query: SELECT n.b.size0 FROM t_missed_subcolumns ORDER BY toLowCardinality(materialize(30)) DESC NULLS LAST, id DESC NULLS LAST) Received signal Aborted (6)\n2025.02.12 16:23:11.406108 [ 1838 ] {} <Fatal> BaseDaemon:\n2025.02.12 16:23:11.406132 [ 1838 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000d0bfea8 0x000000000d3a5da2 0x00007fac071ae520 0x00007fac072029fd 0x00007fac071ae476 0x00007fac071947f3 0x000000000d08d148 0x000000000d08d1cc 0x000000000d092ec4 0x000000000d091d16 0x000000000d0940ce 0x0000000014d4b084 0x0000000014d5a40a 0x000000000d15202f 0x000000000d157e60 0x00007fac07200ac3 0x00007fac07292850\n2025.02.12 16:23:11.423054 [ 1838 ] {} <Fatal> BaseDaemon: 0.0. inlined from /build/src/Common/StackTrace.cpp:381: StackTrace::tryCapture()\n2025.02.12 16:23:11.423102 [ 1838 ] {} <Fatal> BaseDaemon: 0. /build/src/Common/StackTrace.cpp:350: StackTrace::StackTrace(ucontext_t const&) @ 0x000000000d0bfea8\n2025.02.12 16:23:11.443412 [ 1838 ] {} <Fatal> BaseDaemon: 1. /build/src/Common/SignalHandlers.cpp:104: signalHandler(int, siginfo_t*, void*) @ 0x000000000d3a5da2\n2025.02.12 16:23:11.443456 [ 1838 ] {} <Fatal> BaseDaemon: 2. ? @ 0x00007fac071ae520\n2025.02.12 16:23:11.443470 [ 1838 ] {} <Fatal> BaseDaemon: 3. ? @ 0x00007fac072029fd\n2025.02.12 16:23:11.443491 [ 1838 ] {} <Fatal> BaseDaemon: 4. ? @ 0x00007fac071ae476\n2025.02.12 16:23:11.443501 [ 1838 ] {} <Fatal> BaseDaemon: 5. ? @ 0x00007fac071947f3\n2025.02.12 16:23:11.472840 [ 1838 ] {} <Fatal> BaseDaemon: 6. /build/src/Common/Exception.cpp:48: DB::abortOnFailedAssertion(String const&, void* const*, unsigned long, unsigned long) @ 0x000000000d08d148\n2025.02.12 16:23:11.492746 [ 1838 ] {} <Fatal> BaseDaemon: 7. /build/src/Common/Exception.cpp:54: ? @ 0x000000000d08d1cc\n2025.02.12 16:23:11.514536 [ 1838 ] {} <Fatal> BaseDaemon: 8. /build/src/Common/Exception.cpp:503: DB::getCurrentExceptionMessageAndPattern(bool, bool, bool) @ 0x000000000d092ec4\n2025.02.12 16:23:11.540244 [ 1838 ] {} <Fatal> BaseDaemon: 9. /build/src/Common/Exception.cpp:443: DB::getCurrentExceptionMessage(bool, bool, bool) @ 0x000000000d091d16\n2025.02.12 16:23:11.563152 [ 1838 ] {} <Fatal> BaseDaemon: 10. /build/src/Common/Exception.cpp:687: DB::ExecutionStatus::fromCurrentException(String const&, bool) @ 0x000000000d0940ce\n2025.02.12 16:23:11.577145 [ 1838 ] {} <Fatal> BaseDaemon: 11. /build/src/Processors/Executors/PipelineExecutor.cpp:140: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000014d4b084\n2025.02.12 16:23:11.588217 [ 1838 ] {} <Fatal> BaseDaemon: 12.0. inlined from /build/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\n2025.02.12 16:23:11.588255 [ 1838 ] {} <Fatal> BaseDaemon: 12.1. inlined from /build/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()\n2025.02.12 16:23:11.588277 [ 1838 ] {} <Fatal> BaseDaemon: 12.2. inlined from /build/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:se180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)\n2025.02.12 16:23:11.588288 [ 1838 ] {} <Fatal> BaseDaemon: 12.3. inlined from /build/contrib/llvm-project/libcxx/include/tuple:1424: decltype(auto) std::__apply_tuple_impl[abi:se180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)\n2025.02.12 16:23:11.588327 [ 1838 ] {} <Fatal> BaseDaemon: 12.4. inlined from /build/contrib/llvm-project/libcxx/include/tuple:1428: decltype(auto) std::apply[abi:se180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\n2025.02.12 16:23:11.588349 [ 1838 ] {} <Fatal> BaseDaemon: 12.5. inlined from /build/src/Common/ThreadPool.h:311: operator()\n2025.02.12 16:23:11.588375 [ 1838 ] {} <Fatal> BaseDaemon: 12.6. inlined from /build/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:se180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)\n2025.02.12 16:23:11.588400 [ 1838 ] {} <Fatal> BaseDaemon: 12.7. inlined from /build/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:419: void std::__invoke_void_return_wrapper<void, true>::__call[abi:se180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)\n2025.02.12 16:23:11.588416 [ 1838 ] {} <Fatal> BaseDaemon: 12.8. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:208: ?\n2025.02.12 16:23:11.588437 [ 1838 ] {} <Fatal> BaseDaemon: 12. /build/contrib/llvm-project/libcxx/include/__functional/function.h:608: ? @ 0x0000000014d5a40a\n2025.02.12 16:23:11.598135 [ 1838 ] {} <Fatal> BaseDaemon: 13.0. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:714: ?\n2025.02.12 16:23:11.598174 [ 1838 ] {} <Fatal> BaseDaemon: 13.1. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:981: ?\n2025.02.12 16:23:11.598191 [ 1838 ] {} <Fatal> BaseDaemon: 13. /build/src/Common/ThreadPool.cpp:785: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000d15202f\n2025.02.12 16:23:11.616439 [ 1838 ] {} <Fatal> BaseDaemon: 14.0. inlined from /build/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:se180100]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)\n2025.02.12 16:23:11.616494 [ 1838 ] {} <Fatal> BaseDaemon: 14.1. inlined from /build/contrib/llvm-project/libcxx/include/__thread/thread.h:193: void std::__thread_execute[abi:se180100]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)\n2025.02.12 16:23:11.616514 [ 1838 ] {} <Fatal> BaseDaemon: 14. /build/contrib/llvm-project/libcxx/include/__thread/thread.h:202: void* std::__thread_proxy[abi:se180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000d157e60\n2025.02.12 16:23:11.616552 [ 1838 ] {} <Fatal> BaseDaemon: 15. ? @ 0x00007fac07200ac3\n2025.02.12 16:23:11.616572 [ 1838 ] {} <Fatal> BaseDaemon: 16. ? @ 0x00007fac07292850\n2025.02.12 16:23:11.616590 [ 1838 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\n2025.02.12 16:23:11.794058 [ 1838 ] {} <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\n2025.02.12 16:23:11.794239 [ 1838 ] {} <Fatal> BaseDaemon: Changed settings: receive_timeout = 10., receive_data_timeout_ms = 10000, allow_suspicious_low_cardinality_types = true, log_queries = true, table_function_remote_max_addresses = 200, max_execution_time = 10., max_memory_usage = 10000000000, parallel_view_processing = false, allow_introspection_functions = true, allow_experimental_analyzer = true\n2025.02.12 16:23:17.745932 [ 181 ] {} <Fatal> Application: Child process was terminated by signal 6.\n```\n\n### How to reproduce\n\n_No response_\n\n### Error message and/or stacktrace\n\n_No response_\nheap-buffer-overflow in serialization\n```\n==400==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x503001c79940 at pc 0x5609d7866257 bp 0x7f8a4bce4590 sp 0x7f8a4bce4588\nREAD of size 8 at 0x503001c79940 thread T845 (QueryPipelineEx)\n    #0 0x5609d7866256 in boost::intrusive_ptr<DB::IColumn const>::intrusive_ptr(boost::intrusive_ptr<DB::IColumn const> const&) build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:93:55\n    #1 0x5609d7866256 in COW<DB::IColumn>::immutable_ptr<DB::IColumn>::immutable_ptr(COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) build_docker/./src/Common/COW.h:133:9\n    #2 0x5609d7866256 in DB::SerializationTuple::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const build_docker/./src/DataTypes/Serializations/SerializationTuple.cpp:689:40\n    #3 0x5609d76c01e4 in DB::SerializationArray::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const build_docker/./src/DataTypes/Serializations/SerializationArray.cpp:261:13\n    #4 0x5609d76a8935 in DB::ISerialization::enumerateStreams(std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, std::__1::shared_ptr<DB::IDataType const> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const build_docker/./src/DataTypes/Serializations/ISerialization.cpp:104:5\n    #5 0x5609da32f292 in DB::collectOffsetsColumns(DB::NamesAndTypesList const&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&) build_docker/./src/Interpreters/inplaceBlockConversions.cpp:229:24\n    #6 0x5609da32f292 in DB::fillMissingColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long, DB::NamesAndTypesList const&, DB::NamesAndTypesList const&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>) build_docker/./src/Interpreters/inplaceBlockConversions.cpp:334:28\n    #7 0x5609de9c7450 in DB::IMergeTreeReader::fillMissingColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, bool&, unsigned long) const build_docker/./src/Storages/MergeTree/IMergeTreeReader.cpp:126:9\n    #8 0x5609de9e5b63 in DB::MergeTreeRangeReader::executeActionsBeforePrewhere(DB::MergeTreeRangeReader::ReadResult&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, DB::Block const&, unsigned long) const build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1324:24\n    #9 0x5609dea249da in DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&) build_docker/./src/Storages/MergeTree/MergeTreeReadersChain.cpp:74:22\n    #10 0x5609dea1afbe in DB::MergeTreeReadTask::read() build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:172:38\n    #11 0x5609e017d3d0 in DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) build_docker/./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38:84\n    #12 0x5609dea3287c in DB::MergeTreeSelectProcessor::read() build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:204:31\n    #13 0x5609e0190117 in DB::MergeTreeSource::tryGenerate() build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:229:41\n    #14 0x5609df60af23 in DB::ISource::work() build_docker/./src/Processors/ISource.cpp:108:26\n    #15 0x5609df64abb3 in DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:53:26\n    #16 0x5609df64abb3 in DB::ExecutionThreadContext::executeTask() build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:102:9\n    #17 0x5609df62b6ff in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) build_docker/./src/Processors/Executors/PipelineExecutor.cpp:296:26\n    #18 0x5609df62e13c in DB::PipelineExecutor::executeSingleThread(unsigned long) build_docker/./src/Processors/Executors/PipelineExecutor.cpp:262:5\n    #19 0x5609df62e13c in DB::PipelineExecutor::spawnThreadsImpl()::$_0::operator()() const build_docker/./src/Processors/Executors/PipelineExecutor.cpp:416:17\n    #20 0x5609df62e13c in decltype(std::declval<DB::PipelineExecutor::spawnThreadsImpl()::$_0&>()()) std::__1::__invoke[abi:ne190107]<DB::PipelineExecutor::spawnThreadsImpl()::$_0&>(DB::PipelineExecutor::spawnThreadsImpl()::$_0&) build_docker/./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149:25\n    #21 0x5609df62e13c in void std::__1::__invoke_void_return_wrapper<void, true>::__call[abi:ne190107]<DB::PipelineExecutor::spawnThreadsImpl()::$_0&>(DB::PipelineExecutor::spawnThreadsImpl()::$_0&) build_docker/./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:224:5\n    #22 0x5609df62e13c in std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>::operator()[abi:ne190107]() build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:210:12\n    #23 0x5609df62e13c in void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>>(std::__1::__function::__policy_storage const*) build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:610:12\n    #24 0x5609cb845491 in std::__1::__function::__policy_func<void ()>::operator()[abi:ne190107]() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716:12\n    #25 0x5609cb845491 in std::__1::function<void ()>::operator()() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:989:10\n    #26 0x5609cb845491 in ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() build_docker/./src/Common/ThreadPool.cpp:799:17\n    #27 0x5609cb8533e2 in decltype(*std::declval<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&>().*std::declval<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)()>()()) std::__1::__invoke[abi:ne190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&, void>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&) build_docker/./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117:25\n    #28 0x5609cb8533e2 in decltype(auto) std::__1::__apply_tuple_impl[abi:ne190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&, 0ul>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&, std::__1::__tuple_indices<0ul>) build_docker/./contrib/llvm-project/libcxx/include/tuple:1354:5\n    #29 0x5609cb8533e2 in decltype(auto) std::__1::apply[abi:ne190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&) build_docker/./contrib/llvm-project/libcxx/include/tuple:1358:5\n    #30 0x5609cb8533e2 in ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() build_docker/./src/Common/ThreadPool.h:312:13\n    #31 0x5609cb83fc70 in std::__1::__function::__policy_func<void ()>::operator()[abi:ne190107]() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716:12\n    #32 0x5609cb83fc70 in std::__1::function<void ()>::operator()() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:989:10\n    #33 0x5609cb83fc70 in ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker() build_docker/./src/Common/ThreadPool.cpp:809:17\n    #34 0x5609cb84e0cf in decltype(*std::declval<ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)()>()()) std::__1::__invoke[abi:ne190107]<void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*&&) build_docker/./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117:25\n    #35 0x5609cb84e0cf in void std::__1::__thread_execute[abi:ne190107]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*, 2ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>&, std::__1::__tuple_indices<2ul>) build_docker/./contrib/llvm-project/libcxx/include/__thread/thread.h:192:3\n    #36 0x5609cb84e0cf in void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*) build_docker/./contrib/llvm-project/libcxx/include/__thread/thread.h:201:3\n    #37 0x5609bc0a7e76 in asan_thread_start(void*) crtstuff.c\n    #38 0x7f8f391adac2  (/lib/x86_64-linux-gnu/libc.so.6+0x94ac2) (BuildId: 490fef8403240c91833978d494d39e537409b92e)\n    #39 0x7f8f3923f84f  (/lib/x86_64-linux-gnu/libc.so.6+0x12684f) (BuildId: 490fef8403240c91833978d494d39e537409b92e)\n\n0x503001c79940 is located 0 bytes after 32-byte region [0x503001c79920,0x503001c79940)\nallocated by thread T845 (QueryPipelineEx) here:\n    #0 0x5609bc0e09bd in operator new(unsigned long) (/usr/bin/clickhouse+0xc05c9bd) (BuildId: 1748d93f7423a322fc7a88332f19deb632541064)\n    #1 0x5609d9e2d1d7 in void* std::__1::__libcpp_operator_new[abi:ne190107]<unsigned long>(unsigned long) build_docker/./contrib/llvm-project/libcxx/include/new:265:10\n    #2 0x5609d9e2d1d7 in std::__1::__libcpp_allocate[abi:ne190107](unsigned long, unsigned long) build_docker/./contrib/llvm-project/libcxx/include/new:289:10\n    #3 0x5609d9e2d1d7 in std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>::allocate[abi:ne190107](unsigned long) build_docker/./contrib/llvm-project/libcxx/include/__memory/allocator.h:118:32\n    #4 0x5609d9e2d1d7 in std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>::allocate_at_least[abi:ne190107](unsigned long) build_docker/./contrib/llvm-project/libcxx/include/__memory/allocator.h:124:13\n    #5 0x5609d9e2d1d7 in std::__1::allocation_result<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>*, unsigned long> std::__1::allocator_traits<std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>>::allocate_at_least[abi:ne190107]<std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>>(std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>&, unsigned long) build_docker/./contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:303:22\n    #6 0x5609d9e2d1d7 in auto std::__1::__allocate_at_least[abi:ne190107]<std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>>(std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>&, unsigned long) build_docker/./contrib/llvm-project/libcxx/include/__memory/allocate_at_least.h:26:10\n    #7 0x5609d9e2d1d7 in std::__1::__split_buffer<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>&>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>&) build_docker/./contrib/llvm-project/libcxx/include/__split_buffer:353:25\n    #8 0x5609d9e2d1d7 in std::__1::vector<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>>>::reserve(unsigned long) build_docker/./contrib/llvm-project/libcxx/include/vector:1468:49\n    #9 0x5609dd012185 in DB::ColumnTuple::ColumnTuple(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&&) build_docker/./src/Columns/ColumnTuple.cpp:54:13\n    #10 0x5609d757f289 in COW<DB::IColumn>::mutable_ptr<DB::ColumnTuple> COWHelper<DB::IColumnHelper<DB::ColumnTuple, DB::IColumn>, DB::ColumnTuple>::create<std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>>(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&&) build_docker/./src/Common/COW.h:293:71\n    #11 0x5609d757f289 in COW<DB::IColumn>::mutable_ptr<DB::ColumnTuple> DB::ColumnTuple::create<std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>>(T&&) build_docker/./src/Columns/ColumnTuple.h:47:51\n    #12 0x5609d757f289 in DB::DataTypeTuple::createColumn() const build_docker/./src/DataTypes/DataTypeTuple.cpp:199:12\n    #13 0x5609d7505f0f in DB::DataTypeArray::createColumn() const build_docker/./src/DataTypes/DataTypeArray.cpp:38:40\n    #14 0x5609d7624c13 in DB::IDataType::createColumn(DB::ISerialization const&) const build_docker/./src/DataTypes/IDataType.cpp:65:19\n    #15 0x5609de9c0486 in DB::MergeTreeReaderCompact::createColumnsForReading(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&) const build_docker/./src/Storages/MergeTree/MergeTreeReaderCompact.cpp:304:55\n    #16 0x5609de9ee2ed in DB::MergeTreeReaderCompactSingleBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&) build_docker/./src/Storages/MergeTree/MergeTreeReaderCompactSingleBuffer.cpp:23:5\n    #17 0x5609de9d2272 in DB::MergeTreeRangeReader::DelayedStream::readRows(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long) build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:116:47\n    #18 0x5609de9d2272 in DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&) build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:188:12\n    #19 0x5609de9e36ea in DB::MergeTreeRangeReader::Stream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&) build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:298:31\n    #20 0x5609de9e36ea in DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&) build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:996:27\n    #21 0x5609dea24079 in DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&) build_docker/./src/Storages/MergeTree/MergeTreeReadersChain.cpp:67:37\n    #22 0x5609dea1afbe in DB::MergeTreeReadTask::read() build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:172:38\n    #23 0x5609e017d3d0 in DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) build_docker/./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38:84\n    #24 0x5609dea3287c in DB::MergeTreeSelectProcessor::read() build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:204:31\n    #25 0x5609e0190117 in DB::MergeTreeSource::tryGenerate() build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:229:41\n    #26 0x5609df60af23 in DB::ISource::work() build_docker/./src/Processors/ISource.cpp:108:26\n    #27 0x5609df64abb3 in DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:53:26\n    #28 0x5609df64abb3 in DB::ExecutionThreadContext::executeTask() build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:102:9\n    #29 0x5609df62b6ff in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) build_docker/./src/Processors/Executors/PipelineExecutor.cpp:296:26\n    #30 0x5609df62e13c in DB::PipelineExecutor::executeSingleThread(unsigned long) build_docker/./src/Processors/Executors/PipelineExecutor.cpp:262:5\n    #31 0x5609df62e13c in DB::PipelineExecutor::spawnThreadsImpl()::$_0::operator()() const build_docker/./src/Processors/Executors/PipelineExecutor.cpp:416:17\n    #32 0x5609df62e13c in decltype(std::declval<DB::PipelineExecutor::spawnThreadsImpl()::$_0&>()()) std::__1::__invoke[abi:ne190107]<DB::PipelineExecutor::spawnThreadsImpl()::$_0&>(DB::PipelineExecutor::spawnThreadsImpl()::$_0&) build_docker/./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149:25\n    #33 0x5609df62e13c in void std::__1::__invoke_void_return_wrapper<void, true>::__call[abi:ne190107]<DB::PipelineExecutor::spawnThreadsImpl()::$_0&>(DB::PipelineExecutor::spawnThreadsImpl()::$_0&) build_docker/./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:224:5\n    #34 0x5609df62e13c in std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>::operator()[abi:ne190107]() build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:210:12\n    #35 0x5609df62e13c in void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>>(std::__1::__function::__policy_storage const*) build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:610:12\n    #36 0x5609cb845491 in std::__1::__function::__policy_func<void ()>::operator()[abi:ne190107]() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716:12\n    #37 0x5609cb845491 in std::__1::function<void ()>::operator()() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:989:10\n    #38 0x5609cb845491 in ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() build_docker/./src/Common/ThreadPool.cpp:799:17\n    #39 0x5609cb8533e2 in decltype(*std::declval<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&>().*std::declval<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)()>()()) std::__1::__invoke[abi:ne190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&, void>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&) build_docker/./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117:25\n    #40 0x5609cb8533e2 in decltype(auto) std::__1::__apply_tuple_impl[abi:ne190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&, 0ul>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&, std::__1::__tuple_indices<0ul>) build_docker/./contrib/llvm-project/libcxx/include/tuple:1354:5\n    #41 0x5609cb8533e2 in decltype(auto) std::__1::apply[abi:ne190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&) build_docker/./contrib/llvm-project/libcxx/include/tuple:1358:5\n    #42 0x5609cb8533e2 in ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() build_docker/./src/Common/ThreadPool.h:312:13\n    #43 0x5609cb83fc70 in std::__1::__function::__policy_func<void ()>::operator()[abi:ne190107]() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716:12\n    #44 0x5609cb83fc70 in std::__1::function<void ()>::operator()() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:989:10\n    #45 0x5609cb83fc70 in ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker() build_docker/./src/Common/ThreadPool.cpp:809:17\n    #46 0x5609cb84e0cf in decltype(*std::declval<ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)()>()()) std::__1::__invoke[abi:ne190107]<void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*&&) build_docker/./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117:25\n    #47 0x5609cb84e0cf in void std::__1::__thread_execute[abi:ne190107]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*, 2ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>&, std::__1::__tuple_indices<2ul>) build_docker/./contrib/llvm-project/libcxx/include/__thread/thread.h:192:3\n    #48 0x5609cb84e0cf in void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*) build_docker/./contrib/llvm-project/libcxx/include/__thread/thread.h:201:3\n    #49 0x5609bc0a7e76 in asan_thread_start(void*) crtstuff.c\n```\n\nCI: https://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=77573&sha=3d81b871f806113fc6e8f6db565c030a1402f02d&name_0=PR&name_1=Stateless%20tests%20%28azure%2C%20asan%2C%203%2F3%29\nCrash while running 03352_concurrent_rename_alter in tuple serialization\nCI: https://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=74834&sha=ad3dd4a6e61754ef05f96cf7dfdb01478fd9fe2a&name_0=PR&name_1=Stateless%20tests%20%28release%2C%20ParallelReplicas%2C%20s3%20storage%29\n\n```\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.917816 [ 145204 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.917850 [ 145204 ] {} <Fatal> BaseDaemon: (version 25.2.1.1845, build id: 251C20F094B211050202CF32B2F4FA9AF28EA061, git hash: ad3dd4a6e61754ef05f96cf7dfdb01478fd9fe2a, architecture: x86_64) (from thread 107426) Received signal 11\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.917863 [ 145204 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.917873 [ 145204 ] {} <Fatal> BaseDaemon: Address: 0xe09ace8. Access: write. Attempted access has violated the permissions assigned to the memory area.\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.917883 [ 145204 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000e0f3495 0x00007fbd539f3520 0x0000000011cb41a6 0x0000000011c306fd 0x0000000011c27088 0x0000000012c87c1a 0x0000000013a680f7 0x0000000013a77106 0x0000000013a95b53 0x000000001449fbcc 0x0000000013a91c07 0x00000000144de2bc 0x0000000013feab47 0x0000000014008ab6 0x0000000013ffa804 0x0000000013ff9abe 0x000000001400c26a 0x000000000de6249f 0x000000000de6961a 0x00007fbd53a45ac3 0x00007fbd53ad7850\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.917892 [ 145204 ] {} <Fatal> BaseDaemon: ########################################\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.917927 [ 145204 ] {} <Fatal> BaseDaemon: (version 25.2.1.1845, build id: 251C20F094B211050202CF32B2F4FA9AF28EA061, git hash: ad3dd4a6e61754ef05f96cf7dfdb01478fd9fe2a) (from thread 107426) (query_id: e8ac7eb2-f4ca-4c5e-abc4-beb88d0c2328) (query: SELECT count() FROM t_rename_alter WHERE NOT ignore(*) FORMAT Null;) Received signal Segmentation fault (11)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.917962 [ 145204 ] {} <Fatal> BaseDaemon: Address: 0xe09ace8. Access: write. Attempted access has violated the permissions assigned to the memory area.\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.917975 [ 145204 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000e0f3495 0x00007fbd539f3520 0x0000000011cb41a6 0x0000000011c306fd 0x0000000011c27088 0x0000000012c87c1a 0x0000000013a680f7 0x0000000013a77106 0x0000000013a95b53 0x000000001449fbcc 0x0000000013a91c07 0x00000000144de2bc 0x0000000013feab47 0x0000000014008ab6 0x0000000013ffa804 0x0000000013ff9abe 0x000000001400c26a 0x000000000de6249f 0x000000000de6961a 0x00007fbd53a45ac3 0x00007fbd53ad7850\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.937186 [ 145204 ] {} <Fatal> BaseDaemon: 0. ./build_docker/./src/Common/SignalHandlers.cpp:107: signalHandler(int, siginfo_t*, void*) @ 0x000000000e0f3495\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.947299 [ 145204 ] {} <Fatal> BaseDaemon: 1. ? @ 0x00007fbd539f3520\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.959357 [ 145204 ] {} <Fatal> BaseDaemon: 2.0. inlined from ./contrib/boost/boost/smart_ptr/detail/atomic_count_gcc_atomic.hpp:38: boost::detail::atomic_count::operator++()\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.959400 [ 145204 ] {} <Fatal> BaseDaemon: 2.1. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ref_counter.hpp:82: boost::sp_adl_block::thread_safe_counter::increment(boost::detail::atomic_count&)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.959437 [ 145204 ] {} <Fatal> BaseDaemon: 2.2. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ref_counter.hpp:166: void boost::sp_adl_block::intrusive_ptr_add_ref<DB::IColumn, boost::sp_adl_block::thread_safe_counter>(boost::sp_adl_block::intrusive_ref_counter<DB::IColumn, boost::sp_adl_block::thread_safe_counter> const*)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.959460 [ 145204 ] {} <Fatal> BaseDaemon: 2.3. inlined from ./src/Columns/IColumn.cpp:468: DB::intrusive_ptr_add_ref(DB::IColumn const*)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.959486 [ 145204 ] {} <Fatal> BaseDaemon: 2.4. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:95: intrusive_ptr\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.959532 [ 145204 ] {} <Fatal> BaseDaemon: 2.5. inlined from ./src/Common/COW.h:133: immutable_ptr\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.959616 [ 145204 ] {} <Fatal> BaseDaemon: 2. ./build_docker/./src/DataTypes/Serializations/SerializationTuple.cpp:679: DB::SerializationTuple::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011cb41a6\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.966956 [ 145204 ] {} <Fatal> BaseDaemon: 3. ./build_docker/./src/DataTypes/Serializations/SerializationArray.cpp:261: DB::SerializationArray::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011c306fd\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.972450 [ 145204 ] {} <Fatal> BaseDaemon: 4. ./build_docker/./src/DataTypes/Serializations/ISerialization.cpp:104: DB::ISerialization::enumerateStreams(std::function<void (DB::ISerialization::SubstreamPath const&)> const&, std::shared_ptr<DB::IDataType const> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const @ 0x0000000011c27088\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.990338 [ 145204 ] {} <Fatal> BaseDaemon: 5.0. inlined from ./build_docker/./src/Interpreters/inplaceBlockConversions.cpp:229: DB::collectOffsetsColumns(DB::NamesAndTypesList const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:50.992025 [ 145204 ] {} <Fatal> BaseDaemon: 5. ./build_docker/./src/Interpreters/inplaceBlockConversions.cpp:346: DB::fillMissingColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long, DB::NamesAndTypesList const&, DB::NamesAndTypesList const&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const>) @ 0x0000000012c87c1a\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.007443 [ 145204 ] {} <Fatal> BaseDaemon: 6. ./build_docker/./src/Storages/MergeTree/IMergeTreeReader.cpp:125: DB::IMergeTreeReader::fillMissingColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, bool&, unsigned long) const @ 0x0000000013a680f7\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.028565 [ 145204 ] {} <Fatal> BaseDaemon: 7. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1062: DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x0000000013a77106\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.045064 [ 145204 ] {} <Fatal> BaseDaemon: 8. ./build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:167: DB::MergeTreeReadTask::read() @ 0x0000000013a95b53\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.118983 [ 145204 ] {} <Fatal> BaseDaemon: 9. ./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38: DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001449fbcc\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.132930 [ 145204 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:194: DB::MergeTreeSelectProcessor::read() @ 0x0000000013a91c07\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.141479 [ 145204 ] {} <Fatal> BaseDaemon: 11. ./build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:228: DB::MergeTreeSource::tryGenerate() @ 0x00000000144de2bc\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.156678 [ 145204 ] {} <Fatal> BaseDaemon: 12. ./build_docker/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x0000000013feab47\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.160167 [ 145204 ] {} <Fatal> BaseDaemon: 13.0. inlined from ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:52: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.160219 [ 145204 ] {} <Fatal> BaseDaemon: 13. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:101: DB::ExecutionThreadContext::executeTask() @ 0x0000000014008ab6\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.167805 [ 145204 ] {} <Fatal> BaseDaemon: 14. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:291: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000013ffa804\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.176088 [ 145204 ] {} <Fatal> BaseDaemon: 15.0. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:257: DB::PipelineExecutor::executeSingleThread(unsigned long)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.193538 [ 145204 ] {} <Fatal> BaseDaemon: 15.1. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:456: DB::PipelineExecutor::executeImpl(unsigned long, bool)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.193576 [ 145204 ] {} <Fatal> BaseDaemon: 15. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:128: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000013ff9abe\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205392 [ 145204 ] {} <Fatal> BaseDaemon: 16.0. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205429 [ 145204 ] {} <Fatal> BaseDaemon: 16.1. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205461 [ 145204 ] {} <Fatal> BaseDaemon: 16.2. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205484 [ 145204 ] {} <Fatal> BaseDaemon: 16.3. inlined from ./contrib/llvm-project/libcxx/include/tuple:1424: decltype(auto) std::__apply_tuple_impl[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205506 [ 145204 ] {} <Fatal> BaseDaemon: 16.4. inlined from ./contrib/llvm-project/libcxx/include/tuple:1428: decltype(auto) std::apply[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205523 [ 145204 ] {} <Fatal> BaseDaemon: 16.5. inlined from ./src/Common/ThreadPool.h:311: operator()\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205540 [ 145204 ] {} <Fatal> BaseDaemon: 16.6. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205578 [ 145204 ] {} <Fatal> BaseDaemon: 16.7. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:419: void std::__invoke_void_return_wrapper<void, true>::__call[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205613 [ 145204 ] {} <Fatal> BaseDaemon: 16.8. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:208: ?\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.205629 [ 145204 ] {} <Fatal> BaseDaemon: 16. ./contrib/llvm-project/libcxx/include/__functional/function.h:608: ? @ 0x000000001400c26a\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.212787 [ 145204 ] {} <Fatal> BaseDaemon: 17.0. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ?\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.212812 [ 145204 ] {} <Fatal> BaseDaemon: 17.1. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:981: ?\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.212834 [ 145204 ] {} <Fatal> BaseDaemon: 17. ./build_docker/./src/Common/ThreadPool.cpp:785: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000de6249f\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.223651 [ 145204 ] {} <Fatal> BaseDaemon: 18.0. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:ne180100]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.224650 [ 145204 ] {} <Fatal> BaseDaemon: 18.1. inlined from ./contrib/llvm-project/libcxx/include/__thread/thread.h:193: void std::__thread_execute[abi:ne180100]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.224670 [ 145204 ] {} <Fatal> BaseDaemon: 18. ./contrib/llvm-project/libcxx/include/__thread/thread.h:202: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000de6961a\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.236674 [ 145204 ] {} <Fatal> BaseDaemon: 19. ? @ 0x00007fbd53a45ac3\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.242226 [ 145204 ] {} <Fatal> BaseDaemon: 20. ? @ 0x00007fbd53ad7850\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.244462 [ 145204 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.559425 [ 145204 ] {} <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\n/var/log/clickhouse-server/clickhouse-server.err.log:2025.02.11 21:49:51.559573 [ 145204 ] {} <Fatal> BaseDaemon: Changed settings: min_compress_block_size = 2716104, max_compress_block_size = 2816043, max_block_size = 70665, min_external_table_block_size_bytes = 1, max_joined_block_size_rows = 66035, max_insert_threads = 3, max_threads = 1, max_parsing_threads = 1, max_read_buffer_size = 829031, connect_timeout_with_failover_ms = 2000, connect_timeout_with_failover_secure_ms = 3000, idle_connection_timeout = 36000, s3_max_get_rps = 1000000, s3_max_get_burst = 2000000, s3_max_put_rps = 1000000, s3_max_put_burst = 2000000, s3_check_objects_after_upload = true, use_uncompressed_cache = true, max_remote_read_network_bandwidth = 1000000000000, max_remote_write_network_bandwidth = 1000000000000, max_local_read_bandwidth = 1000000000000, max_local_write_bandwidth = 1000000000000, stream_like_engine_allow_direct_select = true, replication_wait_for_inactive_replica_timeout = 30, min_count_to_compile_expression = 0, compile_aggregate_expressions = false, min_count_to_compile_aggregate_expression = 0, compile_sort_description = false, min_count_to_compile_sort_description = 0, group_by_two_level_threshold = 511163, group_by_two_level_threshold_bytes = 34625860, distributed_aggregation_memory_efficient = false, enable_memory_bound_merging_of_aggregation_results = false, allow_nonconst_timezone_arguments = true, input_format_parallel_parsing = false, min_chunk_bytes_for_parallel_parsing = 4882886, merge_tree_coarse_index_granularity = 32, min_bytes_to_use_direct_io = 5521228883, min_bytes_to_use_mmap_io = 10737418240, log_queries = true, insert_deduplicate = false, insert_quorum_timeout = 60000, merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.6299999952316284, http_wait_end_of_query = true, http_response_buffer_size = 502633, fsync_metadata = true, query_plan_join_swap_table = true, http_send_timeout = 60., http_receive_timeout = 60., use_index_for_in_with_subqueries_max_values = 1000000000, opentelemetry_start_trace_probability = 0.10000000149011612, max_rows_to_read = 20000000, max_bytes_to_read = 1000000000000, max_bytes_to_read_leaf = 1000000000000, max_rows_to_group_by = 10000000000, max_bytes_before_external_group_by = 10737418240, max_bytes_ratio_before_external_group_by = 0., max_rows_to_sort = 10000000000, max_bytes_to_sort = 10000000000, prefer_external_sort_block_bytes = 1, max_bytes_before_external_sort = 10737418240, max_bytes_ratio_before_external_sort = 0., max_bytes_before_remerge_sort = 49877207, max_result_rows = 1000000000, max_result_bytes = 1000000000, max_execution_time = 600., max_execution_time_leaf = 600., max_execution_speed = 100000000000, max_execution_speed_bytes = 10000000000000, timeout_before_checking_execution_speed = 300., max_estimated_execution_time = 600., max_columns_to_read = 20000, max_temporary_columns = 20000, max_temporary_non_const_columns = 20000, max_rows_in_set = 10000000000, max_bytes_in_set = 10000000000, max_rows_in_join = 10000000000, max_bytes_in_join = 10000000000, cross_join_min_rows_to_compress = 0, cross_join_min_bytes_to_compress = 1, max_rows_to_transfer = 1000000000, max_bytes_to_transfer = 1000000000, max_rows_in_distinct = 10000000000, max_bytes_in_distinct = 10000000000, max_memory_usage = 5000000000, max_memory_usage_for_user = 32000000000, max_untracked_memory = 1048576, memory_profiler_step = 1048576, max_network_bandwidth = 100000000000, max_network_bytes = 1000000000000, max_network_bandwidth_for_user = 100000000000, max_network_bandwidth_for_all_users = 100000000000, max_temporary_data_on_disk_size_for_user = 100000000000, max_temporary_data_on_disk_size_for_query = 100000000000, max_backup_bandwidth = 100000000000, log_comment = '03352_concurrent_rename_alter.sh', send_logs_level = 'warning', prefer_localhost_replica = false, aggregation_in_order_max_block_bytes = 8095311, read_in_order_two_level_merge_threshold = 82, max_hyperscan_regexp_length = 1000000, max_hyperscan_regexp_total_length = 10000000, allow_introspection_functions = true, database_atomic_wait_for_drop_and_detach_synchronously = true, optimize_if_chain_to_multiif = true, optimize_functions_to_subcolumns = false, query_cache_max_size_in_bytes = 10000000, query_cache_max_entries = 100000, distributed_ddl_entry_format_version = 6, external_storage_max_read_rows = 10000000000, external_storage_max_read_bytes = 10000000000, local_filesystem_read_method = 'mmap', remote_filesystem_read_prefetch = false, merge_tree_min_bytes_per_task_for_remote_reading = 8388608, merge_tree_compact_parts_min_granules_to_multibuffer_read = 47, async_insert_busy_timeout_max_ms = 5000, enable_filesystem_cache = true, enable_filesystem_cache_on_write_operations = true, read_from_filesystem_cache_if_exists_otherwise_bypass_cache = true, filesystem_cache_segments_batch_size = 10, load_marks_asynchronously = true, allow_prefetched_read_pool_for_remote_filesystem = true, allow_prefetched_read_pool_for_local_filesystem = false, filesystem_prefetch_step_marks = 50, filesystem_prefetch_max_memory_usage = 33554432, filesystem_prefetches_limit = 0, max_streams_for_merge_tree_reading = 1000, insert_keeper_max_retries = 100, insert_keeper_retry_initial_backoff_ms = 1, insert_keeper_retry_max_backoff_ms = 10, insert_keeper_fault_injection_probability = 0.009999999776482582, optimize_distinct_in_order = false, allow_experimental_parallel_reading_from_replicas = 1, max_parallel_replicas = 10, cluster_for_parallel_replicas = 'default_parallel_replicas', parallel_replicas_for_non_replicated_merge_tree = true, session_timezone = 'Africa/Khartoum', optimize_extract_common_expressions = false\n```\n",
  "hints_text": "It is a regression between 24.12 and 25.1: \n- 24.12: https://fiddle.clickhouse.com/73d2b786-aca5-440d-82fa-303253cb3163\n- 25.1: https://fiddle.clickhouse.com/d53306fa-d517-4ad0-8e5a-286af18abd36\n\nAnother one here: https://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=75922&sha=latest&name_0=PR&name_1=Stateless+tests+%28release%2C+ParallelReplicas%2C+s3+storage%29\n\nRunning: `03352_concurrent_rename_alter.sh`\n\n```\n2025-02-11 12:57:41 Thread 1373 \"QueryPullPipeEx\" received signal SIGSEGV, Segmentation fault.\n2025-02-11 12:57:41 [Switching to Thread 0x7f848a59b640 (LWP 13253)]\n2025-02-11 12:57:41 0x0000000011cb42a5 in DB::SerializationTuple::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const ()\n2025-02-11 12:57:41 #0  0x0000000011cb42a5 in DB::SerializationTuple::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #1  0x0000000011c307fd in DB::SerializationArray::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #2  0x0000000011c27188 in DB::ISerialization::enumerateStreams(std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, std::__1::shared_ptr<DB::IDataType const> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #3  0x0000000012c8803a in DB::fillMissingColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&, unsigned long, DB::NamesAndTypesList const&, DB::NamesAndTypesList const&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>) ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #4  0x0000000013a68517 in DB::IMergeTreeReader::fillMissingColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&, bool&, unsigned long) const ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #5  0x0000000013a77526 in DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #6  0x0000000013a95f73 in DB::MergeTreeReadTask::read() ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #7  0x000000001449ffec in DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #8  0x0000000013a92027 in DB::MergeTreeSelectProcessor::read() ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #9  0x00000000144de6dc in DB::MergeTreeSource::tryGenerate() ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #10 0x0000000013feaf67 in DB::ISource::work() ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #11 0x0000000014008ed6 in DB::ExecutionThreadContext::executeTask() ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #12 0x0000000013ffac24 in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #13 0x0000000013ff9ede in DB::PipelineExecutor::execute(unsigned long, bool) ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #14 0x000000001400c68a in void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}, void ()> >(std::__1::__function::__policy_storage const*) ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #15 0x000000000de6249f in ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker() ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #16 0x000000000de6961a in void* std::__1::__thread_proxy[abi:ne180100]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*> >(void*) ()\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #17 0x00007f91a1b9cac3 in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n2025-02-11 12:57:41 No symbol table info available.\n2025-02-11 12:57:41 #18 0x00007f91a1c2e850 in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n2025-02-11 12:57:41 No symbol table info available.\n```\n\n```\n2025.02.11 12:57:41.860604 [ 249067 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\n2025.02.11 12:57:41.863129 [ 249067 ] {} <Fatal> BaseDaemon: (version 25.2.1.1814, build id: 74825E83D45690BCCD959BC0D4C89A034C08C68D, git hash: feedde93835a2a2e99f2427f6b2fa4c3a54cb893, architecture: x86_64) (from thread 13253) Received signal 11\n2025.02.11 12:57:41.863148 [ 249067 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\n2025.02.11 12:57:41.860859 [ 249066 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\n2025.02.11 12:57:41.863184 [ 249066 ] {} <Fatal> BaseDaemon: (version 25.2.1.1814, build id: 74825E83D45690BCCD959BC0D4C89A034C08C68D, git hash: feedde93835a2a2e99f2427f6b2fa4c3a54cb893, architecture: x86_64) (from thread 200155) Received signal 11\n2025.02.11 12:57:41.863199 [ 249066 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\n2025.02.11 12:57:41.863216 [ 249066 ] {} <Fatal> BaseDaemon: Address: 0x3530e70. Access: write. Attempted access has violated the permissions assigned to the memory area.\n2025.02.11 12:57:41.863239 [ 249066 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000e0f3495 0x00007f91a1b4a520 0x0000000011cb42a6 0x0000000011c307fd 0x0000000011c27188 0x0000000012c8803a 0x0000000013a68517 0x0000000013a77526 0x0000000013a95f73 0x000000001449ffec 0x0000000013a92027 0x00000000144de6dc 0x0000000013feaf67 0x0000000014008ed6 0x0000000013ffac24 0x0000000013ff9ede 0x000000001400c68a 0x000000000de6249f 0x000000000de6961a 0x00007f91a1b9cac3 0x00007f91a1c2e850\n2025.02.11 12:57:41.863260 [ 249066 ] {} <Fatal> BaseDaemon: ########################################\n2025.02.11 12:57:41.863154 [ 249067 ] {} <Fatal> BaseDaemon: Address: 0x34b4398. Access: write. Attempted access has violated the permissions assigned to the memory area.\n2025.02.11 12:57:41.863593 [ 249067 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000e0f3495 0x00007f91a1b4a520 0x0000000011cb42a6 0x0000000011c307fd 0x0000000011c27188 0x0000000012c8803a 0x0000000013a68517 0x0000000013a77526 0x0000000013a95f73 0x000000001449ffec 0x0000000013a92027 0x00000000144de6dc 0x0000000013feaf67 0x0000000014008ed6 0x0000000013ffac24 0x0000000013ff9ede 0x000000001400c68a 0x000000000de6249f 0x000000000de6961a 0x00007f91a1b9cac3 0x00007f91a1c2e850\n2025.02.11 12:57:41.863629 [ 249067 ] {} <Fatal> BaseDaemon: ########################################\n2025.02.11 12:57:41.863682 [ 249067 ] {} <Fatal> BaseDaemon: (version 25.2.1.1814, build id: 74825E83D45690BCCD959BC0D4C89A034C08C68D, git hash: feedde93835a2a2e99f2427f6b2fa4c3a54cb893) (from thread 13253) (query_id: 53096db6-cd64-4d6f-bb33-680305d072d8) (query: SELECT count() FROM t_rename_alter WHERE NOT ignore(*) FORMAT Null;) Received signal Segmentation fault (11)\n2025.02.11 12:57:41.863325 [ 249066 ] {} <Fatal> BaseDaemon: (version 25.2.1.1814, build id: 74825E83D45690BCCD959BC0D4C89A034C08C68D, git hash: feedde93835a2a2e99f2427f6b2fa4c3a54cb893) (from thread 200155) (query_id: 2b2cd59a-a2d7-4b8b-ae11-e380f9adf366) (query: SELECT count() FROM t_rename_alter WHERE NOT ignore(*) FORMAT Null;) Received signal Segmentation fault (11)\n2025.02.11 12:57:41.875111 [ 249066 ] {} <Fatal> BaseDaemon: Address: 0x3530e70. Access: write. Attempted access has violated the permissions assigned to the memory area.\n2025.02.11 12:57:41.863701 [ 249067 ] {} <Fatal> BaseDaemon: Address: 0x34b4398. Access: write. Attempted access has violated the permissions assigned to the memory area.\n2025.02.11 12:57:41.875441 [ 249067 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000e0f3495 0x00007f91a1b4a520 0x0000000011cb42a6 0x0000000011c307fd 0x0000000011c27188 0x0000000012c8803a 0x0000000013a68517 0x0000000013a77526 0x0000000013a95f73 0x000000001449ffec 0x0000000013a92027 0x00000000144de6dc 0x0000000013feaf67 0x0000000014008ed6 0x0000000013ffac24 0x0000000013ff9ede 0x000000001400c68a 0x000000000de6249f 0x000000000de6961a 0x00007f91a1b9cac3 0x00007f91a1c2e850\n2025.02.11 12:57:41.875144 [ 249066 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000e0f3495 0x00007f91a1b4a520 0x0000000011cb42a6 0x0000000011c307fd 0x0000000011c27188 0x0000000012c8803a 0x0000000013a68517 0x0000000013a77526 0x0000000013a95f73 0x000000001449ffec 0x0000000013a92027 0x00000000144de6dc 0x0000000013feaf67 0x0000000014008ed6 0x0000000013ffac24 0x0000000013ff9ede 0x000000001400c68a 0x000000000de6249f 0x000000000de6961a 0x00007f91a1b9cac3 0x00007f91a1c2e850\n2025.02.11 12:57:41.888802 [ 249067 ] {} <Fatal> BaseDaemon: 0. ./build_docker/./src/Common/SignalHandlers.cpp:107: signalHandler(int, siginfo_t*, void*) @ 0x000000000e0f3495\n2025.02.11 12:57:41.891868 [ 249067 ] {} <Fatal> BaseDaemon: 1. ? @ 0x00007f91a1b4a520\n2025.02.11 12:57:41.890582 [ 249066 ] {} <Fatal> BaseDaemon: 0. ./build_docker/./src/Common/SignalHandlers.cpp:107: signalHandler(int, siginfo_t*, void*) @ 0x000000000e0f3495\n2025.02.11 12:57:41.892722 [ 249066 ] {} <Fatal> BaseDaemon: 1. ? @ 0x00007f91a1b4a520\n2025.02.11 12:57:41.905943 [ 249067 ] {} <Fatal> BaseDaemon: 2.0. inlined from ./contrib/boost/boost/smart_ptr/detail/atomic_count_gcc_atomic.hpp:38: boost::detail::atomic_count::operator++()\n2025.02.11 12:57:41.905958 [ 249066 ] {} <Fatal> BaseDaemon: 2.0. inlined from ./contrib/boost/boost/smart_ptr/detail/atomic_count_gcc_atomic.hpp:38: boost::detail::atomic_count::operator++()\n2025.02.11 12:57:41.906982 [ 249067 ] {} <Fatal> BaseDaemon: 2.1. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ref_counter.hpp:82: boost::sp_adl_block::thread_safe_counter::increment(boost::detail::atomic_count&)\n2025.02.11 12:57:41.907011 [ 249067 ] {} <Fatal> BaseDaemon: 2.2. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ref_counter.hpp:166: void boost::sp_adl_block::intrusive_ptr_add_ref<DB::IColumn, boost::sp_adl_block::thread_safe_counter>(boost::sp_adl_block::intrusive_ref_counter<DB::IColumn, boost::sp_adl_block::thread_safe_counter> const*)\n2025.02.11 12:57:41.907035 [ 249067 ] {} <Fatal> BaseDaemon: 2.3. inlined from ./src/Columns/IColumn.cpp:468: DB::intrusive_ptr_add_ref(DB::IColumn const*)\n2025.02.11 12:57:41.907058 [ 249067 ] {} <Fatal> BaseDaemon: 2.4. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:95: intrusive_ptr\n2025.02.11 12:57:41.909555 [ 249066 ] {} <Fatal> BaseDaemon: 2.1. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ref_counter.hpp:82: boost::sp_adl_block::thread_safe_counter::increment(boost::detail::atomic_count&)\n2025.02.11 12:57:41.909854 [ 249066 ] {} <Fatal> BaseDaemon: 2.2. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ref_counter.hpp:166: void boost::sp_adl_block::intrusive_ptr_add_ref<DB::IColumn, boost::sp_adl_block::thread_safe_counter>(boost::sp_adl_block::intrusive_ref_counter<DB::IColumn, boost::sp_adl_block::thread_safe_counter> const*)\n2025.02.11 12:57:41.907071 [ 249067 ] {} <Fatal> BaseDaemon: 2.5. inlined from ./src/Common/COW.h:133: immutable_ptr\n2025.02.11 12:57:41.914756 [ 249067 ] {} <Fatal> BaseDaemon: 2. ./build_docker/./src/DataTypes/Serializations/SerializationTuple.cpp:679: DB::SerializationTuple::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011cb42a6\n2025.02.11 12:57:41.910466 [ 249066 ] {} <Fatal> BaseDaemon: 2.3. inlined from ./src/Columns/IColumn.cpp:468: DB::intrusive_ptr_add_ref(DB::IColumn const*)\n2025.02.11 12:57:41.915804 [ 249066 ] {} <Fatal> BaseDaemon: 2.4. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:95: intrusive_ptr\n2025.02.11 12:57:41.915819 [ 249066 ] {} <Fatal> BaseDaemon: 2.5. inlined from ./src/Common/COW.h:133: immutable_ptr\n2025.02.11 12:57:41.915841 [ 249066 ] {} <Fatal> BaseDaemon: 2. ./build_docker/./src/DataTypes/Serializations/SerializationTuple.cpp:679: DB::SerializationTuple::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011cb42a6\n2025.02.11 12:57:41.927874 [ 249066 ] {} <Fatal> BaseDaemon: 3. ./build_docker/./src/DataTypes/Serializations/SerializationArray.cpp:261: DB::SerializationArray::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011c307fd\n2025.02.11 12:57:41.924135 [ 249067 ] {} <Fatal> BaseDaemon: 3. ./build_docker/./src/DataTypes/Serializations/SerializationArray.cpp:261: DB::SerializationArray::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011c307fd\n2025.02.11 12:57:41.934829 [ 249066 ] {} <Fatal> BaseDaemon: 4. ./build_docker/./src/DataTypes/Serializations/ISerialization.cpp:104: DB::ISerialization::enumerateStreams(std::function<void (DB::ISerialization::SubstreamPath const&)> const&, std::shared_ptr<DB::IDataType const> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const @ 0x0000000011c27188\n2025.02.11 12:57:41.935014 [ 249067 ] {} <Fatal> BaseDaemon: 4. ./build_docker/./src/DataTypes/Serializations/ISerialization.cpp:104: DB::ISerialization::enumerateStreams(std::function<void (DB::ISerialization::SubstreamPath const&)> const&, std::shared_ptr<DB::IDataType const> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const @ 0x0000000011c27188\n2025.02.11 12:57:41.949129 [ 249066 ] {} <Fatal> BaseDaemon: 5.0. inlined from ./build_docker/./src/Interpreters/inplaceBlockConversions.cpp:229: DB::collectOffsetsColumns(DB::NamesAndTypesList const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&)\n2025.02.11 12:57:41.949176 [ 249066 ] {} <Fatal> BaseDaemon: 5. ./build_docker/./src/Interpreters/inplaceBlockConversions.cpp:346: DB::fillMissingColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long, DB::NamesAndTypesList const&, DB::NamesAndTypesList const&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const>) @ 0x0000000012c8803a\n2025.02.11 12:57:41.951397 [ 249067 ] {} <Fatal> BaseDaemon: 5.0. inlined from ./build_docker/./src/Interpreters/inplaceBlockConversions.cpp:229: DB::collectOffsetsColumns(DB::NamesAndTypesList const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&)\n2025.02.11 12:57:41.954240 [ 249067 ] {} <Fatal> BaseDaemon: 5. ./build_docker/./src/Interpreters/inplaceBlockConversions.cpp:346: DB::fillMissingColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long, DB::NamesAndTypesList const&, DB::NamesAndTypesList const&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const>) @ 0x0000000012c8803a\n2025.02.11 12:57:41.954272 [ 249091 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\n2025.02.11 12:57:41.954316 [ 249091 ] {} <Fatal> BaseDaemon: (version 25.2.1.1814, build id: 74825E83D45690BCCD959BC0D4C89A034C08C68D, git hash: feedde93835a2a2e99f2427f6b2fa4c3a54cb893, architecture: x86_64) (from thread 200247) Received signal 11\n2025.02.11 12:57:41.954333 [ 249091 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\n2025.02.11 12:57:41.954342 [ 249091 ] {} <Fatal> BaseDaemon: Address: 0x34b4398. Access: write. Attempted access has violated the permissions assigned to the memory area.\n2025.02.11 12:57:41.954376 [ 249091 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000e0f3495 0x00007f91a1b4a520 0x0000000011cb42a6 0x0000000011c307fd 0x0000000011c27188 0x0000000012c8803a 0x0000000013a68517 0x0000000013a77526 0x0000000013a95f73 0x000000001449ffec 0x0000000013a92027 0x00000000144de6dc 0x0000000013feaf67 0x0000000014008ed6 0x0000000013ffac24 0x0000000013ff9ede 0x000000001400c68a 0x000000000de6249f 0x000000000de6961a 0x00007f91a1b9cac3 0x00007f91a1c2e850\n2025.02.11 12:57:41.954393 [ 249091 ] {} <Fatal> BaseDaemon: ########################################\n2025.02.11 12:57:41.954443 [ 249091 ] {} <Fatal> BaseDaemon: (version 25.2.1.1814, build id: 74825E83D45690BCCD959BC0D4C89A034C08C68D, git hash: feedde93835a2a2e99f2427f6b2fa4c3a54cb893) (from thread 200247) (query_id: d67a6792-1630-4bea-b906-7622f9aa4214) (query: SELECT count() FROM t_rename_alter WHERE NOT ignore(*) FORMAT Null;) Received signal Segmentation fault (11)\n2025.02.11 12:57:41.954460 [ 249091 ] {} <Fatal> BaseDaemon: Address: 0x34b4398. Access: write. Attempted access has violated the permissions assigned to the memory area.\n2025.02.11 12:57:41.954474 [ 249091 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000e0f3495 0x00007f91a1b4a520 0x0000000011cb42a6 0x0000000011c307fd 0x0000000011c27188 0x0000000012c8803a 0x0000000013a68517 0x0000000013a77526 0x0000000013a95f73 0x000000001449ffec 0x0000000013a92027 0x00000000144de6dc 0x0000000013feaf67 0x0000000014008ed6 0x0000000013ffac24 0x0000000013ff9ede 0x000000001400c68a 0x000000000de6249f 0x000000000de6961a 0x00007f91a1b9cac3 0x00007f91a1c2e850\n2025.02.11 12:57:41.963993 [ 249091 ] {} <Fatal> BaseDaemon: 0. ./build_docker/./src/Common/SignalHandlers.cpp:107: signalHandler(int, siginfo_t*, void*) @ 0x000000000e0f3495\n2025.02.11 12:57:41.964904 [ 249091 ] {} <Fatal> BaseDaemon: 1. ? @ 0x00007f91a1b4a520\n2025.02.11 12:57:41.966961 [ 249066 ] {} <Fatal> BaseDaemon: 6. ./build_docker/./src/Storages/MergeTree/IMergeTreeReader.cpp:125: DB::IMergeTreeReader::fillMissingColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, bool&, unsigned long) const @ 0x0000000013a68517\n2025.02.11 12:57:41.985198 [ 249066 ] {} <Fatal> BaseDaemon: 7. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1062: DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x0000000013a77526\n2025.02.11 12:57:41.986271 [ 249091 ] {} <Fatal> BaseDaemon: 2.0. inlined from ./contrib/boost/boost/smart_ptr/detail/atomic_count_gcc_atomic.hpp:38: boost::detail::atomic_count::operator++()\n2025.02.11 12:57:41.987629 [ 249067 ] {} <Fatal> BaseDaemon: 6. ./build_docker/./src/Storages/MergeTree/IMergeTreeReader.cpp:125: DB::IMergeTreeReader::fillMissingColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, bool&, unsigned long) const @ 0x0000000013a68517\n2025.02.11 12:57:41.998956 [ 249091 ] {} <Fatal> BaseDaemon: 2.1. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ref_counter.hpp:82: boost::sp_adl_block::thread_safe_counter::increment(boost::detail::atomic_count&)\n2025.02.11 12:57:41.998982 [ 249091 ] {} <Fatal> BaseDaemon: 2.2. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ref_counter.hpp:166: void boost::sp_adl_block::intrusive_ptr_add_ref<DB::IColumn, boost::sp_adl_block::thread_safe_counter>(boost::sp_adl_block::intrusive_ref_counter<DB::IColumn, boost::sp_adl_block::thread_safe_counter> const*)\n2025.02.11 12:57:41.999002 [ 249091 ] {} <Fatal> BaseDaemon: 2.3. inlined from ./src/Columns/IColumn.cpp:468: DB::intrusive_ptr_add_ref(DB::IColumn const*)\n2025.02.11 12:57:41.999024 [ 249091 ] {} <Fatal> BaseDaemon: 2.4. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:95: intrusive_ptr\n2025.02.11 12:57:41.999045 [ 249091 ] {} <Fatal> BaseDaemon: 2.5. inlined from ./src/Common/COW.h:133: immutable_ptr\n2025.02.11 12:57:41.999068 [ 249091 ] {} <Fatal> BaseDaemon: 2. ./build_docker/./src/DataTypes/Serializations/SerializationTuple.cpp:679: DB::SerializationTuple::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011cb42a6\n2025.02.11 12:57:42.006135 [ 249091 ] {} <Fatal> BaseDaemon: 3. ./build_docker/./src/DataTypes/Serializations/SerializationArray.cpp:261: DB::SerializationArray::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011c307fd\n2025.02.11 12:57:42.023363 [ 249091 ] {} <Fatal> BaseDaemon: 4. ./build_docker/./src/DataTypes/Serializations/ISerialization.cpp:104: DB::ISerialization::enumerateStreams(std::function<void (DB::ISerialization::SubstreamPath const&)> const&, std::shared_ptr<DB::IDataType const> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const @ 0x0000000011c27188\n2025.02.11 12:57:42.009018 [ 249066 ] {} <Fatal> BaseDaemon: 8. ./build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:167: DB::MergeTreeReadTask::read() @ 0x0000000013a95f73\n2025.02.11 12:57:42.010235 [ 249067 ] {} <Fatal> BaseDaemon: 7. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1062: DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x0000000013a77526\n2025.02.11 12:57:42.050092 [ 249091 ] {} <Fatal> BaseDaemon: 5.0. inlined from ./build_docker/./src/Interpreters/inplaceBlockConversions.cpp:229: DB::collectOffsetsColumns(DB::NamesAndTypesList const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&)\n2025.02.11 12:57:42.072352 [ 249091 ] {} <Fatal> BaseDaemon: 5. ./build_docker/./src/Interpreters/inplaceBlockConversions.cpp:346: DB::fillMissingColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long, DB::NamesAndTypesList const&, DB::NamesAndTypesList const&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const>) @ 0x0000000012c8803a\n2025.02.11 12:57:42.101068 [ 249067 ] {} <Fatal> BaseDaemon: 8. ./build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:167: DB::MergeTreeReadTask::read() @ 0x0000000013a95f73\n2025.02.11 12:57:42.103190 [ 249091 ] {} <Fatal> BaseDaemon: 6. ./build_docker/./src/Storages/MergeTree/IMergeTreeReader.cpp:125: DB::IMergeTreeReader::fillMissingColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, bool&, unsigned long) const @ 0x0000000013a68517\n2025.02.11 12:57:42.140657 [ 249091 ] {} <Fatal> BaseDaemon: 7. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1062: DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x0000000013a77526\n2025.02.11 12:57:42.152090 [ 249091 ] {} <Fatal> BaseDaemon: 8. ./build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:167: DB::MergeTreeReadTask::read() @ 0x0000000013a95f73\n2025.02.11 12:57:42.162106 [ 249066 ] {} <Fatal> BaseDaemon: 9. ./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38: DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001449ffec\n2025.02.11 12:57:42.188794 [ 249067 ] {} <Fatal> BaseDaemon: 9. ./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38: DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001449ffec\n2025.02.11 12:57:42.202336 [ 249067 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:194: DB::MergeTreeSelectProcessor::read() @ 0x0000000013a92027\n2025.02.11 12:57:42.208434 [ 249066 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:194: DB::MergeTreeSelectProcessor::read() @ 0x0000000013a92027\n2025.02.11 12:57:42.210508 [ 249067 ] {} <Fatal> BaseDaemon: 11. ./build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:228: DB::MergeTreeSource::tryGenerate() @ 0x00000000144de6dc\n2025.02.11 12:57:42.227612 [ 249067 ] {} <Fatal> BaseDaemon: 12. ./build_docker/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x0000000013feaf67\n2025.02.11 12:57:42.231065 [ 249067 ] {} <Fatal> BaseDaemon: 13.0. inlined from ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:52: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\n2025.02.11 12:57:42.234925 [ 249067 ] {} <Fatal> BaseDaemon: 13. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:101: DB::ExecutionThreadContext::executeTask() @ 0x0000000014008ed6\n2025.02.11 12:57:42.231279 [ 249066 ] {} <Fatal> BaseDaemon: 11. ./build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:228: DB::MergeTreeSource::tryGenerate() @ 0x00000000144de6dc\n2025.02.11 12:57:42.244499 [ 249067 ] {} <Fatal> BaseDaemon: 14. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:291: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000013ffac24\n2025.02.11 12:57:42.251978 [ 249091 ] {} <Fatal> BaseDaemon: 9. ./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38: DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001449ffec\n2025.02.11 12:57:42.252633 [ 249066 ] {} <Fatal> BaseDaemon: 12. ./build_docker/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x0000000013feaf67\n2025.02.11 12:57:42.256494 [ 249066 ] {} <Fatal> BaseDaemon: 13.0. inlined from ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:52: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\n2025.02.11 12:57:42.256547 [ 249066 ] {} <Fatal> BaseDaemon: 13. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:101: DB::ExecutionThreadContext::executeTask() @ 0x0000000014008ed6\n2025.02.11 12:57:42.263086 [ 249067 ] {} <Fatal> BaseDaemon: 15.0. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:257: DB::PipelineExecutor::executeSingleThread(unsigned long)\n2025.02.11 12:57:42.263129 [ 249067 ] {} <Fatal> BaseDaemon: 15.1. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:456: DB::PipelineExecutor::executeImpl(unsigned long, bool)\n2025.02.11 12:57:42.263162 [ 249067 ] {} <Fatal> BaseDaemon: 15. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:128: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000013ff9ede\n2025.02.11 12:57:42.266532 [ 249066 ] {} <Fatal> BaseDaemon: 14. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:291: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000013ffac24\n2025.02.11 12:57:42.268372 [ 249091 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:194: DB::MergeTreeSelectProcessor::read() @ 0x0000000013a92027\n2025.02.11 12:57:42.271132 [ 249067 ] {} <Fatal> BaseDaemon: 16.0. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\n2025.02.11 12:57:42.271170 [ 249067 ] {} <Fatal> BaseDaemon: 16.1. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()\n2025.02.11 12:57:42.271198 [ 249067 ] {} <Fatal> BaseDaemon: 16.2. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)\n2025.02.11 12:57:42.271222 [ 249067 ] {} <Fatal> BaseDaemon: 16.3. inlined from ./contrib/llvm-project/libcxx/include/tuple:1424: decltype(auto) std::__apply_tuple_impl[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)\n2025.02.11 12:57:42.271246 [ 249067 ] {} <Fatal> BaseDaemon: 16.4. inlined from ./contrib/llvm-project/libcxx/include/tuple:1428: decltype(auto) std::apply[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\n2025.02.11 12:57:42.271267 [ 249067 ] {} <Fatal> BaseDaemon: 16.5. inlined from ./src/Common/ThreadPool.h:311: operator()\n2025.02.11 12:57:42.271285 [ 249067 ] {} <Fatal> BaseDaemon: 16.6. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)\n2025.02.11 12:57:42.271322 [ 249067 ] {} <Fatal> BaseDaemon: 16.7. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:419: void std::__invoke_void_return_wrapper<void, true>::__call[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)\n2025.02.11 12:57:42.271340 [ 249067 ] {} <Fatal> BaseDaemon: 16.8. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:208: ?\n2025.02.11 12:57:42.271358 [ 249067 ] {} <Fatal> BaseDaemon: 16. ./contrib/llvm-project/libcxx/include/__functional/function.h:608: ? @ 0x000000001400c68a\n2025.02.11 12:57:42.276332 [ 249066 ] {} <Fatal> BaseDaemon: 15.0. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:257: DB::PipelineExecutor::executeSingleThread(unsigned long)\n2025.02.11 12:57:42.278494 [ 249067 ] {} <Fatal> BaseDaemon: 17.0. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ?\n2025.02.11 12:57:42.288108 [ 249067 ] {} <Fatal> BaseDaemon: 17.1. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:981: ?\n2025.02.11 12:57:42.288136 [ 249066 ] {} <Fatal> BaseDaemon: 15.1. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:456: DB::PipelineExecutor::executeImpl(unsigned long, bool)\n2025.02.11 12:57:42.288137 [ 249067 ] {} <Fatal> BaseDaemon: 17. ./build_docker/./src/Common/ThreadPool.cpp:785: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000de6249f\n2025.02.11 12:57:42.288173 [ 249066 ] {} <Fatal> BaseDaemon: 15. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:128: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000013ff9ede\n2025.02.11 12:57:42.279778 [ 249091 ] {} <Fatal> BaseDaemon: 11. ./build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:228: DB::MergeTreeSource::tryGenerate() @ 0x00000000144de6dc\n2025.02.11 12:57:42.295069 [ 249066 ] {} <Fatal> BaseDaemon: 16.0. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\n2025.02.11 12:57:42.295130 [ 249066 ] {} <Fatal> BaseDaemon: 16.1. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()\n2025.02.11 12:57:42.302265 [ 249091 ] {} <Fatal> BaseDaemon: 12. ./build_docker/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x0000000013feaf67\n2025.02.11 12:57:42.302285 [ 249067 ] {} <Fatal> BaseDaemon: 18.0. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:ne180100]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)\n2025.02.11 12:57:42.302343 [ 249067 ] {} <Fatal> BaseDaemon: 18.1. inlined from ./contrib/llvm-project/libcxx/include/__thread/thread.h:193: void std::__thread_execute[abi:ne180100]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)\n2025.02.11 12:57:42.302361 [ 249067 ] {} <Fatal> BaseDaemon: 18. ./contrib/llvm-project/libcxx/include/__thread/thread.h:202: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000de6961a\n2025.02.11 12:57:42.302385 [ 249067 ] {} <Fatal> BaseDaemon: 19. ? @ 0x00007f91a1b9cac3\n2025.02.11 12:57:42.302405 [ 249067 ] {} <Fatal> BaseDaemon: 20. ? @ 0x00007f91a1c2e850\n2025.02.11 12:57:42.302430 [ 249067 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\n2025.02.11 12:57:42.295174 [ 249066 ] {} <Fatal> BaseDaemon: 16.2. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)\n2025.02.11 12:57:42.306073 [ 249091 ] {} <Fatal> BaseDaemon: 13.0. inlined from ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:52: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\n2025.02.11 12:57:42.313694 [ 249091 ] {} <Fatal> BaseDaemon: 13. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:101: DB::ExecutionThreadContext::executeTask() @ 0x0000000014008ed6\n2025.02.11 12:57:42.313552 [ 249066 ] {} <Fatal> BaseDaemon: 16.3. inlined from ./contrib/llvm-project/libcxx/include/tuple:1424: decltype(auto) std::__apply_tuple_impl[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)\n2025.02.11 12:57:42.317913 [ 249066 ] {} <Fatal> BaseDaemon: 16.4. inlined from ./contrib/llvm-project/libcxx/include/tuple:1428: decltype(auto) std::apply[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\n2025.02.11 12:57:42.317969 [ 249066 ] {} <Fatal> BaseDaemon: 16.5. inlined from ./src/Common/ThreadPool.h:311: operator()\n2025.02.11 12:57:42.318013 [ 249066 ] {} <Fatal> BaseDaemon: 16.6. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)\n2025.02.11 12:57:42.318046 [ 249066 ] {} <Fatal> BaseDaemon: 16.7. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:419: void std::__invoke_void_return_wrapper<void, true>::__call[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)\n2025.02.11 12:57:42.318075 [ 249066 ] {} <Fatal> BaseDaemon: 16.8. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:208: ?\n2025.02.11 12:57:42.318091 [ 249066 ] {} <Fatal> BaseDaemon: 16. ./contrib/llvm-project/libcxx/include/__functional/function.h:608: ? @ 0x000000001400c68a\n2025.02.11 12:57:42.323452 [ 249091 ] {} <Fatal> BaseDaemon: 14. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:291: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000013ffac24\n2025.02.11 12:57:42.327456 [ 249066 ] {} <Fatal> BaseDaemon: 17.0. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ?\n2025.02.11 12:57:42.327520 [ 249066 ] {} <Fatal> BaseDaemon: 17.1. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:981: ?\n2025.02.11 12:57:42.327539 [ 249066 ] {} <Fatal> BaseDaemon: 17. ./build_docker/./src/Common/ThreadPool.cpp:785: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000de6249f\n2025.02.11 12:57:42.332339 [ 249091 ] {} <Fatal> BaseDaemon: 15.0. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:257: DB::PipelineExecutor::executeSingleThread(unsigned long)\n2025.02.11 12:57:42.332376 [ 249091 ] {} <Fatal> BaseDaemon: 15.1. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:456: DB::PipelineExecutor::executeImpl(unsigned long, bool)\n2025.02.11 12:57:42.332390 [ 249091 ] {} <Fatal> BaseDaemon: 15. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:128: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000013ff9ede\n2025.02.11 12:57:42.336741 [ 249066 ] {} <Fatal> BaseDaemon: 18.0. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:ne180100]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)\n2025.02.11 12:57:42.336803 [ 249066 ] {} <Fatal> BaseDaemon: 18.1. inlined from ./contrib/llvm-project/libcxx/include/__thread/thread.h:193: void std::__thread_execute[abi:ne180100]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)\n2025.02.11 12:57:42.337066 [ 249066 ] {} <Fatal> BaseDaemon: 18. ./contrib/llvm-project/libcxx/include/__thread/thread.h:202: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000de6961a\n2025.02.11 12:57:42.337136 [ 249066 ] {} <Fatal> BaseDaemon: 19. ? @ 0x00007f91a1b9cac3\n2025.02.11 12:57:42.337152 [ 249066 ] {} <Fatal> BaseDaemon: 20. ? @ 0x00007f91a1c2e850\n2025.02.11 12:57:42.337167 [ 249066 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\n2025.02.11 12:57:42.338394 [ 249091 ] {} <Fatal> BaseDaemon: 16.0. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\n2025.02.11 12:57:42.338425 [ 249091 ] {} <Fatal> BaseDaemon: 16.1. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()\n2025.02.11 12:57:42.338448 [ 249091 ] {} <Fatal> BaseDaemon: 16.2. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)\n2025.02.11 12:57:42.338468 [ 249091 ] {} <Fatal> BaseDaemon: 16.3. inlined from ./contrib/llvm-project/libcxx/include/tuple:1424: decltype(auto) std::__apply_tuple_impl[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)\n2025.02.11 12:57:42.338487 [ 249091 ] {} <Fatal> BaseDaemon: 16.4. inlined from ./contrib/llvm-project/libcxx/include/tuple:1428: decltype(auto) std::apply[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\n2025.02.11 12:57:42.338513 [ 249091 ] {} <Fatal> BaseDaemon: 16.5. inlined from ./src/Common/ThreadPool.h:311: operator()\n2025.02.11 12:57:42.338530 [ 249091 ] {} <Fatal> BaseDaemon: 16.6. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)\n2025.02.11 12:57:42.338555 [ 249091 ] {} <Fatal> BaseDaemon: 16.7. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:419: void std::__invoke_void_return_wrapper<void, true>::__call[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)\n2025.02.11 12:57:42.338570 [ 249091 ] {} <Fatal> BaseDaemon: 16.8. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:208: ?\n2025.02.11 12:57:42.338582 [ 249091 ] {} <Fatal> BaseDaemon: 16. ./contrib/llvm-project/libcxx/include/__functional/function.h:608: ? @ 0x000000001400c68a\n2025.02.11 12:57:42.347921 [ 249091 ] {} <Fatal> BaseDaemon: 17.0. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ?\n2025.02.11 12:57:42.370612 [ 249091 ] {} <Fatal> BaseDaemon: 17.1. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:981: ?\n2025.02.11 12:57:42.370652 [ 249091 ] {} <Fatal> BaseDaemon: 17. ./build_docker/./src/Common/ThreadPool.cpp:785: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000de6249f\n2025.02.11 12:57:42.402416 [ 249091 ] {} <Fatal> BaseDaemon: 18.0. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:ne180100]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)\n2025.02.11 12:57:42.402476 [ 249091 ] {} <Fatal> BaseDaemon: 18.1. inlined from ./contrib/llvm-project/libcxx/include/__thread/thread.h:193: void std::__thread_execute[abi:ne180100]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)\n2025.02.11 12:57:42.402495 [ 249091 ] {} <Fatal> BaseDaemon: 18. ./contrib/llvm-project/libcxx/include/__thread/thread.h:202: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000de6961a\n2025.02.11 12:57:42.402522 [ 249091 ] {} <Fatal> BaseDaemon: 19. ? @ 0x00007f91a1b9cac3\n2025.02.11 12:57:42.402539 [ 249091 ] {} <Fatal> BaseDaemon: 20. ? @ 0x00007f91a1c2e850\n2025.02.11 12:57:42.402556 [ 249091 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\n2025.02.11 12:57:42.635033 [ 249067 ] {} <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\n2025.02.11 12:57:42.635189 [ 249067 ] {} <Fatal> BaseDaemon: Changed settings: min_compress_block_size = 2443895, max_compress_block_size = 1031788, max_block_size = 22234, min_external_table_block_size_bytes = 1, max_joined_block_size_rows = 62335, max_insert_threads = 3, max_threads = 1, max_read_buffer_size = 914539, connect_timeout_with_failover_ms = 2000, connect_timeout_with_failover_secure_ms = 3000, idle_connection_timeout = 36000, s3_max_get_rps = 1000000, s3_max_get_burst = 2000000, s3_max_put_rps = 1000000, s3_max_put_burst = 2000000, s3_check_objects_after_upload = true, max_remote_read_network_bandwidth = 1000000000000, max_remote_write_network_bandwidth = 1000000000000, max_local_read_bandwidth = 1000000000000, max_local_write_bandwidth = 1000000000000, stream_like_engine_allow_direct_select = true, enable_multiple_prewhere_read_steps = false, replication_wait_for_inactive_replica_timeout = 30, compile_aggregate_expressions = false, group_by_two_level_threshold = 476913, group_by_two_level_threshold_bytes = 48897896, allow_nonconst_timezone_arguments = true, min_chunk_bytes_for_parallel_parsing = 18249086, merge_tree_coarse_index_granularity = 20, min_bytes_to_use_direct_io = 10737418240, min_bytes_to_use_mmap_io = 10737418240, log_queries = true, insert_deduplicate = false, insert_quorum_timeout = 60000, merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.699999988079071, http_response_buffer_size = 9126666, fsync_metadata = true, query_plan_join_swap_table = false, http_send_timeout = 60., http_receive_timeout = 60., use_index_for_in_with_subqueries_max_values = 1000000000, opentelemetry_start_trace_probability = 0.10000000149011612, max_rows_to_read = 20000000, max_bytes_to_read = 1000000000000, max_bytes_to_read_leaf = 1000000000000, max_rows_to_group_by = 10000000000, max_bytes_before_external_group_by = 10737418240, max_bytes_ratio_before_external_group_by = 0., max_rows_to_sort = 10000000000, max_bytes_to_sort = 10000000000, prefer_external_sort_block_bytes = 100000000, max_bytes_before_external_sort = 9038278865, max_bytes_ratio_before_external_sort = 0., max_bytes_before_remerge_sort = 1437441487, max_result_rows = 1000000000, max_result_bytes = 1000000000, max_execution_time = 600., max_execution_time_leaf = 600., max_execution_speed = 100000000000, max_execution_speed_bytes = 10000000000000, timeout_before_checking_execution_speed = 300., max_estimated_execution_time = 600., max_columns_to_read = 20000, max_temporary_columns = 20000, max_temporary_non_const_columns = 20000, max_rows_in_set = 10000000000, max_bytes_in_set = 10000000000, max_rows_in_join = 10000000000, max_bytes_in_join = 10000000000, cross_join_min_rows_to_compress = 100000000, cross_join_min_bytes_to_compress = 0, max_rows_to_transfer = 1000000000, max_bytes_to_transfer = 1000000000, max_rows_in_distinct = 10000000000, max_bytes_in_distinct = 10000000000, max_memory_usage = 5000000000, max_memory_usage_for_user = 32000000000, max_untracked_memory = 1048576, memory_profiler_step = 1048576, max_network_bandwidth = 100000000000, max_network_bytes = 1000000000000, max_network_bandwidth_for_user = 100000000000, max_network_bandwidth_for_all_users = 100000000000, max_temporary_data_on_disk_size_for_user = 100000000000, max_temporary_data_on_disk_size_for_query = 100000000000, max_backup_bandwidth = 100000000000, log_comment = '03352_concurrent_rename_alter.sh', send_logs_level = 'warning', aggregation_in_order_max_block_bytes = 13338137, read_in_order_two_level_merge_threshold = 13, max_hyperscan_regexp_length = 1000000, max_hyperscan_regexp_total_length = 10000000, allow_introspection_functions = true, database_atomic_wait_for_drop_and_detach_synchronously = true, optimize_if_chain_to_multiif = true, query_cache_max_size_in_bytes = 10000000, query_cache_max_entries = 100000, distributed_ddl_entry_format_version = 6, external_storage_max_read_rows = 10000000000, external_storage_max_read_bytes = 10000000000, remote_filesystem_read_method = 'read', local_filesystem_read_prefetch = true, merge_tree_min_bytes_per_task_for_remote_reading = 8388608, merge_tree_compact_parts_min_granules_to_multibuffer_read = 10, async_insert_busy_timeout_max_ms = 5000, enable_filesystem_cache = true, enable_filesystem_cache_on_write_operations = true, read_from_filesystem_cache_if_exists_otherwise_bypass_cache = true, throw_on_error_from_cache_on_write_operations = true, filesystem_cache_segments_batch_size = 100, page_cache_inject_eviction = true, load_marks_asynchronously = true, allow_prefetched_read_pool_for_remote_filesystem = true, allow_prefetched_read_pool_for_local_filesystem = false, filesystem_prefetch_step_bytes = 104857600, filesystem_prefetch_step_marks = 50, filesystem_prefetch_max_memory_usage = 67108864, filesystem_prefetches_limit = 0, max_streams_for_merge_tree_reading = 1000, insert_keeper_max_retries = 100, insert_keeper_retry_initial_backoff_ms = 1, insert_keeper_retry_max_backoff_ms = 10, insert_keeper_fault_injection_probability = 0.009999999776482582, optimize_distinct_in_order = false, allow_experimental_parallel_reading_from_replicas = 1, max_parallel_replicas = 10, cluster_for_parallel_replicas = 'default_parallel_replicas', parallel_replicas_for_non_replicated_merge_tree = true, session_timezone = 'Antarctica/Palmer', optimize_extract_common_expressions = false\n2025.02.11 12:57:42.659154 [ 249066 ] {} <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\n2025.02.11 12:57:42.659337 [ 249066 ] {} <Fatal> BaseDaemon: Changed settings: min_compress_block_size = 2443895, max_compress_block_size = 1031788, max_block_size = 22234, min_external_table_block_size_bytes = 1, max_joined_block_size_rows = 62335, max_insert_threads = 3, max_threads = 1, max_read_buffer_size = 914539, connect_timeout_with_failover_ms = 2000, connect_timeout_with_failover_secure_ms = 3000, idle_connection_timeout = 36000, s3_max_get_rps = 1000000, s3_max_get_burst = 2000000, s3_max_put_rps = 1000000, s3_max_put_burst = 2000000, s3_check_objects_after_upload = true, max_remote_read_network_bandwidth = 1000000000000, max_remote_write_network_bandwidth = 1000000000000, max_local_read_bandwidth = 1000000000000, max_local_write_bandwidth = 1000000000000, stream_like_engine_allow_direct_select = true, enable_multiple_prewhere_read_steps = false, replication_wait_for_inactive_replica_timeout = 30, compile_aggregate_expressions = false, group_by_two_level_threshold = 476913, group_by_two_level_threshold_bytes = 48897896, allow_nonconst_timezone_arguments = true, min_chunk_bytes_for_parallel_parsing = 18249086, merge_tree_coarse_index_granularity = 20, min_bytes_to_use_direct_io = 10737418240, min_bytes_to_use_mmap_io = 10737418240, log_queries = true, insert_deduplicate = false, insert_quorum_timeout = 60000, merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.699999988079071, http_response_buffer_size = 9126666, fsync_metadata = true, query_plan_join_swap_table = false, http_send_timeout = 60., http_receive_timeout = 60., use_index_for_in_with_subqueries_max_values = 1000000000, opentelemetry_start_trace_probability = 0.10000000149011612, max_rows_to_read = 20000000, max_bytes_to_read = 1000000000000, max_bytes_to_read_leaf = 1000000000000, max_rows_to_group_by = 10000000000, max_bytes_before_external_group_by = 10737418240, max_bytes_ratio_before_external_group_by = 0., max_rows_to_sort = 10000000000, max_bytes_to_sort = 10000000000, prefer_external_sort_block_bytes = 100000000, max_bytes_before_external_sort = 9038278865, max_bytes_ratio_before_external_sort = 0., max_bytes_before_remerge_sort = 1437441487, max_result_rows = 1000000000, max_result_bytes = 1000000000, max_execution_time = 600., max_execution_time_leaf = 600., max_execution_speed = 100000000000, max_execution_speed_bytes = 10000000000000, timeout_before_checking_execution_speed = 300., max_estimated_execution_time = 600., max_columns_to_read = 20000, max_temporary_columns = 20000, max_temporary_non_const_columns = 20000, max_rows_in_set = 10000000000, max_bytes_in_set = 10000000000, max_rows_in_join = 10000000000, max_bytes_in_join = 10000000000, cross_join_min_rows_to_compress = 100000000, cross_join_min_bytes_to_compress = 0, max_rows_to_transfer = 1000000000, max_bytes_to_transfer = 1000000000, max_rows_in_distinct = 10000000000, max_bytes_in_distinct = 10000000000, max_memory_usage = 5000000000, max_memory_usage_for_user = 32000000000, max_untracked_memory = 1048576, memory_profiler_step = 1048576, max_network_bandwidth = 100000000000, max_network_bytes = 1000000000000, max_network_bandwidth_for_user = 100000000000, max_network_bandwidth_for_all_users = 100000000000, max_temporary_data_on_disk_size_for_user = 100000000000, max_temporary_data_on_disk_size_for_query = 100000000000, max_backup_bandwidth = 100000000000, log_comment = '03352_concurrent_rename_alter.sh', send_logs_level = 'warning', aggregation_in_order_max_block_bytes = 13338137, read_in_order_two_level_merge_threshold = 13, max_hyperscan_regexp_length = 1000000, max_hyperscan_regexp_total_length = 10000000, allow_introspection_functions = true, database_atomic_wait_for_drop_and_detach_synchronously = true, optimize_if_chain_to_multiif = true, query_cache_max_size_in_bytes = 10000000, query_cache_max_entries = 100000, distributed_ddl_entry_format_version = 6, external_storage_max_read_rows = 10000000000, external_storage_max_read_bytes = 10000000000, remote_filesystem_read_method = 'read', local_filesystem_read_prefetch = true, merge_tree_min_bytes_per_task_for_remote_reading = 8388608, merge_tree_compact_parts_min_granules_to_multibuffer_read = 10, async_insert_busy_timeout_max_ms = 5000, enable_filesystem_cache = true, enable_filesystem_cache_on_write_operations = true, read_from_filesystem_cache_if_exists_otherwise_bypass_cache = true, throw_on_error_from_cache_on_write_operations = true, filesystem_cache_segments_batch_size = 100, page_cache_inject_eviction = true, load_marks_asynchronously = true, allow_prefetched_read_pool_for_remote_filesystem = true, allow_prefetched_read_pool_for_local_filesystem = false, filesystem_prefetch_step_bytes = 104857600, filesystem_prefetch_step_marks = 50, filesystem_prefetch_max_memory_usage = 67108864, filesystem_prefetches_limit = 0, max_streams_for_merge_tree_reading = 1000, insert_keeper_max_retries = 100, insert_keeper_retry_initial_backoff_ms = 1, insert_keeper_retry_max_backoff_ms = 10, insert_keeper_fault_injection_probability = 0.009999999776482582, optimize_distinct_in_order = false, allow_experimental_parallel_reading_from_replicas = 1, max_parallel_replicas = 10, cluster_for_parallel_replicas = 'default_parallel_replicas', parallel_replicas_for_non_replicated_merge_tree = true, session_timezone = 'Antarctica/Palmer', optimize_extract_common_expressions = false\n2025.02.11 12:57:42.698132 [ 249091 ] {} <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\n2025.02.11 12:57:42.698332 [ 249091 ] {} <Fatal> BaseDaemon: Changed settings: min_compress_block_size = 2443895, max_compress_block_size = 1031788, max_block_size = 22234, min_external_table_block_size_bytes = 1, max_joined_block_size_rows = 62335, max_insert_threads = 3, max_threads = 1, max_read_buffer_size = 914539, connect_timeout_with_failover_ms = 2000, connect_timeout_with_failover_secure_ms = 3000, idle_connection_timeout = 36000, s3_max_get_rps = 1000000, s3_max_get_burst = 2000000, s3_max_put_rps = 1000000, s3_max_put_burst = 2000000, s3_check_objects_after_upload = true, max_remote_read_network_bandwidth = 1000000000000, max_remote_write_network_bandwidth = 1000000000000, max_local_read_bandwidth = 1000000000000, max_local_write_bandwidth = 1000000000000, stream_like_engine_allow_direct_select = true, enable_multiple_prewhere_read_steps = false, replication_wait_for_inactive_replica_timeout = 30, compile_aggregate_expressions = false, group_by_two_level_threshold = 476913, group_by_two_level_threshold_bytes = 48897896, allow_nonconst_timezone_arguments = true, min_chunk_bytes_for_parallel_parsing = 18249086, merge_tree_coarse_index_granularity = 20, min_bytes_to_use_direct_io = 10737418240, min_bytes_to_use_mmap_io = 10737418240, log_queries = true, insert_deduplicate = false, insert_quorum_timeout = 60000, merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.699999988079071, http_response_buffer_size = 9126666, fsync_metadata = true, query_plan_join_swap_table = false, http_send_timeout = 60., http_receive_timeout = 60., use_index_for_in_with_subqueries_max_values = 1000000000, opentelemetry_start_trace_probability = 0.10000000149011612, max_rows_to_read = 20000000, max_bytes_to_read = 1000000000000, max_bytes_to_read_leaf = 1000000000000, max_rows_to_group_by = 10000000000, max_bytes_before_external_group_by = 10737418240, max_bytes_ratio_before_external_group_by = 0., max_rows_to_sort = 10000000000, max_bytes_to_sort = 10000000000, prefer_external_sort_block_bytes = 100000000, max_bytes_before_external_sort = 9038278865, max_bytes_ratio_before_external_sort = 0., max_bytes_before_remerge_sort = 1437441487, max_result_rows = 1000000000, max_result_bytes = 1000000000, max_execution_time = 600., max_execution_time_leaf = 600., max_execution_speed = 100000000000, max_execution_speed_bytes = 10000000000000, timeout_before_checking_execution_speed = 300., max_estimated_execution_time = 600., max_columns_to_read = 20000, max_temporary_columns = 20000, max_temporary_non_const_columns = 20000, max_rows_in_set = 10000000000, max_bytes_in_set = 10000000000, max_rows_in_join = 10000000000, max_bytes_in_join = 10000000000, cross_join_min_rows_to_compress = 100000000, cross_join_min_bytes_to_compress = 0, max_rows_to_transfer = 1000000000, max_bytes_to_transfer = 1000000000, max_rows_in_distinct = 10000000000, max_bytes_in_distinct = 10000000000, max_memory_usage = 5000000000, max_memory_usage_for_user = 32000000000, max_untracked_memory = 1048576, memory_profiler_step = 1048576, max_network_bandwidth = 100000000000, max_network_bytes = 1000000000000, max_network_bandwidth_for_user = 100000000000, max_network_bandwidth_for_all_users = 100000000000, max_temporary_data_on_disk_size_for_user = 100000000000, max_temporary_data_on_disk_size_for_query = 100000000000, max_backup_bandwidth = 100000000000, log_comment = '03352_concurrent_rename_alter.sh', send_logs_level = 'warning', aggregation_in_order_max_block_bytes = 13338137, read_in_order_two_level_merge_threshold = 13, max_hyperscan_regexp_length = 1000000, max_hyperscan_regexp_total_length = 10000000, allow_introspection_functions = true, database_atomic_wait_for_drop_and_detach_synchronously = true, optimize_if_chain_to_multiif = true, query_cache_max_size_in_bytes = 10000000, query_cache_max_entries = 100000, distributed_ddl_entry_format_version = 6, external_storage_max_read_rows = 10000000000, external_storage_max_read_bytes = 10000000000, remote_filesystem_read_method = 'read', local_filesystem_read_prefetch = true, merge_tree_min_bytes_per_task_for_remote_reading = 8388608, merge_tree_compact_parts_min_granules_to_multibuffer_read = 10, async_insert_busy_timeout_max_ms = 5000, enable_filesystem_cache = true, enable_filesystem_cache_on_write_operations = true, read_from_filesystem_cache_if_exists_otherwise_bypass_cache = true, throw_on_error_from_cache_on_write_operations = true, filesystem_cache_segments_batch_size = 100, page_cache_inject_eviction = true, load_marks_asynchronously = true, allow_prefetched_read_pool_for_remote_filesystem = true, allow_prefetched_read_pool_for_local_filesystem = false, filesystem_prefetch_step_bytes = 104857600, filesystem_prefetch_step_marks = 50, filesystem_prefetch_max_memory_usage = 67108864, filesystem_prefetches_limit = 0, max_streams_for_merge_tree_reading = 1000, insert_keeper_max_retries = 100, insert_keeper_retry_initial_backoff_ms = 1, insert_keeper_retry_max_backoff_ms = 10, insert_keeper_fault_injection_probability = 0.009999999776482582, optimize_distinct_in_order = false, allow_experimental_parallel_reading_from_replicas = 1, max_parallel_replicas = 10, cluster_for_parallel_replicas = 'default_parallel_replicas', parallel_replicas_for_non_replicated_merge_tree = true, session_timezone = 'Antarctica/Palmer', optimize_extract_common_expressions = false\n2025.02.11 12:57:46.147849 [ 437 ] {} <Fatal> Application: Child process was terminated by signal 11.\n```\n@CurtizJ seems like the changes are pretty recent: https://github.com/ClickHouse/ClickHouse/pull/75693\n\nCould you please have a look. Considering it's being backported I'd say this is critical right now\nIt is not a crash, but `03352_concurrent_rename_alter` [failed](https://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=76004&sha=latest&name_0=PR&name_1=Stateless+tests+%28tsan%2C+s3+storage%2C+3%2F3%29&name_2=03352_concurrent_rename_alter) on my PR, maybe it can help.",
  "created_at": "2025-02-18T15:00:08Z"
}