You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Explain Select from EmbeddedRocksDB table SEGV
### Describe the bug

Only happens on the current master. Time to bisect....

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/8d3fbeb0-1f3f-42d3-8955-e9ec9a2e15bd

### Error message and/or stacktrace

Stack trace:

```
2025.07.09 14:22:09.432599 [ 1406753 ] {} <Trace> BaseDaemon: Received signal 11
2025.07.09 14:22:09.432711 [ 1407506 ] {} <Fatal> BaseDaemon: ########## Short fault info ############
2025.07.09 14:22:09.432735 [ 1407506 ] {} <Fatal> BaseDaemon: (version 25.7.1.2740 (official build), build id: 0977C8E6369227C881385135B19BF7BC8D9B32C0, git hash: 251b3d647bc2ebc0311de8918fb21cb653e4ddb3, architecture: x86_64) (from thread 1406755) Received signal 11
2025.07.09 14:22:09.432742 [ 1407506 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault
2025.07.09 14:22:09.432745 [ 1407506 ] {} <Fatal> BaseDaemon: Address: 0x8. Access: read. Address not mapped to object.
2025.07.09 14:22:09.432752 [ 1407506 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005686f2f107b2 0x00005686f7621176 0x00005686f7621490 0x00005686f4564492 0x00005686f4562449 0x00005686f48b9ec3 0x00005686f48b42fb 0x00005686f702c872 0x00005686f7045d84 0x00005686fefa40a7 0x00005686fefa45a5 0x00005686fef4cb7f 0x00005686fef4a711 0x000078ff8f8a2ef1 0x000078ff8f93445c
2025.07.09 14:22:09.432779 [ 1407506 ] {} <Fatal> BaseDaemon: ########################################
2025.07.09 14:22:09.432826 [ 1407506 ] {} <Fatal> BaseDaemon: (version 25.7.1.2740 (official build), build id: 0977C8E6369227C881385135B19BF7BC8D9B32C0, git hash: 251b3d647bc2ebc0311de8918fb21cb653e4ddb3) (from thread 1406755) (query_id: 51f31489-0104-4346-bf52-452eb6dc388c) (query: EXPLAIN actions = 1, optimize = 0 SELECT 1 FROM t0;) Received signal Segmentation fault (11)
2025.07.09 14:22:09.432845 [ 1407506 ] {} <Fatal> BaseDaemon: Address: 0x8. Access: read. Address not mapped to object.
2025.07.09 14:22:09.432853 [ 1407506 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005686f2f107b2 0x00005686f7621176 0x00005686f7621490 0x00005686f4564492 0x00005686f4562449 0x00005686f48b9ec3 0x00005686f48b42fb 0x00005686f702c872 0x00005686f7045d84 0x00005686fefa40a7 0x00005686fefa45a5 0x00005686fef4cb7f 0x00005686fef4a711 0x000078ff8f8a2ef1 0x000078ff8f93445c
2025.07.09 14:22:09.494621 [ 1407506 ] {} <Fatal> BaseDaemon: 3.0. inlined from contrib/llvm-project/libcxx/include/vector:635: std::vector<DB::Field, AllocatorWithMemoryTracking<DB::Field>>::size[abi:se190107]() const
2025.07.09 14:22:09.494660 [ 1407506 ] {} <Fatal> BaseDaemon: 3. src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp:679: DB::ReadFromEmbeddedRocksDB::describeActions(DB::IQueryPlanStep::FormatSettings&) const @ 0x0000000018dd17b2
2025.07.09 14:22:09.529195 [ 1407506 ] {} <Fatal> BaseDaemon: 4. src/Processors/QueryPlan/QueryPlan.cpp:373: DB::explainStep(DB::IQueryPlanStep&, DB::IQueryPlanStep::FormatSettings&, DB::ExplainPlanOptions const&) @ 0x000000001d4e2176
2025.07.09 14:22:09.550555 [ 1407506 ] {} <Fatal> BaseDaemon: 5. src/Processors/QueryPlan/QueryPlan.cpp:417: DB::QueryPlan::explainPlan(DB::WriteBuffer&, DB::ExplainPlanOptions const&, unsigned long) const @ 0x000000001d4e2490
2025.07.09 14:22:09.578938 [ 1407506 ] {} <Fatal> BaseDaemon: 6. src/Interpreters/InterpreterExplainQuery.cpp:598: DB::InterpreterExplainQuery::executeImpl() @ 0x000000001a425492
2025.07.09 14:22:09.605208 [ 1407506 ] {} <Fatal> BaseDaemon: 7. src/Interpreters/InterpreterExplainQuery.cpp:141: DB::InterpreterExplainQuery::execute() @ 0x000000001a423449
2025.07.09 14:22:09.643997 [ 1407506 ] {} <Fatal> BaseDaemon: 8. src/Interpreters/executeQuery.cpp:1561: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000001a77aec3
2025.07.09 14:22:09.690966 [ 1407506 ] {} <Fatal> BaseDaemon: 9. src/Interpreters/executeQuery.cpp:1769: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001a7752fb
2025.07.09 14:22:09.726282 [ 1407506 ] {} <Fatal> BaseDaemon: 10. src/Server/TCPHandler.cpp:723: DB::TCPHandler::runImpl() @ 0x000000001ceed872
2025.07.09 14:22:09.784390 [ 1407506 ] {} <Fatal> BaseDaemon: 11. src/Server/TCPHandler.cpp:2730: DB::TCPHandler::run() @ 0x000000001cf06d84
2025.07.09 14:22:09.789039 [ 1407506 ] {} <Fatal> BaseDaemon: 12. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000024e650a7
2025.07.09 14:22:09.793671 [ 1407506 ] {} <Fatal> BaseDaemon: 13. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000024e655a5
2025.07.09 14:22:09.798161 [ 1407506 ] {} <Fatal> BaseDaemon: 14. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000024e0db7f
2025.07.09 14:22:09.802522 [ 1407506 ] {} <Fatal> BaseDaemon: 15. base/poco/Foundation/src/Thread_POSIX.cpp:341: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000024e0b711
2025.07.09 14:22:09.802565 [ 1407506 ] {} <Fatal> BaseDaemon: 16. start_thread @ 0x00000000000a2ef1
2025.07.09 14:22:09.802586 [ 1407506 ] {} <Fatal> BaseDaemon: 17. __clone3 @ 0x000000000013445c
2025.07.09 14:22:10.001176 [ 1407506 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 9D07A372958BA0626368C357358FAF94)
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
