{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 83588,
  "instance_id": "ClickHouse__ClickHouse-83588",
  "issue_numbers": [
    "83525"
  ],
  "base_commit": "b39677210d52f824a1ef98ad0abf82413931e8c0",
  "patch": "diff --git a/src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp b/src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp\nindex 05faef2c1250..a0e14cd4a841 100644\n--- a/src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp\n+++ b/src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp\n@@ -594,7 +594,7 @@ class ReadFromEmbeddedRocksDB : public SourceStepWithFilter\n     size_t num_streams;\n \n     FieldVectorPtr keys;\n-    bool all_scan = false;\n+    bool all_scan = true;\n };\n \n void StorageEmbeddedRocksDB::read(\ndiff --git a/src/Storages/StorageKeeperMap.cpp b/src/Storages/StorageKeeperMap.cpp\nindex 6720fc75bd8a..ffa2c6534c90 100644\n--- a/src/Storages/StorageKeeperMap.cpp\n+++ b/src/Storages/StorageKeeperMap.cpp\n@@ -632,7 +632,7 @@ class ReadFromKeeperMap : public SourceStepWithFilter\n     bool with_version_column;\n \n     FieldVectorPtr keys;\n-    bool all_scan = false;\n+    bool all_scan = true;\n \n     template<typename KeyContainerPtr>\n     void initializePipelineImpl(QueryPipelineBuilder & pipeline, KeyContainerPtr key_container);\ndiff --git a/src/Storages/StorageRedis.cpp b/src/Storages/StorageRedis.cpp\nindex d9db5df8d490..74a0b568695e 100644\n--- a/src/Storages/StorageRedis.cpp\n+++ b/src/Storages/StorageRedis.cpp\n@@ -251,7 +251,7 @@ class ReadFromRedis : public SourceStepWithFilter\n     size_t num_streams;\n \n     FieldVectorPtr keys;\n-    bool all_scan = false;\n+    bool all_scan = true;\n };\n \n void StorageRedis::read(\n",
  "test_patch": "diff --git a/tests/integration/test_storage_redis/test.py b/tests/integration/test_storage_redis/test.py\nindex 5a931aa2f4ee..5eef47f2b073 100644\n--- a/tests/integration/test_storage_redis/test.py\n+++ b/tests/integration/test_storage_redis/test.py\n@@ -461,3 +461,6 @@ def check_query(query, read_type, keys_count, rows_read):\n     check_query(\"SELECT * FROM test_get_keys\", \"FullScan\", 0, 3)\n     check_query(\"SELECT * FROM test_get_keys WHERE k = 1\", \"GetKeys\", 1, 1)\n     check_query(\"SELECT * FROM test_get_keys WHERE k in (3, 5)\", \"GetKeys\", 2, 1)\n+\n+    plan = node.query(\"EXPLAIN actions=1, optimize=0 SELECT * FROM test_get_keys\")\n+    assert 'ReadType: FullScan' in plan\ndiff --git a/tests/queries/0_stateless/02375_rocksdb_with_filters.reference b/tests/queries/0_stateless/02375_rocksdb_with_filters.reference\nindex 77201bc4c43d..7d04ab283327 100644\n--- a/tests/queries/0_stateless/02375_rocksdb_with_filters.reference\n+++ b/tests/queries/0_stateless/02375_rocksdb_with_filters.reference\n@@ -1,5 +1,7 @@\n     ReadFromEmbeddedRocksDB\n     ReadType: FullScan\n+ReadFromEmbeddedRocksDB\n+ReadType:FullScan\n 1\n \"rows_read\":1,\n     ReadFromEmbeddedRocksDB\ndiff --git a/tests/queries/0_stateless/02375_rocksdb_with_filters.sh b/tests/queries/0_stateless/02375_rocksdb_with_filters.sh\nindex 3a03fb89accb..36fcd0b5f6dd 100755\n--- a/tests/queries/0_stateless/02375_rocksdb_with_filters.sh\n+++ b/tests/queries/0_stateless/02375_rocksdb_with_filters.sh\n@@ -11,6 +11,7 @@ $CLICKHOUSE_CLIENT --query=\"CREATE TABLE rocksdb_with_filter (key String, value\n $CLICKHOUSE_CLIENT --query=\"INSERT INTO rocksdb_with_filter (*) SELECT n.number, n.number*10 FROM numbers(10000) n;\"\n \n $CLICKHOUSE_CLIENT --query \"EXPLAIN actions=1 SELECT value FROM rocksdb_with_filter LIMIT 1\" | grep -A 2 \"ReadFromEmbeddedRocksDB\"\n+$CLICKHOUSE_CLIENT --query \"EXPLAIN actions=1,optimize=0 SELECT value FROM rocksdb_with_filter\" | grep -A 2 \"ReadFromEmbeddedRocksDB\" | tr -d \"[:blank:]\"\n \n $CLICKHOUSE_CLIENT --query \"SELECT count() FROM rocksdb_with_filter WHERE key = '5000'\"\n $CLICKHOUSE_CLIENT --query \"SELECT value FROM rocksdb_with_filter WHERE key = '5000' FORMAT JSON\" | grep \"rows_read\" | tr -d \"[:blank:]\"\ndiff --git a/tests/queries/0_stateless/03541_keeper_map_filter_keys.reference b/tests/queries/0_stateless/03541_keeper_map_filter_keys.reference\nindex 12a3bbcf41a9..c603377835be 100644\n--- a/tests/queries/0_stateless/03541_keeper_map_filter_keys.reference\n+++ b/tests/queries/0_stateless/03541_keeper_map_filter_keys.reference\n@@ -1,5 +1,7 @@\n     ReadFromKeeperMap\n     ReadType: FullScan\n+ReadFromKeeperMap\n+ReadType:FullScan\n 1\n \"rows_read\":1,\n     ReadFromKeeperMap\ndiff --git a/tests/queries/0_stateless/03541_keeper_map_filter_keys.sh b/tests/queries/0_stateless/03541_keeper_map_filter_keys.sh\nindex b862bda95799..39949e133373 100755\n--- a/tests/queries/0_stateless/03541_keeper_map_filter_keys.sh\n+++ b/tests/queries/0_stateless/03541_keeper_map_filter_keys.sh\n@@ -11,6 +11,7 @@ $CLICKHOUSE_CLIENT --query=\"CREATE TABLE keeper_map_with_filter (key String, val\n $CLICKHOUSE_CLIENT --query=\"INSERT INTO keeper_map_with_filter (*) SELECT n.number, n.number*10 FROM numbers(10) n;\"\n \n $CLICKHOUSE_CLIENT --query \"EXPLAIN actions=1 SELECT value FROM keeper_map_with_filter LIMIT 1\" | grep -A 2 \"ReadFromKeeperMap\"\n+$CLICKHOUSE_CLIENT --query \"EXPLAIN actions=1,optimize=0 SELECT value FROM keeper_map_with_filter\" | grep -A 2 \"ReadFromKeeperMap\" | tr -d \"[:blank:]\"\n \n $CLICKHOUSE_CLIENT --query \"SELECT count() FROM keeper_map_with_filter WHERE key = '5'\"\n $CLICKHOUSE_CLIENT --query \"SELECT value FROM keeper_map_with_filter WHERE key = '5' FORMAT JSON\" | grep \"rows_read\" | tr -d \"[:blank:]\"\n",
  "problem_statement": "Explain Select from EmbeddedRocksDB table SEGV\n### Describe the bug\n\nOnly happens on the current master. Time to bisect....\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/8d3fbeb0-1f3f-42d3-8955-e9ec9a2e15bd\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n2025.07.09 14:22:09.432599 [ 1406753 ] {} <Trace> BaseDaemon: Received signal 11\n2025.07.09 14:22:09.432711 [ 1407506 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\n2025.07.09 14:22:09.432735 [ 1407506 ] {} <Fatal> BaseDaemon: (version 25.7.1.2740 (official build), build id: 0977C8E6369227C881385135B19BF7BC8D9B32C0, git hash: 251b3d647bc2ebc0311de8918fb21cb653e4ddb3, architecture: x86_64) (from thread 1406755) Received signal 11\n2025.07.09 14:22:09.432742 [ 1407506 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\n2025.07.09 14:22:09.432745 [ 1407506 ] {} <Fatal> BaseDaemon: Address: 0x8. Access: read. Address not mapped to object.\n2025.07.09 14:22:09.432752 [ 1407506 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005686f2f107b2 0x00005686f7621176 0x00005686f7621490 0x00005686f4564492 0x00005686f4562449 0x00005686f48b9ec3 0x00005686f48b42fb 0x00005686f702c872 0x00005686f7045d84 0x00005686fefa40a7 0x00005686fefa45a5 0x00005686fef4cb7f 0x00005686fef4a711 0x000078ff8f8a2ef1 0x000078ff8f93445c\n2025.07.09 14:22:09.432779 [ 1407506 ] {} <Fatal> BaseDaemon: ########################################\n2025.07.09 14:22:09.432826 [ 1407506 ] {} <Fatal> BaseDaemon: (version 25.7.1.2740 (official build), build id: 0977C8E6369227C881385135B19BF7BC8D9B32C0, git hash: 251b3d647bc2ebc0311de8918fb21cb653e4ddb3) (from thread 1406755) (query_id: 51f31489-0104-4346-bf52-452eb6dc388c) (query: EXPLAIN actions = 1, optimize = 0 SELECT 1 FROM t0;) Received signal Segmentation fault (11)\n2025.07.09 14:22:09.432845 [ 1407506 ] {} <Fatal> BaseDaemon: Address: 0x8. Access: read. Address not mapped to object.\n2025.07.09 14:22:09.432853 [ 1407506 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005686f2f107b2 0x00005686f7621176 0x00005686f7621490 0x00005686f4564492 0x00005686f4562449 0x00005686f48b9ec3 0x00005686f48b42fb 0x00005686f702c872 0x00005686f7045d84 0x00005686fefa40a7 0x00005686fefa45a5 0x00005686fef4cb7f 0x00005686fef4a711 0x000078ff8f8a2ef1 0x000078ff8f93445c\n2025.07.09 14:22:09.494621 [ 1407506 ] {} <Fatal> BaseDaemon: 3.0. inlined from contrib/llvm-project/libcxx/include/vector:635: std::vector<DB::Field, AllocatorWithMemoryTracking<DB::Field>>::size[abi:se190107]() const\n2025.07.09 14:22:09.494660 [ 1407506 ] {} <Fatal> BaseDaemon: 3. src/Storages/RocksDB/StorageEmbeddedRocksDB.cpp:679: DB::ReadFromEmbeddedRocksDB::describeActions(DB::IQueryPlanStep::FormatSettings&) const @ 0x0000000018dd17b2\n2025.07.09 14:22:09.529195 [ 1407506 ] {} <Fatal> BaseDaemon: 4. src/Processors/QueryPlan/QueryPlan.cpp:373: DB::explainStep(DB::IQueryPlanStep&, DB::IQueryPlanStep::FormatSettings&, DB::ExplainPlanOptions const&) @ 0x000000001d4e2176\n2025.07.09 14:22:09.550555 [ 1407506 ] {} <Fatal> BaseDaemon: 5. src/Processors/QueryPlan/QueryPlan.cpp:417: DB::QueryPlan::explainPlan(DB::WriteBuffer&, DB::ExplainPlanOptions const&, unsigned long) const @ 0x000000001d4e2490\n2025.07.09 14:22:09.578938 [ 1407506 ] {} <Fatal> BaseDaemon: 6. src/Interpreters/InterpreterExplainQuery.cpp:598: DB::InterpreterExplainQuery::executeImpl() @ 0x000000001a425492\n2025.07.09 14:22:09.605208 [ 1407506 ] {} <Fatal> BaseDaemon: 7. src/Interpreters/InterpreterExplainQuery.cpp:141: DB::InterpreterExplainQuery::execute() @ 0x000000001a423449\n2025.07.09 14:22:09.643997 [ 1407506 ] {} <Fatal> BaseDaemon: 8. src/Interpreters/executeQuery.cpp:1561: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000001a77aec3\n2025.07.09 14:22:09.690966 [ 1407506 ] {} <Fatal> BaseDaemon: 9. src/Interpreters/executeQuery.cpp:1769: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001a7752fb\n2025.07.09 14:22:09.726282 [ 1407506 ] {} <Fatal> BaseDaemon: 10. src/Server/TCPHandler.cpp:723: DB::TCPHandler::runImpl() @ 0x000000001ceed872\n2025.07.09 14:22:09.784390 [ 1407506 ] {} <Fatal> BaseDaemon: 11. src/Server/TCPHandler.cpp:2730: DB::TCPHandler::run() @ 0x000000001cf06d84\n2025.07.09 14:22:09.789039 [ 1407506 ] {} <Fatal> BaseDaemon: 12. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000024e650a7\n2025.07.09 14:22:09.793671 [ 1407506 ] {} <Fatal> BaseDaemon: 13. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000024e655a5\n2025.07.09 14:22:09.798161 [ 1407506 ] {} <Fatal> BaseDaemon: 14. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000024e0db7f\n2025.07.09 14:22:09.802522 [ 1407506 ] {} <Fatal> BaseDaemon: 15. base/poco/Foundation/src/Thread_POSIX.cpp:341: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000024e0b711\n2025.07.09 14:22:09.802565 [ 1407506 ] {} <Fatal> BaseDaemon: 16. start_thread @ 0x00000000000a2ef1\n2025.07.09 14:22:09.802586 [ 1407506 ] {} <Fatal> BaseDaemon: 17. __clone3 @ 0x000000000013445c\n2025.07.09 14:22:10.001176 [ 1407506 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 9D07A372958BA0626368C357358FAF94)\n```\n",
  "hints_text": "> Only happens on the current master. Time to bisect....\n\nBased purely on changed lines, I'd target https://github.com/ClickHouse/ClickHouse/pull/81833 cc @GrigoryPervakov ",
  "created_at": "2025-07-10T12:47:17Z"
}