{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37906,
  "instance_id": "ClickHouse__ClickHouse-37906",
  "issue_numbers": [
    "26503"
  ],
  "base_commit": "85a1204e959885bbed869477f8c4893914972661",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 0d959ec48216..4338c2c2735c 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -1501,7 +1501,7 @@ static bool isOldPartDirectory(const DiskPtr & disk, const String & directory_pa\n }\n \n \n-size_t MergeTreeData::clearOldTemporaryDirectories(size_t custom_directories_lifetime_seconds)\n+size_t MergeTreeData::clearOldTemporaryDirectories(size_t custom_directories_lifetime_seconds, const NameSet & valid_prefixes)\n {\n     /// If the method is already called from another thread, then we don't need to do anything.\n     std::unique_lock lock(clear_old_temporary_directories_mutex, std::defer_lock);\n@@ -1523,10 +1523,19 @@ size_t MergeTreeData::clearOldTemporaryDirectories(size_t custom_directories_lif\n         for (auto it = disk->iterateDirectory(relative_data_path); it->isValid(); it->next())\n         {\n             const std::string & basename = it->name();\n-            if (!startsWith(basename, \"tmp_\"))\n+            bool start_with_valid_prefix = false;\n+            for (const auto & prefix : valid_prefixes)\n             {\n-                continue;\n+                if (startsWith(basename, prefix))\n+                {\n+                    start_with_valid_prefix = true;\n+                    break;\n+                }\n             }\n+\n+            if (!start_with_valid_prefix)\n+                continue;\n+\n             const std::string & full_path = fullPath(disk, it->path());\n \n             try\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex 1967f8318224..09b02f5da47d 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -624,7 +624,7 @@ class MergeTreeData : public IStorage, public WithMutableContext\n \n     /// Delete all directories which names begin with \"tmp\"\n     /// Must be called with locked lockForShare() because it's using relative_data_path.\n-    size_t clearOldTemporaryDirectories(size_t custom_directories_lifetime_seconds);\n+    size_t clearOldTemporaryDirectories(size_t custom_directories_lifetime_seconds, const NameSet & valid_prefixes = {\"tmp_\", });\n \n     size_t clearEmptyParts();\n \ndiff --git a/src/Storages/StorageMergeTree.cpp b/src/Storages/StorageMergeTree.cpp\nindex e92e55879285..9955858698f5 100644\n--- a/src/Storages/StorageMergeTree.cpp\n+++ b/src/Storages/StorageMergeTree.cpp\n@@ -123,7 +123,7 @@ void StorageMergeTree::startup()\n \n     /// Temporary directories contain incomplete results of merges (after forced restart)\n     ///  and don't allow to reinitialize them, so delete each of them immediately\n-    clearOldTemporaryDirectories(0);\n+    clearOldTemporaryDirectories(0, {\"tmp_\", \"delete_tmp_\"});\n \n     /// NOTE background task will also do the above cleanups periodically.\n     time_after_previous_cleanup_parts.restart();\ndiff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp\nindex c67274618157..c3c9e2f6daaa 100644\n--- a/src/Storages/StorageReplicatedMergeTree.cpp\n+++ b/src/Storages/StorageReplicatedMergeTree.cpp\n@@ -462,7 +462,7 @@ StorageReplicatedMergeTree::StorageReplicatedMergeTree(\n         }\n         /// Temporary directories contain uninitialized results of Merges or Fetches (after forced restart),\n         /// don't allow to reinitialize them, delete each of them immediately.\n-        clearOldTemporaryDirectories(0);\n+        clearOldTemporaryDirectories(0, {\"tmp_\", \"delete_tmp_\"});\n         clearOldWriteAheadLogs();\n     }\n \n",
  "test_patch": "diff --git a/tests/integration/test_cleanup_after_start/__init__.py b/tests/integration/test_cleanup_after_start/__init__.py\nnew file mode 100644\nindex 000000000000..e5a0d9b4834e\n--- /dev/null\n+++ b/tests/integration/test_cleanup_after_start/__init__.py\n@@ -0,0 +1,1 @@\n+#!/usr/bin/env python3\ndiff --git a/tests/integration/test_cleanup_after_start/test.py b/tests/integration/test_cleanup_after_start/test.py\nnew file mode 100644\nindex 000000000000..f2d7af440ab3\n--- /dev/null\n+++ b/tests/integration/test_cleanup_after_start/test.py\n@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+from helpers.test_tools import assert_logs_contain_with_retry\n+import os\n+\n+cluster = ClickHouseCluster(__file__)\n+node1 = cluster.add_instance(\"node1\", with_zookeeper=True, stay_alive=True)\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def start_cluster():\n+    try:\n+        cluster.start()\n+\n+        for i, node in enumerate((node1,)):\n+            node_name = \"node\" + str(i + 1)\n+            node.query(\n+                \"\"\"\n+                CREATE TABLE test_table(date Date, id UInt32, dummy UInt32)\n+                ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_table', '{}')\n+                PARTITION BY date ORDER BY id\n+                \"\"\".format(\n+                    node_name\n+                )\n+            )\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_old_dirs_cleanup(start_cluster):\n+    node1.query(\"INSERT INTO test_table VALUES (toDate('2020-01-01'), 1, 10)\")\n+    assert node1.query(\"SELECT count() FROM test_table\") == \"1\\n\"\n+\n+    node1.stop_clickhouse()\n+\n+    node1.exec_in_container(\n+        [\n+            \"bash\",\n+            \"-c\",\n+            \"mv /var/lib/clickhouse/data/default/test_table/20200101_0_0_0 /var/lib/clickhouse/data/default/test_table/delete_tmp_20200101_0_0_0\",\n+        ],\n+        privileged=True,\n+    )\n+\n+    node1.start_clickhouse()\n+\n+    result = node1.exec_in_container(\n+        [\"bash\", \"-c\", \"ls /var/lib/clickhouse/data/default/test_table/\"],\n+        privileged=True,\n+    )\n+\n+    # Replaced empty part\n+    assert \"20200101_0_0_0\" in result\n+    assert node1.query(\"SELECT count() FROM test_table\") == \"0\\n\"\n+\n+    assert_logs_contain_with_retry(node1, \"Removing temporary directory\")\n+    assert_logs_contain_with_retry(node1, \"delete_tmp_20200101_0_0_0\")\n",
  "problem_statement": "Remove 'delete_tmp_' directories on server start-up\nFor some reasons when we delete a MergeTree Part in atomic way something may go wrong - and leave the `delete_tmp_*` folder or it's part on disk. This may lead to a disk space consumption over time.\r\n\r\nIt's suggested to delete this folders at least at server start-up. Current solution with `clearOldTemporaryDirectories()` doesn't work because this method is called periodically from a thread without any locks or advisory on folders - it may cause the race conditions.\n",
  "hints_text": "",
  "created_at": "2022-06-07T15:09:04Z"
}