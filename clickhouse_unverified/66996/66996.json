{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66996,
  "instance_id": "ClickHouse__ClickHouse-66996",
  "issue_numbers": [
    "66992"
  ],
  "base_commit": "8d3568ce7124cf4fe953a97843146ccb9f905e35",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 3d181e330015..8d3a11dac98d 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -1,5 +1,8 @@\n #pragma once\n \n+/// CLion freezes for a minute on every keypress in any file including this.\n+#if !defined(__CLION_IDE__)\n+\n #include <Common/NamePrompter.h>\n #include <Core/BaseSettings.h>\n #include <Core/SettingsEnums.h>\n@@ -1348,3 +1351,5 @@ struct FormatFactorySettings : public BaseSettings<FormatFactorySettingsTraits>\n };\n \n }\n+\n+#endif\ndiff --git a/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp b/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp\nindex b070bbe739b9..4136e2d58b47 100644\n--- a/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp\n+++ b/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp\n@@ -596,12 +596,12 @@ Pipe ReadFromSystemNumbersStep::makePipe()\n             numbers_storage.step,\n             step_between_chunks);\n \n-        if (numbers_storage.limit && i == 0)\n+        if (end && i == 0)\n         {\n-            auto rows_appr = itemCountInRange(numbers_storage.offset, *numbers_storage.limit, numbers_storage.step);\n-            if (limit > 0 && limit < rows_appr)\n-                rows_appr = query_info_limit;\n-            source->addTotalRowsApprox(rows_appr);\n+            UInt64 rows_approx = itemCountInRange(numbers_storage.offset, *end, numbers_storage.step);\n+            if (limit > 0 && limit < rows_approx)\n+                rows_approx = query_info_limit;\n+            source->addTotalRowsApprox(rows_approx);\n         }\n \n         pipe.addSource(std::move(source));\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03208_numbers_total_rows_approx.reference b/tests/queries/0_stateless/03208_numbers_total_rows_approx.reference\nnew file mode 100644\nindex 000000000000..0cfbf08886fc\n--- /dev/null\n+++ b/tests/queries/0_stateless/03208_numbers_total_rows_approx.reference\n@@ -0,0 +1,1 @@\n+2\ndiff --git a/tests/queries/0_stateless/03208_numbers_total_rows_approx.sql b/tests/queries/0_stateless/03208_numbers_total_rows_approx.sql\nnew file mode 100644\nindex 000000000000..7855dfb62074\n--- /dev/null\n+++ b/tests/queries/0_stateless/03208_numbers_total_rows_approx.sql\n@@ -0,0 +1,1 @@\n+SELECT number FROM numbers(2, 1) WHERE number % 2 = 0 SETTINGS max_rows_to_read = 10;\n",
  "problem_statement": "Wrong estimation of max rows to read when querying system.numbers with arithmetic filters.\n```\r\nSELECT number FROM numbers(1547510400, 500000) WHERE number % 3 = 0 SETTINGS max_rows_to_read = 1000000;\r\n\r\nCode: 158. DB::Exception: Limit for rows or bytes to read exceeded, max rows: 1.00 million, current rows: 18.45 quintillion: While executing Numbers. (TOO_MANY_ROWS)\r\n```\n",
  "hints_text": "`SELECT number FROM numbers(2, 1) WHERE number % 2 = 0 SETTINGS max_rows_to_read = 10;`\n@divanik, bad commit message:\r\n<img width=\"568\" alt=\"Screenshot_20240724_053146\" src=\"https://github.com/user-attachments/assets/be8bbe90-a976-4107-bb3d-3e51ea74060a\">\r\n",
  "created_at": "2024-07-24T05:47:54Z",
  "modified_files": [
    "src/Core/Settings.h",
    "src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03208_numbers_total_rows_approx.reference",
    "b/tests/queries/0_stateless/03208_numbers_total_rows_approx.sql"
  ]
}