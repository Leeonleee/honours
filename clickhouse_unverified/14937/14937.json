{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 14937,
  "instance_id": "ClickHouse__ClickHouse-14937",
  "issue_numbers": [
    "14847"
  ],
  "base_commit": "2413caa7d5b62db0b0ea2a5e7d3ab9406a3e6c75",
  "patch": "diff --git a/src/Functions/finalizeAggregation.cpp b/src/Functions/finalizeAggregation.cpp\nindex 51afb4729dcf..ae2a67dec20d 100644\n--- a/src/Functions/finalizeAggregation.cpp\n+++ b/src/Functions/finalizeAggregation.cpp\n@@ -34,11 +34,6 @@ class FunctionFinalizeAggregation : public IFunction\n         return name;\n     }\n \n-    bool isStateful() const override\n-    {\n-        return true;\n-    }\n-\n     size_t getNumberOfArguments() const override\n     {\n         return 1;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00808_not_optimize_predicate.reference b/tests/queries/0_stateless/00808_not_optimize_predicate.reference\nindex 1899fa2045d0..d8ab9425aab8 100644\n--- a/tests/queries/0_stateless/00808_not_optimize_predicate.reference\n+++ b/tests/queries/0_stateless/00808_not_optimize_predicate.reference\n@@ -10,3 +10,20 @@\n (1,1)\n (3,2)\n (5,2)\n+-------finalizeAggregation should not be stateful (issue #14847)-------\n+2\t62\n+3\t87\n+4\t112\n+5\t137\n+SELECT\n+    n,\n+    `finalizeAggregation(s)`\n+FROM \n+(\n+    SELECT\n+        n,\n+        finalizeAggregation(s)\n+    FROM test_00808_push_down_with_finalizeAggregation\n+    WHERE (n <= 5) AND (n >= 2)\n+)\n+WHERE (n >= 2) AND (n <= 5)\ndiff --git a/tests/queries/0_stateless/00808_not_optimize_predicate.sql b/tests/queries/0_stateless/00808_not_optimize_predicate.sql\nindex ad3df16e4bb3..579fd00cb8c3 100644\n--- a/tests/queries/0_stateless/00808_not_optimize_predicate.sql\n+++ b/tests/queries/0_stateless/00808_not_optimize_predicate.sql\n@@ -36,3 +36,39 @@ SELECT arrayJoin(arrayMap(x -> x, arraySort(groupArray((ts, n))))) AS k FROM (\n \n \n DROP TABLE IF EXISTS test_00808;\n+\n+SELECT '-------finalizeAggregation should not be stateful (issue #14847)-------';\n+\n+DROP TABLE IF EXISTS test_00808_push_down_with_finalizeAggregation;\n+\n+CREATE TABLE test_00808_push_down_with_finalizeAggregation ENGINE = AggregatingMergeTree\n+ORDER BY n AS\n+SELECT\n+    intDiv(number, 25) AS n,\n+    avgState(number) AS s\n+FROM numbers(2500)\n+GROUP BY n;\n+\n+SET force_primary_key = 1, enable_debug_queries = 1, enable_optimize_predicate_expression = 1;\n+\n+SELECT *\n+FROM\n+(\n+    SELECT\n+        n,\n+        finalizeAggregation(s)\n+    FROM test_00808_push_down_with_finalizeAggregation\n+)\n+WHERE (n >= 2) AND (n <= 5);\n+\n+ANALYZE SELECT *\n+FROM\n+(\n+    SELECT\n+        n,\n+        finalizeAggregation(s)\n+    FROM test_00808_push_down_with_finalizeAggregation\n+)\n+WHERE (n >= 2) AND (n <= 5);\n+\n+DROP TABLE IF EXISTS test_00808_push_down_with_finalizeAggregation;\n",
  "problem_statement": "enable_optimize_predicate_expression don't work with finalizeAggregation \n```\r\nDROP TABLE IF EXISTS test_push_down;\r\n\r\nCREATE TABLE test_push_down\r\nENGINE = AggregatingMergeTree\r\nORDER BY n AS\r\nSELECT \r\n    intDiv(number, 25) AS n, \r\n    avgState(number) AS s\r\nFROM numbers(2500)\r\nGROUP BY n;\r\n\r\nSET enable_debug_queries = 1;\r\n\r\nANALYZE SELECT *\r\nFROM \r\n(\r\n    SELECT \r\n        n, \r\n        finalizeAggregation(s)\r\n    FROM test_push_down\r\n)\r\nWHERE (n >= 2) AND (n <= 5)\r\n```\r\n\r\nResult is \r\n```\r\nSELECT \r\n    n, \r\n    `finalizeAggregation(s)`\r\nFROM \r\n(\r\n    SELECT \r\n        n, \r\n        finalizeAggregation(s)\r\n    FROM test_push_down\r\n)\r\nWHERE (n >= 2) AND (n <= 5)\r\n```\r\n\r\nW/o `finalizeAggregation` - it was pushed down:\r\n```\r\nANALYZE SELECT *\r\nFROM \r\n(\r\n    SELECT \r\n        n, \r\n        s\r\n    FROM test_push_down\r\n)\r\nWHERE (n >= 2) AND (n <= 5)\r\n```\r\n\r\n```\r\nSELECT \r\n    n, \r\n    s\r\nFROM \r\n(\r\n    SELECT \r\n        n, \r\n        s\r\n    FROM test_push_down\r\n    WHERE (n <= 5) AND (n >= 2)\r\n)\r\nWHERE (n >= 2) AND (n <= 5)\r\n```\r\n\r\nIt looks like the reason is finalizeAggregation is marked as 'stateful' and for stateful functions\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/89e967333662c8ec4c46dfa1ba12bd10781538b9/src/Interpreters/PredicateExpressionsOptimizer.cpp#L93-L94\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/e4689ce302524e73477bff25370a2da67034b4ef/src/Functions/finalizeAggregation.cpp#L36-L39\r\n\r\nIntroduced in https://github.com/ClickHouse/ClickHouse/pull/3890\r\n\r\n@zhang2014 is there some good reason why `finalizeAggregation` is marked as statefull?\n",
  "hints_text": "I don't see any reasons why `finalizeAggregation` is marked as stateful.\r\nProbably it was erroneously marked together with `runningAccumulate`?\n@filimonov Could you please make this change and add a test in a PR?",
  "created_at": "2020-09-17T14:05:12Z"
}