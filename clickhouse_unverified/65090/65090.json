{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 65090,
  "instance_id": "ClickHouse__ClickHouse-65090",
  "issue_numbers": [
    "64636"
  ],
  "base_commit": "e493856ddf4925140c85abd7c205a53caabeff0c",
  "patch": "diff --git a/src/Analyzer/InterpolateNode.cpp b/src/Analyzer/InterpolateNode.cpp\nindex e4f7e22b8039..97dc79f565bd 100644\n--- a/src/Analyzer/InterpolateNode.cpp\n+++ b/src/Analyzer/InterpolateNode.cpp\n@@ -10,9 +10,12 @@\n namespace DB\n {\n \n-InterpolateNode::InterpolateNode(QueryTreeNodePtr expression_, QueryTreeNodePtr interpolate_expression_)\n+InterpolateNode::InterpolateNode(std::shared_ptr<IdentifierNode> expression_, QueryTreeNodePtr interpolate_expression_)\n     : IQueryTreeNode(children_size)\n {\n+    if (expression_)\n+        expression_name = expression_->getIdentifier().getFullName();\n+\n     children[expression_child_index] = std::move(expression_);\n     children[interpolate_expression_child_index] = std::move(interpolate_expression_);\n }\n@@ -41,13 +44,23 @@ void InterpolateNode::updateTreeHashImpl(HashState &, CompareOptions) const\n \n QueryTreeNodePtr InterpolateNode::cloneImpl() const\n {\n-    return std::make_shared<InterpolateNode>(nullptr /*expression*/, nullptr /*interpolate_expression*/);\n+    auto cloned = std::make_shared<InterpolateNode>(nullptr /*expression*/, nullptr /*interpolate_expression*/);\n+    cloned->expression_name = expression_name;\n+    return cloned;\n }\n \n ASTPtr InterpolateNode::toASTImpl(const ConvertToASTOptions & options) const\n {\n     auto result = std::make_shared<ASTInterpolateElement>();\n-    result->column = getExpression()->toAST(options)->getColumnName();\n+\n+    /// Interpolate parser supports only identifier node.\n+    /// In case of alias, identifier is replaced to expression, which can't be parsed.\n+    /// In this case, keep original alias name.\n+    if (const auto * identifier = getExpression()->as<IdentifierNode>())\n+        result->column = identifier->toAST(options)->getColumnName();\n+    else\n+        result->column = expression_name;\n+\n     result->children.push_back(getInterpolateExpression()->toAST(options));\n     result->expr = result->children.back();\n \ndiff --git a/src/Analyzer/InterpolateNode.h b/src/Analyzer/InterpolateNode.h\nindex 9269d3924f5b..ec493ed8bdde 100644\n--- a/src/Analyzer/InterpolateNode.h\n+++ b/src/Analyzer/InterpolateNode.h\n@@ -1,6 +1,6 @@\n #pragma once\n \n-#include <Analyzer/IQueryTreeNode.h>\n+#include <Analyzer/IdentifierNode.h>\n #include <Analyzer/ListNode.h>\n \n namespace DB\n@@ -19,7 +19,7 @@ class InterpolateNode final : public IQueryTreeNode\n {\n public:\n     /// Initialize interpolate node with expression and interpolate expression\n-    explicit InterpolateNode(QueryTreeNodePtr expression_, QueryTreeNodePtr interpolate_expression_);\n+    explicit InterpolateNode(std::shared_ptr<IdentifierNode> expression_, QueryTreeNodePtr interpolate_expression_);\n \n     /// Get expression to interpolate\n     const QueryTreeNodePtr & getExpression() const\n@@ -61,6 +61,9 @@ class InterpolateNode final : public IQueryTreeNode\n \n     ASTPtr toASTImpl(const ConvertToASTOptions & options) const override;\n \n+    /// Initial name from column identifier.\n+    std::string expression_name;\n+\n private:\n     static constexpr size_t expression_child_index = 0;\n     static constexpr size_t interpolate_expression_child_index = 1;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03155_analyzer_interpolate.reference b/tests/queries/0_stateless/03155_analyzer_interpolate.reference\nindex 791aaa5b2a22..eade3b45d263 100644\n--- a/tests/queries/0_stateless/03155_analyzer_interpolate.reference\n+++ b/tests/queries/0_stateless/03155_analyzer_interpolate.reference\n@@ -11,3 +11,8 @@\n 5\t[5]\n 5.5\t[5]\n 7\t[7]\n+2\n+100500\n+18\n+26\n+34\ndiff --git a/tests/queries/0_stateless/03155_analyzer_interpolate.sql b/tests/queries/0_stateless/03155_analyzer_interpolate.sql\nindex b3c1d233f478..30423cb86ff1 100644\n--- a/tests/queries/0_stateless/03155_analyzer_interpolate.sql\n+++ b/tests/queries/0_stateless/03155_analyzer_interpolate.sql\n@@ -10,3 +10,6 @@ SELECT n, number+5 AS inter FROM (  -- { serverError NOT_AN_AGGREGATE }\n    SELECT toFloat32(number % 10) AS n, number, number*2 AS mn\n    FROM numbers(10) WHERE number % 3 = 1\n ) GROUP BY n, inter ORDER BY n WITH FILL FROM 0 TO 5.51 STEP 0.5 INTERPOLATE (inter AS mn * 2);\n+\n+-- https://github.com/ClickHouse/ClickHouse/issues/64636\n+select sum(number) as s from remote('127.0.0.{1,2}', numbers(10)) where (intDiv(number, 2) as key) != 1 group by key order by key with fill interpolate (s as 100500);\n",
  "problem_statement": "Interpolate + remote + new analyzer => Unknown expression identifier\n```\r\nSELECT\r\n    toStartOfInterval(event_time, toIntervalMinute(5)) AS period,\r\n    uniqExact(query_id) AS count\r\nFROM remote('127.0.0.{1,2}', system.query_log)\r\nWHERE (period > (NOW() - toIntervalHour(24))) AND ((Settings['log_comment']) != 'abc') AND (user NOT IN ('def', 'gh')) AND (is_initial_query = 1) AND (exception_code != 0)\r\nGROUP BY period\r\nORDER BY period ASC WITH FILL STEP toIntervalMinute(5)\r\nINTERPOLATE ( count AS 0 )\r\n\r\nQuery id: 5e4b3158-d006-474d-8b13-4f1f74beda35\r\n\r\n\r\nElapsed: 0.012 sec. \r\n\r\nReceived exception from server (version 24.6.1):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Unknown expression identifier 'uniqExact(__table1.query_id)' in scope SELECT toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) AS period, uniqExact(__table1.query_id) AS count FROM system.query_log AS __table1 WHERE (toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) > _CAST(1716986418, 'DateTime')) AND ((__table1.Settings['log_comment']) != 'abc') AND (__table1.user NOT IN ('def', 'gh')) AND (__table1.is_initial_query = 1) AND (__table1.exception_code != 0) GROUP BY toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) ORDER BY toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) ASC WITH FILL STEP _CAST(5, 'IntervalMinute') INTERPOLATE ( uniqExact(__table1.query_id) AS 0 ). (UNKNOWN_IDENTIFIER)\r\n\r\n```\r\n\r\n```\r\n2024.05.30 12:41:38.266680 [ 3835182 ] {7388c76f-2f6e-4e60-b9f3-d1785d5f1fa4} <Error> TCPHandler: Code: 47. DB::Exception: Unknown expression identifier 'uniqExact(__table1.query_id)' in scope SELECT toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) AS period, uniqExact(__table1.query_id) AS count FROM system.query_log AS __table1 WHERE (toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) > _CAST(1716986498, 'DateTime')) AND ((__table1.Settings['log_comment']) != 'abc') AND (__table1.user NOT IN ('def', 'gh')) AND (__table1.is_initial_query = 1) AND (__table1.exception_code != 0) GROUP BY toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) ORDER BY toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) ASC WITH FILL STEP _CAST(5, 'IntervalMinute') INTERPOLATE ( uniqExact(__table1.query_id) AS 0 ). (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000011780ad2\r\n1. ./build/./src/Common/Exception.cpp:101: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000a3332f9\r\n2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000005c42dcc\r\n3. ./contrib/llvm-project/libcxx/include/vector:434: DB::Exception::Exception<char const*, String&, String const&, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String const&>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String const&, String&&, String&&) @ 0x000000000f011379\r\n4. ./build/./src/Analyzer/Resolve/QueryAnalyzer.cpp:0: DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000000efda8cb\r\n5. ./contrib/llvm-project/libcxx/include/vector:434: DB::QueryAnalyzer::resolveInterpolateColumnsNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000000f007f36\r\n6. ./build/./src/Analyzer/Resolve/QueryAnalyzer.cpp:0: DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000000efd3236\r\n7. ./build/./src/Analyzer/Resolve/QueryAnalyzer.cpp:0: DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000000efd1e6c\r\n8. ./build/./src/Analyzer/Resolve/QueryAnalysisPass.cpp:0: DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000000efd16b5\r\n9. ./build/./src/Analyzer/QueryTreePassManager.cpp:208: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>, unsigned long) @ 0x000000000efd00a1\r\n10. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:596: DB::QueryTreePassManager::runOnlyResolve(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000000efcffc8\r\n11. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:833: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000000f282ed4\r\n12. ./build/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:160: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000000f2812da\r\n13. ./contrib/llvm-project/libcxx/include/vector:434: DB::createLocalPlan(std::shared_ptr<DB::IAST> const&, DB::Block const&, std::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned long, bool) @ 0x00000000109e9a90\r\n14. ./build/./src/Interpreters/ClusterProxy/SelectStreamFactory.cpp:160: DB::ClusterProxy::SelectStreamFactory::createForShardImpl(DB::Cluster::ShardInfo const&, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::IQueryTreeNode> const&, DB::StorageID const&, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, std::vector<std::unique_ptr<DB::QueryPlan, std::default_delete<DB::QueryPlan>>, std::allocator<std::unique_ptr<DB::QueryPlan, std::default_delete<DB::QueryPlan>>>>&, std::vector<DB::ClusterProxy::SelectStreamFactory::Shard, std::allocator<DB::ClusterProxy::SelectStreamFactory::Shard>>&, unsigned int, bool, std::function<std::shared_ptr<DB::IAST> (unsigned long)>, bool)::$_0::operator()() const @ 0x000000000f73332f\r\n15. ./build/./src/Interpreters/ClusterProxy/SelectStreamFactory.cpp:233: DB::ClusterProxy::SelectStreamFactory::createForShardImpl(DB::Cluster::ShardInfo const&, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::IQueryTreeNode> const&, DB::StorageID const&, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, std::vector<std::unique_ptr<DB::QueryPlan, std::default_delete<DB::QueryPlan>>, std::allocator<std::unique_ptr<DB::QueryPlan, std::default_delete<DB::QueryPlan>>>>&, std::vector<DB::ClusterProxy::SelectStreamFactory::Shard, std::allocator<DB::ClusterProxy::SelectStreamFactory::Shard>>&, unsigned int, bool, std::function<std::shared_ptr<DB::IAST> (unsigned long)>, bool) @ 0x000000000f731b13\r\n16. ./contrib/llvm-project/libcxx/include/__functional/function.h:818: ? @ 0x000000000f7335e1\r\n17. ./contrib/llvm-project/libcxx/include/__functional/function.h:818: ? @ 0x000000000f728d56\r\n18. ./contrib/llvm-project/libcxx/include/__functional/function.h:818: ? @ 0x000000000fb1405c\r\n19. ./build/./src/Planner/PlannerJoinTree.cpp:0: DB::(anonymous namespace)::buildQueryPlanForTableExpression(std::shared_ptr<DB::IQueryTreeNode>, DB::SelectQueryInfo const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::PlannerContext>&, bool, bool) @ 0x000000000f2b028e\r\n20. ./build/./src/Planner/PlannerJoinTree.cpp:1679: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x000000000f2a77a1\r\n21. ./build/./src/Planner/Planner.cpp:0: DB::Planner::buildPlanForQueryNode() @ 0x000000000f28938d\r\n22. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:815: DB::Planner::buildQueryPlanIfNeeded() @ 0x000000000f285d47\r\n23. ./src/Planner/Planner.h:44: DB::InterpreterSelectQueryAnalyzer::getQueryPlan() @ 0x000000000f283f8d\r\n24. ./build/./src/Interpreters/executeQuery.cpp:1161: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000000f621720\r\n25. ./build/./src/Interpreters/executeQuery.cpp:1375: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000000f61e7d5\r\n26. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:612: DB::TCPHandler::runImpl() @ 0x00000000105bc155\r\n27. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:593: DB::TCPHandler::run() @ 0x00000000105d3579\r\n28. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x000000001176f067\r\n29. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x000000001176f53a\r\n30. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x00000000117d5fe7\r\n31. ./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000117d3b03\r\n\r\n```\n",
  "hints_text": "",
  "created_at": "2024-06-11T10:18:50Z",
  "modified_files": [
    "src/Analyzer/InterpolateNode.cpp",
    "src/Analyzer/InterpolateNode.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/03155_analyzer_interpolate.reference",
    "tests/queries/0_stateless/03155_analyzer_interpolate.sql"
  ]
}