diff --git a/src/DataTypes/DataTypeNumberBase.h b/src/DataTypes/DataTypeNumberBase.h
index 0390da2cb6f1..cbbc203bf4f1 100644
--- a/src/DataTypes/DataTypeNumberBase.h
+++ b/src/DataTypes/DataTypeNumberBase.h
@@ -51,7 +51,13 @@ class DataTypeNumberBase : public DataTypeWithSimpleSerialization
 
     bool isParametric() const override { return false; }
     bool haveSubtypes() const override { return false; }
-    bool shouldAlignRightInPrettyFormats() const override { return true; }
+
+    bool shouldAlignRightInPrettyFormats() const override
+    {
+        /// Just a number, without customizations. Counterexample: IPv4.
+        return !custom_text_serialization;
+    }
+
     bool textCanContainOnlyValidUTF8() const override { return true; }
     bool isComparable() const override { return true; }
     bool isValueRepresentedByNumber() const override { return true; }
diff --git a/src/DataTypes/IDataType.h b/src/DataTypes/IDataType.h
index b67c5ee18462..cb9fc7f122c3 100644
--- a/src/DataTypes/IDataType.h
+++ b/src/DataTypes/IDataType.h
@@ -497,7 +497,7 @@ class IDataType : private boost::noncopyable
     /// For all other substreams (like ArraySizes, NullMasks, etc.) we use only
     /// generic compression codecs like LZ4.
     static bool isSpecialCompressionAllowed(const SubstreamPath & path);
-private:
+protected:
     friend class DataTypeFactory;
     friend class AggregateFunctionSimpleState;
     /// Customize this DataType
