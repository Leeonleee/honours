{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12364,
  "instance_id": "ClickHouse__ClickHouse-12364",
  "issue_numbers": [
    "10437"
  ],
  "base_commit": "c410ae3ebf69b56d7d5e8e7b5b34bbad476b0390",
  "patch": "diff --git a/src/Storages/TTLDescription.cpp b/src/Storages/TTLDescription.cpp\nindex ea6b3e64aff7..744435bdc317 100644\n--- a/src/Storages/TTLDescription.cpp\n+++ b/src/Storages/TTLDescription.cpp\n@@ -272,6 +272,29 @@ TTLDescription TTLDescription::getTTLFromAST(\n }\n \n \n+TTLTableDescription::TTLTableDescription(const TTLTableDescription & other)\n+ : definition_ast(other.definition_ast ? other.definition_ast->clone() : nullptr)\n+ , rows_ttl(other.rows_ttl)\n+ , move_ttl(other.move_ttl)\n+{\n+}\n+\n+TTLTableDescription & TTLTableDescription::operator=(const TTLTableDescription & other)\n+{\n+    if (&other == this)\n+        return *this;\n+\n+    if (other.definition_ast)\n+        definition_ast = other.definition_ast->clone();\n+    else\n+        definition_ast.reset();\n+\n+    rows_ttl = other.rows_ttl;\n+    move_ttl = other.move_ttl;\n+\n+    return *this;\n+}\n+\n TTLTableDescription TTLTableDescription::getTTLForTableFromAST(\n     const ASTPtr & definition_ast,\n     const ColumnsDescription & columns,\ndiff --git a/src/Storages/TTLDescription.h b/src/Storages/TTLDescription.h\nindex 906cfb0e6759..ab93967f1146 100644\n--- a/src/Storages/TTLDescription.h\n+++ b/src/Storages/TTLDescription.h\n@@ -102,6 +102,10 @@ struct TTLTableDescription\n     /// Moving data TTL (to other disks or volumes)\n     TTLDescriptions move_ttl;\n \n+    TTLTableDescription() = default;\n+    TTLTableDescription(const TTLTableDescription & other);\n+    TTLTableDescription & operator=(const TTLTableDescription & other);\n+\n     static TTLTableDescription getTTLForTableFromAST(\n         const ASTPtr & definition_ast, const ColumnsDescription & columns, const Context & context, const KeyDescription & primary_key);\n };\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01378_alter_rename_with_ttl.reference b/tests/queries/0_stateless/01378_alter_rename_with_ttl.reference\nnew file mode 100644\nindex 000000000000..bf8f7658af4a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01378_alter_rename_with_ttl.reference\n@@ -0,0 +1,3 @@\n+9\n+9\n+0\ndiff --git a/tests/queries/0_stateless/01378_alter_rename_with_ttl.sql b/tests/queries/0_stateless/01378_alter_rename_with_ttl.sql\nnew file mode 100644\nindex 000000000000..98f295383800\n--- /dev/null\n+++ b/tests/queries/0_stateless/01378_alter_rename_with_ttl.sql\n@@ -0,0 +1,26 @@\n+DROP TABLE IF EXISTS table_rename_with_ttl;\n+\n+CREATE TABLE table_rename_with_ttl\n+(\n+  date1 Date,\n+  value1 String\n+)\n+ENGINE = ReplicatedMergeTree('/clickhouse/test/table_rename_with_ttl', '1')\n+ORDER BY tuple();\n+\n+INSERT INTO table_rename_with_ttl SELECT toDate('2018-10-01') + number % 3, toString(number) from numbers(9);\n+\n+SELECT count() FROM table_rename_with_ttl;\n+\n+SET materialize_ttl_after_modify = 0;\n+ALTER TABLE table_rename_with_ttl MODIFY TTL date1 + INTERVAL 1 MONTH;\n+\n+SELECT count() FROM table_rename_with_ttl;\n+\n+ALTER TABLE table_rename_with_ttl RENAME COLUMN date1 TO renamed_date1;\n+\n+ALTER TABLE table_rename_with_ttl materialize TTL settings mutations_sync=2;\n+\n+SELECT count() FROM table_rename_with_ttl;\n+\n+DROP TABLE IF EXISTS table_rename_with_ttl;\n",
  "problem_statement": "Mat view subquery + buffer table results in DB::Exception: There is no query\n```\r\nCREATE TABLE t1 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE TABLE t2 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE MATERIALIZED VIEW mv1\r\nTO t2\r\nAS SELECT * FROM (SELECT * FROM t1)\r\n\r\nCREATE TABLE b1 AS t1\r\nENGINE = Buffer(default, t1, 1, 0, 0, 1, 1, 1, 1)\r\n\r\nvmihailenco :) INSERT INTO b1 VALUES (1, now());\r\n\r\nINSERT INTO b1 VALUES\r\n\r\nReceived exception from server (version 20.3.7):\r\nCode: 393. DB::Exception: Received from localhost:9000. DB::Exception: There is no query.\r\n```\n",
  "hints_text": "I'm having same issue,\r\nI have \r\n1. table A engine ReplaceMergeTree()\r\n2. MV B on table A\r\n3. Buffer table on table A\r\n\r\nData is not written to the destination A table from the buffer.\r\nEven DROPing the Buffer that should trigger flush the data fails\r\n\r\n```\r\n2020.05.02 21:31:28.038219 [ 526 ] {06a0c14c-6c81-4204-9ab7-968755e881ce} <Error> virtual void DB::StorageBuffer::shutdown(): Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xbecd55c in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x5009d49 in /usr/bin/clickhouse\r\n2. ? @ 0x4bfb800 in /usr/bin/clickhouse\r\n3. DB::Context::getSampleBlockCache() const @ 0x8cdcb99 in /usr/bin/clickhouse\r\n4. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) @ 0x8da5c02 in /usr/bin/clickhouse\r\n5. ? @ 0x8f365b9 in /usr/bin/clickhouse\r\n6. DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool) @ 0x8f394f8 in /usr/bin/clickhouse\r\n7. DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const @ 0x8ef3983 in /usr/bin/clickhouse\r\n8. ? @ 0x8d6d616 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6e8c8 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n11. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n15. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n17. DB::PushingToViewsBlockOutputStream::PushingToViewsBlockOutputStream(std::__1::shared_ptr<DB::IStorage> const&, DB::Context const&, std::__1::shared_ptr<DB::IAST> const&, bool) @ 0x96f8baa in /usr/bin/clickhouse\r\n18. DB::InterpreterInsertQuery::execute() @ 0x8d4f07f in /usr/bin/clickhouse\r\n19. DB::StorageBuffer::writeBlockToDestination(DB::Block const&, std::__1::shared_ptr<DB::IStorage>) @ 0x99469fe in /usr/bin/clickhouse\r\n20. DB::StorageBuffer::flushBuffer(DB::StorageBuffer::Buffer&, bool, bool) @ 0x994796f in /usr/bin/clickhouse\r\n21. DB::StorageBuffer::optimize(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IAST> const&, bool, bool, DB::Context const&) @ 0x9947baf in /usr/bin/clickhouse\r\n22. DB::StorageBuffer::shutdown() @ 0x9944103 in /usr/bin/clickhouse\r\n23. DB::InterpreterDropQuery::executeToTable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTDropQuery::Kind, bool, bool, bool) @ 0x8d47dd0 in /usr/bin/clickhouse\r\n24. DB::InterpreterDropQuery::execute() @ 0x8d49e3e in /usr/bin/clickhouse\r\n25. ? @ 0x8f2f50a in /usr/bin/clickhouse\r\n26. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0x8f32b06 in /usr/bin/clickhouse\r\n27. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x5084816 in /usr/bin/clickhouse\r\n28. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x5087f03 in /usr/bin/clickhouse\r\n29. Poco::Net::HTTPServerConnection::run() @ 0x9e0480c in /usr/bin/clickhouse\r\n30. Poco::Net::TCPServerConnection::start() @ 0x9e01297 in /usr/bin/clickhouse\r\n31. Poco::Net::TCPServerDispatcher::run() @ 0x9e0168d in /usr/bin/clickhouse\r\n (version 20.2.1.2442 (official build))\r\n```",
  "created_at": "2020-07-09T18:54:07Z",
  "modified_files": [
    "src/Storages/TTLDescription.cpp",
    "src/Storages/TTLDescription.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01378_alter_rename_with_ttl.reference",
    "b/tests/queries/0_stateless/01378_alter_rename_with_ttl.sql"
  ]
}