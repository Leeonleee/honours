{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13818,
  "instance_id": "ClickHouse__ClickHouse-13818",
  "issue_numbers": [
    "13742"
  ],
  "base_commit": "c633168c51d5518cbe2f4ce3ce252ae3322a56c4",
  "patch": "diff --git a/docs/en/sql-reference/aggregate-functions/reference/index.md b/docs/en/sql-reference/aggregate-functions/reference/index.md\nindex 675448a321b7..6e00ad8d9914 100644\n--- a/docs/en/sql-reference/aggregate-functions/reference/index.md\n+++ b/docs/en/sql-reference/aggregate-functions/reference/index.md\n@@ -60,6 +60,8 @@ ClickHouse-specific aggregate functions:\n -   [quantile](../../../sql-reference/aggregate-functions/reference/quantile.md)\n -   [quantiles](../../../sql-reference/aggregate-functions/reference/quantiles.md)\n -   [quantileExact](../../../sql-reference/aggregate-functions/reference/quantileexact.md)\n+-   [quantileExactLow](../../../sql-reference/aggregate-functions/reference/quantileexact.md#quantileexactlow)\n+-   [quantileExactHigh](../../../sql-reference/aggregate-functions/reference/quantileexact.md#quantileexacthigh)\n -   [quantileExactWeighted](../../../sql-reference/aggregate-functions/reference/quantileexactweighted.md)\n -   [quantileTiming](../../../sql-reference/aggregate-functions/reference/quantiletiming.md)\n -   [quantileTimingWeighted](../../../sql-reference/aggregate-functions/reference/quantiletimingweighted.md)\ndiff --git a/docs/en/sql-reference/aggregate-functions/reference/quantileexact.md b/docs/en/sql-reference/aggregate-functions/reference/quantileexact.md\nindex 100d6ea129d4..40b25c14988e 100644\n--- a/docs/en/sql-reference/aggregate-functions/reference/quantileexact.md\n+++ b/docs/en/sql-reference/aggregate-functions/reference/quantileexact.md\n@@ -49,6 +49,114 @@ Result:\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n+# quantileExactLow {#quantileexactlow}\n+\n+Similar to `quantileExact`, this computes the exact [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence.\n+\n+To get exact value, all the passed values are combined into an array, which is then fully sorted.  The sorting [algorithm's](https://en.cppreference.com/w/cpp/algorithm/sort) complexity is `O(N\u00b7log(N))`, where `N = std::distance(first, last)` comparisons.\n+\n+Depending on the level, i.e if the level is 0.5 then the exact lower median value is returned if there are even number of elements and the middle value is returned if there are odd number of elements. Median is calculated similar to the [median_low](https://docs.python.org/3/library/statistics.html#statistics.median_low) implementation which is used in python.\n+\n+For all other levels, the element at the the index corresponding to the value of `level * size_of_array` is returned. For example:\n+\n+```$sql\n+SELECT quantileExactLow(0.1)(number) FROM numbers(10)\n+\n+\u250c\u2500quantileExactLow(0.1)(number)\u2500\u2510\n+\u2502                             1 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+                                                                                                                                                                                 \n+When using multiple `quantile*` functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the [quantiles](../../../sql-reference/aggregate-functions/reference/quantiles.md#quantiles) function.\n+\n+**Syntax**\n+\n+``` sql\n+quantileExact(level)(expr)\n+```\n+\n+Alias: `medianExactLow`.\n+\n+**Parameters**\n+\n+-   `level` \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a `level` value in the range of `[0.01, 0.99]`. Default value: 0.5. At `level=0.5` the function calculates [median](https://en.wikipedia.org/wiki/Median).\n+-   `expr` \u2014 Expression over the column values resulting in numeric [data types](../../../sql-reference/data-types/index.md#data_types), [Date](../../../sql-reference/data-types/date.md) or [DateTime](../../../sql-reference/data-types/datetime.md).\n+\n+**Returned value**\n+\n+-   Quantile of the specified level.\n+\n+Type:\n+\n+-   [Float64](../../../sql-reference/data-types/float.md) for numeric data type input.\n+-   [Date](../../../sql-reference/data-types/date.md) if input values have the `Date` type.\n+-   [DateTime](../../../sql-reference/data-types/datetime.md) if input values have the `DateTime` type.\n+\n+**Example**\n+\n+Query:\n+\n+``` sql\n+SELECT quantileExactLow(number) FROM numbers(10)\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500quantileExactLow(number)\u2500\u2510\n+\u2502                        4 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+# quantileExactHigh {#quantileexacthigh}\n+\n+Similar to `quantileExact`, this computes the exact [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence.\n+\n+To get exact value, all the passed values are combined into an array, which is then fully sorted.  The sorting [algorithm's](https://en.cppreference.com/w/cpp/algorithm/sort) complexity is `O(N\u00b7log(N))`, where `N = std::distance(first, last)` comparisons.\n+\n+Depending on the level, i.e if the level is 0.5 then the exact higher median value is returned if there are even number of elements and the middle value is returned if there are odd number of elements. Median is calculated similar to the [median_high](https://docs.python.org/3/library/statistics.html#statistics.median_high) implementation which is used in python. For all other levels, the element at the the index corresponding to the value of `level * size_of_array` is returned. \n+\n+This implementation behaves exactly similar to the current `quantileExact` implementation.\n+\n+When using multiple `quantile*` functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the [quantiles](../../../sql-reference/aggregate-functions/reference/quantiles.md#quantiles) function.\n+\n+**Syntax**\n+\n+``` sql\n+quantileExactHigh(level)(expr)\n+```\n+\n+Alias: `medianExactHigh`.\n+\n+**Parameters**\n+\n+-   `level` \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a `level` value in the range of `[0.01, 0.99]`. Default value: 0.5. At `level=0.5` the function calculates [median](https://en.wikipedia.org/wiki/Median).\n+-   `expr` \u2014 Expression over the column values resulting in numeric [data types](../../../sql-reference/data-types/index.md#data_types), [Date](../../../sql-reference/data-types/date.md) or [DateTime](../../../sql-reference/data-types/datetime.md).\n+\n+**Returned value**\n+\n+-   Quantile of the specified level.\n+\n+Type:\n+\n+-   [Float64](../../../sql-reference/data-types/float.md) for numeric data type input.\n+-   [Date](../../../sql-reference/data-types/date.md) if input values have the `Date` type.\n+-   [DateTime](../../../sql-reference/data-types/datetime.md) if input values have the `DateTime` type.\n+\n+**Example**\n+\n+Query:\n+\n+``` sql\n+SELECT quantileExactHigh(number) FROM numbers(10)\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500quantileExactHigh(number)\u2500\u2510\n+\u2502                         5 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n **See Also**\n \n -   [median](../../../sql-reference/aggregate-functions/reference/median.md#median)\ndiff --git a/src/AggregateFunctions/AggregateFunctionQuantile.cpp b/src/AggregateFunctions/AggregateFunctionQuantile.cpp\nindex 4d50bd3f5315..52b82fbf733c 100644\n--- a/src/AggregateFunctions/AggregateFunctionQuantile.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionQuantile.cpp\n@@ -26,6 +26,11 @@ template <typename Value, bool float_return> using FuncQuantilesDeterministic =\n template <typename Value, bool _> using FuncQuantileExact = AggregateFunctionQuantile<Value, QuantileExact<Value>, NameQuantileExact, false, void, false>;\n template <typename Value, bool _> using FuncQuantilesExact = AggregateFunctionQuantile<Value, QuantileExact<Value>, NameQuantilesExact, false, void, true>;\n \n+template <typename Value, bool _> using FuncQuantileExactLow = AggregateFunctionQuantile<Value, QuantileExactLow<Value>, NameQuantileExactLow, false, void, false>;\n+template <typename Value, bool _> using FuncQuantilesExactLow = AggregateFunctionQuantile<Value, QuantileExactLow<Value>, NameQuantilesExactLow, false, void, true>;\n+template <typename Value, bool _> using FuncQuantileExactHigh = AggregateFunctionQuantile<Value, QuantileExactHigh<Value>, NameQuantileExactHigh, false, void, false>;\n+template <typename Value, bool _> using FuncQuantilesExactHigh = AggregateFunctionQuantile<Value, QuantileExactHigh<Value>, NameQuantilesExactHigh, false, void, true>;\n+\n template <typename Value, bool _> using FuncQuantileExactExclusive = AggregateFunctionQuantile<Value, QuantileExactExclusive<Value>, NameQuantileExactExclusive, false, Float64, false>;\n template <typename Value, bool _> using FuncQuantilesExactExclusive = AggregateFunctionQuantile<Value, QuantileExactExclusive<Value>, NameQuantilesExactExclusive, false, Float64, true>;\n \n@@ -54,7 +59,11 @@ static constexpr bool supportDecimal()\n     return std::is_same_v<Function<Float32, false>, FuncQuantile<Float32, false>> ||\n         std::is_same_v<Function<Float32, false>, FuncQuantiles<Float32, false>> ||\n         std::is_same_v<Function<Float32, false>, FuncQuantileExact<Float32, false>> ||\n+        std::is_same_v<Function<Float32, false>, FuncQuantileExactLow<Float32, false>> ||\n+        std::is_same_v<Function<Float32, false>, FuncQuantileExactHigh<Float32, false>> ||\n         std::is_same_v<Function<Float32, false>, FuncQuantilesExact<Float32, false>> ||\n+        std::is_same_v<Function<Float32, false>, FuncQuantilesExactLow<Float32, false>> ||\n+        std::is_same_v<Function<Float32, false>, FuncQuantilesExactHigh<Float32, false>> ||\n         std::is_same_v<Function<Float32, false>, FuncQuantileExactWeighted<Float32, false>> ||\n         std::is_same_v<Function<Float32, false>, FuncQuantilesExactWeighted<Float32, false>>;\n }\n@@ -118,6 +127,12 @@ void registerAggregateFunctionsQuantile(AggregateFunctionFactory & factory)\n     factory.registerFunction(NameQuantileExact::name, createAggregateFunctionQuantile<FuncQuantileExact>);\n     factory.registerFunction(NameQuantilesExact::name, createAggregateFunctionQuantile<FuncQuantilesExact>);\n \n+    factory.registerFunction(NameQuantileExactLow::name, createAggregateFunctionQuantile<FuncQuantileExactLow>);\n+    factory.registerFunction(NameQuantilesExactLow::name, createAggregateFunctionQuantile<FuncQuantilesExactLow>);\n+\n+    factory.registerFunction(NameQuantileExactHigh::name, createAggregateFunctionQuantile<FuncQuantileExactHigh>);\n+    factory.registerFunction(NameQuantilesExactHigh::name, createAggregateFunctionQuantile<FuncQuantilesExactHigh>);\n+\n     factory.registerFunction(NameQuantileExactExclusive::name, createAggregateFunctionQuantile<FuncQuantileExactExclusive>);\n     factory.registerFunction(NameQuantilesExactExclusive::name, createAggregateFunctionQuantile<FuncQuantilesExactExclusive>);\n \n@@ -143,6 +158,8 @@ void registerAggregateFunctionsQuantile(AggregateFunctionFactory & factory)\n     factory.registerAlias(\"median\", NameQuantile::name);\n     factory.registerAlias(\"medianDeterministic\", NameQuantileDeterministic::name);\n     factory.registerAlias(\"medianExact\", NameQuantileExact::name);\n+    factory.registerAlias(\"medianExactLow\", NameQuantileExactLow::name);\n+    factory.registerAlias(\"medianExactHigh\", NameQuantileExactHigh::name);\n     factory.registerAlias(\"medianExactWeighted\", NameQuantileExactWeighted::name);\n     factory.registerAlias(\"medianTiming\", NameQuantileTiming::name);\n     factory.registerAlias(\"medianTimingWeighted\", NameQuantileTimingWeighted::name);\ndiff --git a/src/AggregateFunctions/AggregateFunctionQuantile.h b/src/AggregateFunctions/AggregateFunctionQuantile.h\nindex 536d9d5683f2..9d2232892f08 100644\n--- a/src/AggregateFunctions/AggregateFunctionQuantile.h\n+++ b/src/AggregateFunctions/AggregateFunctionQuantile.h\n@@ -201,6 +201,12 @@ struct NameQuantilesDeterministic { static constexpr auto name = \"quantilesDeter\n struct NameQuantileExact { static constexpr auto name = \"quantileExact\"; };\n struct NameQuantilesExact { static constexpr auto name = \"quantilesExact\"; };\n \n+struct NameQuantileExactLow { static constexpr auto name = \"quantileExactLow\"; };\n+struct NameQuantilesExactLow { static constexpr auto name = \"quantilesExactLow\"; };\n+\n+struct NameQuantileExactHigh { static constexpr auto name = \"quantileExactHigh\"; };\n+struct NameQuantilesExactHigh { static constexpr auto name = \"quantilesExactHigh\"; };\n+\n struct NameQuantileExactExclusive { static constexpr auto name = \"quantileExactExclusive\"; };\n struct NameQuantilesExactExclusive { static constexpr auto name = \"quantilesExactExclusive\"; };\n \ndiff --git a/src/AggregateFunctions/QuantileExact.h b/src/AggregateFunctions/QuantileExact.h\nindex efe3a8f73ea8..da0f644721bb 100644\n--- a/src/AggregateFunctions/QuantileExact.h\n+++ b/src/AggregateFunctions/QuantileExact.h\n@@ -1,30 +1,25 @@\n #pragma once\n \n-#include <Common/PODArray.h>\n-#include <Common/NaNUtils.h>\n+#include <algorithm>\n #include <Core/Types.h>\n-#include <IO/WriteBuffer.h>\n #include <IO/ReadBuffer.h>\n #include <IO/VarInt.h>\n+#include <IO/WriteBuffer.h>\n+#include <Common/NaNUtils.h>\n+#include <Common/PODArray.h>\n \n \n namespace DB\n {\n-\n namespace ErrorCodes\n {\n     extern const int NOT_IMPLEMENTED;\n     extern const int BAD_ARGUMENTS;\n }\n \n-/** Calculates quantile by collecting all values into array\n-  *  and applying n-th element (introselect) algorithm for the resulting array.\n-  *\n-  * It uses O(N) memory and it is very inefficient in case of high amount of identical values.\n-  * But it is very CPU efficient for not large datasets.\n-  */\n-template <typename Value>\n-struct QuantileExact\n+\n+template <typename Value, typename Derived>\n+struct QuantileExactBase\n {\n     /// The memory will be allocated to several elements at once, so that the state occupies 64 bytes.\n     static constexpr size_t bytes_in_arena = 64 - sizeof(PODArray<Value>);\n@@ -44,10 +39,7 @@ struct QuantileExact\n         throw Exception(\"Method add with weight is not implemented for QuantileExact\", ErrorCodes::NOT_IMPLEMENTED);\n     }\n \n-    void merge(const QuantileExact & rhs)\n-    {\n-        array.insert(rhs.array.begin(), rhs.array.end());\n-    }\n+    void merge(const QuantileExactBase & rhs) { array.insert(rhs.array.begin(), rhs.array.end()); }\n \n     void serialize(WriteBuffer & buf) const\n     {\n@@ -64,16 +56,38 @@ struct QuantileExact\n         buf.read(reinterpret_cast<char *>(array.data()), size * sizeof(array[0]));\n     }\n \n-    /// Get the value of the `level` quantile. The level must be between 0 and 1.\n     Value get(Float64 level)\n+    {\n+        auto derived = static_cast<Derived*>(this);\n+        return derived->getImpl(level);\n+    }\n+\n+    void getMany(const Float64 * levels, const size_t * indices, size_t size, Value * result)\n+    {\n+        auto derived = static_cast<Derived*>(this);\n+        return derived->getManyImpl(levels, indices, size, result);\n+    }\n+};\n+\n+/** Calculates quantile by collecting all values into array\n+  *  and applying n-th element (introselect) algorithm for the resulting array.\n+  *\n+  * It uses O(N) memory and it is very inefficient in case of high amount of identical values.\n+  * But it is very CPU efficient for not large datasets.\n+  */\n+template <typename Value>\n+struct QuantileExact : QuantileExactBase<Value, QuantileExact<Value>>\n+{\n+    using QuantileExactBase<Value, QuantileExact<Value>>::array;\n+\n+    // Get the value of the `level` quantile. The level must be between 0 and 1.\n+    Value getImpl(Float64 level)\n     {\n         if (!array.empty())\n         {\n-            size_t n = level < 1\n-                ? level * array.size()\n-                : (array.size() - 1);\n+            size_t n = level < 1 ? level * array.size() : (array.size() - 1);\n \n-            std::nth_element(array.begin(), array.begin() + n, array.end());    /// NOTE You can think of the radix-select algorithm.\n+            std::nth_element(array.begin(), array.begin() + n, array.end()); /// NOTE You can think of the radix-select algorithm.\n             return array[n];\n         }\n \n@@ -82,7 +96,7 @@ struct QuantileExact\n \n     /// Get the `size` values of `levels` quantiles. Write `size` results starting with `result` address.\n     /// indices - an array of index levels such that the corresponding elements will go in ascending order.\n-    void getMany(const Float64 * levels, const size_t * indices, size_t size, Value * result)\n+    void getManyImpl(const Float64 * levels, const size_t * indices, size_t size, Value * result)\n     {\n         if (!array.empty())\n         {\n@@ -91,9 +105,7 @@ struct QuantileExact\n             {\n                 auto level = levels[indices[i]];\n \n-                size_t n = level < 1\n-                    ? level * array.size()\n-                    : (array.size() - 1);\n+                size_t n = level < 1 ? level * array.size() : (array.size() - 1);\n \n                 std::nth_element(array.begin() + prev_n, array.begin() + n, array.end());\n \n@@ -111,6 +123,7 @@ struct QuantileExact\n \n /// QuantileExactExclusive is equivalent to Excel PERCENTILE.EXC, R-6, SAS-4, SciPy-(0,0)\n template <typename Value>\n+/// There is no virtual-like functions. So we don't inherit from QuantileExactBase.\n struct QuantileExactExclusive : public QuantileExact<Value>\n {\n     using QuantileExact<Value>::array;\n@@ -178,6 +191,7 @@ struct QuantileExactExclusive : public QuantileExact<Value>\n \n /// QuantileExactInclusive is equivalent to Excel PERCENTILE and PERCENTILE.INC, R-7, SciPy-(1,1)\n template <typename Value>\n+/// There is no virtual-like functions. So we don't inherit from QuantileExactBase.\n struct QuantileExactInclusive : public QuantileExact<Value>\n {\n     using QuantileExact<Value>::array;\n@@ -238,4 +252,137 @@ struct QuantileExactInclusive : public QuantileExact<Value>\n     }\n };\n \n+// QuantileExactLow returns the low median of given data.\n+// Implementation is as per \"medium_low\" function from python:\n+// https://docs.python.org/3/library/statistics.html#statistics.median_low\n+template <typename Value>\n+struct QuantileExactLow : public QuantileExactBase<Value, QuantileExactLow<Value>>\n+{\n+    using QuantileExactBase<Value, QuantileExactLow<Value>>::array;\n+\n+    Value getImpl(Float64 level)\n+    {\n+        if (!array.empty())\n+        {\n+            // sort inputs in ascending order\n+            std::sort(array.begin(), array.end());\n+            size_t n = level < 1 ? level * array.size() : (array.size() - 1);\n+            // if level is 0.5 then compute the \"low\" median of the sorted array\n+            // by the method of rounding.\n+            if (level == 0.5)\n+            {\n+                auto s = array.size();\n+                if (s % 2 == 1)\n+                {\n+                    return array[static_cast<size_t>(floor(s / 2))];\n+                }\n+                else\n+                {\n+                    return array[static_cast<size_t>((floor(s / 2)) - 1)];\n+                }\n+            }\n+            // else quantile is the nth index of the sorted array obtained by multiplying\n+            // level and size of array. Example if level = 0.1 and size of array is 10,\n+            // then return array[1].\n+            return array[n];\n+        }\n+        return std::numeric_limits<Value>::quiet_NaN();\n+    }\n+\n+    void getManyImpl(const Float64 * levels, const size_t * indices, size_t size, Value * result)\n+    {\n+        if (!array.empty())\n+        {\n+            // sort inputs in ascending order\n+            std::sort(array.begin(), array.end());\n+            for (size_t i = 0; i < size; ++i)\n+            {\n+                auto level = levels[indices[i]];\n+                size_t n = level < 1 ? level * array.size() : (array.size() - 1);\n+                // if level is 0.5 then compute the \"low\" median of the sorted array\n+                // by the method of rounding.\n+                if (level == 0.5)\n+                {\n+                    auto s = array.size();\n+                    if (s % 2 == 1)\n+                    {\n+                        result[indices[i]] = array[static_cast<size_t>(floor(s / 2))];\n+                    }\n+                    else\n+                    {\n+                        result[indices[i]] = array[static_cast<size_t>(floor((s / 2) - 1))];\n+                    }\n+                }\n+                // else quantile is the nth index of the sorted array obtained by multiplying\n+                // level and size of array. Example if level = 0.1 and size of array is 10.\n+                result[indices[i]] = array[n];\n+            }\n+        }\n+        else\n+        {\n+            for (size_t i = 0; i < size; ++i)\n+                result[i] = Value();\n+        }\n+    }\n+};\n+\n+// QuantileExactLow returns the high median of given data.\n+// Implementation is as per \"medium_high function from python:\n+// https://docs.python.org/3/library/statistics.html#statistics.median_high\n+template <typename Value>\n+struct QuantileExactHigh : public QuantileExactBase<Value, QuantileExactHigh<Value>>\n+{\n+    using QuantileExactBase<Value, QuantileExactHigh<Value>>::array;\n+\n+    Value getImpl(Float64 level)\n+    {\n+        if (!array.empty())\n+        {\n+            // sort inputs in ascending order\n+            std::sort(array.begin(), array.end());\n+            size_t n = level < 1 ? level * array.size() : (array.size() - 1);\n+            // if level is 0.5 then compute the \"high\" median of the sorted array\n+            // by the method of rounding.\n+            if (level == 0.5)\n+            {\n+                auto s = array.size();\n+                return array[static_cast<size_t>(floor(s / 2))];\n+            }\n+            // else quantile is the nth index of the sorted array obtained by multiplying\n+            // level and size of array. Example if level = 0.1 and size of array is 10.\n+            return array[n];\n+        }\n+        return std::numeric_limits<Value>::quiet_NaN();\n+    }\n+\n+    void getManyImpl(const Float64 * levels, const size_t * indices, size_t size, Value * result)\n+    {\n+        if (!array.empty())\n+        {\n+            // sort inputs in ascending order\n+            std::sort(array.begin(), array.end());\n+            for (size_t i = 0; i < size; ++i)\n+            {\n+                auto level = levels[indices[i]];\n+                size_t n = level < 1 ? level * array.size() : (array.size() - 1);\n+                // if level is 0.5 then compute the \"high\" median of the sorted array\n+                // by the method of rounding.\n+                if (level == 0.5)\n+                {\n+                    auto s = array.size();\n+                    result[indices[i]] = array[static_cast<size_t>(floor(s / 2))];\n+                }\n+                // else quantile is the nth index of the sorted array obtained by multiplying\n+                // level and size of array. Example if level = 0.1 and size of array is 10.\n+                result[indices[i]] = array[n];\n+            }\n+        }\n+        else\n+        {\n+            for (size_t i = 0; i < size; ++i)\n+                result[i] = Value();\n+        }\n+    }\n+};\n+\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00700_decimal_aggregates.reference b/tests/queries/0_stateless/00700_decimal_aggregates.reference\nindex 1b479d4cc693..f58e1900b801 100644\n--- a/tests/queries/0_stateless/00700_decimal_aggregates.reference\n+++ b/tests/queries/0_stateless/00700_decimal_aggregates.reference\n@@ -48,6 +48,28 @@\n [-50.0000,-40.0000,-30.0000,-20.0000,-10.0000,0.0000,10.0000,20.0000,30.0000,40.0000,50.0000]\n [-16.66666666,-13.33333333,-10.00000000,-6.66666666,-3.33333333,0.00000000,3.33333333,6.66666666,10.00000000,13.33333333,16.66666666]\n [-10.00000000,-8.00000000,-6.00000000,-4.00000000,-2.00000000,0.00000000,2.00000000,4.00000000,6.00000000,8.00000000,10.00000000]\n+0.0000\t0.00000000\t0.00000000\tDecimal(38, 8)\n+-25.0000\t-8.33333333\t-5.00000000\tDecimal(38, 8)\n+0.0000\t0.00000000\t0.00000000\n+10.0000\t3.33333333\t2.00000000\n+20.0000\t6.66666666\t4.00000000\n+30.0000\t10.00000000\t6.00000000\n+40.0000\t13.33333333\t8.00000000\n+50.0000\t16.66666666\t10.00000000\n+[-50.0000,-40.0000,-30.0000,-20.0000,-10.0000,0.0000,10.0000,20.0000,30.0000,40.0000,50.0000]\n+[-16.66666666,-13.33333333,-10.00000000,-6.66666666,-3.33333333,0.00000000,3.33333333,6.66666666,10.00000000,13.33333333,16.66666666]\n+[-10.00000000,-8.00000000,-6.00000000,-4.00000000,-2.00000000,0.00000000,2.00000000,4.00000000,6.00000000,8.00000000,10.00000000]\n+0.0000\t0.00000000\t0.00000000\tDecimal(38, 8)\n+-26.0000\t-8.66666666\t-5.20000000\tDecimal(38, 8)\n+0.0000\t0.00000000\t0.00000000\n+10.0000\t3.33333333\t2.00000000\n+20.0000\t6.66666666\t4.00000000\n+30.0000\t10.00000000\t6.00000000\n+40.0000\t13.33333333\t8.00000000\n+50.0000\t16.66666666\t10.00000000\n+[-50.0000,-40.0000,-30.0000,-20.0000,-10.0000,0.0000,10.0000,20.0000,30.0000,40.0000,50.0000]\n+[-16.66666666,-13.33333333,-10.00000000,-6.66666666,-3.33333333,0.00000000,3.33333333,6.66666666,10.00000000,13.33333333,16.66666666]\n+[-10.00000000,-8.00000000,-6.00000000,-4.00000000,-2.00000000,0.00000000,2.00000000,4.00000000,6.00000000,8.00000000,10.00000000]\n 850\t94.44444438684269\t34\tFloat64\tFloat64\tFloat64\n 850\t94.4444443868427\t34.00000000000001\n 858.5\t95.38888883071111\t34.34\tFloat64\tFloat64\tFloat64\ndiff --git a/tests/queries/0_stateless/00700_decimal_aggregates.sql b/tests/queries/0_stateless/00700_decimal_aggregates.sql\nindex fd49e79b4311..c9caa4fa9be3 100644\n--- a/tests/queries/0_stateless/00700_decimal_aggregates.sql\n+++ b/tests/queries/0_stateless/00700_decimal_aggregates.sql\n@@ -63,6 +63,30 @@ SELECT quantilesExact(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(a)\n SELECT quantilesExact(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(b) FROM decimal;\n SELECT quantilesExact(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(c) FROM decimal;\n \n+SELECT medianExactLow(a), medianExactLow(b), medianExactLow(c) as x, toTypeName(x) FROM decimal;\n+SELECT quantileExactLow(a), quantileExactLow(b), quantileExactLow(c) as x, toTypeName(x) FROM decimal WHERE a < 0;\n+SELECT quantileExactLow(0.0)(a), quantileExactLow(0.0)(b), quantileExactLow(0.0)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactLow(0.2)(a), quantileExactLow(0.2)(b), quantileExactLow(0.2)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactLow(0.4)(a), quantileExactLow(0.4)(b), quantileExactLow(0.4)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactLow(0.6)(a), quantileExactLow(0.6)(b), quantileExactLow(0.6)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactLow(0.8)(a), quantileExactLow(0.8)(b), quantileExactLow(0.8)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactLow(1.0)(a), quantileExactLow(1.0)(b), quantileExactLow(1.0)(c) FROM decimal WHERE a >= 0;\n+SELECT quantilesExactLow(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(a) FROM decimal;\n+SELECT quantilesExactLow(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(b) FROM decimal;\n+SELECT quantilesExactLow(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(c) FROM decimal;\n+\n+SELECT medianExactHigh(a), medianExactHigh(b), medianExactHigh(c) as x, toTypeName(x) FROM decimal;\n+SELECT quantileExactHigh(a), quantileExactHigh(b), quantileExactHigh(c) as x, toTypeName(x) FROM decimal WHERE a < 0;\n+SELECT quantileExactHigh(0.0)(a), quantileExactHigh(0.0)(b), quantileExactHigh(0.0)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactHigh(0.2)(a), quantileExactHigh(0.2)(b), quantileExactHigh(0.2)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactHigh(0.4)(a), quantileExactHigh(0.4)(b), quantileExactHigh(0.4)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactHigh(0.6)(a), quantileExactHigh(0.6)(b), quantileExactHigh(0.6)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactHigh(0.8)(a), quantileExactHigh(0.8)(b), quantileExactHigh(0.8)(c) FROM decimal WHERE a >= 0;\n+SELECT quantileExactHigh(1.0)(a), quantileExactHigh(1.0)(b), quantileExactHigh(1.0)(c) FROM decimal WHERE a >= 0;\n+SELECT quantilesExactHigh(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(a) FROM decimal;\n+SELECT quantilesExactHigh(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(b) FROM decimal;\n+SELECT quantilesExactHigh(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)(c) FROM decimal;\n+\n SELECT medianExactWeighted(a, 1), medianExactWeighted(b, 2), medianExactWeighted(c, 3) as x, toTypeName(x) FROM decimal;\n SELECT quantileExactWeighted(a, 1), quantileExactWeighted(b, 2), quantileExactWeighted(c, 3) as x, toTypeName(x) FROM decimal WHERE a < 0;\n SELECT quantileExactWeighted(0.0)(a, 1), quantileExactWeighted(0.0)(b, 2), quantileExactWeighted(0.0)(c, 3) FROM decimal WHERE a >= 0;\n",
  "problem_statement": "quantileExactLow, quantileExactHight\nUsers want to get rounding mode in `quantileExact` equivalent to \"median_low\" from Python:\r\nhttps://docs.python.org/3/library/statistics.html#statistics.median_low\r\nwhile current implementation works equivalent to \"median_high\" (?)\n",
  "hints_text": "The proposal is to add two more functions: `quantileExactLow`, `quantileExactHigh` that will produce result equivalent to `median_low` and `median_high` from Python (and add the corresponding variants with quantiles*, median*).\r\n\r\nEven if `quantileExactHigh` is 100% equivalent to `quantileExact`, we should add it as a synonim for consistency.\n@alexey-milovidov I think I can take a stab at this. Will update with a PR.\n@bharatnc Perfect!",
  "created_at": "2020-08-16T19:34:00Z",
  "modified_files": [
    "docs/en/sql-reference/aggregate-functions/reference/index.md",
    "docs/en/sql-reference/aggregate-functions/reference/quantileexact.md",
    "src/AggregateFunctions/AggregateFunctionQuantile.cpp",
    "src/AggregateFunctions/AggregateFunctionQuantile.h",
    "src/AggregateFunctions/QuantileExact.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00700_decimal_aggregates.reference",
    "tests/queries/0_stateless/00700_decimal_aggregates.sql"
  ]
}