diff --git a/src/Analyzer/Resolve/QueryAnalyzer.cpp b/src/Analyzer/Resolve/QueryAnalyzer.cpp
index 36aac41fece4..31259c84879a 100644
--- a/src/Analyzer/Resolve/QueryAnalyzer.cpp
+++ b/src/Analyzer/Resolve/QueryAnalyzer.cpp
@@ -232,6 +232,8 @@ void QueryAnalyzer::resolve(QueryTreeNodePtr & node, const QueryTreeNodePtr & ta
                             node->getNodeTypeName());
         }
     }
+
+    validateCorrelatedSubqueries(node);
 }
 
 void QueryAnalyzer::resolveConstantExpression(QueryTreeNodePtr & node, const QueryTreeNodePtr & table_expression, ContextPtr context)
@@ -260,6 +262,8 @@ void QueryAnalyzer::resolveConstantExpression(QueryTreeNodePtr & node, const Que
         resolveExpressionNodeList(node, scope, false /*allow_lambda_expression*/, false /*allow_table_expression*/);
     else
         resolveExpressionNode(node, scope, false /*allow_lambda_expression*/, false /*allow_table_expression*/);
+
+    validateCorrelatedSubqueries(node);
 }
 
 bool isFromJoinTree(const IQueryTreeNode * node_source, const IQueryTreeNode * tree_node)
diff --git a/src/Analyzer/ValidationUtils.cpp b/src/Analyzer/ValidationUtils.cpp
index d6afe8c59d56..ef89b1db017a 100644
--- a/src/Analyzer/ValidationUtils.cpp
+++ b/src/Analyzer/ValidationUtils.cpp
@@ -1,13 +1,14 @@
 #include <Analyzer/ValidationUtils.h>
 
+#include <Analyzer/AggregationUtils.h>
+#include <Analyzer/ColumnNode.h>
 #include <Analyzer/ConstantNode.h>
 #include <Analyzer/FunctionNode.h>
-#include <Analyzer/ColumnNode.h>
-#include <Analyzer/TableNode.h>
-#include <Analyzer/QueryNode.h>
 #include <Analyzer/InDepthQueryTreeVisitor.h>
-#include <Analyzer/AggregationUtils.h>
+#include <Analyzer/QueryNode.h>
+#include <Analyzer/TableNode.h>
 #include <Analyzer/WindowFunctionsUtils.h>
+#include <Storages/IStorage.h>
 
 namespace DB
 {
@@ -480,4 +481,64 @@ void validateTreeSize(const QueryTreeNodePtr & node,
             max_size);
 }
 
+void validateCorrelatedSubqueries(const QueryTreeNodePtr & node)
+{
+    bool has_remote = false;
+    bool has_correlated_subquery = false;
+    QueryTreeNodes nodes_to_process = { node };
+
+    while (!nodes_to_process.empty())
+    {
+        auto current_node = nodes_to_process.back();
+        nodes_to_process.pop_back();
+
+        switch (current_node->getNodeType())
+        {
+            case QueryTreeNodeType::QUERY:
+            {
+                auto & query_node = current_node->as<QueryNode &>();
+                if (query_node.isCorrelated())
+                    has_correlated_subquery = true;
+                break;
+            }
+            case QueryTreeNodeType::UNION:
+            {
+                auto & union_node = current_node->as<UnionNode &>();
+                if (union_node.isCorrelated())
+                    has_correlated_subquery = true;
+                break;
+            }
+            case QueryTreeNodeType::TABLE:
+            {
+                auto & table_node = current_node->as<TableNode &>();
+                const auto & storage = table_node.getStorage();
+                if (storage && storage->isRemote())
+                    has_remote = true;
+                break;
+            }
+            case QueryTreeNodeType::TABLE_FUNCTION:
+            {
+                auto & table_function_node = current_node->as<TableFunctionNode &>();
+                const auto & storage = table_function_node.getStorage();
+                if (storage && storage->isRemote())
+                    has_remote = true;
+                break;
+            }
+            default:
+                break;
+        }
+
+        if (has_remote && has_correlated_subquery)
+            throw Exception(ErrorCodes::NOT_IMPLEMENTED,
+                "Correlated subqueries are not supported with remote tables. In query {}",
+                node->formatASTForErrorMessage());
+
+        for (const auto & child : current_node->getChildren())
+        {
+            if (child)
+                nodes_to_process.push_back(child);
+        }
+    }
+}
+
 }
diff --git a/src/Analyzer/ValidationUtils.h b/src/Analyzer/ValidationUtils.h
index df2cdb0d52f7..6be599b35194 100644
--- a/src/Analyzer/ValidationUtils.h
+++ b/src/Analyzer/ValidationUtils.h
@@ -41,6 +41,7 @@ void validateTreeSize(const QueryTreeNodePtr & node,
     size_t max_size,
     std::unordered_map<QueryTreeNodePtr, size_t> & node_to_tree_size);
 
+void validateCorrelatedSubqueries(const QueryTreeNodePtr & node);
 
 /** Compare node with group by key node.
   * Such comparison does not take into account aliases, but checks types and column sources.
