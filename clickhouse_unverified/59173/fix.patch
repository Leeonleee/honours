diff --git a/src/Storages/MergeTree/IMergeTreeDataPart.cpp b/src/Storages/MergeTree/IMergeTreeDataPart.cpp
index bdea46a8210d..c2e0e7782209 100644
--- a/src/Storages/MergeTree/IMergeTreeDataPart.cpp
+++ b/src/Storages/MergeTree/IMergeTreeDataPart.cpp
@@ -1313,6 +1313,17 @@ void IMergeTreeDataPart::loadRowsCount()
         auto buf = metadata_manager->read("count.txt");
         readIntText(rows_count, *buf);
         assertEOF(*buf);
+
+        if (!index_granularity.empty() && rows_count < index_granularity.getTotalRows() && index_granularity_info.fixed_index_granularity)
+        {
+            /// Adjust last granule size to match the number of rows in the part in case of fixed index_granularity.
+            index_granularity.popMark();
+            index_granularity.appendMark(rows_count % index_granularity_info.fixed_index_granularity);
+            if (rows_count != index_granularity.getTotalRows())
+                throw Exception(ErrorCodes::LOGICAL_ERROR,
+                    "Index granularity total rows in part {} does not match rows_count: {}, instead of {}",
+                    name, index_granularity.getTotalRows(), rows_count);
+        }
     };
 
     if (index_granularity.empty())
diff --git a/src/Storages/MergeTree/MergeTreeDataPartWriterWide.cpp b/src/Storages/MergeTree/MergeTreeDataPartWriterWide.cpp
index 5ba326cef0c1..a69d21de8e7b 100644
--- a/src/Storages/MergeTree/MergeTreeDataPartWriterWide.cpp
+++ b/src/Storages/MergeTree/MergeTreeDataPartWriterWide.cpp
@@ -558,7 +558,10 @@ void MergeTreeDataPartWriterWide::validateColumnOfFixedSize(const NameAndTypePai
 
         if (index_granularity_rows != index_granularity.getMarkRows(mark_num))
         {
-            throw Exception(
+            /// With fixed granularity we can have last mark with less rows than granularity
+            const bool is_last_mark = (mark_num + 1 == index_granularity.getMarksCount());
+            if (!index_granularity_info.fixed_index_granularity || !is_last_mark)
+                throw Exception(
                             ErrorCodes::LOGICAL_ERROR,
                             "Incorrect mark rows for part {} for mark #{}"
                             " (compressed offset {}, decompressed offset {}), in-memory {}, on disk {}, total marks {}",
@@ -821,7 +824,14 @@ void MergeTreeDataPartWriterWide::adjustLastMarkIfNeedAndFlushToDisk(size_t new_
             /// Without offset
             rows_written_in_last_mark = 0;
         }
+
+        if (compute_granularity)
+        {
+            index_granularity.popMark();
+            index_granularity.appendMark(new_rows_in_last_mark);
+        }
     }
+
 }
 
 }
