{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 55895,
  "instance_id": "ClickHouse__ClickHouse-55895",
  "issue_numbers": [
    "55843"
  ],
  "base_commit": "ab3f9bcacfd9444c765c2986d1c34b64dfe0e029",
  "patch": "diff --git a/src/Processors/Transforms/WindowTransform.cpp b/src/Processors/Transforms/WindowTransform.cpp\nindex be76971ddcd0..9565a073f481 100644\n--- a/src/Processors/Transforms/WindowTransform.cpp\n+++ b/src/Processors/Transforms/WindowTransform.cpp\n@@ -1066,7 +1066,7 @@ void WindowTransform::appendChunk(Chunk & chunk)\n         auto columns = chunk.detachColumns();\n         block.original_input_columns = columns;\n         for (auto & column : columns)\n-            column = recursiveRemoveLowCardinality(std::move(column)->convertToFullColumnIfConst());\n+            column = recursiveRemoveLowCardinality(std::move(column)->convertToFullColumnIfConst()->convertToFullColumnIfSparse());\n         block.input_columns = std::move(columns);\n \n         // Initialize output columns.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02900_window_function_with_sparse_column.reference b/tests/queries/0_stateless/02900_window_function_with_sparse_column.reference\nnew file mode 100644\nindex 000000000000..694d752d6a89\n--- /dev/null\n+++ b/tests/queries/0_stateless/02900_window_function_with_sparse_column.reference\n@@ -0,0 +1,5 @@\n+false\n+false\n+false\n+\n+\ndiff --git a/tests/queries/0_stateless/02900_window_function_with_sparse_column.sql b/tests/queries/0_stateless/02900_window_function_with_sparse_column.sql\nnew file mode 100644\nindex 000000000000..0b053d3e8708\n--- /dev/null\n+++ b/tests/queries/0_stateless/02900_window_function_with_sparse_column.sql\n@@ -0,0 +1,45 @@\n+-- https://github.com/ClickHouse/ClickHouse/issues/55843\n+-- These tests pass without the fix when either of\n+--   - optimize_read_in_window_order = 0 and optimize_read_in_order = 0\n+--   - ratio_of_defaults_for_sparse_serialization = 1\n+-- However it is better to leave the settings as randomized because we run\n+-- stateless tests quite a few times during a PR, so if a bug is introduced\n+-- then there is a big chance of catching it. Furthermore, randomized settings\n+-- might identify new bugs.\n+\n+CREATE TABLE test1\n+(\n+    id String,\n+    time DateTime64(9),\n+    key Int64,\n+    value Bool,\n+)\n+ENGINE = MergeTree\n+PARTITION BY toYYYYMM(time)\n+ORDER BY (key, id, time);\n+\n+INSERT INTO test1 VALUES ('id0', now(), 3, false)\n+\n+SELECT last_value(value) OVER (PARTITION BY id ORDER BY time ASC) as last_value\n+FROM test1\n+WHERE (key = 3);\n+\n+SELECT last_value(value) OVER (ORDER BY time ASC) as last_value\n+FROM test1\n+WHERE (key = 3);\n+\n+SELECT last_value(value) OVER (PARTITION BY id ORDER BY time ASC) as last_value\n+FROM test1;\n+\n+\n+\n+CREATE TABLE test2\n+(\n+    time DateTime,\n+    value String\n+)\n+ENGINE = MergeTree\n+ORDER BY (time) AS SELECT 0, '';\n+\n+SELECT any(value) OVER (ORDER BY time ASC) FROM test2;\n+SELECT last_value(value) OVER (ORDER BY time ASC) FROM test2;\n",
  "problem_statement": "Window function returns wrong result on sparse column\nlast_value produces wrong data in some cases\r\n\r\nReproduced on 23.7 and 23.9, not on 23.6 and 23.5\r\n[The list of releases](https://github.com/ClickHouse/ClickHouse/blob/master/utils/list-versions/version_date.tsv)\r\n\r\n**How to reproduce**\r\ncreate database test on cluster default engine Atomic\r\n\r\nCREATE TABLE test.test on cluster default\r\n(\r\n    id String,\r\n    time DateTime64(9),\r\n    key Int64,\r\n    value Bool,\r\n)\r\nENGINE = ReplicatedMergeTree\r\nPARTITION BY toYYYYMM(time)\r\nORDER BY (key, id, time)\r\n\r\ninsert into test.test values ('id0', now(), 3, false)\r\n\r\n\r\nThe following query returns true which is wrong.\r\n\r\nSELECT\r\nlast_value(value) OVER (PARTITION BY id ORDER BY time ASC) as last_value\r\nFROM test.test\r\nWHERE (key = 3)\r\n\r\n\r\nThe right result is returned if 'PARTITION BY id' or WHERE clause is removed\r\n\r\nSELECT\r\nlast_value(value) OVER (ORDER BY time ASC) as last_value\r\nFROM test.test\r\nWHERE (key = 3)\r\n\r\nSELECT\r\nlast_value(value) OVER (PARTITION BY id ORDER BY time ASC) as last_value\r\nFROM test.test\r\n\n",
  "hints_text": "It seems the issue does not happen if there is a row with value=true.\r\nAlso last_value_respect_nulls doesn't seem to have this issue.\nany agg. function seems to be affected\r\nhttps://fiddle.clickhouse.com/6df00a9f-8126-44ec-8954-b84298c7c734\n```\r\nset optimize_read_in_window_order=0, optimize_read_in_order=0;\r\n```\r\nhelps.\r\n\r\nor identity to disable optimization `PARTITION BY identity(id)`\r\n\nhttps://fiddle.clickhouse.com/2a9a4f53-eda3-4e67-a94f-7e193350d5ab\r\nString size is too big (18446603614377872527), maximum: 2147483647. (TOO_LARGE_STRING_SIZE)\r\n\nsegfault https://fiddle.clickhouse.com/c0a03844-2c25-4cdf-b237-11f5444a2f3d\r\n\r\n```\r\nCREATE TABLE test  (time DateTime, value String)\r\nENGINE = MergeTree\r\nORDER BY (time) as select 0, '';\r\n\r\nSELECT any(value) OVER (ORDER BY time ASC)  FROM test\r\n```\n@den-crane Thanks for the update! We found this issue while validating upgrade from 23.4 to 23.9, and we use window functions a lot. Will the use of \r\n> set optimize_read_in_window_order=0, optimize_read_in_order=0;\r\n\r\nor identity\r\n> PARTITION BY identity(id)\r\n\r\ncause a performance regression?\r\n\n@den-crane We also found that the issue seems to happen only when the target column of the window function has only the zero value (0 for numeric or bool type, or empty string for string type). The window functions seem to work as expected when the target column has other values. Could you confirm if this is true?\r\nIf it is true, then we may be able to proceed with the upgrade while waiting for a fix.\nHi @yujiarista, I am working on finding the root cause of the issue. Without that it is really hard to say anything for sure. Maybe the bug has slightly different behavior on different versions. \n> @den-crane We also found that the issue seems to happen only when the target column of the window function has only the zero value (0 for numeric or bool type, or empty string for string type). The window functions seem to work as expected when the target column has other values. Could you confirm if this is true? If it is true, then we may be able to proceed with the upgrade while waiting for a fix.\r\n\r\nthe issue is related to `optimize_read_in_window_order`\r\n\r\nIn this case `create table ... ORDER BY (key, id, time)` -> `WHERE (key = 3) PARTITION BY id ORDER BY time` \r\n`key, id, time` -> `key, id, time`\r\nIf you change partition key, for example using a special function `PARTITION BY identity(id)` then clickhouse is unable to use this optimization `read_in_..`.\nThe issue is also related to enabling sparse columns. By using the setting `ratio_of_defaults_for_sparse_serialization = 1` for MergeTree, it works perfectly. Tomorrow I will continue my investigation further.\r\n\r\nP.S.: by \"it works perfectly\" I meant that the bug is present.",
  "created_at": "2023-10-21T11:52:28Z",
  "modified_files": [
    "src/Processors/Transforms/WindowTransform.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02900_window_function_with_sparse_column.reference",
    "b/tests/queries/0_stateless/02900_window_function_with_sparse_column.sql"
  ]
}