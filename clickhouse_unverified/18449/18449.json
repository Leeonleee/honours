{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18449,
  "instance_id": "ClickHouse__ClickHouse-18449",
  "issue_numbers": [
    "18402"
  ],
  "base_commit": "a58acbae67430055a16d0e6a34d1d265d5727040",
  "patch": "diff --git a/src/IO/parseDateTimeBestEffort.cpp b/src/IO/parseDateTimeBestEffort.cpp\nindex 063955cdd1ea..a3ea418dd9f5 100644\n--- a/src/IO/parseDateTimeBestEffort.cpp\n+++ b/src/IO/parseDateTimeBestEffort.cpp\n@@ -119,6 +119,7 @@ ReturnType parseDateTimeBestEffortImpl(\n     UInt8 time_zone_offset_hour = 0;\n     UInt8 time_zone_offset_minute = 0;\n \n+    bool is_am = false;\n     bool is_pm = false;\n \n     auto read_alpha_month = [&month] (const auto & alpha)\n@@ -486,6 +487,7 @@ ReturnType parseDateTimeBestEffortImpl(\n                     {\n                         if (alpha[0] == 'A' || alpha[0] == 'a')\n                         {\n+                            is_am = true;\n                         }\n                         else if (alpha[0] == 'P' || alpha[0] == 'p')\n                         {\n@@ -560,6 +562,9 @@ ReturnType parseDateTimeBestEffortImpl(\n     if (!check_date(is_leap_year, month, day_of_month))\n         return on_error(\"Cannot read DateTime: unexpected date: \" + std::to_string(year) + \"-\" + std::to_string(month) + \"-\" + std::to_string(day_of_month), ErrorCodes::CANNOT_PARSE_DATETIME);\n \n+    if (is_am && hour == 12)\n+        hour = 0;\n+\n     if (is_pm && hour < 12)\n         hour += 12;\n \ndiff --git a/src/IO/parseDateTimeBestEffort.h b/src/IO/parseDateTimeBestEffort.h\nindex fcc0195c4d9f..61de31a02139 100644\n--- a/src/IO/parseDateTimeBestEffort.h\n+++ b/src/IO/parseDateTimeBestEffort.h\n@@ -50,7 +50,7 @@ class ReadBuffer;\n   *\n   * single whitespace can be used as a separator\n   *\n-  * AM/PM - AM is ignored and PM means: add 12 hours if value is less than 12.\n+  * AM/PM - AM means: subtract 12 hours if a value is 12 and PM means: add 12 hours if a value is less than 12.\n   *\n   * Jan/Feb/Mar/Apr/May/Jun/Jul/Aug/Sep/Oct/Nov/Dec - allowed to specify month\n   * Mon/Tue/Wed/Thu/Fri/Sat/Sun - simply ignored.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01351_parse_date_time_best_effort_us.reference b/tests/queries/0_stateless/01351_parse_date_time_best_effort_us.reference\nindex 22a778b715a8..9d0a11776b99 100644\n--- a/tests/queries/0_stateless/01351_parse_date_time_best_effort_us.reference\n+++ b/tests/queries/0_stateless/01351_parse_date_time_best_effort_us.reference\n@@ -7,6 +7,10 @@\n  01/02/2017 03:04:05+300     2017-01-02 00:04:05 \n  01.02.2017 03:04:05GMT      2017-01-02 03:04:05 \n  01-02-2017 03:04:05 MSD     2017-01-01 23:04:05 \n+ 01-02-2017 11:04:05 AM      2017-01-02 11:04:05 \n+ 01-02-2017 11:04:05 PM      2017-01-02 23:04:05 \n+ 01-02-2017 12:04:05 AM      2017-01-02 00:04:05 \n+ 01-02-2017 12:04:05 PM      2017-01-02 12:04:05 \n  01.02.17 03:04:05 MSD Feb   2017-02-01 23:04:05 \n  01/02/2017 03:04:05 MSK     2017-01-02 00:04:05 \n  12/13/2019                  2019-12-13 00:00:00 \ndiff --git a/tests/queries/0_stateless/01351_parse_date_time_best_effort_us.sql b/tests/queries/0_stateless/01351_parse_date_time_best_effort_us.sql\nindex 0c33b2de49fd..3345ace83058 100644\n--- a/tests/queries/0_stateless/01351_parse_date_time_best_effort_us.sql\n+++ b/tests/queries/0_stateless/01351_parse_date_time_best_effort_us.sql\n@@ -11,6 +11,10 @@ FROM\n '01/02/2017 03:04:05+300',\n '01.02.2017 03:04:05GMT',\n '01-02-2017 03:04:05 MSD',\n+'01-02-2017 11:04:05 AM',\n+'01-02-2017 11:04:05 PM',\n+'01-02-2017 12:04:05 AM',\n+'01-02-2017 12:04:05 PM',\n '01.02.17 03:04:05 MSD Feb',\n '01/02/2017 03:04:05 MSK',\n '12/13/2019',\ndiff --git a/tests/queries/0_stateless/01442_date_time_with_params.reference b/tests/queries/0_stateless/01442_date_time_with_params.reference\nindex 94ffcffdd370..19f78c83f82e 100644\n--- a/tests/queries/0_stateless/01442_date_time_with_params.reference\n+++ b/tests/queries/0_stateless/01442_date_time_with_params.reference\n@@ -2,42 +2,72 @@\n 2020-01-01 00:00:00\tDateTime\t2020-01-01 00:02:00.11\tDateTime64(2)\t2020-01-01 00:03:00\tDateTime(\\'Europe/Moscow\\')\t2020-01-01 00:04:00.220\tDateTime64(3, \\'Europe/Moscow\\')\t2020-01-01 00:05:00\tDateTime\n 2020-01-01 00:00:00\tDateTime\t2020-01-01 00:02:00.11\tDateTime64(2)\t2020-01-01 00:03:00\tDateTime(\\'Europe/Moscow\\')\t2020-01-01 00:04:00.220\tDateTime64(3, \\'Europe/Moscow\\')\t2020-01-01 00:05:00\tDateTime\n 2020-01-01 00:00:00\tDateTime\n+parseDateTimeBestEffort\n 2020-05-14 03:37:03.000\tDateTime64(3, \\'UTC\\')\n 2020-05-14 03:37:03.000\tDateTime64(3, \\'UTC\\')\n+2020-05-14 11:37:03.000\tDateTime64(3, \\'UTC\\')\n+2020-05-14 23:37:03.000\tDateTime64(3, \\'UTC\\')\n+2020-05-14 00:37:03.000\tDateTime64(3, \\'UTC\\')\n+2020-05-14 12:37:03.000\tDateTime64(3, \\'UTC\\')\n 2020-05-14 03:37:03.253\tDateTime64(3, \\'UTC\\')\n 2020-05-14 03:37:03.253\tDateTime64(3, \\'UTC\\')\n 2020-05-14 06:37:03.253\tDateTime64(3, \\'Europe/Minsk\\')\n 2020-05-14 03:37:03.253\tDateTime64(3, \\'UTC\\')\n+parseDateTimeBestEffortOrNull\n \\N\tNullable(DateTime64(3))\n 2020-05-14 03:37:03.000\tNullable(DateTime64(3, \\'UTC\\'))\n 2020-05-14 03:37:03.000\tNullable(DateTime64(3, \\'UTC\\'))\n+2020-05-14 11:37:03.000\tNullable(DateTime64(3, \\'UTC\\'))\n+2020-05-14 23:37:03.000\tNullable(DateTime64(3, \\'UTC\\'))\n+2020-05-14 00:37:03.000\tNullable(DateTime64(3, \\'UTC\\'))\n+2020-05-14 12:37:03.000\tNullable(DateTime64(3, \\'UTC\\'))\n 2020-05-14 03:37:03.253\tNullable(DateTime64(3, \\'UTC\\'))\n 2020-05-14 03:37:03.253\tNullable(DateTime64(3, \\'UTC\\'))\n 2020-05-14 06:37:03.253\tNullable(DateTime64(3, \\'Europe/Minsk\\'))\n 2020-05-14 03:37:03.253\tNullable(DateTime64(3, \\'UTC\\'))\n+parseDateTimeBestEffortOrZero\n 1970-01-01 00:00:00.000\tDateTime64(3, \\'UTC\\')\n 2020-05-14 03:37:03.000\tDateTime64(3, \\'UTC\\')\n 2020-05-14 03:37:03.000\tDateTime64(3, \\'UTC\\')\n+2020-05-14 11:37:03.000\tDateTime64(3, \\'UTC\\')\n+2020-05-14 23:37:03.000\tDateTime64(3, \\'UTC\\')\n+2020-05-14 00:37:03.000\tDateTime64(3, \\'UTC\\')\n+2020-05-14 12:37:03.000\tDateTime64(3, \\'UTC\\')\n 2020-05-14 03:37:03.253\tDateTime64(3, \\'UTC\\')\n 2020-05-14 03:37:03.253\tDateTime64(3, \\'UTC\\')\n 2020-05-14 06:37:03.253\tDateTime64(3, \\'Europe/Minsk\\')\n 2020-05-14 03:37:03.253\tDateTime64(3, \\'UTC\\')\n+parseDateTime32BestEffort\n 2020-05-14 03:37:03\tDateTime(\\'UTC\\')\n 2020-05-14 03:37:03\tDateTime(\\'UTC\\')\n+2020-05-14 11:37:03\tDateTime(\\'UTC\\')\n+2020-05-14 23:37:03\tDateTime(\\'UTC\\')\n+2020-05-14 00:37:03\tDateTime(\\'UTC\\')\n+2020-05-14 12:37:03\tDateTime(\\'UTC\\')\n 2020-05-14 03:37:03\tDateTime(\\'UTC\\')\n 2020-05-14 03:37:03\tDateTime(\\'UTC\\')\n 2020-05-14 06:37:03\tDateTime(\\'Europe/Minsk\\')\n 2020-05-14 03:37:03\tDateTime(\\'UTC\\')\n+parseDateTime32BestEffortOrNull\n \\N\tNullable(DateTime)\n 2020-05-14 03:37:03\tNullable(DateTime(\\'UTC\\'))\n 2020-05-14 03:37:03\tNullable(DateTime(\\'UTC\\'))\n+2020-05-14 11:37:03\tNullable(DateTime(\\'UTC\\'))\n+2020-05-14 23:37:03\tNullable(DateTime(\\'UTC\\'))\n+2020-05-14 00:37:03\tNullable(DateTime(\\'UTC\\'))\n+2020-05-14 12:37:03\tNullable(DateTime(\\'UTC\\'))\n 2020-05-14 03:37:03\tNullable(DateTime(\\'UTC\\'))\n 2020-05-14 03:37:03\tNullable(DateTime(\\'UTC\\'))\n 2020-05-14 06:37:03\tNullable(DateTime(\\'Europe/Minsk\\'))\n 2020-05-14 03:37:03\tNullable(DateTime(\\'UTC\\'))\n+parseDateTime32BestEffortOrZero\n 1970-01-01 00:00:00\tDateTime(\\'UTC\\')\n 2020-05-14 03:37:03\tDateTime(\\'UTC\\')\n 2020-05-14 03:37:03\tDateTime(\\'UTC\\')\n+2020-05-14 11:37:03\tDateTime(\\'UTC\\')\n+2020-05-14 23:37:03\tDateTime(\\'UTC\\')\n+2020-05-14 00:37:03\tDateTime(\\'UTC\\')\n+2020-05-14 12:37:03\tDateTime(\\'UTC\\')\n 2020-05-14 03:37:03\tDateTime(\\'UTC\\')\n 2020-05-14 03:37:03\tDateTime(\\'UTC\\')\n 2020-05-14 06:37:03\tDateTime(\\'Europe/Minsk\\')\ndiff --git a/tests/queries/0_stateless/01442_date_time_with_params.sql b/tests/queries/0_stateless/01442_date_time_with_params.sql\nindex 2eefa47ba8c5..528154602458 100644\n--- a/tests/queries/0_stateless/01442_date_time_with_params.sql\n+++ b/tests/queries/0_stateless/01442_date_time_with_params.sql\n@@ -12,50 +12,79 @@ SELECT CAST('2020-01-01 00:00:00', 'DateTime') AS a, toTypeName(a), CAST('2020-0\n \n SELECT toDateTime32('2020-01-01 00:00:00') AS a, toTypeName(a);\n \n+SELECT 'parseDateTimeBestEffort';\n SELECT parseDateTimeBestEffort('<Empty>', 3) AS a, toTypeName(a); -- {serverError 41}\n SELECT parseDateTimeBestEffort('2020-05-14T03:37:03', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffort('2020-05-14 03:37:03', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffort('2020-05-14 11:37:03 AM', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffort('2020-05-14 11:37:03 PM', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffort('2020-05-14 12:37:03 AM', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffort('2020-05-14 12:37:03 PM', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffort('2020-05-14T03:37:03.253184', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffort('2020-05-14T03:37:03.253184Z', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffort('2020-05-14T03:37:03.253184Z', 3, 'Europe/Minsk') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffort(materialize('2020-05-14T03:37:03.253184Z'), 3, 'UTC') AS a, toTypeName(a);\n \n+SELECT 'parseDateTimeBestEffortOrNull';\n SELECT parseDateTimeBestEffortOrNull('<Empty>', 3) AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrNull('2020-05-14T03:37:03', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrNull('2020-05-14 03:37:03', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffortOrNull('2020-05-14 11:37:03 AM', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffortOrNull('2020-05-14 11:37:03 PM', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffortOrNull('2020-05-14 12:37:03 AM', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffortOrNull('2020-05-14 12:37:03 PM', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrNull('2020-05-14T03:37:03.253184', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrNull('2020-05-14T03:37:03.253184Z', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrNull('2020-05-14T03:37:03.253184Z', 3, 'Europe/Minsk') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrNull(materialize('2020-05-14T03:37:03.253184Z'), 3, 'UTC') AS a, toTypeName(a);\n \n+SELECT 'parseDateTimeBestEffortOrZero';\n SELECT parseDateTimeBestEffortOrZero('<Empty>', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrZero('2020-05-14T03:37:03', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrZero('2020-05-14 03:37:03', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffortOrZero('2020-05-14 11:37:03 AM', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffortOrZero('2020-05-14 11:37:03 PM', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffortOrZero('2020-05-14 12:37:03 AM', 3, 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTimeBestEffortOrZero('2020-05-14 12:37:03 PM', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrZero('2020-05-14T03:37:03.253184', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrZero('2020-05-14T03:37:03.253184Z', 3, 'UTC') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrZero('2020-05-14T03:37:03.253184Z', 3, 'Europe/Minsk') AS a, toTypeName(a);\n SELECT parseDateTimeBestEffortOrZero(materialize('2020-05-14T03:37:03.253184Z'), 3, 'UTC') AS a, toTypeName(a);\n \n-\n+SELECT 'parseDateTime32BestEffort';\n SELECT parseDateTime32BestEffort('<Empty>') AS a, toTypeName(a); -- {serverError 41}\n SELECT parseDateTime32BestEffort('2020-05-14T03:37:03', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffort('2020-05-14 03:37:03', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffort('2020-05-14 11:37:03 AM', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffort('2020-05-14 11:37:03 PM', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffort('2020-05-14 12:37:03 AM', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffort('2020-05-14 12:37:03 PM', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffort('2020-05-14T03:37:03.253184', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffort('2020-05-14T03:37:03.253184Z', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffort('2020-05-14T03:37:03.253184Z', 'Europe/Minsk') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffort(materialize('2020-05-14T03:37:03.253184Z'), 'UTC') AS a, toTypeName(a);\n \n+SELECT 'parseDateTime32BestEffortOrNull';\n SELECT parseDateTime32BestEffortOrNull('<Empty>') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrNull('2020-05-14T03:37:03', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrNull('2020-05-14 03:37:03', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffortOrNull('2020-05-14 11:37:03 AM', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffortOrNull('2020-05-14 11:37:03 PM', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffortOrNull('2020-05-14 12:37:03 AM', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffortOrNull('2020-05-14 12:37:03 PM', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrNull('2020-05-14T03:37:03.253184', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrNull('2020-05-14T03:37:03.253184Z', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrNull('2020-05-14T03:37:03.253184Z', 'Europe/Minsk') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrNull(materialize('2020-05-14T03:37:03.253184Z'), 'UTC') AS a, toTypeName(a);\n \n+SELECT 'parseDateTime32BestEffortOrZero';\n SELECT parseDateTime32BestEffortOrZero('<Empty>', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrZero('2020-05-14T03:37:03', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrZero('2020-05-14 03:37:03', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffortOrZero('2020-05-14 11:37:03 AM', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffortOrZero('2020-05-14 11:37:03 PM', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffortOrZero('2020-05-14 12:37:03 AM', 'UTC') AS a, toTypeName(a);\n+SELECT parseDateTime32BestEffortOrZero('2020-05-14 12:37:03 PM', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrZero('2020-05-14T03:37:03.253184', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrZero('2020-05-14T03:37:03.253184Z', 'UTC') AS a, toTypeName(a);\n SELECT parseDateTime32BestEffortOrZero('2020-05-14T03:37:03.253184Z', 'Europe/Minsk') AS a, toTypeName(a);\ndiff --git a/tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.reference b/tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.reference\nindex 14be7c77e23d..675d09bdccff 100644\n--- a/tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.reference\n+++ b/tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.reference\n@@ -1,5 +1,9 @@\n 2010-01-01 00:00:00\n 2010-01-01 01:01:01\n+2020-01-01 11:01:01\n+2020-01-01 23:01:01\n+2020-01-01 00:01:01\n+2020-01-01 12:01:01\n 2000-01-01 01:01:01\n \\N\n \\N\ndiff --git a/tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.sql b/tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.sql\nindex 66d28534b304..ad14c4ede066 100644\n--- a/tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.sql\n+++ b/tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.sql\n@@ -1,5 +1,9 @@\n SELECT parseDateTimeBestEffortOrNull('2010-01-01');\n SELECT parseDateTimeBestEffortOrNull('2010-01-01 01:01:01');\n+SELECT parseDateTimeBestEffortOrNull('2020-01-01 11:01:01 am');\n+SELECT parseDateTimeBestEffortOrNull('2020-01-01 11:01:01 pm');\n+SELECT parseDateTimeBestEffortOrNull('2020-01-01 12:01:01 am');\n+SELECT parseDateTimeBestEffortOrNull('2020-01-01 12:01:01 pm');\n SELECT parseDateTimeBestEffortOrNull('01:01:01');\n SELECT parseDateTimeBestEffortOrNull('20100');\n SELECT parseDateTimeBestEffortOrNull('0100:0100:0000');\n",
  "problem_statement": "parseDateTimeBestEffort should not ignore AM abbreviation for 12th hour\nIgnoring AM abbreviation leads to wrong processing the 12th hour.\r\n\r\n**Bug reproducing**\r\n```sql\r\nSELECT\r\n    parseDateTimeBestEffort('2020-02-01 12:10:00 AM') AS am,\r\n    parseDateTimeBestEffort('2020-02-01 12:10:00 PM') AS pm\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500am\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500pm\u2500\u2510\r\n\u2502 2020-02-01 12:10:00 \u2502 2020-02-01 12:10:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Expected behavior**\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500am\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500pm\u2500\u2510\r\n\u2502 2020-02-01 00:10:00 \u2502 2020-02-01 12:10:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "",
  "created_at": "2020-12-24T02:16:40Z",
  "modified_files": [
    "src/IO/parseDateTimeBestEffort.cpp",
    "src/IO/parseDateTimeBestEffort.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01351_parse_date_time_best_effort_us.reference",
    "tests/queries/0_stateless/01351_parse_date_time_best_effort_us.sql",
    "tests/queries/0_stateless/01442_date_time_with_params.reference",
    "tests/queries/0_stateless/01442_date_time_with_params.sql",
    "tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.reference",
    "tests/queries/0_stateless/01543_parse_datetime_besteffort_or_null_empty_string.sql"
  ]
}