{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 45568,
  "instance_id": "ClickHouse__ClickHouse-45568",
  "issue_numbers": [
    "44293"
  ],
  "base_commit": "bb44a14a561e16f935d67639c276c096e474014c",
  "patch": "diff --git a/.github/workflows/pull_request.yml b/.github/workflows/pull_request.yml\nindex c677ec4bf5c7..527a849621da 100644\n--- a/.github/workflows/pull_request.yml\n+++ b/.github/workflows/pull_request.yml\n@@ -984,6 +984,75 @@ jobs:\n           docker ps --quiet | xargs --no-run-if-empty docker kill ||:\n           docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:\n           sudo rm -fr \"$TEMP_PATH\"\n+############################################################################################\n+#################################### INSTALL PACKAGES ######################################\n+############################################################################################\n+  InstallPackagesTestRelease:\n+    needs: [BuilderDebRelease]\n+    runs-on: [self-hosted, style-checker]\n+    steps:\n+      - name: Set envs\n+        run: |\n+          cat >> \"$GITHUB_ENV\" << 'EOF'\n+          TEMP_PATH=${{runner.temp}}/test_install\n+          REPORTS_PATH=${{runner.temp}}/reports_dir\n+          CHECK_NAME=Install packages (amd64)\n+          REPO_COPY=${{runner.temp}}/test_install/ClickHouse\n+          EOF\n+      - name: Download json reports\n+        uses: actions/download-artifact@v3\n+        with:\n+          path: ${{ env.REPORTS_PATH }}\n+      - name: Check out repository code\n+        uses: ClickHouse/checkout@v1\n+        with:\n+          clear-repository: true\n+      - name: Test packages installation\n+        run: |\n+          sudo rm -fr \"$TEMP_PATH\"\n+          mkdir -p \"$TEMP_PATH\"\n+          cp -r \"$GITHUB_WORKSPACE\" \"$TEMP_PATH\"\n+          cd \"$REPO_COPY/tests/ci\"\n+          python3 install_check.py \"$CHECK_NAME\"\n+      - name: Cleanup\n+        if: always()\n+        run: |\n+          docker ps --quiet | xargs --no-run-if-empty docker kill ||:\n+          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:\n+          sudo rm -fr \"$TEMP_PATH\"\n+  InstallPackagesTestAarch64:\n+    needs: [BuilderDebRelease]\n+    runs-on: [self-hosted, style-checker-aarch64]\n+    steps:\n+      - name: Set envs\n+        run: |\n+          cat >> \"$GITHUB_ENV\" << 'EOF'\n+          TEMP_PATH=${{runner.temp}}/test_install\n+          REPORTS_PATH=${{runner.temp}}/reports_dir\n+          CHECK_NAME=Install packages (arm64)\n+          REPO_COPY=${{runner.temp}}/test_install/ClickHouse\n+          EOF\n+      - name: Download json reports\n+        uses: actions/download-artifact@v3\n+        with:\n+          path: ${{ env.REPORTS_PATH }}\n+      - name: Check out repository code\n+        uses: ClickHouse/checkout@v1\n+        with:\n+          clear-repository: true\n+      - name: Test packages installation\n+        run: |\n+          sudo rm -fr \"$TEMP_PATH\"\n+          mkdir -p \"$TEMP_PATH\"\n+          cp -r \"$GITHUB_WORKSPACE\" \"$TEMP_PATH\"\n+          cd \"$REPO_COPY/tests/ci\"\n+          python3 install_check.py \"$CHECK_NAME\"\n+      - name: Cleanup\n+        if: always()\n+        run: |\n+          docker ps --quiet | xargs --no-run-if-empty docker kill ||:\n+          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:\n+          sudo rm -fr \"$TEMP_PATH\"\n ##############################################################################################\n ########################### FUNCTIONAl STATELESS TESTS #######################################\n ##############################################################################################\ndiff --git a/docker/images.json b/docker/images.json\nindex 323f53c0ae6c..bd63aea24bae 100644\n--- a/docker/images.json\n+++ b/docker/images.json\n@@ -134,6 +134,14 @@\n         \"name\": \"clickhouse/keeper-jepsen-test\",\n         \"dependent\": []\n     },\n+    \"docker/test/install/deb\": {\n+        \"name\": \"clickhouse/install-deb-test\",\n+        \"dependent\": []\n+    },\n+    \"docker/test/install/rpm\": {\n+        \"name\": \"clickhouse/install-rpm-test\",\n+        \"dependent\": []\n+    },\n     \"docker/docs/builder\": {\n         \"name\": \"clickhouse/docs-builder\",\n         \"dependent\": [\ndiff --git a/packages/build b/packages/build\nindex c8fb77e93717..6ec991aad079 100755\n--- a/packages/build\n+++ b/packages/build\n@@ -102,7 +102,8 @@ done\n EOF\n     chmod +x \"$PKG_PATH/install/doinst.sh\"\n     if [ -f \"$PKG_PATH/DEBIAN/postinst\" ]; then\n-        tail +2 \"$PKG_PATH/DEBIAN/postinst\" >> \"$PKG_PATH/install/doinst.sh\"\n+        # we don't need debconf source in doinst in any case\n+        tail +2 \"$PKG_PATH/DEBIAN/postinst\" | grep -v debconf/confmodule >> \"$PKG_PATH/install/doinst.sh\"\n     fi\n     rm -rf \"$PKG_PATH/DEBIAN\"\n     if [ -f \"/usr/bin/pigz\" ]; then\ndiff --git a/packages/clickhouse-keeper.postinstall b/packages/clickhouse-keeper.postinstall\nnew file mode 100644\nindex 000000000000..3d6cd484146e\n--- /dev/null\n+++ b/packages/clickhouse-keeper.postinstall\n@@ -0,0 +1,46 @@\n+#!/bin/sh\n+set -e\n+# set -x\n+\n+PROGRAM=clickhouse-keeper\n+KEEPER_USER=${KEEPER_USER:=clickhouse}\n+KEEPER_GROUP=${KEEPER_GROUP:=clickhouse}\n+# Please note that we don't support paths with whitespaces. This is rather ignorant.\n+KEEPER_CONFDIR=${KEEPER_CONFDIR:=/etc/$PROGRAM}\n+KEEPER_DATADIR=${KEEPER_DATADIR:=/var/lib/clickhouse}\n+KEEPER_LOGDIR=${KEEPER_LOGDIR:=/var/log/$PROGRAM}\n+\n+[ -f /usr/share/debconf/confmodule ] && . /usr/share/debconf/confmodule\n+[ -f /etc/default/clickhouse-keeper ] && . /etc/default/clickhouse-keeper\n+\n+if [ ! -f \"/etc/debian_version\" ]; then\n+    not_deb_os=1\n+fi\n+\n+if [ \"$1\" = configure ] || [ -n \"$not_deb_os\" ]; then\n+    if ! getent group \"${KEEPER_GROUP}\" > /dev/null 2>&1 ; then\n+        groupadd --system \"${KEEPER_GROUP}\"\n+    fi\n+    GID=$(getent group \"${KEEPER_GROUP}\" | cut -d: -f 3)\n+    if ! id \"${KEEPER_USER}\" > /dev/null 2>&1 ; then\n+        adduser --system --home /dev/null --no-create-home \\\n+            --gid \"${GID}\" --shell /bin/false \\\n+            \"${KEEPER_USER}\"\n+    fi\n+\n+    chown -R \"${KEEPER_USER}:${KEEPER_GROUP}\" \"${KEEPER_CONFDIR}\"\n+    chmod 0755 \"${KEEPER_CONFDIR}\"\n+\n+    if ! [ -d \"${KEEPER_DATADIR}\" ]; then\n+        mkdir -p \"${KEEPER_DATADIR}\"\n+        chown -R \"${KEEPER_USER}:${KEEPER_GROUP}\" \"${KEEPER_DATADIR}\"\n+        chmod 0700 \"${KEEPER_DATADIR}\"\n+    fi\n+\n+    if ! [ -d \"${KEEPER_LOGDIR}\" ]; then\n+        mkdir -p \"${KEEPER_LOGDIR}\"\n+        chown -R \"${KEEPER_USER}:${KEEPER_GROUP}\" \"${KEEPER_LOGDIR}\"\n+        chmod 0770 \"${KEEPER_LOGDIR}\"\n+    fi\n+fi\n+# vim: ts=4: sw=4: sts=4: expandtab\ndiff --git a/packages/clickhouse-keeper.service b/packages/clickhouse-keeper.service\nnew file mode 100644\nindex 000000000000..2809074c93a8\n--- /dev/null\n+++ b/packages/clickhouse-keeper.service\n@@ -0,0 +1,27 @@\n+[Unit]\n+Description=ClickHouse Keeper - zookeeper compatible distributed coordination server\n+Requires=network-online.target\n+# NOTE: that After/Wants=time-sync.target is not enough, you need to ensure\n+# that the time was adjusted already, if you use systemd-timesyncd you are\n+# safe, but if you use ntp or some other daemon, you should configure it\n+# additionaly.\n+After=time-sync.target network-online.target\n+Wants=time-sync.target\n+\n+[Service]\n+Type=simple\n+User=clickhouse\n+Group=clickhouse\n+Restart=always\n+RestartSec=30\n+RuntimeDirectory=%p  # %p is resolved to the systemd unit name\n+ExecStart=/usr/bin/clickhouse-keeper --config=/etc/clickhouse-keeper/keeper_config.xml --pid-file=%t/%p/%p.pid\n+# Minus means that this file is optional.\n+EnvironmentFile=-/etc/default/%p\n+LimitCORE=infinity\n+LimitNOFILE=500000\n+CapabilityBoundingSet=CAP_NET_ADMIN CAP_IPC_LOCK CAP_SYS_NICE CAP_NET_BIND_SERVICE\n+\n+[Install]\n+# ClickHouse should not start from the rescue shell (rescue.target).\n+WantedBy=multi-user.target\ndiff --git a/packages/clickhouse-keeper.yaml b/packages/clickhouse-keeper.yaml\nindex 7586fa580e67..e9c2e9297551 100644\n--- a/packages/clickhouse-keeper.yaml\n+++ b/packages/clickhouse-keeper.yaml\n@@ -30,6 +30,8 @@ contents:\n   type: config|noreplace\n - src: root/usr/bin/clickhouse-keeper\n   dst: /usr/bin/clickhouse-keeper\n+- src: clickhouse-keeper.service\n+  dst: /lib/systemd/system/clickhouse-keeper.service\n # docs\n - src: ../AUTHORS\n   dst: /usr/share/doc/clickhouse-keeper/AUTHORS\n@@ -39,3 +41,6 @@ contents:\n   dst: /usr/share/doc/clickhouse-keeper/LICENSE\n - src: ../README.md\n   dst: /usr/share/doc/clickhouse-keeper/README.md\n+\n+scripts:\n+  postinstall: ./clickhouse-keeper.postinstall\ndiff --git a/packages/clickhouse-server.postinstall b/packages/clickhouse-server.postinstall\nindex ff376b89bd49..2b9830faf3b0 100644\n--- a/packages/clickhouse-server.postinstall\n+++ b/packages/clickhouse-server.postinstall\n@@ -11,8 +11,6 @@ CLICKHOUSE_DATADIR=${CLICKHOUSE_DATADIR:=/var/lib/clickhouse}\n CLICKHOUSE_LOGDIR=${CLICKHOUSE_LOGDIR:=/var/log/clickhouse-server}\n CLICKHOUSE_BINDIR=${CLICKHOUSE_BINDIR:=/usr/bin}\n CLICKHOUSE_GENERIC_PROGRAM=${CLICKHOUSE_GENERIC_PROGRAM:=clickhouse}\n-EXTRACT_FROM_CONFIG=${CLICKHOUSE_GENERIC_PROGRAM}-extract-from-config\n-CLICKHOUSE_CONFIG=$CLICKHOUSE_CONFDIR/config.xml\n CLICKHOUSE_PIDDIR=/var/run/$PROGRAM\n \n [ -f /usr/share/debconf/confmodule ] && . /usr/share/debconf/confmodule\ndiff --git a/packages/clickhouse-server.service b/packages/clickhouse-server.service\nindex a16024820738..5ea30c062b00 100644\n--- a/packages/clickhouse-server.service\n+++ b/packages/clickhouse-server.service\n@@ -17,10 +17,10 @@ User=clickhouse\n Group=clickhouse\n Restart=always\n RestartSec=30\n-RuntimeDirectory=clickhouse-server\n-ExecStart=/usr/bin/clickhouse-server --config=/etc/clickhouse-server/config.xml --pid-file=/run/clickhouse-server/clickhouse-server.pid\n+RuntimeDirectory=%p  # %p is resolved to the systemd unit name\n+ExecStart=/usr/bin/clickhouse-server --config=/etc/clickhouse-server/config.xml --pid-file=%t/%p/%p.pid\n # Minus means that this file is optional.\n-EnvironmentFile=-/etc/default/clickhouse\n+EnvironmentFile=-/etc/default/%p\n LimitCORE=infinity\n LimitNOFILE=500000\n CapabilityBoundingSet=CAP_NET_ADMIN CAP_IPC_LOCK CAP_SYS_NICE CAP_NET_BIND_SERVICE\ndiff --git a/programs/keeper/Keeper.cpp b/programs/keeper/Keeper.cpp\nindex 3a0d3d3a6caf..ed3297ed7cb4 100644\n--- a/programs/keeper/Keeper.cpp\n+++ b/programs/keeper/Keeper.cpp\n@@ -362,6 +362,7 @@ try\n     else\n         path = std::filesystem::path{KEEPER_DEFAULT_PATH};\n \n+    std::filesystem::create_directories(path);\n \n     /// Check that the process user id matches the owner of the data.\n     const auto effective_user_id = geteuid();\n",
  "test_patch": "diff --git a/docker/test/install/deb/Dockerfile b/docker/test/install/deb/Dockerfile\nnew file mode 100644\nindex 000000000000..9614473c69b4\n--- /dev/null\n+++ b/docker/test/install/deb/Dockerfile\n@@ -0,0 +1,64 @@\n+FROM ubuntu:22.04\n+\n+# The Dockerfile is nicely borrowed from\n+# https://github.com/lionelnicolas/docker-ubuntu-systemd/blob/83aa3249146f5df264fe45353f79fc76eb1e42d7/Dockerfile\n+\n+ENV \\\n+  DEBIAN_FRONTEND=noninteractive \\\n+  LANG=C.UTF-8 \\\n+  container=docker \\\n+  init=/lib/systemd/systemd\n+\n+# install systemd packages\n+RUN apt-get update && \\\n+  apt-get install -y --no-install-recommends \\\n+    systemd \\\n+    && \\\n+  apt-get clean && \\\n+  rm -rf /var/lib/apt/lists\n+\n+# configure systemd\n+# remove systemd 'wants' triggers\n+# remove everything except tmpfiles setup in sysinit target\n+# remove UTMP updater service\n+# disable /tmp mount\n+# fix missing BPF firewall support warning\n+# just for cosmetics, fix \"not-found\" entries while using \"systemctl --all\"\n+RUN \\\n+  find \\\n+    /etc/systemd/system/*.wants/* \\\n+    /lib/systemd/system/multi-user.target.wants/* \\\n+    /lib/systemd/system/sockets.target.wants/*initctl* \\\n+    ! -type d \\\n+    -delete && \\\n+  find \\\n+    /lib/systemd/system/sysinit.target.wants \\\n+    ! -type d \\\n+    ! -name '*systemd-tmpfiles-setup*' \\\n+    -delete && \\\n+  find \\\n+    /lib/systemd \\\n+    -name systemd-update-utmp-runlevel.service \\\n+    -delete && \\\n+  rm -vf /usr/share/systemd/tmp.mount && \\\n+  sed -ri '/^IPAddressDeny/d' /lib/systemd/system/systemd-journald.service && \\\n+  for MATCH in \\\n+    plymouth-start.service \\\n+    plymouth-quit-wait.service \\\n+    syslog.socket \\\n+    syslog.service \\\n+    display-manager.service \\\n+    systemd-sysusers.service \\\n+    tmp.mount \\\n+    systemd-udevd.service \\\n+    ; do \\\n+      grep -rn --binary-files=without-match  ${MATCH} /lib/systemd/ | cut -d: -f1 | xargs sed -ri 's/(.*=.*)'${MATCH}'(.*)/\\1\\2/'; \\\n+  done && \\\n+  systemctl disable ondemand.service && \\\n+  systemctl set-default multi-user.target\n+\n+VOLUME [\"/run\", \"/run/lock\"]\n+\n+STOPSIGNAL SIGRTMIN+3\n+\n+ENTRYPOINT [\"/lib/systemd/systemd\"]\ndiff --git a/docker/test/install/rpm/Dockerfile b/docker/test/install/rpm/Dockerfile\nnew file mode 100644\nindex 000000000000..c55e0fe25072\n--- /dev/null\n+++ b/docker/test/install/rpm/Dockerfile\n@@ -0,0 +1,55 @@\n+FROM centos:8\n+\n+# The Dockerfile is nicely borrowed from\n+# https://github.com/lionelnicolas/docker-ubuntu-systemd/blob/83aa3249146f5df264fe45353f79fc76eb1e42d7/Dockerfile\n+\n+ENV \\\n+  LANG=C.UTF-8 \\\n+  container=docker \\\n+  init=/lib/systemd/systemd\n+\n+# configure systemd\n+# remove systemd 'wants' triggers\n+# remove everything except tmpfiles setup in sysinit target\n+# remove UTMP updater service\n+# disable /tmp mount\n+# fix missing BPF firewall support warning\n+# just for cosmetics, fix \"not-found\" entries while using \"systemctl --all\"\n+RUN \\\n+  find \\\n+    /etc/systemd/system/*.wants/ \\\n+    /lib/systemd/system/multi-user.target.wants/ \\\n+    /lib/systemd/system/local-fs.target.wants/ \\\n+    /lib/systemd/system/sockets.target.wants/*initctl* \\\n+    ! -type d \\\n+    -delete && \\\n+  find \\\n+    /lib/systemd/system/sysinit.target.wants \\\n+    ! -type d \\\n+    ! -name '*systemd-tmpfiles-setup*' \\\n+    -delete && \\\n+  find \\\n+    /lib/systemd \\\n+    -name systemd-update-utmp-runlevel.service \\\n+    -delete && \\\n+  rm -vf /usr/share/systemd/tmp.mount && \\\n+  sed -ri '/^IPAddressDeny/d' /lib/systemd/system/systemd-journald.service && \\\n+  for MATCH in \\\n+    plymouth-start.service \\\n+    plymouth-quit-wait.service \\\n+    syslog.socket \\\n+    syslog.service \\\n+    display-manager.service \\\n+    systemd-sysusers.service \\\n+    tmp.mount \\\n+    systemd-udevd.service \\\n+    ; do \\\n+      grep -rn --binary-files=without-match  ${MATCH} /lib/systemd/ | cut -d: -f1 | xargs sed -ri 's/(.*=.*)'${MATCH}'(.*)/\\1\\2/'; \\\n+  done && \\\n+  systemctl set-default multi-user.target\n+\n+VOLUME [\"/run\", \"/run/lock\"]\n+\n+STOPSIGNAL SIGRTMIN+3\n+\n+ENTRYPOINT [\"/lib/systemd/systemd\"]\ndiff --git a/tests/ci/build_download_helper.py b/tests/ci/build_download_helper.py\nindex bd96ea04c4c8..c61360153160 100644\n--- a/tests/ci/build_download_helper.py\n+++ b/tests/ci/build_download_helper.py\n@@ -5,7 +5,8 @@\n import os\n import sys\n import time\n-from typing import Any, List, Optional\n+from pathlib import Path\n+from typing import Any, Callable, List, Optional\n \n import requests  # type: ignore\n \n@@ -56,21 +57,29 @@ def read_build_urls(build_name: str, reports_path: str) -> List[str]:\n     return []\n \n \n-def download_build_with_progress(url, path):\n+def download_build_with_progress(url: str, path: Path) -> None:\n     logging.info(\"Downloading from %s to temp path %s\", url, path)\n     for i in range(DOWNLOAD_RETRIES_COUNT):\n         try:\n+            response = get_with_retries(url, retries=1, stream=True)\n+            total_length = int(response.headers.get(\"content-length\", 0))\n+            if path.is_file() and total_length and path.stat().st_size == total_length:\n+                logging.info(\n+                    \"The file %s already exists and have a proper size %s\",\n+                    path,\n+                    total_length,\n+                )\n+                return\n+\n             with open(path, \"wb\") as f:\n-                response = get_with_retries(url, retries=1, stream=True)\n-                total_length = response.headers.get(\"content-length\")\n-                if total_length is None or int(total_length) == 0:\n+                if total_length == 0:\n                     logging.info(\n                         \"No content-length, will download file without progress\"\n                     )\n                     f.write(response.content)\n                 else:\n                     dl = 0\n-                    total_length = int(total_length)\n+\n                     logging.info(\"Content length is %ld bytes\", total_length)\n                     for data in response.iter_content(chunk_size=4096):\n                         dl += len(data)\n@@ -99,12 +108,14 @@ def download_build_with_progress(url, path):\n     logging.info(\"Downloading finished\")\n \n \n-def download_builds(result_path, build_urls, filter_fn):\n+def download_builds(\n+    result_path: str, build_urls: List[str], filter_fn: Callable[[str], bool]\n+) -> None:\n     for url in build_urls:\n         if filter_fn(url):\n             fname = os.path.basename(url.replace(\"%2B\", \"+\").replace(\"%20\", \" \"))\n             logging.info(\"Will download %s to %s\", fname, result_path)\n-            download_build_with_progress(url, os.path.join(result_path, fname))\n+            download_build_with_progress(url, Path(result_path) / fname)\n \n \n def download_builds_filter(\ndiff --git a/tests/ci/ci_config.py b/tests/ci/ci_config.py\nindex c77acfb679f4..6aa29465c17c 100644\n--- a/tests/ci/ci_config.py\n+++ b/tests/ci/ci_config.py\n@@ -182,6 +182,12 @@\n     \"tests_config\": {\n         # required_build - build name for artifacts\n         # force_tests - force success status for tests\n+        \"Install packages (amd64)\": {\n+            \"required_build\": \"package_release\",\n+        },\n+        \"Install packages (arm64)\": {\n+            \"required_build\": \"package_aarch64\",\n+        },\n         \"Stateful tests (asan)\": {\n             \"required_build\": \"package_asan\",\n         },\ndiff --git a/tests/ci/download_binary.py b/tests/ci/download_binary.py\nindex b95c86aa0bd7..c57780daa369 100755\n--- a/tests/ci/download_binary.py\n+++ b/tests/ci/download_binary.py\n@@ -6,6 +6,7 @@\n import argparse\n import logging\n import os\n+from pathlib import Path\n \n from build_download_helper import download_build_with_progress\n from ci_config import CI_CONFIG, BuildConfig\n@@ -57,14 +58,15 @@ def parse_args() -> argparse.Namespace:\n def main():\n     logging.basicConfig(level=logging.INFO, format=\"%(asctime)s %(message)s\")\n     args = parse_args()\n-    os.makedirs(TEMP_PATH, exist_ok=True)\n+    temp_path = Path(TEMP_PATH)\n+    temp_path.mkdir(parents=True, exist_ok=True)\n     for build in args.build_names:\n         # check if it's in CI_CONFIG\n         config = CI_CONFIG[\"build_config\"][build]  # type: BuildConfig\n         if args.rename:\n-            path = os.path.join(TEMP_PATH, f\"clickhouse-{config['static_binary_name']}\")\n+            path = temp_path / f\"clickhouse-{config['static_binary_name']}\"\n         else:\n-            path = os.path.join(TEMP_PATH, \"clickhouse\")\n+            path = temp_path / \"clickhouse\"\n \n         url = S3_ARTIFACT_DOWNLOAD_TEMPLATE.format(\n             pr_or_release=f\"{args.version.major}.{args.version.minor}\",\ndiff --git a/tests/ci/install_check.py b/tests/ci/install_check.py\nnew file mode 100644\nindex 000000000000..1444759cea0f\n--- /dev/null\n+++ b/tests/ci/install_check.py\n@@ -0,0 +1,315 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+\n+import atexit\n+import logging\n+import sys\n+import subprocess\n+from pathlib import Path\n+\n+from typing import Dict\n+\n+from github import Github\n+\n+from build_download_helper import download_builds_filter\n+from clickhouse_helper import (\n+    ClickHouseHelper,\n+    mark_flaky_tests,\n+    prepare_tests_results_for_clickhouse,\n+)\n+from commit_status_helper import post_commit_status, update_mergeable_check\n+from docker_pull_helper import get_image_with_version, DockerImage\n+from env_helper import CI, TEMP_PATH as TEMP, REPORTS_PATH\n+from get_robot_token import get_best_robot_token\n+from pr_info import PRInfo\n+from report import TestResults, TestResult\n+from rerun_helper import RerunHelper\n+from s3_helper import S3Helper\n+from stopwatch import Stopwatch\n+from tee_popen import TeePopen\n+from upload_result_helper import upload_results\n+\n+\n+RPM_IMAGE = \"clickhouse/install-rpm-test\"\n+DEB_IMAGE = \"clickhouse/install-deb-test\"\n+TEMP_PATH = Path(TEMP)\n+SUCCESS = \"success\"\n+FAILURE = \"failure\"\n+\n+\n+def prepare_test_scripts():\n+    server_test = r\"\"\"#!/bin/bash\n+systemctl start clickhouse-server\n+clickhouse-client -q 'SELECT version()'\"\"\"\n+    keeper_test = r\"\"\"#!/bin/bash\n+systemctl start clickhouse-keeper\n+for i in {1..20}; do\n+    echo wait for clickhouse-keeper to being up\n+    > /dev/tcp/127.0.0.1/9181 2>/dev/null && break || sleep 1\n+done\n+for i in {1..5}; do\n+    echo wait for clickhouse-keeper to answer on mntr request\n+    exec 13<>/dev/tcp/127.0.0.1/9181\n+    echo mntr >&13\n+    cat <&13 | grep zk_version && break || sleep 1\n+    exec 13>&-\n+done\n+exec 13>&-\"\"\"\n+    binary_test = r\"\"\"#!/bin/bash\n+chmod +x /packages/clickhouse\n+/packages/clickhouse install\n+clickhouse-server start --daemon\n+for i in {1..5}; do\n+    clickhouse-client -q 'SELECT version()' && break || sleep 1\n+done\n+clickhouse-keeper start --daemon\n+for i in {1..20}; do\n+    echo wait for clickhouse-keeper to being up\n+    > /dev/tcp/127.0.0.1/9181 2>/dev/null && break || sleep 1\n+done\n+for i in {1..5}; do\n+    echo wait for clickhouse-keeper to answer on mntr request\n+    exec 13<>/dev/tcp/127.0.0.1/9181\n+    echo mntr >&13\n+    cat <&13 | grep zk_version && break || sleep 1\n+    exec 13>&-\n+done\n+exec 13>&-\"\"\"\n+    (TEMP_PATH / \"server_test.sh\").write_text(server_test, encoding=\"utf-8\")\n+    (TEMP_PATH / \"keeper_test.sh\").write_text(keeper_test, encoding=\"utf-8\")\n+    (TEMP_PATH / \"binary_test.sh\").write_text(binary_test, encoding=\"utf-8\")\n+\n+\n+def test_install_deb(image: DockerImage) -> TestResults:\n+    tests = {\n+        \"Install server deb\": r\"\"\"#!/bin/bash -ex\n+apt-get install /packages/clickhouse-{server,client,common}*deb\n+bash -ex /packages/server_test.sh\"\"\",\n+        \"Install keeper deb\": r\"\"\"#!/bin/bash -ex\n+apt-get install /packages/clickhouse-keeper*deb\n+bash -ex /packages/keeper_test.sh\"\"\",\n+        \"Install clickhouse binary in deb\": r\"bash -ex /packages/binary_test.sh\",\n+    }\n+    return test_install(image, tests)\n+\n+\n+def test_install_rpm(image: DockerImage) -> TestResults:\n+    # FIXME: I couldn't find why Type=notify is broken in centos:8\n+    # systemd just ignores the watchdog completely\n+    tests = {\n+        \"Install server rpm\": r\"\"\"#!/bin/bash -ex\n+yum localinstall --disablerepo=* -y /packages/clickhouse-{server,client,common}*rpm\n+echo CLICKHOUSE_WATCHDOG_ENABLE=0 > /etc/default/clickhouse-server\n+bash -ex /packages/server_test.sh\"\"\",\n+        \"Install keeper rpm\": r\"\"\"#!/bin/bash -ex\n+yum localinstall --disablerepo=* -y /packages/clickhouse-keeper*rpm\n+bash -ex /packages/keeper_test.sh\"\"\",\n+        \"Install clickhouse binary in rpm\": r\"bash -ex /packages/binary_test.sh\",\n+    }\n+    return test_install(image, tests)\n+\n+\n+def test_install_tgz(image: DockerImage) -> TestResults:\n+    # FIXME: I couldn't find why Type=notify is broken in centos:8\n+    # systemd just ignores the watchdog completely\n+    tests = {\n+        f\"Install server tgz in {image.name}\": r\"\"\"#!/bin/bash -ex\n+[ -f /etc/debian_version ] && CONFIGURE=configure || CONFIGURE=\n+for pkg in /packages/clickhouse-{common,client,server}*tgz; do\n+    package=${pkg%-*}\n+    package=${package##*/}\n+    tar xf \"$pkg\"\n+    \"/$package/install/doinst.sh\" $CONFIGURE\n+done\n+[ -f /etc/yum.conf ] && echo CLICKHOUSE_WATCHDOG_ENABLE=0 > /etc/default/clickhouse-server\n+bash -ex /packages/server_test.sh\"\"\",\n+        f\"Install keeper tgz in {image.name}\": r\"\"\"#!/bin/bash -ex\n+[ -f /etc/debian_version ] && CONFIGURE=configure || CONFIGURE=\n+for pkg in /packages/clickhouse-keeper*tgz; do\n+    package=${pkg%-*}\n+    package=${package##*/}\n+    tar xf \"$pkg\"\n+    \"/$package/install/doinst.sh\" $CONFIGURE\n+done\n+bash -ex /packages/keeper_test.sh\"\"\",\n+    }\n+    return test_install(image, tests)\n+\n+\n+def test_install(image: DockerImage, tests: Dict[str, str]) -> TestResults:\n+    test_results = []  # type: TestResults\n+    for name, command in tests.items():\n+        stopwatch = Stopwatch()\n+        container_name = name.lower().replace(\" \", \"_\").replace(\"/\", \"_\")\n+        log_file = TEMP_PATH / f\"{container_name}.log\"\n+        run_command = (\n+            f\"docker run --rm --privileged --detach --cap-add=SYS_PTRACE \"\n+            f\"--volume={TEMP_PATH}:/packages {image}\"\n+        )\n+        logging.info(\"Running docker container: `%s`\", run_command)\n+        container_id = subprocess.check_output(\n+            run_command, shell=True, encoding=\"utf-8\"\n+        ).strip()\n+        (TEMP_PATH / \"install.sh\").write_text(command)\n+        install_command = f\"docker exec {container_id} bash -ex /packages/install.sh\"\n+        with TeePopen(install_command, log_file) as process:\n+            retcode = process.wait()\n+            if retcode == 0:\n+                status = SUCCESS\n+            else:\n+                status = FAILURE\n+\n+        subprocess.check_call(f\"docker kill -s 9 {container_id}\", shell=True)\n+        test_results.append(\n+            TestResult(name, status, stopwatch.duration_seconds, [log_file])\n+        )\n+\n+    return test_results\n+\n+\n+def parse_args() -> argparse.Namespace:\n+    parser = argparse.ArgumentParser(\n+        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n+        description=\"The script to check if the packages are able to install\",\n+    )\n+\n+    parser.add_argument(\n+        \"check_name\",\n+        help=\"check name, used to download the packages\",\n+    )\n+    parser.add_argument(\"--download\", default=True, help=argparse.SUPPRESS)\n+    parser.add_argument(\n+        \"--no-download\",\n+        dest=\"download\",\n+        action=\"store_false\",\n+        default=argparse.SUPPRESS,\n+        help=\"if set, the packages won't be downloaded, useful for debug\",\n+    )\n+    parser.add_argument(\"--deb\", default=True, help=argparse.SUPPRESS)\n+    parser.add_argument(\n+        \"--no-deb\",\n+        dest=\"deb\",\n+        action=\"store_false\",\n+        default=argparse.SUPPRESS,\n+        help=\"if set, the deb packages won't be checked\",\n+    )\n+    parser.add_argument(\"--rpm\", default=True, help=argparse.SUPPRESS)\n+    parser.add_argument(\n+        \"--no-rpm\",\n+        dest=\"rpm\",\n+        action=\"store_false\",\n+        default=argparse.SUPPRESS,\n+        help=\"if set, the rpm packages won't be checked\",\n+    )\n+    parser.add_argument(\"--tgz\", default=True, help=argparse.SUPPRESS)\n+    parser.add_argument(\n+        \"--no-tgz\",\n+        dest=\"tgz\",\n+        action=\"store_false\",\n+        default=argparse.SUPPRESS,\n+        help=\"if set, the tgz packages won't be checked\",\n+    )\n+\n+    return parser.parse_args()\n+\n+\n+def main():\n+    logging.basicConfig(level=logging.INFO)\n+\n+    stopwatch = Stopwatch()\n+\n+    args = parse_args()\n+\n+    TEMP_PATH.mkdir(parents=True, exist_ok=True)\n+\n+    pr_info = PRInfo()\n+\n+    if CI:\n+        gh = Github(get_best_robot_token(), per_page=100)\n+        atexit.register(update_mergeable_check, gh, pr_info, args.check_name)\n+\n+        rerun_helper = RerunHelper(gh, pr_info, args.check_name)\n+        if rerun_helper.is_already_finished_by_status():\n+            logging.info(\n+                \"Check is already finished according to github status, exiting\"\n+            )\n+            sys.exit(0)\n+\n+    docker_images = {\n+        name: get_image_with_version(REPORTS_PATH, name)\n+        for name in (RPM_IMAGE, DEB_IMAGE)\n+    }\n+    prepare_test_scripts()\n+\n+    if args.download:\n+\n+        def filter_artifacts(path: str) -> bool:\n+            return (\n+                path.endswith(\".deb\")\n+                or path.endswith(\".rpm\")\n+                or path.endswith(\".tgz\")\n+                or path.endswith(\"/clickhouse\")\n+            )\n+\n+        download_builds_filter(\n+            args.check_name, REPORTS_PATH, TEMP_PATH, filter_artifacts\n+        )\n+\n+    test_results = []  # type: TestResults\n+    if args.deb:\n+        test_results.extend(test_install_deb(docker_images[DEB_IMAGE]))\n+    if args.rpm:\n+        test_results.extend(test_install_rpm(docker_images[RPM_IMAGE]))\n+    if args.tgz:\n+        test_results.extend(test_install_tgz(docker_images[DEB_IMAGE]))\n+        test_results.extend(test_install_tgz(docker_images[RPM_IMAGE]))\n+\n+    state = SUCCESS\n+    description = \"Packages installed successfully\"\n+    if FAILURE in (result.status for result in test_results):\n+        state = FAILURE\n+        description = \"Failed to install packages: \" + \", \".join(\n+            result.name for result in test_results\n+        )\n+\n+    s3_helper = S3Helper()\n+\n+    report_url = upload_results(\n+        s3_helper,\n+        pr_info.number,\n+        pr_info.sha,\n+        test_results,\n+        [],\n+        args.check_name,\n+    )\n+    print(f\"::notice ::Report url: {report_url}\")\n+    if not CI:\n+        return\n+\n+    ch_helper = ClickHouseHelper()\n+    mark_flaky_tests(ch_helper, args.check_name, test_results)\n+\n+    if len(description) >= 140:\n+        description = description[:136] + \"...\"\n+\n+    post_commit_status(gh, pr_info.sha, args.check_name, description, state, report_url)\n+\n+    prepared_events = prepare_tests_results_for_clickhouse(\n+        pr_info,\n+        test_results,\n+        state,\n+        stopwatch.duration_seconds,\n+        stopwatch.start_time_str,\n+        report_url,\n+        args.check_name,\n+    )\n+\n+    ch_helper.insert_events_into(db=\"default\", table=\"checks\", events=prepared_events)\n+\n+    if state == FAILURE:\n+        sys.exit(1)\n+\n+\n+if __name__ == \"__main__\":\n+    main()\ndiff --git a/tests/ci/unit_tests_check.py b/tests/ci/unit_tests_check.py\nindex 915a77f3d48e..edc096908f41 100644\n--- a/tests/ci/unit_tests_check.py\n+++ b/tests/ci/unit_tests_check.py\n@@ -108,13 +108,10 @@ def main():\n \n     stopwatch = Stopwatch()\n \n-    temp_path = TEMP_PATH\n-    reports_path = REPORTS_PATH\n-\n     check_name = sys.argv[1]\n \n-    if not os.path.exists(temp_path):\n-        os.makedirs(temp_path)\n+    if not os.path.exists(TEMP_PATH):\n+        os.makedirs(TEMP_PATH)\n \n     pr_info = PRInfo()\n \n@@ -127,14 +124,14 @@ def main():\n         logging.info(\"Check is already finished according to github status, exiting\")\n         sys.exit(0)\n \n-    docker_image = get_image_with_version(reports_path, IMAGE_NAME)\n+    docker_image = get_image_with_version(REPORTS_PATH, IMAGE_NAME)\n \n-    download_unit_tests(check_name, reports_path, temp_path)\n+    download_unit_tests(check_name, REPORTS_PATH, TEMP_PATH)\n \n-    tests_binary_path = os.path.join(temp_path, \"unit_tests_dbms\")\n+    tests_binary_path = os.path.join(TEMP_PATH, \"unit_tests_dbms\")\n     os.chmod(tests_binary_path, 0o777)\n \n-    test_output = os.path.join(temp_path, \"test_output\")\n+    test_output = os.path.join(TEMP_PATH, \"test_output\")\n     if not os.path.exists(test_output):\n         os.makedirs(test_output)\n \n@@ -151,7 +148,7 @@ def main():\n         else:\n             logging.info(\"Run failed\")\n \n-    subprocess.check_call(f\"sudo chown -R ubuntu:ubuntu {temp_path}\", shell=True)\n+    subprocess.check_call(f\"sudo chown -R ubuntu:ubuntu {TEMP_PATH}\", shell=True)\n \n     s3_helper = S3Helper()\n     state, description, test_results, additional_logs = process_results(test_output)\n",
  "problem_statement": "clickhouse-keeper doesn't contain systemd service file\nIt's very unfortunate, we need to add it\n",
  "hints_text": "https://kb.altinity.com/altinity-kb-setup-and-maintenance/altinity-kb-zookeeper/clickhouse-keeper-service/#systemd-service\r\n\r\nKudos to @den-crane ",
  "created_at": "2023-01-24T13:57:00Z",
  "modified_files": [
    ".github/workflows/pull_request.yml",
    "docker/images.json",
    "packages/build",
    "b/packages/clickhouse-keeper.postinstall",
    "b/packages/clickhouse-keeper.service",
    "packages/clickhouse-keeper.yaml",
    "packages/clickhouse-server.postinstall",
    "packages/clickhouse-server.service",
    "programs/keeper/Keeper.cpp"
  ],
  "modified_test_files": [
    "b/docker/test/install/deb/Dockerfile",
    "b/docker/test/install/rpm/Dockerfile",
    "tests/ci/build_download_helper.py",
    "tests/ci/ci_config.py",
    "tests/ci/download_binary.py",
    "b/tests/ci/install_check.py",
    "tests/ci/unit_tests_check.py"
  ]
}