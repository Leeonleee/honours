diff --git a/tests/queries/0_stateless/03364_ttl_should_recalculate_minmax_index.reference b/tests/queries/0_stateless/03364_ttl_should_recalculate_minmax_index.reference
new file mode 100644
index 000000000000..2f19e2ca4d9c
--- /dev/null
+++ b/tests/queries/0_stateless/03364_ttl_should_recalculate_minmax_index.reference
@@ -0,0 +1,14 @@
+-- { echoOn }
+
+drop table if exists x;
+create table x (dt DateTime, i Int32) engine MergeTree partition by indexHint(dt) order by dt TTL dt + toIntervalDay(15) settings index_granularity = 8192;
+insert into x values (now(), 1), (now() - toIntervalDay(30), 2);
+optimize table x final;
+select i from x;
+1
+select minmax_dt.1 == minmax_dt.2 from mergeTreeIndex(currentDatabase(), x, with_minmax = 1);
+1
+1
+select (select min(dt) from x) == (select minDistinct(dt) from x);
+1
+drop table x;
diff --git a/tests/queries/0_stateless/03364_ttl_should_recalculate_minmax_index.sql b/tests/queries/0_stateless/03364_ttl_should_recalculate_minmax_index.sql
new file mode 100644
index 000000000000..3d62de3e0a4b
--- /dev/null
+++ b/tests/queries/0_stateless/03364_ttl_should_recalculate_minmax_index.sql
@@ -0,0 +1,17 @@
+-- { echoOn }
+
+drop table if exists x;
+
+create table x (dt DateTime, i Int32) engine MergeTree partition by indexHint(dt) order by dt TTL dt + toIntervalDay(15) settings index_granularity = 8192;
+
+insert into x values (now(), 1), (now() - toIntervalDay(30), 2);
+
+optimize table x final;
+
+select i from x;
+
+select minmax_dt.1 == minmax_dt.2 from mergeTreeIndex(currentDatabase(), x, with_minmax = 1);
+
+select (select min(dt) from x) == (select minDistinct(dt) from x);
+
+drop table x;
diff --git a/tests/queries/0_stateless/03365_column_ttl_should_rebuild_skp_idx_and_proj.reference b/tests/queries/0_stateless/03365_column_ttl_should_rebuild_skp_idx_and_proj.reference
new file mode 100644
index 000000000000..a08e8a1d440f
--- /dev/null
+++ b/tests/queries/0_stateless/03365_column_ttl_should_rebuild_skp_idx_and_proj.reference
@@ -0,0 +1,4 @@
+0	0
+0	0
+0	0
+0	0
diff --git a/tests/queries/0_stateless/03365_column_ttl_should_rebuild_skp_idx_and_proj.sh b/tests/queries/0_stateless/03365_column_ttl_should_rebuild_skp_idx_and_proj.sh
new file mode 100755
index 000000000000..d00ade755997
--- /dev/null
+++ b/tests/queries/0_stateless/03365_column_ttl_should_rebuild_skp_idx_and_proj.sh
@@ -0,0 +1,30 @@
+#!/usr/bin/env bash
+# Tags: no-parallel-replicas
+
+CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CUR_DIR"/../shell_config.sh
+
+${CLICKHOUSE_CLIENT} --query "drop table if exists tbl;"
+${CLICKHOUSE_CLIENT} --query "create table tbl (timestamp DateTime, x UInt32 TTL timestamp + INTERVAL 1 MONTH, y UInt32 TTL timestamp + INTERVAL 1 DAY, index i x type minmax granularity 1, projection p (select x order by y)) engine MergeTree order by () settings min_bytes_for_wide_part = 1, index_granularity = 1;"
+${CLICKHOUSE_CLIENT} --query "insert into tbl select today() - 100, 1, 2 union all select today() - 50, 2, 4;"
+
+# Wait for column TTL to take effect
+i=0
+retries=300
+while [[ $i -lt $retries ]]; do
+    res=$($CLICKHOUSE_CLIENT -q "select x from tbl limit 1 format TSVRaw")
+    if [[ $res -eq 0 ]]; then
+        ${CLICKHOUSE_CLIENT} --query "select x, y from tbl;"
+        ${CLICKHOUSE_CLIENT} --query "select x, y from tbl where x = 0;"
+        ${CLICKHOUSE_CLIENT} --query "select x, y from tbl where y = 2 settings force_optimize_projection_name = 'p';"
+
+        ${CLICKHOUSE_CLIENT} --query "drop table tbl;"
+        exit 0
+    fi
+    ((++i))
+    sleep 1
+done
+
+echo "Timeout waiting for column TTL to take effect" >&2
+exit 1
diff --git a/tests/queries/0_stateless/03550_projection_with_part_offset_ttl.reference b/tests/queries/0_stateless/03550_projection_with_part_offset_ttl.reference
new file mode 100644
index 000000000000..dcabb3873028
--- /dev/null
+++ b/tests/queries/0_stateless/03550_projection_with_part_offset_ttl.reference
@@ -0,0 +1,19 @@
+-- { echo ON }
+
+DROP TABLE IF EXISTS test;
+CREATE TABLE test
+(
+    `order` int,
+    `indexed` int,
+    PROJECTION proj
+    (
+        SELECT _part_offset
+        ORDER BY indexed
+    )
+)
+ENGINE = MergeTree
+ORDER BY order
+TTL if(order = 1, '1970-01-02T00:00:00'::DateTime, '2030-01-01T00:00:00'::DateTime);
+INSERT INTO test SELECT 1, 10;
+OPTIMIZE TABLE test final;
+DROP TABLE test;
diff --git a/tests/queries/0_stateless/03550_projection_with_part_offset_ttl.sql b/tests/queries/0_stateless/03550_projection_with_part_offset_ttl.sql
new file mode 100644
index 000000000000..89872a28e6da
--- /dev/null
+++ b/tests/queries/0_stateless/03550_projection_with_part_offset_ttl.sql
@@ -0,0 +1,23 @@
+-- { echo ON }
+
+DROP TABLE IF EXISTS test;
+
+CREATE TABLE test
+(
+    `order` int,
+    `indexed` int,
+    PROJECTION proj
+    (
+        SELECT _part_offset
+        ORDER BY indexed
+    )
+)
+ENGINE = MergeTree
+ORDER BY order
+TTL if(order = 1, '1970-01-02T00:00:00'::DateTime, '2030-01-01T00:00:00'::DateTime);
+
+INSERT INTO test SELECT 1, 10;
+
+OPTIMIZE TABLE test final;
+
+DROP TABLE test;
