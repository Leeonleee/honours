{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 61671,
  "instance_id": "ClickHouse__ClickHouse-61671",
  "issue_numbers": [
    "47734"
  ],
  "base_commit": "d4063e378e844b5f31506aa125257f6f034b4723",
  "patch": "diff --git a/src/Server/CertificateReloader.cpp b/src/Server/CertificateReloader.cpp\nindex c974f450c9a3..311ece67bce1 100644\n--- a/src/Server/CertificateReloader.cpp\n+++ b/src/Server/CertificateReloader.cpp\n@@ -22,7 +22,6 @@ int callSetCertificate(SSL * ssl, [[maybe_unused]] void * arg)\n \n }\n \n-\n /// This is callback for OpenSSL. It will be called on every connection to obtain a certificate and private key.\n int CertificateReloader::setCertificate(SSL * ssl)\n {\n@@ -30,17 +29,37 @@ int CertificateReloader::setCertificate(SSL * ssl)\n     if (!current)\n         return -1;\n \n-    SSL_use_certificate(ssl, const_cast<X509 *>(current->cert.certificate()));\n-    SSL_use_PrivateKey(ssl, const_cast<EVP_PKEY *>(static_cast<const EVP_PKEY *>(current->key)));\n+    if (current->certs_chain.empty())\n+        return -1;\n \n-    int err = SSL_check_private_key(ssl);\n-    if (err != 1)\n+    if (auto err = SSL_clear_chain_certs(ssl); err != 1)\n     {\n-        std::string msg = Poco::Net::Utility::getLastError();\n-        LOG_ERROR(log, \"Unusable key-pair {}\", msg);\n+        LOG_ERROR(log, \"Clear certificates {}\", Poco::Net::Utility::getLastError());\n+        return -1;\n+    }\n+    if (auto err = SSL_use_certificate(ssl, const_cast<X509 *>(current->certs_chain[0].certificate())); err != 1)\n+    {\n+        LOG_ERROR(log, \"Use certificate {}\", Poco::Net::Utility::getLastError());\n+        return -1;\n+    }\n+    for (auto cert = current->certs_chain.begin() + 1; cert != current->certs_chain.end(); cert++)\n+    {\n+        if (auto err = SSL_add1_chain_cert(ssl, const_cast<X509 *>(cert->certificate())); err != 1)\n+        {\n+            LOG_ERROR(log, \"Add certificate to chain {}\", Poco::Net::Utility::getLastError());\n+            return -1;\n+        }\n+    }\n+    if (auto err = SSL_use_PrivateKey(ssl, const_cast<EVP_PKEY *>(static_cast<const EVP_PKEY *>(current->key))); err != 1)\n+    {\n+        LOG_ERROR(log, \"Use private key {}\", Poco::Net::Utility::getLastError());\n+        return -1;\n+    }\n+    if (auto err = SSL_check_private_key(ssl); err != 1)\n+    {\n+        LOG_ERROR(log, \"Unusable key-pair {}\", Poco::Net::Utility::getLastError());\n         return -1;\n     }\n-\n     return 1;\n }\n \n@@ -100,7 +119,7 @@ void CertificateReloader::tryLoad(const Poco::Util::AbstractConfiguration & conf\n \n \n CertificateReloader::Data::Data(std::string cert_path, std::string key_path, std::string pass_phrase)\n-    : cert(cert_path), key(/* public key */ \"\", /* private key */ key_path, pass_phrase)\n+    : certs_chain(Poco::Crypto::X509Certificate::readPEM(cert_path)), key(/* public key */ \"\", /* private key */ key_path, pass_phrase)\n {\n }\n \ndiff --git a/src/Server/CertificateReloader.h b/src/Server/CertificateReloader.h\nindex 028914e682f1..5ab799037d5a 100644\n--- a/src/Server/CertificateReloader.h\n+++ b/src/Server/CertificateReloader.h\n@@ -70,7 +70,7 @@ class CertificateReloader\n \n     struct Data\n     {\n-        Poco::Crypto::X509Certificate cert;\n+        Poco::Crypto::X509Certificate::List certs_chain;\n         Poco::Crypto::EVPPKey key;\n \n         Data(std::string cert_path, std::string key_path, std::string pass_phrase);\n",
  "test_patch": "diff --git a/tests/integration/test_reload_certificate/configs/WithChain.crt b/tests/integration/test_reload_certificate/configs/WithChain.crt\nnew file mode 100644\nindex 000000000000..c75ee533f26f\n--- /dev/null\n+++ b/tests/integration/test_reload_certificate/configs/WithChain.crt\n@@ -0,0 +1,43 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDkzCCAnugAwIBAgIUSChEeHqJus9jzKmD/L3Tw0x4OwcwDQYJKoZIhvcNAQEL\n+BQAwQTEaMBgGA1UEAwwRZGVtby5tbG9wc2h1Yi5jb20xCzAJBgNVBAYTAlVTMRYw\n+FAYDVQQHDA1TYW4gRnJhbnNpc2NvMCAXDTI0MDMyMDE5MTE1OVoYDzIxMjQwMjI1\n+MTkxMTU5WjBxMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQG\n+A1UEBwwNU2FuIEZyYW5zaXNjbzEPMA0GA1UECgwGRm9vQmFyMRAwDgYDVQQLDAdG\n+b28gQmFyMRIwEAYDVQQDDAlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQDM//0s6AX988J86HzxX95irGa9cJIfY24UDBXVkO3gREiwj1Uf\n+bpvpxCcwADMuFdggsJlppWa3q+PNJ/eoVwdl3gG0WXaZp1rcuv6ltxdQAUtgfMAb\n+5p7HwsO7rCTGJBwa62Jg+E79j+V8rZWfaJRfNtY0p7eauWIrqLA0Gyse+lRayPHI\n+hsR9+0qedF+qziFpbNxpW8DHrpIrLb8LEao1BCYQ44koBXjkrXeR6OidXw/gek8+\n+9M2GLxy6ubQ7hrcYwVWpFOKLLZLmyYDgescM6AIU904o1bN0yJ5rM7a1+f150qp6\n+ttZlya0sJH0lm3gzEsqb6Fbh+Dw/9Lsp66sDAgMBAAGjUTBPMB8GA1UdIwQYMBaA\n+FMjyDUyXujACeQa2G+4I8ic5HVBiMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgTwMBQG\n+A1UdEQQNMAuCCWxvY2FsaG9zdDANBgkqhkiG9w0BAQsFAAOCAQEABEWEaVDqv9Za\n+bFpD/JEMIFVqe5ANKAnbbff0/vFJQ7yFmsL8/G4bbdd8uidRgE4WgoeNUscCnfk+\n+kjb1vFjvY4/cBYITn41Pz5I7lQMH+BaR5gHb1oJVlJavQ2vsaeMuyDJaNmumejmU\n+YnoKZRwwb6SCXujS2MKgKl+jL5OkZk60i+nJhIXfxwMNmlvtqADSU5Z3VMagq8hj\n+DnEsxTz8PptuVaLVT4kcZm9gZpDEW2KPMZhNCv/g7EzQv8r3WnFGqumMGBO82ZE0\n+mUh/Chrhss/meVK0FqTTBjOlex7R0GiJBCDfZGYTWIVdND4ICdZ1OpGWid5CXbfQ\n+sWBrbBaEyw==\n+-----END CERTIFICATE-----\n+-----BEGIN CERTIFICATE-----\n+MIIDYzCCAkugAwIBAgIUR0PldYYSk3DAifgb600kvqjaCAIwDQYJKoZIhvcNAQEL\n+BQAwQTEaMBgGA1UEAwwRZGVtby5tbG9wc2h1Yi5jb20xCzAJBgNVBAYTAlVTMRYw\n+FAYDVQQHDA1TYW4gRnJhbnNpc2NvMB4XDTI0MDMyMDE5MTEzMVoXDTI1MDMxMTE5\n+MTEzMVowQTEaMBgGA1UEAwwRZGVtby5tbG9wc2h1Yi5jb20xCzAJBgNVBAYTAlVT\n+MRYwFAYDVQQHDA1TYW4gRnJhbnNpc2NvMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A\n+MIIBCgKCAQEAqL3k6Pexu1KR8fc84fRmu0hYon7+xOPmtFSzspeN+DJNe5oDO6x0\n+RzTQkgtDoxTcq32O290r3uURnDmnvNubz5yTpM1Zcz/kuSNpHLJh4yyZsXRsB21v\n+lb3bhjqyn6rkfoQzIMekt7clPQS0dWdU2T+lwn6XBVShOyB/W7ysP309ofQGXV+T\n+VFyU+lgZc2WjK6611QDCpTXgRc/UKUfU5460BnTCylP6jzBOWBZb8FX6dYBzS4U2\n+yISvOXagxJVruoWjscc35ln6HBQ8bu/fI8Q0n1/ROlm785Bsd/LpVw465kklwQwS\n+FY3FQkiedD1fyszXO4Yq5PARw54AGKbAyQIDAQABo1MwUTAdBgNVHQ4EFgQUyPIN\n+TJe6MAJ5BrYb7gjyJzkdUGIwHwYDVR0jBBgwFoAUyPINTJe6MAJ5BrYb7gjyJzkd\n+UGIwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAYyl27sxwrjz5\n+qcqwbLYv2eFIR6VZzvHfknSK1ht1jzMkXxvAOjETbYwqwWquWwMHOD2X4q5d57nu\n+qYAE9YE27HFzknPQkDdzwJ0u4dKi28PK8tM6dqDK46LSal/MEUxXGuzW3TRyJXrl\n+lPi+Wh6gZRRiANJ+giEwvQ+8k6eURHrhtL7yZqT+swi+jP4h6S4mmHmsaOj4VoP/\n+NCFoRZud5SCd7RZV+fzNfxhLHI9I2c2gFycBDZOEdlrIZHM6EoaDb3i9kDVbnZqG\n+Zj/+k/NwCKg5UiDap6Z7Xj7w0chSppg3DMcsxGeQ9vQcMtydNu5fSK4CozNqxObb\n+hGBJrQylAw==\n+-----END CERTIFICATE-----\ndiff --git a/tests/integration/test_reload_certificate/configs/WithChain.key b/tests/integration/test_reload_certificate/configs/WithChain.key\nnew file mode 100644\nindex 000000000000..eb55458b143f\n--- /dev/null\n+++ b/tests/integration/test_reload_certificate/configs/WithChain.key\n@@ -0,0 +1,27 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEpQIBAAKCAQEAzP/9LOgF/fPCfOh88V/eYqxmvXCSH2NuFAwV1ZDt4ERIsI9V\n+H26b6cQnMAAzLhXYILCZaaVmt6vjzSf3qFcHZd4BtFl2mada3Lr+pbcXUAFLYHzA\n+G+aex8LDu6wkxiQcGutiYPhO/Y/lfK2Vn2iUXzbWNKe3mrliK6iwNBsrHvpUWsjx\n+yIbEfftKnnRfqs4haWzcaVvAx66SKy2/CxGqNQQmEOOJKAV45K13kejonV8P4HpP\n+PvTNhi8curm0O4a3GMFVqRTiiy2S5smA4HrHDOgCFPdOKNWzdMieazO2tfn9edKq\n+erbWZcmtLCR9JZt4MxLKm+hW4fg8P/S7KeurAwIDAQABAoIBAQDIT6LtzFJ+kT+L\n+mgjsOocs19UUavj9XsTjJeP36UPnDhIRJB1DN2t2Astf5fIcqA+l8aoWRx6Vfop7\n+nwAqJ8/8w+/acEipX5Qzdyz4dG19Kaajw4JcQP8JptBng4/zZLlpvHNG2ZslvQO6\n+zksTlrbUStsIXJHVyCubCZwTbjC2dJlc97705DZAk/8L7FkljmyJws2xwQZlxdQG\n+FZ+8IrAqpWJC55EPfKo6+QsKEc9hh4N/MQW483V5yCuw9dLShcEMDGuxcHGFHif8\n+BrwImih0rIwj9tTDY9pw6aJ5+80tVStNLDk+1eQRME6Fy/c7RG/sm/lj+P0YOI7F\n+jH4wyXVRAoGBAOc+rFNpM/CgRZD4VXQ+gV1+PLdaqUUU3UXAPfNWkrMIr0u4+tmg\n+OMMkXaM7B/ps7o5+Rcj+tO1VAvl6m7uM376szC3Ex8JA0XBDmJrJKfEQCHkzvkdf\n+wywVBeAR4f3D2+9Meh1XSNRqGU+Anb48neTyVYzPNIoK8ZmtZID49GfVAoGBAOLy\n+EX1TT1xwE/VwDy5BeJQzyZ+xwevie/960RIYooLeb31NLhOcX142b8U7XRMtiqdd\n+wfsT5SbjnrATBponKZELO7LwE+Z4djo2+O6JZjYB5/t/Z6r7qfOaTTlJEl8VJKo4\n+F+qAsqKo0Q9EpkRUeNdcOjDzkuEikw9IlhS0VEt3AoGAWLHoRQH4AxZmOGmX1UNY\n+OTT/MtCaVj3fdS58VIZjNDpjiibESI601txu8fnlYH9BrPPv7l0LpnBR+MC3VON+\n+ulLq6a8tc2uLKYUz1kLMTIL6zQo0tImdgZ36p+wUA1KJXCq4N+LPs3GSjbTmTB5R\n+7Yuplp2vKDd0XZ5tCy7yB5UCgYEA3ppoE1DTSC1bNmSLT2jCuEOv4ic+unw1+lti\n+lWh6hvldzD8XEf9RAB1PNtvKqNQD67SoX/mczK956OVQlYYSXIXzMcoRCwBfnyxq\n+sbct/Y2TGXpXmjwt8JcKZkVJcuBPTXOl6cwA7FHAdkR0/hMJUNzS608PZCtAqj4d\n+kANtp3MCgYEA3plv6RYYDZsUdJmIcdIvr/LxWTSqYf37LQM//k+OXo+zWMxgnUNv\n+AEqDlNWP+bw3yJlU1bQS2o1Z+hKzDgqDZtaVVVDgdVsUaDSW0EsJpedWXoGqJdrw\n+yxhB7RYi1tQsXHbR1iyT5hH0ZlV7s0XIKRU4U8MP05av099+++YKhks=\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/integration/test_reload_certificate/test.py b/tests/integration/test_reload_certificate/test.py\nindex 1718e4406296..f0efc4e0bbd0 100644\n--- a/tests/integration/test_reload_certificate/test.py\n+++ b/tests/integration/test_reload_certificate/test.py\n@@ -13,6 +13,8 @@\n         \"configs/second.key\",\n         \"configs/ECcert.crt\",\n         \"configs/ECcert.key\",\n+        \"configs/WithChain.crt\",\n+        \"configs/WithChain.key\",\n         \"configs/WithPassPhrase.crt\",\n         \"configs/WithPassPhrase.key\",\n         \"configs/cert.xml\",\n@@ -158,3 +160,18 @@ def test_cert_with_pass_phrase():\n     check_certificate_switch(\n         \"first\", \"WithPassPhrase\", pass_phrase_second=pass_phrase_for_cert\n     )\n+\n+\n+def test_chain_reload():\n+    \"\"\"Check cert chain reload\"\"\"\n+    check_certificate_switch(\"first\", \"WithChain\")\n+    assert (\n+        node.exec_in_container(\n+            [\n+                \"bash\",\n+                \"-c\",\n+                \"openssl s_client -showcerts -servername localhost -connect localhost:8443 </dev/null 2>/dev/null | grep 'BEGIN CERTIFICATE' | wc -l\",\n+            ]\n+        )\n+        == \"2\\n\"\n+    )\n",
  "problem_statement": "Hot reload ssl cert with different issuer\nHi! I'm using Ubuntu 20.04.4 LTS, Clickhouse 23.1.3 revision 54461.\r\nI encountered\r\n```\r\n2023.03.15 08:54:43.412456 [ 67614 ] {} <Error> ServerErrorHandler: Code: 210. DB::NetException: SSL Exception: error:10000412:SSL routines:OPENSSL_internal:SSLV3_ALERT_BAD_CERTIFICATE, while reading from socket ([::ffff:xxx.xxx.xxx.xxx]:58520). (NETWORK_ERROR), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xddb0df5 in /usr/bin/clickhouse\r\n1. ? @ 0x132aff9e in /usr/bin/clickhouse\r\n2. DB::ReadBufferFromPocoSocket::nextImpl() @ 0x132afbbc in /usr/bin/clickhouse\r\n3. DB::HTTPServerRequest::readRequest(DB::ReadBuffer&) @ 0x14696890 in /usr/bin/clickhouse\r\n4. DB::HTTPServerRequest::HTTPServerRequest(std::__1::shared_ptr<DB::IHTTPContext>, DB::HTTPServerResponse&, Poco::Net::HTTPServerSession&) @ 0x14695f9e in /usr/bin/clickhouse\r\n5. DB::HTTPServerConnection::run() @ 0x1469486f in /usr/bin/clickhouse\r\n6. Poco::Net::TCPServerConnection::start() @ 0x1753e2f4 in /usr/bin/clickhouse\r\n7. Poco::Net::TCPServerDispatcher::run() @ 0x1753fc9b in /usr/bin/clickhouse\r\n8. Poco::PooledThread::run() @ 0x176cf0a7 in /usr/bin/clickhouse\r\n9. Poco::ThreadImpl::runnableEntry(void*) @ 0x176ccadd in /usr/bin/clickhouse\r\n10. ? @ 0x7f858ba4c609 in ?\r\n11. __clone @ 0x7f858b971133 in ?\r\n--\r\n2023.03.15 09:14:41.449816 [ 153386 ] {} <Error> ServerErrorHandler: Code: 210. DB::NetException: SSL Exception: error:10000418:SSL routines:OPENSSL_internal:TLSV1_ALERT_UNKNOWN_CA, while reading from socket ([::ffff:xxx.xxx.xxx.xxx]:50898). (NETWORK_ERROR), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xddb0df5 in /usr/bin/clickhouse\r\n1. ? @ 0x132aff9e in /usr/bin/clickhouse\r\n2. DB::ReadBufferFromPocoSocket::nextImpl() @ 0x132afbbc in /usr/bin/clickhouse\r\n3. DB::TCPHandler::runImpl() @ 0x14676238 in /usr/bin/clickhouse\r\n4. DB::TCPHandler::run() @ 0x1468b8d9 in /usr/bin/clickhouse\r\n5. Poco::Net::TCPServerConnection::start() @ 0x1753e2f4 in /usr/bin/clickhouse\r\n6. Poco::Net::TCPServerDispatcher::run() @ 0x1753fc9b in /usr/bin/clickhouse\r\n7. Poco::PooledThread::run() @ 0x176cf0a7 in /usr/bin/clickhouse\r\n8. Poco::ThreadImpl::runnableEntry(void*) @ 0x176ccadd in /usr/bin/clickhouse\r\n9. ? @ 0x7f858ba4c609 in ?\r\n10. __clone @ 0x7f858b971133 in ?\r\n (version 23.1.3.5 (official build))\r\n```\r\nwhen all 3 blocks \r\n```\r\n-----BEGIN CERTIFICATE-----\r\n...\r\n-----END CERTIFICATE-----\r\n-----BEGIN CERTIFICATE-----\r\n...\r\n-----END CERTIFICATE-----\r\n-----BEGIN CERTIFICATE-----\r\n...\r\n-----END CERTIFICATE-----\r\n```\r\ninside the file `<certificateFile>` changed (instead of signing a cert that'd expire later, we changed the issuer).  \r\nI'd need to restart clickhouse to make ports using SSL work again.  \r\n\r\nrelates to https://github.com/ClickHouse/ClickHouse/issues/15764\n",
  "hints_text": "I faced with the same problem. It's very inconvenient if you are using let'sencrypt certs",
  "created_at": "2024-03-20T19:34:11Z"
}