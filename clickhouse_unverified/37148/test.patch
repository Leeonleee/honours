diff --git a/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp b/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp
index f4854b7c77e5..a68f23a978fd 100644
--- a/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp
+++ b/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp
@@ -151,13 +151,15 @@ TEST(HierarchyDictionariesUtils, getDescendants)
         parent_to_child[1].emplace_back(3);
         parent_to_child[2].emplace_back(4);
 
+        auto parent_to_child_index = std::make_shared<DictionaryHierarchicalParentToChildIndex>(parent_to_child);
+
         PaddedPODArray<UInt64> keys = {0, 1, 2, 3, 4};
 
         {
             size_t keys_found;
             auto result = DB::detail::getDescendants(
                 keys,
-                parent_to_child,
+                *parent_to_child_index,
                 DB::detail::GetAllDescendantsStrategy(),
                 keys_found);
 
@@ -175,7 +177,7 @@ TEST(HierarchyDictionariesUtils, getDescendants)
             size_t keys_found;
             auto result = DB::detail::getDescendants(
                 keys,
-                parent_to_child,
+                *parent_to_child_index,
                 DB::detail::GetDescendantsAtSpecificLevelStrategy{1},
                 keys_found);
 
@@ -195,13 +197,15 @@ TEST(HierarchyDictionariesUtils, getDescendants)
         parent_to_child[1].emplace_back(2);
         parent_to_child[2].emplace_back(1);
 
+        auto parent_to_child_index = std::make_shared<DictionaryHierarchicalParentToChildIndex>(parent_to_child);
+
         PaddedPODArray<UInt64> keys = {1, 2, 3};
 
         {
             size_t keys_found;
             auto result = DB::detail::getDescendants(
                 keys,
-                parent_to_child,
+                *parent_to_child_index,
                 DB::detail::GetAllDescendantsStrategy(),
                 keys_found);
 
@@ -219,7 +223,7 @@ TEST(HierarchyDictionariesUtils, getDescendants)
             size_t keys_found;
             auto result = DB::detail::getDescendants(
                 keys,
-                parent_to_child,
+                *parent_to_child_index,
                 DB::detail::GetDescendantsAtSpecificLevelStrategy{1},
                 keys_found);
 
diff --git a/tests/performance/hierarchical_dictionaries.xml b/tests/performance/hierarchical_dictionaries.xml
new file mode 100644
index 000000000000..e6030886a1c1
--- /dev/null
+++ b/tests/performance/hierarchical_dictionaries.xml
@@ -0,0 +1,55 @@
+<test>
+    <substitutions>
+        <substitution>
+            <name>dictionary_layout</name>
+            <values>
+                <value>flat</value>
+                <value>hashed</value>
+                <value>hashed_array</value>
+            </values>
+        </substitution>
+
+        <substitution>
+            <name>func</name>
+            <values>
+                <value>dictGetHierarchy</value>
+                <value>dictGetDescendants</value>
+            </values>
+        </substitution>
+    </substitutions>
+
+    <create_query>
+        CREATE TABLE hierarchical_dictionary_source_table
+        (
+            id UInt64,
+            parent_id UInt64
+        ) ENGINE = Memory;
+    </create_query>
+
+    <create_query>
+        CREATE DICTIONARY hierarchical_{dictionary_layout}_dictionary
+        (
+            id UInt64,
+            parent_id UInt64 HIERARCHICAL
+        )
+        PRIMARY KEY id
+        SOURCE(CLICKHOUSE(DB 'default' TABLE 'hierarchical_dictionary_source_table'))
+        LAYOUT({dictionary_layout}())
+        LIFETIME(0);
+    </create_query>
+
+    <fill_query>
+        INSERT INTO hierarchical_dictionary_source_table
+        SELECT number, rand64() % 250000
+        FROM system.numbers
+        LIMIT 500000;
+    </fill_query>
+
+    <query>
+        SELECT {func}('hierarchical_{dictionary_layout}_dictionary', id) FROM hierarchical_{dictionary_layout}_dictionary FORMAT Null;
+    </query>
+
+    <drop_query>DROP TABLE IF EXISTS hierarchical_dictionary_source_table;</drop_query>
+    <drop_query>DROP DICTIONARY IF EXISTS hierarchical_{dictionary_layout}_dictionary;</drop_query>
+
+</test>
diff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference
index ad18e38adcca..37746ef0ced1 100644
--- a/tests/queries/0_stateless/02117_show_create_table_system.reference
+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference
@@ -161,6 +161,7 @@ CREATE TABLE system.dictionaries
     `attribute.names` Array(String),
     `attribute.types` Array(String),
     `bytes_allocated` UInt64,
+    `hierarchical_index_bytes_allocated` UInt64,
     `query_count` UInt64,
     `hit_rate` Float64,
     `found_rate` Float64,
diff --git a/tests/queries/0_stateless/02294_dictionaries_hierarchical_index.reference b/tests/queries/0_stateless/02294_dictionaries_hierarchical_index.reference
new file mode 100644
index 000000000000..8f421ba45247
--- /dev/null
+++ b/tests/queries/0_stateless/02294_dictionaries_hierarchical_index.reference
@@ -0,0 +1,6 @@
+1	0
+1
+1	0
+1
+1	0
+0
diff --git a/tests/queries/0_stateless/02294_dictionaries_hierarchical_index.sql b/tests/queries/0_stateless/02294_dictionaries_hierarchical_index.sql
new file mode 100644
index 000000000000..bc2a1020ab8c
--- /dev/null
+++ b/tests/queries/0_stateless/02294_dictionaries_hierarchical_index.sql
@@ -0,0 +1,67 @@
+DROP TABLE IF EXISTS test_hierarchy_source_table;
+CREATE TABLE test_hierarchy_source_table
+(
+    id UInt64,
+    parent_id UInt64
+) ENGINE=MergeTree ORDER BY id;
+
+INSERT INTO test_hierarchy_source_table VALUES (1, 0);
+
+DROP DICTIONARY IF EXISTS hierarchy_flat_dictionary_index;
+CREATE DICTIONARY hierarchy_flat_dictionary_index
+(
+    id UInt64,
+    parent_id UInt64 BIDIRECTIONAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_hierarchy_source_table'))
+LAYOUT(FLAT())
+LIFETIME(0); -- {serverError 36 }
+
+DROP DICTIONARY IF EXISTS hierarchy_flat_dictionary_index;
+CREATE DICTIONARY hierarchy_flat_dictionary_index
+(
+    id UInt64,
+    parent_id UInt64 HIERARCHICAL BIDIRECTIONAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_hierarchy_source_table'))
+LAYOUT(FLAT())
+LIFETIME(0);
+
+SELECT * FROM hierarchy_flat_dictionary_index;
+SELECT hierarchical_index_bytes_allocated > 0 FROM system.dictionaries WHERE name = 'hierarchy_flat_dictionary_index' AND database = currentDatabase();
+
+DROP DICTIONARY hierarchy_flat_dictionary_index;
+
+DROP DICTIONARY IF EXISTS hierarchy_hashed_dictionary_index;
+CREATE DICTIONARY hierarchy_hashed_dictionary_index
+(
+    id UInt64,
+    parent_id UInt64 HIERARCHICAL BIDIRECTIONAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_hierarchy_source_table'))
+LAYOUT(FLAT())
+LIFETIME(0);
+
+SELECT * FROM hierarchy_hashed_dictionary_index;
+SELECT hierarchical_index_bytes_allocated > 0 FROM system.dictionaries WHERE name = 'hierarchy_hashed_dictionary_index' AND database = currentDatabase();
+DROP DICTIONARY hierarchy_hashed_dictionary_index;
+
+DROP DICTIONARY IF EXISTS hierarchy_hashed_array_dictionary_index;
+CREATE DICTIONARY hierarchy_hashed_array_dictionary_index
+(
+    id UInt64,
+    parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_hierarchy_source_table'))
+LAYOUT(HASHED_ARRAY())
+LIFETIME(0);
+
+SELECT * FROM hierarchy_hashed_array_dictionary_index;
+SELECT hierarchical_index_bytes_allocated > 0 FROM system.dictionaries WHERE name = 'hierarchy_hashed_array_dictionary_index' AND database = currentDatabase();
+
+DROP DICTIONARY hierarchy_hashed_array_dictionary_index;
+DROP TABLE test_hierarchy_source_table;
diff --git a/tests/queries/0_stateless/02311_hashed_array_dictionary_hierarchical_functions.reference b/tests/queries/0_stateless/02311_hashed_array_dictionary_hierarchical_functions.reference
new file mode 100644
index 000000000000..7f4ba0901b63
--- /dev/null
+++ b/tests/queries/0_stateless/02311_hashed_array_dictionary_hierarchical_functions.reference
@@ -0,0 +1,35 @@
+Get hierarchy
+[]
+[1]
+[2,1]
+[3,1]
+[4,2,1]
+[]
+Get is in hierarchy
+0
+1
+1
+1
+1
+0
+Get children
+[1]
+[2,3]
+[4]
+[]
+[]
+[]
+Get all descendants
+[1,2,3,4]
+[2,3,4]
+[4]
+[]
+[]
+[]
+Get descendants at first level
+[1]
+[2,3]
+[4]
+[]
+[]
+[]
diff --git a/tests/queries/0_stateless/02311_hashed_array_dictionary_hierarchical_functions.sql b/tests/queries/0_stateless/02311_hashed_array_dictionary_hierarchical_functions.sql
new file mode 100644
index 000000000000..a775f0e5cbf4
--- /dev/null
+++ b/tests/queries/0_stateless/02311_hashed_array_dictionary_hierarchical_functions.sql
@@ -0,0 +1,34 @@
+DROP TABLE IF EXISTS hierarchy_source_table;
+CREATE TABLE hierarchy_source_table
+(
+    id UInt64,
+    parent_id UInt64
+) ENGINE = TinyLog;
+
+INSERT INTO hierarchy_source_table VALUES (1, 0), (2, 1), (3, 1), (4, 2);
+
+DROP DICTIONARY IF EXISTS hierarchy_hashed_array_dictionary;
+CREATE DICTIONARY hierarchy_hashed_array_dictionary
+(
+    id UInt64,
+    parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'hierarchy_source_table'))
+LAYOUT(HASHED_ARRAY())
+LIFETIME(MIN 1 MAX 1000);
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('hierarchy_hashed_array_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('hierarchy_hashed_array_dictionary', number, number) FROM system.numbers LIMIT 6;
+SELECT 'Get children';
+SELECT dictGetChildren('hierarchy_hashed_array_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get all descendants';
+SELECT dictGetDescendants('hierarchy_hashed_array_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get descendants at first level';
+SELECT dictGetDescendants('hierarchy_hashed_array_dictionary', number, 1) FROM system.numbers LIMIT 6;
+
+DROP DICTIONARY hierarchy_hashed_array_dictionary;
+
+DROP TABLE hierarchy_source_table;
