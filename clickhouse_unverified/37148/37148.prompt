You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
dictGetChildren / dictGetDescendants are very slow and consume high amount of memory
**Describe what's wrong**

dictGetChildren / dictGetDescendants functions implemented in #22096 operates extremely slow in most of dictionaries of relatively large size (>100k), and consume high amount of memory. 

**Does it reproduce on recent release?**

Yes. 21.11.5.33

**How to reproduce**

Dictionary creation
```

drop table if exists default.hierdictsrc;

create table default.hierdictsrc (parent UInt64, child UInt64) Engine=MergeTree ORDER BY tuple();

insert into default.hierdictsrc 
with 80 as breadth
select parent, arrayJoin(child)+parent*breadth as child from (
		select arrayJoin(range(0,breadth)) as parent, range(0,breadth) as child
)
UNION ALL
with 80 as breadth
select parent, arrayJoin(child)+parent*breadth as child from (
		select arrayJoin(range(breadth,breadth*breadth)) as parent, range(0,breadth) as child
)
UNION ALL
with 80 as breadth
select parent, arrayJoin(child)+parent*breadth as child from (
		select arrayJoin(range(breadth*breadth,breadth*breadth*breadth)) as parent, range(0,breadth) as child
)
;

select count(*) from default.hierdictsrc ;
drop dictionary if exists default.hierdict;

CREATE DICTIONARY default.hierdict
(
    `child` UInt64,
    `parent` UInt64 HIERARCHICAL
)
PRIMARY KEY child
SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' DB 'default' TABLE 'hierdictsrc'))
LIFETIME(MIN 300 MAX 86400)
LAYOUT(HASHED());

system reload dictionary default.hierdict;
select * from system.dictionaries d where database='default';

```

Queries to check.
Simple query to get direct children of a single element consumes 2GB RAM and 10 sec. 
 
```
SELECT dictGetDescendants('default.hierdict', toUInt64(1))
FORMAT `Null`

Query id: 6e982f9a-9665-4caf-8f6e-0576d9a752d9

[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:29:34.764536 [ 11723 ] {6e982f9a-9665-4caf-8f6e-0576d9a752d9} <Debug> executeQuery: (from [::1]:59362) SELECT dictGetDescendants('default.hierdict', toUInt64(1)) FORMAT `Null`;
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:29:34.764837 [ 11723 ] {6e982f9a-9665-4caf-8f6e-0576d9a752d9} <Trace> ContextAccess (default): Access granted: dictGet ON default.hierdict
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:29:35.588383 [ 11723 ] {6e982f9a-9665-4caf-8f6e-0576d9a752d9} <Debug> MemoryTracker: Current memory usage (for query): 1.00 GiB.
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:29:44.312905 [ 11723 ] {6e982f9a-9665-4caf-8f6e-0576d9a752d9} <Trace> ContextAccess (default): Access granted: SELECT(dummy) ON system.one
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:29:44.326528 [ 11723 ] {6e982f9a-9665-4caf-8f6e-0576d9a752d9} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:29:44.651035 [ 11723 ] {6e982f9a-9665-4caf-8f6e-0576d9a752d9} <Information> executeQuery: Read 1 rows, 1.00 B in 9.886447463 sec., 0 rows/sec., 0.10 B/sec.
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:29:44.651093 [ 11723 ] {6e982f9a-9665-4caf-8f6e-0576d9a752d9} <Debug> MemoryTracker: Peak memory usage (for query): 1.99 GiB.
Ok.

0 rows in set. Elapsed: 9.887 sec.

```

It gets much worse if there are more levels in the array. It goes out of memory, moreover this query is not possible to cancel. 
Similar issue with dictGetChildren. 


For comparison - Reverse query using complex transforms but using dictGetHierarchy uses 140MB and 2.5 sec: 
```
SELECT DISTINCT arrayJoin(hier) AS descendants
FROM
(
    SELECT dictGetHierarchy('default.hierdict', toUInt64(child)) AS hier
    FROM default.hierdictsrc
    WHERE (lvl = 3) AND has(hier, 1)
)
WHERE descendants != 1
FORMAT `Null`

Query id: 2b787507-11b6-4066-82eb-6ea6e984c842

[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.007316 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Debug> executeQuery: (from [::1]:59362) select distinct arrayJoin(hier) descendants from ( select dictGetHierarchy('default.hierdict',toUInt64(child)) hier from default.hierdictsrc where lvl=3 and has(hier,1) ) where descendants!=1 Format Null;
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.007838 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition "lvl = 3" moved to PREWHERE
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.008073 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Trace> ContextAccess (default): Access granted: SELECT(child, lvl) ON default.hierdictsrc
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.008312 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition "lvl = 3" moved to PREWHERE
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.008478 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Trace> ContextAccess (default): Access granted: SELECT(child, lvl) ON default.hierdictsrc
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.008648 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.008691 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.008950 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Debug> default.hierdictsrc (SelectExecutor): Key condition: unknown, unknown, and, unknown, and
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.009189 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Debug> default.hierdictsrc (SelectExecutor): Selected 2/2 parts by partition key, 2 parts by primary key, 5001/5001 marks by primary key, 5001 marks to read from 2 ranges
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.009267 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Debug> default.hierdictsrc (SelectExecutor): Reading approx. 40960000 rows with 8 streams
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:38.011944 [ 11877 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Trace> ContextAccess (default): Access granted: dictGet ON default.hierdict
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:40.179778 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Information> executeQuery: Read 40960000 rows, 347.66 MiB in 2.172412619 sec., 18854613 rows/sec., 160.03 MiB/sec.
[V30LC-INCLKHSE5.pw.local] 2021.12.09 20:27:40.179832 [ 11723 ] {2b787507-11b6-4066-82eb-6ea6e984c842} <Debug> MemoryTracker: Peak memory usage (for query): 127.83 MiB.
Ok.

0 rows in set. Elapsed: 2.173 sec. Processed 40.96 million rows, 364.54 MB (18.85 million rows/s., 167.73 MB/s.)
```


**Expected behavior**

Performance was expected not to be degrading as it grows. 



**Additional context**

There is a also a regression about sparse hashed layout with hierarchical dictionary that may be related to this implementation. Separate ticket was opened: #32480
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
