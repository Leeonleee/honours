{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11756,
  "instance_id": "ClickHouse__ClickHouse-11756",
  "issue_numbers": [
    "11741"
  ],
  "base_commit": "6af36cb703a9ad23b4d152c2fd5febfcf141ad48",
  "patch": "diff --git a/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.cpp b/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.cpp\nindex 665c2febd9df..37109e444e37 100644\n--- a/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.cpp\n+++ b/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.cpp\n@@ -41,29 +41,31 @@ bool onlyConstsInside(const ASTFunction * func_node)\n bool inappropriateNameInside(const ASTFunction * func_node, const char * inter_func_name)\n {\n     return (func_node->arguments->children[0]->as<ASTFunction>() &&\n-           inter_func_name != func_node->arguments->children[0]->as<ASTFunction>()->name) ||\n+           strcmp(inter_func_name, func_node->arguments->children[0]->as<ASTFunction>()->name.c_str()) != 0) ||\n            (func_node->arguments->children.size() == 2 &&\n            func_node->arguments->children[1]->as<ASTFunction>() &&\n-           inter_func_name != func_node->arguments->children[1]->as<ASTFunction>()->name);\n+           strcmp(inter_func_name, func_node->arguments->children[1]->as<ASTFunction>()->name.c_str()) != 0);\n }\n \n bool isInappropriate(const ASTPtr & node, const char * inter_func_name)\n {\n-    return !node->as<ASTFunction>() || inter_func_name != node->as<ASTFunction>()->name;\n+    return !node->as<ASTFunction>() || (strcmp(inter_func_name, node->as<ASTFunction>()->name.c_str()) != 0);\n }\n \n ASTFunction * getInternalFunction(const ASTFunction * f_n)\n {\n     const auto * function_args = f_n->arguments->as<ASTExpressionList>();\n     if (!function_args || function_args->children.size() != 1)\n-        throw Exception(\"Wrong number of arguments for function\" + f_n->name + \"(\" + toString(function_args->children.size()) + \" instead of 1)\",\n+        throw Exception(\"Wrong number of arguments for function \" + f_n->name + \"(\" + toString(function_args->children.size()) + \" instead of 1)\",\n                         ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n \n     return f_n->arguments->children[0]->as<ASTFunction>();\n }\n \n-ASTFunction * treeFiller(ASTFunction * old_tree, const ASTs & nodes_array, size_t size, const char * name)\n+ASTFunction * treeFiller(ASTFunction * old_tree, const ASTs & nodes_array, size_t size, const char * name, bool flag)\n {\n+    if (flag)\n+        --size;\n     for (size_t i = 0; i < size; ++i)\n     {\n         old_tree->arguments->children = {};\n@@ -94,19 +96,23 @@ std::pair<ASTs, ASTs> tryGetConst(const char * name, const ASTs & arguments)\n             not_const.push_back(arg);\n     }\n \n-    if ((name == plus || name == mul) && const_num.size() + not_const.size() != 2)\n-    {\n+    if ((strcmp(name, plus) == 0 || strcmp(name, mul) == 0) && const_num.size() + not_const.size() != 2)\n         throw Exception(\"Wrong number of arguments for function 'plus' or 'multiply' (\" + toString(const_num.size() + not_const.size()) + \" instead of 2)\",\n                         ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n-    }\n \n     return {const_num, not_const};\n }\n \n std::pair<ASTs, ASTs> findAllConsts(const ASTFunction * func_node, const char * inter_func_name)\n {\n-    if (!func_node->arguments)\n-        return {};\n+    if (func_node->arguments->children.empty())\n+    {\n+        if (strcmp(func_node->name.c_str(), plus) == 0 || strcmp(func_node->name.c_str(), mul) == 0)\n+            throw Exception(\"Wrong number of arguments for function\" + func_node->name + \"(0 instead of 2)\",\n+                        ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n+        else\n+            return {};\n+    }\n \n     if (onlyConstsInside(func_node))\n         return tryGetConst(func_node->name.c_str(), func_node->arguments->children);\n@@ -139,7 +145,7 @@ std::pair<ASTs, ASTs> findAllConsts(const ASTFunction * func_node, const char *\n     std::pair<ASTs, ASTs> fl = tryGetConst(func_node->name.c_str(), func_node->arguments->children);\n     ASTs first_lvl_consts = fl.first;\n     ASTs first_lvl_not_consts = fl.second;\n-    if (!first_lvl_not_consts[0]->as<ASTFunction>())\n+    if (first_lvl_not_consts.empty() || !first_lvl_not_consts[0]->as<ASTFunction>())\n         return {first_lvl_consts, first_lvl_not_consts};\n \n     std::pair<ASTs, ASTs> ans = findAllConsts(first_lvl_not_consts[0]->as<ASTFunction>(), inter_func_name);\n@@ -176,17 +182,21 @@ void buildTree(ASTFunction * cur_node, const char * func_name, const char * intr\n     ASTs cons_val = tree_comp.first;\n     ASTs non_cons = tree_comp.second;\n \n+    bool not_const_empty = non_cons.empty();\n+\n     cur_node->name = intro_func;\n-    cur_node = treeFiller(cur_node, cons_val, cons_val.size(), intro_func);\n+    cur_node = treeFiller(cur_node, cons_val, cons_val.size(), intro_func, not_const_empty);\n     cur_node->name = func_name;\n \n-    if (non_cons.size() == 1)\n+    if (non_cons.empty())\n+        cur_node->arguments->children.push_back(cons_val[cons_val.size() - 1]);\n+    else if (non_cons.size() == 1)\n         cur_node->arguments->children.push_back(non_cons[0]);\n     else\n     {\n         cur_node->arguments->children.push_back(makeASTFunction(intro_func));\n         cur_node = cur_node->arguments->children[0]->as<ASTFunction>();\n-        cur_node = treeFiller(cur_node, non_cons, non_cons.size() - 2, intro_func);\n+        cur_node = treeFiller(cur_node, non_cons, non_cons.size() - 2, intro_func, not_const_empty);\n         cur_node->arguments->children = {non_cons[non_cons.size() - 2], non_cons[non_cons.size() - 1]};\n     }\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01323_bad_arg_in_arithmetic_operations.reference b/tests/queries/0_stateless/01323_bad_arg_in_arithmetic_operations.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01323_bad_arg_in_arithmetic_operations.sql b/tests/queries/0_stateless/01323_bad_arg_in_arithmetic_operations.sql\nnew file mode 100644\nindex 000000000000..1c4bfc8f091a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01323_bad_arg_in_arithmetic_operations.sql\n@@ -0,0 +1,15 @@\n+SET optimize_arithmetic_operations_in_aggregate_functions = 1;\n+\n+SELECT max(multiply(1));  -- { serverError 42 }\n+SELECT min(multiply(2));-- { serverError 42 }\n+SELECT sum(multiply(3));  -- { serverError 42 }\n+\n+SELECT max(plus(1));  -- { serverError 42 }\n+SELECT min(plus(2)); -- { serverError 42 }\n+SELECT sum(plus(3));  -- { serverError 42 }\n+\n+SELECT max(multiply());  -- { serverError 42 }\n+SELECT min(multiply(1, 2 ,3)); -- { serverError 42 }\n+SELECT sum(plus() + multiply());  -- { serverError 42 }\n+\n+SELECT sum(plus(multiply(42, 3), multiply(42)));  -- { serverError 42 }\n",
  "problem_statement": "Received signal Segmentation fault (11)\n**How to reproduce**\r\n```SELECT min(multiply(1))```\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2020.06.17 21:55:03.851021 [ 2942 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.06.17 21:55:03.851053 [ 2942 ] {} <Fatal> BaseDaemon: (version 20.5.1.1) (from thread 2869) (query_id: 571af238-2526-4953-92d8-de9ac37472df) Received signal Segmentation fault (11).\r\n2020.06.17 21:55:03.851068 [ 2942 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2020.06.17 21:55:03.851085 [ 2942 ] {} <Fatal> BaseDaemon: Stack trace: 0xdc50701 0xdc50732 0xdc52d70 0xdc38572 0xdc385aa 0xdc385aa 0xdc3172f 0xda25221 0xda22516 0xda210ab 0xdb84595 0xd9cd15a 0xd9cc985 0xdc6db90 0xdc6d127 0xe0b79f8 0xe0c05f7 0xfe79037 0xfe794d8 0xff5a0a7 0xff57f36 0x7f53857676db 0x7f538508488f\r\n2020.06.17 21:55:03.944085 [ 2942 ] {} <Fatal> BaseDaemon: 3. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/memory:3826: DB::findAllConsts(DB::ASTFunction const*, char const*) @ 0xdc50701 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.944710 [ 2942 ] {} <Fatal> BaseDaemon: 4. /home/ap11/ClickHouse/build_clang/../src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.cpp:0: DB::findAllConsts(DB::ASTFunction const*, char const*) @ 0xdc50732 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.945346 [ 2942 ] {} <Fatal> BaseDaemon: 5. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/vector:662: DB::minOptimize(DB::ASTFunction*) @ 0xdc52d70 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.947106 [ 2942 ] {} <Fatal> BaseDaemon: 6. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/memory:3826: DB::InDepthNodeVisitor<DB::ArithmeticOperationsInAgrFuncMatcher, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0xdc38572 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.947994 [ 2942 ] {} <Fatal> BaseDaemon: 7. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/iterator:1480: DB::InDepthNodeVisitor<DB::ArithmeticOperationsInAgrFuncMatcher, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0xdc385aa in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.948833 [ 2942 ] {} <Fatal> BaseDaemon: 8. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/iterator:1480: DB::InDepthNodeVisitor<DB::ArithmeticOperationsInAgrFuncMatcher, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0xdc385aa in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.949643 [ 2942 ] {} <Fatal> BaseDaemon: 9. /home/ap11/ClickHouse/build_clang/../src/Interpreters/SyntaxAnalyzer.cpp:0: DB::SyntaxAnalyzer::analyzeSelect(std::__1::shared_ptr<DB::IAST>&, DB::SyntaxAnalyzerResult&&, DB::SelectQueryOptions const&, std::__1::vector<DB::TableWithColumnNamesAndTypes, std::__1::allocator<DB::TableWithColumnNamesAndTypes> > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::TableJoin>) const @ 0xdc3172f in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.951508 [ 2942 ] {} <Fatal> BaseDaemon: 10. /home/ap11/ClickHouse/build_clang/../src/Interpreters/InterpreterSelectQuery.cpp:308: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)::$_2::operator()(bool) const @ 0xda25221 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.952476 [ 2942 ] {} <Fatal> BaseDaemon: 11. /home/ap11/ClickHouse/build_clang/../src/Interpreters/InterpreterSelectQuery.cpp:400: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xda22516 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.953048 [ 2942 ] {} <Fatal> BaseDaemon: 12. /home/ap11/ClickHouse/build_clang/../src/Interpreters/InterpreterSelectQuery.cpp:144: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xda210ab in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.954487 [ 2942 ] {} <Fatal> BaseDaemon: 13. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/memory:2204: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xdb84595 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.956396 [ 2942 ] {} <Fatal> BaseDaemon: 14. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/memory:2204: std::__1::__unique_if<DB::InterpreterSelectWithUnionQuery>::__unique_single std::__1::make_unique<DB::InterpreterSelectWithUnionQuery, std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions>(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions&&) @ 0xd9cd15a in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.956943 [ 2942 ] {} <Fatal> BaseDaemon: 15. /home/ap11/ClickHouse/build_clang/../src/Interpreters/InterpreterFactory.cpp:0: DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum) @ 0xd9cc985 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.959056 [ 2942 ] {} <Fatal> BaseDaemon: 16. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/memory:3913: DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) @ 0xdc6db90 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.960301 [ 2942 ] {} <Fatal> BaseDaemon: 17. /home/ap11/ClickHouse/build_clang/../src/Interpreters/executeQuery.cpp:618: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xdc6d127 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.962689 [ 2942 ] {} <Fatal> BaseDaemon: 18. /home/ap11/ClickHouse/build_clang/../src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0xe0b79f8 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.963903 [ 2942 ] {} <Fatal> BaseDaemon: 19. /home/ap11/ClickHouse/build_clang/../src/Server/TCPHandler.cpp:0: DB::TCPHandler::run() @ 0xe0c05f7 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.966140 [ 2942 ] {} <Fatal> BaseDaemon: 20. /home/ap11/ClickHouse/build_clang/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0xfe79037 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.967333 [ 2942 ] {} <Fatal> BaseDaemon: 21. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/atomic:1036: Poco::Net::TCPServerDispatcher::run() @ 0xfe794d8 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.969424 [ 2942 ] {} <Fatal> BaseDaemon: 22. /home/ap11/ClickHouse/build_clang/../contrib/poco/Foundation/src/ThreadPool.cpp:213: Poco::PooledThread::run() @ 0xff5a0a7 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.970822 [ 2942 ] {} <Fatal> BaseDaemon: 23. /home/ap11/ClickHouse/build_clang/../contrib/poco/Foundation/include/Poco/SharedPtr.h:156: Poco::ThreadImpl::runnableEntry(void*) @ 0xff57f36 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2020.06.17 21:55:03.970863 [ 2942 ] {} <Fatal> BaseDaemon: 24. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n2020.06.17 21:55:03.972804 [ 2942 ] {} <Fatal> BaseDaemon: 25. /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __clone @ 0x12188f in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\nSegmentation fault (core dumped)\r\n```\n",
  "hints_text": "",
  "created_at": "2020-06-18T12:04:30Z"
}