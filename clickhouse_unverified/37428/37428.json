{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37428,
  "instance_id": "ClickHouse__ClickHouse-37428",
  "issue_numbers": [
    "37420"
  ],
  "base_commit": "77c06447d56fbcb9483047435dc0e03d652f409e",
  "patch": "diff --git a/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp b/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp\nindex d3de2fbf4941..91bebd0daa4a 100644\n--- a/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp\n@@ -18,6 +18,7 @@ BinaryRowInputFormat::BinaryRowInputFormat(ReadBuffer & in_, Block header, Param\n         header,\n         in_,\n         params_,\n+        true,\n         with_names_,\n         with_types_,\n         format_settings_,\ndiff --git a/src/Processors/Formats/Impl/CSVRowInputFormat.cpp b/src/Processors/Formats/Impl/CSVRowInputFormat.cpp\nindex bddd4203a5de..8f5591e6aa85 100644\n--- a/src/Processors/Formats/Impl/CSVRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/CSVRowInputFormat.cpp\n@@ -41,7 +41,15 @@ CSVRowInputFormat::CSVRowInputFormat(\n     bool with_types_,\n     const FormatSettings & format_settings_,\n     std::unique_ptr<FormatWithNamesAndTypesReader> format_reader_)\n-    : RowInputFormatWithNamesAndTypes(header_, in_, params_, with_names_, with_types_, format_settings_, std::move(format_reader_))\n+    : RowInputFormatWithNamesAndTypes(\n+        header_,\n+        in_,\n+        params_,\n+        false,\n+        with_names_,\n+        with_types_,\n+        format_settings_,\n+        std::move(format_reader_))\n {\n     const String bad_delimiters = \" \\t\\\"'.UL\";\n     if (bad_delimiters.find(format_settings.csv.delimiter) != String::npos)\ndiff --git a/src/Processors/Formats/Impl/CustomSeparatedRowInputFormat.cpp b/src/Processors/Formats/Impl/CustomSeparatedRowInputFormat.cpp\nindex 56a639a0e30b..61488a94ccda 100644\n--- a/src/Processors/Formats/Impl/CustomSeparatedRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/CustomSeparatedRowInputFormat.cpp\n@@ -47,6 +47,7 @@ CustomSeparatedRowInputFormat::CustomSeparatedRowInputFormat(\n         header_,\n         *buf_,\n         params_,\n+        false,\n         with_names_,\n         with_types_,\n         format_settings_,\ndiff --git a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp\nindex 0b7cc6669beb..1bc5223a7126 100644\n--- a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp\n@@ -28,6 +28,7 @@ JSONCompactEachRowRowInputFormat::JSONCompactEachRowRowInputFormat(\n         header_,\n         in_,\n         params_,\n+        false,\n         with_names_,\n         with_types_,\n         format_settings_,\ndiff --git a/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp b/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp\nindex 877ba224fd5a..a50302697e63 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp\n@@ -40,7 +40,15 @@ TabSeparatedRowInputFormat::TabSeparatedRowInputFormat(\n     bool with_types_,\n     bool is_raw_,\n     const FormatSettings & format_settings_)\n-    : RowInputFormatWithNamesAndTypes(header_, in_, params_, with_names_, with_types_, format_settings_, std::make_unique<TabSeparatedFormatReader>(in_, format_settings_, is_raw_))\n+    : RowInputFormatWithNamesAndTypes(\n+        header_,\n+        in_,\n+        params_,\n+        false,\n+        with_names_,\n+        with_types_,\n+        format_settings_,\n+        std::make_unique<TabSeparatedFormatReader>(in_, format_settings_, is_raw_))\n {\n }\n \ndiff --git a/src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp b/src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp\nindex 0a20ac9eefd2..a3dcbe914bb0 100644\n--- a/src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp\n+++ b/src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp\n@@ -17,6 +17,7 @@ RowInputFormatWithNamesAndTypes::RowInputFormatWithNamesAndTypes(\n     const Block & header_,\n     ReadBuffer & in_,\n     const Params & params_,\n+    bool is_binary_,\n     bool with_names_,\n     bool with_types_,\n     const FormatSettings & format_settings_,\n@@ -24,6 +25,7 @@ RowInputFormatWithNamesAndTypes::RowInputFormatWithNamesAndTypes(\n     : RowInputFormatWithDiagnosticInfo(header_, in_, params_)\n     , format_settings(format_settings_)\n     , data_types(header_.getDataTypes())\n+    , is_binary(is_binary_)\n     , with_names(with_names_)\n     , with_types(with_types_)\n     , format_reader(std::move(format_reader_))\n@@ -38,10 +40,11 @@ void RowInputFormatWithNamesAndTypes::readPrefix()\n     if (getCurrentUnitNumber() != 0)\n         return;\n \n-    if (with_names || with_types || data_types.at(0)->textCanContainOnlyValidUTF8())\n+    /// Search and remove BOM only in textual formats (CSV, TSV etc), not in binary ones (RowBinary*).\n+    /// Also, we assume that column name or type cannot contain BOM, so, if format has header,\n+    /// then BOM at beginning of stream cannot be confused with name or type of field, and it is safe to skip it.\n+    if (!is_binary && (with_names || with_types || data_types.at(0)->textCanContainOnlyValidUTF8()))\n     {\n-        /// We assume that column name or type cannot contain BOM, so, if format has header,\n-        /// then BOM at beginning of stream cannot be confused with name or type of field, and it is safe to skip it.\n         skipBOMIfExists(*in);\n     }\n \ndiff --git a/src/Processors/Formats/RowInputFormatWithNamesAndTypes.h b/src/Processors/Formats/RowInputFormatWithNamesAndTypes.h\nindex 72fbc444dfc1..9fc8b2083df6 100644\n--- a/src/Processors/Formats/RowInputFormatWithNamesAndTypes.h\n+++ b/src/Processors/Formats/RowInputFormatWithNamesAndTypes.h\n@@ -24,13 +24,15 @@ class FormatWithNamesAndTypesReader;\n class RowInputFormatWithNamesAndTypes : public RowInputFormatWithDiagnosticInfo\n {\n protected:\n-    /** with_names - in the first line the header with column names\n+    /** is_binary - it is a binary format (e.g. don't search for BOM)\n+      * with_names - in the first line the header with column names\n       * with_types - in the second line the header with column names\n       */\n     RowInputFormatWithNamesAndTypes(\n         const Block & header_,\n         ReadBuffer & in_,\n         const Params & params_,\n+        bool is_binary_,\n         bool with_names_,\n         bool with_types_,\n         const FormatSettings & format_settings_,\n@@ -51,6 +53,7 @@ class RowInputFormatWithNamesAndTypes : public RowInputFormatWithDiagnosticInfo\n     bool parseRowAndPrintDiagnosticInfo(MutableColumns & columns, WriteBuffer & out) override;\n     void tryDeserializeField(const DataTypePtr & type, IColumn & column, size_t file_column) override;\n \n+    bool is_binary;\n     bool with_names;\n     bool with_types;\n     std::unique_ptr<FormatWithNamesAndTypesReader> format_reader;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02306_rowbinary_has_no_bom.reference b/tests/queries/0_stateless/02306_rowbinary_has_no_bom.reference\nnew file mode 100644\nindex 000000000000..2e006a3fdd79\n--- /dev/null\n+++ b/tests/queries/0_stateless/02306_rowbinary_has_no_bom.reference\n@@ -0,0 +1,1 @@\n+1651760768976141295\ndiff --git a/tests/queries/0_stateless/02306_rowbinary_has_no_bom.sh b/tests/queries/0_stateless/02306_rowbinary_has_no_bom.sh\nnew file mode 100755\nindex 000000000000..b784d7c39846\n--- /dev/null\n+++ b/tests/queries/0_stateless/02306_rowbinary_has_no_bom.sh\n@@ -0,0 +1,10 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+echo \"DROP TABLE IF EXISTS table_with_uint64\" | ${CLICKHOUSE_CURL} -d@- -sS \"${CLICKHOUSE_URL}\"\n+echo \"CREATE TABLE table_with_uint64(no UInt64) ENGINE = MergeTree ORDER BY no\" | ${CLICKHOUSE_CURL} -d@- -sS \"${CLICKHOUSE_URL}\"\n+echo -en '\\xef\\xbb\\xbf\\x00\\xab\\x3b\\xec\\x16' | ${CLICKHOUSE_CURL} --data-binary @- \"${CLICKHOUSE_URL}&query=INSERT+INTO+table_with_uint64(no)+FORMAT+RowBinary\"\n+echo \"SELECT * FROM table_with_uint64\" | ${CLICKHOUSE_CURL} -d@- -sS \"${CLICKHOUSE_URL}\"\n",
  "problem_statement": "HTTP body in RowBinary format started with BOM  (0xEFBBBF) leads to `Cannot read all data`\n> You have to provide the following information whenever possible.\r\n\r\nBatches started with `0xEFBBBF` cannot be inserted in the `RowBinary` format using HTTP.\r\n\r\n> A clear and concise description of what works not as it is supposed to.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nOn the latest available on the docker hub, `22.1.3 revision 54455`.\r\n\r\n**How to reproduce**\r\n\r\n1. Create a table:\r\n```sql\r\nCREATE TABLE some(no UInt64) ENGINE = MergeTree ORDER BY no;\r\n```\r\n\r\n2. Write `1653178571234567890`:\r\n```\r\necho -en '\\xd2\\x66\\xb9\\xd0\\x26\\x45\\xf1\\x16' | curl -v --data-binary @- 'http://127.0.0.1:8123/?query=INSERT%20INTO%20some(no)%20FORMAT%20RowBinary'\r\n```\r\n```\r\n*   Trying 127.0.0.1:8123...\r\n* Connected to 127.0.0.1 (127.0.0.1) port 8123 (#0)\r\n> POST /?query=INSERT%20INTO%20some(no)%20FORMAT%20RowBinary HTTP/1.1\r\n> Host: 127.0.0.1:8123\r\n> User-Agent: curl/7.83.0\r\n> Accept: */*\r\n> Content-Length: 8\r\n> Content-Type: application/x-www-form-urlencoded\r\n>\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 200 OK\r\n< Date: Sun, 22 May 2022 00:53:08 GMT\r\n< Connection: Keep-Alive\r\n< Content-Type: text/plain; charset=UTF-8\r\n< X-ClickHouse-Server-Display-Name: 4f17bcf5935b\r\n< Transfer-Encoding: chunked\r\n< Keep-Alive: timeout=3\r\n< X-ClickHouse-Summary: {\"read_rows\":\"0\",\"read_bytes\":\"0\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"0\"}\r\n<\r\n* Connection #0 to host 127.0.0.1 left intact\r\n```\r\n\r\nWorks fine.\r\n\r\n3. Write `1651760768976141295` (actually, any number started with `0xEFBBBF`):\r\n```\r\necho -en '\\xef\\xbb\\xbf\\x00\\xab\\x3b\\xec\\x16' | curl -v --data-binary @- 'http://127.0.0.1:8123/?query=INSERT%20INTO%20some(no)%20FORMAT%20RowBinary'\r\n```\r\n```\r\n*   Trying 127.0.0.1:8123...\r\n* Connected to 127.0.0.1 (127.0.0.1) port 8123 (#0)\r\n> POST /?query=INSERT%20INTO%20some(no)%20FORMAT%20RowBinary HTTP/1.1\r\n> Host: 127.0.0.1:8123\r\n> User-Agent: curl/7.83.0\r\n> Accept: */*\r\n> Content-Length: 8\r\n> Content-Type: application/x-www-form-urlencoded\r\n>\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 500 Internal Server Error\r\n< Date: Sun, 22 May 2022 00:54:26 GMT\r\n< Connection: Keep-Alive\r\n< Content-Type: text/plain; charset=UTF-8\r\n< X-ClickHouse-Server-Display-Name: 4f17bcf5935b\r\n< Transfer-Encoding: chunked\r\n< X-ClickHouse-Exception-Code: 33\r\n< Keep-Alive: timeout=3\r\n< X-ClickHouse-Summary: {\"read_rows\":\"0\",\"read_bytes\":\"0\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"0\"}\r\n<\r\nCode: 33. DB::Exception: Cannot read all data. Bytes read: 5. Bytes expected: 8.: (at row 1)\r\n: While executing BinaryRowInputFormat. (CANNOT_READ_ALL_DATA) (version 22.1.3.7 (official build))\r\n* Connection #0 to host 127.0.0.1 left intact\r\n```\n",
  "hints_text": "",
  "created_at": "2022-05-22T12:34:30Z",
  "modified_files": [
    "src/Processors/Formats/Impl/BinaryRowInputFormat.cpp",
    "src/Processors/Formats/Impl/CSVRowInputFormat.cpp",
    "src/Processors/Formats/Impl/CustomSeparatedRowInputFormat.cpp",
    "src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp",
    "src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp",
    "src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp",
    "src/Processors/Formats/RowInputFormatWithNamesAndTypes.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02306_rowbinary_has_no_bom.reference",
    "b/tests/queries/0_stateless/02306_rowbinary_has_no_bom.sh"
  ]
}