{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 20183,
  "instance_id": "ClickHouse__ClickHouse-20183",
  "issue_numbers": [
    "20092"
  ],
  "base_commit": "e814db68360db68831ca631408d551cf00bfe2c5",
  "patch": "diff --git a/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.cpp b/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.cpp\nindex d544ceb81a2c..c7d32ba27212 100644\n--- a/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.cpp\n+++ b/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.cpp\n@@ -89,11 +89,11 @@ const String & changeNameIfNeeded(const String & func_name, const String & child\n \n ASTPtr tryExchangeFunctions(const ASTFunction & func)\n {\n-    static const std::unordered_map<String, std::unordered_set<String>> supported = {\n-        { \"sum\", { \"multiply\", \"divide\" } },\n-        { \"min\", { \"multiply\", \"divide\", \"plus\", \"minus\" } },\n-        { \"max\", { \"multiply\", \"divide\", \"plus\", \"minus\" } }\n-    };\n+    static const std::unordered_map<String, std::unordered_set<String>> supported\n+        = {{\"sum\", {\"multiply\", \"divide\"}},\n+           {\"min\", {\"multiply\", \"divide\", \"plus\", \"minus\"}},\n+           {\"max\", {\"multiply\", \"divide\", \"plus\", \"minus\"}},\n+           {\"avg\", {\"multiply\", \"divide\", \"plus\", \"minus\"}}};\n \n     const ASTFunction * child_func = getInternalFunction(func);\n     if (!child_func || !child_func->arguments || child_func->arguments->children.size() != 2 ||\ndiff --git a/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.h b/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.h\nindex 5d445335045b..81d936aeba50 100644\n--- a/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.h\n+++ b/src/Interpreters/ArithmeticOperationsInAgrFuncOptimize.h\n@@ -11,7 +11,7 @@ class ASTFunction;\n /// Extract constant arguments out of aggregate functions from child functions\n /// 'sum(a * 2)' -> 'sum(a) * 2'\n /// Rewrites:   sum([multiply|divide]) -> [multiply|divide](sum)\n-///             [min|max]([multiply|divide|plus|minus]) -> [multiply|divide|plus|minus]([min|max])\n+///             [min|max|avg]([multiply|divide|plus|minus]) -> [multiply|divide|plus|minus]([min|max|avg])\n /// TODO: groupBitAnd, groupBitOr, groupBitXor\n /// TODO: better constant detection: f(const) is not detected as const.\n /// TODO: 'f((2 * n) * n)' -> '2 * f(n * n)'\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01702_rewrite_avg_for_algebraic_optimization.reference b/tests/queries/0_stateless/01702_rewrite_avg_for_algebraic_optimization.reference\nnew file mode 100644\nindex 000000000000..2bdcedba90ed\n--- /dev/null\n+++ b/tests/queries/0_stateless/01702_rewrite_avg_for_algebraic_optimization.reference\n@@ -0,0 +1,23 @@\n+SELECT avg(number + 2) FROM numbers(10)\n+value: \t6.5\n+EXPLAIN syntax:\n+SELECT avg(number) + 2\n+FROM numbers(10)\n+\n+SELECT avg(number - 2) FROM numbers(10)\n+value: \t2.5\n+EXPLAIN syntax:\n+SELECT avg(number) - 2\n+FROM numbers(10)\n+\n+SELECT avg(number * 2) FROM numbers(10)\n+value: \t9\n+EXPLAIN syntax:\n+SELECT avg(number) * 2\n+FROM numbers(10)\n+\n+SELECT avg(number / 2) FROM numbers(10)\n+value: \t2.25\n+EXPLAIN syntax:\n+SELECT avg(number) / 2\n+FROM numbers(10)\ndiff --git a/tests/queries/0_stateless/01702_rewrite_avg_for_algebraic_optimization.sql b/tests/queries/0_stateless/01702_rewrite_avg_for_algebraic_optimization.sql\nnew file mode 100644\nindex 000000000000..8fa4dd0ae47e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01702_rewrite_avg_for_algebraic_optimization.sql\n@@ -0,0 +1,22 @@\n+SELECT 'SELECT avg(number + 2) FROM numbers(10)';\n+SELECT 'value: ', avg(number + 2) FROM numbers(10);\n+SELECT 'EXPLAIN syntax:';\n+EXPLAIN SYNTAX SELECT avg(number + 2) FROM numbers(10);\n+\n+SELECT '';\n+SELECT 'SELECT avg(number - 2) FROM numbers(10)';\n+SELECT 'value: ', avg(number - 2) FROM numbers(10);\n+SELECT 'EXPLAIN syntax:';\n+EXPLAIN SYNTAX SELECT avg(number - 2) FROM numbers(10);\n+\n+SELECT '';\n+SELECT 'SELECT avg(number * 2) FROM numbers(10)';\n+SELECT 'value: ', avg(number * 2) FROM numbers(10);\n+SELECT 'EXPLAIN syntax:';\n+EXPLAIN SYNTAX SELECT avg(number * 2) FROM numbers(10);\n+\n+SELECT '';\n+SELECT 'SELECT avg(number / 2) FROM numbers(10)';\n+SELECT 'value: ', avg(number / 2) FROM numbers(10);\n+SELECT 'EXPLAIN syntax:';\n+EXPLAIN SYNTAX SELECT avg(number / 2) FROM numbers(10);\n",
  "problem_statement": "Perform algebraic optimizations of arithmetic expressions inside aggregate functions.\nSome aggregate functions are commutative with some arithmetic expressions.\r\n\r\n```\r\navg(x + const) = avg(x) + const\r\n```\r\n\r\nThis is applicable for aggregate functions: `sum`, `avg`, `min`, `max` and operations: `+`, `-`, `*`, `/` (but not for `intDiv` and `modulo`).\r\n\r\nIn case of integer overflow it either works correctly (for `sum`) or we may assume that integer overflow is implementation specific behaviour and apply optimization under this assumption.\r\n\r\n**Possible implementation**\r\n\r\nAST rewrite with InDepthNodeVisitor.\r\nShould not rewrite if expression has alias.\n",
  "hints_text": "I want to do this.\nThat will be awesome!\nIn fact, for `sum`, `sum(x * const)  = sum(x) * const` and `sum(x / const) = sum(x) / const`, but `sum(x +/- const)` isn't equal to `sum(x) +/- const`. @alexey-milovidov \nThere is nothing need to do, because this has been done in #11899. @alexey-milovidov \n@ucasFL I corrected the description.\r\nDo we have optimization for `avg(x + const)`?\n```\r\nmilovidov-desktop :) EXPLAIN SYNTAX SELECT sum(number * 2) FROM system.numbers\r\n\r\nEXPLAIN SYNTAX\r\nSELECT sum(number * 2)\r\nFROM system.numbers\r\n\r\nQuery id: f2a66469-d3a4-4548-813b-042798d334dd\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SELECT sum(number) * 2 \u2502\r\n\u2502 FROM system.numbers    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.001 sec. \r\n\r\nmilovidov-desktop :) EXPLAIN SYNTAX SELECT avg(number * 2) FROM system.numbers\r\n\r\nEXPLAIN SYNTAX\r\nSELECT avg(number * 2)\r\nFROM system.numbers\r\n\r\nQuery id: a95c3d45-4247-4535-9c61-7339e107b2ef\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SELECT avg(number * 2) \u2502\r\n\u2502 FROM system.numbers    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.001 sec. \r\n\r\nmilovidov-desktop :) EXPLAIN SYNTAX SELECT avg(number + 2) FROM system.numbers\r\n\r\nEXPLAIN SYNTAX\r\nSELECT avg(number + 2)\r\nFROM system.numbers\r\n\r\nQuery id: 106bebda-cfc6-4ef4-9d43-3a0703f5228e\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SELECT avg(number + 2) \u2502\r\n\u2502 FROM system.numbers    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.002 sec. \r\n\r\nmilovidov-desktop :) EXPLAIN SYNTAX SELECT max(number + 2) FROM system.numbers\r\n\r\nEXPLAIN SYNTAX\r\nSELECT max(number + 2)\r\nFROM system.numbers\r\n\r\nQuery id: 7bc442fd-f109-437c-94cf-20b16e8aa1e9\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SELECT max(number) + 2 \u2502\r\n\u2502 FROM system.numbers    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.001 sec. \r\n```\nOnly first query is rewritten by default.\n> Only first query is rewritten by default.\r\n\r\nYes, I checked that we have optimization for `sum`, `min` and `max` except `avg`.",
  "created_at": "2021-02-07T14:47:49Z"
}