{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11540,
  "instance_id": "ClickHouse__ClickHouse-11540",
  "issue_numbers": [
    "11539"
  ],
  "base_commit": "fa7e0e01725e99ab2d3960112db2c9bb61f2a47f",
  "patch": "diff --git a/src/IO/ReadBufferAIO.cpp b/src/IO/ReadBufferAIO.cpp\nindex ffe8183f0057..8b01b67c0c05 100644\n--- a/src/IO/ReadBufferAIO.cpp\n+++ b/src/IO/ReadBufferAIO.cpp\n@@ -4,6 +4,7 @@\n #include <IO/AIOContextPool.h>\n #include <Common/ProfileEvents.h>\n #include <Common/Stopwatch.h>\n+#include <Common/MemorySanitizer.h>\n #include <Core/Defines.h>\n \n #include <sys/types.h>\n@@ -95,11 +96,8 @@ bool ReadBufferAIO::nextImpl()\n     if (profile_callback)\n         watch.emplace(clock_type);\n \n-    if (!is_aio)\n-    {\n+    if (!is_pending_read)\n         synchronousRead();\n-        is_aio = true;\n-    }\n     else\n         receive();\n \n@@ -215,7 +213,9 @@ void ReadBufferAIO::synchronousRead()\n void ReadBufferAIO::receive()\n {\n     if (!waitForAIOCompletion())\n-        return;\n+    {\n+        throw Exception(\"Trying to receive data from AIO, but nothing was queued. It's a bug\", ErrorCodes::LOGICAL_ERROR);\n+    }\n     finalize();\n }\n \n@@ -224,8 +224,6 @@ void ReadBufferAIO::skip()\n     if (!waitForAIOCompletion())\n         return;\n \n-    is_aio = false;\n-\n     /// @todo I presume this assignment is redundant since waitForAIOCompletion() performs a similar one\n //    bytes_read = future_bytes_read.get();\n     if ((bytes_read < 0) || (static_cast<size_t>(bytes_read) < region_left_padding))\n@@ -274,6 +272,9 @@ void ReadBufferAIO::prepare()\n     region_aligned_size = region_aligned_end - region_aligned_begin;\n \n     buffer_begin = fill_buffer.internalBuffer().begin();\n+\n+    /// Unpoison because msan doesn't instrument linux AIO\n+    __msan_unpoison(buffer_begin, fill_buffer.internalBuffer().size());\n }\n \n void ReadBufferAIO::finalize()\ndiff --git a/src/IO/ReadBufferAIO.h b/src/IO/ReadBufferAIO.h\nindex 77274c47073d..5b2cf247a452 100644\n--- a/src/IO/ReadBufferAIO.h\n+++ b/src/IO/ReadBufferAIO.h\n@@ -100,8 +100,6 @@ class ReadBufferAIO final : public ReadBufferFromFileBase\n     bool is_eof = false;\n     /// At least one read request was sent.\n     bool is_started = false;\n-    /// Is the operation asynchronous?\n-    bool is_aio = false;\n     /// Did the asynchronous operation fail?\n     bool aio_failed = false;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01304_direct_io.reference b/tests/queries/0_stateless/01304_direct_io.reference\nnew file mode 100644\nindex 000000000000..ec7a223ddc2b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01304_direct_io.reference\n@@ -0,0 +1,1 @@\n+Loaded 1 queries.\ndiff --git a/tests/queries/0_stateless/01304_direct_io.sh b/tests/queries/0_stateless/01304_direct_io.sh\nnew file mode 100755\nindex 000000000000..32091acd5ebd\n--- /dev/null\n+++ b/tests/queries/0_stateless/01304_direct_io.sh\n@@ -0,0 +1,17 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT --multiquery --query \"\n+    DROP TABLE IF EXISTS bug;\n+    CREATE TABLE bug (UserID UInt64, Date Date) ENGINE = MergeTree ORDER BY Date;\n+    INSERT INTO bug SELECT rand64(), '2020-06-07' FROM numbers(50000000);\n+    OPTIMIZE TABLE bug FINAL;\"\n+\n+$CLICKHOUSE_BENCHMARK --database $CLICKHOUSE_DATABASE --iterations 10 --max_threads 100 --min_bytes_to_use_direct_io 1 <<< \"SELECT sum(UserID) FROM bug PREWHERE NOT ignore(Date)\" 1>/dev/null 2>$CLICKHOUSE_TMP/err\n+cat $CLICKHOUSE_TMP/err | grep Exception\n+cat $CLICKHOUSE_TMP/err | grep Loaded\n+\n+$CLICKHOUSE_CLIENT --multiquery --query \"\n+    DROP TABLE bug;\"\n",
  "problem_statement": "Direct IO does not work with PREWHERE when there are multiple threads\n```\r\nCREATE TABLE bug (UserID UInt64, Date Date) ENGINE = MergeTree ORDER BY Date;\r\nINSERT INTO bug SELECT rand64(), '2020-06-07' FROM numbers(153656686);\r\n```\r\n\r\n```\r\nclickhouse-benchmark --max_threads 16 --min_bytes_to_use_direct_io 1 <<< \"SELECT UserID FROM geo_bug_2 PREWHERE NOT ignore(Date)\"\r\n```\r\n\r\n```\r\nData compressed with different methods, given method byte 0x40, previous method byte 0x82: (while reading column UserID): (while reading from part ./data/default/geo_bug_2/all_1_142_3/ from mark 1720 with max_rows_to_read = 65536): While executing MergeTreeThread.\r\n```\n",
  "hints_text": "",
  "created_at": "2020-06-09T00:40:17Z"
}