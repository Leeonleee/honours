{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18523,
  "instance_id": "ClickHouse__ClickHouse-18523",
  "issue_numbers": [
    "18492"
  ],
  "base_commit": "4af0d73446a8845bf7349c332910562eb0876123",
  "patch": "diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex 84a41a9c415e..6669a369a9da 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -2473,24 +2473,23 @@ class FunctionCast final : public IFunctionBaseImpl\n             const auto * col = arguments.front().column.get();\n             const auto & column_tuple = assert_cast<const ColumnTuple &>(*col);\n \n-            if (column_tuple.getColumn(0).size() != column_tuple.getColumn(1).size())\n-                throw Exception(ErrorCodes::TYPE_MISMATCH,\n-                    \"CAST AS Map can only be performed from tuple of arrays with equal sizes.\"\n-                    \" Size of keys: {}. Size of values: {}\", column_tuple.getColumn(0).size(), column_tuple.getColumn(1).size());\n-\n-            ColumnPtr offsets;\n+            Columns offsets(2);\n             Columns converted_columns(2);\n             for (size_t i = 0; i < 2; ++i)\n             {\n                 const auto & column_array = assert_cast<const ColumnArray &>(column_tuple.getColumn(i));\n                 ColumnsWithTypeAndName element = {{column_array.getDataPtr(), from_kv_types[i], \"\"}};\n                 converted_columns[i] = element_wrappers[i](element, to_kv_types[i], nullable_source, input_rows_count);\n-\n-                if (!offsets)\n-                    offsets = column_array.getOffsetsPtr();\n+                offsets[i] = column_array.getOffsetsPtr();\n             }\n \n-            return ColumnMap::create(converted_columns[0], converted_columns[1], offsets);\n+            const auto & keys_offsets = assert_cast<const ColumnArray::ColumnOffsets &>(*offsets[0]).getData();\n+            const auto & values_offsets = assert_cast<const ColumnArray::ColumnOffsets &>(*offsets[1]).getData();\n+            if (keys_offsets != values_offsets)\n+                throw Exception(ErrorCodes::TYPE_MISMATCH,\n+                    \"CAST AS Map can only be performed from tuple of arrays with equal sizes.\");\n+\n+            return ColumnMap::create(converted_columns[0], converted_columns[1], offsets[0]);\n         };\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01550_create_map_type.sql b/tests/queries/0_stateless/01550_create_map_type.sql\nindex 7a08886a5d8d..695a40c42b4a 100644\n--- a/tests/queries/0_stateless/01550_create_map_type.sql\n+++ b/tests/queries/0_stateless/01550_create_map_type.sql\n@@ -63,3 +63,4 @@ SELECT sum(m['1']), sum(m['7']), sum(m['100']) FROM table_map;\n \n DROP TABLE IF EXISTS table_map;\n \n+SELECT CAST(([2, 1, 1023], ['', '']), 'Map(UInt8, String)') AS map, map[10] -- { serverError 53}\n",
  "problem_statement": "Debug assertion in Map datatype\n```\r\nSELECT\r\n    CAST(([2, 1, 1023], ['', '']), 'Map(UInt8, String)') AS map,\r\n    map[10]\r\n```\r\n\r\nTriggers `Assertion 'n < size()' failed` in `DB::ColumnString::operator[](unsigned long)`\r\nhttps://clickhouse-test-reports.s3.yandex.net/18481/64c4ade5b0e0c9a13d6c2475431daf431fc97554/fuzzer/fuzzer.log\r\n\r\nIntroduced here: #17829\r\nFirst found here: #18481\n",
  "hints_text": "The error was different when I run this SQL:\r\n```\r\nClickHouse client version 20.13.1.1.\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 20.13.1 revision 54443.\r\n\r\ndell123 :) SELECT\u3000    CAST(([2, 1, 1023], ['', '']), 'Map(UInt8, String)') AS map,\u3000    map[10];\r\n\r\nReceived exception from server (version 20.13.1):\r\nCode: 1001. DB::Exception: Received from localhost:9000. DB::Exception: std::length_error: basic_string.\r\n\r\n0 rows in set. Elapsed: 0.004 sec.\r\n\r\ndell123 :) SELECT\u3000    CAST(([2, 1, 1023], ['', '']), 'Map(UInt8, String)') AS map,\u3000    map[10];\r\n\r\nReceived exception from server (version 20.13.1):\r\nCode: 241. DB::Exception: Received from localhost:9000. DB::Exception: Memory limit (for query) exceeded: would use 128.00 TiB (attempt to allocate chunk of 140737490507006 bytes), maximum: 93.13 GiB.\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n\r\ndell123 :)\r\n```\r\n\r\nIn addition, when cast a tuple to map type, in the current version, we assume tuple has two elements and these two elements  have the same size.\r\n\r\nOf course we can add the default value when the second element's value are not all specified.\nIt because you are running release build - it has no assertions and you get errors that are much worse.\n> Of course we can add the default value when the second element's value are not all specified.\r\n\r\nNo, just need to throw exception that arrays are not of the same size.",
  "created_at": "2020-12-25T17:14:18Z"
}