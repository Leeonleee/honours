You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
MySQL compatibility: MAKEDATE function support
**Use case**

This is how QuickSight renders count query with grouping by quarter via MySQL:

```
SELECT MAKEDATE(YEAR(`created`), 1) + INTERVAL QUARTER(`created`) QUARTER - INTERVAL 1 QUARTER AS `f4245df6-e4eb-428b-9181-8644f65ccaec.created_tg`, COUNT(*) AS `count` FROM `cell_towers` GROUP BY MAKEDATE(YEAR(`created`), 1) + INTERVAL QUARTER(`created`) QUARTER - INTERVAL 1 QUARTER ORDER BY MAKEDATE(YEAR(`created`), 1) + INTERVAL QUARTER(`created`) QUARTER - INTERVAL 1 QUARTER DESC LIMIT 2500;
```

Unfortunately, this fails because the [MAKEDATE](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_makedate) function is not supported

```
<Error> executeQuery: Code: 46. DB::Exception: Unknown function MAKEDATE. Maybe you meant: ['makeDate','makeDate32']: While processing (MAKEDATE(toYear(created), 1) + toIntervalQuarter(toQuarter(created))) - toIntervalQuarter(1). (UNKNOWN_FUNCTION) (version 23.4.1.1157 (official build)) (from 35.158.127.201:2813) (in query: /* QuickSight 35ce2892-29a1-4b67-9091-94d1977cee7a 
 {"partner":"QuickSight","entityId":"edcf57ec-4f0c-4b8d-8d7c-aab0cd071809","sheetId":"d4027bfe-96ab-4ba3-80ef-2452f9b7b49e","visualId":"2927351e-9c0b-4a32-a97e-0469bf69e070"} */
 SELECT MAKEDATE(YEAR(`created`), 1) + INTERVAL QUARTER(`created`) QUARTER - INTERVAL 1 QUARTER AS `f4245df6-e4eb-428b-9181-8644f65ccaec.created_tg`, COUNT(*) AS `count` FROM `cell_towers` GROUP BY MAKEDATE(YEAR(`created`), 1) + INTERVAL QUARTER(`created`) QUARTER - INTERVAL 1 QUARTER ORDER BY MAKEDATE(YEAR(`created`), 1) + INTERVAL QUARTER(`created`) QUARTER - INTERVAL 1 QUARTER DESC LIMIT 2500), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xe31fa95 in /usr/bin/clickhouse
1. ? @ 0x126d4f40 in /usr/bin/clickhouse
2. DB::FunctionFactory::getImpl(String const&, std::shared_ptr<DB::Context const>) const @ 0x126d46eb in /usr/bin/clickhouse
3. DB::FunctionFactory::get(String const&, std::shared_ptr<DB::Context const>) const @ 0x126d518a in /usr/bin/clickhouse
4. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x1306cd14 in /usr/bin/clickhouse
5. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x1306d949 in /usr/bin/clickhouse
6. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x1306d949 in /usr/bin/clickhouse
7. ? @ 0x13061355 in /usr/bin/clickhouse
8. DB::ExpressionAnalyzer::getRootActionsNoMakeSet(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x1303ca3d in /usr/bin/clickhouse
9. DB::ExpressionAnalyzer::analyzeAggregation(std::shared_ptr<DB::ActionsDAG>&) @ 0x1303abb7 in /usr/bin/clickhouse
10. DB::ExpressionAnalyzer::ExpressionAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::TreeRewriterResult const> const&, std::shared_ptr<DB::Context const>, unsigned long, bool, bool, std::shared_ptr<DB::PreparedSets>, bool) @ 0x130391b6 in /usr/bin/clickhouse
11. ? @ 0x13a00a33 in /usr/bin/clickhouse
12. ? @ 0x13a093e6 in /usr/bin/clickhouse
13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x13a040d1 in /usr/bin/clickhouse
14. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x13aa42a2 in /usr/bin/clickhouse
15. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x13aa1f13 in /usr/bin/clickhouse
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x139bb290 in /usr/bin/clickhouse
17. ? @ 0x13dbf9a2 in /usr/bin/clickhouse
18. ? @ 0x13dc612c in /usr/bin/clickhouse
19. DB::MySQLHandler::comQuery(DB::ReadBuffer&) @ 0x14b68d45 in /usr/bin/clickhouse
20. DB::MySQLHandler::run() @ 0x14b65754 in /usr/bin/clickhouse
21. Poco::Net::TCPServerConnection::start() @ 0x17aeb0d4 in /usr/bin/clickhouse
22. Poco::Net::TCPServerDispatcher::run() @ 0x17aec2fb in /usr/bin/clickhouse
23. Poco::PooledThread::run() @ 0x17c6a7a7 in /usr/bin/clickhouse
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x17c681dd in /usr/bin/clickhouse
25. ? @ 0x7f3f3b701609 in ?
26. __clone @ 0x7f3f3b626133 in ?

2023.04.25 13:11:27.897575 [ 319 ] {} <Error> MySQLHandler: MySQLHandler: Cannot read packet: : Code: 46. DB::Exception: Unknown function MAKEDATE. Maybe you meant: ['makeDate','makeDate32']: While processing (MAKEDATE(toYear(created), 1) + toIntervalQuarter(toQuarter(created))) - toIntervalQuarter(1). (UNKNOWN_FUNCTION), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xe31fa95 in /usr/bin/clickhouse
1. ? @ 0x126d4f40 in /usr/bin/clickhouse
2. DB::FunctionFactory::getImpl(String const&, std::shared_ptr<DB::Context const>) const @ 0x126d46eb in /usr/bin/clickhouse
3. DB::FunctionFactory::get(String const&, std::shared_ptr<DB::Context const>) const @ 0x126d518a in /usr/bin/clickhouse
4. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x1306cd14 in /usr/bin/clickhouse
5. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x1306d949 in /usr/bin/clickhouse
6. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x1306d949 in /usr/bin/clickhouse
7. ? @ 0x13061355 in /usr/bin/clickhouse
8. DB::ExpressionAnalyzer::getRootActionsNoMakeSet(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x1303ca3d in /usr/bin/clickhouse
9. DB::ExpressionAnalyzer::analyzeAggregation(std::shared_ptr<DB::ActionsDAG>&) @ 0x1303abb7 in /usr/bin/clickhouse
10. DB::ExpressionAnalyzer::ExpressionAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::TreeRewriterResult const> const&, std::shared_ptr<DB::Context const>, unsigned long, bool, bool, std::shared_ptr<DB::PreparedSets>, bool) @ 0x130391b6 in /usr/bin/clickhouse
11. ? @ 0x13a00a33 in /usr/bin/clickhouse
12. ? @ 0x13a093e6 in /usr/bin/clickhouse
13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x13a040d1 in /usr/bin/clickhouse
14. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x13aa42a2 in /usr/bin/clickhouse
15. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x13aa1f13 in /usr/bin/clickhouse
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x139bb290 in /usr/bin/clickhouse
17. ? @ 0x13dbf9a2 in /usr/bin/clickhouse
18. ? @ 0x13dc612c in /usr/bin/clickhouse
19. DB::MySQLHandler::comQuery(DB::ReadBuffer&) @ 0x14b68d45 in /usr/bin/clickhouse
20. DB::MySQLHandler::run() @ 0x14b65754 in /usr/bin/clickhouse
21. Poco::Net::TCPServerConnection::start() @ 0x17aeb0d4 in /usr/bin/clickhouse
22. Poco::Net::TCPServerDispatcher::run() @ 0x17aec2fb in /usr/bin/clickhouse
23. Poco::PooledThread::run() @ 0x17c6a7a7 in /usr/bin/clickhouse
24. Poco::ThreadImpl::runnableEntry(void*) @ 0x17c681dd in /usr/bin/clickhouse
25. ? @ 0x7f3f3b701609 in ?
26. __clone @ 0x7f3f3b626133 in ?
 (version 23.4.1.1157 (official build))
```

**How to reproduce**

* Which ClickHouse server version to use: the latest main branch version will do. I used the head Docker image from the beginning of April: `23.4.1.170`
* Which interface to use, if it matters: MySQL
* `CREATE TABLE` statements for all tables involved: use [cell towers](https://clickhouse.com/docs/en/getting-started/example-datasets/cell-towers) dataset, then query via MySQL protocol


**Describe the solution you'd like**

MySQL's [MAKEDATE](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_makedate) function is supported.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
