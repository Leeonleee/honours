{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 38272,
  "instance_id": "ClickHouse__ClickHouse-38272",
  "issue_numbers": [
    "38049"
  ],
  "base_commit": "ca505c6d90bbdb916f02c2e59f6706a5f5e885cd",
  "patch": "diff --git a/src/Databases/DatabasesCommon.cpp b/src/Databases/DatabasesCommon.cpp\nindex 99c0c870cf7e..13cd841cc6e8 100644\n--- a/src/Databases/DatabasesCommon.cpp\n+++ b/src/Databases/DatabasesCommon.cpp\n@@ -162,6 +162,7 @@ void cleanupObjectDefinitionFromTemporaryFlags(ASTCreateQuery & query)\n     query.as_table.clear();\n     query.if_not_exists = false;\n     query.is_populate = false;\n+    query.is_create_empty = false;\n     query.replace_view = false;\n     query.replace_table = false;\n     query.create_or_replace = false;\ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 304cfa2f3f40..b29f7372d38e 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -1455,7 +1455,7 @@ BlockIO InterpreterCreateQuery::doCreateOrReplaceTable(ASTCreateQuery & create,\n BlockIO InterpreterCreateQuery::fillTableIfNeeded(const ASTCreateQuery & create)\n {\n     /// If the query is a CREATE SELECT, insert the data into the table.\n-    if (create.select && !create.attach\n+    if (create.select && !create.attach && !create.is_create_empty\n         && !create.is_ordinary_view && !create.is_live_view\n         && (!(create.is_materialized_view || create.is_window_view) || create.is_populate))\n     {\ndiff --git a/src/Parsers/ASTCreateQuery.cpp b/src/Parsers/ASTCreateQuery.cpp\nindex 9bae29d47ffe..e676be639217 100644\n--- a/src/Parsers/ASTCreateQuery.cpp\n+++ b/src/Parsers/ASTCreateQuery.cpp\n@@ -428,6 +428,8 @@ void ASTCreateQuery::formatQueryImpl(const FormatSettings & settings, FormatStat\n \n     if (is_populate)\n         settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" POPULATE\" << (settings.hilite ? hilite_none : \"\");\n+    else if (is_create_empty)\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" EMPTY\" << (settings.hilite ? hilite_none : \"\");\n \n     if (select)\n     {\ndiff --git a/src/Parsers/ASTCreateQuery.h b/src/Parsers/ASTCreateQuery.h\nindex 596baa3eb3c1..f9f57183a642 100644\n--- a/src/Parsers/ASTCreateQuery.h\n+++ b/src/Parsers/ASTCreateQuery.h\n@@ -70,6 +70,7 @@ class ASTCreateQuery : public ASTQueryWithTableAndOutput, public ASTQueryWithOnC\n     bool is_live_view{false};\n     bool is_window_view{false};\n     bool is_populate{false};\n+    bool is_create_empty{false};    /// CREATE TABLE ... EMPTY AS SELECT ...\n     bool replace_view{false}; /// CREATE OR REPLACE VIEW\n \n     ASTColumns * columns_list = nullptr;\ndiff --git a/src/Parsers/ParserCreateQuery.cpp b/src/Parsers/ParserCreateQuery.cpp\nindex e57cfece806f..e4a3f87f288c 100644\n--- a/src/Parsers/ParserCreateQuery.cpp\n+++ b/src/Parsers/ParserCreateQuery.cpp\n@@ -466,7 +466,6 @@ bool ParserCreateTableQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expe\n     ParserCompoundIdentifier table_name_p(true, true);\n     ParserKeyword s_from(\"FROM\");\n     ParserKeyword s_on(\"ON\");\n-    ParserKeyword s_as(\"AS\");\n     ParserToken s_dot(TokenType::Dot);\n     ParserToken s_lparen(TokenType::OpeningRoundBracket);\n     ParserToken s_rparen(TokenType::ClosingRoundBracket);\n@@ -492,6 +491,7 @@ bool ParserCreateTableQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expe\n     bool or_replace = false;\n     bool if_not_exists = false;\n     bool is_temporary = false;\n+    bool is_create_empty = false;\n \n     if (s_create.ignore(pos, expected))\n     {\n@@ -557,6 +557,17 @@ bool ParserCreateTableQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expe\n         return true;\n     }\n \n+    auto need_parse_as_select = [&is_create_empty, &pos, &expected]()\n+    {\n+        if (ParserKeyword{\"EMPTY AS\"}.ignore(pos, expected))\n+        {\n+            is_create_empty = true;\n+            return true;\n+        }\n+\n+        return ParserKeyword{\"AS\"}.ignore(pos, expected);\n+    };\n+\n     /// List of columns.\n     if (s_lparen.ignore(pos, expected))\n     {\n@@ -568,7 +579,7 @@ bool ParserCreateTableQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expe\n \n         auto storage_parse_result = storage_p.parse(pos, storage, expected);\n \n-        if (storage_parse_result && s_as.ignore(pos, expected))\n+        if (storage_parse_result && need_parse_as_select())\n         {\n             if (!select_p.parse(pos, select, expected))\n                 return false;\n@@ -576,7 +587,7 @@ bool ParserCreateTableQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expe\n \n         if (!storage_parse_result && !is_temporary)\n         {\n-            if (s_as.ignore(pos, expected) && !table_function_p.parse(pos, as_table_function, expected))\n+            if (need_parse_as_select() && !table_function_p.parse(pos, as_table_function, expected))\n                 return false;\n         }\n \n@@ -591,7 +602,7 @@ bool ParserCreateTableQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expe\n         storage_p.parse(pos, storage, expected);\n \n         /// CREATE|ATTACH TABLE ... AS ...\n-        if (s_as.ignore(pos, expected))\n+        if (need_parse_as_select())\n         {\n             if (!select_p.parse(pos, select, expected)) /// AS SELECT ...\n             {\n@@ -660,6 +671,7 @@ bool ParserCreateTableQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expe\n     tryGetIdentifierNameInto(as_database, query->as_database);\n     tryGetIdentifierNameInto(as_table, query->as_table);\n     query->set(query->select, select);\n+    query->is_create_empty = is_create_empty;\n \n     if (from_path)\n         query->attach_from_path = from_path->as<ASTLiteral &>().value.get<String>();\n@@ -861,6 +873,7 @@ bool ParserCreateWindowViewQuery::parseImpl(Pos & pos, ASTPtr & node, Expected &\n     bool allowed_lateness = false;\n     bool if_not_exists = false;\n     bool is_populate = false;\n+    bool is_create_empty = false;\n \n     if (!s_create.ignore(pos, expected))\n     {\n@@ -944,6 +957,8 @@ bool ParserCreateWindowViewQuery::parseImpl(Pos & pos, ASTPtr & node, Expected &\n \n     if (s_populate.ignore(pos, expected))\n         is_populate = true;\n+    else if (ParserKeyword{\"EMPTY\"}.ignore(pos, expected))\n+        is_create_empty = true;\n \n     /// AS SELECT ...\n     if (!s_as.ignore(pos, expected))\n@@ -979,6 +994,7 @@ bool ParserCreateWindowViewQuery::parseImpl(Pos & pos, ASTPtr & node, Expected &\n     query->allowed_lateness = allowed_lateness;\n     query->lateness_function = lateness;\n     query->is_populate = is_populate;\n+    query->is_create_empty = is_create_empty;\n \n     tryGetIdentifierNameInto(as_database, query->as_database);\n     tryGetIdentifierNameInto(as_table, query->as_table);\n@@ -1239,6 +1255,7 @@ bool ParserCreateViewQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n     bool is_ordinary_view = false;\n     bool is_materialized_view = false;\n     bool is_populate = false;\n+    bool is_create_empty = false;\n     bool replace_view = false;\n \n     if (!s_create.ignore(pos, expected))\n@@ -1309,6 +1326,8 @@ bool ParserCreateViewQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n \n         if (s_populate.ignore(pos, expected))\n             is_populate = true;\n+        else if (ParserKeyword{\"EMPTY\"}.ignore(pos, expected))\n+            is_create_empty = true;\n     }\n \n     /// AS SELECT ...\n@@ -1328,6 +1347,7 @@ bool ParserCreateViewQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n     query->is_ordinary_view = is_ordinary_view;\n     query->is_materialized_view = is_materialized_view;\n     query->is_populate = is_populate;\n+    query->is_create_empty = is_create_empty;\n     query->replace_view = replace_view;\n \n     auto * table_id = table->as<ASTTableIdentifier>();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02343_create_empty_as_select.reference b/tests/queries/0_stateless/02343_create_empty_as_select.reference\nnew file mode 100644\nindex 000000000000..3b0d34c58637\n--- /dev/null\n+++ b/tests/queries/0_stateless/02343_create_empty_as_select.reference\n@@ -0,0 +1,4 @@\n+CREATE TABLE default.t\\n(\\n    `1` UInt8\\n)\\nENGINE = Memory\n+0\n+CREATE MATERIALIZED VIEW default.mv\\n(\\n    `1` UInt8\\n)\\nENGINE = Memory AS\\nSELECT 1\n+0\ndiff --git a/tests/queries/0_stateless/02343_create_empty_as_select.sql b/tests/queries/0_stateless/02343_create_empty_as_select.sql\nnew file mode 100644\nindex 000000000000..54f383b553f3\n--- /dev/null\n+++ b/tests/queries/0_stateless/02343_create_empty_as_select.sql\n@@ -0,0 +1,18 @@\n+\n+drop table if exists t;\n+drop table if exists mv;\n+\n+create table t engine=Memory empty; -- { clientError SYNTAX_ERROR }\n+create table t engine=Memory empty as; -- { clientError SYNTAX_ERROR }\n+create table t engine=Memory as; -- { clientError SYNTAX_ERROR }\n+create table t engine=Memory empty as select 1;\n+\n+show create table t;\n+select count() from t;\n+\n+create materialized view mv engine=Memory empty as select 1;\n+show create mv;\n+select count() from mv;\n+\n+drop table t;\n+drop table mv;\n",
  "problem_statement": "CREATE TABLE ... EMPTY AS SELECT\nCREATE TABLE ... **EMPTY** AS SELECT\r\n\r\n**Use case**\r\n\r\nCreate a table with the same structure as SELECT query returns but don't fill it.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nCREATE TABLE ... AS DESCRIBE (SELECT ...)\r\n\r\n\\- more consistent but also more clunky.\n",
  "hints_text": "Hi, is there an ETA for fixing this issue?\n@ykahlon It's a proposal for a new feature. There is nothing to \"fix\".\r\nIf you want to kindly ask the engineer @tavplubix about his thoughts - please do.",
  "created_at": "2022-06-21T13:08:01Z"
}