{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58068,
  "instance_id": "ClickHouse__ClickHouse-58068",
  "issue_numbers": [
    "56428"
  ],
  "base_commit": "facbd89d4867b246762d8cb82cde2691b2f90200",
  "patch": "diff --git a/docs/en/operations/server-configuration-parameters/settings.md b/docs/en/operations/server-configuration-parameters/settings.md\nindex 48434d992e21..1cbf9deccc65 100644\n--- a/docs/en/operations/server-configuration-parameters/settings.md\n+++ b/docs/en/operations/server-configuration-parameters/settings.md\n@@ -2866,3 +2866,10 @@ This also allows a mix of resolver types can be used.\n ### disable_tunneling_for_https_requests_over_http_proxy {#disable_tunneling_for_https_requests_over_http_proxy}\n \n By default, tunneling (i.e, `HTTP CONNECT`) is used to make `HTTPS` requests over `HTTP` proxy. This setting can be used to disable it.\n+\n+## max_materialized_views_count_for_table {#max_materialized_views_count_for_table}\n+\n+A limit on the number of materialized views attached to a table.\n+Note that only directly dependent views are considered here, and the creation of one view on top of another view is not considered.\n+\n+Default value: `0`.\ndiff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp\nindex 1e32a4ac4a1a..975970bbeeb9 100644\n--- a/src/Common/ErrorCodes.cpp\n+++ b/src/Common/ErrorCodes.cpp\n@@ -591,6 +591,7 @@\n     M(709, CANNOT_GET_REPLICATED_DATABASE_SNAPSHOT) \\\n     M(710, FAULT_INJECTED) \\\n     M(711, FILECACHE_ACCESS_DENIED) \\\n+    M(712, TOO_MANY_MATERIALIZED_VIEWS) \\\n     \\\n     M(999, KEEPER_EXCEPTION) \\\n     M(1000, POCO_EXCEPTION) \\\ndiff --git a/src/Core/ServerSettings.h b/src/Core/ServerSettings.h\nindex 2a9fa8e744c0..dced21291606 100644\n--- a/src/Core/ServerSettings.h\n+++ b/src/Core/ServerSettings.h\n@@ -112,6 +112,7 @@ namespace DB\n     M(UInt64, total_memory_profiler_sample_max_allocation_size, 0, \"Collect random allocations of size less or equal than specified value with probability equal to `total_memory_profiler_sample_probability`. 0 means disabled. You may want to set 'max_untracked_memory' to 0 to make this threshold to work as expected.\", 0) \\\n     M(Bool, validate_tcp_client_information, false, \"Validate client_information in the query packet over the native TCP protocol.\", 0) \\\n     M(Bool, storage_metadata_write_full_object_key, false, \"Write disk metadata files with VERSION_FULL_OBJECT_KEY format\", 0) \\\n+    M(UInt64, max_materialized_views_count_for_table, 0, \"A limit on the number of materialized views attached to a table.\", 0) \\\n \n     /// If you add a setting which can be updated at runtime, please update 'changeable_settings' map in StorageSystemServerSettings.cpp\n \ndiff --git a/src/Storages/StorageMaterializedView.cpp b/src/Storages/StorageMaterializedView.cpp\nindex ae616b1df048..050e76c9205c 100644\n--- a/src/Storages/StorageMaterializedView.cpp\n+++ b/src/Storages/StorageMaterializedView.cpp\n@@ -21,6 +21,7 @@\n \n #include <Common/typeid_cast.h>\n #include <Common/checkStackSize.h>\n+#include <Core/ServerSettings.h>\n #include <QueryPipeline/Pipe.h>\n #include <Processors/QueryPlan/QueryPlan.h>\n #include <Processors/QueryPlan/ExpressionStep.h>\n@@ -38,6 +39,7 @@ namespace ErrorCodes\n     extern const int BAD_ARGUMENTS;\n     extern const int NOT_IMPLEMENTED;\n     extern const int INCORRECT_QUERY;\n+    extern const int TOO_MANY_MATERIALIZED_VIEWS;\n }\n \n namespace ActionLocks\n@@ -87,6 +89,16 @@ StorageMaterializedView::StorageMaterializedView(\n                         \"either ENGINE or an existing table in a TO clause\");\n \n     auto select = SelectQueryDescription::getSelectQueryFromASTForMatView(query.select->clone(), query.refresh_strategy != nullptr, local_context);\n+    if (select.select_table_id)\n+    {\n+        auto select_table_dependent_views = DatabaseCatalog::instance().getDependentViews(select.select_table_id);\n+\n+        auto max_materialized_views_count_for_table = getContext()->getServerSettings().max_materialized_views_count_for_table;\n+        if (max_materialized_views_count_for_table && select_table_dependent_views.size() >= max_materialized_views_count_for_table)\n+            throw Exception(ErrorCodes::TOO_MANY_MATERIALIZED_VIEWS,\n+                            \"Too many materialized views, maximum: {}\", max_materialized_views_count_for_table);\n+    }\n+\n     storage_metadata.setSelectQuery(select);\n     if (!comment.empty())\n         storage_metadata.setComment(comment);\n",
  "test_patch": "diff --git a/tests/integration/test_limit_materialized_view_count/__init__.py b/tests/integration/test_limit_materialized_view_count/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_limit_materialized_view_count/configs/max_num_limit.xml b/tests/integration/test_limit_materialized_view_count/configs/max_num_limit.xml\nnew file mode 100644\nindex 000000000000..7fcf9005a088\n--- /dev/null\n+++ b/tests/integration/test_limit_materialized_view_count/configs/max_num_limit.xml\n@@ -0,0 +1,3 @@\n+<clickhouse>\n+    <max_materialized_views_count_for_table>1</max_materialized_views_count_for_table>\n+</clickhouse>\ndiff --git a/tests/integration/test_limit_materialized_view_count/test.py b/tests/integration/test_limit_materialized_view_count/test.py\nnew file mode 100644\nindex 000000000000..c14c5b2055e8\n--- /dev/null\n+++ b/tests/integration/test_limit_materialized_view_count/test.py\n@@ -0,0 +1,49 @@\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+\n+node = cluster.add_instance(\n+    \"node\",\n+    main_configs=[\"configs/max_num_limit.xml\"],\n+    stay_alive=True,\n+)\n+\n+config = \"\"\"<clickhouse>\n+    <max_materialized_views_count_for_table>2</max_materialized_views_count_for_table>\n+</clickhouse>\n+\"\"\"\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+        for _, node in cluster.instances.items():\n+            node.query(\n+                f\"\"\"\n+                CREATE TABLE test_tb (a String) ENGINE = MergeTree ORDER BY a;\n+                \"\"\"\n+            )\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_limit_materialized_view_count(started_cluster):\n+    node.query(\n+        \"CREATE MATERIALIZED VIEW test_view1 ENGINE = MergeTree ORDER BY a AS SELECT * FROM test_tb;\"\n+    )\n+    assert \"Too many materialized views\" in node.query_and_get_error(\n+        \"CREATE MATERIALIZED VIEW test_view2 ENGINE = MergeTree ORDER BY a AS SELECT * FROM test_tb;\"\n+    )\n+\n+    node.replace_config(\"/etc/clickhouse-server/config.d/max_num_limit.xml\", config)\n+    node.restart_clickhouse()\n+\n+    node.query(\n+        \"CREATE MATERIALIZED VIEW test_view2 ENGINE = MergeTree ORDER BY a AS SELECT * FROM test_tb;\"\n+    )\n+    assert \"Too many materialized views\" in node.query_and_get_error(\n+        \"CREATE MATERIALIZED VIEW test_view3 ENGINE = MergeTree ORDER BY a AS SELECT * FROM test_tb;\"\n+    )\n",
  "problem_statement": "A limit on the number of materialized views attached to a table.\nA limit can be configurable by a query-level setting (the setting could be constrained then).\r\n\r\nIt can be set to 100 by default.\n",
  "hints_text": "Hi @alexey-milovidov , I would like to work on this issue.",
  "created_at": "2023-12-20T09:40:07Z"
}