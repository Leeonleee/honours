diff --git a/src/Functions/FunctionBinaryArithmetic.h b/src/Functions/FunctionBinaryArithmetic.h
index 47597594f337..241f7b2fae09 100644
--- a/src/Functions/FunctionBinaryArithmetic.h
+++ b/src/Functions/FunctionBinaryArithmetic.h
@@ -1209,6 +1209,9 @@ class FunctionBinaryArithmetic : public IFunction
 #if USE_EMBEDDED_COMPILER
     bool isCompilableImpl(const DataTypes & arguments) const override
     {
+        if (2 != arguments.size())
+            return false;
+
         return castBothTypes(arguments[0].get(), arguments[1].get(), [&](const auto & left, const auto & right)
         {
             using LeftDataType = std::decay_t<decltype(left)>;
@@ -1226,6 +1229,8 @@ class FunctionBinaryArithmetic : public IFunction
 
     llvm::Value * compileImpl(llvm::IRBuilderBase & builder, const DataTypes & types, ValuePlaceholders values) const override
     {
+        assert(2 == types.size() && 2 == values.size());
+
         llvm::Value * result = nullptr;
         castBothTypes(types[0].get(), types[1].get(), [&](const auto & left, const auto & right)
         {
diff --git a/src/Functions/FunctionUnaryArithmetic.h b/src/Functions/FunctionUnaryArithmetic.h
index 963313c7dedd..5b072e5848aa 100644
--- a/src/Functions/FunctionUnaryArithmetic.h
+++ b/src/Functions/FunctionUnaryArithmetic.h
@@ -216,6 +216,9 @@ class FunctionUnaryArithmetic : public IFunction
 #if USE_EMBEDDED_COMPILER
     bool isCompilableImpl(const DataTypes & arguments) const override
     {
+        if (1 != arguments.size())
+            return false;
+
         return castType(arguments[0].get(), [&](const auto & type)
         {
             using DataType = std::decay_t<decltype(type)>;
@@ -228,6 +231,8 @@ class FunctionUnaryArithmetic : public IFunction
 
     llvm::Value * compileImpl(llvm::IRBuilderBase & builder, const DataTypes & types, ValuePlaceholders values) const override
     {
+        assert(1 == types.size() && 1 == values.size());
+
         llvm::Value * result = nullptr;
         castType(types[0].get(), [&](const auto & type)
         {
diff --git a/src/Functions/FunctionsComparison.h b/src/Functions/FunctionsComparison.h
index 9b0d6e76924d..07455f945688 100644
--- a/src/Functions/FunctionsComparison.h
+++ b/src/Functions/FunctionsComparison.h
@@ -1272,6 +1272,9 @@ class FunctionComparison : public IFunction
 #if USE_EMBEDDED_COMPILER
     bool isCompilableImpl(const DataTypes & types) const override
     {
+        if (2 != types.size())
+            return false;
+
         auto isBigInteger = &typeIsEither<DataTypeInt64, DataTypeUInt64, DataTypeUUID>;
         auto isFloatingPoint = &typeIsEither<DataTypeFloat32, DataTypeFloat64>;
         if ((isBigInteger(*types[0]) && isFloatingPoint(*types[1]))
@@ -1284,6 +1287,8 @@ class FunctionComparison : public IFunction
 
     llvm::Value * compileImpl(llvm::IRBuilderBase & builder, const DataTypes & types, ValuePlaceholders values) const override
     {
+        assert(2 == types.size() && 2 == values.size());
+
         auto & b = static_cast<llvm::IRBuilder<> &>(builder);
         auto * x = values[0]();
         auto * y = values[1]();
diff --git a/src/Functions/FunctionsLogical.h b/src/Functions/FunctionsLogical.h
index a8809dc34675..474831b0b6d5 100644
--- a/src/Functions/FunctionsLogical.h
+++ b/src/Functions/FunctionsLogical.h
@@ -161,6 +161,8 @@ class FunctionAnyArityLogical : public IFunction
 
     llvm::Value * compileImpl(llvm::IRBuilderBase & builder, const DataTypes & types, ValuePlaceholders values) const override
     {
+        assert(!types.empty() && !values.empty());
+
         auto & b = static_cast<llvm::IRBuilder<> &>(builder);
         if constexpr (!Impl::isSaturable())
         {
