diff --git a/tests/queries/0_stateless/01872_functions_to_subcolumns.reference b/tests/queries/0_stateless/01872_functions_to_subcolumns.reference
deleted file mode 100644
index a1cd31e2dc93..000000000000
--- a/tests/queries/0_stateless/01872_functions_to_subcolumns.reference
+++ /dev/null
@@ -1,47 +0,0 @@
-0	0	1
-0	1	0
-SELECT
-    id IS NULL,
-    `n.null`,
-    NOT `n.null`
-FROM t_func_to_subcolumns
-3	0	1	0
-0	1	0	\N
-SELECT
-    `arr.size0`,
-    `arr.size0` = 0,
-    `arr.size0` != 0,
-    empty(n)
-FROM t_func_to_subcolumns
-['foo','bar']	[1,2]
-[]	[]
-SELECT
-    `m.keys`,
-    `m.values`
-FROM t_func_to_subcolumns
-1
-SELECT sum(NOT `n.null`)
-FROM t_func_to_subcolumns
-2
-SELECT count(id)
-FROM t_func_to_subcolumns
-1	0	0
-2	1	0
-3	0	0
-SELECT
-    id,
-    `n.null`,
-    right.n IS NULL
-FROM t_func_to_subcolumns AS left
-ALL FULL OUTER JOIN
-(
-    SELECT
-        1 AS id,
-        \'qqq\' AS n
-    UNION ALL
-    SELECT
-        3 AS id,
-        \'www\'
-) AS right USING (id)
-0	10
-0	20
diff --git a/tests/queries/0_stateless/01872_functions_to_subcolumns_analyzer.reference b/tests/queries/0_stateless/01872_functions_to_subcolumns_analyzer.reference
new file mode 100644
index 000000000000..32bacfba5ea3
--- /dev/null
+++ b/tests/queries/0_stateless/01872_functions_to_subcolumns_analyzer.reference
@@ -0,0 +1,181 @@
+0	0	1
+0	1	0
+QUERY id: 0
+  PROJECTION COLUMNS
+    isNull(id) UInt8
+    isNull(n) UInt8
+    isNotNull(n) UInt8
+  PROJECTION
+    LIST id: 1, nodes: 3
+      CONSTANT id: 2, constant_value: UInt64_0, constant_value_type: UInt8
+        EXPRESSION
+          FUNCTION id: 3, function_name: isNull, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 4, nodes: 1
+                COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6
+      COLUMN id: 7, column_name: n.null, result_type: UInt8, source_id: 6
+      FUNCTION id: 8, function_name: not, function_type: ordinary, result_type: UInt8
+        ARGUMENTS
+          LIST id: 9, nodes: 1
+            COLUMN id: 10, column_name: n.null, result_type: UInt8, source_id: 6
+  JOIN TREE
+    TABLE id: 6, alias: __table1, table_name: default.t_func_to_subcolumns
+
+SELECT
+    _CAST(0, \'UInt8\') AS `isNull(id)`,
+    __table1.`n.null` AS `isNull(n)`,
+    NOT __table1.`n.null` AS `isNotNull(n)`
+FROM default.t_func_to_subcolumns AS __table1
+3	0	1	0
+0	1	0	\N
+QUERY id: 0
+  PROJECTION COLUMNS
+    length(arr) UInt64
+    empty(arr) UInt8
+    notEmpty(arr) UInt8
+    empty(n) Nullable(UInt8)
+  PROJECTION
+    LIST id: 1, nodes: 4
+      COLUMN id: 2, column_name: arr.size0, result_type: UInt64, source_id: 3
+      FUNCTION id: 4, function_name: equals, function_type: ordinary, result_type: UInt8
+        ARGUMENTS
+          LIST id: 5, nodes: 2
+            COLUMN id: 6, column_name: arr.size0, result_type: UInt64, source_id: 3
+            CONSTANT id: 7, constant_value: UInt64_0, constant_value_type: UInt8
+      FUNCTION id: 8, function_name: notEquals, function_type: ordinary, result_type: UInt8
+        ARGUMENTS
+          LIST id: 9, nodes: 2
+            COLUMN id: 10, column_name: arr.size0, result_type: UInt64, source_id: 3
+            CONSTANT id: 11, constant_value: UInt64_0, constant_value_type: UInt8
+      FUNCTION id: 12, function_name: empty, function_type: ordinary, result_type: Nullable(UInt8)
+        ARGUMENTS
+          LIST id: 13, nodes: 1
+            COLUMN id: 14, column_name: n, result_type: Nullable(String), source_id: 3
+  JOIN TREE
+    TABLE id: 3, alias: __table1, table_name: default.t_func_to_subcolumns
+
+SELECT
+    __table1.`arr.size0` AS `length(arr)`,
+    __table1.`arr.size0` = 0 AS `empty(arr)`,
+    __table1.`arr.size0` != 0 AS `notEmpty(arr)`,
+    empty(__table1.n) AS `empty(n)`
+FROM default.t_func_to_subcolumns AS __table1
+['foo','bar']	[1,2]
+[]	[]
+QUERY id: 0
+  PROJECTION COLUMNS
+    mapKeys(m) Array(String)
+    mapValues(m) Array(UInt64)
+  PROJECTION
+    LIST id: 1, nodes: 2
+      COLUMN id: 2, column_name: m.keys, result_type: Array(String), source_id: 3
+      COLUMN id: 4, column_name: m.values, result_type: Array(UInt64), source_id: 3
+  JOIN TREE
+    TABLE id: 3, alias: __table1, table_name: default.t_func_to_subcolumns
+
+SELECT
+    __table1.`m.keys` AS `mapKeys(m)`,
+    __table1.`m.values` AS `mapValues(m)`
+FROM default.t_func_to_subcolumns AS __table1
+1
+QUERY id: 0
+  PROJECTION COLUMNS
+    count(n) UInt64
+  PROJECTION
+    LIST id: 1, nodes: 1
+      FUNCTION id: 2, function_name: sum, function_type: aggregate, result_type: UInt64
+        ARGUMENTS
+          LIST id: 3, nodes: 1
+            FUNCTION id: 4, function_name: not, function_type: ordinary, result_type: UInt8
+              ARGUMENTS
+                LIST id: 5, nodes: 1
+                  COLUMN id: 6, column_name: n.null, result_type: UInt8, source_id: 7
+  JOIN TREE
+    TABLE id: 7, alias: __table1, table_name: default.t_func_to_subcolumns
+
+SELECT sum(NOT __table1.`n.null`) AS `count(n)`
+FROM default.t_func_to_subcolumns AS __table1
+2
+QUERY id: 0
+  PROJECTION COLUMNS
+    count(id) UInt64
+  PROJECTION
+    LIST id: 1, nodes: 1
+      FUNCTION id: 2, function_name: count, function_type: aggregate, result_type: UInt64
+        ARGUMENTS
+          LIST id: 3, nodes: 1
+            COLUMN id: 4, column_name: id, result_type: UInt64, source_id: 5
+  JOIN TREE
+    TABLE id: 5, alias: __table1, table_name: default.t_func_to_subcolumns
+
+SELECT count(__table1.id) AS `count(id)`
+FROM default.t_func_to_subcolumns AS __table1
+1	0	0
+2	1	0
+3	0	0
+QUERY id: 0
+  PROJECTION COLUMNS
+    id UInt64
+    isNull(n) UInt8
+    isNull(right.n) UInt8
+  PROJECTION
+    LIST id: 1, nodes: 3
+      COLUMN id: 2, column_name: id, result_type: UInt64, source_id: 3
+      COLUMN id: 4, column_name: n.null, result_type: UInt8, source_id: 3
+      CONSTANT id: 5, constant_value: UInt64_0, constant_value_type: UInt8
+        EXPRESSION
+          FUNCTION id: 6, function_name: isNull, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 7, nodes: 1
+                COLUMN id: 8, column_name: n, result_type: String, source_id: 9
+  JOIN TREE
+    JOIN id: 10, strictness: ALL, kind: FULL
+      LEFT TABLE EXPRESSION
+        TABLE id: 3, alias: __table1, table_name: default.t_func_to_subcolumns
+      RIGHT TABLE EXPRESSION
+        UNION id: 9, alias: __table2, is_subquery: 1, union_mode: UNION_ALL
+          QUERIES
+            LIST id: 11, nodes: 2
+              QUERY id: 12, alias: __table3
+                PROJECTION COLUMNS
+                  id UInt8
+                PROJECTION
+                  LIST id: 13, nodes: 1
+                    CONSTANT id: 14, constant_value: UInt64_1, constant_value_type: UInt8
+                JOIN TREE
+                  TABLE id: 15, alias: __table4, table_name: system.one
+              QUERY id: 16, alias: __table5
+                PROJECTION COLUMNS
+                  id UInt8
+                PROJECTION
+                  LIST id: 17, nodes: 1
+                    CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8
+                JOIN TREE
+                  TABLE id: 19, alias: __table6, table_name: system.one
+      JOIN EXPRESSION
+        LIST id: 20, nodes: 1
+          COLUMN id: 21, column_name: id, result_type: UInt64, source_id: 10
+            EXPRESSION
+              LIST id: 22, nodes: 2
+                COLUMN id: 23, column_name: id, result_type: UInt64, source_id: 3
+                COLUMN id: 24, column_name: id, result_type: UInt8, source_id: 9
+
+SELECT
+    __table1.id AS id,
+    __table1.`n.null` AS `isNull(n)`,
+    _CAST(0, \'UInt8\') AS `isNull(right.n)`
+FROM default.t_func_to_subcolumns AS __table1
+ALL FULL OUTER JOIN
+(
+    (
+        SELECT 1 AS id
+        FROM system.one AS __table4
+    )
+    UNION ALL
+    (
+        SELECT 3 AS id
+        FROM system.one AS __table6
+    )
+) AS __table2 USING (id)
+0	10
+0	20
diff --git a/tests/queries/0_stateless/01872_functions_to_subcolumns.sql b/tests/queries/0_stateless/01872_functions_to_subcolumns_analyzer.sql
similarity index 62%
rename from tests/queries/0_stateless/01872_functions_to_subcolumns.sql
rename to tests/queries/0_stateless/01872_functions_to_subcolumns_analyzer.sql
index 45f83bf20e57..b544f6829cf1 100644
--- a/tests/queries/0_stateless/01872_functions_to_subcolumns.sql
+++ b/tests/queries/0_stateless/01872_functions_to_subcolumns_analyzer.sql
@@ -1,5 +1,6 @@
 DROP TABLE IF EXISTS t_func_to_subcolumns;
 
+SET allow_experimental_analyzer = 1;
 SET optimize_functions_to_subcolumns = 1;
 
 CREATE TABLE t_func_to_subcolumns (id UInt64, arr Array(UInt64), n Nullable(String), m Map(String, UInt64))
@@ -8,24 +9,24 @@ ENGINE = MergeTree ORDER BY tuple();
 INSERT INTO t_func_to_subcolumns VALUES (1, [1, 2, 3], 'abc', map('foo', 1, 'bar', 2)) (2, [], NULL, map());
 
 SELECT id IS NULL, n IS NULL, n IS NOT NULL FROM t_func_to_subcolumns;
-EXPLAIN SYNTAX SELECT id IS NULL, n IS NULL, n IS NOT NULL FROM t_func_to_subcolumns;
+EXPLAIN QUERY TREE dump_tree = 1, dump_ast = 1 SELECT id IS NULL, n IS NULL, n IS NOT NULL FROM t_func_to_subcolumns;
 
 SELECT length(arr), empty(arr), notEmpty(arr), empty(n) FROM t_func_to_subcolumns;
-EXPLAIN SYNTAX SELECT length(arr), empty(arr), notEmpty(arr), empty(n) FROM t_func_to_subcolumns;
+EXPLAIN QUERY TREE dump_tree = 1, dump_ast = 1 SELECT length(arr), empty(arr), notEmpty(arr), empty(n) FROM t_func_to_subcolumns;
 
 SELECT mapKeys(m), mapValues(m) FROM t_func_to_subcolumns;
-EXPLAIN SYNTAX SELECT mapKeys(m), mapValues(m) FROM t_func_to_subcolumns;
+EXPLAIN QUERY TREE dump_tree = 1, dump_ast = 1 SELECT mapKeys(m), mapValues(m) FROM t_func_to_subcolumns;
 
 SELECT count(n) FROM t_func_to_subcolumns;
-EXPLAIN SYNTAX SELECT count(n) FROM t_func_to_subcolumns;
+EXPLAIN QUERY TREE dump_tree = 1, dump_ast = 1 SELECT count(n) FROM t_func_to_subcolumns;
 
 SELECT count(id) FROM t_func_to_subcolumns;
-EXPLAIN SYNTAX SELECT count(id) FROM t_func_to_subcolumns;
+EXPLAIN QUERY TREE dump_tree = 1, dump_ast = 1 SELECT count(id) FROM t_func_to_subcolumns;
 
 SELECT id, left.n IS NULL, right.n IS NULL FROM t_func_to_subcolumns AS left
 FULL JOIN (SELECT 1 AS id, 'qqq' AS n UNION ALL SELECT 3 AS id, 'www') AS right USING(id);
 
-EXPLAIN SYNTAX SELECT id, left.n IS NULL, right.n IS NULL FROM t_func_to_subcolumns AS left
+EXPLAIN QUERY TREE dump_tree = 1, dump_ast = 1 SELECT id, left.n IS NULL, right.n IS NULL FROM t_func_to_subcolumns AS left
 FULL JOIN (SELECT 1 AS id, 'qqq' AS n UNION ALL SELECT 3 AS id, 'www') AS right USING(id);
 
 DROP TABLE t_func_to_subcolumns;
diff --git a/tests/queries/0_stateless/02115_map_contains.reference b/tests/queries/0_stateless/02115_map_contains.reference
deleted file mode 100644
index 975e9876237d..000000000000
--- a/tests/queries/0_stateless/02115_map_contains.reference
+++ /dev/null
@@ -1,4 +0,0 @@
-SELECT has(`m.keys`, \'a\')
-FROM t_map_contains
-1
-0
diff --git a/tests/queries/0_stateless/02115_map_contains_analyzer.reference b/tests/queries/0_stateless/02115_map_contains_analyzer.reference
new file mode 100644
index 000000000000..7da5243e7270
--- /dev/null
+++ b/tests/queries/0_stateless/02115_map_contains_analyzer.reference
@@ -0,0 +1,4 @@
+SELECT has(__table1.`m.keys`, \'a\') AS `mapContains(m, \'a\')`
+FROM default.t_map_contains AS __table1
+1
+0
diff --git a/tests/queries/0_stateless/02115_map_contains.sql b/tests/queries/0_stateless/02115_map_contains_analyzer.sql
similarity index 70%
rename from tests/queries/0_stateless/02115_map_contains.sql
rename to tests/queries/0_stateless/02115_map_contains_analyzer.sql
index 3c7f21cb4f17..46e02eca4f05 100644
--- a/tests/queries/0_stateless/02115_map_contains.sql
+++ b/tests/queries/0_stateless/02115_map_contains_analyzer.sql
@@ -5,8 +5,9 @@ CREATE TABLE t_map_contains (m Map(String, UInt32)) ENGINE = Memory;
 INSERT INTO t_map_contains VALUES (map('a', 1, 'b', 2)), (map('c', 3, 'd', 4));
 
 SET optimize_functions_to_subcolumns = 1;
+SET allow_experimental_analyzer = 1;
 
-EXPLAIN SYNTAX SELECT mapContains(m, 'a') FROM t_map_contains;
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT mapContains(m, 'a') FROM t_map_contains;
 SELECT mapContains(m, 'a') FROM t_map_contains;
 
 DROP TABLE t_map_contains;
diff --git a/tests/queries/0_stateless/02116_tuple_element.reference b/tests/queries/0_stateless/02116_tuple_element.reference
deleted file mode 100644
index 121b08d02f1f..000000000000
--- a/tests/queries/0_stateless/02116_tuple_element.reference
+++ /dev/null
@@ -1,25 +0,0 @@
-1
-SELECT `t1.a`
-FROM t_tuple_element
-a
-SELECT `t1.s`
-FROM t_tuple_element
-1
-SELECT `t1.a`
-FROM t_tuple_element
-2
-SELECT `t2.1`
-FROM t_tuple_element
-2
-SELECT `t2.1`
-FROM t_tuple_element
-1	2
-WITH (1, 2) AS t
-SELECT
-    t.1,
-    t.2
-1	2
-WITH CAST(\'(1, 2)\', \'Tuple(a UInt32, b UInt32)\') AS t
-SELECT
-    t.1,
-    tupleElement(t, \'b\')
diff --git a/tests/queries/0_stateless/02116_tuple_element_analyzer.reference b/tests/queries/0_stateless/02116_tuple_element_analyzer.reference
new file mode 100644
index 000000000000..22d48ffb2f37
--- /dev/null
+++ b/tests/queries/0_stateless/02116_tuple_element_analyzer.reference
@@ -0,0 +1,25 @@
+1
+SELECT __table1.`t1.a` AS `tupleElement(t1, 1)`
+FROM default.t_tuple_element AS __table1
+a
+SELECT __table1.`t1.s` AS `tupleElement(t1, 2)`
+FROM default.t_tuple_element AS __table1
+1
+SELECT __table1.`t1.a` AS `tupleElement(t1, \'a\')`
+FROM default.t_tuple_element AS __table1
+2
+SELECT __table1.`t2.1` AS `tupleElement(t2, 1)`
+FROM default.t_tuple_element AS __table1
+2
+SELECT __table1.`t2.1` AS `tupleElement(t2, 1)`
+FROM default.t_tuple_element AS __table1
+1	2
+SELECT
+    _CAST(1, \'UInt8\') AS `tupleElement(t, 1)`,
+    _CAST(2, \'UInt8\') AS `tupleElement(t, 2)`
+FROM system.one AS __table1
+1	2
+SELECT
+    _CAST(1, \'UInt32\') AS `tupleElement(t, 1)`,
+    _CAST(2, \'UInt32\') AS `tupleElement(t, \'b\')`
+FROM system.one AS __table1
diff --git a/tests/queries/0_stateless/02116_tuple_element.sql b/tests/queries/0_stateless/02116_tuple_element_analyzer.sql
similarity index 60%
rename from tests/queries/0_stateless/02116_tuple_element.sql
rename to tests/queries/0_stateless/02116_tuple_element_analyzer.sql
index 64d9b9db331a..5aeb72c9ee47 100644
--- a/tests/queries/0_stateless/02116_tuple_element.sql
+++ b/tests/queries/0_stateless/02116_tuple_element_analyzer.sql
@@ -4,39 +4,40 @@ CREATE TABLE t_tuple_element(t1 Tuple(a UInt32, s String), t2 Tuple(UInt32, Stri
 INSERT INTO t_tuple_element VALUES ((1, 'a'), (2, 'b'));
 
 SET optimize_functions_to_subcolumns = 1;
+SET allow_experimental_analyzer = 1;
 
 SELECT t1.1 FROM t_tuple_element;
-EXPLAIN SYNTAX SELECT t1.1 FROM t_tuple_element;
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT t1.1 FROM t_tuple_element;
 
 SELECT tupleElement(t1, 2) FROM t_tuple_element;
-EXPLAIN SYNTAX SELECT tupleElement(t1, 2) FROM t_tuple_element;
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT tupleElement(t1, 2) FROM t_tuple_element;
 
 SELECT tupleElement(t1, 'a') FROM t_tuple_element;
-EXPLAIN SYNTAX SELECT tupleElement(t1, 'a') FROM t_tuple_element;
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT tupleElement(t1, 'a') FROM t_tuple_element;
 
 SELECT tupleElement(number, 1) FROM numbers(1); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 SELECT tupleElement(t1) FROM t_tuple_element; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
 SELECT tupleElement(t1, 'b') FROM t_tuple_element; -- { serverError NOT_FOUND_COLUMN_IN_BLOCK, UNKNOWN_IDENTIFIER }
-SELECT tupleElement(t1, 0) FROM t_tuple_element; -- { serverError ILLEGAL_INDEX, NOT_FOUND_COLUMN_IN_BLOCK }
-SELECT tupleElement(t1, 3) FROM t_tuple_element; -- { serverError ILLEGAL_INDEX, NOT_FOUND_COLUMN_IN_BLOCK }
-SELECT tupleElement(t1, materialize('a')) FROM t_tuple_element; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT, NOT_FOUND_COLUMN_IN_BLOCK }
+SELECT tupleElement(t1, 0) FROM t_tuple_element; -- { serverError ARGUMENT_OUT_OF_BOUND, NOT_FOUND_COLUMN_IN_BLOCK }
+SELECT tupleElement(t1, 3) FROM t_tuple_element; -- { serverError ARGUMENT_OUT_OF_BOUND, NOT_FOUND_COLUMN_IN_BLOCK }
+SELECT tupleElement(t1, materialize('a')) FROM t_tuple_element; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 
 SELECT t2.1 FROM t_tuple_element;
-EXPLAIN SYNTAX SELECT t2.1 FROM t_tuple_element;
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT t2.1 FROM t_tuple_element;
 
 SELECT tupleElement(t2, 1) FROM t_tuple_element;
-EXPLAIN SYNTAX SELECT tupleElement(t2, 1) FROM t_tuple_element;
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT tupleElement(t2, 1) FROM t_tuple_element;
 
 SELECT tupleElement(t2) FROM t_tuple_element; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
 SELECT tupleElement(t2, 'a') FROM t_tuple_element; -- { serverError NOT_FOUND_COLUMN_IN_BLOCK, UNKNOWN_IDENTIFIER }
-SELECT tupleElement(t2, 0) FROM t_tuple_element; -- { serverError ILLEGAL_INDEX, NOT_FOUND_COLUMN_IN_BLOCK }
-SELECT tupleElement(t2, 3) FROM t_tuple_element; -- { serverError ILLEGAL_INDEX, NOT_FOUND_COLUMN_IN_BLOCK }
-SELECT tupleElement(t2, materialize(1)) FROM t_tuple_element; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT, NOT_FOUND_COLUMN_IN_BLOCK }
+SELECT tupleElement(t2, 0) FROM t_tuple_element; -- { serverError ARGUMENT_OUT_OF_BOUND, NOT_FOUND_COLUMN_IN_BLOCK }
+SELECT tupleElement(t2, 3) FROM t_tuple_element; -- { serverError ARGUMENT_OUT_OF_BOUND, NOT_FOUND_COLUMN_IN_BLOCK }
+SELECT tupleElement(t2, materialize(1)) FROM t_tuple_element; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 
 DROP TABLE t_tuple_element;
 
 WITH (1, 2) AS t SELECT t.1, t.2;
-EXPLAIN SYNTAX WITH (1, 2) AS t SELECT t.1, t.2;
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 WITH (1, 2) AS t SELECT t.1, t.2;
 
 WITH (1, 2)::Tuple(a UInt32, b UInt32) AS t SELECT t.1, tupleElement(t, 'b');
-EXPLAIN SYNTAX WITH (1, 2)::Tuple(a UInt32, b UInt32) AS t SELECT t.1, tupleElement(t, 'b');
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 WITH (1, 2)::Tuple(a UInt32, b UInt32) AS t SELECT t.1, tupleElement(t, 'b');
diff --git a/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql b/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql
index f723284ad619..151ff275f7b5 100644
--- a/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql
+++ b/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql
@@ -12,9 +12,9 @@ SELECT * FROM t_tuple_numeric FORMAT JSONEachRow;
 SELECT `t`.`1`.`2`, `t`.`1`.`3`, `t`.`4` FROM t_tuple_numeric;
 SELECT t.1.1, t.1.2, t.2 FROM t_tuple_numeric;
 
-SELECT t.1.3 FROM t_tuple_numeric; -- {serverError NOT_FOUND_COLUMN_IN_BLOCK}
-SELECT t.4 FROM t_tuple_numeric; -- {serverError NOT_FOUND_COLUMN_IN_BLOCK}
-SELECT `t`.`1`.`1`, `t`.`1`.`2`, `t`.`2` FROM t_tuple_numeric; -- {serverError UNKNOWN_IDENTIFIER}
+SELECT t.1.3 FROM t_tuple_numeric; -- {serverError NOT_FOUND_COLUMN_IN_BLOCK, ARGUMENT_OUT_OF_BOUND}
+SELECT t.4 FROM t_tuple_numeric; -- {serverError NOT_FOUND_COLUMN_IN_BLOCK, ARGUMENT_OUT_OF_BOUND}
+SELECT `t`.`1`.`1`, `t`.`1`.`2`, `t`.`2` FROM t_tuple_numeric; -- {serverError UNKNOWN_IDENTIFIER, ARGUMENT_OUT_OF_BOUND}
 
 DROP TABLE t_tuple_numeric;
 
diff --git a/tests/queries/0_stateless/02971_functions_to_subcolumns_column_names.reference b/tests/queries/0_stateless/02971_functions_to_subcolumns_column_names.reference
new file mode 100644
index 000000000000..3389ea44074b
--- /dev/null
+++ b/tests/queries/0_stateless/02971_functions_to_subcolumns_column_names.reference
@@ -0,0 +1,5 @@
+SELECT
+    __table1.`arr.size0` AS `length(arr)`,
+    __table1.`n.null` AS `isNull(n)`
+FROM default.t_column_names AS __table1
+{"length(arr)":"3","isNull(n)":0}
diff --git a/tests/queries/0_stateless/02971_functions_to_subcolumns_column_names.sql b/tests/queries/0_stateless/02971_functions_to_subcolumns_column_names.sql
new file mode 100644
index 000000000000..48e5232d18b3
--- /dev/null
+++ b/tests/queries/0_stateless/02971_functions_to_subcolumns_column_names.sql
@@ -0,0 +1,13 @@
+DROP TABLE IF EXISTS t_column_names;
+
+CREATE TABLE t_column_names (arr Array(UInt64), n Nullable(String)) ENGINE = Memory;
+
+INSERT INTO t_column_names VALUES ([1, 2, 3], 'foo');
+
+SET optimize_functions_to_subcolumns = 1;
+SET allow_experimental_analyzer = 1;
+
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT length(arr), isNull(n) FROM t_column_names;
+SELECT length(arr), isNull(n) FROM t_column_names FORMAT JSONEachRow;
+
+DROP TABLE t_column_names;
diff --git a/tests/queries/0_stateless/02971_functions_to_subcolumns_map.reference b/tests/queries/0_stateless/02971_functions_to_subcolumns_map.reference
new file mode 100644
index 000000000000..9488291c8ffa
--- /dev/null
+++ b/tests/queries/0_stateless/02971_functions_to_subcolumns_map.reference
@@ -0,0 +1,12 @@
+SELECT __table1.`m.size0` AS `length(m)`
+FROM default.t_func_to_subcolumns_map AS __table1
+2
+1
+SELECT __table1.`m.size0` = 0 AS `empty(m)`
+FROM default.t_func_to_subcolumns_map AS __table1
+0
+0
+SELECT __table1.`m.size0` != 0 AS `notEmpty(m)`
+FROM default.t_func_to_subcolumns_map AS __table1
+1
+1
diff --git a/tests/queries/0_stateless/02971_functions_to_subcolumns_map.sql b/tests/queries/0_stateless/02971_functions_to_subcolumns_map.sql
new file mode 100644
index 000000000000..e8a752a82d52
--- /dev/null
+++ b/tests/queries/0_stateless/02971_functions_to_subcolumns_map.sql
@@ -0,0 +1,19 @@
+DROP TABLE IF EXISTS t_func_to_subcolumns_map;
+
+CREATE TABLE t_func_to_subcolumns_map (id UInt64, m Map(String, UInt64)) ENGINE = MergeTree ORDER BY id;
+
+INSERT INTO t_func_to_subcolumns_map VALUES (1, map('aaa', 1, 'bbb', 2)) (2, map('ccc', 3));
+
+SET optimize_functions_to_subcolumns = 1;
+SET allow_experimental_analyzer = 1;
+
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT length(m) FROM t_func_to_subcolumns_map;
+SELECT length(m) FROM t_func_to_subcolumns_map;
+
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT empty(m) FROM t_func_to_subcolumns_map;
+SELECT empty(m) FROM t_func_to_subcolumns_map;
+
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT notEmpty(m) FROM t_func_to_subcolumns_map;
+SELECT notEmpty(m) FROM t_func_to_subcolumns_map;
+
+DROP TABLE t_func_to_subcolumns_map;
diff --git a/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.reference b/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.reference
new file mode 100644
index 000000000000..04616738a159
--- /dev/null
+++ b/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.reference
@@ -0,0 +1,4 @@
+SELECT __table1.`v.String` AS `variantElement(v, \'String\')`
+FROM default.t_func_to_subcolumns_variant AS __table1
+foo
+\N
diff --git a/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.sql b/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.sql
new file mode 100644
index 000000000000..511bcc445145
--- /dev/null
+++ b/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.sql
@@ -0,0 +1,15 @@
+DROP TABLE IF EXISTS t_func_to_subcolumns_variant;
+
+SET allow_experimental_variant_type = 1;
+
+CREATE TABLE t_func_to_subcolumns_variant (id UInt64, v Variant(String, UInt64)) ENGINE = MergeTree ORDER BY id;
+
+INSERT INTO t_func_to_subcolumns_variant VALUES (1, 'foo') (2, 111);
+
+SET optimize_functions_to_subcolumns = 1;
+SET allow_experimental_analyzer = 1;
+
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT variantElement(v, 'String') FROM t_func_to_subcolumns_variant;
+SELECT variantElement(v, 'String') FROM t_func_to_subcolumns_variant;
+
+DROP TABLE t_func_to_subcolumns_variant;
diff --git a/tests/queries/0_stateless/03003_functions_to_subcolumns_final.reference b/tests/queries/0_stateless/03003_functions_to_subcolumns_final.reference
new file mode 100644
index 000000000000..3051c1993631
--- /dev/null
+++ b/tests/queries/0_stateless/03003_functions_to_subcolumns_final.reference
@@ -0,0 +1,25 @@
+3
+2
+SELECT __table1.`arr.size0` AS `length(arr)`
+FROM default.t_length_1 AS __table1
+WHERE __table1.`arr.size0` IN (
+    SELECT __table1.arr_length AS arr_length
+    FROM default.t_length_2 AS __table1
+)
+2
+SELECT __table1.`arr.size0` AS `length(arr)`
+FROM default.t_length_1 AS __table1
+WHERE __table1.`arr.size0` IN (
+    SELECT __table1.arr_length AS arr_length
+    FROM default.t_length_2 AS __table1
+    FINAL
+)
+2
+SELECT length(__table1.arr) AS `length(arr)`
+FROM default.t_length_1 AS __table1
+FINAL
+WHERE length(__table1.arr) IN (
+    SELECT __table1.arr_length AS arr_length
+    FROM default.t_length_2 AS __table1
+    FINAL
+)
diff --git a/tests/queries/0_stateless/03003_functions_to_subcolumns_final.sql b/tests/queries/0_stateless/03003_functions_to_subcolumns_final.sql
new file mode 100644
index 000000000000..3fe29139c5fa
--- /dev/null
+++ b/tests/queries/0_stateless/03003_functions_to_subcolumns_final.sql
@@ -0,0 +1,24 @@
+DROP TABLE IF EXISTS t_length_1;
+DROP TABLE IF EXISTS t_length_2;
+
+SET optimize_functions_to_subcolumns = 1;
+SET allow_experimental_analyzer = 1;
+SET optimize_on_insert = 0;
+
+CREATE TABLE t_length_1 (id UInt64, arr Array(UInt64)) ENGINE = ReplacingMergeTree ORDER BY id;
+CREATE TABLE t_length_2 (id UInt64, arr_length UInt64) ENGINE = ReplacingMergeTree ORDER BY id;
+
+INSERT INTO t_length_1 VALUES (1, [1, 2, 3]), (2, [4, 5]);
+INSERT INTO t_length_2 VALUES (1, 3), (1, 2), (2, 2);
+
+SELECT length(arr) FROM t_length_1 WHERE length(arr) in (SELECT arr_length FROM t_length_2);
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT length(arr) FROM t_length_1 WHERE length(arr) in (SELECT arr_length FROM t_length_2);
+
+SELECT length(arr) FROM t_length_1 WHERE length(arr) in (SELECT arr_length FROM t_length_2 FINAL);
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT length(arr) FROM t_length_1 WHERE length(arr) in (SELECT arr_length FROM t_length_2 FINAL);
+
+SELECT length(arr) FROM t_length_1 FINAL WHERE length(arr) in (SELECT arr_length FROM t_length_2 FINAL);
+EXPLAIN QUERY TREE dump_tree = 0, dump_ast = 1 SELECT length(arr) FROM t_length_1 FINAL WHERE length(arr) in (SELECT arr_length FROM t_length_2 FINAL);
+
+DROP TABLE t_length_1;
+DROP TABLE t_length_2;
diff --git a/tests/queries/0_stateless/03171_function_to_subcolumns_fuzzer.reference b/tests/queries/0_stateless/03171_function_to_subcolumns_fuzzer.reference
new file mode 100644
index 000000000000..1fc6683620c9
--- /dev/null
+++ b/tests/queries/0_stateless/03171_function_to_subcolumns_fuzzer.reference
@@ -0,0 +1,9 @@
+1
+2	1
+3	0
+0	450
+1	460
+2	470
+3	480
+4	490
+\N	4950
diff --git a/tests/queries/0_stateless/03171_function_to_subcolumns_fuzzer.sql b/tests/queries/0_stateless/03171_function_to_subcolumns_fuzzer.sql
new file mode 100644
index 000000000000..f10019a78dda
--- /dev/null
+++ b/tests/queries/0_stateless/03171_function_to_subcolumns_fuzzer.sql
@@ -0,0 +1,49 @@
+SET optimize_functions_to_subcolumns = 1;
+SET allow_experimental_analyzer = 1;
+
+DROP TABLE IF EXISTS t_func_to_subcolumns_map_2;
+
+CREATE TABLE t_func_to_subcolumns_map_2 (id UInt64, m Map(String, UInt64)) ENGINE = MergeTree ORDER BY id;
+
+INSERT INTO t_func_to_subcolumns_map_2 VALUES (1, map('aaa', 1, 'bbb', 2)) (2, map('ccc', 3));
+
+SELECT sum(mapContains(m, toNullable('aaa'))) FROM t_func_to_subcolumns_map_2;
+
+DROP TABLE t_func_to_subcolumns_map_2;
+
+DROP TABLE IF EXISTS t_func_to_subcolumns_join;
+
+CREATE TABLE t_func_to_subcolumns_join (id UInt64, arr Array(UInt64), n Nullable(String), m Map(String, UInt64))
+ENGINE = MergeTree ORDER BY tuple();
+
+INSERT INTO t_func_to_subcolumns_join VALUES (1, [1, 2, 3], 'abc', map('foo', 1, 'bar', 2)) (2, [], NULL, map());
+
+SET join_use_nulls = 1;
+
+SELECT
+    id,
+    right.n IS NULL
+FROM t_func_to_subcolumns_join AS left
+FULL OUTER JOIN
+(
+    SELECT
+        1 AS id,
+        'qqq' AS n
+    UNION ALL
+    SELECT
+        3 AS id,
+        'www'
+) AS right USING (id)
+WHERE empty(arr);
+
+DROP TABLE t_func_to_subcolumns_join;
+
+DROP TABLE IF EXISTS t_func_to_subcolumns_use_nulls;
+
+CREATE TABLE t_func_to_subcolumns_use_nulls (arr Array(UInt64), v UInt64) ENGINE = MergeTree ORDER BY tuple();
+
+INSERT INTO t_func_to_subcolumns_use_nulls SELECT range(number % 10), number FROM numbers(100);
+
+SELECT length(arr) AS n, sum(v) FROM t_func_to_subcolumns_use_nulls GROUP BY n WITH ROLLUP HAVING n <= 4 OR isNull(n) ORDER BY n SETTINGS group_by_use_nulls = 1;
+
+DROP TABLE t_func_to_subcolumns_use_nulls;
