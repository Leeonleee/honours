You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
optimize_functions_to_subcolumns: Can't adjust last granule because it has 113 rows, but try to subtract 41073 rows
Comes from https://github.com/ClickHouse/ClickHouse/pull/57315:

Report: https://s3.amazonaws.com/clickhouse-test-reports/57315/ade60b5b45283adddfcf166d5a5c865c7a4da16f/stateful_tests__aarch64_.html

```
2023-11-28 06:16:57 [f792f6c66554] 2023.11.28 07:16:56.966026 [ 2828 ] {6b1377df-bd21-4ff5-a92a-4ed2100789fd} <Error> executeQuery: Code: 49. DB::Exception: Can't adjust last granule because it has 113 rows, but try to subtract 41073 rows.: While executing MergeTreeSelect(pool: ReadPool, algorithm: Thread). (LOGICAL_ERROR) (version 23.11.1.2032) (from [::1]:41868) (comment: 00083_array_filter.sql) (in query: SELECT sum(length(ParsedParams.Key1)) FROM test.hits WHERE notEmpty(ParsedParams.Key1);), Stack trace (when copying this message, always include the lines below):
2023-11-28 06:16:57 
2023-11-28 06:16:57 0. ./build_docker/./src/Common/Exception.cpp:97: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000bad1a48 in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 1. DB::Exception::Exception<unsigned long&, unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type, std::type_identity<unsigned long&>::type>, unsigned long&, unsigned long&) @ 0x0000000007dae080 in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 2. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:318: DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x0000000010a36c58 in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 3. ./build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:163: DB::MergeTreeReadTask::read(DB::MergeTreeReadTask::BlockSizeParams const&) @ 0x0000000010a39f54 in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 4. ./build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:162: DB::MergeTreeSelectProcessor::read() @ 0x0000000010a28f14 in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 5. ./build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:181: DB::MergeTreeSource::tryGenerate() @ 0x000000001115a76c in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 6. ./contrib/llvm-project/libcxx/include/optional:344: DB::ISource::work() @ 0x0000000010d73e74 in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 7. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:52: DB::ExecutionThreadContext::executeTask() @ 0x0000000010d87bec in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 8. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000010d80054 in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 9. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:381: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000010d8117c in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 10. ./base/base/../base/wide_integer_impl.h:809: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000bb99e2c in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 11. ./src/Common/ThreadPool.h:251: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000bb9d360 in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 12. ./base/base/../base/wide_integer_impl.h:809: void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000bb9bfb4 in /usr/lib/debug/usr/bin/clickhouse.debug
2023-11-28 06:16:57 13. ? @ 0x000000000007d5c8 in /usr/lib/aarch64-linux
```

Reproducer:
```
clickhouse client --queries-file 00083_array_filter.sql --optimize_functions_to_subcolumns 1
```


cc @CurtizJ Do you think it's worth fixing it or should we drop the feature (before thinking on adding it to the analyzer)? It's never been enabled by default
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
