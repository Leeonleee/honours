diff --git a/src/Dictionaries/NullDictionarySource.cpp b/src/Dictionaries/NullDictionarySource.cpp
new file mode 100644
index 000000000000..45dcc77f93d0
--- /dev/null
+++ b/src/Dictionaries/NullDictionarySource.cpp
@@ -0,0 +1,48 @@
+#include "NullDictionarySource.h"
+#include <Interpreters/Context.h>
+#include <Processors/Sources/NullSource.h>
+#include <Common/logger_useful.h>
+#include "DictionarySourceFactory.h"
+#include "DictionarySourceHelpers.h"
+#include "DictionaryStructure.h"
+#include "registerDictionaries.h"
+
+
+namespace DB
+{
+NullDictionarySource::NullDictionarySource(Block & sample_block_) : sample_block(sample_block_)
+{
+}
+
+NullDictionarySource::NullDictionarySource(const NullDictionarySource & other) : sample_block(other.sample_block)
+{
+}
+
+QueryPipeline NullDictionarySource::loadAll()
+{
+    LOG_TRACE(&Poco::Logger::get("NullDictionarySource"), "loadAll {}", toString());
+    return QueryPipeline(std::make_shared<NullSource>(sample_block));
+}
+
+
+std::string NullDictionarySource::toString() const
+{
+    return "Null";
+}
+
+
+void registerDictionarySourceNull(DictionarySourceFactory & factory)
+{
+    auto create_table_source
+        = [=](const DictionaryStructure & /* dict_struct */,
+              const Poco::Util::AbstractConfiguration & /* config */,
+              const std::string & /* config_prefix */,
+              Block & sample_block,
+              ContextPtr /* global_context */,
+              const std::string & /* default_database */,
+              bool /* created_from_ddl*/) -> DictionarySourcePtr { return std::make_unique<NullDictionarySource>(sample_block); };
+
+    factory.registerSource("null", create_table_source);
+}
+
+}
diff --git a/src/Dictionaries/NullDictionarySource.h b/src/Dictionaries/NullDictionarySource.h
new file mode 100644
index 000000000000..7eb02055e3ab
--- /dev/null
+++ b/src/Dictionaries/NullDictionarySource.h
@@ -0,0 +1,53 @@
+#pragma once
+
+#include <Core/Block.h>
+#include "IDictionarySource.h"
+
+namespace DB
+{
+namespace ErrorCodes
+{
+    extern const int NOT_IMPLEMENTED;
+}
+
+/// Allows creating empty dictionary
+class NullDictionarySource final : public IDictionarySource
+{
+public:
+    NullDictionarySource(Block & sample_block_);
+
+    NullDictionarySource(const NullDictionarySource & other);
+
+    QueryPipeline loadAll() override;
+
+    QueryPipeline loadUpdatedAll() override
+    {
+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, "Method loadUpdatedAll is unsupported for NullDictionarySource");
+    }
+
+    QueryPipeline loadIds(const std::vector<UInt64> & /*ids*/) override
+    {
+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, "Method loadIds is unsupported for NullDictionarySource");
+    }
+
+    QueryPipeline loadKeys(const Columns & /*key_columns*/, const std::vector<size_t> & /*requested_rows*/) override
+    {
+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, "Method loadKeys is unsupported for NullDictionarySource");
+    }
+
+    bool isModified() const override { return false; }
+
+    bool supportsSelectiveLoad() const override { return false; }
+
+    ///Not supported for NullDictionarySource
+    bool hasUpdateField() const override { return false; }
+
+    DictionarySourcePtr clone() const override { return std::make_shared<NullDictionarySource>(*this); }
+
+    std::string toString() const override;
+
+private:
+    Block sample_block;
+};
+
+}
diff --git a/src/Dictionaries/registerDictionaries.cpp b/src/Dictionaries/registerDictionaries.cpp
index 4ade5d88bd43..f0526f4ce376 100644
--- a/src/Dictionaries/registerDictionaries.cpp
+++ b/src/Dictionaries/registerDictionaries.cpp
@@ -6,6 +6,7 @@ namespace DB
 
 class DictionarySourceFactory;
 
+void registerDictionarySourceNull(DictionarySourceFactory & factory);
 void registerDictionarySourceFile(DictionarySourceFactory & source_factory);
 void registerDictionarySourceMysql(DictionarySourceFactory & source_factory);
 void registerDictionarySourceClickHouse(DictionarySourceFactory & source_factory);
@@ -36,6 +37,7 @@ void registerDictionaries()
 {
     {
         auto & source_factory = DictionarySourceFactory::instance();
+        registerDictionarySourceNull(source_factory);
         registerDictionarySourceFile(source_factory);
         registerDictionarySourceMysql(source_factory);
         registerDictionarySourceClickHouse(source_factory);
