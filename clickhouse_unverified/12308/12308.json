{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12308,
  "instance_id": "ClickHouse__ClickHouse-12308",
  "issue_numbers": [
    "12110"
  ],
  "base_commit": "7799dc2f9ce591c62fcc1df456670b85c40e20e3",
  "patch": "diff --git a/src/Compression/CompressionCodecDelta.cpp b/src/Compression/CompressionCodecDelta.cpp\nindex 6c7cf92a41df..50f449bef514 100644\n--- a/src/Compression/CompressionCodecDelta.cpp\n+++ b/src/Compression/CompressionCodecDelta.cpp\n@@ -13,10 +13,11 @@ namespace DB\n \n namespace ErrorCodes\n {\n-extern const int CANNOT_COMPRESS;\n-extern const int CANNOT_DECOMPRESS;\n-extern const int ILLEGAL_SYNTAX_FOR_CODEC_TYPE;\n-extern const int ILLEGAL_CODEC_PARAMETER;\n+    extern const int CANNOT_COMPRESS;\n+    extern const int CANNOT_DECOMPRESS;\n+    extern const int ILLEGAL_SYNTAX_FOR_CODEC_TYPE;\n+    extern const int ILLEGAL_CODEC_PARAMETER;\n+    extern const int BAD_ARGUMENTS;\n }\n \n CompressionCodecDelta::CompressionCodecDelta(UInt8 delta_bytes_size_)\n@@ -31,7 +32,7 @@ uint8_t CompressionCodecDelta::getMethodByte() const\n \n String CompressionCodecDelta::getCodecDesc() const\n {\n-    return \"Delta(\" + toString(delta_bytes_size) + \")\";\n+    return fmt::format(\"Delta({})\", size_t(delta_bytes_size));\n }\n \n namespace\n@@ -41,7 +42,7 @@ template <typename T>\n void compressDataForType(const char * source, UInt32 source_size, char * dest)\n {\n     if (source_size % sizeof(T) != 0)\n-        throw Exception(\"Cannot delta compress, data size \" + toString(source_size) + \" is not aligned to \" + toString(sizeof(T)), ErrorCodes::CANNOT_COMPRESS);\n+        throw Exception(ErrorCodes::CANNOT_COMPRESS, \"Cannot delta compress, data size {}  is not aligned to {}\", source_size, sizeof(T));\n \n     T prev_src{};\n     const char * source_end = source + source_size;\n@@ -60,7 +61,7 @@ template <typename T>\n void decompressDataForType(const char * source, UInt32 source_size, char * dest)\n {\n     if (source_size % sizeof(T) != 0)\n-        throw Exception(\"Cannot delta decompress, data size \" + toString(source_size) + \" is not aligned to \" + toString(sizeof(T)), ErrorCodes::CANNOT_DECOMPRESS);\n+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot delta decompress, data size {}  is not aligned to {}\", source_size, sizeof(T));\n \n     T accumulator{};\n     const char * source_end = source + source_size;\n@@ -136,19 +137,21 @@ namespace\n \n UInt8 getDeltaBytesSize(DataTypePtr column_type)\n {\n-    UInt8 delta_bytes_size = 1;\n-    if (column_type && column_type->haveMaximumSizeOfValue())\n-    {\n-        size_t max_size = column_type->getSizeOfValueInMemory();\n-        if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)\n-            delta_bytes_size = static_cast<UInt8>(max_size);\n-    }\n-    return delta_bytes_size;\n+    if (!column_type->isValueUnambiguouslyRepresentedInFixedSizeContiguousMemoryRegion())\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Codec Delta is not applicable for {} because the data type is not of fixed size\",\n+            column_type->getName());\n+\n+    size_t max_size = column_type->getSizeOfValueInMemory();\n+    if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)\n+        return static_cast<UInt8>(max_size);\n+    else\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Codec Delta is only applicable for data types of size 1, 2, 4, 8 bytes. Given type {}\",\n+            column_type->getName());\n }\n \n }\n \n-void CompressionCodecDelta::useInfoAboutType(DataTypePtr data_type)\n+void CompressionCodecDelta::useInfoAboutType(const DataTypePtr & data_type)\n {\n     delta_bytes_size = getDeltaBytesSize(data_type);\n }\n@@ -158,7 +161,8 @@ void registerCodecDelta(CompressionCodecFactory & factory)\n     UInt8 method_code = UInt8(CompressionMethodByte::Delta);\n     factory.registerCompressionCodecWithType(\"Delta\", method_code, [&](const ASTPtr & arguments, DataTypePtr column_type) -> CompressionCodecPtr\n     {\n-        UInt8 delta_bytes_size = getDeltaBytesSize(column_type);\n+        UInt8 delta_bytes_size = 0;\n+\n         if (arguments && !arguments->children.empty())\n         {\n             if (arguments->children.size() > 1)\n@@ -174,6 +178,11 @@ void registerCodecDelta(CompressionCodecFactory & factory)\n                 throw Exception(\"Delta value for delta codec can be 1, 2, 4 or 8, given \" + toString(user_bytes_size), ErrorCodes::ILLEGAL_CODEC_PARAMETER);\n             delta_bytes_size = static_cast<UInt8>(user_bytes_size);\n         }\n+        else if (column_type)\n+        {\n+            delta_bytes_size = getDeltaBytesSize(column_type);\n+        }\n+\n         return std::make_shared<CompressionCodecDelta>(delta_bytes_size);\n     });\n }\ndiff --git a/src/Compression/CompressionCodecDelta.h b/src/Compression/CompressionCodecDelta.h\nindex 1077a7915351..7bc5d9ceb7a3 100644\n--- a/src/Compression/CompressionCodecDelta.h\n+++ b/src/Compression/CompressionCodecDelta.h\n@@ -14,7 +14,7 @@ class CompressionCodecDelta : public ICompressionCodec\n \n     String getCodecDesc() const override;\n \n-    void useInfoAboutType(DataTypePtr data_type) override;\n+    void useInfoAboutType(const DataTypePtr & data_type) override;\n \n protected:\n     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;\n@@ -30,7 +30,4 @@ class CompressionCodecDelta : public ICompressionCodec\n     UInt8 delta_bytes_size;\n };\n \n-class CompressionCodecFactory;\n-void registerCodecDelta(CompressionCodecFactory & factory);\n-\n }\ndiff --git a/src/Compression/CompressionCodecDoubleDelta.cpp b/src/Compression/CompressionCodecDoubleDelta.cpp\nindex 5ed9916037db..f45fc82a3704 100644\n--- a/src/Compression/CompressionCodecDoubleDelta.cpp\n+++ b/src/Compression/CompressionCodecDoubleDelta.cpp\n@@ -19,8 +19,9 @@ namespace DB\n \n namespace ErrorCodes\n {\n-extern const int CANNOT_COMPRESS;\n-extern const int CANNOT_DECOMPRESS;\n+    extern const int CANNOT_COMPRESS;\n+    extern const int CANNOT_DECOMPRESS;\n+    extern const int BAD_ARGUMENTS;\n }\n \n namespace\n@@ -307,14 +308,16 @@ void decompressDataForType(const char * source, UInt32 source_size, char * dest)\n \n UInt8 getDataBytesSize(DataTypePtr column_type)\n {\n-    UInt8 data_bytes_size = 1;\n-    if (column_type && column_type->haveMaximumSizeOfValue())\n-    {\n-        size_t max_size = column_type->getSizeOfValueInMemory();\n-        if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)\n-            data_bytes_size = static_cast<UInt8>(max_size);\n-    }\n-    return data_bytes_size;\n+    if (!column_type->isValueUnambiguouslyRepresentedInFixedSizeContiguousMemoryRegion())\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Codec DoubleDelta is not applicable for {} because the data type is not of fixed size\",\n+            column_type->getName());\n+\n+    size_t max_size = column_type->getSizeOfValueInMemory();\n+    if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)\n+        return static_cast<UInt8>(max_size);\n+    else\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Codec Delta is only applicable for data types of size 1, 2, 4, 8 bytes. Given type {}\",\n+            column_type->getName());\n }\n \n }\n@@ -403,7 +406,7 @@ void CompressionCodecDoubleDelta::doDecompressData(const char * source, UInt32 s\n     }\n }\n \n-void CompressionCodecDoubleDelta::useInfoAboutType(DataTypePtr data_type)\n+void CompressionCodecDoubleDelta::useInfoAboutType(const DataTypePtr & data_type)\n {\n     data_bytes_size = getDataBytesSize(data_type);\n }\n@@ -411,10 +414,14 @@ void CompressionCodecDoubleDelta::useInfoAboutType(DataTypePtr data_type)\n void registerCodecDoubleDelta(CompressionCodecFactory & factory)\n {\n     UInt8 method_code = UInt8(CompressionMethodByte::DoubleDelta);\n-    factory.registerCompressionCodecWithType(\"DoubleDelta\", method_code, [&](const ASTPtr &, DataTypePtr column_type) -> CompressionCodecPtr\n+    factory.registerCompressionCodecWithType(\"DoubleDelta\", method_code,\n+        [&](const ASTPtr & arguments, DataTypePtr column_type) -> CompressionCodecPtr\n     {\n-        UInt8 delta_bytes_size = getDataBytesSize(column_type);\n-        return std::make_shared<CompressionCodecDoubleDelta>(delta_bytes_size);\n+        if (arguments)\n+            throw Exception(\"Codec DoubleDelta does not accept any arguments\", ErrorCodes::BAD_ARGUMENTS);\n+\n+        UInt8 data_bytes_size = column_type ? getDataBytesSize(column_type) : 0;   /// Maybe postponed to the call to \"useInfoAboutType\"\n+        return std::make_shared<CompressionCodecDoubleDelta>(data_bytes_size);\n     });\n }\n }\ndiff --git a/src/Compression/CompressionCodecDoubleDelta.h b/src/Compression/CompressionCodecDoubleDelta.h\nindex 7803a29c34a6..d5e0770c6637 100644\n--- a/src/Compression/CompressionCodecDoubleDelta.h\n+++ b/src/Compression/CompressionCodecDoubleDelta.h\n@@ -100,7 +100,7 @@ class CompressionCodecDoubleDelta : public ICompressionCodec\n \n     String getCodecDesc() const override;\n \n-    void useInfoAboutType(DataTypePtr data_type) override;\n+    void useInfoAboutType(const DataTypePtr & data_type) override;\n \n protected:\n     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;\n@@ -116,7 +116,4 @@ class CompressionCodecDoubleDelta : public ICompressionCodec\n     UInt8 data_bytes_size;\n };\n \n-class CompressionCodecFactory;\n-void registerCodecDoubleDelta(CompressionCodecFactory & factory);\n-\n }\ndiff --git a/src/Compression/CompressionCodecGorilla.cpp b/src/Compression/CompressionCodecGorilla.cpp\nindex 7ba128cfe4e4..9038482c9505 100644\n--- a/src/Compression/CompressionCodecGorilla.cpp\n+++ b/src/Compression/CompressionCodecGorilla.cpp\n@@ -19,8 +19,9 @@ namespace DB\n \n namespace ErrorCodes\n {\n-extern const int CANNOT_COMPRESS;\n-extern const int CANNOT_DECOMPRESS;\n+    extern const int CANNOT_COMPRESS;\n+    extern const int CANNOT_DECOMPRESS;\n+    extern const int BAD_ARGUMENTS;\n }\n \n namespace\n@@ -223,14 +224,16 @@ void decompressDataForType(const char * source, UInt32 source_size, char * dest)\n \n UInt8 getDataBytesSize(DataTypePtr column_type)\n {\n-    UInt8 delta_bytes_size = 1;\n-    if (column_type && column_type->haveMaximumSizeOfValue())\n-    {\n-        size_t max_size = column_type->getSizeOfValueInMemory();\n-        if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)\n-            delta_bytes_size = static_cast<UInt8>(max_size);\n-    }\n-    return delta_bytes_size;\n+    if (!column_type->isValueUnambiguouslyRepresentedInFixedSizeContiguousMemoryRegion())\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Codec Gorilla is not applicable for {} because the data type is not of fixed size\",\n+            column_type->getName());\n+\n+    size_t max_size = column_type->getSizeOfValueInMemory();\n+    if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)\n+        return static_cast<UInt8>(max_size);\n+    else\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Codec Delta is only applicable for data types of size 1, 2, 4, 8 bytes. Given type {}\",\n+            column_type->getName());\n }\n \n }\n@@ -320,7 +323,7 @@ void CompressionCodecGorilla::doDecompressData(const char * source, UInt32 sourc\n     }\n }\n \n-void CompressionCodecGorilla::useInfoAboutType(DataTypePtr data_type)\n+void CompressionCodecGorilla::useInfoAboutType(const DataTypePtr & data_type)\n {\n     data_bytes_size = getDataBytesSize(data_type);\n }\n@@ -328,10 +331,14 @@ void CompressionCodecGorilla::useInfoAboutType(DataTypePtr data_type)\n void registerCodecGorilla(CompressionCodecFactory & factory)\n {\n     UInt8 method_code = UInt8(CompressionMethodByte::Gorilla);\n-    factory.registerCompressionCodecWithType(\"Gorilla\", method_code, [&](const ASTPtr &, DataTypePtr column_type) -> CompressionCodecPtr\n+    factory.registerCompressionCodecWithType(\"Gorilla\", method_code,\n+        [&](const ASTPtr & arguments, DataTypePtr column_type) -> CompressionCodecPtr\n     {\n-        UInt8 delta_bytes_size = getDataBytesSize(column_type);\n-        return std::make_shared<CompressionCodecGorilla>(delta_bytes_size);\n+        if (arguments)\n+            throw Exception(\"Codec Gorilla does not accept any arguments\", ErrorCodes::BAD_ARGUMENTS);\n+\n+        UInt8 data_bytes_size = column_type ? getDataBytesSize(column_type) : 0;   /// Maybe postponed to the call to \"useInfoAboutType\"\n+        return std::make_shared<CompressionCodecGorilla>(data_bytes_size);\n     });\n }\n }\ndiff --git a/src/Compression/CompressionCodecGorilla.h b/src/Compression/CompressionCodecGorilla.h\nindex d11aeed6056e..27a6d2789788 100644\n--- a/src/Compression/CompressionCodecGorilla.h\n+++ b/src/Compression/CompressionCodecGorilla.h\n@@ -97,7 +97,7 @@ class CompressionCodecGorilla : public ICompressionCodec\n \n     String getCodecDesc() const override;\n \n-    void useInfoAboutType(DataTypePtr data_type) override;\n+    void useInfoAboutType(const DataTypePtr & data_type) override;\n \n protected:\n     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;\n@@ -113,7 +113,4 @@ class CompressionCodecGorilla : public ICompressionCodec\n     UInt8 data_bytes_size;\n };\n \n-class CompressionCodecFactory;\n-void registerCodecGorilla(CompressionCodecFactory & factory);\n-\n }\ndiff --git a/src/Compression/CompressionCodecLZ4.h b/src/Compression/CompressionCodecLZ4.h\nindex a73dd48a36ca..0cfa694c4162 100644\n--- a/src/Compression/CompressionCodecLZ4.h\n+++ b/src/Compression/CompressionCodecLZ4.h\n@@ -32,8 +32,6 @@ class CompressionCodecLZ4 : public ICompressionCodec\n     mutable LZ4::PerformanceStatistics lz4_stat;\n };\n \n-class CompressionCodecFactory;\n-void registerCodecLZ4(CompressionCodecFactory & factory);\n \n class CompressionCodecLZ4HC : public CompressionCodecLZ4\n {\n@@ -50,7 +48,4 @@ class CompressionCodecLZ4HC : public CompressionCodecLZ4\n     const int level;\n };\n \n-class CompressionCodecFactory;\n-void registerCodecLZ4HC(CompressionCodecFactory & factory);\n-\n }\ndiff --git a/src/Compression/CompressionCodecMultiple.cpp b/src/Compression/CompressionCodecMultiple.cpp\nindex d9a8c3cf8df1..e5adacb61739 100644\n--- a/src/Compression/CompressionCodecMultiple.cpp\n+++ b/src/Compression/CompressionCodecMultiple.cpp\n@@ -105,12 +105,10 @@ UInt32 CompressionCodecMultiple::doCompressData(const char * source, UInt32 sour\n     return 1 + codecs.size() + source_size;\n }\n \n-void CompressionCodecMultiple::useInfoAboutType(DataTypePtr data_type)\n+void CompressionCodecMultiple::useInfoAboutType(const DataTypePtr & data_type)\n {\n     for (auto & codec : codecs)\n-    {\n         codec->useInfoAboutType(data_type);\n-    }\n }\n \n void CompressionCodecMultiple::doDecompressData(const char * source, UInt32 source_size, char * dest, UInt32 decompressed_size) const\n@@ -155,6 +153,7 @@ bool CompressionCodecMultiple::isCompression() const\n     return false;\n }\n \n+\n void registerCodecMultiple(CompressionCodecFactory & factory)\n {\n     factory.registerSimpleCompressionCodec(\"Multiple\", static_cast<UInt8>(CompressionMethodByte::Multiple), [&] ()\ndiff --git a/src/Compression/CompressionCodecMultiple.h b/src/Compression/CompressionCodecMultiple.h\nindex ff208d619cbf..7737e91ad928 100644\n--- a/src/Compression/CompressionCodecMultiple.h\n+++ b/src/Compression/CompressionCodecMultiple.h\n@@ -8,7 +8,7 @@ namespace DB\n class CompressionCodecMultiple final : public ICompressionCodec\n {\n public:\n-    CompressionCodecMultiple() = default;\n+    CompressionCodecMultiple() = default;   /// Need for CompressionFactory to register codec by method byte.\n     CompressionCodecMultiple(Codecs codecs_, bool sanity_check);\n \n     uint8_t getMethodByte() const override;\n@@ -17,7 +17,7 @@ class CompressionCodecMultiple final : public ICompressionCodec\n \n     UInt32 getMaxCompressedDataSize(UInt32 uncompressed_size) const override;\n \n-    void useInfoAboutType(DataTypePtr data_type) override;\n+    void useInfoAboutType(const DataTypePtr & data_type) override;\n \n protected:\n     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;\n@@ -33,8 +33,4 @@ class CompressionCodecMultiple final : public ICompressionCodec\n     String getCodecDescImpl() const;\n };\n \n-\n-class CompressionCodecFactory;\n-void registerCodecMultiple(CompressionCodecFactory & factory);\n-\n }\ndiff --git a/src/Compression/CompressionCodecNone.h b/src/Compression/CompressionCodecNone.h\nindex ef7029e244b5..88bd87908106 100644\n--- a/src/Compression/CompressionCodecNone.h\n+++ b/src/Compression/CompressionCodecNone.h\n@@ -25,6 +25,4 @@ class CompressionCodecNone : public ICompressionCodec\n     bool isNone() const override { return true; }\n };\n \n-class CompressionCodecFactory;\n-void registerCodecNone(CompressionCodecFactory & factory);\n }\ndiff --git a/src/Compression/CompressionCodecT64.cpp b/src/Compression/CompressionCodecT64.cpp\nindex 53f9fb13d58e..ba0adc8ec658 100644\n--- a/src/Compression/CompressionCodecT64.cpp\n+++ b/src/Compression/CompressionCodecT64.cpp\n@@ -630,16 +630,6 @@ void CompressionCodecT64::doDecompressData(const char * src, UInt32 src_size, ch\n     throw Exception(\"Cannot decompress with T64\", ErrorCodes::CANNOT_DECOMPRESS);\n }\n \n-void CompressionCodecT64::useInfoAboutType(DataTypePtr data_type)\n-{\n-    if (data_type)\n-    {\n-        type_idx = typeIdx(data_type);\n-        if (type_idx == TypeIndex::Nothing)\n-            throw Exception(\"T64 codec is not supported for specified type\", ErrorCodes::ILLEGAL_SYNTAX_FOR_CODEC_TYPE);\n-    }\n-}\n-\n uint8_t CompressionCodecT64::getMethodByte() const\n {\n     return codecId();\ndiff --git a/src/Compression/CompressionCodecT64.h b/src/Compression/CompressionCodecT64.h\nindex cafc9959a9d9..f5e142378df7 100644\n--- a/src/Compression/CompressionCodecT64.h\n+++ b/src/Compression/CompressionCodecT64.h\n@@ -3,6 +3,7 @@\n #include <Core/Types.h>\n #include <Compression/ICompressionCodec.h>\n \n+\n namespace DB\n {\n \n@@ -33,11 +34,9 @@ class CompressionCodecT64 : public ICompressionCodec\n     uint8_t getMethodByte() const override;\n     String getCodecDesc() const override\n     {\n-        return String(\"T64\") + ((variant == Variant::Byte) ? \"\" : \"(\\'bit\\')\");\n+        return variant == Variant::Byte ? \"T64\" : \"T64('bit')\";\n     }\n \n-    void useInfoAboutType(DataTypePtr data_type) override;\n-\n protected:\n     UInt32 doCompressData(const char * src, UInt32 src_size, char * dst) const override;\n     void doDecompressData(const char * src, UInt32 src_size, char * dst, UInt32 uncompressed_size) const override;\n@@ -56,7 +55,4 @@ class CompressionCodecT64 : public ICompressionCodec\n     Variant variant;\n };\n \n-class CompressionCodecFactory;\n-void registerCodecT64(CompressionCodecFactory & factory);\n-\n }\ndiff --git a/src/Compression/CompressionCodecZSTD.h b/src/Compression/CompressionCodecZSTD.h\nindex 234f49b279be..d0790f2f2d7d 100644\n--- a/src/Compression/CompressionCodecZSTD.h\n+++ b/src/Compression/CompressionCodecZSTD.h\n@@ -33,8 +33,4 @@ class CompressionCodecZSTD : public ICompressionCodec\n     const int level;\n };\n \n-\n-class CompressionCodecFactory;\n-void registerCodecZSTD(CompressionCodecFactory & factory);\n-\n }\ndiff --git a/src/Compression/CompressionFactory.cpp b/src/Compression/CompressionFactory.cpp\nindex 2598fc07b08c..e9dee053c2ce 100644\n--- a/src/Compression/CompressionFactory.cpp\n+++ b/src/Compression/CompressionFactory.cpp\n@@ -9,7 +9,6 @@\n #include <IO/ReadBuffer.h>\n #include <Parsers/queryToString.h>\n #include <Compression/CompressionCodecMultiple.h>\n-#include <Compression/CompressionCodecLZ4.h>\n #include <IO/WriteHelpers.h>\n \n \n@@ -146,24 +145,28 @@ void CompressionCodecFactory::registerSimpleCompressionCodec(\n \n \n void registerCodecNone(CompressionCodecFactory & factory);\n+void registerCodecLZ4(CompressionCodecFactory & factory);\n+void registerCodecLZ4HC(CompressionCodecFactory & factory);\n void registerCodecZSTD(CompressionCodecFactory & factory);\n void registerCodecDelta(CompressionCodecFactory & factory);\n void registerCodecT64(CompressionCodecFactory & factory);\n void registerCodecDoubleDelta(CompressionCodecFactory & factory);\n void registerCodecGorilla(CompressionCodecFactory & factory);\n+void registerCodecMultiple(CompressionCodecFactory & factory);\n \n CompressionCodecFactory::CompressionCodecFactory()\n {\n-    default_codec = std::make_shared<CompressionCodecLZ4>();\n     registerCodecLZ4(*this);\n     registerCodecNone(*this);\n     registerCodecZSTD(*this);\n-    registerCodecMultiple(*this);\n     registerCodecLZ4HC(*this);\n     registerCodecDelta(*this);\n     registerCodecT64(*this);\n     registerCodecDoubleDelta(*this);\n     registerCodecGorilla(*this);\n+    registerCodecMultiple(*this);\n+\n+    default_codec = get(\"LZ4\", {}, false);\n }\n \n CompressionCodecFactory & CompressionCodecFactory::instance()\ndiff --git a/src/Compression/ICompressionCodec.cpp b/src/Compression/ICompressionCodec.cpp\nindex 3c7766ba508e..9a33def868be 100644\n--- a/src/Compression/ICompressionCodec.cpp\n+++ b/src/Compression/ICompressionCodec.cpp\n@@ -1,12 +1,9 @@\n #include \"ICompressionCodec.h\"\n \n-#include <Compression/LZ4_decompress_faster.h>\n+#include <cassert>\n+\n #include <common/unaligned.h>\n-#include <Common/hex.h>\n-#include <IO/WriteHelpers.h>\n-#include <IO/ReadBufferFromFileBase.h>\n-#include <Common/typeid_cast.h>\n-#include <Compression/CompressionFactory.h>\n+#include <Common/Exception.h>\n \n \n namespace DB\n@@ -39,12 +36,12 @@ UInt32 ICompressionCodec::decompress(const char * source, UInt32 source_size, ch\n \n     UInt8 header_size = getHeaderSize();\n     if (source_size < header_size)\n-        throw Exception(\"Can't decompress data: the compressed data size (\" + toString(source_size)\n-            + \", this should include header size) is less than the header size (\" + toString(header_size) + \")\", ErrorCodes::CORRUPTED_DATA);\n+        throw Exception(ErrorCodes::CORRUPTED_DATA, \"Can't decompress data: the compressed data size ({}), this should include header size) is less than the header size ({})\", source_size, size_t(header_size));\n \n+    uint8_t our_method = getMethodByte();\n     uint8_t method = source[0];\n-    if (method != getMethodByte())\n-        throw Exception(\"Can't decompress data with codec byte \" + toString(method) + \" from codec with byte \" + toString(method), ErrorCodes::CANNOT_DECOMPRESS);\n+    if (method != our_method)\n+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Can't decompress data with codec byte {} using codec with byte {}\", method, our_method);\n \n     UInt32 decompressed_size = readDecompressedBlockSize(source);\n     doDecompressData(&source[header_size], source_size - header_size, dest, decompressed_size);\ndiff --git a/src/Compression/ICompressionCodec.h b/src/Compression/ICompressionCodec.h\nindex cac42ee61f48..dab2f8176161 100644\n--- a/src/Compression/ICompressionCodec.h\n+++ b/src/Compression/ICompressionCodec.h\n@@ -1,14 +1,10 @@\n #pragma once\n \n #include <memory>\n-#include <IO/ReadBuffer.h>\n-#include <IO/WriteBuffer.h>\n-#include <IO/BufferWithOwnMemory.h>\n-#include <DataTypes/IDataType.h>\n #include <boost/noncopyable.hpp>\n-#include <IO/UncompressedCache.h>\n-#include <Compression/LZ4_decompress_faster.h>\n #include <Compression/CompressionInfo.h>\n+#include <Core/Types.h>\n+\n \n namespace DB\n {\n@@ -18,6 +14,10 @@ class ICompressionCodec;\n using CompressionCodecPtr = std::shared_ptr<ICompressionCodec>;\n using Codecs = std::vector<CompressionCodecPtr>;\n \n+class IDataType;\n+using DataTypePtr = std::shared_ptr<const IDataType>;\n+\n+\n /**\n * Represents interface for compression codecs like LZ4, ZSTD, etc.\n */\n@@ -39,7 +39,10 @@ class ICompressionCodec : private boost::noncopyable\n     UInt32 decompress(const char * source, UInt32 source_size, char * dest) const;\n \n     /// Number of bytes, that will be used to compress uncompressed_size bytes with current codec\n-    virtual UInt32 getCompressedReserveSize(UInt32 uncompressed_size) const { return getHeaderSize() + getMaxCompressedDataSize(uncompressed_size); }\n+    virtual UInt32 getCompressedReserveSize(UInt32 uncompressed_size) const\n+    {\n+        return getHeaderSize() + getMaxCompressedDataSize(uncompressed_size);\n+    }\n \n     /// Some codecs (LZ4, for example) require additional bytes at end of buffer\n     virtual UInt32 getAdditionalSizeAtTheEndOfBuffer() const { return 0; }\n@@ -57,7 +60,7 @@ class ICompressionCodec : private boost::noncopyable\n     static uint8_t readMethod(const char * source);\n \n     /// Some codecs may use information about column type which appears after codec creation\n-    virtual void useInfoAboutType(DataTypePtr /* data_type */) {}\n+    virtual void useInfoAboutType(const DataTypePtr & /* data_type */) {}\n \n     /// Return true if this codec actually compressing something. Otherwise it can be just transformation that helps compression (e.g. Delta).\n     virtual bool isCompression() const = 0;\ndiff --git a/src/Storages/MergeTree/IMergeTreeDataPart.h b/src/Storages/MergeTree/IMergeTreeDataPart.h\nindex 5e10fbcfadbf..5c32882131db 100644\n--- a/src/Storages/MergeTree/IMergeTreeDataPart.h\n+++ b/src/Storages/MergeTree/IMergeTreeDataPart.h\n@@ -37,6 +37,8 @@ using VolumePtr = std::shared_ptr<IVolume>;\n class IMergeTreeReader;\n class IMergeTreeDataPartWriter;\n class MarkCache;\n+class UncompressedCache;\n+\n \n namespace ErrorCodes\n {\ndiff --git a/src/Storages/MergeTree/MergeTreeDataPartInMemory.h b/src/Storages/MergeTree/MergeTreeDataPartInMemory.h\nindex f90de0195e24..1fceb47cba87 100644\n--- a/src/Storages/MergeTree/MergeTreeDataPartInMemory.h\n+++ b/src/Storages/MergeTree/MergeTreeDataPartInMemory.h\n@@ -5,6 +5,8 @@\n namespace DB\n {\n \n+class UncompressedCache;\n+\n class MergeTreeDataPartInMemory : public IMergeTreeDataPart\n {\n public:\ndiff --git a/src/Storages/StorageURL.cpp b/src/Storages/StorageURL.cpp\nindex fd9dde695ffd..55138bf6650c 100644\n--- a/src/Storages/StorageURL.cpp\n+++ b/src/Storages/StorageURL.cpp\n@@ -131,6 +131,25 @@ StorageURLBlockOutputStream::StorageURLBlockOutputStream(const Poco::URI & uri,\n     writer = FormatFactory::instance().getOutput(format, *write_buf, sample_block, context);\n }\n \n+\n+void StorageURLBlockOutputStream::write(const Block & block)\n+{\n+    writer->write(block);\n+}\n+\n+void StorageURLBlockOutputStream::writePrefix()\n+{\n+    writer->writePrefix();\n+}\n+\n+void StorageURLBlockOutputStream::writeSuffix()\n+{\n+    writer->writeSuffix();\n+    writer->flush();\n+    write_buf->finalize();\n+}\n+\n+\n std::string IStorageURLBase::getReadMethod() const\n {\n     return Poco::Net::HTTPRequest::HTTP_GET;\ndiff --git a/src/Storages/StorageURL.h b/src/Storages/StorageURL.h\nindex 67ad95d2f91c..69b22e5a1e40 100644\n--- a/src/Storages/StorageURL.h\n+++ b/src/Storages/StorageURL.h\n@@ -83,22 +83,9 @@ class StorageURLBlockOutputStream : public IBlockOutputStream\n         return sample_block;\n     }\n \n-    void write(const Block & block) override\n-    {\n-        writer->write(block);\n-    }\n-\n-    void writePrefix() override\n-    {\n-        writer->writePrefix();\n-    }\n-\n-    void writeSuffix() override\n-    {\n-        writer->writeSuffix();\n-        writer->flush();\n-        write_buf->finalize();\n-    }\n+    void write(const Block & block) override;\n+    void writePrefix() override;\n+    void writeSuffix() override;\n \n private:\n     Block sample_block;\ndiff --git a/src/Storages/System/StorageSystemStackTrace.cpp b/src/Storages/System/StorageSystemStackTrace.cpp\nindex bdce70894d58..bd9915237d45 100644\n--- a/src/Storages/System/StorageSystemStackTrace.cpp\n+++ b/src/Storages/System/StorageSystemStackTrace.cpp\n@@ -14,6 +14,7 @@\n #include <DataTypes/DataTypeArray.h>\n #include <IO/ReadHelpers.h>\n #include <Common/PipeFDs.h>\n+#include <Common/CurrentThread.h>\n #include <common/getThreadId.h>\n \n \n",
  "test_patch": "diff --git a/src/Compression/tests/gtest_compressionCodec.cpp b/src/Compression/tests/gtest_compressionCodec.cpp\nindex 3609e9f9d36e..edcb6050abb3 100644\n--- a/src/Compression/tests/gtest_compressionCodec.cpp\n+++ b/src/Compression/tests/gtest_compressionCodec.cpp\n@@ -13,6 +13,7 @@\n \n #include <fmt/format.h>\n \n+#include <random>\n #include <bitset>\n #include <cmath>\n #include <initializer_list>\n@@ -473,7 +474,8 @@ CompressionCodecPtr makeCodec(const std::string & codec_string, const DataTypePt\n }\n \n template <typename Timer>\n-void testTranscoding(Timer & timer, ICompressionCodec & codec, const CodecTestSequence & test_sequence, std::optional<double> expected_compression_ratio = std::optional<double>{})\n+void testTranscoding(Timer & timer, ICompressionCodec & codec, const CodecTestSequence & test_sequence,\n+                     std::optional<double> expected_compression_ratio = {})\n {\n     const auto & source_data = test_sequence.serialized_data;\n \n@@ -540,11 +542,6 @@ TEST_P(CodecTest, TranscodingWithDataType)\n     testTranscoding(*codec);\n }\n \n-TEST_P(CodecTest, TranscodingWithoutDataType)\n-{\n-    const auto codec = makeCodec(CODEC_WITHOUT_DATA_TYPE);\n-    testTranscoding(*codec);\n-}\n \n // Param is tuple-of-tuple to simplify instantiating with values, since typically group of cases test only one codec.\n class CodecTestCompatibility : public ::testing::TestWithParam<std::tuple<Codec, std::tuple<CodecTestSequence, std::string>>>\ndiff --git a/tests/queries/0_stateless/00804_test_custom_compression_codecs.reference b/tests/queries/0_stateless/00804_test_custom_compression_codecs.reference\nindex 00556b0f8c9a..a0c13b9ca476 100644\n--- a/tests/queries/0_stateless/00804_test_custom_compression_codecs.reference\n+++ b/tests/queries/0_stateless/00804_test_custom_compression_codecs.reference\n@@ -9,7 +9,7 @@\n 10003\n 274972506.6\n 9175437371954010821\n-CREATE TABLE default.compression_codec_multiple_more_types\\n(\\n    `id` Decimal(38, 13) CODEC(ZSTD(1), LZ4, ZSTD(1), ZSTD(1), Delta(2), Delta(4), Delta(1), LZ4HC(0)),\\n    `data` FixedString(12) CODEC(ZSTD(1), ZSTD(1), Delta(1), Delta(1), Delta(1), NONE, NONE, NONE, LZ4HC(0)),\\n    `ddd.age` Array(UInt8) CODEC(LZ4, LZ4HC(0), NONE, NONE, NONE, ZSTD(1), Delta(8)),\\n    `ddd.Name` Array(String) CODEC(LZ4, LZ4HC(0), NONE, NONE, NONE, ZSTD(1), Delta(8))\\n)\\nENGINE = MergeTree()\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.compression_codec_multiple_more_types\\n(\\n    `id` Decimal(38, 13) CODEC(ZSTD(1), LZ4, ZSTD(1), ZSTD(1), Delta(2), Delta(4), Delta(1), LZ4HC(0)),\\n    `data` FixedString(12) CODEC(ZSTD(1), ZSTD(1), NONE, NONE, NONE, LZ4HC(0)),\\n    `ddd.age` Array(UInt8) CODEC(LZ4, LZ4HC(0), NONE, NONE, NONE, ZSTD(1), Delta(8)),\\n    `ddd.Name` Array(String) CODEC(LZ4, LZ4HC(0), NONE, NONE, NONE, ZSTD(1), Delta(8))\\n)\\nENGINE = MergeTree()\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n 1.5555555555555\thello world!\t[77]\t['John']\n 7.1000000000000\txxxxxxxxxxxx\t[127]\t['Henry']\n !\ndiff --git a/tests/queries/0_stateless/00804_test_custom_compression_codecs.sql b/tests/queries/0_stateless/00804_test_custom_compression_codecs.sql\nindex 61298de25482..87862f46e056 100644\n--- a/tests/queries/0_stateless/00804_test_custom_compression_codecs.sql\n+++ b/tests/queries/0_stateless/00804_test_custom_compression_codecs.sql\n@@ -88,6 +88,12 @@ CREATE TABLE compression_codec_multiple_more_types (\n     id Decimal128(13) CODEC(ZSTD, LZ4, ZSTD, ZSTD, Delta(2), Delta(4), Delta(1), LZ4HC),\n     data FixedString(12) CODEC(ZSTD, ZSTD, Delta, Delta, Delta, NONE, NONE, NONE, LZ4HC),\n     ddd Nested (age UInt8, Name String) CODEC(LZ4, LZ4HC, NONE, NONE, NONE, ZSTD, Delta(8))\n+) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }\n+\n+CREATE TABLE compression_codec_multiple_more_types (\n+    id Decimal128(13) CODEC(ZSTD, LZ4, ZSTD, ZSTD, Delta(2), Delta(4), Delta(1), LZ4HC),\n+    data FixedString(12) CODEC(ZSTD, ZSTD, NONE, NONE, NONE, LZ4HC),\n+    ddd Nested (age UInt8, Name String) CODEC(LZ4, LZ4HC, NONE, NONE, NONE, ZSTD, Delta(8))\n ) ENGINE = MergeTree() ORDER BY tuple();\n \n SHOW CREATE TABLE compression_codec_multiple_more_types;\n@@ -105,7 +111,7 @@ SET network_zstd_compression_level = 5;\n CREATE TABLE compression_codec_multiple_with_key (\n     somedate Date CODEC(ZSTD, ZSTD, ZSTD(12), LZ4HC(12), Delta, Delta),\n     id UInt64 CODEC(LZ4, ZSTD, Delta, NONE, LZ4HC, Delta),\n-    data String CODEC(ZSTD(2), Delta, LZ4HC, NONE, LZ4, LZ4)\n+    data String CODEC(ZSTD(2), Delta(1), LZ4HC, NONE, LZ4, LZ4)\n ) ENGINE = MergeTree() PARTITION BY somedate ORDER BY id SETTINGS index_granularity = 2;\n \n \n@@ -131,13 +137,13 @@ DROP TABLE IF EXISTS test_default_delta;\n \n CREATE TABLE test_default_delta(\n     id UInt64 CODEC(Delta),\n-    data String CODEC(Delta),\n+    data String CODEC(Delta(1)),\n     somedate Date CODEC(Delta),\n     somenum Float64 CODEC(Delta),\n-    somestr FixedString(3) CODEC(Delta),\n+    somestr FixedString(3) CODEC(Delta(1)),\n     othernum Int64 CODEC(Delta),\n     yetothernum Float32 CODEC(Delta),\n-    ddd Nested (age UInt8, Name String, OName String, BName String) CODEC(Delta)\n+    ddd Nested (age UInt8, Name String, OName String, BName String) CODEC(Delta(1))\n ) ENGINE = MergeTree() ORDER BY tuple();\n \n SHOW CREATE TABLE test_default_delta;\ndiff --git a/tests/queries/0_stateless/00910_zookeeper_custom_compression_codecs_replicated.sql b/tests/queries/0_stateless/00910_zookeeper_custom_compression_codecs_replicated.sql\nindex 688233868539..90d917ed3c56 100644\n--- a/tests/queries/0_stateless/00910_zookeeper_custom_compression_codecs_replicated.sql\n+++ b/tests/queries/0_stateless/00910_zookeeper_custom_compression_codecs_replicated.sql\n@@ -104,7 +104,7 @@ DROP TABLE IF EXISTS test.compression_codec_multiple_more_types_replicated;\n \n CREATE TABLE test.compression_codec_multiple_more_types_replicated (\n     id Decimal128(13) CODEC(ZSTD, LZ4, ZSTD, ZSTD, Delta(2), Delta(4), Delta(1), LZ4HC),\n-    data FixedString(12) CODEC(ZSTD, ZSTD, Delta, Delta, Delta, NONE, NONE, NONE, LZ4HC),\n+    data FixedString(12) CODEC(ZSTD, ZSTD, Delta(1), Delta(1), Delta(1), NONE, NONE, NONE, LZ4HC),\n     ddd Nested (age UInt8, Name String) CODEC(LZ4, LZ4HC, NONE, NONE, NONE, ZSTD, Delta(8))\n ) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test/compression_codec_multiple_more_types_replicated', '1') ORDER BY tuple();\n \n@@ -123,7 +123,7 @@ SET network_zstd_compression_level = 5;\n CREATE TABLE test.compression_codec_multiple_with_key_replicated (\n     somedate Date CODEC(ZSTD, ZSTD, ZSTD(12), LZ4HC(12), Delta, Delta),\n     id UInt64 CODEC(LZ4, ZSTD, Delta, NONE, LZ4HC, Delta),\n-    data String CODEC(ZSTD(2), Delta, LZ4HC, NONE, LZ4, LZ4)\n+    data String CODEC(ZSTD(2), Delta(1), LZ4HC, NONE, LZ4, LZ4)\n ) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test/compression_codec_multiple_with_key_replicated', '1') PARTITION BY somedate ORDER BY id SETTINGS index_granularity = 2;\n \n \ndiff --git a/tests/queries/0_stateless/01380_coded_delta_exception_code.reference b/tests/queries/0_stateless/01380_coded_delta_exception_code.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01380_coded_delta_exception_code.sql b/tests/queries/0_stateless/01380_coded_delta_exception_code.sql\nnew file mode 100644\nindex 000000000000..fc679e30e3f9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01380_coded_delta_exception_code.sql\n@@ -0,0 +1,10 @@\n+CREATE TABLE delta_codec_synthetic (`id` UInt64 NULL CODEC(Delta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }\n+CREATE TABLE delta_codec_synthetic (`id` UInt64 NULL CODEC(DoubleDelta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }\n+CREATE TABLE delta_codec_synthetic (`id` UInt64 NULL CODEC(Gorilla, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }\n+\n+CREATE TABLE delta_codec_synthetic (`id` Decimal(38, 10) CODEC(Delta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }\n+CREATE TABLE delta_codec_synthetic (`id` Decimal(38, 10) CODEC(DoubleDelta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }\n+CREATE TABLE delta_codec_synthetic (`id` Decimal(38, 10) CODEC(Gorilla, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }\n+\n+CREATE TABLE delta_codec_synthetic (`id` UInt64 CODEC(DoubleDelta(3), ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }\n+CREATE TABLE delta_codec_synthetic (`id` UInt64 CODEC(Gorilla('hello, world'), ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }\n",
  "problem_statement": "Logical error in codec Delta: value in memory is not of fixed size\n```\r\nCREATE TABLE delta_codec_synthetic\r\n(\r\n    `id` UInt64 CODEC(Delta, ZSTD(1048577))\r\n)\r\nENGINE = MergeTree()\r\nORDER BY tuple()\r\n\r\n[akuzm-nix] 2020.07.03 15:29:55.317909 [ 174944 ] <Fatal> BaseDaemon: ########################################\r\n[akuzm-nix] 2020.07.03 15:29:55.319439 [ 174944 ] <Fatal> BaseDaemon: (version 20.6.1.1, build id: F54929D398A68BF3) (from thread 172629) (query_id: a5a3c0e2-85d4-4a8c-b769-82a183aeb0d1) Received signal Aborted (6)\r\n[akuzm-nix] 2020.07.03 15:29:55.319915 [ 174944 ] <Fatal> BaseDaemon: \r\n[akuzm-nix] 2020.07.03 15:29:55.320401 [ 174944 ] <Fatal> BaseDaemon: Stack trace: 0x7f44215c418b 0x7f44215a3859 0x7f44215a3729 0x7f44215b4f36 0x7f44253b37bb 0x7f44163d4ada 0x7f44167a2a69 0x7f44167a4aca 0x7f44167a4a31 0x7f44167a4990 0x7f44167a4920 0x7f44167a3a52 0x7f44167e8513 0x7f44167de9eb 0x7f44167d9632 0x7f44167d8e0e 0x7f4415927206 0x7f44159277f1 0x7f4415929ab6 0x7f441592b9f4 0x7f4415d318da 0x7f4415d3099a 0x7f4412ac2953 0x7f4412ac9812 0x7f4422738d9c 0x7f44227395aa 0x7f442224c173 0x7f442224903d\r\n[akuzm-nix] 2020.07.03 15:29:55.334424 [ 174944 ] <Fatal> BaseDaemon: 4. /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: gsignal @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[akuzm-nix] 2020.07.03 15:29:55.335313 [ 174944 ] <Fatal> BaseDaemon: 5. /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:81: abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[akuzm-nix] 2020.07.03 15:29:55.336317 [ 174944 ] <Fatal> BaseDaemon: 6. /build/glibc-YYA7BZ/glibc-2.31/intl/loadmsgcat.c:509: _nl_load_domain.cold @ 0x25729 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[akuzm-nix] 2020.07.03 15:29:55.337074 [ 174944 ] <Fatal> BaseDaemon: 7. ? @ 0x36f36 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[akuzm-nix] 2020.07.03 15:29:55.337663 [ 174944 ] <Fatal> BaseDaemon: 8. /home/akuzm/ch4/ch/src/Common/Exception.cpp:48: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1b57bb in /home/akuzm/ch4/build-clang10/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2020.07.03 15:29:55.338774 [ 174944 ] <Fatal> BaseDaemon: 9. /home/akuzm/ch4/ch/src/DataTypes/DataTypeNullable.cpp:500: DB::DataTypeNullable::getSizeOfValueInMemory() const @ 0x37bada in /home/akuzm/ch4/build-clang10/src/libclickhouse_datatypesd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.344357 [ 174944 ] <Fatal> BaseDaemon: 10. /home/akuzm/ch4/ch/src/Compression/CompressionCodecDelta.cpp:142: DB::(anonymous namespace)::getDeltaBytesSize(std::__1::shared_ptr<DB::IDataType const>) @ 0x8da69 in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.345064 [ 174944 ] <Fatal> BaseDaemon: 11. /home/akuzm/ch4/ch/src/Compression/CompressionCodecDelta.cpp:161: DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0::operator()(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>) const @ 0x8faca in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.345843 [ 174944 ] <Fatal> BaseDaemon: 12. /home/akuzm/ch4/ch/contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0&>(fp)(std::__1::forward<std::__1::shared_ptr<DB::IAST> const&>(fp0), std::__1::forward<std::__1::shared_ptr<DB::IDataType const> >(fp0))) std::__1::__invoke<DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0&, std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const> >(DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0&, std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>&&) @ 0x8fa31 in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.346690 [ 174944 ] <Fatal> BaseDaemon: 13. /home/akuzm/ch4/ch/contrib/libcxx/include/__functional_base:317: std::__1::shared_ptr<DB::ICompressionCodec> std::__1::__invoke_void_return_wrapper<std::__1::shared_ptr<DB::ICompressionCodec> >::__call<DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0&, std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const> >(DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0&, std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>&&) @ 0x8f990 in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.347558 [ 174944 ] <Fatal> BaseDaemon: 14. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0, std::__1::allocator<DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0>, std::__1::shared_ptr<DB::ICompressionCodec> (std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>)>::operator()(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>&&) @ 0x8f920 in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.348380 [ 174944 ] <Fatal> BaseDaemon: 15. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1714: std::__1::__function::__func<DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0, std::__1::allocator<DB::registerCodecDelta(DB::CompressionCodecFactory&)::$_0>, std::__1::shared_ptr<DB::ICompressionCodec> (std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>)>::operator()(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>&&) @ 0x8ea52 in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.361561 [ 174944 ] <Fatal> BaseDaemon: 16. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1867: std::__1::__function::__value_func<std::__1::shared_ptr<DB::ICompressionCodec> (std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>)>::operator()(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>&&) const @ 0xd3513 in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.362409 [ 174944 ] <Fatal> BaseDaemon: 17. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:2473: std::__1::function<std::__1::shared_ptr<DB::ICompressionCodec> (std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>)>::operator()(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>) const @ 0xc99eb in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.362952 [ 174944 ] <Fatal> BaseDaemon: 18. /home/akuzm/ch4/ch/src/Compression/CompressionFactory.cpp:106: DB::CompressionCodecFactory::getImpl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>) const @ 0xc4632 in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.363430 [ 174944 ] <Fatal> BaseDaemon: 19. /home/akuzm/ch4/ch/src/Compression/CompressionFactory.cpp:59: DB::CompressionCodecFactory::get(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IDataType const>, bool) const @ 0xc3e0e in /home/akuzm/ch4/build-clang10/src/libclickhouse_compressiond.so\r\n[akuzm-nix] 2020.07.03 15:29:55.366271 [ 174944 ] <Fatal> BaseDaemon: 20. /home/akuzm/ch4/ch/src/Interpreters/InterpreterCreateQuery.cpp:378: DB::InterpreterCreateQuery::getColumnsDescription(DB::ASTExpressionList const&, DB::Context const&, bool) @ 0x13d1206 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.369148 [ 174944 ] <Fatal> BaseDaemon: 21. /home/akuzm/ch4/ch/src/Interpreters/InterpreterCreateQuery.cpp:415: DB::InterpreterCreateQuery::setProperties(DB::ASTCreateQuery&) const @ 0x13d17f1 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.372375 [ 174944 ] <Fatal> BaseDaemon: 22. /home/akuzm/ch4/ch/src/Interpreters/InterpreterCreateQuery.cpp:602: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x13d3ab6 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.375799 [ 174944 ] <Fatal> BaseDaemon: 23. /home/akuzm/ch4/ch/src/Interpreters/InterpreterCreateQuery.cpp:792: DB::InterpreterCreateQuery::execute() @ 0x13d59f4 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.398181 [ 174944 ] <Fatal> BaseDaemon: 24. /home/akuzm/ch4/ch/src/Interpreters/executeQuery.cpp:385: DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) @ 0x17db8da in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.405188 [ 174944 ] <Fatal> BaseDaemon: 25. /home/akuzm/ch4/ch/src/Interpreters/executeQuery.cpp:644: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0x17da99a in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.406361 [ 174944 ] <Fatal> BaseDaemon: 26. /home/akuzm/ch4/ch/src/Server/TCPHandler.cpp:253: DB::TCPHandler::runImpl() @ 0x279953 in /home/akuzm/ch4/build-clang10/src/libclickhouse_serverd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.407652 [ 174944 ] <Fatal> BaseDaemon: 27. /home/akuzm/ch4/ch/src/Server/TCPHandler.cpp:1201: DB::TCPHandler::run() @ 0x280812 in /home/akuzm/ch4/build-clang10/src/libclickhouse_serverd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.408576 [ 174944 ] <Fatal> BaseDaemon: 28. /home/akuzm/ch4/ch/contrib/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x1b7d9c in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Net/lib_poco_netd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.425533 [ 174944 ] <Fatal> BaseDaemon: 29. /home/akuzm/ch4/ch/contrib/poco/Net/src/TCPServerDispatcher.cpp:114: Poco::Net::TCPServerDispatcher::run() @ 0x1b85aa in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Net/lib_poco_netd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.426658 [ 174944 ] <Fatal> BaseDaemon: 30. /home/akuzm/ch4/ch/contrib/poco/Foundation/src/ThreadPool.cpp:199: Poco::PooledThread::run() @ 0x276173 in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Foundation/lib_poco_foundationd.so\r\n[akuzm-nix] 2020.07.03 15:29:55.427729 [ 174944 ] <Fatal> BaseDaemon: 31. /home/akuzm/ch4/ch/contrib/poco/Foundation/src/Thread.cpp:56: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x27303d in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Foundation/lib_poco_foundationd.so\r\nError on processing query: CREATE TABLE delta_codec_synthetic (`id` UInt64 CODEC(Delta, ZSTD(1048577))) ENGINE = MergeTree() ORDER BY tuple()\r\nCode: 32, e.displayText() = DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000, Stack trace (when copying this message, always include the lines below):\r\n```\n",
  "hints_text": "I have different (and correct) exception message:\r\n```\r\nCREATE TABLE delta_codec_synthetic\r\n(\r\n    `id` UInt64 CODEC(Delta, ZSTD(1048577))\r\n)\r\nENGINE = MergeTree()\r\nORDER BY tuple()\r\n\r\n\r\nReceived exception from server (version 20.6.1):\r\nCode: 433. DB::Exception: Received from localhost:9000. DB::Exception: ZSTD codec can't have level more that 22, given 1048577.\r\n```\nI can get logical error with this query:\r\n```\r\nCREATE TABLE delta_codec_synthetic\r\n(\r\n    `id` UInt64 NULL CODEC(Delta, ZSTD(22))\r\n)\r\nENGINE = MergeTree()\r\nORDER BY tuple()\r\n\r\n\r\nReceived exception from server (version 20.6.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Value of type Nullable(UInt64) in memory is not of fixed size..\r\n```\r\n\r\nBut it's just wrong exception code, need to change it to something more appropriate...",
  "created_at": "2020-07-09T00:25:27Z",
  "modified_files": [
    "src/Compression/CompressionCodecDelta.cpp",
    "src/Compression/CompressionCodecDelta.h",
    "src/Compression/CompressionCodecDoubleDelta.cpp",
    "src/Compression/CompressionCodecDoubleDelta.h",
    "src/Compression/CompressionCodecGorilla.cpp",
    "src/Compression/CompressionCodecGorilla.h",
    "src/Compression/CompressionCodecLZ4.h",
    "src/Compression/CompressionCodecMultiple.cpp",
    "src/Compression/CompressionCodecMultiple.h",
    "src/Compression/CompressionCodecNone.h",
    "src/Compression/CompressionCodecT64.cpp",
    "src/Compression/CompressionCodecT64.h",
    "src/Compression/CompressionCodecZSTD.h",
    "src/Compression/CompressionFactory.cpp",
    "src/Compression/ICompressionCodec.cpp",
    "src/Compression/ICompressionCodec.h",
    "src/Storages/MergeTree/IMergeTreeDataPart.h",
    "src/Storages/MergeTree/MergeTreeDataPartInMemory.h",
    "src/Storages/StorageURL.cpp",
    "src/Storages/StorageURL.h",
    "src/Storages/System/StorageSystemStackTrace.cpp"
  ],
  "modified_test_files": [
    "src/Compression/tests/gtest_compressionCodec.cpp",
    "tests/queries/0_stateless/00804_test_custom_compression_codecs.reference",
    "tests/queries/0_stateless/00804_test_custom_compression_codecs.sql",
    "tests/queries/0_stateless/00910_zookeeper_custom_compression_codecs_replicated.sql",
    "b/tests/queries/0_stateless/01380_coded_delta_exception_code.sql"
  ]
}