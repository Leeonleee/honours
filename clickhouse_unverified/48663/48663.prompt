You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Unexpected exception while inserting empty data with async_insert=1


**Unexpected behaviour**
Insertion of the empty data set (without records) causes an unexpected and unclear error when async_insert is enabled, error: `The associated promise has been destructed prior to the associated state becoming ready`.
See the stack trace below. The same error will be visible on the client side.

**How to reproduce**
* ClickHouse starting from 22.12 (22.12.6.22)
* HTTP interface (curl, clickhouse/client@0.0.11)
* async_insert should be enabled
* Table for demonstration:
```
create table default.async_insert_issue (
    key String
  , data UInt32
)
engine = MergeTree() order by (key);
```
* Curl command for demonstration:
```
echo '' | curl 'http://localhost:8123?query=insert%20into%20default.async_insert_issue%20settings%20async_insert%3D1%20format%20JSONEachRow' --data-binary @-
```

**Expected behavior**
Insertion requests without data should be silently ignored, or the user should be warned that no data was provided.
Should be no unexpected errors.

**Error message and/or stacktrace**
```
2023.04.07 10:34:54.670440 [ 285 ] {3f869f30-6ef5-4430-8eff-4b692f6c97e8} <Error> DynamicQueryHandler: std::exception. Code: 1001, type: std::__1::future_error, e.what() = The associated promise has been destructed prior to the associated state becoming ready., Stack trace (when copying this message, always include the lines below):

0. std::__1::promise<void>::~promise() @ 0x13b0a7ac in /usr/bin/clickhouse
1. ? @ 0xfa01778 in /usr/bin/clickhouse
2. ? @ 0xfa00e84 in /usr/bin/clickhouse
3. DB::AsynchronousInsertQueue::processData(DB::AsynchronousInsertQueue::InsertQuery, std::__1::unique_ptr<DB::AsynchronousInsertQueue::InsertData, std::__1::default_delete<DB::AsynchronousInsertQueue::InsertData>>, std::__1::shared_ptr<DB::Context const>) @ 0xf9feff4 in /usr/bin/clickhouse
4. ? @ 0xfa01098 in /usr/bin/clickhouse
5. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0xbabb434 in /usr/bin/clickhouse
6. void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) @ 0xbabdafc in /usr/bin/clickhouse
7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xbab7bf0 in /usr/bin/clickhouse
8. ? @ 0xbabcae8 in /usr/bin/clickhouse
9. start_thread @ 0x7624 in /usr/lib/aarch64-linux-gnu/libpthread-2.31.so
10. ? @ 0xd149c in /usr/lib/aarch64-linux-gnu/libc-2.31.so
 (version 23.2.5.46 (official build))
```

PS: Actually not a big deal, but logs are flooded with those errors.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
