{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 7685,
  "instance_id": "ClickHouse__ClickHouse-7685",
  "issue_numbers": [
    "5465"
  ],
  "base_commit": "5cf36f66eaef7ce62f1aafafbb3c465300693542",
  "patch": "diff --git a/dbms/src/DataStreams/NativeBlockInputStream.cpp b/dbms/src/DataStreams/NativeBlockInputStream.cpp\nindex 659cfcbdfcaf..246d1882a5d7 100644\n--- a/dbms/src/DataStreams/NativeBlockInputStream.cpp\n+++ b/dbms/src/DataStreams/NativeBlockInputStream.cpp\n@@ -188,7 +188,7 @@ Block NativeBlockInputStream::readImpl()\n         for (auto & col : header)\n         {\n             if (res.has(col.name))\n-                tmp_res.insert(std::move(res.getByName(col.name)));\n+                tmp_res.insert(res.getByName(col.name));\n             else\n                 tmp_res.insert({col.type->createColumn()->cloneResized(rows), col.type, col.name});\n         }\ndiff --git a/dbms/src/Interpreters/InterpreterInsertQuery.cpp b/dbms/src/Interpreters/InterpreterInsertQuery.cpp\nindex 61c153b13bec..b052bb82c1e5 100644\n--- a/dbms/src/Interpreters/InterpreterInsertQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterInsertQuery.cpp\n@@ -30,6 +30,7 @@ namespace ErrorCodes\n     extern const int NO_SUCH_COLUMN_IN_TABLE;\n     extern const int READONLY;\n     extern const int ILLEGAL_COLUMN;\n+    extern const int DUPLICATE_COLUMN;\n }\n \n \n@@ -84,6 +85,8 @@ Block InterpreterInsertQuery::getSampleBlock(const ASTInsertQuery & query, const\n \n         if (!allow_materialized && !table_sample_non_materialized.has(current_name))\n             throw Exception(\"Cannot insert column \" + current_name + \", because it is MATERIALIZED column.\", ErrorCodes::ILLEGAL_COLUMN);\n+        if (res.has(current_name))\n+            throw Exception(\"Column \" + current_name + \" specified more than once\", ErrorCodes::DUPLICATE_COLUMN);\n \n         res.insert(ColumnWithTypeAndName(table_sample.getByName(current_name).type, current_name));\n     }\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01032_duplicate_column_insert_query.reference b/dbms/tests/queries/0_stateless/01032_duplicate_column_insert_query.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01032_duplicate_column_insert_query.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/dbms/tests/queries/0_stateless/01032_duplicate_column_insert_query.sql b/dbms/tests/queries/0_stateless/01032_duplicate_column_insert_query.sql\nnew file mode 100644\nindex 000000000000..ac1a2439c4b1\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01032_duplicate_column_insert_query.sql\n@@ -0,0 +1,17 @@\n+DROP TABLE IF EXISTS sometable;\n+\n+CREATE TABLE sometable (\n+    date Date,\n+    time Int64,\n+    value UInt64\n+) ENGINE=MergeTree()\n+ORDER BY time;\n+\n+\n+INSERT INTO sometable (date, time, value) VALUES ('2019-11-08', 1573185600, 100);\n+\n+SELECT COUNT() from sometable;\n+\n+INSERT INTO sometable (date, time, value, time) VALUES ('2019-11-08', 1573185600, 100, 1573185600); -- {serverError 15}\n+\n+DROP TABLE IF EXISTS sometable;\n",
  "problem_statement": "Introduce a check detecting that column is listed twice in INSERT statement\n```\r\ncreate table insert_same_column_listed_twice ( a UInt64, b UInt64, c UInt64 ) Engine=Log;\r\n\r\ninsert into insert_same_column_listed_twice(a,a,c) SELECT number*3, number*3+1, number*3+2 FROM numbers(100);\r\n```\r\n\r\nShould be the exception `Column 'a' specified twice`.\r\n\n",
  "hints_text": "",
  "created_at": "2019-11-08T09:58:54Z",
  "modified_files": [
    "dbms/src/DataStreams/NativeBlockInputStream.cpp",
    "dbms/src/Interpreters/InterpreterInsertQuery.cpp"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/01032_duplicate_column_insert_query.reference",
    "b/dbms/tests/queries/0_stateless/01032_duplicate_column_insert_query.sql"
  ]
}