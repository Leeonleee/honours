You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Nested type LowCardinality(String) cannot be inside Nullable type: While executing ArrowBlockInputFormat
```
clickhouse-local -mn --query='SELECT * FROM table' --stacktrace --input-format=ArrowStream < test.arrow
```

```
Code: 43. DB::Exception: Nested type LowCardinality(String) cannot be inside Nullable type: While executing ArrowBlockInputFormat: While executing File. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xba2879a in /usr/bin/clickhouse
1. DB::DataTypeNullable::DataTypeNullable(std::__1::shared_ptr<DB::IDataType const> const&) @ 0x160bb75f in /usr/bin/clickhouse
2. std::__1::shared_ptr<DB::DataTypeNullable> std::__1::allocate_shared<DB::DataTypeNullable, std::__1::allocator<DB::DataTypeNullable>, std::__1::shared_ptr<DB::IDataType const>, void>(std::__1::allocator<DB::DataTypeNullable> const&, std::__1::shared_ptr<DB::IDataType const>&&) @ 0x160f56e8 in /usr/bin/clickhouse
3. DB::readColumnFromArrowColumn(std::__1::shared_ptr<arrow::ChunkedArray>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::ColumnWithTypeAndName>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::ColumnWithTypeAndName> > > >&, bool, bool, bool, bool&) @ 0x17b9ccbc in /usr/bin/clickhouse
4. DB::ArrowColumnToCHColumn::arrowColumnsToCHChunk(DB::Chunk&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<arrow::ChunkedArray>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<arrow::ChunkedArray> > > >&) @ 0x17ba15a3 in /usr/bin/clickhouse
5. DB::ArrowColumnToCHColumn::arrowTableToCHChunk(DB::Chunk&, std::__1::shared_ptr<arrow::Table>&) @ 0x17ba0ffc in /usr/bin/clickhouse
6. DB::ArrowBlockInputFormat::generate() @ 0x17b8e270 in /usr/bin/clickhouse
7. DB::ISource::tryGenerate() @ 0x17b60b95 in /usr/bin/clickhouse
8. DB::ISource::work() @ 0x17b606e6 in /usr/bin/clickhouse
9. DB::ExecutionThreadContext::executeTask() @ 0x17b7cf0a in /usr/bin/clickhouse
10. DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x17b71df0 in /usr/bin/clickhouse
11. DB::PipelineExecutor::executeStep(std::__1::atomic<bool>*) @ 0x17b715c0 in /usr/bin/clickhouse
12. DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0x17b81b43 in /usr/bin/clickhouse
13. DB::StorageFileSource::generate() @ 0x171394d7 in /usr/bin/clickhouse
14. DB::ISource::tryGenerate() @ 0x17b60b95 in /usr/bin/clickhouse
15. DB::ISource::work() @ 0x17b606e6 in /usr/bin/clickhouse
16. DB::ExecutionThreadContext::executeTask() @ 0x17b7cf0a in /usr/bin/clickhouse
17. DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x17b71df0 in /usr/bin/clickhouse
18. DB::PipelineExecutor::executeImpl(unsigned long) @ 0x17b70e64 in /usr/bin/clickhouse
19. DB::PipelineExecutor::execute(unsigned long) @ 0x17b70bfd in /usr/bin/clickhouse
20. void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0x17b80e13 in /usr/bin/clickhouse
21. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xbaf5268 in /usr/bin/clickhouse
22. void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*) @ 0xbaf85fd in /usr/bin/clickhouse
23. ? @ 0x7fdefda5d609 in ?
24. clone @ 0x7fdefd982133 in ?
```

[test.zip](https://github.com/ClickHouse/ClickHouse/files/9196695/test.zip)
Dictionary in Arrow format issue
```py
## writing ArrowStream file from python
import pyarrow as pa
data = [
    pa.array([1, 2, 3, 4, 5]),
    pa.array(["one", "two", "three", "four", "five"]).dictionary_encode(),
    pa.array([1, 2, 3, 4, 5]).dictionary_encode(),
    pa.array([True, False, True, True, True])
]
batch = pa.record_batch(data, names=['id', 'lc_nullable', 'lc_int_nullable', 'bool_nullable'])
writer = pa.ipc.new_stream("test4.arrows", batch.schema)
writer.write_batch(batch)
writer.close()
```

```
clickhouse-local --query='SELECT * FROM table FORMAT TSVWithNamesAndTypes' --stacktrace --input-format=ArrowStream < test4.arrows
id	lc_nullable	lc_int_nullable	bool_nullable
Nullable(Int64)	LowCardinality(Nullable(String))	LowCardinality(Nullable(Int64))	Nullable(UInt8)
1		0	1
2	one	1	0
3	two	2	1
4	three	3	1
5	four	4	1
```

0 in LowCardianality dictionary in ClickHouse have special meaning (null/default), while in Arrow it's a regular values.

Probably remapping needed... :|
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
