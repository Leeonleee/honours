{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12196,
  "instance_id": "ClickHouse__ClickHouse-12196",
  "issue_numbers": [
    "7795",
    "7772"
  ],
  "base_commit": "f8d584d5090a53d2306628d6a56afaca770d7773",
  "patch": "diff --git a/src/Functions/FunctionsLogical.cpp b/src/Functions/FunctionsLogical.cpp\nindex ade2fe960b0b..5443df33d797 100644\n--- a/src/Functions/FunctionsLogical.cpp\n+++ b/src/Functions/FunctionsLogical.cpp\n@@ -42,7 +42,7 @@ using UInt8Container = ColumnUInt8::Container;\n using UInt8ColumnPtrs = std::vector<const ColumnUInt8 *>;\n \n \n-MutableColumnPtr convertFromTernaryData(const UInt8Container & ternary_data, const bool make_nullable)\n+MutableColumnPtr buildColumnFromTernaryData(const UInt8Container & ternary_data, const bool make_nullable)\n {\n     const size_t rows_count = ternary_data.size();\n \n@@ -63,7 +63,7 @@ MutableColumnPtr convertFromTernaryData(const UInt8Container & ternary_data, con\n }\n \n template <typename T>\n-bool tryConvertColumnToUInt8(const IColumn * column, UInt8Container & res)\n+bool tryConvertColumnToBool(const IColumn * column, UInt8Container & res)\n {\n     const auto col = checkAndGetColumn<ColumnVector<T>>(column);\n     if (!col)\n@@ -71,22 +71,22 @@ bool tryConvertColumnToUInt8(const IColumn * column, UInt8Container & res)\n \n     std::transform(\n             col->getData().cbegin(), col->getData().cend(), res.begin(),\n-            [](const auto x) { return x != 0; });\n+            [](const auto x) { return !!x; });\n \n     return true;\n }\n \n-void convertColumnToUInt8(const IColumn * column, UInt8Container & res)\n+void convertAnyColumnToBool(const IColumn * column, UInt8Container & res)\n {\n-    if (!tryConvertColumnToUInt8<Int8>(column, res) &&\n-        !tryConvertColumnToUInt8<Int16>(column, res) &&\n-        !tryConvertColumnToUInt8<Int32>(column, res) &&\n-        !tryConvertColumnToUInt8<Int64>(column, res) &&\n-        !tryConvertColumnToUInt8<UInt16>(column, res) &&\n-        !tryConvertColumnToUInt8<UInt32>(column, res) &&\n-        !tryConvertColumnToUInt8<UInt64>(column, res) &&\n-        !tryConvertColumnToUInt8<Float32>(column, res) &&\n-        !tryConvertColumnToUInt8<Float64>(column, res))\n+    if (!tryConvertColumnToBool<Int8>(column, res) &&\n+        !tryConvertColumnToBool<Int16>(column, res) &&\n+        !tryConvertColumnToBool<Int32>(column, res) &&\n+        !tryConvertColumnToBool<Int64>(column, res) &&\n+        !tryConvertColumnToBool<UInt16>(column, res) &&\n+        !tryConvertColumnToBool<UInt32>(column, res) &&\n+        !tryConvertColumnToBool<UInt64>(column, res) &&\n+        !tryConvertColumnToBool<Float32>(column, res) &&\n+        !tryConvertColumnToBool<Float64>(column, res))\n         throw Exception(\"Unexpected type of column: \" + column->getName(), ErrorCodes::ILLEGAL_COLUMN);\n }\n \n@@ -119,7 +119,7 @@ static bool extractConstColumns(ColumnRawPtrs & in, UInt8 & res, Func && func)\n }\n \n template <class Op>\n-inline bool extractConstColumns(ColumnRawPtrs & in, UInt8 & res)\n+inline bool extractConstColumnsAsBool(ColumnRawPtrs & in, UInt8 & res)\n {\n     return extractConstColumns<Op>(\n         in, res,\n@@ -131,7 +131,7 @@ inline bool extractConstColumns(ColumnRawPtrs & in, UInt8 & res)\n }\n \n template <class Op>\n-inline bool extractConstColumnsTernary(ColumnRawPtrs & in, UInt8 & res_3v)\n+inline bool extractConstColumnsAsTernary(ColumnRawPtrs & in, UInt8 & res_3v)\n {\n     return extractConstColumns<Op>(\n         in, res_3v,\n@@ -145,6 +145,7 @@ inline bool extractConstColumnsTernary(ColumnRawPtrs & in, UInt8 & res_3v)\n }\n \n \n+/// N.B. This class calculates result only for non-nullable types\n template <typename Op, size_t N>\n class AssociativeApplierImpl\n {\n@@ -158,7 +159,7 @@ class AssociativeApplierImpl\n     /// Returns a combination of values in the i-th row of all columns stored in the constructor.\n     inline ResultValueType apply(const size_t i) const\n     {\n-        const auto & a = vec[i];\n+        const auto a = !!vec[i];\n         if constexpr (Op::isSaturable())\n             return Op::isSaturatedValue(a) ? a : Op::apply(a, next.apply(i));\n         else\n@@ -179,7 +180,7 @@ class AssociativeApplierImpl<Op, 1>\n     explicit AssociativeApplierImpl(const UInt8ColumnPtrs & in)\n         : vec(in[in.size() - 1]->getData()) {}\n \n-    inline ResultValueType apply(const size_t i) const { return vec[i]; }\n+    inline ResultValueType apply(const size_t i) const { return !!vec[i]; }\n \n private:\n     const UInt8Container & vec;\n@@ -188,7 +189,7 @@ class AssociativeApplierImpl<Op, 1>\n \n /// A helper class used by AssociativeGenericApplierImpl\n /// Allows for on-the-fly conversion of any data type into intermediate ternary representation\n-using ValueGetter = std::function<Ternary::ResultType (size_t)>;\n+using TernaryValueGetter = std::function<Ternary::ResultType (size_t)>;\n \n template <typename ... Types>\n struct ValueGetterBuilderImpl;\n@@ -196,7 +197,7 @@ struct ValueGetterBuilderImpl;\n template <typename Type, typename ...Types>\n struct ValueGetterBuilderImpl<Type, Types...>\n {\n-    static ValueGetter build(const IColumn * x)\n+    static TernaryValueGetter build(const IColumn * x)\n     {\n         if (const auto * nullable_column = typeid_cast<const ColumnNullable *>(x))\n         {\n@@ -218,7 +219,7 @@ struct ValueGetterBuilderImpl<Type, Types...>\n template <>\n struct ValueGetterBuilderImpl<>\n {\n-    static ValueGetter build(const IColumn * x)\n+    static TernaryValueGetter build(const IColumn * x)\n     {\n         throw Exception(\n                 std::string(\"Unknown numeric column of type: \") + demangle(typeid(x).name()),\n@@ -247,13 +248,13 @@ class AssociativeGenericApplierImpl\n     {\n         const auto a = val_getter(i);\n         if constexpr (Op::isSaturable())\n-            return Op::isSaturatedValue(a) ? a : Op::apply(a, next.apply(i));\n+            return Op::isSaturatedValueTernary(a) ? a : Op::apply(a, next.apply(i));\n         else\n             return Op::apply(a, next.apply(i));\n     }\n \n private:\n-    const ValueGetter val_getter;\n+    const TernaryValueGetter val_getter;\n     const AssociativeGenericApplierImpl<Op, N - 1> next;\n };\n \n@@ -271,7 +272,7 @@ class AssociativeGenericApplierImpl<Op, 1>\n     inline ResultValueType apply(const size_t i) const { return val_getter(i); }\n \n private:\n-    const ValueGetter val_getter;\n+    const TernaryValueGetter val_getter;\n };\n \n \n@@ -332,13 +333,13 @@ static void executeForTernaryLogicImpl(ColumnRawPtrs arguments, ColumnWithTypeAn\n {\n     /// Combine all constant columns into a single constant value.\n     UInt8 const_3v_value = 0;\n-    const bool has_consts = extractConstColumnsTernary<Op>(arguments, const_3v_value);\n+    const bool has_consts = extractConstColumnsAsTernary<Op>(arguments, const_3v_value);\n \n     /// If the constant value uniquely determines the result, return it.\n     if (has_consts && (arguments.empty() || Op::isSaturatedValue(const_3v_value)))\n     {\n         result_info.column = ColumnConst::create(\n-            convertFromTernaryData(UInt8Container({const_3v_value}), result_info.type->isNullable()),\n+            buildColumnFromTernaryData(UInt8Container({const_3v_value}), result_info.type->isNullable()),\n             input_rows_count\n         );\n         return;\n@@ -349,7 +350,7 @@ static void executeForTernaryLogicImpl(ColumnRawPtrs arguments, ColumnWithTypeAn\n \n     OperationApplier<Op, AssociativeGenericApplierImpl>::apply(arguments, result_column->getData(), has_consts);\n \n-    result_info.column = convertFromTernaryData(result_column->getData(), result_info.type->isNullable());\n+    result_info.column = buildColumnFromTernaryData(result_column->getData(), result_info.type->isNullable());\n }\n \n \n@@ -402,12 +403,13 @@ struct TypedExecutorInvoker<Op>\n };\n \n \n+/// Types of all of the arguments are guaranteed to be non-nullable here\n template <class Op>\n static void basicExecuteImpl(ColumnRawPtrs arguments, ColumnWithTypeAndName & result_info, size_t input_rows_count)\n {\n     /// Combine all constant columns into a single constant value.\n     UInt8 const_val = 0;\n-    bool has_consts = extractConstColumns<Op>(arguments, const_val);\n+    bool has_consts = extractConstColumnsAsBool<Op>(arguments, const_val);\n \n     /// If the constant value uniquely determines the result, return it.\n     if (has_consts && (arguments.empty() || Op::apply(const_val, 0) == Op::apply(const_val, 1)))\n@@ -447,7 +449,7 @@ static void basicExecuteImpl(ColumnRawPtrs arguments, ColumnWithTypeAndName & re\n         else\n         {\n             auto converted_column = ColumnUInt8::create(input_rows_count);\n-            convertColumnToUInt8(column, converted_column->getData());\n+            convertAnyColumnToBool(column, converted_column->getData());\n             uint8_args.push_back(converted_column.get());\n             converted_columns_holder.emplace_back(std::move(converted_column));\n         }\ndiff --git a/src/Functions/FunctionsLogical.h b/src/Functions/FunctionsLogical.h\nindex 520a24188906..4751f0b7548e 100644\n--- a/src/Functions/FunctionsLogical.h\n+++ b/src/Functions/FunctionsLogical.h\n@@ -61,7 +61,8 @@ struct AndImpl\n     using ResultType = UInt8;\n \n     static inline constexpr bool isSaturable() { return true; }\n-    static inline constexpr bool isSaturatedValue(UInt8 a) { return a == Ternary::False; }\n+    static inline constexpr bool isSaturatedValue(bool a) { return !a; }\n+    static inline constexpr bool isSaturatedValueTernary(UInt8 a) { return a == Ternary::False; }\n     static inline constexpr ResultType apply(UInt8 a, UInt8 b) { return a & b; }\n     static inline constexpr bool specialImplementationForNulls() { return true; }\n };\n@@ -71,7 +72,8 @@ struct OrImpl\n     using ResultType = UInt8;\n \n     static inline constexpr bool isSaturable() { return true; }\n-    static inline constexpr bool isSaturatedValue(UInt8 a) { return a == Ternary::True; }\n+    static inline constexpr bool isSaturatedValue(bool a) { return a; }\n+    static inline constexpr bool isSaturatedValueTernary(UInt8 a) { return a == Ternary::True; }\n     static inline constexpr ResultType apply(UInt8 a, UInt8 b) { return a | b; }\n     static inline constexpr bool specialImplementationForNulls() { return true; }\n };\n@@ -82,7 +84,8 @@ struct XorImpl\n \n     static inline constexpr bool isSaturable() { return false; }\n     static inline constexpr bool isSaturatedValue(bool) { return false; }\n-    static inline constexpr ResultType apply(UInt8 a, UInt8 b) { return !!a != !!b; }\n+    static inline constexpr bool isSaturatedValueTernary(UInt8) { return false; }\n+    static inline constexpr ResultType apply(UInt8 a, UInt8 b) { return a != b; }\n     static inline constexpr bool specialImplementationForNulls() { return false; }\n \n #if USE_EMBEDDED_COMPILER\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00552_logical_functions_uint8_as_bool.reference b/tests/queries/0_stateless/00552_logical_functions_uint8_as_bool.reference\nnew file mode 100644\nindex 000000000000..2a1151dc692f\n--- /dev/null\n+++ b/tests/queries/0_stateless/00552_logical_functions_uint8_as_bool.reference\n@@ -0,0 +1,9 @@\n+1\t1\t1\t1\t1\t1\n+0\t0\t0\t0\t0\n+0\t0\t1\t0\t1\n+0\t2\t0\t0\t1\n+0\t2\t1\t0\t1\n+4\t0\t0\t0\t1\n+4\t0\t1\t0\t1\n+4\t2\t0\t0\t1\n+4\t2\t1\t1\t1\ndiff --git a/tests/queries/0_stateless/00552_logical_functions_uint8_as_bool.sql b/tests/queries/0_stateless/00552_logical_functions_uint8_as_bool.sql\nnew file mode 100644\nindex 000000000000..feee33add1c0\n--- /dev/null\n+++ b/tests/queries/0_stateless/00552_logical_functions_uint8_as_bool.sql\n@@ -0,0 +1,20 @@\n+\n+-- Test that UInt8 type is processed correctly as bool\n+\n+SELECT\n+    1 AND 2,\n+    2 AND 4,\n+    1 AND 2 AND 4,\n+    1 OR 2,\n+    2 OR 4,\n+    1 OR 2 OR 4\n+;\n+\n+SELECT \n+    toUInt8(bitAnd(number, 4)) AS a,\n+    toUInt8(bitAnd(number, 2)) AS b,\n+    toUInt8(bitAnd(number, 1)) AS c,\n+    a AND b AND c AS AND,\n+    a OR b OR c AS OR\n+FROM numbers(8)\n+;\n",
  "problem_statement": "Fix logical functions with UInt8 numbers, when they not equal to 1.\nI hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en\r\n\r\nChangelog category (leave one):\r\n- Bug Fix\r\n\r\nChangelog entry (up to few sentences, required except for Non-significant/Documentation categories):\r\n\r\nFix logical functions with UInt8 numbers, when they not equal to 1.\r\n\r\nFixes #7772.\nBug in query SELECT WHERE optimiser\nIn short - on newer version (19.16.3.6,  19.15.2,  19.14.7.15) of clickhouse SELECT query return no rows. Last version that returns 1 row - is 19.13.6.51\r\n\r\nClickhouse runs in docker image\r\nI have table \r\n\r\n```\r\nCREATE TABLE abn.hit_sh\r\n(\r\n    `hitDate` Date DEFAULT toDate(time), \r\n    `time` UInt32, \r\n    `ip` UInt32, \r\n    `fwrd` UInt32, \r\n    `domainID` UInt32, \r\n    `pageID` UInt32, \r\n    `cookie` UInt64, \r\n    `siteID` UInt32, \r\n    `zoneID` UInt32, \r\n    `poolID0` UInt32, \r\n    `poolID1` UInt32, \r\n    `poolID2` UInt32, \r\n    `mediaID` UInt32, \r\n    `campaignID` UInt32, \r\n    `countryID` UInt8, \r\n    `cityID` UInt32, \r\n    `os` UInt8, \r\n    `osVer` UInt8, \r\n    `browser` UInt8, \r\n    `brVer` UInt8, \r\n    `status` UInt8, \r\n    `bh` UInt8, \r\n    `tz` UInt8, \r\n    `vc` UInt32, \r\n    `width` UInt16, \r\n    `height` UInt16, \r\n    `cw` UInt16, \r\n    `ch` UInt16, \r\n    `timeLoad` UInt16, \r\n    `hc` UInt8, \r\n    `refDomain` UInt32, \r\n    `refPage` UInt32, \r\n    `np` UInt8, \r\n    `nm` UInt8, \r\n    `price` UInt32, \r\n    `duration` UInt16, \r\n    `viewTime` UInt16, \r\n    `lang1` UInt8, \r\n    `lang2` UInt8, \r\n    `mem` UInt8, \r\n    `publisherID` UInt32, \r\n    `advertiserID` UInt32, \r\n    `formatID` UInt16, \r\n    `typeID` UInt16\r\n)\r\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard}/abnhitcl', '{replica}', hitDate, campaignID, 8192)\r\n```\r\n\r\n```\r\nSELECT version()\r\n\r\n\u250c\u2500version()\u2500\u2500\u2510\r\n\u2502 19.13.6.51 \u2502\r\n\r\nlocalhost :) SELECT countryID,count() as views FROM abn.hit_sh WHERE hitDate>=toDate('2019-11-07') AND bitAnd(status,  0x10) AND zoneID IN (1339803993,1200739130,1317373562,2136862789,1301506478,1961629277) AND countryID=33 GROUP BY countryID\r\n\r\nSELECT\r\n    countryID,\r\n    count() AS views\r\nFROM abn.hit_sh\r\nWHERE (hitDate >= toDate('2019-11-07')) AND bitAnd(status, 16) AND (zoneID IN (1339803993, 1200739130, 1317373562, 2136862789, 1301506478, 1961629277)) AND (countryID = 33)\r\nGROUP BY countryID\r\n\r\n\u250c\u2500countryID\u2500\u252c\u2500\u2500\u2500views\u2500\u2510\r\n\u2502        33 \u2502 1137136  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n1 rows in set. Elapsed: 0.848 sec. Processed 195.77 million rows, 616.45 MB (230.91 million rows/s., 727.07 MB/s.)\r\n\r\nlog\r\n\r\n```\r\n2019.11.14 14:59:53.548088 [ 44 ] {25192297-3388-44b0-bcf4-098443c047eb} <Debug> executeQuery: (from 127.0.0.1:4704) SELECT countryID, count() AS views FROM abn.hit_sh WHERE (hitDate >= toDate('2019-11-07')) AND bitAnd(status, 16) AND (zoneID IN (1339803993, 1200739130, 1317373562, 2136862789, 1301506478, 1961629277)) AND (countryID = 33) GROUP BY countryID\r\n2019.11.14 14:59:53.548655 [ 44 ] {25192297-3388-44b0-bcf4-098443c047eb} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"countryID = 33\" moved to PREWHERE\r\n2019.11.14 14:59:53.549653 [ 44 ] {25192297-3388-44b0-bcf4-098443c047eb} <Debug> abn.hit_sh (SelectExecutor): Key condition: unknown, unknown, and, unknown, and, unknown, and\r\n2019.11.14 14:59:53.549682 [ 44 ] {25192297-3388-44b0-bcf4-098443c047eb} <Debug> abn.hit_sh (SelectExecutor): MinMax index condition: (column 0 in [18207, +inf)), unknown, and, unknown, and, unknown, and\r\n2019.11.14 14:59:53.549712 [ 44 ] {25192297-3388-44b0-bcf4-098443c047eb} <Debug> abn.hit_sh (SelectExecutor): Selected 4 parts by date, 4 parts by key, 23990 marks to read from 4 ranges\r\n2019.11.14 14:59:53.549897 [ 44 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> abn.hit_sh (SelectExecutor): Reading approx. 195785430 rows with 4 streams\r\n2019.11.14 14:59:53.549998 [ 44 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2019.11.14 14:59:53.550261 [ 44 ] {25192297-3388-44b0-bcf4-098443c047eb} <Debug> executeQuery: Query pipeline:\r\nExpression\r\n Expression\r\n  ParallelAggregating\r\n   Expression \u00d7 4\r\n    Filter\r\n     MergeTreeThread\r\n\r\n2019.11.14 14:59:53.550400 [ 47 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> ParallelAggregatingBlockInputStream: Aggregating\r\n2019.11.14 14:59:53.559321 [ 45 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> Aggregator: Aggregation method: key8\r\n2019.11.14 14:59:53.626947 [ 46 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> Aggregator: Aggregation method: key8\r\n2019.11.14 14:59:53.715370 [ 48 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> Aggregator: Aggregation method: key8\r\n2019.11.14 14:59:53.912377 [ 49 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> Aggregator: Aggregation method: key8\r\n2019.11.14 14:59:54.352016 [ 47 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> ParallelAggregatingBlockInputStream: Aggregated. 325449 to 1 rows (from 0.310 MiB) in 0.802 sec. (406020.709 rows/sec., 0.387 MiB/sec.)\r\n2019.11.14 14:59:54.352074 [ 47 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> ParallelAggregatingBlockInputStream: Aggregated. 219169 to 1 rows (from 0.209 MiB) in 0.802 sec. (273428.872 rows/sec., 0.261 MiB/sec.)\r\n2019.11.14 14:59:54.352089 [ 47 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> ParallelAggregatingBlockInputStream: Aggregated. 207842 to 1 rows (from 0.198 MiB) in 0.802 sec. (259297.636 rows/sec., 0.247 MiB/sec.)\r\n2019.11.14 14:59:54.352106 [ 47 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> ParallelAggregatingBlockInputStream: Aggregated. 384676 to 1 rows (from 0.367 MiB) in 0.802 sec. (479910.592 rows/sec., 0.458 MiB/sec.)\r\n2019.11.14 14:59:54.352120 [ 47 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> ParallelAggregatingBlockInputStream: Total aggregated. 1137136 rows (from 1.084 MiB) in 0.802 sec. (1418657.809 rows/sec., 1.353 MiB/sec.)\r\n2019.11.14 14:59:54.352133 [ 47 ] {25192297-3388-44b0-bcf4-098443c047eb} <Trace> Aggregator: Merging aggregated data\r\n2019.11.14 14:59:54.352385 [ 44 ] {25192297-3388-44b0-bcf4-098443c047eb} <Information> executeQuery: Read 195774954 rows, 587.89 MiB in 0.804 sec., 243433472 rows/sec., 731.01 MiB/sec.\r\n```\r\n\r\nall newer versions returns nothing on this query\r\n\r\n```\r\n> 2019.11.14 11:18:24.612907 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Debug> executeQuery: (from 127.0.0.1:49188) SELECT countryID, count() AS views FROM abn.hit_sh WHERE (hitDate >= toDate('2019-11-07')) AND bitAnd(status, 16) AND (zoneID IN (1339803993, 1200739130, 1317373562, 2136862789, 1301506478, 1961629277)) AND (countryID = 33) GROUP BY countryID\r\n> 2019.11.14 11:18:24.613826 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"countryID = 33\" moved to PREWHERE\r\n> 2019.11.14 11:18:24.614512 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Debug> abn.hit_sh (SelectExecutor): Key condition: unknown, unknown, and, unknown, and, unknown, and\r\n> 2019.11.14 11:18:24.614539 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Debug> abn.hit_sh (SelectExecutor): MinMax index condition: (column 0 in [18207, +inf)), unknown, and, unknown, and, unknown, and\r\n> 2019.11.14 11:18:24.614567 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Debug> abn.hit_sh (SelectExecutor): Selected 4 parts by date, 4 parts by key, 23990 marks to read from 4 ranges\r\n> 2019.11.14 11:18:24.614773 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Trace> abn.hit_sh (SelectExecutor): Reading approx. 195785430 rows with 4 streams\r\n> 2019.11.14 11:18:24.614884 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n> 2019.11.14 11:18:24.615207 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Debug> executeQuery: Query pipeline:\r\n> Expression\r\n>  Expression\r\n>   ParallelAggregating\r\n>    Expression \u00d7 4\r\n>     Filter\r\n>      MergeTreeThread\r\n> \r\n> 2019.11.14 11:18:24.615361 [ 46 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Trace> ParallelAggregatingBlockInputStream: Aggregating\r\n> 2019.11.14 11:18:25.412154 [ 46 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Trace> ParallelAggregatingBlockInputStream: Aggregated. 0 to 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n> 2019.11.14 11:18:25.412234 [ 46 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Trace> ParallelAggregatingBlockInputStream: Aggregated. 0 to 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n> 2019.11.14 11:18:25.412273 [ 46 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Trace> ParallelAggregatingBlockInputStream: Aggregated. 0 to 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n> 2019.11.14 11:18:25.412304 [ 46 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Trace> ParallelAggregatingBlockInputStream: Aggregated. 0 to 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n> 2019.11.14 11:18:25.412334 [ 46 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Trace> ParallelAggregatingBlockInputStream: Total aggregated. 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n> 2019.11.14 11:18:25.412359 [ 46 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Trace> Aggregator: Merging aggregated data\r\n> 2019.11.14 11:18:25.412619 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Information> executeQuery: Read 195774954 rows, 587.89 MiB in 0.800 sec., 244826572 rows/sec., 735.19 MiB/sec.\r\n> 2019.11.14 11:18:25.412666 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Debug> MemoryTracker: Peak memory usage (for query): 16.51 MiB.\r\n> 2019.11.14 11:18:25.412802 [ 50 ] {aee6a4b9-dee9-4b5d-9167-554474bdcb3d} <Debug> MemoryTracker: Peak memory usage (total): 16.51 MiB.\r\n```\r\n\r\nI try \r\n19.16.3.6 \r\n19.15.2\r\n19.14.7.15\r\nAll returns empty set on same data\n",
  "hints_text": "@Akazz Ok, but need to check if there is any difference in performance.\nI suspect that usual WHERE clause with comparison and logical expressions may slow down.\n@Akazz have you checked the performance manually?\nI've ran not very presice benchmark on 19.17 vs version with this patch and it showed about 10% performance degradation.\r\n\r\nQuery with 100 `AND` operands:\r\n\r\n```\r\nselect count() from numbers(10000000) where number !=  96594 AND number !=  18511 AND number !=  98085 AND number !=  84177 AND number !=  70314 AND number !=  28083 AND number !=  54202 AND number !=  66522 AND number !=  66939 AND number !=  99469 AND number !=  65776 AND number !=  22876 AND number !=  42151 AND number !=  19924 AND number !=  66681 AND number !=  63022 AND number !=  17487 AND number !=  83914 AND number !=  59754 AND number !=  968 AND number !=  73334 AND number !=  68569 AND number !=  49853 AND number !=  33155 AND number !=  31777 AND number !=  99698 AND number !=  26708 AND number !=  76409 AND number !=  42191 AND number !=  55397 AND number !=  25724 AND number !=  39170 AND number !=  22728 AND number !=  98238 AND number !=  86052 AND number !=  12756 AND number !=  13948 AND number !=  57774 AND number !=  82511 AND number !=  11337 AND number !=  23506 AND number !=  11875 AND number !=  58536 AND number !=  56919 AND number !=  25986 AND number !=  80710 AND number !=  61797 AND number !=  99244 AND number !=  11665 AND number !=  15758 AND number !=  82899 AND number !=  63150 AND number !=  7198 AND number !=  40071 AND number !=  46310 AND number !=  78488 AND number !=  9273 AND number !=  91878 AND number !=  57904 AND number !=  53941 AND number !=  75675 AND number !=  12093 AND number !=  50090 AND number !=  59675 AND number !=  41632 AND number !=  81448 AND number !=  46821 AND number !=  51919 AND number !=  49028 AND number !=  71059 AND number !=  15673 AND number !=  6132 AND number !=  15473 AND number !=  32527 AND number !=  63842 AND number !=  33121 AND number !=  53271 AND number !=  86033 AND number !=  96807 AND number !=  4791 AND number !=  80089 AND number !=  51616 AND number !=  46311 AND number !=  82844 AND number !=  59353 AND number !=  63538 AND number !=  64857 AND number !=  58471 AND number !=  29870 AND number !=  80209 AND number !=  61000 AND number !=  75991 AND number !=  44506 AND number !=  11283 AND number !=  6335 AND number !=  73502 AND number !=  22354 AND number !=  72816 AND number !=  66399 AND number !=  61703\r\n```\r\nThis patch result:\r\n```\r\n{\r\n\"localhost:9000\": {\r\n\"statistics\": {\r\n\"QPS\": 0.7945934000204867,\r\n\"RPS\": 7967394.378752621,\r\n\"MiBPS\": 63739155.03002097,\r\n\"RPS_result\": 0.7945934000204867,\r\n\"MiBPS_result\": 6.356747200163894,\r\n\"num_queries\": 30\r\n},\r\n\"query_time_percentiles\": {\r\n\"0\": 1.174314468,\r\n\"10\": 1.1959964470999997,\r\n\"20\": 1.2092565354,\r\n\"30\": 1.2305292104999999,\r\n\"40\": 1.2402944656,\r\n\"50\": 1.2500725035000002,\r\n\"60\": 1.2570026738,\r\n\"70\": 1.2682743527000002,\r\n\"80\": 1.3010615592,\r\n\"90\": 1.3207626721,\r\n\"95\": 1.3883882848,\r\n\"99\": 1.39261084439,\r\n\"99.9\": 1.393185934139,\r\n\"99.99\": 1.3932434431139\r\n}\r\n}\r\n}\r\n```\r\nv.19.17 result:\r\n```\r\n{\r\n\"localhost:9000\": {\r\n\"statistics\": {\r\n\"QPS\": 0.8789235246925504,\r\n\"RPS\": 8812973.213480402,\r\n\"MiBPS\": 70503785.70784321,\r\n\"RPS_result\": 0.8789235246925504,\r\n\"MiBPS_result\": 7.031388197540403,\r\n\"num_queries\": 30\r\n},\r\n\"query_time_percentiles\": {\r\n\"0\": 1.092902824,\r\n\"10\": 1.0999579718,\r\n\"20\": 1.1073646743999999,\r\n\"30\": 1.1196764797,\r\n\"40\": 1.1238697316,\r\n\"50\": 1.1321403755000001,\r\n\"60\": 1.1359128695999998,\r\n\"70\": 1.1404816986,\r\n\"80\": 1.1483627204000002,\r\n\"90\": 1.1713929098000002,\r\n\"95\": 1.2149165078,\r\n\"99\": 1.2782067257,\r\n\"99.9\": 1.29603257417,\r\n\"99.99\": 1.2978151590169997\r\n}\r\n}\r\n}\r\n```\n@CurtizJ Let's add this query to performance tests in separate PR?\n> Fix logical functions with UInt8 numbers, when they not equal to 1.\r\n\r\nWhat was the cause of this error? Maybe we are using bit ANDs instead of logical ANDs to avoid less efficient short-curcuit code in multiple AND chains?\n> Maybe we are using bit ANDs instead of logical ANDs\r\n\r\nYes, we use them, but for another reason. I've tried to expalin it in [comment](https://github.com/ClickHouse/ClickHouse/issues/7772#issuecomment-554399052).\r\n\r\n\nThis performance regression is almost acceptable but not quite.\nStill relevant.\n@blinkov This PR is significant.\n@CurtizJ @Akazz Do you have ideas how we can lose less performance? Do you plan to return to this issue?\nI have reworked it somewhat and I am to push new changes within this week.\nCan you provide a sample of data or make reproducible example?\nHighlighted diff of execution \r\n\r\n```diff\r\n@@ -14,14 +14,10 @@\r\n      MergeTreeThread\r\n \r\n <Trace> ParallelAggregatingBlockInputStream: Aggregating\r\n-<Trace> Aggregator: Aggregation method: key8\r\n-<Trace> Aggregator: Aggregation method: key8\r\n-<Trace> Aggregator: Aggregation method: key8\r\n-<Trace> Aggregator: Aggregation method: key8\r\n-<Trace> ParallelAggregatingBlockInputStream: Aggregated. 325449 to 1 rows (from 0.310 MiB) in 0.802 sec. (406020.709 rows/sec., 0.387 MiB/sec.)\r\n-<Trace> ParallelAggregatingBlockInputStream: Aggregated. 219169 to 1 rows (from 0.209 MiB) in 0.802 sec. (273428.872 rows/sec., 0.261 MiB/sec.)\r\n-<Trace> ParallelAggregatingBlockInputStream: Aggregated. 207842 to 1 rows (from 0.198 MiB) in 0.802 sec. (259297.636 rows/sec., 0.247 MiB/sec.)\r\n-<Trace> ParallelAggregatingBlockInputStream: Aggregated. 384676 to 1 rows (from 0.367 MiB) in 0.802 sec. (479910.592 rows/sec., 0.458 MiB/sec.)\r\n-<Trace> ParallelAggregatingBlockInputStream: Total aggregated. 1137136 rows (from 1.084 MiB) in 0.802 sec. (1418657.809 rows/sec., 1.353 MiB/sec.)\r\n+<Trace> ParallelAggregatingBlockInputStream: Aggregated. 0 to 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n+<Trace> ParallelAggregatingBlockInputStream: Aggregated. 0 to 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n+<Trace> ParallelAggregatingBlockInputStream: Aggregated. 0 to 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n+<Trace> ParallelAggregatingBlockInputStream: Aggregated. 0 to 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n+<Trace> ParallelAggregatingBlockInputStream: Total aggregated. 0 rows (from 0.000 MiB) in 0.797 sec. (0.000 rows/sec., 0.000 MiB/sec.)\r\n <Trace> Aggregator: Merging aggregated data\r\n-<Information> executeQuery: Read 195774954 rows, 587.89 MiB in 0.804 sec., 243433472 rows/sec., 731.01 MiB/sec.\r\n+<Information> executeQuery: Read 195774954 rows, 587.89 MiB in 0.800 sec., 244826572 rows/sec., 735.19 MiB/sec.\r\n```\nThere was a change in 19.14 for UInt8 aggregation keys -- may be related: https://github.com/ClickHouse/ClickHouse/pull/6298\nAlso interesting that query without \r\nAND countryID=33 \r\nreturns whole set of countries and proper counts.\r\n\r\nAbout dump of rows - I'll try to make set of records that repeats bug, because whole dir of hit_sh is 450Gb. Where can I download it?\nCan you try to minimize the data set first?\r\n\r\nFor example, try smth like:\r\n```sql\r\nCREATE TABLE abn.hit_sh_test_case\r\n(\r\n    `hitDate` Date,  \r\n    `zoneID` UInt32, \r\n    `campaignID` UInt32, \r\n    `countryID` UInt8, \r\n    `status` UInt8 \r\n)\r\nENGINE = MergeTree(hitDate, campaignID, 8192);\r\n\r\nINSERT INTO abn.hit_sh_test_case SELECT hitDate,zoneID,campaignID,countryID,status from abn.hit_sh WHERE hitDate>=toDate('2019-11-01');\r\n```\r\n\r\nCheck if the problem reproduces on that smaller table and after that pack to the files in tar archive\r\n and upload it to some file sharing service of your choice.\nI make a small sample set on yours table structure that repeats bug on latest 19.16.3.6\r\nhttps://fex.net/s/rvt9lbx\r\n```\r\nSELECT countryID,count() as views FROM abn.hit_sh_test_case WHERE hitDate>=toDate('2019-11-07') AND bitAnd(status,  0x10) AND zoneID IN (1339803993,1200739130,1317373562,2136862789,1301506478,1961629277) AND countryID=33 GROUP BY countryID\r\n0 rows in set. Elapsed: 0.026 sec. Processed 3.32 million rows, 18.95 MB (126.41 million rows/s., 720.73 MB/s.)\r\n```\r\nAnd without AND countryID=33\r\n```\r\nSELECT countryID,count() as views FROM abn.hit_sh_test_case WHERE hitDate>=toDate('2019-11-07') AND bitAnd(status,  0x10) AND zoneID IN (1339803993,1200739130,1317373562,2136862789,1301506478,1961629277) GROUP BY countryID\r\n\r\n16 rows in set. Elapsed: 0.021 sec. Processed 3.32 million rows, 16.80 MB (154.73 million rows/s., 782.16 MB/s.)\r\n\r\n```\r\nHope this is enought to locate problem.\r\n\r\nAnd thanks for the great product you created, develop and support!\nThanks for the data, can reproduce locally.\r\nI get 0 rows even without grouping, so this is probably related to something else:\r\n\r\n```\r\n :) SELECT count() as views FROM hit_sh WHERE countryID = 33 and hitDate>=toDate('2019-11-07') AND bitAnd(status,  0x10) AND zoneID IN (1339803993,1200739130,1317373562,2136862789,1301506478,1961629277)\r\n\u250c\u2500views\u2500\u2510\r\n\u2502     0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nIt gets better, just adding `zoneID != -1` breaks it:\r\n\r\n```\r\n:) SELECT distinct(zoneID) FROM hit_sh WHERE hitDate>=toDate('2019-11-07') AND bitAnd(status,  0x10) AND zoneID IN (1339803993,1200739130,1317373562,2136862789,1301506478,1961629277)\r\n\u250c\u2500\u2500\u2500\u2500\u2500zoneID\u2500\u2510\r\n\u2502 1961629277 \u2502\r\n\u2502 1301506478 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500\u2500\u2500\u2500\u2500zoneID\u2500\u2510\r\n\u2502 1317373562 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500\u2500\u2500\u2500\u2500zoneID\u2500\u2510\r\n\u2502 2136862789 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n:) SELECT distinct(zoneID) FROM hit_sh WHERE hitDate>=toDate('2019-11-07') AND bitAnd(status,  0x10) AND zoneID IN (1339803993,1200739130,1317373562,2136862789,1301506478,1961629277) and zoneID != -1\r\n\r\n0 rows in set. Elapsed: 0.015 sec. Processed 3.32 million rows, 9.80 MB (221.25 million rows/s., 652.71 MB/s.) \r\n```\nI found that issue is caused by replacing `&&` to `&` [here](https://github.com/ClickHouse/ClickHouse/blob/817c93f5d05ad0c57663d40d996fefe6df15dd40/dbms/src/Functions/FunctionsLogical.h#L66). As I understand it was needed to implement ternary logic for and/or. So, now all bit functions are interpreted wrong in terms of logical functions. @Akazz, please, can you comment or fix it?\r\n\r\nAs workaround, you can replace `bitAnd(status, 16)` by `bitAnd(status, 16) != 0`.\nTest case illustrating the problem\r\n```\r\nSELECT \r\n    toUInt8(bitAnd(number, 4))          AS a, \r\n    toUInt8(bitAnd(number, 2))          AS b, \r\n    toUInt8(bitAnd(number, 1))          AS c, \r\n    a AND b AND c                       AS `a and b and c`, \r\n    a OR b OR c                         AS `a or b or c`, \r\n    (a != 0) AND (b != 0) AND (c != 0)  AS `correct a and b and c`, \r\n    (a != 0) OR (b != 0) OR (c != 0)    AS `correct a or b or c`\r\nFROM numbers(8)\r\n\r\n\u250c\u2500a\u2500\u252c\u2500b\u2500\u252c\u2500c\u2500\u252c\u2500a and b and c\u2500\u252c\u2500a or b or c\u2500\u252c\u2500correct a and b and c\u2500\u252c\u2500correct a or b or c\u2500\u2510\r\n\u2502 0 \u2502 0 \u2502 0 \u2502             0 \u2502           0 \u2502                     0 \u2502                   0 \u2502\r\n\u2502 0 \u2502 0 \u2502 1 \u2502             0 \u2502           1 \u2502                     0 \u2502                   1 \u2502\r\n\u2502 0 \u2502 2 \u2502 0 \u2502             0 \u2502           2 \u2502                     0 \u2502                   1 \u2502\r\n\u2502 0 \u2502 2 \u2502 1 \u2502             0 \u2502           3 \u2502                     0 \u2502                   1 \u2502\r\n\u2502 4 \u2502 0 \u2502 0 \u2502             0 \u2502           4 \u2502                     0 \u2502                   1 \u2502\r\n\u2502 4 \u2502 0 \u2502 1 \u2502             0 \u2502           5 \u2502                     0 \u2502                   1 \u2502\r\n\u2502 4 \u2502 2 \u2502 0 \u2502             0 \u2502           6 \u2502                     0 \u2502                   1 \u2502\r\n\u2502 4 \u2502 2 \u2502 1 \u2502             0 \u2502           7 \u2502                     1 \u2502                   1 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n8 rows in set. Elapsed: 0.007 sec. \r\n```",
  "created_at": "2020-07-07T11:18:27Z"
}