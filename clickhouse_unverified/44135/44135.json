{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44135,
  "instance_id": "ClickHouse__ClickHouse-44135",
  "issue_numbers": [
    "44063"
  ],
  "base_commit": "4217e750b7e0be5a5e027ac355fb5d64b839375b",
  "patch": "diff --git a/src/Access/AccessControl.cpp b/src/Access/AccessControl.cpp\nindex cb748393c029..4b1e7051a9be 100644\n--- a/src/Access/AccessControl.cpp\n+++ b/src/Access/AccessControl.cpp\n@@ -25,8 +25,6 @@\n #include <IO/Operators.h>\n #include <Poco/AccessExpireCache.h>\n #include <boost/algorithm/string/join.hpp>\n-#include <boost/algorithm/string/split.hpp>\n-#include <boost/algorithm/string/trim.hpp>\n #include <re2/re2.h>\n #include <filesystem>\n #include <mutex>\n@@ -695,14 +693,7 @@ std::shared_ptr<const ContextAccess> AccessControl::getContextAccess(\n \n     /// Extract the last entry from comma separated list of X-Forwarded-For addresses.\n     /// Only the last proxy can be trusted (if any).\n-    Strings forwarded_addresses;\n-    boost::split(forwarded_addresses, client_info.forwarded_for, boost::is_any_of(\",\"));\n-    if (!forwarded_addresses.empty())\n-    {\n-        String & last_forwarded_address = forwarded_addresses.back();\n-        boost::trim(last_forwarded_address);\n-        params.forwarded_address = last_forwarded_address;\n-    }\n+    params.forwarded_address = client_info.getLastForwardedFor();\n \n     return getContextAccess(params);\n }\ndiff --git a/src/Interpreters/ClientInfo.h b/src/Interpreters/ClientInfo.h\nindex f7a172b226de..5c5a284d63b8 100644\n--- a/src/Interpreters/ClientInfo.h\n+++ b/src/Interpreters/ClientInfo.h\n@@ -4,6 +4,7 @@\n #include <Poco/Net/SocketAddress.h>\n #include <base/types.h>\n #include <Common/OpenTelemetryTraceContext.h>\n+#include <boost/algorithm/string/trim.hpp>\n \n namespace DB\n {\n@@ -101,6 +102,14 @@ class ClientInfo\n     /// The element can be trusted only if you trust the corresponding proxy.\n     /// NOTE This field can also be reused in future for TCP interface with PROXY v1/v2 protocols.\n     String forwarded_for;\n+    String getLastForwardedFor() const\n+    {\n+        if (forwarded_for.empty())\n+            return {};\n+        String last = forwarded_for.substr(forwarded_for.find_last_of(',') + 1);\n+        boost::trim(last);\n+        return last;\n+    }\n \n     /// Common\n     String quota_key;\ndiff --git a/src/Server/HTTP/HTTPServerConnection.cpp b/src/Server/HTTP/HTTPServerConnection.cpp\nindex 926d37a11ee2..ad17bc4348ad 100644\n--- a/src/Server/HTTP/HTTPServerConnection.cpp\n+++ b/src/Server/HTTP/HTTPServerConnection.cpp\n@@ -34,6 +34,9 @@ void HTTPServerConnection::run()\n \n                 Poco::Timestamp now;\n \n+                if (!forwarded_for.empty())\n+                    request.set(\"X-Forwarded-For\", forwarded_for);\n+\n                 if (request.isSecure())\n                 {\n                     size_t hsts_max_age = context->getMaxHstsAge();\ndiff --git a/src/Server/HTTP/HTTPServerConnection.h b/src/Server/HTTP/HTTPServerConnection.h\nindex cce4f44f203d..7087f8d5a216 100644\n--- a/src/Server/HTTP/HTTPServerConnection.h\n+++ b/src/Server/HTTP/HTTPServerConnection.h\n@@ -21,6 +21,18 @@ class HTTPServerConnection : public Poco::Net::TCPServerConnection\n         Poco::Net::HTTPServerParams::Ptr params,\n         HTTPRequestHandlerFactoryPtr factory);\n \n+    HTTPServerConnection(\n+        HTTPContextPtr context_,\n+        TCPServer & tcp_server_,\n+        const Poco::Net::StreamSocket & socket_,\n+        Poco::Net::HTTPServerParams::Ptr params_,\n+        HTTPRequestHandlerFactoryPtr factory_,\n+        const String & forwarded_for_)\n+    : HTTPServerConnection(context_, tcp_server_, socket_, params_, factory_)\n+    {\n+        forwarded_for = forwarded_for_;\n+    }\n+\n     void run() override;\n \n protected:\n@@ -31,6 +43,7 @@ class HTTPServerConnection : public Poco::Net::TCPServerConnection\n     TCPServer & tcp_server;\n     Poco::Net::HTTPServerParams::Ptr params;\n     HTTPRequestHandlerFactoryPtr factory;\n+    String forwarded_for;\n     bool stopped;\n     std::mutex mutex;  // guards the |factory| with assumption that creating handlers is not thread-safe.\n };\ndiff --git a/src/Server/HTTP/HTTPServerConnectionFactory.cpp b/src/Server/HTTP/HTTPServerConnectionFactory.cpp\nindex 7e4edbbf5422..2c9ac0cda2ab 100644\n--- a/src/Server/HTTP/HTTPServerConnectionFactory.cpp\n+++ b/src/Server/HTTP/HTTPServerConnectionFactory.cpp\n@@ -16,4 +16,9 @@ Poco::Net::TCPServerConnection * HTTPServerConnectionFactory::createConnection(c\n     return new HTTPServerConnection(context, tcp_server, socket, params, factory);\n }\n \n+Poco::Net::TCPServerConnection * HTTPServerConnectionFactory::createConnection(const Poco::Net::StreamSocket & socket, TCPServer & tcp_server, TCPProtocolStackData & stack_data)\n+{\n+    return new HTTPServerConnection(context, tcp_server, socket, params, factory, stack_data.forwarded_for);\n+}\n+\n }\ndiff --git a/src/Server/HTTP/HTTPServerConnectionFactory.h b/src/Server/HTTP/HTTPServerConnectionFactory.h\nindex 03648ce7be7b..e18249da4ded 100644\n--- a/src/Server/HTTP/HTTPServerConnectionFactory.h\n+++ b/src/Server/HTTP/HTTPServerConnectionFactory.h\n@@ -15,6 +15,7 @@ class HTTPServerConnectionFactory : public TCPServerConnectionFactory\n     HTTPServerConnectionFactory(HTTPContextPtr context, Poco::Net::HTTPServerParams::Ptr params, HTTPRequestHandlerFactoryPtr factory);\n \n     Poco::Net::TCPServerConnection * createConnection(const Poco::Net::StreamSocket & socket, TCPServer & tcp_server) override;\n+    Poco::Net::TCPServerConnection * createConnection(const Poco::Net::StreamSocket & socket, TCPServer & tcp_server, TCPProtocolStackData & stack_data) override;\n \n private:\n     HTTPContextPtr context;\ndiff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp\nindex 2b63524fb79e..7856659c6a7d 100644\n--- a/src/Server/HTTPHandler.cpp\n+++ b/src/Server/HTTPHandler.cpp\n@@ -41,6 +41,7 @@\n #include <Poco/MemoryStream.h>\n #include <Poco/StreamCopier.h>\n #include <Poco/String.h>\n+#include <Poco/Net/SocketAddress.h>\n \n #include <chrono>\n #include <sstream>\n@@ -469,9 +470,15 @@ bool HTTPHandler::authenticateUser(\n     client_info.forwarded_for = request.get(\"X-Forwarded-For\", \"\");\n     client_info.quota_key = quota_key;\n \n+    /// Extract the last entry from comma separated list of forwarded_for addresses.\n+    /// Only the last proxy can be trusted (if any).\n+    String forwarded_address = client_info.getLastForwardedFor();\n     try\n     {\n-        session->authenticate(*request_credentials, request.clientAddress());\n+        if (!forwarded_address.empty() && server.config().getBool(\"auth_use_forwarded_address\", false))\n+            session->authenticate(*request_credentials, Poco::Net::SocketAddress(forwarded_address, request.clientAddress().port()));\n+        else\n+            session->authenticate(*request_credentials, request.clientAddress());\n     }\n     catch (const Authentication::Require<BasicCredentials> & required_credentials)\n     {\ndiff --git a/src/Server/ProxyV1Handler.cpp b/src/Server/ProxyV1Handler.cpp\nindex 838a1de1c04a..bf02f34c6a38 100644\n--- a/src/Server/ProxyV1Handler.cpp\n+++ b/src/Server/ProxyV1Handler.cpp\n@@ -60,6 +60,9 @@ void ProxyV1Handler::run()\n     // read port and \"\\r\\n\"\n     if (!readWord(5, word, eol) || !eol)\n         throw ParsingException(\"PROXY protocol violation\", ErrorCodes::CANNOT_PARSE_INPUT_ASSERTION_FAILED);\n+\n+    if (!stack_data.forwarded_for.empty())\n+        LOG_TRACE(log, \"Forwarded client address from PROXY header: {}\", stack_data.forwarded_for);\n }\n \n bool ProxyV1Handler::readWord(int max_len, std::string & word, bool & eol)\ndiff --git a/src/Server/ProxyV1Handler.h b/src/Server/ProxyV1Handler.h\nindex 062cc0e291a6..e56f4cd35451 100644\n--- a/src/Server/ProxyV1Handler.h\n+++ b/src/Server/ProxyV1Handler.h\n@@ -3,6 +3,7 @@\n #include <Poco/Net/TCPServerConnection.h>\n #include <Server/IServer.h>\n #include <Server/TCPProtocolStackData.h>\n+#include <Common/logger_useful.h>\n \n \n namespace DB\n@@ -13,7 +14,7 @@ class ProxyV1Handler : public Poco::Net::TCPServerConnection\n     using StreamSocket = Poco::Net::StreamSocket;\n public:\n     explicit ProxyV1Handler(const StreamSocket & socket, IServer & server_, const std::string & conf_name_, TCPProtocolStackData & stack_data_)\n-        : Poco::Net::TCPServerConnection(socket), server(server_), conf_name(conf_name_), stack_data(stack_data_) {}\n+        : Poco::Net::TCPServerConnection(socket), log(&Poco::Logger::get(\"ProxyV1Handler\")), server(server_), conf_name(conf_name_), stack_data(stack_data_) {}\n \n     void run() override;\n \n@@ -21,6 +22,7 @@ class ProxyV1Handler : public Poco::Net::TCPServerConnection\n     bool readWord(int max_len, std::string & word, bool & eol);\n \n private:\n+    Poco::Logger * log;\n     IServer & server;\n     std::string conf_name;\n     TCPProtocolStackData & stack_data;\ndiff --git a/src/Server/TCPHandler.cpp b/src/Server/TCPHandler.cpp\nindex 39814e9dfd5e..331313fedab2 100644\n--- a/src/Server/TCPHandler.cpp\n+++ b/src/Server/TCPHandler.cpp\n@@ -9,6 +9,7 @@\n #include <base/types.h>\n #include <base/scope_guard.h>\n #include <Poco/Net/NetException.h>\n+#include <Poco/Net/SocketAddress.h>\n #include <Poco/Util/LayeredConfiguration.h>\n #include <Common/CurrentThread.h>\n #include <Common/Stopwatch.h>\n@@ -120,6 +121,8 @@ TCPHandler::TCPHandler(IServer & server_, TCPServer & tcp_server_, const Poco::N\n     , default_database(stack_data.default_database)\n     , server_display_name(std::move(server_display_name_))\n {\n+    if (!forwarded_for.empty())\n+        LOG_TRACE(log, \"Forwarded client address: {}\", forwarded_for);\n }\n \n TCPHandler::~TCPHandler()\n@@ -1156,7 +1159,15 @@ void TCPHandler::receiveHello()\n     }\n \n     session = makeSession();\n-    session->authenticate(user, password, socket().peerAddress());\n+    auto & client_info = session->getClientInfo();\n+\n+    /// Extract the last entry from comma separated list of forwarded_for addresses.\n+    /// Only the last proxy can be trusted (if any).\n+    String forwarded_address = client_info.getLastForwardedFor();\n+    if (!forwarded_address.empty() && server.config().getBool(\"auth_use_forwarded_address\", false))\n+        session->authenticate(user, password, Poco::Net::SocketAddress(forwarded_address, socket().peerAddress().port()));\n+    else\n+        session->authenticate(user, password, socket().peerAddress());\n }\n \n void TCPHandler::receiveAddendum()\n",
  "test_patch": "diff --git a/tests/integration/test_composable_protocols/configs/config.xml b/tests/integration/test_composable_protocols/configs/config.xml\nindex 35673c3e7e59..f42bff335ef3 100644\n--- a/tests/integration/test_composable_protocols/configs/config.xml\n+++ b/tests/integration/test_composable_protocols/configs/config.xml\n@@ -1,4 +1,5 @@\n <clickhouse>\n+    <auth_use_forwarded_address>true</auth_use_forwarded_address>\n     <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->\n     <openSSL>\n         <server> <!-- Used for https server AND secure tcp port -->\ndiff --git a/tests/integration/test_composable_protocols/configs/users.xml b/tests/integration/test_composable_protocols/configs/users.xml\nindex da8425b3695b..8a837ad26937 100644\n--- a/tests/integration/test_composable_protocols/configs/users.xml\n+++ b/tests/integration/test_composable_protocols/configs/users.xml\n@@ -12,5 +12,12 @@\n             </networks>\n             <profile>default</profile>\n         </default>\n+        <user123>\n+            <password></password>\n+            <networks replace=\"replace\">\n+                <ip>123.123.123.123</ip>\n+            </networks>\n+            <profile>default</profile>\n+        </user123>\n     </users>\n </clickhouse>\ndiff --git a/tests/integration/test_composable_protocols/test.py b/tests/integration/test_composable_protocols/test.py\nindex d861af929c3e..bc87fea52968 100644\n--- a/tests/integration/test_composable_protocols/test.py\n+++ b/tests/integration/test_composable_protocols/test.py\n@@ -92,3 +92,19 @@ def test_connections():\n         )\n         >= 0\n     )\n+\n+    data_user_allowed = \"PROXY TCP4 123.123.123.123 255.255.255.255 65535 65535\\r\\n\\0\\021ClickHouse client\\024\\r\\253\\251\\003\\0\\007user123\\0\\004\\001\\0\\001\\0\\0\\t0.0.0.0:0\\001\\tmilovidov\\021milovidov-desktop\\vClickHouse \\024\\r\\253\\251\\003\\0\\001\\0\\0\\0\\002\\001\\025SELECT 'Hello, world'\\002\\0\\247\\203\\254l\\325\\\\z|\\265\\254F\\275\\333\\206\\342\\024\\202\\024\\0\\0\\0\\n\\0\\0\\0\\240\\01\\0\\02\\377\\377\\377\\377\\0\\0\\0\"\n+    assert (\n+        netcat(server.ip_address, 9100, bytearray(data_user_allowed, \"latin-1\")).find(\n+            bytearray(\"Hello, world\", \"latin-1\")\n+        )\n+        >= 0\n+    )\n+\n+    data_user_restricted = \"PROXY TCP4 127.0.0.1 255.255.255.255 65535 65535\\r\\n\\0\\021ClickHouse client\\024\\r\\253\\251\\003\\0\\007user123\\0\\004\\001\\0\\001\\0\\0\\t0.0.0.0:0\\001\\tmilovidov\\021milovidov-desktop\\vClickHouse \\024\\r\\253\\251\\003\\0\\001\\0\\0\\0\\002\\001\\025SELECT 'Hello, world'\\002\\0\\247\\203\\254l\\325\\\\z|\\265\\254F\\275\\333\\206\\342\\024\\202\\024\\0\\0\\0\\n\\0\\0\\0\\240\\01\\0\\02\\377\\377\\377\\377\\0\\0\\0\"\n+    assert (\n+        netcat(\n+            server.ip_address, 9100, bytearray(data_user_restricted, \"latin-1\")\n+        ).find(bytearray(\"Exception: user123: Authentication failed\", \"latin-1\"))\n+        >= 0\n+    )\n",
  "problem_statement": "Source address from proxy protocol is not respected\n**Describe the unexpected behaviour**\r\nClickHouse seems to not respect source IP address from proxy protocol header. I can see proxy protocol `Source Address` is set correctly, but query log and text log still have the IP from previous hop, and I also cannot enforce access with HOST IP. This happens to both http and native interface, and I am using Composite protocol to configure ProxyProtocol endpoint like the following:\r\n\r\n```yaml\r\n    protocols:\r\n        tcp:\r\n            type: tcp\r\n            port: 9000\r\n            description: native tcp\r\n        http:\r\n            type: http\r\n            port: 8123\r\n            description: http\r\n        tcp_over_proxy:\r\n            type: proxy1\r\n            impl: tcp\r\n            port: 9011\r\n            description: native over proxyprotocol v1\r\n        http_over_proxy:\r\n            type: proxy1\r\n            impl: http\r\n            port: 8124\r\n            description: http over proxyprotocol v1\r\n```\r\n\r\n**Expected behavior**\r\nClickHouse takes source address from proxy protocol as source IP.\r\n\r\n\n",
  "hints_text": "@yakov-olkhovskiy ",
  "created_at": "2022-12-11T23:45:30Z"
}