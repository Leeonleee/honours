{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 51303,
  "instance_id": "ClickHouse__ClickHouse-51303",
  "issue_numbers": [
    "39197"
  ],
  "base_commit": "5637c419bd0995ac55311255d8131191324fce0c",
  "patch": "diff --git a/programs/server/Server.cpp b/programs/server/Server.cpp\nindex c7a7ba71e83d..ffc0a1f93179 100644\n--- a/programs/server/Server.cpp\n+++ b/programs/server/Server.cpp\n@@ -1027,6 +1027,11 @@ try\n     /// Initialize merge tree metadata cache\n     if (config().has(\"merge_tree_metadata_cache\"))\n     {\n+        global_context->addWarningMessage(\"The setting 'merge_tree_metadata_cache' is enabled.\"\n+            \" But the feature of 'metadata cache in RocksDB' is experimental and is not ready for production.\"\n+            \" The usage of this feature can lead to data corruption and loss. The setting should be disabled in production.\"\n+            \" See the corresponding report at https://github.com/ClickHouse/ClickHouse/issues/51182\");\n+\n         fs::create_directories(path / \"rocksdb/\");\n         size_t size = config().getUInt64(\"merge_tree_metadata_cache.lru_cache_size\", 256 << 20);\n         bool continue_if_corrupted = config().getBool(\"merge_tree_metadata_cache.continue_if_corrupted\", false);\ndiff --git a/programs/server/config.xml b/programs/server/config.xml\nindex 65d325ad6c40..7323818803ad 100644\n--- a/programs/server/config.xml\n+++ b/programs/server/config.xml\n@@ -1410,12 +1410,6 @@\n         <max_entry_size_in_rows>30000000</max_entry_size_in_rows>\n     </query_cache>\n \n-    <!-- Uncomment if enable merge tree metadata cache -->\n-    <!--merge_tree_metadata_cache>\n-        <lru_cache_size>268435456</lru_cache_size>\n-        <continue_if_corrupted>true</continue_if_corrupted>\n-    </merge_tree_metadata_cache-->\n-\n     <!-- This allows to disable exposing addresses in stack traces for security reasons.\n          Please be aware that it does not improve security much, but makes debugging much harder.\n          The addresses that are small offsets from zero will be displayed nevertheless to show nullptr dereferences.\ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 10a46fda24e8..e46a04b6f494 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -2838,16 +2838,6 @@ std::map<String, zkutil::ZooKeeperPtr> Context::getAuxiliaryZooKeepers() const\n }\n \n #if USE_ROCKSDB\n-MergeTreeMetadataCachePtr Context::getMergeTreeMetadataCache() const\n-{\n-    auto cache = tryGetMergeTreeMetadataCache();\n-    if (!cache)\n-        throw Exception(\n-            ErrorCodes::LOGICAL_ERROR,\n-            \"Merge tree metadata cache is not initialized, please add config merge_tree_metadata_cache in config.xml and restart\");\n-    return cache;\n-}\n-\n MergeTreeMetadataCachePtr Context::tryGetMergeTreeMetadataCache() const\n {\n     return shared->merge_tree_metadata_cache;\ndiff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h\nindex 6cbb0e589113..43526fc5eb2f 100644\n--- a/src/Interpreters/Context.h\n+++ b/src/Interpreters/Context.h\n@@ -855,7 +855,6 @@ class Context: public std::enable_shared_from_this<Context>\n     void setClientProtocolVersion(UInt64 version);\n \n #if USE_ROCKSDB\n-    MergeTreeMetadataCachePtr getMergeTreeMetadataCache() const;\n     MergeTreeMetadataCachePtr tryGetMergeTreeMetadataCache() const;\n #endif\n \ndiff --git a/src/Storages/MergeTree/IMergeTreeDataPart.cpp b/src/Storages/MergeTree/IMergeTreeDataPart.cpp\nindex 7050a98a4bc0..6d7b6b39a40d 100644\n--- a/src/Storages/MergeTree/IMergeTreeDataPart.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeDataPart.cpp\n@@ -1674,8 +1674,8 @@ std::pair<bool, NameSet> IMergeTreeDataPart::canRemovePart() const\n void IMergeTreeDataPart::initializePartMetadataManager()\n {\n #if USE_ROCKSDB\n-    if (use_metadata_cache)\n-        metadata_manager = std::make_shared<PartMetadataManagerWithCache>(this, storage.getContext()->getMergeTreeMetadataCache());\n+    if (auto metadata_cache = storage.getContext()->tryGetMergeTreeMetadataCache(); metadata_cache && use_metadata_cache)\n+        metadata_manager = std::make_shared<PartMetadataManagerWithCache>(this, metadata_cache);\n     else\n         metadata_manager = std::make_shared<PartMetadataManagerOrdinary>(this);\n #else\ndiff --git a/src/Storages/System/StorageSystemMergeTreeMetadataCache.cpp b/src/Storages/System/StorageSystemMergeTreeMetadataCache.cpp\ndeleted file mode 100644\nindex 3bb92814a2f2..000000000000\n--- a/src/Storages/System/StorageSystemMergeTreeMetadataCache.cpp\n+++ /dev/null\n@@ -1,145 +0,0 @@\n-#include <Storages/System/StorageSystemMergeTreeMetadataCache.h>\n-\n-#if USE_ROCKSDB\n-#include <DataTypes/DataTypeDateTime.h>\n-#include <DataTypes/DataTypeString.h>\n-#include <DataTypes/DataTypesNumber.h>\n-#include <Interpreters/Context.h>\n-#include <Parsers/ASTExpressionList.h>\n-#include <Parsers/ASTFunction.h>\n-#include <Parsers/ASTIdentifier.h>\n-#include <Parsers/ASTLiteral.h>\n-#include <Parsers/ASTSelectQuery.h>\n-#include <Storages/MergeTree/KeyCondition.h>\n-#include <Storages/MergeTree/MergeTreeMetadataCache.h>\n-#include <Common/typeid_cast.h>\n-\n-namespace DB\n-{\n-namespace ErrorCodes\n-{\n-    extern const int BAD_ARGUMENTS;\n-}\n-\n-NamesAndTypesList StorageSystemMergeTreeMetadataCache::getNamesAndTypes()\n-{\n-    return {\n-        {\"key\", std::make_shared<DataTypeString>()},\n-        {\"value\", std::make_shared<DataTypeString>()},\n-    };\n-}\n-\n-static bool extractKeyImpl(const IAST & elem, String & res, bool & precise)\n-{\n-    const auto * function = elem.as<ASTFunction>();\n-    if (!function)\n-        return false;\n-\n-    if (function->name == \"and\")\n-    {\n-        for (const auto & child : function->arguments->children)\n-        {\n-            bool tmp_precise = false;\n-            if (extractKeyImpl(*child, res, tmp_precise))\n-            {\n-                precise = tmp_precise;\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    if (function->name == \"equals\" || function->name == \"like\")\n-    {\n-        const auto & args = function->arguments->as<ASTExpressionList &>();\n-        const IAST * value;\n-\n-        if (args.children.size() != 2)\n-            return false;\n-\n-        const ASTIdentifier * ident;\n-        if ((ident = args.children.at(0)->as<ASTIdentifier>()))\n-            value = args.children.at(1).get();\n-        else if ((ident = args.children.at(1)->as<ASTIdentifier>()))\n-            value = args.children.at(0).get();\n-        else\n-            return false;\n-\n-        if (ident->name() != \"key\")\n-            return false;\n-\n-        const auto * literal = value->as<ASTLiteral>();\n-        if (!literal)\n-            return false;\n-\n-        if (literal->value.getType() != Field::Types::String)\n-            return false;\n-\n-        res = literal->value.safeGet<String>();\n-        precise = function->name == \"equals\";\n-        return true;\n-    }\n-    return false;\n-}\n-\n-\n-/// Retrieve from the query a condition of the form `key= 'key'`, from conjunctions in the WHERE clause.\n-static String extractKey(const ASTPtr & query, bool& precise)\n-{\n-    const auto & select = query->as<ASTSelectQuery &>();\n-    if (!select.where())\n-        return \"\";\n-\n-    String res;\n-    return extractKeyImpl(*select.where(), res, precise) ? res : \"\";\n-}\n-\n-\n-void StorageSystemMergeTreeMetadataCache::fillData(MutableColumns & res_columns, ContextPtr context, const SelectQueryInfo & query_info) const\n-{\n-    bool precise = false;\n-    String key = extractKey(query_info.query, precise);\n-    if (key.empty())\n-        throw Exception(ErrorCodes::BAD_ARGUMENTS,\n-                        \"SELECT from system.merge_tree_metadata_cache table must contain condition like key = 'key' \"\n-                        \"or key LIKE 'prefix%' in WHERE clause.\");\n-\n-    auto cache = context->getMergeTreeMetadataCache();\n-    if (precise)\n-    {\n-        String value;\n-        if (cache->get(key, value) != MergeTreeMetadataCache::Status::OK())\n-            return;\n-\n-        size_t col_num = 0;\n-        res_columns[col_num++]->insert(key);\n-        res_columns[col_num++]->insert(value);\n-    }\n-    else\n-    {\n-        String target = extractFixedPrefixFromLikePattern(key, /*requires_perfect_prefix*/ false);\n-        if (target.empty())\n-            throw Exception(ErrorCodes::BAD_ARGUMENTS,\n-                        \"SELECT from system.merge_tree_metadata_cache table must contain condition like key = 'key' \"\n-                        \"or key LIKE 'prefix%' in WHERE clause.\");\n-\n-        Strings keys;\n-        Strings values;\n-        keys.reserve(4096);\n-        values.reserve(4096);\n-        cache->getByPrefix(target, keys, values);\n-        if (keys.empty())\n-            return;\n-\n-        assert(keys.size() == values.size());\n-        for (size_t i = 0; i < keys.size(); ++i)\n-        {\n-            size_t col_num = 0;\n-            res_columns[col_num++]->insert(keys[i]);\n-            res_columns[col_num++]->insert(values[i]);\n-        }\n-    }\n-}\n-\n-}\n-#endif\ndiff --git a/src/Storages/System/StorageSystemMergeTreeMetadataCache.h b/src/Storages/System/StorageSystemMergeTreeMetadataCache.h\ndeleted file mode 100644\nindex 4603583227ea..000000000000\n--- a/src/Storages/System/StorageSystemMergeTreeMetadataCache.h\n+++ /dev/null\n@@ -1,29 +0,0 @@\n-#pragma once\n-\n-#include \"config.h\"\n-\n-#if USE_ROCKSDB\n-#include <Storages/System/IStorageSystemOneBlock.h>\n-\n-\n-namespace DB\n-{\n-class Context;\n-\n-\n-/// Implements `merge_tree_metadata_cache` system table, which allows you to view the metadata cache data in rocksdb for testing purposes.\n-class StorageSystemMergeTreeMetadataCache : public IStorageSystemOneBlock<StorageSystemMergeTreeMetadataCache>\n-{\n-public:\n-    std::string getName() const override { return \"SystemMergeTreeMetadataCache\"; }\n-\n-    static NamesAndTypesList getNamesAndTypes();\n-\n-protected:\n-    using IStorageSystemOneBlock::IStorageSystemOneBlock;\n-\n-    void fillData(MutableColumns & res_columns, ContextPtr context, const SelectQueryInfo & query_info) const override;\n-};\n-\n-}\n-#endif\ndiff --git a/src/Storages/System/attachSystemTables.cpp b/src/Storages/System/attachSystemTables.cpp\nindex 84965b3196b9..f0c67e0f787a 100644\n--- a/src/Storages/System/attachSystemTables.cpp\n+++ b/src/Storages/System/attachSystemTables.cpp\n@@ -90,7 +90,6 @@\n \n #if USE_ROCKSDB\n #include <Storages/RocksDB/StorageSystemRocksDB.h>\n-#include <Storages/System/StorageSystemMergeTreeMetadataCache.h>\n #endif\n \n \n@@ -150,7 +149,6 @@ void attachSystemTablesLocal(ContextPtr context, IDatabase & system_database)\n #endif\n #if USE_ROCKSDB\n     attach<StorageSystemRocksDB>(context, system_database, \"rocksdb\");\n-    attach<StorageSystemMergeTreeMetadataCache>(context, system_database, \"merge_tree_metadata_cache\");\n #endif\n }\n \n",
  "test_patch": "diff --git a/tests/integration/test_multiple_disks/configs/logs_config.xml b/tests/integration/test_multiple_disks/configs/logs_config.xml\nindex b0643c8bdad4..2ee8bb55f38c 100644\n--- a/tests/integration/test_multiple_disks/configs/logs_config.xml\n+++ b/tests/integration/test_multiple_disks/configs/logs_config.xml\n@@ -14,8 +14,4 @@\n         <table>part_log</table>\n         <flush_interval_milliseconds>500</flush_interval_milliseconds>\n     </part_log>\n-    <merge_tree_metadata_cache>\n-        <lru_cache_size>268435456</lru_cache_size>\n-        <continue_if_corrupted>true</continue_if_corrupted>\n-    </merge_tree_metadata_cache>\n </clickhouse>\ndiff --git a/tests/integration/test_multiple_disks/test.py b/tests/integration/test_multiple_disks/test.py\nindex bc7ac6683aff..9a5a315ebedb 100644\n--- a/tests/integration/test_multiple_disks/test.py\n+++ b/tests/integration/test_multiple_disks/test.py\n@@ -889,15 +889,12 @@ def get_paths_for_partition_from_part_log(node, table, partition_id):\n \n \n @pytest.mark.parametrize(\n-    \"name,engine,use_metadata_cache\",\n+    \"name,engine\",\n     [\n-        pytest.param(\"altering_mt\", \"MergeTree()\", \"false\", id=\"mt\"),\n-        pytest.param(\"altering_mt\", \"MergeTree()\", \"true\", id=\"mt_use_metadata_cache\"),\n-        # (\"altering_replicated_mt\",\"ReplicatedMergeTree('/clickhouse/altering_replicated_mt', '1')\",),\n-        # SYSTEM STOP MERGES doesn't disable merges assignments\n+        pytest.param(\"altering_mt\", \"MergeTree()\", id=\"mt\"),\n     ],\n )\n-def test_alter_move(start_cluster, name, engine, use_metadata_cache):\n+def test_alter_move(start_cluster, name, engine):\n     try:\n         node1.query(\n             \"\"\"\n@@ -907,9 +904,9 @@ def test_alter_move(start_cluster, name, engine, use_metadata_cache):\n             ) ENGINE = {engine}\n             ORDER BY tuple()\n             PARTITION BY toYYYYMM(EventDate)\n-            SETTINGS storage_policy='jbods_with_external', use_metadata_cache={use_metadata_cache}\n+            SETTINGS storage_policy='jbods_with_external'\n         \"\"\".format(\n-                name=name, engine=engine, use_metadata_cache=use_metadata_cache\n+                name=name, engine=engine\n             )\n         )\n \ndiff --git a/tests/queries/0_stateless/01161_all_system_tables.sh b/tests/queries/0_stateless/01161_all_system_tables.sh\nindex 6a72027478ed..47316a6a805b 100755\n--- a/tests/queries/0_stateless/01161_all_system_tables.sh\n+++ b/tests/queries/0_stateless/01161_all_system_tables.sh\n@@ -18,7 +18,7 @@ function run_selects()\n {\n     thread_num=$1\n     readarray -t tables_arr < <(${CLICKHOUSE_CLIENT} -q \"SELECT database || '.' || name FROM system.tables\n-    WHERE database in ('system', 'information_schema', 'INFORMATION_SCHEMA') and name!='zookeeper' and name!='merge_tree_metadata_cache' and name!='models'\n+    WHERE database in ('system', 'information_schema', 'INFORMATION_SCHEMA') and name != 'zookeeper' and name != 'models'\n     AND sipHash64(name || toString($RAND)) % $THREADS = $thread_num\")\n \n     for t in \"${tables_arr[@]}\"\ndiff --git a/tests/queries/0_stateless/01233_check_table_with_metadata_cache.reference b/tests/queries/0_stateless/01233_check_table_with_metadata_cache.reference\ndeleted file mode 100644\nindex b773fc49ec33..000000000000\n--- a/tests/queries/0_stateless/01233_check_table_with_metadata_cache.reference\n+++ /dev/null\n@@ -1,672 +0,0 @@\n-database engine:Ordinary; table engine:ReplicatedMergeTree; use metadata cache:false; use projection:false; use_compact_data_part:false\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Ordinary; table engine:ReplicatedMergeTree; use metadata cache:false; use projection:false; use_compact_data_part:true\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Ordinary; table engine:ReplicatedMergeTree; use metadata cache:false; use projection:true; use_compact_data_part:false\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Ordinary; table engine:ReplicatedMergeTree; use metadata cache:false; use projection:true; use_compact_data_part:true\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Ordinary; table engine:ReplicatedMergeTree; use metadata cache:true; use projection:false; use_compact_data_part:false\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Ordinary; table engine:ReplicatedMergeTree; use metadata cache:true; use projection:false; use_compact_data_part:true\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Ordinary; table engine:ReplicatedMergeTree; use metadata cache:true; use projection:true; use_compact_data_part:false\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Ordinary; table engine:ReplicatedMergeTree; use metadata cache:true; use projection:true; use_compact_data_part:true\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Atomic; table engine:ReplicatedMergeTree; use metadata cache:false; use projection:false; use_compact_data_part:false\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Atomic; table engine:ReplicatedMergeTree; use metadata cache:false; use projection:false; use_compact_data_part:true\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Atomic; table engine:ReplicatedMergeTree; use metadata cache:false; use projection:true; use_compact_data_part:false\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Atomic; table engine:ReplicatedMergeTree; use metadata cache:false; use projection:true; use_compact_data_part:true\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Atomic; table engine:ReplicatedMergeTree; use metadata cache:true; use projection:false; use_compact_data_part:false\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Atomic; table engine:ReplicatedMergeTree; use metadata cache:true; use projection:false; use_compact_data_part:true\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Atomic; table engine:ReplicatedMergeTree; use metadata cache:true; use projection:true; use_compact_data_part:false\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-database engine:Atomic; table engine:ReplicatedMergeTree; use metadata cache:true; use projection:true; use_compact_data_part:true\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\n-TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\n-CHECK TABLE test_metadata_cache.check_part_metadata_cache;\n-1\ndiff --git a/tests/queries/0_stateless/01233_check_table_with_metadata_cache.sh b/tests/queries/0_stateless/01233_check_table_with_metadata_cache.sh\ndeleted file mode 100755\nindex 67f11e58a684..000000000000\n--- a/tests/queries/0_stateless/01233_check_table_with_metadata_cache.sh\n+++ /dev/null\n@@ -1,104 +0,0 @@\n-#!/usr/bin/env bash\n-# Tags: no-fasttest, long, no-s3-storage, no-random-settings, no-parallel\n-# Tag no-fasttest: setting use_metadata_cache=true is not supported in fasttest, because clickhouse binary in fasttest is build without RocksDB.\n-# Tag no-random-settings: random settings significantly slow down test with debug build (alternative: add no-debug tag)\n-# To suppress Warning messages from CHECK TABLE\n-CLICKHOUSE_CLIENT_SERVER_LOGS_LEVEL=error\n-CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n-# shellcheck source=../shell_config.sh\n-. \"$CURDIR\"/../shell_config.sh\n-\n-set -e\n-\n-table_engines=(ReplicatedMergeTree)\n-database_engines=(Ordinary Atomic)\n-use_metadata_caches=(false true)\n-use_projections=(false true)\n-use_compact_data_parts=(false true)\n-\n-for table_engine in \"${table_engines[@]}\"; do\n-    for database_engine in \"${database_engines[@]}\"; do\n-        for use_metadata_cache in \"${use_metadata_caches[@]}\"; do\n-            for use_projection in \"${use_projections[@]}\"; do\n-                for use_compact_data_part in \"${use_compact_data_parts[@]}\"; do\n-                    echo \"database engine:${database_engine}; table engine:${table_engine}; use metadata cache:${use_metadata_cache}; use projection:${use_projection}; use_compact_data_part:${use_compact_data_part}\"\n-\n-                    ${CLICKHOUSE_CLIENT} --query \"DROP TABLE IF EXISTS test_metadata_cache.check_part_metadata_cache SYNC;\"\n-                    ${CLICKHOUSE_CLIENT} --query \"DROP DATABASE IF EXISTS test_metadata_cache;\"\n-                    ${CLICKHOUSE_CLIENT} --allow_deprecated_database_ordinary=1 --query \"CREATE DATABASE test_metadata_cache ENGINE = ${database_engine};\"\n-\n-                    table_engine_clause=\"\"\n-                    if [[ \"$table_engine\" == \"ReplicatedMergeTree\" ]]; then\n-                        table_engine_clause=\"ENGINE ReplicatedMergeTree('/clickhouse/tables/$CLICKHOUSE_TEST_ZOOKEEPER_PREFIX/test_metadata_cache/check_part_metadata_cache', 'r1')\"\n-                    elif [[ \"$table_engine\" == \"MergeTree\" ]]; then\n-                        table_engine_clause=\"ENGINE MergeTree()\"\n-                    fi\n-\n-                    projection_clause=\"\"\n-                    if [[ \"$use_projection\" == \"true\" ]]; then\n-                        projection_clause=\", projection p1 (select p, sum(k), sum(v1), sum(v2) group by p)\"\n-                    fi\n-\n-                    compact_data_part_clause=\", min_bytes_for_wide_part = 10485760\"\n-                    if [[ $use_compact_data_part == \"true\" ]]; then\n-                        compact_data_part_clause=\", min_bytes_for_wide_part = 0\"\n-                    fi\n-                    ${CLICKHOUSE_CLIENT} --query \"CREATE TABLE test_metadata_cache.check_part_metadata_cache (p Date, k UInt64, v1 UInt64, v2 Int64${projection_clause}) $table_engine_clause PARTITION BY toYYYYMM(p) ORDER BY k settings use_metadata_cache = ${use_metadata_cache} ${compact_data_part_clause}\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Insert first batch of data.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 1, 1000, 2000), ('2018-05-16', 2, 3000, 4000), ('2018-05-17', 3, 5000, 6000), ('2018-05-18', 4, 7000, 8000);\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Insert second batch of data.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-05-15', 5, 1000, 2000), ('2018-05-16', 6, 3000, 4000), ('2018-05-17', 7, 5000, 6000), ('2018-05-18', 8, 7000, 8000);\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # First update.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v1 = 2001  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Second update.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"ALTER TABLE test_metadata_cache.check_part_metadata_cache update  v2 = 4002  where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # First delete.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 1 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Second delete.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"ALTER TABLE test_metadata_cache.check_part_metadata_cache delete where k = 8 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Insert third batch of data.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"INSERT INTO test_metadata_cache.check_part_metadata_cache (p, k, v1, v2) VALUES ('2018-06-15', 5, 1000, 2000), ('2018-06-16', 6, 3000, 4000), ('2018-06-17', 7, 5000, 6000), ('2018-06-18', 8, 7000, 8000);\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Drop one partition.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"ALTER TABLE test_metadata_cache.check_part_metadata_cache drop partition 201805 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Add column.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"ALTER TABLE test_metadata_cache.check_part_metadata_cache add column v3 UInt64 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Delete column.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"ALTER TABLE test_metadata_cache.check_part_metadata_cache drop column v3 settings mutations_sync = 1, replication_alter_partitions_sync = 1;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Add TTL.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 10 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Modify TTL.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"ALTER TABLE test_metadata_cache.check_part_metadata_cache modify TTL p + INTERVAL 15 YEAR settings mutations_sync = 1, replication_alter_partitions_sync = 1;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-\n-                    # Truncate table.\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"TRUNCATE TABLE test_metadata_cache.check_part_metadata_cache;\"\n-                    ${CLICKHOUSE_CLIENT} --echo --query \"CHECK TABLE test_metadata_cache.check_part_metadata_cache;\"\n-                done\n-            done\n-        done\n-    done\n-done\n",
  "problem_statement": "Parts metadata cache and failing mutation\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/2079699f7542527d62cbaed828940d54b0ca00a2/stress_test__undefined__actions_.html\r\n\r\nBC check in Stress Tests sometimes fail with \r\n```\r\n2022.07.13 10:26:18.097238 [ 1051250 ] {} <Error> MutateFromLogEntryTask: virtual bool DB::ReplicatedMergeMutateTaskBase::executeStep(): Code: 47. DB::Exception: Missing columns: 'v3' while processing query: 'v3, k, v1, v2, p', required columns: 'v3' 'k' 'v1' 'v2' 'p', maybe you meant: ['v1','k','v1','v2','p']. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):\r\n2022.07.13 10:26:18.098966 [ 1051240 ] {} <Error> MutateFromLogEntryTask: virtual bool DB::ReplicatedMergeMutateTaskBase::executeStep(): Code: 47. DB::Exception: Missing columns: 'v3' while processing query: 'v3, k, v1, v2, p', required columns: 'v3' 'k' 'v1' 'v2' 'p', maybe you meant: ['v1','k','v1','v2','p']. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):\r\n2022.07.13 10:26:18.101742 [ 1051251 ] {} <Error> MutateFromLogEntryTask: virtual bool DB::ReplicatedMergeMutateTaskBase::executeStep(): Code: 47. DB::Exception: Missing columns: 'v3' while processing query: 'v3, k, v1, v2, p', required columns: 'v3' 'k' 'v1' 'v2' 'p', maybe you meant: ['v1','k','v1','v2','p']. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):\r\n```\r\ni.e. some mutation cannot be executed (slightly related to #39174). This mutation was started by the test `01233_check_table_with_metadata_cache`. Logs:\r\nby table id: https://pastila.nl/?024eb85d/65a0e50dba5aafb52d0ecec2cf2d5737\r\nby query ids: https://pastila.nl/?002a7f2e/7505e0215864bbb1ea3da78c4a0151db\r\n\r\nThe second mutation (`MODIFY TTL` + implicit `MATERIALIZE TTL`) is trying to read from column that was dropped by the first mutation (`DROP COLUMN v3`). The error persists after server restart, so I suppose metadata was corrupted. Probably not metadata itself, but metadata cache. \r\n\r\ncc: @taiyang-li, @CurtizJ \r\n\r\n\n",
  "hints_text": "@tavplubix  Thanks for your issue. I'll try to fix it soon",
  "created_at": "2023-06-23T00:27:51Z"
}