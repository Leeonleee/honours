You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Clickhouse server process can assert / crash if vector index search is performed after initial range pruning by primary key or other skip index
### Company or project name

Clickhouse Vector Search

### Describe what's wrong

Following type of query can assert or crash Clickhouse server process -

```sql
SELECT id FROM items
PREWHERE id < 300000
ORDER BY cosineDistance(vector, [-0.004410677 ...])
LIMIT 10
```
The EXPLAIN looks like this -

```
Expression (Project names)
  Limit (preliminary LIMIT (without OFFSET))
    Sorting (Sorting for ORDER BY)
      Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
        ReadFromMergeTree (default.items)
        Indexes:
          PrimaryKey
            Keys:
              id
            Condition: (id in (-Inf, 299999])
            Parts: 1/1
            Granules: 175/575
          Skip
            Name: vector_index
            Description: vector_similarity GRANULARITY 100000000
            Parts: 1/1
            Granules: 18446744073709551566/175     <<<<<< 
```
Note the last line. 

The assert is -

```
2025.03.24 04:52:09.160569 [ 1239968 ] {fb2b487a-511d-4568-b318-d5c4bd64bf07} <Error> PipelineExecutor: Code: 49. DB::Exception: 
Trying to get non existing mark 384307168202282550, while size is 576: While executing 
MergeTreeSelect(pool: ReadPool, algorithm: Thread). (LOGICAL_ERROR), 
Stack trace (when copying this message, always include the lines below):
```

### Does it reproduce on the most recent release?

Yes

### How to reproduce

Version : 25.4.1
Check above query

### Expected behavior

No errors/crashes

### Error message and/or stacktrace

```
0. ./contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x00000000176614d2
1. ./build/./src/Common/Exception.cpp:108: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000d6c5219
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000806beac
3. DB::Exception::Exception<unsigned long&, unsigned long>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type, std::type_identity<unsigned long>::type>, unsigned long&, unsigned long&&) @ 0x00000000080f430b
4. ./build/./src/Storages/MergeTree/MergeTreeIndexGranularityAdaptive.cpp:24: DB::MergeTreeIndexGranularityAdaptive::getMarkRows(unsigned long) const @ 0x0000000013c25558
5. ./build/./src/Storages/MergeTree/MergeTreeReadTask.cpp:139: DB::MergeTreeReadTask::estimateNumRows() const @ 0x0000000013cbb1ca
6. ./build/./src/Storages/MergeTree/MergeTreeReadTask.cpp:169: DB::MergeTreeReadTask::read() @ 0x0000000013cbb3f2
7. ./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38: DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001463702c
8. ./build/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:204: DB::MergeTreeSelectProcessor::read() @ 0x0000000013cc534e
9. ./build/./src/Storages/MergeTree/MergeTreeSource.cpp:229: DB::MergeTreeSource::tryGenerate() @ 0x000000001463e929
10. ./build/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x00000000141f6c05
11. ./build/./src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::ExecutionThreadContext::executeTask() @ 0x000000001420f6e1
12. ./build/./src/Processors/Executors/PipelineExecutor.cpp:296: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000014205285
13. ./build/./src/Processors/Executors/PipelineExecutor.cpp:262: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000014205f81
14. ./contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000000d7f0bbb
15. ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() @ 0x000000000d7f5de2
16. ./contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000000d7ee836
17. ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000d7f419b
18. ? @ 0x000072b69de9caa4
19. ? @ 0x000072b69df29c3c
```

### Additional context

_No response_
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
