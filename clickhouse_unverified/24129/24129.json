{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 24129,
  "instance_id": "ClickHouse__ClickHouse-24129",
  "issue_numbers": [
    "24128"
  ],
  "base_commit": "9d02af7d8be89b1343fae3dd26b4993847a06be2",
  "patch": "diff --git a/src/DataTypes/getLeastSupertype.cpp b/src/DataTypes/getLeastSupertype.cpp\nindex a04d16ef7cd7..a950d18b50a9 100644\n--- a/src/DataTypes/getLeastSupertype.cpp\n+++ b/src/DataTypes/getLeastSupertype.cpp\n@@ -288,21 +288,35 @@ DataTypePtr getLeastSupertype(const DataTypes & types)\n                     ErrorCodes::NO_COMMON_TYPE);\n \n             if (have_datetime64 == 0)\n+            {\n+                for (const auto & type : types)\n+                {\n+                    if (isDateTime(type))\n+                        return type;\n+                }\n+\n                 return std::make_shared<DataTypeDateTime>();\n+            }\n \n             UInt8 max_scale = 0;\n+            size_t max_scale_date_time_index = 0;\n \n-            for (const auto & t : types)\n+            for (size_t i = 0; i < types.size(); ++i)\n             {\n-                if (const auto * dt64 = typeid_cast<const DataTypeDateTime64 *>(t.get()))\n+                const auto & type = types[i];\n+\n+                if (const auto * date_time64_type = typeid_cast<const DataTypeDateTime64 *>(type.get()))\n                 {\n-                    const auto scale = dt64->getScale();\n-                    if (scale > max_scale)\n+                    const auto scale = date_time64_type->getScale();\n+                    if (scale >= max_scale)\n+                    {\n+                        max_scale_date_time_index = i;\n                         max_scale = scale;\n+                    }\n                 }\n             }\n \n-            return std::make_shared<DataTypeDateTime64>(max_scale);\n+            return types[max_scale_date_time_index];\n         }\n     }\n \ndiff --git a/src/Functions/DateTimeTransforms.h b/src/Functions/DateTimeTransforms.h\nindex 03f353331504..0f36fe524658 100644\n--- a/src/Functions/DateTimeTransforms.h\n+++ b/src/Functions/DateTimeTransforms.h\n@@ -4,6 +4,7 @@\n #include <Core/DecimalFunctions.h>\n #include <Common/Exception.h>\n #include <common/DateLUTImpl.h>\n+#include <common/DateLUT.h>\n #include <Columns/ColumnVector.h>\n #include <Columns/ColumnDecimal.h>\n #include <Functions/FunctionHelpers.h>\n@@ -863,19 +864,27 @@ struct DateTimeTransformImpl\n     {\n         using Op = Transformer<typename FromDataType::FieldType, typename ToDataType::FieldType, Transform>;\n \n-        size_t time_zone_argument_position = 1;\n-        if constexpr (std::is_same_v<ToDataType, DataTypeDateTime64>)\n-            time_zone_argument_position = 2;\n-\n-        const DateLUTImpl & time_zone = extractTimeZoneFromFunctionArguments(arguments, time_zone_argument_position, 0);\n-\n         const ColumnPtr source_col = arguments[0].column;\n         if (const auto * sources = checkAndGetColumn<typename FromDataType::ColumnType>(source_col.get()))\n         {\n             auto mutable_result_col = result_type->createColumn();\n             auto * col_to = assert_cast<typename ToDataType::ColumnType *>(mutable_result_col.get());\n \n-            Op::vector(sources->getData(), col_to->getData(), time_zone, transform);\n+            WhichDataType result_data_type(result_type);\n+            if (result_data_type.isDateTime() || result_data_type.isDateTime64())\n+            {\n+                const auto & time_zone = dynamic_cast<const TimezoneMixin &>(*result_type).getTimeZone();\n+                Op::vector(sources->getData(), col_to->getData(), time_zone, transform);\n+            }\n+            else\n+            {\n+                size_t time_zone_argument_position = 1;\n+                if constexpr (std::is_same_v<ToDataType, DataTypeDateTime64>)\n+                    time_zone_argument_position = 2;\n+\n+                const DateLUTImpl & time_zone = extractTimeZoneFromFunctionArguments(arguments, time_zone_argument_position, 0);\n+                Op::vector(sources->getData(), col_to->getData(), time_zone, transform);\n+            }\n \n             return mutable_result_col;\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00735_long_conditional.reference b/tests/queries/0_stateless/00735_long_conditional.reference\nindex 6308a48218b1..082c2d49de9a 100644\n--- a/tests/queries/0_stateless/00735_long_conditional.reference\n+++ b/tests/queries/0_stateless/00735_long_conditional.reference\n@@ -92,8 +92,8 @@ value vs value\n 0\t1\t1\tUInt64\tDecimal(18, 0)\tDecimal(38, 0)\n 0\t1\t1\tUInt64\tDecimal(38, 0)\tDecimal(38, 0)\n 1970-01-01\t1970-01-02\t1970-01-02\tDate\tDate\tDate\n-2000-01-01\t2000-01-01 00:00:01\t2000-01-01 00:00:01\tDate\tDateTime(\\'Europe/Moscow\\')\tDateTime\n-2000-01-01 00:00:00\t2000-01-02\t2000-01-02 00:00:00\tDateTime(\\'Europe/Moscow\\')\tDate\tDateTime\n+2000-01-01\t2000-01-01 00:00:01\t2000-01-01 00:00:01\tDate\tDateTime(\\'Europe/Moscow\\')\tDateTime(\\'Europe/Moscow\\')\n+2000-01-01 00:00:00\t2000-01-02\t2000-01-02 00:00:00\tDateTime(\\'Europe/Moscow\\')\tDate\tDateTime(\\'Europe/Moscow\\')\n 1970-01-01 03:00:00\t1970-01-01 03:00:01\t1970-01-01 03:00:01\tDateTime(\\'Europe/Moscow\\')\tDateTime(\\'Europe/Moscow\\')\tDateTime(\\'Europe/Moscow\\')\n column vs value\n 0\t1\t1\tInt8\tInt8\tInt8\n@@ -189,6 +189,6 @@ column vs value\n 0\t1\t1\tUInt64\tDecimal(18, 0)\tDecimal(38, 0)\n 0\t1\t1\tUInt64\tDecimal(38, 0)\tDecimal(38, 0)\n 1970-01-01\t1970-01-02\t1970-01-02\tDate\tDate\tDate\n-2000-01-01\t2000-01-01 00:00:01\t2000-01-01 00:00:01\tDate\tDateTime(\\'Europe/Moscow\\')\tDateTime\n-2000-01-01 00:00:00\t2000-01-02\t2000-01-02 00:00:00\tDateTime(\\'Europe/Moscow\\')\tDate\tDateTime\n+2000-01-01\t2000-01-01 00:00:01\t2000-01-01 00:00:01\tDate\tDateTime(\\'Europe/Moscow\\')\tDateTime(\\'Europe/Moscow\\')\n+2000-01-01 00:00:00\t2000-01-02\t2000-01-02 00:00:00\tDateTime(\\'Europe/Moscow\\')\tDate\tDateTime(\\'Europe/Moscow\\')\n 1970-01-01 03:00:00\t1970-01-01 03:00:01\t1970-01-01 03:00:01\tDateTime(\\'Europe/Moscow\\')\tDateTime(\\'Europe/Moscow\\')\tDateTime(\\'Europe/Moscow\\')\ndiff --git a/tests/queries/0_stateless/01925_date_date_time_comparison.reference b/tests/queries/0_stateless/01925_date_date_time_comparison.reference\nnew file mode 100644\nindex 000000000000..6ed281c757a9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01925_date_date_time_comparison.reference\n@@ -0,0 +1,2 @@\n+1\n+1\ndiff --git a/tests/queries/0_stateless/01925_date_date_time_comparison.sql b/tests/queries/0_stateless/01925_date_date_time_comparison.sql\nnew file mode 100644\nindex 000000000000..13e856384d24\n--- /dev/null\n+++ b/tests/queries/0_stateless/01925_date_date_time_comparison.sql\n@@ -0,0 +1,2 @@\n+SELECT toDate('2000-01-01') < toDateTime('2000-01-01 00:00:01', 'Europe/Moscow');\n+SELECT toDate('2000-01-01') < toDateTime64('2000-01-01 00:00:01', 0, 'Europe/Moscow');\ndiff --git a/tests/queries/0_stateless/01926_date_date_time_supertype.reference b/tests/queries/0_stateless/01926_date_date_time_supertype.reference\nnew file mode 100644\nindex 000000000000..ec9933dfbd29\n--- /dev/null\n+++ b/tests/queries/0_stateless/01926_date_date_time_supertype.reference\n@@ -0,0 +1,12 @@\n+Array\n+Array(DateTime(\\'Europe/Moscow\\'))\n+Array(DateTime64(5, \\'Europe/Moscow\\'))\n+Array(DateTime64(6, \\'Europe/Moscow\\'))\n+If\n+2000-01-01 00:00:00\tDateTime(\\'Europe/Moscow\\')\n+2000-01-01 00:00:00\tDateTime(\\'Europe/Moscow\\')\n+2000-01-01 00:00:00.00000\tDateTime64(5, \\'Europe/Moscow\\')\n+2000-01-01 00:00:00.00000\tDateTime64(5, \\'Europe/Moscow\\')\n+Cast\n+2000-01-01 00:00:00\tDateTime(\\'UTC\\')\n+2000-01-01 00:00:00.00000\tDateTime64(5, \\'UTC\\')\ndiff --git a/tests/queries/0_stateless/01926_date_date_time_supertype.sql b/tests/queries/0_stateless/01926_date_date_time_supertype.sql\nnew file mode 100644\nindex 000000000000..559cd465ebb0\n--- /dev/null\n+++ b/tests/queries/0_stateless/01926_date_date_time_supertype.sql\n@@ -0,0 +1,24 @@\n+SELECT 'Array';\n+\n+SELECT toTypeName([toDate('2000-01-01'), toDateTime('2000-01-01', 'Europe/Moscow')]);\n+SELECT toTypeName([toDate('2000-01-01'), toDateTime('2000-01-01', 'Europe/Moscow'), toDateTime64('2000-01-01', 5, 'Europe/Moscow')]);\n+SELECT toTypeName([toDate('2000-01-01'), toDateTime('2000-01-01', 'Europe/Moscow'), toDateTime64('2000-01-01', 5, 'Europe/Moscow'), toDateTime64('2000-01-01', 6, 'Europe/Moscow')]);\n+\n+DROP TABLE IF EXISTS predicate_table;\n+CREATE TABLE predicate_table (value UInt8) ENGINE=TinyLog;\n+\n+INSERT INTO predicate_table VALUES (0), (1);\n+\n+SELECT 'If';\n+\n+WITH toDate('2000-01-01') as a, toDateTime('2000-01-01', 'Europe/Moscow') as b\n+SELECT if(value, b, a) as result, toTypeName(result)\n+FROM predicate_table;\n+\n+WITH toDateTime('2000-01-01') as a, toDateTime64('2000-01-01', 5, 'Europe/Moscow') as b\n+SELECT if(value, b, a) as result, toTypeName(result)\n+FROM predicate_table;\n+\n+SELECT 'Cast';\n+SELECT CAST(toDate('2000-01-01') AS DateTime('UTC')) AS x, toTypeName(x);\n+SELECT CAST(toDate('2000-01-01') AS DateTime64(5, 'UTC')) AS x, toTypeName(x);\n",
  "problem_statement": "TimeZone is ignored in function if with Date and DateTime\n```\r\nqoega-dev.sas.yp-c.yandex.net :) SELECT toDate('2000-01-01') < toDateTime('2000-01-01 00:00:01', 'Europe/Moscow');\r\n\r\nSELECT toDate('2000-01-01') < toDateTime('2000-01-01 00:00:01', 'Europe/Moscow')\r\n\r\nQuery id: baf63ad5-1893-401c-9728-63bd5c295df1\r\n\r\n\u250c\u2500less(toDate('2000-01-01'), toDateTime('2000-01-01 00:00:01', 'Europe/Moscow'))\u2500\u2510\r\n\u2502                                                                              0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.011 sec.\r\n\r\nqoega-dev.sas.yp-c.yandex.net :) SELECT toDate('2000-01-01') < toDateTime('2000-01-01 00:00:01');\r\n\r\nSELECT toDate('2000-01-01') < toDateTime('2000-01-01 00:00:01')\r\n\r\nQuery id: c2136446-a3a0-4567-a94e-68f40dc1f158\r\n\r\n\u250c\u2500less(toDate('2000-01-01'), toDateTime('2000-01-01 00:00:01'))\u2500\u2510\r\n\u2502                                                             1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.011 sec.\r\n```\n",
  "hints_text": "",
  "created_at": "2021-05-14T17:02:53Z"
}