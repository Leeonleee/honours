diff --git a/src/DataTypes/getLeastSupertype.cpp b/src/DataTypes/getLeastSupertype.cpp
index a04d16ef7cd7..a950d18b50a9 100644
--- a/src/DataTypes/getLeastSupertype.cpp
+++ b/src/DataTypes/getLeastSupertype.cpp
@@ -288,21 +288,35 @@ DataTypePtr getLeastSupertype(const DataTypes & types)
                     ErrorCodes::NO_COMMON_TYPE);
 
             if (have_datetime64 == 0)
+            {
+                for (const auto & type : types)
+                {
+                    if (isDateTime(type))
+                        return type;
+                }
+
                 return std::make_shared<DataTypeDateTime>();
+            }
 
             UInt8 max_scale = 0;
+            size_t max_scale_date_time_index = 0;
 
-            for (const auto & t : types)
+            for (size_t i = 0; i < types.size(); ++i)
             {
-                if (const auto * dt64 = typeid_cast<const DataTypeDateTime64 *>(t.get()))
+                const auto & type = types[i];
+
+                if (const auto * date_time64_type = typeid_cast<const DataTypeDateTime64 *>(type.get()))
                 {
-                    const auto scale = dt64->getScale();
-                    if (scale > max_scale)
+                    const auto scale = date_time64_type->getScale();
+                    if (scale >= max_scale)
+                    {
+                        max_scale_date_time_index = i;
                         max_scale = scale;
+                    }
                 }
             }
 
-            return std::make_shared<DataTypeDateTime64>(max_scale);
+            return types[max_scale_date_time_index];
         }
     }
 
diff --git a/src/Functions/DateTimeTransforms.h b/src/Functions/DateTimeTransforms.h
index 03f353331504..0f36fe524658 100644
--- a/src/Functions/DateTimeTransforms.h
+++ b/src/Functions/DateTimeTransforms.h
@@ -4,6 +4,7 @@
 #include <Core/DecimalFunctions.h>
 #include <Common/Exception.h>
 #include <common/DateLUTImpl.h>
+#include <common/DateLUT.h>
 #include <Columns/ColumnVector.h>
 #include <Columns/ColumnDecimal.h>
 #include <Functions/FunctionHelpers.h>
@@ -863,19 +864,27 @@ struct DateTimeTransformImpl
     {
         using Op = Transformer<typename FromDataType::FieldType, typename ToDataType::FieldType, Transform>;
 
-        size_t time_zone_argument_position = 1;
-        if constexpr (std::is_same_v<ToDataType, DataTypeDateTime64>)
-            time_zone_argument_position = 2;
-
-        const DateLUTImpl & time_zone = extractTimeZoneFromFunctionArguments(arguments, time_zone_argument_position, 0);
-
         const ColumnPtr source_col = arguments[0].column;
         if (const auto * sources = checkAndGetColumn<typename FromDataType::ColumnType>(source_col.get()))
         {
             auto mutable_result_col = result_type->createColumn();
             auto * col_to = assert_cast<typename ToDataType::ColumnType *>(mutable_result_col.get());
 
-            Op::vector(sources->getData(), col_to->getData(), time_zone, transform);
+            WhichDataType result_data_type(result_type);
+            if (result_data_type.isDateTime() || result_data_type.isDateTime64())
+            {
+                const auto & time_zone = dynamic_cast<const TimezoneMixin &>(*result_type).getTimeZone();
+                Op::vector(sources->getData(), col_to->getData(), time_zone, transform);
+            }
+            else
+            {
+                size_t time_zone_argument_position = 1;
+                if constexpr (std::is_same_v<ToDataType, DataTypeDateTime64>)
+                    time_zone_argument_position = 2;
+
+                const DateLUTImpl & time_zone = extractTimeZoneFromFunctionArguments(arguments, time_zone_argument_position, 0);
+                Op::vector(sources->getData(), col_to->getData(), time_zone, transform);
+            }
 
             return mutable_result_col;
         }
