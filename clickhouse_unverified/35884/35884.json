{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 35884,
  "instance_id": "ClickHouse__ClickHouse-35884",
  "issue_numbers": [
    "35816"
  ],
  "base_commit": "30c1afe29d8c495fda517fb3b0d86b8d414551ab",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex b433c6e45916..4e4e555fb548 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -1909,6 +1909,7 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, Context\n     StorageInMemoryMetadata old_metadata = getInMemoryMetadata();\n \n     const auto & settings = local_context->getSettingsRef();\n+    const auto & settings_from_storage = getSettings();\n \n     if (!settings.allow_non_metadata_alters)\n     {\n@@ -2099,6 +2100,14 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, Context\n \n             dropped_columns.emplace(command.column_name);\n         }\n+        else if (command.type == AlterCommand::RESET_SETTING)\n+        {\n+            for (const auto & reset_setting : command.settings_resets)\n+            {\n+                if (!settings_from_storage->has(reset_setting))\n+                    throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Cannot reset setting '{}' because it doesn't exist for MergeTree engines family\", reset_setting);\n+            }\n+        }\n         else if (command.isRequireMutationStage(getInMemoryMetadata()))\n         {\n             /// This alter will override data on disk. Let's check that it doesn't\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00980_merge_alter_settings.sql b/tests/queries/0_stateless/00980_merge_alter_settings.sql\nindex c0d18f6d453c..f595a09970d0 100644\n--- a/tests/queries/0_stateless/00980_merge_alter_settings.sql\n+++ b/tests/queries/0_stateless/00980_merge_alter_settings.sql\n@@ -91,8 +91,8 @@ SHOW CREATE TABLE table_for_reset_setting;\n \n ALTER TABLE table_for_reset_setting RESET SETTING index_granularity; -- { serverError 472 }\n \n--- ignore undefined setting\n-ALTER TABLE table_for_reset_setting RESET SETTING merge_with_ttl_timeout, unknown_setting;\n+-- don't execute alter with incorrect setting\n+ALTER TABLE table_for_reset_setting RESET SETTING merge_with_ttl_timeout, unknown_setting; -- { serverError 36 }\n \n ALTER TABLE table_for_reset_setting MODIFY SETTING merge_with_ttl_timeout = 300, max_concurrent_queries = 1;\n \n@@ -102,4 +102,4 @@ ALTER TABLE table_for_reset_setting RESET SETTING max_concurrent_queries, merge_\n \n SHOW CREATE TABLE table_for_reset_setting;\n \n-DROP TABLE IF EXISTS table_for_reset_setting;\n\\ No newline at end of file\n+DROP TABLE IF EXISTS table_for_reset_setting;\ndiff --git a/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql b/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql\nindex dfb91eb3b0ac..1b291bf84d29 100644\n--- a/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql\n+++ b/tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql\n@@ -108,8 +108,8 @@ ATTACH TABLE replicated_table_for_reset_setting1;\n SHOW CREATE TABLE replicated_table_for_reset_setting1;\n SHOW CREATE TABLE replicated_table_for_reset_setting2;\n \n--- ignore undefined setting\n-ALTER TABLE replicated_table_for_reset_setting1 RESET SETTING check_delay_period, unknown_setting;\n+-- don't execute alter with incorrect setting\n+ALTER TABLE replicated_table_for_reset_setting1 RESET SETTING check_delay_period, unknown_setting; -- { serverError 36 }\n ALTER TABLE replicated_table_for_reset_setting1 RESET SETTING merge_with_ttl_timeout;\n ALTER TABLE replicated_table_for_reset_setting2 RESET SETTING merge_with_ttl_timeout;\n \ndiff --git a/tests/queries/0_stateless/02252_reset_non_existing_setting.reference b/tests/queries/0_stateless/02252_reset_non_existing_setting.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02252_reset_non_existing_setting.sql b/tests/queries/0_stateless/02252_reset_non_existing_setting.sql\nnew file mode 100644\nindex 000000000000..362388c4a102\n--- /dev/null\n+++ b/tests/queries/0_stateless/02252_reset_non_existing_setting.sql\n@@ -0,0 +1,13 @@\n+DROP TABLE IF EXISTS most_ordinary_mt;\n+\n+CREATE TABLE most_ordinary_mt\n+(\n+   Key UInt64\n+)\n+ENGINE = MergeTree()\n+ORDER BY tuple();\n+\n+ALTER TABLE most_ordinary_mt RESET SETTING ttl; --{serverError 36}\n+ALTER TABLE most_ordinary_mt RESET SETTING allow_remote_fs_zero_copy_replication, xxx;  --{serverError 36}\n+\n+DROP TABLE IF EXISTS most_ordinary_mt;\n",
  "problem_statement": "reset SETTING TTL silently does nothing\n```sql\r\n\r\ncreate table A ( A date) Engine=MergeTree order by A TTL A+interval 1 year;\r\n\r\nalter table A reset SETTING TTL;\r\n\r\nshow create table A;\r\n\r\nCREATE TABLE default.A\r\n(\r\n    `A` Date\r\n)\r\nENGINE = MergeTree\r\nORDER BY A\r\nTTL A + toIntervalYear(1)\r\nSETTINGS index_granularity = 8192\r\n```\n",
  "hints_text": "But the correct query is \r\n```sql\r\nalter table A remove TTL\r\n```\r\n\nOr do you complain that it should throw because of inexistence of setting?\n>alter table A remove TTL\r\n\r\nI know.\r\n\r\n> Or do you complain that it should throw because of inexistence of setting?\r\n\r\nYes. It's confusing that it's silently doing nothing. ",
  "created_at": "2022-04-03T16:30:29Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreeData.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00980_merge_alter_settings.sql",
    "tests/queries/0_stateless/00980_zookeeper_merge_tree_alter_settings.sql",
    "b/tests/queries/0_stateless/02252_reset_non_existing_setting.sql"
  ]
}