{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53177,
  "instance_id": "ClickHouse__ClickHouse-53177",
  "issue_numbers": [
    "52843"
  ],
  "base_commit": "0f4561c5af3a7049e2a56d7d499c31876b3a34dd",
  "patch": "diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex a72de2645d4f..9e4d79cd323c 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -105,6 +105,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n     extern const int CANNOT_OPEN_FILE;\n     extern const int FILE_ALREADY_EXISTS;\n+    extern const int USER_SESSION_LIMIT_EXCEEDED;\n }\n \n }\n@@ -2408,6 +2409,13 @@ void ClientBase::runInteractive()\n             }\n         }\n \n+        if (suggest && suggest->getLastError() == ErrorCodes::USER_SESSION_LIMIT_EXCEEDED)\n+        {\n+            // If a separate connection loading suggestions failed to open a new session,\n+            // use the main session to receive them.\n+            suggest->load(*connection, connection_parameters.timeouts, config().getInt(\"suggestion_limit\"));\n+        }\n+\n         try\n         {\n             if (!processQueryText(input))\ndiff --git a/src/Client/Suggest.cpp b/src/Client/Suggest.cpp\nindex 00e0ebd8b918..c854d471fae8 100644\n--- a/src/Client/Suggest.cpp\n+++ b/src/Client/Suggest.cpp\n@@ -22,9 +22,11 @@ namespace DB\n {\n namespace ErrorCodes\n {\n+    extern const int OK;\n     extern const int LOGICAL_ERROR;\n     extern const int UNKNOWN_PACKET_FROM_SERVER;\n     extern const int DEADLOCK_AVOIDED;\n+    extern const int USER_SESSION_LIMIT_EXCEEDED;\n }\n \n Suggest::Suggest()\n@@ -121,21 +123,24 @@ void Suggest::load(ContextPtr context, const ConnectionParameters & connection_p\n             }\n             catch (const Exception & e)\n             {\n+                last_error = e.code();\n                 if (e.code() == ErrorCodes::DEADLOCK_AVOIDED)\n                     continue;\n-\n-                /// Client can successfully connect to the server and\n-                /// get ErrorCodes::USER_SESSION_LIMIT_EXCEEDED for suggestion connection.\n-\n-                /// We should not use std::cerr here, because this method works concurrently with the main thread.\n-                /// WriteBufferFromFileDescriptor will write directly to the file descriptor, avoiding data race on std::cerr.\n-\n-                WriteBufferFromFileDescriptor out(STDERR_FILENO, 4096);\n-                out << \"Cannot load data for command line suggestions: \" << getCurrentExceptionMessage(false, true) << \"\\n\";\n-                out.next();\n+                else if (e.code() != ErrorCodes::USER_SESSION_LIMIT_EXCEEDED)\n+                {\n+                    /// We should not use std::cerr here, because this method works concurrently with the main thread.\n+                    /// WriteBufferFromFileDescriptor will write directly to the file descriptor, avoiding data race on std::cerr.\n+                    ///\n+                    /// USER_SESSION_LIMIT_EXCEEDED is ignored here. The client will try to receive\n+                    /// suggestions using the main connection later.\n+                    WriteBufferFromFileDescriptor out(STDERR_FILENO, 4096);\n+                    out << \"Cannot load data for command line suggestions: \" << getCurrentExceptionMessage(false, true) << \"\\n\";\n+                    out.next();\n+                }\n             }\n             catch (...)\n             {\n+                last_error = getCurrentExceptionCode();\n                 WriteBufferFromFileDescriptor out(STDERR_FILENO, 4096);\n                 out << \"Cannot load data for command line suggestions: \" << getCurrentExceptionMessage(false, true) << \"\\n\";\n                 out.next();\n@@ -148,6 +153,21 @@ void Suggest::load(ContextPtr context, const ConnectionParameters & connection_p\n     });\n }\n \n+void Suggest::load(IServerConnection & connection,\n+                   const ConnectionTimeouts & timeouts,\n+                   Int32 suggestion_limit)\n+{\n+    try\n+    {\n+        fetch(connection, timeouts, getLoadSuggestionQuery(suggestion_limit, true));\n+    }\n+    catch (...)\n+    {\n+        std::cerr << \"Suggestions loading exception: \" << getCurrentExceptionMessage(false, true) << std::endl;\n+        last_error = getCurrentExceptionCode();\n+    }\n+}\n+\n void Suggest::fetch(IServerConnection & connection, const ConnectionTimeouts & timeouts, const std::string & query)\n {\n     connection.sendQuery(\n@@ -176,6 +196,7 @@ void Suggest::fetch(IServerConnection & connection, const ConnectionTimeouts & t\n                 return;\n \n             case Protocol::Server::EndOfStream:\n+                last_error = ErrorCodes::OK;\n                 return;\n \n             default:\ndiff --git a/src/Client/Suggest.h b/src/Client/Suggest.h\nindex cfe9315879cc..5cecdc4501b0 100644\n--- a/src/Client/Suggest.h\n+++ b/src/Client/Suggest.h\n@@ -7,6 +7,7 @@\n #include <Client/LocalConnection.h>\n #include <Client/LineReader.h>\n #include <IO/ConnectionTimeouts.h>\n+#include <atomic>\n #include <thread>\n \n \n@@ -28,9 +29,15 @@ class Suggest : public LineReader::Suggest, boost::noncopyable\n     template <typename ConnectionType>\n     void load(ContextPtr context, const ConnectionParameters & connection_parameters, Int32 suggestion_limit);\n \n+    void load(IServerConnection & connection,\n+              const ConnectionTimeouts & timeouts,\n+              Int32 suggestion_limit);\n+\n     /// Older server versions cannot execute the query loading suggestions.\n     static constexpr int MIN_SERVER_REVISION = DBMS_MIN_PROTOCOL_VERSION_WITH_VIEW_IF_PERMITTED;\n \n+    int getLastError() const { return last_error.load(); }\n+\n private:\n     void fetch(IServerConnection & connection, const ConnectionTimeouts & timeouts, const std::string & query);\n \n@@ -38,6 +45,8 @@ class Suggest : public LineReader::Suggest, boost::noncopyable\n \n     /// Words are fetched asynchronously.\n     std::thread loading_thread;\n+\n+    std::atomic<int> last_error { -1 };\n };\n \n }\n",
  "test_patch": "diff --git a/tests/integration/parallel_skip.json b/tests/integration/parallel_skip.json\nindex dec51396c510..d056225fee45 100644\n--- a/tests/integration/parallel_skip.json\n+++ b/tests/integration/parallel_skip.json\n@@ -91,5 +91,6 @@\n   \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_http_named_session\",\n   \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_grpc\",\n   \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_tcp_and_others\",\n-  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_setting_in_query\"\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_setting_in_query\",\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_client_suggestions_load\"\n ]\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/test.py b/tests/integration/test_profile_max_sessions_for_user/test.py\nindex 2930262f63ec..c5c33b1cddb2 100755\n--- a/tests/integration/test_profile_max_sessions_for_user/test.py\n+++ b/tests/integration/test_profile_max_sessions_for_user/test.py\n@@ -10,6 +10,7 @@\n from helpers.cluster import ClickHouseCluster, run_and_check\n from helpers.test_tools import assert_logs_contain_with_retry\n \n+from helpers.uclient import client, prompt\n \n MAX_SESSIONS_FOR_USER = 2\n POSTGRES_SERVER_PORT = 5433\n@@ -209,3 +210,36 @@ def test_profile_max_sessions_for_user_tcp_and_others(started_cluster):\n \n def test_profile_max_sessions_for_user_setting_in_query(started_cluster):\n     instance.query_and_get_error(\"SET max_sessions_for_user = 10\")\n+\n+\n+def test_profile_max_sessions_for_user_client_suggestions_connection(started_cluster):\n+    command_text = f\"{started_cluster.get_client_cmd()} --host {instance.ip_address} --port 9000 -u {TEST_USER} --password {TEST_PASSWORD}\"\n+    command_text_without_suggestions = command_text + \" --disable_suggestion\"\n+\n+    # Launch client1 without suggestions to avoid a race condition:\n+    # Client1 opens a session.\n+    # Client1 opens a session for suggestion connection.\n+    # Client2 fails to open a session and gets the USER_SESSION_LIMIT_EXCEEDED error.\n+    #\n+    # Expected order:\n+    # Client1 opens a session.\n+    # Client2 opens a session.\n+    # Client2 fails to open a session for suggestions and with USER_SESSION_LIMIT_EXCEEDED (No error printed).\n+    # Client3 fails to open a session.\n+    # Client1 executes the query.\n+    # Client2 loads suggestions from the server using the main connection and executes a query.\n+    with client(\n+        name=\"client1>\", log=None, command=command_text_without_suggestions\n+    ) as client1:\n+        client1.expect(prompt)\n+        with client(name=\"client2>\", log=None, command=command_text) as client2:\n+            client2.expect(prompt)\n+            with client(name=\"client3>\", log=None, command=command_text) as client3:\n+                client3.expect(\"USER_SESSION_LIMIT_EXCEEDED\")\n+\n+            client1.send(\"SELECT 'CLIENT_1_SELECT' FORMAT CSV\")\n+            client1.expect(\"CLIENT_1_SELECT\")\n+            client1.expect(prompt)\n+            client2.send(\"SELECT 'CLIENT_2_SELECT' FORMAT CSV\")\n+            client2.expect(\"CLIENT_2_SELECT\")\n+            client2.expect(prompt)\n",
  "problem_statement": "Make client receive suggestions from server if interactive connection is esablished\n**Describe the issue**\r\nClickhouse client can't load suggestions using single connection when `max_sessions_for_user` is set.\r\n\r\n**How to reproduce**\r\n\r\n- Create a user with `<max_sessions_for_user>2</max_sessions_for_user>` in profile\r\n- Connect to the server with clickhouse-client in interactive mode (starts a session)\r\n- Run another instance of interactive clickhouse-client. If will fail to load suggestions (due to the limitation on concurrent sessions) but then will continue working as usual.\r\n\r\n**Expected behavior**\r\nNo error happen in this case. Suggestions are loaded from the server using single session.\r\n\r\n**Error message and/or stacktrace**\r\n```\r\nClickHouse client version 23.7.1.1.\r\nConnecting to localhost:9000 as user maxsessions.\r\nConnected to ClickHouse server version 23.7.1 revision 54464.\r\n\r\nCannot load data for command line suggestions: Code: 700. DB::Exception: Received from localhost:9000. DB::Exception: User 5eb5f051-64a4-19bc-ff75-494154bf67a9 has overflown session count 2. () (version 23.7.1.1)\r\ndell9510 :) select 1\r\n```\r\n\n",
  "hints_text": "Please assign me to this task. I'm going to implement it and start working on it soon.",
  "created_at": "2023-08-08T23:10:57Z"
}