diff --git a/docs/en/sql-reference/functions/string-search-functions.md b/docs/en/sql-reference/functions/string-search-functions.md
index d5dbca3f2b7d..22f879c62aee 100644
--- a/docs/en/sql-reference/functions/string-search-functions.md
+++ b/docs/en/sql-reference/functions/string-search-functions.md
@@ -590,6 +590,10 @@ Result:
 └───────────────────────────────┘
 ```
 
+## countMatchesCaseInsensitive
+
+Like `countMatches(haystack, pattern)` but matching ignores the case.
+
 ## regexpExtract
 
 Extracts the first string in haystack that matches the regexp pattern and corresponds to the regex group index.
diff --git a/src/Functions/countMatches.h b/src/Functions/countMatches.h
index 5e02915de56c..e9880e6e93f4 100644
--- a/src/Functions/countMatches.h
+++ b/src/Functions/countMatches.h
@@ -3,6 +3,7 @@
 #include <Functions/IFunction.h>
 #include <Functions/FunctionFactory.h>
 #include <Functions/FunctionHelpers.h>
+#include <Columns/ColumnFixedString.h>
 #include <Columns/ColumnString.h>
 #include <Columns/ColumnsNumber.h>
 #include <DataTypes/DataTypesNumber.h>
@@ -15,9 +16,7 @@ namespace DB
 
 namespace ErrorCodes
 {
-    extern const int ILLEGAL_TYPE_OF_ARGUMENT;
     extern const int ILLEGAL_COLUMN;
-    extern const int LOGICAL_ERROR;
 }
 
 using Pos = const char *;
@@ -35,45 +34,46 @@ class FunctionCountMatches : public IFunction
 
     DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override
     {
-        if (!isStringOrFixedString(arguments[1].type))
-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
-                "Illegal type {} of second argument (pattern) of function {}. Must be String/FixedString.",
-                arguments[1].type->getName(), getName());
-        if (!isStringOrFixedString(arguments[0].type))
-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
-                "Illegal type {} of first argument (haystack) of function {}. Must be String/FixedString.",
-                arguments[0].type->getName(), getName());
-        const auto * column = arguments[1].column.get();
-        if (!column || !checkAndGetColumnConstStringOrFixedString(column))
-            throw Exception(ErrorCodes::ILLEGAL_COLUMN,
-                "The second argument of function {} should be a constant string with the pattern",
-                getName());
+        FunctionArgumentDescriptors args{
+            {"haystack", &isStringOrFixedString<IDataType>, nullptr, "String or FixedString"},
+            {"pattern", &isString<IDataType>, isColumnConst, "constant String"}
+        };
+        validateFunctionArgumentTypes(*this, arguments, args);
 
         return std::make_shared<DataTypeUInt64>();
     }
 
     ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override
     {
-        const ColumnConst * column_pattern = checkAndGetColumnConstStringOrFixedString(arguments[1].column.get());
-        const OptimizedRegularExpression re = Regexps::createRegexp</*is_like*/ false, /*no_capture*/ true, CountMatchesBase::case_insensitive>(column_pattern->getValue<String>());
-        OptimizedRegularExpression::MatchVec matches;
+        const IColumn * col_pattern = arguments[1].column.get();
+        const ColumnConst * col_pattern_const = checkAndGetColumnConst<ColumnString>(col_pattern);
+        if (col_pattern_const == nullptr)
+            throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Pattern argument is not const");
+
+        const OptimizedRegularExpression re = Regexps::createRegexp</*is_like*/ false, /*no_capture*/ true, CountMatchesBase::case_insensitive>(col_pattern_const->getValue<String>());
 
-        const IColumn * column_haystack = arguments[0].column.get();
+        const IColumn * col_haystack = arguments[0].column.get();
+        OptimizedRegularExpression::MatchVec matches;
 
-        if (const ColumnString * col_str = checkAndGetColumn<ColumnString>(column_haystack))
+        if (const ColumnConst * col_haystack_const = checkAndGetColumnConstStringOrFixedString(col_haystack))
+        {
+            std::string_view str = col_haystack_const->getDataColumn().getDataAt(0).toView();
+            uint64_t matches_count = countMatches(str, re, matches);
+            return result_type->createColumnConst(input_rows_count, matches_count);
+        }
+        else if (const ColumnString * col_haystack_string = checkAndGetColumn<ColumnString>(col_haystack))
         {
-            auto result_column = ColumnUInt64::create();
+            auto col_res = ColumnUInt64::create();
 
-            const ColumnString::Chars & src_chars = col_str->getChars();
-            const ColumnString::Offsets & src_offsets = col_str->getOffsets();
+            const ColumnString::Chars & src_chars = col_haystack_string->getChars();
+            const ColumnString::Offsets & src_offsets = col_haystack_string->getOffsets();
 
-            ColumnUInt64::Container & vec_res = result_column->getData();
+            ColumnUInt64::Container & vec_res = col_res->getData();
             vec_res.resize(input_rows_count);
 
-            size_t size = src_offsets.size();
             ColumnString::Offset current_src_offset = 0;
 
-            for (size_t i = 0; i < size; ++i)
+            for (size_t i = 0; i < input_rows_count; ++i)
             {
                 Pos pos = reinterpret_cast<Pos>(&src_chars[current_src_offset]);
                 current_src_offset = src_offsets[i];
@@ -83,16 +83,25 @@ class FunctionCountMatches : public IFunction
                 vec_res[i] = countMatches(str, re, matches);
             }
 
-            return result_column;
+            return col_res;
         }
-        else if (const ColumnConst * col_const_str = checkAndGetColumnConstStringOrFixedString(column_haystack))
+        else if (const ColumnFixedString * col_haystack_fixedstring = checkAndGetColumn<ColumnFixedString>(col_haystack))
         {
-            std::string_view str = col_const_str->getDataColumn().getDataAt(0).toView();
-            uint64_t matches_count = countMatches(str, re, matches);
-            return result_type->createColumnConst(input_rows_count, matches_count);
+            auto col_res = ColumnUInt64::create();
+
+            ColumnUInt64::Container & vec_res = col_res->getData();
+            vec_res.resize(input_rows_count);
+
+            for (size_t i = 0; i < input_rows_count; ++i)
+            {
+                std::string_view str = col_haystack_fixedstring->getDataAt(i).toView();
+                vec_res[i] = countMatches(str, re, matches);
+            }
+
+            return col_res;
         }
         else
-            throw Exception(ErrorCodes::LOGICAL_ERROR, "Error in FunctionCountMatches::getReturnTypeImpl()");
+            throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Could not cast haystack argument to String or FixedString");
     }
 
     static uint64_t countMatches(std::string_view src, const OptimizedRegularExpression & re, OptimizedRegularExpression::MatchVec & matches)
@@ -116,7 +125,7 @@ class FunctionCountMatches : public IFunction
             if (!matches[0].length)
                 break;
             pos += matches[0].offset + matches[0].length;
-            match_count++;
+            ++match_count;
         }
 
         return match_count;
diff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt
index 51aa8222a89c..0b29b0f0709d 100644
--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt
+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt
@@ -190,6 +190,7 @@ CustomSeparatedWithNamesAndTypes
 DBAs
 DBMSs
 DBeaver
+DD
 DDLWORKER
 DDLWorker
 DDLWorkerThreads
@@ -215,7 +216,6 @@ DatabaseOrdinaryThreadsActive
 DateTime
 DateTimes
 DbCL
-DD
 Decrypted
 Deduplicate
 Deduplication
@@ -840,6 +840,7 @@ Sematext
 SendExternalTables
 SendScalars
 ShareAlike
+Shortkeys
 SimHash
 Simhash
 SimpleAggregateFunction
@@ -952,8 +953,8 @@ TotalRowsOfMergeTreeTables
 TotalTemporaryFiles
 Tradeoff
 Transactional
-TwoColumnList
 Tukey
+TwoColumnList
 UBSan
 UDFs
 UInt
@@ -1325,6 +1326,7 @@ cosineDistance
 countDigits
 countEqual
 countMatches
+countMatchesCaseInsensitive
 countSubstrings
 covarPop
 covarSamp
@@ -1688,6 +1690,7 @@ hudi
 hyperscan
 hypot
 hyvor
+iTerm
 icosahedron
 icudata
 idempotency
@@ -2132,6 +2135,7 @@ py
 qryn
 quantile
 quantileBFloat
+quantileDD
 quantileDeterministic
 quantileExact
 quantileExactExclusive
@@ -2146,6 +2150,7 @@ quantileTDigestWeighted
 quantileTiming
 quantileTimingWeighted
 quantilebfloat
+quantileddsketch
 quantiledeterministic
 quantileexact
 quantileexactweighted
@@ -2158,8 +2163,6 @@ quantiletdigest
 quantiletdigestweighted
 quantiletiming
 quantiletimingweighted
-quantileddsketch
-quantileDD
 quartile
 queryID
 queryString
@@ -2292,8 +2295,8 @@ seektable
 sequenceCount
 sequenceMatch
 sequenceNextNode
-seriesOutliersDetectTukey
 seriesDecomposeSTL
+seriesOutliersDetectTukey
 seriesPeriodDetectFFT
 serverTimeZone
 serverTimezone
@@ -2307,6 +2310,7 @@ shardNum
 sharded
 sharding
 shortcircuit
+shortkeys
 shoutout
 simdjson
 simpleLinearRegression
@@ -2730,6 +2734,3 @@ znode
 znodes
 zookeeperSessionUptime
 zstd
-iTerm
-shortkeys
-Shortkeys
