{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 77307,
  "instance_id": "ClickHouse__ClickHouse-77307",
  "issue_numbers": [
    "76925"
  ],
  "base_commit": "80ec0eab9dbc872d504ec0971ffaec5fe6e8a15d",
  "patch": "diff --git a/src/Planner/CollectTableExpressionData.cpp b/src/Planner/CollectTableExpressionData.cpp\nindex 58c8541e30e7..32282f66c423 100644\n--- a/src/Planner/CollectTableExpressionData.cpp\n+++ b/src/Planner/CollectTableExpressionData.cpp\n@@ -109,9 +109,12 @@ class CollectSourceColumnsVisitor : public InDepthQueryTreeVisitorWithContext<Co\n                 if (outputs.size() != 1)\n                     throw Exception(ErrorCodes::LOGICAL_ERROR,\n                         \"Expected single output in actions dag for alias column {}. Actual {}\", column_node->dumpTree(), outputs.size());\n+\n+                auto & alias_node = outputs[0];\n                 const auto & column_name = column_node->getColumnName();\n-                const auto & alias_node = alias_column_actions_dag.addAlias(*outputs[0], column_name);\n-                alias_column_actions_dag.addOrReplaceInOutputs(alias_node);\n+                alias_node = &alias_column_actions_dag.addAlias(*alias_node, column_name);\n+\n+                alias_column_actions_dag.getOutputs() = std::move(outputs);\n                 table_expression_data.addAliasColumn(column_node->getColumn(), column_identifier, std::move(alias_column_actions_dag), select_added_columns);\n             }\n             else\ndiff --git a/src/Planner/PlannerActionsVisitor.cpp b/src/Planner/PlannerActionsVisitor.cpp\nindex c723e0018a30..b15f3f4dbdd4 100644\n--- a/src/Planner/PlannerActionsVisitor.cpp\n+++ b/src/Planner/PlannerActionsVisitor.cpp\n@@ -675,8 +675,17 @@ PlannerActionsVisitorImpl::NodeNameAndNodeMinLevel PlannerActionsVisitorImpl::vi\n {\n     auto column_node_name = action_node_name_helper.calculateActionNodeName(node);\n     const auto & column_node = node->as<ColumnNode &>();\n-    if (column_node.hasExpression() && !use_column_identifier_as_action_node_name)\n-        return visitImpl(column_node.getExpression());\n+    if (column_node.hasExpression())\n+    {\n+        auto expression = column_node.getExpression();\n+        /// In case of constant expression, prefer constant value from QueryTree vs. re-calculating the expression.\n+        /// It is possible that during the execution of distributed queries\n+        /// source columns from constant expression are removed, so that the attempt to recalculate it fails.\n+        if (expression->getNodeType() == QueryTreeNodeType::CONSTANT)\n+            return visitConstant(expression);\n+        else if (!use_column_identifier_as_action_node_name)\n+            return visitImpl(expression);\n+    }\n     Int64 actions_stack_size = static_cast<Int64>(actions_stack.size() - 1);\n     for (Int64 i = actions_stack_size; i >= 0; --i)\n     {\ndiff --git a/src/Planner/PlannerJoinTree.cpp b/src/Planner/PlannerJoinTree.cpp\nindex 1048a8809a30..949c151bd14c 100644\n--- a/src/Planner/PlannerJoinTree.cpp\n+++ b/src/Planner/PlannerJoinTree.cpp\n@@ -1154,12 +1154,19 @@ JoinTreeQueryPlan buildQueryPlanForTableExpression(QueryTreeNodePtr table_expres\n             else\n             {\n                 /// Create step which reads from empty source if storage has no data.\n-                const auto & column_names = table_expression_data.getSelectedColumnsNames();\n+                const auto & column_names = table_expression_data.getColumnNames();\n                 auto source_header = storage_snapshot->getSampleBlockForColumns(column_names);\n                 Pipe pipe(std::make_shared<NullSource>(source_header));\n                 auto read_from_pipe = std::make_unique<ReadFromPreparedSource>(std::move(pipe));\n                 read_from_pipe->setStepDescription(\"Read from NullSource\");\n                 query_plan.addStep(std::move(read_from_pipe));\n+\n+                auto & alias_column_expressions = table_expression_data.getAliasColumnExpressions();\n+                if (!alias_column_expressions.empty())\n+                {\n+                    auto alias_column_step = createComputeAliasColumnsStep(alias_column_expressions, query_plan.getCurrentHeader());\n+                    query_plan.addStep(std::move(alias_column_step));\n+                }\n             }\n         }\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03371_constant_alias_columns.reference b/tests/queries/0_stateless/03371_constant_alias_columns.reference\nnew file mode 100644\nindex 000000000000..26c3cd210e96\n--- /dev/null\n+++ b/tests/queries/0_stateless/03371_constant_alias_columns.reference\n@@ -0,0 +1,9 @@\n+['qwqw']\n+----\n+['qwqw']\n+['qwqw']\n+\n+['qwqw']\n+['qwqw']\n+----\n+0\t0\t0\t0\t['a']\t['qwqw']\ndiff --git a/tests/queries/0_stateless/03371_constant_alias_columns.sql b/tests/queries/0_stateless/03371_constant_alias_columns.sql\nnew file mode 100644\nindex 000000000000..7c68996e7870\n--- /dev/null\n+++ b/tests/queries/0_stateless/03371_constant_alias_columns.sql\n@@ -0,0 +1,25 @@\n+SET parallel_replicas_for_non_replicated_merge_tree = 1;\n+SET allow_experimental_parallel_reading_from_replicas = 1;\n+SET cluster_for_parallel_replicas = 'parallel_replicas';\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table (a UInt64, b UInt64, c UInt64, d UInt64, x Array(String))\n+ENGINE MergeTree() PARTITION BY b ORDER BY a;\n+INSERT INTO test_table SELECT number, number % 2, number, number % 3, ['a', 'b', 'c'] FROM numbers(1);\n+ALTER TABLE test_table ADD COLUMN y Array(String) ALIAS ['qwqw'] AFTER x;\n+\n+SELECT y FROM test_table ORDER BY c;\n+\n+SET allow_experimental_parallel_reading_from_replicas = 0;\n+SELECT '----';\n+\n+SELECT y FROM remote('127.0.0.{1,2}', currentDatabase(), test_table) ORDER BY c settings extremes=1;\n+\n+SELECT '----';\n+DROP TABLE IF EXISTS test_table;\n+SET allow_experimental_parallel_reading_from_replicas = 1;\n+\n+CREATE TABLE test_table (a UInt64, b UInt64, c UInt64, d UInt64, n Nested(x String))\n+ENGINE MergeTree() PARTITION BY b ORDER BY a;\n+INSERT INTO test_table SELECT number, number % 2, number, number % 3, ['a'] FROM numbers(1);\n+ALTER TABLE test_table ADD COLUMN n.y Array(String) ALIAS ['qwqw'] AFTER n.x;\n+SELECT a, b, c, d, n.x, n.y FROM test_table ORDER BY c;\n",
  "problem_statement": "Logical Error: Error occurred while querying with parallel replicas\n\n> ### Company or project name\n\n_No response_\n\n### Describe what's wrong\n\nError occurred while querying alias column with parallel replicas.\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\n\n```sql\nSET parallel_replicas_for_non_replicated_merge_tree = 1;\nSET allow_experimental_parallel_reading_from_replicas = 1;\nSET cluster_for_parallel_replicas = 'test_cluster';\nDROP TABLE IF EXISTS test_table;\nCREATE TABLE test_table (a UInt64, b UInt64, c UInt64, d UInt64, n Nested(x String))\nENGINE MergeTree() PARTITION BY b ORDER BY a;\nINSERT INTO test_table SELECT number, number % 2, number, number % 3, ['a', 'b', 'c'] FROM numbers(0, 100);\nALTER TABLE test_table ADD COLUMN n.y Array(String) ALIAS ['qwqw'] AFTER n.x;\nSELECT a, b, c, d, n.x, n.y FROM test_table ORDER BY c;\n```\n\n\n### Expected behavior\n\n_No response_\n\n### Error message and/or stacktrace\n```\n`Code: 8. DB::Exception: Received from localhost:9000. DB::Exception: Cannot find column `__table1.n.y` in source stream, there are only columns: [__table1.c, __table1.a, __table1.b, __table1.d, __table1.n.x]. (THERE_IS_NO_COLUMN)`\n```\n\n### Additional context\n\n_No response_\n",
  "hints_text": "@novikd Maybe this is already some known issue with analyzer? Please, could you check?\nJust checked locally, it worked on version `25.1.1.2786`, then updated binary to the current version - `25.3.1.724` - it doesn't work anymore\n\nAlso, it works with remote() but doesn't work with parallel replicas :suspect:\nhttps://pastila.nl/?027d1a0a/e85959e25347309f2add0d0339bc4bb6#bY5Yv8KyK2WVbh0eivc4Hw==\n\n@devcrafter Yes, I also discovered this during local testing. I found that distributed queries default to processing on the remote server up to **WithMergeableStateAfterAggregation**, while parallel replicas use **WithMergeableState**, and the behaviors of these two are not entirely consistent.\n```\nSELECT n.x, n.y FROM remote('127.0.0.{1,2}', default, test_table) ORDER BY c settings extremes=1;\n\nSELECT\n    n.x,\n    n.y\nFROM remote('127.0.0.{1,2}', default, test_table)\nORDER BY c ASC\nSETTINGS extremes = 1\n\nQuery id: d5457558-0634-4b9b-bc8c-53d5041bb3ab\n\n\nElapsed: 0.003 sec. \n\nReceived exception from server (version 25.3.1):\nCode: 20. DB::Exception: Received from localhost:9000. DB::Exception: Number of columns doesn't match (source: 2 and result: 3). (NUMBER_OF_COLUMNS_DOESNT_MATCH)\n\n```\nI'm not sure if it's even supposed to work. `n.y` is a part of the Nested column `n`, and it's an alias. It's likely an invalid construction.\nI suppose the\n```\nALTER TABLE test_table ADD COLUMN n.y Array(String) ALIAS ['qwqw'] AFTER n.x;\n```\nshould not be allowed, because arrays in Nested must have equal size.\n\nPossible aliases inside nested should be prohibited in general.\nOkay, it's possible to reproduce without `Nested`:\n```sql\nSET parallel_replicas_for_non_replicated_merge_tree = 1;\nSET allow_experimental_parallel_reading_from_replicas = 1;\nSET cluster_for_parallel_replicas = 'parallel_replicas';\nDROP TABLE IF EXISTS test_table;\nCREATE TABLE test_table (a UInt64, b UInt64, c UInt64, d UInt64, x Array(String))\nENGINE MergeTree() PARTITION BY b ORDER BY a;\nINSERT INTO test_table SELECT number, number % 2, number, number % 3, ['a', 'b', 'c'] FROM numbers(0, 100);\nALTER TABLE test_table ADD COLUMN y Array(String) ALIAS ['qwqw'] AFTER x;\nSELECT y FROM test_table ORDER BY c;\n```",
  "created_at": "2025-03-07T13:07:45Z",
  "modified_files": [
    "src/Planner/CollectTableExpressionData.cpp",
    "src/Planner/PlannerActionsVisitor.cpp",
    "src/Planner/PlannerJoinTree.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03371_constant_alias_columns.reference",
    "b/tests/queries/0_stateless/03371_constant_alias_columns.sql"
  ]
}