{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12396,
  "instance_id": "ClickHouse__ClickHouse-12396",
  "issue_numbers": [
    "10437"
  ],
  "base_commit": "1ffd3f7ed51347853fcc218e961fa8c107da9aaa",
  "patch": "diff --git a/src/Interpreters/SystemLog.h b/src/Interpreters/SystemLog.h\nindex 066956ed53ae..e05a940b194d 100644\n--- a/src/Interpreters/SystemLog.h\n+++ b/src/Interpreters/SystemLog.h\n@@ -23,6 +23,7 @@\n #include <Interpreters/InterpreterCreateQuery.h>\n #include <Interpreters/InterpreterRenameQuery.h>\n #include <Interpreters/InterpreterInsertQuery.h>\n+#include <Interpreters/Context.h>\n #include <Common/setThreadName.h>\n #include <Common/ThreadPool.h>\n #include <IO/WriteHelpers.h>\n@@ -64,8 +65,6 @@ namespace ErrorCodes\n #define DBMS_SYSTEM_LOG_QUEUE_SIZE 1048576\n \n \n-class Context;\n-\n \n class ISystemLog\n {\n@@ -371,7 +370,11 @@ void SystemLog<LogElement>::flushImpl(const std::vector<LogElement> & to_flush,\n         insert->table_id = table_id;\n         ASTPtr query_ptr(insert.release());\n \n-        InterpreterInsertQuery interpreter(query_ptr, context);\n+        // we need query context to do inserts to target table with MV containing subqueries or joins\n+        auto insert_context = Context(context);\n+        insert_context.makeQueryContext();\n+\n+        InterpreterInsertQuery interpreter(query_ptr, insert_context);\n         BlockIO io = interpreter.execute();\n \n         io.out->writePrefix();\ndiff --git a/src/Storages/Kafka/StorageKafka.cpp b/src/Storages/Kafka/StorageKafka.cpp\nindex 1397d157fa78..831d318058f7 100644\n--- a/src/Storages/Kafka/StorageKafka.cpp\n+++ b/src/Storages/Kafka/StorageKafka.cpp\n@@ -131,7 +131,6 @@ StorageKafka::StorageKafka(\n                         {\"_partition\", std::make_shared<DataTypeUInt64>()},\n                         {\"_timestamp\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeDateTime>())}}, true))\n     , global_context(context_.getGlobalContext())\n-    , kafka_context(Context(global_context))\n     , topics(global_context.getMacros()->expand(topics_))\n     , brokers(global_context.getMacros()->expand(brokers_))\n     , group(global_context.getMacros()->expand(group_))\n@@ -145,8 +144,6 @@ StorageKafka::StorageKafka(\n     , skip_broken(skip_broken_)\n     , intermediate_commit(intermediate_commit_)\n {\n-    kafka_context.makeQueryContext();\n-\n     setColumns(columns_);\n     task = global_context.getSchedulePool().createTask(log->name(), [this]{ threadFunc(); });\n     task->deactivate();\n@@ -415,6 +412,9 @@ bool StorageKafka::streamToViews()\n     if (block_size == 0)\n         block_size = settings.max_block_size;\n \n+    auto kafka_context = Context(global_context);\n+    kafka_context.makeQueryContext();\n+\n     // Create a stream for each consumer and join them in a union stream\n     // Only insert into dependent views and expect that input blocks contain virtual columns\n     InterpreterInsertQuery interpreter(insert, kafka_context, false, true, true);\ndiff --git a/src/Storages/Kafka/StorageKafka.h b/src/Storages/Kafka/StorageKafka.h\nindex ea876a2e712c..571c50d28d8e 100644\n--- a/src/Storages/Kafka/StorageKafka.h\n+++ b/src/Storages/Kafka/StorageKafka.h\n@@ -78,7 +78,6 @@ class StorageKafka final : public ext::shared_ptr_helper<StorageKafka>, public I\n private:\n     // Configuration and state\n     Context global_context;\n-    Context kafka_context;\n     Names topics;\n     const String brokers;\n     const String group;\ndiff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex 5898c88578fe..e9cecb99b86f 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -693,7 +693,10 @@ void StorageBuffer::writeBlockToDestination(const Block & block, StoragePtr tabl\n     for (const auto & column : block_to_write)\n         list_of_columns->children.push_back(std::make_shared<ASTIdentifier>(column.name));\n \n-    InterpreterInsertQuery interpreter{insert, global_context, allow_materialized};\n+    auto insert_context = Context(global_context);\n+    insert_context.makeQueryContext();\n+\n+    InterpreterInsertQuery interpreter{insert, insert_context, allow_materialized};\n \n     auto block_io = interpreter.execute();\n     block_io.out->writePrefix();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.reference b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.reference\nnew file mode 100644\nindex 000000000000..f6349a0b9b47\n--- /dev/null\n+++ b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.reference\n@@ -0,0 +1,11 @@\n+1\n+1\n+1\n+1\n+1\n+=== system.query_log ===\n+main_dashboard_bottom_query\t2\n+main_dashboard_top_query\t2\n+=== slowlog ===\n+main_dashboard_bottom_query\t1\n+main_dashboard_top_query\t1\ndiff --git a/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql\nnew file mode 100644\nindex 000000000000..4f216ae647f9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql\n@@ -0,0 +1,54 @@\n+DROP TABLE IF EXISTS slow_log;\n+DROP TABLE IF EXISTS expected_times;\n+\n+CREATE TABLE expected_times (QUERY_GROUP_ID String, max_query_duration_ms UInt64) Engine=Memory;\n+INSERT INTO expected_times VALUES('main_dashboard_top_query', 100), ('main_dashboard_bottom_query', 100);\n+\n+SET log_queries=1;\n+SELECT 1;\n+SYSTEM FLUSH LOGS;\n+\n+CREATE MATERIALIZED VIEW slow_log Engine=Memory AS\n+(\n+        SELECT * FROM\n+        (\n+            SELECT\n+                extract(query,'/\\\\*\\\\s*QUERY_GROUP_ID:(.*?)\\\\s*\\\\*/') as QUERY_GROUP_ID,\n+                *\n+            FROM system.query_log\n+            WHERE type<>1 and event_date >= yesterday() and event_time > now() - 120\n+        ) as ql\n+        INNER JOIN expected_times USING (QUERY_GROUP_ID)\n+        WHERE query_duration_ms > max_query_duration_ms\n+);\n+\n+SELECT 1 /* QUERY_GROUP_ID:main_dashboard_top_query */;\n+SELECT 1 /* QUERY_GROUP_ID:main_dashboard_bottom_query */;\n+\n+SELECT 1 WHERE not ignore(sleep(0.105)) /* QUERY_GROUP_ID:main_dashboard_top_query */;\n+SELECT 1 WHERE not ignore(sleep(0.105)) /* QUERY_GROUP_ID:main_dashboard_bottom_query */;\n+\n+SET log_queries=0;\n+SYSTEM FLUSH LOGS;\n+\n+SELECT '=== system.query_log ===';\n+\n+SELECT\n+    extract(query,'/\\\\*\\\\s*QUERY_GROUP_ID:(.*?)\\\\s*\\\\*/') as QUERY_GROUP_ID,\n+    count()\n+FROM system.query_log\n+WHERE type<>1 and event_date >= yesterday() and event_time > now() - 20 and QUERY_GROUP_ID<>''\n+GROUP BY QUERY_GROUP_ID\n+ORDER BY QUERY_GROUP_ID;\n+\n+SELECT '=== slowlog ===';\n+\n+SELECT\n+    QUERY_GROUP_ID,\n+    count()\n+FROM slow_log\n+GROUP BY QUERY_GROUP_ID\n+ORDER BY QUERY_GROUP_ID;\n+\n+DROP TABLE slow_log;\n+DROP TABLE expected_times;\ndiff --git a/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.reference b/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.reference\nnew file mode 100644\nindex 000000000000..083edaac2489\n--- /dev/null\n+++ b/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.reference\n@@ -0,0 +1,3 @@\n+2\n+2\n+2\ndiff --git a/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.sql b/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.sql\nnew file mode 100644\nindex 000000000000..424c38d5590b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.sql\n@@ -0,0 +1,37 @@\n+DROP TABLE IF EXISTS t1_01361;\n+DROP TABLE IF EXISTS t2_01361;\n+DROP TABLE IF EXISTS mv1_01361;\n+DROP TABLE IF EXISTS b1_01361;\n+\n+CREATE TABLE t1_01361 (\n+  i UInt32,\n+  time DateTime\n+) ENGINE = MergeTree()\n+PARTITION BY time\n+ORDER BY time;\n+\n+CREATE TABLE t2_01361 (\n+  i UInt32,\n+  time DateTime\n+) ENGINE = MergeTree()\n+PARTITION BY time\n+ORDER BY time;\n+\n+CREATE MATERIALIZED VIEW mv1_01361\n+TO t2_01361\n+AS SELECT * FROM (SELECT * FROM t1_01361);\n+\n+CREATE TABLE b1_01361 AS t1_01361\n+ENGINE = Buffer(currentDatabase(), t1_01361, 1, 0, 0, 1, 1, 1, 1);\n+\n+INSERT INTO b1_01361 VALUES (1, now());\n+INSERT INTO b1_01361 VALUES (2, now());\n+\n+SELECT count() FROM b1_01361;\n+SELECT count() FROM t1_01361;\n+SELECT count() FROM t2_01361;\n+\n+DROP TABLE IF EXISTS t1_01361;\n+DROP TABLE IF EXISTS t2_01361;\n+DROP TABLE IF EXISTS mv1_01361;\n+DROP TABLE IF EXISTS b1_01361;\n",
  "problem_statement": "Mat view subquery + buffer table results in DB::Exception: There is no query\n```\r\nCREATE TABLE t1 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE TABLE t2 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE MATERIALIZED VIEW mv1\r\nTO t2\r\nAS SELECT * FROM (SELECT * FROM t1)\r\n\r\nCREATE TABLE b1 AS t1\r\nENGINE = Buffer(default, t1, 1, 0, 0, 1, 1, 1, 1)\r\n\r\nvmihailenco :) INSERT INTO b1 VALUES (1, now());\r\n\r\nINSERT INTO b1 VALUES\r\n\r\nReceived exception from server (version 20.3.7):\r\nCode: 393. DB::Exception: Received from localhost:9000. DB::Exception: There is no query.\r\n```\n",
  "hints_text": "I'm having same issue,\r\nI have \r\n1. table A engine ReplaceMergeTree()\r\n2. MV B on table A\r\n3. Buffer table on table A\r\n\r\nData is not written to the destination A table from the buffer.\r\nEven DROPing the Buffer that should trigger flush the data fails\r\n\r\n```\r\n2020.05.02 21:31:28.038219 [ 526 ] {06a0c14c-6c81-4204-9ab7-968755e881ce} <Error> virtual void DB::StorageBuffer::shutdown(): Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xbecd55c in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x5009d49 in /usr/bin/clickhouse\r\n2. ? @ 0x4bfb800 in /usr/bin/clickhouse\r\n3. DB::Context::getSampleBlockCache() const @ 0x8cdcb99 in /usr/bin/clickhouse\r\n4. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) @ 0x8da5c02 in /usr/bin/clickhouse\r\n5. ? @ 0x8f365b9 in /usr/bin/clickhouse\r\n6. DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool) @ 0x8f394f8 in /usr/bin/clickhouse\r\n7. DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const @ 0x8ef3983 in /usr/bin/clickhouse\r\n8. ? @ 0x8d6d616 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6e8c8 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n11. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n15. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n17. DB::PushingToViewsBlockOutputStream::PushingToViewsBlockOutputStream(std::__1::shared_ptr<DB::IStorage> const&, DB::Context const&, std::__1::shared_ptr<DB::IAST> const&, bool) @ 0x96f8baa in /usr/bin/clickhouse\r\n18. DB::InterpreterInsertQuery::execute() @ 0x8d4f07f in /usr/bin/clickhouse\r\n19. DB::StorageBuffer::writeBlockToDestination(DB::Block const&, std::__1::shared_ptr<DB::IStorage>) @ 0x99469fe in /usr/bin/clickhouse\r\n20. DB::StorageBuffer::flushBuffer(DB::StorageBuffer::Buffer&, bool, bool) @ 0x994796f in /usr/bin/clickhouse\r\n21. DB::StorageBuffer::optimize(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IAST> const&, bool, bool, DB::Context const&) @ 0x9947baf in /usr/bin/clickhouse\r\n22. DB::StorageBuffer::shutdown() @ 0x9944103 in /usr/bin/clickhouse\r\n23. DB::InterpreterDropQuery::executeToTable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTDropQuery::Kind, bool, bool, bool) @ 0x8d47dd0 in /usr/bin/clickhouse\r\n24. DB::InterpreterDropQuery::execute() @ 0x8d49e3e in /usr/bin/clickhouse\r\n25. ? @ 0x8f2f50a in /usr/bin/clickhouse\r\n26. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0x8f32b06 in /usr/bin/clickhouse\r\n27. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x5084816 in /usr/bin/clickhouse\r\n28. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x5087f03 in /usr/bin/clickhouse\r\n29. Poco::Net::HTTPServerConnection::run() @ 0x9e0480c in /usr/bin/clickhouse\r\n30. Poco::Net::TCPServerConnection::start() @ 0x9e01297 in /usr/bin/clickhouse\r\n31. Poco::Net::TCPServerDispatcher::run() @ 0x9e0168d in /usr/bin/clickhouse\r\n (version 20.2.1.2442 (official build))\r\n```",
  "created_at": "2020-07-10T12:43:49Z"
}