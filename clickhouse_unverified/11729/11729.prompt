You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
What's the issue with `sumDistinct` ?
I'm trying to do a query along the lines of:

`SELECT SUM(DISTINCT( (gb_val, weight).2 )) FROM my_table`

But I get exception:
`DB::Exception: Unknown function SUMDistinct. `

However, the same logic works perfectly well with:

`arraySum(arrayMap(lambda(tuple(x), tupleElement(x, 2)), groupUniqArray(tuple(gb_val, weight))))` ... which is slow as ****, presumably due to all the array creation and appending that's going on.

Why is `sumDistinct` not a valid function in this case ? And is there a fundamental issue that would stop it from being implemented ? Is there a more efficient way to go about this problem ?

In my case the same `gb_val` always has the same `weight`, so the distinct is only needed on the `gb_val` column, `ANY` could be applied to weight... but I think that's besides the point.
support `countIf(DISTINCT col1, <cond_expr>)`
(you don't have to strictly follow this form)

**Use case**
when trying to translate postgres sql to clickhouse sql,  `COUNT(col1) FILTER (WHERE <cond_expr>)`  is equal with `countIf(col1, <cond_expr>)`. it would be much more consistent if 
`COUNT(DISTINCT col1) FILTER (WHERE <cond_expr>)` can translate as `countIf(DISTINCT col1, <cond_expr>)`.



**Describe the solution you'd like**
As `count(DISTINCT col1)` is supported, looks like it's reasonable to support `countIf(DISTINCT col1, <cond_expr>)` .

**Describe alternatives you've considered**
`uniqExactIf(col1, <cond_expr>)`

**Additional context**
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
