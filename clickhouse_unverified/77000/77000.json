{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 77000,
  "instance_id": "ClickHouse__ClickHouse-77000",
  "issue_numbers": [
    "75487",
    "75669"
  ],
  "base_commit": "21ccc849918fdb7df3c81732671e2cf7207d2910",
  "patch": "diff --git a/src/Columns/ColumnVector.cpp b/src/Columns/ColumnVector.cpp\nindex f298f7c1e22e..8a689efde7e2 100644\n--- a/src/Columns/ColumnVector.cpp\n+++ b/src/Columns/ColumnVector.cpp\n@@ -281,7 +281,7 @@ void ColumnVector<T>::getPermutation(IColumn::PermutationSortDirection direction\n \n                 RadixSort<RadixSortTraits<T>>::executeLSD(pairs.data(), data_size, reverse, res.data());\n \n-                /// Radix sort treats all NaNs to be greater than all numbers.\n+                /// Radix sort treats all positive NaNs to be greater than all numbers.\n                 /// If the user needs the opposite, we must move them accordingly.\n                 if (is_floating_point<T> && nan_direction_hint < 0)\n                 {\ndiff --git a/src/Common/RadixSort.h b/src/Common/RadixSort.h\nindex 9fd17084e474..e3e0bca82fe8 100644\n--- a/src/Common/RadixSort.h\n+++ b/src/Common/RadixSort.h\n@@ -91,7 +91,7 @@ struct RadixSortFloatTraits\n     using CountType = uint32_t;\n \n     /// The type to which the key is transformed to do bit operations. This UInt is the same size as the key.\n-    using KeyBits = std::conditional_t<sizeof(Key) == 8, uint64_t, uint32_t>;\n+    using KeyBits = std::conditional_t<sizeof(Key) == 8, uint64_t, std::conditional_t<sizeof(Key) == 4, uint32_t, uint16_t>>;\n \n     static constexpr size_t PART_SIZE_BITS = 8;    /// With what pieces of the key, in bits, to do one pass - reshuffle of the array.\n \ndiff --git a/src/Core/CompareHelper.h b/src/Core/CompareHelper.h\nindex 2e7aaf1f6054..f4d752d2bef7 100644\n--- a/src/Core/CompareHelper.h\n+++ b/src/Core/CompareHelper.h\n@@ -2,8 +2,8 @@\n \n #include <base/defines.h>\n #include <base/types.h>\n+#include <Common/NaNUtils.h>\n \n-#include <cmath>\n \n namespace DB\n {\n@@ -13,7 +13,7 @@ namespace DB\n   * Floating-point numbers are compared this way that NaNs always end up at the end\n   *  (if you don't do this, the sort would not work at all).\n   */\n-template <class T, class U = T>\n+template <typename T, typename U = T>\n struct CompareHelper\n {\n     static constexpr bool less(T a, U b, int /*nan_direction_hint*/) { return a < b; }\n@@ -29,13 +29,13 @@ struct CompareHelper\n     static constexpr int compare(T a, U b, int /*nan_direction_hint*/) { return a > b ? 1 : (a < b ? -1 : 0); }\n };\n \n-template <class T>\n+template <typename T>\n struct FloatCompareHelper\n {\n     static constexpr bool less(T a, T b, int nan_direction_hint)\n     {\n-        const bool isnan_a = std::isnan(a);\n-        const bool isnan_b = std::isnan(b);\n+        const bool isnan_a = isNaN(a);\n+        const bool isnan_b = isNaN(b);\n \n         if (isnan_a && isnan_b)\n             return false;\n@@ -49,8 +49,8 @@ struct FloatCompareHelper\n \n     static constexpr bool greater(T a, T b, int nan_direction_hint)\n     {\n-        const bool isnan_a = std::isnan(a);\n-        const bool isnan_b = std::isnan(b);\n+        const bool isnan_a = isNaN(a);\n+        const bool isnan_b = isNaN(b);\n \n         if (isnan_a && isnan_b)\n             return false;\n@@ -66,8 +66,8 @@ struct FloatCompareHelper\n \n     static constexpr int compare(T a, T b, int nan_direction_hint)\n     {\n-        const bool isnan_a = std::isnan(a);\n-        const bool isnan_b = std::isnan(b);\n+        const bool isnan_a = isNaN(a);\n+        const bool isnan_b = isNaN(b);\n \n         if (unlikely(isnan_a || isnan_b))\n         {\n@@ -81,10 +81,16 @@ struct FloatCompareHelper\n     }\n };\n \n+template <typename U>\n+struct CompareHelper<BFloat16, U> : public FloatCompareHelper<BFloat16>\n+{\n+};\n+\n template <typename U>\n struct CompareHelper<Float32, U> : public FloatCompareHelper<Float32>\n {\n };\n+\n template <typename U>\n struct CompareHelper<Float64, U> : public FloatCompareHelper<Float64>\n {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03366_bfloat16_sorting.reference b/tests/queries/0_stateless/03366_bfloat16_sorting.reference\nnew file mode 100644\nindex 000000000000..201d46485e11\n--- /dev/null\n+++ b/tests/queries/0_stateless/03366_bfloat16_sorting.reference\n@@ -0,0 +1,290 @@\n+-inf\n+-9187343000000000000\n+-8718969000000000000\n+-8466767300000000000\n+-8322652000000000000\n+-8250594500000000000\n+-7998393000000000000\n+-7818249000000000000\n+-7602076000000000000\n+-7457961000000000000\n+-6341068300000000000\n+-6305039500000000000\n+-6305039500000000000\n+-6269010700000000000\n+-6232982000000000000\n+-5512406000000000000\n+-5440348300000000000\n+-5296233000000000000\n+-5224175600000000000\n+-5188147000000000000\n+-5044031600000000000\n+-5008003000000000000\n+-4899916400000000000\n+-4827859000000000000\n+-4683743600000000000\n+-4539628400000000000\n+-4485585200000000000\n+-4431542000000000000\n+-4305441200000000000\n+-4287426800000000000\n+-4143311700000000000\n+-3728980500000000000\n+-3710966000000000000\n+-3674937300000000000\n+-2882303800000000000\n+-2864289400000000000\n+-2810246200000000000\n+-2738188600000000000\n+-2287828600000000000\n+-2251799800000000000\n+-2026619800000000000\n+-1801439900000000000\n+-1630303000000000000\n+-1279022300000000000\n+-1026820700000000000\n+-562949950000000000\n+-2122317800\n+-2097152000\n+-2038431700\n+-1979711500\n+-1954545700\n+-1887436800\n+-1778384900\n+-1652555800\n+-1635778600\n+-1627390000\n+-1551892500\n+-1551892500\n+-1484783600\n+-1350565900\n+-1350565900\n+-1283457000\n+-1275068400\n+-1191182300\n+-1149239300\n+-977272800\n+-805306400\n+-792723460\n+-775946240\n+-746586100\n+-738197500\n+-700448800\n+-679477250\n+-671088640\n+-545259500\n+-463470600\n+-459276300\n+-457179140\n+-452984830\n+-354418700\n+-333447170\n+-310378500\n+-261095420\n+-229638140\n+-213909500\n+-6750208\n+-1011712\n+-958464\n+-573440\n+-69120\n+-67584\n+-58112\n+-29312\n+-8512\n+-4960\n+-3872\n+-1928\n+-976\n+-856\n+-752\n+-704\n+-520\n+-172\n+-156\n+-96\n+-53.75\n+-46.25\n+-38.25\n+-33\n+-28.25\n+-15.625\n+-15.375\n+-12.5625\n+-10.375\n+-9.375\n+-9.1875\n+-8.5625\n+-7.6875\n+-7.4375\n+-7.34375\n+-6.75\n+-3.515625\n+-3\n+-2.828125\n+-2.6875\n+-2\n+-1.7578125\n+-1.6953125\n+-1.234375\n+-1.09375\n+-1.0859375\n+-0.87890625\n+-0.859375\n+-0.703125\n+-0.69921875\n+-0.12792969\n+-0.028198242\n+-0\n+0\n+0\n+0\n+0\n+0.48242188\n+1.5\n+1.796875\n+1.828125\n+3.59375\n+5.125\n+7.90625\n+7.96875\n+8.625\n+9\n+9.375\n+9.4375\n+9.5625\n+13\n+18.125\n+21.625\n+43.75\n+56\n+67.5\n+80\n+99\n+134\n+282\n+700\n+772\n+824\n+1128\n+4768\n+8704\n+9152\n+10048\n+70656\n+83968\n+144384\n+223232\n+485376\n+913408\n+88604670\n+115867650\n+181403650\n+229638140\n+310378500\n+354418700\n+402653200\n+415236100\n+450887680\n+488636400\n+520093700\n+788529150\n+851443700\n+914358300\n+914358300\n+1040187400\n+1124073500\n+1132462100\n+1149239300\n+1191182300\n+1249902600\n+1392508900\n+1434452000\n+1442840600\n+1535115300\n+1627390000\n+1652555800\n+1652555800\n+1677721600\n+1719664600\n+1728053200\n+1811939300\n+1811939300\n+1828716500\n+1837105200\n+1845493800\n+1887436800\n+1937768400\n+1954545700\n+2030043100\n+2071986200\n+2097152000\n+346777170000000000\n+869194700000000000\n+1098878300000000000\n+1297036700000000000\n+1405123100000000000\n+1612288700000000000\n+1621295900000000000\n+1756403900000000000\n+2071655800000000000\n+2161727800000000000\n+2413929400000000000\n+2558044600000000000\n+2882303800000000000\n+2918332600000000000\n+3008404600000000000\n+3098476500000000000\n+3602879700000000000\n+3638908500000000000\n+3656923000000000000\n+3999196500000000000\n+4035225300000000000\n+4215369300000000000\n+4305441200000000000\n+4827859000000000000\n+5080060400000000000\n+5188147000000000000\n+5260204400000000000\n+5728579000000000000\n+5728579000000000000\n+5836665000000000000\n+5836665000000000000\n+5980780300000000000\n+5980780300000000000\n+6232982000000000000\n+6413126000000000000\n+6521212000000000000\n+6953558000000000000\n+7097673000000000000\n+7421932000000000000\n+7530018600000000000\n+7746191400000000000\n+7854278000000000000\n+7890306500000000000\n+7890306500000000000\n+8142508000000000000\n+8430738500000000000\n+8430738500000000000\n+8646911300000000000\n+8718969000000000000\n+8718969000000000000\n+8899113000000000000\n+8971170500000000000\n+9079257000000000000\n+9079257000000000000\n+inf\n+inf\n+inf\n+nan\n+nan\n+nan\n+nan\n+nan\n+nan\n+nan\n+nan\n+nan\n+nan\n+nan\n+nan\ndiff --git a/tests/queries/0_stateless/03366_bfloat16_sorting.sql b/tests/queries/0_stateless/03366_bfloat16_sorting.sql\nnew file mode 100644\nindex 000000000000..8e8a6082b450\n--- /dev/null\n+++ b/tests/queries/0_stateless/03366_bfloat16_sorting.sql\n@@ -0,0 +1,4 @@\n+SELECT * FROM format(Values, 'x BFloat16', '\n+(915309.3), (-172.4), (-1555612173), (-794649755), (9.0), (1853837358), (-752.038), (1396433067), (-807596209), (6980930564848204980), (inf), (-334802707), (-9208770324484017588), (1542974135), (8.65110), (3653113333946823132), (-0.7048), (-521.0), (8435282414075074417), (-6292128116417116397), (-1.1), (402684563), (7100378348544520322), (-1.758), (5866537631201593121), (1448199529), (-1012621), (-69567.11), (-976.8334), (-28.35), (-8547.0), (+0.0), (5106142703787698805), (8753460139368692361), (-962398.0), (-1191866042), (-3.53), (5736130821808181266), (1.5), (-2102861541), (-4318589268046737694), (+0.0), (8925059011873647780), (-156.896869), (-2882154502015236978), (-1149877585), (0.48367), (1135103111), (1842836061), (-0.02826), (-3726604190761547609), (-453901554.40), (2888527236479160511), (-7.454), (854116431), (6258347412277750223), (-1632245551464937874), (-3887.35), (8767.14), (-2026982035343500009), (10084.047), (-12.6150), (-4490844512257432684), (80.0), (4003882477879050470), (-8032628616449150130), (nan), (283.11), (-2040930083), (-1660845000), (-46.4), (2431480081340864910), (-8348560450377606243), (-8502763961981072530), (-15.67900), (230036155), (1942939659), (4794.81023), (-1639852492), (-1352376506), (-2.7), (-1.088), (-1286266918863494194), (-5474135460424898823), (-701987997), (-3677164403360004369), (7.9723935), (-6243785367315650126), (1131.4), (13.0), (88967630.99), (-4857582370574805786), (-4288683376502787204), (1299393795189677177), (827.0), (-779228479), (5278875253796893698), (-1.241), (-9.4), (8652067825981452928), (5.13222918), (-2739239481541406400), (-38.29), (-1557979152), (-457695388), (-1959634948), (-463871221), (-7491614107579678858), (7901991093387175754), (-749021875), (-563485266992292414), (7903784173186423016), (6415568457236688716), (0.0), (1041044414), (-inf), (-7.36), (1.834), (56.0), (-0.0), (nan), (1407263544961752054), (-2825675448399084472), (-704.2), (7438299440420973263), (2922890613588943306), (452195848), (-673820791), (9172.0), (-7847859370969306041), (1956615306), (144567.23), (-33.1076), (-53.91200), (-6.75), (-4448835675253045899), (2168295801156564119), (1655170692), (4316746107587705818), (-8269286236795419058), (1727302703), (-214033129), (-7.7), (nan), (-0.7), (+nan), (-4547328351920373605), (nan), (-1487104083), (1658546204), (1151636392), (416290247.08), (-4699301667687142318), (-1.7), (-6323293279463878865), (5855641835618078507), (6000839524613739767), (-1029895710511952591), (486712), (-3730616670168004577), (3010252056832300847), (-1929.84917), (-2253628015236776383), (-1355690956), (1.8), (1255622011), (-7633225657025354393), (-1809222556741732999), (8451912649540627017), (134.521), (-6312210627363870622), (-230600560), (9.45), (-0.8798), (-856.606), (nan), (1626812583630422427), (116036431), (-2896591025188201292), (2101820842), (2079731433), (-5311080917199036345), (-577360.40844459), (-58257.86), (-6364996476077464518), (9112295453040021646), (8734695561715260733), (-355588047), (1895493280), (349020560979472682), (914602758), (5192612204687053771), (-5241047726046761998), (1099543785538793655), (-311288720), (1633155009), (1613280409437033273), (+nan), (-10.4), (-68033.01), (-8728247972026697820), (7563764808015298425), (-0.860), (-2.0), (355270636), (181943082), (2077491986200197340), (-5196084623766115387), (-0.1280), (18.24323), (1439645894), (-3.0), (+nan), (-4920802313749507761), (9.581223), (-4977.639), (21.6613), (-1281671910), (-15.4), (-5066115181153139762), (1831511780), (3616962447275671394), (-5035837218861299864), (917383330), (+inf), (223894.264), (-96.275444), (nan), (-547606170), (-261714371), (1734489497), (1760637531924834025), (-2130171631), (99.40196), (3106130344652597122), (9084751387559563274), (-9.2), (772.20502704), (5987185449054785806), (+nan), (-461241595), (869648491758383603), (9.4), (7760123765394357048), (-979023095), (-682791909), (0.0), (-2.84), (-1887928434), (-8.602), (43.8), (-740133382), (-1628407200), (nan), (4048950104344667845), (7.923), (-2290446205925660340), (1817370121), (700.0), (1683434407), (8994999237835107052), (8158939128335705548), (-6779280.5), (520417636), (4856231070881691400), (+inf), (84333.5), (1814647746), (-1783864249), (2035802471), (70752.0), (1124938650), (5737532713519861979), (1196647506), (-4146469507106105938), (7869998886095964339), (312457241), (nan), (3663885939535420359), (-29385.769192130), (4217936517369282398), (67.9), (-1981743187), (489740628), (6528054616798929895), (-5516525484994056924), (3.6), (-1291051489), (791837371), (2559503485226905057)\n+')\n+ORDER BY x;\ndiff --git a/tests/queries/0_stateless/03367_bfloat16_tuple_final.reference b/tests/queries/0_stateless/03367_bfloat16_tuple_final.reference\nnew file mode 100644\nindex 000000000000..00ea75b9dc0b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03367_bfloat16_tuple_final.reference\n@@ -0,0 +1,262 @@\n+(-inf)\n+(-9187343000000000000)\n+(-8718969000000000000)\n+(-8466767300000000000)\n+(-8322652000000000000)\n+(-8250594500000000000)\n+(-7998393000000000000)\n+(-7818249000000000000)\n+(-7602076000000000000)\n+(-7457961000000000000)\n+(-6341068300000000000)\n+(-6305039500000000000)\n+(-6269010700000000000)\n+(-6232982000000000000)\n+(-5512406000000000000)\n+(-5440348300000000000)\n+(-5296233000000000000)\n+(-5224175600000000000)\n+(-5188147000000000000)\n+(-5044031600000000000)\n+(-5008003000000000000)\n+(-4899916400000000000)\n+(-4827859000000000000)\n+(-4683743600000000000)\n+(-4539628400000000000)\n+(-4485585200000000000)\n+(-4431542000000000000)\n+(-4305441200000000000)\n+(-4287426800000000000)\n+(-4143311700000000000)\n+(-3728980500000000000)\n+(-3710966000000000000)\n+(-3674937300000000000)\n+(-3008404600000000000)\n+(-2882303800000000000)\n+(-2864289400000000000)\n+(-2810246200000000000)\n+(-2738188600000000000)\n+(-2287828600000000000)\n+(-2251799800000000000)\n+(-2026619800000000000)\n+(-1801439900000000000)\n+(-1630303000000000000)\n+(-1279022300000000000)\n+(-1026820700000000000)\n+(-562949950000000000)\n+(-2122317800)\n+(-2097152000)\n+(-2038431700)\n+(-1979711500)\n+(-1954545700)\n+(-1887436800)\n+(-1778384900)\n+(-1652555800)\n+(-1635778600)\n+(-1627390000)\n+(-1551892500)\n+(-1484783600)\n+(-1350565900)\n+(-1283457000)\n+(-1275068400)\n+(-1191182300)\n+(-1149239300)\n+(-977272800)\n+(-805306400)\n+(-792723460)\n+(-775946240)\n+(-746586100)\n+(-738197500)\n+(-700448800)\n+(-679477250)\n+(-671088640)\n+(-545259500)\n+(-463470600)\n+(-459276300)\n+(-457179140)\n+(-452984830)\n+(-354418700)\n+(-333447170)\n+(-310378500)\n+(-261095420)\n+(-229638140)\n+(-213909500)\n+(-6750208)\n+(-1011712)\n+(-958464)\n+(-573440)\n+(-69120)\n+(-67584)\n+(-58112)\n+(-29312)\n+(-8512)\n+(-4960)\n+(-3872)\n+(-1928)\n+(-976)\n+(-856)\n+(-752)\n+(-704)\n+(-520)\n+(-172)\n+(-156)\n+(-96)\n+(-53.75)\n+(-46.25)\n+(-38.25)\n+(-33)\n+(-28.25)\n+(-15.625)\n+(-15.375)\n+(-12.5625)\n+(-10.375)\n+(-9.375)\n+(-9.1875)\n+(-8.5625)\n+(-7.6875)\n+(-7.4375)\n+(-7.34375)\n+(-6.75)\n+(-3.515625)\n+(-3)\n+(-2.828125)\n+(-2.6875)\n+(-2)\n+(-1.7578125)\n+(-1.6953125)\n+(-1.234375)\n+(-1.09375)\n+(-1.0859375)\n+(-0.87890625)\n+(-0.859375)\n+(-0.703125)\n+(-0.69921875)\n+(-0.12792969)\n+(-0.028198242)\n+(0)\n+(0.48242188)\n+(1.5)\n+(1.796875)\n+(1.828125)\n+(3.59375)\n+(5.125)\n+(7.90625)\n+(7.96875)\n+(8.625)\n+(9)\n+(9.375)\n+(9.4375)\n+(9.5625)\n+(13)\n+(18.125)\n+(21.625)\n+(43.75)\n+(56)\n+(67.5)\n+(80)\n+(99)\n+(134)\n+(282)\n+(700)\n+(772)\n+(824)\n+(1128)\n+(4768)\n+(8704)\n+(9152)\n+(10048)\n+(70656)\n+(83968)\n+(144384)\n+(223232)\n+(485376)\n+(913408)\n+(88604670)\n+(115867650)\n+(181403650)\n+(229638140)\n+(310378500)\n+(354418700)\n+(402653200)\n+(415236100)\n+(450887680)\n+(488636400)\n+(520093700)\n+(788529150)\n+(851443700)\n+(914358300)\n+(1040187400)\n+(1124073500)\n+(1132462100)\n+(1149239300)\n+(1191182300)\n+(1249902600)\n+(1392508900)\n+(1434452000)\n+(1442840600)\n+(1535115300)\n+(1627390000)\n+(1652555800)\n+(1677721600)\n+(1719664600)\n+(1728053200)\n+(1811939300)\n+(1828716500)\n+(1837105200)\n+(1845493800)\n+(1887436800)\n+(1937768400)\n+(1954545700)\n+(2030043100)\n+(2071986200)\n+(2097152000)\n+(346777170000000000)\n+(421086570000000000)\n+(869194700000000000)\n+(1098878300000000000)\n+(1297036700000000000)\n+(1405123100000000000)\n+(1612288700000000000)\n+(1621295900000000000)\n+(1756403900000000000)\n+(2071655800000000000)\n+(2161727800000000000)\n+(2413929400000000000)\n+(2558044600000000000)\n+(2882303800000000000)\n+(2918332600000000000)\n+(3008404600000000000)\n+(3098476500000000000)\n+(3602879700000000000)\n+(3638908500000000000)\n+(3656923000000000000)\n+(3999196500000000000)\n+(4035225300000000000)\n+(4215369300000000000)\n+(4305441200000000000)\n+(4827859000000000000)\n+(5080060400000000000)\n+(5188147000000000000)\n+(5260204400000000000)\n+(5728579000000000000)\n+(5836665000000000000)\n+(5980780300000000000)\n+(6232982000000000000)\n+(6413126000000000000)\n+(6521212000000000000)\n+(6953558000000000000)\n+(7097673000000000000)\n+(7421932000000000000)\n+(7530018600000000000)\n+(7746191400000000000)\n+(7854278000000000000)\n+(7890306500000000000)\n+(8142508000000000000)\n+(8430738500000000000)\n+(8646911300000000000)\n+(8718969000000000000)\n+(8899113000000000000)\n+(8971170500000000000)\n+(9079257000000000000)\n+(inf)\n+(nan)\ndiff --git a/tests/queries/0_stateless/03367_bfloat16_tuple_final.sql b/tests/queries/0_stateless/03367_bfloat16_tuple_final.sql\nnew file mode 100644\nindex 000000000000..9101e03f879a\n--- /dev/null\n+++ b/tests/queries/0_stateless/03367_bfloat16_tuple_final.sql\n@@ -0,0 +1,5 @@\n+DROP TABLE IF EXISTS t0;\n+CREATE TABLE t0 (c0 Tuple(BFloat16)) ENGINE = SummingMergeTree() ORDER BY (c0);\n+INSERT INTO TABLE t0 (c0) VALUES ((-3023198492688736344, )), ((915309.3, )), ((-172.4, )), ((-1555612173, )), ((-794649755, )), ((9.0, )), ((1853837358, )), ((-752.038, )), ((1396433067, )), ((-807596209, )), ((6980930564848204980, )), ((inf, )), ((-334802707, )), ((-9208770324484017588, )), ((1542974135, )), ((8.65110, )), ((3653113333946823132, )), ((-0.7048, )), ((-521.0, )), ((8435282414075074417, )), ((-6292128116417116397, )), ((-1.1, )), ((402684563, )), ((7100378348544520322, )), ((-1.758, )), ((5866537631201593121, )), ((1448199529, )), ((-1012621, )), ((-69567.11, )), ((-976.8334, )), ((-28.35, )), ((-8547.0, )), ((+0.0, )), ((5106142703787698805, )), ((8753460139368692361, )), ((-962398.0, )), ((-1191866042, )), ((-3.53, )), ((5736130821808181266, )), ((1.5, )), ((-2102861541, )), ((-4318589268046737694, )), ((+0.0, )), ((8925059011873647780, )), ((-156.896869, )), ((-2882154502015236978, )), ((-1149877585, )), ((0.48367, )), ((1135103111, )), ((1842836061, )), ((-0.02826, )), ((-3726604190761547609, )), ((-453901554.40, )), ((2888527236479160511, )), ((-7.454, )), ((854116431, )), ((6258347412277750223, )), ((-1632245551464937874, )), ((-3887.35, )), ((8767.14, )), ((-2026982035343500009, )), ((10084.047, )), ((-12.6150, )), ((-4490844512257432684, )), ((80.0, )), ((4003882477879050470, )), ((-8032628616449150130, )), ((nan, )), ((283.11, )), ((-2040930083, )), ((-1660845000, )), ((-46.4, )), ((2431480081340864910, )), ((-8348560450377606243, )), ((-8502763961981072530, )), ((-15.67900, )), ((230036155, )), ((1942939659, )), ((4794.81023, )), ((-1639852492, )), ((-1352376506, )), ((-2.7, )), ((-1.088, )), ((-1286266918863494194, )), ((-5474135460424898823, )), ((-701987997, )), ((-3677164403360004369, )), ((7.9723935, )), ((-6243785367315650126, )), ((1131.4, )), ((13.0, )), ((88967630.99, )), ((-4857582370574805786, )), ((-4288683376502787204, )), ((1299393795189677177, )), ((827.0, )), ((-779228479, )), ((5278875253796893698, )), ((-1.241, )), ((-9.4, )), ((8652067825981452928, )), ((5.13222918, )), ((-2739239481541406400, )), ((-38.29, )), ((-1557979152, )), ((-457695388, )), ((-1959634948, )), ((-463871221, )), ((-7491614107579678858, )), ((7901991093387175754, )), ((-749021875, )), ((-563485266992292414, )), ((7903784173186423016, )), ((6415568457236688716, )), ((0.0, )), ((1041044414, )), ((-inf, )), ((-7.36, )), ((1.834, )), ((56.0, )), ((-0.0, )), ((nan, )), ((1407263544961752054, )), ((-2825675448399084472, )), ((-704.2, )), ((7438299440420973263, )), ((2922890613588943306, )), ((452195848, )), ((-673820791, )), ((9172.0, )), ((-7847859370969306041, )), ((1956615306, )), ((144567.23, )), ((-33.1076, )), ((-53.91200, )), ((-6.75, )), ((-4448835675253045899, )), ((2168295801156564119, )), ((1655170692, )), ((4316746107587705818, )), ((-8269286236795419058, )), ((1727302703, )), ((-214033129, )), ((-7.7, )), ((nan, )), ((-0.7, )), ((+nan, )), ((-4547328351920373605, )), ((nan, )), ((-1487104083, )), ((1658546204, )), ((1151636392, )), ((416290247.08, )), ((-4699301667687142318, )), ((-1.7, )), ((-6323293279463878865, )), ((5855641835618078507, )), ((6000839524613739767, )), ((-1029895710511952591, )), ((486712, )), ((-3730616670168004577, )), ((3010252056832300847, )), ((-1929.84917, )), ((-2253628015236776383, )), ((-1355690956, )), ((1.8, )), ((1255622011, )), ((-7633225657025354393, )), ((-1809222556741732999, )), ((8451912649540627017, )), ((134.521, )), ((-6312210627363870622, )), ((-230600560, )), ((9.45, )), ((-0.8798, )), ((-856.606, )), ((-nan, )), ((1626812583630422427, )), ((116036431, )), ((-2896591025188201292, )), ((2101820842, )), ((2079731433, )), ((-5311080917199036345, )), ((-577360.40844459, )), ((-58257.86, )), ((-6364996476077464518, )), ((9112295453040021646, )), ((8734695561715260733, )), ((-355588047, )), ((1895493280, )), ((349020560979472682, )), ((914602758, )), ((5192612204687053771, )), ((-5241047726046761998, )), ((1099543785538793655, )), ((-311288720, )), ((1633155009, )), ((1613280409437033273, )), ((+nan, )), ((-10.4, )), ((-68033.01, )), ((-8728247972026697820, )), ((7563764808015298425, )), ((-0.860, )), ((-2.0, )), ((355270636, )), ((181943082, )), ((2077491986200197340, )), ((-5196084623766115387, )), ((-0.1280, )), ((18.24323, )), ((1439645894, )), ((-3.0, )), ((+nan, )), ((-4920802313749507761, )), ((9.581223, )), ((-4977.639, )), ((21.6613, )), ((-1281671910, )), ((-15.4, )), ((-5066115181153139762, )), ((1831511780, )), ((3616962447275671394, )), ((-5035837218861299864, )), ((917383330, )), ((+inf, )), ((223894.264, )), ((-96.275444, )), ((-nan, )), ((-547606170, )), ((-261714371, )), ((1734489497, )), ((1760637531924834025, )), ((-2130171631, )), ((99.40196, )), ((3106130344652597122, )), ((9084751387559563274, )), ((-9.2, )), ((772.20502704, )), ((5987185449054785806, )), ((+nan, )), ((-461241595, )), ((869648491758383603, )), ((9.4, )), ((7760123765394357048, )), ((-979023095, )), ((-682791909, )), ((0.0, )), ((-2.84, )), ((-1887928434, )), ((-8.602, )), ((43.8, )), ((-740133382, )), ((-1628407200, )), ((nan, )), ((4048950104344667845, )), ((7.923, )), ((-2290446205925660340, )), ((1817370121, )), ((700.0, )), ((1683434407, )), ((8994999237835107052, )), ((8158939128335705548, )), ((-6779280.5, )), ((520417636, )), ((4856231070881691400, )), ((+inf, )), ((84333.5, )), ((1814647746, )), ((-1783864249, )), ((2035802471, )), ((70752.0, )), ((1124938650, )), ((5737532713519861979, )), ((1196647506, )), ((-4146469507106105938, )), ((7869998886095964339, )), ((312457241, )), ((-nan, )), ((3663885939535420359, )), ((-29385.769192130, )), ((4217936517369282398, )), ((67.9, )), ((-1981743187, )), ((489740628, )), ((6528054616798929895, )), ((-5516525484994056924, )), ((3.6, )), ((-1291051489, )), ((791837371, )), ((2559503485226905057, )), ((423224585269353485, ));\n+SELECT c0 FROM t0 FINAL;\n+DROP TABLE t0;\ndiff --git a/tests/queries/0_stateless/03368_bfloat16_merge_join.reference b/tests/queries/0_stateless/03368_bfloat16_merge_join.reference\nnew file mode 100644\nindex 000000000000..aa47d0d46d47\n--- /dev/null\n+++ b/tests/queries/0_stateless/03368_bfloat16_merge_join.reference\n@@ -0,0 +1,2 @@\n+0\n+0\ndiff --git a/tests/queries/0_stateless/03368_bfloat16_merge_join.sql b/tests/queries/0_stateless/03368_bfloat16_merge_join.sql\nnew file mode 100644\nindex 000000000000..c1e64c64de92\n--- /dev/null\n+++ b/tests/queries/0_stateless/03368_bfloat16_merge_join.sql\n@@ -0,0 +1,7 @@\n+DROP TABLE IF EXISTS t0;\n+CREATE TABLE t0 (c0 Float64, c1 BFloat16) ENGINE = MergeTree() PARTITION BY (murmurHash3_64(c0)) PRIMARY KEY (c0);\n+SET join_algorithm = 'full_sorting_merge';\n+INSERT INTO TABLE t0 (c0, c1) VALUES (4, -1), (-1745033997, 7), (-1940737579, nan);\n+SELECT count() FROM t0 t0d0 JOIN t0 t1d0 ON t1d0.c0 = t0d0.c0 JOIN t0 t2d0 ON t1d0.c1 = t2d0.c1 WHERE t1d0.c0 != t2d0.c0;\n+SELECT sum(t1d0.c0 != t2d0.c0) FROM t0 t0d0 JOIN t0 t1d0 ON t1d0.c0 = t0d0.c0 JOIN t0 t2d0 ON t1d0.c1 = t2d0.c1;\n+DROP TABLE t0;\n",
  "problem_statement": "Logical error: 'parts_ranges[0].event == PartsRangesIterator::EventType::RangeStart' with BFloat16\n### Describe the bug\n\nRun the Fiddle. The issue happens with `Tuple(BFloat16)` type combination and doesn't reproduce with other floating-point types.\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/04a3da3e-2e0a-4170-a245-9b6f5fb31959\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n<Fatal> : Logical error: 'parts_ranges[0].event == PartsRangesIterator::EventType::RangeStart'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x00000000264d1397\n1. src/Common/StackTrace.h:48: DB::abortOnFailedAssertion(String const&) @ 0x00000000264875f7\n2. src/Processors/QueryPlan/PartsSplitter.cpp:480: (anonymous namespace)::splitPartsRanges(DB::RangesInDataParts, std::shared_ptr<Poco::Logger> const&) @ 0x0000000037227a30\n3. src/Processors/QueryPlan/PartsSplitter.cpp:921: DB::splitPartsWithRangesByPrimaryKey(DB::KeyDescription const&, std::shared_ptr<DB::ExpressionActions>, DB::RangesInDataParts, unsigned long, std::shared_ptr<DB::Context const>, std::function<DB::Pipe (DB::RangesInDataParts)>&&, bool, bool) @ 0x00000000372220bd\n4. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1366: DB::ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(DB::RangesInDataParts&&, unsigned long, std::vector<String, std::allocator<String>> const&, std::vector<String, std::allocator<String>> const&, std::optional<DB::ActionsDAG>&) @ 0x00000000371d53ef\n5. src/Processors/QueryPlan/ReadFromMergeTree.cpp:2026: DB::ReadFromMergeTree::spreadMarkRanges(DB::RangesInDataParts&&, unsigned long, DB::ReadFromMergeTree::AnalysisResult&, std::optional<DB::ActionsDAG>&) @ 0x00000000371e2fc5\n6. src/Processors/QueryPlan/ReadFromMergeTree.cpp:2129: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x00000000371e5531\n7. src/Processors/QueryPlan/ISourceStep.cpp:20: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x0000000037154bbf\n8. src/Processors/QueryPlan/QueryPlan.cpp:202: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000003719fa3a\n9. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:274: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x0000000032dee173\n10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:241: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x0000000032dedd66\n11. src/Interpreters/executeQuery.cpp:1455: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000033307a54\n12. src/Interpreters/executeQuery.cpp:1621: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000333019bb\n13. src/Server/TCPHandler.cpp:662: DB::TCPHandler::runImpl() @ 0x0000000036706c3c\n14. src/Server/TCPHandler.cpp:2624: DB::TCPHandler::run() @ 0x0000000036735b0e\n15. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000003a9b1d82\n16. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003a9b2a52\n17. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000003a91c997\n18. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000003a9183ce\n19. ? @ 0x00007ffff7ca1e2e\n20. ? @ 0x00007ffff7d33a4c\n```\nUnexpected result on full_sorting_merge join with BFloat16\n### Describe the bug\n\nI am not sure if this is an issue, but the result is not deterministic and only happens in the title's circumstance with a `nan` value.\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/08c27bc8-5704-4190-9198-005f8f72d0af \n\n### Error message and/or stacktrace\n\n_No response_\n",
  "hints_text": "\nIt looks really interesting as join just returns different number of rows...",
  "created_at": "2025-03-01T00:33:14Z",
  "modified_files": [
    "src/Columns/ColumnVector.cpp",
    "src/Common/RadixSort.h",
    "src/Core/CompareHelper.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03366_bfloat16_sorting.reference",
    "b/tests/queries/0_stateless/03366_bfloat16_sorting.sql",
    "b/tests/queries/0_stateless/03367_bfloat16_tuple_final.reference",
    "b/tests/queries/0_stateless/03367_bfloat16_tuple_final.sql",
    "b/tests/queries/0_stateless/03368_bfloat16_merge_join.reference",
    "b/tests/queries/0_stateless/03368_bfloat16_merge_join.sql"
  ]
}