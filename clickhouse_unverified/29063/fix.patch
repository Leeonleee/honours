diff --git a/base/common/arithmeticOverflow.h b/base/common/arithmeticOverflow.h
index 175e75a62f4b..0957342bbb44 100644
--- a/base/common/arithmeticOverflow.h
+++ b/base/common/arithmeticOverflow.h
@@ -145,6 +145,19 @@ namespace common
         return __builtin_mul_overflow(x, y, &res);
     }
 
+    template <typename T, typename U, typename R>
+    inline bool mulOverflow(T x, U y, R & res)
+    {
+        // not built in type, wide integer
+        if constexpr (is_big_int_v<T>  || is_big_int_v<R> || is_big_int_v<U>)
+        {
+            res = mulIgnoreOverflow<R>(x, y);
+            return false;
+        }
+        else
+            return __builtin_mul_overflow(x, y, &res);
+    }
+
     template <>
     inline bool mulOverflow(int x, int y, int & res)
     {
diff --git a/src/IO/ReadHelpers.h b/src/IO/ReadHelpers.h
index 6be57cfd0d3b..808b8dd3e7a3 100644
--- a/src/IO/ReadHelpers.h
+++ b/src/IO/ReadHelpers.h
@@ -331,12 +331,24 @@ ReturnType readIntTextImpl(T & x, ReadBuffer & buf)
 
                     if (buf.count() - initial_pos + 1 >= std::numeric_limits<T>::max_digits10)
                     {
-                        T signed_res = res;
-                        if (common::mulOverflow<T>(signed_res, 10, signed_res)
-                            || common::addOverflow<T>(signed_res, (*buf.position() - '0'), signed_res))
-                            return ReturnType(false);
-
-                        res = signed_res;
+                        if (negative)
+                        {
+                            T signed_res = -res;
+                            if (common::mulOverflow<T>(signed_res, 10, signed_res) ||
+                                common::subOverflow<T>(signed_res, (*buf.position() - '0'), signed_res))
+                                return ReturnType(false);
+
+                            res = -static_cast<UnsignedT>(signed_res);
+                        }
+                        else
+                        {
+                            T signed_res = res;
+                            if (common::mulOverflow<T>(signed_res, 10, signed_res) ||
+                                common::addOverflow<T>(signed_res, (*buf.position() - '0'), signed_res))
+                                return ReturnType(false);
+
+                            res = signed_res;
+                        }
                         break;
                     }
                 }
@@ -366,7 +378,7 @@ ReturnType readIntTextImpl(T & x, ReadBuffer & buf)
         {
             if constexpr (check_overflow == ReadIntTextCheckOverflow::CHECK_OVERFLOW)
             {
-                if (common::mulOverflow<T>(x, -1, x))
+                if (common::mulOverflow<UnsignedT, Int8, T>(res, -1, x))
                     return ReturnType(false);
             }
             else
