{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 29063,
  "instance_id": "ClickHouse__ClickHouse-29063",
  "issue_numbers": [
    "27800"
  ],
  "base_commit": "8d1bf1b675a3d3b9b086b2fbc94ddc536f2cd521",
  "patch": "diff --git a/base/common/arithmeticOverflow.h b/base/common/arithmeticOverflow.h\nindex 175e75a62f4b..0957342bbb44 100644\n--- a/base/common/arithmeticOverflow.h\n+++ b/base/common/arithmeticOverflow.h\n@@ -145,6 +145,19 @@ namespace common\n         return __builtin_mul_overflow(x, y, &res);\n     }\n \n+    template <typename T, typename U, typename R>\n+    inline bool mulOverflow(T x, U y, R & res)\n+    {\n+        // not built in type, wide integer\n+        if constexpr (is_big_int_v<T>  || is_big_int_v<R> || is_big_int_v<U>)\n+        {\n+            res = mulIgnoreOverflow<R>(x, y);\n+            return false;\n+        }\n+        else\n+            return __builtin_mul_overflow(x, y, &res);\n+    }\n+\n     template <>\n     inline bool mulOverflow(int x, int y, int & res)\n     {\ndiff --git a/src/IO/ReadHelpers.h b/src/IO/ReadHelpers.h\nindex 6be57cfd0d3b..808b8dd3e7a3 100644\n--- a/src/IO/ReadHelpers.h\n+++ b/src/IO/ReadHelpers.h\n@@ -331,12 +331,24 @@ ReturnType readIntTextImpl(T & x, ReadBuffer & buf)\n \n                     if (buf.count() - initial_pos + 1 >= std::numeric_limits<T>::max_digits10)\n                     {\n-                        T signed_res = res;\n-                        if (common::mulOverflow<T>(signed_res, 10, signed_res)\n-                            || common::addOverflow<T>(signed_res, (*buf.position() - '0'), signed_res))\n-                            return ReturnType(false);\n-\n-                        res = signed_res;\n+                        if (negative)\n+                        {\n+                            T signed_res = -res;\n+                            if (common::mulOverflow<T>(signed_res, 10, signed_res) ||\n+                                common::subOverflow<T>(signed_res, (*buf.position() - '0'), signed_res))\n+                                return ReturnType(false);\n+\n+                            res = -static_cast<UnsignedT>(signed_res);\n+                        }\n+                        else\n+                        {\n+                            T signed_res = res;\n+                            if (common::mulOverflow<T>(signed_res, 10, signed_res) ||\n+                                common::addOverflow<T>(signed_res, (*buf.position() - '0'), signed_res))\n+                                return ReturnType(false);\n+\n+                            res = signed_res;\n+                        }\n                         break;\n                     }\n                 }\n@@ -366,7 +378,7 @@ ReturnType readIntTextImpl(T & x, ReadBuffer & buf)\n         {\n             if constexpr (check_overflow == ReadIntTextCheckOverflow::CHECK_OVERFLOW)\n             {\n-                if (common::mulOverflow<T>(x, -1, x))\n+                if (common::mulOverflow<UnsignedT, Int8, T>(res, -1, x))\n                     return ReturnType(false);\n             }\n             else\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/2020_cast_integer_overflow.reference b/tests/queries/0_stateless/2020_cast_integer_overflow.reference\nnew file mode 100644\nindex 000000000000..acceae4a72e1\n--- /dev/null\n+++ b/tests/queries/0_stateless/2020_cast_integer_overflow.reference\n@@ -0,0 +1,2 @@\n+-2147483648\n+-2147483648\ndiff --git a/tests/queries/0_stateless/2020_cast_integer_overflow.sql b/tests/queries/0_stateless/2020_cast_integer_overflow.sql\nnew file mode 100644\nindex 000000000000..57aeff9a9828\n--- /dev/null\n+++ b/tests/queries/0_stateless/2020_cast_integer_overflow.sql\n@@ -0,0 +1,2 @@\n+SELECT toInt32('-2147483648');\n+SELECT toInt32OrNull('-2147483648');\n",
  "problem_statement": "toInt32OrNull('-2147483648') unexpectedly returns NULL\n**Describe the bug**\r\n\r\n-2147483648 is the minimum integer representable with Int32, but ``toInt32OrNull('-2147483648')`` returns ``NULL``. On the other hand ``toInt32('-2147483648')`` correctly returns ``-2147483648``.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes. It happens on 21.7.5.29-stable\r\n\r\n**How to reproduce**\r\n\r\n```\r\nSELECT\r\n    toInt32('-2147483648'),\r\n    toInt32OrNull('-2147483648')\r\n\r\nQuery id: 94f4e069-6c0e-44d9-8e94-7ee83b90a529\r\n\r\n\u250c\u2500toInt32('-2147483648')\u2500\u252c\u2500toInt32OrNull('-2147483648')\u2500\u2510\r\n\u2502            -2147483648 \u2502                         \u1d3a\u1d41\u1d38\u1d38 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Expected behavior**\r\n\r\n``toInt32('-2147483648')`` and ``toInt32OrNull('-2147483648')`` should both return ``-2147483648``.\r\n\n",
  "hints_text": "",
  "created_at": "2021-09-15T20:33:11Z",
  "modified_files": [
    "base/common/arithmeticOverflow.h",
    "src/IO/ReadHelpers.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/2020_cast_integer_overflow.reference",
    "b/tests/queries/0_stateless/2020_cast_integer_overflow.sql"
  ]
}