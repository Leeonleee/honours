{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53638,
  "instance_id": "ClickHouse__ClickHouse-53638",
  "issue_numbers": [
    "53221"
  ],
  "base_commit": "b2821106fd3b8e83dbddff4252fe5b2c0d92cd99",
  "patch": "diff --git a/docs/en/operations/backup.md b/docs/en/operations/backup.md\nindex c3545a778b76..687bd66056b2 100644\n--- a/docs/en/operations/backup.md\n+++ b/docs/en/operations/backup.md\n@@ -206,6 +206,55 @@ end_time:          2022-08-30 09:21:46\n 1 row in set. Elapsed: 0.002 sec.\n ```\n \n+Along with `system.backups` table, all backup and restore operations are also tracked in the system log table [backup_log](../operations/system-tables/backup_log.md): \n+```\n+SELECT *\n+FROM system.backup_log\n+WHERE id = '7678b0b3-f519-4e6e-811f-5a0781a4eb52'\n+ORDER BY event_time_microseconds ASC\n+FORMAT Vertical\n+```\n+```response\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-18\n+event_time_microseconds: 2023-08-18 11:13:43.097414\n+id:                      7678b0b3-f519-4e6e-811f-5a0781a4eb52\n+name:                    Disk('backups', '1.zip')\n+status:                  CREATING_BACKUP\n+error:                   \n+start_time:              2023-08-18 11:13:43\n+end_time:                1970-01-01 03:00:00\n+num_files:               0\n+total_size:              0\n+num_entries:             0\n+uncompressed_size:       0\n+compressed_size:         0\n+files_read:              0\n+bytes_read:              0\n+\n+Row 2:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-18\n+event_time_microseconds: 2023-08-18 11:13:43.174782\n+id:                      7678b0b3-f519-4e6e-811f-5a0781a4eb52\n+name:                    Disk('backups', '1.zip')\n+status:                  BACKUP_FAILED\n+#highlight-next-line\n+error:                   Code: 598. DB::Exception: Backup Disk('backups', '1.zip') already exists. (BACKUP_ALREADY_EXISTS) (version 23.8.1.1)\n+start_time:              2023-08-18 11:13:43\n+end_time:                2023-08-18 11:13:43\n+num_files:               0\n+total_size:              0\n+num_entries:             0\n+uncompressed_size:       0\n+compressed_size:         0\n+files_read:              0\n+bytes_read:              0\n+\n+2 rows in set. Elapsed: 0.075 sec. \n+```\n+\n ## Configuring BACKUP/RESTORE to use an S3 Endpoint\n \n To write backups to an S3 bucket you need three pieces of information:\ndiff --git a/docs/en/operations/server-configuration-parameters/settings.md b/docs/en/operations/server-configuration-parameters/settings.md\nindex 55ee15a09d98..7d0ab4949262 100644\n--- a/docs/en/operations/server-configuration-parameters/settings.md\n+++ b/docs/en/operations/server-configuration-parameters/settings.md\n@@ -2150,6 +2150,47 @@ The default server configuration file `config.xml` contains the following settin\n </crash_log>\n ```\n \n+## backup_log {#server_configuration_parameters-backup_log}\n+\n+Settings for the [backup_log](../../operations/system-tables/backup_log.md) system table for logging `BACKUP` and `RESTORE` operations.\n+\n+Parameters:\n+\n+- `database` \u2014 Database name.\n+- `table` \u2014 Table name.\n+- `partition_by` \u2014 [Custom partitioning key](../../engines/table-engines/mergetree-family/custom-partitioning-key.md) for a system table. Can't be used if `engine` is defined.\n+- `order_by` - [Custom sorting key](../../engines/table-engines/mergetree-family/mergetree.md#order_by) for a system table. Can't be used if `engine` is defined.\n+- `engine` - [MergeTree Engine Definition](../../engines/table-engines/mergetree-family/mergetree.md#table_engine-mergetree-creating-a-table) for a system table. Can't be used if `partition_by` or `order_by` is defined.\n+- `flush_interval_milliseconds` \u2014 Interval for flushing data from the buffer in memory to the table.\n+- `max_size_rows` \u2013 Maximal size in lines for the logs. When non-flushed logs amount reaches max_size, logs dumped to the disk.\n+Default: 1048576.\n+- `reserved_size_rows` \u2013  Pre-allocated memory size in lines for the logs.\n+Default: 8192.\n+- `buffer_size_rows_flush_threshold` \u2013 Lines amount threshold, reaching it launches flushing logs to the disk in background.\n+Default: `max_size_rows / 2`.\n+- `flush_on_crash` - Indication whether logs should be dumped to the disk in case of a crash.\n+Default: false.\n+- `storage_policy` \u2013 Name of storage policy to use for the table (optional).\n+- `settings` - [Additional parameters](../../engines/table-engines/mergetree-family/mergetree.md#settings) that control the behavior of the MergeTree (optional).\n+\n+**Example**\n+\n+```xml\n+<clickhouse>\n+    <backup_log>\n+        <database>system</database>\n+        <table>backup_log</table>\n+        <flush_interval_milliseconds>1000</flush_interval_milliseconds>\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <max_size_rows>1048576</max_size_rows>\n+        <reserved_size_rows>8192</reserved_size_rows>\n+        <buffer_size_rows_flush_threshold>524288</buffer_size_rows_flush_threshold>\n+        <flush_on_crash>false</flush_on_crash>\n+        <!-- <engine>Engine = MergeTree PARTITION BY event_date ORDER BY event_time TTL event_date + INTERVAL 30 day</engine> -->\n+    </backup_log>\n+</clickhouse>\n+```\n+\n ## query_masking_rules {#query-masking-rules}\n \n Regexp-based rules, which will be applied to queries as well as all log messages before storing them in server logs,\ndiff --git a/docs/en/operations/system-tables/backup_log.md b/docs/en/operations/system-tables/backup_log.md\nnew file mode 100644\nindex 000000000000..7e088fcad947\n--- /dev/null\n+++ b/docs/en/operations/system-tables/backup_log.md\n@@ -0,0 +1,145 @@\n+---\n+slug: /en/operations/system-tables/backup_log\n+---\n+# backup_log\n+\n+Contains logging entries with the information about `BACKUP` and `RESTORE` operations.\n+\n+Columns:\n+\n+- `event_date` ([Date](../../sql-reference/data-types/date.md)) \u2014 Date of the entry.\n+- `event_time_microseconds` ([DateTime64](../../sql-reference/data-types/datetime64.md)) \u2014 Time of the entry with microseconds precision.\n+- `id` ([String](../../sql-reference/data-types/string.md)) \u2014 Identifier of the backup or restore operation.\n+- `name` ([String](../../sql-reference/data-types/string.md)) \u2014 Name of the backup storage (the contents of the `FROM` or `TO` clause).\n+- `status` ([Enum8](../../sql-reference/data-types/enum.md)) \u2014 Operation status. Possible values:\n+    - `'CREATING_BACKUP'`\n+    - `'BACKUP_CREATED'`\n+    - `'BACKUP_FAILED'`\n+    - `'RESTORING'`\n+    - `'RESTORED'`\n+    - `'RESTORE_FAILED'`\n+- `error` ([String](../../sql-reference/data-types/string.md)) \u2014 Error message of the failed operation (empty string for successful operations).\n+- `start_time` ([DateTime](../../sql-reference/data-types/datetime.md)) \u2014 Start time of the operation.\n+- `end_time` ([DateTime](../../sql-reference/data-types/datetime.md)) \u2014 End time of the operation.\n+- `num_files` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 Number of files stored in the backup.\n+- `total_size` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 Total size of files stored in the backup.\n+- `num_entries` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 Number of entries in the backup, i.e. the number of files inside the folder if the backup is stored as a folder, or the number of files inside the archive if the backup is stored as an archive. It is not the same as `num_files` if it's an incremental backup or if it contains empty files or duplicates. The following is always true: `num_entries <= num_files`.\n+- `uncompressed_size` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 Uncompressed size of the backup.\n+- `compressed_size` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 Compressed size of the backup. If the backup is not stored as an archive it equals to `uncompressed_size`.\n+- `files_read` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 Number of files read during the restore operation.\n+- `bytes_read` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 Total size of files read during the restore operation.\n+\n+**Example**\n+\n+```sql\n+BACKUP TABLE test_db.my_table TO Disk('backups_disk', '1.zip')\n+```\n+```response\n+\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 e5b74ecb-f6f1-426a-80be-872f90043885 \u2502 BACKUP_CREATED \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+```sql\n+SELECT * FROM system.backup_log WHERE id = 'e5b74ecb-f6f1-426a-80be-872f90043885' ORDER BY event_date, event_time_microseconds \\G\n+```\n+```response\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-19\n+event_time_microseconds: 2023-08-19 11:05:21.998566\n+id:                      e5b74ecb-f6f1-426a-80be-872f90043885\n+name:                    Disk('backups_disk', '1.zip')\n+status:                  CREATING_BACKUP\n+error:                   \n+start_time:              2023-08-19 11:05:21\n+end_time:                1970-01-01 03:00:00\n+num_files:               0\n+total_size:              0\n+num_entries:             0\n+uncompressed_size:       0\n+compressed_size:         0\n+files_read:              0\n+bytes_read:              0\n+\n+Row 2:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-19\n+event_time_microseconds: 2023-08-19 11:08:56.916192\n+id:                      e5b74ecb-f6f1-426a-80be-872f90043885\n+name:                    Disk('backups_disk', '1.zip')\n+status:                  BACKUP_CREATED\n+error:                   \n+start_time:              2023-08-19 11:05:21\n+end_time:                2023-08-19 11:08:56\n+num_files:               57\n+total_size:              4290364870\n+num_entries:             46\n+uncompressed_size:       4290362365\n+compressed_size:         3525068304\n+files_read:              0\n+bytes_read:              0\n+```\n+```sql\n+RESTORE TABLE test_db.my_table FROM Disk('backups_disk', '1.zip')\n+```\n+```response\n+\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u2500\u2500\u2510\n+\u2502 cdf1f731-52ef-42da-bc65-2e1bfcd4ce90 \u2502 RESTORED \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+```sql\n+SELECT * FROM system.backup_log WHERE id = 'cdf1f731-52ef-42da-bc65-2e1bfcd4ce90' ORDER BY event_date, event_time_microseconds \\G\n+```\n+```response\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-19\n+event_time_microseconds: 2023-08-19 11:09:19.718077\n+id:                      cdf1f731-52ef-42da-bc65-2e1bfcd4ce90\n+name:                    Disk('backups_disk', '1.zip')\n+status:                  RESTORING\n+error:                   \n+start_time:              2023-08-19 11:09:19\n+end_time:                1970-01-01 03:00:00\n+num_files:               0\n+total_size:              0\n+num_entries:             0\n+uncompressed_size:       0\n+compressed_size:         0\n+files_read:              0\n+bytes_read:              0\n+\n+Row 2:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-19\n+event_time_microseconds: 2023-08-19 11:09:29.334234\n+id:                      cdf1f731-52ef-42da-bc65-2e1bfcd4ce90\n+name:                    Disk('backups_disk', '1.zip')\n+status:                  RESTORED\n+error:                   \n+start_time:              2023-08-19 11:09:19\n+end_time:                2023-08-19 11:09:29\n+num_files:               57\n+total_size:              4290364870\n+num_entries:             46\n+uncompressed_size:       4290362365\n+compressed_size:         4290362365\n+files_read:              57\n+bytes_read:              4290364870\n+```\n+\n+This is essentially the same information that is written in the system table `system.backups`:\n+\n+```sql\n+SELECT * FROM system.backups ORDER BY start_time\n+```\n+```response\n+\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500error\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500start_time\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500end_time\u2500\u252c\u2500num_files\u2500\u252c\u2500total_size\u2500\u252c\u2500num_entries\u2500\u252c\u2500uncompressed_size\u2500\u252c\u2500compressed_size\u2500\u252c\u2500files_read\u2500\u252c\u2500bytes_read\u2500\u2510\n+\u2502 e5b74ecb-f6f1-426a-80be-872f90043885 \u2502 Disk('backups_disk', '1.zip') \u2502 BACKUP_CREATED \u2502       \u2502 2023-08-19 11:05:21 \u2502 2023-08-19 11:08:56 \u2502        57 \u2502 4290364870 \u2502          46 \u2502        4290362365 \u2502      3525068304 \u2502          0 \u2502          0 \u2502\n+\u2502 cdf1f731-52ef-42da-bc65-2e1bfcd4ce90 \u2502 Disk('backups_disk', '1.zip') \u2502 RESTORED       \u2502       \u2502 2023-08-19 11:09:19 \u2502 2023-08-19 11:09:29 \u2502        57 \u2502 4290364870 \u2502          46 \u2502        4290362365 \u2502      4290362365 \u2502         57 \u2502 4290364870 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+**See Also**\n+\n+- [Backup and Restore](../../operations/backup.md)\ndiff --git a/docs/en/operations/system-tables/index.md b/docs/en/operations/system-tables/index.md\nindex a46f306f6777..df42f80275e0 100644\n--- a/docs/en/operations/system-tables/index.md\n+++ b/docs/en/operations/system-tables/index.md\n@@ -23,7 +23,7 @@ System tables:\n \n Most of system tables store their data in RAM. A ClickHouse server creates such system tables at the start.\n \n-Unlike other system tables, the system log tables [metric_log](../../operations/system-tables/metric_log.md), [query_log](../../operations/system-tables/query_log.md), [query_thread_log](../../operations/system-tables/query_thread_log.md), [trace_log](../../operations/system-tables/trace_log.md), [part_log](../../operations/system-tables/part_log.md), [crash_log](../../operations/system-tables/crash-log.md) and [text_log](../../operations/system-tables/text_log.md) are served by [MergeTree](../../engines/table-engines/mergetree-family/mergetree.md) table engine and store their data in a filesystem by default. If you remove a table from a filesystem, the ClickHouse server creates the empty one again at the time of the next data writing. If system table schema changed in a new release, then ClickHouse renames the current table and creates a new one.\n+Unlike other system tables, the system log tables [metric_log](../../operations/system-tables/metric_log.md), [query_log](../../operations/system-tables/query_log.md), [query_thread_log](../../operations/system-tables/query_thread_log.md), [trace_log](../../operations/system-tables/trace_log.md), [part_log](../../operations/system-tables/part_log.md), [crash_log](../../operations/system-tables/crash-log.md), [text_log](../../operations/system-tables/text_log.md) and [backup_log](../../operations/system-tables/backup_log.md) are served by [MergeTree](../../engines/table-engines/mergetree-family/mergetree.md) table engine and store their data in a filesystem by default. If you remove a table from a filesystem, the ClickHouse server creates the empty one again at the time of the next data writing. If system table schema changed in a new release, then ClickHouse renames the current table and creates a new one.\n \n System log tables can be customized by creating a config file with the same name as the table under `/etc/clickhouse-server/config.d/`, or setting corresponding elements in `/etc/clickhouse-server/config.xml`. Elements can be customized are:\n \n@@ -32,7 +32,7 @@ System log tables can be customized by creating a config file with the same name\n - `partition_by`: specify [PARTITION BY](../../engines/table-engines/mergetree-family/custom-partitioning-key.md) expression.\n - `ttl`: specify table [TTL](../../sql-reference/statements/alter/ttl.md) expression.\n - `flush_interval_milliseconds`: interval of flushing data to disk.\n-- `engine`: provide full engine expression (starting with `ENGINE =` ) with parameters. This option is contradict with `partition_by` and `ttl`. If set together, the server would raise an exception and exit.\n+- `engine`: provide full engine expression (starting with `ENGINE =` ) with parameters. This option conflicts with `partition_by` and `ttl`. If set together, the server will raise an exception and exit.\n \n An example:\n \ndiff --git a/docs/ru/operations/server-configuration-parameters/settings.md b/docs/ru/operations/server-configuration-parameters/settings.md\nindex 652a03a0df58..1b488f5864de 100644\n--- a/docs/ru/operations/server-configuration-parameters/settings.md\n+++ b/docs/ru/operations/server-configuration-parameters/settings.md\n@@ -1488,6 +1488,47 @@ ClickHouse \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0442\u043e\u043a\u0438 \u0438\u0437 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0443\u043b\n </crash_log>\n ```\n \n+## backup_log {#server_configuration_parameters-backup_log}\n+\n+\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b [backup_log](../../operations/system-tables/backup_log.md), \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 `BACKUP` \u0438 `RESTORE`.\n+\n+\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:\n+\n+- `database` \u2014 \u0438\u043c\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445.\n+- `table` \u2014 \u0438\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b.\n+- `partition_by` \u2014 [\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f](../../engines/table-engines/mergetree-family/custom-partitioning-key.md). \u041d\u0435\u043b\u044c\u0437\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441 `engine`.\n+- `order_by` - [\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438](../../engines/table-engines/mergetree-family/mergetree.md#order_by). \u041d\u0435\u043b\u044c\u0437\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441 `engine`.\n+- `engine` - [\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 MergeTree Engine](../../engines/table-engines/mergetree-family/mergetree.md#table_engine-mergetree-creating-a-table). \u041d\u0435\u043b\u044c\u0437\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441 `partition_by` \u0438\u043b\u0438 `order_by`.\n+- `flush_interval_milliseconds` \u2014 \u043f\u0435\u0440\u0438\u043e\u0434 \u0441\u0431\u0440\u043e\u0441\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0431\u0443\u0444\u0435\u0440\u0430 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443.\n+- `max_size_rows` \u2013 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0434\u043b\u044f \u0431\u0443\u0444\u0435\u0440\u0430 \u0441 \u043b\u043e\u0433\u0430\u043c\u0438. \u041a\u043e\u0433\u0434\u0430 \u0431\u0443\u0444\u0435\u0440 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e, \u0441\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438 \u043d\u0430 \u0434\u0438\u0441\u043a.\n+\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1024.\n+- `reserved_size_rows` \u2013  \u043f\u0440\u0435\u0430\u043b\u043b\u043e\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0434\u043b\u044f \u0431\u0443\u0444\u0435\u0440\u0430 \u0441 \u043b\u043e\u0433\u0430\u043c\u0438.\n+\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1024.\n+- `buffer_size_rows_flush_threshold` \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u043b\u043e\u0433\u0435, \u043f\u0440\u0438 \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043b\u043e\u0433\u0438 \u043d\u0430\u0447\u043d\u0443\u0442 \u0441\u043a\u0438\u0434\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0438\u0441\u043a \u0432 \u043d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0435\u043c \u0440\u0435\u0436\u0438\u043c\u0435.\n+\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `max_size_rows / 2`.\n+- `flush_on_crash` - \u0434\u043e\u043b\u0436\u043d\u044b \u043b\u0438 \u043b\u043e\u0433\u0438 \u0431\u044b\u0442\u044c \u0441\u0431\u0440\u043e\u0448\u0435\u043d\u044b \u043d\u0430 \u0434\u0438\u0441\u043a \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e\u0439 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.\n+\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: false.\n+- `storage_policy` \u2013 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440).\n+- `settings` - [\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 MergeTree Engine](../../engines/table-engines/mergetree-family/mergetree.md#settings) (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440).\n+\n+**\u041f\u0440\u0438\u043c\u0435\u0440**\n+\n+```xml\n+<clickhouse>\n+    <backup_log>\n+        <database>system</database>\n+        <table>backup_log</table>\n+        <flush_interval_milliseconds>1000</flush_interval_milliseconds>\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <max_size_rows>1048576</max_size_rows>\n+        <reserved_size_rows>8192</reserved_size_rows>\n+        <buffer_size_rows_flush_threshold>524288</buffer_size_rows_flush_threshold>\n+        <flush_on_crash>false</flush_on_crash>\n+        <!-- <engine>Engine = MergeTree PARTITION BY event_date ORDER BY event_time TTL event_date + INTERVAL 30 day</engine> -->\n+    </backup_log>\n+</clickhouse>\n+```\n+\n ## query_masking_rules {#query-masking-rules}\n \n \u041f\u0440\u0430\u0432\u0438\u043b\u0430, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u044b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u0445 \u0432 \u043b\u043e\u0433 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435,\ndiff --git a/docs/ru/operations/system-tables/backup_log.md b/docs/ru/operations/system-tables/backup_log.md\nnew file mode 100644\nindex 000000000000..15c1bfb20a40\n--- /dev/null\n+++ b/docs/ru/operations/system-tables/backup_log.md\n@@ -0,0 +1,145 @@\n+---\n+slug: /ru/operations/system-tables/backup_log\n+---\n+# system.backup_log {#system_tables-backup-log}\n+\n+\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 `BACKUP` and `RESTORE`.\n+\n+\u041a\u043e\u043b\u043e\u043d\u043a\u0438:\n+\n+- `event_date` ([Date](../../sql-reference/data-types/date.md)) \u2014 \u0414\u0430\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f.\n+- `event_time_microseconds` ([DateTime64](../../sql-reference/data-types/datetime64.md)) \u2014 \u0412\u0440\u0435\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u043a\u0443\u043d\u0434.\n+- `id` ([String](../../sql-reference/data-types/string.md)) \u2014 \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n+- `name` ([String](../../sql-reference/data-types/string.md)) \u2014 \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 (\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u0435\u043a\u0446\u0438\u0438 `FROM` \u0438\u043b\u0438 `TO` \u0432 SQL \u0437\u0430\u043f\u0440\u043e\u0441\u0435).\n+- `status` ([Enum8](../../sql-reference/data-types/enum.md)) \u2014 \u0421\u0442\u0430\u0442\u0443\u0441 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\n+    - `'CREATING_BACKUP'`\n+    - `'BACKUP_CREATED'`\n+    - `'BACKUP_FAILED'`\n+    - `'RESTORING'`\n+    - `'RESTORED'`\n+    - `'RESTORE_FAILED'`\n+- `error` ([String](../../sql-reference/data-types/string.md)) \u2014 \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435, \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 (\u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443).\n+- `start_time` ([DateTime](../../sql-reference/data-types/datetime.md)) \u2014 \u0412\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n+- `end_time` ([DateTime](../../sql-reference/data-types/datetime.md)) \u2014 \u0412\u0440\u0435\u043c\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n+- `num_files` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u0439\u043b\u043e\u0432, \u0445\u0440\u0430\u043d\u0438\u043c\u044b\u0445 \u0432 \u0431\u044d\u043a\u0430\u043f\u0435.\n+- `total_size` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 \u041e\u0431\u0449\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u043e\u0432, \u0445\u0440\u0430\u043d\u0438\u043c\u044b\u0445 \u0432 \u0431\u044d\u043a\u0430\u043f\u0435.\n+- `num_entries` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0432 \u0431\u044d\u043a\u0430\u043f\u0435, \u0442.\u0435. \u043b\u0438\u0431\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u043f\u0430\u043f\u043a\u0435 (\u0435\u0441\u043b\u0438 \u0431\u044d\u043a\u0430\u043f \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u043f\u0430\u043f\u043a\u0435), \u043b\u0438\u0431\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0430\u0440\u0445\u0438\u0432\u0435 (\u0435\u0441\u043b\u0438 \u0431\u044d\u043a\u0430\u043f \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0430\u0440\u0445\u0438\u0432\u0435). \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435 \u0440\u0430\u0432\u043d\u043e `num_files` \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u044d\u043a\u0430\u043f \u043b\u0438\u0431\u043e \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0443\u0441\u0442\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438\u043b\u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043d\u043e \u0432\u0441\u0435\u0433\u0434\u0430: `num_entries <= num_files`.\n+- `uncompressed_size` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 \u0420\u0430\u0437\u043c\u0435\u0440 \u0431\u044d\u043a\u0430\u043f\u0430 \u0434\u043e \u0441\u0436\u0430\u0442\u0438\u044f.\n+- `compressed_size` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 \u0420\u0430\u0437\u043c\u0435\u0440 \u0431\u044d\u043a\u0430\u043f\u0430 \u043f\u043e\u0441\u043b\u0435 \u0441\u0436\u0430\u0442\u0438\u044f. \u0415\u0441\u043b\u0438 \u0431\u044d\u043a\u0430\u043f \u043d\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0430\u0440\u0445\u0438\u0432\u0430, \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e `uncompressed_size`.\n+- `files_read` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u0439\u043b\u043e\u0432, \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.\n+- `bytes_read` ([UInt64](../../sql-reference/data-types/int-uint.md#uint-ranges)) \u2014 \u041e\u0431\u0449\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u043e\u0432, \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.\n+\n+**\u041f\u0440\u0438\u043c\u0435\u0440**\n+\n+```sql\n+BACKUP TABLE test_db.my_table TO Disk('backups_disk', '1.zip')\n+```\n+```response\n+\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 e5b74ecb-f6f1-426a-80be-872f90043885 \u2502 BACKUP_CREATED \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+```sql\n+SELECT * FROM system.backup_log WHERE id = 'e5b74ecb-f6f1-426a-80be-872f90043885' ORDER BY event_date, event_time_microseconds \\G\n+```\n+```response\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-19\n+event_time_microseconds: 2023-08-19 11:05:21.998566\n+id:                      e5b74ecb-f6f1-426a-80be-872f90043885\n+name:                    Disk('backups_disk', '1.zip')\n+status:                  CREATING_BACKUP\n+error:                   \n+start_time:              2023-08-19 11:05:21\n+end_time:                1970-01-01 03:00:00\n+num_files:               0\n+total_size:              0\n+num_entries:             0\n+uncompressed_size:       0\n+compressed_size:         0\n+files_read:              0\n+bytes_read:              0\n+\n+Row 2:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-19\n+event_time_microseconds: 2023-08-19 11:08:56.916192\n+id:                      e5b74ecb-f6f1-426a-80be-872f90043885\n+name:                    Disk('backups_disk', '1.zip')\n+status:                  BACKUP_CREATED\n+error:                   \n+start_time:              2023-08-19 11:05:21\n+end_time:                2023-08-19 11:08:56\n+num_files:               57\n+total_size:              4290364870\n+num_entries:             46\n+uncompressed_size:       4290362365\n+compressed_size:         3525068304\n+files_read:              0\n+bytes_read:              0\n+```\n+```sql\n+RESTORE TABLE test_db.my_table FROM Disk('backups_disk', '1.zip')\n+```\n+```response\n+\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u2500\u2500\u2510\n+\u2502 cdf1f731-52ef-42da-bc65-2e1bfcd4ce90 \u2502 RESTORED \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+```sql\n+SELECT * FROM system.backup_log WHERE id = 'cdf1f731-52ef-42da-bc65-2e1bfcd4ce90' ORDER BY event_date, event_time_microseconds \\G\n+```\n+```response\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-19\n+event_time_microseconds: 2023-08-19 11:09:19.718077\n+id:                      cdf1f731-52ef-42da-bc65-2e1bfcd4ce90\n+name:                    Disk('backups_disk', '1.zip')\n+status:                  RESTORING\n+error:                   \n+start_time:              2023-08-19 11:09:19\n+end_time:                1970-01-01 03:00:00\n+num_files:               0\n+total_size:              0\n+num_entries:             0\n+uncompressed_size:       0\n+compressed_size:         0\n+files_read:              0\n+bytes_read:              0\n+\n+Row 2:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+event_date:              2023-08-19\n+event_time_microseconds: 2023-08-19 11:09:29.334234\n+id:                      cdf1f731-52ef-42da-bc65-2e1bfcd4ce90\n+name:                    Disk('backups_disk', '1.zip')\n+status:                  RESTORED\n+error:                   \n+start_time:              2023-08-19 11:09:19\n+end_time:                2023-08-19 11:09:29\n+num_files:               57\n+total_size:              4290364870\n+num_entries:             46\n+uncompressed_size:       4290362365\n+compressed_size:         4290362365\n+files_read:              57\n+bytes_read:              4290364870\n+```\n+\n+\u042d\u0442\u043e \u043f\u043e \u0441\u0443\u0442\u0438 \u0442\u0430 \u0436\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f, \u0447\u0442\u043e \u0437\u0430\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 `system.backups`:\n+\n+```sql\n+SELECT * FROM system.backups ORDER BY start_time\n+```\n+```response\n+\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500error\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500start_time\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500end_time\u2500\u252c\u2500num_files\u2500\u252c\u2500total_size\u2500\u252c\u2500num_entries\u2500\u252c\u2500uncompressed_size\u2500\u252c\u2500compressed_size\u2500\u252c\u2500files_read\u2500\u252c\u2500bytes_read\u2500\u2510\n+\u2502 e5b74ecb-f6f1-426a-80be-872f90043885 \u2502 Disk('backups_disk', '1.zip') \u2502 BACKUP_CREATED \u2502       \u2502 2023-08-19 11:05:21 \u2502 2023-08-19 11:08:56 \u2502        57 \u2502 4290364870 \u2502          46 \u2502        4290362365 \u2502      3525068304 \u2502          0 \u2502          0 \u2502\n+\u2502 cdf1f731-52ef-42da-bc65-2e1bfcd4ce90 \u2502 Disk('backups_disk', '1.zip') \u2502 RESTORED       \u2502       \u2502 2023-08-19 11:09:19 \u2502 2023-08-19 11:09:29 \u2502        57 \u2502 4290364870 \u2502          46 \u2502        4290362365 \u2502      4290362365 \u2502         57 \u2502 4290364870 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+**\u0421\u043c. \u0442\u0430\u043a\u0436\u0435**\n+\n+- [Backup and Restore](../../operations/backup.md)\ndiff --git a/docs/ru/operations/system-tables/index.md b/docs/ru/operations/system-tables/index.md\nindex 24f79cae212c..aedefb241931 100644\n--- a/docs/ru/operations/system-tables/index.md\n+++ b/docs/ru/operations/system-tables/index.md\n@@ -21,7 +21,7 @@ sidebar_label: \"\u0421\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\"\n \n \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u0445\u0440\u0430\u043d\u044f\u0442 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. \u0421\u0435\u0440\u0432\u0435\u0440 ClickHouse \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u044d\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435.\n \n-\u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446, \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u043b\u043e\u0433\u0430\u043c\u0438 [metric_log](../../operations/system-tables/metric_log.md), [query_log](../../operations/system-tables/query_log.md), [query_thread_log](../../operations/system-tables/query_thread_log.md), [trace_log](../../operations/system-tables/trace_log.md), [part_log](../../operations/system-tables/part_log.md), [crash_log](../../operations/system-tables/crash-log.md) \u0438 [text_log](../../operations/system-tables/text_log.md) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0434\u0432\u0438\u0436\u043e\u043a \u0442\u0430\u0431\u043b\u0438\u0446 [MergeTree](../../engines/table-engines/mergetree-family/mergetree.md) \u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0445\u0440\u0430\u043d\u044f\u0442 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435. \u0415\u0441\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0441\u0435\u0440\u0432\u0435\u0440 ClickHouse \u0441\u043d\u043e\u0432\u0430 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043f\u0443\u0441\u0442\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u0441\u043b\u0438 \u0441\u0445\u0435\u043c\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c \u0432 \u043d\u043e\u0432\u043e\u043c \u0440\u0435\u043b\u0438\u0437\u0435, \u0442\u043e ClickHouse \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u0443\u044e.\n+\u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446, \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u043b\u043e\u0433\u0430\u043c\u0438 [metric_log](../../operations/system-tables/metric_log.md), [query_log](../../operations/system-tables/query_log.md), [query_thread_log](../../operations/system-tables/query_thread_log.md), [trace_log](../../operations/system-tables/trace_log.md), [part_log](../../operations/system-tables/part_log.md), [crash_log](../../operations/system-tables/crash-log.md), [text_log](../../operations/system-tables/text_log.md) \u0438 [backup_log](../../operations/system-tables/backup_log.md) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0434\u0432\u0438\u0436\u043e\u043a \u0442\u0430\u0431\u043b\u0438\u0446 [MergeTree](../../engines/table-engines/mergetree-family/mergetree.md) \u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0445\u0440\u0430\u043d\u044f\u0442 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435. \u0415\u0441\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0441\u0435\u0440\u0432\u0435\u0440 ClickHouse \u0441\u043d\u043e\u0432\u0430 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043f\u0443\u0441\u0442\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u0441\u043b\u0438 \u0441\u0445\u0435\u043c\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c \u0432 \u043d\u043e\u0432\u043e\u043c \u0440\u0435\u043b\u0438\u0437\u0435, \u0442\u043e ClickHouse \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u0443\u044e.\n \n \u0422\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u043b\u043e\u0433\u0430\u043c\u0438 `log` \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c, \u0441\u043e\u0437\u0434\u0430\u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0442\u0435\u043c \u0436\u0435 \u0438\u043c\u0435\u043d\u0435\u043c, \u0447\u0442\u043e \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 `/etc/clickhouse-server/config.d/`, \u0438\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 `/etc/clickhouse-server/config.xml`. \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043c\u043e\u0433\u0443\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b:\n \ndiff --git a/programs/server/config.xml b/programs/server/config.xml\nindex 07052441a016..117be72d7580 100644\n--- a/programs/server/config.xml\n+++ b/programs/server/config.xml\n@@ -1220,6 +1220,16 @@\n         <ttl>event_date + INTERVAL 3 DAY</ttl>\n     </asynchronous_insert_log>\n \n+    <!-- Backup/restore log.\n+         Uncomment to write backup/restore log records into a system table.\n+    <backup_log>\n+        <database>system</database>\n+        <table>backup_log</table>\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <flush_interval_milliseconds>0</flush_interval_milliseconds>\n+    </backup_log>\n+    -->\n+\n     <!-- <top_level_domains_path>/var/lib/clickhouse/top_level_domains/</top_level_domains_path> -->\n     <!-- Custom TLD lists.\n          Format: <name>/path/to/file</name>\ndiff --git a/src/Backups/BackupOperationInfo.h b/src/Backups/BackupOperationInfo.h\nnew file mode 100644\nindex 000000000000..d8342e7a8c91\n--- /dev/null\n+++ b/src/Backups/BackupOperationInfo.h\n@@ -0,0 +1,54 @@\n+#pragma once\n+\n+#include <Backups/BackupStatus.h>\n+\n+namespace DB\n+{\n+\n+using BackupOperationID = String;\n+\n+/// Information about executing a BACKUP or RESTORE operation\n+struct BackupOperationInfo\n+{\n+    /// Operation ID, can be either passed via SETTINGS id=... or be randomly generated UUID.\n+    BackupOperationID id;\n+\n+    /// Operation name, a string like \"Disk('backups', 'my_backup')\"\n+    String name;\n+\n+    /// This operation is internal and should not be shown in system.backups\n+    bool internal = false;\n+\n+    /// Status of backup or restore operation.\n+    BackupStatus status;\n+\n+    /// The number of files stored in the backup.\n+    size_t num_files = 0;\n+\n+    /// The total size of files stored in the backup.\n+    UInt64 total_size = 0;\n+\n+    /// The number of entries in the backup, i.e. the number of files inside the folder if the backup is stored as a folder.\n+    size_t num_entries = 0;\n+\n+    /// The uncompressed size of the backup.\n+    UInt64 uncompressed_size = 0;\n+\n+    /// The compressed size of the backup.\n+    UInt64 compressed_size = 0;\n+\n+    /// Returns the number of files read during RESTORE from this backup.\n+    size_t num_read_files = 0;\n+\n+    // Returns the total size of files read during RESTORE from this backup.\n+    UInt64 num_read_bytes = 0;\n+\n+    /// Set only if there was an error.\n+    std::exception_ptr exception;\n+    String error_message;\n+\n+    std::chrono::system_clock::time_point start_time;\n+    std::chrono::system_clock::time_point end_time;\n+};\n+\n+}\ndiff --git a/src/Backups/BackupsWorker.cpp b/src/Backups/BackupsWorker.cpp\nindex 6c2abaf4fbab..e5cd905fbd11 100644\n--- a/src/Backups/BackupsWorker.cpp\n+++ b/src/Backups/BackupsWorker.cpp\n@@ -14,6 +14,7 @@\n #include <Backups/RestorerFromBackup.h>\n #include <Interpreters/Cluster.h>\n #include <Interpreters/Context.h>\n+#include <Interpreters/BackupLog.h>\n #include <Interpreters/executeDDLQueryOnCluster.h>\n #include <Parsers/ASTBackupQuery.h>\n #include <Parsers/ASTFunction.h>\n@@ -44,7 +45,7 @@ namespace ErrorCodes\n     extern const int CONCURRENT_ACCESS_NOT_SUPPORTED;\n }\n \n-using OperationID = BackupsWorker::OperationID;\n+using OperationID = BackupOperationID;\n namespace Stage = BackupCoordinationStage;\n \n namespace\n@@ -230,6 +231,7 @@ BackupsWorker::BackupsWorker(size_t num_backup_threads, size_t num_restore_threa\n \n OperationID BackupsWorker::start(const ASTPtr & backup_or_restore_query, ContextMutablePtr context)\n {\n+    backup_log = context->getBackupLog();\n     const ASTBackupQuery & backup_query = typeid_cast<const ASTBackupQuery &>(*backup_or_restore_query);\n     if (backup_query.kind == ASTBackupQuery::Kind::BACKUP)\n         return startMakingBackup(backup_or_restore_query, context);\n@@ -450,9 +452,10 @@ void BackupsWorker::doBackup(\n         backup.reset();\n \n         LOG_INFO(log, \"{} {} was created successfully\", (backup_settings.internal ? \"Internal backup\" : \"Backup\"), backup_name_for_logging);\n-        setStatus(backup_id, BackupStatus::BACKUP_CREATED);\n         /// NOTE: we need to update metadata again after backup->finalizeWriting(), because backup metadata is written there.\n         setNumFilesAndSize(backup_id, num_files, total_size, num_entries, uncompressed_size, compressed_size, 0, 0);\n+        /// NOTE: setStatus is called after setNumFilesAndSize in order to have actual information in a backup log record\n+        setStatus(backup_id, BackupStatus::BACKUP_CREATED);\n     }\n     catch (...)\n     {\n@@ -875,7 +878,7 @@ void BackupsWorker::restoreTablesData(const OperationID & restore_id, BackupPtr\n \n void BackupsWorker::addInfo(const OperationID & id, const String & name, bool internal, BackupStatus status)\n {\n-    Info info;\n+    BackupOperationInfo info;\n     info.id = id;\n     info.name = name;\n     info.internal = internal;\n@@ -896,6 +899,9 @@ void BackupsWorker::addInfo(const OperationID & id, const String & name, bool in\n             throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Cannot start a backup or restore: ID {} is already in use\", id);\n     }\n \n+    if (backup_log)\n+        backup_log->add(BackupLogElement{info});\n+\n     infos[id] = std::move(info);\n \n     num_active_backups += getNumActiveBackupsChange(status);\n@@ -929,6 +935,9 @@ void BackupsWorker::setStatus(const String & id, BackupStatus status, bool throw\n         info.exception = std::current_exception();\n     }\n \n+    if (backup_log)\n+        backup_log->add(BackupLogElement{info});\n+\n     num_active_backups += getNumActiveBackupsChange(status) - getNumActiveBackupsChange(old_status);\n     num_active_restores += getNumActiveRestoresChange(status) - getNumActiveRestoresChange(old_status);\n }\n@@ -938,6 +947,7 @@ void BackupsWorker::setNumFilesAndSize(const OperationID & id, size_t num_files,\n                                        UInt64 uncompressed_size, UInt64 compressed_size, size_t num_read_files, UInt64 num_read_bytes)\n \n {\n+    /// Current operation's info entry is updated here. The backup_log table is updated on its basis within a subsequent setStatus() call.\n     std::lock_guard lock{infos_mutex};\n     auto it = infos.find(id);\n     if (it == infos.end())\n@@ -970,7 +980,7 @@ void BackupsWorker::wait(const OperationID & id, bool rethrow_exception)\n     });\n }\n \n-BackupsWorker::Info BackupsWorker::getInfo(const OperationID & id) const\n+BackupOperationInfo BackupsWorker::getInfo(const OperationID & id) const\n {\n     std::lock_guard lock{infos_mutex};\n     auto it = infos.find(id);\n@@ -979,9 +989,9 @@ BackupsWorker::Info BackupsWorker::getInfo(const OperationID & id) const\n     return it->second;\n }\n \n-std::vector<BackupsWorker::Info> BackupsWorker::getAllInfos() const\n+std::vector<BackupOperationInfo> BackupsWorker::getAllInfos() const\n {\n-    std::vector<Info> res_infos;\n+    std::vector<BackupOperationInfo> res_infos;\n     std::lock_guard lock{infos_mutex};\n     for (const auto & info : infos | boost::adaptors::map_values)\n     {\ndiff --git a/src/Backups/BackupsWorker.h b/src/Backups/BackupsWorker.h\nindex ab4359ec2574..e7207cdcbd2f 100644\n--- a/src/Backups/BackupsWorker.h\n+++ b/src/Backups/BackupsWorker.h\n@@ -1,6 +1,6 @@\n #pragma once\n \n-#include <Backups/BackupStatus.h>\n+#include <Backups/BackupOperationInfo.h>\n #include <Common/ThreadPool_fwd.h>\n #include <Interpreters/Context_fwd.h>\n #include <Core/UUID.h>\n@@ -25,6 +25,7 @@ class IBackupEntry;\n using BackupEntries = std::vector<std::pair<String, std::shared_ptr<const IBackupEntry>>>;\n using DataRestoreTasks = std::vector<std::function<void()>>;\n struct ReadSettings;\n+class BackupLog;\n \n /// Manager of backups and restores: executes backups and restores' threads in the background.\n /// Keeps information about backups and restores started in this session.\n@@ -36,69 +37,22 @@ class BackupsWorker\n     /// Waits until all tasks have been completed.\n     void shutdown();\n \n-    /// Backup's or restore's operation ID, can be either passed via SETTINGS id=... or be randomly generated UUID.\n-    using OperationID = String;\n-\n     /// Starts executing a BACKUP or RESTORE query. Returns ID of the operation.\n-    OperationID start(const ASTPtr & backup_or_restore_query, ContextMutablePtr context);\n+    BackupOperationID start(const ASTPtr & backup_or_restore_query, ContextMutablePtr context);\n \n     /// Waits until a BACKUP or RESTORE query started by start() is finished.\n     /// The function returns immediately if the operation is already finished.\n-    void wait(const OperationID & backup_or_restore_id, bool rethrow_exception = true);\n-\n-    /// Information about executing a BACKUP or RESTORE query started by calling start().\n-    struct Info\n-    {\n-        /// Backup's or restore's operation ID, can be either passed via SETTINGS id=... or be randomly generated UUID.\n-        OperationID id;\n-\n-        /// Backup's name, a string like \"Disk('backups', 'my_backup')\"\n-        String name;\n-\n-        /// This operation is internal and should not be shown in system.backups\n-        bool internal = false;\n-\n-        /// Status of backup or restore operation.\n-        BackupStatus status;\n-\n-        /// The number of files stored in the backup.\n-        size_t num_files = 0;\n-\n-        /// The total size of files stored in the backup.\n-        UInt64 total_size = 0;\n-\n-        /// The number of entries in the backup, i.e. the number of files inside the folder if the backup is stored as a folder.\n-        size_t num_entries = 0;\n-\n-        /// The uncompressed size of the backup.\n-        UInt64 uncompressed_size = 0;\n-\n-        /// The compressed size of the backup.\n-        UInt64 compressed_size = 0;\n-\n-        /// Returns the number of files read during RESTORE from this backup.\n-        size_t num_read_files = 0;\n-\n-        // Returns the total size of files read during RESTORE from this backup.\n-        UInt64 num_read_bytes = 0;\n-\n-        /// Set only if there was an error.\n-        std::exception_ptr exception;\n-        String error_message;\n-\n-        std::chrono::system_clock::time_point start_time;\n-        std::chrono::system_clock::time_point end_time;\n-    };\n+    void wait(const BackupOperationID & backup_or_restore_id, bool rethrow_exception = true);\n \n-    Info getInfo(const OperationID & id) const;\n-    std::vector<Info> getAllInfos() const;\n+    BackupOperationInfo getInfo(const BackupOperationID & id) const;\n+    std::vector<BackupOperationInfo> getAllInfos() const;\n \n private:\n-    OperationID startMakingBackup(const ASTPtr & query, const ContextPtr & context);\n+    BackupOperationID startMakingBackup(const ASTPtr & query, const ContextPtr & context);\n \n     void doBackup(\n         const std::shared_ptr<ASTBackupQuery> & backup_query,\n-        const OperationID & backup_id,\n+        const BackupOperationID & backup_id,\n         const String & backup_name_for_logging,\n         const BackupInfo & backup_info,\n         BackupSettings backup_settings,\n@@ -111,13 +65,13 @@ class BackupsWorker\n     void buildFileInfosForBackupEntries(const BackupPtr & backup, const BackupEntries & backup_entries, const ReadSettings & read_settings, std::shared_ptr<IBackupCoordination> backup_coordination);\n \n     /// Write backup entries to an opened backup.\n-    void writeBackupEntries(BackupMutablePtr backup, BackupEntries && backup_entries, const OperationID & backup_id, std::shared_ptr<IBackupCoordination> backup_coordination, bool internal);\n+    void writeBackupEntries(BackupMutablePtr backup, BackupEntries && backup_entries, const BackupOperationID & backup_id, std::shared_ptr<IBackupCoordination> backup_coordination, bool internal);\n \n-    OperationID startRestoring(const ASTPtr & query, ContextMutablePtr context);\n+    BackupOperationID startRestoring(const ASTPtr & query, ContextMutablePtr context);\n \n     void doRestore(\n         const std::shared_ptr<ASTBackupQuery> & restore_query,\n-        const OperationID & restore_id,\n+        const BackupOperationID & restore_id,\n         const String & backup_name_for_logging,\n         const BackupInfo & backup_info,\n         RestoreSettings restore_settings,\n@@ -126,18 +80,19 @@ class BackupsWorker\n         bool called_async);\n \n     /// Run data restoring tasks which insert data to tables.\n-    void restoreTablesData(const OperationID & restore_id, BackupPtr backup, DataRestoreTasks && tasks, ThreadPool & thread_pool);\n+    void restoreTablesData(const BackupOperationID & restore_id, BackupPtr backup, DataRestoreTasks && tasks, ThreadPool & thread_pool);\n \n-    void addInfo(const OperationID & id, const String & name, bool internal, BackupStatus status);\n-    void setStatus(const OperationID & id, BackupStatus status, bool throw_if_error = true);\n+    void addInfo(const BackupOperationID & id, const String & name, bool internal, BackupStatus status);\n+    void setStatus(const BackupOperationID & id, BackupStatus status, bool throw_if_error = true);\n     void setStatusSafe(const String & id, BackupStatus status) { setStatus(id, status, false); }\n-    void setNumFilesAndSize(const OperationID & id, size_t num_files, UInt64 total_size, size_t num_entries,\n+    void setNumFilesAndSize(const BackupOperationID & id, size_t num_files, UInt64 total_size, size_t num_entries,\n                             UInt64 uncompressed_size, UInt64 compressed_size, size_t num_read_files, UInt64 num_read_bytes);\n \n     std::unique_ptr<ThreadPool> backups_thread_pool;\n     std::unique_ptr<ThreadPool> restores_thread_pool;\n \n-    std::unordered_map<OperationID, Info> infos;\n+    std::unordered_map<BackupOperationID, BackupOperationInfo> infos;\n+    std::shared_ptr<BackupLog> backup_log;\n     std::condition_variable status_changed;\n     std::atomic<size_t> num_active_backups = 0;\n     std::atomic<size_t> num_active_restores = 0;\ndiff --git a/src/Common/SystemLogBase.cpp b/src/Common/SystemLogBase.cpp\nindex 919020f12c91..611e14fd9b30 100644\n--- a/src/Common/SystemLogBase.cpp\n+++ b/src/Common/SystemLogBase.cpp\n@@ -15,6 +15,7 @@\n #include <Interpreters/ZooKeeperLog.h>\n #include <Interpreters/TransactionsInfoLog.h>\n #include <Interpreters/AsynchronousInsertLog.h>\n+#include <Interpreters/BackupLog.h>\n \n #include <Common/MemoryTrackerBlockerInThread.h>\n #include <Common/SystemLogBase.h>\ndiff --git a/src/Common/SystemLogBase.h b/src/Common/SystemLogBase.h\nindex 1f5832e7aac9..9770629e96af 100644\n--- a/src/Common/SystemLogBase.h\n+++ b/src/Common/SystemLogBase.h\n@@ -29,7 +29,8 @@\n     M(TextLogElement) \\\n     M(FilesystemCacheLogElement) \\\n     M(FilesystemReadPrefetchesLogElement) \\\n-    M(AsynchronousInsertLogElement)\n+    M(AsynchronousInsertLogElement) \\\n+    M(BackupLogElement)\n \n namespace Poco\n {\ndiff --git a/src/Interpreters/BackupLog.cpp b/src/Interpreters/BackupLog.cpp\nnew file mode 100644\nindex 000000000000..5e6c038ac5de\n--- /dev/null\n+++ b/src/Interpreters/BackupLog.cpp\n@@ -0,0 +1,61 @@\n+#include <Interpreters/BackupLog.h>\n+\n+#include <DataTypes/DataTypeDate.h>\n+#include <DataTypes/DataTypeDateTime64.h>\n+#include <DataTypes/DataTypeEnum.h>\n+#include <DataTypes/DataTypeString.h>\n+#include <DataTypes/DataTypesNumber.h>\n+\n+namespace DB\n+{\n+\n+BackupLogElement::BackupLogElement(BackupOperationInfo info_)\n+    : event_time(std::chrono::system_clock::now())\n+    , event_time_usec(timeInMicroseconds(event_time))\n+    , info(std::move(info_))\n+{\n+}\n+\n+NamesAndTypesList BackupLogElement::getNamesAndTypes()\n+{\n+    return\n+    {\n+        {\"event_date\", std::make_shared<DataTypeDate>()},\n+        {\"event_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"id\", std::make_shared<DataTypeString>()},\n+        {\"name\", std::make_shared<DataTypeString>()},\n+        {\"status\", std::make_shared<DataTypeEnum8>(getBackupStatusEnumValues())},\n+        {\"error\", std::make_shared<DataTypeString>()},\n+        {\"start_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"end_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"num_files\", std::make_shared<DataTypeUInt64>()},\n+        {\"total_size\", std::make_shared<DataTypeUInt64>()},\n+        {\"num_entries\", std::make_shared<DataTypeUInt64>()},\n+        {\"uncompressed_size\", std::make_shared<DataTypeUInt64>()},\n+        {\"compressed_size\", std::make_shared<DataTypeUInt64>()},\n+        {\"files_read\", std::make_shared<DataTypeUInt64>()},\n+        {\"bytes_read\", std::make_shared<DataTypeUInt64>()},\n+    };\n+}\n+\n+void BackupLogElement::appendToBlock(MutableColumns & columns) const\n+{\n+    size_t i = 0;\n+    columns[i++]->insert(DateLUT::instance().toDayNum(std::chrono::system_clock::to_time_t(event_time)).toUnderType());\n+    columns[i++]->insert(event_time_usec);\n+    columns[i++]->insert(info.id);\n+    columns[i++]->insert(info.name);\n+    columns[i++]->insert(static_cast<Int8>(info.status));\n+    columns[i++]->insert(info.error_message);\n+    columns[i++]->insert(static_cast<UInt32>(std::chrono::system_clock::to_time_t(info.start_time)));\n+    columns[i++]->insert(static_cast<UInt32>(std::chrono::system_clock::to_time_t(info.end_time)));\n+    columns[i++]->insert(info.num_files);\n+    columns[i++]->insert(info.total_size);\n+    columns[i++]->insert(info.num_entries);\n+    columns[i++]->insert(info.uncompressed_size);\n+    columns[i++]->insert(info.compressed_size);\n+    columns[i++]->insert(info.num_read_files);\n+    columns[i++]->insert(info.num_read_bytes);\n+}\n+\n+}\ndiff --git a/src/Interpreters/BackupLog.h b/src/Interpreters/BackupLog.h\nnew file mode 100644\nindex 000000000000..283b74f68baa\n--- /dev/null\n+++ b/src/Interpreters/BackupLog.h\n@@ -0,0 +1,42 @@\n+#pragma once\n+\n+#include <Interpreters/SystemLog.h>\n+#include <Core/NamesAndTypes.h>\n+#include <Core/NamesAndAliases.h>\n+#include <Backups/BackupOperationInfo.h>\n+\n+namespace DB\n+{\n+\n+/** A struct which will be inserted as row into backup_log table.\n+  * Contains a record about backup or restore operation.\n+  */\n+struct BackupLogElement\n+{\n+    BackupLogElement() = default;\n+    BackupLogElement(BackupOperationInfo info_);\n+    BackupLogElement(const BackupLogElement &) = default;\n+    BackupLogElement & operator=(const BackupLogElement &) = default;\n+    BackupLogElement(BackupLogElement &&) = default;\n+    BackupLogElement & operator=(BackupLogElement &&) = default;\n+\n+    std::chrono::system_clock::time_point event_time{};\n+    Decimal64 event_time_usec{};\n+    BackupOperationInfo info{};\n+\n+    static std::string name() { return \"BackupLog\"; }\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases() { return {}; }\n+    void appendToBlock(MutableColumns & columns) const;\n+    static const char * getCustomColumnList() { return nullptr; }\n+};\n+\n+class BackupLog : public SystemLog<BackupLogElement>\n+{\n+    using SystemLog<BackupLogElement>::SystemLog;\n+\n+public:\n+    static const char * getDefaultOrderBy() { return \"event_date, event_time_microseconds\"; }\n+};\n+\n+}\ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 59d778d1a67e..c3601ee9d905 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -64,8 +64,6 @@\n #include <Interpreters/InterserverCredentials.h>\n #include <Interpreters/Cluster.h>\n #include <Interpreters/InterserverIOHandler.h>\n-#include <Interpreters/SystemLog.h>\n-#include <Interpreters/SessionLog.h>\n #include <Interpreters/Context.h>\n #include <Interpreters/DDLWorker.h>\n #include <Interpreters/DDLTask.h>\n@@ -3421,6 +3419,16 @@ std::shared_ptr<AsynchronousInsertLog> Context::getAsynchronousInsertLog() const\n     return shared->system_logs->asynchronous_insert_log;\n }\n \n+std::shared_ptr<BackupLog> Context::getBackupLog() const\n+{\n+    auto lock = getLock();\n+\n+    if (!shared->system_logs)\n+        return {};\n+\n+    return shared->system_logs->backup_log;\n+}\n+\n std::vector<ISystemLog *> Context::getSystemLogs() const\n {\n     auto lock = getLock();\ndiff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h\nindex 88c5b9e71dce..0eeea5b4fbdb 100644\n--- a/src/Interpreters/Context.h\n+++ b/src/Interpreters/Context.h\n@@ -104,6 +104,7 @@ class ProcessorsProfileLog;\n class FilesystemCacheLog;\n class FilesystemReadPrefetchesLog;\n class AsynchronousInsertLog;\n+class BackupLog;\n class IAsynchronousReader;\n struct MergeTreeSettings;\n struct InitialAllRangesAnnouncement;\n@@ -1015,6 +1016,7 @@ class Context: public std::enable_shared_from_this<Context>\n     std::shared_ptr<FilesystemCacheLog> getFilesystemCacheLog() const;\n     std::shared_ptr<FilesystemReadPrefetchesLog> getFilesystemReadPrefetchesLog() const;\n     std::shared_ptr<AsynchronousInsertLog> getAsynchronousInsertLog() const;\n+    std::shared_ptr<BackupLog> getBackupLog() const;\n \n     std::vector<ISystemLog *> getSystemLogs() const;\n \ndiff --git a/src/Interpreters/InterpreterBackupQuery.cpp b/src/Interpreters/InterpreterBackupQuery.cpp\nindex e238286a33cf..be5fcedce271 100644\n--- a/src/Interpreters/InterpreterBackupQuery.cpp\n+++ b/src/Interpreters/InterpreterBackupQuery.cpp\n@@ -17,7 +17,7 @@ namespace DB\n \n namespace\n {\n-    Block getResultRow(const BackupsWorker::Info & info)\n+    Block getResultRow(const BackupOperationInfo & info)\n     {\n         auto column_id = ColumnString::create();\n         auto column_status = ColumnInt8::create();\ndiff --git a/src/Interpreters/InterpreterSystemQuery.cpp b/src/Interpreters/InterpreterSystemQuery.cpp\nindex 20c0a2896372..12db14973bb6 100644\n--- a/src/Interpreters/InterpreterSystemQuery.cpp\n+++ b/src/Interpreters/InterpreterSystemQuery.cpp\n@@ -36,6 +36,7 @@\n #include <Interpreters/TransactionsInfoLog.h>\n #include <Interpreters/ProcessorsProfileLog.h>\n #include <Interpreters/AsynchronousInsertLog.h>\n+#include <Interpreters/BackupLog.h>\n #include <Interpreters/JIT/CompiledExpressionCache.h>\n #include <Interpreters/TransactionLog.h>\n #include <Interpreters/AsynchronousInsertQueue.h>\ndiff --git a/src/Interpreters/SystemLog.cpp b/src/Interpreters/SystemLog.cpp\nindex 23a5a96584ca..07ef6c33d29b 100644\n--- a/src/Interpreters/SystemLog.cpp\n+++ b/src/Interpreters/SystemLog.cpp\n@@ -20,6 +20,7 @@\n #include <Interpreters/FilesystemCacheLog.h>\n #include <Interpreters/FilesystemReadPrefetchesLog.h>\n #include <Interpreters/ZooKeeperLog.h>\n+#include <Interpreters/BackupLog.h>\n #include <Parsers/ASTCreateQuery.h>\n #include <Parsers/ASTFunction.h>\n #include <Parsers/ASTIndexDeclaration.h>\n@@ -287,6 +288,7 @@ SystemLogs::SystemLogs(ContextPtr global_context, const Poco::Util::AbstractConf\n         global_context, \"system\", \"transactions_info_log\", config, \"transactions_info_log\");\n     processors_profile_log = createSystemLog<ProcessorsProfileLog>(global_context, \"system\", \"processors_profile_log\", config, \"processors_profile_log\");\n     asynchronous_insert_log = createSystemLog<AsynchronousInsertLog>(global_context, \"system\", \"asynchronous_insert_log\", config, \"asynchronous_insert_log\");\n+    backup_log = createSystemLog<BackupLog>(global_context, \"system\", \"backup_log\", config, \"backup_log\");\n \n     if (query_log)\n         logs.emplace_back(query_log.get());\n@@ -325,6 +327,8 @@ SystemLogs::SystemLogs(ContextPtr global_context, const Poco::Util::AbstractConf\n         logs.emplace_back(filesystem_read_prefetches_log.get());\n     if (asynchronous_insert_log)\n         logs.emplace_back(asynchronous_insert_log.get());\n+    if (backup_log)\n+        logs.emplace_back(backup_log.get());\n \n     try\n     {\ndiff --git a/src/Interpreters/SystemLog.h b/src/Interpreters/SystemLog.h\nindex cf287ad77754..ec04e1f4162b 100644\n--- a/src/Interpreters/SystemLog.h\n+++ b/src/Interpreters/SystemLog.h\n@@ -49,6 +49,7 @@ class ProcessorsProfileLog;\n class FilesystemCacheLog;\n class FilesystemReadPrefetchesLog;\n class AsynchronousInsertLog;\n+class BackupLog;\n \n /// System logs should be destroyed in destructor of the last Context and before tables,\n ///  because SystemLog destruction makes insert query while flushing data into underlying tables\n@@ -84,6 +85,8 @@ struct SystemLogs\n     /// Used to log processors profiling\n     std::shared_ptr<ProcessorsProfileLog> processors_profile_log;\n     std::shared_ptr<AsynchronousInsertLog> asynchronous_insert_log;\n+    /// Backup and restore events\n+    std::shared_ptr<BackupLog> backup_log;\n \n     std::vector<ISystemLog *> logs;\n };\ndiff --git a/src/Storages/MergeTree/IDataPartStorage.h b/src/Storages/MergeTree/IDataPartStorage.h\nindex 2dd3805d2fcb..c76b17f33702 100644\n--- a/src/Storages/MergeTree/IDataPartStorage.h\n+++ b/src/Storages/MergeTree/IDataPartStorage.h\n@@ -55,8 +55,6 @@ struct MergeTreeDataPartChecksums;\n class IReservation;\n using ReservationPtr = std::unique_ptr<IReservation>;\n \n-class IStoragePolicy;\n-\n class IDisk;\n using DiskPtr = std::shared_ptr<IDisk>;\n \ndiff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex eb154d0d9430..e011565edc17 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -1,7 +1,6 @@\n #include <boost/range/algorithm_ext/erase.hpp>\n #include <Interpreters/InterpreterSelectQuery.h>\n #include <Interpreters/InterpreterInsertQuery.h>\n-#include <Interpreters/InterpreterAlterQuery.h>\n #include <Interpreters/castColumn.h>\n #include <Interpreters/evaluateConstantExpression.h>\n #include <Interpreters/addMissingDefaults.h>\ndiff --git a/src/Storages/StorageMergeTree.cpp b/src/Storages/StorageMergeTree.cpp\nindex f3d8f8773e2e..4f27cbc76ed8 100644\n--- a/src/Storages/StorageMergeTree.cpp\n+++ b/src/Storages/StorageMergeTree.cpp\n@@ -13,7 +13,6 @@\n #include <Common/ProfileEventsScope.h>\n #include <Common/typeid_cast.h>\n #include <Common/ThreadPool.h>\n-#include <Interpreters/InterpreterAlterQuery.h>\n #include <Interpreters/PartLog.h>\n #include <Interpreters/MutationsInterpreter.h>\n #include <Interpreters/Context.h>\ndiff --git a/src/Storages/StorageNull.cpp b/src/Storages/StorageNull.cpp\nindex 0ced128c8ef5..5e4fde99306b 100644\n--- a/src/Storages/StorageNull.cpp\n+++ b/src/Storages/StorageNull.cpp\n@@ -2,7 +2,6 @@\n #include <Storages/StorageFactory.h>\n #include <Storages/AlterCommands.h>\n \n-#include <Interpreters/InterpreterAlterQuery.h>\n #include <Interpreters/Context.h>\n #include <Databases/IDatabase.h>\n \ndiff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp\nindex 5e4a8add5e52..cf5314e42b7c 100644\n--- a/src/Storages/StorageReplicatedMergeTree.cpp\n+++ b/src/Storages/StorageReplicatedMergeTree.cpp\n@@ -87,7 +87,6 @@\n #include <Interpreters/ClusterProxy/executeQuery.h>\n #include <Interpreters/Context.h>\n #include <Interpreters/DDLTask.h>\n-#include <Interpreters/InterpreterAlterQuery.h>\n #include <Interpreters/InterpreterSelectQuery.h>\n #include <Interpreters/InterpreterSelectQueryAnalyzer.h>\n #include <Interpreters/InterserverCredentials.h>\ndiff --git a/src/Storages/System/StorageSystemBackups.cpp b/src/Storages/System/StorageSystemBackups.cpp\nindex 8e968f8f7c03..6fac9b048856 100644\n--- a/src/Storages/System/StorageSystemBackups.cpp\n+++ b/src/Storages/System/StorageSystemBackups.cpp\n@@ -51,7 +51,7 @@ void StorageSystemBackups::fillData(MutableColumns & res_columns, ContextPtr con\n     auto & column_num_read_files = assert_cast<ColumnUInt64 &>(*res_columns[column_index++]);\n     auto & column_num_read_bytes = assert_cast<ColumnUInt64 &>(*res_columns[column_index++]);\n \n-    auto add_row = [&](const BackupsWorker::Info & info)\n+    auto add_row = [&](const BackupOperationInfo & info)\n     {\n         column_id.insertData(info.id.data(), info.id.size());\n         column_name.insertData(info.name.data(), info.name.size());\n",
  "test_patch": "diff --git a/tests/integration/test_backup_log/__init__.py b/tests/integration/test_backup_log/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_backup_log/configs/config.d/backups.xml b/tests/integration/test_backup_log/configs/config.d/backups.xml\nnew file mode 100644\nindex 000000000000..5e2e3ee9d716\n--- /dev/null\n+++ b/tests/integration/test_backup_log/configs/config.d/backups.xml\n@@ -0,0 +1,5 @@\n+<clickhouse>\n+    <backups>\n+        <allowed_path>/backups</allowed_path>\n+    </backups>\n+</clickhouse>\ndiff --git a/tests/integration/test_backup_log/configs/config.xml b/tests/integration/test_backup_log/configs/config.xml\nnew file mode 100644\nindex 000000000000..e2c81f4068e3\n--- /dev/null\n+++ b/tests/integration/test_backup_log/configs/config.xml\n@@ -0,0 +1,8 @@\n+<clickhouse>\n+    <backup_log>\n+        <database>system</database>\n+        <table>backup_log</table>\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <flush_interval_milliseconds>0</flush_interval_milliseconds>\n+    </backup_log>\n+</clickhouse>\ndiff --git a/tests/integration/test_backup_log/test.py b/tests/integration/test_backup_log/test.py\nnew file mode 100644\nindex 000000000000..a1c09d8e0913\n--- /dev/null\n+++ b/tests/integration/test_backup_log/test.py\n@@ -0,0 +1,58 @@\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+from helpers.test_tools import TSV\n+\n+\n+cluster = ClickHouseCluster(__file__)\n+\n+instance = cluster.add_instance(\n+    \"instance\",\n+    main_configs=[\"configs/config.xml\", \"configs/config.d/backups.xml\"],\n+    stay_alive=True,\n+)\n+\n+\n+@pytest.fixture(scope=\"module\", autouse=True)\n+def start_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def backup_table(backup_name):\n+    instance.query(\"CREATE DATABASE test\")\n+    instance.query(\"CREATE TABLE test.table(x UInt32) ENGINE=MergeTree ORDER BY x\")\n+    instance.query(\"INSERT INTO test.table SELECT number FROM numbers(10)\")\n+    return instance.query(f\"BACKUP TABLE test.table TO {backup_name}\").split(\"\\t\")[0]\n+\n+\n+def restore_table(backup_name):\n+    return instance.query(f\"RESTORE TABLE test.table FROM {backup_name}\").split(\"\\t\")[0]\n+\n+\n+def test_backup_log():\n+    backup_name = \"File('/backups/test_backup/')\"\n+    assert instance.query(\"SELECT * FROM system.tables WHERE name = 'backup_log'\") == \"\"\n+\n+    backup_id = backup_table(backup_name)\n+    assert instance.query(\n+        f\"SELECT status, error FROM system.backup_log WHERE id='{backup_id}' ORDER BY event_date, event_time_microseconds\"\n+    ) == TSV([[\"CREATING_BACKUP\", \"\"], [\"BACKUP_CREATED\", \"\"]])\n+\n+    instance.query(\"DROP TABLE test.table SYNC\")\n+\n+    restore_id = restore_table(backup_name)\n+    assert instance.query(\n+        f\"SELECT status, error FROM system.backup_log WHERE id='{restore_id}' ORDER BY event_date, event_time_microseconds\"\n+    ) == TSV([[\"RESTORING\", \"\"], [\"RESTORED\", \"\"]])\n+\n+    instance.restart_clickhouse()\n+\n+    assert instance.query(\n+        f\"SELECT status, error FROM system.backup_log WHERE id='{backup_id}' ORDER BY event_date, event_time_microseconds\"\n+    ) == TSV([[\"CREATING_BACKUP\", \"\"], [\"BACKUP_CREATED\", \"\"]])\n+    assert instance.query(\n+        f\"SELECT status, error FROM system.backup_log WHERE id='{restore_id}' ORDER BY event_date, event_time_microseconds\"\n+    ) == TSV([[\"RESTORING\", \"\"], [\"RESTORED\", \"\"]])\ndiff --git a/tests/integration/test_backup_restore_new/test.py b/tests/integration/test_backup_restore_new/test.py\nindex a6ba0c8918fb..4a26a470aab8 100644\n--- a/tests/integration/test_backup_restore_new/test.py\n+++ b/tests/integration/test_backup_restore_new/test.py\n@@ -1236,6 +1236,7 @@ def test_backup_all(exclude_system_log_tables):\n             \"transactions_info_log\",\n             \"processors_profile_log\",\n             \"asynchronous_insert_log\",\n+            \"backup_log\",\n         ]\n         exclude_from_backup += [\"system.\" + table_name for table_name in log_tables]\n \n",
  "problem_statement": "Add a new backup_log table\n**Use case**\r\n\r\n@e-mars in [this](https://github.com/ClickHouse/ClickHouse/issues/43995) issue put forward an idea of `system.backups` table persistence (and I'm already working on its implementation).\r\n\r\n@mlex in the same issue suggested that we might as well add a new `backup_log` table as an _alternative_ to making `system.backups` table persistent.\r\n\r\n@UnamedRus please also take a look at this issue.\r\n\r\n**Describe the solution you'd like**\r\n\r\nMy suggestion is to introduce `backup_log` table _along with_ the persistent `system.backups` table (which is yet to be implemented).\r\n\r\nThis table would apparently be one one of the \"system logs\" along with `query_log`, `session_log` etc. Those system logs can be conveniently turned on and off in the config file, their engine (e.g. `MergeTree`) and other properties are also configurable and the implementation is next to trivial. Moreover, @chhetripradeep even suggested an adequate solution (yet without a pull request).\r\n\r\nSo, if a new `backup_log` table would come in handy, I'm ready to implement it and create a pull request if necessary.\r\n\r\nKindly looking forward to any feedback from the community.\n",
  "hints_text": "Possible config section:\r\n```xml\r\n<backup_log>\r\n  <database>system</database>\r\n  <table>backup_log</table>\r\n  <partition_by>toYYYYMM(event_date)</partition_by>\r\n  <flush_interval_milliseconds>0</flush_interval_milliseconds>\r\n</backup_log>\r\n```\r\nPossible scenario:\r\n```sql\r\nBACKUP TABLE t1 TO Disk('bak', 't1.zip')\r\nDROP TABLE t1 SYNC\r\nRESTORE TABLE t1 FROM Disk('bak', 't1.zip')\r\nSELECT * FROM system.backup_log ORDER BY event_time\r\n```\r\nPossible table contents:\r\n```\r\n\u250c\u2500event_date\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500event_time\u2500\u252c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500error\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500start_time\u2500\u252c\u2500num_files\u2500\u252c\u2500total_size\u2500\u252c\u2500num_entries\u2500\u252c\u2500uncompressed_size\u2500\u252c\u2500compressed_size\u2500\u252c\u2500files_read\u2500\u252c\u2500bytes_read\u2500\u2510\r\n\u2502 2023-08-09 \u2502 2023-08-09 13:27:05 \u2502 9f005a03-187f-4000-802d-c1d979e1d64d \u2502 Disk('bak', 't1.zip') \u2502 CREATING_BACKUP \u2502       \u2502 2023-08-09 13:27:05 \u2502         0 \u2502          0 \u2502           0 \u2502                 0 \u2502               0 \u2502          0 \u2502          0 \u2502\r\n\u2502 2023-08-09 \u2502 2023-08-09 13:30:48 \u2502 9f005a03-187f-4000-802d-c1d979e1d64d \u2502 Disk('bak', 't1.zip') \u2502 BACKUP_CREATED  \u2502       \u2502 2023-08-09 13:27:05 \u2502        57 \u2502 4290370807 \u2502          48 \u2502        4290379062 \u2502      3525097557 \u2502          0 \u2502          0 \u2502\r\n\u2502 2023-08-09 \u2502 2023-08-09 13:32:13 \u2502 01f8ab0e-be98-4f4c-b3a3-17897eab2e36 \u2502 Disk('bak', 't1.zip') \u2502 RESTORING       \u2502       \u2502 2023-08-09 13:32:13 \u2502         0 \u2502          0 \u2502           0 \u2502                 0 \u2502               0 \u2502          0 \u2502          0 \u2502\r\n\u2502 2023-08-09 \u2502 2023-08-09 13:32:23 \u2502 01f8ab0e-be98-4f4c-b3a3-17897eab2e36 \u2502 Disk('bak', 't1.zip') \u2502 RESTORED        \u2502       \u2502 2023-08-09 13:32:13 \u2502        57 \u2502 4290370807 \u2502          48 \u2502        4290379062 \u2502      4290379062 \u2502         57 \u2502 4290370807 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nSo, we could log backup/restore operations' start and ending (both success and failure alike).\r\nWe may also want to log some additional intermediate steps to more thoroughly reflect the progress of operations in the future.\r\nAt the same time, persistent `system.backups` table will contain registry of all backup/restore operations, both successful and failed - one record per operation.\nAll good, and the structure looks alright. Let's go ahead!\n@sirvickr Thank you for doing it.  \n\nThe way I see it is that we need the system.backups table to give you information on the current backup like the system.processes table so it doesn't need to be persisted. The system.backup_log table will have the persisted information similar to the query_log. We will also need a new documentation page for this table. ",
  "created_at": "2023-08-21T13:07:17Z",
  "modified_files": [
    "docs/en/operations/backup.md",
    "docs/en/operations/server-configuration-parameters/settings.md",
    "b/docs/en/operations/system-tables/backup_log.md",
    "docs/en/operations/system-tables/index.md",
    "docs/ru/operations/server-configuration-parameters/settings.md",
    "b/docs/ru/operations/system-tables/backup_log.md",
    "docs/ru/operations/system-tables/index.md",
    "programs/server/config.xml",
    "b/src/Backups/BackupOperationInfo.h",
    "src/Backups/BackupsWorker.cpp",
    "src/Backups/BackupsWorker.h",
    "src/Common/SystemLogBase.cpp",
    "src/Common/SystemLogBase.h",
    "b/src/Interpreters/BackupLog.cpp",
    "b/src/Interpreters/BackupLog.h",
    "src/Interpreters/Context.cpp",
    "src/Interpreters/Context.h",
    "src/Interpreters/InterpreterBackupQuery.cpp",
    "src/Interpreters/InterpreterSystemQuery.cpp",
    "src/Interpreters/SystemLog.cpp",
    "src/Interpreters/SystemLog.h",
    "src/Storages/MergeTree/IDataPartStorage.h",
    "src/Storages/StorageBuffer.cpp",
    "src/Storages/StorageMergeTree.cpp",
    "src/Storages/StorageNull.cpp",
    "src/Storages/StorageReplicatedMergeTree.cpp",
    "src/Storages/System/StorageSystemBackups.cpp"
  ],
  "modified_test_files": [
    "b/tests/integration/test_backup_log/configs/config.d/backups.xml",
    "b/tests/integration/test_backup_log/configs/config.xml",
    "b/tests/integration/test_backup_log/test.py",
    "tests/integration/test_backup_restore_new/test.py"
  ]
}