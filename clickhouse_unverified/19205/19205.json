{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19205,
  "instance_id": "ClickHouse__ClickHouse-19205",
  "issue_numbers": [
    "18991"
  ],
  "base_commit": "d2366b5c6c16f6c0b478b8332010968b09b12bf3",
  "patch": "diff --git a/src/Core/MySQL/MySQLGtid.cpp b/src/Core/MySQL/MySQLGtid.cpp\nindex aac3e01369a2..13dc6e0fd699 100644\n--- a/src/Core/MySQL/MySQLGtid.cpp\n+++ b/src/Core/MySQL/MySQLGtid.cpp\n@@ -85,8 +85,8 @@ void GTIDSets::update(const GTID & other)\n                         ErrorCodes::LOGICAL_ERROR);\n                 }\n \n-                /// Try to shirnk Sequence interval.\n-                GTIDSet::tryShirnk(set, i, current);\n+                /// Try to shrink Sequence interval.\n+                GTIDSet::tryShrink(set, i, current);\n \n                 /// Sequence, extend the interval.\n                 if (other.seq_no == current.end)\n@@ -119,7 +119,7 @@ void GTIDSets::update(const GTID & other)\n     sets.emplace_back(set);\n }\n \n-void GTIDSet::tryShirnk(GTIDSet & set, unsigned int i, GTIDSet::Interval & current)\n+void GTIDSet::tryShrink(GTIDSet & set, unsigned int i, GTIDSet::Interval & current)\n {\n     if (i != set.intervals.size() -1)\n     {\ndiff --git a/src/Core/MySQL/MySQLGtid.h b/src/Core/MySQL/MySQLGtid.h\nindex 27aabdafc117..c8a571d25697 100644\n--- a/src/Core/MySQL/MySQLGtid.h\n+++ b/src/Core/MySQL/MySQLGtid.h\n@@ -27,7 +27,7 @@ class GTIDSet\n \n     void tryMerge(size_t i);\n \n-    static void tryShirnk(GTIDSet & set, unsigned int i, Interval & current);\n+    static void tryShrink(GTIDSet & set, unsigned int i, Interval & current);\n };\n \n class GTIDSets\ndiff --git a/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp b/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp\nindex 1da033fa4b38..5b7ba99baf9a 100644\n--- a/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp\n+++ b/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp\n@@ -95,19 +95,22 @@ static void checkMySQLVariables(const mysqlxx::Pool::Entry & connection)\n          \"(Variable_name = 'log_bin' AND upper(Value) = 'ON') \"\n          \"OR (Variable_name = 'binlog_format' AND upper(Value) = 'ROW') \"\n          \"OR (Variable_name = 'binlog_row_image' AND upper(Value) = 'FULL') \"\n-         \"OR (Variable_name = 'default_authentication_plugin' AND upper(Value) = 'MYSQL_NATIVE_PASSWORD');\";\n+         \"OR (Variable_name = 'default_authentication_plugin' AND upper(Value) = 'MYSQL_NATIVE_PASSWORD') \"\n+         \"OR (Variable_name = 'log_bin_use_v1_row_events' AND upper(Value) = 'OFF');\";\n \n     MySQLBlockInputStream variables_input(connection, check_query, variables_header, DEFAULT_BLOCK_SIZE, false, true);\n \n     Block variables_block = variables_input.read();\n-    if (!variables_block || variables_block.rows() != 4)\n+    if (!variables_block || variables_block.rows() != 5)\n     {\n         std::unordered_map<String, String> variables_error_message{\n             {\"log_bin\", \"log_bin = 'ON'\"},\n             {\"binlog_format\", \"binlog_format='ROW'\"},\n             {\"binlog_row_image\", \"binlog_row_image='FULL'\"},\n-            {\"default_authentication_plugin\", \"default_authentication_plugin='mysql_native_password'\"}\n+            {\"default_authentication_plugin\", \"default_authentication_plugin='mysql_native_password'\"},\n+            {\"log_bin_use_v1_row_events\", \"log_bin_use_v1_row_events='OFF'\"}\n         };\n+\n         ColumnPtr variable_name_column = variables_block.getByName(\"Variable_name\").column;\n \n         for (size_t index = 0; index < variables_block.rows(); ++index)\n",
  "test_patch": "diff --git a/src/Core/tests/mysql_protocol.cpp b/src/Core/tests/mysql_protocol.cpp\nindex 98555ddcfe00..1b81d856c9ac 100644\n--- a/src/Core/tests/mysql_protocol.cpp\n+++ b/src/Core/tests/mysql_protocol.cpp\n@@ -262,12 +262,12 @@ int main(int argc, char ** argv)\n              \"20662d71-9d91-11ea-bbc2-0242ac110003:9\",\n              \"10662d71-9d91-11ea-bbc2-0242ac110003:6-7,20662d71-9d91-11ea-bbc2-0242ac110003:9\"},\n \n-            {\"shirnk-sequence\",\n+            {\"shrink-sequence\",\n               \"10662d71-9d91-11ea-bbc2-0242ac110003:1-3:4-5:7\",\n              \"10662d71-9d91-11ea-bbc2-0242ac110003:6\",\n              \"10662d71-9d91-11ea-bbc2-0242ac110003:1-7\"},\n \n-            {\"shirnk-sequence\",\n+            {\"shrink-sequence\",\n              \"10662d71-9d91-11ea-bbc2-0242ac110003:1-3:4-5:10\",\n              \"10662d71-9d91-11ea-bbc2-0242ac110003:8\",\n              \"10662d71-9d91-11ea-bbc2-0242ac110003:1-5:8:10\"\n",
  "problem_statement": "MaterializeMySQL will get exeception with MySQL log_bin_use_v1_row_events  'ON'\n**Describe the bug**\r\nwhen I set  log_bin_use_v1_row_events =1 in MySQL side and start replicate data to ClickHouse\uff0cI will get the following execption\uff1a\r\n\r\n0. DB::ReadBuffer::throwReadAfterEOF() @ 0x7d3f9ed in /usr/bin/clickhouse\r\n1. ? @ 0xdb3d0a3 in /usr/bin/clickhouse\r\n2. DB::MySQLReplication::MySQLFlavor::readPayloadImpl(DB::ReadBuffer&) @ 0xdb41983 in /usr/bin/clickhouse\r\n3. DB::MySQLProtocol::IMySQLReadPacket::readPayload(DB::ReadBuffer&, unsigned char&) @ 0xdb29bb2 in /usr/bin/clickhouse\r\n4. DB::MySQLProtocol::PacketEndpoint::tryReceivePacket(DB::MySQLProtocol::IMySQLReadPacket&, unsigned long) @ 0xdb2a6a3 in /usr/bin/clickhouse\r\n5. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xdb544b6 in /usr/bin/clickhouse\r\n6. ? @ 0xdb72e2a in /usr/bin/clickhouse\r\n7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7d25aad in /usr/bin/clickhouse\r\n8. ? @ 0x7d295d3 in /usr/bin/clickhouse\r\n9. start_thread @ 0x7e65 in /usr/lib64/libpthread-2.17.so\r\n10. __clone @ 0xfe88d in /usr/lib64/libc-2.17.so\r\n (version 20.12.4.5 (official build))\r\n2021.01.12 17:52:48.630695 [ 13966 ] {abb6f32b-079a-493a-8bf3-30c970a46a22} <Error> executeQuery: Code: 32, e.displayText() = DB::Exception: Attempt to read after eof (version 20.12.4.5 (official build)) (from [::ffff:172.21.128.5]:37384) (in query: select count(*) from yuan;), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::ReadBuffer::throwReadAfterEOF() @ 0x7d3f9ed in /usr/bin/clickhouse\r\n1. ? @ 0xdb3d0a3 in /usr/bin/clickhouse\r\n2. DB::MySQLReplication::MySQLFlavor::readPayloadImpl(DB::ReadBuffer&) @ 0xdb41983 in /usr/bin/clickhouse\r\n3. DB::MySQLProtocol::IMySQLReadPacket::readPayload(DB::ReadBuffer&, unsigned char&) @ 0xdb29bb2 in /usr/bin/clickhouse\r\n4. DB::MySQLProtocol::PacketEndpoint::tryReceivePacket(DB::MySQLProtocol::IMySQLReadPacket&, unsigned long) @ 0xdb2a6a3 in /usr/bin/clickhouse\r\n5. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xdb544b6 in /usr/bin/clickhouse\r\n6. ? @ 0xdb72e2a in /usr/bin/clickhouse\r\n7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7d25aad in /usr/bin/clickhouse\r\n8. ? @ 0x7d295d3 in /usr/bin/clickhouse\r\n9. start_thread @ 0x7e65 in /usr/lib64/libpthread-2.17.so\r\n10. __clone @ 0xfe88d in /usr/lib64/libc-2.17.so\r\n\r\n2021.01.12 17:52:48.630860 [ 13966 ] {abb6f32b-079a-493a-8bf3-30c970a46a22} <Error> TCPHandler: Code: 32, e.displayText() = DB::Exception: Attempt to read after eof, Stack trace:\r\n\r\n0. DB::ReadBuffer::throwReadAfterEOF() @ 0x7d3f9ed in /usr/bin/clickhouse\r\n1. ? @ 0xdb3d0a3 in /usr/bin/clickhouse\r\n2. DB::MySQLReplication::MySQLFlavor::readPayloadImpl(DB::ReadBuffer&) @ 0xdb41983 in /usr/bin/clickhouse\r\n3. DB::MySQLProtocol::IMySQLReadPacket::readPayload(DB::ReadBuffer&, unsigned char&) @ 0xdb29bb2 in /usr/bin/clickhouse\r\n4. DB::MySQLProtocol::PacketEndpoint::tryReceivePacket(DB::MySQLProtocol::IMySQLReadPacket&, unsigned long) @ 0xdb2a6a3 in /usr/bin/clickhouse\r\n5. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xdb544b6 in /usr/bin/clickhouse\r\n6. ? @ 0xdb72e2a in /usr/bin/clickhouse\r\n7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7d25aad in /usr/bin/clickhouse\r\n8. ? @ 0x7d295d3 in /usr/bin/clickhouse\r\n9. start_thread @ 0x7e65 in /usr/lib64/libpthread-2.17.so\r\n10. __clone @ 0xfe88d in /usr/lib64/libc-2.17.so\r\n\r\n\r\n\r\n**How to reproduce**\r\njust setting log_bin_use_v1_row_events  in my.cnf\r\n\r\n* Which ClickHouse server version to use\r\n20.12.4.5\r\n\r\n**Additional context**\r\nMySQL 5.7.31 and  MySQL8.0.21 both can reprod the bug.\r\n\n",
  "hints_text": "@BohuTANG  Could you take a look when you are free?\nEnabling log_bin_use_v1_row_events=1 causes mysqld to write the binary log using Version 1 logging events.\r\nBTW, Why enable this setting?\r\n\nMaterializeMySQL EVENT_VERSION_V4 required.\r\nhttps://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQL/MySQLReplication.cpp#L54\r\n\r\n\n> Enabling log_bin_use_v1_row_events=1 causes mysqld to write the binary log using Version 1 logging events.\r\n> BTW, Why enable this setting?\r\n\r\nSome RDS enables this option. I think they want to compatible with old mysql versions.\r\nOk. I think this not a problem.  Just to verify MytarializeMySQL can  support v1.\r\nThks.\n@BohuTANG  what's the difference of binlog version and binlog row event version? MySQLReplication.cpp#L54 means binlog version. But log_bin_use_v1_row_events  controls the bin log row  event version. It may be a bug.\r\n\r\nref to https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_log_bin_use_v1_row_events\r\n\r\nWhether Version 2 binary logging is in use. If this variable is 0 (disabled, the default), Version 2 binary log events are in use. If this variable is 1 (enabled), the server writes the binary log using Version 1 logging events (the only version of binary log events used in previous releases), and thus produces a binary log that can be read by older replicas.\r\n\r\nMySQL 5.7 uses Version 2 binary log row events by default. However, Version 2 events cannot be read by MySQL Server releases prior to MySQL 5.6.6. Enabling log_bin_use_v1_row_events causes mysqld to write the binary log using Version 1 logging events.\r\n\r\nThis variable is read-only at runtime. To switch between Version 1 and Version 2 binary event binary logging, it is necessary to set log_bin_use_v1_row_events at server startup.\r\n\r\n\r\nand https://dev.mysql.com/doc/internals/en/binlog-version.html\r\n\r\n\r\nBinlog version | MySQL Version\r\n-- | --\r\n1 | MySQL 3.23 - < 4.0.0\r\n2 | MySQL 4.0.0 - 4.0.1\r\n3 | MySQL 4.0.2 - < 5.0.0\r\n4 | MySQL 5.0.0+\r\n\r\nThey are two differents things.\r\n\r\nFYI\r\n\nThanks for the information, will have a look.",
  "created_at": "2021-01-17T09:53:10Z"
}