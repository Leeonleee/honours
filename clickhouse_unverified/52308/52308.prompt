You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
ORDER BY projection is used when main table have better selectivity
**Describe the issue**
ORDER BY projection is used when main table have better selectivity

**How to reproduce**
```
CREATE TABLE _local.t0
(
    `c1` Int64,
    `c2` Int64,
    `c3` Int64,
    `c4` Int64,
    PROJECTION p1
    (
        SELECT
            c1,
            c2,
            c4
        ORDER BY
            c2,
            c1
    )
)
ENGINE = MergeTree
ORDER BY (c1, c2)
SETTINGS index_granularity = 8192

INSERT INTO t0 SELECT
                        90+(number % 10),
                        rand(1),
                        rand(2),
                        rand(3)
                    FROM numbers_mt(10000000);



SELECT
    c1,
    c4
FROM t0
WHERE (c1 = 99) AND ((c2 >= 0) AND (c2 <= 100000000))
SETTINGS allow_experimental_projection_optimization = 1
FORMAT `Null`

 Read 237 568 rows, 5.44 MiB in 0.010382 sec., 22882681.56424581 rows/sec., 523.74 MiB/sec.


SELECT
    c1,
    c4
FROM t0
WHERE (c1 = 99) AND ((c2 >= 0) AND (c2 <= 100000000))
SETTINGS allow_experimental_projection_optimization = 0
FORMAT `Null`
```

**Error message and/or stacktrace**


**Additional context**
Related https://github.com/ClickHouse/ClickHouse/issues/49150

The behavior of filtering by primary key is completely different when "allow_experimental_projection_optimization" is enabled or disabled.
There is a large table with many fields and data. I am performing a simple select query of the form "select count() where id=123", with the table ordered by this id. When I execute this query, magically, it reads 1.17 million rows in approximately 0.3 seconds. However, if I add "allow_experimental_projection_optimization = 0", the query takes only 0.004 seconds to read 41k rows. I did not have this problem with the previous installation (which used version 23.1.1, while the current one uses 23.3.1 and involves migrating data via insert from remote to new physical servers). What should I pay attention to? Where could the problems be?

Please see this link for more information:
https://pastila.nl/?01b84b53/2c765ea83820b70a1218b1ded906cb2b

With "explain", we get the following picture:
https://pastila.nl/?04d0928e/804c59170baf4e3d3f9514fb4f3a4b70

Can you please advise on what to do? The performance of my working cluster has suddenly degraded.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
