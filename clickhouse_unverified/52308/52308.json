{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52308,
  "instance_id": "ClickHouse__ClickHouse-52308",
  "issue_numbers": [
    "51173",
    "48823"
  ],
  "base_commit": "32b765a4ba577acbfdb09a8d400dad8d4ef0f48d",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeTree.cpp b/src/Processors/QueryPlan/Optimizations/optimizeTree.cpp\nindex 6cb76d540f7c..b13dda9a8f00 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeTree.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeTree.cpp\n@@ -114,6 +114,10 @@ void optimizeTreeSecondPass(const QueryPlanOptimizationSettings & optimization_s\n \n     while (!stack.empty())\n     {\n+        /// NOTE: optimizePrewhere can modify the stack.\n+        optimizePrewhere(stack, nodes);\n+        optimizePrimaryKeyCondition(stack);\n+\n         {\n             /// NOTE: frame cannot be safely used after stack was modified.\n             auto & frame = stack.back();\n@@ -125,6 +129,7 @@ void optimizeTreeSecondPass(const QueryPlanOptimizationSettings & optimization_s\n                 if (optimization_settings.read_in_order)\n                     optimizeReadInOrder(*frame.node, nodes);\n \n+                /// Projection optimization relies on PK optimization\n                 if (optimization_settings.optimize_projection)\n                     num_applied_projection\n                         += optimizeUseAggregateProjections(*frame.node, nodes, optimization_settings.optimize_use_implicit_projections);\n@@ -148,6 +153,7 @@ void optimizeTreeSecondPass(const QueryPlanOptimizationSettings & optimization_s\n \n         if (optimization_settings.optimize_projection)\n         {\n+            /// Projection optimization relies on PK optimization\n             if (optimizeUseNormalProjections(stack, nodes))\n             {\n                 ++num_applied_projection;\n@@ -164,9 +170,6 @@ void optimizeTreeSecondPass(const QueryPlanOptimizationSettings & optimization_s\n             }\n         }\n \n-        /// NOTE: optimizePrewhere can modify the stack.\n-        optimizePrewhere(stack, nodes);\n-        optimizePrimaryKeyCondition(stack);\n         enableMemoryBoundMerging(*stack.back().node, nodes);\n \n         stack.pop_back();\ndiff --git a/src/Processors/QueryPlan/Optimizations/projectionsCommon.cpp b/src/Processors/QueryPlan/Optimizations/projectionsCommon.cpp\nindex cb76ffa84ba2..7ddda29cad43 100644\n--- a/src/Processors/QueryPlan/Optimizations/projectionsCommon.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/projectionsCommon.cpp\n@@ -131,7 +131,8 @@ bool QueryDAG::buildImpl(QueryPlan::Node & node, ActionsDAG::NodeRawConstPtrs &\n             if (prewhere_info->prewhere_actions)\n             {\n                 appendExpression(prewhere_info->prewhere_actions);\n-                if (const auto * filter_expression = findInOutputs(*dag, prewhere_info->prewhere_column_name, prewhere_info->remove_prewhere_column))\n+                if (const auto * filter_expression\n+                    = findInOutputs(*dag, prewhere_info->prewhere_column_name, prewhere_info->remove_prewhere_column))\n                     filter_nodes.push_back(filter_expression);\n                 else\n                     return false;\ndiff --git a/src/Processors/QueryPlan/Optimizations/projectionsCommon.h b/src/Processors/QueryPlan/Optimizations/projectionsCommon.h\nindex 1e9ab67c8fe2..35daccad1154 100644\n--- a/src/Processors/QueryPlan/Optimizations/projectionsCommon.h\n+++ b/src/Processors/QueryPlan/Optimizations/projectionsCommon.h\n@@ -38,7 +38,6 @@ std::shared_ptr<PartitionIdToMaxBlock> getMaxAddedBlocks(ReadFromMergeTree * rea\n \n /// This is a common DAG which is a merge of DAGs from Filter and Expression steps chain.\n /// Additionally, for all the Filter steps, we collect filter conditions into filter_nodes.\n-/// Flag remove_last_filter_node is set in case if the last step is a Filter step and it should remove filter column.\n struct QueryDAG\n {\n     ActionsDAGPtr dag;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01710_normal_projection_with_query_plan_optimization.reference b/tests/queries/0_stateless/01710_normal_projection_with_query_plan_optimization.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01710_normal_projection_with_query_plan_optimization.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01710_normal_projection_with_query_plan_optimization.sql b/tests/queries/0_stateless/01710_normal_projection_with_query_plan_optimization.sql\nnew file mode 100644\nindex 000000000000..30306ec56379\n--- /dev/null\n+++ b/tests/queries/0_stateless/01710_normal_projection_with_query_plan_optimization.sql\n@@ -0,0 +1,11 @@\n+drop table if exists t;\n+\n+CREATE TABLE t (id UInt64, id2 UInt64, id3 UInt64, PROJECTION t_reverse (SELECT id, id2, id3 ORDER BY id2, id, id3)) ENGINE = MergeTree ORDER BY (id) settings index_granularity = 4;\n+\n+insert into t SELECT number, -number, number FROM numbers(10000);\n+\n+set max_rows_to_read = 4;\n+\n+select count() from t where id = 3;\n+\n+drop table t;\n",
  "problem_statement": "ORDER BY projection is used when main table have better selectivity\n**Describe the issue**\r\nORDER BY projection is used when main table have better selectivity\r\n\r\n**How to reproduce**\r\n```\r\nCREATE TABLE _local.t0\r\n(\r\n    `c1` Int64,\r\n    `c2` Int64,\r\n    `c3` Int64,\r\n    `c4` Int64,\r\n    PROJECTION p1\r\n    (\r\n        SELECT\r\n            c1,\r\n            c2,\r\n            c4\r\n        ORDER BY\r\n            c2,\r\n            c1\r\n    )\r\n)\r\nENGINE = MergeTree\r\nORDER BY (c1, c2)\r\nSETTINGS index_granularity = 8192\r\n\r\nINSERT INTO t0 SELECT\r\n                        90+(number % 10),\r\n                        rand(1),\r\n                        rand(2),\r\n                        rand(3)\r\n                    FROM numbers_mt(10000000);\r\n\r\n\r\n\r\nSELECT\r\n    c1,\r\n    c4\r\nFROM t0\r\nWHERE (c1 = 99) AND ((c2 >= 0) AND (c2 <= 100000000))\r\nSETTINGS allow_experimental_projection_optimization = 1\r\nFORMAT `Null`\r\n\r\n Read 237 568 rows, 5.44 MiB in 0.010382 sec., 22882681.56424581 rows/sec., 523.74 MiB/sec.\r\n\r\n\r\nSELECT\r\n    c1,\r\n    c4\r\nFROM t0\r\nWHERE (c1 = 99) AND ((c2 >= 0) AND (c2 <= 100000000))\r\nSETTINGS allow_experimental_projection_optimization = 0\r\nFORMAT `Null`\r\n```\r\n\r\n**Error message and/or stacktrace**\r\n\r\n\r\n**Additional context**\r\nRelated https://github.com/ClickHouse/ClickHouse/issues/49150\r\n\nThe behavior of filtering by primary key is completely different when \"allow_experimental_projection_optimization\" is enabled or disabled.\nThere is a large table with many fields and data. I am performing a simple select query of the form \"select count() where id=123\", with the table ordered by this id. When I execute this query, magically, it reads 1.17 million rows in approximately 0.3 seconds. However, if I add \"allow_experimental_projection_optimization = 0\", the query takes only 0.004 seconds to read 41k rows. I did not have this problem with the previous installation (which used version 23.1.1, while the current one uses 23.3.1 and involves migrating data via insert from remote to new physical servers). What should I pay attention to? Where could the problems be?\r\n\r\nPlease see this link for more information:\r\nhttps://pastila.nl/?01b84b53/2c765ea83820b70a1218b1ded906cb2b\r\n\r\nWith \"explain\", we get the following picture:\r\nhttps://pastila.nl/?04d0928e/804c59170baf4e3d3f9514fb4f3a4b70\r\n\r\nCan you please advise on what to do? The performance of my working cluster has suddenly degraded.\n",
  "hints_text": "```\r\nINSERT INTO t0 SELECT\r\n    90 + (number % 10),\r\n    rand(1),\r\n    rand(2),\r\n    rand(3)\r\nFROM numbers_mt(1000000000)\r\n\r\nQuery id: c4097e8e-1c4b-40ce-9e8a-61b7ceb3e619\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 160.631 sec. Processed 2.00 billion rows, 40.00 GB (12.45 million rows/s., 249.02 MB/s.)\r\n\r\nSELECT\r\n    c1,\r\n    c4\r\nFROM t0\r\nWHERE (c1 IN (98, 99)) AND ((c2 >= 0) AND (c2 <= 1000000000))\r\nSETTINGS allow_experimental_projection_optimization = 0\r\nFORMAT `Null`\r\n\r\nQuery id: 8864da18-e38b-4fed-ba33-e6bbcb44704c\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.087 sec. Processed 47.33 million rows, 1.14 GB (543.63 million rows/s., 13.05 GB/s.)\r\n\r\nSELECT\r\n    c1,\r\n    c4\r\nFROM t0\r\nWHERE (c1 IN (98, 99)) AND ((c2 >= 0) AND (c2 <= 1000000000))\r\nSETTINGS allow_experimental_projection_optimization = 1\r\nFORMAT `Null`\r\n\r\nQuery id: ca597ae9-1c73-4ee7-b83b-b17b4e390ff8\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.284 sec. Processed 202.10 million rows, 4.85 GB (712.66 million rows/s., 17.10 GB/s.)\r\n```\nquery_plan_optimize_projection ?\nthe same? #48823\nArtem Pershin \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u043b \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u043a\u0430\u0445 https://fiddle.clickhouse.com/a5d2c546-3bec-45ff-bec7-03bc896b770e\nwa query_plan_optimize_projection=0;\r\n\n* https://github.com/ClickHouse/ClickHouse/pull/46537  @KochetovNicolai \r\n\r\n",
  "created_at": "2023-07-19T08:09:31Z"
}