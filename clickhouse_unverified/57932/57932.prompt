You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
ReplacingMergeTree with `is_deleted` column and `clean_deleted_rows=Always` works incorrectly
```
dell9510 :) CREATE TABLE test (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplicatedReplacingMergeTree('/test/jhbsavk', '1', version, is_deleted) Order by (uid) settings clean_deleted_rows='Always';

dell9510 :) CREATE TABLE test2 (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplicatedReplacingMergeTree('/test/jhbsavk', '2', version, is_deleted) Order by (uid) settings clean_deleted_rows='Always';

dell9510 :) system stop replicated sends test2

dell9510 :) insert into test values (1, 1, 0)
dell9510 :) insert into test2 values (2, 1, 0)
dell9510 :) insert into test values (1, 2, 0)
dell9510 :) insert into test values (1, 3, 1)

dell9510 :) select *, _part from test

┌─uid─┬─version─┬─is_deleted─┬─_part─────┐
│ 1   │       2 │          0 │ all_2_2_0 │
└─────┴─────────┴────────────┴───────────┘
┌─uid─┬─version─┬─is_deleted─┬─_part─────┐
│ 1   │       3 │          1 │ all_3_3_0 │
└─────┴─────────┴────────────┴───────────┘
┌─uid─┬─version─┬─is_deleted─┬─_part─────┐
│ 1   │       1 │          0 │ all_0_0_0 │
└─────┴─────────┴────────────┴───────────┘

3 rows in set. Elapsed: 0.020 sec. 

dell9510 :) select * from test final

Ok.

0 rows in set. Elapsed: 0.019 sec. 

dell9510 :) optimize table test

Ok.

0 rows in set. Elapsed: 0.035 sec. 

dell9510 :) select * from test final

┌─uid─┬─version─┬─is_deleted─┐
│ 1   │       1 │          0 │
└─────┴─────────┴────────────┘

1 row in set. Elapsed: 0.019 sec. 

dell9510 :) select *, _part from test

┌─uid─┬─version─┬─is_deleted─┬─_part─────┐
│ 1   │       1 │          0 │ all_0_0_0 │
└─────┴─────────┴────────────┴───────────┘

1 row in set. Elapsed: 0.014 sec. 
```

Related to https://github.com/ClickHouse/ClickHouse/pull/41005
02490_replacing_merge_tree_is_deleted_column.sql is flaky
2023.09.13 00:50:09.739289 [ 19093 ] {38c86424-30b0-4643-91c5-a049813d2c0b} <Error> executeQuery: Code: 341. DB::Exception: Log entry log-0000000003 is not precessed on local replica, most likely because the replica was shut down. (UNFINISHED) (version 23.9.1.823) (from [::1]:33788) (comment: 02490_replacing_merge_tree_is_deleted_column.sql) (in query: OPTIMIZE TABLE testCleanupR1 FINAL CLEANUP;), Stack trace (when copying this message, always include the lines below)

[Link](https://s3.amazonaws.com/clickhouse-test-reports/47532/d683900765dca78704d59c175189a07a0a240660/stateless_tests__aarch64_.html)
Lonely part FINAL optimization for ReplacingMergeTree with is_deleted
I have tried out https://github.com/ClickHouse/ClickHouse/pull/53919, and it looks really good for ReplacingMergeTree with just the `ver` parameter. Can it work just as well using the `is_deleted` parameter, too? For example, here I make two ReplacingMergeTrees. Both have an `is_deleted` column, but only one sets the `is_deleted` parameter on the ReplacingMergeTree:

<table>
<tr>
<td>
<pre><code>
CREATE TABLE rmt
(
`id` UInt64,
`dt` Date,
`val` UInt64,
`version` UInt64,
`is_deleted` Bool
)
ENGINE = ReplacingMergeTree(version)
PARTITION BY dt
ORDER BY (id);
</pre></code>
</td>
<td>
<pre><code>
CREATE TABLE rmt_is_deleted
(
`id` UInt64,
`dt` Date,
`val` UInt64,
`version` UInt64,
`is_deleted` Bool
)
ENGINE = ReplacingMergeTree(version, is_deleted)
PARTITION BY dt
ORDER BY (id);
</code></pre>
</td>
</tr>
</table>

Then, I insert a bunch of records:

```
INSERT INTO rmt SELECT number, '2023-09-25', number*10, 0, number%2 FROM numbers(50_000_000);
INSERT INTO rmt SELECT number, '2023-09-26', number*10, 0, number%2 FROM numbers(50_000_000);

OPTIMIZE TABLE rmt FINAL;

ALTER TABLE rmt_is_deleted ATTACH PARTITION '2023-09-25' FROM rmt;
ALTER TABLE rmt_is_deleted ATTACH PARTITION '2023-09-26' FROM rmt;
```

Performance is good querying ReplacingMergeTree with just the `ver` parameter. We can filter out `is_deleted` records ourselves:

```
SELECT
    max(val),
    count(*)
FROM rmt
FINAL
WHERE NOT is_deleted
SETTINGS max_threads = 1, do_not_merge_across_partitions_select_final = 1

Query id: e6118044-ce91-4900-aaf1-f84120d643df

┌──max(val)─┬──count()─┐
│ 499999980 │ 50000000 │
└───────────┴──────────┘

1 row in set. Elapsed: 1.431 sec. Processed 100.00 million rows, 900.00 MB (69.88 million rows/s., 628.92 MB/s.)
```

Performance is not as good querying ReplacingMergeTree with the `is_deleted` parameter. I guess this is because, due to depending on the `is_deleted` column, we are triggering a merge that would otherwise have been bypassed by https://github.com/ClickHouse/ClickHouse/pull/53919. But, if we have a lonely part, couldn't we filter for `is_deleted` more cheaply, as demonstrated in the previous query?

```
SELECT
    max(val),
    count(*)
FROM rmt_is_deleted
FINAL
SETTINGS max_threads = 1, do_not_merge_across_partitions_select_final = 1

Query id: 7415a4af-1617-4c14-8a82-bbca8fe1bcf2

┌──max(val)─┬──count()─┐
│ 499999980 │ 50000000 │
└───────────┴──────────┘

1 row in set. Elapsed: 5.550 sec. Processed 100.00 million rows, 1.70 GB (18.02 million rows/s., 306.31 MB/s.)
```

<details>
<summary>EXPLAINs for rmt</summary>

```
┌─explain─────────────────────────────────────┐
│ Expression ((Projection + Before ORDER BY)) │
│   Aggregating                               │
│     Expression (Before GROUP BY)            │
│       Filter (WHERE)                        │
│         ReadFromMergeTree (demo.rmt)        │
└─────────────────────────────────────────────┘
```

```
┌─explain──────────────────────────────────────────────────────────────────────────┐
│ (Expression)                                                                     │
│ ExpressionTransform                                                              │
│   (Aggregating)                                                                  │
│   Resize 2 → 1                                                                   │
│     AggregatingTransform × 2                                                     │
│       StrictResize 2 → 2                                                         │
│         (Expression)                                                             │
│         ExpressionTransform × 2                                                  │
│           (Filter)                                                               │
│           FilterTransform × 2                                                    │
│             (ReadFromMergeTree)                                                  │
│             MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder) × 2 0 → 1 │
└──────────────────────────────────────────────────────────────────────────────────┘
```

</details>

<details>
<summary>EXPLAINs for rmt_is_deleted</summary>

```
┌─explain────────────────────────────────────────┐
│ Expression ((Projection + Before ORDER BY))    │
│   Aggregating                                  │
│     Expression (Before GROUP BY)               │
│       ReadFromMergeTree (demo.rmt_is_deleted)  │
└────────────────────────────────────────────────┘
```

```
┌─explain────────────────────────────────────────────────────────────────────────────────┐
│ (Expression)                                                                           │
│ ExpressionTransform                                                                    │
│   (Aggregating)                                                                        │
│   Resize 2 → 1                                                                         │
│     AggregatingTransform × 2                                                           │
│       StrictResize 2 → 2                                                               │
│         (Expression)                                                                   │
│         ExpressionTransform × 2                                                        │
│           (ReadFromMergeTree)                                                          │
│           ExpressionTransform × 2                                                      │
│             ReplacingSorted                                                            │
│               ExpressionTransform                                                      │
│                 MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder) 0 → 1       │
│                   ReplacingSorted                                                      │
│                     ExpressionTransform                                                │
│                       MergeTreeSelect(pool: ReadPoolInOrder, algorithm: InOrder) 0 → 1 │
└────────────────────────────────────────────────────────────────────────────────────────┘
```

</details>
Remove `OPTIMIZE CLEANUP` and `is_deleted`
Sorry, you might not like this proposal, but this feature is working incorrectly, and we have no other choice than to remove it. We didn't want or welcome this feature either.
Incorrect values insertion into the `is_deleted` column of new ReplacingMergeTree engine
Disabling the `optimize_on_insert` setting can result in the insertion in a ReplacingMergeTree table of incorrect data into the `is_deleted` column. As a consequence, running `SELECT ... FINAL` queries on the inserted tables leads to an exception.

https://fiddle.clickhouse.com/17113269-e156-4cd3-b00c-6622050c15b9


**How to reproduce:**

ClickHouse version 23.2
```
CREATE TABLE default.test
(
    `id` String,
    `version` UInt32,
    `is_deleted` UInt8
)
ENGINE = ReplacingMergeTree(version, is_deleted)
ORDER BY id
SETTINGS index_granularity = 8192

SET optimize_on_insert=0;

INSERT INTO test VALUES ('data1', 1, '6');

SELECT * from test FINAL

```
**Result:**
Received exception from server (version 23.2.3):
Code: 117. DB::Exception: Received from localhost:9000. DB::Exception: Incorrect data: is_deleted = 6 (must be 1 or 0).: While executing ReplacingSorted. (INCORRECT_DATA)
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
