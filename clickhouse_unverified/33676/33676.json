{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 33676,
  "instance_id": "ClickHouse__ClickHouse-33676",
  "issue_numbers": [
    "8340"
  ],
  "base_commit": "f9d73479d08f65dcccd001da6e41aee427c9f5d1",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 7ddb0c8c26e4..d0308d11a35a 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -725,9 +725,8 @@ void InterpreterCreateQuery::setEngine(ASTCreateQuery & create) const\n     if (create.storage || create.is_dictionary || create.isView())\n     {\n         if (create.temporary && create.storage && create.storage->engine && create.storage->engine->name != \"Memory\")\n-            throw Exception(\n-                \"Temporary tables can only be created with ENGINE = Memory, not \" + create.storage->engine->name,\n-                ErrorCodes::INCORRECT_QUERY);\n+            throw Exception(ErrorCodes::INCORRECT_QUERY,\n+                \"Temporary tables can only be created with ENGINE = Memory, not {}\", create.storage->engine->name);\n \n         return;\n     }\n@@ -1254,17 +1253,14 @@ BlockIO InterpreterCreateQuery::fillTableIfNeeded(const ASTCreateQuery & create)\n {\n     /// If the query is a CREATE SELECT, insert the data into the table.\n     if (create.select && !create.attach\n-        && !create.is_ordinary_view && !create.is_live_view && !create.is_window_view && (!create.is_materialized_view || create.is_populate))\n+        && !create.is_ordinary_view && !create.is_live_view && !create.is_window_view\n+        && (!create.is_materialized_view || create.is_populate))\n     {\n         auto insert = std::make_shared<ASTInsertQuery>();\n         insert->table_id = {create.getDatabase(), create.getTable(), create.uuid};\n         insert->select = create.select->clone();\n \n-        if (create.temporary && !getContext()->getSessionContext()->hasQueryContext())\n-            getContext()->getSessionContext()->makeQueryContext();\n-\n-        return InterpreterInsertQuery(insert,\n-            create.temporary ? getContext()->getSessionContext() : getContext(),\n+        return InterpreterInsertQuery(insert, getContext(),\n             getContext()->getSettingsRef().insert_allow_materialized_columns).execute();\n     }\n \ndiff --git a/src/Interpreters/Session.h b/src/Interpreters/Session.h\nindex 719641304121..f937c73d1a8a 100644\n--- a/src/Interpreters/Session.h\n+++ b/src/Interpreters/Session.h\n@@ -36,9 +36,9 @@ class Session\n     ~Session();\n \n     Session(const Session &&) = delete;\n-    Session& operator=(const Session &&) = delete;\n+    Session & operator=(const Session &&) = delete;\n     Session(const Session &) = delete;\n-    Session& operator=(const Session &) = delete;\n+    Session & operator=(const Session &) = delete;\n \n     /// Provides information about the authentication type of a specified user.\n     AuthenticationType getAuthenticationType(const String & user_name) const;\n@@ -97,4 +97,3 @@ class Session\n };\n \n }\n-\ndiff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp\nindex 673edfb67195..727781ea4a38 100644\n--- a/src/Server/HTTPHandler.cpp\n+++ b/src/Server/HTTPHandler.cpp\n@@ -10,10 +10,7 @@\n #include <IO/CascadeWriteBuffer.h>\n #include <IO/ConcatReadBuffer.h>\n #include <IO/MemoryReadWriteBuffer.h>\n-#include <IO/ReadBufferFromIStream.h>\n #include <IO/ReadBufferFromString.h>\n-#include <IO/WriteBufferFromFile.h>\n-#include <IO/WriteBufferFromString.h>\n #include <IO/WriteBufferFromTemporaryFile.h>\n #include <IO/WriteHelpers.h>\n #include <IO/copyData.h>\n@@ -27,7 +24,6 @@\n #include <base/logger_useful.h>\n #include <Common/SettingsChanges.h>\n #include <Common/StringUtils/StringUtils.h>\n-#include <Common/escapeForFileName.h>\n #include <Common/setThreadName.h>\n #include <Common/typeid_cast.h>\n \n@@ -41,13 +37,11 @@\n #include <Poco/Base64Encoder.h>\n #include <Poco/Net/HTTPBasicCredentials.h>\n #include <Poco/Net/HTTPStream.h>\n-#include <Poco/Net/NetException.h>\n #include <Poco/MemoryStream.h>\n #include <Poco/StreamCopier.h>\n #include <Poco/String.h>\n \n #include <chrono>\n-#include <iomanip>\n #include <sstream>\n \n \n@@ -56,7 +50,6 @@ namespace DB\n \n namespace ErrorCodes\n {\n-\n     extern const int LOGICAL_ERROR;\n     extern const int CANNOT_PARSE_TEXT;\n     extern const int CANNOT_PARSE_ESCAPE_SEQUENCE;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02177_temporary_table_current_database_http_session.reference b/tests/queries/0_stateless/02177_temporary_table_current_database_http_session.reference\nnew file mode 100644\nindex 000000000000..78f5d214b4df\n--- /dev/null\n+++ b/tests/queries/0_stateless/02177_temporary_table_current_database_http_session.reference\n@@ -0,0 +1,1 @@\n+test_02177\ndiff --git a/tests/queries/0_stateless/02177_temporary_table_current_database_http_session.sh b/tests/queries/0_stateless/02177_temporary_table_current_database_http_session.sh\nnew file mode 100755\nindex 000000000000..abc5fb49750e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02177_temporary_table_current_database_http_session.sh\n@@ -0,0 +1,21 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+DATABASE='test_02177'\n+SESSION_ID=\"$RANDOM$RANDOM$RANDOM\"\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d \"DROP DATABASE IF EXISTS ${DATABASE}\"\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d \"CREATE DATABASE ${DATABASE}\"\n+\n+CLICKHOUSE_URL_PARAMS=\"database=${DATABASE}\"\n+[ -v CLICKHOUSE_LOG_COMMENT ] && CLICKHOUSE_URL_PARAMS=\"${CLICKHOUSE_URL_PARAMS}&log_comment=${CLICKHOUSE_LOG_COMMENT}\"\n+CLICKHOUSE_URL=\"${CLICKHOUSE_PORT_HTTP_PROTO}://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT_HTTP}/?${CLICKHOUSE_URL_PARAMS}\"\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&session_id=${SESSION_ID}\" -d 'CREATE TEMPORARY TABLE t AS SELECT currentDatabase()'\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&session_id=${SESSION_ID}\" -d 'SELECT * FROM t'\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d \"DROP DATABASE ${DATABASE}\"\n",
  "problem_statement": "Creating a temporary table from an AS SELECT using HTTP, the database from the query param is not used in the select\nUsing HTTP connector, creating a temporary table from an AS SELECT, the database as passed in the URL query parameter, is forgotten and the SELECT query is performed over the default database.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use **19.13.6.51**\r\n* Which interface to use, if matters **HTTP**\r\n* Non-default settings, if any **-**\r\n\r\n```\r\n# Setup some data (in the client)\r\nCREATE DATABASE test1\r\nCREATE TABLE x ENGINE Memory AS SELECT 1\r\n\r\n# Confirm that it is possible to make a temporary table (in the client)\r\nUSE test1\r\nCREATE TEMPORARY TABLE xt0 AS SELECT * FROM x\r\n\r\n# Confirm that this works\r\necho \"SELECT * FROM x\" | curl --user default:`cat ~/sec/clickhouse | tr -d '\\n'` -sS --data-binary @- 'http://192.168.1.27:8123/?database=test1&session_id=12345'\r\n\r\n# Attempt to create temporary table\r\necho \"CREATE TEMPORARY TABLE xt1 AS SELECT * FROM x\" | curl --user default:`cat ~/sec/clickhouse | tr -d '\\n'` -sS --data-binary @- 'http://192.168.1.27:8123/?database=test1&session_id=12345'\r\n```\r\n\r\n**Expected behavior**\r\nCreating the temporary table from curl should work just as the select statement works\r\n\r\n**Error message and/or stacktrace**\r\n```\r\nCode: 60, e.displayText() = DB::Exception: Table default.x doesn't exist. (version 19.13.6.51)\r\n```\r\n\r\n**Additional context**\r\n-\r\n\r\nEdits:\r\n1. Clarify the version, it is 19.13.6.51, not 19.13.6\r\n2. I forgot to note that I had typed `use test1` in the client\n",
  "hints_text": "I work around this issue by using the fully qualified name in the query, as:\r\n```\r\necho \"CREATE TEMPORARY TABLE xt1 AS SELECT * FROM test1.x\" | curl --user default:`cat ~/sec/clickhouse | tr -d '\\n'` -sS --data-binary @- 'http://192.168.1.27:8123/?database=test1&session_id=12345'\r\n```\nStill relevant in 22.1.\r\n\r\nTest:\r\n\r\n```\r\n$ curl 'http://localhost:8123/?database=test&session_id=1' -d 'CREATE TEMPORARY TABLE t AS SELECT currentDatabase()'\r\n$ curl 'http://localhost:8123/?database=test&session_id=1' -d 'SELECT * FROM t'\r\ndefault\r\n```",
  "created_at": "2022-01-16T05:14:35Z",
  "modified_files": [
    "src/Interpreters/InterpreterCreateQuery.cpp",
    "src/Interpreters/Session.h",
    "src/Server/HTTPHandler.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02177_temporary_table_current_database_http_session.reference",
    "b/tests/queries/0_stateless/02177_temporary_table_current_database_http_session.sh"
  ]
}