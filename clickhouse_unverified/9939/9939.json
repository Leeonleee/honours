{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9939,
  "instance_id": "ClickHouse__ClickHouse-9939",
  "issue_numbers": [
    "9839"
  ],
  "base_commit": "cf8c722c91a5b4273ed2890198b14fe30faf325b",
  "patch": "diff --git a/dbms/src/Interpreters/SubqueryForSet.cpp b/dbms/src/Interpreters/SubqueryForSet.cpp\nindex 47de516d1541..98f670e5c64a 100644\n--- a/dbms/src/Interpreters/SubqueryForSet.cpp\n+++ b/dbms/src/Interpreters/SubqueryForSet.cpp\n@@ -53,7 +53,11 @@ bool SubqueryForSet::insertJoinedBlock(Block & block)\n void SubqueryForSet::setTotals()\n {\n     if (join && source)\n-        join->setTotals(source->getTotals());\n+    {\n+        Block totals = source->getTotals();\n+        renameColumns(totals);\n+        join->setTotals(totals);\n+    }\n }\n \n }\ndiff --git a/dbms/src/Interpreters/SubqueryForSet.h b/dbms/src/Interpreters/SubqueryForSet.h\nindex 3463f708a46e..4c99e34a2fcb 100644\n--- a/dbms/src/Interpreters/SubqueryForSet.h\n+++ b/dbms/src/Interpreters/SubqueryForSet.h\n@@ -42,6 +42,7 @@ struct SubqueryForSet\n private:\n     NamesWithAliases joined_block_aliases; /// Rename column from joined block from this list.\n \n+    /// Rename source right table column names into qualified column names if they conflicts with left table ones.\n     void renameColumns(Block & block);\n };\n \ndiff --git a/dbms/src/Processors/Transforms/ExpressionTransform.cpp b/dbms/src/Processors/Transforms/ExpressionTransform.cpp\nindex cbc83692c4ba..bf52a13f08a3 100644\n--- a/dbms/src/Processors/Transforms/ExpressionTransform.cpp\n+++ b/dbms/src/Processors/Transforms/ExpressionTransform.cpp\n@@ -26,7 +26,7 @@ void ExpressionTransform::transform(Chunk & chunk)\n     {\n         initialized = true;\n \n-        if (expression->resultIsAlwaysEmpty())\n+        if (expression->resultIsAlwaysEmpty() && !on_totals)\n         {\n             stopReading();\n             chunk.clear();\ndiff --git a/dbms/src/Processors/Transforms/InflatingExpressionTransform.cpp b/dbms/src/Processors/Transforms/InflatingExpressionTransform.cpp\nindex b5d288197b14..017cfc7cf828 100644\n--- a/dbms/src/Processors/Transforms/InflatingExpressionTransform.cpp\n+++ b/dbms/src/Processors/Transforms/InflatingExpressionTransform.cpp\n@@ -25,7 +25,7 @@ void InflatingExpressionTransform::transform(Chunk & chunk)\n     {\n         initialized = true;\n \n-        if (expression->resultIsAlwaysEmpty())\n+        if (expression->resultIsAlwaysEmpty() && !on_totals)\n         {\n             stopReading();\n             chunk.clear();\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01107_join_right_table_totals.reference b/dbms/tests/queries/0_stateless/01107_join_right_table_totals.reference\nnew file mode 100644\nindex 000000000000..77db8015b0ea\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01107_join_right_table_totals.reference\n@@ -0,0 +1,10 @@\n+\n+0\n+\n+0\n+\n+0\n+\n+0\n+\n+0\t0\t0\ndiff --git a/dbms/tests/queries/0_stateless/01107_join_right_table_totals.sql b/dbms/tests/queries/0_stateless/01107_join_right_table_totals.sql\nnew file mode 100644\nindex 000000000000..77e8848c9572\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01107_join_right_table_totals.sql\n@@ -0,0 +1,38 @@\n+DROP TABLE IF EXISTS t;\n+CREATE TABLE t (item_id UInt64, price_sold Float32, date Date) ENGINE MergeTree ORDER BY item_id;\n+\n+SELECT item_id\n+FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) l\n+FULL JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) r\n+USING (item_id);\n+\n+SELECT id\n+FROM (SELECT item_id AS id FROM t GROUP BY id WITH TOTALS) l\n+FULL JOIN (SELECT item_id AS id FROM t GROUP BY id WITH TOTALS) r\n+USING (id);\n+\n+SELECT item_id\n+FROM (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) l\n+INNER JOIN (SELECT item_id FROM t GROUP BY item_id WITH TOTALS) r\n+USING (item_id);\n+\n+SELECT id\n+FROM (SELECT item_id AS id FROM t GROUP BY id WITH TOTALS) l\n+INNER JOIN (SELECT item_id AS id FROM t GROUP BY id WITH TOTALS) r\n+USING (id);\n+\n+SELECT id, yago, recent\n+FROM (\n+    SELECT item_id AS id, SUM(price_sold) AS recent\n+    FROM t WHERE (date BETWEEN '2019-12-16' AND '2020-03-08')\n+    GROUP BY id WITH TOTALS\n+) ll\n+FULL JOIN\n+(\n+    SELECT item_id AS id, SUM(price_sold) AS yago\n+    FROM t WHERE (date BETWEEN '2018-12-17' AND '2019-03-10')\n+    GROUP BY id WITH TOTALS\n+) rr\n+USING (id);\n+\n+DROP TABLE t;\n",
  "problem_statement": "JOIN ... GROUP BY ... WITH TOTALS throwing exception on join\nFollowing query (minute the aliases on the sub-queries) worked fine in 19.x (previous to requiring the ll and rr labels).\r\n\r\n```\r\n SELECT\r\n     id, yago, recent\r\n FROM (\r\n     SELECT under_item_id AS id, SUM(price_sold) AS recent\r\n     FROM by_item WHERE (date BETWEEN '2019-12-16' AND '2020-03-08')\r\n     GROUP BY id WITH TOTALS\r\n ) ll\r\n FULL OUTER JOIN\r\n (\r\n     SELECT under_item_id AS id, SUM(price_sold) AS yago\r\n     FROM by_item WHERE (date BETWEEN '2018-12-17' AND '2019-03-10')\r\n     GROUP BY id WITH TOTALS\r\n ) rr\r\n USING (id)\r\n```\r\nNow, in  20.3.4.10 it is throwing:\r\n\r\nCode: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column rr.id in block. There are only columns: id, yago. \r\n\r\nIf you remove the WITH TOTALS, it works. Seemingly getting confused with the combination of the gouped totals with the labels added?\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2020-03-30T11:17:01Z",
  "modified_files": [
    "dbms/src/Interpreters/SubqueryForSet.cpp",
    "dbms/src/Interpreters/SubqueryForSet.h",
    "dbms/src/Processors/Transforms/ExpressionTransform.cpp",
    "dbms/src/Processors/Transforms/InflatingExpressionTransform.cpp"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/01107_join_right_table_totals.reference",
    "b/dbms/tests/queries/0_stateless/01107_join_right_table_totals.sql"
  ]
}