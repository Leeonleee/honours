{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 24464,
  "instance_id": "ClickHouse__ClickHouse-24464",
  "issue_numbers": [
    "24293"
  ],
  "base_commit": "10e5b93435c3c4f216a48a5504c44863dbb6d985",
  "patch": "diff --git a/src/DataTypes/DataTypeTuple.cpp b/src/DataTypes/DataTypeTuple.cpp\nindex b30efb163ab8..9ebc061d6f9b 100644\n--- a/src/DataTypes/DataTypeTuple.cpp\n+++ b/src/DataTypes/DataTypeTuple.cpp\n@@ -307,26 +307,30 @@ SerializationPtr DataTypeTuple::getSubcolumnSerialization(\n SerializationPtr DataTypeTuple::doGetDefaultSerialization() const\n {\n     SerializationTuple::ElementSerializations serializations(elems.size());\n+    bool use_explicit_names = have_explicit_names && serialize_names;\n     for (size_t i = 0; i < elems.size(); ++i)\n     {\n+        String elem_name = use_explicit_names ? names[i] : toString(i + 1);\n         auto serialization = elems[i]->getDefaultSerialization();\n-        serializations[i] = std::make_shared<SerializationTupleElement>(serialization, names[i]);\n+        serializations[i] = std::make_shared<SerializationTupleElement>(serialization, elem_name);\n     }\n \n-    return std::make_shared<SerializationTuple>(std::move(serializations), have_explicit_names);\n+    return std::make_shared<SerializationTuple>(std::move(serializations), use_explicit_names);\n }\n \n SerializationPtr DataTypeTuple::getSerialization(const String & column_name, const StreamExistenceCallback & callback) const\n {\n     SerializationTuple::ElementSerializations serializations(elems.size());\n+    bool use_explicit_names = have_explicit_names && serialize_names;\n     for (size_t i = 0; i < elems.size(); ++i)\n     {\n-        auto subcolumn_name = Nested::concatenateName(column_name, names[i]);\n+        String elem_name = use_explicit_names ? names[i] : toString(i + 1);\n+        auto subcolumn_name = Nested::concatenateName(column_name, elem_name);\n         auto serializaion = elems[i]->getSerialization(subcolumn_name, callback);\n-        serializations[i] = std::make_shared<SerializationTupleElement>(serializaion, names[i]);\n+        serializations[i] = std::make_shared<SerializationTupleElement>(serializaion, elem_name);\n     }\n \n-    return std::make_shared<SerializationTuple>(std::move(serializations), have_explicit_names);\n+    return std::make_shared<SerializationTuple>(std::move(serializations), use_explicit_names);\n }\n \n static DataTypePtr create(const ASTPtr & arguments)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01881_create_as_tuple.reference b/tests/queries/0_stateless/01881_create_as_tuple.reference\nnew file mode 100644\nindex 000000000000..76109462c595\n--- /dev/null\n+++ b/tests/queries/0_stateless/01881_create_as_tuple.reference\n@@ -0,0 +1,6 @@\n+0\t[('string',0)]\n+1\t[('string',1)]\n+2\t[('string',2)]\n+0\t[('string',0)]\n+1\t[('string',1)]\n+2\t[('string',2)]\ndiff --git a/tests/queries/0_stateless/01881_create_as_tuple.sql b/tests/queries/0_stateless/01881_create_as_tuple.sql\nnew file mode 100644\nindex 000000000000..cf370fe46335\n--- /dev/null\n+++ b/tests/queries/0_stateless/01881_create_as_tuple.sql\n@@ -0,0 +1,14 @@\n+DROP TABLE IF EXISTS t_create_as_tuple;\n+\n+CREATE TABLE t_create_as_tuple ENGINE = MergeTree()\n+ORDER BY number AS\n+SELECT number, [('string',number)] AS array FROM numbers(3);\n+\n+SELECT * FROM t_create_as_tuple ORDER BY number;\n+\n+DETACH TABLE t_create_as_tuple;\n+ATTACH TABLE t_create_as_tuple;\n+\n+SELECT * FROM t_create_as_tuple ORDER BY number;\n+\n+DROP TABLE t_create_as_tuple;\n",
  "problem_statement": "If using Array of Tuple column in MergeTree table, the data cannot be read after restart\n**Describe the bug**\r\n\r\nI have a table created from `SELECT` query. The table has two columns: `UInt64` primary key and an array of tuples `Array(Tuple(String, UInt64))`. After restart of the ClickHouse server the data in the second column is lost (`SELECT` query returns only empty strings and zeros).\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes\r\n\r\n**How to reproduce**\r\n\r\n1. Create a table\r\n```\r\nCREATE TABLE Test ENGINE = MergeTree()\r\nORDER BY number AS\r\nSELECT number,[('string',number)] as array from numbers(1,1000000)\r\n```\r\n2. Select the data\r\n```\r\nSELECT * FROM Test LIMIT 5\r\n```\r\n\r\n```\r\n\u250c\u2500number\u2500\u252c\u2500array\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502      1 \u2502 [('string',1)] \u2502\r\n\u2502      2 \u2502 [('string',2)] \u2502\r\n\u2502      3 \u2502 [('string',3)] \u2502\r\n\u2502      4 \u2502 [('string',4)] \u2502\r\n\u2502      5 \u2502 [('string',5)] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n(everything is fine)\r\n\r\n3. Restart ClickHouse server (`sudo systemctl restart clickhouse-server`)\r\n\r\n4. Select the data again\r\n```\r\nSELECT * FROM Test LIMIT 5\r\n```\r\n\r\n```\r\n\u250c\u2500number\u2500\u252c\u2500array\u2500\u2500\u2500\u2500\u2510\r\n\u2502      1 \u2502 [('',0)] \u2502\r\n\u2502      2 \u2502 [('',0)] \u2502\r\n\u2502      3 \u2502 [('',0)] \u2502\r\n\u2502      4 \u2502 [('',0)] \u2502\r\n\u2502      5 \u2502 [('',0)] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nThe data in the `array` column is lost.\r\n\r\n**Additional context**\r\n\r\nIn order to reproduce this behavior, the number of rows in the `Test` table should be sufficiently large (> 300000 rows on my machine).\r\n\n",
  "hints_text": "20.10 - last good version.\ndata written by new version:\r\n\r\n-rw-r-----  1 lqin  staff    30008 May 22 00:07 array%2E%27string%27.bin\r\n-rw-r-----  1 lqin  staff     2976 May 22 00:07 array%2E%27string%27.mrk2\r\n-rw-r-----  1 lqin  staff  4005014 May 22 00:07 array%2Enumber.bin\r\n-rw-r-----  1 lqin  staff     2976 May 22 00:07 array%2Enumber.mrk2\r\n-rw-r-----  1 lqin  staff    36169 May 22 00:07 array.size0.bin\r\n-rw-r-----  1 lqin  staff     2976 May 22 00:07 array.size0.mrk2\r\n\r\n\r\ndata written by correct version\r\n\r\n-rw-r-----  1 lqin  staff    30008 May 21 23:09 array%2E1.bin\r\n-rw-r-----  1 lqin  staff     2976 May 21 23:09 array%2E1.mrk2\r\n-rw-r-----  1 lqin  staff  4005014 May 21 23:09 array%2E2.bin\r\n-rw-r-----  1 lqin  staff     2976 May 21 23:09 array%2E2.mrk2\r\n-rw-r-----  1 lqin  staff    36169 May 21 23:09 array.size0.bin\r\n-rw-r-----  1 lqin  staff     2976 May 21 23:09 array.size0.mrk2\r\n\r\n\r\nIn the code below, MergeTreeReaderWide::addStreams\r\n`\r\n bool data_file_exists = data_part->checksums.files.count(stream_name + DATA_FILE_EXTENSION)\r\n`\r\nthe stream_name here is array%2E1/E2. \r\n\r\nlooks like somehow the first row of the tuple becomes the \"name\" in the subselect. if separate the create table and select from the data file is created with E1/E2 format. So I assume this is the correct filename.",
  "created_at": "2021-05-24T20:17:29Z",
  "modified_files": [
    "src/DataTypes/DataTypeTuple.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01881_create_as_tuple.reference",
    "b/tests/queries/0_stateless/01881_create_as_tuple.sql"
  ]
}