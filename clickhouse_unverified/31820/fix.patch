diff --git a/src/Interpreters/UserDefinedSQLFunctionVisitor.cpp b/src/Interpreters/UserDefinedSQLFunctionVisitor.cpp
index d9ac53097ab1..3e82930af9d1 100644
--- a/src/Interpreters/UserDefinedSQLFunctionVisitor.cpp
+++ b/src/Interpreters/UserDefinedSQLFunctionVisitor.cpp
@@ -1,6 +1,7 @@
 #include "UserDefinedSQLFunctionVisitor.h"
 
 #include <unordered_map>
+#include <unordered_set>
 #include <stack>
 
 #include <Parsers/ASTFunction.h>
@@ -18,19 +19,16 @@ namespace ErrorCodes
     extern const int UNSUPPORTED_METHOD;
 }
 
-void UserDefinedSQLFunctionMatcher::visit(ASTPtr & ast, Data & data)
+void UserDefinedSQLFunctionMatcher::visit(ASTPtr & ast, Data &)
 {
     auto * function = ast->as<ASTFunction>();
     if (!function)
         return;
 
-    auto result = tryToReplaceFunction(*function);
-
-    if (result)
-    {
-        ast = result;
-        visit(ast, data);
-    }
+    std::unordered_set<std::string> udf_in_replace_process;
+    auto replace_result = tryToReplaceFunction(*function, udf_in_replace_process);
+    if (replace_result)
+        ast = replace_result;
 }
 
 bool UserDefinedSQLFunctionMatcher::needChildVisit(const ASTPtr &, const ASTPtr &)
@@ -38,8 +36,13 @@ bool UserDefinedSQLFunctionMatcher::needChildVisit(const ASTPtr &, const ASTPtr
     return true;
 }
 
-ASTPtr UserDefinedSQLFunctionMatcher::tryToReplaceFunction(const ASTFunction & function)
+ASTPtr UserDefinedSQLFunctionMatcher::tryToReplaceFunction(const ASTFunction & function, std::unordered_set<std::string> & udf_in_replace_process)
 {
+    if (udf_in_replace_process.find(function.name) != udf_in_replace_process.end())
+        throw Exception(ErrorCodes::UNSUPPORTED_METHOD,
+            "Recursive function call detected during function call {}",
+            function.name);
+
     auto user_defined_function = UserDefinedSQLFunctionFactory::instance().tryGet(function.name);
     if (!user_defined_function)
         return nullptr;
@@ -71,10 +74,15 @@ ASTPtr UserDefinedSQLFunctionMatcher::tryToReplaceFunction(const ASTFunction & f
         identifier_name_to_function_argument.emplace(identifier_name, function_argument);
     }
 
+    auto [it, _] = udf_in_replace_process.emplace(function.name);
+
     auto function_body_to_update = function_core_expression->children.at(1)->clone();
 
+    auto expression_list = std::make_shared<ASTExpressionList>();
+    expression_list->children.emplace_back(std::move(function_body_to_update));
+
     std::stack<ASTPtr> ast_nodes_to_update;
-    ast_nodes_to_update.push(function_body_to_update);
+    ast_nodes_to_update.push(expression_list);
 
     while (!ast_nodes_to_update.empty())
     {
@@ -83,6 +91,13 @@ ASTPtr UserDefinedSQLFunctionMatcher::tryToReplaceFunction(const ASTFunction & f
 
         for (auto & child : ast_node_to_update->children)
         {
+            if (auto * inner_function = child->as<ASTFunction>())
+            {
+                auto replace_result = tryToReplaceFunction(*inner_function, udf_in_replace_process);
+                if (replace_result)
+                    child = replace_result;
+            }
+
             auto identifier_name_opt = tryGetIdentifierName(child);
             if (identifier_name_opt)
             {
@@ -104,6 +119,10 @@ ASTPtr UserDefinedSQLFunctionMatcher::tryToReplaceFunction(const ASTFunction & f
         }
     }
 
+    udf_in_replace_process.erase(it);
+
+    function_body_to_update = expression_list->children[0];
+
     auto function_alias = function.tryGetAlias();
 
     if (!function_alias.empty())
diff --git a/src/Interpreters/UserDefinedSQLFunctionVisitor.h b/src/Interpreters/UserDefinedSQLFunctionVisitor.h
index 46f95f29ab90..686594c088f9 100644
--- a/src/Interpreters/UserDefinedSQLFunctionVisitor.h
+++ b/src/Interpreters/UserDefinedSQLFunctionVisitor.h
@@ -34,7 +34,7 @@ class UserDefinedSQLFunctionMatcher
 private:
     static void visit(ASTFunction & func, const Data & data);
 
-    static ASTPtr tryToReplaceFunction(const ASTFunction & function);
+    static ASTPtr tryToReplaceFunction(const ASTFunction & function, std::unordered_set<std::string> & udf_in_replace_process);
 
 };
 
