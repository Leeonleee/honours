{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64694,
  "instance_id": "ClickHouse__ClickHouse-64694",
  "issue_numbers": [
    "63700"
  ],
  "base_commit": "fcd6a1905910cd9d4206c122a72d12da5fc6547f",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeDataPartTTLInfo.cpp b/src/Storages/MergeTree/MergeTreeDataPartTTLInfo.cpp\nindex 808b2b25fcd0..39eb2c4fc800 100644\n--- a/src/Storages/MergeTree/MergeTreeDataPartTTLInfo.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataPartTTLInfo.cpp\n@@ -3,6 +3,8 @@\n #include <IO/WriteHelpers.h>\n #include <Common/quoteString.h>\n #include <algorithm>\n+#include <Parsers/ExpressionListParsers.h>\n+#include <Parsers/parseQuery.h>\n \n #include <base/JSON.h>\n \n@@ -272,6 +274,29 @@ bool MergeTreeDataPartTTLInfos::hasAnyNonFinishedTTLs() const\n     return false;\n }\n \n+namespace\n+{\n+    /// We had backward incompatibility in representation of serialized expressions, example:\n+    ///\n+    /// `expired + toIntervalSecond(20)` vs `plus(expired, toIntervalSecond(20))`\n+    /// Since they are stored as strings we cannot compare them directly as strings\n+    /// To avoid backward incompatibility we parse them and check AST hashes.\n+    /// This O(N^2), but amount of TTLs should be small, so it should be Ok.\n+    auto tryToFindTTLExpressionInMapByASTMatching(const TTLInfoMap & ttl_info_map, const std::string & result_column)\n+    {\n+        ParserExpression parser;\n+        auto ast_needle = parseQuery(parser, result_column.data(), result_column.data() + result_column.size(), \"\", 0, 0, 0);\n+        for (auto it = ttl_info_map.begin(); it != ttl_info_map.end(); ++it)\n+        {\n+            const std::string & stored_expression = it->first;\n+            auto ast_candidate = parseQuery(parser, stored_expression.data(), stored_expression.data() + stored_expression.size(), \"\", 0, 0, 0);\n+            if (ast_candidate->getTreeHash(false) == ast_needle->getTreeHash(false))\n+                return it;\n+        }\n+        return ttl_info_map.end();\n+    }\n+}\n+\n std::optional<TTLDescription> selectTTLDescriptionForTTLInfos(const TTLDescriptions & descriptions, const TTLInfoMap & ttl_info_map, time_t current_time, bool use_max)\n {\n     time_t best_ttl_time = 0;\n@@ -281,7 +306,11 @@ std::optional<TTLDescription> selectTTLDescriptionForTTLInfos(const TTLDescripti\n         auto ttl_info_it = ttl_info_map.find(ttl_entry_it->result_column);\n \n         if (ttl_info_it == ttl_info_map.end())\n-            continue;\n+        {\n+            ttl_info_it = tryToFindTTLExpressionInMapByASTMatching(ttl_info_map, ttl_entry_it->result_column);\n+            if (ttl_info_it == ttl_info_map.end())\n+                continue;\n+        }\n \n         time_t ttl_time;\n \n",
  "test_patch": "diff --git a/tests/integration/test_move_ttl_broken_compatibility/__init__.py b/tests/integration/test_move_ttl_broken_compatibility/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_move_ttl_broken_compatibility/configs/storage_conf.xml b/tests/integration/test_move_ttl_broken_compatibility/configs/storage_conf.xml\nnew file mode 100644\nindex 000000000000..1b2177d0392e\n--- /dev/null\n+++ b/tests/integration/test_move_ttl_broken_compatibility/configs/storage_conf.xml\n@@ -0,0 +1,36 @@\n+<clickhouse>\n+    <logger>\n+        <level>test</level>\n+    </logger>\n+\n+    <storage_configuration>\n+        <disks>\n+            <s3>\n+                <type>s3</type>\n+                <endpoint>http://minio1:9001/root/data/</endpoint>\n+                <access_key_id>minio</access_key_id>\n+                <secret_access_key>minio123</secret_access_key>\n+            </s3>\n+        </disks>\n+        <policies>\n+            <default>\n+                <default>\n+                    <disk>default</disk>\n+                </default>\n+            </default>\n+            <s3>\n+                <volumes>\n+                     <default>\n+                        <disk>default</disk>\n+                        <perform_ttl_move_on_insert>False</perform_ttl_move_on_insert>\n+                     </default>\n+                    <main>\n+                        <disk>s3</disk>\n+                        <perform_ttl_move_on_insert>False</perform_ttl_move_on_insert>\n+                    </main>\n+                </volumes>\n+                <move_factor>0.0</move_factor>\n+            </s3>\n+        </policies>\n+    </storage_configuration>\n+</clickhouse>\ndiff --git a/tests/integration/test_move_ttl_broken_compatibility/test.py b/tests/integration/test_move_ttl_broken_compatibility/test.py\nnew file mode 100644\nindex 000000000000..f9eab8b5ebb5\n--- /dev/null\n+++ b/tests/integration/test_move_ttl_broken_compatibility/test.py\n@@ -0,0 +1,105 @@\n+#!/usr/bin/env python3\n+\n+import logging\n+import random\n+import string\n+import time\n+\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+import minio\n+\n+\n+cluster = ClickHouseCluster(__file__)\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.add_instance(\n+            \"node1\",\n+            main_configs=[\"configs/storage_conf.xml\"],\n+            image=\"clickhouse/clickhouse-server\",\n+            with_minio=True,\n+            tag=\"24.1\",\n+            stay_alive=True,\n+            with_installed_binary=True,\n+        )\n+        cluster.start()\n+\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_bc_compatibility(started_cluster):\n+    node1 = cluster.instances[\"node1\"]\n+    node1.query(\n+        \"\"\"\n+        CREATE TABLE test_ttl_table (\n+            generation UInt64,\n+            date_key DateTime,\n+            number UInt64,\n+            text String,\n+            expired DateTime DEFAULT now()\n+        )\n+        ENGINE=MergeTree\n+        ORDER BY (generation, date_key)\n+        PARTITION BY toMonth(date_key)\n+        TTL expired + INTERVAL 20 SECONDS TO DISK 's3'\n+        SETTINGS storage_policy = 's3';\n+    \"\"\"\n+    )\n+\n+    node1.query(\n+        \"\"\"\n+        INSERT INTO test_ttl_table (\n+            generation,\n+            date_key,\n+            number,\n+            text\n+        )\n+        SELECT\n+            1,\n+            toDateTime('2000-01-01 00:00:00') + rand(number) % 365 * 86400,\n+            number,\n+            toString(number)\n+        FROM numbers(10000);\n+    \"\"\"\n+    )\n+\n+    disks = (\n+        node1.query(\n+            \"\"\"\n+        SELECT distinct disk_name\n+        FROM system.parts\n+        WHERE table = 'test_ttl_table'\n+    \"\"\"\n+        )\n+        .strip()\n+        .split(\"\\n\")\n+    )\n+    print(\"Disks before\", disks)\n+\n+    assert len(disks) == 1\n+    assert disks[0] == \"default\"\n+\n+    node1.restart_with_latest_version()\n+\n+    for _ in range(60):\n+        disks = (\n+            node1.query(\n+                \"\"\"\n+            SELECT distinct disk_name\n+            FROM system.parts\n+            WHERE table = 'test_ttl_table'\n+        \"\"\"\n+            )\n+            .strip()\n+            .split(\"\\n\")\n+        )\n+        print(\"Disks after\", disks)\n+        if \"s3\" in disks:\n+            break\n+        time.sleep(1)\n+    assert \"s3\" in disks\n",
  "problem_statement": "Broken moving to S3 by TTL data parts that created in 24.1 to S3 after upgrade to 24.2 \n> Please make sure that the version you're using is still supported (you can find the list [here](https://github.com/ClickHouse/ClickHouse/blob/master/SECURITY.md#scope-and-supported-versions)).\r\n\r\n> You have to provide the following information whenever possible.\r\n\r\nI use Clickhouse 24.1\r\nI've created table and filled with data with TTL (move to S3).\r\n\r\nUpdate Clickhouse to 24.2.\r\nOld parts are not moved to S3 after the TTL expires. There are no problem with new parts.\r\n\r\nExample:\r\n```\r\nDROP TABLE test_ttl_table;\r\n\r\nCREATE TABLE test_ttl_table (\r\n\tgeneration UInt64, \r\n\tdate_key DateTime, \r\n\tnumber UInt64, \r\n\ttext String, \r\n\texpired DateTime DEFAULT now()\r\n) \r\nENGINE=MergeTree \r\nORDER BY (generation, date_key) \r\nPARTITION BY toMonth(date_key) \r\nTTL expired + INTERVAL 10 MINUTES TO DISK 'object_storage';\r\n\r\n\r\nINSERT INTO test_ttl_table (\r\n\tgeneration,\r\n\tdate_key,\r\n\tnumber,\r\n\ttext\r\n)\r\n\tSELECT\r\n\t\t1,\r\n\t\ttoDateTime('2000-01-01 00:00:00') + rand(number) % 365 * 86400,\r\n\t\tnumber,\r\n\t\ttoString(number)\r\n\r\n\tFROM numbers(10000000);\r\n\r\n# update cluster to 24.2\r\n\r\nSELECT\r\n    partition,\r\n    name,\r\n    uuid,\r\n    disk_name,\r\n    move_ttl_info.min,\r\n    move_ttl_info.max,\r\n    bytes_on_disk\r\nFROM system.parts\r\nWHERE table = 'test_ttl_table'\r\nORDER BY toInt8(partition) ASC\r\n\r\nQuery id: e4bab693-3865-44a3-a2ac-664c0d82103c\r\n\r\n\u250c\u2500partition\u2500\u252c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500disk_name\u2500\u252c\u2500move_ttl_info.min\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500move_ttl_info.max\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes_on_disk\u2500\u2510\r\n\u2502 1         \u2502 1_74_74_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        928770 \u2502\r\n\u2502 1         \u2502 1_93_93_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        930934 \u2502\r\n\u2502 1         \u2502 1_97_97_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        929958 \u2502\r\n\u2502 1         \u2502 1_115_115_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        492933 \u2502\r\n\u2502 1         \u2502 1_10_69_1    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5759285 \u2502\r\n\u2502 2         \u2502 2_7_62_1     \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5394180 \u2502\r\n\u2502 2         \u2502 2_110_110_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        460464 \u2502\r\n\u2502 2         \u2502 2_105_105_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        876439 \u2502\r\n\u2502 2         \u2502 2_92_92_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        869973 \u2502\r\n\u2502 2         \u2502 2_82_82_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        870436 \u2502\r\n\u2502 3         \u2502 3_117_117_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        488874 \u2502\r\n\u2502 3         \u2502 3_101_101_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        931489 \u2502\r\n\u2502 3         \u2502 3_94_94_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        930016 \u2502\r\n\u2502 3         \u2502 3_81_81_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        929802 \u2502\r\n\u2502 3         \u2502 3_11_67_1    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5770230 \u2502\r\n\u2502 4         \u2502 4_6_64_1     \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5580195 \u2502\r\n\u2502 4         \u2502 4_111_111_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        475575 \u2502\r\n\u2502 4         \u2502 4_106_106_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        901198 \u2502\r\n\u2502 4         \u2502 4_91_91_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        900482 \u2502\r\n\u2502 4         \u2502 4_79_79_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        900967 \u2502\r\n\u2502 5         \u2502 5_116_116_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        490023 \u2502\r\n\u2502 5         \u2502 5_104_104_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        926871 \u2502\r\n\u2502 5         \u2502 5_87_87_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        928796 \u2502\r\n\u2502 5         \u2502 5_84_84_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        932116 \u2502\r\n\u2502 5         \u2502 5_8_72_1     \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5771681 \u2502\r\n\u2502 6         \u2502 6_107_107_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        900318 \u2502\r\n\u2502 6         \u2502 6_120_120_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        470141 \u2502\r\n\u2502 6         \u2502 6_89_89_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        900147 \u2502\r\n\u2502 6         \u2502 6_80_80_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        899309 \u2502\r\n\u2502 6         \u2502 6_9_70_1     \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5579481 \u2502\r\n\u2502 7         \u2502 7_12_63_1    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5752767 \u2502\r\n\u2502 7         \u2502 7_76_76_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        925182 \u2502\r\n\u2502 7         \u2502 7_96_96_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        930183 \u2502\r\n\u2502 7         \u2502 7_103_103_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        925495 \u2502\r\n\u2502 7         \u2502 7_109_109_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        487546 \u2502\r\n\u2502 8         \u2502 8_4_68_1     \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5766840 \u2502\r\n\u2502 8         \u2502 8_83_83_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        926365 \u2502\r\n\u2502 8         \u2502 8_90_90_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        925285 \u2502\r\n\u2502 8         \u2502 8_98_98_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        930100 \u2502\r\n\u2502 8         \u2502 8_112_112_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        495023 \u2502\r\n\u2502 9         \u2502 9_114_114_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        476192 \u2502\r\n\u2502 9         \u2502 9_2_66_1     \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5583211 \u2502\r\n\u2502 9         \u2502 9_77_77_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        898147 \u2502\r\n\u2502 9         \u2502 9_88_88_0    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        902041 \u2502\r\n\u2502 9         \u2502 9_102_102_0  \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        903643 \u2502\r\n\u2502 10        \u2502 10_1_65_1    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5764723 \u2502\r\n\u2502 10        \u2502 10_75_75_0   \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        933274 \u2502\r\n\u2502 10        \u2502 10_86_86_0   \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        927844 \u2502\r\n\u2502 10        \u2502 10_99_99_0   \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        928094 \u2502\r\n\u2502 10        \u2502 10_118_118_0 \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        487836 \u2502\r\n\u2502 11        \u2502 11_5_71_1    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5568108 \u2502\r\n\u2502 11        \u2502 11_73_73_0   \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        899391 \u2502\r\n\u2502 11        \u2502 11_95_95_0   \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        900161 \u2502\r\n\u2502 11        \u2502 11_108_108_0 \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        896461 \u2502\r\n\u2502 11        \u2502 11_113_113_0 \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        471726 \u2502\r\n\u2502 12        \u2502 12_3_61_1    \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502       5570900 \u2502\r\n\u2502 12        \u2502 12_119_119_0 \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        471695 \u2502\r\n\u2502 12        \u2502 12_100_100_0 \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        901110 \u2502\r\n\u2502 12        \u2502 12_85_85_0   \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        900259 \u2502\r\n\u2502 12        \u2502 12_78_78_0   \u2502 00000000-0000-0000-0000-000000000000 \u2502 default   \u2502 ['2024-05-09 15:08:29'] \u2502 ['2024-05-09 15:08:29'] \u2502        898663 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n60 rows in set. Elapsed: 0.005 sec. \r\n\r\nrc1a-g123qt0h5lfckic3.mdb.yandexcloud.net :) select now()\r\n\r\nSELECT now()\r\n\r\nQuery id: 6208cfb0-6062-4761-95d8-fce51e2e80d7\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500now()\u2500\u2510\r\n\u2502 2024-05-09 15:44:57 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.002 sec.\r\n```\r\n\r\n**Expected behavior**\r\n\r\nExpected that parts will move to S3.\r\n\r\n\n",
  "hints_text": ">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500now()\u2500\u2510\r\n>\u2502 2024-05-09 15:44:57 \u2502\r\n>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n>2024-05-09 15:08:29\r\n\r\nIt proofs nothing. \r\nTTL works eventually.\r\nWhy those parts are not moved in 24.1 ? Did you stop Clickhouse immediately after insertion?\n> Why those parts are not moved in 24.1 ? Did you stop Clickhouse immediately after insertion?\r\n\r\nAfter inserting the data I immediately updated to 24.2. After update TTL for parts that created in 24.1 doesn't work.\n> > Why those parts are not moved in 24.1 ? Did you stop Clickhouse immediately after insertion?\r\n> \r\n> After inserting the data I immediately updated to 24.2. After update TTL for parts that created in 24.1 doesn't work.\r\n\r\nOK, what if you just restart 24.1 ? I guess it will be the same. And it's expected behaviour, and I can explain it.\r\n\n> > > Why those parts are not moved in 24.1 ? Did you stop Clickhouse immediately after insertion?\r\n> > \r\n> > \r\n> > After inserting the data I immediately updated to 24.2. After update TTL for parts that created in 24.1 doesn't work.\r\n> \r\n> OK, what if you just restart 24.1 ? I guess it will be the same. And it's expected behaviour, and I can explain it.\r\n\r\nIve done as you say: inserted data in CH 24.1 and immediately restart. TTL finished correctly. This behavior is diffrent  if instead of restarting I do an update to 24.2.",
  "created_at": "2024-05-31T12:43:01Z"
}