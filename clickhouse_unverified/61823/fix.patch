diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp
index efc37fd76afd..ffe45d556438 100644
--- a/src/Interpreters/InterpreterSelectQuery.cpp
+++ b/src/Interpreters/InterpreterSelectQuery.cpp
@@ -2499,10 +2499,13 @@ void InterpreterSelectQuery::executeFetchColumns(QueryProcessingStage::Enum proc
             max_block_size = std::max<UInt64>(1, max_block_limited);
             max_threads_execute_query = max_streams = 1;
         }
+
         if (local_limits.local_limits.size_limits.max_rows != 0)
         {
             if (max_block_limited < local_limits.local_limits.size_limits.max_rows)
                 query_info.limit = max_block_limited;
+            else if (local_limits.local_limits.size_limits.max_rows < std::numeric_limits<UInt64>::max()) /// Ask to read just enough rows to make the max_rows limit effective (so it has a chance to be triggered).
+                query_info.limit = 1 + local_limits.local_limits.size_limits.max_rows;
         }
         else
         {
diff --git a/src/Planner/PlannerJoinTree.cpp b/src/Planner/PlannerJoinTree.cpp
index 514c19b0f89c..bf1ebe6740b7 100644
--- a/src/Planner/PlannerJoinTree.cpp
+++ b/src/Planner/PlannerJoinTree.cpp
@@ -691,6 +691,9 @@ JoinTreeQueryPlan buildQueryPlanForTableExpression(QueryTreeNodePtr table_expres
                 {
                     if (max_block_size_limited < select_query_info.local_storage_limits.local_limits.size_limits.max_rows)
                         table_expression_query_info.limit = max_block_size_limited;
+                    /// Ask to read just enough rows to make the max_rows limit effective (so it has a chance to be triggered).
+                    else if (select_query_info.local_storage_limits.local_limits.size_limits.max_rows < std::numeric_limits<UInt64>::max())
+                        table_expression_query_info.limit = 1 + select_query_info.local_storage_limits.local_limits.size_limits.max_rows;
                 }
                 else
                 {
diff --git a/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp b/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp
index 7a61d09bdd2d..11371578c79c 100644
--- a/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp
+++ b/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp
@@ -12,8 +12,8 @@
 #include <fmt/format.h>
 #include <Common/iota.h>
 #include <Common/typeid_cast.h>
-#include "Core/Types.h"
-#include "base/types.h"
+#include <Core/Types.h>
+
 
 namespace DB
 {
@@ -443,7 +443,6 @@ Pipe ReadFromSystemNumbersStep::makePipe()
     /// Build rpn of query filters
     KeyCondition condition(filter_actions_dag, context, column_names, key_expression);
 
-
     if (condition.extractPlainRanges(ranges))
     {
         /// Intersect ranges with table range
@@ -505,7 +504,6 @@ Pipe ReadFromSystemNumbersStep::makePipe()
             }
         }
 
-
         /// ranges is blank, return a source who has no data
         if (intersected_ranges.empty())
         {
diff --git a/src/Processors/QueryPlan/ReadFromSystemNumbersStep.h b/src/Processors/QueryPlan/ReadFromSystemNumbersStep.h
index cab0686474ba..bc84e31be626 100644
--- a/src/Processors/QueryPlan/ReadFromSystemNumbersStep.h
+++ b/src/Processors/QueryPlan/ReadFromSystemNumbersStep.h
@@ -8,6 +8,7 @@
 #include <Storages/SelectQueryInfo.h>
 #include <Storages/StorageSnapshot.h>
 
+
 namespace DB
 {
 
@@ -43,4 +44,5 @@ class ReadFromSystemNumbersStep final : public SourceStepWithFilter
     UInt64 limit;
     std::shared_ptr<const StorageLimitsList> storage_limits;
 };
+
 }
diff --git a/src/Storages/StorageGenerateRandom.cpp b/src/Storages/StorageGenerateRandom.cpp
index fbce6c2bb7d1..cdbade51695b 100644
--- a/src/Storages/StorageGenerateRandom.cpp
+++ b/src/Storages/StorageGenerateRandom.cpp
@@ -3,6 +3,7 @@
 #include <Storages/StorageGenerateRandom.h>
 #include <Storages/StorageFactory.h>
 #include <Storages/checkAndGetLiteralArgument.h>
+#include <Storages/SelectQueryInfo.h>
 #include <Processors/Sources/SourceFromSingleChunk.h>
 #include <QueryPipeline/Pipe.h>
 #include <Parsers/ASTLiteral.h>
@@ -30,12 +31,9 @@
 #include <Common/SipHash.h>
 #include <Common/randomSeed.h>
 #include <Interpreters/Context.h>
-#include <base/unaligned.h>
 
 #include <Functions/FunctionFactory.h>
 
-#include <pcg_random.hpp>
-
 
 namespace DB
 {
@@ -639,7 +637,7 @@ void registerStorageGenerateRandom(StorageFactory & factory)
 Pipe StorageGenerateRandom::read(
     const Names & column_names,
     const StorageSnapshotPtr & storage_snapshot,
-    SelectQueryInfo & /*query_info*/,
+    SelectQueryInfo & query_info,
     ContextPtr context,
     QueryProcessingStage::Enum /*processed_stage*/,
     size_t max_block_size,
@@ -682,7 +680,14 @@ Pipe StorageGenerateRandom::read(
     pcg64 generate(random_seed);
 
     for (UInt64 i = 0; i < num_streams; ++i)
-        pipes.emplace_back(std::make_shared<GenerateSource>(max_block_size, max_array_length, max_string_length, generate(), block_header, context));
+    {
+        auto source = std::make_shared<GenerateSource>(max_block_size, max_array_length, max_string_length, generate(), block_header, context);
+
+        if (i == 0 && query_info.limit)
+            source->addTotalRowsApprox(query_info.limit);
+
+        pipes.emplace_back(std::move(source));
+    }
 
     return Pipe::unitePipes(std::move(pipes));
 }
diff --git a/src/Storages/System/StorageSystemNumbers.cpp b/src/Storages/System/StorageSystemNumbers.cpp
index 629b11ee7f1f..da700a7a4e9d 100644
--- a/src/Storages/System/StorageSystemNumbers.cpp
+++ b/src/Storages/System/StorageSystemNumbers.cpp
@@ -1,17 +1,14 @@
 #include <Storages/System/StorageSystemNumbers.h>
 
 #include <mutex>
-#include <Columns/ColumnsNumber.h>
 #include <DataTypes/DataTypesNumber.h>
 #include <Interpreters/InterpreterSelectQuery.h>
-#include <Processors/ISource.h>
 #include <Processors/LimitTransform.h>
 #include <Processors/QueryPlan/QueryPlan.h>
 #include <Processors/QueryPlan/ReadFromSystemNumbersStep.h>
-#include <Processors/Sources/NullSource.h>
-#include <QueryPipeline/Pipe.h>
 #include <Storages/SelectQueryInfo.h>
 
+
 namespace DB
 {
 
diff --git a/src/Storages/System/StorageSystemZeros.cpp b/src/Storages/System/StorageSystemZeros.cpp
index ce2e153ea666..a48b109fbbe5 100644
--- a/src/Storages/System/StorageSystemZeros.cpp
+++ b/src/Storages/System/StorageSystemZeros.cpp
@@ -1,4 +1,5 @@
 #include <Storages/System/StorageSystemZeros.h>
+#include <Storages/SelectQueryInfo.h>
 
 #include <Processors/ISource.h>
 #include <QueryPipeline/Pipe.h>
@@ -6,6 +7,7 @@
 #include <DataTypes/DataTypesNumber.h>
 #include <Columns/ColumnsNumber.h>
 
+
 namespace DB
 {
 
@@ -93,7 +95,7 @@ StorageSystemZeros::StorageSystemZeros(const StorageID & table_id_, bool multith
 Pipe StorageSystemZeros::read(
     const Names & column_names,
     const StorageSnapshotPtr & storage_snapshot,
-    SelectQueryInfo &,
+    SelectQueryInfo & query_info,
     ContextPtr /*context*/,
     QueryProcessingStage::Enum /*processed_stage*/,
     size_t max_block_size,
@@ -123,8 +125,13 @@ Pipe StorageSystemZeros::read(
     {
         auto source = std::make_shared<ZerosSource>(max_block_size, limit ? *limit : 0, state);
 
-        if (limit && i == 0)
-            source->addTotalRowsApprox(*limit);
+        if (i == 0)
+        {
+            if (limit)
+                source->addTotalRowsApprox(*limit);
+            else if (query_info.limit)
+                source->addTotalRowsApprox(query_info.limit);
+        }
 
         res.addSource(std::move(source));
     }
