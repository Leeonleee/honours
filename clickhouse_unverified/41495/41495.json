{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 41495,
  "instance_id": "ClickHouse__ClickHouse-41495",
  "issue_numbers": [
    "41452"
  ],
  "base_commit": "f6fd4bc3d3dc93150b1a36c294efbb18e9b2721c",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 275a15f3ee61..5660e0475004 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -126,6 +126,7 @@ static constexpr UInt64 operator\"\"_GiB(unsigned long long value)\n     M(Float, totals_auto_threshold, 0.5, \"The threshold for totals_mode = 'auto'.\", 0) \\\n     \\\n     M(Bool, allow_suspicious_low_cardinality_types, false, \"In CREATE TABLE statement allows specifying LowCardinality modifier for types of small fixed size (8 or less). Enabling this may increase merge times and memory consumption.\", 0) \\\n+    M(Bool, allow_suspicious_fixed_string_types, false, \"In CREATE TABLE statement allows creating columns of type FixedString(n) with n > 256. FixedString with length >= 256 is suspicious and most likely indicates misusage\", 0) \\\n     M(Bool, compile_expressions, true, \"Compile some scalar functions and operators to native code.\", 0) \\\n     M(UInt64, min_count_to_compile_expression, 3, \"The number of identical expressions before they are JIT-compiled\", 0) \\\n     M(Bool, compile_aggregate_expressions, true, \"Compile aggregate functions to native code.\", 0) \\\ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 21a02ba351f1..f2cf38a0205e 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -74,8 +74,11 @@\n \n #include <TableFunctions/TableFunctionFactory.h>\n #include <Common/logger_useful.h>\n+#include <DataTypes/DataTypeFixedString.h>\n \n \n+#define MAX_FIXEDSTRING_SIZE_WITHOUT_SUSPICIOUS 256\n+\n namespace DB\n {\n \n@@ -806,6 +809,22 @@ void InterpreterCreateQuery::validateTableStructure(const ASTCreateQuery & creat\n             }\n         }\n     }\n+    if (!create.attach && !settings.allow_suspicious_fixed_string_types)\n+    {\n+        for (const auto & [name, type] : properties.columns.getAllPhysical())\n+        {\n+            auto basic_type = removeLowCardinality(removeNullable(type));\n+            if (const auto * fixed_string = typeid_cast<const DataTypeFixedString *>(basic_type.get()))\n+            {\n+                if (fixed_string->getN() > MAX_FIXEDSTRING_SIZE_WITHOUT_SUSPICIOUS)\n+                    throw Exception(ErrorCodes::ILLEGAL_COLUMN,\n+                        \"Cannot create table with column '{}' which type is '{}' \"\n+                        \"because fixed string with size > {} is suspicious. \"\n+                        \"Set setting allow_suspicious_fixed_string_types = 1 in order to allow it\",\n+                        name, type->getName(), MAX_FIXEDSTRING_SIZE_WITHOUT_SUSPICIOUS);\n+            }\n+        }\n+    }\n }\n \n String InterpreterCreateQuery::getTableEngineName(DefaultTableEngine default_table_engine)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02426_create_suspicious_fixed_string.reference b/tests/queries/0_stateless/02426_create_suspicious_fixed_string.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02426_create_suspicious_fixed_string.sql b/tests/queries/0_stateless/02426_create_suspicious_fixed_string.sql\nnew file mode 100644\nindex 000000000000..c681c3c54d67\n--- /dev/null\n+++ b/tests/queries/0_stateless/02426_create_suspicious_fixed_string.sql\n@@ -0,0 +1,4 @@\n+CREATE TABLE fixed_string (id UInt64, s FixedString(256)) ENGINE = MergeTree() ORDER BY id;\n+CREATE TABLE suspicious_fixed_string (id UInt64, s FixedString(257)) ENGINE = MergeTree() ORDER BY id; -- { serverError 44 }\n+SET allow_suspicious_fixed_string_types = 1;\n+CREATE TABLE suspicious_fixed_string (id UInt64, s FixedString(257)) ENGINE = MergeTree() ORDER BY id;\ndiff --git a/tests/queries/0_stateless/02426_low_cardinality_fixed_string_insert_field.sh b/tests/queries/0_stateless/02426_low_cardinality_fixed_string_insert_field.sh\nindex dc9f1ec8ed26..7c367329b903 100755\n--- a/tests/queries/0_stateless/02426_low_cardinality_fixed_string_insert_field.sh\n+++ b/tests/queries/0_stateless/02426_low_cardinality_fixed_string_insert_field.sh\n@@ -5,4 +5,4 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n # shellcheck source=../shell_config.sh\n . \"$CURDIR\"/../shell_config.sh\n \n-${CLICKHOUSE_LOCAL} --structure 'x LowCardinality(FixedString(2454139))' --input-format Values --output-format TSV --query \"SELECT * FROM table\" <<< '(1)' | wc -c\n+${CLICKHOUSE_LOCAL} --allow_suspicious_fixed_string_types 1 --structure 'x LowCardinality(FixedString(2454139))' --input-format Values --output-format TSV --query \"SELECT * FROM table\" <<< '(1)' | wc -c\n",
  "problem_statement": "A setting `allow_suspicious_fixed_string_types`\n**Use case**\r\n\r\nIf FixedString is used with more than 256 bytes in size, it is suspicious and most likely indicates misusage.\r\nForbid this by default and add a setting to override it; ATTACH queries should allow creating tables nevertheless.\r\n\r\nSee also: `allow_suspicious_low_cardinality_types`.\r\n\n",
  "hints_text": "",
  "created_at": "2022-09-19T08:30:48Z",
  "modified_files": [
    "src/Core/Settings.h",
    "src/Interpreters/InterpreterCreateQuery.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02426_create_suspicious_fixed_string.sql",
    "tests/queries/0_stateless/02426_low_cardinality_fixed_string_insert_field.sh"
  ]
}