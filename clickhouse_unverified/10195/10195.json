{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10195,
  "instance_id": "ClickHouse__ClickHouse-10195",
  "issue_numbers": [
    "10092"
  ],
  "base_commit": "121bf7b8c2bbfc2f09379afa2232a8b1b8754844",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp b/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp\nindex fa29494d1c9f..749c0d645258 100644\n--- a/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp\n+++ b/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp\n@@ -202,10 +202,10 @@ void MergeTreeWhereOptimizer::optimize(ASTSelectQuery & select) const\n         prewhere_conditions.splice(prewhere_conditions.end(), where_conditions, cond_it);\n         total_size_of_moved_conditions += cond_it->columns_size;\n \n-        /// Move all other conditions that depend on the same set of columns.\n+        /// Move all other viable conditions that depend on the same set of columns.\n         for (auto jt = where_conditions.begin(); jt != where_conditions.end();)\n         {\n-            if (jt->columns_size == cond_it->columns_size && jt->identifiers == cond_it->identifiers)\n+            if (jt->viable && jt->columns_size == cond_it->columns_size && jt->identifiers == cond_it->identifiers)\n                 prewhere_conditions.splice(prewhere_conditions.end(), where_conditions, jt++);\n             else\n                 ++jt;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01115_prewhere_array_join.reference b/tests/queries/0_stateless/01115_prewhere_array_join.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01115_prewhere_array_join.sql b/tests/queries/0_stateless/01115_prewhere_array_join.sql\nnew file mode 100644\nindex 000000000000..e614bdf402b4\n--- /dev/null\n+++ b/tests/queries/0_stateless/01115_prewhere_array_join.sql\n@@ -0,0 +1,7 @@\n+DROP TABLE IF EXISTS prewhere;\n+\n+CREATE TABLE prewhere (light UInt8, heavy String) ENGINE = MergeTree ORDER BY tuple();\n+INSERT INTO prewhere SELECT 0, randomPrintableASCII(10000) FROM numbers(10000);\n+SELECT arrayJoin([light]) != 0 AS cond, length(heavy) FROM prewhere WHERE light != 0 AND cond != 0;\n+\n+DROP TABLE prewhere;\ndiff --git a/tests/queries/1_stateful/00093_prewhere_array_join.reference b/tests/queries/1_stateful/00093_prewhere_array_join.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/1_stateful/00093_prewhere_array_join.sql b/tests/queries/1_stateful/00093_prewhere_array_join.sql\nnew file mode 100644\nindex 000000000000..a1263144bb19\n--- /dev/null\n+++ b/tests/queries/1_stateful/00093_prewhere_array_join.sql\n@@ -0,0 +1,9 @@\n+SELECT arrayJoin([SearchEngineID]) AS search_engine, URL FROM test.hits WHERE SearchEngineID != 0 AND search_engine != 0 FORMAT Null;\n+\n+SELECT\n+    arrayJoin([0]) AS browser,\n+    arrayJoin([SearchEngineID]) AS search_engine,\n+    URL\n+FROM test.hits\n+WHERE 1 AND (SearchEngineID != 0) AND (browser != 0) AND (search_engine != 0)\n+FORMAT Null;\n",
  "problem_statement": "PREWHERE cannot contain ARRAY JOIN or JOIN action\nWith `visits` table from [Yandex.Metrika dataset](https://clickhouse.tech/docs/en/getting_started/example_datasets/metrica/):\r\n\r\n```\r\nSELECT \r\n    arrayJoin([0]) AS browser, \r\n    arrayJoin([SearchEngineID]) AS search_engine, \r\n    URL\r\nFROM visits\r\nWHERE 1 AND (SearchEngineID != 0) AND (browser != 0) AND (search_engine != 0)\r\n\r\nReceived exception from server (version 20.4.1):\r\nCode: 182. DB::Exception: Received from localhost:9000. DB::Exception: PREWHERE cannot contain ARRAY JOIN or JOIN action. Stack trace:\r\n```\r\n\r\nDoes not reproduce with `set optimize_move_to_prewhere = 0`.\n",
  "hints_text": "FYI. In my case it reproduces on `hits` table, not `visits`.\nAccording to the code, it was broken long time ago.\nMore than one year ago, starting from 19.4.\nBut it works on 19.4.\nMinimal reproducing example:\r\n`SELECT arrayJoin([SearchEngineID]) AS search_engine, URL FROM test.hits WHERE SearchEngineID != 0 AND search_engine != 0`",
  "created_at": "2020-04-11T22:16:13Z"
}