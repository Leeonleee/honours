{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 31800,
  "instance_id": "ClickHouse__ClickHouse-31800",
  "issue_numbers": [
    "30980"
  ],
  "base_commit": "b39c19399ff951a598dd35e575c715c5c4dfb5a2",
  "patch": "diff --git a/src/Functions/FunctionsExternalDictionaries.h b/src/Functions/FunctionsExternalDictionaries.h\nindex 7dc47b54bea3..c52d54f30aa5 100644\n--- a/src/Functions/FunctionsExternalDictionaries.h\n+++ b/src/Functions/FunctionsExternalDictionaries.h\n@@ -662,18 +662,13 @@ class FunctionDictGetImpl final : public IFunction\n     {\n         auto return_type = impl.getReturnTypeImpl(arguments);\n \n-        if (!areTypesEqual(return_type, result_type))\n+        if (!return_type->equals(*result_type))\n             throw Exception{\"Dictionary attribute has different type \" + return_type->getName() + \" expected \" + result_type->getName(),\n                     ErrorCodes::TYPE_MISMATCH};\n \n         return impl.executeImpl(arguments, return_type, input_rows_count);\n     }\n \n-    static bool areTypesEqual(const DataTypePtr & lhs, const DataTypePtr & rhs)\n-    {\n-        return removeNullable(recursiveRemoveLowCardinality(lhs))->equals(*removeNullable(recursiveRemoveLowCardinality(rhs)));\n-    }\n-\n     const FunctionDictGetNoType<dictionary_get_function_type> impl;\n };\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02125_dict_get_type_nullable_fix.reference b/tests/queries/0_stateless/02125_dict_get_type_nullable_fix.reference\nnew file mode 100644\nindex 000000000000..af53c9c3c217\n--- /dev/null\n+++ b/tests/queries/0_stateless/02125_dict_get_type_nullable_fix.reference\n@@ -0,0 +1,1 @@\n+Value\ndiff --git a/tests/queries/0_stateless/02125_dict_get_type_nullable_fix.sql b/tests/queries/0_stateless/02125_dict_get_type_nullable_fix.sql\nnew file mode 100644\nindex 000000000000..01fea381bf3b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02125_dict_get_type_nullable_fix.sql\n@@ -0,0 +1,22 @@\n+DROP TABLE IF EXISTS 02125_test_table;\n+CREATE TABLE 02125_test_table\n+(\n+    id UInt64,\n+    value Nullable(String)\n+)\n+ENGINE=TinyLog;\n+\n+INSERT INTO 02125_test_table VALUES (0, 'Value');\n+\n+DROP DICTIONARY IF EXISTS 02125_test_dictionary;\n+CREATE DICTIONARY 02125_test_dictionary\n+(\n+    id UInt64,\n+    value Nullable(String)\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(TABLE '02125_test_table'))\n+LAYOUT(DIRECT());\n+\n+SELECT dictGet('02125_test_dictionary', 'value', toUInt64(0));\n+SELECT dictGetString('02125_test_dictionary', 'value', toUInt64(0)); --{serverError 53}\n",
  "problem_statement": "Fatal Error if use dictGetString with Nullable String\n> version 21.9.4.35 (official build) and version 21.10.2.15 (official build)\r\n\r\n**If the attribute is nullable, a fatal error occurs when trying to get using dictGetString(). At the same time, dictGet() performs without errors.**\r\n\r\n```\r\n2021.11.02 09:09:07.707663 [ 9661 ] {} <Fatal> BaseDaemon: ########################################\r\n2021.11.02 09:09:07.707716 [ 9661 ] {} <Fatal> BaseDaemon: (version 21.9.4.35 (official build), build id: 5F55EEF74E2818F777B4052BF503DF5BA7BFD787) (from thread 245) (query_id: 93bc3f5b-4e86-4a5e-a888-3103860d9c5a) Received signal Segmentation fault (11)\r\n2021.11.02 09:09:07.707752 [ 9661 ] {} <Fatal> BaseDaemon: Address: 0xc380 Access: read. Address not mapped to object.\r\n2021.11.02 09:09:07.707795 [ 9661 ] {} <Fatal> BaseDaemon: Stack trace: 0x937ceb0 0x1186f3bf 0x1186ee00 0x118bdb74 0x93adeb8 0x93afa5f 0x93ab19f 0x93aea83 0x7f4c86cd6609 0x7f4c86bd2293\r\n2021.11.02 09:09:07.707912 [ 9661 ] {} <Fatal> BaseDaemon: 1. void DB::writeAnyEscapedString<(char)39, false>(char const*, char const*, DB::WriteBuffer&) @ 0x937ceb0 in /usr/bin/clickhouse\r\n2021.11.02 09:09:07.708281 [ 9661 ] {} <Fatal> BaseDaemon: 2. DB::IRowOutputFormat::write(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, unsigned long) @ 0x1186f3bf in /usr/bin/clickhouse\r\n2021.11.02 09:09:07.708330 [ 9661 ] {} <Fatal> BaseDaemon: 3. DB::IRowOutputFormat::consume(DB::Chunk) @ 0x1186ee00 in /usr/bin/clickhouse\r\n2021.11.02 09:09:07.708358 [ 9661 ] {} <Fatal> BaseDaemon: 4. DB::ParallelFormattingOutputFormat::formatterThreadFunction(unsigned long, std::__1::shared_ptr<DB::ThreadGroupStatus> const&) @ 0x118bdb74 in /usr/bin/clickhouse\r\n2021.11.02 09:09:07.708385 [ 9661 ] {} <Fatal> BaseDaemon: 5. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x93adeb8 in /usr/bin/clickhouse\r\n2021.11.02 09:09:07.708417 [ 9661 ] {} <Fatal> BaseDaemon: 6. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()&&...)::'lambda'()::operator()() @ 0x93afa5f in /usr/bin/clickhouse\r\n2021.11.02 09:09:07.708446 [ 9661 ] {} <Fatal> BaseDaemon: 7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x93ab19f in /usr/bin/clickhouse\r\n2021.11.02 09:09:07.708469 [ 9661 ] {} <Fatal> BaseDaemon: 8. ? @ 0x93aea83 in /usr/bin/clickhouse\r\n2021.11.02 09:09:07.708502 [ 9661 ] {} <Fatal> BaseDaemon: 9. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n2021.11.02 09:09:07.708533 [ 9661 ] {} <Fatal> BaseDaemon: 10. __clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n2021.11.02 09:09:07.824821 [ 9661 ] {} <Fatal> BaseDaemon: Checksum of the binary: BEA07E96B6BEBA1591FE837CF53C7591, integrity check passed.\r\n2021.11.02 09:09:27.757877 [ 93 ] {} <Fatal> Application: Child process was terminated by signal 11.\r\n```\r\n\r\n```drop table if exists default.test_table\r\n;\r\ncreate table if not exists default.test_table\r\n(\r\n    id       UInt64 default toUInt64(now64()),\r\n    any_text Nullable(String)\r\n) engine MergeTree primary key id\r\n;\r\ndrop dictionary if exists default.test_dict\r\n;\r\ncreate dictionary if not exists default.test_dict (id UInt64,\r\n    any_text Nullable(String))\r\n    primary key id\r\n    SOURCE (CLICKHOUSE(HOST 'localhost' PORT 9000 DB 'default' TABLE 'test_table'))\r\nLAYOUT(HASHED)\r\nLIFETIME(min 10 max 20)\r\n;\r\ninsert into default.test_table (id,any_text)\r\nvalues (1635818854,null)\r\n;\r\nselect * from default.test_dict\r\n--normal\r\n;\r\nselect dictGet('default.test_dict','any_text',toUInt64(1635818854))\r\n-- normal\r\n;\r\nselect dictGetString('default.test_dict','any_text',toUInt64(1635818854))\r\n-- error\r\n;\r\n```\r\n\r\n* 21.9.4 release and 21.10.2 release\r\n* Webstorm and datagreep\r\n\r\n* default> select dictGetString('default.test_dict','any_text',toUInt64(1635818854))  \r\n[2021-11-02 09:20:28] Connection refused: connect\n",
  "hints_text": "Hello, can you tell me when the request will be taken into operation?\n@kitaisreal You can be interested in this. Now I'm getting `LOGICAL_ERROR` and it's also not ok:\r\n```\r\nCREATE TABLE IF NOT EXISTS default.test_table                                                                                                                                                                                                 \r\n(                                                                                                                                                                                                                                             \r\n    `id` UInt64 DEFAULT toUInt64(now64()),                                                                                                                                                                                                    \r\n    `any_text` Nullable(String)                                                                                                                                                                                                               \r\n)                                                                                                                                                                                                                                             \r\nENGINE = MergeTree                                                                                                                                                                                                                            \r\nPRIMARY KEY id              \r\n                                                                                                                                                                                                                  \r\nCREATE DICTIONARY IF NOT EXISTS default.test_dict\r\n(\r\n    `id` UInt64,\r\n    `any_text` Nullable(String)\r\n)\r\nPRIMARY KEY id\r\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 DB 'default' TABLE 'test_table'))\r\nLIFETIME(MIN 10 MAX 20)\r\nLAYOUT(HASHED)\r\n\r\ninsert into default.test_table (id, any_text) values (1635818854, null)\r\n\r\nSELECT *\r\nFROM default.test_dict\r\n\r\nQuery id: f83e81e7-3e50-4e61-b785-bdac4ee422c0\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500id\u2500\u252c\u2500any_text\u2500\u2510\r\n\u2502 1635818854 \u2502 \u1d3a\u1d41\u1d38\u1d38     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT dictGet('default.test_dict', 'any_text', toUInt64(1635818854))\r\n\r\nQuery id: c6130371-9ee9-44ad-a201-bc16941860e9\r\n\r\n\u250c\u2500dictGet('default.test_dict', 'any_text', toUInt64(1635818854))\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38                                                           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT dictGetString('default.test_dict', 'any_text', toUInt64(1635818854))\r\n\r\nQuery id: 099b6ab8-79fb-4e8d-964b-5c353977f986\r\n\r\n\r\n0 rows in set. Elapsed: 0.498 sec.\r\n\r\nReceived exception from server (version 21.11.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Bad cast from type DB::ColumnNullable to DB::ColumnString. (LOGICAL_ERROR)\r\n```\nHello, I got the same error with dictGetUInt64, I suspect that this situation may concern all modifications of dictGet with types\nOn http://localhost:8123/play example:\r\n![image](https://user-images.githubusercontent.com/33506228/140255671-7ed6b8ea-12d2-43e7-a224-b480dd05ca3b.png)\r\nThe problem manifests itself when sending a request to the http interface.\r\nOn clickhouse-client realy logical error, it's not critical, but on http it's fatal\nplease raise the priority by mistake?\r\n",
  "created_at": "2021-11-25T14:08:19Z"
}