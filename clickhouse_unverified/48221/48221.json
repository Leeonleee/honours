{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48221,
  "instance_id": "ClickHouse__ClickHouse-48221",
  "issue_numbers": [
    "48068"
  ],
  "base_commit": "681d5b25bf5a7568bdb16638ed45c0eae5519d63",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp b/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\nindex 77b5547207c6..21cb112cb146 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\n@@ -61,11 +61,15 @@ static AggregateProjectionInfo getAggregatingProjectionInfo(\n     /// This is a bad approach.\n     /// We'd better have a separate interpreter for projections.\n     /// Now it's not obvious we didn't miss anything here.\n+    ///\n+    /// Setting ignoreASTOptimizations is used because some of them are invalid for projections.\n+    /// Example: 'SELECT min(c0), max(c0), count() GROUP BY -c0' for minmax_count projection can be rewritten to\n+    /// 'SELECT min(c0), max(c0), count() GROUP BY c0' which is incorrect cause we store a column '-c0' in projection.\n     InterpreterSelectQuery interpreter(\n         projection.query_ast,\n         context,\n         Pipe(std::make_shared<SourceFromSingleChunk>(metadata_snapshot->getSampleBlock())),\n-        SelectQueryOptions{QueryProcessingStage::WithMergeableState});\n+        SelectQueryOptions{QueryProcessingStage::WithMergeableState}.ignoreASTOptimizations());\n \n     const auto & analysis_result = interpreter.getAnalysisResult();\n     const auto & query_analyzer = interpreter.getQueryAnalyzer();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/25402_projection_and_ast_optimizations_bug.reference b/tests/queries/0_stateless/25402_projection_and_ast_optimizations_bug.reference\nnew file mode 100644\nindex 000000000000..9049324c3921\n--- /dev/null\n+++ b/tests/queries/0_stateless/25402_projection_and_ast_optimizations_bug.reference\n@@ -0,0 +1,1 @@\n+-2.5574077246549023\t0.6663667453928805\t1\ndiff --git a/tests/queries/0_stateless/25402_projection_and_ast_optimizations_bug.sql b/tests/queries/0_stateless/25402_projection_and_ast_optimizations_bug.sql\nnew file mode 100644\nindex 000000000000..5589fbeeb9e1\n--- /dev/null\n+++ b/tests/queries/0_stateless/25402_projection_and_ast_optimizations_bug.sql\n@@ -0,0 +1,6 @@\n+drop table if exists t1;\n+CREATE TABLE t1 (c0 Int32) ENGINE = MergeTree() ORDER BY c0 PARTITION BY (- (c0));\n+insert into t1 values(1);\n+SELECT (- ((((tan (t1.c0)))+(t1.c0)))), (cos ((sin (pow(t1.c0,t1.c0))))), ((gcd((- (t1.c0)),((t1.c0)+(t1.c0))))*((- ((- (t1.c0)))))) FROM t1 GROUP BY (sqrt ((- (t1.c0)))), t1.c0, pow((erf ((- (t1.c0)))),t1.c0);\n+drop table t1;\n+\n",
  "problem_statement": "Analyzer:  Logical error: 'Cannot find column c0 in minmax_count projection but query analysis still selects this projection. It's a bug'.\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/556680966f17b539847060d00f0107fac69c83ad/sqlancer__debug_.html\r\n\r\n```\r\n2023.03.27 16:20:56.822493 [ 53 ] {} <Trace> DynamicQueryHandler: Request URI: /?compress=1&extremes=0&query_id=baa4e60c-c209-40dc-996b-1eb1b9522bf6\r\n2023.03.27 16:20:56.836502 [ 53 ] {baa4e60c-c209-40dc-996b-1eb1b9522bf6} <Debug> executeQuery: (from 127.0.0.1:44784) SELECT (- ((((tan (t1.c0)))+(t1.c0)))), (cos ((sin (pow(t1.c0,t1.c0))))), ((gcd((- (t1.c0)),((t1.c0)+(t1.c0))))*((- ((- (t1.c0)))))) FROM t1 GROUP BY (sqrt ((- (t1.c0)))), t1.c0, pow((erf ((- (t1.c0)))),t1.c0) (stage: Complete)\r\n2023.03.27 16:20:56.847195 [ 53 ] {baa4e60c-c209-40dc-996b-1eb1b9522bf6} <Trace> ContextAccess (default): Access granted: SELECT(c0) ON database7TLPGroupBy.t1\r\n2023.03.27 16:20:56.847860 [ 53 ] {baa4e60c-c209-40dc-996b-1eb1b9522bf6} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2023.03.27 16:20:56.863555 [ 53 ] {baa4e60c-c209-40dc-996b-1eb1b9522bf6} <Fatal> : Logical error: 'Cannot find column c0 in minmax_count projection but query analysis still selects this projection. It's a bug'.\r\n2023.03.27 16:20:56.864612 [ 442 ] {} <Fatal> BaseDaemon: (version 23.3.1.1 (official build), build id: D5BCCED898CCA6006D86AA48C9B624F124E4FF05) (from thread 53) (query_id: baa4e60c-c209-40dc-996b-1eb1b9522bf6) (query: SELECT (- ((((tan (t1.c0)))+(t1.c0)))), (cos ((sin (pow(t1.c0,t1.c0))))), ((gcd((- (t1.c0)),((t1.c0)+(t1.c0))))*((- ((- (t1.c0)))))) FROM t1 GROUP BY (sqrt ((- (t1.c0)))), t1.c0, pow((erf ((- (t1.c0)))),t1.c0)) Received signal Aborted (6)\r\n```\r\n\r\n```\r\n2023.03.27 16:20:56.863555 [ 53 ] {baa4e60c-c209-40dc-996b-1eb1b9522bf6} <Fatal> : Logical error: 'Cannot find column c0 in minmax_count projection but query analysis still selects this projection. It's a bug'.\r\n2023.03.27 16:20:56.864450 [ 442 ] {} <Fatal> BaseDaemon: ########################################\r\n2023.03.27 16:20:56.864612 [ 442 ] {} <Fatal> BaseDaemon: (version 23.3.1.1 (official build), build id: D5BCCED898CCA6006D86AA48C9B624F124E4FF05) (from thread 53) (query_id: baa4e60c-c209-40dc-996b-1eb1b9522bf6) (query: SELECT (- ((((tan (t1.c0)))+(t1.c0)))), (cos ((sin (pow(t1.c0,t1.c0))))), ((gcd((- (t1.c0)),((t1.c0)+(t1.c0))))*((- ((- (t1.c0)))))) FROM t1 GROUP BY (sqrt ((- (t1.c0)))), t1.c0, pow((erf ((- (t1.c0)))),t1.c0)) Received signal Aborted (6)\r\n2023.03.27 16:20:56.864922 [ 442 ] {} <Fatal> BaseDaemon:\r\n2023.03.27 16:20:56.865065 [ 442 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f9ca1defa7c 0x7f9ca1d9b476 0x7f9ca1d817f3 0x21c27fb6 0x21c28035 0x21c2843f 0x1923db4a 0x19973ff3 0x2b765078 0x2c60e12c 0x2c60ecde 0x2c5cf305 0x2c52571d 0x2c525217 0x2a4fd28b 0x2a9bdbf7 0x2a9c26ad 0x2bd61b16 0x2bd64567 0x2be011dc 0x3127b9d9 0x3127c21c 0x314cc814 0x314c95ba 0x314c82be 0x7f9ca1dedb43 0x7f9ca1e7fa00\r\n2023.03.27 16:20:56.865211 [ 442 ] {} <Fatal> BaseDaemon: 4. pthread_kill @ 0x7f9ca1defa7c in ?\r\n2023.03.27 16:20:56.865448 [ 442 ] {} <Fatal> BaseDaemon: 5. raise @ 0x7f9ca1d9b476 in ?\r\n2023.03.27 16:20:56.865578 [ 442 ] {} <Fatal> BaseDaemon: 6. abort @ 0x7f9ca1d817f3 in ?\r\n2023.03.27 16:20:57.071095 [ 442 ] {} <Fatal> BaseDaemon: 7. /build/build_docker/../src/Common/Exception.cpp:41: DB::abortOnFailedAssertion(String const&) @ 0x21c27fb6 in /clickhouse\r\n2023.03.27 16:20:57.249226 [ 442 ] {} <Fatal> BaseDaemon: 8. /build/build_docker/../src/Common/Exception.cpp:64: DB::handle_error_code(String const&, int, bool, std::vector<void*, std::allocator<void*>> const&) @ 0x21c28035 in /clickhouse\r\n2023.03.27 16:20:57.427986 [ 442 ] {} <Fatal> BaseDaemon: 9. /build/build_docker/../src/Common/Exception.cpp:92: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x21c2843f in /clickhouse\r\n2023.03.27 16:20:57.580613 [ 442 ] {} <Fatal> BaseDaemon: 10. /build/build_docker/../src/Common/Exception.h:55: DB::Exception::Exception(String&&, int, bool) @ 0x1923db4a in /clickhouse\r\n2023.03.27 16:20:57.746426 [ 442 ] {} <Fatal> BaseDaemon: 11. /build/build_docker/../src/Common/Exception.h:82: DB::Exception::Exception<String const&>(int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x19973ff3 in /clickhouse\r\n2023.03.27 16:20:59.620509 [ 442 ] {} <Fatal> BaseDaemon: 12. /build/build_docker/../src/Storages/MergeTree/MergeTreeData.cpp:6433: DB::MergeTreeData::getMinMaxCountProjectionBlock(std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::vector<String, std::allocator<String>> const&, bool, DB::SelectQueryInfo const&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>> const&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&, std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>> const*, std::shared_ptr<DB::Context const>) const @ 0x2b765078 in /clickhouse\r\n2023.03.27 16:21:00.199048 [ 442 ] {} <Fatal> BaseDaemon: 13. /build/build_docker/../src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp:440: DB::QueryPlanOptimizations::getAggregateProjectionCandidates(DB::QueryPlan::Node&, DB::AggregatingStep&, DB::ReadFromMergeTree&, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>> const&) @ 0x2c60e12c in /clickhouse\r\n2023.03.27 16:21:00.803102 [ 442 ] {} <Fatal> BaseDaemon: 14. /build/build_docker/../src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp:525: DB::QueryPlanOptimizations::optimizeUseAggregateProjections(DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x2c60ecde in /clickhouse\r\n2023.03.27 16:21:00.935209 [ 442 ] {} <Fatal> BaseDaemon: 15. /build/build_docker/../src/Processors/QueryPlan/Optimizations/optimizeTree.cpp:127: DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x2c5cf305 in /clickhouse\r\n2023.03.27 16:21:01.234199 [ 442 ] {} <Fatal> BaseDaemon: 16. /build/build_docker/../src/Processors/QueryPlan/QueryPlan.cpp:465: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x2c52571d in /clickhouse\r\n2023.03.27 16:21:01.532994 [ 442 ] {} <Fatal> BaseDaemon: 17. /build/build_docker/../src/Processors/QueryPlan/QueryPlan.cpp:167: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x2c525217 in /clickhouse\r\n2023.03.27 16:21:01.937464 [ 442 ] {} <Fatal> BaseDaemon: 18. /build/build_docker/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:379: DB::InterpreterSelectWithUnionQuery::execute() @ 0x2a4fd28b in /clickhouse\r\n2023.03.27 16:21:02.299670 [ 442 ] {} <Fatal> BaseDaemon: 19. /build/build_docker/../src/Interpreters/executeQuery.cpp:713: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x2a9bdbf7 in /clickhouse\r\n2023.03.27 16:21:02.722516 [ 442 ] {} <Fatal> BaseDaemon: 20. /build/build_docker/../src/Interpreters/executeQuery.cpp:1229: DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, std::optional<DB::FormatSettings> const&) @ 0x2a9c26ad in /clickhouse\r\n2023.03.27 16:21:03.092500 [ 442 ] {} <Fatal> BaseDaemon: 21. /build/build_docker/../src/Server/HTTPHandler.cpp:838: DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&) @ 0x2bd61b16 in /clickhouse\r\n2023.03.27 16:21:03.392380 [ 442 ] {} <Fatal> BaseDaemon: 22. /build/build_docker/../src/Server/HTTPHandler.cpp:1033: DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x2bd64567 in /clickhouse\r\n2023.03.27 16:21:03.438585 [ 442 ] {} <Fatal> BaseDaemon: 23. /build/build_docker/../src/Server/HTTP/HTTPServerConnection.cpp:68: DB::HTTPServerConnection::run() @ 0x2be011dc in /clickhouse\r\n2023.03.27 16:21:03.477872 [ 442 ] {} <Fatal> BaseDaemon: 24. /build/build_docker/../base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x3127b9d9 in /clickhouse\r\n2023.03.27 16:21:03.529028 [ 442 ] {} <Fatal> BaseDaemon: 25. /build/build_docker/../base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x3127c21c in /clickhouse\r\n2023.03.27 16:21:03.588778 [ 442 ] {} <Fatal> BaseDaemon: 26. /build/build_docker/../base/poco/Foundation/src/ThreadPool.cpp:188: Poco::PooledThread::run() @ 0x314cc814 in /clickhouse\r\n2023.03.27 16:21:03.644909 [ 442 ] {} <Fatal> BaseDaemon: 27. /build/build_docker/../base/poco/Foundation/src/Thread.cpp:46: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x314c95ba in /clickhouse\r\n2023.03.27 16:21:03.699028 [ 442 ] {} <Fatal> BaseDaemon: 28. /build/build_docker/../base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x314c82be in /clickhouse\r\n2023.03.27 16:21:03.699266 [ 442 ] {} <Fatal> BaseDaemon: 29. ? @ 0x7f9ca1dedb43 in ?\r\n2023.03.27 16:21:03.699439 [ 442 ] {} <Fatal> BaseDaemon: 30. ? @ 0x7f9ca1e7fa00 in ?\r\n2023.03.27 16:21:05.485447 [ 442 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: AA5D4874CC30115D931057B006C36821)\r\n```\r\n\r\n```\r\nDROP DATABASE IF EXISTS database3TLPGroupBy;\r\nCREATE DATABASE IF NOT EXISTS database3TLPGroupBy;\r\nUSE database3TLPGroupBy;\r\nCREATE TABLE IF NOT EXISTS database3TLPGroupBy.t0 (c0 String) ENGINE = Memory() ;\r\nCREATE TABLE database3TLPGroupBy.t1 (c0 String) ENGINE = Memory() ;\r\nCREATE TABLE IF NOT EXISTS database3TLPGroupBy.t2 (c0 String) ENGINE = Log() ;\r\nCREATE TABLE database3TLPGroupBy.t3 (c0 Int32) ENGINE = Log() ;\r\nCREATE TABLE database3TLPGroupBy.t4 (c0 String) ENGINE = Memory() ;\r\nINSERT INTO t2(c0) VALUES ('zL');\r\nINSERT INTO t0(c0) VALUES ('* RbGr');\r\nINSERT INTO t2(c0) VALUES ('9P\t9d');\r\nINSERT INTO t2(c0) VALUES ('Osc?9*)'), ('');\r\nINSERT INTO t4(c0) VALUES ('-585625451');\r\nINSERT INTO t1(c0) VALUES ('Lstl');\r\nINSERT INTO t0(c0) VALUES ('');\r\nINSERT INTO t2(c0) VALUES ('-1174021174'), ('y\t.aq|');\r\nINSERT INTO t4(c0) VALUES ('A???\\r)F'), ('_gO&C?'), ('7iS');\r\nINSERT INTO t0(c0) VALUES ('OQ'), ('kt+');\r\nINSERT INTO t1(c0) VALUES ('');\r\nINSERT INTO t2(c0) VALUES ('');\r\nINSERT INTO t4(c0) VALUES ('');\r\n\r\nSELECT (- ((((tan (t1.c0)))+(t1.c0)))), (cos ((sin (pow(t1.c0,t1.c0))))), ((gcd((- (t1.c0)),((t1.c0)+(t1.c0))))*((- ((- (t1.c0)))))) FROM t1 GROUP BY (sqrt ((- (t1.c0)))), t1.c0, pow((erf ((- (t1.c0)))),t1.c0) SETTINGS allow_experimental_analyzer=1;\r\n```\r\n\r\ncc: @kitaisreal \n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/0/e43fc77a4e4809d9d769faab457c3071a1f66759/sqlancer__debug_.html\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/a123533b2f5b0a52faf09f550d13c7ee8d9dcc43/sqlancer__debug_.html\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/556680966f17b539847060d00f0107fac69c83ad/sqlancer__debug_.html\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/2773e5c35241d9f1cb53cbe46e90d4124725b6cb/sqlancer__release_.html\r\n\nRelated to #46537\n```\r\nCREATE TABLE t1 (c0 Int32) ENGINE = MergeTree() ORDER BY c0 PARTITION BY (- (c0));\r\ninsert into t1 values(1);\r\nSELECT (- ((((tan (t1.c0)))+(t1.c0)))), (cos ((sin (pow(t1.c0,t1.c0))))), ((gcd((- (t1.c0)),((t1.c0)+(t1.c0))))*((- ((- (t1.c0)))))) FROM t1 GROUP BY (sqrt ((- (t1.c0)))), t1.c0, pow((erf ((- (t1.c0)))),t1.c0) SETTINGS allow_experimental_analyzer=1;\r\n```\nThis query is failing also when using the analyzer but working when deactivating projections optimizations:\r\n\r\n```sql\r\nSELECT DISTINCT _partition_id\r\nFROM d_69ac26.test_ch_partitions_with_other_table_in_condition\r\nWHERE b > (\r\n    SELECT min(b)\r\n    FROM d_69ac26.other_table\r\n)\r\nSETTINGS allow_experimental_analyzer = 1\r\n\r\nQuery id: 2a47e336-44fc-45b6-a105-36bdf39ec6f4\r\n\r\n\r\n0 rows in set. Elapsed: 0.247 sec.\r\n\r\nReceived exception from server (version 23.3.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Cannot find column min(d_69ac26.other_table.b_0) in minmax_count projection but query analysis still selects this projection. It's a bug. (LOGICAL_ERROR)\r\n```\r\n```sql\r\nSELECT DISTINCT _partition_id\r\nFROM d_69ac26.test_ch_partitions_with_other_table_in_condition\r\nWHERE b > (\r\n    SELECT min(b)\r\n    FROM d_69ac26.other_table\r\n)\r\nSETTINGS allow_experimental_analyzer = 1, allow_experimental_projection_optimization = 0\r\n\r\nQuery id: 84b77851-268e-48ff-8880-864b412fdf59\r\n\r\n\u250c\u2500_partition_id\u2500\u2510\r\n\u2502 202101        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500_partition_id\u2500\u2510\r\n\u2502 202102        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```",
  "created_at": "2023-03-30T12:09:14Z"
}