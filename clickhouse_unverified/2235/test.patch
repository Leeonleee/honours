diff --git a/dbms/tests/integration/test_distributed_ddl/configs/users.d/restricted_user.xml b/dbms/tests/integration/test_distributed_ddl/configs/users.d/restricted_user.xml
new file mode 100644
index 000000000000..5b6084eea7b2
--- /dev/null
+++ b/dbms/tests/integration/test_distributed_ddl/configs/users.d/restricted_user.xml
@@ -0,0 +1,16 @@
+<yandex>
+    <users>
+    	<restricted_user>
+    		<password></password>
+	        <profile>default</profile>
+	        <quota>default</quota>
+            <networks>
+                    <ip>::/0</ip>
+            </networks>
+
+	        <allow_databases>
+	           <database>db1</database>
+	        </allow_databases>
+    	</restricted_user>
+    </users>
+</yandex>
diff --git a/dbms/tests/integration/test_distributed_ddl/test.py b/dbms/tests/integration/test_distributed_ddl/test.py
index 8b7e46443d55..8621f723ac12 100755
--- a/dbms/tests/integration/test_distributed_ddl/test.py
+++ b/dbms/tests/integration/test_distributed_ddl/test.py
@@ -315,6 +315,24 @@ def test_macro(started_cluster):
     ddl_check_query(instance, "DROP TABLE IF EXISTS distr ON CLUSTER '{cluster}'")
     ddl_check_query(instance, "DROP TABLE IF EXISTS tab ON CLUSTER '{cluster}'")
 
+
+def test_allowed_databases(started_cluster):
+    instance = cluster.instances['ch2']
+    instance.query("CREATE DATABASE IF NOT EXISTS db1 ON CLUSTER cluster")
+    instance.query("CREATE DATABASE IF NOT EXISTS db2 ON CLUSTER cluster")
+
+    instance.query("CREATE TABLE db1.t1 ON CLUSTER cluster (i Int8) ENGINE = Memory", settings={"user" : "restricted_user"})
+    
+    with pytest.raises(Exception):
+        instance.query("CREATE TABLE db2.t2 ON CLUSTER cluster (i Int8) ENGINE = Memory", settings={"user" : "restricted_user"})
+    with pytest.raises(Exception):
+        instance.query("CREATE TABLE t3 ON CLUSTER cluster (i Int8) ENGINE = Memory", settings={"user" : "restricted_user"})
+    with pytest.raises(Exception):
+        instance.query("DROP DATABASE db2 ON CLUSTER cluster", settings={"user" : "restricted_user"})
+
+    instance.query("DROP DATABASE db1 ON CLUSTER cluster", settings={"user" : "restricted_user"})
+
+
 if __name__ == '__main__':
     with contextmanager(started_cluster)() as cluster:
        for name, instance in cluster.instances.items():
diff --git a/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.sql b/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.sql
index 0ace86c2e5e9..7625c6e01b1f 100644
--- a/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.sql
+++ b/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.sql
@@ -61,11 +61,3 @@ ALTER TABLE test.clear_column1 CLEAR COLUMN s IN PARTITION '200002';
 ALTER TABLE test.clear_column1 CLEAR COLUMN s IN PARTITION '200012', CLEAR COLUMN i IN PARTITION '200012';
 -- Drop empty partition also Ok
 ALTER TABLE test.clear_column1 DROP PARTITION '200012', DROP PARTITION '200011';
-
-
--- check optimize for non-leader replica (it is not related with CLEAR COLUMN)
-OPTIMIZE TABLE test.clear_column1;
-OPTIMIZE TABLE test.clear_column2;
-
-DROP TABLE IF EXISTS test.clear_column1;
-DROP TABLE IF EXISTS test.clear_column2;
diff --git a/dbms/tests/queries/0_stateless/00620_optimize_on_nonleader_replica_zookeeper.reference b/dbms/tests/queries/0_stateless/00620_optimize_on_nonleader_replica_zookeeper.reference
new file mode 100644
index 000000000000..087a2f3b9d70
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00620_optimize_on_nonleader_replica_zookeeper.reference
@@ -0,0 +1,2 @@
+0	1	1
+0	1	2
diff --git a/dbms/tests/queries/0_stateless/00620_optimize_on_nonleader_replica_zookeeper.sql b/dbms/tests/queries/0_stateless/00620_optimize_on_nonleader_replica_zookeeper.sql
new file mode 100644
index 000000000000..f66ab550bd4b
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00620_optimize_on_nonleader_replica_zookeeper.sql
@@ -0,0 +1,20 @@
+DROP TABLE IF EXISTS test.clear_column1;
+DROP TABLE IF EXISTS test.clear_column2;
+CREATE TABLE test.clear_column1 (p Int64, i Int64, v UInt64) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/tables/test/clear_column', '1', v) PARTITION BY p ORDER BY i;
+CREATE TABLE test.clear_column2 (p Int64, i Int64, v UInt64) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/tables/test/clear_column', '2', v) PARTITION BY p ORDER BY i;
+
+INSERT INTO test.clear_column1 VALUES (0, 1, 0);
+INSERT INTO test.clear_column1 VALUES (0, 1, 1);
+
+OPTIMIZE TABLE test.clear_column1;
+OPTIMIZE TABLE test.clear_column2;
+SELECT * FROM test.clear_column1;
+
+RENAME TABLE test.clear_column2 TO test.clear_column3;
+
+INSERT INTO test.clear_column1 VALUES (0, 1, 2);
+OPTIMIZE TABLE test.clear_column3;
+SELECT * FROM test.clear_column1;
+
+DROP TABLE IF EXISTS test.clear_column1;
+DROP TABLE IF EXISTS test.clear_column2;
\ No newline at end of file
