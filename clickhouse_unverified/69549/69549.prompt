You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Queries are cached in query cache if overflow=break
**Describe the unexpected behaviour**

The query cache still caches results if query limits are hit and overflow_mode is set to `break`. In this case a partial result is effectively cached which seems incorrect.
**How to reproduce**
* Which ClickHouse server version to use
 - 23.5

```sql

CREATE TABLE test
(
    `t` Int64
)
ENGINE = MergeTree
ORDER BY tuple()

INSERT INTO test SELECT number AS t
FROM numbers(1000000000)

CREATE USER test SETTINGS max_rows_to_read = 100000000, read_overflow_mode = 'break' CHANGEABLE_IN_READONLY, readonly = 1, use_query_cache=1

-- correct result
SELECT sum(t)
FROM test


   ┌─────────────sum(t)─┐
1. │ 499999999500000000 │ -- 500.00 quadrillion
   └────────────────────┘

1 row in set. Elapsed: 1.162 sec. Processed 1.00 billion rows, 8.00 GB (860.70 million rows/s., 6.89 GB/s.)
Peak memory usage: 341.84 KiB.


GRANT SELECT ON default.* TO test


-- login as test

play-eu-clickhouse-client.localdomain :) select count() FROM test

SELECT count()
FROM test

Query id: d8c5e741-b297-463a-b361-28a01679d79b

   ┌────count()─┐
1. │ 1000000000 │ -- 1.00 billion
   └────────────┘

1 row in set. Elapsed: 0.002 sec.

-- breaks at 100m as expected.
SELECT sum(t)
FROM test

Query id: 149a0b63-e135-4b92-9dec-36c82bba4b2b

   ┌────────────sum(t)─┐
1. │ 43419085692811224 │ -- 43.42 quadrillion
   └───────────────────┘

1 row in set. Elapsed: 0.147 sec. Processed 100.73 million rows, 805.81 MB (687.18 million rows/s., 5.50 GB/s.)
Peak memory usage: 3.40 MiB.

-- incorrect result

play-eu-clickhouse-client.localdomain :) SELECT sum(t)
FROM test

SELECT sum(t)
FROM test

Query id: 5edeb73e-158c-4202-a53b-9e671d28b21e

   ┌────────────sum(t)─┐
1. │ 43419085692811224 │ -- 43.42 quadrillion
   └───────────────────┘

1 row in set. Elapsed: 0.001 sec.
```

**Expected behavior**

Don't cache on break.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
