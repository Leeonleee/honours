{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 69549,
  "instance_id": "ClickHouse__ClickHouse-69549",
  "issue_numbers": [
    "67476"
  ],
  "base_commit": "8a700178150e7b38bad3142ef39e1d7edf9425b0",
  "patch": "diff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex 6c22e71bccfd..be9423852c10 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -1118,6 +1118,19 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n             && settings.use_query_cache\n             && !internal\n             && client_info.query_kind == ClientInfo::QueryKind::INITIAL_QUERY\n+            /// Bug 67476: Avoid that the query cache stores truncated results if the query ran with a non-THROW overflow mode and hit a limit.\n+            /// This is more workaround than a fix ... unfortunately it is hard to detect from the perspective of the query cache that the\n+            /// query result is truncated.\n+            && (settings.read_overflow_mode == OverflowMode::THROW\n+                && settings.read_overflow_mode_leaf == OverflowMode::THROW\n+                && settings.group_by_overflow_mode == OverflowMode::THROW\n+                && settings.sort_overflow_mode == OverflowMode::THROW\n+                && settings.result_overflow_mode == OverflowMode::THROW\n+                && settings.timeout_overflow_mode == OverflowMode::THROW\n+                && settings.set_overflow_mode == OverflowMode::THROW\n+                && settings.join_overflow_mode == OverflowMode::THROW\n+                && settings.transfer_overflow_mode == OverflowMode::THROW\n+                && settings.distinct_overflow_mode == OverflowMode::THROW)\n             && (ast->as<ASTSelectQuery>() || ast->as<ASTSelectWithUnionQuery>());\n         QueryCache::Usage query_cache_usage = QueryCache::Usage::None;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02494_query_cache_bugs.reference b/tests/queries/0_stateless/02494_query_cache_bugs.reference\nindex 448e1366ea7a..ea9017d53944 100644\n--- a/tests/queries/0_stateless/02494_query_cache_bugs.reference\n+++ b/tests/queries/0_stateless/02494_query_cache_bugs.reference\n@@ -22,3 +22,24 @@ Row 1:\n \u2500\u2500\u2500\u2500\u2500\u2500\n x: 1\n 2\n+-- Bug 67476: Queries with overflow mode != throw must not be cached by the query cache\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\ndiff --git a/tests/queries/0_stateless/02494_query_cache_bugs.sql b/tests/queries/0_stateless/02494_query_cache_bugs.sql\nindex 74496e0f77a1..423068aa6464 100644\n--- a/tests/queries/0_stateless/02494_query_cache_bugs.sql\n+++ b/tests/queries/0_stateless/02494_query_cache_bugs.sql\n@@ -36,4 +36,32 @@ SELECT count(*) FROM system.query_cache;\n \n DROP TABLE tab;\n \n+SELECT '-- Bug 67476: Queries with overflow mode != throw must not be cached by the query cache';\n+\n+DROP TABLE IF EXISTS tab;\n+\n+CREATE TABLE tab(c UInt64) ENGINE = Memory;\n+\n+SYSTEM DROP QUERY CACHE;\n+SELECT sum(c) FROM tab SETTINGS read_overflow_mode = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+SELECT sum(c) FROM tab SETTINGS read_overflow_mode_leaf = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+SELECT sum(c) FROM tab SETTINGS group_by_overflow_mode = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+SELECT sum(c) FROM tab SETTINGS sort_overflow_mode = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+SELECT sum(c) FROM tab SETTINGS result_overflow_mode = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+SELECT sum(c) FROM tab SETTINGS timeout_overflow_mode = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+SELECT sum(c) FROM tab SETTINGS set_overflow_mode = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+SELECT sum(c) FROM tab SETTINGS join_overflow_mode = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+SELECT sum(c) FROM tab SETTINGS transfer_overflow_mode = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+SELECT sum(c) FROM tab SETTINGS distinct_overflow_mode = 'break', use_query_cache = 1;\n+SELECT count(*) from system.query_cache;\n+\n SYSTEM DROP QUERY CACHE;\n",
  "problem_statement": "Queries are cached in query cache if overflow=break\n**Describe the unexpected behaviour**\r\n\r\nThe query cache still caches results if query limits are hit and overflow_mode is set to `break`. In this case a partial result is effectively cached which seems incorrect.\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\n - 23.5\r\n\r\n```sql\r\n\r\nCREATE TABLE test\r\n(\r\n    `t` Int64\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple()\r\n\r\nINSERT INTO test SELECT number AS t\r\nFROM numbers(1000000000)\r\n\r\nCREATE USER test SETTINGS max_rows_to_read = 100000000, read_overflow_mode = 'break' CHANGEABLE_IN_READONLY, readonly = 1, use_query_cache=1\r\n\r\n-- correct result\r\nSELECT sum(t)\r\nFROM test\r\n\r\n\r\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500sum(t)\u2500\u2510\r\n1. \u2502 499999999500000000 \u2502 -- 500.00 quadrillion\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 1.162 sec. Processed 1.00 billion rows, 8.00 GB (860.70 million rows/s., 6.89 GB/s.)\r\nPeak memory usage: 341.84 KiB.\r\n\r\n\r\nGRANT SELECT ON default.* TO test\r\n\r\n\r\n-- login as test\r\n\r\nplay-eu-clickhouse-client.localdomain :) select count() FROM test\r\n\r\nSELECT count()\r\nFROM test\r\n\r\nQuery id: d8c5e741-b297-463a-b361-28a01679d79b\r\n\r\n   \u250c\u2500\u2500\u2500\u2500count()\u2500\u2510\r\n1. \u2502 1000000000 \u2502 -- 1.00 billion\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.002 sec.\r\n\r\n-- breaks at 100m as expected.\r\nSELECT sum(t)\r\nFROM test\r\n\r\nQuery id: 149a0b63-e135-4b92-9dec-36c82bba4b2b\r\n\r\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500sum(t)\u2500\u2510\r\n1. \u2502 43419085692811224 \u2502 -- 43.42 quadrillion\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.147 sec. Processed 100.73 million rows, 805.81 MB (687.18 million rows/s., 5.50 GB/s.)\r\nPeak memory usage: 3.40 MiB.\r\n\r\n-- incorrect result\r\n\r\nplay-eu-clickhouse-client.localdomain :) SELECT sum(t)\r\nFROM test\r\n\r\nSELECT sum(t)\r\nFROM test\r\n\r\nQuery id: 5edeb73e-158c-4202-a53b-9e671d28b21e\r\n\r\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500sum(t)\u2500\u2510\r\n1. \u2502 43419085692811224 \u2502 -- 43.42 quadrillion\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec.\r\n```\r\n\r\n**Expected behavior**\r\n\r\nDon't cache on break.\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-09-12T09:24:29Z"
}