diff --git a/tests/queries/0_stateless/02968_projection_merge.reference b/tests/queries/0_stateless/02968_projection_merge.reference
new file mode 100644
index 000000000000..40cb572c95a6
--- /dev/null
+++ b/tests/queries/0_stateless/02968_projection_merge.reference
@@ -0,0 +1,28 @@
+ReplacingMergeTree
+0	2
+1	2
+2	2
+0	2
+1	2
+2	2
+CollapsingMergeTree
+0	2
+1	2
+2	2
+0	2
+1	2
+2	2
+VersionedCollapsingMergeTree
+0	2
+1	2
+2	2
+0	2
+1	2
+2	2
+DEDUPLICATE ON MergeTree
+0	1
+1	1
+2	1
+0	1
+1	1
+2	1
diff --git a/tests/queries/0_stateless/02968_projection_merge.sql b/tests/queries/0_stateless/02968_projection_merge.sql
new file mode 100644
index 000000000000..3e047d2cf69a
--- /dev/null
+++ b/tests/queries/0_stateless/02968_projection_merge.sql
@@ -0,0 +1,116 @@
+SELECT 'ReplacingMergeTree';
+DROP TABLE IF EXISTS tp;
+CREATE TABLE tp
+(
+    `type` Int32,
+    `eventcnt` UInt64,
+    PROJECTION p
+    (
+        SELECT type,sum(eventcnt)
+        GROUP BY type
+    )
+)
+ENGINE = ReplacingMergeTree
+ORDER BY type
+SETTINGS deduplicate_merge_projection_mode = 'rebuild';
+
+INSERT INTO tp SELECT number%3, 1 FROM numbers(3);
+INSERT INTO tp SELECT number%3, 2 FROM numbers(3);
+
+OPTIMIZE TABLE tp FINAL;
+
+SELECT type,sum(eventcnt) FROM tp GROUP BY type ORDER BY type
+SETTINGS optimize_use_projections = 0, force_optimize_projection = 0;
+
+SELECT type,sum(eventcnt) FROM tp GROUP BY type ORDER BY type
+SETTINGS optimize_use_projections = 1, force_optimize_projection = 1;
+
+
+SELECT 'CollapsingMergeTree';
+DROP TABLE IF EXISTS tp;
+CREATE TABLE tp
+(
+    `type` Int32,
+    `eventcnt` UInt64,
+    `sign` Int8,
+    PROJECTION p
+    (
+        SELECT type,sum(eventcnt)
+        GROUP BY type
+    )
+)
+ENGINE = CollapsingMergeTree(sign)
+ORDER BY type
+SETTINGS deduplicate_merge_projection_mode = 'rebuild';
+
+INSERT INTO tp SELECT number % 3, 1, 1 FROM numbers(3);
+INSERT INTO tp SELECT number % 3, 1, -1 FROM numbers(3);
+INSERT INTO tp SELECT number % 3, 2, 1 FROM numbers(3);
+
+OPTIMIZE TABLE tp FINAL;
+
+SELECT type,sum(eventcnt) FROM tp GROUP BY type ORDER BY type
+SETTINGS optimize_use_projections = 0, force_optimize_projection = 0;
+
+SELECT type,sum(eventcnt) FROM tp GROUP BY type ORDER BY type
+SETTINGS optimize_use_projections = 1, force_optimize_projection = 1;
+
+-- Actually we don't need to test all 3 engines Replacing/Collapsing/VersionedCollapsing,
+-- Because they share the same logic of 'reduce number of rows during merges'
+SELECT 'VersionedCollapsingMergeTree';
+DROP TABLE IF EXISTS tp;
+CREATE TABLE tp
+(
+    `type` Int32,
+    `eventcnt` UInt64,
+    `sign` Int8,
+    `version` UInt8,
+    PROJECTION p
+    (
+        SELECT type,sum(eventcnt)
+        GROUP BY type
+    )
+)
+ENGINE = VersionedCollapsingMergeTree(sign,version)
+ORDER BY type
+SETTINGS deduplicate_merge_projection_mode = 'rebuild';
+
+INSERT INTO tp SELECT number % 3, 1, -1, 0 FROM numbers(3);
+INSERT INTO tp SELECT number % 3, 2, 1, 1 FROM numbers(3);
+INSERT INTO tp SELECT number % 3, 1, 1, 0 FROM numbers(3);
+
+OPTIMIZE TABLE tp FINAL;
+
+SELECT type,sum(eventcnt) FROM tp GROUP BY type ORDER BY type
+SETTINGS optimize_use_projections = 0, force_optimize_projection = 0;
+
+SELECT type,sum(eventcnt) FROM tp GROUP BY type ORDER BY type
+SETTINGS optimize_use_projections = 1, force_optimize_projection = 1;
+
+SELECT 'DEDUPLICATE ON MergeTree';
+DROP TABLE IF EXISTS tp;
+CREATE TABLE tp
+(
+    `type` Int32,
+    `eventcnt` UInt64,
+    PROJECTION p
+    (
+        SELECT type,sum(eventcnt)
+        GROUP BY type
+    )
+)
+ENGINE = MergeTree
+ORDER BY type
+SETTINGS deduplicate_merge_projection_mode = 'rebuild';
+
+INSERT INTO tp SELECT number % 3, 1 FROM numbers(3);
+INSERT INTO tp SELECT number % 3, 2 FROM numbers(3);
+
+OPTIMIZE TABLE tp FINAL DEDUPLICATE BY type;
+
+SELECT type,sum(eventcnt) FROM tp GROUP BY type ORDER BY type
+SETTINGS optimize_use_projections = 0, force_optimize_projection = 0;
+
+SELECT type,sum(eventcnt) FROM tp GROUP BY type ORDER BY type
+SETTINGS optimize_use_projections = 1, force_optimize_projection = 1;
+
