{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34330,
  "instance_id": "ClickHouse__ClickHouse-34330",
  "issue_numbers": [
    "34239"
  ],
  "base_commit": "0ed56f0255a15dc0c24c239cd20f70729000bb3d",
  "patch": "diff --git a/src/IO/ReadWriteBufferFromHTTP.h b/src/IO/ReadWriteBufferFromHTTP.h\nindex 4522f863db6b..4e08a5954848 100644\n--- a/src/IO/ReadWriteBufferFromHTTP.h\n+++ b/src/IO/ReadWriteBufferFromHTTP.h\n@@ -19,6 +19,7 @@\n #include <Common/DNSResolver.h>\n #include <Common/RemoteHostFilter.h>\n #include <Common/config.h>\n+#include <Common/config_version.h>\n #include <base/logger_useful.h>\n #include <Poco/URIStreamFactory.h>\n \n@@ -291,6 +292,18 @@ namespace detail\n                                 \"0 < http_retry_initial_backoff_ms < settings.http_retry_max_backoff_ms (now 0 < {} < {})\",\n                                 settings.http_max_tries, settings.http_retry_initial_backoff_ms, settings.http_retry_max_backoff_ms);\n \n+            // Configure User-Agent if it not already set.\n+            const std::string user_agent = \"User-Agent\";\n+            auto iter = std::find_if(http_header_entries.begin(), http_header_entries.end(), [&user_agent](const HTTPHeaderEntry & entry)\n+            {\n+                return std::get<0>(entry) == user_agent;\n+            });\n+\n+            if (iter == http_header_entries.end())\n+            {\n+                http_header_entries.emplace_back(std::make_pair(\"User-Agent\", fmt::format(\"ClickHouse/{}\", VERSION_STRING)));\n+            }\n+\n             if (!delay_initialization)\n             {\n                 initialize();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02205_HTTP_user_agent.python b/tests/queries/0_stateless/02205_HTTP_user_agent.python\nnew file mode 100644\nindex 000000000000..8fb9cea0845e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02205_HTTP_user_agent.python\n@@ -0,0 +1,143 @@\n+#!/usr/bin/env python3\n+\n+from http.server import SimpleHTTPRequestHandler,HTTPServer\n+import socket\n+import sys\n+import threading\n+import os\n+import traceback\n+import urllib.request\n+import subprocess\n+\n+\n+def is_ipv6(host):\n+    try:\n+        socket.inet_aton(host)\n+        return False\n+    except:\n+        return True\n+\n+def get_local_port(host, ipv6):\n+    if ipv6:\n+        family = socket.AF_INET6\n+    else:\n+        family = socket.AF_INET\n+\n+    with socket.socket(family) as fd:\n+        fd.bind((host, 0))\n+        return fd.getsockname()[1]\n+\n+CLICKHOUSE_HOST = os.environ.get('CLICKHOUSE_HOST', 'localhost')\n+CLICKHOUSE_PORT_HTTP = os.environ.get('CLICKHOUSE_PORT_HTTP', '8123')\n+\n+# Server returns this JSON response.\n+SERVER_JSON_RESPONSE = \\\n+'''{\n+\t\"login\": \"ClickHouse\",\n+\t\"id\": 54801242,\n+\t\"name\": \"ClickHouse\",\n+\t\"company\": null\n+}'''\n+\n+EXPECTED_ANSWER = \\\n+'''{\\\\n\\\\t\"login\": \"ClickHouse\",\\\\n\\\\t\"id\": 54801242,\\\\n\\\\t\"name\": \"ClickHouse\",\\\\n\\\\t\"company\": null\\\\n}'''\n+\n+#####################################################################################\n+# This test starts an HTTP server and serves data to clickhouse url-engine based table.\n+# The objective of this test is to check the ClickHouse server provides a User-Agent\n+# with HTTP requests.\n+# In order for it to work ip+port of http server (given below) should be\n+# accessible from clickhouse server.\n+#####################################################################################\n+\n+# IP-address of this host accessible from the outside world. Get the first one\n+HTTP_SERVER_HOST = subprocess.check_output(['hostname', '-i']).decode('utf-8').strip().split()[0]\n+IS_IPV6 = is_ipv6(HTTP_SERVER_HOST)\n+HTTP_SERVER_PORT = get_local_port(HTTP_SERVER_HOST, IS_IPV6)\n+\n+# IP address and port of the HTTP server started from this script.\n+HTTP_SERVER_ADDRESS = (HTTP_SERVER_HOST, HTTP_SERVER_PORT)\n+if IS_IPV6:\n+    HTTP_SERVER_URL_STR = 'http://' + f'[{str(HTTP_SERVER_ADDRESS[0])}]:{str(HTTP_SERVER_ADDRESS[1])}' + \"/\"\n+else:\n+    HTTP_SERVER_URL_STR = 'http://' + f'{str(HTTP_SERVER_ADDRESS[0])}:{str(HTTP_SERVER_ADDRESS[1])}' + \"/\"\n+\n+\n+def get_ch_answer(query):\n+    host = CLICKHOUSE_HOST\n+    if IS_IPV6:\n+        host = f'[{host}]'\n+\n+    url = os.environ.get('CLICKHOUSE_URL', 'http://{host}:{port}'.format(host=CLICKHOUSE_HOST, port=CLICKHOUSE_PORT_HTTP))\n+    return urllib.request.urlopen(url, data=query.encode()).read().decode()\n+\n+def check_answers(query, answer):\n+    ch_answer = get_ch_answer(query)\n+    if ch_answer.strip() != answer.strip():\n+        print(\"FAIL on query:\", query, file=sys.stderr)\n+        print(\"Expected answer:\", answer, file=sys.stderr)\n+        print(\"Fetched answer :\", ch_answer, file=sys.stderr)\n+        raise Exception(\"Fail on query\")\n+\n+# Server with check for User-Agent headers.\n+class HttpProcessor(SimpleHTTPRequestHandler):\n+    def _set_headers(self):\n+        user_agent = self.headers.get('User-Agent')\n+        if user_agent and user_agent.startswith('ClickHouse/'):\n+            self.send_response(200)\n+        else:\n+            self.send_response(403)\n+\n+        self.send_header('Content-Type', 'text/csv')\n+        self.end_headers()\n+\n+    def do_GET(self):\n+        self._set_headers()\n+        self.wfile.write(SERVER_JSON_RESPONSE.encode())\n+\n+    def log_message(self, format, *args):\n+        return\n+\n+class HTTPServerV6(HTTPServer):\n+    address_family = socket.AF_INET6\n+\n+def start_server(requests_amount):\n+    if IS_IPV6:\n+        httpd = HTTPServerV6(HTTP_SERVER_ADDRESS, HttpProcessor)\n+    else:\n+        httpd = HTTPServer(HTTP_SERVER_ADDRESS, HttpProcessor)\n+\n+    def real_func():\n+        for i in range(requests_amount):\n+            httpd.handle_request()\n+\n+    t = threading.Thread(target=real_func)\n+    return t\n+\n+#####################################################################\n+# Testing area.\n+#####################################################################\n+\n+def test_select():\n+    global HTTP_SERVER_URL_STR\n+    query = 'SELECT * FROM url(\\'{}\\',\\'JSONAsString\\');'.format(HTTP_SERVER_URL_STR)\n+    check_answers(query, EXPECTED_ANSWER)\n+\n+def main():\n+    t = start_server(1)\n+    t.start()\n+    test_select()\n+    t.join()\n+    print(\"PASSED\")\n+\n+if __name__ == \"__main__\":\n+    try:\n+        main()\n+    except Exception as ex:\n+        exc_type, exc_value, exc_traceback = sys.exc_info()\n+        traceback.print_tb(exc_traceback, file=sys.stderr)\n+        print(ex, file=sys.stderr)\n+        sys.stderr.flush()\n+\n+        os._exit(1)\n+\ndiff --git a/tests/queries/0_stateless/02205_HTTP_user_agent.reference b/tests/queries/0_stateless/02205_HTTP_user_agent.reference\nnew file mode 100644\nindex 000000000000..53cdf1e93932\n--- /dev/null\n+++ b/tests/queries/0_stateless/02205_HTTP_user_agent.reference\n@@ -0,0 +1,1 @@\n+PASSED\ndiff --git a/tests/queries/0_stateless/02205_HTTP_user_agent.sh b/tests/queries/0_stateless/02205_HTTP_user_agent.sh\nnew file mode 100755\nindex 000000000000..b125e91ae85d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02205_HTTP_user_agent.sh\n@@ -0,0 +1,8 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+python3 \"$CURDIR\"/02205_HTTP_user_agent.python\n+\n",
  "problem_statement": "forbidden requests due to missing user-agent header in URL engine\nSome URLs expect a User-Agent header.\r\n\r\nExample (version 22.2.1.3767):\r\n```sql\r\nSELECT * FROM url('https://api.github.com/users/clickhouse','JSONAsString');\r\n```\r\nResults in:\r\n```\r\nCode: 86. DB::Exception: Received error from remote server /users/clickhouse. HTTP status code: 403 Forbidden, body: \r\nRequest forbidden by administrative rules. Please make sure your request has a User-Agent header (http://developer.github.com/v3/#user-agent-required). Check https://developer.github.com for other possible causes.\r\n: While executing URL. (RECEIVED_ERROR_FROM_REMOTE_IO_SERVER) (version 22.2.1.3767)\r\n```\r\n\r\nMaybe it's nice to always send a header along, something like `User-Agent: ClickHouse/22.2.1.3767` ?\r\n\n",
  "hints_text": "Makes sense, and it should be easy to implement.\nI would like to give this a shot to learn the codebase. Which files should I be looking at? `ClickHouse/src/Functions/URL/`? \n@surahman You should look at `ReadWriteBufferFromHTTP`\r\n\r\nAlso you can look around (the code that calls it):\r\n`TableFunctions/TableFunctionURL` - table function `url`\r\n`Storages/StorageURL` - table engine under this table function\r\n`StorageURLSource` - how the URL table reads data\r\n\r\nPS. What you've pointed is unrelated - it is about SQL functions for URL string processing like 'domainWithoutWWW'.\r\n\nReplacing this line https://github.com/ClickHouse/ClickHouse/blob/e194bf3377a18fe137fbd5c04151d2fdb0f149e5/src/IO/ReadWriteBufferFromHTTP.h#L116\r\nwith this\r\n```c++\r\nconst std::string user_agent_key = \"User-Agent\";\r\nconst std::string user_agent_value = \"ClickHouse/22.2.1.3767\";\r\nHTTPHeaderEntries http_header_entries = { std::make_pair(user_agent_key, user_agent_value) };\r\n```\r\nshould ensure that all HTTP requests have the `User-Agent` info in the headers.\r\n\r\nThe `User-Agent` key-value pair should probably be in a file that contains constants so they can be easily found and updated. The value/version would probably need to be dynamically generated depending on the actual version number. Is there a routine that can generate the version string? I was also unable to find any tests for `ReadWriteBufferFromHTTP.h`.\n@surahman \r\n\r\n> I was also unable to find any tests for ReadWriteBufferFromHTTP.h.\r\n\r\nWe use end-to-end functional tests, see `tests` directory and `tests/queries/` specifically;\r\nunit tests are also occasionally used, but they are not as popular.\r\nhttps://clickhouse.com/docs/en/development/tests/\nSee `config_version.h`",
  "created_at": "2022-02-05T04:19:41Z",
  "modified_files": [
    "src/IO/ReadWriteBufferFromHTTP.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02205_HTTP_user_agent.python",
    "b/tests/queries/0_stateless/02205_HTTP_user_agent.reference",
    "b/tests/queries/0_stateless/02205_HTTP_user_agent.sh"
  ]
}