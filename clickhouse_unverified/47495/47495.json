{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 47495,
  "instance_id": "ClickHouse__ClickHouse-47495",
  "issue_numbers": [
    "47287"
  ],
  "base_commit": "bc39f3e4d9022d710ac6a4789f359cc4ceaf2a98",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex 2f579244b9af..79b073e30f3e 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -562,7 +562,6 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n     {\n         /// Allow push down and other optimizations for VIEW: replace with subquery and rewrite it.\n         ASTPtr view_table;\n-        NameToNameMap parameter_values;\n         NameToNameMap parameter_types;\n         if (view)\n         {\n@@ -575,14 +574,13 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n             /// and after query is replaced, we use these parameters to substitute in the parameterized view query\n             if (query_info.is_parameterized_view)\n             {\n-                parameter_values = analyzeFunctionParamValues(query_ptr);\n-                view->setParameterValues(parameter_values);\n-                parameter_types = view->getParameterValues();\n+                query_info.parameterized_view_values = analyzeFunctionParamValues(query_ptr);\n+                parameter_types = view->getParameterTypes();\n             }\n             view->replaceWithSubquery(getSelectQuery(), view_table, metadata_snapshot, view->isParameterizedView());\n             if (query_info.is_parameterized_view)\n             {\n-                view->replaceQueryParametersIfParametrizedView(query_ptr);\n+                view->replaceQueryParametersIfParametrizedView(query_ptr, query_info.parameterized_view_values);\n             }\n \n         }\n@@ -595,7 +593,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n             required_result_column_names,\n             table_join,\n             query_info.is_parameterized_view,\n-            parameter_values,\n+            query_info.parameterized_view_values,\n             parameter_types);\n \n \n@@ -747,7 +745,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n                 query_info.filter_asts.push_back(parallel_replicas_custom_filter_ast);\n             }\n \n-            source_header = storage_snapshot->getSampleBlockForColumns(required_columns, parameter_values);\n+            source_header = storage_snapshot->getSampleBlockForColumns(required_columns, query_info.parameterized_view_values);\n         }\n \n         /// Calculate structure of the result.\ndiff --git a/src/Storages/SelectQueryInfo.h b/src/Storages/SelectQueryInfo.h\nindex e3996950e79e..db43b2fc3f8a 100644\n--- a/src/Storages/SelectQueryInfo.h\n+++ b/src/Storages/SelectQueryInfo.h\n@@ -254,6 +254,7 @@ struct SelectQueryInfo\n     MergeTreeDataSelectAnalysisResultPtr merge_tree_select_result_ptr;\n \n     bool is_parameterized_view = false;\n+    NameToNameMap parameterized_view_values;\n \n     // If limit is not 0, that means it's a trivial limit query.\n     UInt64 limit = 0;\ndiff --git a/src/Storages/StorageView.cpp b/src/Storages/StorageView.cpp\nindex 7e12a972768e..470def7e1970 100644\n--- a/src/Storages/StorageView.cpp\n+++ b/src/Storages/StorageView.cpp\n@@ -37,6 +37,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n }\n \n+\n namespace\n {\n \n@@ -123,7 +124,7 @@ StorageView::StorageView(\n     NormalizeSelectWithUnionQueryVisitor{data}.visit(description.inner_query);\n \n     is_parameterized_view = query.isParameterizedView();\n-    parameter_types = analyzeReceiveQueryParamsWithType(description.inner_query);\n+    view_parameter_types = analyzeReceiveQueryParamsWithType(description.inner_query);\n     storage_metadata.setSelectQuery(description);\n     setInMemoryMetadata(storage_metadata);\n }\n@@ -172,7 +173,7 @@ void StorageView::read(\n     query_plan.addStep(std::move(materializing));\n \n     /// And also convert to expected structure.\n-    const auto & expected_header = storage_snapshot->getSampleBlockForColumns(column_names, parameter_values);\n+    const auto & expected_header = storage_snapshot->getSampleBlockForColumns(column_names, query_info.parameterized_view_values);\n     const auto & header = query_plan.getCurrentDataStream().header;\n \n     const auto * select_with_union = current_inner_query->as<ASTSelectWithUnionQuery>();\n@@ -208,7 +209,7 @@ static ASTTableExpression * getFirstTableExpression(ASTSelectQuery & select_quer\n     return select_element->table_expression->as<ASTTableExpression>();\n }\n \n-void StorageView::replaceQueryParametersIfParametrizedView(ASTPtr & outer_query)\n+void StorageView::replaceQueryParametersIfParametrizedView(ASTPtr & outer_query, const NameToNameMap & parameter_values)\n {\n     ReplaceQueryParameterVisitor visitor(parameter_values);\n     visitor.visit(outer_query);\n@@ -266,7 +267,8 @@ String StorageView::replaceQueryParameterWithValue(const String & column_name, c\n         if ((pos = name.find(parameter.first)) != std::string::npos)\n         {\n             auto parameter_datatype_iterator = parameter_types.find(parameter.first);\n-            if (parameter_datatype_iterator != parameter_types.end())\n+            size_t parameter_end = pos + parameter.first.size();\n+            if (parameter_datatype_iterator != parameter_types.end() && name.size() >= parameter_end && (name[parameter_end] == ',' || name[parameter_end] == ')'))\n             {\n                 String parameter_name(\"_CAST(\" + parameter.second + \", '\" + parameter_datatype_iterator->second + \"')\");\n                 name.replace(pos, parameter.first.size(), parameter_name);\ndiff --git a/src/Storages/StorageView.h b/src/Storages/StorageView.h\nindex 6cd4bb171f56..bebecb79ec02 100644\n--- a/src/Storages/StorageView.h\n+++ b/src/Storages/StorageView.h\n@@ -35,7 +35,7 @@ class StorageView final : public IStorage\n         size_t max_block_size,\n         size_t num_streams) override;\n \n-    void replaceQueryParametersIfParametrizedView(ASTPtr & outer_query);\n+    static void replaceQueryParametersIfParametrizedView(ASTPtr & outer_query, const NameToNameMap & parameter_values);\n \n     static void replaceWithSubquery(ASTSelectQuery & select_query, ASTPtr & view_name, const StorageMetadataPtr & metadata_snapshot, const bool parameterized_view)\n     {\n@@ -47,20 +47,14 @@ class StorageView final : public IStorage\n     static String replaceQueryParameterWithValue (const String & column_name, const NameToNameMap & parameter_values, const NameToNameMap & parameter_types);\n     static String replaceValueWithQueryParameter (const String & column_name, const NameToNameMap & parameter_values);\n \n-    void setParameterValues (NameToNameMap parameter_values_)\n+    const NameToNameMap & getParameterTypes() const\n     {\n-        parameter_values = parameter_values_;\n-    }\n-\n-    NameToNameMap getParameterValues() const\n-    {\n-        return parameter_types;\n+        return view_parameter_types;\n     }\n \n protected:\n     bool is_parameterized_view;\n-    NameToNameMap parameter_values;\n-    NameToNameMap parameter_types;\n+    NameToNameMap view_parameter_types;\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02428_parameterized_view.reference b/tests/queries/0_stateless/02428_parameterized_view.reference\nindex 52a31f53cc15..27d7c6d19568 100644\n--- a/tests/queries/0_stateless/02428_parameterized_view.reference\n+++ b/tests/queries/0_stateless/02428_parameterized_view.reference\n@@ -35,3 +35,4 @@ ERROR\n 10\n 20\n 10\n+10\ndiff --git a/tests/queries/0_stateless/02428_parameterized_view.sh b/tests/queries/0_stateless/02428_parameterized_view.sh\nindex 6118013b6653..aad3aad3b22b 100755\n--- a/tests/queries/0_stateless/02428_parameterized_view.sh\n+++ b/tests/queries/0_stateless/02428_parameterized_view.sh\n@@ -15,6 +15,7 @@ $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv6\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv7\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv8\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv9\"\n+$CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv10\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_v1\"\n $CLICKHOUSE_CLIENT -q \"DROP TABLE IF EXISTS test_02428_Catalog\"\n $CLICKHOUSE_CLIENT -q \"DROP TABLE IF EXISTS ${CLICKHOUSE_TEST_UNIQUE_NAME}.pv1\"\n@@ -83,6 +84,9 @@ $CLICKHOUSE_CLIENT -q \"SELECT * FROM test_02428_pv8(prices=[10,20])\"\n $CLICKHOUSE_CLIENT -q \"CREATE VIEW test_02428_pv9 AS SELECT Price FROM test_02428_Catalog WHERE Price IN (10,20) AND Quantity={quantity:UInt64} ORDER BY Price\"\n $CLICKHOUSE_CLIENT -q \"SELECT * FROM test_02428_pv9(quantity=3)\"\n \n+$CLICKHOUSE_CLIENT -q \"CREATE VIEW test_02428_pv10 AS SELECT Price FROM test_02428_Catalog WHERE Price={Pri:UInt64} ORDER BY Price\"\n+$CLICKHOUSE_CLIENT -q \"SELECT * FROM test_02428_pv10(Pri=10)\"\n+\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv1\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv2\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv3\"\n@@ -91,6 +95,7 @@ $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv6\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv7\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv8\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv9\"\n+$CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv10\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_v1\"\n $CLICKHOUSE_CLIENT -q \"DROP TABLE test_02428_Catalog\"\n $CLICKHOUSE_CLIENT -q \"DROP TABLE ${CLICKHOUSE_TEST_UNIQUE_NAME}.pv1\"\n",
  "problem_statement": "Parameterized View incorrect substitution when parameter name is substring of column name\nWhen the name of the parameter (in this case `i`) is present (substring) in the column being filtered related to the create view, there is an incorrect parsing of the string substitution when executing the select statement\r\n\r\nFor example ( Fiddle -> https://fiddle.clickhouse.com/8e42a8f4-d1aa-4808-a40c-38e25f837aba )\r\n```\r\ncreate table testid ( id UInt64 ) engine Memory;\r\ninsert into testid values (1),(2);\r\ncreate view test_view as select * from testid where id = {i:UInt64};\r\nselect * from test_view (i=2);\r\n```\r\nThis would result in the following error\r\n```\r\nCode: 10. DB::Exception: Column `i)` not found in table default.test_view (5e34b78d-0f40-45ee-8e91-a6c92530017f). (NOT_FOUND_COLUMN_IN_BLOCK) (version 23.1.3.5 (official build))\r\n```\r\nHowever, this works (https://fiddle.clickhouse.com/946a328a-8491-436e-ba8e-c2f9fe4a5ddf), where the parameter name was substituted to `s`\r\n\r\n```\r\ncreate table testid ( id UInt64 ) engine Memory;\r\ninsert into testid values (1),(2);\r\ncreate view test_view as select * from testid where id = {s:UInt64};\r\nselect * from test_view (s=2);\r\n```\r\n\r\nError occurs on fiddle too\n",
  "hints_text": "Could be a duplicate of #47247 \r\n",
  "created_at": "2023-03-12T10:03:49Z"
}