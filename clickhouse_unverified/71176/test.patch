diff --git a/tests/integration/test_storage_mysql/test.py b/tests/integration/test_storage_mysql/test.py
index 2fc62d7f5116..2d34a52c17bc 100644
--- a/tests/integration/test_storage_mysql/test.py
+++ b/tests/integration/test_storage_mysql/test.py
@@ -386,100 +386,6 @@ def test_enum_type(started_cluster):
     conn.close()
 
 
-def test_mysql_distributed(started_cluster):
-    table_name = "test_replicas"
-
-    conn1 = get_mysql_conn(started_cluster, started_cluster.mysql8_ip)
-    conn2 = get_mysql_conn(started_cluster, started_cluster.mysql2_ip)
-    conn3 = get_mysql_conn(started_cluster, started_cluster.mysql3_ip)
-    conn4 = get_mysql_conn(started_cluster, started_cluster.mysql4_ip)
-
-    create_mysql_db(conn1, "clickhouse")
-    create_mysql_db(conn2, "clickhouse")
-    create_mysql_db(conn3, "clickhouse")
-    create_mysql_db(conn4, "clickhouse")
-
-    create_mysql_table(conn1, table_name)
-    create_mysql_table(conn2, table_name)
-    create_mysql_table(conn3, table_name)
-    create_mysql_table(conn4, table_name)
-
-    node2.query("DROP TABLE IF EXISTS test_replicas")
-
-    # Storage with with 3 replicas
-    node2.query(
-        """
-        CREATE TABLE test_replicas
-        (id UInt32, name String, age UInt32, money UInt32)
-        ENGINE = MySQL('mysql{2|3|4}:3306', 'clickhouse', 'test_replicas', 'root', 'clickhouse'); """
-    )
-
-    # Fill remote tables with different data to be able to check
-    nodes = [node1, node2, node2, node2]
-    for i in range(1, 5):
-        nodes[i - 1].query("DROP TABLE IF EXISTS test_replica{}".format(i))
-        nodes[i - 1].query(
-            """
-            CREATE TABLE test_replica{}
-            (id UInt32, name String, age UInt32, money UInt32)
-            ENGINE = MySQL('mysql{}:3306', 'clickhouse', 'test_replicas', 'root', 'clickhouse');""".format(
-                i, 80 if i == 1 else i
-            )
-        )
-        nodes[i - 1].query(
-            "INSERT INTO test_replica{} (id, name) SELECT number, 'host{}' from numbers(10) ".format(
-                i, i
-            )
-        )
-
-    # test multiple ports parsing
-    result = node2.query(
-        """SELECT DISTINCT(name) FROM mysql('mysql{80|2|3}:3306', 'clickhouse', 'test_replicas', 'root', 'clickhouse'); """
-    )
-    assert result == "host1
" or result == "host2
" or result == "host3
"
-    result = node2.query(
-        """SELECT DISTINCT(name) FROM mysql('mysql80:3306|mysql2:3306|mysql3:3306', 'clickhouse', 'test_replicas', 'root', 'clickhouse'); """
-    )
-    assert result == "host1
" or result == "host2
" or result == "host3
"
-
-    # check all replicas are traversed
-    query = "SELECT * FROM ("
-    for i in range(3):
-        query += "SELECT name FROM test_replicas UNION DISTINCT "
-    query += "SELECT name FROM test_replicas) ORDER BY name"
-
-    result = node2.query(query)
-    assert result == "host2
host3
host4
"
-
-    # Storage with with two shards, each has 2 replicas
-    node2.query("DROP TABLE IF EXISTS test_shards")
-
-    node2.query(
-        """
-        CREATE TABLE test_shards
-        (id UInt32, name String, age UInt32, money UInt32)
-        ENGINE = ExternalDistributed('MySQL', 'mysql{80|2}:3306,mysql{3|4}:3306', 'clickhouse', 'test_replicas', 'root', 'clickhouse'); """
-    )
-
-    # Check only one replica in each shard is used
-    result = node2.query("SELECT DISTINCT(name) FROM test_shards ORDER BY name")
-    assert result == "host1
host3
"
-
-    # check all replicas are traversed
-    query = "SELECT name FROM ("
-    for i in range(3):
-        query += "SELECT name FROM test_shards UNION DISTINCT "
-    query += "SELECT name FROM test_shards) ORDER BY name"
-    result = node2.query(query)
-    assert result == "host1
host2
host3
host4
"
-
-    # disconnect mysql
-    started_cluster.pause_container("mysql80")
-    result = node2.query("SELECT DISTINCT(name) FROM test_shards ORDER BY name")
-    started_cluster.unpause_container("mysql80")
-    assert result == "host2
host4
" or result == "host3
host4
"
-
-
 def test_external_settings(started_cluster):
     table_name = "test_external_settings"
     node1.query(f"DROP TABLE IF EXISTS {table_name}")
diff --git a/tests/integration/test_storage_postgresql/test.py b/tests/integration/test_storage_postgresql/test.py
index aaecc7537cfd..78bb1167d79b 100644
--- a/tests/integration/test_storage_postgresql/test.py
+++ b/tests/integration/test_storage_postgresql/test.py
@@ -449,89 +449,6 @@ def node_insert_select(_):
     node1.query("DROP TABLE test.stat;")
 
 
-def test_postgres_distributed(started_cluster):
-    cursor0 = started_cluster.postgres_conn.cursor()
-    cursor1 = started_cluster.postgres2_conn.cursor()
-    cursor2 = started_cluster.postgres3_conn.cursor()
-    cursor3 = started_cluster.postgres4_conn.cursor()
-    cursors = [cursor0, cursor1, cursor2, cursor3]
-
-    for i in range(4):
-        cursors[i].execute("DROP TABLE IF EXISTS test_replicas")
-        cursors[i].execute("CREATE TABLE test_replicas (id Integer, name Text)")
-        cursors[i].execute(
-            f"""INSERT INTO test_replicas select i, 'host{i+1}' from generate_series(0, 99) as t(i);"""
-        )
-
-    # test multiple ports parsing
-    result = node2.query(
-        """SELECT DISTINCT(name) FROM postgresql('postgres{1|2|3}:5432', 'postgres', 'test_replicas', 'postgres', 'mysecretpassword'); """
-    )
-    assert result == "host1
" or result == "host2
" or result == "host3
"
-    result = node2.query(
-        """SELECT DISTINCT(name) FROM postgresql('postgres2:5431|postgres3:5432', 'postgres', 'test_replicas', 'postgres', 'mysecretpassword'); """
-    )
-    assert result == "host3
" or result == "host2
"
-
-    # Create storage with with 3 replicas
-    node2.query("DROP TABLE IF EXISTS test_replicas")
-    node2.query(
-        """
-        CREATE TABLE test_replicas
-        (id UInt32, name String)
-        ENGINE = PostgreSQL('postgres{2|3|4}:5432', 'postgres', 'test_replicas', 'postgres', 'mysecretpassword'); """
-    )
-
-    # Check all replicas are traversed
-    query = "SELECT name FROM ("
-    for i in range(3):
-        query += "SELECT name FROM test_replicas UNION DISTINCT "
-    query += "SELECT name FROM test_replicas) ORDER BY name"
-    result = node2.query(query)
-    assert result == "host2
host3
host4
"
-
-    # Create storage with with two two shards, each has 2 replicas
-    node2.query("DROP TABLE IF EXISTS test_shards")
-
-    node2.query(
-        """
-        CREATE TABLE test_shards
-        (id UInt32, name String, age UInt32, money UInt32)
-        ENGINE = ExternalDistributed('PostgreSQL', 'postgres{1|2}:5432,postgres{3|4}:5432', 'postgres', 'test_replicas', 'postgres', 'mysecretpassword'); """
-    )
-
-    # Check only one replica in each shard is used
-    result = node2.query("SELECT DISTINCT(name) FROM test_shards ORDER BY name")
-    assert result == "host1
host3
"
-
-    node2.query(
-        """
-        CREATE TABLE test_shards2
-        (id UInt32, name String, age UInt32, money UInt32)
-        ENGINE = ExternalDistributed('PostgreSQL', postgres4, addresses_expr='postgres{1|2}:5432,postgres{3|4}:5432'); """
-    )
-
-    result = node2.query("SELECT DISTINCT(name) FROM test_shards2 ORDER BY name")
-    assert result == "host1
host3
"
-
-    # Check all replicas are traversed
-    query = "SELECT name FROM ("
-    for i in range(3):
-        query += "SELECT name FROM test_shards UNION DISTINCT "
-    query += "SELECT name FROM test_shards) ORDER BY name"
-    result = node2.query(query)
-    assert result == "host1
host2
host3
host4
"
-
-    # Disconnect postgres1
-    started_cluster.pause_container("postgres1")
-    result = node2.query("SELECT DISTINCT(name) FROM test_shards ORDER BY name")
-    started_cluster.unpause_container("postgres1")
-    assert result == "host2
host4
" or result == "host3
host4
"
-    node2.query("DROP TABLE test_shards2")
-    node2.query("DROP TABLE test_shards")
-    node2.query("DROP TABLE test_replicas")
-
-
 def test_datetime_with_timezone(started_cluster):
     cursor = started_cluster.postgres_conn.cursor()
     cursor.execute("DROP TABLE IF EXISTS test_timezone")
@@ -850,6 +767,7 @@ def test_filter_pushdown(started_cluster):
         "INSERT INTO test_filter_pushdown.test_table VALUES (1, 10), (1, 110), (2, 0), (3, 33), (4, 0)"
     )
 
+    node1.query("DROP TABLE IF EXISTS test_filter_pushdown_pg_table")
     node1.query(
         """
         CREATE TABLE test_filter_pushdown_pg_table (id UInt32, value UInt32)
@@ -857,12 +775,14 @@ def test_filter_pushdown(started_cluster):
     """
     )
 
+    node1.query("DROP TABLE IF EXISTS test_filter_pushdown_local_table")
     node1.query(
         """
         CREATE TABLE test_filter_pushdown_local_table (id UInt32, value UInt32) ENGINE Memory AS SELECT * FROM test_filter_pushdown_pg_table
     """
     )
 
+    node1.query("DROP TABLE IF EXISTS ch_table")
     node1.query(
         "CREATE TABLE ch_table (id UInt32, pg_id UInt32) ENGINE MergeTree ORDER BY id"
     )
