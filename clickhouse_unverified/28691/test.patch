diff --git a/tests/integration/test_mysql_protocol/golang.reference b/tests/integration/test_mysql_protocol/golang.reference
index 082149b46449..db16a5a69251 100644
--- a/tests/integration/test_mysql_protocol/golang.reference
+++ b/tests/integration/test_mysql_protocol/golang.reference
@@ -13,6 +13,7 @@ name CHAR
 a TINYINT
 Result:
 tables 1
+tables 1
 Columns:
 a
 b
diff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py
index 070aa9967fc9..0b3f6ea95af2 100644
--- a/tests/integration/test_mysql_protocol/test.py
+++ b/tests/integration/test_mysql_protocol/test.py
@@ -407,24 +407,24 @@ def test_php_client(started_cluster, php_container):
     code, (stdout, stderr) = php_container.exec_run(
         'php -f test.php {host} {port} default 123'.format(host=started_cluster.get_instance_ip('node'), port=server_port), demux=True)
     assert code == 0
-    assert stdout.decode() == 'tables
'
+    assert stdout.decode() == 'tables
tables
'
 
     code, (stdout, stderr) = php_container.exec_run(
         'php -f test_ssl.php {host} {port} default 123'.format(host=started_cluster.get_instance_ip('node'), port=server_port), demux=True)
     assert code == 0
-    assert stdout.decode() == 'tables
'
+    assert stdout.decode() == 'tables
tables
'
 
     code, (stdout, stderr) = php_container.exec_run(
         'php -f test.php {host} {port} user_with_double_sha1 abacaba'.format(host=started_cluster.get_instance_ip('node'), port=server_port),
         demux=True)
     assert code == 0
-    assert stdout.decode() == 'tables
'
+    assert stdout.decode() == 'tables
tables
'
 
     code, (stdout, stderr) = php_container.exec_run(
         'php -f test_ssl.php {host} {port} user_with_double_sha1 abacaba'.format(host=started_cluster.get_instance_ip('node'), port=server_port),
         demux=True)
     assert code == 0
-    assert stdout.decode() == 'tables
'
+    assert stdout.decode() == 'tables
tables
'
 
 
 def test_mysqljs_client(started_cluster, nodejs_container):
diff --git a/tests/integration/test_quota/test.py b/tests/integration/test_quota/test.py
index 5f43d5811784..4149987996bf 100644
--- a/tests/integration/test_quota/test.py
+++ b/tests/integration/test_quota/test.py
@@ -399,9 +399,9 @@ def test_consumption_of_show_tables():
         instance.query("SHOW QUOTA"))
 
 def test_consumption_of_show_databases():
-    assert instance.query("SHOW DATABASES") == "default
system
"
+    assert instance.query("SHOW DATABASES") == "INFORMATION_SCHEMA
default
information_schema
system
"
     assert re.match(
-        "myQuota\\tdefault\\t.*\\t31556952\\t1\\t1000\\t1\\t500\\t0\\t500\\t0\\t\\\\N\\t2\\t\\\\N.*",
+        "myQuota\\tdefault\\t.*\\t31556952\\t1\\t1000\\t1\\t500\\t0\\t500\\t0\\t\\\\N\\t4\\t\\\\N.*",
         instance.query("SHOW QUOTA"))
 
 def test_consumption_of_show_clusters():
diff --git a/tests/queries/0_stateless/01161_all_system_tables.reference b/tests/queries/0_stateless/01161_all_system_tables.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/01161_all_system_tables.sh b/tests/queries/0_stateless/01161_all_system_tables.sh
new file mode 100755
index 000000000000..9b19cc97d16c
--- /dev/null
+++ b/tests/queries/0_stateless/01161_all_system_tables.sh
@@ -0,0 +1,27 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+THREADS=8
+RAND=$(($RANDOM))
+LIMIT=10000
+
+function run_selects()
+{
+    thread_num=$1
+    readarray -t tables_arr < <(${CLICKHOUSE_CLIENT} -q "SELECT database || '.' || name FROM system.tables
+    WHERE database in ('system', 'information_schema', 'INFORMATION_SCHEMA') and name!='zookeeper'
+    AND sipHash64(name || toString($RAND)) % $THREADS = $thread_num")
+
+    for t in "${tables_arr[@]}"
+    do
+        ${CLICKHOUSE_CLIENT} -q "SELECT * FROM $t LIMIT $LIMIT FORMAT Null" # Suppress style check: database=$CLICKHOUSE_DATABASEs
+    done
+}
+
+for ((i=0; i<THREADS; i++)) do
+    run_selects "$i" &
+done
+wait
diff --git a/tests/queries/0_stateless/01161_information_schema.reference b/tests/queries/0_stateless/01161_information_schema.reference
new file mode 100644
index 000000000000..38ca608ee392
--- /dev/null
+++ b/tests/queries/0_stateless/01161_information_schema.reference
@@ -0,0 +1,27 @@
+columns
+schemata
+tables
+views
+COLUMNS
+SCHEMATA
+TABLES
+VIEWS
+INFORMATION_SCHEMA	INFORMATION_SCHEMA	default	\N	\N	\N	\N
+information_schema	information_schema	default	\N	\N	\N	\N
+default	default	mv	VIEW
+default	default	t	FOREIGN TABLE
+default	default	v	VIEW
+		tmp	LOCAL TEMPORARY
+default	default	mv	SELECT * FROM system.one	NONE	NO	YES	NO	NO	NO
+default	default	v	SELECT n, f FROM default.t	NONE	NO	NO	NO	NO	NO
+default	default	mv	dummy	1		0	UInt8	\N	\N	8	2	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
+default	default	t	n	1		0	UInt64	\N	\N	64	2	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
+default	default	t	f	2		0	Float32	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
+default	default	t	s	3		0	String	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
+default	default	t	fs	4		0	FixedString(42)	42	42	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
+default	default	t	d	5		0	Decimal(9, 6)	\N	\N	9	10	6	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
+default	default	v	n	1		1	Nullable(Int32)	\N	\N	32	2	0	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
+default	default	v	f	2		0	Float64	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
+		tmp	d	1		0	Date	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N
+		tmp	dt	2		0	DateTime	\N	\N	\N	\N	\N	0	\N	\N	\N	\N	\N	\N	\N	\N	\N
+		tmp	dtms	3		0	DateTime64(3)	\N	\N	\N	\N	\N	3	\N	\N	\N	\N	\N	\N	\N	\N	\N
diff --git a/tests/queries/0_stateless/01161_information_schema.sql b/tests/queries/0_stateless/01161_information_schema.sql
new file mode 100644
index 000000000000..b6b10efb0018
--- /dev/null
+++ b/tests/queries/0_stateless/01161_information_schema.sql
@@ -0,0 +1,19 @@
+show tables from information_schema;
+SHOW TABLES FROM INFORMATION_SCHEMA;
+
+create table t (n UInt64, f Float32, s String, fs FixedString(42), d Decimal(9, 6)) engine=Memory;
+create view v (n Nullable(Int32), f Float64) as select n, f from t;
+create materialized view mv engine=Null as select * from system.one;
+create temporary table tmp (d Date, dt DateTime, dtms DateTime64(3));
+
+-- FIXME #28687
+select * from information_schema.schemata where schema_name ilike 'information_schema';
+-- SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE (TABLE_SCHEMA=currentDatabase() OR TABLE_SCHEMA='') AND TABLE_NAME NOT LIKE '%inner%';
+SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE (table_schema=currentDatabase() OR table_schema='') AND table_name NOT LIKE '%inner%';
+select * from information_schema.views where table_schema=currentDatabase();
+-- SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE (TABLE_SCHEMA=currentDatabase() OR TABLE_SCHEMA='') AND TABLE_NAME NOT LIKE '%inner%';
+SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE (table_schema=currentDatabase() OR table_schema='') AND table_name NOT LIKE '%inner%';
+
+drop table t;
+drop view v;
+drop view mv;
diff --git a/tests/queries/0_stateless/01602_temporary_table_in_system_tables.reference b/tests/queries/0_stateless/01602_temporary_table_in_system_tables.reference
index 5b321d6c87af..4ab84e129fe0 100644
--- a/tests/queries/0_stateless/01602_temporary_table_in_system_tables.reference
+++ b/tests/queries/0_stateless/01602_temporary_table_in_system_tables.reference
@@ -1,8 +1,8 @@
 	test_01602a	CREATE TEMPORARY TABLE test_01602a (`x` UInt32) ENGINE = Memory	Memory	Memory	1
 	test_01602b	CREATE TEMPORARY TABLE test_01602b (`y` Float64, `z` String) ENGINE = Memory	Memory	Memory	1
-	test_01602a	x	UInt32	1			0	0	0		0	0	0	0	
-	test_01602b	y	Float64	1			0	0	0		0	0	0	0	
-	test_01602b	z	String	2			0	0	0		0	0	0	0	
+	test_01602a	x	UInt32	1			0	0	0		0	0	0	0		\N	32	2	0	\N
+	test_01602b	y	Float64	1			0	0	0		0	0	0	0		\N	\N	\N	\N	\N
+	test_01602b	z	String	2			0	0	0		0	0	0	0		\N	\N	\N	\N	\N
 CREATE TEMPORARY TABLE test_01602a
(
    `x` UInt32
)
ENGINE = Memory
 CREATE TEMPORARY TABLE test_01602b
(
    `y` Float64,
    `z` String
)
ENGINE = Memory
 0
