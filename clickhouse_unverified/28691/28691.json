{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 28691,
  "instance_id": "ClickHouse__ClickHouse-28691",
  "issue_numbers": [
    "9770"
  ],
  "base_commit": "5d33baab5faa1a135684b30413e9f6d291b60107",
  "patch": "diff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 278101e2c1d6..026f5f2b0d24 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -8,6 +8,7 @@\n #include <Poco/NullChannel.h>\n #include <Databases/DatabaseMemory.h>\n #include <Storages/System/attachSystemTables.h>\n+#include <Storages/System/attachInformationSchemaTables.h>\n #include <Interpreters/ProcessList.h>\n #include <Interpreters/executeQuery.h>\n #include <Interpreters/loadMetadata.h>\n@@ -179,20 +180,18 @@ void LocalServer::tryInitPath()\n }\n \n \n-static void attachSystemTables(ContextPtr context)\n+static DatabasePtr createMemoryDatabaseIfNotExists(ContextPtr context, const String & database_name)\n {\n-    DatabasePtr system_database = DatabaseCatalog::instance().tryGetDatabase(DatabaseCatalog::SYSTEM_DATABASE);\n+    DatabasePtr system_database = DatabaseCatalog::instance().tryGetDatabase(database_name);\n     if (!system_database)\n     {\n         /// TODO: add attachTableDelayed into DatabaseMemory to speedup loading\n-        system_database = std::make_shared<DatabaseMemory>(DatabaseCatalog::SYSTEM_DATABASE, context);\n-        DatabaseCatalog::instance().attachDatabase(DatabaseCatalog::SYSTEM_DATABASE, system_database);\n+        system_database = std::make_shared<DatabaseMemory>(database_name, context);\n+        DatabaseCatalog::instance().attachDatabase(database_name, system_database);\n     }\n-\n-    attachSystemTablesLocal(*system_database);\n+    return system_database;\n }\n \n-\n int LocalServer::main(const std::vector<std::string> & /*args*/)\n try\n {\n@@ -301,14 +300,18 @@ try\n         fs::create_directories(fs::path(path) / \"data/\");\n         fs::create_directories(fs::path(path) / \"metadata/\");\n         loadMetadataSystem(global_context);\n-        attachSystemTables(global_context);\n+        attachSystemTablesLocal(*createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::SYSTEM_DATABASE));\n+        attachInformationSchema(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::INFORMATION_SCHEMA));\n+        attachInformationSchema(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE));\n         loadMetadata(global_context);\n         DatabaseCatalog::instance().loadDatabases();\n         LOG_DEBUG(log, \"Loaded metadata.\");\n     }\n     else if (!config().has(\"no-system-tables\"))\n     {\n-        attachSystemTables(global_context);\n+        attachSystemTablesLocal(*createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::SYSTEM_DATABASE));\n+        attachInformationSchema(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::INFORMATION_SCHEMA));\n+        attachInformationSchema(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE));\n     }\n \n     processQueries();\ndiff --git a/programs/server/Server.cpp b/programs/server/Server.cpp\nindex 083f9a22d12e..78ae4987893c 100644\n--- a/programs/server/Server.cpp\n+++ b/programs/server/Server.cpp\n@@ -56,6 +56,7 @@\n #include <Access/AccessControlManager.h>\n #include <Storages/StorageReplicatedMergeTree.h>\n #include <Storages/System/attachSystemTables.h>\n+#include <Storages/System/attachInformationSchemaTables.h>\n #include <AggregateFunctions/registerAggregateFunctions.h>\n #include <Functions/registerFunctions.h>\n #include <TableFunctions/registerTableFunctions.h>\n@@ -1129,6 +1130,8 @@ if (ThreadFuzzer::instance().isEffective())\n         global_context->setSystemZooKeeperLogAfterInitializationIfNeeded();\n         /// After the system database is created, attach virtual system tables (in addition to query_log and part_log)\n         attachSystemTablesServer(*database_catalog.getSystemDatabase(), has_zookeeper);\n+        attachInformationSchema(global_context, *database_catalog.getDatabase(DatabaseCatalog::INFORMATION_SCHEMA));\n+        attachInformationSchema(global_context, *database_catalog.getDatabase(DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE));\n         /// Firstly remove partially dropped databases, to avoid race with MaterializedMySQLSyncThread,\n         /// that may execute DROP before loadMarkedAsDroppedTables() in background,\n         /// and so loadMarkedAsDroppedTables() will find it and try to add, and UUID will overlap.\ndiff --git a/src/Access/ContextAccess.cpp b/src/Access/ContextAccess.cpp\nindex 39b57a40e7ab..5a615ad8fd69 100644\n--- a/src/Access/ContextAccess.cpp\n+++ b/src/Access/ContextAccess.cpp\n@@ -119,8 +119,10 @@ namespace\n         AccessRights res = access;\n         res.modifyFlags(modifier);\n \n-        /// Anyone has access to the \"system\" database.\n+        /// Anyone has access to the \"system\" and \"information_schema\" database.\n         res.grant(AccessType::SELECT, DatabaseCatalog::SYSTEM_DATABASE);\n+        res.grant(AccessType::SELECT, DatabaseCatalog::INFORMATION_SCHEMA);\n+        res.grant(AccessType::SELECT, DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE);\n         return res;\n     }\n \ndiff --git a/src/Core/Defines.h b/src/Core/Defines.h\nindex 8244a0fc815a..ce5c90983998 100644\n--- a/src/Core/Defines.h\n+++ b/src/Core/Defines.h\n@@ -128,5 +128,8 @@\n /// Default limit on recursion depth of recursive descend parser.\n #define DBMS_DEFAULT_MAX_PARSER_DEPTH 1000\n \n+/// Default limit on query size.\n+#define DBMS_DEFAULT_MAX_QUERY_SIZE 262144\n+\n /// Max depth of hierarchical dictionary\n #define DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH 1000\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 09dfd347423d..f331ad2d7d31 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -48,7 +48,7 @@ class IColumn;\n     M(MaxThreads, max_alter_threads, 0, \"The maximum number of threads to execute the ALTER requests. By default, it is determined automatically.\", 0) \\\n     M(UInt64, max_read_buffer_size, DBMS_DEFAULT_BUFFER_SIZE, \"The maximum size of the buffer to read from the filesystem.\", 0) \\\n     M(UInt64, max_distributed_connections, 1024, \"The maximum number of connections for distributed processing of one query (should be greater than max_threads).\", 0) \\\n-    M(UInt64, max_query_size, 262144, \"Which part of the query can be read into RAM for parsing (the remaining data for INSERT, if any, is read later)\", 0) \\\n+    M(UInt64, max_query_size, DBMS_DEFAULT_MAX_QUERY_SIZE, \"Which part of the query can be read into RAM for parsing (the remaining data for INSERT, if any, is read later)\", 0) \\\n     M(UInt64, interactive_delay, 100000, \"The interval in microseconds to check if the request is cancelled, and to send progress info.\", 0) \\\n     M(Seconds, connect_timeout, DBMS_DEFAULT_CONNECT_TIMEOUT_SEC, \"Connection timeout if there are no replicas.\", 0) \\\n     M(Milliseconds, connect_timeout_with_failover_ms, DBMS_DEFAULT_CONNECT_TIMEOUT_WITH_FAILOVER_MS, \"Connection timeout for selecting first healthy replica.\", 0) \\\ndiff --git a/src/Interpreters/DatabaseCatalog.h b/src/Interpreters/DatabaseCatalog.h\nindex 071b80690df2..f2063e4199f1 100644\n--- a/src/Interpreters/DatabaseCatalog.h\n+++ b/src/Interpreters/DatabaseCatalog.h\n@@ -123,6 +123,8 @@ class DatabaseCatalog : boost::noncopyable, WithMutableContext\n public:\n     static constexpr const char * TEMPORARY_DATABASE = \"_temporary_and_external_tables\";\n     static constexpr const char * SYSTEM_DATABASE = \"system\";\n+    static constexpr const char * INFORMATION_SCHEMA = \"information_schema\";\n+    static constexpr const char * INFORMATION_SCHEMA_UPPERCASE = \"INFORMATION_SCHEMA\";\n \n     static DatabaseCatalog & init(ContextMutablePtr global_context_);\n     static DatabaseCatalog & instance();\ndiff --git a/src/Interpreters/loadMetadata.cpp b/src/Interpreters/loadMetadata.cpp\nindex 458e17ac16b9..230831a66741 100644\n--- a/src/Interpreters/loadMetadata.cpp\n+++ b/src/Interpreters/loadMetadata.cpp\n@@ -47,6 +47,12 @@ static void executeCreateQuery(\n     interpreter.execute();\n }\n \n+static bool isSystemOrInformationSchema(const String & database_name)\n+{\n+    return database_name == DatabaseCatalog::SYSTEM_DATABASE ||\n+           database_name == DatabaseCatalog::INFORMATION_SCHEMA ||\n+           database_name == DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE;\n+}\n \n static void loadDatabase(\n     ContextMutablePtr context,\n@@ -116,7 +122,7 @@ void loadMetadata(ContextMutablePtr context, const String & default_database_nam\n             if (fs::path(current_file).extension() == \".sql\")\n             {\n                 String db_name = fs::path(current_file).stem();\n-                if (db_name != DatabaseCatalog::SYSTEM_DATABASE)\n+                if (!isSystemOrInformationSchema(db_name))\n                     databases.emplace(unescapeForFileName(db_name), fs::path(path) / db_name);\n             }\n \n@@ -142,7 +148,7 @@ void loadMetadata(ContextMutablePtr context, const String & default_database_nam\n         if (current_file.at(0) == '.')\n             continue;\n \n-        if (current_file == DatabaseCatalog::SYSTEM_DATABASE)\n+        if (isSystemOrInformationSchema(current_file))\n             continue;\n \n         databases.emplace(unescapeForFileName(current_file), it->path().string());\n@@ -171,25 +177,31 @@ void loadMetadata(ContextMutablePtr context, const String & default_database_nam\n     }\n }\n \n-\n-void loadMetadataSystem(ContextMutablePtr context)\n+static void loadSystemDatabaseImpl(ContextMutablePtr context, const String & database_name, const String & default_engine)\n {\n-    String path = context->getPath() + \"metadata/\" + DatabaseCatalog::SYSTEM_DATABASE;\n+    String path = context->getPath() + \"metadata/\" + database_name;\n     String metadata_file = path + \".sql\";\n     if (fs::exists(fs::path(path)) || fs::exists(fs::path(metadata_file)))\n     {\n         /// 'has_force_restore_data_flag' is true, to not fail on loading query_log table, if it is corrupted.\n-        loadDatabase(context, DatabaseCatalog::SYSTEM_DATABASE, path, true);\n+        loadDatabase(context, database_name, path, true);\n     }\n     else\n     {\n         /// Initialize system database manually\n         String database_create_query = \"CREATE DATABASE \";\n-        database_create_query += DatabaseCatalog::SYSTEM_DATABASE;\n-        database_create_query += \" ENGINE=Atomic\";\n-        executeCreateQuery(database_create_query, context, DatabaseCatalog::SYSTEM_DATABASE, \"<no file>\", true);\n+        database_create_query += database_name;\n+        database_create_query += \" ENGINE=\";\n+        database_create_query += default_engine;\n+        executeCreateQuery(database_create_query, context, database_name, \"<no file>\", true);\n     }\n+}\n \n+void loadMetadataSystem(ContextMutablePtr context)\n+{\n+    loadSystemDatabaseImpl(context, DatabaseCatalog::SYSTEM_DATABASE, \"Atomic\");\n+    loadSystemDatabaseImpl(context, DatabaseCatalog::INFORMATION_SCHEMA, \"Memory\");\n+    loadSystemDatabaseImpl(context, DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE, \"Memory\");\n }\n \n }\ndiff --git a/src/Interpreters/loadMetadata.h b/src/Interpreters/loadMetadata.h\nindex cf038a428552..529d2e43fc8a 100644\n--- a/src/Interpreters/loadMetadata.h\n+++ b/src/Interpreters/loadMetadata.h\n@@ -10,7 +10,8 @@ namespace DB\n /// You should first load system database, then attach system tables that you need into it, then load other databases.\n void loadMetadataSystem(ContextMutablePtr context);\n \n-/// Load tables from databases and add them to context. Database 'system' is ignored. Use separate function to load system tables.\n+/// Load tables from databases and add them to context. Database 'system' and 'information_schema' is ignored.\n+/// Use separate function to load system tables.\n void loadMetadata(ContextMutablePtr context, const String & default_database_name = {});\n \n }\ndiff --git a/src/Storages/System/CMakeLists.txt b/src/Storages/System/CMakeLists.txt\nindex 7e3509320383..2e909c03f5d4 100644\n--- a/src/Storages/System/CMakeLists.txt\n+++ b/src/Storages/System/CMakeLists.txt\n@@ -2,6 +2,8 @@\n # You can also regenerate it manually this way:\n # execute_process(COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/StorageSystemContributors.sh\")\n \n+include(${ClickHouse_SOURCE_DIR}/cmake/embed_binary.cmake)\n+\n set (CONFIG_BUILD \"${CMAKE_CURRENT_BINARY_DIR}/StorageSystemBuildOptions.generated.cpp\")\n get_property (BUILD_COMPILE_DEFINITIONS DIRECTORY ${ClickHouse_SOURCE_DIR} PROPERTY COMPILE_DEFINITIONS)\n get_property (BUILD_INCLUDE_DIRECTORIES DIRECTORY ${ClickHouse_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)\n@@ -41,7 +43,16 @@ list (APPEND storages_system_sources ${GENERATED_TIMEZONES_SRC})\n # Overlength strings\n set_source_files_properties(${GENERATED_LICENSES_SRC} PROPERTIES COMPILE_FLAGS -w)\n \n+clickhouse_embed_binaries(\n+        TARGET information_schema_metadata\n+        RESOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/InformationSchema/\"\n+        RESOURCES schemata.sql tables.sql views.sql columns.sql\n+)\n+\n add_library(clickhouse_storages_system ${storages_system_headers} ${storages_system_sources})\n+\n+add_dependencies(clickhouse_storages_system information_schema_metadata)\n+\n target_link_libraries(clickhouse_storages_system PRIVATE\n     dbms\n     common\n@@ -49,4 +60,5 @@ target_link_libraries(clickhouse_storages_system PRIVATE\n     clickhouse_common_zookeeper\n     clickhouse_parsers\n     Poco::JSON\n+    INTERFACE \"-Wl,${WHOLE_ARCHIVE} $<TARGET_FILE:information_schema_metadata> -Wl,${NO_WHOLE_ARCHIVE}\"\n )\ndiff --git a/src/Storages/System/InformationSchema/columns.sql b/src/Storages/System/InformationSchema/columns.sql\nnew file mode 100644\nindex 000000000000..1b71ea58f573\n--- /dev/null\n+++ b/src/Storages/System/InformationSchema/columns.sql\n@@ -0,0 +1,74 @@\n+ATTACH VIEW columns\n+(\n+    `table_catalog` String,\n+    `table_schema` String,\n+    `table_name` String,\n+    `column_name` String,\n+    `ordinal_position` UInt64,\n+    `column_default` String,\n+    `is_nullable` UInt8,\n+    `data_type` String,\n+    `character_maximum_length` Nullable(UInt64),\n+    `character_octet_length` Nullable(UInt64),\n+    `numeric_precision` Nullable(UInt64),\n+    `numeric_precision_radix` Nullable(UInt64),\n+    `numeric_scale` Nullable(UInt64),\n+    `datetime_precision` Nullable(UInt64),\n+    `character_set_catalog` Nullable(String),\n+    `character_set_schema` Nullable(String),\n+    `character_set_name` Nullable(String),\n+    `collation_catalog` Nullable(String),\n+    `collation_schema` Nullable(String),\n+    `collation_name` Nullable(String),\n+    `domain_catalog` Nullable(String),\n+    `domain_schema` Nullable(String),\n+    `domain_name` Nullable(String),\n+    `TABLE_CATALOG` String ALIAS table_catalog,\n+    `TABLE_SCHEMA` String ALIAS table_schema,\n+    `TABLE_NAME` String ALIAS table_name,\n+    `COLUMN_NAME` String ALIAS column_name,\n+    `ORDINAL_POSITION` UInt64 ALIAS ordinal_position,\n+    `COLUMN_DEFAULT` String ALIAS column_default,\n+    `IS_NULLABLE` UInt8 ALIAS is_nullable,\n+    `DATA_TYPE` String ALIAS data_type,\n+    `CHARACTER_MAXIMUM_LENGTH` Nullable(UInt64) ALIAS character_maximum_length,\n+    `CHARACTER_OCTET_LENGTH` Nullable(UInt64) ALIAS character_octet_length,\n+    `NUMERIC_PRECISION` Nullable(UInt64) ALIAS numeric_precision,\n+    `NUMERIC_PRECISION_RADIX` Nullable(UInt64) ALIAS numeric_precision_radix,\n+    `NUMERIC_SCALE` Nullable(UInt64) ALIAS numeric_scale,\n+    `DATETIME_PRECISION` Nullable(UInt64) ALIAS datetime_precision,\n+    `CHARACTER_SET_CATALOG` Nullable(String) ALIAS character_set_catalog,\n+    `CHARACTER_SET_SCHEMA` Nullable(String) ALIAS character_set_schema,\n+    `CHARACTER_SET_NAME` Nullable(String) ALIAS character_set_name,\n+    `COLLATION_CATALOG` Nullable(String) ALIAS collation_catalog,\n+    `COLLATION_SCHEMA` Nullable(String) ALIAS collation_schema,\n+    `COLLATION_NAME` Nullable(String) ALIAS collation_name,\n+    `DOMAIN_CATALOG` Nullable(String) ALIAS domain_catalog,\n+    `DOMAIN_SCHEMA` Nullable(String) ALIAS domain_schema,\n+    `DOMAIN_NAME` Nullable(String) ALIAS domain_name\n+) AS\n+SELECT\n+    database AS table_catalog,\n+    database AS table_schema,\n+    table AS table_name,\n+    name AS column_name,\n+    position AS ordinal_position,\n+    default_expression AS column_default,\n+    type LIKE 'Nullable(%)' AS is_nullable,\n+    type AS data_type,\n+    character_octet_length AS character_maximum_length,\n+    character_octet_length,\n+    numeric_precision,\n+    numeric_precision_radix,\n+    numeric_scale,\n+    datetime_precision,\n+    NULL AS character_set_catalog,\n+    NULL AS character_set_schema,\n+    NULL AS character_set_name,\n+    NULL AS collation_catalog,\n+    NULL AS collation_schema,\n+    NULL AS collation_name,\n+    NULL AS domain_catalog,\n+    NULL AS domain_schema,\n+    NULL AS domain_name\n+FROM system.columns\ndiff --git a/src/Storages/System/InformationSchema/schemata.sql b/src/Storages/System/InformationSchema/schemata.sql\nnew file mode 100644\nindex 000000000000..9686fcbf4fab\n--- /dev/null\n+++ b/src/Storages/System/InformationSchema/schemata.sql\n@@ -0,0 +1,26 @@\n+ATTACH VIEW schemata\n+(\n+    `catalog_name` String,\n+    `schema_name` String,\n+    `schema_owner` String,\n+    `default_character_set_catalog` Nullable(String),\n+    `default_character_set_schema` Nullable(String),\n+    `default_character_set_name` Nullable(String),\n+    `sql_path` Nullable(String),\n+    `CATALOG_NAME` String ALIAS catalog_name,\n+    `SCHEMA_NAME` String ALIAS schema_name,\n+    `SCHEMA_OWNER` String ALIAS schema_owner,\n+    `DEFAULT_CHARACTER_SET_CATALOG` Nullable(String) ALIAS default_character_set_catalog,\n+    `DEFAULT_CHARACTER_SET_SCHEMA` Nullable(String) ALIAS default_character_set_schema,\n+    `DEFAULT_CHARACTER_SET_NAME` Nullable(String) ALIAS default_character_set_name,\n+    `SQL_PATH` Nullable(String) ALIAS sql_path\n+) AS\n+SELECT\n+    name AS catalog_name,\n+    name AS schema_name,\n+    'default' AS schema_owner,\n+    NULL AS default_character_set_catalog,\n+    NULL AS default_character_set_schema,\n+    NULL AS default_character_set_name,\n+    NULL AS sql_path\n+FROM system.databases\ndiff --git a/src/Storages/System/InformationSchema/tables.sql b/src/Storages/System/InformationSchema/tables.sql\nnew file mode 100644\nindex 000000000000..8eea3713923b\n--- /dev/null\n+++ b/src/Storages/System/InformationSchema/tables.sql\n@@ -0,0 +1,17 @@\n+ATTACH VIEW tables\n+(\n+    `table_catalog` String,\n+    `table_schema` String,\n+    `table_name` String,\n+    `table_type` Enum8('BASE TABLE' = 1, 'VIEW' = 2, 'FOREIGN TABLE' = 3, 'LOCAL TEMPORARY' = 4, 'SYSTEM VIEW' = 5),\n+    `TABLE_CATALOG` String ALIAS table_catalog,\n+    `TABLE_SCHEMA` String ALIAS table_schema,\n+    `TABLE_NAME` String ALIAS table_name,\n+    `TABLE_TYPE` Enum8('BASE TABLE' = 1, 'VIEW' = 2, 'FOREIGN TABLE' = 3, 'LOCAL TEMPORARY' = 4, 'SYSTEM VIEW' = 5) ALIAS table_type\n+) AS\n+SELECT\n+    database AS table_catalog,\n+    database AS table_schema,\n+    name AS table_name,\n+    multiIf(is_temporary, 4, engine like '%View', 2, engine LIKE 'System%', 5, has_own_data = 0, 3, 1) AS table_type\n+FROM system.tables\ndiff --git a/src/Storages/System/InformationSchema/views.sql b/src/Storages/System/InformationSchema/views.sql\nnew file mode 100644\nindex 000000000000..c5ecebfceac2\n--- /dev/null\n+++ b/src/Storages/System/InformationSchema/views.sql\n@@ -0,0 +1,36 @@\n+ATTACH VIEW views\n+(\n+    `table_catalog` String,\n+    `table_schema` String,\n+    `table_name` String,\n+    `view_definition` String,\n+    `check_option` String,\n+    `is_updatable` Enum8('NO' = 0, 'YES' = 1),\n+    `is_insertable_into` Enum8('NO' = 0, 'YES' = 1),\n+    `is_trigger_updatable` Enum8('NO' = 0, 'YES' = 1),\n+    `is_trigger_deletable` Enum8('NO' = 0, 'YES' = 1),\n+    `is_trigger_insertable_into` Enum8('NO' = 0, 'YES' = 1),\n+    `TABLE_CATALOG` String ALIAS table_catalog,\n+    `TABLE_SCHEMA` String ALIAS table_schema,\n+    `TABLE_NAME` String ALIAS table_name,\n+    `VIEW_DEFINITION` String ALIAS view_definition,\n+    `CHECK_OPTION` String ALIAS check_option,\n+    `IS_UPDATABLE` Enum8('NO' = 0, 'YES' = 1) ALIAS is_updatable,\n+    `IS_INSERTABLE_INTO` Enum8('NO' = 0, 'YES' = 1) ALIAS is_insertable_into,\n+    `IS_TRIGGER_UPDATABLE` Enum8('NO' = 0, 'YES' = 1) ALIAS is_trigger_updatable,\n+    `IS_TRIGGER_DELETABLE` Enum8('NO' = 0, 'YES' = 1) ALIAS is_trigger_deletable,\n+    `IS_TRIGGER_INSERTABLE_INTO` Enum8('NO' = 0, 'YES' = 1) ALIAS is_trigger_insertable_into\n+) AS\n+SELECT\n+    database AS table_catalog,\n+    database AS table_schema,\n+    name AS table_name,\n+    as_select AS view_definition,\n+    'NONE' AS check_option,\n+    0 AS is_updatable,\n+    engine = 'MaterializedView' AS is_insertable_into,\n+    0 AS is_trigger_updatable,\n+    0 AS is_trigger_deletable,\n+    0 AS is_trigger_insertable_into\n+FROM system.tables\n+WHERE engine LIKE '%View'\ndiff --git a/src/Storages/System/StorageSystemColumns.cpp b/src/Storages/System/StorageSystemColumns.cpp\nindex 0058b58f5377..cefc5587014f 100644\n--- a/src/Storages/System/StorageSystemColumns.cpp\n+++ b/src/Storages/System/StorageSystemColumns.cpp\n@@ -5,6 +5,8 @@\n #include <Columns/ColumnString.h>\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypesNumber.h>\n+#include <DataTypes/DataTypesDecimal.h>\n+#include <DataTypes/DataTypeDateTime64.h>\n #include <Storages/VirtualColumnUtils.h>\n #include <Parsers/queryToString.h>\n #include <Parsers/ASTSelectQuery.h>\n@@ -44,6 +46,12 @@ StorageSystemColumns::StorageSystemColumns(const StorageID & table_id_)\n         { \"is_in_primary_key\",   std::make_shared<DataTypeUInt8>() },\n         { \"is_in_sampling_key\",  std::make_shared<DataTypeUInt8>() },\n         { \"compression_codec\",   std::make_shared<DataTypeString>() },\n+        { \"character_octet_length\",     std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>()) },\n+        { \"numeric_precision\",          std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>()) },\n+        { \"numeric_precision_radix\",    std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>()) },\n+        { \"numeric_scale\",              std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>()) },\n+        { \"datetime_precision\",         std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>()) },\n+\n     }));\n     setInMemoryMetadata(storage_metadata);\n }\n@@ -218,6 +226,60 @@ class ColumnsSource : public SourceWithProgress\n                         res_columns[res_index++]->insertDefault();\n                 }\n \n+                /// character_octet_length makes sense for FixedString only\n+                DataTypePtr not_nullable_type = removeNullable(column.type);\n+                if (columns_mask[src_index++])\n+                {\n+                    if (isFixedString(not_nullable_type))\n+                        res_columns[res_index++]->insert(not_nullable_type->getSizeOfValueInMemory());\n+                    else\n+                        res_columns[res_index++]->insertDefault();\n+                }\n+\n+                /// numeric_precision\n+                if (columns_mask[src_index++])\n+                {\n+                    if (isInteger(not_nullable_type))\n+                        res_columns[res_index++]->insert(not_nullable_type->getSizeOfValueInMemory() * 8);  /// radix is 2\n+                    else if (isDecimal(not_nullable_type))\n+                        res_columns[res_index++]->insert(getDecimalPrecision(*not_nullable_type));  /// radix is 10\n+                    else\n+                        res_columns[res_index++]->insertDefault();\n+                }\n+\n+                /// numeric_precision_radix\n+                if (columns_mask[src_index++])\n+                {\n+                    if (isInteger(not_nullable_type))\n+                        res_columns[res_index++]->insert(2);\n+                    else if (isDecimal(not_nullable_type))\n+                        res_columns[res_index++]->insert(10);\n+                    else\n+                        res_columns[res_index++]->insertDefault();\n+                }\n+\n+                /// numeric_scale\n+                if (columns_mask[src_index++])\n+                {\n+                    if (isInteger(not_nullable_type))\n+                        res_columns[res_index++]->insert(0);\n+                    else if (isDecimal(not_nullable_type))\n+                        res_columns[res_index++]->insert(getDecimalScale(*not_nullable_type));\n+                    else\n+                        res_columns[res_index++]->insertDefault();\n+                }\n+\n+                /// datetime_precision\n+                if (columns_mask[src_index++])\n+                {\n+                    if (isDateTime64(not_nullable_type))\n+                        res_columns[res_index++]->insert(assert_cast<const DataTypeDateTime64 &>(*not_nullable_type).getScale());\n+                    else if (isDateOrDate32(not_nullable_type) || isDateTime(not_nullable_type) || isDateTime64(not_nullable_type))\n+                        res_columns[res_index++]->insert(0);\n+                    else\n+                        res_columns[res_index++]->insertDefault();\n+                }\n+\n                 ++rows_count;\n             }\n         }\ndiff --git a/src/Storages/System/StorageSystemReplicatedFetches.h b/src/Storages/System/StorageSystemReplicatedFetches.h\nindex b7336dbf4371..1e17ac4941ce 100644\n--- a/src/Storages/System/StorageSystemReplicatedFetches.h\n+++ b/src/Storages/System/StorageSystemReplicatedFetches.h\n@@ -11,7 +11,7 @@ namespace DB\n class Context;\n \n /// system.replicated_fetches table. Takes data from context.getReplicatedFetchList()\n-class StorageSystemReplicatedFetches final : public shared_ptr_helper<StorageSystemReplicatedFetches>, public IStorageSystemOneBlock<StorageSystemReplicatedFetches >\n+class StorageSystemReplicatedFetches final : public shared_ptr_helper<StorageSystemReplicatedFetches>, public IStorageSystemOneBlock<StorageSystemReplicatedFetches>\n {\n     friend struct shared_ptr_helper<StorageSystemReplicatedFetches>;\n public:\ndiff --git a/src/Storages/System/StorageSystemTables.cpp b/src/Storages/System/StorageSystemTables.cpp\nindex 1d38ca6ebbb8..f1f7fa4fa08a 100644\n--- a/src/Storages/System/StorageSystemTables.cpp\n+++ b/src/Storages/System/StorageSystemTables.cpp\n@@ -47,6 +47,7 @@ StorageSystemTables::StorageSystemTables(const StorageID & table_id_)\n         {\"dependencies_table\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n         {\"create_table_query\", std::make_shared<DataTypeString>()},\n         {\"engine_full\", std::make_shared<DataTypeString>()},\n+        {\"as_select\", std::make_shared<DataTypeString>()},\n         {\"partition_key\", std::make_shared<DataTypeString>()},\n         {\"sorting_key\", std::make_shared<DataTypeString>()},\n         {\"primary_key\", std::make_shared<DataTypeString>()},\n@@ -57,6 +58,7 @@ StorageSystemTables::StorageSystemTables(const StorageID & table_id_)\n         {\"lifetime_rows\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>())},\n         {\"lifetime_bytes\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>())},\n         {\"comment\", std::make_shared<DataTypeString>()},\n+        {\"has_own_data\", std::make_shared<DataTypeUInt8>()},\n     }));\n     setInMemoryMetadata(storage_metadata);\n }\n@@ -209,6 +211,10 @@ class TablesBlockSource : public SourceWithProgress\n                         if (columns_mask[src_index++])\n                             res_columns[res_index++]->insert(table.second->getName());\n \n+                        // as_select\n+                        if (columns_mask[src_index++])\n+                            res_columns[res_index++]->insertDefault();\n+\n                         // partition_key\n                         if (columns_mask[src_index++])\n                             res_columns[res_index++]->insertDefault();\n@@ -248,6 +254,10 @@ class TablesBlockSource : public SourceWithProgress\n                         // comment\n                         if (columns_mask[src_index++])\n                             res_columns[res_index++]->insertDefault();\n+\n+                        // has_own_data\n+                        if (columns_mask[src_index++])\n+                            res_columns[res_index++]->insertDefault();\n                     }\n                 }\n \n@@ -355,15 +365,15 @@ class TablesBlockSource : public SourceWithProgress\n                         res_columns[res_index++]->insert(dependencies_table_name_array);\n                 }\n \n-                if (columns_mask[src_index] || columns_mask[src_index + 1])\n+                if (columns_mask[src_index] || columns_mask[src_index + 1] || columns_mask[src_index + 2])\n                 {\n                     ASTPtr ast = database->tryGetCreateTableQuery(table_name, context);\n+                    auto * ast_create = ast ? ast->as<ASTCreateQuery>() : nullptr;\n \n-                    if (ast && !context->getSettingsRef().show_table_uuid_in_table_create_query_if_not_nil)\n+                    if (ast_create && !context->getSettingsRef().show_table_uuid_in_table_create_query_if_not_nil)\n                     {\n-                        auto & create = ast->as<ASTCreateQuery &>();\n-                        create.uuid = UUIDHelpers::Nil;\n-                        create.to_inner_uuid = UUIDHelpers::Nil;\n+                        ast_create->uuid = UUIDHelpers::Nil;\n+                        ast_create->to_inner_uuid = UUIDHelpers::Nil;\n                     }\n \n                     if (columns_mask[src_index++])\n@@ -373,24 +383,28 @@ class TablesBlockSource : public SourceWithProgress\n                     {\n                         String engine_full;\n \n-                        if (ast)\n+                        if (ast_create && ast_create->storage)\n                         {\n-                            const auto & ast_create = ast->as<ASTCreateQuery &>();\n-                            if (ast_create.storage)\n-                            {\n-                                engine_full = queryToString(*ast_create.storage);\n-\n-                                static const char * const extra_head = \" ENGINE = \";\n-                                if (startsWith(engine_full, extra_head))\n-                                    engine_full = engine_full.substr(strlen(extra_head));\n-                            }\n+                            engine_full = queryToString(*ast_create->storage);\n+\n+                            static const char * const extra_head = \" ENGINE = \";\n+                            if (startsWith(engine_full, extra_head))\n+                                engine_full = engine_full.substr(strlen(extra_head));\n                         }\n \n                         res_columns[res_index++]->insert(engine_full);\n                     }\n+\n+                    if (columns_mask[src_index++])\n+                    {\n+                        String as_select;\n+                        if (ast_create && ast_create->select)\n+                            as_select = queryToString(*ast_create->select);\n+                        res_columns[res_index++]->insert(as_select);\n+                    }\n                 }\n                 else\n-                    src_index += 2;\n+                    src_index += 3;\n \n                 StorageMetadataPtr metadata_snapshot;\n                 if (table)\n@@ -483,6 +497,14 @@ class TablesBlockSource : public SourceWithProgress\n                     else\n                         res_columns[res_index++]->insertDefault();\n                 }\n+\n+                if (columns_mask[src_index++])\n+                {\n+                    if (table)\n+                        res_columns[res_index++]->insert(table->storesDataOnDisk());\n+                    else\n+                        res_columns[res_index++]->insertDefault();\n+                }\n             }\n         }\n \ndiff --git a/src/Storages/System/attachInformationSchemaTables.cpp b/src/Storages/System/attachInformationSchemaTables.cpp\nnew file mode 100644\nindex 000000000000..a94b15ba3b48\n--- /dev/null\n+++ b/src/Storages/System/attachInformationSchemaTables.cpp\n@@ -0,0 +1,57 @@\n+#include <Databases/DatabaseOnDisk.h>\n+#include <Storages/System/attachInformationSchemaTables.h>\n+#include <Storages/System/attachSystemTablesImpl.h>\n+#include <Parsers/ParserCreateQuery.h>\n+#include <Parsers/parseQuery.h>\n+#include <common/getResource.h>\n+\n+namespace DB\n+{\n+\n+/// View structures are taken from http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\n+\n+static void createInformationSchemaView(ContextMutablePtr context, IDatabase & database, const String & view_name)\n+{\n+    try\n+    {\n+        assert(database.getDatabaseName() == DatabaseCatalog::INFORMATION_SCHEMA ||\n+               database.getDatabaseName() == DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE);\n+        if (database.getEngineName() != \"Memory\")\n+            return;\n+        bool is_uppercase = database.getDatabaseName() == DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE;\n+\n+        String metadata_resource_name = view_name + \".sql\";\n+        auto attach_query = getResource(metadata_resource_name);\n+        if (attach_query.empty())\n+            return;\n+\n+        ParserCreateQuery parser;\n+        ASTPtr ast = parseQuery(parser, attach_query.data(), attach_query.data() + attach_query.size(),\n+                                \"Attach query from embedded resource \" + metadata_resource_name,\n+                                DBMS_DEFAULT_MAX_QUERY_SIZE, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n+\n+        auto & ast_create = ast->as<ASTCreateQuery &>();\n+        assert(view_name == ast_create.table);\n+        if (is_uppercase)\n+            ast_create.table = Poco::toUpper(view_name);\n+\n+        StoragePtr view = createTableFromAST(ast_create, database.getDatabaseName(),\n+                                             database.getTableDataPath(ast_create), context, true).second;\n+\n+        database.createTable(context, ast_create.table, view, ast);\n+    }\n+    catch (...)\n+    {\n+        tryLogCurrentException(__PRETTY_FUNCTION__);\n+    }\n+}\n+\n+void attachInformationSchema(ContextMutablePtr context, IDatabase & information_schema_database)\n+{\n+    createInformationSchemaView(context, information_schema_database, \"schemata\");\n+    createInformationSchemaView(context, information_schema_database, \"tables\");\n+    createInformationSchemaView(context, information_schema_database, \"views\");\n+    createInformationSchemaView(context, information_schema_database, \"columns\");\n+}\n+\n+}\ndiff --git a/src/Storages/System/attachInformationSchemaTables.h b/src/Storages/System/attachInformationSchemaTables.h\nnew file mode 100644\nindex 000000000000..9bb5623128a6\n--- /dev/null\n+++ b/src/Storages/System/attachInformationSchemaTables.h\n@@ -0,0 +1,11 @@\n+#pragma once\n+#include <Interpreters/Context_fwd.h>\n+\n+namespace DB\n+{\n+\n+class IDatabase;\n+\n+void attachInformationSchema(ContextMutablePtr context, IDatabase & information_schema_database);\n+\n+}\ndiff --git a/src/Storages/System/attachSystemTablesImpl.h b/src/Storages/System/attachSystemTablesImpl.h\nindex 78e944f7d279..1fdf677699ad 100644\n--- a/src/Storages/System/attachSystemTablesImpl.h\n+++ b/src/Storages/System/attachSystemTablesImpl.h\n@@ -9,6 +9,7 @@ namespace DB\n template<typename StorageT, typename... StorageArgs>\n void attach(IDatabase & system_database, const String & table_name, StorageArgs && ... args)\n {\n+    assert(system_database.getDatabaseName() == DatabaseCatalog::SYSTEM_DATABASE);\n     if (system_database.getUUID() == UUIDHelpers::Nil)\n     {\n         /// Attach to Ordinary database\ndiff --git a/src/Storages/ya.make b/src/Storages/ya.make\nindex 11a1ad212c10..2b6bfad84a94 100644\n--- a/src/Storages/ya.make\n+++ b/src/Storages/ya.make\n@@ -217,6 +217,7 @@ SRCS(\n     System/StorageSystemWarnings.cpp\n     System/StorageSystemZeros.cpp\n     System/StorageSystemZooKeeper.cpp\n+    System/attachInformationSchemaTables.cpp\n     System/attachSystemTables.cpp\n     TTLDescription.cpp\n     VirtualColumnUtils.cpp\n",
  "test_patch": "diff --git a/tests/integration/test_mysql_protocol/golang.reference b/tests/integration/test_mysql_protocol/golang.reference\nindex 082149b46449..db16a5a69251 100644\n--- a/tests/integration/test_mysql_protocol/golang.reference\n+++ b/tests/integration/test_mysql_protocol/golang.reference\n@@ -13,6 +13,7 @@ name CHAR\n a TINYINT\n Result:\n tables 1\n+tables 1\n Columns:\n a\n b\ndiff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py\nindex 070aa9967fc9..0b3f6ea95af2 100644\n--- a/tests/integration/test_mysql_protocol/test.py\n+++ b/tests/integration/test_mysql_protocol/test.py\n@@ -407,24 +407,24 @@ def test_php_client(started_cluster, php_container):\n     code, (stdout, stderr) = php_container.exec_run(\n         'php -f test.php {host} {port} default 123'.format(host=started_cluster.get_instance_ip('node'), port=server_port), demux=True)\n     assert code == 0\n-    assert stdout.decode() == 'tables\\n'\n+    assert stdout.decode() == 'tables\\ntables\\n'\n \n     code, (stdout, stderr) = php_container.exec_run(\n         'php -f test_ssl.php {host} {port} default 123'.format(host=started_cluster.get_instance_ip('node'), port=server_port), demux=True)\n     assert code == 0\n-    assert stdout.decode() == 'tables\\n'\n+    assert stdout.decode() == 'tables\\ntables\\n'\n \n     code, (stdout, stderr) = php_container.exec_run(\n         'php -f test.php {host} {port} user_with_double_sha1 abacaba'.format(host=started_cluster.get_instance_ip('node'), port=server_port),\n         demux=True)\n     assert code == 0\n-    assert stdout.decode() == 'tables\\n'\n+    assert stdout.decode() == 'tables\\ntables\\n'\n \n     code, (stdout, stderr) = php_container.exec_run(\n         'php -f test_ssl.php {host} {port} user_with_double_sha1 abacaba'.format(host=started_cluster.get_instance_ip('node'), port=server_port),\n         demux=True)\n     assert code == 0\n-    assert stdout.decode() == 'tables\\n'\n+    assert stdout.decode() == 'tables\\ntables\\n'\n \n \n def test_mysqljs_client(started_cluster, nodejs_container):\ndiff --git a/tests/integration/test_quota/test.py b/tests/integration/test_quota/test.py\nindex 5f43d5811784..4149987996bf 100644\n--- a/tests/integration/test_quota/test.py\n+++ b/tests/integration/test_quota/test.py\n@@ -399,9 +399,9 @@ def test_consumption_of_show_tables():\n         instance.query(\"SHOW QUOTA\"))\n \n def test_consumption_of_show_databases():\n-    assert instance.query(\"SHOW DATABASES\") == \"default\\nsystem\\n\"\n+    assert instance.query(\"SHOW DATABASES\") == \"INFORMATION_SCHEMA\\ndefault\\ninformation_schema\\nsystem\\n\"\n     assert re.match(\n-        \"myQuota\\\\tdefault\\\\t.*\\\\t31556952\\\\t1\\\\t1000\\\\t1\\\\t500\\\\t0\\\\t500\\\\t0\\\\t\\\\\\\\N\\\\t2\\\\t\\\\\\\\N.*\",\n+        \"myQuota\\\\tdefault\\\\t.*\\\\t31556952\\\\t1\\\\t1000\\\\t1\\\\t500\\\\t0\\\\t500\\\\t0\\\\t\\\\\\\\N\\\\t4\\\\t\\\\\\\\N.*\",\n         instance.query(\"SHOW QUOTA\"))\n \n def test_consumption_of_show_clusters():\ndiff --git a/tests/queries/0_stateless/01161_all_system_tables.reference b/tests/queries/0_stateless/01161_all_system_tables.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01161_all_system_tables.sh b/tests/queries/0_stateless/01161_all_system_tables.sh\nnew file mode 100755\nindex 000000000000..9b19cc97d16c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01161_all_system_tables.sh\n@@ -0,0 +1,27 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+THREADS=8\n+RAND=$(($RANDOM))\n+LIMIT=10000\n+\n+function run_selects()\n+{\n+    thread_num=$1\n+    readarray -t tables_arr < <(${CLICKHOUSE_CLIENT} -q \"SELECT database || '.' || name FROM system.tables\n+    WHERE database in ('system', 'information_schema', 'INFORMATION_SCHEMA') and name!='zookeeper'\n+    AND sipHash64(name || toString($RAND)) % $THREADS = $thread_num\")\n+\n+    for t in \"${tables_arr[@]}\"\n+    do\n+        ${CLICKHOUSE_CLIENT} -q \"SELECT * FROM $t LIMIT $LIMIT FORMAT Null\" # Suppress style check: database=$CLICKHOUSE_DATABASEs\n+    done\n+}\n+\n+for ((i=0; i<THREADS; i++)) do\n+    run_selects \"$i\" &\n+done\n+wait\ndiff --git a/tests/queries/0_stateless/01161_information_schema.reference b/tests/queries/0_stateless/01161_information_schema.reference\nnew file mode 100644\nindex 000000000000..38ca608ee392\n--- /dev/null\n+++ b/tests/queries/0_stateless/01161_information_schema.reference\n@@ -0,0 +1,27 @@\n+columns\n+schemata\n+tables\n+views\n+COLUMNS\n+SCHEMATA\n+TABLES\n+VIEWS\n+INFORMATION_SCHEMA\tINFORMATION_SCHEMA\tdefault\t\\N\t\\N\t\\N\t\\N\n+information_schema\tinformation_schema\tdefault\t\\N\t\\N\t\\N\t\\N\n+default\tdefault\tmv\tVIEW\n+default\tdefault\tt\tFOREIGN TABLE\n+default\tdefault\tv\tVIEW\n+\t\ttmp\tLOCAL TEMPORARY\n+default\tdefault\tmv\tSELECT * FROM system.one\tNONE\tNO\tYES\tNO\tNO\tNO\n+default\tdefault\tv\tSELECT n, f FROM default.t\tNONE\tNO\tNO\tNO\tNO\tNO\n+default\tdefault\tmv\tdummy\t1\t\t0\tUInt8\t\\N\t\\N\t8\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+default\tdefault\tt\tn\t1\t\t0\tUInt64\t\\N\t\\N\t64\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+default\tdefault\tt\tf\t2\t\t0\tFloat32\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+default\tdefault\tt\ts\t3\t\t0\tString\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+default\tdefault\tt\tfs\t4\t\t0\tFixedString(42)\t42\t42\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+default\tdefault\tt\td\t5\t\t0\tDecimal(9, 6)\t\\N\t\\N\t9\t10\t6\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+default\tdefault\tv\tn\t1\t\t1\tNullable(Int32)\t\\N\t\\N\t32\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+default\tdefault\tv\tf\t2\t\t0\tFloat64\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+\t\ttmp\td\t1\t\t0\tDate\t\\N\t\\N\t\\N\t\\N\t\\N\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+\t\ttmp\tdt\t2\t\t0\tDateTime\t\\N\t\\N\t\\N\t\\N\t\\N\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\n+\t\ttmp\tdtms\t3\t\t0\tDateTime64(3)\t\\N\t\\N\t\\N\t\\N\t\\N\t3\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\t\\N\ndiff --git a/tests/queries/0_stateless/01161_information_schema.sql b/tests/queries/0_stateless/01161_information_schema.sql\nnew file mode 100644\nindex 000000000000..b6b10efb0018\n--- /dev/null\n+++ b/tests/queries/0_stateless/01161_information_schema.sql\n@@ -0,0 +1,19 @@\n+show tables from information_schema;\n+SHOW TABLES FROM INFORMATION_SCHEMA;\n+\n+create table t (n UInt64, f Float32, s String, fs FixedString(42), d Decimal(9, 6)) engine=Memory;\n+create view v (n Nullable(Int32), f Float64) as select n, f from t;\n+create materialized view mv engine=Null as select * from system.one;\n+create temporary table tmp (d Date, dt DateTime, dtms DateTime64(3));\n+\n+-- FIXME #28687\n+select * from information_schema.schemata where schema_name ilike 'information_schema';\n+-- SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE (TABLE_SCHEMA=currentDatabase() OR TABLE_SCHEMA='') AND TABLE_NAME NOT LIKE '%inner%';\n+SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE (table_schema=currentDatabase() OR table_schema='') AND table_name NOT LIKE '%inner%';\n+select * from information_schema.views where table_schema=currentDatabase();\n+-- SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE (TABLE_SCHEMA=currentDatabase() OR TABLE_SCHEMA='') AND TABLE_NAME NOT LIKE '%inner%';\n+SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE (table_schema=currentDatabase() OR table_schema='') AND table_name NOT LIKE '%inner%';\n+\n+drop table t;\n+drop view v;\n+drop view mv;\ndiff --git a/tests/queries/0_stateless/01602_temporary_table_in_system_tables.reference b/tests/queries/0_stateless/01602_temporary_table_in_system_tables.reference\nindex 5b321d6c87af..4ab84e129fe0 100644\n--- a/tests/queries/0_stateless/01602_temporary_table_in_system_tables.reference\n+++ b/tests/queries/0_stateless/01602_temporary_table_in_system_tables.reference\n@@ -1,8 +1,8 @@\n \ttest_01602a\tCREATE TEMPORARY TABLE test_01602a (`x` UInt32) ENGINE = Memory\tMemory\tMemory\t1\n \ttest_01602b\tCREATE TEMPORARY TABLE test_01602b (`y` Float64, `z` String) ENGINE = Memory\tMemory\tMemory\t1\n-\ttest_01602a\tx\tUInt32\t1\t\t\t0\t0\t0\t\t0\t0\t0\t0\t\n-\ttest_01602b\ty\tFloat64\t1\t\t\t0\t0\t0\t\t0\t0\t0\t0\t\n-\ttest_01602b\tz\tString\t2\t\t\t0\t0\t0\t\t0\t0\t0\t0\t\n+\ttest_01602a\tx\tUInt32\t1\t\t\t0\t0\t0\t\t0\t0\t0\t0\t\t\\N\t32\t2\t0\t\\N\n+\ttest_01602b\ty\tFloat64\t1\t\t\t0\t0\t0\t\t0\t0\t0\t0\t\t\\N\t\\N\t\\N\t\\N\t\\N\n+\ttest_01602b\tz\tString\t2\t\t\t0\t0\t0\t\t0\t0\t0\t0\t\t\\N\t\\N\t\\N\t\\N\t\\N\n CREATE TEMPORARY TABLE test_01602a\\n(\\n    `x` UInt32\\n)\\nENGINE = Memory\n CREATE TEMPORARY TABLE test_01602b\\n(\\n    `y` Float64,\\n    `z` String\\n)\\nENGINE = Memory\n 0\n",
  "problem_statement": "Add INFORMATION_SCHEMA database\nto satisfy (at least some) of SQL92 requirements:\r\n\r\nhttp://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\r\n\r\nWe can easily fill those from system:\r\n21.2.4  SCHEMATA view\r\n21.2.7  TABLES view\r\n21.2.8  VIEWS view\r\n21.2.9  COLUMNS view\r\n\r\nRest - should be reviewed, we can fill (where possible), skip or create empty.\r\n \r\nAnd that should allow to improve SQL 92 compatibility and fix issues like\r\nhttps://github.com/ClickHouse/ClickHouse/issues/9769\r\nhttps://github.com/ClickHouse/ClickHouse/issues/9336 (partially)\r\n\r\nThe problematic part here is the case insensitivity of those. \n",
  "hints_text": "I put this comment to indicate that this feature is nice to have... and easy to implement.",
  "created_at": "2021-09-07T12:36:12Z"
}