{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40631,
  "instance_id": "ClickHouse__ClickHouse-40631",
  "issue_numbers": [
    "40244"
  ],
  "base_commit": "d4a7e1892caba0658d1fa8f9ac1244ed3c1d52ac",
  "patch": "diff --git a/docs/en/operations/settings/constraints-on-settings.md b/docs/en/operations/settings/constraints-on-settings.md\nindex 4bef197b6cb1..651b6465f7e4 100644\n--- a/docs/en/operations/settings/constraints-on-settings.md\n+++ b/docs/en/operations/settings/constraints-on-settings.md\n@@ -26,13 +26,33 @@ The constraints are defined as the following:\n       <setting_name_4>\n         <readonly/>\n       </setting_name_4>\n+      <setting_name_5>\n+        <min>lower_boundary</min>\n+        <max>upper_boundary</max>\n+        <changeable_in_readonly/>\n+      </setting_name_5>\n     </constraints>\n   </user_name>\n </profiles>\n ```\n \n If the user tries to violate the constraints an exception is thrown and the setting isn\u2019t changed.\n-There are supported three types of constraints: `min`, `max`, `readonly`. The `min` and `max` constraints specify upper and lower boundaries for a numeric setting and can be used in combination. The `readonly` constraint specifies that the user cannot change the corresponding setting at all.\n+There are supported few types of constraints: `min`, `max`, `readonly` (with alias `const`) and `changeable_in_readonly`. The `min` and `max` constraints specify upper and lower boundaries for a numeric setting and can be used in combination. The `readonly` or `const` constraint specifies that the user cannot change the corresponding setting at all. The `changeable_in_readonly` constraint type allows user to change the setting within `min`/`max` range even if `readonly` setting is set to 1, otherwise settings are not allow to be changed in `readonly=1` mode. Note that `changeable_in_readonly` is supported only if `settings_constraints_replace_previous` is enabled:\n+``` xml\n+<access_control_improvements>\n+  <settings_constraints_replace_previous>true<settings_constraints_replace_previous>\n+</access_control_improvements>\n+```\n+\n+If there are multiple profiles active for a user, then constraints are merged. Merge process depends on `settings_constraints_replace_previous`:\n+- **true** (recommended): constraints for the same setting are replaced during merge, such that the last constraint is used and all previous are ignored including fields that are not set in new constraint.\n+- **false** (default): constraints for the same setting are merged in a way that every not set type of constraint is taken from previous profile and every set type of constraint is replaced by value from new profile.\n+\n+Read-only mode is enabled by `readonly` setting (not to confuse with `readonly` constraint type):\n+- `readonly=0`: No read-only restrictions.\n+- `readonly=1`: Only read queries are allowed and settings cannot be changes unless `changeable_in_readonly` is set.\n+- `readonly=2`: Only read queries are allowed, but settings can be changed, except for `readonly` setting itself.\n+\n \n **Example:** Let `users.xml` includes lines:\n \ndiff --git a/docs/en/operations/settings/permissions-for-queries.md b/docs/en/operations/settings/permissions-for-queries.md\nindex c183b159423c..3ba62b78cfe3 100644\n--- a/docs/en/operations/settings/permissions-for-queries.md\n+++ b/docs/en/operations/settings/permissions-for-queries.md\n@@ -37,8 +37,7 @@ After setting `readonly = 1`, the user can\u2019t change `readonly` and `allow_ddl`\n \n When using the `GET` method in the [HTTP interface](../../interfaces/http.md), `readonly = 1` is set automatically. To modify data, use the `POST` method.\n \n-Setting `readonly = 1` prohibit the user from changing all the settings. There is a way to prohibit the user\n-from changing only specific settings, for details see [constraints on settings](../../operations/settings/constraints-on-settings.md).\n+Setting `readonly = 1` prohibit the user from changing all the settings. There is a way to prohibit the user from changing only specific settings. Also there is a way to allow changing only specific settings under `readonly = 1` restrictions. For details see [constraints on settings](../../operations/settings/constraints-on-settings.md).\n \n Default value: 0\n \ndiff --git a/docs/en/sql-reference/statements/alter/role.md b/docs/en/sql-reference/statements/alter/role.md\nindex 2bee9fd0dc67..c068d6c4fcee 100644\n--- a/docs/en/sql-reference/statements/alter/role.md\n+++ b/docs/en/sql-reference/statements/alter/role.md\n@@ -13,5 +13,5 @@ Syntax:\n ``` sql\n ALTER ROLE [IF EXISTS] name1 [ON CLUSTER cluster_name1] [RENAME TO new_name1]\n         [, name2 [ON CLUSTER cluster_name2] [RENAME TO new_name2] ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n ```\ndiff --git a/docs/en/sql-reference/statements/alter/settings-profile.md b/docs/en/sql-reference/statements/alter/settings-profile.md\nindex 234bb22ae144..adfe65e3c809 100644\n--- a/docs/en/sql-reference/statements/alter/settings-profile.md\n+++ b/docs/en/sql-reference/statements/alter/settings-profile.md\n@@ -13,5 +13,5 @@ Syntax:\n ``` sql\n ALTER SETTINGS PROFILE [IF EXISTS] TO name1 [ON CLUSTER cluster_name1] [RENAME TO new_name1]\n         [, name2 [ON CLUSTER cluster_name2] [RENAME TO new_name2] ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | INHERIT 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | INHERIT 'profile_name'] [,...]\n ```\ndiff --git a/docs/en/sql-reference/statements/create/role.md b/docs/en/sql-reference/statements/create/role.md\nindex 84b02042fe93..6c80204688bf 100644\n--- a/docs/en/sql-reference/statements/create/role.md\n+++ b/docs/en/sql-reference/statements/create/role.md\n@@ -11,7 +11,7 @@ Syntax:\n \n ``` sql\n CREATE ROLE [IF NOT EXISTS | OR REPLACE] name1 [, name2 ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n ```\n \n ## Managing Roles\ndiff --git a/docs/en/sql-reference/statements/create/settings-profile.md b/docs/en/sql-reference/statements/create/settings-profile.md\nindex 4c7e4c30ea02..8883b22896b6 100644\n--- a/docs/en/sql-reference/statements/create/settings-profile.md\n+++ b/docs/en/sql-reference/statements/create/settings-profile.md\n@@ -12,7 +12,7 @@ Syntax:\n ``` sql\n CREATE SETTINGS PROFILE [IF NOT EXISTS | OR REPLACE] TO name1 [ON CLUSTER cluster_name1]\n         [, name2 [ON CLUSTER cluster_name2] ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | INHERIT 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | INHERIT 'profile_name'] [,...]\n ```\n \n `ON CLUSTER` clause allows creating settings profiles on a cluster, see [Distributed DDL](../../../sql-reference/distributed-ddl.md).\ndiff --git a/docs/ru/sql-reference/statements/alter/role.md b/docs/ru/sql-reference/statements/alter/role.md\nindex a86ff780b8d5..4e84260fd405 100644\n--- a/docs/ru/sql-reference/statements/alter/role.md\n+++ b/docs/ru/sql-reference/statements/alter/role.md\n@@ -13,6 +13,6 @@ sidebar_label: ROLE\n ``` sql\n ALTER ROLE [IF EXISTS] name1 [ON CLUSTER cluster_name1] [RENAME TO new_name1]\n         [, name2 [ON CLUSTER cluster_name2] [RENAME TO new_name2] ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n ```\n \ndiff --git a/docs/ru/sql-reference/statements/alter/settings-profile.md b/docs/ru/sql-reference/statements/alter/settings-profile.md\nindex ec1cd1f72e63..8166f17597c4 100644\n--- a/docs/ru/sql-reference/statements/alter/settings-profile.md\n+++ b/docs/ru/sql-reference/statements/alter/settings-profile.md\n@@ -13,6 +13,6 @@ sidebar_label: SETTINGS PROFILE\n ``` sql\n ALTER SETTINGS PROFILE [IF EXISTS] TO name1 [ON CLUSTER cluster_name1] [RENAME TO new_name1]\n         [, name2 [ON CLUSTER cluster_name2] [RENAME TO new_name2] ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | INHERIT 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | INHERIT 'profile_name'] [,...]\n ```\n \ndiff --git a/docs/ru/sql-reference/statements/create/role.md b/docs/ru/sql-reference/statements/create/role.md\nindex 9e06ad1914ee..4a93de8a74cc 100644\n--- a/docs/ru/sql-reference/statements/create/role.md\n+++ b/docs/ru/sql-reference/statements/create/role.md\n@@ -12,7 +12,7 @@ sidebar_label: \"\u0420\u043e\u043b\u044c\"\n \n ```sql\n CREATE ROLE [IF NOT EXISTS | OR REPLACE] name1 [, name2 ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n ```\n \n ## \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u043e\u043b\u044f\u043c\u0438 {#managing-roles}\ndiff --git a/docs/ru/sql-reference/statements/create/settings-profile.md b/docs/ru/sql-reference/statements/create/settings-profile.md\nindex d85b2aadedae..9aa77e4c2417 100644\n--- a/docs/ru/sql-reference/statements/create/settings-profile.md\n+++ b/docs/ru/sql-reference/statements/create/settings-profile.md\n@@ -13,7 +13,7 @@ sidebar_label: \"\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\"\n ``` sql\n CREATE SETTINGS PROFILE [IF NOT EXISTS | OR REPLACE] TO name1 [ON CLUSTER cluster_name1]\n         [, name2 [ON CLUSTER cluster_name2] ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | INHERIT 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | INHERIT 'profile_name'] [,...]\n ```\n \n \u0421\u0435\u043a\u0446\u0438\u044f `ON CLUSTER` \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438 \u043d\u0430 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0435, \u0441\u043c. [\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 DDL \u0437\u0430\u043f\u0440\u043e\u0441\u044b](../../../sql-reference/distributed-ddl.md).\ndiff --git a/docs/zh/sql-reference/statements/alter.md b/docs/zh/sql-reference/statements/alter.md\nindex 2e143d3b6544..23edfd633db7 100644\n--- a/docs/zh/sql-reference/statements/alter.md\n+++ b/docs/zh/sql-reference/statements/alter.md\n@@ -500,7 +500,7 @@ ALTER USER [IF EXISTS] name [ON CLUSTER cluster_name]\n     [IDENTIFIED [WITH {PLAINTEXT_PASSWORD|SHA256_PASSWORD|DOUBLE_SHA1_PASSWORD}] BY {'password'|'hash'}]\n     [[ADD|DROP] HOST {LOCAL | NAME 'name' | REGEXP 'name_regexp' | IP 'address' | LIKE 'pattern'} [,...] | ANY | NONE]\n     [DEFAULT ROLE role [,...] | ALL | ALL EXCEPT role [,...] ]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n ```\n \n ### \u8bf4\u660e {#alter-user-dscr}\n@@ -540,7 +540,7 @@ ALTER USER user DEFAULT ROLE ALL EXCEPT role1, role2\n ``` sql\n ALTER ROLE [IF EXISTS] name [ON CLUSTER cluster_name]\n     [RENAME TO new_name]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n ```\n \n ## \u4fee\u6539row policy {#alter-row-policy-statement}\n@@ -584,7 +584,7 @@ ALTER QUOTA [IF EXISTS] name [ON CLUSTER cluster_name]\n ``` sql\n ALTER SETTINGS PROFILE [IF EXISTS] name [ON CLUSTER cluster_name]\n     [RENAME TO new_name]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | INHERIT 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | INHERIT 'profile_name'] [,...]\n ```\n \n [Original article](https://clickhouse.com/docs/en/query_language/alter/) <!--hide-->\ndiff --git a/docs/zh/sql-reference/statements/alter/role.md b/docs/zh/sql-reference/statements/alter/role.md\nindex e364571359f4..3647f94e46e8 100644\n--- a/docs/zh/sql-reference/statements/alter/role.md\n+++ b/docs/zh/sql-reference/statements/alter/role.md\n@@ -13,5 +13,5 @@ sidebar_label: \u89d2\u8272\n ``` sql\n ALTER ROLE [IF EXISTS] name1 [ON CLUSTER cluster_name1] [RENAME TO new_name1]\n         [, name2 [ON CLUSTER cluster_name2] [RENAME TO new_name2] ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n ```\ndiff --git a/docs/zh/sql-reference/statements/alter/settings-profile.md b/docs/zh/sql-reference/statements/alter/settings-profile.md\nindex e4365b25c1ad..e21f18f920bb 100644\n--- a/docs/zh/sql-reference/statements/alter/settings-profile.md\n+++ b/docs/zh/sql-reference/statements/alter/settings-profile.md\n@@ -13,5 +13,5 @@ sidebar_label: \u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\n ``` sql\n ALTER SETTINGS PROFILE [IF EXISTS] TO name1 [ON CLUSTER cluster_name1] [RENAME TO new_name1]\n         [, name2 [ON CLUSTER cluster_name2] [RENAME TO new_name2] ...]\n-    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | INHERIT 'profile_name'] [,...]\n+    [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | INHERIT 'profile_name'] [,...]\n ```\ndiff --git a/programs/server/config.xml b/programs/server/config.xml\nindex a1e139d9e76f..448203a72ec5 100644\n--- a/programs/server/config.xml\n+++ b/programs/server/config.xml\n@@ -65,7 +65,7 @@\n         For example, as below:\n         {\"date_time\":\"1650918987.180175\",\"thread_name\":\"#1\",\"thread_id\":\"254545\",\"level\":\"Trace\",\"query_id\":\"\",\"logger_name\":\"BaseDaemon\",\"message\":\"Received signal 2\",\"source_file\":\"../base/daemon/BaseDaemon.cpp; virtual void SignalListener::run()\",\"source_line\":\"192\"}\n         To enable JSON logging support, please uncomment the entire <formatting> tag below.\n-        \n+\n         a) You can modify key names by changing values under tag values inside <names> tag.\n         For example, to change DATE_TIME to MY_DATE_TIME, you can do like:\n             <date_time>MY_DATE_TIME</date_time>\n@@ -661,6 +661,13 @@\n              executed by any user. You can change this behaviour by setting this to true.\n              If it's set to true then this query requires \"GRANT SELECT ON information_schema.<table>\" just like as for ordinary tables. -->\n         <select_from_information_schema_requires_grant>false</select_from_information_schema_requires_grant>\n+\n+        <!-- By default, for backward compatibility a settings profile constraint for a specific setting inherit every not set field from\n+             previous profile. You can change this behaviour by setting this to true.\n+             If it's set to true then if settings profile has a constraint for a specific setting, then this constraint completely cancels all\n+             actions of previous constraint (defined in other profiles) for the same specific setting, including fields that are not set by new constraint.\n+             It also enables 'changeable_in_readonly' constraint type -->\n+        <settings_constraints_replace_previous>false</settings_constraints_replace_previous>\n     </access_control_improvements>\n \n     <!-- Default profile of settings. -->\ndiff --git a/src/Access/AccessControl.cpp b/src/Access/AccessControl.cpp\nindex 89292fe92728..8c5047a37390 100644\n--- a/src/Access/AccessControl.cpp\n+++ b/src/Access/AccessControl.cpp\n@@ -171,6 +171,7 @@ void AccessControl::setUpFromMainConfig(const Poco::Util::AbstractConfiguration\n     setOnClusterQueriesRequireClusterGrant(config_.getBool(\"access_control_improvements.on_cluster_queries_require_cluster_grant\", false));\n     setSelectFromSystemDatabaseRequiresGrant(config_.getBool(\"access_control_improvements.select_from_system_db_requires_grant\", false));\n     setSelectFromInformationSchemaRequiresGrant(config_.getBool(\"access_control_improvements.select_from_information_schema_requires_grant\", false));\n+    setSettingsConstraintsReplacePrevious(config_.getBool(\"access_control_improvements.settings_constraints_replace_previous\", false));\n \n     addStoragesFromMainConfig(config_, config_path_, get_zookeeper_function_);\n }\ndiff --git a/src/Access/AccessControl.h b/src/Access/AccessControl.h\nindex ab9cdba9ad1a..e8a787ada0bb 100644\n--- a/src/Access/AccessControl.h\n+++ b/src/Access/AccessControl.h\n@@ -158,6 +158,9 @@ class AccessControl : public MultipleAccessStorage\n     void setSelectFromInformationSchemaRequiresGrant(bool enable) { select_from_information_schema_requires_grant = enable; }\n     bool doesSelectFromInformationSchemaRequireGrant() const { return select_from_information_schema_requires_grant; }\n \n+    void setSettingsConstraintsReplacePrevious(bool enable) { settings_constraints_replace_previous = enable; }\n+    bool doesSettingsConstraintsReplacePrevious() const { return settings_constraints_replace_previous; }\n+\n     std::shared_ptr<const ContextAccess> getContextAccess(\n         const UUID & user_id,\n         const std::vector<UUID> & current_roles,\n@@ -223,6 +226,7 @@ class AccessControl : public MultipleAccessStorage\n     std::atomic_bool on_cluster_queries_require_cluster_grant = false;\n     std::atomic_bool select_from_system_db_requires_grant = false;\n     std::atomic_bool select_from_information_schema_requires_grant = false;\n+    std::atomic_bool settings_constraints_replace_previous = false;\n };\n \n }\ndiff --git a/src/Access/SettingsConstraints.cpp b/src/Access/SettingsConstraints.cpp\nindex 34f2e10dc834..d97a78c78abe 100644\n--- a/src/Access/SettingsConstraints.cpp\n+++ b/src/Access/SettingsConstraints.cpp\n@@ -35,88 +35,43 @@ void SettingsConstraints::clear()\n     constraints.clear();\n }\n \n-\n-void SettingsConstraints::setMinValue(std::string_view setting_name, const Field & min_value)\n-{\n-    getConstraintRef(setting_name).min_value = Settings::castValueUtil(setting_name, min_value);\n-}\n-\n-Field SettingsConstraints::getMinValue(std::string_view setting_name) const\n-{\n-    const auto * ptr = tryGetConstraint(setting_name);\n-    if (ptr)\n-        return ptr->min_value;\n-    else\n-        return {};\n-}\n-\n-\n-void SettingsConstraints::setMaxValue(std::string_view setting_name, const Field & max_value)\n+void SettingsConstraints::set(const String & setting_name, const Field & min_value, const Field & max_value, SettingConstraintWritability writability)\n {\n-    getConstraintRef(setting_name).max_value = Settings::castValueUtil(setting_name, max_value);\n+    auto & constraint = constraints[setting_name];\n+    if (!min_value.isNull())\n+        constraint.min_value = Settings::castValueUtil(setting_name, min_value);\n+    if (!max_value.isNull())\n+        constraint.max_value = Settings::castValueUtil(setting_name, max_value);\n+    constraint.writability = writability;\n }\n \n-Field SettingsConstraints::getMaxValue(std::string_view setting_name) const\n-{\n-    const auto * ptr = tryGetConstraint(setting_name);\n-    if (ptr)\n-        return ptr->max_value;\n-    else\n-        return {};\n-}\n-\n-\n-void SettingsConstraints::setReadOnly(std::string_view setting_name, bool read_only)\n+void SettingsConstraints::get(const Settings & current_settings, std::string_view setting_name, Field & min_value, Field & max_value, SettingConstraintWritability & writability) const\n {\n-    getConstraintRef(setting_name).read_only = read_only;\n+    auto checker = getChecker(current_settings, setting_name);\n+    min_value = checker.constraint.min_value;\n+    max_value = checker.constraint.max_value;\n+    writability = checker.constraint.writability;\n }\n \n-bool SettingsConstraints::isReadOnly(std::string_view setting_name) const\n-{\n-    const auto * ptr = tryGetConstraint(setting_name);\n-    if (ptr)\n-        return ptr->read_only;\n-    else\n-        return false;\n-}\n-\n-\n-void SettingsConstraints::set(std::string_view setting_name, const Field & min_value, const Field & max_value, bool read_only)\n-{\n-    auto & ref = getConstraintRef(setting_name);\n-    ref.min_value = Settings::castValueUtil(setting_name, min_value);\n-    ref.max_value = Settings::castValueUtil(setting_name, max_value);\n-    ref.read_only = read_only;\n-}\n-\n-void SettingsConstraints::get(std::string_view setting_name, Field & min_value, Field & max_value, bool & read_only) const\n+void SettingsConstraints::merge(const SettingsConstraints & other)\n {\n-    const auto * ptr = tryGetConstraint(setting_name);\n-    if (ptr)\n+    if (access_control->doesSettingsConstraintsReplacePrevious())\n     {\n-        min_value = ptr->min_value;\n-        max_value = ptr->max_value;\n-        read_only = ptr->read_only;\n+        for (const auto & [other_name, other_constraint] : other.constraints)\n+            constraints[other_name] = other_constraint;\n     }\n     else\n     {\n-        min_value = Field{};\n-        max_value = Field{};\n-        read_only = false;\n-    }\n-}\n-\n-void SettingsConstraints::merge(const SettingsConstraints & other)\n-{\n-    for (const auto & [other_name, other_constraint] : other.constraints)\n-    {\n-        auto & constraint = getConstraintRef(other_name);\n-        if (!other_constraint.min_value.isNull())\n-            constraint.min_value = other_constraint.min_value;\n-        if (!other_constraint.max_value.isNull())\n-            constraint.max_value = other_constraint.max_value;\n-        if (other_constraint.read_only)\n-            constraint.read_only = true;\n+        for (const auto & [other_name, other_constraint] : other.constraints)\n+        {\n+            auto & constraint = constraints[other_name];\n+            if (!other_constraint.min_value.isNull())\n+                constraint.min_value = other_constraint.min_value;\n+            if (!other_constraint.max_value.isNull())\n+                constraint.max_value = other_constraint.max_value;\n+            if (other_constraint.writability == SettingConstraintWritability::CONST)\n+                constraint.writability = SettingConstraintWritability::CONST; // NOTE: In this mode <readonly/> flag cannot be overridden to be false\n+        }\n     }\n }\n \n@@ -180,26 +135,6 @@ bool SettingsConstraints::checkImpl(const Settings & current_settings, SettingCh\n         }\n     };\n \n-    bool cannot_compare = false;\n-    auto less = [&](const Field & left, const Field & right)\n-    {\n-        cannot_compare = false;\n-        if (reaction == THROW_ON_VIOLATION)\n-            return applyVisitor(FieldVisitorAccurateLess{}, left, right);\n-        else\n-        {\n-            try\n-            {\n-                return applyVisitor(FieldVisitorAccurateLess{}, left, right);\n-            }\n-            catch (...)\n-            {\n-                cannot_compare = true;\n-                return false;\n-            }\n-        }\n-    };\n-\n     if (reaction == THROW_ON_VIOLATION)\n     {\n         try\n@@ -239,115 +174,119 @@ bool SettingsConstraints::checkImpl(const Settings & current_settings, SettingCh\n             return false;\n     }\n \n-    if (!current_settings.allow_ddl && setting_name == \"allow_ddl\")\n+    return getChecker(current_settings, setting_name).check(change, new_value, reaction);\n+}\n+\n+bool SettingsConstraints::Checker::check(SettingChange & change, const Field & new_value, ReactionOnViolation reaction) const\n+{\n+    const String & setting_name = change.name;\n+\n+    auto less_or_cannot_compare = [=](const Field & left, const Field & right)\n     {\n         if (reaction == THROW_ON_VIOLATION)\n-            throw Exception(\"Cannot modify 'allow_ddl' setting when DDL queries are prohibited for the user\", ErrorCodes::QUERY_IS_PROHIBITED);\n+            return applyVisitor(FieldVisitorAccurateLess{}, left, right);\n+        else\n+        {\n+            try\n+            {\n+                return applyVisitor(FieldVisitorAccurateLess{}, left, right);\n+            }\n+            catch (...)\n+            {\n+                return true;\n+            }\n+        }\n+    };\n+\n+    if (!explain.empty())\n+    {\n+        if (reaction == THROW_ON_VIOLATION)\n+            throw Exception(explain, code);\n         else\n             return false;\n     }\n \n-    /** The `readonly` value is understood as follows:\n-      * 0 - everything allowed.\n-      * 1 - only read queries can be made; you can not change the settings.\n-      * 2 - You can only do read queries and you can change the settings, except for the `readonly` setting.\n-      */\n-    if (current_settings.readonly == 1)\n+    if (constraint.writability == SettingConstraintWritability::CONST)\n     {\n         if (reaction == THROW_ON_VIOLATION)\n-            throw Exception(\"Cannot modify '\" + setting_name + \"' setting in readonly mode\", ErrorCodes::READONLY);\n+            throw Exception(\"Setting \" + setting_name + \" should not be changed\", ErrorCodes::SETTING_CONSTRAINT_VIOLATION);\n         else\n             return false;\n     }\n \n-    if (current_settings.readonly > 1 && setting_name == \"readonly\")\n+    const auto & min_value = constraint.min_value;\n+    const auto & max_value = constraint.max_value;\n+\n+    if (!min_value.isNull() && !max_value.isNull() && less_or_cannot_compare(max_value, min_value))\n     {\n         if (reaction == THROW_ON_VIOLATION)\n-            throw Exception(\"Cannot modify 'readonly' setting in readonly mode\", ErrorCodes::READONLY);\n+            throw Exception(\"Setting \" + setting_name + \" should not be changed\", ErrorCodes::SETTING_CONSTRAINT_VIOLATION);\n         else\n             return false;\n     }\n \n-    const Constraint * constraint = tryGetConstraint(setting_name);\n-    if (constraint)\n+    if (!min_value.isNull() && less_or_cannot_compare(new_value, min_value))\n     {\n-        if (constraint->read_only)\n-        {\n-            if (reaction == THROW_ON_VIOLATION)\n-                throw Exception(\"Setting \" + setting_name + \" should not be changed\", ErrorCodes::SETTING_CONSTRAINT_VIOLATION);\n-            else\n-                return false;\n-        }\n-\n-        const Field & min_value = constraint->min_value;\n-        const Field & max_value = constraint->max_value;\n-        if (!min_value.isNull() && !max_value.isNull() && (less(max_value, min_value) || cannot_compare))\n-        {\n-            if (reaction == THROW_ON_VIOLATION)\n-                throw Exception(\"Setting \" + setting_name + \" should not be changed\", ErrorCodes::SETTING_CONSTRAINT_VIOLATION);\n-            else\n-                return false;\n-        }\n-\n-        if (!min_value.isNull() && (less(new_value, min_value) || cannot_compare))\n+        if (reaction == THROW_ON_VIOLATION)\n         {\n-            if (reaction == THROW_ON_VIOLATION)\n-            {\n-                throw Exception(\n-                    \"Setting \" + setting_name + \" shouldn't be less than \" + applyVisitor(FieldVisitorToString(), constraint->min_value),\n-                    ErrorCodes::SETTING_CONSTRAINT_VIOLATION);\n-            }\n-            else\n-                change.value = min_value;\n+            throw Exception(\n+                \"Setting \" + setting_name + \" shouldn't be less than \" + applyVisitor(FieldVisitorToString(), min_value),\n+                ErrorCodes::SETTING_CONSTRAINT_VIOLATION);\n         }\n+        else\n+            change.value = min_value;\n+    }\n \n-        if (!max_value.isNull() && (less(max_value, new_value) || cannot_compare))\n+    if (!max_value.isNull() && less_or_cannot_compare(max_value, new_value))\n+    {\n+        if (reaction == THROW_ON_VIOLATION)\n         {\n-            if (reaction == THROW_ON_VIOLATION)\n-            {\n-                throw Exception(\n-                    \"Setting \" + setting_name + \" shouldn't be greater than \" + applyVisitor(FieldVisitorToString(), constraint->max_value),\n-                    ErrorCodes::SETTING_CONSTRAINT_VIOLATION);\n-            }\n-            else\n-                change.value = max_value;\n+            throw Exception(\n+                \"Setting \" + setting_name + \" shouldn't be greater than \" + applyVisitor(FieldVisitorToString(), max_value),\n+                ErrorCodes::SETTING_CONSTRAINT_VIOLATION);\n         }\n+        else\n+            change.value = max_value;\n     }\n \n     return true;\n }\n \n-\n-SettingsConstraints::Constraint & SettingsConstraints::getConstraintRef(std::string_view setting_name)\n+SettingsConstraints::Checker SettingsConstraints::getChecker(const Settings & current_settings, std::string_view setting_name) const\n {\n+    if (!current_settings.allow_ddl && setting_name == \"allow_ddl\")\n+        return Checker(\"Cannot modify 'allow_ddl' setting when DDL queries are prohibited for the user\", ErrorCodes::QUERY_IS_PROHIBITED);\n+\n+    /** The `readonly` value is understood as follows:\n+      * 0 - no read-only restrictions.\n+      * 1 - only read requests, as well as changing settings with `changable_in_readonly` flag.\n+      * 2 - only read requests, as well as changing settings, except for the `readonly` setting.\n+      */\n+\n+    if (current_settings.readonly > 1 && setting_name == \"readonly\")\n+        return Checker(\"Cannot modify 'readonly' setting in readonly mode\", ErrorCodes::READONLY);\n+\n     auto it = constraints.find(setting_name);\n-    if (it == constraints.end())\n+    if (current_settings.readonly == 1)\n     {\n-        auto setting_name_ptr = std::make_shared<const String>(setting_name);\n-        Constraint new_constraint;\n-        new_constraint.setting_name = setting_name_ptr;\n-        it = constraints.emplace(*setting_name_ptr, std::move(new_constraint)).first;\n+        if (it == constraints.end() || it->second.writability != SettingConstraintWritability::CHANGEABLE_IN_READONLY)\n+            return Checker(\"Cannot modify '\" + String(setting_name) + \"' setting in readonly mode\", ErrorCodes::READONLY);\n     }\n-    return it->second;\n-}\n-\n-const SettingsConstraints::Constraint * SettingsConstraints::tryGetConstraint(std::string_view setting_name) const\n-{\n-    auto it = constraints.find(setting_name);\n-    if (it == constraints.end())\n-        return nullptr;\n-    return &it->second;\n+    else // For both readonly=0 and readonly=2\n+    {\n+        if (it == constraints.end())\n+            return Checker(); // Allowed\n+    }\n+    return Checker(it->second);\n }\n \n-\n bool SettingsConstraints::Constraint::operator==(const Constraint & other) const\n {\n-    return (read_only == other.read_only) && (min_value == other.min_value) && (max_value == other.max_value)\n-        && (*setting_name == *other.setting_name);\n+    return writability == other.writability && min_value == other.min_value && max_value == other.max_value;\n }\n \n bool operator ==(const SettingsConstraints & left, const SettingsConstraints & right)\n {\n-    return (left.constraints == right.constraints);\n+    return left.constraints == right.constraints;\n }\n }\ndiff --git a/src/Access/SettingsConstraints.h b/src/Access/SettingsConstraints.h\nindex 645a690e0515..822bf42861ba 100644\n--- a/src/Access/SettingsConstraints.h\n+++ b/src/Access/SettingsConstraints.h\n@@ -1,9 +1,9 @@\n #pragma once\n \n+#include <Access/SettingsProfileElement.h>\n #include <Common/SettingsChanges.h>\n #include <unordered_map>\n \n-\n namespace Poco::Util\n {\n     class AbstractConfiguration;\n@@ -35,18 +35,22 @@ class AccessControl;\n   *               <max>20000000000</max>\n   *           </max_memory_usage>\n   *           <force_index_by_date>\n-  *               <readonly/>\n+  *               <const/>\n   *           </force_index_by_date>\n+  *           <max_threads>\n+  *               <changable_in_readonly/>\n+  *           </max_threads>\n   *       </constraints>\n   *   </user_profile>\n   * </profiles>\n   *\n   * This class also checks that we are not in the read-only mode.\n   * If a setting cannot be change due to the read-only mode this class throws an exception.\n-  * The value of `readonly` value is understood as follows:\n-  * 0 - everything allowed.\n-  * 1 - only read queries can be made; you can not change the settings.\n-  * 2 - you can only do read queries and you can change the settings, except for the `readonly` setting.\n+  * The value of `readonly` is understood as follows:\n+  * 0 - not read-only mode, no additional checks.\n+  * 1 - only read queries, as well as changing settings with <changable_in_readonly/> flag.\n+  * 2 - only read queries and you can change the settings, except for the `readonly` setting.\n+  *\n   */\n class SettingsConstraints\n {\n@@ -61,17 +65,8 @@ class SettingsConstraints\n     void clear();\n     bool empty() const { return constraints.empty(); }\n \n-    void setMinValue(std::string_view setting_name, const Field & min_value);\n-    Field getMinValue(std::string_view setting_name) const;\n-\n-    void setMaxValue(std::string_view setting_name, const Field & max_value);\n-    Field getMaxValue(std::string_view setting_name) const;\n-\n-    void setReadOnly(std::string_view setting_name, bool read_only);\n-    bool isReadOnly(std::string_view setting_name) const;\n-\n-    void set(std::string_view setting_name, const Field & min_value, const Field & max_value, bool read_only);\n-    void get(std::string_view setting_name, Field & min_value, Field & max_value, bool & read_only) const;\n+    void set(const String & setting_name, const Field & min_value, const Field & max_value, SettingConstraintWritability writability);\n+    void get(const Settings & current_settings, std::string_view setting_name, Field & min_value, Field & max_value, SettingConstraintWritability & writability) const;\n \n     void merge(const SettingsConstraints & other);\n \n@@ -87,10 +82,15 @@ class SettingsConstraints\n     friend bool operator !=(const SettingsConstraints & left, const SettingsConstraints & right) { return !(left == right); }\n \n private:\n+    enum ReactionOnViolation\n+    {\n+        THROW_ON_VIOLATION,\n+        CLAMP_ON_VIOLATION,\n+    };\n+\n     struct Constraint\n     {\n-        std::shared_ptr<const String> setting_name;\n-        bool read_only = false;\n+        SettingConstraintWritability writability = SettingConstraintWritability::WRITABLE;\n         Field min_value;\n         Field max_value;\n \n@@ -98,18 +98,53 @@ class SettingsConstraints\n         bool operator !=(const Constraint & other) const { return !(*this == other); }\n     };\n \n-    enum ReactionOnViolation\n+    struct Checker\n     {\n-        THROW_ON_VIOLATION,\n-        CLAMP_ON_VIOLATION,\n+        Constraint constraint;\n+        String explain;\n+        int code = 0;\n+\n+        // Allows everything\n+        Checker() = default;\n+\n+        // Forbidden with explanation\n+        Checker(const String & explain_, int code_)\n+            : constraint{.writability = SettingConstraintWritability::CONST}\n+            , explain(explain_)\n+            , code(code_)\n+        {}\n+\n+        // Allow or forbid depending on range defined by constraint, also used to return stored constraint\n+        explicit Checker(const Constraint & constraint_)\n+            : constraint(constraint_)\n+        {}\n+\n+        // Perform checking\n+        bool check(SettingChange & change, const Field & new_value, ReactionOnViolation reaction) const;\n     };\n+\n+    struct StringHash\n+    {\n+        using is_transparent = void;\n+        size_t operator()(std::string_view txt) const\n+        {\n+            return std::hash<std::string_view>{}(txt);\n+        }\n+        size_t operator()(const String & txt) const\n+        {\n+            return std::hash<String>{}(txt);\n+        }\n+    };\n+\n     bool checkImpl(const Settings & current_settings, SettingChange & change, ReactionOnViolation reaction) const;\n \n-    Constraint & getConstraintRef(std::string_view setting_name);\n-    const Constraint * tryGetConstraint(std::string_view setting_name) const;\n+    Checker getChecker(const Settings & current_settings, std::string_view setting_name) const;\n+\n+    // Special container for heterogeneous lookups: to avoid `String` construction during `find(std::string_view)`\n+    using Constraints = std::unordered_map<String, Constraint, StringHash, std::equal_to<>>;\n+    Constraints constraints;\n \n-    std::unordered_map<std::string_view, Constraint> constraints;\n-    const AccessControl * access_control = nullptr;\n+    const AccessControl * access_control;\n };\n \n }\ndiff --git a/src/Access/SettingsProfileElement.cpp b/src/Access/SettingsProfileElement.cpp\nindex 465f26f37d9c..474ffec0d213 100644\n--- a/src/Access/SettingsProfileElement.cpp\n+++ b/src/Access/SettingsProfileElement.cpp\n@@ -3,6 +3,7 @@\n #include <Access/AccessControl.h>\n #include <Access/SettingsProfile.h>\n #include <Core/Settings.h>\n+#include <Common/SettingConstraintWritability.h>\n #include <Common/SettingsChanges.h>\n #include <IO/ReadHelpers.h>\n #include <IO/WriteHelpers.h>\n@@ -18,6 +19,10 @@ namespace\n     constexpr const char ALLOW_BACKUP_SETTING_NAME[] = \"allow_backup\";\n }\n \n+namespace ErrorCodes\n+{\n+    extern const int NOT_IMPLEMENTED;\n+}\n \n SettingsProfileElement::SettingsProfileElement(const ASTSettingsProfileElement & ast)\n {\n@@ -46,17 +51,20 @@ void SettingsProfileElement::init(const ASTSettingsProfileElement & ast, const A\n     {\n         setting_name = ast.setting_name;\n \n-        /// Optionally check if a setting with that name is allowed.\n         if (access_control)\n         {\n+            /// Check if a setting with that name is allowed.\n             if (setting_name != ALLOW_BACKUP_SETTING_NAME)\n                 access_control->checkSettingNameIsAllowed(setting_name);\n+            /// Check if a CHANGEABLE_IN_READONLY is allowed.\n+            if (ast.writability == SettingConstraintWritability::CHANGEABLE_IN_READONLY && !access_control->doesSettingsConstraintsReplacePrevious())\n+                throw Exception(\"CHANGEABLE_IN_READONLY for \" + setting_name + \" is not allowed unless settings_constraints_replace_previous is enabled\", ErrorCodes::NOT_IMPLEMENTED);\n         }\n \n         value = ast.value;\n         min_value = ast.min_value;\n         max_value = ast.max_value;\n-        readonly = ast.readonly;\n+        writability = ast.writability;\n \n         if (!value.isNull())\n             value = Settings::castValueUtil(setting_name, value);\n@@ -80,7 +88,7 @@ std::shared_ptr<ASTSettingsProfileElement> SettingsProfileElement::toAST() const\n     ast->value = value;\n     ast->min_value = min_value;\n     ast->max_value = max_value;\n-    ast->readonly = readonly;\n+    ast->writability = writability;\n \n     return ast;\n }\n@@ -101,7 +109,7 @@ std::shared_ptr<ASTSettingsProfileElement> SettingsProfileElement::toASTWithName\n     ast->value = value;\n     ast->min_value = min_value;\n     ast->max_value = max_value;\n-    ast->readonly = readonly;\n+    ast->writability = writability;\n \n     return ast;\n }\n@@ -205,17 +213,12 @@ SettingsConstraints SettingsProfileElements::toSettingsConstraints(const AccessC\n {\n     SettingsConstraints res{access_control};\n     for (const auto & elem : *this)\n-    {\n-        if (!elem.setting_name.empty() && (elem.setting_name != ALLOW_BACKUP_SETTING_NAME))\n-        {\n-            if (!elem.min_value.isNull())\n-                res.setMinValue(elem.setting_name, elem.min_value);\n-            if (!elem.max_value.isNull())\n-                res.setMaxValue(elem.setting_name, elem.max_value);\n-            if (elem.readonly)\n-                res.setReadOnly(elem.setting_name, *elem.readonly);\n-        }\n-    }\n+        if (!elem.setting_name.empty() && elem.setting_name != ALLOW_BACKUP_SETTING_NAME)\n+            res.set(\n+                elem.setting_name,\n+                elem.min_value,\n+                elem.max_value,\n+                elem.writability ? *elem.writability : SettingConstraintWritability::WRITABLE);\n     return res;\n }\n \ndiff --git a/src/Access/SettingsProfileElement.h b/src/Access/SettingsProfileElement.h\nindex a4124826b40e..c02e9947d611 100644\n--- a/src/Access/SettingsProfileElement.h\n+++ b/src/Access/SettingsProfileElement.h\n@@ -2,6 +2,7 @@\n \n #include <Core/Field.h>\n #include <Core/UUID.h>\n+#include <Common/SettingConstraintWritability.h>\n #include <optional>\n #include <unordered_map>\n #include <vector>\n@@ -25,9 +26,9 @@ struct SettingsProfileElement\n     Field value;\n     Field min_value;\n     Field max_value;\n-    std::optional<bool> readonly;\n+    std::optional<SettingConstraintWritability> writability;\n \n-    auto toTuple() const { return std::tie(parent_profile, setting_name, value, min_value, max_value, readonly); }\n+    auto toTuple() const { return std::tie(parent_profile, setting_name, value, min_value, max_value, writability); }\n     friend bool operator==(const SettingsProfileElement & lhs, const SettingsProfileElement & rhs) { return lhs.toTuple() == rhs.toTuple(); }\n     friend bool operator!=(const SettingsProfileElement & lhs, const SettingsProfileElement & rhs) { return !(lhs == rhs); }\n     friend bool operator <(const SettingsProfileElement & lhs, const SettingsProfileElement & rhs) { return lhs.toTuple() < rhs.toTuple(); }\ndiff --git a/src/Access/UsersConfigAccessStorage.cpp b/src/Access/UsersConfigAccessStorage.cpp\nindex 1d755fdf1dad..d5d3b68e6f11 100644\n--- a/src/Access/UsersConfigAccessStorage.cpp\n+++ b/src/Access/UsersConfigAccessStorage.cpp\n@@ -441,17 +441,32 @@ namespace\n             String path_to_name = path_to_constraints + \".\" + setting_name;\n             config.keys(path_to_name, constraint_types);\n \n+            size_t writability_count = 0;\n             for (const String & constraint_type : constraint_types)\n             {\n                 if (constraint_type == \"min\")\n                     profile_element.min_value = Settings::stringToValueUtil(setting_name, config.getString(path_to_name + \".\" + constraint_type));\n                 else if (constraint_type == \"max\")\n                     profile_element.max_value = Settings::stringToValueUtil(setting_name, config.getString(path_to_name + \".\" + constraint_type));\n-                else if (constraint_type == \"readonly\")\n-                    profile_element.readonly = true;\n+                else if (constraint_type == \"readonly\" || constraint_type == \"const\")\n+                {\n+                    writability_count++;\n+                    profile_element.writability = SettingConstraintWritability::CONST;\n+                }\n+                else if (constraint_type == \"changeable_in_readonly\")\n+                {\n+                    writability_count++;\n+                    if (access_control.doesSettingsConstraintsReplacePrevious())\n+                        profile_element.writability = SettingConstraintWritability::CHANGEABLE_IN_READONLY;\n+                    else\n+                        throw Exception(\"Setting changeable_in_readonly for \" + setting_name + \" is not allowed unless settings_constraints_replace_previous is enabled\", ErrorCodes::NOT_IMPLEMENTED);\n+                }\n                 else\n                     throw Exception(\"Setting \" + constraint_type + \" value for \" + setting_name + \" isn't supported\", ErrorCodes::NOT_IMPLEMENTED);\n             }\n+            if (writability_count > 1)\n+                throw Exception(\"Not more than one constraint writability specifier (const/readonly/changeable_in_readonly) is allowed for \" + setting_name, ErrorCodes::NOT_IMPLEMENTED);\n+\n             profile_elements.push_back(std::move(profile_element));\n         }\n \ndiff --git a/src/Common/SettingConstraintWritability.h b/src/Common/SettingConstraintWritability.h\nnew file mode 100644\nindex 000000000000..4a179dad2868\n--- /dev/null\n+++ b/src/Common/SettingConstraintWritability.h\n@@ -0,0 +1,23 @@\n+#pragma once\n+\n+\n+namespace DB\n+{\n+\n+enum class SettingConstraintWritability\n+{\n+    // Default. Setting can be change within specified range only in `readonly=0` or `readonly=2` mode.\n+    WRITABLE,\n+\n+    // Setting cannot be changed at all.\n+    // Either READONLY or CONST keyword in SQL syntax can be used (<readonly/> or <const/> in config.xml) to enable this.\n+    // NOTE: name `CONST` is chosen to avoid confusion with `readonly` setting.\n+    CONST,\n+\n+    // Setting can be changed within specified range, regardless of `readonly` setting value.\n+    CHANGEABLE_IN_READONLY,\n+\n+    MAX\n+};\n+\n+}\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 870647b32542..571c68b83bfa 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -352,7 +352,7 @@ static constexpr UInt64 operator\"\"_GiB(unsigned long long value)\n     M(UInt64, max_ast_elements, 50000, \"Maximum size of query syntax tree in number of nodes. Checked after parsing.\", 0) \\\n     M(UInt64, max_expanded_ast_elements, 500000, \"Maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk.\", 0) \\\n     \\\n-    M(UInt64, readonly, 0, \"0 - everything is allowed. 1 - only read requests. 2 - only read requests, as well as changing settings, except for the 'readonly' setting.\", 0) \\\n+    M(UInt64, readonly, 0, \"0 - no read-only restrictions. 1 - only read requests, as well as changing explicitly allowed settings. 2 - only read requests, as well as changing settings, except for the 'readonly' setting.\", 0) \\\n     \\\n     M(UInt64, max_rows_in_set, 0, \"Maximum size of the set (in number of elements) resulting from the execution of the IN section.\", 0) \\\n     M(UInt64, max_bytes_in_set, 0, \"Maximum size of the set (in bytes in memory) resulting from the execution of the IN section.\", 0) \\\ndiff --git a/src/Parsers/Access/ASTCreateRoleQuery.h b/src/Parsers/Access/ASTCreateRoleQuery.h\nindex 0e0773c8972d..906ea683e1a0 100644\n--- a/src/Parsers/Access/ASTCreateRoleQuery.h\n+++ b/src/Parsers/Access/ASTCreateRoleQuery.h\n@@ -10,11 +10,11 @@ class ASTSettingsProfileElements;\n \n \n /** CREATE ROLE [IF NOT EXISTS | OR REPLACE] name\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   *\n   * ALTER ROLE [IF EXISTS] name\n   *     [RENAME TO new_name]\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   */\n class ASTCreateRoleQuery : public IAST, public ASTQueryWithOnCluster\n {\ndiff --git a/src/Parsers/Access/ASTCreateSettingsProfileQuery.h b/src/Parsers/Access/ASTCreateSettingsProfileQuery.h\nindex 64546bc7230f..441ec0f52333 100644\n--- a/src/Parsers/Access/ASTCreateSettingsProfileQuery.h\n+++ b/src/Parsers/Access/ASTCreateSettingsProfileQuery.h\n@@ -11,12 +11,12 @@ class ASTRolesOrUsersSet;\n \n \n /** CREATE SETTINGS PROFILE [IF NOT EXISTS | OR REPLACE] name\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   *     [TO {role [,...] | ALL | ALL EXCEPT role [,...]}]\n   *\n   * ALTER SETTINGS PROFILE [IF EXISTS] name\n   *     [RENAME TO new_name]\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   *     [TO {role [,...] | ALL | ALL EXCEPT role [,...]}]\n   */\n class ASTCreateSettingsProfileQuery : public IAST, public ASTQueryWithOnCluster\ndiff --git a/src/Parsers/Access/ASTCreateUserQuery.h b/src/Parsers/Access/ASTCreateUserQuery.h\nindex c61f2cdd9fd3..b8eb70e20414 100644\n--- a/src/Parsers/Access/ASTCreateUserQuery.h\n+++ b/src/Parsers/Access/ASTCreateUserQuery.h\n@@ -19,7 +19,7 @@ class ASTSettingsProfileElements;\n   *     [HOST {LOCAL | NAME 'name' | REGEXP 'name_regexp' | IP 'address' | LIKE 'pattern'} [,...] | ANY | NONE]\n   *     [DEFAULT ROLE role [,...]]\n   *     [DEFAULT DATABASE database | NONE]\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   *     [GRANTEES {user | role | ANY | NONE} [,...] [EXCEPT {user | role} [,...]]]\n   *\n   * ALTER USER [IF EXISTS] name\n@@ -28,7 +28,7 @@ class ASTSettingsProfileElements;\n   *     [[ADD|DROP] HOST {LOCAL | NAME 'name' | REGEXP 'name_regexp' | IP 'address' | LIKE 'pattern'} [,...] | ANY | NONE]\n   *     [DEFAULT ROLE role [,...] | ALL | ALL EXCEPT role [,...] ]\n   *     [DEFAULT DATABASE database | NONE]\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   *     [GRANTEES {user | role | ANY | NONE} [,...] [EXCEPT {user | role} [,...]]]\n   */\n class ASTCreateUserQuery : public IAST, public ASTQueryWithOnCluster\ndiff --git a/src/Parsers/Access/ASTSettingsProfileElement.cpp b/src/Parsers/Access/ASTSettingsProfileElement.cpp\nindex 23dba8a926f2..76973c428b21 100644\n--- a/src/Parsers/Access/ASTSettingsProfileElement.cpp\n+++ b/src/Parsers/Access/ASTSettingsProfileElement.cpp\n@@ -52,10 +52,24 @@ void ASTSettingsProfileElement::formatImpl(const FormatSettings & settings, Form\n                       << applyVisitor(FieldVisitorToString{}, max_value);\n     }\n \n-    if (readonly)\n+    if (writability)\n     {\n-        settings.ostr << (settings.hilite ? IAST::hilite_keyword : \"\") << (*readonly ? \" READONLY\" : \" WRITABLE\")\n-                      << (settings.hilite ? IAST::hilite_none : \"\");\n+        switch (*writability)\n+        {\n+            case SettingConstraintWritability::WRITABLE:\n+                settings.ostr << (settings.hilite ? IAST::hilite_keyword : \"\") << \" WRITABLE\"\n+                            << (settings.hilite ? IAST::hilite_none : \"\");\n+                break;\n+            case SettingConstraintWritability::CONST:\n+                settings.ostr << (settings.hilite ? IAST::hilite_keyword : \"\") << \" CONST\"\n+                            << (settings.hilite ? IAST::hilite_none : \"\");\n+                break;\n+            case SettingConstraintWritability::CHANGEABLE_IN_READONLY:\n+                settings.ostr << (settings.hilite ? IAST::hilite_keyword : \"\") << \" CHANGEABLE_IN_READONLY\"\n+                            << (settings.hilite ? IAST::hilite_none : \"\");\n+                break;\n+            case SettingConstraintWritability::MAX: break;\n+        }\n     }\n }\n \ndiff --git a/src/Parsers/Access/ASTSettingsProfileElement.h b/src/Parsers/Access/ASTSettingsProfileElement.h\nindex 6a54bca3213b..275257e4f8e6 100644\n--- a/src/Parsers/Access/ASTSettingsProfileElement.h\n+++ b/src/Parsers/Access/ASTSettingsProfileElement.h\n@@ -2,12 +2,12 @@\n \n #include <Parsers/IAST.h>\n #include <Core/Field.h>\n-\n+#include <Common/SettingConstraintWritability.h>\n \n namespace DB\n {\n /** Represents a settings profile's element like the following\n-  * {variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE]} | PROFILE 'profile_name'\n+  * {variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY]} | PROFILE 'profile_name'\n   */\n class ASTSettingsProfileElement : public IAST\n {\n@@ -17,7 +17,7 @@ class ASTSettingsProfileElement : public IAST\n     Field value;\n     Field min_value;\n     Field max_value;\n-    std::optional<bool> readonly;\n+    std::optional<SettingConstraintWritability> writability;\n     bool id_mode = false;  /// If true then `parent_profile` keeps UUID, not a name.\n     bool use_inherit_keyword = false;  /// If true then this element is a part of ASTCreateSettingsProfileQuery.\n \n@@ -30,7 +30,7 @@ class ASTSettingsProfileElement : public IAST\n \n \n /** Represents settings profile's elements like the following\n-  * {{variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE]} | PROFILE 'profile_name'} [,...]\n+  * {{variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY]} | PROFILE 'profile_name'} [,...]\n   */\n class ASTSettingsProfileElements : public IAST\n {\ndiff --git a/src/Parsers/Access/ParserCreateRoleQuery.h b/src/Parsers/Access/ParserCreateRoleQuery.h\nindex 1fdee67eaab8..883ea89854a1 100644\n--- a/src/Parsers/Access/ParserCreateRoleQuery.h\n+++ b/src/Parsers/Access/ParserCreateRoleQuery.h\n@@ -7,11 +7,11 @@ namespace DB\n {\n /** Parses queries like\n   * CREATE ROLE [IF NOT EXISTS | OR REPLACE] name\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   *\n   * ALTER ROLE [IF EXISTS] name\n   *     [RENAME TO new_name]\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   */\n class ParserCreateRoleQuery : public IParserBase\n {\ndiff --git a/src/Parsers/Access/ParserCreateSettingsProfileQuery.h b/src/Parsers/Access/ParserCreateSettingsProfileQuery.h\nindex ab730fcd8ebf..bee5bdcb2d10 100644\n--- a/src/Parsers/Access/ParserCreateSettingsProfileQuery.h\n+++ b/src/Parsers/Access/ParserCreateSettingsProfileQuery.h\n@@ -7,11 +7,11 @@ namespace DB\n {\n /** Parses queries like\n   * CREATE SETTINGS PROFILE [IF NOT EXISTS | OR REPLACE] name\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | INHERIT 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | INHERIT 'profile_name'] [,...]\n   *\n   * ALTER SETTINGS PROFILE [IF EXISTS] name\n   *     [RENAME TO new_name]\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | INHERIT 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | INHERIT 'profile_name'] [,...]\n   */\n class ParserCreateSettingsProfileQuery : public IParserBase\n {\ndiff --git a/src/Parsers/Access/ParserCreateUserQuery.h b/src/Parsers/Access/ParserCreateUserQuery.h\nindex 215133a777cf..0cc8c9b6649d 100644\n--- a/src/Parsers/Access/ParserCreateUserQuery.h\n+++ b/src/Parsers/Access/ParserCreateUserQuery.h\n@@ -10,7 +10,7 @@ namespace DB\n   *     [NOT IDENTIFIED | IDENTIFIED {[WITH {no_password|plaintext_password|sha256_password|sha256_hash|double_sha1_password|double_sha1_hash}] BY {'password'|'hash'}}|{WITH ldap SERVER 'server_name'}|{WITH kerberos [REALM 'realm']}]\n   *     [HOST {LOCAL | NAME 'name' | REGEXP 'name_regexp' | IP 'address' | LIKE 'pattern'} [,...] | ANY | NONE]\n   *     [DEFAULT ROLE role [,...]]\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   *     [GRANTEES {user | role | ANY | NONE} [,...] [EXCEPT {user | role} [,...]]]\n   *\n   * ALTER USER [IF EXISTS] name\n@@ -18,7 +18,7 @@ namespace DB\n   *     [NOT IDENTIFIED | IDENTIFIED {[WITH {no_password|plaintext_password|sha256_password|sha256_hash|double_sha1_password|double_sha1_hash}] BY {'password'|'hash'}}|{WITH ldap SERVER 'server_name'}|{WITH kerberos [REALM 'realm']}]\n   *     [[ADD|DROP] HOST {LOCAL | NAME 'name' | REGEXP 'name_regexp' | IP 'address' | LIKE 'pattern'} [,...] | ANY | NONE]\n   *     [DEFAULT ROLE role [,...] | ALL | ALL EXCEPT role [,...] ]\n-  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE] | PROFILE 'profile_name'] [,...]\n+  *     [SETTINGS variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY] | PROFILE 'profile_name'] [,...]\n   *     [GRANTEES {user | role | ANY | NONE} [,...] [EXCEPT {user | role} [,...]]]\n   */\n class ParserCreateUserQuery : public IParserBase\ndiff --git a/src/Parsers/Access/ParserSettingsProfileElement.cpp b/src/Parsers/Access/ParserSettingsProfileElement.cpp\nindex f4ca52dea2a4..db23a806a120 100644\n--- a/src/Parsers/Access/ParserSettingsProfileElement.cpp\n+++ b/src/Parsers/Access/ParserSettingsProfileElement.cpp\n@@ -95,18 +95,23 @@ namespace\n     }\n \n \n-    bool parseReadonlyOrWritableKeyword(IParserBase::Pos & pos, Expected & expected, std::optional<bool> & readonly)\n+    bool parseConstraintWritabilityKeyword(IParserBase::Pos & pos, Expected & expected, std::optional<SettingConstraintWritability> & writability)\n     {\n         return IParserBase::wrapParseImpl(pos, [&]\n         {\n-            if (ParserKeyword{\"READONLY\"}.ignore(pos, expected))\n+            if (ParserKeyword{\"READONLY\"}.ignore(pos, expected) || ParserKeyword{\"CONST\"}.ignore(pos, expected))\n             {\n-                readonly = true;\n+                writability = SettingConstraintWritability::CONST;\n                 return true;\n             }\n             else if (ParserKeyword{\"WRITABLE\"}.ignore(pos, expected))\n             {\n-                readonly = false;\n+                writability = SettingConstraintWritability::WRITABLE;\n+                return true;\n+            }\n+            else if (ParserKeyword{\"CHANGEABLE_IN_READONLY\"}.ignore(pos, expected))\n+            {\n+                writability = SettingConstraintWritability::CHANGEABLE_IN_READONLY;\n                 return true;\n             }\n             else\n@@ -122,7 +127,7 @@ namespace\n         Field & value,\n         Field & min_value,\n         Field & max_value,\n-        std::optional<bool> & readonly)\n+        std::optional<SettingConstraintWritability> & writability)\n     {\n         return IParserBase::wrapParseImpl(pos, [&]\n         {\n@@ -134,11 +139,11 @@ namespace\n             Field res_value;\n             Field res_min_value;\n             Field res_max_value;\n-            std::optional<bool> res_readonly;\n+            std::optional<SettingConstraintWritability> res_writability;\n \n             bool has_value_or_constraint = false;\n             while (parseValue(pos, expected, res_value) || parseMinMaxValue(pos, expected, res_min_value, res_max_value)\n-                   || parseReadonlyOrWritableKeyword(pos, expected, res_readonly))\n+                   || parseConstraintWritabilityKeyword(pos, expected, res_writability))\n             {\n                 has_value_or_constraint = true;\n             }\n@@ -147,7 +152,7 @@ namespace\n                 return false;\n \n             if (boost::iequals(res_setting_name, \"PROFILE\") && res_value.isNull() && res_min_value.isNull() && res_max_value.isNull()\n-                && res_readonly)\n+                && res_writability == SettingConstraintWritability::CONST)\n             {\n                 /// Ambiguity: \"profile readonly\" can be treated either as a profile named \"readonly\" or\n                 /// as a setting named 'profile' with the readonly constraint.\n@@ -159,7 +164,7 @@ namespace\n             value = std::move(res_value);\n             min_value = std::move(res_min_value);\n             max_value = std::move(res_max_value);\n-            readonly = res_readonly;\n+            writability = res_writability;\n             return true;\n         });\n     }\n@@ -179,9 +184,9 @@ namespace\n             Field value;\n             Field min_value;\n             Field max_value;\n-            std::optional<bool> readonly;\n+            std::optional<SettingConstraintWritability> writability;\n \n-            bool ok = parseSettingNameWithValueOrConstraints(pos, expected, setting_name, value, min_value, max_value, readonly);\n+            bool ok = parseSettingNameWithValueOrConstraints(pos, expected, setting_name, value, min_value, max_value, writability);\n \n             if (!ok && (parseProfileKeyword(pos, expected, use_inherit_keyword) || previous_element_was_parent_profile))\n                 ok = parseProfileNameOrID(pos, expected, id_mode, parent_profile);\n@@ -195,7 +200,7 @@ namespace\n             result->value = std::move(value);\n             result->min_value = std::move(min_value);\n             result->max_value = std::move(max_value);\n-            result->readonly = readonly;\n+            result->writability = writability;\n             result->id_mode = id_mode;\n             result->use_inherit_keyword = use_inherit_keyword;\n             return true;\ndiff --git a/src/Parsers/Access/ParserSettingsProfileElement.h b/src/Parsers/Access/ParserSettingsProfileElement.h\nindex 8843591a56cb..082fc66625f0 100644\n--- a/src/Parsers/Access/ParserSettingsProfileElement.h\n+++ b/src/Parsers/Access/ParserSettingsProfileElement.h\n@@ -6,7 +6,7 @@\n namespace DB\n {\n /** Parses a string like this:\n-  * {variable [= value] [MIN [=] min_value] [MAX [=] max_value] [READONLY|WRITABLE]} | PROFILE 'profile_name'\n+  * {variable [= value] [MIN [=] min_value] [MAX [=] max_value] [CONST|READONLY|WRITABLE|CHANGEABLE_IN_READONLY]} | PROFILE 'profile_name'\n   */\n class ParserSettingsProfileElement : public IParserBase\n {\ndiff --git a/src/Storages/System/StorageSystemSettings.cpp b/src/Storages/System/StorageSystemSettings.cpp\nindex e1f1e4985b44..f0ee90531c90 100644\n--- a/src/Storages/System/StorageSystemSettings.cpp\n+++ b/src/Storages/System/StorageSystemSettings.cpp\n@@ -40,8 +40,8 @@ void StorageSystemSettings::fillData(MutableColumns & res_columns, ContextPtr co\n         res_columns[3]->insert(setting.getDescription());\n \n         Field min, max;\n-        bool read_only = false;\n-        constraints.get(setting_name, min, max, read_only);\n+        SettingConstraintWritability writability = SettingConstraintWritability::WRITABLE;\n+        constraints.get(settings, setting_name, min, max, writability);\n \n         /// These two columns can accept strings only.\n         if (!min.isNull())\n@@ -49,17 +49,9 @@ void StorageSystemSettings::fillData(MutableColumns & res_columns, ContextPtr co\n         if (!max.isNull())\n             max = Settings::valueToStringUtil(setting_name, max);\n \n-        if (!read_only)\n-        {\n-            if ((settings.readonly == 1)\n-                || ((settings.readonly > 1) && (setting_name == \"readonly\"))\n-                || ((!settings.allow_ddl) && (setting_name == \"allow_ddl\")))\n-                read_only = true;\n-        }\n-\n         res_columns[4]->insert(min);\n         res_columns[5]->insert(max);\n-        res_columns[6]->insert(read_only);\n+        res_columns[6]->insert(writability == SettingConstraintWritability::CONST);\n         res_columns[7]->insert(setting.getTypeName());\n     }\n }\ndiff --git a/src/Storages/System/StorageSystemSettingsProfileElements.cpp b/src/Storages/System/StorageSystemSettingsProfileElements.cpp\nindex 565ff5e471e1..6785a4392e1b 100644\n--- a/src/Storages/System/StorageSystemSettingsProfileElements.cpp\n+++ b/src/Storages/System/StorageSystemSettingsProfileElements.cpp\n@@ -12,11 +12,24 @@\n #include <Access/SettingsProfile.h>\n #include <Interpreters/Context.h>\n #include <boost/range/algorithm_ext/push_back.hpp>\n+#include <Common/SettingConstraintWritability.h>\n \n \n namespace DB\n {\n \n+const std::vector<std::pair<String, Int8>> & getSettingConstraintWritabilityEnumValues()\n+{\n+    static const std::vector<std::pair<String, Int8>> values = []\n+    {\n+        std::vector<std::pair<String, Int8>> res;\n+        for (auto value : collections::range(SettingConstraintWritability::MAX))\n+            res.emplace_back(toString(value), static_cast<Int8>(value));\n+        return res;\n+    }();\n+    return values;\n+}\n+\n NamesAndTypesList StorageSystemSettingsProfileElements::getNamesAndTypes()\n {\n     NamesAndTypesList names_and_types{\n@@ -28,7 +41,7 @@ NamesAndTypesList StorageSystemSettingsProfileElements::getNamesAndTypes()\n         {\"value\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},\n         {\"min\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},\n         {\"max\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},\n-        {\"readonly\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt8>())},\n+        {\"writability\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeEnum8>(getSettingConstraintWritabilityEnumValues()))},\n         {\"inherit_profile\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},\n     };\n     return names_and_types;\n@@ -62,8 +75,8 @@ void StorageSystemSettingsProfileElements::fillData(MutableColumns & res_columns\n     auto & column_min_null_map = assert_cast<ColumnNullable &>(*res_columns[i++]).getNullMapData();\n     auto & column_max = assert_cast<ColumnString &>(assert_cast<ColumnNullable &>(*res_columns[i]).getNestedColumn());\n     auto & column_max_null_map = assert_cast<ColumnNullable &>(*res_columns[i++]).getNullMapData();\n-    auto & column_readonly = assert_cast<ColumnUInt8 &>(assert_cast<ColumnNullable &>(*res_columns[i]).getNestedColumn()).getData();\n-    auto & column_readonly_null_map = assert_cast<ColumnNullable &>(*res_columns[i++]).getNullMapData();\n+    auto & column_writability = assert_cast<ColumnInt8 &>(assert_cast<ColumnNullable &>(*res_columns[i]).getNestedColumn());\n+    auto & column_writability_null_map = assert_cast<ColumnNullable &>(*res_columns[i++]).getNullMapData();\n     auto & column_inherit_profile = assert_cast<ColumnString &>(assert_cast<ColumnNullable &>(*res_columns[i]).getNestedColumn());\n     auto & column_inherit_profile_null_map = assert_cast<ColumnNullable &>(*res_columns[i++]).getNullMapData();\n \n@@ -100,16 +113,16 @@ void StorageSystemSettingsProfileElements::fillData(MutableColumns & res_columns\n             inserted_max = true;\n         }\n \n-        bool inserted_readonly = false;\n-        if (element.readonly && !element.setting_name.empty())\n+        bool inserted_writability = false;\n+        if (element.writability && !element.setting_name.empty())\n         {\n-            column_readonly.push_back(*element.readonly);\n-            column_readonly_null_map.push_back(false);\n-            inserted_readonly = true;\n+            column_writability.insertValue(static_cast<Int8>(*element.writability));\n+            column_writability_null_map.push_back(false);\n+            inserted_writability = true;\n         }\n \n         bool inserted_setting_name = false;\n-        if (inserted_value || inserted_min || inserted_max || inserted_readonly)\n+        if (inserted_value || inserted_min || inserted_max || inserted_writability)\n         {\n             const auto & setting_name = element.setting_name;\n             column_setting_name.insertData(setting_name.data(), setting_name.size());\n",
  "test_patch": "diff --git a/tests/config/config.d/enable_access_control_improvements.xml b/tests/config/config.d/enable_access_control_improvements.xml\nindex 5a1865480984..564b656a0ad0 100644\n--- a/tests/config/config.d/enable_access_control_improvements.xml\n+++ b/tests/config/config.d/enable_access_control_improvements.xml\n@@ -4,5 +4,6 @@\n         <on_cluster_queries_require_cluster_grant>true</on_cluster_queries_require_cluster_grant>\n         <select_from_system_db_requires_grant>true</select_from_system_db_requires_grant>\n         <select_from_information_schema_requires_grant>true</select_from_information_schema_requires_grant>\n+        <settings_constraints_replace_previous>true</settings_constraints_replace_previous>\n     </access_control_improvements>\n </clickhouse>\ndiff --git a/tests/integration/helpers/0_common_instance_config.xml b/tests/integration/helpers/0_common_instance_config.xml\nindex 64f0ce9e361c..27563e47c355 100644\n--- a/tests/integration/helpers/0_common_instance_config.xml\n+++ b/tests/integration/helpers/0_common_instance_config.xml\n@@ -24,5 +24,6 @@\n         <on_cluster_queries_require_cluster_grant>true</on_cluster_queries_require_cluster_grant>\n         <select_from_system_db_requires_grant>true</select_from_system_db_requires_grant>\n         <select_from_information_schema_requires_grant>true</select_from_information_schema_requires_grant>\n+        <settings_constraints_replace_previous>true</settings_constraints_replace_previous>\n     </access_control_improvements>\n </clickhouse>\ndiff --git a/tests/integration/test_disabled_access_control_improvements/configs/config.d/disable_access_control_improvements.xml b/tests/integration/test_disabled_access_control_improvements/configs/config.d/disable_access_control_improvements.xml\nindex 7969c638fd70..a335c7f8a1f1 100644\n--- a/tests/integration/test_disabled_access_control_improvements/configs/config.d/disable_access_control_improvements.xml\n+++ b/tests/integration/test_disabled_access_control_improvements/configs/config.d/disable_access_control_improvements.xml\n@@ -3,5 +3,6 @@\n         <users_without_row_policies_can_read_rows remove=\"remove\"/>\n         <select_from_system_db_requires_grant remove=\"remove\"/>\n         <select_from_information_schema_requires_grant remove=\"remove\"/>\n+        <settings_constraints_replace_previous remove=\"remove\"/>\n     </access_control_improvements>\n </clickhouse>\ndiff --git a/tests/integration/test_disk_access_storage/test.py b/tests/integration/test_disk_access_storage/test.py\nindex 273a00adffef..bcfc9d718a7b 100644\n--- a/tests/integration/test_disk_access_storage/test.py\n+++ b/tests/integration/test_disk_access_storage/test.py\n@@ -93,7 +93,7 @@ def test_alter():\n     instance.query(\"GRANT SELECT ON mydb.mytable TO u1\")\n     instance.query(\"GRANT SELECT ON mydb.* TO rx WITH GRANT OPTION\")\n     instance.query(\n-        \"ALTER SETTINGS PROFILE s1 SETTINGS max_memory_usage = 987654321 READONLY\"\n+        \"ALTER SETTINGS PROFILE s1 SETTINGS max_memory_usage = 987654321 CONST\"\n     )\n \n     def check():\n@@ -124,7 +124,7 @@ def check():\n         )\n         assert (\n             instance.query(\"SHOW CREATE SETTINGS PROFILE s1\")\n-            == \"CREATE SETTINGS PROFILE s1 SETTINGS max_memory_usage = 987654321 READONLY\\n\"\n+            == \"CREATE SETTINGS PROFILE s1 SETTINGS max_memory_usage = 987654321 CONST\\n\"\n         )\n         assert (\n             instance.query(\"SHOW CREATE SETTINGS PROFILE s2\")\ndiff --git a/tests/integration/test_settings_profile/test.py b/tests/integration/test_settings_profile/test.py\nindex 13af1cf650dd..3358315cca72 100644\n--- a/tests/integration/test_settings_profile/test.py\n+++ b/tests/integration/test_settings_profile/test.py\n@@ -216,7 +216,18 @@ def test_settings_from_granted_role():\n             \"\\\\N\",\n             \"\\\\N\",\n         ],\n-        [\"xyz\", \"\\\\N\", \"\\\\N\", 1, \"max_ast_depth\", 2000, \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\"],\n+        [\n+            \"xyz\",\n+            \"\\\\N\",\n+            \"\\\\N\",\n+            1,\n+            \"max_ast_depth\",\n+            2000,\n+            \"\\\\N\",\n+            \"\\\\N\",\n+            \"\\\\N\",\n+            \"\\\\N\",\n+        ],\n     ]\n     assert system_settings_profile_elements(role_name=\"worker\") == [\n         [\"\\\\N\", \"\\\\N\", \"worker\", 0, \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"xyz\"]\n@@ -288,12 +299,12 @@ def test_settings_from_granted_role():\n \n def test_inheritance():\n     instance.query(\n-        \"CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000002 READONLY\"\n+        \"CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000002 CONST\"\n     )\n     instance.query(\"CREATE SETTINGS PROFILE alpha SETTINGS PROFILE xyz TO robin\")\n     assert (\n         instance.query(\"SHOW CREATE SETTINGS PROFILE xyz\")\n-        == \"CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000002 READONLY\\n\"\n+        == \"CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000002 CONST\\n\"\n     )\n     assert (\n         instance.query(\"SHOW CREATE SETTINGS PROFILE alpha\")\n@@ -315,7 +326,18 @@ def test_inheritance():\n         [\"xyz\", \"local directory\", 1, 0, \"[]\", \"[]\"]\n     ]\n     assert system_settings_profile_elements(profile_name=\"xyz\") == [\n-        [\"xyz\", \"\\\\N\", \"\\\\N\", 0, \"max_memory_usage\", 100000002, \"\\\\N\", \"\\\\N\", 1, \"\\\\N\"]\n+        [\n+            \"xyz\",\n+            \"\\\\N\",\n+            \"\\\\N\",\n+            0,\n+            \"max_memory_usage\",\n+            100000002,\n+            \"\\\\N\",\n+            \"\\\\N\",\n+            \"CONST\",\n+            \"\\\\N\",\n+        ]\n     ]\n     assert system_settings_profile(\"alpha\") == [\n         [\"alpha\", \"local directory\", 1, 0, \"['robin']\", \"[]\"]\n@@ -366,6 +388,66 @@ def test_alter_and_drop():\n     instance.query(\"SET max_memory_usage = 120000000\", user=\"robin\")\n \n \n+def test_changeable_in_readonly():\n+    instance.query(\n+        \"CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000003 MIN 90000000 MAX 110000000 CHANGEABLE_IN_READONLY SETTINGS readonly = 1 TO robin\"\n+    )\n+    assert (\n+        instance.query(\n+            \"SELECT value FROM system.settings WHERE name = 'max_memory_usage'\",\n+            user=\"robin\",\n+        )\n+        == \"100000003\\n\"\n+    )\n+    assert (\n+        instance.query(\n+            \"SELECT value FROM system.settings WHERE name = 'readonly'\",\n+            user=\"robin\",\n+        )\n+        == \"1\\n\"\n+    )\n+    assert (\n+        \"Setting max_memory_usage shouldn't be less than 90000000\"\n+        in instance.query_and_get_error(\"SET max_memory_usage = 80000000\", user=\"robin\")\n+    )\n+    assert (\n+        \"Setting max_memory_usage shouldn't be greater than 110000000\"\n+        in instance.query_and_get_error(\n+            \"SET max_memory_usage = 120000000\", user=\"robin\"\n+        )\n+    )\n+\n+    assert system_settings_profile_elements(profile_name=\"xyz\") == [\n+        [\n+            \"xyz\",\n+            \"\\\\N\",\n+            \"\\\\N\",\n+            0,\n+            \"max_memory_usage\",\n+            100000003,\n+            90000000,\n+            110000000,\n+            \"CHANGEABLE_IN_READONLY\",\n+            \"\\\\N\",\n+        ],\n+        [\n+            \"xyz\",\n+            \"\\\\N\",\n+            \"\\\\N\",\n+            1,\n+            \"readonly\",\n+            1,\n+            \"\\\\N\",\n+            \"\\\\N\",\n+            \"\\\\N\",\n+            \"\\\\N\",\n+        ],\n+    ]\n+\n+    instance.query(\"SET max_memory_usage = 90000000\", user=\"robin\")\n+    instance.query(\"SET max_memory_usage = 110000000\", user=\"robin\")\n+\n+\n def test_show_profiles():\n     instance.query(\"CREATE SETTINGS PROFILE xyz\")\n     assert instance.query(\"SHOW SETTINGS PROFILES\") == \"default\\nreadonly\\nxyz\\n\"\ndiff --git a/tests/queries/0_stateless/01292_create_user.reference b/tests/queries/0_stateless/01292_create_user.reference\nindex 997a9504bb51..f723412c636f 100644\n--- a/tests/queries/0_stateless/01292_create_user.reference\n+++ b/tests/queries/0_stateless/01292_create_user.reference\n@@ -58,9 +58,9 @@ CREATE USER u2_01292 SETTINGS PROFILE default\n CREATE USER u3_01292 SETTINGS max_memory_usage = 5000000\n CREATE USER u4_01292 SETTINGS max_memory_usage MIN 5000000\n CREATE USER u5_01292 SETTINGS max_memory_usage MAX 5000000\n-CREATE USER u6_01292 SETTINGS max_memory_usage READONLY\n+CREATE USER u6_01292 SETTINGS max_memory_usage CONST\n CREATE USER u7_01292 SETTINGS max_memory_usage WRITABLE\n-CREATE USER u8_01292 SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 READONLY\n+CREATE USER u8_01292 SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 CONST\n CREATE USER u9_01292 SETTINGS PROFILE default, max_memory_usage = 5000000 WRITABLE\n CREATE USER u1_01292 SETTINGS readonly = 1\n CREATE USER u2_01292 SETTINGS readonly = 1\n@@ -111,7 +111,7 @@ u4_01292\tlocal directory\tdouble_sha1_password\t{}\t['::/0']\t[]\t[]\t[]\t1\t[]\t['r1_012\n -- system.settings_profile_elements\n \\N\tu1_01292\t\\N\t0\treadonly\t1\t\\N\t\\N\t\\N\t\\N\n \\N\tu2_01292\t\\N\t0\t\\N\t\\N\t\\N\t\\N\t\\N\tdefault\n-\\N\tu3_01292\t\\N\t0\tmax_memory_usage\t5000000\t4000000\t6000000\t0\t\\N\n+\\N\tu3_01292\t\\N\t0\tmax_memory_usage\t5000000\t4000000\t6000000\tWRITABLE\t\\N\n \\N\tu4_01292\t\\N\t0\t\\N\t\\N\t\\N\t\\N\t\\N\tdefault\n \\N\tu4_01292\t\\N\t1\tmax_memory_usage\t5000000\t\\N\t\\N\t\\N\t\\N\n \\N\tu4_01292\t\\N\t2\treadonly\t1\t\\N\t\\N\t\\N\t\\N\ndiff --git a/tests/queries/0_stateless/01292_create_user.sql b/tests/queries/0_stateless/01292_create_user.sql\nindex a9582376825d..d0f157d36b09 100644\n--- a/tests/queries/0_stateless/01292_create_user.sql\n+++ b/tests/queries/0_stateless/01292_create_user.sql\n@@ -122,9 +122,9 @@ CREATE USER u2_01292 SETTINGS PROFILE 'default';\n CREATE USER u3_01292 SETTINGS max_memory_usage=5000000;\n CREATE USER u4_01292 SETTINGS max_memory_usage MIN=5000000;\n CREATE USER u5_01292 SETTINGS max_memory_usage MAX=5000000;\n-CREATE USER u6_01292 SETTINGS max_memory_usage READONLY;\n+CREATE USER u6_01292 SETTINGS max_memory_usage CONST;\n CREATE USER u7_01292 SETTINGS max_memory_usage WRITABLE;\n-CREATE USER u8_01292 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 READONLY;\n+CREATE USER u8_01292 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 CONST;\n CREATE USER u9_01292 SETTINGS PROFILE 'default', max_memory_usage=5000000 WRITABLE;\n SHOW CREATE USER u1_01292;\n SHOW CREATE USER u2_01292;\ndiff --git a/tests/queries/0_stateless/01293_create_role.reference b/tests/queries/0_stateless/01293_create_role.reference\nindex 8d9a259ecf5c..9b3c4eabd478 100644\n--- a/tests/queries/0_stateless/01293_create_role.reference\n+++ b/tests/queries/0_stateless/01293_create_role.reference\n@@ -15,9 +15,9 @@ CREATE ROLE r2_01293 SETTINGS PROFILE default\n CREATE ROLE r3_01293 SETTINGS max_memory_usage = 5000000\n CREATE ROLE r4_01293 SETTINGS max_memory_usage MIN 5000000\n CREATE ROLE r5_01293 SETTINGS max_memory_usage MAX 5000000\n-CREATE ROLE r6_01293 SETTINGS max_memory_usage READONLY\n+CREATE ROLE r6_01293 SETTINGS max_memory_usage CONST\n CREATE ROLE r7_01293 SETTINGS max_memory_usage WRITABLE\n-CREATE ROLE r8_01293 SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 READONLY\n+CREATE ROLE r8_01293 SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 CONST\n CREATE ROLE r9_01293 SETTINGS PROFILE default, max_memory_usage = 5000000 WRITABLE\n CREATE ROLE r1_01293 SETTINGS readonly = 1\n CREATE ROLE r2_01293 SETTINGS readonly = 1\n@@ -32,7 +32,7 @@ r1_01293\tlocal directory\n -- system.settings_profile_elements\n \\N\t\\N\tr1_01293\t0\treadonly\t1\t\\N\t\\N\t\\N\t\\N\n \\N\t\\N\tr2_01293\t0\t\\N\t\\N\t\\N\t\\N\t\\N\tdefault\n-\\N\t\\N\tr3_01293\t0\tmax_memory_usage\t5000000\t4000000\t6000000\t0\t\\N\n+\\N\t\\N\tr3_01293\t0\tmax_memory_usage\t5000000\t4000000\t6000000\tWRITABLE\t\\N\n \\N\t\\N\tr4_01293\t0\t\\N\t\\N\t\\N\t\\N\t\\N\tdefault\n \\N\t\\N\tr4_01293\t1\tmax_memory_usage\t5000000\t\\N\t\\N\t\\N\t\\N\n \\N\t\\N\tr4_01293\t2\treadonly\t1\t\\N\t\\N\t\\N\t\\N\ndiff --git a/tests/queries/0_stateless/01293_create_role.sql b/tests/queries/0_stateless/01293_create_role.sql\nindex 963a1020e3fe..f22edfeec3ef 100644\n--- a/tests/queries/0_stateless/01293_create_role.sql\n+++ b/tests/queries/0_stateless/01293_create_role.sql\n@@ -31,9 +31,9 @@ CREATE ROLE r2_01293 SETTINGS PROFILE 'default';\n CREATE ROLE r3_01293 SETTINGS max_memory_usage=5000000;\n CREATE ROLE r4_01293 SETTINGS max_memory_usage MIN=5000000;\n CREATE ROLE r5_01293 SETTINGS max_memory_usage MAX=5000000;\n-CREATE ROLE r6_01293 SETTINGS max_memory_usage READONLY;\n+CREATE ROLE r6_01293 SETTINGS max_memory_usage CONST;\n CREATE ROLE r7_01293 SETTINGS max_memory_usage WRITABLE;\n-CREATE ROLE r8_01293 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 READONLY;\n+CREATE ROLE r8_01293 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 CONST;\n CREATE ROLE r9_01293 SETTINGS PROFILE 'default', max_memory_usage=5000000 WRITABLE;\n SHOW CREATE ROLE r1_01293;\n SHOW CREATE ROLE r2_01293;\ndiff --git a/tests/queries/0_stateless/01294_create_settings_profile.reference b/tests/queries/0_stateless/01294_create_settings_profile.reference\nindex da47b084070e..dbb73bca8511 100644\n--- a/tests/queries/0_stateless/01294_create_settings_profile.reference\n+++ b/tests/queries/0_stateless/01294_create_settings_profile.reference\n@@ -11,9 +11,9 @@ CREATE SETTINGS PROFILE s2_01294 SETTINGS INHERIT default\n CREATE SETTINGS PROFILE s3_01294 SETTINGS max_memory_usage = 5000000\n CREATE SETTINGS PROFILE s4_01294 SETTINGS max_memory_usage MIN 5000000\n CREATE SETTINGS PROFILE s5_01294 SETTINGS max_memory_usage MAX 5000000\n-CREATE SETTINGS PROFILE s6_01294 SETTINGS max_memory_usage READONLY\n+CREATE SETTINGS PROFILE s6_01294 SETTINGS max_memory_usage CONST\n CREATE SETTINGS PROFILE s7_01294 SETTINGS max_memory_usage WRITABLE\n-CREATE SETTINGS PROFILE s8_01294 SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 READONLY\n+CREATE SETTINGS PROFILE s8_01294 SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 CONST\n CREATE SETTINGS PROFILE s9_01294 SETTINGS INHERIT default, max_memory_usage = 5000000 WRITABLE\n CREATE SETTINGS PROFILE s10_01294 SETTINGS INHERIT s1_01294, INHERIT s3_01294, INHERIT default, readonly = 0, max_memory_usage MAX 6000000\n CREATE SETTINGS PROFILE s1_01294 SETTINGS readonly = 0\n@@ -47,11 +47,11 @@ CREATE SETTINGS PROFILE s3_01294 TO r1_01294\n CREATE SETTINGS PROFILE s4_01294 TO r1_01294\n -- readonly ambiguity\n CREATE SETTINGS PROFILE s1_01294 SETTINGS readonly = 1\n-CREATE SETTINGS PROFILE s2_01294 SETTINGS readonly READONLY\n+CREATE SETTINGS PROFILE s2_01294 SETTINGS readonly CONST\n CREATE SETTINGS PROFILE s3_01294 SETTINGS INHERIT readonly\n CREATE SETTINGS PROFILE s4_01294 SETTINGS INHERIT readonly, INHERIT readonly\n CREATE SETTINGS PROFILE s5_01294 SETTINGS INHERIT readonly, readonly = 1\n-CREATE SETTINGS PROFILE s6_01294 SETTINGS INHERIT readonly, readonly READONLY\n+CREATE SETTINGS PROFILE s6_01294 SETTINGS INHERIT readonly, readonly CONST\n -- system.settings_profiles\n s1_01294\tlocal directory\t0\t0\t[]\t[]\n s2_01294\tlocal directory\t1\t0\t['r1_01294']\t[]\n@@ -61,8 +61,8 @@ s5_01294\tlocal directory\t3\t0\t['u1_01294']\t[]\n s6_01294\tlocal directory\t0\t1\t[]\t['r1_01294','u1_01294']\n -- system.settings_profile_elements\n s2_01294\t\\N\t\\N\t0\treadonly\t0\t\\N\t\\N\t\\N\t\\N\n-s3_01294\t\\N\t\\N\t0\tmax_memory_usage\t5000000\t4000000\t6000000\t1\t\\N\n+s3_01294\t\\N\t\\N\t0\tmax_memory_usage\t5000000\t4000000\t6000000\tCONST\t\\N\n s4_01294\t\\N\t\\N\t0\tmax_memory_usage\t5000000\t\\N\t\\N\t\\N\t\\N\n s5_01294\t\\N\t\\N\t0\t\\N\t\\N\t\\N\t\\N\t\\N\tdefault\n s5_01294\t\\N\t\\N\t1\treadonly\t0\t\\N\t\\N\t\\N\t\\N\n-s5_01294\t\\N\t\\N\t2\tmax_memory_usage\t\\N\t\\N\t6000000\t0\t\\N\n+s5_01294\t\\N\t\\N\t2\tmax_memory_usage\t\\N\t\\N\t6000000\tWRITABLE\t\\N\ndiff --git a/tests/queries/0_stateless/01294_create_settings_profile.sql b/tests/queries/0_stateless/01294_create_settings_profile.sql\nindex b7dd91ad6ed2..565b4e70367b 100644\n--- a/tests/queries/0_stateless/01294_create_settings_profile.sql\n+++ b/tests/queries/0_stateless/01294_create_settings_profile.sql\n@@ -25,9 +25,9 @@ CREATE PROFILE s2_01294 SETTINGS INHERIT 'default';\n CREATE PROFILE s3_01294 SETTINGS max_memory_usage=5000000;\n CREATE PROFILE s4_01294 SETTINGS max_memory_usage MIN=5000000;\n CREATE PROFILE s5_01294 SETTINGS max_memory_usage MAX=5000000;\n-CREATE PROFILE s6_01294 SETTINGS max_memory_usage READONLY;\n+CREATE PROFILE s6_01294 SETTINGS max_memory_usage CONST;\n CREATE PROFILE s7_01294 SETTINGS max_memory_usage WRITABLE;\n-CREATE PROFILE s8_01294 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 READONLY;\n+CREATE PROFILE s8_01294 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 CONST;\n CREATE PROFILE s9_01294 SETTINGS INHERIT 'default', max_memory_usage=5000000 WRITABLE;\n CREATE PROFILE s10_01294 SETTINGS INHERIT s1_01294, s3_01294, INHERIT default, readonly=0, max_memory_usage MAX 6000000;\n SHOW CREATE PROFILE s1_01294;\n@@ -106,7 +106,7 @@ DROP PROFILE s1_01294, s2_01294, s3_01294, s4_01294, s5_01294, s6_01294;\n SELECT '-- system.settings_profiles';\n CREATE PROFILE s1_01294;\n CREATE PROFILE s2_01294 SETTINGS readonly=0 TO r1_01294;;\n-CREATE PROFILE s3_01294 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 READONLY TO r1_01294;\n+CREATE PROFILE s3_01294 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 CONST TO r1_01294;\n CREATE PROFILE s4_01294 SETTINGS max_memory_usage=5000000 TO r1_01294;\n CREATE PROFILE s5_01294 SETTINGS INHERIT default, readonly=0, max_memory_usage MAX 6000000 WRITABLE TO u1_01294;\n CREATE PROFILE s6_01294 TO ALL EXCEPT u1_01294, r1_01294;\ndiff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference\nindex d087bb556223..588788647ab5 100644\n--- a/tests/queries/0_stateless/02117_show_create_table_system.reference\n+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference\n@@ -956,7 +956,7 @@ CREATE TABLE system.settings_profile_elements\n     `value` Nullable(String),\n     `min` Nullable(String),\n     `max` Nullable(String),\n-    `readonly` Nullable(UInt8),\n+    `writability` Nullable(Enum8('WRITABLE' = 0, 'CONST' = 1, 'CHANGEABLE_IN_READONLY' = 2)),\n     `inherit_profile` Nullable(String)\n )\n ENGINE = SystemSettingsProfileElements\n",
  "problem_statement": "Allow to modify constrained settings in readonly mode.\nIt may be useful to allow modifying specified set of setting for readonly user.\r\n[Example](https://play.clickhouse.com/play?user=play#c2VsZWN0IDEgc2V0dGluZ3MgZXh0cmVtZXMgPSAxOw==).\r\n\r\nNow, we can specify [constraints](https://clickhouse.com/docs/en/operations/settings/constraints-on-settings/) for settings. However, readonly user can't change it:\r\n```\r\nusers.xml:\r\n    <profiles>\r\n        <readonly>\r\n            <readonly>1</readonly>\r\n            <constraints>\r\n                <max_threads>\r\n                   <min>3</min>\r\n                   <max>16</max>\r\n                </max_threads>\r\n            </constraints>\r\n        </readonly>\r\n    </profiles>\r\n\r\n$ clickhouse client --user readonly --max_threads=4 -q 'select 1'\r\nReceived exception from server (version 22.8.1):\r\nCode: 164. DB::Exception: Received from localhost:9000. DB::Exception: Cannot modify 'max_threads' setting in readonly mode. (READONLY)\r\n```\r\n\r\nWe can just allow to change only specified settings for readonly user.\r\nProbably, add compatibility setting/tag.\r\n\n",
  "hints_text": "We can come up with just a different name instead of `constraints`.\r\nWhat is the opposite term? `allowances`?\n```\r\n    <profiles>\r\n        <readonly>\r\n            <readonly>1</readonly>\r\n            <allowances>\r\n                <max_threads>\r\n                   <min>3</min>\r\n                   <max>16</max>\r\n                </max_threads>\r\n            </allowances>\r\n        </readonly>\r\n    </profiles>\r\n```\n> We can come up with just a different name instead of `constraints`. What is the opposite term? `allowances`?\r\n\r\n`except`, `exclude` - \"settings are readonly except ...\"\n@devcrafter The `readonly` can be set somewhere far away, in another inherited user profile, that's why naming the exceptions `exclude` would not give a clue.\nLet's name it `<allow>`.\r\n\r\nIt will work in the same way as constraints but will override previous constraints by allowing to change settings in this range.\r\nIf there is no \"readonly\" or inherited constraints, then there is no difference between `<constraints>` and `<allow>`.\nWhile implementing I've found that `<constraints>` and `<allow>` are really tightly bound together. For example allowed range must be inside constrained range. Also in the simplest possible implementation that I came up with, they appear in the same structures, for example:\r\n```\r\n    struct Constraint\r\n    {\r\n        std::shared_ptr<const String> setting_name;\r\n        bool read_only = false;\r\n        Field min_value;\r\n        Field max_value;\r\n        Field min_value_in_readonly;\r\n        Field max_value_in_readonly;\r\n    };\r\n```\r\nMaybe we should use syntax that is more natural to describe this relationship, by putting things together inside the same xml element:\r\n```\r\n    <profiles>\r\n        <user>\r\n            <readonly>1</readonly>\r\n            <constraints>\r\n                <max_threads>\r\n                   <min>3</min>\r\n                   <max>16</max>\r\n                   <max_in_readonly>4</max_in_readonly>\r\n                </max_threads>\r\n            </constraints>\r\n        </user>\r\n    </profiles>\r\n```\r\nWDYT? @alexey-milovidov @KochetovNicolai\nThis will also be more natural for SQL workflow, that we even not discussed here yet.\r\n```\r\nCREATE SETTINGS PROFILE max_memory_usage_profile SETTINGS max_memory_usage = 100000001 MIN 90000000 MAX 110000000 MAX_IN_READONLY 100000000 TO robin\r\n```",
  "created_at": "2022-08-25T15:26:48Z"
}