{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49466,
  "instance_id": "ClickHouse__ClickHouse-49466",
  "issue_numbers": [
    "47185"
  ],
  "base_commit": "5c72bdcb2938632f416f94a4152a109e3485639b",
  "patch": "diff --git a/docs/en/sql-reference/functions/string-functions.md b/docs/en/sql-reference/functions/string-functions.md\nindex c543cda5ae2d..8489b9d950b1 100644\n--- a/docs/en/sql-reference/functions/string-functions.md\n+++ b/docs/en/sql-reference/functions/string-functions.md\n@@ -1215,96 +1215,3 @@ Result:\n \u2502 A240             \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n-\n-## extractKeyValuePairs\n-\n-Extracts key-value pairs from any string. The string does not need to be 100% structured in a key value pair format;\n-\n-It can contain noise (e.g. log files). The key-value pair format to be interpreted should be specified via function arguments.\n-\n-A key-value pair consists of a key followed by a `key_value_delimiter` and a value. Quoted keys and values are also supported. Key value pairs must be separated by pair delimiters.\n-\n-**Syntax**\n-``` sql\n-extractKeyValuePairs(data, [key_value_delimiter], [pair_delimiter], [quoting_character])\n-```\n-\n-**Arguments**\n-- `data` - String to extract key-value pairs from. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).\n-- `key_value_delimiter` - Character to be used as delimiter between the key and the value. Defaults to `:`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).\n-- `pair_delimiters` - Set of character to be used as delimiters between pairs. Defaults to `\\space`, `,` and `;`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).\n-- `quoting_character` - Character to be used as quoting character. Defaults to `\"`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).\n-\n-**Returned values**\n-- The extracted key-value pairs in a Map(String, String).\n-\n-**Examples**\n-\n-Query:\n-\n-**Simple case**\n-``` sql\n-arthur :) select extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv\n-\n-SELECT extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv\n-\n-Query id: f9e0ca6f-3178-4ee2-aa2c-a5517abb9cee\n-\n-\u250c\u2500kv\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n-\u2502 {'name':'neymar','age':'31','team':'psg','nationality':'brazil'}        \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```\n-\n-**Single quote as quoting character**\n-``` sql\n-arthur :) select extractKeyValuePairs('name:\\'neymar\\';\\'age\\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\\'') as kv\n-\n-SELECT extractKeyValuePairs('name:\\'neymar\\';\\'age\\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\\'') as kv\n-\n-Query id: 0e22bf6b-9844-414a-99dc-32bf647abd5e\n-\n-\u250c\u2500kv\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n-\u2502 {'name':'neymar','age':'31','team':'psg','nationality':'brazil','last_key':'last_value'}                                 \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```\n-\n-**Escape sequences without escape sequences support**\n-``` sql\n-arthur :) select extractKeyValuePairs('age:a\\\\x0A\\\\n\\\\0') as kv\n-\n-SELECT extractKeyValuePairs('age:a\\\\x0A\\\\n\\\\0') AS kv\n-\n-Query id: e9fd26ee-b41f-4a11-b17f-25af6fd5d356\n-\n-\u250c\u2500kv\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n-\u2502 {'age':'a\\\\x0A\\\\n\\\\0'} \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```\n-\n-## extractKeyValuePairsWithEscaping\n-\n-Same as `extractKeyValuePairs` but with escaping support.\n-\n-Escape sequences supported: `\\x`, `\\N`, `\\a`, `\\b`, `\\e`, `\\f`, `\\n`, `\\r`, `\\t`, `\\v` and `\\0`.\n-Non standard escape sequences are returned as it is (including the backslash) unless they are one of the following:\n-`\\\\`, `'`, `\"`, `backtick`, `/`, `=` or ASCII control characters (c <= 31).\n-\n-This function will satisfy the use case where pre-escaping and post-escaping are not suitable. For instance, consider the following\n-input string: `a: \"aaaa\\\"bbb\"`. The expected output is: `a: aaaa\\\"bbbb`.\n-- Pre-escaping: Pre-escaping it will output: `a: \"aaaa\"bbb\"` and `extractKeyValuePairs` will then output: `a: aaaa`\n-- Post-escaping: `extractKeyValuePairs` will output `a: aaaa\\` and post-escaping will keep it as it is.\n-\n-Leading escape sequences will be skipped in keys and will be considered invalid for values.\n-\n-**Escape sequences with escape sequence support turned on**\n-``` sql\n-arthur :) select extractKeyValuePairsWithEscaping('age:a\\\\x0A\\\\n\\\\0') as kv\n-\n-SELECT extractKeyValuePairsWithEscaping('age:a\\\\x0A\\\\n\\\\0') AS kv\n-\n-Query id: 44c114f0-5658-4c75-ab87-4574de3a1645\n-\n-\u250c\u2500kv\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n-\u2502 {'age':'a\\n\\n\\0'} \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```\ndiff --git a/docs/en/sql-reference/functions/tuple-map-functions.md b/docs/en/sql-reference/functions/tuple-map-functions.md\nindex 786ea47f12cd..c84620160a86 100644\n--- a/docs/en/sql-reference/functions/tuple-map-functions.md\n+++ b/docs/en/sql-reference/functions/tuple-map-functions.md\n@@ -109,6 +109,108 @@ SELECT mapFromArrays([1, 2, 3], map('a', 1, 'b', 2, 'c', 3))\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n+## extractKeyValuePairs\n+\n+Extracts key-value pairs, i.e. a [Map(String, String)](../../sql-reference/data-types/map.md), from a string. Parsing is robust towards noise (e.g. log files).\n+\n+A key-value pair consists of a key, followed by a `key_value_delimiter` and a value. Key value pairs must be separated by `pair_delimiter`. Quoted keys and values are also supported. \n+\n+**Syntax**\n+\n+``` sql\n+extractKeyValuePairs(data[, key_value_delimiter[, pair_delimiter[, quoting_character]]])\n+```\n+\n+Alias:\n+- `str_to_map`\n+- `mapFromString`\n+\n+**Arguments**\n+\n+- `data` - String to extract key-value pairs from. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).\n+- `key_value_delimiter` - Character to be used as delimiter between the key and the value. Defaults to `:`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).\n+- `pair_delimiters` - Set of character to be used as delimiters between pairs. Defaults to ` `, `,` and `;`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).\n+- `quoting_character` - Character to be used as quoting character. Defaults to `\"`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).\n+\n+**Returned values**\n+\n+- A [Map(String, String)](../../sql-reference/data-types/map.md) of key-value pairs.\n+\n+**Examples**\n+\n+Simple case:\n+\n+``` sql\n+SELECT extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv\n+```\n+\n+Result:\n+\n+``` Result:\n+\u250c\u2500kv\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 {'name':'neymar','age':'31','team':'psg','nationality':'brazil'}        \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Single quote as quoting character:\n+\n+``` sql\n+SELECT extractKeyValuePairs('name:\\'neymar\\';\\'age\\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\\'') as kv\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500kv\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 {'name':'neymar','age':'31','team':'psg','nationality':'brazil','last_key':'last_value'}                                 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Escape sequences without escape sequences support:\n+\n+``` sql\n+SELECT extractKeyValuePairs('age:a\\\\x0A\\\\n\\\\0') AS kv\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500kv\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 {'age':'a\\\\x0A\\\\n\\\\0'} \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## extractKeyValuePairsWithEscaping\n+\n+Same as `extractKeyValuePairs` but with escaping support.\n+\n+Supported escape sequences: `\\x`, `\\N`, `\\a`, `\\b`, `\\e`, `\\f`, `\\n`, `\\r`, `\\t`, `\\v` and `\\0`.\n+Non standard escape sequences are returned as it is (including the backslash) unless they are one of the following:\n+`\\\\`, `'`, `\"`, `backtick`, `/`, `=` or ASCII control characters (c <= 31).\n+\n+This function will satisfy the use case where pre-escaping and post-escaping are not suitable. For instance, consider the following\n+input string: `a: \"aaaa\\\"bbb\"`. The expected output is: `a: aaaa\\\"bbbb`.\n+- Pre-escaping: Pre-escaping it will output: `a: \"aaaa\"bbb\"` and `extractKeyValuePairs` will then output: `a: aaaa`\n+- Post-escaping: `extractKeyValuePairs` will output `a: aaaa\\` and post-escaping will keep it as it is.\n+\n+Leading escape sequences will be skipped in keys and will be considered invalid for values.\n+\n+**Examples**\n+\n+Escape sequences with escape sequence support turned on:\n+\n+``` sql\n+SELECT extractKeyValuePairsWithEscaping('age:a\\\\x0A\\\\n\\\\0') AS kv\n+```\n+\n+Result:\n+\n+``` result\n+\u250c\u2500kv\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 {'age':'a\\n\\n\\0'} \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n ## mapAdd\n \n Collect all the keys and sum corresponding values.\ndiff --git a/src/Functions/keyvaluepair/extractKeyValuePairs.cpp b/src/Functions/keyvaluepair/extractKeyValuePairs.cpp\nindex 4078b88c23ea..a1b140001ace 100644\n--- a/src/Functions/keyvaluepair/extractKeyValuePairs.cpp\n+++ b/src/Functions/keyvaluepair/extractKeyValuePairs.cpp\n@@ -228,6 +228,8 @@ REGISTER_FUNCTION(ExtractKeyValuePairs)\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             ```)\")\n     );\n+    factory.registerAlias(\"str_to_map\", NameExtractKeyValuePairs::name, FunctionFactory::CaseInsensitive);\n+    factory.registerAlias(\"mapFromString\", NameExtractKeyValuePairs::name);\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.reference b/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.reference\nindex 9daeafff7793..125afa194276 100644\n--- a/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.reference\n+++ b/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.reference\n@@ -304,3 +304,27 @@ WITH\n SELECT\n     x;\n {}\n+-- check str_to_map alias (it is case-insensitive)\n+WITH\n+    sTr_tO_mAp('name:neymar, age:31 team:psg,nationality:brazil') AS s_map,\n+    CAST(\n+            arrayMap(\n+                    (x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n+                ),\n+            'Map(String,String)'\n+        ) AS x\n+SELECT\n+    x;\n+{'age':'31','name':'neymar','nationality':'brazil','team':'psg'}\n+-- check mapFromString alias\n+WITH\n+    mapFromString('name:neymar, age:31 team:psg,nationality:brazil') AS s_map,\n+    CAST(\n+            arrayMap(\n+                    (x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n+                ),\n+            'Map(String,String)'\n+        ) AS x\n+SELECT\n+    x;\n+{'age':'31','name':'neymar','nationality':'brazil','team':'psg'}\ndiff --git a/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql b/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql\nindex 7d681e36a4bb..0a1500b17968 100644\n--- a/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql\n+++ b/tests/queries/0_stateless/02499_extract_key_value_pairs_multiple_input.sql\n@@ -426,3 +426,27 @@ WITH\n         ) AS x\n SELECT\n     x;\n+\n+-- check str_to_map alias (it is case-insensitive)\n+WITH\n+    sTr_tO_mAp('name:neymar, age:31 team:psg,nationality:brazil') AS s_map,\n+    CAST(\n+            arrayMap(\n+                    (x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n+                ),\n+            'Map(String,String)'\n+        ) AS x\n+SELECT\n+    x;\n+\n+-- check mapFromString alias\n+WITH\n+    mapFromString('name:neymar, age:31 team:psg,nationality:brazil') AS s_map,\n+    CAST(\n+            arrayMap(\n+                    (x) -> (x, s_map[x]), arraySort(mapKeys(s_map))\n+                ),\n+            'Map(String,String)'\n+        ) AS x\n+SELECT\n+    x;\n",
  "problem_statement": "Implement `string_to_map` function\nCheck https://docs.databricks.com/sql/language-manual/functions/str_to_map.html\n",
  "hints_text": "hey @ucasfl  can i work on this\r\n\n> hey @ucasfl can i work on this\r\n\r\nsure.\n@ucasfl hey where will i be adding this function can you give me a little brief about that , will be a great help\r\n\n> @ucasfl hey where will i be adding this function can you give me a little brief about that , will be a great help\r\n\r\nPlease check `src/Functions/IFunction.h` and other functions implementation under directrory `src/Functions/`.\n@Vikrant-Khedkar Hi, any progress?\n@ucasfl is it still open? Can I work on it?\n@ucasfl Since the implementation involves regular expressions, can I use C++ regex or should I implement it on my own or should I do something else?\n> @ucasfl Since the implementation involves regular expressions, can I use C++ regex or should I implement it on my own or should I do something else?\r\n\r\n@kritinsharma It shouldn't  involve regular expressions, I think you can check `base/base/find_symbols.h`.\n@ucasfl Will the delimiters always be single characters?\n> @ucasfl Will the delimiters always be single characters?\r\n\r\nYes.\n@ucasfl I have implemented the function but right now it works only for default values of the delimiters. This is because I have not been able to figure out how to use functions from `base/base/find_symbols.h` for characters (the delimiters) not known at compile time. Can I use function like `memchr()` to do the job ?\n@kritinsharma Thanks a lot! Let's continue the technical discussion about #48561 in #48561 \ud83d\ude04 ",
  "created_at": "2023-05-03T15:48:28Z"
}