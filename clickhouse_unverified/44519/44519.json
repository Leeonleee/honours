{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44519,
  "instance_id": "ClickHouse__ClickHouse-44519",
  "issue_numbers": [
    "44130"
  ],
  "base_commit": "8da98001da6930cbec70ba3934f09a85852946d8",
  "patch": "diff --git a/src/IO/WriteHelpers.h b/src/IO/WriteHelpers.h\nindex 003e5a56958d..8dbfe63be7e6 100644\n--- a/src/IO/WriteHelpers.h\n+++ b/src/IO/WriteHelpers.h\n@@ -1098,6 +1098,25 @@ inline String toString(const T & x)\n     return buf.str();\n }\n \n+template <typename T>\n+inline String toStringWithFinalSeparator(const std::vector<T> & x, const String & final_sep)\n+{\n+    WriteBufferFromOwnString buf;\n+    for (auto it = x.begin(); it != x.end(); ++it)\n+    {\n+        if (it != x.begin())\n+        {\n+            if (std::next(it) == x.end())\n+                writeString(final_sep, buf);\n+            else\n+                writeString(\", \", buf);\n+        }\n+        writeQuoted(*it, buf);\n+    }\n+\n+    return buf.str();\n+}\n+\n inline void writeNullTerminatedString(const String & s, WriteBuffer & buffer)\n {\n     /// c_str is guaranteed to return zero-terminated string\ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex e0da9e77b81f..7a8258b0fd96 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -1,5 +1,6 @@\n #include <algorithm>\n #include <memory>\n+#include <set>\n \n #include <Core/Settings.h>\n #include <Core/NamesAndTypes.h>\n@@ -1243,16 +1244,24 @@ void TreeRewriterResult::collectUsedColumns(const ASTPtr & query, bool is_select\n         if (storage)\n         {\n             std::vector<String> hint_name{};\n+            std::set<String> helper_hint_name{};\n             for (const auto & name : columns_context.requiredColumns())\n             {\n                 auto hints = storage->getHints(name);\n-                hint_name.insert(hint_name.end(), hints.begin(), hints.end());\n+                for (const auto & hint : hints)\n+                {\n+                    // We want to preserve the ordering of the hints\n+                    // (as they are ordered by Levenshtein distance)\n+                    auto [_, inserted] = helper_hint_name.insert(hint);\n+                    if (inserted)\n+                        hint_name.push_back(hint);\n+                }\n             }\n \n             if (!hint_name.empty())\n             {\n                 ss << \", maybe you meant: \";\n-                ss << toString(hint_name);\n+                ss << toStringWithFinalSeparator(hint_name, \" or \");\n             }\n         }\n         else\n",
  "test_patch": "diff --git a/src/IO/tests/gtest_WriteHelpers.cpp b/src/IO/tests/gtest_WriteHelpers.cpp\nnew file mode 100644\nindex 000000000000..b3c7062be580\n--- /dev/null\n+++ b/src/IO/tests/gtest_WriteHelpers.cpp\n@@ -0,0 +1,32 @@\n+#include <gtest/gtest.h>\n+\n+#include <string>\n+#include <vector>\n+#include <IO/WriteHelpers.h>\n+\n+using namespace DB;\n+\n+\n+TEST(WriteHelpersTest, ToStringWithFinalSeparatorTest)\n+{\n+    {\n+        std::vector<std::string> v;\n+        EXPECT_EQ(toStringWithFinalSeparator(v, \" or \"), \"\");\n+    }\n+    {\n+        std::vector<std::string> v = {\"AAA\"};\n+        EXPECT_EQ(toStringWithFinalSeparator(v, \" or \"), \"'AAA'\");\n+    }\n+    {\n+        std::vector<std::string> v = {\"AAA\", \"BBB\"};\n+        EXPECT_EQ(toStringWithFinalSeparator(v, \" or \"), \"'AAA' or 'BBB'\");\n+    }\n+    {\n+        std::vector<std::string> v = {\"AAA\", \"BBB\", \"CCC\"};\n+        EXPECT_EQ(toStringWithFinalSeparator(v, \" or \"), \"'AAA', 'BBB' or 'CCC'\");\n+    }\n+    {\n+        std::vector<std::string> v = {\"AAA\", \"BBB\", \"CCC\", \"DDD\"};\n+        EXPECT_EQ(toStringWithFinalSeparator(v, \" or \"), \"'AAA', 'BBB', 'CCC' or 'DDD'\");\n+    }\n+}\n",
  "problem_statement": "Hints about column names can contain duplicates.\n**Describe the issue**\r\n```\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Missing columns: 'total_byte' while processing query: 'SELECT name, total_bytes FROM system.tables WHERE total_byte > 1000000000 ORDER BY total_bytes DESC', required columns: 'name' 'total_bytes' 'total_byte', maybe you meant: ['name','total_bytes','total_bytes']. (UNKNOWN_IDENTIFIER)\r\n```\r\n\r\nThe name `total_bytes` is duplicated.\r\n\r\nThe message should be written in normal English, like:\r\n\r\n`maybe you meant 'this', 'that' or 'whatever'`\r\ninstead of\r\n`maybe you meant ['this', 'that', 'whatever']`\n",
  "hints_text": "I'm looking at this one. Do we want to retain the ordering of the hints here? For now I assume yes and am preparing a fix.\nMost likely, they are ordered by Levenstein distance, so we need to keep the order.\r\nThank you! :heart: ",
  "created_at": "2022-12-22T17:05:40Z"
}