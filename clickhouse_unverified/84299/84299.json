{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 84299,
  "instance_id": "ClickHouse__ClickHouse-84299",
  "issue_numbers": [
    "81144"
  ],
  "base_commit": "9c57889aad99879a119cd22d5426f35307ddc1a2",
  "patch": "diff --git a/src/Planner/findParallelReplicasQuery.cpp b/src/Planner/findParallelReplicasQuery.cpp\nindex 206f0751e408..f03465651817 100644\n--- a/src/Planner/findParallelReplicasQuery.cpp\n+++ b/src/Planner/findParallelReplicasQuery.cpp\n@@ -116,9 +116,13 @@ std::vector<const QueryNode *> getSupportingParallelReplicasQueries(const IQuery\n                 const auto join_kind = join_node.getKind();\n                 const auto join_strictness = join_node.getStrictness();\n \n+                /// Do not apply for non-leftmost RIGHT JOIN\n+                std::unordered_set<QueryTreeNodeType> supported_table_expression_types = {QueryTreeNodeType::TABLE, QueryTreeNodeType::QUERY, QueryTreeNodeType::UNION};\n+\n                 if (join_kind == JoinKind::Left || (join_kind == JoinKind::Inner && join_strictness == JoinStrictness::All))\n                     query_tree_node = join_node.getLeftTableExpression().get();\n-                else if (join_kind == JoinKind::Right && join_strictness != JoinStrictness::RightAny)\n+                else if (join_kind == JoinKind::Right && join_strictness != JoinStrictness::RightAny\n+                    && supported_table_expression_types.contains(join_node.getLeftTableExpression()->getNodeType()))\n                     query_tree_node = join_node.getRightTableExpression().get();\n                 else\n                     return {};\n@@ -430,7 +434,7 @@ static const TableNode * findTableForParallelReplicas(const IQueryTreeNode * que\n                 const auto join_kind = join_node.getKind();\n                 const auto join_strictness = join_node.getStrictness();\n \n-                if (join_kind == JoinKind::Left || (join_kind == JoinKind::Inner and join_strictness == JoinStrictness::All))\n+                if (join_kind == JoinKind::Left || (join_kind == JoinKind::Inner && join_strictness == JoinStrictness::All))\n                 {\n                     query_tree_node = join_node.getLeftTableExpression().get();\n                     join_nodes.push(join_node.getRightTableExpression().get());\ndiff --git a/src/Storages/buildQueryTreeForShard.cpp b/src/Storages/buildQueryTreeForShard.cpp\nindex ed51eba110a4..ef41c8b9266e 100644\n--- a/src/Storages/buildQueryTreeForShard.cpp\n+++ b/src/Storages/buildQueryTreeForShard.cpp\n@@ -341,8 +341,7 @@ QueryTreeNodePtr getSubqueryFromTableExpression(\n     {\n         subquery_node = join_table_expression;\n     }\n-    else if (\n-        join_table_expression_node_type == QueryTreeNodeType::TABLE || join_table_expression_node_type == QueryTreeNodeType::TABLE_FUNCTION)\n+    else if (join_table_expression_node_type == QueryTreeNodeType::TABLE || join_table_expression_node_type == QueryTreeNodeType::TABLE_FUNCTION)\n     {\n         auto columns_it = column_source_to_columns.find(join_table_expression);\n         const NamesAndTypes & columns = columns_it != column_source_to_columns.end() ? columns_it->second.columns : NamesAndTypes();\n@@ -395,8 +394,7 @@ QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_contex\n                 throw Exception(ErrorCodes::INCOMPATIBLE_TYPE_OF_JOIN, \"Unexpected global join kind: {}\", toString(join_kind));\n             }\n \n-            auto subquery_node\n-                = getSubqueryFromTableExpression(join_table_expression, column_source_to_columns, planner_context->getQueryContext());\n+            auto subquery_node = getSubqueryFromTableExpression(join_table_expression, column_source_to_columns, planner_context->getQueryContext());\n \n             auto temporary_table_expression_node = executeSubqueryNode(subquery_node,\n                 planner_context->getMutableQueryContext(),\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03574_parallel_replicas_last_right_join.reference b/tests/queries/0_stateless/03574_parallel_replicas_last_right_join.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03574_parallel_replicas_last_right_join.sql b/tests/queries/0_stateless/03574_parallel_replicas_last_right_join.sql\nnew file mode 100644\nindex 000000000000..6e32315ac82a\n--- /dev/null\n+++ b/tests/queries/0_stateless/03574_parallel_replicas_last_right_join.sql\n@@ -0,0 +1,28 @@\n+SET allow_experimental_parallel_reading_from_replicas=1;\n+SET max_parallel_replicas=3;\n+SET enable_analyzer=1;\n+SET parallel_replicas_for_non_replicated_merge_tree=1;\n+SET cluster_for_parallel_replicas='parallel_replicas';\n+\n+DROP TABLE IF EXISTS t0;\n+DROP TABLE IF EXISTS t1;\n+DROP TABLE IF EXISTS t2;\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY tuple();\n+INSERT INTO t0 VALUES (1), (2);\n+CREATE TABLE t1 (c0 Int) ENGINE = MergeTree() ORDER BY tuple();\n+INSERT INTO t1 VALUES (2), (3);\n+CREATE TABLE t2 (c0 Int) ENGINE = MergeTree() ORDER BY tuple();\n+INSERT INTO t2 VALUES (3), (4);\n+\n+SELECT * FROM (\n+    SELECT 1 FROM remote('localhost:9000', currentDatabase(), 't0') AS t0\n+    JOIN t1 ON t0.c0 = t1.c0\n+    RIGHT JOIN t2 ON t2.c0 = t1.c0\n+) FORMAT Null;\n+\n+\n+SELECT * FROM (\n+    SELECT 1 FROM remote('localhost:9000', currentDatabase(), 't0') AS t0\n+    JOIN t1 ON TRUE\n+    RIGHT JOIN t2 ON TRUE\n+) FORMAT Null;\n",
  "problem_statement": "Logical error: Expected JOIN table expression to be table, table function, query or union node\n### Describe the bug\n\nEasy to reproduce. Seems related to parallel replicas.\n\n### How to reproduce\n\nWith the provided `users.xml` and `config.xml` configuration files: \n\n[users.txt](https://github.com/user-attachments/files/20549369/users.txt)\n[config.txt](https://github.com/user-attachments/files/20549380/config.txt)\n\nrun:\n\n```sql\nSET allow_experimental_parallel_reading_from_replicas = 1;\nCREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY tuple();\nSELECT * FROM (SELECT 1 FROM remote('localhost:9000', 'default', 't0') AS tx JOIN t0 ty ON TRUE RIGHT JOIN t0 ON TRUE); --Logical error\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n<Fatal> : Logical error: 'Expected JOIN table expression to be table, table function, query or union node. Actual  INNER JOIN ... ON true'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. std::exception::exception[abi:ne190107]() @ 0x0000000018295674\n1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x0000000036c937a0\n2. src/Common/Exception.cpp:110: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000024c8d6cb\n3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000018148516\n4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000001815ca4f\n5. src/Storages/buildQueryTreeForShard.cpp:344: DB::buildQueryTreeForShard(std::shared_ptr<DB::PlannerContext> const&, std::shared_ptr<DB::IQueryTreeNode>, bool) @ 0x0000000031c6f043\n6. src/Planner/findParallelReplicasQuery.cpp:497: DB::buildQueryPlanForParallelReplicas(DB::QueryNode const&, std::shared_ptr<DB::PlannerContext> const&, std::shared_ptr<std::list<DB::StorageLimits, std::allocator<DB::StorageLimits>> const>) @ 0x000000002e4f8355\n7. src/Planner/Planner.cpp:1591: DB::Planner::buildPlanForQueryNode() @ 0x000000002e4d6fe4\n8. src/Planner/Planner.cpp:1369: DB::Planner::buildQueryPlanIfNeeded() @ 0x000000002e4d24c9\n9. src/Planner/Planner.cpp:251: DB::Planner::Planner(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryOptions&) @ 0x000000002e4d0e00\n10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:183: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000002f1c6d76\n11. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:634: std::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::make_unique[abi:ne190107]<DB::InterpreterSelectQueryAnalyzer, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) @ 0x000000002f1cb62e\n12. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:307: std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000002f1cafa5\n13. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000002f106e2f\n14. src/Interpreters/executeQuery.cpp:1454: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x000000002f67a6d8\n15. src/Interpreters/executeQuery.cpp:1714: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002f674e74\n16. src/Server/TCPHandler.cpp:687: DB::TCPHandler::runImpl() @ 0x0000000032b4d4dc\n17. src/Server/TCPHandler.cpp:2677: DB::TCPHandler::run() @ 0x0000000032b7db2e\n18. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000036dc1f22\n19. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000036dc2bf2\n20. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000036d27ff7\n21. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000036d239ee\n22. start_thread @ 0x00000000000a2ef1\n23. __GI___clone3 @ 0x000000000013445c\n```\n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/json.html?REF=master&sha=ce7fad2a929aa9f020bdc046c21d7e6171f51e48&name_0=MasterCI&name_1=Stress%20test%20%28amd_msan%29",
  "created_at": "2025-07-23T13:22:51Z"
}