{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 71593,
  "instance_id": "ClickHouse__ClickHouse-71593",
  "issue_numbers": [
    "71139"
  ],
  "base_commit": "331988a0a97e42f7ba49ae526532a72a0494f300",
  "patch": "diff --git a/src/Processors/Sinks/SinkToStorage.h b/src/Processors/Sinks/SinkToStorage.h\nindex c728fa87b1ea..4bdcb2fe8550 100644\n--- a/src/Processors/Sinks/SinkToStorage.h\n+++ b/src/Processors/Sinks/SinkToStorage.h\n@@ -5,6 +5,8 @@\n namespace DB\n {\n \n+class Context;\n+\n /// Sink which is returned from Storage::write.\n class SinkToStorage : public ExceptionKeepingTransform\n {\n@@ -16,12 +18,14 @@ friend class PartitionedSink;\n \n     const Block & getHeader() const { return inputs.front().getHeader(); }\n     void addTableLock(const TableLockHolder & lock) { table_locks.push_back(lock); }\n+    void addInterpreterContext(std::shared_ptr<const Context> context) { interpreter_context.emplace_back(std::move(context)); }\n \n protected:\n     virtual void consume(Chunk & chunk) = 0;\n \n private:\n     std::vector<TableLockHolder> table_locks;\n+    std::vector<std::shared_ptr<const Context>> interpreter_context;\n \n     void onConsume(Chunk chunk) override;\n     GenerateResult onGenerate() override;\ndiff --git a/src/Storages/StorageMaterializedView.cpp b/src/Storages/StorageMaterializedView.cpp\nindex d047b28e076f..3289ff1ae255 100644\n--- a/src/Storages/StorageMaterializedView.cpp\n+++ b/src/Storages/StorageMaterializedView.cpp\n@@ -382,6 +382,7 @@ void StorageMaterializedView::read(\n         }\n \n         query_plan.addStorageHolder(storage);\n+        query_plan.addInterpreterContext(context);\n         query_plan.addTableLock(std::move(lock));\n     }\n }\n@@ -405,6 +406,7 @@ SinkToStoragePtr StorageMaterializedView::write(const ASTPtr & query, const Stor\n \n     auto sink = storage->write(query, metadata_snapshot, context, async_insert);\n \n+    sink->addInterpreterContext(context);\n     sink->addTableLock(lock);\n     return sink;\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03267_materialized_view_keeps_security_context.reference b/tests/queries/0_stateless/03267_materialized_view_keeps_security_context.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03267_materialized_view_keeps_security_context.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/03267_materialized_view_keeps_security_context.sql b/tests/queries/0_stateless/03267_materialized_view_keeps_security_context.sql\nnew file mode 100644\nindex 000000000000..bb44e4920afa\n--- /dev/null\n+++ b/tests/queries/0_stateless/03267_materialized_view_keeps_security_context.sql\n@@ -0,0 +1,9 @@\n+DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.rview;\n+DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.wview;\n+\n+-- Read from view\n+CREATE MATERIALIZED VIEW rview ENGINE = File(CSV) POPULATE AS SELECT 1 AS c0;\n+SELECT 1 FROM rview;\n+\n+-- Write through view populate\n+CREATE MATERIALIZED VIEW wview ENGINE = Join(ALL, INNER, c0) POPULATE AS SELECT 1 AS c0;\n",
  "problem_statement": "Logical Error: Context has expired\n**Describe the bug**\r\nUsing a File backed table under a materialized view is giving this issue.\r\n\r\n**How to reproduce**\r\nRun:\r\nhttps://fiddle.clickhouse.com/b74c5313-0f44-43ed-887c-a591be430c73\r\n\r\nStack trace:\r\n```\r\nLogical error: 'Context has expired'.\r\nStack trace (when copying this message, always include the lines below):\r\n\r\n0. std::exception::capture() @ 0x00000000192def0b\r\n1. ./contrib/llvm-project/libcxx/include/exception:114: Poco::Exception::Exception(String const&, int) @ 0x0000000038a511c5\r\n2. ./build_docker/./src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000254368ab\r\n3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000001915d296\r\n4. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000019176cef\r\n5. DB::WithContextImpl<std::shared_ptr<DB::Context const>>::getContext() const @ 0x000000001917593a\r\n6. ./build_docker/./src/Storages/StorageFile.cpp:1417: DB::StorageFileSource::generate() @ 0x0000000033c6185e\r\n7. ./build_docker/./src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x000000003513f594\r\n8. ./build_docker/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000003513ebba\r\n9. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x000000003516ece0\r\n10. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:289: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000351599a3\r\n11. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:255: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x000000003515b2e9\r\n12. ./contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000002556d43c\r\n13. ./contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x00000000255754f4\r\n14. ./contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000002556ab8f\r\n15. ./contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x0000000025571d8a\r\n16. ? @ 0x00007ffff7ca1e2e\r\n17. ? @ 0x00007ffff7d33a4c\r\n```\n",
  "hints_text": "Another case with File engine:\r\nhttps://fiddle.clickhouse.com/2561f934-facf-4bb1-9b84-550c6cbefe00\r\nWith Join engine:\r\nhttps://fiddle.clickhouse.com/90ca9548-455a-4126-9f3e-68a80f1877d7\r\n\r\n",
  "created_at": "2024-11-07T15:27:15Z"
}