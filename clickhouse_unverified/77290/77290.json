{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 77290,
  "instance_id": "ClickHouse__ClickHouse-77290",
  "issue_numbers": [
    "77224",
    "77087"
  ],
  "base_commit": "80ec0eab9dbc872d504ec0971ffaec5fe6e8a15d",
  "patch": "diff --git a/base/base/BFloat16.h b/base/base/BFloat16.h\nindex 51cd4ee99907..266f125da7ce 100644\n--- a/base/base/BFloat16.h\n+++ b/base/base/BFloat16.h\n@@ -90,12 +90,12 @@ class BFloat16\n \n     constexpr bool operator==(const BFloat16 & other) const\n     {\n-        return x == other.x;\n+        return Float32(*this) == Float32(other);\n     }\n \n     constexpr bool operator!=(const BFloat16 & other) const\n     {\n-        return x != other.x;\n+        return Float32(*this) != Float32(other);\n     }\n \n     constexpr BFloat16 operator+(const BFloat16 & other) const\ndiff --git a/src/Processors/QueryPlan/PartsSplitter.cpp b/src/Processors/QueryPlan/PartsSplitter.cpp\nindex 8e926aa75274..0287a0d5a651 100644\n--- a/src/Processors/QueryPlan/PartsSplitter.cpp\n+++ b/src/Processors/QueryPlan/PartsSplitter.cpp\n@@ -56,6 +56,7 @@ bool isSafePrimaryDataKeyType(const IDataType & data_type)\n     {\n         case TypeIndex::Float32:\n         case TypeIndex::Float64:\n+        case TypeIndex::BFloat16:\n         case TypeIndex::Nullable:\n         case TypeIndex::ObjectDeprecated:\n         case TypeIndex::Object:\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03367_bfloat16_tuple_final.sql b/tests/queries/0_stateless/03367_bfloat16_tuple_final.sql\nindex f38ee5f65e9c..9101e03f879a 100644\n--- a/tests/queries/0_stateless/03367_bfloat16_tuple_final.sql\n+++ b/tests/queries/0_stateless/03367_bfloat16_tuple_final.sql\n@@ -1,5 +1,3 @@\n---  Tags: disabled\n-\n DROP TABLE IF EXISTS t0;\n CREATE TABLE t0 (c0 Tuple(BFloat16)) ENGINE = SummingMergeTree() ORDER BY (c0);\n INSERT INTO TABLE t0 (c0) VALUES ((-3023198492688736344, )), ((915309.3, )), ((-172.4, )), ((-1555612173, )), ((-794649755, )), ((9.0, )), ((1853837358, )), ((-752.038, )), ((1396433067, )), ((-807596209, )), ((6980930564848204980, )), ((inf, )), ((-334802707, )), ((-9208770324484017588, )), ((1542974135, )), ((8.65110, )), ((3653113333946823132, )), ((-0.7048, )), ((-521.0, )), ((8435282414075074417, )), ((-6292128116417116397, )), ((-1.1, )), ((402684563, )), ((7100378348544520322, )), ((-1.758, )), ((5866537631201593121, )), ((1448199529, )), ((-1012621, )), ((-69567.11, )), ((-976.8334, )), ((-28.35, )), ((-8547.0, )), ((+0.0, )), ((5106142703787698805, )), ((8753460139368692361, )), ((-962398.0, )), ((-1191866042, )), ((-3.53, )), ((5736130821808181266, )), ((1.5, )), ((-2102861541, )), ((-4318589268046737694, )), ((+0.0, )), ((8925059011873647780, )), ((-156.896869, )), ((-2882154502015236978, )), ((-1149877585, )), ((0.48367, )), ((1135103111, )), ((1842836061, )), ((-0.02826, )), ((-3726604190761547609, )), ((-453901554.40, )), ((2888527236479160511, )), ((-7.454, )), ((854116431, )), ((6258347412277750223, )), ((-1632245551464937874, )), ((-3887.35, )), ((8767.14, )), ((-2026982035343500009, )), ((10084.047, )), ((-12.6150, )), ((-4490844512257432684, )), ((80.0, )), ((4003882477879050470, )), ((-8032628616449150130, )), ((nan, )), ((283.11, )), ((-2040930083, )), ((-1660845000, )), ((-46.4, )), ((2431480081340864910, )), ((-8348560450377606243, )), ((-8502763961981072530, )), ((-15.67900, )), ((230036155, )), ((1942939659, )), ((4794.81023, )), ((-1639852492, )), ((-1352376506, )), ((-2.7, )), ((-1.088, )), ((-1286266918863494194, )), ((-5474135460424898823, )), ((-701987997, )), ((-3677164403360004369, )), ((7.9723935, )), ((-6243785367315650126, )), ((1131.4, )), ((13.0, )), ((88967630.99, )), ((-4857582370574805786, )), ((-4288683376502787204, )), ((1299393795189677177, )), ((827.0, )), ((-779228479, )), ((5278875253796893698, )), ((-1.241, )), ((-9.4, )), ((8652067825981452928, )), ((5.13222918, )), ((-2739239481541406400, )), ((-38.29, )), ((-1557979152, )), ((-457695388, )), ((-1959634948, )), ((-463871221, )), ((-7491614107579678858, )), ((7901991093387175754, )), ((-749021875, )), ((-563485266992292414, )), ((7903784173186423016, )), ((6415568457236688716, )), ((0.0, )), ((1041044414, )), ((-inf, )), ((-7.36, )), ((1.834, )), ((56.0, )), ((-0.0, )), ((nan, )), ((1407263544961752054, )), ((-2825675448399084472, )), ((-704.2, )), ((7438299440420973263, )), ((2922890613588943306, )), ((452195848, )), ((-673820791, )), ((9172.0, )), ((-7847859370969306041, )), ((1956615306, )), ((144567.23, )), ((-33.1076, )), ((-53.91200, )), ((-6.75, )), ((-4448835675253045899, )), ((2168295801156564119, )), ((1655170692, )), ((4316746107587705818, )), ((-8269286236795419058, )), ((1727302703, )), ((-214033129, )), ((-7.7, )), ((nan, )), ((-0.7, )), ((+nan, )), ((-4547328351920373605, )), ((nan, )), ((-1487104083, )), ((1658546204, )), ((1151636392, )), ((416290247.08, )), ((-4699301667687142318, )), ((-1.7, )), ((-6323293279463878865, )), ((5855641835618078507, )), ((6000839524613739767, )), ((-1029895710511952591, )), ((486712, )), ((-3730616670168004577, )), ((3010252056832300847, )), ((-1929.84917, )), ((-2253628015236776383, )), ((-1355690956, )), ((1.8, )), ((1255622011, )), ((-7633225657025354393, )), ((-1809222556741732999, )), ((8451912649540627017, )), ((134.521, )), ((-6312210627363870622, )), ((-230600560, )), ((9.45, )), ((-0.8798, )), ((-856.606, )), ((-nan, )), ((1626812583630422427, )), ((116036431, )), ((-2896591025188201292, )), ((2101820842, )), ((2079731433, )), ((-5311080917199036345, )), ((-577360.40844459, )), ((-58257.86, )), ((-6364996476077464518, )), ((9112295453040021646, )), ((8734695561715260733, )), ((-355588047, )), ((1895493280, )), ((349020560979472682, )), ((914602758, )), ((5192612204687053771, )), ((-5241047726046761998, )), ((1099543785538793655, )), ((-311288720, )), ((1633155009, )), ((1613280409437033273, )), ((+nan, )), ((-10.4, )), ((-68033.01, )), ((-8728247972026697820, )), ((7563764808015298425, )), ((-0.860, )), ((-2.0, )), ((355270636, )), ((181943082, )), ((2077491986200197340, )), ((-5196084623766115387, )), ((-0.1280, )), ((18.24323, )), ((1439645894, )), ((-3.0, )), ((+nan, )), ((-4920802313749507761, )), ((9.581223, )), ((-4977.639, )), ((21.6613, )), ((-1281671910, )), ((-15.4, )), ((-5066115181153139762, )), ((1831511780, )), ((3616962447275671394, )), ((-5035837218861299864, )), ((917383330, )), ((+inf, )), ((223894.264, )), ((-96.275444, )), ((-nan, )), ((-547606170, )), ((-261714371, )), ((1734489497, )), ((1760637531924834025, )), ((-2130171631, )), ((99.40196, )), ((3106130344652597122, )), ((9084751387559563274, )), ((-9.2, )), ((772.20502704, )), ((5987185449054785806, )), ((+nan, )), ((-461241595, )), ((869648491758383603, )), ((9.4, )), ((7760123765394357048, )), ((-979023095, )), ((-682791909, )), ((0.0, )), ((-2.84, )), ((-1887928434, )), ((-8.602, )), ((43.8, )), ((-740133382, )), ((-1628407200, )), ((nan, )), ((4048950104344667845, )), ((7.923, )), ((-2290446205925660340, )), ((1817370121, )), ((700.0, )), ((1683434407, )), ((8994999237835107052, )), ((8158939128335705548, )), ((-6779280.5, )), ((520417636, )), ((4856231070881691400, )), ((+inf, )), ((84333.5, )), ((1814647746, )), ((-1783864249, )), ((2035802471, )), ((70752.0, )), ((1124938650, )), ((5737532713519861979, )), ((1196647506, )), ((-4146469507106105938, )), ((7869998886095964339, )), ((312457241, )), ((-nan, )), ((3663885939535420359, )), ((-29385.769192130, )), ((4217936517369282398, )), ((67.9, )), ((-1981743187, )), ((489740628, )), ((6528054616798929895, )), ((-5516525484994056924, )), ((3.6, )), ((-1291051489, )), ((791837371, )), ((2559503485226905057, )), ((423224585269353485, ));\ndiff --git a/tests/queries/0_stateless/03371_bfloat16_special_values.reference b/tests/queries/0_stateless/03371_bfloat16_special_values.reference\nnew file mode 100644\nindex 000000000000..9f1b2cc2fa62\n--- /dev/null\n+++ b/tests/queries/0_stateless/03371_bfloat16_special_values.reference\n@@ -0,0 +1,33 @@\n+1\t1\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+-0\t-0\n+0\t0\n+nan\tnan\n+nan\tnan\n+nan\tnan\n+nan\tnan\n+nan\tnan\n+nan\tnan\n+nan\tnan\n+nan\tnan\n+nan\tnan\n+nan\tnan\n+1\t1\n+inf\tinf\n+nan\tnan\n+inf\tinf\n+nan\tnan\n+nan\tnan\n+1\t1\n+inf\tinf\n+-inf\t-inf\n+inf\tinf\n+0\t0\n+nan\tnan\n+(-0)\n+(nan)\n+-0\n+nan\ndiff --git a/tests/queries/0_stateless/03371_bfloat16_special_values.sql b/tests/queries/0_stateless/03371_bfloat16_special_values.sql\nnew file mode 100644\nindex 000000000000..7218c5674bdb\n--- /dev/null\n+++ b/tests/queries/0_stateless/03371_bfloat16_special_values.sql\n@@ -0,0 +1,44 @@\n+-- Check that Float32 and BFloat16 return the same values for calculations with special values\n+SELECT toFloat32(0.0) == toFloat32(-0.0),   toBFloat16(0.0) == toBFloat16(-0.0);\n+SELECT toFloat32(0.0) != toFloat32(-0.0),   toBFloat16(0.0) != toBFloat16(-0.0);\n+SELECT toFloat32(0.0) > toFloat32(-0.0),    toBFloat16(0.0) > toBFloat16(-0.0);\n+SELECT toFloat32(0.0) < toFloat32(-0.0),    toBFloat16(0.0) < toBFloat16(-0.0);\n+SELECT toFloat32(0.0) + toFloat32(-0.0),    toBFloat16(0.0) + toBFloat16(-0.0);\n+SELECT toFloat32(-0.0) + toFloat32(-0.0),   toBFloat16(-0.0) + toBFloat16(-0.0);\n+SELECT toFloat32(NaN) == toFloat32(NaN),    toBFloat16(NaN) == toBFloat16(NaN);\n+SELECT toFloat32(NaN) + toFloat32(NaN),     toBFloat16(NaN) + toBFloat16(NaN);\n+SELECT toFloat32(NaN) - toFloat32(NaN),     toBFloat16(NaN) - toBFloat16(NaN);\n+SELECT toFloat32(NaN) * toFloat32(NaN),     toBFloat16(NaN) * toBFloat16(NaN);\n+SELECT toFloat32(NaN) / toFloat32(NaN),     toBFloat16(NaN) / toBFloat16(NaN);\n+SELECT toFloat32(NaN) % toFloat32(NaN),     toBFloat16(NaN) % toBFloat16(NaN);\n+SELECT toFloat32(5.5) + toFloat32(NaN),     toBFloat16(5.5) + toBFloat16(NaN);\n+SELECT toFloat32(5.5) - toFloat32(NaN),     toBFloat16(5.5) - toBFloat16(NaN);\n+SELECT toFloat32(5.5) * toFloat32(NaN),     toBFloat16(5.5) * toBFloat16(NaN);\n+SELECT toFloat32(5.5) / toFloat32(NaN),     toBFloat16(5.5) / toBFloat16(NaN);\n+SELECT toFloat32(5.5) % toFloat32(NaN),     toBFloat16(5.5) % toBFloat16(NaN);\n+SELECT toFloat32(Inf) == toFloat32(Inf),    toBFloat16(Inf) == toBFloat16(Inf);\n+SELECT toFloat32(Inf) + toFloat32(Inf),     toBFloat16(Inf) + toBFloat16(Inf);\n+SELECT toFloat32(Inf) - toFloat32(Inf),     toBFloat16(Inf) - toBFloat16(Inf);\n+SELECT toFloat32(Inf) * toFloat32(Inf),     toBFloat16(Inf) * toBFloat16(Inf);\n+SELECT toFloat32(Inf) / toFloat32(Inf),     toBFloat16(Inf) / toBFloat16(Inf);\n+SELECT toFloat32(Inf) % toFloat32(Inf),     toBFloat16(Inf) % toBFloat16(Inf);\n+SELECT toFloat32(-Inf) == toFloat32(-Inf),  toBFloat16(-Inf) == toBFloat16(-Inf);\n+SELECT toFloat32(5.5) + toFloat32(Inf),     toBFloat16(5.5) + toBFloat16(Inf);\n+SELECT toFloat32(5.5) - toFloat32(Inf),     toBFloat16(5.5) - toBFloat16(Inf);\n+SELECT toFloat32(5.5) * toFloat32(Inf),     toBFloat16(5.5) * toBFloat16(Inf);\n+SELECT toFloat32(5.5) / toFloat32(Inf),     toBFloat16(5.5) / toBFloat16(Inf);\n+SELECT toFloat32(5.5) % toFloat32(Inf),     toBFloat16(5.5) % toBFloat16(Inf);\n+\n+-- Test for Bug 77087\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab (c0 Tuple(BFloat16)) ENGINE = SummingMergeTree() ORDER BY (c0) SETTINGS ratio_of_defaults_for_sparse_serialization = 1.0; -- Disable sparse serialization, otherwise the test becomes flaky\n+INSERT INTO TABLE tab (c0) VALUES ((-0.0, )), ((nan, )), ((0.0, ));\n+SELECT c0 FROM tab FINAL;\n+DROP TABLE tab;\n+\n+-- Test for Bug 77224\n+CREATE TABLE tab (c0 BFloat16 PRIMARY KEY) ENGINE = SummingMergeTree() SETTINGS ratio_of_defaults_for_sparse_serialization = 1.0; -- Disable sparse serialization, otherwise the test becomes flaky\n+INSERT INTO TABLE tab (c0) VALUES (nan), (-0.0);\n+INSERT INTO TABLE tab (c0) VALUES (0.0), (nan);\n+SELECT c0 FROM tab FINAL;\n+DROP TABLE tab;\n",
  "problem_statement": "BFloat16 summing merge assertion\n### Describe the bug\n\nEasy to reproduce, run the following statements on a debug build.\n\n### How to reproduce\n\nRun:\n\n```sql\nSET allow_experimental_bfloat16_type = 1;\nCREATE TABLE t0 (c0 BFloat16 PRIMARY KEY) ENGINE = SummingMergeTree();\nINSERT INTO TABLE t0 (c0) VALUES (nan);\nINSERT INTO TABLE t0 (c0) VALUES (nan);\nSELECT c0 FROM t0 FINAL;\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n```\n<Fatal> : Logical error: 'part_index_start_to_range.contains(current_part_range_index)'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x000000000f84a252\n1. src/Common/Exception.cpp:53: DB::abortOnFailedAssertion(String const&) @ 0x000000000f7c2b35\n2. src/Processors/QueryPlan/PartsSplitter.cpp:603: (anonymous namespace)::splitPartsRanges(DB::RangesInDataParts, bool, std::shared_ptr<Poco::Logger> const&) @ 0x00000000169a6be9\n3. src/Processors/QueryPlan/PartsSplitter.cpp:991: DB::splitPartsWithRangesByPrimaryKey(DB::KeyDescription const&, DB::KeyDescription const&, std::shared_ptr<DB::ExpressionActions>, DB::RangesInDataParts, unsigned long, std::shared_ptr<DB::Context const>, std::function<DB::Pipe (DB::RangesInDataParts)>&&, bool, bool) @ 0x00000000169a1ae0\n4. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1381: DB::ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(DB::RangesInDataParts&&, unsigned long, std::vector<String, std::allocator<String>> const&, std::vector<String, std::allocator<String>> const&, std::optional<DB::ActionsDAG>&) @ 0x000000001697106c\n5. src/Processors/QueryPlan/ReadFromMergeTree.cpp:2044: DB::ReadFromMergeTree::spreadMarkRanges(DB::RangesInDataParts&&, unsigned long, DB::ReadFromMergeTree::AnalysisResult&, std::optional<DB::ActionsDAG>&) @ 0x000000001697b7df\n6. src/Processors/QueryPlan/ReadFromMergeTree.cpp:2151: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x000000001697ce5f\n7. src/Processors/QueryPlan/ISourceStep.cpp:20: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x0000000016924330\n8. src/Processors/QueryPlan/QueryPlan.cpp:202: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000001695194f\n9. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:275: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x00000000144dd097\n10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:242: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x00000000144dce1e\n11. src/Interpreters/executeQuery.cpp:1458: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000147f0349\n12. src/Interpreters/executeQuery.cpp:1625: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000147ebdeb\n13. src/Server/TCPHandler.cpp:664: DB::TCPHandler::runImpl() @ 0x0000000016447d41\n14. src/Server/TCPHandler.cpp:2629: DB::TCPHandler::run() @ 0x000000001645feb9\n15. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001a74eac7\n16. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001a74ef9e\n17. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001a6fc612\n18. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001a6fa24f\n19. ? @ 0x00007ffff7ca1e2e\n20. ? @ 0x00007ffff7d33a4c\n```\n`03367_bfloat16_tuple_final` is flaky\nI noticed today a sporadic failure of 03367_bfloat16_tuple_final.sql after #77000 added the test:\n\nhttps://d1k2gkhrlfqv31.cloudfront.net/clickhouse-test-reports-private/json.html?REF=master&sha=ba3adc7c0bb172e3413b3da114ef0b5e778179e4&name_0=MasterCI&name_1=Stateless+tests+%28debug%2C+distributed+cache%2C+s3+storage%29&name_2=03367_bfloat16_tuple_final\n\n```\n2025-03-03 16:24:29 Reason: result differs with reference:\n2025-03-03 16:24:29 --- /repo/tests/queries/0_stateless/03367_bfloat16_tuple_final.reference 2025-03-03 16:17:57.781727094 +0100\n2025-03-03 16:24:29 +++ /repo/tests/queries/0_stateless/03367_bfloat16_tuple_final.stdout 2025-03-03 16:24:29.921444124 +0100\n2025-03-03 16:24:29 @@ -126,21 +126,21 @@\n2025-03-03 16:24:29 (-1.6953125)\n2025-03-03 16:24:29 (-1.234375)\n2025-03-03 16:24:29 (-1.09375)\n2025-03-03 16:24:29 (-1.0859375)\n2025-03-03 16:24:29 (-0.87890625)\n2025-03-03 16:24:29 (-0.859375)\n2025-03-03 16:24:29 (-0.703125)\n2025-03-03 16:24:29 (-0.69921875)\n2025-03-03 16:24:29 (-0.12792969)\n2025-03-03 16:24:29 (-0.028198242)\n2025-03-03 16:24:29 -(0)\n2025-03-03 16:24:29 +(-0)\n2025-03-03 16:24:29 (0.48242188)\n2025-03-03 16:24:29 (1.5)\n2025-03-03 16:24:29 (1.796875)\n2025-03-03 16:24:29 (1.828125)\n2025-03-03 16:24:29 (3.59375)\n2025-03-03 16:24:29 (5.125)\n2025-03-03 16:24:29 (7.90625)\n2025-03-03 16:24:29 (7.96875)\n2025-03-03 16:24:29 (8.625)\n2025-03-03 16:24:29 (9)\n2025-03-03 16:24:29\n2025-03-03 16:24:29\n2025-03-03 16:24:29\n2025-03-03 16:24:29 MergeTree settings used in test: --ratio_of_defaults_for_sparse_serialization 1.0 --prefer_fetch_merged_part_size_threshold 1527210177 --vertical_merge_algorithm_min_rows_to_activate 1 --vertical_merge_algorithm_min_columns_to_activate 100 --allow_vertical_merges_from_compact_to_wide_parts 0 --min_merge_bytes_to_use_direct_io 10737418240 --index_granularity_bytes 22132302 --merge_max_block_size 8629 --index_granularity 24417 --min_bytes_for_wide_part 0 --marks_compress_block_size 40102 --primary_key_compress_block_size 51484 --replace_long_file_name_to_hash 0 --max_file_name_length 0 --min_bytes_for_full_part_storage 0 --compact_parts_max_bytes_to_buffer 188046474 --compact_parts_max_granules_to_buffer 113 --compact_parts_merge_max_bytes_to_prefetch_part 5307317 --cache_populated_by_fetch 1 --concurrent_part_removal_threshold 100 --old_parts_lifetime 10 --prewarm_mark_cache 1 --use_const_adaptive_granularity 0 --enable_index_granularity_compression 1 --enable_block_number_column 1 --enable_block_offset_column 0 --use_primary_key_cache 0 --prewarm_primary_key_cache 0\n2025-03-03 16:24:29\n2025-03-03 16:24:29 Database: test_gtmjqn7e\n```\n\nThe failure is independent of merge tree settings. A smaller repro is:\n\n```sql\nDROP TABLE IF EXISTS t0;\nCREATE TABLE t0 (c0 Tuple(BFloat16)) ENGINE = SummingMergeTree() ORDER BY (c0);\nINSERT INTO TABLE t0 (c0) VALUES ((+0.0, )), ((nan, )), ((-0.0, ));\nSELECT c0 FROM t0 FINAL;\nDROP TABLE t0;\n```\n\nTo reproduce, replace the test with the repro, then update expected results, then run the test in a loop (`--test-runs 10` will do). Symptoms are like in #75669 (`nan` is present).\n",
  "hints_text": "This could be related to https://github.com/ClickHouse/ClickHouse/issues/77087\nDisabled in https://github.com/ClickHouse/ClickHouse/pull/77130\nhttps://github.com/ClickHouse/ClickHouse/issues/77131\n\n```sql\n$ select toFloat32(0.0) == toFloat32(-0.0);\n   \u250c\u2500equals(toFlo\u22efoat32(-0.))\u2500\u2510\n1. \u2502                        1 \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n$ select toBFloat16(0.0) == toBFloat16(-0.0);\n   \u250c\u2500equals(toBFl\u22efoat16(-0.))\u2500\u2510\n1. \u2502                        0 \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\nNegative zero and positive zero being equal does have interesting implications when streams are merged/aggregated and which zero is emitted first . The `BFloat16` test is showing intermittent failures only in debug build.  Fixing the `operator==` for `BFloat16` should result in stability (for this testcase)\n\nFor `Float32` -\n\n```sql\nDROP TABLE IF EXISTS t0;\nCREATE TABLE t0 (c0 Tuple(Float32)) ENGINE = SummingMergeTree() ORDER BY (c0);\nINSERT INTO TABLE t0 (c0) VALUES ((0.0, )), ((nan, )), ((-0.0, )), ((6.0, )), ((6.0, ));\nSELECT c0 FROM t0 FINAL;\n\n   \u250c\u2500c0\u2500\u2500\u2500\u2500\u2510\n1. \u2502 (0)   \u2502\n2. \u2502 (6)   \u2502\n3. \u2502 (nan) \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\nand if `-0` is inserted first -\n\n```sql\nDROP TABLE IF EXISTS t0;\nCREATE TABLE t0 (c0 Tuple(Float32)) ENGINE = SummingMergeTree() ORDER BY (c0);\nINSERT INTO TABLE t0 (c0) VALUES ((-0.0, )), ((nan, )), ((0.0, )), ((6.0, )), ((6.0, ));\nSELECT c0 FROM t0;\nSELECT c0 FROM t0 FINAL;\nDROP TABLE t0;\n\n   \u250c\u2500c0\u2500\u2500\u2500\u2500\u2510\n1. \u2502 (-0)  \u2502\n2. \u2502 (6)   \u2502\n3. \u2502 (nan) \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n@shankar-iyer While at it, could you please also check that BFloat16 exposes the same behavior regarding addition, subtraction, multiplication, division, modulo of the other special values `nan` and `inf` as `Float32` (between special values but also between a special value and a regular value)?\nTesting the fix. I am concluding that the flakiness only in debug build is due to some code generation specifics in `pdqsort()` in debug compile.",
  "created_at": "2025-03-07T08:48:01Z",
  "modified_files": [
    "base/base/BFloat16.h",
    "src/Processors/QueryPlan/PartsSplitter.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/03367_bfloat16_tuple_final.sql",
    "b/tests/queries/0_stateless/03371_bfloat16_special_values.reference",
    "b/tests/queries/0_stateless/03371_bfloat16_special_values.sql"
  ]
}