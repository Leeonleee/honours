{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42303,
  "instance_id": "ClickHouse__ClickHouse-42303",
  "issue_numbers": [
    "42264"
  ],
  "base_commit": "c88dcba36e0e036f7a1208a8aea9cd366b6a8653",
  "patch": "diff --git a/src/Storages/System/StorageSystemDetachedParts.cpp b/src/Storages/System/StorageSystemDetachedParts.cpp\nindex d094fefddcb0..1828c5932ad6 100644\n--- a/src/Storages/System/StorageSystemDetachedParts.cpp\n+++ b/src/Storages/System/StorageSystemDetachedParts.cpp\n@@ -4,6 +4,7 @@\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeNullable.h>\n #include <Storages/IStorage.h>\n+#include <Storages/MergeTree/DataPartStorageOnDisk.h>\n #include <Storages/System/StorageSystemPartsBase.h>\n #include <Processors/Sources/SourceFromSingleChunk.h>\n #include <QueryPipeline/Pipe.h>\n@@ -16,18 +17,47 @@ StorageSystemDetachedParts::StorageSystemDetachedParts(const StorageID & table_i\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(ColumnsDescription{{\n-        {\"database\", std::make_shared<DataTypeString>()},\n-        {\"table\", std::make_shared<DataTypeString>()},\n-        {\"partition_id\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},\n-        {\"name\", std::make_shared<DataTypeString>()},\n-        {\"disk\", std::make_shared<DataTypeString>()},\n-        {\"reason\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},\n+        {\"database\",         std::make_shared<DataTypeString>()},\n+        {\"table\",            std::make_shared<DataTypeString>()},\n+        {\"partition_id\",     std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},\n+        {\"name\",             std::make_shared<DataTypeString>()},\n+        {\"bytes_on_disk\",    std::make_shared<DataTypeUInt64>()},\n+        {\"disk\",             std::make_shared<DataTypeString>()},\n+        {\"path\",             std::make_shared<DataTypeString>()},\n+        {\"reason\",           std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},\n         {\"min_block_number\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeInt64>())},\n         {\"max_block_number\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeInt64>())},\n-        {\"level\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt32>())}\n+        {\"level\",            std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt32>())}\n     }});\n     setInMemoryMetadata(storage_metadata);\n }\n+static void calculateTotalSizeOnDiskImpl(const DiskPtr & disk, const String & from, UInt64 & total_size)\n+{\n+    /// Files or directories of detached part may not exist. Only count the size of existing files.\n+    if (disk->isFile(from))\n+    {\n+        total_size += disk->getFileSize(from);\n+    }\n+    else\n+    {\n+        for (auto it = disk->iterateDirectory(from); it->isValid(); it->next())\n+            calculateTotalSizeOnDiskImpl(disk, fs::path(from) / it->name(), total_size);\n+    }\n+}\n+\n+static UInt64 calculateTotalSizeOnDisk(const DiskPtr & disk, const String & from)\n+{\n+    UInt64 total_size = 0;\n+    try\n+    {\n+        calculateTotalSizeOnDiskImpl(disk, from, total_size);\n+    }\n+    catch (...)\n+    {\n+        tryLogCurrentException(__PRETTY_FUNCTION__);\n+    }\n+    return total_size;\n+}\n \n Pipe StorageSystemDetachedParts::read(\n     const Names & /* column_names */,\n@@ -50,11 +80,14 @@ Pipe StorageSystemDetachedParts::read(\n         for (const auto & p : parts)\n         {\n             size_t i = 0;\n+            String detached_part_path = fs::path(MergeTreeData::DETACHED_DIR_NAME) / p.dir_name;\n             new_columns[i++]->insert(info.database);\n             new_columns[i++]->insert(info.table);\n             new_columns[i++]->insert(p.valid_name ? p.partition_id : Field());\n             new_columns[i++]->insert(p.dir_name);\n+            new_columns[i++]->insert(calculateTotalSizeOnDisk(p.disk, fs::path(info.data->getRelativeDataPath()) / detached_part_path));\n             new_columns[i++]->insert(p.disk->getName());\n+            new_columns[i++]->insert((fs::path(info.data->getFullPathOnDisk(p.disk)) / detached_part_path).string());\n             new_columns[i++]->insert(p.valid_name ? p.prefix : Field());\n             new_columns[i++]->insert(p.valid_name ? p.min_block : Field());\n             new_columns[i++]->insert(p.valid_name ? p.max_block : Field());\n",
  "test_patch": "diff --git a/tests/integration/test_partition/test.py b/tests/integration/test_partition/test.py\nindex 320209b5d7ec..c53bc5a9d0d0 100644\n--- a/tests/integration/test_partition/test.py\n+++ b/tests/integration/test_partition/test.py\n@@ -385,7 +385,7 @@ def test_system_detached_parts(drop_detached_parts_table):\n         )\n \n     res = q(\n-        \"select * from system.detached_parts where table like 'sdp_%' order by table, name\"\n+        \"select system.detached_parts.* except (bytes_on_disk, `path`) from system.detached_parts where table like 'sdp_%' order by table, name\"\n     )\n     assert (\n         res == \"default\\tsdp_0\\tall\\tall_1_1_0\\tdefault\\t\\t1\\t1\\t0\\n\"\ndiff --git a/tests/queries/0_stateless/00502_custom_partitioning_local.sql b/tests/queries/0_stateless/00502_custom_partitioning_local.sql\nindex c85a978af689..3d5f71429fe1 100644\n--- a/tests/queries/0_stateless/00502_custom_partitioning_local.sql\n+++ b/tests/queries/0_stateless/00502_custom_partitioning_local.sql\n@@ -18,7 +18,7 @@ ALTER TABLE not_partitioned DETACH PARTITION ID 'all';\n SELECT 'Sum after DETACH PARTITION:';\n SELECT sum(x) FROM not_partitioned;\n SELECT 'system.detached_parts after DETACH PARTITION:';\n-SELECT system.detached_parts.* EXCEPT disk FROM system.detached_parts WHERE database = currentDatabase() AND table = 'not_partitioned';\n+SELECT system.detached_parts.* EXCEPT (bytes_on_disk, `path`, disk) FROM system.detached_parts WHERE database = currentDatabase() AND table = 'not_partitioned';\n \n DROP TABLE not_partitioned;\n \ndiff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference\nindex ad27b86c6f5b..4d705e4b0d10 100644\n--- a/tests/queries/0_stateless/02117_show_create_table_system.reference\n+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference\n@@ -139,7 +139,9 @@ CREATE TABLE system.detached_parts\n     `table` String,\n     `partition_id` Nullable(String),\n     `name` String,\n+    `bytes_on_disk` UInt64,\n     `disk` String,\n+    `path` String,\n     `reason` Nullable(String),\n     `min_block_number` Nullable(Int64),\n     `max_block_number` Nullable(Int64),\n",
  "problem_statement": "Size of parts in system.detached_parts\nRight now size of data parts is available only for non-detached parts in `system.parts`, but `system.detached_parts` lacks this information. It will be useful for analyzing disk space usage. \r\n\n",
  "hints_text": "",
  "created_at": "2022-10-14T03:50:24Z"
}