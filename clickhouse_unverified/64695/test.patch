diff --git a/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/src/Storages/tests/gtest_transform_query_for_external_database.cpp
index 7e2d393c3d11..6765e112bb91 100644
--- a/src/Storages/tests/gtest_transform_query_for_external_database.cpp
+++ b/src/Storages/tests/gtest_transform_query_for_external_database.cpp
@@ -368,17 +368,21 @@ TEST(TransformQueryForExternalDatabase, Null)
 
     check(state, 1, {"field"},
           "SELECT field FROM table WHERE field IS NULL",
-          R"(SELECT "field" FROM "test"."table" WHERE "field" IS NULL)");
+          R"(SELECT "field" FROM "test"."table" WHERE "field" IS NULL)",
+          R"(SELECT "field" FROM "test"."table" WHERE 1 = 0)");
     check(state, 1, {"field"},
           "SELECT field FROM table WHERE field IS NOT NULL",
-          R"(SELECT "field" FROM "test"."table" WHERE "field" IS NOT NULL)");
+          R"(SELECT "field" FROM "test"."table" WHERE "field" IS NOT NULL)",
+          R"(SELECT "field" FROM "test"."table")");
 
     check(state, 1, {"field"},
           "SELECT field FROM table WHERE isNull(field)",
-          R"(SELECT "field" FROM "test"."table" WHERE "field" IS NULL)");
+          R"(SELECT "field" FROM "test"."table" WHERE "field" IS NULL)",
+          R"(SELECT "field" FROM "test"."table" WHERE 1 = 0)");
     check(state, 1, {"field"},
           "SELECT field FROM table WHERE isNotNull(field)",
-          R"(SELECT "field" FROM "test"."table" WHERE "field" IS NOT NULL)");
+          R"(SELECT "field" FROM "test"."table" WHERE "field" IS NOT NULL)",
+          R"(SELECT "field" FROM "test"."table")");
 }
 
 TEST(TransformQueryForExternalDatabase, ToDate)
diff --git a/tests/queries/0_stateless/01822_union_and_constans_error.reference b/tests/queries/0_stateless/01822_union_and_constans_error.reference
index d00491fd7e5b..e69de29bb2d1 100644
--- a/tests/queries/0_stateless/01822_union_and_constans_error.reference
+++ b/tests/queries/0_stateless/01822_union_and_constans_error.reference
@@ -1,1 +0,0 @@
-1
diff --git a/tests/queries/0_stateless/01822_union_and_constans_error.sql b/tests/queries/0_stateless/01822_union_and_constans_error.sql
index 38b7df700cd9..9017e8769eb7 100644
--- a/tests/queries/0_stateless/01822_union_and_constans_error.sql
+++ b/tests/queries/0_stateless/01822_union_and_constans_error.sql
@@ -15,6 +15,6 @@ SELECT isNull(t0.c0) OR COUNT('
?pVa')
 FROM t0
 GROUP BY t0.c0
 HAVING isNull(isNull(t0.c0))
-SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;
+SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0 format Null;
 
 drop table if exists t0;
diff --git a/tests/queries/0_stateless/02892_orc_filter_pushdown.reference b/tests/queries/0_stateless/02892_orc_filter_pushdown.reference
index e6c2e9b2b575..903d42bf4928 100644
--- a/tests/queries/0_stateless/02892_orc_filter_pushdown.reference
+++ b/tests/queries/0_stateless/02892_orc_filter_pushdown.reference
@@ -206,7 +206,7 @@ select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative
 select count(), min(negative_or_null), max(negative_or_null) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where (negative_or_null < -500);
 596	-1099	-501
 select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where indexHint(negative_or_null is null);
-1000	499500
+0	0
 select count(), min(negative_or_null), max(negative_or_null) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where (negative_or_null is null);
 0	0	0
 select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where indexHint(negative_or_null in (0, -1, -10, -100, -1000));
diff --git a/tests/queries/0_stateless/03164_early_constant_folding_analyzer.reference b/tests/queries/0_stateless/03164_early_constant_folding_analyzer.reference
new file mode 100644
index 000000000000..227b118bb7fa
--- /dev/null
+++ b/tests/queries/0_stateless/03164_early_constant_folding_analyzer.reference
@@ -0,0 +1,1 @@
+ReadFromPreparedSource (Optimized trivial count)
diff --git a/tests/queries/0_stateless/03164_early_constant_folding_analyzer.sql b/tests/queries/0_stateless/03164_early_constant_folding_analyzer.sql
new file mode 100644
index 000000000000..dbffbc1af719
--- /dev/null
+++ b/tests/queries/0_stateless/03164_early_constant_folding_analyzer.sql
@@ -0,0 +1,30 @@
+CREATE TABLE checks
+(
+    `pull_request_number` UInt32,
+    `commit_sha` LowCardinality(String),
+    `check_name` LowCardinality(String),
+    `check_status` LowCardinality(String),
+    `check_duration_ms` UInt64,
+    `check_start_time` DateTime,
+    `test_name` LowCardinality(String),
+    `test_status` LowCardinality(String),
+    `test_duration_ms` UInt64,
+    `report_url` String,
+    `pull_request_url` String,
+    `commit_url` String,
+    `task_url` String,
+    `base_ref` String,
+    `base_repo` String,
+    `head_ref` String,
+    `head_repo` String,
+    `test_context_raw` String,
+    `instance_type` LowCardinality(String),
+    `instance_id` String,
+    `date` Date MATERIALIZED toDate(check_start_time)
+)
+ENGINE = MergeTree ORDER BY (date, pull_request_number, commit_sha, check_name, test_name, check_start_time);
+
+insert into checks select * from generateRandom() limit 1;
+
+
+select trimLeft(explain) from (explain SELECT count(1) FROM checks WHERE test_name IS NOT NULL) where explain like '%ReadFromPreparedSource%' SETTINGS allow_experimental_analyzer = 1, allow_experimental_parallel_reading_from_replicas = 0;
