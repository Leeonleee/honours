{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64695,
  "instance_id": "ClickHouse__ClickHouse-64695",
  "issue_numbers": [
    "64575"
  ],
  "base_commit": "305bc7a910b6de57a566f12b83f75ff7a871ff14",
  "patch": "diff --git a/src/DataTypes/DataTypeNullable.cpp b/src/DataTypes/DataTypeNullable.cpp\nindex db252659d41b..0ecb5370a7dc 100644\n--- a/src/DataTypes/DataTypeNullable.cpp\n+++ b/src/DataTypes/DataTypeNullable.cpp\n@@ -3,6 +3,7 @@\n #include <DataTypes/DataTypeFactory.h>\n #include <DataTypes/Serializations/SerializationNullable.h>\n #include <DataTypes/DataTypeLowCardinality.h>\n+#include <DataTypes/DataTypeVariant.h>\n #include <Columns/ColumnNullable.h>\n #include <Columns/ColumnConst.h>\n #include <Core/Field.h>\n@@ -174,4 +175,9 @@ DataTypePtr removeNullableOrLowCardinalityNullable(const DataTypePtr & type)\n \n }\n \n+bool canContainNull(const IDataType & type)\n+{\n+    return type.isNullable() || type.isLowCardinalityNullable() || isDynamic(type) || isVariant(type);\n+}\n+\n }\ndiff --git a/src/DataTypes/DataTypeNullable.h b/src/DataTypes/DataTypeNullable.h\nindex 71abe48c1518..7a8a54fdf3a5 100644\n--- a/src/DataTypes/DataTypeNullable.h\n+++ b/src/DataTypes/DataTypeNullable.h\n@@ -62,4 +62,6 @@ DataTypePtr makeNullableOrLowCardinalityNullableSafe(const DataTypePtr & type);\n /// Nullable(T) -> T, LowCardinality(Nullable(T)) -> T\n DataTypePtr removeNullableOrLowCardinalityNullable(const DataTypePtr & type);\n \n+bool canContainNull(const IDataType & type);\n+\n }\ndiff --git a/src/Functions/isNotNull.cpp b/src/Functions/isNotNull.cpp\nindex ea95a5c2b1c8..a10e7ebd40c5 100644\n--- a/src/Functions/isNotNull.cpp\n+++ b/src/Functions/isNotNull.cpp\n@@ -29,6 +29,18 @@ class FunctionIsNotNull : public IFunction\n         return name;\n     }\n \n+    ColumnPtr getConstantResultForNonConstArguments(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type) const override\n+    {\n+        const ColumnWithTypeAndName & elem = arguments[0];\n+        if (elem.type->onlyNull())\n+            return result_type->createColumnConst(1, UInt8(0));\n+\n+        if (canContainNull(*elem.type))\n+            return nullptr;\n+\n+        return result_type->createColumnConst(1, UInt8(1));\n+    }\n+\n     size_t getNumberOfArguments() const override { return 1; }\n     bool useDefaultImplementationForNulls() const override { return false; }\n     bool useDefaultImplementationForConstants() const override { return true; }\ndiff --git a/src/Functions/isNull.cpp b/src/Functions/isNull.cpp\nindex a98ff2ab8e84..95d659b103b3 100644\n--- a/src/Functions/isNull.cpp\n+++ b/src/Functions/isNull.cpp\n@@ -31,6 +31,18 @@ class FunctionIsNull : public IFunction\n         return name;\n     }\n \n+    ColumnPtr getConstantResultForNonConstArguments(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type) const override\n+    {\n+        const ColumnWithTypeAndName & elem = arguments[0];\n+        if (elem.type->onlyNull())\n+            return result_type->createColumnConst(1, UInt8(1));\n+\n+        if (canContainNull(*elem.type))\n+            return nullptr;\n+\n+        return result_type->createColumnConst(1, UInt8(0));\n+    }\n+\n     size_t getNumberOfArguments() const override { return 1; }\n     bool useDefaultImplementationForNulls() const override { return false; }\n     bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }\ndiff --git a/src/Functions/isNullable.cpp b/src/Functions/isNullable.cpp\nindex 14874487f401..b24ee4f5e737 100644\n--- a/src/Functions/isNullable.cpp\n+++ b/src/Functions/isNullable.cpp\n@@ -2,6 +2,7 @@\n #include <Functions/FunctionFactory.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <Columns/ColumnsNumber.h>\n+#include <DataTypes/DataTypeNullable.h>\n \n namespace DB\n {\n@@ -23,6 +24,15 @@ class FunctionIsNullable : public IFunction\n         return name;\n     }\n \n+    ColumnPtr getConstantResultForNonConstArguments(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type) const override\n+    {\n+        const ColumnWithTypeAndName & elem = arguments[0];\n+        if (elem.type->onlyNull() || canContainNull(*elem.type))\n+            return result_type->createColumnConst(1, UInt8(1));\n+\n+        return result_type->createColumnConst(1, UInt8(0));\n+    }\n+\n     bool useDefaultImplementationForNulls() const override { return false; }\n \n     bool useDefaultImplementationForNothing() const override { return false; }\ndiff --git a/src/Planner/PlannerExpressionAnalysis.cpp b/src/Planner/PlannerExpressionAnalysis.cpp\nindex f0a2845c3e8d..060bbba1c056 100644\n--- a/src/Planner/PlannerExpressionAnalysis.cpp\n+++ b/src/Planner/PlannerExpressionAnalysis.cpp\n@@ -1,6 +1,7 @@\n #include <Planner/PlannerExpressionAnalysis.h>\n \n #include <Columns/ColumnNullable.h>\n+#include <Columns/FilterDescription.h>\n \n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeNullable.h>\n@@ -37,7 +38,7 @@ namespace\n   * Actions before filter are added into into actions chain.\n   * It is client responsibility to update filter analysis result if filter column must be removed after chain is finalized.\n   */\n-FilterAnalysisResult analyzeFilter(const QueryTreeNodePtr & filter_expression_node,\n+std::optional<FilterAnalysisResult> analyzeFilter(const QueryTreeNodePtr & filter_expression_node,\n     const ColumnsWithTypeAndName & input_columns,\n     const PlannerContextPtr & planner_context,\n     ActionsChain & actions_chain)\n@@ -45,7 +46,11 @@ FilterAnalysisResult analyzeFilter(const QueryTreeNodePtr & filter_expression_no\n     FilterAnalysisResult result;\n \n     result.filter_actions = buildActionsDAGFromExpressionNode(filter_expression_node, input_columns, planner_context);\n-    result.filter_column_name = result.filter_actions->getOutputs().at(0)->result_name;\n+    const auto * output = result.filter_actions->getOutputs().at(0);\n+    if (output->column && ConstantFilterDescription(*output->column).always_true)\n+        return {};\n+\n+    result.filter_column_name = output->result_name;\n     actions_chain.addStep(std::make_unique<ActionsChainStep>(result.filter_actions));\n \n     return result;\n@@ -534,8 +539,11 @@ PlannerExpressionsAnalysisResult buildExpressionAnalysisResult(const QueryTreeNo\n     if (query_node.hasWhere())\n     {\n         where_analysis_result_optional = analyzeFilter(query_node.getWhere(), current_output_columns, planner_context, actions_chain);\n-        where_action_step_index_optional = actions_chain.getLastStepIndex();\n-        current_output_columns = actions_chain.getLastStepAvailableOutputColumns();\n+        if (where_analysis_result_optional)\n+        {\n+            where_action_step_index_optional = actions_chain.getLastStepIndex();\n+            current_output_columns = actions_chain.getLastStepAvailableOutputColumns();\n+        }\n     }\n \n     auto aggregation_analysis_result_optional = analyzeAggregation(query_tree, current_output_columns, planner_context, actions_chain);\n@@ -548,8 +556,11 @@ PlannerExpressionsAnalysisResult buildExpressionAnalysisResult(const QueryTreeNo\n     if (query_node.hasHaving())\n     {\n         having_analysis_result_optional = analyzeFilter(query_node.getHaving(), current_output_columns, planner_context, actions_chain);\n-        having_action_step_index_optional = actions_chain.getLastStepIndex();\n-        current_output_columns = actions_chain.getLastStepAvailableOutputColumns();\n+        if (having_analysis_result_optional)\n+        {\n+            having_action_step_index_optional = actions_chain.getLastStepIndex();\n+            current_output_columns = actions_chain.getLastStepAvailableOutputColumns();\n+        }\n     }\n \n     auto window_analysis_result_optional = analyzeWindow(query_tree, current_output_columns, planner_context, actions_chain);\n@@ -562,8 +573,11 @@ PlannerExpressionsAnalysisResult buildExpressionAnalysisResult(const QueryTreeNo\n     if (query_node.hasQualify())\n     {\n         qualify_analysis_result_optional = analyzeFilter(query_node.getQualify(), current_output_columns, planner_context, actions_chain);\n-        qualify_action_step_index_optional = actions_chain.getLastStepIndex();\n-        current_output_columns = actions_chain.getLastStepAvailableOutputColumns();\n+        if (qualify_analysis_result_optional)\n+        {\n+            qualify_action_step_index_optional = actions_chain.getLastStepIndex();\n+            current_output_columns = actions_chain.getLastStepAvailableOutputColumns();\n+        }\n     }\n \n     auto projection_analysis_result = analyzeProjection(query_node, current_output_columns, planner_context, actions_chain);\n",
  "test_patch": "diff --git a/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\nindex 7e2d393c3d11..6765e112bb91 100644\n--- a/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n+++ b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n@@ -368,17 +368,21 @@ TEST(TransformQueryForExternalDatabase, Null)\n \n     check(state, 1, {\"field\"},\n           \"SELECT field FROM table WHERE field IS NULL\",\n-          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE \"field\" IS NULL)\");\n+          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE \"field\" IS NULL)\",\n+          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE 1 = 0)\");\n     check(state, 1, {\"field\"},\n           \"SELECT field FROM table WHERE field IS NOT NULL\",\n-          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE \"field\" IS NOT NULL)\");\n+          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE \"field\" IS NOT NULL)\",\n+          R\"(SELECT \"field\" FROM \"test\".\"table\")\");\n \n     check(state, 1, {\"field\"},\n           \"SELECT field FROM table WHERE isNull(field)\",\n-          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE \"field\" IS NULL)\");\n+          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE \"field\" IS NULL)\",\n+          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE 1 = 0)\");\n     check(state, 1, {\"field\"},\n           \"SELECT field FROM table WHERE isNotNull(field)\",\n-          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE \"field\" IS NOT NULL)\");\n+          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE \"field\" IS NOT NULL)\",\n+          R\"(SELECT \"field\" FROM \"test\".\"table\")\");\n }\n \n TEST(TransformQueryForExternalDatabase, ToDate)\ndiff --git a/tests/queries/0_stateless/01822_union_and_constans_error.reference b/tests/queries/0_stateless/01822_union_and_constans_error.reference\nindex d00491fd7e5b..e69de29bb2d1 100644\n--- a/tests/queries/0_stateless/01822_union_and_constans_error.reference\n+++ b/tests/queries/0_stateless/01822_union_and_constans_error.reference\n@@ -1,1 +0,0 @@\n-1\ndiff --git a/tests/queries/0_stateless/01822_union_and_constans_error.sql b/tests/queries/0_stateless/01822_union_and_constans_error.sql\nindex 38b7df700cd9..9017e8769eb7 100644\n--- a/tests/queries/0_stateless/01822_union_and_constans_error.sql\n+++ b/tests/queries/0_stateless/01822_union_and_constans_error.sql\n@@ -15,6 +15,6 @@ SELECT isNull(t0.c0) OR COUNT('\\n?pVa')\n FROM t0\n GROUP BY t0.c0\n HAVING isNull(isNull(t0.c0))\n-SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;\n+SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0 format Null;\n \n drop table if exists t0;\ndiff --git a/tests/queries/0_stateless/02892_orc_filter_pushdown.reference b/tests/queries/0_stateless/02892_orc_filter_pushdown.reference\nindex e6c2e9b2b575..903d42bf4928 100644\n--- a/tests/queries/0_stateless/02892_orc_filter_pushdown.reference\n+++ b/tests/queries/0_stateless/02892_orc_filter_pushdown.reference\n@@ -206,7 +206,7 @@ select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative\n select count(), min(negative_or_null), max(negative_or_null) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where (negative_or_null < -500);\n 596\t-1099\t-501\n select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where indexHint(negative_or_null is null);\n-1000\t499500\n+0\t0\n select count(), min(negative_or_null), max(negative_or_null) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where (negative_or_null is null);\n 0\t0\t0\n select count(), sum(number) from file('02892.orc', ORC, 'number UInt64, negative_or_null Int64') where indexHint(negative_or_null in (0, -1, -10, -100, -1000));\ndiff --git a/tests/queries/0_stateless/03164_early_constant_folding_analyzer.reference b/tests/queries/0_stateless/03164_early_constant_folding_analyzer.reference\nnew file mode 100644\nindex 000000000000..227b118bb7fa\n--- /dev/null\n+++ b/tests/queries/0_stateless/03164_early_constant_folding_analyzer.reference\n@@ -0,0 +1,1 @@\n+ReadFromPreparedSource (Optimized trivial count)\ndiff --git a/tests/queries/0_stateless/03164_early_constant_folding_analyzer.sql b/tests/queries/0_stateless/03164_early_constant_folding_analyzer.sql\nnew file mode 100644\nindex 000000000000..dbffbc1af719\n--- /dev/null\n+++ b/tests/queries/0_stateless/03164_early_constant_folding_analyzer.sql\n@@ -0,0 +1,30 @@\n+CREATE TABLE checks\n+(\n+    `pull_request_number` UInt32,\n+    `commit_sha` LowCardinality(String),\n+    `check_name` LowCardinality(String),\n+    `check_status` LowCardinality(String),\n+    `check_duration_ms` UInt64,\n+    `check_start_time` DateTime,\n+    `test_name` LowCardinality(String),\n+    `test_status` LowCardinality(String),\n+    `test_duration_ms` UInt64,\n+    `report_url` String,\n+    `pull_request_url` String,\n+    `commit_url` String,\n+    `task_url` String,\n+    `base_ref` String,\n+    `base_repo` String,\n+    `head_ref` String,\n+    `head_repo` String,\n+    `test_context_raw` String,\n+    `instance_type` LowCardinality(String),\n+    `instance_id` String,\n+    `date` Date MATERIALIZED toDate(check_start_time)\n+)\n+ENGINE = MergeTree ORDER BY (date, pull_request_number, commit_sha, check_name, test_name, check_start_time);\n+\n+insert into checks select * from generateRandom() limit 1;\n+\n+\n+select trimLeft(explain) from (explain SELECT count(1) FROM checks WHERE test_name IS NOT NULL) where explain like '%ReadFromPreparedSource%' SETTINGS allow_experimental_analyzer = 1, allow_experimental_parallel_reading_from_replicas = 0;\n",
  "problem_statement": "[Analyzer] minmax count projection is not used with analyzer\nPart of playbench.\r\n```\r\nclickhouse-cloud :) EXPLAIN SELECT count(1) FROM checks WHERE test_name is not null SETTINGS allow_experimental_analyzer=0, allow_experimental_parallel_reading_from_replicas=0\r\n\r\nEXPLAIN\r\nSELECT count(1)\r\nFROM checks\r\nWHERE test_name IS NOT NULL\r\nSETTINGS allow_experimental_analyzer = 0, allow_experimental_parallel_reading_from_replicas = 0\r\n\r\nQuery id: 499bc5b7-98a1-40fa-b640-e2baa3ca7f26\r\n\r\n   \u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n1. \u2502 Expression ((Projection + Before ORDER BY))             \u2502\r\n2. \u2502   Aggregating                                           \u2502\r\n3. \u2502     Expression                                          \u2502\r\n4. \u2502       ReadFromPreparedSource (_minmax_count_projection) \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n4 rows in set. Elapsed: 0.006 sec.\r\n\r\nclickhouse-cloud :) EXPLAIN SELECT count(1) FROM checks WHERE test_name is not null SETTINGS allow_experimental_analyzer=1, allow_experimental_parallel_reading_from_replicas=0\r\n\r\nEXPLAIN\r\nSELECT count(1)\r\nFROM checks\r\nWHERE test_name IS NOT NULL\r\nSETTINGS allow_experimental_analyzer = 1, allow_experimental_parallel_reading_from_replicas = 0\r\n\r\nQuery id: 62bf5a49-b694-419e-a590-9e8e67748f59\r\n\r\n   \u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n1. \u2502 Expression ((Project names + Projection))                          \u2502\r\n2. \u2502   Aggregating                                                      \u2502\r\n3. \u2502     Expression (Before GROUP BY)                                   \u2502\r\n4. \u2502       Filter ((WHERE + Change column names to column identifiers)) \u2502\r\n5. \u2502         ReadFromMergeTree (checks.checks)                          \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n5 rows in set. Elapsed: 0.002 sec.\r\n\r\nclickhouse-cloud :) SELECT count(1) FROM checks WHERE test_name is not null SETTINGS allow_experimental_analyzer=1, allow_experimental_parallel_reading_from_replicas=0\r\n\r\nSELECT count(1)\r\nFROM checks\r\nWHERE test_name IS NOT NULL\r\nSETTINGS allow_experimental_analyzer = 1, allow_experimental_parallel_reading_from_replicas = 0\r\n\r\nQuery id: 0fc52f3d-75a3-49a6-96c7-1cfe8c5744a7\r\n\r\n   \u250c\u2500\u2500\u2500count(1)\u2500\u2510\r\n1. \u2502 3121567112 \u2502 -- 3.12 billion\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 26.163 sec. Processed 3.12 billion rows, 6.24 GB (119.31 million rows/s., 238.63 MB/s.)\r\nPeak memory usage: 806.02 MiB.\r\n\r\nclickhouse-cloud :) SELECT count(1) FROM checks WHERE test_name is not null SETTINGS allow_experimental_analyzer=0, allow_experimental_parallel_reading_from_replicas=0\r\n\r\nSELECT count(1)\r\nFROM checks\r\nWHERE test_name IS NOT NULL\r\nSETTINGS allow_experimental_analyzer = 0, allow_experimental_parallel_reading_from_replicas = 0\r\n\r\nQuery id: 696750a6-f29e-461d-b6f2-846a08533dd5\r\n\r\n   \u250c\u2500\u2500\u2500\u2500count()\u2500\u2510\r\n1. \u2502 3121567112 \u2502 -- 3.12 billion\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.004 sec.\r\n\r\nSHOW CREATE TABLE checks\r\n\r\nCREATE TABLE checks.checks\r\n(\r\n    `pull_request_number` UInt32,\r\n    `commit_sha` LowCardinality(String),\r\n    `check_name` LowCardinality(String),\r\n    `check_status` LowCardinality(String),\r\n    `check_duration_ms` UInt64,\r\n    `check_start_time` DateTime,\r\n    `test_name` LowCardinality(String),\r\n    `test_status` LowCardinality(String),\r\n    `test_duration_ms` UInt64,\r\n    `report_url` String,\r\n    `pull_request_url` String,\r\n    `commit_url` String,\r\n    `task_url` String,\r\n    `base_ref` String,\r\n    `base_repo` String,\r\n    `head_ref` String,\r\n    `head_repo` String,\r\n    `test_context_raw` String,\r\n    `instance_type` LowCardinality(String),\r\n    `instance_id` String,\r\n    `date` Date MATERIALIZED toDate(check_start_time)\r\n)\r\nENGINE = SharedMergeTree('/clickhouse/tables/{uuid}/{shard}', '{replica}')\r\nPRIMARY KEY (date, pull_request_number, commit_sha, check_name, test_name, check_start_time)\r\nORDER BY (date, pull_request_number, commit_sha, check_name, test_name, check_start_time)\r\nSETTINGS index_granularity = 8192\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2024-05-31T12:53:14Z"
}