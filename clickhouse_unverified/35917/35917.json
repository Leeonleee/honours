{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 35917,
  "instance_id": "ClickHouse__ClickHouse-35917",
  "issue_numbers": [
    "35841"
  ],
  "base_commit": "d08d4a2437991bf0fae5683217343189ed2fb59b",
  "patch": "diff --git a/src/Common/ProfileEvents.cpp b/src/Common/ProfileEvents.cpp\nindex 074ec02394b1..3f55970f3aad 100644\n--- a/src/Common/ProfileEvents.cpp\n+++ b/src/Common/ProfileEvents.cpp\n@@ -112,6 +112,8 @@\n     M(CompileExpressionsMicroseconds, \"Total time spent for compilation of expressions to LLVM code.\") \\\n     M(CompileExpressionsBytes, \"Number of bytes used for expressions compilation.\") \\\n     \\\n+    M(ExecuteShellCommand, \"Number of shell command executions.\") \\\n+    \\\n     M(ExternalSortWritePart, \"\") \\\n     M(ExternalSortMerge, \"\") \\\n     M(ExternalAggregationWritePart, \"\") \\\ndiff --git a/src/Common/ShellCommand.cpp b/src/Common/ShellCommand.cpp\nindex 0093d72e7667..f24add7acf09 100644\n--- a/src/Common/ShellCommand.cpp\n+++ b/src/Common/ShellCommand.cpp\n@@ -29,6 +29,11 @@ namespace\n     };\n }\n \n+namespace ProfileEvents\n+{\n+    extern const Event ExecuteShellCommand;\n+}\n+\n namespace DB\n {\n \n@@ -158,6 +163,7 @@ std::unique_ptr<ShellCommand> ShellCommand::executeImpl(\n     const Config & config)\n {\n     logCommand(filename, argv);\n+    ProfileEvents::increment(ProfileEvents::ExecuteShellCommand);\n \n #if !defined(USE_MUSL)\n     /** Here it is written that with a normal call `vfork`, there is a chance of deadlock in multithreaded programs,\ndiff --git a/src/Interpreters/UserDefinedExecutableFunctionFactory.cpp b/src/Interpreters/UserDefinedExecutableFunctionFactory.cpp\nindex 6d7dee7a4c7f..d3a38f42e21d 100644\n--- a/src/Interpreters/UserDefinedExecutableFunctionFactory.cpp\n+++ b/src/Interpreters/UserDefinedExecutableFunctionFactory.cpp\n@@ -57,6 +57,10 @@ class UserDefinedFunction final : public IFunction\n \n     ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override\n     {\n+        /// Do not start user defined script during query analysis. Because user script startup could be heavy.\n+        if (input_rows_count == 0)\n+            return result_type->createColumn();\n+\n         auto coordinator = executable_function->getCoordinator();\n         const auto & coordinator_configuration = coordinator->getConfiguration();\n         const auto & configuration = executable_function->getConfiguration();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02252_executable_user_defined_function_short_circuit.reference b/tests/queries/0_stateless/02252_executable_user_defined_function_short_circuit.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/tests/queries/0_stateless/02252_executable_user_defined_function_short_circuit.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/02252_executable_user_defined_function_short_circuit.sql b/tests/queries/0_stateless/02252_executable_user_defined_function_short_circuit.sql\nnew file mode 100644\nindex 000000000000..a475ba337408\n--- /dev/null\n+++ b/tests/queries/0_stateless/02252_executable_user_defined_function_short_circuit.sql\n@@ -0,0 +1,10 @@\n+SELECT number FROM numbers(10) WHERE number > 15 and test_function(number, number) == 4;\n+\n+SYSTEM FLUSH LOGS;\n+\n+SELECT ProfileEvents['ExecuteShellCommand'] FROM system.query_log WHERE\n+    current_database = currentDatabase()\n+    AND type = 'QueryFinish'\n+    AND query == 'SELECT number FROM numbers(10) WHERE number > 15 and test_function(number, number) == 4;'\n+    AND event_date >= yesterday() AND event_time > now() - interval 10 minute\n+    LIMIT 1;\n",
  "problem_statement": "Assume User Defined Function as heavy-to-process in Short Circuit Processing\n**Use case**\r\n\r\nPlease look at the next request:\r\n```\r\nSELECT * FROM numbers(1000000) WHERE number % 10000 == 0 and extremely_heavy_udf(number) == 'ok'\r\n```\r\nNow as far as all the functions are \"eager\" the heavy UDF will drastically reduce performance of the request. \r\n\r\n**Describe the solution you'd like**\r\n\r\nAs far as I understood after a conversation with @alexey-milovidov you have a \"Short Circuit Processing\" optimization for simple logical predicates (like conjunctive normal form) doing \"lazy calculate\" for heavy functions.\r\n\r\nSo it would be nice to assume all UDF functions as heavy-to-process (which is very close to the truth).\r\n\n",
  "hints_text": "",
  "created_at": "2022-04-04T14:23:18Z"
}