{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40120,
  "instance_id": "ClickHouse__ClickHouse-40120",
  "issue_numbers": [
    "39521"
  ],
  "base_commit": "5a9d2460dde45fa071fe91622746f63c75648f94",
  "patch": "diff --git a/programs/obfuscator/Obfuscator.cpp b/programs/obfuscator/Obfuscator.cpp\nindex 6891d2113a53..95bf89b02552 100644\n--- a/programs/obfuscator/Obfuscator.cpp\n+++ b/programs/obfuscator/Obfuscator.cpp\n@@ -24,6 +24,7 @@\n #include <Common/typeid_cast.h>\n #include <Common/assert_cast.h>\n #include <Formats/registerFormats.h>\n+#include <Formats/ReadSchemaUtils.h>\n #include <Processors/Formats/IInputFormat.h>\n #include <QueryPipeline/QueryPipelineBuilder.h>\n #include <Processors/Executors/PullingPipelineExecutor.h>\n@@ -38,6 +39,7 @@\n #include <IO/WriteBufferFromFile.h>\n #include <Compression/CompressedReadBuffer.h>\n #include <Compression/CompressedWriteBuffer.h>\n+#include <Interpreters/parseColumnsListForTableFunction.h>\n #include <memory>\n #include <cmath>\n #include <unistd.h>\n@@ -1239,7 +1241,6 @@ try\n \n     if (options.count(\"help\")\n         || !options.count(\"seed\")\n-        || !options.count(\"structure\")\n         || !options.count(\"input-format\")\n         || !options.count(\"output-format\"))\n     {\n@@ -1259,7 +1260,11 @@ try\n \n     UInt64 seed = sipHash64(options[\"seed\"].as<std::string>());\n \n-    std::string structure = options[\"structure\"].as<std::string>();\n+    std::string structure;\n+\n+    if (options.count(\"structure\"))\n+        structure = options[\"structure\"].as<std::string>();\n+\n     std::string input_format = options[\"input-format\"].as<std::string>();\n     std::string output_format = options[\"output-format\"].as<std::string>();\n \n@@ -1287,32 +1292,51 @@ try\n     markov_model_params.determinator_sliding_window_size = options[\"determinator-sliding-window-size\"].as<UInt64>();\n \n     /// Create the header block\n-    std::vector<std::string> structure_vals;\n-    boost::split(structure_vals, structure, boost::algorithm::is_any_of(\" ,\"), boost::algorithm::token_compress_on);\n-\n-    if (structure_vals.size() % 2 != 0)\n-        throw Exception(\"Odd number of elements in section structure: must be a list of name type pairs\", ErrorCodes::LOGICAL_ERROR);\n+    SharedContextHolder shared_context = Context::createShared();\n+    auto context = Context::createGlobal(shared_context.get());\n+    auto context_const = WithContext(context).getContext();\n+    context->makeGlobalContext();\n \n     Block header;\n-    const DataTypeFactory & data_type_factory = DataTypeFactory::instance();\n \n-    for (size_t i = 0, size = structure_vals.size(); i < size; i += 2)\n+    ColumnsDescription schema_columns;\n+\n+    if (structure.empty())\n+    {\n+        ReadBufferIterator read_buffer_iterator = [&](ColumnsDescription &)\n+        {\n+            auto file = std::make_unique<ReadBufferFromFileDescriptor>(STDIN_FILENO);\n+\n+            /// stdin must be seekable\n+            auto res = lseek(file->getFD(), 0, SEEK_SET);\n+            if (-1 == res)\n+                throwFromErrno(\"Input must be seekable file (it will be read twice).\", ErrorCodes::CANNOT_SEEK_THROUGH_FILE);\n+\n+            return file;\n+        };\n+\n+        schema_columns = readSchemaFromFormat(input_format, {}, read_buffer_iterator, false, context_const);\n+    }\n+    else\n+    {\n+        schema_columns = parseColumnsListFromString(structure, context_const);\n+    }\n+\n+    auto schema_columns_info = schema_columns.getOrdinary();\n+\n+    for (auto & info : schema_columns_info)\n     {\n         ColumnWithTypeAndName column;\n-        column.name = structure_vals[i];\n-        column.type = data_type_factory.get(structure_vals[i + 1]);\n+        column.name = info.name;\n+        column.type = info.type;\n         column.column = column.type->createColumn();\n         header.insert(std::move(column));\n     }\n \n-    SharedContextHolder shared_context = Context::createShared();\n-    auto context = Context::createGlobal(shared_context.get());\n-    context->makeGlobalContext();\n-\n     ReadBufferFromFileDescriptor file_in(STDIN_FILENO);\n     WriteBufferFromFileDescriptor file_out(STDOUT_FILENO);\n \n-    if (load_from_file.empty())\n+    if (load_from_file.empty() || structure.empty())\n     {\n         /// stdin must be seekable\n         auto res = lseek(file_in.getFD(), 0, SEEK_SET);\n",
  "test_patch": "diff --git a/tests/queries/1_stateful/00175_obfuscator_schema_inference.reference b/tests/queries/1_stateful/00175_obfuscator_schema_inference.reference\nnew file mode 100644\nindex 000000000000..bd7f726bffdf\n--- /dev/null\n+++ b/tests/queries/1_stateful/00175_obfuscator_schema_inference.reference\n@@ -0,0 +1,4 @@\n+403489\n+1000\t320\t171\t23\n+2500\t597\t332\t14\n+2500\t597\t332\t14\ndiff --git a/tests/queries/1_stateful/00175_obfuscator_schema_inference.sh b/tests/queries/1_stateful/00175_obfuscator_schema_inference.sh\nnew file mode 100755\nindex 000000000000..8ff0d2fa648d\n--- /dev/null\n+++ b/tests/queries/1_stateful/00175_obfuscator_schema_inference.sh\n@@ -0,0 +1,28 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+# Compared to explicitly specifying the structure of the input,\n+#  schema inference adds Nullable(T) to all types, so the model and the results\n+#  are a bit different from test '00175_obfuscator_schema_inference.sh'\n+\n+$CLICKHOUSE_CLIENT --max_threads 1 --query=\"SELECT URL, Title, SearchPhrase FROM test.hits LIMIT 1000\" > \"${CLICKHOUSE_TMP}\"/data.tsv\n+\n+# Test obfuscator without saving the model\n+$CLICKHOUSE_OBFUSCATOR --input-format TSV --output-format TSV --seed hello --limit 2500 < \"${CLICKHOUSE_TMP}\"/data.tsv > \"${CLICKHOUSE_TMP}\"/data2500.tsv 2>/dev/null\n+\n+# Test obfuscator with saving the model\n+$CLICKHOUSE_OBFUSCATOR --input-format TSV --output-format TSV --seed hello --limit 0 --save \"${CLICKHOUSE_TMP}\"/model.bin < \"${CLICKHOUSE_TMP}\"/data.tsv 2>/dev/null\n+wc -c < \"${CLICKHOUSE_TMP}\"/model.bin\n+$CLICKHOUSE_OBFUSCATOR --input-format TSV --output-format TSV --seed hello --limit 2500 --load \"${CLICKHOUSE_TMP}\"/model.bin < \"${CLICKHOUSE_TMP}\"/data.tsv > \"${CLICKHOUSE_TMP}\"/data2500_load_from_model.tsv 2>/dev/null\n+rm \"${CLICKHOUSE_TMP}\"/model.bin\n+\n+$CLICKHOUSE_LOCAL --structure \"URL String, Title String, SearchPhrase String\" --input-format TSV --output-format TSV --query \"SELECT count(), uniq(URL), uniq(Title), uniq(SearchPhrase) FROM table\" < \"${CLICKHOUSE_TMP}\"/data.tsv\n+$CLICKHOUSE_LOCAL --structure \"URL String, Title String, SearchPhrase String\" --input-format TSV --output-format TSV --query \"SELECT count(), uniq(URL), uniq(Title), uniq(SearchPhrase) FROM table\" < \"${CLICKHOUSE_TMP}\"/data2500.tsv\n+$CLICKHOUSE_LOCAL --structure \"URL String, Title String, SearchPhrase String\" --input-format TSV --output-format TSV --query \"SELECT count(), uniq(URL), uniq(Title), uniq(SearchPhrase) FROM table\" < \"${CLICKHOUSE_TMP}\"/data2500_load_from_model.tsv\n+\n+rm \"${CLICKHOUSE_TMP}\"/data.tsv\n+rm \"${CLICKHOUSE_TMP}\"/data2500.tsv\n+rm \"${CLICKHOUSE_TMP}\"/data2500_load_from_model.tsv\n",
  "problem_statement": "`clickhouse-obfuscator`: add schema inference\nDon't require the `--structure` argument.\n",
  "hints_text": "",
  "created_at": "2022-08-11T11:38:22Z"
}