{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79158,
  "instance_id": "ClickHouse__ClickHouse-79158",
  "issue_numbers": [
    "79157"
  ],
  "base_commit": "60579e2ebf15400b3fcc53d9bcb2f87976e1b1ec",
  "patch": "diff --git a/src/Functions/array/arrayIntersect.cpp b/src/Functions/array/arrayIntersect.cpp\nindex 9770e45720c4..4d2d3f6061b5 100644\n--- a/src/Functions/array/arrayIntersect.cpp\n+++ b/src/Functions/array/arrayIntersect.cpp\n@@ -640,6 +640,13 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M\n         // We have NULL in output only once if it should be there\n         bool null_added = false;\n         bool use_null_map;\n+        const auto & arg = arrays.args[0];\n+        size_t off;\n+        // const array has only one row\n+        if (arg.is_const)\n+            off = (*arg.offsets)[0];\n+        else\n+            off = (*arg.offsets)[row];\n \n         if constexpr (std::is_same_v<Mode, ArrayModeUnion>)\n         {\n@@ -657,12 +664,6 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M\n                 null_map.push_back(1);\n                 null_added = true;\n             }\n-            const auto & arg = arrays.args[0];\n-            // const array has only one row\n-            if (arg.is_const)\n-                prev_off[0] = 0;\n-            else\n-                prev_off[0] = (*arg.offsets)[row];\n         }\n         else if constexpr (std::is_same_v<Mode, ArrayModeSymmetricDifference>)\n         {\n@@ -684,13 +685,6 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M\n         else if constexpr (std::is_same_v<Mode, ArrayModeIntersect>)\n         {\n             use_null_map = all_nullable;\n-            const auto & arg = arrays.args[0];\n-            size_t off;\n-            // const array has only one row\n-            if (arg.is_const)\n-                off = (*arg.offsets)[0];\n-            else\n-                off = (*arg.offsets)[row];\n \n             for (auto i : collections::range(prev_off[0], off))\n             {\n@@ -719,9 +713,6 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M\n                     const char * data = nullptr;\n                     pair = map.find(columns[0]->serializeValueIntoArena(i, arena, data));\n                 }\n-                prev_off[0] = off;\n-                if (arg.is_const)\n-                    prev_off[0] = 0;\n \n                 if (!current_has_nullable)\n                     all_has_nullable = false;\n@@ -732,6 +723,10 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M\n                     insertElement<Map, ColumnType, is_numeric_column>(pair, result_offset, result_data, null_map, use_null_map);\n             }\n         }\n+        // Now we update the offsets for the first array\n+        prev_off[0] = off;\n+        if (arg.is_const)\n+            prev_off[0] = 0;\n \n         result_offsets.getElement(row) = result_offset;\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03357_arraySymmetricDifference.reference b/tests/queries/0_stateless/03357_arraySymmetricDifference.reference\nindex c4885144c573..53d6eccae115 100644\n--- a/tests/queries/0_stateless/03357_arraySymmetricDifference.reference\n+++ b/tests/queries/0_stateless/03357_arraySymmetricDifference.reference\n@@ -14,3 +14,13 @@ Array(Tuple(Nullable(UInt8), Array(Nullable(String))))\n Non-const arguments\n [(NULL,['c']),(2,['c',NULL])]\n [(NULL,['c']),(2,['c',NULL])]\n+1\t['1','2']\n+2\t[]\n+3\t['2']\n+4\t['1','4']\n+5\t['5']\n+6\t['5','4']\n+7\t['0','7']\n+8\t['10','8','9']\n+9\t['-1','9']\n+10\t['5','10']\ndiff --git a/tests/queries/0_stateless/03357_arraySymmetricDifference.sql b/tests/queries/0_stateless/03357_arraySymmetricDifference.sql\nindex ef4c13bcfa30..8f0e40c258b5 100644\n--- a/tests/queries/0_stateless/03357_arraySymmetricDifference.sql\n+++ b/tests/queries/0_stateless/03357_arraySymmetricDifference.sql\n@@ -27,4 +27,33 @@ SELECT arraySymmetricDifference(f, s);\n WITH\n     materialize([(1, ['a', 'b']::Array(LowCardinality(String))), (NULL, ['c']::Array(LowCardinality(String)))]) AS f,\n     materialize([(2, ['c', NULL]::Array(LowCardinality(Nullable(String)))), (1, ['a', 'b']::Array(LowCardinality(String)))]) AS s\n-SELECT arraySymmetricDifference(f, s)\n\\ No newline at end of file\n+SELECT arraySymmetricDifference(f, s);\n+\n+-- Table with batch inserts\n+DROP TABLE IF EXISTS test_arraySymmetricDifference;\n+CREATE TABLE test_arraySymmetricDifference\n+(\n+    `id` Int8,\n+    `arr1` Array(String),\n+    `arr2` Array(String)\n+)\n+ENGINE = MergeTree\n+ORDER BY id;\n+\n+INSERT INTO test_arraySymmetricDifference\n+VALUES\n+(1, ['1'], ['2']),\n+(2, ['2'], ['2']),\n+(3, ['3'], ['3', '2']),\n+(4, ['4'], ['1']),\n+(5, ['5'], []),\n+(6, ['6', '4'], ['5', '6']),\n+(7, ['7', '0'], []),\n+(8, ['8', '9', '10'], []),\n+(9, ['9'], ['-1']),\n+(10, ['10'], ['5']);\n+\n+SELECT\n+\tta.id AS id,\n+\tarraySymmetricDifference(ta.arr1, ta.arr2) AS symmetricDifference\n+FROM test_arraySymmetricDifference ta;\n",
  "problem_statement": "arraySymmetricDifference returns wrong results on tables that had batch insertions\n\n\nAs a follow up to fixing https://github.com/ClickHouse/ClickHouse/issues/75057, I tested the same behavior on the new `arraySymmetricDifference()` function introduced in #76231 and it also has the same problem. I will address this and write it in a way that prevents others from following the same behavior in the future.\n\n### Describe what's wrong\n\nhttps://fiddle.clickhouse.com/76af8bbb-d42b-4e11-997f-81068a493bb4\n\n```\n-- Table with batch inserts\nDROP TABLE IF EXISTS test_arraySymmetricDifference;\nCREATE TABLE test_arraySymmetricDifference\n(\n    `id` Int8,\n    `arr1` Array(String),\n    `arr2` Array(String)\n)\nENGINE = MergeTree\nORDER BY id;\n\nINSERT INTO test_arraySymmetricDifference\nVALUES\n(1, ['1'], ['2']),\n(2, ['2'], ['2']),\n(3, ['3'], ['3', '2']),\n(4, ['4'], ['1']),\n(5, ['5'], []);\n\nSELECT\n\tta.id AS id,\n\tarraySymmetricDifference(ta.arr1, ta.arr2) AS symmetricDifference\nFROM test_arraySymmetricDifference ta;\n\n```\n\n### Does it reproduce on the most recent release?\n\nYes\n",
  "hints_text": "",
  "created_at": "2025-04-14T17:22:54Z"
}