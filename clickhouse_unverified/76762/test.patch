diff --git a/tests/integration/helpers/external_sources.py b/tests/integration/helpers/external_sources.py
index 1b2c73142f37..28f521644e2b 100644
--- a/tests/integration/helpers/external_sources.py
+++ b/tests/integration/helpers/external_sources.py
@@ -3,6 +3,7 @@
 import logging
 import os
 import uuid
+import bson
 import warnings
 
 import cassandra.cluster
@@ -224,15 +225,11 @@ def prepare(self, structure, table_name, cluster):
         self.converters = {}
         for field in structure.get_all_fields():
             if field.field_type == "Date":
-                self.converters[field.name] = lambda x: datetime.datetime.strptime(
-                    x, "%Y-%m-%d"
-                )
+                self.converters[field.name] = lambda x: datetime.datetime.strptime(x, "%Y-%m-%d")
             elif field.field_type == "DateTime":
-
-                def converter(x):
-                    return datetime.datetime.strptime(x, "%Y-%m-%d %H:%M:%S")
-
-                self.converters[field.name] = converter
+                self.converters[field.name] = lambda x: datetime.datetime.strptime(x, "%Y-%m-%d %H:%M:%S")
+            elif field.field_type == "UUID":
+                self.converters[field.name] = lambda x: bson.Binary(uuid.UUID(x).bytes, subtype=4)
             else:
                 self.converters[field.name] = lambda x: x
 
diff --git a/tests/integration/test_storage_mongodb/test.py b/tests/integration/test_storage_mongodb/test.py
index e810b6132905..a95a10585bbb 100644
--- a/tests/integration/test_storage_mongodb/test.py
+++ b/tests/integration/test_storage_mongodb/test.py
@@ -1,5 +1,6 @@
 import datetime
 import json
+import uuid
 
 import bson
 import pymongo
@@ -178,8 +179,14 @@ def test_arrays(started_cluster):
                 ],
                 "arr_string": [str(i + 1), str(i + 2), str(i + 3)],
                 "arr_uuid": [
-                    "f0e77736-91d1-48ce-8f01-15123ca1c7ed",
-                    "93376a07-c044-4281-a76e-ad27cf6973c5",
+                    bson.Binary(
+                        uuid.UUID("f0e77736-91d1-48ce-8f01-15123ca1c7ed").bytes,
+                        subtype=4,
+                    ),
+                    bson.Binary(
+                        uuid.UUID("93376a07-c044-4281-a76e-ad27cf6973c5").bytes,
+                        subtype=4,
+                    ),
                 ],
                 "arr_arr_bool": [
                     [True, False, True],
@@ -738,26 +745,10 @@ def test_order_by(started_cluster):
 
     assert node.query("SELECT COUNT() FROM sort_table") == "900
"
     assert node.query("SELECT keyInt FROM sort_table ORDER BY keyInt LIMIT 1") == "1
"
-    assert (
-        node.query("SELECT keyInt FROM sort_table ORDER BY keyInt DESC LIMIT 1")
-        == "30
"
-    )
-    assert (
-        node.query(
-            "SELECT keyInt, keyFloat FROM sort_table ORDER BY keyInt, keyFloat DESC LIMIT 1"
-        )
-        == "1\t1.03
"
-    )
-    assert (
-        node.query(
-            "SELECT keyDateTime FROM sort_table ORDER BY keyDateTime DESC LIMIT 1"
-        )
-        == "1999-12-30 11:23:16
"
-    )
-    assert (
-        node.query("SELECT keyDate FROM sort_table ORDER BY keyDate DESC LIMIT 1")
-        == "1999-12-30
"
-    )
+    assert node.query("SELECT keyInt FROM sort_table ORDER BY keyInt DESC LIMIT 1") == "30
"
+    assert node.query("SELECT keyInt, keyFloat FROM sort_table ORDER BY keyInt, keyFloat DESC LIMIT 1") == "1\t1.03
"
+    assert node.query("SELECT keyDateTime FROM sort_table ORDER BY keyDateTime DESC LIMIT 1") == "1999-12-30 11:23:16
"
+    assert node.query("SELECT keyDate FROM sort_table ORDER BY keyDate DESC LIMIT 1") == "1999-12-30
"
 
     with pytest.raises(QueryRuntimeException):
         node.query("SELECT * FROM sort_table ORDER BY keyInt WITH FILL")
@@ -790,6 +781,10 @@ def test_where(started_cluster):
                     "keyDateTime": datetime.datetime(1999, d, i, 11, 23, 16),
                     "keyDate": datetime.datetime(1999, d, i, 11, 23, 16),
                     "keyNull": None,
+                    "keyUuid": bson.Binary(
+                        uuid.UUID("8d9c5028-3371-4941-943f-84a0c90c5149").bytes,
+                        subtype=4,
+                    ),
                 }
             )
     where_mongo_table.insert_many(data)
@@ -804,96 +799,42 @@ def test_where(started_cluster):
              keyDateTime  DateTime,
              keyDate      Date,
              keyNull      Nullable(UInt8),
-             keyNotExists Nullable(Int)
+             keyNotExists Nullable(Int),
+             keyUuid      UUID
         ) ENGINE = MongoDB('mongo1:27017', 'test', 'where_table', 'root', 'clickhouse')"""
     )
 
     assert node.query("SELECT COUNT() FROM where_table") == "4
"
 
-    assert (
-        node.query("SELECT keyString FROM where_table WHERE id = '11'") == "1string
"
-    )
+    assert node.query("SELECT keyString FROM where_table WHERE id = '11'") == "1string
"
     assert (
         node.query(
             "SELECT keyString FROM where_table WHERE id != '11' ORDER BY keyFloat"
         )
         == "2string
1string
2string
"
     )
-    assert (
-        node.query(
-            "SELECT keyString FROM where_table WHERE id = '11' AND keyString = '1string'"
-        )
-        == "1string
"
-    )
-    assert (
-        node.query("SELECT id FROM where_table WHERE keyInt = 1 AND keyFloat = 1.001")
-        == "11
"
-    )
-    assert (
-        node.query("SELECT id FROM where_table WHERE keyInt = 0 OR keyFloat = 1.001")
-        == "11
"
-    )
+    assert node.query("SELECT keyString FROM where_table WHERE id = '11' AND keyString = '1string'") == "1string
"
+    assert node.query("SELECT id FROM where_table WHERE keyInt = 1 AND keyFloat = 1.001") == "11
"
+    assert node.query("SELECT id FROM where_table WHERE keyInt = 0 OR keyFloat = 1.001") == "11
"
 
-    assert (
-        node.query("SELECT id FROM where_table WHERE keyInt BETWEEN 1 AND 2")
-        == "11
12
21
22
"
-    )
+    assert node.query("SELECT id FROM where_table WHERE keyInt BETWEEN 1 AND 2") == "11
12
21
22
"
     assert node.query("SELECT id FROM where_table WHERE keyInt > 10") == ""
-    assert (
-        node.query("SELECT id FROM where_table WHERE keyInt < 10.1 ORDER BY keyFloat")
-        == "11
12
21
22
"
-    )
+    assert node.query("SELECT id FROM where_table WHERE keyInt < 10.1 ORDER BY keyFloat") == "11
12
21
22
"
 
     assert node.query("SELECT id FROM where_table WHERE id IN ('11')") == "11
"
     assert node.query("SELECT id FROM where_table WHERE id IN ['11']") == "11
"
     assert node.query("SELECT id FROM where_table WHERE id IN ('11', 100)") == "11
"
-    assert (
-        node.query(
-            "SELECT id FROM where_table WHERE id IN ('11', '22') ORDER BY keyFloat"
-        )
-        == "11
22
"
-    )
-    assert (
-        node.query(
-            "SELECT id FROM where_table WHERE id IN ['11', '22'] ORDER BY keyFloat"
-        )
-        == "11
22
"
-    )
+    assert node.query("SELECT id FROM where_table WHERE id IN ('11', '22') ORDER BY keyFloat") == "11
22
"
+    assert node.query("SELECT id FROM where_table WHERE id IN ['11', '22'] ORDER BY keyFloat") == "11
22
"
 
-    assert (
-        node.query(
-            "SELECT id FROM where_table WHERE id NOT IN ('11') ORDER BY keyFloat"
-        )
-        == "12
21
22
"
-    )
-    assert (
-        node.query(
-            "SELECT id FROM where_table WHERE id NOT IN ['11'] ORDER BY keyFloat"
-        )
-        == "12
21
22
"
-    )
-    assert (
-        node.query(
-            "SELECT id FROM where_table WHERE id NOT IN ('11', 100) ORDER BY keyFloat"
-        )
-        == "12
21
22
"
-    )
-    assert (
-        node.query("SELECT id FROM where_table WHERE id NOT IN ('11') AND id IN ('12')")
-        == "12
"
-    )
-    assert (
-        node.query("SELECT id FROM where_table WHERE id NOT IN ['11'] AND id IN ('12')")
-        == "12
"
-    )
+    assert node.query("SELECT id FROM where_table WHERE id NOT IN ('11') ORDER BY keyFloat") == "12
21
22
"
+    assert node.query("SELECT id FROM where_table WHERE id NOT IN ['11'] ORDER BY keyFloat") == "12
21
22
"
+    assert node.query("SELECT id FROM where_table WHERE id NOT IN ('11', 100) ORDER BY keyFloat") == "12
21
22
"
+    assert node.query("SELECT id FROM where_table WHERE id NOT IN ('11') AND id IN ('12')") == "12
"
+    assert node.query("SELECT id FROM where_table WHERE id NOT IN ['11'] AND id IN ('12')") == "12
"
 
     with pytest.raises(QueryRuntimeException):
-        assert (
-            node.query(
-                "SELECT id FROM where_table WHERE id NOT IN ['11', 100] ORDER BY keyFloat"
-            )
-            == "12
21
22
"
-        )
+        assert node.query("SELECT id FROM where_table WHERE id NOT IN ['11', 100] ORDER BY keyFloat") == "12
21
22
"
 
     assert node.query("SELECT id FROM where_table WHERE keyDateTime > now()") == ""
     assert (
@@ -902,24 +843,20 @@ def test_where(started_cluster):
         )
         == "1
2
"
     )
-
-    assert node.query("SELECT count() FROM where_table WHERE isNotNull(id)") == "4
"
     assert (
-        node.query("SELECT count() FROM where_table WHERE isNotNull(keyNull)") == "0
"
+        node.query(
+            "SELECT keyUuid FROM where_table WHERE keyUuid = toUUID('8d9c5028-3371-4941-943f-84a0c90c5149') LIMIT 1"
+        )
+        == "8d9c5028-3371-4941-943f-84a0c90c5149
"
     )
+
+    assert node.query("SELECT count() FROM where_table WHERE isNotNull(id)") == "4
"
+    assert node.query("SELECT count() FROM where_table WHERE isNotNull(keyNull)") == "0
"
     assert node.query("SELECT count() FROM where_table WHERE isNull(keyNull)") == "4
"
-    assert (
-        node.query("SELECT count() FROM where_table WHERE isNotNull(keyNotExists)")
-        == "0
"
-    )
-    assert (
-        node.query("SELECT count() FROM where_table WHERE isNull(keyNotExists)")
-        == "4
"
-    )
+    assert node.query("SELECT count() FROM where_table WHERE isNotNull(keyNotExists)") == "0
"
+    assert node.query("SELECT count() FROM where_table WHERE isNull(keyNotExists)") == "4
"
     assert node.query("SELECT count() FROM where_table WHERE keyNotExists = 0") == "0
"
-    assert (
-        node.query("SELECT count() FROM where_table WHERE keyNotExists != 0") == "0
"
-    )
+    assert node.query("SELECT count() FROM where_table WHERE keyNotExists != 0") == "0
"
 
     with pytest.raises(QueryRuntimeException):
         node.query("SELECT * FROM where_table WHERE keyInt = keyFloat")
@@ -1043,14 +980,12 @@ def test_oid(started_cluster):
     oid_mongo_table = db["oid_table"]
     inserted_result = oid_mongo_table.insert_many(
         [
-            {"key": "a"},
-            {"key": "b"},
-            {"key": "c"},
-            {"key": "d"},
-            {"key": "e"},
+            {"key": "oid1"},
+            {"key": "oid2"},
+            {"key": "oid3"},
         ]
     )
-    oid = inserted_result.inserted_ids
+    ids = inserted_result.inserted_ids
 
     node = started_cluster.instances["node"]
     node.query(
@@ -1062,42 +997,53 @@ def test_oid(started_cluster):
         """
     )
 
-    assert node.query("SELECT COUNT() FROM oid_table") == "5
"
+    assert node.query(f"SELECT COUNT() FROM oid_table") == "3
"
 
-    assert node.query(f"SELECT key FROM oid_table WHERE _id = '{oid[0]}'") == "a
"
-    assert (
-        node.query(f"SELECT * FROM oid_table WHERE _id = '{oid[2]}'")
-        == f"{oid[2]}\tc
"
-    )
-    assert node.query(f"SELECT COUNT() FROM oid_table WHERE _id != '{oid[0]}'") == "4
"
-
-    assert (
-        node.query(
-            f"SELECT key FROM oid_table WHERE _id in ('{oid[0]}', '{oid[1]}') ORDER BY key"
-        )
-        == "a
b
"
-    )
-    assert (
-        node.query(
-            f"SELECT key FROM oid_table WHERE _id in ['{oid[0]}', '{oid[1]}'] ORDER BY key"
-        )
-        == "a
b
"
-    )
-    assert (
-        node.query(f"SELECT key FROM oid_table WHERE _id in ('{oid[0]}') ORDER BY key")
-        == "a
"
-    )
-    assert (
-        node.query(f"SELECT key FROM oid_table WHERE _id in ['{oid[1]}'] ORDER BY key")
-        == "b
"
-    )
+    assert node.query(f"SELECT _id FROM oid_table WHERE _id = '{str(ids[0])}'") == f"{str(ids[0])}
"
+    assert node.query(f"SELECT key FROM oid_table WHERE _id = '{str(ids[0])}'") == "oid1
"
+    assert (node.query(f"SELECT key FROM oid_table WHERE _id != '{str(ids[0])}' ORDER BY key") ==
+            "oid2
oid3
")
+    assert node.query(f"SELECT key FROM oid_table WHERE _id in ['{ids[0]}', '{ids[1]}'] ORDER BY key") == "oid1
oid2
"
+    assert node.query(f"SELECT key FROM oid_table WHERE _id not in ['{ids[0]}', '{ids[1]}'] ORDER BY key") == "oid3
"
 
     with pytest.raises(QueryRuntimeException):
-        node.query("SELECT * FROM oid_table WHERE _id = 'invalidOID'")
+        node.query(f"SELECT * FROM oid_table WHERE _id = 'not-oid'")
+    with pytest.raises(QueryRuntimeException):
+        node.query(f"SELECT * FROM oid_table WHERE _id != 'not-oid'")
     with pytest.raises(QueryRuntimeException):
-        node.query("SELECT * FROM oid_table WHERE _id = 123123")
+        node.query(f"SELECT * FROM oid_table WHERE _id = 1234567")
     with pytest.raises(QueryRuntimeException):
-        node.query("SELECT * FROM oid_table WHERE _id in (123123, 123)")
+        node.query(f"SELECT * FROM oid_table WHERE _id != 1234567")
+    with pytest.raises(QueryRuntimeException):
+        node.query(f"SELECT key FROM oid_table WHERE _id in ['{ids[0]}', 'not-oid']")
+    with pytest.raises(QueryRuntimeException):
+        node.query(f"SELECT key FROM oid_table WHERE _id not in ['{ids[0]}', 'not-oid']")
+    with pytest.raises(QueryRuntimeException):
+        node.query(f"SELECT key FROM oid_table WHERE _id in ['nope', 'not-oid']")
+    with pytest.raises(QueryRuntimeException):
+        node.query(f"SELECT key FROM oid_table WHERE _id not in ['nope', 'not-oid']")
+
+    node.query(
+        """
+        CREATE OR REPLACE TABLE oid_table(
+        _id  String,
+        key  String
+        ) ENGINE = MongoDB('mongo1:27017', 'test', 'oid_table', 'root', 'clickhouse', '', 'key')
+        """
+    )
+    with pytest.raises(QueryRuntimeException):
+        node.query(f"SELECT * FROM oid_table WHERE key = 'not-oid'")
+
+    node.query(
+        """
+        CREATE OR REPLACE TABLE oid_table(
+        _id  String,
+        key  String
+        ) ENGINE = MongoDB('mongodb://mongo1:27017/test', 'oid_table', 'key')
+        """
+    )
+    with pytest.raises(QueryRuntimeException):
+        node.query(f"SELECT * FROM oid_table WHERE key = 'not-oid'")
 
     node.query("DROP TABLE oid_table")
     oid_mongo_table.drop()
@@ -1111,8 +1057,19 @@ def test_uuid(started_cluster):
     uuid_mongo_table = db["uuid_table"]
     uuid_mongo_table.insert_many(
         [
-            {"isValid": 0, "kUUID": "bad_uuid"},
-            {"isValid": 1, "kUUID": "f0e77736-91d1-48ce-8f01-15123ca1c7ed"},
+            {"isValid": 0, "kUUID": "bad_uuid_string"},
+            {
+                "isValid": 1,
+                "kUUID": bson.Binary(
+                    uuid.UUID("f0e77736-91d1-48ce-8f01-15123ca1c7ed").bytes, subtype=0
+                ),
+            },
+            {
+                "isValid": 2,
+                "kUUID": bson.Binary(
+                    uuid.UUID("f0e77736-91d1-48ce-8f01-15123ca1c7ed").bytes, subtype=4
+                ),
+            },
         ]
     )
 
@@ -1126,13 +1083,12 @@ def test_uuid(started_cluster):
         """
     )
 
-    assert (
-        node.query(f"SELECT kUUID FROM uuid_table WHERE isValid = 1")
-        == "f0e77736-91d1-48ce-8f01-15123ca1c7ed
"
-    )
+    assert node.query(f"SELECT kUUID FROM uuid_table WHERE isValid = 2") == "f0e77736-91d1-48ce-8f01-15123ca1c7ed
"
 
     with pytest.raises(QueryRuntimeException):
         node.query("SELECT * FROM uuid_table WHERE isValid = 0")
+    with pytest.raises(QueryRuntimeException):
+        node.query("SELECT * FROM uuid_table WHERE isValid = 1")
     with pytest.raises(QueryRuntimeException):
         node.query("SELECT * FROM uuid_table")
 
diff --git a/tests/integration/test_table_function_mongodb/test.py b/tests/integration/test_table_function_mongodb/test.py
index b3e990cf73b1..c0bc0e508a21 100644
--- a/tests/integration/test_table_function_mongodb/test.py
+++ b/tests/integration/test_table_function_mongodb/test.py
@@ -416,3 +416,67 @@ def test_missing_columns(started_cluster):
     )
     assert result == "10
"
     simple_mongo_table.drop()
+
+
+def test_oid(started_cluster):
+    mongo_connection = get_mongo_connection(started_cluster)
+    db = mongo_connection["test"]
+    db.command("dropAllUsersFromDatabase")
+    db.command("createUser", "root", pwd="clickhouse", roles=["readWrite"])
+    oid_mongo_table = db["oid_table"]
+    inserted_result = oid_mongo_table.insert_many(
+        [
+            {"key": "oid1"},
+            {"key": "oid2"},
+            {"key": "oid3"},
+        ]
+    )
+    ids = inserted_result.inserted_ids
+
+    node = started_cluster.instances["node"]
+    table_definitions = [
+        "mongodb('mongo1:27017', 'test', 'oid_table', 'root', 'clickhouse', '_id String, key String')",
+        "mongodb('mongodb://root:clickhouse@mongo1:27017/test', 'oid_table', '_id String, key String')",
+    ]
+
+    for table_definition in table_definitions:
+        assert node.query(f"SELECT COUNT() FROM {table_definition}") == "3
"
+
+        assert node.query(f"SELECT _id FROM {table_definition} WHERE _id = '{str(ids[0])}'") == f"{str(ids[0])}
"
+        assert node.query(f"SELECT key FROM {table_definition} WHERE _id = '{str(ids[0])}'") == "oid1
"
+        assert (node.query(f"SELECT key FROM {table_definition} WHERE _id != '{str(ids[0])}' ORDER BY key") ==
+                "oid2
oid3
")
+        assert (node.query(f"SELECT key FROM {table_definition} WHERE _id in ['{ids[0]}', '{ids[1]}'] ORDER BY key")
+                == "oid1
oid2
")
+        assert (node.query(f"SELECT key FROM {table_definition} WHERE _id not in ['{ids[0]}', '{ids[1]}'] ORDER BY key")
+                == "oid3
")
+
+        with pytest.raises(QueryRuntimeException):
+            node.query(f"SELECT * FROM {table_definition} WHERE _id = 'not-oid'")
+        with pytest.raises(QueryRuntimeException):
+            node.query(f"SELECT * FROM {table_definition} WHERE _id != 'not-oid'")
+        with pytest.raises(QueryRuntimeException):
+            node.query(f"SELECT * FROM {table_definition} WHERE _id = 1234567")
+        with pytest.raises(QueryRuntimeException):
+            node.query(f"SELECT * FROM {table_definition} WHERE _id != 1234567")
+        with pytest.raises(QueryRuntimeException):
+            node.query(f"SELECT key FROM {table_definition} WHERE _id in ['{ids[0]}', 'not-oid']")
+        with pytest.raises(QueryRuntimeException):
+            node.query(f"SELECT key FROM {table_definition} WHERE _id not in ['{ids[0]}', 'not-oid']")
+        with pytest.raises(QueryRuntimeException):
+            node.query(f"SELECT key FROM {table_definition} WHERE _id in ['nope', 'not-oid']")
+        with pytest.raises(QueryRuntimeException):
+            node.query(f"SELECT key FROM {table_definition} WHERE _id not in ['nope', 'not-oid']")
+
+    table_definition = ("mongodb('mongo1:27017', 'test', 'oid_table', 'root', 'clickhouse', '_id String, key String', "
+                        "'', 'key)")
+    with pytest.raises(QueryRuntimeException):
+        node.query(f"SELECT * FROM {table_definition} WHERE key = 'not-oid'")
+
+    table_definition = ("mongodb('mongodb://root:clickhouse@mongo1:27017/test', 'oid_table', '_id String, key String', "
+                        "'key')")
+    with pytest.raises(QueryRuntimeException):
+        node.query(f"SELECT * FROM {table_definition} WHERE key = 'not-oid'")
+
+
+    oid_mongo_table.drop()
