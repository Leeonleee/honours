{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 45410,
  "instance_id": "ClickHouse__ClickHouse-45410",
  "issue_numbers": [
    "45412"
  ],
  "base_commit": "821c55463f142f2b085e54efdfb9f40a365fb97d",
  "patch": "diff --git a/src/Analyzer/FunctionNode.h b/src/Analyzer/FunctionNode.h\nindex 92d3ab84722e..41751ec3f093 100644\n--- a/src/Analyzer/FunctionNode.h\n+++ b/src/Analyzer/FunctionNode.h\n@@ -145,6 +145,11 @@ class FunctionNode final : public IQueryTreeNode\n       */\n     void resolveAsFunction(FunctionBasePtr function_value);\n \n+    void resolveAsFunction(const FunctionOverloadResolverPtr & resolver)\n+    {\n+        resolveAsFunction(resolver->build(getArgumentColumns()));\n+    }\n+\n     /** Resolve function node as aggregate function.\n       * It is important that function name is updated with resolved function name.\n       * Main motivation for this is query tree optimizations.\ndiff --git a/src/Analyzer/InDepthQueryTreeVisitor.h b/src/Analyzer/InDepthQueryTreeVisitor.h\nindex 96972024d872..1d096ece1a19 100644\n--- a/src/Analyzer/InDepthQueryTreeVisitor.h\n+++ b/src/Analyzer/InDepthQueryTreeVisitor.h\n@@ -1,8 +1,13 @@\n #pragma once\n \n+#include <optional>\n+#include <utility>\n+#include <Common/SettingsChanges.h>\n #include <Common/Exception.h>\n+#include <Core/Settings.h>\n \n #include <Analyzer/IQueryTreeNode.h>\n+#include <Analyzer/QueryNode.h>\n \n \n namespace DB\ndiff --git a/src/Analyzer/ListNode.h b/src/Analyzer/ListNode.h\nindex 5b328d0f8702..4e09512d7802 100644\n--- a/src/Analyzer/ListNode.h\n+++ b/src/Analyzer/ListNode.h\n@@ -16,6 +16,8 @@ using ListNodePtr = std::shared_ptr<ListNode>;\n class ListNode final : public IQueryTreeNode\n {\n public:\n+    using iterator = QueryTreeNodes::iterator;\n+\n     /// Initialize list node with empty nodes\n     ListNode();\n \n@@ -41,6 +43,9 @@ class ListNode final : public IQueryTreeNode\n \n     void dumpTreeImpl(WriteBuffer & buffer, FormatState & format_state, size_t indent) const override;\n \n+    iterator begin() { return children.begin(); }\n+    iterator end() { return children.end(); }\n+\n protected:\n     bool isEqualImpl(const IQueryTreeNode & rhs) const override;\n \ndiff --git a/src/Analyzer/Passes/ConvertOrLikeChainPass.cpp b/src/Analyzer/Passes/ConvertOrLikeChainPass.cpp\nnew file mode 100644\nindex 000000000000..e1b11ceb8de9\n--- /dev/null\n+++ b/src/Analyzer/Passes/ConvertOrLikeChainPass.cpp\n@@ -0,0 +1,134 @@\n+#include <memory>\n+#include <unordered_map>\n+#include <vector>\n+#include <Analyzer/Passes/ConvertOrLikeChainPass.h>\n+#include <Analyzer/ConstantNode.h>\n+#include <Analyzer/UnionNode.h>\n+#include <Analyzer/FunctionNode.h>\n+#include <Analyzer/HashUtils.h>\n+#include <Analyzer/InDepthQueryTreeVisitor.h>\n+#include <Core/Field.h>\n+#include <DataTypes/DataTypesNumber.h>\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/likePatternToRegexp.h>\n+#include <Interpreters/Context.h>\n+\n+namespace DB\n+{\n+\n+namespace\n+{\n+\n+class ConvertOrLikeChainVisitor : public InDepthQueryTreeVisitor<ConvertOrLikeChainVisitor>\n+{\n+    using FunctionNodes = std::vector<std::shared_ptr<FunctionNode>>;\n+\n+    const FunctionOverloadResolverPtr match_function_ref;\n+    const FunctionOverloadResolverPtr or_function_resolver;\n+public:\n+\n+    explicit ConvertOrLikeChainVisitor(ContextPtr context)\n+        : InDepthQueryTreeVisitor<ConvertOrLikeChainVisitor>()\n+        , match_function_ref(FunctionFactory::instance().get(\"multiMatchAny\", context))\n+        , or_function_resolver(FunctionFactory::instance().get(\"or\", context))\n+    {}\n+\n+    static bool needChildVisit(VisitQueryTreeNodeType & parent, VisitQueryTreeNodeType &)\n+    {\n+        ContextPtr context;\n+        if (auto * query = parent->as<QueryNode>())\n+            context = query->getContext();\n+        else if (auto * union_node = parent->as<UnionNode>())\n+            context = union_node->getContext();\n+        if (context)\n+        {\n+            const auto & settings = context->getSettingsRef();\n+            return settings.optimize_or_like_chain\n+                && settings.allow_hyperscan\n+                && settings.max_hyperscan_regexp_length == 0\n+                && settings.max_hyperscan_regexp_total_length == 0;\n+        }\n+        return true;\n+    }\n+\n+    void visitImpl(QueryTreeNodePtr & node)\n+    {\n+        auto * function_node = node->as<FunctionNode>();\n+        if (!function_node || function_node->getFunctionName() != \"or\")\n+            return;\n+\n+        QueryTreeNodes unique_elems;\n+\n+        QueryTreeNodePtrWithHashMap<Array> node_to_patterns;\n+        FunctionNodes match_functions;\n+        for (auto & arg : function_node->getArguments())\n+        {\n+            unique_elems.push_back(arg);\n+\n+            auto * arg_func = arg->as<FunctionNode>();\n+            if (!arg_func)\n+                continue;\n+\n+            const bool is_like  = arg_func->getFunctionName() == \"like\";\n+            const bool is_ilike = arg_func->getFunctionName() == \"ilike\";\n+\n+            /// Not {i}like -> bail out.\n+            if (!is_like && !is_ilike)\n+                continue;\n+\n+            const auto & like_arguments = arg_func->getArguments().getNodes();\n+            if (like_arguments.size() != 2)\n+                continue;\n+\n+            auto identifier = like_arguments[0];\n+            auto * pattern = like_arguments[1]->as<ConstantNode>();\n+            if (!pattern || !isString(pattern->getResultType()))\n+                continue;\n+\n+            auto regexp = likePatternToRegexp(pattern->getValue().get<String>());\n+            /// Case insensitive. Works with UTF-8 as well.\n+            if (is_ilike)\n+                regexp = \"(?i)\" + regexp;\n+\n+            unique_elems.pop_back();\n+            auto it = node_to_patterns.find(identifier);\n+            if (it == node_to_patterns.end())\n+            {\n+                it = node_to_patterns.insert({identifier, Array{}}).first;\n+                /// The second argument will be added when all patterns are known.\n+                auto match_function = std::make_shared<FunctionNode>(\"multiMatchAny\");\n+                match_function->getArguments().getNodes().push_back(identifier);\n+\n+                match_functions.push_back(match_function);\n+                unique_elems.push_back(std::move(match_function));\n+            }\n+            it->second.push_back(regexp);\n+        }\n+\n+        /// Add all the patterns into the function arguments lists.\n+        for (auto & match_function : match_functions)\n+        {\n+            auto & arguments = match_function->getArguments().getNodes();\n+            auto & patterns = node_to_patterns.at(arguments[0]);\n+            arguments.push_back(std::make_shared<ConstantNode>(Field{std::move(patterns)}));\n+            match_function->resolveAsFunction(match_function_ref);\n+        }\n+\n+        /// OR must have at least two arguments.\n+        if (unique_elems.size() == 1)\n+            unique_elems.push_back(std::make_shared<ConstantNode>(false));\n+\n+        function_node->getArguments().getNodes() = std::move(unique_elems);\n+        function_node->resolveAsFunction(or_function_resolver);\n+    }\n+};\n+\n+}\n+\n+void ConvertOrLikeChainPass::run(QueryTreeNodePtr query_tree_node, ContextPtr  context)\n+{\n+    ConvertOrLikeChainVisitor visitor(context);\n+    visitor.visit(query_tree_node);\n+}\n+\n+}\ndiff --git a/src/Analyzer/Passes/ConvertOrLikeChainPass.h b/src/Analyzer/Passes/ConvertOrLikeChainPass.h\nnew file mode 100644\nindex 000000000000..0f734bfa73dd\n--- /dev/null\n+++ b/src/Analyzer/Passes/ConvertOrLikeChainPass.h\n@@ -0,0 +1,20 @@\n+#pragma once\n+\n+#include <Analyzer/IQueryTreePass.h>\n+\n+namespace DB\n+{\n+\n+/** Replaces all the \"or\"'s with {i}like to multiMatchAny\n+ */\n+class ConvertOrLikeChainPass final : public IQueryTreePass\n+{\n+public:\n+    String getName() override { return \"ConvertOrLikeChain\"; }\n+\n+    String getDescription() override { return \"Replaces all the 'or's with {i}like to multiMatchAny\"; }\n+\n+    void run(QueryTreeNodePtr query_tree_node, ContextPtr context) override;\n+};\n+\n+}\ndiff --git a/src/Analyzer/QueryNode.cpp b/src/Analyzer/QueryNode.cpp\nindex 618cbd6d9e8c..3d4e012bb93f 100644\n--- a/src/Analyzer/QueryNode.cpp\n+++ b/src/Analyzer/QueryNode.cpp\n@@ -17,6 +17,7 @@\n #include <Parsers/ASTSetQuery.h>\n \n #include <Analyzer/Utils.h>\n+#include <fmt/core.h>\n \n namespace DB\n {\n@@ -179,6 +180,16 @@ void QueryNode::dumpTreeImpl(WriteBuffer & buffer, FormatState & format_state, s\n         buffer << '\\n' << std::string(indent + 2, ' ') << \"OFFSET\\n\";\n         getOffset()->dumpTreeImpl(buffer, format_state, indent + 4);\n     }\n+\n+    if (hasSettingsChanges())\n+    {\n+        buffer << '\\n' << std::string(indent + 2, ' ') << \"SETTINGS\";\n+        for (const auto & change : settings_changes)\n+        {\n+            buffer << fmt::format(\" {}={}\", change.name, toString(change.value));\n+        }\n+        buffer << '\\n';\n+    }\n }\n \n bool QueryNode::isEqualImpl(const IQueryTreeNode & rhs) const\ndiff --git a/src/Analyzer/QueryTreePassManager.cpp b/src/Analyzer/QueryTreePassManager.cpp\nindex bbcea363dcb2..66b060de6c4a 100644\n--- a/src/Analyzer/QueryTreePassManager.cpp\n+++ b/src/Analyzer/QueryTreePassManager.cpp\n@@ -1,3 +1,4 @@\n+#include <memory>\n #include <Analyzer/QueryTreePassManager.h>\n \n #include <Common/Exception.h>\n@@ -29,6 +30,7 @@\n #include <Analyzer/Passes/FuseFunctionsPass.h>\n #include <Analyzer/Passes/OptimizeGroupByFunctionKeysPass.h>\n #include <Analyzer/Passes/IfTransformStringsToEnumPass.h>\n+#include <Analyzer/Passes/ConvertOrLikeChainPass.h>\n #include <Analyzer/Passes/OptimizeRedundantFunctionsInOrderByPass.h>\n \n namespace DB\n@@ -254,6 +256,8 @@ void addQueryTreePasses(QueryTreePassManager & manager)\n \n     if (settings.optimize_if_transform_strings_to_enum)\n         manager.addPass(std::make_unique<IfTransformStringsToEnumPass>());\n+\n+    manager.addPass(std::make_unique<ConvertOrLikeChainPass>());\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02226_analyzer_or_like_combine.reference b/tests/queries/0_stateless/02226_analyzer_or_like_combine.reference\nnew file mode 100644\nindex 000000000000..8b89f5847b6e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02226_analyzer_or_like_combine.reference\n@@ -0,0 +1,110 @@\n+SELECT materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s\n+WHERE (s LIKE \\'hell%\\') OR (s ILIKE \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\') OR (s ILIKE \\'world%\\')\n+SETTINGS optimize_or_like_chain = 0\n+QUERY id: 0\n+  PROJECTION COLUMNS\n+    s String\n+  PROJECTION\n+    LIST id: 1, nodes: 1\n+      FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n+        ARGUMENTS\n+          LIST id: 3, nodes: 1\n+            CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+  JOIN TREE\n+    TABLE id: 5, table_name: system.one\n+  WHERE\n+    FUNCTION id: 6, function_name: or, function_type: ordinary, result_type: UInt8\n+      ARGUMENTS\n+        LIST id: 7, nodes: 3\n+          FUNCTION id: 8, function_name: like, function_type: ordinary, result_type: UInt8\n+            ARGUMENTS\n+              LIST id: 9, nodes: 2\n+                FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n+                  ARGUMENTS\n+                    LIST id: 3, nodes: 1\n+                      CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+                CONSTANT id: 10, constant_value: \\'hell%\\', constant_value_type: String\n+          FUNCTION id: 11, function_name: ilike, function_type: ordinary, result_type: UInt8\n+            ARGUMENTS\n+              LIST id: 12, nodes: 2\n+                FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n+                  ARGUMENTS\n+                    LIST id: 3, nodes: 1\n+                      CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+                CONSTANT id: 13, constant_value: \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\', constant_value_type: String\n+          FUNCTION id: 14, function_name: ilike, function_type: ordinary, result_type: UInt8\n+            ARGUMENTS\n+              LIST id: 15, nodes: 2\n+                FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n+                  ARGUMENTS\n+                    LIST id: 3, nodes: 1\n+                      CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+                CONSTANT id: 16, constant_value: \\'world%\\', constant_value_type: String\n+  SETTINGS optimize_or_like_chain=0 allow_experimental_analyzer=1\n+SELECT materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s\n+WHERE multiMatchAny(s, [\\'^hell\\', \\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\', \\'(?i)^world\\']) OR false\n+SETTINGS optimize_or_like_chain = 1\n+QUERY id: 0\n+  PROJECTION COLUMNS\n+    s String\n+  PROJECTION\n+    LIST id: 1, nodes: 1\n+      FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n+        ARGUMENTS\n+          LIST id: 3, nodes: 1\n+            CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+  JOIN TREE\n+    TABLE id: 5, table_name: system.one\n+  WHERE\n+    FUNCTION id: 6, function_name: or, function_type: ordinary, result_type: Bool\n+      ARGUMENTS\n+        LIST id: 7, nodes: 2\n+          FUNCTION id: 8, function_name: multiMatchAny, function_type: ordinary, result_type: UInt8\n+            ARGUMENTS\n+              LIST id: 9, nodes: 2\n+                FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n+                  ARGUMENTS\n+                    LIST id: 3, nodes: 1\n+                      CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+                CONSTANT id: 10, constant_value: Array_[\\'^hell\\', \\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\', \\'(?i)^world\\'], constant_value_type: Array(String)\n+          CONSTANT id: 11, constant_value: UInt64_0, constant_value_type: Bool\n+  SETTINGS optimize_or_like_chain=1 allow_experimental_analyzer=1\n+SELECT\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n+WHERE multiMatchAny(s1, [\\'^hell\\', \\'(?i)^world\\']) OR multiMatchAny(s2, [\\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\'])\n+SETTINGS optimize_or_like_chain = 1\n+SELECT\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n+WHERE (s1 LIKE \\'hell%\\') OR (s2 ILIKE \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\') OR (s1 ILIKE \\'world%\\')\n+SETTINGS optimize_or_like_chain = 1\n+SELECT\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n+WHERE (s1 LIKE \\'hell%\\') OR (s2 ILIKE \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\') OR (s1 ILIKE \\'world%\\')\n+SETTINGS optimize_or_like_chain = 1\n+SELECT\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n+WHERE (s1 LIKE \\'hell%\\') OR (s2 ILIKE \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\') OR (s1 ILIKE \\'world%\\')\n+SETTINGS optimize_or_like_chain = 1\n+SELECT\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n+    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n+WHERE multiMatchAny(s1, [\\'^hell\\', \\'(?i)^world\\']) OR multiMatchAny(s2, [\\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\']) OR (s1 = \\'\u041f\u0440\u0438\u0432\u0435\u0442\\')\n+SETTINGS optimize_or_like_chain = 1\n+\u041f\u0440\u0438\u0432\u0435\u0442, optimized World\n+\u041f\u0440\u0438\u0432\u0435\u0442, optimized World\n+\u041f\u0440\u0438\u0432\u0435\u0442, World\n+\u041f\u0440\u0438\u0432\u0435\u0442, World\n+\u041f\u0440\u0438\u0432\u0435\u0442, optimized World\n+\u041f\u0440\u0438\u0432\u0435\u0442, optimized World\n+\u041f\u0440\u0438\u0432\u0435\u0442, World\n+\u041f\u0440\u0438\u0432\u0435\u0442, World\n+\u041f\u0440\u0438\u0432\u0435\u0442, World\n+SELECT\n+    (materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s) LIKE \\'hell%\\' AS test,\n+    s\n+WHERE multiMatchAny(s, [\\'^hell\\', \\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\', \\'(?i)^world\\']) OR false\n+SETTINGS optimize_or_like_chain = 1\ndiff --git a/tests/queries/0_stateless/02226_or_like_combine.sql b/tests/queries/0_stateless/02226_analyzer_or_like_combine.sql\nsimilarity index 63%\nrename from tests/queries/0_stateless/02226_or_like_combine.sql\nrename to tests/queries/0_stateless/02226_analyzer_or_like_combine.sql\nindex ed91dda74691..dec73c201ef9 100644\n--- a/tests/queries/0_stateless/02226_or_like_combine.sql\n+++ b/tests/queries/0_stateless/02226_analyzer_or_like_combine.sql\n@@ -1,6 +1,7 @@\n EXPLAIN SYNTAX SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE 'world%') SETTINGS optimize_or_like_chain = 0;\n+EXPLAIN QUERY TREE run_passes=1 SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE 'world%') SETTINGS optimize_or_like_chain = 0, allow_experimental_analyzer = 1;\n EXPLAIN SYNTAX SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE 'world%') SETTINGS optimize_or_like_chain = 1;\n-\n+EXPLAIN QUERY TREE run_passes=1 SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE 'world%') SETTINGS optimize_or_like_chain = 1, allow_experimental_analyzer = 1;\n \n EXPLAIN SYNTAX SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s1, materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s2 WHERE (s1 LIKE 'hell%') OR (s2 ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s1 ILIKE 'world%') SETTINGS optimize_or_like_chain = 1;\n EXPLAIN SYNTAX SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s1, materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s2 WHERE (s1 LIKE 'hell%') OR (s2 ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s1 ILIKE 'world%') SETTINGS optimize_or_like_chain = 1 SETTINGS allow_hyperscan = 0;\n@@ -10,9 +11,18 @@ EXPLAIN SYNTAX SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s1, materialize('\u041f\n \n \n SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, optimized World') AS s WHERE (s LIKE 'hell%') OR (s LIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE '%world') SETTINGS optimize_or_like_chain = 1;\n+SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, optimized World') AS s WHERE (s LIKE 'hell%') OR (s LIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE '%world') SETTINGS optimize_or_like_chain = 1, allow_experimental_analyzer = 1;\n+\n SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s LIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE '%world') SETTINGS optimize_or_like_chain = 0;\n+SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s LIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE '%world') SETTINGS optimize_or_like_chain = 0, allow_experimental_analyzer = 1;\n+\n SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, optimized World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s LIKE 'world%') SETTINGS optimize_or_like_chain = 1;\n+SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, optimized World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s LIKE 'world%') SETTINGS optimize_or_like_chain = 1, allow_experimental_analyzer = 1;\n+\n SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s LIKE 'world%') SETTINGS optimize_or_like_chain = 0;\n+SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s LIKE 'world%') SETTINGS optimize_or_like_chain = 0, allow_experimental_analyzer = 1;\n+\n+SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE 'world%') SETTINGS optimize_or_like_chain = 1, allow_experimental_analyzer = 1;\n \n -- Aliases\n \ndiff --git a/tests/queries/0_stateless/02226_or_like_combine.reference b/tests/queries/0_stateless/02226_or_like_combine.reference\ndeleted file mode 100644\nindex 93465f606fee..000000000000\n--- a/tests/queries/0_stateless/02226_or_like_combine.reference\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-SELECT materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s\n-WHERE (s LIKE \\'hell%\\') OR (s ILIKE \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\') OR (s ILIKE \\'world%\\')\n-SETTINGS optimize_or_like_chain = 0\n-SELECT materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s\n-WHERE multiMatchAny(s, [\\'^hell\\', \\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\', \\'(?i)^world\\']) OR false\n-SETTINGS optimize_or_like_chain = 1\n-SELECT\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n-WHERE multiMatchAny(s1, [\\'^hell\\', \\'(?i)^world\\']) OR multiMatchAny(s2, [\\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\'])\n-SETTINGS optimize_or_like_chain = 1\n-SELECT\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n-WHERE (s1 LIKE \\'hell%\\') OR (s2 ILIKE \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\') OR (s1 ILIKE \\'world%\\')\n-SETTINGS optimize_or_like_chain = 1\n-SELECT\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n-WHERE (s1 LIKE \\'hell%\\') OR (s2 ILIKE \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\') OR (s1 ILIKE \\'world%\\')\n-SETTINGS optimize_or_like_chain = 1\n-SELECT\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n-WHERE (s1 LIKE \\'hell%\\') OR (s2 ILIKE \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\') OR (s1 ILIKE \\'world%\\')\n-SETTINGS optimize_or_like_chain = 1\n-SELECT\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\n-    materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s2\n-WHERE multiMatchAny(s1, [\\'^hell\\', \\'(?i)^world\\']) OR multiMatchAny(s2, [\\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\']) OR (s1 = \\'\u041f\u0440\u0438\u0432\u0435\u0442\\')\n-SETTINGS optimize_or_like_chain = 1\n-\u041f\u0440\u0438\u0432\u0435\u0442, optimized World\n-\u041f\u0440\u0438\u0432\u0435\u0442, World\n-\u041f\u0440\u0438\u0432\u0435\u0442, optimized World\n-\u041f\u0440\u0438\u0432\u0435\u0442, World\n-SELECT\n-    (materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s) LIKE \\'hell%\\' AS test,\n-    s\n-WHERE multiMatchAny(s, [\\'^hell\\', \\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\', \\'(?i)^world\\']) OR false\n-SETTINGS optimize_or_like_chain = 1\n",
  "problem_statement": "test 02226_analyzer_or_like_combine crashes\n> You have to provide the following information whenever possible.\r\n\r\n**Describe what's wrong**\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/45106/e51123c9b0cd2a8c38cc2dc6ef1ba28be06c7e9b/stateless_tests__debug__[2/5].html\r\n\r\ncrash stack\r\n```\r\n115503:2023.01.19 02:39:08.645970 [ 3485 ] {d163bcac-482b-46f5-8c83-076f89b43108} <Fatal> : Logical error: 'Function multiMatchAny(materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World'), ['^hell', '(?i)\u043f\u0440\u0438\u0432\u0435\u0442', '(?i)^world']) OR 0 expects 3 arguments but has 2 after running ConvertOrLikeChain pass'.\r\n115515:2023.01.19 02:39:08.647565 [ 5233 ] {} <Fatal> BaseDaemon: ########################################\r\n115516:2023.01.19 02:39:08.647991 [ 5233 ] {} <Fatal> BaseDaemon: (version 22.13.1.1, build id: 048E04C589FC63BE30B8F12F63B205DFDD477558) (from thread 3485) (query_id: d163bcac-482b-46f5-8c83-076f89b43108) (query: EXPLAIN QUERY TREE run_passes=1 SELECT materialize('\u041f\u0440\u0438\u0432\u0435\u0442, World') AS s WHERE (s LIKE 'hell%') OR (s ILIKE '%\u043f\u0440\u0438\u0432\u0435\u0442%') OR (s ILIKE 'world%') SETTINGS optimize_or_like_chain = 1, allow_experimental_analyzer = 1;) Received signal Aborted (6)\r\n115518:2023.01.19 02:39:08.648348 [ 5233 ] {} <Fatal> BaseDaemon: \r\n115520:2023.01.19 02:39:08.648740 [ 5233 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f8acf6f400b 0x7f8acf6d3859 0x2190163e 0x21901735 0x21901885 0x18de34ca 0x29e5a81e 0x29e56563 0x29e56137 0x29e54c96 0x29e560a2 0x29e54cb3 0x29e54ecf 0x29df7120 0x29df680b 0x2a4ef6ca 0x2a4eb4e4 0x2be9c4c6 0x2bead7a5 0x30a8aa99 0x30a8b2dc 0x30cda454 0x30cd71fa 0x30cd5fde 0x7f8acf8ab609 0x7f8acf7d0133\r\n115521:2023.01.19 02:39:08.649139 [ 5233 ] {} <Fatal> BaseDaemon: 4. raise @ 0x7f8acf6f400b in ?\r\n115522:2023.01.19 02:39:08.649396 [ 5233 ] {} <Fatal> BaseDaemon: 5. abort @ 0x7f8acf6d3859 in ?\r\n115927:2023.01.19 02:39:08.796636 [ 5233 ] {} <Fatal> BaseDaemon: 6. /build/build_docker/../src/Common/Exception.cpp:41: DB::abortOnFailedAssertion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) @ 0x2190163e in /usr/bin/clickhouse\r\n116380:2023.01.19 02:39:08.928221 [ 5233 ] {} <Fatal> BaseDaemon: 7. /build/build_docker/../src/Common/Exception.cpp:64: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, bool, std::__1::vector<void*, std::__1::allocator<void*>> const&) @ 0x21901735 in /usr/bin/clickhouse\r\n116533:2023.01.19 02:39:09.021859 [ 5233 ] {} <Fatal> BaseDaemon: 8. /build/build_docker/../src/Common/Exception.cpp:78: DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0x21901885 in /usr/bin/clickhouse\r\n116691:2023.01.19 02:39:09.148041 [ 5233 ] {} <Fatal> BaseDaemon: 9. /build/build_docker/../src/Common/Exception.h:41: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, bool) @ 0x18de34ca in /usr/bin/clickhouse\r\n116797:2023.01.19 02:39:09.262123 [ 5233 ] {} <Fatal> BaseDaemon: 10. /build/build_docker/../src/Common/Exception.h:50: DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, unsigned long&, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(int, fmt::v8::basic_format_string<char, fmt::v8::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::type, fmt::v8::type_identity<unsigned long&>::type, fmt::v8::type_identity<unsigned long>::type, fmt::v8::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>::type>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, unsigned long&, unsigned long&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) @ 0x29e5a81e in /usr/bin/clickhouse\r\n116829:2023.01.19 02:39:09.360097 [ 5233 ] {} <Fatal> BaseDaemon: 11. /build/build_docker/../src/Analyzer/QueryTreePassManager.cpp:91: DB::(anonymous namespace)::ValidationChecker::visitFunction(DB::FunctionNode*) const @ 0x29e56563 in /usr/bin/clickhouse\r\n116890:2023.01.19 02:39:09.471347 [ 5233 ] {} <Fatal> BaseDaemon: 12. /build/build_docker/../src/Analyzer/QueryTreePassManager.cpp:65: DB::(anonymous namespace)::ValidationChecker::visitImpl(std::__1::shared_ptr<DB::IQueryTreeNode>&) const @ 0x29e56137 in /usr/bin/clickhouse\r\n116973:2023.01.19 02:39:09.564372 [ 5233 ] {} <Fatal> BaseDaemon: 13. /build/build_docker/../src/Analyzer/InDepthQueryTreeVisitor.h:59: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::__1::shared_ptr<DB::IQueryTreeNode>&) @ 0x29e54c96 in /usr/bin/clickhouse\r\n117041:2023.01.19 02:39:09.676569 [ 5233 ] {} <Fatal> BaseDaemon: 14. /build/build_docker/../src/Analyzer/InDepthQueryTreeVisitor.h:76: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visitChildren(std::__1::shared_ptr<DB::IQueryTreeNode>&) @ 0x29e560a2 in /usr/bin/clickhouse\r\n117095:2023.01.19 02:39:09.769046 [ 5233 ] {} <Fatal> BaseDaemon: 15. /build/build_docker/../src/Analyzer/InDepthQueryTreeVisitor.h:61: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::__1::shared_ptr<DB::IQueryTreeNode>&) @ 0x29e54cb3 in /usr/bin/clickhouse\r\n117144:2023.01.19 02:39:09.856860 [ 5233 ] {} <Fatal> BaseDaemon: 16. /build/build_docker/../src/Analyzer/QueryTreePassManager.cpp:174: DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>, unsigned long) @ 0x29e54ecf in /usr/bin/clickhouse\r\n117413:2023.01.19 02:39:10.097410 [ 5233 ] {} <Fatal> BaseDaemon: 17. /build/build_docker/../src/Interpreters/InterpreterExplainQuery.cpp:409: DB::InterpreterExplainQuery::executeImpl() @ 0x29df7120 in /usr/bin/clickhouse\r\n117772:2023.01.19 02:39:10.321784 [ 5233 ] {} <Fatal> BaseDaemon: 18. /build/build_docker/../src/Interpreters/InterpreterExplainQuery.cpp:87: DB::InterpreterExplainQuery::execute() @ 0x29df680b in /usr/bin/clickhouse\r\n117929:2023.01.19 02:39:10.587370 [ 5233 ] {} <Fatal> BaseDaemon: 19. /build/build_docker/../src/Interpreters/executeQuery.cpp:709: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x2a4ef6ca in /usr/bin/clickhouse\r\n118760:2023.01.19 02:39:10.875258 [ 5233 ] {} <Fatal> BaseDaemon: 20. /build/build_docker/../src/Interpreters/executeQuery.cpp:1108: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x2a4eb4e4 in /usr/bin/clickhouse\r\n118993:2023.01.19 02:39:11.166809 [ 5233 ] {} <Fatal> BaseDaemon: 21. /build/build_docker/../src/Server/TCPHandler.cpp:378: DB::TCPHandler::runImpl() @ 0x2be9c4c6 in /usr/bin/clickhouse\r\n119416:2023.01.19 02:39:11.497499 [ 5233 ] {} <Fatal> BaseDaemon: 22. /build/build_docker/../src/Server/TCPHandler.cpp:1945: DB::TCPHandler::run() @ 0x2bead7a5 in /usr/bin/clickhouse\r\n119497:2023.01.19 02:39:11.527666 [ 5233 ] {} <Fatal> BaseDaemon: 23. /build/build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x30a8aa99 in /usr/bin/clickhouse\r\n119598:2023.01.19 02:39:11.568777 [ 5233 ] {} <Fatal> BaseDaemon: 24. /build/build_docker/../contrib/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x30a8b2dc in /usr/bin/clickhouse\r\n119622:2023.01.19 02:39:11.603897 [ 5233 ] {} <Fatal> BaseDaemon: 25. /build/build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:199: Poco::PooledThread::run() @ 0x30cda454 in /usr/bin/clickhouse\r\n119745:2023.01.19 02:39:11.639627 [ 5233 ] {} <Fatal> BaseDaemon: 26. /build/build_docker/../contrib/poco/Foundation/src/Thread.cpp:56: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x30cd71fa in /usr/bin/clickhouse\r\n119760:2023.01.19 02:39:11.670593 [ 5233 ] {} <Fatal> BaseDaemon: 27. /build/build_docker/../contrib/poco/Foundation/src/Thread_POSIX.cpp:345: Poco::ThreadImpl::runnableEntry(void*) @ 0x30cd5fde in /usr/bin/clickhouse\r\n119761:2023.01.19 02:39:11.670848 [ 5233 ] {} <Fatal> BaseDaemon: 28. ? @ 0x7f8acf8ab609 in ?\r\n119762:2023.01.19 02:39:11.671046 [ 5233 ] {} <Fatal> BaseDaemon: 29. clone @ 0x7f8acf7d0133 in ?\r\n119763:2023.01.19 02:39:11.671202 [ 5233 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n134992:2023.01.19 02:39:28.714967 [ 648 ] {} <Fatal> Application: Child process was terminated by signal 6.\r\n\r\n```\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-01-18T17:14:33Z"
}