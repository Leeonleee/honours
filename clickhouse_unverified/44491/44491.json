{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44491,
  "instance_id": "ClickHouse__ClickHouse-44491",
  "issue_numbers": [
    "44494",
    "44258"
  ],
  "base_commit": "e49deb740fab90b0aaadad70f4a00f620d55fcd0",
  "patch": "diff --git a/src/Analyzer/SortNode.cpp b/src/Analyzer/SortNode.cpp\nindex 3f91724e9b7e..da1c52ff0ef4 100644\n--- a/src/Analyzer/SortNode.cpp\n+++ b/src/Analyzer/SortNode.cpp\n@@ -91,7 +91,8 @@ bool SortNode::isEqualImpl(const IQueryTreeNode & rhs) const\n void SortNode::updateTreeHashImpl(HashState & hash_state) const\n {\n     hash_state.update(sort_direction);\n-    hash_state.update(nulls_sort_direction);\n+    /// use some determined value if `nulls_sort_direction` is `nullopt`\n+    hash_state.update(nulls_sort_direction.value_or(sort_direction));\n     hash_state.update(with_fill);\n \n     if (collator)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02513_analyzer_sort_msan.reference b/tests/queries/0_stateless/02513_analyzer_sort_msan.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02513_analyzer_sort_msan.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02513_analyzer_sort_msan.sql b/tests/queries/0_stateless/02513_analyzer_sort_msan.sql\nnew file mode 100644\nindex 000000000000..e5beccaff2af\n--- /dev/null\n+++ b/tests/queries/0_stateless/02513_analyzer_sort_msan.sql\n@@ -0,0 +1,8 @@\n+DROP TABLE IF EXISTS products;\n+\n+SET allow_experimental_analyzer = 1;\n+\n+CREATE TABLE products (`price` UInt32) ENGINE = Memory;\n+INSERT INTO products VALUES (1);\n+\n+SELECT rank() OVER (ORDER BY price) AS rank FROM products ORDER BY rank;\n",
  "problem_statement": "MSan: nested ORDER BYs with new analyzer\n**Describe the bug**\r\nMSan report - https://s3.amazonaws.com/clickhouse-test-reports/43905/00ff8b82dc60262ba262c2a2e39a95498b060251/fuzzer_astfuzzermsan//report.html\r\n```\r\n2022.12.21 07:16:36.245599 [ 170 ] {f80a3a19-5191-4791-946c-35498d4d9b9b} <Debug> executeQuery: (from [::ffff:127.0.0.1]:38928) EXPLAIN header = 1 SELECT * FROM (SELECT * FROM (SELECT * FROM numbers(3) ORDER BY number ASC) ORDER BY number DESC) ORDER BY number ASC (stage: Complete)\r\n==167==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n    #0 0x446b1ddd in std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__node_insert_unique_perform[abi:v15000](std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1821:27\r\n    #1 0x446b1ddd in std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__node_insert_unique(std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1852:9\r\n    #2 0x446b1ddd in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique_impl<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:2054:32\r\n    #3 0x446aef02 in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique_extract_key[abi:v15000]<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&, std::__1::__extract_key_fail_tag) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1067:14\r\n    #4 0x446aef02 in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique[abi:v15000]<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1045:14\r\n    #5 0x446aef02 in std::__1::pair<std::__1::__hash_const_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::unordered_set<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::emplace[abi:v15000]<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/unordered_set:659:30\r\n    #6 0x446aef02 in DB::(anonymous namespace)::OrderByLimitByDuplicateEliminationVisitor::visitImpl(std::__1::shared_ptr<DB::IQueryTreeNode>&) build_docker/../src/Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.cpp:40:67\r\n    #7 0x446aef02 in DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::OrderByLimitByDuplicateEliminationVisitor, false>::visit(std::__1::shared_ptr<DB::IQueryTreeNode>&) build_docker/../src/Analyzer/InDepthQueryTreeVisitor.h:52:22\r\n    #8 0x446ae3da in DB::OrderByLimitByDuplicateEliminationPass::run(std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::shared_ptr<DB::Context const>) build_docker/../src/Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.cpp:76:13\r\n    #9 0x444e89e9 in DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>) build_docker/../src/Analyzer/QueryTreePassManager.cpp:99:20\r\n    #10 0x4494092d in DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&) build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:54:29\r\n    #11 0x4494092d in DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context const>) build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:66:18\r\n    #12 0x4432c747 in DB::InterpreterExplainQuery::executeImpl() build_docker/../src/Interpreters/InterpreterExplainQuery.cpp:426:48\r\n    #13 0x44329bd4 in DB::InterpreterExplainQuery::execute() build_docker/../src/Interpreters/InterpreterExplainQuery.cpp:87:20\r\n    #14 0x457706f7 in DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) build_docker/../src/Interpreters/executeQuery.cpp:686:36\r\n    #15 0x45763bfd in DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) build_docker/../src/Interpreters/executeQuery.cpp:1083:30\r\n    #16 0x48fe52b5 in DB::TCPHandler::runImpl() build_docker/../src/Server/TCPHandler.cpp:375:24\r\n    #17 0x49026afd in DB::TCPHandler::run() build_docker/../src/Server/TCPHandler.cpp:1920:9\r\n    #18 0x550d3edd in Poco::Net::TCPServerConnection::start() build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:43:3\r\n    #19 0x550d526e in Poco::Net::TCPServerDispatcher::run() build_docker/../contrib/poco/Net/src/TCPServerDispatcher.cpp:115:20\r\n    #20 0x558357cb in Poco::PooledThread::run() build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:199:14\r\n    #21 0x55830d61 in Poco::(anonymous namespace)::RunnableHolder::run() build_docker/../contrib/poco/Foundation/src/Thread.cpp:55:11\r\n    #22 0x5582cb28 in Poco::ThreadImpl::runnableEntry(void*) build_docker/../contrib/poco/Foundation/src/Thread_POSIX.cpp:345:27\r\n    #23 0x7faa30782608 in start_thread /build/glibc-SzIz7B/glibc-2.31/nptl/pthread_create.c:477:8\r\n    #24 0x7faa306a7132 in __clone /build/glibc-SzIz7B/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n\r\n  Uninitialized value was stored to memory at\r\n    #0 0x4465022b in SipHash::update(char const*, unsigned long) build_docker/../src/Common/SipHash.h:113:13\r\n    #1 0x4465022b in SipHash::update(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) build_docker/../src/Common/SipHash.h:154:9\r\n    #2 0x4465022b in DB::ColumnNode::updateTreeHashImpl(SipHash&) const build_docker/../src/Analyzer/ColumnNode.cpp:84:16\r\n    #3 0x443c88d4 in DB::IQueryTreeNode::getTreeHash() const build_docker/../src/Analyzer/IQueryTreeNode.cpp:186:26\r\n    #4 0x446b16e6 in DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>::QueryTreeNodeWithHash(DB::IQueryTreeNode const*) build_docker/../src/Analyzer/HashUtils.h:19:22\r\n    #5 0x446b16e6 in DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>* std::__1::construct_at[abi:v15000]<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, DB::IQueryTreeNode*, DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>*>(DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>*, DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__memory/construct_at.h:35:48\r\n    #6 0x446b16e6 in void std::__1::allocator_traits<std::__1::allocator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>>>::construct[abi:v15000]<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, DB::IQueryTreeNode*, void, void>(std::__1::allocator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>>&, DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>*, DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:298:9\r\n    #7 0x446b16e6 in std::__1::unique_ptr<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>, std::__1::__hash_node_destructor<std::__1::allocator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>>>> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__construct_node<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:2365:5\r\n    #8 0x446b16e6 in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique_impl<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:2053:25\r\n    #9 0x446aef02 in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique_extract_key[abi:v15000]<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&, std::__1::__extract_key_fail_tag) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1067:14\r\n    #10 0x446aef02 in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique[abi:v15000]<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1045:14\r\n    #11 0x446aef02 in std::__1::pair<std::__1::__hash_const_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::unordered_set<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::emplace[abi:v15000]<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/unordered_set:659:30\r\n    #12 0x446aef02 in DB::(anonymous namespace)::OrderByLimitByDuplicateEliminationVisitor::visitImpl(std::__1::shared_ptr<DB::IQueryTreeNode>&) build_docker/../src/Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.cpp:40:67\r\n    #13 0x446aef02 in DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::OrderByLimitByDuplicateEliminationVisitor, false>::visit(std::__1::shared_ptr<DB::IQueryTreeNode>&) build_docker/../src/Analyzer/InDepthQueryTreeVisitor.h:52:22\r\n    #14 0x446ae3da in DB::OrderByLimitByDuplicateEliminationPass::run(std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::shared_ptr<DB::Context const>) build_docker/../src/Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.cpp:76:13\r\n    #15 0x444e89e9 in DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>) build_docker/../src/Analyzer/QueryTreePassManager.cpp:99:20\r\n    #16 0x4494092d in DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&) build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:54:29\r\n    #17 0x4494092d in DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context const>) build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:66:18\r\n    #18 0x4432c747 in DB::InterpreterExplainQuery::executeImpl() build_docker/../src/Interpreters/InterpreterExplainQuery.cpp:426:48\r\n    #19 0x44329bd4 in DB::InterpreterExplainQuery::execute() build_docker/../src/Interpreters/InterpreterExplainQuery.cpp:87:20\r\n    #20 0x457706f7 in DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) build_docker/../src/Interpreters/executeQuery.cpp:686:36\r\n    #21 0x45763bfd in DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) build_docker/../src/Interpreters/executeQuery.cpp:1083:30\r\n    #22 0x48fe52b5 in DB::TCPHandler::runImpl() build_docker/../src/Server/TCPHandler.cpp:375:24\r\n    #23 0x49026afd in DB::TCPHandler::run() build_docker/../src/Server/TCPHandler.cpp:1920:9\r\n    #24 0x550d3edd in Poco::Net::TCPServerConnection::start() build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:43:3\r\n    #25 0x550d526e in Poco::Net::TCPServerDispatcher::run() build_docker/../contrib/poco/Net/src/TCPServerDispatcher.cpp:115:20\r\n    #26 0x558357cb in Poco::PooledThread::run() build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:199:14\r\n    #27 0x55830d61 in Poco::(anonymous namespace)::RunnableHolder::run() build_docker/../contrib/poco/Foundation/src/Thread.cpp:55:11\r\n    #28 0x5582cb28 in Poco::ThreadImpl::runnableEntry(void*) build_docker/../contrib/poco/Foundation/src/Thread_POSIX.cpp:345:27\r\n    #29 0x7faa30782608 in start_thread /build/glibc-SzIz7B/glibc-2.31/nptl/pthread_create.c:477:8\r\n\r\n  Uninitialized value was stored to memory at\r\n    #0 0x44650043 in SipHash::update(char const*, unsigned long) build_docker/../src/Common/SipHash.h:113:13\r\n    #1 0x44650043 in SipHash::update(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) build_docker/../src/Common/SipHash.h:154:9\r\n    #2 0x44650043 in DB::ColumnNode::updateTreeHashImpl(SipHash&) const build_docker/../src/Analyzer/ColumnNode.cpp:80:16\r\n    #3 0x443c88d4 in DB::IQueryTreeNode::getTreeHash() const build_docker/../src/Analyzer/IQueryTreeNode.cpp:186:26\r\n    #4 0x446b16e6 in DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>::QueryTreeNodeWithHash(DB::IQueryTreeNode const*) build_docker/../src/Analyzer/HashUtils.h:19:22\r\n    #5 0x446b16e6 in DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>* std::__1::construct_at[abi:v15000]<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, DB::IQueryTreeNode*, DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>*>(DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>*, DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__memory/construct_at.h:35:48\r\n    #6 0x446b16e6 in void std::__1::allocator_traits<std::__1::allocator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>>>::construct[abi:v15000]<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, DB::IQueryTreeNode*, void, void>(std::__1::allocator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>>&, DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>*, DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:298:9\r\n    #7 0x446b16e6 in std::__1::unique_ptr<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>, std::__1::__hash_node_destructor<std::__1::allocator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>>>> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__construct_node<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:2365:5\r\n    #8 0x446b16e6 in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique_impl<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:2053:25\r\n    #9 0x446aef02 in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique_extract_key[abi:v15000]<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&, std::__1::__extract_key_fail_tag) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1067:14\r\n    #10 0x446aef02 in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique[abi:v15000]<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1045:14\r\n    #11 0x446aef02 in std::__1::pair<std::__1::__hash_const_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::unordered_set<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::emplace[abi:v15000]<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) build_docker/../contrib/llvm-project/libcxx/include/unordered_set:659:30\r\n    #12 0x446aef02 in DB::(anonymous namespace)::OrderByLimitByDuplicateEliminationVisitor::visitImpl(std::__1::shared_ptr<DB::IQueryTreeNode>&) build_docker/../src/Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.cpp:40:67\r\n    #13 0x446aef02 in DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::OrderByLimitByDuplicateEliminationVisitor, false>::visit(std::__1::shared_ptr<DB::IQueryTreeNode>&) build_docker/../src/Analyzer/InDepthQueryTreeVisitor.h:52:22\r\n    #14 0x446ae3da in DB::OrderByLimitByDuplicateEliminationPass::run(std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::shared_ptr<DB::Context const>) build_docker/../src/Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.cpp:76:13\r\n    #15 0x444e89e9 in DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>) build_docker/../src/Analyzer/QueryTreePassManager.cpp:99:20\r\n    #16 0x4494092d in DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&) build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:54:29\r\n    #17 0x4494092d in DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context const>) build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:66:18\r\n    #18 0x4432c747 in DB::InterpreterExplainQuery::executeImpl() build_docker/../src/Interpreters/InterpreterExplainQuery.cpp:426:48\r\n    #19 0x44329bd4 in DB::InterpreterExplainQuery::execute() build_docker/../src/Interpreters/InterpreterExplainQuery.cpp:87:20\r\n    #20 0x457706f7 in DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) build_docker/../src/Interpreters/executeQuery.cpp:686:36\r\n    #21 0x45763bfd in DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) build_docker/../src/Interpreters/executeQuery.cpp:1083:30\r\n    #22 0x48fe52b5 in DB::TCPHandler::runImpl() build_docker/../src/Server/TCPHandler.cpp:375:24\r\n    #23 0x49026afd in DB::TCPHandler::run() build_docker/../src/Server/TCPHandler.cpp:1920:9\r\n    #24 0x550d3edd in Poco::Net::TCPServerConnection::start() build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:43:3\r\n    #25 0x550d526e in Poco::Net::TCPServerDispatcher::run() build_docker/../contrib/poco/Net/src/TCPServerDispatcher.cpp:115:20\r\n    #26 0x558357cb in Poco::PooledThread::run() build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:199:14\r\n    #27 0x55830d61 in Poco::(anonymous namespace)::RunnableHolder::run() build_docker/../contrib/poco/Foundation/src/Thread.cpp:55:11\r\n    #28 0x5582cb28 in Poco::ThreadImpl::runnableEntry(void*) build_docker/../contrib/poco/Foundation/src/Thread_POSIX.cpp:345:27\r\n    #29 0x7faa30782608 in start_thread /build/glibc-SzIz7B/glibc-2.31/nptl/pthread_create.c:477:8\r\n```\r\n\r\n**How to reproduce**\r\n```\r\nset allow_experimental_analyzer=1;\r\nEXPLAIN header = 1 SELECT * FROM (SELECT * FROM (SELECT * FROM numbers(3) ORDER BY number ASC) ORDER BY number DESC) ORDER BY number ASC;\r\n```\r\ncc @kitaisreal \nAnalyzer: use-of-uninitialized-value in SortNode/SipHash::update\nhttps://s3.amazonaws.com/clickhouse-test-reports/41976/ea5b06023a79dceccae70ad5e3954129050af5a2/fuzzer_astfuzzermsan//report.html\r\n\r\n```\r\n2022.12.14 18:56:32.134997 [ 453 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.12.14 18:56:32.135719 [ 453 ] {} <Fatal> BaseDaemon: (version 22.12.1.1, build id: 149BE79908CE55572FF948EECD3EC781AA69F91A) (from thread 165) (query_id: 73895d08-bd51-4b0f-8a03-4af3a551cc0d) (query: SELECT * FROM (SELECT * FROM test_fetch ORDER BY a ASC, b ASC LIMIT 1, 3) ORDER BY a ASC, b ASC) Received signal sanitizer trap (-3)\r\n2022.12.14 18:56:32.135994 [ 453 ] {} <Fatal> BaseDaemon: Sanitizer trap.\r\n2022.12.14 18:56:32.136328 [ 453 ] {} <Fatal> BaseDaemon: Stack trace: 0x28c42259 0x294e3a9a 0xc272056 0xc286bf3 0x447aca9e 0x447a9bc3 0x447a909b 0x445e29ea 0x458016ce 0x447f2d4c 0x466262c4 0x4661d0de 0x49ee6bb6 0x49f2837e 0x55faef9e 0x55fb032f 0x5671088c 0x5670be22 0x56707be9 0x7f29ec00e609 0x7f29ebf33133\r\n2022.12.14 18:56:32.268904 [ 453 ] {} <Fatal> BaseDaemon: 0.1. inlined from ./build_docker/../src/Common/StackTrace.cpp:334: StackTrace::tryCapture()\r\n2022.12.14 18:56:32.269152 [ 453 ] {} <Fatal> BaseDaemon: 0. ./build_docker/../src/Common/StackTrace.cpp:295: StackTrace::StackTrace() @ 0x28c42259 in /workspace/clickhouse\r\n2022.12.14 18:56:32.530003 [ 453 ] {} <Fatal> BaseDaemon: 1. ./build_docker/../src/Daemon/BaseDaemon.cpp:431: sanitizerDeathCallback() @ 0x294e3a9a in /workspace/clickhouse\r\n2022.12.14 18:56:38.174160 [ 453 ] {} <Fatal> BaseDaemon: 2. __sanitizer::Die() @ 0xc272056 in /workspace/clickhouse\r\n2022.12.14 18:56:43.596037 [ 453 ] {} <Fatal> BaseDaemon: 3. ? @ 0xc286bf3 in /workspace/clickhouse\r\n2022.12.14 18:56:43.653110 [ 453 ] {} <Fatal> BaseDaemon: 4.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1822: std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__node_insert_unique_perform[abi:v15000](std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*)\r\n2022.12.14 18:56:43.653293 [ 453 ] {} <Fatal> BaseDaemon: 4.2. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1852: std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__node_insert_unique(std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*)\r\n2022.12.14 18:56:43.653360 [ 453 ] {} <Fatal> BaseDaemon: 4. ./build_docker/../contrib/llvm-project/libcxx/include/__hash_table:2054: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, void*>*>, bool> std::__1::__hash_table<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>, std::__1::hash<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::equal_to<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>, std::__1::allocator<DB::QueryTreeNodeWithHash<DB::IQueryTreeNode const*>>>::__emplace_unique_impl<DB::IQueryTreeNode*>(DB::IQueryTreeNode*&&) @ 0x447aca9e in /workspace/clickhouse\r\n2022.12.14 18:56:43.702494 [ 453 ] {} <Fatal> BaseDaemon: 5.1. inlined from ./build_docker/../src/Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.cpp:0: DB::(anonymous namespace)::OrderByLimitByDuplicateEliminationVisitor::visitImpl(std::__1::shared_ptr<DB::IQueryTreeNode>&)\r\n2022.12.14 18:56:43.702618 [ 453 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Analyzer/InDepthQueryTreeVisitor.h:52: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::OrderByLimitByDuplicateEliminationVisitor, false>::visit(std::__1::shared_ptr<DB::IQueryTreeNode>&) @ 0x447a9bc3 in /workspace/clickhouse\r\n2022.12.14 18:56:43.748406 [ 453 ] {} <Fatal> BaseDaemon: 6.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1473: ~__hash_table\r\n2022.12.14 18:56:43.748522 [ 453 ] {} <Fatal> BaseDaemon: 6.2. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/unordered_set:615: ~unordered_set\r\n2022.12.14 18:56:43.748593 [ 453 ] {} <Fatal> BaseDaemon: 6.3. inlined from ./build_docker/../src/Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.cpp:14: ~OrderByLimitByDuplicateEliminationVisitor\r\n2022.12.14 18:56:43.748656 [ 453 ] {} <Fatal> BaseDaemon: 6. ./build_docker/../src/Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.cpp:77: DB::OrderByLimitByDuplicateEliminationPass::run(std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::shared_ptr<DB::Context const>) @ 0x447a909b in /workspace/clickhouse\r\n2022.12.14 18:56:43.820936 [ 453 ] {} <Fatal> BaseDaemon: 7. ./build_docker/../src/Analyzer/QueryTreePassManager.cpp:97: DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>) @ 0x445e29ea in /workspace/clickhouse\r\n2022.12.14 18:56:43.939236 [ 453 ] {} <Fatal> BaseDaemon: 8.1. inlined from ./build_docker/../src/Analyzer/QueryTreePassManager.h:13: ~QueryTreePassManager\r\n2022.12.14 18:56:43.939399 [ 453 ] {} <Fatal> BaseDaemon: 8.2. inlined from ./build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:57: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&)\r\n2022.12.14 18:56:43.939482 [ 453 ] {} <Fatal> BaseDaemon: 8. ./build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:66: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context const>) @ 0x458016ce in /workspace/clickhouse\r\n2022.12.14 18:56:44.063399 [ 453 ] {} <Fatal> BaseDaemon: 9. ./build_docker/../src/Interpreters/InterpreterFactory.cpp:0: DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x447f2d4c in /workspace/clickhouse\r\n2022.12.14 18:56:44.722138 [ 453 ] {} <Fatal> BaseDaemon: 10. ./build_docker/../src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x466262c4 in /workspace/clickhouse\r\n2022.12.14 18:56:45.438761 [ 453 ] {} <Fatal> BaseDaemon: 11. ./build_docker/../src/Interpreters/executeQuery.cpp:1083: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x4661d0de in /workspace/clickhouse\r\n```\n",
  "hints_text": "\n@kssenii, full msan report is required, stacktrace is not enough (see https://github.com/ClickHouse/ClickHouse/issues/43736)\nhttps://pastila.nl/?0087be59/52844c9c3d22a74361cded455e2d3d82\nLooks like some frames are sill missing \nHere's the full report: https://pastila.nl/?0087be59/063b0e0124d093609c4c0722cd94fb6d\r\n(I used `zgrep -Fav \"2022.12.14 18:5\" server.log.gz | tail -500` to obtain it)\nThe root cause is that `SortNode::updateTreeHashImpl` does not check if `nulls_sort_direction` has a value and the generic implementation of `SipHash::update` does not handle `std::optional` correctly\n@kitaisreal this is related to Analyzer.",
  "created_at": "2022-12-21T15:03:46Z",
  "modified_files": [
    "src/Analyzer/SortNode.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02513_analyzer_sort_msan.reference",
    "b/tests/queries/0_stateless/02513_analyzer_sort_msan.sql"
  ]
}