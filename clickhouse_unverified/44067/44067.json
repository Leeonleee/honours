{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44067,
  "instance_id": "ClickHouse__ClickHouse-44067",
  "issue_numbers": [
    "44066"
  ],
  "base_commit": "21d617bd75c988da85bd14cabefcc11a30edcd66",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionQuantile.h b/src/AggregateFunctions/AggregateFunctionQuantile.h\nindex 6e7f88d3f8c1..39a9e09dc640 100644\n--- a/src/AggregateFunctions/AggregateFunctionQuantile.h\n+++ b/src/AggregateFunctions/AggregateFunctionQuantile.h\n@@ -170,7 +170,7 @@ class AggregateFunctionQuantile final\n             {\n                 auto & data_to = assert_cast<ColumnVector<FloatReturnType> &>(arr_to.getData()).getData();\n                 size_t old_size = data_to.size();\n-                data_to.resize(data_to.size() + size);\n+                data_to.resize(old_size + size);\n \n                 data.getManyFloat(levels.levels.data(), levels.permutation.data(), size, data_to.data() + old_size);\n             }\n@@ -178,7 +178,7 @@ class AggregateFunctionQuantile final\n             {\n                 auto & data_to = static_cast<ColVecType &>(arr_to.getData()).getData();\n                 size_t old_size = data_to.size();\n-                data_to.resize(data_to.size() + size);\n+                data_to.resize(old_size + size);\n \n                 data.getMany(levels.levels.data(), levels.permutation.data(), size, data_to.data() + old_size);\n             }\ndiff --git a/src/AggregateFunctions/QuantileReservoirSampler.h b/src/AggregateFunctions/QuantileReservoirSampler.h\nindex 4d36943cd7c9..70127bcb8658 100644\n--- a/src/AggregateFunctions/QuantileReservoirSampler.h\n+++ b/src/AggregateFunctions/QuantileReservoirSampler.h\n@@ -55,6 +55,9 @@ struct QuantileReservoirSampler\n     /// Get the value of the `level` quantile. The level must be between 0 and 1.\n     Value get(Float64 level)\n     {\n+        if (data.empty())\n+            return {};\n+\n         if constexpr (is_decimal<Value>)\n             return Value(static_cast<typename Value::NativeType>(data.quantileInterpolated(level)));\n         else\n@@ -65,11 +68,22 @@ struct QuantileReservoirSampler\n     /// indices - an array of index levels such that the corresponding elements will go in ascending order.\n     void getMany(const Float64 * levels, const size_t * indices, size_t size, Value * result)\n     {\n+        bool is_empty = data.empty();\n+\n         for (size_t i = 0; i < size; ++i)\n-            if constexpr (is_decimal<Value>)\n-                result[indices[i]] = Value(static_cast<typename Value::NativeType>(data.quantileInterpolated(levels[indices[i]])));\n+        {\n+            if (is_empty)\n+            {\n+                result[i] = Value{};\n+            }\n             else\n-                result[indices[i]] = Value(data.quantileInterpolated(levels[indices[i]]));\n+            {\n+                if constexpr (is_decimal<Value>)\n+                    result[indices[i]] = Value(static_cast<typename Value::NativeType>(data.quantileInterpolated(levels[indices[i]])));\n+                else\n+                    result[indices[i]] = Value(data.quantileInterpolated(levels[indices[i]]));\n+            }\n+        }\n     }\n \n     /// The same, but in the case of an empty state, NaN is returned.\ndiff --git a/src/AggregateFunctions/QuantileReservoirSamplerDeterministic.h b/src/AggregateFunctions/QuantileReservoirSamplerDeterministic.h\nindex c74ab49c4ba6..b8938fcaeca7 100644\n--- a/src/AggregateFunctions/QuantileReservoirSamplerDeterministic.h\n+++ b/src/AggregateFunctions/QuantileReservoirSamplerDeterministic.h\n@@ -55,6 +55,9 @@ struct QuantileReservoirSamplerDeterministic\n     /// Get the value of the `level` quantile. The level must be between 0 and 1.\n     Value get(Float64 level)\n     {\n+        if (data.empty())\n+            return {};\n+\n         if constexpr (is_decimal<Value>)\n             return static_cast<typename Value::NativeType>(data.quantileInterpolated(level));\n         else\n@@ -65,11 +68,22 @@ struct QuantileReservoirSamplerDeterministic\n     /// indices - an array of index levels such that the corresponding elements will go in ascending order.\n     void getMany(const Float64 * levels, const size_t * indices, size_t size, Value * result)\n     {\n+        bool is_empty = data.empty();\n+\n         for (size_t i = 0; i < size; ++i)\n-            if constexpr (is_decimal<Value>)\n-                result[indices[i]] = static_cast<typename Value::NativeType>(data.quantileInterpolated(levels[indices[i]]));\n+        {\n+            if (is_empty)\n+            {\n+                result[i] = Value{};\n+            }\n             else\n-                result[indices[i]] = static_cast<Value>(data.quantileInterpolated(levels[indices[i]]));\n+            {\n+                if constexpr (is_decimal<Value>)\n+                    result[indices[i]] = static_cast<typename Value::NativeType>(data.quantileInterpolated(levels[indices[i]]));\n+                else\n+                    result[indices[i]] = static_cast<Value>(data.quantileInterpolated(levels[indices[i]]));\n+            }\n+        }\n     }\n \n     /// The same, but in the case of an empty state, NaN is returned.\ndiff --git a/src/AggregateFunctions/ReservoirSampler.h b/src/AggregateFunctions/ReservoirSampler.h\nindex 487cc4167f01..b59f75b377e7 100644\n--- a/src/AggregateFunctions/ReservoirSampler.h\n+++ b/src/AggregateFunctions/ReservoirSampler.h\n@@ -103,6 +103,11 @@ class ReservoirSampler\n         return total_values;\n     }\n \n+    bool empty() const\n+    {\n+        return samples.empty();\n+    }\n+\n     T quantileNearest(double level)\n     {\n         if (samples.empty())\ndiff --git a/src/AggregateFunctions/ReservoirSamplerDeterministic.h b/src/AggregateFunctions/ReservoirSamplerDeterministic.h\nindex 557fd93a3a90..39c962242f97 100644\n--- a/src/AggregateFunctions/ReservoirSamplerDeterministic.h\n+++ b/src/AggregateFunctions/ReservoirSamplerDeterministic.h\n@@ -95,6 +95,11 @@ class ReservoirSamplerDeterministic\n         return total_values;\n     }\n \n+    bool empty() const\n+    {\n+        return samples.empty();\n+    }\n+\n     T quantileNearest(double level)\n     {\n         if (samples.empty())\ndiff --git a/src/Daemon/BaseDaemon.cpp b/src/Daemon/BaseDaemon.cpp\nindex 7283973007b1..57a4da4b68ef 100644\n--- a/src/Daemon/BaseDaemon.cpp\n+++ b/src/Daemon/BaseDaemon.cpp\n@@ -311,19 +311,29 @@ class SignalListener : public Poco::Runnable\n                 DB::CurrentThread::attachInternalTextLogsQueue(logs_queue, DB::LogsLevel::trace);\n         }\n \n+        std::string signal_description = \"Unknown signal\";\n+\n+        /// Some of these are not really signals, but our own indications on failure reason.\n+        if (sig == StdTerminate)\n+            signal_description = \"std::terminate\";\n+        else if (sig == SanitizerTrap)\n+            signal_description = \"sanitizer trap\";\n+        else if (sig >= 0)\n+            signal_description = strsignal(sig); // NOLINT(concurrency-mt-unsafe) // it is not thread-safe but ok in this context\n+\n         LOG_FATAL(log, \"########################################\");\n \n         if (query_id.empty())\n         {\n             LOG_FATAL(log, \"(version {}{}, build id: {}) (from thread {}) (no query) Received signal {} ({})\",\n                 VERSION_STRING, VERSION_OFFICIAL, daemon.build_id,\n-                thread_num, strsignal(sig), sig); // NOLINT(concurrency-mt-unsafe) // it is not thread-safe but ok in this context\n+                thread_num, signal_description, sig);\n         }\n         else\n         {\n             LOG_FATAL(log, \"(version {}{}, build id: {}) (from thread {}) (query_id: {}) (query: {}) Received signal {} ({})\",\n                 VERSION_STRING, VERSION_OFFICIAL, daemon.build_id,\n-                thread_num, query_id, query, strsignal(sig), sig); // NOLINT(concurrency-mt-unsafe) // it is not thread-safe but ok in this context)\n+                thread_num, query_id, query, signal_description, sig);\n         }\n \n         String error_message;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.reference b/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.reference\nnew file mode 100644\nindex 000000000000..7f49bc212e6e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.reference\n@@ -0,0 +1,25 @@\n+['1970-01-01 00:00:00']\n+['1970-01-01 00:00:00']\n+\n+['1970-01-01 00:00:00']\n+['1970-01-01 00:00:00']\n+['1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00']\n+\n+['1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00']\n+['1970-01-01 00:00:00']\n+['1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00']\n+[18446744073709552000]\n+['1970-01-01 00:00:00']\n+['1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00','1970-01-01 00:00:00']\n+[1.157920892373162e77]\n+[nan]\n+1970-01-01 00:00:00\n+1970-01-01 00:00:00\n+\n+1970-01-01 00:00:00\n+1970-01-01 00:00:00\n+1970-01-01 00:00:00\n+18446744073709552000\n+1970-01-01 00:00:00\n+1.157920892373162e77\n+nan\ndiff --git a/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql b/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql\nnew file mode 100644\nindex 000000000000..d8a8a040a7cb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02499_quantile_nan_ubsan_msan.sql\n@@ -0,0 +1,22 @@\n+SELECT quantiles(0.5)(now()::DateTime('UTC')) WHERE 0;\n+SELECT quantiles(0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;\n+SELECT arrayReduce('quantiles(0.5)', []::Array(DateTime('UTC')));\n+SELECT quantiles(0.5, 1.1754943508222875e-38, 0.0001, -0., 0.0001, -0., 0.0001, 0., 0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;\n+\n+SELECT DISTINCT arrayReduce('quantiles(0.5)', materialize([]::Array(DateTime('UTC')))) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantiles(0, 0.5, 0.9, 1)', materialize([]::Array(DateTime('UTC')))) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantiles(0.5)', [0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFE]) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantilesDeterministic(0.5)', materialize([]::Array(DateTime('UTC'))), []::Array(UInt64)) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantilesDeterministic(0, 0.5, 0.9, 1)', materialize([]::Array(DateTime('UTC'))), []::Array(UInt64)) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantiles(0.5)', [CAST(-1, 'UInt256'), CAST(-2, 'UInt256')]) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantiles(0.5)', []::Array(Float64)) FROM numbers(1000) LIMIT 10;\n+\n+SELECT quantile(0.5)(now()::DateTime('UTC')) WHERE 0;\n+SELECT quantile(0.5)(now()::DateTime('UTC')) WHERE 0 WITH TOTALS;\n+SELECT arrayReduce('quantile(0.5)', []::Array(DateTime('UTC')));\n+\n+SELECT DISTINCT arrayReduce('quantile(0.5)', materialize([]::Array(DateTime('UTC')))) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantile(0.5)', [0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFE]) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantileDeterministic(0.5)', materialize([]::Array(DateTime('UTC'))), []::Array(UInt64)) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantile(0.5)', [CAST(-1, 'UInt256'), CAST(-2, 'UInt256')]) FROM numbers(1000) LIMIT 10;\n+SELECT DISTINCT arrayReduce('quantile(0.5)', []::Array(Float64)) FROM numbers(1000) LIMIT 10;\n",
  "problem_statement": "MSan and UBSan report in `quantiles`\n```\r\nmilovidov@milovidov-desktop:~$ ~/work/ClickHouse/build_msan/programs/clickhouse local\r\nClickHouse local version 22.10.1.1.\r\n\r\nmilovidov-desktop :) SET empty_result_for_aggregation_by_empty_set = 1, mutations_sync = 1, optimize_functions_to_subcolumns = 1, send_logs_level = 'fatal';\r\n\r\nSET empty_result_for_aggregation_by_empty_set = 1, mutations_sync = 1, optimize_functions_to_subcolumns = 1, send_logs_level = 'fatal'\r\n\r\nQuery id: 175b3ffe-7260-4331-946b-f55687f8c685\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.004 sec. \r\n\r\nmilovidov-desktop :) CREATE TABLE decimal__fuzz_25 (`a` Array(Array(Array(Nullable(UInt16)))), `b` Tuple(Array(Int32), Decimal(9, 7), Float32, FixedString(18), UInt128, Int32), `c` DateTime) ENGINE = Memory\r\n\r\nCREATE TABLE decimal__fuzz_25\r\n(\r\n    `a` Array(Array(Array(Nullable(UInt16)))),\r\n    `b` Tuple(Array(Int32), Decimal(9, 7), Float32, FixedString(18), UInt128, Int32),\r\n    `c` DateTime\r\n)\r\nENGINE = Memory\r\n\r\nQuery id: 14f8366f-ce3e-4909-a3e0-fecb71e5e273\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.016 sec. \r\n\r\nmilovidov-desktop :) SELECT quantiles(0.5, 1.1754943508222875e-38, 0.0001, -0., 0.0001, -0., 0.0001, 0., 0.5)(c) FROM decimal__fuzz_25 WHERE (-2147483647 AND NULL AND NULL) AND (65537 AND (NULL AND NULL)) WITH TOTALS\r\n\r\nSELECT quantiles(0.5, 1.1754943508222875e-38, 0.0001, -0., 0.0001, -0., 0.0001, 0., 0.5)(c)\r\nFROM decimal__fuzz_25\r\nWHERE (-2147483647 AND NULL AND NULL) AND (65537 AND (NULL AND NULL))\r\n    WITH TOTALS\r\n\r\nQuery id: b4497037-7826-40e7-a530-41bfc6bc05bf\r\n\r\n\u2192 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.)                                                                                                                             ==708801==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n    #0 0x3f166215 in DateLUTImpl::findIndex(long) const build_msan/./src/Common/DateLUTImpl.h:229:29\r\n    #1 0x3f166215 in DateLUTImpl::toDateTimeComponents(long) const build_msan/./src/Common/DateLUTImpl.h:1174:32\r\n    #2 0x3f166215 in LocalDateTime::init(long, DateLUTImpl const&) build_msan/./src/Common/LocalDateTime.h:34:64\r\n    #3 0x3f166215 in LocalDateTime::LocalDateTime(long, DateLUTImpl const&) build_msan/./src/Common/LocalDateTime.h:65:9\r\n    #4 0x3f166215 in void DB::writeDateTimeText<(char)45, (char)58, (char)32>(long, DB::WriteBuffer&, DateLUTImpl const&) build_msan/./src/IO/WriteHelpers.h:759:84\r\n    #5 0x3f166215 in DB::SerializationDateTime::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const build_msan/./src/DataTypes/Serializations/SerializationDateTime.cpp:49:13\r\n    #6 0x3f166d4d in DB::SerializationDateTime::serializeTextQuoted(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const build_msan/./src/DataTypes/Serializations/SerializationDateTime.cpp:84:5\r\n    #7 0x3f1403a2 in DB::SerializationArray::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const::$_0::operator()(DB::IColumn const&, unsigned long) const build_msan/./src/DataTypes/Serializations/SerializationArray.cpp:468:21\r\n    #8 0x3f1403a2 in void DB::serializeTextImpl<DB::SerializationArray::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const::$_0>(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::SerializationArray::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const::$_0&&) build_msan/./src/DataTypes/Serializations/SerializationArray.cpp:397:9\r\n    #9 0x3f1403a2 in DB::SerializationArray::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const build_msan/./src/DataTypes/Serializations/SerializationArray.cpp:465:5\r\n    #10 0x46a81dd9 in DB::PrettyBlockOutputFormat::calculateWidths(DB::Block const&, DB::Chunk const&, std::__1::vector<DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>, std::__1::allocator<DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>>>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>&) build_msan/./src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp:65:32\r\n    #11 0x46a961fd in DB::PrettyCompactBlockOutputFormat::writeChunk(DB::Chunk const&, DB::IOutputFormat::PortKind) build_msan/./src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp:188:5\r\n    #12 0x46a8ab1d in DB::PrettyBlockOutputFormat::write(DB::Chunk, DB::IOutputFormat::PortKind) build_msan/./src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp:166:5\r\n    #13 0x46a8ab1d in DB::PrettyBlockOutputFormat::consumeTotals(DB::Chunk) build_msan/./src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp:392:5\r\n    #14 0x4611f86c in DB::IOutputFormat::setTotals(DB::Block const&) build_msan/./src/Processors/Formats/IOutputFormat.h:65:9\r\n    #15 0x460de809 in DB::ClientBase::onTotals(DB::Block&, std::__1::shared_ptr<DB::IAST>) build_msan/./src/Client/ClientBase.cpp:455:20\r\n    #16 0x460de809 in DB::ClientBase::receiveAndProcessPacket(std::__1::shared_ptr<DB::IAST>, bool) build_msan/./src/Client/ClientBase.cpp:898:17\r\n    #17 0x460dd205 in DB::ClientBase::receiveResult(std::__1::shared_ptr<DB::IAST>) build_msan/./src/Client/ClientBase.cpp:853:18\r\n    #18 0x460dbbed in DB::ClientBase::processOrdinaryQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::IAST>) build_msan/./src/Client/ClientBase.cpp:777:13\r\n    #19 0x460d8073 in DB::ClientBase::processParsedSingleQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::IAST>, std::__1::optional<bool>, bool) build_msan/./src/Client/ClientBase.cpp:1528:13\r\n    #20 0x460d5078 in DB::ClientBase::processTextAsSingleQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) build_msan/./src/Client/ClientBase.cpp:717:9\r\n    #21 0x460fc9ed in DB::ClientBase::processQueryText(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) build_msan/./src/Client/ClientBase.cpp:1908:9\r\n    #22 0x461035e7 in DB::ClientBase::runInteractive() build_msan/./src/Client/ClientBase.cpp:2080:18\r\n    #23 0x27287279 in DB::LocalServer::main(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) build_msan/./programs/local/LocalServer.cpp\r\n    #24 0x5205e555 in Poco::Util::Application::run() build_msan/./contrib/poco/Util/src/Application.cpp:334:8\r\n    #25 0x2729f183 in mainEntryClickHouseLocal(int, char**) build_msan/./programs/local/LocalServer.cpp:781:20\r\n    #26 0xcde8807 in main build_msan/./programs/main.cpp:482:12\r\n    #27 0x7fd7a4824d8f in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n    #28 0x7fd7a4824e3f in __libc_start_main csu/../csu/libc-start.c:392:3\r\n    #29 0xcd5c5ed in _start (/home/milovidov/work/ClickHouse/build_msan/programs/clickhouse+0xcd5c5ed) (BuildId: 0ecca0c33cf1bb68daa100c28d244fb4b9431b4f)\r\n\r\n  Uninitialized value was stored to memory at\r\n    #0 0xcd915d6 in realloc /home/milovidov/work/llvm-project/compiler-rt/lib/msan/msan_interceptors.cpp:910:3\r\n    #1 0x26d95e2d in Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long) build_msan/./src/Common/Allocator.h:134:30\r\n    #2 0xce06288 in void DB::PODArrayBase<4ul, 4096ul, Allocator<false, false>, 15ul, 16ul>::resize<>(unsigned long) (/home/milovidov/work/ClickHouse/build_msan/programs/clickhouse+0xce06288) (BuildId: 0ecca0c33cf1bb68daa100c28d244fb4b9431b4f)\r\n    #3 0x2980e00e in DB::AggregateFunctionQuantile<unsigned int, DB::QuantileReservoirSampler<unsigned int>, DB::NameQuantiles, false, void, true>::insertResultInto(char*, DB::IColumn&, DB::Arena*) const build_msan/./src/AggregateFunctions/AggregateFunctionQuantile.h:181:25\r\n    #4 0x4339b130 in DB::ColumnAggregateFunction::convertToValues(COW<DB::IColumn>::mutable_ptr<DB::IColumn>) build_msan/./src/Columns/ColumnAggregateFunction.cpp:168:15\r\n    #5 0x4710cfd0 in DB::finalizeChunk(DB::Chunk&, std::__1::vector<bool, std::__1::allocator<bool>> const&) build_msan/./src/Processors/Transforms/finalizeChunk.cpp:26:18\r\n    #6 0x47072b3c in DB::TotalsHavingTransform::prepareTotals() build_msan/./src/Processors/Transforms/TotalsHavingTransform.cpp:294:5\r\n    #7 0x4707249e in DB::TotalsHavingTransform::work() build_msan/./src/Processors/Transforms/TotalsHavingTransform.cpp:143:9\r\n    #8 0x4664aded in DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) build_msan/./src/Processors/Executors/ExecutionThreadContext.cpp:47:26\r\n    #9 0x4664aded in DB::ExecutionThreadContext::executeTask() build_msan/./src/Processors/Executors/ExecutionThreadContext.cpp:92:9\r\n    #10 0x4661117c in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) build_msan/./src/Processors/Executors/PipelineExecutor.cpp:228:26\r\n    #11 0x46616d6b in DB::PipelineExecutor::executeSingleThread(unsigned long) build_msan/./src/Processors/Executors/PipelineExecutor.cpp:194:5\r\n    #12 0x46616d6b in DB::PipelineExecutor::spawnThreads()::$_0::operator()() const build_msan/./src/Processors/Executors/PipelineExecutor.cpp:315:17\r\n    #13 0x46616d6b in decltype(static_cast<DB::PipelineExecutor::spawnThreads()::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) build_msan/./contrib/libcxx/include/type_traits:3648:23\r\n    #14 0x46616d6b in decltype(auto) std::__1::__apply_tuple_impl<DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&>(DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) build_msan/./contrib/libcxx/include/tuple:1595:1\r\n    #15 0x46616d6b in decltype(auto) std::__1::apply<DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&>(DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&) build_msan/./contrib/libcxx/include/tuple:1604:1\r\n    #16 0x46616d6b in ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()::operator()() build_msan/./src/Common/ThreadPool.h:193:13\r\n    #17 0x46616d6b in decltype(static_cast<DB::PipelineExecutor::spawnThreads()::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(DB::PipelineExecutor::spawnThreads()::$_0&&) build_msan/./contrib/libcxx/include/type_traits:3640:23\r\n    #18 0x46616d6b in void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&) build_msan/./contrib/libcxx/include/__functional/invoke.h:61:9\r\n    #19 0x46616d6b in std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()>::operator()() build_msan/./contrib/libcxx/include/__functional/function.h:230:12\r\n    #20 0x46616d6b in void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) build_msan/./contrib/libcxx/include/__functional/function.h:711:16\r\n    #21 0x2712a290 in std::__1::__function::__policy_func<void ()>::operator()() const build_msan/./contrib/libcxx/include/__functional/function.h:843:16\r\n    #22 0x2712a290 in std::__1::function<void ()>::operator()() const build_msan/./contrib/libcxx/include/__functional/function.h:1184:12\r\n    #23 0x2712a290 in ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_msan/./src/Common/ThreadPool.cpp:294:17\r\n    #24 0x27137182 in void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_msan/./src/Common/ThreadPool.cpp:144:73\r\n    #25 0x27137182 in decltype(static_cast<void>(fp)()) std::__1::__invoke<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_msan/./contrib/libcxx/include/type_traits:3640:23\r\n    #26 0x27137182 in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_msan/./contrib/libcxx/include/thread:282:5\r\n    #27 0x27137182 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_msan/./contrib/libcxx/include/thread:293:5\r\n    #28 0x7fd7a488fb42 in start_thread nptl/pthread_create.c:442:8\r\n\r\n  Uninitialized value was created by a heap allocation\r\n    #0 0xcd91890 in malloc /home/milovidov/work/llvm-project/compiler-rt/lib/msan/msan_interceptors.cpp:922:3\r\n    #1 0x26d949ec in Allocator<false, false>::allocNoTrack(unsigned long, unsigned long) build_msan/./src/Common/Allocator.h:227:27\r\n    #2 0xce070a4 in void DB::PODArrayBase<4ul, 4096ul, Allocator<false, false>, 15ul, 16ul>::alloc<>(unsigned long) (/home/milovidov/work/ClickHouse/build_msan/programs/clickhouse+0xce070a4) (BuildId: 0ecca0c33cf1bb68daa100c28d244fb4b9431b4f)\r\n    #3 0x43b5bda1 in void DB::PODArrayBase<4ul, 4096ul, Allocator<false, false>, 15ul, 16ul>::realloc<>(unsigned long) build_msan/./src/Common/PODArray.h:159:13\r\n    #4 0x43b5bda1 in void DB::PODArrayBase<4ul, 4096ul, Allocator<false, false>, 15ul, 16ul>::reserve<>(unsigned long) build_msan/./src/Common/PODArray.h:238:13\r\n    #5 0x43b5bda1 in DB::ColumnVector<unsigned int>::reserve(unsigned long) build_msan/./src/Columns/ColumnVector.h:251:14\r\n    #6 0x433c81bc in DB::ColumnArray::reserve(unsigned long) build_msan/./src/Columns/ColumnArray.cpp:426:15\r\n    #7 0x4339a624 in DB::ColumnAggregateFunction::convertToValues(COW<DB::IColumn>::mutable_ptr<DB::IColumn>) build_msan/./src/Columns/ColumnAggregateFunction.cpp:150:10\r\n    #8 0x4710cfd0 in DB::finalizeChunk(DB::Chunk&, std::__1::vector<bool, std::__1::allocator<bool>> const&) build_msan/./src/Processors/Transforms/finalizeChunk.cpp:26:18\r\n    #9 0x47072b3c in DB::TotalsHavingTransform::prepareTotals() build_msan/./src/Processors/Transforms/TotalsHavingTransform.cpp:294:5\r\n    #10 0x4707249e in DB::TotalsHavingTransform::work() build_msan/./src/Processors/Transforms/TotalsHavingTransform.cpp:143:9\r\n    #11 0x4664aded in DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) build_msan/./src/Processors/Executors/ExecutionThreadContext.cpp:47:26\r\n    #12 0x4664aded in DB::ExecutionThreadContext::executeTask() build_msan/./src/Processors/Executors/ExecutionThreadContext.cpp:92:9\r\n    #13 0x4661117c in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) build_msan/./src/Processors/Executors/PipelineExecutor.cpp:228:26\r\n    #14 0x46616d6b in DB::PipelineExecutor::executeSingleThread(unsigned long) build_msan/./src/Processors/Executors/PipelineExecutor.cpp:194:5\r\n    #15 0x46616d6b in DB::PipelineExecutor::spawnThreads()::$_0::operator()() const build_msan/./src/Processors/Executors/PipelineExecutor.cpp:315:17\r\n    #16 0x46616d6b in decltype(static_cast<DB::PipelineExecutor::spawnThreads()::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) build_msan/./contrib/libcxx/include/type_traits:3648:23\r\n    #17 0x46616d6b in decltype(auto) std::__1::__apply_tuple_impl<DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&>(DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) build_msan/./contrib/libcxx/include/tuple:1595:1\r\n    #18 0x46616d6b in decltype(auto) std::__1::apply<DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&>(DB::PipelineExecutor::spawnThreads()::$_0&, std::__1::tuple<>&) build_msan/./contrib/libcxx/include/tuple:1604:1\r\n    #19 0x46616d6b in ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()::operator()() build_msan/./src/Common/ThreadPool.h:193:13\r\n    #20 0x46616d6b in decltype(static_cast<DB::PipelineExecutor::spawnThreads()::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(DB::PipelineExecutor::spawnThreads()::$_0&&) build_msan/./contrib/libcxx/include/type_traits:3640:23\r\n    #21 0x46616d6b in void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&) build_msan/./contrib/libcxx/include/__functional/invoke.h:61:9\r\n    #22 0x46616d6b in std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()>::operator()() build_msan/./contrib/libcxx/include/__functional/function.h:230:12\r\n    #23 0x46616d6b in void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) build_msan/./contrib/libcxx/include/__functional/function.h:711:16\r\n    #24 0x2712a290 in std::__1::__function::__policy_func<void ()>::operator()() const build_msan/./contrib/libcxx/include/__functional/function.h:843:16\r\n    #25 0x2712a290 in std::__1::function<void ()>::operator()() const build_msan/./contrib/libcxx/include/__functional/function.h:1184:12\r\n    #26 0x2712a290 in ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_msan/./src/Common/ThreadPool.cpp:294:17\r\n    #27 0x27137182 in void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_msan/./src/Common/ThreadPool.cpp:144:73\r\n    #28 0x27137182 in decltype(static_cast<void>(fp)()) std::__1::__invoke<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_msan/./contrib/libcxx/include/type_traits:3640:23\r\n    #29 0x27137182 in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_msan/./contrib/libcxx/include/thread:282:5\r\n    #30 0x27137182 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_msan/./contrib/libcxx/include/thread:293:5\r\n    #31 0x7fd7a488fb42 in start_thread nptl/pthread_create.c:442:8\r\n\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value build_msan/./src/Common/DateLUTImpl.h:229:29 in DateLUTImpl::findIndex(long) const\r\nExiting\r\n```\r\n\r\n(note: this snipped shows a build from long time ago, but the problem appeared here: https://github.com/ClickHouse/ClickHouse/pull/43308)\n",
  "hints_text": "```\r\nSELECT quantiles(0.5, 1.1754943508222875e-38, 0.0001, -0., 0.0001, -0., 0.0001, 0., 0.5)(now()) WHERE 0 WITH TOTALS\r\n```\n```\r\nSELECT quantiles(0.5)(now()) WHERE 0 WITH TOTALS\r\n```\n```\r\nSELECT quantiles(0.5)(now()) WHERE 0\r\n```\n```\r\nyes \"SELECT quantiles(0.5)(now()) WHERE 0;\" | head -n1000 | clickhouse-local --multiquery | uniq\r\n```\n```\r\nSELECT arrayReduce('quantiles(0.5)', []::Array(DateTime))\r\n```\n```\r\nSELECT DISTINCT arrayReduce('quantiles(0.5)', materialize([]::Array(DateTime))) FROM system.numbers LIMIT 10\r\n```\nAll versions vulnerable:\r\n22.10: https://fiddle.clickhouse.com/c36e5bfe-d198-468d-b5e5-06bf413fe55e\r\n22.9: https://fiddle.clickhouse.com/346092ac-651d-4fa0-ad52-678c316c1006\r\n22.8: https://fiddle.clickhouse.com/d46979d9-4598-4de2-a573-bb80c508afc3\r\n22.7: https://fiddle.clickhouse.com/df03f7cb-b686-4230-a48c-97a357852062\r\n22.6: https://fiddle.clickhouse.com/96869b40-b79b-4a51-b5d8-b9e86527e7f9\r\n22.5: https://fiddle.clickhouse.com/a86a85fc-529d-46ea-8efa-40172b2a1e2f\r\n22.4: https://fiddle.clickhouse.com/5a1575ca-6cae-494d-af07-e51713185091\r\n22.3: https://fiddle.clickhouse.com/90dea175-0ba3-4dd7-ad7b-60a3ba36efed\r\n\n```\r\nmilovidov@milovidov-desktop:~$ ~/work/ClickHouse/build_ubsan/programs/clickhouse local\r\nClickHouse local version 22.10.1.1.\r\n\r\nmilovidov-desktop :) SELECT DISTINCT arrayReduce('quantiles(0.5)', materialize([]::Array(DateTime))) FROM system.numbers LIMIT 10\r\n\r\nSELECT DISTINCT arrayReduce('quantiles(0.5)', materialize(CAST('[]', 'Array(DateTime)')))\r\nFROM system.numbers\r\nLIMIT 10\r\n\r\nQuery id: c231d699-fe0d-4057-af35-f5d7ab49afcc\r\n\r\n/home/milovidov/work/ClickHouse/src/AggregateFunctions/QuantileReservoirSampler.h:72:44: runtime error: nan is outside the range of representable values of type 'unsigned int'\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /home/milovidov/work/ClickHouse/src/AggregateFunctions/QuantileReservoirSampler.h:72:44 in\r\n```",
  "created_at": "2022-12-09T03:19:51Z"
}