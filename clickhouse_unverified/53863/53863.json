{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53863,
  "instance_id": "ClickHouse__ClickHouse-53863",
  "issue_numbers": [
    "53094"
  ],
  "base_commit": "10898ee96f0373d4efe36fef791f4454955a030b",
  "patch": "diff --git a/docs/en/operations/utilities/clickhouse-local.md b/docs/en/operations/utilities/clickhouse-local.md\nindex 0b17afb7e12d..737c2b81deef 100644\n--- a/docs/en/operations/utilities/clickhouse-local.md\n+++ b/docs/en/operations/utilities/clickhouse-local.md\n@@ -30,7 +30,7 @@ curl https://clickhouse.com/ | sh\n The binary you just downloaded can run all sorts of ClickHouse tools and utilities. If you want to run ClickHouse as a database server, check out the [Quick Start](../../quick-start.mdx).\n :::\n \n-## Query data in a CSV file using SQL\n+## Query data in a file using SQL {#query_data_in_file}\n \n A common use of `clickhouse-local` is to run ad-hoc queries on files: where you don't have to insert the data into a table. `clickhouse-local` can stream the data from a file into a temporary table and execute your SQL.\n \n@@ -57,6 +57,19 @@ The `file` table function creates a table, and you can use `DESCRIBE` to see the\n ./clickhouse local -q \"DESCRIBE file('reviews.tsv')\"\n ```\n \n+:::tip\n+You are allowed to use globs in file name (See [glob substitutions](/docs/en/sql-reference/table-functions/file.md/#globs-in-path)).\n+\n+Examples:\n+\n+```bash\n+./clickhouse local -q \"SELECT * FROM 'reviews*.jsonl'\"\n+./clickhouse local -q \"SELECT * FROM 'review_?.csv'\"\n+./clickhouse local -q \"SELECT * FROM 'review_{1..3}.csv'\"\n+```\n+\n+:::\n+\n ```response\n marketplace\tNullable(String)\n customer_id\tNullable(Int64)\ndiff --git a/docs/ru/operations/utilities/clickhouse-local.md b/docs/ru/operations/utilities/clickhouse-local.md\nindex 61fba2dd7cc8..8851be326d41 100644\n--- a/docs/ru/operations/utilities/clickhouse-local.md\n+++ b/docs/ru/operations/utilities/clickhouse-local.md\n@@ -110,3 +110,42 @@ Read 186 rows, 4.15 KiB in 0.035 sec., 5302 rows/sec., 118.34 KiB/sec.\n \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n ...\n ```\n+\n+## \u0417\u0430\u043f\u0440\u043e\u0441 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e SQL {#query_data_in_file}\n+\n+\u0427\u0430\u0441\u0442\u043e `clickhouse-local` \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0444\u0430\u0439\u043b\u0430\u043c, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443. `clickhouse-local` \u043c\u043e\u0436\u0435\u0442 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0430\u0448 SQL.\n+\n+\u0415\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0442\u043e\u0439 \u0436\u0435 \u043c\u0430\u0448\u0438\u043d\u0435, \u0447\u0442\u043e \u0438 `clickhouse-local`, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0430\u0439\u043b `reviews.tsv` \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0442\u043e\u0432\u0430\u0440\u0430\u0445 Amazon:\n+\n+```bash\n+./clickhouse local -q \"SELECT * FROM 'reviews.tsv'\"\n+```\n+\n+\u042d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\n+\n+```bash\n+./clickhouse local -q \"SELECT * FROM file('reviews.tsv')\"\n+```\n+\n+ClickHouse \u0437\u043d\u0430\u0435\u0442, \u0447\u0442\u043e \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0430\u0442, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0442\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u0435\u0439, \u0438\u0437 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430. \u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u0430\u0442, \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043e\u0434\u0438\u043d \u0438\u0437 [\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 ClickHouse](../../interfaces/formats.md):\n+\n+```bash\n+./clickhouse local -q \"SELECT * FROM file('reviews.tsv', 'TabSeparated')\"\n+```\n+\n+\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b `file` \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `DESCRIBE` \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u043e\u0439 \u0441\u0445\u0435\u043c\u044b:\n+\n+```bash\n+./clickhouse local -q \"DESCRIBE file('reviews.tsv')\"\n+```\n+\n+:::tip\n+\u0412 \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c [\u0428\u0430\u0431\u043b\u043e\u043d\u044b \u043f\u043e\u0438\u0441\u043a\u0430](/docs/ru/sql-reference/table-functions/file.md/#globs-in-path).\n+\n+\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n+\n+```bash\n+./clickhouse local -q \"SELECT * FROM 'reviews*.jsonl'\"\n+./clickhouse local -q \"SELECT * FROM 'review_?.csv'\"\n+./clickhouse local -q \"SELECT * FROM 'review_{1..3}.csv'\"\n+```\ndiff --git a/src/Common/StringUtils/StringUtils.h b/src/Common/StringUtils/StringUtils.h\nindex 8e8df19adeee..2c9331a43e25 100644\n--- a/src/Common/StringUtils/StringUtils.h\n+++ b/src/Common/StringUtils/StringUtils.h\n@@ -318,3 +318,8 @@ inline void trim(std::string & str, char c = ' ')\n     trimRight(str, c);\n     trimLeft(str, c);\n }\n+\n+constexpr bool containsGlobs(const std::string & str)\n+{\n+    return str.find_first_of(\"*?{\") != std::string::npos;\n+}\ndiff --git a/src/Databases/DatabaseFilesystem.cpp b/src/Databases/DatabaseFilesystem.cpp\nindex 59f9ee67d7bd..49f260034db2 100644\n--- a/src/Databases/DatabaseFilesystem.cpp\n+++ b/src/Databases/DatabaseFilesystem.cpp\n@@ -81,22 +81,24 @@ bool DatabaseFilesystem::checkTableFilePath(const std::string & table_path, Cont\n         throw Exception(ErrorCodes::PATH_ACCESS_DENIED, \"File is not inside {}\", user_files_path);\n     }\n \n-    /// Check if the corresponding file exists.\n-    if (!fs::exists(table_path))\n+    if (!containsGlobs(table_path))\n     {\n-        if (throw_on_error)\n-            throw Exception(ErrorCodes::FILE_DOESNT_EXIST, \"File does not exist: {}\", table_path);\n-        else\n-            return false;\n-    }\n-\n-    if (!fs::is_regular_file(table_path))\n-    {\n-        if (throw_on_error)\n-            throw Exception(ErrorCodes::FILE_DOESNT_EXIST,\n-                            \"File is directory, but expected a file: {}\", table_path);\n-        else\n-            return false;\n+        /// Check if the corresponding file exists.\n+        if (!fs::exists(table_path))\n+        {\n+            if (throw_on_error)\n+                throw Exception(ErrorCodes::FILE_DOESNT_EXIST, \"File does not exist: {}\", table_path);\n+            else\n+                return false;\n+        }\n+\n+        if (!fs::is_regular_file(table_path))\n+        {\n+            if (throw_on_error)\n+                throw Exception(ErrorCodes::FILE_DOESNT_EXIST, \"File is directory, but expected a file: {}\", table_path);\n+            else\n+                return false;\n+        }\n     }\n \n     return true;\n@@ -141,19 +143,18 @@ StoragePtr DatabaseFilesystem::getTableImpl(const String & name, ContextPtr cont\n     if (!checkTableFilePath(table_path, context_, throw_on_error))\n         return {};\n \n-    String format = FormatFactory::instance().getFormatFromFileName(table_path, throw_on_error);\n+    auto format = FormatFactory::instance().getFormatFromFileName(table_path, throw_on_error);\n     if (format.empty())\n         return {};\n \n-    /// If the file exists, create a new table using TableFunctionFile and return it.\n-    auto args = makeASTFunction(\"file\", std::make_shared<ASTLiteral>(table_path), std::make_shared<ASTLiteral>(format));\n+    auto ast_function_ptr = makeASTFunction(\"file\", std::make_shared<ASTLiteral>(table_path), std::make_shared<ASTLiteral>(format));\n \n-    auto table_function = TableFunctionFactory::instance().get(args, context_);\n+    auto table_function = TableFunctionFactory::instance().get(ast_function_ptr, context_);\n     if (!table_function)\n         return nullptr;\n \n     /// TableFunctionFile throws exceptions, if table cannot be created.\n-    auto table_storage = table_function->execute(args, context_, name);\n+    auto table_storage = table_function->execute(ast_function_ptr, context_, name);\n     if (table_storage)\n         addTable(name, table_storage);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.reference b/tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.reference\nindex ccc02ad4f345..60464757bdd5 100644\n--- a/tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.reference\n+++ b/tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.reference\n@@ -5,5 +5,11 @@ implicit:\n 4\n Test 2: check Filesystem database\n 4\n+30\n+10\n+4\n+3\n+2\n+1\n Test 3: check show database with Filesystem\n test02707\ndiff --git a/tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.sh b/tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.sh\nindex 7c9095b3d8b3..dabea8a373a2 100755\n--- a/tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.sh\n+++ b/tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.sh\n@@ -15,6 +15,23 @@ echo '2,\"def\",456,\"bacabaa\"' >> $dir/tmp.csv\n echo '3,\"story\",78912,\"acabaab\"' >> $dir/tmp.csv\n echo '4,\"history\",21321321,\"cabaaba\"' >> $dir/tmp.csv\n \n+$CLICKHOUSE_LOCAL -q \"insert into function file('$dir/tmp_numbers_1.csv') select * from numbers(1, 10)\"\n+$CLICKHOUSE_LOCAL -q \"insert into function file('$dir/tmp_numbers_2.csv') select * from numbers(11, 10)\"\n+$CLICKHOUSE_LOCAL -q \"insert into function file('$dir/tmp_numbers_30.csv') select * from numbers(21, 10)\"\n+\n+readonly nested_dir=$dir/nested\n+[[ -d $nested_dir ]] && rm -rd $nested_dir\n+mkdir $nested_dir\n+mkdir $nested_dir/subnested\n+\n+cp ${dir}/tmp_numbers_1.csv ${nested_dir}/nested_tmp_numbers_1.csv\n+cp ${dir}/tmp_numbers_1.csv ${nested_dir}/subnested/subnested_tmp_numbers_1.csv\n+\n+readonly other_nested_dir=$dir/other_nested\n+[[ -d $other_nested_dir ]] && rm -rd $other_nested_dir\n+mkdir $other_nested_dir\n+cp ${dir}/tmp_numbers_1.csv ${other_nested_dir}/tmp_numbers_1.csv\n+\n #################\n echo \"Test 1: check explicit and implicit call of the file table function\"\n \n@@ -29,6 +46,12 @@ $CLICKHOUSE_LOCAL --multiline --multiquery -q \"\"\"\n DROP DATABASE IF EXISTS test;\n CREATE DATABASE test ENGINE = Filesystem('${dir}');\n SELECT COUNT(*) FROM test.\\`tmp.csv\\`;\n+SELECT COUNT(*) FROM test.\\`tmp_numbers_*.csv\\`;\n+SELECT COUNT(*) FROM test.\\`nested/nested_tmp_numbers_1*.csv\\`;\n+SELECT count(DISTINCT _path) FROM test.\\`*.csv\\`;\n+SELECT count(DISTINCT _path) FROM test.\\`**/*.csv\\`;\n+SELECT count(DISTINCT _path) FROM test.\\`**/*.csv\\` WHERE position(_path, '${nested_dir}') > 0;\n+SELECT count(DISTINCT _path) FROM test.\\`**/*.csv\\` WHERE position(_path, '${nested_dir}') = 0;\n DROP DATABASE test;\n \"\"\"\n \ndiff --git a/tests/queries/0_stateless/02722_database_filesystem.reference b/tests/queries/0_stateless/02722_database_filesystem.reference\nindex c65dda7933a5..17f84cfc49ce 100644\n--- a/tests/queries/0_stateless/02722_database_filesystem.reference\n+++ b/tests/queries/0_stateless/02722_database_filesystem.reference\n@@ -3,6 +3,14 @@ Test 1: create filesystem database and check implicit calls\n test1\n 4\n 4\n+30\n+10\n+10\n+4\n+0\n+2\n+0\n+OK\n 4\n Test 2: check DatabaseFilesystem access rights and errors handling on server\n OK\n@@ -13,3 +21,6 @@ OK\n OK\n OK\n OK\n+OK\n+OK\n+OK\ndiff --git a/tests/queries/0_stateless/02722_database_filesystem.sh b/tests/queries/0_stateless/02722_database_filesystem.sh\nindex 99f2191c9915..c21b1af2ff40 100755\n--- a/tests/queries/0_stateless/02722_database_filesystem.sh\n+++ b/tests/queries/0_stateless/02722_database_filesystem.sh\n@@ -19,11 +19,17 @@ echo '3,\"story\",78912,\"acabaab\"' >> ${user_files_tmp_dir}/tmp.csv\n echo '4,\"history\",21321321,\"cabaaba\"' >> ${user_files_tmp_dir}/tmp.csv\n \n tmp_dir=${CLICKHOUSE_TEST_UNIQUE_NAME}\n+\n+$CLICKHOUSE_LOCAL -q \"insert into function file('$user_files_tmp_dir/tmp_numbers_1.csv') select * from numbers(1, 10)\"\n+$CLICKHOUSE_LOCAL -q \"insert into function file('$user_files_tmp_dir/tmp_numbers_2.csv') select * from numbers(11, 10)\"\n+$CLICKHOUSE_LOCAL -q \"insert into function file('$user_files_tmp_dir/tmp_numbers_30.csv') select * from numbers(21, 10)\"\n+\n [[ -d $tmp_dir ]] && rm -rd $tmp_dir\n mkdir $tmp_dir\n cp ${user_files_tmp_dir}/tmp.csv ${tmp_dir}/tmp.csv\n cp ${user_files_tmp_dir}/tmp.csv ${user_files_tmp_dir}/tmp/tmp.csv\n cp ${user_files_tmp_dir}/tmp.csv ${user_files_tmp_dir}/tmp.myext\n+cp ${user_files_tmp_dir}/tmp_numbers_1.csv ${user_files_tmp_dir}/tmp/tmp_numbers_1.csv\n \n #################\n echo \"Test 1: create filesystem database and check implicit calls\"\n@@ -35,6 +41,15 @@ echo $?\n ${CLICKHOUSE_CLIENT} --query \"SHOW DATABASES\" | grep \"test1\"\n ${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`${unique_name}/tmp.csv\\`;\"\n ${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`${unique_name}/tmp/tmp.csv\\`;\"\n+${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`${unique_name}/tmp_numbers_*.csv\\`;\"\n+${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`${unique_name}/tmp/*tmp_numbers_*.csv\\`;\"\n+${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`${unique_name}/*/*tmp_numbers_*.csv\\`;\"\n+${CLICKHOUSE_CLIENT} --query \"SELECT count(DISTINCT _path) FROM test1.\\`${unique_name}/*.csv\\` WHERE startsWith(_path, '${user_files_tmp_dir}')\";\n+${CLICKHOUSE_CLIENT} --query \"SELECT count(DISTINCT _path) FROM test1.\\`${unique_name}/*.csv\\` WHERE not startsWith(_path, '${user_files_tmp_dir}')\";\n+# **/* does not search in the current directory but searches recursively in nested directories.\n+${CLICKHOUSE_CLIENT} --query \"SELECT count(DISTINCT _path) FROM test1.\\`${unique_name}/**/*.csv\\` WHERE startsWith(_path, '${user_files_tmp_dir}')\";\n+${CLICKHOUSE_CLIENT} --query \"SELECT count(DISTINCT _path) FROM test1.\\`${unique_name}/**/*.csv\\` WHERE not startsWith(_path, '${user_files_tmp_dir}')\";\n+${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`tmp_numbers_*.csv\\`;\" 2>&1 | tr '\\n' ' ' | grep -oF \"CANNOT_EXTRACT_TABLE_STRUCTURE\" > /dev/null && echo \"OK\" || echo 'FAIL' ||:\n ${CLICKHOUSE_LOCAL} -q \"SELECT COUNT(*) FROM \\\"${tmp_dir}/tmp.csv\\\"\"\n \n #################\n@@ -42,6 +57,9 @@ echo \"Test 2: check DatabaseFilesystem access rights and errors handling on serv\n # DATABASE_ACCESS_DENIED: Allows list files only inside user_files\n ${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`../tmp.csv\\`;\" 2>&1 | tr '\\n' ' ' | grep -oF \"PATH_ACCESS_DENIED\" > /dev/null && echo \"OK\" || echo 'FAIL' ||:\n ${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`/tmp/tmp.csv\\`;\" 2>&1 | tr '\\n' ' ' | grep -oF \"PATH_ACCESS_DENIED\" > /dev/null && echo \"OK\" || echo 'FAIL' ||:\n+${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`../*/tmp_numbers_*.csv\\`;\" 2>&1 | tr '\\n' ' ' | grep -oF \"PATH_ACCESS_DENIED\" > /dev/null && echo \"OK\" || echo 'FAIL' ||:\n+${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`../tmp_numbers_*.csv\\`;\" 2>&1 | tr '\\n' ' ' | grep -oF \"PATH_ACCESS_DENIED\" > /dev/null && echo \"OK\" || echo 'FAIL' ||:\n+${CLICKHOUSE_CLIENT} --query \"SELECT COUNT(*) FROM test1.\\`../*.csv\\`;\" 2>&1 | tr '\\n' ' ' | grep -oF \"PATH_ACCESS_DENIED\" > /dev/null && echo \"OK\" || echo 'FAIL' ||:\n ${CLICKHOUSE_CLIENT} --multiline --multiquery --query \"\"\"\n USE test1;\n SELECT COUNT(*) FROM \\\"../${tmp_dir}/tmp.csv\\\";\ndiff --git a/tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.reference b/tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.reference\nindex 1e3b82ac1363..8f2c820522c0 100644\n--- a/tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.reference\n+++ b/tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.reference\n@@ -25,3 +25,37 @@ Test 3a: check literal no parsing overflow\n 1\n Test 3b: check literal empty\n 1\n+Test 4: select using * wildcard\n+30\n+30\n+30\n+30\n+30\n+10\n+30\n+10\n+Test 4b: select using ? wildcard\n+20\n+10\n+20\n+10\n+20\n+Test 4c: select using '{' + '}'  wildcards\n+20\n+20\n+1\n+Test 4d: select using ? and * wildcards\n+30\n+30\n+30\n+1\n+30\n+30\n+Test 4e: select using ?, * and '{' + '}' wildcards\n+10\n+20\n+20\n+20\n+Test 4f: recursive search\n+2\n+1\ndiff --git a/tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.sh b/tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.sh\nindex 5cf3b1c88fd4..40b936481e7e 100755\n--- a/tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.sh\n+++ b/tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.sh\n@@ -7,6 +7,8 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n dir=${CLICKHOUSE_TEST_UNIQUE_NAME}\n [[ -d $dir ]] && rm -rd $dir\n mkdir $dir\n+mkdir $dir/nested\n+mkdir $dir/nested/nested\n \n # Create temporary csv file for tests\n echo '\"id\",\"str\",\"int\",\"text\"' > $dir/tmp.csv\n@@ -15,6 +17,14 @@ echo '2,\"def\",456,\"bacabaa\"' >> $dir/tmp.csv\n echo '3,\"story\",78912,\"acabaab\"' >> $dir/tmp.csv\n echo '4,\"history\",21321321,\"cabaaba\"' >> $dir/tmp.csv\n \n+$CLICKHOUSE_LOCAL -q \"insert into function file('$dir/tmp_numbers_1.jsonl') select * from numbers(1, 10)\"\n+$CLICKHOUSE_LOCAL -q \"insert into function file('$dir/tmp_numbers_2.jsonl') select * from numbers(11, 10)\"\n+\n+$CLICKHOUSE_LOCAL -q \"insert into function file('$dir/tmp_numbers_30.jsonl') select * from numbers(21, 10)\"\n+\n+$CLICKHOUSE_LOCAL -q \"insert into function file('$dir/nested/nested_numbers.jsonl') select * from numbers(1)\"\n+$CLICKHOUSE_LOCAL -q \"insert into function file('$dir/nested/nested/nested_nested_numbers.jsonl') select * from numbers(1)\"\n+\n #################\n echo \"Test 1: check double quotes\"\n \n@@ -52,5 +62,48 @@ echo \"Test 3b: check literal empty\"\n \n $CLICKHOUSE_LOCAL -q \"SELECT * FROM ''\" 2>&1 | grep -c \"SYNTAX_ERROR\"\n \n+echo \"Test 4: select using * wildcard\"\n+# Extension is required for auto table structure detection\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/tmp_numbers_*.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/**.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/**********************.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*_numbers_*.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*_nu*ers_*.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*_nu*ers_2.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*tmp_numbers_*.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*tmp_numbers_1*.jsonl'\"\n+\n+echo \"Test 4b: select using ? wildcard\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/tmp_numbers_?.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/tmp_numbers_??.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/??p_numbers??.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/tmp_n?mbers_1.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/t?p_n?mbers_?.jsonl'\"\n+\n+echo \"Test 4c: select using '{' + '}'  wildcards\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/tmp_numbers_{1..3}.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/tmp_numbers_{1,2}.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/tmp_numbers__{1,2}.jsonl'\" 2>&1 | grep -c \"CANNOT_EXTRACT_TABLE_STRUCTURE\"\n+\n+echo \"Test 4d: select using ? and * wildcards\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*?.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/?*.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/?*????.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/?*?***_.jsonl'\" 2>&1 | grep -c \"CANNOT_EXTRACT_TABLE_STRUCTURE\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/?*????_*.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*?*_num*e?s_*.jsonl'\"\n+\n+echo \"Test 4e: select using ?, * and '{' + '}' wildcards\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*?{1,3}.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*?{1..3}.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*?*_num*e?s_{1..3}.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/*?*_num*e?s_{1,2}.jsonl'\"\n+\n+echo \"Test 4f: recursive search\"\n+# /**/* pattern does not look in current directory\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/**/*.jsonl'\"\n+$CLICKHOUSE_LOCAL -q \"SELECT count(*) FROM '$dir/nested/**/*.jsonl'\"\n+\n+\n # Remove temporary dir with files\n rm -rd $dir\n",
  "problem_statement": "Let's make DatabaseFilesystem/S3/HDFS support globs\n**Use case**\r\n\r\nI can write:\r\n```\r\nSELECT * FROM file('*.jsonl')\r\n```\r\n\r\nAnd I can also use the default overlay Filesystem database in clickhouse-local, but only for single files:\r\n```\r\nSELECT * FROM 'test.jsonl'\r\n```\r\n\r\nI want to use it with globs as well:\r\n```\r\nSELECT * FROM '*.jsonl'\r\n```\r\n\n",
  "hints_text": "Please assign me to this task; I'm going to start working on it soon.\r\n\r\n@alexey-milovidov\r\nCould you please clarify the task a bit?\r\n[S3 ](https://clickhouse.com/docs/en/sql-reference/table-functions/s3) already supports globs.\r\n[HDFS](https://clickhouse.com/docs/en/engines/table-engines/integrations/hdfs) also supports globs.\r\n\r\nDo I need to change something in clickhouse-local related to S3/HDFS? Or maybe I just need to make this case work?\r\n```sql\r\nSELECT * FROM 'FILE_NAME*?{1..2}_{1,4}.jsonl'\r\n```",
  "created_at": "2023-08-27T23:52:15Z",
  "modified_files": [
    "docs/en/operations/utilities/clickhouse-local.md",
    "docs/ru/operations/utilities/clickhouse-local.md",
    "src/Common/StringUtils/StringUtils.h",
    "src/Databases/DatabaseFilesystem.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.reference",
    "tests/queries/0_stateless/02707_clickhouse_local_implicit_file_table_function.sh",
    "tests/queries/0_stateless/02722_database_filesystem.reference",
    "tests/queries/0_stateless/02722_database_filesystem.sh",
    "tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.reference",
    "tests/queries/0_stateless/02816_clickhouse_local_table_name_expressions.sh"
  ]
}