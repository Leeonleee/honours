{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73853,
  "instance_id": "ClickHouse__ClickHouse-73853",
  "issue_numbers": [
    "73141"
  ],
  "base_commit": "4764d8800490dc74baa2a81a1adb5f3463f16b45",
  "patch": "diff --git a/src/Databases/SQLite/fetchSQLiteTableStructure.cpp b/src/Databases/SQLite/fetchSQLiteTableStructure.cpp\nindex 91ca45df2e73..601d5dae1f51 100644\n--- a/src/Databases/SQLite/fetchSQLiteTableStructure.cpp\n+++ b/src/Databases/SQLite/fetchSQLiteTableStructure.cpp\n@@ -31,17 +31,14 @@ static DataTypePtr convertSQLiteDataType(String type)\n     DataTypePtr res;\n     type = Poco::toLower(type);\n \n-    if (type == \"tinyint\")\n-        res = std::make_shared<DataTypeInt8>();\n-    else if (type == \"smallint\")\n-        res = std::make_shared<DataTypeInt16>();\n-    else if ((type.starts_with(\"int\") && type != \"int8\") || type == \"mediumint\")\n-        res = std::make_shared<DataTypeInt32>();\n-    else if (type == \"bigint\" || type == \"int8\")\n+    /// The SQLite columns get the INTEGER affinity if the type name contains \"int\". This means variable-length integers up to 8 bytes. The bit width is not really enforced even\n+    /// in a STRICT table, so in general we should treat these columns as Int64. Besides that, we allow some common fixed-width int specifiers for applications to select a\n+    /// particular width, even though it's not enforced in any way by SQLite itself.\n+    /// Docs: https://www.sqlite.org/datatype3.html\n+    /// The most insane quote from there: Note that a declared type of \"FLOATING POINT\" would give INTEGER affinity, not REAL affinity, due to the \"INT\" at the end of \"POINT\".\n+    if (type.find(\"int\") != std::string::npos)\n         res = std::make_shared<DataTypeInt64>();\n-    else if (type == \"float\")\n-        res = std::make_shared<DataTypeFloat32>();\n-    else if (type.starts_with(\"double\") || type == \"real\")\n+    else if (type == \"float\" || type.starts_with(\"double\") || type == \"real\")\n         res = std::make_shared<DataTypeFloat64>();\n     else\n         res = std::make_shared<DataTypeString>(); // No decimal when fetching data through API\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01889_sqlite_read_write.reference b/tests/queries/0_stateless/01889_sqlite_read_write.reference\nindex 9d9c0b2c2900..b20089580d9f 100644\n--- a/tests/queries/0_stateless/01889_sqlite_read_write.reference\n+++ b/tests/queries/0_stateless/01889_sqlite_read_write.reference\n@@ -7,12 +7,12 @@ table4\n table5\n table6\\'\n show creare table:\n-CREATE TABLE SQLite.table1\\n(\\n    `col1` Nullable(String),\\n    `col2` Nullable(Int16)\\n)\\nENGINE = SQLite\n-CREATE TABLE SQLite.table2\\n(\\n    `col1` Nullable(Int32),\\n    `col2` Nullable(String)\\n)\\nENGINE = SQLite\n+CREATE TABLE SQLite.table1\\n(\\n    `col1` Nullable(String),\\n    `col2` Nullable(Int64)\\n)\\nENGINE = SQLite\n+CREATE TABLE SQLite.table2\\n(\\n    `col1` Nullable(Int64),\\n    `col2` Nullable(String)\\n)\\nENGINE = SQLite\n describe table:\n col1\tNullable(String)\t\t\t\t\t\n-col2\tNullable(Int16)\t\t\t\t\t\n-col1\tNullable(Int32)\t\t\t\t\t\n+col2\tNullable(Int64)\t\t\t\t\t\n+col1\tNullable(Int64)\t\t\t\t\t\n col2\tNullable(String)\t\t\t\t\t\n select *:\n line1\t1\n@@ -22,8 +22,24 @@ line3\t3\n 2\ttext2\n 3\ttext3\n test types\n-CREATE TABLE SQLite.table4\\n(\\n    `a` Nullable(Int32),\\n    `b` Nullable(Int32),\\n    `c` Nullable(Int8),\\n    `d` Nullable(Int16),\\n    `e` Nullable(Int32),\\n    `f` Nullable(Int64),\\n    `g` Nullable(Int32),\\n    `h` Nullable(Int64)\\n)\\nENGINE = SQLite\n-CREATE TABLE SQLite.table5\\n(\\n    `a` Nullable(String),\\n    `b` Nullable(String),\\n    `c` Nullable(Float64),\\n    `d` Nullable(Float64),\\n    `e` Nullable(Float64),\\n    `f` Nullable(Float32)\\n)\\nENGINE = SQLite\n+CREATE TABLE SQLite.table4\\n(\\n    `a` Nullable(Int64),\\n    `b` Nullable(Int64),\\n    `c` Nullable(Int64),\\n    `d` Nullable(Int64),\\n    `e` Nullable(Int64),\\n    `f` Nullable(Int64),\\n    `g` Nullable(Int64),\\n    `h` Nullable(Int64)\\n)\\nENGINE = SQLite\n+CREATE TABLE SQLite.table5\\n(\\n    `a` Nullable(String),\\n    `b` Nullable(String),\\n    `c` Nullable(Float64),\\n    `d` Nullable(Float64),\\n    `e` Nullable(Float64),\\n    `f` Nullable(Float64)\\n)\\nENGINE = SQLite\n+populating table4 with integers\n+-9223372036854775808\t-9223372036854775808\t-9223372036854775808\t-9223372036854775808\t-9223372036854775808\t-9223372036854775808\t-9223372036854775808\t-9223372036854775808\n+-2147483648\t-2147483648\t-2147483648\t-2147483648\t-2147483648\t-2147483648\t-2147483648\t-2147483648\n+-32768\t-32768\t-32768\t-32768\t-32768\t-32768\t-32768\t-32768\n+-128\t-128\t-128\t-128\t-128\t-128\t-128\t-128\n+0\t0\t0\t0\t0\t0\t0\t0\n+127\t127\t127\t127\t127\t127\t127\t127\n+128\t128\t128\t128\t128\t128\t128\t128\n+32767\t32767\t32767\t32767\t32767\t32767\t32767\t32767\n+32768\t32768\t32768\t32768\t32768\t32768\t32768\t32768\n+2147483647\t2147483647\t2147483647\t2147483647\t2147483647\t2147483647\t2147483647\t2147483647\n+2147483648\t2147483648\t2147483648\t2147483648\t2147483648\t2147483648\t2147483648\t2147483648\n+9223372036854775807\t9223372036854775807\t9223372036854775807\t9223372036854775807\t9223372036854775807\t9223372036854775807\t9223372036854775807\t9223372036854775807\n+populating table5 with floats\n+a\ta\t0\t0\t0\t0\n+b\tb\t3.141592653589793\t3.141592653589793\t3.141592653589793\t3.141592653589793\n create table engine with table3\n CREATE TABLE default.sqlite_table3\\n(\\n    `col1` String,\\n    `col2` Int32\\n)\\nENGINE = SQLite\n \t1\n@@ -42,9 +58,16 @@ table6_line2\t2\n table6_line3\t3\n test schema inference\n col1\tNullable(String)\t\t\t\t\t\n-col2\tNullable(Int32)\t\t\t\t\t\n+col2\tNullable(Int64)\t\t\t\t\t\n col1\tNullable(String)\t\t\t\t\t\n-col2\tNullable(Int32)\t\t\t\t\t\n+col2\tNullable(Int64)\t\t\t\t\t\n+SQLite truncated int64 value #73141\n+clickhouse\n+2147483648\n+sqlite from clickhouse\n+2147483648\n+sqlite\n+2147483648\n test path in clickhouse-local\n line1\t1\n line2\t2\ndiff --git a/tests/queries/0_stateless/01889_sqlite_read_write.sh b/tests/queries/0_stateless/01889_sqlite_read_write.sh\nindex 9fef8ae8e8ea..5b8aba14eafc 100755\n--- a/tests/queries/0_stateless/01889_sqlite_read_write.sh\n+++ b/tests/queries/0_stateless/01889_sqlite_read_write.sh\n@@ -65,6 +65,27 @@ ${CLICKHOUSE_CLIENT} --query=\"select 'test types'\";\n ${CLICKHOUSE_CLIENT} --query=\"SHOW CREATE TABLE ${CURR_DATABASE}.table4;\" | sed -r 's/(.*SQLite)(.*)/\\1/'\n ${CLICKHOUSE_CLIENT} --query=\"SHOW CREATE TABLE ${CURR_DATABASE}.table5;\" | sed -r 's/(.*SQLite)(.*)/\\1/'\n \n+${CLICKHOUSE_CLIENT} --query=\"select 'populating table4 with integers'\";\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT -9223372036854775808 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT -2147483648 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT -32768 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT -128 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT 0 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT 127 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT 128 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT 32767 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT 32768 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT 2147483647 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT 2147483648 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table4') SELECT 9223372036854775807 AS x, x, x, x, x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"SELECT * FROM ${CURR_DATABASE}.table4 ORDER BY a\"\n+\n+${CLICKHOUSE_CLIENT} --query=\"select 'populating table5 with floats'\";\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table5') SELECT 'a', 'a', 0 AS x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 'table5') SELECT 'b', 'b', 3.141592653589793 AS x, x, x, x;\"\n+${CLICKHOUSE_CLIENT} --query=\"SELECT * FROM ${CURR_DATABASE}.table5 ORDER BY a\"\n+\n+\n ${CLICKHOUSE_CLIENT} --query=\"DROP DATABASE IF EXISTS ${CURR_DATABASE}\"\n \n \n@@ -94,6 +115,20 @@ ${CLICKHOUSE_CLIENT} --query=\"DESCRIBE TABLE sqlite_table3_inferred_function;\"\n ${CLICKHOUSE_CLIENT} --query=\"DROP TABLE sqlite_table3_inferred_engine;\"\n ${CLICKHOUSE_CLIENT} --query=\"DROP TABLE sqlite_table3_inferred_function;\"\n \n+${CLICKHOUSE_CLIENT} --query=\"select 'SQLite truncated int64 value #73141'\";\n+sqlite3 \"${DB_PATH}\" 'CREATE TABLE t0 (c0 INTEGER);'\n+${CLICKHOUSE_CLIENT} --query=\"CREATE TABLE t0 (c0 Int64) ENGINE = MergeTree() ORDER BY tuple();\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE t0 (c0) VALUES (2147483648);\"\n+${CLICKHOUSE_CLIENT} --query=\"select 'clickhouse'\"\n+${CLICKHOUSE_CLIENT} --query=\"SELECT t0.c0 FROM t0;\"\n+${CLICKHOUSE_CLIENT} --query=\"INSERT INTO TABLE FUNCTION sqlite('${DB_PATH}', 't0') SELECT c0 FROM t0;\"\n+${CLICKHOUSE_CLIENT} --query=\"select 'sqlite from clickhouse'\"\n+${CLICKHOUSE_CLIENT} --query=\"SELECT tx.c0 FROM sqlite('${DB_PATH}', 't0') tx;\"\n+${CLICKHOUSE_CLIENT} --query=\"select 'sqlite'\"\n+sqlite3 \"${DB_PATH}\" 'SELECT c0 from t0;'\n+sqlite3 \"${DB_PATH}\" 'DROP TABLE t0;'\n+${CLICKHOUSE_CLIENT} --query=\"DROP TABLE t0;\"\n+\n sqlite3 \"${DB_PATH2}\" 'DROP TABLE IF EXISTS table1'\n sqlite3 \"${DB_PATH2}\" 'CREATE TABLE table1 (col1 text, col2 smallint);'\n sqlite3 \"${DB_PATH2}\" \"INSERT INTO table1 VALUES ('line1', 1), ('line2', 2), ('line3', 3)\"\n",
  "problem_statement": "SQLite truncated int64 value\nSQLite supports 64-bit integers, so we should map `INTEGER` to Int64 in ClickHouse\r\n\r\nRun:\r\nIn SQLite run:\r\n```sql\r\nCREATE TABLE t0 (c0 INTEGER);\r\n```\r\nIn ClickHouse run:\r\n```sql\r\nCREATE TABLE t0 (c0 Int64) ENGINE = MergeTree() ORDER BY tuple();\r\nINSERT INTO TABLE t0 (c0) VALUES (2147483648);\r\nSELECT t0.c0 FROM t0; -- 2147483648\r\nINSERT INTO TABLE FUNCTION sqlite('<path to db>', 't0') SELECT c0 FROM t0;\r\nSELECT tx.c0 FROM sqlite('<path to db>', 't0') tx; -- -2147483648, wrong\r\n```\n",
  "hints_text": "",
  "created_at": "2024-12-26T18:24:40Z",
  "modified_files": [
    "src/Databases/SQLite/fetchSQLiteTableStructure.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01889_sqlite_read_write.reference",
    "tests/queries/0_stateless/01889_sqlite_read_write.sh"
  ]
}