{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27298,
  "instance_id": "ClickHouse__ClickHouse-27298",
  "issue_numbers": [
    "23515"
  ],
  "base_commit": "da988100d64a5508ad2b420d057ea25f43b2efce",
  "patch": "diff --git a/src/Interpreters/ExpressionActions.cpp b/src/Interpreters/ExpressionActions.cpp\nindex 6797947a1011..ef5c1f8e48f8 100644\n--- a/src/Interpreters/ExpressionActions.cpp\n+++ b/src/Interpreters/ExpressionActions.cpp\n@@ -342,6 +342,13 @@ static void executeAction(const ExpressionActions::Action & action, ExecutionCon\n             res_column.type = action.node->result_type;\n             res_column.name = action.node->result_name;\n \n+            if (action.node->column)\n+            {\n+                /// Do not execute function if it's result is already known.\n+                res_column.column = action.node->column->cloneResized(num_rows);\n+                break;\n+            }\n+\n             ColumnsWithTypeAndName arguments(action.arguments.size());\n             for (size_t i = 0; i < arguments.size(); ++i)\n             {\ndiff --git a/src/Storages/MergeTree/MergeTreeRangeReader.cpp b/src/Storages/MergeTree/MergeTreeRangeReader.cpp\nindex 2347280a4a09..464d253a12c1 100644\n--- a/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n+++ b/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n@@ -2,6 +2,7 @@\n #include <Columns/FilterDescription.h>\n #include <Columns/ColumnsCommon.h>\n #include <common/range.h>\n+#include <Interpreters/castColumn.h>\n #include <DataTypes/DataTypeNothing.h>\n \n #ifdef __SSE2__\n@@ -1038,9 +1039,9 @@ void MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(ReadResult & r\n     /// Filter in WHERE instead\n     else\n     {\n-        result.columns[prewhere_column_pos] = result.getFilterHolder()->convertToFullColumnIfConst();\n-        if (getSampleBlock().getByName(prewhere_info->prewhere_column_name).type->isNullable())\n-            result.columns[prewhere_column_pos] = makeNullable(std::move(result.columns[prewhere_column_pos]));\n+        auto type = getSampleBlock().getByName(prewhere_info->prewhere_column_name).type;\n+        ColumnWithTypeAndName col(result.getFilterHolder()->convertToFullColumnIfConst(), std::make_shared<DataTypeUInt8>(), \"\");\n+        result.columns[prewhere_column_pos] = castColumn(col, type);\n         result.clearFilter(); // Acting as a flag to not filter in PREWHERE\n     }\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02003_bug_from_23515.reference b/tests/queries/0_stateless/02003_bug_from_23515.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02003_bug_from_23515.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02003_bug_from_23515.sql b/tests/queries/0_stateless/02003_bug_from_23515.sql\nnew file mode 100644\nindex 000000000000..febd59b0755e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02003_bug_from_23515.sql\n@@ -0,0 +1,10 @@\n+drop table if exists tab;\n+create table tab (a LowCardinality(String), b LowCardinality(String)) engine = MergeTree partition by a order by tuple() settings min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;\n+\n+insert into tab values ('1', 'a'), ('2', 'b');\n+SELECT a = '1' FROM tab WHERE a = '1' and b='a';\n+\n+-- Fuzzed\n+SELECT * FROM tab WHERE (a = '1') AND 0 AND (b = 'a');\n+\n+drop table if exists tab;\n",
  "problem_statement": "Expected ColumnLowCardinality, got UInt8: While executing MergingSortedTransform\n**Describe the bug**\r\nWe encounter the following problem when performing some SELECT queries to a Distributed table with LowCardinality columns:\r\n\r\n```DB::Exception: Expected ColumnLowCardinality, gotUInt8: While executing MergingSortedTransform```\r\n\r\n**Does it reproduce on recent release?**\r\nReproduces on the second recent release.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\n 21.3.4.25\r\n* Non-default settings, if any\r\n```\r\nuse_uncompressed_cache,0\r\nreplication_alter_partitions_sync,2\r\nload_balancing,random\r\nlog_queries,1\r\nmax_result_bytes,32212254720\r\nmax_execution_time,600\r\nreadonly,2\r\nmax_memory_usage,0\r\nmax_memory_usage_for_user,32212254720\r\n```\r\n* `CREATE TABLE` statements for all tables involved\r\n```\r\ncreate table tablename\r\n(\r\n    column1 DateTime64(9),\r\n    column2 LowCardinality(String),\r\n    column3 LowCardinality(String),\r\n    column4 LowCardinality(String),\r\n    column5 Array(UInt64),\r\n    column6 Array(Decimal(18, 9)),\r\n    column7 Array(Decimal(18, 6)),\r\n    column8 Array(UInt64),\r\n    column9 Array(Decimal(18, 9)),\r\n    column10 Array(Decimal(18, 6)),\r\n    column11 UInt8,\r\n    column12 Nullable(DateTime64(9)),\r\n    column13 Array(LowCardinality(String)) default [],\r\n    column14 Array(LowCardinality(String)) default []\r\n)\r\n    engine = Distributed('some_cluster', 'default', 'tablename_partial', halfMD5(toStartOfHour(column1), column2));\r\n\r\ncreate table tablename_partial\r\n(\r\n    column1 DateTime64(9),\r\n    column2 LowCardinality(String),\r\n    column3 LowCardinality(String),\r\n    column4 LowCardinality(String),\r\n    column5 Array(UInt64),\r\n    column6 Array(Decimal(18, 9)),\r\n    column7 Array(Decimal(18, 6)),\r\n    column8 Array(UInt64),\r\n    column9 Array(Decimal(18, 9)),\r\n    column10 Array(Decimal(18, 6)),\r\n    column11 UInt8,\r\n    column12 Nullable(DateTime64(9)),\r\n    column13 Array(LowCardinality(String)) default [],\r\n    column14 Array(LowCardinality(String)) default []\r\n)\r\n    engine = ReplicatedMergeTree('/clickhouse/tables/{shard}/tablename_partial', '{replica}')\r\nPARTITION BY (column4, toDate(column1))\r\nORDER BY (column2, column1, column3)\r\nSETTINGS index_granularity = 8192;\r\n```\r\n\r\n* Queries to run that lead to unexpected result\r\n```sql\r\nSELECT\r\n    *\r\nFROM tablename\r\nWHERE column1 >= toDateTime64('2020-05-01 00:00:00.000000000', 9)\r\n  AND column1 < toDateTime64('2020-06-01 00:00:00.000000000', 9)\r\n  AND column3 = 'value1'\r\n  AND column2 = 'value2'\r\nORDER BY column2, column1, column3\r\n  LIMIT 10000\r\nSETTINGS optimize_read_in_order=1;\r\n```\r\n\r\n**Expected behavior**\r\nExpected the query to work, not to throw an exception.\r\n\r\n**Error message and/or stacktrace**\r\n```\r\nDB::Exception: Expected ColumnLowCardinality, gotUInt8: While executing MergingSortedTransform, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::ColumnLowCardinality::insertFrom(DB::IColumn const&, unsigned long) @ 0xf1e7da7 in /usr/bin/clickhouse\r\n1. DB::IMergingAlgorithm::Status DB::MergingSortedAlgorithm::mergeImpl<DB::SortingHeap<DB::SortCursor> >(DB::SortingHeap<DB::SortCursor>&) @ 0xfac3beb in /usr/bin/clickhouse\r\n2. DB::IMergingTransform<DB::MergingSortedAlgorithm>::work() @ 0xf63e0bd in /usr/bin/clickhouse\r\n3. ? @ 0xf9391ed in /usr/bin/clickhouse\r\n4. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0xf935e11 in /usr/bin/clickhouse\r\n5. ? @ 0xf93a9e6 in /usr/bin/clickhouse\r\n6. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x865165f in /usr/bin/clickhouse\r\n7. ? @ 0x86550f3 in /usr/bin/clickhouse\r\n8. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n9. __clone @ 0xfe96d in /usr/lib64/libc-2.17.so\r\n (version 21.3.4.25 (official build))\r\n```\r\n\r\n**Additional context**\r\n##### Workaround\r\nExplicitly `cast` the LowCardinality columns to their base type.\r\n\r\nAlso, the problem doesn't reproduce\r\n- when using non-distributed table,\r\n- or when disabling the option `optimize_read_in_order`,\r\n- or randomly when you change query params (column1).\n",
  "hints_text": "The **id** field is of type LowCardinality(String)\r\n\r\n```\r\nwith\r\n    toDateTime('2021-05-17 00:00:00') AS start_time,\r\n    toDateTime('2021-05-17 23:59:59') AS end_time,\r\n    'aaaaa' as name,\r\n    '123' as id\r\nSELECT \r\n    tnow\r\nFROM table1 AS cl\r\nWHERE (cl.tnow >= start_time) AND (cl.tnow <= end_time) AND (cl.Name = name) AND (cl.id= id)\r\nORDER BY tnow DESC\r\nLIMIT 1\r\n```\r\nReceived exception from server (version 20.3.19):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Expected ColumnLowCardinality, gotUInt8: While executing MergingSortedTransform.\r\n\r\nBut the following is possible:\r\n```\r\nwith\r\n    toDateTime('2021-05-17 00:00:00') AS start_time,\r\n    toDateTime('2021-05-17 23:59:59') AS end_time,\r\n    'aaaaa' as name,\r\n    '123' as id\r\nSELECT \r\n    max(tnow)\r\nFROM table1 AS cl\r\nWHERE (cl.tnow >= start_time) AND (cl.tnow <= end_time) AND (cl.Name = name) AND (cl.id= id)\r\n```\r\n\r\nSo I don't think it's a LowCardinality type, The first exception example works in other versions, such as 20.3.11.97\r\n\r\nThis problem has been verified in version 21.6.6.51 and has been fixed\uff1b\r\n\nNo, the problem was non-existent when we were querying the partial table.\r\n\r\nSorry, I can't share the data because currently the minimal reproducible example is of several terabytes.\nNew version of ClickHouse has been released: 21.6.4 and also patch release 21.3.12 with backports.\r\nDoes the issue reproduce in recent versions?\nLuckily, Altinity client was able to make reproducible example\r\n\r\n```\r\ndrop table if exists test3;\r\n\r\nCREATE TABLE test3\r\n(\r\n    `a` LowCardinality(String),\r\n    `b` LowCardinality(String),\r\n    `f` LowCardinality(String),\r\n    `h` Date\r\n)\r\nENGINE = MergeTree()\r\nORDER BY f\r\nPARTITION BY (a, h) settings min_bytes_for_wide_part=0, min_rows_for_wide_part=0;\r\n\r\nsystem stop merges test3;\r\n\r\nset max_partitions_per_insert_block=0;\r\n\r\nINSERT INTO test3 SELECT\r\n    toString(1),\r\n    toString(number % 3),\r\n    toString(number % 7),\r\n    toDate('2019-05-10') + intDiv(number, 9)\r\nFROM numbers(1000);\r\n\r\nSELECT 1 FROM test3 WHERE a = '1' and b='a' ORDER BY f;\r\n\r\nReceived exception from server (version 20.12.4):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Expected ColumnLowCardinality, gotUInt8: While executing MergingSortedTransform.\r\n\r\n```\r\n\nThough, I am wrong. It's not fixed. \r\nI've forgotten to enable optimize_move_to_prewhere.\r\n\r\n```\r\nSELECT 1 FROM test3 PREWHERE a = '1' WHERE b='a' ORDER BY f;\r\n\r\nReceived exception from server (version 21.7.2):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Expected ColumnLowCardinality, got UInt8: While executing MergingSortedTransform.\r\n\r\nset optimize_move_to_prewhere=1;\r\nSELECT 1 FROM test3 WHERE a = '1' and b='a' ORDER BY f\u3000;\r\n\r\nReceived exception from server (version 21.7.2):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Expected ColumnLowCardinality, got UInt8: While executing MergingSortedTransform.\r\n```\nIt reproduces more rarely starting from 21.3 because the logic of optimize_move_to_prewhere has changed.\r\nAgainst another dataset it reproduces with 20.12, but does not reproduce with 21.3 because of this.\r\n\r\n20.12: `MergeTreeWhereOptimizer: condition \"a = '1'\" moved to PREWHERE`\r\n21.3: `MergeTreeWhereOptimizer: condition \"(a = '1') AND (b = 'a')\" moved to PREWHERE`\r\n\r\nBut the root cause is still has not been fixed.",
  "created_at": "2021-08-06T13:41:47Z"
}