{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 75561,
  "instance_id": "ClickHouse__ClickHouse-75561",
  "issue_numbers": [
    "75473"
  ],
  "base_commit": "5dddf59e49fd4ce3ec9dfcb0358dc7a3345d211b",
  "patch": "diff --git a/src/Common/UTF8Helpers.cpp b/src/Common/UTF8Helpers.cpp\nindex 22f2753a8a9b..a3ffb9587f51 100644\n--- a/src/Common/UTF8Helpers.cpp\n+++ b/src/Common/UTF8Helpers.cpp\n@@ -164,40 +164,43 @@ size_t computeWidthImpl(const UInt8 * data, size_t size, size_t prefix, size_t l\n         if (mode == BytesBeforeLimit && width > limit)\n             return i - (width - limit);\n \n-        switch (decoder.decode(data[i]))\n+        if (i < size)\n         {\n-            case UTF8Decoder::REJECT:\n+            switch (decoder.decode(data[i]))\n             {\n-                decoder.reset();\n-                // invalid sequences seem to have zero width in modern terminals\n-                // tested in libvte-based, alacritty, urxvt and xterm\n-                i -= rollback;\n-                rollback = 0;\n-                break;\n-            }\n-            case UTF8Decoder::ACCEPT:\n-            {\n-                // TODO: multiline support for '\\n'\n-\n-                // special treatment for '\\t' and for ESC\n-                size_t next_width = width;\n-                if (decoder.codepoint == '\\x1b')\n-                    is_escape_sequence = true;\n-                else if (decoder.codepoint == '\\t')\n-                    next_width += 8 - (prefix + width) % 8;\n-                else\n-                    next_width += wcwidth(decoder.codepoint);\n-\n-                if (mode == BytesBeforeLimit && next_width > limit)\n-                    return i - rollback;\n-                width = next_width;\n-\n-                rollback = 0;\n-                break;\n+                case UTF8Decoder::REJECT:\n+                {\n+                    decoder.reset();\n+                    // invalid sequences seem to have zero width in modern terminals\n+                    // tested in libvte-based, alacritty, urxvt and xterm\n+                    i -= rollback;\n+                    rollback = 0;\n+                    break;\n+                }\n+                case UTF8Decoder::ACCEPT:\n+                {\n+                    // TODO: multiline support for '\\n'\n+\n+                    // special treatment for '\\t' and for ESC\n+                    size_t next_width = width;\n+                    if (decoder.codepoint == '\\x1b')\n+                        is_escape_sequence = true;\n+                    else if (decoder.codepoint == '\\t')\n+                        next_width += 8 - (prefix + width) % 8;\n+                    else\n+                        next_width += wcwidth(decoder.codepoint);\n+\n+                    if (mode == BytesBeforeLimit && next_width > limit)\n+                        return i - rollback;\n+                    width = next_width;\n+\n+                    rollback = 0;\n+                    break;\n+                }\n+                // continue if we meet other values here\n+                default:\n+                    ++rollback;\n             }\n-            // continue if we meet other values here\n-            default:\n-                ++rollback;\n         }\n     }\n \ndiff --git a/src/Parsers/Lexer.cpp b/src/Parsers/Lexer.cpp\nindex bc25f80bee6e..23e34dca4b5e 100644\n--- a/src/Parsers/Lexer.cpp\n+++ b/src/Parsers/Lexer.cpp\n@@ -2,8 +2,10 @@\n #include <base/defines.h>\n #include <Parsers/Lexer.h>\n #include <Common/StringUtils.h>\n+#include <Common/UTF8Helpers.h>\n #include <base/find_symbols.h>\n \n+\n namespace DB\n {\n \n@@ -518,7 +520,12 @@ Token Lexer::nextTokenImpl()\n             pos = skipWhitespacesUTF8(pos, end);\n             if (pos > token_begin)\n                 return Token(TokenType::Whitespace, token_begin, pos);\n-            return Token(TokenType::Error, token_begin, ++pos);\n+\n+            ++pos;\n+            while (pos < end && UTF8::isContinuationOctet(*pos))\n+                ++pos;\n+\n+            return Token(TokenType::Error, token_begin, pos);\n     }\n }\n \n@@ -556,7 +563,7 @@ const char * getErrorTokenDescription(TokenType type)\n         case TokenType::ErrorWrongNumber:\n             return \"Wrong number\";\n         case TokenType::ErrorMaxQuerySizeExceeded:\n-            return \"Max query size exceeded\";\n+            return \"Max query size exceeded (can be increased with the `max_query_size` setting)\";\n         default:\n             return \"Not an error\";\n     }\ndiff --git a/src/Parsers/parseQuery.cpp b/src/Parsers/parseQuery.cpp\nindex ba7b44ca852a..d53a7fbfba77 100644\n--- a/src/Parsers/parseQuery.cpp\n+++ b/src/Parsers/parseQuery.cpp\n@@ -121,7 +121,13 @@ void writeQueryAroundTheError(\n     else\n     {\n         if (num_positions_to_hilite)\n-            out << \": \" << std::string(positions_to_hilite[0].begin, std::min(SHOW_CHARS_ON_SYNTAX_ERROR, end - positions_to_hilite[0].begin)) << \". \";\n+        {\n+            const char * example_begin = positions_to_hilite[0].begin;\n+            size_t total_bytes = end - example_begin;\n+            size_t show_bytes = UTF8::computeBytesBeforeWidth(\n+                reinterpret_cast<const UInt8 *>(example_begin), total_bytes, 0, SHOW_CHARS_ON_SYNTAX_ERROR);\n+            out << \": \" << std::string(example_begin, show_bytes) << (show_bytes < total_bytes ? \"... \" : \". \");\n+        }\n     }\n }\n \n@@ -146,7 +152,13 @@ void writeCommonErrorMessage(\n     }\n     else\n     {\n-        out << \" ('\" << std::string(last_token.begin, last_token.end - last_token.begin) << \"')\";\n+        /// Do not print too long tokens.\n+        size_t token_size_bytes = last_token.end - last_token.begin;\n+        size_t token_preview_size_bytes = UTF8::computeBytesBeforeWidth(\n+            reinterpret_cast<const UInt8 *>(last_token.begin), token_size_bytes, 0, SHOW_CHARS_ON_SYNTAX_ERROR);\n+\n+        out << \" (\" << std::string(last_token.begin, token_preview_size_bytes)\n+            << (token_preview_size_bytes < token_size_bytes ? \"...\" : \"\") << \")\";\n     }\n \n     /// If query is multiline.\n@@ -189,15 +201,9 @@ std::string getLexicalErrorMessage(\n     const std::string & query_description)\n {\n     WriteBufferFromOwnString out;\n+    out << getErrorTokenDescription(last_token.type) << \": \";\n     writeCommonErrorMessage(out, begin, end, last_token, query_description);\n     writeQueryAroundTheError(out, begin, end, hilite, &last_token, 1);\n-\n-    out << getErrorTokenDescription(last_token.type);\n-    if (last_token.size())\n-    {\n-       out << \": '\" << std::string_view{last_token.begin, last_token.size()} << \"'\";\n-    }\n-\n     return out.str();\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00927_asof_join_long.sql b/tests/queries/0_stateless/00927_asof_join_long.sql\nindex 7a73875e93ee..99a3a8308391 100644\n--- a/tests/queries/0_stateless/00927_asof_join_long.sql\n+++ b/tests/queries/0_stateless/00927_asof_join_long.sql\n@@ -3,7 +3,7 @@\n DROP TABLE IF EXISTS tvs;\n \n -- to use different algorithms for in subquery\n-SET allow_experimental_analyzer = 1;\n+SET enable_analyzer = 1;\n \n CREATE TABLE tvs(k UInt32, t UInt32, tv UInt64) ENGINE = Memory;\n INSERT INTO tvs(k,t,tv) SELECT k, t, t\ndiff --git a/tests/queries/0_stateless/01180_client_syntax_errors.expect b/tests/queries/0_stateless/01180_client_syntax_errors.expect\nindex 058c75e43071..fbfee8b2acca 100755\n--- a/tests/queries/0_stateless/01180_client_syntax_errors.expect\n+++ b/tests/queries/0_stateless/01180_client_syntax_errors.expect\n@@ -30,11 +30,11 @@ expect \"Expected one of: \"\n \n # Make another query with syntax error\n send -- \"CREATE TABLE t4 UUID '57f27aa5-141c-47c5-888a-9563681717f5' AS t1 (`rowNumberInAllBlocks()` UInt64, `toLowCardinality(arrayJoin(\\['exchange', 'tables'\\]))` LowCardinality(String)) ENGINE = MergeTree \\r\"\n-expect \"Syntax error: failed at position 93 ('UInt64'):*\"\n+expect \"Syntax error: failed at position 93 (UInt64):*\"\n \n # Make a query with unmatched parentheses\n send -- \"select (1, 2\\r\"\n-expect \"Syntax error: failed at position 8 ('('):\"\n+expect \"Syntax error: failed at position 8 (():\"\n expect \"Unmatched parentheses: (\"\n expect \":) \"\n \ndiff --git a/tests/queries/0_stateless/02050_clickhouse_local_parsing_exception.sh b/tests/queries/0_stateless/02050_clickhouse_local_parsing_exception.sh\nindex 65563837f55e..a3744364f503 100755\n--- a/tests/queries/0_stateless/02050_clickhouse_local_parsing_exception.sh\n+++ b/tests/queries/0_stateless/02050_clickhouse_local_parsing_exception.sh\n@@ -4,4 +4,4 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n # shellcheck source=../shell_config.sh\n . \"$CURDIR\"/../shell_config.sh\n \n-$CLICKHOUSE_LOCAL --query=\"SELECT number FROM system.numbers INTO OUTFILE test.native.zst FORMAT Native\" 2>&1 | grep -q \"Code: 62. DB::Exception: Syntax error: failed at position 48 ('test'): test.native.zst FORMAT Native.\" && echo 'OK' || echo 'FAIL' ||:\n+$CLICKHOUSE_LOCAL --query=\"SELECT number FROM system.numbers INTO OUTFILE test.native.zst FORMAT Native\" 2>&1 | grep -q \"Code: 62. DB::Exception: Syntax error: failed at position 48 (test): test.native.zst FORMAT Native.\" && echo 'OK' || echo 'FAIL' ||:\ndiff --git a/tests/queries/0_stateless/03286_reverse_sorting_key_final.sql b/tests/queries/0_stateless/03286_reverse_sorting_key_final.sql\nindex 51eadfce9d3a..aab8abd22a3f 100644\n--- a/tests/queries/0_stateless/03286_reverse_sorting_key_final.sql\n+++ b/tests/queries/0_stateless/03286_reverse_sorting_key_final.sql\n@@ -4,6 +4,9 @@ INSERT INTO t0 (c0.c1) VALUES ([1]), ([2]);\n SELECT 1 FROM t0 FINAL;\n DROP TABLE t0;\n \n+-- For consistency of the EXPLAIN output:\n+SET allow_prefetched_read_pool_for_remote_filesystem = 0;\n+\n -- PartsSplitter should work for reverse keys.\n CREATE TABLE t0(a Int, b Int) Engine=ReplacingMergeTree order by (a desc, b desc) SETTINGS allow_experimental_reverse_key = 1, allow_nullable_key = 1, index_granularity = 8192, index_granularity_bytes = '10Mi';\n INSERT INTO t0 select number, number from numbers(5);\n@@ -19,4 +22,3 @@ INSERT INTO t0 select number, number from numbers(5,2);\n set max_threads = 2;\n explain pipeline select * from t0 final SETTINGS enable_vertical_final = 0;\n DROP TABLE t0;\n-\ndiff --git a/tests/queries/0_stateless/03328_syntax_error_exception.reference b/tests/queries/0_stateless/03328_syntax_error_exception.reference\nnew file mode 100644\nindex 000000000000..6a9eb836c4e9\n--- /dev/null\n+++ b/tests/queries/0_stateless/03328_syntax_error_exception.reference\n@@ -0,0 +1,3 @@\n+ption: Max query size exceeded\n+1\n+Unrecognized token: Syntax error: failed at position 8 (\u044b): \u044b\u044b\u044b'\ndiff --git a/tests/queries/0_stateless/03328_syntax_error_exception.sh b/tests/queries/0_stateless/03328_syntax_error_exception.sh\nnew file mode 100755\nindex 000000000000..80c93330b4ce\n--- /dev/null\n+++ b/tests/queries/0_stateless/03328_syntax_error_exception.sh\n@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+# The reason is in front of the message:\n+${CLICKHOUSE_CURL} \"${CLICKHOUSE_URL}&max_query_size=20\" -d \"SELECT '\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b\u044b'\" | grep -o -F 'ption: Max query size exceeded'\n+\n+# The message is not too long:\n+perl -e 'print \"SELECT length('\"'\"'\" . (\"x\" x '262140') . \"'\"'\"')\"' | ${CLICKHOUSE_LOCAL} 2>&1 | wc -c | ${CLICKHOUSE_LOCAL} --input-format TSV --query \"SELECT c1 < 500 FROM table\"\n+\n+# When it's an unrecognized token, the UTF-8 codepoint is correctly cut:\n+${CLICKHOUSE_CURL} \"${CLICKHOUSE_URL}\" -d \"SELECT \u044b\u044b\u044b'\" | grep -o -F \"Unrecognized token: Syntax error: failed at position 8 (\u044b): \u044b\u044b\u044b'\"\n",
  "problem_statement": "If a query is too long, ClickHouse should provide a better diagnostic instead of \"Syntax error\"\n### Company or project name\n\nMy company.\n\n### Describe the unexpected behaviour\n\nSee below.\n\n### How to reproduce\n\n`perl -e 'print \"SELECT length('\"'\"'\" . (\"x\" x '262140') . \"'\"'\"')\"' | ch`\n\n### Expected behavior\n\n_No response_\n\n### Error message and/or stacktrace\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-02-05T02:03:07Z"
}