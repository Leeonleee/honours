{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36327,
  "instance_id": "ClickHouse__ClickHouse-36327",
  "issue_numbers": [
    "36303"
  ],
  "base_commit": "57444fc7d3683296031743e0773f3f3dc2164e9e",
  "patch": "diff --git a/src/Processors/Formats/Impl/JSONEachRowRowInputFormat.cpp b/src/Processors/Formats/Impl/JSONEachRowRowInputFormat.cpp\nindex 674bad5a13d7..d73642fe3e1c 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONEachRowRowInputFormat.cpp\n@@ -360,6 +360,24 @@ void registerInputFormatJSONEachRow(FormatFactory & factory)\n         return std::make_shared<JSONEachRowRowInputFormat>(buf, sample, std::move(params), settings, false);\n     });\n \n+    factory.registerInputFormat(\"JSONLines\", [](\n+        ReadBuffer & buf,\n+        const Block & sample,\n+        IRowInputFormat::Params params,\n+        const FormatSettings & settings)\n+    {\n+        return std::make_shared<JSONEachRowRowInputFormat>(buf, sample, std::move(params), settings, false);\n+    });\n+\n+    factory.registerInputFormat(\"NDJSON\", [](\n+        ReadBuffer & buf,\n+        const Block & sample,\n+        IRowInputFormat::Params params,\n+        const FormatSettings & settings)\n+    {\n+        return std::make_shared<JSONEachRowRowInputFormat>(buf, sample, std::move(params), settings, false);\n+    });\n+\n     factory.registerFileExtension(\"ndjson\", \"JSONEachRow\");\n     factory.registerFileExtension(\"jsonl\", \"JSONEachRow\");\n \n@@ -377,12 +395,16 @@ void registerFileSegmentationEngineJSONEachRow(FormatFactory & factory)\n {\n     factory.registerFileSegmentationEngine(\"JSONEachRow\", &fileSegmentationEngineJSONEachRow);\n     factory.registerFileSegmentationEngine(\"JSONStringsEachRow\", &fileSegmentationEngineJSONEachRow);\n+    factory.registerFileSegmentationEngine(\"JSONLines\", &fileSegmentationEngineJSONEachRow);\n+    factory.registerFileSegmentationEngine(\"NDJSON\", &fileSegmentationEngineJSONEachRow);\n }\n \n void registerNonTrivialPrefixAndSuffixCheckerJSONEachRow(FormatFactory & factory)\n {\n     factory.registerNonTrivialPrefixAndSuffixChecker(\"JSONEachRow\", nonTrivialPrefixAndSuffixCheckerJSONEachRowImpl);\n     factory.registerNonTrivialPrefixAndSuffixChecker(\"JSONStringsEachRow\", nonTrivialPrefixAndSuffixCheckerJSONEachRowImpl);\n+    factory.registerNonTrivialPrefixAndSuffixChecker(\"JSONLines\", nonTrivialPrefixAndSuffixCheckerJSONEachRowImpl);\n+    factory.registerNonTrivialPrefixAndSuffixChecker(\"NDJSON\", nonTrivialPrefixAndSuffixCheckerJSONEachRowImpl);\n }\n \n void registerJSONEachRowSchemaReader(FormatFactory & factory)\n@@ -396,6 +418,16 @@ void registerJSONEachRowSchemaReader(FormatFactory & factory)\n     {\n         return std::make_unique<JSONEachRowSchemaReader>(buf, true, settings);\n     });\n+\n+    factory.registerSchemaReader(\"JSONLines\", [](ReadBuffer & buf, const FormatSettings & settings)\n+    {\n+        return std::make_unique<JSONEachRowSchemaReader>(buf, false, settings);\n+    });\n+\n+    factory.registerSchemaReader(\"NDJSON\", [](ReadBuffer & buf, const FormatSettings & settings)\n+    {\n+        return std::make_unique<JSONEachRowSchemaReader>(buf, false, settings);\n+    });\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp\nindex 0a07da1858b3..9ac4bec89362 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp\n@@ -140,6 +140,32 @@ void registerOutputFormatJSONEachRow(FormatFactory & factory)\n     });\n     factory.markOutputFormatSupportsParallelFormatting(\"JSONEachRow\");\n \n+    factory.registerOutputFormat(\"JSONLines\", [](\n+        WriteBuffer & buf,\n+        const Block & sample,\n+        const RowOutputFormatParams & params,\n+        const FormatSettings & _format_settings)\n+    {\n+        FormatSettings settings = _format_settings;\n+        settings.json.serialize_as_strings = false;\n+        return std::make_shared<JSONEachRowRowOutputFormat>(buf, sample, params,\n+            settings);\n+    });\n+    factory.markOutputFormatSupportsParallelFormatting(\"JSONLines\");\n+\n+    factory.registerOutputFormat(\"NDJSON\", [](\n+        WriteBuffer & buf,\n+        const Block & sample,\n+        const RowOutputFormatParams & params,\n+        const FormatSettings & _format_settings)\n+    {\n+        FormatSettings settings = _format_settings;\n+        settings.json.serialize_as_strings = false;\n+        return std::make_shared<JSONEachRowRowOutputFormat>(buf, sample, params,\n+            settings);\n+    });\n+    factory.markOutputFormatSupportsParallelFormatting(\"NDJSON\");\n+\n     factory.registerOutputFormat(\"JSONStringsEachRow\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02187_async_inserts_all_formats.reference b/tests/queries/0_stateless/02187_async_inserts_all_formats.reference\nindex b4a5b6c3a426..92ce8dfd2c7c 100644\n--- a/tests/queries/0_stateless/02187_async_inserts_all_formats.reference\n+++ b/tests/queries/0_stateless/02187_async_inserts_all_formats.reference\n@@ -14,8 +14,10 @@ JSONCompactStringsEachRow\n JSONCompactStringsEachRowWithNames\n JSONCompactStringsEachRowWithNamesAndTypes\n JSONEachRow\n+JSONLines\n JSONStringsEachRow\n MsgPack\n+NDJSON\n Native\n ORC\n Parquet\ndiff --git a/tests/queries/0_stateless/02267_jsonlines_ndjson_format.reference b/tests/queries/0_stateless/02267_jsonlines_ndjson_format.reference\nnew file mode 100644\nindex 000000000000..b8346a240da3\n--- /dev/null\n+++ b/tests/queries/0_stateless/02267_jsonlines_ndjson_format.reference\n@@ -0,0 +1,32 @@\n+{\"number\":\"0\"}\n+{\"number\":\"1\"}\n+{\"number\":\"2\"}\n+{\"number\":\"3\"}\n+{\"number\":\"4\"}\n+{\"number\":\"5\"}\n+{\"number\":\"6\"}\n+{\"number\":\"7\"}\n+{\"number\":\"8\"}\n+{\"number\":\"9\"}\n+{\"number\":\"0\"}\n+{\"number\":\"1\"}\n+{\"number\":\"2\"}\n+{\"number\":\"3\"}\n+{\"number\":\"4\"}\n+{\"number\":\"5\"}\n+{\"number\":\"6\"}\n+{\"number\":\"7\"}\n+{\"number\":\"8\"}\n+{\"number\":\"9\"}\n+{\"n1\":1,\"n2\":2}\n+{\"n1\":1,\"n2\":2}\n+{\"n1\":3,\"n2\":4}\n+{\"n1\":3,\"n2\":4}\n+{\"n1\":5,\"n2\":6}\n+{\"n1\":5,\"n2\":6}\n+{\"n1\":1,\"n2\":2}\n+{\"n1\":1,\"n2\":2}\n+{\"n1\":3,\"n2\":4}\n+{\"n1\":3,\"n2\":4}\n+{\"n1\":5,\"n2\":6}\n+{\"n1\":5,\"n2\":6}\ndiff --git a/tests/queries/0_stateless/02267_jsonlines_ndjson_format.sql b/tests/queries/0_stateless/02267_jsonlines_ndjson_format.sql\nnew file mode 100644\nindex 000000000000..5e32758b3284\n--- /dev/null\n+++ b/tests/queries/0_stateless/02267_jsonlines_ndjson_format.sql\n@@ -0,0 +1,14 @@\n+SELECT * FROM numbers(10) FORMAT JSONLines;\n+SELECT * FROM numbers(10) FORMAT NDJSON;\n+\n+DROP TABLE IF EXISTS 02267_t;\n+\n+CREATE TABLE 02267_t (n1 UInt32, n2 UInt32) ENGINE = Memory;\n+\n+INSERT INTO 02267_t FORMAT JSONLines {\"n1\": 1, \"n2\": 2} {\"n1\": 3, \"n2\": 4} {\"n1\": 5, \"n2\": 6};\n+INSERT INTO 02267_t FORMAT NDJSON {\"n1\": 1, \"n2\": 2} {\"n1\": 3, \"n2\": 4} {\"n1\": 5, \"n2\": 6};\n+\n+SELECT * FROM 02267_t ORDER BY n1, n2 FORMAT JSONLines;\n+SELECT * FROM 02267_t ORDER BY n1, n2 FORMAT NDJSON;\n+\n+DROP TABLE 02267_t;\n",
  "problem_statement": "Add aliases `JSONLines`, `NDJSON`\nTo `JSONEachRow`\n",
  "hints_text": "",
  "created_at": "2022-04-16T06:03:05Z"
}