diff --git a/dbms/src/DataStreams/ConcatBlockInputStream.h b/dbms/src/DataStreams/ConcatBlockInputStream.h
index baaa876e96d6..e2ab60a15099 100644
--- a/dbms/src/DataStreams/ConcatBlockInputStream.h
+++ b/dbms/src/DataStreams/ConcatBlockInputStream.h
@@ -24,6 +24,9 @@ class ConcatBlockInputStream : public IBlockInputStream
 
     Block getHeader() const override { return children.at(0)->getHeader(); }
 
+    /// We call readSuffix prematurely by ourself. Suppress default behaviour.
+    void readSuffix() override {}
+
 protected:
     Block readImpl() override
     {
diff --git a/dbms/src/DataStreams/IBlockInputStream.cpp b/dbms/src/DataStreams/IBlockInputStream.cpp
index 31e6f9e1de84..a84a94b385ab 100644
--- a/dbms/src/DataStreams/IBlockInputStream.cpp
+++ b/dbms/src/DataStreams/IBlockInputStream.cpp
@@ -96,6 +96,13 @@ Block IBlockInputStream::read()
 
 void IBlockInputStream::readPrefix()
 {
+#ifndef NDEBUG
+    if (!read_prefix_is_called)
+        read_prefix_is_called = true;
+    else
+        throw Exception("readPrefix is called twice for " + getName() + " stream", ErrorCodes::LOGICAL_ERROR);
+#endif
+
     readPrefixImpl();
 
     forEachChild([&] (IBlockInputStream & child)
@@ -108,6 +115,13 @@ void IBlockInputStream::readPrefix()
 
 void IBlockInputStream::readSuffix()
 {
+#ifndef NDEBUG
+    if (!read_suffix_is_called)
+        read_suffix_is_called = true;
+    else
+        throw Exception("readSuffix is called twice for " + getName() + " stream", ErrorCodes::LOGICAL_ERROR);
+#endif
+
     forEachChild([&] (IBlockInputStream & child)
     {
         child.readSuffix();
diff --git a/dbms/src/DataStreams/IBlockInputStream.h b/dbms/src/DataStreams/IBlockInputStream.h
index 6d2ddbfdf2c3..6475e46f03c5 100644
--- a/dbms/src/DataStreams/IBlockInputStream.h
+++ b/dbms/src/DataStreams/IBlockInputStream.h
@@ -314,6 +314,11 @@ class IBlockInputStream
             if (f(*child))
                 return;
     }
+
+#ifndef NDEBUG
+    bool read_prefix_is_called = false;
+    bool read_suffix_is_called = false;
+#endif
 };
 
 }
diff --git a/dbms/src/DataStreams/LazyBlockInputStream.h b/dbms/src/DataStreams/LazyBlockInputStream.h
index 321778d30b31..37089c9bb5bc 100644
--- a/dbms/src/DataStreams/LazyBlockInputStream.h
+++ b/dbms/src/DataStreams/LazyBlockInputStream.h
@@ -32,6 +32,9 @@ class LazyBlockInputStream : public IBlockInputStream
         return header;
     }
 
+    /// We call readPrefix lazily. Suppress default behaviour.
+    void readPrefix() override {}
+
 protected:
     Block readImpl() override
     {
diff --git a/dbms/src/DataStreams/NullAndDoCopyBlockInputStream.h b/dbms/src/DataStreams/NullAndDoCopyBlockInputStream.h
index 435847978989..296f198b01a6 100644
--- a/dbms/src/DataStreams/NullAndDoCopyBlockInputStream.h
+++ b/dbms/src/DataStreams/NullAndDoCopyBlockInputStream.h
@@ -26,6 +26,10 @@ class NullAndDoCopyBlockInputStream : public IBlockInputStream
         children.push_back(input_);
     }
 
+    /// Suppress readPrefix and readSuffix, because they are called by copyData.
+    void readPrefix() override {}
+    void readSuffix() override {}
+
     String getName() const override { return "NullAndDoCopy"; }
 
     Block getHeader() const override { return {}; }
