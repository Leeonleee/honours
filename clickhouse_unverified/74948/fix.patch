diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
index f96cbb8daa84..a06838c0fc5c 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
@@ -224,12 +224,17 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind
         table_width += width;
 
     /// Fallback to Vertical format if:
-    /// enabled by the settings, this is the first chunk (or totals/extremes), the number of rows is small enough,
+    /// enabled by the settings, this is the first chunk, the number of rows is small enough,
     /// either the table width is larger than the max_value_width or any of the values contain a newline.
     if (format_settings.pretty.fallback_to_vertical
-        && (displayed_rows == 0 || port_kind != PortKind::Main)
+        && displayed_rows == 0
         && num_rows <= format_settings.pretty.fallback_to_vertical_max_rows_per_chunk
         && (table_width >= format_settings.pretty.fallback_to_vertical_min_table_width || has_newlines))
+    {
+        use_vertical_format = true;
+    }
+
+    if (use_vertical_format)
     {
         if (!vertical_format_fallback)
         {
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
index c3f05d55e549..47a2340be7ec 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
@@ -66,6 +66,7 @@ class PrettyBlockOutputFormat : public IOutputFormat
     {
         total_rows = 0;
         displayed_rows = 0;
+        use_vertical_format = false;
     }
 
     static bool cutInTheMiddle(size_t row_num, size_t num_rows, size_t max_rows);
@@ -79,6 +80,7 @@ class PrettyBlockOutputFormat : public IOutputFormat
 
     /// Fallback to Vertical format for wide but short tables.
     std::unique_ptr<IRowOutputFormat> vertical_format_fallback;
+    bool use_vertical_format = false;
 
     /// For mono_block == true only
     Chunk mono_chunk;
