{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80301,
  "instance_id": "ClickHouse__ClickHouse-80301",
  "issue_numbers": [
    "75597"
  ],
  "base_commit": "31a334acfd1d0bfca4087c883e48f33d86721d62",
  "patch": "diff --git a/src/Analyzer/ConstantNode.cpp b/src/Analyzer/ConstantNode.cpp\nindex 957a98c63913..fed21a2721bd 100644\n--- a/src/Analyzer/ConstantNode.cpp\n+++ b/src/Analyzer/ConstantNode.cpp\n@@ -199,12 +199,12 @@ QueryTreeNodePtr ConstantNode::cloneImpl() const\n \n ASTPtr ConstantNode::toASTImpl(const ConvertToASTOptions & options) const\n {\n+    if (!options.add_cast_for_constants)\n+        return std::make_shared<ASTLiteral>(getFieldFromColumnForASTLiteral(constant_value.getColumn(), 0, constant_value.getType()));\n+\n     const auto & constant_value_type = constant_value.getType();\n     auto constant_value_ast = std::make_shared<ASTLiteral>(getValue());\n \n-    if (!options.add_cast_for_constants)\n-        return constant_value_ast;\n-\n     // Add cast if constant was created as a result of constant folding.\n     // Constant folding may lead to type transformation and literal on shard\n     // may have a different type.\n",
  "test_patch": "diff --git a/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\nindex 045542a31f3d..9fa7f52e9fca 100644\n--- a/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n+++ b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n@@ -301,8 +301,7 @@ TEST(TransformQueryForExternalDatabase, Issue7245)\n \n     check(state, 1, {\"apply_id\", \"apply_type\", \"apply_status\", \"create_time\"},\n           \"SELECT apply_id FROM test.table WHERE apply_type = 2 AND create_time > addDays(toDateTime('2019-01-01 01:02:03', 'UTC'),-7) AND apply_status IN (3,4)\",\n-          R\"(SELECT \"apply_id\", \"apply_type\", \"apply_status\", \"create_time\" FROM \"test\".\"table\" WHERE (\"apply_type\" = 2) AND (\"create_time\" > '2018-12-25 01:02:03') AND (\"apply_status\" IN (3, 4)))\",\n-          R\"(SELECT \"apply_id\", \"apply_type\", \"apply_status\", \"create_time\" FROM \"test\".\"table\" WHERE (\"apply_type\" = 2) AND (\"create_time\" > 1545699723) AND (\"apply_status\" IN (3, 4)))\");\n+          R\"(SELECT \"apply_id\", \"apply_type\", \"apply_status\", \"create_time\" FROM \"test\".\"table\" WHERE (\"apply_type\" = 2) AND (\"create_time\" > '2018-12-25 01:02:03') AND (\"apply_status\" IN (3, 4)))\");\n }\n \n TEST(TransformQueryForExternalDatabase, Aliases)\n@@ -396,8 +395,7 @@ TEST(TransformQueryForExternalDatabase, ToDate)\n \n     check(state, 1, {\"a\", \"b\", \"foo\"},\n         \"SELECT foo FROM table WHERE a=10 AND b=toDate('2019-10-05', 'UTC')\",\n-        R\"(SELECT \"a\", \"b\", \"foo\" FROM \"test\".\"table\" WHERE (\"a\" = 10) AND (\"b\" = '2019-10-05'))\",\n-        R\"(SELECT \"a\", \"b\", \"foo\" FROM \"test\".\"table\" WHERE (\"a\" = 10) AND (\"b\" = 18174))\");\n+        R\"(SELECT \"a\", \"b\", \"foo\" FROM \"test\".\"table\" WHERE (\"a\" = 10) AND (\"b\" = '2019-10-05'))\");\n }\n \n TEST(TransformQueryForExternalDatabase, Analyzer)\n@@ -422,8 +420,7 @@ TEST(TransformQueryForExternalDatabase, Analyzer)\n \n     check(state, 1, {\"is_value\"},\n         \"SELECT is_value FROM table WHERE is_value = true\",\n-        R\"(SELECT \"is_value\" FROM \"test\".\"table\" WHERE \"is_value\" = true)\",\n-        R\"(SELECT \"is_value\" FROM \"test\".\"table\" WHERE \"is_value\" = 1)\");\n+        R\"(SELECT \"is_value\" FROM \"test\".\"table\" WHERE \"is_value\" = true)\");\n \n     check(state, 1, {\"is_value\"},\n         \"SELECT is_value FROM table WHERE is_value = 1\",\ndiff --git a/tests/integration/test_storage_postgresql/test.py b/tests/integration/test_storage_postgresql/test.py\nindex ca61f69dbc08..b9db818b4442 100644\n--- a/tests/integration/test_storage_postgresql/test.py\n+++ b/tests/integration/test_storage_postgresql/test.py\n@@ -869,6 +869,29 @@ def _create_and_fill_table(table):\n     cursor.execute(f'DROP TABLE \"{table}\\'\"')\n \n \n+def test_postgres_datetime(started_cluster):\n+    cursor = started_cluster.postgres_conn.cursor()\n+    cursor.execute(f\"DROP TABLE IF EXISTS test_datetime\")\n+    cursor.execute(\"CREATE TABLE test_datetime AS (SELECT '2025-01-02 03:04:05.678900'::timestamptz AS ts, '2025-01-02'::date as d)\")\n+\n+    node1.query(\"DROP TABLE IF EXISTS test_datetime\")\n+    node1.query(\n+        f\"CREATE TABLE test_datetime (ts DateTime64(6, 'UTC'), d Date) ENGINE = PostgreSQL('postgres1:5432', 'postgres', 'test_datetime', 'postgres', '{pg_pass}')\"\n+    )\n+\n+    result = node1.query(\"SELECT ts FROM test_datetime WHERE ts > '2025-01-01'::DateTime\")\n+    assert result == \"2025-01-02 03:04:05.678900\\n\"\n+\n+    result = node1.query(\"SELECT ts FROM test_datetime WHERE ts > '2025-01-01'::DateTime64\")\n+    assert result == \"2025-01-02 03:04:05.678900\\n\"\n+\n+    result = node1.query(\"SELECT ts FROM test_datetime WHERE ts > '2025-01-01'::Nullable(DateTime)\")\n+    assert result == \"2025-01-02 03:04:05.678900\\n\"\n+\n+    result = node1.query(\"SELECT ts FROM test_datetime WHERE ts > '2025-01-01'::Nullable(DateTime64)\")\n+    assert result == \"2025-01-02 03:04:05.678900\\n\"\n+\n+\n if __name__ == \"__main__\":\n     cluster.start()\n     input(\"Cluster created, press any key to destroy...\")\n",
  "problem_statement": "25.1 broke predicate pushdown of Date/Time types to PostgreSQL/MySQL engines\n### Describe what's wrong\n\nClickhouse's Date/Time types are sent to Postgres as (string-formatted) integers instead of date-formatted strings or Postgres date/timestamp types. This breaks WHERE clauses against Postgres tables with date/timestamp columns. This behaviour is new in 25.1.\n\nFor example, when `test` is a remote Postgres table with `ts timestamptz`:\n\n```sql\nselect ts \nfrom test \nwhere ts > '2025-01-01'::DateTime64\n```\n```\nReceived exception from server (version 25.1.3):\nCode: 1001. DB::Exception: Received from localhost:9000. DB::Exception: pqxx::data_exception: ERROR:  date/time field value out of range: \"1735689600\"\nLINE 1: COPY (SELECT \"ts\" FROM \"test\" WHERE \"ts\" > '1735689600') TO ...\n                                                   ^\nHINT:  Perhaps you need a different \"datestyle\" setting.\n. (STD_EXCEPTION)\n(query: select ts from test where ts > '2025-01-01'::DateTime64)\n```\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\n\n#### From [my gist](https://gist.github.com/swt30/7e4106a9a353cf82019cb92fc5ee93ee)\n1. `git clone https://gist.github.com/7e4106a9a353cf82019cb92fc5ee93ee.git clickhouse-issue-75597`\n2. `cd clickhouse-issue-75597`\n2. `just up` to run clickhouse & postgres containers\n3. `just bug`\n\n#### Manually\nPut the following Dockerfile and docker-compose in the same directory. \n\n`Dockerfile`\n```dockerfile\nFROM postgres:17.2 AS postgres\nRUN echo \"create table test as (select '2025-01-02 03:04:05.678900'::timestamptz as ts, '2025-01-02'::date as d);\" > /docker-entrypoint-initdb.d/table.sql\n\nFROM clickhouse/clickhouse-server:25.1.3.23 AS clickhouse\n# FROM clickhouse/clickhouse-server:24.12 AS clickhouse\nRUN echo \"create table test (ts DateTime64(6, 'UTC'), d Date) engine = PostgreSQL('postgres:5432', 'postgres', 'test', 'postgres', 'password')\" > /docker-entrypoint-initdb.d/postgres.sql\n```\n\n`docker-compose.yml`\n```yml\nservices:\n  postgres:\n    build:\n      target: postgres\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_PASSWORD: password\n  clickhouse:\n    build:\n      target: clickhouse\n    develop:\n      watch:\n        - path: ./Dockerfile\n          action: rebuild\n    ports:\n      - \"9000:9000\"\n```\n\nThen:\n1. `docker compose up --watch`\n2. in a new terminal, `docker compose exec clickhouse clickhouse-client -q \"select ts from test where ts > '2025-01-01 00:00:00'::DateTime64\"` produces the aforementioned error.\n\nProviding a string date means the string is sent directly to Postgres and cast there, without error:\n1. `docker compose exec clickhouse clickhouse-client -q \"select ts from test where ts > '2025-01-01 00:00:00'\"`\n\nTo compare with 24.12,\n1. Replace the Clickhouse version in the Dockerfile with 24.12 and save the file\n2. Wait a few seconds for docker compose to rebuild the image\n3. `docker compose exec clickhouse -q \"select ts from test where ts > '2025-01-01 00:00:00'::DateTime64\"` returns `2025-01-02 03:04:05.678900` as expected\n\n### Expected behavior\n\nClickhouse should send an appropriate data type to Postgres (a date/time-formatted string?) so that comparisons against date/times work. The behaviour in 24.12 was correct.\n\n### Error message and/or stacktrace\n\nCouple more examples, this time showing bare integers being sent:\n\n```sql\nselect ts\nfrom test \nwhere ts > '2025-01-01'::DateTime\n```\n```\nReceived exception from server (version 25.1.3):\nCode: 1001. DB::Exception: Received from localhost:9000. DB::Exception: pqxx::undefined_function: ERROR:  operator does not exist: timestamp with time zone > integer\nLINE 1: COPY (SELECT \"ts\" FROM \"test\" WHERE \"ts\" > 1735689600) TO ST...\n                                                 ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n. (STD_EXCEPTION)\n(query: select ts from test where ts > '2025-01-01'::DateTime)\n```\n\n```sql\nselect ts\nfrom test \nwhere ts > '2025-01-01'::Date\n```\n```\nReceived exception from server (version 25.1.3):\nCode: 1001. DB::Exception: Received from localhost:9000. DB::Exception: pqxx::undefined_function: ERROR:  operator does not exist: timestamp with time zone > integer\nLINE 1: COPY (SELECT \"ts\" FROM \"test\" WHERE \"ts\" > 20089) TO STDOUT\n                                                 ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n. (STD_EXCEPTION)\n(query: select ts from test where ts > '2025-01-01'::Date)\n```\n(same for Date32)\n",
  "hints_text": "I have just tested this with MySQL as well, and it's the same thing:\n```\nmysqlxx::BadQuery: Incorrect DATETIME value: '1735689600' while executing query\n```\nso potentially affects some other table integrations too?\nthis issue affects Database Engines (PostgreSQL/MySQL) in version `25.2` too\n\nFiltering by date/times is not working, which seems like a significant problem.\n\n```sql\nCREATE DATABASE pg\nENGINE = PostgreSQL('host', 'db_pg', 'pg_user', 'pass', 'public', 0);\n\nselect id \nfrom pg.users \nwhere visited_at > '2025-01-01' - INTERVAL 1 DAY\n```\n\n```\nstd::exception. Code: 1001, type: pqxx::data_exception, e.what() = ERROR:  date/time field value out of range: \"1735592400\"\nLINE 1: ...ed_at\" FROM \"public\".\"users\" WHERE \"visited_at\" > '173559240...\n ^\nHINT:  Perhaps you need a different \"datestyle\" setting.\n(version 25.2.1.3085 (official build))\n```\nWe're seeing the same with PostgreSQL engines in 25.2, we've downgraded to LTS (24.8) for the time being.\nMaybe @rschu1ze or @alexey-milovidov could help take a look this issue with Pg/Mysql?\nAny visibility on the timeline to fix this? Sounds like a major bug preventing from upgrade...\nBisected to https://github.com/ClickHouse/ClickHouse/pull/74355\n",
  "created_at": "2025-05-16T05:12:11Z",
  "modified_files": [
    "src/Analyzer/ConstantNode.cpp"
  ],
  "modified_test_files": [
    "src/Storages/tests/gtest_transform_query_for_external_database.cpp",
    "tests/integration/test_storage_postgresql/test.py"
  ]
}