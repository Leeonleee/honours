You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
25.1 broke predicate pushdown of Date/Time types to PostgreSQL/MySQL engines
### Describe what's wrong

Clickhouse's Date/Time types are sent to Postgres as (string-formatted) integers instead of date-formatted strings or Postgres date/timestamp types. This breaks WHERE clauses against Postgres tables with date/timestamp columns. This behaviour is new in 25.1.

For example, when `test` is a remote Postgres table with `ts timestamptz`:

```sql
select ts 
from test 
where ts > '2025-01-01'::DateTime64
```
```
Received exception from server (version 25.1.3):
Code: 1001. DB::Exception: Received from localhost:9000. DB::Exception: pqxx::data_exception: ERROR:  date/time field value out of range: "1735689600"
LINE 1: COPY (SELECT "ts" FROM "test" WHERE "ts" > '1735689600') TO ...
                                                   ^
HINT:  Perhaps you need a different "datestyle" setting.
. (STD_EXCEPTION)
(query: select ts from test where ts > '2025-01-01'::DateTime64)
```

### Does it reproduce on the most recent release?

Yes

### How to reproduce

#### From [my gist](https://gist.github.com/swt30/7e4106a9a353cf82019cb92fc5ee93ee)
1. `git clone https://gist.github.com/7e4106a9a353cf82019cb92fc5ee93ee.git clickhouse-issue-75597`
2. `cd clickhouse-issue-75597`
2. `just up` to run clickhouse & postgres containers
3. `just bug`

#### Manually
Put the following Dockerfile and docker-compose in the same directory. 

`Dockerfile`
```dockerfile
FROM postgres:17.2 AS postgres
RUN echo "create table test as (select '2025-01-02 03:04:05.678900'::timestamptz as ts, '2025-01-02'::date as d);" > /docker-entrypoint-initdb.d/table.sql

FROM clickhouse/clickhouse-server:25.1.3.23 AS clickhouse
# FROM clickhouse/clickhouse-server:24.12 AS clickhouse
RUN echo "create table test (ts DateTime64(6, 'UTC'), d Date) engine = PostgreSQL('postgres:5432', 'postgres', 'test', 'postgres', 'password')" > /docker-entrypoint-initdb.d/postgres.sql
```

`docker-compose.yml`
```yml
services:
  postgres:
    build:
      target: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
  clickhouse:
    build:
      target: clickhouse
    develop:
      watch:
        - path: ./Dockerfile
          action: rebuild
    ports:
      - "9000:9000"
```

Then:
1. `docker compose up --watch`
2. in a new terminal, `docker compose exec clickhouse clickhouse-client -q "select ts from test where ts > '2025-01-01 00:00:00'::DateTime64"` produces the aforementioned error.

Providing a string date means the string is sent directly to Postgres and cast there, without error:
1. `docker compose exec clickhouse clickhouse-client -q "select ts from test where ts > '2025-01-01 00:00:00'"`

To compare with 24.12,
1. Replace the Clickhouse version in the Dockerfile with 24.12 and save the file
2. Wait a few seconds for docker compose to rebuild the image
3. `docker compose exec clickhouse -q "select ts from test where ts > '2025-01-01 00:00:00'::DateTime64"` returns `2025-01-02 03:04:05.678900` as expected

### Expected behavior

Clickhouse should send an appropriate data type to Postgres (a date/time-formatted string?) so that comparisons against date/times work. The behaviour in 24.12 was correct.

### Error message and/or stacktrace

Couple more examples, this time showing bare integers being sent:

```sql
select ts
from test 
where ts > '2025-01-01'::DateTime
```
```
Received exception from server (version 25.1.3):
Code: 1001. DB::Exception: Received from localhost:9000. DB::Exception: pqxx::undefined_function: ERROR:  operator does not exist: timestamp with time zone > integer
LINE 1: COPY (SELECT "ts" FROM "test" WHERE "ts" > 1735689600) TO ST...
                                                 ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
. (STD_EXCEPTION)
(query: select ts from test where ts > '2025-01-01'::DateTime)
```

```sql
select ts
from test 
where ts > '2025-01-01'::Date
```
```
Received exception from server (version 25.1.3):
Code: 1001. DB::Exception: Received from localhost:9000. DB::Exception: pqxx::undefined_function: ERROR:  operator does not exist: timestamp with time zone > integer
LINE 1: COPY (SELECT "ts" FROM "test" WHERE "ts" > 20089) TO STDOUT
                                                 ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
. (STD_EXCEPTION)
(query: select ts from test where ts > '2025-01-01'::Date)
```
(same for Date32)
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
