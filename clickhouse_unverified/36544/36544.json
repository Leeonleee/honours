{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36544,
  "instance_id": "ClickHouse__ClickHouse-36544",
  "issue_numbers": [
    "36523",
    "32305"
  ],
  "base_commit": "012f85a569cfeca969836f778fb89ebbbaea08c5",
  "patch": "diff --git a/src/DataTypes/DataTypeTuple.cpp b/src/DataTypes/DataTypeTuple.cpp\nindex 908e0184b8d3..558b13927c18 100644\n--- a/src/DataTypes/DataTypeTuple.cpp\n+++ b/src/DataTypes/DataTypeTuple.cpp\n@@ -54,9 +54,6 @@ static std::optional<Exception> checkTupleNames(const Strings & names)\n         if (name.empty())\n             return Exception(\"Names of tuple elements cannot be empty\", ErrorCodes::BAD_ARGUMENTS);\n \n-        if (isNumericASCII(name[0]))\n-            return Exception(\"Explicitly specified names of tuple elements cannot start with digit\", ErrorCodes::BAD_ARGUMENTS);\n-\n         if (!names_set.insert(name).second)\n             return Exception(\"Names of tuple elements must be unique\", ErrorCodes::DUPLICATE_COLUMN);\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference b/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference\nnew file mode 100644\nindex 000000000000..5f330409b2a7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference\n@@ -0,0 +1,10 @@\n+CREATE TABLE default.t_tuple_numeric\\n(\\n    `t` Tuple(`1` Tuple(`2` Int32, `3` Int32), `4` Int32)\\n)\\nENGINE = Memory\n+{\"t\":{\"1\":{\"2\":2,\"3\":3},\"4\":4}}\n+2\t3\t4\n+2\t3\t4\n+2\t3\t4\n+2\t3\t4\n+Tuple(`1` Tuple(`2` Int8, `3` Int8), `4` Int8)\n+{\"t\":{\"1\":{\"2\":2,\"3\":3},\"4\":4}}\n+2\t3\t4\n+(('value'))\ndiff --git a/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql b/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql\nnew file mode 100644\nindex 000000000000..b5b0508deaaf\n--- /dev/null\n+++ b/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql\n@@ -0,0 +1,45 @@\n+-- Tags: no-fasttest\n+\n+DROP TABLE IF EXISTS t_tuple_numeric;\n+\n+CREATE TABLE t_tuple_numeric (t Tuple(`1` Tuple(`2` Int, `3` Int), `4` Int)) ENGINE = Memory;\n+SHOW CREATE TABLE t_tuple_numeric;\n+\n+INSERT INTO t_tuple_numeric VALUES (((2, 3), 4));\n+\n+SET output_format_json_named_tuples_as_objects = 1;\n+\n+SELECT * FROM t_tuple_numeric FORMAT JSONEachRow;\n+SELECT `t`.`1`.`2`, `t`.`1`.`3`, `t`.`4` FROM t_tuple_numeric;\n+SELECT t.1.1, t.1.2, t.2 FROM t_tuple_numeric;\n+\n+SELECT t.1.3 FROM t_tuple_numeric; -- {serverError ILLEGAL_INDEX}\n+SELECT t.4 FROM t_tuple_numeric; -- {serverError ILLEGAL_INDEX}\n+SELECT `t`.`1`.`1`, `t`.`1`.`2`, `t`.`2` FROM t_tuple_numeric; -- {serverError UNKNOWN_IDENTIFIER}\n+\n+DROP TABLE t_tuple_numeric;\n+\n+CREATE TABLE t_tuple_numeric (t Tuple(Tuple(Int, Int), Int)) ENGINE = Memory;\n+\n+INSERT INTO t_tuple_numeric VALUES (((2, 3), 4));\n+\n+SELECT t.1.1, t.1.2, t.2 FROM t_tuple_numeric;\n+SELECT `t`.`1`.`1`, `t`.`1`.`2`, `t`.`2` FROM t_tuple_numeric;\n+\n+DROP TABLE t_tuple_numeric;\n+\n+SET allow_experimental_object_type = 1;\n+CREATE TABLE t_tuple_numeric (t JSON) ENGINE = Memory;\n+INSERT INTO t_tuple_numeric FORMAT JSONEachRow {\"t\":{\"1\":{\"2\":2,\"3\":3},\"4\":4}}\n+\n+SELECT toTypeName(t) FROM t_tuple_numeric LIMIT 1;\n+\n+SELECT * FROM t_tuple_numeric FORMAT JSONEachRow;\n+SELECT `t`.`1`.`2`, `t`.`1`.`3`, `t`.`4` FROM t_tuple_numeric;\n+\n+DROP TABLE t_tuple_numeric;\n+\n+WITH\n+    '{\"1\":{\"key\":\"value\"}}' AS data,\n+    JSONExtract(data, 'Tuple(\"1\" Tuple(key String))') AS parsed_json\n+SELECT parsed_json AS ssid\n",
  "problem_statement": "JSON data type: Explicitly specified names of tuple elements cannot start with digit\n**Describe the unexpected behaviour**\r\n\r\nAn error is received when inserting to a table with JSON column type:\r\n\r\n```\r\nReceived exception from server (version 22.3.3):\r\nCode: 36. DB::Exception: Received from localhost:9000. DB::Exception: Explicitly specified names of tuple elements cannot start with digit. (BAD_ARGUMENTS)\r\n```\r\n\r\n**How to reproduce**\r\n```sql \r\nset allow_experimental_object_type=true;\r\nCREATE TABLE json_test (data JSON) ENGINE=MergeTree PRIMARY KEY tuple();\r\nINSERT INTO json_test (data) VALUES('{ \"12344\": true }');\r\n```\r\nresult: \r\n```\r\nINSERT INTO json_test (data) FORMAT Values\r\n\r\n1 rows in set. Elapsed: 0.002 sec. \r\n\r\nReceived exception from server (version 22.3.3):\r\nCode: 36. DB::Exception: Received from localhost:9000. DB::Exception: Explicitly specified names of tuple elements cannot start with digit. (BAD_ARGUMENTS)\r\n```\r\n\r\n* Which ClickHouse server version to use\r\n22.3.3.44\r\n\r\n\r\n**Expected behavior**\r\nIt must be possible to insert such JSON to the table since its a valid JSON:\r\n\r\n```\r\nselect isValidJSON('{ \"12344\": true }');\r\n\r\n\u250c\u2500isValidJSON('{ \"12344\": true }')\u2500\u2510\r\n\u2502                                1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\nJSONExtract Tuple name can't start from digit.\n**Describe what's wrong**\r\n\r\nIt's not possible to use digit as tuple name, so it's not possible to parse JSON files to nested tuple structure with JSONExtract.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes\r\n\r\nClickHouse 21.12\r\n\r\n\r\n**How to reproduce**\r\n```\r\nWITH\r\n    '{\"1\":{\"key\":\"value\"}}' AS data,\r\n    JSONExtract(data, 'Tuple(\"1\" Tuple(key String))') AS parsed_json\r\nSELECT parsed_json AS ssid\r\n\r\nQuery id: 5bc7b6cf-155a-421c-ac20-f3be09bd9692\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n\r\nReceived exception from server (version 21.12.1):\r\nCode: 36. DB::Exception: Received from localhost:9000. DB::Exception: Explicitly specified names of tuple elements cannot start with digit: While processing JSONExtract('{\"1\":{\"key\":\"value\"}}' AS data, 'Tuple(\"1\" Tuple(key String))') AS ssid. (BAD_ARGUMENTS)\r\n```\r\n\r\n**Expected behavior**\r\n\r\nIt's possible to parse JSON with digit keys.\r\n\r\n\n",
  "hints_text": "Ok, let's remove this restriction.\nThis json can be parsed specifying key name as second argument of `JSONExtract`\r\n```\r\nWITH '{\"1\":{\"key\":\"value\"}}' AS data, JSONExtract(data, '1', 'Tuple(key String)') AS parsed_json\r\nSELECT parsed_json AS ssid;\r\n```\r\n\r\n\n> This json can be parsed specifying key name as second argument of JSONExtract\r\n\r\nBut, in that case you can't simply parse whole JSON file via single JSONExtract and need separate JSONExtract for each \"numeric\" key. Which is slow and required to have a lot of repeating code.\n```sql\r\nSELECT\r\n    JSONExtractInt('{\"\\\\x99\": 3}' AS j, 1),\r\n    isValidJSON(j)\r\n\r\n\u250c\u2500JSONExtractInt('{\"\\\\x99\": 3}', 1)\u2500\u252c\u2500isValidJSON('{\"\\\\x99\": 3}')\u2500\u2510\r\n\u2502                                 0 \u2502                           0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nexpected\r\n\r\n```sql\r\nSELECT\r\n    JSONExtractInt('{\"\\\\x99\": 3}' AS j, 1),\r\n    isValidJSON(j)\r\n\r\n\u250c\u2500JSONExtractInt('{\"\\\\x99\": 3}', 1)\u2500\u252c\u2500isValidJSON('{\"\\\\x99\": 3}')\u2500\u2510\r\n\u2502                                 3 \u2502                           1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nbecause `\\x99` is a valid JSON object name.\r\n\r\n```\r\n$ node\r\n\r\n> a = {\"\\x98\": 5}\r\n{ '\\x98': 5 }\r\n```\r\n\r\n-----\r\n\r\n\r\n```sql\r\nSELECT\r\n    JSONExtractString('{\"z\": \"\\\\x99\"}' AS j, 1),\r\n    isValidJSON(j)\r\n\r\n\u250c\u2500JSONExtractString('{\"z\": \"\\\\x99\"}', 1)\u2500\u252c\u2500isValidJSON('{\"z\": \"\\\\x99\"}')\u2500\u2510\r\n\u2502                                        \u2502                             0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nexpected\r\n\r\n```\r\n\u250c\u2500JSONExtractString('{\"z\": \"\\\\x99\"}', 1)\u2500\u252c\u2500isValidJSON('{\"z\": \"\\\\x99\"}')\u2500\u2510\r\n\u2502                                  \\x99  \u2502                             1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nthis also affects the new experimental JSON column type, such JSON can not be inserted:\r\n\r\n```sql\r\nINSERT INTO table (data) VALUES('{ \"12344\": true }');\r\n```\r\n\r\n```\r\nReceived exception from server (version 22.3.3):\r\nCode: 36. DB::Exception: Received from localhost:9000. DB::Exception: Explicitly specified names of tuple elements cannot start with digit. (BAD_ARGUMENTS)\r\n```\r\n\r\nthe column definition is:\r\n\r\n> data JSON\r\n\r\ni created a new bug https://github.com/ClickHouse/ClickHouse/issues/36523",
  "created_at": "2022-04-22T12:10:06Z",
  "modified_files": [
    "src/DataTypes/DataTypeTuple.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference",
    "b/tests/queries/0_stateless/02286_tuple_numeric_identifier.sql"
  ]
}