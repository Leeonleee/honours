diff --git a/tests/integration/test_grpc_protocol/test.py b/tests/integration/test_grpc_protocol/test.py
index 0dc08630b774..0332e5bb90f5 100644
--- a/tests/integration/test_grpc_protocol/test.py
+++ b/tests/integration/test_grpc_protocol/test.py
@@ -388,8 +388,6 @@ def test_progress():
                 rows=8,
                 blocks=4,
                 allocated_bytes=1092,
-                applied_limit=True,
-                rows_before_limit=8,
             )
         ),
     ]
diff --git a/tests/integration/test_storage_numbers/__init__.py b/tests/integration/test_storage_numbers/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/integration/test_storage_numbers/test.py b/tests/integration/test_storage_numbers/test.py
new file mode 100644
index 000000000000..61fe8719ea2e
--- /dev/null
+++ b/tests/integration/test_storage_numbers/test.py
@@ -0,0 +1,244 @@
+import pytest
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+
+node = cluster.add_instance("node", main_configs=[])
+
+
+@pytest.fixture(scope="module")
+def started_cluster(request):
+    try:
+        cluster.start()
+        yield cluster
+    finally:
+        cluster.shutdown()
+
+
+def check_read_rows(query_id, read_rows):
+    node.query("SYSTEM FLUSH LOGS")
+    real_read_rows = node.query(
+        f"""SELECT read_rows
+            FROM system.query_log
+            WHERE
+                type = 'QueryFinish' and
+                query_id = '{query_id}'
+            ORDER BY initial_query_start_time_microseconds DESC
+            LIMIT 1"""
+    )
+    assert real_read_rows == str(read_rows) + "
"
+
+
+def test_simple_range(started_cluster):
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number=1 FORMAT Values",
+        query_id="test_equal",
+    )
+    assert response == "(1)"
+    check_read_rows("test_equal", 1)
+
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number > 1 and number < 6 FORMAT Values",
+        query_id="test_single_range",
+    )
+    assert response == "(2),(3),(4),(5)"
+    check_read_rows("test_single_range", 4)
+
+
+def test_between(started_cluster):
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number between 1 and 6 FORMAT Values",
+        query_id="test_between",
+    )
+    assert response == "(1),(2),(3),(4),(5),(6)"
+    check_read_rows("test_between", 6)
+
+
+def test_blank_range(started_cluster):
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number < 1 and number > 6 FORMAT Values",
+        query_id="test_blank_range",
+    )
+    assert response == ""
+    check_read_rows("test_blank_range", 0)
+
+
+def test_in(started_cluster):
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number in (2, 3) FORMAT Values",
+        query_id="test_in_simple",
+    )
+    assert response == "(2),(3)"
+    check_read_rows("test_in_simple", 2)
+
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number in (2, 3, 3) FORMAT Values",
+        query_id="test_in_with_duplicated_values",
+    )
+    assert response == "(2),(3)"
+    check_read_rows("test_in_with_duplicated_values", 2)
+
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number in (2, 3, 1) FORMAT Values",
+        query_id="test_in_with_unordered_values",
+    )
+    assert response == "(1),(2),(3)"
+    check_read_rows("test_in_with_unordered_values", 3)
+
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number in (1, 2, 5) FORMAT Values",
+        query_id="test_in_multiple_ranges",
+    )
+    assert response == "(1),(2),(5)"
+    check_read_rows("test_in_multiple_ranges", 3)
+
+
+def test_not_in(started_cluster):
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number not in (2, 3) limit 3 FORMAT Values",
+        query_id="test_not_in",
+    )
+    assert response == "(0),(1),(4)"
+    check_read_rows("test_not_in", 3)
+
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number not in (2, 4, 5) limit 4 FORMAT Values",
+        query_id="test_not_in_multiple_ranges",
+    )
+    assert response == "(0),(1),(3),(6)"
+    check_read_rows("test_not_in_multiple_ranges", 4)
+
+
+def test_and(started_cluster):
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number in (2, 4) and number > 2 FORMAT Values",
+        query_id="test_and",
+    )
+    assert response == "(4)"
+    check_read_rows("test_and", 1)
+
+
+def test_or(started_cluster):
+    response = node.query(
+        """SELECT
+                *
+            FROM
+                system.numbers
+            WHERE
+                (number > 1 and number < 3) or (number in (4, 6)) or (number > 7 and number < 9)
+            FORMAT Values""",
+        query_id="test_simple_or",
+    )
+    assert response == "(2),(4),(6),(8)"
+    check_read_rows("test_simple_or", 4)
+
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE (number > 1 and number < 3) or (number < 6) FORMAT Values",
+        query_id="test_or_with_overlapping_ranges",
+    )
+    assert response == "(0),(1),(2),(3),(4),(5)"
+    check_read_rows("test_or_with_overlapping_ranges", 6)
+
+
+def test_not(started_cluster):
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE not (number > 1 and number < 3) limit 5 FORMAT Values",
+        query_id="test_not",
+    )
+    assert response == "(0),(1),(3),(4),(5)"
+    check_read_rows("test_not", 5)
+
+
+def test_true_or_false(started_cluster):
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number < 3 and 1 limit 5 FORMAT Values",
+        query_id="test_true",
+    )
+    assert response == "(0),(1),(2)"
+    check_read_rows("test_true", 3)
+
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number < 3 and 0 FORMAT Values",
+        query_id="test_false",
+    )
+    assert response == ""
+    check_read_rows("test_false", 0)
+
+
+def test_limit(started_cluster):
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number > 2 limit 1 FORMAT Values",
+        query_id="test_simple_limit",
+    )
+    assert response == "(3)"
+    check_read_rows("test_simple_limit", 1)
+
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number not in (2, 3) limit 1 FORMAT Values",
+        query_id="test_limit_with_multi_ranges",
+    )
+    assert response == "(0)"
+    check_read_rows("test_limit_with_multi_ranges", 1)
+
+    response = node.query(
+        "SELECT * FROM system.numbers WHERE number not in (2, 3) limit 1, 2 FORMAT Values",
+        query_id="test_limit_with_offset",
+    )
+    assert response == "(1),(4)"
+    check_read_rows("test_limit_with_offset", 3)
+
+
+def test_subquery(started_cluster):
+    response = node.query(
+        """SELECT
+                *
+            FROM
+                (select * FROM system.numbers WHERE number < 2) AS n
+            FORMAT Values""",
+        query_id="test_subquery",
+    )
+    assert response == "(0),(1)"
+    check_read_rows("test_subquery", 2)
+
+
+def test_multi_streams(started_cluster):
+    response = node.query(
+        """SELECT
+                *
+            FROM
+                system.numbers_mt
+            WHERE
+                number > 1 and number < 7
+            ORDER BY
+                number
+            FORMAT Values
+            settings max_block_size=2""",
+        query_id="test_multi_streams",
+    )
+    assert response == "(2),(3),(4),(5),(6)"
+    check_read_rows("test_multi_streams", 5)
+
+    response = node.query(
+        """SELECT
+                *
+            FROM
+                system.numbers_mt
+            WHERE
+                (number > 1 and number < 3) or (number in (4, 6)) or (number > 7 and number < 10)
+            ORDER BY
+                number
+            FORMAT Values
+            settings max_block_size=2""",
+        query_id="test_multi_streams_with_multi_ranges",
+    )
+    assert response == "(2),(4),(6),(8),(9)"
+    check_read_rows("test_multi_streams", 5)
+
+
+def test_overflow(started_cluster):
+    response = node.query(
+        "SELECT number FROM numbers(18446744073709551614, 5) FORMAT Values",
+        query_id="test_overflow",
+    )
+    assert response == "(18446744073709551614),(18446744073709551615),(0),(1),(2)"
+    check_read_rows("test_overflow", 5)
diff --git a/tests/queries/0_stateless/00344_row_number_in_all_blocks.sql b/tests/queries/0_stateless/00344_row_number_in_all_blocks.sql
index 43727f2a14e8..56a04c85c253 100644
--- a/tests/queries/0_stateless/00344_row_number_in_all_blocks.sql
+++ b/tests/queries/0_stateless/00344_row_number_in_all_blocks.sql
@@ -1,4 +1,5 @@
 SET max_block_size = 1000;
+SET max_threads = 10;
 SELECT
     groupUniqArray(blockSize()),
     uniqExact(rowNumberInAllBlocks()),
diff --git a/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference b/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference
index c6db9cc16149..462f2f63fe1d 100644
--- a/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference
+++ b/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference
@@ -24,4 +24,4 @@
 7
 8
 9
-< X-ClickHouse-Summary: {"read_rows":"10","read_bytes":"80","written_rows":"10","written_bytes":"40","total_rows_to_read":"0","result_rows":"10","result_bytes":"40"}
+< X-ClickHouse-Summary: {"read_rows":"10","read_bytes":"80","written_rows":"10","written_bytes":"40","total_rows_to_read":"10","result_rows":"10","result_bytes":"40"}
diff --git a/tests/queries/0_stateless/01472_many_rows_in_totals.reference b/tests/queries/0_stateless/01472_many_rows_in_totals.reference
index 28f78731283c..92a9e4bbb53a 100644
--- a/tests/queries/0_stateless/01472_many_rows_in_totals.reference
+++ b/tests/queries/0_stateless/01472_many_rows_in_totals.reference
@@ -63,8 +63,6 @@ Totals:
 		"s": "6"
 	},
 
-	"rows": 4,
-
-	"rows_before_limit_at_least": 4
+	"rows": 4
 }
 --
diff --git a/tests/queries/0_stateless/01553_settings_early_apply.reference b/tests/queries/0_stateless/01553_settings_early_apply.reference
index a42a7daadaa0..860d8d48c856 100644
--- a/tests/queries/0_stateless/01553_settings_early_apply.reference
+++ b/tests/queries/0_stateless/01553_settings_early_apply.reference
@@ -70,7 +70,5 @@ UInt64
 		["9"]
 	],
 
-	"rows": 10,
-
-	"rows_before_limit_at_least": 10
+	"rows": 10
 }
diff --git a/tests/queries/0_stateless/01591_window_functions.reference b/tests/queries/0_stateless/01591_window_functions.reference
index ce9c6f4589e0..5d12a09a8460 100644
--- a/tests/queries/0_stateless/01591_window_functions.reference
+++ b/tests/queries/0_stateless/01591_window_functions.reference
@@ -921,7 +921,7 @@ Expression ((Project names + Projection))
       Window (Window step for window \'PARTITION BY p_0 ORDER BY o_1 ASC\')
         Sorting (Sorting for window \'PARTITION BY p_0 ORDER BY o_1 ASC\')
           Expression ((Before WINDOW + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))))
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 explain select
     count(*) over (order by o, number),
     count(*) over (order by number)
@@ -936,7 +936,7 @@ Expression ((Project names + Projection))
         Expression ((Before WINDOW + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))) [lifted up part])
           Sorting (Sorting for window \'ORDER BY number_1 ASC\')
             Expression ((Before WINDOW + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))))
-              ReadFromStorage (SystemNumbers)
+              ReadFromSystemNumbers
 -- A test case for the sort comparator found by fuzzer.
 SELECT
     max(number) OVER (ORDER BY number DESC NULLS FIRST),
diff --git a/tests/queries/0_stateless/01722_long_brotli_http_compression_json_format.reference b/tests/queries/0_stateless/01722_long_brotli_http_compression_json_format.reference
index 7c089a2fd059..4b7a52a1f13d 100644
--- a/tests/queries/0_stateless/01722_long_brotli_http_compression_json_format.reference
+++ b/tests/queries/0_stateless/01722_long_brotli_http_compression_json_format.reference
@@ -1,3 +1,5 @@
+			"detail": "clickhouse",
+			"row_number": "999997"
 		},
 		{
 			"datetime": "2020-12-12",
@@ -19,5 +21,3 @@
 
 	"rows": 1000000,
 
-	"rows_before_limit_at_least": 1048080,
-
diff --git a/tests/queries/0_stateless/01746_long_zlib_http_compression_json_format.reference b/tests/queries/0_stateless/01746_long_zlib_http_compression_json_format.reference
index 92dfd99c259f..c8cd971ab908 100644
--- a/tests/queries/0_stateless/01746_long_zlib_http_compression_json_format.reference
+++ b/tests/queries/0_stateless/01746_long_zlib_http_compression_json_format.reference
@@ -1,3 +1,5 @@
+			"detail": "clickhouse",
+			"row_number": "99997"
 		},
 		{
 			"datetime": "2020-12-12",
@@ -19,5 +21,3 @@
 
 	"rows": 100000,
 
-	"rows_before_limit_at_least": 131010,
-
diff --git a/tests/queries/0_stateless/01746_long_zstd_http_compression_json_format.reference b/tests/queries/0_stateless/01746_long_zstd_http_compression_json_format.reference
index 7c089a2fd059..4b7a52a1f13d 100644
--- a/tests/queries/0_stateless/01746_long_zstd_http_compression_json_format.reference
+++ b/tests/queries/0_stateless/01746_long_zstd_http_compression_json_format.reference
@@ -1,3 +1,5 @@
+			"detail": "clickhouse",
+			"row_number": "999997"
 		},
 		{
 			"datetime": "2020-12-12",
@@ -19,5 +21,3 @@
 
 	"rows": 1000000,
 
-	"rows_before_limit_at_least": 1048080,
-
diff --git a/tests/queries/0_stateless/01883_with_grouping_sets.reference b/tests/queries/0_stateless/01883_with_grouping_sets.reference
index 499e930541fb..643fc6fa70c5 100644
--- a/tests/queries/0_stateless/01883_with_grouping_sets.reference
+++ b/tests/queries/0_stateless/01883_with_grouping_sets.reference
@@ -104,8 +104,8 @@ ExpressionTransform
                   Copy × 3 1 → 2
                     (Expression)
                     ExpressionTransform × 3
-                      (ReadFromStorage)
-                      NumbersMt × 3 0 → 1
+                      (ReadFromSystemNumbers)
+                      NumbersRange × 3 0 → 1
 4999500000	10000
 4999510000	10000
 4999520000	10000
diff --git a/tests/queries/0_stateless/01951_distributed_push_down_limit.reference b/tests/queries/0_stateless/01951_distributed_push_down_limit.reference
index d175d31846bc..fcdf9ba502f9 100644
--- a/tests/queries/0_stateless/01951_distributed_push_down_limit.reference
+++ b/tests/queries/0_stateless/01951_distributed_push_down_limit.reference
@@ -6,7 +6,7 @@ Expression
       Union
         Sorting
           Expression
-            ReadFromStorage
+            ReadFromSystemNumbers
         ReadFromRemote
 explain description=0 select * from remote('127.{1,2}', view(select * from numbers(1e6))) order by number limit 10 settings distributed_push_down_limit=1;
 Expression
@@ -15,5 +15,5 @@ Expression
       Union
         Sorting
           Expression
-            ReadFromStorage
+            ReadFromSystemNumbers
         ReadFromRemote
diff --git a/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference b/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference
index 6adb2382a6f6..ddfa6929d693 100644
--- a/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference
+++ b/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference
@@ -5,7 +5,7 @@ Expression (Projection)
     Union
       Distinct (Preliminary DISTINCT)
         Expression ((Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
       ReadFromRemote (Read from remote replica)
 explain select distinct k1, k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)); -- optimized
 Union
@@ -13,14 +13,14 @@ Union
     Distinct
       Distinct (Preliminary DISTINCT)
         Expression ((Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
   ReadFromRemote (Read from remote replica)
 explain select distinct on (k1) k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)); -- not optimized
 Expression (Projection)
   LimitBy
     Union
       Expression ((Before LIMIT BY + (Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY))))))
-        ReadFromStorage (SystemNumbers)
+        ReadFromSystemNumbers
       Expression
         ReadFromRemote (Read from remote replica)
 explain select distinct on (k1, k2) v from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)); -- optimized
@@ -28,7 +28,7 @@ Union
   Expression (Projection)
     LimitBy
       Expression ((Before LIMIT BY + (Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY))))))
-        ReadFromStorage (SystemNumbers)
+        ReadFromSystemNumbers
   ReadFromRemote (Read from remote replica)
 explain select distinct k1 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)) order by v; -- not optimized
 Expression (Projection)
@@ -38,7 +38,7 @@ Expression (Projection)
         Sorting (Sorting for ORDER BY)
           Distinct (Preliminary DISTINCT)
             Expression ((Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))))
-              ReadFromStorage (SystemNumbers)
+              ReadFromSystemNumbers
         ReadFromRemote (Read from remote replica)
 explain select distinct k1, k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)) order by v; -- optimized
 Expression (Projection)
@@ -48,7 +48,7 @@ Expression (Projection)
         Sorting (Sorting for ORDER BY)
           Distinct (Preliminary DISTINCT)
             Expression ((Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))))
-              ReadFromStorage (SystemNumbers)
+              ReadFromSystemNumbers
       ReadFromRemote (Read from remote replica)
 explain select distinct on (k1) k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)) order by v; -- not optimized
 Expression (Projection)
@@ -59,7 +59,7 @@ Expression (Projection)
           Expression ((Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))) [lifted up part])
             Sorting (Sorting for ORDER BY)
               Expression ((Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))))
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
           ReadFromRemote (Read from remote replica)
 explain select distinct on (k1, k2) v from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)) order by v; -- optimized
 Expression (Projection)
@@ -69,5 +69,5 @@ Expression (Projection)
         Expression ((Before LIMIT BY + (Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))) [lifted up part]))
           Sorting (Sorting for ORDER BY)
             Expression ((Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))))
-              ReadFromStorage (SystemNumbers)
+              ReadFromSystemNumbers
       ReadFromRemote (Read from remote replica)
diff --git a/tests/queries/0_stateless/02050_client_profile_events.reference b/tests/queries/0_stateless/02050_client_profile_events.reference
index 99b0fa6c9811..bb22feab1574 100644
--- a/tests/queries/0_stateless/02050_client_profile_events.reference
+++ b/tests/queries/0_stateless/02050_client_profile_events.reference
@@ -1,7 +1,7 @@
 do not print any ProfileEvents packets
 0
 print only last (and also number of rows to provide more info in case of failures)
-[ 0 ] SelectedRows: 131010 (increment)
+[ 0 ] SelectedRows: 100000 (increment)
 regression test for incorrect filtering out snapshots
 0
 regression test for overlap profile events snapshots between queries
diff --git a/tests/queries/0_stateless/02136_kill_scalar_queries.reference b/tests/queries/0_stateless/02136_kill_scalar_queries.reference
index a598447cff52..fad9fad21b96 100644
--- a/tests/queries/0_stateless/02136_kill_scalar_queries.reference
+++ b/tests/queries/0_stateless/02136_kill_scalar_queries.reference
@@ -1,2 +1,1 @@
 finished	default_TEST02132KILL_QUERY1	default	select (SELECT max(number) from system.numbers) + 1;
-finished	default_TEST02132KILL_QUERY2	default	SELECT (SELECT number FROM system.numbers WHERE number = 1000000000000);
diff --git a/tests/queries/0_stateless/02136_kill_scalar_queries.sh b/tests/queries/0_stateless/02136_kill_scalar_queries.sh
index 382f6555c667..c8691b623601 100755
--- a/tests/queries/0_stateless/02136_kill_scalar_queries.sh
+++ b/tests/queries/0_stateless/02136_kill_scalar_queries.sh
@@ -14,9 +14,4 @@ QUERY_1_ID="${CLICKHOUSE_DATABASE}_TEST02132KILL_QUERY1"
 wait_for_query_to_start "${QUERY_1_ID}"
 ${CLICKHOUSE_CLIENT} --query="KILL QUERY WHERE query_id='${QUERY_1_ID}' SYNC"
 
-QUERY_2_ID="${CLICKHOUSE_DATABASE}_TEST02132KILL_QUERY2"
-(${CLICKHOUSE_CLIENT} --query_id="${QUERY_2_ID}" --query='SELECT (SELECT number FROM system.numbers WHERE number = 1000000000000);'  2>&1 | grep -q "Code: 394." || echo 'FAIL') &
-wait_for_query_to_start "${QUERY_2_ID}"
-${CLICKHOUSE_CLIENT} --query="KILL QUERY WHERE query_id='${QUERY_2_ID}' SYNC"
-
 wait
diff --git a/tests/queries/0_stateless/02136_scalar_progress.reference b/tests/queries/0_stateless/02136_scalar_progress.reference
index 5bb4f5640a8d..5378c52de895 100644
--- a/tests/queries/0_stateless/02136_scalar_progress.reference
+++ b/tests/queries/0_stateless/02136_scalar_progress.reference
@@ -1,6 +1,6 @@
 < X-ClickHouse-Progress: {"read_rows":"0","read_bytes":"0","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"0","result_bytes":"0"}
 < X-ClickHouse-Progress: {"read_rows":"65505","read_bytes":"524040","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"0","result_bytes":"0"}
-< X-ClickHouse-Progress: {"read_rows":"131010","read_bytes":"1048080","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"0","result_bytes":"0"}
-< X-ClickHouse-Progress: {"read_rows":"131011","read_bytes":"1048081","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"0","result_bytes":"0"}
-< X-ClickHouse-Progress: {"read_rows":"131011","read_bytes":"1048081","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"1","result_bytes":"272"}
-< X-ClickHouse-Summary: {"read_rows":"131011","read_bytes":"1048081","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"1","result_bytes":"272"}
+< X-ClickHouse-Progress: {"read_rows":"100000","read_bytes":"800000","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"0","result_bytes":"0"}
+< X-ClickHouse-Progress: {"read_rows":"100001","read_bytes":"800001","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"0","result_bytes":"0"}
+< X-ClickHouse-Progress: {"read_rows":"100001","read_bytes":"800001","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"1","result_bytes":"272"}
+< X-ClickHouse-Summary: {"read_rows":"100001","read_bytes":"800001","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000","result_rows":"1","result_bytes":"272"}
diff --git a/tests/queries/0_stateless/02136_scalar_read_rows_json.reference b/tests/queries/0_stateless/02136_scalar_read_rows_json.reference
index f83351252330..19857446e9cd 100644
--- a/tests/queries/0_stateless/02136_scalar_read_rows_json.reference
+++ b/tests/queries/0_stateless/02136_scalar_read_rows_json.reference
@@ -17,8 +17,6 @@
 
 	"rows": 1,
 
-	"rows_before_limit_at_least": 100,
-
 	"statistics":
 	{
 		"rows_read": 100,
@@ -44,7 +42,7 @@
 
 	"statistics":
 	{
-		"rows_read": 131011,
-		"bytes_read": 1048081
+		"rows_read": 100001,
+		"bytes_read": 800001
 	}
 }
diff --git a/tests/queries/0_stateless/02210_processors_profile_log_2.reference b/tests/queries/0_stateless/02210_processors_profile_log_2.reference
index b9a848131fd1..dfedb851e02d 100644
--- a/tests/queries/0_stateless/02210_processors_profile_log_2.reference
+++ b/tests/queries/0_stateless/02210_processors_profile_log_2.reference
@@ -6,7 +6,7 @@ ExpressionTransform	1000000	8000000	1000000	8000000
 LazyOutputFormat	1	8	0	0
 LimitsCheckingTransform	1	8	1	8
 NullSource	0	0	0	0
-NumbersMt	0	0	1000000	8000000
+NumbersRange	0	0	1000000	8000000
 Resize	1	8	1	8
 Resize	1	8	1	8
 1
diff --git a/tests/queries/0_stateless/02236_explain_pipeline_join.reference b/tests/queries/0_stateless/02236_explain_pipeline_join.reference
index 5d7a7bfc488a..73d0ca8cb5e6 100644
--- a/tests/queries/0_stateless/02236_explain_pipeline_join.reference
+++ b/tests/queries/0_stateless/02236_explain_pipeline_join.reference
@@ -6,12 +6,12 @@ ExpressionTransform
     ExpressionTransform
       (Limit)
       Limit
-        (ReadFromStorage)
-        Numbers 0 → 1
+        (ReadFromSystemNumbers)
+        NumbersRange 0 → 1
     (Expression)
     FillingRightJoinSide
       ExpressionTransform
         (Limit)
         Limit
-          (ReadFromStorage)
-          Numbers 0 → 1
+          (ReadFromSystemNumbers)
+          NumbersRange 0 → 1
diff --git a/tests/queries/0_stateless/02343_aggregation_pipeline.reference b/tests/queries/0_stateless/02343_aggregation_pipeline.reference
index acb0368c3ccb..bf61eb6da0a8 100644
--- a/tests/queries/0_stateless/02343_aggregation_pipeline.reference
+++ b/tests/queries/0_stateless/02343_aggregation_pipeline.reference
@@ -14,9 +14,8 @@ ExpressionTransform × 16
             AggregatingTransform
               (Expression)
               ExpressionTransform
-                (ReadFromStorage)
-                Limit
-                  Numbers 0 → 1
+                (ReadFromSystemNumbers)
+                NumbersRange 0 → 1
 explain pipeline select * from (select * from numbers_mt(1e8) group by number) group by number;
 (Expression)
 ExpressionTransform × 16
@@ -31,8 +30,8 @@ ExpressionTransform × 16
             AggregatingTransform × 16
               (Expression)
               ExpressionTransform × 16
-                (ReadFromStorage)
-                NumbersMt × 16 0 → 1
+                (ReadFromSystemNumbers)
+                NumbersRange × 16 0 → 1
 explain pipeline select * from (select * from numbers_mt(1e8) group by number) order by number;
 (Expression)
 ExpressionTransform
@@ -48,8 +47,8 @@ ExpressionTransform
               AggregatingTransform × 16
                 (Expression)
                 ExpressionTransform × 16
-                  (ReadFromStorage)
-                  NumbersMt × 16 0 → 1
+                  (ReadFromSystemNumbers)
+                  NumbersRange × 16 0 → 1
 explain pipeline select number from remote('127.0.0.{1,2,3}', system, numbers_mt) group by number settings distributed_aggregation_memory_efficient = 1;
 (Expression)
 ExpressionTransform × 16
@@ -65,8 +64,8 @@ ExpressionTransform × 16
                 AggregatingTransform × 16
                   (Expression)
                   ExpressionTransform × 16
-                    (ReadFromStorage)
-                    Numbers × 16 0 → 1
+                    (ReadFromSystemNumbers)
+                    NumbersRange × 16 0 → 1
               (ReadFromRemote)
 explain pipeline select number from remote('127.0.0.{1,2,3}', system, numbers_mt) group by number settings distributed_aggregation_memory_efficient = 0;
 (Expression)
@@ -81,8 +80,8 @@ ExpressionTransform × 16
             AggregatingTransform × 16
               (Expression)
               ExpressionTransform × 16
-                (ReadFromStorage)
-                Numbers × 16 0 → 1
+                (ReadFromSystemNumbers)
+                NumbersRange × 16 0 → 1
           (ReadFromRemote)
 -- { echoOn }
 
diff --git a/tests/queries/0_stateless/02350_views_max_insert_threads.sql b/tests/queries/0_stateless/02350_views_max_insert_threads.sql
index b8883a8d6e3a..25e0fdeadbaa 100644
--- a/tests/queries/0_stateless/02350_views_max_insert_threads.sql
+++ b/tests/queries/0_stateless/02350_views_max_insert_threads.sql
@@ -7,7 +7,7 @@ drop table if exists t_mv;
 create table t (a UInt64) Engine = Null;
 create materialized view t_mv Engine = Null AS select now() as ts, max(a) from t group by ts;
 
-insert into t select * from numbers_mt(10e6) settings max_threads = 16, max_insert_threads=16;
+insert into t select * from numbers_mt(10e6) settings max_threads = 16, max_insert_threads=16, max_block_size=100000;
 system flush logs;
 
 select arrayUniq(thread_ids)>=16 from system.query_log where
diff --git a/tests/queries/0_stateless/02421_formats_with_totals_and_extremes.reference b/tests/queries/0_stateless/02421_formats_with_totals_and_extremes.reference
index ee8e589089c1..1e96bda15f3d 100644
Binary files a/tests/queries/0_stateless/02421_formats_with_totals_and_extremes.reference and b/tests/queries/0_stateless/02421_formats_with_totals_and_extremes.reference differ
diff --git a/tests/queries/0_stateless/02494_query_cache_explain.reference b/tests/queries/0_stateless/02494_query_cache_explain.reference
index 690e75bca7c2..71e8d2beff0c 100644
--- a/tests/queries/0_stateless/02494_query_cache_explain.reference
+++ b/tests/queries/0_stateless/02494_query_cache_explain.reference
@@ -2,20 +2,20 @@
 1
 Expression ((Project names + (Projection + Change column names to column identifiers)))
   Limit (preliminary LIMIT (without OFFSET))
-    ReadFromStorage (SystemNumbers)
+    ReadFromSystemNumbers
 Expression ((Project names + (Projection + Change column names to column identifiers)))
   Limit (preliminary LIMIT (without OFFSET))
-    ReadFromStorage (SystemNumbers)
+    ReadFromSystemNumbers
 (Expression)
 ExpressionTransform
   (Limit)
   Limit
-    (ReadFromStorage)
-    Numbers 0 → 1
+    (ReadFromSystemNumbers)
+    NumbersRange 0 → 1
 (Expression)
 ExpressionTransform
   (Limit)
   Limit
-    (ReadFromStorage)
-    Numbers 0 → 1
+    (ReadFromSystemNumbers)
+    NumbersRange 0 → 1
 1
diff --git a/tests/queries/0_stateless/02496_remove_redundant_sorting.reference b/tests/queries/0_stateless/02496_remove_redundant_sorting.reference
index ca1384fd177a..b318157835d3 100644
--- a/tests/queries/0_stateless/02496_remove_redundant_sorting.reference
+++ b/tests/queries/0_stateless/02496_remove_redundant_sorting.reference
@@ -7,7 +7,7 @@ Expression (Projection)
         Expression ((Before ORDER BY + Projection))
           Sorting (Sorting for ORDER BY)
             Expression (Before ORDER BY)
-              ReadFromStorage (SystemNumbers)
+              ReadFromSystemNumbers
 -- Enabled query_plan_remove_redundant_sorting
 -- ORDER BY removes ORDER BY clauses in subqueries
 -- query
@@ -28,7 +28,7 @@ ORDER BY number ASC
 Expression (Projection)
   Sorting (Sorting for ORDER BY)
     Expression ((Before ORDER BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
-      ReadFromStorage (SystemNumbers)
+      ReadFromSystemNumbers
 -- execute
 0
 1
@@ -55,7 +55,7 @@ Expression (Projection)
       Filling
         Sorting (Sorting for ORDER BY)
           Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 0
 1
@@ -84,7 +84,7 @@ Expression (Projection)
         Expression (Before LIMIT BY)
           Sorting (Sorting for ORDER BY)
             Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
-              ReadFromStorage (SystemNumbers)
+              ReadFromSystemNumbers
 -- execute
 0
 1
@@ -119,11 +119,11 @@ Expression ((Projection + Before ORDER BY))
     Expression ((Before JOIN + Projection))
       Sorting (Sorting for ORDER BY)
         Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
     Expression ((Joined actions + (Rename joined columns + Projection)))
       Sorting (Sorting for ORDER BY)
         Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0	2
 0	1
@@ -165,9 +165,9 @@ Expression (Projection)
     Expression (Before ORDER BY)
       Join (JOIN FillRightFirst)
         Expression ((Before JOIN + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
         Expression ((Joined actions + (Rename joined columns + (Projection + (Before ORDER BY + (Projection + Before ORDER BY))))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0	0
 0	1
@@ -197,7 +197,7 @@ GROUP BY number
 Expression ((Projection + Before ORDER BY))
   Aggregating
     Expression ((Before GROUP BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
-      ReadFromStorage (SystemNumbers)
+      ReadFromSystemNumbers
 -- execute
 0
 2
@@ -221,7 +221,7 @@ GROUP BY number
 Expression ((Projection + Before ORDER BY))
   Aggregating
     Expression ((Before GROUP BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
-      ReadFromStorage (SystemNumbers)
+      ReadFromSystemNumbers
 -- execute
 0
 2
@@ -239,7 +239,7 @@ FROM
 Expression ((Projection + Before ORDER BY))
   Aggregating
     Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
-      ReadFromStorage (SystemNumbers)
+      ReadFromSystemNumbers
 -- execute
 45
 -- check that optimization is applied recursively to subqueries as well
@@ -264,7 +264,7 @@ Expression (Projection)
     Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
       Aggregating
         Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0
 1
@@ -290,7 +290,7 @@ Expression (Projection)
     Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
       Aggregating
         Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0
 1
@@ -320,7 +320,7 @@ Expression ((Projection + (Before ORDER BY + )))
   Aggregating
     Filter
       Filter (( + (Before GROUP BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY))))))
-        ReadFromStorage (SystemNumbers)
+        ReadFromSystemNumbers
 -- execute
 2
 1
@@ -346,7 +346,7 @@ Expression (Projection)
     Expression ((Before ORDER BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
       Aggregating
         Expression (Before GROUP BY)
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0
 1
@@ -467,7 +467,7 @@ Expression (Projection)
       Expression (Projection)
         Sorting (Sorting for ORDER BY)
           Expression (Before ORDER BY)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 0	0
 1	0
@@ -496,7 +496,7 @@ Expression (Projection)
     Expression (Projection)
       Sorting (Sorting for ORDER BY)
         Expression (Before ORDER BY)
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 9	11
 8	10
diff --git a/tests/queries/0_stateless/02496_remove_redundant_sorting_analyzer.reference b/tests/queries/0_stateless/02496_remove_redundant_sorting_analyzer.reference
index ddc89a728219..ee2099c62ba9 100644
--- a/tests/queries/0_stateless/02496_remove_redundant_sorting_analyzer.reference
+++ b/tests/queries/0_stateless/02496_remove_redundant_sorting_analyzer.reference
@@ -7,7 +7,7 @@ Expression (Project names)
         Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + Project names))))
           Sorting (Sorting for ORDER BY)
             Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
-              ReadFromStorage (SystemNumbers)
+              ReadFromSystemNumbers
 -- Enabled query_plan_remove_redundant_sorting
 -- ORDER BY removes ORDER BY clauses in subqueries
 -- query
@@ -28,7 +28,7 @@ ORDER BY number ASC
 Expression (Project names)
   Sorting (Sorting for ORDER BY)
     Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers)))))))))))
-      ReadFromStorage (SystemNumbers)
+      ReadFromSystemNumbers
 -- execute
 0
 1
@@ -55,7 +55,7 @@ Expression (Project names)
       Filling
         Sorting (Sorting for ORDER BY)
           Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers)))))))
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 0
 1
@@ -84,7 +84,7 @@ Expression (Project names)
         Expression (Before LIMIT BY)
           Sorting (Sorting for ORDER BY)
             Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers)))))))
-              ReadFromStorage (SystemNumbers)
+              ReadFromSystemNumbers
 -- execute
 0
 1
@@ -119,11 +119,11 @@ Expression ((Project names + (Projection + DROP unused columns after JOIN)))
     Expression ((Change column names to column identifiers + Project names))
       Sorting (Sorting for ORDER BY)
         Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers)))))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
     Expression ((Change column names to column identifiers + Project names))
       Sorting (Sorting for ORDER BY)
         Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers)))))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0	2
 0	1
@@ -165,9 +165,9 @@ Expression (Project names)
     Expression ((Before ORDER BY + (Projection + DROP unused columns after JOIN)))
       Join (JOIN FillRightFirst)
         Expression ((Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers)))))))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
         Expression ((Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers)))))))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0	0
 0	1
@@ -197,7 +197,7 @@ GROUP BY number
 Expression ((Project names + Projection))
   Aggregating
     Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers))))))))))
-      ReadFromStorage (SystemNumbers)
+      ReadFromSystemNumbers
 -- execute
 0
 2
@@ -223,7 +223,7 @@ Expression ((Project names + Projection))
     Expression ((Before GROUP BY + (Change column names to column identifiers + Project names)))
       Sorting (Sorting for ORDER BY)
         Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers)))))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0
 2
@@ -241,7 +241,7 @@ FROM
 Expression ((Project names + Projection))
   Aggregating
     Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers))))))
-      ReadFromStorage (SystemNumbers)
+      ReadFromSystemNumbers
 -- execute
 45
 -- check that optimization is applied recursively to subqueries as well
@@ -266,7 +266,7 @@ Expression (Project names)
     Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + Projection)))))
       Aggregating
         Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers))))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0
 1
@@ -294,7 +294,7 @@ Expression (Project names)
         Expression ((Before GROUP BY + (Change column names to column identifiers + Project names)))
           Sorting (Sorting for ORDER BY)
             Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
-              ReadFromStorage (SystemNumbers)
+              ReadFromSystemNumbers
 -- execute
 0
 1
@@ -326,7 +326,7 @@ Expression ((Project names + Projection))
       Expression ((Before GROUP BY + (Change column names to column identifiers + Project names)))
         Sorting (Sorting for ORDER BY)
           Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + Change column names to column identifiers)))))))
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 2
 1
@@ -352,7 +352,7 @@ Expression (Project names)
     Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + (Projection + (Change column names to column identifiers + (Project names + (Before ORDER BY + Projection))))))))))
       Aggregating
         Expression ((Before GROUP BY + Change column names to column identifiers))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0
 1
@@ -477,7 +477,7 @@ Expression (Project names)
               Expression (Before ORDER BY)
                 Expression (Projection)
                   Expression (Change column names to column identifiers)
-                    ReadFromStorage (SystemNumbers)
+                    ReadFromSystemNumbers
 -- execute
 0	0
 1	0
@@ -509,7 +509,7 @@ Expression (Project names)
           Expression (Before ORDER BY)
             Expression (Projection)
               Expression (Change column names to column identifiers)
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
 -- execute
 9	11
 8	10
diff --git a/tests/queries/0_stateless/02500_remove_redundant_distinct.reference b/tests/queries/0_stateless/02500_remove_redundant_distinct.reference
index 763a7cc42866..3f580763dba8 100644
--- a/tests/queries/0_stateless/02500_remove_redundant_distinct.reference
+++ b/tests/queries/0_stateless/02500_remove_redundant_distinct.reference
@@ -9,7 +9,7 @@ Expression (Projection)
               Distinct
                 Distinct (Preliminary DISTINCT)
                   Expression (Before ORDER BY)
-                    ReadFromStorage (SystemNumbers)
+                    ReadFromSystemNumbers
 -- Enabled query_plan_remove_redundant_distinct
 -- DISTINCT is only in most inner subquery
 -- query
@@ -28,7 +28,7 @@ Expression ((Projection + (Before ORDER BY + (Projection + (Before ORDER BY + Pr
   Distinct
     Distinct (Preliminary DISTINCT)
       Expression (Before ORDER BY)
-        ReadFromStorage (SystemNumbers)
+        ReadFromSystemNumbers
 -- execute
 0
 1
@@ -52,12 +52,12 @@ Expression (Projection)
             Distinct
               Distinct (Preliminary DISTINCT)
                 Expression (Before ORDER BY)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
           Expression (( + Projection))
             Distinct
               Distinct (Preliminary DISTINCT)
                 Expression (Before ORDER BY)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
 -- execute
 0
 1
@@ -83,12 +83,12 @@ Expression (Projection)
             Distinct
               Distinct (Preliminary DISTINCT)
                 Expression (Before ORDER BY)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
           Expression ((Joined actions + (Rename joined columns + Projection)))
             Distinct
               Distinct (Preliminary DISTINCT)
                 Expression (Before ORDER BY)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
 -- execute
 0	0
 0	1
@@ -111,7 +111,7 @@ Expression ((Projection + (Before ORDER BY + (Projection + (Before ORDER BY + Pr
   Distinct
     Distinct (Preliminary DISTINCT)
       Expression (Before ORDER BY)
-        ReadFromStorage (SystemNumbers)
+        ReadFromSystemNumbers
 -- execute
 0	0
 1	2
@@ -133,7 +133,7 @@ Expression ((Projection + (Before ORDER BY + (Projection + (Before ORDER BY + Pr
   Distinct
     Distinct (Preliminary DISTINCT)
       Expression (Before ORDER BY)
-        ReadFromStorage (SystemNumbers)
+        ReadFromSystemNumbers
 -- execute
 2	0	0
 2	1	2
@@ -229,9 +229,9 @@ Expression ((Projection + (Before ORDER BY + (Projection + Before ORDER BY))))
     Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
       Join (JOIN FillRightFirst)
         Expression (Before JOIN)
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
         Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0
 2
@@ -262,9 +262,9 @@ Expression (Projection)
           Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
             Join (JOIN FillRightFirst)
               Expression (Before JOIN)
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
               Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
 -- execute
 12
 -- GROUP BY WITH ROLLUP before DISTINCT with on different columns => do _not_ remove DISTINCT
@@ -294,9 +294,9 @@ Expression (Projection)
             Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
               Join (JOIN FillRightFirst)
                 Expression (Before JOIN)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
                 Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
 -- execute
 12
 36
@@ -324,9 +324,9 @@ Expression ((Projection + (Before ORDER BY + (Projection + Before ORDER BY))))
       Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
         Join (JOIN FillRightFirst)
           Expression (Before JOIN)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
           Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 0
 2
@@ -359,9 +359,9 @@ Expression (Projection)
             Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
               Join (JOIN FillRightFirst)
                 Expression (Before JOIN)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
                 Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
 -- execute
 12
 36
@@ -389,9 +389,9 @@ Expression ((Projection + (Before ORDER BY + (Projection + Before ORDER BY))))
       Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
         Join (JOIN FillRightFirst)
           Expression (Before JOIN)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
           Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 0
 2
@@ -424,9 +424,9 @@ Expression (Projection)
             Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
               Join (JOIN FillRightFirst)
                 Expression (Before JOIN)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
                 Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
 -- execute
 12
 
@@ -455,9 +455,9 @@ Expression ((Projection + (Before ORDER BY + (Projection + Before ORDER BY))))
       Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
         Join (JOIN FillRightFirst)
           Expression (Before JOIN)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
           Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 0
 2
@@ -474,7 +474,7 @@ Expression (Projection)
       Expression (Before ORDER BY)
         Aggregating
           Expression (Before GROUP BY)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 1
 -- UNION ALL with DISTINCT => do _not_ remove DISTINCT
@@ -497,12 +497,12 @@ Expression (Projection)
           Distinct
             Distinct (Preliminary DISTINCT)
               Expression (Before ORDER BY)
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
         Expression (( + Projection))
           Distinct
             Distinct (Preliminary DISTINCT)
               Expression (Before ORDER BY)
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
 -- execute
 0
 1
diff --git a/tests/queries/0_stateless/02500_remove_redundant_distinct_analyzer.reference b/tests/queries/0_stateless/02500_remove_redundant_distinct_analyzer.reference
index 50ca5981cf12..a5f2c3e5ca3d 100644
--- a/tests/queries/0_stateless/02500_remove_redundant_distinct_analyzer.reference
+++ b/tests/queries/0_stateless/02500_remove_redundant_distinct_analyzer.reference
@@ -9,7 +9,7 @@ Expression (Project names)
               Distinct (DISTINCT)
                 Distinct (Preliminary DISTINCT)
                   Expression ((Projection + Change column names to column identifiers))
-                    ReadFromStorage (SystemNumbers)
+                    ReadFromSystemNumbers
 -- Enabled query_plan_remove_redundant_distinct
 -- DISTINCT is only in most inner subquery
 -- query
@@ -28,7 +28,7 @@ Expression ((Project names + (Projection + (Change column names to column identi
   Distinct (DISTINCT)
     Distinct (Preliminary DISTINCT)
       Expression ((Projection + Change column names to column identifiers))
-        ReadFromStorage (SystemNumbers)
+        ReadFromSystemNumbers
 -- execute
 0
 1
@@ -53,12 +53,12 @@ Expression (Project names)
               Distinct (DISTINCT)
                 Distinct (Preliminary DISTINCT)
                   Expression ((Projection + Change column names to column identifiers))
-                    ReadFromStorage (SystemNumbers)
+                    ReadFromSystemNumbers
             Expression (( + ( + Project names)))
               Distinct (DISTINCT)
                 Distinct (Preliminary DISTINCT)
                   Expression ((Projection + Change column names to column identifiers))
-                    ReadFromStorage (SystemNumbers)
+                    ReadFromSystemNumbers
 -- execute
 0
 1
@@ -84,12 +84,12 @@ Expression (Project names)
             Distinct (DISTINCT)
               Distinct (Preliminary DISTINCT)
                 Expression ((Projection + Change column names to column identifiers))
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
           Expression ((Change column names to column identifiers + Project names))
             Distinct (DISTINCT)
               Distinct (Preliminary DISTINCT)
                 Expression ((Projection + Change column names to column identifiers))
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
 -- execute
 0	0
 0	1
@@ -112,7 +112,7 @@ Expression ((Project names + (Projection + (Change column names to column identi
   Distinct (DISTINCT)
     Distinct (Preliminary DISTINCT)
       Expression ((Projection + Change column names to column identifiers))
-        ReadFromStorage (SystemNumbers)
+        ReadFromSystemNumbers
 -- execute
 0	0
 1	2
@@ -134,7 +134,7 @@ Expression ((Project names + (Projection + (Change column names to column identi
   Distinct (DISTINCT)
     Distinct (Preliminary DISTINCT)
       Expression ((Projection + Change column names to column identifiers))
-        ReadFromStorage (SystemNumbers)
+        ReadFromSystemNumbers
 -- execute
 2	0	0
 2	1	2
@@ -231,9 +231,9 @@ Expression ((Project names + (Projection + (Change column names to column identi
     Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Projection + DROP unused columns after JOIN)))))
       Join (JOIN FillRightFirst)
         Expression (Change column names to column identifiers)
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
         Expression (Change column names to column identifiers)
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
 -- execute
 0
 2
@@ -264,9 +264,9 @@ Expression (Project names)
           Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Projection + DROP unused columns after JOIN)))))
             Join (JOIN FillRightFirst)
               Expression (Change column names to column identifiers)
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
               Expression (Change column names to column identifiers)
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
 -- execute
 12
 -- GROUP BY WITH ROLLUP before DISTINCT with on different columns => do _not_ remove DISTINCT
@@ -296,9 +296,9 @@ Expression (Project names)
             Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Projection + DROP unused columns after JOIN)))))
               Join (JOIN FillRightFirst)
                 Expression (Change column names to column identifiers)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
                 Expression (Change column names to column identifiers)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
 -- execute
 12
 36
@@ -326,9 +326,9 @@ Expression ((Project names + (Projection + (Change column names to column identi
       Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Projection + DROP unused columns after JOIN)))))
         Join (JOIN FillRightFirst)
           Expression (Change column names to column identifiers)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
           Expression (Change column names to column identifiers)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 0
 2
@@ -361,9 +361,9 @@ Expression (Project names)
             Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Projection + DROP unused columns after JOIN)))))
               Join (JOIN FillRightFirst)
                 Expression (Change column names to column identifiers)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
                 Expression (Change column names to column identifiers)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
 -- execute
 12
 36
@@ -391,9 +391,9 @@ Expression ((Project names + (Projection + (Change column names to column identi
       Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Projection + DROP unused columns after JOIN)))))
         Join (JOIN FillRightFirst)
           Expression (Change column names to column identifiers)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
           Expression (Change column names to column identifiers)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 0
 2
@@ -426,9 +426,9 @@ Expression (Project names)
             Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Projection + DROP unused columns after JOIN)))))
               Join (JOIN FillRightFirst)
                 Expression (Change column names to column identifiers)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
                 Expression (Change column names to column identifiers)
-                  ReadFromStorage (SystemNumbers)
+                  ReadFromSystemNumbers
 -- execute
 12
 
@@ -457,9 +457,9 @@ Expression ((Project names + (Projection + (Change column names to column identi
       Expression ((Before GROUP BY + (Change column names to column identifiers + (Project names + (Projection + DROP unused columns after JOIN)))))
         Join (JOIN FillRightFirst)
           Expression (Change column names to column identifiers)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
           Expression (Change column names to column identifiers)
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 0
 2
@@ -476,7 +476,7 @@ Expression (Project names)
       Expression (Projection)
         Aggregating
           Expression ((Before GROUP BY + Change column names to column identifiers))
-            ReadFromStorage (SystemNumbers)
+            ReadFromSystemNumbers
 -- execute
 1
 -- UNION ALL with DISTINCT => do _not_ remove DISTINCT
@@ -499,12 +499,12 @@ Expression (Project names)
           Distinct (DISTINCT)
             Distinct (Preliminary DISTINCT)
               Expression ((Projection + Change column names to column identifiers))
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
         Expression (( + ( + Project names)))
           Distinct (DISTINCT)
             Distinct (Preliminary DISTINCT)
               Expression ((Projection + Change column names to column identifiers))
-                ReadFromStorage (SystemNumbers)
+                ReadFromSystemNumbers
 -- execute
 0
 1
diff --git a/tests/queries/0_stateless/02514_analyzer_drop_join_on.reference b/tests/queries/0_stateless/02514_analyzer_drop_join_on.reference
index 1b177b84afa8..51e009dcd912 100644
--- a/tests/queries/0_stateless/02514_analyzer_drop_join_on.reference
+++ b/tests/queries/0_stateless/02514_analyzer_drop_join_on.reference
@@ -147,5 +147,5 @@ Header: bx String
                       c2 String
         Expression ((JOIN actions + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))))
         Header: d1_4 UInt64
-          ReadFromStorage (SystemNumbers)
+          ReadFromSystemNumbers
           Header: number UInt64
diff --git a/tests/queries/0_stateless/02576_predicate_push_down_sorting_fix.reference b/tests/queries/0_stateless/02576_predicate_push_down_sorting_fix.reference
index 3d169126eef5..b8c68f90135d 100644
--- a/tests/queries/0_stateless/02576_predicate_push_down_sorting_fix.reference
+++ b/tests/queries/0_stateless/02576_predicate_push_down_sorting_fix.reference
@@ -18,5 +18,5 @@ Positions: 1
              ALIAS number :: 0 -> number_1 UInt64 : 2
              FUNCTION ignore(2_UInt8 :: 1) -> ignore(2_UInt8) UInt8 : 0
     Positions: 0 2
-      ReadFromStorage (SystemNumbers)
+      ReadFromSystemNumbers
       Header: number UInt64
diff --git a/tests/queries/0_stateless/02767_into_outfile_extensions_msan.reference b/tests/queries/0_stateless/02767_into_outfile_extensions_msan.reference
index 0c8b489c2fd0..50955368998c 100644
--- a/tests/queries/0_stateless/02767_into_outfile_extensions_msan.reference
+++ b/tests/queries/0_stateless/02767_into_outfile_extensions_msan.reference
@@ -1,2 +1,2 @@
 Expression ((Projection + Before ORDER BY))
-  ReadFromStorage (SystemNumbers)
+  ReadFromSystemNumbers
