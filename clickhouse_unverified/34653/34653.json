{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34653,
  "instance_id": "ClickHouse__ClickHouse-34653",
  "issue_numbers": [
    "34604"
  ],
  "base_commit": "3f295f9429a23065e67c6175c324e60eb207ef08",
  "patch": "diff --git a/docs/en/sql-reference/functions/index.md b/docs/en/sql-reference/functions/index.md\nindex ddc113d31f95..7cceec889bd9 100644\n--- a/docs/en/sql-reference/functions/index.md\n+++ b/docs/en/sql-reference/functions/index.md\n@@ -74,9 +74,10 @@ A function configuration contains the following settings:\n \n -   `name` - a function name.\n -   `command` - script name to execute or command if `execute_direct` is false.\n--   `argument` - argument description with the `type` of an argument. Each argument is described in a separate setting.\n+-   `argument` - argument description with the `type`, and optional `name` of an argument. Each argument is described in a separate setting. Specifying name is necessary if argument names are part of serialization for user defined function format like [Native](../../interfaces/formats.md#native) or [JSONEachRow](../../interfaces/formats.md#jsoneachrow). Default argument name value is `c` + argument_number.\n -   `format` - a [format](../../interfaces/formats.md) in which arguments are passed to the command.\n -   `return_type` - the type of a returned value.\n+-   `return_name` - name of retuned value. Specifying return name is necessary if return name is part of serialization for user defined function format like [Native](../../interfaces/formats.md#native) or [JSONEachRow](../../interfaces/formats.md#jsoneachrow). Optional. Default value is `result`.\n -   `type` - an executable type. If `type` is set to `executable` then single command is started. If it is set to `executable_pool` then a pool of commands is created.\n -   `max_command_execution_time` - maximum execution time in seconds for processing block of data. This setting is valid for `executable_pool` commands only. Optional. Default value is `10`.\n -   `command_termination_timeout` - time in seconds during which a command should finish after its pipe is closed. After that time `SIGTERM` is sent to the process executing the command. Optional. Default value is `10`.\n@@ -100,6 +101,7 @@ File test_function.xml.\n         <return_type>String</return_type>\n         <argument>\n             <type>UInt64</type>\n+            <name>value</name>\n         </argument>\n         <format>TabSeparated</format>\n         <command>test_function.py</command>\n@@ -144,9 +146,11 @@ File test_function.xml.\n         <return_type>UInt64</return_type>\n         <argument>\n             <type>UInt64</type>\n+            <name>lhs</name>\n         </argument>\n         <argument>\n             <type>UInt64</type>\n+            <name>rhs</name>\n         </argument>\n         <format>TabSeparated</format>\n         <command>cd /; clickhouse-local --input-format TabSeparated --output-format TabSeparated --structure 'x UInt64, y UInt64' --query \"SELECT x + y FROM table\"</command>\n@@ -169,6 +173,58 @@ Result:\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n+Creating `test_function_sum_json` with named arguments and format [JSONEachRow](../../interfaces/formats.md#jsoneachrow) using XML configuration.\n+File test_function.xml.\n+```xml\n+<function>\n+    <type>executable</type>\n+    <name>test_function_sum_json</name>\n+    <return_type>UInt64</return_type>\n+    <return_name>result_name</return_name>\n+    <argument>\n+        <type>UInt64</type>\n+        <name>argument_1</name>\n+    </argument>\n+    <argument>\n+        <type>UInt64</type>\n+        <name>argument_2</name>\n+    </argument>\n+    <format>JSONEachRow</format>\n+    <command>test_function_sum_json.py</command>\n+</function>\n+```\n+\n+Script file inside `user_scripts` folder `test_function_sum_json.py`.\n+\n+```python\n+#!/usr/bin/python3\n+\n+import sys\n+import json\n+\n+if __name__ == '__main__':\n+    for line in sys.stdin:\n+        value = json.loads(line)\n+        first_arg = int(value['argument_1'])\n+        second_arg = int(value['argument_2'])\n+        result = {'result_name': first_arg + second_arg}\n+        print(json.dumps(result), end='\\n')\n+        sys.stdout.flush()\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT test_function_sum_json(2, 2);\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500test_function_sum_json(2, 2)\u2500\u2510\n+\u2502                            4 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n \n ## Error Handling {#error-handling}\n \ndiff --git a/docs/ru/sql-reference/functions/index.md b/docs/ru/sql-reference/functions/index.md\nindex a63c76d8833a..30b9f18ec586 100644\n--- a/docs/ru/sql-reference/functions/index.md\n+++ b/docs/ru/sql-reference/functions/index.md\n@@ -72,37 +72,89 @@ ClickHouse \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u044e\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0438\u043b\u0438\n \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438:\n \n -   `name` - \u0438\u043c\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n--   `command` - \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0438\u043b\u0438 \u0441\u043a\u0440\u0438\u043f\u0442.\n--   `argument` - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u0435\u0433\u043e \u0442\u0438\u043f \u0432\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0435 `type`. \u041a\u0430\u0436\u0434\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e.\n+-   `command` - \u0438\u043c\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0435\u0441\u043b\u0438 `execute_direct` \u0440\u0430\u0432\u043d\u043e false.\n+-   `argument` - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u0435\u0433\u043e \u0442\u0438\u043f \u0432\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0435 `type`, \u0438 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0435\u0433\u043e \u0438\u043c\u044f \u0432\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0435 `name`. \u041a\u0430\u0436\u0434\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0423\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0434\u043b\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u043d\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 [Native](../../interfaces/formats.md#native) \u0438\u043b\u0438 [JSONEachRow](../../interfaces/formats.md#jsoneachrow). \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `c` + \u043d\u043e\u043c\u0435\u0440 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430.\n -   `format` - [\u0444\u043e\u0440\u043c\u0430\u0442](../../interfaces/formats.md) \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n -   `return_type` - \u0442\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n+-   `return_name` - \u0438\u043c\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0423\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0435\u0441\u043b\u0438 \u0438\u043c\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 [Native](../../interfaces/formats.md#native) \u0438\u043b\u0438 [JSONEachRow](../../interfaces/formats.md#jsoneachrow). \u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 `result`.\n -   `type` - \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d \u0432\u0430\u0440\u0438\u0430\u043d\u0442 `executable`, \u0442\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430. \u041f\u0440\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0438 `executable_pool` \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u043b \u043a\u043e\u043c\u0430\u043d\u0434.\n -   `max_command_execution_time` - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0431\u043b\u043e\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u042d\u0442\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430 `executable_pool`. \u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `10`.\n -   `command_termination_timeout` - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f, \u0442\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u043b `SIGTERM`. \u042d\u0442\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430 `executable_pool`. \u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `10`.\n+-   `command_read_timeout` - \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u044b stdout \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 10000. \u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430.\n+-   `command_write_timeout` - \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 stdin \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 10000. \u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430.\n -   `pool_size` - \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u0443\u043b\u0430 \u043a\u043e\u043c\u0430\u043d\u0434. \u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `16`.\n--   `lifetime` - \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d `0`, \u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f.\n -   `send_chunk_header` - \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u043e\u043a \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0431\u043b\u043e\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `false`.\n+-   `execute_direct` - \u0415\u0441\u043b\u0438 `execute_direct` = `1`, \u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d \u043f\u043e\u0438\u0441\u043a `command` \u0432 \u043f\u0430\u043f\u043a\u0435 user_scripts. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432. \u041f\u0440\u0438\u043c\u0435\u0440: `script_name arg1 arg2`. \u0415\u0441\u043b\u0438 `execute_direct` = `0`, `command` \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f `bin/sh -c`. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `1`. \u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440.\n+-   `lifetime` - \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d `0`, \u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f.\n \n \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0447\u0438\u0442\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0438\u0437 `STDIN` \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 `STDOUT`. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435. \u0422\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0433\u0440\u0443\u043f\u043f\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0433\u0440\u0443\u043f\u043f\u0443.\n \n **\u041f\u0440\u0438\u043c\u0435\u0440**\n \n-XML \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e `test_function`:\n+\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 `test_function` \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 XML.\n+\u0424\u0430\u0439\u043b test_function.xml.\n+```xml\n+<functions>\n+    <function>\n+        <type>executable</type>\n+        <name>test_function_python</name>\n+        <return_type>String</return_type>\n+        <argument>\n+            <type>UInt64</type>\n+            <name>value</name>\n+        </argument>\n+        <format>TabSeparated</format>\n+        <command>test_function.py</command>\n+    </function>\n+</functions>\n+```\n+\n+\u0424\u0430\u0439\u043b \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0430\u043f\u043a\u0438 `user_scripts` `test_function.py`.\n+\n+```python\n+#!/usr/bin/python3\n+\n+import sys\n+\n+if __name__ == '__main__':\n+    for line in sys.stdin:\n+        print(\"Value \" + line, end='')\n+        sys.stdout.flush()\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT test_function_python(toUInt64(2));\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500test_function_python(2)\u2500\u2510\n+\u2502 Value 2                 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n+\n+\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 `test_function_sum`, \u0443\u043a\u0430\u0437\u0430\u0432 \u0434\u043b\u044f `execute_direct` \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 `0`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e XML.\n+File test_function.xml.\n+```xml\n <functions>\n     <function>\n         <type>executable</type>\n-        <name>test_function</name>\n+        <name>test_function_sum</name>\n         <return_type>UInt64</return_type>\n         <argument>\n             <type>UInt64</type>\n+            <name>lhs</name>\n         </argument>\n         <argument>\n             <type>UInt64</type>\n+            <name>rhs</name>\n         </argument>\n         <format>TabSeparated</format>\n         <command>cd /; clickhouse-local --input-format TabSeparated --output-format TabSeparated --structure 'x UInt64, y UInt64' --query \"SELECT x + y FROM table\"</command>\n-        <lifetime>0</lifetime>\n+        <execute_direct>0</execute_direct>\n     </function>\n </functions>\n ```\n@@ -110,15 +162,68 @@ XML \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e `test_functi\n \u0417\u0430\u043f\u0440\u043e\u0441:\n \n ``` sql\n-SELECT test_function(toUInt64(2), toUInt64(2));\n+SELECT test_function_sum(2, 2);\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500test_function_sum(2, 2)\u2500\u2510\n+\u2502                       4 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 `test_function_sum_json` \u0441 \u0438\u043c\u0435\u043d\u043d\u043e\u0432\u0430\u043d\u044b\u043c\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c [JSONEachRow](../../interfaces/formats.md#jsoneachrow) \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 XML.\n+\u0424\u0430\u0439\u043b test_function.xml.\n+```xml\n+<function>\n+    <type>executable</type>\n+    <name>test_function_sum_json</name>\n+    <return_type>UInt64</return_type>\n+    <return_name>result_name</return_name>\n+    <argument>\n+        <type>UInt64</type>\n+        <name>argument_1</name>\n+    </argument>\n+    <argument>\n+        <type>UInt64</type>\n+        <name>argument_2</name>\n+    </argument>\n+    <format>JSONEachRow</format>\n+    <command>test_function_sum_json.py</command>\n+</function>\n+```\n+\n+\u0424\u0430\u0439\u043b \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0430\u043f\u043a\u0438 `user_scripts` `test_function_sum_json.py`.\n+\n+```python\n+#!/usr/bin/python3\n+\n+import sys\n+import json\n+\n+if __name__ == '__main__':\n+    for line in sys.stdin:\n+        value = json.loads(line)\n+        first_arg = int(value['argument_1'])\n+        second_arg = int(value['argument_2'])\n+        result = {'result_name': first_arg + second_arg}\n+        print(json.dumps(result), end='\\n')\n+        sys.stdout.flush()\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT test_function_sum_json(2, 2);\n ```\n \n \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \n ``` text\n-\u250c\u2500test_function(toUInt64(2), toUInt64(2))\u2500\u2510\n-\u2502                                       4 \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500test_function_sum_json(2, 2)\u2500\u2510\n+\u2502                            4 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n ## \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a {#obrabotka-oshibok}\ndiff --git a/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp b/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp\nindex b266746642fa..31b4d4a621cf 100644\n--- a/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp\n+++ b/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp\n@@ -83,6 +83,10 @@ ExternalLoader::LoadablePtr ExternalUserDefinedExecutableFunctionsLoader::create\n \n     String format = config.getString(key_in_config + \".format\");\n     DataTypePtr result_type = DataTypeFactory::instance().get(config.getString(key_in_config + \".return_type\"));\n+    String result_name = \"result\";\n+    if (config.has(key_in_config + \".return_name\"))\n+        result_name = config.getString(key_in_config + \".return_name\");\n+\n     bool send_chunk_header = config.getBool(key_in_config + \".send_chunk_header\", false);\n     size_t command_termination_timeout_seconds = config.getUInt64(key_in_config + \".command_termination_timeout\", 10);\n     size_t command_read_timeout_milliseconds = config.getUInt64(key_in_config + \".command_read_timeout\", 10000);\n@@ -106,33 +110,46 @@ ExternalLoader::LoadablePtr ExternalUserDefinedExecutableFunctionsLoader::create\n     if (config.has(key_in_config + \".lifetime\"))\n         lifetime = ExternalLoadableLifetime(config, key_in_config + \".lifetime\");\n \n-    std::vector<DataTypePtr> argument_types;\n+    std::vector<UserDefinedExecutableFunctionArgument> arguments;\n \n     Poco::Util::AbstractConfiguration::Keys config_elems;\n     config.keys(key_in_config, config_elems);\n \n+    size_t argument_number = 1;\n+\n     for (const auto & config_elem : config_elems)\n     {\n         if (!startsWith(config_elem, \"argument\"))\n             continue;\n \n+        UserDefinedExecutableFunctionArgument argument;\n+\n         const auto argument_prefix = key_in_config + '.' + config_elem + '.';\n-        auto argument_type = DataTypeFactory::instance().get(config.getString(argument_prefix + \"type\"));\n-        argument_types.emplace_back(std::move(argument_type));\n+\n+        argument.type = DataTypeFactory::instance().get(config.getString(argument_prefix + \"type\"));\n+\n+        if (config.has(argument_prefix + \"name\"))\n+            argument.name = config.getString(argument_prefix + \"name\");\n+        else\n+            argument.name = \"c\" + std::to_string(argument_number);\n+\n+        ++argument_number;\n+        arguments.emplace_back(std::move(argument));\n     }\n \n     UserDefinedExecutableFunctionConfiguration function_configuration\n     {\n-        .name = std::move(name), //-V1030\n-        .command = std::move(command_value), //-V1030\n-        .command_arguments = std::move(command_arguments), //-V1030\n-        .argument_types = std::move(argument_types), //-V1030\n-        .result_type = std::move(result_type), //-V1030\n+        .name = std::move(name),\n+        .command = std::move(command_value),\n+        .command_arguments = std::move(command_arguments),\n+        .arguments = std::move(arguments),\n+        .result_type = std::move(result_type),\n+        .result_name = std::move(result_name),\n     };\n \n     ShellCommandSourceCoordinator::Configuration shell_command_coordinator_configration\n     {\n-        .format = std::move(format), //-V1030\n+        .format = std::move(format),\n         .command_termination_timeout_seconds = command_termination_timeout_seconds,\n         .command_read_timeout_milliseconds = command_read_timeout_milliseconds,\n         .command_write_timeout_milliseconds = command_write_timeout_milliseconds,\ndiff --git a/src/Interpreters/UserDefinedExecutableFunction.h b/src/Interpreters/UserDefinedExecutableFunction.h\nindex 80d6b85ad907..434c77e9236b 100644\n--- a/src/Interpreters/UserDefinedExecutableFunction.h\n+++ b/src/Interpreters/UserDefinedExecutableFunction.h\n@@ -10,13 +10,20 @@\n namespace DB\n {\n \n+struct UserDefinedExecutableFunctionArgument\n+{\n+    DataTypePtr type;\n+    String name;\n+};\n+\n struct UserDefinedExecutableFunctionConfiguration\n {\n     std::string name;\n     std::string command;\n     std::vector<std::string> command_arguments;\n-    std::vector<DataTypePtr> argument_types;\n+    std::vector<UserDefinedExecutableFunctionArgument> arguments;\n     DataTypePtr result_type;\n+    String result_name;\n };\n \n class UserDefinedExecutableFunction final : public IExternalLoadable\ndiff --git a/src/Interpreters/UserDefinedExecutableFunctionFactory.cpp b/src/Interpreters/UserDefinedExecutableFunctionFactory.cpp\nindex 10cb806028e4..8d40dc6dfc81 100644\n--- a/src/Interpreters/UserDefinedExecutableFunctionFactory.cpp\n+++ b/src/Interpreters/UserDefinedExecutableFunctionFactory.cpp\n@@ -42,7 +42,7 @@ class UserDefinedFunction final : public IFunction\n \n     bool isVariadic() const override { return false; }\n     bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return true; }\n-    size_t getNumberOfArguments() const override { return executable_function->getConfiguration().argument_types.size(); }\n+    size_t getNumberOfArguments() const override { return executable_function->getConfiguration().arguments.size(); }\n \n     bool useDefaultImplementationForConstants() const override { return true; }\n     bool useDefaultImplementationForNulls() const override { return true; }\n@@ -90,7 +90,11 @@ class UserDefinedFunction final : public IFunction\n             auto & column_with_type = arguments_copy[i];\n             column_with_type.column = column_with_type.column->convertToFullColumnIfConst();\n \n-            const auto & argument_type = configuration.argument_types[i];\n+            const auto & argument = configuration.arguments[i];\n+            column_with_type.name = argument.name;\n+\n+            const auto & argument_type = argument.type;\n+\n             if (areTypesEqual(arguments_copy[i].type, argument_type))\n                 continue;\n \n@@ -101,7 +105,7 @@ class UserDefinedFunction final : public IFunction\n             column_with_type = std::move(column_to_cast);\n         }\n \n-        ColumnWithTypeAndName result(result_type, \"result\");\n+        ColumnWithTypeAndName result(result_type, configuration.result_name);\n         Block result_block({result});\n \n         Block arguments_block(arguments_copy);\n",
  "test_patch": "diff --git a/tests/integration/test_executable_user_defined_function/functions/test_function_config.xml b/tests/integration/test_executable_user_defined_function/functions/test_function_config.xml\nindex d8f81a588a29..b2b7db83fbcb 100644\n--- a/tests/integration/test_executable_user_defined_function/functions/test_function_config.xml\n+++ b/tests/integration/test_executable_user_defined_function/functions/test_function_config.xml\n@@ -193,4 +193,100 @@\n         <execute_direct>0</execute_direct>\n     </function>\n \n+    <function>\n+        <type>executable</type>\n+        <name>test_function_sum_json_unnamed_args_python</name>\n+        <return_type>UInt64</return_type>\n+        <return_name>result_name</return_name>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <format>JSONEachRow</format>\n+        <command>input_sum_json_unnamed_args.py</command>\n+    </function>\n+\n+    <function>\n+        <type>executable_pool</type>\n+        <name>test_function_sum_json_unnamed_args_pool_python</name>\n+        <return_type>UInt64</return_type>\n+        <return_name>result_name</return_name>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <format>JSONEachRow</format>\n+        <command>input_sum_json_unnamed_args.py</command>\n+    </function>\n+\n+    <function>\n+        <type>executable</type>\n+        <name>test_function_sum_json_partially_named_args_python</name>\n+        <return_type>UInt64</return_type>\n+        <return_name>result_name</return_name>\n+        <argument>\n+            <type>UInt64</type>\n+            <name>argument_1</name>\n+        </argument>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <format>JSONEachRow</format>\n+        <command>input_sum_json_partially_named_args.py</command>\n+    </function>\n+\n+    <function>\n+        <type>executable_pool</type>\n+        <name>test_function_sum_json_partially_named_args_pool_python</name>\n+        <return_type>UInt64</return_type>\n+        <return_name>result_name</return_name>\n+        <argument>\n+            <type>UInt64</type>\n+            <name>argument_1</name>\n+        </argument>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <format>JSONEachRow</format>\n+        <command>input_sum_json_partially_named_args.py</command>\n+    </function>\n+\n+    <function>\n+        <type>executable</type>\n+        <name>test_function_sum_json_named_args_python</name>\n+        <return_type>UInt64</return_type>\n+        <return_name>result_name</return_name>\n+        <argument>\n+            <type>UInt64</type>\n+            <name>argument_1</name>\n+        </argument>\n+        <argument>\n+            <type>UInt64</type>\n+            <name>argument_2</name>\n+        </argument>\n+        <format>JSONEachRow</format>\n+        <command>input_sum_json_named_args.py</command>\n+    </function>\n+\n+    <function>\n+        <type>executable_pool</type>\n+        <name>test_function_sum_json_named_args_pool_python</name>\n+        <return_type>UInt64</return_type>\n+        <return_name>result_name</return_name>\n+        <argument>\n+            <type>UInt64</type>\n+            <name>argument_1</name>\n+        </argument>\n+        <argument>\n+            <type>UInt64</type>\n+            <name>argument_2</name>\n+        </argument>\n+        <format>JSONEachRow</format>\n+        <command>input_sum_json_named_args.py</command>\n+    </function>\n+\n </functions>\ndiff --git a/tests/integration/test_executable_user_defined_function/test.py b/tests/integration/test_executable_user_defined_function/test.py\nindex 94afdf8d8a9d..e6542d79e4bb 100644\n--- a/tests/integration/test_executable_user_defined_function/test.py\n+++ b/tests/integration/test_executable_user_defined_function/test.py\n@@ -104,3 +104,30 @@ def test_executable_function_non_direct_bash(started_cluster):\n \n     assert node.query(\"SELECT test_function_non_direct_pool_bash(toUInt64(1))\") == 'Key 1\\n'\n     assert node.query(\"SELECT test_function_non_direct_pool_bash(1)\") == 'Key 1\\n'\n+\n+def test_executable_function_sum_json_python(started_cluster):\n+    skip_test_msan(node)\n+\n+    node.query(\"CREATE TABLE test_table (lhs UInt64, rhs UInt64) ENGINE=TinyLog;\")\n+    node.query(\"INSERT INTO test_table VALUES (0, 0), (1, 1), (2, 2);\")\n+\n+    assert node.query(\"SELECT test_function_sum_json_unnamed_args_python(1, 2);\") == '3\\n'\n+    assert node.query(\"SELECT test_function_sum_json_unnamed_args_python(lhs, rhs) FROM test_table;\") == '0\\n2\\n4\\n'\n+\n+    assert node.query(\"SELECT test_function_sum_json_partially_named_args_python(1, 2);\") == '3\\n'\n+    assert node.query(\"SELECT test_function_sum_json_partially_named_args_python(lhs, rhs) FROM test_table;\") == '0\\n2\\n4\\n'\n+\n+    assert node.query(\"SELECT test_function_sum_json_named_args_python(1, 2);\") == '3\\n'\n+    assert node.query(\"SELECT test_function_sum_json_named_args_python(lhs, rhs) FROM test_table;\") == '0\\n2\\n4\\n'\n+\n+    assert node.query(\"SELECT test_function_sum_json_unnamed_args_pool_python(1, 2);\") == '3\\n'\n+    assert node.query(\"SELECT test_function_sum_json_unnamed_args_pool_python(lhs, rhs) FROM test_table;\") == '0\\n2\\n4\\n'\n+\n+    assert node.query(\"SELECT test_function_sum_json_partially_named_args_python(1, 2);\") == '3\\n'\n+    assert node.query(\"SELECT test_function_sum_json_partially_named_args_python(lhs, rhs) FROM test_table;\") == '0\\n2\\n4\\n'\n+\n+    assert node.query(\"SELECT test_function_sum_json_named_args_pool_python(1, 2);\") == '3\\n'\n+    assert node.query(\"SELECT test_function_sum_json_named_args_pool_python(lhs, rhs) FROM test_table;\") == '0\\n2\\n4\\n'\n+\n+    node.query(\"DROP TABLE test_table;\")\n+\ndiff --git a/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_named_args.py b/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_named_args.py\nnew file mode 100755\nindex 000000000000..6154abf665aa\n--- /dev/null\n+++ b/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_named_args.py\n@@ -0,0 +1,13 @@\n+#!/usr/bin/python3\n+\n+import sys\n+import json\n+\n+if __name__ == '__main__':\n+    for line in sys.stdin:\n+        value = json.loads(line)\n+        first_arg = int(value['argument_1'])\n+        second_arg = int(value['argument_2'])\n+        result = {'result_name': first_arg + second_arg}\n+        print(json.dumps(result), end='\\n')\n+        sys.stdout.flush()\ndiff --git a/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_partially_named_args.py b/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_partially_named_args.py\nnew file mode 100755\nindex 000000000000..1408418eb4a3\n--- /dev/null\n+++ b/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_partially_named_args.py\n@@ -0,0 +1,13 @@\n+#!/usr/bin/python3\n+\n+import sys\n+import json\n+\n+if __name__ == '__main__':\n+    for line in sys.stdin:\n+        value = json.loads(line)\n+        first_arg = int(value['argument_1'])\n+        second_arg = int(value['c2'])\n+        result = {'result_name': first_arg + second_arg}\n+        print(json.dumps(result), end='\\n')\n+        sys.stdout.flush()\ndiff --git a/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_unnamed_args.py b/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_unnamed_args.py\nnew file mode 100755\nindex 000000000000..7e0c68510c81\n--- /dev/null\n+++ b/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_unnamed_args.py\n@@ -0,0 +1,13 @@\n+#!/usr/bin/python3\n+\n+import sys\n+import json\n+\n+if __name__ == '__main__':\n+    for line in sys.stdin:\n+        value = json.loads(line)\n+        first_arg = int(value['c1'])\n+        second_arg = int(value['c2'])\n+        result = {'result_name': first_arg + second_arg}\n+        print(json.dumps(result), end='\\n')\n+        sys.stdout.flush()\n",
  "problem_statement": "Executable UDF: read / write other data formats than TabSeparated \nHi, \r\nI'm trying to figure out how read / write some data formats that are not TabSeparated (e.g. [Native](https://clickhouse.com/docs/en/interfaces/formats/#native) or [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats/#jsoneachrow)) in my EUDF -  C++ script. \r\n\r\nContext:\r\nI already succeed to implement some EUDF but always with TabSeparated or CSV. However, in one of my script I'm looking for performance on a quite big array. The query is executed in ~10sec while my script takes ~2sec to execute (bench with RDTSC). Since the query is just calling my script (called in the same way that the example), I guess that the data format conversion may be too heavy. \r\nIn order to benchmark several types and find the best compromise between fastest input/output transfert and serialisation/deserialisation  speed, I made a very simple c++ code. This code writes in standard output, what is read from standard input (see below). However, as you already guessed, I'm struggling with some data formats.\r\n\r\nI have a table (`table1`) with one column of `Array(UInt64)` that I send as one block of `Array(Array(UInt64))` to my script using `groupArray`. \r\nIn the below example I'm just writing what I read from the client.\r\n\r\ninfo:\r\nClickhouse version 22.2.1\r\n\r\nThis is what I use for my tests.\r\n\r\nmy_function.xml\r\n```\r\n<clickhouse>\r\n<functions>\r\n        <type>executable</type>\r\n        <name>data_debug</name>\r\n        <return_type>Array(Array(UInt64))</return_type>\r\n        <argument>\r\n            <type>Array(Array(UInt64))</type>\r\n        </argument>\r\n        <format>Native</format>\r\n        <command>data_debug</command>\r\n</functions>\r\n</clickhouse>\r\n```\r\nMy c++ script data_debug.cpp:\r\n```\r\n#include <iostream>\r\n\r\nint main(int argc, char **argv)\r\n{\r\n  std::string line;\r\n\r\n  std::cin.tie(nullptr);\r\n  std::cin.sync_with_stdio(false);\r\n\r\n  std::cout.tie(nullptr);\r\n  std::cout.sync_with_stdio(false);\r\n\r\n  while(std::cin >> line) {\r\n    std::cout << line << \"\\n\";\r\n    std::cout.flush();\r\n  }\r\n  return 0;\r\n}\r\n```\r\nCompile with:\r\n`g++ -std=c++11 -O3  data_debug.cpp -o data_debug`\r\nExecuted in CH client as follow:\r\n`SELECT data_debug(groupArray(table1.journey)) FROM table1`\r\n\r\nLeads to this error:\r\n```\r\nReceived exception from server (version 22.2.1):\r\nCode: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column groupArray(journey) in block. There are only columns: result: While executing Native: While executing ShellCommandSource. (NOT_FOUND_COLUMN_IN_BLOCK)\r\n```\r\nWhen I use the JSONEachRows format I get: \r\n```\r\nReceived exception from server (version 22.2.1):\r\nCode: 117. DB::Exception: Received from localhost:9000. DB::Exception: Unknown field found while parsing JSONEachRow format: groupArray(journey): (at row 1)\r\n: While executing ParallelParsingBlockInputFormat: While executing ShellCommandSource: while executing 'FUNCTION data_debug(groupArray(journey) :: 0) -> data_debug(groupArray(journey)) Array(Array(UInt64)) : 1'. (INCORRECT_DATA)\r\n```\r\n\r\nCan you tell me what I'm doing wrong with these two types ? Cause if even if CH doesn't accept what he sent itself, I don't know what to do differently.\n",
  "hints_text": "I have some doubts about Native format, RowBinary looks like a better option for me.\nI have same kind of issue (with the same program and config, etc) with RowBinary\r\n```\r\nReceived exception from server (version 22.2.1):\r\nCode: 33. DB::Exception: Received from localhost:9000. DB::Exception: Cannot read all data. Bytes read: 1. Bytes expected: 8.: (at row 1)\r\n: While executing BinaryRowInputFormat: While executing ShellCommandSource: while executing 'FUNCTION data_debug(groupArray(journey) :: 0) -> data_debug(groupArray(journey)) Array(Array(UInt64)) : 1'. (CANNOT_READ_ALL_DATA)\r\n```\r\n\nI'm not a true cpp developer, but something like that works for me:\r\n\r\n```\r\n// standard includes\r\n#include <iostream>\r\n#include <fstream>\r\n#include <cassert>\r\n#include <vector>\r\n#include <sstream>\r\n\r\nstd::string write_uleb128 (size_t x) {\r\n    unsigned char buf[10];\r\n    size_t bytes = 0;\r\n    do {\r\n        buf[bytes] = x & 0x7fU;\r\n        if (x >>= 7) buf[bytes] |= 0x80U;\r\n        ++bytes;\r\n    } while (x);\r\n    std::string ret(&buf[0], &buf[bytes]);\r\n    return ret;\r\n}\r\n\r\nsize_t read_uleb128 (std::istream *in, uint64_t *x) {\r\n    unsigned char buf;\r\n    size_t bytes = 0;\r\n    while (in->read((char*)&buf,1)) {\r\n        if (bytes == 0) *x = 0;\r\n        *x |= (buf & 0x7fULL) << (7 * bytes++);\r\n        if (!(buf & 0x80U)) break;\r\n    }\r\n    return bytes;\r\n}\r\n\r\nint main()\r\n{\r\n  size_t size = 0;\r\n  read_uleb128(&std::cin, &size);\r\n  while(size > 0)\r\n  {\r\n    for (size_t i=0; i < size; ++i)\r\n    {\r\n      std::cin.read((char*)&points[i].x, sizeof(long));\r\n      std::cin.read((char*)&points[i].y, sizeof(long));\r\n    }\r\n\r\n\r\n....\r\n    std::cout << write_uleb128((size_t)size); \r\n    size=0;\r\n    read_uleb128(&std::cin, &size);\r\n  }\r\n  return 0;\r\n}\r\n```\nWhere did you get this code ? \r\nOn one side, I understand the decode/encode part to know what to read. However, on the other side, it miss me few information to fully understand. \r\nFor example what is that `points` struct ? It looks like it reads two points (coordinate? int?) as tuple and set a vector of coordinates. \r\n\r\nBy the way, if I send what I receive it should be the same **LEB128 + message**, right ? But it returns the previous error. Same if I try to change your code into something closer to what I have I still have an error so I'm wondering, again, what I missed. And same again if I don't change anything, just replace points by strings (as well as types in the *\"_function.xml\")\r\n\n> Where did you get this code ?\r\n\r\nWrite it.\r\n\r\n>  For example what is that points struct ? It looks like it reads two points (coordinate? int?) as tuple and set a vector of coordinates.\r\n\r\nYeah, it was using some lib, i just removed all unrelated parts\r\n\r\n> By the way, if I send what I receive it should be the same LEB128 + message, right ?\r\n\r\nYou need to send LEB128 only for arrays or strings https://clickhouse.com/docs/en/interfaces/formats/#rowbinary\r\n\r\n```\r\nIntegers use fixed-length little-endian representation. For example, UInt64 uses 8 bytes.\r\nDateTime is represented as UInt32 containing the Unix timestamp as the value.\r\nDate is represented as a UInt16 object that contains the number of days since 1970-01-01 as the value.\r\nString is represented as a varint length (unsigned [LEB128](https://en.wikipedia.org/wiki/LEB128)), followed by the bytes of the string.\r\nFixedString is represented simply as a sequence of bytes.\r\n\r\nArray is represented as a varint length (unsigned [LEB128](https://en.wikipedia.org/wiki/LEB128)), followed by successive elements of the array.\r\n```\r\n\r\n```\r\nmain.cpp\r\n\r\n\r\n// standard includes\r\n#include <iostream>\r\n#include <fstream>\r\n#include <cassert>\r\n#include <vector>\r\n#include <sstream>\r\n\r\n\r\nstd::string write_uleb128 (size_t x) {\r\n    unsigned char buf[10];\r\n    size_t bytes = 0;\r\n    do {\r\n        buf[bytes] = x & 0x7fU;\r\n        if (x >>= 7) buf[bytes] |= 0x80U;\r\n        ++bytes;\r\n    } while (x);\r\n    std::string ret(&buf[0], &buf[bytes]);\r\n    return ret;\r\n}\r\n\r\nsize_t read_uleb128 (std::istream *in, uint64_t *x) {\r\n    unsigned char buf;\r\n    size_t bytes = 0;\r\n    while (in->read((char*)&buf,1)) {\r\n        if (bytes == 0) *x = 0;\r\n        *x |= (buf & 0x7fULL) << (7 * bytes++);\r\n        if (!(buf & 0x80U)) break;\r\n    }\r\n    return bytes;\r\n}\r\n\r\nint main()\r\n{\r\n  size_t size = 0;\r\n  read_uleb128(&std::cin, &size);\r\n\r\n  while(size > 0)\r\n  {\r\n\r\n    double x;\r\n    double y;\r\n\r\n    std::cout << write_uleb128(size);\r\n\r\n    for (size_t i=0; i < size; ++i)\r\n    {\r\n      std::cin.read((char*)&x, sizeof(double));\r\n      std::cin.read((char*)&y, sizeof(double));\r\n      std::cout.write((char*)(&x), 8);\r\n      std::cout.write((char*)(&y), 8);\r\n    }\r\n\r\n    size=0;\r\n    read_uleb128(&std::cin, &size);\r\n  }\r\n  return 0;\r\n}\r\n\r\n\r\ntest_function.xml\r\n\r\n<yandex>\r\n  <function>\r\n    <type>executable</type>\r\n    <execute_direct>1</execute_direct>\r\n    <name>test</name>\r\n    <return_type>Array(Tuple(Float64,Float64))</return_type>\r\n    <argument>\r\n      <type>Array(Tuple(Float64,Float64))</type>\r\n    </argument>\r\n    <format>RowBinary</format>\r\n    <command>program2</command>\r\n    <send_chunk_header>0</send_chunk_header>\r\n  </function>\r\n</yandex>\r\n\r\nSELECT test([(CAST('1.1', 'Float64'), CAST('1.2', 'Float64'))]) AS res\r\n\r\nQuery id: f32c92d2-529a-49e0-a6ab-a728489be9b1\r\n\r\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [(1.1,1.2)] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n> Write it.\r\n\r\nNot bad for a \"not true cpp dev\" ahah\r\n\r\n> You need to send LEB128 only for arrays or strings https://clickhouse.com/docs/en/interfaces/formats/#rowbinary\r\n\r\nYes I read that, but have you an explanation about why it fails when I send exactly what I receive ? \r\nWhy it's not the same that extracting the varint length and re-write it, as well as for data ? \r\n\r\n---\r\nThanks for your example. Thanks to it I succeed to make few change to adapt to my use case of Array(Array(Uint64)).\r\nI'm writing below the main function that I changed (write_uleb128 and read_uleb128 stay the same) in case if someone, one day, will need it :) \r\n\r\n```\r\nint main() {\r\n  size_t size = 0;\r\n  read_uleb128(&std::cin, &size);\r\n\r\n  while(size > 0) {\r\n    uint64_t x;\r\n    std::cout << write_uleb128(size);\r\n    for (size_t i=0; i < size; ++i) {\r\n      size_t subsize = 0;\r\n      read_uleb128(&std::cin, &subsize);\r\n      std::cout << write_uleb128(subsize);\r\n      for (size_t j=0; i < subsize; ++i) {\r\n        std::cin.read((char*)&x, sizeof(uint64_t));\r\n        std::cout.write((char*)(&x), 8);\r\n      }\r\n    }\r\n\r\n    size=0;\r\n    read_uleb128(&std::cin, &size);\r\n  }\r\n  return 0;\r\n}\r\n```\r\n\r\n```\r\n<clickhouse>\r\n...\r\n<function>\r\n    <type>executable</type>\r\n    <execute_direct>1</execute_direct>\r\n    <name>data_debug2</name>\r\n    <return_type>Array(Array(UInt64))</return_type>\r\n    <argument>\r\n      <type>Array(Array(UInt64))</type>\r\n    </argument>\r\n    <format>RowBinary</format>\r\n    <command>data_debug 1</command>\r\n    <send_chunk_header>0</send_chunk_header>\r\n</function>\r\n...\r\n</clickhouse>\r\n```\r\n\r\n`SELECT data_debug2([[CAST(1,'UInt64'),CAST(10,'UInt64'),CAST(20,'UInt64'),CAST(30,'UInt64'),CAST(45,'UInt64'),CAST(60,'UInt64'),CAST(110,'UInt64'),CAST(4,'UInt64')]]) AS res`\r\n\r\n```\r\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [[1,10,20,30,45,60,110,4]] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nI would also come back to initial question. Have you a clear list of what format is available or not (even best would be to have small example as above but it would required too much work i think) ?\r\nBecause you have [this page](https://clickhouse.com/docs/en/interfaces/formats/) that describes what can be get on input or output. However, since you seem to say that Native is not supported, and I still don't know why it fails with JSONEachRow, is there any other format that are supported in input/output but not by EUDF ? ",
  "created_at": "2022-02-16T15:33:21Z",
  "modified_files": [
    "docs/en/sql-reference/functions/index.md",
    "docs/ru/sql-reference/functions/index.md",
    "src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp",
    "src/Interpreters/UserDefinedExecutableFunction.h",
    "src/Interpreters/UserDefinedExecutableFunctionFactory.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_executable_user_defined_function/functions/test_function_config.xml",
    "tests/integration/test_executable_user_defined_function/test.py",
    "b/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_named_args.py",
    "b/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_partially_named_args.py",
    "b/tests/integration/test_executable_user_defined_function/user_scripts/input_sum_json_unnamed_args.py"
  ]
}