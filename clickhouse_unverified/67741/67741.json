{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67741,
  "instance_id": "ClickHouse__ClickHouse-67741",
  "issue_numbers": [
    "32754"
  ],
  "base_commit": "d9d30d1004038044c94845ef925fb89bdb077861",
  "patch": "diff --git a/src/Functions/array/arrayWithConstant.cpp b/src/Functions/array/arrayWithConstant.cpp\nindex 48262870553c..4cbc6404b9bc 100644\n--- a/src/Functions/array/arrayWithConstant.cpp\n+++ b/src/Functions/array/arrayWithConstant.cpp\n@@ -1,9 +1,9 @@\n #include <Functions/IFunction.h>\n-#include <Functions/FunctionHelpers.h>\n #include <Functions/FunctionFactory.h>\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <Columns/ColumnArray.h>\n+#include <base/arithmeticOverflow.h>\n \n \n namespace DB\n@@ -15,7 +15,8 @@ namespace ErrorCodes\n     extern const int TOO_LARGE_ARRAY_SIZE;\n }\n \n-/// Reasonable threshold.\n+/// Reasonable thresholds.\n+static constexpr Int64 max_array_size_in_columns_bytes = 1000000000;\n static constexpr size_t max_arrays_size_in_columns = 1000000000;\n \n \n@@ -63,12 +64,19 @@ class FunctionArrayWithConstant : public IFunction\n             auto array_size = col_num->getInt(i);\n \n             if (unlikely(array_size < 0))\n-                throw Exception(ErrorCodes::TOO_LARGE_ARRAY_SIZE, \"Array size cannot be negative: while executing function {}\", getName());\n+                throw Exception(ErrorCodes::TOO_LARGE_ARRAY_SIZE, \"Array size {} cannot be negative: while executing function {}\", array_size, getName());\n+\n+            Int64 estimated_size = 0;\n+            if (unlikely(common::mulOverflow(array_size, col_value->byteSize(), estimated_size)))\n+                throw Exception(ErrorCodes::TOO_LARGE_ARRAY_SIZE, \"Array size {} with element size {} bytes is too large: while executing function {}\", array_size, col_value->byteSize(), getName());\n+\n+            if (unlikely(estimated_size > max_array_size_in_columns_bytes))\n+                throw Exception(ErrorCodes::TOO_LARGE_ARRAY_SIZE, \"Array size {} with element size {} bytes is too large: while executing function {}\", array_size, col_value->byteSize(), getName());\n \n             offset += array_size;\n \n             if (unlikely(offset > max_arrays_size_in_columns))\n-                throw Exception(ErrorCodes::TOO_LARGE_ARRAY_SIZE, \"Too large array size while executing function {}\", getName());\n+                throw Exception(ErrorCodes::TOO_LARGE_ARRAY_SIZE, \"Too large array size {} (will generate at least {} elements) while executing function {}\", array_size, offset, getName());\n \n             offsets.push_back(offset);\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03216_arrayWithConstant_limits.reference b/tests/queries/0_stateless/03216_arrayWithConstant_limits.reference\nnew file mode 100644\nindex 000000000000..825319e1c5ba\n--- /dev/null\n+++ b/tests/queries/0_stateless/03216_arrayWithConstant_limits.reference\n@@ -0,0 +1,1 @@\n+10000000\ndiff --git a/tests/queries/0_stateless/03216_arrayWithConstant_limits.sql b/tests/queries/0_stateless/03216_arrayWithConstant_limits.sql\nnew file mode 100644\nindex 000000000000..c46524c50e6d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03216_arrayWithConstant_limits.sql\n@@ -0,0 +1,3 @@\n+SELECT arrayWithConstant(96142475, ['qMUF']); -- { serverError TOO_LARGE_ARRAY_SIZE }\n+SELECT arrayWithConstant(100000000, materialize([[[[[[[[[['Hello, world!']]]]]]]]]])); -- { serverError TOO_LARGE_ARRAY_SIZE }\n+SELECT length(arrayWithConstant(10000000, materialize([[[[[[[[[['Hello world']]]]]]]]]])));\n",
  "problem_statement": "This query is slow.\nThis query spend one second before returning an error:\r\n\r\n```\r\nSELECT arrayWithConstant(96142475, ['qMUF']);\r\n```\r\n\r\nIt opens a possibility of DoS.\n",
  "hints_text": "This is very good for DoS:\r\n\r\n```\r\nSELECT arrayWithConstant(100000000, materialize([[[[[[[[[['Hello, world!']]]]]]]]]]));\r\n```\nIt is still slow.\n![image](https://github.com/ClickHouse/ClickHouse/assets/875885/bd35a061-cbbd-4124-97b8-35dbeb403fb1)\r\n\r\n`ColumnArray::replicateString` and `SerializationArray::serializeBinaryBulkWithMultipleStreams` are the worst offenders.\r\n\r\n```\r\nkonstantin-clickhouse.tail983ac.ts.net :) SELECT arrayWithConstant(100000000, ['AAAA']) SETTINGS send_logs_level='trace'\r\n\r\nSELECT arrayWithConstant(100000000, ['AAAA'])\r\nSETTINGS send_logs_level = 'trace'\r\n\r\nQuery id: d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66\r\n\r\n[konstantin-clickhouse] 2024.03.26 17:26:07.091433 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> executeQuery: (from [::1]:54644) SELECT arrayWithConstant(100000000, ['AAAA']) SETTINGS send_logs_level='trace' (stage: Complete)\r\n[konstantin-clickhouse] 2024.03.26 17:26:07.093101 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> PerfLogger: Start executeImpl\r\n[konstantin-clickhouse] 2024.03.26 17:26:07.093214 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> PerfLogger: end preprocess executeImpl\r\n[konstantin-clickhouse] 2024.03.26 17:26:07.093294 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> PerfLogger: Start replicateString\r\n[konstantin-clickhouse] 2024.03.26 17:26:07.093401 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> MemoryTracker: Current memory usage (total): 3.07 GiB.\r\n[konstantin-clickhouse] 2024.03.26 17:26:07.117308 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> MemoryTracker: Current memory usage (for query): 1.21 GiB.\r\n[konstantin-clickhouse] 2024.03.26 17:26:07.152912 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> MemoryTracker: Current memory usage (total): 4.56 GiB.\r\n[konstantin-clickhouse] 2024.03.26 17:26:10.519284 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> PerfLogger: End replicateString\r\n[konstantin-clickhouse] 2024.03.26 17:26:10.519428 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> PerfLogger: END executeImpl\r\n[konstantin-clickhouse] 2024.03.26 17:26:10.519952 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Trace> ContextAccess (default): Access granted: SELECT(dummy) ON system.one\r\n[konstantin-clickhouse] 2024.03.26 17:26:10.520265 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n\r\n...\r\n\r\n[konstantin-clickhouse] 2024.03.26 17:26:10.523288 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> MemoryTracker: Current memory usage (for query): 2.96 GiB.\r\n[konstantin-clickhouse] 2024.03.26 17:26:10.638314 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> MemoryTracker: Current memory usage (for query): 3.96 GiB.\r\n[konstantin-clickhouse] 2024.03.26 17:26:10.752167 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> MemoryTracker: Current memory usage (for query): 4.46 GiB.\r\n[konstantin-clickhouse] 2024.03.26 17:26:10.752299 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> MemoryTracker: Current memory usage (total): 5.10 GiB.\r\n[konstantin-clickhouse] 2024.03.26 17:26:11.289073 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> PerfLogger: Start serializeBinaryBulkWithMultipleStreams\r\n[konstantin-clickhouse] 2024.03.26 17:26:11.289301 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> PerfLogger: Start serializeBinaryBulkWithMultipleStreams\r\n[konstantin-clickhouse] 2024.03.26 17:26:15.934224 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> PerfLogger: End serializeBinaryBulkWithMultipleStreams\r\n[konstantin-clickhouse] 2024.03.26 17:26:15.934405 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> PerfLogger: End serializeBinaryBulkWithMultipleStreams\r\n[konstantin-clickhouse] 2024.03.26 17:26:16.068048 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> executeQuery: Read 1 rows, 1.00 B in 8.977608 sec., 0.11138824506483241 rows/sec., 0.11 B/sec.\r\n[konstantin-clickhouse] 2024.03.26 17:26:16.068382 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> MemoryTracker: Peak memory usage (for query): 4.46 GiB.\r\n[konstantin-clickhouse] 2024.03.26 17:26:16.068497 [ 140394 ] {d9a9b51e-a646-4bfb-af4d-e3c8d2bf0c66} <Debug> TCPHandler: Processed in 8.979195689 sec.\r\n\r\n1 row in set. Elapsed: 8.979 sec.\r\n```",
  "created_at": "2024-08-03T21:50:29Z",
  "modified_files": [
    "src/Functions/array/arrayWithConstant.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03216_arrayWithConstant_limits.reference",
    "b/tests/queries/0_stateless/03216_arrayWithConstant_limits.sql"
  ]
}