diff --git a/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.h b/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.h
index ebbe98653133..9877db8ee308 100644
--- a/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.h
+++ b/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.h
@@ -6,7 +6,7 @@
 namespace DB
 {
 
-class MergeTreeIndexAggregatorBloomFilter : public IMergeTreeIndexAggregator
+class MergeTreeIndexAggregatorBloomFilter final : public IMergeTreeIndexAggregator
 {
 public:
     MergeTreeIndexAggregatorBloomFilter(size_t bits_per_row_, size_t hash_functions_, const Names & columns_name_);
diff --git a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.h b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.h
index b0d9a295bcda..1aac2c22aa08 100644
--- a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.h
+++ b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.h
@@ -8,7 +8,7 @@
 namespace DB
 {
 
-class MergeTreeIndexBloomFilter : public IMergeTreeIndex
+class MergeTreeIndexBloomFilter final : public IMergeTreeIndex
 {
 public:
     MergeTreeIndexBloomFilter(
diff --git a/src/Storages/MergeTree/MergeTreeIndexConditionBloomFilter.h b/src/Storages/MergeTree/MergeTreeIndexConditionBloomFilter.h
index 34fb45c86a57..0b02e64d43c9 100644
--- a/src/Storages/MergeTree/MergeTreeIndexConditionBloomFilter.h
+++ b/src/Storages/MergeTree/MergeTreeIndexConditionBloomFilter.h
@@ -13,7 +13,7 @@ namespace ErrorCodes
     extern const int LOGICAL_ERROR;
 }
 
-class MergeTreeIndexConditionBloomFilter : public IMergeTreeIndexCondition
+class MergeTreeIndexConditionBloomFilter final : public IMergeTreeIndexCondition
 {
 public:
     struct RPNElement
diff --git a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp
index 3e8b9cc704be..419a417c3e84 100644
--- a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp
+++ b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp
@@ -43,15 +43,29 @@ namespace ErrorCodes
 
 /// Adds all tokens from string to bloom filter.
 static void stringToBloomFilter(
+    const String & string, TokenExtractorPtr token_extractor, BloomFilter & bloom_filter)
+{
+    const char * data = string.data();
+    size_t size = string.size();
+
+    size_t cur = 0;
+    size_t token_start = 0;
+    size_t token_len = 0;
+    while (cur < size && token_extractor->nextInField(data, size, &cur, &token_start, &token_len))
+        bloom_filter.add(data + token_start, token_len);
+}
+
+static void columnToBloomFilter(
     const char * data, size_t size, TokenExtractorPtr token_extractor, BloomFilter & bloom_filter)
 {
     size_t cur = 0;
     size_t token_start = 0;
     size_t token_len = 0;
-    while (cur < size && token_extractor->next(data, size, &cur, &token_start, &token_len))
+    while (cur < size && token_extractor->nextInColumn(data, size, &cur, &token_start, &token_len))
         bloom_filter.add(data + token_start, token_len);
 }
 
+
 /// Adds all tokens from like pattern string to bloom filter. (Because like pattern can contain `\%` and `\_`.)
 static void likeStringToBloomFilter(
     const String & data, TokenExtractorPtr token_extractor, BloomFilter & bloom_filter)
@@ -61,15 +75,14 @@ static void likeStringToBloomFilter(
     while (cur < data.size() && token_extractor->nextLike(data, &cur, token))
         bloom_filter.add(token.c_str(), token.size());
 }
+
 /// Unified condition for equals, startsWith and endsWith
 bool MergeTreeConditionFullText::createFunctionEqualsCondition(
     RPNElement & out, const Field & value, const BloomFilterParameters & params, TokenExtractorPtr token_extractor)
 {
     out.function = RPNElement::FUNCTION_EQUALS;
     out.bloom_filter = std::make_unique<BloomFilter>(params);
-
-    const auto & str = value.get<String>();
-    stringToBloomFilter(str.c_str(), str.size(), token_extractor, *out.bloom_filter);
+    stringToBloomFilter(value.get<String>(), token_extractor, *out.bloom_filter);
     return true;
 }
 
@@ -143,7 +156,7 @@ void MergeTreeIndexAggregatorFullText::update(const Block & block, size_t * pos,
         for (size_t i = 0; i < rows_read; ++i)
         {
             auto ref = column->getDataAt(*pos + i);
-            stringToBloomFilter(ref.data, ref.size, token_extractor, granule->bloom_filters[col]);
+            columnToBloomFilter(ref.data, ref.size, token_extractor, granule->bloom_filters[col]);
         }
     }
     granule->has_elems = true;
@@ -367,9 +380,7 @@ bool MergeTreeConditionFullText::atomFromAST(
             out.key_column = key_column_num;
             out.function = RPNElement::FUNCTION_NOT_EQUALS;
             out.bloom_filter = std::make_unique<BloomFilter>(params);
-
-            const auto & str = const_value.get<String>();
-            stringToBloomFilter(str.c_str(), str.size(), token_extractor, *out.bloom_filter);
+            stringToBloomFilter(const_value.get<String>(), token_extractor, *out.bloom_filter);
             return true;
         }
         else if (func_name == "equals")
@@ -382,9 +393,7 @@ bool MergeTreeConditionFullText::atomFromAST(
             out.key_column = key_column_num;
             out.function = RPNElement::FUNCTION_EQUALS;
             out.bloom_filter = std::make_unique<BloomFilter>(params);
-
-            const auto & str = const_value.get<String>();
-            likeStringToBloomFilter(str, token_extractor, *out.bloom_filter);
+            likeStringToBloomFilter(const_value.get<String>(), token_extractor, *out.bloom_filter);
             return true;
         }
         else if (func_name == "notLike")
@@ -392,9 +401,7 @@ bool MergeTreeConditionFullText::atomFromAST(
             out.key_column = key_column_num;
             out.function = RPNElement::FUNCTION_NOT_EQUALS;
             out.bloom_filter = std::make_unique<BloomFilter>(params);
-
-            const auto & str = const_value.get<String>();
-            likeStringToBloomFilter(str, token_extractor, *out.bloom_filter);
+            likeStringToBloomFilter(const_value.get<String>(), token_extractor, *out.bloom_filter);
             return true;
         }
         else if (func_name == "hasToken")
@@ -402,9 +409,7 @@ bool MergeTreeConditionFullText::atomFromAST(
             out.key_column = key_column_num;
             out.function = RPNElement::FUNCTION_EQUALS;
             out.bloom_filter = std::make_unique<BloomFilter>(params);
-
-            const auto & str = const_value.get<String>();
-            stringToBloomFilter(str.c_str(), str.size(), token_extractor, *out.bloom_filter);
+            stringToBloomFilter(const_value.get<String>(), token_extractor, *out.bloom_filter);
             return true;
         }
         else if (func_name == "startsWith")
@@ -431,8 +436,7 @@ bool MergeTreeConditionFullText::atomFromAST(
                     return false;
 
                 bloom_filters.back().emplace_back(params);
-                const auto & str = element.get<String>();
-                stringToBloomFilter(str.c_str(), str.size(), token_extractor, bloom_filters.back().back());
+                stringToBloomFilter(element.get<String>(), token_extractor, bloom_filters.back().back());
             }
             out.set_bloom_filters = std::move(bloom_filters);
             return true;
@@ -541,7 +545,7 @@ bool MergeTreeConditionFullText::tryPrepareSetBloomFilter(
         {
             bloom_filters.back().emplace_back(params);
             auto ref = column->getDataAt(row);
-            stringToBloomFilter(ref.data, ref.size, token_extractor, bloom_filters.back().back());
+            columnToBloomFilter(ref.data, ref.size, token_extractor, bloom_filters.back().back());
         }
     }
 
@@ -573,7 +577,7 @@ bool MergeTreeIndexFullText::mayBenefitFromIndexForIn(const ASTPtr & node) const
 }
 
 
-bool NgramTokenExtractor::next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const
+bool NgramTokenExtractor::nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const
 {
     *token_start = *pos;
     *token_len = 0;
@@ -635,7 +639,33 @@ bool NgramTokenExtractor::nextLike(const String & str, size_t * pos, String & to
     return false;
 }
 
-bool SplitTokenExtractor::next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const
+
+bool SplitTokenExtractor::nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const
+{
+    *token_start = *pos;
+    *token_len = 0;
+
+    while (*pos < len)
+    {
+        if (isASCII(data[*pos]) && !isAlphaNumericASCII(data[*pos]))
+        {
+            /// Finish current token if any
+            if (*token_len > 0)
+                return true;
+            *token_start = ++*pos;
+        }
+        else
+        {
+            /// Note that UTF-8 sequence is completely consisted of non-ASCII bytes.
+            ++*pos;
+            ++*token_len;
+        }
+    }
+
+    return *token_len > 0;
+}
+
+bool SplitTokenExtractor::nextInColumn(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const
 {
     *token_start = *pos;
     *token_len = 0;
diff --git a/src/Storages/MergeTree/MergeTreeIndexFullText.h b/src/Storages/MergeTree/MergeTreeIndexFullText.h
index c3c1ff8de8bb..d861751c7df3 100644
--- a/src/Storages/MergeTree/MergeTreeIndexFullText.h
+++ b/src/Storages/MergeTree/MergeTreeIndexFullText.h
@@ -14,10 +14,18 @@ namespace DB
 struct ITokenExtractor
 {
     virtual ~ITokenExtractor() = default;
+
     /// Fast inplace implementation for regular use.
     /// Gets string (data ptr and len) and start position for extracting next token (state of extractor).
     /// Returns false if parsing is finished, otherwise returns true.
-    virtual bool next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const = 0;
+    virtual bool nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const = 0;
+
+    /// Optimized version that can assume at least 15 padding bytes after data + len (as our Columns provide).
+    virtual bool nextInColumn(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const
+    {
+        return nextInField(data, len, pos, token_start, token_len);
+    }
+
     /// Special implementation for creating bloom filter for LIKE function.
     /// It skips unescaped `%` and `_` and supports escaping symbols, but it is less lightweight.
     virtual bool nextLike(const String & str, size_t * pos, String & out) const = 0;
@@ -27,7 +35,7 @@ struct ITokenExtractor
 
 using TokenExtractorPtr = const ITokenExtractor *;
 
-struct MergeTreeIndexGranuleFullText : public IMergeTreeIndexGranule
+struct MergeTreeIndexGranuleFullText final : public IMergeTreeIndexGranule
 {
     explicit MergeTreeIndexGranuleFullText(
         const String & index_name_,
@@ -50,7 +58,7 @@ struct MergeTreeIndexGranuleFullText : public IMergeTreeIndexGranule
 
 using MergeTreeIndexGranuleFullTextPtr = std::shared_ptr<MergeTreeIndexGranuleFullText>;
 
-struct MergeTreeIndexAggregatorFullText : IMergeTreeIndexAggregator
+struct MergeTreeIndexAggregatorFullText final : IMergeTreeIndexAggregator
 {
     explicit MergeTreeIndexAggregatorFullText(
         const Names & index_columns_,
@@ -74,7 +82,7 @@ struct MergeTreeIndexAggregatorFullText : IMergeTreeIndexAggregator
 };
 
 
-class MergeTreeConditionFullText : public IMergeTreeIndexCondition
+class MergeTreeConditionFullText final : public IMergeTreeIndexCondition
 {
 public:
     MergeTreeConditionFullText(
@@ -156,13 +164,13 @@ class MergeTreeConditionFullText : public IMergeTreeIndexCondition
 
 
 /// Parser extracting all ngrams from string.
-struct NgramTokenExtractor : public ITokenExtractor
+struct NgramTokenExtractor final : public ITokenExtractor
 {
     NgramTokenExtractor(size_t n_) : n(n_) {}
 
     static String getName() { return "ngrambf_v1"; }
 
-    bool next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;
+    bool nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;
     bool nextLike(const String & str, size_t * pos, String & token) const override;
 
     bool supportLike() const override { return true; }
@@ -171,18 +179,19 @@ struct NgramTokenExtractor : public ITokenExtractor
 };
 
 /// Parser extracting tokens (sequences of numbers and ascii letters).
-struct SplitTokenExtractor : public ITokenExtractor
+struct SplitTokenExtractor final : public ITokenExtractor
 {
     static String getName() { return "tokenbf_v1"; }
 
-    bool next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;
+    bool nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;
+    bool nextInColumn(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;
     bool nextLike(const String & str, size_t * pos, String & token) const override;
 
     bool supportLike() const override { return true; }
 };
 
 
-class MergeTreeIndexFullText : public IMergeTreeIndex
+class MergeTreeIndexFullText final : public IMergeTreeIndex
 {
 public:
     MergeTreeIndexFullText(
diff --git a/src/Storages/MergeTree/MergeTreeIndexGranuleBloomFilter.h b/src/Storages/MergeTree/MergeTreeIndexGranuleBloomFilter.h
index 54e2c105db82..cdd4b92f80cd 100644
--- a/src/Storages/MergeTree/MergeTreeIndexGranuleBloomFilter.h
+++ b/src/Storages/MergeTree/MergeTreeIndexGranuleBloomFilter.h
@@ -6,7 +6,7 @@
 namespace DB
 {
 
-class MergeTreeIndexGranuleBloomFilter : public IMergeTreeIndexGranule
+class MergeTreeIndexGranuleBloomFilter final : public IMergeTreeIndexGranule
 {
 public:
     MergeTreeIndexGranuleBloomFilter(size_t bits_per_row_, size_t hash_functions_, size_t index_columns_);
diff --git a/src/Storages/MergeTree/MergeTreeIndexMinMax.h b/src/Storages/MergeTree/MergeTreeIndexMinMax.h
index 3956b1d9f9ad..8d782d9a7dcd 100644
--- a/src/Storages/MergeTree/MergeTreeIndexMinMax.h
+++ b/src/Storages/MergeTree/MergeTreeIndexMinMax.h
@@ -10,7 +10,7 @@
 namespace DB
 {
 
-struct MergeTreeIndexGranuleMinMax : public IMergeTreeIndexGranule
+struct MergeTreeIndexGranuleMinMax final : public IMergeTreeIndexGranule
 {
     MergeTreeIndexGranuleMinMax(const String & index_name_, const Block & index_sample_block_);
     MergeTreeIndexGranuleMinMax(
@@ -31,7 +31,7 @@ struct MergeTreeIndexGranuleMinMax : public IMergeTreeIndexGranule
 };
 
 
-struct MergeTreeIndexAggregatorMinMax : IMergeTreeIndexAggregator
+struct MergeTreeIndexAggregatorMinMax final : IMergeTreeIndexAggregator
 {
     MergeTreeIndexAggregatorMinMax(const String & index_name_, const Block & index_sample_block);
     ~MergeTreeIndexAggregatorMinMax() override = default;
@@ -46,7 +46,7 @@ struct MergeTreeIndexAggregatorMinMax : IMergeTreeIndexAggregator
 };
 
 
-class MergeTreeIndexConditionMinMax : public IMergeTreeIndexCondition
+class MergeTreeIndexConditionMinMax final : public IMergeTreeIndexCondition
 {
 public:
     MergeTreeIndexConditionMinMax(
diff --git a/src/Storages/MergeTree/MergeTreeIndexSet.h b/src/Storages/MergeTree/MergeTreeIndexSet.h
index d84991f5e858..90389264d533 100644
--- a/src/Storages/MergeTree/MergeTreeIndexSet.h
+++ b/src/Storages/MergeTree/MergeTreeIndexSet.h
@@ -14,7 +14,7 @@ namespace DB
 
 class MergeTreeIndexSet;
 
-struct MergeTreeIndexGranuleSet : public IMergeTreeIndexGranule
+struct MergeTreeIndexGranuleSet final : public IMergeTreeIndexGranule
 {
     explicit MergeTreeIndexGranuleSet(
         const String & index_name_,
@@ -42,7 +42,7 @@ struct MergeTreeIndexGranuleSet : public IMergeTreeIndexGranule
 };
 
 
-struct MergeTreeIndexAggregatorSet : IMergeTreeIndexAggregator
+struct MergeTreeIndexAggregatorSet final : IMergeTreeIndexAggregator
 {
     explicit MergeTreeIndexAggregatorSet(
         const String & index_name_,
@@ -79,7 +79,7 @@ struct MergeTreeIndexAggregatorSet : IMergeTreeIndexAggregator
 };
 
 
-class MergeTreeIndexConditionSet : public IMergeTreeIndexCondition
+class MergeTreeIndexConditionSet final : public IMergeTreeIndexCondition
 {
 public:
     MergeTreeIndexConditionSet(
@@ -113,7 +113,7 @@ class MergeTreeIndexConditionSet : public IMergeTreeIndexCondition
 };
 
 
-class MergeTreeIndexSet : public IMergeTreeIndex
+class MergeTreeIndexSet final : public IMergeTreeIndex
 {
 public:
     MergeTreeIndexSet(
