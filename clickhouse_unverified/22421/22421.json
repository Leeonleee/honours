{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22421,
  "instance_id": "ClickHouse__ClickHouse-22421",
  "issue_numbers": [
    "19233"
  ],
  "base_commit": "28c7980fba5517849657a57e950507600608e781",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.h b/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.h\nindex ebbe98653133..9877db8ee308 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.h\n+++ b/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.h\n@@ -6,7 +6,7 @@\n namespace DB\n {\n \n-class MergeTreeIndexAggregatorBloomFilter : public IMergeTreeIndexAggregator\n+class MergeTreeIndexAggregatorBloomFilter final : public IMergeTreeIndexAggregator\n {\n public:\n     MergeTreeIndexAggregatorBloomFilter(size_t bits_per_row_, size_t hash_functions_, const Names & columns_name_);\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.h b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.h\nindex b0d9a295bcda..1aac2c22aa08 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.h\n+++ b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.h\n@@ -8,7 +8,7 @@\n namespace DB\n {\n \n-class MergeTreeIndexBloomFilter : public IMergeTreeIndex\n+class MergeTreeIndexBloomFilter final : public IMergeTreeIndex\n {\n public:\n     MergeTreeIndexBloomFilter(\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexConditionBloomFilter.h b/src/Storages/MergeTree/MergeTreeIndexConditionBloomFilter.h\nindex 34fb45c86a57..0b02e64d43c9 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexConditionBloomFilter.h\n+++ b/src/Storages/MergeTree/MergeTreeIndexConditionBloomFilter.h\n@@ -13,7 +13,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n }\n \n-class MergeTreeIndexConditionBloomFilter : public IMergeTreeIndexCondition\n+class MergeTreeIndexConditionBloomFilter final : public IMergeTreeIndexCondition\n {\n public:\n     struct RPNElement\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp\nindex 3e8b9cc704be..419a417c3e84 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp\n@@ -43,15 +43,29 @@ namespace ErrorCodes\n \n /// Adds all tokens from string to bloom filter.\n static void stringToBloomFilter(\n+    const String & string, TokenExtractorPtr token_extractor, BloomFilter & bloom_filter)\n+{\n+    const char * data = string.data();\n+    size_t size = string.size();\n+\n+    size_t cur = 0;\n+    size_t token_start = 0;\n+    size_t token_len = 0;\n+    while (cur < size && token_extractor->nextInField(data, size, &cur, &token_start, &token_len))\n+        bloom_filter.add(data + token_start, token_len);\n+}\n+\n+static void columnToBloomFilter(\n     const char * data, size_t size, TokenExtractorPtr token_extractor, BloomFilter & bloom_filter)\n {\n     size_t cur = 0;\n     size_t token_start = 0;\n     size_t token_len = 0;\n-    while (cur < size && token_extractor->next(data, size, &cur, &token_start, &token_len))\n+    while (cur < size && token_extractor->nextInColumn(data, size, &cur, &token_start, &token_len))\n         bloom_filter.add(data + token_start, token_len);\n }\n \n+\n /// Adds all tokens from like pattern string to bloom filter. (Because like pattern can contain `\\%` and `\\_`.)\n static void likeStringToBloomFilter(\n     const String & data, TokenExtractorPtr token_extractor, BloomFilter & bloom_filter)\n@@ -61,15 +75,14 @@ static void likeStringToBloomFilter(\n     while (cur < data.size() && token_extractor->nextLike(data, &cur, token))\n         bloom_filter.add(token.c_str(), token.size());\n }\n+\n /// Unified condition for equals, startsWith and endsWith\n bool MergeTreeConditionFullText::createFunctionEqualsCondition(\n     RPNElement & out, const Field & value, const BloomFilterParameters & params, TokenExtractorPtr token_extractor)\n {\n     out.function = RPNElement::FUNCTION_EQUALS;\n     out.bloom_filter = std::make_unique<BloomFilter>(params);\n-\n-    const auto & str = value.get<String>();\n-    stringToBloomFilter(str.c_str(), str.size(), token_extractor, *out.bloom_filter);\n+    stringToBloomFilter(value.get<String>(), token_extractor, *out.bloom_filter);\n     return true;\n }\n \n@@ -143,7 +156,7 @@ void MergeTreeIndexAggregatorFullText::update(const Block & block, size_t * pos,\n         for (size_t i = 0; i < rows_read; ++i)\n         {\n             auto ref = column->getDataAt(*pos + i);\n-            stringToBloomFilter(ref.data, ref.size, token_extractor, granule->bloom_filters[col]);\n+            columnToBloomFilter(ref.data, ref.size, token_extractor, granule->bloom_filters[col]);\n         }\n     }\n     granule->has_elems = true;\n@@ -367,9 +380,7 @@ bool MergeTreeConditionFullText::atomFromAST(\n             out.key_column = key_column_num;\n             out.function = RPNElement::FUNCTION_NOT_EQUALS;\n             out.bloom_filter = std::make_unique<BloomFilter>(params);\n-\n-            const auto & str = const_value.get<String>();\n-            stringToBloomFilter(str.c_str(), str.size(), token_extractor, *out.bloom_filter);\n+            stringToBloomFilter(const_value.get<String>(), token_extractor, *out.bloom_filter);\n             return true;\n         }\n         else if (func_name == \"equals\")\n@@ -382,9 +393,7 @@ bool MergeTreeConditionFullText::atomFromAST(\n             out.key_column = key_column_num;\n             out.function = RPNElement::FUNCTION_EQUALS;\n             out.bloom_filter = std::make_unique<BloomFilter>(params);\n-\n-            const auto & str = const_value.get<String>();\n-            likeStringToBloomFilter(str, token_extractor, *out.bloom_filter);\n+            likeStringToBloomFilter(const_value.get<String>(), token_extractor, *out.bloom_filter);\n             return true;\n         }\n         else if (func_name == \"notLike\")\n@@ -392,9 +401,7 @@ bool MergeTreeConditionFullText::atomFromAST(\n             out.key_column = key_column_num;\n             out.function = RPNElement::FUNCTION_NOT_EQUALS;\n             out.bloom_filter = std::make_unique<BloomFilter>(params);\n-\n-            const auto & str = const_value.get<String>();\n-            likeStringToBloomFilter(str, token_extractor, *out.bloom_filter);\n+            likeStringToBloomFilter(const_value.get<String>(), token_extractor, *out.bloom_filter);\n             return true;\n         }\n         else if (func_name == \"hasToken\")\n@@ -402,9 +409,7 @@ bool MergeTreeConditionFullText::atomFromAST(\n             out.key_column = key_column_num;\n             out.function = RPNElement::FUNCTION_EQUALS;\n             out.bloom_filter = std::make_unique<BloomFilter>(params);\n-\n-            const auto & str = const_value.get<String>();\n-            stringToBloomFilter(str.c_str(), str.size(), token_extractor, *out.bloom_filter);\n+            stringToBloomFilter(const_value.get<String>(), token_extractor, *out.bloom_filter);\n             return true;\n         }\n         else if (func_name == \"startsWith\")\n@@ -431,8 +436,7 @@ bool MergeTreeConditionFullText::atomFromAST(\n                     return false;\n \n                 bloom_filters.back().emplace_back(params);\n-                const auto & str = element.get<String>();\n-                stringToBloomFilter(str.c_str(), str.size(), token_extractor, bloom_filters.back().back());\n+                stringToBloomFilter(element.get<String>(), token_extractor, bloom_filters.back().back());\n             }\n             out.set_bloom_filters = std::move(bloom_filters);\n             return true;\n@@ -541,7 +545,7 @@ bool MergeTreeConditionFullText::tryPrepareSetBloomFilter(\n         {\n             bloom_filters.back().emplace_back(params);\n             auto ref = column->getDataAt(row);\n-            stringToBloomFilter(ref.data, ref.size, token_extractor, bloom_filters.back().back());\n+            columnToBloomFilter(ref.data, ref.size, token_extractor, bloom_filters.back().back());\n         }\n     }\n \n@@ -573,7 +577,7 @@ bool MergeTreeIndexFullText::mayBenefitFromIndexForIn(const ASTPtr & node) const\n }\n \n \n-bool NgramTokenExtractor::next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const\n+bool NgramTokenExtractor::nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const\n {\n     *token_start = *pos;\n     *token_len = 0;\n@@ -635,7 +639,33 @@ bool NgramTokenExtractor::nextLike(const String & str, size_t * pos, String & to\n     return false;\n }\n \n-bool SplitTokenExtractor::next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const\n+\n+bool SplitTokenExtractor::nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const\n+{\n+    *token_start = *pos;\n+    *token_len = 0;\n+\n+    while (*pos < len)\n+    {\n+        if (isASCII(data[*pos]) && !isAlphaNumericASCII(data[*pos]))\n+        {\n+            /// Finish current token if any\n+            if (*token_len > 0)\n+                return true;\n+            *token_start = ++*pos;\n+        }\n+        else\n+        {\n+            /// Note that UTF-8 sequence is completely consisted of non-ASCII bytes.\n+            ++*pos;\n+            ++*token_len;\n+        }\n+    }\n+\n+    return *token_len > 0;\n+}\n+\n+bool SplitTokenExtractor::nextInColumn(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const\n {\n     *token_start = *pos;\n     *token_len = 0;\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexFullText.h b/src/Storages/MergeTree/MergeTreeIndexFullText.h\nindex c3c1ff8de8bb..d861751c7df3 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexFullText.h\n+++ b/src/Storages/MergeTree/MergeTreeIndexFullText.h\n@@ -14,10 +14,18 @@ namespace DB\n struct ITokenExtractor\n {\n     virtual ~ITokenExtractor() = default;\n+\n     /// Fast inplace implementation for regular use.\n     /// Gets string (data ptr and len) and start position for extracting next token (state of extractor).\n     /// Returns false if parsing is finished, otherwise returns true.\n-    virtual bool next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const = 0;\n+    virtual bool nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const = 0;\n+\n+    /// Optimized version that can assume at least 15 padding bytes after data + len (as our Columns provide).\n+    virtual bool nextInColumn(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const\n+    {\n+        return nextInField(data, len, pos, token_start, token_len);\n+    }\n+\n     /// Special implementation for creating bloom filter for LIKE function.\n     /// It skips unescaped `%` and `_` and supports escaping symbols, but it is less lightweight.\n     virtual bool nextLike(const String & str, size_t * pos, String & out) const = 0;\n@@ -27,7 +35,7 @@ struct ITokenExtractor\n \n using TokenExtractorPtr = const ITokenExtractor *;\n \n-struct MergeTreeIndexGranuleFullText : public IMergeTreeIndexGranule\n+struct MergeTreeIndexGranuleFullText final : public IMergeTreeIndexGranule\n {\n     explicit MergeTreeIndexGranuleFullText(\n         const String & index_name_,\n@@ -50,7 +58,7 @@ struct MergeTreeIndexGranuleFullText : public IMergeTreeIndexGranule\n \n using MergeTreeIndexGranuleFullTextPtr = std::shared_ptr<MergeTreeIndexGranuleFullText>;\n \n-struct MergeTreeIndexAggregatorFullText : IMergeTreeIndexAggregator\n+struct MergeTreeIndexAggregatorFullText final : IMergeTreeIndexAggregator\n {\n     explicit MergeTreeIndexAggregatorFullText(\n         const Names & index_columns_,\n@@ -74,7 +82,7 @@ struct MergeTreeIndexAggregatorFullText : IMergeTreeIndexAggregator\n };\n \n \n-class MergeTreeConditionFullText : public IMergeTreeIndexCondition\n+class MergeTreeConditionFullText final : public IMergeTreeIndexCondition\n {\n public:\n     MergeTreeConditionFullText(\n@@ -156,13 +164,13 @@ class MergeTreeConditionFullText : public IMergeTreeIndexCondition\n \n \n /// Parser extracting all ngrams from string.\n-struct NgramTokenExtractor : public ITokenExtractor\n+struct NgramTokenExtractor final : public ITokenExtractor\n {\n     NgramTokenExtractor(size_t n_) : n(n_) {}\n \n     static String getName() { return \"ngrambf_v1\"; }\n \n-    bool next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;\n+    bool nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;\n     bool nextLike(const String & str, size_t * pos, String & token) const override;\n \n     bool supportLike() const override { return true; }\n@@ -171,18 +179,19 @@ struct NgramTokenExtractor : public ITokenExtractor\n };\n \n /// Parser extracting tokens (sequences of numbers and ascii letters).\n-struct SplitTokenExtractor : public ITokenExtractor\n+struct SplitTokenExtractor final : public ITokenExtractor\n {\n     static String getName() { return \"tokenbf_v1\"; }\n \n-    bool next(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;\n+    bool nextInField(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;\n+    bool nextInColumn(const char * data, size_t len, size_t * pos, size_t * token_start, size_t * token_len) const override;\n     bool nextLike(const String & str, size_t * pos, String & token) const override;\n \n     bool supportLike() const override { return true; }\n };\n \n \n-class MergeTreeIndexFullText : public IMergeTreeIndex\n+class MergeTreeIndexFullText final : public IMergeTreeIndex\n {\n public:\n     MergeTreeIndexFullText(\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexGranuleBloomFilter.h b/src/Storages/MergeTree/MergeTreeIndexGranuleBloomFilter.h\nindex 54e2c105db82..cdd4b92f80cd 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexGranuleBloomFilter.h\n+++ b/src/Storages/MergeTree/MergeTreeIndexGranuleBloomFilter.h\n@@ -6,7 +6,7 @@\n namespace DB\n {\n \n-class MergeTreeIndexGranuleBloomFilter : public IMergeTreeIndexGranule\n+class MergeTreeIndexGranuleBloomFilter final : public IMergeTreeIndexGranule\n {\n public:\n     MergeTreeIndexGranuleBloomFilter(size_t bits_per_row_, size_t hash_functions_, size_t index_columns_);\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexMinMax.h b/src/Storages/MergeTree/MergeTreeIndexMinMax.h\nindex 3956b1d9f9ad..8d782d9a7dcd 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexMinMax.h\n+++ b/src/Storages/MergeTree/MergeTreeIndexMinMax.h\n@@ -10,7 +10,7 @@\n namespace DB\n {\n \n-struct MergeTreeIndexGranuleMinMax : public IMergeTreeIndexGranule\n+struct MergeTreeIndexGranuleMinMax final : public IMergeTreeIndexGranule\n {\n     MergeTreeIndexGranuleMinMax(const String & index_name_, const Block & index_sample_block_);\n     MergeTreeIndexGranuleMinMax(\n@@ -31,7 +31,7 @@ struct MergeTreeIndexGranuleMinMax : public IMergeTreeIndexGranule\n };\n \n \n-struct MergeTreeIndexAggregatorMinMax : IMergeTreeIndexAggregator\n+struct MergeTreeIndexAggregatorMinMax final : IMergeTreeIndexAggregator\n {\n     MergeTreeIndexAggregatorMinMax(const String & index_name_, const Block & index_sample_block);\n     ~MergeTreeIndexAggregatorMinMax() override = default;\n@@ -46,7 +46,7 @@ struct MergeTreeIndexAggregatorMinMax : IMergeTreeIndexAggregator\n };\n \n \n-class MergeTreeIndexConditionMinMax : public IMergeTreeIndexCondition\n+class MergeTreeIndexConditionMinMax final : public IMergeTreeIndexCondition\n {\n public:\n     MergeTreeIndexConditionMinMax(\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexSet.h b/src/Storages/MergeTree/MergeTreeIndexSet.h\nindex d84991f5e858..90389264d533 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexSet.h\n+++ b/src/Storages/MergeTree/MergeTreeIndexSet.h\n@@ -14,7 +14,7 @@ namespace DB\n \n class MergeTreeIndexSet;\n \n-struct MergeTreeIndexGranuleSet : public IMergeTreeIndexGranule\n+struct MergeTreeIndexGranuleSet final : public IMergeTreeIndexGranule\n {\n     explicit MergeTreeIndexGranuleSet(\n         const String & index_name_,\n@@ -42,7 +42,7 @@ struct MergeTreeIndexGranuleSet : public IMergeTreeIndexGranule\n };\n \n \n-struct MergeTreeIndexAggregatorSet : IMergeTreeIndexAggregator\n+struct MergeTreeIndexAggregatorSet final : IMergeTreeIndexAggregator\n {\n     explicit MergeTreeIndexAggregatorSet(\n         const String & index_name_,\n@@ -79,7 +79,7 @@ struct MergeTreeIndexAggregatorSet : IMergeTreeIndexAggregator\n };\n \n \n-class MergeTreeIndexConditionSet : public IMergeTreeIndexCondition\n+class MergeTreeIndexConditionSet final : public IMergeTreeIndexCondition\n {\n public:\n     MergeTreeIndexConditionSet(\n@@ -113,7 +113,7 @@ class MergeTreeIndexConditionSet : public IMergeTreeIndexCondition\n };\n \n \n-class MergeTreeIndexSet : public IMergeTreeIndex\n+class MergeTreeIndexSet final : public IMergeTreeIndex\n {\n public:\n     MergeTreeIndexSet(\n",
  "test_patch": "diff --git a/src/Storages/tests/gtest_SplitTokenExtractor.cpp b/src/Storages/tests/gtest_SplitTokenExtractor.cpp\nindex b5a26c9cd8ea..ee6a55f50b88 100644\n--- a/src/Storages/tests/gtest_SplitTokenExtractor.cpp\n+++ b/src/Storages/tests/gtest_SplitTokenExtractor.cpp\n@@ -61,12 +61,12 @@ TEST_P(SplitTokenExtractorTest, next)\n     for (const auto & expected_token : param.tokens)\n     {\n         SCOPED_TRACE(++i);\n-        ASSERT_TRUE(token_extractor.next(data->data(), data->size(), &pos, &token_start, &token_len));\n+        ASSERT_TRUE(token_extractor.nextInColumn(data->data(), data->size(), &pos, &token_start, &token_len));\n \n         EXPECT_EQ(expected_token, std::string_view(data->data() + token_start, token_len))\n                 << \" token_start:\" << token_start << \" token_len: \" << token_len;\n     }\n-    ASSERT_FALSE(token_extractor.next(data->data(), data->size(), &pos, &token_start, &token_len))\n+    ASSERT_FALSE(token_extractor.nextInColumn(data->data(), data->size(), &pos, &token_start, &token_len))\n             << \"\\n\\t=> \\\"\" << param.source.substr(token_start, token_len) << \"\\\"\"\n             << \"\\n\\t\" << token_start << \", \" << token_len << \", \" << pos << \", \" << data->size();\n }\ndiff --git a/tests/queries/0_stateless/01781_token_extractor_buffer_overflow.reference b/tests/queries/0_stateless/01781_token_extractor_buffer_overflow.reference\nnew file mode 100644\nindex 000000000000..aa47d0d46d47\n--- /dev/null\n+++ b/tests/queries/0_stateless/01781_token_extractor_buffer_overflow.reference\n@@ -0,0 +1,2 @@\n+0\n+0\ndiff --git a/tests/queries/0_stateless/01781_token_extractor_buffer_overflow.sql b/tests/queries/0_stateless/01781_token_extractor_buffer_overflow.sql\nnew file mode 100644\nindex 000000000000..4cc216955b32\n--- /dev/null\n+++ b/tests/queries/0_stateless/01781_token_extractor_buffer_overflow.sql\n@@ -0,0 +1,10 @@\n+SET max_block_size = 10, min_insert_block_size_rows = 0, min_insert_block_size_bytes = 0, max_threads = 20;\n+\n+DROP TABLE IF EXISTS bloom_filter;\n+CREATE TABLE bloom_filter (`id` UInt64, `s` String, INDEX tok_bf (s, lower(s)) TYPE tokenbf_v1(512, 3, 0) GRANULARITY 1) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8;\n+INSERT INTO bloom_filter SELECT number, 'yyy,uuu' FROM numbers(1024);\n+\n+SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'abc');\n+SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'abcabcabcabcabcabcabcab\\0');\n+\n+DROP TABLE bloom_filter;\n",
  "problem_statement": "Buffer overflow is possible in token bloom filter full text index.\nhttps://clickhouse-test-reports.s3.yandex.net/19186/712bef8eef6912dc317e63a6e2e54d6c2d6cad7e/fuzzer_asan/server.log\r\n\r\n```\r\n2021.01.18 01:55:15.156623 [ 142 ] {} <Fatal> BaseDaemon: 6. ./obj-x86_64-linux-gnu/../src/Storages/MergeTree/MergeTreeIndexFullText.cpp:721: DB::SplitTokenExtractor::next(char const*, unsigned long, unsigned long*, unsigned long*, unsigned long*) const @ 0x1fc57a20 in /workspace/clickhouse\r\n2021.01.18 01:55:15.157650 [ 142 ] {} <Fatal> BaseDaemon: 7. ./obj-x86_64-linux-gnu/../src/Storages/MergeTree/MergeTreeIndexFullText.cpp:51: DB::stringToBloomFilter(char const*, unsigned long, DB::ITokenExtractor const*, DB::BloomFilter&) @ 0x1fc4ad84 in /workspace/clickhouse\r\n```\n",
  "hints_text": "CC @Enmk \nhttps://clickhouse-test-reports.s3.yandex.net/19862/e23dc60e31f5856b4b8f910fdbaba6b885b715d1/fuzzer_asan/server.log\nThe bug introduced here: #9968\nSomething is really wrong with this index: https://clickhouse-test-reports.s3.yandex.net/22411/5cd1dc485fbc5b8767f76e3abbb81c63218a6532/fuzzer_tsan/report.html#fail1\r\n",
  "created_at": "2021-04-01T02:41:18Z"
}