diff --git a/tests/queries/0_stateless/01475_read_subcolumns.reference b/tests/queries/0_stateless/01475_read_subcolumns.reference
new file mode 100644
index 000000000000..336c11fe775c
--- /dev/null
+++ b/tests/queries/0_stateless/01475_read_subcolumns.reference
@@ -0,0 +1,21 @@
+====array====
+1
+0
+3
+2
+2
+====tuple====
+foo
+bar
+baz
+1
+2
+42
+2
+2
+====nullable====
+0
+1
+0
+1
+2
diff --git a/tests/queries/0_stateless/01475_read_subcolumns.sql b/tests/queries/0_stateless/01475_read_subcolumns.sql
new file mode 100644
index 000000000000..06b2d3795def
--- /dev/null
+++ b/tests/queries/0_stateless/01475_read_subcolumns.sql
@@ -0,0 +1,44 @@
+SELECT '====array====';
+DROP TABLE IF EXISTS t_arr;
+CREATE TABLE t_arr (a Array(UInt32)) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0;
+INSERT INTO t_arr VALUES ([1]) ([]) ([1, 2, 3]) ([1, 2]);
+
+SYSTEM DROP MARK CACHE;
+SELECT a.size0 FROM t_arr;
+
+SYSTEM FLUSH LOGS;
+SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]
+FROM system.query_log
+WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT a.size0 FROM %t_arr%'))
+    AND event_time > now() - INTERVAL 10 SECOND AND current_database = currentDatabase();
+
+SELECT '====tuple====';
+DROP TABLE IF EXISTS t_tup;
+CREATE TABLE t_tup (t Tuple(s String, u UInt32)) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0;
+INSERT INTO t_tup VALUES (('foo', 1)) (('bar', 2)) (('baz', 42));
+
+SYSTEM DROP MARK CACHE;
+SELECT t.s FROM t_tup;
+
+SYSTEM DROP MARK CACHE;
+SELECT t.u FROM t_tup;
+
+SYSTEM FLUSH LOGS;
+SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]
+FROM system.query_log
+WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT t._ FROM %t_tup%'))
+    AND event_time > now() - INTERVAL 10 SECOND AND current_database = currentDatabase();
+
+SELECT '====nullable====';
+DROP TABLE IF EXISTS t_nul;
+CREATE TABLE t_nul (n Nullable(UInt32)) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0;
+INSERT INTO t_nul VALUES (1) (NULL) (2) (NULL);
+
+SYSTEM DROP MARK CACHE;
+SELECT n.null FROM t_nul;
+
+SYSTEM FLUSH LOGS;
+SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]
+FROM system.query_log
+WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT n.null FROM %t_nul%'))
+    AND event_time > now() - INTERVAL 10 SECOND AND current_database = currentDatabase();
diff --git a/tests/queries/0_stateless/01475_read_subcolumns_2.reference b/tests/queries/0_stateless/01475_read_subcolumns_2.reference
new file mode 100644
index 000000000000..31c929a91330
--- /dev/null
+++ b/tests/queries/0_stateless/01475_read_subcolumns_2.reference
@@ -0,0 +1,10 @@
+([1,NULL],2,'a')	['foo',NULL,'bar']	[['123'],['456','789']]	qqqq	['zzz','xxx']	[42,43]
+[1,NULL]	2	a	['zzz','xxx']	[42,43]	qqqq
+2	[0,1]	2	a	0
+1	3
+[['123'],['456','789']]	2	[1,2]	[[0],[0,0]]
+([1,NULL],2,'a')	['foo',NULL,'bar']	[['123'],['456','789']]	qqqq	['zzz','xxx']	[42,43]
+[1,NULL]	2	a	['zzz','xxx']	[42,43]	qqqq
+2	[0,1]	2	a	0
+1	3
+[['123'],['456','789']]	2	[1,2]	[[0],[0,0]]
diff --git a/tests/queries/0_stateless/01475_read_subcolumns_2.sql b/tests/queries/0_stateless/01475_read_subcolumns_2.sql
new file mode 100644
index 000000000000..b8959cf27f7a
--- /dev/null
+++ b/tests/queries/0_stateless/01475_read_subcolumns_2.sql
@@ -0,0 +1,49 @@
+DROP TABLE IF EXISTS subcolumns;
+
+CREATE TABLE subcolumns
+(
+    t Tuple
+    (
+        a Array(Nullable(UInt32)),
+        u UInt32,
+        s Nullable(String)
+    ),
+    arr Array(Nullable(String)),
+    arr2 Array(Array(Nullable(String))),
+    lc LowCardinality(String),
+    nested Nested(col1 String, col2 Nullable(UInt32))
+) 
+ENGINE = MergeTree order by tuple() SETTINGS min_bytes_for_wide_part = '10M';
+
+INSERT INTO subcolumns VALUES (([1, NULL], 2, 'a'), ['foo', NULL, 'bar'], [['123'], ['456', '789']], 'qqqq', ['zzz', 'xxx'], [42, 43]);
+SELECT * FROM subcolumns;
+SELECT t.a, t.u, t.s, nested.col1, nested.col2, lc FROM subcolumns;
+SELECT t.a.size0, t.a.null, t.u, t.s, t.s.null FROM subcolumns;
+SELECT sumArray(arr.null), sum(arr.size0) FROM subcolumns;
+SELECT arr2, arr2.size0, arr2.size1, arr2.null FROM subcolumns;
+-- SELECT nested.col1, nested.col2, nested.col1.size0, nested.col2.size0, nested.col2.null FROM subcolumns;
+
+DROP TABLE IF EXISTS subcolumns;
+
+CREATE TABLE subcolumns
+(
+    t Tuple
+    (
+        a Array(Nullable(UInt32)),
+        u UInt32,
+        s Nullable(String)
+    ),
+    arr Array(Nullable(String)),
+    arr2 Array(Array(Nullable(String))),
+    lc LowCardinality(String),
+    nested Nested(col1 String, col2 Nullable(UInt32))
+) 
+ENGINE = MergeTree order by tuple() SETTINGS min_bytes_for_wide_part = 0;
+
+INSERT INTO subcolumns VALUES (([1, NULL], 2, 'a'), ['foo', NULL, 'bar'], [['123'], ['456', '789']], 'qqqq', ['zzz', 'xxx'], [42, 43]);
+SELECT * FROM subcolumns;
+SELECT t.a, t.u, t.s, nested.col1, nested.col2, lc FROM subcolumns;
+SELECT t.a.size0, t.a.null, t.u, t.s, t.s.null FROM subcolumns;
+SELECT sumArray(arr.null), sum(arr.size0) FROM subcolumns;
+SELECT arr2, arr2.size0, arr2.size1, arr2.null FROM subcolumns;
+-- SELECT nested.col1, nested.col2, nested.size0, nested.size0, nested.col2.null FROM subcolumns;
diff --git a/tests/queries/0_stateless/01475_read_subcolumns_storages.reference b/tests/queries/0_stateless/01475_read_subcolumns_storages.reference
new file mode 100644
index 000000000000..f848977a55d2
--- /dev/null
+++ b/tests/queries/0_stateless/01475_read_subcolumns_storages.reference
@@ -0,0 +1,18 @@
+Log
+100	[1,2,3]	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	[1,NULL,2]	('foo',200)
+100	0	[1,2,3]	3	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	3	[3,2,1]	[[2,0,1],[2,2],[0]]	[1,NULL,2]	3	[0,1,0]	('foo',200)	foo	200
+TinyLog
+100	[1,2,3]	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	[1,NULL,2]	('foo',200)
+100	0	[1,2,3]	3	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	3	[3,2,1]	[[2,0,1],[2,2],[0]]	[1,NULL,2]	3	[0,1,0]	('foo',200)	foo	200
+Memory
+100	[1,2,3]	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	[1,NULL,2]	('foo',200)
+100	0	[1,2,3]	3	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	3	[3,2,1]	[[2,0,1],[2,2],[0]]	[1,NULL,2]	3	[0,1,0]	('foo',200)	foo	200
+MergeTree ORDER BY tuple() SETTINGS min_bytes_for_compact_part='10M'
+100	[1,2,3]	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	[1,NULL,2]	('foo',200)
+100	0	[1,2,3]	3	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	3	[3,2,1]	[[2,0,1],[2,2],[0]]	[1,NULL,2]	3	[0,1,0]	('foo',200)	foo	200
+MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part='10M'
+100	[1,2,3]	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	[1,NULL,2]	('foo',200)
+100	0	[1,2,3]	3	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	3	[3,2,1]	[[2,0,1],[2,2],[0]]	[1,NULL,2]	3	[0,1,0]	('foo',200)	foo	200
+MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part=0
+100	[1,2,3]	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	[1,NULL,2]	('foo',200)
+100	0	[1,2,3]	3	[[[1,2],[],[4]],[[5,6],[7,8]],[[]]]	3	[3,2,1]	[[2,0,1],[2,2],[0]]	[1,NULL,2]	3	[0,1,0]	('foo',200)	foo	200
diff --git a/tests/queries/0_stateless/01475_read_subcolumns_storages.sh b/tests/queries/0_stateless/01475_read_subcolumns_storages.sh
new file mode 100755
index 000000000000..54cd0c073b27
--- /dev/null
+++ b/tests/queries/0_stateless/01475_read_subcolumns_storages.sh
@@ -0,0 +1,25 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+set -e
+
+create_query="CREATE TABLE subcolumns(n Nullable(UInt32), a1 Array(UInt32),\
+    a2 Array(Array(Array(UInt32))), a3 Array(Nullable(UInt32)), t Tuple(s String, v UInt32))"
+
+# "StripeLog"
+declare -a ENGINES=("Log" "TinyLog" "Memory" \
+    "MergeTree ORDER BY tuple() SETTINGS min_bytes_for_compact_part='10M'" \
+    "MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part='10M'" \
+    "MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part=0")
+
+for engine in "${ENGINES[@]}"; do
+    echo $engine
+    $CLICKHOUSE_CLIENT --query "DROP TABLE IF EXISTS subcolumns"
+    $CLICKHOUSE_CLIENT --query "$create_query ENGINE = $engine"
+    $CLICKHOUSE_CLIENT --query "INSERT INTO subcolumns VALUES (100, [1, 2, 3], [[[1, 2], [], [4]], [[5, 6], [7, 8]], [[]]], [1, NULL, 2], ('foo', 200))"
+    $CLICKHOUSE_CLIENT --query "SELECT * FROM subcolumns"
+    $CLICKHOUSE_CLIENT --query "SELECT n, n.null, a1, a1.size0, a2, a2.size0, a2.size1, a2.size2, a3, a3.size0, a3.null, t, t.s, t.v FROM subcolumns"
+done
diff --git a/tests/queries/0_stateless/01533_multiple_nested.reference b/tests/queries/0_stateless/01533_multiple_nested.reference
new file mode 100644
index 000000000000..ba37ce1c32ce
--- /dev/null
+++ b/tests/queries/0_stateless/01533_multiple_nested.reference
@@ -0,0 +1,40 @@
+all
+[(1,'q'),(2,'w'),(3,'e')]	[(4,[('a',5),('s',6),('d',7)])]	[([(8,9),(10,11)],[('z','x'),('c','v')])]
+[(12,'qq')]	[(4,[]),(5,[('b',6),('n',7)])]	[([],[]),([(44,55),(66,77)],[])]
+col1
+[1,2,3]	['q','w','e']
+[12]	['qq']
+col2
+[4]	[[('a',5),('s',6),('d',7)]]	[['a','s','d']]	[[5,6,7]]
+[4,5]	[[],[('b',6),('n',7)]]	[[],['b','n']]	[[],[6,7]]
+col3
+[[(8,9),(10,11)]]	[[('z','x'),('c','v')]]	[[8,10]]	[[9,11]]	[['z','c']]	[['x','v']]
+[[],[(44,55),(66,77)]]	[[],[]]	[[],[44,66]]	[[],[55,77]]	[[],[]]	[[],[]]
+read files
+4
+6
+0	899984	7199412
+1	899987	7199877
+2	899990	7200255
+3	899993	7199883
+4	899996	7199798
+5	899999	7200306
+6	900002	7200064
+7	900005	7199429
+8	900008	7200067
+9	899992	7199993
+0	[]
+0	[0]
+1	[0,2]
+3	[0,2,8]
+6	[0,2,8,18]
+2	3
+0	2
+2	3
+4	4
+0	0
+0	1
+0	2
+0	3
+0	1
+1	2
diff --git a/tests/queries/0_stateless/01533_multiple_nested.sql b/tests/queries/0_stateless/01533_multiple_nested.sql
new file mode 100644
index 000000000000..6374d6fca21d
--- /dev/null
+++ b/tests/queries/0_stateless/01533_multiple_nested.sql
@@ -0,0 +1,66 @@
+DROP TABLE IF EXISTS nested;
+
+SET flatten_nested = 0;
+
+CREATE TABLE nested
+(
+    col1 Nested(a UInt32, s String),
+    col2 Nested(a UInt32, n Nested(s String, b UInt32)),
+    col3 Nested(n1 Nested(a UInt32, b UInt32), n2 Nested(s String, t String))
+)
+ENGINE = MergeTree 
+ORDER BY tuple()
+SETTINGS min_bytes_for_wide_part = 0;
+
+INSERT INTO nested VALUES ([(1, 'q'), (2, 'w'), (3, 'e')], [(4, [('a', 5), ('s', 6), ('d', 7)])], [([(8, 9), (10, 11)], [('z', 'x'), ('c', 'v')])]);
+INSERT INTO nested VALUES ([(12, 'qq')], [(4, []), (5, [('b', 6), ('n', 7)])], [([], []), ([(44, 55), (66, 77)], [])]);
+
+OPTIMIZE TABLE nested FINAL;
+
+SELECT 'all';
+SELECT * FROM nested;
+SELECT 'col1';
+SELECT col1.a, col1.s FROM nested;
+SELECT 'col2';
+SELECT col2.a, col2.n, col2.n.s, col2.n.b FROM nested;
+SELECT 'col3';
+SELECT col3.n1, col3.n2, col3.n1.a, col3.n1.b, col3.n2.s, col3.n2.t FROM nested;
+
+SELECT 'read files';
+
+SYSTEM DROP MARK CACHE;
+SELECT col1.a FROM nested FORMAT Null;
+
+-- 4 files: (col1.size0, col1.a) x2
+SYSTEM FLUSH LOGS;
+SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]
+FROM system.query_log
+WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT col1.a FROM %nested%'))
+    AND event_time > now() - INTERVAL 10 SECOND AND current_database = currentDatabase();
+
+SYSTEM DROP MARK CACHE;
+SELECT col3.n2.s FROM nested FORMAT Null;
+
+-- 6 files: (col3.size0, col3.n2.size1, col3.n2.s) x2
+SYSTEM FLUSH LOGS;
+SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]
+FROM system.query_log
+WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT col3.n2.s FROM %nested%'))
+    AND event_time > now() - INTERVAL 10 SECOND AND current_database = currentDatabase();
+
+DROP TABLE nested;
+
+CREATE TABLE nested
+(
+    id UInt32,
+    col1 Nested(a UInt32, n Nested(s String, b UInt32))
+)
+ENGINE = MergeTree 
+ORDER BY id
+SETTINGS min_bytes_for_wide_part = 0;
+
+INSERT INTO nested SELECT number, arrayMap(x -> (x, arrayMap(y -> (toString(y * x), y + x), range(number % 17))), range(number % 19)) FROM numbers(1000000);
+SELECT id % 10, sum(length(col1)), sumArray(arrayMap(x -> length(x), col1.n.b)) FROM nested GROUP BY id % 10;
+
+SELECT arraySum(col1.a), arrayMap(x -> x * x * 2, col1.a) FROM nested ORDER BY id LIMIT 5;
+SELECT untuple(arrayJoin(arrayJoin(col1.n))) FROM nested ORDER BY id LIMIT 10 OFFSET 10;
diff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json
index cfbac4639329..c2e8d1263f19 100644
--- a/tests/queries/skip_list.json
+++ b/tests/queries/skip_list.json
@@ -309,7 +309,8 @@
         "01632_max_partitions_to_read",
         "01638_div_mod_ambiguities",
         "01642_if_nullable_regression",
-        "01643_system_suspend"
+        "01643_system_suspend",
+        "01475_read_subcolumns_storages"
     ],
     "parallel":
     [
