{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40642,
  "instance_id": "ClickHouse__ClickHouse-40642",
  "issue_numbers": [
    "40639"
  ],
  "base_commit": "c9dea66f8d37c13e27678eeeec246c6a97e40e67",
  "patch": "diff --git a/src/Databases/SQLite/fetchSQLiteTableStructure.cpp b/src/Databases/SQLite/fetchSQLiteTableStructure.cpp\nindex 32341a36f3e3..e920ccf3c1c2 100644\n--- a/src/Databases/SQLite/fetchSQLiteTableStructure.cpp\n+++ b/src/Databases/SQLite/fetchSQLiteTableStructure.cpp\n@@ -35,9 +35,9 @@ static DataTypePtr convertSQLiteDataType(String type)\n         res = std::make_shared<DataTypeInt8>();\n     else if (type == \"smallint\")\n         res = std::make_shared<DataTypeInt16>();\n-    else if (type.starts_with(\"int\") || type == \"mediumint\")\n+    else if ((type.starts_with(\"int\") && type != \"int8\") || type == \"mediumint\")\n         res = std::make_shared<DataTypeInt32>();\n-    else if (type == \"bigint\")\n+    else if (type == \"bigint\" || type == \"int8\")\n         res = std::make_shared<DataTypeInt64>();\n     else if (type == \"float\")\n         res = std::make_shared<DataTypeFloat32>();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01889_sqlite_read_write.reference b/tests/queries/0_stateless/01889_sqlite_read_write.reference\nindex e979b5816c5c..d6b1e6f41c1c 100644\n--- a/tests/queries/0_stateless/01889_sqlite_read_write.reference\n+++ b/tests/queries/0_stateless/01889_sqlite_read_write.reference\n@@ -21,7 +21,7 @@ line3\t3\n 2\ttext2\n 3\ttext3\n test types\n-CREATE TABLE SQLite.table4\\n(\\n    `a` Nullable(Int32),\\n    `b` Nullable(Int32),\\n    `c` Nullable(Int8),\\n    `d` Nullable(Int16),\\n    `e` Nullable(Int32),\\n    `bigint` Nullable(String),\\n    `int2` Nullable(String),\\n    `int8` Nullable(String)\\n)\\nENGINE = SQLite\n+CREATE TABLE SQLite.table4\\n(\\n    `a` Nullable(Int32),\\n    `b` Nullable(Int32),\\n    `c` Nullable(Int8),\\n    `d` Nullable(Int16),\\n    `e` Nullable(Int32),\\n    `f` Nullable(Int64),\\n    `g` Nullable(Int32),\\n    `h` Nullable(Int64)\\n)\\nENGINE = SQLite\n CREATE TABLE SQLite.table5\\n(\\n    `a` Nullable(String),\\n    `b` Nullable(String),\\n    `c` Nullable(Float64),\\n    `d` Nullable(Float64),\\n    `e` Nullable(Float64),\\n    `f` Nullable(Float32)\\n)\\nENGINE = SQLite\n create table engine with table3\n CREATE TABLE default.sqlite_table3\\n(\\n    `col1` String,\\n    `col2` Int32\\n)\\nENGINE = SQLite\ndiff --git a/tests/queries/0_stateless/01889_sqlite_read_write.sh b/tests/queries/0_stateless/01889_sqlite_read_write.sh\nindex fc87aa08fa7e..e732155dbcc0 100755\n--- a/tests/queries/0_stateless/01889_sqlite_read_write.sh\n+++ b/tests/queries/0_stateless/01889_sqlite_read_write.sh\n@@ -42,7 +42,7 @@ sqlite3 \"${DB_PATH}\" \"INSERT INTO table3 VALUES ('not a null', 2)\"\n sqlite3 \"${DB_PATH}\" 'INSERT INTO table3 VALUES (NULL, 3)'\n sqlite3 \"${DB_PATH}\" \"INSERT INTO table3 VALUES ('', 4)\"\n \n-sqlite3 \"${DB_PATH}\" 'CREATE TABLE table4 (a int, b integer, c tinyint, d smallint, e mediumint, bigint, int2, int8)'\n+sqlite3 \"${DB_PATH}\" 'CREATE TABLE table4 (a int, b integer, c tinyint, d smallint, e mediumint, f bigint, g int2, h int8)'\n sqlite3 \"${DB_PATH}\" 'CREATE TABLE table5 (a character(20), b varchar(10), c real, d double, e double precision, f float)'\n \n \n",
  "problem_statement": "SQLite int8 column type conversion\n**Describe what's wrong**\r\n\r\nSQLite's `int8` column (8 bytes) gets read as `int32` column in ClickHouse. Large integers overflow as a result.\r\n\r\n\r\n**Does it reproduce on recent release?**\r\n\r\n```\r\nclickhouse server --version\r\nClickHouse server version 22.9.1.404 (official build).\r\n```\r\n\r\n**How to reproduce**\r\n\r\nTo reproduce:\r\n```sh\r\n# create a table with sqlite\r\nsqlite3 test.sqlite\r\nsqlite> CREATE TABLE test (int8col int8);\r\nsqlite> INSERT INTO test VALUES (2147483648);\r\nsqlite> SELECT * FROM test;\r\n2147483648\r\n\r\n# query test.sqlite from ClickHouse\r\nSELECT * FROM sqlite('test.sqlite', 'test');\r\n> int8col\r\n> -2147483648\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe column should be inferred as int64 column and read the original value without overflow.\r\n\r\n\r\n**Additional context**\r\n\r\nThe issue seems to be stemming from this line where any column starting with `int` is converted to `int32`.\r\nhttps://github.com/ClickHouse/ClickHouse/blob/master/src/Databases/SQLite/fetchSQLiteTableStructure.cpp#L38\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2022-08-25T20:19:14Z"
}