{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66206,
  "instance_id": "ClickHouse__ClickHouse-66206",
  "issue_numbers": [
    "66179"
  ],
  "base_commit": "7b712918ed46e11483348cf41195d6050e9374e8",
  "patch": "diff --git a/docs/en/operations/system-tables/metrics.md b/docs/en/operations/system-tables/metrics.md\nindex 83ce817b7dbf..f253b164e2a2 100644\n--- a/docs/en/operations/system-tables/metrics.md\n+++ b/docs/en/operations/system-tables/metrics.md\n@@ -357,7 +357,7 @@ Number of currently running inserts to Kafka\n \n Number of alive connections\n \n-### KeeperOutstandingRequets\n+### KeeperOutstandingRequests\n \n Number of outstanding requests\n \ndiff --git a/src/Common/CurrentMetrics.cpp b/src/Common/CurrentMetrics.cpp\nindex 8516a88c7afd..7c97e73f2784 100644\n--- a/src/Common/CurrentMetrics.cpp\n+++ b/src/Common/CurrentMetrics.cpp\n@@ -267,7 +267,7 @@\n     M(AsyncInsertCacheSize, \"Number of async insert hash id in cache\") \\\n     M(S3Requests, \"S3 requests count\") \\\n     M(KeeperAliveConnections, \"Number of alive connections\") \\\n-    M(KeeperOutstandingRequets, \"Number of outstanding requests\") \\\n+    M(KeeperOutstandingRequests, \"Number of outstanding requests\") \\\n     M(ThreadsInOvercommitTracker, \"Number of waiting threads inside of OvercommitTracker\") \\\n     M(IOUringPendingEvents, \"Number of io_uring SQEs waiting to be submitted\") \\\n     M(IOUringInFlightEvents, \"Number of io_uring SQEs in flight\") \\\ndiff --git a/src/Coordination/KeeperConstants.cpp b/src/Coordination/KeeperConstants.cpp\nindex b4241235cc74..7589e3393be8 100644\n--- a/src/Coordination/KeeperConstants.cpp\n+++ b/src/Coordination/KeeperConstants.cpp\n@@ -372,7 +372,7 @@ extern const std::vector<Event> keeper_profile_events\n     M(AsynchronousReadWait) \\\n     M(S3Requests) \\\n     M(KeeperAliveConnections) \\\n-    M(KeeperOutstandingRequets) \\\n+    M(KeeperOutstandingRequests) \\\n     M(ThreadsInOvercommitTracker) \\\n     M(IOUringPendingEvents) \\\n     M(IOUringInFlightEvents) \\\ndiff --git a/src/Coordination/KeeperDispatcher.cpp b/src/Coordination/KeeperDispatcher.cpp\nindex f36b1ef151f6..6f57fa6d2e2a 100644\n--- a/src/Coordination/KeeperDispatcher.cpp\n+++ b/src/Coordination/KeeperDispatcher.cpp\n@@ -28,7 +28,7 @@\n namespace CurrentMetrics\n {\n     extern const Metric KeeperAliveConnections;\n-    extern const Metric KeeperOutstandingRequets;\n+    extern const Metric KeeperOutstandingRequests;\n }\n \n namespace ProfileEvents\n@@ -139,7 +139,7 @@ void KeeperDispatcher::requestThread()\n         {\n             if (requests_queue->tryPop(request, max_wait))\n             {\n-                CurrentMetrics::sub(CurrentMetrics::KeeperOutstandingRequets);\n+                CurrentMetrics::sub(CurrentMetrics::KeeperOutstandingRequests);\n                 if (shutdown_called)\n                     break;\n \n@@ -171,7 +171,7 @@ void KeeperDispatcher::requestThread()\n                         /// Trying to get batch requests as fast as possible\n                         if (requests_queue->tryPop(request))\n                         {\n-                            CurrentMetrics::sub(CurrentMetrics::KeeperOutstandingRequets);\n+                            CurrentMetrics::sub(CurrentMetrics::KeeperOutstandingRequests);\n                             /// Don't append read request into batch, we have to process them separately\n                             if (!coordination_settings->quorum_reads && request.request->isReadRequest())\n                             {\n@@ -419,7 +419,7 @@ bool KeeperDispatcher::putRequest(const Coordination::ZooKeeperRequestPtr & requ\n     {\n         throw Exception(ErrorCodes::TIMEOUT_EXCEEDED, \"Cannot push request to queue within operation timeout\");\n     }\n-    CurrentMetrics::add(CurrentMetrics::KeeperOutstandingRequets);\n+    CurrentMetrics::add(CurrentMetrics::KeeperOutstandingRequests);\n     return true;\n }\n \n@@ -543,7 +543,7 @@ void KeeperDispatcher::shutdown()\n         /// Set session expired for all pending requests\n         while (requests_queue && requests_queue->tryPop(request_for_session))\n         {\n-            CurrentMetrics::sub(CurrentMetrics::KeeperOutstandingRequets);\n+            CurrentMetrics::sub(CurrentMetrics::KeeperOutstandingRequests);\n             auto response = request_for_session.request->makeResponse();\n             response->error = Coordination::Error::ZSESSIONEXPIRED;\n             setResponse(request_for_session.session_id, response);\n@@ -670,7 +670,7 @@ void KeeperDispatcher::sessionCleanerTask()\n                     };\n                     if (!requests_queue->push(std::move(request_info)))\n                         LOG_INFO(log, \"Cannot push close request to queue while cleaning outdated sessions\");\n-                    CurrentMetrics::add(CurrentMetrics::KeeperOutstandingRequets);\n+                    CurrentMetrics::add(CurrentMetrics::KeeperOutstandingRequests);\n \n                     /// Remove session from registered sessions\n                     finishSession(dead_session);\n@@ -794,7 +794,7 @@ int64_t KeeperDispatcher::getSessionID(int64_t session_timeout_ms)\n     /// Push new session request to queue\n     if (!requests_queue->tryPush(std::move(request_info), session_timeout_ms))\n         throw Exception(ErrorCodes::TIMEOUT_EXCEEDED, \"Cannot push session id request to queue within session timeout\");\n-    CurrentMetrics::add(CurrentMetrics::KeeperOutstandingRequets);\n+    CurrentMetrics::add(CurrentMetrics::KeeperOutstandingRequests);\n \n     if (future.wait_for(std::chrono::milliseconds(session_timeout_ms)) != std::future_status::ready)\n         throw Exception(ErrorCodes::TIMEOUT_EXCEEDED, \"Cannot receive session id within session timeout\");\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 02bc520743f7..cbda66b7bf95 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -449,7 +449,7 @@ Kahan\n Kaser\n KeeperAliveConnections\n KeeperMap\n-KeeperOutstandingRequets\n+KeeperOutstandingRequests\n Kerberos\n Khanna\n KittenHouse\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03201_query_cache_empty_tuple.reference b/tests/queries/0_stateless/02494_query_cache_empty_tuple.reference\nsimilarity index 100%\nrename from tests/queries/0_stateless/03201_query_cache_empty_tuple.reference\nrename to tests/queries/0_stateless/02494_query_cache_empty_tuple.reference\ndiff --git a/tests/queries/0_stateless/03201_query_cache_empty_tuple.sql b/tests/queries/0_stateless/02494_query_cache_empty_tuple.sql\nsimilarity index 100%\nrename from tests/queries/0_stateless/03201_query_cache_empty_tuple.sql\nrename to tests/queries/0_stateless/02494_query_cache_empty_tuple.sql\n",
  "problem_statement": "Typo on metric `ClickHouseMetrics_KeeperOutstandingRequets`\n**Describe what's wrong**\r\n\r\nThere is typo on metric `ClickHouseMetrics_KeeperOutstandingRequets` -> `ClickHouseMetrics_KeeperOutstandingRequests`. \r\n\r\nNote: Fixing this typo will introduce breaking change\r\n\r\nLocation: https://github.com/search?q=repo%3AClickHouse%2FClickHouse+KeeperOutstandingRequets&type=code\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-07-08T07:40:06Z"
}