{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 45191,
  "instance_id": "ClickHouse__ClickHouse-45191",
  "issue_numbers": [
    "45126"
  ],
  "base_commit": "cc352804df21ead58da20cdbe976b08b4ba05b7d",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreePartition.cpp b/src/Storages/MergeTree/MergeTreePartition.cpp\nindex 0fd081a84254..5d4b48538129 100644\n--- a/src/Storages/MergeTree/MergeTreePartition.cpp\n+++ b/src/Storages/MergeTree/MergeTreePartition.cpp\n@@ -5,6 +5,7 @@\n #include <Interpreters/Context.h>\n #include <Common/FieldVisitors.h>\n #include <DataTypes/DataTypeDate.h>\n+#include <DataTypes/DataTypeIPv4andIPv6.h>\n #include <DataTypes/DataTypeTuple.h>\n #include <Columns/ColumnTuple.h>\n #include <Common/SipHash.h>\n@@ -93,9 +94,7 @@ namespace\n         }\n         void operator() (const IPv6 & x) const\n         {\n-            UInt8 type = Field::Types::IPv6;\n-            hash.update(type);\n-            hash.update(x);\n+            return operator()(String(reinterpret_cast<const char *>(&x), 16));\n         }\n         void operator() (const Float64 & x) const\n         {\n@@ -213,7 +212,7 @@ String MergeTreePartition::getID(const Block & partition_key_sample) const\n     bool are_all_integral = true;\n     for (const Field & field : value)\n     {\n-        if (field.getType() != Field::Types::UInt64 && field.getType() != Field::Types::Int64)\n+        if (field.getType() != Field::Types::UInt64 && field.getType() != Field::Types::Int64 && field.getType() != Field::Types::IPv4)\n         {\n             are_all_integral = false;\n             break;\n@@ -232,6 +231,8 @@ String MergeTreePartition::getID(const Block & partition_key_sample) const\n \n             if (typeid_cast<const DataTypeDate *>(partition_key_sample.getByPosition(i).type.get()))\n                 result += toString(DateLUT::instance().toNumYYYYMMDD(DayNum(value[i].safeGet<UInt64>())));\n+            else if (typeid_cast<const DataTypeIPv4 *>(partition_key_sample.getByPosition(i).type.get()))\n+                result += toString(value[i].get<IPv4>().toUnderType());\n             else\n                 result += applyVisitor(to_string_visitor, value[i]);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02530_ip_part_id.reference b/tests/queries/0_stateless/02530_ip_part_id.reference\nnew file mode 100644\nindex 000000000000..a13e1bafdaa2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02530_ip_part_id.reference\n@@ -0,0 +1,2 @@\n+1.2.3.4\t::ffff:1.2.3.4\t16909060_1_1_0\n+1.2.3.4\t::ffff:1.2.3.4\t1334d7cc23ffb5a5c0262304b3313426_1_1_0\ndiff --git a/tests/queries/0_stateless/02530_ip_part_id.sql b/tests/queries/0_stateless/02530_ip_part_id.sql\nnew file mode 100644\nindex 000000000000..bf704eaa1c2f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02530_ip_part_id.sql\n@@ -0,0 +1,14 @@\n+DROP TABLE IF EXISTS ip_part_test;\n+\n+CREATE TABLE ip_part_test ( ipv4 IPv4, ipv6 IPv6 ) ENGINE = MergeTree PARTITION BY ipv4 ORDER BY ipv4 AS SELECT '1.2.3.4', '::ffff:1.2.3.4';\n+\n+SELECT *, _part FROM ip_part_test;\n+\n+DROP TABLE IF EXISTS ip_part_test;\n+\n+CREATE TABLE ip_part_test ( ipv4 IPv4, ipv6 IPv6 ) ENGINE = MergeTree PARTITION BY ipv6 ORDER BY ipv6 AS SELECT '1.2.3.4', '::ffff:1.2.3.4';\n+\n+SELECT *, _part FROM ip_part_test;\n+\n+DROP TABLE IF EXISTS ip_part_test;\n+\n",
  "problem_statement": "New ipv4 / ipv6 partition names\n```sql\r\ncreate table test ( ipv4 IPv4, ipv6 IPv6 ) Engine MergeTree partition by ipv4 order by ipv4 as select '1.2.3.4', '::ffff:1.2.3.4';\r\nselect *, _part from test;\r\n\r\n22.12\r\n\u250c\u2500ipv4\u2500\u2500\u2500\u2500\u252c\u2500ipv6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500_part\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 1.2.3.4 \u2502 ::ffff:1.2.3.4 \u2502 16909060_1_1_0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n22.13\r\n\u250c\u2500ipv4\u2500\u2500\u2500\u2500\u252c\u2500ipv6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500_part\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 1.2.3.4 \u2502 ::ffff:1.2.3.4 \u2502 bb9df6e3b66e8909ecb142a41a3e6323_1_1_0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n```sql\r\ncreate table test ( ipv4 IPv4, ipv6 IPv6 ) Engine MergeTree partition by ipv6 order by ipv6 as select '1.2.3.4', '::ffff:1.2.3.4';\r\nselect *, _part from test;\r\n\r\n22.12\r\n\u250c\u2500ipv4\u2500\u2500\u2500\u2500\u252c\u2500ipv6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500_part\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 1.2.3.4 \u2502 ::ffff:1.2.3.4 \u2502 1334d7cc23ffb5a5c0262304b3313426_1_1_0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n22.13\r\n\u250c\u2500ipv4\u2500\u2500\u2500\u2500\u252c\u2500ipv6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500_part\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 1.2.3.4 \u2502 ::ffff:1.2.3.4 \u2502 45c632749fb22384025ef5d0c817e71e_1_1_0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\n",
  "hints_text": "",
  "created_at": "2023-01-11T18:53:34Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreePartition.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02530_ip_part_id.reference",
    "b/tests/queries/0_stateless/02530_ip_part_id.sql"
  ]
}