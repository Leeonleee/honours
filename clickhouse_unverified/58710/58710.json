{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58710,
  "instance_id": "ClickHouse__ClickHouse-58710",
  "issue_numbers": [
    "57919"
  ],
  "base_commit": "495c7127137721665646f99414b0f85cd74470b2",
  "patch": "diff --git a/src/Parsers/queryNormalization.cpp b/src/Parsers/queryNormalization.cpp\nindex 416e86b1f323..4a9dd8ceb983 100644\n--- a/src/Parsers/queryNormalization.cpp\n+++ b/src/Parsers/queryNormalization.cpp\n@@ -167,6 +167,8 @@ void normalizeQueryToPODArray(const char * begin, const char * end, PaddedPODArr\n                 continue;\n             }\n         }\n+        else if (prev_comma && (token.type == TokenType::Plus || token.type == TokenType::Minus))\n+            continue;\n         else\n         {\n             if (num_literals_in_sequence > 1)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01451_normalize_query.reference b/tests/queries/0_stateless/01451_normalize_query.reference\nindex 339ad34ea775..b331e139dc4b 100644\n--- a/tests/queries/0_stateless/01451_normalize_query.reference\n+++ b/tests/queries/0_stateless/01451_normalize_query.reference\n@@ -23,3 +23,23 @@ SELECT ?..\n SELECT ? xyz11\n SELECT ?, xyz11\n SELECT ?..\n+? - ?\n+?..\n+-?..\n+? - ?..\n+f(-?..)\n+[-?..]\n+? + ?\n+?..\n+-?..\n+? + ?..\n+f(+?..)\n+[+?..]\n+?.. + ?\n+?.. - ?..\n+f(+?..), ?\n+[+?..] - ?\n+-?.. - [+?..] - ?\n+(+?..) - ?\n+-?.. - (+?..) - ?\n+(+?..)\ndiff --git a/tests/queries/0_stateless/01451_normalize_query.sql b/tests/queries/0_stateless/01451_normalize_query.sql\nindex 3c01a9757128..14c74d950198 100644\n--- a/tests/queries/0_stateless/01451_normalize_query.sql\n+++ b/tests/queries/0_stateless/01451_normalize_query.sql\n@@ -23,4 +23,23 @@ SELECT normalizeQuery('SELECT 1, ''xyz11''');\n SELECT normalizeQuery('SELECT $doc$VALUE$doc$ xyz11');\n SELECT normalizeQuery('SELECT $doc$VALUE$doc$, xyz11');\n SELECT normalizeQuery('SELECT $doc$VALUE$doc$, ''xyz11''');\n-\n+SELECT normalizeQuery('1 - 2');\n+SELECT normalizeQuery('1, -2, 3');\n+SELECT normalizeQuery('-1, -2, 3');\n+SELECT normalizeQuery('1 - 2, 3, 4');\n+SELECT normalizeQuery('f(-2, 3)');\n+SELECT normalizeQuery('[-1, 2, 3]');\n+SELECT normalizeQuery('1 + 2');\n+SELECT normalizeQuery('1, +2, 3');\n+SELECT normalizeQuery('-1, +2, 3');\n+SELECT normalizeQuery('1 + 2, 3, 4');\n+SELECT normalizeQuery('f(+2, 3)');\n+SELECT normalizeQuery('[+1, 2, 3]');\n+SELECT normalizeQuery('1, 2, 3 + 4');\n+SELECT normalizeQuery('1, 2 - 3, 4');\n+SELECT normalizeQuery('f(+2, 3), 1');\n+SELECT normalizeQuery('[+1, 2, 3] - 1');\n+SELECT normalizeQuery('-1, 1 - [+1, 2, 3] - 1');\n+SELECT normalizeQuery('(+1, 2, 3) - 1');\n+SELECT normalizeQuery('-1, 1 - (+1, 2, 3) - 1');\n+SELECT normalizeQuery('(+1, 2, -3)');\n",
  "problem_statement": "`normalizeQuery` and negative numeric literals\n**Describe the unexpected behaviour**\r\n\r\n... aren't normalized properly:\r\n```\r\nSELECT normalizeQuery('SELECT 1111, 222, -333, 444, -555, -666')\r\n\r\n\u250c\u2500normalizeQuery('SELECT 1111, 222, -333, 444, -555, -666')\u2500\u2510\r\n\u2502 SELECT ?.., -?.., -?, -?                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\n",
  "hints_text": "How should we deal with edge cases like \r\n```\r\nSELECT normalizeQuery('SELECT 1111, 222, -333, 444, -555, -666, -4 + number + 5 + 5, -65')\r\n```\r\nshould it be\r\n```\r\nSELECT ?.., number, ?..\r\n```\r\nor\r\n\r\n```\r\nSELECT ?.., ? + number + ?.., ?\r\n```\r\nor\r\n```\r\nSELECT ?.., number + ?.., ?\r\n```\r\netc\r\n\n@aiven-sal, I tried to implement it and also found this difficult.\r\nWe can do a half-ways solution when a negative number is normalized only if it goes in a list after another number.\r\n\r\nExample:\r\n`1 - 2` -> `? - ?`\r\n`1, -2, 3` -> `?..`\r\n`-1, -2, 3` -> `-?..`\r\n`1 - 2, 3, 4` -> `? - ?..`\r\n`f(-2, 3)` -> `f(-?..)`\r\n\r\nThis is non-ideal, but ok for the purposes.\nAlternatively, we can stop normalizing arbitrary sequences of literals, but do it only inside parentheses:\r\n\r\n`SELECT 1, 2, -3` -> `SELECT ?, ?, -?`\r\n`SELECT [-1, 2, 3]` -> `SELECT [?..]`\r\n`SELECT f(-1, 2 - 3, 4)` -> `SELECT f(?.. - ?, ?)`\r\n\r\nAs you see, both are non-ideal. But we want to do it with a Lexer only. This is an excuse :)",
  "created_at": "2024-01-11T10:22:41Z"
}