{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34916,
  "instance_id": "ClickHouse__ClickHouse-34916",
  "issue_numbers": [
    "34531"
  ],
  "base_commit": "2c2b288b442a261532fec5039d097592f863b291",
  "patch": "diff --git a/docs/en/interfaces/http.md b/docs/en/interfaces/http.md\nindex d72fb4d6f176..6c33c130cb41 100644\n--- a/docs/en/interfaces/http.md\n+++ b/docs/en/interfaces/http.md\n@@ -425,7 +425,7 @@ Now `rule` can configure `method`, `headers`, `url`, `handler`:\n \n     -   `status` \u2014 use with `static` type, response status code.\n \n-    -   `content_type` \u2014 use with `static` type, response [content-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type).\n+    -   `content_type` \u2014 use with any type, response [content-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type).\n \n     -   `response_content` \u2014 use with `static` type, response content sent to client, when using the prefix \u2018file://\u2019 or \u2018config://\u2019, find the content from the file or configuration sends to client.\n \ndiff --git a/docs/ru/interfaces/http.md b/docs/ru/interfaces/http.md\nindex 8687201e1c98..4c1368e65fb9 100644\n--- a/docs/ru/interfaces/http.md\n+++ b/docs/ru/interfaces/http.md\n@@ -410,7 +410,7 @@ $ curl -v 'http://localhost:8123/predefined_query'\n \n     -   `status` \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441 \u0442\u0438\u043f\u043e\u043c `static`, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u0434 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430.\n \n-    -   `content_type` \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441 \u0442\u0438\u043f\u043e\u043c `static`, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 [content-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type).\n+    -   `content_type` \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 [content-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type).\n \n     -   `response_content` \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441 \u0442\u0438\u043f\u043e\u043c`static`, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043e\u0442\u0432\u0435\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430 \u2018file://\u2019 or \u2018config://\u2019, \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443.\n \ndiff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp\nindex 8e9ce395f83a..7c97fa675f47 100644\n--- a/src/Server/HTTPHandler.cpp\n+++ b/src/Server/HTTPHandler.cpp\n@@ -293,10 +293,11 @@ void HTTPHandler::pushDelayedResults(Output & used_output)\n }\n \n \n-HTTPHandler::HTTPHandler(IServer & server_, const std::string & name)\n+HTTPHandler::HTTPHandler(IServer & server_, const std::string & name, const std::optional<String> & content_type_override_)\n     : server(server_)\n     , log(&Poco::Logger::get(name))\n     , default_settings(server.context()->getSettingsRef())\n+    , content_type_override(content_type_override_)\n {\n     server_display_name = server.config().getString(\"display_name\", getFQDNOrHostName());\n }\n@@ -819,9 +820,9 @@ void HTTPHandler::processQuery(\n     customizeContext(request, context);\n \n     executeQuery(*in, *used_output.out_maybe_delayed_and_compressed, /* allow_into_outfile = */ false, context,\n-        [&response] (const String & current_query_id, const String & content_type, const String & format, const String & timezone)\n+        [&response, this] (const String & current_query_id, const String & content_type, const String & format, const String & timezone)\n         {\n-            response.setContentType(content_type);\n+            response.setContentType(content_type_override.value_or(content_type));\n             response.add(\"X-ClickHouse-Query-Id\", current_query_id);\n             response.add(\"X-ClickHouse-Format\", format);\n             response.add(\"X-ClickHouse-Timezone\", timezone);\n@@ -991,8 +992,8 @@ void HTTPHandler::handleRequest(HTTPServerRequest & request, HTTPServerResponse\n     used_output.finalize();\n }\n \n-DynamicQueryHandler::DynamicQueryHandler(IServer & server_, const std::string & param_name_)\n-    : HTTPHandler(server_, \"DynamicQueryHandler\"), param_name(param_name_)\n+DynamicQueryHandler::DynamicQueryHandler(IServer & server_, const std::string & param_name_, const std::optional<String>& content_type_override_)\n+    : HTTPHandler(server_, \"DynamicQueryHandler\", content_type_override_), param_name(param_name_)\n {\n }\n \n@@ -1052,8 +1053,9 @@ PredefinedQueryHandler::PredefinedQueryHandler(\n     const NameSet & receive_params_,\n     const std::string & predefined_query_,\n     const CompiledRegexPtr & url_regex_,\n-    const std::unordered_map<String, CompiledRegexPtr> & header_name_with_regex_)\n-    : HTTPHandler(server_, \"PredefinedQueryHandler\")\n+    const std::unordered_map<String, CompiledRegexPtr> & header_name_with_regex_,\n+    const std::optional<String> & content_type_override_)\n+    : HTTPHandler(server_, \"PredefinedQueryHandler\", content_type_override_)\n     , receive_params(receive_params_)\n     , predefined_query(predefined_query_)\n     , url_regex(url_regex_)\n@@ -1123,7 +1125,13 @@ std::string PredefinedQueryHandler::getQuery(HTTPServerRequest & request, HTMLFo\n HTTPRequestHandlerFactoryPtr createDynamicHandlerFactory(IServer & server, const std::string & config_prefix)\n {\n     auto query_param_name = server.config().getString(config_prefix + \".handler.query_param_name\", \"query\");\n-    auto factory = std::make_shared<HandlingRuleHTTPHandlerFactory<DynamicQueryHandler>>(server, std::move(query_param_name));\n+\n+    std::optional<String> content_type_override;\n+    if (server.config().has(config_prefix + \".handler.content_type\"))\n+        content_type_override = server.config().getString(config_prefix + \".handler.content_type\");\n+\n+    auto factory = std::make_shared<HandlingRuleHTTPHandlerFactory<DynamicQueryHandler>>(\n+        server, std::move(query_param_name), std::move(content_type_override));\n \n     factory->addFiltersFromConfig(server.config(), config_prefix);\n \n@@ -1180,6 +1188,10 @@ HTTPRequestHandlerFactoryPtr createPredefinedHandlerFactory(IServer & server, co\n             headers_name_with_regex.emplace(std::make_pair(header_name, regex));\n     }\n \n+    std::optional<String> content_type_override;\n+    if (configuration.has(config_prefix + \".handler.content_type\"))\n+        content_type_override = configuration.getString(config_prefix + \".handler.content_type\");\n+\n     std::shared_ptr<HandlingRuleHTTPHandlerFactory<PredefinedQueryHandler>> factory;\n \n     if (configuration.has(config_prefix + \".url\"))\n@@ -1197,14 +1209,20 @@ HTTPRequestHandlerFactoryPtr createPredefinedHandlerFactory(IServer & server, co\n                 std::move(analyze_receive_params),\n                 std::move(predefined_query),\n                 std::move(regex),\n-                std::move(headers_name_with_regex));\n+                std::move(headers_name_with_regex),\n+                std::move(content_type_override));\n             factory->addFiltersFromConfig(configuration, config_prefix);\n             return factory;\n         }\n     }\n \n     factory = std::make_shared<HandlingRuleHTTPHandlerFactory<PredefinedQueryHandler>>(\n-        server, std::move(analyze_receive_params), std::move(predefined_query), CompiledRegexPtr{}, std::move(headers_name_with_regex));\n+        server,\n+        std::move(analyze_receive_params),\n+        std::move(predefined_query),\n+        CompiledRegexPtr{},\n+        std::move(headers_name_with_regex),\n+        std::move(content_type_override));\n     factory->addFiltersFromConfig(configuration, config_prefix);\n \n     return factory;\ndiff --git a/src/Server/HTTPHandler.h b/src/Server/HTTPHandler.h\nindex aaf13031c62a..fa742ebc8fbf 100644\n--- a/src/Server/HTTPHandler.h\n+++ b/src/Server/HTTPHandler.h\n@@ -30,7 +30,7 @@ using CompiledRegexPtr = std::shared_ptr<const re2::RE2>;\n class HTTPHandler : public HTTPRequestHandler\n {\n public:\n-    HTTPHandler(IServer & server_, const std::string & name);\n+    HTTPHandler(IServer & server_, const std::string & name, const std::optional<String> & content_type_override_);\n     virtual ~HTTPHandler() override;\n \n     void handleRequest(HTTPServerRequest & request, HTTPServerResponse & response) override;\n@@ -100,6 +100,9 @@ class HTTPHandler : public HTTPRequestHandler\n     /// See settings http_max_fields, http_max_field_name_size, http_max_field_value_size in HTMLForm.\n     const Settings & default_settings;\n \n+    /// Overrides Content-Type provided by the format of the response.\n+    std::optional<String> content_type_override;\n+\n     // session is reset at the end of each request/response.\n     std::unique_ptr<Session> session;\n \n@@ -140,7 +143,7 @@ class DynamicQueryHandler : public HTTPHandler\n private:\n     std::string param_name;\n public:\n-    explicit DynamicQueryHandler(IServer & server_, const std::string & param_name_ = \"query\");\n+    explicit DynamicQueryHandler(IServer & server_, const std::string & param_name_ = \"query\", const std::optional<String>& content_type_override_ = std::nullopt);\n \n     std::string getQuery(HTTPServerRequest & request, HTMLForm & params, ContextMutablePtr context) override;\n \n@@ -157,7 +160,8 @@ class PredefinedQueryHandler : public HTTPHandler\n public:\n     PredefinedQueryHandler(\n         IServer & server_, const NameSet & receive_params_, const std::string & predefined_query_\n-        , const CompiledRegexPtr & url_regex_, const std::unordered_map<String, CompiledRegexPtr> & header_name_with_regex_);\n+        , const CompiledRegexPtr & url_regex_, const std::unordered_map<String, CompiledRegexPtr> & header_name_with_regex_\n+        , const std::optional<std::string> & content_type_override_);\n \n     virtual void customizeContext(HTTPServerRequest & request, ContextMutablePtr context) override;\n \n",
  "test_patch": "diff --git a/tests/integration/test_http_handlers_config/test.py b/tests/integration/test_http_handlers_config/test.py\nindex e73324ada8f5..9c64bd41b23d 100644\n--- a/tests/integration/test_http_handlers_config/test.py\n+++ b/tests/integration/test_http_handlers_config/test.py\n@@ -65,14 +65,28 @@ def test_dynamic_query_handler():\n             ).status_code\n         )\n \n+        res_default = cluster.instance.http_request(\n+            \"test_dynamic_handler_get?max_threads=1&get_dynamic_handler_query=\"\n+            + test_query,\n+            method=\"GET\",\n+            headers={\"XXX\": \"xxx\"},\n+        )\n+        assert 200 == res_default.status_code\n         assert (\n-            200\n-            == cluster.instance.http_request(\n-                \"test_dynamic_handler_get?max_threads=1&get_dynamic_handler_query=\"\n-                + test_query,\n-                method=\"GET\",\n-                headers={\"XXX\": \"xxx\"},\n-            ).status_code\n+            \"text/tab-separated-values; charset=UTF-8\"\n+            == res_default.headers[\"content-type\"]\n+        )\n+\n+        res_custom_ct = cluster.instance.http_request(\n+            \"test_dynamic_handler_get_custom_content_type?max_threads=1&get_dynamic_handler_query=\"\n+            + test_query,\n+            method=\"GET\",\n+            headers={\"XXX\": \"xxx\"},\n+        )\n+        assert 200 == res_custom_ct.status_code\n+        assert (\n+            \"application/whatever; charset=cp1337\"\n+            == res_custom_ct.headers[\"content-type\"]\n         )\n \n \n@@ -116,22 +130,22 @@ def test_predefined_query_handler():\n             ).status_code\n         )\n \n+        res1 = cluster.instance.http_request(\n+            \"test_predefined_handler_get?max_threads=1&setting_name=max_threads\",\n+            method=\"GET\",\n+            headers={\"XXX\": \"xxx\"},\n+        )\n+        assert b\"max_threads\\t1\\n\" == res1.content\n         assert (\n-            b\"max_threads\\t1\\n\"\n-            == cluster.instance.http_request(\n-                \"test_predefined_handler_get?max_threads=1&setting_name=max_threads\",\n-                method=\"GET\",\n-                headers={\"XXX\": \"xxx\"},\n-            ).content\n+            \"text/tab-separated-values; charset=UTF-8\" == res1.headers[\"content-type\"]\n         )\n \n-        assert (\n-            b\"max_final_threads\\t1\\nmax_threads\\t1\\n\"\n-            == cluster.instance.http_request(\n-                \"query_param_with_url/max_threads?max_threads=1&max_final_threads=1\",\n-                headers={\"XXX\": \"max_final_threads\"},\n-            ).content\n+        res2 = cluster.instance.http_request(\n+            \"query_param_with_url/max_threads?max_threads=1&max_final_threads=1\",\n+            headers={\"XXX\": \"max_final_threads\"},\n         )\n+        assert b\"max_final_threads\\t1\\nmax_threads\\t1\\n\" == res2.content\n+        assert \"application/generic+one\" == res2.headers[\"content-type\"]\n \n \n def test_fixed_static_handler():\ndiff --git a/tests/integration/test_http_handlers_config/test_dynamic_handler/config.xml b/tests/integration/test_http_handlers_config/test_dynamic_handler/config.xml\nindex 60ae98e177b9..68e5ba302dba 100644\n--- a/tests/integration/test_http_handlers_config/test_dynamic_handler/config.xml\n+++ b/tests/integration/test_http_handlers_config/test_dynamic_handler/config.xml\n@@ -11,5 +11,15 @@\n                 <query_param_name>get_dynamic_handler_query</query_param_name>\n             </handler>\n         </rule>\n+        <rule>\n+            <headers><XXX>xxx</XXX></headers>\n+            <methods>GET</methods>\n+            <url>/test_dynamic_handler_get_custom_content_type</url>\n+            <handler>\n+                <type>dynamic_query_handler</type>\n+                <query_param_name>get_dynamic_handler_query</query_param_name>\n+                <content_type>application/whatever; charset=cp1337</content_type>\n+            </handler>\n+        </rule>\n     </http_handlers>\n </clickhouse>\ndiff --git a/tests/integration/test_http_handlers_config/test_predefined_handler/config.xml b/tests/integration/test_http_handlers_config/test_predefined_handler/config.xml\nindex 4aa41a777d4e..96fc018ae3e1 100644\n--- a/tests/integration/test_http_handlers_config/test_predefined_handler/config.xml\n+++ b/tests/integration/test_http_handlers_config/test_predefined_handler/config.xml\n@@ -19,6 +19,7 @@\n             <handler>\n                 <type>predefined_query_handler</type>\n                 <query>SELECT name, value FROM system.settings WHERE name = {setting_name_1:String} OR name = {setting_name_2:String}</query>\n+                <content_type>application/generic+one</content_type>\n             </handler>\n         </rule>\n     </http_handlers>\n",
  "problem_statement": "A setting `content_type` to force specified `Content-Type` in output.\nI want to add a `predefined_query_handler` to serve a single JSON from my query.\r\nFor example\r\n\r\n```xml\r\n<rule>\r\n      <url>/my/url</url>\r\n      <methods>GET</methods>\r\n      <handler>\r\n        <type>predefined_query_handler</type>\r\n        <query>select '{\"my\": \"json\"}' format JSONAsString</query>\r\n      </handler>\r\n    </rule>\r\n```\r\n\r\nI can use `RawBLOB` but it sets up Content-Type 'text/plain' instead of 'application/json'.\r\nI think JSONAsString should also work with output.\r\n\n",
  "hints_text": "I'm concerned that this format will mean nothing different to `LineAsString`, `TSVRaw` except the Content-Type,\r\nand you can easily write invalid JSON with this format. It makes the semantic of this format very subtle.\r\n\r\nMaybe we can add a setting `content_type` to force content type for all formats?\nSetting content_type will be ok. ",
  "created_at": "2022-02-26T00:23:49Z"
}