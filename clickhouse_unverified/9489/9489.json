{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9489,
  "instance_id": "ClickHouse__ClickHouse-9489",
  "issue_numbers": [
    "2283"
  ],
  "base_commit": "20d353c04bc9657683863d0764f9806421445623",
  "patch": "diff --git a/dbms/src/Interpreters/inplaceBlockConversions.cpp b/dbms/src/Interpreters/inplaceBlockConversions.cpp\nindex a60efb1e3976..38f961306ff5 100644\n--- a/dbms/src/Interpreters/inplaceBlockConversions.cpp\n+++ b/dbms/src/Interpreters/inplaceBlockConversions.cpp\n@@ -37,14 +37,23 @@ ASTPtr defaultRequiredExpressions(Block & block, const NamesAndTypesList & requi\n         {\n             /// expressions must be cloned to prevent modification by the ExpressionAnalyzer\n             auto column_default_expr = it->second.expression->clone();\n+\n+            /// Our default may depend on columns with ALIAS as default expr which not present in block\n+            /// we can easily add them from column_defaults struct\n             RequiredSourceColumnsVisitor::Data columns_context;\n             RequiredSourceColumnsVisitor(columns_context).visit(column_default_expr);\n             NameSet required_columns_names = columns_context.requiredColumns();\n \n             for (const auto & required_column_name : required_columns_names)\n+            {\n+                /// If we have such default column and it's alias than we should\n+                /// add it into default_expression_list\n                 if (auto rit = column_defaults.find(required_column_name);\n                     rit != column_defaults.end() && rit->second.kind == ColumnDefaultKind::Alias)\n+                {\n                     default_expr_list->children.emplace_back(setAlias(rit->second.expression->clone(), required_column_name));\n+                }\n+            }\n \n             auto cast_func = makeASTFunction(\"CAST\", column_default_expr, std::make_shared<ASTLiteral>(column.type->getName()));\n             default_expr_list->children.emplace_back(setAlias(cast_func, it->first));\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01093_cyclic_defaults_filimonov.reference b/dbms/tests/queries/0_stateless/01093_cyclic_defaults_filimonov.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/dbms/tests/queries/0_stateless/01093_cyclic_defaults_filimonov.sql b/dbms/tests/queries/0_stateless/01093_cyclic_defaults_filimonov.sql\nnew file mode 100644\nindex 000000000000..548cd794ba31\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01093_cyclic_defaults_filimonov.sql\n@@ -0,0 +1,19 @@\n+CREATE TABLE test\n+(\n+    `a1` UInt64 DEFAULT a + 1,\n+    `a1` UInt64 DEFAULT a + 1,\n+    `a2` UInt64 DEFAULT a3 + a4,\n+    `a3` UInt64 DEFAULT a2 + 1,\n+    `a4` UInt64 ALIAS a3 + 1\n+)\n+ENGINE = Log; -- { serverError 174 }\n+\n+CREATE TABLE pythagoras\n+(\n+    `a` Float64 DEFAULT sqrt((c * c) - (b * b)),\n+    `b` Float64 DEFAULT sqrt((c * c) - (a * a)),\n+    `c` Float64 DEFAULT sqrt((a * a) + (b * b))\n+)\n+ENGINE = Log; -- { serverError 174 }\n+\n+-- TODO: It works but should not: CREATE TABLE test (a DEFAULT b, b DEFAULT a) ENGINE = Memory\n",
  "problem_statement": "Can't use alias columns in default expressions\nSample:\r\n```sql\r\nCREATE TABLE test_default_using_alias\r\n(\r\n    what String, \r\n    a String DEFAULT concat(c, ' is great'), \r\n    b String DEFAULT concat(c, ' is fast'), \r\n    c String ALIAS concat(what, 'House')\r\n)\r\nENGINE = TinyLog\r\n\r\n:) insert into test_default_using_alias(what) VALUES ('Click');\r\nReceived exception from server (version 1.1.54362):\r\nCode: 47. DB::Exception: Received from localhost:9000, ::1. DB::Exception: Unknown identifier: c. \r\n\r\n1 rows in set. Elapsed: 0.073 sec. \r\n\r\n:) SELECT a,b FROM test_default_using_alias;\r\n\r\nSELECT \r\n    a, \r\n    b\r\nFROM test_default_using_alias \r\n\r\nReceived exception from server (version 1.1.54362):\r\nCode: 1000. DB::Exception: Received from localhost:9000, ::1. DB::Exception: File not found: /var/lib/clickhouse/data/default/test_default_using_alias/a.bin. \r\n```\n",
  "hints_text": "It is the same behaviour if ALIAS columns are present in MATERIALIZED or other ALIAS columns. Very annoying bug - tables are created succesfully, but all inserts fails.\nThis issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
  "created_at": "2020-03-03T14:29:45Z"
}