diff --git a/src/Functions/in.cpp b/src/Functions/in.cpp
index 9045ba677f27..4c55c5cb1190 100644
--- a/src/Functions/in.cpp
+++ b/src/Functions/in.cpp
@@ -3,12 +3,10 @@
 #include <Functions/FunctionHelpers.h>
 #include <DataTypes/DataTypeTuple.h>
 #include <DataTypes/DataTypesNumber.h>
-#include <DataTypes/DataTypeLowCardinality.h>
 #include <Columns/ColumnConst.h>
 #include <Columns/ColumnsNumber.h>
 #include <Columns/ColumnTuple.h>
 #include <Columns/ColumnSet.h>
-#include <Columns/ColumnLowCardinality.h>
 #include <Interpreters/Set.h>
 
 
@@ -70,12 +68,6 @@ class FunctionIn : public IFunction
         return 2;
     }
 
-    /// Do not use default implementation for LowCardinality.
-    /// For now, Set may be const or non const column, depending on how it was created.
-    /// But we will return UInt8 for any case.
-    /// TODO: we could use special implementation later.
-    bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }
-
     DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override
     {
         return std::make_shared<DataTypeUInt8>();
@@ -143,8 +135,6 @@ class FunctionIn : public IFunction
         else
             columns_of_key_columns.emplace_back(left_arg);
 
-        /// Replace single LowCardinality column to it's dictionary if possible.
-        ColumnPtr lc_indexes = nullptr;
         bool is_const = false;
         if (columns_of_key_columns.size() == 1)
         {
@@ -155,20 +145,10 @@ class FunctionIn : public IFunction
                 col = &const_col->getDataColumn();
                 is_const = true;
             }
-
-            if (const auto * lc = typeid_cast<const ColumnLowCardinality *>(col))
-            {
-                lc_indexes = lc->getIndexesPtr();
-                arg.column = lc->getDictionary().getNestedColumn();
-                arg.type = removeLowCardinality(arg.type);
-            }
         }
 
         auto res = set->execute(columns_of_key_columns, negative);
 
-        if (lc_indexes)
-            res = res->index(*lc_indexes, 0);
-
         if (is_const)
             res = ColumnUInt8::create(input_rows_count, res->getUInt(0));
 
