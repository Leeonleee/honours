{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53706,
  "instance_id": "ClickHouse__ClickHouse-53706",
  "issue_numbers": [
    "50570"
  ],
  "base_commit": "b158a83e89f1b9f6bbfacc1c78fff6c22be30d21",
  "patch": "diff --git a/src/Functions/in.cpp b/src/Functions/in.cpp\nindex 9045ba677f27..4c55c5cb1190 100644\n--- a/src/Functions/in.cpp\n+++ b/src/Functions/in.cpp\n@@ -3,12 +3,10 @@\n #include <Functions/FunctionHelpers.h>\n #include <DataTypes/DataTypeTuple.h>\n #include <DataTypes/DataTypesNumber.h>\n-#include <DataTypes/DataTypeLowCardinality.h>\n #include <Columns/ColumnConst.h>\n #include <Columns/ColumnsNumber.h>\n #include <Columns/ColumnTuple.h>\n #include <Columns/ColumnSet.h>\n-#include <Columns/ColumnLowCardinality.h>\n #include <Interpreters/Set.h>\n \n \n@@ -70,12 +68,6 @@ class FunctionIn : public IFunction\n         return 2;\n     }\n \n-    /// Do not use default implementation for LowCardinality.\n-    /// For now, Set may be const or non const column, depending on how it was created.\n-    /// But we will return UInt8 for any case.\n-    /// TODO: we could use special implementation later.\n-    bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }\n-\n     DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override\n     {\n         return std::make_shared<DataTypeUInt8>();\n@@ -143,8 +135,6 @@ class FunctionIn : public IFunction\n         else\n             columns_of_key_columns.emplace_back(left_arg);\n \n-        /// Replace single LowCardinality column to it's dictionary if possible.\n-        ColumnPtr lc_indexes = nullptr;\n         bool is_const = false;\n         if (columns_of_key_columns.size() == 1)\n         {\n@@ -155,20 +145,10 @@ class FunctionIn : public IFunction\n                 col = &const_col->getDataColumn();\n                 is_const = true;\n             }\n-\n-            if (const auto * lc = typeid_cast<const ColumnLowCardinality *>(col))\n-            {\n-                lc_indexes = lc->getIndexesPtr();\n-                arg.column = lc->getDictionary().getNestedColumn();\n-                arg.type = removeLowCardinality(arg.type);\n-            }\n         }\n \n         auto res = set->execute(columns_of_key_columns, negative);\n \n-        if (lc_indexes)\n-            res = res->index(*lc_indexes, 0);\n-\n         if (is_const)\n             res = ColumnUInt8::create(input_rows_count, res->getUInt(0));\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02867_null_lc_in_bug.reference b/tests/queries/0_stateless/02867_null_lc_in_bug.reference\nnew file mode 100644\nindex 000000000000..d2ec72685ca3\n--- /dev/null\n+++ b/tests/queries/0_stateless/02867_null_lc_in_bug.reference\n@@ -0,0 +1,4 @@\n+pure nullable result:\n+qwe\n+wrapping in LC:\n+qwe\ndiff --git a/tests/queries/0_stateless/02867_null_lc_in_bug.sql b/tests/queries/0_stateless/02867_null_lc_in_bug.sql\nnew file mode 100644\nindex 000000000000..121b1447dca4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02867_null_lc_in_bug.sql\n@@ -0,0 +1,17 @@\n+-- https://github.com/ClickHouse/ClickHouse/issues/50570\n+\n+DROP TABLE IF EXISTS tnul SYNC;\n+DROP TABLE IF EXISTS tlc SYNC;\n+\n+CREATE TABLE tnul (lc Nullable(String)) ENGINE = MergeTree ORDER BY tuple();\n+INSERT INTO tnul VALUES (NULL), ('qwe');\n+SELECT 'pure nullable result:';\n+SELECT lc FROM tnul WHERE notIn(lc, ('rty', 'uiop'));\n+DROP TABLE tnul SYNC;\n+\n+\n+CREATE TABLE tlc (lc LowCardinality(Nullable(String))) ENGINE = MergeTree ORDER BY tuple();\n+INSERT INTO tlc VALUES (NULL), ('qwe');\n+SELECT 'wrapping in LC:';\n+SELECT lc FROM tlc WHERE notIn(lc, ('rty', 'uiop'));\n+DROP TABLE tlc SYNC;\n",
  "problem_statement": "NULL::LowCardinality(Nullable(T)) NOT IN bug\n**Describe what's wrong**\r\n\r\nClickHouse will return NULL value for operator NOT IN with 0-set\r\n\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes, 23.3\r\n\r\n**How to reproduce**\r\n```\r\nSELECT lc\r\nFROM\r\n(\r\n    SELECT CAST(NULL, 'LowCardinality(Nullable(String))') AS lc\r\n)\r\nWHERE lc NOT IN (\r\n    SELECT *\r\n    FROM\r\n    (\r\n        SELECT materialize(CAST('', 'LowCardinality(Nullable(String))') AS lc)\r\n    )\r\n    WHERE 0\r\n)\r\n\r\n\u250c\u2500lc\u2500\u2500\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nSELECT lc\r\nFROM\r\n(\r\n    SELECT materialize(CAST(NULL, 'Nullable(String)')) AS lc\r\n)\r\nWHERE lc NOT IN (\r\n    SELECT *\r\n    FROM\r\n    (\r\n        SELECT materialize(CAST('', 'LowCardinality(Nullable(String))') AS lc)\r\n    )\r\n    WHERE 0\r\n)\r\n\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.009 sec.\r\n```\r\n\r\n**Expected behavior**\r\n\r\nQuery will return 0 rows always\r\n\r\n\r\n**Additional context**\r\n\r\nVersion with bug introducted is 21.6\r\n\r\nhttps://fiddle.clickhouse.com/c8e03c2d-6879-4ae5-b565-a485d1c56f5d\n",
  "hints_text": "@alexey-milovidov it is a wrong result. We found it while migrating a system that complies with the SQL standard :-)\r\n+ it is a regression.\n### Notes to self\r\nexpected result is: empty\r\n\r\nLooks like it was introduced [somewhere between `21.6.4` and `21.6.5`](https://github.com/ClickHouse/ClickHouse/compare/v21.6.4.26-stable...v21.6.5.37-stable).\r\nAlso present in `21.3`, was backported (or re-introduced) [somewhere between `21.3.12` and `21.3.13`](https://github.com/ClickHouse/ClickHouse/compare/v21.3.12.2-lts...v21.3.13.9-lts)\r\n\r\nMost likely, it was introduced with #25288\n**Notes 2:**\r\n\r\nit is not only about 0-set, it's not even a pure LowCardinality thing\r\nref: https://fiddle.clickhouse.com/5236d6f9-47a2-4bbf-9b67-4ef03a37a58e\r\n25288 unrelated\r\n\r\nIntroduced with #25290\n@UnamedRus Could you please change issue name to smth like \"NULL::LowCardinality(Nullable) NOT IN bug\"? 0-set mention may be a bit misleading here, and String too. E.g. [this example](https://fiddle.clickhouse.com/8c45c0d7-d1dd-4cce-9569-c673e4f10f11) will also go wrong.\n> **[]**\r\n\r\nArent it 0-set? ie set with zero elements\nYes, it is, but it fails for non-empty set also.\r\nAdded a wrong link to my prev comment\r\nSee https://fiddle.clickhouse.com/c40cccc9-41c3-4642-a0ad-cb962e6859ed",
  "created_at": "2023-08-22T17:12:26Z",
  "modified_files": [
    "src/Functions/in.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02867_null_lc_in_bug.reference",
    "b/tests/queries/0_stateless/02867_null_lc_in_bug.sql"
  ]
}