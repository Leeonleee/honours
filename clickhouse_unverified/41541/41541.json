{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 41541,
  "instance_id": "ClickHouse__ClickHouse-41541",
  "issue_numbers": [
    "41490"
  ],
  "base_commit": "cf2db48c29a19f482d4d3ce4a9ac1b4eeca67ea9",
  "patch": "diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex a8d2882c653f..2d545d716ab5 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -55,6 +55,7 @@\n #include <Columns/ColumnLowCardinality.h>\n #include <Interpreters/Context.h>\n #include <Common/HashTable/HashMap.h>\n+#include <Core/Types.h>\n \n \n namespace DB\n@@ -1519,9 +1520,11 @@ struct ConvertImpl<DataTypeUInt8, DataTypeUInt8, Name, ConvertDefaultBehaviorTag\n template <typename Name>\n struct ConvertImpl<DataTypeFixedString, DataTypeString, Name, ConvertDefaultBehaviorTag>\n {\n-    static ColumnPtr execute(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t /*input_rows_count*/)\n+    static ColumnPtr execute(const ColumnsWithTypeAndName & arguments, const DataTypePtr & return_type, size_t /*input_rows_count*/)\n     {\n-        if (const ColumnFixedString * col_from = checkAndGetColumn<ColumnFixedString>(arguments[0].column.get()))\n+        ColumnUInt8::MutablePtr null_map = copyNullMap(arguments[0].column);\n+        const auto & nested =  columnGetNested(arguments[0]);\n+        if (const ColumnFixedString * col_from = checkAndGetColumn<ColumnFixedString>(nested.column.get()))\n         {\n             auto col_to = ColumnString::create();\n \n@@ -1537,19 +1540,24 @@ struct ConvertImpl<DataTypeFixedString, DataTypeString, Name, ConvertDefaultBeha\n             size_t offset_to = 0;\n             for (size_t i = 0; i < size; ++i)\n             {\n-                size_t bytes_to_copy = n;\n-                while (bytes_to_copy > 0 && data_from[offset_from + bytes_to_copy - 1] == 0)\n-                    --bytes_to_copy;\n+                if (!null_map || !null_map->getData()[i])\n+                {\n+                    size_t bytes_to_copy = n;\n+                    while (bytes_to_copy > 0 && data_from[offset_from + bytes_to_copy - 1] == 0)\n+                        --bytes_to_copy;\n \n-                memcpy(&data_to[offset_to], &data_from[offset_from], bytes_to_copy);\n-                offset_from += n;\n-                offset_to += bytes_to_copy;\n+                    memcpy(&data_to[offset_to], &data_from[offset_from], bytes_to_copy);\n+                    offset_to += bytes_to_copy;\n+                }\n                 data_to[offset_to] = 0;\n                 ++offset_to;\n                 offsets_to[i] = offset_to;\n+                offset_from += n;\n             }\n \n             data_to.resize(offset_to);\n+            if (return_type->isNullable() && null_map)\n+                return ColumnNullable::create(std::move(col_to), std::move(null_map));\n             return col_to;\n         }\n         else\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02426_to_string_nullable_fixedstring.reference b/tests/queries/0_stateless/02426_to_string_nullable_fixedstring.reference\nnew file mode 100644\nindex 000000000000..bc0ca9332834\n--- /dev/null\n+++ b/tests/queries/0_stateless/02426_to_string_nullable_fixedstring.reference\n@@ -0,0 +1,11 @@\n+a\tNullable(FixedString(1))\ta\n+0\tNullable(FixedString(1))\t\\N\n+1\tNullable(FixedString(1))\t1\n+2\tNullable(FixedString(1))\t2\n+3\tNullable(FixedString(1))\t\\N\n+4\tNullable(FixedString(1))\t4\n+5\tNullable(FixedString(1))\t5\n+6\tNullable(FixedString(1))\t\\N\n+7\tNullable(FixedString(1))\t7\n+8\tNullable(FixedString(1))\t8\n+9\tNullable(FixedString(1))\t\\N\ndiff --git a/tests/queries/0_stateless/02426_to_string_nullable_fixedstring.sql b/tests/queries/0_stateless/02426_to_string_nullable_fixedstring.sql\nnew file mode 100644\nindex 000000000000..f6dcc8f92bec\n--- /dev/null\n+++ b/tests/queries/0_stateless/02426_to_string_nullable_fixedstring.sql\n@@ -0,0 +1,2 @@\n+SELECT CAST('a', 'Nullable(FixedString(1))') as s,  toTypeName(s), toString(s);\n+SELECT number, toTypeName(s), toString(s) FROM (SELECT number, if(number % 3 = 0, NULL, toFixedString(toString(number), 1)) AS s from numbers(10)) ORDER BY number;\n",
  "problem_statement": "21.9+: Illegal column Nullable(FixedString(32)) of first argument of function toString\n**Describe what's wrong**\r\n\r\n```sql\r\nSELECT toTypeName(s), toString(s) FROM\r\n(\r\n SELECT toFixedString('',32) AS s \r\n UNION ALL\r\n SELECT null AS s \r\n)\r\n```\r\n\r\nthis query works in all versions from 19.17 to 21.8, but stop works after 21.9+ \r\n\r\nhttps://fiddle.clickhouse.com/7bd65b36-a6e6-470a-8bdc-4c98a33ff453\r\n21.8 works\r\n\r\nhttps://fiddle.clickhouse.com/9e40a424-4027-4c7f-bd41-b20935ae9129\r\n21.9 doesn't work\r\n```\r\nReceived exception from server (version 21.9.6):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Illegal column Nullable(FixedString(32)) of first argument of function toString. (ILLEGAL_COLUMN)\r\n```\r\n\r\nthis query works in all versions\r\n\r\n```sql\r\nSELECT toTypeName(s), toString(s) FROM\r\n(\r\n SELECT '' AS s \r\n UNION ALL\r\n SELECT null AS s \r\n)\r\n```\r\nhttps://fiddle.clickhouse.com/4f810f03-1644-4eb7-b696-0341b1bbdbc4\r\n\r\n\r\n**Does it reproduce on recent release?**\r\nYes, reproduce in all releases 21.9+\n",
  "hints_text": "Simpler test:\r\n\r\n```sql\r\nSELECT CAST('a', 'Nullable(FixedString(1))') as s,  toTypeName(s), toString(s);\r\n```\n@filimonov probably related #26123\r\nThere's some logic looks very suspicious in `FunctionsConvertion`\r\n```cpp\r\nbool useDefaultImplementationForNulls() const override\r\n{\r\n    bool to_nullable_string = to_nullable && std::is_same_v<ToDataType, DataTypeString>;\r\n    return checked_return_type && !to_nullable_string;\r\n}\r\n```",
  "created_at": "2022-09-20T02:09:22Z",
  "modified_files": [
    "src/Functions/FunctionsConversion.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02426_to_string_nullable_fixedstring.reference",
    "b/tests/queries/0_stateless/02426_to_string_nullable_fixedstring.sql"
  ]
}