{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19185,
  "instance_id": "ClickHouse__ClickHouse-19185",
  "issue_numbers": [
    "18916"
  ],
  "base_commit": "4c29a29e4a1e918e5f134ed8e69676791e620d0a",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex ca2a3db193fd..2f4550d650a9 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -141,6 +141,8 @@ class Client : public Poco::Util::Application\n \n     /// If not empty, queries will be read from these files\n     std::vector<std::string> queries_files;\n+    /// If not empty, run queries from these files before processing every file from 'queries_files'.\n+    std::vector<std::string> interleave_queries_files;\n \n     std::unique_ptr<Connection> connection;    /// Connection to DB.\n     String full_query; /// Current query as it was given to the client.\n@@ -796,13 +798,22 @@ class Client : public Poco::Util::Application\n \n         if (!queries_files.empty())\n         {\n-            for (const auto & queries_file : queries_files)\n+            auto process_file = [&](const std::string & file)\n             {\n                 connection->setDefaultDatabase(connection_parameters.default_database);\n-                ReadBufferFromFile in(queries_file);\n+                ReadBufferFromFile in(file);\n                 readStringUntilEOF(text, in);\n-                if (!processMultiQuery(text))\n-                    break;\n+                return processMultiQuery(text);\n+            };\n+\n+            for (const auto & queries_file : queries_files)\n+            {\n+                for (const auto & interleave_file : interleave_queries_files)\n+                    if (!process_file(interleave_file))\n+                        return;\n+\n+                if (!process_file(queries_file))\n+                    return;\n             }\n             return;\n         }\n@@ -945,6 +956,7 @@ class Client : public Poco::Util::Application\n \n                     continue;\n                 }\n+\n                 return true;\n             }\n \n@@ -2271,7 +2283,9 @@ class Client : public Poco::Util::Application\n             (\"highlight\", po::value<bool>()->default_value(true), \"enable or disable basic syntax highlight in interactive command line\")\n             (\"log-level\", po::value<std::string>(), \"client log level\")\n             (\"server_logs_file\", po::value<std::string>(), \"put server logs into specified file\")\n-            (\"query-fuzzer-runs\", po::value<int>()->default_value(0), \"query fuzzer runs\")\n+            (\"query-fuzzer-runs\", po::value<int>()->default_value(0), \"After executing every SELECT query, do random mutations in it and run again specified number of times. This is used for testing to discover unexpected corner cases.\")\n+            (\"interleave-queries-file\", po::value<std::vector<std::string>>()->multitoken(),\n+                \"file path with queries to execute before every file from 'queries-file'; multiple files can be specified (--queries-file file1 file2...); this is needed to enable more aggressive fuzzing of newly added tests (see 'query-fuzzer-runs' option)\")\n             (\"opentelemetry-traceparent\", po::value<std::string>(), \"OpenTelemetry traceparent header as described by W3C Trace Context recommendation\")\n             (\"opentelemetry-tracestate\", po::value<std::string>(), \"OpenTelemetry tracestate header as described by W3C Trace Context recommendation\")\n             (\"history_file\", po::value<std::string>(), \"path to history file\")\n@@ -2386,6 +2400,8 @@ class Client : public Poco::Util::Application\n             config().setString(\"query\", options[\"query\"].as<std::string>());\n         if (options.count(\"queries-file\"))\n             queries_files = options[\"queries-file\"].as<std::vector<std::string>>();\n+        if (options.count(\"interleave-queries-file\"))\n+            interleave_queries_files = options[\"interleave-queries-file\"].as<std::vector<std::string>>();\n         if (options.count(\"database\"))\n             config().setString(\"database\", options[\"database\"].as<std::string>());\n         if (options.count(\"pager\"))\n",
  "test_patch": "diff --git a/docker/test/fuzzer/run-fuzzer.sh b/docker/test/fuzzer/run-fuzzer.sh\nindex 9c2bf3713443..fe77aa560575 100755\n--- a/docker/test/fuzzer/run-fuzzer.sh\n+++ b/docker/test/fuzzer/run-fuzzer.sh\n@@ -1,4 +1,6 @@\n #!/bin/bash\n+# shellcheck disable=SC2086\n+\n set -eux\n set -o pipefail\n trap \"exit\" INT TERM\n@@ -20,6 +22,7 @@ function clone\n     git init\n     git remote add origin https://github.com/ClickHouse/ClickHouse\n     git fetch --depth=1 origin \"$SHA_TO_TEST\"\n+    git fetch --depth=1 origin master # Used to obtain the list of modified or added tests\n \n     # If not master, try to fetch pull/.../{head,merge}\n     if [ \"$PR_TO_TEST\" != \"0\" ]\n@@ -33,9 +36,6 @@ function clone\n \n function download\n {\n-#    wget -O- -nv -nd -c \"https://clickhouse-builds.s3.yandex.net/$PR_TO_TEST/$SHA_TO_TEST/clickhouse_build_check/performance/performance.tgz\" \\\n-#        | tar --strip-components=1 -zxv\n-\n     wget -nv -nd -c \"https://clickhouse-builds.s3.yandex.net/$PR_TO_TEST/$SHA_TO_TEST/clickhouse_build_check/$BINARY_TO_DOWNLOAD/clickhouse\"\n     chmod +x clickhouse\n     ln -s ./clickhouse ./clickhouse-server\n@@ -73,6 +73,17 @@ function watchdog\n \n function fuzz\n {\n+    # Obtain the list of newly added tests. They will be fuzzed in more extreme way than other tests.\n+    cd ch\n+    NEW_TESTS=$(git diff --name-only master | grep -P 'tests/queries/0_stateless/.*\\.sql' | sed -r -e 's!^!ch/!' | sort -R)\n+    cd ..\n+    if [[ -n \"$NEW_TESTS\" ]]\n+    then\n+        NEW_TESTS_OPT=\"--interleave-queries-file ${NEW_TESTS}\"\n+    else\n+        NEW_TESTS_OPT=\"\"\n+    fi\n+\n     ./clickhouse-server --config-file db/config.xml -- --path db 2>&1 | tail -100000 > server.log &\n     server_pid=$!\n     kill -0 $server_pid\n@@ -85,7 +96,7 @@ function fuzz\n     # SC2012: Use find instead of ls to better handle non-alphanumeric filenames. They are all alphanumeric.\n     # SC2046: Quote this to prevent word splitting. Actually I need word splitting.\n     # shellcheck disable=SC2012,SC2046\n-    ./clickhouse-client --query-fuzzer-runs=1000 --queries-file $(ls -1 ch/tests/queries/0_stateless/*.sql | sort -R) \\\n+    ./clickhouse-client --query-fuzzer-runs=1000 --queries-file $(ls -1 ch/tests/queries/0_stateless/*.sql | sort -R) $NEW_TESTS_OPT \\\n         > >(tail -n 100000 > fuzzer.log) \\\n         2>&1 \\\n         || fuzzer_exit_code=$?\n@@ -107,7 +118,7 @@ function fuzz\n \n case \"$stage\" in\n \"\")\n-    ;&\n+    ;&  # Did you know? This is \"fallthrough\" in bash. https://stackoverflow.com/questions/12010686/case-statement-fallthrough\n \"clone\")\n     time clone\n     if [ -v FUZZ_LOCAL_SCRIPT ]\n",
  "problem_statement": "Extensive fuzzing of new added tests\nAdd an option for `clickhouse-client` with a list of tests for extensive fuzzing.\r\nProcessing of these tests will be interleaved between every other tests, so we will get much better fuzzing coverage.\n",
  "hints_text": "",
  "created_at": "2021-01-16T15:05:04Z"
}