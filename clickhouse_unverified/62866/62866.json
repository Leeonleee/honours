{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 62866,
  "instance_id": "ClickHouse__ClickHouse-62866",
  "issue_numbers": [
    "62848"
  ],
  "base_commit": "642da7934a6f0af43175295e38133c4e3635f656",
  "patch": "diff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex 2d57ea40c9cb..80f425c3e06c 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -2250,9 +2250,11 @@ static BoolMask forAnyHyperrectangle(\n         if (left_bounded && right_bounded)\n             hyperrectangle[prefix_size] = Range(left_keys[prefix_size], true, right_keys[prefix_size], true);\n         else if (left_bounded)\n-            hyperrectangle[prefix_size] = Range::createLeftBounded(left_keys[prefix_size], true, data_types[prefix_size]->isNullable());\n+            hyperrectangle[prefix_size]\n+                = Range::createLeftBounded(left_keys[prefix_size], true, isNullableOrLowCardinalityNullable(data_types[prefix_size]));\n         else if (right_bounded)\n-            hyperrectangle[prefix_size] = Range::createRightBounded(right_keys[prefix_size], true, data_types[prefix_size]->isNullable());\n+            hyperrectangle[prefix_size]\n+                = Range::createRightBounded(right_keys[prefix_size], true, isNullableOrLowCardinalityNullable(data_types[prefix_size]));\n \n         return callback(hyperrectangle);\n     }\n@@ -2262,13 +2264,15 @@ static BoolMask forAnyHyperrectangle(\n     if (left_bounded && right_bounded)\n         hyperrectangle[prefix_size] = Range(left_keys[prefix_size], false, right_keys[prefix_size], false);\n     else if (left_bounded)\n-        hyperrectangle[prefix_size] = Range::createLeftBounded(left_keys[prefix_size], false, data_types[prefix_size]->isNullable());\n+        hyperrectangle[prefix_size]\n+            = Range::createLeftBounded(left_keys[prefix_size], false, isNullableOrLowCardinalityNullable(data_types[prefix_size]));\n     else if (right_bounded)\n-        hyperrectangle[prefix_size] = Range::createRightBounded(right_keys[prefix_size], false, data_types[prefix_size]->isNullable());\n+        hyperrectangle[prefix_size]\n+            = Range::createRightBounded(right_keys[prefix_size], false, isNullableOrLowCardinalityNullable(data_types[prefix_size]));\n \n     for (size_t i = prefix_size + 1; i < key_size; ++i)\n     {\n-        if (data_types[i]->isNullable())\n+        if (isNullableOrLowCardinalityNullable(data_types[i]))\n             hyperrectangle[i] = Range::createWholeUniverse();\n         else\n             hyperrectangle[i] = Range::createWholeUniverseWithoutNull();\n@@ -2324,7 +2328,7 @@ BoolMask KeyCondition::checkInRange(\n     key_ranges.reserve(used_key_size);\n     for (size_t i = 0; i < used_key_size; ++i)\n     {\n-        if (data_types[i]->isNullable())\n+        if (isNullableOrLowCardinalityNullable(data_types[i]))\n             key_ranges.push_back(Range::createWholeUniverse());\n         else\n             key_ranges.push_back(Range::createWholeUniverseWithoutNull());\ndiff --git a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\nindex 345872efddf9..cd0a7615762d 100644\n--- a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\n@@ -383,7 +383,8 @@ MergeTreeDataSelectSamplingData MergeTreeDataSelectExecutor::getSampling(\n             if (has_lower_limit)\n             {\n                 if (!key_condition.addCondition(\n-                        sampling_key.column_names[0], Range::createLeftBounded(lower, true, sampling_key.data_types[0]->isNullable())))\n+                        sampling_key.column_names[0],\n+                        Range::createLeftBounded(lower, true, isNullableOrLowCardinalityNullable(sampling_key.data_types[0]))))\n                     throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Sampling column not in primary key\");\n \n                 ASTPtr args = std::make_shared<ASTExpressionList>();\n@@ -401,7 +402,8 @@ MergeTreeDataSelectSamplingData MergeTreeDataSelectExecutor::getSampling(\n             if (has_upper_limit)\n             {\n                 if (!key_condition.addCondition(\n-                        sampling_key.column_names[0], Range::createRightBounded(upper, false, sampling_key.data_types[0]->isNullable())))\n+                        sampling_key.column_names[0],\n+                        Range::createRightBounded(upper, false, isNullableOrLowCardinalityNullable(sampling_key.data_types[0]))))\n                     throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Sampling column not in primary key\");\n \n                 ASTPtr args = std::make_shared<ASTExpressionList>();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03129_low_cardinality_nullable_non_first_primary_key.reference b/tests/queries/0_stateless/03129_low_cardinality_nullable_non_first_primary_key.reference\nnew file mode 100644\nindex 000000000000..712cd79a3f24\n--- /dev/null\n+++ b/tests/queries/0_stateless/03129_low_cardinality_nullable_non_first_primary_key.reference\n@@ -0,0 +1,1 @@\n+1650\ndiff --git a/tests/queries/0_stateless/03129_low_cardinality_nullable_non_first_primary_key.sql b/tests/queries/0_stateless/03129_low_cardinality_nullable_non_first_primary_key.sql\nnew file mode 100644\nindex 000000000000..457c288da69e\n--- /dev/null\n+++ b/tests/queries/0_stateless/03129_low_cardinality_nullable_non_first_primary_key.sql\n@@ -0,0 +1,10 @@\n+DROP TABLE IF EXISTS small;\n+\n+CREATE TABLE small (`dt` DateTime, `user_email` LowCardinality(Nullable(String)))\n+ENGINE = MergeTree order by (dt, user_email) settings allow_nullable_key = 1, min_bytes_for_wide_part=0, min_rows_for_wide_part=0;\n+\n+INSERT INTO small (dt, user_email) SELECT number, if(number % 3 = 2, NULL, number) FROM numbers(1e2);\n+\n+SELECT SUM(dt::int) FROM small WHERE user_email IS NULL;\n+\n+DROP TABLE small;\n",
  "problem_statement": "`... IS NULL` & `(... IS NULL) > 0` WHERE clauses return different results\n**Describe what's wrong**\r\n\r\n`SELECT COUNT(*) FROM foo WHERE bar IS NULL` gives different results than `SELECT COUNT(*) FROM foo WHERE (bar IS NULL) > 0` when `bar` is `LowCardinality(Nullable(string))`.\r\n\r\nI have two tables with exact data each:\r\n\r\n```sql\r\nCREATE TABLE tmp.small\r\n(\r\n    `dt` DateTime('UTC') DEFAULT now() CODEC(Delta(4), ZSTD(1)),\r\n    `user_email` LowCardinality(Nullable(String))\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY toStartOfInterval(dt, toIntervalHour(6))\r\nORDER BY (dt, user_email)\r\nTTL toDateTime(dt) + toIntervalDay(180)\r\nSETTINGS storage_policy = 'default', allow_nullable_key = 1, index_granularity = 8192\r\n```\r\n\r\n```sql\r\nCREATE TABLE tmp.small_no_low_cardinality\r\n(\r\n    `dt` DateTime('UTC') DEFAULT now() CODEC(Delta(4), ZSTD(1)),\r\n    `user_email` Nullable(String)\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY toStartOfInterval(dt, toIntervalHour(6))\r\nORDER BY (dt, user_email)\r\nTTL toDateTime(dt) + toIntervalDay(180)\r\nSETTINGS storage_policy = 'default', allow_nullable_key = 1, index_granularity = 8192\r\n```\r\n\r\nCount of rows in each:\r\n\r\n```\r\nSELECT COUNT(*)\r\nFROM tmp.small\r\n\r\nQuery id: 000dc867-ab9a-46e4-b193-96401a1bbbc5\r\n\r\n\u250c\u2500\u2500count()\u2500\u2510\r\n\u2502 20926837 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.052 sec. Processed 20.93 million rows, 83.71 MB (404.16 million rows/s., 1.62 GB/s.)\r\nPeak memory usage: 15.67 MiB.\r\n```\r\n\r\n```\r\nSELECT COUNT(*)\r\nFROM tmp.small_no_low_cardinality\r\n\r\nQuery id: d08b64a6-b497-4fc6-a155-22f73c7d4dfa\r\n\r\n\u250c\u2500\u2500count()\u2500\u2510\r\n\u2502 20926837 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.362 sec. Processed 20.93 million rows, 83.71 MB (57.85 million rows/s., 231.39 MB/s.)\r\nPeak memory usage: 15.80 MiB.\r\n```\r\n\r\nOn `small_no_low_cardinality` table the counts of `NOT NULL` user_emails are consistent:\r\n\r\n```\r\nSELECT COUNT(*)\r\nFROM tmp.small_no_low_cardinality\r\nWHERE user_email IS NULL\r\n\r\nQuery id: 39d1039b-6000-4345-8c88-dc18b848e87b\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502 8233409 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.096 sec. Processed 20.93 million rows, 472.06 MB (218.07 million rows/s., 4.92 GB/s.)\r\nPeak memory usage: 15.92 MiB.\r\n```\r\n\r\n```\r\nSELECT COUNT(*)\r\nFROM tmp.small_no_low_cardinality\r\nWHERE (user_email IS NULL) > 0\r\n\r\nQuery id: ba4a8fd8-0f6f-4be3-b39b-94732e71fa7b\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502 8233409 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.442 sec. Processed 20.93 million rows, 472.06 MB (47.37 million rows/s., 1.07 GB/s.)\r\nPeak memory usage: 15.65 MiB.\r\n```\r\n\r\nBut on `small` table it's incosistent:\r\n\r\n```\r\nSELECT COUNT(*)\r\nFROM tmp.small\r\nWHERE user_email IS NULL\r\n\r\nQuery id: a29b1877-e1fa-4a29-933b-b852d883448c\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502 7459983 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.076 sec. Processed 10.82 million rows, 19.59 MB (142.88 million rows/s., 258.74 MB/s.)\r\nPeak memory usage: 10.45 MiB.\r\n```\r\n\r\n```\r\nSELECT COUNT(*)\r\nFROM tmp.small\r\nWHERE (user_email IS NULL) > 0\r\n\r\nQuery id: 9a3ea617-c95c-4222-99e4-179c9b05d70b\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502 8233409 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.059 sec. Processed 20.93 million rows, 40.49 MB (355.71 million rows/s., 688.27 MB/s.)\r\nPeak memory usage: 15.57 MiB.\r\n```\r\n\r\nI'd expect these 2 queries to give the same result - `8233409`.\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes, reproduced on latest version:\r\n\r\n```\r\nSELECT version()\r\n\r\nQuery id: ea01d7cb-99b0-41c4-9c7a-9ad63d8e7cc9\r\n\r\n   \u250c\u2500version()\u2500\u2510\r\n1. \u2502 24.3.2.23 \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.004 sec.\r\n```\r\n\r\nDetected on version 23.11.5.29 too.\r\n\r\n**How to reproduce**\r\n\r\nData generating:\r\n```sql\r\nINSERT INTO tmp.small (dt, user_email)\r\nSELECT\r\n    now() - interval (rand() % (100 * 24 * 3600)) second, -- randomize time, not older than 100 days\r\n    if(rand() % 4 = 0, NULL, concat('user', toString(rand()), '@example.com'))\r\nFROM numbers(20926837);\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe `IS NULL` & `(IS NULL) > 0` WHERE clauses to return the very same results.\r\n\r\n**Error message and/or stacktrace**\r\n\r\nNone\r\n\n",
  "hints_text": "@amosbird https://fiddle.clickhouse.com/fbe0f1c7-ed95-48a9-b426-e7a641fc2318\r\nhttps://fiddle.clickhouse.com/ecedf202-0be2-47c2-9874-2aa770059537",
  "created_at": "2024-04-23T07:25:59Z",
  "modified_files": [
    "src/Storages/MergeTree/KeyCondition.cpp",
    "src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03129_low_cardinality_nullable_non_first_primary_key.reference",
    "b/tests/queries/0_stateless/03129_low_cardinality_nullable_non_first_primary_key.sql"
  ]
}