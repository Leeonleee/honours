{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12989,
  "instance_id": "ClickHouse__ClickHouse-12989",
  "issue_numbers": [
    "12602"
  ],
  "base_commit": "3b5cd9412fb08fd3a7c1d0ba395802cd33a08f3d",
  "patch": "diff --git a/src/Processors/QueryPipeline.cpp b/src/Processors/QueryPipeline.cpp\nindex f3635ac5408e..f063b82e1b2f 100644\n--- a/src/Processors/QueryPipeline.cpp\n+++ b/src/Processors/QueryPipeline.cpp\n@@ -654,7 +654,7 @@ void QueryPipeline::unitePipelines(\n         if (extremes.size() == 1)\n             extremes_port = extremes.back();\n         else\n-            extremes_port = uniteExtremes(extremes, current_header, processors);\n+            extremes_port = uniteExtremes(extremes, common_header, processors);\n     }\n \n     if (!totals.empty())\n@@ -662,7 +662,7 @@ void QueryPipeline::unitePipelines(\n         if (totals.size() == 1)\n             totals_having_port = totals.back();\n         else\n-            totals_having_port = uniteTotals(totals, current_header, processors);\n+            totals_having_port = uniteTotals(totals, common_header, processors);\n     }\n \n     current_header = common_header;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01416_join_totals_header_bug.reference b/tests/queries/0_stateless/01416_join_totals_header_bug.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01416_join_totals_header_bug.sql b/tests/queries/0_stateless/01416_join_totals_header_bug.sql\nnew file mode 100644\nindex 000000000000..089a1d4b72fb\n--- /dev/null\n+++ b/tests/queries/0_stateless/01416_join_totals_header_bug.sql\n@@ -0,0 +1,63 @@\n+DROP TABLE IF EXISTS tableCommon;\n+DROP TABLE IF EXISTS tableTrees;\n+DROP TABLE IF EXISTS tableFlowers;\n+\n+CREATE TABLE tableCommon (`key` FixedString(15), `value` Nullable(Int8)) ENGINE = Log();\n+CREATE TABLE tableTrees (`key` FixedString(15), `name` Nullable(Int8), `name2` Nullable(Int8)) ENGINE = Log();\n+CREATE TABLE tableFlowers (`key` FixedString(15), `name` Nullable(Int8)) ENGINE = Log();\n+\n+SELECT * FROM (\n+    SELECT common.key, common.value, trees.name, trees.name2\n+    FROM (\n+\tSELECT *\n+\tFROM tableCommon\n+    ) as common\n+    INNER JOIN (\n+\tSELECT *\n+\tFROM tableTrees\n+    ) trees ON (common.key = trees.key)\n+)\n+UNION ALL\n+(\n+    SELECT common.key, common.value, \n+    null as name, null as name2 \n+    \n+    FROM (\n+\tSELECT *\n+\tFROM tableCommon\n+    ) as common\n+    INNER JOIN (\n+\tSELECT *\n+\tFROM tableFlowers\n+    ) flowers ON (common.key = flowers.key)\n+);\n+\n+SELECT * FROM (\n+    SELECT common.key, common.value, trees.name, trees.name2\n+    FROM (\n+\tSELECT *\n+\tFROM tableCommon\n+    ) as common\n+    INNER JOIN (\n+\tSELECT *\n+\tFROM tableTrees\n+    ) trees ON (common.key = trees.key)\n+)\n+UNION ALL\n+(\n+    SELECT common.key, common.value, \n+    flowers.name, null as name2\n+\n+    FROM (\n+\tSELECT *\n+\tFROM tableCommon\n+    ) as common\n+    INNER JOIN (\n+\tSELECT *\n+\tFROM tableFlowers\n+    ) flowers ON (common.key = flowers.key)\n+);\n+\n+DROP TABLE IF EXISTS tableCommon;\n+DROP TABLE IF EXISTS tableTrees;\n+DROP TABLE IF EXISTS tableFlowers;\n",
  "problem_statement": "UNION ALL + INNER JOIN = Block structure mismatch\n**Describe the unexpected behaviour**\r\n\r\nUnion All in combination with joins breaks when upgrading to Clickhouse 20.5.2.7\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use: 20.5.2.7\r\n* Which interface to use, if matters: HTTP (but should not matter)\r\n* Non-default settings, if any (none that I am aware of)\r\n\r\nPlease see the following queries:\r\n\r\n```sql\r\nCREATE TABLE tableCommon (\r\n\t`key` FixedString(15),\r\n\t`value` Nullable(Int8)\r\n) ENGINE = Log();\r\n\r\nCREATE TABLE tableTrees (\r\n\t`key` FixedString(15),\r\n\t`name` Nullable(Int8),\r\n\t`name2` Nullable(Int8)\r\n) ENGINE = Log();\r\n\r\nCREATE TABLE tableFlowers (\r\n\t`key` FixedString(15),\r\n\t`name` Nullable(Int8)\r\n) ENGINE = Log()\r\n;\r\n\r\nSELECT * FROM (\r\n\tSELECT common.key, common.value, trees.name, trees.name2\r\n\tFROM (\r\n\t\tSELECT *\r\n\t\tFROM tableCommon\r\n\t) as common\r\n\tINNER JOIN (\r\n\t\tSELECT *\r\n\t\tFROM tableTrees\r\n\t) trees ON (common.key = trees.key)\r\n)\r\nUNION ALL\r\n(\r\n\tSELECT common.key, common.value, \r\n\t-- Variant 1\r\n\tnull as name, null as name2 \r\n\t\r\n\t-- OR Variant 2\r\n\t-- flowers.name, null as name2\r\n\tFROM (\r\n\t\tSELECT *\r\n\t\tFROM tableCommon\r\n\t) as common\r\n\tINNER JOIN (\r\n\t\tSELECT *\r\n\t\tFROM tableFlowers\r\n\t) flowers ON (common.key = flowers.key)\r\n)\r\n```\r\n\r\n**Expected behavior**\r\nThe query should run without an error.\r\n\r\n**Error message and/or stacktrace**\r\nThe query returns the following error:\r\n```\r\nClickHouse exception, code: 171, host: my.clickhouse.host, port: 8080; Code: 171, e.displayText() = DB::Exception: Block structure mismatch in  function connect between Converting and Concat stream: different number of columns:\r\n\r\nkey FixedString(15) FixedString(size = 0), value Nullable(Int8) Nullable(size = 0, Int8(size = 0), UInt8(size = 0)), name Nullable(Int8) Nullable(size = 0, Int8(size = 0), UInt8(size = 0)), name2 Nullable(Int8) Nullable(size = 0, Int8(size = 0), UInt8(size = 0)) (version 20.5.2.7 (official build))\r\n```\r\n\r\n**Additional context**\r\nAs you can see, there is no data in play at all. The error message is generated just from the raw structure. The first and the second part of the `UNION ALL` work when running them on their own.\r\n\r\nCommenting out the last `INNER JOIN` (the one with the alias `flowers`) makes the issue disappear. This would also mean that the `null as name, null as name2` is not the culprit here.\r\n\n",
  "hints_text": "I have the same error\r\nver 20.5.3.27\nSmaller sample\r\n\r\n```\r\nSELECT * FROM (\r\n    SELECT value\r\n    FROM (SELECT 0 as key, 1 as value) as common\r\n    INNER JOIN (SELECT 0 as key, 2 as name) trees\r\n    ON (common.key = trees.key)\r\n)\r\nUNION ALL\r\n(\r\n    SELECT value\r\n    FROM (SELECT 1 as key, 3 as value) as common\r\n    INNER JOIN (SELECT 1 as key) flowers\r\n    ON (common.key = flowers.key)\r\n);\r\n```",
  "created_at": "2020-07-28T10:47:26Z"
}