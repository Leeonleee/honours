{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49417,
  "instance_id": "ClickHouse__ClickHouse-49417",
  "issue_numbers": [
    "49150"
  ],
  "base_commit": "2aa8619534eb270feb2d0fea27fdb8cc6b8d3703",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp b/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\nindex f0795aebf647..931e1ae1dd8f 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\n@@ -582,6 +582,9 @@ bool optimizeUseAggregateProjections(QueryPlan::Node & node, QueryPlan::Nodes &\n     ContextPtr context = reading->getContext();\n     MergeTreeDataSelectExecutor reader(reading->getMergeTreeData());\n \n+    auto ordinary_reading_select_result = reading->selectRangesToRead(parts);\n+    size_t ordinary_reading_marks = ordinary_reading_select_result->marks();\n+\n     /// Selecting best candidate.\n     for (auto & candidate : candidates.real)\n     {\n@@ -597,12 +600,18 @@ bool optimizeUseAggregateProjections(QueryPlan::Node & node, QueryPlan::Nodes &\n         if (!analyzed)\n             continue;\n \n+        if (candidate.sum_marks > ordinary_reading_marks)\n+            continue;\n+\n         if (best_candidate == nullptr || best_candidate->sum_marks > candidate.sum_marks)\n             best_candidate = &candidate;\n     }\n \n     if (!best_candidate)\n+    {\n+        reading->setAnalyzedResult(std::move(ordinary_reading_select_result));\n         return false;\n+    }\n \n     QueryPlanStepPtr projection_reading;\n     bool has_ordinary_parts;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02725_agg_projection_resprect_PK.reference b/tests/queries/0_stateless/02725_agg_projection_resprect_PK.reference\nnew file mode 100644\nindex 000000000000..e6b95502e1ea\n--- /dev/null\n+++ b/tests/queries/0_stateless/02725_agg_projection_resprect_PK.reference\n@@ -0,0 +1,2 @@\n+      ReadFromMergeTree (p1)\n+          Granules: 1/12\ndiff --git a/tests/queries/0_stateless/02725_agg_projection_resprect_PK.sql b/tests/queries/0_stateless/02725_agg_projection_resprect_PK.sql\nnew file mode 100644\nindex 000000000000..a2355f78f4c4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02725_agg_projection_resprect_PK.sql\n@@ -0,0 +1,32 @@\n+-- Tags: no-random-merge-tree-settings\n+\n+DROP TABLE IF EXISTS t0;\n+\n+CREATE TABLE t0\n+(\n+    c1 Int64,\n+    c2 Int64,\n+    c3 Int64,\n+    PROJECTION p1\n+    (\n+        SELECT\n+            c1,\n+            c2,\n+            sum(c3)\n+        GROUP BY\n+            c2,\n+            c1\n+    )\n+)\n+ENGINE = MergeTree ORDER BY (c1, c2) settings min_bytes_for_wide_part = 10485760, min_rows_for_wide_part = 0;\n+\n+INSERT INTO t0 SELECT\n+    number,\n+    -number,\n+    number\n+FROM numbers_mt(1e5);\n+\n+select * from (EXPLAIN indexes = 1 SELECT c1, sum(c3) FROM t0 GROUP BY c1) where explain like '%ReadFromMergeTree%';\n+select * from (EXPLAIN indexes = 1 SELECT c1, sum(c3) FROM t0 WHERE c1 = 100 GROUP BY c1) where explain like '%Granules%';\n+\n+DROP TABLE t0;\n",
  "problem_statement": "Projection makes things worse when aggregation matches but filter condition can't be applied to primary key\n```\r\nCREATE TABLE t0\r\n(\r\n    `c1` Int64,\r\n    `c2` Int64,\r\n    `c3` Int64,\r\n    `c4` Int64,\r\n    PROJECTION p1\r\n    (\r\n        SELECT\r\n            c1,\r\n            c2,\r\n            sum(c4)\r\n        GROUP BY\r\n            c2,\r\n            c1\r\n    )\r\n)\r\nENGINE = MergeTree\r\nORDER BY (c1, c2);\r\n\r\nINSERT INTO t0 SELECT\r\n    number,\r\n    rand(1),\r\n    rand(2),\r\n    rand(3)\r\nFROM numbers_mt(10000000);\r\n```\r\n\r\n```\r\nSELECT\r\n    c1,\r\n    sum(c4)\r\nFROM t0\r\nWHERE c1 = 100\r\nGROUP BY c1\r\nSETTINGS allow_experimental_projection_optimization = 0\r\n\r\nQuery id: b7e8c17b-069a-4213-a455-2e452e7e699a\r\n\r\n\u250c\u2500\u2500c1\u2500\u252c\u2500\u2500\u2500\u2500sum(c4)\u2500\u2510\r\n\u2502 100 \u2502 3027309634 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.004 sec. Processed 8.19 thousand rows, 66.34 KB (2.28 million rows/s., 18.47 MB/s.)\r\n\r\nip-172-31-38-198.us-east-2.compute.internal :) SELECT c1, sum(c4) FROM t0 WHERE c1=100 GROUP BY c1 SETTINGS allow_experimental_projection_optimization=1\r\n\r\nSELECT\r\n    c1,\r\n    sum(c4)\r\nFROM t0\r\nWHERE c1 = 100\r\nGROUP BY c1\r\nSETTINGS allow_experimental_projection_optimization = 1\r\n\r\nQuery id: f0a793c5-5fed-4b6c-91ef-9b7e336948e1\r\n\r\n\u250c\u2500\u2500c1\u2500\u252c\u2500\u2500\u2500\u2500sum(c4)\u2500\u2510\r\n\u2502 100 \u2502 3027309634 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.040 sec. Processed 10.00 million rows, 302.36 MB (251.43 million rows/s., 7.60 GB/s.)\r\n```\r\n\r\n```\r\nEXPLAIN\r\nSELECT\r\n    c1,\r\n    sum(c4)\r\nFROM t0\r\nWHERE c1 = 100\r\nGROUP BY c1\r\n\r\nQuery id: 3e90cd34-79b8-4a29-a893-49d85811e0ab\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 Expression ((Projection + Before ORDER BY)) \u2502\r\n\u2502   Aggregating                               \u2502\r\n\u2502     Filter                                  \u2502\r\n\u2502       ReadFromMergeTree (p1)                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n4 rows in set. Elapsed: 0.004 sec.\r\n```\r\np1 is used and we read all the data from projection instead of couple of granules and aggregate them.\n",
  "hints_text": "22.8 not affected\r\nhttps://fiddle.clickhouse.com/138a9ed7-0e64-4fa4-9794-643420423160\r\n22.9 not affected \r\nhttps://fiddle.clickhouse.com/87b881c3-fb56-431c-a1bd-22f7a43b232a\r\n22.10 not affected\r\nhttps://fiddle.clickhouse.com/db58f82c-c6d3-407b-983c-39a6ee27c066\r\n22.11 not affected\r\nhttps://fiddle.clickhouse.com/db58f82c-c6d3-407b-983c-39a6ee27c066\r\n22.12 not affected\r\nhttps://fiddle.clickhouse.com/02236887-6cd1-4506-9c8a-f2685a66f69a\r\n23.1 not affected\r\nhttps://fiddle.clickhouse.com/2cb49609-9913-4e7f-b7d8-d8ead93fd943\r\n\r\n\r\n23.2 affected\r\nhttps://fiddle.clickhouse.com/fd5fd87c-065a-4529-b298-f01b54e54949",
  "created_at": "2023-05-02T15:02:25Z"
}