{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66579,
  "instance_id": "ClickHouse__ClickHouse-66579",
  "issue_numbers": [
    "66128",
    "66121",
    "65596"
  ],
  "base_commit": "3d00badef7a3343c45a703db604dbbb9d6014a77",
  "patch": "diff --git a/src/Columns/ColumnAggregateFunction.cpp b/src/Columns/ColumnAggregateFunction.cpp\nindex cfd07c27765c..33bd1266c904 100644\n--- a/src/Columns/ColumnAggregateFunction.cpp\n+++ b/src/Columns/ColumnAggregateFunction.cpp\n@@ -366,13 +366,10 @@ void ColumnAggregateFunction::updateHashWithValue(size_t n, SipHash & hash) cons\n     hash.update(wbuf.str().c_str(), wbuf.str().size());\n }\n \n-void ColumnAggregateFunction::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnAggregateFunction::getWeakHash32() const\n {\n     auto s = data.size();\n-    if (hash.getData().size() != data.size())\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, hash size is {}\", std::to_string(s), hash.getData().size());\n-\n+    WeakHash32 hash(s);\n     auto & hash_data = hash.getData();\n \n     std::vector<UInt8> v;\n@@ -383,6 +380,8 @@ void ColumnAggregateFunction::updateWeakHash32(WeakHash32 & hash) const\n         wbuf.finalize();\n         hash_data[i] = ::updateWeakHash32(v.data(), v.size(), hash_data[i]);\n     }\n+\n+    return hash;\n }\n \n void ColumnAggregateFunction::updateHashFast(SipHash & hash) const\ndiff --git a/src/Columns/ColumnAggregateFunction.h b/src/Columns/ColumnAggregateFunction.h\nindex 1be7a862438c..330a707b75c4 100644\n--- a/src/Columns/ColumnAggregateFunction.h\n+++ b/src/Columns/ColumnAggregateFunction.h\n@@ -177,7 +177,7 @@ class ColumnAggregateFunction final : public COWHelper<IColumnHelper<ColumnAggre\n \n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n \n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n \n     void updateHashFast(SipHash & hash) const override;\n \ndiff --git a/src/Columns/ColumnArray.cpp b/src/Columns/ColumnArray.cpp\nindex 5d7350f3a798..9203fb8042f8 100644\n--- a/src/Columns/ColumnArray.cpp\n+++ b/src/Columns/ColumnArray.cpp\n@@ -271,15 +271,12 @@ void ColumnArray::updateHashWithValue(size_t n, SipHash & hash) const\n         getData().updateHashWithValue(offset + i, hash);\n }\n \n-void ColumnArray::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnArray::getWeakHash32() const\n {\n     auto s = offsets->size();\n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, hash size is {}\", s, hash.getData().size());\n+    WeakHash32 hash(s);\n \n-    WeakHash32 internal_hash(data->size());\n-    data->updateWeakHash32(internal_hash);\n+    WeakHash32 internal_hash = data->getWeakHash32();\n \n     Offset prev_offset = 0;\n     const auto & offsets_data = getOffsets();\n@@ -300,6 +297,8 @@ void ColumnArray::updateWeakHash32(WeakHash32 & hash) const\n \n         prev_offset = offsets_data[i];\n     }\n+\n+    return hash;\n }\n \n void ColumnArray::updateHashFast(SipHash & hash) const\ndiff --git a/src/Columns/ColumnArray.h b/src/Columns/ColumnArray.h\nindex 6cd3e2f6c3b4..5e01b9144d78 100644\n--- a/src/Columns/ColumnArray.h\n+++ b/src/Columns/ColumnArray.h\n@@ -82,7 +82,7 @@ class ColumnArray final : public COWHelper<IColumnHelper<ColumnArray>, ColumnArr\n     const char * deserializeAndInsertFromArena(const char * pos) override;\n     const char * skipSerializedInArena(const char * pos) const override;\n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n     void updateHashFast(SipHash & hash) const override;\n #if !defined(ABORT_ON_LOGICAL_ERROR)\n     void insertRangeFrom(const IColumn & src, size_t start, size_t length) override;\ndiff --git a/src/Columns/ColumnCompressed.h b/src/Columns/ColumnCompressed.h\nindex 5e455709fec5..194701133949 100644\n--- a/src/Columns/ColumnCompressed.h\n+++ b/src/Columns/ColumnCompressed.h\n@@ -3,6 +3,7 @@\n #include <optional>\n #include <Core/Field.h>\n #include <Columns/IColumn.h>\n+#include <Common/WeakHash.h>\n #include <IO/BufferWithOwnMemory.h>\n \n \n@@ -98,7 +99,7 @@ class ColumnCompressed : public COWHelper<IColumnHelper<ColumnCompressed>, Colum\n     const char * deserializeAndInsertFromArena(const char *) override { throwMustBeDecompressed(); }\n     const char * skipSerializedInArena(const char *) const override { throwMustBeDecompressed(); }\n     void updateHashWithValue(size_t, SipHash &) const override { throwMustBeDecompressed(); }\n-    void updateWeakHash32(WeakHash32 &) const override { throwMustBeDecompressed(); }\n+    WeakHash32 getWeakHash32() const override { throwMustBeDecompressed(); }\n     void updateHashFast(SipHash &) const override { throwMustBeDecompressed(); }\n     ColumnPtr filter(const Filter &, ssize_t) const override { throwMustBeDecompressed(); }\n     void expand(const Filter &, bool) override { throwMustBeDecompressed(); }\ndiff --git a/src/Columns/ColumnConst.cpp b/src/Columns/ColumnConst.cpp\nindex f2cea83db0e3..84427e7be2bc 100644\n--- a/src/Columns/ColumnConst.cpp\n+++ b/src/Columns/ColumnConst.cpp\n@@ -137,18 +137,10 @@ void ColumnConst::updatePermutation(PermutationSortDirection /*direction*/, Perm\n {\n }\n \n-void ColumnConst::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnConst::getWeakHash32() const\n {\n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, hash size is {}\", std::to_string(s), std::to_string(hash.getData().size()));\n-\n-    WeakHash32 element_hash(1);\n-    data->updateWeakHash32(element_hash);\n-    size_t data_hash = element_hash.getData()[0];\n-\n-    for (auto & value : hash.getData())\n-        value = static_cast<UInt32>(intHashCRC32(data_hash, value));\n+    WeakHash32 element_hash = data->getWeakHash32();\n+    return WeakHash32(s, element_hash.getData()[0]);\n }\n \n void ColumnConst::compareColumn(\ndiff --git a/src/Columns/ColumnConst.h b/src/Columns/ColumnConst.h\nindex b55a1f42037b..65ce53687b9b 100644\n--- a/src/Columns/ColumnConst.h\n+++ b/src/Columns/ColumnConst.h\n@@ -204,7 +204,7 @@ class ColumnConst final : public COWHelper<IColumnHelper<ColumnConst>, ColumnCon\n         data->updateHashWithValue(0, hash);\n     }\n \n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n \n     void updateHashFast(SipHash & hash) const override\n     {\ndiff --git a/src/Columns/ColumnDecimal.cpp b/src/Columns/ColumnDecimal.cpp\nindex cf413f790a78..e27807950ae8 100644\n--- a/src/Columns/ColumnDecimal.cpp\n+++ b/src/Columns/ColumnDecimal.cpp\n@@ -28,7 +28,6 @@ namespace ErrorCodes\n     extern const int PARAMETER_OUT_OF_BOUND;\n     extern const int SIZES_OF_COLUMNS_DOESNT_MATCH;\n     extern const int NOT_IMPLEMENTED;\n-    extern const int LOGICAL_ERROR;\n }\n \n template <is_decimal T>\n@@ -76,13 +75,10 @@ void ColumnDecimal<T>::updateHashWithValue(size_t n, SipHash & hash) const\n }\n \n template <is_decimal T>\n-void ColumnDecimal<T>::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnDecimal<T>::getWeakHash32() const\n {\n     auto s = data.size();\n-\n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, hash size is {}\", std::to_string(s), std::to_string(hash.getData().size()));\n+    WeakHash32 hash(s);\n \n     const T * begin = data.data();\n     const T * end = begin + s;\n@@ -94,6 +90,8 @@ void ColumnDecimal<T>::updateWeakHash32(WeakHash32 & hash) const\n         ++begin;\n         ++hash_data;\n     }\n+\n+    return hash;\n }\n \n template <is_decimal T>\ndiff --git a/src/Columns/ColumnDecimal.h b/src/Columns/ColumnDecimal.h\nindex 32efeb643a60..eb8a305a822d 100644\n--- a/src/Columns/ColumnDecimal.h\n+++ b/src/Columns/ColumnDecimal.h\n@@ -102,7 +102,7 @@ class ColumnDecimal final : public COWHelper<IColumnHelper<ColumnDecimal<T>, Col\n     const char * deserializeAndInsertFromArena(const char * pos) override;\n     const char * skipSerializedInArena(const char * pos) const override;\n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n     void updateHashFast(SipHash & hash) const override;\n #if !defined(ABORT_ON_LOGICAL_ERROR)\n     int compareAt(size_t n, size_t m, const IColumn & rhs_, int nan_direction_hint) const override;\ndiff --git a/src/Columns/ColumnDynamic.h b/src/Columns/ColumnDynamic.h\nindex 9abddc7a26d2..6f09abb945a4 100644\n--- a/src/Columns/ColumnDynamic.h\n+++ b/src/Columns/ColumnDynamic.h\n@@ -4,6 +4,7 @@\n #include <Columns/ColumnVector.h>\n #include <Columns/ColumnVariant.h>\n #include <DataTypes/IDataType.h>\n+#include <Common/WeakHash.h>\n \n \n namespace DB\n@@ -174,9 +175,9 @@ class ColumnDynamic final : public COWHelper<IColumnHelper<ColumnDynamic>, Colum\n \n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n \n-    void updateWeakHash32(WeakHash32 & hash) const override\n+    WeakHash32 getWeakHash32() const override\n     {\n-        variant_column->updateWeakHash32(hash);\n+        return variant_column->getWeakHash32();\n     }\n \n     void updateHashFast(SipHash & hash) const override\ndiff --git a/src/Columns/ColumnFixedString.cpp b/src/Columns/ColumnFixedString.cpp\nindex 1c2de203a946..4d17eb0bebd0 100644\n--- a/src/Columns/ColumnFixedString.cpp\n+++ b/src/Columns/ColumnFixedString.cpp\n@@ -137,14 +137,10 @@ void ColumnFixedString::updateHashWithValue(size_t index, SipHash & hash) const\n     hash.update(reinterpret_cast<const char *>(&chars[n * index]), n);\n }\n \n-void ColumnFixedString::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnFixedString::getWeakHash32() const\n {\n     auto s = size();\n-\n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, \"\n-                        \"hash size is {}\", std::to_string(s), std::to_string(hash.getData().size()));\n+    WeakHash32 hash(s);\n \n     const UInt8 * pos = chars.data();\n     UInt32 * hash_data = hash.getData().data();\n@@ -156,6 +152,8 @@ void ColumnFixedString::updateWeakHash32(WeakHash32 & hash) const\n         pos += n;\n         ++hash_data;\n     }\n+\n+    return hash;\n }\n \n void ColumnFixedString::updateHashFast(SipHash & hash) const\ndiff --git a/src/Columns/ColumnFixedString.h b/src/Columns/ColumnFixedString.h\nindex 6e88136fc50c..630c6c1c0a60 100644\n--- a/src/Columns/ColumnFixedString.h\n+++ b/src/Columns/ColumnFixedString.h\n@@ -133,7 +133,7 @@ class ColumnFixedString final : public COWHelper<IColumnHelper<ColumnFixedString\n \n     void updateHashWithValue(size_t index, SipHash & hash) const override;\n \n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n \n     void updateHashFast(SipHash & hash) const override;\n \ndiff --git a/src/Columns/ColumnFunction.h b/src/Columns/ColumnFunction.h\nindex ba924c49a82a..dcd67aecad74 100644\n--- a/src/Columns/ColumnFunction.h\n+++ b/src/Columns/ColumnFunction.h\n@@ -4,6 +4,7 @@\n #include <Core/NamesAndTypes.h>\n #include <Core/ColumnsWithTypeAndName.h>\n #include <Columns/IColumn.h>\n+#include <Common/WeakHash.h>\n \n \n namespace DB\n@@ -130,9 +131,9 @@ class ColumnFunction final : public COWHelper<IColumnHelper<ColumnFunction>, Col\n         throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"updateHashWithValue is not implemented for {}\", getName());\n     }\n \n-    void updateWeakHash32(WeakHash32 &) const override\n+    WeakHash32 getWeakHash32() const override\n     {\n-        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"updateWeakHash32 is not implemented for {}\", getName());\n+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"getWeakHash32 is not implemented for {}\", getName());\n     }\n \n     void updateHashFast(SipHash &) const override\ndiff --git a/src/Columns/ColumnLowCardinality.cpp b/src/Columns/ColumnLowCardinality.cpp\nindex eb694a10b0ff..49ce948bf786 100644\n--- a/src/Columns/ColumnLowCardinality.cpp\n+++ b/src/Columns/ColumnLowCardinality.cpp\n@@ -7,8 +7,7 @@\n #include <Common/HashTable/HashMap.h>\n #include <Common/WeakHash.h>\n #include <Common/assert_cast.h>\n-#include \"Storages/IndicesDescription.h\"\n-#include \"base/types.h\"\n+#include <base/types.h>\n #include <base/sort.h>\n #include <base/scope_guard.h>\n \n@@ -320,19 +319,10 @@ const char * ColumnLowCardinality::skipSerializedInArena(const char * pos) const\n     return getDictionary().skipSerializedInArena(pos);\n }\n \n-void ColumnLowCardinality::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnLowCardinality::getWeakHash32() const\n {\n-    auto s = size();\n-\n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, hash size is {}\", std::to_string(s), std::to_string(hash.getData().size()));\n-\n-    const auto & dict = getDictionary().getNestedColumn();\n-    WeakHash32 dict_hash(dict->size());\n-    dict->updateWeakHash32(dict_hash);\n-\n-    idx.updateWeakHash(hash, dict_hash);\n+    WeakHash32 dict_hash = getDictionary().getNestedColumn()->getWeakHash32();\n+    return idx.getWeakHash(dict_hash);\n }\n \n void ColumnLowCardinality::updateHashFast(SipHash & hash) const\n@@ -832,10 +822,11 @@ bool ColumnLowCardinality::Index::containsDefault() const\n     return contains;\n }\n \n-void ColumnLowCardinality::Index::updateWeakHash(WeakHash32 & hash, WeakHash32 & dict_hash) const\n+WeakHash32 ColumnLowCardinality::Index::getWeakHash(const WeakHash32 & dict_hash) const\n {\n+    WeakHash32 hash(positions->size());\n     auto & hash_data = hash.getData();\n-    auto & dict_hash_data = dict_hash.getData();\n+    const auto & dict_hash_data = dict_hash.getData();\n \n     auto update_weak_hash = [&](auto x)\n     {\n@@ -844,10 +835,11 @@ void ColumnLowCardinality::Index::updateWeakHash(WeakHash32 & hash, WeakHash32 &\n         auto size = data.size();\n \n         for (size_t i = 0; i < size; ++i)\n-            hash_data[i] = static_cast<UInt32>(intHashCRC32(dict_hash_data[data[i]], hash_data[i]));\n+            hash_data[i] = dict_hash_data[data[i]];\n     };\n \n     callForType(std::move(update_weak_hash), size_of_type);\n+    return hash;\n }\n \n void ColumnLowCardinality::Index::collectSerializedValueSizes(\ndiff --git a/src/Columns/ColumnLowCardinality.h b/src/Columns/ColumnLowCardinality.h\nindex e99be07cd8d3..fb0c1237fcf2 100644\n--- a/src/Columns/ColumnLowCardinality.h\n+++ b/src/Columns/ColumnLowCardinality.h\n@@ -111,7 +111,7 @@ class ColumnLowCardinality final : public COWHelper<IColumnHelper<ColumnLowCardi\n         getDictionary().updateHashWithValue(getIndexes().getUInt(n), hash);\n     }\n \n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n \n     void updateHashFast(SipHash &) const override;\n \n@@ -325,7 +325,7 @@ class ColumnLowCardinality final : public COWHelper<IColumnHelper<ColumnLowCardi\n \n         bool containsDefault() const;\n \n-        void updateWeakHash(WeakHash32 & hash, WeakHash32 & dict_hash) const;\n+        WeakHash32 getWeakHash(const WeakHash32 & dict_hash) const;\n \n         void collectSerializedValueSizes(PaddedPODArray<UInt64> & sizes, const PaddedPODArray<UInt64> & dict_sizes) const;\n \ndiff --git a/src/Columns/ColumnMap.cpp b/src/Columns/ColumnMap.cpp\nindex 2dffddb2dc92..08d7734ac6b1 100644\n--- a/src/Columns/ColumnMap.cpp\n+++ b/src/Columns/ColumnMap.cpp\n@@ -143,9 +143,9 @@ void ColumnMap::updateHashWithValue(size_t n, SipHash & hash) const\n     nested->updateHashWithValue(n, hash);\n }\n \n-void ColumnMap::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnMap::getWeakHash32() const\n {\n-    nested->updateWeakHash32(hash);\n+    return nested->getWeakHash32();\n }\n \n void ColumnMap::updateHashFast(SipHash & hash) const\ndiff --git a/src/Columns/ColumnMap.h b/src/Columns/ColumnMap.h\nindex a54071a2974c..29275e1b5f77 100644\n--- a/src/Columns/ColumnMap.h\n+++ b/src/Columns/ColumnMap.h\n@@ -64,7 +64,7 @@ class ColumnMap final : public COWHelper<IColumnHelper<ColumnMap>, ColumnMap>\n     const char * deserializeAndInsertFromArena(const char * pos) override;\n     const char * skipSerializedInArena(const char * pos) const override;\n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n     void updateHashFast(SipHash & hash) const override;\n \n #if !defined(ABORT_ON_LOGICAL_ERROR)\ndiff --git a/src/Columns/ColumnNullable.cpp b/src/Columns/ColumnNullable.cpp\nindex f060e74b3154..867c9149242f 100644\n--- a/src/Columns/ColumnNullable.cpp\n+++ b/src/Columns/ColumnNullable.cpp\n@@ -56,25 +56,21 @@ void ColumnNullable::updateHashWithValue(size_t n, SipHash & hash) const\n         getNestedColumn().updateHashWithValue(n, hash);\n }\n \n-void ColumnNullable::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnNullable::getWeakHash32() const\n {\n     auto s = size();\n \n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, hash size is {}\", std::to_string(s), std::to_string(hash.getData().size()));\n-\n-    WeakHash32 old_hash = hash;\n-    nested_column->updateWeakHash32(hash);\n+    WeakHash32 hash = nested_column->getWeakHash32();\n \n     const auto & null_map_data = getNullMapData();\n     auto & hash_data = hash.getData();\n-    auto & old_hash_data = old_hash.getData();\n \n-    /// Use old data for nulls.\n+    /// Use default for nulls.\n     for (size_t row = 0; row < s; ++row)\n         if (null_map_data[row])\n-            hash_data[row] = old_hash_data[row];\n+            hash_data[row] = WeakHash32::kDefaultInitialValue;\n+\n+    return hash;\n }\n \n void ColumnNullable::updateHashFast(SipHash & hash) const\ndiff --git a/src/Columns/ColumnNullable.h b/src/Columns/ColumnNullable.h\nindex a6d0483e527f..15bbd8c3b572 100644\n--- a/src/Columns/ColumnNullable.h\n+++ b/src/Columns/ColumnNullable.h\n@@ -133,7 +133,7 @@ class ColumnNullable final : public COWHelper<IColumnHelper<ColumnNullable>, Col\n     void protect() override;\n     ColumnPtr replicate(const Offsets & replicate_offsets) const override;\n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n     void updateHashFast(SipHash & hash) const override;\n     void getExtremes(Field & min, Field & max) const override;\n     // Special function for nullable minmax index\ndiff --git a/src/Columns/ColumnObject.h b/src/Columns/ColumnObject.h\nindex 7470dfa63023..5303adf08812 100644\n--- a/src/Columns/ColumnObject.h\n+++ b/src/Columns/ColumnObject.h\n@@ -5,6 +5,7 @@\n #include <Core/Names.h>\n #include <DataTypes/Serializations/SubcolumnsTree.h>\n #include <Common/PODArray.h>\n+#include <Common/WeakHash.h>\n \n #include <DataTypes/IDataType.h>\n \n@@ -252,7 +253,7 @@ class ColumnObject final : public COWHelper<IColumnHelper<ColumnObject>, ColumnO\n     const char * deserializeAndInsertFromArena(const char *) override { throwMustBeConcrete(); }\n     const char * skipSerializedInArena(const char *) const override { throwMustBeConcrete(); }\n     void updateHashWithValue(size_t, SipHash &) const override { throwMustBeConcrete(); }\n-    void updateWeakHash32(WeakHash32 &) const override { throwMustBeConcrete(); }\n+    WeakHash32 getWeakHash32() const override { throwMustBeConcrete(); }\n     void updateHashFast(SipHash & hash) const override;\n     void expand(const Filter &, bool) override { throwMustBeConcrete(); }\n     bool hasEqualValues() const override { throwMustBeConcrete(); }\ndiff --git a/src/Columns/ColumnSparse.cpp b/src/Columns/ColumnSparse.cpp\nindex 809586d88108..8f98a4433d3b 100644\n--- a/src/Columns/ColumnSparse.cpp\n+++ b/src/Columns/ColumnSparse.cpp\n@@ -678,20 +678,22 @@ void ColumnSparse::updateHashWithValue(size_t n, SipHash & hash) const\n     values->updateHashWithValue(getValueIndex(n), hash);\n }\n \n-void ColumnSparse::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnSparse::getWeakHash32() const\n {\n-    if (hash.getData().size() != _size)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-        \"column size is {}, hash size is {}\", _size, hash.getData().size());\n+    WeakHash32 values_hash = values->getWeakHash32();\n+    WeakHash32 hash(size());\n \n-    auto offset_it = begin();\n     auto & hash_data = hash.getData();\n+    auto & values_hash_data = values_hash.getData();\n+\n+    auto offset_it = begin();\n     for (size_t i = 0; i < _size; ++i, ++offset_it)\n     {\n         size_t value_index = offset_it.getValueIndex();\n-        auto data_ref = values->getDataAt(value_index);\n-        hash_data[i] = ::updateWeakHash32(reinterpret_cast<const UInt8 *>(data_ref.data), data_ref.size, hash_data[i]);\n+        hash_data[i] = values_hash_data[value_index];\n     }\n+\n+    return hash;\n }\n \n void ColumnSparse::updateHashFast(SipHash & hash) const\ndiff --git a/src/Columns/ColumnSparse.h b/src/Columns/ColumnSparse.h\nindex 3e34d1de94a1..392a69109562 100644\n--- a/src/Columns/ColumnSparse.h\n+++ b/src/Columns/ColumnSparse.h\n@@ -139,7 +139,7 @@ class ColumnSparse final : public COWHelper<IColumnHelper<ColumnSparse>, ColumnS\n     void protect() override;\n     ColumnPtr replicate(const Offsets & replicate_offsets) const override;\n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n     void updateHashFast(SipHash & hash) const override;\n     void getExtremes(Field & min, Field & max) const override;\n \ndiff --git a/src/Columns/ColumnString.cpp b/src/Columns/ColumnString.cpp\nindex 1eda9714d627..4accfbe8f410 100644\n--- a/src/Columns/ColumnString.cpp\n+++ b/src/Columns/ColumnString.cpp\n@@ -108,13 +108,10 @@ MutableColumnPtr ColumnString::cloneResized(size_t to_size) const\n     return res;\n }\n \n-void ColumnString::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnString::getWeakHash32() const\n {\n     auto s = offsets.size();\n-\n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, hash size is {}\", std::to_string(s), std::to_string(hash.getData().size()));\n+    WeakHash32 hash(s);\n \n     const UInt8 * pos = chars.data();\n     UInt32 * hash_data = hash.getData().data();\n@@ -130,6 +127,8 @@ void ColumnString::updateWeakHash32(WeakHash32 & hash) const\n         prev_offset = offset;\n         ++hash_data;\n     }\n+\n+    return hash;\n }\n \n \ndiff --git a/src/Columns/ColumnString.h b/src/Columns/ColumnString.h\nindex 602ffac65e8c..faaaa8848ca2 100644\n--- a/src/Columns/ColumnString.h\n+++ b/src/Columns/ColumnString.h\n@@ -212,7 +212,7 @@ class ColumnString final : public COWHelper<IColumnHelper<ColumnString>, ColumnS\n         hash.update(reinterpret_cast<const char *>(&chars[offset]), string_size);\n     }\n \n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n \n     void updateHashFast(SipHash & hash) const override\n     {\ndiff --git a/src/Columns/ColumnTuple.cpp b/src/Columns/ColumnTuple.cpp\nindex 9b822d7f570d..cb0b05d21541 100644\n--- a/src/Columns/ColumnTuple.cpp\n+++ b/src/Columns/ColumnTuple.cpp\n@@ -308,16 +308,15 @@ void ColumnTuple::updateHashWithValue(size_t n, SipHash & hash) const\n         column->updateHashWithValue(n, hash);\n }\n \n-void ColumnTuple::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnTuple::getWeakHash32() const\n {\n     auto s = size();\n-\n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, hash size is {}\", std::to_string(s), std::to_string(hash.getData().size()));\n+    WeakHash32 hash(s);\n \n     for (const auto & column : columns)\n-        column->updateWeakHash32(hash);\n+        hash.update(column->getWeakHash32());\n+\n+    return hash;\n }\n \n void ColumnTuple::updateHashFast(SipHash & hash) const\ndiff --git a/src/Columns/ColumnTuple.h b/src/Columns/ColumnTuple.h\nindex 38e479791d40..2fafd93f776f 100644\n--- a/src/Columns/ColumnTuple.h\n+++ b/src/Columns/ColumnTuple.h\n@@ -81,7 +81,7 @@ class ColumnTuple final : public COWHelper<IColumnHelper<ColumnTuple>, ColumnTup\n     const char * deserializeAndInsertFromArena(const char * pos) override;\n     const char * skipSerializedInArena(const char * pos) const override;\n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n     void updateHashFast(SipHash & hash) const override;\n #if !defined(ABORT_ON_LOGICAL_ERROR)\n     void insertRangeFrom(const IColumn & src, size_t start, size_t length) override;\ndiff --git a/src/Columns/ColumnVariant.cpp b/src/Columns/ColumnVariant.cpp\nindex ee5de4c2dde6..8fd6e1bbac1d 100644\n--- a/src/Columns/ColumnVariant.cpp\n+++ b/src/Columns/ColumnVariant.cpp\n@@ -789,36 +789,26 @@ void ColumnVariant::updateHashWithValue(size_t n, SipHash & hash) const\n         variants[localDiscriminatorByGlobal(global_discr)]->updateHashWithValue(offsetAt(n), hash);\n }\n \n-void ColumnVariant::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnVariant::getWeakHash32() const\n {\n     auto s = size();\n \n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                                                   \"column size is {}, hash size is {}\", std::to_string(s), std::to_string(hash.getData().size()));\n-\n     /// If we have only NULLs, keep hash unchanged.\n     if (hasOnlyNulls())\n-        return;\n+        return WeakHash32(s);\n \n     /// Optimization for case when there is only 1 non-empty variant and no NULLs.\n     /// In this case we can just calculate weak hash for this variant.\n     if (auto non_empty_local_discr = getLocalDiscriminatorOfOneNoneEmptyVariantNoNulls())\n-    {\n-        variants[*non_empty_local_discr]->updateWeakHash32(hash);\n-        return;\n-    }\n+        return variants[*non_empty_local_discr]->getWeakHash32();\n \n     /// Calculate weak hash for all variants.\n     std::vector<WeakHash32> nested_hashes;\n     for (const auto & variant : variants)\n-    {\n-        WeakHash32 nested_hash(variant->size());\n-        variant->updateWeakHash32(nested_hash);\n-        nested_hashes.emplace_back(std::move(nested_hash));\n-    }\n+        nested_hashes.emplace_back(variant->getWeakHash32());\n \n     /// For each row hash is a hash of corresponding row from corresponding variant.\n+    WeakHash32 hash(s);\n     auto & hash_data = hash.getData();\n     const auto & local_discriminators_data = getLocalDiscriminators();\n     const auto & offsets_data = getOffsets();\n@@ -827,11 +817,10 @@ void ColumnVariant::updateWeakHash32(WeakHash32 & hash) const\n         Discriminator discr = local_discriminators_data[i];\n         /// Update hash only for non-NULL values\n         if (discr != NULL_DISCRIMINATOR)\n-        {\n-            auto nested_hash = nested_hashes[local_discriminators_data[i]].getData()[offsets_data[i]];\n-            hash_data[i] = static_cast<UInt32>(hashCRC32(nested_hash, hash_data[i]));\n-        }\n+            hash_data[i] = nested_hashes[discr].getData()[offsets_data[i]];\n     }\n+\n+    return hash;\n }\n \n void ColumnVariant::updateHashFast(SipHash & hash) const\ndiff --git a/src/Columns/ColumnVariant.h b/src/Columns/ColumnVariant.h\nindex d91b8e93a7d4..94f3066e676d 100644\n--- a/src/Columns/ColumnVariant.h\n+++ b/src/Columns/ColumnVariant.h\n@@ -213,7 +213,7 @@ class ColumnVariant final : public COWHelper<IColumnHelper<ColumnVariant>, Colum\n     const char * deserializeVariantAndInsertFromArena(Discriminator global_discr, const char * pos);\n     const char * skipSerializedInArena(const char * pos) const override;\n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n     void updateHashFast(SipHash & hash) const override;\n     ColumnPtr filter(const Filter & filt, ssize_t result_size_hint) const override;\n     void expand(const Filter & mask, bool inverted) override;\ndiff --git a/src/Columns/ColumnVector.cpp b/src/Columns/ColumnVector.cpp\nindex 19d1b8009619..185a1e0f615d 100644\n--- a/src/Columns/ColumnVector.cpp\n+++ b/src/Columns/ColumnVector.cpp\n@@ -73,13 +73,10 @@ void ColumnVector<T>::updateHashWithValue(size_t n, SipHash & hash) const\n }\n \n template <typename T>\n-void ColumnVector<T>::updateWeakHash32(WeakHash32 & hash) const\n+WeakHash32 ColumnVector<T>::getWeakHash32() const\n {\n     auto s = data.size();\n-\n-    if (hash.getData().size() != s)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match size of column: \"\n-                        \"column size is {}, hash size is {}\", std::to_string(s), std::to_string(hash.getData().size()));\n+    WeakHash32 hash(s);\n \n     const T * begin = data.data();\n     const T * end = begin + s;\n@@ -91,6 +88,8 @@ void ColumnVector<T>::updateWeakHash32(WeakHash32 & hash) const\n         ++begin;\n         ++hash_data;\n     }\n+\n+    return hash;\n }\n \n template <typename T>\ndiff --git a/src/Columns/ColumnVector.h b/src/Columns/ColumnVector.h\nindex 3a0acf5e312a..c01778ecf326 100644\n--- a/src/Columns/ColumnVector.h\n+++ b/src/Columns/ColumnVector.h\n@@ -114,7 +114,7 @@ class ColumnVector final : public COWHelper<IColumnHelper<ColumnVector<T>, Colum\n \n     void updateHashWithValue(size_t n, SipHash & hash) const override;\n \n-    void updateWeakHash32(WeakHash32 & hash) const override;\n+    WeakHash32 getWeakHash32() const override;\n \n     void updateHashFast(SipHash & hash) const override;\n \ndiff --git a/src/Columns/IColumn.h b/src/Columns/IColumn.h\nindex 4b6f34e5aa29..3798d3b7466f 100644\n--- a/src/Columns/IColumn.h\n+++ b/src/Columns/IColumn.h\n@@ -300,10 +300,10 @@ class IColumn : public COW<IColumn>\n     ///  passed bytes to hash must identify sequence of values unambiguously.\n     virtual void updateHashWithValue(size_t n, SipHash & hash) const = 0;\n \n-    /// Update hash function value. Hash is calculated for each element.\n+    /// Get hash function value. Hash is calculated for each element.\n     /// It's a fast weak hash function. Mainly need to scatter data between threads.\n     /// WeakHash32 must have the same size as column.\n-    virtual void updateWeakHash32(WeakHash32 & hash) const = 0;\n+    virtual WeakHash32 getWeakHash32() const = 0;\n \n     /// Update state of hash with all column.\n     virtual void updateHashFast(SipHash & hash) const = 0;\ndiff --git a/src/Columns/IColumnDummy.h b/src/Columns/IColumnDummy.h\nindex c19fb704d9b2..b18f4fdb3026 100644\n--- a/src/Columns/IColumnDummy.h\n+++ b/src/Columns/IColumnDummy.h\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <Columns/IColumn.h>\n+#include <Common/WeakHash.h>\n \n \n namespace DB\n@@ -63,8 +64,9 @@ class IColumnDummy : public IColumnHelper<IColumnDummy>\n     {\n     }\n \n-    void updateWeakHash32(WeakHash32 & /*hash*/) const override\n+    WeakHash32 getWeakHash32() const override\n     {\n+        return WeakHash32(s);\n     }\n \n     void updateHashFast(SipHash & /*hash*/) const override\ndiff --git a/src/Columns/IColumnUnique.h b/src/Columns/IColumnUnique.h\nindex 3398452b7eed..1b86204f5b1e 100644\n--- a/src/Columns/IColumnUnique.h\n+++ b/src/Columns/IColumnUnique.h\n@@ -1,6 +1,7 @@\n #pragma once\n #include <optional>\n #include <Columns/IColumn.h>\n+#include <Common/WeakHash.h>\n \n namespace DB\n {\n@@ -166,9 +167,9 @@ class IColumnUnique : public IColumn\n         throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Method scatter is not supported for ColumnUnique.\");\n     }\n \n-    void updateWeakHash32(WeakHash32 &) const override\n+    WeakHash32 getWeakHash32() const override\n     {\n-        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Method updateWeakHash32 is not supported for ColumnUnique.\");\n+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Method getWeakHash32 is not supported for ColumnUnique.\");\n     }\n \n     void updateHashFast(SipHash &) const override\ndiff --git a/src/Common/WeakHash.cpp b/src/Common/WeakHash.cpp\nindex 54d973b62961..cb12df84db1b 100644\n--- a/src/Common/WeakHash.cpp\n+++ b/src/Common/WeakHash.cpp\n@@ -1,2 +1,24 @@\n #include <Common/WeakHash.h>\n+#include <Common/Exception.h>\n+#include <Common/HashTable/Hash.h>\n \n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int LOGICAL_ERROR;\n+}\n+\n+void WeakHash32::update(const WeakHash32 & other)\n+{\n+    size_t size = data.size();\n+    if (size != other.data.size())\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Size of WeakHash32 does not match:\"\n+                        \"left size is {}, right size is {}\", size, other.data.size());\n+\n+    for (size_t i = 0; i < size; ++i)\n+        data[i] = static_cast<UInt32>(intHashCRC32(other.data[i], data[i]));\n+}\n+\n+}\ndiff --git a/src/Common/WeakHash.h b/src/Common/WeakHash.h\nindex b59624e64f24..d4a8d63868c1 100644\n--- a/src/Common/WeakHash.h\n+++ b/src/Common/WeakHash.h\n@@ -11,9 +11,8 @@ namespace DB\n /// The main purpose why this class needed is to support data initialization. Initially, every bit is 1.\n class WeakHash32\n {\n-    static constexpr UInt32 kDefaultInitialValue = ~UInt32(0);\n-\n public:\n+    static constexpr UInt32 kDefaultInitialValue = ~UInt32(0);\n \n     using Container = PaddedPODArray<UInt32>;\n \n@@ -22,6 +21,8 @@ class WeakHash32\n \n     void reset(size_t size, UInt32 initial_value = kDefaultInitialValue) { data.assign(size, initial_value); }\n \n+    void update(const WeakHash32 & other);\n+\n     const Container & getData() const { return data; }\n     Container & getData() { return data; }\n \ndiff --git a/src/Interpreters/ConcurrentHashJoin.cpp b/src/Interpreters/ConcurrentHashJoin.cpp\nindex 4493a9f4dbd7..ac940c62a1ab 100644\n--- a/src/Interpreters/ConcurrentHashJoin.cpp\n+++ b/src/Interpreters/ConcurrentHashJoin.cpp\n@@ -310,7 +310,7 @@ IColumn::Selector ConcurrentHashJoin::selectDispatchBlock(const Strings & key_co\n     {\n         const auto & key_col = from_block.getByName(key_name).column->convertToFullColumnIfConst();\n         const auto & key_col_no_lc = recursiveRemoveLowCardinality(recursiveRemoveSparse(key_col));\n-        key_col_no_lc->updateWeakHash32(hash);\n+        hash.update(key_col_no_lc->getWeakHash32());\n     }\n     return hashToSelector(hash, num_shards);\n }\ndiff --git a/src/Interpreters/JoinUtils.cpp b/src/Interpreters/JoinUtils.cpp\nindex 1788c9aca483..180a45d4295b 100644\n--- a/src/Interpreters/JoinUtils.cpp\n+++ b/src/Interpreters/JoinUtils.cpp\n@@ -554,7 +554,7 @@ static Blocks scatterBlockByHashImpl(const Strings & key_columns_names, const Bl\n     for (const auto & key_name : key_columns_names)\n     {\n         ColumnPtr key_col = materializeColumn(block, key_name);\n-        key_col->updateWeakHash32(hash);\n+        hash.update(key_col->getWeakHash32());\n     }\n     auto selector = hashToSelector(hash, sharder);\n \ndiff --git a/src/Processors/Transforms/ScatterByPartitionTransform.cpp b/src/Processors/Transforms/ScatterByPartitionTransform.cpp\nindex 6e3cdc0fda11..16d265c9bcbe 100644\n--- a/src/Processors/Transforms/ScatterByPartitionTransform.cpp\n+++ b/src/Processors/Transforms/ScatterByPartitionTransform.cpp\n@@ -109,7 +109,7 @@ void ScatterByPartitionTransform::generateOutputChunks()\n     hash.reset(num_rows);\n \n     for (const auto & column_number : key_columns)\n-        columns[column_number]->updateWeakHash32(hash);\n+        hash.update(columns[column_number]->getWeakHash32());\n \n     const auto & hash_data = hash.getData();\n     IColumn::Selector selector(num_rows);\n",
  "test_patch": "diff --git a/src/Columns/tests/gtest_weak_hash_32.cpp b/src/Columns/tests/gtest_weak_hash_32.cpp\nindex 2c95998761bd..3143d0ff83cc 100644\n--- a/src/Columns/tests/gtest_weak_hash_32.cpp\n+++ b/src/Columns/tests/gtest_weak_hash_32.cpp\n@@ -60,8 +60,7 @@ TEST(WeakHash32, ColumnVectorU8)\n             data.push_back(i);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -77,8 +76,7 @@ TEST(WeakHash32, ColumnVectorI8)\n             data.push_back(i);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -94,8 +92,7 @@ TEST(WeakHash32, ColumnVectorU16)\n             data.push_back(i);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -111,8 +108,7 @@ TEST(WeakHash32, ColumnVectorI16)\n             data.push_back(i);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -128,8 +124,7 @@ TEST(WeakHash32, ColumnVectorU32)\n             data.push_back(i << 16u);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -145,8 +140,7 @@ TEST(WeakHash32, ColumnVectorI32)\n             data.push_back(i << 16);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -162,8 +156,7 @@ TEST(WeakHash32, ColumnVectorU64)\n             data.push_back(i << 32u);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -179,8 +172,7 @@ TEST(WeakHash32, ColumnVectorI64)\n             data.push_back(i << 32);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -204,8 +196,7 @@ TEST(WeakHash32, ColumnVectorU128)\n         }\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), eq_data);\n }\n@@ -221,8 +212,7 @@ TEST(WeakHash32, ColumnVectorI128)\n             data.push_back(i << 32);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -238,8 +228,7 @@ TEST(WeakHash32, ColumnDecimal32)\n             data.push_back(i << 16);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -255,8 +244,7 @@ TEST(WeakHash32, ColumnDecimal64)\n             data.push_back(i << 32);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -272,8 +260,7 @@ TEST(WeakHash32, ColumnDecimal128)\n             data.push_back(i << 32);\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), col->getData());\n }\n@@ -294,8 +281,7 @@ TEST(WeakHash32, ColumnString1)\n         }\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), data);\n }\n@@ -331,8 +317,7 @@ TEST(WeakHash32, ColumnString2)\n         }\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), data);\n }\n@@ -369,8 +354,7 @@ TEST(WeakHash32, ColumnString3)\n         }\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), data);\n }\n@@ -397,8 +381,7 @@ TEST(WeakHash32, ColumnFixedString)\n         }\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), data);\n }\n@@ -444,8 +427,7 @@ TEST(WeakHash32, ColumnArray)\n \n     auto col_arr = ColumnArray::create(std::move(val), std::move(off));\n \n-    WeakHash32 hash(col_arr->size());\n-    col_arr->updateWeakHash32(hash);\n+    WeakHash32 hash = col_arr->getWeakHash32();\n \n     checkColumn(hash.getData(), eq_data);\n }\n@@ -479,8 +461,7 @@ TEST(WeakHash32, ColumnArray2)\n \n     auto col_arr = ColumnArray::create(std::move(val), std::move(off));\n \n-    WeakHash32 hash(col_arr->size());\n-    col_arr->updateWeakHash32(hash);\n+    WeakHash32 hash = col_arr->getWeakHash32();\n \n     checkColumn(hash.getData(), eq_data);\n }\n@@ -536,8 +517,7 @@ TEST(WeakHash32, ColumnArrayArray)\n     auto col_arr = ColumnArray::create(std::move(val), std::move(off));\n     auto col_arr_arr = ColumnArray::create(std::move(col_arr), std::move(off2));\n \n-    WeakHash32 hash(col_arr_arr->size());\n-    col_arr_arr->updateWeakHash32(hash);\n+    WeakHash32 hash = col_arr_arr->getWeakHash32();\n \n     checkColumn(hash.getData(), eq_data);\n }\n@@ -555,8 +535,7 @@ TEST(WeakHash32, ColumnConst)\n \n     auto col_const = ColumnConst::create(std::move(inner_col), 256);\n \n-    WeakHash32 hash(col_const->size());\n-    col_const->updateWeakHash32(hash);\n+    WeakHash32 hash = col_const->getWeakHash32();\n \n     checkColumn(hash.getData(), data);\n }\n@@ -576,8 +555,7 @@ TEST(WeakHash32, ColumnLowcardinality)\n         }\n     }\n \n-    WeakHash32 hash(col->size());\n-    col->updateWeakHash32(hash);\n+    WeakHash32 hash = col->getWeakHash32();\n \n     checkColumn(hash.getData(), data);\n }\n@@ -602,8 +580,7 @@ TEST(WeakHash32, ColumnNullable)\n \n     auto col_null = ColumnNullable::create(std::move(col), std::move(mask));\n \n-    WeakHash32 hash(col_null->size());\n-    col_null->updateWeakHash32(hash);\n+    WeakHash32 hash = col_null->getWeakHash32();\n \n     checkColumn(hash.getData(), eq);\n }\n@@ -633,8 +610,7 @@ TEST(WeakHash32, ColumnTupleUInt64UInt64)\n     columns.emplace_back(std::move(col2));\n     auto col_tuple = ColumnTuple::create(std::move(columns));\n \n-    WeakHash32 hash(col_tuple->size());\n-    col_tuple->updateWeakHash32(hash);\n+    WeakHash32 hash = col_tuple->getWeakHash32();\n \n     checkColumn(hash.getData(), eq);\n }\n@@ -671,8 +647,7 @@ TEST(WeakHash32, ColumnTupleUInt64String)\n     columns.emplace_back(std::move(col2));\n     auto col_tuple = ColumnTuple::create(std::move(columns));\n \n-    WeakHash32 hash(col_tuple->size());\n-    col_tuple->updateWeakHash32(hash);\n+    WeakHash32 hash = col_tuple->getWeakHash32();\n \n     checkColumn(hash.getData(), eq);\n }\n@@ -709,8 +684,7 @@ TEST(WeakHash32, ColumnTupleUInt64FixedString)\n     columns.emplace_back(std::move(col2));\n     auto col_tuple = ColumnTuple::create(std::move(columns));\n \n-    WeakHash32 hash(col_tuple->size());\n-    col_tuple->updateWeakHash32(hash);\n+    WeakHash32 hash = col_tuple->getWeakHash32();\n \n     checkColumn(hash.getData(), eq);\n }\n@@ -756,8 +730,7 @@ TEST(WeakHash32, ColumnTupleUInt64Array)\n     columns.emplace_back(ColumnArray::create(std::move(val), std::move(off)));\n     auto col_tuple = ColumnTuple::create(std::move(columns));\n \n-    WeakHash32 hash(col_tuple->size());\n-    col_tuple->updateWeakHash32(hash);\n+    WeakHash32 hash = col_tuple->getWeakHash32();\n \n     checkColumn(hash.getData(), eq_data);\n }\ndiff --git a/tests/queries/0_stateless/03205_parallel_window_finctions_and_column_sparse_bug.reference b/tests/queries/0_stateless/03205_parallel_window_finctions_and_column_sparse_bug.reference\nnew file mode 100644\nindex 000000000000..13e229432aea\n--- /dev/null\n+++ b/tests/queries/0_stateless/03205_parallel_window_finctions_and_column_sparse_bug.reference\n@@ -0,0 +1,10 @@\n+false\t1\t1\n+true\t1\t1\n+---\n+false\t1\t1\n+false\t1\t2\n+false\t1\t3\n+true\t1\t1\n+true\t1\t2\n+---\n+-755809149\t0\ndiff --git a/tests/queries/0_stateless/03205_parallel_window_finctions_and_column_sparse_bug.sql b/tests/queries/0_stateless/03205_parallel_window_finctions_and_column_sparse_bug.sql\nnew file mode 100644\nindex 000000000000..4cc54bb5ac23\n--- /dev/null\n+++ b/tests/queries/0_stateless/03205_parallel_window_finctions_and_column_sparse_bug.sql\n@@ -0,0 +1,33 @@\n+create table t(c Int32, d Bool) Engine=MergeTree order by c;\n+system stop merges t;\n+\n+insert into t values (1, 0);\n+insert into t values (1, 0);\n+insert into t values (1, 1);\n+insert into t values (1, 0)(1, 1);\n+\n+SELECT d, c, row_number() over (partition by d order by c) as c8 FROM t qualify c8=1 order by d settings max_threads=2, allow_experimental_analyzer = 1;\n+SELECT '---';\n+SELECT d, c, row_number() over (partition by d order by c) as c8 FROM t order by d, c8 settings max_threads=2;\n+SELECT '---';\n+\n+drop table t;\n+\n+create table t (\n+  c Int32 primary key ,\n+  s Bool ,\n+  w Float64\n+  );\n+\n+system stop merges t;\n+\n+insert into t values(439499072,true,0),(1393290072,true,0);\n+insert into t values(-1317193174,false,0),(1929066636,false,0);\n+insert into t values(-2,false,0),(1962246186,true,0),(2054878592,false,0);\n+insert into t values(-1893563136,true,41.55);\n+insert into t values(-1338380855,true,-0.7),(-991301833,true,0),(-755809149,false,43.18),(-41,true,0),(3,false,0),(255,false,0),(255,false,0),(189195893,false,0),(195550885,false,9223372036854776000);\n+\n+SELECT * FROM (\n+SELECT c, min(w) OVER (PARTITION BY s ORDER BY c ASC, s ASC, w ASC)\n+FROM t limit toUInt64(-1))\n+WHERE c = -755809149;\n",
  "problem_statement": "`min over (partition)` produces unexpected result\n**Describe what's wrong**\r\n`min` produces unexpected result.\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use: `24.5.3.5`\r\n* Which interface to use, if it matters: `MySQL Shell`\r\n* Non-default settings, if any: `distributed_product_mode='allow'`\r\n\r\n* init database:\r\n```sql\r\ncreate database ch_main on cluster default;\r\nuse ch_main;\r\n\r\ncreate table __t_vkx4cc on cluster default ( \r\n  c_ylzjpt Int32 primary key ,\r\n  c_hqfr9 Bool ,\r\n  );\r\n\r\ncreate table t_vkx4cc on cluster default as __t_vkx4cc ENGINE = Distributed(default, ch_main, __t_vkx4cc, c_ylzjpt);\r\n\r\ninsert into t_vkx4cc (c_ylzjpt, c_hqfr9) values \r\n  (255, coalesce(false, false)), \r\n  (-1317193174, coalesce(false, false)), \r\n  (-41, coalesce(true, false)), \r\n  (1929066636, coalesce(false, true));\r\n\r\ninsert into t_vkx4cc (c_ylzjpt, c_hqfr9) values \r\n  (-2, coalesce(false, false)), \r\n  (1962246186, coalesce(true, false)), \r\n  (-991301833, coalesce(true, true)), \r\n  (2054878592, coalesce(false, false));\r\n\r\ninsert into t_vkx4cc (c_ylzjpt, c_hqfr9) values \r\n  (439499072, coalesce((NOT NOT(cast( (6 AND true) as Nullable(Bool)))), true)), \r\n  (1393290072, coalesce((true) \r\n    and ((NOT NOT(cast( (77.66 != 98) as Nullable(Bool))))), false)), \r\n  (3, coalesce((NOT NOT(cast( (6912410221475350151 <= 18.78) as Nullable(Bool)))), true)), \r\n  (189195893, coalesce((NOT NOT(cast( (-26 >= 69.24) as Nullable(Bool)))), true));\r\n\r\nalter table t_vkx4cc on cluster default add column c_zosphq2t1 Float64;\r\n\r\nalter table __t_vkx4cc on cluster default add column c_zosphq2t1 Float64;\r\n\r\ninsert into t_vkx4cc (c_ylzjpt, c_hqfr9, c_zosphq2t1) values \r\n  (-1338380855, coalesce(true, false), -0.7), \r\n  (-755809149, coalesce(false, false), 43.18), \r\n  (-1893563136, coalesce(true, false), 41.55), \r\n  (195550885, coalesce(false, true), 9223372036854775806.7);\r\n```\r\n\r\n* Queries to run that lead to an unexpected result\r\n```sql\r\nSELECT\r\n  c4 as c4, c0 as c0\r\nFROM\r\n  (select  \r\n    ref_0.c_ylzjpt as c0,\r\n    \r\n      min(\r\n        ref_0.c_zosphq2t1) over (partition by ref_0.c_hqfr9 order by ref_0.c_ylzjpt, ref_0.c_hqfr9, ref_0.c_zosphq2t1) as c4\r\n  from \r\n    t_vkx4cc as ref_0\r\n);\r\n```\r\n\r\nprevious SQL produces:\r\n```\r\nmysql> SELECT\r\n    ->   c4 as c4, c0 as c0\r\n    -> FROM\r\n    ->   (select  \r\n    ->     ref_0.c_ylzjpt as c0,\r\n    ->     \r\n    ->       min(\r\n    ->         ref_0.c_zosphq2t1) over (partition by ref_0.c_hqfr9 order by ref_0.c_ylzjpt, ref_0.c_hqfr9, ref_0.c_zosphq2t1) as c4\r\n    ->   from \r\n    ->     t_vkx4cc as ref_0\r\n    -> );\r\n+-------+-------------+\r\n| c4    | c0          |\r\n+-------+-------------+\r\n| 43.18 |  -755809149 |\r\n|     0 |          -2 |\r\n|     0 |         255 |\r\n|     0 |   195550885 |\r\n|     0 |  2054878592 |\r\n| 41.55 | -1893563136 |\r\n|  -0.7 | -1338380855 |\r\n|  -0.7 |  -991301833 |\r\n|  -0.7 |         -41 |\r\n|  -0.7 |   439499072 |\r\n|  -0.7 |  1393290072 |\r\n|  -0.7 |  1962246186 |\r\n|     0 | -1317193174 |\r\n|     0 |           3 |\r\n|     0 |   189195893 |\r\n|     0 |  1929066636 |\r\n+-------+-------------+\r\n16 rows in set (0.00 sec)\r\nRead 16 rows, 222.00 B in 0.005943 sec., 2692 rows/sec., 36.48 KiB/sec.\r\n```\r\n\r\n**Expected behavior**\r\nIn the returned rows, the content of the following row is incorrect.\r\n```\r\n| 43.18 |  -755809149 |\r\n```\r\nThe correct row shoule be:\r\n```\r\n|     0 |  -755809149 |\r\n```\r\n\r\n\r\n**Additional context**\r\ndocker compose config:\r\n```\r\nversion: '3.8'\r\nservices:\r\n  clickhouse-01:\r\n    image: \"clickhouse/clickhouse-server:${CHVER:-latest}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-01\r\n    hostname: clickhouse-01\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.1\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-01/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml\r\n      - ${PWD}/fs/volumes/clickhouse-01/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml\r\n    depends_on:\r\n      - clickhouse-keeper-01\r\n      - clickhouse-keeper-02\r\n      - clickhouse-keeper-03\r\n  clickhouse-02:\r\n    image: \"clickhouse/clickhouse-server:${CHVER:-latest}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-02\r\n    hostname: clickhouse-02\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.2\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-02/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml\r\n      - ${PWD}/fs/volumes/clickhouse-02/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml\r\n    depends_on:\r\n      - clickhouse-keeper-01\r\n      - clickhouse-keeper-02\r\n      - clickhouse-keeper-03\r\n  clickhouse-keeper-01:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-keeper-01\r\n    hostname: clickhouse-keeper-01\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.5\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-01/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n\r\n  clickhouse-keeper-02:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-keeper-02\r\n    hostname: clickhouse-keeper-02\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.6\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-02/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n\r\n  clickhouse-keeper-03:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-keeper-03\r\n    hostname: clickhouse-keeper-03\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.7\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-03/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n\r\nnetworks:\r\n  cluster_2S_1R:\r\n    driver: bridge\r\n    ipam:\r\n      config:\r\n        - subnet: 10.0.7.0/24\r\n          gateway: 10.0.7.254\r\n```\r\n\r\nconfig.xml\r\n```xml\r\n<clickhouse replace=\"true\">\r\n    <logger>\r\n        <level>debug</level>\r\n        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\r\n        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\r\n        <size>1000M</size>\r\n        <count>3</count>\r\n    </logger>\r\n    <display_name>cluster_2S_1R node 1</display_name>\r\n    <listen_host>0.0.0.0</listen_host>\r\n    <http_port>8123</http_port>\r\n    <tcp_port>9000</tcp_port>\r\n    <mysql_port>9004</mysql_port>\r\n    <postgresql_port>9005</postgresql_port>\r\n    <user_directories>\r\n        <users_xml>\r\n            <path>users.xml</path>\r\n        </users_xml>\r\n        <local_directory>\r\n            <path>/var/lib/clickhouse/access/</path>\r\n        </local_directory>\r\n    </user_directories>\r\n    <distributed_ddl>\r\n        <path>/clickhouse/task_queue/ddl</path>\r\n    </distributed_ddl>\r\n    <remote_servers>\r\n        <default>\r\n            <shard>\r\n                <replica>\r\n                    <host>clickhouse-01</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n            <shard>\r\n                <replica>\r\n                    <host>clickhouse-02</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n        </default>\r\n    </remote_servers>\r\n    <zookeeper>\r\n        <node>\r\n            <host>clickhouse-keeper-01</host>\r\n            <port>9181</port>\r\n        </node>\r\n        <node>\r\n            <host>clickhouse-keeper-02</host>\r\n            <port>9181</port>\r\n        </node>\r\n        <node>\r\n            <host>clickhouse-keeper-03</host>\r\n            <port>9181</port>\r\n        </node>\r\n    </zookeeper>\r\n    <macros>\r\n        <shard>01</shard>\r\n        <replica>01</replica>\r\n    </macros>\r\n</clickhouse>\r\n```\r\nusers.xml\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<clickhouse replace=\"true\">\r\n    <profiles>\r\n        <default>\r\n            <max_memory_usage>10000000000</max_memory_usage>\r\n            <use_uncompressed_cache>0</use_uncompressed_cache>\r\n            <load_balancing>in_order</load_balancing>\r\n            <log_queries>1</log_queries>\r\n            <distributed_product_mode>allow</distributed_product_mode>\r\n        </default>\r\n    </profiles>\r\n    <users>\r\n        <default>\r\n            <access_management>1</access_management>\r\n            <profile>default</profile>\r\n            <networks>\r\n                <ip>10.0.0.1/8</ip>\r\n                <ip>127.0.0.1/8</ip>\r\n            </networks>\r\n            <password></password>\r\n            <quota>default</quota>\r\n            <access_management>1</access_management>\r\n            <named_collection_control>1</named_collection_control>\r\n            <show_named_collections>1</show_named_collections>\r\n            <show_named_collections_secrets>1</show_named_collections_secrets>\r\n        </default>\r\n    </users>\r\n    <quotas>\r\n        <default>\r\n            <interval>\r\n                <duration>3600</duration>\r\n                <queries>0</queries>\r\n                <errors>0</errors>\r\n                <result_rows>0</result_rows>\r\n                <read_rows>0</read_rows>\r\n                <execution_time>0</execution_time>\r\n            </interval>\r\n        </default>\r\n    </quotas>\r\n</clickhouse>\r\n```\r\nkeeper_config.xml:\r\n```xml\r\n<clickhouse replace=\"true\">\r\n    <logger>\r\n        <level>information</level>\r\n        <log>/var/log/clickhouse-keeper/clickhouse-keeper.log</log>\r\n        <errorlog>/var/log/clickhouse-keeper/clickhouse-keeper.err.log</errorlog>\r\n        <size>1000M</size>\r\n        <count>3</count>\r\n    </logger>\r\n    <listen_host>::</listen_host>\r\n    <max_thread_pool_size>10000</max_thread_pool_size>\r\n    <keeper_server>\r\n        <tcp_port>9181</tcp_port>\r\n        <server_id>3</server_id>\r\n        <log_storage_path>/var/lib/clickhouse/coordination/log</log_storage_path>\r\n        <snapshot_storage_path>/var/lib/clickhouse/coordination/snapshots</snapshot_storage_path>\r\n        <coordination_settings>\r\n            <operation_timeout_ms>10000</operation_timeout_ms>\r\n            <session_timeout_ms>30000</session_timeout_ms>\r\n            <raft_logs_level>information</raft_logs_level>\r\n        </coordination_settings>\r\n        <raft_configuration>\r\n            <server>\r\n                <id>1</id>\r\n                <hostname>clickhouse-keeper-01</hostname>\r\n                <port>9234</port>\r\n            </server>\r\n            <server>\r\n                <id>2</id>\r\n                <hostname>clickhouse-keeper-02</hostname>\r\n                <port>9234</port>\r\n            </server>\r\n            <server>\r\n                <id>3</id>\r\n                <hostname>clickhouse-keeper-03</hostname>\r\n                <port>9234</port>\r\n            </server>\r\n        </raft_configuration>\r\n    </keeper_server>\r\n</clickhouse>\r\n```\r\n#### about us\r\nWe are the BASS team from the School of Cyber Science and Technology at Beihang University. Our main focus is on system software security, operating systems, and program analysis research, as well as the development of automated program testing frameworks for detecting software defects. Using our self-developed database vulnerability testing tool, we have identified the potential above-mentioned vulnerability that may lead to database logic error.\n`count` produces unexpected result\n**Describe what's wrong**\r\n`count` produces unexpected result.\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use: `24.5.3.5`\r\n* Which interface to use, if it matters: `MySQL Shell`\r\n* Non-default settings, if any: `distributed_product_mode='allow'`\r\n\r\n* init database:\r\n```sql\r\ncreate database ch_main on cluster default;\r\nuse ch_main;\r\n```\r\nThen execute the SQL statements in `init.sql`.\r\n[init.sql.txt](https://github.com/user-attachments/files/16108098/init.sql.txt)\r\n\r\n* Queries to run that lead to an unexpected result\r\n```sql\r\nSELECT DISTINCT\r\n  count(ref_0.c_zosphq2t1) over (partition by ref_0.c_hqfr9 order by ref_0.c_ylzjpt, ref_0.c_hqfr9, ref_0.c_zosphq2t1) as c0,\r\n  ref_0.c_ylzjpt as c1\r\nFROM\r\n  t_vkx4cc as ref_0;\r\n```\r\n\r\nprevious SQL produces:\r\n```\r\nmysql> SELECT DISTINCT\r\n    ->   count(ref_0.c_zosphq2t1) over (partition by ref_0.c_hqfr9 order by ref_0.c_ylzjpt, ref_0.c_hqfr9, ref_0.c_zosphq2t1) as c0,\r\n    ->   ref_0.c_ylzjpt as c1\r\n    -> FROM\r\n    ->   t_vkx4cc as ref_0;\r\n+------+-------------+\r\n| c0   | c1          |\r\n+------+-------------+\r\n|    1 | -1981899149 |\r\n|    2 | -1650266905 |\r\n|    3 | -1646738223 |\r\n|    4 | -1618912877 |\r\n|    5 | -1317193174 |\r\n|    6 | -1219769753 |\r\n|    7 | -1154269118 |\r\n|    8 | -1150980622 |\r\n|    9 | -1098155311 |\r\n|   10 |  -841067875 |\r\n|   11 |  -816935497 |\r\n|   12 |  -599948807 |\r\n|   13 |  -526570556 |\r\n|   14 |  -504713125 |\r\n|   15 |  -411038390 |\r\n|   16 |  -331834394 |\r\n|   17 |  -176934810 |\r\n|   18 |          -2 |\r\n|   19 |           6 |\r\n|   20 |         255 |\r\n|   21 |   406615258 |\r\n|   22 |   541758331 |\r\n|   23 |   897064234 |\r\n|   24 |  1116921321 |\r\n|   25 |  1207796283 |\r\n|   26 |  1603772265 |\r\n|   27 |  1664059402 |\r\n|   28 |  1688303275 |\r\n|   29 |  1913361922 |\r\n|   30 |  1929066636 |\r\n|   31 |  1968095908 |\r\n|   32 |  2054878592 |\r\n|   33 |  2125075305 |\r\n|    1 |   720985423 |\r\n|    2 |   745669725 |\r\n|    1 | -2081147898 |\r\n|    2 | -2051538534 |\r\n|    3 | -1975508531 |\r\n|    4 | -1700730666 |\r\n|    5 | -1465484835 |\r\n|    6 | -1458338029 |\r\n|    7 | -1450619195 |\r\n|    8 | -1365934326 |\r\n|    9 | -1203382363 |\r\n|   10 | -1197430632 |\r\n|   11 | -1176267855 |\r\n|   12 | -1020892864 |\r\n|   13 |  -991301833 |\r\n|   14 |  -685902265 |\r\n|   15 |  -653505826 |\r\n|   16 |  -451392958 |\r\n|   17 |  -262516786 |\r\n|   18 |  -222873194 |\r\n|   19 |  -153185515 |\r\n|   20 |   -74234560 |\r\n|   21 |         -41 |\r\n|   22 |          -6 |\r\n|   23 |          -5 |\r\n|   24 |          -3 |\r\n|   25 |          15 |\r\n|   26 |       65535 |\r\n|   27 |    77089559 |\r\n|   28 |   100663045 |\r\n|   29 |   561061873 |\r\n|   30 |   643897141 |\r\n|   31 |   914629990 |\r\n|   32 |  1159852204 |\r\n|   33 |  1258218855 |\r\n|   34 |  1459407556 |\r\n|   35 |  1936334332 |\r\n|   36 |  1962246186 |\r\n|   37 |  2030467062 |\r\n+------+-------------+\r\n72 rows in set (0.01 sec)\r\nRead 72 rows, 943.00 B in 0.007997 sec., 9003 rows/sec., 115.16 KiB/sec.\r\n\r\n```\r\n\r\n**Expected behavior**\r\nIn the returned rows, the content of the following rows is incorrect.\r\n```\r\n|    1 |   720985423 |\r\n|    2 |   745669725 |\r\n|   23 |   897064234 |\r\n|   24 |  1116921321 |\r\n|   25 |  1207796283 |\r\n|   26 |  1603772265 |\r\n|   27 |  1664059402 |\r\n|   28 |  1688303275 |\r\n|   29 |  1913361922 |\r\n|   30 |  1929066636 |\r\n|   31 |  1968095908 |\r\n|   32 |  2054878592 |\r\n|   33 |  2125075305 |\r\n```\r\nThe correct rows shoule be:\r\n```\r\n|   23 |   720985423 |\r\n|   24 |   745669725 |\r\n|   25 |   897064234 |\r\n|   26 |  1116921321 |\r\n|   27 |  1207796283 |\r\n|   28 |  1603772265 |\r\n|   29 |  1664059402 |\r\n|   30 |  1688303275 |\r\n|   31 |  1913361922 |\r\n|   32 |  1929066636 |\r\n|   33 |  1968095908 |\r\n|   34 |  2054878592 |\r\n|   35 |  2125075305 |\r\n```\r\n\r\n\r\n**Additional context**\r\ndocker compose config:\r\n```\r\nversion: '3.8'\r\nservices:\r\n  clickhouse-01:\r\n    image: \"clickhouse/clickhouse-server:${CHVER:-latest}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-01\r\n    hostname: clickhouse-01\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.1\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-01/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml\r\n      - ${PWD}/fs/volumes/clickhouse-01/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml\r\n    depends_on:\r\n      - clickhouse-keeper-01\r\n      - clickhouse-keeper-02\r\n      - clickhouse-keeper-03\r\n  clickhouse-02:\r\n    image: \"clickhouse/clickhouse-server:${CHVER:-latest}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-02\r\n    hostname: clickhouse-02\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.2\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-02/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml\r\n      - ${PWD}/fs/volumes/clickhouse-02/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml\r\n    depends_on:\r\n      - clickhouse-keeper-01\r\n      - clickhouse-keeper-02\r\n      - clickhouse-keeper-03\r\n  clickhouse-keeper-01:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-keeper-01\r\n    hostname: clickhouse-keeper-01\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.5\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-01/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n\r\n  clickhouse-keeper-02:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-keeper-02\r\n    hostname: clickhouse-keeper-02\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.6\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-02/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n\r\n  clickhouse-keeper-03:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-keeper-03\r\n    hostname: clickhouse-keeper-03\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.7\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-03/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n\r\nnetworks:\r\n  cluster_2S_1R:\r\n    driver: bridge\r\n    ipam:\r\n      config:\r\n        - subnet: 10.0.7.0/24\r\n          gateway: 10.0.7.254\r\n```\r\n\r\nconfig.xml\r\n```xml\r\n<clickhouse replace=\"true\">\r\n    <logger>\r\n        <level>debug</level>\r\n        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\r\n        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\r\n        <size>1000M</size>\r\n        <count>3</count>\r\n    </logger>\r\n    <display_name>cluster_2S_1R node 1</display_name>\r\n    <listen_host>0.0.0.0</listen_host>\r\n    <http_port>8123</http_port>\r\n    <tcp_port>9000</tcp_port>\r\n    <mysql_port>9004</mysql_port>\r\n    <postgresql_port>9005</postgresql_port>\r\n    <user_directories>\r\n        <users_xml>\r\n            <path>users.xml</path>\r\n        </users_xml>\r\n        <local_directory>\r\n            <path>/var/lib/clickhouse/access/</path>\r\n        </local_directory>\r\n    </user_directories>\r\n    <distributed_ddl>\r\n        <path>/clickhouse/task_queue/ddl</path>\r\n    </distributed_ddl>\r\n    <remote_servers>\r\n        <default>\r\n            <shard>\r\n                <replica>\r\n                    <host>clickhouse-01</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n            <shard>\r\n                <replica>\r\n                    <host>clickhouse-02</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n        </default>\r\n    </remote_servers>\r\n    <zookeeper>\r\n        <node>\r\n            <host>clickhouse-keeper-01</host>\r\n            <port>9181</port>\r\n        </node>\r\n        <node>\r\n            <host>clickhouse-keeper-02</host>\r\n            <port>9181</port>\r\n        </node>\r\n        <node>\r\n            <host>clickhouse-keeper-03</host>\r\n            <port>9181</port>\r\n        </node>\r\n    </zookeeper>\r\n    <macros>\r\n        <shard>01</shard>\r\n        <replica>01</replica>\r\n    </macros>\r\n</clickhouse>\r\n```\r\nusers.xml\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<clickhouse replace=\"true\">\r\n    <profiles>\r\n        <default>\r\n            <max_memory_usage>10000000000</max_memory_usage>\r\n            <use_uncompressed_cache>0</use_uncompressed_cache>\r\n            <load_balancing>in_order</load_balancing>\r\n            <log_queries>1</log_queries>\r\n            <distributed_product_mode>allow</distributed_product_mode>\r\n        </default>\r\n    </profiles>\r\n    <users>\r\n        <default>\r\n            <access_management>1</access_management>\r\n            <profile>default</profile>\r\n            <networks>\r\n                <ip>10.0.0.1/8</ip>\r\n                <ip>127.0.0.1/8</ip>\r\n            </networks>\r\n            <password></password>\r\n            <quota>default</quota>\r\n            <access_management>1</access_management>\r\n            <named_collection_control>1</named_collection_control>\r\n            <show_named_collections>1</show_named_collections>\r\n            <show_named_collections_secrets>1</show_named_collections_secrets>\r\n        </default>\r\n    </users>\r\n    <quotas>\r\n        <default>\r\n            <interval>\r\n                <duration>3600</duration>\r\n                <queries>0</queries>\r\n                <errors>0</errors>\r\n                <result_rows>0</result_rows>\r\n                <read_rows>0</read_rows>\r\n                <execution_time>0</execution_time>\r\n            </interval>\r\n        </default>\r\n    </quotas>\r\n</clickhouse>\r\n```\r\nkeeper_config.xml:\r\n```xml\r\n<clickhouse replace=\"true\">\r\n    <logger>\r\n        <level>information</level>\r\n        <log>/var/log/clickhouse-keeper/clickhouse-keeper.log</log>\r\n        <errorlog>/var/log/clickhouse-keeper/clickhouse-keeper.err.log</errorlog>\r\n        <size>1000M</size>\r\n        <count>3</count>\r\n    </logger>\r\n    <listen_host>::</listen_host>\r\n    <max_thread_pool_size>10000</max_thread_pool_size>\r\n    <keeper_server>\r\n        <tcp_port>9181</tcp_port>\r\n        <server_id>3</server_id>\r\n        <log_storage_path>/var/lib/clickhouse/coordination/log</log_storage_path>\r\n        <snapshot_storage_path>/var/lib/clickhouse/coordination/snapshots</snapshot_storage_path>\r\n        <coordination_settings>\r\n            <operation_timeout_ms>10000</operation_timeout_ms>\r\n            <session_timeout_ms>30000</session_timeout_ms>\r\n            <raft_logs_level>information</raft_logs_level>\r\n        </coordination_settings>\r\n        <raft_configuration>\r\n            <server>\r\n                <id>1</id>\r\n                <hostname>clickhouse-keeper-01</hostname>\r\n                <port>9234</port>\r\n            </server>\r\n            <server>\r\n                <id>2</id>\r\n                <hostname>clickhouse-keeper-02</hostname>\r\n                <port>9234</port>\r\n            </server>\r\n            <server>\r\n                <id>3</id>\r\n                <hostname>clickhouse-keeper-03</hostname>\r\n                <port>9234</port>\r\n            </server>\r\n        </raft_configuration>\r\n    </keeper_server>\r\n</clickhouse>\r\n```\r\n#### about us\r\nWe are the BASS team from the School of Cyber Science and Technology at Beihang University. Our main focus is on system software security, operating systems, and program analysis research, as well as the development of automated program testing frameworks for detecting software defects. Using our self-developed database vulnerability testing tool, we have identified the potential above-mentioned vulnerability that may lead to database logic error.\n`first_value` produces unexpected result.\n**Describe what's wrong**\r\n`first_value` produces unexpected result.\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use: `24.5.3.5`\r\n* Which interface to use, if it matters: `MySQL Shell`\r\n* Non-default settings, if any: `distributed_product_mode='allow'`\r\n\r\n* init database:\r\n```sql\r\ncreate database ch_main on cluster default;\r\nuse ch_main;\r\n\r\ncreate table __t_vlb0j97q73 on cluster default ( \r\n  c_krlvf7r Int32 not null ,\r\n  c_j Float64 not null ,\r\n  c_mql9vleain Float64 ,\r\n  c_g12cd6 Bool ,\r\n  c_ybbt4 Int32 primary key ,\r\n  c_au Float64 ,\r\n  c_qkvm Float64 ,\r\n  c_c0 String ,\r\n  c_sv8 Float64 ,\r\n  c_u7rl Int32 not null primary key ,\r\n  );\r\n\r\ncreate table t_vlb0j97q73 on cluster default as __t_vlb0j97q73 ENGINE = Distributed(default, ch_main, __t_vlb0j97q73, c_u7rl);\r\n\r\nalter table t_vlb0j97q73 on cluster default add column c_rvbdzh05z2 Float64;\r\n\r\nalter table __t_vlb0j97q73 on cluster default add column c_rvbdzh05z2 Float64;\r\n\r\n-- sql #200\r\ninsert into t_vlb0j97q73 (c_krlvf7r, c_j, c_mql9vleain, c_g12cd6, c_ybbt4, c_au, c_qkvm, c_c0, c_sv8, c_u7rl, c_rvbdzh05z2) values \r\n  (-1296505474, -9223372036854775808.1, -32766.9, coalesce(false, false), 1705178392, 31.51, 7.25, 'gcb85', 257.5, 1789497921, -4294967297.3), \r\n  (1415982483, 129.4, 72.69, coalesce((NOT NOT(cast( (27.95 < -49) as Nullable(Bool)))), false), 1498165591, -65537.1, 61.3, 'wsa', 2147483649.4, 28, -65537.0), \r\n  (-1, 78.79, 257.3, coalesce(false, false), 27, 35.36, 50.8, 'v', 72.27, 1319586506, 16.97), \r\n  (-943848536, 72.54, 45.4, coalesce((NOT NOT(cast( ((NOT NOT(cast( (4309333590239081003 < 1919386270203424658) as Nullable(Bool)))) >= cast(null as Nullable(UInt16))) as Nullable(Bool)))), false), 1451852280, 95.68, -254.3, 'bwf', 97.19, -385119672, 44.24);\r\n\r\n-- sql #118\r\ninsert into t_vlb0j97q73 (c_krlvf7r, c_j, c_mql9vleain, c_g12cd6, c_ybbt4, c_au, c_qkvm, c_c0, c_sv8, c_u7rl, c_rvbdzh05z2) values \r\n  (1872965090, 4294967296.5, -254.7, coalesce(true, false), 223667259, 257.7, -126.3, 'fppgprme_', 28.86, 1, 23.28), \r\n  (863501642, 64.77, 53.3, coalesce(true, true), 4, 65536.3, 100.87, 'svc0gj', 90.35, -1709612210, 20.44), \r\n  (-930745500, 83.34, 2147483648.100000, coalesce((NOT NOT(cast( (-14272 AND 6) as Nullable(Bool)))), false), -1382928137, 68.79, 3.92, 's', -9223372036854775807.6, 2012296048, -2.0), \r\n  (1029445083, -2147483646.6, 2.5, coalesce((1636710674 between 4096 and -1), true), 1948189386, 99.39, -1.2, 'la', 9223372036854775807.2, -2112636050, 79.89);\r\n\r\n  -- sql #80\r\ninsert into t_vlb0j97q73 (c_krlvf7r, c_j, c_mql9vleain, c_g12cd6, c_ybbt4, c_au, c_qkvm, c_c0, c_sv8, c_u7rl, c_rvbdzh05z2) values \r\n  (-981982931, 35.69, 78.92, coalesce((false) \r\n    or (true), true), 747913102, 100.13, -9223372036854775808.1, 'szclpikm', 24.71, -2070018982, -0.3), \r\n  (931163950, 129.3, 254.2, coalesce((NOT NOT(cast( (7110798446849532427 OR -17266) as Nullable(Bool)))), true), 1853241461, 95.6, 2147483647.4, 'esfz7ac', 128.4, -1051135399, 98.1), \r\n  (1, 73.40, 73.76, coalesce((-811268288 is NULL), false), 682404355, 4294967296.3, 18446744073709551615.5, 'bsqzqh7c32', 18446744073709551616.7, 2016799203, 66.79), \r\n  (-1, 3.76, 74.59, coalesce((NOT NOT(cast( (-2147483649.3 > (1378727582 between 1936442277 and 1418436539)) as Nullable(Bool)))), true), 200763128, -32769.7, 2147483646.1, 'v6', 31.5, 593252920, 51.67);\r\n\r\n\r\n```\r\n\r\n* Queries to run that lead to an unexpected result\r\n```sql\r\nSELECT DISTINCT\r\n  first_value(ref_0.c_u7rl) over (partition by ref_0.c_g12cd6 order by ref_0.c_u7rl) as c7\r\nFROM\r\n  t_vlb0j97q73 as ref_0\r\n;\r\n\r\n```\r\n\r\n**Expected behavior**\r\nprevious SQL produces:\r\n```\r\nmysql> SELECT DISTINCT\r\n    ->   first_value(ref_0.c_u7rl) over (partition by ref_0.c_g12cd6 order by ref_0.c_u7rl) as c7\r\n    -> FROM\r\n    ->   t_vlb0j97q73 as ref_0\r\n    -> ;\r\n+-------------+\r\n| c7          |\r\n+-------------+\r\n|  -385119672 |\r\n| -2070018982 |\r\n| -2112636050 |\r\n+-------------+\r\n3 rows in set (0.01 sec)\r\nRead 196 rows, 986.00 B in 0.008507 sec., 23039 rows/sec., 113.19 KiB/sec.\r\n```\r\n\r\n**However, there are only two possible values for columns used for partitioning:**\r\n\r\n```\r\nmysql> select distinct ref_0.c_g12cd6 from t_vlb0j97q73 as ref_0;\r\n+----------+\r\n| c_g12cd6 |\r\n+----------+\r\n|        0 |\r\n|        1 |\r\n+----------+\r\n2 rows in set (0.01 sec)\r\nRead 12 rows, 26.00 B in 0.007368 sec., 1628 rows/sec., 3.45 KiB/sec.\r\n```\r\n\r\nrows in table:\r\n```\r\nmysql> select ref_0.c_g12cd6, ref_0.c_u7rl from t_vlb0j97q73 as ref_0 order by 1,2;\r\n+----------+-------------+\r\n| c_g12cd6 | c_u7rl      |\r\n+----------+-------------+\r\n|        0 | -2112636050 |\r\n|        0 |  -385119672 |\r\n|        0 |          28 |\r\n|        0 |   593252920 |\r\n|        0 |  1319586506 |\r\n|        0 |  1789497921 |\r\n|        0 |  2016799203 |\r\n|        1 | -2070018982 |\r\n|        1 | -1709612210 |\r\n|        1 | -1051135399 |\r\n|        1 |           1 |\r\n|        1 |  2012296048 |\r\n+----------+-------------+\r\n12 rows in set (0.01 sec)\r\nRead 12 rows, 65.00 B in 0.002577 sec., 4656 rows/sec., 24.63 KiB/sec.\r\n```\r\nTherefore, correct result should be:\r\n```\r\nmysql> SELECT DISTINCT   first_value(ref_0.c_u7rl) over (partition by ref_0.c_g12cd6 order by ref_0.c_u7rl) as c7 FROM   t_vlb0j97q73 as ref_0;\r\n+-------------+\r\n| c7          |\r\n+-------------+\r\n| -2112636050 |\r\n| -2070018982 |\r\n+-------------+\r\n2 rows in set (0.01 sec)\r\nRead 12 rows, 65.00 B in 0.003031 sec., 3959 rows/sec., 20.94 KiB/sec.\r\n```\r\n\r\n\r\n**Additional context**\r\ndocker compose config:\r\n```\r\nversion: '3.8'\r\nservices:\r\n  clickhouse-01:\r\n    image: \"clickhouse/clickhouse-server:${CHVER:-latest}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-01\r\n    hostname: clickhouse-01\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.1\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-01/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml\r\n      - ${PWD}/fs/volumes/clickhouse-01/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml\r\n    depends_on:\r\n      - clickhouse-keeper-01\r\n      - clickhouse-keeper-02\r\n      - clickhouse-keeper-03\r\n  clickhouse-02:\r\n    image: \"clickhouse/clickhouse-server:${CHVER:-latest}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-02\r\n    hostname: clickhouse-02\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.2\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-02/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml\r\n      - ${PWD}/fs/volumes/clickhouse-02/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml\r\n    depends_on:\r\n      - clickhouse-keeper-01\r\n      - clickhouse-keeper-02\r\n      - clickhouse-keeper-03\r\n  clickhouse-keeper-01:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-keeper-01\r\n    hostname: clickhouse-keeper-01\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.5\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-01/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n\r\n  clickhouse-keeper-02:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-keeper-02\r\n    hostname: clickhouse-keeper-02\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.6\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-02/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n\r\n  clickhouse-keeper-03:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101:101\"\r\n    container_name: clickhouse-keeper-03\r\n    hostname: clickhouse-keeper-03\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.7\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-03/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n\r\nnetworks:\r\n  cluster_2S_1R:\r\n    driver: bridge\r\n    ipam:\r\n      config:\r\n        - subnet: 10.0.7.0/24\r\n          gateway: 10.0.7.254\r\n```\r\n\r\nconfig.xml\r\n```xml\r\n<clickhouse replace=\"true\">\r\n    <logger>\r\n        <level>debug</level>\r\n        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\r\n        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\r\n        <size>1000M</size>\r\n        <count>3</count>\r\n    </logger>\r\n    <display_name>cluster_2S_1R node 1</display_name>\r\n    <listen_host>0.0.0.0</listen_host>\r\n    <http_port>8123</http_port>\r\n    <tcp_port>9000</tcp_port>\r\n    <mysql_port>9004</mysql_port>\r\n    <postgresql_port>9005</postgresql_port>\r\n    <user_directories>\r\n        <users_xml>\r\n            <path>users.xml</path>\r\n        </users_xml>\r\n        <local_directory>\r\n            <path>/var/lib/clickhouse/access/</path>\r\n        </local_directory>\r\n    </user_directories>\r\n    <distributed_ddl>\r\n        <path>/clickhouse/task_queue/ddl</path>\r\n    </distributed_ddl>\r\n    <remote_servers>\r\n        <default>\r\n            <shard>\r\n                <replica>\r\n                    <host>clickhouse-01</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n            <shard>\r\n                <replica>\r\n                    <host>clickhouse-02</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n        </default>\r\n    </remote_servers>\r\n    <zookeeper>\r\n        <node>\r\n            <host>clickhouse-keeper-01</host>\r\n            <port>9181</port>\r\n        </node>\r\n        <node>\r\n            <host>clickhouse-keeper-02</host>\r\n            <port>9181</port>\r\n        </node>\r\n        <node>\r\n            <host>clickhouse-keeper-03</host>\r\n            <port>9181</port>\r\n        </node>\r\n    </zookeeper>\r\n    <macros>\r\n        <shard>01</shard>\r\n        <replica>01</replica>\r\n    </macros>\r\n</clickhouse>\r\n```\r\nusers.xml\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<clickhouse replace=\"true\">\r\n    <profiles>\r\n        <default>\r\n            <max_memory_usage>10000000000</max_memory_usage>\r\n            <use_uncompressed_cache>0</use_uncompressed_cache>\r\n            <load_balancing>in_order</load_balancing>\r\n            <log_queries>1</log_queries>\r\n            <distributed_product_mode>allow</distributed_product_mode>\r\n        </default>\r\n    </profiles>\r\n    <users>\r\n        <default>\r\n            <access_management>1</access_management>\r\n            <profile>default</profile>\r\n            <networks>\r\n                <ip>::/0</ip>\r\n            </networks>\r\n            <password></password>\r\n            <quota>default</quota>\r\n            <access_management>1</access_management>\r\n            <named_collection_control>1</named_collection_control>\r\n            <show_named_collections>1</show_named_collections>\r\n            <show_named_collections_secrets>1</show_named_collections_secrets>\r\n        </default>\r\n    </users>\r\n    <quotas>\r\n        <default>\r\n            <interval>\r\n                <duration>3600</duration>\r\n                <queries>0</queries>\r\n                <errors>0</errors>\r\n                <result_rows>0</result_rows>\r\n                <read_rows>0</read_rows>\r\n                <execution_time>0</execution_time>\r\n            </interval>\r\n        </default>\r\n    </quotas>\r\n</clickhouse>\r\n```\r\nkeeper_config.xml:\r\n```xml\r\n<clickhouse replace=\"true\">\r\n    <logger>\r\n        <level>information</level>\r\n        <log>/var/log/clickhouse-keeper/clickhouse-keeper.log</log>\r\n        <errorlog>/var/log/clickhouse-keeper/clickhouse-keeper.err.log</errorlog>\r\n        <size>1000M</size>\r\n        <count>3</count>\r\n    </logger>\r\n    <listen_host>::</listen_host>\r\n    <max_thread_pool_size>10000</max_thread_pool_size>\r\n    <keeper_server>\r\n        <tcp_port>9181</tcp_port>\r\n        <server_id>3</server_id>\r\n        <log_storage_path>/var/lib/clickhouse/coordination/log</log_storage_path>\r\n        <snapshot_storage_path>/var/lib/clickhouse/coordination/snapshots</snapshot_storage_path>\r\n        <coordination_settings>\r\n            <operation_timeout_ms>10000</operation_timeout_ms>\r\n            <session_timeout_ms>30000</session_timeout_ms>\r\n            <raft_logs_level>information</raft_logs_level>\r\n        </coordination_settings>\r\n        <raft_configuration>\r\n            <server>\r\n                <id>1</id>\r\n                <hostname>clickhouse-keeper-01</hostname>\r\n                <port>9234</port>\r\n            </server>\r\n            <server>\r\n                <id>2</id>\r\n                <hostname>clickhouse-keeper-02</hostname>\r\n                <port>9234</port>\r\n            </server>\r\n            <server>\r\n                <id>3</id>\r\n                <hostname>clickhouse-keeper-03</hostname>\r\n                <port>9234</port>\r\n            </server>\r\n        </raft_configuration>\r\n    </keeper_server>\r\n</clickhouse>\r\n```\r\n#### about us\r\nWe are the BASS team from the School of Cyber Science and Technology at Beihang University. Our main focus is on system software security, operating systems, and program analysis research, as well as the development of automated program testing frameworks for detecting software defects. Using our self-developed database vulnerability testing tool, we have identified the potential above-mentioned vulnerability that may lead to database logic error.\n",
  "hints_text": "* https://github.com/ClickHouse/ClickHouse/issues/65596\nrepro: https://fiddle.clickhouse.com/09ae71fe-ce89-4518-aa0a-fd32970ae937\r\n\r\n```sql\r\ncreate table t ( \r\n  c Int32 primary key ,\r\n  s Bool ,\r\n  w Float64\r\n  );\r\n\r\nsystem stop merges t;\r\n\r\ninsert into t values(439499072,true,0),(1393290072,true,0);\r\ninsert into t values(-1317193174,false,0),(1929066636,false,0);\r\ninsert into t values(-2,false,0),(1962246186,true,0),(2054878592,false,0);\r\ninsert into t values(-1893563136,true,41.55);\r\ninsert into t values(-1338380855,true,-0.7),(-991301833,true,0),(-755809149,false,43.18),(-41,true,0),(3,false,0),(255,false,0),(255,false,0),(189195893,false,0),(195550885,false,9223372036854776000);\r\n\r\nSELECT * FROM (\r\nSELECT c, min(w) OVER (PARTITION BY s ORDER BY c ASC, s ASC, w ASC)\r\nFROM t limit toUInt64(-1))\r\nWHERE c = -755809149;\r\n\r\n-755809149\t43.18\r\n\r\n\r\nSELECT * FROM (\r\nSELECT c, min(w) OVER (PARTITION BY s ORDER BY c ASC, s ASC, w ASC)\r\nFROM t limit toUInt64(-1))\r\nWHERE c = -755809149 settings max_threads=1;\r\n\r\n-755809149\t0\r\n```\n* https://github.com/ClickHouse/ClickHouse/issues/65596\nrepro https://fiddle.clickhouse.com/46d1454d-94b7-4d8b-8521-66d48586eb48\r\nhttps://fiddle.clickhouse.com/3df392f0-4b4d-468d-ae41-cb17448b95b1\r\n\r\n\r\n```sql\r\ncreate table t(c Int32, d Bool) Engine=MergeTree order by c;\r\nsystem stop merges t;\r\n\r\ninsert into t values (1, 0);\r\ninsert into t values (1, 0);\r\ninsert into t values (1, 1);\r\ninsert into t values (1, 0)(1, 1);\r\n\r\nSELECT d, c, row_number() over (partition by d order by c) as c8\r\nFROM t qualify c8=1 format PrettyCompactMonoBlock;\r\n\r\n+-d-----+-c-+-c8-+\r\n| false | 1 |  1 |\r\n| true  | 1 |  1 |\r\n| false | 1 |  1 |\r\n+-------+---+----+\r\n\r\nsystem start merges t;\r\noptimize table t final;\r\n\r\nSELECT d, c, row_number() over (partition by d order by c) as c8\r\nFROM t qualify c8=1 format PrettyCompactMonoBlock;\r\n\r\n+-d-----+-c-+-c8-+\r\n| false | 1 |  1 |\r\n| true  | 1 |  1 |\r\n+-------+---+----+\r\n```\nThere is a bug in the parallel execution of a window function. If you set `max_threads` to `1` the result will be correct. \nBroken by https://github.com/ClickHouse/ClickHouse/pull/39631 ?\r\n\r\nsince 23.11 https://fiddle.clickhouse.com/41701be8-8591-461c-88c3-a88b6bfd9c0d",
  "created_at": "2024-07-16T09:56:49Z",
  "modified_files": [
    "src/Columns/ColumnAggregateFunction.cpp",
    "src/Columns/ColumnAggregateFunction.h",
    "src/Columns/ColumnArray.cpp",
    "src/Columns/ColumnArray.h",
    "src/Columns/ColumnCompressed.h",
    "src/Columns/ColumnConst.cpp",
    "src/Columns/ColumnConst.h",
    "src/Columns/ColumnDecimal.cpp",
    "src/Columns/ColumnDecimal.h",
    "src/Columns/ColumnDynamic.h",
    "src/Columns/ColumnFixedString.cpp",
    "src/Columns/ColumnFixedString.h",
    "src/Columns/ColumnFunction.h",
    "src/Columns/ColumnLowCardinality.cpp",
    "src/Columns/ColumnLowCardinality.h",
    "src/Columns/ColumnMap.cpp",
    "src/Columns/ColumnMap.h",
    "src/Columns/ColumnNullable.cpp",
    "src/Columns/ColumnNullable.h",
    "src/Columns/ColumnObject.h",
    "src/Columns/ColumnSparse.cpp",
    "src/Columns/ColumnSparse.h",
    "src/Columns/ColumnString.cpp",
    "src/Columns/ColumnString.h",
    "src/Columns/ColumnTuple.cpp",
    "src/Columns/ColumnTuple.h",
    "src/Columns/ColumnVariant.cpp",
    "src/Columns/ColumnVariant.h",
    "src/Columns/ColumnVector.cpp",
    "src/Columns/ColumnVector.h",
    "src/Columns/IColumn.h",
    "src/Columns/IColumnDummy.h",
    "src/Columns/IColumnUnique.h",
    "src/Common/WeakHash.cpp",
    "src/Common/WeakHash.h",
    "src/Interpreters/ConcurrentHashJoin.cpp",
    "src/Interpreters/JoinUtils.cpp",
    "src/Processors/Transforms/ScatterByPartitionTransform.cpp"
  ],
  "modified_test_files": [
    "src/Columns/tests/gtest_weak_hash_32.cpp",
    "b/tests/queries/0_stateless/03205_parallel_window_finctions_and_column_sparse_bug.reference",
    "b/tests/queries/0_stateless/03205_parallel_window_finctions_and_column_sparse_bug.sql"
  ]
}