{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32758,
  "instance_id": "ClickHouse__ClickHouse-32758",
  "issue_numbers": [
    "30755"
  ],
  "base_commit": "233505b665f4f266405289246fd99a3775188742",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateFunctionQuery.cpp b/src/Interpreters/InterpreterCreateFunctionQuery.cpp\nindex 1c43da076281..2f345f8b2375 100644\n--- a/src/Interpreters/InterpreterCreateFunctionQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateFunctionQuery.cpp\n@@ -57,9 +57,14 @@ BlockIO InterpreterCreateFunctionQuery::execute()\n \n void InterpreterCreateFunctionQuery::validateFunction(ASTPtr function, const String & name)\n {\n-    const auto * args_tuple = function->as<ASTFunction>()->arguments->children.at(0)->as<ASTFunction>();\n+    auto & lambda_function = function->as<ASTFunction &>();\n+    auto & lambda_function_expression_list = lambda_function.arguments->children;\n+\n+    const auto & tuple_function_arguments = lambda_function_expression_list.at(0)->as<ASTFunction &>();\n+\n     std::unordered_set<String> arguments;\n-    for (const auto & argument : args_tuple->arguments->children)\n+\n+    for (const auto & argument : tuple_function_arguments.arguments->children)\n     {\n         const auto & argument_name = argument->as<ASTIdentifier>()->name();\n         auto [_, inserted] = arguments.insert(argument_name);\n@@ -67,7 +72,7 @@ void InterpreterCreateFunctionQuery::validateFunction(ASTPtr function, const Str\n             throw Exception(ErrorCodes::UNSUPPORTED_METHOD, \"Identifier {} already used as function parameter\", argument_name);\n     }\n \n-    ASTPtr function_body = function->as<ASTFunction>()->children.at(0)->children.at(1);\n+    ASTPtr function_body = lambda_function_expression_list.at(1);\n     validateFunctionRecursiveness(function_body, name);\n }\n \n@@ -82,5 +87,4 @@ void InterpreterCreateFunctionQuery::validateFunctionRecursiveness(ASTPtr node,\n         validateFunctionRecursiveness(child, function_to_create);\n     }\n }\n-\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02148_sql_user_defined_function_subquery.reference b/tests/queries/0_stateless/02148_sql_user_defined_function_subquery.reference\nnew file mode 100644\nindex 000000000000..8851ce8322c0\n--- /dev/null\n+++ b/tests/queries/0_stateless/02148_sql_user_defined_function_subquery.reference\n@@ -0,0 +1,6 @@\n+1\n+2\n+2\n+4\n+(0,'Value')\n+Value\ndiff --git a/tests/queries/0_stateless/02148_sql_user_defined_function_subquery.sql b/tests/queries/0_stateless/02148_sql_user_defined_function_subquery.sql\nnew file mode 100644\nindex 000000000000..cc62d1ac4958\n--- /dev/null\n+++ b/tests/queries/0_stateless/02148_sql_user_defined_function_subquery.sql\n@@ -0,0 +1,35 @@\n+-- Tags: no-parallel\n+\n+DROP FUNCTION IF EXISTS 02148_test_function;\n+CREATE FUNCTION 02148_test_function AS () -> (SELECT 1);\n+\n+SELECT 02148_test_function();\n+\n+CREATE OR REPLACE FUNCTION 02148_test_function AS () -> (SELECT 2);\n+\n+SELECT 02148_test_function();\n+\n+DROP FUNCTION 02148_test_function;\n+\n+CREATE FUNCTION 02148_test_function AS (x) -> (SELECT x + 1);\n+SELECT 02148_test_function(1);\n+\n+DROP FUNCTION IF EXISTS 02148_test_function_nested;\n+CREATE FUNCTION 02148_test_function_nested AS (x) -> 02148_test_function(x + 2);\n+SELECT 02148_test_function_nested(1);\n+\n+DROP FUNCTION 02148_test_function;\n+DROP FUNCTION 02148_test_function_nested;\n+\n+DROP TABLE IF EXISTS 02148_test_table;\n+CREATE TABLE 02148_test_table (id UInt64, value String) ENGINE=TinyLog;\n+INSERT INTO 02148_test_table VALUES (0, 'Value');\n+\n+CREATE FUNCTION 02148_test_function AS () -> (SELECT * FROM 02148_test_table LIMIT 1);\n+SELECT 02148_test_function();\n+\n+CREATE OR REPLACE FUNCTION 02148_test_function AS () -> (SELECT value FROM 02148_test_table LIMIT 1);\n+SELECT 02148_test_function();\n+\n+DROP FUNCTION 02148_test_function;\n+DROP TABLE 02148_test_table;\n",
  "problem_statement": "Accept query statement at CREATE FUNCTION feature\nClickhouse Version: 21.10.2.15 \r\n\r\nAfter a quick test, I couldn't make a function using a query as a statement\r\n\r\n**Use case**\r\n\r\nIt is useful to have some prepared queries that could work as functions\r\n\r\n**Describe the solution you'd like**\r\n\r\n```sql\r\nCREATE FUNCTION plus_tutu as () -> ((select `orderYM` from `bucket_18`.`flattable` limit 1))\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2021-12-14T15:49:49Z"
}