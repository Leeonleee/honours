{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26508,
  "instance_id": "ClickHouse__ClickHouse-26508",
  "issue_numbers": [
    "26491"
  ],
  "base_commit": "d8f45fbe139a0899c611bef9e35f6cefaf6cbc5a",
  "patch": "diff --git a/src/Interpreters/ExternalDictionariesLoader.cpp b/src/Interpreters/ExternalDictionariesLoader.cpp\nindex cfbe2b45f44f..83931649443c 100644\n--- a/src/Interpreters/ExternalDictionariesLoader.cpp\n+++ b/src/Interpreters/ExternalDictionariesLoader.cpp\n@@ -81,8 +81,12 @@ DictionaryStructure ExternalDictionariesLoader::getDictionaryStructure(const std\n \n std::string ExternalDictionariesLoader::resolveDictionaryName(const std::string & dictionary_name, const std::string & current_database_name) const\n {\n+    bool has_dictionary = has(dictionary_name);\n+    if (has_dictionary)\n+        return dictionary_name;\n+\n     std::string resolved_name = resolveDictionaryNameFromDatabaseCatalog(dictionary_name);\n-    bool has_dictionary = has(resolved_name);\n+    has_dictionary = has(resolved_name);\n \n     if (!has_dictionary)\n     {\ndiff --git a/src/Storages/StorageDictionary.cpp b/src/Storages/StorageDictionary.cpp\nindex 4c31f62b21f0..30a9dad8d914 100644\n--- a/src/Storages/StorageDictionary.cpp\n+++ b/src/Storages/StorageDictionary.cpp\n@@ -167,7 +167,8 @@ Pipe StorageDictionary::read(\n     const size_t max_block_size,\n     const unsigned /*threads*/)\n {\n-    auto dictionary = getContext()->getExternalDictionariesLoader().getDictionary(dictionary_name, local_context);\n+    auto registered_dictionary_name = location == Location::SameDatabaseAndNameAsDictionary ? getStorageID().getInternalDictionaryName() : dictionary_name;\n+    auto dictionary = getContext()->getExternalDictionariesLoader().getDictionary(registered_dictionary_name, local_context);\n     auto stream = dictionary->getBlockInputStream(column_names, max_block_size);\n     /// TODO: update dictionary interface for processors.\n     return Pipe(std::make_shared<SourceFromInputStream>(stream));\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01948_dictionary_quoted_database_name.reference b/tests/queries/0_stateless/01948_dictionary_quoted_database_name.reference\nnew file mode 100644\nindex 000000000000..6a9fb68a92e6\n--- /dev/null\n+++ b/tests/queries/0_stateless/01948_dictionary_quoted_database_name.reference\n@@ -0,0 +1,2 @@\n+0\tValue\n+0\tValue\ndiff --git a/tests/queries/0_stateless/01948_dictionary_quoted_database_name.sql b/tests/queries/0_stateless/01948_dictionary_quoted_database_name.sql\nnew file mode 100644\nindex 000000000000..21e8e07c7249\n--- /dev/null\n+++ b/tests/queries/0_stateless/01948_dictionary_quoted_database_name.sql\n@@ -0,0 +1,38 @@\n+DROP DATABASE IF EXISTS `01945.db`;\n+CREATE DATABASE `01945.db`;\n+\n+CREATE TABLE `01945.db`.test_dictionary_values\n+(\n+\tid UInt64,\n+\tvalue String\n+) ENGINE=TinyLog;\n+\n+INSERT INTO `01945.db`.test_dictionary_values VALUES (0, 'Value');\n+\n+CREATE DICTIONARY `01945.db`.test_dictionary\n+(\n+    id UInt64,\n+    value String\n+)\n+PRIMARY KEY id\n+LAYOUT(DIRECT())\n+SOURCE(CLICKHOUSE(DB '01945.db' TABLE 'test_dictionary_values'));\n+\n+SELECT * FROM `01945.db`.test_dictionary;\n+DROP DICTIONARY `01945.db`.test_dictionary;\n+\n+CREATE DICTIONARY `01945.db`.`test_dictionary.test`\n+(\n+    id UInt64,\n+    value String\n+)\n+PRIMARY KEY id\n+LAYOUT(DIRECT())\n+SOURCE(CLICKHOUSE(DB '01945.db' TABLE 'test_dictionary_values'));\n+\n+SELECT * FROM `01945.db`.`test_dictionary.test`;\n+DROP DICTIONARY `01945.db`.`test_dictionary.test`;\n+\n+\n+DROP TABLE `01945.db`.test_dictionary_values;\n+DROP DATABASE `01945.db`;\n",
  "problem_statement": "Look like dictionary `SOURCE(CLICKHOUSE(...))` doesn't work after 21.6+\n**Does it reproduce on recent release?**\r\nyes, 21.6, 21.7 from Docker reproducible\r\n\r\n**Describe the bug**\r\n```\r\nCREATE DATABASE `_test.\u0414\u0411_atomic_` ENGINE=Atomic;\r\nCREATE TABLE `_test.\u0414\u0411_atomic_`.table4\r\n(\r\n    `id` UInt64,\r\n    `Col1` String,\r\n    `Col2` String,\r\n    `Col3` String,\r\n    `Col4` String,\r\n    `Col5` String\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY id\r\nORDER BY (id, Col1, Col2, Col3, Col4, Col5)\r\nSETTINGS index_granularity = 8192;\r\nCREATE DICTIONARY `_test.\u0414\u0411_atomic_`.dict_example\r\n(\r\n    `id` UInt64,\r\n    `Col1` String,\r\n    `Col2` String,\r\n    `Col3` String,\r\n    `Col4` String,\r\n    `Col5` String\r\n)\r\nPRIMARY KEY id\r\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 DATABASE '_test.\u0414\u0411_atomic_' TABLE 'table4' USER 'default' PASSWORD ''))\r\nLIFETIME(MIN 0 MAX 60)\r\nLAYOUT(HASHED());\r\nINSERT INTO `_test.\u0414\u0411_atomic_`.table4 SELECT number, 'Col1','Col2','Col3','Col4','Col5' FROM numbers(100);\r\nSELECT count() FROM `_test.\u0414\u0411_atomic_`.table4;\r\nSYSTEM RELOAD DICTIONARIES;\r\nSELECT * FROM system.dictionaries FORMAT Vertical;\r\n```\r\n\r\n# returns\r\n```\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\ndatabase:                    _test.\u0414\u0411_atomic_\r\nname:                        dict_example\r\nuuid:                        5f7e0f50-345a-497a-9f7e-0f50345aa97a\r\nstatus:                      NOT_LOADED\r\norigin:                      5f7e0f50-345a-497a-9f7e-0f50345aa97a\r\ntype:\r\nkey.names:                   ['id']\r\nkey.types:                   ['UInt64']\r\nattribute.names:             ['Col1','Col2','Col3','Col4','Col5']\r\nattribute.types:             ['String','String','String','String','String']\r\nbytes_allocated:             0\r\nquery_count:                 0\r\nhit_rate:                    0\r\nfound_rate:                  0\r\nelement_count:               0\r\nload_factor:                 0\r\nsource:\r\nlifetime_min:                0\r\nlifetime_max:                0\r\nloading_start_time:          1970-01-01 00:00:00\r\nlast_successful_update_time: 1970-01-01 00:00:00\r\nloading_duration:            0\r\nlast_exception:\r\n```\r\n\r\n* Queries to run that lead to unexpected result\r\n\r\n`SELECT count() FROM `_test.\u0414\u0411_atomic_`.dict_example;` returns\r\n\r\n\r\n\r\n\r\n**Expected behavior**\r\n100\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nCode: 36. DB::Exception: Received from localhost:9000. DB::Exception: Dictionary (`_test.\u0414\u0411_atomic_.dict_example`) not found.\r\n```\r\n\r\n**Stacktrace**\r\n```\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x8d31b5a in /usr/bin/clickhouse\r\n1. DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0x8e48943 in /usr/bin/clickhouse\r\n2. DB::ExternalDictionariesLoader::resolveDictionaryName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const @ 0xf839c52 in /usr/bin/clickhouse\r\n3. DB::ExternalDictionariesLoader::getDictionary(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context const>) const @ 0xf839937 in /usr/bin/clickhouse\r\n4. DB::StorageDictionary::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x100007dd in /usr/bin/clickhouse\r\n5. DB::IStorage::read(DB::QueryPlan&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0xffe43f7 in /usr/bin/clickhouse\r\n6. DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&) @ 0xfaf63f5 in /usr/bin/clickhouse\r\n7. DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>) @ 0xfaedcbe in /usr/bin/clickhouse\r\n8. DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0xfaecd60 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0xfc6215e in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectWithUnionQuery::execute() @ 0xfc63231 in /usr/bin/clickhouse\r\n11. ? @ 0xfe22253 in /usr/bin/clickhouse\r\n12. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, bool) @ 0xfe208e3 in /usr/bin/clickhouse\r\n13. DB::TCPHandler::runImpl() @ 0x1069f6c2 in /usr/bin/clickhouse\r\n14. DB::TCPHandler::run() @ 0x106b25d9 in /usr/bin/clickhouse\r\n15. Poco::Net::TCPServerConnection::start() @ 0x1338b30f in /usr/bin/clickhouse\r\n16. Poco::Net::TCPServerDispatcher::run() @ 0x1338cd9a in /usr/bin/clickhouse\r\n17. Poco::PooledThread::run() @ 0x134bfc19 in /usr/bin/clickhouse\r\n18. Poco::ThreadImpl::runnableEntry(void*) @ 0x134bbeaa in /usr/bin/clickhouse\r\n19. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n20. __clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\n",
  "hints_text": "You cannot use dot `.` characters in database name.\n@kitaisreal Need to throw exception on db creation.\n> You cannot use dot . characters in database name.\r\n\r\n@alexey-milovidov \r\nbut it worked many years\r\nI test this test case from 21.1 to 21.5\r\nand also clickhouse-backup works fine when I use quote symbol in SQL query\r\n\r\nwhen dot symbol was deprecated on database name?\r\n",
  "created_at": "2021-07-19T14:23:12Z"
}