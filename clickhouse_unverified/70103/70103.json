{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 70103,
  "instance_id": "ClickHouse__ClickHouse-70103",
  "issue_numbers": [
    "70022"
  ],
  "base_commit": "9ae3d85dfe5977297b7801e0f92e8ea0da8177d7",
  "patch": "diff --git a/src/Planner/PlannerActionsVisitor.cpp b/src/Planner/PlannerActionsVisitor.cpp\nindex abf1f759719b..aea304e0ecc2 100644\n--- a/src/Planner/PlannerActionsVisitor.cpp\n+++ b/src/Planner/PlannerActionsVisitor.cpp\n@@ -38,6 +38,7 @@ namespace DB\n {\n namespace Setting\n {\n+    extern const SettingsBool enable_named_columns_in_function_tuple;\n     extern const SettingsBool transform_null_in;\n }\n \n@@ -182,6 +183,33 @@ class ActionNodeNameHelper\n                     break;\n                 }\n \n+                if (planner_context.getQueryContext()->getSettingsRef()[Setting::enable_named_columns_in_function_tuple])\n+                {\n+                    /// Function \"tuple\" which generates named tuple should use argument aliases to construct its name.\n+                    if (function_node.getFunctionName() == \"tuple\")\n+                    {\n+                        if (const DataTypeTuple * type_tuple = typeid_cast<const DataTypeTuple *>(function_node.getResultType().get()))\n+                        {\n+                            if (type_tuple->haveExplicitNames())\n+                            {\n+                                const auto & names = type_tuple->getElementNames();\n+                                size_t size = names.size();\n+                                WriteBufferFromOwnString s;\n+                                s << \"tuple(\";\n+                                for (size_t i = 0; i < size; ++i)\n+                                {\n+                                    if (i != 0)\n+                                        s << \", \";\n+                                    s << backQuoteIfNeed(names[i]);\n+                                }\n+                                s << \")\";\n+                                result = s.str();\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+\n                 String in_function_second_argument_node_name;\n \n                 if (isNameOfInFunction(function_node.getFunctionName()))\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03240_insert_select_named_tuple.reference b/tests/queries/0_stateless/03240_insert_select_named_tuple.reference\nnew file mode 100644\nindex 000000000000..8c3cb5b8425b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03240_insert_select_named_tuple.reference\n@@ -0,0 +1,3 @@\n+1\t('dete','ok')\t('dete','ok')\n+{\"id\":1,\"a\":{\"col_a\":\"dete\",\"type\":\"ok\"},\"b\":{\"col_b\":\"dete\",\"type\":\"ok\"}}\n+{\"id\":1,\"a\":{\"col_a\":\"dete\",\"type\":\"ok\"},\"b\":{\"col_b\":\"dete\",\"type\":\"ok\"}}\ndiff --git a/tests/queries/0_stateless/03240_insert_select_named_tuple.sql b/tests/queries/0_stateless/03240_insert_select_named_tuple.sql\nnew file mode 100644\nindex 000000000000..c3e12db4e0e1\n--- /dev/null\n+++ b/tests/queries/0_stateless/03240_insert_select_named_tuple.sql\n@@ -0,0 +1,22 @@\n+SET enable_analyzer = 1;\n+SET enable_named_columns_in_function_tuple = 1;\n+\n+DROP TABLE IF EXISTS src;\n+DROP TABLE IF EXISTS dst;\n+\n+CREATE TABLE src (id UInt32, type String, data String) ENGINE=MergeTree ORDER BY tuple();\n+CREATE TABLE dst (id UInt32, a Tuple (col_a Nullable(String), type String), b Tuple (col_b Nullable(String), type String)) ENGINE = MergeTree ORDER BY id;\n+\n+INSERT INTO src VALUES (1, 'ok', 'data');\n+INSERT INTO dst (id, a, b) SELECT id, tuple(replaceAll(data, 'a', 'e') AS col_a, type) AS a, tuple(replaceAll(data, 'a', 'e') AS col_b, type) AS b FROM src;\n+SELECT * FROM dst;\n+\n+DROP TABLE src;\n+DROP TABLE dst;\n+\n+DROP TABLE IF EXISTS src;\n+CREATE TABLE src (id UInt32, type String, data String) ENGINE=MergeTree ORDER BY tuple();\n+INSERT INTO src VALUES (1, 'ok', 'data');\n+SELECT id, tuple(replaceAll(data, 'a', 'e') AS col_a, type) AS a, tuple(replaceAll(data, 'a', 'e') AS col_b, type) AS b FROM cluster(test_cluster_two_shards, currentDatabase(), src) SETTINGS prefer_localhost_replica=0 FORMAT JSONEachRow;\n+\n+DROP TABLE src;\n",
  "problem_statement": "24.7 broke some queries using `tuple()` and NULLs\nThe change in behavior of the `tuple()` function in 24.7 (https://github.com/ClickHouse/ClickHouse/pull/54881) seems to break some INSERT SELECT requests with two similar tuples in different columns. \r\n\r\nI found one case (using `tuple()`, NULLs, grouping and array) where a query :\r\n\r\n- crashes since 24.7 : https://fiddle.clickhouse.com/7446614a-4743-4729-958c-b3142a29e89c\r\n- works in 24.6.6.6 : https://fiddle.clickhouse.com/22c57812-2a36-44e1-a61f-83283d03256b\r\n\r\nAnd one simpler case (using `tuple()` and NULLs) where the result between the INSERT SELECT and the SELECT\r\n- is different since 24.7 : https://fiddle.clickhouse.com/22ee195e-7151-4be9-bdac-e87432a64407 \r\n- was the same in 24.6.6.6 : https://fiddle.clickhouse.com/5f9727fe-c602-4f2f-b4b5-7c58a698d224\r\n\r\nFrom the error message it looks like the names of the elements from the two Tuple columns are being mixed up.\r\n\r\n**Expected behavior**\r\n\r\nThe behavior of 24.6.6.6 was correct\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nReceived exception from server (version 24.8.4):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Cannot capture column 2 because it has incompatible type: got Tuple(col_a Nullable(String), type String), but Tuple(col_b Nullable(String), type String) is expected.. (LOGICAL_ERROR)\r\n```\r\n\r\n**Additional context**\r\n\r\nFor the crashing case :\r\n\r\n- When removing the `arraySort()` the query works in 24.7 and latest but the result is different than in 24.6.6.6 (and wrong).\r\n- Using `NULL` instead of `nullIf(data, '')` gives the same error.\r\n- Using `data` instead of `nullIf(data, '')` gives the same behavior as when removing the `arraySort()`\r\n\r\nIn my original use case the two `nullIf(data, '')` are two different templeted JSON extraction function, sometimes at `NULL` based on our workflow.\r\n\r\nI hope there is enough context to identify what is causing this bug.\r\n\r\nEDIT : added link to fiddles in the last working version\n",
  "hints_text": "If additional information can help, this seem to happen when the expressions in the tuples are the same but with different alias names. \r\n- with different expressions : https://fiddle.clickhouse.com/530d0caa-ff62-4ec5-95a6-22a690f0bd3b\r\n- with the same expression : https://fiddle.clickhouse.com/82b44709-165b-4e93-ade9-f67ab75ee443\nThe issue should be investigated, but as a workaround you can disable by setting `enable_named_columns_in_function_tuple=0`",
  "created_at": "2024-09-29T01:33:57Z"
}