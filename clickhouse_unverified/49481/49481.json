{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49481,
  "instance_id": "ClickHouse__ClickHouse-49481",
  "issue_numbers": [
    "48914"
  ],
  "base_commit": "9a6761679113da75b96841d6d9c5c54123126145",
  "patch": "diff --git a/src/Databases/DatabaseFactory.cpp b/src/Databases/DatabaseFactory.cpp\nindex 199bae4fbb41..f346205ea790 100644\n--- a/src/Databases/DatabaseFactory.cpp\n+++ b/src/Databases/DatabaseFactory.cpp\n@@ -319,7 +319,7 @@ DatabasePtr DatabaseFactory::getImpl(const ASTCreateQuery & create, const String\n         if (auto named_collection = tryGetNamedCollectionWithOverrides(engine_args, context))\n         {\n             configuration = StoragePostgreSQL::processNamedCollectionResult(*named_collection, false);\n-            use_table_cache = named_collection->getOrDefault<UInt64>(\"use_tables_cache\", 0);\n+            use_table_cache = named_collection->getOrDefault<UInt64>(\"use_table_cache\", 0);\n         }\n         else\n         {\ndiff --git a/src/Storages/StoragePostgreSQL.cpp b/src/Storages/StoragePostgreSQL.cpp\nindex e013199c584c..89198987fcae 100644\n--- a/src/Storages/StoragePostgreSQL.cpp\n+++ b/src/Storages/StoragePostgreSQL.cpp\n@@ -416,7 +416,7 @@ StoragePostgreSQL::Configuration StoragePostgreSQL::processNamedCollectionResult\n         required_arguments.insert(\"table\");\n \n     validateNamedCollection<ValidateKeysMultiset<ExternalDatabaseEqualKeysSet>>(\n-        named_collection, required_arguments, {\"schema\", \"on_conflict\", \"addresses_expr\", \"host\", \"hostname\", \"port\", \"use_tables_cache\"});\n+        named_collection, required_arguments, {\"schema\", \"on_conflict\", \"addresses_expr\", \"host\", \"hostname\", \"port\", \"use_table_cache\"});\n \n     configuration.addresses_expr = named_collection.getOrDefault<String>(\"addresses_expr\", \"\");\n     if (configuration.addresses_expr.empty())\n",
  "test_patch": "diff --git a/tests/integration/test_postgresql_database_engine/test.py b/tests/integration/test_postgresql_database_engine/test.py\nindex 63e85afb1d41..d9f06f0295b5 100644\n--- a/tests/integration/test_postgresql_database_engine/test.py\n+++ b/tests/integration/test_postgresql_database_engine/test.py\n@@ -330,7 +330,7 @@ def test_predefined_connection_configuration(started_cluster):\n     node1.query(\n         \"\"\"\n         DROP DATABASE postgres_database;\n-        CREATE DATABASE postgres_database ENGINE = PostgreSQL(postgres1, use_tables_cache=1);\n+        CREATE DATABASE postgres_database ENGINE = PostgreSQL(postgres1, use_table_cache=1);\n         \"\"\"\n     )\n     assert (\n",
  "problem_statement": "Unable to set use_table_cache while creating Postgres database with credentials from named collections.\n**Describe what's wrong**\r\n\r\nUnable to set `use_table_cache=1` while creating Postgres database with credentials from `named collections`.  \r\nGetting an error:\r\n```\r\nCode: 36. DB::Exception: Unexpected key use_table_cache in named collection. Required keys: database, db, password, user, username, optional keys: addresses_expr, host, hostname, on_conflict, port, schema. (BAD_ARGUMENTS) (version 23.3.1.2823 (official build))\r\n```\r\nwhile trying to execute: \r\n```sql\r\nCREATE DATABASE local_postgres ENGINE = PostgreSQL(psql, schema = 'information_schema', use_table_cache = 1);\r\n```\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes, reproducible starting from  `23.3.1.2823`.\r\n\r\n**How to reproduce**\r\n* Prepare named collection configuration\r\n```shell\r\nmkdir ./use_table_cache_bug && cd ./use_table_cache_bug\r\ncat >> named_collections.xml << EOF\r\n<?xml version=\"1.0\"?>\r\n<clickhouse>\r\n  <named_collections>\r\n    <psql>\r\n      <host>host.docker.internal</host>\r\n      <port>15432</port>\r\n      <user>postgres</user>\r\n      <password>testtest</password>\r\n      <database>postgres</database>\r\n    </psql>\r\n  </named_collections>\r\n</clickhouse>\r\nEOF\r\n```\r\n* Run a local instance of Postgres \r\n```shell\r\ndocker run --name some-postgres -p 15432:5432 -e POSTGRES_PASSWORD=testtest -d postgres\r\n```\r\n* Run a local instance of Clickhouse 23.3.1.2823, with previously created config:\r\n```shell\r\ndocker run -d -p 8123:8123 --name some-clickhouse-server --ulimit nofile=262144:262144 -v ${PWD}/named_collections.xml:/etc/clickhouse-server/conf.d/named_collections.xml clickhouse/clickhouse-server:23.3.1.2823\r\n```\r\n* Connect to [local Clickhouse](http://127.0.0.1:8123/play) and try to execute:\r\n```sql\r\nCREATE DATABASE local_postgres ENGINE = PostgreSQL(psql, schema = 'information_schema', use_table_cache = 1);\r\n```\r\n\r\n**Expected behavior**\r\n\r\nDatabase with engine PostgreSQL should be successfully created.\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2023.04.18 20:22:51.102642 [ 48 ] {1a44da8b-a019-43c8-b3e2-4c36d84709fe} <Error> DynamicQueryHandler: Code: 36. DB::Exception: Unexpected key use_table_cache in named collection. Required keys: database, db, password, user, username, optional keys: addresses_expr, host, hostname, on_conflict, port, schema. (BAD_ARGUMENTS), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xba7e624 in /usr/bin/clickhouse\r\n1. ? @ 0xf0c6760 in /usr/bin/clickhouse\r\n2. ? @ 0xf0c4198 in /usr/bin/clickhouse\r\n3. DB::StoragePostgreSQL::processNamedCollectionResult(DB::NamedCollection const&, bool) @ 0x1098a030 in /usr/bin/clickhouse\r\n4. DB::DatabaseFactory::getImpl(DB::ASTCreateQuery const&, String const&, std::shared_ptr<DB::Context const>) @ 0x10152e68 in /usr/bin/clickhouse\r\n5. ? @ 0x101524f0 in /usr/bin/clickhouse\r\n6. DB::InterpreterCreateQuery::createDatabase(DB::ASTCreateQuery&) @ 0x101312dc in /usr/bin/clickhouse\r\n7. DB::InterpreterCreateQuery::execute() @ 0x1014add8 in /usr/bin/clickhouse\r\n8. ? @ 0x105f6144 in /usr/bin/clickhouse\r\n9. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, std::optional<DB::FormatSettings> const&) @ 0x105fa5d0 in /usr/bin/clickhouse\r\n10. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&) @ 0x1115d66c in /usr/bin/clickhouse\r\n11. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x11160c7c in /usr/bin/clickhouse\r\n12. DB::HTTPServerConnection::run() @ 0x111c09a8 in /usr/bin/clickhouse\r\n13. Poco::Net::TCPServerConnection::start() @ 0x11dfb164 in /usr/bin/clickhouse\r\n14. Poco::Net::TCPServerDispatcher::run() @ 0x11dfc680 in /usr/bin/clickhouse\r\n15. Poco::PooledThread::run() @ 0x11faf73c in /usr/bin/clickhouse\r\n16. Poco::ThreadImpl::runnableEntry(void*) @ 0x11fad004 in /usr/bin/clickhouse\r\n17. ? @ 0x7d5c8 in /usr/lib/aarch64-linux-gnu/libc.so.6\r\n18. ? @ 0xe5d1c in /usr/lib/aarch64-linux-gnu/libc.so.6\r\n (version 23.3.1.2823 (official build))\r\n```\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-05-03T23:42:40Z"
}