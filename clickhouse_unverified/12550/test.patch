diff --git a/tests/performance/array_index_low_cardinality_numbers.xml b/tests/performance/array_index_low_cardinality_numbers.xml
new file mode 100644
index 000000000000..a9f0703c9a88
--- /dev/null
+++ b/tests/performance/array_index_low_cardinality_numbers.xml
@@ -0,0 +1,28 @@
+<test>
+    <create_query>DROP TABLE IF EXISTS perf_lc_num</create_query>
+    <create_query>CREATE TABLE perf_lc_num(
+        num UInt8,
+        arr Array(LowCardinality(Int64)) default [num]
+        ) ENGINE = MergeTree() ORDER BY tuple()
+    </create_query>
+
+    <fill_query>
+        INSERT INTO perf_lc_num (num)
+        SELECT toUInt8(number)
+        FROM numbers(1500000000)
+    </fill_query>
+
+    <query>SELECT count() FROM perf_lc_num WHERE num = 42</query>
+    <query>SELECT count() FROM perf_lc_num WHERE arr[1] = 42</query>
+    <query>SELECT count() FROM perf_lc_num WHERE has(arr, 42)</query>
+    <query>SELECT count() FROM perf_lc_num WHERE indexOf(arr, 42) > 0</query>
+
+    <query>SELECT count() FROM perf_lc_num WHERE arr[1] = num</query>
+    <query>SELECT count() FROM perf_lc_num WHERE has(arr, num)</query>
+    <query>SELECT count() FROM perf_lc_num WHERE indexOf(arr, num) > 0</query>
+
+    <query>SELECT count() FROM perf_lc_num WHERE has(arr, num * 10)</query>
+    <query>SELECT count() FROM perf_lc_num WHERE has(arr, (num * 1000 + 20) % 137)</query>
+
+    <drop_query>DROP TABLE IF EXISTS perf_lc_num</drop_query>
+</test>
diff --git a/tests/performance/array_index_low_cardinality_strings.xml b/tests/performance/array_index_low_cardinality_strings.xml
new file mode 100644
index 000000000000..bbfea083f0ac
--- /dev/null
+++ b/tests/performance/array_index_low_cardinality_strings.xml
@@ -0,0 +1,29 @@
+<test>
+    <create_query>DROP TABLE IF EXISTS perf_lc_str</create_query>
+    <create_query>CREATE TABLE perf_lc_str(
+        str LowCardinality(String),
+        arr Array(LowCardinality(String)) default [str]
+        ) ENGINE = MergeTree() ORDER BY tuple()
+    </create_query>
+
+    <fill_query>
+        INSERT INTO perf_lc_str (str)
+        SELECT concat('asdf', toString(number % 10000))
+        FROM numbers(100000000)
+    </fill_query>
+
+    <query>SELECT count() FROM perf_lc_str WHERE str = 'asdf337'</query>
+    <query>SELECT count() FROM perf_lc_str WHERE arr[1] = 'asdf337'</query>
+    <query>SELECT count() FROM perf_lc_str WHERE has(arr, 'asdf337')</query>
+    <query>SELECT count() FROM perf_lc_str WHERE indexOf(arr, 'asdf337') > 0</query>
+
+    <query>SELECT count() FROM perf_lc_str WHERE arr[1] = str</query>
+    <query>SELECT count() FROM perf_lc_str WHERE has(arr, str)</query>
+    <query>SELECT count() FROM perf_lc_str WHERE indexOf(arr, str) > 0</query>
+
+    <query>SELECT count() FROM perf_lc_str WHERE has(arr, concat('0', str))</query>
+    <query>SELECT count() FROM perf_lc_str WHERE has(arr, concat(str, 'str'))</query>
+    <query>SELECT count() FROM perf_lc_str WHERE has(arr, concat(str, '0'))</query>
+
+    <drop_query>DROP TABLE IF EXISTS perf_lc_str</drop_query>
+</test>
diff --git a/tests/queries/0_stateless/00931_low_cardinality_read_with_empty_array.sql b/tests/queries/0_stateless/00931_low_cardinality_read_with_empty_array.sql
index a3b90f94f74d..257116fe0f5e 100644
--- a/tests/queries/0_stateless/00931_low_cardinality_read_with_empty_array.sql
+++ b/tests/queries/0_stateless/00931_low_cardinality_read_with_empty_array.sql
@@ -1,7 +1,23 @@
-drop table if exists lc_00931;
-create table lc_00931 (key UInt64, value Array(LowCardinality(String))) engine = MergeTree order by key;
-insert into lc_00931 select number, if(number < 10000 or number > 100000, [toString(number)], emptyArrayString()) from system.numbers limit 200000;
-select * from lc_00931 where (key < 100 or key > 50000) and not has(value, toString(key)) and length(value) == 1 limit 10 settings max_block_size = 8192, max_threads = 1;
+DROP TABLE IF EXISTS lc_00931;
 
-drop table if exists lc_00931;
+CREATE TABLE lc_00931 (
+    key UInt64,
+    value Array(LowCardinality(String)))
+ENGINE = MergeTree
+ORDER BY key;
 
+INSERT INTO lc_00931 SELECT number,
+if (number < 10000 OR number > 100000,
+    [toString(number)],
+    emptyArrayString())
+    FROM system.numbers LIMIT 200000;
+
+SELECT * FROM lc_00931
+WHERE (key < 100 OR key > 50000)
+    AND NOT has(value, toString(key))
+    AND length(value) == 1
+LIMIT 10
+SETTINGS max_block_size = 8192,
+         max_threads = 1;
+
+DROP TABLE IF EXISTS lc_00931;
diff --git a/tests/queries/0_stateless/00945_bloom_filter_index.sql b/tests/queries/0_stateless/00945_bloom_filter_index.sql
index d509b99229ab..083caba710bd 100755
--- a/tests/queries/0_stateless/00945_bloom_filter_index.sql
+++ b/tests/queries/0_stateless/00945_bloom_filter_index.sql
@@ -162,8 +162,47 @@ DROP TABLE IF EXISTS bloom_filter_lc_null_types_test;
 
 DROP TABLE IF EXISTS bloom_filter_array_lc_null_types_test;
 
-CREATE TABLE bloom_filter_array_lc_null_types_test (order_key   Array(LowCardinality(Nullable((UInt64)))), i8 Array(LowCardinality(Nullable((Int8)))), i16 Array(LowCardinality(Nullable((Int16)))), i32 Array(LowCardinality(Nullable((Int32)))), i64 Array(LowCardinality(Nullable((Int64)))), u8 Array(LowCardinality(Nullable((UInt8)))), u16 Array(LowCardinality(Nullable((UInt16)))), u32 Array(LowCardinality(Nullable((UInt32)))), u64 Array(LowCardinality(Nullable((UInt64)))), f32 Array(LowCardinality(Nullable((Float32)))), f64 Array(LowCardinality(Nullable((Float64)))), date Array(LowCardinality(Nullable((Date)))), date_time Array(LowCardinality(Nullable(DateTime('Europe/Moscow')))), str Array(LowCardinality(Nullable((String)))), fixed_string Array(LowCardinality(Nullable(FixedString(5)))), INDEX idx (i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, date, date_time, str, fixed_string) TYPE bloom_filter GRANULARITY 1) ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 6;
-INSERT INTO bloom_filter_array_lc_null_types_test SELECT groupArray(number) AS order_key, groupArray(toInt8(number)) AS i8, groupArray(toInt16(number)) AS i16, groupArray(toInt32(number)) AS i32, groupArray(toInt64(number)) AS i64, groupArray(toUInt8(number)) AS u8, groupArray(toUInt16(number)) AS u16, groupArray(toUInt32(number)) AS u32, groupArray(toUInt64(number)) AS u64, groupArray(toFloat32(number)) AS f32, groupArray(toFloat64(number)) AS f64, groupArray(toDate(number, 'Europe/Moscow')) AS date, groupArray(toDateTime(number, 'Europe/Moscow')) AS date_time, groupArray(toString(number)) AS str, groupArray(toFixedString(toString(number), 5)) AS fixed_string FROM (SELECT number FROM system.numbers LIMIT 15);
+CREATE TABLE bloom_filter_array_lc_null_types_test (
+    order_key   Array(LowCardinality(Nullable((UInt64)))),
+
+    i8 Array(LowCardinality(Nullable((Int8)))),
+    i16 Array(LowCardinality(Nullable((Int16)))),
+    i32 Array(LowCardinality(Nullable((Int32)))),
+    i64 Array(LowCardinality(Nullable((Int64)))),
+    u8 Array(LowCardinality(Nullable((UInt8)))),
+    u16 Array(LowCardinality(Nullable((UInt16)))),
+    u32 Array(LowCardinality(Nullable((UInt32)))),
+    u64 Array(LowCardinality(Nullable((UInt64)))),
+    f32 Array(LowCardinality(Nullable((Float32)))),
+    f64 Array(LowCardinality(Nullable((Float64)))),
+
+    date Array(LowCardinality(Nullable((Date)))),
+    date_time Array(LowCardinality(Nullable(DateTime('Europe/Moscow')))),
+
+    str Array(LowCardinality(Nullable((String)))),
+    fixed_string Array(LowCardinality(Nullable(FixedString(5)))),
+    INDEX idx (i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, date, date_time, str, fixed_string)
+    TYPE bloom_filter GRANULARITY 1)
+ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 6;
+
+INSERT INTO bloom_filter_array_lc_null_types_test
+SELECT groupArray(number) AS order_key,
+    groupArray(toInt8(number)) AS i8,
+    groupArray(toInt16(number)) AS i16,
+    groupArray(toInt32(number)) AS i32,
+    groupArray(toInt64(number)) AS i64,
+    groupArray(toUInt8(number)) AS u8,
+    groupArray(toUInt16(number)) AS u16,
+    groupArray(toUInt32(number)) AS u32,
+    groupArray(toUInt64(number)) AS u64,
+    groupArray(toFloat32(number)) AS f32,
+    groupArray(toFloat64(number)) AS f64,
+    groupArray(toDate(number, 'Europe/Moscow')) AS date,
+    groupArray(toDateTime(number, 'Europe/Moscow')) AS date_time,
+    groupArray(toString(number)) AS str,
+    groupArray(toFixedString(toString(number), 5)) AS fixed_string
+    FROM (SELECT number FROM system.numbers LIMIT 15);
+
 INSERT INTO bloom_filter_array_lc_null_types_test SELECT groupArray(number) AS order_key, groupArray(toInt8(number)) AS i8, groupArray(toInt16(number)) AS i16, groupArray(toInt32(number)) AS i32, groupArray(toInt64(number)) AS i64, groupArray(toUInt8(number)) AS u8, groupArray(toUInt16(number)) AS u16, groupArray(toUInt32(number)) AS u32, groupArray(toUInt64(number)) AS u64, groupArray(toFloat32(number)) AS f32, groupArray(toFloat64(number)) AS f64, groupArray(toDate(number, 'Europe/Moscow')) AS date, groupArray(toDateTime(number, 'Europe/Moscow')) AS date_time, groupArray(toString(number)) AS str, groupArray(toFixedString(toString(number), 5)) AS fixed_string FROM (SELECT number FROM system.numbers WHERE number >= 5 LIMIT 15);
 INSERT INTO bloom_filter_array_lc_null_types_test SELECT groupArray(number) AS order_key, groupArray(toInt8(number)) AS i8, groupArray(toInt16(number)) AS i16, groupArray(toInt32(number)) AS i32, groupArray(toInt64(number)) AS i64, groupArray(toUInt8(number)) AS u8, groupArray(toUInt16(number)) AS u16, groupArray(toUInt32(number)) AS u32, groupArray(toUInt64(number)) AS u64, groupArray(toFloat32(number)) AS f32, groupArray(toFloat64(number)) AS f64, groupArray(toDate(number, 'Europe/Moscow')) AS date, groupArray(toDateTime(number, 'Europe/Moscow')) AS date_time, groupArray(toString(number)) AS str, groupArray(toFixedString(toString(number), 5)) AS fixed_string FROM (SELECT number FROM system.numbers WHERE number >= 10 LIMIT 15);
 INSERT INTO bloom_filter_array_lc_null_types_test SELECT n AS order_key, n AS i8, n AS i16, n AS i32, n AS i64, n AS u8, n AS u16, n AS u32, n AS u64, n AS f32, n AS f64, n AS date, n AS date_time, n AS str, n AS fixed_string FROM (SELECT [NULL] AS n);
diff --git a/tests/queries/0_stateless/01414_low_cardinality_nullable.reference b/tests/queries/0_stateless/01414_low_cardinality_nullable.reference
new file mode 100644
index 000000000000..bf7b6cf4f76f
--- /dev/null
+++ b/tests/queries/0_stateless/01414_low_cardinality_nullable.reference
@@ -0,0 +1,82 @@
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+3
+3
+3
+3
+3
+3
+3
+3
+3
+3
+3
+3
+3
+3
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+2
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
diff --git a/tests/queries/0_stateless/01414_low_cardinality_nullable.sql b/tests/queries/0_stateless/01414_low_cardinality_nullable.sql
new file mode 100644
index 000000000000..6e311f9d519c
--- /dev/null
+++ b/tests/queries/0_stateless/01414_low_cardinality_nullable.sql
@@ -0,0 +1,220 @@
+DROP TABLE IF EXISTS lc_nullable;
+
+CREATE TABLE lc_nullable (
+    order_key   Array(LowCardinality(Nullable((UInt64)))),
+
+    i8  Array(LowCardinality(Nullable(Int8))),
+    i16 Array(LowCardinality(Nullable(Int16))),
+    i32 Array(LowCardinality(Nullable(Int32))),
+    i64 Array(LowCardinality(Nullable(Int64))),
+    u8  Array(LowCardinality(Nullable(UInt8))),
+    u16 Array(LowCardinality(Nullable(UInt16))),
+    u32 Array(LowCardinality(Nullable(UInt32))),
+    u64 Array(LowCardinality(Nullable(UInt64))),
+    f32 Array(LowCardinality(Nullable(Float32))),
+    f64 Array(LowCardinality(Nullable(Float64))),
+
+    date Array(LowCardinality(Nullable((Date)))),
+    date_time Array(LowCardinality(Nullable(DateTime('Europe/Moscow')))),
+
+    str Array(LowCardinality(Nullable((String)))),
+    fixed_string Array(LowCardinality(Nullable(FixedString(5))))
+) ENGINE = MergeTree() ORDER BY order_key;
+
+INSERT INTO lc_nullable SELECT
+    groupArray(number) AS order_key,
+    groupArray(toInt8(number)) AS i8,
+    groupArray(toInt16(number)) AS i16,
+    groupArray(toInt32(number)) AS i32,
+    groupArray(toInt64(number)) AS i64,
+    groupArray(toUInt8(number)) AS u8,
+    groupArray(toUInt16(number)) AS u16,
+    groupArray(toUInt32(number)) AS u32,
+    groupArray(toUInt64(number)) AS u64,
+    groupArray(toFloat32(number)) AS f32,
+    groupArray(toFloat64(number)) AS f64,
+    groupArray(toDate(number, 'Europe/Moscow')) AS date,
+    groupArray(toDateTime(number, 'Europe/Moscow')) AS date_time,
+    groupArray(toString(number)) AS str,
+    groupArray(toFixedString(toString(number), 5)) AS fixed_string
+    FROM (SELECT number FROM system.numbers LIMIT 15);
+
+INSERT INTO lc_nullable SELECT
+    groupArray(num) AS order_key,
+    groupArray(toInt8(num)) AS i8,
+    groupArray(toInt16(num)) AS i16,
+    groupArray(toInt32(num)) AS i32,
+    groupArray(toInt64(num)) AS i64,
+    groupArray(toUInt8(num)) AS u8,
+    groupArray(toUInt16(num)) AS u16,
+    groupArray(toUInt32(num)) AS u32,
+    groupArray(toUInt64(num)) AS u64,
+    groupArray(toFloat32(num)) AS f32,
+    groupArray(toFloat64(num)) AS f64,
+    groupArray(toDate(num, 'Europe/Moscow')) AS date,
+    groupArray(toDateTime(num, 'Europe/Moscow')) AS date_time,
+    groupArray(toString(num)) AS str,
+    groupArray(toFixedString(toString(num), 5)) AS fixed_string
+    FROM (SELECT negate(number) as num FROM system.numbers LIMIT 15);
+
+INSERT INTO lc_nullable SELECT
+    groupArray(number) AS order_key,
+    groupArray(toInt8(number)) AS i8,
+    groupArray(toInt16(number)) AS i16,
+    groupArray(toInt32(number)) AS i32,
+    groupArray(toInt64(number)) AS i64,
+    groupArray(toUInt8(number)) AS u8,
+    groupArray(toUInt16(number)) AS u16,
+    groupArray(toUInt32(number)) AS u32,
+    groupArray(toUInt64(number)) AS u64,
+    groupArray(toFloat32(number)) AS f32,
+    groupArray(toFloat64(number)) AS f64,
+    groupArray(toDate(number, 'Europe/Moscow')) AS date,
+    groupArray(toDateTime(number, 'Europe/Moscow')) AS date_time,
+    groupArray(toString(number)) AS str,
+    groupArray(toFixedString(toString(number), 5)) AS fixed_string
+    FROM (SELECT number FROM system.numbers WHERE number >= 5 LIMIT 15);
+
+INSERT INTO lc_nullable SELECT
+    groupArray(number) AS order_key,
+    groupArray(toInt8(number)) AS i8,
+    groupArray(toInt16(number)) AS i16,
+    groupArray(toInt32(number)) AS i32,
+    groupArray(toInt64(number)) AS i64,
+    groupArray(toUInt8(number)) AS u8,
+    groupArray(toUInt16(number)) AS u16,
+    groupArray(toUInt32(number)) AS u32,
+    groupArray(toUInt64(number)) AS u64,
+    groupArray(toFloat32(number)) AS f32,
+    groupArray(toFloat64(number)) AS f64,
+    groupArray(toDate(number, 'Europe/Moscow')) AS date,
+    groupArray(toDateTime(number, 'Europe/Moscow')) AS date_time,
+    groupArray(toString(number)) AS str,
+    groupArray(toFixedString(toString(number), 5)) AS fixed_string
+    FROM (SELECT number FROM system.numbers WHERE number >= 10 LIMIT 15);
+
+INSERT INTO lc_nullable SELECT
+    n AS order_key,
+    n AS i8,
+    n AS i16,
+    n AS i32,
+    n AS i64,
+    n AS u8,
+    n AS u16,
+    n AS u32,
+    n AS u64,
+    n AS f32,
+    n AS f64,
+    n AS date,
+    n AS date_time,
+    n AS str,
+    n AS fixed_string
+    FROM (SELECT [NULL] AS n);
+
+INSERT INTO lc_nullable SELECT
+    [NULL, n] AS order_key,
+    [NULL, toInt8(n)] AS i8,
+    [NULL, toInt16(n)] AS i16,
+    [NULL, toInt32(n)] AS i32,
+    [NULL, toInt64(n)] AS i64,
+    [NULL, toUInt8(n)] AS u8,
+    [NULL, toUInt16(n)] AS u16,
+    [NULL, toUInt32(n)] AS u32,
+    [NULL, toUInt64(n)] AS u64,
+    [NULL, toFloat32(n)] AS f32,
+    [NULL, toFloat64(n)] AS f64,
+    [NULL, toDate(n, 'Europe/Moscow')] AS date,
+    [NULL, toDateTime(n, 'Europe/Moscow')] AS date_time,
+    [NULL, toString(n)] AS str,
+    [NULL, toFixedString(toString(n), 5)] AS fixed_string
+    FROM (SELECT 100 as n);
+
+SELECT count() FROM lc_nullable WHERE has(i8, 1);
+SELECT count() FROM lc_nullable WHERE has(i16, 1);
+SELECT count() FROM lc_nullable WHERE has(i32, 1);
+SELECT count() FROM lc_nullable WHERE has(i64, 1);
+SELECT count() FROM lc_nullable WHERE has(u8, 1);
+SELECT count() FROM lc_nullable WHERE has(u16, 1);
+SELECT count() FROM lc_nullable WHERE has(u32, 1);
+SELECT count() FROM lc_nullable WHERE has(u64, 1);
+SELECT count() FROM lc_nullable WHERE has(f32, 1);
+SELECT count() FROM lc_nullable WHERE has(f64, 1);
+SELECT count() FROM lc_nullable WHERE has(date, toDate('1970-01-02'));
+SELECT count() FROM lc_nullable WHERE has(date_time, toDateTime('1970-01-01 03:00:01', 'Europe/Moscow'));
+SELECT count() FROM lc_nullable WHERE has(str, '1');
+SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('1', 5));
+
+SELECT count() FROM lc_nullable WHERE has(i8,  -1);
+SELECT count() FROM lc_nullable WHERE has(i16, -1);
+SELECT count() FROM lc_nullable WHERE has(i32, -1);
+SELECT count() FROM lc_nullable WHERE has(i64, -1);
+SELECT count() FROM lc_nullable WHERE has(u8,  -1);
+SELECT count() FROM lc_nullable WHERE has(u16, -1);
+SELECT count() FROM lc_nullable WHERE has(u32, -1);
+SELECT count() FROM lc_nullable WHERE has(u64, -1);
+SELECT count() FROM lc_nullable WHERE has(f32, -1);
+SELECT count() FROM lc_nullable WHERE has(f64, -1);
+SELECT count() FROM lc_nullable WHERE has(str, '-1');
+SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('-1', 5));
+
+SELECT count() FROM lc_nullable WHERE has(i8, 5);
+SELECT count() FROM lc_nullable WHERE has(i16, 5);
+SELECT count() FROM lc_nullable WHERE has(i32, 5);
+SELECT count() FROM lc_nullable WHERE has(i64, 5);
+SELECT count() FROM lc_nullable WHERE has(u8, 5);
+SELECT count() FROM lc_nullable WHERE has(u16, 5);
+SELECT count() FROM lc_nullable WHERE has(u32, 5);
+SELECT count() FROM lc_nullable WHERE has(u64, 5);
+SELECT count() FROM lc_nullable WHERE has(f32, 5);
+SELECT count() FROM lc_nullable WHERE has(f64, 5);
+SELECT count() FROM lc_nullable WHERE has(date, toDate('1970-01-06'));
+SELECT count() FROM lc_nullable WHERE has(date_time, toDateTime('1970-01-01 03:00:05', 'Europe/Moscow'));
+SELECT count() FROM lc_nullable WHERE has(str, '5');
+SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('5', 5));
+
+SELECT count() FROM lc_nullable WHERE has(i8, 10);
+SELECT count() FROM lc_nullable WHERE has(i16, 10);
+SELECT count() FROM lc_nullable WHERE has(i32, 10);
+SELECT count() FROM lc_nullable WHERE has(i64, 10);
+SELECT count() FROM lc_nullable WHERE has(u8, 10);
+SELECT count() FROM lc_nullable WHERE has(u16, 10);
+SELECT count() FROM lc_nullable WHERE has(u32, 10);
+SELECT count() FROM lc_nullable WHERE has(u64, 10);
+SELECT count() FROM lc_nullable WHERE has(f32, 10);
+SELECT count() FROM lc_nullable WHERE has(f64, 10);
+SELECT count() FROM lc_nullable WHERE has(date, toDate('1970-01-11'));
+SELECT count() FROM lc_nullable WHERE has(date_time, toDateTime('1970-01-01 03:00:10', 'Europe/Moscow'));
+SELECT count() FROM lc_nullable WHERE has(str, '10');
+SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('10', 5));
+
+SELECT count() FROM lc_nullable WHERE has(i8, NULL);
+SELECT count() FROM lc_nullable WHERE has(i16, NULL);
+SELECT count() FROM lc_nullable WHERE has(i32, NULL);
+SELECT count() FROM lc_nullable WHERE has(i64, NULL);
+SELECT count() FROM lc_nullable WHERE has(u8, NULL);
+SELECT count() FROM lc_nullable WHERE has(u16, NULL);
+SELECT count() FROM lc_nullable WHERE has(u32, NULL);
+SELECT count() FROM lc_nullable WHERE has(u64, NULL);
+SELECT count() FROM lc_nullable WHERE has(f32, NULL);
+SELECT count() FROM lc_nullable WHERE has(f64, NULL);
+SELECT count() FROM lc_nullable WHERE has(date, NULL);
+SELECT count() FROM lc_nullable WHERE has(date_time, NULL);
+SELECT count() FROM lc_nullable WHERE has(str, NULL);
+SELECT count() FROM lc_nullable WHERE has(fixed_string, NULL);
+
+SELECT count() FROM lc_nullable WHERE has(i8, 100);
+SELECT count() FROM lc_nullable WHERE has(i16, 100);
+SELECT count() FROM lc_nullable WHERE has(i32, 100);
+SELECT count() FROM lc_nullable WHERE has(i64, 100);
+SELECT count() FROM lc_nullable WHERE has(u8, 100);
+SELECT count() FROM lc_nullable WHERE has(u16, 100);
+SELECT count() FROM lc_nullable WHERE has(u32, 100);
+SELECT count() FROM lc_nullable WHERE has(u64, 100);
+SELECT count() FROM lc_nullable WHERE has(f32, 100);
+SELECT count() FROM lc_nullable WHERE has(f64, 100);
+SELECT count() FROM lc_nullable WHERE has(date, toDate('1970-04-11'));
+SELECT count() FROM lc_nullable WHERE has(date_time, toDateTime('1970-01-01 03:01:40', 'Europe/Moscow'));
+SELECT count() FROM lc_nullable WHERE has(str, '100');
+SELECT count() FROM lc_nullable WHERE has(fixed_string, toFixedString('100', 5));
+
+DROP TABLE IF EXISTS lc_nullable;
diff --git a/tests/queries/0_stateless/01441_low_cardinality_array_index.reference b/tests/queries/0_stateless/01441_low_cardinality_array_index.reference
new file mode 100644
index 000000000000..4e68594ce22f
--- /dev/null
+++ b/tests/queries/0_stateless/01441_low_cardinality_array_index.reference
@@ -0,0 +1,15 @@
+100
+100
+100
+100
+1000000
+1000000
+1000000
+4000
+4000
+4000
+4000
+1000000
+1000000
+1000000
+1000000
diff --git a/tests/queries/0_stateless/01441_low_cardinality_array_index.sql b/tests/queries/0_stateless/01441_low_cardinality_array_index.sql
new file mode 100644
index 000000000000..45d69b5aa64b
--- /dev/null
+++ b/tests/queries/0_stateless/01441_low_cardinality_array_index.sql
@@ -0,0 +1,41 @@
+DROP TABLE IF EXISTS t_01411;
+
+CREATE TABLE t_01411(
+    str LowCardinality(String),
+    arr Array(LowCardinality(String)) default [str]
+) ENGINE = MergeTree()
+ORDER BY tuple();
+
+INSERT INTO t_01411 (str) SELECT concat('asdf', toString(number % 10000)) FROM numbers(1000000);
+
+SELECT count() FROM t_01411 WHERE str = 'asdf337';
+SELECT count() FROM t_01411 WHERE arr[1] = 'asdf337';
+SELECT count() FROM t_01411 WHERE has(arr, 'asdf337');
+SELECT count() FROM t_01411 WHERE indexOf(arr, 'asdf337') > 0;
+
+SELECT count() FROM t_01411 WHERE arr[1] = str;
+SELECT count() FROM t_01411 WHERE has(arr, str);
+SELECT count() FROM t_01411 WHERE indexOf(arr, str) > 0;
+
+DROP TABLE IF EXISTS t_01411;
+DROP TABLE IF EXISTS t_01411_num;
+
+CREATE TABLE t_01411_num(
+    num UInt8,
+    arr Array(LowCardinality(Int64)) default [num]
+) ENGINE = MergeTree()
+ORDER BY tuple();
+
+INSERT INTO t_01411_num (num) SELECT number % 1000 FROM numbers(1000000);
+
+SELECT count() FROM t_01411_num WHERE num = 42;
+SELECT count() FROM t_01411_num WHERE arr[1] = 42;
+SELECT count() FROM t_01411_num WHERE has(arr, 42);
+SELECT count() FROM t_01411_num WHERE indexOf(arr, 42) > 0;
+
+SELECT count() FROM t_01411_num WHERE arr[1] = num;
+SELECT count() FROM t_01411_num WHERE has(arr, num);
+SELECT count() FROM t_01411_num WHERE indexOf(arr, num) > 0;
+SELECT count() FROM t_01411_num WHERE indexOf(arr, num % 337) > 0;
+
+DROP TABLE IF EXISTS t_01411_num;
