diff --git a/tests/queries/0_stateless/03164_materialize_skip_index.reference b/tests/queries/0_stateless/03164_materialize_skip_index.reference
new file mode 100644
index 000000000000..34251101e894
--- /dev/null
+++ b/tests/queries/0_stateless/03164_materialize_skip_index.reference
@@ -0,0 +1,52 @@
+20
+Expression ((Project names + Projection))
+  Aggregating
+    Expression (Before GROUP BY)
+      Expression
+        ReadFromMergeTree (default.t_skip_index_insert)
+        Indexes:
+          Skip
+            Name: idx_a
+            Description: minmax GRANULARITY 1
+            Parts: 2/2
+            Granules: 50/50
+          Skip
+            Name: idx_b
+            Description: set GRANULARITY 1
+            Parts: 2/2
+            Granules: 50/50
+20
+Expression ((Project names + Projection))
+  Aggregating
+    Expression (Before GROUP BY)
+      Expression
+        ReadFromMergeTree (default.t_skip_index_insert)
+        Indexes:
+          Skip
+            Name: idx_a
+            Description: minmax GRANULARITY 1
+            Parts: 1/1
+            Granules: 6/50
+          Skip
+            Name: idx_b
+            Description: set GRANULARITY 1
+            Parts: 1/1
+            Granules: 6/6
+20
+Expression ((Project names + Projection))
+  Aggregating
+    Expression (Before GROUP BY)
+      Expression
+        ReadFromMergeTree (default.t_skip_index_insert)
+        Indexes:
+          Skip
+            Name: idx_a
+            Description: minmax GRANULARITY 1
+            Parts: 1/2
+            Granules: 6/50
+          Skip
+            Name: idx_b
+            Description: set GRANULARITY 1
+            Parts: 1/1
+            Granules: 6/6
+4	0
diff --git a/tests/queries/0_stateless/03164_materialize_skip_index.sql b/tests/queries/0_stateless/03164_materialize_skip_index.sql
new file mode 100644
index 000000000000..4e59ef6b6cd9
--- /dev/null
+++ b/tests/queries/0_stateless/03164_materialize_skip_index.sql
@@ -0,0 +1,50 @@
+DROP TABLE IF EXISTS t_skip_index_insert;
+
+CREATE TABLE t_skip_index_insert
+(
+    a UInt64,
+    b UInt64,
+    INDEX idx_a a TYPE minmax,
+    INDEX idx_b b TYPE set(3)
+)
+ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 4;
+
+SET allow_experimental_analyzer = 1;
+SET materialize_skip_indexes_on_insert = 0;
+
+SYSTEM STOP MERGES t_skip_index_insert;
+
+INSERT INTO t_skip_index_insert SELECT number, number / 50 FROM numbers(100);
+INSERT INTO t_skip_index_insert SELECT number, number / 50 FROM numbers(100, 100);
+
+SELECT count() FROM t_skip_index_insert WHERE a >= 110 AND a < 130 AND b = 2;
+EXPLAIN indexes = 1 SELECT count() FROM t_skip_index_insert WHERE a >= 110 AND a < 130 AND b = 2;
+
+SYSTEM START MERGES t_skip_index_insert;
+OPTIMIZE TABLE t_skip_index_insert FINAL;
+
+SELECT count() FROM t_skip_index_insert WHERE a >= 110 AND a < 130 AND b = 2;
+EXPLAIN indexes = 1 SELECT count() FROM t_skip_index_insert WHERE a >= 110 AND a < 130 AND b = 2;
+
+TRUNCATE TABLE t_skip_index_insert;
+
+INSERT INTO t_skip_index_insert SELECT number, number / 50 FROM numbers(100);
+INSERT INTO t_skip_index_insert SELECT number, number / 50 FROM numbers(100, 100);
+
+SET mutations_sync = 2;
+
+ALTER TABLE t_skip_index_insert MATERIALIZE INDEX idx_a;
+ALTER TABLE t_skip_index_insert MATERIALIZE INDEX idx_b;
+
+SELECT count() FROM t_skip_index_insert WHERE a >= 110 AND a < 130 AND b = 2;
+EXPLAIN indexes = 1 SELECT count() FROM t_skip_index_insert WHERE a >= 110 AND a < 130 AND b = 2;
+
+DROP TABLE IF EXISTS t_skip_index_insert;
+
+SYSTEM FLUSH LOGS;
+
+SELECT count(), sum(ProfileEvents['MergeTreeDataWriterSkipIndicesCalculationMicroseconds'])
+FROM system.query_log
+WHERE current_database = currentDatabase()
+    AND query LIKE 'INSERT INTO t_skip_index_insert SELECT%'
+    AND type = 'QueryFinish';
diff --git a/tests/queries/0_stateless/03164_materialize_statistics.reference b/tests/queries/0_stateless/03164_materialize_statistics.reference
new file mode 100644
index 000000000000..c209d2e8b630
--- /dev/null
+++ b/tests/queries/0_stateless/03164_materialize_statistics.reference
@@ -0,0 +1,10 @@
+10
+10
+10
+statistic not used	Condition less(b, 10_UInt8) moved to PREWHERE
+statistic not used	Condition less(a, 10_UInt8) moved to PREWHERE
+statistic used after merge	Condition less(a, 10_UInt8) moved to PREWHERE
+statistic used after merge	Condition less(b, 10_UInt8) moved to PREWHERE
+statistic used after materialize	Condition less(a, 10_UInt8) moved to PREWHERE
+statistic used after materialize	Condition less(b, 10_UInt8) moved to PREWHERE
+2	0
diff --git a/tests/queries/0_stateless/03164_materialize_statistics.sql b/tests/queries/0_stateless/03164_materialize_statistics.sql
new file mode 100644
index 000000000000..763644d16abe
--- /dev/null
+++ b/tests/queries/0_stateless/03164_materialize_statistics.sql
@@ -0,0 +1,49 @@
+DROP TABLE IF EXISTS t_statistic_materialize;
+
+SET allow_experimental_analyzer = 1;
+SET allow_experimental_statistic = 1;
+SET allow_statistic_optimize = 1;
+SET materialize_statistics_on_insert = 0;
+
+CREATE TABLE t_statistic_materialize
+(
+    a Int64 STATISTIC(tdigest),
+    b Int16 STATISTIC(tdigest),
+) ENGINE = MergeTree() ORDER BY tuple()
+SETTINGS min_bytes_for_wide_part = 0, enable_vertical_merge_algorithm = 0; -- TODO: there is a bug in vertical merge with statistics.
+
+INSERT INTO t_statistic_materialize SELECT number, -number FROM system.numbers LIMIT 10000;
+
+SELECT count(*) FROM t_statistic_materialize WHERE b < 10 and a < 10 SETTINGS log_comment = 'statistic not used';
+
+OPTIMIZE TABLE t_statistic_materialize FINAL;
+
+SELECT count(*) FROM t_statistic_materialize WHERE b < 10 and a < 10 SETTINGS log_comment = 'statistic used after merge';
+
+TRUNCATE TABLE t_statistic_materialize;
+SET mutations_sync = 2;
+
+INSERT INTO t_statistic_materialize SELECT number, -number FROM system.numbers LIMIT 10000;
+ALTER TABLE t_statistic_materialize MATERIALIZE STATISTIC a, b TYPE tdigest;
+
+SELECT count(*) FROM t_statistic_materialize WHERE b < 10 and a < 10 SETTINGS log_comment = 'statistic used after materialize';
+
+DROP TABLE t_statistic_materialize;
+
+SYSTEM FLUSH LOGS;
+
+SELECT log_comment, message FROM system.text_log JOIN
+(
+    SELECT Settings['log_comment'] AS log_comment, query_id FROM system.query_log
+    WHERE current_database = currentDatabase()
+        AND query LIKE 'SELECT count(*) FROM t_statistic_materialize%'
+        AND type = 'QueryFinish'
+) AS query_log USING (query_id)
+WHERE message LIKE '%moved to PREWHERE%'
+ORDER BY event_time_microseconds;
+
+SELECT count(), sum(ProfileEvents['MergeTreeDataWriterStatisticsCalculationMicroseconds'])
+FROM system.query_log
+WHERE current_database = currentDatabase()
+    AND query LIKE 'INSERT INTO t_statistic_materialize SELECT%'
+    AND type = 'QueryFinish';
