You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Can't use external LDAP-user for remote child queries of a Distributed query
ClickHouse version 22.2.2.1
1) inter-server per-cluster **secret** (for Distributed queries) is used
(i.e. **initial user** as current user for a child query of **distr. queries**);

2) Initial user - an **external ldap-user** 'my_user', authorization under such user is OK on all instances, both for http and native protocol;

3) https port 8440, tcpSecure port 9440;

4) 'database.table' - Distributed table with remote tables (there are 1 or more remote shard to read for sure);
 'my_host' - host from which query is initiated; 'my_host_2' - remote host;

select count(1) from database.table;

Code 516. DB::Exception: Received from 'my_host_2':9440. DB::Exception: 'my_user': Authentication failed: password is incorrect or there is no user with such name. (AUTHENTICATION FAILED) (version 22.2.2.1), server(addr='my_host':8440, db=default)

------------
I don't want to use default/tech_user for inter-server queries and I would like ldap-users to stay external (i.e. **not** locally created as 'identified with <ldap_server>'). Is there any workaround in that case?
External roles are not transferred during LDAP authentication when querying a distributed table.
### Company or project name

Clickhouse v.25.2

### Describe what's wrong

A db.t1d  distributed table has been created on host: host1. 
tables t1 are created on hosts: host1 and host2
LDAP is configured on both hosts and a role has been created: Users
grant select on db.* to Users
An error occurs when executing a request by a user ldap_user with LDAP authentication. 

host1 :) select count()  from db.t1d

SELECT count()
FROM db.t1d

Query id: ccaac33d-b067-4ef7-b60a-c75c657ea093


Elapsed: 0.021 sec.

Received exception from server (version 25.2.2):
Code: 497. DB::Exception: Received from localhost:9000. DB::Exception: Received from host2:9000. DB::Exception: ldap_user: Not enough privileges. To execute this query, it's necessary to have the grant SELECT for at least one column on db.t1. (ACCESS_DENIED)

At the same time, the ldap_user user is created on host2 and the following entry is created in the host2 log:

2025.04.07 18:06:08.737248 [ 2334554 ] {} <Debug> TCP_INTERSERVER-Session-a217c140-5333-491d-b770-e75ee17ca7ac: Authenticating user 'ldap_user' from 127.0.0.1:58794
2025.04.07 18:06:08.737313 [ 2334554 ] {} <Debug> TCP_INTERSERVER-Session-a217c140-5333-491d-b770-e75ee17ca7ac: a217c140-5333-491d-b770-e75ee17ca7ac Authenticated with global context as user 5048189d-b640-2f22-3dc8-cfcb2c39d9a9
2025.04.07 18:06:08.737325 [ 2334554 ] {} <Debug> TCP_INTERSERVER-Session-a217c140-5333-491d-b770-e75ee17ca7ac: User 5048189d-b640-2f22-3dc8-cfcb2c39d9a9 has external_roles applied: [Users] (1)
2025.04.07 18:06:08.737430 [ 2334554 ] {} <Trace> ContextAccess (ldap_user): Settings: readonly = 0, allow_ddl = true, allow_introspection_functions = false
2025.04.07 18:06:08.737448 [ 2334554 ] {} <Trace> ContextAccess (ldap_user): List of all grants: GRANT USAGE ON *.*
2025.04.07 18:06:08.737537 [ 2334554 ] {} <Trace> ContextAccess (16726303): List of all grants including implicit: GRANT TABLE ENGINE ON *, REVOKE TABLE ENGINE ON AzureBlobStorage, REVOKE TABLE ENGINE ON Distributed, REVOKE TABLE ENGINE ON File, REVOKE TABLE ENGINE ON HDFS, REVOKE TABLE ENGINE ON Hive, REVOKE TABLE ENGINE ON JDBC, REVOKE TABLE ENGINE ON Kafka, REVOKE TABLE ENGINE ON MongoDB, REVOKE TABLE ENGINE ON MySQL, REVOKE TABLE ENGINE ON NATS, REVOKE TABLE ENGINE ON ODBC, REVOKE TABLE ENGINE ON PostgreSQL, REVOKE TABLE ENGINE ON RabbitMQ, REVOKE TABLE ENGINE ON Redis, REVOKE TABLE ENGINE ON S3, REVOKE TABLE ENGINE ON SQLite, REVOKE TABLE ENGINE ON URL, GRANT SELECT ON system.aggregate_function_combinators, GRANT SELECT ON system.collations, GRANT SELECT ON system.columns, GRANT SELECT ON system.contributors, GRANT SELECT ON system.current_roles, GRANT SELECT ON system.data_type_families, GRANT SELECT ON system.database_engines, GRANT SELECT ON system.databases, GRANT SELECT ON system.enabled_roles, GRANT SELECT ON system.formats, GRANT SELECT ON system.functions, GRANT SELECT ON system.licenses, GRANT SELECT ON system.one, GRANT SELECT ON system.privileges, GRANT SELECT ON system.quota_usage, GRANT SELECT ON system.settings, GRANT SELECT ON system.table_engines, GRANT SELECT ON system.table_functions, GRANT SELECT ON system.tables, GRANT SELECT ON system.time_zones
2025.04.07 18:06:08.737914 [ 2334554 ] {7a2cc98d-b03c-46e5-8fe0-f0640c98b68a} <Debug> executeQuery: (from 127.0.0.1:58794, user: ldap_user, initial_query_id: 224d78d1-b060-40ba-a116-41ffed7d4069) (query 1, line 1) SELECT count() AS `count()` FROM `db`.`t1` AS `__table1` (stage: WithMergeableState)
2025.04.07 18:06:08.738257 [ 2334554 ] {7a2cc98d-b03c-46e5-8fe0-f0640c98b68a} <Trace> Planner: Query to stage WithMergeableState
2025.04.07 18:06:08.738741 [ 2334554 ] {7a2cc98d-b03c-46e5-8fe0-f0640c98b68a} <Error> executeQuery: Code: 497. DB::Exception: ldap_user: Not enough privileges. To execute this query, it's necessary to have the grant SELECT for at least one column on db.t1. (ACCESS_DENIED) (version 25.3.2.39 (official build)) (from 127.0.0.1:58794) (query 1, line 1) (in query: SELECT count() AS `count()` FROM `db`.`t1` AS `__table1`), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000f48dcdb
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009f6520c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009f64bcb
3. DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x000000001357b197
4. DB::Planner::buildPlanForQueryNode() @ 0x0000000013561f05
5. DB::Planner::buildQueryPlanIfNeeded() @ 0x000000001355d57e
6. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000013901d99
7. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000138fd3a4
8. DB::TCPHandler::runImpl() @ 0x0000000014c2d92c
9. DB::TCPHandler::run() @ 0x0000000014c4bb19
10. Poco::Net::TCPServerConnection::start() @ 0x0000000018376567
11. Poco::Net::TCPServerDispatcher::run() @ 0x00000000183769b9
12. Poco::PooledThread::run() @ 0x0000000018342cfb
13. Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000183411dd
14. start_thread @ 0x00000000000081ca
15. __clone @ 0x00000000000398d3
 
Is there a mistake in transferring external roles here?
src/Interpreters/Context.cpp

```
void Context::setExternalRolesWithLock(const std::vector & new_external_roles, const std::lock_guard &)
{
if (!new_external_roles.empty())
{
if (current_roles)
current_roles->insert(current_roles->end(), new_external_roles.begin(), new_external_roles.end());
else
current_roles = std::make_shared<std::vector>(new_external_roles);
need_recalculate_access = true;
}
}
```
maybe there should be external_roles instead of current_roles?

I replaced current_roles->external_roles in this function and rebuilt clickhouse and this functionality is working and roles were transferred when querying the distributed table




### Does it reproduce on the most recent release?

Yes

### How to reproduce

25.2 and 25.3

### Expected behavior

_No response_

### Error message and/or stacktrace

_No response_

### Additional context

_No response_
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
