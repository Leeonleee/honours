diff --git a/programs/keeper/Keeper.cpp b/programs/keeper/Keeper.cpp
index 266b363eb474..3853c955171d 100644
--- a/programs/keeper/Keeper.cpp
+++ b/programs/keeper/Keeper.cpp
@@ -17,7 +17,6 @@
 #include <Poco/Net/TCPServerParams.h>
 #include <Poco/Net/TCPServer.h>
 #include <Poco/Util/HelpFormatter.h>
-#include <Poco/Version.h>
 #include <Poco/Environment.h>
 #include <sys/stat.h>
 #include <pwd.h>
diff --git a/programs/server/Server.cpp b/programs/server/Server.cpp
index 9ef9f704f619..164e1ce14e56 100644
--- a/programs/server/Server.cpp
+++ b/programs/server/Server.cpp
@@ -981,7 +981,7 @@ try
 
     StatusFile status{path / "status", StatusFile::write_full_info};
 
-    DB::ServerUUID::load(path / "uuid", log);
+    ServerUUID::load(path / "uuid", log);
 
     /// Try to increase limit on number of open files.
     {
diff --git a/src/Common/Exception.h b/src/Common/Exception.h
index 8e50c1114f47..170e0d32b3ce 100644
--- a/src/Common/Exception.h
+++ b/src/Common/Exception.h
@@ -4,7 +4,6 @@
 #include <vector>
 #include <memory>
 
-#include <Poco/Version.h>
 #include <Poco/Exception.h>
 
 #include <base/defines.h>
diff --git a/src/Common/Macros.cpp b/src/Common/Macros.cpp
index e5d4be446c13..f43fed6c4992 100644
--- a/src/Common/Macros.cpp
+++ b/src/Common/Macros.cpp
@@ -1,8 +1,9 @@
 #include <Poco/Util/AbstractConfiguration.h>
 #include <Common/Macros.h>
 #include <Common/Exception.h>
-#include <IO/WriteHelpers.h>
 #include <Common/logger_useful.h>
+#include <Core/ServerUUID.h>
+#include <IO/WriteHelpers.h>
 
 
 namespace DB
@@ -11,6 +12,8 @@ namespace DB
 namespace ErrorCodes
 {
     extern const int SYNTAX_ERROR;
+    extern const int BAD_ARGUMENTS;
+    extern const int NO_ELEMENTS_IN_CONFIG;
 }
 
 Macros::Macros(const Poco::Util::AbstractConfiguration & config, const String & root_key, Poco::Logger * log)
@@ -95,7 +98,7 @@ String Macros::expand(const String & s,
         else if (macro_name == "uuid" && !info.expand_special_macros_only)
         {
             if (info.table_id.uuid == UUIDHelpers::Nil)
-                throw Exception(ErrorCodes::SYNTAX_ERROR, "Macro 'uuid' and empty arguments of ReplicatedMergeTree "
+                throw Exception(ErrorCodes::BAD_ARGUMENTS, "Macro 'uuid' and empty arguments of ReplicatedMergeTree "
                                 "are supported only for ON CLUSTER queries with Atomic database engine");
             /// For ON CLUSTER queries we don't want to require all macros definitions in initiator's config.
             /// However, initiator must check that for cross-replication cluster zookeeper_path does not contain {uuid} macro.
@@ -105,6 +108,15 @@ String Macros::expand(const String & s,
             res += toString(info.table_id.uuid);
             info.expanded_uuid = true;
         }
+        else if (macro_name == "server_uuid")
+        {
+            auto uuid = ServerUUID::get();
+            if (UUIDHelpers::Nil == uuid)
+                throw Exception(ErrorCodes::BAD_ARGUMENTS,
+                    "Macro {server_uuid} expanded to zero, which means the UUID is not initialized (most likely it's not a server application)");
+            res += toString(uuid);
+            info.expanded_other = true;
+        }
         else if (info.shard && macro_name == "shard")
         {
             res += *info.shard;
@@ -125,7 +137,7 @@ String Macros::expand(const String & s,
             info.has_unknown = true;
         }
         else
-            throw Exception(ErrorCodes::SYNTAX_ERROR, "No macro '{}' in config while processing substitutions in "
+            throw Exception(ErrorCodes::NO_ELEMENTS_IN_CONFIG, "No macro '{}' in config while processing substitutions in "
                             "'{}' at '{}' or macro is not supported here", macro_name, s, toString(begin));
 
         pos = end + 1;
@@ -142,7 +154,7 @@ String Macros::getValue(const String & key) const
 {
     if (auto it = macros.find(key); it != macros.end())
         return it->second;
-    throw Exception(ErrorCodes::SYNTAX_ERROR, "No macro {} in config", key);
+    throw Exception(ErrorCodes::NO_ELEMENTS_IN_CONFIG, "No macro {} in config", key);
 }
 
 
diff --git a/src/Daemon/BaseDaemon.h b/src/Daemon/BaseDaemon.h
index d28f9403c16f..f90f403364b2 100644
--- a/src/Daemon/BaseDaemon.h
+++ b/src/Daemon/BaseDaemon.h
@@ -15,7 +15,6 @@
 #include <Poco/Util/Application.h>
 #include <Poco/Util/ServerApplication.h>
 #include <Poco/Net/SocketAddress.h>
-#include <Poco/Version.h>
 #include <base/types.h>
 #include <Common/logger_useful.h>
 #include <base/getThreadId.h>
diff --git a/src/Dictionaries/MongoDBDictionarySource.cpp b/src/Dictionaries/MongoDBDictionarySource.cpp
index a9555a94304f..922e1e71bbb7 100644
--- a/src/Dictionaries/MongoDBDictionarySource.cpp
+++ b/src/Dictionaries/MongoDBDictionarySource.cpp
@@ -67,7 +67,6 @@ void registerDictionarySourceMongoDB(DictionarySourceFactory & factory)
 #include <Poco/MongoDB/ObjectId.h>
 #include <Poco/URI.h>
 #include <Poco/Util/AbstractConfiguration.h>
-#include <Poco/Version.h>
 
 // only after poco
 // naming conflict:
diff --git a/src/Disks/ObjectStorages/S3/registerDiskS3.cpp b/src/Disks/ObjectStorages/S3/registerDiskS3.cpp
index 1c192a0d89cc..70f39d893f77 100644
--- a/src/Disks/ObjectStorages/S3/registerDiskS3.cpp
+++ b/src/Disks/ObjectStorages/S3/registerDiskS3.cpp
@@ -8,7 +8,6 @@
 
 #if USE_AWS_S3
 
-#include <aws/core/client/DefaultRetryStrategy.h>
 #include <base/getFQDNOrHostName.h>
 
 #include <Disks/DiskLocal.h>
@@ -19,9 +18,7 @@
 #include <Disks/ObjectStorages/S3/diskSettings.h>
 #include <Disks/ObjectStorages/MetadataStorageFromDisk.h>
 #include <Disks/ObjectStorages/MetadataStorageFromPlainObjectStorage.h>
-#include <IO/S3Common.h>
 
-#include <Storages/StorageS3Settings.h>
 #include <Core/ServerUUID.h>
 #include <Common/Macros.h>
 
@@ -87,10 +84,10 @@ class CheckAccess
 private:
     static String getServerUUID()
     {
-        DB::UUID server_uuid = DB::ServerUUID::get();
-        if (server_uuid == DB::UUIDHelpers::Nil)
+        UUID server_uuid = ServerUUID::get();
+        if (server_uuid == UUIDHelpers::Nil)
             throw Exception(ErrorCodes::LOGICAL_ERROR, "Server UUID is not initialized");
-        return DB::toString(server_uuid);
+        return toString(server_uuid);
     }
 };
 
diff --git a/src/IO/HTTPCommon.cpp b/src/IO/HTTPCommon.cpp
index 551ce7977579..9eabe3573f45 100644
--- a/src/IO/HTTPCommon.cpp
+++ b/src/IO/HTTPCommon.cpp
@@ -7,8 +7,6 @@
 #include <Common/ProfileEvents.h>
 #include <Common/SipHash.h>
 
-#include <Poco/Version.h>
-
 #include "config.h"
 
 #if USE_SSL
diff --git a/src/IO/ReadWriteBufferFromHTTP.h b/src/IO/ReadWriteBufferFromHTTP.h
index 784110f735ed..28f7a7f600bb 100644
--- a/src/IO/ReadWriteBufferFromHTTP.h
+++ b/src/IO/ReadWriteBufferFromHTTP.h
@@ -21,7 +21,6 @@
 #include <Poco/Net/HTTPResponse.h>
 #include <Poco/URI.h>
 #include <Poco/URIStreamFactory.h>
-#include <Poco/Version.h>
 #include <Common/DNSResolver.h>
 #include <Common/RemoteHostFilter.h>
 #include "config.h"
diff --git a/src/Processors/Sources/MongoDBSource.cpp b/src/Processors/Sources/MongoDBSource.cpp
index a8bfefdf8a65..9e50cdcf6ab0 100644
--- a/src/Processors/Sources/MongoDBSource.cpp
+++ b/src/Processors/Sources/MongoDBSource.cpp
@@ -15,7 +15,6 @@
 #include <Common/quoteString.h>
 #include <base/range.h>
 #include <Poco/URI.h>
-#include <Poco/Version.h>
 
 // only after poco
 // naming conflict:
diff --git a/src/Storages/StorageMongoDB.cpp b/src/Storages/StorageMongoDB.cpp
index 0bad4ab8bf0b..63b8c2d00a11 100644
--- a/src/Storages/StorageMongoDB.cpp
+++ b/src/Storages/StorageMongoDB.cpp
@@ -7,7 +7,6 @@
 #include <Poco/MongoDB/Connection.h>
 #include <Poco/MongoDB/Cursor.h>
 #include <Poco/MongoDB/Database.h>
-#include <Poco/Version.h>
 #include <Interpreters/evaluateConstantExpression.h>
 #include <Core/Settings.h>
 #include <Interpreters/Context.h>
