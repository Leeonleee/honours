{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 4280,
  "instance_id": "ClickHouse__ClickHouse-4280",
  "issue_numbers": [
    "4276"
  ],
  "base_commit": "22c3e373a9ef1a4035373c6e926eb8532bbf7539",
  "patch": "diff --git a/dbms/src/Storages/System/StorageSystemNumbers.cpp b/dbms/src/Storages/System/StorageSystemNumbers.cpp\nindex dbf5bb547836..f0bd4cfb0ff9 100644\n--- a/dbms/src/Storages/System/StorageSystemNumbers.cpp\n+++ b/dbms/src/Storages/System/StorageSystemNumbers.cpp\n@@ -43,7 +43,7 @@ class NumbersBlockInputStream : public IBlockInputStream\n };\n \n \n-StorageSystemNumbers::StorageSystemNumbers(const std::string & name_, bool multithreaded_, size_t limit_, size_t offset_)\n+StorageSystemNumbers::StorageSystemNumbers(const std::string & name_, bool multithreaded_, std::optional<size_t> limit_, size_t offset_)\n     : name(name_), multithreaded(multithreaded_), limit(limit_), offset(offset_)\n {\n     setColumns(ColumnsDescription({{\"number\", std::make_shared<DataTypeUInt64>()}}));\n@@ -60,9 +60,9 @@ BlockInputStreams StorageSystemNumbers::read(\n {\n     check(column_names);\n \n-    if (limit && limit < max_block_size)\n+    if (limit && *limit < max_block_size)\n     {\n-        max_block_size = std::min(max_block_size, limit);\n+        max_block_size = std::min(max_block_size, *limit);\n         multithreaded = false;\n     }\n \n@@ -75,7 +75,7 @@ BlockInputStreams StorageSystemNumbers::read(\n         res[i] = std::make_shared<NumbersBlockInputStream>(max_block_size, offset + i * max_block_size, num_streams * max_block_size);\n \n         if (limit)  /// This formula is how to split 'limit' elements to 'num_streams' chunks almost uniformly.\n-            res[i] = std::make_shared<LimitBlockInputStream>(res[i], limit * (i + 1) / num_streams - limit * i / num_streams, 0);\n+            res[i] = std::make_shared<LimitBlockInputStream>(res[i], *limit * (i + 1) / num_streams - *limit * i / num_streams, 0);\n     }\n \n     return res;\ndiff --git a/dbms/src/Storages/System/StorageSystemNumbers.h b/dbms/src/Storages/System/StorageSystemNumbers.h\nindex 926e336e1629..d8465343be61 100644\n--- a/dbms/src/Storages/System/StorageSystemNumbers.h\n+++ b/dbms/src/Storages/System/StorageSystemNumbers.h\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <ext/shared_ptr_helper.h>\n+#include <optional>\n #include <Storages/IStorage.h>\n \n \n@@ -36,12 +37,11 @@ class StorageSystemNumbers : public ext::shared_ptr_helper<StorageSystemNumbers>\n private:\n     const std::string name;\n     bool multithreaded;\n-    size_t limit;\n+    std::optional<size_t> limit;\n     size_t offset;\n \n protected:\n-    /// limit: 0 means unlimited.\n-    StorageSystemNumbers(const std::string & name_, bool multithreaded_, size_t limit_ = 0, size_t offset_ = 0);\n+    StorageSystemNumbers(const std::string & name_, bool multithreaded_, std::optional<size_t> limit_ = std::nullopt, size_t offset_ = 0);\n };\n \n }\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00836_numbers_table_function_zero.reference b/dbms/tests/queries/0_stateless/00836_numbers_table_function_zero.reference\nnew file mode 100644\nindex 000000000000..f86671f9eb9b\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00836_numbers_table_function_zero.reference\n@@ -0,0 +1,15 @@\n+0\n+1\n+10\n+100000\n+0\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\ndiff --git a/dbms/tests/queries/0_stateless/00836_numbers_table_function_zero.sql b/dbms/tests/queries/0_stateless/00836_numbers_table_function_zero.sql\nnew file mode 100644\nindex 000000000000..e70086e64de7\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00836_numbers_table_function_zero.sql\n@@ -0,0 +1,8 @@\n+SELECT count() FROM numbers(0);\n+SELECT count() FROM numbers(1);\n+SELECT count() FROM numbers(10);\n+SELECT count() FROM numbers(100000);\n+\n+SELECT * FROM numbers(0);\n+SELECT * FROM numbers(1);\n+SELECT * FROM numbers(10);\n",
  "problem_statement": "Infinite query when running `from numbers(0)`\nWhen running \r\n\r\n```sql\r\nselect * from numbers(0)\r\n```\r\nthe query seems to run infinitely. \r\n\r\nMight be related to https://github.com/yandex/ClickHouse/issues/1866\n",
  "hints_text": "",
  "created_at": "2019-02-05T17:06:46Z"
}