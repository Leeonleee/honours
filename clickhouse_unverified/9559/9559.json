{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9559,
  "instance_id": "ClickHouse__ClickHouse-9559",
  "issue_numbers": [
    "8951"
  ],
  "base_commit": "8806e79df69a76199314bf4532cfbda87641277e",
  "patch": "diff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex 288e1e398f14..aa05e5821507 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -689,19 +689,7 @@ void executeQuery(\n             if (set_result_details)\n                 set_result_details(context.getClientInfo().current_query_id, out->getContentType(), format_name, DateLUT::instance().getTimeZone());\n \n-            if (ast->as<ASTWatchQuery>())\n-            {\n-                /// For Watch query, flush data if block is empty (to send data to client).\n-                auto flush_callback = [&out](const Block & block)\n-                {\n-                    if (block.rows() == 0)\n-                        out->flush();\n-                };\n-\n-                copyData(*streams.in, *out, [](){ return false; }, std::move(flush_callback));\n-            }\n-            else\n-                copyData(*streams.in, *out);\n+            copyData(*streams.in, *out, [](){ return false; }, [&out](const Block &) { out->flush(); });\n         }\n \n         if (pipeline.initialized())\n@@ -733,6 +721,7 @@ void executeQuery(\n             });\n \n             auto out = context.getOutputFormatProcessor(format_name, *out_buf, pipeline.getHeader());\n+            out->setAutoFlush();\n \n             /// Save previous progress callback if any. TODO Do it more conveniently.\n             auto previous_progress_callback = context.getProgressCallback();\ndiff --git a/src/Processors/Formats/IOutputFormat.cpp b/src/Processors/Formats/IOutputFormat.cpp\nindex ff4ac393471c..543a854f75e8 100644\n--- a/src/Processors/Formats/IOutputFormat.cpp\n+++ b/src/Processors/Formats/IOutputFormat.cpp\n@@ -69,6 +69,9 @@ void IOutputFormat::work()\n             break;\n     }\n \n+    if (auto_flush)\n+        flush();\n+\n     has_input = false;\n }\n \ndiff --git a/src/Processors/Formats/IOutputFormat.h b/src/Processors/Formats/IOutputFormat.h\nindex 1137dd784465..71a0d2f00665 100644\n--- a/src/Processors/Formats/IOutputFormat.h\n+++ b/src/Processors/Formats/IOutputFormat.h\n@@ -34,6 +34,9 @@ class IOutputFormat : public IProcessor\n     bool finished = false;\n     bool finalized = false;\n \n+    /// Flush data on each consumed chunk. This is intented for interactive applications to output data as soon as it's ready.\n+    bool auto_flush = false;\n+\n     RowsBeforeLimitCounterPtr rows_before_limit_counter;\n \n     virtual void consume(Chunk) = 0;\n@@ -50,6 +53,8 @@ class IOutputFormat : public IProcessor\n     /// Flush output buffers if any.\n     virtual void flush();\n \n+    void setAutoFlush() { auto_flush = true; }\n+\n     /// Value for rows_before_limit_at_least field.\n     virtual void setRowsBeforeLimit(size_t /*rows_before_limit*/) {}\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference b/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference\nindex a2c79e669288..07c736f3bb09 100644\n--- a/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference\n+++ b/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference\n@@ -1,20 +1,9 @@\n < X-ClickHouse-Progress: {\"read_rows\":\"0\",\"read_bytes\":\"0\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n < X-ClickHouse-Progress: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n < X-ClickHouse-Progress: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n 9\n < X-ClickHouse-Progress: {\"read_rows\":\"0\",\"read_bytes\":\"0\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n < X-ClickHouse-Progress: {\"read_rows\":\"1\",\"read_bytes\":\"8\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"2\",\"read_bytes\":\"16\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"3\",\"read_bytes\":\"24\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"4\",\"read_bytes\":\"32\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"6\",\"read_bytes\":\"48\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"7\",\"read_bytes\":\"56\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"8\",\"read_bytes\":\"64\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"9\",\"read_bytes\":\"72\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\"}\r\n 0\n 1\n 2\ndiff --git a/tests/queries/0_stateless/00429_long_http_bufferization.sh b/tests/queries/0_stateless/00429_long_http_bufferization.sh\nindex bf50d79b4b33..37830d40a2d3 100755\n--- a/tests/queries/0_stateless/00429_long_http_bufferization.sh\n+++ b/tests/queries/0_stateless/00429_long_http_bufferization.sh\n@@ -5,16 +5,13 @@ set -e\n CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n . $CURDIR/../shell_config.sh\n \n-max_block_size=100\n-URL=\"${CLICKHOUSE_URL}\"\n-\n function query {\n     # bash isn't able to store \\0 bytes, so use [1; 255] random range\n     echo \"SELECT greatest(toUInt8(1), toUInt8(intHash64(number))) FROM system.numbers LIMIT $1 FORMAT RowBinary\"\n }\n \n function ch_url() {\n-    ${CLICKHOUSE_CURL_COMMAND} -sS \"$URL&max_block_size=$max_block_size&$1\" -d \"`query $2`\"\n+    ${CLICKHOUSE_CURL_COMMAND} -sS \"${CLICKHOUSE_URL}&max_block_size=$max_block_size&$1\" -d \"`query $2`\"\n }\n \n \ndiff --git a/tests/queries/0_stateless/01249_flush_interactive.reference b/tests/queries/0_stateless/01249_flush_interactive.reference\nnew file mode 100644\nindex 000000000000..6d6abb2d37f4\n--- /dev/null\n+++ b/tests/queries/0_stateless/01249_flush_interactive.reference\n@@ -0,0 +1,12 @@\n+0\n+1\n+2\n+3\n+4\n+---\n+0\n+1\n+2\n+3\n+4\n+---\ndiff --git a/tests/queries/0_stateless/01249_flush_interactive.sh b/tests/queries/0_stateless/01249_flush_interactive.sh\nnew file mode 100755\nindex 000000000000..a489806ceb9d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01249_flush_interactive.sh\n@@ -0,0 +1,16 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+# A question for curious reader:\n+# How to break shell pipeline as soon as 5 lines are found in the following command:\n+# ./my-program | head -n5\n+# When I tried to do it, pipeline was not actively terminated,\n+#  unless the my-program will try to output a thousand more lines overflowing pipe buffer and terminating with Broken Pipe.\n+# But if my program just output 5 (or slightly more) lines and hang up, the pipeline is not terminated.\n+\n+timeout 1 ${CLICKHOUSE_LOCAL} --max_execution_time 10 --query \"SELECT DISTINCT number % 5 FROM system.numbers\" ||:\n+echo '---'\n+timeout 1 ${CLICKHOUSE_CURL} -sS --no-buffer \"${CLICKHOUSE_URL}&max_execution_time=10\" --data-binary \"SELECT DISTINCT number % 5 FROM system.numbers\" ||:\n+echo '---'\n",
  "problem_statement": "DISTINCT with clickhouse-local can flush data more soon.\n**Describe the situation**\r\n\r\nThis query works fine because 10 rows is found quickly:\r\n```\r\n:~/example_datasets/gharchive$ time ~/ClickHouse/build_gcc9/dbms/programs/clickhouse local --query \"SELECT DISTINCT JSONExtractString(data, 'type') FROM file('*.json.gz', TSV, 'data String') LIMIT 10\"\r\nCreateEvent\r\nWatchEvent\r\nPushEvent\r\nForkEvent\r\n\r\nPullRequestEvent\r\nIssuesEvent\r\nMemberEvent\r\nGollumEvent\r\nDeleteEvent\r\n\r\nreal    0m0.576s\r\nuser    0m1.292s\r\nsys     0m0.712s\r\n```\r\n\r\nBut this query waits for all data to be processed instead of output data while processing:\r\n```\r\n~/example_datasets/gharchive$ time ~/ClickHouse/build_gcc9/dbms/programs/clickhouse local --query \"SELECT DISTINCT JSONExtractString(data, 'type') FROM file('*.json.gz', TSV, 'data String') LIMIT 100\"\r\n```\r\n\r\nPS. Dataset is from https://www.gharchive.org/\n",
  "hints_text": "Simple example.\r\n\r\n```\r\nmilovidov-Latitude-E7470 :) SELECT DISTINCT number % 5 FROM system.numbers\r\n\r\nSELECT DISTINCT number % 5\r\nFROM system.numbers\r\n\r\n\u250c\u2500modulo(number, 5)\u2500\u2510\r\n\u2502                 0 \u2502\r\n\u2502                 1 \u2502\r\n\u2502                 2 \u2502\r\n\u2502                 3 \u2502\r\n\u2502                 4 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u2198 Progress: 23.27 million rows, 186.12 MB (12.11 million rows/s., 96.87 MB/s.) Cancelling query.\r\nQuery was cancelled.\r\n\r\n5 rows in set. Elapsed: 2.027 sec. Processed 23.27 million rows, 186.12 MB (11.48 million rows/s., 91.81 MB/s.) \r\n\r\nmilovidov-Latitude-E7470 :) Bye.\r\nmilovidov@milovidov-Latitude-E7470:~/work/ClickHouse/docs$ clickhouse-local --query \"SELECT DISTINCT number % 5 FROM system.numbers\"\r\n```\r\n\r\n`clickhouse-client` is Ok while `clickhouse-local` is not.\nAlso doesn't work as expected for HTTP interface:\r\n\r\n```\r\n$ curl http://localhost:8123/ -d 'SELECT DISTINCT number % 5 FROM system.numbers'\r\n^C\r\n```",
  "created_at": "2020-03-07T23:08:16Z"
}