diff --git a/src/Functions/FunctionHashID.h b/src/Functions/FunctionHashID.h
index 30f08c96eca1..e469381a7849 100644
--- a/src/Functions/FunctionHashID.h
+++ b/src/Functions/FunctionHashID.h
@@ -52,6 +52,7 @@ class FunctionHashID : public IFunction
     bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }
 
     bool useDefaultImplementationForConstants() const override { return true; }
+    ColumnNumbers getArgumentsThatAreAlwaysConstant() const override { return {1, 2, 3}; }
 
     DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override
     {
@@ -69,7 +70,7 @@ class FunctionHashID : public IFunction
         if (arguments.size() > 1)
         {
             const auto & hash_col = arguments[1];
-            if (!isString(hash_col.type) || !isColumnConst(*hash_col.column.get()))
+            if (!isString(hash_col.type))
                 throw Exception(
                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
                     "Second argument of function {} must be String, got {}",
@@ -80,7 +81,7 @@ class FunctionHashID : public IFunction
         if (arguments.size() > 2)
         {
             const auto & min_length_col = arguments[2];
-            if (!isUInt8(min_length_col.type) || !isColumnConst(*min_length_col.column.get()))
+            if (!isUInt8(min_length_col.type))
                 throw Exception(
                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
                     "Third argument of function {} must be UInt8, got {}",
@@ -91,7 +92,7 @@ class FunctionHashID : public IFunction
         if (arguments.size() > 3)
         {
             const auto & alphabet_col = arguments[3];
-            if (!isString(alphabet_col.type) || !isColumnConst(*alphabet_col.column.get()))
+            if (!isString(alphabet_col.type))
                 throw Exception(
                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
                     "Fourth argument of function {} must be String, got {}",
