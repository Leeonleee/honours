{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40002,
  "instance_id": "ClickHouse__ClickHouse-40002",
  "issue_numbers": [
    "39672"
  ],
  "base_commit": "a120452c3d41e17822d3bf198f107077602618f2",
  "patch": "diff --git a/src/Functions/FunctionHashID.h b/src/Functions/FunctionHashID.h\nindex 30f08c96eca1..e469381a7849 100644\n--- a/src/Functions/FunctionHashID.h\n+++ b/src/Functions/FunctionHashID.h\n@@ -52,6 +52,7 @@ class FunctionHashID : public IFunction\n     bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n \n     bool useDefaultImplementationForConstants() const override { return true; }\n+    ColumnNumbers getArgumentsThatAreAlwaysConstant() const override { return {1, 2, 3}; }\n \n     DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n     {\n@@ -69,7 +70,7 @@ class FunctionHashID : public IFunction\n         if (arguments.size() > 1)\n         {\n             const auto & hash_col = arguments[1];\n-            if (!isString(hash_col.type) || !isColumnConst(*hash_col.column.get()))\n+            if (!isString(hash_col.type))\n                 throw Exception(\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n                     \"Second argument of function {} must be String, got {}\",\n@@ -80,7 +81,7 @@ class FunctionHashID : public IFunction\n         if (arguments.size() > 2)\n         {\n             const auto & min_length_col = arguments[2];\n-            if (!isUInt8(min_length_col.type) || !isColumnConst(*min_length_col.column.get()))\n+            if (!isUInt8(min_length_col.type))\n                 throw Exception(\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n                     \"Third argument of function {} must be UInt8, got {}\",\n@@ -91,7 +92,7 @@ class FunctionHashID : public IFunction\n         if (arguments.size() > 3)\n         {\n             const auto & alphabet_col = arguments[3];\n-            if (!isString(alphabet_col.type) || !isColumnConst(*alphabet_col.column.get()))\n+            if (!isString(alphabet_col.type))\n                 throw Exception(\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n                     \"Fourth argument of function {} must be String, got {}\",\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02293_hashid.reference b/tests/queries/0_stateless/02293_hashid.reference\nindex f36b15002880..dfc78349c05f 100644\n--- a/tests/queries/0_stateless/02293_hashid.reference\n+++ b/tests/queries/0_stateless/02293_hashid.reference\n@@ -8,5 +8,8 @@\n 2\tobmgndljgajpkeao\n 3\tdldokmpjpgjgeanb\n 4\tnkdlpgajngjnobme\n-xkOpDGxQpVB\n-jR\n+YQrvD5XGvbx\n+Bm3zaOq7zbp\n+oV\n+oV\n+6b\ndiff --git a/tests/queries/0_stateless/02293_hashid.sql b/tests/queries/0_stateless/02293_hashid.sql\nindex 45aaefe7356b..9938154f169e 100644\n--- a/tests/queries/0_stateless/02293_hashid.sql\n+++ b/tests/queries/0_stateless/02293_hashid.sql\n@@ -1,7 +1,16 @@\n+-- Tags: no-backward-compatibility-check\n SET allow_experimental_hash_functions = 1;\n \n select number, hashid(number) from system.numbers limit 5;\n select number, hashid(number, 's3cr3t', 16, 'abcdefghijklmnop') from system.numbers limit 5;\n select hashid(1234567890123456, 's3cr3t');\n+select hashid(1234567890123456, 's3cr3t2');\n \n SELECT  hashid(1, hashid(2));\n+SELECT  hashid(1, 'k5');\n+SELECT  hashid(1, 'k5_othersalt');\n+\n+-- https://github.com/ClickHouse/ClickHouse/issues/39672\n+SELECT\n+    JSONExtractRaw(257, NULL),\n+    hashid(1024, if(rand() % 10, 'truetruetruetrue', NULL), 's3\\0r3t'); -- {serverError 43}\n",
  "problem_statement": "[Experimental] Crash on hashid: NULL pointer dereference\nFound in https://s3.amazonaws.com/clickhouse-test-reports/38900/e3ef3a2b41214093f6f2ab645abc7fe42b5fd60d/fuzzer_astfuzzerubsan//report.html\r\n\r\n```\r\n../src/Functions/FunctionHashID.h:72:60: runtime error: reference binding to null pointer of type 'const DB::IColumn' Received signal -3 Received signal Unknown signal (-3)\r\n```\r\n\r\nQuery:\r\n```\r\nSET allow_experimental_hash_functions = 1\r\n\r\nSELECT\r\n    JSONExtractRaw(257, NULL),\r\n    hashid(1024, if(rand() % 10, 'truetruetruetrue', NULL), 's3\\0r3t')\r\n```\r\n\r\nReproduces in official releases (without ubsan too):\r\n```\r\n$ ./clickhouse-common-static-22.7.1.2484/usr/bin/clickhouse local\r\nClickHouse local version 22.7.1.2484 (official build).\r\n\r\nMordor :) SELECT JSONExtractRaw(257, NULL), hashid(1024, if(rand() % 10, 'truetruetruetrue', NULL), 's3\\0r3t') SETTINGS allow_experimental_hash_functions = 1;\r\n\r\nSELECT\r\n    JSONExtractRaw(257, NULL),\r\n    hashid(1024, if(rand() % 10, 'truetruetruetrue', NULL), 's3\\0r3t')\r\nSETTINGS allow_experimental_hash_functions = 1\r\n\r\nQuery id: c9692a34-e667-4bde-b95a-30d93dbdc3d6\r\n\r\nAborted (core dumped)\r\n```\r\n\r\nCoredump from 22.7:\r\n```\r\n(gdb) bt\r\n#0  0x00007f29b3a8e36c in ?? () from /usr/lib/libc.so.6\r\n#1  0x00007f29b3a3e838 in raise () from /usr/lib/libc.so.6\r\n#2  0x00007f29b3a28535 in abort () from /usr/lib/libc.so.6\r\n#3  0x000000001ab3b04c in Poco::SignalHandler::handleSignal(int) ()\r\n#4  <signal handler called>\r\n#5  0x000000000f3e43b4 in DB::FunctionHashID::getReturnTypeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const ()\r\n#6  0x0000000015c01c32 in DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const ()\r\n#7  0x0000000015c011be in DB::IFunctionOverloadResolver::getReturnType(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const ()\r\n#8  0x0000000015c02096 in DB::IFunctionOverloadResolver::build(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const ()\r\n#9  0x000000001638ad35 in DB::ActionsDAG::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<DB::ActionsDAG::Node const*, std::__1::allocator<DB::ActionsDAG::Node const*> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) ()\r\n#10 0x00000000166f9099 in DB::ScopeStack::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) ()\r\n#11 0x00000000167028af in DB::ActionsMatcher::Data::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) ()\r\n#12 0x00000000166fddda in DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) ()\r\n#13 0x0000000016700678 in DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) ()\r\n#14 0x00000000166c1877 in DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) ()\r\n#15 0x00000000166c1674 in DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ActionsDAG>&, bool) ()\r\n#16 0x00000000166cfd65 in DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) ()\r\n#17 0x00000000166d4e1a in DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::__1::shared_ptr<DB::FilterDAGInfo> const&, std::__1::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&)\r\n    ()\r\n#18 0x0000000016ba570d in DB::InterpreterSelectQuery::getSampleBlockImpl() ()\r\n#19 0x0000000016b9d15b in ?? ()\r\n#20 0x0000000016b97880 in DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::SubqueryForSet, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, DB::SubqueryForSet> > >, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >) ()\r\n#21 0x0000000016b94d17 in DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) ()\r\n#22 0x0000000016be5726 in DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) ()\r\n#23 0x0000000016be33f4 in DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) ()\r\n#24 0x0000000016b49863 in DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) ()\r\n#25 0x0000000016ecd560 in ?? ()\r\n#26 0x0000000016ecb015 in DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum)\r\n    ()\r\n#27 0x000000001788abc1 in DB::LocalConnection::sendQuery(DB::ConnectionTimeouts const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, DB::Settings const*, DB::ClientInfo const*, bool, std::__1::function<void (DB::Progress const&)>) ()\r\n#28 0x000000001783074a in DB::ClientBase::processOrdinaryQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST>) ()\r\n#29 0x000000001782f57b in DB::ClientBase::processParsedSingleQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST>, std::__1::optional<bool>, bool) ()\r\n#30 0x000000001782ec96 in DB::ClientBase::processTextAsSingleQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) ()\r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n#31 0x000000001784029d in DB::ClientBase::processQueryText(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) ()\r\n#32 0x0000000017841bdb in DB::ClientBase::runInteractive() ()\r\n#33 0x000000000bb807e5 in DB::LocalServer::main(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) ()\r\n#34 0x000000001a9a3506 in Poco::Util::Application::run() ()\r\n#35 0x000000000bb88720 in mainEntryClickHouseLocal(int, char**) ()\r\n#36 0x000000000ba31279 in main ()\r\n```\n",
  "hints_text": "The function `hashid` will be removed if this issue will not be fixed in a month.",
  "created_at": "2022-08-08T16:28:26Z",
  "modified_files": [
    "src/Functions/FunctionHashID.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02293_hashid.reference",
    "tests/queries/0_stateless/02293_hashid.sql"
  ]
}