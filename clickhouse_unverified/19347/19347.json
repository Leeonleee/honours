{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19347,
  "instance_id": "ClickHouse__ClickHouse-19347",
  "issue_numbers": [
    "19305",
    "19336",
    "19287"
  ],
  "base_commit": "fe6b964b32c94b85b001cb40372d8cdc780367f5",
  "patch": "diff --git a/base/common/DateLUTImpl.h b/base/common/DateLUTImpl.h\nindex 3698276d0e15..ef74182b3339 100644\n--- a/base/common/DateLUTImpl.h\n+++ b/base/common/DateLUTImpl.h\n@@ -780,7 +780,7 @@ class DateLUTImpl\n         return lut[index].date + time_offset;\n     }\n \n-    inline time_t addWeeks(time_t t, Int64 delta) const\n+    inline NO_SANITIZE_UNDEFINED time_t addWeeks(time_t t, Int64 delta) const\n     {\n         return addDays(t, delta * 7);\n     }\n@@ -812,7 +812,7 @@ class DateLUTImpl\n         return lut[result_day].date + time_offset;\n     }\n \n-    inline DayNum addMonths(DayNum d, Int64 delta) const\n+    inline NO_SANITIZE_UNDEFINED DayNum addMonths(DayNum d, Int64 delta) const\n     {\n         const Values & values = lut[d];\n \n@@ -836,12 +836,12 @@ class DateLUTImpl\n         }\n     }\n \n-    inline time_t addQuarters(time_t t, Int64 delta) const\n+    inline NO_SANITIZE_UNDEFINED time_t addQuarters(time_t t, Int64 delta) const\n     {\n         return addMonths(t, delta * 3);\n     }\n \n-    inline DayNum addQuarters(DayNum d, Int64 delta) const\n+    inline NO_SANITIZE_UNDEFINED DayNum addQuarters(DayNum d, Int64 delta) const\n     {\n         return addMonths(d, delta * 3);\n     }\ndiff --git a/src/Functions/FunctionDateOrDateTimeAddInterval.h b/src/Functions/FunctionDateOrDateTimeAddInterval.h\nindex 70e2616eeaca..aa7539169871 100644\n--- a/src/Functions/FunctionDateOrDateTimeAddInterval.h\n+++ b/src/Functions/FunctionDateOrDateTimeAddInterval.h\n@@ -224,8 +224,9 @@ struct SubtractIntervalImpl : public Transform\n     using Transform::Transform;\n \n     template <typename T>\n-    inline auto execute(T t, Int64 delta, const DateLUTImpl & time_zone) const\n+    inline NO_SANITIZE_UNDEFINED auto execute(T t, Int64 delta, const DateLUTImpl & time_zone) const\n     {\n+        /// Signed integer overflow is Ok.\n         return Transform::execute(t, -delta, time_zone);\n     }\n };\ndiff --git a/src/Functions/GatherUtils/Algorithms.h b/src/Functions/GatherUtils/Algorithms.h\nindex 620d6439af2a..101e1354bc68 100644\n--- a/src/Functions/GatherUtils/Algorithms.h\n+++ b/src/Functions/GatherUtils/Algorithms.h\n@@ -342,7 +342,7 @@ void NO_INLINE sliceDynamicOffsetUnbounded(Source && src, Sink && sink, const IC\n             if (offset > 0)\n                 slice = src.getSliceFromLeft(offset - 1);\n             else\n-                slice = src.getSliceFromRight(-offset);\n+                slice = src.getSliceFromRight(-UInt64(offset));\n \n             writeSlice(slice, sink);\n         }\n@@ -374,7 +374,7 @@ void NO_INLINE sliceDynamicOffsetBounded(Source && src, Sink && sink, const ICol\n         Int64 size = has_length ? length_nested_column->getInt(row_num) : static_cast<Int64>(src.getElementSize());\n \n         if (size < 0)\n-            size += offset > 0 ? static_cast<Int64>(src.getElementSize()) - (offset - 1) : -offset;\n+            size += offset > 0 ? static_cast<Int64>(src.getElementSize()) - (offset - 1) : -UInt64(offset);\n \n         if (offset != 0 && size > 0)\n         {\n@@ -383,7 +383,7 @@ void NO_INLINE sliceDynamicOffsetBounded(Source && src, Sink && sink, const ICol\n             if (offset > 0)\n                 slice = src.getSliceFromLeft(offset - 1, size);\n             else\n-                slice = src.getSliceFromRight(-offset, size);\n+                slice = src.getSliceFromRight(-UInt64(offset), size);\n \n             writeSlice(slice, sink);\n         }\ndiff --git a/src/Functions/array/arrayAggregation.cpp b/src/Functions/array/arrayAggregation.cpp\nindex 992a331d05b5..40afd657abbd 100644\n--- a/src/Functions/array/arrayAggregation.cpp\n+++ b/src/Functions/array/arrayAggregation.cpp\n@@ -5,6 +5,7 @@\n #include <Columns/ColumnDecimal.h>\n #include \"FunctionArrayMapped.h\"\n #include <Functions/FunctionFactory.h>\n+#include <common/defines.h>\n \n \n namespace DB\n@@ -121,7 +122,7 @@ struct ArrayAggregateImpl\n     }\n \n     template <typename Element>\n-    static bool executeType(const ColumnPtr & mapped, const ColumnArray::Offsets & offsets, ColumnPtr & res_ptr)\n+    static NO_SANITIZE_UNDEFINED bool executeType(const ColumnPtr & mapped, const ColumnArray::Offsets & offsets, ColumnPtr & res_ptr)\n     {\n         using Result = ArrayAggregateResult<Element, aggregate_operation>;\n         using ColVecType = std::conditional_t<IsDecimalNumber<Element>, ColumnDecimal<Element>, ColumnVector<Element>>;\ndiff --git a/src/Functions/array/arrayElement.cpp b/src/Functions/array/arrayElement.cpp\nindex 88166f04e0eb..7d053988cae5 100644\n--- a/src/Functions/array/arrayElement.cpp\n+++ b/src/Functions/array/arrayElement.cpp\n@@ -231,7 +231,7 @@ struct ArrayElementNumImpl\n                 if (builder)\n                     builder.update(j);\n             }\n-            else if (index < 0 && static_cast<size_t>(-index) <= array_size)\n+            else if (index < 0 && -static_cast<size_t>(index) <= array_size)\n             {\n                 size_t j = offsets[i] + index;\n                 result[i] = data[j];\n@@ -329,7 +329,7 @@ struct ArrayElementStringImpl\n             TIndex index = indices[i];\n             if (index > 0 && static_cast<size_t>(index) <= array_size)\n                 adjusted_index = index - 1;\n-            else if (index < 0 && static_cast<size_t>(-index) <= array_size)\n+            else if (index < 0 && -static_cast<size_t>(index) <= array_size)\n                 adjusted_index = array_size + index;\n             else\n                 adjusted_index = array_size;    /// means no element should be taken\n@@ -427,7 +427,7 @@ struct ArrayElementGenericImpl\n                 if (builder)\n                     builder.update(j);\n             }\n-            else if (index < 0 && static_cast<size_t>(-index) <= array_size)\n+            else if (index < 0 && -static_cast<size_t>(index) <= array_size)\n             {\n                 size_t j = offsets[i] + index;\n                 result.insertFrom(data, j);\n@@ -472,11 +472,24 @@ ColumnPtr FunctionArrayElement::executeNumberConst(\n     auto col_res = ColumnVector<DataType>::create();\n \n     if (index.getType() == Field::Types::UInt64)\n+    {\n         ArrayElementNumImpl<DataType>::template vectorConst<false>(\n             col_nested->getData(), col_array->getOffsets(), safeGet<UInt64>(index) - 1, col_res->getData(), builder);\n+    }\n     else if (index.getType() == Field::Types::Int64)\n+    {\n+        /// Cast to UInt64 before negation allows to avoid undefined behaviour for negation of the most negative number.\n+        /// NOTE: this would be undefined behaviour in C++ sense, but nevertheless, compiler cannot see it on user provided data,\n+        /// and generates the code that we want on supported CPU architectures (overflow in sense of two's complement arithmetic).\n+        /// This is only needed to avoid UBSan report.\n+\n+        /// Negative array indices work this way:\n+        /// arr[-1] is the element at offset 0 from the last\n+        /// arr[-2] is the element at offset 1 from the last and so on.\n+\n         ArrayElementNumImpl<DataType>::template vectorConst<true>(\n-            col_nested->getData(), col_array->getOffsets(), -safeGet<Int64>(index) - 1, col_res->getData(), builder);\n+            col_nested->getData(), col_array->getOffsets(), -(UInt64(safeGet<Int64>(index)) + 1), col_res->getData(), builder);\n+    }\n     else\n         throw Exception(\"Illegal type of array index\", ErrorCodes::LOGICAL_ERROR);\n \n@@ -534,7 +547,7 @@ FunctionArrayElement::executeStringConst(const ColumnsWithTypeAndName & argument\n             col_nested->getChars(),\n             col_array->getOffsets(),\n             col_nested->getOffsets(),\n-            -safeGet<Int64>(index) - 1,\n+            -(UInt64(safeGet<Int64>(index)) + 1),\n             col_res->getChars(),\n             col_res->getOffsets(),\n             builder);\n@@ -588,7 +601,7 @@ ColumnPtr FunctionArrayElement::executeGenericConst(\n             col_nested, col_array->getOffsets(), safeGet<UInt64>(index) - 1, *col_res, builder);\n     else if (index.getType() == Field::Types::Int64)\n         ArrayElementGenericImpl::vectorConst<true>(\n-            col_nested, col_array->getOffsets(), -safeGet<Int64>(index) - 1, *col_res, builder);\n+            col_nested, col_array->getOffsets(), -(UInt64(safeGet<Int64>(index) + 1)), *col_res, builder);\n     else\n         throw Exception(\"Illegal type of array index\", ErrorCodes::LOGICAL_ERROR);\n \n@@ -639,7 +652,7 @@ ColumnPtr FunctionArrayElement::executeConst(const ColumnsWithTypeAndName & argu\n             if (builder)\n                 builder.update(j);\n         }\n-        else if (index < 0 && static_cast<size_t>(-index) <= array_size)\n+        else if (index < 0 && -static_cast<size_t>(index) <= array_size)\n         {\n             size_t j = array_size + index;\n             res->insertFrom(array_elements, j);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01657_array_element_ubsan.reference b/tests/queries/0_stateless/01657_array_element_ubsan.reference\nnew file mode 100644\nindex 000000000000..14e3161f529a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01657_array_element_ubsan.reference\n@@ -0,0 +1,26 @@\n+0\n+0\n+0\n+0\n+---\n+0\n+0\n+0\n+---\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+1\n+---\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+1\ndiff --git a/tests/queries/0_stateless/01657_array_element_ubsan.sql b/tests/queries/0_stateless/01657_array_element_ubsan.sql\nnew file mode 100644\nindex 000000000000..82ddf643389a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01657_array_element_ubsan.sql\n@@ -0,0 +1,19 @@\n+SELECT [number][10000000000] FROM numbers(1);\n+SELECT [number][-10000000000] FROM numbers(1);\n+\n+SELECT [number][-0x8000000000000000] FROM numbers(1);\n+SELECT [number][0xFFFFFFFFFFFFFFFF] FROM numbers(1);\n+\n+SELECT '---';\n+\n+SELECT [materialize(1)][0xFFFFFFFFFFFFFFFF];\n+SELECT [materialize(1)][materialize(18446744073709551615)];\n+SELECT [materialize(1)][-0x8000000000000000];\n+\n+SELECT '---';\n+\n+SELECT [number][arrayJoin([-0x8000000000000000, -10000000000, 0, -1])] FROM numbers(2);\n+\n+SELECT '---';\n+\n+SELECT [number][arrayJoin([0xFFFFFFFFFFFFFFFF, 10000000000, 0, 1])] FROM numbers(2);\ndiff --git a/tests/queries/0_stateless/01658_substring_ubsan.reference b/tests/queries/0_stateless/01658_substring_ubsan.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01658_substring_ubsan.sql b/tests/queries/0_stateless/01658_substring_ubsan.sql\nnew file mode 100644\nindex 000000000000..3d7968b8d6b0\n--- /dev/null\n+++ b/tests/queries/0_stateless/01658_substring_ubsan.sql\n@@ -0,0 +1,10 @@\n+/** NOTE: The behaviour of substring and substringUTF8 is inconsistent when negative offset is greater than string size:\n+  * substring:\n+  *      hello\n+  * ^-----^ - offset -10, length 7, result: \"he\"\n+  * substringUTF8:\n+  *      hello\n+  *      ^-----^ - offset -10, length 7, result: \"hello\"\n+  * This may be subject for change.\n+  */\n+SELECT substringUTF8('hello, \u00d0\u00bf\u00d1\ufffd\u00d0\u00b8\u00d0\u00b2\u00d0\u00b5\u00d1\ufffd', -9223372036854775808, number) FROM numbers(16) FORMAT Null;\ndiff --git a/tests/queries/0_stateless/01659_array_aggregation_ubsan.reference b/tests/queries/0_stateless/01659_array_aggregation_ubsan.reference\nnew file mode 100644\nindex 000000000000..62c80bed2516\n--- /dev/null\n+++ b/tests/queries/0_stateless/01659_array_aggregation_ubsan.reference\n@@ -0,0 +1,1 @@\n+446744073709551616\ndiff --git a/tests/queries/0_stateless/01659_array_aggregation_ubsan.sql b/tests/queries/0_stateless/01659_array_aggregation_ubsan.sql\nnew file mode 100644\nindex 000000000000..1b8b506b26e3\n--- /dev/null\n+++ b/tests/queries/0_stateless/01659_array_aggregation_ubsan.sql\n@@ -0,0 +1,1 @@\n+SELECT arraySum([-9000000000000000000, -9000000000000000000]);\n",
  "problem_statement": "ArrayElement + ubsan\n```sql\r\nselect [0][-9223372036854775808]\r\n```\r\n```\r\n../src/Functions/array/arrayElement.cpp:234:55: runtime error: negation of -9223372036854775808 cannot be represented in type 'long'; cast to an unsigned type to negate this value to itself\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior ../src/Functions/array/arrayElement.cpp:234:55 in \r\n```\nFix UB in FunctionArrayElement::executeGenericConst(...)\nI hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en\r\n\r\nChangelog category (leave one):\r\n- Not for changelog (changelog entry is not required)\r\n\r\n\r\nDetailed description / Documentation draft:\r\nhttps://clickhouse-test-reports.s3.yandex.net/19091/0507a38ec639e5eeba78f020ff2fc2d3d3447a0d/fuzzer_ubsan/report.html#fail1\r\nFixes #19305\r\n\nUBSan: substringUTF8: negation of -9223372036854775808 cannot be represented in type 'DB::Int64'\n```\r\nSELECT substringUTF8('hello, \u00d0\u00bf\u00d1\u0080\u00d0\u00b8\u00d0\u00b2\u00d0\u00b5\u00d1\u0082', -9223372036854775808, number) FROM numbers(16)\r\n\r\n../src/Functions/GatherUtils/Algorithms.h:386:47: runtime error: negation of -9223372036854775808 cannot be represented in type 'DB::Int64' (aka 'long'); cast to an unsigned type to negate this value to itself\r\n    #0 0x1602f0ab in void DB::GatherUtils::sliceDynamicOffsetBounded<DB::GatherUtils::ConstSource<DB::GatherUtils::UTF8StringSource>&, DB::GatherUtils::StringSink>(DB::GatherUtils::ConstSource<DB::GatherUtils::UTF8StringSource>&, DB::GatherUtils::StringSink&&, DB::IColumn const&, DB::IColumn const&) (/workspace/clickhouse+0x1602f0ab)\r\n    #1 0x16022971 in DB::(anonymous namespace)::FunctionSubstring<true>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/workspace/clickhouse+0x16022971)\r\n    #2 0x117d2796 in DB::DefaultExecutable::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/workspace/clickhouse+0x117d2796)\r\n    #3 0x121a99cb in DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x121a99cb)\r\n    #4 0x121aa8ed in DB::ExecutableFunctionAdaptor::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x121aa8ed)\r\n    #5 0x1987b6d3 in DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool) obj-x86_64-linux-gnu/../src/Interpreters/ExpressionActions.cpp:333:56\r\n    #6 0x1987acbf in DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const obj-x86_64-linux-gnu/../src/Interpreters/ExpressionActions.cpp:449:13\r\n    #7 0x1ae1782d in DB::ExpressionTransform::transform(DB::Chunk&) obj-x86_64-linux-gnu/../src/Processors/Transforms/ExpressionTransform.cpp:25:17\r\n    #8 0x1a4d01d1 in DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) obj-x86_64-linux-gnu/../src/Processors/ISimpleTransform.h:42:9\r\n    #9 0x1ac0095f in DB::ISimpleTransform::work() obj-x86_64-linux-gnu/../src/Processors/ISimpleTransform.cpp:89:9\r\n    #10 0x1ac50298 in DB::executeJob(DB::IProcessor*) obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:79:20\r\n    #11 0x1ac50186 in DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0::operator()() const obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:96:13\r\n    #12 0x1ac50186 in decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3676:1\r\n    #13 0x1ac4eb93 in std::__1::__function::__policy_func<void ()>::operator()() const obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2221:16\r\n    #14 0x1ac4eb93 in std::__1::function<void ()>::operator()() const obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2560:12\r\n    #15 0x1ac4eb93 in DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:580:17\r\n    #16 0x1ac4d469 in DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:473:5\r\n    #17 0x1ac4d469 in DB::PipelineExecutor::executeImpl(unsigned long) obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:807:9\r\n    #18 0x1ac4cf2a in DB::PipelineExecutor::execute(unsigned long) obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:395:9\r\n    #19 0x1ac5f91b in DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) obj-x86_64-linux-gnu/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:79:24\r\n    #20 0x1ac5f876 in DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const obj-x86_64-linux-gnu/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:101:13\r\n    #21 0x1ac5f876 in decltype(std::__1::forward<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3682:1\r\n    #22 0x1ac5f731 in decltype(auto) std::__1::__apply_tuple_impl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) obj-x86_64-linux-gnu/../contrib/libcxx/include/tuple:1415:1\r\n    #23 0x1ac5f731 in decltype(auto) std::__1::apply<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&) obj-x86_64-linux-gnu/../contrib/libcxx/include/tuple:1424:1\r\n    #24 0x1ac5f731 in ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()::operator()() obj-x86_64-linux-gnu/../src/Common/ThreadPool.h:178:13\r\n    #25 0x1ac5f731 in decltype(std::__1::forward<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3676:1\r\n    #26 0xe01223e in std::__1::function<void ()>::operator()() const obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2560:12\r\n    #27 0xe01223e in ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:247:17\r\n    #28 0xe015f05 in void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()::operator()() const obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:124:73\r\n    #29 0xe015f05 in decltype(std::__1::forward<void>(fp)(std::__1::forward<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(fp0)...)) std::__1::__invoke<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...) obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3676:1\r\n    #30 0xe015f05 in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>&, std::__1::__tuple_indices<>) obj-x86_64-linux-gnu/../contrib/libcxx/include/thread:280:5\r\n    #31 0xe015f05 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()> >(void*) obj-x86_64-linux-gnu/../contrib/libcxx/include/thread:291:5\r\n    #32 0x7f115b667608 in start_thread /build/glibc-ZN95T4/glibc-2.31/nptl/pthread_create.c:477:8\r\n    #33 0x7f115b58e292 in clone /build/glibc-ZN95T4/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior ../src/Functions/GatherUtils/Algorithms.h:386:47 in \r\n2021.01.19 01:40:05.367140 [ 62 ] {} <Trace> BaseDaemon: Received signal -3\r\n2021.01.19 01:40:05.367495 [ 180 ] {} <Fatal> BaseDaemon: ########################################\r\n2021.01.19 01:40:05.367615 [ 180 ] {} <Fatal> BaseDaemon: (version 21.1.1.5720, build id: D54409F4BB1DB2D93AA57EB485B96BDD416700B4) (from thread 167) (query_id: 1dd2de98-f1b6-43bd-be29-374c9bf3f354) Received signal Unknown signal (-3)\r\n2021.01.19 01:40:05.367658 [ 180 ] {} <Fatal> BaseDaemon: Sanitizer trap.\r\n2021.01.19 01:40:05.367738 [ 180 ] {} <Fatal> BaseDaemon: Stack trace: 0xdfe6135 0xe20fc96 0xdfaa156 0xdfb67ff 0x1602f0ac 0x16022972 0x117d2797 0x121a99cc 0x121aa8ee 0x1987b6d4 0x1987acc0 0x1ae1782e 0x1a4d01d2 0x1ac00960 0x1ac50299 0x1ac50187 0x1ac4eb94 0x1ac4d46a 0x1ac4cf2b 0x1ac5f91c 0x1ac5f877 0x1ac5f732 0xe01223f 0xe015f06 0x7f115b667609 0x7f115b58e293\r\n2021.01.19 01:40:05.367901 [ 180 ] {} <Fatal> BaseDaemon: 0. ./obj-x86_64-linux-gnu/../src/Common/StackTrace.cpp:293: StackTrace::StackTrace() @ 0xdfe6135 in /workspace/clickhouse\r\n2021.01.19 01:40:05.368248 [ 180 ] {} <Fatal> BaseDaemon: 1. ./obj-x86_64-linux-gnu/../base/daemon/BaseDaemon.cpp:380: sanitizerDeathCallback() @ 0xe20fc96 in /workspace/clickhouse\r\n2021.01.19 01:40:05.372940 [ 180 ] {} <Fatal> BaseDaemon: 2. __sanitizer::Die() @ 0xdfaa156 in /workspace/clickhouse\r\n2021.01.19 01:40:05.377341 [ 180 ] {} <Fatal> BaseDaemon: 3. ? @ 0xdfb67ff in /workspace/clickhouse\r\n2021.01.19 01:40:05.381653 [ 180 ] {} <Fatal> BaseDaemon: 4. void DB::GatherUtils::sliceDynamicOffsetBounded<DB::GatherUtils::ConstSource<DB::GatherUtils::UTF8StringSource>&, DB::GatherUtils::StringSink>(DB::GatherUtils::ConstSource<DB::GatherUtils::UTF8StringSource>&, DB::GatherUtils::StringSink&&, DB::IColumn const&, DB::IColumn const&) @ 0x1602f0ac in /workspace/clickhouse\r\n2021.01.19 01:40:05.385990 [ 180 ] {} <Fatal> BaseDaemon: 5. DB::(anonymous namespace)::FunctionSubstring<true>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x16022972 in /workspace/clickhouse\r\n2021.01.19 01:40:05.390392 [ 180 ] {} <Fatal> BaseDaemon: 6. DB::DefaultExecutable::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x117d2797 in /workspace/clickhouse\r\n2021.01.19 01:40:05.394730 [ 180 ] {} <Fatal> BaseDaemon: 7. DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x121a99cc in /workspace/clickhouse\r\n2021.01.19 01:40:05.399093 [ 180 ] {} <Fatal> BaseDaemon: 8. DB::ExecutableFunctionAdaptor::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x121aa8ee in /workspace/clickhouse\r\n2021.01.19 01:40:05.401223 [ 180 ] {} <Fatal> BaseDaemon: 9. ./obj-x86_64-linux-gnu/../src/Interpreters/ExpressionActions.cpp:0: DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool) @ 0x1987b6d4 in /workspace/clickhouse\r\n2021.01.19 01:40:05.403320 [ 180 ] {} <Fatal> BaseDaemon: 10. ./obj-x86_64-linux-gnu/../src/Interpreters/ExpressionActions.cpp:0: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x1987acc0 in /workspace/clickhouse\r\n2021.01.19 01:40:05.406530 [ 180 ] {} <Fatal> BaseDaemon: 11. ./obj-x86_64-linux-gnu/../src/Processors/Transforms/ExpressionTransform.cpp:0: DB::ExpressionTransform::transform(DB::Chunk&) @ 0x1ae1782e in /workspace/clickhouse\r\n2021.01.19 01:40:05.410404 [ 180 ] {} <Fatal> BaseDaemon: 12. ./obj-x86_64-linux-gnu/../src/Processors/ISimpleTransform.h:43: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x1a4d01d2 in /workspace/clickhouse\r\n2021.01.19 01:40:05.413481 [ 180 ] {} <Fatal> BaseDaemon: 13. ./obj-x86_64-linux-gnu/../src/Processors/ISimpleTransform.cpp:99: DB::ISimpleTransform::work() @ 0x1ac00960 in /workspace/clickhouse\r\n2021.01.19 01:40:05.416661 [ 180 ] {} <Fatal> BaseDaemon: 14. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:87: DB::executeJob(DB::IProcessor*) @ 0x1ac50299 in /workspace/clickhouse\r\n2021.01.19 01:40:05.419907 [ 180 ] {} <Fatal> BaseDaemon: 15. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:99: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x1ac50187 in /workspace/clickhouse\r\n2021.01.19 01:40:05.423121 [ 180 ] {} <Fatal> BaseDaemon: 16. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:0: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1ac4eb94 in /workspace/clickhouse\r\n2021.01.19 01:40:05.426306 [ 180 ] {} <Fatal> BaseDaemon: 17. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:0: DB::PipelineExecutor::executeImpl(unsigned long) @ 0x1ac4d46a in /workspace/clickhouse\r\n2021.01.19 01:40:05.429456 [ 180 ] {} <Fatal> BaseDaemon: 18. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:398: DB::PipelineExecutor::execute(unsigned long) @ 0x1ac4cf2b in /workspace/clickhouse\r\n2021.01.19 01:40:05.432593 [ 180 ] {} <Fatal> BaseDaemon: 19. ./obj-x86_64-linux-gnu/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:74: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) @ 0x1ac5f91c in /workspace/clickhouse\r\n2021.01.19 01:40:05.435785 [ 180 ] {} <Fatal> BaseDaemon: 20. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3682: decltype(std::__1::forward<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) @ 0x1ac5f877 in /workspace/clickhouse\r\n2021.01.19 01:40:05.438912 [ 180 ] {} <Fatal> BaseDaemon: 21. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/tuple:0: decltype(std::__1::forward<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) @ 0x1ac5f732 in /workspace/clickhouse\r\n2021.01.19 01:40:05.439030 [ 180 ] {} <Fatal> BaseDaemon: 22. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2533: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xe01223f in /workspace/clickhouse\r\n2021.01.19 01:40:05.439259 [ 180 ] {} <Fatal> BaseDaemon: 23. ./obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:0: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()> >(void*) @ 0xe015f06 in /workspace/clickhouse\r\n2021.01.19 01:40:05.439324 [ 180 ] {} <Fatal> BaseDaemon: 24. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n2021.01.19 01:40:05.439388 [ 180 ] {} <Fatal> BaseDaemon: 25. __clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\n",
  "hints_text": "\n\nhttps://clickhouse-test-reports.s3.yandex.net/19022/d0922e2985516fa230b7537e4daadde0101b78da/fuzzer_ubsan/report.html#fail1",
  "created_at": "2021-01-21T08:11:34Z",
  "modified_files": [
    "base/common/DateLUTImpl.h",
    "src/Functions/FunctionDateOrDateTimeAddInterval.h",
    "src/Functions/GatherUtils/Algorithms.h",
    "src/Functions/array/arrayAggregation.cpp",
    "src/Functions/array/arrayElement.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01657_array_element_ubsan.reference",
    "b/tests/queries/0_stateless/01657_array_element_ubsan.sql",
    "b/tests/queries/0_stateless/01658_substring_ubsan.sql",
    "b/tests/queries/0_stateless/01659_array_aggregation_ubsan.reference",
    "b/tests/queries/0_stateless/01659_array_aggregation_ubsan.sql"
  ]
}