{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42186,
  "instance_id": "ClickHouse__ClickHouse-42186",
  "issue_numbers": [
    "42185"
  ],
  "base_commit": "f695b75eefb37a7ef417de7709308dcce74b7dd7",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/distinctReadInOrder.cpp b/src/Processors/QueryPlan/Optimizations/distinctReadInOrder.cpp\nindex 6ec7ee98d082..38cb6f3d3c52 100644\n--- a/src/Processors/QueryPlan/Optimizations/distinctReadInOrder.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/distinctReadInOrder.cpp\n@@ -44,6 +44,12 @@ size_t tryDistinctReadInOrder(QueryPlan::Node * parent_node, QueryPlan::Nodes &)\n     if (!read_from_merge_tree)\n         return 0;\n \n+    /// if reading from merge tree doesn't provide any output order, we can do nothing\n+    /// it means that no ordering can provided or supported for a particular sorting key\n+    /// for example, tuple() or sipHash(string)\n+    if (read_from_merge_tree->getOutputStream().sort_description.empty())\n+        return 0;\n+\n     /// find non-const columns in DISTINCT\n     const ColumnsWithTypeAndName & distinct_columns = pre_distinct->getOutputStream().header.getColumnsWithTypeAndName();\n     std::set<std::string_view> non_const_columns;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02317_distinct_in_order_optimization.reference b/tests/queries/0_stateless/02317_distinct_in_order_optimization.reference\nindex 628c2fc0714e..26232d1e2812 100644\n--- a/tests/queries/0_stateless/02317_distinct_in_order_optimization.reference\n+++ b/tests/queries/0_stateless/02317_distinct_in_order_optimization.reference\n@@ -110,3 +110,10 @@ select distinct a, b, x, y from (select a, b, 1 as x, 2 as y from distinct_in_or\n 0\n -- check that distinct in order WITHOUT order by and WITH filter returns the same result as ordinary distinct\n 0\n+-- bug 42185, distinct in order and empty sort description\n+-- distinct in order, sorting key tuple()\n+1\n+0\n+-- distinct in order, sorting key contains function\n+2000-01-01 00:00:00\n+2000-01-01\ndiff --git a/tests/queries/0_stateless/02317_distinct_in_order_optimization.sql b/tests/queries/0_stateless/02317_distinct_in_order_optimization.sql\nindex a1e7d7340a34..a794709caba7 100644\n--- a/tests/queries/0_stateless/02317_distinct_in_order_optimization.sql\n+++ b/tests/queries/0_stateless/02317_distinct_in_order_optimization.sql\n@@ -95,3 +95,23 @@ select count() as diff from (select distinct * from distinct_in_order except sel\n drop table if exists distinct_in_order;\n drop table if exists ordinary_distinct;\n drop table if exists distinct_cardinality_low;\n+\n+-- bug 42185\n+drop table if exists sorting_key_empty_tuple;\n+drop table if exists sorting_key_contain_function;\n+\n+select '-- bug 42185, distinct in order and empty sort description';\n+select '-- distinct in order, sorting key tuple()';\n+create table sorting_key_empty_tuple (a int, b int) engine=MergeTree() order by tuple();\n+insert into sorting_key_empty_tuple select number % 2, number % 5 from numbers(1,10);\n+select distinct a from sorting_key_empty_tuple;\n+\n+select '-- distinct in order, sorting key contains function';\n+create table sorting_key_contain_function (datetime DateTime, a int) engine=MergeTree() order by (toDate(datetime));\n+insert into sorting_key_contain_function values ('2000-01-01', 1);\n+insert into sorting_key_contain_function values ('2000-01-01', 2);\n+select distinct datetime from sorting_key_contain_function;\n+select distinct toDate(datetime) from sorting_key_contain_function;\n+\n+drop table sorting_key_empty_tuple;\n+drop table sorting_key_contain_function;\n",
  "problem_statement": "DISTINCT in order: LOGICAL_ERROR if first column in sorting key contains function\n**Describe what's wrong**\r\n\r\nif the first column in sorting key contains function, `DISTINCT` query with the same column will fail\r\nExample:\r\n<pre>\r\nCREATE TABLE t\r\n(\r\n    `datetime` DateTime,\r\n    `a` UInt64\r\n)\r\nENGINE = MergeTree\r\nORDER BY <b>toDate(datetime)</b>;\r\nINSERT INTO t FORMAT Values ('2000-01-01', 1);\r\nSELECT DISTINCT <b>toDate(datetime)</b> FROM t;\r\n</pre>\r\n\r\n**Does it reproduce on recent release?**\r\nYes, version 22.10.1.15995 (official build)\r\n\r\n**Stack**\r\n```\r\nCode: 49. DB::Exception: Sort description can't be empty when reading in order. (LOGICAL_ERROR), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x78fd3ba in /usr/bin/clickhouse\r\n1. DB::ReadFromMergeTree::requestReadingInOrder(unsigned long, int, unsigned long) @ 0x1337fc67 in /usr/bin/clickhouse\r\n2. DB::QueryPlanOptimizations::tryDistinctReadInOrder(DB::QueryPlan::Node*, std::__1::list<DB::QueryPlan::Node, std::__1::allocator<DB::QueryPlan::Node> >&) @ 0x133ce567 in /usr/bin/clickhouse\r\n3. DB::QueryPlanOptimizations::optimizeTree(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::__1::list<DB::QueryPlan::Node, std::__1::allocator<DB::QueryPlan::Node> >&) @ 0x133c78a8 in /usr/bin/clickhouse\r\n4. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x13360731 in /usr/bin/clickhouse\r\n5. DB::InterpreterSelectWithUnionQuery::execute() @ 0x120ef7e6 in /usr/bin/clickhouse\r\n6. ? @ 0x123ea4eb in /usr/bin/clickhouse\r\n7. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::optional<DB::FormatSettings> const&) @ 0x123ef213 in /usr/bin/clickhouse\r\n8. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::__1::optional<DB::CurrentThread::QueryScope>&) @ 0x12f5ba4e in /usr/bin/clickhouse\r\n9. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x12f60870 in /usr/bin/clickhouse\r\n10. DB::HTTPServerConnection::run() @ 0x12fdbaaa in /usr/bin/clickhouse\r\n11. Poco::Net::TCPServerConnection::start() @ 0x15a7342f in /usr/bin/clickhouse\r\n12. Poco::Net::TCPServerDispatcher::run() @ 0x15a757bb in /usr/bin/clickhouse\r\n13. Poco::PooledThread::run() @ 0x15c30d52 in /usr/bin/clickhouse\r\n14. Poco::ThreadImpl::runnableEntry(void*) @ 0x15c2e4dd in /usr/bin/clickhouse\r\n15. ? @ 0x7fcced143609 in ?\r\n16. clone @ 0x7fcced068133 in ?\r\n (version 22.10.1.15995 (official build))\r\n```\r\n\r\n**Expected behavior**\r\nNo error occurs\n",
  "hints_text": "",
  "created_at": "2022-10-08T10:14:53Z"
}