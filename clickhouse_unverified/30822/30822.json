{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 30822,
  "instance_id": "ClickHouse__ClickHouse-30822",
  "issue_numbers": [
    "29052"
  ],
  "base_commit": "6cfb9b67bb248b23c1f8b2e5a7eacd5b7485d7dd",
  "patch": "diff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 69f9518a9120..9490c43203b1 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -1971,6 +1971,9 @@ zkutil::ZooKeeperPtr Context::getAuxiliaryZooKeeper(const String & name) const\n     auto zookeeper = shared->auxiliary_zookeepers.find(name);\n     if (zookeeper == shared->auxiliary_zookeepers.end())\n     {\n+        if (name.find(':') != std::string::npos || name.find('/') != std::string::npos)\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Invalid auxiliary ZooKeeper name {}: ':' and '/' are not allowed\", name);\n+\n         const auto & config = shared->auxiliary_zookeepers_config ? *shared->auxiliary_zookeepers_config : getConfigRef();\n         if (!config.has(\"auxiliary_zookeepers.\" + name))\n             throw Exception(\ndiff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp\nindex c8ec9b912110..cd7c9352c6e5 100644\n--- a/src/Storages/StorageReplicatedMergeTree.cpp\n+++ b/src/Storages/StorageReplicatedMergeTree.cpp\n@@ -192,43 +192,54 @@ zkutil::ZooKeeperPtr StorageReplicatedMergeTree::getZooKeeper() const\n     return res;\n }\n \n-static std::string normalizeZooKeeperPath(std::string zookeeper_path)\n+static std::string normalizeZooKeeperPath(std::string zookeeper_path, bool check_starts_with_slash, Poco::Logger * log = nullptr)\n {\n     if (!zookeeper_path.empty() && zookeeper_path.back() == '/')\n         zookeeper_path.resize(zookeeper_path.size() - 1);\n     /// If zookeeper chroot prefix is used, path should start with '/', because chroot concatenates without it.\n     if (!zookeeper_path.empty() && zookeeper_path.front() != '/')\n+    {\n+        /// Do not allow this for new tables, print warning for tables created in old versions\n+        if (check_starts_with_slash)\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"ZooKeeper path must starts with '/', got '{}'\", zookeeper_path);\n+        if (log)\n+            LOG_WARNING(log, \"ZooKeeper path ('{}') does not start with '/'. It will not be supported in future releases\");\n         zookeeper_path = \"/\" + zookeeper_path;\n+    }\n \n     return zookeeper_path;\n }\n \n static String extractZooKeeperName(const String & path)\n {\n+    static constexpr auto default_zookeeper_name = \"default\";\n     if (path.empty())\n-        throw Exception(\"ZooKeeper path should not be empty\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n-    auto pos = path.find(':');\n-    if (pos != String::npos)\n+        throw Exception(\"ZooKeeper path should not be empty\", ErrorCodes::BAD_ARGUMENTS);\n+    if (path[0] == '/')\n+        return default_zookeeper_name;\n+    auto pos = path.find(\":/\");\n+    if (pos != String::npos && pos < path.find('/'))\n     {\n         auto zookeeper_name = path.substr(0, pos);\n         if (zookeeper_name.empty())\n-            throw Exception(\"Zookeeper path should start with '/' or '<auxiliary_zookeeper_name>:/'\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+            throw Exception(\"Zookeeper path should start with '/' or '<auxiliary_zookeeper_name>:/'\", ErrorCodes::BAD_ARGUMENTS);\n         return zookeeper_name;\n     }\n-    static constexpr auto default_zookeeper_name = \"default\";\n     return default_zookeeper_name;\n }\n \n-static String extractZooKeeperPath(const String & path)\n+static String extractZooKeeperPath(const String & path, bool check_starts_with_slash, Poco::Logger * log = nullptr)\n {\n     if (path.empty())\n-        throw Exception(\"ZooKeeper path should not be empty\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n-    auto pos = path.find(':');\n-    if (pos != String::npos)\n+        throw Exception(\"ZooKeeper path should not be empty\", ErrorCodes::BAD_ARGUMENTS);\n+    if (path[0] == '/')\n+        return normalizeZooKeeperPath(path, check_starts_with_slash, log);\n+    auto pos = path.find(\":/\");\n+    if (pos != String::npos && pos < path.find('/'))\n     {\n-        return normalizeZooKeeperPath(path.substr(pos + 1, String::npos));\n+        return normalizeZooKeeperPath(path.substr(pos + 1, String::npos), check_starts_with_slash, log);\n     }\n-    return normalizeZooKeeperPath(path);\n+    return normalizeZooKeeperPath(path, check_starts_with_slash, log);\n }\n \n static MergeTreePartInfo makeDummyDropRangeForMovePartitionOrAttachPartitionFrom(const String & partition_id)\n@@ -275,7 +286,7 @@ StorageReplicatedMergeTree::StorageReplicatedMergeTree(\n                     attach,\n                     [this] (const std::string & name) { enqueuePartForCheck(name); })\n     , zookeeper_name(extractZooKeeperName(zookeeper_path_))\n-    , zookeeper_path(extractZooKeeperPath(zookeeper_path_))\n+    , zookeeper_path(extractZooKeeperPath(zookeeper_path_, /* check_starts_with_slash */ !attach, log))\n     , replica_name(replica_name_)\n     , replica_path(fs::path(zookeeper_path) / \"replicas\" / replica_name_)\n     , reader(*this)\n@@ -5425,7 +5436,7 @@ void StorageReplicatedMergeTree::fetchPartition(\n     info.table_id.uuid = UUIDHelpers::Nil;\n     auto expand_from = query_context->getMacros()->expand(from_, info);\n     String auxiliary_zookeeper_name = extractZooKeeperName(expand_from);\n-    String from = extractZooKeeperPath(expand_from);\n+    String from = extractZooKeeperPath(expand_from, /* check_starts_with_slash */ true);\n     if (from.empty())\n         throw Exception(\"ZooKeeper path should not be empty\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n \n@@ -6490,7 +6501,7 @@ void StorageReplicatedMergeTree::movePartitionToShard(\n     if (!move_part)\n         throw Exception(\"MOVE PARTITION TO SHARD is not supported, use MOVE PART instead\", ErrorCodes::NOT_IMPLEMENTED);\n \n-    if (normalizeZooKeeperPath(zookeeper_path) == normalizeZooKeeperPath(to))\n+    if (normalizeZooKeeperPath(zookeeper_path, /* check_starts_with_slash */ true) == normalizeZooKeeperPath(to, /* check_starts_with_slash */ true))\n         throw Exception(\"Source and destination are the same\", ErrorCodes::BAD_ARGUMENTS);\n \n     auto zookeeper = getZooKeeper();\n",
  "test_patch": "diff --git a/tests/integration/test_replicated_merge_tree_with_auxiliary_zookeepers/test.py b/tests/integration/test_replicated_merge_tree_with_auxiliary_zookeepers/test.py\nindex a9dcce1b9d4f..4644790ff946 100644\n--- a/tests/integration/test_replicated_merge_tree_with_auxiliary_zookeepers/test.py\n+++ b/tests/integration/test_replicated_merge_tree_with_auxiliary_zookeepers/test.py\n@@ -101,3 +101,13 @@ def test_drop_replicated_merge_tree_with_auxiliary_zookeeper(started_cluster):\n     assert zk.exists('/clickhouse/tables/test/test_auxiliary_zookeeper')\n     drop_table([node1, node2], \"test_auxiliary_zookeeper\")\n     assert zk.exists('/clickhouse/tables/test/test_auxiliary_zookeeper') is None\n+\n+def test_path_ambiguity(started_cluster):\n+    drop_table([node1, node2], \"test_path_ambiguity1\")\n+    drop_table([node1, node2], \"test_path_ambiguity2\")\n+    node1.query(\"create table test_path_ambiguity1 (n int) engine=ReplicatedMergeTree('/test:bad:/path', '1') order by n\")\n+    assert \"Invalid auxiliary ZooKeeper name\" in node1.query_and_get_error(\"create table test_path_ambiguity2 (n int) engine=ReplicatedMergeTree('test:bad:/path', '1') order by n\")\n+    assert \"ZooKeeper path must starts with '/'\" in node1.query_and_get_error(\"create table test_path_ambiguity2 (n int) engine=ReplicatedMergeTree('test/bad:/path', '1') order by n\")\n+    node1.query(\"create table test_path_ambiguity2 (n int) engine=ReplicatedMergeTree('zookeeper2:/bad:/path', '1') order by n\")\n+    drop_table([node1, node2], \"test_path_ambiguity1\")\n+    drop_table([node1, node2], \"test_path_ambiguity2\")\n",
  "problem_statement": "Upgrade to 21.8 LTS fails with: Unknown auxiliary ZooKeeper name\n**Describe the issue**\r\nClickHouse is unable to start up after upgrading from 20.8 to 21.8. \r\n\r\nThere is a replicated table with `:` in zk path and it couldn't be loaded with:\r\n\r\n`2021.09.15 03:49:58.435071 [ 633075 ] {} <Error> Application: DB::Exception: Unknown auxiliary ZooKeeper name '/test_prefix'. If it's required it can be added to the section <auxiliary_zookeepers> in config.xml: Cannot attach table `db1`.`table1` from metadata file /var/lib/clickhouse/metadata/db1/table1.sql from query ATTACH TABLE db1.table1 (`field1` String, `date` Date) ENGINE = ReplicatedMergeTree('/test_prefix:db1/{shard}/table1', '{replica}') PARTITION BY toMonth(date) PRIMARY KEY field1 ORDER BY field1 SETTINGS index_granularity = 8192: while loading database `db1` from path /var/lib/clickhouse/metadata/db1\r\n`\r\n\r\n**Expected behavior**\r\nClickHouse server is able to startup after upgrade without schema change. \"test_prefix\" in \"/test_prefix:db1/{shard}/table1\" is not interpreted as an auxiliary ZooKeeper name.\r\n\n",
  "hints_text": "cc @fastio   https://github.com/ClickHouse/ClickHouse/pull/17070",
  "created_at": "2021-10-28T16:27:24Z"
}