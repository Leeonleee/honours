diff --git a/src/Formats/registerFormats.cpp b/src/Formats/registerFormats.cpp
index 6c9f1a94022f..7c7ccac8b016 100644
--- a/src/Formats/registerFormats.cpp
+++ b/src/Formats/registerFormats.cpp
@@ -14,7 +14,6 @@ void registerFileSegmentationEngineJSONEachRow(FormatFactory & factory);
 void registerFileSegmentationEngineRegexp(FormatFactory & factory);
 void registerFileSegmentationEngineJSONAsString(FormatFactory & factory);
 void registerFileSegmentationEngineJSONAsObject(FormatFactory & factory);
-void registerFileSegmentationEngineJSONCompactEachRow(FormatFactory & factory);
 #if USE_HIVE
 void registerFileSegmentationEngineHiveText(FormatFactory & factory);
 #endif
@@ -161,7 +160,6 @@ void registerFormats()
     registerFileSegmentationEngineJSONEachRow(factory);
     registerFileSegmentationEngineJSONAsString(factory);
     registerFileSegmentationEngineJSONAsObject(factory);
-    registerFileSegmentationEngineJSONCompactEachRow(factory);
 #if USE_HIVE
     registerFileSegmentationEngineHiveText(factory);
 #endif
@@ -294,4 +292,3 @@ void registerFormats()
 }
 
 }
-
diff --git a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp
index b301b9527c15..08dc9e2d5118 100644
--- a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp
+++ b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp
@@ -284,23 +284,4 @@ void registerJSONCompactEachRowSchemaReader(FormatFactory & factory)
     }
 }
 
-void registerFileSegmentationEngineJSONCompactEachRow(FormatFactory & factory)
-{
-    auto register_func = [&](const String & format_name, bool with_names, bool with_types)
-    {
-        /// In case when we have names and/or types in the first two/one rows,
-        /// we need to read at least one more row of actual data. So, set
-        /// the minimum of rows for segmentation engine according to
-        /// parameters with_names and with_types.
-        size_t min_rows = 1 + int(with_names) + int(with_types);
-        factory.registerFileSegmentationEngine(format_name, [min_rows](ReadBuffer & in, DB::Memory<> & memory, size_t min_bytes, size_t max_rows)
-        {
-            return JSONUtils::fileSegmentationEngineJSONCompactEachRow(in, memory, min_bytes, min_rows, max_rows);
-        });
-    };
-
-    registerWithNamesAndTypes("JSONCompactEachRow", register_func);
-    registerWithNamesAndTypes("JSONCompactStringsEachRow", register_func);
-}
-
 }
