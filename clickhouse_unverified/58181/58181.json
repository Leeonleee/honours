{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58181,
  "instance_id": "ClickHouse__ClickHouse-58181",
  "issue_numbers": [
    "58180"
  ],
  "base_commit": "ad697a0eacc775809397fcb2c25c64f818f4e97a",
  "patch": "diff --git a/src/Formats/registerFormats.cpp b/src/Formats/registerFormats.cpp\nindex 6c9f1a94022f..7c7ccac8b016 100644\n--- a/src/Formats/registerFormats.cpp\n+++ b/src/Formats/registerFormats.cpp\n@@ -14,7 +14,6 @@ void registerFileSegmentationEngineJSONEachRow(FormatFactory & factory);\n void registerFileSegmentationEngineRegexp(FormatFactory & factory);\n void registerFileSegmentationEngineJSONAsString(FormatFactory & factory);\n void registerFileSegmentationEngineJSONAsObject(FormatFactory & factory);\n-void registerFileSegmentationEngineJSONCompactEachRow(FormatFactory & factory);\n #if USE_HIVE\n void registerFileSegmentationEngineHiveText(FormatFactory & factory);\n #endif\n@@ -161,7 +160,6 @@ void registerFormats()\n     registerFileSegmentationEngineJSONEachRow(factory);\n     registerFileSegmentationEngineJSONAsString(factory);\n     registerFileSegmentationEngineJSONAsObject(factory);\n-    registerFileSegmentationEngineJSONCompactEachRow(factory);\n #if USE_HIVE\n     registerFileSegmentationEngineHiveText(factory);\n #endif\n@@ -294,4 +292,3 @@ void registerFormats()\n }\n \n }\n-\ndiff --git a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp\nindex b301b9527c15..08dc9e2d5118 100644\n--- a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp\n@@ -284,23 +284,4 @@ void registerJSONCompactEachRowSchemaReader(FormatFactory & factory)\n     }\n }\n \n-void registerFileSegmentationEngineJSONCompactEachRow(FormatFactory & factory)\n-{\n-    auto register_func = [&](const String & format_name, bool with_names, bool with_types)\n-    {\n-        /// In case when we have names and/or types in the first two/one rows,\n-        /// we need to read at least one more row of actual data. So, set\n-        /// the minimum of rows for segmentation engine according to\n-        /// parameters with_names and with_types.\n-        size_t min_rows = 1 + int(with_names) + int(with_types);\n-        factory.registerFileSegmentationEngine(format_name, [min_rows](ReadBuffer & in, DB::Memory<> & memory, size_t min_bytes, size_t max_rows)\n-        {\n-            return JSONUtils::fileSegmentationEngineJSONCompactEachRow(in, memory, min_bytes, min_rows, max_rows);\n-        });\n-    };\n-\n-    registerWithNamesAndTypes(\"JSONCompactEachRow\", register_func);\n-    registerWithNamesAndTypes(\"JSONCompactStringsEachRow\", register_func);\n-}\n-\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02951_data.jsonl.zst b/tests/queries/0_stateless/02951_data.jsonl.zst\nnew file mode 100644\nindex 000000000000..9701cdd5f6e8\nBinary files /dev/null and b/tests/queries/0_stateless/02951_data.jsonl.zst differ\ndiff --git a/tests/queries/0_stateless/02951_parallel_parsing_json_compact_each_row.reference b/tests/queries/0_stateless/02951_parallel_parsing_json_compact_each_row.reference\nnew file mode 100644\nindex 000000000000..0953b633db6e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02951_parallel_parsing_json_compact_each_row.reference\n@@ -0,0 +1,1 @@\n+15021837090950060251\ndiff --git a/tests/queries/0_stateless/02951_parallel_parsing_json_compact_each_row.sh b/tests/queries/0_stateless/02951_parallel_parsing_json_compact_each_row.sh\nnew file mode 100755\nindex 000000000000..bdaac0e0c50c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02951_parallel_parsing_json_compact_each_row.sh\n@@ -0,0 +1,63 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_LOCAL} --input-format-parallel-parsing 1 --query \"\n+    SELECT sum(cityHash64(*)) FROM file('$CUR_DIR/02951_data.jsonl.zst', JSONCompactEachRow, '\n+            time_offset Decimal64(3),\n+            lat Float64,\n+            lon Float64,\n+            altitude String,\n+            ground_speed Float32,\n+            track_degrees Float32,\n+            flags UInt32,\n+            vertical_rate Int32,\n+            aircraft Tuple(\n+                alert            Int64,\n+                alt_geom         Int64,\n+                gva              Int64,\n+                nac_p            Int64,\n+                nac_v            Int64,\n+                nic              Int64,\n+                nic_baro         Int64,\n+                rc               Int64,\n+                sda              Int64,\n+                sil              Int64,\n+                sil_type         String,\n+                spi              Int64,\n+                track            Float64,\n+                type             String,\n+                version          Int64,\n+                category         String,\n+                emergency        String,\n+                flight           String,\n+                squawk           String,\n+                baro_rate        Int64,\n+                nav_altitude_fms Int64,\n+                nav_altitude_mcp Int64,\n+                nav_modes        Array(String),\n+                nav_qnh          Float64,\n+                geom_rate        Int64,\n+                ias              Int64,\n+                mach             Float64,\n+                mag_heading      Float64,\n+                oat              Int64,\n+                roll             Float64,\n+                tas              Int64,\n+                tat              Int64,\n+                true_heading     Float64,\n+                wd               Int64,\n+                ws               Int64,\n+                track_rate       Float64,\n+                nav_heading      Float64\n+            ),\n+            source LowCardinality(String),\n+            geometric_altitude Int32,\n+            geometric_vertical_rate Int32,\n+            indicated_airspeed Int32,\n+            roll_angle Float32,\n+            hex String\n+        ')\"\n",
  "problem_statement": "Parallel parsing does not work for `JSONCompactEachRow`\n**Describe the unexpected behaviour**\r\n\r\n```\r\nSELECT sum(ignore(*)) FROM file('194510.data.jsonl', JSONCompactEachRow, '\r\n            time_offset Decimal64(3),\r\n            lat Float64,\r\n            lon Float64,\r\n            altitude String,\r\n            ground_speed Float32,\r\n            track_degrees Float32,\r\n            flags UInt32,\r\n            vertical_rate Int32,\r\n            aircraft Tuple(\r\n                alert            Int64,\r\n                alt_geom         Int64,\r\n                gva              Int64,\r\n                nac_p            Int64,\r\n                nac_v            Int64,\r\n                nic              Int64,\r\n                nic_baro         Int64,\r\n                rc               Int64,\r\n                sda              Int64,\r\n                sil              Int64,\r\n                sil_type         String,\r\n                spi              Int64,\r\n                track            Float64,\r\n                type             String,\r\n                version          Int64,\r\n                category         String,\r\n                emergency        String,\r\n                flight           String,\r\n                squawk           String,\r\n                baro_rate        Int64,\r\n                nav_altitude_fms Int64,\r\n                nav_altitude_mcp Int64,\r\n                nav_modes        Array(String),\r\n                nav_qnh          Float64,\r\n                geom_rate        Int64,\r\n                ias              Int64,\r\n                mach             Float64,\r\n                mag_heading      Float64,\r\n                oat              Int64,\r\n                roll             Float64,\r\n                tas              Int64,\r\n                tat              Int64,\r\n                true_heading     Float64,\r\n                wd               Int64,\r\n                ws               Int64,\r\n                track_rate       Float64,\r\n                nav_heading      Float64\r\n            ),\r\n            source LowCardinality(String),\r\n            geometric_altitude Int32,\r\n            geometric_vertical_rate Int32,\r\n            indicated_airspeed Int32,\r\n            roll_angle Float32,\r\n            hex String\r\n        ')\r\n```\r\n\r\n[194510.data.jsonl.zst.txt](https://github.com/ClickHouse/ClickHouse/files/13758041/194510.data.jsonl.zst.txt)\r\n\r\nProduces an error:\r\n```\r\nReceived exception:\r\nCode: 27. DB::ParsingException: Cannot parse input: expected '[' before: ',\\n[59506.0,39.347031,-94.713433,1375,133.6,193.4,0,-896,null,\"adsb_icao\",1400,-576,null,null,\"f899e0b7\"],\\n[59507.0,39.346370,-94.713623,1375,134.6,193.3,0,-704,': \r\nRow 1:\r\nERROR: There is no '[' before the row.\r\n\r\n: While executing ParallelParsingBlockInputFormat: While executing File: (in file/uri /tmp/194510.data.jsonl): (at row 54240)\r\n. (CANNOT_PARSE_INPUT_ASSERTION_FAILED)\r\n```\r\n\r\nWorks if I do `SET input_format_parallel_parsing = 0`\n",
  "hints_text": "",
  "created_at": "2023-12-23T05:18:41Z"
}