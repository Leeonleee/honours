{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 51297,
  "instance_id": "ClickHouse__ClickHouse-51297",
  "issue_numbers": [
    "51185"
  ],
  "base_commit": "9997743a66d93ca80c20d32fb3a49a50cfe7bb10",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeBackgroundExecutor.cpp b/src/Storages/MergeTree/MergeTreeBackgroundExecutor.cpp\nindex c4473ec96cf3..b569fa73a732 100644\n--- a/src/Storages/MergeTree/MergeTreeBackgroundExecutor.cpp\n+++ b/src/Storages/MergeTree/MergeTreeBackgroundExecutor.cpp\n@@ -151,9 +151,9 @@ void printExceptionWithRespectToAbort(Poco::Logger * log)\n     {\n         NOEXCEPT_SCOPE({\n             ALLOW_ALLOCATIONS_IN_SCOPE;\n-            /// Cancelled merging parts is not an error - log as info.\n+            /// Cancelled merging parts is not an error - log normally.\n             if (e.code() == ErrorCodes::ABORTED)\n-                LOG_INFO(log, getExceptionMessageAndPattern(e, /* with_stacktrace */ false));\n+                LOG_DEBUG(log, getExceptionMessageAndPattern(e, /* with_stacktrace */ false));\n             else\n                 tryLogCurrentException(__PRETTY_FUNCTION__);\n         });\ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex c3ffb8928718..d2f64a406a74 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -1453,7 +1453,7 @@ std::vector<MergeTreeData::LoadPartResult> MergeTreeData::loadDataPartsFromDisk(\n {\n     const size_t num_parts = parts_to_load.size();\n \n-    LOG_DEBUG(log, \"Will load {} number of parts using {} threads\", num_parts, getActivePartsLoadingThreadPool().get().getMaxThreads());\n+    LOG_TRACE(log, \"Will load {} parts using up to {} threads\", num_parts, getActivePartsLoadingThreadPool().get().getMaxThreads());\n \n     /// Shuffle all the parts randomly to possible speed up loading them from JBOD.\n     std::shuffle(parts_to_load.begin(), parts_to_load.end(), thread_local_rng);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01193_metadata_loading.sh b/tests/queries/0_stateless/01193_metadata_loading.sh\nindex d0f3001fceb0..63fcf8eb93b3 100755\n--- a/tests/queries/0_stateless/01193_metadata_loading.sh\n+++ b/tests/queries/0_stateless/01193_metadata_loading.sh\n@@ -5,18 +5,14 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n # shellcheck source=../shell_config.sh\n . \"$CURDIR\"/../shell_config.sh\n \n+# Check that attaching a database with a large number of tables is not too slow.\n # it is the worst way of making performance test, nevertheless it can detect significant slowdown and some other issues, that usually found by stress test\n \n db=\"test_01193_$RANDOM\"\n tables=1000\n threads=10\n count_multiplier=1\n-max_time_ms=1000\n-\n-# In case of s390x, the query execution time seems to be approximately ~1.1 to ~1.2 secs. So, to match the query execution time, set max_time_ms=1500\n-if [[ $(uname -a | grep s390x) ]]; then\n-    max_time_ms=1500\n-fi\n+max_time_ms=5000\n \n debug_or_sanitizer_build=$($CLICKHOUSE_CLIENT -q \"WITH ((SELECT value FROM system.build_options WHERE name='BUILD_TYPE') AS build, (SELECT value FROM system.build_options WHERE name='CXX_FLAGS') as flags) SELECT build='Debug' OR flags LIKE '%fsanitize%' OR hasThreadFuzzer()\")\n \n@@ -46,13 +42,13 @@ wait\n $CLICKHOUSE_CLIENT -q \"CREATE TABLE $db.table_merge (i UInt64, d Date, s String, n Nested(i UInt8, f Float32)) ENGINE=Merge('$db', '^table_')\"\n $CLICKHOUSE_CLIENT -q \"SELECT count() * $count_multiplier, i, d, s, n.i, n.f FROM merge('$db', '^table_9') GROUP BY i, d, s, n.i, n.f ORDER BY i\"\n \n-for i in {1..5}; do\n+for i in {1..10}; do\n   $CLICKHOUSE_CLIENT -q \"DETACH DATABASE $db\"\n   $CLICKHOUSE_CLIENT -q \"ATTACH DATABASE $db\" --query_id=\"$db-$i\";\n done\n \n $CLICKHOUSE_CLIENT -q \"SYSTEM FLUSH LOGS\"\n-$CLICKHOUSE_CLIENT -q \"SELECT if(quantile(0.5)(query_duration_ms) < $max_time_ms, 'ok', toString(groupArray(query_duration_ms))) FROM system.query_log WHERE current_database = currentDatabase() AND query_id LIKE '$db-%' AND type=2\"\n+$CLICKHOUSE_CLIENT -q \"SELECT if(min(query_duration_ms) < $max_time_ms, 'ok', toString(groupArray(query_duration_ms))) FROM system.query_log WHERE current_database = currentDatabase() AND query_id LIKE '$db-%' AND type=2\"\n \n $CLICKHOUSE_CLIENT -q \"SELECT count() * $count_multiplier, i, d, s, n.i, n.f FROM $db.table_merge GROUP BY i, d, s, n.i, n.f ORDER BY i\"\n \n",
  "problem_statement": "01193_metadata_loading is flaky (suppressed)\n```\r\nSELECT\r\n  check_name,\r\n  test_name,\r\n  toStartOfDay(check_start_time) as t,\r\n  count() as runs,\r\n  100 * (countIf(test_status != 'OK' AND test_status != 'SKIPPED') AS f) / runs as failure_percentage\r\nFROM checks\r\nWHERE\r\n    test_name LIKE '01193_metadata_loading%'\r\n    AND pull_request_number = 0\r\n    AND check_start_time > today() - interval 30 day\r\nGROUP BY check_name, test_name, t\r\nHAVING f > 0\r\nORDER by check_name, test_name, t\r\n```\r\n\r\n\u2116 | check_name | test_name | t | runs | failure_percentage\r\n-- | -- | -- | -- | -- | --\r\n1 | Stateless tests (aarch64) | 01193_metadata_loading | 2023-06-16 00:00:00 | 20 | 20\r\n2 | Stateless tests (aarch64) | 01193_metadata_loading | 2023-06-17 00:00:00 | 12 | 8.333333333333334\r\n3 | Stateless tests (aarch64) | 01193_metadata_loading | 2023-06-19 00:00:00 | 8 | 50\r\n4 | Stateless tests (release) | 01193_metadata_loading | 2023-06-12 00:00:00 | 13 | 7.6923076923076925\r\n5 | Stateless tests (release) | 01193_metadata_loading | 2023-06-17 00:00:00 | 14 | 7.142857142857143\r\n6 | Stateless tests (release, DatabaseOrdinary) | 01193_metadata_loading | 2023-06-17 00:00:00 | 14 | 14.285714285714286\r\n7 | Stateless tests (release, DatabaseOrdinary) | 01193_metadata_loading | 2023-06-19 00:00:00 | 8 | 25\r\n8 | Stateless tests (release, DatabaseReplicated) [2/4] | 01193_metadata_loading | 2023-06-16 00:00:00 | 20 | 10\r\n9 | Stateless tests (release, DatabaseReplicated) [2/4] | 01193_metadata_loading | 2023-06-19 00:00:00 | 8 | 12.5\r\n10 | Stateless tests (release, analyzer) | 01193_metadata_loading | 2023-06-17 00:00:00 | 14 | 7.142857142857143\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-06-22T22:08:46Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreeBackgroundExecutor.cpp",
    "src/Storages/MergeTree/MergeTreeData.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01193_metadata_loading.sh"
  ]
}