{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11807,
  "instance_id": "ClickHouse__ClickHouse-11807",
  "issue_numbers": [
    "9253"
  ],
  "base_commit": "916ae64e4237eb9e601e38c4497061566bf8754f",
  "patch": "diff --git a/src/Columns/ColumnNullable.cpp b/src/Columns/ColumnNullable.cpp\nindex a3c4e77db0df..bccb77ebd128 100644\n--- a/src/Columns/ColumnNullable.cpp\n+++ b/src/Columns/ColumnNullable.cpp\n@@ -554,7 +554,6 @@ void ColumnNullable::applyNullMap(const ColumnNullable & other)\n     applyNullMap(other.getNullMapColumn());\n }\n \n-\n void ColumnNullable::checkConsistency() const\n {\n     if (null_map->size() != getNestedColumn().size())\ndiff --git a/src/Columns/ColumnVector.cpp b/src/Columns/ColumnVector.cpp\nindex 50f1dba4fdb9..b6ae5e0bbd44 100644\n--- a/src/Columns/ColumnVector.cpp\n+++ b/src/Columns/ColumnVector.cpp\n@@ -408,6 +408,31 @@ ColumnPtr ColumnVector<T>::filter(const IColumn::Filter & filt, ssize_t result_s\n     return res;\n }\n \n+template <typename T>\n+void ColumnVector<T>::applyZeroMap(const IColumn::Filter & filt, bool inverted)\n+{\n+    size_t size = data.size();\n+    if (size != filt.size())\n+        throw Exception(\"Size of filter doesn't match size of column.\", ErrorCodes::SIZES_OF_COLUMNS_DOESNT_MATCH);\n+\n+    const UInt8 * filt_pos = filt.data();\n+    const UInt8 * filt_end = filt_pos + size;\n+    T * data_pos = data.data();\n+\n+    if (inverted)\n+    {\n+        for (; filt_pos < filt_end; ++filt_pos, ++data_pos)\n+            if (!*filt_pos)\n+                *data_pos = 0;\n+    }\n+    else\n+    {\n+        for (; filt_pos < filt_end; ++filt_pos, ++data_pos)\n+            if (*filt_pos)\n+                *data_pos = 0;\n+    }\n+}\n+\n template <typename T>\n ColumnPtr ColumnVector<T>::permute(const IColumn::Permutation & perm, size_t limit) const\n {\ndiff --git a/src/Columns/ColumnVector.h b/src/Columns/ColumnVector.h\nindex b9b14f4b2a1b..1e522b538ca0 100644\n--- a/src/Columns/ColumnVector.h\n+++ b/src/Columns/ColumnVector.h\n@@ -277,6 +277,9 @@ class ColumnVector final : public COWHelper<ColumnVectorHelper, ColumnVector<T>>\n         return typeid(rhs) == typeid(ColumnVector<T>);\n     }\n \n+    /// Replace elements that match the filter with zeroes. If inverted replaces not matched elements.\n+    void applyZeroMap(const IColumn::Filter & filt, bool inverted = false);\n+\n     /** More efficient methods of manipulation - to manipulate with data directly. */\n     Container & getData()\n     {\ndiff --git a/src/Functions/if.cpp b/src/Functions/if.cpp\nindex c272dc98505c..593cf56caf87 100644\n--- a/src/Functions/if.cpp\n+++ b/src/Functions/if.cpp\n@@ -158,7 +158,7 @@ struct NumIfImpl<A, B, NumberTraits::Error>\n private:\n     [[noreturn]] static void throwError()\n     {\n-        throw Exception(\"Internal logic error: invalid types of arguments 2 and 3 of if\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+        throw Exception(\"Invalid types of arguments 2 and 3 of if\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n     }\n public:\n     template <typename... Args> static void vectorVector(Args &&...) { throwError(); }\n@@ -656,30 +656,89 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n         block.getByPosition(result).column = std::move(result_column);\n     }\n \n-    bool executeForNullableCondition(Block & block, const ColumnNumbers & arguments, size_t result, size_t /*input_rows_count*/)\n+    bool executeForConstAndNullableCondition(Block & block, const ColumnNumbers & arguments, size_t result, size_t /*input_rows_count*/)\n     {\n         const ColumnWithTypeAndName & arg_cond = block.getByPosition(arguments[0]);\n         bool cond_is_null = arg_cond.column->onlyNull();\n \n-        if (cond_is_null)\n+        ColumnPtr not_const_condition = arg_cond.column;\n+        bool cond_is_const = false;\n+        bool cond_is_true = false;\n+        bool cond_is_false = false;\n+        if (const auto * const_arg = checkAndGetColumn<ColumnConst>(*arg_cond.column))\n         {\n-            block.getByPosition(result).column = std::move(block.getByPosition(arguments[2]).column);\n-            return true;\n+            cond_is_const = true;\n+            not_const_condition = const_arg->getDataColumnPtr();\n+            ColumnPtr data_column = const_arg->getDataColumnPtr();\n+            if (const auto * const_nullable_arg = checkAndGetColumn<ColumnNullable>(*data_column))\n+            {\n+                data_column = const_nullable_arg->getNestedColumnPtr();\n+                if (!data_column->empty())\n+                    cond_is_null = const_nullable_arg->getNullMapData()[0];\n+            }\n+\n+            if (!data_column->empty())\n+            {\n+                cond_is_true = !cond_is_null && checkAndGetColumn<ColumnUInt8>(*data_column)->getBool(0);\n+                cond_is_false = !cond_is_null && !cond_is_true;\n+            }\n         }\n \n-        if (const auto * nullable = checkAndGetColumn<ColumnNullable>(*arg_cond.column))\n+        const auto & column1 = block.getByPosition(arguments[1]);\n+        const auto & column2 = block.getByPosition(arguments[2]);\n+        auto & result_column = block.getByPosition(result);\n+\n+        if (cond_is_true)\n         {\n+            if (result_column.type->equals(*column1.type))\n+            {\n+                result_column.column = std::move(column1.column);\n+                return true;\n+            }\n+        }\n+        else if (cond_is_false || cond_is_null)\n+        {\n+            if (result_column.type->equals(*column2.type))\n+            {\n+                result_column.column = std::move(column2.column);\n+                return true;\n+            }\n+        }\n+\n+        if (const auto * nullable = checkAndGetColumn<ColumnNullable>(*not_const_condition))\n+        {\n+            ColumnPtr new_cond_column = nullable->getNestedColumnPtr();\n+            size_t column_size = arg_cond.column->size();\n+\n+            if (cond_is_null || cond_is_true || cond_is_false) /// Nullable(Nothing) or consts\n+            {\n+                UInt8 value = cond_is_true ? 1 : 0;\n+                new_cond_column = ColumnConst::create(ColumnUInt8::create(1, value), column_size);\n+            }\n+            else if (checkAndGetColumn<ColumnUInt8>(*new_cond_column))\n+            {\n+                auto nested_column_copy = new_cond_column->cloneResized(new_cond_column->size());\n+                typeid_cast<ColumnUInt8 *>(nested_column_copy.get())->applyZeroMap(nullable->getNullMapData());\n+                new_cond_column = std::move(nested_column_copy);\n+\n+                if (cond_is_const)\n+                    new_cond_column = ColumnConst::create(new_cond_column, column_size);\n+            }\n+            else\n+                throw Exception(\"Illegal column \" + arg_cond.column->getName() + \" of \" + getName() + \" condition\",\n+                                ErrorCodes::ILLEGAL_COLUMN);\n+\n             Block temporary_block\n             {\n-                { nullable->getNestedColumnPtr(), removeNullable(arg_cond.type), arg_cond.name },\n-                block.getByPosition(arguments[1]),\n-                block.getByPosition(arguments[2]),\n-                block.getByPosition(result)\n+                { new_cond_column, removeNullable(arg_cond.type), arg_cond.name },\n+                column1,\n+                column2,\n+                result_column\n             };\n \n             executeImpl(temporary_block, {0, 1, 2}, 3, temporary_block.rows());\n \n-            block.getByPosition(result).column = std::move(temporary_block.getByPosition(3).column);\n+            result_column.column = std::move(temporary_block.getByPosition(3).column);\n             return true;\n         }\n \n@@ -916,7 +975,7 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n \n     void executeImpl(Block & block, const ColumnNumbers & arguments, size_t result, size_t input_rows_count) override\n     {\n-        if (executeForNullableCondition(block, arguments, result, input_rows_count)\n+        if (executeForConstAndNullableCondition(block, arguments, result, input_rows_count)\n             || executeForNullThenElse(block, arguments, result, input_rows_count)\n             || executeForNullableThenElse(block, arguments, result, input_rows_count))\n             return;\n@@ -964,10 +1023,7 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n             using T0 = typename Types::LeftType;\n             using T1 = typename Types::RightType;\n \n-            if constexpr (IsDecimalNumber<T0> == IsDecimalNumber<T1>)\n-                return executeTyped<T0, T1>(cond_col, block, arguments, result, input_rows_count);\n-            else\n-                throw Exception(\"Conditional function with Decimal and non Decimal\", ErrorCodes::NOT_IMPLEMENTED);\n+            return executeTyped<T0, T1>(cond_col, block, arguments, result, input_rows_count);\n         };\n \n         TypeIndex left_id = arg_then.type->getTypeId();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00735_conditional.reference b/tests/queries/0_stateless/00735_conditional.reference\nindex a82aefaeadd5..e0db75a10446 100644\n--- a/tests/queries/0_stateless/00735_conditional.reference\n+++ b/tests/queries/0_stateless/00735_conditional.reference\n@@ -8,6 +8,9 @@ value vs value\n 0\t1\t1\tInt8\tUInt32\tInt64\n 0\t1\t1\tInt8\tFloat32\tFloat32\n 0\t1\t1\tInt8\tFloat64\tFloat64\n+0\t1\t1\tInt8\tDecimal(9, 0)\tDecimal(9, 0)\n+0\t1\t1\tInt8\tDecimal(18, 0)\tDecimal(18, 0)\n+0\t1\t1\tInt8\tDecimal(38, 0)\tDecimal(38, 0)\n 0\t1\t1\tInt16\tInt8\tInt16\n 0\t1\t1\tInt16\tInt16\tInt16\n 0\t1\t1\tInt16\tInt32\tInt32\n@@ -17,6 +20,9 @@ value vs value\n 0\t1\t1\tInt16\tUInt32\tInt64\n 0\t1\t1\tInt16\tFloat32\tFloat32\n 0\t1\t1\tInt16\tFloat64\tFloat64\n+0\t1\t1\tInt16\tDecimal(9, 0)\tDecimal(9, 0)\n+0\t1\t1\tInt16\tDecimal(18, 0)\tDecimal(18, 0)\n+0\t1\t1\tInt16\tDecimal(38, 0)\tDecimal(38, 0)\n 0\t1\t1\tInt32\tInt8\tInt32\n 0\t1\t1\tInt32\tInt16\tInt32\n 0\t1\t1\tInt32\tInt32\tInt32\n@@ -26,6 +32,9 @@ value vs value\n 0\t1\t1\tInt32\tUInt32\tInt64\n 0\t1\t1\tInt32\tFloat32\tFloat64\n 0\t1\t1\tInt32\tFloat64\tFloat64\n+0\t1\t1\tInt32\tDecimal(9, 0)\tDecimal(9, 0)\n+0\t1\t1\tInt32\tDecimal(18, 0)\tDecimal(18, 0)\n+0\t1\t1\tInt32\tDecimal(38, 0)\tDecimal(38, 0)\n 0\t1\t1\tInt64\tInt8\tInt64\n 0\t1\t1\tInt64\tInt16\tInt64\n 0\t1\t1\tInt64\tInt32\tInt64\n@@ -33,6 +42,8 @@ value vs value\n 0\t1\t1\tInt64\tUInt8\tInt64\n 0\t1\t1\tInt64\tUInt16\tInt64\n 0\t1\t1\tInt64\tUInt32\tInt64\n+0\t1\t1\tInt64\tDecimal(18, 0)\tDecimal(18, 0)\n+0\t1\t1\tInt64\tDecimal(38, 0)\tDecimal(38, 0)\n 0\t1\t1\tUInt8\tInt8\tInt16\n 0\t1\t1\tUInt8\tInt16\tInt16\n 0\t1\t1\tUInt8\tInt32\tInt32\n@@ -43,6 +54,9 @@ value vs value\n 0\t1\t1\tUInt8\tUInt64\tUInt64\n 0\t1\t1\tUInt8\tFloat32\tFloat32\n 0\t1\t1\tUInt8\tFloat64\tFloat64\n+0\t1\t1\tUInt8\tDecimal(9, 0)\tDecimal(9, 0)\n+0\t1\t1\tUInt8\tDecimal(18, 0)\tDecimal(18, 0)\n+0\t1\t1\tUInt8\tDecimal(38, 0)\tDecimal(38, 0)\n 0\t1\t1\tUInt16\tInt8\tInt32\n 0\t1\t1\tUInt16\tInt16\tInt32\n 0\t1\t1\tUInt16\tInt32\tInt32\n@@ -53,6 +67,9 @@ value vs value\n 0\t1\t1\tUInt16\tUInt64\tUInt64\n 0\t1\t1\tUInt16\tFloat32\tFloat32\n 0\t1\t1\tUInt16\tFloat64\tFloat64\n+0\t1\t1\tUInt16\tDecimal(9, 0)\tDecimal(9, 0)\n+0\t1\t1\tUInt16\tDecimal(18, 0)\tDecimal(18, 0)\n+0\t1\t1\tUInt16\tDecimal(38, 0)\tDecimal(38, 0)\n 0\t1\t1\tUInt32\tInt8\tInt64\n 0\t1\t1\tUInt32\tInt16\tInt64\n 0\t1\t1\tUInt32\tInt32\tInt64\n@@ -63,10 +80,13 @@ value vs value\n 0\t1\t1\tUInt32\tUInt64\tUInt64\n 0\t1\t1\tUInt32\tFloat32\tFloat64\n 0\t1\t1\tUInt32\tFloat64\tFloat64\n+0\t1\t1\tUInt32\tDecimal(18, 0)\tDecimal(18, 0)\n+0\t1\t1\tUInt32\tDecimal(38, 0)\tDecimal(38, 0)\n 0\t1\t1\tUInt64\tUInt8\tUInt64\n 0\t1\t1\tUInt64\tUInt16\tUInt64\n 0\t1\t1\tUInt64\tUInt32\tUInt64\n 0\t1\t1\tUInt64\tUInt64\tUInt64\n+0\t1\t1\tUInt64\tDecimal(38, 0)\tDecimal(38, 0)\n 0000-00-00\t1970-01-02\t1970-01-02\tDate\tDate\tDate\n 2000-01-01\t2000-01-01 00:00:01\t2000-01-01 00:00:01\tDate\tDateTime(\\'Europe/Moscow\\')\tDateTime\n 2000-01-01 00:00:00\t2000-01-02\t2000-01-02 00:00:00\tDateTime(\\'Europe/Moscow\\')\tDate\tDateTime\ndiff --git a/tests/queries/0_stateless/00735_conditional.sql b/tests/queries/0_stateless/00735_conditional.sql\nindex ce49c26ca3d1..5e99a0f501f3 100644\n--- a/tests/queries/0_stateless/00735_conditional.sql\n+++ b/tests/queries/0_stateless/00735_conditional.sql\n@@ -15,9 +15,9 @@ SELECT toInt8(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x),\n SELECT toInt8(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT toInt8(0) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT toInt8(0) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT toInt8(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toInt8(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toInt8(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT toInt8(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toInt8(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toInt8(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n \n SELECT toInt16(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT toInt16(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -32,9 +32,9 @@ SELECT toInt16(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x)\n SELECT toInt16(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT toInt16(0) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT toInt16(0) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT toInt16(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toInt16(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toInt16(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT toInt16(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toInt16(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toInt16(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n \n SELECT toInt32(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT toInt32(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -49,9 +49,9 @@ SELECT toInt32(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x)\n SELECT toInt32(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT toInt32(0) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT toInt32(0) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT toInt32(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toInt32(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toInt32(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT toInt32(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toInt32(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toInt32(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n \n SELECT toInt64(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT toInt64(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -66,9 +66,9 @@ SELECT toInt64(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x)\n SELECT toInt64(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT toInt64(0) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT toInt64(0) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT toInt64(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toInt64(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toInt64(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT toInt64(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT toInt64(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toInt64(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n \n SELECT toUInt8(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT toUInt8(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -83,9 +83,9 @@ SELECT toUInt8(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x)\n SELECT toUInt8(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT toUInt8(0) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT toUInt8(0) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT toUInt8(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toUInt8(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toUInt8(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT toUInt8(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toUInt8(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toUInt8(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n \n SELECT toUInt16(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT toUInt16(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -100,9 +100,9 @@ SELECT toUInt16(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x\n SELECT toUInt16(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT toUInt16(0) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT toUInt16(0) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT toUInt16(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toUInt16(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toUInt16(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT toUInt16(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toUInt16(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toUInt16(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n \n SELECT toUInt32(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT toUInt32(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -117,9 +117,9 @@ SELECT toUInt32(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x\n SELECT toUInt32(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT toUInt32(0) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT toUInt32(0) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT toUInt32(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toUInt32(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toUInt32(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT toUInt32(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT toUInt32(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n+SELECT toUInt32(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n \n SELECT toUInt64(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT toUInt64(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n@@ -134,9 +134,9 @@ SELECT toUInt64(0) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x\n SELECT toUInt64(0) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT toUInt64(0) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT toUInt64(0) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT toUInt64(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toUInt64(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT toUInt64(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT toUInt64(0) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT toUInt64(0) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT toUInt64(0) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n \n SELECT toDate(0) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT toDate(0) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n@@ -204,9 +204,9 @@ SELECT materialize(toInt8(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z, t\n SELECT materialize(toInt8(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT materialize(toInt8(0)) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT materialize(toInt8(0)) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT materialize(toInt8(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toInt8(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toInt8(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT materialize(toInt8(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toInt8(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toInt8(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n \n SELECT materialize(toInt16(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT materialize(toInt16(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -221,9 +221,9 @@ SELECT materialize(toInt16(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z,\n SELECT materialize(toInt16(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT materialize(toInt16(0)) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT materialize(toInt16(0)) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT materialize(toInt16(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toInt16(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toInt16(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT materialize(toInt16(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toInt16(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toInt16(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n \n SELECT materialize(toInt32(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT materialize(toInt32(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -238,9 +238,9 @@ SELECT materialize(toInt32(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z,\n SELECT materialize(toInt32(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT materialize(toInt32(0)) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT materialize(toInt32(0)) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT materialize(toInt32(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toInt32(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toInt32(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT materialize(toInt32(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toInt32(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toInt32(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n \n SELECT materialize(toInt64(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT materialize(toInt64(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -255,9 +255,9 @@ SELECT materialize(toInt64(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z,\n SELECT materialize(toInt64(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT materialize(toInt64(0)) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT materialize(toInt64(0)) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT materialize(toInt64(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toInt64(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toInt64(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT materialize(toInt64(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toInt64(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toInt64(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n \n SELECT materialize(toUInt8(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT materialize(toUInt8(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -272,9 +272,9 @@ SELECT materialize(toUInt8(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z,\n SELECT materialize(toUInt8(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT materialize(toUInt8(0)) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT materialize(toUInt8(0)) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT materialize(toUInt8(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toUInt8(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toUInt8(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT materialize(toUInt8(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toUInt8(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toUInt8(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n \n SELECT materialize(toUInt16(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT materialize(toUInt16(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -289,9 +289,9 @@ SELECT materialize(toUInt16(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z,\n SELECT materialize(toUInt16(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT materialize(toUInt16(0)) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT materialize(toUInt16(0)) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT materialize(toUInt16(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toUInt16(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toUInt16(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT materialize(toUInt16(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toUInt16(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toUInt16(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n \n SELECT materialize(toUInt32(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n SELECT materialize(toUInt32(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z);\n@@ -306,9 +306,9 @@ SELECT materialize(toUInt32(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z,\n SELECT materialize(toUInt32(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT materialize(toUInt32(0)) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT materialize(toUInt32(0)) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT materialize(toUInt32(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toUInt32(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toUInt32(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT materialize(toUInt32(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toUInt32(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toUInt32(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n \n SELECT materialize(toUInt64(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT materialize(toUInt64(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n@@ -323,9 +323,9 @@ SELECT materialize(toUInt64(0)) AS x, toFloat64(1) AS y, ((x > y) ? x : y) AS z,\n SELECT materialize(toUInt64(0)) AS x, toDate(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT materialize(toUInt64(0)) AS x, toDateTime(1, 'Europe/Moscow') AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n SELECT materialize(toUInt64(0)) AS x, toUUID(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 386 }\n-SELECT materialize(toUInt64(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toUInt64(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n-SELECT materialize(toUInt64(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 48 }\n+SELECT materialize(toUInt64(0)) AS x, toDecimal32(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toUInt64(0)) AS x, toDecimal64(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n+SELECT materialize(toUInt64(0)) AS x, toDecimal128(1, 0) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n \n SELECT materialize(toDate(0)) AS x, toInt8(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\n SELECT materialize(toDate(0)) AS x, toInt16(1) AS y, ((x > y) ? x : y) AS z, toTypeName(x), toTypeName(y), toTypeName(z); -- { serverError 43 }\ndiff --git a/tests/queries/0_stateless/01323_if_with_nulls.reference b/tests/queries/0_stateless/01323_if_with_nulls.reference\nnew file mode 100644\nindex 000000000000..6bf2d206e0b6\n--- /dev/null\n+++ b/tests/queries/0_stateless/01323_if_with_nulls.reference\n@@ -0,0 +1,20 @@\n+\\N\tNullable(UInt8)\n+0\tNullable(UInt8)\n+\\N\tNullable(UInt8)\n+0\tNullable(UInt8)\n+0\tok\n+\\N\tok\n+0\tok\n+\\N\tok\n+ok\n+ok\n+ok\n+ok\n+ok\n+ok\n+ok\n+Nullable(UInt8)\t\\N\t1\tok\tok\tok\n+Nullable(UInt8)\t\\N\t1\tok\tok\tok\n+Nullable(UInt8)\t\\N\t1\tok\tok\tok\n+Nullable(UInt8)\t\\N\t1\tok\tok\tok\n+\\N\t1\tNullable(Int8)\t\\N\tok\ndiff --git a/tests/queries/0_stateless/01323_if_with_nulls.sql b/tests/queries/0_stateless/01323_if_with_nulls.sql\nnew file mode 100644\nindex 000000000000..f2cd943988f4\n--- /dev/null\n+++ b/tests/queries/0_stateless/01323_if_with_nulls.sql\n@@ -0,0 +1,38 @@\n+SELECT if(1 = 0, toNullable(toUInt8(0)), NULL) AS x, toTypeName(x);\n+SELECT if(1 = 1, toNullable(toUInt8(0)), NULL) AS x, toTypeName(x);\n+SELECT if(1 = 1, NULL, toNullable(toUInt8(0))) AS x, toTypeName(x);\n+SELECT if(1 = 0, NULL, toNullable(toUInt8(0))) AS x, toTypeName(x);\n+\n+SELECT if(toUInt8(0), NULL, toNullable(toUInt8(0))) AS x, if(x = 0, 'ok', 'fail');\n+SELECT if(toUInt8(1), NULL, toNullable(toUInt8(0))) AS x, if(x = 0, 'fail', 'ok');\n+SELECT if(toUInt8(1), toNullable(toUInt8(0)), NULL) AS x, if(x = 0, 'ok', 'fail');\n+SELECT if(toUInt8(0), toNullable(toUInt8(0)), NULL) AS x, if(x = 0, 'fail', 'ok');\n+\n+SELECT if(x = 0, 'ok', 'fail') FROM (SELECT toNullable(toUInt8(0)) AS x);\n+SELECT if(x = 0, 'fail', 'ok') FROM (SELECT CAST(NULL, 'Nullable(UInt8)') AS x);\n+SELECT if(x = 0, 'fail', 'ok') FROM (SELECT materialize(CAST(NULL, 'Nullable(UInt8)')) AS x);\n+\n+SELECT if(x = 0, 'ok', 'fail') FROM (SELECT if(toUInt8(1), toNullable(toUInt8(0)), NULL) AS x);\n+SELECT if(x = 0, 'fail', 'ok') FROM (SELECT if(toUInt8(0), toNullable(toUInt8(0)), NULL) AS x);\n+\n+SELECT if(x = 0, 'ok', 'fail') FROM (SELECT if(toUInt8(0), NULL, toNullable(toUInt8(0))) AS x);\n+SELECT if(x = 0, 'fail', 'ok') FROM (SELECT if(toUInt8(1), NULL, toNullable(toUInt8(0))) AS x);\n+\n+SELECT toTypeName(x), x, isNull(x), if(x = 0, 'fail', 'ok'), if(x = 1, 'fail', 'ok'), if(x >= 0, 'fail', 'ok')\n+FROM (SELECT CAST(NULL, 'Nullable(UInt8)') AS x);\n+\n+SELECT toTypeName(x), x, isNull(x), if(x = 0, 'fail', 'ok'), if(x = 1, 'fail', 'ok'), if(x >= 0, 'fail', 'ok')\n+FROM (SELECT materialize(CAST(NULL, 'Nullable(UInt8)')) AS x);\n+\n+SELECT toTypeName(x), x, isNull(x), if(x = 0, 'fail', 'ok'), if(x = 1, 'fail', 'ok'), if(x >= 0, 'fail', 'ok')\n+FROM (SELECT if(1 = 0, toNullable(toUInt8(0)), NULL) AS x);\n+\n+SELECT toTypeName(x), x, isNull(x), if(x = 0, 'fail', 'ok'), if(x = 1, 'fail', 'ok'), if(x >= 0, 'fail', 'ok')\n+FROM (SELECT materialize(if(1 = 0, toNullable(toUInt8(0)), NULL)) AS x);\n+\n+SET join_use_nulls = 1;\n+\n+SELECT b_num, isNull(b_num), toTypeName(b_num), b_num = 0, if(b_num = 0, 'fail', 'ok')\n+FROM (SELECT 1 k, toInt8(1) a_num) AS x\n+LEFT JOIN (SELECT 2 k, toInt8(1) b_num) AS y\n+USING (k);\n",
  "problem_statement": "Wrong function results on typed Nullable. Inconsistent with results on Nullable(Nothing)\n**Describe the bug or unexpected behaviour**\r\nClickhouse version 19.14.7.15\r\nset  join_use_nulls = 1 \r\nsql\r\n```\r\nSELECT\r\n    k,\r\n    b_num,\r\n    isNull(b_num),\r\n    if(b_num = 0, -1, b_num),\r\n    if(isNull(b_num), -1, b_num),\r\n    b_str,\r\n    isNull(b_str),\r\n    empty(b_str),\r\n    if(isNull(b_str), 'Others', b_str),\r\n    if(empty(b_str), 'Others', b_str)\r\nFROM\r\n(\r\n    SELECT\r\n        number AS k,\r\n        toInt8(number) AS a_num,\r\n        toString(number) AS a_str\r\n    FROM system.numbers\r\n    LIMIT 10\r\n)\r\nLEFT JOIN\r\n(\r\n    SELECT\r\n        number AS k,\r\n        toInt8(number) AS b_num,\r\n        toString(number) AS b_str\r\n    FROM system.numbers\r\n    LIMIT 5, 10\r\n) USING (k)\r\nORDER BY k ASC\r\n```\r\n\r\nReturned columns\r\n` if(equals(b_num, 0), -1, b_num)`\r\n and \r\n`if(empty(b_str), 'Others', b_str)`\r\n  are not correct.\r\n\r\nReturned result detail\r\n```\r\n\u250c\u2500k\u2500\u252c\u2500b_num\u2500\u252c\u2500isNull(b_num)\u2500\u252c\u2500if(equals(b_num, 0), -1, b_num)\u2500\u252c\u2500if(isNull(b_num), -1, b_num)\u2500\u252c\u2500b_str\u2500\u252c\u2500isNull(b_str)\u2500\u252c\u2500empty(b_str)\u2500\u252c\u2500if(isNull(b_str), 'Others', b_str)\u2500\u252c\u2500if(empty(b_str), 'Others', b_str)\u2500\u2510\r\n\u2502 0 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502             1 \u2502                              -1 \u2502                           -1 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502             1 \u2502         \u1d3a\u1d41\u1d38\u1d38 \u2502 Others                             \u2502 Others                            \u2502\r\n\u2502 1 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502             1 \u2502                              -1 \u2502                           -1 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502             1 \u2502         \u1d3a\u1d41\u1d38\u1d38 \u2502 Others                             \u2502 Others                            \u2502\r\n\u2502 2 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502             1 \u2502                              -1 \u2502                           -1 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502             1 \u2502         \u1d3a\u1d41\u1d38\u1d38 \u2502 Others                             \u2502 Others                            \u2502\r\n\u2502 3 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502             1 \u2502                              -1 \u2502                           -1 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502             1 \u2502         \u1d3a\u1d41\u1d38\u1d38 \u2502 Others                             \u2502 Others                            \u2502\r\n\u2502 4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502             1 \u2502                              -1 \u2502                           -1 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502             1 \u2502         \u1d3a\u1d41\u1d38\u1d38 \u2502 Others                             \u2502 Others                            \u2502\r\n\u2502 5 \u2502     5 \u2502             0 \u2502                               5 \u2502                            5 \u2502 5     \u2502             0 \u2502            0 \u2502 5                                  \u2502 5                                 \u2502\r\n\u2502 6 \u2502     6 \u2502             0 \u2502                               6 \u2502                            6 \u2502 6     \u2502             0 \u2502            0 \u2502 6                                  \u2502 6                                 \u2502\r\n\u2502 7 \u2502     7 \u2502             0 \u2502                               7 \u2502                            7 \u2502 7     \u2502             0 \u2502            0 \u2502 7                                  \u2502 7                                 \u2502\r\n\u2502 8 \u2502     8 \u2502             0 \u2502                               8 \u2502                            8 \u2502 8     \u2502             0 \u2502            0 \u2502 8                                  \u2502 8                                 \u2502\r\n\u2502 9 \u2502     9 \u2502             0 \u2502                               9 \u2502                            9 \u2502 9     \u2502             0 \u2502            0 \u2502 9                                  \u2502 9                                 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n ```\n",
  "hints_text": "Any updates?\nI've looked at the sample and do not understand what do you want from JOIN here. The same result for `if(empty(), ...)` you could get without join:\r\n\r\n```\r\nselect if(1 = 0, toNullable('x'), NULL) as b_str, empty(b_str), if(empty(b_str), 'other', b_str);\r\n```\r\n\r\n```\r\n\u250c\u2500b_str\u2500\u252c\u2500empty(if(equals(1, 0), toNullable('x'), NULL))\u2500\u252c\u2500if(empty(if(equals(1, 0), toNullable('x'), NULL)), 'other', if(equals(1, 0), toNullable('x'), NULL))\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502                                           \u1d3a\u1d41\u1d38\u1d38 \u2502 other                                                                                                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nAm I right that you expect the `empty()` function returns false for NULLs? Or is there something more in this issue?\nWhen argument is `Null`\r\n\r\n```\r\nselect if(b_num = 0, -1, b_num), \r\n           if(empty(b_str), 'Others', b_str)  \r\nfrom (select Null b_num, Null  b_str)\r\n\r\n\u250c\u2500if(equals(b_num, 0), -1, b_num)\u2500\u252c\u2500if(empty(b_str), 'Others', b_str)\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38                            \u2502 \u1d3a\u1d41\u1d38\u1d38                              \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nJoin produced `Null` (SET join_use_nulls = 1 )\r\n\r\n<img width=\"1446\" alt=\"Screen Shot 2020-06-05 at 10 46 36 AM\" src=\"https://user-images.githubusercontent.com/19737682/83883947-92141780-a71a-11ea-8b2e-29e8bdfc70df.png\">\r\n\r\n\r\n\r\n\n@den-crane What's the difference with my sample above that does not contain join and returns `other` instead of `Null`?\r\n\r\nYour sample with subselect is not relevant cause `b_num` is `Nullable(Nothing)`\r\n```\r\nSELECT \r\n    NULL AS b_num, \r\n    toTypeName(b_num)\r\n\r\n\u250c\u2500b_num\u2500\u252c\u2500toTypeName(NULL)\u2500\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 Nullable(Nothing) \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n```\r\nSELECT \r\n    if(b_num = 0, -1, b_num), \r\n    if(empty(b_str), 'Others', b_str)\r\nFROM \r\n(\r\n    SELECT \r\n        if(1 = 0, toNullable(toInt32(0)), NULL) AS b_num, \r\n        if(1 = 0, toNullable('x'), NULL) AS b_str\r\n)\r\n\r\n\u250c\u2500if(equals(b_num, 0), -1, b_num)\u2500\u252c\u2500if(empty(b_str), 'Others', b_str)\u2500\u2510\r\n\u2502                              -1 \u2502 Others                            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nargument (b_num) Null then expected result false\r\n\r\n`if null then false`\r\n\r\n```\r\nSELECT\r\n    CAST(NULL, 'Nullable(UInt8)') AS b_num,\r\n    if(b_num, 'true', 'false')\r\n\r\n\u250c\u2500b_num\u2500\u252c\u2500if(CAST(NULL, 'Nullable(UInt8)'), 'true', 'false')\u2500\u2510\r\n\u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 false                                              \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\n\r\nSELECT\r\n    toTypeName(b_num),\r\n    b_num,\r\n    if(b_num = 0, 'true', 'false')\r\nFROM\r\n(\r\n    SELECT materialize(CAST(NULL, 'Nullable(Int8)')) AS b_num\r\n)\r\n\r\n\u250c\u2500toTypeName(b_num)\u2500\u252c\u2500b_num\u2500\u252c\u2500if(equals(b_num, 0), 'true', 'false')\u2500\u2510\r\n\u2502 Nullable(Int8)    \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 false                                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nBUT\r\n\r\n```\r\nSELECT\r\n    b_num,\r\n    isNull(b_num),\r\n    toTypeName(b_num),\r\n    b_num = 0,\r\n    if(b_num = 0, 'true', 'false')\r\nFROM\r\n(SELECT 1 k, toInt8(1) a_num) AS x\r\nLEFT JOIN\r\n(SELECT 2 k, toInt8(1) b_num) AS y USING (k)\r\n\r\n\u250c\u2500b_num\u2500\u252c\u2500isNull(b_num)\u2500\u252c\u2500toTypeName(b_num)\u2500\u252c\u2500equals(b_num, 0)\u2500\u252c\u2500if(equals(b_num, 0), 'true', 'false')\u2500\u2510\r\n\u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502             1 \u2502 Nullable(Int8)    \u2502             \u1d3a\u1d41\u1d38\u1d38 \u2502 true                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n\r\n\r\n```\r\nmysql> SELECT\r\n         b_num,\r\n         isNull(b_num),\r\n         if(b_num = 0, 'true', 'false')\r\n    FROM\r\n     (SELECT 1 k, 1 a_num) AS x\r\n     LEFT JOIN\r\n     (SELECT 2 k, 1 b_num) AS y USING (k)\r\n     ;\r\n+-------+---------------+--------------------------------+\r\n| b_num | isNull(b_num) | if(b_num = 0, 'true', 'false') |\r\n+-------+---------------+--------------------------------+\r\n|  NULL |             1 | false                          |\r\n+-------+---------------+--------------------------------+\r\n```\nOK. But problem is not in JOIN\r\n```\r\nSELECT \r\n    toTypeName(b_num), \r\n    b_num, \r\n    if(b_num = 0, 'true', 'false')\r\nFROM \r\n(\r\n    SELECT if(1 = 0, toNullable(toInt8(0)), NULL) AS b_num\r\n)\r\n\r\n\u250c\u2500toTypeName(b_num)\u2500\u252c\u2500b_num\u2500\u252c\u2500if(equals(b_num, 0), 'true', 'false')\u2500\u2510\r\n\u2502 Nullable(Int8)    \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 true                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n```\r\nSELECT \r\n    toTypeName(b_num), \r\n    b_num, \r\n    if(b_num = 1, 'true', 'false')\r\nFROM \r\n(\r\n    SELECT if(1 = 0, toNullable(toInt8(0)), NULL) AS b_num\r\n)\r\n\r\n\u250c\u2500toTypeName(b_num)\u2500\u252c\u2500b_num\u2500\u252c\u2500if(equals(b_num, 1), 'true', 'false')\u2500\u2510\r\n\u2502 Nullable(Int8)    \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 false                                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```",
  "created_at": "2020-06-19T18:53:59Z",
  "modified_files": [
    "src/Columns/ColumnNullable.cpp",
    "src/Columns/ColumnVector.cpp",
    "src/Columns/ColumnVector.h",
    "src/Functions/if.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00735_conditional.reference",
    "tests/queries/0_stateless/00735_conditional.sql",
    "b/tests/queries/0_stateless/01323_if_with_nulls.reference",
    "b/tests/queries/0_stateless/01323_if_with_nulls.sql"
  ]
}