diff --git a/docs/en/sql-reference/functions/math-functions.md b/docs/en/sql-reference/functions/math-functions.md
index 7f50fa933b6a..12098efc6350 100644
--- a/docs/en/sql-reference/functions/math-functions.md
+++ b/docs/en/sql-reference/functions/math-functions.md
@@ -415,8 +415,8 @@ Alias: `power(x, y)`
 
 **Arguments**
 
-- `x` - [(U)Int8/16/32/64](../data-types/int-uint.md) or [Float*](../data-types/float.md)
-- `y` - [(U)Int8/16/32/64](../data-types/int-uint.md) or [Float*](../data-types/float.md)
+- `x` - [(U)Int8/16/32/64](../data-types/int-uint.md), [Float*](../data-types/float.md) or [Decimal*](../data-types/decimal.md)
+- `y` - [(U)Int8/16/32/64](../data-types/int-uint.md), [Float*](../data-types/float.md) or [Decimal*](../data-types/decimal.md)
 
 **Returned value**
 
@@ -635,8 +635,8 @@ atan2(y, x)
 
 **Arguments**
 
-- `y` — y-coordinate of the point through which the ray passes. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md).
-- `x` — x-coordinate of the point through which the ray passes. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md).
+- `y` — y-coordinate of the point through which the ray passes. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md) or [Decimal*](../data-types/decimal.md).
+- `x` — x-coordinate of the point through which the ray passes. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md) or [Decimal*](../data-types/decimal.md).
 
 **Returned value**
 
@@ -670,8 +670,8 @@ hypot(x, y)
 
 **Arguments**
 
-- `x` — The first cathetus of a right-angle triangle. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md).
-- `y` — The second cathetus of a right-angle triangle. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md).
+- `x` — The first cathetus of a right-angle triangle. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md) or [Decimal*](../data-types/decimal.md).
+- `y` — The second cathetus of a right-angle triangle. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md) or [Decimal*](../data-types/decimal.md).
 
 **Returned value**
 
@@ -838,6 +838,7 @@ degrees(x)
 
 **Arguments**
 
+- `x` — Input in radians. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md) or [Decimal*](../data-types/decimal.md).
 - `x` — Input in radians. [(U)Int*](../data-types/int-uint.md), [Float*](../data-types/float.md) or [Decimal*](../data-types/decimal.md).  
 
 **Returned value**
diff --git a/docs/ru/sql-reference/functions/math-functions.md b/docs/ru/sql-reference/functions/math-functions.md
index 367451a5b324..caacbb216bfb 100644
--- a/docs/ru/sql-reference/functions/math-functions.md
+++ b/docs/ru/sql-reference/functions/math-functions.md
@@ -304,8 +304,8 @@ atan2(y, x)
 
 **Аргументы**
 
--   `y` — координата y точки, в которую проведена линия. [Float64](../../sql-reference/data-types/float.md#float32-float64).
--   `x` — координата х точки, в которую проведена линия. [Float64](../../sql-reference/data-types/float.md#float32-float64).
+-   `y` — координата y точки, в которую проведена линия. [Float64](../../sql-reference/data-types/float.md#float32-float64) или [Decimal](../../sql-reference/data-types/decimal.md).
+-   `x` — координата х точки, в которую проведена линия. [Float64](../../sql-reference/data-types/float.md#float32-float64) или [Decimal](../../sql-reference/data-types/decimal.md).
 
 **Возвращаемое значение**
 
@@ -341,8 +341,8 @@ hypot(x, y)
 
 **Аргументы**
 
--   `x` — первый катет прямоугольного треугольника. [Float64](../../sql-reference/data-types/float.md#float32-float64).
--   `y` — второй катет прямоугольного треугольника. [Float64](../../sql-reference/data-types/float.md#float32-float64).
+-   `x` — первый катет прямоугольного треугольника. [Float64](../../sql-reference/data-types/float.md#float32-float64) или [Decimal](../../sql-reference/data-types/decimal.md).
+-   `y` — второй катет прямоугольного треугольника. [Float64](../../sql-reference/data-types/float.md#float32-float64) или [Decimal](../../sql-reference/data-types/decimal.md).
 
 **Возвращаемое значение**
 
diff --git a/src/Functions/FunctionMathBinaryFloat64.h b/src/Functions/FunctionMathBinaryFloat64.h
index d17e9cf3358c..1b75ee688f48 100644
--- a/src/Functions/FunctionMathBinaryFloat64.h
+++ b/src/Functions/FunctionMathBinaryFloat64.h
@@ -8,6 +8,7 @@
 #include <Columns/ColumnConst.h>
 #include <Functions/IFunction.h>
 #include <Functions/FunctionHelpers.h>
+#include <Interpreters/castColumn.h>
 
 #include "config.h"
 
@@ -41,7 +42,7 @@ class FunctionMathBinaryFloat64 : public IFunction
     {
         const auto check_argument_type = [this] (const IDataType * arg)
         {
-            if (!isNativeNumber(arg))
+            if (!isNativeNumber(arg) && !isDecimal(arg))
                 throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, "Illegal type {} of argument of function {}",
                     arg->getName(), getName());
         };
@@ -53,7 +54,7 @@ class FunctionMathBinaryFloat64 : public IFunction
     }
 
     template <typename LeftType, typename RightType>
-    ColumnPtr executeTyped(const ColumnConst * left_arg, const IColumn * right_arg) const
+    static ColumnPtr executeTyped(const ColumnConst * left_arg, const IColumn * right_arg)
     {
         if (const auto right_arg_typed = checkAndGetColumn<ColumnVector<RightType>>(right_arg))
         {
@@ -91,7 +92,7 @@ class FunctionMathBinaryFloat64 : public IFunction
     }
 
     template <typename LeftType, typename RightType>
-    ColumnPtr executeTyped(const ColumnVector<LeftType> * left_arg, const IColumn * right_arg) const
+    static ColumnPtr executeTyped(const ColumnVector<LeftType> * left_arg, const IColumn * right_arg)
     {
         if (const auto right_arg_typed = checkAndGetColumn<ColumnVector<RightType>>(right_arg))
         {
@@ -168,6 +169,25 @@ class FunctionMathBinaryFloat64 : public IFunction
     {
         const ColumnWithTypeAndName & col_left = arguments[0];
         const ColumnWithTypeAndName & col_right = arguments[1];
+
+        ColumnPtr col_ptr_left = col_left.column;
+        ColumnPtr col_ptr_right = col_right.column;
+
+        TypeIndex left_index = col_left.type->getTypeId();
+        TypeIndex right_index = col_right.type->getTypeId();
+
+        if (WhichDataType(col_left.type).isDecimal())
+        {
+            col_ptr_left = castColumn(col_left, std::make_shared<DataTypeFloat64>());
+            left_index = TypeIndex::Float64;
+        }
+
+        if (WhichDataType(col_right.type).isDecimal())
+        {
+            col_ptr_right = castColumn(col_right, std::make_shared<DataTypeFloat64>());
+            right_index = TypeIndex::Float64;
+        }
+
         ColumnPtr res;
 
         auto call = [&](const auto & types) -> bool
@@ -177,8 +197,8 @@ class FunctionMathBinaryFloat64 : public IFunction
             using RightType = typename Types::RightType;
             using ColVecLeft = ColumnVector<LeftType>;
 
-            const IColumn * left_arg = col_left.column.get();
-            const IColumn * right_arg = col_right.column.get();
+            const IColumn * left_arg = col_ptr_left.get();
+            const IColumn * right_arg = col_ptr_right.get();
 
             if (const auto left_arg_typed = checkAndGetColumn<ColVecLeft>(left_arg))
             {
@@ -200,9 +220,6 @@ class FunctionMathBinaryFloat64 : public IFunction
             return false;
         };
 
-        TypeIndex left_index = col_left.type->getTypeId();
-        TypeIndex right_index = col_right.type->getTypeId();
-
         if (!callOnBasicTypes<true, true, false, false>(left_index, right_index, call))
             throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Illegal column {} of argument of function {}",
                 col_left.column->getName(), getName());
