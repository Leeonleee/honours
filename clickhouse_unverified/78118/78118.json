{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 78118,
  "instance_id": "ClickHouse__ClickHouse-78118",
  "issue_numbers": [
    "74547",
    "77894"
  ],
  "base_commit": "62f6aa7216c82a74d318bcb24c0b22d5920186bd",
  "patch": "diff --git a/contrib/usearch b/contrib/usearch\nindex 9dd807b83574..72d80432e3e9 160000\n--- a/contrib/usearch\n+++ b/contrib/usearch\n@@ -1,1 +1,1 @@\n-Subproject commit 9dd807b83574886d3c946d3dbb9241d184a4e1d0\n+Subproject commit 72d80432e3e91cb534b2a3be9ddfeaf1eaa75cd9\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp b/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp\nindex 21e25f6c4b9a..276473d751aa 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp\n@@ -115,7 +115,7 @@ USearchIndexWithSerialization::USearchIndexWithSerialization(\n \n     auto result = USearchIndex::make(metric, config);\n     if (!result)\n-        throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not create vector similarity index. Error: {}\", String(result.error.release()));\n+        throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not create vector similarity index. Error: {}\", result.error.release());\n     swap(result.index);\n }\n \n@@ -128,7 +128,7 @@ void USearchIndexWithSerialization::serialize(WriteBuffer & ostr) const\n     };\n \n     if (auto result = Base::save_to_stream(callback); !result)\n-        throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not save vector similarity index. Error: {}\", String(result.error.release()));\n+        throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not save vector similarity index. Error: {}\", result.error.release());\n }\n \n void USearchIndexWithSerialization::deserialize(ReadBuffer & istr)\n@@ -141,10 +141,13 @@ void USearchIndexWithSerialization::deserialize(ReadBuffer & istr)\n \n     if (auto result = Base::load_from_stream(callback); !result)\n         /// See the comment in MergeTreeIndexGranuleVectorSimilarity::deserializeBinary why we throw here\n-        throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not load vector similarity index. Please drop the index and create it again. Error: {}\", String(result.error.release()));\n+        throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not load vector similarity index. Please drop the index and create it again. Error: {}\", result.error.release());\n \n-    /// Indicate the number of concurrent threads that will potentially search this specific usearch index\n-    try_reserve(limits());\n+    /// USearch pre-allocates internal data structures for at most N threads. This makes the implicit assumption that the caller (this\n+    /// class) uses at most this number of threads. The problem here is that there is no such guarantee in ClickHouse because of potential\n+    /// oversubscription. Therefore, set N as 2 * the available cores - that should be pretty safe. In the unlikely case there are still\n+    /// more threads at runtime than this limit, we patched usearch to return an error.\n+    try_reserve(unum::usearch::index_limits_t(limits().members, 2 * getNumberOfCPUCoresToUse()));\n }\n \n USearchIndexWithSerialization::Statistics USearchIndexWithSerialization::getStatistics() const\n@@ -303,7 +306,7 @@ void updateImpl(const ColumnArray * column_array, const ColumnArray::Offsets & c\n         auto result = index->add(key, &column_array_data_float_data[column_array_offsets[row - 1]]);\n         if (!result)\n         {\n-            throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not add data to vector similarity index. Error: {}\", String(result.error.release()));\n+            throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not add data to vector similarity index. Error: {}\", result.error.release());\n         }\n \n         ProfileEvents::increment(ProfileEvents::USearchAddCount);\n@@ -455,7 +458,7 @@ std::vector<UInt64> MergeTreeIndexConditionVectorSimilarity::calculateApproximat\n \n     auto search_result = index->search(parameters->reference_vector.data(), parameters->limit, USearchIndex::any_thread(), false, expansion_search);\n     if (!search_result)\n-        throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not search in vector similarity index. Error: {}\", String(search_result.error.release()));\n+        throw Exception(ErrorCodes::INCORRECT_DATA, \"Could not search in vector similarity index. Error: {}\", search_result.error.release());\n \n     std::vector<USearchIndex::vector_key_t> neighbors(search_result.size()); /// indexes of vectors which were closest to the reference vector\n     search_result.dump_to(neighbors.data());\n@@ -571,7 +574,7 @@ void vectorSimilarityIndexValidator(const IndexDescription & index, bool /* atta\n \n         unum::usearch::index_dense_config_t config(connectivity, expansion_add, expansion_search);\n         if (auto error = config.validate(); error)\n-            throw Exception(ErrorCodes::INCORRECT_DATA, \"Invalid parameters passed to vector similarity index. Error: {}\", String(error.release()));\n+            throw Exception(ErrorCodes::INCORRECT_DATA, \"Invalid parameters passed to vector similarity index. Error: {}\", error.release());\n     }\n \n     /// Check that the index is created on a single column\n",
  "test_patch": "diff --git a/tests/parallel_replicas_blacklist.txt b/tests/parallel_replicas_blacklist.txt\nindex 7b63bd90d166..f4fe759b8553 100644\n--- a/tests/parallel_replicas_blacklist.txt\n+++ b/tests/parallel_replicas_blacklist.txt\n@@ -49,13 +49,6 @@\n     Sizes of columns doesn't match\n 02861_filter_pushdown_const_bug\n \n-    https://github.com/ClickHouse/ClickHouse/issues/74547\n-    vector search segfault\n-02354_vector_search_multiple_marks\n-02354_vector_search_expansion_search\n-02354_vector_search_detach_attach\n-02354_vector_search_different_array_sizes\n-\n     https://github.com/ClickHouse/ClickHouse/issues/74711\n 03080_incorrect_join_with_merge\n \n",
  "problem_statement": "Vector index segfault with enabled parallel replicas\nTest `02354_vector_search_multiple_marks`\r\nFailed job https://s3.amazonaws.com/clickhouse-test-reports/74545/f23dd3fbb7681a51292926685bc1056bcfe5ed76/stateless_tests__release__parallelreplicas__s3_storage_.html\r\n\r\nStacktrace\r\n```\r\n2025.01.13 16:43:45.162152 [ 336665 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\r\n2025.01.13 16:43:45.162216 [ 336665 ] {} <Fatal> BaseDaemon: (version 25.1.1.3173, build id: 92E0213C58E41722CBEE0065BB1F713D95710F5E, git hash: 8518243cd0353107b3274ff8026b8bc109017444, architecture: x86_64) (from thread 203395) Received signal 11\r\n2025.01.13 16:43:45.162235 [ 336665 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\r\n2025.01.13 16:43:45.162276 [ 336665 ] {} <Fatal> BaseDaemon: Address: 0x1a430. Access: read. Address not mapped to object.\r\n2025.01.13 16:43:45.162296 [ 336665 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000e0494b5 0x00007f5afd88d520 0x0000000019077b75 0x00000000190653d2 0x00000000138d1228 0x000000001385ff8a 0x000000001385a10b 0x00000000142eb8b0 0x00000000142ea36d 0x00000000142ea168 0x00000000142f3258 0x00000000142a792d 0x00000000142c9733 0x00000000127a45bd 0x00000000127a3e9e 0x0000000012b216f7 0x0000000012b1c63c 0x0000000013de592c 0x0000000013e03219 0x000000001738ba07 0x000000001738be59 0x00000000173583bb 0x000000001735689d 0x00007f5afd8dfac3 0x00007f5afd971850\r\n2025.01.13 16:43:45.162315 [ 336665 ] {} <Fatal> BaseDaemon: ########################################\r\n2025.01.13 16:43:45.162358 [ 336665 ] {} <Fatal> BaseDaemon: (version 25.1.1.3173, build id: 92E0213C58E41722CBEE0065BB1F713D95710F5E, git hash: 8518243cd0353107b3274ff8026b8bc109017444) (from thread 203395) (query_id: a92be7ef-ec29-4f55-a545-75e842688922) (query: SELECT `__table1`.`id` AS `id`, `__table1`.`vec` AS `vec`, L2Distance(`__table1`.`vec`, _CAST([1., 0.], 'Array(Float64)')) AS `L2Distance(vec, reference_vec)` FROM `test_jli6zdwn`.`tab` AS `__table1` ORDER BY L2Distance(`__table1`.`vec`, _CAST([1., 0.], 'Array(Float64)')) ASC LIMIT _CAST(1, 'UInt64')) Received signal Segmentation fault (11)\r\n2025.01.13 16:43:45.175495 [ 336666 ] {} <Fatal> BaseDaemon: 0. ./build_docker/./src/Common/SignalHandlers.cpp:105: signalHandler(int, siginfo_t*, void*) @ 0x000000000e0494b5\r\n2025.01.13 16:43:45.175544 [ 336666 ] {} <Fatal> BaseDaemon: 1. ? @ 0x00007f5afd88d520\r\n2025.01.13 16:43:45.178353 [ 336665 ] {} <Fatal> BaseDaemon: 2.0. inlined from ./contrib/jemalloc/include/jemalloc/internal/atomic.h:83: atomic_load_p\r\n2025.01.13 16:43:45.178385 [ 336665 ] {} <Fatal> BaseDaemon: 2.1. inlined from ./contrib/jemalloc/include/jemalloc/internal/rtree.h:182: rtree_leaf_elm_bits_read\r\n2025.01.13 16:43:45.178400 [ 336665 ] {} <Fatal> BaseDaemon: 2.2. inlined from ./contrib/jemalloc/include/jemalloc/internal/rtree.h:242: rtree_leaf_elm_read\r\n2025.01.13 16:43:45.178409 [ 336665 ] {} <Fatal> BaseDaemon: 2. ./contrib/jemalloc/include/jemalloc/internal/rtree.h:446: rtree_metadata_read.llvm.15796615256168333504 @ 0x0000000019077b75\r\n2025.01.13 16:43:45.183170 [ 336665 ] {} <Fatal> BaseDaemon: 3.0. inlined from ./contrib/jemalloc/include/jemalloc/internal/emap.h:238: emap_alloc_ctx_lookup\r\n2025.01.13 16:43:45.183206 [ 336665 ] {} <Fatal> BaseDaemon: 3.1. inlined from ./build_docker/./contrib/jemalloc/src/jemalloc.c:2877: ifree\r\n2025.01.13 16:43:45.183225 [ 336665 ] {} <Fatal> BaseDaemon: 3. ./build_docker/./contrib/jemalloc/src/jemalloc.c:3014: free_default @ 0x00000000190653d2\r\n2025.01.13 16:43:45.205956 [ 336665 ] {} <Fatal> BaseDaemon: 4.0. inlined from ./contrib/jemalloc/src/jemalloc.c:3162: free\r\n2025.01.13 16:43:45.206022 [ 336665 ] {} <Fatal> BaseDaemon: 4.1. inlined from ./contrib/usearch/include/usearch/index_plugins.hpp:815: unum::usearch::aligned_allocator_gt<unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::candidate_t, 64ul>::deallocate(unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::candidate_t*, unsigned long) const\r\n2025.01.13 16:43:45.206093 [ 336666 ] {} <Fatal> BaseDaemon: 4.2. inlined from ./contrib/usearch/include/usearch/index.hpp:907: unum::usearch::sorted_buffer_gt<unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::candidate_t, std::less<unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::candidate_t>, unum::usearch::aligned_allocator_gt<unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::candidate_t, 64ul>>::reserve(unsigned long)\r\n2025.01.13 16:43:45.206147 [ 336666 ] {} <Fatal> BaseDaemon: 4.3. inlined from ./contrib/usearch/include/usearch/index.hpp:2987: unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::search_result_t unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::search<char const*&, unum::usearch::index_dense_gt<unsigned long, unsigned int>::metric_proxy_t, unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_result_t unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_<double, unum::usearch::dummy_predicate_t>(double const*, unsigned long, unum::usearch::dummy_predicate_t&&, unsigned long, bool, bool (* const&)(char const*, unsigned long, char*), unsigned long) const::'lambda'(unum::usearch::member_cref_gt<unsigned long> const&)&, unum::usearch::dummy_prefetch_t>(double&&, unsigned long, unum::usearch::dummy_predicate_t&&, unum::usearch::index_search_config_t, unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_result_t unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_<double, unum::usearch::dummy_predicate_t>(double const*, unsigned long, unum::usearch::dummy_predicate_t&&, unsigned long, bool, bool (* const&)(char const*, unsigned long, char*), unsigned long) const::'lambda'(unum::usearch::member_cref_gt<unsigned long> const&)&, unum::usearch::dummy_prefetch_t&&) const\r\n2025.01.13 16:43:45.206177 [ 336666 ] {} <Fatal> BaseDaemon: 4.4. inlined from ./contrib/usearch/include/usearch/index_dense.hpp:2061: unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_result_t unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_<double, unum::usearch::dummy_predicate_t>(double const*, unsigned long, unum::usearch::dummy_predicate_t&&, unsigned long, bool, bool (* const&)(char const*, unsigned long, char*), unsigned long) const\r\n2025.01.13 16:43:45.206189 [ 336666 ] {} <Fatal> BaseDaemon: 4.5. inlined from ./contrib/usearch/include/usearch/index_dense.hpp:770: unum::usearch::index_dense_gt<unsigned long, unsigned int>::search(double const*, unsigned long, unsigned long, bool, unsigned long) const\r\n2025.01.13 16:43:45.206273 [ 336665 ] {} <Fatal> BaseDaemon: 4.5. inlined from ./contrib/usearch/include/usearch/index_dense.hpp:770: unum::usearch::index_dense_gt<unsigned long, unsigned int>::search(double const*, unsigned long, unsigned long, bool, unsigned long) const\r\n2025.01.13 16:43:45.206302 [ 336665 ] {} <Fatal> BaseDaemon: 4. ./build_docker/./src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp:442: DB::MergeTreeIndexConditionVectorSimilarity::calculateApproximateNearestNeighbors(std::shared_ptr<DB::IMergeTreeIndexGranule>) const @ 0x00000000138d1228\r\n2025.01.13 16:43:45.240922 [ 336665 ] {} <Fatal> BaseDaemon: 5.0. inlined from ./build_docker/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1441: DB::MergeTreeDataSelectExecutor::filterMarksUsingIndex(std::shared_ptr<DB::IMergeTreeIndex const>, std::shared_ptr<DB::IMergeTreeIndexCondition>, std::shared_ptr<DB::IMergeTreeDataPart const>, DB::MarkRanges const&, DB::Settings const&, DB::MergeTreeReaderSettings const&, DB::MarkCache*, DB::UncompressedCache*, DB::SkippingIndexCache*, std::shared_ptr<Poco::Logger>)\r\n2025.01.13 16:43:45.240970 [ 336665 ] {} <Fatal> BaseDaemon: 5. ./build_docker/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:728: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool)::$_0::operator()(unsigned long) const @ 0x000000001385ff8a\r\n2025.01.13 16:43:45.263894 [ 336665 ] {} <Fatal> BaseDaemon: 6. ./build_docker/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:783: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool) @ 0x000000001385a10b\r\n2025.01.13 16:43:45.321612 [ 336665 ] {} <Fatal> BaseDaemon: 7. ./build_docker/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:1776: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::shared_ptr<DB::MergeTreeData::IMutationsSnapshot const>, std::optional<DB::VectorSearchParameters> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<Poco::Logger>, std::optional<DB::ReadFromMergeTree::Indexes>&, bool) @ 0x00000000142eb8b0\r\n2025.01.13 16:43:45.375812 [ 336666 ] {} <Fatal> BaseDaemon: 8. ./build_docker/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:1487: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, bool) const @ 0x00000000142ea36d\r\n2025.01.13 16:43:45.425168 [ 336666 ] {} <Fatal> BaseDaemon: 9. ./build_docker/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:1482: DB::ReadFromMergeTree::selectRangesToRead(bool) const @ 0x00000000142ea168\r\n2025.01.13 16:43:45.470432 [ 336666 ] {} <Fatal> BaseDaemon: 10.0. inlined from ./build_docker/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:1962: DB::ReadFromMergeTree::getAnalysisResult() const\r\n2025.01.13 16:43:45.470474 [ 336666 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:2070: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x00000000142f3258\r\n2025.01.13 16:43:45.474222 [ 336665 ] {} <Fatal> BaseDaemon: 11. ./build_docker/./src/Processors/QueryPlan/ISourceStep.cpp:20: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x00000000142a792d\r\n2025.01.13 16:43:45.485704 [ 336666 ] {} <Fatal> BaseDaemon: 12. ./build_docker/./src/Processors/QueryPlan/QueryPlan.cpp:201: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000142c9733\r\n2025.01.13 16:43:45.495369 [ 336666 ] {} <Fatal> BaseDaemon: 13. ./build_docker/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:261: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x00000000127a45bd\r\n2025.01.13 16:43:45.504671 [ 336666 ] {} <Fatal> BaseDaemon: 14. ./build_docker/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:228: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x00000000127a3e9e\r\n2025.01.13 16:43:45.522361 [ 336666 ] {} <Fatal> BaseDaemon: 15. ./build_docker/./src/Interpreters/executeQuery.cpp:1441: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000012b216f7\r\n2025.01.13 16:43:45.545046 [ 336666 ] {} <Fatal> BaseDaemon: 16. ./build_docker/./src/Interpreters/executeQuery.cpp:1608: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000012b1c63c\r\n2025.01.13 16:43:45.562177 [ 336666 ] {} <Fatal> BaseDaemon: 17. ./build_docker/./src/Server/TCPHandler.cpp:658: DB::TCPHandler::runImpl() @ 0x0000000013de592c\r\n2025.01.13 16:43:45.593842 [ 336666 ] {} <Fatal> BaseDaemon: 18. ./build_docker/./src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x0000000013e03219\r\n2025.01.13 16:43:45.594843 [ 336666 ] {} <Fatal> BaseDaemon: 19. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001738ba07\r\n2025.01.13 16:43:45.596146 [ 336666 ] {} <Fatal> BaseDaemon: 20. ./build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001738be59\r\n2025.01.13 16:43:45.597548 [ 336666 ] {} <Fatal> BaseDaemon: 21. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000173583bb\r\n2025.01.13 16:43:45.598172 [ 336665 ] {} <Fatal> BaseDaemon: 22. ./base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001735689d\r\n2025.01.13 16:43:45.598206 [ 336665 ] {} <Fatal> BaseDaemon: 23. ? @ 0x00007f5afd8dfac3\r\n2025.01.13 16:43:45.598217 [ 336665 ] {} <Fatal> BaseDaemon: 24. ? @ 0x00007f5afd971850\r\n2025.01.13 16:43:45.598240 [ 336665 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n```\nSimilarity search query using vector index can cause clickhouse server process to crash.\n### Company or project name\n\nClickhouse ANN Index\n\n### Describe what's wrong\n\nTypically seen if multiple connections concurrently send vector search queries or if the vector index is built on multiple table parts and query uses multiple threads.\n\n```\n(version 25.3.1.1, build id: DE47D8CC263CD79F0C906F3E91F944E2062A48FF, git hash: 5b0fb3e3dff551c7bc3150083db1622c229825fb, architecture: x86_64) (from thread 1451706) Received signal 11\n```\n\n```\n2025.03.13 06:11:14.457757 [ 1451733 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\n2025.03.13 06:11:14.457763 [ 1451733 ] {} <Fatal> BaseDaemon: Address: 0x7ad6c8f00000. Access: write. Address not mapped to object.\n2025.03.13 06:11:14.457771 [ 1451733 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005aafcd3e8288 0x00005aafcd6ce38d 0x00007ad939a45330 0x00007ad939b993bb 0x00005aafd38daf86 0x00005aafd38de3db 0x00005aafd38ddf47 0x00005aafd38cc837 0x00005aafd386ce63 0x00005aafd3869c7d 0x00005aafd387079a 0x00005aafcd48d6db 0x00005aafcd492902 0x00005aafcd48b356 0x00005aafcd490cbb 0x00007ad939a9caa4 0x00007ad939b29c3c\n...\n2025.03.13 06:11:14.457911 [ 1451733 ] {} <Fatal> BaseDaemon: Address: 0x7ad6c8f00000. Access: write. Address not mapped to object.\n2025.03.13 06:11:14.457934 [ 1451733 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005aafcd3e8288 0x00005aafcd6ce38d 0x00007ad939a45330 0x00007ad939b993bb 0x00005aafd38daf86 0x00005aafd38de3db 0x00005aafd38ddf47 0x00005aafd38cc837 0x00005aafd386ce63 0x00005aafd3869c7d 0x00005aafd387079a 0x00005aafcd48d6db 0x00005aafcd492902 0x00005aafcd48b356 0x00005aafcd490cbb 0x00007ad939a9caa4 0x00007ad939b29c3c\n2025.03.13 06:11:14.466641 [ 1451733 ] {} <Fatal> BaseDaemon: 0.0. inlined from ./build/./src/Common/StackTrace.cpp:386: StackTrace::tryCapture()\n2025.03.13 06:11:14.466677 [ 1451733 ] {} <Fatal> BaseDaemon: 0. ./build/./src/Common/StackTrace.cpp:355: StackTrace::StackTrace(ucontext_t const&) @ 0x000000000cb23288\n2025.03.13 06:11:14.477308 [ 1451733 ] {} <Fatal> BaseDaemon: 1. ./build/./src/Common/SignalHandlers.cpp:106: signalHandler(int, siginfo_t*, void*) @ 0x000000000ce0938d\n2025.03.13 06:11:14.477345 [ 1451733 ] {} <Fatal> BaseDaemon: 2. ? @ 0x00007ad939a45330\n2025.03.13 06:11:14.477367 [ 1451733 ] {} <Fatal> BaseDaemon: 3. ? @ 0x00007ad939b993bb\n2025.03.13 06:11:14.503857 [ 1451733 ] {} <Fatal> BaseDaemon: 4.0. inlined from ./contrib/usearch/include/usearch/index.hpp:1109: unum::usearch::growing_hash_set_gt<unsigned int, unum::usearch::hash_gt<unsigned int>, unum::usearch::aligned_allocator_gt<char, 64ul>>::clear()\n2025.03.13 06:11:14.503892 [ 1451733 ] {} <Fatal> BaseDaemon: 4. ./contrib/usearch/include/usearch/index.hpp:3913: unsigned int unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::search_for_one_<char const*&, unum::usearch::index_dense_gt<unsigned long, unsigned int>::metric_proxy_t&, unum::usearch::dummy_prefetch_t&>(char const*&, unum::usearch::index_dense_gt<unsigned long, unsigned int>::metric_proxy_t&, unum::usearch::dummy_prefetch_t&, unsigned int, short, short, unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::context_t&) const @ 0x0000000013015f86\n2025.03.13 06:11:14.527425 [ 1451733 ] {} <Fatal> BaseDaemon: 5. ./contrib/usearch/include/usearch/index.hpp:2990: unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::search_result_t unum::usearch::index_gt<float, unsigned long, unsigned int, unum::usearch::aligned_allocator_gt<char, 64ul>, unum::usearch::memory_mapping_allocator_gt<64ul>>::search<char const*&, unum::usearch::index_dense_gt<unsigned long, unsigned int>::metric_proxy_t, unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_result_t unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_<double, unum::usearch::dummy_predicate_t>(double const*, unsigned long, unum::usearch::dummy_predicate_t&&, unsigned long, bool, bool (* const&)(char const*, unsigned long, char*), unsigned long) const::'lambda'(unum::usearch::member_cref_gt<unsigned long> const&)&, unum::usearch::dummy_prefetch_t>(double&&, unsigned long, unum::usearch::dummy_predicate_t&&, unum::usearch::index_search_config_t, unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_result_t unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_<double, unum::usearch::dummy_predicate_t>(double const*, unsigned long, unum::usearch::dummy_predicate_t&&, unsigned long, bool, bool (* const&)(char const*, unsigned long, char*), unsigned long) const::'lambda'(unum::usearch::member_cref_gt<unsigned long> const&)&, unum::usearch::dummy_prefetch_t&&) const @ 0x00000000130193db\n2025.03.13 06:11:14.546010 [ 1451733 ] {} <Fatal> BaseDaemon: 6. ./contrib/usearch/include/usearch/index_dense.hpp:2061: unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_result_t unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_<double, unum::usearch::dummy_predicate_t>(double const*, unsigned long, unum::usearch::dummy_predicate_t&&, unsigned long, bool, bool (* const&)(char const*, unsigned long, char*), unsigned long) const @ 0x0000000013018f47\n2025.03.13 06:11:14.564066 [ 1451733 ] {} <Fatal> BaseDaemon: 7.0. inlined from ./contrib/usearch/include/usearch/index_dense.hpp:770: unum::usearch::index_dense_gt<unsigned long, unsigned int>::search(double const*, unsigned long, unsigned long, bool, unsigned long) const\n2025.03.13 06:11:14.564104 [ 1451733 ] {} <Fatal> BaseDaemon: 7. ./build/./src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp:445: DB::MergeTreeIndexConditionVectorSimilarity::calculateApproximateNearestNeighbors(std::shared_ptr<DB::IMergeTreeIndexGranule>) const @ 0x0000000013007837\n2025.03.13 06:11:14.609216 [ 1451733 ] {} <Fatal> BaseDaemon: 8. ./build/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1539: DB::MergeTreeDataSelectExecutor::filterMarksUsingIndex(std::shared_ptr<DB::IMergeTreeIndex const>, std::shared_ptr<DB::IMergeTreeIndexCondition>, std::shared_ptr<DB::IMergeTreeDataPart const>, DB::MarkRanges const&, DB::Settings const&, DB::MergeTreeReaderSettings const&, DB::MarkCache*, DB::UncompressedCache*, DB::SkippingIndexCache*, std::shared_ptr<Poco::Logger>) @ 0x0000000012fa7e63\n2025.03.13 06:11:14.653330 [ 1451733 ] {} <Fatal> BaseDaemon: 9. ./build/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:732: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool)::$_0::operator()(unsigned long) const @ 0x0000000012fa4c7d\n2025.03.13 06:11:14.751768 [ 1451733 ] {} <Fatal> BaseDaemon: 10.0. inlined from ./build/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:812: operator()\n```\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\n\nSend similarity search query concurrently from multiple connections.\n\n### Expected behavior\n\nNo crashes\n\n### Error message and/or stacktrace\n\nStacktrace is listed aboe\n\n### Additional context\n\n_No response_\n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/74398/0530332ba1758422b5c28f38c53e844d3d28cf05/stateless_tests__release__parallelreplicas__s3_storage_.html\nI've disabled the tests that cause this:\n```\n02354_vector_search_multiple_marks\n02354_vector_search_expansion_search\n02354_vector_search_detach_attach\n02354_vector_search_different_array_sizes\n```\n\nhttps://github.com/ClickHouse/ClickHouse/pull/74752\nJust for reference : has to be same as #77894 , 2 threads inside `usearch::search` and `jemalloc` in the callstack (from the traces in the initial comment in this ticket)\n```\n2025.01.13 16:43:45.206177 [ 336666 ] {} <Fatal> BaseDaemon: 4.4. inlined from ./contrib/usearch/include/usearch/index_dense.hpp:2061: unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_result_t unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_<double, unum::usearch::dummy_predicate_t>(double const*, unsigned long, unum::usearch::dummy_predicate_t&&, unsigned long, bool, bool (* const&)(char const*, unsigned long, char*), unsigned long) const\n\n2025.01.13 16:43:45.206247 [ 336665 ] {} <Fatal> BaseDaemon: 4.4. inlined from ./contrib/usearch/include/usearch/index_dense.hpp:2061: unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_result_t unum::usearch::index_dense_gt<unsigned long, unsigned int>::search_<double, unum::usearch::dummy_predicate_t>(double const*, unsigned long, unum::usearch::dummy_predicate_t&&, unsigned long, bool, bool (* const&)(char const*, unsigned long, char*), unsigned long) const\n```\n",
  "created_at": "2025-03-22T11:36:51Z"
}