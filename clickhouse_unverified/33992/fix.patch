diff --git a/src/Common/StringSearcher.h b/src/Common/StringSearcher.h
index f34bc6f73227..406298382848 100644
--- a/src/Common/StringSearcher.h
+++ b/src/Common/StringSearcher.h
@@ -24,7 +24,6 @@ namespace DB
 
 namespace ErrorCodes
 {
-    extern const int UNSUPPORTED_PARAMETER;
     extern const int BAD_ARGUMENTS;
 }
 
@@ -34,9 +33,12 @@ namespace ErrorCodes
   */
 
 
-struct StringSearcherBase
+class StringSearcherBase
 {
+public:
+    bool force_fallback = false;
 #ifdef __SSE2__
+protected:
     static constexpr auto n = sizeof(__m128i);
     const int page_size = ::getPageSize();
 
@@ -53,7 +55,7 @@ template <bool CaseSensitive, bool ASCII> class StringSearcher;
 
 /// Case-insensitive UTF-8 searcher
 template <>
-class StringSearcher<false, false> : private StringSearcherBase
+class StringSearcher<false, false> : public StringSearcherBase
 {
 private:
     using UTF8SequenceBuffer = uint8_t[6];
@@ -119,11 +121,14 @@ class StringSearcher<false, false> : private StringSearcherBase
                 size_t length_u = UTF8::convertCodePointToUTF8(first_u_u32, u_seq, sizeof(u_seq));
 
                 if (length_l != length_u)
-                    throw Exception{"UTF8 sequences with different lowercase and uppercase lengths are not supported", ErrorCodes::UNSUPPORTED_PARAMETER};
+                    force_fallback = true;
             }
 
             l = l_seq[0];
             u = u_seq[0];
+
+            if (force_fallback)
+                return;
         }
 
 #ifdef __SSE4_1__
@@ -158,7 +163,10 @@ class StringSearcher<false, false> : private StringSearcherBase
 
                 /// @note Unicode standard states it is a rare but possible occasion
                 if (!(dst_l_len == dst_u_len && dst_u_len == src_len))
-                    throw Exception{"UTF8 sequences with different lowercase and uppercase lengths are not supported", ErrorCodes::UNSUPPORTED_PARAMETER};
+                {
+                    force_fallback = true;
+                    return;
+                }
             }
 
             cache_actual_len += src_len;
@@ -199,9 +207,10 @@ class StringSearcher<false, false> : private StringSearcherBase
             if (Poco::Unicode::toLower(*haystack_code_point) != Poco::Unicode::toLower(*needle_code_point))
                 break;
 
-            /// @note assuming sequences for lowercase and uppercase have exact same length (that is not always true)
-            const auto len = UTF8::seqLength(*haystack_pos);
+            auto len = UTF8::seqLength(*haystack_pos);
             haystack_pos += len;
+
+            len = UTF8::seqLength(*needle_pos);
             needle_pos += len;
         }
 
@@ -213,7 +222,7 @@ class StringSearcher<false, false> : private StringSearcherBase
     {
 
 #ifdef __SSE4_1__
-        if (pageSafe(pos))
+        if (pageSafe(pos) && !force_fallback)
         {
             const auto v_haystack = _mm_loadu_si128(reinterpret_cast<const __m128i *>(pos));
             const auto v_against_l = _mm_cmpeq_epi8(v_haystack, cachel);
@@ -262,7 +271,7 @@ class StringSearcher<false, false> : private StringSearcherBase
         while (haystack < haystack_end)
         {
 #ifdef __SSE4_1__
-            if (haystack + n <= haystack_end && pageSafe(haystack))
+            if (haystack + n <= haystack_end && pageSafe(haystack) && !force_fallback)
             {
                 const auto v_haystack = _mm_loadu_si128(reinterpret_cast<const __m128i *>(haystack));
                 const auto v_against_l = _mm_cmpeq_epi8(v_haystack, patl);
@@ -339,7 +348,7 @@ class StringSearcher<false, false> : private StringSearcherBase
 
 /// Case-insensitive ASCII searcher
 template <>
-class StringSearcher<false, true> : private StringSearcherBase
+class StringSearcher<false, true> : public StringSearcherBase
 {
 private:
     /// string to be searched for
@@ -541,7 +550,7 @@ class StringSearcher<false, true> : private StringSearcherBase
 
 /// Case-sensitive searcher (both ASCII and UTF-8)
 template <bool ASCII>
-class StringSearcher<true, ASCII> : private StringSearcherBase
+class StringSearcher<true, ASCII> : public StringSearcherBase
 {
 private:
     /// string to be searched for
@@ -725,7 +734,7 @@ class StringSearcher<true, ASCII> : private StringSearcherBase
 // Any value outside of basic ASCII (>=128) is considered a non-separator symbol, hence UTF-8 strings
 // should work just fine. But any Unicode whitespace is not considered a token separtor.
 template <typename StringSearcher>
-class TokenSearcher
+class TokenSearcher : public StringSearcherBase
 {
     StringSearcher searcher;
     size_t needle_size;
@@ -809,7 +818,7 @@ using ASCIICaseInsensitiveTokenSearcher = TokenSearcher<ASCIICaseInsensitiveStri
   * It is required that strings are zero-terminated.
   */
 
-struct LibCASCIICaseSensitiveStringSearcher
+struct LibCASCIICaseSensitiveStringSearcher : public StringSearcherBase
 {
     const char * const needle;
 
@@ -833,7 +842,7 @@ struct LibCASCIICaseSensitiveStringSearcher
     }
 };
 
-struct LibCASCIICaseInsensitiveStringSearcher
+struct LibCASCIICaseInsensitiveStringSearcher : public StringSearcherBase
 {
     const char * const needle;
 
diff --git a/src/Common/Volnitsky.h b/src/Common/Volnitsky.h
index f08172c8a772..881817f33bed 100644
--- a/src/Common/Volnitsky.h
+++ b/src/Common/Volnitsky.h
@@ -372,7 +372,7 @@ class VolnitskyBase
         , fallback{VolnitskyTraits::isFallbackNeedle(needle_size, haystack_size_hint)}
         , fallback_searcher{needle_, needle_size}
     {
-        if (fallback)
+        if (fallback || fallback_searcher.force_fallback)
             return;
 
         hash = std::unique_ptr<VolnitskyTraits::Offset[]>(new VolnitskyTraits::Offset[VolnitskyTraits::hash_size]{});
@@ -393,7 +393,7 @@ class VolnitskyBase
 
         const auto haystack_end = haystack + haystack_size;
 
-        if (fallback || haystack_size <= needle_size)
+        if (fallback || haystack_size <= needle_size || fallback_searcher.force_fallback)
             return fallback_searcher.search(haystack, haystack_end);
 
         /// Let's "apply" the needle to the haystack and compare the n-gram from the end of the needle.
