diff --git a/tests/queries/0_stateless/03315_analyzer_correlated_subqueries.reference b/tests/queries/0_stateless/03315_analyzer_correlated_subqueries.reference
new file mode 100644
index 000000000000..51314d9bc697
--- /dev/null
+++ b/tests/queries/0_stateless/03315_analyzer_correlated_subqueries.reference
@@ -0,0 +1,68 @@
+QUERY id: 0
+  PROJECTION COLUMNS
+    number UInt64
+  PROJECTION
+    LIST id: 1, nodes: 1
+      COLUMN id: 2, column_name: number, result_type: UInt64, source_id: 3
+  JOIN TREE
+    TABLE_FUNCTION id: 3, alias: __table1, table_function_name: numbers
+      ARGUMENTS
+        LIST id: 4, nodes: 1
+          CONSTANT id: 5, constant_value: UInt64_2, constant_value_type: UInt8
+  WHERE
+    FUNCTION id: 6, function_name: exists, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 7, nodes: 1
+          QUERY id: 8, alias: __table2, is_subquery: 1, is_correlated: 1
+            CORRELATED COLUMNS
+              LIST id: 9, nodes: 1
+                COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 3
+            PROJECTION COLUMNS
+              count() UInt64
+            PROJECTION
+              LIST id: 11, nodes: 1
+                FUNCTION id: 12, function_name: count, function_type: aggregate, result_type: UInt64
+            JOIN TREE
+              TABLE id: 13, alias: __table3, table_name: system.one
+            WHERE
+              FUNCTION id: 14, function_name: equals, function_type: ordinary, result_type: UInt8
+                ARGUMENTS
+                  LIST id: 15, nodes: 2
+                    COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 3
+                    CONSTANT id: 16, constant_value: UInt64_2, constant_value_type: UInt8
+QUERY id: 0
+  PROJECTION COLUMNS
+    number UInt64
+  PROJECTION
+    LIST id: 1, nodes: 1
+      COLUMN id: 2, column_name: number, result_type: UInt64, source_id: 3
+  JOIN TREE
+    TABLE_FUNCTION id: 3, alias: __table1, table_function_name: numbers
+      ARGUMENTS
+        LIST id: 4, nodes: 1
+          CONSTANT id: 5, constant_value: UInt64_2, constant_value_type: UInt8
+  WHERE
+    FUNCTION id: 6, function_name: exists, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 7, nodes: 1
+          QUERY id: 8, alias: __table2, is_subquery: 1, is_correlated: 1
+            CORRELATED COLUMNS
+              LIST id: 9, nodes: 1
+                COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 3
+            PROJECTION COLUMNS
+              1 UInt8
+              dummy UInt8
+              1 UInt8
+            PROJECTION
+              LIST id: 11, nodes: 3
+                CONSTANT id: 12, constant_value: UInt64_1, constant_value_type: UInt8
+                COLUMN id: 13, column_name: dummy, result_type: UInt8, source_id: 14
+                CONSTANT id: 15, constant_value: UInt64_1, constant_value_type: UInt8
+            JOIN TREE
+              TABLE id: 14, alias: __table3, table_name: system.one
+            WHERE
+              FUNCTION id: 16, function_name: equals, function_type: ordinary, result_type: UInt8
+                ARGUMENTS
+                  LIST id: 17, nodes: 2
+                    COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 3
+                    CONSTANT id: 18, constant_value: UInt64_2, constant_value_type: UInt8
diff --git a/tests/queries/0_stateless/03315_analyzer_correlated_subqueries.sql b/tests/queries/0_stateless/03315_analyzer_correlated_subqueries.sql
new file mode 100644
index 000000000000..30ee0a5290d9
--- /dev/null
+++ b/tests/queries/0_stateless/03315_analyzer_correlated_subqueries.sql
@@ -0,0 +1,21 @@
+set enable_analyzer = 1;
+set allow_experimental_correlated_subqueries = 1;
+
+EXPLAIN QUERY TREE
+SELECT *
+FROM numbers(2)
+WHERE exists((
+    SELECT count()
+    WHERE number = 2
+));
+
+EXPLAIN QUERY TREE
+SELECT *
+FROM numbers(2)
+WHERE exists((
+    SELECT
+        1,
+        dummy,
+        1
+    WHERE number = 2
+));
diff --git a/tests/queries/0_stateless/03399_analyzer_correlated_subquery.reference b/tests/queries/0_stateless/03399_analyzer_correlated_subquery.reference
new file mode 100644
index 000000000000..46193b43bc61
--- /dev/null
+++ b/tests/queries/0_stateless/03399_analyzer_correlated_subquery.reference
@@ -0,0 +1,34 @@
+-- { echoOn }
+
+SET allow_experimental_correlated_subqueries = 1;
+SELECT * FROM users u1
+WHERE EXISTS (
+  SELECT * FROM users2 u2
+  WHERE u1.age = u2.age
+);
+1231	John	33
+SELECT *
+FROM users AS u1
+WHERE (age = 50) OR exists((
+    SELECT *
+    FROM users2 AS u2
+    WHERE u1.age = u2.age
+))
+ORDER BY ALL
+SETTINGS allow_experimental_correlated_subqueries = 1;
+1231	John	33
+8888	Alice	50
+SELECT *
+FROM users AS u1
+WHERE (age = 50) OR exists((
+    SELECT *
+    FROM users2 AS u2
+    WHERE u1.age = u2.age
+    UNION ALL
+    SELECT *
+    FROM users2 AS u2
+    WHERE u1.age != u2.age
+))
+ORDER BY ALL
+FORMAT Null
+SETTINGS allow_experimental_correlated_subqueries = 1;
diff --git a/tests/queries/0_stateless/03399_analyzer_correlated_subquery.sql b/tests/queries/0_stateless/03399_analyzer_correlated_subquery.sql
new file mode 100644
index 000000000000..d2855b12efd1
--- /dev/null
+++ b/tests/queries/0_stateless/03399_analyzer_correlated_subquery.sql
@@ -0,0 +1,48 @@
+set enable_analyzer = 1;
+
+DROP TABLE IF EXISTS users;
+CREATE TABLE users (uid Int16, name String, age Int16) ENGINE=Memory;
+
+INSERT INTO users VALUES (1231, 'John', 33);
+INSERT INTO users VALUES (6666, 'Ksenia', 48);
+INSERT INTO users VALUES (8888, 'Alice', 50);
+
+DROP TABLE IF EXISTS users2;
+CREATE TABLE users2 (uid Int16, name String, age Int16) ENGINE=Memory;
+
+INSERT INTO users2 VALUES (1231, 'John', 33);
+
+-- { echoOn }
+
+SET allow_experimental_correlated_subqueries = 1;
+
+SELECT * FROM users u1
+WHERE EXISTS (
+  SELECT * FROM users2 u2
+  WHERE u1.age = u2.age
+);
+
+SELECT *
+FROM users AS u1
+WHERE (age = 50) OR exists((
+    SELECT *
+    FROM users2 AS u2
+    WHERE u1.age = u2.age
+))
+ORDER BY ALL
+SETTINGS allow_experimental_correlated_subqueries = 1;
+
+SELECT *
+FROM users AS u1
+WHERE (age = 50) OR exists((
+    SELECT *
+    FROM users2 AS u2
+    WHERE u1.age = u2.age
+    UNION ALL
+    SELECT *
+    FROM users2 AS u2
+    WHERE u1.age != u2.age
+))
+ORDER BY ALL
+FORMAT Null
+SETTINGS allow_experimental_correlated_subqueries = 1;
diff --git a/tests/queries/0_stateless/03400_analyzer_correlated_subquery_unused_column.reference b/tests/queries/0_stateless/03400_analyzer_correlated_subquery_unused_column.reference
new file mode 100644
index 000000000000..d28ce75e85a3
--- /dev/null
+++ b/tests/queries/0_stateless/03400_analyzer_correlated_subquery_unused_column.reference
@@ -0,0 +1,21 @@
+-- { echoOn }
+
+SET allow_experimental_correlated_subqueries = 1;
+SELECT name FROM users u1
+WHERE EXISTS (
+  SELECT * FROM users2 u2
+  WHERE u1.age = u2.age
+);
+John
+SELECT name
+FROM users AS u1
+WHERE (age = 50) OR exists((
+    SELECT *
+    FROM users2 AS u2
+    WHERE u1.age = u2.age
+))
+ORDER BY ALL
+SETTINGS allow_experimental_correlated_subqueries = 1
+
+Alice
+John
diff --git a/tests/queries/0_stateless/03400_analyzer_correlated_subquery_unused_column.sql b/tests/queries/0_stateless/03400_analyzer_correlated_subquery_unused_column.sql
new file mode 100644
index 000000000000..900f340ddd35
--- /dev/null
+++ b/tests/queries/0_stateless/03400_analyzer_correlated_subquery_unused_column.sql
@@ -0,0 +1,35 @@
+set enable_analyzer = 1;
+
+DROP TABLE IF EXISTS users;
+CREATE TABLE users (uid Int16, name String, age Int16) ENGINE=MergeTree() ORDER BY uid;
+
+INSERT INTO users VALUES (1231, 'John', 33);
+INSERT INTO users VALUES (6666, 'Ksenia', 48);
+INSERT INTO users VALUES (8888, 'Alice', 50);
+
+DROP TABLE IF EXISTS users2;
+CREATE TABLE users2 (uid Int16, name String, age Int16) ENGINE=MergeTree() ORDER BY uid;
+
+INSERT INTO users2 VALUES (1231, 'John', 33);
+
+SET enable_parallel_replicas = 0;
+
+-- { echoOn }
+
+SET allow_experimental_correlated_subqueries = 1;
+
+SELECT name FROM users u1
+WHERE EXISTS (
+  SELECT * FROM users2 u2
+  WHERE u1.age = u2.age
+);
+
+SELECT name
+FROM users AS u1
+WHERE (age = 50) OR exists((
+    SELECT *
+    FROM users2 AS u2
+    WHERE u1.age = u2.age
+))
+ORDER BY ALL
+SETTINGS allow_experimental_correlated_subqueries = 1
diff --git a/tests/queries/0_stateless/03408_analyzer_correlated_subquery_simple.reference b/tests/queries/0_stateless/03408_analyzer_correlated_subquery_simple.reference
new file mode 100644
index 000000000000..2283978aa474
--- /dev/null
+++ b/tests/queries/0_stateless/03408_analyzer_correlated_subquery_simple.reference
@@ -0,0 +1,22 @@
+-- { echoOn }
+
+SELECT count(t1.c1) FROM t1
+WHERE
+t1.c2 = 10
+AND EXISTS (SELECT * FROM t2 WHERE t1.c1 = t2.c1);
+0
+SELECT count(t1.c1) FROM t1
+WHERE
+t1.c2 = 10
+AND t1.c1 IN (SELECT c1 FROM t2);
+0
+SELECT count(t1.c1) FROM t1
+WHERE
+t1.c2 = 10
+AND NOT EXISTS (SELECT * FROM t2 WHERE t1.c1 = t2.c1);
+1
+SELECT count(t1.c1) FROM t1
+WHERE
+t1.c2 = 10
+AND t1.c1 NOT IN (SELECT c1 FROM t2);
+1
diff --git a/tests/queries/0_stateless/03408_analyzer_correlated_subquery_simple.sql b/tests/queries/0_stateless/03408_analyzer_correlated_subquery_simple.sql
new file mode 100644
index 000000000000..14ed06c531a8
--- /dev/null
+++ b/tests/queries/0_stateless/03408_analyzer_correlated_subquery_simple.sql
@@ -0,0 +1,34 @@
+-- https://github.com/ClickHouse/ClickHouse/issues/72459
+
+CREATE TABLE t1 (c1 UInt64, c2 UInt64) ORDER BY c1;
+CREATE TABLE t2 (c1 UInt64) ORDER BY c1;
+
+INSERT INTO t1 SELECT number, number % 100 FROM numbers(100);
+INSERT INTO t2 SELECT number*number FROM numbers(100);
+
+set enable_analyzer = 1;
+set allow_experimental_correlated_subqueries = 1;
+
+SET enable_parallel_replicas = 0;
+
+-- { echoOn }
+
+SELECT count(t1.c1) FROM t1
+WHERE
+t1.c2 = 10
+AND EXISTS (SELECT * FROM t2 WHERE t1.c1 = t2.c1);
+
+SELECT count(t1.c1) FROM t1
+WHERE
+t1.c2 = 10
+AND t1.c1 IN (SELECT c1 FROM t2);
+
+SELECT count(t1.c1) FROM t1
+WHERE
+t1.c2 = 10
+AND NOT EXISTS (SELECT * FROM t2 WHERE t1.c1 = t2.c1);
+
+SELECT count(t1.c1) FROM t1
+WHERE
+t1.c2 = 10
+AND t1.c1 NOT IN (SELECT c1 FROM t2);
diff --git a/tests/queries/0_stateless/03412_analyzer_correlated_subquery_bug.reference b/tests/queries/0_stateless/03412_analyzer_correlated_subquery_bug.reference
new file mode 100644
index 000000000000..94ac2cb54942
--- /dev/null
+++ b/tests/queries/0_stateless/03412_analyzer_correlated_subquery_bug.reference
@@ -0,0 +1,4 @@
+0
+--
+0
+1
diff --git a/tests/queries/0_stateless/03412_analyzer_correlated_subquery_bug.sql b/tests/queries/0_stateless/03412_analyzer_correlated_subquery_bug.sql
new file mode 100644
index 000000000000..3dae41c025d1
--- /dev/null
+++ b/tests/queries/0_stateless/03412_analyzer_correlated_subquery_bug.sql
@@ -0,0 +1,32 @@
+set enable_analyzer = 1;
+set allow_experimental_correlated_subqueries = 1;
+
+create table mem2 engine = Memory as select number from numbers(2);
+
+SELECT number
+FROM mem2 AS tbl
+WHERE exists((
+    SELECT number
+    FROM numbers(1)
+    WHERE number >= tbl.number
+));
+
+SELECT '--';
+
+SELECT number
+FROM mem2 AS tbl
+WHERE exists((
+    SELECT number
+    FROM numbers(2)
+    WHERE number >= tbl.number
+));
+
+SELECT number
+FROM mem2 AS tbl
+WHERE length(arrayFilter(x -> (x OR exists((
+    SELECT number
+    FROM numbers(1)
+    WHERE number >= tbl.number
+))), range(number))) > 0;
+
+SELECT number FROM mem2 AS tbl INNER JOIN (SELECT number FROM numbers(1) WHERE tbl.number >= number) AS alias4 ON alias4.number = number; -- { serverError NOT_IMPLEMENTED}
\ No newline at end of file
diff --git a/tests/queries/0_stateless/03413_analyzer_correlated_subqueries_bug_2.reference b/tests/queries/0_stateless/03413_analyzer_correlated_subqueries_bug_2.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/03413_analyzer_correlated_subqueries_bug_2.sql b/tests/queries/0_stateless/03413_analyzer_correlated_subqueries_bug_2.sql
new file mode 100644
index 000000000000..8b4a07805945
--- /dev/null
+++ b/tests/queries/0_stateless/03413_analyzer_correlated_subqueries_bug_2.sql
@@ -0,0 +1,57 @@
+set enable_analyzer = 1;
+set allow_experimental_correlated_subqueries = 1;
+
+SET enable_parallel_replicas = 0;
+
+CREATE TABLE orders  (
+    o_orderkey       Int32,
+    o_custkey        Int32,
+    o_orderstatus    String,
+    o_totalprice     Decimal(15,2),
+    o_orderdate      Date,
+    o_orderpriority  String,
+    o_clerk          String,
+    o_shippriority   Int32,
+    o_comment        String)
+ORDER BY (o_orderkey);
+
+INSERT INTO orders SELECT * FROM generateRandom() LIMIT 10;
+
+CREATE TABLE lineitem (
+    l_orderkey       Int32,
+    l_partkey        Int32,
+    l_suppkey        Int32,
+    l_linenumber     Int32,
+    l_quantity       Decimal(15,2),
+    l_extendedprice  Decimal(15,2),
+    l_discount       Decimal(15,2),
+    l_tax            Decimal(15,2),
+    l_returnflag     String,
+    l_linestatus     String,
+    l_shipdate       Date,
+    l_commitdate     Date,
+    l_receiptdate    Date,
+    l_shipinstruct   String,
+    l_shipmode       String,
+    l_comment        String)
+ORDER BY (l_orderkey, l_linenumber);
+
+SELECT
+    o_orderpriority,
+    count(*) AS order_count
+FROM
+(
+    SELECT
+        o_orderpriority,
+        o_orderkey
+    FROM orders
+    WHERE (o_orderdate >= toDate('1993-07-01')) AND (o_orderdate < (toDate('1993-07-01') + toIntervalMonth('3')))
+)
+WHERE exists((
+    SELECT l_orderkey
+    FROM lineitem
+    WHERE (l_orderkey = o_orderkey) AND (l_commitdate < l_receiptdate)
+))
+GROUP BY o_orderpriority
+ORDER BY o_orderpriority ASC
+FORMAT Null;
diff --git a/tests/queries/0_stateless/03414_analyzer_correlated_subqueries_in_function.reference b/tests/queries/0_stateless/03414_analyzer_correlated_subqueries_in_function.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/03414_analyzer_correlated_subqueries_in_function.sql b/tests/queries/0_stateless/03414_analyzer_correlated_subqueries_in_function.sql
new file mode 100644
index 000000000000..31e728eea06f
--- /dev/null
+++ b/tests/queries/0_stateless/03414_analyzer_correlated_subqueries_in_function.sql
@@ -0,0 +1,14 @@
+set enable_analyzer = 1;
+set allow_experimental_correlated_subqueries = 1;
+
+SELECT count()
+FROM numbers(3) AS t
+WHERE 1 IN (
+    SELECT 1
+    FROM numbers(3)
+    WHERE number = t.number
+); -- { serverError NOT_IMPLEMENTED }
+
+SELECT count()
+FROM numbers(3) AS t
+WHERE (SELECT count() FROM numbers(3) WHERE number = t.number) IN (1); -- { serverError NOT_IMPLEMENTED }
