{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 28887,
  "instance_id": "ClickHouse__ClickHouse-28887",
  "issue_numbers": [
    "28884"
  ],
  "base_commit": "48e8e2455203d6105cf1a6c84ceed267300e57a5",
  "patch": "diff --git a/src/Columns/MaskOperations.cpp b/src/Columns/MaskOperations.cpp\nindex 759d0af71272..b63f2d256653 100644\n--- a/src/Columns/MaskOperations.cpp\n+++ b/src/Columns/MaskOperations.cpp\n@@ -4,6 +4,7 @@\n #include <Columns/ColumnNothing.h>\n #include <Columns/ColumnsCommon.h>\n #include <Columns/ColumnConst.h>\n+#include <Columns/ColumnLowCardinality.h>\n #include <algorithm>\n \n namespace DB\n@@ -177,19 +178,21 @@ MaskInfo extractMaskFromConstOrNull(\n template <bool inverted>\n MaskInfo extractMaskImpl(\n     PaddedPODArray<UInt8> & mask,\n-    const ColumnPtr & column,\n+    const ColumnPtr & col,\n     UInt8 null_value,\n     const PaddedPODArray<UInt8> * null_bytemap,\n     PaddedPODArray<UInt8> * nulls = nullptr)\n {\n+    auto column = col->convertToFullColumnIfLowCardinality();\n+\n     /// Special implementation for Null and Const columns.\n     if (column->onlyNull() || checkAndGetColumn<ColumnConst>(*column))\n         return extractMaskFromConstOrNull<inverted>(mask, column, null_value, nulls);\n \n-    if (const auto * col = checkAndGetColumn<ColumnNullable>(*column))\n+    if (const auto * nullable_column = checkAndGetColumn<ColumnNullable>(*column))\n     {\n-        const PaddedPODArray<UInt8> & null_map = col->getNullMapData();\n-        return extractMaskImpl<inverted>(mask, col->getNestedColumnPtr(), null_value, &null_map, nulls);\n+        const PaddedPODArray<UInt8> & null_map = nullable_column->getNullMapData();\n+        return extractMaskImpl<inverted>(mask, nullable_column->getNestedColumnPtr(), null_value, &null_map, nulls);\n     }\n \n     MaskInfo mask_info;\n@@ -314,3 +317,4 @@ void copyMask(const PaddedPODArray<UInt8> & from, PaddedPODArray<UInt8> & to)\n }\n \n }\n+\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex f331ad2d7d31..325e6ea58c54 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -499,7 +499,7 @@ class IColumn;\n     M(UInt64, offset, 0, \"Offset on read rows from the most 'end' result for select query\", 0) \\\n     \\\n     M(UInt64, function_range_max_elements_in_block, 500000000, \"Maximum number of values generated by function 'range' per block of data (sum of array sizes for every row in a block, see also 'max_block_size' and 'min_insert_block_size_rows'). It is a safety threshold.\", 0) \\\n-    M(ShortCircuitFunctionEvaluation, short_circuit_function_evaluation, ShortCircuitFunctionEvaluation::ENABLE, \"Setting for short-circuit function evaluation configuration. Possible values: 'enable', 'disable', 'force_enable'\", 0) \\\n+    M(ShortCircuitFunctionEvaluation, short_circuit_function_evaluation, ShortCircuitFunctionEvaluation::ENABLE, \"Setting for short-circuit function evaluation configuration. Possible values: 'enable' - use short-circuit function evaluation for functions that are suitable for it, 'disable' - disable short-circuit function evaluation, 'force_enable' - use short-circuit function evaluation for all functions.\", 0) \\\n     \\\n     M(String, local_filesystem_read_method, \"pread\", \"Method of reading data from local filesystem, one of: read, pread, mmap, pread_threadpool.\", 0) \\\n     M(Bool, local_filesystem_read_prefetch, false, \"Should use prefetching when reading data from local filesystem.\", 0) \\\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01822_short_circuit.reference b/tests/queries/0_stateless/01822_short_circuit.reference\nindex 96c4e1612447..949d2fa4985b 100644\n--- a/tests/queries/0_stateless/01822_short_circuit.reference\n+++ b/tests/queries/0_stateless/01822_short_circuit.reference\n@@ -1803,3 +1803,33 @@ Decimal32\n \\N\n \\N\n \\N\n+0\n+1\n+0\n+1\n+0\n+0\n+1\n+1\n+1\n+1\n+1\n+1\n+3\n+3\n+5\n+5\n+7\n+7\n+9\n+9\n+1\n+1\n+3\n+3\n+5\n+5\n+7\n+7\n+9\n+9\ndiff --git a/tests/queries/0_stateless/01822_short_circuit.sql b/tests/queries/0_stateless/01822_short_circuit.sql\nindex fe8a0315d4a4..1f0e04cb4b5b 100644\n--- a/tests/queries/0_stateless/01822_short_circuit.sql\n+++ b/tests/queries/0_stateless/01822_short_circuit.sql\n@@ -148,3 +148,8 @@ select if(isNull(x), Null, 42 / x) from (select CAST(materialize(Null), 'Nullabl\n select if(isNull(x), Null, x / 0) from (select CAST(materialize(Null), 'Nullable(Decimal32(2))') as x);\n \n select if(isNull(x), Null, intDiv(42, x)) from (select CAST(materialize(Null), 'Nullable(Int64)') as x);\n+\n+select number % 2 and toLowCardinality(number) from numbers(5);\n+select number % 2 or toLowCardinality(number) from numbers(5);\n+select if(toLowCardinality(number) % 2, number, number + 1) from numbers(10);\n+select multiIf(toLowCardinality(number) % 2, number, number + 1) from numbers(10);\n",
  "problem_statement": "Regression in `LowCardinality` about some mask.\nhttps://gh-api.clickhouse.tech/play?user=play#U0VMRUNUIHRvU3RhcnRPZk1vbnRoKGNyZWF0ZWRfYXQpIEFTIGRhdGUsIGNvdW50KCksIHVuaXEoYWN0b3JfbG9naW4pIEFTIHUsIGJhcih1LCAwLCAxMDAwLCAxMDApIEZST00gZ2l0aHViX2V2ZW50cyAKV0hFUkUgcmVwb19uYW1lIElOICgneWFuZGV4L0NsaWNrSG91c2UnLCAnQ2xpY2tIb3VzZS9DbGlja0hvdXNlJykgCiAgQU5EIGV2ZW50X3R5cGUgPSAnSXNzdWVDb21tZW50RXZlbnQnCiAgQU5EIGFjdG9yX2xvZ2luIE5PVCBMSUtFICdyb2JvdC0lJyBBTkQgYWN0b3JfbG9naW4gTk9UIExJS0UgJyVbYm90XScKR1JPVVAgQlkgZGF0ZSBPUkRFUiBCWSBkYXRl\r\n\r\n```\r\nSELECT toStartOfMonth(created_at) AS date, count(), uniq(actor_login) AS u, bar(u, 0, 1000, 100) FROM github_events \r\nWHERE repo_name IN ('yandex/ClickHouse', 'ClickHouse/ClickHouse') \r\n  AND event_type = 'IssueCommentEvent'\r\n  AND actor_login NOT LIKE 'robot-%' AND actor_login NOT LIKE '%[bot]'\r\nGROUP BY date ORDER BY date\r\n```\r\n\r\n```\r\nCode: 44. DB::Exception: Cannot convert column ColumnLowCardinality to mask.: while executing 'FUNCTION and(notLike(actor_login, 'robot-%') :: 3, notLike(actor_login, '%[bot]') :: 1) -> and(notLike(actor_login, 'robot-%'), notLike(actor_login, '%[bot]')) UInt8 : 2': While executing MergeTreeThread. (ILLEGAL_COLUMN) (version 21.11.1.8052 (official build))\r\n```\n",
  "hints_text": "`SET short_circuit_function_evaluation = 'disable'` fixes the issue.\nUnfortunately, version 21.9 (released) also has this issue.\nwhere is the short circuit evaluation feature doc URL?\n> where is the short circuit evaluation feature doc URL?\r\n\r\nWe haven't added it in docs yet, by you can read about it in the description of the PR https://github.com/ClickHouse/ClickHouse/pull/23367 ",
  "created_at": "2021-09-11T09:59:16Z",
  "modified_files": [
    "src/Columns/MaskOperations.cpp",
    "src/Core/Settings.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01822_short_circuit.reference",
    "tests/queries/0_stateless/01822_short_circuit.sql"
  ]
}