{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15028,
  "instance_id": "ClickHouse__ClickHouse-15028",
  "issue_numbers": [
    "13926"
  ],
  "base_commit": "c185db46f93e3163ed72a9a698a426363886cdd7",
  "patch": "diff --git a/src/Common/UnicodeBar.cpp b/src/Common/UnicodeBar.cpp\nnew file mode 100644\nindex 000000000000..8ff5e2052c1d\n--- /dev/null\n+++ b/src/Common/UnicodeBar.cpp\n@@ -0,0 +1,70 @@\n+#include <cstring>\n+#include <cmath>\n+#include <string>\n+#include <common/types.h>\n+#include <common/arithmeticOverflow.h>\n+#include <Common/Exception.h>\n+#include <Common/UnicodeBar.h>\n+\n+\n+namespace DB\n+{\n+    namespace ErrorCodes\n+    {\n+        extern const int PARAMETER_OUT_OF_BOUND;\n+    }\n+}\n+\n+\n+namespace UnicodeBar\n+{\n+    double getWidth(Int64 x, Int64 min, Int64 max, double max_width)\n+    {\n+        if (x <= min)\n+            return 0;\n+\n+        if (x >= max)\n+            return max_width;\n+\n+        /// The case when max - min overflows\n+        Int64 max_difference;\n+        if (common::subOverflow(max, min, max_difference))\n+            throw DB::Exception(DB::ErrorCodes::PARAMETER_OUT_OF_BOUND, \"The arguments to render unicode bar will lead to arithmetic overflow\");\n+\n+        return (x - min) * max_width / max_difference;\n+    }\n+\n+    size_t getWidthInBytes(double width)\n+    {\n+        return ceil(width - 1.0 / 8) * UNICODE_BAR_CHAR_SIZE;\n+    }\n+\n+    void render(double width, char * dst)\n+    {\n+        size_t floor_width = floor(width);\n+\n+        for (size_t i = 0; i < floor_width; ++i)\n+        {\n+            memcpy(dst, \"\u2588\", UNICODE_BAR_CHAR_SIZE);\n+            dst += UNICODE_BAR_CHAR_SIZE;\n+        }\n+\n+        size_t remainder = floor((width - floor_width) * 8);\n+\n+        if (remainder)\n+        {\n+            memcpy(dst, &\"\u258f\u258e\u258d\u258c\u258b\u258b\u258a\u2589\"[(remainder - 1) * UNICODE_BAR_CHAR_SIZE], UNICODE_BAR_CHAR_SIZE);\n+            dst += UNICODE_BAR_CHAR_SIZE;\n+        }\n+\n+        *dst = 0;\n+    }\n+\n+    std::string render(double width)\n+    {\n+        std::string res(getWidthInBytes(width), '\\0');\n+        render(width, res.data());\n+        return res;\n+    }\n+}\n+\ndiff --git a/src/Common/UnicodeBar.h b/src/Common/UnicodeBar.h\nindex 9a5bcecbd629..0c62bd7e8f73 100644\n--- a/src/Common/UnicodeBar.h\n+++ b/src/Common/UnicodeBar.h\n@@ -1,7 +1,5 @@\n #pragma once\n \n-#include <cstring>\n-#include <cmath>\n #include <string>\n #include <common/types.h>\n \n@@ -10,54 +8,12 @@\n \n /** Allows you to draw a unicode-art bar whose width is displayed with a resolution of 1/8 character.\n   */\n-\n-\n namespace UnicodeBar\n {\n-    using DB::Int64;\n-\n-    inline double getWidth(Int64 x, Int64 min, Int64 max, double max_width)\n-    {\n-        if (x <= min)\n-            return 0;\n-\n-        if (x >= max)\n-            return max_width;\n-\n-        return (x - min) * max_width / (max - min);\n-    }\n-\n-    inline size_t getWidthInBytes(double width)\n-    {\n-        return ceil(width - 1.0 / 8) * UNICODE_BAR_CHAR_SIZE;\n-    }\n+    double getWidth(Int64 x, Int64 min, Int64 max, double max_width);\n+    size_t getWidthInBytes(double width);\n \n     /// In `dst` there must be a space for barWidthInBytes(width) characters and a trailing zero.\n-    inline void render(double width, char * dst)\n-    {\n-        size_t floor_width = floor(width);\n-\n-        for (size_t i = 0; i < floor_width; ++i)\n-        {\n-            memcpy(dst, \"\u2588\", UNICODE_BAR_CHAR_SIZE);\n-            dst += UNICODE_BAR_CHAR_SIZE;\n-        }\n-\n-        size_t remainder = floor((width - floor_width) * 8);\n-\n-        if (remainder)\n-        {\n-            memcpy(dst, &\"\u258f\u258e\u258d\u258c\u258b\u258b\u258a\u2589\"[(remainder - 1) * UNICODE_BAR_CHAR_SIZE], UNICODE_BAR_CHAR_SIZE);\n-            dst += UNICODE_BAR_CHAR_SIZE;\n-        }\n-\n-        *dst = 0;\n-    }\n-\n-    inline std::string render(double width)\n-    {\n-        std::string res(getWidthInBytes(width), '\\0');\n-        render(width, res.data());\n-        return res;\n-    }\n+    void render(double width, char * dst);\n+    std::string render(double width);\n }\ndiff --git a/src/Common/ya.make b/src/Common/ya.make\nindex 9b671e7b9eed..fb04ecaa1412 100644\n--- a/src/Common/ya.make\n+++ b/src/Common/ya.make\n@@ -99,6 +99,7 @@ SRCS(\n     ThreadProfileEvents.cpp\n     ThreadStatus.cpp\n     TraceCollector.cpp\n+    UnicodeBar.cpp\n     UTF8Helpers.cpp\n     WeakHash.cpp\n     ZooKeeper/IKeeper.cpp\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01502_bar_overflow.reference b/tests/queries/0_stateless/01502_bar_overflow.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01502_bar_overflow.sql b/tests/queries/0_stateless/01502_bar_overflow.sql\nnew file mode 100644\nindex 000000000000..cb3de7ac20b4\n--- /dev/null\n+++ b/tests/queries/0_stateless/01502_bar_overflow.sql\n@@ -0,0 +1,1 @@\n+SELECT bar((greatCircleAngle(100, -1, number, number) - number) * 2, -9223372036854775808, 1023, 100) FROM numbers(1048575); -- { serverError 12 }\n",
  "problem_statement": "It's possible that function `bar` will try to allocate too much memory.\nNot a bug (the user will get exception) but triggers assertion in debug build. See:\r\n\r\nhttps://clickhouse-test-reports.s3.yandex.net/13922/dd4b8b96635beecaaa40cd635f56818242b3f2a3/fuzzer/fuzzer.log#fail1\n",
  "hints_text": "",
  "created_at": "2020-09-19T19:16:24Z",
  "modified_files": [
    "b/src/Common/UnicodeBar.cpp",
    "src/Common/UnicodeBar.h",
    "src/Common/ya.make"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01502_bar_overflow.sql"
  ]
}