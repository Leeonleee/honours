You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Merges failing due to block structure mismatch from projection on aggregatedmergetree
**Describe what's wrong**

version: 24.1.2.5

Merges are failing with this aggregated merge tree schema. Also wondering if there is a different way of going about the projection.

example table schema:
```sql
CREATE TABLE tracing.otel_traces_aggregated_trace_id_ts_local
(
    `trace_id` String,
    `request_id` AggregateFunction(argMin, String, DateTime64(3)),
    `start` SimpleAggregateFunction(min, DateTime64(3)),
    `end` SimpleAggregateFunction(max, DateTime64(3)),
    PROJECTION projection_traces_by_id
    (
        SELECT
          trace_id,
          finalizeAggregation(request_id) AS _request_id
        ORDER BY finalizeAggregation(request_id)
    )
)
ENGINE = AggregatingMergeTree
PARTITION BY toStartOfDay(start)
ORDER BY trace_id
```

merges fail with:
```
Code: 352. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different columns:
finalizeAggregation(request_id) String String(size = 8192)
finalizeAggregation(request_id) String Sparse(size = 8192, String(size = 1), UInt64(size = 0)). (AMBIGUOUS_COLUMN_NAME), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c800f1b in /usr/bin/clickhouse
1. DB::Exception::Exception<std::basic_string_view<char, std::char_traits<char>>&, String, String>(int, FormatStringHelperImpl<std::type_identity<std::basic_string_view<char, std::char_traits<char>>&>::type, std::type_identity<String>::type, std::type_identity<String>::type>, std::basic_string_view<char, std::char_traits<char>>&, String&&, String&&) @ 0x0000000010526e8a in /usr/bin/clickhouse
2. void DB::onError<void, std::basic_string_view<char, std::char_traits<char>>&, String, String>(int, FormatStringHelperImpl<std::type_identity<std::basic_string_view<char, std::char_traits<char>>&>::type, std::type_identity<String>::type, std::type_identity<String>::type>, std::basic_string_view<char, std::char_traits<char>>&, String&&, String&&) @ 0x0000000010526d2e in /usr/bin/clickhouse
3. void DB::checkColumnStructure<void>(DB::ColumnWithTypeAndName const&, DB::ColumnWithTypeAndName const&, std::basic_string_view<char, std::char_traits<char>>, bool, int) (.llvm.8893857084970946537) @ 0x0000000010521323 in /usr/bin/clickhouse
4. DB::Block::insert(DB::ColumnWithTypeAndName) @ 0x000000001052173f in /usr/bin/clickhouse
5. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x0000000010d3e61e in /usr/bin/clickhouse
6. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x0000000012bff813 in /usr/bin/clickhouse
7. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x000000000e7ccef0 in /usr/bin/clickhouse
8. DB::ISimpleTransform::work() @ 0x0000000012977af2 in /usr/bin/clickhouse
9. DB::ExecutionThreadContext::executeTask() @ 0x000000001299371a in /usr/bin/clickhouse
10. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000001298a170 in /usr/bin/clickhouse
11. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000012989928 in /usr/bin/clickhouse
12. DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0x0000000012998017 in /usr/bin/clickhouse
13. DB::PullingPipelineExecutor::pull(DB::Block&) @ 0x00000000129981d3 in /usr/bin/clickhouse
14. DB::MergeTask::ExecuteAndFinalizeHorizontalPart::executeImpl() @ 0x000000001233b6f2 in /usr/bin/clickhouse
15. DB::MergeTask::ExecuteAndFinalizeHorizontalPart::execute() @ 0x000000001233b64b in /usr/bin/clickhouse
16. DB::MergeTask::execute() @ 0x0000000012340d99 in /usr/bin/clickhouse
17. bool std::__function::__policy_invoker<bool ()>::__call_impl<std::__function::__default_alloc_func<DB::MergeTask::MergeProjectionsStage::subtasks::'lambda0'(), bool ()>>(std::__function::__policy_storage const*) @ 0x000000001234536d in /usr/bin/clickhouse
18. DB::MergeTask::MergeProjectionsStage::execute() @ 0x00000000123413ab in /usr/bin/clickhouse
19. DB::MergeTask::execute() @ 0x0000000012340d99 in /usr/bin/clickhouse
20. DB::MergePlainMergeTreeTask::executeStep() @ 0x0000000012723517 in /usr/bin/clickhouse
21. DB::MergeTreeBackgroundExecutor<DB::DynamicRuntimeQueue>::threadFunction() @ 0x00000000123532c4 in /usr/bin/clickhouse
22. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c8eb0c1 in /usr/bin/clickhouse
23. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c8ee8fa in /usr/bin/clickhouse
24. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c8ed6fe in /usr/bin/clickhouse
25. ? @ 0x0000784f86d93609
26. ? @ 0x0000784f86cb8353
27. ```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
