diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index 8c733415dece..77e6d0c674ae 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -482,6 +482,8 @@ class IColumn;
     M(UInt64, limit, 0, "Limit on read rows from the most 'end' result for select query, default 0 means no limit length", 0) \
     M(UInt64, offset, 0, "Offset on read rows from the most 'end' result for select query", 0) \
     \
+    M(UInt64, function_range_max_elements_in_block, 500000000, "Maximum number of values generated by function 'range' per block of data (sum of array sizes for every row in a block, see also 'max_block_size' and 'min_insert_block_size_rows'). It is a safety threshold.", 0) \
+    \
     /** Experimental functions */ \
     M(Bool, allow_experimental_funnel_functions, false, "Enable experimental functions for funnel analysis.", 0) \
     \
diff --git a/src/Functions/array/range.cpp b/src/Functions/array/range.cpp
index 5b9886580dc8..9eefc4f178d8 100644
--- a/src/Functions/array/range.cpp
+++ b/src/Functions/array/range.cpp
@@ -7,6 +7,7 @@
 #include <Columns/ColumnArray.h>
 #include <Columns/ColumnVector.h>
 #include <Interpreters/castColumn.h>
+#include <Interpreters/Context.h>
 #include <numeric>
 
 
@@ -31,8 +32,10 @@ class FunctionRange : public IFunction
 {
 public:
     static constexpr auto name = "range";
-    static constexpr size_t max_elements = 100'000'000;
-    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionRange>(); }
+
+    const size_t max_elements;
+    static FunctionPtr create(ContextPtr context_) { return std::make_shared<FunctionRange>(std::move(context_)); }
+    explicit FunctionRange(ContextPtr context) : max_elements(context->getSettingsRef().function_range_max_elements_in_block) {}
 
 private:
     String getName() const override { return name; }
