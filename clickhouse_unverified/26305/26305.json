{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26305,
  "instance_id": "ClickHouse__ClickHouse-26305",
  "issue_numbers": [
    "26303"
  ],
  "base_commit": "c6177bd0ccfac7151764d42ca1af8114ea146db1",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 8c733415dece..77e6d0c674ae 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -482,6 +482,8 @@ class IColumn;\n     M(UInt64, limit, 0, \"Limit on read rows from the most 'end' result for select query, default 0 means no limit length\", 0) \\\n     M(UInt64, offset, 0, \"Offset on read rows from the most 'end' result for select query\", 0) \\\n     \\\n+    M(UInt64, function_range_max_elements_in_block, 500000000, \"Maximum number of values generated by function 'range' per block of data (sum of array sizes for every row in a block, see also 'max_block_size' and 'min_insert_block_size_rows'). It is a safety threshold.\", 0) \\\n+    \\\n     /** Experimental functions */ \\\n     M(Bool, allow_experimental_funnel_functions, false, \"Enable experimental functions for funnel analysis.\", 0) \\\n     \\\ndiff --git a/src/Functions/array/range.cpp b/src/Functions/array/range.cpp\nindex 5b9886580dc8..9eefc4f178d8 100644\n--- a/src/Functions/array/range.cpp\n+++ b/src/Functions/array/range.cpp\n@@ -7,6 +7,7 @@\n #include <Columns/ColumnArray.h>\n #include <Columns/ColumnVector.h>\n #include <Interpreters/castColumn.h>\n+#include <Interpreters/Context.h>\n #include <numeric>\n \n \n@@ -31,8 +32,10 @@ class FunctionRange : public IFunction\n {\n public:\n     static constexpr auto name = \"range\";\n-    static constexpr size_t max_elements = 100'000'000;\n-    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionRange>(); }\n+\n+    const size_t max_elements;\n+    static FunctionPtr create(ContextPtr context_) { return std::make_shared<FunctionRange>(std::move(context_)); }\n+    explicit FunctionRange(ContextPtr context) : max_elements(context->getSettingsRef().function_range_max_elements_in_block) {}\n \n private:\n     String getName() const override { return name; }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01944_range_max_elements.reference b/tests/queries/0_stateless/01944_range_max_elements.reference\nnew file mode 100644\nindex 000000000000..7763ac4ce962\n--- /dev/null\n+++ b/tests/queries/0_stateless/01944_range_max_elements.reference\n@@ -0,0 +1,33 @@\n+[]\n+[0]\n+[0,1]\n+[]\n+[0]\n+[0,1]\n+[]\n+[0]\n+[0,1]\n+[]\n+[]\n+[0]\n+[0,1]\n+[]\n+[0]\n+[0,1]\n+[]\n+[0]\n+[0,1]\n+[]\n+[0]\n+[]\n+[0]\n+[0,1]\n+[]\n+[0]\n+[0,1]\n+[]\n+[0]\n+[0,1]\n+[]\n+[0]\n+[0,1]\ndiff --git a/tests/queries/0_stateless/01944_range_max_elements.sql b/tests/queries/0_stateless/01944_range_max_elements.sql\nnew file mode 100644\nindex 000000000000..c18f61e31909\n--- /dev/null\n+++ b/tests/queries/0_stateless/01944_range_max_elements.sql\n@@ -0,0 +1,7 @@\n+SET function_range_max_elements_in_block = 10;\n+SELECT range(number % 3) FROM numbers(10);\n+SELECT range(number % 3) FROM numbers(11);\n+SELECT range(number % 3) FROM numbers(12); -- { serverError 69 }\n+\n+SET function_range_max_elements_in_block = 12;\n+SELECT range(number % 3) FROM numbers(12);\n",
  "problem_statement": "Safety threshold on data volume is triggered for function `range`.\ntest\r\n```\r\nDROP TABLE IF EXISTS range_issue;\r\n\r\nCREATE TABLE range_issue\r\nENGINE = Log AS\r\nSELECT range(rand() % 601) AS arr\r\nFROM numbers(21000000)\r\n```\r\n\r\nIt's regression:\r\n20.7 - last version when test passes.\r\n20.8 - first version when  test fails. \r\n\r\nError message & stacktrace:\r\n```\r\nReceived exception from server (version 21.9.1):\r\nCode: 69. DB::Exception: Received from localhost:9000. DB::Exception: A call to function range would produce 314754485 array elements, which is greater than the allowed maximum of 100000000: while executing 'FUNCTION range(modulo(rand(), 601) :: 2) -> range(modulo(rand(), 601)) Array(UInt16) : 1'. Stack trace:\r\n\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x8f9817a in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n1. COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::FunctionRange::executeInternal<unsigned short>(DB::IColumn const*) const @ 0xed7f527 in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n2. DB::FunctionRange::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xed7d422 in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n3. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xb12828e in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n4. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0xfa7621e in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n5. DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0xfa76712 in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n6. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x100d6e15 in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n7. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x1119b6dc in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n8. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x1119ba70 in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n9. DB::ISimpleTransform::work() @ 0x1119e947 in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n10. void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()> >(std::__1::__function::__policy_storage const*) @ 0x11051d7d in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n11. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1104e911 in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n12. DB::PipelineExecutor::executeImpl(unsigned long) @ 0x1104c94f in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n13. DB::PipelineExecutor::execute(unsigned long) @ 0x1104c72d in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n14. void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0x110599bf in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n15. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x8fd903f in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n16. void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*) @ 0x8fdc923 in /usr/lib/debug/.build-id/8c/ba2568d486f3b979445af26ce56a0deaa65ba7.debug\r\n17. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n18. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\r\n\r\n\n",
  "hints_text": "It is related to INSERT block size:\r\n\r\n```\r\nmilovidov-desktop :) SET max_block_size = 1048576\r\n\r\nSET max_block_size = 1048576\r\n\r\nQuery id: 8ef4855a-c407-4ac6-857b-a7e01776592c\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n\r\nmilovidov-desktop :) SELECT range(rand() % 601) AS arr\u3000FROM numbers(21000000)\r\n\r\nSELECT range(rand() % 601) AS arr\r\nFROM numbers(21000000)\r\n\r\nQuery id: 8cf24bdf-4e50-4418-9d10-99653e415705\r\n\r\n\r\n0 rows in set. Elapsed: 0.022 sec. \r\n\r\nReceived exception from server (version 21.9.1):\r\nCode: 69. DB::Exception: Received from localhost:9000. DB::Exception: A call to function range would produce 314413439 array elements, which is greater than the allowed maximum of 100000000: while executing 'FUNCTION range(modulo(rand(), 601) :: 2) -> range(modulo(rand(), 601)) Array(UInt16) : 1'. \r\n```\r\n\r\nThe safety threshold is triggered correctly (the function will produce at least 300 * 1048576 elements that is greater than the threshold).\r\n\nIn this synthetic query the behaviour of ClickHouse is as intented.\r\nDo you have any practical scenario for this case?\nThis safety threshold is redundant as we also have memory limits.\nI will make it configurable.",
  "created_at": "2021-07-14T09:14:50Z"
}