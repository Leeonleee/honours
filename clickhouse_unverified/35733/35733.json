{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 35733,
  "instance_id": "ClickHouse__ClickHouse-35733",
  "issue_numbers": [
    "35726"
  ],
  "base_commit": "31c367d3cd3aefd316778601ff6565119fe36682",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex f81b61ea6483..14d7f34b0571 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -637,6 +637,8 @@ class IColumn;\n     M(DateTimeInputFormat, date_time_input_format, FormatSettings::DateTimeInputFormat::Basic, \"Method to read DateTime from text input formats. Possible values: 'basic', 'best_effort' and 'best_effort_us'.\", 0) \\\n     M(DateTimeOutputFormat, date_time_output_format, FormatSettings::DateTimeOutputFormat::Simple, \"Method to write DateTime to text output. Possible values: 'simple', 'iso', 'unix_timestamp'.\", 0) \\\n     \\\n+    M(Bool, input_format_ipv4_default_on_conversion_error, false, \"Deserialization of IPv4 will use default values instead of throwing exception on conversion error.\", 0) \\\n+    M(Bool, input_format_ipv6_default_on_conversion_error, false, \"Deserialization of IPV6 will use default values instead of throwing exception on conversion error.\", 0) \\\n     M(String, bool_true_representation, \"true\", \"Text to represent bool value in TSV/CSV formats.\", 0) \\\n     M(String, bool_false_representation, \"false\", \"Text to represent bool value in TSV/CSV formats.\", 0) \\\n     \\\ndiff --git a/src/DataTypes/Serializations/SerializationIP.cpp b/src/DataTypes/Serializations/SerializationIP.cpp\nindex 916edced0a31..ed0e9d54415c 100644\n--- a/src/DataTypes/Serializations/SerializationIP.cpp\n+++ b/src/DataTypes/Serializations/SerializationIP.cpp\n@@ -6,6 +6,8 @@\n #include <Common/formatIPv6.h>\n #include <IO/WriteBuffer.h>\n #include <IO/ReadBuffer.h>\n+#include <Formats/FormatSettings.h>\n+\n \n namespace DB\n {\n@@ -47,9 +49,11 @@ void SerializationIPv4::deserializeText(IColumn & column, ReadBuffer & istr, con\n     char buffer[IPV4_MAX_TEXT_LENGTH + 1] = {'\\0'};\n     istr.read(buffer, sizeof(buffer) - 1);\n     UInt32 ipv4_value = 0;\n-    if (!parseIPv4(buffer, reinterpret_cast<unsigned char *>(&ipv4_value)))\n+\n+    bool parse_result = parseIPv4(buffer, reinterpret_cast<unsigned char *>(&ipv4_value));\n+    if (!parse_result && !settings.input_format_ipv4_default_on_conversion_error)\n     {\n-        throw Exception(\"Invalid IPv4 value.\", ErrorCodes::CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING);\n+        throw Exception(\"Invalid IPv4 value\", ErrorCodes::CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING);\n     }\n \n     col->insert(ipv4_value);\n@@ -89,9 +93,11 @@ void SerializationIPv6::deserializeText(IColumn & column, ReadBuffer & istr, con\n     istr.read(buffer, sizeof(buffer) - 1);\n \n     std::string ipv6_value(IPV6_BINARY_LENGTH, '\\0');\n-    if (!parseIPv6(buffer, reinterpret_cast<unsigned char *>(ipv6_value.data())))\n+\n+    bool parse_result = parseIPv6(buffer, reinterpret_cast<unsigned char *>(ipv6_value.data()));\n+    if (!parse_result && !settings.input_format_ipv6_default_on_conversion_error)\n     {\n-        throw Exception(\"Invalid IPv6 value.\", ErrorCodes::CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING);\n+        throw Exception(\"Invalid IPv6 value\", ErrorCodes::CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING);\n     }\n \n     col->insertString(ipv6_value);\ndiff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex 3aa82cb79b4d..f9c834cb3de3 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -77,6 +77,8 @@ FormatSettings getFormatSettings(ContextPtr context, const Settings & settings)\n     format_settings.custom.row_between_delimiter = settings.format_custom_row_between_delimiter;\n     format_settings.date_time_input_format = settings.date_time_input_format;\n     format_settings.date_time_output_format = settings.date_time_output_format;\n+    format_settings.input_format_ipv4_default_on_conversion_error = settings.input_format_ipv4_default_on_conversion_error;\n+    format_settings.input_format_ipv6_default_on_conversion_error = settings.input_format_ipv6_default_on_conversion_error;\n     format_settings.bool_true_representation = settings.bool_true_representation;\n     format_settings.bool_false_representation = settings.bool_false_representation;\n     format_settings.enable_streaming = settings.output_format_enable_streaming;\ndiff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h\nindex bd0a84d9ded0..ea9fcc2658a4 100644\n--- a/src/Formats/FormatSettings.h\n+++ b/src/Formats/FormatSettings.h\n@@ -65,6 +65,9 @@ struct FormatSettings\n \n     DateTimeOutputFormat date_time_output_format = DateTimeOutputFormat::Simple;\n \n+    bool input_format_ipv4_default_on_conversion_error = false;\n+    bool input_format_ipv6_default_on_conversion_error = false;\n+\n     UInt64 input_allow_errors_num = 0;\n     Float32 input_allow_errors_ratio = 0;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02244_ip_address_invalid_insert.reference b/tests/queries/0_stateless/02244_ip_address_invalid_insert.reference\nnew file mode 100644\nindex 000000000000..60e6a5da083b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02244_ip_address_invalid_insert.reference\n@@ -0,0 +1,10 @@\n+1.1.1.1\t1.1.1.1\n+\t0.0.0.0\n+1.1.1.1\t1.1.1.1\n+\t0.0.0.0\n+fe80::9801:43ff:fe1f:7690\tfe80::9801:43ff:fe1f:7690\n+1.1.1.1\t::\n+\t::\n+fe80::9801:43ff:fe1f:7690\tfe80::9801:43ff:fe1f:7690\n+1.1.1.1\t::ffff:1.1.1.1\n+\t::\ndiff --git a/tests/queries/0_stateless/02244_ip_address_invalid_insert.sql b/tests/queries/0_stateless/02244_ip_address_invalid_insert.sql\nnew file mode 100644\nindex 000000000000..4057b9b2d98d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02244_ip_address_invalid_insert.sql\n@@ -0,0 +1,81 @@\n+DROP TABLE IF EXISTS test_table_ipv4;\n+CREATE TABLE test_table_ipv4\n+(\n+    ip String,\n+    ipv4 IPv4\n+) ENGINE = TinyLog;\n+\n+INSERT INTO test_table_ipv4 VALUES ('1.1.1.1', '1.1.1.1'), ('', ''); --{clientError 441}\n+\n+SET input_format_ipv4_default_on_conversion_error = 1;\n+\n+INSERT INTO test_table_ipv4 VALUES ('1.1.1.1', '1.1.1.1'), ('', '');\n+SELECT ip, ipv4 FROM test_table_ipv4;\n+\n+SET input_format_ipv4_default_on_conversion_error = 0;\n+\n+DROP TABLE test_table_ipv4;\n+\n+DROP TABLE IF EXISTS test_table_ipv4_materialized;\n+CREATE TABLE test_table_ipv4_materialized\n+(\n+    ip String,\n+    ipv6 IPv4 MATERIALIZED toIPv4(ip)\n+) ENGINE = TinyLog;\n+\n+INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), (''); --{serverError 441}\n+\n+SET input_format_ipv4_default_on_conversion_error = 1;\n+\n+INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), (''); --{serverError 441}\n+\n+SET cast_ipv4_ipv6_default_on_conversion_error = 1;\n+\n+INSERT INTO test_table_ipv4_materialized(ip) VALUES ('1.1.1.1'), ('');\n+SELECT ip, ipv6 FROM test_table_ipv4_materialized;\n+\n+SET input_format_ipv4_default_on_conversion_error = 0;\n+SET cast_ipv4_ipv6_default_on_conversion_error = 0;\n+\n+DROP TABLE test_table_ipv4_materialized;\n+\n+DROP TABLE IF EXISTS test_table_ipv6;\n+CREATE TABLE test_table_ipv6\n+(\n+    ip String,\n+    ipv6 IPv6\n+) ENGINE = TinyLog;\n+\n+INSERT INTO test_table_ipv6 VALUES ('fe80::9801:43ff:fe1f:7690', 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1', '1.1.1.1'), ('', ''); --{clientError 441}\n+\n+SET input_format_ipv6_default_on_conversion_error = 1;\n+\n+INSERT INTO test_table_ipv6 VALUES ('fe80::9801:43ff:fe1f:7690', 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1', '1.1.1.1'), ('', '');\n+SELECT ip, ipv6 FROM test_table_ipv6;\n+\n+SET input_format_ipv6_default_on_conversion_error = 0;\n+\n+DROP TABLE test_table_ipv6;\n+\n+DROP TABLE IF EXISTS test_table_ipv6_materialized;\n+CREATE TABLE test_table_ipv6_materialized\n+(\n+    ip String,\n+    ipv6 IPv6 MATERIALIZED toIPv6(ip)\n+) ENGINE = TinyLog;\n+\n+INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''); --{serverError 441}\n+\n+SET input_format_ipv6_default_on_conversion_error = 1;\n+\n+INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''); --{serverError 441}\n+\n+SET cast_ipv4_ipv6_default_on_conversion_error = 1;\n+\n+INSERT INTO test_table_ipv6_materialized(ip) VALUES ('fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), ('');\n+SELECT ip, ipv6 FROM test_table_ipv6_materialized;\n+\n+SET input_format_ipv6_default_on_conversion_error = 0;\n+SET cast_ipv4_ipv6_default_on_conversion_error = 0;\n+\n+DROP TABLE test_table_ipv6_materialized;\n",
  "problem_statement": "22.3 toIPv6 backward incompatible despite cast_ipv4_ipv6_default_on_conversion_error\n```sql\r\nCREATE TABLE test_tbl\r\n(   `ip` String, `ipv6` IPv6 MATERIALIZED toIPv6(ip) )\r\nENGINE = Memory;\r\n\r\ninsert into test_tbl(ip) values ( 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''), ('::ffff:1.1.1.1' );\r\n\r\n DB::Exception: Invalid IPv6 value: while executing 'FUNCTION _CAST(toIPv6(ip) :: 2, 'IPv6' :: 1)\r\n\r\n\r\nset cast_ipv4_ipv6_default_on_conversion_error=1;\r\ninsert into test_tbl(ip) values ( 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''), ('::ffff:1.1.1.1' );\r\n \r\n DB::Exception: Invalid IPv6 value: while executing 'FUNCTION _CAST(toIPv6(ip)\r\n```\r\n\r\n`toIPv6OrDefault` does not help in this case.\r\n\r\n```sql\r\nCREATE TABLE test_tbl\r\n(   `ip` String, `ipv6` IPv6 MATERIALIZED toIPv6OrDefault(ip) )\r\nENGINE = Memory;\r\n\r\ninsert into test_tbl(ip) values ( 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''), ('::ffff:1.1.1.1' );\r\n  DB::Exception: Invalid IPv6 value: while executing 'FUNCTION _CAST(toIPv6OrD\r\n\r\ninsert into test_tbl(ip) values ( 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''), ('::ffff:1.1.1.1' ), ('garbudge');\r\n  DB::Exception: Invalid IPv6 value: while executing 'FUNCTION\r\n```\r\n\r\nWA:\r\n\r\n```sql\r\nCREATE TABLE test_tbl\r\n(   `ip` String, `ipv6` IPv6 MATERIALIZED if(ip='', '::', ip) )\r\nENGINE = Memory;\r\n\r\ninsert into test_tbl(ip) values ( 'fe80::9801:43ff:fe1f:7690'), ('1.1.1.1'), (''), ('::ffff:1.1.1.1' );\r\n\r\nselect ip, ipv6 from test_tbl;\r\n\u250c\u2500ip\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500ipv6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 fe80::9801:43ff:fe1f:7690 \u2502 fe80::9801:43ff:fe1f:7690 \u2502\r\n\u2502 1.1.1.1                   \u2502 ::ffff:1.1.1.1            \u2502\r\n\u2502                           \u2502 ::                        \u2502\r\n\u2502 ::ffff:1.1.1.1            \u2502 ::ffff:1.1.1.1            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "",
  "created_at": "2022-03-29T17:03:44Z",
  "modified_files": [
    "src/Core/Settings.h",
    "src/DataTypes/Serializations/SerializationIP.cpp",
    "src/Formats/FormatFactory.cpp",
    "src/Formats/FormatSettings.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02244_ip_address_invalid_insert.reference",
    "b/tests/queries/0_stateless/02244_ip_address_invalid_insert.sql"
  ]
}