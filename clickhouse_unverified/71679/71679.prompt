You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Logical error on empty tuple update
**Describe the bug**
Updating an empty tuple causes a logical error.

**How to reproduce**
Run:
https://fiddle.clickhouse.com/98689e01-0eba-4991-a911-2f7eb6c9701d

Stack trace
```
Logical error: 'This function cannot be used to construct empty tuple. It is a bug'.
Stack trace (when copying this message, always include the lines below):

0. std::exception::capture() @ 0x0000000019432f0b
1. ./contrib/llvm-project/libcxx/include/exception:114: Poco::Exception::Exception(String const&, int) @ 0x0000000038cc0b85
2. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002558d8cb
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000192b1296
4. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x00000000192cacef
5. src/Columns/ColumnTuple.cpp:69: DB::ColumnTuple::create(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&) @ 0x000000003387426b
6. DB::(anonymous namespace)::FunctionIf::executeTuple(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000031fe9f6e
7. DB::(anonymous namespace)::FunctionIf::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000031fddabb
8. DB::IFunction::executeImplDryRun(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000192b02e6
9. DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001a8a5d39
10. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002f5edbe3
11. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002f5ef749
12. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002f5f1028
13. src/Interpreters/ActionsDAG.cpp:734: DB::ActionsDAG::evaluatePartialResult(std::unordered_map<DB::ActionsDAG::Node const*, DB::ColumnWithTypeAndName, std::hash<DB::ActionsDAG::Node const*>, std::equal_to<DB::ActionsDAG::Node const*>, std::allocator<std::pair<DB::ActionsDAG::Node const* const, DB::ColumnWithTypeAndName>>>&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>> const&, unsigned long, bool) @ 0x00000000311b4420
14. src/Interpreters/ActionsDAG.cpp:814: DB::ActionsDAG::updateHeader(DB::Block const&) const @ 0x00000000311b26db
15. src/Processors/Transforms/ExpressionTransform.cpp:10: DB::ExpressionTransform::transformHeader(DB::Block const&, DB::ActionsDAG const&) @ 0x00000000359eec7f
16. src/Processors/QueryPlan/ExpressionStep.cpp:31: DB::ExpressionStep::ExpressionStep(DB::Block const&, DB::ActionsDAG) @ 0x0000000035d5e626
17. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: std::__unique_if<DB::ExpressionStep>::__unique_single std::make_unique[abi:v15007]<DB::ExpressionStep, DB::Block const&, DB::ActionsDAG>(DB::Block const&, DB::ActionsDAG&&) @ 0x000000002fccace7
18. src/Interpreters/MutationsInterpreter.cpp:1332: DB::MutationsInterpreter::addStreamsForLaterStages(std::vector<DB::MutationsInterpreter::Stage, std::allocator<DB::MutationsInterpreter::Stage>> const&, DB::QueryPlan&) const @ 0x000000003268ef84
19. src/Interpreters/MutationsInterpreter.cpp:1392: DB::MutationsInterpreter::validate() @ 0x00000000326932b5
20. src/Interpreters/InterpreterAlterQuery.cpp:238: DB::InterpreterAlterQuery::executeToTable(DB::ASTAlterQuery const&) @ 0x0000000031e82a48
21. src/Interpreters/InterpreterAlterQuery.cpp:80: DB::InterpreterAlterQuery::execute() @ 0x0000000031e7f30a
22. src/Interpreters/executeQuery.cpp:1397: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000032ac11a6
23. src/Interpreters/executeQuery.cpp:1564: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000032ab9db3
24. src/Server/TCPHandler.cpp:595: DB::TCPHandler::runImpl() @ 0x0000000035238ca6
25. src/Server/TCPHandler.cpp:2528: DB::TCPHandler::run() @ 0x000000003526e796
26. base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x0000000038e121b8
27. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000038e132f2
28. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000038d65ce1
29. ./base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000038d60caf
30. ? @ 0x00007ffff7ca1e2e
31. ? @ 0x00007ffff7d33a4c
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
