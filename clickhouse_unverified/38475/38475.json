{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 38475,
  "instance_id": "ClickHouse__ClickHouse-38475",
  "issue_numbers": [
    "37918"
  ],
  "base_commit": "7616a24c40dc2675a359c60a36ddc8f50d1caa5b",
  "patch": "diff --git a/programs/disks/CommandCopy.cpp b/programs/disks/CommandCopy.cpp\nindex f9cd74442874..1e5852fe651e 100644\n--- a/programs/disks/CommandCopy.cpp\n+++ b/programs/disks/CommandCopy.cpp\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include \"ICommand.h\"\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/programs/disks/CommandLink.cpp b/programs/disks/CommandLink.cpp\nindex 6e9a7e64324d..af48f0de0971 100644\n--- a/programs/disks/CommandLink.cpp\n+++ b/programs/disks/CommandLink.cpp\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include \"ICommand.h\"\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/programs/disks/CommandList.cpp b/programs/disks/CommandList.cpp\nindex 8c6bfac3a9b7..e76bb9e65fba 100644\n--- a/programs/disks/CommandList.cpp\n+++ b/programs/disks/CommandList.cpp\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include \"ICommand.h\"\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/programs/disks/CommandListDisks.cpp b/programs/disks/CommandListDisks.cpp\nindex 2bcbb045d678..22cffdd21fd9 100644\n--- a/programs/disks/CommandListDisks.cpp\n+++ b/programs/disks/CommandListDisks.cpp\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include \"ICommand.h\"\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/programs/disks/CommandMove.cpp b/programs/disks/CommandMove.cpp\nindex 4a377cc7225f..6322cf4b47dc 100644\n--- a/programs/disks/CommandMove.cpp\n+++ b/programs/disks/CommandMove.cpp\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include \"ICommand.h\"\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/programs/disks/CommandRead.cpp b/programs/disks/CommandRead.cpp\nindex aa472fa217e6..6b77a27e918e 100644\n--- a/programs/disks/CommandRead.cpp\n+++ b/programs/disks/CommandRead.cpp\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include \"ICommand.h\"\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/programs/disks/CommandRemove.cpp b/programs/disks/CommandRemove.cpp\nindex d9925fbd93eb..c1d3129bb8db 100644\n--- a/programs/disks/CommandRemove.cpp\n+++ b/programs/disks/CommandRemove.cpp\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include \"ICommand.h\"\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/programs/disks/CommandWrite.cpp b/programs/disks/CommandWrite.cpp\nindex c8ae91ea8d51..0b1c5823c812 100644\n--- a/programs/disks/CommandWrite.cpp\n+++ b/programs/disks/CommandWrite.cpp\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include \"ICommand.h\"\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/src/Access/DiskAccessStorage.cpp b/src/Access/DiskAccessStorage.cpp\nindex 994abc7b53ac..0cbe420f3451 100644\n--- a/src/Access/DiskAccessStorage.cpp\n+++ b/src/Access/DiskAccessStorage.cpp\n@@ -15,6 +15,7 @@\n #include <Poco/JSON/Stringifier.h>\n #include <boost/algorithm/string/case_conv.hpp>\n #include <boost/range/adaptor/map.hpp>\n+#include <base/range.h>\n #include <filesystem>\n #include <fstream>\n \ndiff --git a/src/AggregateFunctions/parseAggregateFunctionParameters.h b/src/AggregateFunctions/parseAggregateFunctionParameters.h\nindex a67bc081303b..41a04324f6d0 100644\n--- a/src/AggregateFunctions/parseAggregateFunctionParameters.h\n+++ b/src/AggregateFunctions/parseAggregateFunctionParameters.h\n@@ -8,6 +8,8 @@\n namespace DB\n {\n \n+struct Array;\n+\n Array getAggregateFunctionParametersArray(\n     const ASTPtr & expression_list,\n     const std::string & error_context,\ndiff --git a/src/Backups/registerBackupEnginesFileAndDisk.cpp b/src/Backups/registerBackupEnginesFileAndDisk.cpp\nindex 050a51939b60..380ae36a8e34 100644\n--- a/src/Backups/registerBackupEnginesFileAndDisk.cpp\n+++ b/src/Backups/registerBackupEnginesFileAndDisk.cpp\n@@ -7,6 +7,7 @@\n #include <IO/Archives/hasRegisteredArchiveFileExtension.h>\n #include <Poco/Util/AbstractConfiguration.h>\n #include <filesystem>\n+#include <Interpreters/Context.h>\n \n \n namespace DB\ndiff --git a/src/Common/ShellCommand.h b/src/Common/ShellCommand.h\nindex 190b5bc664ef..dfc4a826f620 100644\n--- a/src/Common/ShellCommand.h\n+++ b/src/Common/ShellCommand.h\n@@ -3,6 +3,7 @@\n #include <memory>\n #include <IO/ReadBufferFromFile.h>\n #include <IO/WriteBufferFromFile.h>\n+#include <unordered_map>\n \n \n namespace DB\ndiff --git a/src/Coordination/CoordinationSettings.cpp b/src/Coordination/CoordinationSettings.cpp\nindex 34d69967828a..4733adcf67a0 100644\n--- a/src/Coordination/CoordinationSettings.cpp\n+++ b/src/Coordination/CoordinationSettings.cpp\n@@ -1,5 +1,4 @@\n #include <Coordination/CoordinationSettings.h>\n-#include <Core/Settings.h>\n #include <Common/logger_useful.h>\n #include <filesystem>\n #include <Coordination/Defines.h>\ndiff --git a/src/Coordination/KeeperServer.cpp b/src/Coordination/KeeperServer.cpp\nindex 7c6ed227a067..864bb477786f 100644\n--- a/src/Coordination/KeeperServer.cpp\n+++ b/src/Coordination/KeeperServer.cpp\n@@ -21,6 +21,7 @@\n #include <Poco/Util/AbstractConfiguration.h>\n #include <Poco/Util/Application.h>\n #include <Common/ZooKeeper/ZooKeeperIO.h>\n+#include <Common/Stopwatch.h>\n \n namespace DB\n {\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 8a1f47ec00ef..09d888a26aa4 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -607,6 +607,9 @@ static constexpr UInt64 operator\"\"_GiB(unsigned long long value)\n     \\\n     M(String, compatibility, \"\", \"Changes other settings according to provided ClickHouse version. If we know that we changed some behaviour in ClickHouse by changing some settings in some version, this compatibility setting will control these settings\", 0) \\\n     \\\n+    M(Map, additional_table_filters, \"\", \"Additional filter expression which would be applied after reading from specified table. Syntax: {'table1': 'expression', 'database.table2': 'expression'}\", 0) \\\n+    M(String, additional_result_filter, \"\", \"Additional filter expression which would be applied to query result\", 0) \\\n+    \\\n     /** Experimental functions */ \\\n     M(Bool, allow_experimental_funnel_functions, false, \"Enable experimental functions for funnel analysis.\", 0) \\\n     M(Bool, allow_experimental_nlp_functions, false, \"Enable experimental functions for natural language processing.\", 0) \\\ndiff --git a/src/Core/SettingsFields.cpp b/src/Core/SettingsFields.cpp\nindex 827a457a5dc5..d77a510d7f9c 100644\n--- a/src/Core/SettingsFields.cpp\n+++ b/src/Core/SettingsFields.cpp\n@@ -4,6 +4,8 @@\n #include <Common/getNumberOfPhysicalCPUCores.h>\n #include <Common/FieldVisitorConvertToNumber.h>\n #include <Common/logger_useful.h>\n+#include <DataTypes/DataTypeMap.h>\n+#include <DataTypes/DataTypeString.h>\n #include <IO/ReadHelpers.h>\n #include <IO/ReadBufferFromString.h>\n #include <IO/WriteHelpers.h>\n@@ -51,6 +53,37 @@ namespace\n         else\n             return applyVisitor(FieldVisitorConvertToNumber<T>(), f);\n     }\n+\n+#ifndef KEEPER_STANDALONE_BUILD\n+    Map stringToMap(const String & str)\n+    {\n+        /// Allow empty string as an empty map\n+        if (str.empty())\n+            return {};\n+\n+        auto type_string = std::make_shared<DataTypeString>();\n+        DataTypeMap type_map(type_string, type_string);\n+        auto serialization = type_map.getSerialization(ISerialization::Kind::DEFAULT);\n+        auto column = type_map.createColumn();\n+\n+        ReadBufferFromString buf(str);\n+        serialization->deserializeTextEscaped(*column, buf, {});\n+        return (*column)[0].safeGet<Map>();\n+    }\n+\n+    Map fieldToMap(const Field & f)\n+    {\n+        if (f.getType() == Field::Types::String)\n+        {\n+            /// Allow to parse Map from string field. For the convenience.\n+            const auto & str = f.get<const String &>();\n+            return stringToMap(str);\n+        }\n+\n+        return f.safeGet<const Map &>();\n+    }\n+#endif\n+\n }\n \n template <typename T>\n@@ -291,6 +324,48 @@ void SettingFieldString::readBinary(ReadBuffer & in)\n     *this = std::move(str);\n }\n \n+#ifndef KEEPER_STANDALONE_BUILD\n+\n+SettingFieldMap::SettingFieldMap(const Field & f) : value(fieldToMap(f)) {}\n+\n+String SettingFieldMap::toString() const\n+{\n+    auto type_string = std::make_shared<DataTypeString>();\n+    DataTypeMap type_map(type_string, type_string);\n+    auto serialization = type_map.getSerialization(ISerialization::Kind::DEFAULT);\n+    auto column = type_map.createColumn();\n+    column->insert(value);\n+\n+    WriteBufferFromOwnString out;\n+    serialization->serializeTextEscaped(*column, 0, out, {});\n+    return out.str();\n+}\n+\n+\n+SettingFieldMap & SettingFieldMap::operator =(const Field & f)\n+{\n+    *this = fieldToMap(f);\n+    return *this;\n+}\n+\n+void SettingFieldMap::parseFromString(const String & str)\n+{\n+    *this = stringToMap(str);\n+}\n+\n+void SettingFieldMap::writeBinary(WriteBuffer & out) const\n+{\n+    DB::writeBinary(value, out);\n+}\n+\n+void SettingFieldMap::readBinary(ReadBuffer & in)\n+{\n+    Map map;\n+    DB::readBinary(map, in);\n+    *this = map;\n+}\n+\n+#endif\n \n namespace\n {\ndiff --git a/src/Core/SettingsFields.h b/src/Core/SettingsFields.h\nindex 4033eb2b5982..20f2b34084e8 100644\n--- a/src/Core/SettingsFields.h\n+++ b/src/Core/SettingsFields.h\n@@ -168,6 +168,32 @@ struct SettingFieldString\n     void readBinary(ReadBuffer & in);\n };\n \n+#ifndef KEEPER_STANDALONE_BUILD\n+\n+struct SettingFieldMap\n+{\n+public:\n+    Map value;\n+    bool changed = false;\n+\n+    explicit SettingFieldMap(const Map & map = {}) : value(map) {}\n+    explicit SettingFieldMap(Map && map) : value(std::move(map)) {}\n+    explicit SettingFieldMap(const Field & f);\n+\n+    SettingFieldMap & operator =(const Map & map) { value = map; changed = true; return *this; }\n+    SettingFieldMap & operator =(const Field & f);\n+\n+    operator const Map &() const { return value; } /// NOLINT\n+    explicit operator Field() const { return value; }\n+\n+    String toString() const;\n+    void parseFromString(const String & str);\n+\n+    void writeBinary(WriteBuffer & out) const;\n+    void readBinary(ReadBuffer & in);\n+};\n+\n+#endif\n \n struct SettingFieldChar\n {\ndiff --git a/src/Disks/DiskEncrypted.cpp b/src/Disks/DiskEncrypted.cpp\nindex 8edb00e5a67b..e6479727aad8 100644\n--- a/src/Disks/DiskEncrypted.cpp\n+++ b/src/Disks/DiskEncrypted.cpp\n@@ -8,6 +8,8 @@\n #include <IO/ReadBufferFromString.h>\n #include <IO/WriteBufferFromEncryptedFile.h>\n #include <boost/algorithm/hex.hpp>\n+#include <Common/quoteString.h>\n+#include <Common/typeid_cast.h>\n \n \n namespace DB\ndiff --git a/src/Disks/IDisk.h b/src/Disks/IDisk.h\nindex 941df99298b3..2337fa00af5c 100644\n--- a/src/Disks/IDisk.h\n+++ b/src/Disks/IDisk.h\n@@ -1,7 +1,6 @@\n #pragma once\n \n #include <Interpreters/Context_fwd.h>\n-#include <Interpreters/Context.h>\n #include <Core/Defines.h>\n #include <base/types.h>\n #include <Common/CurrentMetrics.h>\n@@ -41,6 +40,10 @@ namespace ErrorCodes\n     extern const int NOT_IMPLEMENTED;\n }\n \n+class IDisk;\n+using DiskPtr = std::shared_ptr<IDisk>;\n+using DisksMap = std::map<String, DiskPtr>;\n+\n class IReservation;\n using ReservationPtr = std::unique_ptr<IReservation>;\n using Reservations = std::vector<ReservationPtr>;\n@@ -363,7 +366,6 @@ class IDisk : public Space\n     std::unique_ptr<Executor> executor;\n };\n \n-using DiskPtr = std::shared_ptr<IDisk>;\n using Disks = std::vector<DiskPtr>;\n \n /**\ndiff --git a/src/Disks/IO/CachedReadBufferFromRemoteFS.cpp b/src/Disks/IO/CachedReadBufferFromRemoteFS.cpp\nindex b929cea02360..a3d5cfc408d0 100644\n--- a/src/Disks/IO/CachedReadBufferFromRemoteFS.cpp\n+++ b/src/Disks/IO/CachedReadBufferFromRemoteFS.cpp\n@@ -6,6 +6,7 @@\n #include <Common/assert_cast.h>\n #include <Common/hex.h>\n #include <Common/getRandomASCIIString.h>\n+#include <Interpreters/Context.h>\n \n \n namespace ProfileEvents\ndiff --git a/src/Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.h b/src/Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.h\nindex 6df093ebd433..34b3d86b3556 100644\n--- a/src/Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.h\n+++ b/src/Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.h\n@@ -10,6 +10,7 @@\n #include <Disks/IO/WriteIndirectBufferFromRemoteFS.h>\n #include <Disks/ObjectStorages/IObjectStorage.h>\n #include <Common/getRandomASCIIString.h>\n+#include <Common/MultiVersion.h>\n \n \n namespace DB\ndiff --git a/src/Disks/ObjectStorages/AzureBlobStorage/registerDiskAzureBlobStorage.cpp b/src/Disks/ObjectStorages/AzureBlobStorage/registerDiskAzureBlobStorage.cpp\nindex 44976b7cf2d6..dc70008649e4 100644\n--- a/src/Disks/ObjectStorages/AzureBlobStorage/registerDiskAzureBlobStorage.cpp\n+++ b/src/Disks/ObjectStorages/AzureBlobStorage/registerDiskAzureBlobStorage.cpp\n@@ -12,6 +12,7 @@\n #include <Disks/ObjectStorages/AzureBlobStorage/AzureBlobStorageAuth.h>\n #include <Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.h>\n #include <Disks/ObjectStorages/MetadataStorageFromDisk.h>\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/src/Disks/ObjectStorages/DiskObjectStorage.cpp b/src/Disks/ObjectStorages/DiskObjectStorage.cpp\nindex ca414a7ee72f..0b7d16bd895d 100644\n--- a/src/Disks/ObjectStorages/DiskObjectStorage.cpp\n+++ b/src/Disks/ObjectStorages/DiskObjectStorage.cpp\n@@ -18,6 +18,7 @@\n #include <Disks/ObjectStorages/DiskObjectStorageTransaction.h>\n #include <Disks/FakeDiskTransaction.h>\n #include <Poco/Util/AbstractConfiguration.h>\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/src/Disks/ObjectStorages/DiskObjectStorageCommon.cpp b/src/Disks/ObjectStorages/DiskObjectStorageCommon.cpp\nindex 99606a185174..b8ab2f49202e 100644\n--- a/src/Disks/ObjectStorages/DiskObjectStorageCommon.cpp\n+++ b/src/Disks/ObjectStorages/DiskObjectStorageCommon.cpp\n@@ -3,6 +3,7 @@\n #include <Common/FileCacheFactory.h>\n #include <Common/IFileCache.h>\n #include <Common/FileCacheSettings.h>\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/src/Disks/ObjectStorages/FakeMetadataStorageFromDisk.h b/src/Disks/ObjectStorages/FakeMetadataStorageFromDisk.h\nindex b6426df1e9af..6d5ae12a1575 100644\n--- a/src/Disks/ObjectStorages/FakeMetadataStorageFromDisk.h\n+++ b/src/Disks/ObjectStorages/FakeMetadataStorageFromDisk.h\n@@ -1,5 +1,6 @@\n #pragma once\n \n+#include <Disks/IDisk.h>\n #include <Disks/ObjectStorages/IMetadataStorage.h>\n #include <Disks/ObjectStorages/MetadataFromDiskTransactionState.h>\n #include <Disks/ObjectStorages/MetadataStorageFromDiskTransactionOperations.h>\ndiff --git a/src/Disks/ObjectStorages/IObjectStorage.cpp b/src/Disks/ObjectStorages/IObjectStorage.cpp\nindex f9c5c139b953..f3ac94768d80 100644\n--- a/src/Disks/ObjectStorages/IObjectStorage.cpp\n+++ b/src/Disks/ObjectStorages/IObjectStorage.cpp\n@@ -2,6 +2,7 @@\n #include <Disks/IO/ThreadPoolRemoteFSReader.h>\n #include <IO/WriteBufferFromFileBase.h>\n #include <IO/copyData.h>\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/src/Disks/ObjectStorages/IObjectStorage.h b/src/Disks/ObjectStorages/IObjectStorage.h\nindex 06398b11aec5..1ab2d75ff866 100644\n--- a/src/Disks/ObjectStorages/IObjectStorage.h\n+++ b/src/Disks/ObjectStorages/IObjectStorage.h\n@@ -7,6 +7,7 @@\n #include <optional>\n \n #include <Poco/Timestamp.h>\n+#include <Poco/Util/AbstractConfiguration.h>\n #include <Core/Defines.h>\n #include <Common/Exception.h>\n #include <IO/ReadSettings.h>\ndiff --git a/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp b/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp\nindex 55c466d45f6c..d36bf655c023 100644\n--- a/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp\n+++ b/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp\n@@ -28,6 +28,7 @@\n #include <Common/FileCacheFactory.h>\n #include <Common/getRandomASCIIString.h>\n #include <Common/logger_useful.h>\n+#include <Common/MultiVersion.h>\n \n namespace DB\n {\ndiff --git a/src/Disks/ObjectStorages/S3/S3ObjectStorage.h b/src/Disks/ObjectStorages/S3/S3ObjectStorage.h\nindex 983972246296..8f20671d8413 100644\n--- a/src/Disks/ObjectStorages/S3/S3ObjectStorage.h\n+++ b/src/Disks/ObjectStorages/S3/S3ObjectStorage.h\n@@ -11,6 +11,7 @@\n #include <aws/s3/model/HeadObjectResult.h>\n #include <aws/s3/model/ListObjectsV2Result.h>\n #include <Storages/StorageS3Settings.h>\n+#include <Common/MultiVersion.h>\n \n \n namespace DB\ndiff --git a/src/IO/ReadBufferFromFileDescriptor.cpp b/src/IO/ReadBufferFromFileDescriptor.cpp\nindex 406b519df794..920e76cd7d0d 100644\n--- a/src/IO/ReadBufferFromFileDescriptor.cpp\n+++ b/src/IO/ReadBufferFromFileDescriptor.cpp\n@@ -10,6 +10,7 @@\n #include <IO/Progress.h>\n #include <Common/filesystemHelpers.h>\n #include <sys/stat.h>\n+#include <Interpreters/Context.h>\n \n \n #ifdef HAS_RESERVED_IDENTIFIER\ndiff --git a/src/IO/ReadBufferFromFileDescriptor.h b/src/IO/ReadBufferFromFileDescriptor.h\nindex 40b0717c8b15..73c651189cdf 100644\n--- a/src/IO/ReadBufferFromFileDescriptor.h\n+++ b/src/IO/ReadBufferFromFileDescriptor.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n #include <IO/ReadBufferFromFileBase.h>\n-#include <Interpreters/Context.h>\n+#include <Interpreters/Context_fwd.h>\n \n #include <unistd.h>\n \ndiff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex a4bdc4ed2523..8a14c09819a6 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -1842,6 +1842,7 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n     bool second_stage_,\n     bool only_types,\n     const FilterDAGInfoPtr & filter_info_,\n+    const FilterDAGInfoPtr & additional_filter,\n     const Block & source_header)\n     : first_stage(first_stage_)\n     , second_stage(second_stage_)\n@@ -1908,6 +1909,13 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n                 columns_for_final.begin(), columns_for_final.end());\n         }\n \n+        if (storage && additional_filter)\n+        {\n+            Names columns_for_additional_filter = additional_filter->actions->getRequiredColumnsNames();\n+            additional_required_columns_after_prewhere.insert(additional_required_columns_after_prewhere.end(),\n+                columns_for_additional_filter.begin(), columns_for_additional_filter.end());\n+        }\n+\n         if (storage && filter_info_)\n         {\n             filter_info = filter_info_;\ndiff --git a/src/Interpreters/ExpressionAnalyzer.h b/src/Interpreters/ExpressionAnalyzer.h\nindex 10c11499f14b..da92bc108322 100644\n--- a/src/Interpreters/ExpressionAnalyzer.h\n+++ b/src/Interpreters/ExpressionAnalyzer.h\n@@ -281,6 +281,7 @@ struct ExpressionAnalysisResult\n         bool second_stage,\n         bool only_types,\n         const FilterDAGInfoPtr & filter_info,\n+        const FilterDAGInfoPtr & additional_filter, /// for setting additional_filters\n         const Block & source_header);\n \n     /// Filter for row-level security.\ndiff --git a/src/Interpreters/IInterpreterUnionOrSelectQuery.cpp b/src/Interpreters/IInterpreterUnionOrSelectQuery.cpp\nindex 4ac1d33468fa..05486f65da5c 100644\n--- a/src/Interpreters/IInterpreterUnionOrSelectQuery.cpp\n+++ b/src/Interpreters/IInterpreterUnionOrSelectQuery.cpp\n@@ -4,6 +4,13 @@\n #include <Processors/QueryPlan/BuildQueryPipelineSettings.h>\n #include <Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.h>\n #include <QueryPipeline/QueryPipelineBuilder.h>\n+#include <Parsers/ExpressionListParsers.h>\n+#include <Parsers/parseQuery.h>\n+#include <Interpreters/TreeRewriter.h>\n+#include <Interpreters/ActionsDAG.h>\n+#include <Interpreters/ExpressionAnalyzer.h>\n+#include <Processors/QueryPlan/IQueryPlanStep.h>\n+#include <Processors/QueryPlan/FilterStep.h>\n \n namespace DB\n {\n@@ -81,6 +88,53 @@ void IInterpreterUnionOrSelectQuery::setQuota(QueryPipeline & pipeline) const\n     pipeline.setQuota(quota);\n }\n \n+static ASTPtr parseAdditionalPostFilter(const Context & context)\n+{\n+    const auto & settings = context.getSettingsRef();\n+    const String & filter = settings.additional_result_filter;\n+    if (filter.empty())\n+        return nullptr;\n+\n+    ParserExpression parser;\n+    return parseQuery(\n+                parser, filter.data(), filter.data() + filter.size(),\n+                \"additional filter\", settings.max_query_size, settings.max_parser_depth);\n+}\n+\n+static ActionsDAGPtr makeAdditionalPostFilter(ASTPtr & ast, ContextPtr context, const Block & header)\n+{\n+    auto syntax_result = TreeRewriter(context).analyze(ast, header.getNamesAndTypesList());\n+    String result_column_name = ast->getColumnName();\n+    auto dag = ExpressionAnalyzer(ast, syntax_result, context).getActionsDAG(false, false);\n+    const ActionsDAG::Node * result_node = &dag->findInIndex(result_column_name);\n+    auto & index = dag->getIndex();\n+    index.clear();\n+    index.reserve(dag->getInputs().size() + 1);\n+    for (const auto * node : dag->getInputs())\n+        index.push_back(node);\n+\n+    index.push_back(result_node);\n+\n+    return dag;\n+}\n+\n+void IInterpreterUnionOrSelectQuery::addAdditionalPostFilter(QueryPlan & plan) const\n+{\n+    if (options.subquery_depth != 0)\n+        return;\n+\n+    auto ast = parseAdditionalPostFilter(*context);\n+    if (!ast)\n+        return;\n+\n+    auto dag = makeAdditionalPostFilter(ast, context, plan.getCurrentDataStream().header);\n+    std::string filter_name = dag->getIndex().back()->result_name;\n+    auto filter_step = std::make_unique<FilterStep>(\n+        plan.getCurrentDataStream(), std::move(dag), std::move(filter_name), true);\n+    filter_step->setStepDescription(\"Additional result filter\");\n+    plan.addStep(std::move(filter_step));\n+}\n+\n void IInterpreterUnionOrSelectQuery::addStorageLimits(const StorageLimitsList & limits)\n {\n     for (const auto & val : limits)\ndiff --git a/src/Interpreters/IInterpreterUnionOrSelectQuery.h b/src/Interpreters/IInterpreterUnionOrSelectQuery.h\nindex 98e0432f3d55..a1c86f9de857 100644\n--- a/src/Interpreters/IInterpreterUnionOrSelectQuery.h\n+++ b/src/Interpreters/IInterpreterUnionOrSelectQuery.h\n@@ -72,6 +72,8 @@ class IInterpreterUnionOrSelectQuery : public IInterpreter\n \n     /// Set quotas to query pipeline.\n     void setQuota(QueryPipeline & pipeline) const;\n+    /// Add filter from additional_post_filter setting.\n+    void addAdditionalPostFilter(QueryPlan & plan) const;\n \n     static StorageLimits getStorageLimits(const Context & context, const SelectQueryOptions & options);\n };\ndiff --git a/src/Interpreters/InterpreterSelectIntersectExceptQuery.cpp b/src/Interpreters/InterpreterSelectIntersectExceptQuery.cpp\nindex 4d0c82d33453..d6add3f77a9d 100644\n--- a/src/Interpreters/InterpreterSelectIntersectExceptQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectIntersectExceptQuery.cpp\n@@ -138,6 +138,7 @@ void InterpreterSelectIntersectExceptQuery::buildQueryPlan(QueryPlan & query_pla\n     auto step = std::make_unique<IntersectOrExceptStep>(std::move(data_streams), final_operator, max_threads);\n     query_plan.unitePlans(std::move(step), std::move(plans));\n \n+    addAdditionalPostFilter(query_plan);\n     query_plan.addInterpreterContext(context);\n }\n \ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex a05d353ac733..56b6cd3c1362 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -109,8 +109,17 @@ namespace ErrorCodes\n }\n \n /// Assumes `storage` is set and the table filter (row-level security) is not empty.\n-String InterpreterSelectQuery::generateFilterActions(ActionsDAGPtr & actions, const Names & prerequisite_columns) const\n+FilterDAGInfoPtr generateFilterActions(\n+    const StorageID & table_id,\n+    const ASTPtr & row_policy_filter,\n+    const ContextPtr & context,\n+    const StoragePtr & storage,\n+    const StorageSnapshotPtr & storage_snapshot,\n+    const StorageMetadataPtr & metadata_snapshot,\n+    Names & prerequisite_columns)\n {\n+    auto filter_info = std::make_shared<FilterDAGInfo>();\n+\n     const auto & db_name = table_id.getDatabaseName();\n     const auto & table_name = table_id.getTableName();\n \n@@ -146,16 +155,24 @@ String InterpreterSelectQuery::generateFilterActions(ActionsDAGPtr & actions, co\n     /// Using separate expression analyzer to prevent any possible alias injection\n     auto syntax_result = TreeRewriter(context).analyzeSelect(query_ast, TreeRewriterResult({}, storage, storage_snapshot));\n     SelectQueryExpressionAnalyzer analyzer(query_ast, syntax_result, context, metadata_snapshot);\n-    actions = analyzer.simpleSelectActions();\n+    filter_info->actions = analyzer.simpleSelectActions();\n+\n+    filter_info->column_name = expr_list->children.at(0)->getColumnName();\n+    filter_info->actions->removeUnusedActions(NameSet{filter_info->column_name});\n+    filter_info->actions->projectInput(false);\n \n-    auto column_name = expr_list->children.at(0)->getColumnName();\n-    actions->removeUnusedActions(NameSet{column_name});\n-    actions->projectInput(false);\n+    for (const auto * node : filter_info->actions->getInputs())\n+        filter_info->actions->getIndex().push_back(node);\n \n-    for (const auto * node : actions->getInputs())\n-        actions->getIndex().push_back(node);\n+    auto required_columns_from_filter = filter_info->actions->getRequiredColumns();\n+\n+    for (const auto & column : required_columns_from_filter)\n+    {\n+        if (prerequisite_columns.end() == std::find(prerequisite_columns.begin(), prerequisite_columns.end(), column.name))\n+            prerequisite_columns.push_back(column.name);\n+    }\n \n-    return column_name;\n+    return filter_info;\n }\n \n InterpreterSelectQuery::InterpreterSelectQuery(\n@@ -269,6 +286,32 @@ static void checkAccessRightsForSelect(\n     context->checkAccess(AccessType::SELECT, table_id, syntax_analyzer_result.requiredSourceColumnsForAccessCheck());\n }\n \n+static ASTPtr parseAdditionalFilterConditionForTable(\n+    const Map & setting,\n+    const DatabaseAndTableWithAlias & target,\n+    const Context & context)\n+{\n+    for (size_t i = 0; i < setting.size(); ++i)\n+    {\n+        const auto & tuple = setting[i].safeGet<const Tuple &>();\n+        auto & table = tuple.at(0).safeGet<String>();\n+        auto & filter = tuple.at(1).safeGet<String>();\n+\n+        if ((table == target.table && context.getCurrentDatabase() == target.database) ||\n+            (table == target.database + '.' + target.table))\n+        {\n+            /// Try to parse expression\n+            ParserExpression parser;\n+            const auto & settings = context.getSettingsRef();\n+            return parseQuery(\n+                parser, filter.data(), filter.data() + filter.size(),\n+                \"additional filter\", settings.max_query_size, settings.max_parser_depth);\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n /// Returns true if we should ignore quotas and limits for a specified table in the system database.\n static bool shouldIgnoreQuotaAndLimits(const StorageID & table_id)\n {\n@@ -448,6 +491,10 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n     if (storage)\n         view = dynamic_cast<StorageView *>(storage.get());\n \n+    if (!settings.additional_table_filters.value.empty() && storage && !joined_tables.tablesWithColumns().empty())\n+        query_info.additional_filter_ast = parseAdditionalFilterConditionForTable(\n+            settings.additional_table_filters, joined_tables.tablesWithColumns().front().table, *context);\n+\n     auto analyze = [&] (bool try_move_to_prewhere)\n     {\n         /// Allow push down and other optimizations for VIEW: replace with subquery and rewrite it.\n@@ -566,16 +613,16 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n             /// Fix source_header for filter actions.\n             if (row_policy_filter)\n             {\n-                filter_info = std::make_shared<FilterDAGInfo>();\n-                filter_info->column_name = generateFilterActions(filter_info->actions, required_columns);\n+                filter_info = generateFilterActions(\n+                    table_id, row_policy_filter, context, storage, storage_snapshot, metadata_snapshot, required_columns);\n+            }\n \n-                auto required_columns_from_filter = filter_info->actions->getRequiredColumns();\n+            if (query_info.additional_filter_ast)\n+            {\n+                additional_filter_info = generateFilterActions(\n+                    table_id, query_info.additional_filter_ast, context, storage, storage_snapshot, metadata_snapshot, required_columns);\n \n-                for (const auto & column : required_columns_from_filter)\n-                {\n-                    if (required_columns.end() == std::find(required_columns.begin(), required_columns.end(), column.name))\n-                        required_columns.push_back(column.name);\n-                }\n+                additional_filter_info->do_remove_column = true;\n             }\n \n             source_header = storage_snapshot->getSampleBlockForColumns(required_columns);\n@@ -735,7 +782,7 @@ Block InterpreterSelectQuery::getSampleBlockImpl()\n         && options.to_stage > QueryProcessingStage::WithMergeableState;\n \n     analysis_result = ExpressionAnalysisResult(\n-        *query_analyzer, metadata_snapshot, first_stage, second_stage, options.only_analyze, filter_info, source_header);\n+        *query_analyzer, metadata_snapshot, first_stage, second_stage, options.only_analyze, filter_info, additional_filter_info, source_header);\n \n     if (options.to_stage == QueryProcessingStage::Enum::FetchColumns)\n     {\n@@ -1303,6 +1350,18 @@ void InterpreterSelectQuery::executeImpl(QueryPlan & query_plan, std::optional<P\n                 query_plan.addStep(std::move(row_level_security_step));\n             }\n \n+            if (additional_filter_info)\n+            {\n+                auto additional_filter_step = std::make_unique<FilterStep>(\n+                    query_plan.getCurrentDataStream(),\n+                    additional_filter_info->actions,\n+                    additional_filter_info->column_name,\n+                    additional_filter_info->do_remove_column);\n+\n+                additional_filter_step->setStepDescription(\"Additional filter\");\n+                query_plan.addStep(std::move(additional_filter_step));\n+            }\n+\n             if (expressions.before_array_join)\n             {\n                 QueryPlanStepPtr before_array_join_step\n@@ -1945,6 +2004,7 @@ void InterpreterSelectQuery::executeFetchColumns(QueryProcessingStage::Enum proc\n         && storage\n         && storage->getName() != \"MaterializedMySQL\"\n         && !row_policy_filter\n+        && !query_info.additional_filter_ast\n         && processing_stage == QueryProcessingStage::FetchColumns\n         && query_analyzer->hasAggregation()\n         && (query_analyzer->aggregates().size() == 1)\n@@ -2044,6 +2104,7 @@ void InterpreterSelectQuery::executeFetchColumns(QueryProcessingStage::Enum proc\n         && !query.limit_with_ties\n         && !query.prewhere()\n         && !query.where()\n+        && !query_info.additional_filter_ast\n         && !query.groupBy()\n         && !query.having()\n         && !query.orderBy()\ndiff --git a/src/Interpreters/InterpreterSelectQuery.h b/src/Interpreters/InterpreterSelectQuery.h\nindex a95ff00bc0dc..e70490f13ac8 100644\n--- a/src/Interpreters/InterpreterSelectQuery.h\n+++ b/src/Interpreters/InterpreterSelectQuery.h\n@@ -189,8 +189,6 @@ class InterpreterSelectQuery : public IInterpreterUnionOrSelectQuery\n     void\n     executeMergeSorted(QueryPlan & query_plan, const SortDescription & sort_description, UInt64 limit, const std::string & description);\n \n-    String generateFilterActions(ActionsDAGPtr & actions, const Names & prerequisite_columns = {}) const;\n-\n     enum class Modificator\n     {\n         ROLLUP = 0,\n@@ -217,6 +215,9 @@ class InterpreterSelectQuery : public IInterpreterUnionOrSelectQuery\n     ASTPtr row_policy_filter;\n     FilterDAGInfoPtr filter_info;\n \n+    /// For additional_filter setting.\n+    FilterDAGInfoPtr additional_filter_info;\n+\n     QueryProcessingStage::Enum from_stage = QueryProcessingStage::FetchColumns;\n \n     /// List of columns to read to execute the query.\ndiff --git a/src/Interpreters/InterpreterSelectWithUnionQuery.cpp b/src/Interpreters/InterpreterSelectWithUnionQuery.cpp\nindex 9f87a47fced0..bdec44b74f7c 100644\n--- a/src/Interpreters/InterpreterSelectWithUnionQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectWithUnionQuery.cpp\n@@ -357,6 +357,7 @@ void InterpreterSelectWithUnionQuery::buildQueryPlan(QueryPlan & query_plan)\n         }\n     }\n \n+    addAdditionalPostFilter(query_plan);\n     query_plan.addInterpreterContext(context);\n }\n \ndiff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h\nindex b73919f4f368..1999eff37a8d 100644\n--- a/src/Parsers/IAST.h\n+++ b/src/Parsers/IAST.h\n@@ -5,7 +5,6 @@\n #include <Parsers/IdentifierQuotingStyle.h>\n #include <Common/Exception.h>\n #include <Common/TypePromotion.h>\n-#include <Core/Settings.h>\n #include <IO/WriteBufferFromString.h>\n \n #include <algorithm>\n@@ -26,7 +25,7 @@ namespace ErrorCodes\n using IdentifierNameSet = std::set<String>;\n \n class WriteBuffer;\n-\n+using Strings = std::vector<String>;\n \n /** Element of the syntax tree (hereinafter - directed acyclic graph with elements of semantics)\n   */\ndiff --git a/src/Parsers/MySQL/ASTDeclareOption.h b/src/Parsers/MySQL/ASTDeclareOption.h\nindex a95299245676..c493c49c61bc 100644\n--- a/src/Parsers/MySQL/ASTDeclareOption.h\n+++ b/src/Parsers/MySQL/ASTDeclareOption.h\n@@ -3,6 +3,7 @@\n #include <Parsers/IAST.h>\n #include <Parsers/IParserBase.h>\n #include <Parsers/CommonParsers.h>\n+#include <unordered_map>\n \n namespace DB\n {\ndiff --git a/src/Parsers/ParserSetQuery.cpp b/src/Parsers/ParserSetQuery.cpp\nindex 5f69db633ac4..0ff437bcfb17 100644\n--- a/src/Parsers/ParserSetQuery.cpp\n+++ b/src/Parsers/ParserSetQuery.cpp\n@@ -12,12 +12,63 @@\n namespace DB\n {\n \n+class ParserLiteralOrMap : public IParserBase\n+{\n+public:\n+protected:\n+    const char * getName() const override { return \"literal or map\"; }\n+    bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override\n+    {\n+        {\n+            ParserLiteral literal;\n+            if (literal.parse(pos, node, expected))\n+                return true;\n+        }\n+\n+        ParserToken l_br(TokenType::OpeningCurlyBrace);\n+        ParserToken r_br(TokenType::ClosingCurlyBrace);\n+        ParserToken comma(TokenType::Comma);\n+        ParserToken colon(TokenType::Colon);\n+        ParserStringLiteral literal;\n+\n+        if (!l_br.ignore(pos, expected))\n+            return false;\n+\n+        Map map;\n+\n+        while (!r_br.ignore(pos, expected))\n+        {\n+            if (!map.empty() && !comma.ignore(pos, expected))\n+                return false;\n+\n+            ASTPtr key;\n+            ASTPtr val;\n+\n+            if (!literal.parse(pos, key, expected))\n+                return false;\n+\n+            if (!colon.ignore(pos, expected))\n+                return false;\n+\n+            if (!literal.parse(pos, val, expected))\n+                return false;\n+\n+            Tuple tuple;\n+            tuple.push_back(std::move(key->as<ASTLiteral>()->value));\n+            tuple.push_back(std::move(val->as<ASTLiteral>()->value));\n+            map.push_back(std::move(tuple));\n+        }\n+\n+        node = std::make_shared<ASTLiteral>(std::move(map));\n+        return true;\n+    }\n+};\n \n /// Parse `name = value`.\n bool ParserSetQuery::parseNameValuePair(SettingChange & change, IParser::Pos & pos, Expected & expected)\n {\n     ParserCompoundIdentifier name_p;\n-    ParserLiteral value_p;\n+    ParserLiteralOrMap value_p;\n     ParserToken s_eq(TokenType::Equals);\n \n     ASTPtr name;\ndiff --git a/src/Processors/Formats/Impl/ArrowBufferedStreams.cpp b/src/Processors/Formats/Impl/ArrowBufferedStreams.cpp\nindex 5232d9166af0..ebd9783b4fd4 100644\n--- a/src/Processors/Formats/Impl/ArrowBufferedStreams.cpp\n+++ b/src/Processors/Formats/Impl/ArrowBufferedStreams.cpp\n@@ -13,6 +13,7 @@\n #include <arrow/buffer.h>\n #include <arrow/io/memory.h>\n #include <arrow/result.h>\n+#include <Core/Settings.h>\n \n #include <sys/stat.h>\n \ndiff --git a/src/Processors/QueryPlan/ReadFromMergeTree.cpp b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\nindex b4e143cc0027..473798b1a2b9 100644\n--- a/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n+++ b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n@@ -7,6 +7,7 @@\n #include <IO/Operators.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n #include <Interpreters/TreeRewriter.h>\n+#include <Interpreters/Context.h>\n #include <Parsers/ASTFunction.h>\n #include <Parsers/ASTIdentifier.h>\n #include <Parsers/ASTSelectQuery.h>\ndiff --git a/src/Processors/QueryPlan/ReadFromMergeTree.h b/src/Processors/QueryPlan/ReadFromMergeTree.h\nindex 5d5c7e9cb2c6..46be5ea1d7d7 100644\n--- a/src/Processors/QueryPlan/ReadFromMergeTree.h\n+++ b/src/Processors/QueryPlan/ReadFromMergeTree.h\n@@ -1,6 +1,7 @@\n #pragma once\n #include <Processors/QueryPlan/ISourceStep.h>\n #include <Storages/MergeTree/RangesInDataPart.h>\n+#include <Storages/MergeTree/RequestResponse.h>\n \n namespace DB\n {\n@@ -9,6 +10,8 @@ using PartitionIdToMaxBlock = std::unordered_map<String, Int64>;\n \n class Pipe;\n \n+using MergeTreeReadTaskCallback = std::function<std::optional<PartitionReadResponse>(PartitionReadRequest)>;\n+\n struct MergeTreeDataSelectSamplingData\n {\n     bool use_sampling = false;\ndiff --git a/src/Processors/TTL/TTLAggregationAlgorithm.cpp b/src/Processors/TTL/TTLAggregationAlgorithm.cpp\nindex d8b022f0acb1..0d160b8d32d6 100644\n--- a/src/Processors/TTL/TTLAggregationAlgorithm.cpp\n+++ b/src/Processors/TTL/TTLAggregationAlgorithm.cpp\n@@ -1,4 +1,5 @@\n #include <Processors/TTL/TTLAggregationAlgorithm.h>\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\ndiff --git a/src/QueryPipeline/RemoteInserter.cpp b/src/QueryPipeline/RemoteInserter.cpp\nindex ce2ba23576d2..58fed6e54664 100644\n--- a/src/QueryPipeline/RemoteInserter.cpp\n+++ b/src/QueryPipeline/RemoteInserter.cpp\n@@ -7,6 +7,7 @@\n #include <Common/CurrentThread.h>\n #include <Interpreters/InternalTextLogsQueue.h>\n #include <IO/ConnectionTimeouts.h>\n+#include <Core/Settings.h>\n \n \n namespace DB\ndiff --git a/src/Server/KeeperTCPHandler.h b/src/Server/KeeperTCPHandler.h\nindex 9895c335c96a..ee83c4fa21b7 100644\n--- a/src/Server/KeeperTCPHandler.h\n+++ b/src/Server/KeeperTCPHandler.h\n@@ -9,7 +9,6 @@\n #include <Common/MultiVersion.h>\n #include \"IServer.h\"\n #include <Common/Stopwatch.h>\n-#include <Interpreters/Context.h>\n #include <Common/ZooKeeper/ZooKeeperCommon.h>\n #include <Common/ZooKeeper/ZooKeeperConstants.h>\n #include <Common/ConcurrentBoundedQueue.h>\ndiff --git a/src/Storages/MergeTree/BackgroundJobsAssignee.cpp b/src/Storages/MergeTree/BackgroundJobsAssignee.cpp\nindex 81445f40ed6f..9617d16f6f1f 100644\n--- a/src/Storages/MergeTree/BackgroundJobsAssignee.cpp\n+++ b/src/Storages/MergeTree/BackgroundJobsAssignee.cpp\n@@ -2,6 +2,7 @@\n #include <Storages/MergeTree/MergeTreeData.h>\n #include <Common/CurrentMetrics.h>\n #include <Common/randomSeed.h>\n+#include <Interpreters/Context.h>\n #include <pcg_random.hpp>\n #include <random>\n \ndiff --git a/src/Storages/MergeTree/IMergeTreeReader.cpp b/src/Storages/MergeTree/IMergeTreeReader.cpp\nindex b8aeb8e6a5a5..3acb4910e284 100644\n--- a/src/Storages/MergeTree/IMergeTreeReader.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeReader.cpp\n@@ -4,6 +4,7 @@\n #include <Compression/CachedCompressedReadBuffer.h>\n #include <Columns/ColumnArray.h>\n #include <Interpreters/inplaceBlockConversions.h>\n+#include <Interpreters/Context.h>\n #include <Storages/MergeTree/IMergeTreeReader.h>\n #include <Common/typeid_cast.h>\n \ndiff --git a/src/Storages/MergeTree/MergePlainMergeTreeTask.h b/src/Storages/MergeTree/MergePlainMergeTreeTask.h\nindex 0f6d38d2cbfa..7488b9655fe2 100644\n--- a/src/Storages/MergeTree/MergePlainMergeTreeTask.h\n+++ b/src/Storages/MergeTree/MergePlainMergeTreeTask.h\n@@ -4,6 +4,7 @@\n #include <Storages/MergeTree/MergeTask.h>\n #include <Storages/MutationCommands.h>\n #include <Storages/MergeTree/MergeMutateSelectedEntry.h>\n+#include <Interpreters/MergeTreeTransactionHolder.h>\n \n namespace DB\n {\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex 26ac4d362ec5..7c3bc21f3910 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -56,6 +56,9 @@ struct ZeroCopyLock;\n class IBackupEntry;\n using BackupEntries = std::vector<std::pair<String, std::shared_ptr<const IBackupEntry>>>;\n \n+class MergeTreeTransaction;\n+using MergeTreeTransactionPtr = std::shared_ptr<MergeTreeTransaction>;\n+\n /// Auxiliary struct holding information about the future merged or mutated part.\n struct EmergingPartInfo\n {\ndiff --git a/src/Storages/MergeTree/MergeTreePartition.cpp b/src/Storages/MergeTree/MergeTreePartition.cpp\nindex 81026989f955..4ea6ec11ecca 100644\n--- a/src/Storages/MergeTree/MergeTreePartition.cpp\n+++ b/src/Storages/MergeTree/MergeTreePartition.cpp\n@@ -2,6 +2,7 @@\n #include <Storages/MergeTree/MergeTreeData.h>\n #include <Storages/MergeTree/IMergeTreeDataPart.h>\n #include <IO/HashingWriteBuffer.h>\n+#include <Interpreters/Context.h>\n #include <Common/FieldVisitors.h>\n #include <DataTypes/DataTypeDate.h>\n #include <DataTypes/DataTypeTuple.h>\ndiff --git a/src/Storages/MergeTree/MergeTreeWriteAheadLog.cpp b/src/Storages/MergeTree/MergeTreeWriteAheadLog.cpp\nindex 3eb638d15c08..9ed8fe0ad14a 100644\n--- a/src/Storages/MergeTree/MergeTreeWriteAheadLog.cpp\n+++ b/src/Storages/MergeTree/MergeTreeWriteAheadLog.cpp\n@@ -6,6 +6,7 @@\n #include <IO/MemoryReadWriteBuffer.h>\n #include <IO/ReadHelpers.h>\n #include <IO/copyData.h>\n+#include <Interpreters/Context.h>\n #include <Poco/JSON/JSON.h>\n #include <Poco/JSON/Object.h>\n #include <Poco/JSON/Stringifier.h>\ndiff --git a/src/Storages/ReadInOrderOptimizer.cpp b/src/Storages/ReadInOrderOptimizer.cpp\nindex 3ff4baa0b11b..b188cef065ef 100644\n--- a/src/Storages/ReadInOrderOptimizer.cpp\n+++ b/src/Storages/ReadInOrderOptimizer.cpp\n@@ -6,6 +6,7 @@\n #include <Interpreters/replaceAliasColumnsInQuery.h>\n #include <Functions/IFunction.h>\n #include <Interpreters/TableJoin.h>\n+#include <Interpreters/Context.h>\n #include <Parsers/ASTSelectQuery.h>\n #include <Parsers/ASTFunction.h>\n \ndiff --git a/src/Storages/SelectQueryInfo.h b/src/Storages/SelectQueryInfo.h\nindex bdb4c392c480..5046a0b6fe00 100644\n--- a/src/Storages/SelectQueryInfo.h\n+++ b/src/Storages/SelectQueryInfo.h\n@@ -156,6 +156,10 @@ struct SelectQueryInfoBase\n \n     PrewhereInfoPtr prewhere_info;\n \n+    /// This is an additional filer applied to current table.\n+    /// It is needed only for additional PK filtering.\n+    ASTPtr additional_filter_ast;\n+\n     ReadInOrderOptimizerPtr order_optimizer;\n     /// Can be modified while reading from storage\n     InputOrderInfoPtr input_order_info;\ndiff --git a/src/Storages/System/StorageSystemParts.cpp b/src/Storages/System/StorageSystemParts.cpp\nindex 01bba669c0ec..1b207d1d165f 100644\n--- a/src/Storages/System/StorageSystemParts.cpp\n+++ b/src/Storages/System/StorageSystemParts.cpp\n@@ -13,6 +13,7 @@\n #include <Parsers/queryToString.h>\n #include <Common/hex.h>\n #include <Interpreters/TransactionVersionMetadata.h>\n+#include <Interpreters/Context.h>\n \n namespace DB\n {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02346_additional_filters.reference b/tests/queries/0_stateless/02346_additional_filters.reference\nnew file mode 100644\nindex 000000000000..0cd345f71cde\n--- /dev/null\n+++ b/tests/queries/0_stateless/02346_additional_filters.reference\n@@ -0,0 +1,257 @@\n+-- { echoOn }\n+\n+select * from table_1;\n+1\ta\n+2\tbb\n+3\tccc\n+4\tdddd\n+select * from table_1 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\ta\n+3\tccc\n+4\tdddd\n+select * from table_1 settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};\n+1\ta\n+4\tdddd\n+select x from table_1 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\n+3\n+4\n+select y from table_1 settings additional_table_filters={'table_1' : 'x != 2'};\n+a\n+ccc\n+dddd\n+select * from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\ta\n+4\tdddd\n+select * from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\ta\n+3\tccc\n+select * from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\ta\n+select x from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\n+4\n+select x from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\n+3\n+select x from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\n+select y from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+a\n+dddd\n+select y from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};\n+a\n+ccc\n+select y from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+a\n+select x from table_1 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\n+3\n+4\n+select x from table_1 prewhere x != 2 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\n+3\n+4\n+select x from table_1 prewhere x != 2 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};\n+1\n+3\n+4\n+select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy = 0'};\n+0\n+0\n+select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy != 0'};\n+select * from system.numbers limit 5;\n+0\n+1\n+2\n+3\n+4\n+select * from system.numbers limit 5 settings additional_table_filters={'system.numbers' : 'number != 3'};\n+0\n+1\n+2\n+4\n+5\n+select * from system.numbers limit 5 settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};\n+0\n+1\n+2\n+4\n+5\n+select * from (select number from system.numbers limit 5 union all select x from table_1) order by number settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};\n+0\n+1\n+1\n+2\n+3\n+4\n+4\n+5\n+select number, x, y from (select number from system.numbers limit 5) f any left join (select x, y from table_1) s on f.number = s.x settings additional_table_filters={'system.numbers' : 'number != 3', 'table_1' : 'x != 2'};\n+0\t0\t\n+1\t1\ta\n+2\t0\t\n+4\t4\tdddd\n+5\t0\t\n+select b + 1 as c from (select a + 1 as b from (select x + 1 as a from table_1)) settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};\n+4\n+7\n+-- { echoOn }\n+select * from v_numbers;\n+1\n+2\n+3\n+4\n+5\n+select * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3'};\n+1\n+2\n+3\n+5\n+6\n+select * from v_numbers settings additional_table_filters={'v_numbers' : 'x != 3'};\n+1\n+2\n+4\n+5\n+select * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3', 'v_numbers' : 'x != 3'};\n+1\n+2\n+5\n+6\n+-- additional filter for inner tables for Materialized View does not work because it does not create internal interpreter\n+-- probably it is expected\n+-- { echoOn }\n+select * from mv_table;\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from mv_table settings additional_table_filters={'mv_table' : 'x != 5'};\n+4\tdddd\n+6\tffffff\n+7\tggggggg\n+select * from mv_table settings additional_table_filters={'table_1' : 'x != 5'};\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from mv_table settings additional_table_filters={'table_2' : 'x != 5'};\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+-- additional filter for inner tables for Merge does not work because it does not create internal interpreter\n+-- probably it is expected\n+-- { echoOn }\n+select * from m_table order by x;\n+1\ta\n+2\tbb\n+3\tccc\n+4\tdddd\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from m_table order by x settings additional_table_filters={'table_1' : 'x != 2'};\n+1\ta\n+2\tbb\n+3\tccc\n+4\tdddd\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from m_table order by x  settings additional_table_filters={'table_2' : 'x != 5'};\n+1\ta\n+2\tbb\n+3\tccc\n+4\tdddd\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 2', 'table_2' : 'x != 5'};\n+1\ta\n+2\tbb\n+3\tccc\n+4\tdddd\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 4'};\n+1\ta\n+2\tbb\n+3\tccc\n+4\tdddd\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from m_table order by x  settings additional_table_filters={'table_2' : 'x != 4'};\n+1\ta\n+2\tbb\n+3\tccc\n+4\tdddd\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 4', 'table_2' : 'x != 4'};\n+1\ta\n+2\tbb\n+3\tccc\n+4\tdddd\n+4\tdddd\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from m_table order by x  settings additional_table_filters={'m_table' : 'x != 4'};\n+1\ta\n+2\tbb\n+3\tccc\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+select * from m_table order by x  settings additional_table_filters={'m_table' : 'x != 4', 'table_1' : 'x != 2', 'table_2' : 'x != 5'};\n+1\ta\n+2\tbb\n+3\tccc\n+5\teeeee\n+6\tffffff\n+7\tggggggg\n+-- additional_result_filter\n+\n+select * from table_1 settings additional_result_filter='x != 2';\n+1\ta\n+3\tccc\n+4\tdddd\n+select *, x != 2 from table_1 settings additional_result_filter='x != 2';\n+1\ta\t1\n+3\tccc\t1\n+4\tdddd\t1\n+select * from table_1 where x != 1 settings additional_result_filter='x != 2';\n+3\tccc\n+4\tdddd\n+select * from table_1 where x != 1 settings additional_result_filter='x != 2 and x != 3';\n+4\tdddd\n+select * from table_1 prewhere x != 3 where x != 1 settings additional_result_filter='x != 2';\n+4\tdddd\n+select * from table_1 limit 3 settings additional_result_filter='x != 2';\n+1\ta\n+3\tccc\n+select x + 1 from table_1 settings additional_result_filter='`plus(x, 1)` != 2';\n+3\n+4\n+5\n+select * from (select x + 1 as a, y from table_1 union all select x as a, y from table_1) order by a, y settings additional_result_filter='a = 3';\n+3\tbb\n+3\tccc\n+select * from (select x + 1 as a, y from table_1 union all select x as a, y from table_1) order by a, y settings additional_result_filter='a != 3';\n+1\ta\n+2\ta\n+2\tbb\n+4\tccc\n+4\tdddd\n+5\tdddd\ndiff --git a/tests/queries/0_stateless/02346_additional_filters.sql b/tests/queries/0_stateless/02346_additional_filters.sql\nnew file mode 100644\nindex 000000000000..24e04b9dc8bc\n--- /dev/null\n+++ b/tests/queries/0_stateless/02346_additional_filters.sql\n@@ -0,0 +1,94 @@\n+drop table if exists table_1;\n+drop table if exists table_2;\n+drop table if exists v_numbers;\n+drop table if exists mv_table;\n+\n+create table table_1 (x UInt32, y String) engine = MergeTree order by x;\n+insert into table_1 values (1, 'a'), (2, 'bb'), (3, 'ccc'), (4, 'dddd');\n+\n+-- { echoOn }\n+\n+select * from table_1;\n+select * from table_1 settings additional_table_filters={'table_1' : 'x != 2'};\n+select * from table_1 settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};\n+select x from table_1 settings additional_table_filters={'table_1' : 'x != 2'};\n+select y from table_1 settings additional_table_filters={'table_1' : 'x != 2'};\n+select * from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+select * from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};\n+select * from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+select x from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+select x from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};\n+select x from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+select y from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+select y from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};\n+select y from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};\n+select x from table_1 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};\n+select x from table_1 prewhere x != 2 settings additional_table_filters={'table_1' : 'x != 2'};\n+select x from table_1 prewhere x != 2 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};\n+\n+select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy = 0'};\n+select * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy != 0'};\n+\n+select * from system.numbers limit 5;\n+select * from system.numbers limit 5 settings additional_table_filters={'system.numbers' : 'number != 3'};\n+select * from system.numbers limit 5 settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};\n+select * from (select number from system.numbers limit 5 union all select x from table_1) order by number settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};\n+select number, x, y from (select number from system.numbers limit 5) f any left join (select x, y from table_1) s on f.number = s.x settings additional_table_filters={'system.numbers' : 'number != 3', 'table_1' : 'x != 2'};\n+select b + 1 as c from (select a + 1 as b from (select x + 1 as a from table_1)) settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};\n+\n+-- { echoOff }\n+\n+create view v_numbers as select number + 1 as x from system.numbers limit 5;\n+\n+-- { echoOn }\n+select * from v_numbers;\n+select * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3'};\n+select * from v_numbers settings additional_table_filters={'v_numbers' : 'x != 3'};\n+select * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3', 'v_numbers' : 'x != 3'};\n+\n+-- { echoOff }\n+\n+create table table_2 (x UInt32, y String) engine = MergeTree order by x;\n+insert into table_2 values (4, 'dddd'), (5, 'eeeee'), (6, 'ffffff'), (7, 'ggggggg');\n+\n+create materialized view mv_table to table_2 (x UInt32, y String) as select * from table_1;\n+\n+-- additional filter for inner tables for Materialized View does not work because it does not create internal interpreter\n+-- probably it is expected\n+-- { echoOn }\n+select * from mv_table;\n+select * from mv_table settings additional_table_filters={'mv_table' : 'x != 5'};\n+select * from mv_table settings additional_table_filters={'table_1' : 'x != 5'};\n+select * from mv_table settings additional_table_filters={'table_2' : 'x != 5'};\n+\n+-- { echoOff }\n+\n+create table m_table (x UInt32, y String) engine = Merge(currentDatabase(), '^table_');\n+\n+-- additional filter for inner tables for Merge does not work because it does not create internal interpreter\n+-- probably it is expected\n+-- { echoOn }\n+select * from m_table order by x;\n+select * from m_table order by x settings additional_table_filters={'table_1' : 'x != 2'};\n+select * from m_table order by x  settings additional_table_filters={'table_2' : 'x != 5'};\n+select * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 2', 'table_2' : 'x != 5'};\n+select * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 4'};\n+select * from m_table order by x  settings additional_table_filters={'table_2' : 'x != 4'};\n+select * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 4', 'table_2' : 'x != 4'};\n+select * from m_table order by x  settings additional_table_filters={'m_table' : 'x != 4'};\n+select * from m_table order by x  settings additional_table_filters={'m_table' : 'x != 4', 'table_1' : 'x != 2', 'table_2' : 'x != 5'};\n+\n+-- additional_result_filter\n+\n+select * from table_1 settings additional_result_filter='x != 2';\n+select *, x != 2 from table_1 settings additional_result_filter='x != 2';\n+select * from table_1 where x != 1 settings additional_result_filter='x != 2';\n+select * from table_1 where x != 1 settings additional_result_filter='x != 2 and x != 3';\n+select * from table_1 prewhere x != 3 where x != 1 settings additional_result_filter='x != 2';\n+\n+select * from table_1 limit 3 settings additional_result_filter='x != 2';\n+\n+select x + 1 from table_1 settings additional_result_filter='`plus(x, 1)` != 2';\n+\n+select * from (select x + 1 as a, y from table_1 union all select x as a, y from table_1) order by a, y settings additional_result_filter='a = 3';\n+select * from (select x + 1 as a, y from table_1 union all select x as a, y from table_1) order by a, y settings additional_result_filter='a != 3';\n",
  "problem_statement": "Support post-filters for query tables\n> (you don't have to strictly follow this form)\r\n\r\n**Use case**\r\n\r\nIt would be helpful for grafana support. Additional conditions could be applied to specified table.\r\n\r\nExample:\r\n```\r\nselect sum(x), y from table_a group by y\r\nunion all\r\nselect a, b from table_b\r\n```\r\ncondition: `y > 0 for table_a`\r\n\r\nRewrite a query:\r\n```\r\nselect sum(x), y from table_a where y > 0 group by y\r\nunion all\r\nselect a, b from table_b\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nA setting with mapping `table_name -> condition_text`.\r\n\r\nImplemented in the same way as row-level filter.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nExposing an API to modify AST. Would be harder to implement, need maintenance. \r\n\r\n**Additional context**\r\n\r\nIt's an alternative approach to https://github.com/grafana/clickhouse-datasource/issues/131\n",
  "hints_text": "> A setting with mapping table_name -> condition_text.\r\n\r\nSome use cases need to apply an \"out of band\" filter to the resulting dataset (not for the tables).\r\nExample: a spreadsheet application (smart grid widget).",
  "created_at": "2022-06-27T17:53:06Z"
}