{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79046,
  "instance_id": "ClickHouse__ClickHouse-79046",
  "issue_numbers": [
    "79027"
  ],
  "base_commit": "7fb41e62549c45a0d59fa332793743929afee558",
  "patch": "diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 872b03631486..3ad3038ef315 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -71,6 +71,7 @@\n \n #include <Access/AccessControl.h>\n #include <Storages/ColumnsDescription.h>\n+#include <TableFunctions/ITableFunction.h>\n \n #include <filesystem>\n #include <iostream>\n@@ -1706,13 +1707,21 @@ bool ClientBase::receiveSampleBlock(Block & out, ColumnsDescription & columns_de\n \n void ClientBase::setInsertionTable(const ASTInsertQuery & insert_query)\n {\n-    if (!client_context->hasInsertionTable() && insert_query.table)\n+    if (!client_context->hasInsertionTable())\n     {\n-        String table = insert_query.table->as<ASTIdentifier &>().shortName();\n-        if (!table.empty())\n+        if  (insert_query.table)\n         {\n-            String database = insert_query.database ? insert_query.database->as<ASTIdentifier &>().shortName() : \"\";\n-            client_context->setInsertionTable(StorageID(database, table));\n+            String table = insert_query.table->as<ASTIdentifier &>().shortName();\n+            if (!table.empty())\n+            {\n+                String database = insert_query.database ? insert_query.database->as<ASTIdentifier &>().shortName() : \"\";\n+                client_context->setInsertionTable(StorageID(database, table));\n+            }\n+        }\n+        else if (insert_query.table_function)\n+        {\n+            String table_function = insert_query.table_function->as<ASTFunction &>().name;\n+            client_context->setInsertionTable(StorageID(ITableFunction::getDatabaseName(), table_function));\n         }\n     }\n }\n@@ -2160,6 +2169,7 @@ void ClientBase::processParsedSingleQuery(\n     cancelled_printed = false;\n     client_exception.reset();\n     server_exception.reset();\n+    client_context->setInsertionTable(StorageID::createEmpty());\n \n     if (is_interactive)\n     {\ndiff --git a/src/Interpreters/processColumnTransformers.cpp b/src/Interpreters/processColumnTransformers.cpp\nindex 94b369ddf7f1..dc84c6841978 100644\n--- a/src/Interpreters/processColumnTransformers.cpp\n+++ b/src/Interpreters/processColumnTransformers.cpp\n@@ -64,6 +64,9 @@ ASTPtr processColumnTransformers(\n         const ColumnsDescription & columns,\n         ASTPtr query_columns)\n {\n+    if (table_id.empty())\n+        return processColumnTransformersImpl(columns, {}, query_columns, current_database, StorageID(\"\", \"dummy\"));\n+\n     return processColumnTransformersImpl(columns, {}, query_columns, current_database, table_id);\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.reference b/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.reference\nindex dce438dd7c24..2ec9134ea772 100644\n--- a/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.reference\n+++ b/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.reference\n@@ -5,3 +5,4 @@\n 42\tworld\n 42\tworld\n 42\tworld\n+42\tworld\ndiff --git a/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.sh b/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.sh\nindex 1672550b01e7..3cf9c5de3e9d 100755\n--- a/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.sh\n+++ b/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.sh\n@@ -17,13 +17,14 @@ select * from test order by x;\n rm $CLICKHOUSE_TEST_UNIQUE_NAME.native\n \n $CLICKHOUSE_LOCAL -q \"select 'world' as y, 42 as x format Values\" > $CLICKHOUSE_TEST_UNIQUE_NAME.values\n-$CLICKHOUSE_LOCAL -q \"\n+$CLICKHOUSE_CLIENT -q \"\n+drop table if exists test_infile;\n create table test_infile (val UInt64, key String) engine=Memory;\n-insert into test_infile select * from file('$CLICKHOUSE_TEST_UNIQUE_NAME.values'); -- { serverError CANNOT_PARSE_TEXT }\n insert into test_infile from infile '$CLICKHOUSE_TEST_UNIQUE_NAME.values' FORMAT Values; -- { clientError CANNOT_PARSE_TEXT }\n insert into test_infile (key, val) from infile '$CLICKHOUSE_TEST_UNIQUE_NAME.values' FORMAT Values;\n insert into test_infile (* EXCEPT 'val', * EXCEPT 'key') from infile '$CLICKHOUSE_TEST_UNIQUE_NAME.values' FORMAT Values;\n insert into test_infile (* EXCEPT 'val', test_infile.val) from infile '$CLICKHOUSE_TEST_UNIQUE_NAME.values' FORMAT Values;\n+insert into table function remote('localhost:9000', $CLICKHOUSE_DATABASE.test_infile) (remote.key, _table_function.remote.val) from infile '$CLICKHOUSE_TEST_UNIQUE_NAME.values' FORMAT Values;\n select * from test_infile order by key, val;\n \"\n \n",
  "problem_statement": "Client assertion on remote insert\n### Describe the bug\n\nThis is a very recent regression. Maybe related to https://github.com/ClickHouse/ClickHouse/pull/78490 \n\n### How to reproduce\n\nRun:\n\n```sql\nCREATE OR REPLACE TABLE t0 (c0 Int) ENGINE = Memory;\nINSERT INTO TABLE FUNCTION file('<path to file>', 'CSV', 'c0 Int') SELECT 1;\nINSERT INTO TABLE FUNCTION remote('localhost:9000', default.t0) (c0) FROM INFILE '<path to file>' FORMAT CSV;\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\nclickhouse: src/Parsers/ASTIdentifier.cpp:48: DB::ASTIdentifier::ASTIdentifier(std::vector<String> &&, bool, ASTs &&): Assertion `!part.empty()' failed.\n########## Short fault info ############\n(version 25.4.1.2867 (official build), build id: A11D2D6FCE96E2063C0B2D2D79F1C6B57A8BBC6F, git hash: 442cad87d1e5161d974cf497ffe6024110697cf5, architecture: x86_64) (from thread 2690293) Received signal 6\nSignal description: Aborted\n\nStack trace: 0x00005b2cd5e71628 0x00005b2cd6137205 0x0000764f36045250 0x0000764f360a3f1d 0x0000764f3604519e 0x0000764f36028902 0x0000764f3602881e 0x0000764f3603b7c7 0x00005b2cddac778b 0x00005b2cddac8c9d 0x00005b2cdaca5191 0x00005b2cdad77d96 0x00005b2cdad785f0 0x00005b2cdc890ac2 0x00005b2cdc88fe78 0x00005b2cdc889597 0x00005b2cdc89435e 0x00005b2cdc8954db 0x00005b2cdc89c92b 0x00005b2cd5fe413b 0x00005b2ce0d72c26 0x00005b2cd5fef556 0x00005b2cd0146c8a 0x0000764f3602a3b8 0x0000764f3602a47b 0x00005b2cd014602e\n########################################\n(version 25.4.1.2867 (official build), build id: A11D2D6FCE96E2063C0B2D2D79F1C6B57A8BBC6F, git hash: 442cad87d1e5161d974cf497ffe6024110697cf5) (from thread 2690293) (no query) Received signal Aborted (6)\n\nStack trace: 0x00005b2cd5e71628 0x00005b2cd6137205 0x0000764f36045250 0x0000764f360a3f1d 0x0000764f3604519e 0x0000764f36028902 0x0000764f3602881e 0x0000764f3603b7c7 0x00005b2cddac778b 0x00005b2cddac8c9d 0x00005b2cdaca5191 0x00005b2cdad77d96 0x00005b2cdad785f0 0x00005b2cdc890ac2 0x00005b2cdc88fe78 0x00005b2cdc889597 0x00005b2cdc89435e 0x00005b2cdc8954db 0x00005b2cdc89c92b 0x00005b2cd5fe413b 0x00005b2ce0d72c26 0x00005b2cd5fef556 0x00005b2cd0146c8a 0x0000764f3602a3b8 0x0000764f3602a47b 0x00005b2cd014602e\n0.0. inlined from src/Common/StackTrace.cpp:386: StackTrace::tryCapture()\n0. src/Common/StackTrace.cpp:355: StackTrace::StackTrace(ucontext_t const&) @ 0x000000000fcdb628\n1. src/Common/SignalHandlers.cpp:106: signalHandler(int, siginfo_t*, void*) @ 0x000000000ffa1205\n2. ? @ 0x0000764f36045250\n3. ? @ 0x0000764f360a3f1d\n4. ? @ 0x0000764f3604519e\n5. ? @ 0x0000764f36028902\n6. ? @ 0x0000764f3602881e\n7. ? @ 0x0000764f3603b7c7\n8. src/Parsers/ASTIdentifier.cpp:48: DB::ASTIdentifier::ASTIdentifier(std::vector<String, std::allocator<String>>&&, bool, absl::InlinedVector<std::shared_ptr<DB::IAST>, 7ul, std::allocator<std::shared_ptr<DB::IAST>>>&&) @ 0x000000001793178b\n9. src/Parsers/ASTIdentifier.cpp:192: DB::ASTTableIdentifier::ASTTableIdentifier(DB::StorageID const&, absl::InlinedVector<std::shared_ptr<DB::IAST>, 7ul, std::allocator<std::shared_ptr<DB::IAST>>>&&) @ 0x0000000017932c9d\n10.0. inlined from contrib/llvm-project/libcxx/include/__memory/construct_at.h:41: DB::ASTTableIdentifier* std::construct_at[abi:se190107]<DB::ASTTableIdentifier, DB::StorageID const&, DB::ASTTableIdentifier*>(DB::ASTTableIdentifier*, DB::StorageID const&)\n10.1. inlined from contrib/llvm-project/libcxx/include/__memory/construct_at.h:49: DB::ASTTableIdentifier* std::__construct_at[abi:se190107]<DB::ASTTableIdentifier, DB::StorageID const&, DB::ASTTableIdentifier*>(DB::ASTTableIdentifier*, DB::StorageID const&)\n10.2. inlined from contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:328: void std::allocator_traits<std::allocator<DB::ASTTableIdentifier>>::construct[abi:se190107]<DB::ASTTableIdentifier, DB::StorageID const&, void, 0>(std::allocator<DB::ASTTableIdentifier>&, DB::ASTTableIdentifier*, DB::StorageID const&)\n10.3. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:264: __shared_ptr_emplace<const DB::StorageID &, std::allocator<DB::ASTTableIdentifier>, 0>\n10. contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:843: std::shared_ptr<DB::ASTTableIdentifier> std::allocate_shared[abi:se190107]<DB::ASTTableIdentifier, std::allocator<DB::ASTTableIdentifier>, DB::StorageID const&, 0>(std::allocator<DB::ASTTableIdentifier> const&, DB::StorageID const&) @ 0x0000000014b0f191\n11.0. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:851: std::shared_ptr<DB::ASTTableIdentifier> std::make_shared[abi:se190107]<DB::ASTTableIdentifier, DB::StorageID const&, 0>(DB::StorageID const&)\n11. src/Interpreters/processColumnTransformers.cpp:30: DB::(anonymous namespace)::processColumnTransformersImpl(DB::ColumnsDescription const&, DB::NamesAndTypesList const&, std::shared_ptr<DB::IAST>, String const&, DB::StorageID const&) @ 0x0000000014be1d96\n12. src/Interpreters/processColumnTransformers.cpp:67: DB::processColumnTransformers(String const&, DB::StorageID const&, DB::ColumnsDescription const&, std::shared_ptr<DB::IAST>) @ 0x0000000014be25f0\n13. src/Client/ClientBase.cpp:1909: DB::ClientBase::sendData(DB::Block&, DB::ColumnsDescription const&, std::shared_ptr<DB::IAST>) @ 0x00000000166faac2\n14. src/Client/ClientBase.cpp:1824: DB::ClientBase::processInsertQuery(String const&, std::shared_ptr<DB::IAST>) @ 0x00000000166f9e78\n15. src/Client/ClientBase.cpp:2279: DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x00000000166f3597\n16. src/Client/ClientBase.cpp:2643: DB::ClientBase::executeMultiQuery(String const&) @ 0x00000000166fe35e\n17. src/Client/ClientBase.cpp:2827: DB::ClientBase::processQueryText(String const&) @ 0x00000000166ff4db\n18. src/Client/ClientBase.cpp:3380: DB::ClientBase::runInteractive() @ 0x000000001670692b\n19. programs/client/Client.cpp:401: DB::Client::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000fe4e13b\n20. base/poco/Util/src/Application.cpp:315: Poco::Util::Application::run() @ 0x000000001abdcc26\n21. programs/client/Client.cpp:1141: mainEntryClickHouseClient(int, char**) @ 0x000000000fe59556\n22. programs/main.cpp:295: main @ 0x0000000009fb0c8a\n23. ? @ 0x0000764f3602a3b8\n24. ? @ 0x0000764f3602a47b\n25. _start @ 0x0000000009fb002e\n```\n",
  "hints_text": "",
  "created_at": "2025-04-11T15:01:56Z"
}