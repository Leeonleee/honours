diff --git a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp
index 32e18a6cf9d9..db779ad66065 100644
--- a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp
+++ b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp
@@ -81,6 +81,14 @@ void buildLifetimeConfiguration(
     if (!lifetime)
         return;
 
+    if (lifetime->min_sec > lifetime->max_sec)
+    {
+        throw DB::Exception(
+            ErrorCodes::BAD_ARGUMENTS,
+            "{} parameter 'MIN' must be less than or equal to 'MAX'",
+            lifetime->getID(0));
+    }
+
     AutoPtr<Element> lifetime_element(doc->createElement("lifetime"));
     AutoPtr<Element> min_element(doc->createElement("min"));
     AutoPtr<Element> max_element(doc->createElement("max"));
@@ -136,6 +144,8 @@ void buildLayoutConfiguration(
         }
     }
 
+    const auto is_ssd_cache_layout = layout->layout_type == "ssd_cache";
+
     for (const auto & param : layout->parameters->children)
     {
         const ASTPair * pair = param->as<ASTPair>();
@@ -166,6 +176,17 @@ void buildLayoutConfiguration(
                 value_field.getTypeName());
         }
 
+        if (is_ssd_cache_layout)
+        {
+            if (value_field.getType() == Field::Types::UInt64 && value_field.safeGet<::UInt64>() == 0)
+            {
+                throw DB::Exception(
+                    ErrorCodes::BAD_ARGUMENTS,
+                    "{} parameter value should be positive number",
+                    layout->getID(0));
+            }
+        }
+
         AutoPtr<Element> layout_type_parameter_element(doc->createElement(pair->first));
         AutoPtr<Text> value_to_append(doc->createTextNode(toString(value_field)));
         layout_type_parameter_element->appendChild(value_to_append);
