{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12021,
  "instance_id": "ClickHouse__ClickHouse-12021",
  "issue_numbers": [
    "11362"
  ],
  "base_commit": "f1151ed4742cb812b60c7080a607d008ba24c8e4",
  "patch": "diff --git a/src/Functions/if.cpp b/src/Functions/if.cpp\nindex 593cf56caf87..6e46a03c69a7 100644\n--- a/src/Functions/if.cpp\n+++ b/src/Functions/if.cpp\n@@ -432,8 +432,7 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n         const PaddedPODArray<UInt8> & cond_data = cond_col->getData();\n         size_t rows = cond_data.size();\n \n-        if ((col_then_fixed || col_then_const_fixed)\n-            && (col_else_fixed || col_else_const_fixed))\n+        if (isFixedString(block.getByPosition(result).type))\n         {\n             /// The result is FixedString.\n \n@@ -448,16 +447,19 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n             else if (col_then_const_fixed && col_else_fixed)\n                 conditional(ConstSource<FixedStringSource>(*col_then_const_fixed), FixedStringSource(*col_else_fixed), sink, cond_data);\n             else if (col_then_const_fixed && col_else_const_fixed)\n-                conditional(ConstSource<FixedStringSource>(*col_then_const_fixed), ConstSource<FixedStringSource>(*col_else_const_fixed), sink, cond_data);\n+                conditional(ConstSource<FixedStringSource>(*col_then_const_fixed),\n+                            ConstSource<FixedStringSource>(*col_else_const_fixed), sink, cond_data);\n+            else\n+                return false;\n \n             block.getByPosition(result).column = std::move(col_res_untyped);\n             return true;\n         }\n \n-        if ((col_then || col_then_const || col_then_fixed || col_then_const_fixed)\n-            && (col_else || col_else_const || col_else_fixed || col_else_const_fixed))\n+        if (isString(block.getByPosition(result).type))\n         {\n             /// The result is String.\n+\n             auto col_res = ColumnString::create();\n             auto sink = StringSink(*col_res, rows);\n \n@@ -485,6 +487,17 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n                 conditional(ConstSource<StringSource>(*col_then_const), ConstSource<FixedStringSource>(*col_else_const_fixed), sink, cond_data);\n             else if (col_then_const_fixed && col_else_const)\n                 conditional(ConstSource<FixedStringSource>(*col_then_const_fixed), ConstSource<StringSource>(*col_else_const), sink, cond_data);\n+            else if (col_then_fixed && col_else_fixed)\n+                conditional(FixedStringSource(*col_then_fixed), FixedStringSource(*col_else_fixed), sink, cond_data);\n+            else if (col_then_fixed && col_else_const_fixed)\n+                conditional(FixedStringSource(*col_then_fixed), ConstSource<FixedStringSource>(*col_else_const_fixed), sink, cond_data);\n+            else if (col_then_const_fixed && col_else_fixed)\n+                conditional(ConstSource<FixedStringSource>(*col_then_const_fixed), FixedStringSource(*col_else_fixed), sink, cond_data);\n+            else if (col_then_const_fixed && col_else_const_fixed)\n+                conditional(ConstSource<FixedStringSource>(*col_then_const_fixed),\n+                            ConstSource<FixedStringSource>(*col_else_const_fixed), sink, cond_data);\n+            else\n+                return false;\n \n             block.getByPosition(result).column = std::move(col_res);\n             return true;\n@@ -590,7 +603,8 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n         return true;\n     }\n \n-    static void executeGeneric(const ColumnUInt8 * cond_col, Block & block, const ColumnNumbers & arguments, size_t result, size_t input_rows_count)\n+    static void executeGeneric(\n+        const ColumnUInt8 * cond_col, Block & block, const ColumnNumbers & arguments, size_t result, size_t input_rows_count)\n     {\n         /// Convert both columns to the common type (if needed).\n \ndiff --git a/src/Functions/multiIf.cpp b/src/Functions/multiIf.cpp\nindex b57c9f6316aa..5f3f62fe6cb8 100644\n--- a/src/Functions/multiIf.cpp\n+++ b/src/Functions/multiIf.cpp\n@@ -39,6 +39,7 @@ class FunctionMultiIf final : public FunctionIfBase</*null_is_false=*/true>\n     bool isVariadic() const override { return true; }\n     size_t getNumberOfArguments() const override { return 0; }\n     bool useDefaultImplementationForNulls() const override { return false; }\n+\n     ColumnNumbers getArgumentsThatDontImplyNullableReturnType(size_t number_of_arguments) const override\n     {\n         ColumnNumbers args;\n@@ -70,7 +71,6 @@ class FunctionMultiIf final : public FunctionIfBase</*null_is_false=*/true>\n             throw Exception{\"Invalid number of arguments for function \" + getName(),\n                 ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH};\n \n-\n         for_conditions([&](const DataTypePtr & arg)\n         {\n             const IDataType * nested_type;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01355_if_fixed_string.reference b/tests/queries/0_stateless/01355_if_fixed_string.reference\nnew file mode 100644\nindex 000000000000..43c8af518b4c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01355_if_fixed_string.reference\n@@ -0,0 +1,40 @@\n+0\\0\\0\\0\\0\tString\n+1\\0\tString\n+-2\\0\\0\\0\tString\n+3\\0\tString\n+-4\\0\\0\\0\tString\n+5\\0\tString\n+-6\\0\\0\\0\tString\n+7\\0\tString\n+-8\\0\\0\\0\tString\n+9\\0\tString\n+0\\0\tFixedString(2)\n+1\\0\tFixedString(2)\n+-2\tFixedString(2)\n+3\\0\tFixedString(2)\n+-4\tFixedString(2)\n+5\\0\tFixedString(2)\n+-6\tFixedString(2)\n+7\\0\tFixedString(2)\n+-8\tFixedString(2)\n+9\\0\tFixedString(2)\n+0\tString\n+1\tString\n+-2\tString\n+3\tString\n+-4\tString\n+5\tString\n+-6\tString\n+7\tString\n+-8\tString\n+9\tString\n+0\\0\tFixedString(2)\n+1\\0\tFixedString(2)\n+-2\tFixedString(2)\n+3\\0\tFixedString(2)\n+-4\tFixedString(2)\n+5\\0\tFixedString(2)\n+-6\tFixedString(2)\n+7\\0\tFixedString(2)\n+-8\tFixedString(2)\n+9\\0\tFixedString(2)\ndiff --git a/tests/queries/0_stateless/01355_if_fixed_string.sql b/tests/queries/0_stateless/01355_if_fixed_string.sql\nnew file mode 100644\nindex 000000000000..a0afcc5f1972\n--- /dev/null\n+++ b/tests/queries/0_stateless/01355_if_fixed_string.sql\n@@ -0,0 +1,5 @@\n+SELECT if(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 5)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;\n+SELECT if(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 2)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;\n+\n+SELECT multiIf(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 5)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;\n+SELECT multiIf(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 2)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;\n",
  "problem_statement": "Bad cast from type DB::IColumn* to DB::ColumnFixedString*.\n```\r\n/4/ :) SELECT if(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 65535)) FROM system.numbers LIMIT 10\r\n\r\nCode: 368. DB::Exception: Received from localhost:9000. DB::Exception: Bad cast from type DB::IColumn* to DB::ColumnFixedString*. Stack trace:\r\n```\n",
  "hints_text": "",
  "created_at": "2020-06-28T21:11:59Z"
}