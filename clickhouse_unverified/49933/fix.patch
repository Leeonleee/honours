diff --git a/src/Formats/ProtobufSerializer.cpp b/src/Formats/ProtobufSerializer.cpp
index 8bdef0e7d3fe..f690800d145c 100644
--- a/src/Formats/ProtobufSerializer.cpp
+++ b/src/Formats/ProtobufSerializer.cpp
@@ -1852,25 +1852,26 @@ namespace
 
             write_function = [this](IPv6 value)
             {
-                ipToString(value, text_buffer);
+                text_buffer = String(IPV6_BINARY_LENGTH, '\0');
+                memcpy(text_buffer.data(), &value.toUnderType(), IPV6_BINARY_LENGTH);
                 writeStr(text_buffer);
             };
 
             read_function = [this]() -> IPv6
             {
                 readStr(text_buffer);
-                return parse<IPv6>(text_buffer);
+                if (text_buffer.size() != IPV6_BINARY_LENGTH)
+                    throw Exception(ErrorCodes::PROTOBUF_BAD_CAST,
+                                    "Could not convert bytes field {} to IPv6 for inserting into column {} - field size {} is not equal to IPv6 size {}",
+                                    field_descriptor.full_name(), column_name, text_buffer.size(), IPV6_BINARY_LENGTH);
+                IPv6 value;
+                memcpy(&value.toUnderType(), text_buffer.data(), IPV6_BINARY_LENGTH);
+                return value;
             };
 
             default_function = [this]() -> IPv6 { return parse<IPv6>(field_descriptor.default_value_string()); };
         }
 
-        static void ipToString(const IPv6 & ip, String & str)
-        {
-            WriteBufferFromString buf{str};
-            writeText(ip, buf);
-        }
-
         std::function<void(IPv6)> write_function;
         std::function<IPv6()> read_function;
         std::function<IPv6()> default_function;
