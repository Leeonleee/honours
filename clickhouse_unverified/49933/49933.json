{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49933,
  "instance_id": "ClickHouse__ClickHouse-49933",
  "issue_numbers": [
    "49924"
  ],
  "base_commit": "3d26232cc0ceb4e7e0901526e6d733501990815a",
  "patch": "diff --git a/src/Formats/ProtobufSerializer.cpp b/src/Formats/ProtobufSerializer.cpp\nindex 8bdef0e7d3fe..f690800d145c 100644\n--- a/src/Formats/ProtobufSerializer.cpp\n+++ b/src/Formats/ProtobufSerializer.cpp\n@@ -1852,25 +1852,26 @@ namespace\n \n             write_function = [this](IPv6 value)\n             {\n-                ipToString(value, text_buffer);\n+                text_buffer = String(IPV6_BINARY_LENGTH, '\\0');\n+                memcpy(text_buffer.data(), &value.toUnderType(), IPV6_BINARY_LENGTH);\n                 writeStr(text_buffer);\n             };\n \n             read_function = [this]() -> IPv6\n             {\n                 readStr(text_buffer);\n-                return parse<IPv6>(text_buffer);\n+                if (text_buffer.size() != IPV6_BINARY_LENGTH)\n+                    throw Exception(ErrorCodes::PROTOBUF_BAD_CAST,\n+                                    \"Could not convert bytes field {} to IPv6 for inserting into column {} - field size {} is not equal to IPv6 size {}\",\n+                                    field_descriptor.full_name(), column_name, text_buffer.size(), IPV6_BINARY_LENGTH);\n+                IPv6 value;\n+                memcpy(&value.toUnderType(), text_buffer.data(), IPV6_BINARY_LENGTH);\n+                return value;\n             };\n \n             default_function = [this]() -> IPv6 { return parse<IPv6>(field_descriptor.default_value_string()); };\n         }\n \n-        static void ipToString(const IPv6 & ip, String & str)\n-        {\n-            WriteBufferFromString buf{str};\n-            writeText(ip, buf);\n-        }\n-\n         std::function<void(IPv6)> write_function;\n         std::function<IPv6()> read_function;\n         std::function<IPv6()> default_function;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02751_protobuf_ipv6.reference b/tests/queries/0_stateless/02751_protobuf_ipv6.reference\nnew file mode 100644\nindex 000000000000..0318b49c77e1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02751_protobuf_ipv6.reference\n@@ -0,0 +1,2 @@\n+::ffff:1.2.3.4\n+::ffff:1.2.3.4\ndiff --git a/tests/queries/0_stateless/02751_protobuf_ipv6.sh b/tests/queries/0_stateless/02751_protobuf_ipv6.sh\nnew file mode 100755\nindex 000000000000..f93963aa6c67\n--- /dev/null\n+++ b/tests/queries/0_stateless/02751_protobuf_ipv6.sh\n@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+SCHEMADIR=$CURDIR/format_schemas\n+\n+\n+echo -ne '\\x12\\x1a\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\x01\\x02\\x03\\x04' | $CLICKHOUSE_LOCAL --input-format Protobuf --format_schema=\"$SCHEMADIR/02751_protobuf_ipv6:Message\" --structure=\"ipv6_bytes IPv6\" -q \"select * from table\"\n+\n+$CLICKHOUSE_LOCAL -q \"select '::ffff:1.2.3.4'::IPv6 as ipv6_bytes format Protobuf settings format_schema = '$SCHEMADIR/02751_protobuf_ipv6:Message'\" | $CLICKHOUSE_LOCAL --input-format Protobuf --format_schema=\"$SCHEMADIR/02751_protobuf_ipv6:Message\" --structure=\"ipv6_bytes IPv6\"  -q \"select * from table\"\n+\ndiff --git a/tests/queries/0_stateless/format_schemas/02751_protobuf_ipv6.proto b/tests/queries/0_stateless/format_schemas/02751_protobuf_ipv6.proto\nnew file mode 100644\nindex 000000000000..8e6f115f2d79\n--- /dev/null\n+++ b/tests/queries/0_stateless/format_schemas/02751_protobuf_ipv6.proto\n@@ -0,0 +1,6 @@\n+syntax = \"proto3\";\n+\n+message Message\n+{\n+    bytes ipv6_bytes = 3;\n+}\n",
  "problem_statement": "Unable to import IPv6 addresses using Protobuf\n**Describe the issue**\r\nSince version 23, it is not possible to directly import IPv6 addresses from Protobuf (as bytes). This was working fine with 22.3.\r\n\r\n**How to reproduce**\r\nIn `/var/lib/clickhouse/format_schemas/flows.proto`:\r\n```proto\r\nsyntax = \"proto3\";\r\nmessage FlowMessage {\r\nbytes ExporterAddress = 3;\r\n}\r\n```\r\n\r\nCreate a table:\r\n```sql\r\nCREATE TABLE default.flows\r\n(\r\n    `ExporterAddress` IPv6\r\n)\r\nENGINE = MergeTree\r\nORDER BY ExporterAddress\r\nSETTINGS index_granularity = 8192\r\n```\r\n\r\nInsert using Protobuf format:\r\n```console\r\n$ echo <intentionally removed - could contain sensitive user information> | xxd -r -p | clickhouse clickhouse-client -q \"INSERT INTO flows SETTINGS format_schema='/var/lib/clickhouse/format_schemas/flows.proto:FlowMessage' FORMAT Protobuf\"\r\nCode: 676. DB::ParsingException: Cannot parse IPv6 : While executing ProtobufRowInputFormat: data for INSERT was parsed from stdin: (in query: INSERT INTO flows SETTINGS format_schema='/var/lib/clickhouse/format_schemas/flows.proto:FlowMessage' FORMAT Protobuf): (in file/uri (fd = 0)): (at row 1)\r\n. (CANNOT_PARSE_IPV6)\r\n```\r\n\r\nWhen using 22.3, there is no error:\r\n```\r\n369034ef06d4 :) select * from flows\r\n\r\nSELECT *\r\nFROM flows\r\n\r\nQuery id: b31771a4-b1a6-442e-a9eb-84bc7b944036\r\n\r\n\u250c\u2500ExporterAddress\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 ::ffff:192.168.0.254 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.002 sec.\r\n```\r\n\r\nThis is still reproducible with master.\n",
  "hints_text": "",
  "created_at": "2023-05-16T23:50:08Z"
}