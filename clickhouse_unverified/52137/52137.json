{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52137,
  "instance_id": "ClickHouse__ClickHouse-52137",
  "issue_numbers": [
    "52131"
  ],
  "base_commit": "40f53c46591df74ce300f06d8df8558cb1a9e86e",
  "patch": "diff --git a/src/Processors/Formats/Impl/AvroRowInputFormat.cpp b/src/Processors/Formats/Impl/AvroRowInputFormat.cpp\nindex a7efc823fbbb..b2c75db0e540 100644\n--- a/src/Processors/Formats/Impl/AvroRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/AvroRowInputFormat.cpp\n@@ -369,14 +369,25 @@ AvroDeserializer::DeserializeFn AvroDeserializer::createDeserializeFn(const avro\n             break;\n         case avro::AVRO_UNION:\n         {\n-            if (root_node->leaves() == 2\n+            if (root_node->leaves() == 1)\n+            {\n+                auto nested_deserialize = createDeserializeFn(root_node->leafAt(0), target_type);\n+                return [nested_deserialize](IColumn & column, avro::Decoder & decoder)\n+                {\n+                    decoder.decodeUnionIndex();\n+                    nested_deserialize(column, decoder);\n+                    return true;\n+                };\n+            }\n+            /// FIXME Support UNION has more than two datatypes.\n+            else if (\n+                root_node->leaves() == 2\n                 && (root_node->leafAt(0)->type() == avro::AVRO_NULL || root_node->leafAt(1)->type() == avro::AVRO_NULL))\n             {\n                 int non_null_union_index = root_node->leafAt(0)->type() == avro::AVRO_NULL ? 1 : 0;\n                 if (target.isNullable())\n                 {\n-                    auto nested_deserialize = this->createDeserializeFn(\n-                        root_node->leafAt(non_null_union_index), removeNullable(target_type));\n+                    auto nested_deserialize = createDeserializeFn(root_node->leafAt(non_null_union_index), removeNullable(target_type));\n                     return [non_null_union_index, nested_deserialize](IColumn & column, avro::Decoder & decoder)\n                     {\n                         ColumnNullable & col = assert_cast<ColumnNullable &>(column);\n@@ -395,7 +406,7 @@ AvroDeserializer::DeserializeFn AvroDeserializer::createDeserializeFn(const avro\n                 }\n                 else if (null_as_default)\n                 {\n-                    auto nested_deserialize = this->createDeserializeFn(root_node->leafAt(non_null_union_index), target_type);\n+                    auto nested_deserialize = createDeserializeFn(root_node->leafAt(non_null_union_index), target_type);\n                     return [non_null_union_index, nested_deserialize](IColumn & column, avro::Decoder & decoder)\n                     {\n                         int union_index = static_cast<int>(decoder.decodeUnionIndex());\n@@ -1192,12 +1203,19 @@ DataTypePtr AvroSchemaReader::avroNodeToDataType(avro::NodePtr node)\n         case avro::Type::AVRO_NULL:\n             return std::make_shared<DataTypeNothing>();\n         case avro::Type::AVRO_UNION:\n-            if (node->leaves() == 2 && (node->leafAt(0)->type() == avro::Type::AVRO_NULL || node->leafAt(1)->type() == avro::Type::AVRO_NULL))\n+            if (node->leaves() == 1)\n+            {\n+                return avroNodeToDataType(node->leafAt(0));\n+            }\n+            else if (\n+                node->leaves() == 2\n+                && (node->leafAt(0)->type() == avro::Type::AVRO_NULL || node->leafAt(1)->type() == avro::Type::AVRO_NULL))\n             {\n                 int nested_leaf_index = node->leafAt(0)->type() == avro::Type::AVRO_NULL ? 1 : 0;\n                 auto nested_type = avroNodeToDataType(node->leafAt(nested_leaf_index));\n                 return nested_type->canBeInsideNullable() ? makeNullable(nested_type) : nested_type;\n             }\n+            /// FIXME Support UNION has more than two datatypes.\n             throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Avro type  UNION is not supported for inserting.\");\n         case avro::Type::AVRO_SYMBOLIC:\n             return avroNodeToDataType(avro::resolveSymbol(node));\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02813_avro_union_with_one_type.reference b/tests/queries/0_stateless/02813_avro_union_with_one_type.reference\nnew file mode 100644\nindex 000000000000..c65bed480550\n--- /dev/null\n+++ b/tests/queries/0_stateless/02813_avro_union_with_one_type.reference\n@@ -0,0 +1,5 @@\n+name\tString\t\t\t\t\t\n+favorite_number\tInt32\t\t\t\t\t\n+favorite_color\tString\t\t\t\t\t\n+Alyssa\t256\tyellow\n+Ben\t7\tred\ndiff --git a/tests/queries/0_stateless/02813_avro_union_with_one_type.sh b/tests/queries/0_stateless/02813_avro_union_with_one_type.sh\nnew file mode 100755\nindex 000000000000..b58dc9126da9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02813_avro_union_with_one_type.sh\n@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel, no-fasttest\n+\n+set -e\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+DATA_DIR=$CUR_DIR/data_avro\n+\n+$CLICKHOUSE_LOCAL -q \"desc file('$DATA_DIR/union_one_type.avro')\"\n+$CLICKHOUSE_LOCAL -q \"select * from file('$DATA_DIR/union_one_type.avro')\"\ndiff --git a/tests/queries/0_stateless/data_avro/union_one_type.avro b/tests/queries/0_stateless/data_avro/union_one_type.avro\nnew file mode 100644\nindex 000000000000..07e6140e5e2f\nBinary files /dev/null and b/tests/queries/0_stateless/data_avro/union_one_type.avro differ\n",
  "problem_statement": "Avro Union with Single Type Element incompatibility issue\nWhen the AVRO schema has an element defined as a single Union type, the deserializer crashes because it doesn't know how to handle the mapping since it is assumed that an `AVRO_UNION` must define two types, as specific at https://github.com/ucasfl/ClickHouse/blob/f98e01d538b97123296932958404ef1ea21b9798/src/Processors/Formats/Impl/AvroRowInputFormat.cpp#L283 . The error is `Type Int64 is not compatible with Avro union`, when defined as follows:\r\n\r\n```\r\n            {\r\n              \"name\": \"test_element\",\r\n              \"type\": [\r\n                \"long\"\r\n              ]\r\n            }\r\n```\r\n\r\nClickhouse version: 23.4.5.22\r\n\r\nThe full error stack:\r\n```\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xbc89a64 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 1. ? @ 0x105a62e8 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 2. DB::AvroDeserializer::createDeserializeFn(std::shared_ptr<avro::Node> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x115cd2d4 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 3. DB::AvroDeserializer::createDeserializeFn(std::shared_ptr<avro::Node> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x115cd124 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 4. DB::AvroDeserializer::createDeserializeFn(std::shared_ptr<avro::Node> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x115ccaf0 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 5. DB::AvroDeserializer::createDeserializeFn(std::shared_ptr<avro::Node> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x115cc964 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 6. DB::AvroDeserializer::createAction(DB::Block const&, std::shared_ptr<avro::Node> const&, String const&) @ 0x115d03b0 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 7. DB::AvroDeserializer::createAction(DB::Block const&, std::shared_ptr<avro::Node> const&, String const&) @ 0x115d1294 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 8. DB::AvroDeserializer::AvroDeserializer(DB::Block const&, avro::ValidSchema, bool, bool, DB::FormatSettings const&) @ 0x115d2358 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 9. DB::AvroConfluentRowInputFormat::getOrCreateDeserializer(unsigned int) @ 0x115d5060 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 10. DB::AvroConfluentRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadExtension&) @ 0x115d47b4 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 11. DB::IRowInputFormat::generate() @ 0x115efcc8 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 12. DB::ISource::tryGenerate() @ 0x115790ac in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 13. DB::ISource::work() @ 0x11578bb0 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 14. DB::StreamingFormatExecutor::execute() @ 0x11598260 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 15. DB::KafkaSource::generateImpl() @ 0x10ef1ce8 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 16. DB::KafkaSource::generate() @ 0x10ef4678 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 17. DB::ISource::tryGenerate() @ 0x115790ac in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 18. DB::ISource::work() @ 0x11578bb0 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 19. DB::ExecutionThreadContext::executeTask() @ 0x1158e04c in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 20. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x11585398 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 21. DB::PipelineExecutor::executeImpl(unsigned long) @ 0x1158483c in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 22. DB::PipelineExecutor::execute(unsigned long) @ 0x11584494 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 23. DB::CompletedPipelineExecutor::execute() @ 0x11582bf8 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 24. DB::StorageKafka::streamToViews() @ 0x10ee2bd4 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 25. DB::StorageKafka::threadFunc(unsigned long) @ 0x10ee11bc in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 26. DB::BackgroundSchedulePoolTaskInfo::execute() @ 0xf8da35c in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 27. DB::BackgroundSchedulePool::threadFunction() @ 0xf8dd1bc in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 28. ? @ 0xf8ddf38 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 29. ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0xbd411d4 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 30. ? @ 0xbd46388 in /usr/bin/clickhouse\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 31. start_thread @ 0x7624 in /usr/lib/aarch64-linux-gnu/libpthread-2.31.so\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2  (version 23.4.5.22 (official build))\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 2023.07.15 06:53:09.265133 [ 231 ] {} <Error> void DB::StorageKafka::threadFunc(size_t): Code: 44. DB::Exception: Type Int64 is not compatible with Avro union:\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 [\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2     \"long\"\r\nchi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 ]: column transactions: while parsing Kafka message (topic: xxx, partition: 6, offset: 585030)': While executing Kafka. (ILLEGAL_COLUMN), Stack trace (when copying this message, always include the lines below):\r\n```\r\n\r\n**Expected behaviour**\r\n\r\nTake the first type of the Union specified\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-07-15T16:23:02Z",
  "modified_files": [
    "src/Processors/Formats/Impl/AvroRowInputFormat.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02813_avro_union_with_one_type.reference",
    "b/tests/queries/0_stateless/02813_avro_union_with_one_type.sh"
  ]
}