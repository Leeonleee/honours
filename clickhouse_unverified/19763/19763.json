{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19763,
  "instance_id": "ClickHouse__ClickHouse-19763",
  "issue_numbers": [
    "19755"
  ],
  "base_commit": "77e86901b8be14d6a9acd07b1b11615582e9a992",
  "patch": "diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex 77f3c9d7537f..116c47eda559 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -844,7 +844,12 @@ ActionsDAGPtr SelectQueryExpressionAnalyzer::appendPrewhere(\n     step.required_output.push_back(prewhere_column_name);\n     step.can_remove_required_output.push_back(true);\n \n-    auto filter_type = (*step.actions()->getIndex().find(prewhere_column_name))->result_type;\n+    const auto & index = step.actions()->getIndex();\n+    auto it = index.find(prewhere_column_name);\n+    if (it == index.end())\n+        throw Exception(ErrorCodes::UNKNOWN_IDENTIFIER, \"Unknown identifier: '{}'\", prewhere_column_name);\n+\n+    auto filter_type = (*it)->result_type;\n     if (!filter_type->canBeUsedInBooleanContext())\n         throw Exception(\"Invalid type for filter in PREWHERE: \" + filter_type->getName(),\n                         ErrorCodes::ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER);\n@@ -944,7 +949,12 @@ bool SelectQueryExpressionAnalyzer::appendWhere(ExpressionActionsChain & chain,\n     step.required_output.push_back(where_column_name);\n     step.can_remove_required_output = {true};\n \n-    auto filter_type = (*step.actions()->getIndex().find(where_column_name))->result_type;\n+    const auto & index = step.actions()->getIndex();\n+    auto it = index.find(where_column_name);\n+    if (it == index.end())\n+        throw Exception(ErrorCodes::UNKNOWN_IDENTIFIER, \"Unknown identifier: '{}'\", where_column_name);\n+\n+    auto filter_type = (*it)->result_type;\n     if (!filter_type->canBeUsedInBooleanContext())\n         throw Exception(\"Invalid type for filter in WHERE: \" + filter_type->getName(),\n                         ErrorCodes::ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01674_where_prewhere_array_crash.reference b/tests/queries/0_stateless/01674_where_prewhere_array_crash.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01674_where_prewhere_array_crash.sql b/tests/queries/0_stateless/01674_where_prewhere_array_crash.sql\nnew file mode 100644\nindex 000000000000..d6eef000b360\n--- /dev/null\n+++ b/tests/queries/0_stateless/01674_where_prewhere_array_crash.sql\n@@ -0,0 +1,5 @@\n+drop table if exists tab;\n+create table tab  (x UInt64, `arr.a` Array(UInt64), `arr.b` Array(UInt64)) engine = MergeTree order by x;\n+select x from tab array join arr prewhere x != 0 where arr; -- { serverError 47; }\n+select x from tab array join arr prewhere arr where x != 0; -- { serverError 47; }\n+drop table if exists tab;\n",
  "problem_statement": "Segfault in Expression analyzer found with fuzzer\n**Describe the bug**\r\n\r\nThe query:\r\n```\r\nSELECT\r\n    (current_database = currentDatabase()) AND (type = 0),\r\n    ((current_database = currentDatabase()) AND (type = NULL)) AND (type = NULL) AND ((current_database = currentDatabase()) AND (type = 1048575)) AND (type = NULL) AND (event_date >= yesterday())\r\nFROM system.query_log\r\nARRAY JOIN ProfileEvents\r\nWHERE ProfileEvents AND (current_database = currentDatabase())\r\nORDER BY event_time DESC NULLS FIRST\r\nLIMIT 0\r\n```\r\ncrashes the server.\r\n\r\nMost likely introduced here: #16618\n",
  "hints_text": "",
  "created_at": "2021-01-28T09:45:57Z"
}