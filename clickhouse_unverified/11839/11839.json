{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11839,
  "instance_id": "ClickHouse__ClickHouse-11839",
  "issue_numbers": [
    "11765"
  ],
  "base_commit": "3f96bdaa240cbf39daed526298c558a1f9444609",
  "patch": "diff --git a/src/Functions/FunctionsComparison.h b/src/Functions/FunctionsComparison.h\nindex 028dc78c25c1..fc13dd630aeb 100644\n--- a/src/Functions/FunctionsComparison.h\n+++ b/src/Functions/FunctionsComparison.h\n@@ -56,6 +56,7 @@ namespace ErrorCodes\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n     extern const int LOGICAL_ERROR;\n     extern const int NOT_IMPLEMENTED;\n+    extern const int BAD_ARGUMENTS;\n }\n \n \n@@ -879,6 +880,9 @@ class FunctionComparison : public IFunction\n         if (0 == tuple_size)\n             throw Exception(\"Comparison of zero-sized tuples is not implemented.\", ErrorCodes::NOT_IMPLEMENTED);\n \n+        if (tuple_size != typeid_cast<const DataTypeTuple &>(*c1.type).getElements().size())\n+            throw Exception(\"Cannot compare tuples of different sizes.\", ErrorCodes::BAD_ARGUMENTS);\n+\n         ColumnsWithTypeAndName x(tuple_size);\n         ColumnsWithTypeAndName y(tuple_size);\n \n@@ -1178,7 +1182,8 @@ class FunctionComparison : public IFunction\n                     + \" of first argument of function \" + getName(),\n                     ErrorCodes::ILLEGAL_COLUMN);\n         }\n-        else if (checkAndGetDataType<DataTypeTuple>(left_type.get()))\n+        else if (checkAndGetDataType<DataTypeTuple>(left_type.get())\n+            && checkAndGetDataType<DataTypeTuple>(right_type.get()))\n         {\n             executeTuple(block, result, col_with_type_and_name_left, col_with_type_and_name_right, input_rows_count);\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01329_compare_tuple_string_constant.reference b/tests/queries/0_stateless/01329_compare_tuple_string_constant.reference\nnew file mode 100644\nindex 000000000000..b261da18d51a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01329_compare_tuple_string_constant.reference\n@@ -0,0 +1,2 @@\n+1\n+0\ndiff --git a/tests/queries/0_stateless/01329_compare_tuple_string_constant.sql b/tests/queries/0_stateless/01329_compare_tuple_string_constant.sql\nnew file mode 100644\nindex 000000000000..5878d8c41767\n--- /dev/null\n+++ b/tests/queries/0_stateless/01329_compare_tuple_string_constant.sql\n@@ -0,0 +1,4 @@\n+SELECT tuple(1) < ''; -- { serverError 27 }\n+SELECT tuple(1) < materialize(''); -- { serverError 386 }\n+SELECT (1, 2) < '(1,3)';\n+SELECT (1, 2) < '(1, 1)';\n",
  "problem_statement": "Logical error: 'Bad cast from type DB::ColumnConst to DB::ColumnTuple'.\n**Describe the bug**\r\nA clear and concise description of what works not as it is supposed to.\r\n\r\n**How to reproduce**\r\n``` sql\r\nSELECT less(( SELECT NULL, '', [] ) AS yrsihrr, 'W/u&A');\r\n```\r\n\r\n```\r\n2020.06.18 15:36:40.103957 [ 9997 ] {d4957152-4a26-4a67-bed6-a7481de66d4b} <Debug> executeQuery: (from [::1]:56390) SELECT less(( SELECT NULL, '', [] ) AS yrsihrr, 'W/u&A');\r\n2020.06.18 15:36:40.105710 [ 9997 ] {d4957152-4a26-4a67-bed6-a7481de66d4b} <Trace> ContextAccess (default): Access granted: SELECT(dummy) ON system.one\r\n2020.06.18 15:36:40.105987 [ 9997 ] {d4957152-4a26-4a67-bed6-a7481de66d4b} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.06.18 15:36:40.108712 [ 9997 ] {d4957152-4a26-4a67-bed6-a7481de66d4b} <Error> : Logical error: 'Bad cast from type DB::ColumnConst to DB::ColumnTuple'.\r\n2020.06.18 15:36:40.109750 [ 201 ] {} <Trace> BaseDaemon: Received signal 6\r\n2020.06.18 15:36:40.110111 [ 209055 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.06.18 15:36:40.110233 [ 209055 ] {} <Fatal> BaseDaemon: (version 20.5.1.3789) (from thread 9997) (query_id: d4957152-4a26-4a67-bed6-a7481de66d4b) Received signal Aborted (6).\r\n2020.06.18 15:36:40.110303 [ 209055 ] {} <Fatal> BaseDaemon:\r\n2020.06.18 15:36:40.110398 [ 209055 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f766f0a03eb 0x7f766f07f899 0x7f766f07f769 0x7f766f091006 0x15d25608 0x172279b4 0x182c6ace 0x182bf4cc 0x16cb0081 0x16cae1ff 0x16d60e73 0x16d61f8d 0x1d19e7b0 0x1d1\r\na1ee1 0x1d1a1823 0x1d4ea772 0x1d4f3066 0x1d4edb6a 0x1d4eab77 0x1d4d4d7b 0x1d4e3de6 0x1d4d4d8d 0x1d4cc66d 0x1d4cf602 0x1d4d21d4 0x1d21bee2 0x1d219c17 0x1d216acb\r\n2020.06.18 15:36:40.110561 [ 209055 ] {} <Fatal> BaseDaemon: 4. gsignal @ 0x463eb in /usr/lib/x86_64-linux-gnu/libc-2.30.so\r\n2020.06.18 15:36:40.110643 [ 209055 ] {} <Fatal> BaseDaemon: 5. abort @ 0x25899 in /usr/lib/x86_64-linux-gnu/libc-2.30.so\r\n2020.06.18 15:36:40.110822 [ 209055 ] {} <Fatal> BaseDaemon: 6. ? @ 0x25769 in /usr/lib/x86_64-linux-gnu/libc-2.30.so\r\n2020.06.18 15:36:40.110917 [ 209055 ] {} <Fatal> BaseDaemon: 7. ? @ 0x37006 in /usr/lib/x86_64-linux-gnu/libc-2.30.so\r\n2020.06.18 15:36:40.111138 [ 209055 ] {} <Fatal> BaseDaemon: 8. /build/obj-x86_64-linux-gnu/../src/Common/Exception.cpp:48: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x15d25608 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.117548 [ 209055 ] {} <Fatal> BaseDaemon: 9. /build/obj-x86_64-linux-gnu/../src/Common/assert_cast.h:47: DB::ColumnTuple const& assert_cast<DB::ColumnTuple const&, DB::IColumn const&>(DB::IColumn const&) @ 0x172279b4 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.125582 [ 209055 ] {} <Fatal> BaseDaemon: 10. /build/obj-x86_64-linux-gnu/../src/Functions/FunctionsComparison.h:899: DB::FunctionComparison<DB::LessOp, DB::NameLess>::executeTuple(DB::Block&, unsigned long, DB::ColumnWithTypeAndName const&, DB::ColumnWithTypeAndName const&, unsigned long) @ 0x182c6ace in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.133315 [ 209055 ] {} <Fatal> BaseDaemon: 11. /build/obj-x86_64-linux-gnu/../src/Functions/FunctionsComparison.h:1183: DB::FunctionComparison<DB::LessOp, DB::NameLess>::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) @ 0x182bf4cc in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.137274 [ 209055 ] {} <Fatal> BaseDaemon: 12. /build/obj-x86_64-linux-gnu/../src/Functions/IFunctionImpl.h:208: DB::IFunction::executeImplDryRun(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) @ 0x16cb0081 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.141293 [ 209055 ] {} <Fatal> BaseDaemon: 13. /build/obj-x86_64-linux-gnu/../src/Functions/IFunctionAdaptors.h:156: DB::DefaultExecutable::executeDryRun(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) @ 0x16cae1ff in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.145108 [ 209055 ] {} <Fatal> BaseDaemon: 14. /build/obj-x86_64-linux-gnu/../src/Functions/IFunction.cpp:323: DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x16d60e73 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.148931 [ 209055 ] {} <Fatal> BaseDaemon: 15. /build/obj-x86_64-linux-gnu/../src/Functions/IFunction.cpp:486: DB::ExecutableFunctionAdaptor::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x16d61f8d in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.176769 [ 209055 ] {} <Fatal> BaseDaemon: 16. /build/obj-x86_64-linux-gnu/../src/Interpreters/ExpressionActions.cpp:206: DB::ExpressionAction::prepare(DB::Block&, DB::Settings const&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) @ 0x1d19e7b0 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.205270 [ 209055 ] {} <Fatal> BaseDaemon: 17. /build/obj-x86_64-linux-gnu/../src/Interpreters/ExpressionActions.cpp:616: DB::ExpressionActions::addImpl(DB::ExpressionAction, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) @ 0x1d1a1ee1 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.233839 [ 209055 ] {} <Fatal> BaseDaemon: 18. /build/obj-x86_64-linux-gnu/../src/Interpreters/ExpressionActions.cpp:577: DB::ExpressionActions::add(DB::ExpressionAction const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) @ 0x1d1a1823 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.262659 [ 209055 ] {} <Fatal> BaseDaemon: 19. /build/obj-x86_64-linux-gnu/../src/Interpreters/ActionsVisitor.cpp:253: DB::ScopeStack::addAction(DB::ExpressionAction const&) @ 0x1d4ea772 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.292051 [ 209055 ] {} <Fatal> BaseDaemon: 20. /build/obj-x86_64-linux-gnu/../src/Interpreters/ActionsVisitor.h:117: DB::ActionsMatcher::Data::addAction(DB::ExpressionAction const&) @ 0x1d4f3066 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.320445 [ 209055 ] {} <Fatal> BaseDaemon: 21. /build/obj-x86_64-linux-gnu/../src/Interpreters/ActionsVisitor.cpp:593: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x1d4edb6a in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.349012 [ 209055 ] {} <Fatal> BaseDaemon: 22. /build/obj-x86_64-linux-gnu/../src/Interpreters/ActionsVisitor.cpp:310: DB::ActionsMatcher::visit(std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x1d4eab77 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.376710 [ 209055 ] {} <Fatal> BaseDaemon: 23. /build/obj-x86_64-linux-gnu/../src/Interpreters/InDepthNodeVisitor.h:32: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0x1d4d4d7b in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.406212 [ 209055 ] {} <Fatal> BaseDaemon: 24. /build/obj-x86_64-linux-gnu/../src/Interpreters/InDepthNodeVisitor.h:45: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::__1::shared_ptr<DB::IAST> const>::visitChildren(std::__1::shared_ptr<DB::IAST> const&) @ 0x1d4e3de6 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.433009 [ 209055 ] {} <Fatal> BaseDaemon: 25. /build/obj-x86_64-linux-gnu/../src/Interpreters/InDepthNodeVisitor.h:35: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0x1d4d4d8d in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.459301 [ 209055 ] {} <Fatal> BaseDaemon: 26. /build/obj-x86_64-linux-gnu/../src/Interpreters/ExpressionAnalyzer.cpp:388: DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ExpressionActions>&, bool) @ 0x1d4cc66d in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.485843 [ 209055 ] {} <Fatal> BaseDaemon: 27. /build/obj-x86_64-linux-gnu/../src/Interpreters/ExpressionAnalyzer.cpp:817: DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x1d4cf602 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.513530 [ 209055 ] {} <Fatal> BaseDaemon: 28. /build/obj-x86_64-linux-gnu/../src/Interpreters/ExpressionAnalyzer.cpp:1171: DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, bool, bool, bool, std::__1::shared_ptr<DB::FilterInfo> const&, DB::Block const&) @ 0x1d4d21d4 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.540357 [ 209055 ] {} <Fatal> BaseDaemon: 29. /build/obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectQuery.cpp:494: DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x1d21bee2 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.566411 [ 209055 ] {} <Fatal> BaseDaemon: 30. /build/obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectQuery.cpp:394: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)::$_2::operator()(bool) const @ 0x1d219c17 in /usr/bin/clickhouse\r\n2020.06.18 15:36:40.592894 [ 209055 ] {} <Fatal> BaseDaemon: 31. /build/obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectQuery.cpp:397: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x1d216acb in /usr/bin/clickhouse\r\n```\r\n\r\nhttps://clickhouse-test-reports.s3.yandex.net/11753/e91a29095b9231e441c11148f74517534437ddb2/functional_stateless_tests_(debug).html#fail1\r\n\n",
  "hints_text": "`SELECT tuple(1) < '';`",
  "created_at": "2020-06-21T13:24:16Z"
}