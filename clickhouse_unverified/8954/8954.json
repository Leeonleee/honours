{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8954,
  "instance_id": "ClickHouse__ClickHouse-8954",
  "issue_numbers": [
    "7477"
  ],
  "base_commit": "45be504bdff69bec0029e0a8eb6ed7ce7e1cd63b",
  "patch": "diff --git a/dbms/src/Common/CurrentThread.cpp b/dbms/src/Common/CurrentThread.cpp\nindex ca39bec414c0..ba2f28a8fe97 100644\n--- a/dbms/src/Common/CurrentThread.cpp\n+++ b/dbms/src/Common/CurrentThread.cpp\n@@ -7,7 +7,7 @@\n #include <Common/TaskStatsInfoGetter.h>\n #include <Interpreters/ProcessList.h>\n #include <Interpreters/Context.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n #include <Poco/Logger.h>\n \n \n@@ -34,7 +34,7 @@ bool CurrentThread::isInitialized()\n ThreadStatus & CurrentThread::get()\n {\n     if (unlikely(!current_thread))\n-        throw Exception(\"Thread #\" + std::to_string(getThreadNumber()) + \" status was not initialized\", ErrorCodes::LOGICAL_ERROR);\n+        throw Exception(\"Thread #\" + std::to_string(getThreadId()) + \" status was not initialized\", ErrorCodes::LOGICAL_ERROR);\n \n     return *current_thread;\n }\ndiff --git a/dbms/src/Common/QueryProfiler.cpp b/dbms/src/Common/QueryProfiler.cpp\nindex 96d96b151a70..860da0c348f0 100644\n--- a/dbms/src/Common/QueryProfiler.cpp\n+++ b/dbms/src/Common/QueryProfiler.cpp\n@@ -63,14 +63,14 @@ namespace\n                                     sizeof(UInt8) + // number of stack frames\n                                     sizeof(StackTrace::Frames) + // collected stack trace, maximum capacity\n                                     sizeof(TimerType) + // timer type\n-                                    sizeof(UInt32); // thread_number\n+                                    sizeof(UInt64); // thread_id\n         char buffer[buf_size];\n         WriteBufferFromFileDescriptorDiscardOnFailure out(trace_pipe.fds_rw[1], buf_size, buffer);\n \n         StringRef query_id = CurrentThread::getQueryId();\n         query_id.size = std::min(query_id.size, QUERY_ID_MAX_LEN);\n \n-        UInt32 thread_number = CurrentThread::get().thread_number;\n+        UInt64 thread_id = CurrentThread::get().thread_id;\n \n         const auto signal_context = *reinterpret_cast<ucontext_t *>(context);\n         const StackTrace stack_trace(signal_context);\n@@ -85,7 +85,7 @@ namespace\n             writePODBinary(stack_trace.getFrames()[i], out);\n \n         writePODBinary(timer_type, out);\n-        writePODBinary(thread_number, out);\n+        writePODBinary(thread_id, out);\n         out.next();\n     }\n \n@@ -103,7 +103,7 @@ namespace ErrorCodes\n }\n \n template <typename ProfilerImpl>\n-QueryProfilerBase<ProfilerImpl>::QueryProfilerBase(const Int32 thread_id, const int clock_type, UInt32 period, const int pause_signal_)\n+QueryProfilerBase<ProfilerImpl>::QueryProfilerBase(const UInt64 thread_id, const int clock_type, UInt32 period, const int pause_signal_)\n     : log(&Logger::get(\"QueryProfiler\"))\n     , pause_signal(pause_signal_)\n {\n@@ -200,7 +200,7 @@ void QueryProfilerBase<ProfilerImpl>::tryCleanup()\n template class QueryProfilerBase<QueryProfilerReal>;\n template class QueryProfilerBase<QueryProfilerCpu>;\n \n-QueryProfilerReal::QueryProfilerReal(const Int32 thread_id, const UInt32 period)\n+QueryProfilerReal::QueryProfilerReal(const UInt64 thread_id, const UInt32 period)\n     : QueryProfilerBase(thread_id, CLOCK_REALTIME, period, SIGUSR1)\n {}\n \n@@ -209,7 +209,7 @@ void QueryProfilerReal::signalHandler(int sig, siginfo_t * info, void * context)\n     writeTraceInfo(TimerType::Real, sig, info, context);\n }\n \n-QueryProfilerCpu::QueryProfilerCpu(const Int32 thread_id, const UInt32 period)\n+QueryProfilerCpu::QueryProfilerCpu(const UInt64 thread_id, const UInt32 period)\n     : QueryProfilerBase(thread_id, CLOCK_THREAD_CPUTIME_ID, period, SIGUSR2)\n {}\n \ndiff --git a/dbms/src/Common/QueryProfiler.h b/dbms/src/Common/QueryProfiler.h\nindex abbff6f6c0e3..c7cf7571715e 100644\n--- a/dbms/src/Common/QueryProfiler.h\n+++ b/dbms/src/Common/QueryProfiler.h\n@@ -36,7 +36,7 @@ template <typename ProfilerImpl>\n class QueryProfilerBase\n {\n public:\n-    QueryProfilerBase(const Int32 thread_id, const int clock_type, UInt32 period, const int pause_signal_);\n+    QueryProfilerBase(const UInt64 thread_id, const int clock_type, UInt32 period, const int pause_signal_);\n     ~QueryProfilerBase();\n \n private:\n@@ -60,7 +60,7 @@ class QueryProfilerBase\n class QueryProfilerReal : public QueryProfilerBase<QueryProfilerReal>\n {\n public:\n-    QueryProfilerReal(const Int32 thread_id, const UInt32 period);\n+    QueryProfilerReal(const UInt64 thread_id, const UInt32 period);\n \n     static void signalHandler(int sig, siginfo_t * info, void * context);\n };\n@@ -69,7 +69,7 @@ class QueryProfilerReal : public QueryProfilerBase<QueryProfilerReal>\n class QueryProfilerCpu : public QueryProfilerBase<QueryProfilerCpu>\n {\n public:\n-    QueryProfilerCpu(const Int32 thread_id, const UInt32 period);\n+    QueryProfilerCpu(const UInt64 thread_id, const UInt32 period);\n \n     static void signalHandler(int sig, siginfo_t * info, void * context);\n };\ndiff --git a/dbms/src/Common/TaskStatsInfoGetter.cpp b/dbms/src/Common/TaskStatsInfoGetter.cpp\nindex 99262740f6b3..85ed837e4ad9 100644\n--- a/dbms/src/Common/TaskStatsInfoGetter.cpp\n+++ b/dbms/src/Common/TaskStatsInfoGetter.cpp\n@@ -14,7 +14,6 @@\n #include <stdlib.h>\n #include <string.h>\n #include <sys/socket.h>\n-#include <syscall.h>\n #include <linux/genetlink.h>\n #include <linux/netlink.h>\n #include <linux/taskstats.h>\n@@ -287,16 +286,6 @@ void TaskStatsInfoGetter::getStat(::taskstats & out_stats, pid_t tid)\n }\n \n \n-static thread_local pid_t current_tid = 0;\n-pid_t TaskStatsInfoGetter::getCurrentTID()\n-{\n-    if (!current_tid)\n-        current_tid = syscall(SYS_gettid); /// This call is always successful. - man gettid\n-\n-    return current_tid;\n-}\n-\n-\n TaskStatsInfoGetter::~TaskStatsInfoGetter()\n {\n     if (netlink_socket_fd >= 0)\n@@ -331,11 +320,6 @@ void TaskStatsInfoGetter::getStat(::taskstats &, pid_t)\n {\n }\n \n-pid_t TaskStatsInfoGetter::getCurrentTID()\n-{\n-    return 0;\n-}\n-\n TaskStatsInfoGetter::~TaskStatsInfoGetter()\n {\n }\ndiff --git a/dbms/src/Common/TaskStatsInfoGetter.h b/dbms/src/Common/TaskStatsInfoGetter.h\nindex f3a581b2c784..1caa2a0fd926 100644\n--- a/dbms/src/Common/TaskStatsInfoGetter.h\n+++ b/dbms/src/Common/TaskStatsInfoGetter.h\n@@ -18,9 +18,6 @@ class TaskStatsInfoGetter : private boost::noncopyable\n \n     void getStat(::taskstats & stat, pid_t tid);\n \n-    /// Make a syscall and returns Linux thread id\n-    static pid_t getCurrentTID();\n-\n     /// Whether the current process has permissions (sudo or cap_net_admin capabilties) to get taskstats info\n     static bool checkPermissions();\n \ndiff --git a/dbms/src/Common/ThreadStatus.cpp b/dbms/src/Common/ThreadStatus.cpp\nindex ff6c23c1794e..a76a558da20e 100644\n--- a/dbms/src/Common/ThreadStatus.cpp\n+++ b/dbms/src/Common/ThreadStatus.cpp\n@@ -8,7 +8,7 @@\n #include <Common/ThreadStatus.h>\n \n #include <Poco/Logger.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n \n \n namespace DB\n@@ -28,14 +28,13 @@ thread_local ThreadStatus * current_thread = nullptr;\n TasksStatsCounters TasksStatsCounters::current()\n {\n     TasksStatsCounters res;\n-    CurrentThread::get().taskstats_getter->getStat(res.stat, CurrentThread::get().os_thread_id);\n+    CurrentThread::get().taskstats_getter->getStat(res.stat, CurrentThread::get().thread_id);\n     return res;\n }\n \n ThreadStatus::ThreadStatus()\n {\n-    thread_number = getThreadNumber();\n-    os_thread_id = TaskStatsInfoGetter::getCurrentTID();\n+    thread_id = getThreadId();\n \n     last_rusage = std::make_unique<RUsageCounters>();\n     last_taskstats = std::make_unique<TasksStatsCounters>();\ndiff --git a/dbms/src/Common/ThreadStatus.h b/dbms/src/Common/ThreadStatus.h\nindex 30779b1610bb..58af6d4efffd 100644\n--- a/dbms/src/Common/ThreadStatus.h\n+++ b/dbms/src/Common/ThreadStatus.h\n@@ -60,12 +60,10 @@ class ThreadGroupStatus\n \n     InternalTextLogsQueueWeakPtr logs_queue_ptr;\n \n-    std::vector<UInt32> thread_numbers;\n-    std::vector<UInt32> os_thread_ids;\n+    std::vector<UInt64> thread_ids;\n \n     /// The first thread created this thread group\n-    UInt32 master_thread_number = 0;\n-    Int32 master_thread_os_id = -1;\n+    UInt64 master_thread_id = 0;\n \n     LogsLevel client_logs_level = LogsLevel::none;\n \n@@ -89,10 +87,8 @@ class ThreadStatus : public boost::noncopyable\n     ThreadStatus();\n     ~ThreadStatus();\n \n-    /// Poco's thread number (the same number is used in logs)\n-    UInt32 thread_number = 0;\n     /// Linux's PID (or TGID) (the same id is shown by ps util)\n-    Int32 os_thread_id = -1;\n+    UInt64 thread_id = 0;\n     /// Also called \"nice\" value. If it was changed to non-zero (when attaching query) - will be reset to zero when query is detached.\n     Int32 os_thread_priority = 0;\n \ndiff --git a/dbms/src/Common/TraceCollector.cpp b/dbms/src/Common/TraceCollector.cpp\nindex 4b582c5ad4fe..ec0e4c38dbc3 100644\n--- a/dbms/src/Common/TraceCollector.cpp\n+++ b/dbms/src/Common/TraceCollector.cpp\n@@ -105,10 +105,10 @@ void TraceCollector::run()\n         TimerType timer_type;\n         readPODBinary(timer_type, in);\n \n-        UInt32 thread_number;\n-        readPODBinary(thread_number, in);\n+        UInt64 thread_id;\n+        readPODBinary(thread_id, in);\n \n-        TraceLogElement element{std::time(nullptr), timer_type, thread_number, query_id, trace};\n+        TraceLogElement element{std::time(nullptr), timer_type, thread_id, query_id, trace};\n         trace_log->add(element);\n     }\n }\ndiff --git a/dbms/src/DataStreams/InternalTextLogsRowOutputStream.cpp b/dbms/src/DataStreams/InternalTextLogsRowOutputStream.cpp\nindex 02d2f8cf440f..9e33d2ecd942 100644\n--- a/dbms/src/DataStreams/InternalTextLogsRowOutputStream.cpp\n+++ b/dbms/src/DataStreams/InternalTextLogsRowOutputStream.cpp\n@@ -24,7 +24,7 @@ void InternalTextLogsRowOutputStream::write(const Block & block)\n     auto & column_host_name = typeid_cast<const ColumnString &>(*block.getByName(\"host_name\").column);\n     auto & column_query_id = typeid_cast<const ColumnString &>(*block.getByName(\"query_id\").column);\n \n-    auto & array_thread_number = typeid_cast<const ColumnUInt32 &>(*block.getByName(\"thread_number\").column).getData();\n+    auto & array_thread_id = typeid_cast<const ColumnUInt64 &>(*block.getByName(\"thread_id\").column).getData();\n     auto & array_priority = typeid_cast<const ColumnInt8 &>(*block.getByName(\"priority\").column).getData();\n     auto & column_source = typeid_cast<const ColumnString &>(*block.getByName(\"source\").column);\n     auto & column_text = typeid_cast<const ColumnString &>(*block.getByName(\"text\").column);\n@@ -59,9 +59,9 @@ void InternalTextLogsRowOutputStream::write(const Block & block)\n             writeCString(\"}\", wb);\n         }\n \n-        UInt32 thread_number = array_thread_number[row_num];\n+        UInt64 thread_id = array_thread_id[row_num];\n         writeCString(\" [ \", wb);\n-        writeIntText(thread_number, wb);\n+        writeIntText(thread_id, wb);\n         writeCString(\" ] <\", wb);\n \n         Int8 priority = array_priority[row_num];\ndiff --git a/dbms/src/Interpreters/InternalTextLogsQueue.cpp b/dbms/src/Interpreters/InternalTextLogsQueue.cpp\nindex 6028514f11f0..ef555f1b34f2 100644\n--- a/dbms/src/Interpreters/InternalTextLogsQueue.cpp\n+++ b/dbms/src/Interpreters/InternalTextLogsQueue.cpp\n@@ -23,7 +23,7 @@ Block InternalTextLogsQueue::getSampleBlock()\n         {std::make_shared<DataTypeUInt32>(),   \"event_time_microseconds\"},\n         {std::make_shared<DataTypeString>(),   \"host_name\"},\n         {std::make_shared<DataTypeString>(),   \"query_id\"},\n-        {std::make_shared<DataTypeUInt32>(),   \"thread_number\"},\n+        {std::make_shared<DataTypeUInt64>(),   \"thread_id\"},\n         {std::make_shared<DataTypeInt8>(),     \"priority\"},\n         {std::make_shared<DataTypeString>(),   \"source\"},\n         {std::make_shared<DataTypeString>(),   \"text\"}\ndiff --git a/dbms/src/Interpreters/ProcessList.cpp b/dbms/src/Interpreters/ProcessList.cpp\nindex 50e2e5a8c895..c581c50754f3 100644\n--- a/dbms/src/Interpreters/ProcessList.cpp\n+++ b/dbms/src/Interpreters/ProcessList.cpp\n@@ -447,8 +447,7 @@ QueryStatusInfo QueryStatus::getInfo(bool get_thread_list, bool get_profile_even\n         if (get_thread_list)\n         {\n             std::lock_guard lock(thread_group->mutex);\n-            res.thread_numbers = thread_group->thread_numbers;\n-            res.os_thread_ids = thread_group->os_thread_ids;\n+            res.thread_ids = thread_group->thread_ids;\n         }\n \n         if (get_profile_events)\ndiff --git a/dbms/src/Interpreters/ProcessList.h b/dbms/src/Interpreters/ProcessList.h\nindex d5631abdb0cf..a5edf7f90d8b 100644\n--- a/dbms/src/Interpreters/ProcessList.h\n+++ b/dbms/src/Interpreters/ProcessList.h\n@@ -64,9 +64,8 @@ struct QueryStatusInfo\n     ClientInfo client_info;\n     bool is_cancelled;\n \n-    /// Optional fields, filled by request\n-    std::vector<UInt32> thread_numbers;\n-    std::vector<UInt32> os_thread_ids;\n+    /// Optional fields, filled by query\n+    std::vector<UInt64> thread_ids;\n     std::shared_ptr<ProfileEvents::Counters> profile_counters;\n     std::shared_ptr<Settings> query_settings;\n };\ndiff --git a/dbms/src/Interpreters/QueryLog.cpp b/dbms/src/Interpreters/QueryLog.cpp\nindex b57b54ac710c..638ac68daa56 100644\n--- a/dbms/src/Interpreters/QueryLog.cpp\n+++ b/dbms/src/Interpreters/QueryLog.cpp\n@@ -76,8 +76,7 @@ Block QueryLogElement::createBlock()\n \n         {std::make_shared<DataTypeUInt32>(),                                  \"revision\"},\n \n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt32>()), \"thread_numbers\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt32>()), \"os_thread_ids\"},\n+        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"thread_ids\"},\n         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"ProfileEvents.Names\"},\n         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"ProfileEvents.Values\"},\n         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"Settings.Names\"},\n@@ -118,17 +117,9 @@ void QueryLogElement::appendToBlock(Block & block) const\n \n     {\n         Array threads_array;\n-        threads_array.reserve(thread_numbers.size());\n-        for (const UInt32 thread_number : thread_numbers)\n-            threads_array.emplace_back(UInt64(thread_number));\n-        columns[i++]->insert(threads_array);\n-    }\n-\n-    {\n-        Array threads_array;\n-        threads_array.reserve(os_thread_ids.size());\n-        for (const UInt32 thread_number : os_thread_ids)\n-            threads_array.emplace_back(UInt64(thread_number));\n+        threads_array.reserve(thread_ids.size());\n+        for (const UInt64 thread_id : thread_ids)\n+            threads_array.emplace_back(thread_id);\n         columns[i++]->insert(threads_array);\n     }\n \ndiff --git a/dbms/src/Interpreters/QueryLog.h b/dbms/src/Interpreters/QueryLog.h\nindex f14691df64ed..22183dd5811c 100644\n--- a/dbms/src/Interpreters/QueryLog.h\n+++ b/dbms/src/Interpreters/QueryLog.h\n@@ -60,8 +60,7 @@ struct QueryLogElement\n \n     ClientInfo client_info;\n \n-    std::vector<UInt32> thread_numbers;\n-    std::vector<UInt32> os_thread_ids;\n+    std::vector<UInt64> thread_ids;\n     std::shared_ptr<ProfileEvents::Counters> profile_counters;\n     std::shared_ptr<Settings> query_settings;\n \ndiff --git a/dbms/src/Interpreters/QueryThreadLog.cpp b/dbms/src/Interpreters/QueryThreadLog.cpp\nindex 2e81564c14b5..225e768eb3a2 100644\n--- a/dbms/src/Interpreters/QueryThreadLog.cpp\n+++ b/dbms/src/Interpreters/QueryThreadLog.cpp\n@@ -35,10 +35,8 @@ Block QueryThreadLogElement::createBlock()\n         {std::make_shared<DataTypeInt64>(),         \"peak_memory_usage\"},\n \n         {std::make_shared<DataTypeString>(),        \"thread_name\"},\n-        {std::make_shared<DataTypeUInt32>(),        \"thread_number\"},\n-        {std::make_shared<DataTypeInt32>(),         \"os_thread_id\"},\n-        {std::make_shared<DataTypeUInt32>(),        \"master_thread_number\"},\n-        {std::make_shared<DataTypeInt32>(),         \"master_os_thread_id\"},\n+        {std::make_shared<DataTypeUInt64>(),        \"thread_id\"},\n+        {std::make_shared<DataTypeUInt64>(),        \"master_thread_id\"},\n         {std::make_shared<DataTypeString>(),        \"query\"},\n \n         {std::make_shared<DataTypeUInt8>(),         \"is_initial_query\"},\n@@ -89,10 +87,8 @@ void QueryThreadLogElement::appendToBlock(Block & block) const\n     columns[i++]->insert(peak_memory_usage);\n \n     columns[i++]->insertData(thread_name.data(), thread_name.size());\n-    columns[i++]->insert(thread_number);\n-    columns[i++]->insert(os_thread_id);\n-    columns[i++]->insert(master_thread_number);\n-    columns[i++]->insert(master_os_thread_id);\n+    columns[i++]->insert(thread_id);\n+    columns[i++]->insert(master_thread_id);\n \n     columns[i++]->insertData(query.data(), query.size());\n \ndiff --git a/dbms/src/Interpreters/QueryThreadLog.h b/dbms/src/Interpreters/QueryThreadLog.h\nindex 36b8dacd1e68..0f10648e27fc 100644\n--- a/dbms/src/Interpreters/QueryThreadLog.h\n+++ b/dbms/src/Interpreters/QueryThreadLog.h\n@@ -32,10 +32,8 @@ struct QueryThreadLogElement\n     Int64 peak_memory_usage{};\n \n     String thread_name;\n-    UInt32 thread_number{};\n-    Int32 os_thread_id{};\n-    UInt32 master_thread_number{};\n-    Int32 master_os_thread_id{};\n+    UInt64 thread_id{};\n+    UInt64 master_thread_id{};\n \n     String query;\n     ClientInfo client_info;\ndiff --git a/dbms/src/Interpreters/TextLog.cpp b/dbms/src/Interpreters/TextLog.cpp\nindex 7cb27782cb20..c09877c2df56 100644\n--- a/dbms/src/Interpreters/TextLog.cpp\n+++ b/dbms/src/Interpreters/TextLog.cpp\n@@ -32,8 +32,7 @@ Block TextLogElement::createBlock()\n         {std::make_shared<DataTypeUInt32>(),                                                  \"microseconds\"},\n \n         {std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),        \"thread_name\"},\n-        {std::make_shared<DataTypeUInt32>(),                                                  \"thread_number\"},\n-        {std::make_shared<DataTypeUInt32>(),                                                  \"os_thread_id\"},\n+        {std::make_shared<DataTypeUInt64>(),                                                  \"thread_id\"},\n \n         {std::move(priority_datatype),                                                        \"level\"},\n         {std::make_shared<DataTypeString>(),                                                  \"query_id\"},\n@@ -58,8 +57,7 @@ void TextLogElement::appendToBlock(Block & block) const\n     columns[i++]->insert(microseconds);\n \n     columns[i++]->insertData(thread_name.data(), thread_name.size());\n-    columns[i++]->insert(thread_number);\n-    columns[i++]->insert(os_thread_id);\n+    columns[i++]->insert(thread_id);\n \n     columns[i++]->insert(level);\n     columns[i++]->insert(query_id);\ndiff --git a/dbms/src/Interpreters/TextLog.h b/dbms/src/Interpreters/TextLog.h\nindex 34f40ffe5f1e..fff45f143281 100644\n--- a/dbms/src/Interpreters/TextLog.h\n+++ b/dbms/src/Interpreters/TextLog.h\n@@ -12,8 +12,7 @@ struct TextLogElement\n     UInt32 microseconds;\n \n     String thread_name;\n-    UInt32 os_thread_id;\n-    UInt32 thread_number;\n+    UInt64 thread_id;\n \n     Message::Priority level = Message::PRIO_TRACE;\n \ndiff --git a/dbms/src/Interpreters/ThreadStatusExt.cpp b/dbms/src/Interpreters/ThreadStatusExt.cpp\nindex d7f8829b016f..34a1f974ae38 100644\n--- a/dbms/src/Interpreters/ThreadStatusExt.cpp\n+++ b/dbms/src/Interpreters/ThreadStatusExt.cpp\n@@ -68,8 +68,7 @@ void ThreadStatus::setupState(const ThreadGroupStatusPtr & thread_group_)\n         std::lock_guard lock(thread_group->mutex);\n \n         /// NOTE: thread may be attached multiple times if it is reused from a thread pool.\n-        thread_group->thread_numbers.emplace_back(thread_number);\n-        thread_group->os_thread_ids.emplace_back(os_thread_id);\n+        thread_group->thread_ids.emplace_back(thread_id);\n \n         logs_queue_ptr = thread_group->logs_queue_ptr;\n         query_context = thread_group->query_context;\n@@ -90,7 +89,7 @@ void ThreadStatus::setupState(const ThreadGroupStatusPtr & thread_group_)\n         {\n             LOG_TRACE(log, \"Setting nice to \" << new_os_thread_priority);\n \n-            if (0 != setpriority(PRIO_PROCESS, os_thread_id, new_os_thread_priority))\n+            if (0 != setpriority(PRIO_PROCESS, thread_id, new_os_thread_priority))\n                 throwFromErrno(\"Cannot 'setpriority'\", ErrorCodes::CANNOT_SET_THREAD_PRIORITY);\n \n             os_thread_priority = new_os_thread_priority;\n@@ -109,8 +108,7 @@ void ThreadStatus::initializeQuery()\n \n     /// No need to lock on mutex here\n     thread_group->memory_tracker.setDescription(\"(for query)\");\n-    thread_group->master_thread_number = thread_number;\n-    thread_group->master_thread_os_id = os_thread_id;\n+    thread_group->master_thread_id = thread_id;\n }\n \n void ThreadStatus::attachQuery(const ThreadGroupStatusPtr & thread_group_, bool check_detached)\n@@ -163,13 +161,11 @@ void ThreadStatus::initQueryProfiler()\n     try\n     {\n         if (settings.query_profiler_real_time_period_ns > 0)\n-            query_profiler_real = std::make_unique<QueryProfilerReal>(\n-                /* thread_id */ os_thread_id,\n+            query_profiler_real = std::make_unique<QueryProfilerReal>(thread_id,\n                 /* period */ static_cast<UInt32>(settings.query_profiler_real_time_period_ns));\n \n         if (settings.query_profiler_cpu_time_period_ns > 0)\n-            query_profiler_cpu = std::make_unique<QueryProfilerCpu>(\n-                /* thread_id */ os_thread_id,\n+            query_profiler_cpu = std::make_unique<QueryProfilerCpu>(thread_id,\n                 /* period */ static_cast<UInt32>(settings.query_profiler_cpu_time_period_ns));\n     }\n     catch (...)\n@@ -216,7 +212,7 @@ void ThreadStatus::detachQuery(bool exit_if_already_detached, bool thread_exits)\n     {\n         LOG_TRACE(log, \"Resetting nice\");\n \n-        if (0 != setpriority(PRIO_PROCESS, os_thread_id, 0))\n+        if (0 != setpriority(PRIO_PROCESS, thread_id, 0))\n             LOG_ERROR(log, \"Cannot 'setpriority' back to zero: \" << errnoToString(ErrorCodes::CANNOT_SET_THREAD_PRIORITY, errno));\n \n         os_thread_priority = 0;\n@@ -242,17 +238,14 @@ void ThreadStatus::logToQueryThreadLog(QueryThreadLog & thread_log)\n     elem.peak_memory_usage = memory_tracker.getPeak();\n \n     elem.thread_name = getThreadName();\n-    elem.thread_number = thread_number;\n-    elem.os_thread_id = os_thread_id;\n+    elem.thread_id = thread_id;\n \n     if (thread_group)\n     {\n         {\n             std::lock_guard lock(thread_group->mutex);\n \n-            elem.master_thread_number = thread_group->master_thread_number;\n-            elem.master_os_thread_id = thread_group->master_thread_os_id;\n-\n+            elem.master_thread_id = thread_group->master_thread_id;\n             elem.query = thread_group->query;\n         }\n     }\ndiff --git a/dbms/src/Interpreters/TraceLog.cpp b/dbms/src/Interpreters/TraceLog.cpp\nindex 5cde9d30f0f3..977d04704528 100644\n--- a/dbms/src/Interpreters/TraceLog.cpp\n+++ b/dbms/src/Interpreters/TraceLog.cpp\n@@ -24,7 +24,7 @@ Block TraceLogElement::createBlock()\n         {std::make_shared<DataTypeDateTime>(),                                \"event_time\"},\n         {std::make_shared<DataTypeUInt32>(),                                  \"revision\"},\n         {std::make_shared<TimerDataType>(timer_values),                       \"timer_type\"},\n-        {std::make_shared<DataTypeUInt32>(),                                  \"thread_number\"},\n+        {std::make_shared<DataTypeUInt64>(),                                  \"thread_id\"},\n         {std::make_shared<DataTypeString>(),                                  \"query_id\"},\n         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"trace\"}\n     };\n@@ -40,7 +40,7 @@ void TraceLogElement::appendToBlock(Block & block) const\n     columns[i++]->insert(event_time);\n     columns[i++]->insert(ClickHouseRevision::get());\n     columns[i++]->insert(static_cast<UInt8>(timer_type));\n-    columns[i++]->insert(thread_number);\n+    columns[i++]->insert(thread_id);\n     columns[i++]->insertData(query_id.data(), query_id.size());\n     columns[i++]->insert(trace);\n \ndiff --git a/dbms/src/Interpreters/TraceLog.h b/dbms/src/Interpreters/TraceLog.h\nindex f5df349656a0..38d6ba77de3f 100644\n--- a/dbms/src/Interpreters/TraceLog.h\n+++ b/dbms/src/Interpreters/TraceLog.h\n@@ -15,7 +15,7 @@ struct TraceLogElement\n \n     time_t event_time{};\n     TimerType timer_type{};\n-    UInt32 thread_number{};\n+    UInt64 thread_id{};\n     String query_id{};\n     Array trace{};\n \ndiff --git a/dbms/src/Interpreters/executeQuery.cpp b/dbms/src/Interpreters/executeQuery.cpp\nindex b6741e17b8d4..ac67ded4b45d 100644\n--- a/dbms/src/Interpreters/executeQuery.cpp\n+++ b/dbms/src/Interpreters/executeQuery.cpp\n@@ -478,8 +478,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n                         << formatReadableSizeWithBinarySuffix(elem.read_bytes / elapsed_seconds) << \"/sec.\");\n                 }\n \n-                elem.thread_numbers = std::move(info.thread_numbers);\n-                elem.os_thread_ids = std::move(info.os_thread_ids);\n+                elem.thread_ids = std::move(info.thread_ids);\n                 elem.profile_counters = std::move(info.profile_counters);\n \n                 if (log_queries)\n@@ -517,8 +516,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n \n                     elem.memory_usage = info.peak_memory_usage > 0 ? info.peak_memory_usage : 0;\n \n-                    elem.thread_numbers = std::move(info.thread_numbers);\n-                    elem.os_thread_ids = std::move(info.os_thread_ids);\n+                    elem.thread_ids = std::move(info.thread_ids);\n                     elem.profile_counters = std::move(info.profile_counters);\n                 }\n \ndiff --git a/dbms/src/Storages/MergeTree/MergeList.cpp b/dbms/src/Storages/MergeTree/MergeList.cpp\nindex 77e6ea32da28..5db4377c2ab6 100644\n--- a/dbms/src/Storages/MergeTree/MergeList.cpp\n+++ b/dbms/src/Storages/MergeTree/MergeList.cpp\n@@ -1,7 +1,7 @@\n #include <Storages/MergeTree/MergeList.h>\n #include <Storages/MergeTree/MergeTreeDataMergerMutator.h>\n #include <Common/CurrentMetrics.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n #include <Common/CurrentThread.h>\n \n \n@@ -20,7 +20,7 @@ MergeListElement::MergeListElement(const std::string & database_, const std::str\n     , result_part_path{future_part.path}\n     , result_data_version{future_part.part_info.getDataVersion()}\n     , num_parts{future_part.parts.size()}\n-    , thread_number{getThreadNumber()}\n+    , thread_id{getThreadId()}\n {\n     for (const auto & source_part : future_part.parts)\n     {\n@@ -71,7 +71,7 @@ MergeInfo MergeListElement::getInfo() const\n     res.rows_written = rows_written.load(std::memory_order_relaxed);\n     res.columns_written = columns_written.load(std::memory_order_relaxed);\n     res.memory_usage = memory_tracker.get();\n-    res.thread_number = thread_number;\n+    res.thread_id = thread_id;\n \n     for (const auto & source_part_name : source_part_names)\n         res.source_part_names.emplace_back(source_part_name);\ndiff --git a/dbms/src/Storages/MergeTree/MergeList.h b/dbms/src/Storages/MergeTree/MergeList.h\nindex 98c627db24c1..107b03a018a3 100644\n--- a/dbms/src/Storages/MergeTree/MergeList.h\n+++ b/dbms/src/Storages/MergeTree/MergeList.h\n@@ -45,7 +45,7 @@ struct MergeInfo\n     UInt64 rows_written;\n     UInt64 columns_written;\n     UInt64 memory_usage;\n-    UInt64 thread_number;\n+    UInt64 thread_id;\n };\n \n struct FutureMergedMutatedPart;\n@@ -87,8 +87,7 @@ struct MergeListElement : boost::noncopyable\n     MemoryTracker * background_thread_memory_tracker;\n     MemoryTracker * background_thread_memory_tracker_prev_parent = nullptr;\n \n-    /// Poco thread number used in logs\n-    UInt32 thread_number;\n+    UInt64 thread_id;\n \n \n     MergeListElement(const std::string & database, const std::string & table, const FutureMergedMutatedPart & future_part);\ndiff --git a/dbms/src/Storages/StorageBuffer.cpp b/dbms/src/Storages/StorageBuffer.cpp\nindex abf1d504e9e3..2f1b633413d0 100644\n--- a/dbms/src/Storages/StorageBuffer.cpp\n+++ b/dbms/src/Storages/StorageBuffer.cpp\n@@ -23,7 +23,7 @@\n #include <Common/typeid_cast.h>\n #include <Common/ProfileEvents.h>\n #include <common/logger_useful.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n #include <ext/range.h>\n #include <DataStreams/FilterBlockInputStream.h>\n #include <DataStreams/ExpressionBlockInputStream.h>\n@@ -387,7 +387,7 @@ class BufferBlockOutputStream : public IBlockOutputStream\n         }\n \n         /// We distribute the load on the shards by the stream number.\n-        const auto start_shard_num = getThreadNumber() % storage.num_shards;\n+        const auto start_shard_num = getThreadId() % storage.num_shards;\n \n         /// We loop through the buffers, trying to lock mutex. No more than one lap.\n         auto shard_num = start_shard_num;\ndiff --git a/dbms/src/Storages/System/StorageSystemMerges.cpp b/dbms/src/Storages/System/StorageSystemMerges.cpp\nindex 745c4b212bf5..7e71d90120a5 100644\n--- a/dbms/src/Storages/System/StorageSystemMerges.cpp\n+++ b/dbms/src/Storages/System/StorageSystemMerges.cpp\n@@ -29,7 +29,7 @@ NamesAndTypesList StorageSystemMerges::getNamesAndTypes()\n         {\"rows_written\", std::make_shared<DataTypeUInt64>()},\n         {\"columns_written\", std::make_shared<DataTypeUInt64>()},\n         {\"memory_usage\", std::make_shared<DataTypeUInt64>()},\n-        {\"thread_number\", std::make_shared<DataTypeUInt64>()},\n+        {\"thread_id\", std::make_shared<DataTypeUInt64>()},\n     };\n }\n \n@@ -64,7 +64,7 @@ void StorageSystemMerges::fillData(MutableColumns & res_columns, const Context &\n         res_columns[i++]->insert(merge.rows_written);\n         res_columns[i++]->insert(merge.columns_written);\n         res_columns[i++]->insert(merge.memory_usage);\n-        res_columns[i++]->insert(merge.thread_number);\n+        res_columns[i++]->insert(merge.thread_id);\n     }\n }\n \ndiff --git a/dbms/src/Storages/System/StorageSystemProcesses.cpp b/dbms/src/Storages/System/StorageSystemProcesses.cpp\nindex 56905b293496..c65a6b78e413 100644\n--- a/dbms/src/Storages/System/StorageSystemProcesses.cpp\n+++ b/dbms/src/Storages/System/StorageSystemProcesses.cpp\n@@ -57,8 +57,7 @@ NamesAndTypesList StorageSystemProcesses::getNamesAndTypes()\n         {\"peak_memory_usage\", std::make_shared<DataTypeInt64>()},\n         {\"query\", std::make_shared<DataTypeString>()},\n \n-        {\"thread_numbers\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt32>())},\n-        {\"os_thread_ids\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt32>())},\n+        {\"thread_ids\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},\n         {\"ProfileEvents.Names\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n         {\"ProfileEvents.Values\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},\n         {\"Settings.Names\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n@@ -115,17 +114,9 @@ void StorageSystemProcesses::fillData(MutableColumns & res_columns, const Contex\n \n         {\n             Array threads_array;\n-            threads_array.reserve(process.thread_numbers.size());\n-            for (const UInt32 thread_number : process.thread_numbers)\n-                threads_array.emplace_back(thread_number);\n-            res_columns[i++]->insert(threads_array);\n-        }\n-\n-        {\n-            Array threads_array;\n-            threads_array.reserve(process.os_thread_ids.size());\n-            for (const UInt32 thread_number : process.os_thread_ids)\n-                threads_array.emplace_back(thread_number);\n+            threads_array.reserve(process.thread_ids.size());\n+            for (const UInt64 thread_id : process.thread_ids)\n+                threads_array.emplace_back(thread_id);\n             res_columns[i++]->insert(threads_array);\n         }\n \ndiff --git a/dbms/src/Storages/System/StorageSystemStackTrace.cpp b/dbms/src/Storages/System/StorageSystemStackTrace.cpp\nindex 20767464038a..1c996fcf17b6 100644\n--- a/dbms/src/Storages/System/StorageSystemStackTrace.cpp\n+++ b/dbms/src/Storages/System/StorageSystemStackTrace.cpp\n@@ -14,7 +14,7 @@\n #include <DataTypes/DataTypeArray.h>\n #include <IO/ReadHelpers.h>\n #include <Common/PipeFDs.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n \n \n namespace DB\n@@ -37,7 +37,6 @@ namespace\n \n     int sequence_num = 0;    /// For messages sent via pipe.\n \n-    UInt32 thread_number{0};\n     std::optional<StackTrace> stack_trace;\n \n     static constexpr size_t max_query_id_size = 128;\n@@ -60,7 +59,6 @@ namespace\n         /// All these methods are signal-safe.\n         const ucontext_t signal_context = *reinterpret_cast<ucontext_t *>(context);\n         stack_trace.emplace(signal_context);\n-        thread_number = getThreadNumber();\n \n         StringRef query_id = CurrentThread::getQueryId();\n         query_id_size = std::min(query_id.size, max_query_id_size);\n@@ -148,7 +146,7 @@ NamesAndTypesList StorageSystemStackTrace::getNamesAndTypes()\n {\n     return\n     {\n-        { \"thread_number\", std::make_shared<DataTypeUInt32>() },\n+        { \"thread_id\", std::make_shared<DataTypeUInt64>() },\n         { \"query_id\", std::make_shared<DataTypeString>() },\n         { \"trace\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()) }\n     };\n@@ -197,7 +195,7 @@ void StorageSystemStackTrace::fillData(MutableColumns & res_columns, const Conte\n             for (size_t i = stack_trace_offset; i < stack_trace_size; ++i)\n                 arr.emplace_back(reinterpret_cast<intptr_t>(stack_trace->getFrames()[i]));\n \n-            res_columns[0]->insert(thread_number);\n+            res_columns[0]->insert(tid);\n             res_columns[1]->insertData(query_id_data, query_id_size);\n             res_columns[2]->insert(arr);\n         }\n@@ -205,7 +203,7 @@ void StorageSystemStackTrace::fillData(MutableColumns & res_columns, const Conte\n         {\n             /// Cannot obtain a stack trace. But create a record in result nevertheless.\n \n-            res_columns[0]->insert(tid);    /// TODO Replace all thread numbers to OS thread numbers.\n+            res_columns[0]->insert(tid);\n             res_columns[1]->insertDefault();\n             res_columns[2]->insertDefault();\n         }\ndiff --git a/docs/en/operations/system_tables.md b/docs/en/operations/system_tables.md\nindex 802d42e82940..1ed861ed41fc 100644\n--- a/docs/en/operations/system_tables.md\n+++ b/docs/en/operations/system_tables.md\n@@ -405,8 +405,7 @@ Columns:\n - `event_time` (`DateTime`) - Time of the entry.\n - `microseconds` (`UInt32`) - Microseconds of the entry.\n - `thread_name` (String) \u2014 Name of the thread from which the logging was done.\n-- `thread_number` (UInt32) \u2014 Internal thread ID.\n-- `os_thread_id` (Int32) \u2014 OS thread ID.\n+- `thread_id` (UInt64) \u2014 OS thread ID.\n - `level` (`Enum8`) - Entry level.\n     - `'Fatal' = 1`\n     - `'Critical' = 2`\n@@ -533,8 +532,7 @@ Columns:\n - `thread_name` (String) \u2014 Name of the thread.\n - `thread_number` (UInt32) \u2014 Internal thread ID.\n - `os_thread_id` (Int32) \u2014 OS thread ID.\n-- `master_thread_number` (UInt32) \u2014 Internal ID of initial thread.\n-- `master_os_thread_id` (Int32) \u2014 OS initial ID of initial thread.\n+- `master_thread_id` (UInt64) \u2014 OS initial ID of initial thread.\n - `query` (String) \u2014 Query string.\n - `is_initial_query` (UInt8) \u2014 Query type. Possible values:\n     - 1 \u2014 Query was initiated by the client.\n@@ -775,15 +773,15 @@ WHERE changed\n \n ## system.table_engines\n \n-Contains description of table engines supported by server and their feature support information. \n+Contains description of table engines supported by server and their feature support information.\n \n This table contains the following columns (the column type is shown in brackets):\n \n - `name` (String) \u2014 The name of table engine.\n - `supports_settings` (UInt8) \u2014 Flag that indicates if table engine supports `SETTINGS` clause.\n-- `supports_skipping_indices` (UInt8) \u2014 Flag that indicates if table engine supports [skipping indices](table_engines/mergetree/#table_engine-mergetree-data_skipping-indexes). \n+- `supports_skipping_indices` (UInt8) \u2014 Flag that indicates if table engine supports [skipping indices](table_engines/mergetree/#table_engine-mergetree-data_skipping-indexes).\n - `supports_ttl` (UInt8) \u2014 Flag that indicates if table engine supports [TTL](table_engines/mergetree/#table_engine-mergetree-ttl).\n-- `supports_sort_order` (UInt8) \u2014 Flag that indicates if table engine supports clauses `PARTITION_BY`, `PRIMARY_KEY`, `ORDER_BY` and `SAMPLE_BY`.  \n+- `supports_sort_order` (UInt8) \u2014 Flag that indicates if table engine supports clauses `PARTITION_BY`, `PRIMARY_KEY`, `ORDER_BY` and `SAMPLE_BY`.\n - `supports_replication` (UInt8) \u2014 Flag that indicates if table engine supports [data replication](table_engines/replication/).\n - `supports_duduplication` (UInt8) \u2014 Flag that indicates if table engine supports data deduplication.\n \n@@ -807,7 +805,7 @@ WHERE name in ('Kafka', 'MergeTree', 'ReplicatedCollapsingMergeTree')\n \n - MergeTree family [query clauses](table_engines/mergetree.md#mergetree-query-clauses)\n - Kafka [settings](table_engines/kafka.md#table_engine-kafka-creating-a-table)\n-- Join [settings](table_engines/join.md#join-limitations-and-settings) \n+- Join [settings](table_engines/join.md#join-limitations-and-settings)\n \n \n ## system.tables\n@@ -934,7 +932,7 @@ If there were problems with mutating some parts, the following columns contain a\n \n ## system.disks {#system_tables-disks}\n \n-Contains information about disks defined in the [server configuration](table_engines/mergetree.md#table_engine-mergetree-multiple-volumes_configure). \n+Contains information about disks defined in the [server configuration](table_engines/mergetree.md#table_engine-mergetree-multiple-volumes_configure).\n \n Columns:\n \ndiff --git a/docs/ru/operations/system_tables.md b/docs/ru/operations/system_tables.md\nindex a36a23f936da..8281e54a93d5 100644\n--- a/docs/ru/operations/system_tables.md\n+++ b/docs/ru/operations/system_tables.md\n@@ -495,10 +495,8 @@ ClickHouse \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\n - `memory_usage` (Int64) \u2014 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0438 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0451\u043d\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430.\n - `peak_memory_usage` (Int64) \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0438 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0451\u043d\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430.\n - `thread_name` (String) \u2014 \u0418\u043c\u044f \u043f\u043e\u0442\u043e\u043a\u0430.\n-- `thread_number` (UInt32) \u2014 \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 ID \u043f\u043e\u0442\u043e\u043a\u0430.\n-- `os_thread_id` (Int32) \u2014 tid (ID \u043f\u043e\u0442\u043e\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b).\n-- `master_thread_number` (UInt32) \u2014 \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 ID \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430.\n-- `master_os_thread_id` (Int32) \u2014 tid (ID \u043f\u043e\u0442\u043e\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b) \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430.\n+- `thread_id` (UInt64) \u2014 tid (ID \u043f\u043e\u0442\u043e\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b).\n+- `master_thread_id` (UInt64) \u2014 tid (ID \u043f\u043e\u0442\u043e\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b) \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430.\n - `query` (String) \u2014 \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n - `is_initial_query` (UInt8) \u2014 \u0432\u0438\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\n     - 1 \u2014 \u0437\u0430\u043f\u0440\u043e\u0441 \u0431\u044b\u043b \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c.\n@@ -697,15 +695,15 @@ WHERE changed\n \n ## system.table_engines\n \n-\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u0440\u043e \u0434\u0432\u0438\u0436\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431 \u0438\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445. \n+\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u0440\u043e \u0434\u0432\u0438\u0436\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431 \u0438\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445.\n \n \u042d\u0442\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b (\u0442\u0438\u043f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043d \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445):\n \n - `name` (String) \u2014 \u0438\u043c\u044f \u0434\u0432\u0438\u0436\u043a\u0430.\n - `supports_settings` (UInt8) \u2014 \u0444\u043b\u0430\u0433, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0441\u0435\u043a\u0446\u0438\u0438 `SETTINGS`.\n-- `supports_skipping_indices` (UInt8) \u2014 \u0444\u043b\u0430\u0433, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 [\u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445](table_engines/mergetree/#table_engine-mergetree-data_skipping-indexes). \n+- `supports_skipping_indices` (UInt8) \u2014 \u0444\u043b\u0430\u0433, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 [\u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445](table_engines/mergetree/#table_engine-mergetree-data_skipping-indexes).\n - `supports_ttl` (UInt8) \u2014 \u0444\u043b\u0430\u0433, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 [TTL](table_engines/mergetree/#table_engine-mergetree-ttl).\n-- `supports_sort_order` (UInt8) \u2014 \u0444\u043b\u0430\u0433, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0441\u0435\u043a\u0446\u0438\u0439 `PARTITION_BY`, `PRIMARY_KEY`, `ORDER_BY` \u0438 `SAMPLE_BY`.  \n+- `supports_sort_order` (UInt8) \u2014 \u0444\u043b\u0430\u0433, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0441\u0435\u043a\u0446\u0438\u0439 `PARTITION_BY`, `PRIMARY_KEY`, `ORDER_BY` \u0438 `SAMPLE_BY`.\n - `supports_replication` (UInt8) \u2014 \u0444\u043b\u0430\u0433, \u043f\u043e\u043a\u0430\u0437\u0432\u044b\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 [\u0440\u0435\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438](table_engines/replication/).\n - `supports_duduplication` (UInt8) \u2014 \u0444\u043b\u0430\u0433, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432 \u0434\u0432\u0438\u0436\u043a\u0435 \u0434\u0435\u0434\u0443\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n \n@@ -727,7 +725,7 @@ WHERE name in ('Kafka', 'MergeTree', 'ReplicatedCollapsingMergeTree')\n \n **\u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0442\u0430\u043a\u0436\u0435**\n \n-- [\u0421\u0435\u043a\u0446\u0438\u0438 \u0434\u0432\u0438\u0436\u043a\u0430](table_engines/mergetree/#mergetree-query-clauses) \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 MergeTree \n+- [\u0421\u0435\u043a\u0446\u0438\u0438 \u0434\u0432\u0438\u0436\u043a\u0430](table_engines/mergetree/#mergetree-query-clauses) \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 MergeTree\n - [\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438](table_engines/kafka.md#table_engine-kafka-creating-a-table) Kafka\n - [\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438](table_engines/join/#join-limitations-and-settings) Join\n \n@@ -856,7 +854,7 @@ path:           /clickhouse/tables/01-08/visits/replicas\n \n ## system.disks {#system_tables-disks}\n \n-C\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u043a\u0430\u0445, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 [\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430](table_engines/mergetree.md#table_engine-mergetree-multiple-volumes_configure). \n+C\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u043a\u0430\u0445, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 [\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430](table_engines/mergetree.md#table_engine-mergetree-multiple-volumes_configure).\n \n \u0421\u0442\u043e\u043b\u0431\u0446\u044b:\n \ndiff --git a/libs/libcommon/CMakeLists.txt b/libs/libcommon/CMakeLists.txt\nindex 2506d5adf2f3..765ab99bfee0 100644\n--- a/libs/libcommon/CMakeLists.txt\n+++ b/libs/libcommon/CMakeLists.txt\n@@ -17,7 +17,7 @@ set (COMMON_SRCS\n     src/DateLUTImpl.cpp\n     src/demangle.cpp\n     src/getMemoryAmount.cpp\n-    src/getThreadNumber.cpp\n+    src/getThreadId.cpp\n     src/JSON.cpp\n     src/LineReader.cpp\n     src/mremap.cpp\n@@ -36,7 +36,7 @@ set (COMMON_SRCS\n     include/common/ErrorHandlers.h\n     include/common/find_symbols.h\n     include/common/getMemoryAmount.h\n-    include/common/getThreadNumber.h\n+    include/common/getThreadId.h\n     include/common/JSON.h\n     include/common/likely.h\n     include/common/LineReader.h\ndiff --git a/libs/libcommon/include/common/getThreadId.h b/libs/libcommon/include/common/getThreadId.h\nnew file mode 100644\nindex 000000000000..a1b5ff5f3e8d\n--- /dev/null\n+++ b/libs/libcommon/include/common/getThreadId.h\n@@ -0,0 +1,5 @@\n+#pragma once\n+#include <cstdint>\n+\n+/// Obtain thread id from OS. The value is cached in thread local variable.\n+uint64_t getThreadId();\ndiff --git a/libs/libcommon/include/common/getThreadNumber.h b/libs/libcommon/include/common/getThreadNumber.h\ndeleted file mode 100644\nindex a9305e13a212..000000000000\n--- a/libs/libcommon/include/common/getThreadNumber.h\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-#pragma once\n-\n-/** \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0442\u043e\u043a\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 1, \u0441\u0440\u0435\u0434\u0438 \u0442\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u044d\u0442\u043e\u0442 \u043d\u043e\u043c\u0435\u0440.\n-  * \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438.\n-  */\n-\n-unsigned getThreadNumber();\ndiff --git a/libs/libcommon/include/common/iostream_debug_helpers.h b/libs/libcommon/include/common/iostream_debug_helpers.h\nindex 72891ed03a53..51a4b969d8ac 100644\n--- a/libs/libcommon/include/common/iostream_debug_helpers.h\n+++ b/libs/libcommon/include/common/iostream_debug_helpers.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n #include \"demangle.h\"\n-#include \"getThreadNumber.h\"\n+#include \"getThreadId.h\"\n #include <type_traits>\n #include <tuple>\n #include <iomanip>\n@@ -141,7 +141,7 @@ Out & dump(Out & out, const char * name, T && x)\n #endif\n \n #define DUMPVAR(VAR) ::dump(std::cerr, #VAR, (VAR)); std::cerr << \"; \";\n-#define DUMPHEAD std::cerr << __FILE__ << ':' << __LINE__ << \" [ \" << getThreadNumber() << \" ] \";\n+#define DUMPHEAD std::cerr << __FILE__ << ':' << __LINE__ << \" [ \" << getThreadId() << \" ] \";\n #define DUMPTAIL std::cerr << '\\n';\n \n #define DUMP1(V1) do { DUMPHEAD DUMPVAR(V1) DUMPTAIL } while(0)\ndiff --git a/libs/libcommon/src/getThreadId.cpp b/libs/libcommon/src/getThreadId.cpp\nnew file mode 100644\nindex 000000000000..f35d85f23ed6\n--- /dev/null\n+++ b/libs/libcommon/src/getThreadId.cpp\n@@ -0,0 +1,26 @@\n+#include <common/getThreadId.h>\n+\n+#if OS_LINUX\n+    #include <unistd.h>\n+    #include <syscall.h>\n+#else\n+    #include <pthread.h>\n+    #include <stdexcept>\n+#endif\n+\n+\n+static thread_local uint64_t current_tid = 0;\n+uint64_t getThreadId()\n+{\n+    if (!current_tid)\n+    {\n+#if OS_LINUX\n+        current_tid = syscall(SYS_gettid); /// This call is always successful. - man gettid\n+#else\n+        if (0 != pthread_threadid_np(nullptr, &current_tid))\n+            throw std::logic_error(\"pthread_threadid_np returned error\");\n+#endif\n+    }\n+\n+    return current_tid;\n+}\ndiff --git a/libs/libcommon/src/getThreadNumber.cpp b/libs/libcommon/src/getThreadNumber.cpp\ndeleted file mode 100644\nindex 0c2d7d282833..000000000000\n--- a/libs/libcommon/src/getThreadNumber.cpp\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-#include <common/getThreadNumber.h>\n-#include <common/likely.h>\n-#include <atomic>\n-\n-static thread_local unsigned thread_number = 0;\n-static std::atomic_uint threads{0};\n-\n-unsigned getThreadNumber()\n-{\n-    if (unlikely(thread_number == 0))\n-        thread_number = ++threads;\n-\n-    return thread_number;\n-}\ndiff --git a/libs/libdaemon/include/daemon/BaseDaemon.h b/libs/libdaemon/include/daemon/BaseDaemon.h\nindex 56f7dc5f06b6..6a2764db8c10 100644\n--- a/libs/libdaemon/include/daemon/BaseDaemon.h\n+++ b/libs/libdaemon/include/daemon/BaseDaemon.h\n@@ -19,7 +19,7 @@\n #include <Poco/Version.h>\n #include <common/Types.h>\n #include <common/logger_useful.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n #include <daemon/GraphiteWriter.h>\n #include <Common/Config/ConfigProcessor.h>\n #include <loggers/Loggers.h>\ndiff --git a/libs/libdaemon/src/BaseDaemon.cpp b/libs/libdaemon/src/BaseDaemon.cpp\nindex 9d9ea6a0a158..9e6143807221 100644\n--- a/libs/libdaemon/src/BaseDaemon.cpp\n+++ b/libs/libdaemon/src/BaseDaemon.cpp\n@@ -37,7 +37,7 @@\n #include <common/logger_useful.h>\n #include <common/ErrorHandlers.h>\n #include <common/argsToConfig.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n #include <common/coverage.h>\n \n #include <IO/WriteBufferFromFile.h>\n@@ -123,7 +123,7 @@ static void signalHandler(int sig, siginfo_t * info, void * context)\n     DB::writePODBinary(*info, out);\n     DB::writePODBinary(signal_context, out);\n     DB::writePODBinary(stack_trace, out);\n-    DB::writeBinary(UInt32(getThreadNumber()), out);\n+    DB::writeBinary(UInt32(getThreadId()), out);\n     DB::writeStringBinary(query_id, out);\n \n     out.next();\n@@ -301,7 +301,7 @@ static void terminate_handler()\n     DB::WriteBufferFromFileDescriptor out(signal_pipe.fds_rw[1], buf_size, buf);\n \n     DB::writeBinary(static_cast<int>(SignalListener::StdTerminate), out);\n-    DB::writeBinary(UInt32(getThreadNumber()), out);\n+    DB::writeBinary(UInt32(getThreadId()), out);\n     DB::writeBinary(log_message, out);\n     out.next();\n \ndiff --git a/libs/libloggers/loggers/ExtendedLogChannel.cpp b/libs/libloggers/loggers/ExtendedLogChannel.cpp\nindex 8040a094a15c..421113b425f1 100644\n--- a/libs/libloggers/loggers/ExtendedLogChannel.cpp\n+++ b/libs/libloggers/loggers/ExtendedLogChannel.cpp\n@@ -3,7 +3,7 @@\n #include <sys/time.h>\n #include <Common/CurrentThread.h>\n #include <Common/Exception.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n \n \n namespace DB\n@@ -31,7 +31,7 @@ ExtendedLogMessage ExtendedLogMessage::getFrom(const Poco::Message & base)\n             msg_ext.query_id.assign(query_id_ref.data, query_id_ref.size);\n     }\n \n-    msg_ext.thread_number = getThreadNumber();\n+    msg_ext.thread_id = getThreadId();\n \n     return msg_ext;\n }\ndiff --git a/libs/libloggers/loggers/ExtendedLogChannel.h b/libs/libloggers/loggers/ExtendedLogChannel.h\nindex 5388c6aa4673..3e9b61e8ae4c 100644\n--- a/libs/libloggers/loggers/ExtendedLogChannel.h\n+++ b/libs/libloggers/loggers/ExtendedLogChannel.h\n@@ -24,7 +24,7 @@ class ExtendedLogMessage\n     uint32_t time_seconds = 0;\n     uint32_t time_microseconds = 0;\n \n-    uint32_t thread_number = 0;\n+    uint64_t thread_id = 0;\n     std::string query_id;\n };\n \ndiff --git a/libs/libloggers/loggers/OwnPatternFormatter.cpp b/libs/libloggers/loggers/OwnPatternFormatter.cpp\nindex cd0f372fbfa7..c049fa90485a 100644\n--- a/libs/libloggers/loggers/OwnPatternFormatter.cpp\n+++ b/libs/libloggers/loggers/OwnPatternFormatter.cpp\n@@ -7,7 +7,7 @@\n #include <Interpreters/InternalTextLogsQueue.h>\n #include <sys/time.h>\n #include <Common/CurrentThread.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n #include \"Loggers.h\"\n \n \n@@ -48,7 +48,7 @@ void OwnPatternFormatter::formatExtended(const DB::ExtendedLogMessage & msg_ext,\n     DB::writeChar('0' + ((msg_ext.time_microseconds / 1) % 10), wb);\n \n     writeCString(\" [ \", wb);\n-    DB::writeIntText(msg_ext.thread_number, wb);\n+    DB::writeIntText(msg_ext.thread_id, wb);\n     writeCString(\" ] \", wb);\n \n     /// We write query_id even in case when it is empty (no query context)\ndiff --git a/libs/libloggers/loggers/OwnSplitChannel.cpp b/libs/libloggers/loggers/OwnSplitChannel.cpp\nindex 3b9ded40dc30..3b809c022b56 100644\n--- a/libs/libloggers/loggers/OwnSplitChannel.cpp\n+++ b/libs/libloggers/loggers/OwnSplitChannel.cpp\n@@ -8,7 +8,7 @@\n #include <Poco/Message.h>\n #include <Common/CurrentThread.h>\n #include <Common/DNSResolver.h>\n-#include <common/getThreadNumber.h>\n+#include <common/getThreadId.h>\n #include <Common/SensitiveDataMasker.h>\n \n namespace DB\n@@ -61,7 +61,7 @@ void OwnSplitChannel::logSplit(const Poco::Message & msg)\n         columns[i++]->insert(msg_ext.time_microseconds);\n         columns[i++]->insert(DNSResolver::instance().getHostName());\n         columns[i++]->insert(msg_ext.query_id);\n-        columns[i++]->insert(msg_ext.thread_number);\n+        columns[i++]->insert(msg_ext.thread_id);\n         columns[i++]->insert(Int64(msg.getPriority()));\n         columns[i++]->insert(msg.getSource());\n         columns[i++]->insert(msg.getText());\n@@ -79,12 +79,7 @@ void OwnSplitChannel::logSplit(const Poco::Message & msg)\n         elem.microseconds = msg_ext.time_microseconds;\n \n         elem.thread_name = getThreadName();\n-        elem.thread_number = msg_ext.thread_number;\n-\n-        if (CurrentThread::isInitialized())\n-            elem.os_thread_id = CurrentThread::get().os_thread_id;\n-        else\n-            elem.os_thread_id = 0;\n+        elem.thread_id = msg_ext.thread_id;\n \n         elem.query_id = msg_ext.query_id;\n \n",
  "test_patch": "diff --git a/dbms/src/Interpreters/tests/internal_iotop.cpp b/dbms/src/Interpreters/tests/internal_iotop.cpp\nindex b3cc720bc8e2..487390c83217 100644\n--- a/dbms/src/Interpreters/tests/internal_iotop.cpp\n+++ b/dbms/src/Interpreters/tests/internal_iotop.cpp\n@@ -5,6 +5,7 @@\n #include <Common/TaskStatsInfoGetter.h>\n #include <Poco/File.h>\n #include <Common/Stopwatch.h>\n+#include <common/getThreadId.h>\n #include <IO/WriteBufferFromString.h>\n #include <linux/taskstats.h>\n #include <sys/time.h>\n@@ -47,7 +48,7 @@ using namespace DB;\n static void do_io(size_t id)\n {\n     ::taskstats stat;\n-    int tid = TaskStatsInfoGetter::getCurrentTID();\n+    int tid = getThreadId();\n     TaskStatsInfoGetter get_info;\n \n     get_info.getStat(stat, tid);\n@@ -103,7 +104,7 @@ static void test_perf()\n {\n \n     ::taskstats stat;\n-    int tid = TaskStatsInfoGetter::getCurrentTID();\n+    int tid = getThreadId();\n     TaskStatsInfoGetter get_info;\n \n     rusage rusage;\ndiff --git a/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh b/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh\nindex c8cd8606cc14..1225cd43c5ec 100755\n--- a/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh\n+++ b/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh\n@@ -45,7 +45,7 @@ SELECT\n     -- duration, threads_realtime, threads_time_user_system_io,\n     threads_realtime >= 0.99 * duration,\n     threads_realtime >= threads_time_user_system_io,\n-    any(length(thread_numbers)) >= 1\n+    any(length(thread_ids)) >= 1\n     FROM\n         (SELECT * FROM system.query_log PREWHERE query='$heavy_cpu_query' WHERE event_date >= today()-1 AND type=2 ORDER BY event_time DESC LIMIT 1)\n     ARRAY JOIN ProfileEvents.Names AS PN, ProfileEvents.Values AS PV\"\n@@ -57,24 +57,24 @@ $CLICKHOUSE_CLIENT $settings --max_threads=3 -q \"$heavy_cpu_query\"\n $CLICKHOUSE_CLIENT $settings -q \"SYSTEM FLUSH LOGS\"\n query_id=`$CLICKHOUSE_CLIENT $settings -q \"SELECT query_id FROM system.query_log WHERE event_date >= today()-1 AND type=2 AND query='$heavy_cpu_query' ORDER BY event_time DESC LIMIT 1\"`\n query_elapsed=`$CLICKHOUSE_CLIENT $settings -q \"SELECT query_duration_ms*1000 FROM system.query_log WHERE event_date >= today()-1 AND type=2 AND query_id='$query_id' ORDER BY event_time DESC LIMIT 1\"`\n-threads=`$CLICKHOUSE_CLIENT $settings -q \"SELECT length(thread_numbers) FROM system.query_log WHERE event_date >= today()-1 AND type=2 AND query_id='$query_id' ORDER BY event_time DESC LIMIT 1\"`\n+threads=`$CLICKHOUSE_CLIENT $settings -q \"SELECT length(thread_ids) FROM system.query_log WHERE event_date >= today()-1 AND type=2 AND query_id='$query_id' ORDER BY event_time DESC LIMIT 1\"`\n \n $CLICKHOUSE_CLIENT $settings -q \"\n SELECT\n     -- max(thread_realtime), $query_elapsed, max(thread_time_user_system_io),\n     0.9 * $query_elapsed <= max(thread_realtime) AND max(thread_realtime) <= 1.1 * $query_elapsed,\n     0.7 * $query_elapsed <= max(thread_time_user_system_io) AND max(thread_time_user_system_io) <= 1.3 * $query_elapsed,\n-    uniqExact(thread_number) = $threads\n+    uniqExact(thread_id) = $threads\n FROM\n (\n     SELECT\n-        thread_number,\n+        thread_id,\n         sumIf(PV, PN = 'RealTimeMicroseconds') AS thread_realtime,\n         sumIf(PV, PN IN ('UserTimeMicroseconds', 'SystemTimeMicroseconds', 'OSIOWaitMicroseconds', 'OSCPUWaitMicroseconds')) AS thread_time_user_system_io\n         FROM\n             (SELECT * FROM system.query_thread_log PREWHERE query_id='$query_id' WHERE event_date >= today()-1)\n         ARRAY JOIN ProfileEvents.Names AS PN, ProfileEvents.Values AS PV\n-        GROUP BY thread_number\n+        GROUP BY thread_id\n )\n \"\n \n",
  "problem_statement": "Use system thread id for logging.\nText logs and query_thread_log use the internal thread id, while sanitizer reports or segfaults report the system thread id. Finding out which ids correspond to which is currently impossible.\r\n\r\nAs a solution, we might just use system thread id for logging.\r\n\r\nFor the reference, see `ExtendedLogMessage::getFrom` and `getThreadNumber`.\n",
  "hints_text": "Approved.\r\n\r\nYou should replace thread_id with system thread id everywhere and get rid of the columns `os_thread_id` in system tables.\nHi! I want to work on this as my first issue.\r\nAm I correct that I should replace `thread_number` assignment logic with `os_thread_id` one (for example [here](https://github.com/ClickHouse/ClickHouse/blob/master/dbms/src/Common/ThreadStatus.cpp#L37))?\r\nFirstly I thought I can change `getThreadNumber`, but have found that `getThreadNumber` used not only in logging as it said in `getThreadNumber.h`, but also [here](https://github.com/ClickHouse/ClickHouse/blob/master/dbms/src/Storages/StorageBuffer.cpp#L346) and changing `getThreadNumber` could possibly break distribution.\n> Hi! I want to work on this as my first issue.\r\n\r\nThat's great!\r\n\r\n> Am I correct that I should replace thread_number assignment logic with os_thread_id one (for example here)?\r\n\r\nYes.\r\n\r\n> Firstly I thought I can change getThreadNumber, but have found that getThreadNumber used not only in logging as it said in getThreadNumber.h, but also here and changing getThreadNumber could possibly break distribution.\r\n\r\nThis is minor case. In worst case it will just make Buffer a little slower, but most likely the difference will be unnoticeable. You can replace it freely :)\nI'm not sure that I am doing everything well. As I found out - I can't change `getThreadNumber` to use `CurrentThread`. I can get rid of it in most places `getThreadNumber`, but I am not sure in changes like\r\n`DB::writeBinary(getThreadNumber(), out);` to `DB::writeBinary(CurrentThread::get().thread_number, out);` (at `faultSignalHandler` in `BaseDaemon.cpp`), as I am not sure that `current_thread` will be initialized here. Or I should use `TaskStatsInfoGetter::getCurrentTID()` here?\nLet's use `TaskStatsInfoGetter::getCurrentTID()`. To avoid the cost of system call, we can merge https://github.com/ClickHouse/ClickHouse/pull/8276\nAnd maybe better to move the code around: move it inside `getThreadNumber()` and use it in `TaskStatsInfoGetter`.\n@Vinatorul Hi! How is it going?\n@alexey-milovidov Hi! Everything seems fine, I'll try to build it today and if everything will be ok - open a PR. Full build takes about 7 hours on my pc now :(\nOk. BTW, you can send PR in advance and it will be built in our CI - we can fix all issues quickly.\n@Vinatorul Hi and happy new year! Hope you have success building the code?\n@Vinatorul Hi! How is it going?\r\nI will be happy to hear some news...\nDon't you mind if we steal this task?\n@Vinatorul is everything all right?",
  "created_at": "2020-02-02T03:02:55Z"
}