You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
'distributed_product_mode' not working correctly with new Analyzer
### Company or project name

_No response_

### Describe what's wrong

When running a query like 
`SELECT ...... 
FROM distributed_table 
           INNER JOIN non_distributed_table 
SETTINGS distributed_product_mode = 'global', enable_analyzer = 1`

it throws an error, saying `non_distributed_table` does not exist. My understanding was that distributed_product_mode='global' replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN.

But if I explicitly write GLOBAL INNER JOIN in the query - then it works. It also works if i disable the analyzer.

This issue is tested on versions 24.8.14.39 and 24.3.11.7.

At the moment my solution is just to disable the "new" analyzer. Any other ideas?

### Does it reproduce on the most recent release?

No

### How to reproduce

version: 24.8.14.39

### Expected behavior

_No response_

### Error message and/or stacktrace

_No response_

### Additional context

_No response_
prefer_global_in_and_join has different behaviour with experimental_analyzer with non-distributed tables.
cluster with 2 shards: `host1 | host2`

```sql
host1:
create table t1 (A Int64) Engine=MergeTree order by A as select * from values((1),(2),(3));

host2:

create table t1 (A Int64) Engine=MergeTree order by A;
create table t1_d as t1 Engine=Distributed('cluster', currentDatabase(), t1);
create table t2 (A Int64) Engine=MergeTree order by A  as select * from values((1),(2));

set prefer_global_in_and_join=1;

select * from t1_d where A in (select A from t2);
DB::Exception: Received from host1. DB::Exception: Unknown table expression identifier 'default.t2' 
in scope (SELECT __table1.A AS A FROM default.t2 AS __table1). (UNKNOWN_TABLE)


select * from t1_d where A global in (select A from t2);
┌─A─┐ ---- correct result with explicit global
│ 1 │ 
│ 2 │
└───┘


select * from t1_d where A in (select A from t2) settings allow_experimental_analyzer=0;
┌─A─┐  ---- correct result without experimental_analyzer
│ 1 │   
│ 2 │
└───┘
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
