{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63864,
  "instance_id": "ClickHouse__ClickHouse-63864",
  "issue_numbers": [
    "63471"
  ],
  "base_commit": "4ee342c9c3bf22952667a75d96b4586bc3603e01",
  "patch": "diff --git a/src/Planner/PlannerActionsVisitor.cpp b/src/Planner/PlannerActionsVisitor.cpp\nindex 2b369eaa5934..a88c74d460ba 100644\n--- a/src/Planner/PlannerActionsVisitor.cpp\n+++ b/src/Planner/PlannerActionsVisitor.cpp\n@@ -243,8 +243,34 @@ class ActionNodeNameHelper\n             }\n             case QueryTreeNodeType::LAMBDA:\n             {\n-                auto lambda_hash = node->getTreeHash();\n-                result = \"__lambda_\" + toString(lambda_hash);\n+                /// Initially, the action name was `\"__lambda_\" + toString(node->getTreeHash());`.\n+                /// This is not a good idea because:\n+                ///   * hash is different on initiator and shard if the default database is changed in cluster\n+                ///   * hash is reliable only within one node; any change will break queries in between versions\n+                ///\n+                /// Now, we calculate execution name as (names + types) for lambda arguments + action name (expression)\n+                /// and this should be more reliable (as long as we trust the calculation of action name for functions)\n+\n+                WriteBufferFromOwnString buffer;\n+\n+                const auto & lambda_node = node->as<LambdaNode &>();\n+                const auto & lambda_arguments_nodes = lambda_node.getArguments().getNodes();\n+\n+                size_t lambda_arguments_nodes_size = lambda_arguments_nodes.size();\n+                for (size_t i = 0; i < lambda_arguments_nodes_size; ++i)\n+                {\n+                    const auto & lambda_argument_node = lambda_arguments_nodes[i];\n+                    buffer << calculateActionNodeName(lambda_argument_node);\n+                    buffer << ' ';\n+                    buffer << lambda_argument_node->as<ColumnNode &>().getResultType()->getName();\n+\n+                    if (i + 1 != lambda_arguments_nodes_size)\n+                        buffer << \", \";\n+                }\n+\n+                buffer << \" -> \" << calculateActionNodeName(lambda_node.getExpression());\n+\n+                result = buffer.str();\n                 break;\n             }\n             default:\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01231_distributed_aggregation_memory_efficient_mix_levels.reference b/tests/queries/0_stateless/01231_distributed_aggregation_memory_efficient_mix_levels.reference\nindex ac13b3f193ec..1d1e81fa5e20 100644\n--- a/tests/queries/0_stateless/01231_distributed_aggregation_memory_efficient_mix_levels.reference\n+++ b/tests/queries/0_stateless/01231_distributed_aggregation_memory_efficient_mix_levels.reference\n@@ -8,3 +8,14 @@\n 7\t1\n 8\t1\n 9\t1\n+[0]\n+[0]\n+[1]\n+[2]\n+[3]\n+[4]\n+[5]\n+[6]\n+[7]\n+[8]\n+[9]\ndiff --git a/tests/queries/0_stateless/01231_distributed_aggregation_memory_efficient_mix_levels.sql b/tests/queries/0_stateless/01231_distributed_aggregation_memory_efficient_mix_levels.sql\nindex e70652877e0d..aef1d22372d3 100644\n--- a/tests/queries/0_stateless/01231_distributed_aggregation_memory_efficient_mix_levels.sql\n+++ b/tests/queries/0_stateless/01231_distributed_aggregation_memory_efficient_mix_levels.sql\n@@ -23,6 +23,8 @@ set max_bytes_before_external_group_by = 16;\n \n select x, count() from ma_dist group by x order by x;\n \n+select arrayFilter(y -> y = x, [x]) as f from ma_dist order by f;\n+\n drop table if exists shard_0.shard_01231_distributed_aggregation_memory_efficient;\n drop table if exists shard_1.shard_01231_distributed_aggregation_memory_efficient;\n \n",
  "problem_statement": "arrayFilter, arrayReduce, arrayExists no longer work with distributed tables if expression contains table column\nfunctions like arrayFilter, arrayReduce,arrayExists give error code 81, (database name empty) when their expression contain a table column, it only happens on distributed table and not on local tables, it used to work fine on older version of clickhouse  ~23.3.22\r\n\r\nfor example\r\n\r\n```\r\nselect \r\n    'current' AS period,\r\n    date(event_time) AS label\r\nFROM orders\r\nWHERE length(arrayFilter(x -> dateDiff('day', event_time, toDate(parseDateTime64BestEffortOrZero(JSONExtractString(x, 'event_time')))) >= 0 and dateDiff('day', event_time, toDate(parseDateTime64BestEffortOrZero(JSONExtractString(x, 'event_time')))) < 14, workflows)) > 0\r\nAND ((toDate(event_time, 'America/Los_Angeles') >= '2024-04-07') AND (toDate(event_time, 'America/Los_Angeles') <= '2024-05-07'))\r\nLIMIT 20\r\n```\r\n\r\nor just simply\r\n```\r\nselect arrayFilter(x -> toUnixTimestamp(parseDateTime64BestEffortOrZero(JSONExtractString(x,'event_time'))) > toUnixTimestamp(orders.event_time),workflows) from orders limit 10\r\n```\r\ngives error code 81 Database name is empty\r\n\r\n**Expected behavior**\r\nquery to run fine as it was working on 23.3.22\r\n\r\n**Actual behaviour**\r\ngives error\r\n`Code: 81. DB::Exception: Received from xx.xx.xx.xxx:9000. DB::Exception: Database name is empty. (UNKNOWN_DATABASE)`\r\n\r\n\r\nError message\r\n```\r\nReceived exception from server (version 24.3.3):\r\nCode: 81. DB::Exception: Received from xx.xx.xx.xxx:9000. DB::Exception: Database name is empty. (UNKNOWN_DATABASE)\r\n```\r\nit only happens on distributed tables, and when we remove any traces of event_time column from lambda expressions of arrayFilter, queryworks.\n",
  "hints_text": "It needs a reproducer.\r\n@neel-bp  Can you please share `<remote_servers>` (do you use default database or secret?), and share `show create table orders`.\nthis is the create table for both local and distributed tables\r\n```\r\nCREATE TABLE distributeddb.orders\r\n(\r\n    `id` String,\r\n    `domain_id` String,\r\n    `profile_id` String,\r\n    `session_id` String,\r\n    `db_insert_time` DateTime,\r\n    `event_time` DateTime,\r\n    `workflows` Array(String),\r\n    `multivariates` Array(String),\r\n    `promos` Array(String),\r\n    `segments` Array(String),\r\n    `elements` Array(String),\r\n    `page_id` String,\r\n    `current_url_id` String,\r\n    `referral_url_id` String,\r\n    `is_new_profile` Int32,\r\n    `channel` String,\r\n    `device` String,\r\n    `grand_total` Float32,\r\n    `sub_total` Float32,\r\n    `tax` Float32,\r\n    `discount` Float32,\r\n    `shipping` Float32,\r\n    `discount_codes` Array(String),\r\n    `product_recs` Array(String),\r\n    `item_quantity` Int32,\r\n    `cart_id` String,\r\n    `cart_sessions` Array(String),\r\n    `currency` String,\r\n    `customer_id` String,\r\n    `platform_type` String,\r\n    `original_referral_url_id` String,\r\n    `order_id` String,\r\n    `original_source` String,\r\n    `original_medium` String,\r\n    `original_channel` String,\r\n    `from_ingestion` Int32,\r\n    `enrolled_workflows` Array(String),\r\n    `utm_source` String,\r\n    `utm_medium` String,\r\n    `utm_channel` String,\r\n    `utm_campaign` String\r\n)\r\nENGINE = Distributed('{cluster}', '', 'orders', rand())\r\n```\r\nlocaltable\r\n```\r\nCREATE TABLE localdb.orders\r\n(\r\n    `id` String,\r\n    `domain_id` String,\r\n    `profile_id` String,\r\n    `session_id` String,\r\n    `db_insert_time` DateTime,\r\n    `event_time` DateTime,\r\n    `workflows` Array(String),\r\n    `multivariates` Array(String),\r\n    `promos` Array(String),\r\n    `segments` Array(String),\r\n    `elements` Array(String),\r\n    `page_id` String,\r\n    `current_url_id` String,\r\n    `referral_url_id` String,\r\n    `is_new_profile` Int32,\r\n    `channel` String,\r\n    `device` String,\r\n    `grand_total` Float32,\r\n    `sub_total` Float32,\r\n    `tax` Float32,\r\n    `discount` Float32,\r\n    `shipping` Float32,\r\n    `discount_codes` Array(String),\r\n    `product_recs` Array(String),\r\n    `item_quantity` Int32,\r\n    `cart_id` String,\r\n    `cart_sessions` Array(String),\r\n    `currency` String,\r\n    `customer_id` String,\r\n    `platform_type` String,\r\n    `original_referral_url_id` String,\r\n    `order_id` String,\r\n    `original_source` String,\r\n    `original_medium` String,\r\n    `original_channel` String,\r\n    `from_ingestion` Int32,\r\n    `enrolled_workflows` Array(String),\r\n    `utm_source` String,\r\n    `utm_medium` String,\r\n    `utm_channel` String,\r\n    `utm_campaign` String\r\n)\r\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{cluster}/{shard}/orders', '{replica}')\r\nPARTITION BY toYYYYMM(event_time)\r\nPRIMARY KEY event_time\r\nORDER BY event_time\r\nSETTINGS index_granularity = 8192\r\n```\r\nand i tried with just event_time, table.event_time and also db.table.event_time\r\nwe roll backed to 23.3.22 and everything is fine now,\r\n\n@neel-bp what about `<remote_servers>` (do you use default database or secret?) ?\r\n\r\n>we roll backed to 23.3.22 and everything is fine now,\r\n\r\nAnd you can disable `allow_experimental_analyzer` with 24.3\nno we are not using default database, we have a cluster of 5 shards with 2 replicas each,\r\nokay we will try with allow_experimental_analyzer disabled\n@neel-bp \r\n\r\n> no we are not using default database, we have a cluster of 5 shards with 2 replicas each, okay we will try with allow_experimental_analyzer disabled\r\n\r\n\r\n`CREATE TABLE distributeddb.orders` --<<- distributeddb!!!\r\n\r\n`CREATE TABLE localdb.orders` --<<- localdb!!!\r\n\r\n`ENGINE = Distributed('{cluster}', '', 'orders', rand())` --<- '' (empty DB).!!!\r\n\r\nI don't believe that it can work without `default_database`. You definitely have something unusual in `<remote_servers>`.\nthis is how our remoteserver looks like\r\n```\r\n<default_database>ourdb</default_database>\r\n   <remote_servers replace=\"1\">\r\n    <ourdb-cluster>\r\n            <shard>\r\n                        <weight>1</weight>\r\n                        <internal_replication>true</internal_replication>\r\n                        <replica>\r\n                           <default_database>ourdb_replica</default_database>\r\n                           <host>11.111.11.111</host>\r\n                           <port>9000</port>\r\n                           <user>default</user>\r\n                           <password>password</password>\r\n                        </replica>\r\n                        <replica>\r\n                           <default_database>ourdb_replica</default_database>\r\n                           <host>22.222.2.222</host>\r\n                           <port>9000</port>\r\n                           <user>default</user>\r\n                           <password>password</password>\r\n                        </replica>\r\n                    </shard>\r\n            </ourdb-cluster>\r\n   </remote_servers>\r\n\r\n```\r\nby default_database did you mean, <default_database> value? sorry yes we have that in our config.d/ourconfig.xml\n@neel-bp ` <default_database>ourdb_replica</default_database>` -- YES\r\n\r\nWhat is `ourdb_replica` ? How it's related to `localdb` or `distributeddb` ?\nourdb_replica == localdb,\r\ndistributeddb is a distributed table over localdb,\nyes, it's allow_experimental_analyzer.\r\nrepro\r\n\r\n```xml\r\ncat /etc/clickhouse-server/config.d/cl.xml\r\n<?xml version=\"1.0\" ?>\r\n<clickhouse>\r\n    <remote_servers>\r\n        <test>\r\n            <shard>\r\n                <replica>\r\n                    <host>127.0.0.1</host>\r\n\t\t    <port>9000</port>\r\n\t            <default_database>default</default_database>\r\n                </replica>\r\n            </shard>\r\n       </test>\r\n   </remote_servers>\r\n</clickhouse>\r\n```\r\n\r\n```sql\r\ncreate table orders (a Int64) Engine = Memory as select 1;\r\ncreate table orders_d (a Int64) Engine = Distributed(test, '', 'orders');\r\n\r\n select arrayFilter(x -> x = a, [a]) from orders_d settings allow_experimental_analyzer=0;\r\n   \u250c\u2500arrayFilter(lambda(tuple(x), equals(x, a)), array(a))\u2500\u2510\r\n1. \u2502 [1]                                                   \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nselect arrayFilter(x -> x = a, [a]) from orders_d settings allow_experimental_analyzer=1;\r\n\r\nReceived exception from server (version 24.3.3):\r\nCode: 81. DB::Exception: Received from localhost:9000. DB::Exception: Database name is empty. (UNKNOWN_DATABASE)\r\n```",
  "created_at": "2024-05-15T16:23:57Z"
}