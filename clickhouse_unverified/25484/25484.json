{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25484,
  "instance_id": "ClickHouse__ClickHouse-25484",
  "issue_numbers": [
    "19589"
  ],
  "base_commit": "8ba6a5393f664bfe83bdd441d0b700a903346fcf",
  "patch": "diff --git a/src/Columns/FilterDescription.cpp b/src/Columns/FilterDescription.cpp\nindex d216094eaabf..c9968d841c2d 100644\n--- a/src/Columns/FilterDescription.cpp\n+++ b/src/Columns/FilterDescription.cpp\n@@ -87,18 +87,4 @@ FilterDescription::FilterDescription(const IColumn & column_)\n         ErrorCodes::ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER);\n }\n \n-\n-void checkColumnCanBeUsedAsFilter(const ColumnWithTypeAndName & column_elem)\n-{\n-    ConstantFilterDescription const_filter;\n-    if (column_elem.column)\n-        const_filter = ConstantFilterDescription(*column_elem.column);\n-\n-    if (!const_filter.always_false && !const_filter.always_true)\n-    {\n-        auto column = column_elem.column ? column_elem.column : column_elem.type->createColumn();\n-        FilterDescription filter(*column);\n-    }\n-}\n-\n }\ndiff --git a/src/Columns/FilterDescription.h b/src/Columns/FilterDescription.h\nindex 89474ea523ca..05812fea2839 100644\n--- a/src/Columns/FilterDescription.h\n+++ b/src/Columns/FilterDescription.h\n@@ -32,7 +32,4 @@ struct FilterDescription\n \n struct ColumnWithTypeAndName;\n \n-/// Will throw an exception if column_elem is cannot be used as a filter column.\n-void checkColumnCanBeUsedAsFilter(const ColumnWithTypeAndName & column_elem);\n-\n }\ndiff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex fe52b30da7b6..fd3d4fc87815 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -953,10 +953,8 @@ ActionsDAGPtr SelectQueryExpressionAnalyzer::appendPrewhere(\n     ExpressionActionsChain & chain, bool only_types, const Names & additional_required_columns)\n {\n     const auto * select_query = getSelectQuery();\n-    ActionsDAGPtr prewhere_actions;\n-\n     if (!select_query->prewhere())\n-        return prewhere_actions;\n+        return nullptr;\n \n     Names first_action_names;\n     if (!chain.steps.empty())\n@@ -973,6 +971,7 @@ ActionsDAGPtr SelectQueryExpressionAnalyzer::appendPrewhere(\n         throw Exception(\"Invalid type for filter in PREWHERE: \" + filter_type->getName(),\n                         ErrorCodes::ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER);\n \n+    ActionsDAGPtr prewhere_actions;\n     {\n         /// Remove unused source_columns from prewhere actions.\n         auto tmp_actions_dag = std::make_shared<ActionsDAG>(sourceColumns());\n@@ -1038,18 +1037,6 @@ ActionsDAGPtr SelectQueryExpressionAnalyzer::appendPrewhere(\n     return prewhere_actions;\n }\n \n-void SelectQueryExpressionAnalyzer::appendPreliminaryFilter(ExpressionActionsChain & chain, ActionsDAGPtr actions_dag, String column_name)\n-{\n-    ExpressionActionsChain::Step & step = chain.lastStep(sourceColumns());\n-\n-    // FIXME: assert(filter_info);\n-    auto * expression_step = typeid_cast<ExpressionActionsChain::ExpressionActionsStep *>(&step);\n-    expression_step->actions_dag = std::move(actions_dag);\n-    step.addRequiredOutput(column_name);\n-\n-    chain.addStep();\n-}\n-\n bool SelectQueryExpressionAnalyzer::appendWhere(ExpressionActionsChain & chain, bool only_types)\n {\n     const auto * select_query = getSelectQuery();\ndiff --git a/src/Interpreters/ExpressionAnalyzer.h b/src/Interpreters/ExpressionAnalyzer.h\nindex 70ff5643b7ce..2427f65c694b 100644\n--- a/src/Interpreters/ExpressionAnalyzer.h\n+++ b/src/Interpreters/ExpressionAnalyzer.h\n@@ -357,8 +357,6 @@ class SelectQueryExpressionAnalyzer : public ExpressionAnalyzer\n     ArrayJoinActionPtr appendArrayJoin(ExpressionActionsChain & chain, ActionsDAGPtr & before_array_join, bool only_types);\n     bool appendJoinLeftKeys(ExpressionActionsChain & chain, bool only_types);\n     JoinPtr appendJoin(ExpressionActionsChain & chain);\n-    /// Add preliminary rows filtration. Actions are created in other expression analyzer to prevent any possible alias injection.\n-    void appendPreliminaryFilter(ExpressionActionsChain & chain, ActionsDAGPtr actions_dag, String column_name);\n     /// remove_filter is set in ExpressionActionsChain::finalize();\n     /// Columns in `additional_required_columns` will not be removed (they can be used for e.g. sampling or FINAL modifier).\n     ActionsDAGPtr appendPrewhere(ExpressionActionsChain & chain, bool only_types, const Names & additional_required_columns);\ndiff --git a/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp b/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp\nindex d9cb949042c5..5f0a0f298af5 100644\n--- a/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp\n+++ b/src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp\n@@ -17,6 +17,7 @@ namespace DB\n \n namespace ErrorCodes\n {\n+    extern const int ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER;\n     extern const int LOGICAL_ERROR;\n }\n \n@@ -430,8 +431,14 @@ void MergeTreeBaseSelectProcessor::executePrewhereActions(Block & block, const P\n             block.erase(prewhere_info->prewhere_column_name);\n         else\n         {\n-            auto & ctn = block.getByName(prewhere_info->prewhere_column_name);\n-            ctn.column = ctn.type->createColumnConst(block.rows(), 1u)->convertToFullColumnIfConst();\n+            WhichDataType which(removeNullable(recursiveRemoveLowCardinality(prewhere_column.type)));\n+            if (which.isInt() || which.isUInt())\n+                prewhere_column.column = prewhere_column.type->createColumnConst(block.rows(), 1u)->convertToFullColumnIfConst();\n+            else if (which.isFloat())\n+                prewhere_column.column = prewhere_column.type->createColumnConst(block.rows(), 1.0f)->convertToFullColumnIfConst();\n+            else\n+                throw Exception(\"Illegal type \" + prewhere_column.type->getName() + \" of column for filter.\",\n+                                ErrorCodes::ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER);\n         }\n     }\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01917_prewhere_column_type.reference b/tests/queries/0_stateless/01917_prewhere_column_type.reference\nnew file mode 100644\nindex 000000000000..58c9bdf9d017\n--- /dev/null\n+++ b/tests/queries/0_stateless/01917_prewhere_column_type.reference\n@@ -0,0 +1,1 @@\n+111\ndiff --git a/tests/queries/0_stateless/01917_prewhere_column_type.sql b/tests/queries/0_stateless/01917_prewhere_column_type.sql\nnew file mode 100644\nindex 000000000000..5147e6093a95\n--- /dev/null\n+++ b/tests/queries/0_stateless/01917_prewhere_column_type.sql\n@@ -0,0 +1,16 @@\n+DROP TABLE IF EXISTS t1;\n+\n+CREATE TABLE t1 ( s String, f Float32, e UInt16 ) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = '100G';\n+\n+INSERT INTO t1 VALUES ('111', 1, 1);\n+\n+SELECT s FROM t1 WHERE f AND (e = 1); -- { serverError 59 }\n+SELECT s FROM t1 PREWHERE f; -- { serverError 59 }\n+SELECT s FROM t1 PREWHERE f WHERE (e = 1); -- { serverError 59 }\n+SELECT s FROM t1 PREWHERE f WHERE f AND (e = 1); -- { serverError 59 }\n+\n+SELECT s FROM t1 WHERE e AND (e = 1);\n+SELECT s FROM t1 PREWHERE e; -- { serverError 59 }\n+SELECT s FROM t1 PREWHERE e WHERE (e = 1); -- { serverError 59 }\n+SELECT s FROM t1 PREWHERE e WHERE f AND (e = 1); -- { serverError 59 }\n+\n",
  "problem_statement": "GLOBAL SEMI LEFT JOIN: bad Field get in PREWHERE\n**Describe the bug**\r\nhttps://clickhouse-test-reports.s3.yandex.net/19387/fb268ec339aeb2cbab0df5137ead3efb8374cc32/fuzzer_debug/server.log\r\n\r\n**How to reproduce**\r\n```\r\nSELECT avg(diff) FROM (SELECT * FROM (SELECT learnerHash, passed - eventTime AS diff FROM statements GLOBAL SEMI LEFT JOIN (SELECT learnerHash, argMax(eventTime, resultScoreRaw) AS passed FROM (SELECT learnerHash, eventTime, resultScoreRaw FROM statements WHERE (courseId = 1) AND (onCourse = 1048575) AND (verb = 'http://adlnet.gov/expapi/verbs/passed') AND (objectId = 'https://crmm.ru/xapi/courses/spp/1/1/0-1') ORDER BY eventTime ASC) GROUP BY learnerHash) USING (learnerHash) WHERE resultScoreRaw AND (courseId = 1) AND (onCourse = 0) AND (verb = 'http://adlnet.gov/expapi/verbs/interacted') AND (eventTime <= passed) AND (diff > 0) ORDER BY eventTime DESC LIMIT 0 BY learnerHash) ORDER BY diff DESC LIMIT 7, 126)\r\n```\r\n\r\nLooks like query is based on `00586_removing_unused_columns_from_subquery.sql`.\r\n\r\nMergeTreeBaseSelectProcessor.cpp:331\r\n\r\n```\r\n            auto & ctn = block.getByName(prewhere_info->prewhere_column_name);\r\n            ctn.column = ctn.type->createColumnConst(block.rows(), 1u)->convertToFullColumnIfConst();\r\n```\r\n\r\nLooks like `prewhere_column_name` has type Float64.\n",
  "hints_text": "",
  "created_at": "2021-06-18T14:31:45Z"
}