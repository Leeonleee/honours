diff --git a/src/Databases/DatabaseOnDisk.cpp b/src/Databases/DatabaseOnDisk.cpp
index 0a16b6eacff9..2ad7af9c7037 100644
--- a/src/Databases/DatabaseOnDisk.cpp
+++ b/src/Databases/DatabaseOnDisk.cpp
@@ -389,6 +389,9 @@ void DatabaseOnDisk::iterateMetadataFiles(const Context & context, const Iterati
         }
     };
 
+    /// Metadata files to load: name and flag for .tmp_drop files
+    std::set<std::pair<String, bool>> metadata_files;
+
     Poco::DirectoryIterator dir_end;
     for (Poco::DirectoryIterator dir_it(getMetadataPath()); dir_it != dir_end; ++dir_it)
     {
@@ -404,7 +407,7 @@ void DatabaseOnDisk::iterateMetadataFiles(const Context & context, const Iterati
         if (endsWith(dir_it.name(), tmp_drop_ext))
         {
             /// There are files that we tried to delete previously
-            process_tmp_drop_metadata_file(dir_it.name());
+            metadata_files.emplace(dir_it.name(), false);
         }
         else if (endsWith(dir_it.name(), ".sql.tmp"))
         {
@@ -415,12 +418,26 @@ void DatabaseOnDisk::iterateMetadataFiles(const Context & context, const Iterati
         else if (endsWith(dir_it.name(), ".sql"))
         {
             /// The required files have names like `table_name.sql`
-            process_metadata_file(dir_it.name());
+            metadata_files.emplace(dir_it.name(), true);
         }
         else
             throw Exception("Incorrect file extension: " + dir_it.name() + " in metadata directory " + getMetadataPath(),
                 ErrorCodes::INCORRECT_FILE_NAME);
     }
+
+    /// Read and parse metadata in parallel
+    ThreadPool pool(SettingMaxThreads().getAutoValue());
+    for (const auto & file : metadata_files)
+    {
+        pool.scheduleOrThrowOnError([&]()
+        {
+            if (file.second)
+                process_metadata_file(file.first);
+            else
+                process_tmp_drop_metadata_file(file.first);
+        });
+    }
+    pool.wait();
 }
 
 ASTPtr DatabaseOnDisk::parseQueryFromMetadata(Poco::Logger * loger, const Context & context, const String & metadata_file_path, bool throw_on_error /*= true*/, bool remove_empty /*= false*/)
diff --git a/src/Databases/DatabaseOrdinary.cpp b/src/Databases/DatabaseOrdinary.cpp
index eec58ed9b334..277588b59f02 100644
--- a/src/Databases/DatabaseOrdinary.cpp
+++ b/src/Databases/DatabaseOrdinary.cpp
@@ -121,11 +121,12 @@ void DatabaseOrdinary::loadStoredObjects(
       *  which does not correspond to order tables creation and does not correspond to order of their location on disk.
       */
     using FileNames = std::map<std::string, ASTPtr>;
+    std::mutex file_names_mutex;
     FileNames file_names;
 
     size_t total_dictionaries = 0;
 
-    auto process_metadata = [&context, &file_names, &total_dictionaries, this](const String & file_name)
+    auto process_metadata = [&context, &file_names, &total_dictionaries, &file_names_mutex, this](const String & file_name)
     {
         String full_path = getMetadataPath() + file_name;
         try
@@ -134,6 +135,7 @@ void DatabaseOrdinary::loadStoredObjects(
             if (ast)
             {
                 auto * create_query = ast->as<ASTCreateQuery>();
+                std::lock_guard lock{file_names_mutex};
                 file_names[file_name] = ast;
                 total_dictionaries += create_query->is_dictionary;
             }
