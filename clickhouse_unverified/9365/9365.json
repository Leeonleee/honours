{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9365,
  "instance_id": "ClickHouse__ClickHouse-9365",
  "issue_numbers": [
    "9250"
  ],
  "base_commit": "ebe70f5bcb6385274cee3ad75e5a0e5580bf8936",
  "patch": "diff --git a/dbms/src/Disks/DiskSpaceMonitor.cpp b/dbms/src/Disks/DiskSpaceMonitor.cpp\nindex 6cc6d7e04db3..40f208edd7d3 100644\n--- a/dbms/src/Disks/DiskSpaceMonitor.cpp\n+++ b/dbms/src/Disks/DiskSpaceMonitor.cpp\n@@ -12,6 +12,16 @@\n \n namespace DB\n {\n+\n+namespace ErrorCodes\n+{\n+    extern const int EXCESSIVE_ELEMENT_IN_CONFIG;\n+    extern const int UNKNOWN_DISK;\n+    extern const int UNKNOWN_POLICY;\n+    extern const int LOGICAL_ERROR;\n+}\n+\n+\n DiskSelector::DiskSelector(const Poco::Util::AbstractConfiguration & config, const String & config_prefix, const Context & context)\n {\n     Poco::Util::AbstractConfiguration::Keys keys;\n@@ -253,10 +263,10 @@ DiskPtr StoragePolicy::getAnyDisk() const\n     /// StoragePolicy must contain at least one Volume\n     /// Volume must contain at least one Disk\n     if (volumes.empty())\n-        throw Exception(\"StoragePolicy has no volumes. It's a bug.\", ErrorCodes::NOT_ENOUGH_SPACE);\n+        throw Exception(\"StoragePolicy has no volumes. It's a bug.\", ErrorCodes::LOGICAL_ERROR);\n \n     if (volumes[0]->disks.empty())\n-        throw Exception(\"Volume '\" + volumes[0]->getName() + \"' has no disks. It's a bug.\", ErrorCodes::NOT_ENOUGH_SPACE);\n+        throw Exception(\"Volume '\" + volumes[0]->getName() + \"' has no disks. It's a bug.\", ErrorCodes::LOGICAL_ERROR);\n \n     return volumes[0]->disks[0];\n }\ndiff --git a/dbms/src/Disks/DiskSpaceMonitor.h b/dbms/src/Disks/DiskSpaceMonitor.h\nindex cb00944e1492..f59b5e164d3c 100644\n--- a/dbms/src/Disks/DiskSpaceMonitor.h\n+++ b/dbms/src/Disks/DiskSpaceMonitor.h\n@@ -16,17 +16,6 @@\n \n namespace DB\n {\n-namespace ErrorCodes\n-{\n-    extern const int LOGICAL_ERROR;\n-    extern const int NOT_ENOUGH_SPACE;\n-    extern const int NOT_IMPLEMENTED;\n-    extern const int SYSTEM_ERROR;\n-    extern const int UNKNOWN_ELEMENT_IN_CONFIG;\n-    extern const int EXCESSIVE_ELEMENT_IN_CONFIG;\n-    extern const int UNKNOWN_POLICY;\n-    extern const int UNKNOWN_DISK;\n-}\n \n /// Parse .xml configuration and store information about disks\n /// Mostly used for introspection.\ndiff --git a/dbms/src/Functions/bitWrapperFunc.cpp b/dbms/src/Functions/bitWrapperFunc.cpp\nindex b76eba354d30..2de8c0feb99b 100644\n--- a/dbms/src/Functions/bitWrapperFunc.cpp\n+++ b/dbms/src/Functions/bitWrapperFunc.cpp\n@@ -27,7 +27,6 @@ namespace DB\n \n #if USE_EMBEDDED_COMPILER\n         static constexpr bool compilable = false;\n-\n #endif\n     };\n \ndiff --git a/dbms/src/Storages/MergeTree/MergeTreeData.cpp b/dbms/src/Storages/MergeTree/MergeTreeData.cpp\nindex 1c94db88c2af..a0554dc54013 100644\n--- a/dbms/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/dbms/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -104,6 +104,8 @@ namespace ErrorCodes\n     extern const int ABORTED;\n     extern const int UNKNOWN_PART_TYPE;\n     extern const int UNEXPECTED_AST_STRUCTURE;\n+    extern const int UNKNOWN_DISK;\n+    extern const int NOT_ENOUGH_SPACE;\n }\n \n \ndiff --git a/dbms/src/Storages/MergeTree/MergeTreeIndexSet.cpp b/dbms/src/Storages/MergeTree/MergeTreeIndexSet.cpp\nindex 954ac7745835..2e09823a431f 100644\n--- a/dbms/src/Storages/MergeTree/MergeTreeIndexSet.cpp\n+++ b/dbms/src/Storages/MergeTree/MergeTreeIndexSet.cpp\n@@ -18,7 +18,7 @@ namespace ErrorCodes\n }\n \n /// 0b11 -- can be true and false at the same time\n-const Field UNKNOWN_FIELD(3u);\n+static const Field UNKNOWN_FIELD(3u);\n \n \n MergeTreeIndexGranuleSet::MergeTreeIndexGranuleSet(const MergeTreeIndexSet & index_)\n@@ -236,8 +236,6 @@ MergeTreeIndexConditionSet::MergeTreeIndexConditionSet(\n         expression_ast = select.where()->clone();\n     else if (select.prewhere())\n         expression_ast = select.prewhere()->clone();\n-    else\n-        expression_ast = std::make_shared<ASTLiteral>(UNKNOWN_FIELD);\n \n     useless = checkASTUseless(expression_ast);\n     /// Do not proceed if index is useless for this query.\n@@ -260,6 +258,9 @@ bool MergeTreeIndexConditionSet::alwaysUnknownOrTrue() const\n \n bool MergeTreeIndexConditionSet::mayBeTrueOnGranule(MergeTreeIndexGranulePtr idx_granule) const\n {\n+    if (useless)\n+        return true;\n+\n     auto granule = std::dynamic_pointer_cast<MergeTreeIndexGranuleSet>(idx_granule);\n     if (!granule)\n         throw Exception(\n@@ -405,8 +406,11 @@ bool MergeTreeIndexConditionSet::operatorFromAST(ASTPtr & node) const\n     return true;\n }\n \n-bool MergeTreeIndexConditionSet::checkASTUseless(const ASTPtr &node, bool atomic) const\n+bool MergeTreeIndexConditionSet::checkASTUseless(const ASTPtr & node, bool atomic) const\n {\n+    if (!node)\n+        return true;\n+\n     if (const auto * func = node->as<ASTFunction>())\n     {\n         if (key_columns.count(func->getColumnName()))\n@@ -422,7 +426,7 @@ bool MergeTreeIndexConditionSet::checkASTUseless(const ASTPtr &node, bool atomic\n             return checkASTUseless(args[0], atomic);\n         else\n             return std::any_of(args.begin(), args.end(),\n-                    [this](const auto & arg) { return checkASTUseless(arg, true); });\n+                [this](const auto & arg) { return checkASTUseless(arg, true); });\n     }\n     else if (const auto * literal = node->as<ASTLiteral>())\n         return !atomic && literal->value.get<bool>();\ndiff --git a/dbms/src/Storages/MergeTree/MergeTreeIndexSet.h b/dbms/src/Storages/MergeTree/MergeTreeIndexSet.h\nindex b6c8c6cfa06c..fc480e4024ad 100644\n--- a/dbms/src/Storages/MergeTree/MergeTreeIndexSet.h\n+++ b/dbms/src/Storages/MergeTree/MergeTreeIndexSet.h\n@@ -80,7 +80,7 @@ class MergeTreeIndexConditionSet : public IMergeTreeIndexCondition\n     bool atomFromAST(ASTPtr & node) const;\n     bool operatorFromAST(ASTPtr & node) const;\n \n-    bool checkASTUseless(const ASTPtr &node, bool atomic = false) const;\n+    bool checkASTUseless(const ASTPtr & node, bool atomic = false) const;\n \n     const MergeTreeIndexSet & index;\n \ndiff --git a/dbms/src/Storages/StorageMergeTree.cpp b/dbms/src/Storages/StorageMergeTree.cpp\nindex c89648c38ac2..1d8d2e044048 100644\n--- a/dbms/src/Storages/StorageMergeTree.cpp\n+++ b/dbms/src/Storages/StorageMergeTree.cpp\n@@ -36,12 +36,8 @@ namespace ErrorCodes\n     extern const int ABORTED;\n     extern const int BAD_ARGUMENTS;\n     extern const int INCORRECT_DATA;\n-    extern const int INCORRECT_FILE_NAME;\n     extern const int CANNOT_ASSIGN_OPTIMIZE;\n-    extern const int INCOMPATIBLE_COLUMNS;\n-    extern const int PART_IS_TEMPORARILY_LOCKED;\n-    extern const int UNKNOWN_SETTING;\n-    extern const int TOO_BIG_AST;\n+    extern const int NOT_ENOUGH_SPACE;\n }\n \n namespace ActionLocks\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01087_index_set_ubsan.reference b/dbms/tests/queries/0_stateless/01087_index_set_ubsan.reference\nnew file mode 100644\nindex 000000000000..a9127bd8170c\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01087_index_set_ubsan.reference\n@@ -0,0 +1,4 @@\n+1\t1\n+1\t2\n+1\t3\n+1\t4\ndiff --git a/dbms/tests/queries/0_stateless/01087_index_set_ubsan.sql b/dbms/tests/queries/0_stateless/01087_index_set_ubsan.sql\nnew file mode 100644\nindex 000000000000..e22e58396b56\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01087_index_set_ubsan.sql\n@@ -0,0 +1,5 @@\n+DROP TABLE IF EXISTS t;\n+create table t (i Int, a Int, s String, index ind_s (s) type set(1) granularity 1) engine = MergeTree order by i;\n+insert into t values (1, 1, 'a') (2, 1, 'a') (3, 1, 'a') (4, 1, 'a');\n+SELECT a, i from t ORDER BY a, i;\n+DROP TABLE t;\n",
  "problem_statement": "UBsan report at skip index 'set'.\n**How to reproduce**\r\n```\r\nap11-nix :) create table t (i Int, a Int, s String, index ind_s (s) type set(1) granularity 1) engine = MergeTree order by i;\r\n\r\nap11-nix :) insert into t values (1, 1, 'a') (2, 1, 'a') (3, 1, 'a') (4, 1, 'a');\r\n\r\nap11-nix :) SELECT a, i from t\r\n```\r\n\r\nIt causes error from UBsan:\r\n```\r\n2020.02.20 16:14:10.371917 [ 1444 ] {a8b29041-f639-4d89-981a-e66b14f7a64c} <Debug> default.t (SelectExecutor): Key condition: unknown\r\n../dbms/src/Storages/MergeTree/MergeTreeIndexSet.cpp:428:42: runtime error: load of value 3, which is not a valid value for type 'const bool'\r\n```\r\nMore detailed stacktrace of same error: https://clickhouse-test-reports.s3.yandex.net/8775/2f30a1350b9d0bb1e6683420448993baaf97b348/functional_stateless_tests_(ubsan)/stderr.log.\r\n\r\nAlso it's quite strange, that there was an attempt to use index in this query.\r\n\n",
  "hints_text": "",
  "created_at": "2020-02-25T14:02:21Z"
}