{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19875,
  "instance_id": "ClickHouse__ClickHouse-19875",
  "issue_numbers": [
    "19874"
  ],
  "base_commit": "37f88a1468a62525bef67849cc82bf883b7fd67d",
  "patch": "diff --git a/programs/benchmark/Benchmark.cpp b/programs/benchmark/Benchmark.cpp\nindex ae1d16ce402f..a0e2ea155ba7 100644\n--- a/programs/benchmark/Benchmark.cpp\n+++ b/programs/benchmark/Benchmark.cpp\n@@ -62,12 +62,12 @@ class Benchmark : public Poco::Util::Application\n             bool randomize_, size_t max_iterations_, double max_time_,\n             const String & json_path_, size_t confidence_,\n             const String & query_id_, const String & query_to_execute_, bool continue_on_errors_,\n-            bool print_stacktrace_, const Settings & settings_)\n+            bool reconnect_, bool print_stacktrace_, const Settings & settings_)\n         :\n         concurrency(concurrency_), delay(delay_), queue(concurrency), randomize(randomize_),\n         cumulative(cumulative_), max_iterations(max_iterations_), max_time(max_time_),\n         json_path(json_path_), confidence(confidence_), query_id(query_id_),\n-        query_to_execute(query_to_execute_), continue_on_errors(continue_on_errors_),\n+        query_to_execute(query_to_execute_), continue_on_errors(continue_on_errors_), reconnect(reconnect_),\n         print_stacktrace(print_stacktrace_), settings(settings_),\n         shared_context(Context::createShared()), global_context(Context::createGlobal(shared_context.get())),\n         pool(concurrency)\n@@ -155,6 +155,7 @@ class Benchmark : public Poco::Util::Application\n     String query_id;\n     String query_to_execute;\n     bool continue_on_errors;\n+    bool reconnect;\n     bool print_stacktrace;\n     const Settings & settings;\n     SharedContextHolder shared_context;\n@@ -404,9 +405,14 @@ class Benchmark : public Poco::Util::Application\n     void execute(EntryPtrs & connection_entries, Query & query, size_t connection_index)\n     {\n         Stopwatch watch;\n+\n+        Connection & connection = **connection_entries[connection_index];\n+\n+        if (reconnect)\n+            connection.disconnect();\n+\n         RemoteBlockInputStream stream(\n-            *(*connection_entries[connection_index]),\n-            query, {}, global_context, nullptr, Scalars(), Tables(), query_processing_stage);\n+            connection, query, {}, global_context, nullptr, Scalars(), Tables(), query_processing_stage);\n         if (!query_id.empty())\n             stream.setQueryId(query_id);\n \n@@ -589,6 +595,7 @@ int mainEntryClickHouseBenchmark(int argc, char ** argv)\n             (\"confidence\",    value<size_t>()->default_value(5), \"set the level of confidence for T-test [0=80%, 1=90%, 2=95%, 3=98%, 4=99%, 5=99.5%(default)\")\n             (\"query_id\",      value<std::string>()->default_value(\"\"),         \"\")\n             (\"continue_on_errors\", \"continue testing even if a query fails\")\n+            (\"reconnect\", \"establish new connection for every query\")\n         ;\n \n         Settings settings;\n@@ -638,7 +645,8 @@ int mainEntryClickHouseBenchmark(int argc, char ** argv)\n             options[\"confidence\"].as<size_t>(),\n             options[\"query_id\"].as<std::string>(),\n             options[\"query\"].as<std::string>(),\n-            options.count(\"continue_on_errors\") > 0,\n+            options.count(\"continue_on_errors\"),\n+            options.count(\"reconnect\"),\n             print_stacktrace,\n             settings);\n         return benchmark.run();\ndiff --git a/src/Interpreters/SystemLog.h b/src/Interpreters/SystemLog.h\nindex 6c56565a1527..101bc752f43a 100644\n--- a/src/Interpreters/SystemLog.h\n+++ b/src/Interpreters/SystemLog.h\n@@ -8,6 +8,7 @@\n #include <condition_variable>\n #include <boost/noncopyable.hpp>\n #include <common/logger_useful.h>\n+#include <ext/scope_guard.h>\n #include <common/types.h>\n #include <Core/Defines.h>\n #include <Storages/IStorage.h>\n@@ -229,9 +230,18 @@ void SystemLog<LogElement>::startup()\n }\n \n \n+static thread_local bool recursive_add_call = false;\n+\n template <typename LogElement>\n void SystemLog<LogElement>::add(const LogElement & element)\n {\n+    /// It is possible that the method will be called recursively.\n+    /// Better to drop these events to avoid complications.\n+    if (recursive_add_call)\n+        return;\n+    recursive_add_call = true;\n+    SCOPE_EXIT({ recursive_add_call = false; });\n+\n     /// Memory can be allocated while resizing on queue.push_back.\n     /// The size of allocation can be in order of a few megabytes.\n     /// But this should not be accounted for query memory usage.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01683_text_log_deadlock.reference b/tests/queries/0_stateless/01683_text_log_deadlock.reference\nnew file mode 100644\nindex 000000000000..76de47c4a462\n--- /dev/null\n+++ b/tests/queries/0_stateless/01683_text_log_deadlock.reference\n@@ -0,0 +1,1 @@\n+queries 25000\ndiff --git a/tests/queries/0_stateless/01683_text_log_deadlock.sh b/tests/queries/0_stateless/01683_text_log_deadlock.sh\nnew file mode 100755\nindex 000000000000..ee772bffa273\n--- /dev/null\n+++ b/tests/queries/0_stateless/01683_text_log_deadlock.sh\n@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_BENCHMARK --secure -i 25000 -c 32 --query 'SELECT 1' 2>&1 | grep -oF 'queries 25000'\n",
  "problem_statement": "Deadlock is possible if system.text_log is enabled.\n**Describe the bug**\r\n```\r\n| | | | | | | | | 5    0x000000000e3a5ec1 in DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) ()\r\n| | | | | | | | | | 2    0x000000000e3aadc6 in DB::logQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context const&, bool) ()\r\n| | | | | | | | | | | 2    0x000000000887a195 in DB::OwnSplitChannel::log(Poco::Message const&) ()\r\n| | | | | | | | | | | | 2    0x000000000887a7fa in DB::OwnSplitChannel::logSplit(Poco::Message const&) ()\r\n| | | | | | | | | | | | | 2    0x000000000887acb6 in DB::SystemLog<DB::TextLogElement>::add(DB::TextLogElement const&) ()\r\n| | | | | | | | | | | | | | 1    0x0000000011976246 in std::__1::mutex::lock() ()\r\n| | | | | | | | | | | | | | | 1    0x00000000087495a1 in pthread_mutex_lock ()\r\n| | | | | | | | | | | | | | | | 1    0x00007f074da790a3 in __GI___pthread_mutex_lock at ../nptl/pthread_mutex_lock.c:80\r\n| | | | | | | | | | | | | | | | | 1    __lll_lock_wait at lowlevellock.c:52\r\n| | | | | | | | | | | | | 2    0x000000000887ae28 in DB::SystemLog<DB::TextLogElement>::add(DB::TextLogElement const&) ()\r\n| | | | | | | | | | | | | | 1    0x000000000887c62c in void std::__1::vector<DB::TextLogElement, std::__1::allocator<DB::TextLogElement> >::__push_back_slow_path<DB::TextLogElement const&>(DB::TextLogElement const&) ()\r\n| | | | | | | | | | | | | | | 1    0x00000000087156fb in operator new(unsigned long) ()\r\n| | | | | | | | | | | | | | | | 1    0x0000000008727744 in MemoryTracker::alloc(long) ()\r\n| | | | | | | | | | | | | | | | | 1    0x000000000872727c in MemoryTracker::logMemoryUsage(long) const ()\r\n| | | | | | | | | | | | | | | | | | 1    0x000000000887a195 in DB::OwnSplitChannel::log(Poco::Message const&) ()\r\n| | | | | | | | | | | | | | | | | | | 1    0x000000000887a7fa in DB::OwnSplitChannel::logSplit(Poco::Message const&) ()\r\n| | | | | | | | | | | | | | | | | | | | 1    0x000000000887acb6 in DB::SystemLog<DB::TextLogElement>::add(DB::TextLogElement const&) ()\r\n| | | | | | | | | | | | | | | | | | | | | 1    0x0000000011976246 in std::__1::mutex::lock() ()\r\n| | | | | | | | | | | | | | | | | | | | | | 1    0x00000000087495a1 in pthread_mutex_lock ()\r\n| | | | | | | | | | | | | | | | | | | | | | | 1    0x00007f074da790a3 in __GI___pthread_mutex_lock at ../nptl/pthread_mutex_lock.c:80\r\n| | | | | | | | | | | | | | | | | | | | | | | | 1    __lll_lock_wait at lowlevellock.c:52\r\n```\r\n\r\n**How to reproduce**\r\n```\r\nclickhouse-benchmark -i 1000000 -c16 --secure --query \"SELECT 1\"\r\n```\n",
  "hints_text": "",
  "created_at": "2021-01-31T10:06:19Z"
}