{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 33300,
  "instance_id": "ClickHouse__ClickHouse-33300",
  "issue_numbers": [
    "33257"
  ],
  "base_commit": "3655965b397241eb86ccb11f21fe92e9cd032398",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex 5c0322ac1d9f..7049dfc03f69 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -401,7 +401,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n             view = nullptr;\n         }\n \n-        if (try_move_to_prewhere && storage && storage->supportsPrewhere() && query.where() && !query.prewhere())\n+        if (try_move_to_prewhere && storage && storage->canMoveConditionsToPrewhere() && query.where() && !query.prewhere())\n         {\n             /// PREWHERE optimization: transfer some condition from WHERE to PREWHERE if enabled and viable\n             if (const auto & column_sizes = storage->getColumnSizes(); !column_sizes.empty())\ndiff --git a/src/Storages/IStorage.h b/src/Storages/IStorage.h\nindex bcbc771815b6..6342c3f6b476 100644\n--- a/src/Storages/IStorage.h\n+++ b/src/Storages/IStorage.h\n@@ -135,6 +135,9 @@ class IStorage : public std::enable_shared_from_this<IStorage>, public TypePromo\n     /// Returns true if the storage supports queries with the PREWHERE section.\n     virtual bool supportsPrewhere() const { return false; }\n \n+    /// Returns true if the storage supports optimization of moving conditions to PREWHERE section.\n+    virtual bool canMoveConditionsToPrewhere() const { return supportsPrewhere(); }\n+\n     /// Returns true if the storage replicates SELECT, INSERT and ALTER commands among replicas.\n     virtual bool supportsReplication() const { return false; }\n \ndiff --git a/src/Storages/StorageDistributed.h b/src/Storages/StorageDistributed.h\nindex 06fa89056392..e47e0fddd6cf 100644\n--- a/src/Storages/StorageDistributed.h\n+++ b/src/Storages/StorageDistributed.h\n@@ -53,6 +53,10 @@ class StorageDistributed final : public shared_ptr_helper<StorageDistributed>, p\n     bool supportsSubcolumns() const override { return true; }\n     StoragePolicyPtr getStoragePolicy() const override;\n \n+    /// Do not apply moving to PREWHERE optimization for distributed tables,\n+    /// because we can't be sure that underlying table supports PREWHERE.\n+    bool canMoveConditionsToPrewhere() const override { return false; }\n+\n     bool isRemote() const override { return true; }\n \n     QueryProcessingStage::Enum\ndiff --git a/src/Storages/StorageMerge.cpp b/src/Storages/StorageMerge.cpp\nindex bdb7ddb744aa..0dc6f2931d3a 100644\n--- a/src/Storages/StorageMerge.cpp\n+++ b/src/Storages/StorageMerge.cpp\n@@ -116,6 +116,15 @@ StoragePtr StorageMerge::getFirstTable(F && predicate) const\n     return {};\n }\n \n+template <typename F>\n+void StorageMerge::forEachTable(F && func) const\n+{\n+    getFirstTable([&func](const auto & table)\n+    {\n+        func(table);\n+        return false;\n+    });\n+}\n \n bool StorageMerge::isRemote() const\n {\n@@ -123,6 +132,16 @@ bool StorageMerge::isRemote() const\n     return first_remote_table != nullptr;\n }\n \n+bool StorageMerge::canMoveConditionsToPrewhere() const\n+{\n+    /// NOTE: This check is used during query analysis as condition for applying\n+    /// \"move to PREWHERE\" optimization. However, it contains a logical race:\n+    /// If new table that matches regexp for current storage and doesn't support PREWHERE\n+    /// will appear after this check and before calling \"read\" method, the optimized query may fail.\n+    /// Since it's quite rare case, we just ignore this possibility.\n+\n+    return getFirstTable([](const auto & table) { return !table->canMoveConditionsToPrewhere(); }) == nullptr;\n+}\n \n bool StorageMerge::mayBenefitFromIndexForIn(const ASTPtr & left_in_operand, ContextPtr query_context, const StorageMetadataPtr & /*metadata_snapshot*/) const\n {\n@@ -771,10 +790,15 @@ void StorageMerge::convertingSourceStream(\n \n IStorage::ColumnSizeByName StorageMerge::getColumnSizes() const\n {\n-    auto first_materialized_mysql = getFirstTable([](const StoragePtr & table) { return table && table->getName() == \"MaterializedMySQL\"; });\n-    if (!first_materialized_mysql)\n-        return {};\n-    return first_materialized_mysql->getColumnSizes();\n+    ColumnSizeByName column_sizes;\n+\n+    forEachTable([&](const auto & table)\n+    {\n+        for (const auto & [name, size] : table->getColumnSizes())\n+            column_sizes[name].add(size);\n+    });\n+\n+    return column_sizes;\n }\n \n \ndiff --git a/src/Storages/StorageMerge.h b/src/Storages/StorageMerge.h\nindex ad3075efd085..e0d815313255 100644\n--- a/src/Storages/StorageMerge.h\n+++ b/src/Storages/StorageMerge.h\n@@ -22,10 +22,12 @@ class StorageMerge final : public shared_ptr_helper<StorageMerge>, public IStora\n \n     /// The check is delayed to the read method. It checks the support of the tables used.\n     bool supportsSampling() const override { return true; }\n-    bool supportsPrewhere() const override { return true; }\n     bool supportsFinal() const override { return true; }\n     bool supportsIndexForIn() const override { return true; }\n     bool supportsSubcolumns() const override { return true; }\n+    bool supportsPrewhere() const override { return true; }\n+\n+    bool canMoveConditionsToPrewhere() const override;\n \n     QueryProcessingStage::Enum\n     getQueryProcessingStage(ContextPtr, QueryProcessingStage::Enum, const StorageMetadataPtr &, SelectQueryInfo &) const override;\n@@ -75,6 +77,9 @@ class StorageMerge final : public shared_ptr_helper<StorageMerge>, public IStora\n     template <typename F>\n     StoragePtr getFirstTable(F && predicate) const;\n \n+    template <typename F>\n+    void forEachTable(F && func) const;\n+\n     DatabaseTablesIteratorPtr getDatabaseIterator(const String & database_name, ContextPtr context) const;\n \n     DatabaseTablesIterators getDatabaseIterators(ContextPtr context) const;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02156_storage_merge_prewhere.reference b/tests/queries/0_stateless/02156_storage_merge_prewhere.reference\nnew file mode 100644\nindex 000000000000..6df60403ae0e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02156_storage_merge_prewhere.reference\n@@ -0,0 +1,13 @@\n+SELECT count()\n+FROM t_02156_merge1\n+PREWHERE k = 1\n+WHERE (k = 1) AND notEmpty(v)\n+2\n+SELECT count()\n+FROM t_02156_merge2\n+WHERE (k = 1) AND notEmpty(v)\n+2\n+SELECT count()\n+FROM t_02156_merge3\n+WHERE (k = 1) AND notEmpty(v)\n+2\ndiff --git a/tests/queries/0_stateless/02156_storage_merge_prewhere.sql b/tests/queries/0_stateless/02156_storage_merge_prewhere.sql\nnew file mode 100644\nindex 000000000000..e033005e0145\n--- /dev/null\n+++ b/tests/queries/0_stateless/02156_storage_merge_prewhere.sql\n@@ -0,0 +1,38 @@\n+DROP TABLE IF EXISTS t_02156_mt1;\n+DROP TABLE IF EXISTS t_02156_mt2;\n+DROP TABLE IF EXISTS t_02156_log;\n+DROP TABLE IF EXISTS t_02156_dist;\n+DROP TABLE IF EXISTS t_02156_merge1;\n+DROP TABLE IF EXISTS t_02156_merge2;\n+DROP TABLE IF EXISTS t_02156_merge3;\n+\n+CREATE TABLE t_02156_mt1 (k UInt32, v String) ENGINE = MergeTree ORDER BY k;\n+CREATE TABLE t_02156_mt2 (k UInt32, v String) ENGINE = MergeTree ORDER BY k;\n+CREATE TABLE t_02156_log (k UInt32, v String) ENGINE = Log;\n+\n+CREATE TABLE t_02156_dist (k UInt32, v String) ENGINE = Distributed(test_shard_localhost, currentDatabase(), t_02156_mt1);\n+\n+CREATE TABLE t_02156_merge1 (k UInt32, v String) ENGINE = Merge(currentDatabase(), 't_02156_mt1|t_02156_mt2');\n+CREATE TABLE t_02156_merge2 (k UInt32, v String) ENGINE = Merge(currentDatabase(), 't_02156_mt1|t_02156_log');\n+CREATE TABLE t_02156_merge3 (k UInt32, v String) ENGINE = Merge(currentDatabase(), 't_02156_mt2|t_02156_dist');\n+\n+INSERT INTO t_02156_mt1 SELECT number, toString(number) FROM numbers(10000);\n+INSERT INTO t_02156_mt2 SELECT number, toString(number) FROM numbers(10000);\n+INSERT INTO t_02156_log SELECT number, toString(number) FROM numbers(10000);\n+\n+EXPLAIN SYNTAX SELECT count() FROM t_02156_merge1 WHERE k = 1 AND notEmpty(v);\n+SELECT count() FROM t_02156_merge1 WHERE k = 1 AND notEmpty(v);\n+\n+EXPLAIN SYNTAX SELECT count() FROM t_02156_merge2 WHERE k = 1 AND notEmpty(v);\n+SELECT count() FROM t_02156_merge2 WHERE k = 1 AND notEmpty(v);\n+\n+EXPLAIN SYNTAX SELECT count() FROM t_02156_merge3 WHERE k = 1 AND notEmpty(v);\n+SELECT count() FROM t_02156_merge3 WHERE k = 1 AND notEmpty(v);\n+\n+DROP TABLE IF EXISTS t_02156_mt1;\n+DROP TABLE IF EXISTS t_02156_mt2;\n+DROP TABLE IF EXISTS t_02156_log;\n+DROP TABLE IF EXISTS t_02156_dist;\n+DROP TABLE IF EXISTS t_02156_merge1;\n+DROP TABLE IF EXISTS t_02156_merge2;\n+DROP TABLE IF EXISTS t_02156_merge3;\n",
  "problem_statement": "Move to prewhere optimization should also work for Merge tables\n**Describe the situation**\r\n\r\nCurrently it does not:\r\n\r\n```\r\nmilovidov-desktop :) EXPLAIN SYNTAX SELECT sum(cityHash64(*)) AS x FROM test.hits WHERE URLDomain LIKE '%metrika%'\r\n\r\nEXPLAIN SYNTAX\r\nSELECT sum(cityHash64(*)) AS x\r\nFROM test.hits\r\nWHERE URLDomain LIKE '%metrika%'\r\n\r\nQuery id: a752ed76-a71c-4e26-96c1-1b081abfc539\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SELECT sum(cityHash64(WatchID, JavaEnable, Title, GoodEvent, EventTime, EventDate, CounterID, ClientIP, ClientIP6, RegionID, UserID, CounterClass, OS, UserAgent, URL, Referer, URLDomain, RefererDomain, Refresh, IsRobot, RefererCategories, URLCategories, URLRegions, RefererRegions, ResolutionWidth, ResolutionHeight, ResolutionDepth, FlashMajor, FlashMinor, FlashMinor2, NetMajor, NetMinor, UserAgentMajor, UserAgentMinor, CookieEnable, JavascriptEnable, IsMobile, MobilePhone, MobilePhoneModel, Params, IPNetworkID, TraficSourceID, SearchEngineID, SearchPhrase, AdvEngineID, IsArtifical, WindowClientWidth, WindowClientHeight, ClientTimeZone, ClientEventTime, SilverlightVersion1, SilverlightVersion2, SilverlightVersion3, SilverlightVersion4, PageCharset, CodeVersion, IsLink, IsDownload, IsNotBounce, FUniqID, HID, IsOldCounter, IsEvent, IsParameter, DontCountHits, WithHash, HitColor, UTCEventTime, Age, Sex, Income, Interests, Robotness, GeneralInterests, RemoteIP, RemoteIP6, WindowName, OpenerName, HistoryLength, BrowserLanguage, BrowserCountry, SocialNetwork, SocialAction, HTTPError, SendTiming, DNSTiming, ConnectTiming, ResponseStartTiming, ResponseEndTiming, FetchTiming, RedirectTiming, DOMInteractiveTiming, DOMContentLoadedTiming, DOMCompleteTiming, LoadEventStartTiming, LoadEventEndTiming, NSToDOMContentLoadedTiming, FirstPaintTiming, RedirectCount, SocialSourceNetworkID, SocialSourcePage, ParamPrice, ParamOrderID, ParamCurrency, ParamCurrencyID, GoalsReached, OpenstatServiceName, OpenstatCampaignID, OpenstatAdID, OpenstatSourceID, UTMSource, UTMMedium, UTMCampaign, UTMContent, UTMTerm, FromTag, HasGCLID, RefererHash, URLHash, CLID, YCLID, ShareService, ShareURL, ShareTitle, `ParsedParams.Key1`, `ParsedParams.Key2`, `ParsedParams.Key3`, `ParsedParams.Key4`, `ParsedParams.Key5`, `ParsedParams.ValueDouble`, IslandID, RequestNum, RequestTry)) AS x \u2502\r\n\u2502 FROM test.hits                                                                                                                                                                                                                                             \u2502\r\n\u2502 PREWHERE URLDomain LIKE '%metrika%'                                                                                                                                                                                                                        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n3 rows in set. Elapsed: 0.004 sec. \r\n\r\nmilovidov-desktop :) EXPLAIN SYNTAX SELECT sum(cityHash64(*)) AS x FROM merge(test, '^hits$') WHERE URLDomain LIKE '%metrika%'\r\n\r\nEXPLAIN SYNTAX\r\nSELECT sum(cityHash64(*)) AS x\r\nFROM merge(test, '^hits$')\r\nWHERE URLDomain LIKE '%metrika%'\r\n\r\nQuery id: fb059673-7da1-4cf4-9713-e5c7b9feb66d\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SELECT sum(cityHash64(WatchID, JavaEnable, Title, GoodEvent, EventTime, EventDate, CounterID, ClientIP, ClientIP6, RegionID, UserID, CounterClass, OS, UserAgent, URL, Referer, URLDomain, RefererDomain, Refresh, IsRobot, RefererCategories, URLCategories, URLRegions, RefererRegions, ResolutionWidth, ResolutionHeight, ResolutionDepth, FlashMajor, FlashMinor, FlashMinor2, NetMajor, NetMinor, UserAgentMajor, UserAgentMinor, CookieEnable, JavascriptEnable, IsMobile, MobilePhone, MobilePhoneModel, Params, IPNetworkID, TraficSourceID, SearchEngineID, SearchPhrase, AdvEngineID, IsArtifical, WindowClientWidth, WindowClientHeight, ClientTimeZone, ClientEventTime, SilverlightVersion1, SilverlightVersion2, SilverlightVersion3, SilverlightVersion4, PageCharset, CodeVersion, IsLink, IsDownload, IsNotBounce, FUniqID, HID, IsOldCounter, IsEvent, IsParameter, DontCountHits, WithHash, HitColor, UTCEventTime, Age, Sex, Income, Interests, Robotness, GeneralInterests, RemoteIP, RemoteIP6, WindowName, OpenerName, HistoryLength, BrowserLanguage, BrowserCountry, SocialNetwork, SocialAction, HTTPError, SendTiming, DNSTiming, ConnectTiming, ResponseStartTiming, ResponseEndTiming, FetchTiming, RedirectTiming, DOMInteractiveTiming, DOMContentLoadedTiming, DOMCompleteTiming, LoadEventStartTiming, LoadEventEndTiming, NSToDOMContentLoadedTiming, FirstPaintTiming, RedirectCount, SocialSourceNetworkID, SocialSourcePage, ParamPrice, ParamOrderID, ParamCurrency, ParamCurrencyID, GoalsReached, OpenstatServiceName, OpenstatCampaignID, OpenstatAdID, OpenstatSourceID, UTMSource, UTMMedium, UTMCampaign, UTMContent, UTMTerm, FromTag, HasGCLID, RefererHash, URLHash, CLID, YCLID, ShareService, ShareURL, ShareTitle, `ParsedParams.Key1`, `ParsedParams.Key2`, `ParsedParams.Key3`, `ParsedParams.Key4`, `ParsedParams.Key5`, `ParsedParams.ValueDouble`, IslandID, RequestNum, RequestTry)) AS x \u2502\r\n\u2502 FROM merge('test', '^hits$')                                                                                                                                                                                                                               \u2502\r\n\u2502 WHERE URLDomain LIKE '%metrika%'                                                                                                                                                                                                                           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nMost likely because Merge table does not provide column sizes info.\r\nWe can provide it either:\r\n- by iterating and summing across all tables;\r\n- only for first N = 10 tables in case if the number of tables is very large.\n",
  "hints_text": "> only for first N = 10 tables in case if the number of tables is very large\r\n\r\nThis won't work, because anyway we have to iterate over all tables to be sure that all of them support `PREWHERE`.\nOk, let's iterate all tables.",
  "created_at": "2021-12-29T17:52:52Z"
}