{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 68867,
  "instance_id": "ClickHouse__ClickHouse-68867",
  "issue_numbers": [
    "65026"
  ],
  "base_commit": "e7054029c4e2721855b599d874c74d68ae2cd45a",
  "patch": "diff --git a/base/poco/Net/include/Poco/Net/HTTPResponse.h b/base/poco/Net/include/Poco/Net/HTTPResponse.h\nindex 3c444c3d38cd..623dfb783f30 100644\n--- a/base/poco/Net/include/Poco/Net/HTTPResponse.h\n+++ b/base/poco/Net/include/Poco/Net/HTTPResponse.h\n@@ -18,7 +18,9 @@\n #define Net_HTTPResponse_INCLUDED\n \n \n+#include <map>\n #include <vector>\n+\n #include \"Poco/Net/HTTPCookie.h\"\n #include \"Poco/Net/HTTPMessage.h\"\n #include \"Poco/Net/Net.h\"\n@@ -180,6 +182,8 @@ namespace Net\n         /// May throw an exception in case of a malformed\n         /// Set-Cookie header.\n \n+        void getHeaders(std::map<std::string, std::string> & headers) const;\n+\n         void write(std::ostream & ostr) const;\n         /// Writes the HTTP response to the given\n         /// output stream.\ndiff --git a/base/poco/Net/src/HTTPResponse.cpp b/base/poco/Net/src/HTTPResponse.cpp\nindex e0017321595f..4d58d05a43e2 100644\n--- a/base/poco/Net/src/HTTPResponse.cpp\n+++ b/base/poco/Net/src/HTTPResponse.cpp\n@@ -209,6 +209,15 @@ void HTTPResponse::getCookies(std::vector<HTTPCookie>& cookies) const\n \t}\n }\n \n+void HTTPResponse::getHeaders(std::map<std::string, std::string> & headers) const\n+{\n+    headers.clear();\n+    for (const auto & it : *this)\n+    {\n+        headers.emplace(it.first, it.second);\n+    }\n+}\n+\n \n void HTTPResponse::write(std::ostream& ostr) const\n {\ndiff --git a/docs/en/engines/table-engines/special/url.md b/docs/en/engines/table-engines/special/url.md\nindex c906830d0e9d..bbc28daef488 100644\n--- a/docs/en/engines/table-engines/special/url.md\n+++ b/docs/en/engines/table-engines/special/url.md\n@@ -109,6 +109,7 @@ For partitioning by month, use the `toYYYYMM(date_column)` expression, where `da\n - `_file` \u2014 Resource name of the `URL`. Type: `LowCardinalty(String)`.\n - `_size` \u2014 Size of the resource in bytes. Type: `Nullable(UInt64)`. If the size is unknown, the value is `NULL`.\n - `_time` \u2014 Last modified time of the file. Type: `Nullable(DateTime)`. If the time is unknown, the value is `NULL`.\n+- `_headers` - HTTP response headers. Type: `Map(LowCardinality(String), LowCardinality(String))`.\n \n ## Storage Settings {#storage-settings}\n \ndiff --git a/docs/en/sql-reference/table-functions/url.md b/docs/en/sql-reference/table-functions/url.md\nindex b4027594e7c6..7a354ea03646 100644\n--- a/docs/en/sql-reference/table-functions/url.md\n+++ b/docs/en/sql-reference/table-functions/url.md\n@@ -54,6 +54,7 @@ Character `|` inside patterns is used to specify failover addresses. They are it\n - `_file` \u2014 Resource name of the `URL`. Type: `LowCardinalty(String)`.\n - `_size` \u2014 Size of the resource in bytes. Type: `Nullable(UInt64)`. If the size is unknown, the value is `NULL`.\n - `_time` \u2014 Last modified time of the file. Type: `Nullable(DateTime)`. If the time is unknown, the value is `NULL`.\n+- `_headers` - HTTP response headers. Type: `Map(LowCardinality(String), LowCardinality(String))`.\n \n ## Hive-style partitioning {#hive-style-partitioning}\n \ndiff --git a/src/IO/ReadWriteBufferFromHTTP.cpp b/src/IO/ReadWriteBufferFromHTTP.cpp\nindex a7bc0d4845ce..826862bb5b3a 100644\n--- a/src/IO/ReadWriteBufferFromHTTP.cpp\n+++ b/src/IO/ReadWriteBufferFromHTTP.cpp\n@@ -443,6 +443,7 @@ std::unique_ptr<ReadBuffer> ReadWriteBufferFromHTTP::initialize()\n     }\n \n     response.getCookies(cookies);\n+    response.getHeaders(response_headers);\n     content_encoding = response.get(\"Content-Encoding\", \"\");\n \n     // Remember file size. It'll be used to report eof in next nextImpl() call.\n@@ -680,6 +681,19 @@ std::string ReadWriteBufferFromHTTP::getResponseCookie(const std::string & name,\n     return def;\n }\n \n+Map ReadWriteBufferFromHTTP::getResponseHeaders() const\n+{\n+    Map map;\n+    for (const auto & header : response_headers)\n+    {\n+        Tuple elem;\n+        elem.emplace_back(header.first);\n+        elem.emplace_back(header.second);\n+        map.emplace_back(elem);\n+    }\n+    return map;\n+}\n+\n void ReadWriteBufferFromHTTP::setNextCallback(NextCallback next_callback_)\n {\n     next_callback = next_callback_;\ndiff --git a/src/IO/ReadWriteBufferFromHTTP.h b/src/IO/ReadWriteBufferFromHTTP.h\nindex 1c9bda53008c..cca22c643170 100644\n--- a/src/IO/ReadWriteBufferFromHTTP.h\n+++ b/src/IO/ReadWriteBufferFromHTTP.h\n@@ -90,6 +90,9 @@ class ReadWriteBufferFromHTTP : public SeekableReadBuffer, public WithFileName,\n     std::unique_ptr<ReadBuffer> impl;\n \n     std::vector<Poco::Net::HTTPCookie> cookies;\n+\n+    std::map<String, String> response_headers;\n+\n     HTTPHeaderEntries http_header_entries;\n     std::function<void(size_t)> next_callback;\n \n@@ -187,6 +190,8 @@ class ReadWriteBufferFromHTTP : public SeekableReadBuffer, public WithFileName,\n \n     HTTPFileInfo getFileInfo();\n     static HTTPFileInfo parseFileInfo(const Poco::Net::HTTPResponse & response, size_t requested_range_begin);\n+\n+    Map getResponseHeaders() const;\n };\n \n using ReadWriteBufferFromHTTPPtr = std::unique_ptr<ReadWriteBufferFromHTTP>;\ndiff --git a/src/Storages/StorageURL.cpp b/src/Storages/StorageURL.cpp\nindex fc1354b780a2..1c7439f9a554 100644\n--- a/src/Storages/StorageURL.cpp\n+++ b/src/Storages/StorageURL.cpp\n@@ -44,10 +44,11 @@\n #include <IO/HTTPHeaderEntries.h>\n \n #include <algorithm>\n+#include <DataTypes/DataTypeLowCardinality.h>\n+#include <DataTypes/DataTypeMap.h>\n+#include <DataTypes/DataTypeString.h>\n #include <QueryPipeline/QueryPipelineBuilder.h>\n #include <Poco/Net/HTTPRequest.h>\n-#include <DataTypes/DataTypeString.h>\n-#include <DataTypes/DataTypeLowCardinality.h>\n \n namespace ProfileEvents\n {\n@@ -166,7 +167,19 @@ IStorageURLBase::IStorageURLBase(\n     storage_metadata.setConstraints(constraints_);\n     storage_metadata.setComment(comment);\n \n-    setVirtuals(VirtualColumnUtils::getVirtualsForFileLikeStorage(storage_metadata.columns, context_, getSampleURI(uri, context_), format_settings));\n+    auto virtual_columns_desc = VirtualColumnUtils::getVirtualsForFileLikeStorage(\n+        storage_metadata.columns, context_, getSampleURI(uri, context_), format_settings);\n+    if (!storage_metadata.getColumns().has(\"_headers\"))\n+    {\n+        virtual_columns_desc.addEphemeral(\n+            \"_headers\",\n+            std::make_shared<DataTypeMap>(\n+                std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),\n+                std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())),\n+            \"\");\n+    }\n+\n+    setVirtuals(virtual_columns_desc);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -292,11 +305,13 @@ StorageURLSource::StorageURLSource(\n     const URIParams & params,\n     bool glob_url,\n     bool need_only_count_)\n-    : SourceWithKeyCondition(info.source_header, false), WithContext(context_)\n+    : SourceWithKeyCondition(info.source_header, false)\n+    , WithContext(context_)\n     , name(std::move(name_))\n     , columns_description(info.columns_description)\n     , requested_columns(info.requested_columns)\n-    , requested_virtual_columns(info.requested_virtual_columns)\n+    , need_headers_virtual_column(info.requested_virtual_columns.contains(\"_headers\"))\n+    , requested_virtual_columns(info.requested_virtual_columns.eraseNames({\"_headers\"}))\n     , block_for_format(info.format_header)\n     , uri_iterator(uri_iterator_)\n     , format(format_)\n@@ -431,11 +446,28 @@ Chunk StorageURLSource::generate()\n \n             progress(num_rows, chunk_size ? chunk_size : chunk.bytes());\n             VirtualColumnUtils::addRequestedFileLikeStorageVirtualsToChunk(\n-                chunk, requested_virtual_columns,\n+                chunk,\n+                requested_virtual_columns,\n                 {\n                     .path = curr_uri.getPath(),\n                     .size = current_file_size,\n-                }, getContext());\n+                },\n+                getContext());\n+            chassert(dynamic_cast<ReadWriteBufferFromHTTP *>(read_buf.get()));\n+            if (need_headers_virtual_column)\n+            {\n+                if (!http_response_headers_initialized)\n+                {\n+                    http_response_headers = dynamic_cast<ReadWriteBufferFromHTTP *>(read_buf.get())->getResponseHeaders();\n+                    http_response_headers_initialized = true;\n+                }\n+\n+                auto type = std::make_shared<DataTypeMap>(\n+                    std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),\n+                    std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()));\n+\n+                chunk.addColumn(type->createColumnConst(chunk.getNumRows(), http_response_headers)->convertToFullColumnIfConst());\n+            }\n             return chunk;\n         }\n \n@@ -446,6 +478,7 @@ Chunk StorageURLSource::generate()\n         reader.reset();\n         input_format.reset();\n         read_buf.reset();\n+        http_response_headers_initialized = false;\n         total_rows_in_file = 0;\n     }\n     return {};\ndiff --git a/src/Storages/StorageURL.h b/src/Storages/StorageURL.h\nindex 19daf8434314..6f1d544629ae 100644\n--- a/src/Storages/StorageURL.h\n+++ b/src/Storages/StorageURL.h\n@@ -220,6 +220,7 @@ class StorageURLSource : public SourceWithKeyCondition, WithContext\n     String name;\n     ColumnsDescription columns_description;\n     NamesAndTypesList requested_columns;\n+    bool need_headers_virtual_column;\n     NamesAndTypesList requested_virtual_columns;\n     Block block_for_format;\n     std::shared_ptr<IteratorWrapper> uri_iterator;\n@@ -233,6 +234,9 @@ class StorageURLSource : public SourceWithKeyCondition, WithContext\n \n     Poco::Net::HTTPBasicCredentials credentials;\n \n+    Map http_response_headers;\n+    bool http_response_headers_initialized = false;\n+\n     std::unique_ptr<ReadBuffer> read_buf;\n     std::shared_ptr<IInputFormat> input_format;\n     std::unique_ptr<QueryPipeline> pipeline;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03228_url_engine_response_headers.reference b/tests/queries/0_stateless/03228_url_engine_response_headers.reference\nnew file mode 100644\nindex 000000000000..f28952972b84\n--- /dev/null\n+++ b/tests/queries/0_stateless/03228_url_engine_response_headers.reference\n@@ -0,0 +1,2 @@\n+Map(LowCardinality(String), LowCardinality(String))\n+1\t1\ndiff --git a/tests/queries/0_stateless/03228_url_engine_response_headers.sql b/tests/queries/0_stateless/03228_url_engine_response_headers.sql\nnew file mode 100644\nindex 000000000000..ff8e47611f42\n--- /dev/null\n+++ b/tests/queries/0_stateless/03228_url_engine_response_headers.sql\n@@ -0,0 +1,7 @@\n+SELECT toTypeName(_headers)\n+FROM url('http://127.0.0.1:8123/?query=select+1&user=default', LineAsString, 's String');\n+\n+SELECT\n+    *,\n+    mapFromString(_headers['X-ClickHouse-Summary'])['read_rows']\n+FROM url('http://127.0.0.1:8123/?query=select+1&user=default', LineAsString, 's String');\n",
  "problem_statement": "Provide HTTP response headers in a virtual column in the response of the `url` table function/engine\n`SELECT _headers FROM url('https://example.test/')`\r\n\r\nThe type of `_headers` could be `Map(LowCardinality(String), LowCardinality(String))`\n",
  "hints_text": "",
  "created_at": "2024-08-25T07:50:41Z"
}