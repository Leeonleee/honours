{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11651,
  "instance_id": "ClickHouse__ClickHouse-11651",
  "issue_numbers": [
    "10749"
  ],
  "base_commit": "f53da4d36b8c3a214567c935caed478edce08363",
  "patch": "diff --git a/src/Core/SettingsCollectionImpl.h b/src/Core/SettingsCollectionImpl.h\nindex 8210b04e2dac..877567a7caf3 100644\n--- a/src/Core/SettingsCollectionImpl.h\n+++ b/src/Core/SettingsCollectionImpl.h\n@@ -7,6 +7,8 @@\n   */\n \n #include <Common/SettingsChanges.h>\n+#include <Common/FieldVisitors.h>\n+\n \n namespace DB\n {\n@@ -91,7 +93,16 @@ Field SettingsCollection<Derived>::const_reference::getValue() const\n template <class Derived>\n Field SettingsCollection<Derived>::valueToCorrespondingType(size_t index, const Field & value)\n {\n-    return members()[index].value_to_corresponding_type(value);\n+    try\n+    {\n+        return members()[index].value_to_corresponding_type(value);\n+    }\n+    catch (Exception & e)\n+    {\n+        e.addMessage(fmt::format(\"in attempt to set the value of setting to {}\",\n+                                 applyVisitor(FieldVisitorToString(), value)));\n+        throw;\n+    }\n }\n \n \ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 1431f3fd62c6..cb780443e03a 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -982,7 +982,16 @@ void Context::setSetting(const StringRef & name, const Field & value)\n \n void Context::applySettingChange(const SettingChange & change)\n {\n-    setSetting(change.name, change.value);\n+    try\n+    {\n+        setSetting(change.name, change.value);\n+    }\n+    catch (Exception & e)\n+    {\n+        e.addMessage(fmt::format(\"in attempt to set the value of setting '{}' to {}\",\n+                                 change.name, applyVisitor(FieldVisitorToString(), change.value)));\n+        throw;\n+    }\n }\n \n \ndiff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp\nindex 84d23f10a55e..e866af2f49be 100644\n--- a/src/Server/HTTPHandler.cpp\n+++ b/src/Server/HTTPHandler.cpp\n@@ -430,6 +430,10 @@ void HTTPHandler::processQuery(\n \n     auto param_could_be_skipped = [&] (const String & name)\n     {\n+        /// Empty parameter appears when URL like ?&a=b or a=b&&c=d. Just skip them for user's convenience.\n+        if (name.empty())\n+            return true;\n+\n         if (reserved_param_names.count(name))\n             return true;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01312_skip_empty_params.reference b/tests/queries/0_stateless/01312_skip_empty_params.reference\nnew file mode 100644\nindex 000000000000..e8183f05f5db\n--- /dev/null\n+++ b/tests/queries/0_stateless/01312_skip_empty_params.reference\n@@ -0,0 +1,3 @@\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/01312_skip_empty_params.sh b/tests/queries/0_stateless/01312_skip_empty_params.sh\nnew file mode 100755\nindex 000000000000..2e3541aee356\n--- /dev/null\n+++ b/tests/queries/0_stateless/01312_skip_empty_params.sh\n@@ -0,0 +1,10 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+set -e\n+\n+$CLICKHOUSE_CURL -sS \"$CLICKHOUSE_URL&query=select%201&log_queries=1\"\n+$CLICKHOUSE_CURL -sS \"$CLICKHOUSE_URL&&query=select%201&log_queries=1\"\n+$CLICKHOUSE_CURL -sS \"$CLICKHOUSE_URL&query=select%201&&&log_queries=1\"\n",
  "problem_statement": "Doubled ampersand in http lead to cryptic message 'Settings profile `` not found'\nCryptic error\r\n```\r\ncurl  \"http://localhost:8123?query=select%201&&log_queries=1\"\r\n\r\nCode: 180, e.displayText() = DB::Exception: Settings profile `` not found (version 20.4.1.3163 (official build))\r\n```\r\n\r\nFix - remove doubled ambersand in url:\r\n```\r\ncurl  \"http://localhost:8123?query=select%201&log_queries=1\"\r\n1\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2020-06-14T00:57:58Z",
  "modified_files": [
    "src/Core/SettingsCollectionImpl.h",
    "src/Interpreters/Context.cpp",
    "src/Server/HTTPHandler.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01312_skip_empty_params.reference",
    "b/tests/queries/0_stateless/01312_skip_empty_params.sh"
  ]
}