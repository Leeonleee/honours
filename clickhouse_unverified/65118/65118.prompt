You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
HTTP Interface returns 200 OK in case of server-side receive timeout while reading (parts of) the request body
**Describe what's wrong**

If ClickHouse encounters a server-side receive timeout on the client socket while reading (parts of) the request body, especially for large INSERTs, the HTTP interface responds with 200 OK, header `X-ClickHouse-Exception-Code: 209` and no response body (see reproducer below). I understand that this can happen when streaming query results or progress information via HTTP as described in the [docs](https://clickhouse.com/docs/en/interfaces/http#http_response_codes_caveats), but unfortunately it happens for ordinary INSERTs and [response buffering](https://clickhouse.com/docs/en/interfaces/http#response-buffering) as suggested mitigation does not prevent it.

In our case, this unfortunately led to data loss in the presence of network problems (temporary network partition from client to server), as our client library (see https://github.com/mailru/go-clickhouse/pull/182), and probably others as well, do not handle this case and interpret 200 OK in case of INSERTs always as success.

ClickHouse tries to write a proper exception response in [`formatExceptionForClient`](https://github.com/ClickHouse/ClickHouse/blob/master/src/Server/HTTPHandler.cpp#L1037-L1058), but in case of `Keep-Alive`, it also tries to drain the remaining request data as part of the exception handling. And if this fails (e.g. with another receive timeout, which is likely), the defined exception handling is aborted and ClickHouse returns 200 OK.

**Does it reproduce on the most recent release?**

Yes

**How to reproduce**

1. Start ClickHouse server (e.g. current master)
2. Send request with less data in request body than advertised via `Content-Length` header (to force receive timeout)
```
$ curl -v -H 'Content-Length: 1010' -X POST localhost:8123/?user=default -d "INSERT INTO test VALUES\r\n"
< HTTP/1.1 200 OK
< Date: Tue, 11 Jun 2024 11:39:13 GMT
< Connection: Keep-Alive
< Content-Type: text/plain; charset=UTF-8
< Transfer-Encoding: chunked
< X-ClickHouse-Exception-Code: 209
< Keep-Alive: timeout=30
< X-ClickHouse-Summary: {"read_rows":"0","read_bytes":"0","written_rows":"0","written_bytes":"0","total_rows_to_read":"0","result_rows":"0","result_bytes":"0","elapsed_ns":"60101112983"}
< 
* Connection #0 to host localhost left intact
```
Alternatively: Use e.g. iptables rules to simulate package drop from client to server.

**Expected behavior**

HTTP Interface responds with 5xx server error.

**Error message and/or stacktrace**

```
2024.06.11 13:39:13.338699 [ 1453995 ] {} <Debug> HTTP-Session: ee0bd211-242d-4ee3-8bc1-9f064e712975 Creating session context with user_id: 94309d50-4f52-5250-31bd-74fecac179db

2024.06.11 13:39:43.410210 [ 1453995 ] {879da76a-bb7b-4622-94d7-62808d985b84} <Error> DynamicQueryHandler: Code: 209. DB::NetException: Timeout exceeded while reading from socket (peer: [::1]:33288, local: [::1]:8123, 30000 ms). (SOCKET_TIMEOUT), Stack trace (when copying this message, always include the lines below):

0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000014389652
1. ./build/./src/Common/Exception.cpp:101: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000b432bc7
2. ./contrib/llvm-project/libcxx/include/string:1499: DB::NetException::NetException<String, String, long>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<long>::type>, String&&, String&&, long&&) @ 0x000000000b5768c1
3. ./build/./src/IO/ReadBufferFromPocoSocket.cpp:90: DB::ReadBufferFromPocoSocket::nextImpl() @ 0x000000000b575f29
4. ./src/IO/ReadBuffer.h:71: DB::LimitReadBuffer::nextImpl() @ 0x000000000b617d55
5. ./src/IO/ReadBuffer.h:71: DB::(anonymous namespace)::ReadBufferWrapper<std::nullptr_t>::nextImpl() @ 0x000000000f55ecec
6. ./src/IO/ReadBuffer.h:71: DB::(anonymous namespace)::ReadBufferWrapper<std::nullptr_t>::nextImpl() @ 0x000000000f55ecec
7. ./src/IO/ReadBuffer.h:71: DB::ConcatReadBuffer::nextImpl() @ 0x000000000ff61c46
8. ./src/IO/ReadBuffer.h:71: DB::LimitReadBuffer::nextImpl() @ 0x000000000b617d55
9. ./src/IO/ReadBuffer.h:71: DB::(anonymous namespace)::copyDataImpl(DB::ReadBuffer&, DB::WriteBuffer&, bool, unsigned long, std::atomic<int> const*, std::shared_ptr<DB::Throttler>) @ 0x000000000b4c2ece
10. ./build/./src/IO/copyData.cpp:68: DB::copyData(DB::ReadBuffer&, DB::WriteBuffer&) @ 0x000000000b4c2e44
11. ./build/./src/Interpreters/executeQuery.cpp:0: DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>) @ 0x0000000010d579af
12. ./contrib/llvm-project/libcxx/include/__functional/function.h:818: ? @ 0x0000000011e06ac3
13. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:290: DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000011e0abc5
14. ./base/poco/Foundation/include/Poco/AutoPtr.h:205: DB::HTTPServerConnection::run() @ 0x0000000011e89667
15. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x000000001429a567
16. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x000000001429aa4d
17. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x00000000143e61bb
18. ./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000143e37f2
19. ? @ 0x00007a40d435eded
20. ? @ 0x00007a40d43e20dc
 (version 24.6.1.1)

2024.06.11 13:40:13.442699 [ 1453995 ] {879da76a-bb7b-4622-94d7-62808d985b84} <Error> DynamicQueryHandler: Cannot send exception to client: Code: 209. DB::NetException: Timeout exceeded while reading from socket (peer: [::1]:33288, local: [::1]:8123, 30000 ms). (SOCKET_TIMEOUT), Stack trace (when copying this message, always include the lines below):

0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000014389652
1. ./build/./src/Common/Exception.cpp:101: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000b432bc7
2. ./contrib/llvm-project/libcxx/include/string:1499: DB::NetException::NetException<String, String, long>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<long>::type>, String&&, String&&, long&&) @ 0x000000000b5768c1
3. ./build/./src/IO/ReadBufferFromPocoSocket.cpp:90: DB::ReadBufferFromPocoSocket::nextImpl() @ 0x000000000b575f29
4. ./src/IO/ReadBuffer.h:71: DB::LimitReadBuffer::nextImpl() @ 0x000000000b617d55
5. ./src/IO/ReadBuffer.h:71: DB::HTTPHandler::formatExceptionForClient(int, DB::HTTPServerRequest&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x0000000011e09977
6. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:833: DB::HTTPHandler::trySendExceptionToClient(String const&, int, DB::HTTPServerRequest&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x0000000011e08f81
7. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:290: DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000011e0bdf2
8. ./base/poco/Foundation/include/Poco/AutoPtr.h:205: DB::HTTPServerConnection::run() @ 0x0000000011e89667
9. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x000000001429a567
10. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x000000001429aa4d
11. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x00000000143e61bb
12. ./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000143e37f2
13. ? @ 0x00007a40d435eded
14. ? @ 0x00007a40d43e20dc
 (version 24.6.1.1)

```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
