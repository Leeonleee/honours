{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 65118,
  "instance_id": "ClickHouse__ClickHouse-65118",
  "issue_numbers": [
    "65117"
  ],
  "base_commit": "80b2300d98067873b6e2ed3478a1ef249df41f79",
  "patch": "diff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp\nindex f6ca69813aea..bbb596d0a50f 100644\n--- a/src/Server/HTTPHandler.cpp\n+++ b/src/Server/HTTPHandler.cpp\n@@ -1046,12 +1046,21 @@ void HTTPHandler::formatExceptionForClient(int exception_code, HTTPServerRequest\n \n     /// FIXME: make sure that no one else is reading from the same stream at the moment.\n \n-    /// If HTTP method is POST and Keep-Alive is turned on, we should read the whole request body\n+    /// If HTTP method is POST and Keep-Alive is turned on, we should try to read the whole request body\n     /// to avoid reading part of the current request body in the next request.\n     if (request.getMethod() == Poco::Net::HTTPRequest::HTTP_POST && response.getKeepAlive()\n-        && exception_code != ErrorCodes::HTTP_LENGTH_REQUIRED && !request.getStream().eof())\n+        && exception_code != ErrorCodes::HTTP_LENGTH_REQUIRED)\n     {\n-        request.getStream().ignoreAll();\n+        try\n+        {\n+            if (!request.getStream().eof())\n+                request.getStream().ignoreAll();\n+        }\n+        catch (...)\n+        {\n+            tryLogCurrentException(log, \"Cannot read remaining request body during exception handling\");\n+            response.setKeepAlive(false);\n+        }\n     }\n \n     if (exception_code == ErrorCodes::REQUIRED_PASSWORD)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02403_big_http_chunk_size.python b/tests/queries/0_stateless/02403_big_http_chunk_size.python\nindex 3213b8cd387e..f74459489a5d 100644\n--- a/tests/queries/0_stateless/02403_big_http_chunk_size.python\n+++ b/tests/queries/0_stateless/02403_big_http_chunk_size.python\n@@ -16,7 +16,7 @@ def main():\n     sock.settimeout(60)\n     s = \"POST / HTTP/1.1\\r\\n\"\n     s += \"Host: %s\\r\\n\" % host\n-    s += \"Content-type: multipart/form-data\\r\\n\"\n+    s += \"Content-type: multipart/form-data; boundary=--b3f1zid8kqwy\\r\\n\"\n     s += \"Transfer-encoding: chunked\\r\\n\"\n     s += \"\\r\\n\"\n     s += \"ffffffffffffffff\"\ndiff --git a/tests/queries/0_stateless/02403_big_http_chunk_size.reference b/tests/queries/0_stateless/02403_big_http_chunk_size.reference\nindex d7970bd2eb1c..466ff9002e95 100644\n--- a/tests/queries/0_stateless/02403_big_http_chunk_size.reference\n+++ b/tests/queries/0_stateless/02403_big_http_chunk_size.reference\n@@ -1,3 +1,3 @@\n-HTTP/1.1 200 OK\n+HTTP/1.1 500 Internal Server Error\n encoding type chunked\n-error code 1000\n+error code 69\n",
  "problem_statement": "HTTP Interface returns 200 OK in case of server-side receive timeout while reading (parts of) the request body\n**Describe what's wrong**\r\n\r\nIf ClickHouse encounters a server-side receive timeout on the client socket while reading (parts of) the request body, especially for large INSERTs, the HTTP interface responds with 200 OK, header `X-ClickHouse-Exception-Code: 209` and no response body (see reproducer below). I understand that this can happen when streaming query results or progress information via HTTP as described in the [docs](https://clickhouse.com/docs/en/interfaces/http#http_response_codes_caveats), but unfortunately it happens for ordinary INSERTs and [response buffering](https://clickhouse.com/docs/en/interfaces/http#response-buffering) as suggested mitigation does not prevent it.\r\n\r\nIn our case, this unfortunately led to data loss in the presence of network problems (temporary network partition from client to server), as our client library (see https://github.com/mailru/go-clickhouse/pull/182), and probably others as well, do not handle this case and interpret 200 OK in case of INSERTs always as success.\r\n\r\nClickHouse tries to write a proper exception response in [`formatExceptionForClient`](https://github.com/ClickHouse/ClickHouse/blob/master/src/Server/HTTPHandler.cpp#L1037-L1058), but in case of `Keep-Alive`, it also tries to drain the remaining request data as part of the exception handling. And if this fails (e.g. with another receive timeout, which is likely), the defined exception handling is aborted and ClickHouse returns 200 OK.\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes\r\n\r\n**How to reproduce**\r\n\r\n1. Start ClickHouse server (e.g. current master)\r\n2. Send request with less data in request body than advertised via `Content-Length` header (to force receive timeout)\r\n```\r\n$ curl -v -H 'Content-Length: 1010' -X POST localhost:8123/?user=default -d \"INSERT INTO test VALUES\\r\\n\"\r\n< HTTP/1.1 200 OK\r\n< Date: Tue, 11 Jun 2024 11:39:13 GMT\r\n< Connection: Keep-Alive\r\n< Content-Type: text/plain; charset=UTF-8\r\n< Transfer-Encoding: chunked\r\n< X-ClickHouse-Exception-Code: 209\r\n< Keep-Alive: timeout=30\r\n< X-ClickHouse-Summary: {\"read_rows\":\"0\",\"read_bytes\":\"0\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"0\",\"result_rows\":\"0\",\"result_bytes\":\"0\",\"elapsed_ns\":\"60101112983\"}\r\n< \r\n* Connection #0 to host localhost left intact\r\n```\r\nAlternatively: Use e.g. iptables rules to simulate package drop from client to server.\r\n\r\n**Expected behavior**\r\n\r\nHTTP Interface responds with 5xx server error.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n2024.06.11 13:39:13.338699 [ 1453995 ] {} <Debug> HTTP-Session: ee0bd211-242d-4ee3-8bc1-9f064e712975 Creating session context with user_id: 94309d50-4f52-5250-31bd-74fecac179db\r\n\r\n2024.06.11 13:39:43.410210 [ 1453995 ] {879da76a-bb7b-4622-94d7-62808d985b84} <Error> DynamicQueryHandler: Code: 209. DB::NetException: Timeout exceeded while reading from socket (peer: [::1]:33288, local: [::1]:8123, 30000 ms). (SOCKET_TIMEOUT), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000014389652\r\n1. ./build/./src/Common/Exception.cpp:101: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000b432bc7\r\n2. ./contrib/llvm-project/libcxx/include/string:1499: DB::NetException::NetException<String, String, long>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<long>::type>, String&&, String&&, long&&) @ 0x000000000b5768c1\r\n3. ./build/./src/IO/ReadBufferFromPocoSocket.cpp:90: DB::ReadBufferFromPocoSocket::nextImpl() @ 0x000000000b575f29\r\n4. ./src/IO/ReadBuffer.h:71: DB::LimitReadBuffer::nextImpl() @ 0x000000000b617d55\r\n5. ./src/IO/ReadBuffer.h:71: DB::(anonymous namespace)::ReadBufferWrapper<std::nullptr_t>::nextImpl() @ 0x000000000f55ecec\r\n6. ./src/IO/ReadBuffer.h:71: DB::(anonymous namespace)::ReadBufferWrapper<std::nullptr_t>::nextImpl() @ 0x000000000f55ecec\r\n7. ./src/IO/ReadBuffer.h:71: DB::ConcatReadBuffer::nextImpl() @ 0x000000000ff61c46\r\n8. ./src/IO/ReadBuffer.h:71: DB::LimitReadBuffer::nextImpl() @ 0x000000000b617d55\r\n9. ./src/IO/ReadBuffer.h:71: DB::(anonymous namespace)::copyDataImpl(DB::ReadBuffer&, DB::WriteBuffer&, bool, unsigned long, std::atomic<int> const*, std::shared_ptr<DB::Throttler>) @ 0x000000000b4c2ece\r\n10. ./build/./src/IO/copyData.cpp:68: DB::copyData(DB::ReadBuffer&, DB::WriteBuffer&) @ 0x000000000b4c2e44\r\n11. ./build/./src/Interpreters/executeQuery.cpp:0: DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>) @ 0x0000000010d579af\r\n12. ./contrib/llvm-project/libcxx/include/__functional/function.h:818: ? @ 0x0000000011e06ac3\r\n13. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:290: DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000011e0abc5\r\n14. ./base/poco/Foundation/include/Poco/AutoPtr.h:205: DB::HTTPServerConnection::run() @ 0x0000000011e89667\r\n15. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x000000001429a567\r\n16. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x000000001429aa4d\r\n17. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x00000000143e61bb\r\n18. ./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000143e37f2\r\n19. ? @ 0x00007a40d435eded\r\n20. ? @ 0x00007a40d43e20dc\r\n (version 24.6.1.1)\r\n\r\n2024.06.11 13:40:13.442699 [ 1453995 ] {879da76a-bb7b-4622-94d7-62808d985b84} <Error> DynamicQueryHandler: Cannot send exception to client: Code: 209. DB::NetException: Timeout exceeded while reading from socket (peer: [::1]:33288, local: [::1]:8123, 30000 ms). (SOCKET_TIMEOUT), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000014389652\r\n1. ./build/./src/Common/Exception.cpp:101: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000b432bc7\r\n2. ./contrib/llvm-project/libcxx/include/string:1499: DB::NetException::NetException<String, String, long>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<long>::type>, String&&, String&&, long&&) @ 0x000000000b5768c1\r\n3. ./build/./src/IO/ReadBufferFromPocoSocket.cpp:90: DB::ReadBufferFromPocoSocket::nextImpl() @ 0x000000000b575f29\r\n4. ./src/IO/ReadBuffer.h:71: DB::LimitReadBuffer::nextImpl() @ 0x000000000b617d55\r\n5. ./src/IO/ReadBuffer.h:71: DB::HTTPHandler::formatExceptionForClient(int, DB::HTTPServerRequest&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x0000000011e09977\r\n6. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:833: DB::HTTPHandler::trySendExceptionToClient(String const&, int, DB::HTTPServerRequest&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x0000000011e08f81\r\n7. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:290: DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000011e0bdf2\r\n8. ./base/poco/Foundation/include/Poco/AutoPtr.h:205: DB::HTTPServerConnection::run() @ 0x0000000011e89667\r\n9. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x000000001429a567\r\n10. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x000000001429aa4d\r\n11. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x00000000143e61bb\r\n12. ./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000143e37f2\r\n13. ? @ 0x00007a40d435eded\r\n14. ? @ 0x00007a40d43e20dc\r\n (version 24.6.1.1)\r\n\r\n```\n",
  "hints_text": "",
  "created_at": "2024-06-11T16:46:13Z"
}