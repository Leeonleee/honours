{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19360,
  "instance_id": "ClickHouse__ClickHouse-19360",
  "issue_numbers": [
    "18197"
  ],
  "base_commit": "062f00aa5d94f500ff2ed55f45936f65a16c224c",
  "patch": "diff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp\nindex 7c472a27d883..ac2429334e40 100644\n--- a/src/Interpreters/HashJoin.cpp\n+++ b/src/Interpreters/HashJoin.cpp\n@@ -702,7 +702,7 @@ class AddedColumns\n         if (lazy_defaults_count)\n         {\n             for (size_t j = 0; j < right_indexes.size(); ++j)\n-                columns[j]->insertManyDefaults(lazy_defaults_count);\n+                JoinCommon::addDefaultValues(*columns[j], type_name[j].first, lazy_defaults_count);\n             lazy_defaults_count = 0;\n         }\n     }\ndiff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp\nindex 4839980eac7b..2cf1024648a4 100644\n--- a/src/Interpreters/MergeJoin.cpp\n+++ b/src/Interpreters/MergeJoin.cpp\n@@ -398,7 +398,8 @@ bool joinEquals(const Block & left_block, const Block & right_block, const Block\n }\n \n template <bool copy_left>\n-void joinInequalsLeft(const Block & left_block, MutableColumns & left_columns, MutableColumns & right_columns,\n+void joinInequalsLeft(const Block & left_block, MutableColumns & left_columns,\n+                      const Block & right_block, MutableColumns & right_columns,\n                       size_t start, size_t end)\n {\n     if (end <= start)\n@@ -408,9 +409,10 @@ void joinInequalsLeft(const Block & left_block, MutableColumns & left_columns, M\n     if constexpr (copy_left)\n         copyLeftRange(left_block, left_columns, start, rows_to_add);\n \n-    /// append nulls\n-    for (auto & column : right_columns)\n-        column->insertManyDefaults(rows_to_add);\n+    for (size_t i = 0; i < right_columns.size(); ++i)\n+    {\n+        JoinCommon::addDefaultValues(*right_columns[i], right_block.getByPosition(i).type, rows_to_add);\n+    }\n }\n \n }\n@@ -696,7 +698,7 @@ void MergeJoin::joinSortedBlock(Block & block, ExtraBlockPtr & not_processed)\n         }\n \n         left_cursor.nextN(left_key_tail);\n-        joinInequalsLeft<is_all>(block, left_columns, right_columns, left_cursor.position(), left_cursor.end());\n+        joinInequalsLeft<is_all>(block, left_columns, right_columns_to_add, right_columns, left_cursor.position(), left_cursor.end());\n         //left_cursor.nextN(left_cursor.end() - left_cursor.position());\n \n         changeLeftColumns(block, std::move(left_columns));\n@@ -773,7 +775,7 @@ bool MergeJoin::leftJoin(MergeJoinCursor & left_cursor, const Block & left_block\n \n         Range range = left_cursor.getNextEqualRange(right_cursor);\n \n-        joinInequalsLeft<is_all>(left_block, left_columns, right_columns, left_unequal_position, range.left_start);\n+        joinInequalsLeft<is_all>(left_block, left_columns, right_columns_to_add, right_columns, left_unequal_position, range.left_start);\n \n         if (range.empty())\n             break;\ndiff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp\nindex 17c289b151d3..a4c39a45efa4 100644\n--- a/src/Interpreters/join_common.cpp\n+++ b/src/Interpreters/join_common.cpp\n@@ -276,6 +276,13 @@ void joinTotals(const Block & totals, const Block & columns_to_add, const Names\n     }\n }\n \n+void addDefaultValues(IColumn & column, const DataTypePtr & type, size_t count)\n+{\n+    column.reserve(column.size() + count);\n+    for (size_t i = 0; i < count; ++i)\n+        type->insertDefaultInto(column);\n+}\n+\n }\n \n \n@@ -387,9 +394,14 @@ void NotJoined::correctLowcardAndNullability(MutableColumns & columns_right)\n \n void NotJoined::addLeftColumns(Block & block, size_t rows_added) const\n {\n-    /// @note it's possible to make ColumnConst here and materialize it later\n     for (size_t pos : column_indices_left)\n-        block.getByPosition(pos).column = block.getByPosition(pos).column->cloneResized(rows_added);\n+    {\n+        auto & col = block.getByPosition(pos);\n+\n+        auto mut_col = col.column->cloneEmpty();\n+        JoinCommon::addDefaultValues(*mut_col, col.type, rows_added);\n+        col.column = std::move(mut_col);\n+    }\n }\n \n void NotJoined::addRightColumns(Block & block, MutableColumns & columns_right) const\ndiff --git a/src/Interpreters/join_common.h b/src/Interpreters/join_common.h\nindex cfd727704a07..6f9f7dd1210d 100644\n--- a/src/Interpreters/join_common.h\n+++ b/src/Interpreters/join_common.h\n@@ -34,6 +34,8 @@ void checkTypesOfKeys(const Block & block_left, const Names & key_names_left, co\n void createMissedColumns(Block & block);\n void joinTotals(const Block & totals, const Block & columns_to_add, const Names & key_names_right, Block & block);\n \n+void addDefaultValues(IColumn & column, const DataTypePtr & type, size_t count);\n+\n }\n \n /// Creates result from right table data in RIGHT and FULL JOIN when keys are not present in left table.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01656_join_defaul_enum.reference b/tests/queries/0_stateless/01656_join_defaul_enum.reference\nnew file mode 100644\nindex 000000000000..f0fb4b8bf2b2\n--- /dev/null\n+++ b/tests/queries/0_stateless/01656_join_defaul_enum.reference\n@@ -0,0 +1,36 @@\n+1\tFirst\n+2\tSecond\n+3\tFirst\n+1\tFirst\n+2\tSecond\n+3\tFirst\n+4\tSecond\n+2\tSecond\n+4\tSecond\n+2\tSecond\n+4\tSecond\n+1\tFirst\n+2\tSecond\n+3\tFirst\n+1\tFirst\n+2\tSecond\n+3\tFirst\n+4\tSecond\n+1\tFirst\n+2\tSecond\n+3\tFirst\n+1\tFirst\n+2\tSecond\n+3\tFirst\n+4\tSecond\n+2\tSecond\n+4\tSecond\n+2\tSecond\n+4\tSecond\n+1\tFirst\n+2\tSecond\n+3\tFirst\n+1\tFirst\n+2\tSecond\n+3\tFirst\n+4\tSecond\ndiff --git a/tests/queries/0_stateless/01656_join_defaul_enum.sql b/tests/queries/0_stateless/01656_join_defaul_enum.sql\nnew file mode 100644\nindex 000000000000..8a0fc089b16f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01656_join_defaul_enum.sql\n@@ -0,0 +1,40 @@\n+DROP DATABASE IF EXISTS test_01656;\n+\n+CREATE DATABASE test_01656;\n+USE test_01656;\n+\n+DROP TABLE IF EXISTS table_key;\n+DROP TABLE IF EXISTS table_with_enum;\n+\n+CREATE TABLE table_key (keycol UInt16) ENGINE = MergeTree() ORDER BY (keycol) PARTITION BY tuple();\n+\n+CREATE TABLE table_with_enum (keycol UInt16, enum_col Enum8('First' = 1,'Second' = 2))\n+    ENGINE = MergeTree() ORDER BY (keycol) PARTITION BY tuple();\n+\n+INSERT INTO table_key VALUES (1), (2), (3);\n+INSERT INTO table_with_enum VALUES (2, 'Second'), (4, 'Second');\n+\n+SET join_algorithm = 'hash';\n+\n+SELECT keycol, enum_col FROM table_key LEFT JOIN table_with_enum USING (keycol) ORDER BY keycol;\n+SELECT keycol, enum_col FROM table_key FULL JOIN table_with_enum USING (keycol) ORDER BY keycol;\n+SELECT keycol, enum_col FROM table_key RIGHT JOIN table_with_enum USING (keycol) ORDER BY keycol;\n+\n+SELECT keycol, enum_col FROM table_with_enum LEFT JOIN table_key USING (keycol) ORDER BY keycol;\n+SELECT keycol, enum_col FROM table_with_enum RIGHT JOIN table_key USING (keycol) ORDER BY keycol;\n+SELECT keycol, enum_col FROM table_with_enum FULL JOIN table_key USING (keycol) ORDER BY keycol;\n+\n+SET join_algorithm = 'partial_merge';\n+\n+SELECT keycol, enum_col FROM table_key LEFT JOIN table_with_enum USING (keycol) ORDER BY keycol;\n+SELECT keycol, enum_col FROM table_key FULL JOIN table_with_enum USING (keycol) ORDER BY keycol;\n+SELECT keycol, enum_col FROM table_key RIGHT JOIN table_with_enum USING (keycol) ORDER BY keycol;\n+\n+SELECT keycol, enum_col FROM table_with_enum LEFT JOIN table_key USING (keycol) ORDER BY keycol;\n+SELECT keycol, enum_col FROM table_with_enum RIGHT JOIN table_key USING (keycol) ORDER BY keycol;\n+SELECT keycol, enum_col FROM table_with_enum FULL JOIN table_key USING (keycol) ORDER BY keycol;\n+\n+DROP TABLE IF EXISTS table_key;\n+DROP TABLE IF EXISTS table_with_enum;\n+\n+DROP DATABASE IF EXISTS test_01656;\n",
  "problem_statement": "Enum Column in LEFT JOIN leads to Exception\nWhen doing a left join on a table, which contains an Enum column, selecting this column will lead to an error when setting 'join_use_nulls' is disabled. Clickhouse tries to use default value for enum which does not exist.\r\n\r\n**How to reproduce**\r\nTested with clh: 20.12.3.3\r\n\r\n```\r\nCREATE TABLE join_test_main (\r\n    keycol UInt16,\r\n    value_main String\r\n) engine=MergeTree() order by (keycol) partition by tuple();\r\n\r\nCREATE TABLE join_test_join (\r\n    keycol UInt16,\r\n    value_join_enum Enum8('First' = 1,'Second' = 2),\r\n    value_join_string String\r\n) engine=MergeTree() order by (keycol) partition by tuple();\r\n\r\nINSERT INTO join_test_main\r\nVALUES\r\n(1, 'First'),(2,'Second'), (3, 'Third');\r\n\r\nINSERT INTO join_test_join\r\nVALUES\r\n(2,'Second', 'Second');\r\n\r\n\r\n```\r\n\r\nTestquery and exception:\r\n\r\n```\r\nSELECT join_test_main.keycol, join_test_join.value_join_enum\r\nFROM join_test_main\r\nLEFT JOIN join_test_join USING(keycol);\r\n\r\nError on processing query: SELECT join_test_main.keycol, join_test_join.value_join_enum\r\nFROM join_test_main\r\nLEFT JOIN join_test_join USING(keycol);\r\nCode: 36, e.displayText() = DB::Exception: Unexpected value 0 for type Enum8('First' = 1, 'Second' = 2), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::DataTypeEnum<signed char>::findByValue(signed char const&) const @ 0x94abcd5 in /usr/bin/clickhouse\r\n1. DB::DataTypeEnum<signed char>::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0xd75d470 in /usr/bin/clickhouse\r\n2. DB::PrettyBlockOutputFormat::calculateWidths(DB::Block const&, DB::Chunk const&, std::__1::vector<DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>, std::__1::allocator<DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul> > >&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>&) @ 0xe6de3f6 in /usr/bin/clickhouse\r\n3. DB::PrettyCompactBlockOutputFormat::writeChunk(DB::Chunk const&, DB::IOutputFormat::PortKind) @ 0xe6e2b19 in /usr/bin/clickhouse\r\n4. DB::IOutputFormat::write(DB::Block const&) @ 0xe64de63 in /usr/bin/clickhouse\r\n5. DB::MaterializingBlockOutputStream::write(DB::Block const&) @ 0xe5d4de2 in /usr/bin/clickhouse\r\n6. DB::Client::onData(DB::Block&) @ 0x7da4cb2 in /usr/bin/clickhouse\r\n7. DB::Client::receiveAndProcessPacket(bool) @ 0x7da4896 in /usr/bin/clickhouse\r\n8. DB::Client::receiveResult() @ 0x7da6d4c in /usr/bin/clickhouse\r\n9. DB::Client::processOrdinaryQuery() @ 0x7d9aef1 in /usr/bin/clickhouse\r\n10. DB::Client::processParsedSingleQuery() @ 0x7d99822 in /usr/bin/clickhouse\r\n11. DB::Client::processMultiQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x7d97e2c in /usr/bin/clickhouse\r\n12. DB::Client::processQueryText(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x7d8d2df in /usr/bin/clickhouse\r\n13. DB::Client::mainImpl() @ 0x7d8907d in /usr/bin/clickhouse\r\n14. DB::Client::main(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x7d84c62 in /usr/bin/clickhouse\r\n15. Poco::Util::Application::run() @ 0x10d8ad33 in /usr/bin/clickhouse\r\n16. mainEntryClickHouseClient(int, char**) @ 0x7d7adbd in /usr/bin/clickhouse\r\n17. main @ 0x7ce0cbd in /usr/bin/clickhouse\r\n18. __libc_start_main @ 0x270b3 in /lib/x86_64-linux-gnu/libc-2.31.so\r\n19. _start @ 0x7c9102e in /usr/bin/clickhouse\r\n\r\n```\r\n**Expected behavior**\r\nTo be discussed:\r\n - Always null even without explicit setting\r\n - Always an Enum which has empty String as element 0\r\n - Syntax Error before execution, to not allow Enum fields without 0\r\n - Always the first element of an enum (would not recommend)\r\n\r\n\n",
  "hints_text": "Code: 49. DB::Exception: Unexpected value 0 for type Enum8('First' = 1, 'Second' = 2)\r\n\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 19.13.7 revision 54425.\r\n\r\n\r\nWA:  Enum8(**''=0,** 'First' = 1,'Second' = 2),\n> Always the first element of an enum (would not recommend)\r\n\r\nActually it is expected to be implemented this way - get the default value of the data type, which is the first element for Enum.\nHashJoin.cpp, line 705\r\n```\r\n columns[j]->insertManyDefaults(lazy_defaults_count);\r\n```\r\n\r\nshould use the method of IDataType, not IColumn.",
  "created_at": "2021-01-21T13:47:48Z",
  "modified_files": [
    "src/Interpreters/HashJoin.cpp",
    "src/Interpreters/MergeJoin.cpp",
    "src/Interpreters/join_common.cpp",
    "src/Interpreters/join_common.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01656_join_defaul_enum.reference",
    "b/tests/queries/0_stateless/01656_join_defaul_enum.sql"
  ]
}