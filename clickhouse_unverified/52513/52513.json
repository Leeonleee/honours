{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52513,
  "instance_id": "ClickHouse__ClickHouse-52513",
  "issue_numbers": [
    "52511"
  ],
  "base_commit": "b225f9c34bf6064d246ede33f98e3c573fcda142",
  "patch": "diff --git a/src/Functions/transform.cpp b/src/Functions/transform.cpp\nindex 1fc0e3adf96c..e03701327b13 100644\n--- a/src/Functions/transform.cpp\n+++ b/src/Functions/transform.cpp\n@@ -156,7 +156,7 @@ namespace\n         {\n             initialize(arguments, result_type);\n \n-            const auto * in = arguments.front().column.get();\n+            const auto * in = arguments[0].column.get();\n \n             if (isColumnConst(*in))\n                 return executeConst(arguments, result_type, input_rows_count);\n@@ -165,6 +165,10 @@ namespace\n             if (!cache.default_column && arguments.size() == 4)\n                 default_non_const = castColumn(arguments[3], result_type);\n \n+            ColumnPtr in_casted = arguments[0].column;\n+            if (arguments.size() == 3)\n+                in_casted = castColumn(arguments[0], result_type);\n+\n             auto column_result = result_type->createColumn();\n             if (cache.is_empty)\n             {\n@@ -174,30 +178,30 @@ namespace\n             }\n             else if (cache.table_num_to_idx)\n             {\n-                if (!executeNum<ColumnVector<UInt8>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnVector<UInt16>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnVector<UInt32>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnVector<UInt64>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnVector<Int8>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnVector<Int16>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnVector<Int32>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnVector<Int64>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnVector<Float32>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnVector<Float64>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnDecimal<Decimal32>>(in, *column_result, default_non_const)\n-                    && !executeNum<ColumnDecimal<Decimal64>>(in, *column_result, default_non_const))\n+                if (!executeNum<ColumnVector<UInt8>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnVector<UInt16>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnVector<UInt32>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnVector<UInt64>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnVector<Int8>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnVector<Int16>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnVector<Int32>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnVector<Int64>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnVector<Float32>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnVector<Float64>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnDecimal<Decimal32>>(in, *column_result, default_non_const, *in_casted)\n+                    && !executeNum<ColumnDecimal<Decimal64>>(in, *column_result, default_non_const, *in_casted))\n                 {\n                     throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Illegal column {} of first argument of function {}\", in->getName(), getName());\n                 }\n             }\n             else if (cache.table_string_to_idx)\n             {\n-                if (!executeString(in, *column_result, default_non_const))\n-                    executeContiguous(in, *column_result, default_non_const);\n+                if (!executeString(in, *column_result, default_non_const, *in_casted))\n+                    executeContiguous(in, *column_result, default_non_const, *in_casted);\n             }\n             else if (cache.table_anything_to_idx)\n             {\n-                executeAnything(in, *column_result, default_non_const);\n+                executeAnything(in, *column_result, default_non_const, *in_casted);\n             }\n             else\n                 throw Exception(ErrorCodes::LOGICAL_ERROR, \"State of the function `transform` is not initialized\");\n@@ -218,7 +222,7 @@ namespace\n             return impl->execute(args, result_type, input_rows_count);\n         }\n \n-        void executeAnything(const IColumn * in, IColumn & column_result, const ColumnPtr default_non_const) const\n+        void executeAnything(const IColumn * in, IColumn & column_result, const ColumnPtr default_non_const, const IColumn & in_casted) const\n         {\n             const size_t size = in->size();\n             const auto & table = *cache.table_anything_to_idx;\n@@ -236,11 +240,11 @@ namespace\n                 else if (default_non_const)\n                     column_result.insertFrom(*default_non_const, i);\n                 else\n-                    column_result.insertFrom(*in, i);\n+                    column_result.insertFrom(in_casted, i);\n             }\n         }\n \n-        void executeContiguous(const IColumn * in, IColumn & column_result, const ColumnPtr default_non_const) const\n+        void executeContiguous(const IColumn * in, IColumn & column_result, const ColumnPtr default_non_const, const IColumn & in_casted) const\n         {\n             const size_t size = in->size();\n             const auto & table = *cache.table_string_to_idx;\n@@ -255,12 +259,12 @@ namespace\n                 else if (default_non_const)\n                     column_result.insertFrom(*default_non_const, i);\n                 else\n-                    column_result.insertFrom(*in, i);\n+                    column_result.insertFrom(in_casted, i);\n             }\n         }\n \n         template <typename T>\n-        bool executeNum(const IColumn * in_untyped, IColumn & column_result, const ColumnPtr default_non_const) const\n+        bool executeNum(const IColumn * in_untyped, IColumn & column_result, const ColumnPtr default_non_const, const IColumn & in_casted) const\n         {\n             const auto * const in = checkAndGetColumn<T>(in_untyped);\n             if (!in)\n@@ -297,7 +301,7 @@ namespace\n                     else if (default_non_const)\n                         column_result.insertFrom(*default_non_const, i);\n                     else\n-                        column_result.insertFrom(*in, i);\n+                        column_result.insertFrom(in_casted, i);\n                 }\n             }\n             return true;\n@@ -451,7 +455,7 @@ namespace\n             }\n         }\n \n-        bool executeString(const IColumn * in_untyped, IColumn & column_result, const ColumnPtr default_non_const) const\n+        bool executeString(const IColumn * in_untyped, IColumn & column_result, const ColumnPtr default_non_const, const IColumn & in_casted) const\n         {\n             const auto * const in = checkAndGetColumn<ColumnString>(in_untyped);\n             if (!in)\n@@ -488,7 +492,7 @@ namespace\n                     else if (default_non_const)\n                         column_result.insertFrom(*default_non_const, 0);\n                     else\n-                        column_result.insertFrom(*in, i);\n+                        column_result.insertFrom(in_casted, i);\n                 }\n             }\n             return true;\n@@ -654,13 +658,13 @@ namespace\n             std::unique_ptr<StringToIdx> table_string_to_idx;\n             std::unique_ptr<AnythingToIdx> table_anything_to_idx;\n \n-            bool is_empty = false;\n-\n             ColumnPtr from_column;\n             ColumnPtr to_column;\n             ColumnPtr default_column;\n \n-            std::atomic<bool> initialized{false};\n+            bool is_empty = false;\n+            bool initialized = false;\n+\n             std::mutex mutex;\n         };\n \n@@ -693,13 +697,12 @@ namespace\n         /// Can be called from different threads. It works only on the first call.\n         void initialize(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type) const\n         {\n+            std::lock_guard lock(cache.mutex);\n             if (cache.initialized)\n                 return;\n \n             const DataTypePtr & from_type = arguments[0].type;\n \n-            std::lock_guard lock(cache.mutex);\n-\n             if (from_type->onlyNull())\n             {\n                 cache.is_empty = true;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02832_transform_fixed_string_no_default.reference b/tests/queries/0_stateless/02832_transform_fixed_string_no_default.reference\nnew file mode 100644\nindex 000000000000..ea545c90391a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02832_transform_fixed_string_no_default.reference\n@@ -0,0 +1,3 @@\n+test\n+\n+\\N\ndiff --git a/tests/queries/0_stateless/02832_transform_fixed_string_no_default.sql b/tests/queries/0_stateless/02832_transform_fixed_string_no_default.sql\nnew file mode 100644\nindex 000000000000..0e58c716c9fa\n--- /dev/null\n+++ b/tests/queries/0_stateless/02832_transform_fixed_string_no_default.sql\n@@ -0,0 +1,3 @@\n+SELECT transform(name, ['a', 'b'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);\n+SELECT transform(name, ['test', 'b'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);\n+SELECT transform(name, ['a', 'test'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);\n",
  "problem_statement": "Abort in `transform`\n```\r\nclickhouse-local --query \"SELECT transform(name, ['a', 'b'], ['', NULL]) AS name FROM (SELECT 'test'::Nullable(FixedString(4)) AS name);\"\r\n```\n",
  "hints_text": "",
  "created_at": "2023-07-24T06:22:28Z"
}