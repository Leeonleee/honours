{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23961,
  "instance_id": "ClickHouse__ClickHouse-23961",
  "issue_numbers": [
    "23960"
  ],
  "base_commit": "680860aae7a745d8f30680da4bc6c329544bf651",
  "patch": "diff --git a/src/Functions/array/arrayDifference.cpp b/src/Functions/array/arrayDifference.cpp\nindex b4b30079a4ea..45ff117bfdf1 100644\n--- a/src/Functions/array/arrayDifference.cpp\n+++ b/src/Functions/array/arrayDifference.cpp\n@@ -13,6 +13,7 @@ namespace ErrorCodes\n {\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n     extern const int ILLEGAL_COLUMN;\n+    extern const int DECIMAL_OVERFLOW;\n }\n \n /** arrayDifference() - returns an array with the difference between all pairs of neighboring elements.\n@@ -63,7 +64,23 @@ struct ArrayDifferenceImpl\n             else\n             {\n                 Element curr = src[pos];\n-                dst[pos] = curr - prev;\n+\n+                if constexpr (IsDecimalNumber<Element>)\n+                {\n+                    using ResultNativeType = typename Result::NativeType;\n+\n+                    ResultNativeType result_value;\n+                    bool overflow = common::subOverflow(static_cast<ResultNativeType>(curr.value), static_cast<ResultNativeType>(prev), result_value);\n+                    if (overflow)\n+                        throw Exception(ErrorCodes::DECIMAL_OVERFLOW, \"Decimal math overflow\");\n+\n+                    dst[pos] = Result(result_value);\n+                }\n+                else\n+                {\n+                    dst[pos] = curr - prev;\n+                }\n+\n                 prev = curr;\n             }\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01851_array_difference_decimal_overflow_ubsan.reference b/tests/queries/0_stateless/01851_array_difference_decimal_overflow_ubsan.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01851_array_difference_decimal_overflow_ubsan.sql b/tests/queries/0_stateless/01851_array_difference_decimal_overflow_ubsan.sql\nnew file mode 100644\nindex 000000000000..ebf2efda4f13\n--- /dev/null\n+++ b/tests/queries/0_stateless/01851_array_difference_decimal_overflow_ubsan.sql\n@@ -0,0 +1,1 @@\n+SELECT arrayDifference([toDecimal32(100.0000991821289, 0), -2147483647]) AS x; --{serverError 407}\n",
  "problem_statement": "UBSan: Function arrayDifference decimal overflow\nhttps://clickhouse-test-reports.s3.yandex.net/8482/5b28f7cf439f00d8f8601ba121dd929fcfe63589/fuzzer_ubsan/server.log\r\n```\r\nSELECT arrayDifference([toDecimal32(100.0000991821289, 0), -2147483647]) AS x\r\n```\r\nResult:\r\n```\r\n../src/Core/Types.h:182:113: runtime error: signed integer overflow: -2147483647 - 100 cannot be represented in type 'int'\r\n    #0 0x18301e6e in bool DB::ArrayDifferenceImpl::executeType<DB::Decimal<int>, DB::Decimal<int> >(COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, DB::ColumnArray const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&) (/workspace/clickhouse+0x18301e6e)\r\n    #1 0x182fd7f4 in DB::ArrayDifferenceImpl::execute(DB::ColumnArray const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>) (/workspace/clickhouse+0x182fd7f4)\r\n    #2 0x182fb5a2 in DB::FunctionArrayMapped<DB::ArrayDifferenceImpl, DB::NameArrayDifference>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/workspace/clickhouse+0x182fb5a2)\r\n    #3 0x12d0a8f4 in DB::IFunction::executeImplDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/workspace/clickhouse+0x12d0a8f4)\r\n    #4 0x12d09f56 in DB::DefaultExecutable::executeDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/workspace/clickhouse+0x12d09f56)\r\n    #5 0x137af05a in DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x137af05a)\r\n    #6 0x137b006d in DB::ExecutableFunctionAdaptor::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x137b006d)\r\n    #7 0x1aa44925 in DB::ActionsDAG::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<DB::ActionsDAG::Node const*, std::__1::allocator<DB::ActionsDAG::Node const*> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) obj-x86_64-linux-gnu/../src/Interpreters/ActionsDAG.cpp:210:35\r\n```\n",
  "hints_text": "",
  "created_at": "2021-05-08T14:34:45Z",
  "modified_files": [
    "src/Functions/array/arrayDifference.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01851_array_difference_decimal_overflow_ubsan.sql"
  ]
}