{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 59619,
  "instance_id": "ClickHouse__ClickHouse-59619",
  "issue_numbers": [
    "51169"
  ],
  "base_commit": "764c5436b5e76d82cbb6ae0d7cd5c831061d136c",
  "patch": "diff --git a/base/poco/Foundation/include/Poco/Message.h b/base/poco/Foundation/include/Poco/Message.h\nindex 282c7fb5fd1d..9068e56a93c7 100644\n--- a/base/poco/Foundation/include/Poco/Message.h\n+++ b/base/poco/Foundation/include/Poco/Message.h\n@@ -66,9 +66,11 @@ class Foundation_API Message\n     /// The thread and process ids are set.\n \n     Message(\n-        const std::string & source, const std::string & text, Priority prio, const char * file, int line, std::string_view fmt_str = {});\n+        const std::string & source, const std::string & text, Priority prio, const char * file, int line,\n+        std::string_view fmt_str = {}, const std::vector<std::string> & fmt_str_args = {});\n     Message(\n-        std::string && source, std::string && text, Priority prio, const char * file, int line, std::string_view fmt_str);\n+        std::string && source, std::string && text, Priority prio, const char * file, int line,\n+        std::string_view fmt_str, std::vector<std::string> && fmt_str_args);\n     /// Creates a Message with the given source, text, priority,\n     /// source file path and line.\n     ///\n@@ -161,6 +163,9 @@ class Foundation_API Message\n     std::string_view getFormatString() const;\n     void setFormatString(std::string_view fmt_str);\n \n+    const std::vector<std::string> & getFormatStringArgs() const;\n+    void setFormatStringArgs(const std::vector<std::string> & fmt_str_args);\n+\n     int getSourceLine() const;\n     /// Returns the source file line of the statement\n     /// generating the log message. May be 0\n@@ -210,6 +215,7 @@ class Foundation_API Message\n     int _line;\n     StringMap * _pMap;\n     std::string_view _fmt_str;\n+    std::vector<std::string> _fmt_str_args;\n };\n \n \ndiff --git a/base/poco/Foundation/src/Message.cpp b/base/poco/Foundation/src/Message.cpp\nindex 54118cc0fc54..9e9835ac5852 100644\n--- a/base/poco/Foundation/src/Message.cpp\n+++ b/base/poco/Foundation/src/Message.cpp\n@@ -46,7 +46,9 @@ Message::Message(const std::string& source, const std::string& text, Priority pr\n }\n \n \n-Message::Message(const std::string& source, const std::string& text, Priority prio, const char* file, int line, std::string_view fmt_str):\n+Message::Message(\n+        const std::string& source, const std::string& text, Priority prio, const char* file, int line,\n+        std::string_view fmt_str, const std::vector<std::string>& fmt_str_args):\n \t_source(source), \n \t_text(text), \n \t_prio(prio), \n@@ -54,13 +56,16 @@ Message::Message(const std::string& source, const std::string& text, Priority pr\n \t_file(file),\n \t_line(line),\n \t_pMap(0),\n-    _fmt_str(fmt_str)\n+\t_fmt_str(fmt_str),\n+\t_fmt_str_args(fmt_str_args)\n {\n \tinit();\n }\n \n \n-Message::Message(std::string && source, std::string && text, Priority prio, const char * file, int line, std::string_view fmt_str):\n+Message::Message(\n+        std::string && source, std::string && text, Priority prio, const char * file, int line,\n+        std::string_view fmt_str, std::vector<std::string> && fmt_str_args):\n     _source(std::move(source)),\n     _text(std::move(text)),\n     _prio(prio),\n@@ -68,7 +73,8 @@ Message::Message(std::string && source, std::string && text, Priority prio, cons\n     _file(file),\n     _line(line),\n     _pMap(0),\n-    _fmt_str(fmt_str)\n+    _fmt_str(fmt_str),\n+    _fmt_str_args(std::move(fmt_str_args))\n {\n     init();\n }\n@@ -83,7 +89,8 @@ Message::Message(const Message& msg):\n \t_pid(msg._pid),\n \t_file(msg._file),\n \t_line(msg._line),\n-    _fmt_str(msg._fmt_str)\n+\t_fmt_str(msg._fmt_str),\n+\t_fmt_str_args(msg._fmt_str_args)\n {\n \tif (msg._pMap)\n \t\t_pMap = new StringMap(*msg._pMap);\n@@ -102,7 +109,8 @@ Message::Message(const Message& msg, const std::string& text):\n \t_pid(msg._pid),\n \t_file(msg._file),\n \t_line(msg._line),\n-    _fmt_str(msg._fmt_str)\n+\t_fmt_str(msg._fmt_str),\n+\t_fmt_str_args(msg._fmt_str_args)\n {\n \tif (msg._pMap)\n \t\t_pMap = new StringMap(*msg._pMap);\n@@ -154,6 +162,7 @@ void Message::swap(Message& msg)\n \tswap(_line, msg._line);\n \tswap(_pMap, msg._pMap);\n \tswap(_fmt_str, msg._fmt_str);\n+\tswap(_fmt_str_args, msg._fmt_str_args);\n }\n \n \n@@ -227,6 +236,17 @@ void Message::setFormatString(std::string_view fmt_str)\n }\n \n \n+const std::vector<std::string>& Message::getFormatStringArgs() const\n+{\n+    return _fmt_str_args;\n+}\n+\n+void Message::setFormatStringArgs(const std::vector<std::string>& fmt_str_args)\n+{\n+    _fmt_str_args = fmt_str_args;\n+}\n+\n+\n bool Message::has(const std::string& param) const\n {\n \treturn _pMap && (_pMap->find(param) != _pMap->end());\ndiff --git a/docs/en/operations/system-tables/text_log.md b/docs/en/operations/system-tables/text_log.md\nindex 0c39499e1904..2f0e1c6bf509 100644\n--- a/docs/en/operations/system-tables/text_log.md\n+++ b/docs/en/operations/system-tables/text_log.md\n@@ -30,6 +30,16 @@ Columns:\n - `source_file` (LowCardinality(String)) \u2014 Source file from which the logging was done.\n - `source_line` (UInt64) \u2014 Source line from which the logging was done.\n - `message_format_string` (LowCardinality(String)) \u2014 A format string that was used to format the message.\n+- `value1` (String) - Argument 1 that was used to format the message.\n+- `value2` (String) - Argument 2 that was used to format the message.\n+- `value3` (String) - Argument 3 that was used to format the message.\n+- `value4` (String) - Argument 4 that was used to format the message.\n+- `value5` (String) - Argument 5 that was used to format the message.\n+- `value6` (String) - Argument 6 that was used to format the message.\n+- `value7` (String) - Argument 7 that was used to format the message.\n+- `value8` (String) - Argument 8 that was used to format the message.\n+- `value9` (String) - Argument 9 that was used to format the message.\n+- `value10` (String) - Argument 10 that was used to format the message.\n \n **Example**\n \n@@ -55,4 +65,14 @@ revision:                54440\n source_file:             /ClickHouse/src/Interpreters/DNSCacheUpdater.cpp; void DB::DNSCacheUpdater::start()\n source_line:             45\n message_format_string:   Update period {} seconds\n+value1:                  15\n+value2:                  \n+value3:                  \n+value4:                  \n+value5:                  \n+value6:                  \n+value7:                  \n+value8:                  \n+value9:                  \n+value10:                  \n ```\ndiff --git a/docs/ru/operations/system-tables/text_log.md b/docs/ru/operations/system-tables/text_log.md\nindex 59ae804d85f1..a6ab6f7d268c 100644\n--- a/docs/ru/operations/system-tables/text_log.md\n+++ b/docs/ru/operations/system-tables/text_log.md\n@@ -29,6 +29,16 @@ slug: /ru/operations/system-tables/text_log\n -   `source_file` (LowCardinality(String)) \u2014 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0444\u0430\u0439\u043b, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b\u0430 \u0441\u0434\u0435\u043b\u0430\u043d\u0430 \u0437\u0430\u043f\u0438\u0441\u044c.\n -   `source_line` (UInt64) \u2014 \u0438\u0441\u0445\u043e\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b\u0430 \u0441\u0434\u0435\u043b\u0430\u043d\u0430 \u0437\u0430\u043f\u0438\u0441\u044c.\n -   `message_format_string` (LowCardinality(String)) \u2014 \u0444\u043e\u0440\u043c\u0430\u0442\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b\u043e \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.\n+-   `value1` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 1, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n+-   `value2` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 2, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n+-   `value3` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 3, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n+-   `value4` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 4, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n+-   `value5` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 5, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n+-   `value6` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 6, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n+-   `value7` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 7, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n+-   `value8` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 8, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n+-   `value9` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 9, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n+-   `value10` (String) - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 10, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n \n **\u041f\u0440\u0438\u043c\u0435\u0440**\n \n@@ -53,4 +63,14 @@ revision:                54440\n source_file:             /ClickHouse/src/Interpreters/DNSCacheUpdater.cpp; void DB::DNSCacheUpdater::start()\n source_line:             45\n message_format_string:   Update period {} seconds\n+value1:                  15\n+value2:                  \n+value3:                  \n+value4:                  \n+value5:                  \n+value6:                  \n+value7:                  \n+value8:                  \n+value9:                  \n+value10:                  \n ```\ndiff --git a/src/Access/AccessControl.cpp b/src/Access/AccessControl.cpp\nindex da047d1cb1d7..aca0c4d2d537 100644\n--- a/src/Access/AccessControl.cpp\n+++ b/src/Access/AccessControl.cpp\n@@ -607,7 +607,8 @@ AuthResult AccessControl::authenticate(const Credentials & credentials, const Po\n         /// We use the same message for all authentication failures because we don't want to give away any unnecessary information for security reasons,\n         /// only the log will show the exact reason.\n         throw Exception(PreformattedMessage{message.str(),\n-                                            \"{}: Authentication failed: password is incorrect, or there is no user with such name.{}\"},\n+                                            \"{}: Authentication failed: password is incorrect, or there is no user with such name.{}\",\n+                                            std::vector<std::string>{credentials.getUserName()}},\n                         ErrorCodes::AUTHENTICATION_FAILED);\n     }\n }\ndiff --git a/src/Common/Exception.cpp b/src/Common/Exception.cpp\nindex 5d936bbb88c9..1f4b0aea8f2a 100644\n--- a/src/Common/Exception.cpp\n+++ b/src/Common/Exception.cpp\n@@ -391,6 +391,7 @@ PreformattedMessage getCurrentExceptionMessageAndPattern(bool with_stacktrace, b\n {\n     WriteBufferFromOwnString stream;\n     std::string_view message_format_string;\n+    std::vector<std::string> message_format_string_args;\n \n     try\n     {\n@@ -402,6 +403,7 @@ PreformattedMessage getCurrentExceptionMessageAndPattern(bool with_stacktrace, b\n                << (with_extra_info ? getExtraExceptionInfo(e) : \"\")\n                << \" (version \" << VERSION_STRING << VERSION_OFFICIAL << \")\";\n         message_format_string = e.tryGetMessageFormatString();\n+        message_format_string_args = e.getMessageFormatStringArgs();\n     }\n     catch (const Poco::Exception & e)\n     {\n@@ -462,7 +464,7 @@ PreformattedMessage getCurrentExceptionMessageAndPattern(bool with_stacktrace, b\n         catch (...) {} // NOLINT(bugprone-empty-catch)\n     }\n \n-    return PreformattedMessage{stream.str(), message_format_string};\n+    return PreformattedMessage{stream.str(), message_format_string, message_format_string_args};\n }\n \n \n@@ -581,7 +583,7 @@ PreformattedMessage getExceptionMessageAndPattern(const Exception & e, bool with\n     }\n     catch (...) {} // NOLINT(bugprone-empty-catch)\n \n-    return PreformattedMessage{stream.str(), e.tryGetMessageFormatString()};\n+    return PreformattedMessage{stream.str(), e.tryGetMessageFormatString(), e.getMessageFormatStringArgs()};\n }\n \n std::string getExceptionMessage(std::exception_ptr e, bool with_stacktrace)\ndiff --git a/src/Common/Exception.h b/src/Common/Exception.h\nindex 1b4dabec113e..73c50debf33e 100644\n--- a/src/Common/Exception.h\n+++ b/src/Common/Exception.h\n@@ -13,6 +13,7 @@\n #include <memory>\n #include <vector>\n \n+#include <fmt/core.h>\n #include <fmt/format.h>\n #include <Poco/Exception.h>\n \n@@ -59,6 +60,7 @@ class Exception : public Poco::Exception\n             std::terminate();\n         capture_thread_frame_pointers = thread_frame_pointers;\n         message_format_string = msg.format_string;\n+        message_format_string_args = msg.format_string_args;\n     }\n \n     Exception(PreformattedMessage && msg, int code): Exception(std::move(msg.text), code)\n@@ -67,6 +69,7 @@ class Exception : public Poco::Exception\n             std::terminate();\n         capture_thread_frame_pointers = thread_frame_pointers;\n         message_format_string = msg.format_string;\n+        message_format_string_args = msg.format_string_args;\n     }\n \n     /// Collect call stacks of all previous jobs' schedulings leading to this thread job's execution\n@@ -107,12 +110,7 @@ class Exception : public Poco::Exception\n \n     // Format message with fmt::format, like the logging functions.\n     template <typename... Args>\n-    Exception(int code, FormatStringHelper<Args...> fmt, Args &&... args)\n-        : Exception(fmt::format(fmt.fmt_str, std::forward<Args>(args)...), code)\n-    {\n-        capture_thread_frame_pointers = thread_frame_pointers;\n-        message_format_string = fmt.message_format_string;\n-    }\n+    Exception(int code, FormatStringHelper<Args...> fmt, Args &&... args) : Exception(fmt.format(std::forward<Args>(args)...), code) {}\n \n     struct CreateFromPocoTag {};\n     struct CreateFromSTDTag {};\n@@ -152,6 +150,8 @@ class Exception : public Poco::Exception\n \n     std::string_view tryGetMessageFormatString() const { return message_format_string; }\n \n+    std::vector<std::string> getMessageFormatStringArgs() const { return message_format_string_args; }\n+\n private:\n #ifndef STD_EXCEPTION_HAS_STACK_TRACE\n     StackTrace trace;\n@@ -162,6 +162,7 @@ class Exception : public Poco::Exception\n \n protected:\n     std::string_view message_format_string;\n+    std::vector<std::string> message_format_string_args;\n     /// Local copy of static per-thread thread_frame_pointers, should be mutable to be unpoisoned on printout\n     mutable std::vector<StackTrace::FramePointers> capture_thread_frame_pointers;\n };\n@@ -193,26 +194,29 @@ class ErrnoException : public Exception\n     // Format message with fmt::format, like the logging functions.\n     template <typename... Args>\n     ErrnoException(int code, FormatStringHelper<Args...> fmt, Args &&... args)\n-        : Exception(fmt::format(fmt.fmt_str, std::forward<Args>(args)...), code), saved_errno(errno)\n+        : Exception(fmt.format(std::forward<Args>(args)...), code), saved_errno(errno)\n+    {\n+        addMessage(\", {}\", errnoToString(saved_errno));\n+    }\n+\n+    template <typename... Args>\n+    ErrnoException(int code, int with_errno, FormatStringHelper<Args...> fmt, Args &&... args)\n+        : Exception(fmt.format(std::forward<Args>(args)...), code), saved_errno(with_errno)\n     {\n-        capture_thread_frame_pointers = thread_frame_pointers;\n-        message_format_string = fmt.message_format_string;\n         addMessage(\", {}\", errnoToString(saved_errno));\n     }\n \n     template <typename... Args>\n     [[noreturn]] static void throwWithErrno(int code, int with_errno, FormatStringHelper<Args...> fmt, Args &&... args)\n     {\n-        auto e = ErrnoException(fmt::format(fmt.fmt_str, std::forward<Args>(args)...), code, with_errno);\n-        e.message_format_string = fmt.message_format_string;\n+        auto e = ErrnoException(code, with_errno, std::move(fmt), std::forward<Args>(args)...);\n         throw e; /// NOLINT\n     }\n \n     template <typename... Args>\n     [[noreturn]] static void throwFromPath(int code, const std::string & path, FormatStringHelper<Args...> fmt, Args &&... args)\n     {\n-        auto e = ErrnoException(fmt::format(fmt.fmt_str, std::forward<Args>(args)...), code, errno);\n-        e.message_format_string = fmt.message_format_string;\n+        auto e = ErrnoException(code, errno, std::move(fmt), std::forward<Args>(args)...);\n         e.path = path;\n         throw e; /// NOLINT\n     }\n@@ -221,8 +225,7 @@ class ErrnoException : public Exception\n     [[noreturn]] static void\n     throwFromPathWithErrno(int code, const std::string & path, int with_errno, FormatStringHelper<Args...> fmt, Args &&... args)\n     {\n-        auto e = ErrnoException(fmt::format(fmt.fmt_str, std::forward<Args>(args)...), code, with_errno);\n-        e.message_format_string = fmt.message_format_string;\n+        auto e = ErrnoException(code, with_errno, std::move(fmt), std::forward<Args>(args)...);\n         e.path = path;\n         throw e; /// NOLINT\n     }\ndiff --git a/src/Common/LoggingFormatStringHelpers.h b/src/Common/LoggingFormatStringHelpers.h\nindex 678948424dad..3e64c8dfb8f4 100644\n--- a/src/Common/LoggingFormatStringHelpers.h\n+++ b/src/Common/LoggingFormatStringHelpers.h\n@@ -2,8 +2,11 @@\n \n #include <base/defines.h>\n #include <base/types.h>\n+#include <fmt/args.h>\n+#include <fmt/core.h>\n #include <fmt/format.h>\n #include <mutex>\n+#include <type_traits>\n #include <unordered_map>\n #include <Poco/Logger.h>\n #include <Poco/Message.h>\n@@ -14,6 +17,10 @@ struct PreformattedMessage;\n consteval void formatStringCheckArgsNumImpl(std::string_view str, size_t nargs);\n template <typename T> constexpr std::string_view tryGetStaticFormatString(T && x);\n \n+[[maybe_unused]] inline void tryGetFormattedArgs(std::vector<std::string>&) {};\n+template <typename T, typename... Ts> [[maybe_unused]] inline void tryGetFormattedArgs(std::vector<std::string>&, T &&, Ts && ...);\n+template <typename... Args> inline std::string tryGetArgsAndFormat(std::vector<std::string>&, fmt::format_string<Args...>, Args && ...);\n+\n /// Extract format string from a string literal and constructs consteval fmt::format_string\n template <typename... Args>\n struct FormatStringHelperImpl\n@@ -39,6 +46,7 @@ struct PreformattedMessage\n {\n     std::string text;\n     std::string_view format_string;\n+    std::vector<std::string> format_string_args;\n \n     template <typename... Args>\n     static PreformattedMessage create(FormatStringHelper<Args...> fmt, Args &&... args);\n@@ -47,22 +55,26 @@ struct PreformattedMessage\n     operator std::string () && { return std::move(text); } /// NOLINT\n     operator fmt::format_string<> () const { UNREACHABLE(); } /// NOLINT\n \n-    void apply(std::string & out_text, std::string_view & out_format_string) const &\n+    void apply(std::string & out_text, std::string_view & out_format_string, std::vector<std::string> & out_format_string_args) const &\n     {\n         out_text = text;\n         out_format_string = format_string;\n+        out_format_string_args = format_string_args;\n     }\n-    void apply(std::string & out_text, std::string_view & out_format_string) &&\n+    void apply(std::string & out_text, std::string_view & out_format_string, std::vector<std::string> & out_format_string_args) &&\n     {\n         out_text = std::move(text);\n         out_format_string = format_string;\n+        out_format_string_args = std::move(format_string_args);\n     }\n };\n \n template <typename... Args>\n PreformattedMessage FormatStringHelperImpl<Args...>::format(Args && ...args) const\n {\n-    return PreformattedMessage{fmt::format(fmt_str, std::forward<Args>(args)...), message_format_string};\n+    std::vector<std::string> out_format_string_args;\n+    std::string msg_text = tryGetArgsAndFormat(out_format_string_args, fmt_str, std::forward<Args>(args)...);\n+    return PreformattedMessage{msg_text, message_format_string, out_format_string_args};\n }\n \n template <typename... Args>\n@@ -113,12 +125,23 @@ template <typename T> constexpr std::string_view tryGetStaticFormatString(T && x\n     }\n }\n \n+template <typename T, typename... Ts> void tryGetFormattedArgs(std::vector<std::string>& out, T && x, Ts && ...rest)\n+{\n+    if constexpr (std::is_base_of_v<fmt::detail::view, std::decay_t<T>>)\n+        out.push_back(fmt::format(\"{}\", std::remove_reference_t<T>(x)));\n+    else\n+        out.push_back(fmt::format(\"{}\", std::forward<T>(x)));\n+\n+    tryGetFormattedArgs(out, std::forward<Ts>(rest)...);\n+}\n+\n /// Constexpr ifs are not like ifdefs, and compiler still checks that unneeded code can be compiled\n /// This template is useful to avoid compilation failures when condition of some \"constexpr if\" is false\n template<bool enable> struct ConstexprIfsAreNotIfdefs\n {\n     template <typename T> constexpr static std::string_view getStaticFormatString(T &&) { return {}; }\n     template <typename T> static PreformattedMessage getPreformatted(T &&) { return {}; }\n+    template <typename... Args> static std::string getArgsAndFormat(std::vector<std::string>&, fmt::format_string<Args...>, Args &&...) { return {}; }\n };\n \n template<> struct ConstexprIfsAreNotIfdefs<true>\n@@ -133,8 +156,19 @@ template<> struct ConstexprIfsAreNotIfdefs<true>\n     }\n \n     template <typename T> static T && getPreformatted(T && x) { return std::forward<T>(x); }\n+\n+    template <typename... Args> static std::string getArgsAndFormat(std::vector<std::string>& out, fmt::format_string<Args...> fmt_str, Args && ...args)\n+    {\n+        return tryGetArgsAndFormat(out, std::move(fmt_str), std::forward<Args>(args)...);\n+    }\n };\n \n+template <typename... Args> inline std::string tryGetArgsAndFormat(std::vector<std::string>& out, fmt::format_string<Args...> fmt_str, Args && ...args)\n+{\n+    tryGetFormattedArgs(out, args...);\n+    return fmt::format(fmt_str, std::forward<Args>(args)...);\n+}\n+\n template <typename... Ts> constexpr size_t numArgs(Ts &&...) { return sizeof...(Ts); }\n template <typename T, typename... Ts> constexpr auto firstArg(T && x, Ts &&...) { return std::forward<T>(x); }\n /// For implicit conversion of fmt::basic_runtime<> to char* for std::string ctor\ndiff --git a/src/Common/logger_useful.h b/src/Common/logger_useful.h\nindex 9d6ebaddcc6a..eaae7e69dbc7 100644\n--- a/src/Common/logger_useful.h\n+++ b/src/Common/logger_useful.h\n@@ -2,6 +2,7 @@\n \n /// Macros for convenient usage of Poco logger.\n #include <unistd.h>\n+#include <fmt/args.h>\n #include <fmt/format.h>\n #include <Poco/Logger.h>\n #include <Poco/Message.h>\n@@ -80,6 +81,7 @@ namespace impl\n                                                                                                                     \\\n         std::string_view _format_string;                                                                            \\\n         std::string _formatted_message;                                                                             \\\n+        std::vector<std::string> _format_string_args;                                                               \\\n                                                                                                                     \\\n         if constexpr (LogTypeInfo::is_static)                                                                       \\\n         {                                                                                                           \\\n@@ -91,17 +93,17 @@ namespace impl\n         if constexpr (is_preformatted_message)                                                                      \\\n         {                                                                                                           \\\n             static_assert(_nargs == 1 || !is_preformatted_message);                                                 \\\n-            ConstexprIfsAreNotIfdefs<is_preformatted_message>::getPreformatted(LOG_IMPL_FIRST_ARG(__VA_ARGS__)).apply(_formatted_message, _format_string);  \\\n+            ConstexprIfsAreNotIfdefs<is_preformatted_message>::getPreformatted(LOG_IMPL_FIRST_ARG(__VA_ARGS__)).apply(_formatted_message, _format_string, _format_string_args);  \\\n         }                                                                                                           \\\n         else                                                                                                        \\\n         {                                                                                                           \\\n-             _formatted_message = _nargs == 1 ? firstArg(__VA_ARGS__) : fmt::format(__VA_ARGS__);                   \\\n+             _formatted_message = _nargs == 1 ? firstArg(__VA_ARGS__) : ConstexprIfsAreNotIfdefs<!is_preformatted_message>::getArgsAndFormat(_format_string_args, __VA_ARGS__); \\\n         }                                                                                                           \\\n                                                                                                                     \\\n         std::string _file_function = __FILE__ \"; \";                                                                 \\\n         _file_function += __PRETTY_FUNCTION__;                                                                      \\\n         Poco::Message _poco_message(_logger->name(), std::move(_formatted_message),                                 \\\n-            (PRIORITY), _file_function.c_str(), __LINE__, _format_string);                                          \\\n+            (PRIORITY), _file_function.c_str(), __LINE__, _format_string, _format_string_args);                     \\\n         _channel->log(_poco_message);                                                                               \\\n     }                                                                                                               \\\n     catch (const Poco::Exception & logger_exception)                                                                \\\ndiff --git a/src/Functions/FunctionsConversion.cpp b/src/Functions/FunctionsConversion.cpp\nindex 5e072d406adf..a16ce136b9a7 100644\n--- a/src/Functions/FunctionsConversion.cpp\n+++ b/src/Functions/FunctionsConversion.cpp\n@@ -794,7 +794,7 @@ inline bool tryParseImpl<DataTypeIPv6>(DataTypeIPv6::FieldType & x, ReadBuffer &\n     if (isNativeNumber(result_type) && !(result_type.getName() == \"IPv4\" || result_type.getName() == \"IPv6\"))\n         message_buf << \". Note: there are to\" << result_type.getName() << \"OrZero and to\" << result_type.getName() << \"OrNull functions, which returns zero/NULL instead of throwing exception.\";\n \n-    throw Exception(PreformattedMessage{message_buf.str(), \"Cannot parse string {} as {}: syntax error {}\"}, ErrorCodes::CANNOT_PARSE_TEXT);\n+    throw Exception(PreformattedMessage{message_buf.str(), \"Cannot parse string {} as {}: syntax error {}\", {String(read_buffer.buffer().begin(), read_buffer.buffer().size()), result_type.getName()}}, ErrorCodes::CANNOT_PARSE_TEXT);\n }\n \n \ndiff --git a/src/Interpreters/QueryLog.h b/src/Interpreters/QueryLog.h\nindex f9ed8a2fb9eb..5072d2201608 100644\n--- a/src/Interpreters/QueryLog.h\n+++ b/src/Interpreters/QueryLog.h\n@@ -86,6 +86,7 @@ struct QueryLogElement\n     String exception;\n     String stack_trace;\n     std::string_view exception_format_string{};\n+    std::vector<std::string> exception_format_string_args{};\n \n     ClientInfo client_info;\n \ndiff --git a/src/Interpreters/TextLog.cpp b/src/Interpreters/TextLog.cpp\nindex d6971bbac543..3c3eff600e48 100644\n--- a/src/Interpreters/TextLog.cpp\n+++ b/src/Interpreters/TextLog.cpp\n@@ -53,6 +53,16 @@ ColumnsDescription TextLogElement::getColumnsDescription()\n         {\"source_line\", std::make_shared<DataTypeUInt64>(), \"Source line from which the logging was done.\"},\n \n         {\"message_format_string\", std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()), \"A format string that was used to format the message.\"},\n+        {\"value1\", std::make_shared<DataTypeString>(), \"Argument 1 that was used to format the message.\"},\n+        {\"value2\", std::make_shared<DataTypeString>(), \"Argument 2 that was used to format the message.\"},\n+        {\"value3\", std::make_shared<DataTypeString>(), \"Argument 3 that was used to format the message.\"},\n+        {\"value4\", std::make_shared<DataTypeString>(), \"Argument 4 that was used to format the message.\"},\n+        {\"value5\", std::make_shared<DataTypeString>(), \"Argument 5 that was used to format the message.\"},\n+        {\"value6\", std::make_shared<DataTypeString>(), \"Argument 6 that was used to format the message.\"},\n+        {\"value7\", std::make_shared<DataTypeString>(), \"Argument 7 that was used to format the message.\"},\n+        {\"value8\", std::make_shared<DataTypeString>(), \"Argument 8 that was used to format the message.\"},\n+        {\"value9\", std::make_shared<DataTypeString>(), \"Argument 9 that was used to format the message.\"},\n+        {\"value10\", std::make_shared<DataTypeString>(), \"Argument 10 that was used to format the message.\"},\n     };\n }\n \n@@ -79,6 +89,16 @@ void TextLogElement::appendToBlock(MutableColumns & columns) const\n     columns[i++]->insert(source_line);\n \n     columns[i++]->insert(message_format_string);\n+    columns[i++]->insert(value1);\n+    columns[i++]->insert(value2);\n+    columns[i++]->insert(value3);\n+    columns[i++]->insert(value4);\n+    columns[i++]->insert(value5);\n+    columns[i++]->insert(value6);\n+    columns[i++]->insert(value7);\n+    columns[i++]->insert(value8);\n+    columns[i++]->insert(value9);\n+    columns[i++]->insert(value10);\n }\n \n TextLog::TextLog(ContextPtr context_,\ndiff --git a/src/Interpreters/TextLog.h b/src/Interpreters/TextLog.h\nindex 90fc4ef36a05..78153b9f81e9 100644\n--- a/src/Interpreters/TextLog.h\n+++ b/src/Interpreters/TextLog.h\n@@ -29,6 +29,16 @@ struct TextLogElement\n     UInt64 source_line{};\n \n     std::string_view message_format_string;\n+    String value1;\n+    String value2;\n+    String value3;\n+    String value4;\n+    String value5;\n+    String value6;\n+    String value7;\n+    String value8;\n+    String value9;\n+    String value10;\n \n     static std::string name() { return \"TextLog\"; }\n     static ColumnsDescription getColumnsDescription();\ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex 914b3c3037d1..50c28fbc8b2f 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -1249,7 +1249,7 @@ bool TreeRewriterResult::collectUsedColumns(const ASTPtr & query, bool is_select\n \n         if (no_throw)\n             return false;\n-        throw Exception(PreformattedMessage{ss.str(), format_string}, ErrorCodes::UNKNOWN_IDENTIFIER);\n+        throw Exception(PreformattedMessage{ss.str(), format_string, std::vector<std::string>{}}, ErrorCodes::UNKNOWN_IDENTIFIER);\n     }\n \n     required_source_columns.swap(source_columns);\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex db8753000d8e..09c8c459f0af 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -200,6 +200,7 @@ static void logException(ContextPtr context, QueryLogElement & elem, bool log_er\n     /// so we pass elem.exception_format_string as format string instead.\n     PreformattedMessage message;\n     message.format_string = elem.exception_format_string;\n+    message.format_string_args = elem.exception_format_string_args;\n \n     if (elem.stack_trace.empty() || !log_error)\n         message.text = fmt::format(\"{} (from {}){} (in query: {})\", elem.exception,\n@@ -504,6 +505,7 @@ void logQueryException(\n     auto exception_message = getCurrentExceptionMessageAndPattern(/* with_stacktrace */ false);\n     elem.exception = std::move(exception_message.text);\n     elem.exception_format_string = exception_message.format_string;\n+    elem.exception_format_string_args = exception_message.format_string_args;\n \n     QueryStatusPtr process_list_elem = context->getProcessListElement();\n \n@@ -597,6 +599,7 @@ void logExceptionBeforeStart(\n     auto exception_message = getCurrentExceptionMessageAndPattern(/* with_stacktrace */ false);\n     elem.exception = std::move(exception_message.text);\n     elem.exception_format_string = exception_message.format_string;\n+    elem.exception_format_string_args = exception_message.format_string_args;\n \n     elem.client_info = context->getClientInfo();\n \ndiff --git a/src/Loggers/OwnSplitChannel.cpp b/src/Loggers/OwnSplitChannel.cpp\nindex 68fad2fbaf6a..fee33781c273 100644\n--- a/src/Loggers/OwnSplitChannel.cpp\n+++ b/src/Loggers/OwnSplitChannel.cpp\n@@ -131,6 +131,21 @@ void OwnSplitChannel::logSplit(const Poco::Message & msg)\n         elem.source_line = msg.getSourceLine();\n         elem.message_format_string = msg.getFormatString();\n \n+#define SET_VALUE_IF_EXISTS(INDEX) if ((INDEX) <= msg.getFormatStringArgs().size()) (elem.value##INDEX) = msg.getFormatStringArgs()[(INDEX) - 1]\n+\n+        SET_VALUE_IF_EXISTS(1);\n+        SET_VALUE_IF_EXISTS(2);\n+        SET_VALUE_IF_EXISTS(3);\n+        SET_VALUE_IF_EXISTS(4);\n+        SET_VALUE_IF_EXISTS(5);\n+        SET_VALUE_IF_EXISTS(6);\n+        SET_VALUE_IF_EXISTS(7);\n+        SET_VALUE_IF_EXISTS(8);\n+        SET_VALUE_IF_EXISTS(9);\n+        SET_VALUE_IF_EXISTS(10);\n+\n+#undef SET_VALUE_IF_EXISTS\n+\n         std::shared_ptr<SystemLogQueue<TextLogElement>> text_log_locked{};\n         text_log_locked = text_log.lock();\n         if (text_log_locked)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03096_text_log_format_string_args_not_empty.reference b/tests/queries/0_stateless/03096_text_log_format_string_args_not_empty.reference\nnew file mode 100644\nindex 000000000000..e8183f05f5db\n--- /dev/null\n+++ b/tests/queries/0_stateless/03096_text_log_format_string_args_not_empty.reference\n@@ -0,0 +1,3 @@\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/03096_text_log_format_string_args_not_empty.sql b/tests/queries/0_stateless/03096_text_log_format_string_args_not_empty.sql\nnew file mode 100644\nindex 000000000000..0f4a217a4aef\n--- /dev/null\n+++ b/tests/queries/0_stateless/03096_text_log_format_string_args_not_empty.sql\n@@ -0,0 +1,13 @@\n+set allow_experimental_analyzer = true;\n+\n+select count; -- { serverError 47 }\n+\n+select conut(); -- { serverError 46 }\n+\n+system flush logs;\n+\n+select count() > 0 from system.text_log where message_format_string = 'Peak memory usage{}: {}.' and value1 is not null and value2 like '% MiB';\n+\n+select count() > 0 from system.text_log where level = 'Error' and message_format_string = 'Unknown {}{} identifier \\'{}\\' in scope {}{}' and value1 = 'expression' and value3 = 'count' and value4 = 'SELECT count';\n+\n+select count() > 0 from system.text_log where level = 'Error' and message_format_string = 'Function with name \\'{}\\' does not exists. In scope {}{}' and value1 = 'conut' and value2 = 'SELECT conut()' and value3 ilike '%\\'count\\'%';\n",
  "problem_statement": "Add the values of substitutions in log messages as separate columns into `system.text_log`\n**Use case**\r\n\r\nAnalytics.\r\n\r\n**Proposed solution**\r\n\r\nAdd columns `value1 String`, `value2 String`, ... `value10 String` containing the values of substitutions.\r\n\r\n**See also**\r\n\r\nSee also the `message_format_string` column, and how it is generated.\n",
  "hints_text": "",
  "created_at": "2024-02-05T22:59:33Z",
  "modified_files": [
    "base/poco/Foundation/include/Poco/Message.h",
    "base/poco/Foundation/src/Message.cpp",
    "docs/en/operations/system-tables/text_log.md",
    "docs/ru/operations/system-tables/text_log.md",
    "src/Access/AccessControl.cpp",
    "src/Common/Exception.cpp",
    "src/Common/Exception.h",
    "src/Common/LoggingFormatStringHelpers.h",
    "src/Common/logger_useful.h",
    "src/Functions/FunctionsConversion.cpp",
    "src/Interpreters/QueryLog.h",
    "src/Interpreters/TextLog.cpp",
    "src/Interpreters/TextLog.h",
    "src/Interpreters/TreeRewriter.cpp",
    "src/Interpreters/executeQuery.cpp",
    "src/Loggers/OwnSplitChannel.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03096_text_log_format_string_args_not_empty.reference",
    "b/tests/queries/0_stateless/03096_text_log_format_string_args_not_empty.sql"
  ]
}