{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8213,
  "instance_id": "ClickHouse__ClickHouse-8213",
  "issue_numbers": [
    "8172"
  ],
  "base_commit": "93a4db1e2d11c392d8f80cddb13738f23c5b1eb3",
  "patch": "diff --git a/contrib/ssl b/contrib/ssl\nindex ba8de796195f..17c23a0296a1 160000\n--- a/contrib/ssl\n+++ b/contrib/ssl\n@@ -1,1 +1,1 @@\n-Subproject commit ba8de796195ff9d8bb0249ce289b83226b848b77\n+Subproject commit 17c23a0296a19288136c2fee9077dc9423b79bc7\ndiff --git a/dbms/src/Parsers/ParserTablePropertiesQuery.cpp b/dbms/src/Parsers/ParserTablePropertiesQuery.cpp\nindex e119ef5d07b7..2ee85a3330d5 100644\n--- a/dbms/src/Parsers/ParserTablePropertiesQuery.cpp\n+++ b/dbms/src/Parsers/ParserTablePropertiesQuery.cpp\n@@ -41,6 +41,8 @@ bool ParserTablePropertiesQuery::parseImpl(Pos & pos, ASTPtr & node, Expected &\n             query = std::make_shared<ASTExistsTableQuery>();\n         else if (s_dictionary.checkWithoutMoving(pos, expected))\n             query = std::make_shared<ASTExistsDictionaryQuery>();\n+        else\n+            query = std::make_shared<ASTExistsTableQuery>();\n     }\n     else if (s_show.ignore(pos, expected))\n     {\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01048_exists_query.reference b/dbms/tests/queries/0_stateless/01048_exists_query.reference\nnew file mode 100644\nindex 000000000000..aa6264c9a0a0\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01048_exists_query.reference\n@@ -0,0 +1,24 @@\n+0\n+0\n+0\n+0\n+0\n+0\n+1\n+1\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+1\n+1\n+1\n+0\n+0\n+0\n+0\n+0\n+0\ndiff --git a/dbms/tests/queries/0_stateless/01048_exists_query.sql b/dbms/tests/queries/0_stateless/01048_exists_query.sql\nnew file mode 100644\nindex 000000000000..6228b57fe3fd\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01048_exists_query.sql\n@@ -0,0 +1,44 @@\n+EXISTS database_for_dict.t;\n+EXISTS TABLE database_for_dict.t;\n+EXISTS DICTIONARY database_for_dict.t;\n+\n+DROP DATABASE IF EXISTS database_for_dict;\n+CREATE DATABASE database_for_dict Engine = Ordinary;\n+\n+DROP TABLE IF EXISTS database_for_dict.t;\n+EXISTS database_for_dict.t;\n+EXISTS TABLE database_for_dict.t;\n+EXISTS DICTIONARY database_for_dict.t;\n+\n+CREATE TABLE database_for_dict.t (x UInt8) ENGINE = Memory;\n+EXISTS database_for_dict.t;\n+EXISTS TABLE database_for_dict.t;\n+EXISTS DICTIONARY database_for_dict.t;\n+\n+DROP TABLE database_for_dict.t;\n+EXISTS database_for_dict.t;\n+EXISTS TABLE database_for_dict.t;\n+EXISTS DICTIONARY database_for_dict.t;\n+\n+DROP DICTIONARY IF EXISTS t;\n+CREATE TEMPORARY TABLE t (x UInt8);\n+EXISTS t; -- Does not work for temporary tables. Maybe have to fix.\n+EXISTS TABLE t;\n+EXISTS DICTIONARY t;\n+\n+CREATE DICTIONARY database_for_dict.t (k UInt64, v String) PRIMARY KEY k LAYOUT(FLAT()) SOURCE(HTTP(URL 'http://example.test/' FORMAT TSV)) LIFETIME(1000);\n+EXISTS database_for_dict.t;\n+EXISTS TABLE database_for_dict.t; -- Dictionaries are tables as well. But not all tables are dictionaries.\n+EXISTS DICTIONARY database_for_dict.t;\n+\n+-- But dictionary-tables cannot be dropped as usual tables.\n+DROP TABLE database_for_dict.t; -- { serverError 60 }\n+DROP DICTIONARY database_for_dict.t;\n+EXISTS database_for_dict.t;\n+EXISTS TABLE database_for_dict.t;\n+EXISTS DICTIONARY database_for_dict.t;\n+\n+DROP DATABASE database_for_dict;\n+EXISTS database_for_dict.t;\n+EXISTS TABLE database_for_dict.t;\n+EXISTS DICTIONARY database_for_dict.t;\n",
  "problem_statement": "ClickHouse process crashes because of seg fault in case of invalid query from JDBC driver\nClickHouse Server: **19.17.5.18 rev. 54428**\r\nJDBC Driver: **0.2.2**\r\nQuery: `exists some.some`\r\n\r\nExecuting the query above using JDBC driver causes ClickHouse to crash.\r\n\r\nStack:\r\n```\r\n2019.12.12 05:22:38.970810 [ 50 ] {} <Fatal> BaseDaemon: ########################################\r\n2019.12.12 05:22:38.970988 [ 50 ] {} <Fatal> BaseDaemon: (version 19.17.5.18 (official build)) (from thread 34) Received signal Segmentation fault (11).\r\n2019.12.12 05:22:38.971029 [ 50 ] {} <Fatal> BaseDaemon: Address: 0x60 Access: read. Address not mapped to object.\r\n2019.12.12 05:22:38.971082 [ 50 ] {} <Fatal> BaseDaemon: Stack trace: 0x55fa682854b1 0x55fa661a7f02 0x55fa661ff6b5 0x55fa661e04df 0x55fa661f7f0a 0x55fa661e04df 0x55fa661f784f 0x55fa661e04df 0x55fa6620f8ab 0x55fa66211ea2 0x55fa6599e9a3 0x55fa659a0768 0x55fa6254851e 0x55fa6254a899 0x55fa66441179 0x55fa6643d6f0 0x55fa6643de0d 0x55fa67b13f81 0x55fa67b11d2c 0x55fa68287ec0 0x7f62a73bb6db 0x7f62a6cd888f\r\n2019.12.12 05:22:38.971211 [ 50 ] {} <Fatal> BaseDaemon: 3. 0x55fa682854b1 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.971445 [ 50 ] {} <Fatal> BaseDaemon: 4. 0x55fa661a7f02 DB::tryGetIdentifierNameInto(DB::IAST const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.971616 [ 50 ] {} <Fatal> BaseDaemon: 5. 0x55fa661ff6b5 DB::ParserTablePropertiesQuery::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.971668 [ 50 ] {} <Fatal> BaseDaemon: 6. 0x55fa661e04df DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.971776 [ 50 ] {} <Fatal> BaseDaemon: 7. 0x55fa661f7f0a DB::ParserQueryWithOutput::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.971844 [ 50 ] {} <Fatal> BaseDaemon: 8. 0x55fa661e04df DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.971894 [ 50 ] {} <Fatal> BaseDaemon: 9. 0x55fa661f784f DB::ParserQuery::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972033 [ 50 ] {} <Fatal> BaseDaemon: 10. 0x55fa661e04df DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972082 [ 50 ] {} <Fatal> BaseDaemon: 11. 0x55fa6620f8ab DB::tryParseQuery(DB::IParser&, char const*&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, unsigned long) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972138 [ 50 ] {} <Fatal> BaseDaemon: 12. 0x55fa66211ea2 DB::parseQuery(DB::IParser&, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972193 [ 50 ] {} <Fatal> BaseDaemon: 13. 0x55fa6599e9a3 ? /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972246 [ 50 ] {} <Fatal> BaseDaemon: 14. 0x55fa659a0768 DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972308 [ 50 ] {} <Fatal> BaseDaemon: 15. 0x55fa6254851e DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972367 [ 50 ] {} <Fatal> BaseDaemon: 16. 0x55fa6254a899 DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972400 [ 50 ] {} <Fatal> BaseDaemon: 17. 0x55fa66441179 Poco::Net::HTTPServerConnection::run() /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972447 [ 50 ] {} <Fatal> BaseDaemon: 18. 0x55fa6643d6f0 Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972520 [ 50 ] {} <Fatal> BaseDaemon: 19. 0x55fa6643de0d Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972570 [ 50 ] {} <Fatal> BaseDaemon: 20. 0x55fa67b13f81 Poco::PooledThread::run() /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972621 [ 50 ] {} <Fatal> BaseDaemon: 21. 0x55fa67b11d2c Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972685 [ 50 ] {} <Fatal> BaseDaemon: 22. 0x55fa68287ec0 ? /usr/bin/clickhouse\r\n2019.12.12 05:22:38.972782 [ 50 ] {} <Fatal> BaseDaemon: 23. 0x7f62a73bb6db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n2019.12.12 05:22:38.972880 [ 50 ] {} <Fatal> BaseDaemon: 24. 0x7f62a6cd888f clone /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\nSegmentation fault\r\n\r\n```\r\n\n",
  "hints_text": "> Query: `exists some.some`\r\n\r\nDoesn't look like SQL. Can you check what exactly SQL was sent to ClickHouse ? You can find it in /var/log/clickhouse-server/clickhouse-server.log before segfault report. \nThis exactly what was sent. No messages in the log since it failed on parsing the query.\nJava code snippet:\r\n``` java\r\ntry (Connection connection = DriverManager.getConnection(\"jdbc:clickhouse://10.10.87.163:8123?password=----\");\r\n     Statement statement = connection.createStatement()) {\r\n\r\n     statement.execute(\"exists somedatabase.sometable\");\r\n}\r\n```\r\n\r\nThe full log:\r\n```\r\nInclude not found: clickhouse_remote_servers\r\nInclude not found: clickhouse_compression\r\nLogging trace to /var/log/clickhouse-server/clickhouse-server.log\r\nLogging errors to /var/log/clickhouse-server/clickhouse-server.err.log\r\nLogging trace to console\r\n2019.12.12 07:01:13.222654 [ 1 ] {} <Information> : Starting ClickHouse 19.17.5.18 with revision 54428\r\n2019.12.12 07:01:13.224806 [ 1 ] {} <Information> Application: starting up\r\n2019.12.12 07:01:13.226618 [ 1 ] {} <Debug> Application: Set max number of file descriptors to 4096 (was 1024).\r\n2019.12.12 07:01:13.226648 [ 1 ] {} <Debug> Application: Initializing DateLUT.\r\n2019.12.12 07:01:13.226657 [ 1 ] {} <Trace> Application: Initialized DateLUT with time zone 'America/Los_Angeles'.\r\n2019.12.12 07:01:13.227260 [ 1 ] {} <Debug> Application: Configuration parameter 'interserver_http_host' doesn't exist or exists and empty. Will use 'ubuntu' as replica host.\r\n2019.12.12 07:01:13.229951 [ 1 ] {} <Debug> ConfigReloader: Loading config '/etc/clickhouse-server/users.xml'\r\nInclude not found: networks\r\n2019.12.12 07:01:13.231183 [ 1 ] {} <Information> Application: Uncompressed cache size was lowered to 1.91 GiB because the system has low amount of memory\r\n2019.12.12 07:01:13.231403 [ 1 ] {} <Information> Application: Mark cache size was lowered to 1.91 GiB because the system has low amount of memory\r\n2019.12.12 07:01:13.231445 [ 1 ] {} <Information> Application: Loading metadata from /var/lib/clickhouse/\r\n2019.12.12 07:01:13.232504 [ 1 ] {} <Information> DatabaseOrdinary (system): Total 0 tables and 0 dictionaries.\r\n2019.12.12 07:01:13.232535 [ 1 ] {} <Information> DatabaseOrdinary (system): Starting up tables.\r\n2019.12.12 07:01:13.237998 [ 1 ] {} <Information> DatabaseOrdinary (default): Total 0 tables and 0 dictionaries.\r\n2019.12.12 07:01:13.238044 [ 1 ] {} <Information> DatabaseOrdinary (default): Starting up tables.\r\n2019.12.12 07:01:13.240643 [ 1 ] {} <Information> DatabaseOrdinary (ember): Total 2 tables and 0 dictionaries.\r\n2019.12.12 07:01:13.242454 [ 6 ] {} <Information> BackgroundProcessingPool: Create BackgroundProcessingPool with 16 threads\r\n2019.12.12 07:01:13.244171 [ 6 ] {} <Debug> ember.messages: Loading data parts\r\n2019.12.12 07:01:13.244363 [ 7 ] {} <Debug> ember.version: Loading data parts\r\n2019.12.12 07:01:13.248329 [ 7 ] {} <Debug> ember.version: Loaded data parts (1 items)\r\n2019.12.12 07:01:13.250337 [ 6 ] {} <Debug> ember.messages: Loaded data parts (1 items)\r\n2019.12.12 07:01:13.250529 [ 1 ] {} <Information> DatabaseOrdinary (ember): Starting up tables.\r\n2019.12.12 07:01:13.250923 [ 1 ] {} <Debug> Application: Loaded metadata.\r\n2019.12.12 07:01:13.250971 [ 1 ] {} <Trace> TraceCollector: Pipe capacity is 1.00 MiB\r\n2019.12.12 07:01:13.250997 [ 1 ] {} <Information> BackgroundSchedulePool: Create BackgroundSchedulePool with 16 threads\r\n2019.12.12 07:01:13.252706 [ 1 ] {} <Information> Application: Listening http://0.0.0.0:8123\r\n2019.12.12 07:01:13.252755 [ 1 ] {} <Information> Application: Listening for connections with native protocol (tcp): 0.0.0.0:9000\r\n2019.12.12 07:01:13.252779 [ 1 ] {} <Information> Application: Listening for replica communication (interserver) http://0.0.0.0:9009\r\n2019.12.12 07:01:13.253013 [ 1 ] {} <Information> Application: Available RAM: 3.83 GiB; physical cores: 2; logical cores: 2.\r\n2019.12.12 07:01:13.253047 [ 1 ] {} <Information> Application: Ready for connections.\r\n2019.12.12 07:01:15.257031 [ 40 ] {} <Debug> ConfigReloader: Loading config '/etc/clickhouse-server/config.xml'\r\nInclude not found: clickhouse_remote_servers\r\nInclude not found: clickhouse_compression\r\n2019.12.12 07:04:35.324103 [ 45 ] {} <Trace> HTTPHandler-factory: HTTP Request for HTTPHandler-factory. Method: POST, Address: 10.10.87.38:65110, User-Agent: Apache-HttpClient/4.5.10 (Java/1.8.0_161), Length: 55, Content Type: text/plain; charset=UTF-8, Transfer Encoding: identity\r\n2019.12.12 07:04:35.324282 [ 45 ] {} <Trace> HTTPHandler: Request URI: /?query_id=e7dc7054-d31b-4780-b787-34a734b3be99&extremes=0&database=default&compress=1&password=----\r\n2019.12.12 07:04:35.324586 [ 45 ] {e7dc7054-d31b-4780-b787-34a734b3be99} <Debug> executeQuery: (from 10.10.87.38:65110) select timezone() FORMAT TabSeparatedWithNamesAndTypes;\r\n2019.12.12 07:04:35.325159 [ 45 ] {e7dc7054-d31b-4780-b787-34a734b3be99} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2019.12.12 07:04:35.325256 [ 45 ] {e7dc7054-d31b-4780-b787-34a734b3be99} <Debug> executeQuery: Query pipeline:\r\nExpression\r\n Expression\r\n  One\r\n\r\n2019.12.12 07:04:35.325612 [ 45 ] {e7dc7054-d31b-4780-b787-34a734b3be99} <Information> executeQuery: Read 1 rows, 1.00 B in 0.001 sec., 1071 rows/sec., 1.05 KiB/sec.\r\n2019.12.12 07:04:35.325662 [ 45 ] {e7dc7054-d31b-4780-b787-34a734b3be99} <Debug> MemoryTracker: Peak memory usage (total): 0.00 B.\r\n2019.12.12 07:04:35.325852 [ 45 ] {e7dc7054-d31b-4780-b787-34a734b3be99} <Debug> MemoryTracker: Peak memory usage (for query): 0.00 B.\r\n2019.12.12 07:04:35.325911 [ 45 ] {e7dc7054-d31b-4780-b787-34a734b3be99} <Information> HTTPHandler: Done processing query\r\n2019.12.12 07:04:35.396862 [ 45 ] {} <Trace> HTTPHandler-factory: HTTP Request for HTTPHandler-factory. Method: POST, Address: 10.10.87.38:65110, User-Agent: Apache-HttpClient/4.5.10 (Java/1.8.0_161), Length: 67, Content Type: text/plain; charset=UTF-8, Transfer Encoding: identity\r\n2019.12.12 07:04:35.397083 [ 45 ] {} <Trace> HTTPHandler: Request URI: /?query_id=e39e3e1e-6577-41d0-aa6b-08a185e95e26&extremes=0&database=default&compress=1&password=----\r\n2019.12.12 07:04:35.397604 [ 46 ] {} <Fatal> BaseDaemon: ########################################\r\n2019.12.12 07:04:35.397680 [ 46 ] {} <Fatal> BaseDaemon: (version 19.17.5.18 (official build)) (from thread 45) Received signal Segmentation fault (11).\r\n2019.12.12 07:04:35.397721 [ 46 ] {} <Fatal> BaseDaemon: Address: 0x60 Access: read. Address not mapped to object.\r\n2019.12.12 07:04:35.397754 [ 46 ] {} <Fatal> BaseDaemon: Stack trace: 0x55761000f4b1 0x55760df31f02 0x55760df896b5 0x55760df6a4df 0x55760df81f0a 0x55760df6a4df 0x55760df8184f 0x55760df6a4df 0x55760df998ab 0x55760df9bea2 0x55760d7289a3 0x55760d72a768 0x55760a2d251e 0x55760a2d4899 0x55760e1cb179 0x55760e1c76f0 0x55760e1c7e0d 0x55760f89df81 0x55760f89bd2c 0x557610011ec0 0x7f454dda96db 0x7f454d6c688f\r\n2019.12.12 07:04:35.445286 [ 46 ] {} <Fatal> BaseDaemon: 3. 0x55761000f4b1 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445392 [ 46 ] {} <Fatal> BaseDaemon: 4. 0x55760df31f02 DB::tryGetIdentifierNameInto(DB::IAST const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445423 [ 46 ] {} <Fatal> BaseDaemon: 5. 0x55760df896b5 DB::ParserTablePropertiesQuery::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445441 [ 46 ] {} <Fatal> BaseDaemon: 6. 0x55760df6a4df DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445457 [ 46 ] {} <Fatal> BaseDaemon: 7. 0x55760df81f0a DB::ParserQueryWithOutput::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445506 [ 46 ] {} <Fatal> BaseDaemon: 8. 0x55760df6a4df DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445541 [ 46 ] {} <Fatal> BaseDaemon: 9. 0x55760df8184f DB::ParserQuery::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445559 [ 46 ] {} <Fatal> BaseDaemon: 10. 0x55760df6a4df DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445583 [ 46 ] {} <Fatal> BaseDaemon: 11. 0x55760df998ab DB::tryParseQuery(DB::IParser&, char const*&, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, unsigned long) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445618 [ 46 ] {} <Fatal> BaseDaemon: 12. 0x55760df9bea2 DB::parseQuery(DB::IParser&, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445638 [ 46 ] {} <Fatal> BaseDaemon: 13. 0x55760d7289a3 ? /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445665 [ 46 ] {} <Fatal> BaseDaemon: 14. 0x55760d72a768 DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445701 [ 46 ] {} <Fatal> BaseDaemon: 15. 0x55760a2d251e DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445720 [ 46 ] {} <Fatal> BaseDaemon: 16. 0x55760a2d4899 DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445760 [ 46 ] {} <Fatal> BaseDaemon: 17. 0x55760e1cb179 Poco::Net::HTTPServerConnection::run() /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445816 [ 46 ] {} <Fatal> BaseDaemon: 18. 0x55760e1c76f0 Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445852 [ 46 ] {} <Fatal> BaseDaemon: 19. 0x55760e1c7e0d Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445878 [ 46 ] {} <Fatal> BaseDaemon: 20. 0x55760f89df81 Poco::PooledThread::run() /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445919 [ 46 ] {} <Fatal> BaseDaemon: 21. 0x55760f89bd2c Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse\r\n2019.12.12 07:04:35.445987 [ 46 ] {} <Fatal> BaseDaemon: 22. 0x557610011ec0 ? /usr/bin/clickhouse\r\n2019.12.12 07:04:35.446009 [ 46 ] {} <Fatal> BaseDaemon: 23. 0x7f454dda96db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n2019.12.12 07:04:35.449108 [ 46 ] {} <Fatal> BaseDaemon: 24. 0x7f454d6c688f clone /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\nSegmentation fault\r\n\r\n```\r\n\r\n\necho  \"exists a.a\"|clickhouse-benchmark\r\n\r\nAn error occurred while processing query:\r\nexists a.a\r\nDB::Exception: Attempt to read after eof: while receiving packet from localhost:9000",
  "created_at": "2019-12-13T20:25:57Z",
  "modified_files": [
    "contrib/ssl",
    "dbms/src/Parsers/ParserTablePropertiesQuery.cpp"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/01048_exists_query.reference",
    "b/dbms/tests/queries/0_stateless/01048_exists_query.sql"
  ]
}