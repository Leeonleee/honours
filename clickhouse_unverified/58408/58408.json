{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58408,
  "instance_id": "ClickHouse__ClickHouse-58408",
  "issue_numbers": [
    "57616"
  ],
  "base_commit": "3e1d7bf6853e029d7bba0a03742e5a95999362c3",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionSumMap.cpp b/src/AggregateFunctions/AggregateFunctionSumMap.cpp\nindex 9f0873a6c9c4..629dfe9f0fc5 100644\n--- a/src/AggregateFunctions/AggregateFunctionSumMap.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionSumMap.cpp\n@@ -545,7 +545,28 @@ class AggregateFunctionSumMapFiltered final :\n         }\n     }\n \n-    bool keepKey(const Field & key) const { return keys_to_keep.contains(key); }\n+    bool keepKey(const Field & key) const\n+    {\n+        if (keys_to_keep.contains(key))\n+            return true;\n+\n+        // Determine whether the numerical value of the key can have both types (UInt or Int),\n+        // and use the other type with the same numerical value for keepKey verification.\n+        if (key.getType() == Field::Types::UInt64)\n+        {\n+            const auto & value = key.safeGet<const UInt64 &>();\n+            if (value <= std::numeric_limits<Int64>::max())\n+                return keys_to_keep.contains(Field(Int64(value)));\n+        }\n+        else if (key.getType() == Field::Types::Int64)\n+        {\n+            const auto & value = key.safeGet<const Int64 &>();\n+            if (value >= 0)\n+                return keys_to_keep.contains(Field(UInt64(value)));\n+        }\n+\n+        return false;\n+    }\n };\n \n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02961_sumMapFiltered_keepKey.reference b/tests/queries/0_stateless/02961_sumMapFiltered_keepKey.reference\nnew file mode 100644\nindex 000000000000..3753b994d822\n--- /dev/null\n+++ b/tests/queries/0_stateless/02961_sumMapFiltered_keepKey.reference\n@@ -0,0 +1,2 @@\n+([1,2,3],[10,10,20])\n+([1,2,3],[10,10,20])\ndiff --git a/tests/queries/0_stateless/02961_sumMapFiltered_keepKey.sql b/tests/queries/0_stateless/02961_sumMapFiltered_keepKey.sql\nnew file mode 100644\nindex 000000000000..dc5aa743bb80\n--- /dev/null\n+++ b/tests/queries/0_stateless/02961_sumMapFiltered_keepKey.sql\n@@ -0,0 +1,3 @@\n+\n+SELECT sumMapFiltered([1,2,3])(a,b) FROM values('a Array(Int64), b Array(Int64)',([1, 2, 3], [10, 10, 10]), ([3, 4, 5], [10, 10, 10]),([4, 5, 6], [10, 10, 10]),([6, 7, 8], [10, 10, 10]));\n+SELECT sumMapFiltered([1,2,3,toInt8(-3)])(a,b) FROM values('a Array(UInt64), b Array(Int64)',([1, 2, 3], [10, 10, 10]), ([3, 4, 5], [10, 10, 10]),([4, 5, 6], [10, 10, 10]),([6, 7, 8], [10, 10, 10]));\n",
  "problem_statement": "sumMapFiltered aggregate function does not work with Int64 \nI run these two queries and I expect the same result:\r\n\r\n```sql\r\nSELECT sumMapFiltered([1,2,3])(a,b) FROM values('a Array(UInt64), b Array(UInt64)',([1, 2, 3], [10, 10, 10]), ([3, 4, 5], [10, 10, 10]),([4, 5, 6], [10, 10, 10]),([6, 7, 8], [10, 10, 10]));\r\n\r\nSELECT sumMapFiltered([1,2,3])(a,b) FROM values('a Array(Int64), b Array(Int64)',([1, 2, 3], [10, 10, 10]), ([3, 4, 5], [10, 10, 10]),([4, 5, 6], [10, 10, 10]),([6, 7, 8], [10, 10, 10]));\r\n```\r\nOutput in latest version:\r\n```\r\n([1,2,3],[10,10,20])\r\n([],[])\r\n```\r\n\r\nIt works for UInt64 correctly. It does not work for Int64.\r\n\n",
  "hints_text": "",
  "created_at": "2024-01-02T13:12:31Z"
}