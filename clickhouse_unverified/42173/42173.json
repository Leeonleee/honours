{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42173,
  "instance_id": "ClickHouse__ClickHouse-42173",
  "issue_numbers": [
    "40557"
  ],
  "base_commit": "53b655bfa9e4c2010570ec716fd07f619c2a9225",
  "patch": "diff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md\nindex dc74b6072898..deef82ee6996 100644\n--- a/docs/en/operations/settings/settings.md\n+++ b/docs/en/operations/settings/settings.md\n@@ -2629,12 +2629,6 @@ Sets the maximum number of inserted blocks after which mergeable blocks are drop\n \n Default value: `64`.\n \n-## temporary_live_view_timeout {#temporary-live-view-timeout}\n-\n-Sets the interval in seconds after which [live view](../../sql-reference/statements/create/view.md#live-view) with timeout is deleted.\n-\n-Default value: `5`.\n-\n ## periodic_live_view_refresh {#periodic-live-view-refresh}\n \n Sets the interval in seconds after which periodically refreshed [live view](../../sql-reference/statements/create/view.md#live-view) is forced to refresh.\ndiff --git a/docs/en/sql-reference/statements/create/view.md b/docs/en/sql-reference/statements/create/view.md\nindex 46dd7e6fdd70..5833c43f55dc 100644\n--- a/docs/en/sql-reference/statements/create/view.md\n+++ b/docs/en/sql-reference/statements/create/view.md\n@@ -166,23 +166,6 @@ SELECT * FROM [db.]live_view WHERE ...\n \n You can force live view refresh using the `ALTER LIVE VIEW [db.]table_name REFRESH` statement.\n \n-### WITH TIMEOUT Clause\n-\n-When a live view is created with a `WITH TIMEOUT` clause then the live view will be dropped automatically after the specified number of seconds elapse since the end of the last [WATCH](../../../sql-reference/statements/watch.md) query that was watching the live view.\n-\n-```sql\n-CREATE LIVE VIEW [db.]table_name WITH TIMEOUT [value_in_sec] AS SELECT ...\n-```\n-\n-If the timeout value is not specified then the value specified by the [temporary_live_view_timeout](../../../operations/settings/settings.md#temporary-live-view-timeout) setting is used.\n-\n-**Example:**\n-\n-```sql\n-CREATE TABLE mt (x Int8) Engine = MergeTree ORDER BY x;\n-CREATE LIVE VIEW lv WITH TIMEOUT 15 AS SELECT sum(x) FROM mt;\n-```\n-\n ### WITH REFRESH Clause\n \n When a live view is created with a `WITH REFRESH` clause then it will be automatically refreshed after the specified number of seconds elapse since the last refresh or trigger.\n@@ -212,20 +195,6 @@ WATCH lv\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-You can combine `WITH TIMEOUT` and `WITH REFRESH` clauses using an `AND` clause.\n-\n-```sql\n-CREATE LIVE VIEW [db.]table_name WITH TIMEOUT [value_in_sec] AND REFRESH [value_in_sec] AS SELECT ...\n-```\n-\n-**Example:**\n-\n-```sql\n-CREATE LIVE VIEW lv WITH TIMEOUT 15 AND REFRESH 5 AS SELECT now();\n-```\n-\n-After 15 sec the live view will be automatically dropped if there are no active `WATCH` queries.\n-\n ```sql\n WATCH lv\n ```\ndiff --git a/docs/ru/operations/settings/settings.md b/docs/ru/operations/settings/settings.md\nindex 3d765b03d58e..05cfbcb4a87e 100644\n--- a/docs/ru/operations/settings/settings.md\n+++ b/docs/ru/operations/settings/settings.md\n@@ -3258,12 +3258,6 @@ SELECT * FROM test2;\n \n \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `64`.\n \n-## temporary_live_view_timeout {#temporary-live-view-timeout}\n-\n-\u0417\u0430\u0434\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445, \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e [LIVE VIEW](../../sql-reference/statements/create/view.md#live-view) \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f.\n-\n-\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `5`.\n-\n ## periodic_live_view_refresh {#periodic-live-view-refresh}\n \n \u0417\u0430\u0434\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445, \u043f\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e [LIVE VIEW](../../sql-reference/statements/create/view.md#live-view) \u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u0430\u0432\u0442\u043e\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f.\ndiff --git a/docs/ru/sql-reference/statements/create/view.md b/docs/ru/sql-reference/statements/create/view.md\nindex 573db8938b2a..6cbd4c6a30cd 100644\n--- a/docs/ru/sql-reference/statements/create/view.md\n+++ b/docs/ru/sql-reference/statements/create/view.md\n@@ -156,23 +156,6 @@ SELECT * FROM [db.]live_view WHERE ...\n \n \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c LIVE-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 `ALTER LIVE VIEW [db.]table_name REFRESH`.\n \n-### \u0421\u0435\u043a\u0446\u0438\u044f WITH TIMEOUT {#live-view-with-timeout}\n-\n-LIVE-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0435 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c `WITH TIMEOUT`, \u0431\u0443\u0434\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u043e \u0447\u0435\u0440\u0435\u0437 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 [WATCH](../../../sql-reference/statements/watch.md), \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u043a \u0434\u0430\u043d\u043d\u043e\u043c\u0443 LIVE-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044e.\n-\n-```sql\n-CREATE LIVE VIEW [db.]table_name WITH TIMEOUT [value_in_sec] AS SELECT ...\n-```\n-\n-\u0415\u0441\u043b\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 [temporary_live_view_timeout](../../../operations/settings/settings.md#temporary-live-view-timeout).\n-\n-**\u041f\u0440\u0438\u043c\u0435\u0440:**\n-\n-```sql\n-CREATE TABLE mt (x Int8) Engine = MergeTree ORDER BY x;\n-CREATE LIVE VIEW lv WITH TIMEOUT 15 AS SELECT sum(x) FROM mt;\n-```\n-\n ### \u0421\u0435\u043a\u0446\u0438\u044f WITH REFRESH {#live-view-with-refresh}\n \n LIVE-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0435 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c `WITH REFRESH`, \u0431\u0443\u0434\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.\n@@ -202,20 +185,6 @@ WATCH lv;\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b `WITH TIMEOUT` \u0438 `WITH REFRESH` \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0447\u0435\u0442\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `AND`.\n-\n-```sql\n-CREATE LIVE VIEW [db.]table_name WITH TIMEOUT [value_in_sec] AND REFRESH [value_in_sec] AS SELECT ...\n-```\n-\n-**\u041f\u0440\u0438\u043c\u0435\u0440:**\n-\n-```sql\n-CREATE LIVE VIEW lv WITH TIMEOUT 15 AND REFRESH 5 AS SELECT now();\n-```\n-\n-\u041f\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u0438 15 \u0441\u0435\u043a\u0443\u043d\u0434 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u043e, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 `WATCH`.\n-\n ```sql\n WATCH lv;\n ```\ndiff --git a/docs/zh/sql-reference/statements/create/view.md b/docs/zh/sql-reference/statements/create/view.md\nindex 12ffe35dde0d..be2f8d6ded3d 100644\n--- a/docs/zh/sql-reference/statements/create/view.md\n+++ b/docs/zh/sql-reference/statements/create/view.md\n@@ -164,23 +164,6 @@ SELECT * FROM [db.]live_view WHERE ...\n \n \u60a8\u53ef\u4ee5\u4f7f\u7528`ALTER LIVE VIEW [db.]table_name REFRESH`\u8bed\u6cd5.\n \n-### WITH TIMEOUT\u6761\u4ef6 {#live-view-with-timeout}\n-\n-\u5f53\u4f7f\u7528`WITH TIMEOUT`\u5b50\u53e5\u521b\u5efa\u5b9e\u65f6\u89c6\u56fe\u65f6\uff0c[WATCH](../../../sql-reference/statements/watch.md)\u89c2\u5bdf\u5b9e\u65f6\u89c6\u56fe\u7684\u67e5\u8be2\u3002\n-\n-```sql\n-CREATE LIVE VIEW [db.]table_name WITH TIMEOUT [value_in_sec] AS SELECT ...\n-```\n-\n-\u5982\u679c\u672a\u6307\u5b9a\u8d85\u65f6\u503c\uff0c\u5219\u7531\u6307\u5b9a\u7684\u503c[temporary_live_view_timeout](../../../operations/settings/settings.md#temporary-live-view-timeout)\u51b3\u5b9a.\n-\n-**\u793a\u4f8b:**\n-\n-```sql\n-CREATE TABLE mt (x Int8) Engine = MergeTree ORDER BY x;\n-CREATE LIVE VIEW lv WITH TIMEOUT 15 AS SELECT sum(x) FROM mt;\n-```\n-\n ### WITH REFRESH\u6761\u4ef6 {#live-view-with-refresh}\n \n \u5f53\u4f7f\u7528`WITH REFRESH`\u5b50\u53e5\u521b\u5efa\u5b9e\u65f6\u89c6\u56fe\u65f6\uff0c\u5b83\u5c06\u5728\u81ea\u4e0a\u6b21\u5237\u65b0\u6216\u89e6\u53d1\u540e\u7ecf\u8fc7\u6307\u5b9a\u7684\u79d2\u6570\u540e\u81ea\u52a8\u5237\u65b0\u3002\n@@ -210,20 +193,6 @@ WATCH lv\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-\u60a8\u53ef\u4ee5\u4f7f\u7528`AND`\u5b50\u53e5\u7ec4\u5408`WITH TIMEOUT`\u548c`WITH REFRESH`\u5b50\u53e5\u3002\n-\n-```sql\n-CREATE LIVE VIEW [db.]table_name WITH TIMEOUT [value_in_sec] AND REFRESH [value_in_sec] AS SELECT ...\n-```\n-\n-**\u793a\u4f8b:**\n-\n-```sql\n-CREATE LIVE VIEW lv WITH TIMEOUT 15 AND REFRESH 5 AS SELECT now();\n-```\n-\n-15 \u79d2\u540e\uff0c\u5982\u679c\u6ca1\u6709\u6d3b\u52a8\u7684`WATCH`\u67e5\u8be2\uff0c\u5b9e\u65f6\u89c6\u56fe\u5c06\u81ea\u52a8\u5220\u9664\u3002\n-\n ```sql\n WATCH lv\n ```\ndiff --git a/src/Core/Defines.h b/src/Core/Defines.h\nindex 9665a20a397b..80efe4f77bff 100644\n--- a/src/Core/Defines.h\n+++ b/src/Core/Defines.h\n@@ -31,7 +31,6 @@\n   */\n #define DEFAULT_MERGE_BLOCK_SIZE 8192\n \n-#define DEFAULT_TEMPORARY_LIVE_VIEW_TIMEOUT_SEC 5\n #define DEFAULT_PERIODIC_LIVE_VIEW_REFRESH_SEC 60\n #define SHOW_CHARS_ON_SYNTAX_ERROR ptrdiff_t(160)\n #define DBMS_CONNECTION_POOL_WITH_FAILOVER_DEFAULT_MAX_TRIES 3\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 26b6fd56ade7..f429b7560d5a 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -501,7 +501,6 @@ static constexpr UInt64 operator\"\"_GiB(unsigned long long value)\n     M(Bool, validate_polygons, true, \"Throw exception if polygon is invalid in function pointInPolygon (e.g. self-tangent, self-intersecting). If the setting is false, the function will accept invalid polygons but may silently return wrong result.\", 0) \\\n     M(UInt64, max_parser_depth, DBMS_DEFAULT_MAX_PARSER_DEPTH, \"Maximum parser depth (recursion depth of recursive descend parser).\", 0) \\\n     M(Bool, allow_settings_after_format_in_insert, false, \"Allow SETTINGS after FORMAT, but note, that this is not always safe (note: this is a compatibility setting).\", 0) \\\n-    M(Seconds, temporary_live_view_timeout, DEFAULT_TEMPORARY_LIVE_VIEW_TIMEOUT_SEC, \"Timeout after which temporary live view is deleted.\", 0) \\\n     M(Seconds, periodic_live_view_refresh, DEFAULT_PERIODIC_LIVE_VIEW_REFRESH_SEC, \"Interval after which periodically refreshed live view is forced to refresh.\", 0) \\\n     M(Bool, transform_null_in, false, \"If enabled, NULL values will be matched with 'IN' operator as if they are considered equal.\", 0) \\\n     M(Bool, allow_nondeterministic_mutations, false, \"Allow non-deterministic functions in ALTER UPDATE/ALTER DELETE statements\", 0) \\\n@@ -691,7 +690,8 @@ static constexpr UInt64 operator\"\"_GiB(unsigned long long value)\n     MAKE_OBSOLETE(M, UInt64, background_message_broker_schedule_pool_size, 16) \\\n     MAKE_OBSOLETE(M, UInt64, background_distributed_schedule_pool_size, 16) \\\n     MAKE_OBSOLETE(M, DefaultDatabaseEngine, default_database_engine, DefaultDatabaseEngine::Atomic) \\\n-    MAKE_OBSOLETE(M, UInt64, max_pipeline_depth, 0) \\\n+    MAKE_OBSOLETE(M, UInt64, max_pipeline_depth, 0)                                                                                 \\\n+    MAKE_OBSOLETE(M, Seconds, temporary_live_view_timeout, 1) \\\n \n     /** The section above is for obsolete settings. Do not add anything there. */\n \ndiff --git a/src/Interpreters/DatabaseCatalog.cpp b/src/Interpreters/DatabaseCatalog.cpp\nindex 67fb256b1c9b..73189979d85f 100644\n--- a/src/Interpreters/DatabaseCatalog.cpp\n+++ b/src/Interpreters/DatabaseCatalog.cpp\n@@ -8,7 +8,6 @@\n #include <Disks/IDisk.h>\n #include <Common/quoteString.h>\n #include <Storages/StorageMemory.h>\n-#include <Storages/LiveView/TemporaryLiveViewCleaner.h>\n #include <Core/BackgroundSchedulePool.h>\n #include <Parsers/formatAST.h>\n #include <IO/ReadHelpers.h>\n@@ -171,16 +170,10 @@ void DatabaseCatalog::loadDatabases()\n     std::lock_guard lock{tables_marked_dropped_mutex};\n     if (!tables_marked_dropped.empty())\n         (*drop_task)->schedule();\n-\n-    /// Another background thread which drops temporary LiveViews.\n-    /// We should start it after loadMarkedAsDroppedTables() to avoid race condition.\n-    TemporaryLiveViewCleaner::instance().startup();\n }\n \n void DatabaseCatalog::shutdownImpl()\n {\n-    TemporaryLiveViewCleaner::shutdown();\n-\n     if (cleanup_task)\n         (*cleanup_task)->deactivate();\n \n@@ -657,7 +650,6 @@ std::unique_ptr<DatabaseCatalog> DatabaseCatalog::database_catalog;\n DatabaseCatalog::DatabaseCatalog(ContextMutablePtr global_context_)\n     : WithMutableContext(global_context_), log(&Poco::Logger::get(\"DatabaseCatalog\"))\n {\n-    TemporaryLiveViewCleaner::init(global_context_);\n }\n \n DatabaseCatalog & DatabaseCatalog::init(ContextMutablePtr global_context_)\ndiff --git a/src/Parsers/ASTCreateQuery.cpp b/src/Parsers/ASTCreateQuery.cpp\nindex a277960643bc..f8853d211784 100644\n--- a/src/Parsers/ASTCreateQuery.cpp\n+++ b/src/Parsers/ASTCreateQuery.cpp\n@@ -297,18 +297,10 @@ void ASTCreateQuery::formatQueryImpl(const FormatSettings & settings, FormatStat\n             settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FROM \" << (settings.hilite ? hilite_none : \"\")\n                           << quoteString(*attach_from_path);\n \n-        if (live_view_timeout)\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" WITH TIMEOUT \" << (settings.hilite ? hilite_none : \"\")\n-                          << *live_view_timeout;\n-\n         if (live_view_periodic_refresh)\n         {\n-            if (live_view_timeout)\n-                settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" AND\" << (settings.hilite ? hilite_none : \"\");\n-            else\n-                settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" WITH\" << (settings.hilite ? hilite_none : \"\");\n-\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" PERIODIC REFRESH \" << (settings.hilite ? hilite_none : \"\")\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" WITH\" << (settings.hilite ? hilite_none : \"\")\n+                << (settings.hilite ? hilite_keyword : \"\") << \" PERIODIC REFRESH \" << (settings.hilite ? hilite_none : \"\")\n                 << *live_view_periodic_refresh;\n         }\n \ndiff --git a/src/Parsers/ASTCreateQuery.h b/src/Parsers/ASTCreateQuery.h\nindex f3729b1523f5..de0f187f0e2a 100644\n--- a/src/Parsers/ASTCreateQuery.h\n+++ b/src/Parsers/ASTCreateQuery.h\n@@ -93,7 +93,6 @@ class ASTCreateQuery : public ASTQueryWithTableAndOutput, public ASTQueryWithOnC\n     ASTExpressionList * dictionary_attributes_list = nullptr; /// attributes of\n     ASTDictionary * dictionary = nullptr; /// dictionary definition (layout, primary key, etc.)\n \n-    std::optional<UInt64> live_view_timeout;    /// For CREATE LIVE VIEW ... WITH TIMEOUT ...\n     std::optional<UInt64> live_view_periodic_refresh;    /// For CREATE LIVE VIEW ... WITH [PERIODIC] REFRESH ...\n \n     bool is_watermark_strictly_ascending{false}; /// STRICTLY ASCENDING WATERMARK STRATEGY FOR WINDOW VIEW\ndiff --git a/src/Parsers/ParserCreateQuery.cpp b/src/Parsers/ParserCreateQuery.cpp\nindex fc90f9ce3ed2..77540141b536 100644\n--- a/src/Parsers/ParserCreateQuery.cpp\n+++ b/src/Parsers/ParserCreateQuery.cpp\n@@ -708,7 +708,6 @@ bool ParserCreateLiveViewQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & e\n     ASTPtr as_database;\n     ASTPtr as_table;\n     ASTPtr select;\n-    ASTPtr live_view_timeout;\n     ASTPtr live_view_periodic_refresh;\n \n     String cluster_str;\n@@ -740,20 +739,6 @@ bool ParserCreateLiveViewQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & e\n \n     if (ParserKeyword{\"WITH\"}.ignore(pos, expected))\n     {\n-        if (ParserKeyword{\"TIMEOUT\"}.ignore(pos, expected))\n-        {\n-            if (!ParserNumber{}.parse(pos, live_view_timeout, expected))\n-            {\n-                live_view_timeout = std::make_shared<ASTLiteral>(static_cast<UInt64>(DEFAULT_TEMPORARY_LIVE_VIEW_TIMEOUT_SEC));\n-            }\n-\n-            /// Optional - AND\n-            if (ParserKeyword{\"AND\"}.ignore(pos, expected))\n-                with_and = true;\n-\n-            with_timeout = true;\n-        }\n-\n         if (ParserKeyword{\"REFRESH\"}.ignore(pos, expected) || ParserKeyword{\"PERIODIC REFRESH\"}.ignore(pos, expected))\n         {\n             if (!ParserNumber{}.parse(pos, live_view_periodic_refresh, expected))\n@@ -828,9 +813,6 @@ bool ParserCreateLiveViewQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & e\n     tryGetIdentifierNameInto(as_table, query->as_table);\n     query->set(query->select, select);\n \n-    if (live_view_timeout)\n-        query->live_view_timeout.emplace(live_view_timeout->as<ASTLiteral &>().value.safeGet<UInt64>());\n-\n     if (live_view_periodic_refresh)\n         query->live_view_periodic_refresh.emplace(live_view_periodic_refresh->as<ASTLiteral &>().value.safeGet<UInt64>());\n \ndiff --git a/src/Storages/LiveView/StorageLiveView.cpp b/src/Storages/LiveView/StorageLiveView.cpp\nindex 4f52267a7fec..e3d19d0a4338 100644\n--- a/src/Storages/LiveView/StorageLiveView.cpp\n+++ b/src/Storages/LiveView/StorageLiveView.cpp\n@@ -21,25 +21,19 @@ limitations under the License. */\n #include <Processors/Executors/PullingAsyncPipelineExecutor.h>\n #include <Processors/Executors/PipelineExecutor.h>\n #include <Processors/Transforms/SquashingChunksTransform.h>\n-#include <Processors/Transforms/ExpressionTransform.h>\n #include <QueryPipeline/QueryPipelineBuilder.h>\n #include <Common/logger_useful.h>\n #include <Common/typeid_cast.h>\n #include <Common/SipHash.h>\n #include <Common/hex.h>\n-#include \"QueryPipeline/printPipeline.h\"\n \n #include <Storages/LiveView/StorageLiveView.h>\n #include <Storages/LiveView/LiveViewSource.h>\n #include <Storages/LiveView/LiveViewSink.h>\n #include <Storages/LiveView/LiveViewEventsSource.h>\n #include <Storages/LiveView/StorageBlocks.h>\n-#include <Storages/LiveView/TemporaryLiveViewCleaner.h>\n \n #include <Storages/StorageFactory.h>\n-#include <Parsers/ASTTablesInSelectQuery.h>\n-#include <Parsers/ASTSubquery.h>\n-#include <Parsers/queryToString.h>\n #include <Interpreters/DatabaseAndTableWithAlias.h>\n #include <Interpreters/DatabaseCatalog.h>\n #include <Interpreters/getTableExpressions.h>\n@@ -312,12 +306,6 @@ StorageLiveView::StorageLiveView(\n \n     DatabaseCatalog::instance().addDependency(select_table_id, table_id_);\n \n-    if (query.live_view_timeout)\n-    {\n-        is_temporary = true;\n-        temporary_live_view_timeout = Seconds {*query.live_view_timeout};\n-    }\n-\n     if (query.live_view_periodic_refresh)\n     {\n         is_periodically_refreshed = true;\n@@ -456,9 +444,6 @@ void StorageLiveView::checkTableCanBeDropped() const\n \n void StorageLiveView::startup()\n {\n-    if (is_temporary)\n-        TemporaryLiveViewCleaner::instance().addView(std::static_pointer_cast<StorageLiveView>(shared_from_this()));\n-\n     if (is_periodically_refreshed)\n         periodic_refresh_task->activate();\n }\ndiff --git a/src/Storages/LiveView/StorageLiveView.h b/src/Storages/LiveView/StorageLiveView.h\nindex 4d140f6a82a9..c6a0379e2abf 100644\n--- a/src/Storages/LiveView/StorageLiveView.h\n+++ b/src/Storages/LiveView/StorageLiveView.h\n@@ -86,19 +86,6 @@ friend class LiveViewSink;\n \n     NamesAndTypesList getVirtuals() const override;\n \n-    bool isTemporary() const { return is_temporary; }\n-    bool isPeriodicallyRefreshed() const { return is_periodically_refreshed; }\n-\n-    Seconds getTimeout() const { return temporary_live_view_timeout; }\n-    Seconds getPeriodicRefresh() const { return periodic_live_view_refresh; }\n-\n-    /// Check if we have any readers\n-    /// must be called with mutex locked\n-    bool hasUsers()\n-    {\n-        return blocks_ptr.use_count() > 1;\n-    }\n-\n     /// Check we have any active readers\n     /// must be called with mutex locked\n     bool hasActiveUsers()\n@@ -200,10 +187,7 @@ friend class LiveViewSink;\n \n     Poco::Logger * log;\n \n-    bool is_temporary = false;\n     bool is_periodically_refreshed = false;\n-\n-    Seconds temporary_live_view_timeout;\n     Seconds periodic_live_view_refresh;\n \n     /// Mutex to protect access to sample block and inner_blocks_query\ndiff --git a/src/Storages/LiveView/TemporaryLiveViewCleaner.cpp b/src/Storages/LiveView/TemporaryLiveViewCleaner.cpp\ndeleted file mode 100644\nindex 12af472247d0..000000000000\n--- a/src/Storages/LiveView/TemporaryLiveViewCleaner.cpp\n+++ /dev/null\n@@ -1,165 +0,0 @@\n-#include <Storages/LiveView/TemporaryLiveViewCleaner.h>\n-\n-#include <Interpreters/DatabaseCatalog.h>\n-#include <Interpreters/InterpreterDropQuery.h>\n-#include <Parsers/ASTDropQuery.h>\n-#include <Storages/LiveView/StorageLiveView.h>\n-\n-\n-namespace DB\n-{\n-namespace ErrorCodes\n-{\n-    extern const int LOGICAL_ERROR;\n-}\n-\n-\n-namespace\n-{\n-    void executeDropQuery(const StorageID & storage_id, ContextMutablePtr context)\n-    {\n-        if (!DatabaseCatalog::instance().isTableExist(storage_id, context))\n-            return;\n-        try\n-        {\n-            /// We create and execute `drop` query for this table\n-            auto drop_query = std::make_shared<ASTDropQuery>();\n-            drop_query->setDatabase(storage_id.database_name);\n-            drop_query->setTable(storage_id.table_name);\n-            drop_query->kind = ASTDropQuery::Kind::Drop;\n-            ASTPtr ast_drop_query = drop_query;\n-            InterpreterDropQuery drop_interpreter(ast_drop_query, context);\n-            drop_interpreter.execute();\n-        }\n-        catch (...)\n-        {\n-            tryLogCurrentException(__PRETTY_FUNCTION__);\n-        }\n-    }\n-}\n-\n-\n-std::unique_ptr<TemporaryLiveViewCleaner> TemporaryLiveViewCleaner::the_instance;\n-\n-\n-void TemporaryLiveViewCleaner::init(ContextMutablePtr global_context_)\n-{\n-    if (the_instance)\n-        throw Exception(\"TemporaryLiveViewCleaner already initialized\", ErrorCodes::LOGICAL_ERROR);\n-    the_instance.reset(new TemporaryLiveViewCleaner(global_context_));\n-}\n-\n-void TemporaryLiveViewCleaner::startup()\n-{\n-    background_thread_can_start = true;\n-\n-    std::lock_guard lock{mutex};\n-    if (!views.empty())\n-        startBackgroundThread();\n-}\n-\n-void TemporaryLiveViewCleaner::shutdown()\n-{\n-    the_instance.reset();\n-}\n-\n-TemporaryLiveViewCleaner::TemporaryLiveViewCleaner(ContextMutablePtr global_context_) : WithMutableContext(global_context_)\n-{\n-}\n-\n-TemporaryLiveViewCleaner::~TemporaryLiveViewCleaner()\n-{\n-    stopBackgroundThread();\n-}\n-\n-\n-void TemporaryLiveViewCleaner::addView(const std::shared_ptr<StorageLiveView> & view)\n-{\n-    if (!view->isTemporary() || background_thread_should_exit)\n-        return;\n-\n-    auto current_time = std::chrono::system_clock::now();\n-    auto time_of_next_check = current_time + view->getTimeout();\n-\n-    /// Keep the vector `views` sorted by time of next check.\n-    StorageAndTimeOfCheck storage_and_time_of_check{view, time_of_next_check};\n-    std::lock_guard lock{mutex};\n-    views.insert(std::upper_bound(views.begin(), views.end(), storage_and_time_of_check), storage_and_time_of_check);\n-\n-    if (background_thread_can_start)\n-    {\n-        startBackgroundThread();\n-        background_thread_wake_up.notify_one();\n-    }\n-}\n-\n-\n-void TemporaryLiveViewCleaner::backgroundThreadFunc()\n-{\n-    std::unique_lock lock{mutex};\n-    while (!background_thread_should_exit)\n-    {\n-        if (views.empty())\n-            background_thread_wake_up.wait(lock);\n-        else\n-            background_thread_wake_up.wait_until(lock, views.front().time_of_check);\n-\n-        if (background_thread_should_exit)\n-            break;\n-\n-        auto current_time = std::chrono::system_clock::now();\n-        std::vector<StorageID> storages_to_drop;\n-\n-        auto it = views.begin();\n-        while (it != views.end())\n-        {\n-            std::shared_ptr<StorageLiveView> storage = it->storage.lock();\n-            auto & time_of_check = it->time_of_check;\n-            if (!storage)\n-            {\n-                /// Storage has been already removed.\n-                it = views.erase(it);\n-                continue;\n-            }\n-\n-            if (current_time < time_of_check)\n-                break; /// It's not the time to check it yet.\n-\n-            auto storage_id = storage->getStorageID();\n-            if (!storage->hasUsers() && DatabaseCatalog::instance().getDependencies(storage_id).empty())\n-            {\n-                /// No users and no dependencies so we can remove the storage.\n-                storages_to_drop.emplace_back(storage_id);\n-                it = views.erase(it);\n-                continue;\n-            }\n-\n-            /// Calculate time of the next check.\n-            time_of_check = current_time + storage->getTimeout();\n-\n-            ++it;\n-        }\n-\n-        lock.unlock();\n-        for (const auto & storage_id : storages_to_drop)\n-            executeDropQuery(storage_id, getContext());\n-        lock.lock();\n-    }\n-}\n-\n-\n-void TemporaryLiveViewCleaner::startBackgroundThread()\n-{\n-    if (!background_thread.joinable() && background_thread_can_start && !background_thread_should_exit)\n-        background_thread = ThreadFromGlobalPool{&TemporaryLiveViewCleaner::backgroundThreadFunc, this};\n-}\n-\n-void TemporaryLiveViewCleaner::stopBackgroundThread()\n-{\n-    background_thread_should_exit = true;\n-    background_thread_wake_up.notify_one();\n-    if (background_thread.joinable())\n-        background_thread.join();\n-}\n-\n-}\ndiff --git a/src/Storages/LiveView/TemporaryLiveViewCleaner.h b/src/Storages/LiveView/TemporaryLiveViewCleaner.h\ndeleted file mode 100644\nindex 9cc5933eb894..000000000000\n--- a/src/Storages/LiveView/TemporaryLiveViewCleaner.h\n+++ /dev/null\n@@ -1,57 +0,0 @@\n-#pragma once\n-\n-#include <Interpreters/Context_fwd.h>\n-#include <Common/ThreadPool.h>\n-\n-#include <chrono>\n-\n-\n-namespace DB\n-{\n-\n-class StorageLiveView;\n-struct StorageID;\n-\n-/// This class removes temporary live views in the background thread when it's possible.\n-/// There should only a single instance of this class.\n-class TemporaryLiveViewCleaner : WithMutableContext\n-{\n-public:\n-    static TemporaryLiveViewCleaner & instance() { return *the_instance; }\n-\n-    /// Drops a specified live view after a while if it's temporary.\n-    void addView(const std::shared_ptr<StorageLiveView> & view);\n-\n-    /// Should be called once.\n-    static void init(ContextMutablePtr global_context_);\n-    static void shutdown();\n-\n-    void startup();\n-\n-private:\n-    friend std::unique_ptr<TemporaryLiveViewCleaner>::deleter_type;\n-\n-    explicit TemporaryLiveViewCleaner(ContextMutablePtr global_context_);\n-    ~TemporaryLiveViewCleaner();\n-\n-    void backgroundThreadFunc();\n-    void startBackgroundThread();\n-    void stopBackgroundThread();\n-\n-    struct StorageAndTimeOfCheck\n-    {\n-        std::weak_ptr<StorageLiveView> storage;\n-        std::chrono::system_clock::time_point time_of_check;\n-        bool operator <(const StorageAndTimeOfCheck & other) const { return time_of_check < other.time_of_check; }\n-    };\n-\n-    static std::unique_ptr<TemporaryLiveViewCleaner> the_instance;\n-    std::mutex mutex;\n-    std::vector<StorageAndTimeOfCheck> views;\n-    ThreadFromGlobalPool background_thread;\n-    std::atomic<bool> background_thread_can_start = false;\n-    std::atomic<bool> background_thread_should_exit = false;\n-    std::condition_variable background_thread_wake_up;\n-};\n-\n-}\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00961_temporary_live_view_watch.reference b/tests/queries/0_stateless/00961_temporary_live_view_watch.reference\ndeleted file mode 100644\nindex 6fbbedf1b21f..000000000000\n--- a/tests/queries/0_stateless/00961_temporary_live_view_watch.reference\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-0\t1\n-6\t2\n-21\t3\ndiff --git a/tests/queries/0_stateless/00961_temporary_live_view_watch.sql b/tests/queries/0_stateless/00961_temporary_live_view_watch.sql\ndeleted file mode 100644\nindex 8bf6fa5e07bb..000000000000\n--- a/tests/queries/0_stateless/00961_temporary_live_view_watch.sql\n+++ /dev/null\n@@ -1,22 +0,0 @@\n--- Tags: no-replicated-database, no-parallel, no-fasttest\n-\n-SET allow_experimental_live_view = 1;\n-\n-DROP TABLE IF EXISTS lv;\n-DROP TABLE IF EXISTS mt;\n-\n-CREATE TABLE mt (a Int32) Engine=MergeTree order by tuple();\n-CREATE LIVE VIEW lv WITH TIMEOUT AS SELECT sum(a) FROM mt;\n-\n-WATCH lv LIMIT 0;\n-\n-INSERT INTO mt VALUES (1),(2),(3);\n-\n-WATCH lv LIMIT 0;\n-\n-INSERT INTO mt VALUES (4),(5),(6);\n-\n-WATCH lv LIMIT 0;\n-\n-DROP TABLE lv;\n-DROP TABLE mt;\ndiff --git a/tests/queries/0_stateless/00962_live_view_periodic_refresh_and_timeout.py b/tests/queries/0_stateless/00962_live_view_periodic_refresh_and_timeout.py\nindex 3bc649e92dce..983b330e24ae 100755\n--- a/tests/queries/0_stateless/00962_live_view_periodic_refresh_and_timeout.py\n+++ b/tests/queries/0_stateless/00962_live_view_periodic_refresh_and_timeout.py\n@@ -29,7 +29,7 @@\n     client1.send(\"DROP TABLE IF EXISTS test.lv\")\n     client1.expect(prompt)\n     client1.send(\n-        \"CREATE LIVE VIEW test.lv WITH TIMEOUT 60 AND REFRESH 1\"\n+        \"CREATE LIVE VIEW test.lv WITH REFRESH 1\"\n         \" AS SELECT value FROM system.events WHERE event = 'OSCPUVirtualTimeMicroseconds'\"\n     )\n     client1.expect(prompt)\n@@ -43,16 +43,3 @@\n     if match.groups()[1]:\n         client1.send(client1.command)\n         client1.expect(prompt)\n-    # poll until live view table is dropped\n-    start_time = time.time()\n-    while True:\n-        client1.send(\"SELECT * FROM test.lv FORMAT JSONEachRow\")\n-        client1.expect(prompt)\n-        if \"Table test.lv doesn't exist\" in client1.before:\n-            break\n-        if time.time() - start_time > 90:\n-            break\n-    # check table is dropped\n-    client1.send(\"DROP TABLE test.lv\")\n-    client1.expect(\"Table test.lv doesn't exist\")\n-    client1.expect(prompt)\ndiff --git a/tests/queries/0_stateless/00962_temporary_live_view_watch_live.py b/tests/queries/0_stateless/00962_temporary_live_view_watch_live.py\ndeleted file mode 100755\nindex 0358c28bf917..000000000000\n--- a/tests/queries/0_stateless/00962_temporary_live_view_watch_live.py\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-#!/usr/bin/env python3\n-# Tags: no-replicated-database, no-parallel, no-fasttest\n-\n-import os\n-import sys\n-import signal\n-\n-CURDIR = os.path.dirname(os.path.realpath(__file__))\n-sys.path.insert(0, os.path.join(CURDIR, \"helpers\"))\n-\n-from client import client, prompt, end_of_block\n-\n-log = None\n-# uncomment the line below for debugging\n-# log=sys.stdout\n-\n-with client(name=\"client1>\", log=log) as client1, client(\n-    name=\"client2>\", log=log\n-) as client2:\n-    client1.expect(prompt)\n-    client2.expect(prompt)\n-\n-    client1.send(\"SET allow_experimental_live_view = 1\")\n-    client1.expect(prompt)\n-    client2.send(\"SET allow_experimental_live_view = 1\")\n-    client2.expect(prompt)\n-\n-    client1.send(\"DROP TABLE IF EXISTS test.lv\")\n-    client1.expect(prompt)\n-    client1.send(\"DROP TABLE IF EXISTS test.mt\")\n-    client1.expect(prompt)\n-    client1.send(\"CREATE TABLE test.mt (a Int32) Engine=MergeTree order by tuple()\")\n-    client1.expect(prompt)\n-    client1.send(\"CREATE LIVE VIEW test.lv WITH TIMEOUT AS SELECT sum(a) FROM test.mt\")\n-    client1.expect(prompt)\n-    client1.send(\"WATCH test.lv\")\n-    client1.expect(\"_version\")\n-    client1.expect(r\"0.*1\" + end_of_block)\n-    client2.send(\"INSERT INTO test.mt VALUES (1),(2),(3)\")\n-    client1.expect(r\"6.*2\" + end_of_block)\n-    client2.send(\"INSERT INTO test.mt VALUES (4),(5),(6)\")\n-    client1.expect(r\"21.*3\" + end_of_block)\n-    # send Ctrl-C\n-    client1.send(\"\\x03\", eol=\"\")\n-    match = client1.expect(\"(%s)|([#\\$] )\" % prompt)\n-    if match.groups()[1]:\n-        client1.send(client1.command)\n-        client1.expect(prompt)\n-    client1.send(\"DROP TABLE test.lv\")\n-    client1.expect(prompt)\n-    client1.send(\"DROP TABLE test.mt\")\n-    client1.expect(prompt)\ndiff --git a/tests/queries/0_stateless/00962_temporary_live_view_watch_live.reference b/tests/queries/0_stateless/00962_temporary_live_view_watch_live.reference\ndeleted file mode 100644\nindex e69de29bb2d1..000000000000\ndiff --git a/tests/queries/0_stateless/00963_temporary_live_view_watch_live_timeout.reference b/tests/queries/0_stateless/00963_temporary_live_view_watch_live_timeout.reference\ndeleted file mode 100644\nindex e69de29bb2d1..000000000000\ndiff --git a/tests/queries/0_stateless/00964_live_view_watch_events_heartbeat.py b/tests/queries/0_stateless/00964_live_view_watch_events_heartbeat.py\nindex bafb283e487e..c8902203a3d7 100755\n--- a/tests/queries/0_stateless/00964_live_view_watch_events_heartbeat.py\n+++ b/tests/queries/0_stateless/00964_live_view_watch_events_heartbeat.py\n@@ -33,7 +33,7 @@\n     client1.expect(prompt)\n     client1.send(\"CREATE TABLE test.mt (a Int32) Engine=MergeTree order by tuple()\")\n     client1.expect(prompt)\n-    client1.send(\"CREATE LIVE VIEW test.lv WITH TIMEOUT AS SELECT sum(a) FROM test.mt\")\n+    client1.send(\"CREATE LIVE VIEW test.lv AS SELECT sum(a) FROM test.mt\")\n     client1.expect(prompt)\n     client1.send(\"WATCH test.lv EVENTS FORMAT CSV\")\n     client1.expect(\"Progress: 1.00 rows.*\\)\")\ndiff --git a/tests/queries/0_stateless/00965_live_view_watch_heartbeat.py b/tests/queries/0_stateless/00965_live_view_watch_heartbeat.py\nindex 3cb1220bb49b..b499f673cc0e 100755\n--- a/tests/queries/0_stateless/00965_live_view_watch_heartbeat.py\n+++ b/tests/queries/0_stateless/00965_live_view_watch_heartbeat.py\n@@ -33,7 +33,7 @@\n     client1.expect(prompt)\n     client1.send(\"CREATE TABLE test.mt (a Int32) Engine=MergeTree order by tuple()\")\n     client1.expect(prompt)\n-    client1.send(\"CREATE LIVE VIEW test.lv WITH TIMEOUT AS SELECT sum(a) FROM test.mt\")\n+    client1.send(\"CREATE LIVE VIEW test.lv AS SELECT sum(a) FROM test.mt\")\n     client1.expect(prompt)\n     client1.send(\"WATCH test.lv\")\n     client1.expect(\"_version\")\ndiff --git a/tests/queries/0_stateless/00980_create_temporary_live_view.reference b/tests/queries/0_stateless/00980_create_temporary_live_view.reference\ndeleted file mode 100644\nindex 49d86fc2fbf3..000000000000\n--- a/tests/queries/0_stateless/00980_create_temporary_live_view.reference\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-temporary_live_view_timeout\t5\n-live_view_heartbeat_interval\t15\n-lv\n-0\ndiff --git a/tests/queries/0_stateless/00980_create_temporary_live_view.sql b/tests/queries/0_stateless/00980_create_temporary_live_view.sql\ndeleted file mode 100644\nindex e01a6d9643ee..000000000000\n--- a/tests/queries/0_stateless/00980_create_temporary_live_view.sql\n+++ /dev/null\n@@ -1,18 +0,0 @@\n--- Tags: no-replicated-database, no-parallel, no-fasttest\n-\n-SET allow_experimental_live_view = 1;\n-\n-DROP TABLE IF EXISTS lv;\n-DROP TABLE IF EXISTS mt;\n-\n-SELECT name, value from system.settings WHERE name = 'temporary_live_view_timeout';\n-SELECT name, value from system.settings WHERE name = 'live_view_heartbeat_interval';\n-\n-CREATE TABLE mt (a Int32) Engine=MergeTree order by tuple();\n-CREATE LIVE VIEW lv WITH TIMEOUT 1 AS SELECT sum(a) FROM mt;\n-\n-SHOW TABLES WHERE database=currentDatabase() and name LIKE 'lv';\n-SELECT sleep(2);\n-SHOW TABLES WHERE database=currentDatabase() and name LIKE 'lv';\n-\n-DROP TABLE mt;\ndiff --git a/tests/queries/0_stateless/00991_temporary_live_view_watch_events_heartbeat.python b/tests/queries/0_stateless/00991_temporary_live_view_watch_events_heartbeat.python\ndeleted file mode 100644\nindex 8ddb1a1ea81a..000000000000\n--- a/tests/queries/0_stateless/00991_temporary_live_view_watch_events_heartbeat.python\n+++ /dev/null\n@@ -1,83 +0,0 @@\n-#!/usr/bin/env python3\n-\n-import subprocess\n-import threading\n-import queue as queue\n-import os\n-import sys\n-import signal\n-\n-\n-CLICKHOUSE_CLIENT = os.environ.get('CLICKHOUSE_CLIENT')\n-CLICKHOUSE_CURL = os.environ.get('CLICKHOUSE_CURL')\n-CLICKHOUSE_URL = os.environ.get('CLICKHOUSE_URL')\n-\n-\n-def send_query(query):\n-    cmd = list(CLICKHOUSE_CLIENT.split())\n-    cmd += ['--query', query]\n-    # print(cmd)\n-    return subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout\n-\n-\n-def send_query_in_process_group(query):\n-    cmd = list(CLICKHOUSE_CLIENT.split())\n-    cmd += ['--query', query, '--live_view_heartbeat_interval=1', '--progress']\n-    # print(cmd)\n-    return subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, preexec_fn=os.setsid)\n-\n-\n-def read_lines_and_push_to_queue(pipe, queue):\n-    try:\n-        for line in iter(pipe.readline, ''):\n-            line = line.strip()\n-            # print(line)\n-            sys.stdout.flush()\n-            queue.put(line)\n-    except KeyboardInterrupt:\n-        pass\n-\n-    queue.put(None)\n-\n-\n-def test():\n-    send_query('DROP TABLE IF EXISTS test.lv').read()\n-    send_query('DROP TABLE IF EXISTS test.mt').read()\n-    send_query('CREATE TABLE test.mt (a Int32) Engine=MergeTree order by tuple()').read()\n-    send_query('CREATE LIVE VIEW test.lv WITH TIMEOUT AS SELECT sum(a) FROM test.mt').read()\n-\n-    q = queue.Queue()\n-    p = send_query_in_process_group('WATCH test.lv')\n-    thread = threading.Thread(target=read_lines_and_push_to_queue, args=(p.stdout, q))\n-    thread.start()\n-\n-    line = q.get()\n-    # print(line)\n-    assert (line.endswith('0\\t1'))\n-    assert ('Progress: 0.00 rows' in line)\n-\n-    send_query('INSERT INTO test.mt VALUES (1),(2),(3)').read()\n-    line = q.get()\n-    assert (line.endswith('6\\t2'))\n-    assert ('Progress: 1.00 rows' in line)\n-\n-    # send_query('INSERT INTO test.mt VALUES (4),(5),(6)').read()\n-    # line = q.get()\n-    # print(line)\n-    # assert (line.endswith('6\\t2'))\n-    # assert ('Progress: 1.00 rows' in line)\n-\n-    # Send Ctrl+C to client.\n-    os.killpg(os.getpgid(p.pid), signal.SIGINT)\n-    # This insert shouldn't affect lv.\n-    send_query('INSERT INTO test.mt VALUES (7),(8),(9)').read()\n-    line = q.get()\n-    # print(line)\n-    # assert (line is None)\n-\n-    send_query('DROP TABLE if exists test.lv').read()\n-    send_query('DROP TABLE if exists test.lv').read()\n-\n-    thread.join()\n-\n-test()\ndiff --git a/tests/queries/0_stateless/00991_temporary_live_view_watch_events_heartbeat.reference b/tests/queries/0_stateless/00991_temporary_live_view_watch_events_heartbeat.reference\ndeleted file mode 100644\nindex e69de29bb2d1..000000000000\ndiff --git a/tests/queries/0_stateless/00991_temporary_live_view_watch_live.python b/tests/queries/0_stateless/00991_temporary_live_view_watch_live.python\ndeleted file mode 100644\nindex a417cdf29376..000000000000\n--- a/tests/queries/0_stateless/00991_temporary_live_view_watch_live.python\n+++ /dev/null\n@@ -1,81 +0,0 @@\n-#!/usr/bin/env python3\n-\n-import subprocess\n-import threading\n-import queue as queue\n-import os\n-import sys\n-import signal\n-\n-\n-CLICKHOUSE_CLIENT = os.environ.get('CLICKHOUSE_CLIENT')\n-CLICKHOUSE_CURL = os.environ.get('CLICKHOUSE_CURL')\n-CLICKHOUSE_URL = os.environ.get('CLICKHOUSE_URL')\n-\n-\n-def send_query(query):\n-    cmd = list(CLICKHOUSE_CLIENT.split())\n-    cmd += ['--query', query]\n-    # print(cmd)\n-    return subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout\n-\n-\n-def send_query_in_process_group(query):\n-    cmd = list(CLICKHOUSE_CLIENT.split())\n-    cmd += ['--query', query]\n-    # print(cmd)\n-    return subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, preexec_fn=os.setsid)\n-\n-\n-def read_lines_and_push_to_queue(pipe, queue):\n-    try:\n-        for line in iter(pipe.readline, ''):\n-            line = line.strip()\n-            print(line)\n-            sys.stdout.flush()\n-            queue.put(line)\n-    except KeyboardInterrupt:\n-        pass\n-\n-    queue.put(None)\n-\n-\n-def test():\n-    send_query('DROP TABLE IF EXISTS test.lv').read()\n-    send_query('DROP TABLE IF EXISTS test.mt').read()\n-    send_query('CREATE TABLE test.mt (a Int32) Engine=MergeTree order by tuple()').read()\n-    send_query('CREATE LIVE VIEW test.lv WITH TIMEOUT AS SELECT sum(a) FROM test.mt').read()\n-\n-    q = queue.Queue()\n-    p = send_query_in_process_group('WATCH test.lv')\n-    thread = threading.Thread(target=read_lines_and_push_to_queue, args=(p.stdout, q))\n-    thread.start()\n-\n-    line = q.get()\n-    print(line)\n-    assert (line == '0\\t1')\n-\n-    send_query('INSERT INTO test.mt VALUES (1),(2),(3)').read()\n-    line = q.get()\n-    print(line)\n-    assert (line == '6\\t2')\n-\n-    send_query('INSERT INTO test.mt VALUES (4),(5),(6)').read()\n-    line = q.get()\n-    print(line)\n-    assert (line == '21\\t3')\n-\n-    # Send Ctrl+C to client.\n-    os.killpg(os.getpgid(p.pid), signal.SIGINT)\n-    # This insert shouldn't affect lv.\n-    send_query('INSERT INTO test.mt VALUES (7),(8),(9)').read()\n-    line = q.get()\n-    print(line)\n-    assert (line is None)\n-\n-    send_query('DROP TABLE if exists test.lv').read()\n-    send_query('DROP TABLE if exists test.lv').read()\n-\n-    thread.join()\n-\n-test()\ndiff --git a/tests/queries/0_stateless/00991_temporary_live_view_watch_live.reference b/tests/queries/0_stateless/00991_temporary_live_view_watch_live.reference\ndeleted file mode 100644\nindex 1e94cdade415..000000000000\n--- a/tests/queries/0_stateless/00991_temporary_live_view_watch_live.reference\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-0\t1\n-0\t1\n-6\t2\n-6\t2\n-21\t3\n-21\t3\n-None\n",
  "problem_statement": "Remove TEMPORARY LIVE VIEW\nTEMPORARY LIVE VIEW is a rarely used feature, but it makes some complications.\r\nIt looks like a temporary table while it behaves not like a temporary table.\r\n\r\nIt can make the implementation of #31497 more complex.\n",
  "hints_text": "",
  "created_at": "2022-10-07T22:17:56Z"
}