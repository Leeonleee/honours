{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 31169,
  "instance_id": "ClickHouse__ClickHouse-31169",
  "issue_numbers": [
    "30801"
  ],
  "base_commit": "4f5745108eee1f6fd437247736307ae9e27b7e56",
  "patch": "diff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex dda7f235d972..f8f6bfff0aeb 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -276,27 +276,6 @@ const KeyCondition::AtomMap KeyCondition::atom_map\n             return true;\n         }\n     },\n-    {\n-        \"notLike\",\n-        [] (RPNElement & out, const Field & value)\n-        {\n-            if (value.getType() != Field::Types::String)\n-                return false;\n-\n-            String prefix = extractFixedPrefixFromLikePattern(value.get<const String &>());\n-            if (prefix.empty())\n-                return false;\n-\n-            String right_bound = firstStringThatIsGreaterThanAllStringsWithPrefix(prefix);\n-\n-            out.function = RPNElement::FUNCTION_NOT_IN_RANGE;\n-            out.range = !right_bound.empty()\n-                        ? Range(prefix, true, right_bound, false)\n-                        : Range::createLeftBounded(prefix, true);\n-\n-            return true;\n-        }\n-    },\n     {\n         \"startsWith\",\n         [] (RPNElement & out, const Field & value)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01891_not_like_partition_prune.reference b/tests/queries/0_stateless/01891_not_like_partition_prune.reference\nnew file mode 100644\nindex 000000000000..249697548b7b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01891_not_like_partition_prune.reference\n@@ -0,0 +1,6 @@\n+1.1\n+1\n+1.12\n+1.2\n+1\n+1.1\ndiff --git a/tests/queries/0_stateless/01891_not_like_partition_prune.sql b/tests/queries/0_stateless/01891_not_like_partition_prune.sql\nnew file mode 100644\nindex 000000000000..5346a7f08a8a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01891_not_like_partition_prune.sql\n@@ -0,0 +1,9 @@\n+drop table if exists test;\n+\n+create table test (a String)  Engine MergeTree order by a partition by a;\n+insert into test values('1'), ('1.1'), ('1.2'), ('1.12');\n+\n+select * from test where a like '1%1' order by a;\n+select * from test where a not like '1%1' order by a;\n+select * from test where a not like '1%2' order by a;\n+drop table test;\n",
  "problem_statement": "Not Like to Range in KeyCondition seems to be incorrect\n@zhyass and I found some codes may be incorrect in\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/33ffe11d0397aa6904c246172223b1da1fbcf1cc/src/Storages/MergeTree/KeyCondition.cpp#L280-L297\r\n\r\nIt tries to extract fixed prefix from the like pattern to find the range, but it's wrong, A counterexample is \uff1a\r\n\r\nlike_pattern  -> \"a%c\",  the prefix will be \"a\" and the range will be ` Range(\"a\", true,\"b\", false)` yet the String \"axxxxxd\" still not match match this pattern (  axxxxxd not like a%c => true  ).\r\n\r\n`Not like` is not the reverse of `Like` in continuous key ranges.\r\n\r\nThe only special case to work fine for \"not like\" to range is that string pattern ends with \"%\" or \"_\" , eg:    'a%', 'a\\_'\r\n\r\ncc @alexey-milovidov \n",
  "hints_text": "https://github.com/ClickHouse/ClickHouse/pull/5965  cc @dimarub2000 \nI also encountered some confusion here. \r\nhttps://github.com/ClickHouse/ClickHouse/blob/33ffe11d0397aa6904c246172223b1da1fbcf1cc/src/Storages/MergeTree/KeyCondition.cpp#L70-L77\r\nIf the char is `'\\\\'`, skip it. It applies to `\"\\\\%\"`, `\"\\\\_\"`, `\"\\\\\\\\\"`.  But other scenarios are in doubt. \r\nFor example: \r\nIf the string is `\"a\\\\c\"`, the extract fixed prefix will be `\"ac\"`.  \r\nMaybe the prefix is incorrect, because the result of `select 'ac' like 'a\\\\c'` is 0. And `select 'a\\\\c' like 'a\\\\c'` is 1, maybe the fixed prefix should be `\"a\\\\c\"`\r\n```\r\nd95498e21498 :) select 'ac' like 'a\\\\c';\r\n\r\nSELECT 'ac' LIKE 'a\\\\c'\r\n\r\nQuery id: dd5c009a-3b63-4a38-97cb-74a4076d5cac\r\n\r\n\u250c\u2500like('ac', 'a\\\\c')\u2500\u2510\r\n\u2502                  0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.092 sec. \r\n\r\nd95498e21498 :) select 'a\\\\c' like 'a\\\\c';\r\n\r\nSELECT 'a\\\\c' LIKE 'a\\\\c'\r\n\r\nQuery id: acbe84dc-6d44-4e66-a98a-0503287ced67\r\n\r\n\u250c\u2500like('a\\\\c', 'a\\\\c')\u2500\u2510\r\n\u2502                    1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.095 sec. \r\n```\r\n",
  "created_at": "2021-11-09T03:04:37Z"
}