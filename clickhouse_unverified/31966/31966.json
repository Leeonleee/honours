{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 31966,
  "instance_id": "ClickHouse__ClickHouse-31966",
  "issue_numbers": [
    "22626"
  ],
  "base_commit": "6c71a7c40f1ea6816ab2b9ce42ba4290ff47cb83",
  "patch": "diff --git a/src/Core/DecimalComparison.h b/src/Core/DecimalComparison.h\nindex 0398ec5cbac1..b8498b6c84b1 100644\n--- a/src/Core/DecimalComparison.h\n+++ b/src/Core/DecimalComparison.h\n@@ -52,7 +52,6 @@ struct DecCompareInt\n     using TypeB = Type;\n };\n \n-///\n template <typename A, typename B, template <typename, typename> typename Operation, bool _check_overflow = true,\n     bool _actual = is_decimal<A> || is_decimal<B>>\n class DecimalComparison\ndiff --git a/src/DataTypes/IDataType.h b/src/DataTypes/IDataType.h\nindex 85644b6f6cae..9f3458b1ecef 100644\n--- a/src/DataTypes/IDataType.h\n+++ b/src/DataTypes/IDataType.h\n@@ -506,7 +506,7 @@ inline bool isNotCreatable(const T & data_type)\n inline bool isNotDecimalButComparableToDecimal(const DataTypePtr & data_type)\n {\n     WhichDataType which(data_type);\n-    return which.isInt() || which.isUInt();\n+    return which.isInt() || which.isUInt() || which.isFloat();\n }\n \n inline bool isCompilableType(const DataTypePtr & data_type)\ndiff --git a/src/Functions/FunctionsComparison.h b/src/Functions/FunctionsComparison.h\nindex 945090781dcc..a0c7fc643d2a 100644\n--- a/src/Functions/FunctionsComparison.h\n+++ b/src/Functions/FunctionsComparison.h\n@@ -11,17 +11,17 @@\n #include <Columns/ColumnTuple.h>\n #include <Columns/ColumnArray.h>\n \n-#include <DataTypes/DataTypesNumber.h>\n-#include <DataTypes/DataTypeNullable.h>\n-#include <DataTypes/DataTypeNothing.h>\n+#include <DataTypes/DataTypeDate.h>\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeDateTime64.h>\n-#include <DataTypes/DataTypeDate.h>\n-#include <DataTypes/DataTypeString.h>\n-#include <DataTypes/DataTypeUUID.h>\n+#include <DataTypes/DataTypeEnum.h>\n #include <DataTypes/DataTypeFixedString.h>\n+#include <DataTypes/DataTypeNothing.h>\n+#include <DataTypes/DataTypeNullable.h>\n+#include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypeTuple.h>\n-#include <DataTypes/DataTypeEnum.h>\n+#include <DataTypes/DataTypeUUID.h>\n+#include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/getLeastSupertype.h>\n \n #include <Interpreters/convertFieldToType.h>\n@@ -1175,8 +1175,11 @@ class FunctionComparison : public IFunction\n         const bool left_is_num = col_left_untyped->isNumeric();\n         const bool right_is_num = col_right_untyped->isNumeric();\n \n-        const bool left_is_string = isStringOrFixedString(which_left);\n-        const bool right_is_string = isStringOrFixedString(which_right);\n+        const bool left_is_string = which_left.isStringOrFixedString();\n+        const bool right_is_string = which_right.isStringOrFixedString();\n+\n+        const bool left_is_float = which_left.isFloat();\n+        const bool right_is_float = which_right.isFloat();\n \n         bool date_and_datetime = (which_left.idx != which_right.idx) && (which_left.isDate() || which_left.isDate32() || which_left.isDateTime() || which_left.isDateTime64())\n             && (which_right.isDate() || which_right.isDate32() || which_right.isDateTime() || which_right.isDateTime64());\n@@ -1232,11 +1235,23 @@ class FunctionComparison : public IFunction\n             }\n             else\n             {\n-                // compare\n+                /// Check does another data type is comparable to Decimal, includes Int and Float.\n                 if (!allowDecimalComparison(left_type, right_type) && !date_and_datetime)\n                     throw Exception(\n                         \"No operation \" + getName() + \" between \" + left_type->getName() + \" and \" + right_type->getName(),\n                         ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+                /// When Decimal comparing to Float32/64, we convert both of them into Float64.\n+                /// Other systems like MySQL and Spark also do as this.\n+                if (left_is_float || right_is_float)\n+                {\n+                    const auto converted_type = std::make_shared<DataTypeFloat64>();\n+                    ColumnPtr c0_converted = castColumn(col_with_type_and_name_left, converted_type);\n+                    ColumnPtr c1_converted = castColumn(col_with_type_and_name_right, converted_type);\n+\n+                    auto new_arguments\n+                        = ColumnsWithTypeAndName{{c0_converted, converted_type, \"left\"}, {c1_converted, converted_type, \"right\"}};\n+                    return executeImpl(new_arguments, result_type, input_rows_count);\n+                }\n                 return executeDecimal(col_with_type_and_name_left, col_with_type_and_name_right);\n             }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00700_decimal_compare.reference b/tests/queries/0_stateless/00700_decimal_compare.reference\nindex 6b2787642b71..623c3161b248 100644\n--- a/tests/queries/0_stateless/00700_decimal_compare.reference\n+++ b/tests/queries/0_stateless/00700_decimal_compare.reference\n@@ -1,5 +1,9 @@\n 0\n 1\n+0\n+1\n+0\n+1\n -42\t-42\t1\t0\t0\t0\t1\t1\n 42\t42\t1\t0\t0\t0\t1\t1\n -42\t-42.42\t0\t0\t1\t1\t0\t1\n@@ -17,6 +21,8 @@\n 42\t42\t42\n 42\t42\t42\n 42\t42\t42\n+42\t42\t42\n+42\t42\t42\n -42\t-42.42\t-42\t-42\n 42\t42\t42\t42.42\n -42\t-42\t-42.42\ndiff --git a/tests/queries/0_stateless/00700_decimal_compare.sql b/tests/queries/0_stateless/00700_decimal_compare.sql\nindex ae2f5790570f..41ff8b381028 100644\n--- a/tests/queries/0_stateless/00700_decimal_compare.sql\n+++ b/tests/queries/0_stateless/00700_decimal_compare.sql\n@@ -17,8 +17,8 @@ CREATE TABLE IF NOT EXISTS decimal\n INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (42, 42, 42, 0.42, 0.42, 0.42, 42.42, 42.42, 42.42, 42.42);\n INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (-42, -42, -42, -0.42, -0.42, -0.42, -42.42, -42.42, -42.42, -42.42);\n \n-SELECT a > toFloat64(0) FROM decimal; -- { serverError 43 }\n-SELECT g > toFloat32(0) FROM decimal; -- { serverError 43 }\n+SELECT a > toFloat64(0) FROM decimal ORDER BY a;\n+SELECT g > toFloat32(0) FROM decimal ORDER BY g;\n SELECT a > '0.0' FROM decimal ORDER BY a;\n \n SELECT a, b, a = b, a < b, a > b, a != b, a <= b, a >= b FROM decimal ORDER BY a;\n@@ -36,8 +36,8 @@ SELECT a, b, c FROM decimal WHERE a = toInt8(42) AND b = toInt8(42) AND c = toIn\n SELECT a, b, c FROM decimal WHERE a = toInt16(42) AND b = toInt16(42) AND c = toInt16(42);\n SELECT a, b, c FROM decimal WHERE a = toInt32(42) AND b = toInt32(42) AND c = toInt32(42);\n SELECT a, b, c FROM decimal WHERE a = toInt64(42) AND b = toInt64(42) AND c = toInt64(42);\n-SELECT a, b, c FROM decimal WHERE a = toFloat32(42); -- { serverError 43 }\n-SELECT a, b, c FROM decimal WHERE a = toFloat64(42); -- { serverError 43 }\n+SELECT a, b, c FROM decimal WHERE a = toFloat32(42);\n+SELECT a, b, c FROM decimal WHERE a = toFloat64(42);\n \n SELECT least(a, b), least(a, g), greatest(a, b), greatest(a, g) FROM decimal ORDER BY a;\n SELECT least(a, 0), least(b, 0), least(g, 0) FROM decimal ORDER BY a;\ndiff --git a/tests/queries/0_stateless/02124_comparison_betwwen_decimal_and_float.reference b/tests/queries/0_stateless/02124_comparison_betwwen_decimal_and_float.reference\nnew file mode 100644\nindex 000000000000..d718f64bb033\n--- /dev/null\n+++ b/tests/queries/0_stateless/02124_comparison_betwwen_decimal_and_float.reference\n@@ -0,0 +1,34 @@\n+0\n+1\n+0\n+0\n+1\n+0\n+0\n+1\n+0\n+1\n+0\n+0\n+1\n+0\n+0\n+1\n+1\n+1\n+1\n+0\n+1\n+0\n+1\n+0\n+1\n+0\n+1\n+0\n+1\n+0\n+1\n+0\n+1\n+0\ndiff --git a/tests/queries/0_stateless/02124_comparison_betwwen_decimal_and_float.sql b/tests/queries/0_stateless/02124_comparison_betwwen_decimal_and_float.sql\nnew file mode 100644\nindex 000000000000..d8dabbab552a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02124_comparison_betwwen_decimal_and_float.sql\n@@ -0,0 +1,47 @@\n+select CAST(1.0, 'Decimal(15,2)') > CAST(1, 'Float64');\n+select CAST(1.0, 'Decimal(15,2)') = CAST(1, 'Float64');\n+select CAST(1.0, 'Decimal(15,2)') < CAST(1, 'Float64');\n+select CAST(1.0, 'Decimal(15,2)') != CAST(1, 'Float64');\n+select CAST(1.0, 'Decimal(15,2)') > CAST(-1, 'Float64');\n+select CAST(1.0, 'Decimal(15,2)') = CAST(-1, 'Float64');\n+select CAST(1.0, 'Decimal(15,2)') < CAST(-1, 'Float64');\n+select CAST(1.0, 'Decimal(15,2)') != CAST(-1, 'Float64');\n+select CAST(1.0, 'Decimal(15,2)') > CAST(1, 'Float32');\n+select CAST(1.0, 'Decimal(15,2)') = CAST(1, 'Float32');\n+select CAST(1.0, 'Decimal(15,2)') < CAST(1, 'Float32');\n+select CAST(1.0, 'Decimal(15,2)') != CAST(1, 'Float32');\n+select CAST(1.0, 'Decimal(15,2)') > CAST(-1, 'Float32');\n+select CAST(1.0, 'Decimal(15,2)') = CAST(-1, 'Float32');\n+select CAST(1.0, 'Decimal(15,2)') < CAST(-1, 'Float32');\n+select CAST(1.0, 'Decimal(15,2)') != CAST(-1, 'Float32');\n+\n+SELECT toDecimal32('11.00', 2) > 1.;\n+\n+SELECT 0.1000000000000000055511151231257827021181583404541015625::Decimal256(70) = 0.1;\n+\n+DROP TABLE IF EXISTS t;\n+\n+CREATE TABLE t\n+(\n+\td1 Decimal32(5),\n+\td2 Decimal64(10),\n+\td3 Decimal128(30),\n+\td4 Decimal256(50),\n+\tf1 Float32,\n+\tf2 Float32\n+)ENGINE = Memory;\n+\n+INSERT INTO t values (-1.5, -1.5, -1.5, -1.5, 1.5, 1.5);\n+INSERT INTO t values (1.5, 1.5, 1.5, 1.5, -1.5, -1.5);\n+\n+SELECT d1 > f1 FROM t ORDER BY f1;\n+SELECT d2 > f1 FROM t ORDER BY f1;\n+SELECT d3 > f1 FROM t ORDER BY f1;\n+SELECT d4 > f1 FROM t ORDER BY f1;\n+\n+SELECT d1 > f2 FROM t ORDER BY f2;\n+SELECT d2 > f2 FROM t ORDER BY f2;\n+SELECT d3 > f2 FROM t ORDER BY f2;\n+SELECT d4 > f2 FROM t ORDER BY f2;\n+\n+DROP TABLE t;\n",
  "problem_statement": "No operation greater between Decimal(9, 2) and Float64\n**Describe the bug**\r\nIt's not possible to compare Decimal and Float values. But actually both of them point to some specific value on real number line, so we can compare and that wouldn't produce any precision loss.\r\n\r\n**How to reproduce**\r\nClickhouse 21.5\r\n```\r\nSELECT toDecimal32('11.00', 2) > 1.\r\n\r\nQuery id: f2c1cba1-748e-42ea-83ac-e117b542d576\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nReceived exception from server (version 21.5.1):\r\nCode: 43. DB::Exception: Received from localhost:9000. DB::Exception: No operation greater between Decimal(9, 2) and Float64: While processing toDecimal32('11.00', 2) > 1..\r\n```\r\n\r\n\r\n\r\nLoosely related https://github.com/ClickHouse/ClickHouse/issues/5690\n",
  "hints_text": "Probably should be not a bug, but a feature.",
  "created_at": "2021-11-30T03:27:36Z"
}