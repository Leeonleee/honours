{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67558,
  "instance_id": "ClickHouse__ClickHouse-67558",
  "issue_numbers": [
    "66442"
  ],
  "base_commit": "1ab0b8f14c9b57b63fd708fec3683ebcd5f2c644",
  "patch": "diff --git a/src/Functions/DateTimeTransforms.h b/src/Functions/DateTimeTransforms.h\nindex 86cedbdec30e..6f0bdf406db3 100644\n--- a/src/Functions/DateTimeTransforms.h\n+++ b/src/Functions/DateTimeTransforms.h\n@@ -24,7 +24,7 @@ namespace DB\n \n static constexpr auto millisecond_multiplier = 1'000;\n static constexpr auto microsecond_multiplier = 1'000'000;\n-static constexpr auto nanosecond_multiplier  = 1'000'000'000;\n+static constexpr auto nanosecond_multiplier = 1'000'000'000;\n \n static constexpr FormatSettings::DateTimeOverflowBehavior default_date_time_overflow_behavior = FormatSettings::DateTimeOverflowBehavior::Ignore;\n \n@@ -381,11 +381,13 @@ struct ToStartOfWeekImpl\n \n     static UInt16 execute(Int64 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t), week_mode);\n+        const int res = time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t), week_mode);\n+        return std::max(res, 0);\n     }\n     static UInt16 execute(UInt32 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t), week_mode);\n+        const int res = time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t), week_mode);\n+        return std::max(res, 0);\n     }\n     static UInt16 execute(Int32 d, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02403_enable_extended_results_for_datetime_functions.reference b/tests/queries/0_stateless/02403_enable_extended_results_for_datetime_functions.reference\nindex c830d7900006..147e368b5c91 100644\n--- a/tests/queries/0_stateless/02403_enable_extended_results_for_datetime_functions.reference\n+++ b/tests/queries/0_stateless/02403_enable_extended_results_for_datetime_functions.reference\n@@ -64,7 +64,7 @@ toStartOfMonth;toDateTime64;false\t2099-07-07\n type;toStartOfMonth;toDateTime64;false\tDate\n toStartOfWeek;toDate32;false\t2099-07-07\n type;toStartOfWeek;toDate32;false\tDate\n-toStartOfWeek;toDateTime64;false\t2099-07-07\n+toStartOfWeek;toDateTime64;false\t1970-01-01\n type;toStartOfWeek;toDateTime64;false\tDate\n toMonday;toDate32;false\t2099-07-08\n type;toMonday;toDate32;false\tDate\ndiff --git a/tests/queries/0_stateless/03215_toStartOfWeek_with_dateTime64_fix.reference b/tests/queries/0_stateless/03215_toStartOfWeek_with_dateTime64_fix.reference\nnew file mode 100644\nindex 000000000000..fd698107f22b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03215_toStartOfWeek_with_dateTime64_fix.reference\n@@ -0,0 +1,2 @@\n+1970-01-01\n+1970-01-01\ndiff --git a/tests/queries/0_stateless/03215_toStartOfWeek_with_dateTime64_fix.sql b/tests/queries/0_stateless/03215_toStartOfWeek_with_dateTime64_fix.sql\nnew file mode 100644\nindex 000000000000..1769d96aa8d9\n--- /dev/null\n+++ b/tests/queries/0_stateless/03215_toStartOfWeek_with_dateTime64_fix.sql\n@@ -0,0 +1,2 @@\n+SELECT toStartOfWeek(toDateTime64('1970-01-01', 6));\n+SELECT toStartOfWeek(toDateTime('1970-01-01'));\n",
  "problem_statement": "toStartOfWeek returns invalid week when applied to 1970-01-01 as DateTime64\n\r\ntoStartOfWeek returns invalid week '2149-06-03' when applied to '1970-01-01' as DateTime64. I suspect there's some kind of overflow happening. It works fine on DataTime type.\r\nhttps://fiddle.clickhouse.com/6f0d5d76-468c-46ef-8948-8f6490f24240\n",
  "hints_text": "",
  "created_at": "2024-07-31T18:27:16Z",
  "modified_files": [
    "src/Functions/DateTimeTransforms.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02403_enable_extended_results_for_datetime_functions.reference",
    "b/tests/queries/0_stateless/03215_toStartOfWeek_with_dateTime64_fix.reference",
    "b/tests/queries/0_stateless/03215_toStartOfWeek_with_dateTime64_fix.sql"
  ]
}