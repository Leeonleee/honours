{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52432,
  "instance_id": "ClickHouse__ClickHouse-52432",
  "issue_numbers": [
    "52405"
  ],
  "base_commit": "758ec9fa9264d80d672a9f6fe0600c89a2da3aa2",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp b/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp\nindex f6ace6f8025e..727afcb1a994 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp\n@@ -92,6 +92,10 @@ bool optimizeUseNormalProjections(Stack & stack, QueryPlan::Nodes & nodes)\n             break;\n     }\n \n+    /// Dangling query plan node. This might be generated by StorageMerge.\n+    if (iter->node->step.get() == reading)\n+        return false;\n+\n     const auto metadata = reading->getStorageMetadata();\n     const auto & projections = metadata->projections;\n \n@@ -105,8 +109,8 @@ bool optimizeUseNormalProjections(Stack & stack, QueryPlan::Nodes & nodes)\n \n     QueryDAG query;\n     {\n-        auto & clild = iter->node->children[iter->next_child - 1];\n-        if (!query.build(*clild))\n+        auto & child = iter->node->children[iter->next_child - 1];\n+        if (!query.build(*child))\n             return false;\n \n         if (query.dag)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01710_projection_query_plan_optimization_misc.reference b/tests/queries/0_stateless/01710_projection_query_plan_optimization_misc.reference\nnew file mode 100644\nindex 000000000000..9874d6464ab7\n--- /dev/null\n+++ b/tests/queries/0_stateless/01710_projection_query_plan_optimization_misc.reference\n@@ -0,0 +1,1 @@\n+1\t2\ndiff --git a/tests/queries/0_stateless/01710_projection_query_plan_optimization_misc.sql b/tests/queries/0_stateless/01710_projection_query_plan_optimization_misc.sql\nnew file mode 100644\nindex 000000000000..cb565313380f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01710_projection_query_plan_optimization_misc.sql\n@@ -0,0 +1,11 @@\n+drop table if exists t;\n+\n+create table t (x Int32, codectest Int32) engine = MergeTree order by x;\n+\n+alter table t add projection x (select * order by codectest);\n+\n+insert into t values (1, 2);\n+\n+select * from merge('', 't');\n+\n+drop table t;\n",
  "problem_statement": "ClickHouse Server 23.7.1.1659 crashed through alter-table, insert and select statements.\n**Describe the bug**\r\nClickHouse Server 23.7.1.1659 crashed through alter-table, insert and select statements.\r\nI am not sure whether it is a bug, as I do not know the effect of the `add projection` in `alter table`.\r\n\r\n**How to reproduce**\r\nThe SQL statement to reproduce:\r\n```sql\r\ncreate table test_00681 (x Int32, codectest Int32) engine = MergeTree order by x;\r\nalter table test_00681 add projection x (select * order by codectest);\r\ninsert into test_00681 values (1, 2);\r\nselect * from merge('', 'test_00681');\r\n```\r\nIt can be reproduced on the official docker image. (`clickhouse/clickhouse-server:head` and `clickhouse/clickhouse-server:latest`).\r\n\r\nThe log traced by ClickHouse Server:\r\n```\r\nSELECT *\r\nFROM merge('', 'test_00681')\r\n\r\nQuery id: f7bb8dcb-3cf3-4576-80e7-e1ee04be28a5\r\n\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.491630 [ 334 ] <Fatal> BaseDaemon: ########################################\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.491729 [ 334 ] <Fatal> BaseDaemon: (version 23.7.1.1659 (official build), build id: 2A82CED3B49248890AFC97BDD6FE0D5C0590676F, git hash: 234b5047b5cd093b8950bb8de3725eacffe02dc0) (from thread 48) (query_id: f7bb8dcb-3cf3-4576-80e7-e1ee04be28a5) (query: select * from merge('', 'test_00681');) Received signal Segmentation fault (11)\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.491794 [ 334 ] <Fatal> BaseDaemon: Address: 0xfffffffffffffff8. Access: read. Address not mapped to object.\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.491826 [ 334 ] <Fatal> BaseDaemon: Stack trace: 0x000000001536ce21 0x000000001534a582 0x00000000152da21c 0x00000000152d912e 0x00000000144fb99f 0x00000000144f6ab6 0x00000000152c1cc5 0x00000000152d93ca 0x0000000013d7f999 0x00000000140b2825 0x00000000140ae68e 0x0000000014ed69c4 0x0000000014eedc79 0x0000000017e7a154 0x0000000017e7b371 0x0000000017ffd207 0x0000000017ffac3c 0x00007f4807d08609 0x00007f4807c2d133\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.491913 [ 334 ] <Fatal> BaseDaemon: 2. DB::QueryPlanOptimizations::optimizeUseNormalProjections(std::vector<DB::QueryPlanOptimizations::Frame, std::allocator<DB::QueryPlanOptimizations::Frame>>&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x000000001536ce21 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.491959 [ 334 ] <Fatal> BaseDaemon: 3. DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x000000001534a582 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.491999 [ 334 ] <Fatal> BaseDaemon: 4. DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x00000000152da21c in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492035 [ 334 ] <Fatal> BaseDaemon: 5. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000152d912e in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492170 [ 334 ] <Fatal> BaseDaemon: 6. DB::ReadFromMerge::createSources(std::shared_ptr<DB::StorageSnapshot> const&, DB::SelectQueryInfo&, DB::QueryProcessingStage::Enum const&, unsigned long, DB::Block const&, std::vector<DB::ReadFromMerge::AliasData, std::allocator<DB::ReadFromMerge::AliasData>> const&, std::tuple<String, std::shared_ptr<DB::IStorage>, std::shared_ptr<DB::RWLockImpl::LockHolderImpl>, String> const&, std::vector<String, std::allocator<String>>, std::shared_ptr<DB::Context>, unsigned long, bool) @ 0x00000000144fb99f in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492219 [ 334 ] <Fatal> BaseDaemon: 7. DB::ReadFromMerge::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x00000000144f6ab6 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492260 [ 334 ] <Fatal> BaseDaemon: 8. DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x00000000152c1cc5 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492289 [ 334 ] <Fatal> BaseDaemon: 9. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000152d93ca in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492340 [ 334 ] <Fatal> BaseDaemon: 10. DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000013d7f999 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492551 [ 334 ] <Fatal> BaseDaemon: 11. ? @ 0x00000000140b2825 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492592 [ 334 ] <Fatal> BaseDaemon: 12. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x00000000140ae68e in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492628 [ 334 ] <Fatal> BaseDaemon: 13. DB::TCPHandler::runImpl() @ 0x0000000014ed69c4 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492654 [ 334 ] <Fatal> BaseDaemon: 14. DB::TCPHandler::run() @ 0x0000000014eedc79 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492697 [ 334 ] <Fatal> BaseDaemon: 15. Poco::Net::TCPServerConnection::start() @ 0x0000000017e7a154 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492770 [ 334 ] <Fatal> BaseDaemon: 16. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017e7b371 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492811 [ 334 ] <Fatal> BaseDaemon: 17. Poco::PooledThread::run() @ 0x0000000017ffd207 in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492959 [ 334 ] <Fatal> BaseDaemon: 18. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017ffac3c in /usr/bin/clickhouse\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.492985 [ 334 ] <Fatal> BaseDaemon: 19. ? @ 0x00007f4807d08609 in ?\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.493030 [ 334 ] <Fatal> BaseDaemon: 20. clone @ 0x00007f4807c2d133 in ?\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.710391 [ 334 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 7D28AF63E0E09B75DF5876280E0C8DBB)\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.710706 [ 334 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[a23b9f0c72ba] 2023.07.21 09:52:10.710854 [ 334 ] <Fatal> BaseDaemon: No settings were changed\r\n```\n",
  "hints_text": "cc: @amosbird, @KochetovNicolai \nReproduced with `query_plan_optimize_projection = 1`.",
  "created_at": "2023-07-21T13:51:05Z",
  "modified_files": [
    "src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01710_projection_query_plan_optimization_misc.reference",
    "b/tests/queries/0_stateless/01710_projection_query_plan_optimization_misc.sql"
  ]
}