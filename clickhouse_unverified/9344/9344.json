{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9344,
  "instance_id": "ClickHouse__ClickHouse-9344",
  "issue_numbers": [
    "9209"
  ],
  "base_commit": "6c9991ae43bc3f5f9f8576aa8680a2bf0bb37d90",
  "patch": "diff --git a/contrib/simdjson b/contrib/simdjson\nindex 60916318f764..560f0742cc08 160000\n--- a/contrib/simdjson\n+++ b/contrib/simdjson\n@@ -1,1 +1,1 @@\n-Subproject commit 60916318f76432b5d04814c2af50d04ec15664ad\n+Subproject commit 560f0742cc0895d00d78359dbdeb82064a24adb8\ndiff --git a/contrib/simdjson-cmake/CMakeLists.txt b/contrib/simdjson-cmake/CMakeLists.txt\nindex faf0755cce50..a07dcd487be2 100644\n--- a/contrib/simdjson-cmake/CMakeLists.txt\n+++ b/contrib/simdjson-cmake/CMakeLists.txt\n@@ -1,14 +1,13 @@\n set(SIMDJSON_INCLUDE_DIR \"${ClickHouse_SOURCE_DIR}/contrib/simdjson/include\")\n set(SIMDJSON_SRC_DIR \"${SIMDJSON_INCLUDE_DIR}/../src\")\n set(SIMDJSON_SRC\n+    ${SIMDJSON_SRC_DIR}/document.cpp\n+    ${SIMDJSON_SRC_DIR}/error.cpp\n+    ${SIMDJSON_SRC_DIR}/implementation.cpp\n     ${SIMDJSON_SRC_DIR}/jsonioutil.cpp\n     ${SIMDJSON_SRC_DIR}/jsonminifier.cpp\n-    ${SIMDJSON_SRC_DIR}/jsonparser.cpp\n     ${SIMDJSON_SRC_DIR}/stage1_find_marks.cpp\n     ${SIMDJSON_SRC_DIR}/stage2_build_tape.cpp\n-    ${SIMDJSON_SRC_DIR}/parsedjson.cpp\n-    ${SIMDJSON_SRC_DIR}/parsedjsoniterator.cpp\n-    ${SIMDJSON_SRC_DIR}/simdjson.cpp\n )\n \n add_library(${SIMDJSON_LIBRARY} ${SIMDJSON_SRC})\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01085_simdjson_uint64.reference b/dbms/tests/queries/0_stateless/01085_simdjson_uint64.reference\nnew file mode 100644\nindex 000000000000..3580093b9da0\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01085_simdjson_uint64.reference\n@@ -0,0 +1,1 @@\n+\"hello\"\ndiff --git a/dbms/tests/queries/0_stateless/01085_simdjson_uint64.sql b/dbms/tests/queries/0_stateless/01085_simdjson_uint64.sql\nnew file mode 100644\nindex 000000000000..dfa367e1238b\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01085_simdjson_uint64.sql\n@@ -0,0 +1,2 @@\n+WITH '{\"a\": \"hello\", \"b\": 12345678901234567890}' AS json\n+SELECT JSONExtractRaw(json, 'a');\n",
  "problem_statement": "JSON functions cannot parse JSON if the number is integer but does not fit in Int64\n**Describe the bug or unexpected behaviour**\r\n\r\n```\r\n:) WITH '{\"a\": \"hello\", \"b\": 12345678901234567890}' AS json SELECT JSONExtractRaw(json, 'a')\r\n\r\nWITH '{\"a\": \"hello\", \"b\": 12345678901234567890}' AS json\r\nSELECT JSONExtractRaw(json, 'a')\r\n\r\n\u250c\u2500JSONExtractRaw(json, 'a')\u2500\u2510\r\n\u2502                           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.001 sec. \r\n\r\n:) WITH '{\"a\": \"hello\", \"b\": 12345678901234567890.}' AS json SELECT JSONExtractRaw(json, 'a')\r\n\r\nWITH '{\"a\": \"hello\", \"b\": 12345678901234567890.}' AS json\r\nSELECT JSONExtractRaw(json, 'a')\r\n\r\n\u250c\u2500JSONExtractRaw(json, 'a')\u2500\u2510\r\n\u2502                           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.001 sec. \r\n\r\n:) WITH '{\"a\": \"hello\", \"b\": 12345678901234567890.0}' AS json SELECT JSONExtractRaw(json, 'a')\r\n\r\nWITH '{\"a\": \"hello\", \"b\": 12345678901234567890.0}' AS json\r\nSELECT JSONExtractRaw(json, 'a')\r\n\r\n\u250c\u2500JSONExtractRaw(json, 'a')\u2500\u2510\r\n\u2502 \"hello\"                   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.002 sec. \r\n```\n",
  "hints_text": "",
  "created_at": "2020-02-24T18:15:27Z"
}