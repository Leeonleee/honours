{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42573,
  "instance_id": "ClickHouse__ClickHouse-42573",
  "issue_numbers": [
    "42453"
  ],
  "base_commit": "22f87e2bf9e9d5ee0789aae0f852fe062f0b4256",
  "patch": "diff --git a/src/Functions/FunctionBinaryArithmetic.h b/src/Functions/FunctionBinaryArithmetic.h\nindex baa3c65537d9..050234c12658 100644\n--- a/src/Functions/FunctionBinaryArithmetic.h\n+++ b/src/Functions/FunctionBinaryArithmetic.h\n@@ -899,10 +899,10 @@ class FunctionBinaryArithmetic : public IFunction\n             std::swap(new_arguments[0], new_arguments[1]);\n \n         /// Change interval argument type to its representation\n-        new_arguments[1].type = std::make_shared<DataTypeNumber<DataTypeInterval::FieldType>>();\n+        if (WhichDataType(new_arguments[1].type).isInterval())\n+            new_arguments[1].type = std::make_shared<DataTypeNumber<DataTypeInterval::FieldType>>();\n \n         auto function = function_builder->build(new_arguments);\n-\n         return function->execute(new_arguments, result_type, input_rows_count);\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02469_interval_msan.reference b/tests/queries/0_stateless/02469_interval_msan.reference\nnew file mode 100644\nindex 000000000000..c18b4e9b0829\n--- /dev/null\n+++ b/tests/queries/0_stateless/02469_interval_msan.reference\n@@ -0,0 +1,8 @@\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/02469_interval_msan.sql b/tests/queries/0_stateless/02469_interval_msan.sql\nnew file mode 100644\nindex 000000000000..4b4a9f746ea5\n--- /dev/null\n+++ b/tests/queries/0_stateless/02469_interval_msan.sql\n@@ -0,0 +1,19 @@\n+SELECT now() + 1::Int128; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+SELECT now() + 1::Int256; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+SELECT now() + 1::UInt128; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+SELECT now() + 1::UInt256; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+\n+SELECT now() - 1::Int128; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+SELECT now() - 1::Int256; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+SELECT now() - 1::UInt128; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+SELECT now() - 1::UInt256; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+\n+SELECT now() + INTERVAL 1::Int128 SECOND - now();\n+SELECT now() + INTERVAL 1::Int256 SECOND - now();\n+SELECT now() + INTERVAL 1::UInt128 SECOND - now();\n+SELECT now() + INTERVAL 1::UInt256 SECOND - now();\n+\n+SELECT today() + INTERVAL 1::Int128 DAY - today();\n+SELECT today() + INTERVAL 1::Int256 DAY - today();\n+SELECT today() + INTERVAL 1::UInt128 DAY - today();\n+SELECT today() + INTERVAL 1::UInt256 DAY - today();\ndiff --git a/tests/queries/0_stateless/02470_suspicious_low_cardinality_msan.reference b/tests/queries/0_stateless/02470_suspicious_low_cardinality_msan.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02470_suspicious_low_cardinality_msan.sql b/tests/queries/0_stateless/02470_suspicious_low_cardinality_msan.sql\nnew file mode 100644\nindex 000000000000..6969be1ca643\n--- /dev/null\n+++ b/tests/queries/0_stateless/02470_suspicious_low_cardinality_msan.sql\n@@ -0,0 +1,6 @@\n+DROP TABLE IF EXISTS alias_2__fuzz_25;\n+SET allow_suspicious_low_cardinality_types = 1;\n+CREATE TABLE alias_2__fuzz_25 (`dt` LowCardinality(Date), `col` DateTime, `col2` Nullable(Int256), `colAlias0` Nullable(DateTime64(3)) ALIAS col, `colAlias3` Nullable(Int32) ALIAS col3 + colAlias0, `colAlias1` LowCardinality(UInt16) ALIAS colAlias0 + col2, `colAlias2` LowCardinality(Int32) ALIAS colAlias0 + colAlias1, `col3` Nullable(UInt8)) ENGINE = MergeTree ORDER BY dt;\n+insert into alias_2__fuzz_25 (dt, col, col2, col3) values ('2020-02-01', 1, 2, 3);\n+SELECT colAlias0, colAlias2, colAlias3 FROM alias_2__fuzz_25; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+DROP TABLE alias_2__fuzz_25;\n",
  "problem_statement": "Msan: use-of-uninitialized-value in `FunctionConvert` with suspicious `LowCardinality`\n**Describe the bug**\r\n[A link to the report\r\n](https://s3.amazonaws.com/clickhouse-test-reports/0/772978d4c0487ecc77f80b9e2aba98b8278676d2/fuzzer_astfuzzermsan//report.html)\r\n\r\n**How to reproduce**\r\n\r\n\r\n```sql\r\nDROP TABLE IF EXISTS alias_2__fuzz_25;\r\n\r\nSET allow_suspicious_low_cardinality_types = 1;\r\n\r\nCREATE TABLE alias_2__fuzz_25 (`dt` LowCardinality(Date), `col` DateTime, `col2` Nullable(Int256), `colAlias0` Nullable(DateTime64(3)) ALIAS col, `colAlias3` Nullable(Int32) ALIAS col3 + colAlias0, `colAlias1` LowCardinality(UInt16) ALIAS colAlias0 + col2, `colAlias2` LowCardinality(Int32) ALIAS colAlias0 + colAlias1, `col3` Nullable(UInt8)) ENGINE = MergeTree ORDER BY dt;\r\n\r\ninsert into alias_2__fuzz_25 (dt, col, col2, col3) values ('2020-02-01', 1, 2, 3);\r\n\r\nSELECT colAlias0, colAlias2, colAlias3 FROM alias_2__fuzz_25;\r\n```\r\n\r\n```\r\n==199240==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n #0 0xbf49ccc in COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::ConvertImpl<DB::DataTypeDateTime64, DB::DataTypeNumber<unsigned short>, DB::NameToUInt16, DB::ConvertDefaultBehaviorTag>::execute<void*>(std::__1::vector<DB::ColumnWit\r\nhTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, void*) (/usr/bin/clickhouse+0xbf49ccc) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #1 0xbeff4a1 in bool DB::callOnIndexAndDataType<DB::DataTypeNumber<unsigned short>, DB::FunctionConvert<DB::DataTypeNumber<unsigned short>, DB::NameToUInt16, DB::ToNumberMonotonicity<unsigned short>>::executeInternal(std::__1::vecto\r\nr<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, auto const&)&, DB::ConvertDefaultBehaviorTag>(DB::TypeInd\r\nex, auto&&, DB::ConvertDefaultBehaviorTag&&) (/usr/bin/clickhouse+0xbeff4a1) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #2 0xbef645e in DB::FunctionConvert<DB::DataTypeNumber<unsigned short>, DB::NameToUInt16, DB::ToNumberMonotonicity<unsigned short>>::executeInternal(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeA\r\nndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/usr/bin/clickhouse+0xbef645e) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #3 0xbef4357 in DB::FunctionConvert<DB::DataTypeNumber<unsigned short>, DB::NameToUInt16, DB::ToNumberMonotonicity<unsigned short>>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndNa\r\nme>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/usr/bin/clickhouse+0xbef4357) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #4 0xbd0c093 in DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long\r\n) const (/usr/bin/clickhouse+0xbd0c093) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #5 0x3ca8918e in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsi\r\ngned long, bool) const build_docker/../src/Functions/IFunction.cpp:248:15\r\n    #6 0x3ca8b491 in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned lon\r\ng, bool) const build_docker/../src/Functions/IFunction.cpp:302:22\r\n    #7 0x3ca91b43 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const build\r\n_docker/../src/Functions/IFunction.cpp:372:16\r\n    #8 0xbd0a7f5 in DB::IFunctionBase::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/usr/bin/cl\r\nickhouse+0xbd0a7f5) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #9 0xbe0634e in COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__1::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndN\r\name>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl<std::__1::__function::__default_alloc_func<DB::FunctionCast<DB::CastInternalName>::createFunctionAdaptor(std::__1::shared_\r\nptr<DB::IFunction>, std::__1::shared_ptr<DB::IDataType const> const&)::'lambda'(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNu\r\nllable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNulla\r\nble const*, unsigned long)>>(std::__1::__function::__policy_storage const*, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullab\r\nle const*, unsigned long) (/usr/bin/clickhouse+0xbe0634e) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #10 0xcaeb6a8 in DB::FunctionCast<DB::CastInternalName>::prepareRemoveNullable(std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::__1::vector<DB::ColumnWit\r\nhTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)::operator()(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::\r\nColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) const (/usr/bin/clickhouse+0xcaeb6a8) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #11 0xcaeb20a in COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__1::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAnd\r\nName>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl<std::__1::__function::__default_alloc_func<DB::FunctionCast<DB::CastInternalName>::prepareRemoveNullable(std::__1::shared\r\n_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&, bool) const::'lambda0'(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType\r\nconst> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType con\r\nst> const&, DB::ColumnNullable const*, unsigned long)>>(std::__1::__function::__policy_storage const*, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType cons\r\nt> const&, DB::ColumnNullable const*, unsigned long) (/usr/bin/clickhouse+0xcaeb20a) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #12 0xcaedc2e in DB::FunctionCast<DB::CastInternalName>::prepareUnpackDictionaries(std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::__1::vector<DB::ColumnWithT\r\nypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)::operator()(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::Co\r\nlumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) const (/usr/bin/clickhouse+0xcaedc2e) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #13 0xcaec1ea in COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__1::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAnd\r\nName>>&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl<std::__1::__function::__default_alloc_func<DB::FunctionCast<DB::CastInternalName>::prepareUnpackDictionaries(std::__1::sh\r\nared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType co\r\nnst> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType const\r\n> const&, DB::ColumnNullable const*, unsigned long)>>(std::__1::__function::__policy_storage const*, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>&, std::__1::shared_ptr<DB::IDataType const>\r\n const&, DB::ColumnNullable const*, unsigned long) (/usr/bin/clickhouse+0xcaec1ea) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #14 0xbd2ffe7 in DB::ExecutableFunctionCast::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/us\r\nr/bin/clickhouse+0xbd2ffe7) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #15 0x3ca8918e in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, uns\r\nigned long, bool) const build_docker/../src/Functions/IFunction.cpp:248:15\r\n    #16 0x3ca8b71c in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned lo\r\nng, bool) const build_docker/../src/Functions/IFunction.cpp:306:18\r\n    #17 0x3ca91b43 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const buil\r\nd_docker/../src/Functions/IFunction.cpp:372:16\r\n    #18 0x3f99d893 in DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool) build_docker/../src/Interpreters/ExpressionActions.cpp:607:60\r\n    #19 0x3f99d893 in DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const build_docker/../src/Interpreters/ExpressionActions.cpp:724:13\r\n    #20 0x45bd89c7 in DB::ExpressionTransform::transform(DB::Chunk&) build_docker/../src/Processors/Transforms/ExpressionTransform.cpp:23:17\r\n    #21 0x31df97ca in DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) build_docker/../src/Processors/ISimpleTransform.h:32:9\r\n    #22 0x45309e90 in DB::ISimpleTransform::work() build_docker/../src/Processors/ISimpleTransform.cpp:89:9\r\n    #23 0x4538488d in DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) build_docker/../src/Processors/Executors/ExecutionThreadContext.cpp:47:26\r\n    #24 0x4538488d in DB::ExecutionThreadContext::executeTask() build_docker/../src/Processors/Executors/ExecutionThreadContext.cpp:92:9\r\n    #25 0x4534abfc in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) build_docker/../src/Processors/Executors/PipelineExecutor.cpp:228:26\r\n    #26 0x45348ce7 in DB::PipelineExecutor::executeSingleThread(unsigned long) build_docker/../src/Processors/Executors/PipelineExecutor.cpp:194:5\r\n    #27 0x45348ce7 in DB::PipelineExecutor::executeImpl(unsigned long) build_docker/../src/Processors/Executors/PipelineExecutor.cpp:367:9\r\n    #28 0x4534866d in DB::PipelineExecutor::execute(unsigned long) build_docker/../src/Processors/Executors/PipelineExecutor.cpp:89:9\r\n    #29 0x45391cbb in DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) build_docker/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:79:24\r\n    #30 0x45391cbb in DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const build_docker/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:107:13\r\n    #31 0x45391cbb in decltype(static_cast<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::Pulling\r\nAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) build_docker/../contrib/libcxx/include/type_traits:3648:23\r\n    #32 0x45391cbb in decltype(auto) std::__1::__apply_tuple_impl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std:\r\n:__1::tuple<>&, std::__1::__tuple_indices<>) build_docker/../contrib/libcxx/include/tuple:1595:1\r\n    #33 0x45391cbb in decltype(auto) std::__1::apply<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>\r\n&) build_docker/../contrib/libcxx/include/tuple:1604:1\r\n    #34 0x45391cbb in ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()\r\n::operator()() build_docker/../src/Common/ThreadPool.h:193:13\r\n    #35 0x45391cbb in decltype(static_cast<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull\r\n(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) build_docker/../contrib/libcxx/include/t\r\nype_traits:3640:23\r\n    #36 0x45391cbb in void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipel\r\nineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(D\r\nB::Chunk&, unsigned long)::$_0&&)::'lambda'()&) build_docker/../contrib/libcxx/include/__functional/invoke.h:61:9\r\n    #37 0x45391cbb in std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB:\r\n:Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>::operator()() build_docker/../contrib/libcxx/include/__functional/function.h:230:12\r\n#38 0x45391cbb in void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk\r\n&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:711:1\r\n6\r\n    #39 0x25f3c5f0 in std::__1::__function::__policy_func<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:843:16\r\n    #40 0x25f3c5f0 in std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1184:12\r\n    #41 0x25f3c5f0 in ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_docker/../src/Common/ThreadPool.cpp:294:17\r\n    #42 0x25f494c2 in void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73\r\n    #43 0x25f494c2 in decltype(static_cast<void>(fp)()) std::__1::__invoke<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_\r\ndocker/../contrib/libcxx/include/type_traits:3640:23\r\n    #44 0x25f494c2 in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<voi\r\nd ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>&\r\n, std::__1::__tuple_indices<>) build_docker/../contrib/libcxx/include/thread:282:5\r\n    #45 0x25f494c2 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__\r\n1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_docker/../contrib/libcxx/include/thread:293:5\r\n    #46 0x7fcf5ea53608 in start_thread /build/glibc-sMfBJT/glibc-2.31/nptl/pthread_create.c:477:8\r\n    #47 0x7fcf5e978162 in __clone /build/glibc-sMfBJT/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n\r\n  Uninitialized value was stored to memory at\r\n\r\n#0 0xbc9b306 in realloc (/usr/bin/clickhouse+0xbc9b306) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #1 0x25ba90ad in Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long) build_docker/../src/Common/Allocator.h:134:30\r\n    #2 0xbd14ca8 in void DB::PODArrayBase<8ul, 4096ul, Allocator<false, false>, 15ul, 16ul>::resize<>(unsigned long) (/usr/bin/clickhouse+0xbd14ca8) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #3 0x1046a000 in void DB::Adder<DB::AddSecondsImpl>::vectorVector<DB::PODArray<DB::DateTime64, 4096ul, Allocator<false, false>, 15ul, 16ul>, DB::PODArray<DB::DateTime64, 4096ul, Allocator<false, false>, 15ul, 16ul>>(DB::PODArray<DB:\r\n:DateTime64, 4096ul, Allocator<false, false>, 15ul, 16ul> const&, DB::PODArray<DB::DateTime64, 4096ul, Allocator<false, false>, 15ul, 16ul>&, DB::IColumn const&, DateLUTImpl const&, unsigned short) const (/usr/bin/clickhouse+0x1046a000)\r\n (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #4 0x1044715b in DB::DateTimeAddIntervalImpl<DB::DataTypeDateTime64, DB::DataTypeDateTime64, DB::AddSecondsImpl>::execute(DB::AddSecondsImpl, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>\r\n> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned short) (/usr/bin/clickhouse+0x1044715b) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #5 0x10441a76 in DB::FunctionDateOrDateTimeAddInterval<DB::AddSecondsImpl>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> co\r\nnst&, unsigned long) const (/usr/bin/clickhouse+0x10441a76) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #6 0xbd0c093 in DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long\r\n) const (/usr/bin/clickhouse+0xbd0c093) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #7 0x3ca8918e in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsi\r\ngned long, bool) const build_docker/../src/Functions/IFunction.cpp:248:15\r\n    #8 0x3ca8b491 in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned lon\r\ng, bool) const build_docker/../src/Functions/IFunction.cpp:302:22\r\n    #9 0x3ca91b43 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const build\r\n_docker/../src/Functions/IFunction.cpp:372:16\r\n    #10 0xbd0a7f5 in DB::IFunctionBase::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/usr/bin/c\r\nlickhouse+0xbd0a7f5) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #11 0x1ff5c3c3 in DB::FunctionBinaryArithmetic<DB::PlusImpl, DB::NamePlus, true, true, false>::executeDateTimeIntervalPlusMinus(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std:\r\n:__1::shared_ptr<DB::IDataType const> const&, unsigned long, std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&) const (/usr/bin/clickhouse+0x1ff5c3c3) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #12 0x1ff58f9d in DB::FunctionBinaryArithmetic<DB::PlusImpl, DB::NamePlus, true, true, false>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::\r\nIDataType const> const&, unsigned long) const (/usr/bin/clickhouse+0x1ff58f9d) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #13 0xbd0c093 in DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned lon\r\ng) const (/usr/bin/clickhouse+0xbd0c093) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #14 0x3ca8918e in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, uns\r\nigned long, bool) const build_docker/../src/Functions/IFunction.cpp:248:15\r\n    #15 0x3ca89cf6 in DB::IExecutableFunction::defaultImplementationForNulls(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned\r\nlong, bool) const build_docker/../src/Functions/IFunction.cpp:199:20\r\n    #16 0x3ca88e00 in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, uns\r\nigned long, bool) const build_docker/../src/Functions/IFunction.cpp:241:20\r\n    #17 0x3ca8b491 in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned lo\r\nng, bool) const build_docker/../src/Functions/IFunction.cpp:302:22\r\n    #18 0x3ca91b43 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const buil\r\nd_docker/../src/Functions/IFunction.cpp:372:16\r\n    #19 0x3f99d893 in DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool) build_docker/../src/Interpreters/ExpressionActions.cpp:607:60\r\n    #20 0x3f99d893 in DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const build_docker/../src/Interpreters/ExpressionActions.cpp:724:13\r\n\r\nUninitialized value was created by a heap allocation\r\n    #0 0xbc9b5c0 in malloc (/usr/bin/clickhouse+0xbc9b5c0) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #1 0x25ba7c6c in Allocator<false, false>::allocNoTrack(unsigned long, unsigned long) build_docker/../src/Common/Allocator.h:227:27\r\n    #2 0xbd150e4 in void DB::PODArrayBase<8ul, 4096ul, Allocator<false, false>, 15ul, 16ul>::alloc<>(unsigned long) (/usr/bin/clickhouse+0xbd150e4) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #3 0x3da07f3f in DB::PODArrayBase<8ul, 4096ul, Allocator<false, false>, 15ul, 16ul>::alloc_for_num_elements(unsigned long) build_docker/../src/Common/PODArray.h:128:9\r\n    #4 0x3da07f3f in DB::PODArray<DB::DateTime64, 4096ul, Allocator<false, false>, 15ul, 16ul>::PODArray(unsigned long) build_docker/../src/Common/PODArray.h:344:15\r\n    #5 0x3da07f3f in DB::ColumnDecimal<DB::DateTime64>::ColumnDecimal(unsigned long, unsigned int) build_docker/../src/Columns/ColumnDecimal.h:34:9\r\n    #6 0x3da07f3f in COW<DB::IColumn>::mutable_ptr<DB::ColumnDecimal<DB::DateTime64>> COWHelper<DB::ColumnVectorHelper, DB::ColumnDecimal<DB::DateTime64>>::create<int, unsigned int const&>(int&&, unsigned int const&) build_docker/../src\r\n/Common/COW.h:284:71\r\n    #7 0x3da07cc6 in DB::DataTypeDecimalBase<DB::DateTime64>::createColumn() const build_docker/../src/DataTypes/DataTypeDecimalBase.cpp:30:12\r\n    #8 0x10446c2a in DB::DateTimeAddIntervalImpl<DB::DataTypeDateTime64, DB::DataTypeDateTime64, DB::AddSecondsImpl>::execute(DB::AddSecondsImpl, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>\r\n> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned short) (/usr/bin/clickhouse+0x10446c2a) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #9 0x10441a76 in DB::FunctionDateOrDateTimeAddInterval<DB::AddSecondsImpl>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> co\r\nnst&, unsigned long) const (/usr/bin/clickhouse+0x10441a76) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #10 0xbd0c093 in DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned lon\r\ng) const (/usr/bin/clickhouse+0xbd0c093) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #11 0x3ca8918e in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, uns\r\nigned long, bool) const build_docker/../src/Functions/IFunction.cpp:248:15\r\n    #12 0x3ca8b491 in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned lo\r\nng, bool) const build_docker/../src/Functions/IFunction.cpp:302:22\r\n    #13 0x3ca91b43 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const buil\r\nd_docker/../src/Functions/IFunction.cpp:372:16\r\n    #14 0xbd0a7f5 in DB::IFunctionBase::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/usr/bin/c\r\nlickhouse+0xbd0a7f5) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #15 0x1ff5c3c3 in DB::FunctionBinaryArithmetic<DB::PlusImpl, DB::NamePlus, true, true, false>::executeDateTimeIntervalPlusMinus(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std:\r\n:__1::shared_ptr<DB::IDataType const> const&, unsigned long, std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&) const (/usr/bin/clickhouse+0x1ff5c3c3) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #16 0x1ff58f9d in DB::FunctionBinaryArithmetic<DB::PlusImpl, DB::NamePlus, true, true, false>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::\r\nIDataType const> const&, unsigned long) const (/usr/bin/clickhouse+0x1ff58f9d) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #17 0xbd0c093 in DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned lon\r\ng) const (/usr/bin/clickhouse+0xbd0c093) (BuildId: a513f1c7233fdfedc7052d0fabc240ba3b910b0b)\r\n    #18 0x3ca8918e in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, uns\r\nigned long, bool) const build_docker/../src/Functions/IFunction.cpp:248:15\r\n    #19 0x3ca89cf6 in DB::IExecutableFunction::defaultImplementationForNulls(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned\r\nlong, bool) const build_docker/../src/Functions/IFunction.cpp:199:20\r\n    #20 0x3ca88e00 in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, uns\r\nigned long, bool) const build_docker/../src/Functions/IFunction.cpp:241:20\r\n    #21 0x3ca8b491 in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned lo\r\nng, bool) const build_docker/../src/Functions/IFunction.cpp:302:22\r\n    #22 0x3ca91b43 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const buil\r\nd_docker/../src/Functions/IFunction.cpp:372:16\r\n```\n",
  "hints_text": "This is much worse. Minimal example:\r\n\r\n```\r\nSELECT now() + 1::Int128\r\n```",
  "created_at": "2022-10-22T05:27:05Z",
  "modified_files": [
    "src/Functions/FunctionBinaryArithmetic.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02469_interval_msan.reference",
    "b/tests/queries/0_stateless/02469_interval_msan.sql",
    "b/tests/queries/0_stateless/02470_suspicious_low_cardinality_msan.sql"
  ]
}