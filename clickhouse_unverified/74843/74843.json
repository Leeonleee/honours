{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 74843,
  "instance_id": "ClickHouse__ClickHouse-74843",
  "issue_numbers": [
    "74280"
  ],
  "base_commit": "6693990d7351a97fa03729a67f0d0158dc0d0021",
  "patch": "diff --git a/src/Functions/FunctionsDecimalArithmetics.h b/src/Functions/FunctionsDecimalArithmetics.h\nindex c1349e3d6fc9..2bd0d7a22eab 100644\n--- a/src/Functions/FunctionsDecimalArithmetics.h\n+++ b/src/Functions/FunctionsDecimalArithmetics.h\n@@ -247,7 +247,7 @@ class FunctionsDecimalArithmetics : public IFunction\n \n     bool isVariadic() const override { return true; }\n     size_t getNumberOfArguments() const override { return 0; }\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return Transform::suitable_for_short_circuit; }\n \n     DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n     {\ndiff --git a/src/Functions/divideDecimal.cpp b/src/Functions/divideDecimal.cpp\nindex c8d2c5edc8a1..081cef7cb94c 100644\n--- a/src/Functions/divideDecimal.cpp\n+++ b/src/Functions/divideDecimal.cpp\n@@ -16,6 +16,7 @@ namespace\n struct DivideDecimalsImpl\n {\n     static constexpr auto name = \"divideDecimal\";\n+    static constexpr auto suitable_for_short_circuit = true;\n \n     template <typename FirstType, typename SecondType>\n     static Decimal256\ndiff --git a/src/Functions/multiplyDecimal.cpp b/src/Functions/multiplyDecimal.cpp\nindex 7e30a893d722..1e130b9f6a64 100644\n--- a/src/Functions/multiplyDecimal.cpp\n+++ b/src/Functions/multiplyDecimal.cpp\n@@ -15,6 +15,7 @@ namespace\n struct MultiplyDecimalsImpl\n {\n     static constexpr auto name = \"multiplyDecimal\";\n+    static constexpr auto suitable_for_short_circuit = false;\n \n     template <typename FirstType, typename SecondType>\n     static Decimal256\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03314_divide_decimal_short_circuit.reference b/tests/queries/0_stateless/03314_divide_decimal_short_circuit.reference\nnew file mode 100644\nindex 000000000000..a4f8fa5f2749\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_divide_decimal_short_circuit.reference\n@@ -0,0 +1,5 @@\n+7\t0\t0\t0\n+0.07\t0\t0\t0\n+0.07\t0.01\t7\t7\n+0.07\t-70\t0\t-0.001\n+0.07\t1506\t0\t0.000046\ndiff --git a/tests/queries/0_stateless/03314_divide_decimal_short_circuit.sql b/tests/queries/0_stateless/03314_divide_decimal_short_circuit.sql\nnew file mode 100644\nindex 000000000000..54acabf68336\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_divide_decimal_short_circuit.sql\n@@ -0,0 +1,16 @@\n+DROP TABLE IF EXISTS 03314_divide_decimal_short_circuit;\n+CREATE TABLE 03314_divide_decimal_short_circuit(\n+    `n1` Decimal(38,2),\n+    `n2` Decimal(38,2)\n+) ENGINE=Memory;\n+\n+INSERT INTO 03314_divide_decimal_short_circuit VALUES\n+    (7, 0),\n+    (0.07, 0),\n+    (0.07, 0.01),\n+    (0.07, -70),\n+    (0.07, 1506)\n+;\n+\n+SELECT n1, n2, multiIf(n2 != 0, n1 / n2, 0), multiIf(n2 != 0, divideDecimal(n1, n2, 6), 0)\n+FROM 03314_divide_decimal_short_circuit;\n",
  "problem_statement": "divideDecimal   division by zero  in multiIf\n\r\n```sql\r\n\r\ndrop table if exists divideDecimalTest;\r\ncreate table  divideDecimalTest(\r\n    id Int8,\r\n    num1 Decimal(38,2),\r\n    num2 Decimal(38,2)\r\n\r\n ) engine = Memory;\r\ninsert into divideDecimalTest values\r\n                                  (1,0.07, 732),\r\n                                  (2,0.07, 732),\r\n                                  (3,0.07, 732),\r\n                                  (4,0.07, 732),\r\n                                  (5,0.07, 0)\r\n;\r\nselect\r\n    any(num1) as n1,\r\n    any(num2) as n2,\r\n    multiIf(n2!=0, n1/n2, 0),\r\n   multiIf(n2!=0, divideDecimal(n1,n2,6), 0)\r\nfrom divideDecimalTest group by id;\r\n\r\n```\r\n\r\nversion 24.3\r\n\n",
  "hints_text": "Short circuit optimization is not implemented for divideDecimal\nI'd like to implement the short circuit optimization for `divideDecimal` if nobody is working on it.\nIt's fairly simple to implement. We need to return `true` in `FunctionsDecimalArithmetics::isSuitableForShortCircuitArgumentsExecution` when template `Transform` is `DivideDecimalsImpl`:\nhttps://github.com/ClickHouse/ClickHouse/blob/f2ac7a0c1de98390f3f37d5bb6c28a32c3590606/src/Functions/FunctionsDecimalArithmetics.h#L250\n\nIt can be done by adding `static constexpr auto suitable_for_short_circuit = true/false;` for all structs used in `FunctionsDecimalArithmetics` and return `Transform::suitable_for_short_circuit` in `isSuitableForShortCircuitArgumentsExecution`\nAlso as a workaround you can set `short_circuit_function_evaluation='force_enable'`. In this case we execute all functions in a short circuit manner",
  "created_at": "2025-01-21T03:46:07Z",
  "modified_files": [
    "src/Functions/FunctionsDecimalArithmetics.h",
    "src/Functions/divideDecimal.cpp",
    "src/Functions/multiplyDecimal.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03314_divide_decimal_short_circuit.reference",
    "b/tests/queries/0_stateless/03314_divide_decimal_short_circuit.sql"
  ]
}