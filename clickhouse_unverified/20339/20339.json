{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 20339,
  "instance_id": "ClickHouse__ClickHouse-20339",
  "issue_numbers": [
    "20283"
  ],
  "base_commit": "0854dccfdef61a1b8247f37bc2c5f716ed834b2d",
  "patch": "diff --git a/src/Functions/FunctionBinaryArithmetic.h b/src/Functions/FunctionBinaryArithmetic.h\nindex f61c9c91d003..bb85ae32622d 100644\n--- a/src/Functions/FunctionBinaryArithmetic.h\n+++ b/src/Functions/FunctionBinaryArithmetic.h\n@@ -894,9 +894,8 @@ class FunctionBinaryArithmetic : public IFunction\n             const NativeResultType const_b = helperGetOrConvert<T1, ResultDataType>(col_right_const, right);\n \n             const ResultType res = check_decimal_overflow\n-                // the arguments are already scaled after conversion\n-                ? OpImplCheck::template process<left_is_decimal, right_is_decimal>(const_a, const_b, 1, 1)\n-                : OpImpl::template process<left_is_decimal, right_is_decimal>(const_a, const_b, 1, 1);\n+                ? OpImplCheck::template process<left_is_decimal, right_is_decimal>(const_a, const_b, scale_a, scale_b)\n+                : OpImpl::template process<left_is_decimal, right_is_decimal>(const_a, const_b, scale_a, scale_b);\n \n             if constexpr (result_is_decimal)\n                 return ResultDataType(type.getPrecision(), type.getScale()).createColumnConst(\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01711_decimal_multiplication.reference b/tests/queries/0_stateless/01711_decimal_multiplication.reference\nnew file mode 100644\nindex 000000000000..37869329ca44\n--- /dev/null\n+++ b/tests/queries/0_stateless/01711_decimal_multiplication.reference\n@@ -0,0 +1,4 @@\n+2.0000\n+2.0000\n+2.0000\n+2.0000\ndiff --git a/tests/queries/0_stateless/01711_decimal_multiplication.sql b/tests/queries/0_stateless/01711_decimal_multiplication.sql\nnew file mode 100644\nindex 000000000000..10d23599b4d9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01711_decimal_multiplication.sql\n@@ -0,0 +1,4 @@\n+SELECT materialize(toDecimal64(4,4)) - materialize(toDecimal32(2,2));\n+SELECT toDecimal64(4,4) - materialize(toDecimal32(2,2));\n+SELECT materialize(toDecimal64(4,4)) - toDecimal32(2,2);\n+SELECT toDecimal64(4,4) - toDecimal32(2,2);\n",
  "problem_statement": "wrong toDecimalX minus result\nI've been studying basic usage and I found wrong minus result on DecimalXX type.\r\n\r\n**Example Query**\r\n`\r\nselect toDecimal64(4,4) - toDecimal32(2,2)\r\n`\r\n\r\n**Expected output**\r\n2.0000\r\n\r\n**Actual output**\r\n3.9800\r\n\r\nIs there anything wrong or maybe my misunderstanding of toDecimal ?\r\n\r\n![image](https://user-images.githubusercontent.com/8475371/107513855-cdd57a00-6be3-11eb-841d-d425a198d172.png)\r\n\r\n\r\n**How to reproduce**\r\n1. OS: macOS Catalina 10.15.5\r\n2. server: clickhouse-server, built from source, version 21.3.1.1\r\n3. client:  clickhouse-client,  built from source, version 21.3.1.1\r\n\n",
  "hints_text": "Confirmed. It's a bug. \n20.12 and before are not affected. Thanks for the report!\nBroken in #18145.",
  "created_at": "2021-02-11T16:07:48Z"
}