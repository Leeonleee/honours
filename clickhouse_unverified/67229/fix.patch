diff --git a/src/Analyzer/Passes/RewriteAggregateFunctionWithIfPass.cpp b/src/Analyzer/Passes/RewriteAggregateFunctionWithIfPass.cpp
index c1adf05ac765..a48e88132a68 100644
--- a/src/Analyzer/Passes/RewriteAggregateFunctionWithIfPass.cpp
+++ b/src/Analyzer/Passes/RewriteAggregateFunctionWithIfPass.cpp
@@ -2,6 +2,7 @@
 
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/DataTypeNullable.h>
+#include <DataTypes/DataTypeAggregateFunction.h>
 
 #include <AggregateFunctions/AggregateFunctionFactory.h>
 #include <AggregateFunctions/IAggregateFunction.h>
@@ -42,7 +43,7 @@ class RewriteAggregateFunctionWithIfVisitor : public InDepthQueryTreeVisitorWith
         if (lower_name.ends_with("if"))
             return;
 
-        auto & function_arguments_nodes = function_node->getArguments().getNodes();
+        const auto & function_arguments_nodes = function_node->getArguments().getNodes();
         if (function_arguments_nodes.size() != 1)
             return;
 
@@ -50,6 +51,8 @@ class RewriteAggregateFunctionWithIfVisitor : public InDepthQueryTreeVisitorWith
         if (!if_node || if_node->getFunctionName() != "if")
             return;
 
+        FunctionNodePtr replaced_node;
+
         auto if_arguments_nodes = if_node->getArguments().getNodes();
         auto * first_const_node = if_arguments_nodes[1]->as<ConstantNode>();
         auto * second_const_node = if_arguments_nodes[2]->as<ConstantNode>();
@@ -75,8 +78,11 @@ class RewriteAggregateFunctionWithIfVisitor : public InDepthQueryTreeVisitorWith
                     new_arguments[0] = std::move(if_arguments_nodes[1]);
 
                 new_arguments[1] = std::move(if_arguments_nodes[0]);
-                function_arguments_nodes = std::move(new_arguments);
-                resolveAggregateFunctionNodeByName(*function_node, function_node->getFunctionName() + "If");
+
+                replaced_node = std::make_shared<FunctionNode>(function_node->getFunctionName() + "If");
+                replaced_node->getArguments().getNodes() = std::move(new_arguments);
+                replaced_node->getParameters().getNodes() = function_node->getParameters().getNodes();
+                resolveAggregateFunctionNodeByName(*replaced_node, replaced_node->getFunctionName());
             }
         }
         else if (first_const_node)
@@ -104,10 +110,26 @@ class RewriteAggregateFunctionWithIfVisitor : public InDepthQueryTreeVisitorWith
                     FunctionFactory::instance().get("not", getContext())->build(not_function->getArgumentColumns()));
                 new_arguments[1] = std::move(not_function);
 
-                function_arguments_nodes = std::move(new_arguments);
-                resolveAggregateFunctionNodeByName(*function_node, function_node->getFunctionName() + "If");
+                replaced_node = std::make_shared<FunctionNode>(function_node->getFunctionName() + "If");
+                replaced_node->getArguments().getNodes() = std::move(new_arguments);
+                replaced_node->getParameters().getNodes() = function_node->getParameters().getNodes();
+                resolveAggregateFunctionNodeByName(*replaced_node, replaced_node->getFunctionName());
             }
         }
+
+        if (!replaced_node)
+            return;
+
+        auto prev_type = function_node->getResultType();
+        auto curr_type = replaced_node->getResultType();
+        if (!prev_type->equals(*curr_type))
+            return;
+
+        /// Just in case, CAST compatible aggregate function states.
+        if (WhichDataType(prev_type).isAggregateFunction() && !DataTypeAggregateFunction::strictEquals(prev_type, curr_type))
+            node = createCastFunction(std::move(replaced_node), prev_type, getContext());
+        else
+            node = std::move(replaced_node);
     }
 };
 
