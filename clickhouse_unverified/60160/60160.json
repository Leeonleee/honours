{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60160,
  "instance_id": "ClickHouse__ClickHouse-60160",
  "issue_numbers": [
    "57256"
  ],
  "base_commit": "0bd3016a17dab23e64a7e550b2754ce7f7aa1d82",
  "patch": "diff --git a/src/Interpreters/convertFieldToType.cpp b/src/Interpreters/convertFieldToType.cpp\nindex c3b8405659ab..346180c3613f 100644\n--- a/src/Interpreters/convertFieldToType.cpp\n+++ b/src/Interpreters/convertFieldToType.cpp\n@@ -493,10 +493,12 @@ Field convertFieldToTypeImpl(const Field & src, const IDataType & type, const ID\n     {\n         /// Promote data type to avoid overflows. Note that overflows in the largest data type are still possible.\n         /// But don't promote Float32, since we want to keep the exact same value\n+        /// Also don't promote domain types (like bool) because we would otherwise use the serializer of the promoted type (e.g. UInt64 for\n+        /// bool, which does not allow 'true' and 'false' as input values)\n         const IDataType * type_to_parse = &type;\n         DataTypePtr holder;\n \n-        if (type.canBePromoted() && !which_type.isFloat32())\n+        if (type.canBePromoted() && !which_type.isFloat32() && !type.getCustomSerialization())\n         {\n             holder = type.promoteNumericType();\n             type_to_parse = holder.get();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02933_compare_with_bool_as_string.reference b/tests/queries/0_stateless/02933_compare_with_bool_as_string.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02933_compare_with_bool_as_string.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02933_compare_with_bool_as_string.sql b/tests/queries/0_stateless/02933_compare_with_bool_as_string.sql\nnew file mode 100644\nindex 000000000000..5dbacd5fbbf8\n--- /dev/null\n+++ b/tests/queries/0_stateless/02933_compare_with_bool_as_string.sql\n@@ -0,0 +1,1 @@\n+select true = 'true';\n",
  "problem_statement": "RFC: Automatic cast of bool literals in obvious cases\n```sql\r\ncreate table tab (d Date, b bool) engine = Memory;\r\n\r\ninsert into tab values ('2023-11-27', 'true'); -- insert of string-encoded bool works\r\n\r\nselect d = '2023-11-27' from tab;\r\n\r\nselect b = true from tab;\r\nselect b = 'true' from tab; -- throws: comparison with string-encoded bool does not work\r\n```\r\n\r\nBooleans should at least be able to compare against obvious string literals such as `true'`, `'1'`, `'enabled'` etc.\r\n\r\nRelated issue: #11630\n",
  "hints_text": "Good idea - we have this logic for Date, DateTime, UUID, Enum - let's extend to Bool.",
  "created_at": "2024-02-19T23:06:06Z"
}