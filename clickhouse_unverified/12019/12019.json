{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12019,
  "instance_id": "ClickHouse__ClickHouse-12019",
  "issue_numbers": [
    "11367"
  ],
  "base_commit": "aaadc8addb173a27249ee3ce2161aedf000e4b15",
  "patch": "diff --git a/src/Functions/neighbor.cpp b/src/Functions/neighbor.cpp\nindex 7c26693f7e8a..bf2af61b073b 100644\n--- a/src/Functions/neighbor.cpp\n+++ b/src/Functions/neighbor.cpp\n@@ -12,6 +12,7 @@ namespace ErrorCodes\n {\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int ARGUMENT_OUT_OF_BOUND;\n }\n \n // Implements function, giving value for column within range of given\n@@ -111,6 +112,10 @@ class FunctionNeighbor : public IFunction\n \n             Int64 offset = offset_column->getInt(0);\n \n+            /// Protection from possible overflow.\n+            if (unlikely(offset > (1 << 30) || offset < -(1 << 30)))\n+                throw Exception(ErrorCodes::ARGUMENT_OUT_OF_BOUND, \"Too large offset: {} in function {}\", offset, getName());\n+\n             auto result_column = result_type->createColumn();\n \n             auto insert_range_from = [&](bool is_const, const ColumnPtr & src, Int64 begin, Int64 size)\n@@ -145,7 +150,9 @@ class FunctionNeighbor : public IFunction\n             if (offset == 0)\n             {\n                 /// Degenerate case, just copy source column as is.\n-                block.getByPosition(result).column = source_is_constant ? ColumnConst::create(source_column_casted, input_rows_count) : source_column_casted;\n+                block.getByPosition(result).column = source_is_constant\n+                    ? ColumnConst::create(source_column_casted, input_rows_count)\n+                    : source_column_casted;\n             }\n             else if (offset > 0)\n             {\n@@ -166,7 +173,13 @@ class FunctionNeighbor : public IFunction\n \n             for (size_t row = 0; row < input_rows_count; ++row)\n             {\n-                Int64 src_idx = row + offset_column->getInt(offset_is_constant ? 0 : row);\n+                Int64 offset = offset_column->getInt(offset_is_constant ? 0 : row);\n+\n+                /// Protection from possible overflow.\n+                if (unlikely(offset > (1 << 30) || offset < -(1 << 30)))\n+                    throw Exception(ErrorCodes::ARGUMENT_OUT_OF_BOUND, \"Too large offset: {} in function {}\", offset, getName());\n+\n+                Int64 src_idx = row + offset;\n \n                 if (src_idx >= 0 && src_idx < Int64(input_rows_count))\n                     result_column->insertFrom(*source_column_casted, source_is_constant ? 0 : src_idx);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01353_neighbor_overflow.reference b/tests/queries/0_stateless/01353_neighbor_overflow.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01353_neighbor_overflow.sql b/tests/queries/0_stateless/01353_neighbor_overflow.sql\nnew file mode 100644\nindex 000000000000..dee18d52ae68\n--- /dev/null\n+++ b/tests/queries/0_stateless/01353_neighbor_overflow.sql\n@@ -0,0 +1,2 @@\n+SELECT neighbor(toString(number), -9223372036854775808) FROM numbers(100); -- { serverError 69 }\n+WITH neighbor(toString(number), toInt64(rand64())) AS x SELECT * FROM system.numbers WHERE NOT ignore(x); -- { serverError 69 }\n",
  "problem_statement": " Logical error: 'Invalid number of rows in Chunk column String: expected 0, got 65536'.\n```\r\nSELECT neighbor(toString(number), -9223372036854775808), neighbor(toString(number), 1048576) FROM numbers(9223372036854775807)\r\n```\r\n\r\nFYI @KochetovNicolai \n",
  "hints_text": "",
  "created_at": "2020-06-28T20:44:59Z"
}