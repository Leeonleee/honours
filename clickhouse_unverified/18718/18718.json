{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18718,
  "instance_id": "ClickHouse__ClickHouse-18718",
  "issue_numbers": [
    "7690"
  ],
  "base_commit": "6e34a0b71efc0e5af1cfb05b77a5e7b2568a2e49",
  "patch": "diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex 6669a369a9da..318e8e5bc277 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -2259,7 +2259,7 @@ class FunctionCast final : public IFunctionBaseImpl\n \n     template <typename ToDataType>\n     std::enable_if_t<IsDataTypeDecimal<ToDataType>, WrapperType>\n-    createDecimalWrapper(const DataTypePtr & from_type, const ToDataType * to_type) const\n+    createDecimalWrapper(const DataTypePtr & from_type, const ToDataType * to_type, bool requested_result_is_nullable) const\n     {\n         TypeIndex type_index = from_type->getTypeId();\n         UInt32 scale = to_type->getScale();\n@@ -2278,11 +2278,12 @@ class FunctionCast final : public IFunctionBaseImpl\n \n         auto wrapper_cast_type = cast_type;\n \n-        return [wrapper_cast_type, type_index, scale, to_type]\n+        return [wrapper_cast_type, type_index, scale, to_type, requested_result_is_nullable]\n             (ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, const ColumnNullable *column_nullable, size_t input_rows_count)\n         {\n             ColumnPtr result_column;\n-            auto res = callOnIndexAndDataType<ToDataType>(type_index, [&](const auto & types) -> bool {\n+            auto res = callOnIndexAndDataType<ToDataType>(type_index, [&](const auto & types) -> bool\n+            {\n                 using Types = std::decay_t<decltype(types)>;\n                 using LeftDataType = typename Types::LeftType;\n                 using RightDataType = typename Types::RightType;\n@@ -2308,6 +2309,19 @@ class FunctionCast final : public IFunctionBaseImpl\n                         return true;\n                     }\n                 }\n+                else if constexpr (std::is_same_v<LeftDataType, DataTypeString>)\n+                {\n+                    if (requested_result_is_nullable)\n+                    {\n+                        /// Consistent with CAST(Nullable(String) AS Nullable(Numbers))\n+                        /// In case when converting to Nullable type, we apply different parsing rule,\n+                        /// that will not throw an exception but return NULL in case of malformed input.\n+                        result_column = ConvertImpl<LeftDataType, RightDataType, NameCast, ConvertReturnNullOnErrorTag>::execute(\n+                            arguments, result_type, input_rows_count, scale);\n+\n+                        return true;\n+                    }\n+                }\n \n                 result_column = ConvertImpl<LeftDataType, RightDataType, NameCast>::execute(arguments, result_type, input_rows_count, scale);\n \n@@ -2925,7 +2939,7 @@ class FunctionCast final : public IFunctionBaseImpl\n                 std::is_same_v<ToDataType, DataTypeDecimal<Decimal256>> ||\n                 std::is_same_v<ToDataType, DataTypeDateTime64>)\n             {\n-                ret = createDecimalWrapper(from_type, checkAndGetDataType<ToDataType>(to_type.get()));\n+                ret = createDecimalWrapper(from_type, checkAndGetDataType<ToDataType>(to_type.get()), requested_result_is_nullable);\n                 return true;\n             }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01632_nullable_string_type_convert_to_decimal_type.reference b/tests/queries/0_stateless/01632_nullable_string_type_convert_to_decimal_type.reference\nnew file mode 100644\nindex 000000000000..b8cf92773503\n--- /dev/null\n+++ b/tests/queries/0_stateless/01632_nullable_string_type_convert_to_decimal_type.reference\n@@ -0,0 +1,2 @@\n+42.10\n+\\N\ndiff --git a/tests/queries/0_stateless/01632_nullable_string_type_convert_to_decimal_type.sql b/tests/queries/0_stateless/01632_nullable_string_type_convert_to_decimal_type.sql\nnew file mode 100644\nindex 000000000000..b8fa08edb681\n--- /dev/null\n+++ b/tests/queries/0_stateless/01632_nullable_string_type_convert_to_decimal_type.sql\n@@ -0,0 +1,2 @@\n+SELECT CAST(arrayJoin(['42.1', NULL]) AS Nullable(Decimal(10,2)));\n+\n",
  "problem_statement": "mysql decimal nullable -> DB::Exception: Attempt to read after eof\nHi,\r\n\r\n**Describe the bug or unexpected behaviour**\r\nWhen I try to INSERT SELECT from a remote mysql table it leads to `DB::Exception: Attempt to read after eof` when a source column is of type `decimal(xx,yy) NULL` and have `null` value.\r\nThis issue also occurs when I try to cast a column from a mysql `decimal(xx,yy) NULL` to a clickhouse `Nullable(Decimal(xx,yy))`\r\n\r\n**How to reproduce**\r\nCH version : 19.13.3.26 and 19.16.2.2 (official build)\r\n\r\nFirst run the following mysql statements on a mysql server\r\n```sql\r\ncreate table chSource (dn decimal(10,2) null);\r\ninsert into chSource VALUES(42.1), (null);\r\n```\r\n\r\nThen in a clickhouse server run\r\n```sql\r\nSELECT CAST(dn AS Nullable(Decimal(10,2)))\r\nFROM mysql('mysqlServer:3306','mysqlDatabase','chSource','user','password');\r\n```\r\n\r\nand you obtain\r\n```\r\n[2a12e65e4fac] 2019.11.08 13:12:23.326313 {c65e05cd-d0c9-4dcd-99b1-218180d10eaf} [ 44 ] <Error> executeQuery: Code: 32, e.displayText() = DB::Exception: Attempt to read after eof (version 19.13.3.26 (official build)) (from 127.0.0.1:36672) (in query: SELECT CAST(dn, 'Nullable(Decimal(10, 2))') FROM mysql('172.23.0.1:3306', 'test', 'chSource', 'root', 'root')), Stack trace:\r\n\r\n0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x30) [0x7f6b5f0]\r\n1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x25) [0x3c46865]\r\n2. /usr/bin/clickhouse-server(DB::throwReadAfterEOF()+0x55) [0x37b517d]\r\n3. /usr/bin/clickhouse-server(void DB::readDecimalText<DB::Decimal<long> >(DB::ReadBuffer&, DB::Decimal<long>&, unsigned int, unsigned int&, bool)+0x4d7) [0x6cd5337]\r\n4. /usr/bin/clickhouse-server(DB::DataTypeDecimal<DB::Decimal<long> >::readText(DB::Decimal<long>&, DB::ReadBuffer&, unsigned int, unsigned int, bool)+0x5a) [0x6cd56ea]\r\n5. /usr/bin/clickhouse-server(void DB::ConvertThroughParsing<DB::DataTypeString, DB::DataTypeDecimal<DB::Decimal<long> >, DB::NameCast, (DB::ConvertFromStringExceptionMode)0, (DB::ConvertFromStringParsingMode)0>::execute<unsigned int>(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, unsigned int)+0x22d) [0x400da8d]\r\n6. /usr/bin/clickhouse-server(std::_Function_handler<void (DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long), DB::FunctionCast::createDecimalWrapper<DB::Decimal<long> >(std::shared_ptr<DB::IDataType const> const&, DB::DataTypeDecimal<DB::Decimal<long> > const*) const::{lambda(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long)#1}>::_M_invoke(std::_Any_data const&, DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long&&, std::_Any_data const&)+0x87f) [0x401007f]\r\n7. /usr/bin/clickhouse-server(DB::FunctionCast::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::{lambda(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long)#1}::operator()(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long) const+0x3bc) [0x3ff0e6c]\r\n8. /usr/bin/clickhouse-server(DB::PreparedFunctionCast::executeImpl(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long)+0xa3) [0x3ff0803]\r\n9. /usr/bin/clickhouse-server(DB::PreparedFunctionImpl::execute(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)+0x27c) [0x72a473c]\r\n10. /usr/bin/clickhouse-server(DB::ExpressionAction::execute(DB::Block&, bool) const+0x281) [0x7488a11]\r\n11. /usr/bin/clickhouse-server(DB::ExpressionActions::execute(DB::Block&, bool) const+0x45) [0x748a135]\r\n12. /usr/bin/clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x4b) [0x73276ab]\r\n13. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x187) [0x6c160a7]\r\n14. /usr/bin/clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x2f) [0x732768f]\r\n15. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x187) [0x6c160a7]\r\n16. /usr/bin/clickhouse-server(DB::AsynchronousBlockInputStream::calculate()+0x5b) [0x6c0fadb]\r\n17. /usr/bin/clickhouse-server() [0x6c0fea0]\r\n18. /usr/bin/clickhouse-server(ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)+0x1a7) [0x3c785e7]\r\n19. /usr/bin/clickhouse-server(ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const+0x3e) [0x3c78bce]\r\n20. /usr/bin/clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x1a6) [0x3c760f6]\r\n21. /usr/bin/clickhouse-server() [0xba3e1a0]\r\n22. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7f8e7dc5c6db]\r\n23. /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f) [0x7f8e7d3e388f]\r\n\r\nReceived exception from server (version 19.13.3):\r\nCode: 32. DB::Exception: Received from localhost:9000. DB::Exception: Attempt to read after eof. \r\n```\r\n\r\nThen same query with non-null value in he mysql source table return the expected result.\r\n\r\n\r\n\r\nNonetheless I would like to thank you for your job, CH rocks :+1: \n",
  "hints_text": "still reproduced on Clickhouse 19.17 and MySQL 5.1\ntemp workaround is using Nullable(Float64) or Nullable(Float32) is not good solution\n@4ertus2 any news about this issue?\n@Slach  The issue still exist with v20.3.7.46 (the latest current version)\n@Enmk any news about this issue?\nStill reproduce on 20.5.3.27, any updates there? \nSee https://github.com/ClickHouse/ClickHouse/pull/11512\nStill reproduce on 20.6.3, any updates there?\n You can check on build from master(for example via testing release) or wait 20.10 release. \n  HttpCode:500 ;  ;Code: 32, e.displayText() = DB::Exception: Attempt to read after eof: while executing 'FUNCTION CAST(_dummy_0 : 0, 'Nullable(Decimal(9, 2))' :: 1) -> CAST(_dummy_0, 'Nullable(Decimal(9, 2))') Nullable(Decimal(9, 2)) : 2' (version 20.12.4.5 (official build))\r\n\nSo that didn't help https://github.com/ClickHouse/ClickHouse/pull/14535 ...\r\n@zhang2014 are you interested in fixing that? \nMinimal example : ```SELECT CAST(arrayJoin(['42.1', NULL]) AS Nullable(Decimal(10,2)));```\r\n\r\nI will try to fix it.",
  "created_at": "2021-01-04T12:42:22Z",
  "modified_files": [
    "src/Functions/FunctionsConversion.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01632_nullable_string_type_convert_to_decimal_type.reference",
    "b/tests/queries/0_stateless/01632_nullable_string_type_convert_to_decimal_type.sql"
  ]
}