diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6a93449495cb..6d5ce1996f34 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -77,10 +77,9 @@ option(USE_STATIC_LIBRARIES "Disable to use shared libraries" ON)
 # DEVELOPER ONLY.
 # Faster linking if turned on.
 option(SPLIT_SHARED_LIBRARIES "Keep all internal libraries as separate .so files" OFF)
-option(CLICKHOUSE_SPLIT_BINARY "Make several binaries (clickhouse-server, clickhouse-client etc.) instead of one bundled" OFF)
 
-if (USE_STATIC_LIBRARIES AND (SPLIT_SHARED_LIBRARIES OR CLICKHOUSE_SPLIT_BINARY))
-    message(FATAL_ERROR "SPLIT_SHARED_LIBRARIES=1 or CLICKHOUSE_SPLIT_BINARY=1 must not be used together with USE_STATIC_LIBRARIES=1")
+if (USE_STATIC_LIBRARIES AND SPLIT_SHARED_LIBRARIES)
+    message(FATAL_ERROR "SPLIT_SHARED_LIBRARIES=1 must not be used together with USE_STATIC_LIBRARIES=1")
 endif()
 
 if (NOT USE_STATIC_LIBRARIES AND SPLIT_SHARED_LIBRARIES)
@@ -502,7 +501,7 @@ endif ()
 message (STATUS
     "Building for: ${CMAKE_SYSTEM} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_LIBRARY_ARCHITECTURE} ;
     USE_STATIC_LIBRARIES=${USE_STATIC_LIBRARIES}
-    SPLIT_SHARED=${SPLIT_SHARED_LIBRARIES}")
+    SPLIT_SHARED_LIBRARIES=${SPLIT_SHARED_LIBRARIES}")
 
 include (GNUInstallDirs)
 
diff --git a/docker/packager/packager b/docker/packager/packager
index 1f41b3e69c63..dbbfc9a02fff 100755
--- a/docker/packager/packager
+++ b/docker/packager/packager
@@ -262,8 +262,7 @@ def parse_env_variables(
 
     if split_binary:
         cmake_flags.append(
-            "-DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1 "
-            "-DCLICKHOUSE_SPLIT_BINARY=1"
+            "-DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1"
         )
         # We can't always build utils because it requires too much space, but
         # we have to build them at least in some way in CI. The split build is
diff --git a/docs/en/development/continuous-integration.md b/docs/en/development/continuous-integration.md
index 7b2da4416d65..48a12474a51e 100644
--- a/docs/en/development/continuous-integration.md
+++ b/docs/en/development/continuous-integration.md
@@ -171,11 +171,11 @@ concurrency-related errors. If it fails:
 
 ## Split Build Smoke Test
 
-Checks that the server build in [split build](../development/build.md#split-build)
+Checks that the server build in [split build](../development/developer-instruction.md#split-build)
 configuration can start and run simple queries.  If it fails:
 
     * Fix other test errors first;
-    * Build the server in [split build](../development/build.md#split-build) configuration
+    * Build the server in [split build](../development/developer-instruction.md#split-build) configuration
       locally and check whether it can start and run `select 1`.
 
 
diff --git a/docs/en/development/developer-instruction.md b/docs/en/development/developer-instruction.md
index ea2ed95fd27b..4415ca8bacb5 100644
--- a/docs/en/development/developer-instruction.md
+++ b/docs/en/development/developer-instruction.md
@@ -269,17 +269,11 @@ Most probably some of the builds will fail at first times. This is due to the fa
 
 ## Faster builds for development: Split build configuration {#split-build}
 
-ClickHouse is normally statically linked into a single static `clickhouse` binary with minimal dependencies. This is convenient for distribution, but it means that for every change the entire binary needs to be re-linked, which is slow and inconvenient for development. As an alternative, you can instead build dynamically linked shared libraries and separate binaries `clickhouse-server`, `clickhouse-client` etc., allowing for faster incremental builds. To use it, add the following flags to your `cmake` invocation:
+ClickHouse is normally statically linked into a single static `clickhouse` binary with minimal dependencies. This is convenient for distribution, but it means that for every change the entire binary needs to be re-linked, which is slow and inconvenient for development. As an alternative, you can instead build dynamically linked shared libraries, allowing for faster incremental builds. To use it, add the following flags to your `cmake` invocation:
 ```
--DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1 -DCLICKHOUSE_SPLIT_BINARY=1
+-DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1
 ```
 
-Note that the split build has several drawbacks:
-* There is no single `clickhouse` binary, and you have to run `clickhouse-server`, `clickhouse-client`, etc.
-* Risk of segfault if you run any of the programs while rebuilding the project.
-* You cannot run the integration tests since they only work a single complete binary.
-* You can't easily copy the binaries elsewhere. Instead of moving a single binary you'll need to copy all binaries and libraries.
-
 If you are not interested in functionality provided by third-party libraries, you can further speed up the build using `cmake` options
 ```
 -DENABLE_LIBRARIES=0 -DENABLE_EMBEDDED_COMPILER=0
diff --git a/docs/ru/development/developer-instruction.md b/docs/ru/development/developer-instruction.md
index 4c1981198a0f..f2fac4ccdf88 100644
--- a/docs/ru/development/developer-instruction.md
+++ b/docs/ru/development/developer-instruction.md
@@ -170,7 +170,7 @@ sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
 
 В случае использования на разработческой машине старого HDD или SSD, а также при желании использовать меньше места для артефактов сборки можно использовать следующую команду:
 ```bash
-cmake -DUSE_DEBUG_HELPERS=1 -DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1 -DCLICKHOUSE_SPLIT_BINARY=1 ..
+cmake -DUSE_DEBUG_HELPERS=1 -DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1 ..
 ```
 При этом надо учесть, что получаемые в результате сборки исполнимые файлы будут динамически слинкованы с библиотеками, и поэтому фактически станут непереносимыми на другие компьютеры (либо для этого нужно будет предпринять значительно больше усилий по сравнению со статической сборкой). Плюсом же в данном случае является значительно меньшее время сборки (это проявляется не на первой сборке, а на последующих, после внесения изменений в исходный код - тратится меньшее время на линковку по сравнению со статической сборкой) и значительно меньшее использование места на жёстком диске (экономия более, чем в 3 раза по сравнению со статической сборкой). Для целей разработки, когда планируются только отладочные запуски на том же компьютере, где осуществлялась сборка, это может быть наиболее удобным вариантом.
 
diff --git a/programs/CMakeLists.txt b/programs/CMakeLists.txt
index 6ebbe9127242..31943ef7dae9 100644
--- a/programs/CMakeLists.txt
+++ b/programs/CMakeLists.txt
@@ -18,11 +18,7 @@ option (ENABLE_CLICKHOUSE_SERVER "Server mode (main mode)" ${ENABLE_CLICKHOUSE_A
 option (ENABLE_CLICKHOUSE_CLIENT "Client mode (interactive tui/shell that connects to the server)"
     ${ENABLE_CLICKHOUSE_ALL})
 
-if (CLICKHOUSE_SPLIT_BINARY)
-    option (ENABLE_CLICKHOUSE_SELF_EXTRACTING "Self-extracting executable" OFF)
-else ()
-    option (ENABLE_CLICKHOUSE_SELF_EXTRACTING "Self-extracting executable" ON)
-endif ()
+option (ENABLE_CLICKHOUSE_SELF_EXTRACTING "Self-extracting executable" ON)
 
 # https://clickhouse.com/docs/en/operations/utilities/clickhouse-local/
 option (ENABLE_CLICKHOUSE_LOCAL "Local files fast processing mode" ${ENABLE_CLICKHOUSE_ALL})
@@ -80,12 +76,7 @@ if (NOT ENABLE_NURAFT)
     set(ENABLE_CLICKHOUSE_KEEPER_CONVERTER OFF)
 endif()
 
-if (CLICKHOUSE_SPLIT_BINARY)
-    option(ENABLE_CLICKHOUSE_INSTALL "Install ClickHouse without .deb/.rpm/.tgz packages (having the binary only)" OFF)
-else ()
-    option(ENABLE_CLICKHOUSE_INSTALL "Install ClickHouse without .deb/.rpm/.tgz packages (having the binary only)"
-        ${ENABLE_CLICKHOUSE_ALL})
-endif ()
+option(ENABLE_CLICKHOUSE_INSTALL "Install ClickHouse without .deb/.rpm/.tgz packages (having the binary only)" ${ENABLE_CLICKHOUSE_ALL})
 
 message(STATUS "ClickHouse modes:")
 
@@ -211,10 +202,6 @@ macro(clickhouse_target_link_split_lib target name)
     endif()
 endmacro()
 
-macro(clickhouse_program_link_split_binary name)
-    clickhouse_target_link_split_lib(clickhouse-${name} ${name})
-endmacro()
-
 macro(clickhouse_program_add_library name)
     string(TOUPPER ${name} name_uc)
     string(REPLACE "-" "_" name_uc ${name_uc})
@@ -239,17 +226,8 @@ macro(clickhouse_program_add_library name)
     endif()
 endmacro()
 
-macro(clickhouse_program_add_executable name)
-    if(CLICKHOUSE_SPLIT_BINARY)
-        clickhouse_add_executable(clickhouse-${name} clickhouse-${name}.cpp)
-        clickhouse_program_link_split_binary(${name})
-        install(TARGETS clickhouse-${name} ${CLICKHOUSE_ALL_TARGETS} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-    endif()
-endmacro()
-
 macro(clickhouse_program_add name)
     clickhouse_program_add_library(${name})
-    clickhouse_program_add_executable(${name})
 endmacro()
 
 add_subdirectory (server)
@@ -342,210 +320,173 @@ if (CLICKHOUSE_ONE_SHARED)
     install (TARGETS clickhouse-lib LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT clickhouse)
 endif()
 
-if (CLICKHOUSE_SPLIT_BINARY)
-    set (CLICKHOUSE_ALL_TARGETS
-        clickhouse-server
-        clickhouse-client
-        clickhouse-local
-        clickhouse-benchmark
-        clickhouse-extract-from-config
-        clickhouse-compressor
-        clickhouse-format
-        clickhouse-obfuscator
-        clickhouse-git-import
-        clickhouse-copier
-        clickhouse-static-files-disk-uploader
-        clickhouse-disks)
-
-    if (ENABLE_CLICKHOUSE_ODBC_BRIDGE)
-        list (APPEND CLICKHOUSE_ALL_TARGETS clickhouse-odbc-bridge)
-    endif ()
-
-    if (ENABLE_CLICKHOUSE_LIBRARY_BRIDGE)
-        list (APPEND CLICKHOUSE_ALL_TARGETS clickhouse-library-bridge)
-    endif ()
-
-    if (ENABLE_CLICKHOUSE_KEEPER)
-        list (APPEND CLICKHOUSE_ALL_TARGETS clickhouse-keeper)
-    endif ()
-
-    if (ENABLE_CLICKHOUSE_KEEPER_CONVERTER)
-        list (APPEND CLICKHOUSE_ALL_TARGETS clickhouse-keeper-converter)
-    endif ()
-
-    if (ENABLE_CLICKHOUSE_SU)
-        list (APPEND CLICKHOUSE_ALL_TARGETS clickhouse-su)
-    endif ()
-
-    set_target_properties(${CLICKHOUSE_ALL_TARGETS} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ..)
-
-    add_custom_target (clickhouse-bundle ALL DEPENDS ${CLICKHOUSE_ALL_TARGETS})
-    add_custom_target (clickhouse ALL DEPENDS clickhouse-bundle)
-
-    install(PROGRAMS clickhouse-split-helper DESTINATION ${CMAKE_INSTALL_BINDIR} RENAME clickhouse COMPONENT clickhouse)
-else ()
-    clickhouse_add_executable (clickhouse main.cpp)
-
-    # A library that prevent usage of several functions from libc.
-    if (ARCH_AMD64 AND OS_LINUX AND NOT OS_ANDROID)
-        set (HARMFUL_LIB harmful)
-    endif ()
-
-    target_link_libraries (clickhouse PRIVATE clickhouse_common_io string_utils ${HARMFUL_LIB})
-    target_include_directories (clickhouse PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
-
-    if (ENABLE_CLICKHOUSE_SERVER)
-        clickhouse_target_link_split_lib(clickhouse server)
-    endif ()
-    if (ENABLE_CLICKHOUSE_CLIENT)
-        clickhouse_target_link_split_lib(clickhouse client)
-    endif ()
-    if (ENABLE_CLICKHOUSE_LOCAL)
-        clickhouse_target_link_split_lib(clickhouse local)
-    endif ()
-    if (ENABLE_CLICKHOUSE_BENCHMARK)
-        clickhouse_target_link_split_lib(clickhouse benchmark)
-    endif ()
-    if (ENABLE_CLICKHOUSE_COPIER)
-        clickhouse_target_link_split_lib(clickhouse copier)
-    endif ()
-    if (ENABLE_CLICKHOUSE_EXTRACT_FROM_CONFIG)
-        clickhouse_target_link_split_lib(clickhouse extract-from-config)
-    endif ()
-    if (ENABLE_CLICKHOUSE_COMPRESSOR)
-        clickhouse_target_link_split_lib(clickhouse compressor)
-    endif ()
-    if (ENABLE_CLICKHOUSE_FORMAT)
-        clickhouse_target_link_split_lib(clickhouse format)
-    endif ()
-    if (ENABLE_CLICKHOUSE_OBFUSCATOR)
-        clickhouse_target_link_split_lib(clickhouse obfuscator)
-    endif ()
-    if (ENABLE_CLICKHOUSE_GIT_IMPORT)
-        clickhouse_target_link_split_lib(clickhouse git-import)
-    endif ()
-    if (ENABLE_CLICKHOUSE_STATIC_FILES_DISK_UPLOADER)
-        clickhouse_target_link_split_lib(clickhouse static-files-disk-uploader)
-    endif ()
-    if (ENABLE_CLICKHOUSE_SU)
-        clickhouse_target_link_split_lib(clickhouse su)
-    endif ()
-    if (ENABLE_CLICKHOUSE_KEEPER)
-        clickhouse_target_link_split_lib(clickhouse keeper)
-    endif()
-    if (ENABLE_CLICKHOUSE_KEEPER_CONVERTER)
-        clickhouse_target_link_split_lib(clickhouse keeper-converter)
-    endif()
-    if (ENABLE_CLICKHOUSE_INSTALL)
-        clickhouse_target_link_split_lib(clickhouse install)
-    endif ()
-    if (ENABLE_CLICKHOUSE_DISKS)
-        clickhouse_target_link_split_lib(clickhouse disks)
-    endif ()
-
-    set (CLICKHOUSE_BUNDLE)
-    if (ENABLE_CLICKHOUSE_SELF_EXTRACTING)
-        list(APPEND CLICKHOUSE_BUNDLE self-extracting)
-    endif ()
-    if (ENABLE_CLICKHOUSE_SERVER)
-        add_custom_target (clickhouse-server ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-server DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-server" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-server)
-    endif ()
-    if (ENABLE_CLICKHOUSE_CLIENT)
-        add_custom_target (clickhouse-client ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-client DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-client" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-client)
-    endif ()
-    if (ENABLE_CLICKHOUSE_LOCAL)
-        add_custom_target (clickhouse-local ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-local DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-local" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-local)
-    endif ()
-    if (ENABLE_CLICKHOUSE_BENCHMARK)
-        add_custom_target (clickhouse-benchmark ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-benchmark DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-benchmark" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-benchmark)
-    endif ()
-    if (ENABLE_CLICKHOUSE_COPIER)
-        add_custom_target (clickhouse-copier ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-copier DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-copier" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-copier)
-    endif ()
-    if (ENABLE_CLICKHOUSE_EXTRACT_FROM_CONFIG)
-        add_custom_target (clickhouse-extract-from-config ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-extract-from-config DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-extract-from-config" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-extract-from-config)
-    endif ()
-    if (ENABLE_CLICKHOUSE_COMPRESSOR)
-        add_custom_target (clickhouse-compressor ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-compressor DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-compressor" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-compressor)
-    endif ()
-    if (ENABLE_CLICKHOUSE_FORMAT)
-        add_custom_target (clickhouse-format ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-format DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-format" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-format)
-    endif ()
-    if (ENABLE_CLICKHOUSE_OBFUSCATOR)
-        add_custom_target (clickhouse-obfuscator ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-obfuscator DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-obfuscator" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-obfuscator)
-    endif ()
-    if (ENABLE_CLICKHOUSE_GIT_IMPORT)
-        add_custom_target (clickhouse-git-import ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-git-import DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-git-import" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-git-import)
-    endif ()
-    if (ENABLE_CLICKHOUSE_STATIC_FILES_DISK_UPLOADER)
-        add_custom_target (clickhouse-static-files-disk-uploader ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-static-files-disk-uploader DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-static-files-disk-uploader" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-static-files-disk-uploader)
-    endif ()
-    if (ENABLE_CLICKHOUSE_SU)
-        add_custom_target (clickhouse-su ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-su DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-su" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-su)
-    endif ()
-
-    if (ENABLE_CLICKHOUSE_KEEPER)
-        if (NOT BUILD_STANDALONE_KEEPER AND CREATE_KEEPER_SYMLINK)
-            add_custom_target (clickhouse-keeper ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-keeper DEPENDS clickhouse)
-            install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-keeper" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        endif()
+clickhouse_add_executable (clickhouse main.cpp)
 
-        # otherwise we don't build keeper
-        if (BUILD_STANDALONE_KEEPER OR CREATE_KEEPER_SYMLINK)
-            list(APPEND CLICKHOUSE_BUNDLE clickhouse-keeper)
-        endif()
-    endif ()
-    if (ENABLE_CLICKHOUSE_KEEPER_CONVERTER)
-        add_custom_target (clickhouse-keeper-converter ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-keeper-converter DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-keeper-converter" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-keeper-converter)
-    endif ()
-    if (ENABLE_CLICKHOUSE_DISKS)
-        add_custom_target (clickhouse-disks ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-disks DEPENDS clickhouse)
-        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-disks" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
-        list(APPEND CLICKHOUSE_BUNDLE clickhouse-disks)
-    endif ()
-
-    add_custom_target (clickhouse-bundle ALL DEPENDS ${CLICKHOUSE_BUNDLE})
-
-    if (USE_GDB_ADD_INDEX)
-        add_custom_command(TARGET clickhouse POST_BUILD COMMAND ${GDB_ADD_INDEX_EXE} clickhouse COMMENT "Adding .gdb-index to clickhouse" VERBATIM)
-    endif()
+if (NOT USE_STATIC_LIBRARIES AND SPLIT_SHARED_LIBRARIES)
+    # Shared split (dev) build: In CI, the server is run with custom LD_LIBRARY_PATH. This makes the harmful env check re-execute the
+    # process in a clean environment but as in CI the containing directory is not included in DT_RUNPATH/DT_RPATH, the server won't come up.
+    target_compile_definitions(clickhouse PRIVATE DISABLE_HARMFUL_ENV_VAR_CHECK)
+endif ()
+
+# A library that prevent usage of several functions from libc.
+if (ARCH_AMD64 AND OS_LINUX AND NOT OS_ANDROID)
+    set (HARMFUL_LIB harmful)
+endif ()
+
+target_link_libraries (clickhouse PRIVATE clickhouse_common_io string_utils ${HARMFUL_LIB})
+target_include_directories (clickhouse PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
+
+if (ENABLE_CLICKHOUSE_SERVER)
+    clickhouse_target_link_split_lib(clickhouse server)
+endif ()
+if (ENABLE_CLICKHOUSE_CLIENT)
+    clickhouse_target_link_split_lib(clickhouse client)
+endif ()
+if (ENABLE_CLICKHOUSE_LOCAL)
+    clickhouse_target_link_split_lib(clickhouse local)
+endif ()
+if (ENABLE_CLICKHOUSE_BENCHMARK)
+    clickhouse_target_link_split_lib(clickhouse benchmark)
+endif ()
+if (ENABLE_CLICKHOUSE_COPIER)
+    clickhouse_target_link_split_lib(clickhouse copier)
+endif ()
+if (ENABLE_CLICKHOUSE_EXTRACT_FROM_CONFIG)
+    clickhouse_target_link_split_lib(clickhouse extract-from-config)
+endif ()
+if (ENABLE_CLICKHOUSE_COMPRESSOR)
+    clickhouse_target_link_split_lib(clickhouse compressor)
+endif ()
+if (ENABLE_CLICKHOUSE_FORMAT)
+    clickhouse_target_link_split_lib(clickhouse format)
+endif ()
+if (ENABLE_CLICKHOUSE_OBFUSCATOR)
+    clickhouse_target_link_split_lib(clickhouse obfuscator)
+endif ()
+if (ENABLE_CLICKHOUSE_GIT_IMPORT)
+    clickhouse_target_link_split_lib(clickhouse git-import)
+endif ()
+if (ENABLE_CLICKHOUSE_STATIC_FILES_DISK_UPLOADER)
+    clickhouse_target_link_split_lib(clickhouse static-files-disk-uploader)
+endif ()
+if (ENABLE_CLICKHOUSE_SU)
+    clickhouse_target_link_split_lib(clickhouse su)
+endif ()
+if (ENABLE_CLICKHOUSE_KEEPER)
+    clickhouse_target_link_split_lib(clickhouse keeper)
+endif()
+if (ENABLE_CLICKHOUSE_KEEPER_CONVERTER)
+    clickhouse_target_link_split_lib(clickhouse keeper-converter)
+endif()
+if (ENABLE_CLICKHOUSE_INSTALL)
+    clickhouse_target_link_split_lib(clickhouse install)
+endif ()
+if (ENABLE_CLICKHOUSE_DISKS)
+    clickhouse_target_link_split_lib(clickhouse disks)
+endif ()
+
+set (CLICKHOUSE_BUNDLE)
+if (ENABLE_CLICKHOUSE_SELF_EXTRACTING)
+    list(APPEND CLICKHOUSE_BUNDLE self-extracting)
+endif ()
+if (ENABLE_CLICKHOUSE_SERVER)
+    add_custom_target (clickhouse-server ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-server DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-server" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-server)
+endif ()
+if (ENABLE_CLICKHOUSE_CLIENT)
+    add_custom_target (clickhouse-client ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-client DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-client" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-client)
+endif ()
+if (ENABLE_CLICKHOUSE_LOCAL)
+    add_custom_target (clickhouse-local ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-local DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-local" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-local)
+endif ()
+if (ENABLE_CLICKHOUSE_BENCHMARK)
+    add_custom_target (clickhouse-benchmark ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-benchmark DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-benchmark" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-benchmark)
+endif ()
+if (ENABLE_CLICKHOUSE_COPIER)
+    add_custom_target (clickhouse-copier ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-copier DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-copier" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-copier)
+endif ()
+if (ENABLE_CLICKHOUSE_EXTRACT_FROM_CONFIG)
+    add_custom_target (clickhouse-extract-from-config ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-extract-from-config DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-extract-from-config" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-extract-from-config)
+endif ()
+if (ENABLE_CLICKHOUSE_COMPRESSOR)
+    add_custom_target (clickhouse-compressor ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-compressor DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-compressor" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-compressor)
+endif ()
+if (ENABLE_CLICKHOUSE_FORMAT)
+    add_custom_target (clickhouse-format ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-format DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-format" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-format)
+endif ()
+if (ENABLE_CLICKHOUSE_OBFUSCATOR)
+    add_custom_target (clickhouse-obfuscator ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-obfuscator DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-obfuscator" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-obfuscator)
+endif ()
+if (ENABLE_CLICKHOUSE_GIT_IMPORT)
+    add_custom_target (clickhouse-git-import ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-git-import DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-git-import" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-git-import)
+endif ()
+if (ENABLE_CLICKHOUSE_STATIC_FILES_DISK_UPLOADER)
+    add_custom_target (clickhouse-static-files-disk-uploader ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-static-files-disk-uploader DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-static-files-disk-uploader" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-static-files-disk-uploader)
+endif ()
+if (ENABLE_CLICKHOUSE_SU)
+    add_custom_target (clickhouse-su ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-su DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-su" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-su)
+endif ()
 
-    if (USE_BINARY_HASH)
-        add_custom_command(TARGET clickhouse POST_BUILD COMMAND ./clickhouse hash-binary > hash && ${OBJCOPY_PATH} --add-section .clickhouse.hash=hash clickhouse COMMENT "Adding section '.clickhouse.hash' to clickhouse binary" VERBATIM)
+if (ENABLE_CLICKHOUSE_KEEPER)
+    if (NOT BUILD_STANDALONE_KEEPER AND CREATE_KEEPER_SYMLINK)
+        add_custom_target (clickhouse-keeper ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-keeper DEPENDS clickhouse)
+        install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-keeper" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
     endif()
 
-    if (SPLIT_DEBUG_SYMBOLS)
-        clickhouse_split_debug_symbols(TARGET clickhouse DESTINATION_DIR ${CMAKE_CURRENT_BINARY_DIR}/${SPLITTED_DEBUG_SYMBOLS_DIR} BINARY_PATH clickhouse)
-    else()
-        clickhouse_make_empty_debug_info_for_nfpm(TARGET clickhouse DESTINATION_DIR ${CMAKE_CURRENT_BINARY_DIR}/${SPLITTED_DEBUG_SYMBOLS_DIR})
-        install (TARGETS clickhouse RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    # otherwise we don't build keeper
+    if (BUILD_STANDALONE_KEEPER OR CREATE_KEEPER_SYMLINK)
+        list(APPEND CLICKHOUSE_BUNDLE clickhouse-keeper)
     endif()
+endif ()
+if (ENABLE_CLICKHOUSE_KEEPER_CONVERTER)
+    add_custom_target (clickhouse-keeper-converter ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-keeper-converter DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-keeper-converter" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-keeper-converter)
+endif ()
+if (ENABLE_CLICKHOUSE_DISKS)
+    add_custom_target (clickhouse-disks ALL COMMAND ${CMAKE_COMMAND} -E create_symlink clickhouse clickhouse-disks DEPENDS clickhouse)
+    install (FILES "${CMAKE_CURRENT_BINARY_DIR}/clickhouse-disks" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
+    list(APPEND CLICKHOUSE_BUNDLE clickhouse-disks)
+endif ()
+
+add_custom_target (clickhouse-bundle ALL DEPENDS ${CLICKHOUSE_BUNDLE})
+
+if (USE_GDB_ADD_INDEX)
+    add_custom_command(TARGET clickhouse POST_BUILD COMMAND ${GDB_ADD_INDEX_EXE} clickhouse COMMENT "Adding .gdb-index to clickhouse" VERBATIM)
+endif()
+
+if (USE_BINARY_HASH)
+    add_custom_command(TARGET clickhouse POST_BUILD COMMAND ./clickhouse hash-binary > hash && ${OBJCOPY_PATH} --add-section .clickhouse.hash=hash clickhouse COMMENT "Adding section '.clickhouse.hash' to clickhouse binary" VERBATIM)
+endif()
+
+if (SPLIT_DEBUG_SYMBOLS)
+    clickhouse_split_debug_symbols(TARGET clickhouse DESTINATION_DIR ${CMAKE_CURRENT_BINARY_DIR}/${SPLITTED_DEBUG_SYMBOLS_DIR} BINARY_PATH clickhouse)
+else()
+    clickhouse_make_empty_debug_info_for_nfpm(TARGET clickhouse DESTINATION_DIR ${CMAKE_CURRENT_BINARY_DIR}/${SPLITTED_DEBUG_SYMBOLS_DIR})
+    install (TARGETS clickhouse RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)
 endif()
 
 if (ENABLE_TESTS)
diff --git a/programs/main.cpp b/programs/main.cpp
index 175504a85fa1..27e17cfd2e0b 100644
--- a/programs/main.cpp
+++ b/programs/main.cpp
@@ -345,6 +345,7 @@ struct Checker
 ;
 
 
+#ifndef DISABLE_HARMFUL_ENV_VAR_CHECK
 /// NOTE: We will migrate to full static linking or our own dynamic loader to make this code obsolete.
 void checkHarmfulEnvironmentVariables(char ** argv)
 {
@@ -396,6 +397,7 @@ void checkHarmfulEnvironmentVariables(char ** argv)
         _exit(error);
     }
 }
+#endif
 
 }
 
@@ -422,7 +424,9 @@ int main(int argc_, char ** argv_)
     ///  will work only after additional call of this function.
     updatePHDRCache();
 
+#ifndef DISABLE_HARMFUL_ENV_VAR_CHECK
     checkHarmfulEnvironmentVariables(argv_);
+#endif
 
     /// Reset new handler to default (that throws std::bad_alloc)
     /// It is needed because LLVM library clobbers it.
diff --git a/src/Common/config.h.in b/src/Common/config.h.in
index d8d308c59bd0..27db791b9543 100644
--- a/src/Common/config.h.in
+++ b/src/Common/config.h.in
@@ -18,7 +18,6 @@
 
 #cmakedefine01 USE_DATASKETCHES
 #cmakedefine01 USE_YAML_CPP
-#cmakedefine01 CLICKHOUSE_SPLIT_BINARY
 #cmakedefine01 USE_BZIP2
 #cmakedefine01 USE_MINIZIP
 #cmakedefine01 USE_SNAPPY
diff --git a/src/Storages/System/StorageSystemBuildOptions.generated.cpp.in b/src/Storages/System/StorageSystemBuildOptions.generated.cpp.in
index 56c96a0857c1..dde90ce459ad 100644
--- a/src/Storages/System/StorageSystemBuildOptions.generated.cpp.in
+++ b/src/Storages/System/StorageSystemBuildOptions.generated.cpp.in
@@ -21,7 +21,6 @@ const char * auto_config_build[]
     "LINK_FLAGS", "@FULL_EXE_LINKER_FLAGS_NORMALIZED@",
     "BUILD_COMPILE_DEFINITIONS", "@BUILD_COMPILE_DEFINITIONS@",
     "STATIC", "@USE_STATIC_LIBRARIES@",
-    "SPLIT_BINARY", "@CLICKHOUSE_SPLIT_BINARY@",
     "USE_EMBEDDED_COMPILER", "@USE_EMBEDDED_COMPILER@",
     "USE_GLIBC_COMPATIBILITY", "@GLIBC_COMPATIBILITY@",
     "USE_JEMALLOC", "@ENABLE_JEMALLOC@",
@@ -59,7 +58,6 @@ const char * auto_config_build[]
     "USE_AWS_S3", "@USE_AWS_S3@",
     "USE_CASSANDRA", "@USE_CASSANDRA@",
     "USE_YAML_CPP", "@USE_YAML_CPP@",
-    "CLICKHOUSE_SPLIT_BINARY", "@CLICKHOUSE_SPLIT_BINARY@",
     "USE_SENTRY", "@USE_SENTRY@",
     "USE_DATASKETCHES", "@USE_DATASKETCHES@",
     "USE_AVRO", "@USE_AVRO@",
