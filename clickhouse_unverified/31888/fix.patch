diff --git a/src/Processors/Transforms/WindowTransform.cpp b/src/Processors/Transforms/WindowTransform.cpp
index 1f8376f47008..7a3bb25d2c6c 100644
--- a/src/Processors/Transforms/WindowTransform.cpp
+++ b/src/Processors/Transforms/WindowTransform.cpp
@@ -4,10 +4,12 @@
 #include <Common/Arena.h>
 #include <Common/FieldVisitorConvertToNumber.h>
 #include <Common/FieldVisitorsAccurateComparison.h>
+#include <Columns/ColumnLowCardinality.h>
 #include <base/arithmeticOverflow.h>
 #include <Columns/ColumnConst.h>
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/getLeastSupertype.h>
+#include <DataTypes/DataTypeLowCardinality.h>
 #include <Interpreters/ExpressionActions.h>
 #include <Interpreters/convertFieldToType.h>
 
@@ -1005,6 +1007,12 @@ static void assertSameColumns(const Columns & left_all,
         assert(left_column);
         assert(right_column);
 
+        if (const auto * left_lc = typeid_cast<const ColumnLowCardinality *>(left_column))
+            left_column = left_lc->getDictionary().getNestedColumn().get();
+
+        if (const auto * right_lc = typeid_cast<const ColumnLowCardinality *>(right_column))
+            right_column = right_lc->getDictionary().getNestedColumn().get();
+
         assert(typeid(*left_column).hash_code()
             == typeid(*right_column).hash_code());
 
@@ -1056,10 +1064,13 @@ void WindowTransform::appendChunk(Chunk & chunk)
         // Another problem with Const columns is that the aggregate functions
         // can't work with them, so we have to materialize them like the
         // Aggregator does.
+        // Likewise, aggregate functions can't work with LowCardinality,
+        // so we have to materialize them too.
         // Just materialize everything.
         auto columns = chunk.detachColumns();
+        block.original_input_columns = columns;
         for (auto & column : columns)
-            column = std::move(column)->convertToFullColumnIfConst();
+            column = recursiveRemoveLowCardinality(std::move(column)->convertToFullColumnIfConst());
         block.input_columns = std::move(columns);
 
         // Initialize output columns.
@@ -1302,7 +1313,7 @@ IProcessor::Status WindowTransform::prepare()
             // Output the ready block.
             const auto i = next_output_block_number - first_block_number;
             auto & block = blocks[i];
-            auto columns = block.input_columns;
+            auto columns = block.original_input_columns;
             for (auto & res : block.output_columns)
             {
                 columns.push_back(ColumnPtr(std::move(res)));
diff --git a/src/Processors/Transforms/WindowTransform.h b/src/Processors/Transforms/WindowTransform.h
index 5fbdd6d38e12..077979e83b90 100644
--- a/src/Processors/Transforms/WindowTransform.h
+++ b/src/Processors/Transforms/WindowTransform.h
@@ -39,6 +39,7 @@ struct WindowFunctionWorkspace
 
 struct WindowTransformBlock
 {
+    Columns original_input_columns;
     Columns input_columns;
     MutableColumns output_columns;
 
