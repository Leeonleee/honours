{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 31888,
  "instance_id": "ClickHouse__ClickHouse-31888",
  "issue_numbers": [
    "31114"
  ],
  "base_commit": "64263a043a73cef305c9366174d51ee345922e6e",
  "patch": "diff --git a/src/Processors/Transforms/WindowTransform.cpp b/src/Processors/Transforms/WindowTransform.cpp\nindex 1f8376f47008..7a3bb25d2c6c 100644\n--- a/src/Processors/Transforms/WindowTransform.cpp\n+++ b/src/Processors/Transforms/WindowTransform.cpp\n@@ -4,10 +4,12 @@\n #include <Common/Arena.h>\n #include <Common/FieldVisitorConvertToNumber.h>\n #include <Common/FieldVisitorsAccurateComparison.h>\n+#include <Columns/ColumnLowCardinality.h>\n #include <base/arithmeticOverflow.h>\n #include <Columns/ColumnConst.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/getLeastSupertype.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n #include <Interpreters/ExpressionActions.h>\n #include <Interpreters/convertFieldToType.h>\n \n@@ -1005,6 +1007,12 @@ static void assertSameColumns(const Columns & left_all,\n         assert(left_column);\n         assert(right_column);\n \n+        if (const auto * left_lc = typeid_cast<const ColumnLowCardinality *>(left_column))\n+            left_column = left_lc->getDictionary().getNestedColumn().get();\n+\n+        if (const auto * right_lc = typeid_cast<const ColumnLowCardinality *>(right_column))\n+            right_column = right_lc->getDictionary().getNestedColumn().get();\n+\n         assert(typeid(*left_column).hash_code()\n             == typeid(*right_column).hash_code());\n \n@@ -1056,10 +1064,13 @@ void WindowTransform::appendChunk(Chunk & chunk)\n         // Another problem with Const columns is that the aggregate functions\n         // can't work with them, so we have to materialize them like the\n         // Aggregator does.\n+        // Likewise, aggregate functions can't work with LowCardinality,\n+        // so we have to materialize them too.\n         // Just materialize everything.\n         auto columns = chunk.detachColumns();\n+        block.original_input_columns = columns;\n         for (auto & column : columns)\n-            column = std::move(column)->convertToFullColumnIfConst();\n+            column = recursiveRemoveLowCardinality(std::move(column)->convertToFullColumnIfConst());\n         block.input_columns = std::move(columns);\n \n         // Initialize output columns.\n@@ -1302,7 +1313,7 @@ IProcessor::Status WindowTransform::prepare()\n             // Output the ready block.\n             const auto i = next_output_block_number - first_block_number;\n             auto & block = blocks[i];\n-            auto columns = block.input_columns;\n+            auto columns = block.original_input_columns;\n             for (auto & res : block.output_columns)\n             {\n                 columns.push_back(ColumnPtr(std::move(res)));\ndiff --git a/src/Processors/Transforms/WindowTransform.h b/src/Processors/Transforms/WindowTransform.h\nindex 5fbdd6d38e12..077979e83b90 100644\n--- a/src/Processors/Transforms/WindowTransform.h\n+++ b/src/Processors/Transforms/WindowTransform.h\n@@ -39,6 +39,7 @@ struct WindowFunctionWorkspace\n \n struct WindowTransformBlock\n {\n+    Columns original_input_columns;\n     Columns input_columns;\n     MutableColumns output_columns;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02126_lc_window_functions.reference b/tests/queries/0_stateless/02126_lc_window_functions.reference\nnew file mode 100644\nindex 000000000000..bb2c453139e6\n--- /dev/null\n+++ b/tests/queries/0_stateless/02126_lc_window_functions.reference\n@@ -0,0 +1,13 @@\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+a\\0aa\t1\n+a\\0aa\t1\n+a\\0aa\t1\ndiff --git a/tests/queries/0_stateless/02126_lc_window_functions.sql b/tests/queries/0_stateless/02126_lc_window_functions.sql\nnew file mode 100644\nindex 000000000000..6a1fb691a375\n--- /dev/null\n+++ b/tests/queries/0_stateless/02126_lc_window_functions.sql\n@@ -0,0 +1,38 @@\n+SELECT max(id) OVER () AS aid\n+FROM\n+(\n+    SELECT materialize(toLowCardinality('aaaa')) AS id\n+    FROM numbers_mt(1000000)\n+)\n+FORMAT `Null`;\n+\n+SELECT max(id) OVER (PARTITION BY id) AS id\n+FROM\n+(\n+    SELECT materialize('aaaa') AS id\n+    FROM numbers_mt(1000000)\n+)\n+FORMAT `Null`;\n+\n+SELECT countIf(sym = 'Red') OVER () AS res\n+FROM\n+(\n+    SELECT CAST(CAST(number % 5, 'Enum8(\\'Red\\' = 0, \\'Blue\\' = 1, \\'Yellow\\' = 2, \\'Black\\' = 3, \\'White\\' = 4)'), 'LowCardinality(String)') AS sym\n+    FROM numbers(10)\n+);\n+\n+SELECT materialize(toLowCardinality('a\\0aa')), countIf(toLowCardinality('aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0aaaaaaa\\0'), sym = 'Red') OVER (Range BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS res FROM (SELECT CAST(CAST(number % 5, 'Enum8(\\'Red\\' = 0, \\'Blue\\' = 1, \\'Yellow\\' = 2, \\'Black\\' = 3, \\'White\\' = 4)'), 'LowCardinality(String)') AS sym FROM numbers(3));\n+\n+SELECT\n+    NULL,\n+    id,\n+    max(id) OVER (Rows BETWEEN 10 PRECEDING AND UNBOUNDED FOLLOWING) AS aid\n+FROM\n+(\n+    SELECT\n+        NULL,\n+        max(id) OVER (),\n+        materialize(toLowCardinality('')) AS id\n+    FROM numbers_mt(0, 1)\n+)\n+FORMAT `Null`;\n",
  "problem_statement": "Crash in window function with LowCardinality datatype\n**Describe what's wrong**\r\n\r\nClickHouse crashes if you execute `max(id) OVER (PARTITION BY id)` over LowCardinality column\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes.\r\nClickHouse version 21.11\r\n\r\n**How to reproduce**\r\n\r\n```\r\nSELECT max(id) OVER (PARTITION BY id) AS id\r\nFROM\r\n(\r\n    SELECT materialize('aaaa') AS id\r\n    FROM numbers_mt(1000000)\r\n)\r\nFORMAT `Null`\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.144 sec. Processed 1.00 million rows, 8.00 MB (6.95 million rows/s., 55.58 MB/s.)\r\n\r\nSELECT max(id) OVER (PARTITION BY id) AS aid\r\nFROM\r\n(\r\n    SELECT materialize(toLowCardinality('aaaa')) AS id\r\n    FROM numbers_mt(1000000)\r\n)\r\nFORMAT `Null`\r\n\r\n[ 14776 ] <Fatal> BaseDaemon: ########################################\r\n[ 14776 ] <Fatal> BaseDaemon: (version 21.11.1.8526, build id: 33B572DD4B9C2BE5F65F58755B19729DE40A4869) (from thread 14740) (query_id: d5299144-24c8-4d91-a122-09065f33bbaa) Received signal Segmentation fault (11)\r\n[ 14776 ] <Fatal> BaseDaemon: Address: 0x1 Access: read. Address not mapped to object.\r\n[ 14776 ] <Fatal> BaseDaemon: Stack trace: 0x9b389b0 0x1323afd3 0x1323b45e 0x1324051f 0x13070e9b 0x1306ce51 0x13072e25 0x9b80c57 0x9b8465d 0x7f1fe3050609 0x7f1fe2f4a293\r\n[ 14776 ] <Fatal> BaseDaemon: 2. memcpy @ 0x9b389b0 in /usr/bin/clickhouse\r\n[ 14776 ] <Fatal> BaseDaemon: 3. DB::WindowTransform::updateAggregationState() @ 0x1323afd3 in /usr/bin/clickhouse\r\n[ 14776 ] <Fatal> BaseDaemon: 4. DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x1323b45e in /usr/bin/clickhouse\r\n[ 14776 ] <Fatal> BaseDaemon: 5. DB::WindowTransform::work() @ 0x1324051f in /usr/bin/clickhouse\r\n[ 14776 ] <Fatal> BaseDaemon: 6. ? @ 0x13070e9b in /usr/bin/clickhouse\r\n[ 14776 ] <Fatal> BaseDaemon: 7. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1306ce51 in /usr/bin/clickhouse\r\n[ 14776 ] <Fatal> BaseDaemon: 8. ? @ 0x13072e25 in /usr/bin/clickhouse\r\n[ 14776 ] <Fatal> BaseDaemon: 9. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x9b80c57 in /usr/bin/clickhouse\r\n[ 14776 ] <Fatal> BaseDaemon: 10. ? @ 0x9b8465d in /usr/bin/clickhouse\r\n[ 14776 ] <Fatal> BaseDaemon: 11. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n[ 14776 ] <Fatal> BaseDaemon: 12. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n[ 14776 ] <Fatal> BaseDaemon: Calculated checksum of the binary: 8E1781B29E0174AC66B92E409A0E916E. There is no information about the reference checksum.\r\n```\r\n\r\n**Expected behavior**\r\n\r\nBoth queries works\r\n\n",
  "hints_text": "Better stack:\r\n\r\n```\r\nThread 73 \"QueryPipelineEx\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7fff53de9700 (LWP 3168369)]\r\ninline_memcpy (size=86175080, dst_=<optimized out>, src_=<optimized out>) at /home/jakalletti/ClickHouse/ClickHouse/base/glibc-compatibility/memcpy/memcpy.h:188\r\n188                     c0 = _mm_loadu_si128(reinterpret_cast<const __m128i*>(src) + 0);\r\n(gdb) where\r\n#0  inline_memcpy (size=86175080, dst_=<optimized out>, src_=<optimized out>) at /home/jakalletti/ClickHouse/ClickHouse/base/glibc-compatibility/memcpy/memcpy.h:188\r\n#1  memcpy(void * __restrict__, const void * __restrict__, size_t) (dst=0x7ffee4b64000, src=<optimized out>, size=<optimized out>) at /home/jakalletti/ClickHouse/ClickHouse/base/glibc-compatibility/memcpy/memcpy.cpp:5\r\n#2  0x0000000011ad1033 in DB::WindowTransform::updateAggregationState (this=this@entry=0x7ffeee2d9018) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:963\r\n#3  0x0000000011ad14be in DB::WindowTransform::appendChunk (this=0x7ffeee2d9018, chunk=...) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1164\r\n#4  0x0000000011ad5b7f in DB::WindowTransform::work (this=0x7ffeee2d9018) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1399\r\n#5  0x00000000119665db in DB::executeJob (processor=0x7ffeee2d9018) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:88\r\n#6  DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0::operator()() const (this=0x7fff60a6b1f0) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:105\r\n#7  std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&> (__f=...) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/type_traits:3676\r\n#8  std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) (__args=...)\r\n    at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/__functional_base:348\r\n#9  std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()>::operator()() (this=0x7fff60a6b1f0)\r\n    at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/functional:1608\r\n#10 std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()> >(std::__1::__function::__policy_storage const*)\r\n    (__buf=0x7fff60a6b1f0) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/functional:2089\r\n#11 0x0000000011964c11 in std::__1::__function::__policy_func<void ()>::operator()() const (this=0x7ffee4b64070) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/functional:2221\r\n#12 std::__1::function<void ()>::operator()() const (this=0x7ffee4b64070) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/functional:2560\r\n#13 DB::PipelineExecutor::executeStepImpl (this=this@entry=0x7ffeee2a78d8, thread_num=<optimized out>, thread_num@entry=0, num_threads=num_threads@entry=1, yield_flag=yield_flag@entry=0x0)\r\n    at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:599\r\n#14 0x000000001196374a in DB::PipelineExecutor::executeSingleThread (this=0x7ffeee2a78d8, thread_num=0, num_threads=1) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:487\r\n#15 DB::PipelineExecutor::executeImpl (this=0x7ffeee2a78d8, num_threads=1) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:826\r\n#16 0x00000000119631b9 in DB::PipelineExecutor::execute (this=0x7ffeee2a78d8, num_threads=1) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:407\r\n#17 0x000000001196e24a in DB::threadFunction (data=..., thread_group=..., num_threads=1) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:85\r\n#18 DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const (this=<optimized out>) at /home/jakalletti/ClickHouse/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:112\r\n#19 std::__1::__invoke_constexpr<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&> (__f=...) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/type_traits:3682\r\n#20 std::__1::__apply_tuple_impl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) (__f=..., __t=...) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/tuple:1415\r\n#21 std::__1::apply<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&) (__f=..., __t=...)\r\n    at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/tuple:1424\r\n#22 ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}::operator()() (\r\n    this=<optimized out>) at /home/jakalletti/ClickHouse/ClickHouse/src/Common/ThreadPool.h:188\r\n#23 std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}&>\r\n    (__f=...) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/type_traits:3676\r\n#24 std::__1::__invoke_void_return_wrapper<void>::__call<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}&>(ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}&) (__args=...) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/__functional_base:348\r\n#25 std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}, void ()>::operator()() (this=<optimized out>) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/functional:1608\r\n#26 std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}, void ()> >(std::__1::__function::__policy_storage const*) (__buf=<optimized out>)\r\n    at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/functional:2089\r\n#27 0x000000000990b98a in std::__1::__function::__policy_func<void ()>::operator()() const (this=0x7fff53de0a10) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/functional:2221\r\n#28 std::__1::function<void ()>::operator()() const (this=0x7fff53de0a10) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/functional:2560\r\n#29 ThreadPoolImpl<std::__1::thread>::worker (this=0x7ffff703e900, thread_it=...) at /home/jakalletti/ClickHouse/ClickHouse/src/Common/ThreadPool.cpp:274\r\n#30 0x000000000990dd6e in ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#2}::operator()() const (this=0x7ffff7097308)\r\n    at /home/jakalletti/ClickHouse/ClickHouse/src/Common/ThreadPool.cpp:139\r\n#31 std::__1::__invoke<ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#2}> (__f=...)\r\n    at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/type_traits:3676\r\n#32 std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#2}>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#2}>&, std::__1::__tuple_indices<>) (__t=...) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/thread:280\r\n#33 std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#2}> >(void*) (__vp=0x7ffff7097300) at /home/jakalletti/ClickHouse/ClickHouse/contrib/libcxx/include/thread:291\r\n#34 0x00007ffff7fa2609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#35 0x00007ffff7e9c293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\nIt reproduces even without PARTITION BY\r\n\r\n```\r\nSELECT max(id) OVER () AS aid\r\nFROM\r\n(\r\n    SELECT materialize(toLowCardinality('aaaa')) AS id\r\n    FROM numbers_mt(1000000)\r\n)\r\nFORMAT `Null`\r\n\r\n[] 2021.11.18 20:39:22.991678 [ 1148 ] <Fatal> BaseDaemon: ########################################\r\n[] 2021.11.18 20:39:22.991955 [ 1148 ] <Fatal> BaseDaemon: (version 21.12.1.8661 (official build), build id: DD11349CD1691DF51FCA67FBEA8047ECCFAC9775) (from thread 15719) (query_id: 51bc3214-e8ca-4655-b738-c6899522c4d7) Received signal Segmentation fault (11)\r\n[] 2021.11.18 20:39:22.992025 [ 1148 ] <Fatal> BaseDaemon: Address: 0x1 Access: read. Address not mapped to object.\r\n[] 2021.11.18 20:39:22.992082 [ 1148 ] <Fatal> BaseDaemon: Stack trace: 0x9b934f0 0x13359433 0x133598be 0x1335e97f 0x1319059b 0x1318c551 0x13192525 0x9bdb757 0x9bdf15d 0x7f379c9d7609 0x7f379c8d1293\r\n[] 2021.11.18 20:39:22.992166 [ 1148 ] <Fatal> BaseDaemon: 2. memcpy @ 0x9b934f0 in /usr/bin/clickhouse\r\n[] 2021.11.18 20:39:22.993446 [ 1148 ] <Fatal> BaseDaemon: 3. DB::WindowTransform::updateAggregationState() @ 0x13359433 in /usr/bin/clickhouse\r\n[] 2021.11.18 20:39:22.993583 [ 1148 ] <Fatal> BaseDaemon: 4. DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x133598be in /usr/bin/clickhouse\r\n[] 2021.11.18 20:39:22.993666 [ 1148 ] <Fatal> BaseDaemon: 5. DB::WindowTransform::work() @ 0x1335e97f in /usr/bin/clickhouse\r\n[] 2021.11.18 20:39:22.993717 [ 1148 ] <Fatal> BaseDaemon: 6. ? @ 0x1319059b in /usr/bin/clickhouse\r\n[] 2021.11.18 20:39:22.993780 [ 1148 ] <Fatal> BaseDaemon: 7. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1318c551 in /usr/bin/clickhouse\r\n[] 2021.11.18 20:39:22.993904 [ 1148 ] <Fatal> BaseDaemon: 8. ? @ 0x13192525 in /usr/bin/clickhouse\r\n[] 2021.11.18 20:39:22.993950 [ 1148 ] <Fatal> BaseDaemon: 9. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x9bdb757 in /usr/bin/clickhouse\r\n[] 2021.11.18 20:39:22.994001 [ 1148 ] <Fatal> BaseDaemon: 10. ? @ 0x9bdf15d in /usr/bin/clickhouse\r\n[] 2021.11.18 20:39:22.994063 [ 1148 ] <Fatal> BaseDaemon: 11. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n[] 2021.11.18 20:39:22.994123 [ 1148 ] <Fatal> BaseDaemon: 12. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n[] 2021.11.18 20:39:23.374933 [ 1148 ] <Fatal> BaseDaemon: Checksum of the binary: E7A07B6916581A75CFDF5EF8FCC72C05, integrity check passed.\r\nError on processing query: Code: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF) (version 21.12.1.8661 (official build))\r\n\r\n```\nEven if it not crash, it produces wrong result:\r\n\r\n```\r\nSELECT countIf(CAST(sym, 'String') = 'Red') OVER () AS res\r\nFROM\r\n(\r\n    SELECT CAST(CAST(number % 5, 'Enum8(\\'Red\\' = 0, \\'Blue\\' = 1, \\'Yellow\\' = 2, \\'Black\\' = 3, \\'White\\' = 4)'), 'LowCardinality(String)') AS sym\r\n    FROM numbers(10)\r\n)\r\n\r\nQuery id: fcde0e4b-efc0-4f09-9b86-20bb442b3a31\r\n\r\n\u250c\u2500res\u2500\u2510\r\n\u2502   2 \u2502\r\n\u2502   2 \u2502\r\n\u2502   2 \u2502\r\n\u2502   2 \u2502\r\n\u2502   2 \u2502\r\n\u2502   2 \u2502\r\n\u2502   2 \u2502\r\n\u2502   2 \u2502\r\n\u2502   2 \u2502\r\n\u2502   2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nSELECT countIf(sym = 'Red') OVER () AS res\r\nFROM\r\n(\r\n    SELECT CAST(CAST(number % 5, 'Enum8(\\'Red\\' = 0, \\'Blue\\' = 1, \\'Yellow\\' = 2, \\'Black\\' = 3, \\'White\\' = 4)'), 'LowCardinality(String)') AS sym\r\n    FROM numbers(10)\r\n)\r\n\r\nQuery id: 601cf0ba-5c7c-42db-a44a-ebafc181cb03\r\n\r\n\u250c\u2500res\u2500\u2510\r\n\u2502   5 \u2502\r\n\u2502   5 \u2502\r\n\u2502   5 \u2502\r\n\u2502   5 \u2502\r\n\u2502   5 \u2502\r\n\u2502   5 \u2502\r\n\u2502   5 \u2502\r\n\u2502   5 \u2502\r\n\u2502   5 \u2502\r\n\u2502   5 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\r\n```",
  "created_at": "2021-11-26T14:59:30Z"
}