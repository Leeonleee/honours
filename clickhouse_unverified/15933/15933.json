{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15933,
  "instance_id": "ClickHouse__ClickHouse-15933",
  "issue_numbers": [
    "15792"
  ],
  "base_commit": "f64344f7c565c6f92d295ee91f4b263d2c9e0f79",
  "patch": "diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex 2f0dee581416..d5ad79e76704 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -117,11 +117,14 @@ ExpressionAnalyzer::ExpressionAnalyzer(\n     const TreeRewriterResultPtr & syntax_analyzer_result_,\n     const Context & context_,\n     size_t subquery_depth_,\n-    bool do_global)\n+    bool do_global,\n+    SubqueriesForSets subqueries_for_sets_)\n     : query(query_), context(context_), settings(context.getSettings())\n     , subquery_depth(subquery_depth_)\n     , syntax(syntax_analyzer_result_)\n {\n+    subqueries_for_sets = std::move(subqueries_for_sets_);\n+\n     /// external_tables, subqueries_for_sets for global subqueries.\n     /// Replaces global subqueries with the generated names of temporary tables that will be sent to remote servers.\n     initGlobalSubqueriesAndExternalTables(do_global);\ndiff --git a/src/Interpreters/ExpressionAnalyzer.h b/src/Interpreters/ExpressionAnalyzer.h\nindex 0790c9f9bfb1..6389d8a142c8 100644\n--- a/src/Interpreters/ExpressionAnalyzer.h\n+++ b/src/Interpreters/ExpressionAnalyzer.h\n@@ -93,7 +93,7 @@ class ExpressionAnalyzer : protected ExpressionAnalyzerData, private boost::nonc\n         const ASTPtr & query_,\n         const TreeRewriterResultPtr & syntax_analyzer_result_,\n         const Context & context_)\n-    :   ExpressionAnalyzer(query_, syntax_analyzer_result_, context_, 0, false)\n+    :   ExpressionAnalyzer(query_, syntax_analyzer_result_, context_, 0, false, {})\n     {}\n \n     void appendExpression(ExpressionActionsChain & chain, const ASTPtr & expr, bool only_types);\n@@ -124,7 +124,8 @@ class ExpressionAnalyzer : protected ExpressionAnalyzerData, private boost::nonc\n         const TreeRewriterResultPtr & syntax_analyzer_result_,\n         const Context & context_,\n         size_t subquery_depth_,\n-        bool do_global_);\n+        bool do_global_,\n+        SubqueriesForSets subqueries_for_sets_);\n \n     ASTPtr query;\n     const Context & context;\n@@ -244,8 +245,9 @@ class SelectQueryExpressionAnalyzer : public ExpressionAnalyzer\n         const StorageMetadataPtr & metadata_snapshot_,\n         const NameSet & required_result_columns_ = {},\n         bool do_global_ = false,\n-        const SelectQueryOptions & options_ = {})\n-        : ExpressionAnalyzer(query_, syntax_analyzer_result_, context_, options_.subquery_depth, do_global_)\n+        const SelectQueryOptions & options_ = {},\n+        SubqueriesForSets subqueries_for_sets_ = {})\n+        : ExpressionAnalyzer(query_, syntax_analyzer_result_, context_, options_.subquery_depth, do_global_, std::move(subqueries_for_sets_))\n         , metadata_snapshot(metadata_snapshot_)\n         , required_result_columns(required_result_columns_)\n         , query_options(options_)\ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex 8422b4c98784..b1188ffed4f3 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -304,6 +304,8 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n     if (storage)\n         view = dynamic_cast<StorageView *>(storage.get());\n \n+    SubqueriesForSets subquery_for_sets;\n+\n     auto analyze = [&] (bool try_move_to_prewhere)\n     {\n         /// Allow push down and other optimizations for VIEW: replace with subquery and rewrite it.\n@@ -344,7 +346,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n         query_analyzer = std::make_unique<SelectQueryExpressionAnalyzer>(\n                 query_ptr, syntax_analyzer_result, *context, metadata_snapshot,\n                 NameSet(required_result_column_names.begin(), required_result_column_names.end()),\n-                !options.only_analyze, options);\n+                !options.only_analyze, options, std::move(subquery_for_sets));\n \n         if (!options.only_analyze)\n         {\n@@ -430,6 +432,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n \n     if (need_analyze_again)\n     {\n+        subquery_for_sets = std::move(query_analyzer->getSubqueriesForSets());\n         /// Do not try move conditions to PREWHERE for the second time.\n         /// Otherwise, we won't be able to fallback from inefficient PREWHERE to WHERE later.\n         analyze(/* try_move_to_prewhere = */ false);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01521_global_in_prewhere_15792.reference b/tests/queries/0_stateless/01521_global_in_prewhere_15792.reference\nnew file mode 100644\nindex 000000000000..f7393e847d34\n--- /dev/null\n+++ b/tests/queries/0_stateless/01521_global_in_prewhere_15792.reference\n@@ -0,0 +1,1 @@\n+100000\ndiff --git a/tests/queries/0_stateless/01521_global_in_prewhere_15792.sql b/tests/queries/0_stateless/01521_global_in_prewhere_15792.sql\nnew file mode 100644\nindex 000000000000..adb7bccd0dfd\n--- /dev/null\n+++ b/tests/queries/0_stateless/01521_global_in_prewhere_15792.sql\n@@ -0,0 +1,12 @@\n+drop table if exists xp;\n+drop table if exists xp_d;\n+\n+create table xp(A Date, B Int64, S String) Engine=MergeTree partition by toYYYYMM(A) order by B;\n+insert into xp select '2020-01-01', number , '' from numbers(100000);\n+\n+create table xp_d as xp Engine=Distributed(test_shard_localhost, currentDatabase(), xp);\n+\n+select count() from xp_d prewhere toYYYYMM(A) global in (select toYYYYMM(min(A)) from xp_d) where B > -1;\n+\n+drop table if exists xp;\n+drop table if exists xp_d;\n",
  "problem_statement": "Wrong result in case of GLOBAL IN and PREWHERE\n20.10.1.4853\r\n\r\n```sql\r\ndrop table if exists xp;\r\ndrop table if exists xp_d;\r\n\r\ncreate table xp(A Date, B Int64, S String) Engine=MergeTree partition by toYYYYMM(A) order by B;\r\ninsert into xp select '2020-01-01', number , '' from numbers(100000);\r\ninsert into xp select '2020-10-01', number , '' from numbers(100000);\r\ncreate table xp_d as xp Engine=Distributed(test_shard_localhost, currentDatabase(), xp);\r\n\r\nselect count() from xp_d prewhere toYYYYMM(A) global in (select toYYYYMM(min(A)) from xp_d) where B > -1;\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502       0 \u2502     <------ expected 100000\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n-- global in & both predicates in prewhere \r\nselect count() from xp_d prewhere toYYYYMM(A) global in (select toYYYYMM(min(A)) from xp_d) and B > -1;\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502  100000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n-- global in & both predicates in where \r\nselect count() from xp_d where toYYYYMM(A) global in (select toYYYYMM(min(A)) from xp_d) and B > -1;\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502  100000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n-- not global\r\nselect count() from xp_d prewhere toYYYYMM(A) in (select toYYYYMM(min(A)) from xp_d) where B > -1;\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502  100000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\n\r\nselect count() from xp_d prewhere toYYYYMM(A) global in (select 202001) where B > -1;\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502       0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nhmm, it worked in 19.13.7.57\n",
  "hints_text": "Regression, versions <= 19.17 work as expected. ",
  "created_at": "2020-10-13T15:23:29Z"
}