You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
`dotProduct` is not optimized for vector Similarity
## Background

Vector similarity is very popular right now, and ClickHouse has a few tutorials about this  [Source](https://clickhouse.com/blog/approximate-nearest-neighbour-ann-with-sql-powered-local-sensitive-hashing-lsh-random-projections). Regarding distances between vectors, they mention the most common ones:

- Euclidean distance
- Cosine distance

![Captura de pantalla 2023-12-20 a las 21 01 10](https://github.com/ClickHouse/ClickHouse/assets/31625296/2b361182-490c-417d-a232-fcbd275cce37)

But in my opinion dotProduct is a better replacement for cosineDistance because **is the same but faster**, let me explain...

## cosineDistance == dotProduct of L2 normalized vectors

`dotProduct` has a much cheaper computation than `cosineDistance`. But they produce different things.

![download](https://github.com/ClickHouse/ClickHouse/assets/31625296/4b046243-b4aa-4806-b64a-e86c9b65c217)

However, **the dotProduct of the L2-normalized vectors** is mathematically the same that cosineDistance, but computationally cheaper because only the norm of the query verctor is computed at search time. The following formula illustrate this:

![Captura de pantalla 2023-12-20 a las 21 30 29](https://github.com/ClickHouse/ClickHouse/assets/31625296/eff51b1e-1dca-4887-b458-bbf6c9eca552)

>  L2 normalization is dividing (element-wise) the vector by its L2Norm. This produces the unit vector (vector lenght = 1) pointing to the same direction of the original vector.

## Poor performance of `dotProduct` in clickhouse now

Both `cosineDistance` and `dotProduct` exist in clickhouse. `dotProduct` should be faster, but currently is (~16x) slower .

```sql
WITH cosineDistance(img_emb, <query_emb>) AS score
SELECT id, score, caption
FROM laion
ORDER BY score DESC
LIMIT 3
# 3 rows in set. Elapsed: 0.535 sec. Processed 1.00 million rows, 2.13 GB (1.87 million rows/s., 3.98 GB/s.) Peak memory usage: 164.25 MiB.

WITH dotProduct(img_emb, <query_emb>) AS score
SELECT id, score, caption
FROM laion
ORDER BY score DESC
LIMIT 3
# 3 rows in set. Elapsed: 8.385 sec. Processed 1.00 million rows, 2.13 GB (119.31 thousand rows/s., 254.04 MB/s.) Peak memory usage: 420.67 MiB.
```

## Possible solution

I know projects like [SimSIMD](https://github.com/ashvardanian/SimSIMD) could help with this optimization.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
