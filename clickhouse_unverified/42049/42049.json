{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42049,
  "instance_id": "ClickHouse__ClickHouse-42049",
  "issue_numbers": [
    "42038"
  ],
  "base_commit": "6d02fa3c5fd9ed7606d29c396bcea34da59a58e5",
  "patch": "diff --git a/src/IO/parseDateTimeBestEffort.cpp b/src/IO/parseDateTimeBestEffort.cpp\nindex cc0cf2576a63..1dd06401bf10 100644\n--- a/src/IO/parseDateTimeBestEffort.cpp\n+++ b/src/IO/parseDateTimeBestEffort.cpp\n@@ -116,6 +116,8 @@ ReturnType parseDateTimeBestEffortImpl(\n     bool is_am = false;\n     bool is_pm = false;\n \n+    bool has_comma_between_date_and_time = false;\n+\n     auto read_alpha_month = [&month] (const auto & alpha)\n     {\n         if (0 == strncasecmp(alpha, \"Jan\", 3)) month = 1;\n@@ -137,6 +139,15 @@ ReturnType parseDateTimeBestEffortImpl(\n \n     while (!in.eof())\n     {\n+        if ((year && !has_time) || (!year && has_time))\n+        {\n+            if (*in.position() == ',')\n+            {\n+                has_comma_between_date_and_time = true;\n+                ++in.position();\n+            }\n+        }\n+\n         char digits[std::numeric_limits<UInt64>::digits10];\n \n         size_t num_digits = 0;\n@@ -552,6 +563,10 @@ ReturnType parseDateTimeBestEffortImpl(\n         }\n     }\n \n+    //// Date like '2022/03/04, ' should parse fail?\n+    if (has_comma_between_date_and_time && (!has_time || !year || !month || !day_of_month))\n+        return on_error(\"Cannot read DateTime: unexpected word after Date\", ErrorCodes::CANNOT_PARSE_DATETIME);\n+\n     /// If neither Date nor Time is parsed successfully, it should fail\n     if (!year && !month && !day_of_month && !has_time)\n         return on_error(\"Cannot read DateTime: neither Date nor Time was parsed successfully\", ErrorCodes::CANNOT_PARSE_DATETIME);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02457_parse_date_time_best_effort.reference b/tests/queries/0_stateless/02457_parse_date_time_best_effort.reference\nnew file mode 100644\nindex 000000000000..6a560e7e43bc\n--- /dev/null\n+++ b/tests/queries/0_stateless/02457_parse_date_time_best_effort.reference\n@@ -0,0 +1,10 @@\n+2017-12-01 18:31:44\n+2017-01-12 18:31:44\n+2017-12-01 18:31:44\n+2017-01-12 18:31:44\n+2017-12-01 18:31:44\n+2017-01-12 18:31:44\n+2015-12-31 18:31:44\n+2015-12-31 18:31:44\n+2015-12-31 18:31:44\n+2015-12-31 18:31:44\ndiff --git a/tests/queries/0_stateless/02457_parse_date_time_best_effort.sql b/tests/queries/0_stateless/02457_parse_date_time_best_effort.sql\nnew file mode 100644\nindex 000000000000..5eb00049b6ff\n--- /dev/null\n+++ b/tests/queries/0_stateless/02457_parse_date_time_best_effort.sql\n@@ -0,0 +1,16 @@\n+select parseDateTimeBestEffort('01/12/2017, 18:31:44');\n+select parseDateTimeBestEffortUS('01/12/2017, 18:31:44');\n+select parseDateTimeBestEffort('01/12/2017,18:31:44');\n+select parseDateTimeBestEffortUS('01/12/2017,18:31:44');\n+select parseDateTimeBestEffort('01/12/2017 ,   18:31:44');\n+select parseDateTimeBestEffortUS('01/12/2017    ,18:31:44');\n+select parseDateTimeBestEffortUS('18:31:44, 31/12/2015');\n+select parseDateTimeBestEffortUS('18:31:44  , 31/12/2015');\n+select parseDateTimeBestEffort('18:31:44, 31/12/2015');\n+select parseDateTimeBestEffort('18:31:44  , 31/12/2015');\n+select parseDateTimeBestEffort('01/12/2017,'); -- { serverError CANNOT_PARSE_DATETIME }\n+select parseDateTimeBestEffortUS('18:31:44,,,, 31/12/2015'); -- { serverError CANNOT_PARSE_DATETIME }\n+select parseDateTimeBestEffortUS('18:31:44, 31/12/2015,'); -- { serverError CANNOT_PARSE_TEXT }\n+select parseDateTimeBestEffort('01/12/2017, 18:31:44,'); -- { serverError CANNOT_PARSE_TEXT }\n+select parseDateTimeBestEffort('01/12/2017, ,,,18:31:44'); -- { serverError CANNOT_PARSE_DATETIME }\n+select parseDateTimeBestEffort('18:31:44  ,,,,, 31/12/2015'); -- { serverError CANNOT_PARSE_DATETIME }\n",
  "problem_statement": "`parseDateTimeBestEffort` function does not for for `01/12/2017, 18:31:44` format\n`select parseDateTimeBestEffort('01/12/2017, 18:31:44')`\r\n\r\nIt is confused by a comma - should be easy to fix.\n",
  "hints_text": "",
  "created_at": "2022-10-04T09:53:44Z"
}