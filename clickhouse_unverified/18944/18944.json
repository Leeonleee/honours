{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18944,
  "instance_id": "ClickHouse__ClickHouse-18944",
  "issue_numbers": [
    "18878"
  ],
  "base_commit": "6022311a374092968bb3f1981fabc17dcbd402f4",
  "patch": "diff --git a/src/Storages/MutationCommands.cpp b/src/Storages/MutationCommands.cpp\nindex 2aa90a039bcc..8902707ab645 100644\n--- a/src/Storages/MutationCommands.cpp\n+++ b/src/Storages/MutationCommands.cpp\n@@ -1,5 +1,6 @@\n #include <Storages/MutationCommands.h>\n-#include <IO/Operators.h>\n+#include <IO/WriteHelpers.h>\n+#include <IO/ReadHelpers.h>\n #include <Parsers/formatAST.h>\n #include <Parsers/ExpressionListParsers.h>\n #include <Parsers/ParserAlterQuery.h>\n@@ -133,13 +134,13 @@ void MutationCommands::writeText(WriteBuffer & out) const\n {\n     WriteBufferFromOwnString commands_buf;\n     formatAST(*ast(), commands_buf, /* hilite = */ false, /* one_line = */ true);\n-    out << escape << commands_buf.str();\n+    writeEscapedString(commands_buf.str(), out);\n }\n \n void MutationCommands::readText(ReadBuffer & in)\n {\n     String commands_str;\n-    in >> escape >> commands_str;\n+    readEscapedString(commands_str, in);\n \n     ParserAlterCommandList p_alter_commands;\n     auto commands_ast = parseQuery(\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01648_mutations_and_escaping.reference b/tests/queries/0_stateless/01648_mutations_and_escaping.reference\nnew file mode 100644\nindex 000000000000..0d55bed3a35c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01648_mutations_and_escaping.reference\n@@ -0,0 +1,2 @@\n+foo\n+foo\ndiff --git a/tests/queries/0_stateless/01648_mutations_and_escaping.sql b/tests/queries/0_stateless/01648_mutations_and_escaping.sql\nnew file mode 100644\nindex 000000000000..689da842f163\n--- /dev/null\n+++ b/tests/queries/0_stateless/01648_mutations_and_escaping.sql\n@@ -0,0 +1,18 @@\n+DROP TABLE IF EXISTS mutations_and_escaping_1648;\n+\n+CREATE TABLE mutations_and_escaping_1648 (d Date, e Enum8('foo'=1, 'bar'=2)) Engine = MergeTree(d, (d), 8192);\n+INSERT INTO mutations_and_escaping_1648 (d, e) VALUES ('2018-01-01', 'foo');\n+INSERT INTO mutations_and_escaping_1648 (d, e) VALUES ('2018-01-02', 'bar');\n+\n+-- slow mutation\n+ALTER TABLE mutations_and_escaping_1648 UPDATE e = CAST('foo', 'Enum8(\\'foo\\' = 1, \\'bar\\' = 2)') WHERE d='2018-01-02' and sleepEachRow(1) = 0;\n+\n+-- check that we able to read mutation text after serialization\n+DETACH TABLE mutations_and_escaping_1648;\n+ATTACH TABLE mutations_and_escaping_1648;\n+\n+ALTER TABLE mutations_and_escaping_1648 UPDATE e = CAST('foo', 'Enum8(\\'foo\\' = 1, \\'bar\\' = 2)') WHERE d='2018-01-02' SETTINGS mutations_sync = 1;\n+\n+SELECT e FROM mutations_and_escaping_1648 ORDER BY d;\n+\n+DROP TABLE mutations_and_escaping_1648;\n",
  "problem_statement": "Server cannot parse mutation command list.\nhttps://clickhouse-test-reports.s3.yandex.net/18817/9049599e367bcccd809f45af138452f965b3303a/stress_test_(thread)/test_run.txt.out.log\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2021-01-11T14:45:38Z",
  "modified_files": [
    "src/Storages/MutationCommands.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01648_mutations_and_escaping.reference",
    "b/tests/queries/0_stateless/01648_mutations_and_escaping.sql"
  ]
}