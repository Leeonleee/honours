{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 54316,
  "instance_id": "ClickHouse__ClickHouse-54316",
  "issue_numbers": [
    "54295"
  ],
  "base_commit": "886a6e6e86f750c2d53d1f2dbdddf76b74061d86",
  "patch": "diff --git a/docs/en/sql-reference/functions/functions-for-nulls.md b/docs/en/sql-reference/functions/functions-for-nulls.md\nindex d57b799e94cc..bde2a8a9505f 100644\n--- a/docs/en/sql-reference/functions/functions-for-nulls.md\n+++ b/docs/en/sql-reference/functions/functions-for-nulls.md\n@@ -92,6 +92,50 @@ Result:\n \u2514\u2500\u2500\u2500\u2518\n ```\n \n+## isZeroOrNull\n+\n+Returns whether the argument is 0 (zero) or [NULL](../../sql-reference/syntax.md#null-literal).\n+\n+``` sql\n+isZeroOrNull(x)\n+```\n+\n+**Arguments:**\n+\n+- `x` \u2014 A value of non-compound data type.\n+\n+**Returned value**\n+\n+- `1` if `x` is 0 (zero) or `NULL`.\n+- `0` else.\n+\n+**Example**\n+\n+Table:\n+\n+``` text\n+\u250c\u2500x\u2500\u252c\u2500\u2500\u2500\u2500y\u2500\u2510\n+\u2502 1 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\n+\u2502 2 \u2502    0 \u2502\n+\u2502 3 \u2502    3 \u2502\n+\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT x FROM t_null WHERE isZeroOrNull(y);\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500x\u2500\u2510\n+\u2502 1 \u2502\n+\u2502 2 \u2502\n+\u2514\u2500\u2500\u2500\u2518\n+```\n+\n ## coalesce\n \n Returns the leftmost non-`NULL` argument.\ndiff --git a/src/Functions/isZeroOrNull.cpp b/src/Functions/isZeroOrNull.cpp\nindex bc0ac299a23b..119fb2f67fd8 100644\n--- a/src/Functions/isZeroOrNull.cpp\n+++ b/src/Functions/isZeroOrNull.cpp\n@@ -44,14 +44,18 @@ class FunctionIsZeroOrNull : public IFunction\n \n     DataTypePtr getReturnTypeImpl(const DataTypes & types) const override\n     {\n-        if (!isNumber(removeNullable(types.at(0))))\n-            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The argument of function {} must have simple numeric type, possibly Nullable\", name);\n+        if (!isNumber(removeNullable(types.at(0))) && !isNothing(removeNullable(types.at(0))))\n+            throw Exception(\n+                ErrorCodes::BAD_ARGUMENTS, \"The argument of function {} must have simple numeric type, possibly Nullable or Null\", name);\n \n         return std::make_shared<DataTypeUInt8>();\n     }\n \n     ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t input_rows_count) const override\n     {\n+        if (isNothing(removeNullable(arguments[0].type)))\n+            return DataTypeUInt8{}.createColumnConst(input_rows_count, 1);\n+\n         const ColumnPtr & input_column = arguments[0].column;\n \n         ColumnPtr res;\n@@ -72,7 +76,10 @@ class FunctionIsZeroOrNull : public IFunction\n                     return true;\n                 }))\n             {\n-                throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"The argument of function {} must have simple numeric type, possibly Nullable\", name);\n+                throw Exception(\n+                    ErrorCodes::ILLEGAL_COLUMN,\n+                    \"The argument of function {} must have simple numeric type, possibly Nullable or Null\",\n+                    name);\n             }\n         }\n         else\n@@ -89,7 +96,10 @@ class FunctionIsZeroOrNull : public IFunction\n                     return true;\n                 }))\n             {\n-                throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"The argument of function {} must have simple numeric type, possibly Nullable\", name);\n+                throw Exception(\n+                    ErrorCodes::ILLEGAL_COLUMN,\n+                    \"The argument of function {} must have simple numeric type, possibly Nullable or Null\",\n+                    name);\n             }\n         }\n \ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 2e45b885afd2..608365d087cd 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -1329,10 +1329,10 @@ ddl\n deallocation\n deallocations\n debian\n+decodeHTMLComponent\n decodeURLComponent\n decodeURLFormComponent\n decodeXMLComponent\n-decodeHTMLComponent\n decompressor\n decrypt\n decrypted\n@@ -1558,6 +1558,7 @@ gzipped\n hadoop\n halfMD\n halfday\n+hardlink\n hardlinks\n hasAll\n hasAny\n@@ -1637,6 +1638,7 @@ isNotNull\n isNull\n isValidJSON\n isValidUTF\n+isZeroOrNull\n iteratively\n jaccard\n javaHash\n@@ -2582,4 +2584,3 @@ znode\n znodes\n zookeeperSessionUptime\n zstd\n-hardlink\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01373_is_zero_or_null.reference b/tests/queries/0_stateless/01373_is_zero_or_null.reference\nindex d9caaa2089ad..baf51073fd47 100644\n--- a/tests/queries/0_stateless/01373_is_zero_or_null.reference\n+++ b/tests/queries/0_stateless/01373_is_zero_or_null.reference\n@@ -20,3 +20,5 @@ world\n 3\n ---\n 4\n+---\n+1\ndiff --git a/tests/queries/0_stateless/01373_is_zero_or_null.sql b/tests/queries/0_stateless/01373_is_zero_or_null.sql\nindex 32458dc9f62f..dcb4f9649f94 100644\n--- a/tests/queries/0_stateless/01373_is_zero_or_null.sql\n+++ b/tests/queries/0_stateless/01373_is_zero_or_null.sql\n@@ -27,3 +27,7 @@ SELECT count() FROM\n     UNION ALL\n     SELECT * FROM test WHERE isZeroOrNull(x != 'xyz')\n );\n+\n+SELECT '---';\n+\n+select isZeroOrNull(Null);\n",
  "problem_statement": "isZeroOrNull(null) throws an exception\nclickhouse version 23.8\r\n\r\nAccording to the annotations in `src/Functions/isZeroOrNull.cpp`, `isZeroOrNull` will return 1 if argument is zero or NULL. But, a simple query like `SELECT isZeroOrNull(NULL)` will throw an exception:\r\n\r\n`Code: 36. DB::Exception: Received from localhost:9000. DB::Exception: The argument of function isZeroOrNull must have simple numeric type, possibly Nullable: While processing isZeroOrNull(NULL). (BAD_ARGUMENTS)`\r\n\r\nIs this the expected behavior? It will correctly return 1 if the query is `SELECT isZeroOrNull(0)` or `SELECT isZeroOrNull(1=2)`.\n",
  "hints_text": "No, I don't think it's expected. The problem is that `NULL` literal has special type `Nullable(Nothing)`, and it's not handled here: https://github.com/ClickHouse/ClickHouse/blob/42b0d444da24347befe7038b0f1c95a5507e5966/src/Functions/isZeroOrNull.cpp#L45-L51",
  "created_at": "2023-09-05T13:54:45Z"
}