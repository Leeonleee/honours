diff --git a/src/Common/tests/gtest_base32.cpp b/src/Common/tests/gtest_base32.cpp
new file mode 100644
index 000000000000..ff985c662e71
--- /dev/null
+++ b/src/Common/tests/gtest_base32.cpp
@@ -0,0 +1,212 @@
+#include <Common/Base32.h>
+
+#include <string_view>
+
+#include <gtest/gtest.h>
+
+using namespace std::string_view_literals;
+
+namespace DB
+{
+
+static std::string to_hex(const UInt8 * data, size_t length)
+{
+    static constexpr char hex_chars[] = "0123456789ABCDEF";
+    std::string result;
+    result.reserve(length * 2);
+
+    for (size_t i = 0; i < length; ++i)
+    {
+        result += hex_chars[(data[i] >> 4) & 0x0F];
+        result += hex_chars[data[i] & 0x0F];
+    }
+
+    return result;
+}
+
+struct EncodeDecodeData
+{
+    int id;
+    std::string_view input;
+    std::string_view expected;
+};
+
+struct InvalidData
+{
+    int id;
+    std::string_view input;
+};
+
+template <typename TestData, typename Coder>
+struct CoderTestConfiguration
+{
+    using test_data_t = TestData;
+    using coder_t = Coder;
+};
+
+struct Base32Rfc4648TestData
+{
+    constexpr static bool allow_lowercase_encoded = true;
+
+    // clang-format off
+    constexpr static EncodeDecodeData encode_tests[] = {
+        {100, ""sv, ""sv},
+        {101, "f"sv, "MY======"sv},
+        {102, "fo"sv, "MZXQ===="sv},
+        {103, "foo"sv, "MZXW6==="sv},
+        {104, "foob"sv, "MZXW6YQ="sv},
+        {105, "fooba"sv, "MZXW6YTB"sv},
+        {106, "foobar"sv, "MZXW6YTBOI======"sv},
+        
+        {200, "\x00"sv, "AA======"sv},
+        {201, "\x00\x00"sv, "AAAA===="sv},
+        {202, "\x00\x00\x00"sv, "AAAAA==="sv},
+        {203, "\x00\x00\x00\x00"sv, "AAAAAAA="sv},
+        {204, "\x00\x00\x00\x00\x00"sv, "AAAAAAAA"sv},
+
+        {300, "\xFF"sv, "74======"sv},
+        {301, "\xFF\xFF"sv, "777Q===="sv},
+        {302, "\xFF\xFF\xFF"sv, "77776==="sv},
+        {303, "\xFF\xFF\xFF\xFF"sv, "777777Y="sv},
+        {304, "\xFF\xFF\xFF\xFF\xFF"sv, "77777777"sv},
+        
+        {400, "\x01\x23\x45\x67\x89"sv, "AERUKZ4J"sv},
+        {401, "\xAB\xCD\xEF\x01\x23"sv, "VPG66AJD"sv},
+        
+        {400, "1234567890"sv, "GEZDGNBVGY3TQOJQ"sv},
+        {401, "The quick brown fox jumps over the lazy dog"sv, 
+        "KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO==="sv},
+        
+        {500, "a"sv, "ME======"sv},          // 1 byte → 8 chars (2+6 padding)
+        {501, "ab"sv, "MFRA===="sv},         // 2 bytes → 8 chars (4+4 padding)
+        {502, "abc"sv, "MFRGG==="sv},        // 3 bytes → 8 chars (5+3 padding)
+        {503, "abcd"sv, "MFRGGZA="sv},       // 4 bytes → 8 chars (7+1 padding)
+        {504, "abcde"sv, "MFRGGZDF"sv},      // 5 bytes → 8 chars (no padding)
+        {505, "abcdef"sv, "MFRGGZDFMY======"sv}, // 6 bytes → 16 chars (4+12 padding)
+    };
+    constexpr static InvalidData bad_decode_tests[] = {
+        {100, "========"sv}, // Invalid padding
+        {101, "MZXW6YT!"sv}, // Invalid character
+        {102, "MZXW6Y=B"sv}, // Padding in wrong place
+        {103, "MZXW6Y=!"sv}, // Invalid character and padding
+        {104, "MZXW6Y==="sv}, // Invalid padding length
+        {105, "MZXW6YQ=Q"sv}, // Extra character after padding
+        {106, "MZXW6YQ======"sv}, // Too much padding
+        {107, "12345678"sv}, // Characters not in Base32 alphabet
+        {108, "MZXW6YQ"sv}, // Missing padding
+        {109, "MZXW6YQ=="sv}, // Incorrect padding length
+        {110, "MZXW6YQ==="sv}, // Excessive padding
+        {111, "MZXW6YQ===="sv}, // Invalid padding sequence
+        {112, "MZXW6YQ====="sv}, // Too much padding
+        {113, "MZXW6YQ======"sv}, // Excessive padding
+        {114, "MZXW6YQ======="sv}, // Invalid padding length
+        {115, "MZXW6YQ====!=="sv}, // Invalid character in padding
+        {116, "MZXW6YQ====A=="sv}, // Extra character in padding
+        {117, "MZXW6YQ======"sv}, // Invalid padding with valid length
+        {118, "MZXW6Y=="sv}, // Invalid padding length
+    };
+    // clang-format on
+};
+
+template <typename T>
+struct BaseCoderTest : public ::testing::Test
+{
+    using test_data_t = typename T::test_data_t;
+    using coder_t = typename T::coder_t;
+};
+
+using TestedTypes = ::testing::Types<CoderTestConfiguration<Base32Rfc4648TestData, Base32<Base32Rfc4648, Base32NaiveTag>>>;
+TYPED_TEST_SUITE(BaseCoderTest, TestedTypes);
+
+TYPED_TEST(BaseCoderTest, Null)
+{
+    using coder_t = typename TypeParam::coder_t;
+    UInt8 output[64] = {0};
+    {
+        size_t const result = coder_t::encodeBase32(nullptr, 0, output);
+        EXPECT_EQ(result, 0) << " for empty input encode";
+    }
+    {
+        auto const result = coder_t::decodeBase32(nullptr, 0, output);
+        ASSERT_TRUE(result.has_value()) << " for empty input decode";
+        EXPECT_EQ(result.value(), 0) << " for empty input decode";
+    }
+}
+
+TYPED_TEST(BaseCoderTest, EncodeDecode)
+{
+    using test_data_t = typename TypeParam::test_data_t;
+    using coder_t = typename TypeParam::coder_t;
+    for (const auto & test : test_data_t::encode_tests)
+    {
+        size_t const input_len = test.input.size();
+        size_t const expected_output_len = ((input_len + 4) / 5) * 8;
+        UInt8 encode_output[128] = {0};
+
+        size_t const encoded_result_len
+            = coder_t::encodeBase32(reinterpret_cast<const UInt8 *>(test.input.data()), input_len, encode_output);
+
+        ASSERT_EQ(expected_output_len, encoded_result_len) << " for id=" << test.id;
+        auto const encode_output_sv = std::string_view(reinterpret_cast<const char *>(encode_output), encoded_result_len);
+        EXPECT_EQ(test.expected, encode_output_sv) << " for id=" << test.id;
+
+        auto decode = [&](std::string_view what)
+        {
+            UInt8 decode_output[128] = {0};
+            auto const decode_result = coder_t::decodeBase32(reinterpret_cast<const UInt8 *>(what.data()), what.size(), decode_output);
+            ASSERT_TRUE(decode_result.has_value()) << " for id=" << test.id;
+            EXPECT_EQ(input_len, decode_result.value()) << " for id=" << test.id;
+            auto const decode_output_sv = std::string_view(reinterpret_cast<const char *>(decode_output), decode_result.value());
+            EXPECT_EQ(test.input, decode_output_sv) << " for id=" << test.id;
+        };
+        // And now decode it back
+        decode(encode_output_sv);
+        if constexpr (test_data_t::allow_lowercase_encoded)
+        {
+            std::string lower_case(encode_output_sv);
+            std::transform(lower_case.begin(), lower_case.end(), lower_case.begin(), ::tolower);
+            decode(lower_case);
+        }
+    }
+}
+
+TYPED_TEST(BaseCoderTest, DecodeInvalid)
+{
+    using test_data_t = typename TypeParam::test_data_t;
+    using coder_t = typename TypeParam::coder_t;
+    for (const auto & test : test_data_t::bad_decode_tests)
+    {
+        size_t const input_len = test.input.size();
+        UInt8 output[128] = {0};
+
+        auto const result = coder_t::decodeBase32(reinterpret_cast<const UInt8 *>(test.input.data()), input_len, output);
+
+        ASSERT_FALSE(result.has_value()) << " for id=" << test.id;
+    }
+}
+
+TYPED_TEST(BaseCoderTest, LargeTest)
+{
+    using coder_t = typename TypeParam::coder_t;
+    size_t const large_size = 1234;
+    std::vector<UInt8> large_input(large_size);
+    for (size_t i = 0; i < large_size; ++i)
+    {
+        large_input[i] = static_cast<UInt8>(i % 256);
+    }
+
+    size_t const encoded_len = ((large_size + 4) / 5) * 8;
+    std::vector<UInt8> encoded(encoded_len + 1);
+    auto const actual_encoded_len = coder_t::encodeBase32(large_input.data(), large_size, encoded.data());
+    ASSERT_EQ(encoded_len, actual_encoded_len) << " for input (as hex) " << to_hex(large_input.data(), large_size);
+
+    std::vector<UInt8> decoded(large_size);
+    auto const decode_result = coder_t::decodeBase32(encoded.data(), encoded_len, decoded.data());
+
+    ASSERT_TRUE(decode_result.has_value()) << " for input (as hex) " << to_hex(large_input.data(), large_size);
+    ASSERT_EQ(large_size, decode_result.value()) << " for input (as hex) " << to_hex(large_input.data(), large_size);
+    EXPECT_EQ(0, memcmp(large_input.data(), decoded.data(), large_size))
+        << " for input (as hex) " << to_hex(large_input.data(), large_size);
+}
+
+}
diff --git a/tests/fuzz/all.dict b/tests/fuzz/all.dict
index 28774fd8f091..492b2089ad97 100644
--- a/tests/fuzz/all.dict
+++ b/tests/fuzz/all.dict
@@ -1349,6 +1349,8 @@
 "avgWeightedState"
 "bagexpansion"
 "bar"
+"base32Decode"
+"base32Encode"
 "base58Decode"
 "base58Encode"
 "base64Decode"
@@ -4700,6 +4702,7 @@
 "trimRight"
 "trunc"
 "truncate"
+"tryBase32Decode"
 "tryBase58Decode"
 "tryBase64Decode"
 "tryBase64URLDecode"
diff --git a/tests/fuzz/dictionaries/functions.dict b/tests/fuzz/dictionaries/functions.dict
index ddc2db582e77..ef4afec44ea6 100644
--- a/tests/fuzz/dictionaries/functions.dict
+++ b/tests/fuzz/dictionaries/functions.dict
@@ -661,6 +661,8 @@
 "avgWeightedSimpleState"
 "avgWeightedState"
 "bar"
+"base32Decode"
+"base32Encode"
 "base58Decode"
 "base58Encode"
 "base64Decode"
@@ -4009,6 +4011,7 @@
 "trimRight"
 "trunc"
 "truncate"
+"tryBase32Decode"
 "tryBase58Decode"
 "tryBase64Decode"
 "tryBase64URLDecode"
diff --git a/tests/queries/0_stateless/02337_base58.sql b/tests/queries/0_stateless/02337_base58.sql
index 554492e8254b..d14dd91387be 100644
--- a/tests/queries/0_stateless/02337_base58.sql
+++ b/tests/queries/0_stateless/02337_base58.sql
@@ -3,7 +3,7 @@
 SELECT base58Encode('Hold my beer...');
 
 SELECT base58Encode('Hold my beer...', 'Second arg'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
-SELECT base58Decode('Hold my beer...'); -- { serverError BAD_ARGUMENTS }
+SELECT base58Decode('Hold my beer...'); -- { serverError INCORRECT_DATA }
 
 SELECT base58Decode(encoded) FROM (SELECT base58Encode(val) as encoded FROM (SELECT arrayJoin(['', 'f', 'fo', 'foo', 'foob', 'fooba', 'foobar', 'Hello world!']) val));
 SELECT tryBase58Decode(encoded) FROM (SELECT base58Encode(val) as encoded FROM (SELECT arrayJoin(['', 'f', 'fo', 'foo', 'foob', 'fooba', 'foobar', 'Hello world!']) val));
diff --git a/tests/queries/0_stateless/02415_all_new_functions_must_have_version_information.reference b/tests/queries/0_stateless/02415_all_new_functions_must_have_version_information.reference
index 4c31698becb0..42e1e768b804 100644
--- a/tests/queries/0_stateless/02415_all_new_functions_must_have_version_information.reference
+++ b/tests/queries/0_stateless/02415_all_new_functions_must_have_version_information.reference
@@ -185,6 +185,8 @@ atan
 atan2
 atanh
 bar
+base32Decode
+base32Encode
 base58Decode
 base58Encode
 basename
@@ -1092,6 +1094,7 @@ trimBoth
 trimLeft
 trimRight
 trunc
+tryBase32Decode
 tryBase58Decode
 tumble
 tumbleEnd
diff --git a/tests/queries/0_stateless/03447_base32_encode_decode.reference b/tests/queries/0_stateless/03447_base32_encode_decode.reference
new file mode 100644
index 000000000000..0f9875a4634a
--- /dev/null
+++ b/tests/queries/0_stateless/03447_base32_encode_decode.reference
@@ -0,0 +1,312 @@
+KRUGS4ZANFZSAYJAORSXG5BAON2HE2LOM4======
+Part 1 - Encoding
+100					1
+101	f	66	MY======	MY======	1
+102	fo	666F	MZXQ====	MZXQ====	1
+103	foo	666F6F	MZXW6===	MZXW6===	1
+104	foob	666F6F62	MZXW6YQ=	MZXW6YQ=	1
+105	fooba	666F6F6261	MZXW6YTB	MZXW6YTB	1
+106	foobar	666F6F626172	MZXW6YTBOI======	MZXW6YTBOI======	1
+200	\0	00	AA======	AA======	1
+201	\0\0	0000	AAAA====	AAAA====	1
+202	\0\0\0	000000	AAAAA===	AAAAA===	1
+203	\0\0\0\0	00000000	AAAAAAA=	AAAAAAA=	1
+204	\0\0\0\0\0	0000000000	AAAAAAAA	AAAAAAAA	1
+300	�	FF	74======	74======	1
+301	��	FFFF	777Q====	777Q====	1
+302	���	FFFFFF	77776===	77776===	1
+303	����	FFFFFFFF	777777Y=	777777Y=	1
+304	�����	FFFFFFFFFF	77777777	77777777	1
+400	#Eg�	0123456789	AERUKZ4J	AERUKZ4J	1
+401	���#	ABCDEF0123	VPG66AJD	VPG66AJD	1
+402	1234567890	31323334353637383930	GEZDGNBVGY3TQOJQ	GEZDGNBVGY3TQOJQ	1
+403	The quick brown fox jumps over the lazy dog	54686520717569636B2062726F776E20666F78206A756D7073206F76657220746865206C617A7920646F67	KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO===	KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO===	1
+500	a	61	ME======	ME======	1
+501	ab	6162	MFRA====	MFRA====	1
+502	abc	616263	MFRGG===	MFRGG===	1
+503	abcd	61626364	MFRGGZA=	MFRGGZA=	1
+504	abcde	6162636465	MFRGGZDF	MFRGGZDF	1
+505	abcdef	616263646566	MFRGGZDFMY======	MFRGGZDFMY======	1
+506	foo	666F6F	MZXW6===	MZXW6===	1
+507	foobar	666F6F626172	MZXW6YTBOI======	MZXW6YTBOI======	1
+508	Hello world!	48656C6C6F20776F726C6421	JBSWY3DPEB3W64TMMQQQ====	JBSWY3DPEB3W64TMMQQQ====	1
+509	Hold my beer	486F6C64206D792062656572	JBXWYZBANV4SAYTFMVZA====	JBXWYZBANV4SAYTFMVZA====	1
+510	Hold another beer	486F6C6420616E6F746865722062656572	JBXWYZBAMFXG65DIMVZCAYTFMVZA====	JBXWYZBAMFXG65DIMVZCAYTFMVZA====	1
+511	And a wine	416E6420612077696E65	IFXGIIDBEB3WS3TF	IFXGIIDBEB3WS3TF	1
+512	And another wine	416E6420616E6F746865722077696E65	IFXGIIDBNZXXI2DFOIQHO2LOMU======	IFXGIIDBNZXXI2DFOIQHO2LOMU======	1
+513	And a lemonade	416E642061206C656D6F6E616465	IFXGIIDBEBWGK3LPNZQWIZI=	IFXGIIDBEBWGK3LPNZQWIZI=	1
+514	t1Zv2yaZ	74315A763279615A	OQYVU5RSPFQVU===	OQYVU5RSPFQVU===	1
+515	And another wine	416E6420616E6F746865722077696E65	IFXGIIDBNZXXI2DFOIQHO2LOMU======	IFXGIIDBNZXXI2DFOIQHO2LOMU======	1
+Part 2a - Decoding
+100					1
+101	MY======	f	66	66	1
+102	MZXQ====	fo	666F	666F	1
+103	MZXW6===	foo	666F6F	666F6F	1
+104	MZXW6YQ=	foob	666F6F62	666F6F62	1
+105	MZXW6YTB	fooba	666F6F6261	666F6F6261	1
+106	MZXW6YTBOI======	foobar	666F6F626172	666F6F626172	1
+200	AA======	\0	00	00	1
+201	AAAA====	\0\0	0000	0000	1
+202	AAAAA===	\0\0\0	000000	000000	1
+203	AAAAAAA=	\0\0\0\0	00000000	00000000	1
+204	AAAAAAAA	\0\0\0\0\0	0000000000	0000000000	1
+300	74======	�	FF	FF	1
+301	777Q====	��	FFFF	FFFF	1
+302	77776===	���	FFFFFF	FFFFFF	1
+303	777777Y=	����	FFFFFFFF	FFFFFFFF	1
+304	77777777	�����	FFFFFFFFFF	FFFFFFFFFF	1
+400	AERUKZ4J	#Eg�	0123456789	0123456789	1
+401	VPG66AJD	���#	ABCDEF0123	ABCDEF0123	1
+402	GEZDGNBVGY3TQOJQ	1234567890	31323334353637383930	31323334353637383930	1
+403	KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO===	The quick brown fox jumps over the lazy dog	54686520717569636B2062726F776E20666F78206A756D7073206F76657220746865206C617A7920646F67	54686520717569636B2062726F776E20666F78206A756D7073206F76657220746865206C617A7920646F67	1
+500	ME======	a	61	61	1
+501	MFRA====	ab	6162	6162	1
+502	MFRGG===	abc	616263	616263	1
+503	MFRGGZA=	abcd	61626364	61626364	1
+504	MFRGGZDF	abcde	6162636465	6162636465	1
+505	MFRGGZDFMY======	abcdef	616263646566	616263646566	1
+506	MZXW6===	foo	666F6F	666F6F	1
+507	MZXW6YTBOI======	foobar	666F6F626172	666F6F626172	1
+508	JBSWY3DPEB3W64TMMQQQ====	Hello world!	48656C6C6F20776F726C6421	48656C6C6F20776F726C6421	1
+509	JBXWYZBANV4SAYTFMVZA====	Hold my beer	486F6C64206D792062656572	486F6C64206D792062656572	1
+510	JBXWYZBAMFXG65DIMVZCAYTFMVZA====	Hold another beer	486F6C6420616E6F746865722062656572	486F6C6420616E6F746865722062656572	1
+511	IFXGIIDBEB3WS3TF	And a wine	416E6420612077696E65	416E6420612077696E65	1
+512	IFXGIIDBNZXXI2DFOIQHO2LOMU======	And another wine	416E6420616E6F746865722077696E65	416E6420616E6F746865722077696E65	1
+513	IFXGIIDBEBWGK3LPNZQWIZI=	And a lemonade	416E642061206C656D6F6E616465	416E642061206C656D6F6E616465	1
+514	OQYVU5RSPFQVU===	t1Zv2yaZ	74315A763279615A	74315A763279615A	1
+515	IFXGIIDBNZXXI2DFOIQHO2LOMU======	And another wine	416E6420616E6F746865722077696E65	416E6420616E6F746865722077696E65	1
+Part 2b - Decoding lowercase
+100					1
+101	my======	f	66	66	1
+102	mzxq====	fo	666F	666F	1
+103	mzxw6===	foo	666F6F	666F6F	1
+104	mzxw6yq=	foob	666F6F62	666F6F62	1
+105	mzxw6ytb	fooba	666F6F6261	666F6F6261	1
+106	mzxw6ytboi======	foobar	666F6F626172	666F6F626172	1
+200	aa======	\0	00	00	1
+201	aaaa====	\0\0	0000	0000	1
+202	aaaaa===	\0\0\0	000000	000000	1
+203	aaaaaaa=	\0\0\0\0	00000000	00000000	1
+204	aaaaaaaa	\0\0\0\0\0	0000000000	0000000000	1
+300	74======	�	FF	FF	1
+301	777q====	��	FFFF	FFFF	1
+302	77776===	���	FFFFFF	FFFFFF	1
+303	777777y=	����	FFFFFFFF	FFFFFFFF	1
+304	77777777	�����	FFFFFFFFFF	FFFFFFFFFF	1
+400	aerukz4j	#Eg�	0123456789	0123456789	1
+401	vpg66ajd	���#	ABCDEF0123	ABCDEF0123	1
+402	gezdgnbvgy3tqojq	1234567890	31323334353637383930	31323334353637383930	1
+403	krugkidrovuwg2zamjzg653oebtg66banj2w24dtebxxmzlseb2gqzjanrqxu6jamrxwo===	The quick brown fox jumps over the lazy dog	54686520717569636B2062726F776E20666F78206A756D7073206F76657220746865206C617A7920646F67	54686520717569636B2062726F776E20666F78206A756D7073206F76657220746865206C617A7920646F67	1
+500	me======	a	61	61	1
+501	mfra====	ab	6162	6162	1
+502	mfrgg===	abc	616263	616263	1
+503	mfrggza=	abcd	61626364	61626364	1
+504	mfrggzdf	abcde	6162636465	6162636465	1
+505	mfrggzdfmy======	abcdef	616263646566	616263646566	1
+506	mzxw6===	foo	666F6F	666F6F	1
+507	mzxw6ytboi======	foobar	666F6F626172	666F6F626172	1
+508	jbswy3dpeb3w64tmmqqq====	Hello world!	48656C6C6F20776F726C6421	48656C6C6F20776F726C6421	1
+509	jbxwyzbanv4saytfmvza====	Hold my beer	486F6C64206D792062656572	486F6C64206D792062656572	1
+510	jbxwyzbamfxg65dimvzcaytfmvza====	Hold another beer	486F6C6420616E6F746865722062656572	486F6C6420616E6F746865722062656572	1
+511	ifxgiidbeb3ws3tf	And a wine	416E6420612077696E65	416E6420612077696E65	1
+512	ifxgiidbnzxxi2dfoiqho2lomu======	And another wine	416E6420616E6F746865722077696E65	416E6420616E6F746865722077696E65	1
+513	ifxgiidbebwgk3lpnzqwizi=	And a lemonade	416E642061206C656D6F6E616465	416E642061206C656D6F6E616465	1
+514	oqyvu5rspfqvu===	t1Zv2yaZ	74315A763279615A	74315A763279615A	1
+515	ifxgiidbnzxxi2dfoiqho2lomu======	And another wine	416E6420616E6F746865722077696E65	416E6420616E6F746865722077696E65	1
+Part 3 - Roundtrip
+100				1
+101	f	66	f	1
+102	fo	666F	fo	1
+103	foo	666F6F	foo	1
+104	foob	666F6F62	foob	1
+105	fooba	666F6F6261	fooba	1
+106	foobar	666F6F626172	foobar	1
+200	\0	00	\0	1
+201	\0\0	0000	\0\0	1
+202	\0\0\0	000000	\0\0\0	1
+203	\0\0\0\0	00000000	\0\0\0\0	1
+204	\0\0\0\0\0	0000000000	\0\0\0\0\0	1
+300	�	FF	�	1
+301	��	FFFF	��	1
+302	���	FFFFFF	���	1
+303	����	FFFFFFFF	����	1
+304	�����	FFFFFFFFFF	�����	1
+400	#Eg�	0123456789	#Eg�	1
+401	���#	ABCDEF0123	���#	1
+402	1234567890	31323334353637383930	1234567890	1
+403	The quick brown fox jumps over the lazy dog	54686520717569636B2062726F776E20666F78206A756D7073206F76657220746865206C617A7920646F67	The quick brown fox jumps over the lazy dog	1
+500	a	61	a	1
+501	ab	6162	ab	1
+502	abc	616263	abc	1
+503	abcd	61626364	abcd	1
+504	abcde	6162636465	abcde	1
+505	abcdef	616263646566	abcdef	1
+506	foo	666F6F	foo	1
+507	foobar	666F6F626172	foobar	1
+508	Hello world!	48656C6C6F20776F726C6421	Hello world!	1
+509	Hold my beer	486F6C64206D792062656572	Hold my beer	1
+510	Hold another beer	486F6C6420616E6F746865722062656572	Hold another beer	1
+511	And a wine	416E6420612077696E65	And a wine	1
+512	And another wine	416E6420616E6F746865722077696E65	And another wine	1
+513	And a lemonade	416E642061206C656D6F6E616465	And a lemonade	1
+514	t1Zv2yaZ	74315A763279615A	t1Zv2yaZ	1
+515	And another wine	416E6420616E6F746865722077696E65	And another wine	1
+Part 4 - Invalid input
+Part 5 - tryBase32Decode
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Part 6 - FixedString encoding + decoding
+				1
+f	66	MY======	66	1
+fo	666F	MZXQ====	666F	1
+foo	666F6F	MZXW6===	666F6F	1
+foob	666F6F62	MZXW6YQ=	666F6F62	1
+fooba	666F6F6261	MZXW6YTB	666F6F6261	1
+foobar	666F6F626172	MZXW6YTBOI======	666F6F626172	1
+				1
+				1
+				1
+				1
+				1
+�	FF	74======	FF	1
+��	FFFF	777Q====	FFFF	1
+���	FFFFFF	77776===	FFFFFF	1
+����	FFFFFFFF	777777Y=	FFFFFFFF	1
+�����	FFFFFFFFFF	77777777	FFFFFFFFFF	1
+#Eg�	0123456789	AERUKZ4J	0123456789	1
+���#	ABCDEF0123	VPG66AJD	ABCDEF0123	1
+1234567890	31323334353637383930	GEZDGNBVGY3TQOJQ	31323334353637383930	1
+The quick brown fox jumps over the lazy dog	54686520717569636B2062726F776E20666F78206A756D7073206F76657220746865206C617A7920646F67	KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO===	54686520717569636B2062726F776E20666F78206A756D7073206F76657220746865206C617A7920646F67	1
+a	61	ME======	61	1
+ab	6162	MFRA====	6162	1
+abc	616263	MFRGG===	616263	1
+abcd	61626364	MFRGGZA=	61626364	1
+abcde	6162636465	MFRGGZDF	6162636465	1
+abcdef	616263646566	MFRGGZDFMY======	616263646566	1
+foo	666F6F	MZXW6===	666F6F	1
+foobar	666F6F626172	MZXW6YTBOI======	666F6F626172	1
+Hello world!	48656C6C6F20776F726C6421	JBSWY3DPEB3W64TMMQQQ====	48656C6C6F20776F726C6421	1
+Hold my beer	486F6C64206D792062656572	JBXWYZBANV4SAYTFMVZA====	486F6C64206D792062656572	1
+Hold another beer	486F6C6420616E6F746865722062656572	JBXWYZBAMFXG65DIMVZCAYTFMVZA====	486F6C6420616E6F746865722062656572	1
+And a wine	416E6420612077696E65	IFXGIIDBEB3WS3TF	416E6420612077696E65	1
+And another wine	416E6420616E6F746865722077696E65	IFXGIIDBNZXXI2DFOIQHO2LOMU======	416E6420616E6F746865722077696E65	1
+And a lemonade	416E642061206C656D6F6E616465	IFXGIIDBEBWGK3LPNZQWIZI=	416E642061206C656D6F6E616465	1
+t1Zv2yaZ	74315A763279615A	OQYVU5RSPFQVU===	74315A763279615A	1
+And another wine	416E6420616E6F746865722077696E65	IFXGIIDBNZXXI2DFOIQHO2LOMU======	416E6420616E6F746865722077696E65	1
+Part 6 - FixedString decoding + encoding
+AAAAA===	\0\0\0	000000	AAAAA===	1
+MY======	f	66	MY======	1
+MZXQ====	fo	666F	MZXQ====	1
+MZXW6===	foo	666F6F	MZXW6===	1
+MZXW6YQ=	foob	666F6F62	MZXW6YQ=	1
+MZXW6YTB	fooba	666F6F6261	MZXW6YTB	1
+MZXW6YTBOI======	foobar	666F6F626172	MZXW6YTBOI======	1
+AA======	\0	00	AA======	1
+AAAA====	\0\0	0000	AAAA====	1
+AAAAA===	\0\0\0	000000	AAAAA===	1
+AAAAAAA=	\0\0\0\0	00000000	AAAAAAA=	1
+AAAAAAAA	\0\0\0\0\0	0000000000	AAAAAAAA	1
+74======	�	FF	74======	1
+777Q====	��	FFFF	777Q====	1
+77776===	���	FFFFFF	77776===	1
+777777Y=	����	FFFFFFFF	777777Y=	1
+77777777	�����	FFFFFFFFFF	77777777	1
+AERUKZ4J	#Eg�	0123456789	AERUKZ4J	1
+VPG66AJD	���#	ABCDEF0123	VPG66AJD	1
+GEZDGNBVGY3TQOJQ	1234567890	31323334353637383930	GEZDGNBVGY3TQOJQ	1
+KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO===	The quick brown fox jumps over the lazy dog	54686520717569636B2062726F776E20666F78206A756D7073206F76657220746865206C617A7920646F67	KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO===	1
+ME======	a	61	ME======	1
+MFRA====	ab	6162	MFRA====	1
+MFRGG===	abc	616263	MFRGG===	1
+MFRGGZA=	abcd	61626364	MFRGGZA=	1
+MFRGGZDF	abcde	6162636465	MFRGGZDF	1
+MFRGGZDFMY======	abcdef	616263646566	MFRGGZDFMY======	1
+MZXW6===	foo	666F6F	MZXW6===	1
+MZXW6YTBOI======	foobar	666F6F626172	MZXW6YTBOI======	1
+JBSWY3DPEB3W64TMMQQQ====	Hello world!	48656C6C6F20776F726C6421	JBSWY3DPEB3W64TMMQQQ====	1
+JBXWYZBANV4SAYTFMVZA====	Hold my beer	486F6C64206D792062656572	JBXWYZBANV4SAYTFMVZA====	1
+JBXWYZBAMFXG65DIMVZCAYTFMVZA====	Hold another beer	486F6C6420616E6F746865722062656572	JBXWYZBAMFXG65DIMVZCAYTFMVZA====	1
+IFXGIIDBEB3WS3TF	And a wine	416E6420612077696E65	IFXGIIDBEB3WS3TF	1
+IFXGIIDBNZXXI2DFOIQHO2LOMU======	And another wine	416E6420616E6F746865722077696E65	IFXGIIDBNZXXI2DFOIQHO2LOMU======	1
+IFXGIIDBEBWGK3LPNZQWIZI=	And a lemonade	416E642061206C656D6F6E616465	IFXGIIDBEBWGK3LPNZQWIZI=	1
+OQYVU5RSPFQVU===	t1Zv2yaZ	74315A763279615A	OQYVU5RSPFQVU===	1
+IFXGIIDBNZXXI2DFOIQHO2LOMU======	And another wine	416E6420616E6F746865722077696E65	IFXGIIDBNZXXI2DFOIQHO2LOMU======	1
+Part 7 - Similar to 02337_base58.sql
+
+f
+fo
+foo
+foob
+fooba
+foobar
+Hello world!
+
+f
+fo
+foo
+foob
+fooba
+foobar
+Hello world!
+
+
+
+
+
+
+
+
+
+MY======
+MZXQ====
+MZXW6===
+MZXW6YQ=
+MZXW6YTB
+MZXW6YTBOI======
+
+f
+fo
+foo
+foob
+fooba
+foobar
+1
+1
+JBXWYZBANV4SAYTFMVZC4LRO
+
+AAAAA===
+MYAAA===
+MZXQA===
+MZXW6===
+\0\0\0
+f\0\0
+fo\0
+foo
+1
+1
+1
+1
+ORSXG5BR
+ORSXG5BS
+ORSXG5BT
+ORSXG5BRGIZQ====
+ORSXG5BUGU3A====
+Test
+test 
+test!
diff --git a/tests/queries/0_stateless/03447_base32_encode_decode.sql b/tests/queries/0_stateless/03447_base32_encode_decode.sql
new file mode 100644
index 000000000000..610e90b8e5f8
--- /dev/null
+++ b/tests/queries/0_stateless/03447_base32_encode_decode.sql
@@ -0,0 +1,214 @@
+SELECT base32Encode('This is a test string');
+
+SELECT base32Encode('This is a test string', 'Second arg'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+
+DROP TABLE IF EXISTS t3447;
+CREATE TABLE t3447 (id Int32, str String, b32 String) ENGINE = Memory;
+INSERT INTO t3447 VALUES
+    (100, '', ''),
+    (101, 'f', 'MY======'),
+    (102, 'fo', 'MZXQ===='),
+    (103, 'foo', 'MZXW6==='),
+    (104, 'foob', 'MZXW6YQ='),
+    (105, 'fooba', 'MZXW6YTB'),
+    (106, 'foobar', 'MZXW6YTBOI======'),
+
+    (200, '\x00', 'AA======'),
+    (201, '\x00\x00', 'AAAA===='),
+    (202, '\x00\x00\x00', 'AAAAA==='),
+    (203, '\x00\x00\x00\x00', 'AAAAAAA='),
+    (204, '\x00\x00\x00\x00\x00', 'AAAAAAAA'),
+
+    (300, '\xFF', '74======'),
+    (301, '\xFF\xFF', '777Q===='),
+    (302, '\xFF\xFF\xFF', '77776==='),
+    (303, '\xFF\xFF\xFF\xFF', '777777Y='),
+    (304, '\xFF\xFF\xFF\xFF\xFF', '77777777'),
+
+    (400, '\x01\x23\x45\x67\x89', 'AERUKZ4J'),
+    (401, '\xAB\xCD\xEF\x01\x23', 'VPG66AJD'),
+
+    (402, '1234567890', 'GEZDGNBVGY3TQOJQ'),
+    (403, 'The quick brown fox jumps over the lazy dog', 'KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO==='),
+
+    (500, 'a', 'ME======'),
+    (501, 'ab', 'MFRA===='),
+    (502, 'abc', 'MFRGG==='),
+    (503, 'abcd', 'MFRGGZA='),
+    (504, 'abcde', 'MFRGGZDF'),
+    (505, 'abcdef', 'MFRGGZDFMY======'),
+    (506, 'foo', 'MZXW6==='),
+    (507, 'foobar', 'MZXW6YTBOI======'),
+    (508, 'Hello world!', 'JBSWY3DPEB3W64TMMQQQ===='),
+    (509, 'Hold my beer', 'JBXWYZBANV4SAYTFMVZA===='),
+    (510, 'Hold another beer', 'JBXWYZBAMFXG65DIMVZCAYTFMVZA===='),
+    (511, 'And a wine', 'IFXGIIDBEB3WS3TF'),
+    (512, 'And another wine', 'IFXGIIDBNZXXI2DFOIQHO2LOMU======'),
+    (513, 'And a lemonade', 'IFXGIIDBEBWGK3LPNZQWIZI='),
+    (514, 't1Zv2yaZ', 'OQYVU5RSPFQVU==='),
+    (515, 'And another wine', 'IFXGIIDBNZXXI2DFOIQHO2LOMU======');
+
+
+SELECT 'Part 1 - Encoding';
+SELECT id, str AS input, hex(str) AS input_hex, base32Encode(str) AS result, b32, result == b32 FROM t3447;
+
+SELECT 'Part 2a - Decoding';
+SELECT id, b32 as input, base32Decode(input) AS result, hex(result) as result_hex, hex(str) as expected_hex, result == str FROM t3447;
+
+SELECT 'Part 2b - Decoding lowercase';
+SELECT id, lower(b32) as input, base32Decode(input) AS result, hex(result) as result_hex, hex(str) as expected_hex, result == str FROM t3447;
+
+SELECT 'Part 3 - Roundtrip';
+SELECT id, str AS input, hex(str) AS input_hex, base32Decode(base32Encode(str)) AS result, result == str FROM t3447;
+
+SELECT 'Part 4 - Invalid input';
+SELECT base32Decode('========'); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YT!'); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6Y=B'); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6Y=!'); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6Y==='); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ=Q'); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ======'); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('12345678'); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ'); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ=='); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ==='); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ===='); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ====='); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ======'); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ======='); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ====!=='); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ====A=='); -- { serverError INCORRECT_DATA }
+SELECT base32Decode('MZXW6YQ======'); -- { serverError INCORRECT_DATA }
+
+SELECT 'Part 5 - tryBase32Decode';
+SELECT tryBase32Decode('========');
+SELECT tryBase32Decode('MZXW6YT!');
+SELECT tryBase32Decode('MZXW6Y=B');
+SELECT tryBase32Decode('MZXW6Y=!');
+SELECT tryBase32Decode('MZXW6Y===');
+SELECT tryBase32Decode('MZXW6YQ=Q');
+SELECT tryBase32Decode('MZXW6YQ======');
+SELECT tryBase32Decode('12345678');
+SELECT tryBase32Decode('MZXW6YQ');
+SELECT tryBase32Decode('MZXW6YQ==');
+SELECT tryBase32Decode('MZXW6YQ===');
+SELECT tryBase32Decode('MZXW6YQ====');
+SELECT tryBase32Decode('MZXW6YQ=====');
+SELECT tryBase32Decode('MZXW6YQ======');
+SELECT tryBase32Decode('MZXW6YQ=======');
+SELECT tryBase32Decode('MZXW6YQ====!==');
+SELECT tryBase32Decode('MZXW6YQ====A==');
+SELECT tryBase32Decode('MZXW6YQ======');
+
+SELECT 'Part 6 - FixedString encoding + decoding';
+SELECT val, hex(val), base32Encode(val) as enc_res, hex(base32Decode(enc_res)) as dec_res, dec_res == hex(val) FROM (SELECT arrayJoin([
+    toFixedString('', 1),
+    toFixedString('f', 1),
+    toFixedString('fo', 2),
+    toFixedString('foo', 3),
+    toFixedString('foob', 4),
+    toFixedString('fooba', 5),
+    toFixedString('foobar', 6),
+    toFixedString('\x00', 1),
+    toFixedString('\x00\x00', 2),
+    toFixedString('\x00\x00\x00', 3),
+    toFixedString('\x00\x00\x00\x00', 4),
+    toFixedString('\x00\x00\x00\x00\x00', 5),
+    toFixedString('\xFF', 1),
+    toFixedString('\xFF\xFF', 2),
+    toFixedString('\xFF\xFF\xFF', 3),
+    toFixedString('\xFF\xFF\xFF\xFF', 4),
+    toFixedString('\xFF\xFF\xFF\xFF\xFF', 5),
+    toFixedString('\x01\x23\x45\x67\x89', 5),
+    toFixedString('\xAB\xCD\xEF\x01\x23', 5),
+    toFixedString('1234567890', 10),
+    toFixedString('The quick brown fox jumps over the lazy dog', 43),
+    toFixedString('a', 1),
+    toFixedString('ab', 2),
+    toFixedString('abc', 3),
+    toFixedString('abcd', 4),
+    toFixedString('abcde', 5),
+    toFixedString('abcdef', 6),
+    toFixedString('foo', 3),
+    toFixedString('foobar', 6),
+    toFixedString('Hello world!', 12),
+    toFixedString('Hold my beer', 12),
+    toFixedString('Hold another beer', 18),
+    toFixedString('And a wine', 10),
+    toFixedString('And another wine', 17),
+    toFixedString('And a lemonade', 14),
+    toFixedString('t1Zv2yaZ', 8),
+    toFixedString('And another wine', 17)
+    ]) val);
+
+SELECT 'Part 6 - FixedString decoding + encoding';
+SELECT val, base32Decode(val) as dec_res, hex(dec_res), base32Encode(dec_res) as enc_res, enc_res == val FROM (SELECT arrayJoin([
+    toFixedString('AAAAA===', 8),
+    toFixedString('MY======', 8),
+    toFixedString('MZXQ====', 8),
+    toFixedString('MZXW6===', 8),
+    toFixedString('MZXW6YQ=', 8),
+    toFixedString('MZXW6YTB', 8),
+    toFixedString('MZXW6YTBOI======', 16),
+    toFixedString('AA======', 8),
+    toFixedString('AAAA====', 8),
+    toFixedString('AAAAA===', 8),
+    toFixedString('AAAAAAA=', 8),
+    toFixedString('AAAAAAAA', 8),
+    toFixedString('74======', 8),
+    toFixedString('777Q====', 8),
+    toFixedString('77776===', 8),
+    toFixedString('777777Y=', 8),
+    toFixedString('77777777', 8),
+    toFixedString('AERUKZ4J', 8),
+    toFixedString('VPG66AJD', 8),
+    toFixedString('GEZDGNBVGY3TQOJQ', 16),
+    toFixedString('KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO===', 96),
+    toFixedString('ME======', 8),
+    toFixedString('MFRA====', 8),
+    toFixedString('MFRGG===', 8),
+    toFixedString('MFRGGZA=', 8),
+    toFixedString('MFRGGZDF', 8),
+    toFixedString('MFRGGZDFMY======', 16),
+    toFixedString('MZXW6===', 8),
+    toFixedString('MZXW6YTBOI======', 16),
+    toFixedString('JBSWY3DPEB3W64TMMQQQ====', 24),
+    toFixedString('JBXWYZBANV4SAYTFMVZA====', 24),
+    toFixedString('JBXWYZBAMFXG65DIMVZCAYTFMVZA====', 32),
+    toFixedString('IFXGIIDBEB3WS3TF', 16),
+    toFixedString('IFXGIIDBNZXXI2DFOIQHO2LOMU======', 32),
+    toFixedString('IFXGIIDBEBWGK3LPNZQWIZI=', 24),
+    toFixedString('OQYVU5RSPFQVU===', 16),
+    toFixedString('IFXGIIDBNZXXI2DFOIQHO2LOMU======', 32)
+    ]) val);
+
+SELECT 'Part 7 - Similar to 02337_base58.sql';
+
+SELECT base32Decode(encoded) FROM (SELECT base32Encode(val) as encoded FROM (SELECT arrayJoin(['', 'f', 'fo', 'foo', 'foob', 'fooba', 'foobar', 'Hello world!']) val));
+SELECT tryBase32Decode(encoded) FROM (SELECT base32Encode(val) as encoded FROM (SELECT arrayJoin(['', 'f', 'fo', 'foo', 'foob', 'fooba', 'foobar', 'Hello world!']) val));
+SELECT tryBase32Decode(val) FROM (SELECT arrayJoin(['Hold my beer', 'Hold another beer', '3csAg9', 'And a wine', 'And another wine', 'And a lemonade', 't1Zv2yaZ', 'And another wine']) val);
+
+SELECT base32Encode(val) FROM (SELECT arrayJoin(['', 'f', 'fo', 'foo', 'foob', 'fooba', 'foobar']) val);
+SELECT base32Decode(val) FROM (SELECT arrayJoin(['', 'MY======', 'MZXQ====', 'MZXW6===', 'MZXW6YQ=', 'MZXW6YTB', 'MZXW6YTBOI======']) val);
+
+SELECT base32Encode(base32Decode('KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO===')) == 'KRUGKIDROVUWG2ZAMJZG653OEBTG66BANJ2W24DTEBXXMZLSEB2GQZJANRQXU6JAMRXWO===';
+SELECT base32Encode('\xAB\xCD\xEF\x01\x23') == 'VPG66AJD';
+
+SELECT base32Encode(toFixedString('Hold my beer...', 15));
+SELECT base32Decode(toFixedString('t1Zv2yaZ', 8)); -- { serverError INCORRECT_DATA }
+SELECT tryBase32Decode(toFixedString('t1Zv2yaZ', 8));
+
+SELECT base32Encode(val) FROM (SELECT arrayJoin([toFixedString('', 3), toFixedString('f', 3), toFixedString('fo', 3), toFixedString('foo', 3)]) val);
+SELECT base32Decode(val) FROM (SELECT arrayJoin([toFixedString('AAAAA===', 8), toFixedString('MYAAA===', 8), toFixedString('MZXQA===', 8), toFixedString('MZXW6===', 8)]) val);
+
+SELECT base32Encode(reinterpretAsFixedString(byteSwap(toUInt256('256')))) == 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAA====';
+SELECT base32Encode(reinterpretAsString(byteSwap(toUInt256('256')))) == 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE======';  -- { reinterpretAsString drops the last null byte hence, encoded value is different than the FixedString version above }
+
+SELECT base32Encode('Testing') == 'KRSXG5DJNZTQ====';
+SELECT base32Decode('KRSXG5DJNZTQ====') == 'Testing';
+
+SELECT base32Encode(val) FROM (SELECT arrayJoin(['test1', 'test2', 'test3', 'test123', 'test456']) val);
+SELECT base32Decode(val) FROM (SELECT arrayJoin(['KRSXG5A=', 'ORSXG5BA', 'ORSXG5BB']) val);
+
+DROP TABLE IF EXISTS t3447;
