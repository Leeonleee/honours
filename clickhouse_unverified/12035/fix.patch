diff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp
index bb054169e71f..1478c36dd23b 100644
--- a/src/Interpreters/MergeJoin.cpp
+++ b/src/Interpreters/MergeJoin.cpp
@@ -396,7 +396,6 @@ MergeJoin::MergeJoin(std::shared_ptr<TableJoin> table_join_, const Block & right
         if (required_right_keys.count(column.name))
             right_columns_to_add.insert(ColumnWithTypeAndName{nullptr, column.type, column.name});
 
-    JoinCommon::removeLowCardinalityInplace(right_columns_to_add);
     JoinCommon::createMissedColumns(right_columns_to_add);
 
     if (nullable_right_side)
@@ -513,7 +512,7 @@ bool MergeJoin::saveRightBlock(Block && block)
 bool MergeJoin::addJoinedBlock(const Block & src_block, bool)
 {
     Block block = materializeBlock(src_block);
-    JoinCommon::removeLowCardinalityInplace(block);
+    JoinCommon::removeLowCardinalityInplace(block, table_join->keyNamesRight());
 
     sortBlock(block, right_sort_description);
     return saveRightBlock(std::move(block));
@@ -525,7 +524,7 @@ void MergeJoin::joinBlock(Block & block, ExtraBlockPtr & not_processed)
     {
         JoinCommon::checkTypesOfKeys(block, table_join->keyNamesLeft(), right_table_keys, table_join->keyNamesRight());
         materializeBlockInplace(block);
-        JoinCommon::removeLowCardinalityInplace(block);
+        JoinCommon::removeLowCardinalityInplace(block, table_join->keyNamesLeft());
 
         sortBlock(block, left_sort_description);
     }
diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp
index 6dd3a202d4d8..a17d3b43e69f 100644
--- a/src/Interpreters/join_common.cpp
+++ b/src/Interpreters/join_common.cpp
@@ -104,6 +104,16 @@ void removeLowCardinalityInplace(Block & block)
     }
 }
 
+void removeLowCardinalityInplace(Block & block, const Names & names)
+{
+    for (const String & column_name : names)
+    {
+        auto & col = block.getByName(column_name);
+        col.column = recursiveRemoveLowCardinality(col.column);
+        col.type = recursiveRemoveLowCardinality(col.type);
+    }
+}
+
 void splitAdditionalColumns(const Block & sample_block, const Names & key_names, Block & block_keys, Block & block_others)
 {
     block_others = materializeBlock(sample_block);
diff --git a/src/Interpreters/join_common.h b/src/Interpreters/join_common.h
index 47fa082e7009..81eb0dfa6888 100644
--- a/src/Interpreters/join_common.h
+++ b/src/Interpreters/join_common.h
@@ -20,6 +20,7 @@ Columns materializeColumns(const Block & block, const Names & names);
 ColumnRawPtrs materializeColumnsInplace(Block & block, const Names & names);
 ColumnRawPtrs getRawPointers(const Columns & columns);
 void removeLowCardinalityInplace(Block & block);
+void removeLowCardinalityInplace(Block & block, const Names & names);
 
 /// Split key and other columns by keys name list
 void splitAdditionalColumns(const Block & sample_block, const Names & key_names, Block & block_keys, Block & block_others);
