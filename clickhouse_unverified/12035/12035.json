{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12035,
  "instance_id": "ClickHouse__ClickHouse-12035",
  "issue_numbers": [
    "11791"
  ],
  "base_commit": "32237578086785b05c8ce456e92c1f58ccb2b671",
  "patch": "diff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp\nindex bb054169e71f..1478c36dd23b 100644\n--- a/src/Interpreters/MergeJoin.cpp\n+++ b/src/Interpreters/MergeJoin.cpp\n@@ -396,7 +396,6 @@ MergeJoin::MergeJoin(std::shared_ptr<TableJoin> table_join_, const Block & right\n         if (required_right_keys.count(column.name))\n             right_columns_to_add.insert(ColumnWithTypeAndName{nullptr, column.type, column.name});\n \n-    JoinCommon::removeLowCardinalityInplace(right_columns_to_add);\n     JoinCommon::createMissedColumns(right_columns_to_add);\n \n     if (nullable_right_side)\n@@ -513,7 +512,7 @@ bool MergeJoin::saveRightBlock(Block && block)\n bool MergeJoin::addJoinedBlock(const Block & src_block, bool)\n {\n     Block block = materializeBlock(src_block);\n-    JoinCommon::removeLowCardinalityInplace(block);\n+    JoinCommon::removeLowCardinalityInplace(block, table_join->keyNamesRight());\n \n     sortBlock(block, right_sort_description);\n     return saveRightBlock(std::move(block));\n@@ -525,7 +524,7 @@ void MergeJoin::joinBlock(Block & block, ExtraBlockPtr & not_processed)\n     {\n         JoinCommon::checkTypesOfKeys(block, table_join->keyNamesLeft(), right_table_keys, table_join->keyNamesRight());\n         materializeBlockInplace(block);\n-        JoinCommon::removeLowCardinalityInplace(block);\n+        JoinCommon::removeLowCardinalityInplace(block, table_join->keyNamesLeft());\n \n         sortBlock(block, left_sort_description);\n     }\ndiff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp\nindex 6dd3a202d4d8..a17d3b43e69f 100644\n--- a/src/Interpreters/join_common.cpp\n+++ b/src/Interpreters/join_common.cpp\n@@ -104,6 +104,16 @@ void removeLowCardinalityInplace(Block & block)\n     }\n }\n \n+void removeLowCardinalityInplace(Block & block, const Names & names)\n+{\n+    for (const String & column_name : names)\n+    {\n+        auto & col = block.getByName(column_name);\n+        col.column = recursiveRemoveLowCardinality(col.column);\n+        col.type = recursiveRemoveLowCardinality(col.type);\n+    }\n+}\n+\n void splitAdditionalColumns(const Block & sample_block, const Names & key_names, Block & block_keys, Block & block_others)\n {\n     block_others = materializeBlock(sample_block);\ndiff --git a/src/Interpreters/join_common.h b/src/Interpreters/join_common.h\nindex 47fa082e7009..81eb0dfa6888 100644\n--- a/src/Interpreters/join_common.h\n+++ b/src/Interpreters/join_common.h\n@@ -20,6 +20,7 @@ Columns materializeColumns(const Block & block, const Names & names);\n ColumnRawPtrs materializeColumnsInplace(Block & block, const Names & names);\n ColumnRawPtrs getRawPointers(const Columns & columns);\n void removeLowCardinalityInplace(Block & block);\n+void removeLowCardinalityInplace(Block & block, const Names & names);\n \n /// Split key and other columns by keys name list\n void splitAdditionalColumns(const Block & sample_block, const Names & key_names, Block & block_keys, Block & block_others);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference b/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference\nnew file mode 100644\nindex 000000000000..8e032c0a542c\n--- /dev/null\n+++ b/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference\n@@ -0,0 +1,41 @@\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+-\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+-\n+0\t1\n+1\t2\n+2\t0\n+0\t1\n+1\t2\n+2\t0\n+0\t1\n+1\t2\n+2\t0\n+0\t1\n+1\t2\n+2\t0\n+0\t1\n+1\t2\n+2\t0\n+0\t1\n+1\t2\n+2\t\\N\n+0\t1\n+1\t2\n+2\t\\N\ndiff --git a/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql b/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql\nnew file mode 100644\nindex 000000000000..1181ee453a61\n--- /dev/null\n+++ b/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql\n@@ -0,0 +1,30 @@\n+set join_algorithm = 'partial_merge';\n+\n+select * from (select dummy as val from system.one) s1 any left join (select dummy as val from system.one) s2 using val;\n+select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select dummy as val from system.one) s2 using val;\n+select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(dummy) as val from system.one) s2 using val;\n+select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(dummy) as val from system.one) s2 using val;\n+select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select dummy as val from system.one) s2 using val;\n+select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) s2 using val;\n+select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(dummy) as val from system.one) s2 using val;\n+select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) s2 using val;\n+select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) s2 using val;\n+select '-';\n+select * from (select dummy as val from system.one) s1 any left join (select dummy as val from system.one) s2 on val + 0 = val * 1; -- { serverError 352 }\n+select * from (select dummy as val from system.one) s1 any left join (select dummy as rval from system.one) s2 on val + 0 = rval * 1;\n+select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select dummy as rval from system.one) s2 on val + 0 = rval * 1;\n+select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(dummy) as rval from system.one) s2 on val + 0 = rval * 1;\n+select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(dummy) as rval from system.one) s2 on val + 0 = rval * 1;\n+select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select dummy as rval from system.one) s2 on val + 0 = rval * 1;\n+select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) s2 on val + 0 = rval * 1;\n+select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(dummy) as rval from system.one) s2 on val + 0 = rval * 1;\n+select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) s2 on val + 0 = rval * 1;\n+select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) s2 on val + 0 = rval * 1;\n+select '-';\n+select * from (select number as l from system.numbers limit 3) s1 any left join (select number as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n+select * from (select toLowCardinality(number) as l from system.numbers limit 3) s1 any left join (select number as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n+select * from (select number as l from system.numbers limit 3) s1 any left join (select toLowCardinality(number) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n+select * from (select toLowCardinality(number) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(number) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n+select * from (select toLowCardinality(toNullable(number)) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(number) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n+select * from (select toLowCardinality(number) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(toNullable(number)) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n+select * from (select toLowCardinality(toNullable(number)) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(toNullable(number)) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\ndiff --git a/tests/queries/0_stateless/01353_low_cardinality_join_types.reference b/tests/queries/0_stateless/01353_low_cardinality_join_types.reference\nnew file mode 100644\nindex 000000000000..85d3f3d598b3\n--- /dev/null\n+++ b/tests/queries/0_stateless/01353_low_cardinality_join_types.reference\n@@ -0,0 +1,36 @@\n+-\n+LowCardinality(UInt64)\tUInt64\tString\tLowCardinality(String)\n+-\n+UInt64\tLowCardinality(UInt64)\tLowCardinality(String)\tString\n+-\n+LowCardinality(UInt64)\tLowCardinality(UInt64)\tLowCardinality(String)\tLowCardinality(String)\n+-\n+LowCardinality(UInt64)\tUInt64\tString\tLowCardinality(String)\n+LowCardinality(UInt64)\tUInt64\tString\tLowCardinality(String)\n+LowCardinality(UInt64)\tUInt64\tString\tLowCardinality(String)\n+-\n+UInt64\tLowCardinality(UInt64)\tLowCardinality(String)\tString\n+UInt64\tLowCardinality(UInt64)\tLowCardinality(String)\tString\n+UInt64\tLowCardinality(UInt64)\tLowCardinality(String)\tString\n+-\n+LowCardinality(UInt64)\tLowCardinality(UInt64)\tLowCardinality(String)\tLowCardinality(String)\n+LowCardinality(UInt64)\tLowCardinality(UInt64)\tLowCardinality(String)\tLowCardinality(String)\n+LowCardinality(UInt64)\tLowCardinality(UInt64)\tLowCardinality(String)\tLowCardinality(String)\n+-\n+LowCardinality(UInt64)\tUInt64\tString\tLowCardinality(String)\n+-\n+UInt64\tLowCardinality(UInt64)\tLowCardinality(String)\tString\n+-\n+LowCardinality(UInt64)\tLowCardinality(UInt64)\tLowCardinality(String)\tLowCardinality(String)\n+-\n+LowCardinality(UInt64)\tUInt64\tString\tLowCardinality(String)\n+LowCardinality(UInt64)\tUInt64\tString\tLowCardinality(String)\n+LowCardinality(UInt64)\tUInt64\tString\tLowCardinality(String)\n+-\n+UInt64\tLowCardinality(UInt64)\tLowCardinality(String)\tString\n+UInt64\tLowCardinality(UInt64)\tLowCardinality(String)\tString\n+UInt64\tLowCardinality(UInt64)\tLowCardinality(String)\tString\n+-\n+LowCardinality(UInt64)\tLowCardinality(UInt64)\tLowCardinality(String)\tLowCardinality(String)\n+LowCardinality(UInt64)\tLowCardinality(UInt64)\tLowCardinality(String)\tLowCardinality(String)\n+LowCardinality(UInt64)\tLowCardinality(UInt64)\tLowCardinality(String)\tLowCardinality(String)\ndiff --git a/tests/queries/0_stateless/01353_low_cardinality_join_types.sql b/tests/queries/0_stateless/01353_low_cardinality_join_types.sql\nnew file mode 100644\nindex 000000000000..91ebe97fa48a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01353_low_cardinality_join_types.sql\n@@ -0,0 +1,75 @@\n+set join_algorithm = 'hash';\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select toLowCardinality(number) k, toString(number) s from numbers(2)) as js1\n+join (select number+1 k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select number k, toLowCardinality(toString(number)) s from numbers(2)) as js1\n+join (select toLowCardinality(number+1) k, toString(number+1) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select toLowCardinality(number) k, toLowCardinality(toString(number)) s from numbers(2)) as js1\n+join (select toLowCardinality(number+1) k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select toLowCardinality(number) k, toString(number) s from numbers(2)) as js1\n+full join (select number+1 k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select number k, toLowCardinality(toString(number)) s from numbers(2)) as js1\n+full join (select toLowCardinality(number+1) k, toString(number+1) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select toLowCardinality(number) k, toLowCardinality(toString(number)) s from numbers(2)) as js1\n+full join (select toLowCardinality(number+1) k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+set join_algorithm = 'prefer_partial_merge';\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select toLowCardinality(number) k, toString(number) s from numbers(2)) as js1\n+join (select number+1 k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select number k, toLowCardinality(toString(number)) s from numbers(2)) as js1\n+join (select toLowCardinality(number+1) k, toString(number+1) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select toLowCardinality(number) k, toLowCardinality(toString(number)) s from numbers(2)) as js1\n+join (select toLowCardinality(number+1) k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select toLowCardinality(number) k, toString(number) s from numbers(2)) as js1\n+full join (select number+1 k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select number k, toLowCardinality(toString(number)) s from numbers(2)) as js1\n+full join (select toLowCardinality(number+1) k, toString(number+1) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n+\n+select '-';\n+select toTypeName(materialize(js1.k)), toTypeName(materialize(js2.k)), toTypeName(materialize(js1.s)), toTypeName(materialize(js2.s))\n+from (select toLowCardinality(number) k, toLowCardinality(toString(number)) s from numbers(2)) as js1\n+full join (select toLowCardinality(number+1) k, toLowCardinality(toString(number+1)) s from numbers(2)) as js2\n+using k order by js1.k, js2.k;\n",
  "problem_statement": "Segmentation Fault when using join_algorithm='partial_merge'\n**Describe the bug**\r\nSegmentation fault when using join_algorithm='partial_merge'\r\n\r\n**How to reproduce**\r\nTrying to merge large tables using merge join. \r\nProblem does NOT happen when limits are applied on the \"right\" table. \r\nCould not understand specific threshold on when it start to appear. \r\nRight table is heavy and has long strings of 50-400 char wide. \r\nVersion: 20.3.11.97\r\n\r\n```\r\n(select from fact group by) -- uses two-stage grouping due to memory peakmem 2GB \r\njoin \r\n(select from bigdimension) \u2014 ~67 mln + fat strings, peakmem 6GB\r\n```\r\n\r\nUPD:\r\nProblem is happening when using LowCardinality on the right side table. \r\nQuery to reproduce (although depending on conditions it may fail with failure to allocate memory):\r\n```\r\nselect \r\nattr.k1,\r\nattr.dim1,\r\nfact.k1,\r\nfact.gk1val,\r\nfact.gk2val,\r\nfact.gk3val from\r\n(\r\nselect k1, k2,\r\n(groupArrayInsertAt(Null, 3)(tuple(toNullable(val)), toUInt32(indexOf(range(3), gk) - 1)).1 as arr)[1] gk1val,\r\narr[2] gk2val,arr[3] gk3val\r\nfrom (\r\nselect cityHash64(number) as k1, toString(cityHash64(number,2)) as k2, toString(cityHash64(number,gk)) as val, gk from numbers(1000000)\r\narray join range(3) as gk\r\n) group by k1, k2 \r\n) as fact\r\nJOIN \r\n(\r\n\tselect cityHash64(number) as k1, toLowCardinality(arrayStringConcat(arrayMap(x-> toString(x),range(cityHash64(number)%100)),'-')) dim1 from numbers(10000000)\r\n)\r\nas attr using k1\r\nSETTINGS max_bytes_before_external_group_by='500M',join_algorithm='partial_merge'\r\nFormat Null;\r\n```\r\nSame query works correctly without having \"toLowCardinality\" (but too slow), and does not utilize much memory. \r\n\r\n**Expected behavior**\r\nclickhouse query shall not result in segmentation faults and query shall be completed successfully. \r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2020.06.19 15:13:30.829653 [ 14927 ] {} <Fatal> BaseDaemon: (version 20.3.11.97 (official build)) (from thread 14872) (query_id: 864f09d2-8cc0-44df-8a44-72fc974269e8) Received signal Segmentation fault (11).\r\n2020.06.19 15:13:30.829695 [ 14927 ] {} <Fatal> BaseDaemon: Address: 0x1 Access: read. Address not mapped to object.\r\n2020.06.19 15:13:30.829718 [ 14927 ] {} <Fatal> BaseDaemon: Stack trace: 0xd5c7718 0xd445dbe 0xd446c24 0xd4540a0 0xd0c8f83 0xd0ccc7e 0xde3f812 0xde428c2 0xdb75075 0xdbb9581 0xdbbd70d 0xdbbe0d2 0x8f757e7 0x8f73c33 0x7fdf6df78ea5 0x7fdf6e7958dd\r\n2020.06.19 15:13:30.879340 [ 14927 ] {} <Fatal> BaseDaemon: 3. DB::ColumnString::insertFrom(DB::IColumn const&, unsigned long) @ 0xd5c7718 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879432 [ 14927 ] {} <Fatal> BaseDaemon: 4. ? @ 0xd445dbe in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879490 [ 14927 ] {} <Fatal> BaseDaemon: 5. DB::MergeJoin::allInnerJoin(DB::MergeJoinCursor&, DB::Block const&, DB::Block const&, std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, unsigned long&, unsigned long&) @ 0xd446c24 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879541 [ 14927 ] {} <Fatal> BaseDaemon: 6. void DB::MergeJoin::joinSortedBlock<false, true>(DB::Block&, std::__1::shared_ptr<DB::ExtraBlock>&) @ 0xd4540a0 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879577 [ 14927 ] {} <Fatal> BaseDaemon: 7. DB::ExpressionAction::execute(DB::Block&, bool, std::__1::shared_ptr<DB::ExtraBlock>&) const @ 0xd0c8f83 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879606 [ 14927 ] {} <Fatal> BaseDaemon: 8. DB::ExpressionActions::execute(DB::Block&, std::__1::shared_ptr<DB::ExtraBlock>&, unsigned long&) const @ 0xd0ccc7e in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879639 [ 14927 ] {} <Fatal> BaseDaemon: 9. DB::InflatingExpressionTransform::readExecute(DB::Chunk&) @ 0xde3f812 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879664 [ 14927 ] {} <Fatal> BaseDaemon: 10. DB::InflatingExpressionTransform::transform(DB::Chunk&) @ 0xde428c2 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879727 [ 14927 ] {} <Fatal> BaseDaemon: 11. DB::ISimpleTransform::work() @ 0xdb75075 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879751 [ 14927 ] {} <Fatal> BaseDaemon: 12. ? @ 0xdbb9581 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879782 [ 14927 ] {} <Fatal> BaseDaemon: 13. DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0xdbbd70d in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879805 [ 14927 ] {} <Fatal> BaseDaemon: 14. ? @ 0xdbbe0d2 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879834 [ 14927 ] {} <Fatal> BaseDaemon: 15. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x8f757e7 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879866 [ 14927 ] {} <Fatal> BaseDaemon: 16. ? @ 0x8f73c33 in /usr/bin/clickhouse\r\n2020.06.19 15:13:30.879914 [ 14927 ] {} <Fatal> BaseDaemon: 17. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n2020.06.19 15:13:30.879959 [ 14927 ] {} <Fatal> BaseDaemon: 18. __clone @ 0xfe8dd in /usr/lib64/libc-2.17.so\r\n```\r\n\r\n**Additional context**\r\npartial_merge was tried to workaround out of memory problem when right table is too big. Seems bad luck...\r\n\n",
  "hints_text": "Added query to reproduce. \r\n\nThis query tries to allocate too much and fails (but properly, no segfault):\r\n```\r\nselect \r\nattr.k1,\r\nattr.dim1,\r\nfact.k1,\r\nfact.gk1val,\r\nfact.gk2val,\r\nfact.gk3val from\r\n(\r\nselect k1, k2,\r\n(groupArrayInsertAt(Null, 3)(tuple(toNullable(val)), toUInt32(indexOf(range(3), gk) - 1)).1 as arr)[1] gk1val,\r\narr[2] gk2val,arr[3] gk3val\r\nfrom (\r\nselect cityHash64(number) as k1, toString(cityHash64(number,2)) as k2, toString(cityHash64(number,gk)) as val, gk from numbers(10000)\r\narray join range(3) as gk\r\n) group by k1, k2 \r\n) as fact\r\nJOIN \r\n(\r\n\tselect cityHash64(number) as k1, toLowCardinality(arrayStringConcat(arrayMap(x-> toString(x),range(cityHash64(number)%100)),'-')) dim1 from numbers(10000000)\r\n)\r\nas attr using k1\r\nSETTINGS max_bytes_before_external_group_by='5G',join_algorithm='partial_merge'\r\nFormat Null;\r\n```\r\n\r\n```\r\n<Error> executeQuery: Code: 241, e.displayText() = DB::Exception: Memory limit (for query) exceeded: would use 4.00 EiB (attempt to allocate chunk of 4611686018423608656 bytes), maximum: 27.94 GiB (version 20.3.11.97 (official build)) (from [::1]:55170) (in query: SELECT attr.k1, attr.dim1, fact.k1, fact.gk1val, fact.gk2val, fact.gk3val FROM (SELECT k1, k2, ((groupArrayInsertAt(NULL, 3)(tuple(toNullable(val)), toUInt32(indexOf(range(3), gk) - 1)).1) AS arr)[1] AS gk1val, arr[2] AS gk2val, arr[3] AS gk3val FROM (SELECT cityHash64(number) AS k1, toString(cityHash64(number, 2)) AS k2, toString(cityHash64(number, gk)) AS val, gk FROM numbers(10000) ARRAY JOIN range(3) AS gk) GROUP BY k1, k2) AS fact INNER JOIN (SELECT cityHash64(number) AS k1, toLowCardinality(arrayStringConcat(arrayMap(x -> toString(x), range(cityHash64(number) % 100)), '-')) AS dim1 FROM numbers(10000000)) AS attr USING (k1) SETTINGS max_bytes_before_external_group_by = '5G', join_algorithm = 'partial_merge' FORMAT Null), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1051b3a0 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8f5172d in /usr/bin/clickhouse\r\n2. ? @ 0x8f50ed7 in /usr/bin/clickhouse\r\n3. MemoryTracker::alloc(long) @ 0x8f4eec3 in /usr/bin/clickhouse\r\n4. ? @ 0xd5bef5d in /usr/bin/clickhouse\r\n5. DB::ColumnString::insertFrom(DB::IColumn const&, unsigned long) @ 0xd5c775c in /usr/bin/clickhouse\r\n6. ? @ 0xd445dbe in /usr/bin/clickhouse\r\n7. DB::MergeJoin::allInnerJoin(DB::MergeJoinCursor&, DB::Block const&, DB::Block const&, std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, unsigned long&, unsigned long&) @ 0xd446c24 in /usr/bin/clickhouse\r\n8. void DB::MergeJoin::joinSortedBlock<false, true>(DB::Block&, std::__1::shared_ptr<DB::ExtraBlock>&) @ 0xd4540a0 in /usr/bin/clickhouse\r\n9. DB::ExpressionAction::execute(DB::Block&, bool, std::__1::shared_ptr<DB::ExtraBlock>&) const @ 0xd0c8f83 in /usr/bin/clickhouse\r\n10. DB::ExpressionActions::execute(DB::Block&, std::__1::shared_ptr<DB::ExtraBlock>&, unsigned long&) const @ 0xd0ccc7e in /usr/bin/clickhouse\r\n11. DB::InflatingExpressionTransform::readExecute(DB::Chunk&) @ 0xde3f812 in /usr/bin/clickhouse\r\n12. DB::InflatingExpressionTransform::transform(DB::Chunk&) @ 0xde428c2 in /usr/bin/clickhouse\r\n13. DB::ISimpleTransform::work() @ 0xdb75075 in /usr/bin/clickhouse\r\n14. ? @ 0xdbb9581 in /usr/bin/clickhouse\r\n15. DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0xdbbd70d in /usr/bin/clickhouse\r\n16. DB::PipelineExecutor::executeImpl(unsigned long) @ 0xdbbf7b8 in /usr/bin/clickhouse\r\n17. DB::PipelineExecutor::execute(unsigned long) @ 0xdbbf985 in /usr/bin/clickhouse\r\n18. ? @ 0x902a557 in /usr/bin/clickhouse\r\n19. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8f762d7 in /usr/bin/clickhouse\r\n20. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() const @ 0x8f76958 in /usr/bin/clickhouse\r\n21. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x8f757e7 in /usr/bin/clickhouse\r\n22. ? @ 0x8f73c33 in /usr/bin/clickhouse\r\n23. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n24. __clone @ 0xfe8dd in /usr/lib64/libc-2.17.so\r\n```\n@4ertus2 It is easily reproducible in master.\n@4ertus2 Should we hide `partial_merge` option inside experimental flag if it does not have acceptable quality?",
  "created_at": "2020-06-29T14:00:58Z"
}