{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67334,
  "instance_id": "ClickHouse__ClickHouse-67334",
  "issue_numbers": [
    "67042"
  ],
  "base_commit": "3efa20868086d518a0983bf5221e3953442f0530",
  "patch": "diff --git a/docs/en/sql-reference/window-functions/dense_rank.md b/docs/en/sql-reference/window-functions/dense_rank.md\nindex d6445b68c55c..2c8617fb6688 100644\n--- a/docs/en/sql-reference/window-functions/dense_rank.md\n+++ b/docs/en/sql-reference/window-functions/dense_rank.md\n@@ -12,6 +12,8 @@ The [rank](./rank.md) function provides the same behaviour, but with gaps in ran\n \n **Syntax**\n \n+Alias: `denseRank` (case-sensitive)\n+\n ```sql\n dense_rank (column_name)\n   OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column] \ndiff --git a/docs/en/sql-reference/window-functions/index.md b/docs/en/sql-reference/window-functions/index.md\nindex 0c3e2ea1cb6e..27d4bd763c74 100644\n--- a/docs/en/sql-reference/window-functions/index.md\n+++ b/docs/en/sql-reference/window-functions/index.md\n@@ -23,8 +23,8 @@ ClickHouse supports the standard grammar for defining windows and window functio\n | `INTERVAL` syntax for `DateTime` `RANGE OFFSET` frame                              | \u274c (specify the number of seconds instead (`RANGE` works with any numeric type).)                                                                                                                                 |\n | `GROUPS` frame                                                                     | \u274c                                                                                                                                                                               |\n | Calculating aggregate functions over a frame (`sum(value) over (order by time)`)   | \u2705 (All aggregate functions are supported)                                                                                                                                                       |\n-| `rank()`, `dense_rank()`, `row_number()`                                           | \u2705                                                                                                                                                                                   |\n-| `percent_rank()` | \u2705  Efficiently computes the relative standing of a value within a partition in a dataset. This function effectively replaces the more verbose and computationally intensive manual SQL calculation expressed as `ifNull((rank() OVER(PARTITION BY x ORDER BY y) - 1) / nullif(count(1) OVER(PARTITION BY x) - 1, 0), 0)`| \n+| `rank()`, `dense_rank()`, `row_number()`                                           | \u2705 <br/>Alias: `denseRank()`                                                                                                                                                                                   |\n+| `percent_rank()` | \u2705  Efficiently computes the relative standing of a value within a partition in a dataset. This function effectively replaces the more verbose and computationally intensive manual SQL calculation expressed as `ifNull((rank() OVER(PARTITION BY x ORDER BY y) - 1) / nullif(count(1) OVER(PARTITION BY x) - 1, 0), 0)` <br/>Alias: `percentRank()`| \n | `lag/lead(value, offset)`                                                          | \u274c <br/> You can use one of the following workarounds:<br/> 1) `any(value) over (.... rows between <offset> preceding and <offset> preceding)`, or `following` for `lead` <br/> 2) `lagInFrame/leadInFrame`, which are analogous, but respect the window frame. To get behavior identical to `lag/lead`, use `rows between unbounded preceding and unbounded following`                                                                 |\n | ntile(buckets) | \u2705 <br/> Specify window like, (partition by x order by y rows between unbounded preceding and unrounded following). |\n \ndiff --git a/src/Processors/Transforms/WindowTransform.cpp b/src/Processors/Transforms/WindowTransform.cpp\nindex f76e2d64368f..8de248a9c950 100644\n--- a/src/Processors/Transforms/WindowTransform.cpp\n+++ b/src/Processors/Transforms/WindowTransform.cpp\n@@ -2772,19 +2772,23 @@ void registerWindowFunctions(AggregateFunctionFactory & factory)\n                 parameters);\n         }, properties}, AggregateFunctionFactory::Case::Insensitive);\n \n-    factory.registerFunction(\"dense_rank\", {[](const std::string & name,\n+    factory.registerFunction(\"denseRank\", {[](const std::string & name,\n             const DataTypes & argument_types, const Array & parameters, const Settings *)\n         {\n             return std::make_shared<WindowFunctionDenseRank>(name, argument_types,\n                 parameters);\n-        }, properties}, AggregateFunctionFactory::Case::Insensitive);\n+        }, properties});\n+\n+    factory.registerAlias(\"dense_rank\", \"denseRank\", AggregateFunctionFactory::Case::Insensitive);\n \n-    factory.registerFunction(\"percent_rank\", {[](const std::string & name,\n+    factory.registerFunction(\"percentRank\", {[](const std::string & name,\n             const DataTypes & argument_types, const Array & parameters, const Settings *)\n         {\n             return std::make_shared<WindowFunctionPercentRank>(name, argument_types,\n                 parameters);\n-        }, properties}, AggregateFunctionFactory::Case::Insensitive);\n+        }, properties});\n+\n+    factory.registerAlias(\"percent_rank\", \"percentRank\", AggregateFunctionFactory::Case::Insensitive);\n \n     factory.registerFunction(\"row_number\", {[](const std::string & name,\n             const DataTypes & argument_types, const Array & parameters, const Settings *)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03213_denseRank_percentRank_alias.reference b/tests/queries/0_stateless/03213_denseRank_percentRank_alias.reference\nnew file mode 100644\nindex 000000000000..b49e179df687\n--- /dev/null\n+++ b/tests/queries/0_stateless/03213_denseRank_percentRank_alias.reference\n@@ -0,0 +1,45 @@\n+---- denseRank() ----\n+0\t0\t0\t1\t1\t1\t1\n+3\t0\t0\t2\t2\t2\t2\n+1\t0\t1\t3\t3\t3\t3\n+4\t0\t1\t4\t4\t4\t4\n+2\t0\t2\t5\t5\t5\t5\n+6\t1\t0\t1\t1\t1\t1\n+9\t1\t0\t2\t2\t2\t2\n+7\t1\t1\t3\t3\t3\t3\n+5\t1\t2\t4\t4\t4\t4\n+8\t1\t2\t5\t5\t5\t5\n+12\t2\t0\t1\t1\t1\t1\n+10\t2\t1\t2\t2\t2\t2\n+13\t2\t1\t3\t3\t3\t3\n+11\t2\t2\t4\t4\t4\t4\n+14\t2\t2\t5\t5\t5\t5\n+15\t3\t0\t1\t1\t1\t1\n+18\t3\t0\t2\t2\t2\t2\n+16\t3\t1\t3\t3\t3\t3\n+19\t3\t1\t4\t4\t4\t4\n+17\t3\t2\t5\t5\t5\t5\n+21\t4\t0\t1\t1\t1\t1\n+24\t4\t0\t2\t2\t2\t2\n+22\t4\t1\t3\t3\t3\t3\n+20\t4\t2\t4\t4\t4\t4\n+23\t4\t2\t5\t5\t5\t5\n+27\t5\t0\t1\t1\t1\t1\n+25\t5\t1\t2\t2\t2\t2\n+28\t5\t1\t3\t3\t3\t3\n+26\t5\t2\t4\t4\t4\t4\n+29\t5\t2\t5\t5\t5\t5\n+30\t6\t0\t1\t1\t1\t1\n+---- percentRank() ----\n+Lenovo Thinkpad\tLaptop\t700\t1\t0\n+Sony VAIO\tLaptop\t700\t1\t0\n+Dell Vostro\tLaptop\t800\t3\t0.6666666666666666\n+HP Elite\tLaptop\t1200\t4\t1\n+Microsoft Lumia\tSmartphone\t200\t1\t0\n+HTC One\tSmartphone\t400\t2\t0.3333333333333333\n+Nexus\tSmartphone\t500\t3\t0.6666666666666666\n+iPhone\tSmartphone\t900\t4\t1\n+Kindle Fire\tTablet\t150\t1\t0\n+Samsung Galaxy Tab\tTablet\t200\t2\t0.5\n+iPad\tTablet\t700\t3\t1\n+Others\tUnknow\t200\t1\t0\ndiff --git a/tests/queries/0_stateless/03213_denseRank_percentRank_alias.sql b/tests/queries/0_stateless/03213_denseRank_percentRank_alias.sql\nnew file mode 100644\nindex 000000000000..ff841294eb18\n--- /dev/null\n+++ b/tests/queries/0_stateless/03213_denseRank_percentRank_alias.sql\n@@ -0,0 +1,59 @@\n+-- https://github.com/ClickHouse/ClickHouse/issues/67042\n+-- Reference generated using percent_rank() and dense_rank()\n+\n+-- From ClickHouse/tests/queries/0_stateless/01591_window_functions.sql  (for deterministic query)\n+SELECT '---- denseRank() ----';\n+select number, p, o,\n+    count(*) over w,\n+    rank() over w,\n+    denseRank() over w,\n+    row_number() over w\n+from (select number, intDiv(number, 5) p, mod(number, 3) o\n+    from numbers(31) order by o, number) t\n+window w as (partition by p order by o, number)\n+order by p, o, number\n+settings max_block_size = 2;\n+\n+-- Modifed from ClickHouse/tests/queries/0_stateless/01592_window_functions.sql (for deterministic query)\n+SELECT '---- percentRank() ----';\n+\n+drop table if exists product_groups;\n+drop table if exists products;\n+\n+CREATE TABLE product_groups (\n+\tgroup_id Int64,\n+\tgroup_name String\n+) Engine = Memory;\n+\n+CREATE TABLE products (\n+\tproduct_id Int64,\n+\tproduct_name String,\n+\tprice DECIMAL(11, 2),\n+\tgroup_id Int64\n+) Engine = Memory;\n+\n+INSERT INTO product_groups  VALUES\t(1, 'Smartphone'),(2, 'Laptop'),(3, 'Tablet');\n+INSERT INTO products (product_id,product_name, group_id,price) VALUES (1, 'Microsoft Lumia', 1, 200), (2, 'HTC One', 1, 400), (3, 'Nexus', 1, 500), (4, 'iPhone', 1, 900),(5, 'HP Elite', 2, 1200),(6, 'Lenovo Thinkpad', 2, 700),(7, 'Sony VAIO', 2, 700),(8, 'Dell Vostro', 2, 800),(9, 'iPad', 3, 700),(10, 'Kindle Fire', 3, 150),(11, 'Samsung Galaxy Tab', 3, 200);\n+INSERT INTO product_groups  VALUES\t(4, 'Unknow');\n+INSERT INTO products (product_id,product_name, group_id,price) VALUES (12, 'Others', 4, 200);\n+\n+\n+SELECT *\n+FROM\n+(\n+    SELECT\n+        product_name,\n+        group_name,\n+        price,\n+        rank() OVER (PARTITION BY group_name ORDER BY price ASC) AS rank,\n+        percentRank() OVER (PARTITION BY group_name ORDER BY price ASC) AS percent\n+    FROM products\n+    INNER JOIN product_groups USING (group_id)\n+) AS t\n+ORDER BY\n+    group_name ASC,\n+    price ASC,\n+    product_name ASC;\n+\n+drop table product_groups;\n+drop table products;\n",
  "problem_statement": "Introduce camelCase aliases for dense_rank, percent_rank\nThese window functions are defined in SQL:2003 with underscores but in CH function names follow camelCase.\r\n\r\nIntroduce aliases:\r\n* dense_rank -> denseRank\r\n* percent_rank -> percentRank\n",
  "hints_text": "Hi! I would like to pick this issue, could you give me some more information about it if it's possible?\nI'm on it. I did some searching around the repo and I'm pretty sure I know how to do this. I just need time to test the code and get my environment setup since this would be my first contribution.",
  "created_at": "2024-07-29T01:42:19Z"
}