{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25290,
  "instance_id": "ClickHouse__ClickHouse-25290",
  "issue_numbers": [
    "25187"
  ],
  "base_commit": "e2ecc51a1f4b837296a70fc385a3f97de3d9476d",
  "patch": "diff --git a/src/Functions/in.cpp b/src/Functions/in.cpp\nindex 827e02123961..7cd9f64004dd 100644\n--- a/src/Functions/in.cpp\n+++ b/src/Functions/in.cpp\n@@ -3,10 +3,12 @@\n #include <Functions/FunctionHelpers.h>\n #include <DataTypes/DataTypeTuple.h>\n #include <DataTypes/DataTypesNumber.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n #include <Columns/ColumnConst.h>\n #include <Columns/ColumnsNumber.h>\n #include <Columns/ColumnTuple.h>\n #include <Columns/ColumnSet.h>\n+#include <Columns/ColumnLowCardinality.h>\n #include <Interpreters/Set.h>\n \n \n@@ -67,6 +69,12 @@ class FunctionIn : public IFunction\n         return 2;\n     }\n \n+    /// Do not use default implementation for LowCardinality.\n+    /// For now, Set may be const or non const column, depending on how it was created.\n+    /// But we will return UInt8 for any case.\n+    /// TODO: we could use special implementation later.\n+    bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }\n+\n     DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override\n     {\n         return std::make_shared<DataTypeUInt8>();\n@@ -122,7 +130,29 @@ class FunctionIn : public IFunction\n         else\n             columns_of_key_columns.insert(left_arg);\n \n-        return set->execute(columns_of_key_columns, negative);\n+        /// Replace single LowCardinality column to it's dictionary if possible.\n+        ColumnPtr lc_indexes = nullptr;\n+        if (columns_of_key_columns.columns() == 1)\n+        {\n+            auto & arg = columns_of_key_columns.safeGetByPosition(0);\n+            const auto * col = arg.column.get();\n+            if (const auto * const_col = typeid_cast<const ColumnConst *>(col))\n+                col = &const_col->getDataColumn();\n+\n+            if (const auto * lc = typeid_cast<const ColumnLowCardinality *>(col))\n+            {\n+                lc_indexes = lc->getIndexesPtr();\n+                arg.column = lc->getDictionary().getNestedColumn();\n+                arg.type = removeLowCardinality(arg.type);\n+            }\n+        }\n+\n+        auto res = set->execute(columns_of_key_columns, negative);\n+\n+        if (lc_indexes)\n+            return res->index(*lc_indexes, 0);\n+\n+        return res;\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01906_lc_in_bug.reference b/tests/queries/0_stateless/01906_lc_in_bug.reference\nnew file mode 100644\nindex 000000000000..9fe1650abf0f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01906_lc_in_bug.reference\n@@ -0,0 +1,2 @@\n+1\t0\n+3\t1\ndiff --git a/tests/queries/0_stateless/01906_lc_in_bug.sql b/tests/queries/0_stateless/01906_lc_in_bug.sql\nnew file mode 100644\nindex 000000000000..f8f41da31ae8\n--- /dev/null\n+++ b/tests/queries/0_stateless/01906_lc_in_bug.sql\n@@ -0,0 +1,8 @@\n+drop table if exists tab;\n+create table tab (x LowCardinality(String)) engine = MergeTree order by tuple();\n+\n+insert into tab values ('a'), ('bb'), ('a'), ('cc');\n+\n+select count() as c, x in ('a', 'bb') as g from tab group by g order by c;\n+\n+drop table if exists tab;\n",
  "problem_statement": "PREWHERE and LowCardinality IN set do not work together\n```\r\nmilovidov-desktop :) SELECT * FROM (SELECT 'Hello' AS x) PREWHERE toLowCardinality(x) IN ('Hello', 'World')\r\n\r\nSELECT *\r\nFROM\r\n(\r\n    SELECT 'Hello' AS x\r\n)\r\nPREWHERE toLowCardinality(x) IN ('Hello', 'World')\r\n\r\nQuery id: 58d92e01-c67e-4bcc-8b0c-788bb5e1287e\r\n\r\n\r\n0 rows in set. Elapsed: 0.037 sec. \r\n\r\nReceived exception from server (version 21.7.1):\r\nCode: 182. DB::Exception: Received from localhost:9000. DB::Exception: Illegal PREWHERE. \r\n\r\nmilovidov-desktop :) SELECT * FROM (SELECT toLowCardinality('Hello') AS x) PREWHERE x IN ('Hello', 'World')\r\n\r\nSELECT *\r\nFROM\r\n(\r\n    SELECT toLowCardinality('Hello') AS x\r\n)\r\nPREWHERE x IN ('Hello', 'World')\r\n\r\nQuery id: 694bbad9-d228-47b8-ad60-c037005c7ee2\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nReceived exception from server (version 21.7.1):\r\nCode: 182. DB::Exception: Received from localhost:9000. DB::Exception: Illegal PREWHERE. \r\n\r\nmilovidov-desktop :) SELECT * FROM (SELECT toLowCardinality(materialize('Hello')) AS x) PREWHERE x IN ('Hello', 'World')\r\n\r\nSELECT *\r\nFROM\r\n(\r\n    SELECT toLowCardinality(materialize('Hello')) AS x\r\n)\r\nPREWHERE x IN ('Hello', 'World')\r\n\r\nQuery id: fc271924-c17c-457c-8cf8-21d0515388b7\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nReceived exception from server (version 21.7.1):\r\nCode: 182. DB::Exception: Received from localhost:9000. DB::Exception: Illegal PREWHERE.\r\n```\n",
  "hints_text": "21.6 and 21.7 cannot execute the following query on GitHub dataset:\r\n\r\n```\r\nSELECT\r\n    actor_login IN ('alexey-milovidov', 'alesapin', 'blinkov', 'KochetovNicolai', 'akuzm', 'abyss7', '4ertus2', 'vitlibar', 'CurtizJ', 'tavplubix', 'nikitamikhaylov', 'qoega', 'Akazz', 'Jokser', 'millb', 'stavrolia', 'zlobober', 'proller', 'Alex-Burmak', 'kitaisreal') AS internal,\r\n    count()\r\nFROM github_events\r\nWHERE (repo_name = 'ClickHouse/ClickHouse') AND (event_type = 'PullRequestEvent') AND (action = 'opened') AND (actor_login NOT IN ('robot-clickhouse', 'dependabot-preview[bot]', 'imgbot[bot]'))\r\nGROUP BY internal\r\n    WITH TOTALS\r\nORDER BY count() DESC\r\n\r\nQuery id: bf8d3548-69c1-446c-b278-f0c9ba8a8bc2\r\n\r\n\r\n0 rows in set. Elapsed: 0.039 sec. \r\n\r\nReceived exception from server (version 21.7.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Bad cast from type DB::ColumnLowCardinality to DB::ColumnVector<char8_t>.\r\n```\n21.5 is Ok.",
  "created_at": "2021-06-15T09:56:01Z"
}