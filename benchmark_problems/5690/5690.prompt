You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Named windows should respect scope
### What happens?

Initially raised in https://github.com/duckdb/duckdb/discussions/5607.

Named windows are accessible globally, not just in the CTE that they're used in, and as such window names must also be globally unique. I expected that they would be local to usage (CTE or subquery).

### To Reproduce

This example shows the requirement for global uniqueness, failing because `my_window` was declared twice.

```sql
CREATE TABLE a (id INT);

WITH
  cte_a AS (
    SELECT *
    FROM a
    WINDOW my_window AS ()
  ),
  cte_b AS (
    SELECT *
    FROM a
    WINDOW my_window AS ()
  )

SELECT *
FROM cte_a CROSS JOIN cte_b;
```

This example shows global availability, using a named window from one CTE in another.

```sql
CREATE TABLE a (id INT);

WITH
  cte_a AS (
    SELECT *
    FROM a
    WINDOW my_window AS ()
  ),
  cte_b AS (
    SELECT *, COUNT(*) OVER my_window AS n_rows,
    FROM a
  )

SELECT *
FROM cte_a CROSS JOIN cte_b;
```

### OS:

Ubuntu 22.04.1 LTS

### DuckDB Version:

v0.6.0 2213f9c946

### DuckDB Client:

DuckDB CLI

### Full Name:

Liam O'Boyle

### Affiliation:

Not using DuckDB in a work context (at the moment), but I am employed by https://github.com/raywhite.

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/parser/transform/helpers/transform_cte.cpp]
1: #include "duckdb/parser/transformer.hpp"
2: #include "duckdb/common/enums/set_operation_type.hpp"
3: #include "duckdb/common/exception.hpp"
4: #include "duckdb/parser/statement/select_statement.hpp"
5: #include "duckdb/parser/query_node/recursive_cte_node.hpp"
6: 
7: namespace duckdb {
8: 
9: void Transformer::TransformCTE(duckdb_libpgquery::PGWithClause *de_with_clause, CommonTableExpressionMap &cte_map) {
10: 	// TODO: might need to update in case of future lawsuit
11: 	D_ASSERT(de_with_clause);
12: 
13: 	D_ASSERT(de_with_clause->ctes);
14: 	for (auto cte_ele = de_with_clause->ctes->head; cte_ele != nullptr; cte_ele = cte_ele->next) {
15: 		auto info = make_unique<CommonTableExpressionInfo>();
16: 
17: 		auto cte = reinterpret_cast<duckdb_libpgquery::PGCommonTableExpr *>(cte_ele->data.ptr_value);
18: 		if (cte->aliascolnames) {
19: 			for (auto node = cte->aliascolnames->head; node != nullptr; node = node->next) {
20: 				info->aliases.emplace_back(
21: 				    reinterpret_cast<duckdb_libpgquery::PGValue *>(node->data.ptr_value)->val.str);
22: 			}
23: 		}
24: 		// lets throw some errors on unsupported features early
25: 		if (cte->ctecolnames) {
26: 			throw NotImplementedException("Column name setting not supported in CTEs");
27: 		}
28: 		if (cte->ctecoltypes) {
29: 			throw NotImplementedException("Column type setting not supported in CTEs");
30: 		}
31: 		if (cte->ctecoltypmods) {
32: 			throw NotImplementedException("Column type modification not supported in CTEs");
33: 		}
34: 		if (cte->ctecolcollations) {
35: 			throw NotImplementedException("CTE collations not supported");
36: 		}
37: 		// we need a query
38: 		if (!cte->ctequery || cte->ctequery->type != duckdb_libpgquery::T_PGSelectStmt) {
39: 			throw NotImplementedException("A CTE needs a SELECT");
40: 		}
41: 
42: 		// CTE transformation can either result in inlining for non recursive CTEs, or in recursive CTE bindings
43: 		// otherwise.
44: 		if (cte->cterecursive || de_with_clause->recursive) {
45: 			info->query = TransformRecursiveCTE(cte, *info);
46: 		} else {
47: 			info->query = TransformSelect(cte->ctequery);
48: 		}
49: 		D_ASSERT(info->query);
50: 		auto cte_name = string(cte->ctename);
51: 
52: 		auto it = cte_map.map.find(cte_name);
53: 		if (it != cte_map.map.end()) {
54: 			// can't have two CTEs with same name
55: 			throw ParserException("Duplicate CTE name \"%s\"", cte_name);
56: 		}
57: 		cte_map.map[cte_name] = move(info);
58: 	}
59: }
60: 
61: unique_ptr<SelectStatement> Transformer::TransformRecursiveCTE(duckdb_libpgquery::PGCommonTableExpr *cte,
62:                                                                CommonTableExpressionInfo &info) {
63: 	auto stmt = (duckdb_libpgquery::PGSelectStmt *)cte->ctequery;
64: 
65: 	unique_ptr<SelectStatement> select;
66: 	switch (stmt->op) {
67: 	case duckdb_libpgquery::PG_SETOP_UNION:
68: 	case duckdb_libpgquery::PG_SETOP_EXCEPT:
69: 	case duckdb_libpgquery::PG_SETOP_INTERSECT: {
70: 		select = make_unique<SelectStatement>();
71: 		select->node = make_unique_base<QueryNode, RecursiveCTENode>();
72: 		auto result = (RecursiveCTENode *)select->node.get();
73: 		result->ctename = string(cte->ctename);
74: 		result->union_all = stmt->all;
75: 		result->left = TransformSelectNode(stmt->larg);
76: 		result->right = TransformSelectNode(stmt->rarg);
77: 		result->aliases = info.aliases;
78: 
79: 		D_ASSERT(result->left);
80: 		D_ASSERT(result->right);
81: 
82: 		if (stmt->op != duckdb_libpgquery::PG_SETOP_UNION) {
83: 			throw ParserException("Unsupported setop type for recursive CTE: only UNION or UNION ALL are supported");
84: 		}
85: 		break;
86: 	}
87: 	default:
88: 		// This CTE is not recursive. Fallback to regular query transformation.
89: 		return TransformSelect(cte->ctequery);
90: 	}
91: 
92: 	if (stmt->limitCount || stmt->limitOffset) {
93: 		throw ParserException("LIMIT or OFFSET in a recursive query is not allowed");
94: 	}
95: 	if (stmt->sortClause) {
96: 		throw ParserException("ORDER BY in a recursive query is not allowed");
97: 	}
98: 	return select;
99: }
100: 
101: } // namespace duckdb
[end of src/parser/transform/helpers/transform_cte.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: