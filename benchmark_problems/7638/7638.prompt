You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
`list` aggregate function distinct order by combination breaking
### What happens?

The `list` aggregate function throws an error when distinct and order by are combined:
```
Invalid Input Error: Function "list_sort" is a Scalar Function. "DISTINCT", "FILTER", and "ORDER BY" are only applicable to aggregate functions.
```

This only seems to happen when the `order by` hits the same column as the `distinct`. See the bottom two examples below.

### To Reproduce

```sql
-- WORKS
select id, list(distinct foo) from (
  values (1, '10'), (1, '15'), (2, '10')
) v (id, foo)
group by all;
```

```sql
-- WORKS
select id, list(foo order by foo) from (
  values (1, '10'), (1, '15'), (2, '10')
) v (id, foo)
group by all;
```

```sql
-- BREAKS
select id, list(distinct foo order by foo) from (
  values (1, '10'), (1, '15'), (2, '10')
) v (id, foo)
group by all;
```

```sql
-- WORKS
select id, list(distinct foo order by bar) from (
  values (1, '10', 1), (1, '15', 2), (2, '10', 1)
) v (id, foo, bar)
group by all;
```

### OS:

Mac

### DuckDB Version:

0.8 (also master)

### DuckDB Client:

Python

### Full Name:

James McNeill

### Affiliation:

Conjura

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
11:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
12:   </a>
13:   <a href="https://discord.gg/tcvwpjfnZx">
14:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
15:   </a>
16:   <a href="https://github.com/duckdb/duckdb/releases/">
17:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/parser/transform/expression/transform_function.cpp]
1: #include "duckdb/common/enum_util.hpp"
2: #include "duckdb/common/string_util.hpp"
3: #include "duckdb/common/to_string.hpp"
4: #include "duckdb/parser/expression/case_expression.hpp"
5: #include "duckdb/parser/expression/cast_expression.hpp"
6: #include "duckdb/parser/expression/constant_expression.hpp"
7: #include "duckdb/parser/expression/function_expression.hpp"
8: 
9: #include "duckdb/parser/expression/operator_expression.hpp"
10: #include "duckdb/parser/expression/star_expression.hpp"
11: #include "duckdb/parser/expression/window_expression.hpp"
12: #include "duckdb/parser/transformer.hpp"
13: 
14: namespace duckdb {
15: 
16: void Transformer::TransformWindowDef(duckdb_libpgquery::PGWindowDef &window_spec, WindowExpression &expr,
17:                                      const char *window_name) {
18: 	// next: partitioning/ordering expressions
19: 	if (window_spec.partitionClause) {
20: 		if (window_name && !expr.partitions.empty()) {
21: 			throw ParserException("Cannot override PARTITION BY clause of window \"%s\"", window_name);
22: 		}
23: 		TransformExpressionList(*window_spec.partitionClause, expr.partitions);
24: 	}
25: 	if (window_spec.orderClause) {
26: 		if (window_name && !expr.orders.empty()) {
27: 			throw ParserException("Cannot override ORDER BY clause of window \"%s\"", window_name);
28: 		}
29: 		TransformOrderBy(window_spec.orderClause, expr.orders);
30: 	}
31: }
32: 
33: void Transformer::TransformWindowFrame(duckdb_libpgquery::PGWindowDef &window_spec, WindowExpression &expr) {
34: 	// finally: specifics of bounds
35: 	expr.start_expr = TransformExpression(window_spec.startOffset);
36: 	expr.end_expr = TransformExpression(window_spec.endOffset);
37: 
38: 	if ((window_spec.frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING) ||
39: 	    (window_spec.frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)) {
40: 		throw InternalException(
41: 		    "Window frames starting with unbounded following or ending in unbounded preceding make no sense");
42: 	}
43: 
44: 	const bool rangeMode = (window_spec.frameOptions & FRAMEOPTION_RANGE) != 0;
45: 	if (window_spec.frameOptions & FRAMEOPTION_START_UNBOUNDED_PRECEDING) {
46: 		expr.start = WindowBoundary::UNBOUNDED_PRECEDING;
47: 	} else if (window_spec.frameOptions & FRAMEOPTION_START_VALUE_PRECEDING) {
48: 		expr.start = rangeMode ? WindowBoundary::EXPR_PRECEDING_RANGE : WindowBoundary::EXPR_PRECEDING_ROWS;
49: 	} else if (window_spec.frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) {
50: 		expr.start = rangeMode ? WindowBoundary::EXPR_FOLLOWING_RANGE : WindowBoundary::EXPR_FOLLOWING_ROWS;
51: 	} else if (window_spec.frameOptions & FRAMEOPTION_START_CURRENT_ROW) {
52: 		expr.start = rangeMode ? WindowBoundary::CURRENT_ROW_RANGE : WindowBoundary::CURRENT_ROW_ROWS;
53: 	}
54: 
55: 	if (window_spec.frameOptions & FRAMEOPTION_END_UNBOUNDED_FOLLOWING) {
56: 		expr.end = WindowBoundary::UNBOUNDED_FOLLOWING;
57: 	} else if (window_spec.frameOptions & FRAMEOPTION_END_VALUE_PRECEDING) {
58: 		expr.end = rangeMode ? WindowBoundary::EXPR_PRECEDING_RANGE : WindowBoundary::EXPR_PRECEDING_ROWS;
59: 	} else if (window_spec.frameOptions & FRAMEOPTION_END_VALUE_FOLLOWING) {
60: 		expr.end = rangeMode ? WindowBoundary::EXPR_FOLLOWING_RANGE : WindowBoundary::EXPR_FOLLOWING_ROWS;
61: 	} else if (window_spec.frameOptions & FRAMEOPTION_END_CURRENT_ROW) {
62: 		expr.end = rangeMode ? WindowBoundary::CURRENT_ROW_RANGE : WindowBoundary::CURRENT_ROW_ROWS;
63: 	}
64: 
65: 	D_ASSERT(expr.start != WindowBoundary::INVALID && expr.end != WindowBoundary::INVALID);
66: 	if (((window_spec.frameOptions & (FRAMEOPTION_START_VALUE_PRECEDING | FRAMEOPTION_START_VALUE_FOLLOWING)) &&
67: 	     !expr.start_expr) ||
68: 	    ((window_spec.frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING | FRAMEOPTION_END_VALUE_FOLLOWING)) &&
69: 	     !expr.end_expr)) {
70: 		throw InternalException("Failed to transform window boundary expression");
71: 	}
72: }
73: 
74: bool Transformer::ExpressionIsEmptyStar(ParsedExpression &expr) {
75: 	if (expr.expression_class != ExpressionClass::STAR) {
76: 		return false;
77: 	}
78: 	auto &star = expr.Cast<StarExpression>();
79: 	if (!star.columns && star.exclude_list.empty() && star.replace_list.empty()) {
80: 		return true;
81: 	}
82: 	return false;
83: }
84: 
85: bool Transformer::InWindowDefinition() {
86: 	if (in_window_definition) {
87: 		return true;
88: 	}
89: 	if (parent) {
90: 		return parent->InWindowDefinition();
91: 	}
92: 	return false;
93: }
94: 
95: unique_ptr<ParsedExpression> Transformer::TransformFuncCall(duckdb_libpgquery::PGFuncCall &root) {
96: 	auto name = root.funcname;
97: 	string catalog, schema, function_name;
98: 	if (name->length == 3) {
99: 		// catalog + schema + name
100: 		catalog = PGPointerCast<duckdb_libpgquery::PGValue>(name->head->data.ptr_value)->val.str;
101: 		schema = PGPointerCast<duckdb_libpgquery::PGValue>(name->head->next->data.ptr_value)->val.str;
102: 		function_name = PGPointerCast<duckdb_libpgquery::PGValue>(name->head->next->next->data.ptr_value)->val.str;
103: 	} else if (name->length == 2) {
104: 		// schema + name
105: 		catalog = INVALID_CATALOG;
106: 		schema = PGPointerCast<duckdb_libpgquery::PGValue>(name->head->data.ptr_value)->val.str;
107: 		function_name = PGPointerCast<duckdb_libpgquery::PGValue>(name->head->next->data.ptr_value)->val.str;
108: 	} else if (name->length == 1) {
109: 		// unqualified name
110: 		catalog = INVALID_CATALOG;
111: 		schema = INVALID_SCHEMA;
112: 		function_name = PGPointerCast<duckdb_libpgquery::PGValue>(name->head->data.ptr_value)->val.str;
113: 	} else {
114: 		throw ParserException("TransformFuncCall - Expected 1, 2 or 3 qualifications");
115: 	}
116: 
117: 	//  transform children
118: 	vector<unique_ptr<ParsedExpression>> children;
119: 	if (root.args) {
120: 		TransformExpressionList(*root.args, children);
121: 	}
122: 	if (children.size() == 1 && ExpressionIsEmptyStar(*children[0]) && !root.agg_distinct && !root.agg_order) {
123: 		// COUNT(*) gets translated into COUNT()
124: 		children.clear();
125: 	}
126: 
127: 	auto lowercase_name = StringUtil::Lower(function_name);
128: 	if (root.over) {
129: 		if (InWindowDefinition()) {
130: 			throw ParserException("window functions are not allowed in window definitions");
131: 		}
132: 
133: 		const auto win_fun_type = WindowExpression::WindowToExpressionType(lowercase_name);
134: 		if (win_fun_type == ExpressionType::INVALID) {
135: 			throw InternalException("Unknown/unsupported window function");
136: 		}
137: 
138: 		if (root.agg_distinct) {
139: 			throw ParserException("DISTINCT is not implemented for window functions!");
140: 		}
141: 
142: 		if (root.agg_order) {
143: 			throw ParserException("ORDER BY is not implemented for window functions!");
144: 		}
145: 
146: 		if (win_fun_type != ExpressionType::WINDOW_AGGREGATE && root.agg_filter) {
147: 			throw ParserException("FILTER is not implemented for non-aggregate window functions!");
148: 		}
149: 		if (root.export_state) {
150: 			throw ParserException("EXPORT_STATE is not supported for window functions!");
151: 		}
152: 
153: 		if (win_fun_type == ExpressionType::WINDOW_AGGREGATE && root.agg_ignore_nulls) {
154: 			throw ParserException("IGNORE NULLS is not supported for windowed aggregates");
155: 		}
156: 
157: 		auto expr = make_uniq<WindowExpression>(win_fun_type, std::move(catalog), std::move(schema), lowercase_name);
158: 		expr->ignore_nulls = root.agg_ignore_nulls;
159: 
160: 		if (root.agg_filter) {
161: 			auto filter_expr = TransformExpression(root.agg_filter);
162: 			expr->filter_expr = std::move(filter_expr);
163: 		}
164: 
165: 		if (win_fun_type == ExpressionType::WINDOW_AGGREGATE) {
166: 			expr->children = std::move(children);
167: 		} else {
168: 			if (!children.empty()) {
169: 				expr->children.push_back(std::move(children[0]));
170: 			}
171: 			if (win_fun_type == ExpressionType::WINDOW_LEAD || win_fun_type == ExpressionType::WINDOW_LAG) {
172: 				if (children.size() > 1) {
173: 					expr->offset_expr = std::move(children[1]);
174: 				}
175: 				if (children.size() > 2) {
176: 					expr->default_expr = std::move(children[2]);
177: 				}
178: 				if (children.size() > 3) {
179: 					throw ParserException("Incorrect number of parameters for function %s", lowercase_name);
180: 				}
181: 			} else if (win_fun_type == ExpressionType::WINDOW_NTH_VALUE) {
182: 				if (children.size() > 1) {
183: 					expr->children.push_back(std::move(children[1]));
184: 				}
185: 				if (children.size() > 2) {
186: 					throw ParserException("Incorrect number of parameters for function %s", lowercase_name);
187: 				}
188: 			} else {
189: 				if (children.size() > 1) {
190: 					throw ParserException("Incorrect number of parameters for function %s", lowercase_name);
191: 				}
192: 			}
193: 		}
194: 		auto window_spec = PGPointerCast<duckdb_libpgquery::PGWindowDef>(root.over);
195: 		if (window_spec->name) {
196: 			auto it = window_clauses.find(StringUtil::Lower(string(window_spec->name)));
197: 			if (it == window_clauses.end()) {
198: 				throw ParserException("window \"%s\" does not exist", window_spec->name);
199: 			}
200: 			window_spec = it->second;
201: 			D_ASSERT(window_spec);
202: 		}
203: 		auto window_ref = window_spec;
204: 		auto window_name = window_ref->refname;
205: 		if (window_ref->refname) {
206: 			auto it = window_clauses.find(StringUtil::Lower(string(window_spec->refname)));
207: 			if (it == window_clauses.end()) {
208: 				throw ParserException("window \"%s\" does not exist", window_spec->refname);
209: 			}
210: 			window_ref = it->second;
211: 			D_ASSERT(window_ref);
212: 		}
213: 		in_window_definition = true;
214: 		TransformWindowDef(*window_ref, *expr);
215: 		if (window_ref != window_spec) {
216: 			TransformWindowDef(*window_spec, *expr, window_name);
217: 		}
218: 		TransformWindowFrame(*window_spec, *expr);
219: 		in_window_definition = false;
220: 		expr->query_location = root.location;
221: 		return std::move(expr);
222: 	}
223: 
224: 	if (root.agg_ignore_nulls) {
225: 		throw ParserException("IGNORE NULLS is not supported for non-window functions");
226: 	}
227: 
228: 	unique_ptr<ParsedExpression> filter_expr;
229: 	if (root.agg_filter) {
230: 		filter_expr = TransformExpression(root.agg_filter);
231: 	}
232: 
233: 	auto order_bys = make_uniq<OrderModifier>();
234: 	TransformOrderBy(root.agg_order, order_bys->orders);
235: 
236: 	// Ordered aggregates can be either WITHIN GROUP or after the function arguments
237: 	if (root.agg_within_group) {
238: 		//	https://www.postgresql.org/docs/current/functions-aggregate.html#FUNCTIONS-ORDEREDSET-TABLE
239: 		//  Since we implement "ordered aggregates" without sorting,
240: 		//  we map all the ones we support to the corresponding aggregate function.
241: 		if (order_bys->orders.size() != 1) {
242: 			throw ParserException("Cannot use multiple ORDER BY clauses with WITHIN GROUP");
243: 		}
244: 		if (lowercase_name == "percentile_cont") {
245: 			if (children.size() != 1) {
246: 				throw ParserException("Wrong number of arguments for PERCENTILE_CONT");
247: 			}
248: 			lowercase_name = "quantile_cont";
249: 		} else if (lowercase_name == "percentile_disc") {
250: 			if (children.size() != 1) {
251: 				throw ParserException("Wrong number of arguments for PERCENTILE_DISC");
252: 			}
253: 			lowercase_name = "quantile_disc";
254: 		} else if (lowercase_name == "mode") {
255: 			if (!children.empty()) {
256: 				throw ParserException("Wrong number of arguments for MODE");
257: 			}
258: 			lowercase_name = "mode";
259: 		} else {
260: 			throw ParserException("Unknown ordered aggregate \"%s\".", function_name);
261: 		}
262: 	}
263: 
264: 	// star gets eaten in the parser
265: 	if (lowercase_name == "count" && children.empty()) {
266: 		lowercase_name = "count_star";
267: 	}
268: 
269: 	if (lowercase_name == "if") {
270: 		if (children.size() != 3) {
271: 			throw ParserException("Wrong number of arguments to IF.");
272: 		}
273: 		auto expr = make_uniq<CaseExpression>();
274: 		CaseCheck check;
275: 		check.when_expr = std::move(children[0]);
276: 		check.then_expr = std::move(children[1]);
277: 		expr->case_checks.push_back(std::move(check));
278: 		expr->else_expr = std::move(children[2]);
279: 		return std::move(expr);
280: 	} else if (lowercase_name == "construct_array") {
281: 		auto construct_array = make_uniq<OperatorExpression>(ExpressionType::ARRAY_CONSTRUCTOR);
282: 		construct_array->children = std::move(children);
283: 		return std::move(construct_array);
284: 	} else if (lowercase_name == "ifnull") {
285: 		if (children.size() != 2) {
286: 			throw ParserException("Wrong number of arguments to IFNULL.");
287: 		}
288: 
289: 		//  Two-argument COALESCE
290: 		auto coalesce_op = make_uniq<OperatorExpression>(ExpressionType::OPERATOR_COALESCE);
291: 		coalesce_op->children.push_back(std::move(children[0]));
292: 		coalesce_op->children.push_back(std::move(children[1]));
293: 		return std::move(coalesce_op);
294: 	} else if (lowercase_name == "list" && order_bys->orders.size() == 1) {
295: 		// list(expr ORDER BY expr <sense> <nulls>) => list_sort(list(expr), <sense>, <nulls>)
296: 		if (children.size() != 1) {
297: 			throw ParserException("Wrong number of arguments to LIST.");
298: 		}
299: 		auto arg_expr = children[0].get();
300: 		auto &order_by = order_bys->orders[0];
301: 		if (arg_expr->Equals(*order_by.expression)) {
302: 			auto sense = make_uniq<ConstantExpression>(EnumUtil::ToChars(order_by.type));
303: 			auto nulls = make_uniq<ConstantExpression>(EnumUtil::ToChars(order_by.null_order));
304: 			order_bys = nullptr;
305: 			auto unordered = make_uniq<FunctionExpression>(catalog, schema, lowercase_name.c_str(), std::move(children),
306: 			                                               std::move(filter_expr), std::move(order_bys),
307: 			                                               root.agg_distinct, false, root.export_state);
308: 			lowercase_name = "list_sort";
309: 			order_bys.reset();   // NOLINT
310: 			filter_expr.reset(); // NOLINT
311: 			children.clear();    // NOLINT
312: 			children.emplace_back(std::move(unordered));
313: 			children.emplace_back(std::move(sense));
314: 			children.emplace_back(std::move(nulls));
315: 		}
316: 	}
317: 
318: 	auto function = make_uniq<FunctionExpression>(std::move(catalog), std::move(schema), lowercase_name.c_str(),
319: 	                                              std::move(children), std::move(filter_expr), std::move(order_bys),
320: 	                                              root.agg_distinct, false, root.export_state);
321: 	function->query_location = root.location;
322: 
323: 	return std::move(function);
324: }
325: 
326: unique_ptr<ParsedExpression> Transformer::TransformSQLValueFunction(duckdb_libpgquery::PGSQLValueFunction &node) {
327: 	throw InternalException("SQL value functions should not be emitted by the parser");
328: }
329: 
330: } // namespace duckdb
[end of src/parser/transform/expression/transform_function.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: