{
  "repo": "duckdb/duckdb",
  "pull_number": 4713,
  "instance_id": "duckdb__duckdb-4713",
  "issue_numbers": [
    "4475",
    "4475"
  ],
  "base_commit": "a5b74ff1cdd60c1a64c6a5ba41e57a2dc20336c0",
  "patch": "diff --git a/src/function/table/read_csv.cpp b/src/function/table/read_csv.cpp\nindex 45168baf57d8..2717dc261a34 100644\n--- a/src/function/table/read_csv.cpp\n+++ b/src/function/table/read_csv.cpp\n@@ -210,6 +210,7 @@ static void ReadCSVAddNamedParameters(TableFunction &table_function) {\n \ttable_function.named_parameters[\"skip\"] = LogicalType::BIGINT;\n \ttable_function.named_parameters[\"max_line_size\"] = LogicalType::VARCHAR;\n \ttable_function.named_parameters[\"maximum_line_size\"] = LogicalType::VARCHAR;\n+\ttable_function.named_parameters[\"ignore_errors\"] = LogicalType::BOOLEAN;\n }\n \n double CSVReaderProgress(ClientContext &context, const FunctionData *bind_data_p,\n",
  "test_patch": "diff --git a/test/sql/copy/csv/test_ignore_errors.test b/test/sql/copy/csv/test_ignore_errors.test\nindex 09f27214a285..9b28fce5cf1a 100644\n--- a/test/sql/copy/csv/test_ignore_errors.test\n+++ b/test/sql/copy/csv/test_ignore_errors.test\n@@ -24,6 +24,25 @@ SELECT * FROM integers AS too_little_columns\n statement ok\n DELETE FROM integers;\n \n+statement ok\n+INSERT INTO integers SELECT * FROM read_csv('test/sql/copy/csv/data/test/error_too_little.csv', columns={'i': 'INTEGER', 'j': 'INTEGER'}, header=1, ignore_errors=1)\n+\n+statement error\n+INSERT INTO integers SELECT * FROM read_csv('test/sql/copy/csv/data/test/error_too_little.csv', columns={'i': 'INTEGER'}, header=1)\n+\n+# not enough columns provided\n+query II\n+SELECT * FROM integers AS too_little_columns\n+----\n+1\t1\n+2\t2\n+3\t3\n+4\t4\n+5\t5\n+\n+statement ok\n+DELETE FROM integers;\n+\n statement ok\n COPY integers FROM 'test/sql/copy/csv/data/test/error_too_little_single.csv' (HEADER, IGNORE_ERRORS)\n \n",
  "problem_statement": "Features request - allow `IGNORE_ERRORS` parameters in `read_csv_auto` in cli mode\n# Summary\r\n\r\nallow `IGNORE_ERRORS` parameter in function `read_csv_auto`  such as \r\n\r\n```SQL\r\nSELECT * FROM read_csv_auto('some.csv', IGNORE_ERRORS=1);\r\n```\r\n\r\n# Justification\r\n\r\n#3464 allows `IGNORE_ERRORS` in csv reading functions, this feature could benefits greatly for those would like quick&dirty analysis on data without clean up the csv file first.\r\n\nFeatures request - allow `IGNORE_ERRORS` parameters in `read_csv_auto` in cli mode\n# Summary\r\n\r\nallow `IGNORE_ERRORS` parameter in function `read_csv_auto`  such as \r\n\r\n```SQL\r\nSELECT * FROM read_csv_auto('some.csv', IGNORE_ERRORS=1);\r\n```\r\n\r\n# Justification\r\n\r\n#3464 allows `IGNORE_ERRORS` in csv reading functions, this feature could benefits greatly for those would like quick&dirty analysis on data without clean up the csv file first.\r\n\n",
  "hints_text": "\n",
  "created_at": "2022-09-14T12:16:03Z"
}