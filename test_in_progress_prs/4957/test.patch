diff --git a/test/extension/load_extension.test b/test/extension/load_extension.test
index 5c4a47069bd4..957787d8960c 100644
--- a/test/extension/load_extension.test
+++ b/test/extension/load_extension.test
@@ -24,7 +24,7 @@ LOAD '__BUILD_DIRECTORY__/test/extension/loadable_extension_demo.duckdb_extensio
 query I
 SELECT hello('World');
 ----
-Hello, World
+10
 
 query I
 QUACK QUACK QUACK
diff --git a/test/extension/loadable_extension_demo.cpp b/test/extension/loadable_extension_demo.cpp
index 5021c7b169cb..e9db31333768 100644
--- a/test/extension/loadable_extension_demo.cpp
+++ b/test/extension/loadable_extension_demo.cpp
@@ -11,8 +11,8 @@ using namespace duckdb;
 //===--------------------------------------------------------------------===//
 // Scalar function
 //===--------------------------------------------------------------------===//
-inline string_t hello_fun(string_t what) {
-	return "Hello, " + what.GetString();
+inline int32_t hello_fun(string_t what) {
+	return what.GetSize() + 5;
 }
 
 inline void TestAliasHello(DataChunk &args, ExpressionState &state, Vector &result) {
@@ -225,8 +225,8 @@ DUCKDB_EXTENSION_API void loadable_extension_demo_init(duckdb::DatabaseInstance
 	auto &client_context = *con.context;
 	auto &catalog = Catalog::GetCatalog(client_context);
 	con.BeginTransaction();
-	con.CreateScalarFunction<string_t, string_t>("hello", {LogicalType(LogicalTypeId::VARCHAR)},
-	                                             LogicalType(LogicalTypeId::VARCHAR), &hello_fun);
+	con.CreateScalarFunction<int32_t, string_t>("hello", {LogicalType(LogicalTypeId::VARCHAR)},
+	                                            LogicalType(LogicalTypeId::INTEGER), &hello_fun);
 
 	catalog.CreateFunction(client_context, &hello_alias_info);
 
diff --git a/test/sql/aggregate/aggregates/test_arg_min_max_strings.test b/test/sql/aggregate/aggregates/test_arg_min_max_strings.test
index d680188a5326..a8e14a343012 100644
--- a/test/sql/aggregate/aggregates/test_arg_min_max_strings.test
+++ b/test/sql/aggregate/aggregates/test_arg_min_max_strings.test
@@ -2,6 +2,8 @@
 # description: Test arg_min/arg_max with strings
 # group: [aggregates]
 
+require strinline
+
 statement ok
 CREATE TABLE tbl(
 	"DATE" DATE,
diff --git a/test/sql/function/list/aggregates/mode.test b/test/sql/function/list/aggregates/mode.test
index 1e4b39ddb405..9c175dbb8542 100644
--- a/test/sql/function/list/aggregates/mode.test
+++ b/test/sql/function/list/aggregates/mode.test
@@ -2,6 +2,8 @@
 # description: Test the list_mode aggregate function
 # group: [aggregates]
 
+require strinline
+
 # incorrect usage
 statement error
 select list_mode()
diff --git a/test/sql/function/list/aggregates/types.test b/test/sql/function/list/aggregates/types.test
index 45b19a45a805..5e379d76202a 100644
--- a/test/sql/function/list/aggregates/types.test
+++ b/test/sql/function/list/aggregates/types.test
@@ -5,6 +5,8 @@
 # This file specifically tests the functionality for each type, 
 # it does not necessarily test the correctness (statement ok suffices for some tests)
 
+require strinline
+
 # BOOLEAN
 
 # result False
diff --git a/test/sql/function/string/test_ascii.test b/test/sql/function/string/test_ascii.test
index 1854d074d30a..fc914be3f2c4 100644
--- a/test/sql/function/string/test_ascii.test
+++ b/test/sql/function/string/test_ascii.test
@@ -2,8 +2,10 @@
 # description: test ascii() and chr() functions
 # group: [string]
 
-#statement ok
-#PRAGMA enable_verification
+require strinline
+
+statement ok
+PRAGMA enable_verification
 
 # Some ascii checks
 query I
diff --git a/test/sqlite/sqllogic_test_runner.cpp b/test/sqlite/sqllogic_test_runner.cpp
index 447e3675d67f..e1617c909d9b 100644
--- a/test/sqlite/sqllogic_test_runner.cpp
+++ b/test/sqlite/sqllogic_test_runner.cpp
@@ -473,6 +473,10 @@ void SQLLogicTestRunner::ExecuteFile(string script) {
 				if (TestForceStorage()) {
 					return;
 				}
+			} else if (param == "strinline") {
+#ifdef DUCKDB_DEBUG_NO_INLINE
+				return;
+#endif
 			} else if (param == "vector_size") {
 				if (token.parameters.size() != 2) {
 					parser.Fail("require vector_size requires a parameter");
