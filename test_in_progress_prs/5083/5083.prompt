You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Segfault on malformed CSV with variable length rows and carriage return newlines
### What happens?

We're seeing DuckDB fail with a segmentation fault when ingesting a CSV that has both:

- variable length rows
- carriage return newlines (`\r`)

I apologize for submitting such a ridiculous bug report, but we've actually encountered such a CSV in the wild.

### To Reproduce

This succeeds:

```bash
$ echo -n "a,b\nc,d,e" > foo.csv
$ duckdb -c "select * from 'foo.csv'"
```

This segfaults:

```bash
$ echo -n "a,b\rc,d,e" > foo.csv
$ duckdb -c "select * from 'foo.csv'"
```

### OS:

macOS 12.5.1

### DuckDB Version:

v0.5.1

### DuckDB Client:

CLI

### Full Name:

Benjamin Egelund-Müller

### Affiliation:

Rill Data

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree
Segfault on malformed CSV with variable length rows and carriage return newlines
### What happens?

We're seeing DuckDB fail with a segmentation fault when ingesting a CSV that has both:

- variable length rows
- carriage return newlines (`\r`)

I apologize for submitting such a ridiculous bug report, but we've actually encountered such a CSV in the wild.

### To Reproduce

This succeeds:

```bash
$ echo -n "a,b\nc,d,e" > foo.csv
$ duckdb -c "select * from 'foo.csv'"
```

This segfaults:

```bash
$ echo -n "a,b\rc,d,e" > foo.csv
$ duckdb -c "select * from 'foo.csv'"
```

### OS:

macOS 12.5.1

### DuckDB Version:

v0.5.1

### DuckDB Client:

CLI

### Full Name:

Benjamin Egelund-Müller

### Affiliation:

Rill Data

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/common/types/date.cpp]
1: #include "duckdb/common/types/date.hpp"
2: #include "duckdb/common/types/timestamp.hpp"
3: #include "duckdb/common/types/interval.hpp"
4: #include "duckdb/common/types/cast_helpers.hpp"
5: #include "duckdb/common/exception.hpp"
6: #include "duckdb/common/string_util.hpp"
7: #include "duckdb/common/assert.hpp"
8: #include "duckdb/common/operator/multiply.hpp"
9: #include "duckdb/common/limits.hpp"
10: 
11: #include <cstring>
12: #include <cctype>
13: #include <algorithm>
14: 
15: namespace duckdb {
16: 
17: static_assert(sizeof(date_t) == sizeof(int32_t), "date_t was padded");
18: 
19: const char *Date::PINF = "infinity";  // NOLINT
20: const char *Date::NINF = "-infinity"; // NOLINT
21: const char *Date::EPOCH = "epoch";    // NOLINT
22: 
23: const string_t Date::MONTH_NAMES_ABBREVIATED[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",
24:                                                   "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
25: const string_t Date::MONTH_NAMES[] = {"January", "February", "March",     "April",   "May",      "June",
26:                                       "July",    "August",   "September", "October", "November", "December"};
27: const string_t Date::DAY_NAMES[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
28: const string_t Date::DAY_NAMES_ABBREVIATED[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
29: 
30: const int32_t Date::NORMAL_DAYS[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
31: const int32_t Date::CUMULATIVE_DAYS[] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};
32: const int32_t Date::LEAP_DAYS[] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
33: const int32_t Date::CUMULATIVE_LEAP_DAYS[] = {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};
34: const int8_t Date::MONTH_PER_DAY_OF_YEAR[] = {
35:     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
36:     1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
37:     2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
38:     3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
39:     4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
40:     5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
41:     6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
42:     7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
43:     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
44:     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
45:     10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
46:     11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
47:     12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12};
48: const int8_t Date::LEAP_MONTH_PER_DAY_OF_YEAR[] = {
49:     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
50:     1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
51:     2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
52:     3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
53:     4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
54:     5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
55:     6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
56:     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
57:     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
58:     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
59:     10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
60:     11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
61:     12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12};
62: const int32_t Date::CUMULATIVE_YEAR_DAYS[] = {
63:     0,      365,    730,    1096,   1461,   1826,   2191,   2557,   2922,   3287,   3652,   4018,   4383,   4748,
64:     5113,   5479,   5844,   6209,   6574,   6940,   7305,   7670,   8035,   8401,   8766,   9131,   9496,   9862,
65:     10227,  10592,  10957,  11323,  11688,  12053,  12418,  12784,  13149,  13514,  13879,  14245,  14610,  14975,
66:     15340,  15706,  16071,  16436,  16801,  17167,  17532,  17897,  18262,  18628,  18993,  19358,  19723,  20089,
67:     20454,  20819,  21184,  21550,  21915,  22280,  22645,  23011,  23376,  23741,  24106,  24472,  24837,  25202,
68:     25567,  25933,  26298,  26663,  27028,  27394,  27759,  28124,  28489,  28855,  29220,  29585,  29950,  30316,
69:     30681,  31046,  31411,  31777,  32142,  32507,  32872,  33238,  33603,  33968,  34333,  34699,  35064,  35429,
70:     35794,  36160,  36525,  36890,  37255,  37621,  37986,  38351,  38716,  39082,  39447,  39812,  40177,  40543,
71:     40908,  41273,  41638,  42004,  42369,  42734,  43099,  43465,  43830,  44195,  44560,  44926,  45291,  45656,
72:     46021,  46387,  46752,  47117,  47482,  47847,  48212,  48577,  48942,  49308,  49673,  50038,  50403,  50769,
73:     51134,  51499,  51864,  52230,  52595,  52960,  53325,  53691,  54056,  54421,  54786,  55152,  55517,  55882,
74:     56247,  56613,  56978,  57343,  57708,  58074,  58439,  58804,  59169,  59535,  59900,  60265,  60630,  60996,
75:     61361,  61726,  62091,  62457,  62822,  63187,  63552,  63918,  64283,  64648,  65013,  65379,  65744,  66109,
76:     66474,  66840,  67205,  67570,  67935,  68301,  68666,  69031,  69396,  69762,  70127,  70492,  70857,  71223,
77:     71588,  71953,  72318,  72684,  73049,  73414,  73779,  74145,  74510,  74875,  75240,  75606,  75971,  76336,
78:     76701,  77067,  77432,  77797,  78162,  78528,  78893,  79258,  79623,  79989,  80354,  80719,  81084,  81450,
79:     81815,  82180,  82545,  82911,  83276,  83641,  84006,  84371,  84736,  85101,  85466,  85832,  86197,  86562,
80:     86927,  87293,  87658,  88023,  88388,  88754,  89119,  89484,  89849,  90215,  90580,  90945,  91310,  91676,
81:     92041,  92406,  92771,  93137,  93502,  93867,  94232,  94598,  94963,  95328,  95693,  96059,  96424,  96789,
82:     97154,  97520,  97885,  98250,  98615,  98981,  99346,  99711,  100076, 100442, 100807, 101172, 101537, 101903,
83:     102268, 102633, 102998, 103364, 103729, 104094, 104459, 104825, 105190, 105555, 105920, 106286, 106651, 107016,
84:     107381, 107747, 108112, 108477, 108842, 109208, 109573, 109938, 110303, 110669, 111034, 111399, 111764, 112130,
85:     112495, 112860, 113225, 113591, 113956, 114321, 114686, 115052, 115417, 115782, 116147, 116513, 116878, 117243,
86:     117608, 117974, 118339, 118704, 119069, 119435, 119800, 120165, 120530, 120895, 121260, 121625, 121990, 122356,
87:     122721, 123086, 123451, 123817, 124182, 124547, 124912, 125278, 125643, 126008, 126373, 126739, 127104, 127469,
88:     127834, 128200, 128565, 128930, 129295, 129661, 130026, 130391, 130756, 131122, 131487, 131852, 132217, 132583,
89:     132948, 133313, 133678, 134044, 134409, 134774, 135139, 135505, 135870, 136235, 136600, 136966, 137331, 137696,
90:     138061, 138427, 138792, 139157, 139522, 139888, 140253, 140618, 140983, 141349, 141714, 142079, 142444, 142810,
91:     143175, 143540, 143905, 144271, 144636, 145001, 145366, 145732, 146097};
92: 
93: void Date::ExtractYearOffset(int32_t &n, int32_t &year, int32_t &year_offset) {
94: 	year = Date::EPOCH_YEAR;
95: 	// first we normalize n to be in the year range [1970, 2370]
96: 	// since leap years repeat every 400 years, we can safely normalize just by "shifting" the CumulativeYearDays array
97: 	while (n < 0) {
98: 		n += Date::DAYS_PER_YEAR_INTERVAL;
99: 		year -= Date::YEAR_INTERVAL;
100: 	}
101: 	while (n >= Date::DAYS_PER_YEAR_INTERVAL) {
102: 		n -= Date::DAYS_PER_YEAR_INTERVAL;
103: 		year += Date::YEAR_INTERVAL;
104: 	}
105: 	// interpolation search
106: 	// we can find an upper bound of the year by assuming each year has 365 days
107: 	year_offset = n / 365;
108: 	// because of leap years we might be off by a little bit: compensate by decrementing the year offset until we find
109: 	// our year
110: 	while (n < Date::CUMULATIVE_YEAR_DAYS[year_offset]) {
111: 		year_offset--;
112: 		D_ASSERT(year_offset >= 0);
113: 	}
114: 	year += year_offset;
115: 	D_ASSERT(n >= Date::CUMULATIVE_YEAR_DAYS[year_offset]);
116: }
117: 
118: void Date::Convert(date_t d, int32_t &year, int32_t &month, int32_t &day) {
119: 	auto n = d.days;
120: 	int32_t year_offset;
121: 	Date::ExtractYearOffset(n, year, year_offset);
122: 
123: 	day = n - Date::CUMULATIVE_YEAR_DAYS[year_offset];
124: 	D_ASSERT(day >= 0 && day <= 365);
125: 
126: 	bool is_leap_year = (Date::CUMULATIVE_YEAR_DAYS[year_offset + 1] - Date::CUMULATIVE_YEAR_DAYS[year_offset]) == 366;
127: 	if (is_leap_year) {
128: 		month = Date::LEAP_MONTH_PER_DAY_OF_YEAR[day];
129: 		day -= Date::CUMULATIVE_LEAP_DAYS[month - 1];
130: 	} else {
131: 		month = Date::MONTH_PER_DAY_OF_YEAR[day];
132: 		day -= Date::CUMULATIVE_DAYS[month - 1];
133: 	}
134: 	day++;
135: 	D_ASSERT(day > 0 && day <= (is_leap_year ? Date::LEAP_DAYS[month] : Date::NORMAL_DAYS[month]));
136: 	D_ASSERT(month > 0 && month <= 12);
137: }
138: 
139: bool Date::TryFromDate(int32_t year, int32_t month, int32_t day, date_t &result) {
140: 	int32_t n = 0;
141: 	if (!Date::IsValid(year, month, day)) {
142: 		return false;
143: 	}
144: 	n += Date::IsLeapYear(year) ? Date::CUMULATIVE_LEAP_DAYS[month - 1] : Date::CUMULATIVE_DAYS[month - 1];
145: 	n += day - 1;
146: 	if (year < 1970) {
147: 		int32_t diff_from_base = 1970 - year;
148: 		int32_t year_index = 400 - (diff_from_base % 400);
149: 		int32_t fractions = diff_from_base / 400;
150: 		n += Date::CUMULATIVE_YEAR_DAYS[year_index];
151: 		n -= Date::DAYS_PER_YEAR_INTERVAL;
152: 		n -= fractions * Date::DAYS_PER_YEAR_INTERVAL;
153: 	} else if (year >= 2370) {
154: 		int32_t diff_from_base = year - 2370;
155: 		int32_t year_index = diff_from_base % 400;
156: 		int32_t fractions = diff_from_base / 400;
157: 		n += Date::CUMULATIVE_YEAR_DAYS[year_index];
158: 		n += Date::DAYS_PER_YEAR_INTERVAL;
159: 		n += fractions * Date::DAYS_PER_YEAR_INTERVAL;
160: 	} else {
161: 		n += Date::CUMULATIVE_YEAR_DAYS[year - 1970];
162: 	}
163: #ifdef DEBUG
164: 	int32_t y, m, d;
165: 	Date::Convert(date_t(n), y, m, d);
166: 	D_ASSERT(year == y);
167: 	D_ASSERT(month == m);
168: 	D_ASSERT(day == d);
169: #endif
170: 	result = date_t(n);
171: 	return true;
172: }
173: 
174: date_t Date::FromDate(int32_t year, int32_t month, int32_t day) {
175: 	date_t result;
176: 	if (!Date::TryFromDate(year, month, day, result)) {
177: 		throw ConversionException("Date out of range: %d-%d-%d", year, month, day);
178: 	}
179: 	return result;
180: }
181: 
182: bool Date::ParseDoubleDigit(const char *buf, idx_t len, idx_t &pos, int32_t &result) {
183: 	if (pos < len && StringUtil::CharacterIsDigit(buf[pos])) {
184: 		result = buf[pos++] - '0';
185: 		if (pos < len && StringUtil::CharacterIsDigit(buf[pos])) {
186: 			result = (buf[pos++] - '0') + result * 10;
187: 		}
188: 		return true;
189: 	}
190: 	return false;
191: }
192: 
193: static bool TryConvertDateSpecial(const char *buf, idx_t len, idx_t &pos, const char *special) {
194: 	auto p = pos;
195: 	for (; p < len && *special; ++p) {
196: 		const auto s = *special++;
197: 		if (!s || StringUtil::CharacterToLower(buf[p]) != s) {
198: 			return false;
199: 		}
200: 	}
201: 	pos = p;
202: 	return true;
203: }
204: 
205: bool Date::TryConvertDate(const char *buf, idx_t len, idx_t &pos, date_t &result, bool strict) {
206: 	pos = 0;
207: 	if (len == 0) {
208: 		return false;
209: 	}
210: 
211: 	int32_t day = 0;
212: 	int32_t month = -1;
213: 	int32_t year = 0;
214: 	bool yearneg = false;
215: 	int sep;
216: 
217: 	// skip leading spaces
218: 	while (pos < len && StringUtil::CharacterIsSpace(buf[pos])) {
219: 		pos++;
220: 	}
221: 
222: 	if (pos >= len) {
223: 		return false;
224: 	}
225: 	if (buf[pos] == '-') {
226: 		yearneg = true;
227: 		pos++;
228: 		if (pos >= len) {
229: 			return false;
230: 		}
231: 	}
232: 	if (!StringUtil::CharacterIsDigit(buf[pos])) {
233: 		// Check for special values
234: 		if (TryConvertDateSpecial(buf, len, pos, PINF)) {
235: 			result = yearneg ? date_t::ninfinity() : date_t::infinity();
236: 		} else if (TryConvertDateSpecial(buf, len, pos, EPOCH)) {
237: 			result = date_t::epoch();
238: 		} else {
239: 			return false;
240: 		}
241: 		// skip trailing spaces - parsing must be strict here
242: 		while (pos < len && StringUtil::CharacterIsSpace(buf[pos])) {
243: 			pos++;
244: 		}
245: 		return pos == len;
246: 	}
247: 	// first parse the year
248: 	for (; pos < len && StringUtil::CharacterIsDigit(buf[pos]); pos++) {
249: 		if (year >= 100000000) {
250: 			return false;
251: 		}
252: 		year = (buf[pos] - '0') + year * 10;
253: 	}
254: 	if (yearneg) {
255: 		year = -year;
256: 	}
257: 
258: 	if (pos >= len) {
259: 		return false;
260: 	}
261: 
262: 	// fetch the separator
263: 	sep = buf[pos++];
264: 	if (sep != ' ' && sep != '-' && sep != '/' && sep != '\\') {
265: 		// invalid separator
266: 		return false;
267: 	}
268: 
269: 	// parse the month
270: 	if (!Date::ParseDoubleDigit(buf, len, pos, month)) {
271: 		return false;
272: 	}
273: 
274: 	if (pos >= len) {
275: 		return false;
276: 	}
277: 
278: 	if (buf[pos++] != sep) {
279: 		return false;
280: 	}
281: 
282: 	if (pos >= len) {
283: 		return false;
284: 	}
285: 
286: 	// now parse the day
287: 	if (!Date::ParseDoubleDigit(buf, len, pos, day)) {
288: 		return false;
289: 	}
290: 
291: 	// check for an optional trailing " (BC)""
292: 	if (len - pos >= 5 && StringUtil::CharacterIsSpace(buf[pos]) && buf[pos + 1] == '(' &&
293: 	    StringUtil::CharacterToLower(buf[pos + 2]) == 'b' && StringUtil::CharacterToLower(buf[pos + 3]) == 'c' &&
294: 	    buf[pos + 4] == ')') {
295: 		if (yearneg || year == 0) {
296: 			return false;
297: 		}
298: 		year = -year + 1;
299: 		pos += 5;
300: 	}
301: 
302: 	// in strict mode, check remaining string for non-space characters
303: 	if (strict) {
304: 		// skip trailing spaces
305: 		while (pos < len && StringUtil::CharacterIsSpace((unsigned char)buf[pos])) {
306: 			pos++;
307: 		}
308: 		// check position. if end was not reached, non-space chars remaining
309: 		if (pos < len) {
310: 			return false;
311: 		}
312: 	} else {
313: 		// in non-strict mode, check for any direct trailing digits
314: 		if (pos < len && StringUtil::CharacterIsDigit((unsigned char)buf[pos])) {
315: 			return false;
316: 		}
317: 	}
318: 
319: 	return Date::TryFromDate(year, month, day, result);
320: }
321: 
322: string Date::ConversionError(const string &str) {
323: 	return StringUtil::Format("date field value out of range: \"%s\", "
324: 	                          "expected format is (YYYY-MM-DD)",
325: 	                          str);
326: }
327: 
328: string Date::ConversionError(string_t str) {
329: 	return ConversionError(str.GetString());
330: }
331: 
332: date_t Date::FromCString(const char *buf, idx_t len, bool strict) {
333: 	date_t result;
334: 	idx_t pos;
335: 	if (!TryConvertDate(buf, len, pos, result, strict)) {
336: 		throw ConversionException(ConversionError(string(buf, len)));
337: 	}
338: 	return result;
339: }
340: 
341: date_t Date::FromString(const string &str, bool strict) {
342: 	return Date::FromCString(str.c_str(), str.size(), strict);
343: }
344: 
345: string Date::ToString(date_t date) {
346: 	// PG displays temporal infinities in lowercase,
347: 	// but numerics in Titlecase.
348: 	if (date == date_t::infinity()) {
349: 		return PINF;
350: 	} else if (date == date_t::ninfinity()) {
351: 		return NINF;
352: 	}
353: 	int32_t date_units[3];
354: 	idx_t year_length;
355: 	bool add_bc;
356: 	Date::Convert(date, date_units[0], date_units[1], date_units[2]);
357: 
358: 	auto length = DateToStringCast::Length(date_units, year_length, add_bc);
359: 	auto buffer = unique_ptr<char[]>(new char[length]);
360: 	DateToStringCast::Format(buffer.get(), date_units, year_length, add_bc);
361: 	return string(buffer.get(), length);
362: }
363: 
364: string Date::Format(int32_t year, int32_t month, int32_t day) {
365: 	return ToString(Date::FromDate(year, month, day));
366: }
367: 
368: bool Date::IsLeapYear(int32_t year) {
369: 	return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
370: }
371: 
372: bool Date::IsValid(int32_t year, int32_t month, int32_t day) {
373: 	if (month < 1 || month > 12) {
374: 		return false;
375: 	}
376: 	if (day < 1) {
377: 		return false;
378: 	}
379: 	if (year <= DATE_MIN_YEAR) {
380: 		if (year < DATE_MIN_YEAR) {
381: 			return false;
382: 		} else if (year == DATE_MIN_YEAR) {
383: 			if (month < DATE_MIN_MONTH || (month == DATE_MIN_MONTH && day < DATE_MIN_DAY)) {
384: 				return false;
385: 			}
386: 		}
387: 	}
388: 	if (year >= DATE_MAX_YEAR) {
389: 		if (year > DATE_MAX_YEAR) {
390: 			return false;
391: 		} else if (year == DATE_MAX_YEAR) {
392: 			if (month > DATE_MAX_MONTH || (month == DATE_MAX_MONTH && day > DATE_MAX_DAY)) {
393: 				return false;
394: 			}
395: 		}
396: 	}
397: 	return Date::IsLeapYear(year) ? day <= Date::LEAP_DAYS[month] : day <= Date::NORMAL_DAYS[month];
398: }
399: 
400: int32_t Date::MonthDays(int32_t year, int32_t month) {
401: 	D_ASSERT(month >= 1 && month <= 12);
402: 	return Date::IsLeapYear(year) ? Date::LEAP_DAYS[month] : Date::NORMAL_DAYS[month];
403: }
404: 
405: date_t Date::EpochDaysToDate(int32_t epoch) {
406: 	return (date_t)epoch;
407: }
408: 
409: int32_t Date::EpochDays(date_t date) {
410: 	return date.days;
411: }
412: 
413: date_t Date::EpochToDate(int64_t epoch) {
414: 	return date_t(epoch / Interval::SECS_PER_DAY);
415: }
416: 
417: int64_t Date::Epoch(date_t date) {
418: 	return ((int64_t)date.days) * Interval::SECS_PER_DAY;
419: }
420: 
421: int64_t Date::EpochNanoseconds(date_t date) {
422: 	return ((int64_t)date.days) * (Interval::MICROS_PER_DAY * 1000);
423: }
424: 
425: int64_t Date::EpochMicroseconds(date_t date) {
426: 	int64_t result;
427: 	if (!TryMultiplyOperator::Operation<int64_t, int64_t, int64_t>(date.days, Interval::MICROS_PER_DAY, result)) {
428: 		throw ConversionException("Could not convert DATE to microseconds");
429: 	}
430: 	return result;
431: }
432: 
433: int32_t Date::ExtractYear(date_t d, int32_t *last_year) {
434: 	auto n = d.days;
435: 	// cached look up: check if year of this date is the same as the last one we looked up
436: 	// note that this only works for years in the range [1970, 2370]
437: 	if (n >= Date::CUMULATIVE_YEAR_DAYS[*last_year] && n < Date::CUMULATIVE_YEAR_DAYS[*last_year + 1]) {
438: 		return Date::EPOCH_YEAR + *last_year;
439: 	}
440: 	int32_t year;
441: 	Date::ExtractYearOffset(n, year, *last_year);
442: 	return year;
443: }
444: 
445: int32_t Date::ExtractYear(timestamp_t ts, int32_t *last_year) {
446: 	return Date::ExtractYear(Timestamp::GetDate(ts), last_year);
447: }
448: 
449: int32_t Date::ExtractYear(date_t d) {
450: 	int32_t year, year_offset;
451: 	Date::ExtractYearOffset(d.days, year, year_offset);
452: 	return year;
453: }
454: 
455: int32_t Date::ExtractMonth(date_t date) {
456: 	int32_t out_year, out_month, out_day;
457: 	Date::Convert(date, out_year, out_month, out_day);
458: 	return out_month;
459: }
460: 
461: int32_t Date::ExtractDay(date_t date) {
462: 	int32_t out_year, out_month, out_day;
463: 	Date::Convert(date, out_year, out_month, out_day);
464: 	return out_day;
465: }
466: 
467: int32_t Date::ExtractDayOfTheYear(date_t date) {
468: 	int32_t year, year_offset;
469: 	Date::ExtractYearOffset(date.days, year, year_offset);
470: 	return date.days - Date::CUMULATIVE_YEAR_DAYS[year_offset] + 1;
471: }
472: 
473: int32_t Date::ExtractISODayOfTheWeek(date_t date) {
474: 	// date of 0 is 1970-01-01, which was a Thursday (4)
475: 	// -7 = 4
476: 	// -6 = 5
477: 	// -5 = 6
478: 	// -4 = 7
479: 	// -3 = 1
480: 	// -2 = 2
481: 	// -1 = 3
482: 	// 0  = 4
483: 	// 1  = 5
484: 	// 2  = 6
485: 	// 3  = 7
486: 	// 4  = 1
487: 	// 5  = 2
488: 	// 6  = 3
489: 	// 7  = 4
490: 	if (date.days < 0) {
491: 		// negative date: start off at 4 and cycle downwards
492: 		return (7 - ((-int64_t(date.days) + 3) % 7));
493: 	} else {
494: 		// positive date: start off at 4 and cycle upwards
495: 		return ((int64_t(date.days) + 3) % 7) + 1;
496: 	}
497: }
498: 
499: static int32_t GetISOYearWeek(int32_t &year, int32_t month, int32_t day) {
500: 	auto day_of_the_year =
501: 	    (Date::IsLeapYear(year) ? Date::CUMULATIVE_LEAP_DAYS[month] : Date::CUMULATIVE_DAYS[month]) + day;
502: 	// get the first day of the first week of the year
503: 	// the first week is the week that has the 4th of January in it
504: 	const auto weekday_of_the_fourth = Date::ExtractISODayOfTheWeek(Date::FromDate(year, 1, 4));
505: 	// if fourth is monday, then fourth is the first day
506: 	// if fourth is tuesday, third is the first day
507: 	// if fourth is wednesday, second is the first day
508: 	// if fourth is thursday, first is the first day
509: 	// if fourth is friday - sunday, day is in the previous year
510: 	// (day is 0-based, weekday is 1-based)
511: 	const auto first_day_of_the_first_isoweek = 4 - weekday_of_the_fourth;
512: 	if (day_of_the_year < first_day_of_the_first_isoweek) {
513: 		// day is part of last year (13th month)
514: 		--year;
515: 		return GetISOYearWeek(year, 12, day);
516: 	} else {
517: 		return ((day_of_the_year - first_day_of_the_first_isoweek) / 7) + 1;
518: 	}
519: }
520: 
521: void Date::ExtractISOYearWeek(date_t date, int32_t &year, int32_t &week) {
522: 	int32_t month, day;
523: 	Date::Convert(date, year, month, day);
524: 	week = GetISOYearWeek(year, month - 1, day - 1);
525: }
526: 
527: int32_t Date::ExtractISOWeekNumber(date_t date) {
528: 	int32_t year, week;
529: 	ExtractISOYearWeek(date, year, week);
530: 	return week;
531: }
532: 
533: int32_t Date::ExtractISOYearNumber(date_t date) {
534: 	int32_t year, week;
535: 	ExtractISOYearWeek(date, year, week);
536: 	return year;
537: }
538: 
539: int32_t Date::ExtractWeekNumberRegular(date_t date, bool monday_first) {
540: 	int32_t year, month, day;
541: 	Date::Convert(date, year, month, day);
542: 	month -= 1;
543: 	day -= 1;
544: 	// get the day of the year
545: 	auto day_of_the_year =
546: 	    (Date::IsLeapYear(year) ? Date::CUMULATIVE_LEAP_DAYS[month] : Date::CUMULATIVE_DAYS[month]) + day;
547: 	// now figure out the first monday or sunday of the year
548: 	// what day is January 1st?
549: 	auto day_of_jan_first = Date::ExtractISODayOfTheWeek(Date::FromDate(year, 1, 1));
550: 	// monday = 1, sunday = 7
551: 	int32_t first_week_start;
552: 	if (monday_first) {
553: 		// have to find next "1"
554: 		if (day_of_jan_first == 1) {
555: 			// jan 1 is monday: starts immediately
556: 			first_week_start = 0;
557: 		} else {
558: 			// jan 1 is not monday: count days until next monday
559: 			first_week_start = 8 - day_of_jan_first;
560: 		}
561: 	} else {
562: 		first_week_start = 7 - day_of_jan_first;
563: 	}
564: 	if (day_of_the_year < first_week_start) {
565: 		// day occurs before first week starts: week 0
566: 		return 0;
567: 	}
568: 	return ((day_of_the_year - first_week_start) / 7) + 1;
569: }
570: 
571: // Returns the date of the monday of the current week.
572: date_t Date::GetMondayOfCurrentWeek(date_t date) {
573: 	int32_t dotw = Date::ExtractISODayOfTheWeek(date);
574: 	return date - (dotw - 1);
575: }
576: 
577: } // namespace duckdb
[end of src/common/types/date.cpp]
[start of src/execution/operator/persistent/buffered_csv_reader.cpp]
1: #include "duckdb/execution/operator/persistent/buffered_csv_reader.hpp"
2: 
3: #include "duckdb/catalog/catalog_entry/table_catalog_entry.hpp"
4: #include "duckdb/common/file_system.hpp"
5: #include "duckdb/common/string_util.hpp"
6: #include "duckdb/common/to_string.hpp"
7: #include "duckdb/common/types/cast_helpers.hpp"
8: #include "duckdb/common/vector_operations/unary_executor.hpp"
9: #include "duckdb/common/vector_operations/vector_operations.hpp"
10: #include "duckdb/function/scalar/strftime.hpp"
11: #include "duckdb/main/database.hpp"
12: #include "duckdb/parser/column_definition.hpp"
13: #include "duckdb/storage/data_table.hpp"
14: #include "utf8proc_wrapper.hpp"
15: #include "utf8proc.hpp"
16: #include "duckdb/parser/keyword_helper.hpp"
17: 
18: #include <algorithm>
19: #include <cctype>
20: #include <cstring>
21: #include <fstream>
22: 
23: namespace duckdb {
24: 
25: static bool ParseBoolean(const Value &value, const string &loption);
26: 
27: static bool ParseBoolean(const vector<Value> &set, const string &loption) {
28: 	if (set.empty()) {
29: 		// no option specified: default to true
30: 		return true;
31: 	}
32: 	if (set.size() > 1) {
33: 		throw BinderException("\"%s\" expects a single argument as a boolean value (e.g. TRUE or 1)", loption);
34: 	}
35: 	return ParseBoolean(set[0], loption);
36: }
37: 
38: static bool ParseBoolean(const Value &value, const string &loption) {
39: 
40: 	if (value.type().id() == LogicalTypeId::LIST) {
41: 		auto &children = ListValue::GetChildren(value);
42: 		return ParseBoolean(children, loption);
43: 	}
44: 	if (value.type() == LogicalType::FLOAT || value.type() == LogicalType::DOUBLE ||
45: 	    value.type().id() == LogicalTypeId::DECIMAL) {
46: 		throw BinderException("\"%s\" expects a boolean value (e.g. TRUE or 1)", loption);
47: 	}
48: 	return BooleanValue::Get(value.DefaultCastAs(LogicalType::BOOLEAN));
49: }
50: 
51: static string ParseString(const Value &value, const string &loption) {
52: 	if (value.type().id() == LogicalTypeId::LIST) {
53: 		auto &children = ListValue::GetChildren(value);
54: 		if (children.size() != 1) {
55: 			throw BinderException("\"%s\" expects a single argument as a string value", loption);
56: 		}
57: 		return ParseString(children[0], loption);
58: 	}
59: 	if (value.type().id() != LogicalTypeId::VARCHAR) {
60: 		throw BinderException("\"%s\" expects a string argument!", loption);
61: 	}
62: 	return value.GetValue<string>();
63: }
64: 
65: static int64_t ParseInteger(const Value &value, const string &loption) {
66: 	if (value.type().id() == LogicalTypeId::LIST) {
67: 		auto &children = ListValue::GetChildren(value);
68: 		if (children.size() != 1) {
69: 			// no option specified or multiple options specified
70: 			throw BinderException("\"%s\" expects a single argument as an integer value", loption);
71: 		}
72: 		return ParseInteger(children[0], loption);
73: 	}
74: 	return value.GetValue<int64_t>();
75: }
76: 
77: static vector<bool> ParseColumnList(const vector<Value> &set, vector<string> &names, const string &loption) {
78: 	vector<bool> result;
79: 
80: 	if (set.empty()) {
81: 		throw BinderException("\"%s\" expects a column list or * as parameter", loption);
82: 	}
83: 	// list of options: parse the list
84: 	unordered_map<string, bool> option_map;
85: 	for (idx_t i = 0; i < set.size(); i++) {
86: 		option_map[set[i].ToString()] = false;
87: 	}
88: 	result.resize(names.size(), false);
89: 	for (idx_t i = 0; i < names.size(); i++) {
90: 		auto entry = option_map.find(names[i]);
91: 		if (entry != option_map.end()) {
92: 			result[i] = true;
93: 			entry->second = true;
94: 		}
95: 	}
96: 	for (auto &entry : option_map) {
97: 		if (!entry.second) {
98: 			throw BinderException("\"%s\" expected to find %s, but it was not found in the table", loption,
99: 			                      entry.first.c_str());
100: 		}
101: 	}
102: 	return result;
103: }
104: 
105: static vector<bool> ParseColumnList(const Value &value, vector<string> &names, const string &loption) {
106: 	vector<bool> result;
107: 
108: 	// Only accept a list of arguments
109: 	if (value.type().id() != LogicalTypeId::LIST) {
110: 		// Support a single argument if it's '*'
111: 		if (value.type().id() == LogicalTypeId::VARCHAR && value.GetValue<string>() == "*") {
112: 			result.resize(names.size(), true);
113: 			return result;
114: 		}
115: 		throw BinderException("\"%s\" expects a column list or * as parameter", loption);
116: 	}
117: 	auto &children = ListValue::GetChildren(value);
118: 	// accept '*' as single argument
119: 	if (children.size() == 1 && children[0].type().id() == LogicalTypeId::VARCHAR &&
120: 	    children[0].GetValue<string>() == "*") {
121: 		result.resize(names.size(), true);
122: 		return result;
123: 	}
124: 	return ParseColumnList(children, names, loption);
125: }
126: 
127: struct CSVFileHandle {
128: public:
129: 	explicit CSVFileHandle(unique_ptr<FileHandle> file_handle_p) : file_handle(move(file_handle_p)) {
130: 		can_seek = file_handle->CanSeek();
131: 		plain_file_source = file_handle->OnDiskFile() && can_seek;
132: 		file_size = file_handle->GetFileSize();
133: 	}
134: 
135: 	bool CanSeek() {
136: 		return can_seek;
137: 	}
138: 	void Seek(idx_t position) {
139: 		if (!can_seek) {
140: 			throw InternalException("Cannot seek in this file");
141: 		}
142: 		file_handle->Seek(position);
143: 	}
144: 	idx_t SeekPosition() {
145: 		if (!can_seek) {
146: 			throw InternalException("Cannot seek in this file");
147: 		}
148: 		return file_handle->SeekPosition();
149: 	}
150: 	void Reset() {
151: 		if (plain_file_source) {
152: 			file_handle->Reset();
153: 		} else {
154: 			if (!reset_enabled) {
155: 				throw InternalException("Reset called but reset is not enabled for this CSV Handle");
156: 			}
157: 			read_position = 0;
158: 		}
159: 	}
160: 	bool PlainFileSource() {
161: 		return plain_file_source;
162: 	}
163: 
164: 	bool OnDiskFile() {
165: 		return file_handle->OnDiskFile();
166: 	}
167: 
168: 	idx_t FileSize() {
169: 		return file_size;
170: 	}
171: 
172: 	idx_t Read(void *buffer, idx_t nr_bytes) {
173: 		if (!plain_file_source) {
174: 			// not a plain file source: we need to do some bookkeeping around the reset functionality
175: 			idx_t result_offset = 0;
176: 			if (read_position < buffer_size) {
177: 				// we need to read from our cached buffer
178: 				auto buffer_read_count = MinValue<idx_t>(nr_bytes, buffer_size - read_position);
179: 				memcpy(buffer, cached_buffer.get() + read_position, buffer_read_count);
180: 				result_offset += buffer_read_count;
181: 				read_position += buffer_read_count;
182: 				if (result_offset == nr_bytes) {
183: 					return nr_bytes;
184: 				}
185: 			} else if (!reset_enabled && cached_buffer) {
186: 				// reset is disabled but we still have cached data
187: 				// we can remove any cached data
188: 				cached_buffer.reset();
189: 				buffer_size = 0;
190: 				buffer_capacity = 0;
191: 				read_position = 0;
192: 			}
193: 			// we have data left to read from the file
194: 			// read directly into the buffer
195: 			auto bytes_read = file_handle->Read((char *)buffer + result_offset, nr_bytes - result_offset);
196: 			read_position += bytes_read;
197: 			if (reset_enabled) {
198: 				// if reset caching is enabled, we need to cache the bytes that we have read
199: 				if (buffer_size + bytes_read >= buffer_capacity) {
200: 					// no space; first enlarge the buffer
201: 					buffer_capacity = MaxValue<idx_t>(NextPowerOfTwo(buffer_size + bytes_read), buffer_capacity * 2);
202: 
203: 					auto new_buffer = unique_ptr<data_t[]>(new data_t[buffer_capacity]);
204: 					if (buffer_size > 0) {
205: 						memcpy(new_buffer.get(), cached_buffer.get(), buffer_size);
206: 					}
207: 					cached_buffer = move(new_buffer);
208: 				}
209: 				memcpy(cached_buffer.get() + buffer_size, (char *)buffer + result_offset, bytes_read);
210: 				buffer_size += bytes_read;
211: 			}
212: 
213: 			return result_offset + bytes_read;
214: 		} else {
215: 			return file_handle->Read(buffer, nr_bytes);
216: 		}
217: 	}
218: 
219: 	string ReadLine() {
220: 		string result;
221: 		char buffer[1];
222: 		while (true) {
223: 			idx_t tuples_read = Read(buffer, 1);
224: 			if (tuples_read == 0 || buffer[0] == '\n') {
225: 				return result;
226: 			}
227: 			if (buffer[0] != '\r') {
228: 				result += buffer[0];
229: 			}
230: 		}
231: 	}
232: 
233: 	void DisableReset() {
234: 		this->reset_enabled = false;
235: 	}
236: 
237: private:
238: 	unique_ptr<FileHandle> file_handle;
239: 	bool reset_enabled = true;
240: 	bool can_seek = false;
241: 	bool plain_file_source = false;
242: 	idx_t file_size = 0;
243: 	// reset support
244: 	unique_ptr<data_t[]> cached_buffer;
245: 	idx_t read_position = 0;
246: 	idx_t buffer_size = 0;
247: 	idx_t buffer_capacity = 0;
248: };
249: 
250: void BufferedCSVReaderOptions::SetDelimiter(const string &input) {
251: 	this->delimiter = StringUtil::Replace(input, "\\t", "\t");
252: 	this->has_delimiter = true;
253: 	if (input.empty()) {
254: 		this->delimiter = string("\0", 1);
255: 	}
256: }
257: 
258: void BufferedCSVReaderOptions::SetDateFormat(LogicalTypeId type, const string &format, bool read_format) {
259: 	string error;
260: 	if (read_format) {
261: 		auto &date_format = this->date_format[type];
262: 		error = StrTimeFormat::ParseFormatSpecifier(format, date_format);
263: 		date_format.format_specifier = format;
264: 	} else {
265: 		auto &date_format = this->write_date_format[type];
266: 		error = StrTimeFormat::ParseFormatSpecifier(format, date_format);
267: 	}
268: 	if (!error.empty()) {
269: 		throw InvalidInputException("Could not parse DATEFORMAT: %s", error.c_str());
270: 	}
271: 	has_format[type] = true;
272: }
273: 
274: void BufferedCSVReaderOptions::SetReadOption(const string &loption, const Value &value,
275:                                              vector<string> &expected_names) {
276: 	if (SetBaseOption(loption, value)) {
277: 		return;
278: 	}
279: 	if (loption == "auto_detect") {
280: 		auto_detect = ParseBoolean(value, loption);
281: 	} else if (loption == "sample_size") {
282: 		int64_t sample_size = ParseInteger(value, loption);
283: 		if (sample_size < 1 && sample_size != -1) {
284: 			throw BinderException("Unsupported parameter for SAMPLE_SIZE: cannot be smaller than 1");
285: 		}
286: 		if (sample_size == -1) {
287: 			sample_chunks = std::numeric_limits<uint64_t>::max();
288: 			sample_chunk_size = STANDARD_VECTOR_SIZE;
289: 		} else if (sample_size <= STANDARD_VECTOR_SIZE) {
290: 			sample_chunk_size = sample_size;
291: 			sample_chunks = 1;
292: 		} else {
293: 			sample_chunk_size = STANDARD_VECTOR_SIZE;
294: 			sample_chunks = sample_size / STANDARD_VECTOR_SIZE;
295: 		}
296: 	} else if (loption == "skip") {
297: 		skip_rows = ParseInteger(value, loption);
298: 	} else if (loption == "max_line_size" || loption == "maximum_line_size") {
299: 		maximum_line_size = ParseInteger(value, loption);
300: 	} else if (loption == "sample_chunk_size") {
301: 		sample_chunk_size = ParseInteger(value, loption);
302: 		if (sample_chunk_size > STANDARD_VECTOR_SIZE) {
303: 			throw BinderException(
304: 			    "Unsupported parameter for SAMPLE_CHUNK_SIZE: cannot be bigger than STANDARD_VECTOR_SIZE %d",
305: 			    STANDARD_VECTOR_SIZE);
306: 		} else if (sample_chunk_size < 1) {
307: 			throw BinderException("Unsupported parameter for SAMPLE_CHUNK_SIZE: cannot be smaller than 1");
308: 		}
309: 	} else if (loption == "sample_chunks") {
310: 		sample_chunks = ParseInteger(value, loption);
311: 		if (sample_chunks < 1) {
312: 			throw BinderException("Unsupported parameter for SAMPLE_CHUNKS: cannot be smaller than 1");
313: 		}
314: 	} else if (loption == "force_not_null") {
315: 		force_not_null = ParseColumnList(value, expected_names, loption);
316: 	} else if (loption == "date_format" || loption == "dateformat") {
317: 		string format = ParseString(value, loption);
318: 		SetDateFormat(LogicalTypeId::DATE, format, true);
319: 	} else if (loption == "timestamp_format" || loption == "timestampformat") {
320: 		string format = ParseString(value, loption);
321: 		SetDateFormat(LogicalTypeId::TIMESTAMP, format, true);
322: 	} else if (loption == "escape") {
323: 		escape = ParseString(value, loption);
324: 		has_escape = true;
325: 	} else if (loption == "ignore_errors") {
326: 		ignore_errors = ParseBoolean(value, loption);
327: 	} else if (loption == "union_by_name") {
328: 		union_by_name = ParseBoolean(value, loption);
329: 	} else {
330: 		throw BinderException("Unrecognized option for CSV reader \"%s\"", loption);
331: 	}
332: }
333: 
334: void BufferedCSVReaderOptions::SetWriteOption(const string &loption, const Value &value) {
335: 	if (SetBaseOption(loption, value)) {
336: 		return;
337: 	}
338: 
339: 	if (loption == "force_quote") {
340: 		force_quote = ParseColumnList(value, names, loption);
341: 	} else if (loption == "date_format" || loption == "dateformat") {
342: 		string format = ParseString(value, loption);
343: 		SetDateFormat(LogicalTypeId::DATE, format, false);
344: 	} else if (loption == "timestamp_format" || loption == "timestampformat") {
345: 		string format = ParseString(value, loption);
346: 		if (StringUtil::Lower(format) == "iso") {
347: 			format = "%Y-%m-%dT%H:%M:%S.%fZ";
348: 		}
349: 		SetDateFormat(LogicalTypeId::TIMESTAMP, format, false);
350: 	} else {
351: 		throw BinderException("Unrecognized option CSV writer \"%s\"", loption);
352: 	}
353: }
354: 
355: bool BufferedCSVReaderOptions::SetBaseOption(const string &loption, const Value &value) {
356: 	// Make sure this function was only called after the option was turned into lowercase
357: 	D_ASSERT(!std::any_of(loption.begin(), loption.end(), ::isupper));
358: 
359: 	if (StringUtil::StartsWith(loption, "delim") || StringUtil::StartsWith(loption, "sep")) {
360: 		SetDelimiter(ParseString(value, loption));
361: 	} else if (loption == "quote") {
362: 		quote = ParseString(value, loption);
363: 		has_quote = true;
364: 	} else if (loption == "escape") {
365: 		escape = ParseString(value, loption);
366: 		has_escape = true;
367: 	} else if (loption == "header") {
368: 		header = ParseBoolean(value, loption);
369: 		has_header = true;
370: 	} else if (loption == "null" || loption == "nullstr") {
371: 		null_str = ParseString(value, loption);
372: 	} else if (loption == "encoding") {
373: 		auto encoding = StringUtil::Lower(ParseString(value, loption));
374: 		if (encoding != "utf8" && encoding != "utf-8") {
375: 			throw BinderException("Copy is only supported for UTF-8 encoded files, ENCODING 'UTF-8'");
376: 		}
377: 	} else if (loption == "compression") {
378: 		compression = FileCompressionTypeFromString(ParseString(value, loption));
379: 	} else {
380: 		// unrecognized option in base CSV
381: 		return false;
382: 	}
383: 	return true;
384: }
385: 
386: std::string BufferedCSVReaderOptions::ToString() const {
387: 	return "DELIMITER='" + delimiter + (has_delimiter ? "'" : (auto_detect ? "' (auto detected)" : "' (default)")) +
388: 	       ", QUOTE='" + quote + (has_quote ? "'" : (auto_detect ? "' (auto detected)" : "' (default)")) +
389: 	       ", ESCAPE='" + escape + (has_escape ? "'" : (auto_detect ? "' (auto detected)" : "' (default)")) +
390: 	       ", HEADER=" + std::to_string(header) +
391: 	       (has_header ? "" : (auto_detect ? " (auto detected)" : "' (default)")) +
392: 	       ", SAMPLE_SIZE=" + std::to_string(sample_chunk_size * sample_chunks) +
393: 	       ", IGNORE_ERRORS=" + std::to_string(ignore_errors) + ", ALL_VARCHAR=" + std::to_string(all_varchar);
394: }
395: 
396: static string GetLineNumberStr(idx_t linenr, bool linenr_estimated) {
397: 	string estimated = (linenr_estimated ? string(" (estimated)") : string(""));
398: 	return to_string(linenr + 1) + estimated;
399: }
400: 
401: static bool StartsWithNumericDate(string &separator, const string &value) {
402: 	auto begin = value.c_str();
403: 	auto end = begin + value.size();
404: 
405: 	//	StrpTimeFormat::Parse will skip whitespace, so we can too
406: 	auto field1 = std::find_if_not(begin, end, StringUtil::CharacterIsSpace);
407: 	if (field1 == end) {
408: 		return false;
409: 	}
410: 
411: 	//	first numeric field must start immediately
412: 	if (!StringUtil::CharacterIsDigit(*field1)) {
413: 		return false;
414: 	}
415: 	auto literal1 = std::find_if_not(field1, end, StringUtil::CharacterIsDigit);
416: 	if (literal1 == end) {
417: 		return false;
418: 	}
419: 
420: 	//	second numeric field must exist
421: 	auto field2 = std::find_if(literal1, end, StringUtil::CharacterIsDigit);
422: 	if (field2 == end) {
423: 		return false;
424: 	}
425: 	auto literal2 = std::find_if_not(field2, end, StringUtil::CharacterIsDigit);
426: 	if (literal2 == end) {
427: 		return false;
428: 	}
429: 
430: 	//	third numeric field must exist
431: 	auto field3 = std::find_if(literal2, end, StringUtil::CharacterIsDigit);
432: 	if (field3 == end) {
433: 		return false;
434: 	}
435: 
436: 	//	second literal must match first
437: 	if (((field3 - literal2) != (field2 - literal1)) || strncmp(literal1, literal2, (field2 - literal1)) != 0) {
438: 		return false;
439: 	}
440: 
441: 	//	copy the literal as the separator, escaping percent signs
442: 	separator.clear();
443: 	while (literal1 < field2) {
444: 		const auto literal_char = *literal1++;
445: 		if (literal_char == '%') {
446: 			separator.push_back(literal_char);
447: 		}
448: 		separator.push_back(literal_char);
449: 	}
450: 
451: 	return true;
452: }
453: 
454: string GenerateDateFormat(const string &separator, const char *format_template) {
455: 	string format_specifier = format_template;
456: 	auto amount_of_dashes = std::count(format_specifier.begin(), format_specifier.end(), '-');
457: 	if (!amount_of_dashes) {
458: 		return format_specifier;
459: 	}
460: 	string result;
461: 	result.reserve(format_specifier.size() - amount_of_dashes + (amount_of_dashes * separator.size()));
462: 	for (auto &character : format_specifier) {
463: 		if (character == '-') {
464: 			result += separator;
465: 		} else {
466: 			result += character;
467: 		}
468: 	}
469: 	return result;
470: }
471: 
472: TextSearchShiftArray::TextSearchShiftArray() {
473: }
474: 
475: TextSearchShiftArray::TextSearchShiftArray(string search_term) : length(search_term.size()) {
476: 	if (length > 255) {
477: 		throw Exception("Size of delimiter/quote/escape in CSV reader is limited to 255 bytes");
478: 	}
479: 	// initialize the shifts array
480: 	shifts = unique_ptr<uint8_t[]>(new uint8_t[length * 255]);
481: 	memset(shifts.get(), 0, length * 255 * sizeof(uint8_t));
482: 	// iterate over each of the characters in the array
483: 	for (idx_t main_idx = 0; main_idx < length; main_idx++) {
484: 		uint8_t current_char = (uint8_t)search_term[main_idx];
485: 		// now move over all the remaining positions
486: 		for (idx_t i = main_idx; i < length; i++) {
487: 			bool is_match = true;
488: 			// check if the prefix matches at this position
489: 			// if it does, we move to this position after encountering the current character
490: 			for (idx_t j = 0; j < main_idx; j++) {
491: 				if (search_term[i - main_idx + j] != search_term[j]) {
492: 					is_match = false;
493: 				}
494: 			}
495: 			if (!is_match) {
496: 				continue;
497: 			}
498: 			shifts[i * 255 + current_char] = main_idx + 1;
499: 		}
500: 	}
501: }
502: 
503: BufferedCSVReader::BufferedCSVReader(FileSystem &fs_p, Allocator &allocator, FileOpener *opener_p,
504:                                      BufferedCSVReaderOptions options_p, const vector<LogicalType> &requested_types)
505:     : fs(fs_p), allocator(allocator), opener(opener_p), options(move(options_p)), buffer_size(0), position(0),
506:       start(0) {
507: 	file_handle = OpenCSV(options);
508: 	Initialize(requested_types);
509: }
510: 
511: BufferedCSVReader::BufferedCSVReader(ClientContext &context, BufferedCSVReaderOptions options_p,
512:                                      const vector<LogicalType> &requested_types)
513:     : BufferedCSVReader(FileSystem::GetFileSystem(context), Allocator::Get(context), FileSystem::GetFileOpener(context),
514:                         move(options_p), requested_types) {
515: }
516: 
517: BufferedCSVReader::~BufferedCSVReader() {
518: }
519: 
520: idx_t BufferedCSVReader::GetFileSize() {
521: 	return file_handle ? file_handle->FileSize() : 0;
522: }
523: 
524: void BufferedCSVReader::Initialize(const vector<LogicalType> &requested_types) {
525: 	PrepareComplexParser();
526: 	if (options.auto_detect) {
527: 		sql_types = SniffCSV(requested_types);
528: 		if (sql_types.empty()) {
529: 			throw Exception("Failed to detect column types from CSV: is the file a valid CSV file?");
530: 		}
531: 		if (cached_chunks.empty()) {
532: 			JumpToBeginning(options.skip_rows, options.header);
533: 		}
534: 	} else {
535: 		sql_types = requested_types;
536: 		ResetBuffer();
537: 		SkipRowsAndReadHeader(options.skip_rows, options.header);
538: 	}
539: 	InitParseChunk(sql_types.size());
540: 	InitInsertChunkIdx(sql_types.size());
541: 	// we only need reset support during the automatic CSV type detection
542: 	// since reset support might require caching (in the case of streams), we disable it for the remainder
543: 	file_handle->DisableReset();
544: }
545: 
546: void BufferedCSVReader::PrepareComplexParser() {
547: 	delimiter_search = TextSearchShiftArray(options.delimiter);
548: 	escape_search = TextSearchShiftArray(options.escape);
549: 	quote_search = TextSearchShiftArray(options.quote);
550: }
551: 
552: unique_ptr<CSVFileHandle> BufferedCSVReader::OpenCSV(const BufferedCSVReaderOptions &options) {
553: 	auto file_handle = fs.OpenFile(options.file_path.c_str(), FileFlags::FILE_FLAGS_READ, FileLockType::NO_LOCK,
554: 	                               options.compression, this->opener);
555: 	return make_unique<CSVFileHandle>(move(file_handle));
556: }
557: 
558: // Helper function to generate column names
559: static string GenerateColumnName(const idx_t total_cols, const idx_t col_number, const string &prefix = "column") {
560: 	int max_digits = NumericHelper::UnsignedLength(total_cols - 1);
561: 	int digits = NumericHelper::UnsignedLength(col_number);
562: 	string leading_zeros = string(max_digits - digits, '0');
563: 	string value = to_string(col_number);
564: 	return string(prefix + leading_zeros + value);
565: }
566: 
567: // Helper function for UTF-8 aware space trimming
568: static string TrimWhitespace(const string &col_name) {
569: 	utf8proc_int32_t codepoint;
570: 	auto str = reinterpret_cast<const utf8proc_uint8_t *>(col_name.c_str());
571: 	idx_t size = col_name.size();
572: 	// Find the first character that is not left trimmed
573: 	idx_t begin = 0;
574: 	while (begin < size) {
575: 		auto bytes = utf8proc_iterate(str + begin, size - begin, &codepoint);
576: 		D_ASSERT(bytes > 0);
577: 		if (utf8proc_category(codepoint) != UTF8PROC_CATEGORY_ZS) {
578: 			break;
579: 		}
580: 		begin += bytes;
581: 	}
582: 
583: 	// Find the last character that is not right trimmed
584: 	idx_t end;
585: 	end = begin;
586: 	for (auto next = begin; next < col_name.size();) {
587: 		auto bytes = utf8proc_iterate(str + next, size - next, &codepoint);
588: 		D_ASSERT(bytes > 0);
589: 		next += bytes;
590: 		if (utf8proc_category(codepoint) != UTF8PROC_CATEGORY_ZS) {
591: 			end = next;
592: 		}
593: 	}
594: 
595: 	// return the trimmed string
596: 	return col_name.substr(begin, end - begin);
597: }
598: 
599: static string NormalizeColumnName(const string &col_name) {
600: 	// normalize UTF8 characters to NFKD
601: 	auto nfkd = utf8proc_NFKD((const utf8proc_uint8_t *)col_name.c_str(), col_name.size());
602: 	const string col_name_nfkd = string((const char *)nfkd, strlen((const char *)nfkd));
603: 	free(nfkd);
604: 
605: 	// only keep ASCII characters 0-9 a-z A-Z and replace spaces with regular whitespace
606: 	string col_name_ascii = "";
607: 	for (idx_t i = 0; i < col_name_nfkd.size(); i++) {
608: 		if (col_name_nfkd[i] == '_' || (col_name_nfkd[i] >= '0' && col_name_nfkd[i] <= '9') ||
609: 		    (col_name_nfkd[i] >= 'A' && col_name_nfkd[i] <= 'Z') ||
610: 		    (col_name_nfkd[i] >= 'a' && col_name_nfkd[i] <= 'z')) {
611: 			col_name_ascii += col_name_nfkd[i];
612: 		} else if (StringUtil::CharacterIsSpace(col_name_nfkd[i])) {
613: 			col_name_ascii += " ";
614: 		}
615: 	}
616: 
617: 	// trim whitespace and replace remaining whitespace by _
618: 	string col_name_trimmed = TrimWhitespace(col_name_ascii);
619: 	string col_name_cleaned = "";
620: 	bool in_whitespace = false;
621: 	for (idx_t i = 0; i < col_name_trimmed.size(); i++) {
622: 		if (col_name_trimmed[i] == ' ') {
623: 			if (!in_whitespace) {
624: 				col_name_cleaned += "_";
625: 				in_whitespace = true;
626: 			}
627: 		} else {
628: 			col_name_cleaned += col_name_trimmed[i];
629: 			in_whitespace = false;
630: 		}
631: 	}
632: 
633: 	// don't leave string empty; if not empty, make lowercase
634: 	if (col_name_cleaned.empty()) {
635: 		col_name_cleaned = "_";
636: 	} else {
637: 		col_name_cleaned = StringUtil::Lower(col_name_cleaned);
638: 	}
639: 
640: 	// prepend _ if name starts with a digit or is a reserved keyword
641: 	if (KeywordHelper::IsKeyword(col_name_cleaned) || (col_name_cleaned[0] >= '0' && col_name_cleaned[0] <= '9')) {
642: 		col_name_cleaned = "_" + col_name_cleaned;
643: 	}
644: 	return col_name_cleaned;
645: }
646: 
647: void BufferedCSVReader::ResetBuffer() {
648: 	buffer.reset();
649: 	buffer_size = 0;
650: 	position = 0;
651: 	start = 0;
652: 	cached_buffers.clear();
653: }
654: 
655: void BufferedCSVReader::ResetStream() {
656: 	if (!file_handle->CanSeek()) {
657: 		// seeking to the beginning appears to not be supported in all compiler/os-scenarios,
658: 		// so we have to create a new stream source here for now
659: 		file_handle->Reset();
660: 	} else {
661: 		file_handle->Seek(0);
662: 	}
663: 	linenr = 0;
664: 	linenr_estimated = false;
665: 	bytes_per_line_avg = 0;
666: 	sample_chunk_idx = 0;
667: 	jumping_samples = false;
668: }
669: 
670: void BufferedCSVReader::InitParseChunk(idx_t num_cols) {
671: 	// adapt not null info
672: 	if (options.force_not_null.size() != num_cols) {
673: 		options.force_not_null.resize(num_cols, false);
674: 	}
675: 	if (num_cols == parse_chunk.ColumnCount()) {
676: 		parse_chunk.Reset();
677: 	} else {
678: 		parse_chunk.Destroy();
679: 
680: 		// initialize the parse_chunk with a set of VARCHAR types
681: 		vector<LogicalType> varchar_types(num_cols, LogicalType::VARCHAR);
682: 		parse_chunk.Initialize(allocator, varchar_types);
683: 	}
684: }
685: 
686: void BufferedCSVReader::InitInsertChunkIdx(idx_t num_cols) {
687: 	for (idx_t col = 0; col < num_cols; ++col) {
688: 		insert_cols_idx.push_back(col);
689: 	}
690: }
691: 
692: void BufferedCSVReader::JumpToBeginning(idx_t skip_rows = 0, bool skip_header = false) {
693: 	ResetBuffer();
694: 	ResetStream();
695: 	sample_chunk_idx = 0;
696: 	bytes_in_chunk = 0;
697: 	end_of_file_reached = false;
698: 	bom_checked = false;
699: 	SkipRowsAndReadHeader(skip_rows, skip_header);
700: }
701: 
702: void BufferedCSVReader::SkipRowsAndReadHeader(idx_t skip_rows, bool skip_header) {
703: 	for (idx_t i = 0; i < skip_rows; i++) {
704: 		// ignore skip rows
705: 		string read_line = file_handle->ReadLine();
706: 		linenr++;
707: 	}
708: 
709: 	if (skip_header) {
710: 		// ignore the first line as a header line
711: 		InitParseChunk(sql_types.size());
712: 		ParseCSV(ParserMode::PARSING_HEADER);
713: 	}
714: }
715: 
716: bool BufferedCSVReader::JumpToNextSample() {
717: 	// get bytes contained in the previously read chunk
718: 	idx_t remaining_bytes_in_buffer = buffer_size - start;
719: 	bytes_in_chunk -= remaining_bytes_in_buffer;
720: 	if (remaining_bytes_in_buffer == 0) {
721: 		return false;
722: 	}
723: 
724: 	// assess if it makes sense to jump, based on size of the first chunk relative to size of the entire file
725: 	if (sample_chunk_idx == 0) {
726: 		idx_t bytes_first_chunk = bytes_in_chunk;
727: 		double chunks_fit = (file_handle->FileSize() / (double)bytes_first_chunk);
728: 		jumping_samples = chunks_fit >= options.sample_chunks;
729: 
730: 		// jump back to the beginning
731: 		JumpToBeginning(options.skip_rows, options.header);
732: 		sample_chunk_idx++;
733: 		return true;
734: 	}
735: 
736: 	if (end_of_file_reached || sample_chunk_idx >= options.sample_chunks) {
737: 		return false;
738: 	}
739: 
740: 	// if we deal with any other sources than plaintext files, jumping_samples can be tricky. In that case
741: 	// we just read x continuous chunks from the stream TODO: make jumps possible for zipfiles.
742: 	if (!file_handle->PlainFileSource() || !jumping_samples) {
743: 		sample_chunk_idx++;
744: 		return true;
745: 	}
746: 
747: 	// update average bytes per line
748: 	double bytes_per_line = bytes_in_chunk / (double)options.sample_chunk_size;
749: 	bytes_per_line_avg = ((bytes_per_line_avg * (sample_chunk_idx)) + bytes_per_line) / (sample_chunk_idx + 1);
750: 
751: 	// if none of the previous conditions were met, we can jump
752: 	idx_t partition_size = (idx_t)round(file_handle->FileSize() / (double)options.sample_chunks);
753: 
754: 	// calculate offset to end of the current partition
755: 	int64_t offset = partition_size - bytes_in_chunk - remaining_bytes_in_buffer;
756: 	auto current_pos = file_handle->SeekPosition();
757: 
758: 	if (current_pos + offset < file_handle->FileSize()) {
759: 		// set position in stream and clear failure bits
760: 		file_handle->Seek(current_pos + offset);
761: 
762: 		// estimate linenr
763: 		linenr += (idx_t)round((offset + remaining_bytes_in_buffer) / bytes_per_line_avg);
764: 		linenr_estimated = true;
765: 	} else {
766: 		// seek backwards from the end in last chunk and hope to catch the end of the file
767: 		// TODO: actually it would be good to make sure that the end of file is being reached, because
768: 		// messy end-lines are quite common. For this case, however, we first need a skip_end detection anyways.
769: 		file_handle->Seek(file_handle->FileSize() - bytes_in_chunk);
770: 
771: 		// estimate linenr
772: 		linenr = (idx_t)round((file_handle->FileSize() - bytes_in_chunk) / bytes_per_line_avg);
773: 		linenr_estimated = true;
774: 	}
775: 
776: 	// reset buffers and parse chunk
777: 	ResetBuffer();
778: 
779: 	// seek beginning of next line
780: 	// FIXME: if this jump ends up in a quoted linebreak, we will have a problem
781: 	string read_line = file_handle->ReadLine();
782: 	linenr++;
783: 
784: 	sample_chunk_idx++;
785: 
786: 	return true;
787: }
788: 
789: void BufferedCSVReader::SetDateFormat(const string &format_specifier, const LogicalTypeId &sql_type) {
790: 	options.has_format[sql_type] = true;
791: 	auto &date_format = options.date_format[sql_type];
792: 	date_format.format_specifier = format_specifier;
793: 	StrTimeFormat::ParseFormatSpecifier(date_format.format_specifier, date_format);
794: }
795: 
796: bool BufferedCSVReader::TryCastValue(const Value &value, const LogicalType &sql_type) {
797: 	if (options.has_format[LogicalTypeId::DATE] && sql_type.id() == LogicalTypeId::DATE) {
798: 		date_t result;
799: 		string error_message;
800: 		return options.date_format[LogicalTypeId::DATE].TryParseDate(string_t(StringValue::Get(value)), result,
801: 		                                                             error_message);
802: 	} else if (options.has_format[LogicalTypeId::TIMESTAMP] && sql_type.id() == LogicalTypeId::TIMESTAMP) {
803: 		timestamp_t result;
804: 		string error_message;
805: 		return options.date_format[LogicalTypeId::TIMESTAMP].TryParseTimestamp(string_t(StringValue::Get(value)),
806: 		                                                                       result, error_message);
807: 	} else {
808: 		Value new_value;
809: 		string error_message;
810: 		return value.DefaultTryCastAs(sql_type, new_value, &error_message, true);
811: 	}
812: }
813: 
814: struct TryCastDateOperator {
815: 	static bool Operation(BufferedCSVReaderOptions &options, string_t input, date_t &result, string &error_message) {
816: 		return options.date_format[LogicalTypeId::DATE].TryParseDate(input, result, error_message);
817: 	}
818: };
819: 
820: struct TryCastTimestampOperator {
821: 	static bool Operation(BufferedCSVReaderOptions &options, string_t input, timestamp_t &result,
822: 	                      string &error_message) {
823: 		return options.date_format[LogicalTypeId::TIMESTAMP].TryParseTimestamp(input, result, error_message);
824: 	}
825: };
826: 
827: template <class OP, class T>
828: static bool TemplatedTryCastDateVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector,
829:                                        idx_t count, string &error_message) {
830: 	D_ASSERT(input_vector.GetType().id() == LogicalTypeId::VARCHAR);
831: 	bool all_converted = true;
832: 	UnaryExecutor::Execute<string_t, T>(input_vector, result_vector, count, [&](string_t input) {
833: 		T result;
834: 		if (!OP::Operation(options, input, result, error_message)) {
835: 			all_converted = false;
836: 		}
837: 		return result;
838: 	});
839: 	return all_converted;
840: }
841: 
842: bool TryCastDateVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector, idx_t count,
843:                        string &error_message) {
844: 	return TemplatedTryCastDateVector<TryCastDateOperator, date_t>(options, input_vector, result_vector, count,
845: 	                                                               error_message);
846: }
847: 
848: bool TryCastTimestampVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector, idx_t count,
849:                             string &error_message) {
850: 	return TemplatedTryCastDateVector<TryCastTimestampOperator, timestamp_t>(options, input_vector, result_vector,
851: 	                                                                         count, error_message);
852: }
853: 
854: bool BufferedCSVReader::TryCastVector(Vector &parse_chunk_col, idx_t size, const LogicalType &sql_type) {
855: 	// try vector-cast from string to sql_type
856: 	Vector dummy_result(sql_type);
857: 	if (options.has_format[LogicalTypeId::DATE] && sql_type == LogicalTypeId::DATE) {
858: 		// use the date format to cast the chunk
859: 		string error_message;
860: 		return TryCastDateVector(options, parse_chunk_col, dummy_result, size, error_message);
861: 	} else if (options.has_format[LogicalTypeId::TIMESTAMP] && sql_type == LogicalTypeId::TIMESTAMP) {
862: 		// use the timestamp format to cast the chunk
863: 		string error_message;
864: 		return TryCastTimestampVector(options, parse_chunk_col, dummy_result, size, error_message);
865: 	} else {
866: 		// target type is not varchar: perform a cast
867: 		string error_message;
868: 		return VectorOperations::DefaultTryCast(parse_chunk_col, dummy_result, size, &error_message, true);
869: 	}
870: }
871: 
872: enum class QuoteRule : uint8_t { QUOTES_RFC = 0, QUOTES_OTHER = 1, NO_QUOTES = 2 };
873: 
874: void BufferedCSVReader::DetectDialect(const vector<LogicalType> &requested_types,
875:                                       BufferedCSVReaderOptions &original_options,
876:                                       vector<BufferedCSVReaderOptions> &info_candidates, idx_t &best_num_cols) {
877: 	// set up the candidates we consider for delimiter and quote rules based on user input
878: 	vector<string> delim_candidates;
879: 	vector<QuoteRule> quoterule_candidates;
880: 	vector<vector<string>> quote_candidates_map;
881: 	vector<vector<string>> escape_candidates_map = {{""}, {"\\"}, {""}};
882: 
883: 	if (options.has_delimiter) {
884: 		// user provided a delimiter: use that delimiter
885: 		delim_candidates = {options.delimiter};
886: 	} else {
887: 		// no delimiter provided: try standard/common delimiters
888: 		delim_candidates = {",", "|", ";", "\t"};
889: 	}
890: 	if (options.has_quote) {
891: 		// user provided quote: use that quote rule
892: 		quote_candidates_map = {{options.quote}, {options.quote}, {options.quote}};
893: 	} else {
894: 		// no quote rule provided: use standard/common quotes
895: 		quote_candidates_map = {{"\""}, {"\"", "'"}, {""}};
896: 	}
897: 	if (options.has_escape) {
898: 		// user provided escape: use that escape rule
899: 		if (options.escape.empty()) {
900: 			quoterule_candidates = {QuoteRule::QUOTES_RFC};
901: 		} else {
902: 			quoterule_candidates = {QuoteRule::QUOTES_OTHER};
903: 		}
904: 		escape_candidates_map[static_cast<uint8_t>(quoterule_candidates[0])] = {options.escape};
905: 	} else {
906: 		// no escape provided: try standard/common escapes
907: 		quoterule_candidates = {QuoteRule::QUOTES_RFC, QuoteRule::QUOTES_OTHER, QuoteRule::NO_QUOTES};
908: 	}
909: 
910: 	idx_t best_consistent_rows = 0;
911: 	for (auto quoterule : quoterule_candidates) {
912: 		const auto &quote_candidates = quote_candidates_map[static_cast<uint8_t>(quoterule)];
913: 		for (const auto &quote : quote_candidates) {
914: 			for (const auto &delim : delim_candidates) {
915: 				const auto &escape_candidates = escape_candidates_map[static_cast<uint8_t>(quoterule)];
916: 				for (const auto &escape : escape_candidates) {
917: 					BufferedCSVReaderOptions sniff_info = original_options;
918: 					sniff_info.delimiter = delim;
919: 					sniff_info.quote = quote;
920: 					sniff_info.escape = escape;
921: 
922: 					options = sniff_info;
923: 					PrepareComplexParser();
924: 
925: 					JumpToBeginning(original_options.skip_rows);
926: 					sniffed_column_counts.clear();
927: 
928: 					if (!TryParseCSV(ParserMode::SNIFFING_DIALECT)) {
929: 						continue;
930: 					}
931: 
932: 					idx_t start_row = original_options.skip_rows;
933: 					idx_t consistent_rows = 0;
934: 					idx_t num_cols = 0;
935: 
936: 					for (idx_t row = 0; row < sniffed_column_counts.size(); row++) {
937: 						if (sniffed_column_counts[row] == num_cols) {
938: 							consistent_rows++;
939: 						} else {
940: 							num_cols = sniffed_column_counts[row];
941: 							start_row = row + original_options.skip_rows;
942: 							consistent_rows = 1;
943: 						}
944: 					}
945: 
946: 					// some logic
947: 					bool more_values = (consistent_rows > best_consistent_rows && num_cols >= best_num_cols);
948: 					bool single_column_before = best_num_cols < 2 && num_cols > best_num_cols;
949: 					bool rows_consistent =
950: 					    start_row + consistent_rows - original_options.skip_rows == sniffed_column_counts.size();
951: 					bool more_than_one_row = (consistent_rows > 1);
952: 					bool more_than_one_column = (num_cols > 1);
953: 					bool start_good = !info_candidates.empty() && (start_row <= info_candidates.front().skip_rows);
954: 
955: 					if (!requested_types.empty() && requested_types.size() != num_cols) {
956: 						continue;
957: 					} else if ((more_values || single_column_before) && rows_consistent) {
958: 						sniff_info.skip_rows = start_row;
959: 						sniff_info.num_cols = num_cols;
960: 						best_consistent_rows = consistent_rows;
961: 						best_num_cols = num_cols;
962: 
963: 						info_candidates.clear();
964: 						info_candidates.push_back(sniff_info);
965: 					} else if (more_than_one_row && more_than_one_column && start_good && rows_consistent) {
966: 						bool same_quote_is_candidate = false;
967: 						for (auto &info_candidate : info_candidates) {
968: 							if (quote.compare(info_candidate.quote) == 0) {
969: 								same_quote_is_candidate = true;
970: 							}
971: 						}
972: 						if (!same_quote_is_candidate) {
973: 							sniff_info.skip_rows = start_row;
974: 							sniff_info.num_cols = num_cols;
975: 							info_candidates.push_back(sniff_info);
976: 						}
977: 					}
978: 				}
979: 			}
980: 		}
981: 	}
982: }
983: 
984: void BufferedCSVReader::DetectCandidateTypes(const vector<LogicalType> &type_candidates,
985:                                              const map<LogicalTypeId, vector<const char *>> &format_template_candidates,
986:                                              const vector<BufferedCSVReaderOptions> &info_candidates,
987:                                              BufferedCSVReaderOptions &original_options, idx_t best_num_cols,
988:                                              vector<vector<LogicalType>> &best_sql_types_candidates,
989:                                              std::map<LogicalTypeId, vector<string>> &best_format_candidates,
990:                                              DataChunk &best_header_row) {
991: 	BufferedCSVReaderOptions best_options;
992: 	idx_t min_varchar_cols = best_num_cols + 1;
993: 
994: 	// check which info candidate leads to minimum amount of non-varchar columns...
995: 	for (const auto &t : format_template_candidates) {
996: 		best_format_candidates[t.first].clear();
997: 	}
998: 	for (auto &info_candidate : info_candidates) {
999: 		options = info_candidate;
1000: 		vector<vector<LogicalType>> info_sql_types_candidates(options.num_cols, type_candidates);
1001: 		std::map<LogicalTypeId, bool> has_format_candidates;
1002: 		std::map<LogicalTypeId, vector<string>> format_candidates;
1003: 		for (const auto &t : format_template_candidates) {
1004: 			has_format_candidates[t.first] = false;
1005: 			format_candidates[t.first].clear();
1006: 		}
1007: 
1008: 		// set all sql_types to VARCHAR so we can do datatype detection based on VARCHAR values
1009: 		sql_types.clear();
1010: 		sql_types.assign(options.num_cols, LogicalType::VARCHAR);
1011: 
1012: 		// jump to beginning and skip potential header
1013: 		JumpToBeginning(options.skip_rows, true);
1014: 		DataChunk header_row;
1015: 		header_row.Initialize(allocator, sql_types);
1016: 		parse_chunk.Copy(header_row);
1017: 
1018: 		if (header_row.size() == 0) {
1019: 			continue;
1020: 		}
1021: 
1022: 		// init parse chunk and read csv with info candidate
1023: 		InitParseChunk(sql_types.size());
1024: 		ParseCSV(ParserMode::SNIFFING_DATATYPES);
1025: 		for (idx_t row_idx = 0; row_idx <= parse_chunk.size(); row_idx++) {
1026: 			bool is_header_row = row_idx == 0;
1027: 			idx_t row = row_idx - 1;
1028: 			for (idx_t col = 0; col < parse_chunk.ColumnCount(); col++) {
1029: 				auto &col_type_candidates = info_sql_types_candidates[col];
1030: 				while (col_type_candidates.size() > 1) {
1031: 					const auto &sql_type = col_type_candidates.back();
1032: 					// try cast from string to sql_type
1033: 					Value dummy_val;
1034: 					if (is_header_row) {
1035: 						dummy_val = header_row.GetValue(col, 0);
1036: 					} else {
1037: 						dummy_val = parse_chunk.GetValue(col, row);
1038: 					}
1039: 					// try formatting for date types if the user did not specify one and it starts with numeric values.
1040: 					string separator;
1041: 					if (has_format_candidates.count(sql_type.id()) && !original_options.has_format[sql_type.id()] &&
1042: 					    StartsWithNumericDate(separator, StringValue::Get(dummy_val))) {
1043: 						// generate date format candidates the first time through
1044: 						auto &type_format_candidates = format_candidates[sql_type.id()];
1045: 						const auto had_format_candidates = has_format_candidates[sql_type.id()];
1046: 						if (!has_format_candidates[sql_type.id()]) {
1047: 							has_format_candidates[sql_type.id()] = true;
1048: 							// order by preference
1049: 							auto entry = format_template_candidates.find(sql_type.id());
1050: 							if (entry != format_template_candidates.end()) {
1051: 								const auto &format_template_list = entry->second;
1052: 								for (const auto &t : format_template_list) {
1053: 									const auto format_string = GenerateDateFormat(separator, t);
1054: 									// don't parse ISO 8601
1055: 									if (format_string.find("%Y-%m-%d") == string::npos) {
1056: 										type_format_candidates.emplace_back(format_string);
1057: 									}
1058: 								}
1059: 							}
1060: 							//	initialise the first candidate
1061: 							options.has_format[sql_type.id()] = true;
1062: 							//	all formats are constructed to be valid
1063: 							SetDateFormat(type_format_candidates.back(), sql_type.id());
1064: 						}
1065: 						// check all formats and keep the first one that works
1066: 						StrpTimeFormat::ParseResult result;
1067: 						auto save_format_candidates = type_format_candidates;
1068: 						while (!type_format_candidates.empty()) {
1069: 							//	avoid using exceptions for flow control...
1070: 							auto &current_format = options.date_format[sql_type.id()];
1071: 							if (current_format.Parse(StringValue::Get(dummy_val), result)) {
1072: 								break;
1073: 							}
1074: 							//	doesn't work - move to the next one
1075: 							type_format_candidates.pop_back();
1076: 							options.has_format[sql_type.id()] = (!type_format_candidates.empty());
1077: 							if (!type_format_candidates.empty()) {
1078: 								SetDateFormat(type_format_candidates.back(), sql_type.id());
1079: 							}
1080: 						}
1081: 						//	if none match, then this is not a value of type sql_type,
1082: 						if (type_format_candidates.empty()) {
1083: 							//	so restore the candidates that did work.
1084: 							//	or throw them out if they were generated by this value.
1085: 							if (had_format_candidates) {
1086: 								type_format_candidates.swap(save_format_candidates);
1087: 								if (!type_format_candidates.empty()) {
1088: 									SetDateFormat(type_format_candidates.back(), sql_type.id());
1089: 								}
1090: 							} else {
1091: 								has_format_candidates[sql_type.id()] = false;
1092: 							}
1093: 						}
1094: 					}
1095: 					// try cast from string to sql_type
1096: 					if (TryCastValue(dummy_val, sql_type)) {
1097: 						break;
1098: 					} else {
1099: 						col_type_candidates.pop_back();
1100: 					}
1101: 				}
1102: 			}
1103: 			// reset type detection, because first row could be header,
1104: 			// but only do it if csv has more than one line (including header)
1105: 			if (parse_chunk.size() > 0 && is_header_row) {
1106: 				info_sql_types_candidates = vector<vector<LogicalType>>(options.num_cols, type_candidates);
1107: 				for (auto &f : format_candidates) {
1108: 					f.second.clear();
1109: 				}
1110: 				for (auto &h : has_format_candidates) {
1111: 					h.second = false;
1112: 				}
1113: 			}
1114: 		}
1115: 
1116: 		idx_t varchar_cols = 0;
1117: 		for (idx_t col = 0; col < parse_chunk.ColumnCount(); col++) {
1118: 			auto &col_type_candidates = info_sql_types_candidates[col];
1119: 			// check number of varchar columns
1120: 			const auto &col_type = col_type_candidates.back();
1121: 			if (col_type == LogicalType::VARCHAR) {
1122: 				varchar_cols++;
1123: 			}
1124: 		}
1125: 
1126: 		// it's good if the dialect creates more non-varchar columns, but only if we sacrifice < 30% of best_num_cols.
1127: 		if (varchar_cols < min_varchar_cols && parse_chunk.ColumnCount() > (best_num_cols * 0.7)) {
1128: 			// we have a new best_options candidate
1129: 			best_options = info_candidate;
1130: 			min_varchar_cols = varchar_cols;
1131: 			best_sql_types_candidates = info_sql_types_candidates;
1132: 			best_format_candidates = format_candidates;
1133: 			best_header_row.Destroy();
1134: 			auto header_row_types = header_row.GetTypes();
1135: 			best_header_row.Initialize(allocator, header_row_types);
1136: 			header_row.Copy(best_header_row);
1137: 		}
1138: 	}
1139: 
1140: 	options = best_options;
1141: 	for (const auto &best : best_format_candidates) {
1142: 		if (!best.second.empty()) {
1143: 			SetDateFormat(best.second.back(), best.first);
1144: 		}
1145: 	}
1146: }
1147: 
1148: void BufferedCSVReader::DetectHeader(const vector<vector<LogicalType>> &best_sql_types_candidates,
1149:                                      const DataChunk &best_header_row) {
1150: 	// information for header detection
1151: 	bool first_row_consistent = true;
1152: 	bool first_row_nulls = false;
1153: 
1154: 	// check if header row is all null and/or consistent with detected column data types
1155: 	first_row_nulls = true;
1156: 	for (idx_t col = 0; col < best_sql_types_candidates.size(); col++) {
1157: 		auto dummy_val = best_header_row.GetValue(col, 0);
1158: 		if (!dummy_val.IsNull()) {
1159: 			first_row_nulls = false;
1160: 		}
1161: 
1162: 		// try cast to sql_type of column
1163: 		const auto &sql_type = best_sql_types_candidates[col].back();
1164: 		if (!TryCastValue(dummy_val, sql_type)) {
1165: 			first_row_consistent = false;
1166: 		}
1167: 	}
1168: 
1169: 	// update parser info, and read, generate & set col_names based on previous findings
1170: 	if (((!first_row_consistent || first_row_nulls) && !options.has_header) || (options.has_header && options.header)) {
1171: 		options.header = true;
1172: 		case_insensitive_map_t<idx_t> name_collision_count;
1173: 		// get header names from CSV
1174: 		for (idx_t col = 0; col < options.num_cols; col++) {
1175: 			const auto &val = best_header_row.GetValue(col, 0);
1176: 			string col_name = val.ToString();
1177: 
1178: 			// generate name if field is empty
1179: 			if (col_name.empty() || val.IsNull()) {
1180: 				col_name = GenerateColumnName(options.num_cols, col);
1181: 			}
1182: 
1183: 			// normalize names or at least trim whitespace
1184: 			if (options.normalize_names) {
1185: 				col_name = NormalizeColumnName(col_name);
1186: 			} else {
1187: 				col_name = TrimWhitespace(col_name);
1188: 			}
1189: 
1190: 			// avoid duplicate header names
1191: 			const string col_name_raw = col_name;
1192: 			while (name_collision_count.find(col_name) != name_collision_count.end()) {
1193: 				name_collision_count[col_name] += 1;
1194: 				col_name = col_name + "_" + to_string(name_collision_count[col_name]);
1195: 			}
1196: 
1197: 			col_names.push_back(col_name);
1198: 			name_collision_count[col_name] = 0;
1199: 		}
1200: 
1201: 	} else {
1202: 		options.header = false;
1203: 		for (idx_t col = 0; col < options.num_cols; col++) {
1204: 			string column_name = GenerateColumnName(options.num_cols, col);
1205: 			col_names.push_back(column_name);
1206: 		}
1207: 	}
1208: }
1209: 
1210: vector<LogicalType> BufferedCSVReader::RefineTypeDetection(const vector<LogicalType> &type_candidates,
1211:                                                            const vector<LogicalType> &requested_types,
1212:                                                            vector<vector<LogicalType>> &best_sql_types_candidates,
1213:                                                            map<LogicalTypeId, vector<string>> &best_format_candidates) {
1214: 	// for the type refine we set the SQL types to VARCHAR for all columns
1215: 	sql_types.clear();
1216: 	sql_types.assign(options.num_cols, LogicalType::VARCHAR);
1217: 
1218: 	vector<LogicalType> detected_types;
1219: 
1220: 	// if data types were provided, exit here if number of columns does not match
1221: 	if (!requested_types.empty()) {
1222: 		if (requested_types.size() != options.num_cols) {
1223: 			throw InvalidInputException(
1224: 			    "Error while determining column types: found %lld columns but expected %d. (%s)", options.num_cols,
1225: 			    requested_types.size(), options.ToString());
1226: 		} else {
1227: 			detected_types = requested_types;
1228: 		}
1229: 	} else if (options.all_varchar) {
1230: 		// return all types varchar
1231: 		detected_types = sql_types;
1232: 	} else {
1233: 		// jump through the rest of the file and continue to refine the sql type guess
1234: 		while (JumpToNextSample()) {
1235: 			InitParseChunk(sql_types.size());
1236: 			// if jump ends up a bad line, we just skip this chunk
1237: 			if (!TryParseCSV(ParserMode::SNIFFING_DATATYPES)) {
1238: 				continue;
1239: 			}
1240: 			for (idx_t col = 0; col < parse_chunk.ColumnCount(); col++) {
1241: 				vector<LogicalType> &col_type_candidates = best_sql_types_candidates[col];
1242: 				while (col_type_candidates.size() > 1) {
1243: 					const auto &sql_type = col_type_candidates.back();
1244: 					//	narrow down the date formats
1245: 					if (best_format_candidates.count(sql_type.id())) {
1246: 						auto &best_type_format_candidates = best_format_candidates[sql_type.id()];
1247: 						auto save_format_candidates = best_type_format_candidates;
1248: 						while (!best_type_format_candidates.empty()) {
1249: 							if (TryCastVector(parse_chunk.data[col], parse_chunk.size(), sql_type)) {
1250: 								break;
1251: 							}
1252: 							//	doesn't work - move to the next one
1253: 							best_type_format_candidates.pop_back();
1254: 							options.has_format[sql_type.id()] = (!best_type_format_candidates.empty());
1255: 							if (!best_type_format_candidates.empty()) {
1256: 								SetDateFormat(best_type_format_candidates.back(), sql_type.id());
1257: 							}
1258: 						}
1259: 						//	if none match, then this is not a column of type sql_type,
1260: 						if (best_type_format_candidates.empty()) {
1261: 							//	so restore the candidates that did work.
1262: 							best_type_format_candidates.swap(save_format_candidates);
1263: 							if (!best_type_format_candidates.empty()) {
1264: 								SetDateFormat(best_type_format_candidates.back(), sql_type.id());
1265: 							}
1266: 						}
1267: 					}
1268: 
1269: 					if (TryCastVector(parse_chunk.data[col], parse_chunk.size(), sql_type)) {
1270: 						break;
1271: 					} else {
1272: 						col_type_candidates.pop_back();
1273: 					}
1274: 				}
1275: 			}
1276: 
1277: 			if (!jumping_samples) {
1278: 				if ((sample_chunk_idx)*options.sample_chunk_size <= options.buffer_size) {
1279: 					// cache parse chunk
1280: 					// create a new chunk and fill it with the remainder
1281: 					auto chunk = make_unique<DataChunk>();
1282: 					auto parse_chunk_types = parse_chunk.GetTypes();
1283: 					chunk->Move(parse_chunk);
1284: 					cached_chunks.push(move(chunk));
1285: 				} else {
1286: 					while (!cached_chunks.empty()) {
1287: 						cached_chunks.pop();
1288: 					}
1289: 				}
1290: 			}
1291: 		}
1292: 
1293: 		// set sql types
1294: 		for (auto &best_sql_types_candidate : best_sql_types_candidates) {
1295: 			LogicalType d_type = best_sql_types_candidate.back();
1296: 			if (best_sql_types_candidate.size() == type_candidates.size()) {
1297: 				d_type = LogicalType::VARCHAR;
1298: 			}
1299: 			detected_types.push_back(d_type);
1300: 		}
1301: 	}
1302: 
1303: 	return detected_types;
1304: }
1305: 
1306: vector<LogicalType> BufferedCSVReader::SniffCSV(const vector<LogicalType> &requested_types) {
1307: 	for (auto &type : requested_types) {
1308: 		// auto detect for blobs not supported: there may be invalid UTF-8 in the file
1309: 		if (type.id() == LogicalTypeId::BLOB) {
1310: 			return requested_types;
1311: 		}
1312: 	}
1313: 
1314: 	// #######
1315: 	// ### dialect detection
1316: 	// #######
1317: 	BufferedCSVReaderOptions original_options = options;
1318: 	vector<BufferedCSVReaderOptions> info_candidates;
1319: 	idx_t best_num_cols = 0;
1320: 
1321: 	DetectDialect(requested_types, original_options, info_candidates, best_num_cols);
1322: 
1323: 	// if no dialect candidate was found, then file was most likely empty and we throw an exception
1324: 	if (info_candidates.empty()) {
1325: 		throw InvalidInputException(
1326: 		    "Error in file \"%s\": CSV options could not be auto-detected. Consider setting parser options manually.",
1327: 		    options.file_path);
1328: 	}
1329: 
1330: 	// #######
1331: 	// ### type detection (initial)
1332: 	// #######
1333: 	// type candidates, ordered by descending specificity (~ from high to low)
1334: 	vector<LogicalType> type_candidates = {
1335: 	    LogicalType::VARCHAR, LogicalType::TIMESTAMP,
1336: 	    LogicalType::DATE,    LogicalType::TIME,
1337: 	    LogicalType::DOUBLE,  /* LogicalType::FLOAT,*/ LogicalType::BIGINT,
1338: 	    LogicalType::INTEGER, /*LogicalType::SMALLINT, LogicalType::TINYINT,*/ LogicalType::BOOLEAN,
1339: 	    LogicalType::SQLNULL};
1340: 	// format template candidates, ordered by descending specificity (~ from high to low)
1341: 	std::map<LogicalTypeId, vector<const char *>> format_template_candidates = {
1342: 	    {LogicalTypeId::DATE, {"%m-%d-%Y", "%m-%d-%y", "%d-%m-%Y", "%d-%m-%y", "%Y-%m-%d", "%y-%m-%d"}},
1343: 	    {LogicalTypeId::TIMESTAMP,
1344: 	     {"%Y-%m-%d %H:%M:%S.%f", "%m-%d-%Y %I:%M:%S %p", "%m-%d-%y %I:%M:%S %p", "%d-%m-%Y %H:%M:%S",
1345: 	      "%d-%m-%y %H:%M:%S", "%Y-%m-%d %H:%M:%S", "%y-%m-%d %H:%M:%S"}},
1346: 	};
1347: 	vector<vector<LogicalType>> best_sql_types_candidates;
1348: 	map<LogicalTypeId, vector<string>> best_format_candidates;
1349: 	DataChunk best_header_row;
1350: 	DetectCandidateTypes(type_candidates, format_template_candidates, info_candidates, original_options, best_num_cols,
1351: 	                     best_sql_types_candidates, best_format_candidates, best_header_row);
1352: 
1353: 	// #######
1354: 	// ### header detection
1355: 	// #######
1356: 	options.num_cols = best_num_cols;
1357: 	DetectHeader(best_sql_types_candidates, best_header_row);
1358: 
1359: 	// #######
1360: 	// ### type detection (refining)
1361: 	// #######
1362: 	return RefineTypeDetection(type_candidates, requested_types, best_sql_types_candidates, best_format_candidates);
1363: }
1364: 
1365: bool BufferedCSVReader::TryParseComplexCSV(DataChunk &insert_chunk, string &error_message) {
1366: 	// used for parsing algorithm
1367: 	bool finished_chunk = false;
1368: 	idx_t column = 0;
1369: 	vector<idx_t> escape_positions;
1370: 	bool has_quotes = false;
1371: 	uint8_t delimiter_pos = 0, escape_pos = 0, quote_pos = 0;
1372: 	idx_t offset = 0;
1373: 
1374: 	// read values into the buffer (if any)
1375: 	if (position >= buffer_size) {
1376: 		if (!ReadBuffer(start)) {
1377: 			return true;
1378: 		}
1379: 	}
1380: 	// start parsing the first value
1381: 	start = position;
1382: 	goto value_start;
1383: value_start:
1384: 	/* state: value_start */
1385: 	// this state parses the first characters of a value
1386: 	offset = 0;
1387: 	delimiter_pos = 0;
1388: 	quote_pos = 0;
1389: 	do {
1390: 		idx_t count = 0;
1391: 		for (; position < buffer_size; position++) {
1392: 			quote_search.Match(quote_pos, buffer[position]);
1393: 			delimiter_search.Match(delimiter_pos, buffer[position]);
1394: 			count++;
1395: 			if (delimiter_pos == options.delimiter.size()) {
1396: 				// found a delimiter, add the value
1397: 				offset = options.delimiter.size() - 1;
1398: 				goto add_value;
1399: 			} else if (StringUtil::CharacterIsNewline(buffer[position])) {
1400: 				// found a newline, add the row
1401: 				goto add_row;
1402: 			}
1403: 			if (count > quote_pos) {
1404: 				// did not find a quote directly at the start of the value, stop looking for the quote now
1405: 				goto normal;
1406: 			}
1407: 			if (quote_pos == options.quote.size()) {
1408: 				// found a quote, go to quoted loop and skip the initial quote
1409: 				start += options.quote.size();
1410: 				goto in_quotes;
1411: 			}
1412: 		}
1413: 	} while (ReadBuffer(start));
1414: 	// file ends while scanning for quote/delimiter, go to final state
1415: 	goto final_state;
1416: normal:
1417: 	/* state: normal parsing state */
1418: 	// this state parses the remainder of a non-quoted value until we reach a delimiter or newline
1419: 	position++;
1420: 	do {
1421: 		for (; position < buffer_size; position++) {
1422: 			delimiter_search.Match(delimiter_pos, buffer[position]);
1423: 			if (delimiter_pos == options.delimiter.size()) {
1424: 				offset = options.delimiter.size() - 1;
1425: 				goto add_value;
1426: 			} else if (StringUtil::CharacterIsNewline(buffer[position])) {
1427: 				goto add_row;
1428: 			}
1429: 		}
1430: 	} while (ReadBuffer(start));
1431: 	goto final_state;
1432: add_value:
1433: 	AddValue(buffer.get() + start, position - start - offset, column, escape_positions, has_quotes);
1434: 	// increase position by 1 and move start to the new position
1435: 	offset = 0;
1436: 	has_quotes = false;
1437: 	start = ++position;
1438: 	if (position >= buffer_size && !ReadBuffer(start)) {
1439: 		// file ends right after delimiter, go to final state
1440: 		goto final_state;
1441: 	}
1442: 	goto value_start;
1443: add_row : {
1444: 	// check type of newline (\r or \n)
1445: 	bool carriage_return = buffer[position] == '\r';
1446: 	AddValue(buffer.get() + start, position - start - offset, column, escape_positions, has_quotes);
1447: 	finished_chunk = AddRow(insert_chunk, column);
1448: 	// increase position by 1 and move start to the new position
1449: 	offset = 0;
1450: 	has_quotes = false;
1451: 	start = ++position;
1452: 	if (position >= buffer_size && !ReadBuffer(start)) {
1453: 		// file ends right after newline, go to final state
1454: 		goto final_state;
1455: 	}
1456: 	if (carriage_return) {
1457: 		// \r newline, go to special state that parses an optional \n afterwards
1458: 		goto carriage_return;
1459: 	} else {
1460: 		// \n newline, move to value start
1461: 		if (finished_chunk) {
1462: 			return true;
1463: 		}
1464: 		goto value_start;
1465: 	}
1466: }
1467: in_quotes:
1468: 	/* state: in_quotes */
1469: 	// this state parses the remainder of a quoted value
1470: 	quote_pos = 0;
1471: 	escape_pos = 0;
1472: 	has_quotes = true;
1473: 	position++;
1474: 	do {
1475: 		for (; position < buffer_size; position++) {
1476: 			quote_search.Match(quote_pos, buffer[position]);
1477: 			escape_search.Match(escape_pos, buffer[position]);
1478: 			if (quote_pos == options.quote.size()) {
1479: 				goto unquote;
1480: 			} else if (escape_pos == options.escape.size()) {
1481: 				escape_positions.push_back(position - start - (options.escape.size() - 1));
1482: 				goto handle_escape;
1483: 			}
1484: 		}
1485: 	} while (ReadBuffer(start));
1486: 	// still in quoted state at the end of the file, error:
1487: 	error_message = StringUtil::Format("Error in file \"%s\" on line %s: unterminated quotes. (%s)", options.file_path,
1488: 	                                   GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());
1489: 	return false;
1490: unquote:
1491: 	/* state: unquote */
1492: 	// this state handles the state directly after we unquote
1493: 	// in this state we expect either another quote (entering the quoted state again, and escaping the quote)
1494: 	// or a delimiter/newline, ending the current value and moving on to the next value
1495: 	delimiter_pos = 0;
1496: 	quote_pos = 0;
1497: 	position++;
1498: 	if (position >= buffer_size && !ReadBuffer(start)) {
1499: 		// file ends right after unquote, go to final state
1500: 		offset = options.quote.size();
1501: 		goto final_state;
1502: 	}
1503: 	if (StringUtil::CharacterIsNewline(buffer[position])) {
1504: 		// quote followed by newline, add row
1505: 		offset = options.quote.size();
1506: 		goto add_row;
1507: 	}
1508: 	do {
1509: 		idx_t count = 0;
1510: 		for (; position < buffer_size; position++) {
1511: 			quote_search.Match(quote_pos, buffer[position]);
1512: 			delimiter_search.Match(delimiter_pos, buffer[position]);
1513: 			count++;
1514: 			if (count > delimiter_pos && count > quote_pos) {
1515: 				error_message = StringUtil::Format(
1516: 				    "Error in file \"%s\" on line %s: quote should be followed by end of value, end "
1517: 				    "of row or another quote. (%s)",
1518: 				    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());
1519: 				return false;
1520: 			}
1521: 			if (delimiter_pos == options.delimiter.size()) {
1522: 				// quote followed by delimiter, add value
1523: 				offset = options.quote.size() + options.delimiter.size() - 1;
1524: 				goto add_value;
1525: 			} else if (quote_pos == options.quote.size() &&
1526: 			           (options.escape.empty() || options.escape == options.quote)) {
1527: 				// quote followed by quote, go back to quoted state and add to escape
1528: 				escape_positions.push_back(position - start - (options.quote.size() - 1));
1529: 				goto in_quotes;
1530: 			}
1531: 		}
1532: 	} while (ReadBuffer(start));
1533: 	error_message = StringUtil::Format(
1534: 	    "Error in file \"%s\" on line %s: quote should be followed by end of value, end of row or another quote. (%s)",
1535: 	    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());
1536: 	return false;
1537: handle_escape:
1538: 	escape_pos = 0;
1539: 	quote_pos = 0;
1540: 	position++;
1541: 	do {
1542: 		idx_t count = 0;
1543: 		for (; position < buffer_size; position++) {
1544: 			quote_search.Match(quote_pos, buffer[position]);
1545: 			escape_search.Match(escape_pos, buffer[position]);
1546: 			count++;
1547: 			if (count > escape_pos && count > quote_pos) {
1548: 				error_message = StringUtil::Format(
1549: 				    "Error in file \"%s\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)",
1550: 				    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());
1551: 				return false;
1552: 			}
1553: 			if (quote_pos == options.quote.size() || escape_pos == options.escape.size()) {
1554: 				// found quote or escape: move back to quoted state
1555: 				goto in_quotes;
1556: 			}
1557: 		}
1558: 	} while (ReadBuffer(start));
1559: 	error_message =
1560: 	    StringUtil::Format("Error in file \"%s\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)",
1561: 	                       options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());
1562: 	return false;
1563: carriage_return:
1564: 	/* state: carriage_return */
1565: 	// this stage optionally skips a newline (\n) character, which allows \r\n to be interpreted as a single line
1566: 	if (buffer[position] == '\n') {
1567: 		// newline after carriage return: skip
1568: 		start = ++position;
1569: 		if (position >= buffer_size && !ReadBuffer(start)) {
1570: 			// file ends right after newline, go to final state
1571: 			goto final_state;
1572: 		}
1573: 	}
1574: 	if (finished_chunk) {
1575: 		return true;
1576: 	}
1577: 	goto value_start;
1578: final_state:
1579: 	if (finished_chunk) {
1580: 		return true;
1581: 	}
1582: 	if (column > 0 || position > start) {
1583: 		// remaining values to be added to the chunk
1584: 		AddValue(buffer.get() + start, position - start - offset, column, escape_positions, has_quotes);
1585: 		finished_chunk = AddRow(insert_chunk, column);
1586: 	}
1587: 	// final stage, only reached after parsing the file is finished
1588: 	// flush the parsed chunk and finalize parsing
1589: 	if (mode == ParserMode::PARSING) {
1590: 		Flush(insert_chunk);
1591: 	}
1592: 
1593: 	end_of_file_reached = true;
1594: 	return true;
1595: }
1596: 
1597: bool BufferedCSVReader::TryParseSimpleCSV(DataChunk &insert_chunk, string &error_message) {
1598: 	// used for parsing algorithm
1599: 	bool finished_chunk = false;
1600: 	idx_t column = 0;
1601: 	idx_t offset = 0;
1602: 	bool has_quotes = false;
1603: 	vector<idx_t> escape_positions;
1604: 
1605: 	// read values into the buffer (if any)
1606: 	if (position >= buffer_size) {
1607: 		if (!ReadBuffer(start)) {
1608: 			return true;
1609: 		}
1610: 	}
1611: 	// start parsing the first value
1612: 	goto value_start;
1613: value_start:
1614: 	offset = 0;
1615: 	/* state: value_start */
1616: 	// this state parses the first character of a value
1617: 	if (buffer[position] == options.quote[0]) {
1618: 		// quote: actual value starts in the next position
1619: 		// move to in_quotes state
1620: 		start = position + 1;
1621: 		goto in_quotes;
1622: 	} else {
1623: 		// no quote, move to normal parsing state
1624: 		start = position;
1625: 		goto normal;
1626: 	}
1627: normal:
1628: 	/* state: normal parsing state */
1629: 	// this state parses the remainder of a non-quoted value until we reach a delimiter or newline
1630: 	do {
1631: 		for (; position < buffer_size; position++) {
1632: 			if (buffer[position] == options.delimiter[0]) {
1633: 				// delimiter: end the value and add it to the chunk
1634: 				goto add_value;
1635: 			} else if (StringUtil::CharacterIsNewline(buffer[position])) {
1636: 				// newline: add row
1637: 				goto add_row;
1638: 			}
1639: 		}
1640: 	} while (ReadBuffer(start));
1641: 	// file ends during normal scan: go to end state
1642: 	goto final_state;
1643: add_value:
1644: 	AddValue(buffer.get() + start, position - start - offset, column, escape_positions, has_quotes);
1645: 	// increase position by 1 and move start to the new position
1646: 	offset = 0;
1647: 	has_quotes = false;
1648: 	start = ++position;
1649: 	if (position >= buffer_size && !ReadBuffer(start)) {
1650: 		// file ends right after delimiter, go to final state
1651: 		goto final_state;
1652: 	}
1653: 	goto value_start;
1654: add_row : {
1655: 	// check type of newline (\r or \n)
1656: 	bool carriage_return = buffer[position] == '\r';
1657: 	AddValue(buffer.get() + start, position - start - offset, column, escape_positions, has_quotes);
1658: 	finished_chunk = AddRow(insert_chunk, column);
1659: 	// increase position by 1 and move start to the new position
1660: 	offset = 0;
1661: 	has_quotes = false;
1662: 	start = ++position;
1663: 	if (position >= buffer_size && !ReadBuffer(start)) {
1664: 		// file ends right after delimiter, go to final state
1665: 		goto final_state;
1666: 	}
1667: 	if (carriage_return) {
1668: 		// \r newline, go to special state that parses an optional \n afterwards
1669: 		goto carriage_return;
1670: 	} else {
1671: 		// \n newline, move to value start
1672: 		if (finished_chunk) {
1673: 			return true;
1674: 		}
1675: 		goto value_start;
1676: 	}
1677: }
1678: in_quotes:
1679: 	/* state: in_quotes */
1680: 	// this state parses the remainder of a quoted value
1681: 	has_quotes = true;
1682: 	position++;
1683: 	do {
1684: 		for (; position < buffer_size; position++) {
1685: 			if (buffer[position] == options.quote[0]) {
1686: 				// quote: move to unquoted state
1687: 				goto unquote;
1688: 			} else if (buffer[position] == options.escape[0]) {
1689: 				// escape: store the escaped position and move to handle_escape state
1690: 				escape_positions.push_back(position - start);
1691: 				goto handle_escape;
1692: 			}
1693: 		}
1694: 	} while (ReadBuffer(start));
1695: 	// still in quoted state at the end of the file, error:
1696: 	throw InvalidInputException("Error in file \"%s\" on line %s: unterminated quotes. (%s)", options.file_path,
1697: 	                            GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());
1698: unquote:
1699: 	/* state: unquote */
1700: 	// this state handles the state directly after we unquote
1701: 	// in this state we expect either another quote (entering the quoted state again, and escaping the quote)
1702: 	// or a delimiter/newline, ending the current value and moving on to the next value
1703: 	position++;
1704: 	if (position >= buffer_size && !ReadBuffer(start)) {
1705: 		// file ends right after unquote, go to final state
1706: 		offset = 1;
1707: 		goto final_state;
1708: 	}
1709: 	if (buffer[position] == options.quote[0] && (options.escape.empty() || options.escape[0] == options.quote[0])) {
1710: 		// escaped quote, return to quoted state and store escape position
1711: 		escape_positions.push_back(position - start);
1712: 		goto in_quotes;
1713: 	} else if (buffer[position] == options.delimiter[0]) {
1714: 		// delimiter, add value
1715: 		offset = 1;
1716: 		goto add_value;
1717: 	} else if (StringUtil::CharacterIsNewline(buffer[position])) {
1718: 		offset = 1;
1719: 		goto add_row;
1720: 	} else {
1721: 		error_message = StringUtil::Format(
1722: 		    "Error in file \"%s\" on line %s: quote should be followed by end of value, end of "
1723: 		    "row or another quote. (%s)",
1724: 		    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());
1725: 		return false;
1726: 	}
1727: handle_escape:
1728: 	/* state: handle_escape */
1729: 	// escape should be followed by a quote or another escape character
1730: 	position++;
1731: 	if (position >= buffer_size && !ReadBuffer(start)) {
1732: 		error_message = StringUtil::Format(
1733: 		    "Error in file \"%s\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)", options.file_path,
1734: 		    GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());
1735: 		return false;
1736: 	}
1737: 	if (buffer[position] != options.quote[0] && buffer[position] != options.escape[0]) {
1738: 		error_message = StringUtil::Format(
1739: 		    "Error in file \"%s\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)", options.file_path,
1740: 		    GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());
1741: 		return false;
1742: 	}
1743: 	// escape was followed by quote or escape, go back to quoted state
1744: 	goto in_quotes;
1745: carriage_return:
1746: 	/* state: carriage_return */
1747: 	// this stage optionally skips a newline (\n) character, which allows \r\n to be interpreted as a single line
1748: 	if (buffer[position] == '\n') {
1749: 		// newline after carriage return: skip
1750: 		// increase position by 1 and move start to the new position
1751: 		start = ++position;
1752: 		if (position >= buffer_size && !ReadBuffer(start)) {
1753: 			// file ends right after delimiter, go to final state
1754: 			goto final_state;
1755: 		}
1756: 	}
1757: 	if (finished_chunk) {
1758: 		return true;
1759: 	}
1760: 	goto value_start;
1761: final_state:
1762: 	if (finished_chunk) {
1763: 		return true;
1764: 	}
1765: 
1766: 	if (column > 0 || position > start) {
1767: 		// remaining values to be added to the chunk
1768: 		AddValue(buffer.get() + start, position - start - offset, column, escape_positions, has_quotes);
1769: 		finished_chunk = AddRow(insert_chunk, column);
1770: 	}
1771: 
1772: 	// final stage, only reached after parsing the file is finished
1773: 	// flush the parsed chunk and finalize parsing
1774: 	if (mode == ParserMode::PARSING) {
1775: 		Flush(insert_chunk);
1776: 	}
1777: 
1778: 	end_of_file_reached = true;
1779: 	return true;
1780: }
1781: 
1782: bool BufferedCSVReader::ReadBuffer(idx_t &start) {
1783: 	auto old_buffer = move(buffer);
1784: 
1785: 	// the remaining part of the last buffer
1786: 	idx_t remaining = buffer_size - start;
1787: 
1788: 	bool large_buffers = mode == ParserMode::PARSING && !file_handle->OnDiskFile() && file_handle->CanSeek();
1789: 	idx_t buffer_read_size = large_buffers ? INITIAL_BUFFER_SIZE_LARGE : INITIAL_BUFFER_SIZE;
1790: 
1791: 	while (remaining > buffer_read_size) {
1792: 		buffer_read_size *= 2;
1793: 	}
1794: 
1795: 	// Check line length
1796: 	if (remaining > options.maximum_line_size) {
1797: 		throw InvalidInputException("Maximum line size of %llu bytes exceeded on line %s!", options.maximum_line_size,
1798: 		                            GetLineNumberStr(linenr, linenr_estimated));
1799: 	}
1800: 
1801: 	buffer = unique_ptr<char[]>(new char[buffer_read_size + remaining + 1]);
1802: 	buffer_size = remaining + buffer_read_size;
1803: 	if (remaining > 0) {
1804: 		// remaining from last buffer: copy it here
1805: 		memcpy(buffer.get(), old_buffer.get() + start, remaining);
1806: 	}
1807: 	idx_t read_count = file_handle->Read(buffer.get() + remaining, buffer_read_size);
1808: 
1809: 	bytes_in_chunk += read_count;
1810: 	buffer_size = remaining + read_count;
1811: 	buffer[buffer_size] = '\0';
1812: 	if (old_buffer) {
1813: 		cached_buffers.push_back(move(old_buffer));
1814: 	}
1815: 	start = 0;
1816: 	position = remaining;
1817: 	if (!bom_checked) {
1818: 		bom_checked = true;
1819: 		if (read_count >= 3 && buffer[0] == '\xEF' && buffer[1] == '\xBB' && buffer[2] == '\xBF') {
1820: 			position += 3;
1821: 		}
1822: 	}
1823: 
1824: 	return read_count > 0;
1825: }
1826: 
1827: void BufferedCSVReader::ParseCSV(DataChunk &insert_chunk) {
1828: 	// if no auto-detect or auto-detect with jumping samples, we have nothing cached and start from the beginning
1829: 	if (cached_chunks.empty()) {
1830: 		cached_buffers.clear();
1831: 	} else {
1832: 		auto &chunk = cached_chunks.front();
1833: 		parse_chunk.Move(*chunk);
1834: 		cached_chunks.pop();
1835: 		Flush(insert_chunk);
1836: 		return;
1837: 	}
1838: 
1839: 	string error_message;
1840: 	if (!TryParseCSV(ParserMode::PARSING, insert_chunk, error_message)) {
1841: 		throw InvalidInputException(error_message);
1842: 	}
1843: }
1844: 
1845: bool BufferedCSVReader::TryParseCSV(ParserMode mode) {
1846: 	DataChunk dummy_chunk;
1847: 	string error_message;
1848: 	return TryParseCSV(mode, dummy_chunk, error_message);
1849: }
1850: 
1851: void BufferedCSVReader::ParseCSV(ParserMode mode) {
1852: 	DataChunk dummy_chunk;
1853: 	string error_message;
1854: 	if (!TryParseCSV(mode, dummy_chunk, error_message)) {
1855: 		throw InvalidInputException(error_message);
1856: 	}
1857: }
1858: 
1859: bool BufferedCSVReader::TryParseCSV(ParserMode parser_mode, DataChunk &insert_chunk, string &error_message) {
1860: 	mode = parser_mode;
1861: 
1862: 	if (options.quote.size() <= 1 && options.escape.size() <= 1 && options.delimiter.size() == 1) {
1863: 		return TryParseSimpleCSV(insert_chunk, error_message);
1864: 	} else {
1865: 		return TryParseComplexCSV(insert_chunk, error_message);
1866: 	}
1867: }
1868: 
1869: void BufferedCSVReader::AddValue(char *str_val, idx_t length, idx_t &column, vector<idx_t> &escape_positions,
1870:                                  bool has_quotes) {
1871: 	if (length == 0 && column == 0) {
1872: 		row_empty = true;
1873: 	} else {
1874: 		row_empty = false;
1875: 	}
1876: 
1877: 	if (!sql_types.empty() && column == sql_types.size() && length == 0) {
1878: 		// skip a single trailing delimiter in last column
1879: 		return;
1880: 	}
1881: 	if (mode == ParserMode::SNIFFING_DIALECT) {
1882: 		column++;
1883: 		return;
1884: 	}
1885: 	if (column >= sql_types.size()) {
1886: 		if (options.ignore_errors) {
1887: 			error_column_overflow = true;
1888: 			return;
1889: 		} else {
1890: 			throw InvalidInputException("Error on line %s: expected %lld values per row, but got more. (%s)",
1891: 			                            GetLineNumberStr(linenr, linenr_estimated).c_str(), sql_types.size(),
1892: 			                            options.ToString());
1893: 		}
1894: 	}
1895: 
1896: 	// insert the line number into the chunk
1897: 	idx_t row_entry = parse_chunk.size();
1898: 
1899: 	str_val[length] = '\0';
1900: 
1901: 	// test against null string, but only if the value was not quoted
1902: 	if ((!has_quotes || sql_types[column].id() != LogicalTypeId::VARCHAR) && !options.force_not_null[column] &&
1903: 	    strcmp(options.null_str.c_str(), str_val) == 0) {
1904: 		FlatVector::SetNull(parse_chunk.data[column], row_entry, true);
1905: 	} else {
1906: 		auto &v = parse_chunk.data[column];
1907: 		auto parse_data = FlatVector::GetData<string_t>(v);
1908: 		if (!escape_positions.empty()) {
1909: 			// remove escape characters (if any)
1910: 			string old_val = str_val;
1911: 			string new_val = "";
1912: 			idx_t prev_pos = 0;
1913: 			for (idx_t i = 0; i < escape_positions.size(); i++) {
1914: 				idx_t next_pos = escape_positions[i];
1915: 				new_val += old_val.substr(prev_pos, next_pos - prev_pos);
1916: 
1917: 				if (options.escape.empty() || options.escape == options.quote) {
1918: 					prev_pos = next_pos + options.quote.size();
1919: 				} else {
1920: 					prev_pos = next_pos + options.escape.size();
1921: 				}
1922: 			}
1923: 			new_val += old_val.substr(prev_pos, old_val.size() - prev_pos);
1924: 			escape_positions.clear();
1925: 			parse_data[row_entry] = StringVector::AddStringOrBlob(v, string_t(new_val));
1926: 		} else {
1927: 			parse_data[row_entry] = string_t(str_val, length);
1928: 		}
1929: 	}
1930: 
1931: 	// move to the next column
1932: 	column++;
1933: }
1934: 
1935: bool BufferedCSVReader::AddRow(DataChunk &insert_chunk, idx_t &column) {
1936: 	linenr++;
1937: 
1938: 	if (row_empty) {
1939: 		row_empty = false;
1940: 		if (sql_types.size() != 1) {
1941: 			if (mode == ParserMode::PARSING) {
1942: 				FlatVector::SetNull(parse_chunk.data[0], parse_chunk.size(), false);
1943: 			}
1944: 			column = 0;
1945: 			return false;
1946: 		}
1947: 	}
1948: 
1949: 	// Error forwarded by 'ignore_errors' - originally encountered in 'AddValue'
1950: 	if (error_column_overflow) {
1951: 		D_ASSERT(options.ignore_errors);
1952: 		error_column_overflow = false;
1953: 		column = 0;
1954: 		return false;
1955: 	}
1956: 
1957: 	if (column < sql_types.size() && mode != ParserMode::SNIFFING_DIALECT) {
1958: 		if (options.ignore_errors) {
1959: 			column = 0;
1960: 			return false;
1961: 		} else {
1962: 			throw InvalidInputException("Error on line %s: expected %lld values per row, but got %d. (%s)",
1963: 			                            GetLineNumberStr(linenr, linenr_estimated).c_str(), sql_types.size(), column,
1964: 			                            options.ToString());
1965: 		}
1966: 	}
1967: 
1968: 	if (mode == ParserMode::SNIFFING_DIALECT) {
1969: 		sniffed_column_counts.push_back(column);
1970: 
1971: 		if (sniffed_column_counts.size() == options.sample_chunk_size) {
1972: 			return true;
1973: 		}
1974: 	} else {
1975: 		parse_chunk.SetCardinality(parse_chunk.size() + 1);
1976: 	}
1977: 
1978: 	if (mode == ParserMode::PARSING_HEADER) {
1979: 		return true;
1980: 	}
1981: 
1982: 	if (mode == ParserMode::SNIFFING_DATATYPES && parse_chunk.size() == options.sample_chunk_size) {
1983: 		return true;
1984: 	}
1985: 
1986: 	if (mode == ParserMode::PARSING && parse_chunk.size() == STANDARD_VECTOR_SIZE) {
1987: 		Flush(insert_chunk);
1988: 		return true;
1989: 	}
1990: 
1991: 	column = 0;
1992: 	return false;
1993: }
1994: 
1995: void BufferedCSVReader::SetNullUnionCols(DataChunk &insert_chunk) {
1996: 	for (idx_t col = 0; col < insert_nulls_idx.size(); ++col) {
1997: 		insert_chunk.data[insert_nulls_idx[col]].SetVectorType(VectorType::CONSTANT_VECTOR);
1998: 		ConstantVector::SetNull(insert_chunk.data[insert_nulls_idx[col]], true);
1999: 	}
2000: }
2001: 
2002: void BufferedCSVReader::Flush(DataChunk &insert_chunk) {
2003: 	if (parse_chunk.size() == 0) {
2004: 		return;
2005: 	}
2006: 
2007: 	bool conversion_error_ignored = false;
2008: 
2009: 	// convert the columns in the parsed chunk to the types of the table
2010: 	insert_chunk.SetCardinality(parse_chunk);
2011: 	for (idx_t col_idx = 0; col_idx < sql_types.size(); col_idx++) {
2012: 		if (sql_types[col_idx].id() == LogicalTypeId::VARCHAR) {
2013: 			// target type is varchar: no need to convert
2014: 			// just test that all strings are valid utf-8 strings
2015: 			auto parse_data = FlatVector::GetData<string_t>(parse_chunk.data[col_idx]);
2016: 			for (idx_t i = 0; i < parse_chunk.size(); i++) {
2017: 				if (!FlatVector::IsNull(parse_chunk.data[col_idx], i)) {
2018: 					auto s = parse_data[i];
2019: 					auto utf_type = Utf8Proc::Analyze(s.GetDataUnsafe(), s.GetSize());
2020: 					if (utf_type == UnicodeType::INVALID) {
2021: 						string col_name = to_string(col_idx);
2022: 						if (col_idx < col_names.size()) {
2023: 							col_name = "\"" + col_names[col_idx] + "\"";
2024: 						}
2025: 						throw InvalidInputException("Error in file \"%s\" between line %llu and %llu in column \"%s\": "
2026: 						                            "file is not valid UTF8. Parser options: %s",
2027: 						                            options.file_path, linenr - parse_chunk.size(), linenr, col_name,
2028: 						                            options.ToString());
2029: 					}
2030: 				}
2031: 			}
2032: 			insert_chunk.data[insert_cols_idx[col_idx]].Reference(parse_chunk.data[col_idx]);
2033: 		} else {
2034: 			string error_message;
2035: 			bool success;
2036: 			if (options.has_format[LogicalTypeId::DATE] && sql_types[col_idx].id() == LogicalTypeId::DATE) {
2037: 				// use the date format to cast the chunk
2038: 				success =
2039: 				    TryCastDateVector(options, parse_chunk.data[col_idx], insert_chunk.data[insert_cols_idx[col_idx]],
2040: 				                      parse_chunk.size(), error_message);
2041: 			} else if (options.has_format[LogicalTypeId::TIMESTAMP] &&
2042: 			           sql_types[col_idx].id() == LogicalTypeId::TIMESTAMP) {
2043: 				// use the date format to cast the chunk
2044: 				success = TryCastTimestampVector(options, parse_chunk.data[col_idx],
2045: 				                                 insert_chunk.data[insert_cols_idx[col_idx]], parse_chunk.size(),
2046: 				                                 error_message);
2047: 			} else {
2048: 				// target type is not varchar: perform a cast
2049: 				success = VectorOperations::DefaultTryCast(parse_chunk.data[col_idx],
2050: 				                                           insert_chunk.data[insert_cols_idx[col_idx]],
2051: 				                                           parse_chunk.size(), &error_message);
2052: 			}
2053: 			if (success) {
2054: 				continue;
2055: 			}
2056: 			if (options.ignore_errors) {
2057: 				conversion_error_ignored = true;
2058: 				continue;
2059: 			}
2060: 			string col_name = to_string(col_idx);
2061: 			if (col_idx < col_names.size()) {
2062: 				col_name = "\"" + col_names[col_idx] + "\"";
2063: 			}
2064: 
2065: 			if (options.auto_detect) {
2066: 				throw InvalidInputException("%s in column %s, between line %llu and %llu. Parser "
2067: 				                            "options: %s. Consider either increasing the sample size "
2068: 				                            "(SAMPLE_SIZE=X [X rows] or SAMPLE_SIZE=-1 [all rows]), "
2069: 				                            "or skipping column conversion (ALL_VARCHAR=1)",
2070: 				                            error_message, col_name, linenr - parse_chunk.size() + 1, linenr,
2071: 				                            options.ToString());
2072: 			} else {
2073: 				throw InvalidInputException("%s between line %llu and %llu in column %s. Parser options: %s ",
2074: 				                            error_message, linenr - parse_chunk.size(), linenr, col_name,
2075: 				                            options.ToString());
2076: 			}
2077: 		}
2078: 	}
2079: 	if (conversion_error_ignored) {
2080: 		D_ASSERT(options.ignore_errors);
2081: 		SelectionVector succesful_rows;
2082: 		succesful_rows.Initialize(parse_chunk.size());
2083: 		idx_t sel_size = 0;
2084: 
2085: 		for (idx_t row_idx = 0; row_idx < parse_chunk.size(); row_idx++) {
2086: 			bool failed = false;
2087: 			for (idx_t column_idx = 0; column_idx < sql_types.size(); column_idx++) {
2088: 
2089: 				auto &inserted_column = insert_chunk.data[column_idx];
2090: 				auto &parsed_column = parse_chunk.data[column_idx];
2091: 
2092: 				bool was_already_null = FlatVector::IsNull(parsed_column, row_idx);
2093: 				if (!was_already_null && FlatVector::IsNull(inserted_column, row_idx)) {
2094: 					failed = true;
2095: 					break;
2096: 				}
2097: 			}
2098: 			if (!failed) {
2099: 				succesful_rows.set_index(sel_size++, row_idx);
2100: 			}
2101: 		}
2102: 		insert_chunk.Slice(succesful_rows, sel_size);
2103: 	}
2104: 	parse_chunk.Reset();
2105: }
2106: } // namespace duckdb
[end of src/execution/operator/persistent/buffered_csv_reader.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: