diff --git a/test/sql/json/test_json_extract.test b/test/sql/json/test_json_extract.test
index 80c3281aebe6..7a20fd45e613 100644
--- a/test/sql/json/test_json_extract.test
+++ b/test/sql/json/test_json_extract.test
@@ -251,3 +251,19 @@ query T
 SELECT x::JSON->'$.settings.layer2."tris.legomenon"."summary.report"' FROM t12;
 ----
 false
+
+# can't deal with force reload / force storage (#5132)
+
+require skip_reload
+
+# test issue #5063
+statement ok
+create table test5063 as select '{"a": 1, "b": 2}' js
+
+statement ok
+prepare q1 as SELECT js->CAST(? AS STRING) FROM test5063
+
+query T
+execute q1('a')
+----
+1
diff --git a/test/sql/storage/test_buffer_manager.cpp b/test/sql/storage/test_buffer_manager.cpp
index c54078d16e8e..5e267a91cb8b 100644
--- a/test/sql/storage/test_buffer_manager.cpp
+++ b/test/sql/storage/test_buffer_manager.cpp
@@ -285,3 +285,22 @@ TEST_CASE("Test buffer reallocation", "[storage][.]") {
 		D_ASSERT(buffer_manager.GetUsedMemory() == align(requested_size + Storage::BLOCK_HEADER_SIZE));
 	}
 }
+
+TEST_CASE("Test buffer manager variable size allocations", "[storage][.]") {
+	auto storage_database = TestCreatePath("storage_test");
+	auto config = GetTestConfig();
+	// make sure the database does not exist
+	DeleteDatabase(storage_database);
+	DuckDB db(storage_database, config.get());
+	Connection con(db);
+
+	auto &buffer_manager = BufferManager::GetBufferManager(*con.context);
+	D_ASSERT(buffer_manager.GetUsedMemory() == 0);
+
+	idx_t requested_size = 424242;
+	auto block = buffer_manager.RegisterMemory(requested_size, false);
+	D_ASSERT(buffer_manager.GetUsedMemory() >= requested_size + Storage::BLOCK_HEADER_SIZE);
+
+	block.reset();
+	D_ASSERT(buffer_manager.GetUsedMemory() == 0);
+}
