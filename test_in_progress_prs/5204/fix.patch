diff --git a/extension/json/include/json_common.hpp b/extension/json/include/json_common.hpp
index 26733a444914..f8030e5a7c14 100644
--- a/extension/json/include/json_common.hpp
+++ b/extension/json/include/json_common.hpp
@@ -221,7 +221,7 @@ struct JSONCommon {
 		}
 		default:
 			auto str = "/" + string(ptr, len);
-			return GetPointerUnsafe<YYJSON_VAL_T>(root, str.c_str(), len);
+			return GetPointerUnsafe<YYJSON_VAL_T>(root, str.c_str(), len + 1);
 		}
 	}
 
diff --git a/src/parser/expression/lambda_expression.cpp b/src/parser/expression/lambda_expression.cpp
index 82843592daef..eb369a358966 100644
--- a/src/parser/expression/lambda_expression.cpp
+++ b/src/parser/expression/lambda_expression.cpp
@@ -18,7 +18,6 @@ bool LambdaExpression::Equals(const LambdaExpression *a, const LambdaExpression
 }
 
 hash_t LambdaExpression::Hash() const {
-
 	hash_t result = lhs->Hash();
 	ParsedExpression::Hash();
 	result = CombineHash(result, expr->Hash());
@@ -26,7 +25,9 @@ hash_t LambdaExpression::Hash() const {
 }
 
 unique_ptr<ParsedExpression> LambdaExpression::Copy() const {
-	return make_unique<LambdaExpression>(lhs->Copy(), expr->Copy());
+	auto copy = make_unique<LambdaExpression>(lhs->Copy(), expr->Copy());
+	copy->CopyProperties(*this);
+	return move(copy);
 }
 
 void LambdaExpression::Serialize(FieldWriter &writer) const {
diff --git a/src/storage/buffer_manager.cpp b/src/storage/buffer_manager.cpp
index 9c10e1df7ee5..07de643af938 100644
--- a/src/storage/buffer_manager.cpp
+++ b/src/storage/buffer_manager.cpp
@@ -4,8 +4,8 @@
 #include "duckdb/common/exception.hpp"
 #include "duckdb/common/set.hpp"
 #include "duckdb/parallel/concurrentqueue.hpp"
-#include "duckdb/storage/storage_manager.hpp"
 #include "duckdb/storage/in_memory_block_manager.hpp"
+#include "duckdb/storage/storage_manager.hpp"
 
 namespace duckdb {
 
@@ -57,7 +57,7 @@ BlockHandle::BlockHandle(BlockManager &block_manager, block_id_t block_id_p, uni
       unswizzled(nullptr) {
 	buffer = move(buffer_p);
 	state = BlockState::BLOCK_LOADED;
-	memory_usage = buffer->AllocSize();
+	memory_usage = block_size;
 	memory_charge = move(reservation);
 }
 
@@ -333,7 +333,7 @@ shared_ptr<BlockHandle> BufferManager::RegisterMemory(idx_t block_size, bool can
 	auto buffer = ConstructManagedBuffer(block_size, move(reusable_buffer));
 
 	// create a new block pointer for this block
-	return make_shared<BlockHandle>(*temp_block_manager, ++temporary_id, move(buffer), can_destroy, block_size,
+	return make_shared<BlockHandle>(*temp_block_manager, ++temporary_id, move(buffer), can_destroy, alloc_size,
 	                                move(res));
 }
 
