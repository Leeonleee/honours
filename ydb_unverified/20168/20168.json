{
  "repo": "ydb-platform/ydb",
  "pull_number": 20168,
  "instance_id": "ydb-platform__ydb-20168",
  "issue_numbers": [
    "19647"
  ],
  "base_commit": "c561449d7935363bbeddb9bd59f4fc7b74e5521e",
  "patch": "diff --git a/ydb/core/protos/index_builder.proto b/ydb/core/protos/index_builder.proto\nindex 491b4f7518ba..b7c3f14b5fd2 100644\n--- a/ydb/core/protos/index_builder.proto\n+++ b/ydb/core/protos/index_builder.proto\n@@ -33,6 +33,7 @@ message TMeteringStats {\n     optional uint64 UploadBytes = 2;\n     optional uint64 ReadRows = 3;\n     optional uint64 ReadBytes = 4;\n+    optional uint64 CpuTimeUs = 5;\n }\n \n message TIndexBuildSettings {\ndiff --git a/ydb/core/tablet_flat/flat_scan_actor.h b/ydb/core/tablet_flat/flat_scan_actor.h\nindex 8b609207f8e2..4b99647af63a 100644\n--- a/ydb/core/tablet_flat/flat_scan_actor.h\n+++ b/ydb/core/tablet_flat/flat_scan_actor.h\n@@ -443,7 +443,7 @@ namespace NOps {\n         void SendStat(const TStatState& stat)\n         {\n             ui64 elapsedUs = 1000000. * NHPTimer::GetSeconds(stat.ElapsedCycles());\n-\n+            TotalCpuTimeUs += elapsedUs;\n             SendToOwner(new TEvScanStat(elapsedUs, stat.Seen, stat.Skipped));\n         }\n \n@@ -479,9 +479,9 @@ namespace NOps {\n                 processed += stat.UpdateRows(Seen, Skipped);\n \n                 if (ready == NTable::EReady::Gone) {\n-                    Terminate(EStatus::Done);\n                     stat.UpdateCycles();\n                     SendStat(stat);\n+                    Terminate(EStatus::Done);\n                     return;\n                 }\n \n@@ -498,9 +498,9 @@ namespace NOps {\n                 if (!MayProgress()) {\n                     // We must honor EReady::Gone from an implicit callback\n                     if (ImplicitPageFault() == NTable::EReady::Gone) {\n-                        Terminate(EStatus::Done);\n                         stat.UpdateCycles();\n                         SendStat(stat);\n+                        Terminate(EStatus::Done);\n                         return;\n                     }\n \n@@ -713,6 +713,11 @@ namespace NOps {\n             Send(Owner, event.Release(), flags);\n         }\n \n+        ui64 GetTotalCpuTimeUs() const override\n+        {\n+            return TotalCpuTimeUs;\n+        }\n+\n     private:\n         struct TBlobQueueRequest {\n             TActorId Sender;\n@@ -742,6 +747,7 @@ namespace NOps {\n \n         const NHPTimer::STime MaxCyclesPerIteration;\n         static constexpr ui64 MinRowsPerCheck = 1000;\n+        ui64 TotalCpuTimeUs = 0;\n     };\n \n }\ndiff --git a/ydb/core/tablet_flat/flat_scan_iface.h b/ydb/core/tablet_flat/flat_scan_iface.h\nindex bde8247c2d37..a1cae453e08d 100644\n--- a/ydb/core/tablet_flat/flat_scan_iface.h\n+++ b/ydb/core/tablet_flat/flat_scan_iface.h\n@@ -80,6 +80,8 @@ namespace NTable {\n \n         // Stops scan and calls IScan::Finish(const std::exception&)\n         virtual void Throw(const std::exception& exc) = 0;\n+\n+        virtual ui64 GetTotalCpuTimeUs() const = 0;\n     };\n \n \ndiff --git a/ydb/core/tx/datashard/build_index/local_kmeans.cpp b/ydb/core/tx/datashard/build_index/local_kmeans.cpp\nindex 87df3fcc71d0..17b1eb8bb00b 100644\n--- a/ydb/core/tx/datashard/build_index/local_kmeans.cpp\n+++ b/ydb/core/tx/datashard/build_index/local_kmeans.cpp\n@@ -172,6 +172,7 @@ class TLocalKMeansScan: public TActor<TLocalKMeansScan>, public IActorExceptionH\n         auto& record = Response->Record;\n         record.MutableMeteringStats()->SetReadRows(ReadRows);\n         record.MutableMeteringStats()->SetReadBytes(ReadBytes);\n+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());\n \n         Uploader.Finish(record, status);\n \ndiff --git a/ydb/core/tx/datashard/build_index/prefix_kmeans.cpp b/ydb/core/tx/datashard/build_index/prefix_kmeans.cpp\nindex ddda1833360a..f5a445d75405 100644\n--- a/ydb/core/tx/datashard/build_index/prefix_kmeans.cpp\n+++ b/ydb/core/tx/datashard/build_index/prefix_kmeans.cpp\n@@ -205,6 +205,7 @@ class TPrefixKMeansScan: public TActor<TPrefixKMeansScan>, public IActorExceptio\n         auto& record = Response->Record;\n         record.MutableMeteringStats()->SetReadRows(ReadRows);\n         record.MutableMeteringStats()->SetReadBytes(ReadBytes);\n+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());\n \n         Uploader.Finish(record, status);\n \ndiff --git a/ydb/core/tx/datashard/build_index/recompute_kmeans.cpp b/ydb/core/tx/datashard/build_index/recompute_kmeans.cpp\nindex fd4ab997158b..a0c925985702 100644\n--- a/ydb/core/tx/datashard/build_index/recompute_kmeans.cpp\n+++ b/ydb/core/tx/datashard/build_index/recompute_kmeans.cpp\n@@ -109,6 +109,7 @@ class TRecomputeKMeansScan: public TActor<TRecomputeKMeansScan>, public IActorEx\n         auto& record = Response->Record;\n         record.MutableMeteringStats()->SetReadRows(ReadRows);\n         record.MutableMeteringStats()->SetReadBytes(ReadBytes);\n+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());\n \n         if (status == EStatus::Exception) {\n             record.SetStatus(NKikimrIndexBuilder::EBuildStatus::BUILD_ERROR);\ndiff --git a/ydb/core/tx/datashard/build_index/reshuffle_kmeans.cpp b/ydb/core/tx/datashard/build_index/reshuffle_kmeans.cpp\nindex 54fb0697bb9f..83170e1af6c8 100644\n--- a/ydb/core/tx/datashard/build_index/reshuffle_kmeans.cpp\n+++ b/ydb/core/tx/datashard/build_index/reshuffle_kmeans.cpp\n@@ -144,6 +144,7 @@ class TReshuffleKMeansScan: public TActor<TReshuffleKMeansScan>, public IActorEx\n         auto& record = Response->Record;\n         record.MutableMeteringStats()->SetReadRows(ReadRows);\n         record.MutableMeteringStats()->SetReadBytes(ReadBytes);\n+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());\n \n         Uploader.Finish(record, status);\n \ndiff --git a/ydb/core/tx/datashard/build_index/sample_k.cpp b/ydb/core/tx/datashard/build_index/sample_k.cpp\nindex bab26978b76a..26cf8ffe8a02 100644\n--- a/ydb/core/tx/datashard/build_index/sample_k.cpp\n+++ b/ydb/core/tx/datashard/build_index/sample_k.cpp\n@@ -155,6 +155,7 @@ class TSampleKScan final: public TActor<TSampleKScan>, public IActorExceptionHan\n         auto& record = Response->Record;\n         record.MutableMeteringStats()->SetReadRows(ReadRows);\n         record.MutableMeteringStats()->SetReadBytes(ReadBytes);\n+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());\n \n         if (status == EStatus::Exception) {\n             record.SetStatus(NKikimrIndexBuilder::EBuildStatus::BUILD_ERROR);\ndiff --git a/ydb/core/tx/datashard/datashard_ut_incremental_restore_scan.cpp b/ydb/core/tx/datashard/datashard_ut_incremental_restore_scan.cpp\nindex fe412ddb699f..50eb97a8f6ea 100644\n--- a/ydb/core/tx/datashard/datashard_ut_incremental_restore_scan.cpp\n+++ b/ydb/core/tx/datashard/datashard_ut_incremental_restore_scan.cpp\n@@ -28,6 +28,10 @@ class TDriverMock\n     void Throw(const std::exception& exc) override {\n         Y_ENSURE(false, exc.what());\n     }\n+\n+    ui64 GetTotalCpuTimeUs() const override {\n+        return 0;\n+    }\n };\n \n class TCbExecutorActor : public TActorBootstrapped<TCbExecutorActor> {\ndiff --git a/ydb/core/tx/schemeshard/schemeshard_billing_helpers.cpp b/ydb/core/tx/schemeshard/schemeshard_billing_helpers.cpp\nindex 8c4bedf0ff9b..216bca13f3a2 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_billing_helpers.cpp\n+++ b/ydb/core/tx/schemeshard/schemeshard_billing_helpers.cpp\n@@ -23,6 +23,7 @@ TMeteringStats& operator += (TMeteringStats& value, const TMeteringStats& other)\n     value.SetUploadBytes(value.GetUploadBytes() + other.GetUploadBytes());\n     value.SetReadRows(value.GetReadRows() + other.GetReadRows());\n     value.SetReadBytes(value.GetReadBytes() + other.GetReadBytes());\n+    value.SetCpuTimeUs(value.GetCpuTimeUs() + other.GetCpuTimeUs());\n     return value;\n }\n \n@@ -39,6 +40,7 @@ TMeteringStats& operator -= (TMeteringStats& value, const TMeteringStats& other)\n     value.SetUploadBytes(safeSub(value.GetUploadBytes(), other.GetUploadBytes()));\n     value.SetReadRows(safeSub(value.GetReadRows(), other.GetReadRows()));\n     value.SetReadBytes(safeSub(value.GetReadBytes(), other.GetReadBytes()));\n+    value.SetCpuTimeUs(safeSub(value.GetCpuTimeUs(), other.GetCpuTimeUs()));\n     return value;\n }\n \n@@ -57,6 +59,7 @@ TMeteringStats TMeteringStatsHelper::ZeroValue() {\n     value.SetUploadBytes(0);\n     value.SetReadRows(0);\n     value.SetReadBytes(0);\n+    value.SetCpuTimeUs(0);\n     return value;\n }\n \n@@ -64,7 +67,8 @@ bool TMeteringStatsHelper::IsZero(TMeteringStats& value) {\n     return value.GetUploadRows() == 0\n         && value.GetUploadBytes() == 0\n         && value.GetReadRows() == 0\n-        && value.GetReadBytes() == 0;\n+        && value.GetReadBytes() == 0\n+        && value.GetCpuTimeUs() == 0;\n }\n \n ui64 TRUCalculator::ReadTable(ui64 bytes) {\n@@ -84,15 +88,28 @@ ui64 TRUCalculator::BulkUpsert(ui64 bytes, ui64 rows) {\n     return (Max(rows, (bytes + 1_KB - 1) / 1_KB) + 1) / 2;\n }\n \n+ui64 TRUCalculator::CPU(ui64 \u0441puTimeUs) {\n+    // The sum is divided by the CPU time increment of 1.5 ms, rounded down and converted to RU.\n+    // https://yandex.cloud/en-ru/docs/ydb/pricing/ru-yql\n+    return \u0441puTimeUs / 1500;\n+}\n+\n ui64 TRUCalculator::Calculate(const TMeteringStats& stats, TString& explain) {\n     // The cost of building an index is the sum of the cost of ReadTable from the source table and BulkUpsert to the index table.\n     // https://yandex.cloud/en-ru/docs/ydb/pricing/ru-special#secondary-index\n+\n+    // To evaluate the YDB API request cost, the CPU cost and the I/O cost are calculated. A maximum from the calculated values is selected.\n+    // https://yandex.cloud/en-ru/docs/ydb/pricing/ru-yql\n+\n     ui64 readTable = TRUCalculator::ReadTable(stats.GetReadBytes());\n     ui64 bulkUpsert = TRUCalculator::BulkUpsert(stats.GetUploadBytes(), stats.GetUploadRows());\n+    ui64 cpu = TRUCalculator::CPU(stats.GetCpuTimeUs());\n     explain = TStringBuilder()\n         << \"ReadTable: \" << readTable\n-        << \", BulkUpsert: \" << bulkUpsert;\n-    return readTable + bulkUpsert;\n+        << \", BulkUpsert: \" << bulkUpsert\n+        << \", CPU: \" << cpu;\n+\n+    return Max(readTable + bulkUpsert, cpu);\n }\n \n }\ndiff --git a/ydb/core/tx/schemeshard/schemeshard_billing_helpers.h b/ydb/core/tx/schemeshard/schemeshard_billing_helpers.h\nindex 536de515f455..9fb91947497b 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_billing_helpers.h\n+++ b/ydb/core/tx/schemeshard/schemeshard_billing_helpers.h\n@@ -21,6 +21,7 @@ struct TMeteringStatsHelper {\n struct TRUCalculator {\n     static ui64 ReadTable(ui64 bytes);\n     static ui64 BulkUpsert(ui64 bytes, ui64 rows);\n+    static ui64 CPU(ui64 \u0441puTimeUs);\n     static ui64 Calculate(const TMeteringStats& stats, TString& explain);\n };\n \ndiff --git a/ydb/core/tx/schemeshard/schemeshard_build_index.cpp b/ydb/core/tx/schemeshard/schemeshard_build_index.cpp\nindex ec1c44a0db5f..52137e137413 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_build_index.cpp\n+++ b/ydb/core/tx/schemeshard/schemeshard_build_index.cpp\n@@ -229,7 +229,8 @@ void TSchemeShard::PersistBuildIndexProcessed(NIceDb::TNiceDb& db, const TIndexB\n         NIceDb::TUpdate<Schema::IndexBuild::UploadRowsProcessed>(indexInfo.Processed.GetUploadRows()),\n         NIceDb::TUpdate<Schema::IndexBuild::UploadBytesProcessed>(indexInfo.Processed.GetUploadBytes()),\n         NIceDb::TUpdate<Schema::IndexBuild::ReadRowsProcessed>(indexInfo.Processed.GetReadRows()),\n-        NIceDb::TUpdate<Schema::IndexBuild::ReadBytesProcessed>(indexInfo.Processed.GetReadBytes())\n+        NIceDb::TUpdate<Schema::IndexBuild::ReadBytesProcessed>(indexInfo.Processed.GetReadBytes()),\n+        NIceDb::TUpdate<Schema::IndexBuild::CpuTimeUsProcessed>(indexInfo.Processed.GetCpuTimeUs())\n     );\n }\n \n@@ -238,7 +239,8 @@ void TSchemeShard::PersistBuildIndexBilled(NIceDb::TNiceDb& db, const TIndexBuil\n         NIceDb::TUpdate<Schema::IndexBuild::UploadRowsBilled>(indexInfo.Billed.GetUploadRows()),\n         NIceDb::TUpdate<Schema::IndexBuild::UploadBytesBilled>(indexInfo.Billed.GetUploadBytes()),\n         NIceDb::TUpdate<Schema::IndexBuild::ReadRowsBilled>(indexInfo.Billed.GetReadRows()),\n-        NIceDb::TUpdate<Schema::IndexBuild::ReadBytesBilled>(indexInfo.Billed.GetReadBytes())\n+        NIceDb::TUpdate<Schema::IndexBuild::ReadBytesBilled>(indexInfo.Billed.GetReadBytes()),\n+        NIceDb::TUpdate<Schema::IndexBuild::CpuTimeUsBilled>(indexInfo.Processed.GetCpuTimeUs())\n     );\n }\n \n@@ -251,7 +253,8 @@ void TSchemeShard::PersistBuildIndexUploadProgress(NIceDb::TNiceDb& db, TIndexBu\n         NIceDb::TUpdate<Schema::IndexBuildShardStatus::UploadRowsProcessed>(shardStatus.Processed.GetUploadRows()),\n         NIceDb::TUpdate<Schema::IndexBuildShardStatus::UploadBytesProcessed>(shardStatus.Processed.GetUploadBytes()),\n         NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadRowsProcessed>(shardStatus.Processed.GetReadRows()),\n-        NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadBytesProcessed>(shardStatus.Processed.GetReadBytes())\n+        NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadBytesProcessed>(shardStatus.Processed.GetReadBytes()),\n+        NIceDb::TUpdate<Schema::IndexBuildShardStatus::CpuTimeUsProcessed>(shardStatus.Processed.GetCpuTimeUs())\n     );\n }\n \n@@ -274,7 +277,8 @@ void TSchemeShard::PersistBuildIndexUploadReset(NIceDb::TNiceDb& db, TIndexBuild\n         NIceDb::TUpdate<Schema::IndexBuildShardStatus::UploadRowsProcessed>(shardStatus.Processed.GetUploadRows()),\n         NIceDb::TUpdate<Schema::IndexBuildShardStatus::UploadBytesProcessed>(shardStatus.Processed.GetUploadBytes()),\n         NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadRowsProcessed>(shardStatus.Processed.GetReadRows()),\n-        NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadBytesProcessed>(shardStatus.Processed.GetReadBytes())\n+        NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadBytesProcessed>(shardStatus.Processed.GetReadBytes()),\n+        NIceDb::TUpdate<Schema::IndexBuildShardStatus::CpuTimeUsProcessed>(shardStatus.Processed.GetCpuTimeUs())\n     );\n }\n \ndiff --git a/ydb/core/tx/schemeshard/schemeshard_info_types.h b/ydb/core/tx/schemeshard/schemeshard_info_types.h\nindex 07b47d5b0a8b..e8345eaa7383 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_info_types.h\n+++ b/ydb/core/tx/schemeshard/schemeshard_info_types.h\n@@ -3643,6 +3643,7 @@ struct TIndexBuildInfo: public TSimpleRefCount<TIndexBuildInfo> {\n         indexInfo->Billed.SetUploadBytes(row.template GetValueOrDefault<Schema::IndexBuild::UploadBytesBilled>(0));\n         indexInfo->Billed.SetReadRows(row.template GetValueOrDefault<Schema::IndexBuild::ReadRowsBilled>(0));\n         indexInfo->Billed.SetReadBytes(row.template GetValueOrDefault<Schema::IndexBuild::ReadBytesBilled>(0));\n+        indexInfo->Billed.SetCpuTimeUs(row.template GetValueOrDefault<Schema::IndexBuild::CpuTimeUsBilled>(0));\n         if (indexInfo->IsFillBuildIndex()) {\n             TMeteringStatsHelper::TryFixOldFormat(indexInfo->Billed);\n         }\n@@ -3651,6 +3652,7 @@ struct TIndexBuildInfo: public TSimpleRefCount<TIndexBuildInfo> {\n         indexInfo->Processed.SetUploadBytes(row.template GetValueOrDefault<Schema::IndexBuild::UploadBytesProcessed>(0));\n         indexInfo->Processed.SetReadRows(row.template GetValueOrDefault<Schema::IndexBuild::ReadRowsProcessed>(0));\n         indexInfo->Processed.SetReadBytes(row.template GetValueOrDefault<Schema::IndexBuild::ReadBytesProcessed>(0));\n+        indexInfo->Processed.SetCpuTimeUs(row.template GetValueOrDefault<Schema::IndexBuild::CpuTimeUsProcessed>(0));\n         if (indexInfo->IsFillBuildIndex()) {\n             TMeteringStatsHelper::TryFixOldFormat(indexInfo->Processed);\n         }\n@@ -3720,6 +3722,7 @@ struct TIndexBuildInfo: public TSimpleRefCount<TIndexBuildInfo> {\n         shardStatus.Processed.SetUploadBytes(row.template GetValueOrDefault<Schema::IndexBuildShardStatus::UploadBytesProcessed>(0));\n         shardStatus.Processed.SetReadRows(row.template GetValueOrDefault<Schema::IndexBuildShardStatus::ReadRowsProcessed>(0));\n         shardStatus.Processed.SetReadBytes(row.template GetValueOrDefault<Schema::IndexBuildShardStatus::ReadBytesProcessed>(0));\n+        shardStatus.Processed.SetCpuTimeUs(row.template GetValueOrDefault<Schema::IndexBuildShardStatus::CpuTimeUsProcessed>(0));\n         if (IsFillBuildIndex()) {\n             TMeteringStatsHelper::TryFixOldFormat(shardStatus.Processed);\n         }\ndiff --git a/ydb/core/tx/schemeshard/schemeshard_schema.h b/ydb/core/tx/schemeshard/schemeshard_schema.h\nindex e4732de680f7..7a599fcaaebb 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_schema.h\n+++ b/ydb/core/tx/schemeshard/schemeshard_schema.h\n@@ -1423,6 +1423,9 @@ struct Schema : NIceDb::Schema {\n         struct EndTime : Column<42, NScheme::NTypeIds::Uint64> {};\n         struct UserSID : Column<43, NScheme::NTypeIds::Utf8> {};\n \n+        struct CpuTimeUsBilled : Column<44, NScheme::NTypeIds::Uint64> {};\n+        struct CpuTimeUsProcessed : Column<45, NScheme::NTypeIds::Uint64> {};\n+\n         using TKey = TableKey<Id>;\n         using TColumns = TableColumns<\n             Id,\n@@ -1467,7 +1470,9 @@ struct Schema : NIceDb::Schema {\n             ReadBytesProcessed,\n             StartTime,\n             EndTime,\n-            UserSID\n+            UserSID,\n+            CpuTimeUsBilled,\n+            CpuTimeUsProcessed\n         >;\n     };\n \n@@ -1543,6 +1548,8 @@ struct Schema : NIceDb::Schema {\n         struct ReadRowsProcessed : Column<11, NScheme::NTypeIds::Uint64> {};\n         struct ReadBytesProcessed : Column<12, NScheme::NTypeIds::Uint64> {};\n \n+        struct CpuTimeUsProcessed : Column<13, NScheme::NTypeIds::Uint64> {};\n+\n         using TKey = TableKey<Id, OwnerShardIdx, LocalShardIdx>;\n         using TColumns = TableColumns<\n             Id,\n@@ -1556,7 +1563,8 @@ struct Schema : NIceDb::Schema {\n             RowsProcessed,\n             BytesProcessed,\n             ReadRowsProcessed,\n-            ReadBytesProcessed\n+            ReadBytesProcessed,\n+            CpuTimeUsProcessed\n         >;\n     };\n \ndiff --git a/ydb/core/tx/schemeshard/ut_index_build/ut_vector_index_build.cpp b/ydb/core/tx/schemeshard/ut_index_build/ut_vector_index_build.cpp\nindex 0e9956ae4a0a..4423b369b6a6 100644\n--- a/ydb/core/tx/schemeshard/ut_index_build/ut_vector_index_build.cpp\n+++ b/ydb/core/tx/schemeshard/ut_index_build/ut_vector_index_build.cpp\n@@ -14,7 +14,56 @@ using namespace NKikimr;\n using namespace NSchemeShard;\n using namespace NSchemeShardUT_Private;\n \n-Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n+namespace {\n+    // to check cpu converted to request units it should be big enough\n+    const ui64 CpuTimeUsMultiplier = 150;\n+\n+    template<class TEvType>\n+    bool MakeCpuMeteringDeterministic(const TEvType& ev) {\n+        auto stats = ev->Get()->Record.MutableMeteringStats();\n+        UNIT_ASSERT(stats->HasCpuTimeUs());\n+        stats->SetCpuTimeUs((stats->GetReadRows() + stats->GetUploadRows()) * CpuTimeUsMultiplier);\n+        return false;\n+    }\n+\n+    auto MakeCpuMeteringDeterministic(TTestBasicRuntime& runtime) {\n+        return std::make_tuple(\n+            MakeHolder<TBlockEvents<TEvDataShard::TEvSampleKResponse>>(runtime, [&](const auto& ev) {\n+                return MakeCpuMeteringDeterministic(ev);\n+            }),\n+            MakeHolder<TBlockEvents<TEvIndexBuilder::TEvUploadSampleKResponse>>(runtime, [&](const auto& ev) {\n+                // special internal Scheme Shard event, no cpu, but AddRead/AddUpload helpers will fix it\n+                auto stats = ev->Get()->Record.MutableMeteringStats();\n+                UNIT_ASSERT(!stats->HasCpuTimeUs() || stats->GetCpuTimeUs() == (stats->GetReadRows() + stats->GetUploadRows()) * CpuTimeUsMultiplier);\n+                stats->SetCpuTimeUs((stats->GetReadRows() + stats->GetUploadRows()) * CpuTimeUsMultiplier);\n+                return false;\n+            }),\n+            MakeHolder<TBlockEvents<TEvDataShard::TEvRecomputeKMeansResponse>>(runtime, [&](const auto& ev) {\n+                return MakeCpuMeteringDeterministic(ev);\n+            }),\n+            MakeHolder<TBlockEvents<TEvDataShard::TEvReshuffleKMeansResponse>>(runtime, [&](const auto& ev) {\n+                return MakeCpuMeteringDeterministic(ev);\n+            }),\n+            MakeHolder<TBlockEvents<TEvDataShard::TEvLocalKMeansResponse>>(runtime, [&](const auto& ev) {\n+                return MakeCpuMeteringDeterministic(ev);\n+            })\n+        );\n+    }\n+\n+    void AddRead(TMeteringStats& stats, ui64 rows, ui64 bytes) {\n+        stats.SetReadRows(stats.GetReadRows() + rows);\n+        stats.SetReadBytes(stats.GetReadBytes() + bytes);\n+        stats.SetCpuTimeUs(stats.GetCpuTimeUs() + rows * CpuTimeUsMultiplier); // see MakeCpuMeteringDeterministic\n+    }\n+\n+    void AddUpload(TMeteringStats& stats, ui64 rows, ui64 bytes) {\n+        stats.SetUploadRows(stats.GetUploadRows() + rows);\n+        stats.SetUploadBytes(stats.GetUploadBytes() + bytes);\n+        stats.SetCpuTimeUs(stats.GetCpuTimeUs() + rows * CpuTimeUsMultiplier); // see MakeCpuMeteringDeterministic\n+    }\n+}\n+\n+Y_UNIT_TEST_SUITE(VectorIndexBuildTest) {\n     Y_UNIT_TEST(CreateAndDrop) {\n         TTestBasicRuntime runtime;\n         TTestEnv env(runtime);\n@@ -325,6 +374,7 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n \n         runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);\n         runtime.SetLogPriority(NKikimrServices::BUILD_INDEX, NLog::PRI_TRACE);\n+        auto deterministicMetering = MakeCpuMeteringDeterministic(runtime);\n \n         TestCreateExtSubDomain(runtime, ++txId, \"/MyRoot\", \"Name: \\\"CommonDB\\\"\");\n         env.TestWaitNotification(runtime, txId);\n@@ -433,6 +483,7 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n \n         runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);\n         runtime.SetLogPriority(NKikimrServices::BUILD_INDEX, NLog::PRI_TRACE);\n+        auto deterministicMetering = MakeCpuMeteringDeterministic(runtime);\n \n         ui64 tenantSchemeShard = 0;\n         TestCreateServerLessDb(runtime, env, txId, tenantSchemeShard);\n@@ -530,8 +581,7 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n             sampleKBlocker.Unblock();\n         }\n         // SAMPLE reads table once, no writes:\n-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);\n-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);\n+        AddRead(expectedBillingStats, tableRows, tableBytes);\n         logBillingStats();\n         UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());\n \n@@ -541,16 +591,14 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n                 runtime.WaitFor(\"recomputeK\", [&]{ return recomputeKBlocker.size(); });\n                 recomputeKBlocker.Unblock();\n             }\n-            expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);\n-            expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);\n+            AddRead(expectedBillingStats, tableRows, tableBytes);\n             logBillingStats();\n             UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());\n         }\n \n         runtime.WaitFor(\"uploadSampleK\", [&]{ return uploadSampleKBlocker.size(); });\n         // upload SAMPLE writes K level rows, no reads:\n-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + K);\n-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + K * levelRowBytes);\n+        AddUpload(expectedBillingStats, K, K * levelRowBytes);\n         logBillingStats();\n         UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());\n         uploadSampleKBlocker.Unblock();\n@@ -578,10 +626,8 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n             reshuffleBlocker.Unblock();\n         }\n         // RESHUFFLE reads and writes table once:\n-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + tableRows);\n-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + buildBytes);\n-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);\n-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);\n+        AddUpload(expectedBillingStats, tableRows, buildBytes);\n+        AddRead(expectedBillingStats, tableRows, tableBytes);\n         logBillingStats();\n         UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());\n \n@@ -591,20 +637,16 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n         }\n         // KMEANS writes build table once and forms at least K, at most K * K level rows\n         // (depending on clustering uniformity; it's not so good on test data)\n-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + tableRows);\n-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + postingBytes);\n+        AddUpload(expectedBillingStats, tableRows, postingBytes);\n         UNIT_ASSERT(billingStats.GetUploadRows() >= expectedBillingStats.GetUploadRows() + K);\n         const ui64 level2clusters = billingStats.GetUploadRows() - expectedBillingStats.GetUploadRows();\n-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + level2clusters);\n-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + level2clusters * levelRowBytes);\n+        AddUpload(expectedBillingStats, level2clusters, level2clusters * levelRowBytes);\n         if (smallScanBuffer) {\n             // KMEANS reads build table 5 times (SAMPLE + KMEANS * 3 + UPLOAD):\n-            expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows * 5);\n-            expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  buildBytes * 5);\n+            AddRead(expectedBillingStats, tableRows * 5, buildBytes * 5);\n         } else {\n             // KMEANS reads build table once:\n-            expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);\n-            expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  buildBytes);\n+            AddRead(expectedBillingStats, tableRows, buildBytes);\n         }\n         logBillingStats();\n         UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());\n@@ -651,6 +693,7 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n \n         runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);\n         runtime.SetLogPriority(NKikimrServices::BUILD_INDEX, NLog::PRI_TRACE);\n+        auto deterministicMetering = MakeCpuMeteringDeterministic(runtime);\n \n         ui64 tenantSchemeShard = 0;\n         TestCreateServerLessDb(runtime, env, txId, tenantSchemeShard);\n@@ -718,19 +761,17 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n \n         runtime.WaitFor(\"reshuffle\", [&]{ return reshuffleBlocker.size(); });\n         // SAMPLE reads table once, no writes:\n-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);\n-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);\n+        AddRead(expectedBillingStats, tableRows, tableBytes);\n         // every RECOMPUTE round reads table once, no writes; there are 3 recompute rounds:\n-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows * 3);\n-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes * 3);\n+        AddRead(expectedBillingStats, tableRows * 3, tableBytes * 3);\n         // upload SAMPLE writes K level rows, no reads:\n-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + K);\n-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + K * levelRowBytes);\n+        AddUpload(expectedBillingStats, K, K * levelRowBytes);\n         {\n             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);\n             Cout << \"BuildIndex 1 \" << buildIndexHtml << Endl;\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Processed: \" + expectedBillingStats.ShortDebugString());\n-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, \"Request Units: 130 (ReadTable: 128, BulkUpsert: 2)\");\n+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << \"Request Units: 130 (ReadTable: 128, BulkUpsert: 2, \" \n+                << \"CPU: \" << expectedBillingStats.GetCpuTimeUs() / 1500 << \")\");\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Billed: \" + billedStats.ShortDebugString());\n         }\n         runtime.WaitFor(\"metering\", [&]{ return meteringBlocker.size(); });\n@@ -758,24 +799,24 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);\n             Cout << \"BuildIndex 2 \" << buildIndexHtml << Endl;\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Processed: \" + expectedBillingStats.ShortDebugString());\n-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, \"Request Units: 130 (ReadTable: 128, BulkUpsert: 2)\");\n+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << \"Request Units: 130 (ReadTable: 128, BulkUpsert: 2, \" \n+                << \"CPU: \" << expectedBillingStats.GetCpuTimeUs() / 1500 << \")\");\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Billed: \" + billedStats.ShortDebugString());\n         }\n \n         reshuffleBlocker.Unblock();\n         runtime.WaitFor(\"reshuffle\", [&]{ return reshuffleBlocker.size(); });\n         // shard RESHUFFLE reads and writes once:\n-        TMeteringStats shardReshuffleBillingStats;\n-        shardReshuffleBillingStats.SetUploadRows(shardRows);\n-        shardReshuffleBillingStats.SetUploadBytes(buildShardBytes);\n-        shardReshuffleBillingStats.SetReadRows(shardRows);\n-        shardReshuffleBillingStats.SetReadBytes(tableShardBytes);\n+        TMeteringStats shardReshuffleBillingStats = TMeteringStatsHelper::ZeroValue();\n+        AddUpload(shardReshuffleBillingStats, shardRows, buildShardBytes);\n+        AddRead(shardReshuffleBillingStats, shardRows, tableShardBytes);\n         expectedBillingStats += shardReshuffleBillingStats;\n         {\n             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);\n             Cout << \"BuildIndex 3 \" << buildIndexHtml << Endl;\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Processed: \" + expectedBillingStats.ShortDebugString());\n-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, \"Request Units: 155 (ReadTable: 128, BulkUpsert: 27)\");\n+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << \"Request Units: 155 (ReadTable: 128, BulkUpsert: 27, \" \n+                << \"CPU: \" << expectedBillingStats.GetCpuTimeUs() / 1500 << \")\");\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Billed: \" + billedStats.ShortDebugString());\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, \"<td>\" + shardReshuffleBillingStats.ShortDebugString());\n         }\n@@ -804,7 +845,8 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);\n             Cout << \"BuildIndex 4 \" << buildIndexHtml << Endl;\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Processed: \" + expectedBillingStats.ShortDebugString());\n-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, \"Request Units: 155 (ReadTable: 128, BulkUpsert: 27)\");\n+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << \"Request Units: 155 (ReadTable: 128, BulkUpsert: 27, \" \n+                << \"CPU: \" << expectedBillingStats.GetCpuTimeUs() / 1500 << \")\");\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Billed: \" + billedStats.ShortDebugString());\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, \"<td>\" + shardReshuffleBillingStats.ShortDebugString());\n         }\n@@ -812,10 +854,8 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n         reshuffleBlocker.Stop().Unblock();\n         // RESHUFFLE reads and writes table once:\n         expectedBillingStats -= shardReshuffleBillingStats; // already added\n-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + tableRows);\n-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + buildBytes);\n-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);\n-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);\n+        AddUpload(expectedBillingStats, tableRows, buildBytes);\n+        AddRead(expectedBillingStats, tableRows, tableBytes);\n     \n         if (doRestarts) {\n             runtime.WaitFor(\"localKMeans\", [&]{ return localKMeansBlocker.size(); });\n@@ -825,17 +865,16 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n \n         env.TestWaitNotification(runtime, buildIndexTx, tenantSchemeShard);\n         // KMEANS writes build table once and forms K * K level rows:\n-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + tableRows + K * K);\n-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + postingBytes + K * K * levelRowBytes);\n+        AddUpload(expectedBillingStats, tableRows + K * K, postingBytes + K * K * levelRowBytes);\n         // KMEANS reads build table 5 times (SAMPLE + KMEANS * 3 + UPLOAD):\n-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows * 5);\n-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  buildBytes * 5);\n+        AddRead(expectedBillingStats, tableRows * 5, buildBytes * 5);\n         {\n             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);\n             Cout << \"BuildIndex 5 \" << buildIndexHtml << Endl;\n             Cout << expectedBillingStats.ShortDebugString() << Endl;\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Processed: \" + expectedBillingStats.ShortDebugString());\n-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, \"Request Units: 338 (ReadTable: 128, BulkUpsert: 210)\");\n+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << \"Request Units: 338 (ReadTable: 128, BulkUpsert: 210, \" \n+                << \"CPU: \" << expectedBillingStats.GetCpuTimeUs() / 1500 << \")\");\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Billed: \" + expectedBillingStats.ShortDebugString());\n         }\n         runtime.WaitFor(\"metering\", [&]{ return meteringBlocker.size(); });\n@@ -863,7 +902,8 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {\n             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);\n             Cout << \"BuildIndex 6 \" << buildIndexHtml << Endl;\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Processed: \" + expectedBillingStats.ShortDebugString());\n-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, \"Request Units: 338 (ReadTable: 128, BulkUpsert: 210)\");\n+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << \"Request Units: 338 (ReadTable: 128, BulkUpsert: 210, \" \n+                << \"CPU: \" << expectedBillingStats.GetCpuTimeUs() / 1500 << \")\");\n             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  \"Billed: \" + expectedBillingStats.ShortDebugString());\n         }\n     }\n",
  "test_patch": "diff --git a/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_schemeshard_/flat_schemeshard.schema b/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_schemeshard_/flat_schemeshard.schema\nindex bc1b465101e7..b5e7138d8f3c 100644\n--- a/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_schemeshard_/flat_schemeshard.schema\n+++ b/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_schemeshard_/flat_schemeshard.schema\n@@ -5243,6 +5243,16 @@\n                 \"ColumnId\": 43,\n                 \"ColumnName\": \"UserSID\",\n                 \"ColumnType\": \"Utf8\"\n+            },\n+            {\n+                \"ColumnId\": 44,\n+                \"ColumnName\": \"CpuTimeUsBilled\",\n+                \"ColumnType\": \"Uint64\"\n+            },\n+            {\n+                \"ColumnId\": 45,\n+                \"ColumnName\": \"CpuTimeUsProcessed\",\n+                \"ColumnType\": \"Uint64\"\n             }\n         ],\n         \"ColumnsDropped\": [],\n@@ -5291,7 +5301,9 @@\n                     40,\n                     41,\n                     42,\n-                    43\n+                    43,\n+                    44,\n+                    45\n                 ],\n                 \"RoomID\": 0,\n                 \"Codec\": 0,\n@@ -5584,6 +5596,11 @@\n                 \"ColumnId\": 12,\n                 \"ColumnName\": \"ReadBytesProcessed\",\n                 \"ColumnType\": \"Uint64\"\n+            },\n+            {\n+                \"ColumnId\": 13,\n+                \"ColumnName\": \"CpuTimeUsProcessed\",\n+                \"ColumnType\": \"Uint64\"\n             }\n         ],\n         \"ColumnsDropped\": [],\n@@ -5601,7 +5618,8 @@\n                     9,\n                     10,\n                     11,\n-                    12\n+                    12,\n+                    13\n                 ],\n                 \"RoomID\": 0,\n                 \"Codec\": 0,\n",
  "problem_statement": "Bill ServerLess CPU consumption\nSecondary index build usually involves only read-write operations\n\nBut vector index build also eats lots of CPU on vector operatons\n\nWe should bill them too as https://yandex.cloud/en-ru/docs/ydb/pricing/ru-yql\n",
  "hints_text": "",
  "created_at": "2025-06-25T12:58:32Z"
}