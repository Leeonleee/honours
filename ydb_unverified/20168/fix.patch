diff --git a/ydb/core/protos/index_builder.proto b/ydb/core/protos/index_builder.proto
index 491b4f7518ba..b7c3f14b5fd2 100644
--- a/ydb/core/protos/index_builder.proto
+++ b/ydb/core/protos/index_builder.proto
@@ -33,6 +33,7 @@ message TMeteringStats {
     optional uint64 UploadBytes = 2;
     optional uint64 ReadRows = 3;
     optional uint64 ReadBytes = 4;
+    optional uint64 CpuTimeUs = 5;
 }
 
 message TIndexBuildSettings {
diff --git a/ydb/core/tablet_flat/flat_scan_actor.h b/ydb/core/tablet_flat/flat_scan_actor.h
index 8b609207f8e2..4b99647af63a 100644
--- a/ydb/core/tablet_flat/flat_scan_actor.h
+++ b/ydb/core/tablet_flat/flat_scan_actor.h
@@ -443,7 +443,7 @@ namespace NOps {
         void SendStat(const TStatState& stat)
         {
             ui64 elapsedUs = 1000000. * NHPTimer::GetSeconds(stat.ElapsedCycles());
-
+            TotalCpuTimeUs += elapsedUs;
             SendToOwner(new TEvScanStat(elapsedUs, stat.Seen, stat.Skipped));
         }
 
@@ -479,9 +479,9 @@ namespace NOps {
                 processed += stat.UpdateRows(Seen, Skipped);
 
                 if (ready == NTable::EReady::Gone) {
-                    Terminate(EStatus::Done);
                     stat.UpdateCycles();
                     SendStat(stat);
+                    Terminate(EStatus::Done);
                     return;
                 }
 
@@ -498,9 +498,9 @@ namespace NOps {
                 if (!MayProgress()) {
                     // We must honor EReady::Gone from an implicit callback
                     if (ImplicitPageFault() == NTable::EReady::Gone) {
-                        Terminate(EStatus::Done);
                         stat.UpdateCycles();
                         SendStat(stat);
+                        Terminate(EStatus::Done);
                         return;
                     }
 
@@ -713,6 +713,11 @@ namespace NOps {
             Send(Owner, event.Release(), flags);
         }
 
+        ui64 GetTotalCpuTimeUs() const override
+        {
+            return TotalCpuTimeUs;
+        }
+
     private:
         struct TBlobQueueRequest {
             TActorId Sender;
@@ -742,6 +747,7 @@ namespace NOps {
 
         const NHPTimer::STime MaxCyclesPerIteration;
         static constexpr ui64 MinRowsPerCheck = 1000;
+        ui64 TotalCpuTimeUs = 0;
     };
 
 }
diff --git a/ydb/core/tablet_flat/flat_scan_iface.h b/ydb/core/tablet_flat/flat_scan_iface.h
index bde8247c2d37..a1cae453e08d 100644
--- a/ydb/core/tablet_flat/flat_scan_iface.h
+++ b/ydb/core/tablet_flat/flat_scan_iface.h
@@ -80,6 +80,8 @@ namespace NTable {
 
         // Stops scan and calls IScan::Finish(const std::exception&)
         virtual void Throw(const std::exception& exc) = 0;
+
+        virtual ui64 GetTotalCpuTimeUs() const = 0;
     };
 
 
diff --git a/ydb/core/tx/datashard/build_index/local_kmeans.cpp b/ydb/core/tx/datashard/build_index/local_kmeans.cpp
index 87df3fcc71d0..17b1eb8bb00b 100644
--- a/ydb/core/tx/datashard/build_index/local_kmeans.cpp
+++ b/ydb/core/tx/datashard/build_index/local_kmeans.cpp
@@ -172,6 +172,7 @@ class TLocalKMeansScan: public TActor<TLocalKMeansScan>, public IActorExceptionH
         auto& record = Response->Record;
         record.MutableMeteringStats()->SetReadRows(ReadRows);
         record.MutableMeteringStats()->SetReadBytes(ReadBytes);
+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());
 
         Uploader.Finish(record, status);
 
diff --git a/ydb/core/tx/datashard/build_index/prefix_kmeans.cpp b/ydb/core/tx/datashard/build_index/prefix_kmeans.cpp
index ddda1833360a..f5a445d75405 100644
--- a/ydb/core/tx/datashard/build_index/prefix_kmeans.cpp
+++ b/ydb/core/tx/datashard/build_index/prefix_kmeans.cpp
@@ -205,6 +205,7 @@ class TPrefixKMeansScan: public TActor<TPrefixKMeansScan>, public IActorExceptio
         auto& record = Response->Record;
         record.MutableMeteringStats()->SetReadRows(ReadRows);
         record.MutableMeteringStats()->SetReadBytes(ReadBytes);
+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());
 
         Uploader.Finish(record, status);
 
diff --git a/ydb/core/tx/datashard/build_index/recompute_kmeans.cpp b/ydb/core/tx/datashard/build_index/recompute_kmeans.cpp
index fd4ab997158b..a0c925985702 100644
--- a/ydb/core/tx/datashard/build_index/recompute_kmeans.cpp
+++ b/ydb/core/tx/datashard/build_index/recompute_kmeans.cpp
@@ -109,6 +109,7 @@ class TRecomputeKMeansScan: public TActor<TRecomputeKMeansScan>, public IActorEx
         auto& record = Response->Record;
         record.MutableMeteringStats()->SetReadRows(ReadRows);
         record.MutableMeteringStats()->SetReadBytes(ReadBytes);
+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());
 
         if (status == EStatus::Exception) {
             record.SetStatus(NKikimrIndexBuilder::EBuildStatus::BUILD_ERROR);
diff --git a/ydb/core/tx/datashard/build_index/reshuffle_kmeans.cpp b/ydb/core/tx/datashard/build_index/reshuffle_kmeans.cpp
index 54fb0697bb9f..83170e1af6c8 100644
--- a/ydb/core/tx/datashard/build_index/reshuffle_kmeans.cpp
+++ b/ydb/core/tx/datashard/build_index/reshuffle_kmeans.cpp
@@ -144,6 +144,7 @@ class TReshuffleKMeansScan: public TActor<TReshuffleKMeansScan>, public IActorEx
         auto& record = Response->Record;
         record.MutableMeteringStats()->SetReadRows(ReadRows);
         record.MutableMeteringStats()->SetReadBytes(ReadBytes);
+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());
 
         Uploader.Finish(record, status);
 
diff --git a/ydb/core/tx/datashard/build_index/sample_k.cpp b/ydb/core/tx/datashard/build_index/sample_k.cpp
index bab26978b76a..26cf8ffe8a02 100644
--- a/ydb/core/tx/datashard/build_index/sample_k.cpp
+++ b/ydb/core/tx/datashard/build_index/sample_k.cpp
@@ -155,6 +155,7 @@ class TSampleKScan final: public TActor<TSampleKScan>, public IActorExceptionHan
         auto& record = Response->Record;
         record.MutableMeteringStats()->SetReadRows(ReadRows);
         record.MutableMeteringStats()->SetReadBytes(ReadBytes);
+        record.MutableMeteringStats()->SetCpuTimeUs(Driver->GetTotalCpuTimeUs());
 
         if (status == EStatus::Exception) {
             record.SetStatus(NKikimrIndexBuilder::EBuildStatus::BUILD_ERROR);
diff --git a/ydb/core/tx/datashard/datashard_ut_incremental_restore_scan.cpp b/ydb/core/tx/datashard/datashard_ut_incremental_restore_scan.cpp
index fe412ddb699f..50eb97a8f6ea 100644
--- a/ydb/core/tx/datashard/datashard_ut_incremental_restore_scan.cpp
+++ b/ydb/core/tx/datashard/datashard_ut_incremental_restore_scan.cpp
@@ -28,6 +28,10 @@ class TDriverMock
     void Throw(const std::exception& exc) override {
         Y_ENSURE(false, exc.what());
     }
+
+    ui64 GetTotalCpuTimeUs() const override {
+        return 0;
+    }
 };
 
 class TCbExecutorActor : public TActorBootstrapped<TCbExecutorActor> {
diff --git a/ydb/core/tx/schemeshard/schemeshard_billing_helpers.cpp b/ydb/core/tx/schemeshard/schemeshard_billing_helpers.cpp
index 8c4bedf0ff9b..216bca13f3a2 100644
--- a/ydb/core/tx/schemeshard/schemeshard_billing_helpers.cpp
+++ b/ydb/core/tx/schemeshard/schemeshard_billing_helpers.cpp
@@ -23,6 +23,7 @@ TMeteringStats& operator += (TMeteringStats& value, const TMeteringStats& other)
     value.SetUploadBytes(value.GetUploadBytes() + other.GetUploadBytes());
     value.SetReadRows(value.GetReadRows() + other.GetReadRows());
     value.SetReadBytes(value.GetReadBytes() + other.GetReadBytes());
+    value.SetCpuTimeUs(value.GetCpuTimeUs() + other.GetCpuTimeUs());
     return value;
 }
 
@@ -39,6 +40,7 @@ TMeteringStats& operator -= (TMeteringStats& value, const TMeteringStats& other)
     value.SetUploadBytes(safeSub(value.GetUploadBytes(), other.GetUploadBytes()));
     value.SetReadRows(safeSub(value.GetReadRows(), other.GetReadRows()));
     value.SetReadBytes(safeSub(value.GetReadBytes(), other.GetReadBytes()));
+    value.SetCpuTimeUs(safeSub(value.GetCpuTimeUs(), other.GetCpuTimeUs()));
     return value;
 }
 
@@ -57,6 +59,7 @@ TMeteringStats TMeteringStatsHelper::ZeroValue() {
     value.SetUploadBytes(0);
     value.SetReadRows(0);
     value.SetReadBytes(0);
+    value.SetCpuTimeUs(0);
     return value;
 }
 
@@ -64,7 +67,8 @@ bool TMeteringStatsHelper::IsZero(TMeteringStats& value) {
     return value.GetUploadRows() == 0
         && value.GetUploadBytes() == 0
         && value.GetReadRows() == 0
-        && value.GetReadBytes() == 0;
+        && value.GetReadBytes() == 0
+        && value.GetCpuTimeUs() == 0;
 }
 
 ui64 TRUCalculator::ReadTable(ui64 bytes) {
@@ -84,15 +88,28 @@ ui64 TRUCalculator::BulkUpsert(ui64 bytes, ui64 rows) {
     return (Max(rows, (bytes + 1_KB - 1) / 1_KB) + 1) / 2;
 }
 
+ui64 TRUCalculator::CPU(ui64 сpuTimeUs) {
+    // The sum is divided by the CPU time increment of 1.5 ms, rounded down and converted to RU.
+    // https://yandex.cloud/en-ru/docs/ydb/pricing/ru-yql
+    return сpuTimeUs / 1500;
+}
+
 ui64 TRUCalculator::Calculate(const TMeteringStats& stats, TString& explain) {
     // The cost of building an index is the sum of the cost of ReadTable from the source table and BulkUpsert to the index table.
     // https://yandex.cloud/en-ru/docs/ydb/pricing/ru-special#secondary-index
+
+    // To evaluate the YDB API request cost, the CPU cost and the I/O cost are calculated. A maximum from the calculated values is selected.
+    // https://yandex.cloud/en-ru/docs/ydb/pricing/ru-yql
+
     ui64 readTable = TRUCalculator::ReadTable(stats.GetReadBytes());
     ui64 bulkUpsert = TRUCalculator::BulkUpsert(stats.GetUploadBytes(), stats.GetUploadRows());
+    ui64 cpu = TRUCalculator::CPU(stats.GetCpuTimeUs());
     explain = TStringBuilder()
         << "ReadTable: " << readTable
-        << ", BulkUpsert: " << bulkUpsert;
-    return readTable + bulkUpsert;
+        << ", BulkUpsert: " << bulkUpsert
+        << ", CPU: " << cpu;
+
+    return Max(readTable + bulkUpsert, cpu);
 }
 
 }
diff --git a/ydb/core/tx/schemeshard/schemeshard_billing_helpers.h b/ydb/core/tx/schemeshard/schemeshard_billing_helpers.h
index 536de515f455..9fb91947497b 100644
--- a/ydb/core/tx/schemeshard/schemeshard_billing_helpers.h
+++ b/ydb/core/tx/schemeshard/schemeshard_billing_helpers.h
@@ -21,6 +21,7 @@ struct TMeteringStatsHelper {
 struct TRUCalculator {
     static ui64 ReadTable(ui64 bytes);
     static ui64 BulkUpsert(ui64 bytes, ui64 rows);
+    static ui64 CPU(ui64 сpuTimeUs);
     static ui64 Calculate(const TMeteringStats& stats, TString& explain);
 };
 
diff --git a/ydb/core/tx/schemeshard/schemeshard_build_index.cpp b/ydb/core/tx/schemeshard/schemeshard_build_index.cpp
index ec1c44a0db5f..52137e137413 100644
--- a/ydb/core/tx/schemeshard/schemeshard_build_index.cpp
+++ b/ydb/core/tx/schemeshard/schemeshard_build_index.cpp
@@ -229,7 +229,8 @@ void TSchemeShard::PersistBuildIndexProcessed(NIceDb::TNiceDb& db, const TIndexB
         NIceDb::TUpdate<Schema::IndexBuild::UploadRowsProcessed>(indexInfo.Processed.GetUploadRows()),
         NIceDb::TUpdate<Schema::IndexBuild::UploadBytesProcessed>(indexInfo.Processed.GetUploadBytes()),
         NIceDb::TUpdate<Schema::IndexBuild::ReadRowsProcessed>(indexInfo.Processed.GetReadRows()),
-        NIceDb::TUpdate<Schema::IndexBuild::ReadBytesProcessed>(indexInfo.Processed.GetReadBytes())
+        NIceDb::TUpdate<Schema::IndexBuild::ReadBytesProcessed>(indexInfo.Processed.GetReadBytes()),
+        NIceDb::TUpdate<Schema::IndexBuild::CpuTimeUsProcessed>(indexInfo.Processed.GetCpuTimeUs())
     );
 }
 
@@ -238,7 +239,8 @@ void TSchemeShard::PersistBuildIndexBilled(NIceDb::TNiceDb& db, const TIndexBuil
         NIceDb::TUpdate<Schema::IndexBuild::UploadRowsBilled>(indexInfo.Billed.GetUploadRows()),
         NIceDb::TUpdate<Schema::IndexBuild::UploadBytesBilled>(indexInfo.Billed.GetUploadBytes()),
         NIceDb::TUpdate<Schema::IndexBuild::ReadRowsBilled>(indexInfo.Billed.GetReadRows()),
-        NIceDb::TUpdate<Schema::IndexBuild::ReadBytesBilled>(indexInfo.Billed.GetReadBytes())
+        NIceDb::TUpdate<Schema::IndexBuild::ReadBytesBilled>(indexInfo.Billed.GetReadBytes()),
+        NIceDb::TUpdate<Schema::IndexBuild::CpuTimeUsBilled>(indexInfo.Processed.GetCpuTimeUs())
     );
 }
 
@@ -251,7 +253,8 @@ void TSchemeShard::PersistBuildIndexUploadProgress(NIceDb::TNiceDb& db, TIndexBu
         NIceDb::TUpdate<Schema::IndexBuildShardStatus::UploadRowsProcessed>(shardStatus.Processed.GetUploadRows()),
         NIceDb::TUpdate<Schema::IndexBuildShardStatus::UploadBytesProcessed>(shardStatus.Processed.GetUploadBytes()),
         NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadRowsProcessed>(shardStatus.Processed.GetReadRows()),
-        NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadBytesProcessed>(shardStatus.Processed.GetReadBytes())
+        NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadBytesProcessed>(shardStatus.Processed.GetReadBytes()),
+        NIceDb::TUpdate<Schema::IndexBuildShardStatus::CpuTimeUsProcessed>(shardStatus.Processed.GetCpuTimeUs())
     );
 }
 
@@ -274,7 +277,8 @@ void TSchemeShard::PersistBuildIndexUploadReset(NIceDb::TNiceDb& db, TIndexBuild
         NIceDb::TUpdate<Schema::IndexBuildShardStatus::UploadRowsProcessed>(shardStatus.Processed.GetUploadRows()),
         NIceDb::TUpdate<Schema::IndexBuildShardStatus::UploadBytesProcessed>(shardStatus.Processed.GetUploadBytes()),
         NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadRowsProcessed>(shardStatus.Processed.GetReadRows()),
-        NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadBytesProcessed>(shardStatus.Processed.GetReadBytes())
+        NIceDb::TUpdate<Schema::IndexBuildShardStatus::ReadBytesProcessed>(shardStatus.Processed.GetReadBytes()),
+        NIceDb::TUpdate<Schema::IndexBuildShardStatus::CpuTimeUsProcessed>(shardStatus.Processed.GetCpuTimeUs())
     );
 }
 
diff --git a/ydb/core/tx/schemeshard/schemeshard_info_types.h b/ydb/core/tx/schemeshard/schemeshard_info_types.h
index 07b47d5b0a8b..e8345eaa7383 100644
--- a/ydb/core/tx/schemeshard/schemeshard_info_types.h
+++ b/ydb/core/tx/schemeshard/schemeshard_info_types.h
@@ -3643,6 +3643,7 @@ struct TIndexBuildInfo: public TSimpleRefCount<TIndexBuildInfo> {
         indexInfo->Billed.SetUploadBytes(row.template GetValueOrDefault<Schema::IndexBuild::UploadBytesBilled>(0));
         indexInfo->Billed.SetReadRows(row.template GetValueOrDefault<Schema::IndexBuild::ReadRowsBilled>(0));
         indexInfo->Billed.SetReadBytes(row.template GetValueOrDefault<Schema::IndexBuild::ReadBytesBilled>(0));
+        indexInfo->Billed.SetCpuTimeUs(row.template GetValueOrDefault<Schema::IndexBuild::CpuTimeUsBilled>(0));
         if (indexInfo->IsFillBuildIndex()) {
             TMeteringStatsHelper::TryFixOldFormat(indexInfo->Billed);
         }
@@ -3651,6 +3652,7 @@ struct TIndexBuildInfo: public TSimpleRefCount<TIndexBuildInfo> {
         indexInfo->Processed.SetUploadBytes(row.template GetValueOrDefault<Schema::IndexBuild::UploadBytesProcessed>(0));
         indexInfo->Processed.SetReadRows(row.template GetValueOrDefault<Schema::IndexBuild::ReadRowsProcessed>(0));
         indexInfo->Processed.SetReadBytes(row.template GetValueOrDefault<Schema::IndexBuild::ReadBytesProcessed>(0));
+        indexInfo->Processed.SetCpuTimeUs(row.template GetValueOrDefault<Schema::IndexBuild::CpuTimeUsProcessed>(0));
         if (indexInfo->IsFillBuildIndex()) {
             TMeteringStatsHelper::TryFixOldFormat(indexInfo->Processed);
         }
@@ -3720,6 +3722,7 @@ struct TIndexBuildInfo: public TSimpleRefCount<TIndexBuildInfo> {
         shardStatus.Processed.SetUploadBytes(row.template GetValueOrDefault<Schema::IndexBuildShardStatus::UploadBytesProcessed>(0));
         shardStatus.Processed.SetReadRows(row.template GetValueOrDefault<Schema::IndexBuildShardStatus::ReadRowsProcessed>(0));
         shardStatus.Processed.SetReadBytes(row.template GetValueOrDefault<Schema::IndexBuildShardStatus::ReadBytesProcessed>(0));
+        shardStatus.Processed.SetCpuTimeUs(row.template GetValueOrDefault<Schema::IndexBuildShardStatus::CpuTimeUsProcessed>(0));
         if (IsFillBuildIndex()) {
             TMeteringStatsHelper::TryFixOldFormat(shardStatus.Processed);
         }
diff --git a/ydb/core/tx/schemeshard/schemeshard_schema.h b/ydb/core/tx/schemeshard/schemeshard_schema.h
index e4732de680f7..7a599fcaaebb 100644
--- a/ydb/core/tx/schemeshard/schemeshard_schema.h
+++ b/ydb/core/tx/schemeshard/schemeshard_schema.h
@@ -1423,6 +1423,9 @@ struct Schema : NIceDb::Schema {
         struct EndTime : Column<42, NScheme::NTypeIds::Uint64> {};
         struct UserSID : Column<43, NScheme::NTypeIds::Utf8> {};
 
+        struct CpuTimeUsBilled : Column<44, NScheme::NTypeIds::Uint64> {};
+        struct CpuTimeUsProcessed : Column<45, NScheme::NTypeIds::Uint64> {};
+
         using TKey = TableKey<Id>;
         using TColumns = TableColumns<
             Id,
@@ -1467,7 +1470,9 @@ struct Schema : NIceDb::Schema {
             ReadBytesProcessed,
             StartTime,
             EndTime,
-            UserSID
+            UserSID,
+            CpuTimeUsBilled,
+            CpuTimeUsProcessed
         >;
     };
 
@@ -1543,6 +1548,8 @@ struct Schema : NIceDb::Schema {
         struct ReadRowsProcessed : Column<11, NScheme::NTypeIds::Uint64> {};
         struct ReadBytesProcessed : Column<12, NScheme::NTypeIds::Uint64> {};
 
+        struct CpuTimeUsProcessed : Column<13, NScheme::NTypeIds::Uint64> {};
+
         using TKey = TableKey<Id, OwnerShardIdx, LocalShardIdx>;
         using TColumns = TableColumns<
             Id,
@@ -1556,7 +1563,8 @@ struct Schema : NIceDb::Schema {
             RowsProcessed,
             BytesProcessed,
             ReadRowsProcessed,
-            ReadBytesProcessed
+            ReadBytesProcessed,
+            CpuTimeUsProcessed
         >;
     };
 
diff --git a/ydb/core/tx/schemeshard/ut_index_build/ut_vector_index_build.cpp b/ydb/core/tx/schemeshard/ut_index_build/ut_vector_index_build.cpp
index 0e9956ae4a0a..4423b369b6a6 100644
--- a/ydb/core/tx/schemeshard/ut_index_build/ut_vector_index_build.cpp
+++ b/ydb/core/tx/schemeshard/ut_index_build/ut_vector_index_build.cpp
@@ -14,7 +14,56 @@ using namespace NKikimr;
 using namespace NSchemeShard;
 using namespace NSchemeShardUT_Private;
 
-Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
+namespace {
+    // to check cpu converted to request units it should be big enough
+    const ui64 CpuTimeUsMultiplier = 150;
+
+    template<class TEvType>
+    bool MakeCpuMeteringDeterministic(const TEvType& ev) {
+        auto stats = ev->Get()->Record.MutableMeteringStats();
+        UNIT_ASSERT(stats->HasCpuTimeUs());
+        stats->SetCpuTimeUs((stats->GetReadRows() + stats->GetUploadRows()) * CpuTimeUsMultiplier);
+        return false;
+    }
+
+    auto MakeCpuMeteringDeterministic(TTestBasicRuntime& runtime) {
+        return std::make_tuple(
+            MakeHolder<TBlockEvents<TEvDataShard::TEvSampleKResponse>>(runtime, [&](const auto& ev) {
+                return MakeCpuMeteringDeterministic(ev);
+            }),
+            MakeHolder<TBlockEvents<TEvIndexBuilder::TEvUploadSampleKResponse>>(runtime, [&](const auto& ev) {
+                // special internal Scheme Shard event, no cpu, but AddRead/AddUpload helpers will fix it
+                auto stats = ev->Get()->Record.MutableMeteringStats();
+                UNIT_ASSERT(!stats->HasCpuTimeUs() || stats->GetCpuTimeUs() == (stats->GetReadRows() + stats->GetUploadRows()) * CpuTimeUsMultiplier);
+                stats->SetCpuTimeUs((stats->GetReadRows() + stats->GetUploadRows()) * CpuTimeUsMultiplier);
+                return false;
+            }),
+            MakeHolder<TBlockEvents<TEvDataShard::TEvRecomputeKMeansResponse>>(runtime, [&](const auto& ev) {
+                return MakeCpuMeteringDeterministic(ev);
+            }),
+            MakeHolder<TBlockEvents<TEvDataShard::TEvReshuffleKMeansResponse>>(runtime, [&](const auto& ev) {
+                return MakeCpuMeteringDeterministic(ev);
+            }),
+            MakeHolder<TBlockEvents<TEvDataShard::TEvLocalKMeansResponse>>(runtime, [&](const auto& ev) {
+                return MakeCpuMeteringDeterministic(ev);
+            })
+        );
+    }
+
+    void AddRead(TMeteringStats& stats, ui64 rows, ui64 bytes) {
+        stats.SetReadRows(stats.GetReadRows() + rows);
+        stats.SetReadBytes(stats.GetReadBytes() + bytes);
+        stats.SetCpuTimeUs(stats.GetCpuTimeUs() + rows * CpuTimeUsMultiplier); // see MakeCpuMeteringDeterministic
+    }
+
+    void AddUpload(TMeteringStats& stats, ui64 rows, ui64 bytes) {
+        stats.SetUploadRows(stats.GetUploadRows() + rows);
+        stats.SetUploadBytes(stats.GetUploadBytes() + bytes);
+        stats.SetCpuTimeUs(stats.GetCpuTimeUs() + rows * CpuTimeUsMultiplier); // see MakeCpuMeteringDeterministic
+    }
+}
+
+Y_UNIT_TEST_SUITE(VectorIndexBuildTest) {
     Y_UNIT_TEST(CreateAndDrop) {
         TTestBasicRuntime runtime;
         TTestEnv env(runtime);
@@ -325,6 +374,7 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
 
         runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);
         runtime.SetLogPriority(NKikimrServices::BUILD_INDEX, NLog::PRI_TRACE);
+        auto deterministicMetering = MakeCpuMeteringDeterministic(runtime);
 
         TestCreateExtSubDomain(runtime, ++txId, "/MyRoot", "Name: \"CommonDB\"");
         env.TestWaitNotification(runtime, txId);
@@ -433,6 +483,7 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
 
         runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);
         runtime.SetLogPriority(NKikimrServices::BUILD_INDEX, NLog::PRI_TRACE);
+        auto deterministicMetering = MakeCpuMeteringDeterministic(runtime);
 
         ui64 tenantSchemeShard = 0;
         TestCreateServerLessDb(runtime, env, txId, tenantSchemeShard);
@@ -530,8 +581,7 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
             sampleKBlocker.Unblock();
         }
         // SAMPLE reads table once, no writes:
-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);
-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);
+        AddRead(expectedBillingStats, tableRows, tableBytes);
         logBillingStats();
         UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());
 
@@ -541,16 +591,14 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
                 runtime.WaitFor("recomputeK", [&]{ return recomputeKBlocker.size(); });
                 recomputeKBlocker.Unblock();
             }
-            expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);
-            expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);
+            AddRead(expectedBillingStats, tableRows, tableBytes);
             logBillingStats();
             UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());
         }
 
         runtime.WaitFor("uploadSampleK", [&]{ return uploadSampleKBlocker.size(); });
         // upload SAMPLE writes K level rows, no reads:
-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + K);
-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + K * levelRowBytes);
+        AddUpload(expectedBillingStats, K, K * levelRowBytes);
         logBillingStats();
         UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());
         uploadSampleKBlocker.Unblock();
@@ -578,10 +626,8 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
             reshuffleBlocker.Unblock();
         }
         // RESHUFFLE reads and writes table once:
-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + tableRows);
-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + buildBytes);
-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);
-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);
+        AddUpload(expectedBillingStats, tableRows, buildBytes);
+        AddRead(expectedBillingStats, tableRows, tableBytes);
         logBillingStats();
         UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());
 
@@ -591,20 +637,16 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
         }
         // KMEANS writes build table once and forms at least K, at most K * K level rows
         // (depending on clustering uniformity; it's not so good on test data)
-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + tableRows);
-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + postingBytes);
+        AddUpload(expectedBillingStats, tableRows, postingBytes);
         UNIT_ASSERT(billingStats.GetUploadRows() >= expectedBillingStats.GetUploadRows() + K);
         const ui64 level2clusters = billingStats.GetUploadRows() - expectedBillingStats.GetUploadRows();
-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + level2clusters);
-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + level2clusters * levelRowBytes);
+        AddUpload(expectedBillingStats, level2clusters, level2clusters * levelRowBytes);
         if (smallScanBuffer) {
             // KMEANS reads build table 5 times (SAMPLE + KMEANS * 3 + UPLOAD):
-            expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows * 5);
-            expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  buildBytes * 5);
+            AddRead(expectedBillingStats, tableRows * 5, buildBytes * 5);
         } else {
             // KMEANS reads build table once:
-            expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);
-            expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  buildBytes);
+            AddRead(expectedBillingStats, tableRows, buildBytes);
         }
         logBillingStats();
         UNIT_ASSERT_VALUES_EQUAL(billingStats.ShortDebugString(), expectedBillingStats.ShortDebugString());
@@ -651,6 +693,7 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
 
         runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);
         runtime.SetLogPriority(NKikimrServices::BUILD_INDEX, NLog::PRI_TRACE);
+        auto deterministicMetering = MakeCpuMeteringDeterministic(runtime);
 
         ui64 tenantSchemeShard = 0;
         TestCreateServerLessDb(runtime, env, txId, tenantSchemeShard);
@@ -718,19 +761,17 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
 
         runtime.WaitFor("reshuffle", [&]{ return reshuffleBlocker.size(); });
         // SAMPLE reads table once, no writes:
-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);
-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);
+        AddRead(expectedBillingStats, tableRows, tableBytes);
         // every RECOMPUTE round reads table once, no writes; there are 3 recompute rounds:
-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows * 3);
-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes * 3);
+        AddRead(expectedBillingStats, tableRows * 3, tableBytes * 3);
         // upload SAMPLE writes K level rows, no reads:
-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + K);
-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + K * levelRowBytes);
+        AddUpload(expectedBillingStats, K, K * levelRowBytes);
         {
             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);
             Cout << "BuildIndex 1 " << buildIndexHtml << Endl;
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Processed: " + expectedBillingStats.ShortDebugString());
-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, "Request Units: 130 (ReadTable: 128, BulkUpsert: 2)");
+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << "Request Units: 130 (ReadTable: 128, BulkUpsert: 2, " 
+                << "CPU: " << expectedBillingStats.GetCpuTimeUs() / 1500 << ")");
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Billed: " + billedStats.ShortDebugString());
         }
         runtime.WaitFor("metering", [&]{ return meteringBlocker.size(); });
@@ -758,24 +799,24 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);
             Cout << "BuildIndex 2 " << buildIndexHtml << Endl;
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Processed: " + expectedBillingStats.ShortDebugString());
-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, "Request Units: 130 (ReadTable: 128, BulkUpsert: 2)");
+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << "Request Units: 130 (ReadTable: 128, BulkUpsert: 2, " 
+                << "CPU: " << expectedBillingStats.GetCpuTimeUs() / 1500 << ")");
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Billed: " + billedStats.ShortDebugString());
         }
 
         reshuffleBlocker.Unblock();
         runtime.WaitFor("reshuffle", [&]{ return reshuffleBlocker.size(); });
         // shard RESHUFFLE reads and writes once:
-        TMeteringStats shardReshuffleBillingStats;
-        shardReshuffleBillingStats.SetUploadRows(shardRows);
-        shardReshuffleBillingStats.SetUploadBytes(buildShardBytes);
-        shardReshuffleBillingStats.SetReadRows(shardRows);
-        shardReshuffleBillingStats.SetReadBytes(tableShardBytes);
+        TMeteringStats shardReshuffleBillingStats = TMeteringStatsHelper::ZeroValue();
+        AddUpload(shardReshuffleBillingStats, shardRows, buildShardBytes);
+        AddRead(shardReshuffleBillingStats, shardRows, tableShardBytes);
         expectedBillingStats += shardReshuffleBillingStats;
         {
             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);
             Cout << "BuildIndex 3 " << buildIndexHtml << Endl;
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Processed: " + expectedBillingStats.ShortDebugString());
-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, "Request Units: 155 (ReadTable: 128, BulkUpsert: 27)");
+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << "Request Units: 155 (ReadTable: 128, BulkUpsert: 27, " 
+                << "CPU: " << expectedBillingStats.GetCpuTimeUs() / 1500 << ")");
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Billed: " + billedStats.ShortDebugString());
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, "<td>" + shardReshuffleBillingStats.ShortDebugString());
         }
@@ -804,7 +845,8 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);
             Cout << "BuildIndex 4 " << buildIndexHtml << Endl;
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Processed: " + expectedBillingStats.ShortDebugString());
-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, "Request Units: 155 (ReadTable: 128, BulkUpsert: 27)");
+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << "Request Units: 155 (ReadTable: 128, BulkUpsert: 27, " 
+                << "CPU: " << expectedBillingStats.GetCpuTimeUs() / 1500 << ")");
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Billed: " + billedStats.ShortDebugString());
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, "<td>" + shardReshuffleBillingStats.ShortDebugString());
         }
@@ -812,10 +854,8 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
         reshuffleBlocker.Stop().Unblock();
         // RESHUFFLE reads and writes table once:
         expectedBillingStats -= shardReshuffleBillingStats; // already added
-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + tableRows);
-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + buildBytes);
-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows);
-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  tableBytes);
+        AddUpload(expectedBillingStats, tableRows, buildBytes);
+        AddRead(expectedBillingStats, tableRows, tableBytes);
     
         if (doRestarts) {
             runtime.WaitFor("localKMeans", [&]{ return localKMeansBlocker.size(); });
@@ -825,17 +865,16 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
 
         env.TestWaitNotification(runtime, buildIndexTx, tenantSchemeShard);
         // KMEANS writes build table once and forms K * K level rows:
-        expectedBillingStats.SetUploadRows(expectedBillingStats.GetUploadRows() + tableRows + K * K);
-        expectedBillingStats.SetUploadBytes(expectedBillingStats.GetUploadBytes() + postingBytes + K * K * levelRowBytes);
+        AddUpload(expectedBillingStats, tableRows + K * K, postingBytes + K * K * levelRowBytes);
         // KMEANS reads build table 5 times (SAMPLE + KMEANS * 3 + UPLOAD):
-        expectedBillingStats.SetReadRows(expectedBillingStats.GetReadRows() + tableRows * 5);
-        expectedBillingStats.SetReadBytes(expectedBillingStats.GetReadBytes() +  buildBytes * 5);
+        AddRead(expectedBillingStats, tableRows * 5, buildBytes * 5);
         {
             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);
             Cout << "BuildIndex 5 " << buildIndexHtml << Endl;
             Cout << expectedBillingStats.ShortDebugString() << Endl;
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Processed: " + expectedBillingStats.ShortDebugString());
-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, "Request Units: 338 (ReadTable: 128, BulkUpsert: 210)");
+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << "Request Units: 338 (ReadTable: 128, BulkUpsert: 210, " 
+                << "CPU: " << expectedBillingStats.GetCpuTimeUs() / 1500 << ")");
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Billed: " + expectedBillingStats.ShortDebugString());
         }
         runtime.WaitFor("metering", [&]{ return meteringBlocker.size(); });
@@ -863,7 +902,8 @@ Y_UNIT_TEST_SUITE (VectorIndexBuildTest) {
             auto buildIndexHtml = TestGetBuildIndexHtml(runtime, tenantSchemeShard, buildIndexTx);
             Cout << "BuildIndex 6 " << buildIndexHtml << Endl;
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Processed: " + expectedBillingStats.ShortDebugString());
-            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, "Request Units: 338 (ReadTable: 128, BulkUpsert: 210)");
+            UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml, TStringBuilder() << "Request Units: 338 (ReadTable: 128, BulkUpsert: 210, " 
+                << "CPU: " << expectedBillingStats.GetCpuTimeUs() / 1500 << ")");
             UNIT_ASSERT_STRING_CONTAINS(buildIndexHtml,  "Billed: " + expectedBillingStats.ShortDebugString());
         }
     }
