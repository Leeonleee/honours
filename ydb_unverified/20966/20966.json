{
  "repo": "ydb-platform/ydb",
  "pull_number": 20966,
  "instance_id": "ydb-platform__ydb-20966",
  "issue_numbers": [
    "19709"
  ],
  "base_commit": "fb6a15722d3683fa4545040855b4bd528014e3b9",
  "patch": "diff --git a/ydb/core/blobstorage/nodewarden/blobstorage_node_warden_ut.cpp b/ydb/core/blobstorage/nodewarden/blobstorage_node_warden_ut.cpp\nindex 76ba63bbb7bb..e037e2fd6d8f 100644\n--- a/ydb/core/blobstorage/nodewarden/blobstorage_node_warden_ut.cpp\n+++ b/ydb/core/blobstorage/nodewarden/blobstorage_node_warden_ut.cpp\n@@ -264,7 +264,8 @@ Y_UNIT_TEST_SUITE(TBlobStorageWardenTest) {\n         return MakeBSControllerID();\n     }\n \n-    ui32 CreatePDisk(TTestActorRuntime &runtime, ui32 nodeIdx, TString path, ui64 guid, ui32 pdiskId, ui64 pDiskCategory) {\n+    ui32 CreatePDisk(TTestActorRuntime &runtime, ui32 nodeIdx, TString path, ui64 guid, ui32 pdiskId, ui64 pDiskCategory,\n+            ui64 inferPDiskSlotCountFromUnitSize = 0) {\n         VERBOSE_COUT(\" Creating pdisk\");\n \n         ui32 nodeId = runtime.GetNodeId(nodeIdx);\n@@ -277,6 +278,10 @@ Y_UNIT_TEST_SUITE(TBlobStorageWardenTest) {\n         pdisk->SetPDiskGuid(guid);\n         pdisk->SetPDiskCategory(pDiskCategory);\n         pdisk->SetEntityStatus(NKikimrBlobStorage::CREATE);\n+        if (inferPDiskSlotCountFromUnitSize) {\n+            pdisk->SetInferPDiskSlotCountFromUnitSize(inferPDiskSlotCountFromUnitSize);\n+        }\n+\n         runtime.Send(new IEventHandle(MakeBlobStorageNodeWardenID(nodeId), TActorId(), ev.release()));\n \n         return pdiskId;\n@@ -914,6 +919,106 @@ Y_UNIT_TEST_SUITE(TBlobStorageWardenTest) {\n \n         UNIT_ASSERT_EQUAL(pdiskId, restartPDiskEv->PDiskId);\n     }\n+\n+    void TestInferPDiskSlotCount(ui64 driveSize, ui64 unitSizeInBytes,\n+            ui64 expectedSlotCount, ui32 expectedSlotSizeInUnits, double expectedRelativeError = 0) {\n+        TIntrusivePtr<TPDiskConfig> pdiskConfig = new TPDiskConfig(\"fake_drive\", 0, 0, 0);\n+\n+        NStorage::TNodeWarden::InferPDiskSlotCount(pdiskConfig, driveSize, unitSizeInBytes);\n+\n+        double unitSizeCalculated = double(driveSize) / pdiskConfig->ExpectedSlotCount / pdiskConfig->SlotSizeInUnits;\n+        double unitSizeRelativeError =  (unitSizeCalculated - unitSizeInBytes) / unitSizeInBytes;\n+\n+        VERBOSE_COUT(\"\"\n+            << \" driveSize# \" << driveSize\n+            << \" unitSizeInBytes# \" << unitSizeInBytes\n+            << \" ->\"\n+            << \" ExpectedSlotCount# \" << pdiskConfig->ExpectedSlotCount\n+            << \" SlotSizeInUnits# \" << pdiskConfig->SlotSizeInUnits\n+            << \" relativeError# \" << unitSizeRelativeError\n+        );\n+\n+        if (expectedSlotCount) {\n+            UNIT_ASSERT_VALUES_EQUAL(pdiskConfig->ExpectedSlotCount, expectedSlotCount);\n+        }\n+        if (expectedSlotSizeInUnits) {\n+            UNIT_ASSERT_VALUES_EQUAL(pdiskConfig->SlotSizeInUnits, expectedSlotSizeInUnits);\n+        }\n+\n+        if (expectedRelativeError > 0) {\n+            UNIT_ASSERT_LE_C(abs(unitSizeRelativeError), expectedRelativeError,\n+                TStringBuilder() << \"abs(\" << unitSizeRelativeError << \") < \" << expectedRelativeError\n+            );\n+        }\n+    }\n+\n+    CUSTOM_UNIT_TEST(TestInferPDiskSlotCountPureFunction) {\n+        TestInferPDiskSlotCount(7900, 1000, 8, 1u, 0.0125);\n+        TestInferPDiskSlotCount(8000, 1000, 8, 1u, std::numeric_limits<double>::epsilon());\n+        TestInferPDiskSlotCount(8100, 1000, 8, 1u, 0.0125);\n+        TestInferPDiskSlotCount(16000, 1000, 16, 1u, std::numeric_limits<double>::epsilon());\n+        TestInferPDiskSlotCount(24000, 1000, 12, 2u, std::numeric_limits<double>::epsilon());\n+        TestInferPDiskSlotCount(31000, 1000, 16, 2u, 0.032);\n+        TestInferPDiskSlotCount(50000, 1000, 13, 4u, 0.039);\n+        TestInferPDiskSlotCount(50000, 100, 16, 32u, 0.024);\n+        TestInferPDiskSlotCount(18000, 200, 11, 8u, 0.023);\n+\n+        for (ui64 i=1; i<=1024; i++) {\n+            // In all cases the relative error doesn't exceed 1/maxSlotCount\n+            TestInferPDiskSlotCount(i, 1, 0, 0, 1./16);\n+        }\n+\n+        const size_t c_200GB = 200'000'000'000;\n+        const size_t c_2000GB = 2000'000'000'000;\n+\n+        // Some real-world examples\n+        TestInferPDiskSlotCount(1919'366'987'776, c_200GB, 10, 1u, 0.041); // \"Micron_5200_MTFDDAK1T9TDD\"\n+        TestInferPDiskSlotCount(3199'243'124'736, c_200GB, 16, 1u, 0.001); // \"SAMSUNG MZWLR3T8HBLS-00007\"\n+        TestInferPDiskSlotCount(6400'161'873'920, c_200GB, 16, 2u, 0.001); // \"INTEL SSDPE2KE064T8\"\n+        TestInferPDiskSlotCount(6398'611'030'016, c_200GB, 16, 2u, 0.001); // \"INTEL SSDPF2KX076T1\"\n+        TestInferPDiskSlotCount(17999'117'418'496, c_2000GB, 9, 1u, 0.001); // \"WDC  WUH721818ALE6L4\"\n+    }\n+\n+    std::optional<NKikimrWhiteboard::TPDiskStateInfo> GrabEvPDiskStateUpdate(TTestBasicRuntime& runtime, TActorId edge, ui32 pdiskId) {\n+        VERBOSE_COUT(\"Awaiting EvPDiskStateUpdate PDiskId# \" << pdiskId);\n+        for (int attempt=0; attempt<10;) {\n+            const auto evPDiskStateUpdate = runtime.GrabEdgeEventRethrow<NNodeWhiteboard::TEvWhiteboard::TEvPDiskStateUpdate>(edge);\n+            NKikimrWhiteboard::TPDiskStateInfo pdiskInfo = evPDiskStateUpdate->Get()->Record;\n+            if (pdiskInfo.GetPDiskId() != pdiskId) {\n+                continue;\n+            }\n+\n+            VERBOSE_COUT(\"- Got EvPDiskStateUpdate# \" << evPDiskStateUpdate->ToString());\n+            if (!pdiskInfo.HasSlotSizeInUnits()) {\n+                attempt++;\n+                continue;\n+            }\n+\n+            return pdiskInfo;\n+        }\n+        return std::nullopt;\n+    }\n+\n+    CUSTOM_UNIT_TEST(TestInferPDiskSlotCountComplexSetup) {\n+        TTempDir tempDir;\n+\n+        TTestBasicRuntime runtime(1, false);\n+        auto nodeId = runtime.GetNodeId(0);\n+        TString pdiskPath = \"SectorMap:TestInferPDiskSlotCountComplexSetup\";\n+        TIntrusivePtr<NPDisk::TSectorMap> sectorMap(new NPDisk::TSectorMap(32_GB));\n+        Setup(runtime, pdiskPath, sectorMap);\n+\n+        TActorId edge = runtime.AllocateEdgeActor();\n+        runtime.SetDispatchTimeout(TDuration::Seconds(10));\n+        runtime.RegisterService(NNodeWhiteboard::MakeNodeWhiteboardServiceId(nodeId), edge);\n+\n+        NKikimrBlobStorage::TPDiskConfig pdiskConfig;\n+        ui32 pdiskId = CreatePDisk(runtime, 0, pdiskPath, 0, 1001, 0, 1_GB);\n+        std::optional<NKikimrWhiteboard::TPDiskStateInfo> pdiskInfo = GrabEvPDiskStateUpdate(runtime, edge, pdiskId);\n+        UNIT_ASSERT_C(pdiskInfo, \"No appropriate TEvPDiskStateUpdate received\");\n+        UNIT_ASSERT_VALUES_EQUAL(pdiskInfo->GetExpectedSlotCount(), 16);\n+        UNIT_ASSERT_VALUES_EQUAL(pdiskInfo->GetSlotSizeInUnits(), 2u);\n+    }\n }\n \n } // namespace NBlobStorageNodeWardenTest\ndiff --git a/ydb/core/blobstorage/nodewarden/node_warden_impl.h b/ydb/core/blobstorage/nodewarden/node_warden_impl.h\nindex 027269783211..b27233120d27 100644\n--- a/ydb/core/blobstorage/nodewarden/node_warden_impl.h\n+++ b/ydb/core/blobstorage/nodewarden/node_warden_impl.h\n@@ -268,6 +268,7 @@ namespace NKikimr::NStorage {\n         }\n \n         TIntrusivePtr<TPDiskConfig> CreatePDiskConfig(const NKikimrBlobStorage::TNodeWardenServiceSet::TPDisk& pdisk);\n+        static void InferPDiskSlotCount(TIntrusivePtr<TPDiskConfig> pdiskConfig, ui64 driveSize, ui64 unitSizeInBytes);\n         void StartLocalPDisk(const NKikimrBlobStorage::TNodeWardenServiceSet::TPDisk& pdisk, bool temporary);\n         void AskBSCToRestartPDisk(ui32 pdiskId, bool ignoreDegradedGroups, ui64 requestCookie);\n         void OnPDiskRestartFinished(ui32 pdiskId, NKikimrProto::EReplyStatus status);\ndiff --git a/ydb/core/blobstorage/nodewarden/node_warden_pdisk.cpp b/ydb/core/blobstorage/nodewarden/node_warden_pdisk.cpp\nindex 64aec4c4cb9e..21e83a7739b7 100644\n--- a/ydb/core/blobstorage/nodewarden/node_warden_pdisk.cpp\n+++ b/ydb/core/blobstorage/nodewarden/node_warden_pdisk.cpp\n@@ -16,6 +16,22 @@ namespace NKikimr::NStorage {\n         {NPDisk::DEVICE_TYPE_NVME, 300000000},\n     };\n \n+    void TNodeWarden::InferPDiskSlotCount(TIntrusivePtr<TPDiskConfig> pdiskConfig, ui64 driveSize, ui64 unitSizeInBytes) {\n+        Y_ABORT_UNLESS(driveSize);\n+        Y_ABORT_UNLESS(unitSizeInBytes);\n+\n+        const double slotCount = lround(double(driveSize) / unitSizeInBytes);\n+        ui32 slotSizeInUnits = 1u;\n+\n+        constexpr long MaxSlots = 16;\n+        while (lround(slotCount/slotSizeInUnits) > MaxSlots) {\n+            slotSizeInUnits *= 2;\n+        }\n+\n+        pdiskConfig->ExpectedSlotCount = lround(slotCount/slotSizeInUnits);\n+        pdiskConfig->SlotSizeInUnits = slotSizeInUnits;\n+    }\n+\n     TIntrusivePtr<TPDiskConfig> TNodeWarden::CreatePDiskConfig(const NKikimrBlobStorage::TNodeWardenServiceSet::TPDisk& pdisk)  {\n         const TString& path = pdisk.GetPath();\n         const ui64 pdiskGuid = pdisk.GetPDiskGuid();\n@@ -121,6 +137,24 @@ namespace NKikimr::NStorage {\n             pdiskConfig->EnableSectorEncryption = !pdiskConfig->SectorMap;\n         }\n \n+        if (ui64 unitSizeInBytes = pdisk.GetInferPDiskSlotCountFromUnitSize()) {\n+            ui64 driveSize = 0;\n+            TStringStream outDetails;\n+            if (pdiskConfig->SectorMap) {\n+                driveSize = pdiskConfig->SectorMap->DeviceSize;\n+                outDetails << \"drive size obtained from SectorMap\";\n+            } else if (std::optional<NPDisk::TDriveData> data = NPDisk::GetDriveData(path, &outDetails)) {\n+                driveSize = data->Size;\n+            }\n+\n+            if (!driveSize) {\n+                STLOG(PRI_ERROR, BS_NODE, NW91, \"Unable to determine drive size for inferring PDisk slot count\",\n+                    (Path, path), (Details, outDetails.Str()));\n+            } else {\n+                InferPDiskSlotCount(pdiskConfig, driveSize, unitSizeInBytes);\n+            }\n+        }\n+\n         const NPDisk::TMainKey& pdiskKey = Cfg->PDiskKey;\n         TString keyPrintSalt = \"@N2#_lW19)2-31!iifI@n1178349617\";\n         pdiskConfig->HashedMainKey.resize(pdiskKey.Keys.size());\ndiff --git a/ydb/core/blobstorage/pdisk/blobstorage_pdisk_config.h b/ydb/core/blobstorage/pdisk/blobstorage_pdisk_config.h\nindex 9f67c574fb20..2125950b9bed 100644\n--- a/ydb/core/blobstorage/pdisk/blobstorage_pdisk_config.h\n+++ b/ydb/core/blobstorage/pdisk/blobstorage_pdisk_config.h\n@@ -136,6 +136,7 @@ struct TPDiskConfig : public TThrRefBase {\n     ui32 MaxQueuedCompletionActions;\n     bool UseSpdkNvmeDriver;\n \n+    // Next 2 are either user-defined or inferred from drive size\n     ui64 ExpectedSlotCount = 0;\n     ui32 SlotSizeInUnits = 0;\n \ndiff --git a/ydb/core/mind/bscontroller/cmds_host_config.cpp b/ydb/core/mind/bscontroller/cmds_host_config.cpp\nindex 1349e116c4bd..bcaba91339d3 100644\n--- a/ydb/core/mind/bscontroller/cmds_host_config.cpp\n+++ b/ydb/core/mind/bscontroller/cmds_host_config.cpp\n@@ -23,6 +23,7 @@ namespace NKikimr::NBsController {\n             driveInfo.SharedWithOs = drive.GetSharedWithOs();\n             driveInfo.ReadCentric = drive.GetReadCentric();\n             driveInfo.Kind = drive.GetKind();\n+            driveInfo.InferPDiskSlotCountFromUnitSize = drive.GetInferPDiskSlotCountFromUnitSize();\n \n             if (drive.HasPDiskConfig()) {\n                 TString config;\n@@ -46,6 +47,7 @@ namespace NKikimr::NBsController {\n             driveInfo.SharedWithOs = false;\n             driveInfo.ReadCentric = false;\n             driveInfo.Kind = 0;\n+            driveInfo.InferPDiskSlotCountFromUnitSize = 0;\n             driveInfo.PDiskConfig = defaultPDiskConfig;\n \n             for (const auto& path : field) {\ndiff --git a/ydb/core/mind/bscontroller/cmds_storage_pool.cpp b/ydb/core/mind/bscontroller/cmds_storage_pool.cpp\nindex 13ef2add6a48..da11cba61257 100644\n--- a/ydb/core/mind/bscontroller/cmds_storage_pool.cpp\n+++ b/ydb/core/mind/bscontroller/cmds_storage_pool.cpp\n@@ -597,6 +597,7 @@ namespace NKikimr::NBsController {\n                 x->SetDriveStatus(NKikimrBlobStorage::EDriveStatus::ACTIVE);\n                 x->SetExpectedSlotCount(pdisk.ExpectedSlotCount);\n                 x->SetDecommitStatus(NKikimrBlobStorage::EDecommitStatus::DECOMMIT_NONE);\n+                x->SetInferPDiskSlotCountFromUnitSize(pdisk.InferPDiskSlotCountFromUnitSize);\n                 if (pdisk.PDiskMetrics) {\n                     x->MutablePDiskMetrics()->CopyFrom(*pdisk.PDiskMetrics);\n                     x->MutablePDiskMetrics()->ClearPDiskId();\ndiff --git a/ydb/core/mind/bscontroller/config.cpp b/ydb/core/mind/bscontroller/config.cpp\nindex 403431a2c122..fc1dc8e69866 100644\n--- a/ydb/core/mind/bscontroller/config.cpp\n+++ b/ydb/core/mind/bscontroller/config.cpp\n@@ -115,6 +115,7 @@ namespace NKikimr::NBsController {\n                 pdisk->SetPDiskCategory(pdiskInfo.Kind.GetRaw());\n                 pdisk->SetExpectedSerial(pdiskInfo.ExpectedSerial);\n                 pdisk->SetManagementStage(Self->SerialManagementStage);\n+                pdisk->SetInferPDiskSlotCountFromUnitSize(pdiskInfo.InferPDiskSlotCountFromUnitSize);\n                 if (pdiskInfo.PDiskConfig && !pdisk->MutablePDiskConfig()->ParseFromString(pdiskInfo.PDiskConfig)) {\n                     // TODO(alexvru): report this somehow\n                 }\n@@ -908,6 +909,7 @@ namespace NKikimr::NBsController {\n                 drive.SetSharedWithOs(value.SharedWithOs);\n                 drive.SetReadCentric(value.ReadCentric);\n                 drive.SetKind(value.Kind);\n+                drive.SetInferPDiskSlotCountFromUnitSize(value.InferPDiskSlotCountFromUnitSize);\n \n                 if (const auto& config = value.PDiskConfig) {\n                     NKikimrBlobStorage::TPDiskConfig& pb = *drive.MutablePDiskConfig();\n@@ -1044,6 +1046,7 @@ namespace NKikimr::NBsController {\n             pb->SetLastSeenSerial(pdisk.LastSeenSerial);\n             pb->SetReadOnly(pdisk.Mood == TPDiskMood::ReadOnly);\n             pb->SetMaintenanceStatus(pdisk.MaintenanceStatus);\n+            pb->SetInferPDiskSlotCountFromUnitSize(pdisk.InferPDiskSlotCountFromUnitSize);\n         }\n \n         void TBlobStorageController::Serialize(NKikimrBlobStorage::TVSlotId *pb, TVSlotId id) {\ndiff --git a/ydb/core/mind/bscontroller/config_fit_pdisks.cpp b/ydb/core/mind/bscontroller/config_fit_pdisks.cpp\nindex ef3b0526e23b..58876c62b7ec 100644\n--- a/ydb/core/mind/bscontroller/config_fit_pdisks.cpp\n+++ b/ydb/core/mind/bscontroller/config_fit_pdisks.cpp\n@@ -25,6 +25,7 @@ namespace NKikimr {\n             bool ReadCentric = false;\n             TPDiskCategory PDiskCategory = {};\n             TString PDiskConfig;\n+            ui64 InferPDiskSlotCountFromUnitSize = 0;\n \n             TDiskId GetId() const {\n                 return {NodeId, Path};\n@@ -72,7 +73,8 @@ namespace NKikimr {\n                 pdiskInfo->SharedWithOs != disk.SharedWithOs ||\n                 pdiskInfo->ReadCentric != disk.ReadCentric ||\n                 pdiskInfo->BoxId != disk.BoxId ||\n-                pdiskInfo->PDiskConfig != disk.PDiskConfig)\n+                pdiskInfo->PDiskConfig != disk.PDiskConfig ||\n+                pdiskInfo->InferPDiskSlotCountFromUnitSize != disk.InferPDiskSlotCountFromUnitSize)\n             {\n                 // update PDisk configuration\n                 auto pdiskInfo = state.PDisks.FindForUpdate(pdiskId);\n@@ -81,11 +83,13 @@ namespace NKikimr {\n                 pdiskInfo->SharedWithOs = disk.SharedWithOs;\n                 pdiskInfo->ReadCentric = disk.ReadCentric;\n                 pdiskInfo->BoxId = disk.BoxId;\n-                if (pdiskInfo->PDiskConfig != disk.PDiskConfig) {\n+                if (pdiskInfo->PDiskConfig != disk.PDiskConfig\n+                        || pdiskInfo->InferPDiskSlotCountFromUnitSize != disk.InferPDiskSlotCountFromUnitSize) {\n                     if (const auto id = FindStaticPDisk(disk, state); id && state.StaticPDisks.at(*id).PDiskConfig != disk.PDiskConfig) {\n                         throw TExError() << \"PDiskConfig mismatch for static disk\" << TErrorParams::NodeId(disk.NodeId) << TErrorParams::Path(disk.Path);\n                     } else {\n                         pdiskInfo->PDiskConfig = disk.PDiskConfig;\n+                        pdiskInfo->InferPDiskSlotCountFromUnitSize = disk.InferPDiskSlotCountFromUnitSize;\n                     }\n                 }\n                 // run ExtractConfig as the very last step\n@@ -178,6 +182,7 @@ namespace NKikimr {\n                         disk.ReadCentric = driveInfo.ReadCentric;\n                         disk.Serial = serial;\n                         disk.SharedWithOs = driveInfo.SharedWithOs;\n+                        disk.InferPDiskSlotCountFromUnitSize = driveInfo.InferPDiskSlotCountFromUnitSize;\n \n                         auto diskId = disk.GetId();\n                         auto [_, inserted] = disks.try_emplace(diskId, std::move(disk));\n@@ -329,7 +334,8 @@ namespace NKikimr {\n                             NKikimrBlobStorage::EDecommitStatus::DECOMMIT_NONE, NBsController::TPDiskMood::Normal,\n                             disk.Serial, disk.LastSeenSerial, disk.LastSeenPath, staticSlotUsage,\n                             true /* assume shred completed for this disk */,\n-                            NKikimrBlobStorage::TMaintenanceStatus::NO_REQUEST);\n+                            NKikimrBlobStorage::TMaintenanceStatus::NO_REQUEST,\n+                            disk.InferPDiskSlotCountFromUnitSize);\n \n                     // Set PDiskId and Guid in DrivesSerials\n                     if (auto info = state.DrivesSerials.FindForUpdate(disk.Serial)) {\ndiff --git a/ydb/core/mind/bscontroller/impl.h b/ydb/core/mind/bscontroller/impl.h\nindex e5e1d1a172f8..84c0c88a00aa 100644\n--- a/ydb/core/mind/bscontroller/impl.h\n+++ b/ydb/core/mind/bscontroller/impl.h\n@@ -344,6 +344,7 @@ class TBlobStorageController : public TActor<TBlobStorageController>, public TTa\n         bool HasExpectedSlotCount = false;\n         ui32 NumActiveSlots = 0; // sum of owners weights allocated on this PDisk\n         ui32 SlotSizeInUnits = 0;\n+        ui64 InferPDiskSlotCountFromUnitSize = 0;\n         TMap<Schema::VSlot::VSlotID::Type, TIndirectReferable<TVSlotInfo>::TPtr> VSlotsOnPDisk; // vslots over this PDisk\n \n         bool Operational = false; // set to true when both containing node is connected and Operational is reported in Metrics\n@@ -382,7 +383,8 @@ class TBlobStorageController : public TActor<TBlobStorageController>, public TTa\n                     Table::LastSeenPath,\n                     Table::DecommitStatus,\n                     Table::ShredComplete,\n-                    Table::MaintenanceStatus\n+                    Table::MaintenanceStatus,\n+                    Table::InferPDiskSlotCountFromUnitSize\n                 > adapter(\n                     &TPDiskInfo::Path,\n                     &TPDiskInfo::Kind,\n@@ -399,7 +401,8 @@ class TBlobStorageController : public TActor<TBlobStorageController>, public TTa\n                     &TPDiskInfo::LastSeenPath,\n                     &TPDiskInfo::DecommitStatus,\n                     &TPDiskInfo::ShredComplete,\n-                    &TPDiskInfo::MaintenanceStatus\n+                    &TPDiskInfo::MaintenanceStatus,\n+                    &TPDiskInfo::InferPDiskSlotCountFromUnitSize\n                 );\n             callback(&adapter);\n         }\n@@ -423,7 +426,8 @@ class TBlobStorageController : public TActor<TBlobStorageController>, public TTa\n                    const TString& lastSeenPath,\n                    ui32 staticSlotUsage,\n                    bool shredComplete,\n-                   NKikimrBlobStorage::TMaintenanceStatus::E maintenanceStatus)\n+                   NKikimrBlobStorage::TMaintenanceStatus::E maintenanceStatus,\n+                   ui64 inferPDiskSlotCountFromUnitSize)\n             : HostId(hostId)\n             , Path(path)\n             , Kind(kind)\n@@ -434,6 +438,7 @@ class TBlobStorageController : public TActor<TBlobStorageController>, public TTa\n             , PDiskConfig(std::move(pdiskConfig))\n             , ShredComplete(shredComplete)\n             , BoxId(boxId)\n+            , InferPDiskSlotCountFromUnitSize(inferPDiskSlotCountFromUnitSize)\n             , Status(status)\n             , StatusTimestamp(statusTimestamp)\n             , DecommitStatus(decommitStatus)\n@@ -994,6 +999,7 @@ class TBlobStorageController : public TActor<TBlobStorageController>, public TTa\n             Table::ReadCentric::Type ReadCentric;\n             Table::Kind::Type Kind;\n             TMaybe<Table::PDiskConfig::Type> PDiskConfig;\n+            Table::InferPDiskSlotCountFromUnitSize::Type InferPDiskSlotCountFromUnitSize;\n \n             template<typename T>\n             static void Apply(TBlobStorageController* /*controller*/, T&& callback) {\n@@ -1002,13 +1008,15 @@ class TBlobStorageController : public TActor<TBlobStorageController>, public TTa\n                         Table::SharedWithOs,\n                         Table::ReadCentric,\n                         Table::Kind,\n-                        Table::PDiskConfig\n+                        Table::PDiskConfig,\n+                        Table::InferPDiskSlotCountFromUnitSize\n                     > adapter(\n                         &TDriveInfo::Type,\n                         &TDriveInfo::SharedWithOs,\n                         &TDriveInfo::ReadCentric,\n                         &TDriveInfo::Kind,\n-                        &TDriveInfo::PDiskConfig\n+                        &TDriveInfo::PDiskConfig,\n+                        &TDriveInfo::InferPDiskSlotCountFromUnitSize\n                     );\n                 callback(&adapter);\n             }\n@@ -2430,6 +2438,7 @@ class TBlobStorageController : public TActor<TBlobStorageController>, public TTa\n         const Schema::PDisk::Guid::Type Guid;\n         Schema::PDisk::PDiskConfig::Type PDiskConfig;\n         ui32 ExpectedSlotCount = 0;\n+        ui64 InferPDiskSlotCountFromUnitSize = 0;\n \n         // runtime info\n         ui32 StaticSlotUsage = 0;\n@@ -2442,6 +2451,7 @@ class TBlobStorageController : public TActor<TBlobStorageController>, public TTa\n             , Path(pdisk.GetPath())\n             , Category(pdisk.GetPDiskCategory())\n             , Guid(pdisk.GetPDiskGuid())\n+            , InferPDiskSlotCountFromUnitSize(pdisk.GetInferPDiskSlotCountFromUnitSize())\n         {\n             if (pdisk.HasPDiskConfig()) {\n                 const auto& cfg = pdisk.GetPDiskConfig();\ndiff --git a/ydb/core/mind/bscontroller/load_everything.cpp b/ydb/core/mind/bscontroller/load_everything.cpp\nindex 3cef1c93228d..73c198171abd 100644\n--- a/ydb/core/mind/bscontroller/load_everything.cpp\n+++ b/ydb/core/mind/bscontroller/load_everything.cpp\n@@ -348,7 +348,8 @@ class TBlobStorageController::TTxLoadEverything : public TTransactionBase<TBlobS\n                     Self->DefaultMaxSlots, disks.GetValue<T::Status>(), disks.GetValue<T::Timestamp>(),\n                     disks.GetValue<T::DecommitStatus>(), disks.GetValue<T::Mood>(), disks.GetValue<T::ExpectedSerial>(),\n                     disks.GetValue<T::LastSeenSerial>(), disks.GetValue<T::LastSeenPath>(), staticSlotUsage,\n-                    disks.GetValueOrDefault<T::ShredComplete>(), disks.GetValueOrDefault<T::MaintenanceStatus>());\n+                    disks.GetValueOrDefault<T::ShredComplete>(), disks.GetValueOrDefault<T::MaintenanceStatus>(),\n+                    disks.GetValueOrDefault<T::InferPDiskSlotCountFromUnitSize>());\n \n                 if (!disks.Next())\n                     return false;\ndiff --git a/ydb/core/mind/bscontroller/register_node.cpp b/ydb/core/mind/bscontroller/register_node.cpp\nindex 7f9bbe66a4a8..effefe91ea19 100644\n--- a/ydb/core/mind/bscontroller/register_node.cpp\n+++ b/ydb/core/mind/bscontroller/register_node.cpp\n@@ -484,6 +484,9 @@ void TBlobStorageController::ReadPDisk(const TPDiskId& pdiskId, const TPDiskInfo\n             STLOG(PRI_CRIT, BS_CONTROLLER, BSCTXRN02, \"PDiskConfig invalid\", (NodeId, pdiskId.NodeId),\n                 (PDiskId, pdiskId.PDiskId));\n         }\n+        if (pdisk.InferPDiskSlotCountFromUnitSize) {\n+            pDisk->SetInferPDiskSlotCountFromUnitSize(pdisk.InferPDiskSlotCountFromUnitSize);\n+        }\n     }\n     pDisk->SetExpectedSerial(pdisk.ExpectedSerial);\n     pDisk->SetManagementStage(SerialManagementStage);\n@@ -684,4 +687,3 @@ void TBlobStorageController::SendInReply(const IEventHandle& query, std::unique_\n }\n \n } // NKikimr::NBsController\n-\ndiff --git a/ydb/core/mind/bscontroller/scheme.h b/ydb/core/mind/bscontroller/scheme.h\nindex 293e82736d71..879125982e01 100644\n--- a/ydb/core/mind/bscontroller/scheme.h\n+++ b/ydb/core/mind/bscontroller/scheme.h\n@@ -44,11 +44,12 @@ struct Schema : NIceDb::Schema {\n         struct Mood : Column<18, NScheme::NTypeIds::Uint8> { using Type = TPDiskMood::EValue; static constexpr Type Default = Type::Normal; };\n         struct ShredComplete : Column<19, NScheme::NTypeIds::Bool> { static constexpr Type Default = true; };\n         struct MaintenanceStatus : Column<20, NScheme::NTypeIds::Uint8> { using Type = NKikimrBlobStorage::TMaintenanceStatus::E; static constexpr Type Default = NKikimrBlobStorage::TMaintenanceStatus::NO_REQUEST; };\n+        struct InferPDiskSlotCountFromUnitSize : Column<21, NScheme::NTypeIds::Uint64> { static constexpr Type Default = 0; };\n \n         using TKey = TableKey<NodeID, PDiskID>; // order is important\n         using TColumns = TableColumns<NodeID, PDiskID, Path, Category, Guid, SharedWithOs, ReadCentric, NextVSlotId,\n               Status, Timestamp, PDiskConfig, ExpectedSerial, LastSeenSerial, LastSeenPath, DecommitStatus, Mood,\n-              ShredComplete, MaintenanceStatus>;\n+              ShredComplete, MaintenanceStatus, InferPDiskSlotCountFromUnitSize>;\n     };\n \n     struct Group : Table<4> {\n@@ -245,9 +246,10 @@ struct Schema : NIceDb::Schema {\n         struct ReadCentric : Column<5, NScheme::NTypeIds::Bool> {};\n         struct Kind : Column<6, NScheme::NTypeIds::Uint64> {};\n         struct PDiskConfig : Column<7, NScheme::NTypeIds::String> {};\n+        struct InferPDiskSlotCountFromUnitSize : Column<8, NScheme::NTypeIds::Uint64> { static constexpr Type Default = 0; };\n \n         using TKey = TableKey<HostConfigId, Path>;\n-        using TColumns = TableColumns<HostConfigId, Path, TypeCol, SharedWithOs, ReadCentric, Kind, PDiskConfig>;\n+        using TColumns = TableColumns<HostConfigId, Path, TypeCol, SharedWithOs, ReadCentric, Kind, PDiskConfig, InferPDiskSlotCountFromUnitSize>;\n     };\n \n     struct BoxHostV2 : Table<105> {\ndiff --git a/ydb/core/protos/blobstorage.proto b/ydb/core/protos/blobstorage.proto\nindex a97fd5444eb8..ca92fb807d40 100644\n--- a/ydb/core/protos/blobstorage.proto\n+++ b/ydb/core/protos/blobstorage.proto\n@@ -1038,6 +1038,10 @@ message TNodeWardenServiceSet {\n         optional TPDiskSpaceColor.E SpaceColorBorder = 13;\n         optional bool ReadOnly = 14;\n         optional bool Stop = 15;\n+\n+        // If not zero, NodeWarded infers PDiskConfig ExpectedSlotCount and SlotSizeInUnits (if unset)\n+        // from drive size and this value\n+        optional uint64 InferPDiskSlotCountFromUnitSize = 16;\n     }\n \n     message TVDisk {\ndiff --git a/ydb/core/protos/blobstorage_config.proto b/ydb/core/protos/blobstorage_config.proto\nindex 1e998e7b4b31..40cc191c76ac 100644\n--- a/ydb/core/protos/blobstorage_config.proto\n+++ b/ydb/core/protos/blobstorage_config.proto\n@@ -23,6 +23,7 @@ message THostConfigDrive {\n \n     // optional PDisk config for these drives; if not set, default configuration is applied; overrides host-wide default\n     NKikimrBlobStorage.TPDiskConfig PDiskConfig = 6;\n+    uint64 InferPDiskSlotCountFromUnitSize = 7;\n }\n \n // Command used to define typical host configuration. It it used while defining new typical host configurations and as\n@@ -681,6 +682,7 @@ message TBaseConfig {\n         string LastSeenSerial = 18;\n         bool ReadOnly = 19;\n         TMaintenanceStatus.E MaintenanceStatus = 20;\n+        uint64 InferPDiskSlotCountFromUnitSize = 21;\n     }\n     message TVSlot {\n         message TDonorDisk {\ndiff --git a/ydb/library/yaml_config/protos/config.proto b/ydb/library/yaml_config/protos/config.proto\nindex c159089be955..0bb657350d39 100644\n--- a/ydb/library/yaml_config/protos/config.proto\n+++ b/ydb/library/yaml_config/protos/config.proto\n@@ -74,6 +74,12 @@ message TExtendedHostConfigDrive {\n     optional NKikimrBlobStorage.TPDiskConfig PDiskConfig = 6 [(NMarkers.CopyTo) = \"THostConfigDrive\"];\n     optional uint64 ExpectedSlotCount = 7;\n     optional uint32 SlotSizeInUnits = 8;\n+    optional uint64 InferPDiskSlotCountFromUnitSize = 9 [(NMarkers.CopyTo) = \"THostConfigDrive\"];\n+}\n+\n+message TInferPDiskSlotCountFromUnitSize {\n+    optional uint64 Rot = 1;\n+    optional uint64 Ssd = 2; // Implies both ssd and nvme\n }\n \n message THosts {\n@@ -141,6 +147,8 @@ message TExtendedDefineHostConfig {\n     repeated string Ssd = 6 [(NMarkers.CopyTo) = \"TDefineHostConfig\"];\n     repeated string Nvme = 7 [(NMarkers.CopyTo) = \"TDefineHostConfig\"];\n \n+    optional TInferPDiskSlotCountFromUnitSize InferPDiskSlotCountFromUnitSize = 8;\n+\n     optional uint64 ItemConfigGeneration = 100 [(NMarkers.CopyTo) = \"TDefineHostConfig\"];\n }\n \ndiff --git a/ydb/library/yaml_config/yaml_config_parser.cpp b/ydb/library/yaml_config/yaml_config_parser.cpp\nindex 4818ce085b79..22376924057f 100644\n--- a/ydb/library/yaml_config/yaml_config_parser.cpp\n+++ b/ydb/library/yaml_config/yaml_config_parser.cpp\n@@ -351,14 +351,14 @@ namespace NKikimr::NYaml {\n             }\n             if (typesCount == 1) {\n                 TString currentDiskType = hasRot ? \"ROT\" : (hasSsd ? \"SSD\" : \"NVME\");\n-                if (diskType.empty()) { \n+                if (diskType.empty()) {\n                     diskType = currentDiskType;\n                 } else if (diskType != currentDiskType) {\n                     return TString();\n                 }\n             }\n         }\n-        return diskType; \n+        return diskType;\n     }\n \n     void PrepareActorSystemConfig(NKikimrConfig::TAppConfig& config) {\n@@ -641,6 +641,20 @@ namespace NKikimr::NYaml {\n                         drive.MutablePDiskConfig()->SetSlotSizeInUnits(drive.GetSlotSizeInUnits());\n                     }\n                 }\n+\n+                if (hostConfig.HasInferPDiskSlotCountFromUnitSize()) {\n+                    auto unitSizeByType = hostConfig.GetInferPDiskSlotCountFromUnitSize();\n+                    for(auto& drive : *hostConfig.MutableDrive()) {\n+                        if (drive.HasInferPDiskSlotCountFromUnitSize()) {\n+                            continue;\n+                        }\n+                        if (drive.GetType() == \"ROT\" && unitSizeByType.HasRot()) {\n+                            drive.SetInferPDiskSlotCountFromUnitSize(unitSizeByType.GetRot());\n+                        } else if (auto& type = drive.GetType(); (type == \"SSD\" || type == \"NVME\") && unitSizeByType.HasSsd()) {\n+                            drive.SetInferPDiskSlotCountFromUnitSize(unitSizeByType.GetSsd());\n+                        }\n+                    }\n+                }\n             }\n         }\n \n",
  "test_patch": "diff --git a/ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-missing-all.yaml.result.json b/ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-missing-all.yaml.result.json\nindex 69a6f9fa1ed5..ba9f1ab4915e 100644\n--- a/ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-missing-all.yaml.result.json\n+++ b/ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-missing-all.yaml.result.json\n@@ -1,1 +1,1 @@\n-{\"error\": true, \"stderr\": \"Terminating due to uncaught exception REDACTED    what() -> \\\"ydb/library/yaml_config/yaml_config_parser.cpp:884: Erasure species is not specified for storage pool type, id 0\\\"\\n of type TWithBackTrace<yexception>\\n\"}\n\\ No newline at end of file\n+{\"error\": true, \"stderr\": \"Terminating due to uncaught exception REDACTED    what() -> \\\"ydb/library/yaml_config/yaml_config_parser.cpp:898: Erasure species is not specified for storage pool type, id 0\\\"\\n of type TWithBackTrace<yexception>\\n\"}\n\\ No newline at end of file\ndiff --git a/ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-unmatched-types.yaml.result.json b/ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-unmatched-types.yaml.result.json\nindex 846ff0a96e30..b3615041cb45 100644\n--- a/ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-unmatched-types.yaml.result.json\n+++ b/ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-unmatched-types.yaml.result.json\n@@ -1,1 +1,1 @@\n-{\"error\": true, \"stderr\": \"Terminating due to uncaught exception REDACTED    what() -> \\\"ydb/library/yaml_config/yaml_config_parser.cpp:888: Disk type is not specified for storage pool type, id 0\\\"\\n of type TWithBackTrace<yexception>\\n\"}\n\\ No newline at end of file\n+{\"error\": true, \"stderr\": \"Terminating due to uncaught exception REDACTED    what() -> \\\"ydb/library/yaml_config/yaml_config_parser.cpp:902: Disk type is not specified for storage pool type, id 0\\\"\\n of type TWithBackTrace<yexception>\\n\"}\n\\ No newline at end of file\ndiff --git a/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_bs_controller_/flat_bs_controller.schema b/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_bs_controller_/flat_bs_controller.schema\nindex 95489c6101e5..188890d86346 100644\n--- a/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_bs_controller_/flat_bs_controller.schema\n+++ b/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_bs_controller_/flat_bs_controller.schema\n@@ -346,6 +346,11 @@\n                 \"ColumnId\": 20,\n                 \"ColumnName\": \"MaintenanceStatus\",\n                 \"ColumnType\": \"Byte\"\n+            },\n+            {\n+                \"ColumnId\": 21,\n+                \"ColumnName\": \"InferPDiskSlotCountFromUnitSize\",\n+                \"ColumnType\": \"Uint64\"\n             }\n         ],\n         \"ColumnsDropped\": [],\n@@ -369,7 +374,8 @@\n                     17,\n                     18,\n                     19,\n-                    20\n+                    20,\n+                    21\n                 ],\n                 \"RoomID\": 0,\n                 \"Codec\": 0,\n@@ -1827,11 +1833,6 @@\n             2\n         ],\n         \"ColumnsAdded\": [\n-            {\n-                \"ColumnId\": 7,\n-                \"ColumnName\": \"PDiskConfig\",\n-                \"ColumnType\": \"String\"\n-            },\n             {\n                 \"ColumnId\": 1,\n                 \"ColumnName\": \"HostConfigId\",\n@@ -1861,19 +1862,30 @@\n                 \"ColumnId\": 6,\n                 \"ColumnName\": \"Kind\",\n                 \"ColumnType\": \"Uint64\"\n+            },\n+            {\n+                \"ColumnId\": 7,\n+                \"ColumnName\": \"PDiskConfig\",\n+                \"ColumnType\": \"String\"\n+            },\n+            {\n+                \"ColumnId\": 8,\n+                \"ColumnName\": \"InferPDiskSlotCountFromUnitSize\",\n+                \"ColumnType\": \"Uint64\"\n             }\n         ],\n         \"ColumnsDropped\": [],\n         \"ColumnFamilies\": {\n             \"0\": {\n                 \"Columns\": [\n-                    7,\n                     1,\n                     2,\n                     3,\n                     4,\n                     5,\n-                    6\n+                    6,\n+                    7,\n+                    8\n                 ],\n                 \"RoomID\": 0,\n                 \"Codec\": 0,\n",
  "problem_statement": "Infer PDisk ExpectedSlotCount\nInfer `PDiskConfig` parameters `ExpectedSlotCount` and `SlotSizeInUnits` from `NodeWarden.PDiskUnitSizeInBytes`\n\nNowadays a user has to specify PDiskConfig parameters explicitly. They dislike it, especially  `ExpectedSlotCount` and `SlotSizeInUnits` because it's unobvious how to calculate them correctly.\n\nThe task is to define a new parameter of `NodeWarden` called `PDiskSlotSizeInBytes`. The value is provided by BSController. The NodeWarden should apply it when creating a new PDisk. \n",
  "hints_text": "",
  "created_at": "2025-07-10T17:53:22Z",
  "modified_files": [
    "ydb/core/blobstorage/nodewarden/blobstorage_node_warden_ut.cpp",
    "ydb/core/blobstorage/nodewarden/node_warden_impl.h",
    "ydb/core/blobstorage/nodewarden/node_warden_pdisk.cpp",
    "ydb/core/blobstorage/pdisk/blobstorage_pdisk_config.h",
    "ydb/core/mind/bscontroller/cmds_host_config.cpp",
    "ydb/core/mind/bscontroller/cmds_storage_pool.cpp",
    "ydb/core/mind/bscontroller/config.cpp",
    "ydb/core/mind/bscontroller/config_fit_pdisks.cpp",
    "ydb/core/mind/bscontroller/impl.h",
    "ydb/core/mind/bscontroller/load_everything.cpp",
    "ydb/core/mind/bscontroller/register_node.cpp",
    "ydb/core/mind/bscontroller/scheme.h",
    "ydb/core/protos/blobstorage.proto",
    "ydb/core/protos/blobstorage_config.proto",
    "ydb/library/yaml_config/protos/config.proto",
    "ydb/library/yaml_config/yaml_config_parser.cpp"
  ],
  "modified_test_files": [
    "ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-missing-all.yaml.result.json",
    "ydb/library/yaml_config/ut_transform/canondata/test_transform.TestYamlConfigTransformations.test_domains_config_dump_/multinode-unmatched-types.yaml.result.json",
    "ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_bs_controller_/flat_bs_controller.schema"
  ]
}