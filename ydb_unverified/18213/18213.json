{
  "repo": "ydb-platform/ydb",
  "pull_number": 18213,
  "instance_id": "ydb-platform__ydb-18213",
  "issue_numbers": [
    "18151"
  ],
  "base_commit": "97a455c912e9092c1679ef7f3919b376e47e36cd",
  "patch": "diff --git a/ydb/core/tablet_flat/flat_fwd_cache.h b/ydb/core/tablet_flat/flat_fwd_cache.h\nindex 5377d8d063a0..8f4b1200580f 100644\n--- a/ydb/core/tablet_flat/flat_fwd_cache.h\n+++ b/ydb/core/tablet_flat/flat_fwd_cache.h\n@@ -279,6 +279,7 @@ namespace NFwd {\n             TDeque<TPageEx> Pages;\n             ui32 PagesBeginOffset = 0, PagesPendingOffset = 0;\n             TDeque<TNodeState> Queue;\n+            TPageId BeginPageId = Max<TPageId>(), EndPageId = 0;\n         };\n \n     public:\n@@ -300,6 +301,8 @@ namespace NFwd {\n             auto& meta = Part->IndexPages.GetBTree(groupId);\n             Levels.resize(meta.LevelCount + 1);\n             Levels[0].Queue.push_back({meta.GetPageId(), meta.GetDataSize()});\n+            Levels[0].BeginPageId = meta.GetPageId();\n+            Levels[0].EndPageId = meta.GetPageId() + 1;\n             if (meta.LevelCount) {\n                 IndexPageLocator.Add(meta.GetPageId(), GroupId, 0);\n             }\n@@ -318,6 +321,9 @@ namespace NFwd {\n                 return {page, false, true};\n             }\n \n+            Y_ENSURE(level.BeginPageId <= pageId && pageId < level.EndPageId, \"Requested page \" << pageId << \" is out of loaded slice \"\n+                << BeginRowId << \" \" << EndRowId << \" \" << level.BeginPageId << \" \" << level.EndPageId << \" with index \" << Part->IndexPages.GetBTree(GroupId).ToString());\n+\n             DropPagesBefore(level, pageId);\n             ShrinkPages(level);\n \n@@ -429,8 +435,13 @@ namespace NFwd {\n                         if (child.GetRowCount() <= BeginRowId) {\n                             continue;\n                         }\n-                        Y_ENSURE(!Levels[levelId + 1].Queue || Levels[levelId + 1].Queue.back().PageId < child.GetPageId());\n-                        Levels[levelId + 1].Queue.push_back({child.GetPageId(), child.GetDataSize()});\n+                        auto& nextLevel = Levels[levelId + 1];\n+                        Y_ENSURE(!nextLevel.Queue || nextLevel.Queue.back().PageId < child.GetPageId());\n+                        nextLevel.Queue.push_back({child.GetPageId(), child.GetDataSize()});\n+                        if (nextLevel.BeginPageId == Max<TPageId>()) {\n+                            nextLevel.BeginPageId = child.GetPageId();\n+                        }\n+                        nextLevel.EndPageId = child.GetPageId() + 1;\n                         if (child.GetRowCount() >= EndRowId) {\n                             break;\n                         }\ndiff --git a/ydb/core/tablet_flat/flat_page_btree_index.h b/ydb/core/tablet_flat/flat_page_btree_index.h\nindex bb3f2acda52c..27b7b6aae0f0 100644\n--- a/ydb/core/tablet_flat/flat_page_btree_index.h\n+++ b/ydb/core/tablet_flat/flat_page_btree_index.h\n@@ -90,6 +90,8 @@ namespace NKikimr::NTable::NPage {\n             TRowId RowCount_;\n             ui64 DataSize_;\n \n+            auto operator<=>(const TShortChild&) const = default;\n+\n             inline TPageId GetPageId() const noexcept {\n                 return PageId_;\n             }\n@@ -102,7 +104,9 @@ namespace NKikimr::NTable::NPage {\n                 return DataSize_;\n             }\n \n-            auto operator<=>(const TShortChild&) const = default;\n+            TString ToString() const {\n+                return TStringBuilder() << \"PageId: \" << GetPageId() << \" RowCount: \" << GetRowCount() << \" DataSize: \" << GetDataSize();\n+            }\n         } Y_PACKED;\n \n         static_assert(sizeof(TShortChild) == 20, \"Invalid TBtreeIndexNode TShortChild size\");\ndiff --git a/ydb/core/tablet_flat/flat_part_iter.h b/ydb/core/tablet_flat/flat_part_iter.h\nindex e425792056d9..91d721fa5f4c 100644\n--- a/ydb/core/tablet_flat/flat_part_iter.h\n+++ b/ydb/core/tablet_flat/flat_part_iter.h\n@@ -187,6 +187,11 @@ namespace NTable {\n                 return EReady::Data;\n             }\n \n+            if (Page.BaseRow() + Page->Count >= EndRowId) {\n+                // Row is outside of bounds\n+                return Exhausted();\n+            }\n+\n             if (seek != ESeek::Exact) {\n                 // The row we seek is on the next page\n \ndiff --git a/ydb/core/tablet_flat/ut/ut_btree_index_iter_charge.cpp b/ydb/core/tablet_flat/ut/ut_btree_index_iter_charge.cpp\nindex e97188430c44..f01826045080 100644\n--- a/ydb/core/tablet_flat/ut/ut_btree_index_iter_charge.cpp\n+++ b/ydb/core/tablet_flat/ut/ut_btree_index_iter_charge.cpp\n@@ -5,6 +5,7 @@\n #include \"flat_part_charge_range.h\"\n #include \"test/libs/table/test_writer.h\"\n #include \"test/libs/table/wrap_part.h\"\n+#include <test/libs/table/test_envs.h>\n #include <ydb/core/tablet_flat/test/libs/rows/layout.h>\n #include <ydb/core/tablet_flat/util_fmt_abort.h>\n #include <library/cpp/testing/unittest/registar.h>\n@@ -95,10 +96,25 @@ namespace {\n     }\n \n     struct TTestParams {\n+        enum ESlices : ui32 {\n+            None,\n+            Many,\n+            Type1,\n+            Type2,\n+            Type3,\n+            Type4,\n+            Type5,\n+            Type6,\n+            Type7,\n+            // new types should go here\n+\n+            End\n+        };\n+\n         const ui32 Levels = Max<ui32>();\n         const bool Groups = false;\n         const bool History = false;\n-        const bool Slices = false;\n+        const ESlices Slices = None;\n         const ui32 Rows = 40;\n         const bool StickSomePages = false;\n     };\n@@ -164,15 +180,53 @@ namespace {\n             auto add = [&](ui32 pageIndex1Inclusive, ui32 pageIndex2Exclusive) {\n                 slices.push_back(IndexTools::MakeSlice(part, pageIndex1Inclusive, pageIndex2Exclusive));\n             };\n-            add(0, 2);\n-            add(3, 4);\n-            add(4, 6);\n-            add(7, 8);\n-            add(8, 9);\n-            add(10, 14);\n-            add(16, 17);\n-            add(17, 19);\n-            add(19, 20);\n+\n+            switch (params.Slices) {\n+            case TTestParams::Many: {\n+                add(0, 2);\n+                add(3, 4);\n+                add(4, 6);\n+                add(7, 8);\n+                add(8, 9);\n+                add(10, 14);\n+                add(16, 17);\n+                add(17, 19);\n+                add(19, 20);\n+                break;\n+            }\n+            case TTestParams::Type1: {\n+                add(7, 8);\n+                add(8, 9);\n+                break;\n+            }\n+            case TTestParams::Type2: {\n+                add(7, 8);\n+                break;\n+            }\n+            case TTestParams::Type3: {\n+                add(7, 9);\n+                break;\n+            }\n+            case TTestParams::Type4: {\n+                add(7, 10);\n+                break;\n+            }\n+            case TTestParams::Type5: {\n+                add(8, 10);\n+                break;\n+            }\n+            case TTestParams::Type6: {\n+                add(9, 10);\n+                break;\n+            }\n+            case TTestParams::Type7: {\n+                add(2, 4);\n+                add(17, 18);\n+                break;\n+            }\n+            default:\n+                Y_ABORT(\"Unknown slices\");\n+            }\n \n             partSlices->clear();\n             for (auto s : slices) {\n@@ -180,16 +234,12 @@ namespace {\n             }\n         }\n \n-        if (params.Slices) {\n-            UNIT_ASSERT_GT(part.Slices->size(), 1);\n-        } else {\n-            UNIT_ASSERT_VALUES_EQUAL(part.Slices->size(), 1);\n+        if (params.Slices <= TTestParams::None + 1) {\n+            Cerr << DumpPart(part, 3) << Endl;\n         }\n-\n         Cerr << \"Slices\";\n         part.Slices->Describe(Cerr);\n         Cerr << Endl;\n-        Cerr << DumpPart(part, 3) << Endl;\n \n         UNIT_ASSERT_VALUES_EQUAL(part.IndexPages.BTreeGroups[0].LevelCount, params.Levels);\n         if (params.Groups) {\n@@ -236,6 +286,21 @@ namespace {\n         UNIT_ASSERT_C(false,  error);\n         return EReady::Page;\n     }\n+\n+    EReady Retry(std::function<EReady()> action, TForwardEnv& env, const TString& message, ui32 failsAllowed = 10) {\n+        Y_UNUSED(env); // loads pages automatically\n+\n+        for (ui32 attempt = 0; attempt <= failsAllowed; attempt++) {\n+            if (auto ready = action(); ready != EReady::Page) {\n+                return ready;\n+            }\n+        }\n+\n+        TStringBuilder error;\n+        error << \"Too many fails (\" << failsAllowed + 1 << \") \" << message << Endl << \"Requests \";\n+        UNIT_ASSERT_C(false,  error);\n+        return EReady::Page;\n+    }\n }\n \n Y_UNIT_TEST_SUITE(TPartGroupBtreeIndexIter) {\n@@ -715,6 +780,12 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n         }, env, message, failsAllowed);\n     }\n \n+    EReady Seek(TWrapPartImpl<EDirection::Forward>& wrap, TForwardEnv& env, const TCells key1, ESeek seek, const TString& message, ui32 failsAllowed) {\n+        return Retry([&]() {\n+            return wrap.Seek(key1, seek);\n+        }, env, message, failsAllowed);\n+    }\n+\n     template<EDirection Direction>\n     EReady Next(TWrapPartImpl<Direction>& wrap, TTouchEnv& env, const TString& message, ui32 failsAllowed) {\n         return Retry([&]() {\n@@ -722,6 +793,12 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n         }, env, message, failsAllowed);\n     }\n \n+    EReady Next(TWrapPartImpl<EDirection::Forward>& wrap, TForwardEnv& env, const TString& message, ui32 failsAllowed) {\n+        return Retry([&]() {\n+            return wrap.Next();\n+        }, env, message, failsAllowed);\n+    }\n+\n     template<EDirection Direction>\n     EReady SkipToRowVersion(TWrapPartImpl<Direction>& wrap, TTouchEnv& env, TRowVersion rowVersion, const TString& message, ui32 failsAllowed) {\n         return Retry([&]() {\n@@ -745,7 +822,7 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n         wrap.StopAfter(key2);\n         wrap.Make(&env);\n         \n-        if (Seek(wrap, env, key1, seek, message + \" Seek\", failsAllowed) != EReady::Data) {\n+        if (Seek(wrap, env, key1, seek, TStringBuilder() << message << \" Seek \" << seek, failsAllowed) != EReady::Data) {\n             return;\n         }\n         if (history) {\n@@ -788,19 +865,19 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n                     TVector<TCell> key = MakeKey(firstCell, secondCell);\n \n                     TTouchEnv bTreeEnv, flatEnv;\n-                    TWrapPartImpl<Direction> bTree(eggs, btreeRun);\n-                    TWrapPartImpl<Direction> flat(eggs, flatRun);\n-                    bTree.Make(&bTreeEnv);\n-                    flat.Make(&flatEnv);\n+                    TWrapPartImpl<Direction> bTreeIt(eggs, btreeRun);\n+                    TWrapPartImpl<Direction> flatIt(eggs, flatRun);\n+                    bTreeIt.Make(&bTreeEnv);\n+                    flatIt.Make(&flatEnv);\n \n                     {\n                         TStringBuilder message = TStringBuilder() << (reverse ?  \"IterateReverse\" : \"Iterate\") << \"(\" << seek << \") \";\n                         for (auto c : key) {\n                             message << c.AsValue<ui32>() << \" \";\n                         }\n-                        EReady bTreeReady = Seek(bTree, bTreeEnv, key, seek, message, failsAllowed);\n-                        EReady flatReady = Seek(flat, flatEnv, key, seek, message, failsAllowed);\n-                        AssertEqual(bTree, bTreeReady, flat, flatReady, message);\n+                        EReady bTreeReady = Seek(bTreeIt, bTreeEnv, key, seek, message, failsAllowed);\n+                        EReady flatReady = Seek(flatIt, flatEnv, key, seek, message, failsAllowed);\n+                        AssertEqual(bTreeIt, bTreeReady, flatIt, flatReady, message);\n                         AssertLoadedTheSame(part, bTreeEnv, flatEnv, message);\n                     }\n \n@@ -810,9 +887,9 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n                             message << c.AsValue<ui32>() << \" \";\n                         }\n                         message << \" --> \" << steps << \" steps \";\n-                        EReady bTreeReady = Next(bTree, bTreeEnv, message, failsAllowed);\n-                        EReady flatReady = Next(flat, flatEnv, message, failsAllowed);\n-                        AssertEqual(bTree, bTreeReady, flat, flatReady, message);\n+                        EReady bTreeReady = Next(bTreeIt, bTreeEnv, message, failsAllowed);\n+                        EReady flatReady = Next(flatIt, flatEnv, message, failsAllowed);\n+                        AssertEqual(bTreeIt, bTreeReady, flatIt, flatReady, message);\n                         AssertLoadedTheSame(part, bTreeEnv, flatEnv, message);\n                     }\n                 }\n@@ -820,6 +897,84 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n         }\n     }\n \n+    void CheckIterateFwd(TTestParams params, const TPartEggs& eggs) {\n+        const ui32 failsAllowed = GetFailsAllowed(params);\n+        const auto part = *eggs.Lone();\n+\n+        TRun btreeRun(*eggs.Scheme->Keys), flatRun(*eggs.Scheme->Keys);\n+        MakeRuns(eggs, btreeRun, flatRun);\n+\n+        auto tags = TVector<TTag>();\n+        for (auto c : eggs.Scheme->Cols) {\n+            tags.push_back(c.Tag);\n+        }\n+\n+        for (auto [readLo, readHi] : TVector<std::pair<ui32, ui32>>{{512, 1024}}) {\n+        for (ESeek seek : {ESeek::Exact, ESeek::Lower, ESeek::Upper}) {\n+        #if !defined(_tsan_enabled_) && !defined(_msan_enabled_) && !defined(_asan_enabled_)\n+            for (ui32 firstCell : xrange<ui32>(0, part.Stat.Rows / 7 + 1)) {\n+                for (ui32 secondCell : xrange<ui32>(0, 14)) {\n+        #else\n+            for (ui32 firstCell : xrange<ui32>(0, part.Stat.Rows / 7 + 1)) {\n+                for (ui32 secondCell : xrange<ui32>(10, 14)) {\n+        #endif\n+                    TVector<TCell> key = MakeKey(firstCell, secondCell);\n+\n+                    TTouchEnv bTreeEnv, flatEnv;\n+                    TWrapPartImpl<EDirection::Forward> bTreeIt(eggs, btreeRun), flatIt(eggs, flatRun);\n+                    bTreeIt.Make(&bTreeEnv);\n+                    flatIt.Make(&flatEnv);\n+\n+                    TForwardEnv bTreeFwdEnv(readLo, readHi), flatFwdEnv(readLo, readHi);\n+                    TWrapPartImpl<EDirection::Forward> bTreeFwdIt(eggs, btreeRun), flatFwdIt(eggs, flatRun);\n+                    bTreeFwdIt.Make(&bTreeFwdEnv);\n+                    flatFwdIt.Make(&flatFwdEnv);\n+\n+                    {\n+                        TStringBuilder message = TStringBuilder() << \"IterateFwd(\" << readLo << \", \" << readHi << \", \" << seek << \") \";\n+                        for (auto c : key) {\n+                            message << c.AsValue<ui32>() << \" \";\n+                        }\n+\n+                        EReady bTreeReady = Seek(bTreeIt, bTreeEnv, key, seek, message, failsAllowed);\n+                        EReady flatReady = Seek(flatIt, flatEnv, key, seek, message, failsAllowed);\n+                        AssertEqual(bTreeIt, bTreeReady, flatIt, flatReady, message);\n+\n+                        EReady bTreeFwdReady = Seek(bTreeFwdIt, bTreeFwdEnv, key, seek, message, failsAllowed);\n+                        EReady flatFwdReady = Seek(flatFwdIt, flatFwdEnv, key, seek, message, failsAllowed);\n+                        AssertEqual(bTreeFwdIt, bTreeFwdReady, flatFwdIt, flatFwdReady, message);\n+\n+                        // compare fwd and touch env results:\n+                        AssertEqual(bTreeFwdIt, bTreeFwdReady, flatIt, flatReady, message);\n+\n+                        AssertLoadedTheSame(part, bTreeEnv, flatEnv, message); // TODO: check fwd?\n+                    }\n+\n+                    for (ui32 steps = 1; steps <= 10; steps++) {\n+                        TStringBuilder message = TStringBuilder() << \"IterateFwd(\" << readLo << \", \" << readHi << \", \" << seek << \") \";\n+                        for (auto c : key) {\n+                            message << c.AsValue<ui32>() << \" \";\n+                        }\n+                        message << \" --> \" << steps << \" steps \";\n+                        \n+                        EReady bTreeReady = Next(bTreeIt, bTreeEnv, message, failsAllowed);\n+                        EReady flatReady = Next(flatIt, flatEnv, message, failsAllowed);\n+                        AssertEqual(bTreeIt, bTreeReady, flatIt, flatReady, message);\n+\n+                        EReady bTreeFwdReady = Next(bTreeFwdIt, bTreeFwdEnv, message, failsAllowed);\n+                        EReady flatFwdReady = Next(flatFwdIt, flatFwdEnv, message, failsAllowed);\n+                        AssertEqual(bTreeFwdIt, bTreeFwdReady, flatFwdIt, flatFwdReady, message);\n+\n+                        // compare fwd and touch env results:\n+                        AssertEqual(bTreeFwdIt, bTreeFwdReady, flatIt, flatReady, message);\n+\n+                        AssertLoadedTheSame(part, bTreeEnv, flatEnv, message); // TODO: check fwd?\n+                    }\n+                }\n+            }\n+        }}\n+    }\n+\n     template<EDirection Direction>\n     void CheckCharge(TTestParams params, const TPartEggs& eggs) {\n         constexpr bool reverse = Direction == EDirection::Reverse;\n@@ -835,17 +990,17 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n         }\n \n         #if !defined(_tsan_enabled_) && !defined(_msan_enabled_) && !defined(_asan_enabled_)\n-        for (ui64 itemsLimit : part.Slices->size() > 1 ? TVector<ui64>{0, 1, 2, 5} : TVector<ui64>{0, 1, 2, 5, 13, 19, part.Stat.Rows - 2, part.Stat.Rows - 1}) {\n+        for (ui64 itemsLimit : params.Groups || params.History || params.Slices ? TVector<ui64>{0, 3} : TVector<ui64>{0, 1, 2, 5, 13, 19, part.Stat.Rows - 2, part.Stat.Rows - 1}) {\n             for (ui32 firstCellKey1 : xrange<ui32>(0, part.Stat.Rows / 7 + 1)) {\n                 for (ui32 secondCellKey1 : xrange<ui32>(0, 14)) {\n-                    for (ui32 firstCellKey2 : xrange<ui32>(0, part.Stat.Rows / 7 + 1)) {\n-                        for (ui32 secondCellKey2 : xrange<ui32>(0, 14)) {\n+                    for (ui32 firstCellKey2 : xrange<ui32>(0, itemsLimit ? 1 : part.Stat.Rows / 7 + 1)) {\n+                        for (ui32 secondCellKey2 : xrange<ui32>(0, itemsLimit ? 1 : 14)) {\n         #else\n-        for (ui64 itemsLimit : part.Slices->size() > 1 ? TVector<ui64>{0, 3} : TVector<ui64>{0, 5, part.Stat.Rows - 1}) {\n+        for (ui64 itemsLimit : params.Groups || params.History || params.Slices ? TVector<ui64>{0, 3} : TVector<ui64>{0, 5, part.Stat.Rows - 1}) {\n             for (ui32 firstCellKey1 : xrange<ui32>(0, part.Stat.Rows / 7 + 1)) {\n                 for (ui32 secondCellKey1 : xrange<ui32>(10, 14)) {\n                     for (ui32 firstCellKey2 : xrange<ui32>(0, part.Stat.Rows / 7 + 1)) {\n-                        for (ui32 secondCellKey2 : xrange<ui32>(10, 14)) {\n+                        for (ui32 secondCellKey2 : xrange<ui32>(10, itemsLimit ? 11 : 14)) {\n         #endif\n                             TVector<TCell> key1 = MakeKey(firstCellKey1, secondCellKey1);\n                             TVector<TCell> key2 = MakeKey(firstCellKey2, secondCellKey2);\n@@ -887,6 +1042,9 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n \n         CheckIterate<EDirection::Forward>(params, eggs);\n         CheckIterate<EDirection::Reverse>(params, eggs);\n+\n+        CheckIterateFwd(params, eggs);\n+\n         CheckCharge<EDirection::Forward>(params, eggs);\n         CheckCharge<EDirection::Reverse>(params, eggs);\n     }\n@@ -916,19 +1074,27 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n     }\n \n     Y_UNIT_TEST(OneNode_Slices) {\n-        CheckPart({.Levels = 1, .Slices = true});\n+        for (auto slices : xrange<ui32>(TTestParams::ESlices::None + 1, TTestParams::ESlices::End)) {\n+            CheckPart({.Levels = 1, .Slices = TTestParams::ESlices(slices)});\n+        }\n     }\n \n     Y_UNIT_TEST(OneNode_Groups_Slices) {\n-        CheckPart({.Levels = 1, .Groups = true, .Slices = true});\n+        for (auto slices : xrange<ui32>(TTestParams::ESlices::None + 1, TTestParams::ESlices::Many + 1)) {\n+            CheckPart({.Levels = 1, .Groups = true, .Slices = TTestParams::ESlices(slices)});\n+        }\n     }\n \n     Y_UNIT_TEST(OneNode_History_Slices) {\n-        CheckPart({.Levels = 1, .History = true, .Slices = true});\n+        for (auto slices : xrange<ui32>(TTestParams::ESlices::None + 1, TTestParams::ESlices::Many + 1)) {\n+            CheckPart({.Levels = 1, .History = true, .Slices = TTestParams::ESlices(slices)});\n+        }\n     }\n \n     Y_UNIT_TEST(OneNode_Groups_History_Slices) {\n-        CheckPart({.Levels = 1, .Groups = true, .History = true, .Slices = true});\n+        for (auto slices : xrange<ui32>(TTestParams::ESlices::None + 1, TTestParams::ESlices::Many + 1)) {\n+            CheckPart({.Levels = 1, .Groups = true, .History = true, .Slices = TTestParams::ESlices(slices)});\n+        }\n     }\n \n     Y_UNIT_TEST(FewNodes) {\n@@ -948,23 +1114,33 @@ Y_UNIT_TEST_SUITE(TPartBtreeIndexIteration) {\n     }\n \n     Y_UNIT_TEST(FewNodes_Slices) {\n-        CheckPart({.Levels = 3, .Slices = true});\n+        for (auto slices : xrange<ui32>(TTestParams::ESlices::None + 1, TTestParams::ESlices::End)) {\n+            CheckPart({.Levels = 3, .Slices = TTestParams::ESlices(slices)});\n+        }\n     }\n \n     Y_UNIT_TEST(FewNodes_Groups_Slices) {\n-        CheckPart({.Levels = 3, .Groups = true, .Slices = true});\n+        for (auto slices : xrange<ui32>(TTestParams::ESlices::None + 1, TTestParams::ESlices::Many + 1)) {\n+            CheckPart({.Levels = 3, .Groups = true, .Slices = TTestParams::ESlices(slices)});\n+        }\n     }\n \n     Y_UNIT_TEST(FewNodes_History_Slices) {\n-        CheckPart({.Levels = 3, .History = true, .Slices = true});\n+        for (auto slices : xrange<ui32>(TTestParams::ESlices::None + 1, TTestParams::ESlices::Many + 1)) {\n+            CheckPart({.Levels = 3, .History = true, .Slices = TTestParams::ESlices(slices)});\n+        }\n     }\n \n     Y_UNIT_TEST(FewNodes_Groups_History_Slices) {\n-        CheckPart({.Levels = 3, .Groups = true, .History = true, .Slices = true});\n+        for (auto slices : xrange<ui32>(TTestParams::ESlices::None + 1, TTestParams::ESlices::Many + 1)) {\n+            CheckPart({.Levels = 3, .Groups = true, .History = true, .Slices = TTestParams::ESlices(slices)});\n+        }\n     }\n \n     Y_UNIT_TEST(FewNodes_Groups_History_Slices_Sticky) {\n-        CheckPart({.Levels = 3, .Groups = true, .History = true, .Slices = true, .StickSomePages = true});\n+        for (auto slices : xrange<ui32>(TTestParams::ESlices::None + 1, TTestParams::ESlices::Many + 1)) {\n+            CheckPart({.Levels = 3, .Groups = true, .History = true, .Slices = TTestParams::ESlices(slices), .StickSomePages = true});\n+        }\n     }\n }\n \n",
  "test_patch": "diff --git a/ydb/core/tablet_flat/test/libs/table/test_envs.h b/ydb/core/tablet_flat/test/libs/table/test_envs.h\nindex 5ac0e42d78f9..bca76f5f740d 100644\n--- a/ydb/core/tablet_flat/test/libs/table/test_envs.h\n+++ b/ydb/core/tablet_flat/test/libs/table/test_envs.h\n@@ -304,7 +304,7 @@ namespace NTest {\n                 for (ui32 room : xrange(partStore->Store->GetRoomCount())) {\n                     if (room < partStore->Store->GetGroupCount()) {\n                         NPage::TGroupId groupId(room);\n-                        partGroupQueues.push_back(Settle(partStore, room, NFwd::CreateCache(part, PartIndexPageLocator[part], groupId)));\n+                        partGroupQueues.push_back(Settle(partStore, room, NFwd::CreateCache(part, PartIndexPageLocator[part], groupId, partStore->Slices)));\n                     } else if (room == partStore->Store->GetOuterRoom()) {\n                         partGroupQueues.push_back(Settle(partStore, room, MakeOuter(partStore)));\n                     } else if (room == partStore->Store->GetExternRoom()) {\n",
  "problem_statement": "VERIFY AdvanceNextPage(): requirement !queue.empty() failed\n```\n2025-05-08T17:17:53.512688+03:00 VERIFY failed (2025-05-08T17:17:53.512627+0300):\n2025-05-08T17:17:53.512688+03:00   contrib/ydb/core/tablet_flat/flat_fwd_cache.h:482\n2025-05-08T17:17:53.512688+03:00   AdvanceNextPage(): requirement !queue.empty() failed\n2025-05-08T17:20:10.254166+03:00 0. /-S/util/system/yassert.cpp:55: NPrivate::Panic(NPrivate::TStaticBuf const&, int, char const*, char const*, char const*, ...) @ 0x559F43C7C61B\n2025-05-08T17:20:11.716080+03:00 1. /-S/contrib/ydb/core/tablet_flat/flat_fwd_cache.h:482: NKikimr::NTable::NFwd::TBTreeIndexCache::AdvanceNextPage(NKikimr::NTable::NFwd::TBTreeIndexCache::TLevel&, unsigned int) @ 0x559F47D0996A\n2025-05-08T17:20:11.747555+03:00 2. /-S/contrib/ydb/core/tablet_flat/flat_fwd_cache.h:334: NKikimr::NTable::NFwd::TBTreeIndexCache::Get(NKikimr::NTable::NFwd::IPageLoadingQueue*, unsigned int, NKikimr::NTable::NPage::EPage, unsigned long) @ 0x559F47D0996A\n2025-05-08T17:20:11.771071+03:00 3. /-S/contrib/ydb/core/tablet_flat/flat_fwd_env.h:276: NKikimr::NTable::NFwd::TEnv::Get(NKikimr::NTable::NFwd::TPartGroupLoadingQueue&, unsigned int, NKikimr::NTable::NPage::EPage) @ 0x559F47D11C6B\n2025-05-08T17:20:11.771248+03:00 4. /-S/contrib/ydb/core/tablet_flat/flat_fwd_env.h:134: NKikimr::NTable::NFwd::TEnv::TryGetPage(NKikimr::NTable::TPart const*, unsigned int, NKikimr::NTable::NPage::TGroupId) @ 0x559F47D11B71\n2025-05-08T17:20:11.872520+03:00 5. /-S/contrib/ydb/core/tablet_flat/flat_part_index_iter_bree_index.h:363: NKikimr::NTable::TPartGroupBtreeIndexIter::TryLoad(NKikimr::NTable::TPartGroupBtreeIndexIter::TNodeState&) @ 0x559F47C45CC3\n2025-05-08T17:20:11.904304+03:00 6. /-S/contrib/ydb/core/tablet_flat/flat_part_index_iter_bree_index.h:198: NKikimr::NTable::TPartGroupBtreeIndexIter::Next() @ 0x559F47C45CC3\n2025-05-08T17:20:12.048695+03:00 7. /-S/contrib/ydb/core/tablet_flat/flat_part_iter.h:192: NKikimr::NTable::TPartGroupKeyIter::Seek(TArrayRef<NKikimr::TCell const>, NKikimr::NTable::ESeek, NKikimr::NTable::TPartScheme::TGroupInfo const&, NKikimr::NTable::TKeyCellDefaults const*) @ 0x559F4350F3B6\n2025-05-08T17:20:12.088913+03:00 8. /-S/contrib/ydb/core/tablet_flat/flat_part_iter.h:817: NKikimr::NTable::TPartIter::Seek(TArrayRef<NKikimr::TCell const>, NKikimr::NTable::ESeek) @ 0x559F4350ED60\n2025-05-08T17:20:12.110337+03:00 9. /-S/contrib/ydb/core/tablet_flat/flat_part_iter.h:1456: NKikimr::NTable::TRunIter::Seek(TArrayRef<NKikimr::TCell const>, NKikimr::NTable::ESeek) @ 0x559F4350ED60\n2025-05-08T17:20:12.110337+03:00 10. /-S/contrib/ydb/core/tablet_flat/flat_scan_feed.h:405: NKikimr::NTable::TFeed::SeekBoots() @ 0x559F47CFE57A\n2025-05-08T17:20:12.124235+03:00 11. /-S/contrib/ydb/core/tablet_flat/flat_scan_feed.h:453: NKikimr::NTable::TFeed::Seek() @ 0x559F47CFE57A\n2025-05-08T17:20:12.146768+03:00 12. /-S/contrib/ydb/core/tablet_flat/flat_scan_feed.h:71: NKikimr::NTable::TFeed::Process() @ 0x559F47CFE57A\n2025-05-08T17:20:12.191067+03:00 13. /-S/contrib/ydb/core/tablet_flat/flat_scan_actor.h:470: NKikimr::NTabletFlatExecutor::NOps::TDriver::React() @ 0x559F47CFE57A\n2025-05-08T17:20:12.226074+03:00 14. /-S/contrib/ydb/core/tablet_flat/flat_scan_actor.h:649: NKikimr::NTabletFlatExecutor::NOps::TDriver::Handle(TAutoPtr<NActors::TEventHandle<NKikimr::NSharedCache::TEvResult>, TDelete>&) @ 0x559F47CFCC9A\n2025-05-08T17:20:12.254174+03:00 15. /-S/contrib/ydb/core/tablet_flat/flat_scan_actor.h:356: NKikimr::NTabletFlatExecutor::NOps::TDriver::StateWork(TAutoPtr<NActors::IEventHandle, TDelete>&) @ 0x559F47CFCC9A\n2025-05-08T17:20:12.453333+03:00 16. /-S/contrib/ydb/library/actors/core/executor_thread.cpp:251: NActors::TGenericExecutorThread::TProcessingResult NActors::TGenericExecutorThread::Execute<NActors::TMailboxTable::THTSwapMailbox>(NActors::TMailboxTable::THTSwapMailbox*, unsigned int, bool) @ 0x559F44207DF0\n2025-05-08T17:20:12.457800+03:00 17. /-S/contrib/ydb/library/actors/core/executor_thread.cpp:440: NActors::TGenericExecutorThread::ProcessExecutorPool(NActors::IExecutorPool*)::$_0::operator()(unsigned int, bool) const @ 0x559F441FD84A\n2025-05-08T17:20:12.516487+03:00 18. /-S/contrib/ydb/library/actors/core/executor_thread.cpp:493: NActors::TGenericExecutorThread::ProcessExecutorPool(NActors::IExecutorPool*) @ 0x559F441FD09F\n2025-05-08T17:20:12.547716+03:00 19. /-S/contrib/ydb/library/actors/core/executor_thread.cpp:524: NActors::TExecutorThread::ThreadProc() @ 0x559F441FE484\n2025-05-08T17:20:12.583519+03:00 20. /-S/util/system/thread.cpp:244: (anonymous namespace)::TPosixThread::ThreadProxy(void*) @ 0x559F43C8A7F9\n2025-05-08T17:20:12.583519+03:00 21. ??:0: ?? @ 0x7FD684BAE608\n2025-05-08T17:20:12.583519+03:00 22. ??:0: ?? @ 0x7FD684ACE132\n```\n\n\n[Link to core](https://coredumps.yandex-team.ru/core_trace?core_id=108114117)\n\n[Link to cores with same hash](https://coredumps.yandex-team.ru/core?core_hash=648604734281525042&itype=kikimr-3038047901.stable-24-4-4-hotfix-6.hardening)\n\nInstance [ydb-ru-sas-1139.search.yandex.net](http://ydb-ru-sas-1139.search.yandex.net/)\n\nProblem stack\n\n```\n0?? () libc-2.31.so\n1NPrivate::Panic(NPrivate::TStaticBuf const&, int, char const*, char const*, char const*, ...) () [util/system/yassert.cpp](https://a.yandex-team.ru/arc/trunk/arcadia/util/system/yassert.cpp?#L55) +55\n2NKikimr::NTable::NFwd::TBTreeIndexCache::Get(NKikimr::NTable::NFwd::IPageLoadingQueue*, unsigned int, NKikimr::NTable::NPage::EPage, unsigned long) () [contrib/ydb/core/tablet_flat/flat_fwd_cache.h](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/core/tablet_flat/flat_fwd_cache.h?#L482) +482\n3NKikimr::NTable::NFwd::TEnv::Get(NKikimr::NTable::NFwd::TPartGroupLoadingQueue&, unsigned int, NKikimr::NTable::NPage::EPage) () [contrib/ydb/core/tablet_flat/flat_fwd_env.h](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/core/tablet_flat/flat_fwd_env.h?#L276) +276\n4NKikimr::NTable::NFwd::TEnv::TryGetPage(NKikimr::NTable::TPart const*, unsigned int, NKikimr::NTable::NPage::TGroupId) () [contrib/ydb/core/tablet_flat/flat_fwd_env.h](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/core/tablet_flat/flat_fwd_env.h?#L134) +134\n5NKikimr::NTable::TPartGroupBtreeIndexIter::Next() () [contrib/ydb/core/tablet_flat/flat_part_index_iter_bree_index.h](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/core/tablet_flat/flat_part_index_iter_bree_index.h?#L363) +363\n6NKikimr::NTable::TPartGroupKeyIter::Seek(TArrayRef<NKikimr::TCell const>, NKikimr::NTable::ESeek, NKikimr::NTable::TPartScheme::TGroupInfo const&, NKikimr::NTable::TKeyCellDefaults const*) () [contrib/ydb/core/tablet_flat/flat_part_iter.h](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/core/tablet_flat/flat_part_iter.h?#L192) +192\n7NKikimr::NTable::TRunIter::Seek(TArrayRef<NKikimr::TCell const>, NKikimr::NTable::ESeek) () [contrib/ydb/core/tablet_flat/flat_part_iter.h](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/core/tablet_flat/flat_part_iter.h?#L817) +817\n8NKikimr::NTabletFlatExecutor::NOps::TDriver::React() () [contrib/ydb/core/tablet_flat/flat_scan_feed.h](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/core/tablet_flat/flat_scan_feed.h?#L405) +405\n9NKikimr::NTabletFlatExecutor::NOps::TDriver::StateWork(TAutoPtr<NActors::IEventHandle, TDelete>&) () [contrib/ydb/core/tablet_flat/flat_scan_actor.h](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/core/tablet_flat/flat_scan_actor.h?#L649) +649\n10NActors::TGenericExecutorThread::TProcessingResult NActors::TGenericExecutorThread::Execute<NActors::TMailboxTable::THTSwapMailbox>(NActors::TMailboxTable::THTSwapMailbox*, unsigned int, bool) () [contrib/ydb/library/actors/core/executor_thread.cpp](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/library/actors/core/executor_thread.cpp?#L251) +251\n11NActors::TGenericExecutorThread::ProcessExecutorPool(NActors::IExecutorPool*)::$_0::operator()(unsigned int, bool) const () [contrib/ydb/library/actors/core/executor_thread.cpp](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/library/actors/core/executor_thread.cpp?#L440) +440\n12NActors::TGenericExecutorThread::ProcessExecutorPool(NActors::IExecutorPool*) () [contrib/ydb/library/actors/core/executor_thread.cpp](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/library/actors/core/executor_thread.cpp?#L493) +493\n13NActors::TExecutorThread::ThreadProc() () [contrib/ydb/library/actors/core/executor_thread.cpp](https://a.yandex-team.ru/arc/trunk/arcadia/contrib/ydb/library/actors/core/executor_thread.cpp?#L524) +524\n14(anonymous namespace)::TPosixThread::ThreadProxy(void*) () [util/system/thread.cpp](https://a.yandex-team.ru/arc/trunk/arcadia/util/system/thread.cpp?#L244) +244\n15?? () libpthread-2.31.so\n16?? () libc-2.31.so\n```\n",
  "hints_text": "",
  "created_at": "2025-05-12T13:16:36Z",
  "modified_files": [
    "ydb/core/tablet_flat/flat_fwd_cache.h",
    "ydb/core/tablet_flat/flat_page_btree_index.h",
    "ydb/core/tablet_flat/flat_part_iter.h",
    "ydb/core/tablet_flat/ut/ut_btree_index_iter_charge.cpp"
  ],
  "modified_test_files": [
    "ydb/core/tablet_flat/test/libs/table/test_envs.h"
  ]
}