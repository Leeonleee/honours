{
  "repo": "ydb-platform/ydb",
  "pull_number": 18291,
  "instance_id": "ydb-platform__ydb-18291",
  "issue_numbers": [
    "18286"
  ],
  "base_commit": "7b32bc3ff8772edb5feccb789eaf5eb8c722b04a",
  "patch": "diff --git a/ydb/core/actorlib_impl/actor_activity_ut.cpp b/ydb/core/actorlib_impl/actor_activity_ut.cpp\nindex b36d7ee0c864..29cea992c984 100644\n--- a/ydb/core/actorlib_impl/actor_activity_ut.cpp\n+++ b/ydb/core/actorlib_impl/actor_activity_ut.cpp\n@@ -29,7 +29,7 @@ Y_UNIT_TEST_SUITE(TActorActivity) {\n \n     Y_UNIT_TEST(Basic) {\n         TAutoPtr<IActor> actor = new TTestActor();\n-        const ui32 activityIndex = actor->GetActivityType();\n+        const ui32 activityIndex = actor->GetActivityType().GetIndex();\n \n         UNIT_ASSERT_VALUES_EQUAL(TLocalProcessKeyState<TActorActivityTag>::GetInstance().GetIndexByName(\"ASYNC_DESTROYER\"), activityIndex);\n \ndiff --git a/ydb/core/blobstorage/ut_blobstorage/donor.cpp b/ydb/core/blobstorage/ut_blobstorage/donor.cpp\nindex dce76e1a6e9a..01350bc7efe3 100644\n--- a/ydb/core/blobstorage/ut_blobstorage/donor.cpp\n+++ b/ydb/core/blobstorage/ut_blobstorage/donor.cpp\n@@ -221,7 +221,7 @@ Y_UNIT_TEST_SUITE(Donor) {\n                 \n                 auto senderActor = env.Runtime->GetActor(ev->Sender);\n \n-                auto senderType = TLocalProcessKeyState<TActorActivityTag>::GetInstance().GetNameByIndex(senderActor->GetActivityType());\n+                auto senderType = senderActor->GetActivityType().GetName();\n \n                 if (vdid == vdiskId && senderType == \"BS_VDISK_REPL_PROXY\") {\n                     if (respondError) {\ndiff --git a/ydb/library/actors/core/actor.cpp b/ydb/library/actors/core/actor.cpp\nindex 208acc74afea..ceded1f76b6b 100644\n--- a/ydb/library/actors/core/actor.cpp\n+++ b/ydb/library/actors/core/actor.cpp\n@@ -552,3 +552,8 @@ namespace NActors {\n         TlsActivationContext->ExecutorThread.SetOverwrittenTimePerMailboxTs(value);\n     }\n }\n+\n+template <>\n+void Out<NActors::TActorActivityType>(IOutputStream& o, const NActors::TActorActivityType& x) {\n+    o << x.GetName();\n+}\ndiff --git a/ydb/library/actors/core/actor.h b/ydb/library/actors/core/actor.h\nindex 8153e31c121b..b91432ae77ef 100644\n--- a/ydb/library/actors/core/actor.h\n+++ b/ydb/library/actors/core/actor.h\n@@ -364,6 +364,60 @@ namespace NActors {\n         virtual bool OnUnhandledException(const std::exception&) = 0;\n     };\n \n+    class TActorActivityType {\n+    public:\n+        TActorActivityType()\n+            : TActorActivityType(FromEnum(EInternalActorType::OTHER))\n+        {}\n+\n+        template <typename EEnum>\n+        static TActorActivityType FromEnum(EEnum activityType) requires (std::is_enum_v<EEnum>) {\n+            return FromIndex(TEnumProcessKey<TActorActivityTag, EEnum>::GetIndex(activityType));\n+        }\n+\n+        static TActorActivityType FromName(TStringBuf activityName) {\n+            return FromIndex(TLocalProcessKeyState<TActorActivityTag>::GetInstance().Register(activityName));\n+        }\n+\n+        template <const char* Name>\n+        static TActorActivityType FromStaticName() {\n+            return FromIndex(TLocalProcessKey<TActorActivityTag, Name>::GetIndex());\n+        }\n+\n+        template <typename T>\n+        static TActorActivityType FromTypeName() {\n+            // 200 characters is limit for solomon metric tag length\n+            return FromIndex(TLocalProcessExtKey<TActorActivityTag, T, 200>::GetIndex());\n+        }\n+\n+        static constexpr TActorActivityType FromIndex(size_t index) {\n+            return TActorActivityType(index);\n+        }\n+\n+        constexpr ui32 GetIndex() const {\n+            return Index;\n+        }\n+\n+        TStringBuf GetName() const {\n+            return TLocalProcessKeyState<TActorActivityTag>::GetInstance().GetNameByIndex(Index);\n+        }\n+\n+        friend constexpr bool operator==(TActorActivityType a, TActorActivityType b) = default;\n+\n+        template <typename EEnum>\n+        friend bool operator==(TActorActivityType a, EEnum b) requires (std::is_enum_v<EEnum>) {\n+            return a == FromEnum(b);\n+        }\n+\n+    private:\n+        explicit constexpr TActorActivityType(ui32 index)\n+            : Index(index)\n+        {}\n+\n+    private:\n+        ui32 Index;\n+    };\n+\n     class IActor\n         : protected IActorOps\n         , public TActorUsageImpl<ActorLibCollectUsageStats>\n@@ -396,12 +450,12 @@ namespace NActors {\n         /// @sa services.proto NKikimrServices::TActivity::EType\n         using EActorActivity = EInternalActorType;\n         using EActivityType = EActorActivity;\n-        ui32 ActivityType;\n+        TActorActivityType ActivityType;\n \n     protected:\n         ui64 HandledEvents;\n \n-        IActor(TReceiveFunc stateFunc, const ui32 activityType)\n+        IActor(TReceiveFunc stateFunc, TActorActivityType activityType = {})\n             : SelfActorId(TActorId())\n             , ElapsedTicks(0)\n             , StateFunc_(stateFunc)\n@@ -410,10 +464,14 @@ namespace NActors {\n         {\n         }\n \n-        template <typename EEnum = EActivityType, typename std::enable_if<std::is_enum<EEnum>::value, bool>::type v = true>\n-        IActor(TReceiveFunc stateFunc, const EEnum activityEnumType = EActivityType::OTHER)\n-            : IActor(stateFunc, TEnumProcessKey<TActorActivityTag, EEnum>::GetIndex(activityEnumType)) {\n-        }\n+        template <typename EEnum>\n+        IActor(TReceiveFunc stateFunc, EEnum activityType) requires (std::is_enum_v<EEnum>)\n+            : IActor(stateFunc, TActorActivityType::FromEnum(activityType))\n+        {}\n+\n+        IActor(TReceiveFunc stateFunc, TStringBuf activityName)\n+            : IActor(stateFunc, TActorActivityType::FromName(activityName))\n+        {}\n \n         template <typename T>\n         void Become(T stateFunc) {\n@@ -486,10 +544,19 @@ namespace NActors {\n         virtual void PassAway();\n \n     protected:\n-        void SetActivityType(ui32 activityType) {\n+        void SetActivityType(TActorActivityType activityType) {\n             ActivityType = activityType;\n         }\n \n+        template <typename EEnum>\n+        void SetActivityType(EEnum activityType) requires (std::is_enum_v<EEnum>) {\n+            ActivityType = TActorActivityType::FromEnum(activityType);\n+        }\n+\n+        void SetActivityType(TStringBuf activityName) {\n+            ActivityType = TActorActivityType::FromName(activityName);\n+        }\n+\n     public:\n         class TPassAwayGuard: TMoveOnly {\n         private:\n@@ -554,7 +621,7 @@ namespace NActors {\n         void AddElapsedTicks(i64 ticks) {\n             ElapsedTicks += ticks;\n         }\n-        ui32 GetActivityType() const {\n+        TActorActivityType GetActivityType() const {\n             return ActivityType;\n         }\n         ui64 GetHandledEvents() const {\n@@ -649,6 +716,10 @@ namespace NActors {\n         return TLocalProcessKeyState<TActorActivityTag>::GetInstance().GetNameByIndex(index);\n     }\n \n+    inline TStringBuf GetActivityTypeName(TActorActivityType activityType) {\n+        return activityType.GetName();\n+    }\n+\n     // For compatibility with existing code\n     using IActorCallback = IActor;\n \n@@ -657,31 +728,18 @@ namespace NActors {\n     private:\n         using TDerivedReceiveFunc = void (TDerived::*)(TAutoPtr<IEventHandle>& ev);\n \n-        template <typename T, typename = const char*>\n-        struct HasActorName: std::false_type {};\n-        template <typename T>\n-        struct HasActorName<T, decltype((void)T::ActorName, (const char*)nullptr)>: std::true_type {};\n-\n-        template <typename T, typename = const char*>\n-        struct HasActorActivityType: std::false_type {};\n-        template <typename T>\n-        struct HasActorActivityType<T, decltype((void)T::ActorActivityType, (const char*)nullptr)>: std::true_type {};\n-\n-        static ui32 GetActivityTypeIndexImpl() {\n-            if constexpr(HasActorName<TDerived>::value) {\n-                return TLocalProcessKey<TActorActivityTag, TDerived::ActorName>::GetIndex();\n-            } else if constexpr (HasActorActivityType<TDerived>::value) {\n-                using TActorActivity = decltype(((TDerived*)nullptr)->ActorActivityType());\n-                static_assert(std::is_enum<TActorActivity>::value);\n-                return TEnumProcessKey<TActorActivityTag, TActorActivity>::GetIndex(TDerived::ActorActivityType());\n+        static TActorActivityType GetDefaultActivityTypeImpl() {\n+            if constexpr (requires { TDerived::ActorName; }) {\n+                return TActorActivityType::FromStaticName<TDerived::ActorName>();\n+            } else if constexpr (requires { TDerived::ActorActivityType; }) {\n+                return TActorActivityType::FromEnum(TDerived::ActorActivityType());\n             } else {\n-                // 200 characters is limit for solomon metric tag length\n-                return TLocalProcessExtKey<TActorActivityTag, TDerived, 200>::GetIndex();\n+                return TActorActivityType::FromTypeName<TDerived>();\n             }\n         }\n \n-        static ui32 GetActivityTypeIndex() {\n-            static const ui32 result = GetActivityTypeIndexImpl();\n+        static TActorActivityType GetDefaultActivityType() {\n+            static const TActorActivityType result = GetDefaultActivityTypeImpl();\n             return result;\n         }\n \n@@ -689,17 +747,13 @@ namespace NActors {\n         // static constexpr char ActorName[] = \"UNNAMED\";\n \n         TActor(TDerivedReceiveFunc func)\n-            : IActorCallback(static_cast<TReceiveFunc>(func), GetActivityTypeIndex()) {\n-        }\n-\n-        template <class TEnum = EActivityType>\n-        TActor(TDerivedReceiveFunc func, const TEnum activityEnumType = EActivityType::OTHER)\n-            : IActorCallback(static_cast<TReceiveFunc>(func), activityEnumType) {\n+            : IActorCallback(static_cast<TReceiveFunc>(func), GetDefaultActivityType()) {\n         }\n \n-        TActor(TDerivedReceiveFunc func, const TString& actorName)\n-            : IActorCallback(static_cast<TReceiveFunc>(func), TLocalProcessKeyState<TActorActivityTag>::GetInstance().Register(actorName)) {\n-        }\n+        template <typename T>\n+        TActor(TDerivedReceiveFunc func, T&& activityType)\n+            : IActorCallback(static_cast<TReceiveFunc>(func), std::forward<T>(activityType))\n+        {}\n \n     public:\n         typedef TDerived TThis;\ndiff --git a/ydb/library/actors/core/actor_bootstrapped.h b/ydb/library/actors/core/actor_bootstrapped.h\nindex 5ef7764c4871..5efa6638a945 100644\n--- a/ydb/library/actors/core/actor_bootstrapped.h\n+++ b/ydb/library/actors/core/actor_bootstrapped.h\n@@ -35,13 +35,9 @@ namespace NActors {\n             : TActor<TDerived>(&TDerived::StateBootstrap) {\n         }\n \n-        template <class TEnum>\n-        TActorBootstrapped(const TEnum activityType)\n-            : TActor<TDerived>(&TDerived::StateBootstrap, activityType) {\n-        }\n-\n-        TActorBootstrapped(const TString& activityName)\n-            : TActor<TDerived>(&TDerived::StateBootstrap, activityName) {\n+        template <typename T>\n+        TActorBootstrapped(T&& activityType)\n+            : TActor<TDerived>(&TDerived::StateBootstrap, std::forward<T>(activityType)) {\n         }\n     };\n }\ndiff --git a/ydb/library/actors/core/executor_pool_base.cpp b/ydb/library/actors/core/executor_pool_base.cpp\nindex 561a6d257215..a05c3b78d85b 100644\n--- a/ydb/library/actors/core/executor_pool_base.cpp\n+++ b/ydb/library/actors/core/executor_pool_base.cpp\n@@ -56,9 +56,9 @@ namespace NActors {\n                 Y_ABORT_UNLESS(actor->StuckIndex == i);\n                 const TDuration delta = now - actor->LastReceiveTimestamp;\n                 if (delta > TDuration::Seconds(30)) {\n-                    ++stats.StuckActorsByActivity[actor->GetActivityType()];\n+                    ++stats.StuckActorsByActivity[actor->GetActivityType().GetIndex()];\n                 }\n-                accountUsage(actor->GetActivityType(), actor->GetUsage(GetCycleCountFast()));\n+                accountUsage(actor->GetActivityType().GetIndex(), actor->GetUsage(GetCycleCountFast()));\n             }\n             for (const auto& [activityType, usage] : DeadActorsUsage) {\n                 accountUsage(activityType, usage);\n@@ -188,7 +188,7 @@ namespace NActors {\n         NHPTimer::STime hpstart = GetCycleCountFast();\n         TInternalActorTypeGuard<EInternalActorSystemActivity::ACTOR_SYSTEM_REGISTER, false> activityGuard(hpstart);\n #ifdef ACTORSLIB_COLLECT_EXEC_STATS\n-        ui32 at = actor->GetActivityType();\n+        ui32 at = actor->GetActivityType().GetIndex();\n         Y_DEBUG_ABORT_UNLESS(at < Stats.ActorsAliveByActivity.size());\n         if (at >= Stats.MaxActivityType()) {\n             at = TActorTypeOperator::GetActorActivityIncorrectIndex();\n@@ -236,7 +236,7 @@ namespace NActors {\n         NHPTimer::STime hpstart = GetCycleCountFast();\n         TInternalActorTypeGuard<EInternalActorSystemActivity::ACTOR_SYSTEM_REGISTER, false> activityGuard(hpstart);\n #ifdef ACTORSLIB_COLLECT_EXEC_STATS\n-        ui32 at = actor->GetActivityType();\n+        ui32 at = actor->GetActivityType().GetIndex();\n         if (at >= Stats.MaxActivityType())\n             at = 0;\n         AtomicIncrement(Stats.ActorsAliveByActivity[at]);\ndiff --git a/ydb/library/actors/core/executor_thread.cpp b/ydb/library/actors/core/executor_thread.cpp\nindex 3e8d753d3635..acb430074625 100644\n--- a/ydb/library/actors/core/executor_thread.cpp\n+++ b/ydb/library/actors/core/executor_thread.cpp\n@@ -88,7 +88,7 @@ namespace NActors {\n     void TExecutorThread::UnregisterActor(TMailbox* mailbox, TActorId actorId) {\n         Y_DEBUG_ABORT_UNLESS(actorId.PoolID() == ThreadCtx.PoolId() && ThreadCtx.Pool()->ResolveMailbox(actorId.Hint()) == mailbox);\n         IActor* actor = mailbox->DetachActor(actorId.LocalId());\n-        ExecutionStats.DecrementActorsAliveByActivity(actor->GetActivityType());\n+        ExecutionStats.DecrementActorsAliveByActivity(actor->GetActivityType().GetIndex());\n         DyingActors.push_back(THolder(actor));\n     }\n \n@@ -103,7 +103,7 @@ namespace NActors {\n                         actorPtr = pool->Actors.back();\n                         actorPtr->StuckIndex = i;\n                         pool->Actors.pop_back();\n-                        pool->DeadActorsUsage.emplace_back(actor->GetActivityType(), actor->GetUsage(GetCycleCountFast()));\n+                        pool->DeadActorsUsage.emplace_back(actor->GetActivityType().GetIndex(), actor->GetUsage(GetCycleCountFast()));\n                     }\n                 }\n             }\n@@ -259,7 +259,7 @@ namespace NActors {\n \n                     ui32 evTypeForTracing = ev->Type;\n \n-                    ui32 activityType = actor->GetActivityType();\n+                    ui32 activityType = actor->GetActivityType().GetIndex();\n                     if (activityType != prevActivityType) {\n                         prevActivityType = activityType;\n                         NProfiling::TMemoryTagScope::Reset(activityType);\ndiff --git a/ydb/library/actors/core/ut/actor_ut.cpp b/ydb/library/actors/core/ut/actor_ut.cpp\nindex 3b4366ccf643..76b698eafb37 100644\n--- a/ydb/library/actors/core/ut/actor_ut.cpp\n+++ b/ydb/library/actors/core/ut/actor_ut.cpp\n@@ -480,7 +480,7 @@ Y_UNIT_TEST_SUITE(TestDecorator) {\n \n         void Bootstrap()\n         {\n-            const auto& activityTypeIndex = GetActivityType();\n+            auto activityTypeIndex = GetActivityType().GetIndex();\n             Y_ENSURE(activityTypeIndex < GetActivityTypeCount());\n             Y_ENSURE(GetActivityTypeName(activityTypeIndex) == \"TestActor\");\n             PassAway();\ndiff --git a/ydb/library/yql/dq/actors/compute/dq_compute_actor_channels.cpp b/ydb/library/yql/dq/actors/compute/dq_compute_actor_channels.cpp\nindex 72b1a9a90a39..367227064a35 100644\n--- a/ydb/library/yql/dq/actors/compute/dq_compute_actor_channels.cpp\n+++ b/ydb/library/yql/dq/actors/compute/dq_compute_actor_channels.cpp\n@@ -40,7 +40,7 @@ TString InFlightMessagesStr(const TCollection& inFlight) {\n } // anonymous namespace\n \n TDqComputeActorChannels::TDqComputeActorChannels(TActorId owner, const TTxId& txId, const TDqTaskSettings& task,\n-    bool retryOnUndelivery, NDqProto::EDqStatsMode statsMode, ui64 channelBufferSize, ICallbacks* cbs, ui32 actorActivityType)\n+    bool retryOnUndelivery, NDqProto::EDqStatsMode statsMode, ui64 channelBufferSize, ICallbacks* cbs, NActors::TActorActivityType actorActivityType)\n     : TActor(&TDqComputeActorChannels::WorkState, actorActivityType)\n     , Owner(owner)\n     , TxId(txId)\ndiff --git a/ydb/library/yql/dq/actors/compute/dq_compute_actor_channels.h b/ydb/library/yql/dq/actors/compute/dq_compute_actor_channels.h\nindex f1cd80e47003..e74bcdc91a11 100644\n--- a/ydb/library/yql/dq/actors/compute/dq_compute_actor_channels.h\n+++ b/ydb/library/yql/dq/actors/compute/dq_compute_actor_channels.h\n@@ -83,7 +83,7 @@ class TDqComputeActorChannels : public NActors::TActor<TDqComputeActorChannels>\n \n public:\n     TDqComputeActorChannels(NActors::TActorId owner, const TTxId& txId, const TDqTaskSettings& task, bool retryOnUndelivery,\n-        NDqProto::EDqStatsMode statsMode, ui64 channelBufferSize, ICallbacks* cbs, ui32 actorActivityType);\n+        NDqProto::EDqStatsMode statsMode, ui64 channelBufferSize, ICallbacks* cbs, NActors::TActorActivityType actorActivityType);\n \n private:\n     STATEFN(WorkState);\ndiff --git a/ydb/library/yql/dq/actors/compute/ut/dq_compute_actor_ut.cpp b/ydb/library/yql/dq/actors/compute/ut/dq_compute_actor_ut.cpp\nindex c986e46975e5..5a074de2c40b 100644\n--- a/ydb/library/yql/dq/actors/compute/ut/dq_compute_actor_ut.cpp\n+++ b/ydb/library/yql/dq/actors/compute/ut/dq_compute_actor_ut.cpp\n@@ -68,7 +68,7 @@ struct TChannelsTestFixture: public NUnitTest::TBaseFixture\n             NYql::NDqProto::EDqStatsMode::DQ_STATS_MODE_NONE,\n             /*channelBufferSize = */ 1000000,\n             /*callbacks = */ &Callbacks,\n-            /*activityType = */ 0\n+            /*activityType = */ {}\n         ));\n         channels->InputChannelsMap.emplace((ui64)0, TDqComputeActorChannels::TInputChannelState {});\n         InputChannel = &channels->InCh(0);\n",
  "test_patch": "diff --git a/ydb/library/actors/testlib/test_runtime.cpp b/ydb/library/actors/testlib/test_runtime.cpp\nindex b6394042644a..f7fdab918648 100644\n--- a/ydb/library/actors/testlib/test_runtime.cpp\n+++ b/ydb/library/actors/testlib/test_runtime.cpp\n@@ -1599,7 +1599,7 @@ namespace NActors {\n         if (!actor) {\n             return {};\n         }\n-        return TLocalProcessKeyState<TActorActivityTag>::GetInstance().GetNameByIndex(actor->GetActivityType());\n+        return actor->GetActivityType().GetName();\n     }\n \n     void TTestActorRuntimeBase::EnableScheduleForActor(const TActorId& actorId, bool allow) {\n",
  "problem_statement": "ActorSystem: SetActivityType is broken\nWe still have some actors that use SetActivityType, but it's currently broken because it accepts a ui32 and all enums are silently converted to this index. However, these indexes are now dynamically allocated, so the resulting activity index turns into a random actor name.\n",
  "hints_text": "",
  "created_at": "2025-05-14T09:58:51Z"
}