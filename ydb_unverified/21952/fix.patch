diff --git a/ydb/core/viewer/json_handlers_storage.cpp b/ydb/core/viewer/json_handlers_storage.cpp
index 481dbed29fce..25dee3517675 100644
--- a/ydb/core/viewer/json_handlers_storage.cpp
+++ b/ydb/core/viewer/json_handlers_storage.cpp
@@ -4,7 +4,7 @@
 namespace NKikimr::NViewer {
 
 void InitStorageGroupsJsonHandler(TJsonHandlers& jsonHandlers) {
-    jsonHandlers.AddHandler("/storage/groups", new TJsonHandler<TStorageGroups>(TStorageGroups::GetSwagger()), 7);
+    jsonHandlers.AddHandler("/storage/groups", new TJsonHandler<TStorageGroups>(TStorageGroups::GetSwagger()), 8);
 }
 
 void InitStorageJsonHandlers(TJsonHandlers& jsonHandlers) {
diff --git a/ydb/core/viewer/json_handlers_viewer.cpp b/ydb/core/viewer/json_handlers_viewer.cpp
index e203aefd2a0a..4f0ba37e5ef3 100644
--- a/ydb/core/viewer/json_handlers_viewer.cpp
+++ b/ydb/core/viewer/json_handlers_viewer.cpp
@@ -221,7 +221,7 @@ void InitViewerStorageUsageJsonHandler(TJsonHandlers &handlers) {
 }
 
 void InitViewerClusterJsonHandler(TJsonHandlers& handlers) {
-    handlers.AddHandler("/viewer/cluster", new TJsonHandler<TJsonCluster>(TJsonCluster::GetSwagger()), 5);
+    handlers.AddHandler("/viewer/cluster", new TJsonHandler<TJsonCluster>(TJsonCluster::GetSwagger()), 6);
 }
 
 void InitViewerLabeledCountersJsonHandler(TJsonHandlers &handlers) {
@@ -261,7 +261,7 @@ void InitViewerHealthCheckJsonHandler(TJsonHandlers& handlers) {
 }
 
 void InitViewerNodesJsonHandler(TJsonHandlers& handlers) {
-    handlers.AddHandler("/viewer/nodes", new TJsonHandler<TJsonNodes>(TJsonNodes::GetSwagger()), 17);
+    handlers.AddHandler("/viewer/nodes", new TJsonHandler<TJsonNodes>(TJsonNodes::GetSwagger()), 18);
 }
 
 void InitViewerACLJsonHandler(TJsonHandlers &jsonHandlers) {
diff --git a/ydb/core/viewer/protos/viewer.proto b/ydb/core/viewer/protos/viewer.proto
index 128e9c9aaeb5..ffed726a8a70 100644
--- a/ydb/core/viewer/protos/viewer.proto
+++ b/ydb/core/viewer/protos/viewer.proto
@@ -10,6 +10,7 @@ import "ydb/core/protos/hive.proto";
 import "ydb/core/protos/kqp.proto";
 import "ydb/public/api/protos/ydb_cms.proto";
 import "ydb/core/protos/sys_view.proto";
+import "ydb/core/protos/bridge.proto";
 
 package NKikimrViewer;
 option java_package = "ru.yandex.kikimr.proto";
@@ -315,6 +316,19 @@ enum EFlag {
     Red = 5;
 }
 
+message TBridgePileInfo {
+    optional uint32 PileId = 1;
+    string Name = 2;
+    NKikimrBridge.TClusterState.EPileState State = 3;
+    bool IsPrimary = 4;
+    bool IsBeingPromoted = 5;
+    uint32 Nodes = 6;
+}
+
+message TBridgeInfo {
+    repeated TBridgePileInfo Piles = 1;
+}
+
 message TClusterInfo {
     uint32 Version = 1;
     string Name = 2;
@@ -347,6 +361,7 @@ message TClusterInfo {
     uint64 Tenants = 61;
     double NetworkUtilization = 62;
     uint64 NetworkWriteThroughput = 63;
+    TBridgeInfo BridgeInfo = 64;
 }
 
 enum ETenantType {
@@ -467,6 +482,7 @@ message TStorageGroupInfo {
     optional uint64 LatencyPutTabletLog = 20;
     optional uint64 LatencyPutUserData = 21;
     optional uint64 LatencyGetFast = 22;
+    string PileName = 23;
     repeated TStorageVDisk VDisks = 30;
 }
 
@@ -545,6 +561,7 @@ message TNodeInfo {
     EFlag ConnectStatus = 10; // Max
     optional uint64 ReceiveThroughput = 11;
     optional uint64 SendThroughput = 12;
+    optional string PileName = 13;
     optional float NetworkUtilization = 20; // Sum
     optional float NetworkUtilizationMin = 21;
     optional float NetworkUtilizationMax = 22;
diff --git a/ydb/core/viewer/storage_groups.h b/ydb/core/viewer/storage_groups.h
index 11e4e9befd1b..85497246748e 100644
--- a/ydb/core/viewer/storage_groups.h
+++ b/ydb/core/viewer/storage_groups.h
@@ -104,6 +104,7 @@ enum class EGroupFields : ui8 {
     VDisk, // VDisk information
     PDisk, // PDisk information
     Latency,
+    PileName,
     COUNT
 };
 
@@ -123,6 +124,9 @@ class TStorageGroups : public TViewerPipeClient {
     std::unordered_map<TPathId, TTabletId> PathId2HiveId;
     std::unordered_map<TTabletId, TRequestResponse<TEvHive::TEvResponseHiveStorageStats>> HiveStorageStats;
     ui64 HiveStorageStatsInFlight = 0;
+    std::optional<TRequestResponse<TEvInterconnect::TEvNodesInfo>> NodesInfo;
+    std::optional<TRequestResponse<TEvNodeWardenStorageConfig>> NodeWardenStorageConfigResponse;
+    bool NodeWardenStorageConfigResponseProcessed = false;
 
     // BSC
     bool FallbackToWhiteboard = false;
@@ -136,7 +140,6 @@ class TStorageGroups : public TViewerPipeClient {
     bool GetPDisksResponseProcessed = false;
 
     // Whiteboard
-    std::optional<TRequestResponse<TEvInterconnect::TEvNodesInfo>> NodesInfo;
     std::unordered_map<TNodeId, TRequestResponse<TEvWhiteboard::TEvBSGroupStateResponse>> BSGroupStateResponse;
     ui64 BSGroupStateRequestsInFlight = 0;
     std::unordered_map<TNodeId, TRequestResponse<TEvWhiteboard::TEvVDiskStateResponse>> VDiskStateResponse;
@@ -283,6 +286,7 @@ class TStorageGroups : public TViewerPipeClient {
         NKikimrViewer::EFlag Overall = NKikimrViewer::EFlag::Grey;
         NKikimrViewer::EFlag DiskSpace = NKikimrViewer::EFlag::Grey;
         float DiskSpaceUsage = 0; // the highest
+        TString PileName;
 
         std::vector<TVDisk> VDisks;
         std::vector<TNodeId> VDiskNodeIds; // filter nodes to request disk info from the whiteboard. could be duplicated.
@@ -536,6 +540,9 @@ class TStorageGroups : public TViewerPipeClient {
                 case EGroupFields::Latency:
                     groupName = GetLatencyForGroup();
                     break;
+                case EGroupFields::PileName:
+                    groupName = PileName;
+                    break;
                 default:
                     break;
             }
@@ -552,6 +559,7 @@ class TStorageGroups : public TViewerPipeClient {
                 case EGroupFields::PoolName:
                 case EGroupFields::Kind:
                 case EGroupFields::MediaType:
+                case EGroupFields::PileName:
                     return GetGroupName(groupBy);
                 case EGroupFields::State:
                     return StateSortKey;
@@ -622,6 +630,7 @@ class TStorageGroups : public TViewerPipeClient {
     std::unordered_map<TVSlotId, const NKikimrSysView::TVSlotInfo*> VSlotsByVSlotId;
     std::unordered_map<TVSlotId, const NKikimrWhiteboard::TVDiskStateInfo*> VDisksByVSlotId;
     std::unordered_map<TPDiskId, const NKikimrWhiteboard::TPDiskStateInfo*> PDisksByPDiskId;
+    std::unordered_map<ui32, TString> PileNames;
 
     TFieldsType FieldsRequested; // fields that were requested by user
     TFieldsType FieldsRequired; // fields that are required to calculate the response
@@ -737,6 +746,8 @@ class TStorageGroups : public TViewerPipeClient {
             result = EGroupFields::Latency;
         } else if (field == "Available") {
             result = EGroupFields::Available;
+        } else if (field == "PileName") {
+            result = EGroupFields::PileName;
         }
         return result;
     }
@@ -874,6 +885,10 @@ class TStorageGroups : public TViewerPipeClient {
                 ProcessNavigate(result.first->second, true);
             }
         }
+        if (AppData()->BridgeModeEnabled) {
+            NodeWardenStorageConfigResponse = MakeRequest<TEvNodeWardenStorageConfig>(MakeBlobStorageNodeWardenID(SelfId().NodeId()),
+                new TEvNodeWardenQueryStorageConfig(/*subscribe=*/ false));
+        }
         if (FallbackToWhiteboard) {
             RequestWhiteboard();
         } else {
@@ -1100,6 +1115,7 @@ class TStorageGroups : public TViewerPipeClient {
                 case EGroupFields::Kind:
                 case EGroupFields::Encryption:
                 case EGroupFields::MediaType:
+                case EGroupFields::PileName:
                     GroupCollection();
                     SortCollection(GroupGroups, [](const TGroupGroup& groupGroup) { return groupGroup.SortKey; });
                     NeedGroup = false;
@@ -1183,6 +1199,9 @@ class TStorageGroups : public TViewerPipeClient {
                 case EGroupFields::Latency:
                     SortCollection(GroupView, [](const TGroup* group) { return group->GetLatencyForSort(); }, ReverseSort);
                     break;
+                case EGroupFields::PileName:
+                    SortCollection(GroupView, [](const TGroup* group) { return group->GetGroupName(EGroupFields::PileName); }, ReverseSort);
+                    break;
                 case EGroupFields::PDiskId:
                 case EGroupFields::NodeId:
                 case EGroupFields::PDisk:
@@ -1292,6 +1311,23 @@ class TStorageGroups : public TViewerPipeClient {
 
     void ProcessResponses() {
         AddEvent("ProcessResponses");
+        if (NodeWardenStorageConfigResponse) {
+            if (!NodeWardenStorageConfigResponseProcessed && NodeWardenStorageConfigResponse->IsDone()) {
+                if (NodeWardenStorageConfigResponse->IsOk()) {
+                    if (NodeWardenStorageConfigResponse->Get()->BridgeInfo) {
+                        const auto& srcBridgeInfo = *NodeWardenStorageConfigResponse->Get()->BridgeInfo.get();
+                        for (const auto& pile : srcBridgeInfo.Piles) {
+                            PileNames[pile.BridgePileId.GetRawId()] = pile.Name;
+                        }
+                    } else {
+                        AddProblem("empty-node-warden-bridge-info");
+                    }
+                }
+                NodeWardenStorageConfigResponseProcessed = true;
+            } else {
+                return; // do not process further until NodeWarden response is processed
+            }
+        }
         if (GetGroupsResponse && GetGroupsResponse->IsDone() && !GetGroupsResponseProcessed) {
             if (GetGroupsResponse->IsOk()) {
                 GroupData.reserve(GetGroupsResponse->Get()->Record.EntriesSize());
@@ -1310,6 +1346,10 @@ class TStorageGroups : public TViewerPipeClient {
                     group.PutTabletLogLatency = info.GetPutTabletLogLatency();
                     group.PutUserDataLatency = info.GetPutUserDataLatency();
                     group.GetFastLatency = info.GetGetFastLatency();
+                    if (info.HasBridgePileId() && !PileNames.empty()) {
+                        group.PileName = PileNames[info.GetBridgePileId()];
+                        FieldsAvailable.set(+EGroupFields::PileName);
+                    }
                 }
                 for (TGroup& group : GroupData) {
                     GroupView.emplace_back(&group);
@@ -1578,6 +1618,13 @@ class TStorageGroups : public TViewerPipeClient {
         }
     }
 
+    void Handle(TEvNodeWardenStorageConfig::TPtr& ev) {
+        if (NodeWardenStorageConfigResponse->Set(std::move(ev))) {
+            ProcessResponses();
+            RequestDone();
+        }
+    }
+
     void RequestNodesListForStorageGroups() {
         if (!NodesInfo.has_value()) {
             NodesInfo = MakeRequest<TEvInterconnect::TEvNodesInfo>(GetNameserviceActorId(), new TEvInterconnect::TEvListNodes());
@@ -1943,6 +1990,7 @@ class TStorageGroups : public TViewerPipeClient {
             hFunc(TEvTabletPipe::TEvClientConnected, Handle);
             hFunc(TEvents::TEvWakeup, HandleTimeout);
             hFunc(TEvInterconnect::TEvNodesInfo, Handle);
+            hFunc(TEvNodeWardenStorageConfig, Handle);
             hFunc(TEvWhiteboard::TEvVDiskStateResponse, Handle);
             hFunc(TEvWhiteboard::TEvPDiskStateResponse, Handle);
             hFunc(TEvWhiteboard::TEvBSGroupStateResponse, Handle);
@@ -2150,6 +2198,9 @@ class TStorageGroups : public TViewerPipeClient {
                     jsonGroup.SetLatencyPutUserData(group->PutUserDataLatency);
                     jsonGroup.SetLatencyGetFast(group->GetFastLatency);
                 }
+                if (FieldsAvailable.test(+EGroupFields::PileName) && FieldsRequested.test(+EGroupFields::PileName)) {
+                    jsonGroup.SetPileName(group->PileName);
+                }
             }
         } else {
             for (TGroupGroup& groupGroup : GroupGroups) {
diff --git a/ydb/core/viewer/viewer_capabilities.h b/ydb/core/viewer/viewer_capabilities.h
index 54bcfce042cc..ad9d3dc9fa9c 100644
--- a/ydb/core/viewer/viewer_capabilities.h
+++ b/ydb/core/viewer/viewer_capabilities.h
@@ -38,6 +38,10 @@ class TViewerCapabilities : public TViewerPipeClient {
                 }
             }
         }
+
+        if (AppData()->BridgeModeEnabled) {
+            json["Cluster"]["BridgeModeEnabled"] = true;
+        }
         return json;
     }
 
diff --git a/ydb/core/viewer/viewer_cluster.h b/ydb/core/viewer/viewer_cluster.h
index d62032c46dc2..fe007b7f8cde 100644
--- a/ydb/core/viewer/viewer_cluster.h
+++ b/ydb/core/viewer/viewer_cluster.h
@@ -14,6 +14,7 @@ class TJsonCluster : public TViewerPipeClient {
     using TThis = TJsonCluster;
     using TBase = TViewerPipeClient;
     std::optional<TRequestResponse<TEvInterconnect::TEvNodesInfo>> NodesInfoResponse;
+    std::optional<TRequestResponse<TEvNodeWardenStorageConfig>> NodeWardenStorageConfigResponse;
     std::optional<TRequestResponse<TEvWhiteboard::TEvNodeStateResponse>> NodeStateResponse;
     std::optional<TRequestResponse<NConsole::TEvConsole::TEvListTenantsResponse>> ListTenantsResponse;
     std::optional<TRequestResponse<NSysView::TEvSysView::TEvGetPDisksResponse>> PDisksResponse;
@@ -32,6 +33,7 @@ class TJsonCluster : public TViewerPipeClient {
         TNodeId NodeId;
         TString DataCenter;
         TSubDomainKey SubDomainKey;
+        std::optional<ui32> PileId;
         bool Static = false;
         bool Connected = false;
         bool Disconnected = false;
@@ -105,6 +107,10 @@ class TJsonCluster : public TViewerPipeClient {
 
     void Bootstrap() override {
         NodesInfoResponse = MakeRequest<TEvInterconnect::TEvNodesInfo>(GetNameserviceActorId(), new TEvInterconnect::TEvListNodes());
+        if (AppData()->BridgeModeEnabled) {
+            NodeWardenStorageConfigResponse = MakeRequest<TEvNodeWardenStorageConfig>(MakeBlobStorageNodeWardenID(SelfId().NodeId()),
+                new TEvNodeWardenQueryStorageConfig(/*subscribe=*/ false));
+        }
         NodeStateResponse = MakeWhiteboardRequest(TActivationContext::ActorSystem()->NodeId, new TEvWhiteboard::TEvNodeStateRequest());
         PDisksResponse = MakeCachedRequestBSControllerPDisks();
         StorageStatsResponse = MakeCachedRequestBSControllerStorageStats();
@@ -251,6 +257,17 @@ class TJsonCluster : public TViewerPipeClient {
                 for (TNode& node : NodeData) {
                     NodeCache.emplace(node.NodeInfo.NodeId, &node);
                 }
+                if (NodesInfoResponse->Get()->PileMap) {
+                    for (ui32 pileId = 0; pileId < NodesInfoResponse->Get()->PileMap->size(); ++pileId) {
+                        for (ui32 nodeId : (*NodesInfoResponse->Get()->PileMap)[pileId]) {
+                            auto itNode = NodeCache.find(nodeId);
+                            if (itNode == NodeCache.end()) {
+                                continue;
+                            }
+                            itNode->second->PileId = pileId;
+                        }
+                    }
+                }
                 ClusterInfo.SetNodesTotal(NodesInfoResponse->Get()->Nodes.size());
                 ClusterInfo.SetHosts(hosts.size());
             } else {
@@ -333,6 +350,39 @@ class TJsonCluster : public TViewerPipeClient {
             StorageStatsResponse.reset();
         }
 
+        if (NodeWardenStorageConfigResponse && NodeWardenStorageConfigResponse->IsDone()) {
+            if (NodeWardenStorageConfigResponse->IsOk()) {
+                if (NodeWardenStorageConfigResponse->Get()->BridgeInfo) {
+                    const auto& srcBridgeInfo = *NodeWardenStorageConfigResponse->Get()->BridgeInfo.get();
+                    auto& pbBridgeInfo = *ClusterInfo.MutableBridgeInfo();
+                    std::unordered_map<ui32, ui32> pileNodes;
+                    for (const auto& pile : srcBridgeInfo.Piles) {
+                        auto& pbBridgePileInfo = *pbBridgeInfo.AddPiles();
+                        pbBridgePileInfo.SetPileId(pile.BridgePileId.GetRawId());
+                        pbBridgePileInfo.SetName(pile.Name);
+                        pbBridgePileInfo.SetState(pile.State);
+                        pbBridgePileInfo.SetIsPrimary(pile.IsPrimary);
+                        pbBridgePileInfo.SetIsBeingPromoted(pile.IsBeingPromoted);
+                    }
+                    for (const auto& node : NodeData) {
+                        if (node.PileId) {
+                            pileNodes[*node.PileId]++;
+                        }
+                    }
+                    for (auto& pile : *pbBridgeInfo.MutablePiles()) {
+                        auto it = pileNodes.find(pile.GetPileId());
+                        if (it != pileNodes.end()) {
+                            pile.SetNodes(it->second);
+                        }
+                    }
+                } else {
+                    AddProblem("empty-node-warden-bridge-info");
+                }
+            } else {
+                AddProblem("no-node-warden-storage-config");
+            }
+        }
+
         if (TimeToAskWhiteboard()) {
             std::vector<TNodeBatch> batches = BatchNodes();
             SendWhiteboardRequests(batches);
@@ -634,6 +684,13 @@ class TJsonCluster : public TViewerPipeClient {
         }
     }
 
+    void Handle(TEvNodeWardenStorageConfig::TPtr& ev) {
+        if (NodeWardenStorageConfigResponse->Set(std::move(ev))) {
+            ProcessResponses();
+            RequestDone();
+        }
+    }
+
     void Handle(TEvViewer::TEvViewerResponse::TPtr& ev) {
         ui64 nodeId = ev.Get()->Cookie;
         switch (ev->Get()->Record.Response_case()) {
@@ -802,6 +859,7 @@ class TJsonCluster : public TViewerPipeClient {
     STATEFN(StateWork) {
         switch (ev->GetTypeRewrite()) {
             hFunc(TEvInterconnect::TEvNodesInfo, Handle);
+            hFunc(TEvNodeWardenStorageConfig, Handle);
             hFunc(TEvWhiteboard::TEvNodeStateResponse, Handle);
             hFunc(TEvWhiteboard::TEvSystemStateResponse, Handle);
             hFunc(TEvWhiteboard::TEvTabletStateResponse, Handle);
diff --git a/ydb/core/viewer/viewer_nodes.h b/ydb/core/viewer/viewer_nodes.h
index 63458aa99fc0..e1f01bc09859 100644
--- a/ydb/core/viewer/viewer_nodes.h
+++ b/ydb/core/viewer/viewer_nodes.h
@@ -41,6 +41,7 @@ enum class ENodeFields : ui8 {
     NetworkUtilization,
     ClockSkew,
     PingTime,
+    PileName,
     COUNT
 };
 
@@ -260,6 +261,13 @@ class TJsonNodes : public TViewerPipeClient {
             return SystemState.GetLocation().GetRack();
         }
 
+        TString GetPileName() const {
+            if (NodeInfo.Location.GetBridgePileName()) {
+                return NodeInfo.Location.GetBridgePileName().value_or("");
+            }
+            return SystemState.GetLocation().GetBridgePileName();
+        }
+
         void Cleanup() {
             if (SystemState.HasSystemLocation()) {
                 SystemState.ClearSystemLocation();
@@ -671,6 +679,9 @@ class TJsonNodes : public TViewerPipeClient {
                 case ENodeFields::PingTime:
                     groupName = GetPingTimeForGroup();
                     break;
+                case ENodeFields::PileName:
+                    groupName = GetPileName();
+                    break;
                 default:
                     break;
             }
@@ -706,6 +717,8 @@ class TJsonNodes : public TViewerPipeClient {
                     return static_cast<int>(abs(ClockSkewUs) / 1000);
                 case ENodeFields::PingTime:
                     return PingTimeUs;
+                case ENodeFields::PileName:
+                    return GetPileName();
                 default:
                     return TString();
             }
@@ -761,7 +774,8 @@ class TJsonNodes : public TViewerPipeClient {
                                                     .set(+ENodeFields::NodeId)
                                                     .set(+ENodeFields::HostName)
                                                     .set(+ENodeFields::DC)
-                                                    .set(+ENodeFields::Rack);
+                                                    .set(+ENodeFields::Rack)
+                                                    .set(+ENodeFields::PileName);
     const TFieldsType FieldsSystemState = TFieldsType().set(+ENodeFields::SystemState)
                                                        .set(+ENodeFields::Database)
                                                        .set(+ENodeFields::NodeName)
@@ -899,6 +913,8 @@ class TJsonNodes : public TViewerPipeClient {
             result = ENodeFields::PingTime;
         } else if (field == "ClockSkew") {
             result = ENodeFields::ClockSkew;
+        } else if (field == "PileName") {
+            result = ENodeFields::PileName;
         }
         return result;
     }
@@ -1406,6 +1422,7 @@ class TJsonNodes : public TViewerPipeClient {
                 case ENodeFields::DC:
                 case ENodeFields::Rack:
                 case ENodeFields::Uptime:
+                case ENodeFields::PileName:
                     GroupCollection();
                     SortCollection(NodeGroups, [](const TNodeGroup& nodeGroup) { return nodeGroup.SortKey; });
                     NeedGroup = false;
@@ -1530,7 +1547,7 @@ class TJsonNodes : public TViewerPipeClient {
                     NeedSort = false;
                     break;
                 case ENodeFields::ClockSkew:
-                    SortCollection(NodeView, [](const TNode* node) { return node->ClockSkewUs; }, ReverseSort);
+                    SortCollection(NodeView, [](const TNode* node) { return abs(node->ClockSkewUs); }, ReverseSort);
                     NeedSort = false;
                     break;
                 case ENodeFields::Peers:
@@ -1541,6 +1558,10 @@ class TJsonNodes : public TViewerPipeClient {
                     SortCollection(NodeView, [](const TNode* node) { return node->ReversePeers.size(); }, ReverseSort);
                     NeedSort = false;
                     break;
+                case ENodeFields::PileName:
+                    SortCollection(NodeView, [](const TNode* node) { return node->GetPileName(); }, ReverseSort);
+                    NeedSort = false;
+                    break;
                 case ENodeFields::NodeInfo:
                 case ENodeFields::PDisks:
                 case ENodeFields::VDisks:
@@ -3227,6 +3248,11 @@ class TJsonNodes : public TViewerPipeClient {
                 if ((FieldsAvailable.test(+ENodeFields::NodeInfo) || FieldsAvailable.test(+ENodeFields::SystemState)) && (FieldsRequested & FieldsSystemState).any()) {
                     *jsonNode.MutableSystemState() = std::move(node->SystemState);
                 }
+                if (FieldsAvailable.test(+ENodeFields::PileName) && FieldsRequested.test(+ENodeFields::PileName)) {
+                    if (node->GetPileName()) {
+                        jsonNode.SetPileName(node->GetPileName());
+                    }
+                }
                 if (FieldsAvailable.test(+ENodeFields::PDisks) && FieldsRequested.test(+ENodeFields::PDisks)) {
                     std::sort(node->PDisks.begin(), node->PDisks.end(), [](const NKikimrWhiteboard::TPDiskStateInfo& a, const NKikimrWhiteboard::TPDiskStateInfo& b) {
                         return a.path() < b.path();
