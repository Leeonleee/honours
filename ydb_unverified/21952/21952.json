{
  "repo": "ydb-platform/ydb",
  "pull_number": 21952,
  "instance_id": "ydb-platform__ydb-21952",
  "issue_numbers": [
    "21976",
    "21951"
  ],
  "base_commit": "dd07662a0e0b98b6bbd07da00386bb889c683c27",
  "patch": "diff --git a/ydb/core/viewer/json_handlers_storage.cpp b/ydb/core/viewer/json_handlers_storage.cpp\nindex 481dbed29fce..25dee3517675 100644\n--- a/ydb/core/viewer/json_handlers_storage.cpp\n+++ b/ydb/core/viewer/json_handlers_storage.cpp\n@@ -4,7 +4,7 @@\n namespace NKikimr::NViewer {\n \n void InitStorageGroupsJsonHandler(TJsonHandlers& jsonHandlers) {\n-    jsonHandlers.AddHandler(\"/storage/groups\", new TJsonHandler<TStorageGroups>(TStorageGroups::GetSwagger()), 7);\n+    jsonHandlers.AddHandler(\"/storage/groups\", new TJsonHandler<TStorageGroups>(TStorageGroups::GetSwagger()), 8);\n }\n \n void InitStorageJsonHandlers(TJsonHandlers& jsonHandlers) {\ndiff --git a/ydb/core/viewer/json_handlers_viewer.cpp b/ydb/core/viewer/json_handlers_viewer.cpp\nindex e203aefd2a0a..4f0ba37e5ef3 100644\n--- a/ydb/core/viewer/json_handlers_viewer.cpp\n+++ b/ydb/core/viewer/json_handlers_viewer.cpp\n@@ -221,7 +221,7 @@ void InitViewerStorageUsageJsonHandler(TJsonHandlers &handlers) {\n }\n \n void InitViewerClusterJsonHandler(TJsonHandlers& handlers) {\n-    handlers.AddHandler(\"/viewer/cluster\", new TJsonHandler<TJsonCluster>(TJsonCluster::GetSwagger()), 5);\n+    handlers.AddHandler(\"/viewer/cluster\", new TJsonHandler<TJsonCluster>(TJsonCluster::GetSwagger()), 6);\n }\n \n void InitViewerLabeledCountersJsonHandler(TJsonHandlers &handlers) {\n@@ -261,7 +261,7 @@ void InitViewerHealthCheckJsonHandler(TJsonHandlers& handlers) {\n }\n \n void InitViewerNodesJsonHandler(TJsonHandlers& handlers) {\n-    handlers.AddHandler(\"/viewer/nodes\", new TJsonHandler<TJsonNodes>(TJsonNodes::GetSwagger()), 17);\n+    handlers.AddHandler(\"/viewer/nodes\", new TJsonHandler<TJsonNodes>(TJsonNodes::GetSwagger()), 18);\n }\n \n void InitViewerACLJsonHandler(TJsonHandlers &jsonHandlers) {\ndiff --git a/ydb/core/viewer/protos/viewer.proto b/ydb/core/viewer/protos/viewer.proto\nindex 128e9c9aaeb5..ffed726a8a70 100644\n--- a/ydb/core/viewer/protos/viewer.proto\n+++ b/ydb/core/viewer/protos/viewer.proto\n@@ -10,6 +10,7 @@ import \"ydb/core/protos/hive.proto\";\n import \"ydb/core/protos/kqp.proto\";\n import \"ydb/public/api/protos/ydb_cms.proto\";\n import \"ydb/core/protos/sys_view.proto\";\n+import \"ydb/core/protos/bridge.proto\";\n \n package NKikimrViewer;\n option java_package = \"ru.yandex.kikimr.proto\";\n@@ -315,6 +316,19 @@ enum EFlag {\n     Red = 5;\n }\n \n+message TBridgePileInfo {\n+    optional uint32 PileId = 1;\n+    string Name = 2;\n+    NKikimrBridge.TClusterState.EPileState State = 3;\n+    bool IsPrimary = 4;\n+    bool IsBeingPromoted = 5;\n+    uint32 Nodes = 6;\n+}\n+\n+message TBridgeInfo {\n+    repeated TBridgePileInfo Piles = 1;\n+}\n+\n message TClusterInfo {\n     uint32 Version = 1;\n     string Name = 2;\n@@ -347,6 +361,7 @@ message TClusterInfo {\n     uint64 Tenants = 61;\n     double NetworkUtilization = 62;\n     uint64 NetworkWriteThroughput = 63;\n+    TBridgeInfo BridgeInfo = 64;\n }\n \n enum ETenantType {\n@@ -467,6 +482,7 @@ message TStorageGroupInfo {\n     optional uint64 LatencyPutTabletLog = 20;\n     optional uint64 LatencyPutUserData = 21;\n     optional uint64 LatencyGetFast = 22;\n+    string PileName = 23;\n     repeated TStorageVDisk VDisks = 30;\n }\n \n@@ -545,6 +561,7 @@ message TNodeInfo {\n     EFlag ConnectStatus = 10; // Max\n     optional uint64 ReceiveThroughput = 11;\n     optional uint64 SendThroughput = 12;\n+    optional string PileName = 13;\n     optional float NetworkUtilization = 20; // Sum\n     optional float NetworkUtilizationMin = 21;\n     optional float NetworkUtilizationMax = 22;\ndiff --git a/ydb/core/viewer/storage_groups.h b/ydb/core/viewer/storage_groups.h\nindex 11e4e9befd1b..85497246748e 100644\n--- a/ydb/core/viewer/storage_groups.h\n+++ b/ydb/core/viewer/storage_groups.h\n@@ -104,6 +104,7 @@ enum class EGroupFields : ui8 {\n     VDisk, // VDisk information\n     PDisk, // PDisk information\n     Latency,\n+    PileName,\n     COUNT\n };\n \n@@ -123,6 +124,9 @@ class TStorageGroups : public TViewerPipeClient {\n     std::unordered_map<TPathId, TTabletId> PathId2HiveId;\n     std::unordered_map<TTabletId, TRequestResponse<TEvHive::TEvResponseHiveStorageStats>> HiveStorageStats;\n     ui64 HiveStorageStatsInFlight = 0;\n+    std::optional<TRequestResponse<TEvInterconnect::TEvNodesInfo>> NodesInfo;\n+    std::optional<TRequestResponse<TEvNodeWardenStorageConfig>> NodeWardenStorageConfigResponse;\n+    bool NodeWardenStorageConfigResponseProcessed = false;\n \n     // BSC\n     bool FallbackToWhiteboard = false;\n@@ -136,7 +140,6 @@ class TStorageGroups : public TViewerPipeClient {\n     bool GetPDisksResponseProcessed = false;\n \n     // Whiteboard\n-    std::optional<TRequestResponse<TEvInterconnect::TEvNodesInfo>> NodesInfo;\n     std::unordered_map<TNodeId, TRequestResponse<TEvWhiteboard::TEvBSGroupStateResponse>> BSGroupStateResponse;\n     ui64 BSGroupStateRequestsInFlight = 0;\n     std::unordered_map<TNodeId, TRequestResponse<TEvWhiteboard::TEvVDiskStateResponse>> VDiskStateResponse;\n@@ -283,6 +286,7 @@ class TStorageGroups : public TViewerPipeClient {\n         NKikimrViewer::EFlag Overall = NKikimrViewer::EFlag::Grey;\n         NKikimrViewer::EFlag DiskSpace = NKikimrViewer::EFlag::Grey;\n         float DiskSpaceUsage = 0; // the highest\n+        TString PileName;\n \n         std::vector<TVDisk> VDisks;\n         std::vector<TNodeId> VDiskNodeIds; // filter nodes to request disk info from the whiteboard. could be duplicated.\n@@ -536,6 +540,9 @@ class TStorageGroups : public TViewerPipeClient {\n                 case EGroupFields::Latency:\n                     groupName = GetLatencyForGroup();\n                     break;\n+                case EGroupFields::PileName:\n+                    groupName = PileName;\n+                    break;\n                 default:\n                     break;\n             }\n@@ -552,6 +559,7 @@ class TStorageGroups : public TViewerPipeClient {\n                 case EGroupFields::PoolName:\n                 case EGroupFields::Kind:\n                 case EGroupFields::MediaType:\n+                case EGroupFields::PileName:\n                     return GetGroupName(groupBy);\n                 case EGroupFields::State:\n                     return StateSortKey;\n@@ -622,6 +630,7 @@ class TStorageGroups : public TViewerPipeClient {\n     std::unordered_map<TVSlotId, const NKikimrSysView::TVSlotInfo*> VSlotsByVSlotId;\n     std::unordered_map<TVSlotId, const NKikimrWhiteboard::TVDiskStateInfo*> VDisksByVSlotId;\n     std::unordered_map<TPDiskId, const NKikimrWhiteboard::TPDiskStateInfo*> PDisksByPDiskId;\n+    std::unordered_map<ui32, TString> PileNames;\n \n     TFieldsType FieldsRequested; // fields that were requested by user\n     TFieldsType FieldsRequired; // fields that are required to calculate the response\n@@ -737,6 +746,8 @@ class TStorageGroups : public TViewerPipeClient {\n             result = EGroupFields::Latency;\n         } else if (field == \"Available\") {\n             result = EGroupFields::Available;\n+        } else if (field == \"PileName\") {\n+            result = EGroupFields::PileName;\n         }\n         return result;\n     }\n@@ -874,6 +885,10 @@ class TStorageGroups : public TViewerPipeClient {\n                 ProcessNavigate(result.first->second, true);\n             }\n         }\n+        if (AppData()->BridgeModeEnabled) {\n+            NodeWardenStorageConfigResponse = MakeRequest<TEvNodeWardenStorageConfig>(MakeBlobStorageNodeWardenID(SelfId().NodeId()),\n+                new TEvNodeWardenQueryStorageConfig(/*subscribe=*/ false));\n+        }\n         if (FallbackToWhiteboard) {\n             RequestWhiteboard();\n         } else {\n@@ -1100,6 +1115,7 @@ class TStorageGroups : public TViewerPipeClient {\n                 case EGroupFields::Kind:\n                 case EGroupFields::Encryption:\n                 case EGroupFields::MediaType:\n+                case EGroupFields::PileName:\n                     GroupCollection();\n                     SortCollection(GroupGroups, [](const TGroupGroup& groupGroup) { return groupGroup.SortKey; });\n                     NeedGroup = false;\n@@ -1183,6 +1199,9 @@ class TStorageGroups : public TViewerPipeClient {\n                 case EGroupFields::Latency:\n                     SortCollection(GroupView, [](const TGroup* group) { return group->GetLatencyForSort(); }, ReverseSort);\n                     break;\n+                case EGroupFields::PileName:\n+                    SortCollection(GroupView, [](const TGroup* group) { return group->GetGroupName(EGroupFields::PileName); }, ReverseSort);\n+                    break;\n                 case EGroupFields::PDiskId:\n                 case EGroupFields::NodeId:\n                 case EGroupFields::PDisk:\n@@ -1292,6 +1311,23 @@ class TStorageGroups : public TViewerPipeClient {\n \n     void ProcessResponses() {\n         AddEvent(\"ProcessResponses\");\n+        if (NodeWardenStorageConfigResponse) {\n+            if (!NodeWardenStorageConfigResponseProcessed && NodeWardenStorageConfigResponse->IsDone()) {\n+                if (NodeWardenStorageConfigResponse->IsOk()) {\n+                    if (NodeWardenStorageConfigResponse->Get()->BridgeInfo) {\n+                        const auto& srcBridgeInfo = *NodeWardenStorageConfigResponse->Get()->BridgeInfo.get();\n+                        for (const auto& pile : srcBridgeInfo.Piles) {\n+                            PileNames[pile.BridgePileId.GetRawId()] = pile.Name;\n+                        }\n+                    } else {\n+                        AddProblem(\"empty-node-warden-bridge-info\");\n+                    }\n+                }\n+                NodeWardenStorageConfigResponseProcessed = true;\n+            } else {\n+                return; // do not process further until NodeWarden response is processed\n+            }\n+        }\n         if (GetGroupsResponse && GetGroupsResponse->IsDone() && !GetGroupsResponseProcessed) {\n             if (GetGroupsResponse->IsOk()) {\n                 GroupData.reserve(GetGroupsResponse->Get()->Record.EntriesSize());\n@@ -1310,6 +1346,10 @@ class TStorageGroups : public TViewerPipeClient {\n                     group.PutTabletLogLatency = info.GetPutTabletLogLatency();\n                     group.PutUserDataLatency = info.GetPutUserDataLatency();\n                     group.GetFastLatency = info.GetGetFastLatency();\n+                    if (info.HasBridgePileId() && !PileNames.empty()) {\n+                        group.PileName = PileNames[info.GetBridgePileId()];\n+                        FieldsAvailable.set(+EGroupFields::PileName);\n+                    }\n                 }\n                 for (TGroup& group : GroupData) {\n                     GroupView.emplace_back(&group);\n@@ -1578,6 +1618,13 @@ class TStorageGroups : public TViewerPipeClient {\n         }\n     }\n \n+    void Handle(TEvNodeWardenStorageConfig::TPtr& ev) {\n+        if (NodeWardenStorageConfigResponse->Set(std::move(ev))) {\n+            ProcessResponses();\n+            RequestDone();\n+        }\n+    }\n+\n     void RequestNodesListForStorageGroups() {\n         if (!NodesInfo.has_value()) {\n             NodesInfo = MakeRequest<TEvInterconnect::TEvNodesInfo>(GetNameserviceActorId(), new TEvInterconnect::TEvListNodes());\n@@ -1943,6 +1990,7 @@ class TStorageGroups : public TViewerPipeClient {\n             hFunc(TEvTabletPipe::TEvClientConnected, Handle);\n             hFunc(TEvents::TEvWakeup, HandleTimeout);\n             hFunc(TEvInterconnect::TEvNodesInfo, Handle);\n+            hFunc(TEvNodeWardenStorageConfig, Handle);\n             hFunc(TEvWhiteboard::TEvVDiskStateResponse, Handle);\n             hFunc(TEvWhiteboard::TEvPDiskStateResponse, Handle);\n             hFunc(TEvWhiteboard::TEvBSGroupStateResponse, Handle);\n@@ -2150,6 +2198,9 @@ class TStorageGroups : public TViewerPipeClient {\n                     jsonGroup.SetLatencyPutUserData(group->PutUserDataLatency);\n                     jsonGroup.SetLatencyGetFast(group->GetFastLatency);\n                 }\n+                if (FieldsAvailable.test(+EGroupFields::PileName) && FieldsRequested.test(+EGroupFields::PileName)) {\n+                    jsonGroup.SetPileName(group->PileName);\n+                }\n             }\n         } else {\n             for (TGroupGroup& groupGroup : GroupGroups) {\ndiff --git a/ydb/core/viewer/viewer_capabilities.h b/ydb/core/viewer/viewer_capabilities.h\nindex 54bcfce042cc..ad9d3dc9fa9c 100644\n--- a/ydb/core/viewer/viewer_capabilities.h\n+++ b/ydb/core/viewer/viewer_capabilities.h\n@@ -38,6 +38,10 @@ class TViewerCapabilities : public TViewerPipeClient {\n                 }\n             }\n         }\n+\n+        if (AppData()->BridgeModeEnabled) {\n+            json[\"Cluster\"][\"BridgeModeEnabled\"] = true;\n+        }\n         return json;\n     }\n \ndiff --git a/ydb/core/viewer/viewer_cluster.h b/ydb/core/viewer/viewer_cluster.h\nindex d62032c46dc2..fe007b7f8cde 100644\n--- a/ydb/core/viewer/viewer_cluster.h\n+++ b/ydb/core/viewer/viewer_cluster.h\n@@ -14,6 +14,7 @@ class TJsonCluster : public TViewerPipeClient {\n     using TThis = TJsonCluster;\n     using TBase = TViewerPipeClient;\n     std::optional<TRequestResponse<TEvInterconnect::TEvNodesInfo>> NodesInfoResponse;\n+    std::optional<TRequestResponse<TEvNodeWardenStorageConfig>> NodeWardenStorageConfigResponse;\n     std::optional<TRequestResponse<TEvWhiteboard::TEvNodeStateResponse>> NodeStateResponse;\n     std::optional<TRequestResponse<NConsole::TEvConsole::TEvListTenantsResponse>> ListTenantsResponse;\n     std::optional<TRequestResponse<NSysView::TEvSysView::TEvGetPDisksResponse>> PDisksResponse;\n@@ -32,6 +33,7 @@ class TJsonCluster : public TViewerPipeClient {\n         TNodeId NodeId;\n         TString DataCenter;\n         TSubDomainKey SubDomainKey;\n+        std::optional<ui32> PileId;\n         bool Static = false;\n         bool Connected = false;\n         bool Disconnected = false;\n@@ -105,6 +107,10 @@ class TJsonCluster : public TViewerPipeClient {\n \n     void Bootstrap() override {\n         NodesInfoResponse = MakeRequest<TEvInterconnect::TEvNodesInfo>(GetNameserviceActorId(), new TEvInterconnect::TEvListNodes());\n+        if (AppData()->BridgeModeEnabled) {\n+            NodeWardenStorageConfigResponse = MakeRequest<TEvNodeWardenStorageConfig>(MakeBlobStorageNodeWardenID(SelfId().NodeId()),\n+                new TEvNodeWardenQueryStorageConfig(/*subscribe=*/ false));\n+        }\n         NodeStateResponse = MakeWhiteboardRequest(TActivationContext::ActorSystem()->NodeId, new TEvWhiteboard::TEvNodeStateRequest());\n         PDisksResponse = MakeCachedRequestBSControllerPDisks();\n         StorageStatsResponse = MakeCachedRequestBSControllerStorageStats();\n@@ -251,6 +257,17 @@ class TJsonCluster : public TViewerPipeClient {\n                 for (TNode& node : NodeData) {\n                     NodeCache.emplace(node.NodeInfo.NodeId, &node);\n                 }\n+                if (NodesInfoResponse->Get()->PileMap) {\n+                    for (ui32 pileId = 0; pileId < NodesInfoResponse->Get()->PileMap->size(); ++pileId) {\n+                        for (ui32 nodeId : (*NodesInfoResponse->Get()->PileMap)[pileId]) {\n+                            auto itNode = NodeCache.find(nodeId);\n+                            if (itNode == NodeCache.end()) {\n+                                continue;\n+                            }\n+                            itNode->second->PileId = pileId;\n+                        }\n+                    }\n+                }\n                 ClusterInfo.SetNodesTotal(NodesInfoResponse->Get()->Nodes.size());\n                 ClusterInfo.SetHosts(hosts.size());\n             } else {\n@@ -333,6 +350,39 @@ class TJsonCluster : public TViewerPipeClient {\n             StorageStatsResponse.reset();\n         }\n \n+        if (NodeWardenStorageConfigResponse && NodeWardenStorageConfigResponse->IsDone()) {\n+            if (NodeWardenStorageConfigResponse->IsOk()) {\n+                if (NodeWardenStorageConfigResponse->Get()->BridgeInfo) {\n+                    const auto& srcBridgeInfo = *NodeWardenStorageConfigResponse->Get()->BridgeInfo.get();\n+                    auto& pbBridgeInfo = *ClusterInfo.MutableBridgeInfo();\n+                    std::unordered_map<ui32, ui32> pileNodes;\n+                    for (const auto& pile : srcBridgeInfo.Piles) {\n+                        auto& pbBridgePileInfo = *pbBridgeInfo.AddPiles();\n+                        pbBridgePileInfo.SetPileId(pile.BridgePileId.GetRawId());\n+                        pbBridgePileInfo.SetName(pile.Name);\n+                        pbBridgePileInfo.SetState(pile.State);\n+                        pbBridgePileInfo.SetIsPrimary(pile.IsPrimary);\n+                        pbBridgePileInfo.SetIsBeingPromoted(pile.IsBeingPromoted);\n+                    }\n+                    for (const auto& node : NodeData) {\n+                        if (node.PileId) {\n+                            pileNodes[*node.PileId]++;\n+                        }\n+                    }\n+                    for (auto& pile : *pbBridgeInfo.MutablePiles()) {\n+                        auto it = pileNodes.find(pile.GetPileId());\n+                        if (it != pileNodes.end()) {\n+                            pile.SetNodes(it->second);\n+                        }\n+                    }\n+                } else {\n+                    AddProblem(\"empty-node-warden-bridge-info\");\n+                }\n+            } else {\n+                AddProblem(\"no-node-warden-storage-config\");\n+            }\n+        }\n+\n         if (TimeToAskWhiteboard()) {\n             std::vector<TNodeBatch> batches = BatchNodes();\n             SendWhiteboardRequests(batches);\n@@ -634,6 +684,13 @@ class TJsonCluster : public TViewerPipeClient {\n         }\n     }\n \n+    void Handle(TEvNodeWardenStorageConfig::TPtr& ev) {\n+        if (NodeWardenStorageConfigResponse->Set(std::move(ev))) {\n+            ProcessResponses();\n+            RequestDone();\n+        }\n+    }\n+\n     void Handle(TEvViewer::TEvViewerResponse::TPtr& ev) {\n         ui64 nodeId = ev.Get()->Cookie;\n         switch (ev->Get()->Record.Response_case()) {\n@@ -802,6 +859,7 @@ class TJsonCluster : public TViewerPipeClient {\n     STATEFN(StateWork) {\n         switch (ev->GetTypeRewrite()) {\n             hFunc(TEvInterconnect::TEvNodesInfo, Handle);\n+            hFunc(TEvNodeWardenStorageConfig, Handle);\n             hFunc(TEvWhiteboard::TEvNodeStateResponse, Handle);\n             hFunc(TEvWhiteboard::TEvSystemStateResponse, Handle);\n             hFunc(TEvWhiteboard::TEvTabletStateResponse, Handle);\ndiff --git a/ydb/core/viewer/viewer_nodes.h b/ydb/core/viewer/viewer_nodes.h\nindex 63458aa99fc0..e1f01bc09859 100644\n--- a/ydb/core/viewer/viewer_nodes.h\n+++ b/ydb/core/viewer/viewer_nodes.h\n@@ -41,6 +41,7 @@ enum class ENodeFields : ui8 {\n     NetworkUtilization,\n     ClockSkew,\n     PingTime,\n+    PileName,\n     COUNT\n };\n \n@@ -260,6 +261,13 @@ class TJsonNodes : public TViewerPipeClient {\n             return SystemState.GetLocation().GetRack();\n         }\n \n+        TString GetPileName() const {\n+            if (NodeInfo.Location.GetBridgePileName()) {\n+                return NodeInfo.Location.GetBridgePileName().value_or(\"\");\n+            }\n+            return SystemState.GetLocation().GetBridgePileName();\n+        }\n+\n         void Cleanup() {\n             if (SystemState.HasSystemLocation()) {\n                 SystemState.ClearSystemLocation();\n@@ -671,6 +679,9 @@ class TJsonNodes : public TViewerPipeClient {\n                 case ENodeFields::PingTime:\n                     groupName = GetPingTimeForGroup();\n                     break;\n+                case ENodeFields::PileName:\n+                    groupName = GetPileName();\n+                    break;\n                 default:\n                     break;\n             }\n@@ -706,6 +717,8 @@ class TJsonNodes : public TViewerPipeClient {\n                     return static_cast<int>(abs(ClockSkewUs) / 1000);\n                 case ENodeFields::PingTime:\n                     return PingTimeUs;\n+                case ENodeFields::PileName:\n+                    return GetPileName();\n                 default:\n                     return TString();\n             }\n@@ -761,7 +774,8 @@ class TJsonNodes : public TViewerPipeClient {\n                                                     .set(+ENodeFields::NodeId)\n                                                     .set(+ENodeFields::HostName)\n                                                     .set(+ENodeFields::DC)\n-                                                    .set(+ENodeFields::Rack);\n+                                                    .set(+ENodeFields::Rack)\n+                                                    .set(+ENodeFields::PileName);\n     const TFieldsType FieldsSystemState = TFieldsType().set(+ENodeFields::SystemState)\n                                                        .set(+ENodeFields::Database)\n                                                        .set(+ENodeFields::NodeName)\n@@ -899,6 +913,8 @@ class TJsonNodes : public TViewerPipeClient {\n             result = ENodeFields::PingTime;\n         } else if (field == \"ClockSkew\") {\n             result = ENodeFields::ClockSkew;\n+        } else if (field == \"PileName\") {\n+            result = ENodeFields::PileName;\n         }\n         return result;\n     }\n@@ -1406,6 +1422,7 @@ class TJsonNodes : public TViewerPipeClient {\n                 case ENodeFields::DC:\n                 case ENodeFields::Rack:\n                 case ENodeFields::Uptime:\n+                case ENodeFields::PileName:\n                     GroupCollection();\n                     SortCollection(NodeGroups, [](const TNodeGroup& nodeGroup) { return nodeGroup.SortKey; });\n                     NeedGroup = false;\n@@ -1530,7 +1547,7 @@ class TJsonNodes : public TViewerPipeClient {\n                     NeedSort = false;\n                     break;\n                 case ENodeFields::ClockSkew:\n-                    SortCollection(NodeView, [](const TNode* node) { return node->ClockSkewUs; }, ReverseSort);\n+                    SortCollection(NodeView, [](const TNode* node) { return abs(node->ClockSkewUs); }, ReverseSort);\n                     NeedSort = false;\n                     break;\n                 case ENodeFields::Peers:\n@@ -1541,6 +1558,10 @@ class TJsonNodes : public TViewerPipeClient {\n                     SortCollection(NodeView, [](const TNode* node) { return node->ReversePeers.size(); }, ReverseSort);\n                     NeedSort = false;\n                     break;\n+                case ENodeFields::PileName:\n+                    SortCollection(NodeView, [](const TNode* node) { return node->GetPileName(); }, ReverseSort);\n+                    NeedSort = false;\n+                    break;\n                 case ENodeFields::NodeInfo:\n                 case ENodeFields::PDisks:\n                 case ENodeFields::VDisks:\n@@ -3227,6 +3248,11 @@ class TJsonNodes : public TViewerPipeClient {\n                 if ((FieldsAvailable.test(+ENodeFields::NodeInfo) || FieldsAvailable.test(+ENodeFields::SystemState)) && (FieldsRequested & FieldsSystemState).any()) {\n                     *jsonNode.MutableSystemState() = std::move(node->SystemState);\n                 }\n+                if (FieldsAvailable.test(+ENodeFields::PileName) && FieldsRequested.test(+ENodeFields::PileName)) {\n+                    if (node->GetPileName()) {\n+                        jsonNode.SetPileName(node->GetPileName());\n+                    }\n+                }\n                 if (FieldsAvailable.test(+ENodeFields::PDisks) && FieldsRequested.test(+ENodeFields::PDisks)) {\n                     std::sort(node->PDisks.begin(), node->PDisks.end(), [](const NKikimrWhiteboard::TPDiskStateInfo& a, const NKikimrWhiteboard::TPDiskStateInfo& b) {\n                         return a.path() < b.path();\n",
  "test_patch": "diff --git a/ydb/core/viewer/tests/canondata/result.json b/ydb/core/viewer/tests/canondata/result.json\nindex 224e679871ca..82e8ed97f6a4 100644\n--- a/ydb/core/viewer/tests/canondata/result.json\n+++ b/ydb/core/viewer/tests/canondata/result.json\n@@ -361,8 +361,8 @@\n             \"text\": \"<html><body><h1>403 Forbidden</h1></body></html>\"\n         },\n         \"cluster_nodes_monitoring\": {\n-            \"FieldsAvailable\": \"0000000000000000000110100000011\",\n-            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FieldsAvailable\": \"10000000000000000000110100000011\",\n+            \"FieldsRequired\": \"00000000000000000000000000000001\",\n             \"FoundNodes\": \"3\",\n             \"Nodes\": [\n                 {\n@@ -378,8 +378,8 @@\n             \"TotalNodes\": \"3\"\n         },\n         \"cluster_nodes_root\": {\n-            \"FieldsAvailable\": \"0000000000000000000110100000011\",\n-            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FieldsAvailable\": \"10000000000000000000110100000011\",\n+            \"FieldsRequired\": \"00000000000000000000000000000001\",\n             \"FoundNodes\": \"3\",\n             \"Nodes\": [\n                 {\n@@ -395,8 +395,8 @@\n             \"TotalNodes\": \"3\"\n         },\n         \"cluster_nodes_viewer\": {\n-            \"FieldsAvailable\": \"0000000000000000000110100000011\",\n-            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FieldsAvailable\": \"10000000000000000000110100000011\",\n+            \"FieldsRequired\": \"00000000000000000000000000000001\",\n             \"FoundNodes\": \"3\",\n             \"Nodes\": [\n                 {\n@@ -412,8 +412,8 @@\n             \"TotalNodes\": \"3\"\n         },\n         \"database_nodes_database\": {\n-            \"FieldsAvailable\": \"0000000010000000000110100000011\",\n-            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FieldsAvailable\": \"10000000010000000000110100000011\",\n+            \"FieldsRequired\": \"00000000000000000000000000000001\",\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n@@ -423,8 +423,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"database_nodes_monitoring\": {\n-            \"FieldsAvailable\": \"0000000010000000000110100000011\",\n-            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FieldsAvailable\": \"10000000010000000000110100000011\",\n+            \"FieldsRequired\": \"00000000000000000000000000000001\",\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n@@ -434,8 +434,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"database_nodes_root\": {\n-            \"FieldsAvailable\": \"0000000010000000000110100000011\",\n-            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FieldsAvailable\": \"10000000010000000000110100000011\",\n+            \"FieldsRequired\": \"00000000000000000000000000000001\",\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n@@ -445,8 +445,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"database_nodes_viewer\": {\n-            \"FieldsAvailable\": \"0000000010000000000110100000011\",\n-            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FieldsAvailable\": \"10000000010000000000110100000011\",\n+            \"FieldsRequired\": \"00000000000000000000000000000001\",\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n@@ -490,8 +490,8 @@\n         }\n     },\n     \"test.test_storage_groups\": {\n-        \"FieldsAvailable\": \"111111111111111111111\",\n-        \"FieldsRequired\": \"111111111111111111111\",\n+        \"FieldsAvailable\": \"0111111111111111111111\",\n+        \"FieldsRequired\": \"1111111111111111111111\",\n         \"FoundGroups\": 5,\n         \"StorageGroups\": [\n             {\n@@ -3156,8 +3156,8 @@\n     },\n     \"test.test_viewer_nodes\": {\n         \"/Root\": {\n-            \"FieldsAvailable\": \"0000000010000110111111100000111\",\n-            \"FieldsRequired\": \"0000000000000000000000000000101\",\n+            \"FieldsAvailable\": \"10000000010000110111111100000111\",\n+            \"FieldsRequired\": \"00000000000000000000000000000101\",\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n@@ -3234,8 +3234,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/dedicated_db\": {\n-            \"FieldsAvailable\": \"0000000010000110111111100000111\",\n-            \"FieldsRequired\": \"0000000000000000000000000000101\",\n+            \"FieldsAvailable\": \"10000000010000110111111100000111\",\n+            \"FieldsRequired\": \"00000000000000000000000000000101\",\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n@@ -3310,8 +3310,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/serverless_db\": {\n-            \"FieldsAvailable\": \"0000000010000110111111100000111\",\n-            \"FieldsRequired\": \"0000000000000000000000000000101\",\n+            \"FieldsAvailable\": \"10000000010000110111111100000111\",\n+            \"FieldsRequired\": \"00000000000000000000000000000101\",\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n@@ -3389,8 +3389,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/shared_db\": {\n-            \"FieldsAvailable\": \"0000000010000110111111100000111\",\n-            \"FieldsRequired\": \"0000000000000000000000000000101\",\n+            \"FieldsAvailable\": \"10000000010000110111111100000111\",\n+            \"FieldsRequired\": \"00000000000000000000000000000101\",\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n@@ -3467,8 +3467,8 @@\n     },\n     \"test.test_viewer_nodes_all\": {\n         \"/Root\": {\n-            \"FieldsAvailable\": \"1111111110111111111111111111111\",\n-            \"FieldsRequired\": \"1111111111111111111111111111111\",\n+            \"FieldsAvailable\": \"11111111110111111111111111111111\",\n+            \"FieldsRequired\": \"11111111111111111111111111111111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n@@ -3837,8 +3837,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/dedicated_db\": {\n-            \"FieldsAvailable\": \"1111111110111111111111111111111\",\n-            \"FieldsRequired\": \"1111111111111111111111111111111\",\n+            \"FieldsAvailable\": \"11111111110111111111111111111111\",\n+            \"FieldsRequired\": \"11111111111111111111111111111111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n@@ -4043,8 +4043,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/serverless_db\": {\n-            \"FieldsAvailable\": \"1111111110111111111111111111111\",\n-            \"FieldsRequired\": \"1111111111111111111111111111111\",\n+            \"FieldsAvailable\": \"11111111110111111111111111111111\",\n+            \"FieldsRequired\": \"11111111111111111111111111111111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n@@ -4239,8 +4239,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/shared_db\": {\n-            \"FieldsAvailable\": \"1111111110111111111111111111111\",\n-            \"FieldsRequired\": \"1111111111111111111111111111111\",\n+            \"FieldsAvailable\": \"11111111110111111111111111111111\",\n+            \"FieldsRequired\": \"11111111111111111111111111111111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n@@ -4447,8 +4447,8 @@\n     },\n     \"test.test_viewer_nodes_issue_14992\": {\n         \"response_group\": {\n-            \"FieldsAvailable\": \"0000000110111110111111100000111\",\n-            \"FieldsRequired\": \"0000000001100000010000000000101\",\n+            \"FieldsAvailable\": \"10000000110111110111111100000111\",\n+            \"FieldsRequired\": \"00000000001100000010000000000101\",\n             \"FoundNodes\": \"3\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"Nodes\": [\n@@ -4665,8 +4665,8 @@\n             \"TotalNodes\": \"3\"\n         },\n         \"response_group_by\": {\n-            \"FieldsAvailable\": \"0000000110111110111111100000111\",\n-            \"FieldsRequired\": \"0000000001100000010000000000101\",\n+            \"FieldsAvailable\": \"10000000110111110111111100000111\",\n+            \"FieldsRequired\": \"00000000001100000010000000000101\",\n             \"FoundNodes\": \"3\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"NodeGroups\": [\n@@ -5367,8 +5367,8 @@\n     },\n     \"test.test_viewer_storage_nodes\": {\n         \"/Root\": {\n-            \"FieldsAvailable\": \"0000000110000110111111100000111\",\n-            \"FieldsRequired\": \"0000000000000000000000000000111\",\n+            \"FieldsAvailable\": \"10000000110000110111111100000111\",\n+            \"FieldsRequired\": \"00000000000000000000000000000111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n             \"Nodes\": [\n@@ -5446,8 +5446,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/dedicated_db\": {\n-            \"FieldsAvailable\": \"0000000110000110111111100000111\",\n-            \"FieldsRequired\": \"0000000000000000000000000000111\",\n+            \"FieldsAvailable\": \"10000000110000110111111100000111\",\n+            \"FieldsRequired\": \"00000000000000000000000000000111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n             \"Nodes\": [\n@@ -5525,8 +5525,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/serverless_db\": {\n-            \"FieldsAvailable\": \"0000000110000110111111100000111\",\n-            \"FieldsRequired\": \"0000000000000000000000000000111\",\n+            \"FieldsAvailable\": \"10000000110000110111111100000111\",\n+            \"FieldsRequired\": \"00000000000000000000000000000111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n             \"Nodes\": [\n@@ -5607,8 +5607,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/shared_db\": {\n-            \"FieldsAvailable\": \"0000000110000110111111100000111\",\n-            \"FieldsRequired\": \"0000000000000000000000000000111\",\n+            \"FieldsAvailable\": \"10000000110000110111111100000111\",\n+            \"FieldsRequired\": \"00000000000000000000000000000111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n             \"Nodes\": [\n@@ -5688,8 +5688,8 @@\n     },\n     \"test.test_viewer_storage_nodes_all\": {\n         \"/Root\": {\n-            \"FieldsAvailable\": \"1111111110111111111111111111111\",\n-            \"FieldsRequired\": \"1111111111111111111111111111111\",\n+            \"FieldsAvailable\": \"11111111110111111111111111111111\",\n+            \"FieldsRequired\": \"11111111111111111111111111111111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n@@ -6058,8 +6058,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/dedicated_db\": {\n-            \"FieldsAvailable\": \"1111111110111111111111111111111\",\n-            \"FieldsRequired\": \"1111111111111111111111111111111\",\n+            \"FieldsAvailable\": \"11111111110111111111111111111111\",\n+            \"FieldsRequired\": \"11111111111111111111111111111111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n@@ -6427,8 +6427,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/serverless_db\": {\n-            \"FieldsAvailable\": \"1111111110111111111111111111111\",\n-            \"FieldsRequired\": \"1111111111111111111111111111111\",\n+            \"FieldsAvailable\": \"11111111110111111111111111111111\",\n+            \"FieldsRequired\": \"11111111111111111111111111111111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n@@ -6796,8 +6796,8 @@\n             \"TotalNodes\": \"1\"\n         },\n         \"/Root/shared_db\": {\n-            \"FieldsAvailable\": \"1111111110111111111111111111111\",\n-            \"FieldsRequired\": \"1111111111111111111111111111111\",\n+            \"FieldsAvailable\": \"11111111110111111111111111111111\",\n+            \"FieldsRequired\": \"11111111111111111111111111111111\",\n             \"FoundNodes\": \"1\",\n             \"MaximumDisksPerNode\": \"1\",\n             \"MaximumSlotsPerDisk\": \"5\",\n",
  "problem_statement": "[viewer/nodes]: sort ClockSkew by absolute value\nFor ClockSkew, it is important to get values that are furthest from 0. When I sort by `-ClockSkew`, normal values appear first, while large negative values end up at the back: `1, 0.2, 0.1, 0, -0.3, -15`\n\nThe expected sorting should be by absolute value: `-15, 1, -0.3, 0.2, 0.1, 0`\nadd support for bridge mode in viewer backend\n\n",
  "hints_text": "\n",
  "created_at": "2025-07-30T11:09:24Z"
}