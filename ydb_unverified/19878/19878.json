{
  "repo": "ydb-platform/ydb",
  "pull_number": 19878,
  "instance_id": "ydb-platform__ydb-19878",
  "issue_numbers": [
    "19810"
  ],
  "base_commit": "5c04bba463a15a84983e3fd2cde952c552d41100",
  "patch": "diff --git a/ydb/core/viewer/json_handlers_storage.cpp b/ydb/core/viewer/json_handlers_storage.cpp\nindex 750da437452e..481dbed29fce 100644\n--- a/ydb/core/viewer/json_handlers_storage.cpp\n+++ b/ydb/core/viewer/json_handlers_storage.cpp\n@@ -4,7 +4,7 @@\n namespace NKikimr::NViewer {\n \n void InitStorageGroupsJsonHandler(TJsonHandlers& jsonHandlers) {\n-    jsonHandlers.AddHandler(\"/storage/groups\", new TJsonHandler<TStorageGroups>(TStorageGroups::GetSwagger()), 6);\n+    jsonHandlers.AddHandler(\"/storage/groups\", new TJsonHandler<TStorageGroups>(TStorageGroups::GetSwagger()), 7);\n }\n \n void InitStorageJsonHandlers(TJsonHandlers& jsonHandlers) {\ndiff --git a/ydb/core/viewer/json_handlers_viewer.cpp b/ydb/core/viewer/json_handlers_viewer.cpp\nindex be10f6d5b5db..1debb838ec4a 100644\n--- a/ydb/core/viewer/json_handlers_viewer.cpp\n+++ b/ydb/core/viewer/json_handlers_viewer.cpp\n@@ -261,7 +261,7 @@ void InitViewerHealthCheckJsonHandler(TJsonHandlers& handlers) {\n }\n \n void InitViewerNodesJsonHandler(TJsonHandlers& handlers) {\n-    handlers.AddHandler(\"/viewer/nodes\", new TJsonHandler<TJsonNodes>(TJsonNodes::GetSwagger()), 15);\n+    handlers.AddHandler(\"/viewer/nodes\", new TJsonHandler<TJsonNodes>(TJsonNodes::GetSwagger()), 16);\n }\n \n void InitViewerACLJsonHandler(TJsonHandlers &jsonHandlers) {\ndiff --git a/ydb/core/viewer/storage_groups.h b/ydb/core/viewer/storage_groups.h\nindex e3a4ba95505b..11e4e9befd1b 100644\n--- a/ydb/core/viewer/storage_groups.h\n+++ b/ydb/core/viewer/storage_groups.h\n@@ -623,7 +623,8 @@ class TStorageGroups : public TViewerPipeClient {\n     std::unordered_map<TVSlotId, const NKikimrWhiteboard::TVDiskStateInfo*> VDisksByVSlotId;\n     std::unordered_map<TPDiskId, const NKikimrWhiteboard::TPDiskStateInfo*> PDisksByPDiskId;\n \n-    TFieldsType FieldsRequired;\n+    TFieldsType FieldsRequested; // fields that were requested by user\n+    TFieldsType FieldsRequired; // fields that are required to calculate the response\n     TFieldsType FieldsAvailable;\n     const TFieldsType FieldsAll = TFieldsType().set();\n     const TFieldsType FieldsBsGroups = TFieldsType().set(+EGroupFields::GroupId)\n@@ -847,6 +848,7 @@ class TStorageGroups : public TViewerPipeClient {\n             NeedSort = false;\n             NeedLimit = false;\n         }\n+        FieldsRequested = FieldsRequired; // no dependent fields\n         for (auto field = +EGroupFields::GroupId; field != +EGroupFields::COUNT; ++field) {\n             if (FieldsRequired.test(field)) {\n                 auto itDependentFields = DependentFields.find(static_cast<EGroupFields>(field));\n@@ -2079,69 +2081,71 @@ class TStorageGroups : public TViewerPipeClient {\n                 if (group->GroupGeneration) {\n                     jsonGroup.SetGroupGeneration(group->GroupGeneration);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::PoolName)) {\n+                if (FieldsAvailable.test(+EGroupFields::PoolName) && FieldsRequested.test(+EGroupFields::PoolName)) {\n                     jsonGroup.SetPoolName(group->PoolName);\n                 }\n-                std::vector<const TVDisk*> vdisks;\n-                vdisks.resize(group->VDisks.size());\n-                for (size_t idx = 0; idx < group->VDisks.size(); ++idx) {\n-                    vdisks[idx] = &group->VDisks[idx];\n-                }\n-                std::sort(vdisks.begin(), vdisks.end(), [](const TVDisk* a, const TVDisk* b) {\n-                    return a->VDiskId < b->VDiskId;\n-                });\n-                for (const TVDisk* vdisk : vdisks) {\n-                    RenderVDisk(*jsonGroup.AddVDisks(), *vdisk);\n+                if (FieldsRequested.test(+EGroupFields::VDisk)) {\n+                    std::vector<const TVDisk*> vdisks;\n+                    vdisks.resize(group->VDisks.size());\n+                    for (size_t idx = 0; idx < group->VDisks.size(); ++idx) {\n+                        vdisks[idx] = &group->VDisks[idx];\n+                    }\n+                    std::sort(vdisks.begin(), vdisks.end(), [](const TVDisk* a, const TVDisk* b) {\n+                        return a->VDiskId < b->VDiskId;\n+                    });\n+                    for (const TVDisk* vdisk : vdisks) {\n+                        RenderVDisk(*jsonGroup.AddVDisks(), *vdisk);\n+                    }\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Encryption)) {\n+                if (FieldsAvailable.test(+EGroupFields::Encryption) && FieldsRequested.test(+EGroupFields::Encryption)) {\n                     jsonGroup.SetEncryption(group->EncryptionMode);\n                 }\n                 if (group->Overall != NKikimrViewer::Grey) {\n                     jsonGroup.SetOverall(group->Overall);\n                 }\n-                if (group->DiskSpace != NKikimrViewer::Grey) {\n+                if (group->DiskSpace != NKikimrViewer::Grey && FieldsRequested.test(+EGroupFields::Usage)) {\n                     jsonGroup.SetDiskSpace(group->DiskSpace);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Kind)) {\n+                if (FieldsAvailable.test(+EGroupFields::Kind) && FieldsRequested.test(+EGroupFields::Kind)) {\n                     jsonGroup.SetKind(group->Kind);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::MediaType)) {\n+                if (FieldsAvailable.test(+EGroupFields::MediaType) && FieldsRequested.test(+EGroupFields::MediaType)) {\n                     jsonGroup.SetMediaType(group->MediaType);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Erasure)) {\n+                if (FieldsAvailable.test(+EGroupFields::Erasure) && FieldsRequested.test(+EGroupFields::Erasure)) {\n                     jsonGroup.SetErasureSpecies(group->Erasure);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::AllocationUnits)) {\n+                if (FieldsAvailable.test(+EGroupFields::AllocationUnits) && FieldsRequested.test(+EGroupFields::AllocationUnits)) {\n                     jsonGroup.SetAllocationUnits(group->AllocationUnits);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::State)) {\n+                if (FieldsAvailable.test(+EGroupFields::State) && FieldsRequested.test(+EGroupFields::State)) {\n                     jsonGroup.SetState(group->State);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::MissingDisks)) {\n+                if (FieldsAvailable.test(+EGroupFields::MissingDisks) && FieldsRequested.test(+EGroupFields::MissingDisks)) {\n                     jsonGroup.SetMissingDisks(group->MissingDisks);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Used)) {\n+                if (FieldsAvailable.test(+EGroupFields::Used) && FieldsRequested.test(+EGroupFields::Used)) {\n                     jsonGroup.SetUsed(group->Used);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Limit)) {\n+                if (FieldsAvailable.test(+EGroupFields::Limit) && FieldsRequested.test(+EGroupFields::Limit)) {\n                     jsonGroup.SetLimit(group->Limit);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Read)) {\n+                if (FieldsAvailable.test(+EGroupFields::Read) && FieldsRequested.test(+EGroupFields::Read)) {\n                     jsonGroup.SetRead(group->Read);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Write)) {\n+                if (FieldsAvailable.test(+EGroupFields::Write) && FieldsRequested.test(+EGroupFields::Write)) {\n                     jsonGroup.SetWrite(group->Write);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Usage)) {\n+                if (FieldsAvailable.test(+EGroupFields::Usage) && FieldsRequested.test(+EGroupFields::Usage)) {\n                     jsonGroup.SetUsage(group->Usage);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Available)) {\n+                if (FieldsAvailable.test(+EGroupFields::Available) && FieldsRequested.test(+EGroupFields::Available)) {\n                     jsonGroup.SetAvailable(group->Available);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::DiskSpaceUsage)) {\n+                if (FieldsAvailable.test(+EGroupFields::DiskSpaceUsage) && FieldsRequested.test(+EGroupFields::DiskSpaceUsage)) {\n                     jsonGroup.SetDiskSpaceUsage(group->DiskSpaceUsage);\n                 }\n-                if (FieldsAvailable.test(+EGroupFields::Latency)) {\n+                if (FieldsAvailable.test(+EGroupFields::Latency) && FieldsRequested.test(+EGroupFields::Latency)) {\n                     jsonGroup.SetLatencyPutTabletLog(group->PutTabletLogLatency);\n                     jsonGroup.SetLatencyPutUserData(group->PutUserDataLatency);\n                     jsonGroup.SetLatencyGetFast(group->GetFastLatency);\ndiff --git a/ydb/core/viewer/viewer_nodes.h b/ydb/core/viewer/viewer_nodes.h\nindex 98a5c3d68f9d..e8ec1f246640 100644\n--- a/ydb/core/viewer/viewer_nodes.h\n+++ b/ydb/core/viewer/viewer_nodes.h\n@@ -753,7 +753,8 @@ class TJsonNodes : public TViewerPipeClient {\n     std::vector<TNodeBatch> OriginalNodeBatches;\n     bool DumpOriginalNodeBatches = false;\n \n-    TFieldsType FieldsRequired;\n+    TFieldsType FieldsRequested; // fields that were requested by user\n+    TFieldsType FieldsRequired; // fields that are required to calculate the response\n     TFieldsType FieldsAvailable;\n     const TFieldsType FieldsAll = TFieldsType().set();\n     const TFieldsType FieldsNodeInfo = TFieldsType().set(+ENodeFields::NodeInfo)\n@@ -1060,6 +1061,7 @@ class TJsonNodes : public TViewerPipeClient {\n             NeedSort = false;\n             NeedLimit = false;\n         }\n+        FieldsRequested = FieldsRequired; // no dependent fields\n         for (auto field = +ENodeFields::NodeId; field != +ENodeFields::COUNT; ++field) {\n             if (FieldsRequired.test(field)) {\n                 auto itDependentFields = DependentFields.find(static_cast<ENodeFields>(field));\n@@ -3174,33 +3176,33 @@ class TJsonNodes : public TViewerPipeClient {\n                 if (FieldsAvailable.test(+ENodeFields::NodeInfo)) {\n                     jsonNode.SetNodeId(node->GetNodeId());\n                 }\n-                if (node->Database) {\n+                if (node->Database && FieldsRequested.test(+ENodeFields::Database)) {\n                     jsonNode.SetDatabase(node->Database);\n                 }\n-                if (node->UptimeSeconds) {\n+                if (node->UptimeSeconds && FieldsRequested.test(+ENodeFields::Uptime)) {\n                     jsonNode.SetUptimeSeconds(*(node->UptimeSeconds));\n                 }\n                 if (node->Disconnected) {\n                     jsonNode.SetDisconnected(node->Disconnected);\n                 }\n-                if (node->CpuUsage) {\n+                if (node->CpuUsage && FieldsRequested.test(+ENodeFields::CPU)) {\n                     jsonNode.SetCpuUsage(node->CpuUsage);\n                 }\n-                if (node->DiskSpaceUsage) {\n+                if (node->DiskSpaceUsage && FieldsRequested.test(+ENodeFields::DiskSpaceUsage)) {\n                     jsonNode.SetDiskSpaceUsage(node->DiskSpaceUsage);\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::Connections)) {\n+                if (FieldsAvailable.test(+ENodeFields::Connections) && FieldsRequested.test(+ENodeFields::Connections)) {\n                     jsonNode.SetConnections(node->Connections);\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::ConnectStatus)) {\n+                if (FieldsAvailable.test(+ENodeFields::ConnectStatus) && FieldsRequested.test(+ENodeFields::ConnectStatus)) {\n                     jsonNode.SetConnectStatus(GetViewerFlag(node->ConnectStatus));\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::NetworkUtilization)) {\n+                if (FieldsAvailable.test(+ENodeFields::NetworkUtilization) && FieldsRequested.test(+ENodeFields::NetworkUtilization)) {\n                     jsonNode.SetNetworkUtilization(node->NetworkUtilization);\n                     jsonNode.SetNetworkUtilizationMin(node->NetworkUtilizationMin);\n                     jsonNode.SetNetworkUtilizationMax(node->NetworkUtilizationMax);\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::ClockSkew)) {\n+                if (FieldsAvailable.test(+ENodeFields::ClockSkew) && FieldsRequested.test(+ENodeFields::ClockSkew)) {\n                     jsonNode.SetClockSkewUs(node->ClockSkewUs);\n                     jsonNode.SetClockSkewMinUs(node->ClockSkewMinUs);\n                     jsonNode.SetClockSkewMaxUs(node->ClockSkewMaxUs);\n@@ -3208,7 +3210,7 @@ class TJsonNodes : public TViewerPipeClient {\n                         jsonNode.SetReverseClockSkewUs(node->ReverseClockSkewUs);\n                     }\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::PingTime)) {\n+                if (FieldsAvailable.test(+ENodeFields::PingTime) && FieldsRequested.test(+ENodeFields::PingTime)) {\n                     jsonNode.SetPingTimeUs(node->PingTimeUs);\n                     jsonNode.SetPingTimeMinUs(node->PingTimeMinUs);\n                     jsonNode.SetPingTimeMaxUs(node->PingTimeMaxUs);\n@@ -3216,16 +3218,16 @@ class TJsonNodes : public TViewerPipeClient {\n                         jsonNode.SetReversePingTimeUs(node->ReversePingTimeUs);\n                     }\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::SendThroughput)) {\n+                if (FieldsAvailable.test(+ENodeFields::SendThroughput) && FieldsRequested.test(+ENodeFields::SendThroughput)) {\n                     jsonNode.SetSendThroughput(node->SendThroughput);\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::ReceiveThroughput)) {\n+                if (FieldsAvailable.test(+ENodeFields::ReceiveThroughput) && FieldsRequested.test(+ENodeFields::ReceiveThroughput)) {\n                     jsonNode.SetReceiveThroughput(node->ReceiveThroughput);\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::NodeInfo) || FieldsAvailable.test(+ENodeFields::SystemState)) {\n+                if ((FieldsAvailable.test(+ENodeFields::NodeInfo) || FieldsAvailable.test(+ENodeFields::SystemState)) && FieldsRequested.test(+ENodeFields::SystemState)) {\n                     *jsonNode.MutableSystemState() = std::move(node->SystemState);\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::PDisks)) {\n+                if (FieldsAvailable.test(+ENodeFields::PDisks) && FieldsRequested.test(+ENodeFields::PDisks)) {\n                     std::sort(node->PDisks.begin(), node->PDisks.end(), [](const NKikimrWhiteboard::TPDiskStateInfo& a, const NKikimrWhiteboard::TPDiskStateInfo& b) {\n                         return a.path() < b.path();\n                     });\n@@ -3233,7 +3235,7 @@ class TJsonNodes : public TViewerPipeClient {\n                         (*jsonNode.AddPDisks()) = std::move(pDisk);\n                     }\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::VDisks)) {\n+                if (FieldsAvailable.test(+ENodeFields::VDisks) && FieldsRequested.test(+ENodeFields::VDisks)) {\n                     std::sort(node->VDisks.begin(), node->VDisks.end(), [](const NKikimrWhiteboard::TVDiskStateInfo& a, const NKikimrWhiteboard::TVDiskStateInfo& b) {\n                         return VDiskIDFromVDiskID(a.vdiskid()) < VDiskIDFromVDiskID(b.vdiskid());\n                     });\n@@ -3241,7 +3243,7 @@ class TJsonNodes : public TViewerPipeClient {\n                         (*jsonNode.AddVDisks()) = std::move(vDisk);\n                     }\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::Tablets)) {\n+                if (FieldsAvailable.test(+ENodeFields::Tablets) && FieldsRequested.test(+ENodeFields::Tablets)) {\n                     std::sort(node->Tablets.begin(), node->Tablets.end(), [](const NKikimrViewer::TTabletStateInfo& a, const NKikimrViewer::TTabletStateInfo& b) {\n                         return a.type() < b.type();\n                     });\n@@ -3249,13 +3251,7 @@ class TJsonNodes : public TViewerPipeClient {\n                         (*jsonNode.AddTablets()) = std::move(tablet);\n                     }\n                 }\n-                if (FieldsAvailable.test(+ENodeFields::SendThroughput)) {\n-                    jsonNode.SetSendThroughput(node->SendThroughput);\n-                }\n-                if (FieldsAvailable.test(+ENodeFields::ReceiveThroughput)) {\n-                    jsonNode.SetReceiveThroughput(node->ReceiveThroughput);\n-                }\n-                if (FieldsRequired.test(+ENodeFields::Peers)) {\n+                if (FieldsRequested.test(+ENodeFields::Peers)) {\n                     std::sort(node->Peers.begin(), node->Peers.end(), [](const NKikimrWhiteboard::TNodeStateInfo& a, const NKikimrWhiteboard::TNodeStateInfo& b) {\n                         return a.peernodeid() < b.peernodeid();\n                     });\n@@ -3263,7 +3259,7 @@ class TJsonNodes : public TViewerPipeClient {\n                         (*jsonNode.AddPeers()) = std::move(peer);\n                     }\n                 }\n-                if (FieldsRequired.test(+ENodeFields::ReversePeers)) {\n+                if (FieldsRequested.test(+ENodeFields::ReversePeers)) {\n                     std::sort(node->ReversePeers.begin(), node->ReversePeers.end(), [](const NKikimrWhiteboard::TNodeStateInfo& a, const NKikimrWhiteboard::TNodeStateInfo& b) {\n                         return a.nodeid() < b.nodeid();\n                     });\n@@ -3280,7 +3276,13 @@ class TJsonNodes : public TViewerPipeClient {\n             }\n         }\n         AddEvent(\"RenderingResult\");\n-        TBase::ReplyAndPassAway(GetHTTPOKJSON(json));\n+        TStringStream jsonBody;\n+        Proto2Json(json, jsonBody);\n+        AddEvent(\"ResultRendered\");\n+        if (Span) {\n+            Span.Attribute(\"result_size\", TStringBuilder() << jsonBody.Size());\n+        }\n+        TBase::ReplyAndPassAway(GetHTTPOKJSON(jsonBody.Str()));\n     }\n \n     static YAML::Node GetSwagger() {\n",
  "test_patch": "diff --git a/ydb/core/viewer/tests/canondata/result.json b/ydb/core/viewer/tests/canondata/result.json\nindex a1739d050f32..6a5467975fc2 100644\n--- a/ydb/core/viewer/tests/canondata/result.json\n+++ b/ydb/core/viewer/tests/canondata/result.json\n@@ -148,7 +148,6 @@\n                 ],\n                 \"name\": \"Root/dedicated_db\",\n                 \"owner\": \"user1\",\n-                \"size_bytes\": \"not-zero-number-text\",\n                 \"type\": \"DATABASE\"\n             }\n         },\n@@ -255,7 +254,6 @@\n                 ],\n                 \"name\": \"Root/dedicated_db\",\n                 \"owner\": \"user1\",\n-                \"size_bytes\": \"not-zero-number-text\",\n                 \"type\": \"DATABASE\"\n             }\n         },\n@@ -353,7 +351,6 @@\n                 ],\n                 \"name\": \"Root/dedicated_db\",\n                 \"owner\": \"user1\",\n-                \"size_bytes\": \"not-zero-number-text\",\n                 \"type\": \"DATABASE\"\n             }\n         }\n@@ -895,73 +892,6 @@\n             \"StartOffset\": 0,\n             \"Truncated\": false\n         },\n-        \"response_metadata\": {\n-            \"EndOffset\": 21,\n-            \"Messages\": [\n-                {\n-                    \"Codec\": 1,\n-                    \"CreateTimestamp\": \"not-zero-number\",\n-                    \"Message\": \"bWVzc2FnZV93aXRoX21ldGE=\",\n-                    \"MessageMetadata\": [\n-                        {\n-                            \"Key\": \"key1\",\n-                            \"Value\": \"value1\"\n-                        },\n-                        {\n-                            \"Key\": \"key2\",\n-                            \"Value\": \"value2\"\n-                        }\n-                    ],\n-                    \"Offset\": 10,\n-                    \"OriginalSize\": 17,\n-                    \"ProducerId\": \"not-zero-number-text\",\n-                    \"SeqNo\": 11,\n-                    \"StorageSize\": 37,\n-                    \"TimestampDiff\": \"number\",\n-                    \"WriteTimestamp\": \"not-zero-number\"\n-                }\n-            ],\n-            \"StartOffset\": 0,\n-            \"Truncated\": false\n-        },\n-        \"response_not_truncated\": {\n-            \"EndOffset\": 21,\n-            \"Messages\": [\n-                {\n-                    \"Codec\": 1,\n-                    \"CreateTimestamp\": \"not-zero-number\",\n-                    \"Message\": \"Y29tcHJlc3NlZC1tZXNzYWdlLTk=\",\n-                    \"Offset\": 20,\n-                    \"OriginalSize\": 20,\n-                    \"ProducerId\": \"not-zero-number-text\",\n-                    \"SeqNo\": 21,\n-                    \"StorageSize\": 38,\n-                    \"TimestampDiff\": \"number\",\n-                    \"WriteTimestamp\": \"not-zero-number\"\n-                }\n-            ],\n-            \"StartOffset\": 0,\n-            \"Truncated\": false\n-        },\n-        \"response_truncated\": {\n-            \"EndOffset\": 21,\n-            \"Messages\": [\n-                {\n-                    \"Codec\": 1,\n-                    \"CreateTimestamp\": \"not-zero-number\",\n-                    \"Message\": \"Y29tcHI=\",\n-                    \"Offset\": 20,\n-                    \"OriginalSize\": 20,\n-                    \"ProducerId\": \"not-zero-number-text\",\n-                    \"SeqNo\": 21,\n-                    \"StorageSize\": 38,\n-                    \"TimestampDiff\": \"number\",\n-                    \"WriteTimestamp\": \"not-zero-number\"\n-                }\n-            ],\n-            \"StartOffset\": 0,\n-            \"Truncated\": true\n-        },\n         \"response_last_offset\": {\n             \"EndOffset\": 21,\n             \"Messages\": [\n@@ -1000,16 +930,52 @@\n                     \"StorageSize\": 9,\n                     \"TimestampDiff\": \"number\",\n                     \"WriteTimestamp\": \"not-zero-number\"\n-                },\n+                }\n+            ],\n+            \"StartOffset\": 0,\n+            \"Truncated\": false\n+        },\n+        \"response_metadata\": {\n+            \"EndOffset\": 21,\n+            \"Messages\": [\n                 {\n-                    \"Codec\": 0,\n+                    \"Codec\": 1,\n                     \"CreateTimestamp\": \"not-zero-number\",\n-                    \"Message\": \"bWVzc2FnZS0z\",\n-                    \"Offset\": 3,\n-                    \"OriginalSize\": 9,\n+                    \"Message\": \"bWVzc2FnZV93aXRoX21ldGE=\",\n+                    \"MessageMetadata\": [\n+                        {\n+                            \"Key\": \"key1\",\n+                            \"Value\": \"value1\"\n+                        },\n+                        {\n+                            \"Key\": \"key2\",\n+                            \"Value\": \"value2\"\n+                        }\n+                    ],\n+                    \"Offset\": 10,\n+                    \"OriginalSize\": 17,\n                     \"ProducerId\": \"not-zero-number-text\",\n-                    \"SeqNo\": 4,\n-                    \"StorageSize\": 9,\n+                    \"SeqNo\": 11,\n+                    \"StorageSize\": 37,\n+                    \"TimestampDiff\": \"number\",\n+                    \"WriteTimestamp\": \"not-zero-number\"\n+                }\n+            ],\n+            \"StartOffset\": 0,\n+            \"Truncated\": false\n+        },\n+        \"response_not_truncated\": {\n+            \"EndOffset\": 21,\n+            \"Messages\": [\n+                {\n+                    \"Codec\": 1,\n+                    \"CreateTimestamp\": \"not-zero-number\",\n+                    \"Message\": \"Y29tcHJlc3NlZC1tZXNzYWdlLTk=\",\n+                    \"Offset\": 20,\n+                    \"OriginalSize\": 20,\n+                    \"ProducerId\": \"not-zero-number-text\",\n+                    \"SeqNo\": 21,\n+                    \"StorageSize\": 38,\n                     \"TimestampDiff\": \"number\",\n                     \"WriteTimestamp\": \"not-zero-number\"\n                 }\n@@ -1083,6 +1049,25 @@\n             ],\n             \"StartOffset\": 0,\n             \"Truncated\": false\n+        },\n+        \"response_truncated\": {\n+            \"EndOffset\": 21,\n+            \"Messages\": [\n+                {\n+                    \"Codec\": 1,\n+                    \"CreateTimestamp\": \"not-zero-number\",\n+                    \"Message\": \"Y29tcHI=\",\n+                    \"Offset\": 20,\n+                    \"OriginalSize\": 20,\n+                    \"ProducerId\": \"not-zero-number-text\",\n+                    \"SeqNo\": 21,\n+                    \"StorageSize\": 38,\n+                    \"TimestampDiff\": \"number\",\n+                    \"WriteTimestamp\": \"not-zero-number\"\n+                }\n+            ],\n+            \"StartOffset\": 0,\n+            \"Truncated\": true\n         }\n     },\n     \"test.test_transfer_describe\": {\n@@ -2484,6 +2469,26 @@\n                         \"PathId\": \"not-zero-number-text\",\n                         \"SchemeShard\": \"72057594046678944\"\n                     },\n+                    \"SchemeLimits\": {\n+                        \"ExtraPathSymbolsAllowed\": \"!\\\"#$%&'()*+,-.:;<=>?@[\\\\]^_`{|}~\",\n+                        \"MaxAclBytesSize\": \"10240\",\n+                        \"MaxChildrenInDir\": \"100000\",\n+                        \"MaxColumnTableColumns\": \"10000\",\n+                        \"MaxConsistentCopyTargets\": \"10000\",\n+                        \"MaxDepth\": \"32\",\n+                        \"MaxExports\": \"10\",\n+                        \"MaxImports\": \"10\",\n+                        \"MaxPQPartitions\": \"1000000\",\n+                        \"MaxPathElementLength\": \"255\",\n+                        \"MaxPaths\": \"10000\",\n+                        \"MaxShards\": \"200000\",\n+                        \"MaxShardsInPath\": \"35000\",\n+                        \"MaxTableCdcStreams\": \"5\",\n+                        \"MaxTableColumnNameLength\": \"255\",\n+                        \"MaxTableColumns\": \"200\",\n+                        \"MaxTableIndices\": \"20\",\n+                        \"MaxTableKeyColumns\": \"30\"\n+                    },\n                     \"SchemeShardId_Depricated\": \"72057594046678944\",\n                     \"SecurityState\": {\n                         \"Audience\": \"/Root\",\n@@ -2560,26 +2565,6 @@\n                     },\n                     \"ShardsInside\": \"0\",\n                     \"ShardsLimit\": \"200000\",\n-                    \"SchemeLimits\": {\n-                        \"MaxTableKeyColumns\": \"30\",\n-                        \"MaxTableCdcStreams\": \"5\",\n-                        \"MaxDepth\": \"32\",\n-                        \"MaxColumnTableColumns\": \"10000\",\n-                        \"MaxShardsInPath\": \"35000\",\n-                        \"ExtraPathSymbolsAllowed\": \"!\\\"#$%&'()*+,-.:;<=>?@[\\\\]^_`{|}~\",\n-                        \"MaxTableColumns\": \"200\",\n-                        \"MaxTableIndices\": \"20\",\n-                        \"MaxPathElementLength\": \"255\",\n-                        \"MaxTableColumnNameLength\": \"255\",\n-                        \"MaxImports\": \"10\",\n-                        \"MaxPaths\": \"10000\",\n-                        \"MaxChildrenInDir\": \"100000\",\n-                        \"MaxConsistentCopyTargets\": \"10000\",\n-                        \"MaxAclBytesSize\": \"10240\",\n-                        \"MaxShards\": \"200000\",\n-                        \"MaxExports\": \"10\",\n-                        \"MaxPQPartitions\": \"1000000\"\n-                    },\n                     \"StoragePools\": [\n                         {\n                             \"Kind\": \"hdd\",\n@@ -2685,32 +2670,32 @@\n                         \"PathId\": \"not-zero-number-text\",\n                         \"SchemeShard\": \"72057594046678944\"\n                     },\n-                    \"SchemeShardId_Depricated\": \"72057594046678944\",\n-                    \"SecurityState\": {\n-                        \"Audience\": \"/Root/dedicated_db\"\n-                    },\n-                    \"ShardsInside\": \"11\",\n-                    \"ShardsLimit\": \"200000\",\n                     \"SchemeLimits\": {\n-                        \"MaxTableKeyColumns\": \"30\",\n-                        \"MaxTableCdcStreams\": \"5\",\n-                        \"MaxDepth\": \"32\",\n-                        \"MaxColumnTableColumns\": \"10000\",\n-                        \"MaxShardsInPath\": \"35000\",\n                         \"ExtraPathSymbolsAllowed\": \"!\\\"#$%&'()*+,-.:;<=>?@[\\\\]^_`{|}~\",\n-                        \"MaxTableColumns\": \"200\",\n-                        \"MaxTableIndices\": \"20\",\n-                        \"MaxPathElementLength\": \"255\",\n-                        \"MaxTableColumnNameLength\": \"255\",\n-                        \"MaxImports\": \"10\",\n-                        \"MaxPaths\": \"10000\",\n+                        \"MaxAclBytesSize\": \"10240\",\n                         \"MaxChildrenInDir\": \"100000\",\n+                        \"MaxColumnTableColumns\": \"10000\",\n                         \"MaxConsistentCopyTargets\": \"10000\",\n-                        \"MaxAclBytesSize\": \"10240\",\n-                        \"MaxShards\": \"200000\",\n+                        \"MaxDepth\": \"32\",\n                         \"MaxExports\": \"10\",\n-                        \"MaxPQPartitions\": \"1000000\"\n+                        \"MaxImports\": \"10\",\n+                        \"MaxPQPartitions\": \"1000000\",\n+                        \"MaxPathElementLength\": \"255\",\n+                        \"MaxPaths\": \"10000\",\n+                        \"MaxShards\": \"200000\",\n+                        \"MaxShardsInPath\": \"35000\",\n+                        \"MaxTableCdcStreams\": \"5\",\n+                        \"MaxTableColumnNameLength\": \"255\",\n+                        \"MaxTableColumns\": \"200\",\n+                        \"MaxTableIndices\": \"20\",\n+                        \"MaxTableKeyColumns\": \"30\"\n                     },\n+                    \"SchemeShardId_Depricated\": \"72057594046678944\",\n+                    \"SecurityState\": {\n+                        \"Audience\": \"/Root/dedicated_db\"\n+                    },\n+                    \"ShardsInside\": \"11\",\n+                    \"ShardsLimit\": \"200000\",\n                     \"StoragePools\": [\n                         {\n                             \"Kind\": \"hdd\",\n@@ -2797,6 +2782,26 @@\n                         \"PathId\": \"not-zero-number-text\",\n                         \"SchemeShard\": \"72057594046678944\"\n                     },\n+                    \"SchemeLimits\": {\n+                        \"ExtraPathSymbolsAllowed\": \"!\\\"#$%&'()*+,-.:;<=>?@[\\\\]^_`{|}~\",\n+                        \"MaxAclBytesSize\": \"10240\",\n+                        \"MaxChildrenInDir\": \"100000\",\n+                        \"MaxColumnTableColumns\": \"10000\",\n+                        \"MaxConsistentCopyTargets\": \"10000\",\n+                        \"MaxDepth\": \"32\",\n+                        \"MaxExports\": \"10\",\n+                        \"MaxImports\": \"10\",\n+                        \"MaxPQPartitions\": \"1000000\",\n+                        \"MaxPathElementLength\": \"255\",\n+                        \"MaxPaths\": \"10000\",\n+                        \"MaxShards\": \"200000\",\n+                        \"MaxShardsInPath\": \"35000\",\n+                        \"MaxTableCdcStreams\": \"5\",\n+                        \"MaxTableColumnNameLength\": \"255\",\n+                        \"MaxTableColumns\": \"200\",\n+                        \"MaxTableIndices\": \"20\",\n+                        \"MaxTableKeyColumns\": \"30\"\n+                    },\n                     \"SchemeShardId_Depricated\": \"72057594046678944\",\n                     \"SecurityState\": {\n                         \"Audience\": \"/Root/serverless_db\"\n@@ -2804,26 +2809,6 @@\n                     \"ServerlessComputeResourcesMode\": 1,\n                     \"ShardsInside\": \"7\",\n                     \"ShardsLimit\": \"200000\",\n-                    \"SchemeLimits\": {\n-                        \"MaxTableKeyColumns\": \"30\",\n-                        \"MaxTableCdcStreams\": \"5\",\n-                        \"MaxDepth\": \"32\",\n-                        \"MaxColumnTableColumns\": \"10000\",\n-                        \"MaxShardsInPath\": \"35000\",\n-                        \"ExtraPathSymbolsAllowed\": \"!\\\"#$%&'()*+,-.:;<=>?@[\\\\]^_`{|}~\",\n-                        \"MaxTableColumns\": \"200\",\n-                        \"MaxTableIndices\": \"20\",\n-                        \"MaxPathElementLength\": \"255\",\n-                        \"MaxTableColumnNameLength\": \"255\",\n-                        \"MaxImports\": \"10\",\n-                        \"MaxPaths\": \"10000\",\n-                        \"MaxChildrenInDir\": \"100000\",\n-                        \"MaxConsistentCopyTargets\": \"10000\",\n-                        \"MaxAclBytesSize\": \"10240\",\n-                        \"MaxShards\": \"200000\",\n-                        \"MaxExports\": \"10\",\n-                        \"MaxPQPartitions\": \"1000000\"\n-                    },\n                     \"SharedHive\": \"72075186224038889\",\n                     \"StoragePools\": [\n                         {\n@@ -2929,32 +2914,32 @@\n                         \"PathId\": \"not-zero-number-text\",\n                         \"SchemeShard\": \"72057594046678944\"\n                     },\n-                    \"SchemeShardId_Depricated\": \"72057594046678944\",\n-                    \"SecurityState\": {\n-                        \"Audience\": \"/Root/shared_db\"\n-                    },\n-                    \"ShardsInside\": \"11\",\n-                    \"ShardsLimit\": \"200000\",\n                     \"SchemeLimits\": {\n-                        \"MaxTableKeyColumns\": \"30\",\n-                        \"MaxTableCdcStreams\": \"5\",\n-                        \"MaxDepth\": \"32\",\n-                        \"MaxColumnTableColumns\": \"10000\",\n-                        \"MaxShardsInPath\": \"35000\",\n                         \"ExtraPathSymbolsAllowed\": \"!\\\"#$%&'()*+,-.:;<=>?@[\\\\]^_`{|}~\",\n-                        \"MaxTableColumns\": \"200\",\n-                        \"MaxTableIndices\": \"20\",\n-                        \"MaxPathElementLength\": \"255\",\n-                        \"MaxTableColumnNameLength\": \"255\",\n-                        \"MaxImports\": \"10\",\n-                        \"MaxPaths\": \"10000\",\n+                        \"MaxAclBytesSize\": \"10240\",\n                         \"MaxChildrenInDir\": \"100000\",\n+                        \"MaxColumnTableColumns\": \"10000\",\n                         \"MaxConsistentCopyTargets\": \"10000\",\n-                        \"MaxAclBytesSize\": \"10240\",\n-                        \"MaxShards\": \"200000\",\n+                        \"MaxDepth\": \"32\",\n                         \"MaxExports\": \"10\",\n-                        \"MaxPQPartitions\": \"1000000\"\n+                        \"MaxImports\": \"10\",\n+                        \"MaxPQPartitions\": \"1000000\",\n+                        \"MaxPathElementLength\": \"255\",\n+                        \"MaxPaths\": \"10000\",\n+                        \"MaxShards\": \"200000\",\n+                        \"MaxShardsInPath\": \"35000\",\n+                        \"MaxTableCdcStreams\": \"5\",\n+                        \"MaxTableColumnNameLength\": \"255\",\n+                        \"MaxTableColumns\": \"200\",\n+                        \"MaxTableIndices\": \"20\",\n+                        \"MaxTableKeyColumns\": \"30\"\n+                    },\n+                    \"SchemeShardId_Depricated\": \"72057594046678944\",\n+                    \"SecurityState\": {\n+                        \"Audience\": \"/Root/shared_db\"\n                     },\n+                    \"ShardsInside\": \"11\",\n+                    \"ShardsLimit\": \"200000\",\n                     \"StoragePools\": [\n                         {\n                             \"Kind\": \"hdd\",\n@@ -3026,8 +3011,6 @@\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n-                    \"Database\": \"/Root\",\n                     \"NodeId\": 1,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -3095,8 +3078,7 @@\n                         \"StartTime\": \"not-zero-number-text\",\n                         \"SystemState\": \"Green\",\n                         \"TotalSessions\": \"number\"\n-                    },\n-                    \"UptimeSeconds\": \"number\"\n+                    }\n                 }\n             ],\n             \"TotalNodes\": \"1\"\n@@ -3107,8 +3089,6 @@\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n-                    \"Database\": \"/Root/dedicated_db\",\n                     \"NodeId\": 50000,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -3174,8 +3154,7 @@\n                             \"/Root/dedicated_db\"\n                         ],\n                         \"TotalSessions\": \"number\"\n-                    },\n-                    \"UptimeSeconds\": \"number\"\n+                    }\n                 }\n             ],\n             \"TotalNodes\": \"1\"\n@@ -3186,8 +3165,6 @@\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n-                    \"Database\": \"/Root/shared_db\",\n                     \"NodeId\": 50001,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -3253,8 +3230,7 @@\n                             \"/Root/shared_db\"\n                         ],\n                         \"TotalSessions\": \"number\"\n-                    },\n-                    \"UptimeSeconds\": \"number\"\n+                    }\n                 }\n             ],\n             \"Problems\": [\n@@ -3268,8 +3244,6 @@\n             \"FoundNodes\": \"1\",\n             \"Nodes\": [\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n-                    \"Database\": \"/Root/shared_db\",\n                     \"NodeId\": 50001,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -3335,8 +3309,7 @@\n                             \"/Root/shared_db\"\n                         ],\n                         \"TotalSessions\": \"number\"\n-                    },\n-                    \"UptimeSeconds\": \"number\"\n+                    }\n                 }\n             ],\n             \"TotalNodes\": \"1\"\n@@ -4330,8 +4303,6 @@\n             \"MaximumDisksPerNode\": \"1\",\n             \"Nodes\": [\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n-                    \"DiskSpaceUsage\": \"not-zero-number\",\n                     \"NodeId\": 1,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -4403,8 +4374,6 @@\n                     \"UptimeSeconds\": \"number\"\n                 },\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n-                    \"Database\": \"/Root/shared_db\",\n                     \"NodeId\": 50001,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -4474,8 +4443,6 @@\n                     \"UptimeSeconds\": \"number\"\n                 },\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n-                    \"Database\": \"/Root/dedicated_db\",\n                     \"NodeId\": 50000,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -5256,8 +5223,6 @@\n             \"MaximumSlotsPerDisk\": \"5\",\n             \"Nodes\": [\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n-                    \"Database\": \"/Root\",\n                     \"NodeId\": 1,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -5325,8 +5290,7 @@\n                         \"StartTime\": \"not-zero-number-text\",\n                         \"SystemState\": \"Green\",\n                         \"TotalSessions\": \"number\"\n-                    },\n-                    \"UptimeSeconds\": \"number\"\n+                    }\n                 }\n             ],\n             \"TotalNodes\": \"1\"\n@@ -5338,7 +5302,6 @@\n             \"MaximumSlotsPerDisk\": \"5\",\n             \"Nodes\": [\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n                     \"NodeId\": 1,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -5406,8 +5369,7 @@\n                         \"StartTime\": \"not-zero-number-text\",\n                         \"SystemState\": \"Green\",\n                         \"TotalSessions\": \"number\"\n-                    },\n-                    \"UptimeSeconds\": \"number\"\n+                    }\n                 }\n             ],\n             \"TotalNodes\": \"1\"\n@@ -5419,7 +5381,6 @@\n             \"MaximumSlotsPerDisk\": \"5\",\n             \"Nodes\": [\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n                     \"NodeId\": 1,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -5487,8 +5448,7 @@\n                         \"StartTime\": \"not-zero-number-text\",\n                         \"SystemState\": \"Green\",\n                         \"TotalSessions\": \"number\"\n-                    },\n-                    \"UptimeSeconds\": \"number\"\n+                    }\n                 }\n             ],\n             \"Problems\": [\n@@ -5503,7 +5463,6 @@\n             \"MaximumSlotsPerDisk\": \"5\",\n             \"Nodes\": [\n                 {\n-                    \"CpuUsage\": \"not-zero-number\",\n                     \"NodeId\": 1,\n                     \"SystemState\": {\n                         \"ChangeTime\": \"not-zero-number-text\",\n@@ -5571,8 +5530,7 @@\n                         \"StartTime\": \"not-zero-number-text\",\n                         \"SystemState\": \"Green\",\n                         \"TotalSessions\": \"number\"\n-                    },\n-                    \"UptimeSeconds\": \"number\"\n+                    }\n                 }\n             ],\n             \"TotalNodes\": \"1\"\n",
  "problem_statement": "bad performance of node list with network information\nhttps://monitoring.yandex-team.ru/projects/ydb/traces/30dac895a7302c39833404f3d8ff21ce?span=615491e69ef8e664\n\nhttps://monitoring.yandex-team.ru/projects/ydb/traces/62b43b617bea29a008cba1e7474473e5\n",
  "hints_text": "",
  "created_at": "2025-06-19T08:43:04Z",
  "modified_files": [
    "ydb/core/viewer/json_handlers_storage.cpp",
    "ydb/core/viewer/json_handlers_viewer.cpp",
    "ydb/core/viewer/storage_groups.h",
    "ydb/core/viewer/viewer_nodes.h"
  ],
  "modified_test_files": [
    "ydb/core/viewer/tests/canondata/result.json"
  ]
}