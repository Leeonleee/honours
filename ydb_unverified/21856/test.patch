diff --git a/ydb/core/base/statestorage_proxy.cpp b/ydb/core/base/statestorage_proxy.cpp
index 9c01435c226a..90579cde3c6f 100644
--- a/ydb/core/base/statestorage_proxy.cpp
+++ b/ydb/core/base/statestorage_proxy.cpp
@@ -39,6 +39,7 @@ class TStateStorageProxyRequest : public TActor<TStateStorageProxyRequest> {
     TActorId SuggestedLeader;
     TActorId SuggestedLeaderTablet;
     TActorId Source;
+    ui64 SourceCookie = 0;
 
     ui32 Replicas;
     THolder<TStateStorageInfo::TSelection> ReplicaSelection;
@@ -91,12 +92,12 @@ class TStateStorageProxyRequest : public TActor<TStateStorageProxyRequest> {
             }
         }
         if (NotifyRingGroupProxy)
-            Send(Source, new TEvStateStorage::TEvRingGroupPassAway());
+            Send(Source, new TEvStateStorage::TEvRingGroupPassAway(), 0, SourceCookie);
         TActor::PassAway();
     }
 
     void Reply(NKikimrProto::EReplyStatus status) {
-        Send(Source, new TEvStateStorage::TEvInfo(status, TabletID, Cookie, ReplyLeader, ReplyLeaderTablet, ReplyGeneration, ReplyStep, ReplyLocked, ReplyLockedFor, Signature, Followers));
+        Send(Source, new TEvStateStorage::TEvInfo(status, TabletID, Cookie, ReplyLeader, ReplyLeaderTablet, ReplyGeneration, ReplyStep, ReplyLocked, ReplyLockedFor, Signature, Followers), 0, SourceCookie);
     }
 
     void ReplyAndDie(NKikimrProto::EReplyStatus status) {
@@ -193,7 +194,7 @@ class TStateStorageProxyRequest : public TActor<TStateStorageProxyRequest> {
             (Info->ClusterStateGeneration == clusterStateGeneration && Info->ClusterStateGuid != clusterStateGuid)) {
             BLOG_D("StateStorageProxy TEvNodeWardenNotifyConfigMismatch: Info->ClusterStateGeneration=" << Info->ClusterStateGeneration << " clusterStateGeneration=" << clusterStateGeneration <<" Info->ClusterStateGuid=" << Info->ClusterStateGuid << " clusterStateGuid=" << clusterStateGuid);
             if (NotifyRingGroupProxy) {
-                Send(Source, new TEvStateStorage::TEvConfigVersionInfo(clusterStateGeneration, clusterStateGuid));
+                Send(Source, new TEvStateStorage::TEvConfigVersionInfo(clusterStateGeneration, clusterStateGuid), 0, SourceCookie);
             }
             Send(MakeBlobStorageNodeWardenID(SelfId().NodeId()),
                 new NStorage::TEvNodeWardenNotifyConfigMismatch(sender.NodeId(), clusterStateGeneration, clusterStateGuid));
@@ -285,6 +286,7 @@ class TStateStorageProxyRequest : public TActor<TStateStorageProxyRequest> {
         TEvStateStorage::TEvLookup *msg = ev->Get();
         BLOG_D("ProxyRequest::HandleInit ringGroup:" << RingGroupIndex << " ev: " << msg->ToString());
         Source = ev->Sender;
+        SourceCookie = ev->Cookie;
 
         PrepareInit(msg);
         SendRequest([this](ui64 cookie, TActorId /*replica*/) { return new TEvStateStorage::TEvReplicaLookup(TabletID, cookie, Info->ClusterStateGeneration, Info->ClusterStateGuid); });
@@ -296,6 +298,7 @@ class TStateStorageProxyRequest : public TActor<TStateStorageProxyRequest> {
         TEvStateStorage::TEvUpdate *msg = ev->Get();
         BLOG_D("ProxyRequest::HandleInit ringGroup:" << RingGroupIndex << " ev: " << msg->ToString());
         Source = ev->Sender;
+        SourceCookie = ev->Cookie;
 
         PrepareInit(msg);
 
@@ -313,6 +316,7 @@ class TStateStorageProxyRequest : public TActor<TStateStorageProxyRequest> {
         TEvStateStorage::TEvLock *msg = ev->Get();
         BLOG_D("ProxyRequest::HandleInit ringGroup:" << RingGroupIndex << " ev: " << msg->ToString());
         Source = ev->Sender;
+        SourceCookie = ev->Cookie;
 
         PrepareInit(msg);
 
@@ -496,7 +500,7 @@ class TStateStorageProxyRequest : public TActor<TStateStorageProxyRequest> {
             ++SignaturesMerged;
 
             if (RepliesMerged + RepliesAfterReply == Replicas) {
-                Send(Source, new TEvStateStorage::TEvUpdateSignature(TabletID, Signature));
+                Send(Source, new TEvStateStorage::TEvUpdateSignature(TabletID, Signature), 0, SourceCookie);
                 return PassAway();
             }
         }
@@ -514,7 +518,7 @@ class TStateStorageProxyRequest : public TActor<TStateStorageProxyRequest> {
         MergeSigNodeError(node);
 
         if (RepliesMerged + RepliesAfterReply == Replicas) {
-            Send(Source, new TEvStateStorage::TEvUpdateSignature(TabletID, Signature));
+            Send(Source, new TEvStateStorage::TEvUpdateSignature(TabletID, Signature), 0, SourceCookie);
             return PassAway();
         }
     }
@@ -543,7 +547,7 @@ class TStateStorageProxyRequest : public TActor<TStateStorageProxyRequest> {
     void HandleUpdateSigTimeout() {
         BLOG_D("ProxyRequest::HandleUpdateSigTimeout ringGroup:" << RingGroupIndex << " RepliesAfterReply# " << (ui32)RepliesAfterReply);
         if (RepliesAfterReply > 0)
-            Send(Source, new TEvStateStorage::TEvUpdateSignature(TabletID, Signature));
+            Send(Source, new TEvStateStorage::TEvUpdateSignature(TabletID, Signature), 0, SourceCookie);
         PassAway();
     }
 
@@ -646,6 +650,7 @@ class TStateStorageRingGroupProxyRequest : public TActorBootstrapped<TStateStora
     THashMap<ui32, TActorId> RingGroupActorsByIndex;
 
     TActorId Source;
+    ui64 SourceCookie = 0;
     THashSet<TActorId> Replies;
     ui32 RingGroupPassAwayCounter;
     bool WaitAllReplies;
@@ -666,6 +671,7 @@ class TStateStorageRingGroupProxyRequest : public TActorBootstrapped<TStateStora
     void HandleInit(TEvStateStorage::TEvLookup::TPtr &ev) {
         TEvStateStorage::TEvLookup *msg = ev->Get();
         Source = ev->Sender;
+        SourceCookie = ev->Cookie;
         WaitAllReplies = msg->ProxyOptions.SigWaitMode != msg->ProxyOptions.SigNone;
         BLOG_D("RingGroupProxyRequest::HandleInit ev: " << msg->ToString());
         for (ui32 ringGroupIndex = 0; ringGroupIndex < Info->RingGroups.size(); ++ringGroupIndex) {
@@ -685,6 +691,7 @@ class TStateStorageRingGroupProxyRequest : public TActorBootstrapped<TStateStora
     void HandleInit(T::TPtr &ev) {
         T *msg = ev->Get();
         Source = ev->Sender;
+        SourceCookie = ev->Cookie;
         WaitAllReplies = true;
         BLOG_D("RingGroupProxyRequest::HandleInit ev: " << msg->ToString());
         for (ui32 ringGroupIndex = 0; ringGroupIndex < Info->RingGroups.size(); ++ringGroupIndex) {
@@ -720,7 +727,7 @@ class TStateStorageRingGroupProxyRequest : public TActorBootstrapped<TStateStora
     void Reply(NKikimrProto::EReplyStatus status) {
         auto* msg = new TEvStateStorage::TEvInfo(status, TabletID, Cookie, CurrentLeader, CurrentLeaderTablet, CurrentGeneration, CurrentStep, Locked, LockedFor, Signature, Followers);
         BLOG_D("RingGroupProxyRequest::Reply ev: " << msg->ToString());
-        Send(Source, msg);
+        Send(Source, msg, 0, SourceCookie);
     }
 
     bool ShouldReply() {
@@ -750,7 +757,7 @@ class TStateStorageRingGroupProxyRequest : public TActorBootstrapped<TStateStora
     void HandleResult(TEvStateStorage::TEvUpdateSignature::TPtr &ev) {
         TEvStateStorage::TEvUpdateSignature *msg = ev->Get();
         Signature.Merge(msg->Signature);
-        Send(Source, new TEvStateStorage::TEvUpdateSignature(msg->TabletID, Signature));
+        Send(Source, new TEvStateStorage::TEvUpdateSignature(msg->TabletID, Signature), 0, SourceCookie);
     }
 
     void HandleConfigVersion(TEvStateStorage::TEvConfigVersionInfo::TPtr &ev) {
@@ -806,6 +813,7 @@ class TStateStorageRingGroupProxyRequest : public TActorBootstrapped<TStateStora
 class TStateStorageDumpRequest : public TActorBootstrapped<TStateStorageDumpRequest> {
 protected:
     const TActorId Sender;
+    const ui64 Cookie;
     TIntrusivePtr<TStateStorageInfo> Info;
     TList<TActorId> AllReplicas;
     TAutoPtr<TEvStateStorage::TEvResponseReplicasDumps> Response;
@@ -816,14 +824,15 @@ class TStateStorageDumpRequest : public TActorBootstrapped<TStateStorageDumpRequ
         return NKikimrServices::TActivity::TABLET_FORWARDING_ACTOR;
     }
 
-    TStateStorageDumpRequest(const TActorId &sender, const TIntrusivePtr<TStateStorageInfo> &info)
+    TStateStorageDumpRequest(const TActorId &sender, ui64 cookie, const TIntrusivePtr<TStateStorageInfo> &info)
         : Sender(sender)
+        , Cookie(cookie)
         , Info(info)
         , UndeliveredCount(0)
     {}
 
     void SendResponse() {
-        Send(Sender, Response.Release());
+        Send(Sender, Response.Release(), 0, Cookie);
         PassAway();
     }
 
@@ -873,6 +882,7 @@ class TStateStorageDumpRequest : public TActorBootstrapped<TStateStorageDumpRequ
 class TStateStorageDeleteRequest : public TActorBootstrapped<TStateStorageDeleteRequest> {
 protected:
     const TActorId Sender;
+    const ui64 Cookie;
     TIntrusivePtr<TStateStorageInfo> Info;
     TList<TActorId> AllReplicas;
     ui32 Count;
@@ -884,8 +894,9 @@ class TStateStorageDeleteRequest : public TActorBootstrapped<TStateStorageDelete
         return NKikimrServices::TActivity::TABLET_FORWARDING_ACTOR;
     }
 
-    TStateStorageDeleteRequest(const TActorId &sender, const TIntrusivePtr<TStateStorageInfo> &info, ui64 tabletId)
+    TStateStorageDeleteRequest(const TActorId &sender, ui64 cookie, const TIntrusivePtr<TStateStorageInfo> &info, ui64 tabletId)
         : Sender(sender)
+        , Cookie(cookie)
         , Info(info)
         , Count(0)
         , UndeliveredCount(0)
@@ -893,7 +904,7 @@ class TStateStorageDeleteRequest : public TActorBootstrapped<TStateStorageDelete
     {}
 
     void SendResponse() {
-        Send(Sender, new TEvStateStorage::TEvDeleteResult(TabletID, Count > AllReplicas.size() / 2 ? NKikimrProto::OK : NKikimrProto::ERROR));
+        Send(Sender, new TEvStateStorage::TEvDeleteResult(TabletID, Count > AllReplicas.size() / 2 ? NKikimrProto::OK : NKikimrProto::ERROR), 0, Cookie);
         PassAway();
     }
 
@@ -957,11 +968,11 @@ class TStateStorageProxy : public TActor<TStateStorageProxy> {
     THashSet<std::tuple<TActorId, ui64>> SchemeBoardSubscriptions;
 
     void Handle(TEvStateStorage::TEvRequestReplicasDumps::TPtr &ev) {
-        TActivationContext::Register(new TStateStorageDumpRequest(ev->Sender, Info));
+        TActivationContext::Register(new TStateStorageDumpRequest(ev->Sender, ev->Cookie, Info));
     }
 
     void Handle(TEvStateStorage::TEvDelete::TPtr &ev) {
-        TActivationContext::Register(new TStateStorageDeleteRequest(ev->Sender, Info, ev->Get()->TabletID));
+        TActivationContext::Register(new TStateStorageDeleteRequest(ev->Sender, ev->Cookie, Info, ev->Get()->TabletID));
     }
 
     void SpreadCleanupRequest(const TStateStorageInfo::TSelection &selection, ui64 tabletId, TActorId proposedLeader) {
diff --git a/ydb/core/testlib/actors/test_runtime.cpp b/ydb/core/testlib/actors/test_runtime.cpp
index 30ebf1ceb3b3..e52f92f2f15d 100644
--- a/ydb/core/testlib/actors/test_runtime.cpp
+++ b/ydb/core/testlib/actors/test_runtime.cpp
@@ -243,7 +243,8 @@ namespace NActors {
                 MonPorts.push_back(port);
             }
 
-            node->ActorSystem->Start();
+            StartActorSystem(nodeIndex, node);
+
             if (nodeAppData->Mon) {
                 nodeAppData->Mon->Start(node->ActorSystem.Get());
             }
diff --git a/ydb/core/testlib/basics/services.cpp b/ydb/core/testlib/basics/services.cpp
index f0a16ca8bde0..f0b17579a00f 100644
--- a/ydb/core/testlib/basics/services.cpp
+++ b/ydb/core/testlib/basics/services.cpp
@@ -86,6 +86,9 @@ namespace NPDisk {
         IActor* tabletResolver = CreateTabletResolver(tabletResolverConfig);
         runtime.AddLocalService(MakeTabletResolverID(),
             TActorSetupCmd(tabletResolver, TMailboxType::Revolving, 0), nodeIndex);
+
+        // TabletResolver needs timers for retries
+        runtime.EnableScheduleForActor(MakeTabletResolverID());
     }
 
     void SetupTabletPipePerNodeCaches(TTestActorRuntime& runtime, ui32 nodeIndex, bool forceFollowers)
diff --git a/ydb/library/actors/testlib/test_runtime.cpp b/ydb/library/actors/testlib/test_runtime.cpp
index 951b35910a28..290f65b30e36 100644
--- a/ydb/library/actors/testlib/test_runtime.cpp
+++ b/ydb/library/actors/testlib/test_runtime.cpp
@@ -557,7 +557,7 @@ namespace NActors {
             node->ActorSystem = MakeActorSystem(nodeIndex, node);
         }
 
-        node->ActorSystem->Start();
+        StartActorSystem(nodeIndex, node);
     }
 
     bool TTestActorRuntimeBase::AllowSendFrom(TNodeDataBase* node, TAutoPtr<IEventHandle>& ev) {
@@ -1606,12 +1606,12 @@ namespace NActors {
         TGuard<TMutex> guard(Mutex);
         if (allow) {
             if (VERBOSE) {
-                Cerr << "Actor " << actorId << " added to schedule whitelist";
+                Cerr << "Actor " << actorId << " added to schedule whitelist
";
             }
             ScheduleWhiteList.insert(actorId);
         } else {
             if (VERBOSE) {
-                Cerr << "Actor " << actorId << " removed from schedule whitelist";
+                Cerr << "Actor " << actorId << " removed from schedule whitelist
";
             }
             ScheduleWhiteList.erase(actorId);
         }
@@ -1842,6 +1842,27 @@ namespace NActors {
         return actorSystem;
     }
 
+    void TTestActorRuntimeBase::StartActorSystem(ui32 nodeIndex, TNodeDataBase* node) {
+        Y_UNUSED(nodeIndex);
+
+        node->ActorSystem->Start();
+
+        if (!UseRealThreads) {
+            for (const auto& cmd : node->LocalServices) {
+                auto it = ScheduleWhiteList.find(cmd.first);
+                if (it != ScheduleWhiteList.end()) {
+                    if (TActorId actorId = node->ActorSystem->LookupLocalService(cmd.first)) {
+                        if (VERBOSE) {
+                            Cerr << "Service " << cmd.first << " actor " << actorId << " added to schedule whitelist
";
+                        }
+                        ScheduleWhiteList.insert(actorId);
+                        ScheduleWhiteListParent[actorId] = cmd.first;
+                    }
+                }
+            }
+        }
+    }
+
     TActorSystem* TTestActorRuntimeBase::SingleSys() const {
         Y_ABORT_UNLESS(Nodes.size() == 1, "Works only for single system env");
 
diff --git a/ydb/library/actors/testlib/test_runtime.h b/ydb/library/actors/testlib/test_runtime.h
index 1c2ce82138cc..c6f1c5f602ce 100644
--- a/ydb/library/actors/testlib/test_runtime.h
+++ b/ydb/library/actors/testlib/test_runtime.h
@@ -679,6 +679,7 @@ namespace NActors {
 
         THolder<TActorSystemSetup> MakeActorSystemSetup(ui32 nodeIndex, TNodeDataBase* node);
         THolder<TActorSystem> MakeActorSystem(ui32 nodeIndex, TNodeDataBase* node);
+        void StartActorSystem(ui32 nodeIndex, TNodeDataBase* node);
         virtual void InitActorSystemSetup(TActorSystemSetup& setup, TNodeDataBase* node) {
             Y_UNUSED(setup, node);
         }
