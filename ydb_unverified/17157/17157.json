{
  "repo": "ydb-platform/ydb",
  "pull_number": 17157,
  "instance_id": "ydb-platform__ydb-17157",
  "issue_numbers": [
    "17103"
  ],
  "base_commit": "8537f07e78cebe3cde69da052e72d20b5782ca00",
  "patch": "diff --git a/ydb/core/mind/hive/hive_impl.cpp b/ydb/core/mind/hive/hive_impl.cpp\nindex e7e98b6e2699..ad4ebe60464e 100644\n--- a/ydb/core/mind/hive/hive_impl.cpp\n+++ b/ydb/core/mind/hive/hive_impl.cpp\n@@ -2076,9 +2076,18 @@ void THive::Handle(TEvHive::TEvRequestHiveNodeStats::TPtr& ev) {\n                     }\n                 }\n             } else {\n+                std::optional<TSubDomainKey> filterObjectDomain;\n+                if (request.HasFilterTabletsByObjectDomain()) {\n+                    filterObjectDomain = TSubDomainKey(request.GetFilterTabletsByObjectDomain());\n+                }\n                 for (const auto& [state, set] : node.Tablets) {\n                     std::vector<ui32> tabletTypeToCount;\n                     for (const TTabletInfo* tablet : set) {\n+                        if (filterObjectDomain) {\n+                            if (tablet->NodeFilter.ObjectDomain != *filterObjectDomain) {\n+                                continue;\n+                            }\n+                        }\n                         TTabletTypes::EType type = tablet->GetTabletType();\n                         if (static_cast<size_t>(type) >= tabletTypeToCount.size()) {\n                             tabletTypeToCount.resize(type + 1);\n@@ -3546,7 +3555,7 @@ void THive::Handle(TEvPrivate::TEvUpdateFollowers::TPtr&) {\n \n void THive::MakeScaleRecommendation() {\n     BLOG_D(\"[MSR] Started\");\n-    \n+\n     if (AreWeRootHive()) {\n         return;\n     }\ndiff --git a/ydb/core/protos/hive.proto b/ydb/core/protos/hive.proto\nindex f168bb404742..7bb49b9ac13c 100644\n--- a/ydb/core/protos/hive.proto\n+++ b/ydb/core/protos/hive.proto\n@@ -323,6 +323,7 @@ message TEvRequestHiveNodeStats {\n     // The next 2 fields should always be used together\n     optional uint64 FilterTabletsByPathId = 7;\n     optional uint64 FilterTabletsBySchemeShardId = 8;\n+    optional NKikimrSubDomains.TDomainKey FilterTabletsByObjectDomain = 9;\n }\n \n message THiveNodeStats {\n@@ -616,7 +617,7 @@ message TScaleRecommenderPolicies {\n     message TScaleRecommenderPolicy {\n         message TTargetTrackingPolicy {\n             oneof Target {\n-                uint32 AverageCpuUtilizationPercent = 1; \n+                uint32 AverageCpuUtilizationPercent = 1;\n             }\n         }\n \ndiff --git a/ydb/core/viewer/json_pipe_req.cpp b/ydb/core/viewer/json_pipe_req.cpp\nindex cbea3eea89b9..4c4d0a27835a 100644\n--- a/ydb/core/viewer/json_pipe_req.cpp\n+++ b/ydb/core/viewer/json_pipe_req.cpp\n@@ -451,8 +451,16 @@ TViewerPipeClient::TRequestResponse<TEvHive::TEvResponseHiveNodeStats> TViewerPi\n     TActorId pipeClient = ConnectTabletPipe(hiveId);\n     auto response = MakeRequestToPipe<TEvHive::TEvResponseHiveNodeStats>(pipeClient, request, hiveId);\n     if (response.Span) {\n-        auto hive_id = \"#\" + ::ToString(hiveId);\n-        response.Span.Attribute(\"hive_id\", hive_id);\n+        response.Span.Attribute(\"hive_id\", TStringBuilder() << '#' << hiveId);\n+        if (request->Record.GetFilterTabletsBySchemeShardId()) {\n+            response.Span.Attribute(\"schemeshard_id\", TStringBuilder() << '#' << request->Record.GetFilterTabletsBySchemeShardId());\n+        }\n+        if (request->Record.GetFilterTabletsByPathId()) {\n+            response.Span.Attribute(\"path_id\", TStringBuilder() << '#' << request->Record.GetFilterTabletsByPathId());\n+        }\n+        if (request->Record.HasFilterTabletsByObjectDomain()) {\n+            response.Span.Attribute(\"object_domain\", TStringBuilder() << TSubDomainKey(request->Record.GetFilterTabletsByObjectDomain()));\n+        }\n     }\n     return response;\n }\n@@ -737,6 +745,7 @@ THolder<NSchemeCache::TSchemeCacheNavigate> TViewerPipeClient::SchemeCacheNaviga\n ) {\n     THolder<NSchemeCache::TSchemeCacheNavigate> request = MakeHolder<NSchemeCache::TSchemeCacheNavigate>();\n     entry.RedirectRequired = false;\n+    entry.ShowPrivatePath = true;\n     entry.Operation = NSchemeCache::TSchemeCacheNavigate::EOp::OpPath;\n     request->ResultSet.emplace_back(std::move(entry));\n     return request;\n@@ -763,6 +772,7 @@ TViewerPipeClient::TRequestResponse<TEvTxProxySchemeCache::TEvNavigateKeySetResu\n     NSchemeCache::TSchemeCacheNavigate::TEntry entry;\n     entry.Path = SplitPath(path);\n     entry.RedirectRequired = false;\n+    entry.ShowPrivatePath = true;\n     entry.Operation = NSchemeCache::TSchemeCacheNavigate::EOp::OpPath;\n     request->ResultSet.emplace_back(entry);\n     auto response = MakeRequest<TEvTxProxySchemeCache::TEvNavigateKeySetResult>(MakeSchemeCacheID(), new TEvTxProxySchemeCache::TEvNavigateKeySet(request.Release()), 0 /*flags*/, cookie);\n@@ -778,6 +788,7 @@ TViewerPipeClient::TRequestResponse<TEvTxProxySchemeCache::TEvNavigateKeySetResu\n     entry.TableId.PathId = pathId;\n     entry.RequestType = NSchemeCache::TSchemeCacheNavigate::TEntry::ERequestType::ByTableId;\n     entry.RedirectRequired = false;\n+    entry.ShowPrivatePath = true;\n     entry.Operation = NSchemeCache::TSchemeCacheNavigate::EOp::OpPath;\n     request->ResultSet.emplace_back(entry);\n     auto response = MakeRequest<TEvTxProxySchemeCache::TEvNavigateKeySetResult>(MakeSchemeCacheID(), new TEvTxProxySchemeCache::TEvNavigateKeySet(request.Release()), 0 /*flags*/, cookie);\n@@ -822,9 +833,10 @@ TViewerPipeClient::TRequestResponse<TEvTxProxySchemeCache::TEvNavigateKeySetResu\n     return response;\n }\n \n-void TViewerPipeClient::RequestTxProxyDescribe(const TString& path) {\n+void TViewerPipeClient::RequestTxProxyDescribe(const TString& path, const NKikimrSchemeOp::TDescribeOptions& options) {\n     THolder<TEvTxUserProxy::TEvNavigate> request(new TEvTxUserProxy::TEvNavigate());\n     request->Record.MutableDescribePath()->SetPath(path);\n+    request->Record.MutableDescribePath()->MutableOptions()->CopyFrom(options);\n     if (Event && !Event->Get()->UserToken.empty()) {\n         request->Record.SetUserToken(Event->Get()->UserToken);\n     }\ndiff --git a/ydb/core/viewer/json_pipe_req.h b/ydb/core/viewer/json_pipe_req.h\nindex 5e185a27f226..bf475ae549fa 100644\n--- a/ydb/core/viewer/json_pipe_req.h\n+++ b/ydb/core/viewer/json_pipe_req.h\n@@ -318,7 +318,7 @@ class TViewerPipeClient : public TActorBootstrapped<TViewerPipeClient> {\n         const TString& path, bool showPrivate, ui32 access, ui64 cookie = 0);\n \n     TRequestResponse<TEvViewer::TEvViewerResponse> MakeRequestViewer(TNodeId nodeId, TEvViewer::TEvViewerRequest* request, ui32 flags = 0);\n-    void RequestTxProxyDescribe(const TString& path);\n+    void RequestTxProxyDescribe(const TString& path, const NKikimrSchemeOp::TDescribeOptions& options = {});\n     void RequestStateStorageEndpointsLookup(const TString& path);\n     void RequestStateStorageMetadataCacheEndpointsLookup(const TString& path);\n     TRequestResponse<TEvStateStorage::TEvBoardInfo> MakeRequestStateStorageEndpointsLookup(const TString& path, ui64 cookie = 0);\ndiff --git a/ydb/core/viewer/viewer_nodes.h b/ydb/core/viewer/viewer_nodes.h\nindex 9cfa1943835a..ffc21f9939ef 100644\n--- a/ydb/core/viewer/viewer_nodes.h\n+++ b/ydb/core/viewer/viewer_nodes.h\n@@ -1892,6 +1892,10 @@ class TJsonNodes : public TViewerPipeClient {\n                                 HivesToAsk.push_back(entry.DomainInfo->Params.GetHive());\n                             }\n                         }\n+                    } else {\n+                        FilterPathId = TPathId(InvalidOwnerId - 1, InvalidLocalPathId - 1); // invalid path id for sys view tables\n+                        AskHiveAboutPaths = true;\n+                        HivesToAsk.push_back(AppData()->DomainsInfo->GetHive());\n                     }\n                 }\n             } else {\n@@ -1958,6 +1962,8 @@ class TJsonNodes : public TViewerPipeClient {\n                 if (AskHiveAboutPaths) {\n                     request->Record.SetFilterTabletsBySchemeShardId(FilterPathId.OwnerId);\n                     request->Record.SetFilterTabletsByPathId(FilterPathId.LocalPathId);\n+                } else if (FilterSubDomainKey) {\n+                    request->Record.MutableFilterTabletsByObjectDomain()->CopyFrom(SubDomainKey);\n                 }\n                 HiveNodeStats.emplace(hiveId, MakeRequestHiveNodeStats(hiveId, request.release()));\n             }\n@@ -1980,8 +1986,8 @@ class TJsonNodes : public TViewerPipeClient {\n                                         viewerTablet.SetType(NKikimrTabletBase::TTabletTypes::EType_Name(stateStats.GetTabletType()));\n                                         viewerTablet.SetCount(stateStats.GetCount());\n                                         viewerTablet.SetState(GetFlagFromTabletState(stateStats.GetVolatileState()));\n-                                        FieldsAvailable.set(+ENodeFields::Tablets);\n                                     }\n+                                    FieldsAvailable.set(+ENodeFields::Tablets);\n                                 }\n                                 if (nodeStats.HasLastAliveTimestamp()) {\n                                     node->SystemState.SetDisconnectTime(std::max(node->SystemState.GetDisconnectTime(), nodeStats.GetLastAliveTimestamp())); // milliseconds\n@@ -2148,6 +2154,9 @@ class TJsonNodes : public TViewerPipeClient {\n             request->AddFieldsRequired(-1);\n         }\n         request->SetGroupBy(\"Type,State\");\n+        if (FilterSubDomainKey) {\n+            request->MutableFilterTenantId()->CopyFrom(SubDomainKey);\n+        }\n     }\n \n     template<>\ndiff --git a/ydb/core/viewer/viewer_tabletinfo.h b/ydb/core/viewer/viewer_tabletinfo.h\nindex 144eca317003..80fc3e6688e4 100644\n--- a/ydb/core/viewer/viewer_tabletinfo.h\n+++ b/ydb/core/viewer/viewer_tabletinfo.h\n@@ -123,7 +123,11 @@ class TJsonTabletInfo : public TJsonWhiteboardRequest<TEvWhiteboard::TEvTabletSt\n         if (params.Has(\"path\")) {\n             TBase::RequestSettings.Timeout = FromStringWithDefault<ui32>(params.Get(\"timeout\"), 10000);\n             IsBase64Encode = FromStringWithDefault<bool>(params.Get(\"base64\"), IsBase64Encode);\n-            RequestTxProxyDescribe(params.Get(\"path\"));\n+            NKikimrSchemeOp::TDescribeOptions options;\n+            options.SetReturnBoundaries(true);\n+            options.SetReturnIndexTableBoundaries(true);\n+            options.SetShowPrivateTable(true);\n+            RequestTxProxyDescribe(params.Get(\"path\"), options);\n             Become(&TThis::StateRequestedDescribe, TDuration::MilliSeconds(TBase::RequestSettings.Timeout), new TEvents::TEvWakeup());\n         } else {\n             TBase::Bootstrap();\n",
  "test_patch": "diff --git a/ydb/core/viewer/tests/canondata/result.json b/ydb/core/viewer/tests/canondata/result.json\nindex 786307c64105..6fbf17c7347b 100644\n--- a/ydb/core/viewer/tests/canondata/result.json\n+++ b/ydb/core/viewer/tests/canondata/result.json\n@@ -3276,34 +3276,24 @@\n                         \"TotalSessions\": \"number\"\n                     },\n                     \"Tablets\": [\n-                        {\n-                            \"Count\": 4,\n-                            \"State\": \"Green\",\n-                            \"Type\": \"Coordinator\"\n-                        },\n                         {\n                             \"Count\": 1,\n                             \"State\": \"Green\",\n-                            \"Type\": \"Hive\"\n+                            \"Type\": \"Coordinator\"\n                         },\n                         {\n-                            \"Count\": 6,\n+                            \"Count\": 3,\n                             \"State\": \"Green\",\n                             \"Type\": \"Mediator\"\n                         },\n                         {\n-                            \"Count\": 2,\n+                            \"Count\": 1,\n                             \"State\": \"Green\",\n                             \"Type\": \"SchemeShard\"\n                         },\n                         {\n                             \"Count\": 1,\n                             \"State\": \"Green\",\n-                            \"Type\": \"StatisticsAggregator\"\n-                        },\n-                        {\n-                            \"Count\": 2,\n-                            \"State\": \"Green\",\n                             \"Type\": \"SysViewProcessor\"\n                         }\n                     ],\n@@ -3478,7 +3468,7 @@\n                     },\n                     \"Tablets\": [\n                         {\n-                            \"Count\": 4,\n+                            \"Count\": 3,\n                             \"State\": \"Green\",\n                             \"Type\": \"Coordinator\"\n                         },\n@@ -3488,12 +3478,12 @@\n                             \"Type\": \"Hive\"\n                         },\n                         {\n-                            \"Count\": 6,\n+                            \"Count\": 3,\n                             \"State\": \"Green\",\n                             \"Type\": \"Mediator\"\n                         },\n                         {\n-                            \"Count\": 2,\n+                            \"Count\": 1,\n                             \"State\": \"Green\",\n                             \"Type\": \"SchemeShard\"\n                         },\n@@ -3503,7 +3493,7 @@\n                             \"Type\": \"StatisticsAggregator\"\n                         },\n                         {\n-                            \"Count\": 2,\n+                            \"Count\": 1,\n                             \"State\": \"Green\",\n                             \"Type\": \"SysViewProcessor\"\n                         }\n",
  "problem_statement": "no tablets are shown on index table\n\n",
  "hints_text": "",
  "created_at": "2025-04-14T06:53:21Z",
  "modified_files": [
    "ydb/core/mind/hive/hive_impl.cpp",
    "ydb/core/protos/hive.proto",
    "ydb/core/viewer/json_pipe_req.cpp",
    "ydb/core/viewer/json_pipe_req.h",
    "ydb/core/viewer/viewer_nodes.h",
    "ydb/core/viewer/viewer_tabletinfo.h"
  ],
  "modified_test_files": [
    "ydb/core/viewer/tests/canondata/result.json"
  ]
}