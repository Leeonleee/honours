diff --git a/library/cpp/monlib/encode/prometheus/prometheus_encoder.cpp b/library/cpp/monlib/encode/prometheus/prometheus_encoder.cpp
index f3015c48bc29..8083221b63d0 100644
--- a/library/cpp/monlib/encode/prometheus/prometheus_encoder.cpp
+++ b/library/cpp/monlib/encode/prometheus/prometheus_encoder.cpp
@@ -370,9 +370,9 @@ namespace NMonitoring {
                 }
 
                 TMaybe<TLabel> nameLabel = MetricState_.Labels.Extract(MetricNameLabel_);
-                Y_ENSURE(nameLabel,
-                         "labels " << MetricState_.Labels <<
-                         " does not contain label '" << MetricNameLabel_ << '\'');
+                if (!nameLabel) {
+                    return;
+                }
 
                 const TString& metricName = ToString(nameLabel->Value());
                 if (MetricState_.Type != EMetricType::DSUMMARY) {
diff --git a/ydb/apps/CMakeLists.txt b/ydb/apps/CMakeLists.txt
index e1c6d2181e21..08df7dd2187e 100644
--- a/ydb/apps/CMakeLists.txt
+++ b/ydb/apps/CMakeLists.txt
@@ -7,5 +7,6 @@
 
 
 add_subdirectory(pgwire)
+add_subdirectory(version)
 add_subdirectory(ydb)
 add_subdirectory(ydbd)
diff --git a/ydb/apps/version/CMakeLists.darwin-arm64.txt b/ydb/apps/version/CMakeLists.darwin-arm64.txt
new file mode 100644
index 000000000000..ce969ee15772
--- /dev/null
+++ b/ydb/apps/version/CMakeLists.darwin-arm64.txt
@@ -0,0 +1,18 @@
+
+# This file was generated by the build system used internally in the Yandex monorepo.
+# Only simple modifications are allowed (adding source-files to targets, adding simple properties
+# like target_include_directories). These modifications will be ported to original
+# ya.make files by maintainers. Any complex modifications which can't be ported back to the
+# original buildsystem will not be accepted.
+
+
+
+add_library(version_definition)
+target_link_libraries(version_definition PUBLIC
+  contrib-libs-cxxsupp
+  yutil
+  version
+)
+target_sources(version_definition PRIVATE
+  ${CMAKE_SOURCE_DIR}/ydb/apps/version/version_definition.cpp
+)
diff --git a/ydb/apps/version/CMakeLists.darwin-x86_64.txt b/ydb/apps/version/CMakeLists.darwin-x86_64.txt
new file mode 100644
index 000000000000..ce969ee15772
--- /dev/null
+++ b/ydb/apps/version/CMakeLists.darwin-x86_64.txt
@@ -0,0 +1,18 @@
+
+# This file was generated by the build system used internally in the Yandex monorepo.
+# Only simple modifications are allowed (adding source-files to targets, adding simple properties
+# like target_include_directories). These modifications will be ported to original
+# ya.make files by maintainers. Any complex modifications which can't be ported back to the
+# original buildsystem will not be accepted.
+
+
+
+add_library(version_definition)
+target_link_libraries(version_definition PUBLIC
+  contrib-libs-cxxsupp
+  yutil
+  version
+)
+target_sources(version_definition PRIVATE
+  ${CMAKE_SOURCE_DIR}/ydb/apps/version/version_definition.cpp
+)
diff --git a/ydb/apps/version/CMakeLists.linux-aarch64.txt b/ydb/apps/version/CMakeLists.linux-aarch64.txt
new file mode 100644
index 000000000000..bca854e1db0f
--- /dev/null
+++ b/ydb/apps/version/CMakeLists.linux-aarch64.txt
@@ -0,0 +1,19 @@
+
+# This file was generated by the build system used internally in the Yandex monorepo.
+# Only simple modifications are allowed (adding source-files to targets, adding simple properties
+# like target_include_directories). These modifications will be ported to original
+# ya.make files by maintainers. Any complex modifications which can't be ported back to the
+# original buildsystem will not be accepted.
+
+
+
+add_library(version_definition)
+target_link_libraries(version_definition PUBLIC
+  contrib-libs-linux-headers
+  contrib-libs-cxxsupp
+  yutil
+  version
+)
+target_sources(version_definition PRIVATE
+  ${CMAKE_SOURCE_DIR}/ydb/apps/version/version_definition.cpp
+)
diff --git a/ydb/apps/version/CMakeLists.linux-x86_64.txt b/ydb/apps/version/CMakeLists.linux-x86_64.txt
new file mode 100644
index 000000000000..bca854e1db0f
--- /dev/null
+++ b/ydb/apps/version/CMakeLists.linux-x86_64.txt
@@ -0,0 +1,19 @@
+
+# This file was generated by the build system used internally in the Yandex monorepo.
+# Only simple modifications are allowed (adding source-files to targets, adding simple properties
+# like target_include_directories). These modifications will be ported to original
+# ya.make files by maintainers. Any complex modifications which can't be ported back to the
+# original buildsystem will not be accepted.
+
+
+
+add_library(version_definition)
+target_link_libraries(version_definition PUBLIC
+  contrib-libs-linux-headers
+  contrib-libs-cxxsupp
+  yutil
+  version
+)
+target_sources(version_definition PRIVATE
+  ${CMAKE_SOURCE_DIR}/ydb/apps/version/version_definition.cpp
+)
diff --git a/ydb/apps/version/CMakeLists.txt b/ydb/apps/version/CMakeLists.txt
new file mode 100644
index 000000000000..d863ebd18067
--- /dev/null
+++ b/ydb/apps/version/CMakeLists.txt
@@ -0,0 +1,19 @@
+
+# This file was generated by the build system used internally in the Yandex monorepo.
+# Only simple modifications are allowed (adding source-files to targets, adding simple properties
+# like target_include_directories). These modifications will be ported to original
+# ya.make files by maintainers. Any complex modifications which can't be ported back to the
+# original buildsystem will not be accepted.
+
+
+if (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND NOT HAVE_CUDA)
+  include(CMakeLists.linux-x86_64.txt)
+elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" AND NOT HAVE_CUDA)
+  include(CMakeLists.linux-aarch64.txt)
+elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
+  include(CMakeLists.darwin-x86_64.txt)
+elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
+  include(CMakeLists.darwin-arm64.txt)
+elseif (WIN32 AND CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64" AND NOT HAVE_CUDA)
+  include(CMakeLists.windows-x86_64.txt)
+endif()
diff --git a/ydb/apps/version/CMakeLists.windows-x86_64.txt b/ydb/apps/version/CMakeLists.windows-x86_64.txt
new file mode 100644
index 000000000000..ce969ee15772
--- /dev/null
+++ b/ydb/apps/version/CMakeLists.windows-x86_64.txt
@@ -0,0 +1,18 @@
+
+# This file was generated by the build system used internally in the Yandex monorepo.
+# Only simple modifications are allowed (adding source-files to targets, adding simple properties
+# like target_include_directories). These modifications will be ported to original
+# ya.make files by maintainers. Any complex modifications which can't be ported back to the
+# original buildsystem will not be accepted.
+
+
+
+add_library(version_definition)
+target_link_libraries(version_definition PUBLIC
+  contrib-libs-cxxsupp
+  yutil
+  version
+)
+target_sources(version_definition PRIVATE
+  ${CMAKE_SOURCE_DIR}/ydb/apps/version/version_definition.cpp
+)
diff --git a/ydb/apps/version/version_definition.cpp b/ydb/apps/version/version_definition.cpp
new file mode 100644
index 000000000000..6f71ec44e6d4
--- /dev/null
+++ b/ydb/apps/version/version_definition.cpp
@@ -0,0 +1,38 @@
+#include <ydb/core/driver_lib/version/version.h>
+
+NKikimrConfig::TCurrentCompatibilityInfo NKikimr::TCompatibilityInfo::MakeCurrent() {
+    using TCurrentConstructor = NKikimr::TCompatibilityInfo::TProtoConstructor::TCurrentCompatibilityInfo;
+    using TVersionConstructor = NKikimr::TCompatibilityInfo::TProtoConstructor::TVersion;
+    using TCompatibilityRuleConstructor = NKikimr::TCompatibilityInfo::TProtoConstructor::TCompatibilityRule;
+
+    return TCurrentConstructor{
+        .Application = "ydb",
+        .Version = TVersionConstructor{
+            .Year = 24,
+            .Major = 1,
+        },
+        .CanLoadFrom = {
+            TCompatibilityRuleConstructor{
+                .LowerLimit = TVersionConstructor{ .Year = 23, .Major = 4 },
+                .UpperLimit = TVersionConstructor{ .Year = 24, .Major = 1 },
+            },
+        },
+        .StoresReadableBy = {
+            TCompatibilityRuleConstructor{
+                .LowerLimit = TVersionConstructor{ .Year = 23, .Major = 4 },
+                .UpperLimit = TVersionConstructor{ .Year = 24, .Major = 1 },
+            },
+        },
+        .CanConnectTo = {
+            TCompatibilityRuleConstructor{
+                .LowerLimit = TVersionConstructor{ .Year = 23, .Major = 4 },
+                .UpperLimit = TVersionConstructor{ .Year = 24, .Major = 1 },
+            },
+            TCompatibilityRuleConstructor{
+                .Application = "nbs",
+                .LowerLimit = TVersionConstructor{ .Year = 23, .Major = 3 },
+                .UpperLimit = TVersionConstructor{ .Year = 24, .Major = 1 },
+            },
+        }
+    }.ToPB();
+}
diff --git a/ydb/apps/version/ya.make b/ydb/apps/version/ya.make
new file mode 100644
index 000000000000..d3b1eb34a7f1
--- /dev/null
+++ b/ydb/apps/version/ya.make
@@ -0,0 +1,11 @@
+LIBRARY(version_definition)
+
+SRCS(
+    version_definition.cpp
+)
+
+PEERDIR(
+    ydb/core/driver_lib/version
+)
+
+END()
diff --git a/ydb/apps/ydbd/CMakeLists.darwin-arm64.txt b/ydb/apps/ydbd/CMakeLists.darwin-arm64.txt
index 55cb758927dd..e9139a985617 100644
--- a/ydb/apps/ydbd/CMakeLists.darwin-arm64.txt
+++ b/ydb/apps/ydbd/CMakeLists.darwin-arm64.txt
@@ -14,6 +14,7 @@ target_compile_options(ydbd PRIVATE
 target_link_libraries(ydbd PUBLIC
   contrib-libs-cxxsupp
   yutil
+  version_definition
   run
   ydb-core-protos
   ydb-core-security
diff --git a/ydb/apps/ydbd/CMakeLists.darwin-x86_64.txt b/ydb/apps/ydbd/CMakeLists.darwin-x86_64.txt
index c14caccd9816..1d6341727d76 100644
--- a/ydb/apps/ydbd/CMakeLists.darwin-x86_64.txt
+++ b/ydb/apps/ydbd/CMakeLists.darwin-x86_64.txt
@@ -16,6 +16,7 @@ target_link_libraries(ydbd PUBLIC
   yutil
   library-cpp-cpuid_check
   udfs-common-hyperscan
+  version_definition
   run
   ydb-core-protos
   ydb-core-security
diff --git a/ydb/apps/ydbd/CMakeLists.linux-aarch64.txt b/ydb/apps/ydbd/CMakeLists.linux-aarch64.txt
index 39d8a56655d5..1cecfe06897d 100644
--- a/ydb/apps/ydbd/CMakeLists.linux-aarch64.txt
+++ b/ydb/apps/ydbd/CMakeLists.linux-aarch64.txt
@@ -15,6 +15,7 @@ target_link_libraries(ydbd PUBLIC
   contrib-libs-linux-headers
   contrib-libs-cxxsupp
   yutil
+  version_definition
   run
   ydb-core-protos
   ydb-core-security
diff --git a/ydb/apps/ydbd/CMakeLists.linux-x86_64.txt b/ydb/apps/ydbd/CMakeLists.linux-x86_64.txt
index c1e2d6955ed2..dd34e31acbb1 100644
--- a/ydb/apps/ydbd/CMakeLists.linux-x86_64.txt
+++ b/ydb/apps/ydbd/CMakeLists.linux-x86_64.txt
@@ -17,6 +17,7 @@ target_link_libraries(ydbd PUBLIC
   yutil
   library-cpp-cpuid_check
   hyperscan_udf
+  version_definition
   run
   ydb-core-protos
   ydb-core-security
diff --git a/ydb/apps/ydbd/CMakeLists.windows-x86_64.txt b/ydb/apps/ydbd/CMakeLists.windows-x86_64.txt
index 92044a6688cf..2e7334f4eb8f 100644
--- a/ydb/apps/ydbd/CMakeLists.windows-x86_64.txt
+++ b/ydb/apps/ydbd/CMakeLists.windows-x86_64.txt
@@ -17,6 +17,7 @@ target_link_libraries(ydbd PUBLIC
   yutil
   library-cpp-cpuid_check
   udfs-common-hyperscan
+  version_definition
   run
   ydb-core-protos
   ydb-core-security
diff --git a/ydb/apps/ydbd/ya.make b/ydb/apps/ydbd/ya.make
index 4f15c464fba0..e4176a682398 100644
--- a/ydb/apps/ydbd/ya.make
+++ b/ydb/apps/ydbd/ya.make
@@ -35,6 +35,7 @@ IF (ARCH_X86_64)
 ENDIF()
 
 PEERDIR(
+    ydb/apps/version
     ydb/core/driver_lib/run
     ydb/core/protos
     ydb/core/security
diff --git a/ydb/core/actorlib_impl/ut/CMakeLists.darwin-arm64.txt b/ydb/core/actorlib_impl/ut/CMakeLists.darwin-arm64.txt
index b23f1701861d..8cf38ba69fb3 100644
--- a/ydb/core/actorlib_impl/ut/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/actorlib_impl/ut/CMakeLists.darwin-arm64.txt
@@ -19,6 +19,7 @@ target_link_libraries(ydb-core-actorlib_impl-ut PUBLIC
   yutil
   cpp-testing-unittest_main
   ydb-core-actorlib_impl
+  version_definition
   library-actors-core
   library-actors-interconnect
   library-cpp-getopt
diff --git a/ydb/core/actorlib_impl/ut/CMakeLists.darwin-x86_64.txt b/ydb/core/actorlib_impl/ut/CMakeLists.darwin-x86_64.txt
index 97b02c598742..089fb719b212 100644
--- a/ydb/core/actorlib_impl/ut/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/actorlib_impl/ut/CMakeLists.darwin-x86_64.txt
@@ -20,6 +20,7 @@ target_link_libraries(ydb-core-actorlib_impl-ut PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   ydb-core-actorlib_impl
+  version_definition
   library-actors-core
   library-actors-interconnect
   library-cpp-getopt
diff --git a/ydb/core/actorlib_impl/ut/CMakeLists.linux-aarch64.txt b/ydb/core/actorlib_impl/ut/CMakeLists.linux-aarch64.txt
index 8884fae6ef3e..5b399007a656 100644
--- a/ydb/core/actorlib_impl/ut/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/actorlib_impl/ut/CMakeLists.linux-aarch64.txt
@@ -20,6 +20,7 @@ target_link_libraries(ydb-core-actorlib_impl-ut PUBLIC
   yutil
   cpp-testing-unittest_main
   ydb-core-actorlib_impl
+  version_definition
   library-actors-core
   library-actors-interconnect
   library-cpp-getopt
diff --git a/ydb/core/actorlib_impl/ut/CMakeLists.linux-x86_64.txt b/ydb/core/actorlib_impl/ut/CMakeLists.linux-x86_64.txt
index cc8f189feba3..cec69ce080fd 100644
--- a/ydb/core/actorlib_impl/ut/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/actorlib_impl/ut/CMakeLists.linux-x86_64.txt
@@ -21,6 +21,7 @@ target_link_libraries(ydb-core-actorlib_impl-ut PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   ydb-core-actorlib_impl
+  version_definition
   library-actors-core
   library-actors-interconnect
   library-cpp-getopt
diff --git a/ydb/core/actorlib_impl/ut/CMakeLists.windows-x86_64.txt b/ydb/core/actorlib_impl/ut/CMakeLists.windows-x86_64.txt
index cc5c27df7c96..dfcd699fb474 100644
--- a/ydb/core/actorlib_impl/ut/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/actorlib_impl/ut/CMakeLists.windows-x86_64.txt
@@ -20,6 +20,7 @@ target_link_libraries(ydb-core-actorlib_impl-ut PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   ydb-core-actorlib_impl
+  version_definition
   library-actors-core
   library-actors-interconnect
   library-cpp-getopt
diff --git a/ydb/core/actorlib_impl/ut/ya.make b/ydb/core/actorlib_impl/ut/ya.make
index 0a89b3e4b6e9..d4f2a0bb1540 100644
--- a/ydb/core/actorlib_impl/ut/ya.make
+++ b/ydb/core/actorlib_impl/ut/ya.make
@@ -13,6 +13,7 @@ ELSE()
 ENDIF()
 
 PEERDIR(
+    ydb/apps/version
     ydb/library/actors/core
     ydb/library/actors/interconnect
     library/cpp/getopt
diff --git a/ydb/core/blobstorage/dsproxy/dsproxy_blackboard.cpp b/ydb/core/blobstorage/dsproxy/dsproxy_blackboard.cpp
index 97706a1b6f13..6df5e4ce8698 100644
--- a/ydb/core/blobstorage/dsproxy/dsproxy_blackboard.cpp
+++ b/ydb/core/blobstorage/dsproxy/dsproxy_blackboard.cpp
@@ -48,12 +48,6 @@ void TBlobState::AddPartToPut(ui32 partIdx, TRope&& partData) {
     IsChanged = true;
 }
 
-void TBlobState::MarkBlobReadyToPut(ui8 blobIdx) {
-    Y_ABORT_UNLESS(WholeSituation == ESituation::Unknown || WholeSituation == ESituation::Present);
-    BlobIdx = blobIdx;
-    IsChanged = true;
-}
-
 bool TBlobState::Restore(const TBlobStorageGroupInfo &info) {
     const TIntervalVec<i32> fullBlobInterval(0, Id.BlobSize());
     const TIntervalSet<i32> here = Whole.Here();
@@ -227,7 +221,7 @@ TString TBlobState::ToString() const {
     for (ui32 i = 0; i < Disks.size(); ++i) {
         str << Endl << " Disks[" << i << "]# " << Disks[i].ToString() << Endl;
     }
-    str << " BlobIdx# " << (ui32)BlobIdx << Endl;
+    str << " BlobIdx# " << BlobIdx << Endl;
     str << "}";
     return str.Str();
 }
@@ -304,7 +298,7 @@ void TGroupDiskRequests::AddGet(ui32 diskOrderNumber, const TLogoBlobID &id, ui3
 }
 
 void TGroupDiskRequests::AddPut(ui32 diskOrderNumber, const TLogoBlobID &id, TRope buffer,
-        TDiskPutRequest::EPutReason putReason, bool isHandoff, ui8 blobIdx) {
+        TDiskPutRequest::EPutReason putReason, bool isHandoff, size_t blobIdx) {
     PutsPending.emplace_back(diskOrderNumber, id, buffer, putReason, isHandoff, blobIdx);
 }
 
@@ -340,20 +334,6 @@ void TBlackboard::AddPartToPut(const TLogoBlobID &id, ui32 partIdx, TRope&& part
     (*this)[id].AddPartToPut(partIdx, std::move(partData));
 }
 
-void TBlackboard::MarkBlobReadyToPut(const TLogoBlobID &id, ui8 blobIdx) {
-    Y_ABORT_UNLESS(bool(id));
-    Y_ABORT_UNLESS(id.PartId() == 0);
-    Y_ABORT_UNLESS(id.BlobSize() != 0);
-    (*this)[id].MarkBlobReadyToPut(blobIdx);
-}
-
-void TBlackboard::MoveBlobStateToDone(const TLogoBlobID &id) {
-    Y_ABORT_UNLESS(bool(id));
-    Y_ABORT_UNLESS(id.PartId() == 0);
-    Y_ABORT_UNLESS(id.BlobSize() != 0);
-    DoneBlobStates.insert(BlobStates.extract(id));
-}
-
 void TBlackboard::AddPutOkResponse(const TLogoBlobID &id, ui32 orderNumber) {
     Y_ABORT_UNLESS(bool(id));
     Y_ABORT_UNLESS(id.PartId() != 0);
@@ -390,8 +370,7 @@ void TBlackboard::AddErrorResponse(const TLogoBlobID &id, ui32 orderNumber) {
 }
 
 EStrategyOutcome TBlackboard::RunStrategies(TLogContext &logCtx, const TStackVec<IStrategy*, 1>& s,
-        TBatchedVec<TBlobStates::value_type*> *finished, const TBlobStorageGroupInfo::TGroupVDisks *expired) {
-    TString errorReason;
+        TBatchedVec<TFinishedBlob> *finished, const TBlobStorageGroupInfo::TGroupVDisks *expired) {
     for (auto it = BlobStates.begin(); it != BlobStates.end(); ) {
         auto& blob = it->second;
         if (!std::exchange(blob.IsChanged, false)) {
@@ -401,6 +380,7 @@ EStrategyOutcome TBlackboard::RunStrategies(TLogContext &logCtx, const TStackVec
 
         // recalculate blob outcome if it is not yet determined
         NKikimrProto::EReplyStatus status = NKikimrProto::OK;
+        TString errorReason;
         for (IStrategy *strategy : s) {
             switch (auto res = strategy->Process(logCtx, blob, *Info, *this, GroupDiskRequests)) {
                 case EStrategyOutcome::IN_PROGRESS:
@@ -408,16 +388,11 @@ EStrategyOutcome TBlackboard::RunStrategies(TLogContext &logCtx, const TStackVec
                     break;
 
                 case EStrategyOutcome::ERROR:
-                    if (IsAllRequestsTogether) {
+                    if (!finished) {
                         return res;
                     }
-                    if (errorReason) {
-                        errorReason += " && ";
-                        errorReason += res.ErrorReason;
-                    } else {
-                        errorReason = res.ErrorReason;
-                    }
                     status = NKikimrProto::ERROR;
+                    errorReason = std::move(res.ErrorReason);
                     break;
 
                 case EStrategyOutcome::DONE:
@@ -431,26 +406,25 @@ EStrategyOutcome TBlackboard::RunStrategies(TLogContext &logCtx, const TStackVec
             status = NKikimrProto::UNKNOWN;
         }
         if (status != NKikimrProto::UNKNOWN) {
+            if (finished) { // we are operating on independent blobs
+                finished->push_back(TFinishedBlob{
+                    blob.BlobIdx,
+                    status,
+                    std::move(errorReason),
+                });
+            }
             const auto [doneIt, inserted, node] = DoneBlobStates.insert(BlobStates.extract(it++));
             Y_ABORT_UNLESS(inserted);
-            if (!IsAllRequestsTogether) {
-                blob.Status = status;
-                if (finished) {
-                    finished->push_back(&*doneIt);
-                }
-            }
         } else {
             ++it;
         }
     }
 
-    EStrategyOutcome outcome(BlobStates.empty() ? EStrategyOutcome::DONE : EStrategyOutcome::IN_PROGRESS);
-    outcome.ErrorReason = std::move(errorReason);
-    return outcome;
+    return BlobStates.empty() ? EStrategyOutcome::DONE : EStrategyOutcome::IN_PROGRESS;
 }
 
 EStrategyOutcome TBlackboard::RunStrategy(TLogContext &logCtx, const IStrategy& s,
-        TBatchedVec<TBlobStates::value_type*> *finished, const TBlobStorageGroupInfo::TGroupVDisks *expired) {
+        TBatchedVec<TFinishedBlob> *finished, const TBlobStorageGroupInfo::TGroupVDisks *expired) {
     return RunStrategies(logCtx, {const_cast<IStrategy*>(&s)}, finished, expired);
 }
 
@@ -464,8 +438,7 @@ TBlobState& TBlackboard::GetState(const TLogoBlobID &id) {
                 << " blobId# " << fullId
                 << " BlackBoard# " << ToString());
     }
-    TBlobState &state = it->second;
-    return state;
+    return it->second;
 }
 
 ssize_t TBlackboard::AddPartMap(const TLogoBlobID &id, ui32 diskOrderNumber, ui32 requestIndex) {
@@ -512,8 +485,12 @@ void TBlackboard::GetWorstPredictedDelaysNs(const TBlobStorageGroupInfo &info, T
     }
 }
 
-void TBlackboard::RegisterBlobForPut(const TLogoBlobID& id) {
-    (*this)[id];
+void TBlackboard::RegisterBlobForPut(const TLogoBlobID& id, size_t blobIdx) {
+    const auto [it, inserted] = BlobStates.try_emplace(id);
+    Y_ABORT_UNLESS(inserted);
+    TBlobState& state = it->second;
+    state.Init(id, *Info);
+    state.BlobIdx = blobIdx;
 }
 
 TBlobState& TBlackboard::operator [](const TLogoBlobID& id) {
@@ -559,9 +536,7 @@ void TBlackboard::InvalidatePartStates(ui32 orderNumber) {
     const TVDiskID vdiskId = Info->GetVDiskId(orderNumber);
     for (auto& [id, state] : BlobStates) {
         if (const ui32 diskIdx = Info->GetIdxInSubgroup(vdiskId, id.Hash()); diskIdx != Info->Type.BlobSubgroupSize()) {
-            TBlobState::TDisk& disk = state.Disks[diskIdx];
-            for (ui32 partIdx = 0; partIdx < disk.DiskParts.size(); ++partIdx) {
-                TBlobState::TDiskPart& part = disk.DiskParts[partIdx];
+            for (TBlobState::TDiskPart& part : state.Disks[diskIdx].DiskParts) {
                 if (part.Situation == TBlobState::ESituation::Present) {
                     part.Situation = TBlobState::ESituation::Unknown;
                     if (state.WholeSituation == TBlobState::ESituation::Present) {
diff --git a/ydb/core/blobstorage/dsproxy/dsproxy_blackboard.h b/ydb/core/blobstorage/dsproxy/dsproxy_blackboard.h
index c128a013e507..84dc4780c9a5 100644
--- a/ydb/core/blobstorage/dsproxy/dsproxy_blackboard.h
+++ b/ydb/core/blobstorage/dsproxy/dsproxy_blackboard.h
@@ -81,14 +81,12 @@ struct TBlobState {
     TStackVec<TState, TypicalPartsInBlob> Parts;
     TStackVec<TDisk, TypicalDisksInSubring> Disks;
     TVector<TEvBlobStorage::TEvGetResult::TPartMapItem> PartMap;
-    NKikimrProto::EReplyStatus Status = NKikimrProto::UNKNOWN;
-    ui8 BlobIdx;
+    size_t BlobIdx;
     bool IsChanged = false;
 
     void Init(const TLogoBlobID &id, const TBlobStorageGroupInfo &Info);
     void AddNeeded(ui64 begin, ui64 size);
     void AddPartToPut(ui32 partIdx, TRope&& partData);
-    void MarkBlobReadyToPut(ui8 blobIdx = 0);
     bool Restore(const TBlobStorageGroupInfo &info);
     void AddResponseData(const TBlobStorageGroupInfo &info, const TLogoBlobID &id, ui32 diskIdxInSubring,
             ui32 shift, TRope&& data);
@@ -133,9 +131,9 @@ struct TDiskPutRequest {
     TRope Buffer;
     EPutReason Reason;
     bool IsHandoff;
-    ui8 BlobIdx;
+    size_t BlobIdx;
 
-    TDiskPutRequest(ui32 orderNumber, const TLogoBlobID &id, TRope buffer, EPutReason reason, bool isHandoff, ui8 blobIdx)
+    TDiskPutRequest(ui32 orderNumber, const TLogoBlobID &id, TRope buffer, EPutReason reason, bool isHandoff, size_t blobIdx)
         : OrderNumber(orderNumber)
         , Id(id)
         , Buffer(std::move(buffer))
@@ -152,7 +150,7 @@ struct TGroupDiskRequests {
     void AddGet(ui32 diskOrderNumber, const TLogoBlobID &id, const TIntervalSet<i32> &intervalSet);
     void AddGet(ui32 diskOrderNumber, const TLogoBlobID &id, ui32 shift, ui32 size);
     void AddPut(ui32 diskOrderNumber, const TLogoBlobID &id, TRope buffer,
-        TDiskPutRequest::EPutReason putReason, bool isHandoff, ui8 blobIdx);
+        TDiskPutRequest::EPutReason putReason, bool isHandoff, size_t blobIdx);
 };
 
 struct TBlackboard;
@@ -170,6 +168,12 @@ struct TBlackboard {
         AccelerationModeSkipMarked
     };
 
+    struct TFinishedBlob {
+        size_t BlobIdx;
+        NKikimrProto::EReplyStatus Status;
+        TString ErrorReason;
+    };
+
     using TBlobStates = TMap<TLogoBlobID, TBlobState>;
     TBlobStates BlobStates;
     TBlobStates DoneBlobStates;
@@ -179,31 +183,27 @@ struct TBlackboard {
     EAccelerationMode AccelerationMode;
     const NKikimrBlobStorage::EPutHandleClass PutHandleClass;
     const NKikimrBlobStorage::EGetHandleClass GetHandleClass;
-    const bool IsAllRequestsTogether;
 
     TBlackboard(const TIntrusivePtr<TBlobStorageGroupInfo> &info, const TIntrusivePtr<TGroupQueues> &groupQueues,
-            NKikimrBlobStorage::EPutHandleClass putHandleClass, NKikimrBlobStorage::EGetHandleClass getHandleClass,
-            bool isAllRequestsTogether = true)
+            NKikimrBlobStorage::EPutHandleClass putHandleClass, NKikimrBlobStorage::EGetHandleClass getHandleClass)
         : Info(info)
         , GroupQueues(groupQueues)
         , AccelerationMode(AccelerationModeSkipOneSlowest)
         , PutHandleClass(putHandleClass)
         , GetHandleClass(getHandleClass)
-        , IsAllRequestsTogether(isAllRequestsTogether)
     {}
 
     void AddNeeded(const TLogoBlobID &id, ui32 inShift, ui32 inSize);
     void AddPartToPut(const TLogoBlobID &id, ui32 partIdx, TRope&& partData);
-    void MarkBlobReadyToPut(const TLogoBlobID &id, ui8 blobIdx = 0);
-    void MoveBlobStateToDone(const TLogoBlobID &id);
     void AddResponseData(const TLogoBlobID &id, ui32 orderNumber, ui32 shift, TRope&& data);
     void AddPutOkResponse(const TLogoBlobID &id, ui32 orderNumber);
     void AddNoDataResponse(const TLogoBlobID &id, ui32 orderNumber);
     void AddErrorResponse(const TLogoBlobID &id, ui32 orderNumber);
     void AddNotYetResponse(const TLogoBlobID &id, ui32 orderNumber);
+
     EStrategyOutcome RunStrategies(TLogContext& logCtx, const TStackVec<IStrategy*, 1>& strategies,
-        TBatchedVec<TBlobStates::value_type*> *finished = nullptr, const TBlobStorageGroupInfo::TGroupVDisks *expired = nullptr);
-    EStrategyOutcome RunStrategy(TLogContext &logCtx, const IStrategy& s, TBatchedVec<TBlobStates::value_type*> *finished = nullptr,
+        TBatchedVec<TFinishedBlob> *finished = nullptr, const TBlobStorageGroupInfo::TGroupVDisks *expired = nullptr);
+    EStrategyOutcome RunStrategy(TLogContext &logCtx, const IStrategy& s, TBatchedVec<TFinishedBlob> *finished = nullptr,
             const TBlobStorageGroupInfo::TGroupVDisks *expired = nullptr);
     TBlobState& GetState(const TLogoBlobID &id);
     ssize_t AddPartMap(const TLogoBlobID &id, ui32 diskOrderNumber, ui32 requestIndex);
@@ -221,7 +221,7 @@ struct TBlackboard {
 
     void InvalidatePartStates(ui32 orderNumber);
 
-    void RegisterBlobForPut(const TLogoBlobID& id);
+    void RegisterBlobForPut(const TLogoBlobID& id, size_t blobIdx);
 
     TBlobState& operator [](const TLogoBlobID& id);
 };
diff --git a/ydb/core/blobstorage/dsproxy/dsproxy_put.cpp b/ydb/core/blobstorage/dsproxy/dsproxy_put.cpp
index a092e45872a7..4f815af5a8d9 100644
--- a/ydb/core/blobstorage/dsproxy/dsproxy_put.cpp
+++ b/ydb/core/blobstorage/dsproxy/dsproxy_put.cpp
@@ -103,11 +103,11 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
         SanityCheck(); // May Die
     }
 
-    bool Action() {
+    bool Action(bool accelerate = false) {
         UpdateExpiredVDiskSet();
 
         TPutImpl::TPutResultVec putResults;
-        PutImpl.Step(LogCtx, putResults, ExpiredVDiskSet);
+        PutImpl.Step(LogCtx, putResults, ExpiredVDiskSet, accelerate);
         if (ReplyAndDieWithLastResponse(putResults)) {
             return true;
         }
@@ -133,9 +133,7 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
             return;
         }
         IsAccelerated = true;
-
-        PutImpl.Accelerate(LogCtx);
-        Action();
+        Action(true);
 //        *(IsMultiPutMode ? Mon->NodeMon->AccelerateEvVMultiPutCount : Mon->NodeMon->AccelerateEvVPutCount) += v.size();
     }
 
@@ -210,9 +208,7 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
             HandleIncarnation(issue, orderNumber, record.GetIncarnationGuid());
         }
 
-        if (Action()) {
-            return;
-        }
+        Action();
     }
 
     void Handle(TEvBlobStorage::TEvVPutResult::TPtr &ev) {
@@ -265,7 +261,7 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
         if (status == NKikimrProto::BLOCKED || status == NKikimrProto::DEADLINE) {
             TString error = TStringBuilder() << "Got VPutResult status# " << status << " from VDiskId# " << vdiskId;
             TPutImpl::TPutResultVec putResults;
-            PutImpl.PrepareOneReply(status, blobId.FullID(), blobIdx, LogCtx, std::move(error), putResults);
+            PutImpl.PrepareOneReply(status, blobIdx, LogCtx, std::move(error), putResults);
             ReplyAndDieWithLastResponse(putResults);
         } else {
             PutImpl.ProcessResponse(*ev->Get());
@@ -351,7 +347,7 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
             Y_ABORT_UNLESS(itemStatus != NKikimrProto::RACE); // we should get RACE for the whole request and handle it in CheckForTermErrors
             if (itemStatus == NKikimrProto::BLOCKED || itemStatus == NKikimrProto::DEADLINE) {
                 ErrorReason = TStringBuilder() << "Got VMultiPutResult itemStatus# " << itemStatus << " from VDiskId# " << vdiskId;
-                PutImpl.PrepareOneReply(itemStatus, blobId.FullID(), blobIdx, LogCtx, ErrorReason, putResults);
+                PutImpl.PrepareOneReply(itemStatus, blobIdx, LogCtx, ErrorReason, putResults);
             }
         }
         if (ReplyAndDieWithLastResponse(putResults)) {
@@ -405,7 +401,7 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
         return false;
     }
 
-    void SendReply(std::unique_ptr<TEvBlobStorage::TEvPutResult> putResult, ui64 blobIdx) {
+    void SendReply(std::unique_ptr<TEvBlobStorage::TEvPutResult> putResult, size_t blobIdx) {
         NKikimrProto::EReplyStatus status = putResult->Status;
         A_LOG_LOG_S(false, status == NKikimrProto::OK ? NLog::PRI_INFO : NLog::PRI_NOTICE, "BPP21",
             "SendReply putResult# " << putResult->ToString() << " ResponsesSent# " << ResponsesSent
@@ -449,7 +445,7 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
     TString BlobIdSequenceToString() const {
         TStringBuilder blobIdsStr;
         blobIdsStr << '[';
-        for (ui64 blobIdx = 0; blobIdx < PutImpl.Blobs.size(); ++blobIdx) {
+        for (size_t blobIdx = 0; blobIdx < PutImpl.Blobs.size(); ++blobIdx) {
             if (blobIdx) {
                 blobIdsStr << ' ';
             }
@@ -603,7 +599,7 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
 
         StartTime = TActivationContext::Monotonic();
 
-        for (ui64 blobIdx = 0; blobIdx < PutImpl.Blobs.size(); ++blobIdx) {
+        for (size_t blobIdx = 0; blobIdx < PutImpl.Blobs.size(); ++blobIdx) {
             LWTRACK(DSProxyPutBootstrapStart, PutImpl.Blobs[blobIdx].Orbit);
         }
 
@@ -703,12 +699,11 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
                     s << ' ';
                 }
                 s << i;
-                auto& record = IncarnationRecords[i];
-                s << '{';
-                s << "IncarnationGuid# " << record.IncarnationGuid;
-                s << " ExpirationTimestamp# " << record.ExpirationTimestamp;
-                s << " StatusIssueTimestamp# " << record.StatusIssueTimestamp;
-                s << '}';
+                auto& r = IncarnationRecords[i];
+                s << '{' << r.IncarnationGuid
+                    << ' ' << (r.ExpirationTimestamp != TMonotonic::Max() ? TStringBuilder() << r.ExpirationTimestamp : "-"_sb)
+                    << ' ' << (r.StatusIssueTimestamp != TMonotonic::Zero() ? TStringBuilder() << r.StatusIssueTimestamp : "-"_sb)
+                    << '}';
             }
             s << '}';
             return s.Str();
@@ -735,7 +730,7 @@ class TBlobStorageGroupPutRequest : public TBlobStorageGroupRequestActor<TBlobSt
     }
 
     STATEFN(StateWait) {
-        if (ProcessEvent(ev, IsManyPuts)) {
+        if (ProcessEvent(ev, true)) {
             return;
         }
         const ui32 type = ev->GetTypeRewrite();
diff --git a/ydb/core/blobstorage/dsproxy/dsproxy_put_impl.cpp b/ydb/core/blobstorage/dsproxy/dsproxy_put_impl.cpp
index 81f56bed5363..3049ab1a039b 100644
--- a/ydb/core/blobstorage/dsproxy/dsproxy_put_impl.cpp
+++ b/ydb/core/blobstorage/dsproxy/dsproxy_put_impl.cpp
@@ -11,22 +11,44 @@ namespace NKikimr {
 
 using TPutResultVec = TPutImpl::TPutResultVec;
 
-void TPutImpl::RunStrategies(TLogContext &logCtx, TPutResultVec &outPutResults, const TBlobStorageGroupInfo::TGroupVDisks& expired) {
+void TPutImpl::RunStrategies(TLogContext &logCtx, TPutResultVec &outPutResults,
+        const TBlobStorageGroupInfo::TGroupVDisks& expired, bool accelerate) {
+    if (accelerate) {
+        ChangeAll();
+    }
+
     switch (Info->Type.GetErasure()) {
         case TBlobStorageGroupType::ErasureMirror3dc:
-            return RunStrategy(logCtx, TPut3dcStrategy(Tactic, EnableRequestMod3x3ForMinLatecy), outPutResults, expired);
+            return accelerate
+                ? RunStrategy(logCtx, TAcceleratePut3dcStrategy(Tactic, EnableRequestMod3x3ForMinLatecy), outPutResults, expired)
+                : RunStrategy(logCtx, TPut3dcStrategy(Tactic, EnableRequestMod3x3ForMinLatecy), outPutResults, expired);
         case TBlobStorageGroupType::ErasureMirror3of4:
-            return RunStrategy(logCtx, TPut3of4Strategy(Tactic), outPutResults, expired);
+            return accelerate
+                ? RunStrategy(logCtx, TPut3of4Strategy(Tactic, true), outPutResults, expired)
+                : RunStrategy(logCtx, TPut3of4Strategy(Tactic), outPutResults, expired);
         default:
-            return RunStrategy(logCtx, TRestoreStrategy(), outPutResults, expired);
+            return accelerate
+                ? RunStrategy(logCtx, TAcceleratePutStrategy(), outPutResults, expired)
+                : RunStrategy(logCtx, TRestoreStrategy(), outPutResults, expired);
     }
 }
 
 void TPutImpl::RunStrategy(TLogContext &logCtx, const IStrategy& strategy, TPutResultVec &outPutResults,
         const TBlobStorageGroupInfo::TGroupVDisks& expired) {
-    TBatchedVec<TBlackboard::TBlobStates::value_type*> finished;
+    Y_VERIFY_S(Blackboard.BlobStates.size(), "State# " << DumpFullState());
+    TBatchedVec<TBlackboard::TFinishedBlob> finished;
     const EStrategyOutcome outcome = Blackboard.RunStrategy(logCtx, strategy, &finished, &expired);
-    PrepareReply(logCtx, outcome.ErrorReason, finished, outPutResults);
+    for (const TBlackboard::TFinishedBlob& item : finished) {
+        Y_ABORT_UNLESS(item.BlobIdx < Blobs.size());
+        Y_ABORT_UNLESS(!IsDone[item.BlobIdx]);
+        PrepareOneReply(item.Status, item.BlobIdx, logCtx, item.ErrorReason, outPutResults);
+        Y_VERIFY_S(IsDone[item.BlobIdx], "State# " << DumpFullState());
+    }
+    if (outcome == EStrategyOutcome::DONE) {
+        for (const auto& done : IsDone) {
+            Y_VERIFY_S(done, "finished.size# " << finished.size() << " State# " << DumpFullState());
+        }
+    }
 }
 
 NLog::EPriority GetPriorityForReply(TAtomicLogPriorityMuteChecker<NLog::PRI_ERROR, NLog::PRI_DEBUG> &checker,
@@ -40,62 +62,23 @@ NLog::EPriority GetPriorityForReply(TAtomicLogPriorityMuteChecker<NLog::PRI_ERRO
     }
 }
 
-void TPutImpl::PrepareOneReply(NKikimrProto::EReplyStatus status, TLogoBlobID blobId, ui64 blobIdx, TLogContext &logCtx,
+void TPutImpl::PrepareOneReply(NKikimrProto::EReplyStatus status, size_t blobIdx, TLogContext &logCtx,
         TString errorReason, TPutResultVec &outPutResults) {
-    Y_ABORT_UNLESS(IsInitialized);
-    if (!IsDone[blobIdx]) {
-        outPutResults.emplace_back(blobIdx, new TEvBlobStorage::TEvPutResult(status, blobId, StatusFlags, Info->GroupID,
-                    ApproximateFreeSpaceShare));
-        outPutResults.back().second->ErrorReason = errorReason;
-        NLog::EPriority priority = GetPriorityForReply(Info->PutErrorMuteChecker, status);
-        A_LOG_LOG_SX(logCtx, true, priority, "BPP12", "Result# " << outPutResults.back().second->Print(false));
-        MarkBlobAsSent(blobIdx);
+    if (!std::exchange(IsDone[blobIdx], true)) {
+        auto ev = std::make_unique<TEvBlobStorage::TEvPutResult>(status, Blobs[blobIdx].BlobId, StatusFlags,
+            Info->GroupID, ApproximateFreeSpaceShare);
+        ev->ErrorReason = std::move(errorReason);
+        const NLog::EPriority priority = GetPriorityForReply(Info->PutErrorMuteChecker, status);
+        A_LOG_LOG_SX(logCtx, true, priority, "BPP12", "Result# " << ev->Print(false));
+        outPutResults.emplace_back(blobIdx, std::move(ev));
     }
 }
 
 void TPutImpl::PrepareReply(NKikimrProto::EReplyStatus status, TLogContext &logCtx, TString errorReason,
         TPutResultVec &outPutResults) {
     A_LOG_DEBUG_SX(logCtx, "BPP34", "PrepareReply status# " << status << " errorReason# " << errorReason);
-    for (ui64 idx = 0; idx < Blobs.size(); ++idx) {
-        if (IsDone[idx]) {
-            A_LOG_DEBUG_SX(logCtx, "BPP35", "blob# " << Blobs[idx].ToString() <<
-                " idx# " << idx << " is sent, skipped");
-            continue;
-        }
-
-        outPutResults.emplace_back(idx, new TEvBlobStorage::TEvPutResult(status, Blobs[idx].BlobId, StatusFlags,
-            Info->GroupID, ApproximateFreeSpaceShare));
-        outPutResults.back().second->ErrorReason = errorReason;
-
-        NLog::EPriority priority = GetPriorityForReply(Info->PutErrorMuteChecker, status);
-        A_LOG_LOG_SX(logCtx, true, priority, "BPP38",
-                "PrepareReply Result# " << outPutResults.back().second->Print(false));
-
-        if (IsInitialized) {
-            MarkBlobAsSent(idx);
-        }
-    }
-}
-
-void TPutImpl::PrepareReply(TLogContext &logCtx, TString errorReason,
-        TBatchedVec<TBlackboard::TBlobStates::value_type*>& finished, TPutResultVec &outPutResults) {
-    A_LOG_DEBUG_SX(logCtx, "BPP36", "PrepareReply errorReason# " << errorReason);
-    Y_ABORT_UNLESS(IsInitialized);
-    for (auto item : finished) {
-        auto &[blobId, state] = *item;
-        const ui64 idx = state.BlobIdx;
-        Y_ABORT_UNLESS(blobId == Blobs[idx].BlobId, "BlobIdx# %" PRIu64 " BlobState# %s Blackboard# %s",
-            idx, state.ToString().c_str(), Blackboard.ToString().c_str());
-        Y_ABORT_UNLESS(!IsDone[idx]);
-        Y_ABORT_UNLESS(state.Status != NKikimrProto::UNKNOWN);
-        outPutResults.emplace_back(idx, new TEvBlobStorage::TEvPutResult(state.Status, blobId, StatusFlags,
-            Info->GroupID, ApproximateFreeSpaceShare));
-        outPutResults.back().second->ErrorReason = errorReason;
-
-        NLog::EPriority priority = GetPriorityForReply(Info->PutErrorMuteChecker, state.Status);
-        A_LOG_LOG_SX(logCtx, true, priority, "BPP37",
-                "PrepareReply Result# " << outPutResults.back().second->Print(false));
-        MarkBlobAsSent(idx);
+    for (size_t blobIdx = 0; blobIdx < Blobs.size(); ++blobIdx) {
+        PrepareOneReply(status, blobIdx, logCtx, errorReason, outPutResults);
     }
 }
 
@@ -125,7 +108,7 @@ TString TPutImpl::DumpFullState() const {
     str << Endl;
     str << " Blobs# " << Blobs.ToString();
     str << Endl;
-    str << "IsDone# " << IsDone.ToString();
+    str << " IsDone# " << IsDone.ToString();
     str << Endl;
     str << " HandoffPartsSent# " << HandoffPartsSent;
     str << Endl;
@@ -143,15 +126,6 @@ TString TPutImpl::DumpFullState() const {
     return str.Str();
 }
 
-bool TPutImpl::MarkBlobAsSent(ui64 idx) {
-    Y_ABORT_UNLESS(idx < Blobs.size());
-    Y_ABORT_UNLESS(!IsDone[idx]);
-    Blackboard.MoveBlobStateToDone(Blobs[idx].BlobId);
-    IsDone[idx] = true;
-    DoneBlobs++;
-    return true;
-}
-
 }//NKikimr
 
 Y_DECLARE_OUT_SPEC(, NKikimr::TPutImpl::TBlobInfo, stream, value) {
diff --git a/ydb/core/blobstorage/dsproxy/dsproxy_put_impl.h b/ydb/core/blobstorage/dsproxy/dsproxy_put_impl.h
index 5c499eda22ab..b15b864837aa 100644
--- a/ydb/core/blobstorage/dsproxy/dsproxy_put_impl.h
+++ b/ydb/core/blobstorage/dsproxy/dsproxy_put_impl.h
@@ -43,8 +43,6 @@ class TPutImpl {
     bool AtLeastOneResponseWasNotOk = false;
     bool EnableRequestMod3x3ForMinLatecy = false;
 
-    ui64 DoneBlobs = 0;
-
     const TEvBlobStorage::TEvPut::ETactic Tactic;
 
     struct TBlobInfo {
@@ -99,8 +97,6 @@ class TPutImpl {
 
     friend class TBlobStorageGroupPutRequest;
 
-    bool IsInitialized = false;
-
     friend void ::Out<TBlobInfo>(IOutputStream&, const TBlobInfo&);
 
 public:
@@ -109,7 +105,7 @@ class TPutImpl {
             bool enableRequestMod3x3ForMinLatecy, TActorId recipient, ui64 cookie, NWilson::TTraceId traceId)
         : Deadline(ev->Deadline)
         , Info(info)
-        , Blackboard(info, state, ev->HandleClass, NKikimrBlobStorage::EGetHandleClass::AsyncRead, false)
+        , Blackboard(info, state, ev->HandleClass, NKikimrBlobStorage::EGetHandleClass::AsyncRead)
         , IsDone(1)
         , WrittenBeyondBarrier(1)
         , StatusFlags(0)
@@ -133,7 +129,7 @@ class TPutImpl {
             bool enableRequestMod3x3ForMinLatecy)
         : Deadline(TInstant::Zero())
         , Info(info)
-        , Blackboard(info, state, putHandleClass, NKikimrBlobStorage::EGetHandleClass::AsyncRead, false)
+        , Blackboard(info, state, putHandleClass, NKikimrBlobStorage::EGetHandleClass::AsyncRead)
         , IsDone(events.size())
         , WrittenBeyondBarrier(events.size())
         , StatusFlags(0)
@@ -175,47 +171,26 @@ class TPutImpl {
         Y_VERIFY_S(partSets.size() == Blobs.size(), "partSets.size# " << partSets.size()
                 << " Blobs.size# " << Blobs.size());
         const ui32 totalParts = Info->Type.TotalPartCount();
-        for (ui64 blobIdx = 0; blobIdx < Blobs.size(); ++blobIdx) {
+        for (size_t blobIdx = 0; blobIdx < Blobs.size(); ++blobIdx) {
             TBlobInfo& blob = Blobs[blobIdx];
-            Blackboard.RegisterBlobForPut(blob.BlobId);
+            Blackboard.RegisterBlobForPut(blob.BlobId, blobIdx);
             for (ui32 i = 0; i < totalParts; ++i) {
                 if (Info->Type.PartSize(TLogoBlobID(blob.BlobId, i + 1))) {
                     Blackboard.AddPartToPut(blob.BlobId, i, TRope(partSets[blobIdx][i]));
                 }
             }
-            Blackboard.MarkBlobReadyToPut(blob.BlobId, blobIdx);
         }
-        IsInitialized = true;
     }
 
     void PrepareReply(NKikimrProto::EReplyStatus status, TLogContext &logCtx, TString errorReason,
             TPutResultVec &outPutResults);
-    void PrepareReply(TLogContext &logCtx, TString errorReason, TBatchedVec<TBlackboard::TBlobStates::value_type*>& finished,
-            TPutResultVec &outPutResults);
-    void PrepareOneReply(NKikimrProto::EReplyStatus status, TLogoBlobID blobId, ui64 blobIdx, TLogContext &logCtx,
+    void PrepareOneReply(NKikimrProto::EReplyStatus status, size_t blobIdx, TLogContext &logCtx,
             TString errorReason, TPutResultVec &outPutResults);
 
     ui64 GetTimeToAccelerateNs(TLogContext &logCtx);
 
-    void Accelerate(TLogContext &logCtx) {
-        Blackboard.ChangeAll();
-        switch (Info->Type.GetErasure()) {
-            case TBlobStorageGroupType::ErasureMirror3dc:
-                Blackboard.RunStrategy(logCtx, TAcceleratePut3dcStrategy(Tactic, EnableRequestMod3x3ForMinLatecy));
-                break;
-            case TBlobStorageGroupType::ErasureMirror3of4:
-                Blackboard.RunStrategy(logCtx, TPut3of4Strategy(Tactic, true));
-                break;
-            default:
-                Blackboard.RunStrategy(logCtx, TAcceleratePutStrategy());
-                break;
-        }
-    }
-
     TString DumpFullState() const;
 
-    bool MarkBlobAsSent(ui64 blobIdx);
-
     TString ToString() const;
 
     void InvalidatePartStates(ui32 orderNumber) {
@@ -226,8 +201,8 @@ class TPutImpl {
         Blackboard.ChangeAll();
     }
 
-    void Step(TLogContext &logCtx, TPutResultVec& putResults, const TBlobStorageGroupInfo::TGroupVDisks& expired) {
-        RunStrategies(logCtx, putResults, expired);
+    void Step(TLogContext &logCtx, TPutResultVec& putResults, const TBlobStorageGroupInfo::TGroupVDisks& expired, bool accelerate) {
+        RunStrategies(logCtx, putResults, expired, accelerate);
     }
 
     TDeque<TPutEvent> GeneratePutRequests() {
@@ -299,7 +274,8 @@ class TPutImpl {
     }
 
 protected:
-    void RunStrategies(TLogContext &logCtx, TPutResultVec &outPutResults, const TBlobStorageGroupInfo::TGroupVDisks& expired);
+    void RunStrategies(TLogContext &logCtx, TPutResultVec &outPutResults, const TBlobStorageGroupInfo::TGroupVDisks& expired,
+        bool accelerate);
     void RunStrategy(TLogContext &logCtx, const IStrategy& strategy, TPutResultVec &outPutResults,
         const TBlobStorageGroupInfo::TGroupVDisks& expired);
 
@@ -339,7 +315,7 @@ class TPutImpl {
     void ProcessResponseCommonPart(TProtobuf& record) {
         Y_ABORT_UNLESS(record.HasStatus());
         const NKikimrProto::EReplyStatus status = record.GetStatus();
-        Y_ABORT_UNLESS(status != NKikimrProto::BLOCKED && status != NKikimrProto::RACE && status != NKikimrProto::DEADLINE);
+        Y_ABORT_UNLESS(status != NKikimrProto::RACE);
         if (record.HasStatusFlags()) {
             StatusFlags.Merge(record.GetStatusFlags());
         }
diff --git a/ydb/core/blobstorage/dsproxy/ut/dsproxy_put_ut.cpp b/ydb/core/blobstorage/dsproxy/ut/dsproxy_put_ut.cpp
index 09dca39bb5fd..2af3baccace5 100644
--- a/ydb/core/blobstorage/dsproxy/ut/dsproxy_put_ut.cpp
+++ b/ydb/core/blobstorage/dsproxy/ut/dsproxy_put_ut.cpp
@@ -76,7 +76,7 @@ void TestPutMaxPartCountOnHandoff(TErasureType::EErasureSpecies erasureSpecies)
     TPutImpl::TPutResultVec putResults;
 
     putImpl.GenerateInitialRequests(logCtx, partSetSingleton);
-    putImpl.Step(logCtx, putResults, {&group.GetInfo()->GetTopology()});
+    putImpl.Step(logCtx, putResults, {&group.GetInfo()->GetTopology()}, false);
     auto vPuts = putImpl.GeneratePutRequests();
     group.SetError(0, NKikimrProto::ERROR);
 
@@ -119,7 +119,7 @@ void TestPutMaxPartCountOnHandoff(TErasureType::EErasureSpecies erasureSpecies)
         vPutResult.MakeError(status, TString(), vPut.Record);
 
         putImpl.ProcessResponse(vPutResult);
-        putImpl.Step(logCtx, putResults, {&group.GetInfo()->GetTopology()});
+        putImpl.Step(logCtx, putResults, {&group.GetInfo()->GetTopology()}, false);
         auto nextVPuts = putImpl.GeneratePutRequests();
 
         if (putResults.size()) {
@@ -273,7 +273,7 @@ struct TTestPutAllOk {
             }
 
             std::visit([&](auto &ev) { putImpl.ProcessResponse(*ev); }, vPutResults[resIdx]);
-            putImpl.Step(LogCtx, putResults, &Group.GetInfo()->GetTopology());
+            putImpl.Step(LogCtx, putResults, &Group.GetInfo()->GetTopology(), false);
             auto vPuts = putImpl.GeneratePutRequests();
             if (putResults.size() == BlobCount) {
                 break;
@@ -309,7 +309,7 @@ struct TTestPutAllOk {
             }
 
             putImpl->GenerateInitialRequests(LogCtx, PartSets);
-            putImpl->Step(LogCtx, putResults, &Group.GetInfo()->GetTopology());
+            putImpl->Step(LogCtx, putResults, &Group.GetInfo()->GetTopology(), false);
             auto vPuts = putImpl->GeneratePutRequests();
             UNIT_ASSERT(vPuts.size() == 6 || !IsVPut);
             TDeque<TPutResultEvent> vPutResults;
@@ -367,7 +367,7 @@ Y_UNIT_TEST(TestMirror3dcWith3x3MinLatencyMod) {
     ErasureSplit((TErasureType::ECrcMode)blobId.CrcMode(), env.Info->Type, TRope(encryptedData), partSetSingleton[0]);
     putImpl.GenerateInitialRequests(logCtx, partSetSingleton);
     TPutImpl::TPutResultVec putResults;
-    putImpl.Step(logCtx, putResults, &env.Info->GetTopology());
+    putImpl.Step(logCtx, putResults, &env.Info->GetTopology(), false);
     auto vPuts = putImpl.GeneratePutRequests();
 
     UNIT_ASSERT_VALUES_EQUAL(vPuts.size(), 9);
diff --git a/ydb/core/blobstorage/dsproxy/ut_strategy/strategy_ut.cpp b/ydb/core/blobstorage/dsproxy/ut_strategy/strategy_ut.cpp
index 8b77cc4ee6b8..64ace509dd63 100644
--- a/ydb/core/blobstorage/dsproxy/ut_strategy/strategy_ut.cpp
+++ b/ydb/core/blobstorage/dsproxy/ut_strategy/strategy_ut.cpp
@@ -105,7 +105,7 @@ void RunStrategyTest(TBlobStorageGroupType type) {
         TLogoBlobID id(1'000'000'000, 1, 1, 0, data.size(), 0);
         std::vector<TRope> parts(type.TotalPartCount());
         ErasureSplit(TBlobStorageGroupType::CrcModeNone, type, TRope(data), parts);
-        blackboard.RegisterBlobForPut(id);
+        blackboard.RegisterBlobForPut(id, 0);
         for (ui32 i = 0; i < parts.size(); ++i) {
             blackboard.AddPartToPut(id, i, TRope(parts[i]));
         }
diff --git a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.darwin-arm64.txt b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.darwin-arm64.txt
index 6f2136d8d1d8..51b840c6a43a 100644
--- a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.darwin-arm64.txt
@@ -12,6 +12,7 @@ target_link_libraries(ydb-core-blobstorage-incrhuge-ut PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   library-actors-protos
   ydb-core-blobstorage
   core-blobstorage-incrhuge
diff --git a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.darwin-x86_64.txt b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.darwin-x86_64.txt
index 832140620685..f0293a9024ff 100644
--- a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.darwin-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-incrhuge-ut PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   library-actors-protos
   ydb-core-blobstorage
   core-blobstorage-incrhuge
diff --git a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.linux-aarch64.txt b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.linux-aarch64.txt
index 0966d091dc40..4b62e15a07c2 100644
--- a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.linux-aarch64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-incrhuge-ut PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   library-actors-protos
   ydb-core-blobstorage
   core-blobstorage-incrhuge
diff --git a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.linux-x86_64.txt b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.linux-x86_64.txt
index 88ae35a5387f..1b632fce1e63 100644
--- a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.linux-x86_64.txt
@@ -14,6 +14,7 @@ target_link_libraries(ydb-core-blobstorage-incrhuge-ut PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   library-actors-protos
   ydb-core-blobstorage
   core-blobstorage-incrhuge
diff --git a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.windows-x86_64.txt b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.windows-x86_64.txt
index c81f9ff136bf..264ff4621bdf 100644
--- a/ydb/core/blobstorage/incrhuge/ut/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/blobstorage/incrhuge/ut/CMakeLists.windows-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-incrhuge-ut PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   library-actors-protos
   ydb-core-blobstorage
   core-blobstorage-incrhuge
diff --git a/ydb/core/blobstorage/incrhuge/ut/ya.make b/ydb/core/blobstorage/incrhuge/ut/ya.make
index 1dab38ef3f26..c7936f615c71 100644
--- a/ydb/core/blobstorage/incrhuge/ut/ya.make
+++ b/ydb/core/blobstorage/incrhuge/ut/ya.make
@@ -12,6 +12,7 @@ ELSE()
 ENDIF()
 
 PEERDIR(
+    ydb/apps/version
     ydb/library/actors/protos
     ydb/core/blobstorage
     ydb/core/blobstorage/incrhuge
diff --git a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.darwin-arm64.txt b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.darwin-arm64.txt
index 5e5bdff5c9c6..60160019c364 100644
--- a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.darwin-arm64.txt
@@ -13,6 +13,7 @@ target_link_libraries(blobstorage-ut_blobstorage-lib PUBLIC
   yutil
   cpp-digest-md5
   cpp-testing-unittest
+  version_definition
   ydb-core-base
   ydb-core-blob_depot
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.darwin-x86_64.txt b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.darwin-x86_64.txt
index 5e5bdff5c9c6..60160019c364 100644
--- a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.darwin-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(blobstorage-ut_blobstorage-lib PUBLIC
   yutil
   cpp-digest-md5
   cpp-testing-unittest
+  version_definition
   ydb-core-base
   ydb-core-blob_depot
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.linux-aarch64.txt b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.linux-aarch64.txt
index be9f296fefb5..26965076f973 100644
--- a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.linux-aarch64.txt
@@ -14,6 +14,7 @@ target_link_libraries(blobstorage-ut_blobstorage-lib PUBLIC
   yutil
   cpp-digest-md5
   cpp-testing-unittest
+  version_definition
   ydb-core-base
   ydb-core-blob_depot
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.linux-x86_64.txt b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.linux-x86_64.txt
index be9f296fefb5..26965076f973 100644
--- a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.linux-x86_64.txt
@@ -14,6 +14,7 @@ target_link_libraries(blobstorage-ut_blobstorage-lib PUBLIC
   yutil
   cpp-digest-md5
   cpp-testing-unittest
+  version_definition
   ydb-core-base
   ydb-core-blob_depot
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.windows-x86_64.txt b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.windows-x86_64.txt
index 5e5bdff5c9c6..60160019c364 100644
--- a/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/blobstorage/ut_blobstorage/lib/CMakeLists.windows-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(blobstorage-ut_blobstorage-lib PUBLIC
   yutil
   cpp-digest-md5
   cpp-testing-unittest
+  version_definition
   ydb-core-base
   ydb-core-blob_depot
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_blobstorage/lib/ya.make b/ydb/core/blobstorage/ut_blobstorage/lib/ya.make
index 0572ce32b6a4..58b44a1be8e2 100644
--- a/ydb/core/blobstorage/ut_blobstorage/lib/ya.make
+++ b/ydb/core/blobstorage/ut_blobstorage/lib/ya.make
@@ -16,6 +16,7 @@ SRCS(
 PEERDIR(
     library/cpp/digest/md5
     library/cpp/testing/unittest
+    ydb/apps/version
     ydb/core/base
     ydb/core/blob_depot
     ydb/core/blobstorage/backpressure
diff --git a/ydb/core/blobstorage/ut_group/CMakeLists.darwin-arm64.txt b/ydb/core/blobstorage/ut_group/CMakeLists.darwin-arm64.txt
index 353b5cf2d3de..ac67abed5452 100644
--- a/ydb/core/blobstorage/ut_group/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/blobstorage/ut_group/CMakeLists.darwin-arm64.txt
@@ -12,6 +12,7 @@ target_link_libraries(ydb-core-blobstorage-ut_group PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-crypto
diff --git a/ydb/core/blobstorage/ut_group/CMakeLists.darwin-x86_64.txt b/ydb/core/blobstorage/ut_group/CMakeLists.darwin-x86_64.txt
index 6312ab3ac606..e0c4daf3fe72 100644
--- a/ydb/core/blobstorage/ut_group/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/blobstorage/ut_group/CMakeLists.darwin-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_group PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-crypto
diff --git a/ydb/core/blobstorage/ut_group/CMakeLists.linux-aarch64.txt b/ydb/core/blobstorage/ut_group/CMakeLists.linux-aarch64.txt
index 746f31afd9b7..8aee02b36535 100644
--- a/ydb/core/blobstorage/ut_group/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/blobstorage/ut_group/CMakeLists.linux-aarch64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_group PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-crypto
diff --git a/ydb/core/blobstorage/ut_group/CMakeLists.linux-x86_64.txt b/ydb/core/blobstorage/ut_group/CMakeLists.linux-x86_64.txt
index 9d161e135ce8..a050e4a489be 100644
--- a/ydb/core/blobstorage/ut_group/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/blobstorage/ut_group/CMakeLists.linux-x86_64.txt
@@ -14,6 +14,7 @@ target_link_libraries(ydb-core-blobstorage-ut_group PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-crypto
diff --git a/ydb/core/blobstorage/ut_group/CMakeLists.windows-x86_64.txt b/ydb/core/blobstorage/ut_group/CMakeLists.windows-x86_64.txt
index 2d97bd8714b7..f47b37d786a1 100644
--- a/ydb/core/blobstorage/ut_group/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/blobstorage/ut_group/CMakeLists.windows-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_group PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-crypto
diff --git a/ydb/core/blobstorage/ut_group/ya.make b/ydb/core/blobstorage/ut_group/ya.make
index aa0a9c0ebab8..88e601a9eaa3 100644
--- a/ydb/core/blobstorage/ut_group/ya.make
+++ b/ydb/core/blobstorage/ut_group/ya.make
@@ -16,6 +16,7 @@ ELSE()
 ENDIF()
 
 PEERDIR(
+    ydb/apps/version
     ydb/library/actors/interconnect/mock
     library/cpp/testing/unittest
     ydb/core/blobstorage/crypto
diff --git a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.darwin-arm64.txt b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.darwin-arm64.txt
index cd619388db4d..4c7cad058acb 100644
--- a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.darwin-arm64.txt
@@ -12,6 +12,7 @@ target_link_libraries(ydb-core-blobstorage-ut_mirror3of4 PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.darwin-x86_64.txt b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.darwin-x86_64.txt
index 23d89529f7cc..ce6f8ca30e0f 100644
--- a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.darwin-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_mirror3of4 PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.linux-aarch64.txt b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.linux-aarch64.txt
index e6a8877d5f34..dc13b4d1f416 100644
--- a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.linux-aarch64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_mirror3of4 PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.linux-x86_64.txt b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.linux-x86_64.txt
index 9f496b5c44c0..a696701b1d63 100644
--- a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.linux-x86_64.txt
@@ -14,6 +14,7 @@ target_link_libraries(ydb-core-blobstorage-ut_mirror3of4 PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.windows-x86_64.txt b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.windows-x86_64.txt
index 37faed49d804..01fde9d224d7 100644
--- a/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/blobstorage/ut_mirror3of4/CMakeLists.windows-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_mirror3of4 PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   actors-interconnect-mock
   cpp-testing-unittest
   core-blobstorage-backpressure
diff --git a/ydb/core/blobstorage/ut_mirror3of4/ya.make b/ydb/core/blobstorage/ut_mirror3of4/ya.make
index 4d89f5e383fd..bfd43f049cd1 100644
--- a/ydb/core/blobstorage/ut_mirror3of4/ya.make
+++ b/ydb/core/blobstorage/ut_mirror3of4/ya.make
@@ -9,6 +9,7 @@ SIZE(MEDIUM)
 TIMEOUT(600)
 
 PEERDIR(
+    ydb/apps/version
     ydb/library/actors/interconnect/mock
     library/cpp/testing/unittest
     ydb/core/blobstorage/backpressure
diff --git a/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/CMakeLists.linux-aarch64.txt b/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/CMakeLists.linux-aarch64.txt
index c4f854dfecec..aed8d4e44586 100644
--- a/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/CMakeLists.linux-aarch64.txt
@@ -12,6 +12,7 @@ target_link_libraries(pdiskfit PUBLIC
   contrib-libs-linux-headers
   contrib-libs-cxxsupp
   yutil
+  version_definition
   library-cpp-getopt
   cpp-string_utils-parse_size
   ydb-core-blobstorage
diff --git a/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/CMakeLists.linux-x86_64.txt b/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/CMakeLists.linux-x86_64.txt
index ff3d93d99608..25dd867af41f 100644
--- a/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/CMakeLists.linux-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(pdiskfit PUBLIC
   contrib-libs-cxxsupp
   yutil
   library-cpp-cpuid_check
+  version_definition
   library-cpp-getopt
   cpp-string_utils-parse_size
   ydb-core-blobstorage
diff --git a/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/ya.make b/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/ya.make
index 3f1ae9920495..ef98e816685e 100644
--- a/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/ya.make
+++ b/ydb/core/blobstorage/ut_pdiskfit/pdiskfit/ya.make
@@ -6,6 +6,7 @@ IF (OS_LINUX)
     )
 
     PEERDIR(
+        ydb/apps/version
         library/cpp/getopt
         library/cpp/string_utils/parse_size
         ydb/core/blobstorage
diff --git a/ydb/core/blobstorage/ut_pdiskfit/ut/CMakeLists.linux-aarch64.txt b/ydb/core/blobstorage/ut_pdiskfit/ut/CMakeLists.linux-aarch64.txt
index 629ca9bf1cd2..6a6dce60f5a0 100644
--- a/ydb/core/blobstorage/ut_pdiskfit/ut/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/blobstorage/ut_pdiskfit/ut/CMakeLists.linux-aarch64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_pdiskfit-ut PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   ydb-core-blobstorage
   blobstorage-ut_pdiskfit-lib
 )
diff --git a/ydb/core/blobstorage/ut_pdiskfit/ut/CMakeLists.linux-x86_64.txt b/ydb/core/blobstorage/ut_pdiskfit/ut/CMakeLists.linux-x86_64.txt
index ea899890610e..5b779405228d 100644
--- a/ydb/core/blobstorage/ut_pdiskfit/ut/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/blobstorage/ut_pdiskfit/ut/CMakeLists.linux-x86_64.txt
@@ -14,6 +14,7 @@ target_link_libraries(ydb-core-blobstorage-ut_pdiskfit-ut PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   ydb-core-blobstorage
   blobstorage-ut_pdiskfit-lib
 )
diff --git a/ydb/core/blobstorage/ut_pdiskfit/ut/ya.make b/ydb/core/blobstorage/ut_pdiskfit/ut/ya.make
index b4e9ff9707ba..31b328c8a37f 100644
--- a/ydb/core/blobstorage/ut_pdiskfit/ut/ya.make
+++ b/ydb/core/blobstorage/ut_pdiskfit/ut/ya.make
@@ -16,6 +16,7 @@ IF (OS_LINUX AND NOT WITH_VALGRIND)
     ENDIF ()
 
     PEERDIR(
+        ydb/apps/version
         ydb/core/blobstorage
         ydb/core/blobstorage/ut_pdiskfit/lib
     )
diff --git a/ydb/core/blobstorage/ut_vdisk/CMakeLists.darwin-arm64.txt b/ydb/core/blobstorage/ut_vdisk/CMakeLists.darwin-arm64.txt
index 84b2321057db..fe3bd0df4a23 100644
--- a/ydb/core/blobstorage/ut_vdisk/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/blobstorage/ut_vdisk/CMakeLists.darwin-arm64.txt
@@ -20,6 +20,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk PUBLIC
   yutil
   cpp-testing-unittest_main
   ydb-core-blobstorage
+  version_definition
   library-actors-protos
   library-cpp-codecs
   ydb-core-base
diff --git a/ydb/core/blobstorage/ut_vdisk/CMakeLists.darwin-x86_64.txt b/ydb/core/blobstorage/ut_vdisk/CMakeLists.darwin-x86_64.txt
index 0c581b6e4f34..2b13c91661e2 100644
--- a/ydb/core/blobstorage/ut_vdisk/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/blobstorage/ut_vdisk/CMakeLists.darwin-x86_64.txt
@@ -21,6 +21,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   ydb-core-blobstorage
+  version_definition
   library-actors-protos
   library-cpp-codecs
   ydb-core-base
diff --git a/ydb/core/blobstorage/ut_vdisk/CMakeLists.linux-aarch64.txt b/ydb/core/blobstorage/ut_vdisk/CMakeLists.linux-aarch64.txt
index 2260e8b0bcb1..30f3761dce83 100644
--- a/ydb/core/blobstorage/ut_vdisk/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/blobstorage/ut_vdisk/CMakeLists.linux-aarch64.txt
@@ -21,6 +21,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk PUBLIC
   yutil
   cpp-testing-unittest_main
   ydb-core-blobstorage
+  version_definition
   library-actors-protos
   library-cpp-codecs
   ydb-core-base
diff --git a/ydb/core/blobstorage/ut_vdisk/CMakeLists.linux-x86_64.txt b/ydb/core/blobstorage/ut_vdisk/CMakeLists.linux-x86_64.txt
index 9d8dbd248282..c350eb55659e 100644
--- a/ydb/core/blobstorage/ut_vdisk/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/blobstorage/ut_vdisk/CMakeLists.linux-x86_64.txt
@@ -22,6 +22,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   ydb-core-blobstorage
+  version_definition
   library-actors-protos
   library-cpp-codecs
   ydb-core-base
diff --git a/ydb/core/blobstorage/ut_vdisk/CMakeLists.windows-x86_64.txt b/ydb/core/blobstorage/ut_vdisk/CMakeLists.windows-x86_64.txt
index 7a391ae50e24..284a5a11ac12 100644
--- a/ydb/core/blobstorage/ut_vdisk/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/blobstorage/ut_vdisk/CMakeLists.windows-x86_64.txt
@@ -21,6 +21,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   ydb-core-blobstorage
+  version_definition
   library-actors-protos
   library-cpp-codecs
   ydb-core-base
diff --git a/ydb/core/blobstorage/ut_vdisk/ya.make b/ydb/core/blobstorage/ut_vdisk/ya.make
index 6b95175079a9..526d1e82de93 100644
--- a/ydb/core/blobstorage/ut_vdisk/ya.make
+++ b/ydb/core/blobstorage/ut_vdisk/ya.make
@@ -18,6 +18,7 @@ SRCS(
 )
 
 PEERDIR(
+    ydb/apps/version
     ydb/library/actors/protos
     library/cpp/codecs
     ydb/core/base
diff --git a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.darwin-arm64.txt b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.darwin-arm64.txt
index ca0fee8a8348..3f16b18c6b95 100644
--- a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.darwin-arm64.txt
@@ -12,6 +12,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk2 PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   cpp-testing-unittest
   core-blobstorage-backpressure
   core-blobstorage-groupinfo
diff --git a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.darwin-x86_64.txt b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.darwin-x86_64.txt
index 0a4fdd94186d..a163d72935b2 100644
--- a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.darwin-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk2 PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   cpp-testing-unittest
   core-blobstorage-backpressure
   core-blobstorage-groupinfo
diff --git a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.linux-aarch64.txt b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.linux-aarch64.txt
index 137fc6d3b9af..767d418c4ebf 100644
--- a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.linux-aarch64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk2 PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   cpp-testing-unittest
   core-blobstorage-backpressure
   core-blobstorage-groupinfo
diff --git a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.linux-x86_64.txt b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.linux-x86_64.txt
index dff8445d7de9..b6cfc5355922 100644
--- a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.linux-x86_64.txt
@@ -14,6 +14,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk2 PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   cpp-testing-unittest
   core-blobstorage-backpressure
   core-blobstorage-groupinfo
diff --git a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.windows-x86_64.txt b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.windows-x86_64.txt
index b4109c6cb45b..19ffd0ac9b8f 100644
--- a/ydb/core/blobstorage/ut_vdisk2/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/blobstorage/ut_vdisk2/CMakeLists.windows-x86_64.txt
@@ -13,6 +13,7 @@ target_link_libraries(ydb-core-blobstorage-ut_vdisk2 PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   cpp-testing-unittest
   core-blobstorage-backpressure
   core-blobstorage-groupinfo
diff --git a/ydb/core/blobstorage/ut_vdisk2/ya.make b/ydb/core/blobstorage/ut_vdisk2/ya.make
index 8d2d47103207..394f0576b6ac 100644
--- a/ydb/core/blobstorage/ut_vdisk2/ya.make
+++ b/ydb/core/blobstorage/ut_vdisk2/ya.make
@@ -16,6 +16,7 @@ SRCS(
 )
 
 PEERDIR(
+    ydb/apps/version
     library/cpp/testing/unittest
     ydb/core/blobstorage/backpressure
     ydb/core/blobstorage/groupinfo
diff --git a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.darwin-arm64.txt b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.darwin-arm64.txt
index 7c716b4a5553..578fa0238b10 100644
--- a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.darwin-arm64.txt
@@ -16,6 +16,7 @@ target_link_libraries(ydb-core-blobstorage-vdisk-syncer-ut PUBLIC
   yutil
   cpp-testing-unittest_main
   blobstorage-vdisk-syncer
+  version_definition
   library-cpp-getopt
   library-cpp-svnversion
   ydb-core-base
diff --git a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.darwin-x86_64.txt b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.darwin-x86_64.txt
index 75256f3af926..a4157f2d94fe 100644
--- a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.darwin-x86_64.txt
@@ -17,6 +17,7 @@ target_link_libraries(ydb-core-blobstorage-vdisk-syncer-ut PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   blobstorage-vdisk-syncer
+  version_definition
   library-cpp-getopt
   library-cpp-svnversion
   ydb-core-base
diff --git a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.linux-aarch64.txt b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.linux-aarch64.txt
index f4f1ee69f448..cfee695d7895 100644
--- a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.linux-aarch64.txt
@@ -17,6 +17,7 @@ target_link_libraries(ydb-core-blobstorage-vdisk-syncer-ut PUBLIC
   yutil
   cpp-testing-unittest_main
   blobstorage-vdisk-syncer
+  version_definition
   library-cpp-getopt
   library-cpp-svnversion
   ydb-core-base
diff --git a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.linux-x86_64.txt b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.linux-x86_64.txt
index 996ac0bd9406..8ce55a24c606 100644
--- a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.linux-x86_64.txt
@@ -18,6 +18,7 @@ target_link_libraries(ydb-core-blobstorage-vdisk-syncer-ut PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   blobstorage-vdisk-syncer
+  version_definition
   library-cpp-getopt
   library-cpp-svnversion
   ydb-core-base
diff --git a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.windows-x86_64.txt b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.windows-x86_64.txt
index 657e7e41f3c3..8eb0e7465a02 100644
--- a/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/blobstorage/vdisk/syncer/ut/CMakeLists.windows-x86_64.txt
@@ -17,6 +17,7 @@ target_link_libraries(ydb-core-blobstorage-vdisk-syncer-ut PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   blobstorage-vdisk-syncer
+  version_definition
   library-cpp-getopt
   library-cpp-svnversion
   ydb-core-base
diff --git a/ydb/core/blobstorage/vdisk/syncer/ut/ya.make b/ydb/core/blobstorage/vdisk/syncer/ut/ya.make
index 8844b2aeafd0..21f122b246d4 100644
--- a/ydb/core/blobstorage/vdisk/syncer/ut/ya.make
+++ b/ydb/core/blobstorage/vdisk/syncer/ut/ya.make
@@ -7,6 +7,7 @@ TIMEOUT(600)
 SIZE(MEDIUM)
 
 PEERDIR(
+    ydb/apps/version
     library/cpp/getopt
     library/cpp/svnversion
     ydb/core/base
diff --git a/ydb/core/cms/api_adapters.cpp b/ydb/core/cms/api_adapters.cpp
index 18fe27185554..55572dbb9931 100644
--- a/ydb/core/cms/api_adapters.cpp
+++ b/ydb/core/cms/api_adapters.cpp
@@ -163,6 +163,7 @@ class TListClusterNodes: public TAdapterActor<
         out.set_host(in.Host);
         out.set_port(in.IcPort);
         out.set_state(ConvertNodeState(in.State));
+        out.set_version(in.Version);
         *out.mutable_start_time() = TimeUtil::MicrosecondsToTimestamp(in.StartTime.GetValue());
 
         auto& location = *out.mutable_location();
diff --git a/ydb/core/cms/cms_ut_common.cpp b/ydb/core/cms/cms_ut_common.cpp
index ab8843330d19..876bde9982ef 100644
--- a/ydb/core/cms/cms_ut_common.cpp
+++ b/ydb/core/cms/cms_ut_common.cpp
@@ -486,7 +486,13 @@ static void SetupServices(TTestActorRuntime &runtime, const TTestEnvOpts &option
     NKikimrConfig::TAppConfig appConfig;
     appConfig.MutableBootstrapConfig()->CopyFrom(TFakeNodeWhiteboardService::BootstrapConfig);
     runtime.AddLocalService(MakeConfigsDispatcherID(runtime.GetNodeId(0)),
-                            TActorSetupCmd(CreateConfigsDispatcher(appConfig, {}), TMailboxType::Simple, 0), 0);
+                            TActorSetupCmd(CreateConfigsDispatcher(
+                                NKikimr::NConsole::TConfigsDispatcherInitInfo {
+                                    .InitialConfig = appConfig,
+                                }),
+                                TMailboxType::Simple,
+                                0),
+                            0);
 
     runtime.Initialize(app.Unwrap());
     auto dnsConfig = new TDynamicNameserviceConfig();
diff --git a/ydb/core/cms/console/configs_dispatcher.cpp b/ydb/core/cms/console/configs_dispatcher.cpp
index bd6b40d2edf8..d1834fe1018d 100644
--- a/ydb/core/cms/console/configs_dispatcher.cpp
+++ b/ydb/core/cms/console/configs_dispatcher.cpp
@@ -133,12 +133,7 @@ class TConfigsDispatcher : public TActorBootstrapped<TConfigsDispatcher> {
         return NKikimrServices::TActivity::CONFIGS_DISPATCHER_ACTOR;
     }
 
-    TConfigsDispatcher(
-        const NKikimrConfig::TAppConfig &config,
-        const TMap<TString, TString> &labels,
-        const NKikimrConfig::TAppConfig &initialCmsConfig,
-        const NKikimrConfig::TAppConfig &initialCmsYamlConfig,
-        const THashMap<ui32, TConfigItemInfo> &configInitInfo);
+    TConfigsDispatcher(const TConfigsDispatcherInitInfo& initInfo);
 
     void Bootstrap();
 
@@ -163,6 +158,8 @@ class TConfigsDispatcher : public TActorBootstrapped<TConfigsDispatcher> {
 
     NKikimrConfig::TAppConfig ParseYamlProtoConfig();
 
+    TDynBitMap FilterKinds(const TDynBitMap& in);
+
     void Handle(NMon::TEvHttpInfo::TPtr &ev);
     void Handle(TEvInterconnect::TEvNodesInfo::TPtr &ev);
     void Handle(TEvConsole::TEvConfigSubscriptionNotification::TPtr &ev);
@@ -230,12 +227,11 @@ class TConfigsDispatcher : public TActorBootstrapped<TConfigsDispatcher> {
 
 
 private:
-    TMap<TString, TString> Labels;
-    const NKikimrConfig::TAppConfig InitialConfig;
+    const TMap<TString, TString> Labels;
+    const std::variant<std::monostate, TDenyList, TAllowList> ItemsServeRules;
+    const NKikimrConfig::TAppConfig BaseConfig;
     NKikimrConfig::TAppConfig CurrentConfig;
-    const NKikimrConfig::TAppConfig InitialCmsConfig;
-    const NKikimrConfig::TAppConfig InitialCmsYamlConfig;
-    const THashMap<ui32, TConfigItemInfo> ConfigInitInfo;
+    const std::optional<TDebugInfo> DebugInfo;
     ui64 NextRequestCookie;
     TVector<TActorId> HttpRequests;
     TActorId CommonSubscriptionClient;
@@ -255,21 +251,14 @@ class TConfigsDispatcher : public TActorBootstrapped<TConfigsDispatcher> {
 
 };
 
-TConfigsDispatcher::TConfigsDispatcher(
-    const NKikimrConfig::TAppConfig &config,
-    const TMap<TString, TString> &labels,
-    const NKikimrConfig::TAppConfig &initialCmsConfig,
-    const NKikimrConfig::TAppConfig &initialCmsYamlConfig,
-    const THashMap<ui32, TConfigItemInfo> &configInitInfo)
-        : Labels(labels)
-        , InitialConfig(config)
-        , CurrentConfig(config)
-        , InitialCmsConfig(initialCmsConfig)
-        , InitialCmsYamlConfig(initialCmsYamlConfig)
-        , ConfigInitInfo(configInitInfo)
+TConfigsDispatcher::TConfigsDispatcher(const TConfigsDispatcherInitInfo& initInfo)
+        : Labels(initInfo.Labels)
+        , ItemsServeRules(initInfo.ItemsServeRules)
+        , BaseConfig(initInfo.InitialConfig)
+        , CurrentConfig(initInfo.InitialConfig)
+        , DebugInfo(initInfo.DebugInfo)
         , NextRequestCookie(Now().GetValue())
-{
-}
+{}
 
 void TConfigsDispatcher::Bootstrap()
 {
@@ -400,9 +389,12 @@ void TConfigsDispatcher::ReplyMonJson(TActorId mailbox) {
     response.InsertValue("yaml_config", YamlConfig);
     response.InsertValue("resolved_json_config", NJson::ReadJsonFastTree(ResolvedJsonConfig, true));
     response.InsertValue("current_json_config", NJson::ReadJsonFastTree(NProtobufJson::Proto2Json(CurrentConfig, NYamlConfig::GetProto2JsonConfig()), true));
-    response.InsertValue("initial_json_config", NJson::ReadJsonFastTree(NProtobufJson::Proto2Json(InitialConfig, NYamlConfig::GetProto2JsonConfig()), true));
-    response.InsertValue("initial_cms_json_config", NJson::ReadJsonFastTree(NProtobufJson::Proto2Json(InitialCmsConfig, NYamlConfig::GetProto2JsonConfig()), true));
-    response.InsertValue("initial_cms_yaml_json_config", NJson::ReadJsonFastTree(NProtobufJson::Proto2Json(InitialCmsYamlConfig, NYamlConfig::GetProto2JsonConfig()), true));
+
+    if (DebugInfo) {
+        response.InsertValue("initial_json_config", NJson::ReadJsonFastTree(NProtobufJson::Proto2Json(DebugInfo->StaticConfig, NYamlConfig::GetProto2JsonConfig()), true));
+        response.InsertValue("initial_cms_json_config", NJson::ReadJsonFastTree(NProtobufJson::Proto2Json(DebugInfo->OldDynConfig, NYamlConfig::GetProto2JsonConfig()), true));
+        response.InsertValue("initial_cms_yaml_json_config", NJson::ReadJsonFastTree(NProtobufJson::Proto2Json(DebugInfo->NewDynConfig, NYamlConfig::GetProto2JsonConfig()), true));
+    }
 
     NJson::WriteJson(&str, &response, {});
 
@@ -419,6 +411,29 @@ void TConfigsDispatcher::Handle(TEvConsole::TEvConfigNotificationRequest::TPtr &
     Send(ev->Sender, resp.Release(), 0, ev->Cookie);
 }
 
+
+TDynBitMap TConfigsDispatcher::FilterKinds(const TDynBitMap& in) {
+    TDynBitMap out;
+
+    if (const auto* denyList = std::get_if<TDenyList>(&ItemsServeRules)) {
+        Y_FOR_EACH_BIT(kind, in) {
+            if (!denyList->Items.contains(kind)) {
+                out.Set(kind);
+            }
+        }
+    } else if (const auto* allowList = std::get_if<TAllowList>(&ItemsServeRules)) {
+        Y_FOR_EACH_BIT(kind, in) {
+            if (allowList->Items.contains(kind)) {
+                out.Set(kind);
+            }
+        }
+    } else {
+        out = in;
+    }
+
+    return out;
+}
+
 void TConfigsDispatcher::Handle(TEvInterconnect::TEvNodesInfo::TPtr &ev)
 {
     Y_UNUSED(ev);
@@ -494,14 +509,14 @@ void TConfigsDispatcher::Handle(TEvInterconnect::TEvNodesInfo::TPtr &ev)
                     str << "Coloring: \"<font color=\"red\">config not set</font>\","
                         << " \"<font color=\"green\">config set in dynamic config</font>\", \"<font color=\"#007bff\">config set in static config</font>\"" << Endl;
                     str << "</div>" << Endl;
-                    NHttp::OutputRichConfigHTML(str, InitialConfig, YamlProtoConfig, CurrentConfig, DYNAMIC_KINDS, NON_YAML_KINDS, YamlConfigEnabled);
+                    NHttp::OutputRichConfigHTML(str, BaseConfig, YamlProtoConfig, CurrentConfig, DYNAMIC_KINDS, NON_YAML_KINDS, YamlConfigEnabled);
                 }
                 str << "<br />" << Endl;
                 COLLAPSED_REF_CONTENT("effective-startup-config", "Effective startup config") {
                     str << "<div class=\"alert alert-primary tab-left\" role=\"alert\">" << Endl;
                     str << "Some of these configs may be overwritten by dynamic ones." << Endl;
                     str << "</div>" << Endl;
-                    NHttp::OutputConfigHTML(str, InitialConfig);
+                    NHttp::OutputConfigHTML(str, BaseConfig);
                 }
                 str << "<br />" << Endl;
                 COLLAPSED_REF_CONTENT("effective-dynamic-config", "Effective dynamic config") {
@@ -510,10 +525,10 @@ void TConfigsDispatcher::Handle(TEvInterconnect::TEvNodesInfo::TPtr &ev)
                     str << "</div>" << Endl;
                     NKikimrConfig::TAppConfig trunc;
                     if (YamlConfigEnabled) {
-                        ReplaceConfigItems(YamlProtoConfig, trunc, KindsToBitMap(DYNAMIC_KINDS), InitialConfig);
-                        ReplaceConfigItems(CurrentConfig, trunc, KindsToBitMap(NON_YAML_KINDS), trunc, false);
+                        ReplaceConfigItems(YamlProtoConfig, trunc, FilterKinds(KindsToBitMap(DYNAMIC_KINDS)), BaseConfig);
+                        ReplaceConfigItems(CurrentConfig, trunc, FilterKinds(KindsToBitMap(NON_YAML_KINDS)), trunc, false);
                     } else {
-                        ReplaceConfigItems(CurrentConfig, trunc, KindsToBitMap(DYNAMIC_KINDS), InitialConfig);
+                        ReplaceConfigItems(CurrentConfig, trunc, FilterKinds(KindsToBitMap(DYNAMIC_KINDS)), BaseConfig);
                     }
                     NHttp::OutputConfigHTML(str, trunc);
                 }
@@ -521,7 +536,15 @@ void TConfigsDispatcher::Handle(TEvInterconnect::TEvNodesInfo::TPtr &ev)
                 COLLAPSED_REF_CONTENT("debug-info", "Debug info") {
                     DIV_CLASS("tab-left") {
                         COLLAPSED_REF_CONTENT("effective-config-debug-info", "Effective config debug info") {
-                            NHttp::OutputConfigDebugInfoHTML(str, InitialConfig, YamlProtoConfig, CurrentConfig, ConfigInitInfo, DYNAMIC_KINDS, NON_YAML_KINDS, YamlConfigEnabled);
+                            NHttp::OutputConfigDebugInfoHTML(
+                                str,
+                                BaseConfig,
+                                YamlProtoConfig,
+                                CurrentConfig,
+                                {DebugInfo ? DebugInfo->InitInfo : THashMap<ui32, TConfigItemInfo>{}},
+                                DYNAMIC_KINDS,
+                                NON_YAML_KINDS,
+                                YamlConfigEnabled);
                         }
                         str << "<br />" << Endl;
                         COLLAPSED_REF_CONTENT("state", "State") {
@@ -651,15 +674,17 @@ void TConfigsDispatcher::Handle(TEvInterconnect::TEvNodesInfo::TPtr &ev)
                         }
                         str << "<br />" << Endl;
                         COLLAPSED_REF_CONTENT("initial-config", "Initial config") {
-                            NHttp::OutputConfigHTML(str, InitialConfig);
+                            NHttp::OutputConfigHTML(str, BaseConfig);
                         }
-                        str << "<br />" << Endl;
-                        COLLAPSED_REF_CONTENT("initial-cms-config", "Initial CMS config") {
-                            NHttp::OutputConfigHTML(str, InitialCmsConfig);
-                        }
-                        str << "<br />" << Endl;
-                        COLLAPSED_REF_CONTENT("initial-cms-yaml-config", "Initial CMS YAML config") {
-                            NHttp::OutputConfigHTML(str, InitialCmsYamlConfig);
+                        if  (DebugInfo) {
+                            str << "<br />" << Endl;
+                            COLLAPSED_REF_CONTENT("initial-cms-config", "Initial CMS config") {
+                                NHttp::OutputConfigHTML(str, DebugInfo->OldDynConfig);
+                            }
+                            str << "<br />" << Endl;
+                            COLLAPSED_REF_CONTENT("initial-cms-yaml-config", "Initial CMS YAML config") {
+                                NHttp::OutputConfigHTML(str, DebugInfo->NewDynConfig);
+                            }
                         }
                     }
                 }
@@ -742,7 +767,7 @@ void TConfigsDispatcher::Handle(TEvConsole::TEvConfigSubscriptionNotification::T
         bool hasAffectedKinds = false;
 
         if (subscription->Yaml && YamlConfigEnabled) {
-            ReplaceConfigItems(YamlProtoConfig, trunc, subscription->Kinds, InitialConfig);
+            ReplaceConfigItems(YamlProtoConfig, trunc, FilterKinds(subscription->Kinds), BaseConfig);
         } else {
             Y_FOR_EACH_BIT(kind, kinds) {
                 if (affectedKinds.contains(kind)) {
@@ -755,7 +780,7 @@ void TConfigsDispatcher::Handle(TEvConsole::TEvConfigSubscriptionNotification::T
                 continue;
             }
 
-            ReplaceConfigItems(ev->Get()->Record.GetConfig(), trunc, kinds, InitialConfig);
+            ReplaceConfigItems(ev->Get()->Record.GetConfig(), trunc, FilterKinds(kinds), BaseConfig);
         }
 
         if (hasAffectedKinds || !CompareConfigs(subscription->CurrentConfig.Config, trunc) || CurrentStateFunc() == &TThis::StateInit) {
@@ -820,9 +845,9 @@ void TConfigsDispatcher::Handle(TEvConfigsDispatcher::TEvGetConfigRequest::TPtr
     auto trunc = std::make_shared<NKikimrConfig::TAppConfig>();
     auto kinds = KindsToBitMap(ev->Get()->ConfigItemKinds);
     if (YamlConfigEnabled && yamlKinds) {
-        ReplaceConfigItems(YamlProtoConfig, *trunc, kinds, InitialConfig);
+        ReplaceConfigItems(YamlProtoConfig, *trunc, FilterKinds(kinds), BaseConfig);
     } else {
-        ReplaceConfigItems(CurrentConfig, *trunc, kinds, InitialConfig);
+        ReplaceConfigItems(CurrentConfig, *trunc, FilterKinds(kinds), BaseConfig);
     }
     resp->Config = trunc;
 
@@ -893,9 +918,9 @@ void TConfigsDispatcher::Handle(TEvConfigsDispatcher::TEvSetConfigSubscriptionRe
             subscription->UpdateInProcess = MakeHolder<TEvConsole::TEvConfigNotificationRequest>();
             NKikimrConfig::TAppConfig trunc;
             if (YamlConfigEnabled) {
-                ReplaceConfigItems(YamlProtoConfig, trunc, kinds, InitialConfig);
+                ReplaceConfigItems(YamlProtoConfig, trunc, FilterKinds(kinds), BaseConfig);
             } else {
-                ReplaceConfigItems(CurrentConfig, trunc, kinds, InitialConfig);
+                ReplaceConfigItems(CurrentConfig, trunc, FilterKinds(kinds), BaseConfig);
             }
             subscription->UpdateInProcess->Record.MutableConfig()->CopyFrom(trunc);
             Y_FOR_EACH_BIT(kind, kinds) {
@@ -997,14 +1022,8 @@ void TConfigsDispatcher::Handle(TEvConsole::TEvGetNodeLabelsRequest::TPtr &ev) {
     Send(ev->Sender, Response.Release());
 }
 
-IActor *CreateConfigsDispatcher(
-    const NKikimrConfig::TAppConfig &config,
-    const TMap<TString, TString> &labels,
-    const NKikimrConfig::TAppConfig &initialCmsConfig,
-    const NKikimrConfig::TAppConfig &initialCmsYamlConfig,
-    const THashMap<ui32, TConfigItemInfo> &configInitInfo)
-{
-    return new TConfigsDispatcher(config, labels, initialCmsConfig, initialCmsYamlConfig, configInitInfo);
+IActor *CreateConfigsDispatcher(const TConfigsDispatcherInitInfo& initInfo) {
+    return new TConfigsDispatcher(initInfo);
 }
 
 } // namespace NKikimr::NConsole
diff --git a/ydb/core/cms/console/configs_dispatcher.h b/ydb/core/cms/console/configs_dispatcher.h
index b771a8a72529..e3034f932522 100644
--- a/ydb/core/cms/console/configs_dispatcher.h
+++ b/ydb/core/cms/console/configs_dispatcher.h
@@ -5,6 +5,7 @@
 #include <ydb/core/cms/console/config_item_info.h>
 
 #include <util/generic/vector.h>
+#include <util/generic/map.h>
 
 namespace NKikimr::NConsole {
 
@@ -107,17 +108,34 @@ struct TEvConfigsDispatcher {
     };
 };
 
+struct TDenyList {
+    std::set<ui32> Items;
+};
+
+struct TAllowList {
+    std::set<ui32> Items;
+};
+
+struct TDebugInfo {
+    NKikimrConfig::TAppConfig StaticConfig;
+    NKikimrConfig::TAppConfig OldDynConfig;
+    NKikimrConfig::TAppConfig NewDynConfig;
+    THashMap<ui32, TConfigItemInfo> InitInfo;
+};
+
+struct TConfigsDispatcherInitInfo {
+    NKikimrConfig::TAppConfig InitialConfig;
+    TMap<TString, TString> Labels;
+    std::variant<std::monostate, TDenyList, TAllowList> ItemsServeRules;
+    std::optional<TDebugInfo> DebugInfo;
+};
+
 /**
  * Initial config is used to initilize Configs Dispatcher. All received configs
  * are compared to the current one and notifications are not sent to local
  * subscribers if there is no config modification detected.
  */
-IActor *CreateConfigsDispatcher(
-    const NKikimrConfig::TAppConfig &config,
-    const TMap<TString, TString> &labels,
-    const NKikimrConfig::TAppConfig &initialCmsConfig = {},
-    const NKikimrConfig::TAppConfig &initialCmsYamlConfig = {},
-    const THashMap<ui32, TConfigItemInfo> &configInitInfo = {});
+IActor *CreateConfigsDispatcher(const TConfigsDispatcherInitInfo& initInfo);
 
 inline TActorId MakeConfigsDispatcherID(ui32 node = 0) {
     char x[12] = { 'c', 'o', 'n', 'f', 'i', 'g', 's', 'd', 'i', 's', 'p' };
diff --git a/ydb/core/driver_lib/run/kikimr_services_initializers.cpp b/ydb/core/driver_lib/run/kikimr_services_initializers.cpp
index 38da10016654..0dae3013e17b 100644
--- a/ydb/core/driver_lib/run/kikimr_services_initializers.cpp
+++ b/ydb/core/driver_lib/run/kikimr_services_initializers.cpp
@@ -2381,7 +2381,18 @@ TConfigsDispatcherInitializer::TConfigsDispatcherInitializer(const TKikimrRunCon
 }
 
 void TConfigsDispatcherInitializer::InitializeServices(NActors::TActorSystemSetup* setup, const NKikimr::TAppData* appData) {
-    IActor* actor = NConsole::CreateConfigsDispatcher(Config, Labels, InitialCmsConfig, InitialCmsYamlConfig, ConfigInitInfo);
+    NKikimr::NConsole::TConfigsDispatcherInitInfo initInfo {
+        .InitialConfig = Config,
+        .Labels = Labels,
+        .ItemsServeRules = std::monostate{},
+        .DebugInfo = NKikimr::NConsole::TDebugInfo {
+            .StaticConfig = Config,
+            .OldDynConfig = InitialCmsConfig,
+            .NewDynConfig = InitialCmsYamlConfig,
+            .InitInfo = ConfigInitInfo,
+        },
+    };
+    IActor* actor = NConsole::CreateConfigsDispatcher(initInfo);
     setup->LocalServices.push_back(std::pair<TActorId, TActorSetupCmd>(
             NConsole::MakeConfigsDispatcherID(NodeId),
             TActorSetupCmd(actor, TMailboxType::HTSwap, appData->UserPoolId)));
diff --git a/ydb/core/driver_lib/run/run.cpp b/ydb/core/driver_lib/run/run.cpp
index f75eb3c765e9..03b8ce3c2a20 100644
--- a/ydb/core/driver_lib/run/run.cpp
+++ b/ydb/core/driver_lib/run/run.cpp
@@ -584,6 +584,10 @@ void TKikimrRunner::InitializeGRpc(const TKikimrRunConfig& runConfig) {
         TServiceCfg hasKeyValue = services.empty();
         names["keyvalue"] = &hasKeyValue;
 
+        if (hasTableService || hasYql) {
+            hasQueryService = true;
+        }
+
         std::unordered_set<TString> enabled;
         for (const auto& name : services) {
             enabled.insert(name);
diff --git a/ydb/core/driver_lib/version/ut/CMakeLists.darwin-arm64.txt b/ydb/core/driver_lib/version/ut/CMakeLists.darwin-arm64.txt
index 923cb8c2f35a..340107041898 100644
--- a/ydb/core/driver_lib/version/ut/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/driver_lib/version/ut/CMakeLists.darwin-arm64.txt
@@ -16,6 +16,7 @@ target_link_libraries(ydb-core-driver_lib-version-ut PUBLIC
   yutil
   cpp-testing-unittest_main
   version
+  version_definition
 )
 target_link_options(ydb-core-driver_lib-version-ut PRIVATE
   -Wl,-platform_version,macos,11.0,11.0
diff --git a/ydb/core/driver_lib/version/ut/CMakeLists.darwin-x86_64.txt b/ydb/core/driver_lib/version/ut/CMakeLists.darwin-x86_64.txt
index ff98a9080641..11879a5ca99b 100644
--- a/ydb/core/driver_lib/version/ut/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/driver_lib/version/ut/CMakeLists.darwin-x86_64.txt
@@ -17,6 +17,7 @@ target_link_libraries(ydb-core-driver_lib-version-ut PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   version
+  version_definition
 )
 target_link_options(ydb-core-driver_lib-version-ut PRIVATE
   -Wl,-platform_version,macos,11.0,11.0
diff --git a/ydb/core/driver_lib/version/ut/CMakeLists.linux-aarch64.txt b/ydb/core/driver_lib/version/ut/CMakeLists.linux-aarch64.txt
index 3ecb12cd4036..c2f3a1a268e1 100644
--- a/ydb/core/driver_lib/version/ut/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/driver_lib/version/ut/CMakeLists.linux-aarch64.txt
@@ -17,6 +17,7 @@ target_link_libraries(ydb-core-driver_lib-version-ut PUBLIC
   yutil
   cpp-testing-unittest_main
   version
+  version_definition
 )
 target_link_options(ydb-core-driver_lib-version-ut PRIVATE
   -ldl
diff --git a/ydb/core/driver_lib/version/ut/CMakeLists.linux-x86_64.txt b/ydb/core/driver_lib/version/ut/CMakeLists.linux-x86_64.txt
index 999ad8804d32..6b89d73255c3 100644
--- a/ydb/core/driver_lib/version/ut/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/driver_lib/version/ut/CMakeLists.linux-x86_64.txt
@@ -18,6 +18,7 @@ target_link_libraries(ydb-core-driver_lib-version-ut PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   version
+  version_definition
 )
 target_link_options(ydb-core-driver_lib-version-ut PRIVATE
   -ldl
diff --git a/ydb/core/driver_lib/version/ut/CMakeLists.windows-x86_64.txt b/ydb/core/driver_lib/version/ut/CMakeLists.windows-x86_64.txt
index f611bebb0fcc..5d3d9db541e7 100644
--- a/ydb/core/driver_lib/version/ut/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/driver_lib/version/ut/CMakeLists.windows-x86_64.txt
@@ -17,6 +17,7 @@ target_link_libraries(ydb-core-driver_lib-version-ut PUBLIC
   library-cpp-cpuid_check
   cpp-testing-unittest_main
   version
+  version_definition
 )
 target_sources(ydb-core-driver_lib-version-ut PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/driver_lib/version/ut/version_ut.cpp
diff --git a/ydb/core/driver_lib/version/ut/ya.make b/ydb/core/driver_lib/version/ut/ya.make
index 0c5a755c2a82..4b3833beacea 100644
--- a/ydb/core/driver_lib/version/ut/ya.make
+++ b/ydb/core/driver_lib/version/ut/ya.make
@@ -7,6 +7,7 @@ SIZE(MEDIUM)
 
 PEERDIR(
     ydb/core/driver_lib/version
+    ydb/apps/version
 )
 
 END()
diff --git a/ydb/core/driver_lib/version/version.cpp b/ydb/core/driver_lib/version/version.cpp
index b57042bde71b..3852aea33897 100644
--- a/ydb/core/driver_lib/version/version.cpp
+++ b/ydb/core/driver_lib/version/version.cpp
@@ -17,45 +17,14 @@ using EComponentId = NKikimrConfig::TCompatibilityRule;
 using TComponentId = NKikimrConfig::TCompatibilityRule::EComponentId;
 
 TCompatibilityInfo::TCompatibilityInfo() {
-    using TCurrentConstructor = TCompatibilityInfo::TProtoConstructor::TCurrentCompatibilityInfo;
     using TStoredConstructor = TCompatibilityInfo::TProtoConstructor::TStoredCompatibilityInfo;
-    using TCompatibilityRuleConstructor = TCompatibilityInfo::TProtoConstructor::TCompatibilityRule;
     using TVersionConstructor = TCompatibilityInfo::TProtoConstructor::TVersion;
 
     /////////////////////////////////////////////////////////
     // Current CompatibilityInfo
     /////////////////////////////////////////////////////////
 
-    auto current = TCurrentConstructor{
-        .Application = "ydb",
-        .Version = TVersionConstructor{
-            .Year = 24,
-            .Major = 1,
-        },
-        .CanLoadFrom = {
-            TCompatibilityRuleConstructor{
-                .LowerLimit = TVersionConstructor{ .Year = 23, .Major = 4 },
-                .UpperLimit = TVersionConstructor{ .Year = 24, .Major = 1 },
-            },
-        },
-        .StoresReadableBy = {
-            TCompatibilityRuleConstructor{
-                .LowerLimit = TVersionConstructor{ .Year = 23, .Major = 4 },
-                .UpperLimit = TVersionConstructor{ .Year = 24, .Major = 1 },
-            },
-        },
-        .CanConnectTo = {
-            TCompatibilityRuleConstructor{
-                .LowerLimit = TVersionConstructor{ .Year = 23, .Major = 4 },
-                .UpperLimit = TVersionConstructor{ .Year = 24, .Major = 1 },
-            },
-            TCompatibilityRuleConstructor{
-                .Application = "nbs",
-                .LowerLimit = TVersionConstructor{ .Year = 23, .Major = 3 },
-                .UpperLimit = TVersionConstructor{ .Year = 24, .Major = 1 },
-            },
-        }
-    }.ToPB();
+    auto current = MakeCurrent();
 
     bool success = CompleteFromTag(current);
     Y_UNUSED(success);
diff --git a/ydb/core/driver_lib/version/version.h b/ydb/core/driver_lib/version/version.h
index 1ecf76cb9e28..a18b2ad0cb5b 100644
--- a/ydb/core/driver_lib/version/version.h
+++ b/ydb/core/driver_lib/version/version.h
@@ -141,6 +141,8 @@ class TCompatibilityInfo {
 
     bool CompleteFromTag(NKikimrConfig::TCurrentCompatibilityInfo& current);
 
+    static NKikimrConfig::TCurrentCompatibilityInfo MakeCurrent();
+
     NKikimrConfig::TStoredCompatibilityInfo MakeStored(TComponentId componentId) const;
     NKikimrConfig::TStoredCompatibilityInfo MakeStored(TComponentId componentId,
             const NKikimrConfig::TCurrentCompatibilityInfo* current) const;
diff --git a/ydb/core/kqp/executer_actor/kqp_data_executer.cpp b/ydb/core/kqp/executer_actor/kqp_data_executer.cpp
index b8dd4a1824ba..15fe364f8d25 100644
--- a/ydb/core/kqp/executer_actor/kqp_data_executer.cpp
+++ b/ydb/core/kqp/executer_actor/kqp_data_executer.cpp
@@ -2006,16 +2006,12 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
                                     TTopicTabletTxs& topicTxs) {
         TDatashardTxs datashardTxs;
 
-        std::vector<ui64> affectedShardsSet;
-        affectedShardsSet.reserve(datashardTasks.size());
-
         for (auto& [shardId, tasks]: datashardTasks) {
             auto [it, success] = datashardTxs.emplace(
                 shardId,
                 TasksGraph.GetMeta().Allocate<NKikimrTxDataShard::TKqpTransaction>());
 
             YQL_ENSURE(success, "unexpected duplicates in datashard transactions");
-            affectedShardsSet.emplace_back(shardId);
             NKikimrTxDataShard::TKqpTransaction* dsTxs = it->second;
             dsTxs->MutableTasks()->Reserve(tasks.size());
             for (auto& task: tasks) {
@@ -2023,6 +2019,55 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
             }
         }
 
+        // Note: when locks map is present it will be mutated to avoid copying data
+        auto& locksMap = Request.DataShardLocks;
+        if (!locksMap.empty()) {
+            YQL_ENSURE(Request.LocksOp == ELocksOp::Commit || Request.LocksOp == ELocksOp::Rollback);
+        }
+
+        // Materialize (possibly empty) txs for all shards with locks (either commit or rollback)
+        for (auto& [shardId, locksList] : locksMap) {
+            YQL_ENSURE(!locksList.empty(), "unexpected empty locks list in DataShardLocks");
+
+            auto it = datashardTxs.find(shardId);
+            if (it == datashardTxs.end()) {
+                auto [emplaced, success] = datashardTxs.emplace(
+                    shardId,
+                    TasksGraph.GetMeta().Allocate<NKikimrTxDataShard::TKqpTransaction>());
+
+                YQL_ENSURE(success, "unexpected failure to emplace a datashard transaction");
+                it = emplaced;
+            }
+
+            NKikimrTxDataShard::TKqpTransaction* tx = it->second;
+            switch (Request.LocksOp) {
+                case ELocksOp::Commit:
+                    tx->MutableLocks()->SetOp(NKikimrDataEvents::TKqpLocks::Commit);
+                    break;
+                case ELocksOp::Rollback:
+                    tx->MutableLocks()->SetOp(NKikimrDataEvents::TKqpLocks::Rollback);
+                    break;
+                case ELocksOp::Unspecified:
+                    break;
+            }
+
+            // Move lock descriptions to the datashard tx
+            auto* protoLocks = tx->MutableLocks()->MutableLocks();
+            protoLocks->Reserve(locksList.size());
+            bool hasWrites = false;
+            for (auto& lock : locksList) {
+                hasWrites = hasWrites || lock.GetHasWrites();
+                protoLocks->Add(std::move(lock));
+            }
+            locksList.clear();
+
+            // When locks with writes are committed this commits accumulated effects
+            if (Request.LocksOp == ELocksOp::Commit && hasWrites) {
+                ShardsWithEffects.insert(shardId);
+                YQL_ENSURE(!ReadOnlyTx);
+            }
+        }
+
         Request.TopicOperations.BuildTopicTxs(topicTxs);
 
         const bool needRollback = Request.LocksOp == ELocksOp::Rollback;
@@ -2042,7 +2087,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
             // TODO: add support in the future
             topicTxs.empty() &&
             // We only want to use volatile transactions for multiple shards
-            (affectedShardsSet.size() + topicTxs.size()) > 1 &&
+            (datashardTxs.size() + topicTxs.size()) > 1 &&
             // We cannot use volatile transactions with persistent channels
             // Note: currently persistent channels are never used
             !HasPersistentChannels);
@@ -2055,30 +2100,29 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
             // Transactions with topics must always use generic readsets
             !topicTxs.empty());
 
-        if (auto locksMap = Request.DataShardLocks;
-            !locksMap.empty() ||
-            VolatileTx ||
+        if (!locksMap.empty() || VolatileTx ||
             Request.TopicOperations.HasReadOperations())
         {
             YQL_ENSURE(Request.LocksOp == ELocksOp::Commit || Request.LocksOp == ELocksOp::Rollback || VolatileTx);
 
             bool needCommit = Request.LocksOp == ELocksOp::Commit || VolatileTx;
 
-            auto locksOp = needCommit
-                ? NKikimrDataEvents::TKqpLocks::Commit
-                : NKikimrDataEvents::TKqpLocks::Rollback;
-
             absl::flat_hash_set<ui64> sendingShardsSet;
             absl::flat_hash_set<ui64> receivingShardsSet;
 
             // Gather shards that need to send/receive readsets (shards with effects)
             if (needCommit) {
-                for (auto& shardId: affectedShardsSet) {
+                for (auto& [shardId, tx] : datashardTxs) {
+                    if (tx->HasLocks()) {
+                        // Locks may be broken so shards with locks need to send readsets
+                        sendingShardsSet.insert(shardId);
+                    }
                     if (ShardsWithEffects.contains(shardId)) {
                         // Volatile transactions may abort effects, so they send readsets
                         if (VolatileTx) {
                             sendingShardsSet.insert(shardId);
                         }
+                        // Effects are only applied when all locks are valid
                         receivingShardsSet.insert(shardId);
                     }
                 }
@@ -2093,44 +2137,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
                 }
             }
 
-            // Gather locks that need to be committed or erased
-            for (auto& [shardId, locksList] : locksMap) {
-                NKikimrTxDataShard::TKqpTransaction* tx = nullptr;
-                auto it = datashardTxs.find(shardId);
-                if (it != datashardTxs.end()) {
-                    tx = it->second;
-                } else {
-                    auto [eIt, success] = datashardTxs.emplace(
-                        shardId,
-                        TasksGraph.GetMeta().Allocate<NKikimrTxDataShard::TKqpTransaction>());
-                    tx = eIt->second;
-                }
-
-                tx->MutableLocks()->SetOp(locksOp);
-
-                if (!locksList.empty()) {
-                    auto* protoLocks = tx->MutableLocks()->MutableLocks();
-                    protoLocks->Reserve(locksList.size());
-                    bool hasWrites = false;
-                    for (auto& lock : locksList) {
-                        hasWrites = hasWrites || lock.GetHasWrites();
-                        protoLocks->Add()->Swap(&lock);
-                    }
-
-                    if (needCommit) {
-                        // We also send the result on commit
-                        sendingShardsSet.insert(shardId);
-
-                        if (hasWrites) {
-                            // Tx with uncommitted changes can be aborted due to conflicts,
-                            // so shards with write locks should receive readsets
-                            receivingShardsSet.insert(shardId);
-                            YQL_ENSURE(!ReadOnlyTx);
-                        }
-                    }
-                }
-            }
-
+            // Encode sending/receiving shards in tx bodies
             if (needCommit) {
                 NProtoBuf::RepeatedField<ui64> sendingShards(sendingShardsSet.begin(), sendingShardsSet.end());
                 NProtoBuf::RepeatedField<ui64> receivingShards(receivingShardsSet.begin(), receivingShardsSet.end());
@@ -2139,23 +2146,13 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
                 std::sort(receivingShards.begin(), receivingShards.end());
 
                 for (auto& [shardId, shardTx] : datashardTxs) {
-                    shardTx->MutableLocks()->SetOp(locksOp);
+                    shardTx->MutableLocks()->SetOp(NKikimrDataEvents::TKqpLocks::Commit);
                     *shardTx->MutableLocks()->MutableSendingShards() = sendingShards;
                     *shardTx->MutableLocks()->MutableReceivingShards() = receivingShards;
                 }
 
                 for (auto& [_, tx] : topicTxs) {
-                    switch (locksOp) {
-                    case NKikimrDataEvents::TKqpLocks::Commit:
-                        tx.SetOp(NKikimrPQ::TDataTransaction::Commit);
-                        break;
-                    case NKikimrDataEvents::TKqpLocks::Rollback:
-                        tx.SetOp(NKikimrPQ::TDataTransaction::Rollback);
-                        break;
-                    case NKikimrDataEvents::TKqpLocks::Unspecified:
-                        break;
-                    }
-
+                    tx.SetOp(NKikimrPQ::TDataTransaction::Commit);
                     *tx.MutableSendingShards() = sendingShards;
                     *tx.MutableReceivingShards() = receivingShards;
                 }
diff --git a/ydb/core/kqp/proxy_service/kqp_proxy_ut.cpp b/ydb/core/kqp/proxy_service/kqp_proxy_ut.cpp
index 3e090a42c665..e88af0455f22 100644
--- a/ydb/core/kqp/proxy_service/kqp_proxy_ut.cpp
+++ b/ydb/core/kqp/proxy_service/kqp_proxy_ut.cpp
@@ -492,8 +492,8 @@ Y_UNIT_TEST_SUITE(KqpProxy) {
 
     Y_UNIT_TEST(ExecuteScriptFailsWithoutFeatureFlag) {
         NKikimrConfig::TAppConfig appConfig;
+        appConfig.MutableFeatureFlags()->SetEnableScriptExecutionOperations(false);
         NYdb::TKikimrWithGrpcAndRootSchema server(appConfig);
-        appConfig.MutableFeatureFlags()->SetEnableScriptExecutionOperations(false); // default
         server.Server_->GetRuntime()->SetLogPriority(NKikimrServices::KQP_PROXY, NActors::NLog::PRI_DEBUG);
 
         ui16 grpc = server.GetPort();
diff --git a/ydb/core/kqp/ut/view/view_ut.cpp b/ydb/core/kqp/ut/view/view_ut.cpp
index cfd6adf5c654..3a74e319bef7 100644
--- a/ydb/core/kqp/ut/view/view_ut.cpp
+++ b/ydb/core/kqp/ut/view/view_ut.cpp
@@ -316,6 +316,24 @@ Y_UNIT_TEST_SUITE(TKQPViewTest) {
             UNIT_ASSERT(dropResult.GetIssues().ToString().Contains("Error: Path does not exist"));
         }
     }
+
+    Y_UNIT_TEST(ContextPollution) {
+        TKikimrRunner kikimr(TKikimrSettings().SetWithSampleTables(false));
+        EnableViewsFeatureFlag(kikimr);
+        auto session = kikimr.GetTableClient().CreateSession().GetValueSync().GetSession();
+
+        ExecuteDataDefinitionQuery(session, R"(
+            CREATE VIEW InnerView WITH (security_invoker = TRUE) AS SELECT 1;
+        )");
+        ExecuteDataDefinitionQuery(session, R"(
+            CREATE VIEW OuterView WITH (security_invoker = TRUE) AS SELECT * FROM InnerView;
+        )");
+        
+        ExecuteDataDefinitionQuery(session, R"(
+            DROP VIEW OuterView;
+            CREATE VIEW OuterView WITH (security_invoker = TRUE) AS SELECT * FROM InnerView;
+        )");
+    }
 }
 
 Y_UNIT_TEST_SUITE(TSelectFromViewTest) {
diff --git a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.darwin-arm64.txt b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.darwin-arm64.txt
index a58014c2f253..681c447ff2b1 100644
--- a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.darwin-arm64.txt
@@ -15,6 +15,7 @@ target_link_libraries(ydb-core-mind-bscontroller-ut_selfheal PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   blobstorage-dsproxy-mock
   blobstorage-pdisk-mock
   core-mind-bscontroller
diff --git a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.darwin-x86_64.txt b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.darwin-x86_64.txt
index 556785ce5eec..a971d8b38b01 100644
--- a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.darwin-x86_64.txt
@@ -16,6 +16,7 @@ target_link_libraries(ydb-core-mind-bscontroller-ut_selfheal PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   blobstorage-dsproxy-mock
   blobstorage-pdisk-mock
   core-mind-bscontroller
diff --git a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.linux-aarch64.txt b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.linux-aarch64.txt
index e70a88c2eace..573524420487 100644
--- a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.linux-aarch64.txt
@@ -16,6 +16,7 @@ target_link_libraries(ydb-core-mind-bscontroller-ut_selfheal PUBLIC
   contrib-libs-cxxsupp
   yutil
   cpp-testing-unittest_main
+  version_definition
   blobstorage-dsproxy-mock
   blobstorage-pdisk-mock
   core-mind-bscontroller
diff --git a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.linux-x86_64.txt b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.linux-x86_64.txt
index 85bda2ed3f1a..e919aa17cbc2 100644
--- a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.linux-x86_64.txt
@@ -17,6 +17,7 @@ target_link_libraries(ydb-core-mind-bscontroller-ut_selfheal PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   blobstorage-dsproxy-mock
   blobstorage-pdisk-mock
   core-mind-bscontroller
diff --git a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.windows-x86_64.txt b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.windows-x86_64.txt
index 8b59fa168205..3b6a02137fe6 100644
--- a/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/mind/bscontroller/ut_selfheal/CMakeLists.windows-x86_64.txt
@@ -16,6 +16,7 @@ target_link_libraries(ydb-core-mind-bscontroller-ut_selfheal PUBLIC
   yutil
   library-cpp-cpuid_check
   cpp-testing-unittest_main
+  version_definition
   blobstorage-dsproxy-mock
   blobstorage-pdisk-mock
   core-mind-bscontroller
diff --git a/ydb/core/mind/bscontroller/ut_selfheal/ya.make b/ydb/core/mind/bscontroller/ut_selfheal/ya.make
index c3b4ba285713..1189fc7e7025 100644
--- a/ydb/core/mind/bscontroller/ut_selfheal/ya.make
+++ b/ydb/core/mind/bscontroller/ut_selfheal/ya.make
@@ -16,6 +16,7 @@ SRCS(
 )
 
 PEERDIR(
+    ydb/apps/version
     ydb/core/blobstorage/dsproxy/mock
     ydb/core/blobstorage/pdisk/mock
     ydb/core/mind/bscontroller
diff --git a/ydb/core/persqueue/writer/partition_chooser_impl__abstract_chooser_actor.h b/ydb/core/persqueue/writer/partition_chooser_impl__abstract_chooser_actor.h
index 4b385f779cda..0e975c6cec67 100644
--- a/ydb/core/persqueue/writer/partition_chooser_impl__abstract_chooser_actor.h
+++ b/ydb/core/persqueue/writer/partition_chooser_impl__abstract_chooser_actor.h
@@ -207,7 +207,7 @@ class TAbstractPartitionChooserActor: public TActorBootstrapped<TDerived> {
         TRACE_EVENT(NKikimrServices::PQ_PARTITION_CHOOSER);
         switch (ev->GetTypeRewrite()) {
             HFunc(NKqp::TEvKqp::TEvQueryResponse, HandleUpdate);
-            sFunc(TEvents::TEvPoison, ScheduleStop);
+            SFunc(TEvents::TEvPoison, TThis::Die);
         }
     }
 
@@ -237,7 +237,7 @@ class TAbstractPartitionChooserActor: public TActorBootstrapped<TDerived> {
             HFunc(NKikimr::TEvPQ::TEvCheckPartitionStatusResponse, Handle);
             HFunc(TEvTabletPipe::TEvClientConnected, HandleOwnership);
             HFunc(TEvTabletPipe::TEvClientDestroyed, HandleOwnership);
-            sFunc(TEvents::TEvPoison, ScheduleStop);
+            SFunc(TEvents::TEvPoison, TThis::Die);
         }
     }
 
diff --git a/ydb/core/tx/datashard/datashard.cpp b/ydb/core/tx/datashard/datashard.cpp
index 6b10f4632c76..314060536c8e 100644
--- a/ydb/core/tx/datashard/datashard.cpp
+++ b/ydb/core/tx/datashard/datashard.cpp
@@ -2952,13 +2952,13 @@ void TDataShard::Handle(TEvPrivate::TEvDelayedProposeTransaction::TPtr &ev, cons
                     kind, TabletID(), txId,
                     NKikimrTxDataShard::TEvProposeTransactionResult::CANCELLED);
                 ctx.Send(target, result, 0, cookie);
-                return;
+                break;
             }
             case NEvents::TDataEvents::TEvWrite::EventType: {
                 auto* msg = item.Event->Get<NEvents::TDataEvents::TEvWrite>();
                 auto result = NEvents::TDataEvents::TEvWriteResult::BuildError(TabletID(), msg->GetTxId(), NKikimrDataEvents::TEvWriteResult::STATUS_CANCELLED, "Canceled");
                 ctx.Send(target, result.release(), 0, cookie);
-                return;
+                break;
             }
             default:
                 Y_FAIL_S("Unexpected event type " << item.Event->GetTypeRewrite());
diff --git a/ydb/core/tx/datashard/datashard__read_iterator.cpp b/ydb/core/tx/datashard/datashard__read_iterator.cpp
index 928592a56959..bb4fbe8de801 100644
--- a/ydb/core/tx/datashard/datashard__read_iterator.cpp
+++ b/ydb/core/tx/datashard/datashard__read_iterator.cpp
@@ -665,6 +665,10 @@ class TReader {
             }
         }
 
+        if (record.TxLocksSize() > 0 || record.BrokenTxLocksSize() > 0) {
+            useful = true;
+        }
+
         Self->IncCounter(COUNTER_READ_ITERATOR_ROWS_READ, RowsRead);
         if (!isKeysRequest) {
             Self->IncCounter(COUNTER_ENGINE_HOST_SELECT_RANGE_ROW_SKIPS, DeletedRowSkips);
@@ -2490,9 +2494,9 @@ class TDataShard::TTxReadContinue : public NTabletFlatExecutor::TTransactionBase
         if (record.HasStatus()) {
             record.SetSeqNo(state.SeqNo + 1);
             record.SetReadId(readId.ReadId);
-            Self->SendImmediateReadResult(request->Reader, Result.release(), 0, state.SessionId);
             LOG_DEBUG_S(ctx, NKikimrServices::TX_DATASHARD, Self->TabletID() << " read iterator# " << readId
                 << " TTxReadContinue::Execute() finished with error, aborting: " << record.DebugString());
+            Self->SendImmediateReadResult(request->Reader, Result.release(), 0, state.SessionId);
 
             state.Request->ReadSpan.EndError("Finished with error");
             Self->DeleteReadIterator(it);
diff --git a/ydb/core/tx/datashard/datashard_active_transaction.cpp b/ydb/core/tx/datashard/datashard_active_transaction.cpp
index a4a2c4ea5b5a..745010c5401d 100644
--- a/ydb/core/tx/datashard/datashard_active_transaction.cpp
+++ b/ydb/core/tx/datashard/datashard_active_transaction.cpp
@@ -404,7 +404,7 @@ TValidatedDataTx::TPtr TActiveTransaction::BuildDataTx(TDataShard *self,
     if (!DataTx) {
         Y_ABORT_UNLESS(TxBody);
         DataTx = std::make_shared<TValidatedDataTx>(self, txc, ctx, GetStepOrder(),
-                                                    GetReceivedAt(), TxBody, MvccSnapshotRepeatable);
+                                                    GetReceivedAt(), TxBody, IsMvccSnapshotRepeatable());
         if (DataTx->HasStreamResponse())
             SetStreamSink(DataTx->GetSink());
     }
@@ -635,7 +635,7 @@ ERestoreDataStatus TActiveTransaction::RestoreTxData(
 
     bool extractKeys = DataTx->IsTxInfoLoaded();
     DataTx = std::make_shared<TValidatedDataTx>(self, txc, ctx, GetStepOrder(),
-                                                GetReceivedAt(), TxBody, MvccSnapshotRepeatable);
+                                                GetReceivedAt(), TxBody, IsMvccSnapshotRepeatable());
     if (DataTx->Ready() && extractKeys) {
         DataTx->ExtractKeys(true);
     }
diff --git a/ydb/core/tx/datashard/datashard_ut_common_kqp.h b/ydb/core/tx/datashard/datashard_ut_common_kqp.h
index d7182e08e3da..de0e2ef7a24d 100644
--- a/ydb/core/tx/datashard/datashard_ut_common_kqp.h
+++ b/ydb/core/tx/datashard/datashard_ut_common_kqp.h
@@ -42,7 +42,7 @@ namespace NKqpHelpers {
     inline TString CreateSessionRPC(TTestActorRuntime& runtime, const TString& database = {}) {
         Ydb::Table::CreateSessionRequest request;
         auto future = NRpcService::DoLocalRpc<TEvCreateSessionRequest>(
-           std::move(request), database, "", /* token */ runtime.GetActorSystem(0));
+           std::move(request), database, /* token */ "", runtime.GetActorSystem(0));
         TString sessionId;
         auto response = AwaitResponse(runtime, future);
         UNIT_ASSERT_VALUES_EQUAL(response.operation().status(), Ydb::StatusIds::SUCCESS);
@@ -71,7 +71,7 @@ namespace NKqpHelpers {
         TTestActorRuntime& runtime, Ydb::Table::ExecuteDataQueryRequest&& request, const TString& database = {})
     {
         return NRpcService::DoLocalRpc<TEvExecuteDataQueryRequest>(
-            std::move(request), database, "" /* token */, runtime.GetActorSystem(0));
+            std::move(request), database, /* token */ "", runtime.GetActorSystem(0));
     }
 
     inline Ydb::Table::ExecuteDataQueryRequest MakeSimpleRequestRPC(
@@ -119,7 +119,7 @@ namespace NKqpHelpers {
         Ydb::Table::DeleteSessionRequest request;
         request.set_session_id(sessionId);
         auto future = NRpcService::DoLocalRpc<TEvDeleteSessionRequest>(
-            std::move(request), "", "", /* token */ runtime.GetActorSystem(0));
+            std::move(request), "", /* token */ "", runtime.GetActorSystem(0));
     }
 
     inline THolder<NKqp::TEvKqp::TEvQueryRequest> MakeStreamRequest(
@@ -168,17 +168,15 @@ namespace NKqpHelpers {
         return FormatResult(result);
     }
 
-    inline TString KqpSimpleExec(TTestActorRuntime& runtime, const TString& query, bool staleRo = false, const TString& database = {}) {
+    inline auto KqpSimpleSend(TTestActorRuntime& runtime, const TString& query, bool staleRo = false, const TString& database = {}) {
         TString sessionId = CreateSessionRPC(runtime, database);
         TString txId;
-        auto response = AwaitResponse(
-            runtime, SendRequest(runtime, MakeSimpleRequestRPC(query, sessionId, txId, true /* commitTx */, staleRo), database));
-        if (response.operation().status() != Ydb::StatusIds::SUCCESS) {
-            return TStringBuilder() << "ERROR: " << response.operation().status();
-        }
-        Ydb::Table::ExecuteQueryResult result;
-        response.operation().result().UnpackTo(&result);
-        return FormatResult(result);
+        return SendRequest(runtime, MakeSimpleRequestRPC(query, sessionId, txId, /* commitTx */ true, staleRo), database);
+    }
+
+    inline TString KqpSimpleExec(TTestActorRuntime& runtime, const TString& query, bool staleRo = false, const TString& database = {}) {
+        auto response = AwaitResponse(runtime, KqpSimpleSend(runtime, query, staleRo, database));
+        return FormatResult(response);
     }
 
     inline TString KqpSimpleStaleRoExec(TTestActorRuntime& runtime, const TString& query, const TString& database = {}) {
diff --git a/ydb/core/tx/datashard/datashard_ut_order.cpp b/ydb/core/tx/datashard/datashard_ut_order.cpp
index ee1af9e056c1..4f58e3fe804f 100644
--- a/ydb/core/tx/datashard/datashard_ut_order.cpp
+++ b/ydb/core/tx/datashard/datashard_ut_order.cpp
@@ -4279,6 +4279,7 @@ Y_UNIT_TEST(UncommittedReadSetAck) {
 
     bool capturePlanSteps = true;
     TVector<THolder<IEventHandle>> capturedPlanSteps;
+    TVector<ui64> capturedPlanTxIds;
     THashSet<ui64> passReadSetTxIds;
     ui64 observedReadSets = 0;
     TVector<THolder<IEventHandle>> capturedReadSets;
@@ -4294,6 +4295,12 @@ Y_UNIT_TEST(UncommittedReadSetAck) {
             case TEvTxProcessing::TEvPlanStep::EventType: {
                 if (nodeIndex == 1 && ev->GetRecipientRewrite() == table3actor && capturePlanSteps) {
                     Cerr << "... captured plan step for table-3" << Endl;
+                    auto* msg = ev->Get<TEvTxProcessing::TEvPlanStep>();
+                    for (const auto& tx : msg->Record.GetTransactions()) {
+                        ui64 txId = tx.GetTxId();
+                        capturedPlanTxIds.push_back(txId);
+                        Cerr << "... captured plan step tx " << txId << " for table-3" << Endl;
+                    }
                     capturedPlanSteps.emplace_back(ev.Release());
                     return TTestActorRuntime::EEventAction::DROP;
                 }
@@ -4303,6 +4310,12 @@ Y_UNIT_TEST(UncommittedReadSetAck) {
                 if (nodeIndex == 1 && ev->GetRecipientRewrite() == table3actor) {
                     auto* msg = ev->Get<TEvTxProcessing::TEvReadSet>();
                     ui64 txId = msg->Record.GetTxId();
+                    if ((msg->Record.GetFlags() & NKikimrTx::TEvReadSet::FLAG_EXPECT_READSET) &&
+                        (msg->Record.GetFlags() & NKikimrTx::TEvReadSet::FLAG_NO_DATA))
+                    {
+                        Cerr << "... passing expectation for txid# " << txId << Endl;
+                        break;
+                    }
                     ++observedReadSets;
                     if (!passReadSetTxIds.contains(txId)) {
                         Cerr << "... readset for txid# " << txId << " was blocked" << Endl;
@@ -4353,20 +4366,11 @@ Y_UNIT_TEST(UncommittedReadSetAck) {
         }
     };
 
-    waitFor([&]{ return capturedPlanSteps.size() > 0; }, "plan step");
-    UNIT_ASSERT_VALUES_EQUAL(capturedPlanSteps.size(), 1u);
-    ui64 realTxId1, realTxId2;
-    {
-        auto* msg = capturedPlanSteps[0]->Get<TEvTxProcessing::TEvPlanStep>();
-        TVector<ui64> realTxIds;
-        for (const auto& tx : msg->Record.GetTransactions()) {
-            realTxIds.emplace_back(tx.GetTxId());
-        }
-        UNIT_ASSERT_VALUES_EQUAL(realTxIds.size(), 2u);
-        std::sort(realTxIds.begin(), realTxIds.end());
-        realTxId1 = realTxIds.at(0);
-        realTxId2 = realTxIds.at(1);
-    }
+    waitFor([&]{ return capturedPlanTxIds.size() >= 2; }, "captured transactions");
+    UNIT_ASSERT_C(capturedPlanTxIds.size(), 2u);
+    std::sort(capturedPlanTxIds.begin(), capturedPlanTxIds.end());
+    ui64 realTxId1 = capturedPlanTxIds.at(0);
+    ui64 realTxId2 = capturedPlanTxIds.at(1);
 
     // Unblock and resend the plan step message
     capturePlanSteps = false;
@@ -4375,7 +4379,7 @@ Y_UNIT_TEST(UncommittedReadSetAck) {
     }
     capturedPlanSteps.clear();
 
-    // Wait until there are 2 readset messages
+    // Wait until there are 2 readset messages (with data)
     waitFor([&]{ return capturedReadSets.size() >= 2; }, "initial readsets");
     SimulateSleep(runtime, TDuration::MilliSeconds(5));
 
diff --git a/ydb/core/tx/datashard/datashard_ut_read_iterator.cpp b/ydb/core/tx/datashard/datashard_ut_read_iterator.cpp
index 044080f8d711..876f58415ad0 100644
--- a/ydb/core/tx/datashard/datashard_ut_read_iterator.cpp
+++ b/ydb/core/tx/datashard/datashard_ut_read_iterator.cpp
@@ -21,6 +21,7 @@
 namespace NKikimr {
 
 using namespace NKikimr::NDataShard;
+using namespace NKikimr::NDataShard::NKqpHelpers;
 using namespace NSchemeShard;
 using namespace Tests;
 
@@ -348,7 +349,7 @@ struct TTestHelper {
         auto &runtime = *Server->GetRuntime();
         Sender = runtime.AllocateEdgeActor();
 
-        runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_NOTICE);
+        runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);
         runtime.SetLogPriority(NKikimrServices::TX_PROXY, NLog::PRI_INFO);
 
         InitRoot(Server, Sender);
@@ -818,7 +819,11 @@ struct TTestHelper {
                     break;
                 }
                 case TEvTxProcessing::EvReadSet: {
-                    if (dropRS) {
+                    auto* msg = event->Get<TEvTxProcessing::TEvReadSet>();
+                    auto flags = msg->Record.GetFlags();
+                    auto isExpect = flags & NKikimrTx::TEvReadSet::FLAG_EXPECT_READSET;
+                    auto isNoData = flags & NKikimrTx::TEvReadSet::FLAG_NO_DATA;
+                    if (dropRS && !(isExpect && isNoData)) {
                         result.ReadSets.push_back(std::move(event));
                         return TTestActorRuntime::EEventAction::DROP;
                     }
@@ -852,7 +857,10 @@ struct TTestHelper {
             )"));
         }
 
-        waitFor([&]{ return result.ReadSets.size() == 1; }, "intercepted RS");
+        const bool usesVolatileTxs = runtime.GetAppData(0).FeatureFlags.GetEnableDataShardVolatileTransactions();
+        const size_t expectedReadSets = 1 + (finalUpserts && usesVolatileTxs ? 2 : 0);
+
+        waitFor([&]{ return result.ReadSets.size() == expectedReadSets; }, "intercepted RS");
 
         // restore original observer (note we used lambda function and stack variables)
         Server->GetRuntime()->SetObserverFunc(prevObserverFunc);
@@ -2576,7 +2584,9 @@ Y_UNIT_TEST_SUITE(DataShardReadIterator) {
         TPortManager pm;
         TServerSettings serverSettings(pm.GetPort(2134));
         serverSettings.SetDomainName("Root")
-            .SetUseRealThreads(false);
+            .SetUseRealThreads(false)
+            // Blocked volatile transactions block reads, disable
+            .SetEnableDataShardVolatileTransactions(false);
 
         const ui64 shardCount = 1;
         TTestHelper helper(serverSettings, shardCount);
@@ -3600,7 +3610,7 @@ Y_UNIT_TEST_SUITE(DataShardReadIteratorPageFaults) {
         auto& runtime = *server->GetRuntime();
         auto sender = runtime.AllocateEdgeActor();
 
-        runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_NOTICE);
+        runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);
         runtime.SetLogPriority(NKikimrServices::TX_PROXY, NLog::PRI_INFO);
         // runtime.SetLogPriority(NKikimrServices::TABLET_EXECUTOR, NLog::PRI_DEBUG);
 
@@ -3680,6 +3690,83 @@ Y_UNIT_TEST_SUITE(DataShardReadIteratorPageFaults) {
         // We should be able to drop table
         WaitTxNotification(server, AsyncDropTable(server, sender, "/Root", "table-1"));
     }
+
+    Y_UNIT_TEST(LocksNotLostOnPageFault) {
+        TPortManager pm;
+        NFake::TCaches caches;
+        caches.Shared = 1 /* bytes */;
+        TServerSettings serverSettings(pm.GetPort(2134));
+        serverSettings.SetDomainName("Root")
+            .SetUseRealThreads(false)
+            .SetCacheParams(caches);
+        TServer::TPtr server = new TServer(serverSettings);
+
+        auto& runtime = *server->GetRuntime();
+        auto sender = runtime.AllocateEdgeActor();
+
+        runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);
+
+        InitRoot(server, sender);
+
+        TDisableDataShardLogBatching disableDataShardLogBatching;
+
+        // Use a policy that forces very small page sizes, effectively making each row on its own page
+        NLocalDb::TCompactionPolicyPtr policy = NLocalDb::CreateDefaultTablePolicy();
+        policy->MinDataPageSize = 1;
+
+        auto opts = TShardedTableOptions()
+                .Columns({{"key", "Int32", true, false},
+                          {"index", "Int32", true, false},
+                          {"value", "Int32", false, false}})
+                .Policy(policy.Get())
+                .ExecutorCacheSize(1 /* byte */);
+        auto [shards, tableId] = CreateShardedTable(server, sender, "/Root", "table-1", opts);
+
+        ExecSQL(server, sender, "UPSERT INTO `/Root/table-1` (key, index, value) VALUES (1, 0, 10), (3, 0, 30), (5, 0, 50), (7, 0, 70), (9, 0, 90);");
+        runtime.SimulateSleep(TDuration::Seconds(1));
+
+        const auto shard1 = shards.at(0);
+        CompactTable(runtime, shard1, tableId, false);
+        RebootTablet(runtime, shard1, sender);
+        runtime.SimulateSleep(TDuration::Seconds(1));
+
+        // Start a write transaction that has uncommitted write to key (2, 0)
+        // This is because read iterator measures "work" in processed/skipped rows, so we have to give it something
+        TString writeSessionId, writeTxId;
+        UNIT_ASSERT_VALUES_EQUAL(
+            KqpSimpleBegin(runtime, writeSessionId, writeTxId, R"(
+                UPSERT INTO `/Root/table-1` (key, index, value) VALUES (2, 0, 20), (4, 0, 40);
+
+                SELECT key, index, value FROM `/Root/table-1`
+                WHERE key = 2
+                ORDER BY key, index;
+                )"),
+            "{ items { int32_value: 2 } items { int32_value: 0 } items { int32_value: 20 } }");
+
+        // Start a read transaction with several range read in a specific order
+        // The first two prefixes don't exist (nothing committed yet)
+        // The other two prefixes are supposed to page fault
+        TString sessionId, txId;
+        UNIT_ASSERT_VALUES_EQUAL(
+            KqpSimpleBegin(runtime, sessionId, txId, R"(
+                SELECT key, index, value FROM `/Root/table-1`
+                WHERE key IN (2, 4, 7, 9)
+                ORDER BY key, index;
+                )"),
+            "{ items { int32_value: 7 } items { int32_value: 0 } items { int32_value: 70 } }, "
+            "{ items { int32_value: 9 } items { int32_value: 0 } items { int32_value: 90 } }");
+
+        // Commit the first transaction, it must succeed
+        UNIT_ASSERT_VALUES_EQUAL(
+            KqpSimpleCommit(runtime, writeSessionId, writeTxId, "SELECT 1;"),
+            "{ items { int32_value: 1 } }");
+
+        // Commit the second transaction with a new upsert, it must not succeed
+        UNIT_ASSERT_VALUES_EQUAL(
+            KqpSimpleCommit(runtime, sessionId, txId,
+                "UPSERT INTO `/Root/table-1` (key, index, value) VALUES (2, 0, 22);"),
+            "ERROR: ABORTED");
+    }
 }
 
 } // namespace NKikimr
diff --git a/ydb/core/tx/datashard/datashard_ut_rs.cpp b/ydb/core/tx/datashard/datashard_ut_rs.cpp
index 1f6ca976a929..b15784d66c22 100644
--- a/ydb/core/tx/datashard/datashard_ut_rs.cpp
+++ b/ydb/core/tx/datashard/datashard_ut_rs.cpp
@@ -48,7 +48,10 @@ struct IsReadSet {
     {
         if (ev.GetTypeRewrite() == TEvTxProcessing::EvReadSet) {
             auto &rec = ev.Get<TEvTxProcessing::TEvReadSet>()->Record;
-            if (rec.GetTabletSource() == Source && rec.GetTabletDest() == Dest) {
+            bool isExpectation = (
+                (rec.GetFlags() & NKikimrTx::TEvReadSet::FLAG_EXPECT_READSET) &&
+                (rec.GetFlags() & NKikimrTx::TEvReadSet::FLAG_NO_DATA));
+            if (rec.GetTabletSource() == Source && rec.GetTabletDest() == Dest && !isExpectation) {
                 return true;
             }
         }
@@ -64,7 +67,9 @@ Y_UNIT_TEST_SUITE(TDataShardRSTest) {
         TPortManager pm;
         TServerSettings serverSettings(pm.GetPort(2134));
         serverSettings.SetDomainName("Root")
-            .SetUseRealThreads(false);
+            .SetUseRealThreads(false)
+            // Volatile transactions avoid storing readsets in InReadSets table
+            .SetEnableDataShardVolatileTransactions(false);
 
         Tests::TServer::TPtr server = new TServer(serverSettings);
         auto &runtime = *server->GetRuntime();
@@ -250,7 +255,13 @@ Y_UNIT_TEST_SUITE(TDataShardRSTest) {
         TPortManager pm;
         TServerSettings serverSettings(pm.GetPort(2134));
         serverSettings.SetDomainName("Root")
-            .SetUseRealThreads(false);
+            .SetUseRealThreads(false)
+            // This test expects rs acks to be delayed during one of restarts,
+            // which doesn't happen with volatile transactions. With volatile
+            // transactions both upserts have already executed, one of them is
+            // just waiting for confirmation before making changes visible.
+            // Since acks are not delayed they are just gone when dropped.
+            .SetEnableDataShardVolatileTransactions(false);
 
         Tests::TServer::TPtr server = new TServer(serverSettings);
         auto &runtime = *server->GetRuntime();
@@ -278,7 +289,10 @@ Y_UNIT_TEST_SUITE(TDataShardRSTest) {
         auto captureRS = [shard1,shard3](TAutoPtr<IEventHandle> &event) -> auto {
             if (event->GetTypeRewrite() == TEvTxProcessing::EvReadSet) {
                 auto &rec = event->Get<TEvTxProcessing::TEvReadSet>()->Record;
-                if (rec.GetTabletSource() == shard1) {
+                bool isExpectation = (
+                    (rec.GetFlags() & NKikimrTx::TEvReadSet::FLAG_EXPECT_READSET) &&
+                    (rec.GetFlags() & NKikimrTx::TEvReadSet::FLAG_NO_DATA));
+                if (rec.GetTabletSource() == shard1 && !isExpectation) {
                     return TTestActorRuntime::EEventAction::DROP;
                 }
             } else if (event->GetTypeRewrite() == TEvTxProcessing::EvReadSetAck) {
@@ -359,6 +373,9 @@ Y_UNIT_TEST_SUITE(TDataShardRSTest) {
             switch (ev->GetTypeRewrite()) {
                 case TEvTxProcessing::TEvReadSet::EventType: {
                     auto* msg = ev->Get<TEvTxProcessing::TEvReadSet>();
+                    if (msg->Record.GetFlags() & NKikimrTx::TEvReadSet::FLAG_NO_DATA) {
+                        break;
+                    }
                     NKikimrTx::TReadSetData genericData;
                     Y_ABORT_UNLESS(genericData.ParseFromString(msg->Record.GetReadSet()));
                     Cerr << "... generic readset: " << genericData.DebugString() << Endl;
@@ -419,6 +436,13 @@ Y_UNIT_TEST_SUITE(TDataShardRSTest) {
             switch (ev->GetTypeRewrite()) {
                 case TEvTxProcessing::TEvReadSet::EventType: {
                     auto* msg = ev->Get<TEvTxProcessing::TEvReadSet>();
+                    if (msg->Record.GetFlags() & NKikimrTx::TEvReadSet::FLAG_NO_DATA) {
+                        if (!(msg->Record.GetFlags() & NKikimrTx::TEvReadSet::FLAG_EXPECT_READSET)) {
+                            Cerr << "... nodata readset" << Endl;
+                            ++readSets;
+                        }
+                        break;
+                    }
                     NKikimrTx::TReadSetData genericData;
                     Y_ABORT_UNLESS(genericData.ParseFromString(msg->Record.GetReadSet()));
                     Cerr << "... generic readset: " << genericData.DebugString() << Endl;
diff --git a/ydb/core/tx/datashard/datashard_ut_volatile.cpp b/ydb/core/tx/datashard/datashard_ut_volatile.cpp
index 9d12f0ee2deb..c5eff03c43b3 100644
--- a/ydb/core/tx/datashard/datashard_ut_volatile.cpp
+++ b/ydb/core/tx/datashard/datashard_ut_volatile.cpp
@@ -2214,6 +2214,189 @@ Y_UNIT_TEST_SUITE(DataShardVolatile) {
             "{ items { uint32_value: 4 } items { uint32_value: 40 } }");
     }
 
+    Y_UNIT_TEST(TwoAppendsMustBeVolatile) {
+        TPortManager pm;
+        TServerSettings serverSettings(pm.GetPort(2134));
+        serverSettings.SetDomainName("Root")
+            .SetNodeCount(2)
+            .SetUseRealThreads(false)
+            .SetDomainPlanResolution(100)
+            .SetEnableDataShardVolatileTransactions(true);
+
+        Tests::TServer::TPtr server = new TServer(serverSettings);
+        auto &runtime = *server->GetRuntime();
+        auto sender = runtime.AllocateEdgeActor();
+
+        runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);
+        runtime.SetLogPriority(NKikimrServices::TX_PROXY, NLog::PRI_DEBUG);
+        runtime.SetLogPriority(NKikimrServices::KQP_EXECUTER, NLog::PRI_TRACE);
+        runtime.SetLogPriority(NKikimrServices::KQP_SESSION, NLog::PRI_TRACE);
+
+        InitRoot(server, sender);
+
+        CreateShardedTable(server, sender, "/Root", "table-1", 1);
+        CreateShardedTable(server, sender, "/Root", "table-2", 1);
+
+        // Insert initial values
+        ExecSQL(server, sender, Q_("UPSERT INTO `/Root/table-1` (key, value) VALUES (1, 10);"));
+        ExecSQL(server, sender, Q_("UPSERT INTO `/Root/table-2` (key, value) VALUES (2, 20);"));
+
+        size_t volatileTxs = 0;
+        auto proposeObserver = runtime.AddObserver<TEvDataShard::TEvProposeTransaction>([&](TEvDataShard::TEvProposeTransaction::TPtr& ev) {
+            auto* msg = ev->Get();
+            if (msg->Record.GetFlags() & TTxFlags::VolatilePrepare) {
+                ++volatileTxs;
+            }
+        });
+
+        // This simulates a jepsen transaction that appends two values at different shards
+        TString sessionId, txId;
+        UNIT_ASSERT_VALUES_EQUAL(
+            KqpSimpleBegin(runtime, sessionId, txId, Q_(R"(
+                $next_index = (
+                    SELECT COALESCE(MAX(key) + 1u, 0u)
+                    FROM (
+                        SELECT key FROM `/Root/table-1`
+                        UNION ALL
+                        SELECT key FROM `/Root/table-2`
+                    )
+                );
+                UPSERT INTO `/Root/table-1` (key, value) VALUES ($next_index, 30u);
+                )")),
+            "<empty>");
+
+        UNIT_ASSERT_VALUES_EQUAL(
+            KqpSimpleCommit(runtime, sessionId, txId, Q_(R"(
+                $next_index = (
+                    SELECT COALESCE(MAX(key) + 1u, 0u)
+                    FROM (
+                        SELECT key FROM `/Root/table-1`
+                        UNION ALL
+                        SELECT key FROM `/Root/table-2`
+                    )
+                );
+                UPSERT INTO `/Root/table-2` (key, value) VALUES ($next_index, 40u);
+                )")),
+            "<empty>");
+
+        // There should have been volatile transactions at both shards
+        UNIT_ASSERT_VALUES_EQUAL(volatileTxs, 2u);
+    }
+
+    // Regression test for KIKIMR-21156
+    Y_UNIT_TEST(VolatileCommitOnBlobStorageFailure) {
+        TPortManager pm;
+        TServerSettings serverSettings(pm.GetPort(2134));
+        serverSettings.SetDomainName("Root")
+            .SetUseRealThreads(false)
+            .SetDomainPlanResolution(1000)
+            .SetEnableDataShardVolatileTransactions(true);
+
+        Tests::TServer::TPtr server = new TServer(serverSettings);
+        auto &runtime = *server->GetRuntime();
+        auto sender = runtime.AllocateEdgeActor();
+
+        runtime.SetLogPriority(NKikimrServices::TX_DATASHARD, NLog::PRI_TRACE);
+        runtime.SetLogPriority(NKikimrServices::TX_PROXY, NLog::PRI_DEBUG);
+        runtime.SetLogPriority(NKikimrServices::KQP_EXECUTER, NLog::PRI_TRACE);
+        runtime.SetLogPriority(NKikimrServices::KQP_SESSION, NLog::PRI_TRACE);
+
+        InitRoot(server, sender);
+
+        TDisableDataShardLogBatching disableDataShardLogBatching;
+        CreateShardedTable(server, sender, "/Root", "table-1", 1);
+        CreateShardedTable(server, sender, "/Root", "table-2", 1);
+
+        // Make sure read flags are persisted by performing a snapshot read
+        UNIT_ASSERT_VALUES_EQUAL(
+            KqpSimpleExec(runtime, R"(
+                SELECT key, value FROM `/Root/table-1`
+                UNION ALL
+                SELECT key, value FROM `/Root/table-2`
+                ORDER BY key
+                )"),
+            "");
+
+        // Insert initial values
+        ExecSQL(server, sender, Q_("UPSERT INTO `/Root/table-1` (key, value) VALUES (1, 10);"));
+        ExecSQL(server, sender, Q_("UPSERT INTO `/Root/table-2` (key, value) VALUES (2, 20);"));
+
+        // Start blocking commits for table-1
+        const auto shards1 = GetTableShards(server, sender, "/Root/table-1");
+        UNIT_ASSERT_VALUES_EQUAL(shards1.size(), 1u);
+        std::deque<TEvBlobStorage::TEvPut::TPtr> blockedPuts;
+        auto blockCommits = runtime.AddObserver<TEvBlobStorage::TEvPut>([&](TEvBlobStorage::TEvPut::TPtr& ev) {
+            auto* msg = ev->Get();
+            // Drop all put requests for table-1
+            if (msg->Id.TabletID() == shards1.at(0)) {
+                Cerr << "... blocking put " << msg->Id << Endl;
+                blockedPuts.push_back(std::move(ev));
+            }
+        });
+
+        // Start an upsert to table-1, this will block further readonly localdb tx completions
+        Cerr << "... starting an upsert to table-1" << Endl;
+        auto firstUpsertFuture = KqpSimpleSend(runtime, R"(
+            UPSERT INTO `/Root/table-1` (key, value) VALUES (3, 30);
+            )");
+
+        // Wait until puts are blocked
+        WaitFor(runtime, [&]{ return blockedPuts.size() > 0; }, "blocked puts");
+        auto firstUpsertPuts = std::move(blockedPuts);
+        UNIT_ASSERT(blockedPuts.empty());
+
+        // Read from table-2 and write to table-1 based on the result
+        // This will result in a two-shard volatile tx writing to table-1
+        Cerr << "... starting distributed tx between table-1 and table-2" << Endl;
+        auto volatileFuture = KqpSimpleSend(runtime, R"(
+            UPSERT INTO `/Root/table-1`
+                SELECT key + 2u AS key, value + 2u AS value
+                FROM `/Root/table-2`;
+            )");
+
+        // Wait until it also tries to commit
+        WaitFor(runtime, [&]{ return blockedPuts.size() > 0; }, "blocked puts");
+
+        // Now unblock the first upsert puts
+        blockCommits.Remove();
+        for (auto& ev : firstUpsertPuts) {
+            runtime.Send(ev.Release(), 0, true);
+        }
+        firstUpsertPuts.clear();
+
+        // And wait for it to finish successfully
+        Cerr << "... waiting for first upsert result" << Endl;
+        UNIT_ASSERT_VALUES_EQUAL(
+            FormatResult(AwaitResponse(runtime, std::move(firstUpsertFuture))),
+            "<empty>");
+
+        // Reply to everything previously blocked with an error, the shard will restart
+        for (auto& ev : blockedPuts) {
+            auto proxy = ev->Recipient;
+            ui32 groupId = GroupIDFromBlobStorageProxyID(proxy);
+            auto res = ev->Get()->MakeErrorResponse(NKikimrProto::ERROR, "Something went wrong", groupId);
+            runtime.Send(new IEventHandle(ev->Sender, proxy, res.release()), 0, true);
+        }
+
+        // Wait for the volatile tx result
+        Cerr << "... waiting for volatile tx result" << Endl;
+        auto result = FormatResult(AwaitResponse(runtime, std::move(volatileFuture)));
+        if (result == "<empty>") {
+            // A success result is not ok now, but in the future we might migrate state
+            // Check that the supposedly committed row actually exists
+            UNIT_ASSERT_VALUES_EQUAL(
+                KqpSimpleExec(runtime, R"(
+                    SELECT key, value FROM `/Root/table-1` ORDER BY key;
+                    )"),
+                "{ items { uint32_value: 1 } items { uint32_value: 10 } }, "
+                "{ items { uint32_value: 3 } items { uint32_value: 30 } }, "
+                "{ items { uint32_value: 4 } items { uint32_value: 22 } }");
+        } else {
+            // Otherwise the result must be undetermined
+            UNIT_ASSERT_VALUES_EQUAL(result, "ERROR: UNDETERMINED");
+        }
+    }
+
 } // Y_UNIT_TEST_SUITE(DataShardVolatile)
 
 } // namespace NKikimr
diff --git a/ydb/core/tx/datashard/finish_propose_unit.cpp b/ydb/core/tx/datashard/finish_propose_unit.cpp
index 7c30cb960093..bfc7a166d2aa 100644
--- a/ydb/core/tx/datashard/finish_propose_unit.cpp
+++ b/ydb/core/tx/datashard/finish_propose_unit.cpp
@@ -99,8 +99,11 @@ EExecutionStatus TFinishProposeUnit::Execute(TOperation::TPtr op,
         op->SetFinishProposeTs(DataShard.ConfirmReadOnlyLease());
     }
 
-    if (!op->HasResultSentFlag() && (op->IsDirty() || op->HasVolatilePrepareFlag() || !Pipeline.WaitCompletion(op)))
+    if (!op->HasResultSentFlag() && (op->IsDirty() || op->HasVolatilePrepareFlag() || !Pipeline.WaitCompletion(op))) {
+        DataShard.IncCounter(COUNTER_PREPARE_COMPLETE);
+        op->SetProposeResultSentEarly();
         CompleteRequest(op, ctx);
+    }
 
     if (!DataShard.IsFollower())
         DataShard.PlanCleanup(ctx);
@@ -128,7 +131,7 @@ EExecutionStatus TFinishProposeUnit::Execute(TOperation::TPtr op,
 void TFinishProposeUnit::Complete(TOperation::TPtr op,
                                   const TActorContext &ctx)
 {
-    if (!op->HasResultSentFlag()) {
+    if (!op->HasResultSentFlag() && !op->IsProposeResultSentEarly()) {
         DataShard.IncCounter(COUNTER_PREPARE_COMPLETE);
 
         if (op->Result())
diff --git a/ydb/core/tx/datashard/finish_propose_write_unit.cpp b/ydb/core/tx/datashard/finish_propose_write_unit.cpp
index d6c9dffa10fa..7ed6d64ff24f 100644
--- a/ydb/core/tx/datashard/finish_propose_write_unit.cpp
+++ b/ydb/core/tx/datashard/finish_propose_write_unit.cpp
@@ -97,8 +97,11 @@ EExecutionStatus TFinishProposeWriteUnit::Execute(TOperation::TPtr op,
         op->SetFinishProposeTs(DataShard.ConfirmReadOnlyLease());
     }
 
-    if (!op->HasResultSentFlag() && (op->IsDirty() || op->HasVolatilePrepareFlag() || !Pipeline.WaitCompletion(op)))
+    if (!op->HasResultSentFlag() && (op->IsDirty() || op->HasVolatilePrepareFlag() || !Pipeline.WaitCompletion(op))) {
+        DataShard.IncCounter(COUNTER_PREPARE_COMPLETE);
+        op->SetProposeResultSentEarly();
         CompleteRequest(op, ctx);
+    }
 
     if (!DataShard.IsFollower())
         DataShard.PlanCleanup(ctx);
@@ -127,7 +130,7 @@ void TFinishProposeWriteUnit::Complete(TOperation::TPtr op, const TActorContext
 {
     TWriteOperation* writeOp = TWriteOperation::CastWriteOperation(op);
 
-    if (!op->HasResultSentFlag()) {
+    if (!op->HasResultSentFlag() && !op->IsProposeResultSentEarly()) {
         DataShard.IncCounter(COUNTER_WRITE_COMPLETE);
 
         if (writeOp->GetWriteResult())
diff --git a/ydb/core/tx/datashard/operation.h b/ydb/core/tx/datashard/operation.h
index 201e22636a74..8cffc801f97b 100644
--- a/ydb/core/tx/datashard/operation.h
+++ b/ydb/core/tx/datashard/operation.h
@@ -402,12 +402,15 @@ class TBasicOpInfo {
 
     bool IsMvccSnapshotRead() const { return !MvccSnapshot.IsMax(); }
     const TRowVersion& GetMvccSnapshot() const { return MvccSnapshot; }
-    bool IsMvccSnapshotRepeatable() const { return MvccSnapshotRepeatable; }
+    bool IsMvccSnapshotRepeatable() const { return MvccSnapshotRepeatable_; }
     void SetMvccSnapshot(const TRowVersion& snapshot, bool isRepeatable = true) {
         MvccSnapshot = snapshot;
-        MvccSnapshotRepeatable = isRepeatable;
+        MvccSnapshotRepeatable_ = isRepeatable;
     }
 
+    bool IsProposeResultSentEarly() const { return ProposeResultSentEarly_; }
+    void SetProposeResultSentEarly(bool value = true) { ProposeResultSentEarly_ = value; }
+
     ///////////////////////////////////
     //     DEBUG AND MONITORING      //
     ///////////////////////////////////
@@ -429,7 +432,11 @@ class TBasicOpInfo {
 
     TSnapshotKey AcquiredSnapshotKey;
     TRowVersion MvccSnapshot = TRowVersion::Max();
-    bool MvccSnapshotRepeatable = false;
+
+private:
+    // Runtime flags
+    ui8 MvccSnapshotRepeatable_ : 1 = 0;
+    ui8 ProposeResultSentEarly_ : 1 = 0;
 };
 
 struct TRSData {
diff --git a/ydb/core/tx/scheme_board/CMakeLists.darwin-arm64.txt b/ydb/core/tx/scheme_board/CMakeLists.darwin-arm64.txt
index 65a6b9453ca1..1a1f1257a6a5 100644
--- a/ydb/core/tx/scheme_board/CMakeLists.darwin-arm64.txt
+++ b/ydb/core/tx/scheme_board/CMakeLists.darwin-arm64.txt
@@ -35,6 +35,7 @@ target_link_libraries(core-tx-scheme_board PUBLIC
 )
 target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/cache.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/events.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/helpers.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/load_test.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/monitoring.cpp
@@ -42,6 +43,7 @@ target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/replica.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/two_part_description.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/opaque_path_description.cpp
 )
 generate_enum_serilization(core-tx-scheme_board
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.h
diff --git a/ydb/core/tx/scheme_board/CMakeLists.darwin-x86_64.txt b/ydb/core/tx/scheme_board/CMakeLists.darwin-x86_64.txt
index 65a6b9453ca1..1a1f1257a6a5 100644
--- a/ydb/core/tx/scheme_board/CMakeLists.darwin-x86_64.txt
+++ b/ydb/core/tx/scheme_board/CMakeLists.darwin-x86_64.txt
@@ -35,6 +35,7 @@ target_link_libraries(core-tx-scheme_board PUBLIC
 )
 target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/cache.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/events.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/helpers.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/load_test.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/monitoring.cpp
@@ -42,6 +43,7 @@ target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/replica.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/two_part_description.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/opaque_path_description.cpp
 )
 generate_enum_serilization(core-tx-scheme_board
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.h
diff --git a/ydb/core/tx/scheme_board/CMakeLists.linux-aarch64.txt b/ydb/core/tx/scheme_board/CMakeLists.linux-aarch64.txt
index ec77757c3e0f..b3b223597a8d 100644
--- a/ydb/core/tx/scheme_board/CMakeLists.linux-aarch64.txt
+++ b/ydb/core/tx/scheme_board/CMakeLists.linux-aarch64.txt
@@ -36,6 +36,7 @@ target_link_libraries(core-tx-scheme_board PUBLIC
 )
 target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/cache.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/events.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/helpers.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/load_test.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/monitoring.cpp
@@ -43,6 +44,7 @@ target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/replica.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/two_part_description.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/opaque_path_description.cpp
 )
 generate_enum_serilization(core-tx-scheme_board
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.h
diff --git a/ydb/core/tx/scheme_board/CMakeLists.linux-x86_64.txt b/ydb/core/tx/scheme_board/CMakeLists.linux-x86_64.txt
index ec77757c3e0f..b3b223597a8d 100644
--- a/ydb/core/tx/scheme_board/CMakeLists.linux-x86_64.txt
+++ b/ydb/core/tx/scheme_board/CMakeLists.linux-x86_64.txt
@@ -36,6 +36,7 @@ target_link_libraries(core-tx-scheme_board PUBLIC
 )
 target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/cache.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/events.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/helpers.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/load_test.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/monitoring.cpp
@@ -43,6 +44,7 @@ target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/replica.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/two_part_description.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/opaque_path_description.cpp
 )
 generate_enum_serilization(core-tx-scheme_board
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.h
diff --git a/ydb/core/tx/scheme_board/CMakeLists.windows-x86_64.txt b/ydb/core/tx/scheme_board/CMakeLists.windows-x86_64.txt
index 65a6b9453ca1..1a1f1257a6a5 100644
--- a/ydb/core/tx/scheme_board/CMakeLists.windows-x86_64.txt
+++ b/ydb/core/tx/scheme_board/CMakeLists.windows-x86_64.txt
@@ -35,6 +35,7 @@ target_link_libraries(core-tx-scheme_board PUBLIC
 )
 target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/cache.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/events.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/helpers.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/load_test.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/monitoring.cpp
@@ -42,6 +43,7 @@ target_sources(core-tx-scheme_board PRIVATE
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/replica.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.cpp
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/two_part_description.cpp
+  ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/opaque_path_description.cpp
 )
 generate_enum_serilization(core-tx-scheme_board
   ${CMAKE_SOURCE_DIR}/ydb/core/tx/scheme_board/subscriber.h
diff --git a/ydb/core/tx/scheme_board/replica.cpp b/ydb/core/tx/scheme_board/replica.cpp
index c1600b4bd644..cb5ddd2e923f 100644
--- a/ydb/core/tx/scheme_board/replica.cpp
+++ b/ydb/core/tx/scheme_board/replica.cpp
@@ -248,17 +248,6 @@ class TReplica: public TMonitorableActor<TReplica> {
             TrackMemory();
         }
 
-        explicit TDescription(
-                TReplica* owner,
-                const TPathId& pathId,
-                TOpaquePathDescription&& pathDescription)
-            : Owner(owner)
-            , PathId(pathId)
-            , PathDescription(std::move(pathDescription))
-        {
-            TrackMemory();
-        }
-
         explicit TDescription(
                 TReplica* owner,
                 const TString& path,
@@ -540,13 +529,13 @@ class TReplica: public TMonitorableActor<TReplica> {
     }
 
     // upsert description only by pathId
-    TDescription& UpsertDescription(const TPathId& pathId, TOpaquePathDescription&& pathDescription) {
+    TDescription& UpsertDescriptionByPathId(const TString& path, const TPathId& pathId, TOpaquePathDescription&& pathDescription) {
         SBR_LOG_I("Upsert description"
             << ": pathId# " << pathId
             << ", pathDescription# " << pathDescription.ToString()
         );
 
-        return Descriptions.Upsert(pathId, TDescription(this, pathId, std::move(pathDescription)));
+        return Descriptions.Upsert(pathId, TDescription(this, path, pathId, std::move(pathDescription)));
     }
 
     // upsert description by path AND pathId both
@@ -898,7 +887,7 @@ class TReplica: public TMonitorableActor<TReplica> {
             if (abandonedSchemeShards.contains(pathId.OwnerId)) { // TSS is ignored, present GSS reverted it
                 log("Replace GSS by TSS description is rejected, GSS implicitly knows that TSS has been reverted"
                     ", but still inject description only by pathId for safe");
-                UpsertDescription(pathId, std::move(pathDescription));
+                UpsertDescriptionByPathId(path, pathId, std::move(pathDescription));
                 return AckUpdate(ev);
             }
 
@@ -923,7 +912,7 @@ class TReplica: public TMonitorableActor<TReplica> {
             }
 
             log("Inject description only by pathId, it is update from GSS");
-            UpsertDescription(pathId, std::move(pathDescription));
+            UpsertDescriptionByPathId(path, pathId, std::move(pathDescription));
             return AckUpdate(ev);
         }
 
diff --git a/ydb/library/yql/minikql/mkql_node.cpp b/ydb/library/yql/minikql/mkql_node.cpp
index 82815a8e3e4b..6fa8d8f55db9 100644
--- a/ydb/library/yql/minikql/mkql_node.cpp
+++ b/ydb/library/yql/minikql/mkql_node.cpp
@@ -2525,7 +2525,7 @@ EValueRepresentation GetValueRepresentation(const TType* type) {
 }
 
 TArrayRef<TType* const> GetWideComponents(const TFlowType* type) {
-    if (RuntimeVersion > 35) {
+    if (type->GetItemType()->IsMulti()) {
         return AS_TYPE(TMultiType, type->GetItemType())->GetElements();
     }
     return AS_TYPE(TTupleType, type->GetItemType())->GetElements();
diff --git a/ydb/library/yql/sql/v1/sql_translation.cpp b/ydb/library/yql/sql/v1/sql_translation.cpp
index 073dd5e07397..aaef357bd06c 100644
--- a/ydb/library/yql/sql/v1/sql_translation.cpp
+++ b/ydb/library/yql/sql/v1/sql_translation.cpp
@@ -53,6 +53,33 @@ TString CollectTokens(const TRule_select_stmt& selectStatement) {
     return tokenCollector.Tokens;
 }
 
+NSQLTranslation::TTranslationSettings CreateViewTranslationSettings(const NSQLTranslation::TTranslationSettings& base) {
+    NSQLTranslation::TTranslationSettings settings;
+    
+    settings.ClusterMapping = base.ClusterMapping;
+    settings.Mode = NSQLTranslation::ESqlMode::LIMITED_VIEW;
+
+    return settings;
+}
+
+TNodePtr BuildViewSelect(const TRule_select_stmt& query, TContext& ctx) {
+    const auto viewTranslationSettings = CreateViewTranslationSettings(ctx.Settings);
+    TContext viewParsingContext(viewTranslationSettings, {}, ctx.Issues);
+    TSqlSelect select(viewParsingContext, viewTranslationSettings.Mode);
+    TPosition pos;
+    auto source = select.Build(query, pos);
+    if (!source) {
+        return nullptr;
+    }
+    return BuildSelectResult(
+        pos,
+        std::move(source),
+        false,
+        false,
+        viewParsingContext.Scoped
+    );
+}
+
 }
 
 namespace NSQLTranslationV1 {
@@ -4484,19 +4511,11 @@ bool TSqlTranslation::ParseViewQuery(std::map<TString, TDeferredAtom>& features,
     const TString queryText = CollectTokens(query);
     features["query_text"] = {Ctx.Pos(), queryText};
 
-    {
-        TSqlSelect select(Ctx, Mode);
-        TPosition pos;
-        auto source = select.Build(query, pos);
-        if (!source) {
-            return false;
-        }
-        features["query_ast"] = {BuildSelectResult(pos,
-                                                   std::move(source),
-                                                   false,
-                                                   false,
-                                                   Ctx.Scoped), Ctx};
+    const auto viewSelect = BuildViewSelect(query, Ctx);
+    if (!viewSelect) {
+        return false;
     }
+    features["query_ast"] = {viewSelect, Ctx};
 
     return true;
 }
diff --git a/ydb/public/api/protos/draft/ydb_maintenance.proto b/ydb/public/api/protos/draft/ydb_maintenance.proto
index 8dc461221314..c37356b98527 100644
--- a/ydb/public/api/protos/draft/ydb_maintenance.proto
+++ b/ydb/public/api/protos/draft/ydb_maintenance.proto
@@ -43,6 +43,9 @@ message Node {
     }
     // start_time defines time when node was registered in cms.
     google.protobuf.Timestamp start_time = 8;
+    // version defines YDB version for current Node.
+    // For example, 'ydb-stable-24-1'.
+    string version = 9;
 }
 
 message ListClusterNodesRequest {
diff --git a/ydb/services/deprecated/persqueue_v0/grpc_pq_actor.h b/ydb/services/deprecated/persqueue_v0/grpc_pq_actor.h
index 0d5e472ca443..cb1ca35ecd86 100644
--- a/ydb/services/deprecated/persqueue_v0/grpc_pq_actor.h
+++ b/ydb/services/deprecated/persqueue_v0/grpc_pq_actor.h
@@ -554,6 +554,8 @@ class TWriteSessionActor : public NActors::TActorBootstrapped<TWriteSessionActor
     NPersQueue::TWriteRequest::TInit InitRequest;
 
     TActorId PartitionChooser;
+
+    bool SessionClosed = false;
 };
 
 class TReadSessionActor : public TActorBootstrapped<TReadSessionActor> {
diff --git a/ydb/services/deprecated/persqueue_v0/grpc_pq_write_actor.cpp b/ydb/services/deprecated/persqueue_v0/grpc_pq_write_actor.cpp
index e29b4bc4f304..6172305476af 100644
--- a/ydb/services/deprecated/persqueue_v0/grpc_pq_write_actor.cpp
+++ b/ydb/services/deprecated/persqueue_v0/grpc_pq_write_actor.cpp
@@ -310,7 +310,10 @@ void TWriteSessionActor::SetupCounters(const TString& cloudId, const TString& db
 
 
 void TWriteSessionActor::Handle(TEvDescribeTopicsResponse::TPtr& ev, const TActorContext& ctx) {
-    Y_ABORT_UNLESS(State == ES_WAIT_SCHEME || State == ES_INITED);
+    if (State != ES_WAIT_SCHEME && State != ES_INITED) {
+        return CloseSession("erroneous internal state", NPersQueue::NErrorCode::ERROR, ctx);
+    }
+
     auto& res = ev->Get()->Result;
     Y_ABORT_UNLESS(res->ResultSet.size() == 1);
 
@@ -503,6 +506,11 @@ void TWriteSessionActor::ProceedPartition(const ui32 partition, const TActorCont
 }
 
 void TWriteSessionActor::CloseSession(const TString& errorReason, const NPersQueue::NErrorCode::EErrorCode errorCode, const NActors::TActorContext& ctx) {
+    if (SessionClosed) {
+        return;
+    }
+    SessionClosed = true;
+
     if (errorCode != NPersQueue::NErrorCode::OK) {
         if (InternalErrorCode(errorCode)) {
             SLIErrors.Inc();
@@ -865,7 +873,7 @@ void TWriteSessionActor::LogSession(const TActorContext& ctx) {
 
 void TWriteSessionActor::HandleWakeup(const TActorContext& ctx) {
     if (State != ES_INITED) {
-        return;
+        return CloseSession("erroneous internal state", NPersQueue::NErrorCode::ERROR, ctx);
     }
 
     auto now = ctx.Now();
diff --git a/ydb/services/lib/actors/pq_schema_actor.cpp b/ydb/services/lib/actors/pq_schema_actor.cpp
index c6564b247985..8d18aa9edde2 100644
--- a/ydb/services/lib/actors/pq_schema_actor.cpp
+++ b/ydb/services/lib/actors/pq_schema_actor.cpp
@@ -136,12 +136,6 @@ namespace NKikimr::NGRpcProxy::V1 {
         }
 
         if (rr.important()) {
-            if (AppData(ctx)->PQConfig.GetTopicsAreFirstClassCitizen()) {
-                return TMsgPqCodes(
-                    TStringBuilder() << "important flag is forbiden for consumer " << rr.consumer_name(),
-                    Ydb::PersQueue::ErrorCode::VALIDATION_ERROR
-                );
-            }
             config->MutablePartitionConfig()->AddImportantClientId(consumerName);
         }
 
diff --git a/ydb/services/persqueue_v1/actors/write_session_actor.h b/ydb/services/persqueue_v1/actors/write_session_actor.h
index 2d69db971d7f..17c47aab7837 100644
--- a/ydb/services/persqueue_v1/actors/write_session_actor.h
+++ b/ydb/services/persqueue_v1/actors/write_session_actor.h
@@ -271,6 +271,8 @@ class TWriteSessionActor
 
     TActorId PartitionWriterCache;
     TActorId PartitionChooser;
+
+    bool SessionClosed = false;
 };
 
 }
diff --git a/ydb/services/persqueue_v1/actors/write_session_actor.ipp b/ydb/services/persqueue_v1/actors/write_session_actor.ipp
index b76ab8fb24a7..825e342b7ead 100644
--- a/ydb/services/persqueue_v1/actors/write_session_actor.ipp
+++ b/ydb/services/persqueue_v1/actors/write_session_actor.ipp
@@ -724,6 +724,10 @@ void TWriteSessionActor<UseMigrationProtocol>::DestroyPartitionWriterCache(const
 
 template<bool UseMigrationProtocol>
 void TWriteSessionActor<UseMigrationProtocol>::CloseSession(const TString& errorReason, const PersQueue::ErrorCode::ErrorCode errorCode, const NActors::TActorContext& ctx) {
+    if (SessionClosed) {
+        return;
+    }
+    SessionClosed = true;
 
     if (errorCode != PersQueue::ErrorCode::OK) {
 
@@ -1503,7 +1507,10 @@ void TWriteSessionActor<UseMigrationProtocol>::Handle(TEvents::TEvWakeup::TPtr&
 
 template<bool UseMigrationProtocol>
 void TWriteSessionActor<UseMigrationProtocol>::RecheckACL(const TActorContext& ctx) {
-    Y_ABORT_UNLESS(State == ES_INITED);
+    if (State != ES_INITED) {
+        LOG_ERROR_S(ctx, NKikimrServices::PQ_WRITE_PROXY, "WriteSessionActor state is wrong. Actual state '" << (int)State << "'");
+        return CloseSession("erroneous internal state", PersQueue::ErrorCode::ERROR, ctx);
+    }
 
     auto now = ctx.Now();
 
