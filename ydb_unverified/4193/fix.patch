diff --git a/ydb/core/kqp/proxy_service/kqp_proxy_service.cpp b/ydb/core/kqp/proxy_service/kqp_proxy_service.cpp
index 1d57bb106c5b..f0096b0dda00 100644
--- a/ydb/core/kqp/proxy_service/kqp_proxy_service.cpp
+++ b/ydb/core/kqp/proxy_service/kqp_proxy_service.cpp
@@ -583,10 +583,10 @@ class TKqpProxyService : public TActorBootstrapped<TKqpProxyService> {
 
         if (CheckRequestDeadline(requestInfo, deadline, result) &&
             CreateNewSessionWorker(requestInfo, TString(DefaultKikimrPublicClusterName), true, request.GetDatabase(),
-                request.GetApplicationName(), event.GetSupportsBalancing(), event.GetPgWire(),
+                event.GetSupportsBalancing(), event.GetPgWire(),
                 event.GetClientAddress(), event.GetUserSID(), event.GetClientUserAgent(), event.GetClientSdkBuildInfo(),
                 event.GetClientPID(),
-                event.GetApplicationName(), result))
+                event.GetApplicationName(), event.GetUserName(), result))
         {
             auto& response = *responseEv->Record.MutableResponse();
             response.SetSessionId(result.Value->SessionId);
@@ -619,7 +619,7 @@ class TKqpProxyService : public TActorBootstrapped<TKqpProxyService> {
         if (ev->Get()->GetSessionId().empty()) {
             TProcessResult<TKqpSessionInfo*> result;
             if (!CreateNewSessionWorker(requestInfo, TString(DefaultKikimrPublicClusterName), false,
-                database, {}, false, false, "", "", "", "", "", "", result))
+                database, false, false, "", "", "", "", "", "", Nothing(), result))
             {
                 ReplyProcessError(result.YdbStatus, result.Error, requestId);
                 return;
@@ -1415,11 +1415,12 @@ class TKqpProxyService : public TActorBootstrapped<TKqpProxyService> {
     }
 
     bool CreateNewSessionWorker(const TKqpRequestInfo& requestInfo, const TString& cluster, bool longSession,
-        const TString& database, const TMaybe<TString>& applicationName, bool supportsBalancing, bool pgWire,
+        const TString& database, bool supportsBalancing, bool pgWire,
         const TString& clientHost, const TString& clientSid, const TString& userAgent,
         const TString& sdkBuildInfo,
         const TString& clientPid,
         const TString& clientApplicationName,
+        const TMaybe<TString>& clientUserName,
         TProcessResult<TKqpSessionInfo*>& result)
     {
         if (!database.empty() && AppData()->TenantName.empty()) {
@@ -1458,7 +1459,7 @@ class TKqpProxyService : public TActorBootstrapped<TKqpProxyService> {
 
         auto dbCounters = Counters->GetDbCounters(database);
 
-        TKqpWorkerSettings workerSettings(cluster, database, applicationName, TableServiceConfig, QueryServiceConfig, dbCounters);
+        TKqpWorkerSettings workerSettings(cluster, database, clientApplicationName, clientUserName, TableServiceConfig, QueryServiceConfig, dbCounters);
         workerSettings.LongSession = longSession;
 
         auto config = CreateConfig(KqpSettings, workerSettings);
diff --git a/ydb/core/kqp/proxy_service/kqp_session_info.cpp b/ydb/core/kqp/proxy_service/kqp_session_info.cpp
index 5857b315c25b..995e02676c54 100644
--- a/ydb/core/kqp/proxy_service/kqp_session_info.cpp
+++ b/ydb/core/kqp/proxy_service/kqp_session_info.cpp
@@ -68,7 +68,6 @@ void TKqpSessionInfo::SerializeTo(::NKikimrKqp::TSessionInfo* proto, const TFiel
     if (fieldsMap.NeedField(VSessions::UserSID::ColumnId)) {  // 14
         proto->SetUserSID(ClientSID);
     }
-
 }
 
-}  // namespace NKikimr::NKqp
\ No newline at end of file
+}  // namespace NKikimr::NKqp
diff --git a/ydb/core/kqp/session_actor/kqp_session_actor.cpp b/ydb/core/kqp/session_actor/kqp_session_actor.cpp
index 2320ffa09ab4..fb8ceebb1ca1 100644
--- a/ydb/core/kqp/session_actor/kqp_session_actor.cpp
+++ b/ydb/core/kqp/session_actor/kqp_session_actor.cpp
@@ -1174,6 +1174,9 @@ class TKqpSessionActor : public TActorBootstrapped<TKqpSessionActor> {
         if (Settings.Database) {
             GUCSettings->Set("ydb_database", Settings.Database.substr(1, Settings.Database.Size() - 1));
         }
+        if (Settings.UserName) {
+            GUCSettings->Set("ydb_user", *Settings.UserName);
+        }
     }
 
     void SendToSchemeExecuter(const TKqpPhyTxHolder::TConstPtr& tx) {
diff --git a/ydb/core/kqp/session_actor/kqp_session_actor.h b/ydb/core/kqp/session_actor/kqp_session_actor.h
index f6f4e622fa10..74a4c987c5c0 100644
--- a/ydb/core/kqp/session_actor/kqp_session_actor.h
+++ b/ydb/core/kqp/session_actor/kqp_session_actor.h
@@ -17,6 +17,7 @@ struct TKqpWorkerSettings {
     TString Cluster;
     TString Database;
     TMaybe<TString> ApplicationName;
+    TMaybe<TString> UserName;
     bool LongSession = false;
 
     NKikimrConfig::TTableServiceConfig TableService;
@@ -28,11 +29,12 @@ struct TKqpWorkerSettings {
     TKqpDbCountersPtr DbCounters;
 
     explicit TKqpWorkerSettings(const TString& cluster, const TString& database,
-            const TMaybe<TString>& applicationName, const NKikimrConfig::TTableServiceConfig& tableServiceConfig,
+            const TMaybe<TString>& applicationName, const TMaybe<TString>& userName, const NKikimrConfig::TTableServiceConfig& tableServiceConfig,
             const  NKikimrConfig::TQueryServiceConfig& queryServiceConfig, TKqpDbCountersPtr dbCounters)
         : Cluster(cluster)
         , Database(database)
         , ApplicationName(applicationName)
+        , UserName(userName)
         , TableService(tableServiceConfig)
         , QueryService(queryServiceConfig)
         , MkqlInitialMemoryLimit(2097152, 1, Max<i64>())
diff --git a/ydb/core/kqp/ut/pg/pg_catalog_ut.cpp b/ydb/core/kqp/ut/pg/pg_catalog_ut.cpp
index 09fe6f99fc79..01da59480e01 100644
--- a/ydb/core/kqp/ut/pg/pg_catalog_ut.cpp
+++ b/ydb/core/kqp/ut/pg/pg_catalog_ut.cpp
@@ -399,7 +399,6 @@ Y_UNIT_TEST_SUITE(PgCatalog) {
             )", NYdb::NQuery::TTxControl::BeginTx().CommitTx(), settings).ExtractValueSync();
             UNIT_ASSERT_C(result.IsSuccess(), result.GetIssues().ToString());
             UNIT_ASSERT_C(!result.GetResultSets().empty(), "no result sets");
-            // userName not set to GUCSettings yet
             CompareYson(R"([
                 ["postgres"]
             ])", FormatResultSetYson(result.GetResultSet(0)));
diff --git a/ydb/core/local_pgwire/local_pgwire_connection.cpp b/ydb/core/local_pgwire/local_pgwire_connection.cpp
index ec945a434b67..12e6b41a098a 100644
--- a/ydb/core/local_pgwire/local_pgwire_connection.cpp
+++ b/ydb/core/local_pgwire/local_pgwire_connection.cpp
@@ -51,7 +51,10 @@ class TPgYdbConnection : public TActorBootstrapped<TPgYdbConnection> {
         record.SetPgWire(true);
         NKikimrKqp::TCreateSessionRequest& request = *record.MutableRequest();
         if (ConnectionParams.count("application_name")) {
-            request.SetApplicationName(ConnectionParams["application_name"]);
+            record.SetApplicationName(ConnectionParams["application_name"]);
+        }
+        if (ConnectionParams.count("user")) {
+            record.SetUserName(ConnectionParams["user"]);
         }
         request.SetDatabase(database);
         BLOG_D("Sent CreateSessionRequest to kqpProxy " << ev->Record.ShortDebugString());
diff --git a/ydb/core/protos/kqp.proto b/ydb/core/protos/kqp.proto
index 7b769718a6b8..9c4b119f24ca 100644
--- a/ydb/core/protos/kqp.proto
+++ b/ydb/core/protos/kqp.proto
@@ -340,6 +340,7 @@ message TSessionInfo {
     optional int64 StateChangeAt = 13;
     optional string UserSID = 14;
     optional bool PgWire = 15 [default = false];
+    optional string UserName = 16;
 }
 
 message TEvListSessionsRequest {
@@ -370,7 +371,6 @@ message TKqpDefaultSettings {
 
 message TCreateSessionRequest {
     optional string Database = 1;
-    optional string ApplicationName = 2;
 }
 
 message TEvCreateSessionRequest {
@@ -391,6 +391,7 @@ message TEvCreateSessionRequest {
     optional string ClientSdkBuildInfo = 10;
     optional string ApplicationName = 11;
     optional string UserSID = 12;
+    optional string UserName = 13;
 }
 
 message TCreateSessionResponse {
diff --git a/ydb/library/yql/parser/pg_wrapper/comp_factory.cpp b/ydb/library/yql/parser/pg_wrapper/comp_factory.cpp
index feb08771e26a..6feeaf71ac3f 100644
--- a/ydb/library/yql/parser/pg_wrapper/comp_factory.cpp
+++ b/ydb/library/yql/parser/pg_wrapper/comp_factory.cpp
@@ -754,7 +754,8 @@ class TPgTableContent : public TMutableComputationNode<TPgTableContent> {
                     rows.emplace_back(row);
                 }
             } else if (Table_ == "pg_roles") {
-                for (ui32 index = 1; index <= 1; ++index) {
+                ui32 tableSize = PGGetGUCSetting("ydb_user") ? 2 : 1;
+                for (ui32 index = 1; index <= tableSize; ++index) {
                     NUdf::TUnboxedValue* items;
                     auto row = compCtx.HolderFactory.CreateDirectArrayHolder(PgRolesFillers_.size(), items);
                     for (ui32 i = 0; i < PgRolesFillers_.size(); ++i) {
diff --git a/ydb/library/yql/parser/pg_wrapper/memory_context.h b/ydb/library/yql/parser/pg_wrapper/memory_context.h
index 9cdd933f17ff..060894ca2d5d 100644
--- a/ydb/library/yql/parser/pg_wrapper/memory_context.h
+++ b/ydb/library/yql/parser/pg_wrapper/memory_context.h
@@ -30,5 +30,5 @@ struct TMainContext {
     TString LastError;
     TGUCSettings::TPtr GUCSettings;
     HeapTuple CurrentDatabaseName = nullptr;
-    HeapTuple PrevDatabaseName = nullptr;
+    HeapTuple CurrentUserName = nullptr;
 };
diff --git a/ydb/library/yql/parser/pg_wrapper/syscache.cpp b/ydb/library/yql/parser/pg_wrapper/syscache.cpp
index e6faa5ed954a..566d1b7614cf 100644
--- a/ydb/library/yql/parser/pg_wrapper/syscache.cpp
+++ b/ydb/library/yql/parser/pg_wrapper/syscache.cpp
@@ -548,6 +548,49 @@ struct TSysCache {
         cacheItem->PgThreadContextLookup = std::move(threadContextLookup);
     }
 
+    static HeapTuple MakePgRolesHeapTuple(ui32 oid, const char* rolname) {
+        TupleDesc tupleDesc = CreateTemplateTupleDesc(Natts_pg_authid);
+        FillAttr(tupleDesc, Anum_pg_authid_oid, OIDOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolname, NAMEOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolsuper, BOOLOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolinherit, BOOLOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolcreaterole, BOOLOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolcreatedb, BOOLOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolcanlogin, BOOLOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolreplication, BOOLOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolbypassrls, BOOLOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolconnlimit, INT4OID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolpassword, TEXTOID);
+        FillAttr(tupleDesc, Anum_pg_authid_rolvaliduntil, TIMESTAMPTZOID);
+        Datum values[Natts_pg_authid];
+        bool nulls[Natts_pg_authid];
+        Zero(values);
+        std::fill_n(nulls, Natts_pg_authid, true);
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_oid, (Datum)oid);
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolname, (Datum)MakeFixedString(rolname, NAMEDATALEN));
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolsuper, BoolGetDatum(true));
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolinherit, BoolGetDatum(true));
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcreaterole, BoolGetDatum(true));
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcreatedb, BoolGetDatum(true));
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcanlogin, BoolGetDatum(true));
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolreplication, BoolGetDatum(true));
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolbypassrls, BoolGetDatum(true));
+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolconnlimit, Int32GetDatum(-1));
+        HeapTuple h = heap_form_tuple(tupleDesc, values, nulls);
+        auto row = (Form_pg_authid) GETSTRUCT(h);
+        Y_ENSURE(row->oid == oid);
+        Y_ENSURE(strcmp(NameStr(row->rolname), rolname) == 0);
+        Y_ENSURE(row->rolsuper);
+        Y_ENSURE(row->rolinherit);
+        Y_ENSURE(row->rolcreaterole);
+        Y_ENSURE(row->rolcreatedb);
+        Y_ENSURE(row->rolcanlogin);
+        Y_ENSURE(row->rolreplication);
+        Y_ENSURE(row->rolbypassrls);
+        Y_ENSURE(row->rolconnlimit == -1);
+        return h;
+    }
+
     void InitializeAuthId() {
         TupleDesc tupleDesc = CreateTemplateTupleDesc(Natts_pg_authid);
         FillAttr(tupleDesc, Anum_pg_authid_oid, OIDOID);
@@ -566,40 +609,19 @@ struct TSysCache {
         auto& lookupMap = cacheItem->LookupMap;
 
         auto key = THeapTupleKey(1, 0, 0, 0);
+        lookupMap.emplace(key, MakePgRolesHeapTuple(1, "postgres"));
 
-        //do the same in next PR
-        // auto userName = *NKikimr::NMiniKQL::PGGetGUCSetting("ydb_user");
-        for (ui32 oid = 1; oid <= 1; ++oid) {
-            const char* rolname = "postgres";
-            // const char* rolname = oid == 1 ? "postgres" : userName.c_str();
-            Datum values[Natts_pg_authid];
-            bool nulls[Natts_pg_authid];
-            Zero(values);
-            std::fill_n(nulls, Natts_pg_authid, true);
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_oid, (Datum)oid);
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolname, (Datum)MakeFixedString(rolname, NAMEDATALEN));
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolsuper, BoolGetDatum(true));
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolinherit, BoolGetDatum(true));
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcreaterole, BoolGetDatum(true));
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcreatedb, BoolGetDatum(true));
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcanlogin, BoolGetDatum(true));
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolreplication, BoolGetDatum(true));
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolbypassrls, BoolGetDatum(true));
-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolconnlimit, Int32GetDatum(-1));
-            HeapTuple h = heap_form_tuple(tupleDesc, values, nulls);
-            auto row = (Form_pg_authid) GETSTRUCT(h);
-            Y_ENSURE(row->oid == oid);
-            Y_ENSURE(strcmp(NameStr(row->rolname), rolname) == 0);
-            Y_ENSURE(row->rolsuper);
-            Y_ENSURE(row->rolinherit);
-            Y_ENSURE(row->rolcreaterole);
-            Y_ENSURE(row->rolcreatedb);
-            Y_ENSURE(row->rolcanlogin);
-            Y_ENSURE(row->rolreplication);
-            Y_ENSURE(row->rolbypassrls);
-            Y_ENSURE(row->rolconnlimit == -1);
-            lookupMap.emplace(key, h);
-        }
+        auto threadContextLookup = [&] (const THeapTupleKey& key) -> std::optional<HeapTuple> {
+            if (std::get<0>(key) == 2 && NKikimr::NMiniKQL::TlsAllocState) {
+                auto ctx = (TMainContext*)NKikimr::NMiniKQL::TlsAllocState->MainContext;
+                if (ctx && ctx->CurrentUserName) {
+                    return ctx->CurrentUserName;
+                }
+            }
+            return std::nullopt;
+        };
+
+        cacheItem->PgThreadContextLookup = std::move(threadContextLookup);
     }
 
     void InitializeNameNamespaces() {
@@ -672,8 +694,13 @@ namespace NMiniKQL {
 
 void PgCreateSysCacheEntries(void* ctx) {
     auto main = (TMainContext*)ctx;
-    if (main->GUCSettings && main->GUCSettings->Get("ydb_database")) {
-        main->CurrentDatabaseName = NYql::TSysCache::MakePgDatabaseHeapTuple(4, main->GUCSettings->Get("ydb_database")->c_str());
+    if (main->GUCSettings) {
+        if (main->GUCSettings->Get("ydb_database")) {
+            main->CurrentDatabaseName = NYql::TSysCache::MakePgDatabaseHeapTuple(4, main->GUCSettings->Get("ydb_database")->c_str());
+        }
+        if (main->GUCSettings->Get("ydb_user")) {
+            main->CurrentUserName = NYql::TSysCache::MakePgRolesHeapTuple(2, main->GUCSettings->Get("ydb_user")->c_str());
+        }
     }
 }
 
