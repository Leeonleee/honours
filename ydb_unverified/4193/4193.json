{
  "repo": "ydb-platform/ydb",
  "pull_number": 4193,
  "instance_id": "ydb-platform__ydb-4193",
  "issue_numbers": [
    "3124"
  ],
  "base_commit": "9bcbbd617cfcf26e791b5f16cac239f3fa1bc632",
  "patch": "diff --git a/ydb/core/kqp/proxy_service/kqp_proxy_service.cpp b/ydb/core/kqp/proxy_service/kqp_proxy_service.cpp\nindex 1d57bb106c5b..f0096b0dda00 100644\n--- a/ydb/core/kqp/proxy_service/kqp_proxy_service.cpp\n+++ b/ydb/core/kqp/proxy_service/kqp_proxy_service.cpp\n@@ -583,10 +583,10 @@ class TKqpProxyService : public TActorBootstrapped<TKqpProxyService> {\n \n         if (CheckRequestDeadline(requestInfo, deadline, result) &&\n             CreateNewSessionWorker(requestInfo, TString(DefaultKikimrPublicClusterName), true, request.GetDatabase(),\n-                request.GetApplicationName(), event.GetSupportsBalancing(), event.GetPgWire(),\n+                event.GetSupportsBalancing(), event.GetPgWire(),\n                 event.GetClientAddress(), event.GetUserSID(), event.GetClientUserAgent(), event.GetClientSdkBuildInfo(),\n                 event.GetClientPID(),\n-                event.GetApplicationName(), result))\n+                event.GetApplicationName(), event.GetUserName(), result))\n         {\n             auto& response = *responseEv->Record.MutableResponse();\n             response.SetSessionId(result.Value->SessionId);\n@@ -619,7 +619,7 @@ class TKqpProxyService : public TActorBootstrapped<TKqpProxyService> {\n         if (ev->Get()->GetSessionId().empty()) {\n             TProcessResult<TKqpSessionInfo*> result;\n             if (!CreateNewSessionWorker(requestInfo, TString(DefaultKikimrPublicClusterName), false,\n-                database, {}, false, false, \"\", \"\", \"\", \"\", \"\", \"\", result))\n+                database, false, false, \"\", \"\", \"\", \"\", \"\", \"\", Nothing(), result))\n             {\n                 ReplyProcessError(result.YdbStatus, result.Error, requestId);\n                 return;\n@@ -1415,11 +1415,12 @@ class TKqpProxyService : public TActorBootstrapped<TKqpProxyService> {\n     }\n \n     bool CreateNewSessionWorker(const TKqpRequestInfo& requestInfo, const TString& cluster, bool longSession,\n-        const TString& database, const TMaybe<TString>& applicationName, bool supportsBalancing, bool pgWire,\n+        const TString& database, bool supportsBalancing, bool pgWire,\n         const TString& clientHost, const TString& clientSid, const TString& userAgent,\n         const TString& sdkBuildInfo,\n         const TString& clientPid,\n         const TString& clientApplicationName,\n+        const TMaybe<TString>& clientUserName,\n         TProcessResult<TKqpSessionInfo*>& result)\n     {\n         if (!database.empty() && AppData()->TenantName.empty()) {\n@@ -1458,7 +1459,7 @@ class TKqpProxyService : public TActorBootstrapped<TKqpProxyService> {\n \n         auto dbCounters = Counters->GetDbCounters(database);\n \n-        TKqpWorkerSettings workerSettings(cluster, database, applicationName, TableServiceConfig, QueryServiceConfig, dbCounters);\n+        TKqpWorkerSettings workerSettings(cluster, database, clientApplicationName, clientUserName, TableServiceConfig, QueryServiceConfig, dbCounters);\n         workerSettings.LongSession = longSession;\n \n         auto config = CreateConfig(KqpSettings, workerSettings);\ndiff --git a/ydb/core/kqp/proxy_service/kqp_session_info.cpp b/ydb/core/kqp/proxy_service/kqp_session_info.cpp\nindex 5857b315c25b..995e02676c54 100644\n--- a/ydb/core/kqp/proxy_service/kqp_session_info.cpp\n+++ b/ydb/core/kqp/proxy_service/kqp_session_info.cpp\n@@ -68,7 +68,6 @@ void TKqpSessionInfo::SerializeTo(::NKikimrKqp::TSessionInfo* proto, const TFiel\n     if (fieldsMap.NeedField(VSessions::UserSID::ColumnId)) {  // 14\n         proto->SetUserSID(ClientSID);\n     }\n-\n }\n \n-}  // namespace NKikimr::NKqp\n\\ No newline at end of file\n+}  // namespace NKikimr::NKqp\ndiff --git a/ydb/core/kqp/session_actor/kqp_session_actor.cpp b/ydb/core/kqp/session_actor/kqp_session_actor.cpp\nindex 2320ffa09ab4..fb8ceebb1ca1 100644\n--- a/ydb/core/kqp/session_actor/kqp_session_actor.cpp\n+++ b/ydb/core/kqp/session_actor/kqp_session_actor.cpp\n@@ -1174,6 +1174,9 @@ class TKqpSessionActor : public TActorBootstrapped<TKqpSessionActor> {\n         if (Settings.Database) {\n             GUCSettings->Set(\"ydb_database\", Settings.Database.substr(1, Settings.Database.Size() - 1));\n         }\n+        if (Settings.UserName) {\n+            GUCSettings->Set(\"ydb_user\", *Settings.UserName);\n+        }\n     }\n \n     void SendToSchemeExecuter(const TKqpPhyTxHolder::TConstPtr& tx) {\ndiff --git a/ydb/core/kqp/session_actor/kqp_session_actor.h b/ydb/core/kqp/session_actor/kqp_session_actor.h\nindex f6f4e622fa10..74a4c987c5c0 100644\n--- a/ydb/core/kqp/session_actor/kqp_session_actor.h\n+++ b/ydb/core/kqp/session_actor/kqp_session_actor.h\n@@ -17,6 +17,7 @@ struct TKqpWorkerSettings {\n     TString Cluster;\n     TString Database;\n     TMaybe<TString> ApplicationName;\n+    TMaybe<TString> UserName;\n     bool LongSession = false;\n \n     NKikimrConfig::TTableServiceConfig TableService;\n@@ -28,11 +29,12 @@ struct TKqpWorkerSettings {\n     TKqpDbCountersPtr DbCounters;\n \n     explicit TKqpWorkerSettings(const TString& cluster, const TString& database,\n-            const TMaybe<TString>& applicationName, const NKikimrConfig::TTableServiceConfig& tableServiceConfig,\n+            const TMaybe<TString>& applicationName, const TMaybe<TString>& userName, const NKikimrConfig::TTableServiceConfig& tableServiceConfig,\n             const  NKikimrConfig::TQueryServiceConfig& queryServiceConfig, TKqpDbCountersPtr dbCounters)\n         : Cluster(cluster)\n         , Database(database)\n         , ApplicationName(applicationName)\n+        , UserName(userName)\n         , TableService(tableServiceConfig)\n         , QueryService(queryServiceConfig)\n         , MkqlInitialMemoryLimit(2097152, 1, Max<i64>())\ndiff --git a/ydb/core/kqp/ut/pg/pg_catalog_ut.cpp b/ydb/core/kqp/ut/pg/pg_catalog_ut.cpp\nindex 09fe6f99fc79..01da59480e01 100644\n--- a/ydb/core/kqp/ut/pg/pg_catalog_ut.cpp\n+++ b/ydb/core/kqp/ut/pg/pg_catalog_ut.cpp\n@@ -399,7 +399,6 @@ Y_UNIT_TEST_SUITE(PgCatalog) {\n             )\", NYdb::NQuery::TTxControl::BeginTx().CommitTx(), settings).ExtractValueSync();\n             UNIT_ASSERT_C(result.IsSuccess(), result.GetIssues().ToString());\n             UNIT_ASSERT_C(!result.GetResultSets().empty(), \"no result sets\");\n-            // userName not set to GUCSettings yet\n             CompareYson(R\"([\n                 [\"postgres\"]\n             ])\", FormatResultSetYson(result.GetResultSet(0)));\ndiff --git a/ydb/core/local_pgwire/local_pgwire_connection.cpp b/ydb/core/local_pgwire/local_pgwire_connection.cpp\nindex ec945a434b67..12e6b41a098a 100644\n--- a/ydb/core/local_pgwire/local_pgwire_connection.cpp\n+++ b/ydb/core/local_pgwire/local_pgwire_connection.cpp\n@@ -51,7 +51,10 @@ class TPgYdbConnection : public TActorBootstrapped<TPgYdbConnection> {\n         record.SetPgWire(true);\n         NKikimrKqp::TCreateSessionRequest& request = *record.MutableRequest();\n         if (ConnectionParams.count(\"application_name\")) {\n-            request.SetApplicationName(ConnectionParams[\"application_name\"]);\n+            record.SetApplicationName(ConnectionParams[\"application_name\"]);\n+        }\n+        if (ConnectionParams.count(\"user\")) {\n+            record.SetUserName(ConnectionParams[\"user\"]);\n         }\n         request.SetDatabase(database);\n         BLOG_D(\"Sent CreateSessionRequest to kqpProxy \" << ev->Record.ShortDebugString());\ndiff --git a/ydb/core/protos/kqp.proto b/ydb/core/protos/kqp.proto\nindex 7b769718a6b8..9c4b119f24ca 100644\n--- a/ydb/core/protos/kqp.proto\n+++ b/ydb/core/protos/kqp.proto\n@@ -340,6 +340,7 @@ message TSessionInfo {\n     optional int64 StateChangeAt = 13;\n     optional string UserSID = 14;\n     optional bool PgWire = 15 [default = false];\n+    optional string UserName = 16;\n }\n \n message TEvListSessionsRequest {\n@@ -370,7 +371,6 @@ message TKqpDefaultSettings {\n \n message TCreateSessionRequest {\n     optional string Database = 1;\n-    optional string ApplicationName = 2;\n }\n \n message TEvCreateSessionRequest {\n@@ -391,6 +391,7 @@ message TEvCreateSessionRequest {\n     optional string ClientSdkBuildInfo = 10;\n     optional string ApplicationName = 11;\n     optional string UserSID = 12;\n+    optional string UserName = 13;\n }\n \n message TCreateSessionResponse {\ndiff --git a/ydb/library/yql/parser/pg_wrapper/comp_factory.cpp b/ydb/library/yql/parser/pg_wrapper/comp_factory.cpp\nindex feb08771e26a..6feeaf71ac3f 100644\n--- a/ydb/library/yql/parser/pg_wrapper/comp_factory.cpp\n+++ b/ydb/library/yql/parser/pg_wrapper/comp_factory.cpp\n@@ -754,7 +754,8 @@ class TPgTableContent : public TMutableComputationNode<TPgTableContent> {\n                     rows.emplace_back(row);\n                 }\n             } else if (Table_ == \"pg_roles\") {\n-                for (ui32 index = 1; index <= 1; ++index) {\n+                ui32 tableSize = PGGetGUCSetting(\"ydb_user\") ? 2 : 1;\n+                for (ui32 index = 1; index <= tableSize; ++index) {\n                     NUdf::TUnboxedValue* items;\n                     auto row = compCtx.HolderFactory.CreateDirectArrayHolder(PgRolesFillers_.size(), items);\n                     for (ui32 i = 0; i < PgRolesFillers_.size(); ++i) {\ndiff --git a/ydb/library/yql/parser/pg_wrapper/memory_context.h b/ydb/library/yql/parser/pg_wrapper/memory_context.h\nindex 9cdd933f17ff..060894ca2d5d 100644\n--- a/ydb/library/yql/parser/pg_wrapper/memory_context.h\n+++ b/ydb/library/yql/parser/pg_wrapper/memory_context.h\n@@ -30,5 +30,5 @@ struct TMainContext {\n     TString LastError;\n     TGUCSettings::TPtr GUCSettings;\n     HeapTuple CurrentDatabaseName = nullptr;\n-    HeapTuple PrevDatabaseName = nullptr;\n+    HeapTuple CurrentUserName = nullptr;\n };\ndiff --git a/ydb/library/yql/parser/pg_wrapper/syscache.cpp b/ydb/library/yql/parser/pg_wrapper/syscache.cpp\nindex e6faa5ed954a..566d1b7614cf 100644\n--- a/ydb/library/yql/parser/pg_wrapper/syscache.cpp\n+++ b/ydb/library/yql/parser/pg_wrapper/syscache.cpp\n@@ -548,6 +548,49 @@ struct TSysCache {\n         cacheItem->PgThreadContextLookup = std::move(threadContextLookup);\n     }\n \n+    static HeapTuple MakePgRolesHeapTuple(ui32 oid, const char* rolname) {\n+        TupleDesc tupleDesc = CreateTemplateTupleDesc(Natts_pg_authid);\n+        FillAttr(tupleDesc, Anum_pg_authid_oid, OIDOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolname, NAMEOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolsuper, BOOLOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolinherit, BOOLOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolcreaterole, BOOLOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolcreatedb, BOOLOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolcanlogin, BOOLOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolreplication, BOOLOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolbypassrls, BOOLOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolconnlimit, INT4OID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolpassword, TEXTOID);\n+        FillAttr(tupleDesc, Anum_pg_authid_rolvaliduntil, TIMESTAMPTZOID);\n+        Datum values[Natts_pg_authid];\n+        bool nulls[Natts_pg_authid];\n+        Zero(values);\n+        std::fill_n(nulls, Natts_pg_authid, true);\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_oid, (Datum)oid);\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolname, (Datum)MakeFixedString(rolname, NAMEDATALEN));\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolsuper, BoolGetDatum(true));\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolinherit, BoolGetDatum(true));\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcreaterole, BoolGetDatum(true));\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcreatedb, BoolGetDatum(true));\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcanlogin, BoolGetDatum(true));\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolreplication, BoolGetDatum(true));\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolbypassrls, BoolGetDatum(true));\n+        FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolconnlimit, Int32GetDatum(-1));\n+        HeapTuple h = heap_form_tuple(tupleDesc, values, nulls);\n+        auto row = (Form_pg_authid) GETSTRUCT(h);\n+        Y_ENSURE(row->oid == oid);\n+        Y_ENSURE(strcmp(NameStr(row->rolname), rolname) == 0);\n+        Y_ENSURE(row->rolsuper);\n+        Y_ENSURE(row->rolinherit);\n+        Y_ENSURE(row->rolcreaterole);\n+        Y_ENSURE(row->rolcreatedb);\n+        Y_ENSURE(row->rolcanlogin);\n+        Y_ENSURE(row->rolreplication);\n+        Y_ENSURE(row->rolbypassrls);\n+        Y_ENSURE(row->rolconnlimit == -1);\n+        return h;\n+    }\n+\n     void InitializeAuthId() {\n         TupleDesc tupleDesc = CreateTemplateTupleDesc(Natts_pg_authid);\n         FillAttr(tupleDesc, Anum_pg_authid_oid, OIDOID);\n@@ -566,40 +609,19 @@ struct TSysCache {\n         auto& lookupMap = cacheItem->LookupMap;\n \n         auto key = THeapTupleKey(1, 0, 0, 0);\n+        lookupMap.emplace(key, MakePgRolesHeapTuple(1, \"postgres\"));\n \n-        //do the same in next PR\n-        // auto userName = *NKikimr::NMiniKQL::PGGetGUCSetting(\"ydb_user\");\n-        for (ui32 oid = 1; oid <= 1; ++oid) {\n-            const char* rolname = \"postgres\";\n-            // const char* rolname = oid == 1 ? \"postgres\" : userName.c_str();\n-            Datum values[Natts_pg_authid];\n-            bool nulls[Natts_pg_authid];\n-            Zero(values);\n-            std::fill_n(nulls, Natts_pg_authid, true);\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_oid, (Datum)oid);\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolname, (Datum)MakeFixedString(rolname, NAMEDATALEN));\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolsuper, BoolGetDatum(true));\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolinherit, BoolGetDatum(true));\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcreaterole, BoolGetDatum(true));\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcreatedb, BoolGetDatum(true));\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolcanlogin, BoolGetDatum(true));\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolreplication, BoolGetDatum(true));\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolbypassrls, BoolGetDatum(true));\n-            FillDatum(Natts_pg_authid, values, nulls, Anum_pg_authid_rolconnlimit, Int32GetDatum(-1));\n-            HeapTuple h = heap_form_tuple(tupleDesc, values, nulls);\n-            auto row = (Form_pg_authid) GETSTRUCT(h);\n-            Y_ENSURE(row->oid == oid);\n-            Y_ENSURE(strcmp(NameStr(row->rolname), rolname) == 0);\n-            Y_ENSURE(row->rolsuper);\n-            Y_ENSURE(row->rolinherit);\n-            Y_ENSURE(row->rolcreaterole);\n-            Y_ENSURE(row->rolcreatedb);\n-            Y_ENSURE(row->rolcanlogin);\n-            Y_ENSURE(row->rolreplication);\n-            Y_ENSURE(row->rolbypassrls);\n-            Y_ENSURE(row->rolconnlimit == -1);\n-            lookupMap.emplace(key, h);\n-        }\n+        auto threadContextLookup = [&] (const THeapTupleKey& key) -> std::optional<HeapTuple> {\n+            if (std::get<0>(key) == 2 && NKikimr::NMiniKQL::TlsAllocState) {\n+                auto ctx = (TMainContext*)NKikimr::NMiniKQL::TlsAllocState->MainContext;\n+                if (ctx && ctx->CurrentUserName) {\n+                    return ctx->CurrentUserName;\n+                }\n+            }\n+            return std::nullopt;\n+        };\n+\n+        cacheItem->PgThreadContextLookup = std::move(threadContextLookup);\n     }\n \n     void InitializeNameNamespaces() {\n@@ -672,8 +694,13 @@ namespace NMiniKQL {\n \n void PgCreateSysCacheEntries(void* ctx) {\n     auto main = (TMainContext*)ctx;\n-    if (main->GUCSettings && main->GUCSettings->Get(\"ydb_database\")) {\n-        main->CurrentDatabaseName = NYql::TSysCache::MakePgDatabaseHeapTuple(4, main->GUCSettings->Get(\"ydb_database\")->c_str());\n+    if (main->GUCSettings) {\n+        if (main->GUCSettings->Get(\"ydb_database\")) {\n+            main->CurrentDatabaseName = NYql::TSysCache::MakePgDatabaseHeapTuple(4, main->GUCSettings->Get(\"ydb_database\")->c_str());\n+        }\n+        if (main->GUCSettings->Get(\"ydb_user\")) {\n+            main->CurrentUserName = NYql::TSysCache::MakePgRolesHeapTuple(2, main->GUCSettings->Get(\"ydb_user\")->c_str());\n+        }\n     }\n }\n \n",
  "test_patch": "diff --git a/ydb/tests/functional/postgresql/cases/roles.out b/ydb/tests/functional/postgresql/cases/roles.out\nnew file mode 100644\nindex 000000000000..17f0509505d0\n--- /dev/null\n+++ b/ydb/tests/functional/postgresql/cases/roles.out\n@@ -0,0 +1,6 @@\n+SELECT rolname FROM pg_roles;\n+ rolname\n+-----\n+   postgres\n+   root\n+(2 rows)\ndiff --git a/ydb/tests/functional/postgresql/cases/roles.sql b/ydb/tests/functional/postgresql/cases/roles.sql\nnew file mode 100644\nindex 000000000000..5da2bf7a8e76\n--- /dev/null\n+++ b/ydb/tests/functional/postgresql/cases/roles.sql\n@@ -0,0 +1,1 @@\n+SELECT rolname FROM pg_roles;\n",
  "problem_statement": "[pg] Add current user from connection to table pg_roles\nand syscache\r\n\r\nSimilar to: https://github.com/ydb-platform/ydb/issues/3068\n",
  "hints_text": "",
  "created_at": "2024-04-29T14:13:45Z",
  "modified_files": [
    "ydb/core/kqp/proxy_service/kqp_proxy_service.cpp",
    "ydb/core/kqp/proxy_service/kqp_session_info.cpp",
    "ydb/core/kqp/session_actor/kqp_session_actor.cpp",
    "ydb/core/kqp/session_actor/kqp_session_actor.h",
    "ydb/core/kqp/ut/pg/pg_catalog_ut.cpp",
    "ydb/core/local_pgwire/local_pgwire_connection.cpp",
    "ydb/core/protos/kqp.proto",
    "ydb/library/yql/parser/pg_wrapper/comp_factory.cpp",
    "ydb/library/yql/parser/pg_wrapper/memory_context.h",
    "ydb/library/yql/parser/pg_wrapper/syscache.cpp"
  ],
  "modified_test_files": [
    "b/ydb/tests/functional/postgresql/cases/roles.out",
    "b/ydb/tests/functional/postgresql/cases/roles.sql"
  ]
}