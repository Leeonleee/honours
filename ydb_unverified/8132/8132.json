{
  "repo": "ydb-platform/ydb",
  "pull_number": 8132,
  "instance_id": "ydb-platform__ydb-8132",
  "issue_numbers": [
    "7616",
    "8019"
  ],
  "base_commit": "89a663c6656707b3a380d4d3829658c69e1b76be",
  "patch": "diff --git a/.github/config/muted_ya.txt b/.github/config/muted_ya.txt\nindex b7b79ba74b66..beeb26176fa2 100644\n--- a/.github/config/muted_ya.txt\n+++ b/.github/config/muted_ya.txt\n@@ -102,5 +102,80 @@ ydb/tests/functional/tenants test_dynamic_tenants.py.*\n ydb/tests/functional/tenants test_storage_config.py.TestStorageConfig.*\n ydb/tests/functional/tenants test_tenants.py.*\n ydb/tests/functional/ydb_cli test_ydb_impex.py.TestImpex.test_big_dataset*\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestArrayValueBackend]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestBinaryByteSliceToInt]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestBinaryByteSlicetoUUID]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestBindError]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCommit]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestConnListen]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestConnPing]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestConnUnlistenAll]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestConnUnlisten]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestConnectorWithNoticeHandler_Simple]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestConnectorWithNotificationHandler_Simple]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestContextCancelBegin]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestContextCancelQuery]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestContextCancelExec]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestQueryCancelRace]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCopyFromError]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCopyInBinaryError]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCopyInMultipleValues]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCopyInRaiseStmtTrigger]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCopyInStmtAffectedRows]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCopyInTypes]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCopyInWrongType]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCopyRespLoopConnectionError]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestCopySyntaxError]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestEmptyQuery]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestEncodeAndParseTs]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestEncodeDecode]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestErrorClass]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestErrorDuringStartup]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestErrorOnExec]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestErrorOnQueryRowSimpleQuery]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestErrorOnQuery]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestExec]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestFormatTsBackend]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestHasCorrectRootGroupPermissions]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestInfinityTimestamp]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestIssue1046]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestIssue1062]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestIssue186]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestListenerFailedQuery]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestListenerListen]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestListenerPing]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestListenerReconnect]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestListenerUnlistenAll]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestListenerUnlisten]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestNewConnector_Connect]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestNewConnector_Driver]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestNewConnector_WorksWithOpenDB]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestNotifyExtra]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestNullAfterNonNull]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestParseErrorInExtendedQuery]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestPing]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestQueryCancelledReused]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestQueryRowBugWorkaround]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestReconnect]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestReturning]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestRowsResultTag]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestRuntimeParameters]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestStmtExecContext/context.Background]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestStmtExecContext/context.WithTimeout]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestStmtExecContext/context.WithTimeout_exceeded]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestStmtExecContext]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestStmtQueryContext/context.Background]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestStmtQueryContext/context.WithTimeout]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestStmtQueryContext/context.WithTimeout_exceeded]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestStmtQueryContext]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestStringWithNul]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestTimeWithTimezone/24:00-04:00_=>_0000-01-02T00:00:00-04:00]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestTimeWithTimezone/24:00:00+00_=>_0000-01-02T00:00:00Z]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestTimeWithTimezone/24:00:00.0+00_=>_0000-01-02T00:00:00Z]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestTimeWithTimezone/24:00:00.000000+00_=>_0000-01-02T00:00:00Z]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestTimeWithTimezone/24:00Z_=>_0000-01-02T00:00:00Z]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestTimeWithTimezone]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestTimestampWithTimeZone]\n+ydb/tests/postgres_integrations/go-libpq docker_wrapper_test.py.test_pg_generated[TestTxOptions]\n ydb/tests/tools/pq_read/test test_timeout.py.TestTimeout.test_timeout\n ydb/core/kqp/ut/query KqpStats.SysViewClientLost\ndiff --git a/.gitignore b/.gitignore\nindex 87b7b54d294d..49d68346ab51 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -7,6 +7,8 @@\n !*/\n # Unignore all files inside canondata dir\n !**/canondata/**\n+# Allow docker files\n+!Dockerfile\n \n /canonization_show_res.log\n \n",
  "test_patch": "diff --git a/ydb/tests/postgres_integrations/go-libpq/conftest.py b/ydb/tests/postgres_integrations/go-libpq/conftest.py\nnew file mode 100644\nindex 000000000000..490e87914143\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/conftest.py\n@@ -0,0 +1,6 @@\n+import ydb.tests.postgres_integrations.library\n+import pytest\n+\n+\n+def pytest_collection_finish(session: pytest.Session):\n+    ydb.tests.postgres_integrations.library.pytest_collection_finish(session)\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/.gitignore b/ydb/tests/postgres_integrations/go-libpq/data/.gitignore\nnew file mode 100644\nindex 000000000000..0c2be4fb7dad\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/.gitignore\n@@ -0,0 +1,3 @@\n+/exchange/\n+/sources/\n+/test-result/\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/Dockerfile b/ydb/tests/postgres_integrations/go-libpq/data/Dockerfile\nnew file mode 100644\nindex 000000000000..a239669db692\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/Dockerfile\n@@ -0,0 +1,15 @@\n+# For docker context at root git directory\n+\n+FROM golang:1.20\n+\n+WORKDIR /project/sources/\n+\n+COPY patch.diff /patch.diff\n+COPY docker-init.bash /docker-init.bash\n+RUN /docker-init.bash\n+\n+COPY common-go-scripts/go-run-separate-tests.bash /go-run-separate-tests.bash\n+\n+COPY docker-start.bash /docker-start.bash\n+\n+CMD [ \"/docker-start.bash\" ]\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/common-go-scripts/go-run-separate-tests.bash b/ydb/tests/postgres_integrations/go-libpq/data/common-go-scripts/go-run-separate-tests.bash\nnew file mode 100755\nindex 000000000000..f4b5cb533883\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/common-go-scripts/go-run-separate-tests.bash\n@@ -0,0 +1,28 @@\n+#!/bin/bash\n+\n+set -eu\n+\n+ONE_TEST_TIMEOUT=5s\n+TEST_BINARY=./test.binary\n+\n+echo \"Get test list\"\n+TESTS=$($TEST_BINARY --test.list \"^Test\" | sort)\n+\n+\n+echo \"Shell $SHELL\"\n+\n+rm -f /test-result/raw/result.txt\n+for TEST_NAME in $TESTS; do\n+    echo -n \"Test: $TEST_NAME \"\n+    if echo \"$TEST_NAME\" | grep -Eq \"$YDB_PG_TESTFILTER\"; then\n+        echo start\n+    else\n+        echo skip\n+        continue\n+    fi\n+    CMD=\"$TEST_BINARY --test.run '^$TEST_NAME\\$' --test.v --test.timeout='$ONE_TEST_TIMEOUT'\"\n+    echo \"$CMD\"\n+    bash -c \"$CMD\" >> /test-result/raw/result.txt 2>&1 || true\n+done\n+\n+go-junit-report < /test-result/raw/result.txt > /test-result/raw/result.xml\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/docker-compose-host.yaml b/ydb/tests/postgres_integrations/go-libpq/data/docker-compose-host.yaml\nnew file mode 100644\nindex 000000000000..cfbb3d4d485c\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/docker-compose-host.yaml\n@@ -0,0 +1,22 @@\n+version: \"3\"\n+services:\n+  project:\n+    network_mode: host\n+\n+    image: ydb-test/go-pqlib\n+    build:\n+      context: ../../..\n+      dockerfile: languages/go/libpq/Dockerfile\n+      network: host\n+    environment:\n+      - PGUSER=${YDB_PG_USER:-root}\n+      - PGPASSWORD=${YDB_PG_PASSWORD:-1234}\n+      - PGHOST=${YDB_PG_HOST:-ydb}\n+      - PGPORT=${YDB_PG_PORT:-5432}\n+      - PGDATABASE=${YDB_PG_DATABASE:-local}\n+      - PQGOSSLTESTS=0\n+      - PQSSLCERTTEST_PATH=certs\n+      - YDB_PG_TESTNAME=${YDB_PG_TESTNAME:-}\n+    volumes:\n+      - ./exchange:/exchange\n+      - ./test-result/:/test-result\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/docker-compose.yaml b/ydb/tests/postgres_integrations/go-libpq/data/docker-compose.yaml\nnew file mode 100644\nindex 000000000000..7c5fb48a1548\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/docker-compose.yaml\n@@ -0,0 +1,40 @@\n+version: \"3\"\n+services:\n+  ydb:\n+    image: ghcr.io/ydb-platform/local-ydb:nightly\n+    environment:\n+      - \"YDB_DEFAULT_LOG_LEVEL=DEBUG\"\n+      - \"GRPC_TLS_PORT=2135\"\n+      - \"GRPC_PORT=2136\"\n+      - \"MON_PORT=8765\"\n+      - \"YDB_USE_IN_MEMORY_PDISKS=true\"\n+      - \"POSTGRES_USER=${YDB_PG_USER:-root}\"\n+      - \"POSTGRES_PASSWORD=${YDB_PG_PASSWORD:-1234}\"\n+      - \"YDB_FEATURE_FLAGS=enable_temp_tables\"\n+      - \"YDB_TABLE_ENABLE_PREPARED_DDL=true\"\n+    healthcheck:\n+      test: \"/bin/sh /health_check\"\n+      interval: 1s\n+      start_period: 1m\n+  project:\n+    depends_on:\n+      ydb:\n+        condition: service_healthy\n+\n+    image: ydb-test/go-pqlib\n+    build:\n+      context: ../../..\n+      dockerfile: languages/go/libpq/Dockerfile\n+      network: host\n+    environment:\n+      - PGUSER=${YDB_PG_USER:-root}\n+      - PGPASSWORD=${YDB_PG_PASSWORD:-1234}\n+      - PGHOST=${YDB_PG_HOST:-ydb}\n+      - PGPORT=${YDB_PG_PORT:-5432}\n+      - PGDATABASE=${YDB_PG_DATABASE:-/local}\n+      - PQGOSSLTESTS=0\n+      - PQSSLCERTTEST_PATH=certs\n+      - YDB_PG_TESTNAME=${YDB_PG_TESTNAME:-}\n+    volumes:\n+      - ./exchange:/exchange\n+      - ./test-result/:/test-result\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/docker-init.bash b/ydb/tests/postgres_integrations/go-libpq/data/docker-init.bash\nnew file mode 100755\nindex 000000000000..9a8c5eff9af4\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/docker-init.bash\n@@ -0,0 +1,24 @@\n+#!/bin/bash\n+\n+set -eu\n+\n+apt-get update && apt-get install -y patch\n+\n+go install github.com/jstemmer/go-junit-report/v2@v2.0.0\n+\n+mkdir -p /original-sources\n+cd /original-sources\n+\n+wget https://github.com/lib/pq/archive/refs/tags/v1.10.9.tar.gz -O libpq.tar.gz\n+tar --strip-components=1 -zxvf libpq.tar.gz\n+rm -f libpq.tar.gz\n+\n+mkdir -p /project/sources/\n+cp -R /original-sources/. /project/sources/\n+\n+cd /project/sources/\n+[ -e /patch.diff ] && patch -s -p0 < /patch.diff\n+\n+# cache binary\n+echo \"Build test binary\"\n+go test -c -o ./test.binary\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/docker-start.bash b/ydb/tests/postgres_integrations/go-libpq/data/docker-start.bash\nnew file mode 100755\nindex 000000000000..5b46ae20492b\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/docker-start.bash\n@@ -0,0 +1,36 @@\n+#!/bin/bash\n+\n+set -eu\n+\n+echo \"Start script\"\n+\n+rm -rf /test-result 2> /dev/null || true\n+\n+mkdir -p /exchange\n+mkdir -p /test-result/raw\n+\n+if [ -e /exchange/sources ]; then\n+    echo \"Skip prepare sources, because it is exist\"\n+else\n+    echo \"Copy sources\"\n+    mkdir -p /exchange/sources\n+    cp -R /project/sources/. /exchange/sources\n+    chmod -R a+rw /exchange/sources\n+fi\n+\n+cd /project/sources/\n+\n+export YDB_PG_TESTFILTER=\"${YDB_PG_TESTFILTER:-}\"  # set YDB_PG_TESTNAME to empty string if it not set\n+\n+echo \"Run tests: '$YDB_PG_TESTFILTER'\"\n+\n+echo \"Start test\"\n+\n+mkdir -p /test-result/raw\n+PQTEST_BINARY_PARAMETERS=no /go-run-separate-tests.bash\n+\n+if [ -n \"${YDB_PG_TESTFILTER:-}\" ]; then\n+    cat /test-result/raw/result.txt\n+fi\n+\n+chmod -R a+rw /test-result\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/full-test-list.txt b/ydb/tests/postgres_integrations/go-libpq/data/full-test-list.txt\nnew file mode 100644\nindex 000000000000..469bfc13475e\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/full-test-list.txt\n@@ -0,0 +1,236 @@\n+Test64BitErrorChecking\n+TestAppendEncodedText\n+TestAppendEscapedText\n+TestAppendEscapedTextExistingBuffer\n+TestArrayScanBackend\n+TestArrayScanner\n+TestArrayValueBackend\n+TestArrayValuer\n+TestBadConn\n+TestBinaryByteSliceToInt\n+TestBinaryByteSlicetoUUID\n+TestBindError\n+TestBoolArrayScanBytes\n+TestBoolArrayScanEmpty\n+TestBoolArrayScanError\n+TestBoolArrayScanNil\n+TestBoolArrayScanString\n+TestBoolArrayScanUnsupported\n+TestBoolArrayValue\n+TestByteSliceToText\n+TestByteaArrayScanBytes\n+TestByteaArrayScanEmpty\n+TestByteaArrayScanError\n+TestByteaArrayScanNil\n+TestByteaArrayScanString\n+TestByteaArrayScanUnsupported\n+TestByteaArrayValue\n+TestByteaOutputFormatEncoding\n+TestByteaOutputFormats\n+TestCloseBadConn\n+TestCommit\n+TestCommitInFailedTransaction\n+TestCommitInFailedTransactionWithCancelContext\n+TestConnClose\n+TestConnExecDeadlock\n+TestConnListen\n+TestConnPing\n+TestConnPrepareContext\n+TestConnPrepareContext/context.Background\n+TestConnPrepareContext/context.WithTimeout\n+TestConnPrepareContext/context.WithTimeout_exceeded\n+TestConnUnlisten\n+TestConnUnlistenAll\n+TestConnectorWithNoticeHandler_Simple\n+TestConnectorWithNotificationHandler_Simple\n+TestContextCancelBegin\n+TestContextCancelExec\n+TestContextCancelQuery\n+TestCopyFromError\n+TestCopyInBinaryError\n+TestCopyInMultipleValues\n+TestCopyInRaiseStmtTrigger\n+TestCopyInSchemaStmt\n+TestCopyInStmt\n+TestCopyInStmtAffectedRows\n+TestCopyInTypes\n+TestCopyInWrongType\n+TestCopyOutsideOfTxnError\n+TestCopyRespLoopConnectionError\n+TestCopySyntaxError\n+TestDataType\n+TestDataTypeLength\n+TestDataTypeName\n+TestDataTypePrecisionScale\n+TestDecodeBool\n+TestDecodeUUIDBackend\n+TestDecodeUUIDBinaryError\n+TestEmptyQuery\n+TestEmptyResultSetColumns\n+TestEncodeAndParseTs\n+TestEncodeDecode\n+TestErrorClass\n+TestErrorDuringStartup\n+TestErrorDuringStartupClosesConn\n+TestErrorOnExec\n+TestErrorOnQuery\n+TestErrorOnQueryRowSimpleQuery\n+TestErrorSQLState\n+TestExec\n+TestFloat32ArrayScanBytes\n+TestFloat32ArrayScanEmpty\n+TestFloat32ArrayScanError\n+TestFloat32ArrayScanNil\n+TestFloat32ArrayScanString\n+TestFloat32ArrayScanUnsupported\n+TestFloat32ArrayValue\n+TestFloat64ArrayScanBytes\n+TestFloat64ArrayScanEmpty\n+TestFloat64ArrayScanError\n+TestFloat64ArrayScanNil\n+TestFloat64ArrayScanString\n+TestFloat64ArrayScanUnsupported\n+TestFloat64ArrayValue\n+TestFormatAndParseTimestamp\n+TestFormatTs\n+TestFormatTsBackend\n+TestFullParseURL\n+TestGenericArrayScanDelimiter\n+TestGenericArrayScanErrors\n+TestGenericArrayScanScannerArrayBytes\n+TestGenericArrayScanScannerArrayString\n+TestGenericArrayScanScannerSliceBytes\n+TestGenericArrayScanScannerSliceEmpty\n+TestGenericArrayScanScannerSliceNil\n+TestGenericArrayScanScannerSliceString\n+TestGenericArrayScanUnsupported\n+TestGenericArrayValue\n+TestGenericArrayValueErrors\n+TestGenericArrayValueUnsupported\n+TestHasCorrectRootGroupPermissions\n+TestIPv6LoopbackParseURL\n+TestInfinityTimestamp\n+TestInt32ArrayScanBytes\n+TestInt32ArrayScanEmpty\n+TestInt32ArrayScanError\n+TestInt32ArrayScanNil\n+TestInt32ArrayScanString\n+TestInt32ArrayScanUnsupported\n+TestInt32ArrayValue\n+TestInt64ArrayScanBytes\n+TestInt64ArrayScanEmpty\n+TestInt64ArrayScanError\n+TestInt64ArrayScanNil\n+TestInt64ArrayScanString\n+TestInt64ArrayScanUnsupported\n+TestInt64ArrayValue\n+TestInvalidProtocolParseURL\n+TestIsUTF8\n+TestIssue1046\n+TestIssue1062\n+TestIssue186\n+TestIssue196\n+TestIssue282\n+TestIssue494\n+TestIssue617\n+TestListenerClose\n+TestListenerConnCloseWhileQueryIsExecuting\n+TestListenerFailedQuery\n+TestListenerListen\n+TestListenerPing\n+TestListenerReconnect\n+TestListenerUnlisten\n+TestListenerUnlistenAll\n+TestMinimalURL\n+TestMultipleEmptyResult\n+TestMultipleResult\n+TestMultipleSimpleQuery\n+TestNewConnector_Connect\n+TestNewConnector_Driver\n+TestNewConnector_WorksWithOpenDB\n+TestNewListenerConn\n+TestNoData\n+TestNotifyExtra\n+TestNullAfterNonNull\n+TestOpenURL\n+TestParameterCountMismatch\n+TestParseArray\n+TestParseArrayError\n+TestParseComplete\n+TestParseEnviron\n+TestParseErrorInExtendedQuery\n+TestParseOpts\n+TestParseTs\n+TestParseTsErrors\n+TestPgpass\n+TestPing\n+TestQueryCancelRace\n+TestQueryCancelledReused\n+TestQueryRowBugWorkaround\n+TestQuickClose\n+TestQuoteIdentifier\n+TestQuoteLiteral\n+TestReadFloatPrecision\n+TestReconnect\n+TestReturning\n+TestRowsCloseBeforeDone\n+TestRowsColumnTypes\n+TestRowsResultTag\n+TestRuntimeParameters\n+TestSNISupport\n+TestSNISupport/SNI_is_not_passed_when_disabled\n+TestSNISupport/SNI_is_not_set_for_IPv4\n+TestSNISupport/SNI_is_passed_when_asked_for\n+TestSNISupport/SNI_is_set_by_default\n+TestSSLClientCertificates\n+TestSSLConnection\n+TestSSLRequireWithRootCert\n+TestSSLVerifyCA\n+TestSSLVerifyFull\n+TestScanNilTimestamp\n+TestScanTimestamp\n+TestSimpleParseURL\n+TestSimpleQuery\n+TestStatment\n+TestStmtExecContext\n+TestStmtExecContext/context.Background\n+TestStmtExecContext/context.WithTimeout\n+TestStmtExecContext/context.WithTimeout_exceeded\n+TestStmtQueryContext\n+TestStmtQueryContext/context.Background\n+TestStmtQueryContext/context.WithTimeout\n+TestStmtQueryContext/context.WithTimeout_exceeded\n+TestStringArrayScanBytes\n+TestStringArrayScanEmpty\n+TestStringArrayScanError\n+TestStringArrayScanNil\n+TestStringArrayScanString\n+TestStringArrayScanUnsupported\n+TestStringArrayValue\n+TestStringToBytea\n+TestStringToUUID\n+TestStringWithNul\n+TestTextByteSliceToInt\n+TestTextByteSliceToUUID\n+TestTextDecodeIntoString\n+TestTimeWithTimezone\n+TestTimeWithTimezone/11:59:59+00:00_=>_0000-01-01T11:59:59Z\n+TestTimeWithTimezone/11:59:59+04:00_=>_0000-01-01T11:59:59+04:00\n+TestTimeWithTimezone/11:59:59+04:01:02_=>_0000-01-01T11:59:59+04:01\n+TestTimeWithTimezone/11:59:59-04:01:02_=>_0000-01-01T11:59:59-04:01\n+TestTimeWithTimezone/24:00+00_=>_0000-01-02T00:00:00Z\n+TestTimeWithTimezone/24:00-04:00_=>_0000-01-02T00:00:00-04:00\n+TestTimeWithTimezone/24:00:00+00_=>_0000-01-02T00:00:00Z\n+TestTimeWithTimezone/24:00:00.0+00_=>_0000-01-02T00:00:00Z\n+TestTimeWithTimezone/24:00:00.000000+00_=>_0000-01-02T00:00:00Z\n+TestTimeWithTimezone/24:00Z_=>_0000-01-02T00:00:00Z\n+TestTimeWithoutTimezone\n+TestTimeWithoutTimezone/11:59:59_=>_0000-01-01T11:59:59Z\n+TestTimeWithoutTimezone/24:00:00.000000_=>_0000-01-02T00:00:00Z\n+TestTimeWithoutTimezone/24:00:00.0_=>_0000-01-02T00:00:00Z\n+TestTimeWithoutTimezone/24:00:00_=>_0000-01-02T00:00:00Z\n+TestTimeWithoutTimezone/24:00_=>_0000-01-02T00:00:00Z\n+TestTimestampWithOutTimezone\n+TestTimestampWithTimeZone\n+TestTxOptions\n+TestXactMultiStmt\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/patch.diff b/ydb/tests/postgres_integrations/go-libpq/data/patch.diff\nnew file mode 100644\nindex 000000000000..32c1d9828074\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/patch.diff\n@@ -0,0 +1,227 @@\n+diff -ruN /original-sources/conn_test.go ./conn_test.go\n+--- /original-sources/conn_test.go\t2023-04-26 04:34:24.000000000 +0000\n++++ ./conn_test.go\t2023-09-15 09:16:17.844086739 +0000\n+@@ -230,7 +230,7 @@\n+ \tdb := openTestConn(t)\n+ \tdefer db.Close()\n+ \n+-\t_, err := db.Exec(\"CREATE TEMP TABLE temp (a int)\")\n++\t_, err := db.Exec(\"CREATE TEMP TABLE temp (a int, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -318,7 +318,7 @@\n+ \n+ \tif !r1.Next() {\n+ \t\tif r.Err() != nil {\n+-\t\t\tt.Fatal(r1.Err())\n++\t\t\tt.Fatal(r.Err())\n+ \t\t}\n+ \t\tt.Fatal(\"expected row\")\n+ \t}\n+@@ -862,7 +862,7 @@\n+ \tdefer db.Close()\n+ \n+ \t// stmt.exec()\n+-\t_, err := db.Exec(\"CREATE TEMP TABLE notnulltemp (a varchar(10) not null)\")\n++\t_, err := db.Exec(\"CREATE TEMP TABLE notnulltemp (a varchar(10) not null, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -973,7 +973,7 @@\n+ \tdb := openTestConn(t)\n+ \tdefer db.Close()\n+ \n+-\t_, err := db.Exec(\"create temp table test (i integer)\")\n++\t_, err := db.Exec(\"create temp table test (i integer, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -1014,7 +1014,7 @@\n+ \tdb := openTestConn(t)\n+ \tdefer db.Close()\n+ \n+-\t_, err := db.Exec(\"CREATE TEMP TABLE distributors (did integer default 0, dname text)\")\n++\t_, err := db.Exec(\"CREATE TEMP TABLE distributors (did integer default 0, dname text, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -1067,7 +1067,7 @@\n+ \t}\n+ \tdefer txn.Rollback()\n+ \n+-\trows, err := txn.Query(\"CREATE TEMP TABLE foo(f1 int)\")\n++\trows, err := txn.Query(\"CREATE TEMP TABLE foo(f1 int, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -1290,7 +1290,7 @@\n+ \n+ \tif !r.Next() {\n+ \t\tif r.Err() != nil {\n+-\t\t\tt.Fatal(err)\n++\t\t\tt.Fatal(r.Err())\n+ \t\t}\n+ \t\tt.Fatal(\"expected row\")\n+ \t}\n+@@ -1305,7 +1305,7 @@\n+ \n+ \tif !r.Next() {\n+ \t\tif r.Err() != nil {\n+-\t\t\tt.Fatal(err)\n++\t\t\tt.Fatal(r.Err())\n+ \t\t}\n+ \t\tt.Fatal(\"expected row\")\n+ \t}\n+@@ -1351,11 +1351,11 @@\n+ \tdb := openTestConn(t)\n+ \tdefer db.Close()\n+ \n+-\t_, err := db.Exec(\"CREATE TEMP TABLE temp (a int)\")\n++\t_, err := db.Exec(\"CREATE TEMP TABLE temp (a int primary key)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+-\tsqlInsert := \"INSERT INTO temp VALUES (1)\"\n++\tsqlInsert := \"INSERT INTO temp (a) VALUES (1)\"\n+ \tsqlSelect := \"SELECT * FROM temp\"\n+ \ttx, err := db.Begin()\n+ \tif err != nil {\n+@@ -1501,7 +1501,7 @@\n+ \t\t}\n+ \n+ \t\tvalue, success := tryGetParameterValue()\n+-\t\tif success != test.success && !test.success {\n++\t\tif success != test.success && !success {\n+ \t\t\tt.Fatalf(\"%v: unexpected error: %v\", test.conninfo, err)\n+ \t\t}\n+ \t\tif success != test.success {\n+@@ -1603,7 +1603,7 @@\n+ \t\tra    int64\n+ \t}{\n+ \t\t{\n+-\t\t\tquery: \"CREATE TEMP TABLE temp (a int)\",\n++\t\t\tquery: \"CREATE TEMP TABLE temp (a int, _stub_id Serial PRIMARY KEY)\",\n+ \t\t\ttag:   \"CREATE TABLE\",\n+ \t\t},\n+ \t\t{\n+@@ -1623,19 +1623,19 @@\n+ \t\t},\n+ \t\t// Multiple statements that don't return rows should return the last tag.\n+ \t\t{\n+-\t\t\tquery: \"CREATE TEMP TABLE t (a int); DROP TABLE t\",\n++\t\t\tquery: \"CREATE TEMP TABLE t (a int, _stub_id Serial PRIMARY KEY); DROP TABLE t\",\n+ \t\t\ttag:   \"DROP TABLE\",\n+ \t\t},\n+ \t\t// Ensure a rows-returning query in any position among various tags-returing\n+ \t\t// statements will prefer the rows.\n+ \t\t{\n+-\t\t\tquery: \"SELECT 1; CREATE TEMP TABLE t (a int); DROP TABLE t\",\n++\t\t\tquery: \"SELECT 1; CREATE TEMP TABLE t (a int, _stub_id Serial PRIMARY KEY); DROP TABLE t\",\n+ \t\t},\n+ \t\t{\n+-\t\t\tquery: \"CREATE TEMP TABLE t (a int); SELECT 1; DROP TABLE t\",\n++\t\t\tquery: \"CREATE TEMP TABLE t (a int, _stub_id Serial PRIMARY KEY); SELECT 1; DROP TABLE t\",\n+ \t\t},\n+ \t\t{\n+-\t\t\tquery: \"CREATE TEMP TABLE t (a int); DROP TABLE t; SELECT 1\",\n++\t\t\tquery: \"CREATE TEMP TABLE t (a int, _stub_id Serial PRIMARY KEY); DROP TABLE t; SELECT 1\",\n+ \t\t},\n+ \t}\n+ \n+@@ -1775,7 +1775,7 @@\n+ \tdb := openTestConn(t)\n+ \tdefer db.Close()\n+ \n+-\t_, err := db.Exec(\"CREATE TEMP TABLE temp (a int)\")\n++\t_, err := db.Exec(\"CREATE TEMP TABLE temp (a int, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+diff -ruN /original-sources/copy_test.go ./copy_test.go\n+--- /original-sources/copy_test.go\t2023-04-26 04:34:24.000000000 +0000\n++++ ./copy_test.go\t2023-09-15 09:14:56.207034622 +0000\n+@@ -56,7 +56,7 @@\n+ \t}\n+ \tdefer txn.Rollback()\n+ \n+-\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (a int, b varchar)\")\n++\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (a int, b varchar, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -125,7 +125,7 @@\n+ \t}\n+ \tdefer txn.Rollback()\n+ \n+-\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (a int, b varchar)\")\n++\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (a int, b varchar, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -195,7 +195,7 @@\n+ \t}\n+ \tdefer txn.Rollback()\n+ \n+-\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (num INTEGER, text VARCHAR, blob BYTEA, nothing VARCHAR)\")\n++\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (num INTEGER, text VARCHAR, blob BYTEA, nothing VARCHAR, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -254,7 +254,7 @@\n+ \t}\n+ \tdefer txn.Rollback()\n+ \n+-\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (num INTEGER)\")\n++\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (num INTEGER, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -302,7 +302,7 @@\n+ \t}\n+ \tdefer txn.Rollback()\n+ \n+-\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (num INTEGER)\")\n++\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (num INTEGER, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -327,7 +327,7 @@\n+ \t}\n+ \tdefer txn.Rollback()\n+ \n+-\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (num INTEGER)\")\n++\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (num INTEGER, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -383,7 +383,7 @@\n+ \t\tt.Fatal(err)\n+ \t}\n+ \n+-\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (a int)\")\n++\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (a int, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tt.Fatal(err)\n+ \t}\n+@@ -463,7 +463,7 @@\n+ \t}\n+ \tdefer txn.Rollback()\n+ \n+-\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (a int, b varchar)\")\n++\t_, err = txn.Exec(\"CREATE TEMP TABLE temp (a int, b varchar, _stub_id Serial PRIMARY KEY)\")\n+ \tif err != nil {\n+ \t\tb.Fatal(err)\n+ \t}\n+diff -ruN /original-sources/issues_test.go ./issues_test.go\n+--- /original-sources/issues_test.go\t2023-04-26 04:34:24.000000000 +0000\n++++ ./issues_test.go\t2023-08-22 09:35:23.189760257 +0000\n+@@ -113,7 +113,7 @@\n+ \t\ttime.Sleep(10 * time.Millisecond)\n+ \t\tcancel()\n+ \t}()\n+-\trow := db.QueryRowContext(ctx, \"select pg_sleep(0.5)\")\n++\trow := db.QueryRowContext(ctx, \"select pg_sleep(4::float8)\")\n+ \tvar pgSleepVoid string\n+ \terr := row.Scan(&pgSleepVoid)\n+ \tif pgErr := (*Error)(nil); !(errors.As(err, &pgErr) && pgErr.Code == cancelErrorCode) {\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/run-test.bash b/ydb/tests/postgres_integrations/go-libpq/data/run-test.bash\nnew file mode 100755\nindex 000000000000..0a9e4945a0c0\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/run-test.bash\n@@ -0,0 +1,10 @@\n+#!/bin/bash\n+# https://github.com/lib/pq\n+\n+\n+set -eu\n+\n+LOCAL_DIR=$(dirname \"$0\")\n+LOCAL_DIR=$(realpath \"$LOCAL_DIR\")\n+\n+scripts/run-test.bash \"$LOCAL_DIR\"\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/skip-tests.txt b/ydb/tests/postgres_integrations/go-libpq/data/skip-tests.txt\nnew file mode 100644\nindex 000000000000..1ca9981b7b36\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/skip-tests.txt\n@@ -0,0 +1,2 @@\n+# ydb segfalts\n+TestIssue494 # https://github.com/ydb-platform/ydb/issues/8410\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/data/unit-tests.txt b/ydb/tests/postgres_integrations/go-libpq/data/unit-tests.txt\nnew file mode 100644\nindex 000000000000..e0b282854c6b\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/data/unit-tests.txt\n@@ -0,0 +1,106 @@\n+TestAppendEncodedText\n+TestAppendEscapedText\n+TestAppendEscapedTextExistingBuffer\n+TestArrayScanner\n+TestArrayValuer\n+TestBadConn\n+TestBoolArrayScanBytes\n+TestBoolArrayScanEmpty\n+TestBoolArrayScanError\n+TestBoolArrayScanNil\n+TestBoolArrayScanString\n+TestBoolArrayScanUnsupported\n+TestBoolArrayValue\n+TestByteaArrayScanBytes\n+TestByteaArrayScanEmpty\n+TestByteaArrayScanError\n+TestByteaArrayScanNil\n+TestByteaArrayScanString\n+TestByteaArrayScanUnsupported\n+TestByteaArrayValue\n+TestByteaOutputFormatEncoding\n+TestCloseBadConn\n+TestConnPrepareContext/context.WithTimeout_exceeded\n+TestCopyInSchemaStmt\n+TestCopyInStmt\n+TestDataType\n+TestDataTypeLength\n+TestDataTypeName\n+TestDataTypePrecisionScale\n+TestDecodeUUIDBinaryError\n+TestErrorDuringStartup\n+TestErrorDuringStartupClosesConn\n+TestErrorSQLState\n+TestFloat32ArrayScanBytes\n+TestFloat32ArrayScanEmpty\n+TestFloat32ArrayScanError\n+TestFloat32ArrayScanNil\n+TestFloat32ArrayScanString\n+TestFloat32ArrayScanUnsupported\n+TestFloat32ArrayValue\n+TestFloat64ArrayScanBytes\n+TestFloat64ArrayScanEmpty\n+TestFloat64ArrayScanError\n+TestFloat64ArrayScanNil\n+TestFloat64ArrayScanString\n+TestFloat64ArrayScanUnsupported\n+TestFloat64ArrayValue\n+TestFormatAndParseTimestamp\n+TestFormatTs\n+TestFullParseURL\n+TestGenericArrayScanDelimiter\n+TestGenericArrayScanErrors\n+TestGenericArrayScanScannerArrayBytes\n+TestGenericArrayScanScannerArrayString\n+TestGenericArrayScanScannerSliceBytes\n+TestGenericArrayScanScannerSliceEmpty\n+TestGenericArrayScanScannerSliceNil\n+TestGenericArrayScanScannerSliceString\n+TestGenericArrayScanUnsupported\n+TestGenericArrayValue\n+TestGenericArrayValueErrors\n+TestGenericArrayValueUnsupported\n+TestIPv6LoopbackParseURL\n+TestInt32ArrayScanBytes\n+TestInt32ArrayScanEmpty\n+TestInt32ArrayScanError\n+TestInt32ArrayScanNil\n+TestInt32ArrayScanString\n+TestInt32ArrayScanUnsupported\n+TestInt32ArrayValue\n+TestInt64ArrayScanBytes\n+TestInt64ArrayScanEmpty\n+TestInt64ArrayScanError\n+TestInt64ArrayScanNil\n+TestInt64ArrayScanString\n+TestInt64ArrayScanUnsupported\n+TestInt64ArrayValue\n+TestInvalidProtocolParseURL\n+TestIsUTF8\n+TestMinimalURL\n+TestParseArray\n+TestParseArrayError\n+TestParseComplete\n+TestParseEnviron\n+TestParseOpts\n+TestParseTs\n+TestParseTsErrors\n+TestQuoteIdentifier\n+TestQuoteLiteral\n+TestSNISupport\n+TestSNISupport/SNI_is_not_passed_when_disabled\n+TestSNISupport/SNI_is_not_set_for_IPv4\n+TestSNISupport/SNI_is_passed_when_asked_for\n+TestSNISupport/SNI_is_set_by_default\n+TestScanNilTimestamp\n+TestScanTimestamp\n+TestSimpleParseURL\n+TestStringArrayScanBytes\n+TestStringArrayScanEmpty\n+TestStringArrayScanError\n+TestStringArrayScanNil\n+TestStringArrayScanString\n+TestStringArrayScanUnsupported\n+TestStringArrayValue\n+TestStringWithNul\n+TestTextDecodeIntoString\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/docker_wrapper_test.py b/ydb/tests/postgres_integrations/go-libpq/docker_wrapper_test.py\nnew file mode 100644\nindex 000000000000..08736e56eeda\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/docker_wrapper_test.py\n@@ -0,0 +1,32 @@\n+# from .conftest import integrations\n+import typing\n+\n+import pytest\n+import yatest\n+\n+from ydb.tests.postgres_integrations import library as tl\n+\n+\n+def filter_formatter(test_names: typing.List[str]) -> str:\n+    return \"^(\" + \"|\".join(test_names) + \")$\"\n+\n+\n+def setup_module(module: pytest.Module):\n+    tl.setup_module(module)\n+\n+\n+def teardown_module(module: pytest.Module):\n+    tl.teardown_module(module)\n+\n+\n+def test_pg_generated(testname):\n+    tl.execute_test(testname)\n+\n+\n+def pytest_generate_tests(metafunc: pytest.Metafunc):\n+    if metafunc.definition.name == \"test_pg_generated\":\n+        tl.pytest_generate_tests(metafunc)\n+\n+\n+tl.set_filter_formatter(filter_formatter)\n+tl.set_tests_folder(yatest.common.source_path(\"ydb/tests/postgres_integrations/go-libpq/data\"))\ndiff --git a/ydb/tests/postgres_integrations/go-libpq/ya.make b/ydb/tests/postgres_integrations/go-libpq/ya.make\nnew file mode 100644\nindex 000000000000..279d12a65fd1\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/go-libpq/ya.make\n@@ -0,0 +1,56 @@\n+PY3TEST()\n+\n+FORK_TEST_FILES()\n+TIMEOUT(600)\n+\n+\n+# copy from https://docs.yandex-team.ru/devtools/test/environment#docker-compose\n+REQUIREMENTS(\n+    container:4467981730 # container with docker\n+    cpu:all dns:dns64\n+)\n+\n+IF(OPENSOURCE)\n+    SIZE(MEDIUM) # for run per PR\n+\n+    # Including of docker_compose/recipe.inc automatically converts these tests into LARGE,\n+    # which makes it impossible to run them during precommit checks on Github CI.\n+    # Next several lines forces these tests to be MEDIUM. To see discussion, visit YDBOPS-8928.\n+\n+    SET(TEST_TAGS_VALUE)\n+    SET(TEST_REQUIREMENTS_VALUE)\n+    # This requirement forces tests to be launched consequently,\n+    # otherwise CI system would be overloaded due to simultaneous launch of many Docker containers.\n+    # See DEVTOOLSSUPPORT-44103, YA-1759 for details.\n+    TAG(ya:not_autocheck)\n+ELSE()\n+    SIZE(LARGE) # run in sandbox with timeout more than a minute\n+    TAG(\n+        ya:external\n+        ya:fat\n+        ya:force_sandbox\n+    )\n+ENDIF()\n+\n+\n+ENV(YDB_DRIVER_BINARY=\"ydb/apps/ydbd/ydbd\")\n+ENV(YDB_ALLOCATE_PGWIRE_PORT=\"true\")\n+DEPENDS(\n+    ydb/apps/ydbd\n+)\n+\n+TEST_SRCS(\n+    conftest.py\n+    docker_wrapper_test.py\n+)\n+\n+\n+DATA(\n+    arcadia/ydb/tests/postgres_integrations/go-libpq/data\n+)\n+\n+PEERDIR(\n+    ydb/tests/postgres_integrations/library\n+)\n+\n+END()\ndiff --git a/ydb/tests/postgres_integrations/library/__init__.py b/ydb/tests/postgres_integrations/library/__init__.py\nnew file mode 100644\nindex 000000000000..3d978f45bde1\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/library/__init__.py\n@@ -0,0 +1,13 @@\n+__all__ = [ # noqa\n+    'IntegrationTests',\n+    'PgTestWrapper',\n+    'pytest_collection_finish',\n+    'set_filter_formatter',\n+    'set_tests_folder',\n+    'setup_module',\n+    'teardown_module',\n+    'execute_test',\n+    'pytest_generate_tests',\n+]\n+\n+from .pytest_integration import * # noqa\ndiff --git a/ydb/tests/postgres_integrations/library/pytest_integration.py b/ydb/tests/postgres_integrations/library/pytest_integration.py\nnew file mode 100644\nindex 000000000000..dda063b96cb8\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/library/pytest_integration.py\n@@ -0,0 +1,305 @@\n+import os\n+import shutil\n+\n+from typing import Callable, Dict, List, Set, Optional, Union\n+from os import path\n+from dataclasses import dataclass\n+from enum import Enum\n+\n+import docker\n+import xmltodict\n+import pytest\n+\n+import yatest\n+\n+import logging\n+\n+from ydb.tests.library.harness.kikimr_cluster import kikimr_cluster_factory\n+from ydb.tests.library.harness.kikimr_runner import KiKiMR\n+\n+\n+class TestState(Enum):\n+    PASSED = 1\n+    FAILED = 2\n+    SKIPPED = 3\n+\n+\n+@dataclass\n+class TestCase:\n+    name: str\n+    state: TestState\n+    log: str\n+\n+\n+_tests_for_run_in_docker: pytest.Session = []\n+_filter_format_function = Callable[[List[str]], str]\n+_filter_formatter: Optional[_filter_format_function] = None\n+_tests_folder: Optional[str] = None\n+_test_results: Optional[Dict[str, TestCase]] = None\n+_kikimr_factory: KiKiMR = kikimr_cluster_factory()\n+_integration_tests: Optional[List[str]] = None\n+_skip_tests: Dict[str, str] = dict()  # [test name: reason]\n+\n+\n+def pytest_collection_finish(session: pytest.Session):\n+    global _tests_for_run_in_docker\n+\n+    print(\"rekby set selected items: \", session.items)\n+    selected_tests = []\n+    for item in session.items:\n+        print(f\"rekby, selected item name: '{item.name}'\", )\n+        if item.name.startswith(\"test_pg_generated[\"):\n+            print(\"rekby selected test item:\", item)\n+            test_name = item.callspec.id\n+            print(f\"rekby selected test: {test_name}\")\n+            selected_tests.append(test_name)\n+    selected_tests.sort()\n+    print(\"rekby: result selected tests\", selected_tests)\n+    _tests_for_run_in_docker = list()\n+    for test in selected_tests:\n+        if test not in _skip_tests:\n+            _tests_for_run_in_docker.append(test)\n+    print(\"rekby, tests for run\", _tests_for_run_in_docker)\n+\n+\n+def set_filter_formatter(f: _filter_format_function):\n+    global _filter_formatter\n+    _filter_formatter = f\n+\n+\n+def set_tests_folder(folder: str):\n+    global _tests_folder, _integration_tests, _skip_tests\n+    print(\"rekby, set_tests_folder called\")\n+    _tests_folder = folder\n+    _integration_tests = _read_integration_tests(folder)\n+    _skip_tests = _read_skip_tests(folder)\n+\n+\n+def setup_module(module: pytest.Module):\n+    if len(_tests_for_run_in_docker) == 0:\n+        return\n+\n+    global _test_results\n+    try:\n+        exchange_folder = path.join(yatest.common.output_path(), \"exchange\")\n+        os.mkdir(exchange_folder)\n+    except FileExistsError:\n+        pass\n+\n+    tests_result_folder = path.join(yatest.common.output_path(), \"test-result\")\n+    shutil.rmtree(tests_result_folder, ignore_errors=True)\n+    os.mkdir(tests_result_folder)\n+\n+    image = _docker_build(_tests_folder)\n+\n+    pg_port = _run_ydb()\n+    env = _prepare_docker_env(pg_port, _tests_for_run_in_docker)\n+    _run_tests_in_docker(image, env, exchange_folder, tests_result_folder)\n+\n+    test_results_file = path.join(tests_result_folder, \"raw\", \"result.xml\")\n+    _test_results = _read_tests_result(test_results_file)\n+\n+\n+def teardown_module(module):\n+    \"\"\"teardown any state that was previously setup with a setup_module\n+    method.\n+    \"\"\"\n+    _stop_ydb()\n+\n+\n+def _run_ydb() -> int:\n+    \"\"\"\n+    Run YDB cluster and return pgwire port number.\n+    \"\"\"\n+    _kikimr_factory.start()\n+    node = _kikimr_factory.nodes[1]\n+    print(\"rekby: pgwire port\", node.pgwire_port)\n+    return node.pgwire_port\n+\n+\n+def _stop_ydb():\n+    _kikimr_factory.stop()\n+\n+\n+def _prepare_docker_env(pgwire_port: str, test_names: List[str]) -> List[str]:\n+    test_filter = _filter_formatter(test_names)\n+    return [\n+        \"PGUSER=root\",\n+        \"PGPASSWORD=1234\",\n+        \"PGHOST=localhost\",\n+        f\"PGPORT={pgwire_port}\",\n+        \"PGDATABASE=/Root\",\n+        \"PQGOSSLTESTS=0\",\n+        \"PQSSLCERTTEST_PATH=certs\",\n+        f\"YDB_PG_TESTFILTER={test_filter}\",\n+    ]\n+\n+\n+def _docker_build(folder: str) -> str:\n+    image_name = 'ydb-pg-test-image'\n+    logging.debug(f\"rekby, docker folder: '{folder}'\")\n+\n+    import glob\n+    files_list = glob.glob(folder + \"/data/*\")\n+    logging.debug(f\"rekby, {folder}/data/ contents: {files_list}\")\n+\n+    client: docker.Client = docker.from_env()\n+    client.images.build(\n+        path=folder,\n+        tag=image_name,\n+        rm=True,\n+        network_mode='host',\n+    )\n+    return image_name\n+\n+\n+def _run_tests_in_docker(\n+        image: str,\n+        env: Union[List[str], Dict[str, str]],\n+        exchange_folder: str,\n+        results_folder: str,\n+        ):\n+\n+    # TODO: run YDB with scripts/receipt and get connection port/database with runtime\n+    client: docker.Client = docker.from_env()\n+\n+    container = client.containers.create(\n+        image=image,\n+        # command=\"/docker-start.bash\",\n+        # detach=True,\n+        # auto_remove=True,\n+        environment=env,\n+        mounts=[\n+            docker.types.Mount(\n+                target=\"/exchange\",\n+                source=exchange_folder,\n+                type=\"bind\",\n+            ),\n+            docker.types.Mount(\n+                target=\"/test-result\",\n+                source=results_folder,\n+                type=\"bind\",\n+            ),\n+        ],\n+        network_mode='host',\n+    )\n+    try:\n+        container.start()\n+        container.wait()\n+        print(container.logs().decode())\n+    finally:\n+        container.remove()\n+\n+\n+def pytest_generate_tests(metafunc: pytest.Metafunc):\n+    \"\"\"\n+    Return tests for run through pytest.\n+    \"\"\"\n+    print(\"rekby, integration tests:\", _integration_tests)\n+    metafunc.parametrize('testname', _integration_tests, ids=_integration_tests)\n+\n+\n+def execute_test(testname: str):\n+    if testname in _skip_tests:\n+        pytest.skip(_skip_tests[testname])\n+\n+    try:\n+        test = _test_results[testname]\n+    except KeyError:\n+        pytest.fail(\"test result not found, may be the test was not runned\")\n+\n+    if test.state == TestState.PASSED:\n+        logging.getLogger().log(logging.INFO, test.log)\n+        return\n+    if test.state == TestState.SKIPPED:\n+        logging.getLogger().log(logging.INFO, test.log)\n+        pytest.skip()\n+    if test.state == TestState.FAILED:\n+        logging.getLogger().log(logging.ERROR, test.log)\n+        pytest.fail()\n+\n+    raise Exception(f\"Unexpected test state: '{test.state}'\")\n+\n+\n+def _read_integration_tests(folder: str) -> Set[str]:\n+    with open(path.join(folder, \"full-test-list.txt\"), \"rt\") as f:\n+        all = set(line.strip() for line in f.readlines())\n+\n+    with open(path.join(folder, \"unit-tests.txt\"), \"rt\") as f:\n+        unit = set(f.readlines())\n+\n+    test_list_for_run = list(all - unit)\n+    test_list_for_run.sort()\n+    return test_list_for_run\n+\n+\n+def _read_skip_tests(folder: str) -> Dict[str, str]:\n+    res = dict()\n+    try:\n+        fpath = path.join(folder, \"skip-tests.txt\")\n+        with open(fpath) as f:\n+            for line in f.readlines():\n+                if \"# \" in line:\n+                    line = line[:line.rindex(\"# \")]\n+\n+                line = line.strip()\n+                if line == \"\":\n+                    continue\n+\n+                res[line] = f\"skipped by '{fpath}'\"\n+    except FileNotFoundError:\n+        pass\n+\n+    return res\n+\n+\n+def _read_tests_result(filepath: str) -> Dict[str, TestCase]:\n+    with open(filepath, \"rt\") as f:\n+        data = f.read()\n+    d = xmltodict.parse(data, force_list=(\"testcase\",))\n+    testsuites = d[\"testsuites\"]\n+    test_suite = testsuites[\"testsuite\"]\n+    test_cases = test_suite[\"testcase\"]\n+\n+    res: Dict[str, TestCase] = dict()\n+\n+    def get_text(test_case, field_name: str) -> str:\n+        field_val = test_case[field_name]\n+        if type(field_val) is str:\n+            return field_val\n+        elif type(field_val) is dict:\n+            prefix = field_val.get(\"@message\", \"\") + \"\\n\"\n+            if prefix == \"\\n\":\n+                prefix = \"\"\n+            return prefix + field_val.get(\"#text\", \"\")\n+        raise Exception(f\"Unknown field val for field '{field_name}':\\n{field_val}\")\n+\n+    for test_case in test_cases:\n+        class_name = test_case[\"@classname\"]\n+        test_name = test_case[\"@name\"]\n+        if class_name == \"\":\n+            name = test_name\n+        else:\n+            name = test_case[\"@classname\"] + \"/\" + test_case[\"@name\"]\n+\n+        print(\"rekby-debug\", test_case)\n+        if \"failure\" in test_case:\n+            test_state = TestState.FAILED\n+            log = get_text(test_case, \"failure\")\n+        elif \"error\" in test_case:\n+            test_state = TestState.FAILED\n+            log = get_text(test_case, \"error\")\n+        elif \"skipped\" in test_case:\n+            test_state = TestState.SKIPPED\n+            log = get_text(test_case, \"skipped\")\n+        else:\n+            test_state = TestState.PASSED\n+            log = \"\"\n+\n+        res[name] = TestCase(\n+            name=name,\n+            state=test_state,\n+            log=log,\n+        )\n+\n+    return res\ndiff --git a/ydb/tests/postgres_integrations/library/ut/data/junit-results-example.xml b/ydb/tests/postgres_integrations/library/ut/data/junit-results-example.xml\nnew file mode 100644\nindex 000000000000..6627aaf29920\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/library/ut/data/junit-results-example.xml\n@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<testsuites tests=\"221\" failures=\"112\" skipped=\"6\">\n+    <testsuite name=\"\" tests=\"221\" failures=\"112\" errors=\"0\" id=\"0\" hostname=\"localhost\" skipped=\"6\" time=\"0.330\" timestamp=\"2024-07-16T15:06:53Z\">\n+        <testcase name=\"OK\" classname=\"o\" time=\"0.000\"></testcase>\n+        <testcase name=\"failed1\" classname=\"f\" time=\"0.000\">\n+            <failure>fail mess</failure>\n+        </testcase>\n+        <testcase name=\"failed2\" classname=\"f\" time=\"0.000\">\n+            <failure message=\"Failed\"><![CDATA[escaped error]]></failure>\n+        </testcase>\n+\t\t<testcase name=\"error1\" classname=\"f\" time=\"0.000\">\n+\t\t\t<error message=\"No test result found\">panic and timeout</error>\n+\t\t</testcase>\n+        <testcase name=\"skipped1\" classname=\"s\" time=\"0.000\">\n+            <skipped message=\"Skipped\">skip message</skipped>\n+        </testcase>\n+        <testcase name=\"skipped2\" classname=\"s\" time=\"0.000\">\n+            <skipped><![CDATA[escaped skip message]]></skipped>\n+        </testcase>\n+    </testsuite>\n+</testsuites>\ndiff --git a/ydb/tests/postgres_integrations/library/ut/data/junit-results-example1.xml b/ydb/tests/postgres_integrations/library/ut/data/junit-results-example1.xml\nnew file mode 100644\nindex 000000000000..e0c691d72826\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/library/ut/data/junit-results-example1.xml\n@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<testsuites tests=\"221\" failures=\"112\" skipped=\"6\">\n+    <testsuite name=\"\" tests=\"221\" failures=\"112\" errors=\"0\" id=\"0\" hostname=\"localhost\" skipped=\"6\" time=\"0.330\" timestamp=\"2024-07-16T15:06:53Z\">\n+        <testcase name=\"test-failed\" classname=\"f\" time=\"0.000\">\n+            <failure message=\"Failed\">failed-mess</failure>\n+        </testcase>\n+    </testsuite>\n+</testsuites>\ndiff --git a/ydb/tests/postgres_integrations/library/ut/integrations_test.py b/ydb/tests/postgres_integrations/library/ut/integrations_test.py\nnew file mode 100644\nindex 000000000000..a6caf5b255ee\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/library/ut/integrations_test.py\n@@ -0,0 +1,37 @@\n+from os import path\n+\n+import pytest\n+import yatest\n+\n+from ydb.tests.postgres_integrations.library import pytest_integration\n+from ydb.tests.postgres_integrations.library.pytest_integration import TestCase, TestState\n+\n+\n+TEST_DATA_FOLDER = yatest.common.source_path(\"ydb/tests/postgres_integrations/library/ut/data\")\n+\n+\n+@pytest.mark.parametrize(\n+    \"test\",\n+    [\n+        TestCase(name=\"o/OK\", state=TestState.PASSED, log=\"\"),\n+        TestCase(name=\"f/failed1\", state=TestState.FAILED, log=\"fail mess\"),\n+        TestCase(name=\"f/failed2\", state=TestState.FAILED, log=\"Failed\\nescaped error\"),\n+        TestCase(name=\"f/error1\", state=TestState.FAILED, log=\"No test result found\\npanic and timeout\"),\n+        TestCase(name=\"s/skipped1\", state=TestState.SKIPPED, log=\"Skipped\\nskip message\"),\n+        TestCase(name=\"s/skipped2\", state=TestState.SKIPPED, log=\"escaped skip message\"),\n+    ],\n+    ids=lambda item: item.name\n+)\n+def test_read_jtest_results(test):\n+    filepath = path.join(TEST_DATA_FOLDER, \"junit-results-example.xml\")\n+    parsed_result = pytest_integration._read_tests_result(filepath)\n+\n+    parsed_test = parsed_result[test.name]\n+    assert test == parsed_test\n+\n+\n+def test_read_jtest_with_one_result():\n+    filepath = path.join(TEST_DATA_FOLDER, \"junit-results-example1.xml\")\n+    parsed_result = pytest_integration._read_tests_result(filepath)\n+    parsed_test = parsed_result[\"f/test-failed\"]\n+    assert parsed_test == TestCase(name=\"f/test-failed\", state=TestState.FAILED, log=\"Failed\\nfailed-mess\")\ndiff --git a/ydb/tests/postgres_integrations/library/ut/ya.make b/ydb/tests/postgres_integrations/library/ut/ya.make\nnew file mode 100644\nindex 000000000000..aa508da81656\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/library/ut/ya.make\n@@ -0,0 +1,16 @@\n+PY3TEST()\n+\n+TEST_SRCS(\n+    integrations_test.py\n+)\n+\n+\n+DATA(\n+    arcadia/ydb/tests/postgres_integrations/library/ut/data\n+)\n+\n+PEERDIR(\n+    ydb/tests/postgres_integrations/library\n+)\n+\n+END()\ndiff --git a/ydb/tests/postgres_integrations/library/ya.make b/ydb/tests/postgres_integrations/library/ya.make\nnew file mode 100644\nindex 000000000000..86959db62152\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/library/ya.make\n@@ -0,0 +1,16 @@\n+PY3_LIBRARY()\n+\n+\n+ALL_PY_SRCS()\n+\n+PEERDIR(\n+    contrib/python/docker\n+    contrib/python/xmltodict\n+    ydb/tests/library\n+)\n+\n+END()\n+\n+RECURSE_FOR_TESTS(\n+    ut\n+)\n\\ No newline at end of file\ndiff --git a/ydb/tests/postgres_integrations/ya.make b/ydb/tests/postgres_integrations/ya.make\nnew file mode 100644\nindex 000000000000..3839f278034e\n--- /dev/null\n+++ b/ydb/tests/postgres_integrations/ya.make\n@@ -0,0 +1,4 @@\n+RECURSE(\n+    go-libpq\n+    library\n+)\ndiff --git a/ydb/tests/ya.make b/ydb/tests/ya.make\nindex 6ad1bcab5956..1b847b097d28 100644\n--- a/ydb/tests/ya.make\n+++ b/ydb/tests/ya.make\n@@ -6,6 +6,7 @@ RECURSE(\n     olap\n     oss\n     perf\n+    postgres_integrations\n     stability\n     supp\n     tools\n",
  "problem_statement": "Sometimes queries over pg_class are not working from SuperSet\nWhile receiving table List from YDB Database over PG protocol, SuperSet makes the query below. This query commonly fails, but sometimes this query works. It seems that it depends on session parameters \r\n\r\n```\r\n2024-08-08T20:19:05.727659Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) -> [1] 'i' \"Initial\" Size(4) SSL handshake\r\n2024-08-08T20:19:05.727666Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- 'N' \"Decline SSL\"\r\n2024-08-08T20:19:05.730530Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) -> [1] 'i' \"Initial\" Size(70) protocol(0x00000300) user=test database=olap-testing-vla-common2/kikimr/apkobzev/test\r\n2024-08-08T20:19:05.730562Z :LOCAL_PGWIRE DEBUG: TEvAuth protocol(0x00000300) user=test database=olap-testing-vla-common2/kikimr/apkobzev/test  cookie 1\r\n2024-08-08T20:19:05.733619Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [1] 'R' \"Auth\" Size(4) ClearText\r\n2024-08-08T20:19:05.736564Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) -> [2] 'p' \"PasswordMessage\" Size(5)\r\n2024-08-08T20:19:05.736586Z :LOCAL_PGWIRE DEBUG: TEvAuth protocol(0x00000300) user=test database=olap-testing-vla-common2/kikimr/apkobzev/test  cookie 2\r\n2024-08-08T20:19:05.741611Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [2] 'R' \"Auth\" Size(4) OK\r\n2024-08-08T20:19:05.741666Z :LOCAL_PGWIRE DEBUG: TEvConnectionOpened [8:7400865791948396964:5569] cookie 3\r\n2024-08-08T20:19:05.741676Z :LOCAL_PGWIRE DEBUG: Created ydb connection [8:7400865791948396975:4245] num 43\r\n2024-08-08T20:19:05.741689Z :LOCAL_PGWIRE DEBUG: Sent CreateSessionRequest to kqpProxy Request { Database: \"/olap-testing-vla-common2/kikimr/apkobzev/test\" } PgWire: true UserName: \"test\"\r\n2024-08-08T20:19:05.742001Z :LOCAL_PGWIRE DEBUG: Received TEvCreateSessionResponse Error: \"\" Response { SessionId: \"ydb://session/3?node_id=8&id=ZDBkZTY0MGMtOTk5OTg2N2YtYWM1ZjlhODAtYmJlZjc5Yg==\" NodeId: 8 } YdbStatus: SUCCESS ResourceExhausted: false\r\n2024-08-08T20:19:05.742005Z :LOCAL_PGWIRE DEBUG: Session id is ydb://session/3?node_id=8&id=ZDBkZTY0MGMtOTk5OTg2N2YtYWM1ZjlhODAtYmJlZjc5Yg==\r\n2024-08-08T20:19:05.742014Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [3] 'K' \"BackendKeyData\" Size(8) cancellation PID 1437226402 KEY 1437226369\r\n2024-08-08T20:19:05.742021Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [3] 'S' \"ParameterStatus\" Size(38) server_version=14.5 (ydb stable-23-4)\r\n2024-08-08T20:19:05.742024Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [3] 'S' \"ParameterStatus\" Size(23) IntervalStyle=postgres\r\n2024-08-08T20:19:05.742026Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [3] 'S' \"ParameterStatus\" Size(14) DateStyle=ISO\r\n2024-08-08T20:19:05.742032Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [3] 'S' \"ParameterStatus\" Size(21) client_encoding=UTF8\r\n2024-08-08T20:19:05.742034Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [3] 'S' \"ParameterStatus\" Size(21) server_encoding=UTF8\r\n2024-08-08T20:19:05.742037Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [3] 'S' \"ParameterStatus\" Size(21) integer_datetimes=on\r\n2024-08-08T20:19:05.742040Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [3] 'Z' \"ReadyForQuery\" Size(1) Status: I\r\n2024-08-08T20:19:05.748465Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) -> [4] 'Q' \"Query\" Size(6)  Query: \"BEGIN\"\r\n2024-08-08T20:19:05.748495Z :LOCAL_PGWIRE DEBUG: TEvQuery [8:7400865791948396964:5569]\r\n2024-08-08T20:19:05.748510Z :LOCAL_PGWIRE DEBUG: TEvSingleQuery [8:7400865791948396964:5569]\r\n2024-08-08T20:19:05.748524Z :LOCAL_PGWIRE DEBUG: Created pgwireKqpProxyQuery: [8:7400865791948396983:4245]\r\n2024-08-08T20:19:05.748592Z :LOCAL_PGWIRE DEBUG: Sent event to kqpProxy Request { SessionId: \"ydb://session/3?node_id=8&id=ZDBkZTY0MGMtOTk5OTg2N2YtYWM1ZjlhODAtYmJlZjc5Yg==\" KeepSession: true Action: QUERY_ACTION_BEGIN_TX TxControl { begin_tx { serializable_read_write { } } } Database: \"/olap-testing-vla-common2/kikimr/apkobzev/test\" } UserToken: \"\\n\\004test\\022\\030\\022\\026\\n\\024all-users@well-known\\032\\352\\003eyJhbGciOiJQUzI1NiIsImtpZCI6IjE2In0.eyJhdWQiOiJcL29sYXAtdGVzdGluZy12bGEtY29tbW9uMiIsImV4cCI6MTcyMzE5MTU0NSwiaWF0IjoxNzIzMTQ4MzQ1LCJzdWIiOiJ0ZXN0In0.RqlXyaYEkO7vxhZY8sq8-YvGro7GmhcqP49cmbAYAYHOpqnUr05oBpRNOtc1QllNxZbD4Imo8xG32gC21dmEYcWvCM1EQJUVFARxMu2sspGRzcLzQDwAZXDxhS5xS1OqSXecJDVNeMnLWaceRmRrt8e8toG1r8ePDpPKB5tUMuzgihsqWSPxKAIEqzQcZr6PTj5PzyneqUcGxdVi6Nl9F0sHQ7q-HvNMsMFcGv4HM2587oef6t--bGsvbTScWGsgvtvqgIj_ZVPhhH70kb5jhN9HYIijW3MXHv1hA_ehVWlUR0A3hyzbl8WNwk0WPvYNjLVp3uFNoeztG9Om7uAmkg\\\"\\005Login\" RequestActorId { RawX1: 7400865791948396983 RawX2: 4503633987113109 }\r\n2024-08-08T20:19:05.748720Z :LOCAL_PGWIRE DEBUG: Handling TEvKqp::TEvQueryResponse Response { SessionId: \"ydb://session/3?node_id=8&id=ZDBkZTY0MGMtOTk5OTg2N2YtYWM1ZjlhODAtYmJlZjc5Yg==\" TxMeta { id: \"01j4sta8cm9c56r8k2w0thfg62\" } QueryDiagnostics: \"\" ExtraInfo { PgInfo { CommandTag: \"BEGIN\" } } } YdbStatus: SUCCESS\r\n2024-08-08T20:19:05.748726Z :LOCAL_PGWIRE DEBUG: Finally replying to [8:7400865791948396964:5569] cookie 4\r\n2024-08-08T20:19:05.748730Z :LOCAL_PGWIRE DEBUG: Received TEvProxyCompleted\r\n2024-08-08T20:19:05.748731Z :LOCAL_PGWIRE DEBUG: Updating transaction state to T\r\n2024-08-08T20:19:05.748732Z :LOCAL_PGWIRE DEBUG: Transaction id is 01j4sta8cm9c56r8k2w0thfg62\r\n2024-08-08T20:19:05.748733Z :LOCAL_PGWIRE DEBUG: Session id is ydb://session/3?node_id=8&id=ZDBkZTY0MGMtOTk5OTg2N2YtYWM1ZjlhODAtYmJlZjc5Yg==\r\n2024-08-08T20:19:05.748740Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [4] 'C' \"CommandComplete\" Size(6)  Tag: \"BEGIN\"\r\n2024-08-08T20:19:05.748746Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) <- [4] 'Z' \"ReadyForQuery\" Size(1) Status: T\r\n2024-08-08T20:19:05.751663Z :PGWIRE DEBUG: (#108,[2a02:6b8:c12:3b25:0:5a59:4602:0]:37684) -> [5] 'Q' \"Query\" Size(134)  Query: \"SELECT c.relname FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'public' AND c.relkind in ('r', 'p')\"\r\n2024-08-08T20:19:05.751677Z :LOCAL_PGWIRE DEBUG: TEvQuery [8:7400865791948396964:5569]\r\n2024-08-08T20:19:05.751683Z :LOCAL_PGWIRE DEBUG: TEvSingleQuery [8:7400865791948396964:5569]\r\n2024-08-08T20:19:05.751687Z :LOCAL_PGWIRE DEBUG: Created pgwireKqpProxyQuery: [8:7400865791948396985:4245]\r\n2024-08-08T20:19:05.751721Z :LOCAL_PGWIRE DEBUG: Sent event to kqpProxy Request { SessionId: \"ydb://session/3?node_id=8&id=ZDBkZTY0MGMtOTk5OTg2N2YtYWM1ZjlhODAtYmJlZjc5Yg==\" Query: \"SELECT c.relname FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = \\'public\\' AND c.relkind in (\\'r\\', \\'p\\')\\n\" Type: QUERY_TYPE_SQL_GENERIC_QUERY KeepSession: true Action: QUERY_ACTION_EXECUTE TxControl { tx_id: \"01j4sta8cm9c56r8k2w0thfg62\" } Database: \"/olap-testing-vla-common2/kikimr/apkobzev/test\" QueryCachePolicy { keep_in_cache: true } UsePublicResponseDataFormat: true Syntax: SYNTAX_PG } UserToken: \"\\n\\004test\\022\\030\\022\\026\\n\\024all-users@well-known\\032\\352\\003eyJhbGciOiJQUzI1NiIsImtpZCI6IjE2In0.eyJhdWQiOiJcL29sYXAtdGVzdGluZy12bGEtY29tbW9uMiIsImV4cCI6MTcyMzE5MTU0NSwiaWF0IjoxNzIzMTQ4MzQ1LCJzdWIiOiJ0ZXN0In0.RqlXyaYEkO7vxhZY8sq8-YvGro7GmhcqP49cmbAYAYHOpqnUr05oBpRNOtc1QllNxZbD4Imo8xG32gC21dmEYcWvCM1EQJUVFARxMu2sspGRzcLzQDwAZXDxhS5xS1OqSXecJDVNeMnLWaceRmRrt8e8toG1r8ePDpPKB5tUMuzgihsqWSPxKAIEqzQcZr6PTj5PzyneqUcGxdVi6Nl9F0sHQ7q-HvNMsMFcGv4HM2587oef6t--bGsvbTScWGsgvtvqgIj_ZVPhhH70kb5jhN9HYIijW3MXHv1hA_ehVWlUR0A3hyzbl8WNwk0WPvYNjLVp3uFNoeztG9Om7uAmkg\\\"\\005Login\" RequestActorId { RawX1: 7400865791948396985 RawX2: 4503633987113109 }\r\n2024-08-08T20:19:05.856814Z :LOCAL_PGWIRE DEBUG: Handling TEvKqp::TEvQueryResponse Response { SessionId: \"ydb://session/3?node_id=8&id=ZDBkZTY0MGMtOTk5OTg2N2YtYWM1ZjlhODAtYmJlZjc5Yg==\" QueryIssues { message: \"Check failed: path: \\'/olap-testing-vla-common2\\', error: path hasn\\'t been resolved, nearest resolved path: \\'\\' (id: <Invalid>)\" severity: 1 } QueryIssues { message: \"Query invalidated on scheme/internal error during Data execution\" issue_code: 2019 severity: 1 } TxMeta { id: \"01j4sta8cm9c56r8k2w0thfg62\" } } YdbStatus: ABORTED\r\n2024-08-08T20:19:05.856824Z :LOCAL_PGWIRE DEBUG: Finally replying to [8:7400865791948396964:5569] cookie 5\r\n```\n[pg] Invalid input syntax for Timastamp\nReproduce:\r\n1. Run local YDB https://github.com/ydb-platform/ydb/wiki/Local-run-postgres-tests\r\n2. Execute\r\n\r\n```\r\n\u27a4 echo \"SELECT '2024-08-19 14:10:31.722307734Z'::Timestamp;\" | psql postgres://root:1234@localhost:5432/local\r\nStatus: PRECONDITION_FAILED\r\nIssues:\r\n<main>: Error: ydb/library/yql/minikql/computation/mkql_value_builder.cpp:52: Terminate was called, reason(82): ERROR:  invalid input syntax for type timestamp: \"2024-08-19 14:10:31.722307734Z\"\r\n```\r\n\r\n3. Expected:\r\n\r\n```\r\necho \"SELECT '2024-08-19 14:10:31.722307734Z'::Timestamp;\" | psql postgres://root:1234@localhost:5432/local\r\n         timestamp\r\n----------------------------\r\n 2024-08-19 14:10:31.722308\r\n(1 row)\r\n```\n",
  "hints_text": "I noticed that queries to regular YDB tables work fine, queries to table pg_namespace work fine.\r\n\r\nAll problems with access occur only to the pg_class table.\r\n\r\n```\r\n/olap-testing-vla-common2/kikimr/apkobzev/test=> select * from test_row;\r\n a\r\n---\r\n 1\r\n(1 row)\r\n\r\n/olap-testing-vla-common2/kikimr/apkobzev/test=> SELECT * FROM pg_namespace ;\r\n nspacl |      nspname       | nspowner | oid\r\n--------+--------------------+----------+------\r\n        | information_schema |        1 |    1\r\n        | public             |        1 | 2200\r\n        | pg_catalog         |        1 |   11\r\n(3 rows)\r\n\r\n/olap-testing-vla-common2/kikimr/apkobzev/test=> SELECT * FROM pg_class ;\r\nStatus: ABORTED\r\nIssues:\r\n<main>: Error: Check failed: path: '/olap-testing-vla-common2', error: path hasn't been resolved, nearest resolved path: '' (id: <Invalid>)\r\n<main>: Error: Query invalidated on scheme/internal error during Data execution, code: 2019\r\n\r\n/olap-testing-vla-common2/kikimr/apkobzev/test=>\r\n```\ninitially, 'Z' will be hardcoded similar to 'GMT'",
  "created_at": "2024-08-21T22:57:45Z",
  "modified_files": [
    ".github/config/muted_ya.txt",
    ".gitignore"
  ],
  "modified_test_files": [
    "b/ydb/tests/postgres_integrations/go-libpq/conftest.py",
    "b/ydb/tests/postgres_integrations/go-libpq/data/.gitignore",
    "b/ydb/tests/postgres_integrations/go-libpq/data/Dockerfile",
    "b/ydb/tests/postgres_integrations/go-libpq/data/common-go-scripts/go-run-separate-tests.bash",
    "b/ydb/tests/postgres_integrations/go-libpq/data/docker-compose-host.yaml",
    "b/ydb/tests/postgres_integrations/go-libpq/data/docker-compose.yaml",
    "b/ydb/tests/postgres_integrations/go-libpq/data/docker-init.bash",
    "b/ydb/tests/postgres_integrations/go-libpq/data/docker-start.bash",
    "b/ydb/tests/postgres_integrations/go-libpq/data/full-test-list.txt",
    "b/ydb/tests/postgres_integrations/go-libpq/data/patch.diff",
    "b/ydb/tests/postgres_integrations/go-libpq/data/run-test.bash",
    "b/ydb/tests/postgres_integrations/go-libpq/data/skip-tests.txt",
    "b/ydb/tests/postgres_integrations/go-libpq/data/unit-tests.txt",
    "b/ydb/tests/postgres_integrations/go-libpq/docker_wrapper_test.py",
    "b/ydb/tests/postgres_integrations/go-libpq/ya.make",
    "b/ydb/tests/postgres_integrations/library/__init__.py",
    "b/ydb/tests/postgres_integrations/library/pytest_integration.py",
    "b/ydb/tests/postgres_integrations/library/ut/data/junit-results-example.xml",
    "b/ydb/tests/postgres_integrations/library/ut/data/junit-results-example1.xml",
    "b/ydb/tests/postgres_integrations/library/ut/integrations_test.py",
    "b/ydb/tests/postgres_integrations/library/ut/ya.make",
    "b/ydb/tests/postgres_integrations/library/ya.make",
    "b/ydb/tests/postgres_integrations/ya.make",
    "ydb/tests/ya.make"
  ]
}