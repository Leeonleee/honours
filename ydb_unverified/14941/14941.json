{
  "repo": "ydb-platform/ydb",
  "pull_number": 14941,
  "instance_id": "ydb-platform__ydb-14941",
  "issue_numbers": [
    "2"
  ],
  "base_commit": "50d53759f39f5578302312598fa2005abcca9c22",
  "patch": "diff --git a/ydb/core/backup/impl/local_partition_reader.cpp b/ydb/core/backup/impl/local_partition_reader.cpp\nindex b7a476693ac9..2a43bb8741e4 100644\n--- a/ydb/core/backup/impl/local_partition_reader.cpp\n+++ b/ydb/core/backup/impl/local_partition_reader.cpp\n@@ -135,11 +135,11 @@ class TLocalPartitionReader\n \n         for (auto& result : readResult.GetResult()) {\n             gotOffset = std::max(gotOffset, result.GetOffset());\n-            records.emplace_back(result.GetOffset(), GetDeserializedData(result.GetData()).GetData());\n+            records.emplace_back(result.GetOffset(), GetDeserializedData(result.GetData()).GetData(), TInstant::MilliSeconds(result.GetCreateTimestampMS()), result.GetSourceId(), result.GetSourceId(), result.GetSeqNo());\n         }\n         SentOffset = gotOffset + 1;\n \n-        Send(Worker, new TEvWorker::TEvData(ToString(Partition), std::move(records)));\n+        Send(Worker, new TEvWorker::TEvData(Partition, ToString(Partition), std::move(records)));\n     }\n \n     void Leave(TEvWorker::TEvGone::EStatus status) {\ndiff --git a/ydb/core/persqueue/purecalc/purecalc.cpp b/ydb/core/persqueue/purecalc/purecalc.cpp\nindex 018483c9e488..be27c6d34f4c 100644\n--- a/ydb/core/persqueue/purecalc/purecalc.cpp\n+++ b/ydb/core/persqueue/purecalc/purecalc.cpp\n@@ -13,14 +13,13 @@ using namespace NYql::NUdf;\n using namespace NKikimr::NMiniKQL;\n \n constexpr const char* DataFieldName = \"_data\";\n+constexpr const char* MessageGroupIdFieldName = \"_message_group_id\";\n constexpr const char* OffsetFieldName = \"_offset\";\n+constexpr const char* PartitionFieldName = \"_partition\";\n+constexpr const char* ProducerIdFieldName = \"_producer_id\";\n+constexpr const char* SeqNoFieldName = \"_seq_no\";\n \n-constexpr const size_t FieldCount = 2; // Change it when change fields\n-\n-struct FieldPositions {\n-    ui64 Data = 0;\n-    ui64 Offset = 0;\n-};\n+constexpr const size_t FieldCount = 6; // Change it when change fields\n \n \n NYT::TNode CreateTypeNode(const TString& fieldType) {\n@@ -41,7 +40,11 @@ void AddField(NYT::TNode& node, const TString& fieldName, const TString& fieldTy\n NYT::TNode CreateMessageScheme() {\n     auto structMembers = NYT::TNode::CreateList();\n     AddField(structMembers, DataFieldName, \"String\");\n+    AddField(structMembers, MessageGroupIdFieldName, \"String\");\n     AddField(structMembers, OffsetFieldName, \"Uint64\");\n+    AddField(structMembers, PartitionFieldName, \"Uint32\");\n+    AddField(structMembers, ProducerIdFieldName, \"String\");\n+    AddField(structMembers, SeqNoFieldName, \"Uint64\");\n \n     return NYT::TNode::CreateList()\n         .Add(\"StructType\")\n@@ -57,32 +60,36 @@ struct TMessageWrapper {\n         return NKikimr::NMiniKQL::MakeString(Message.Data);\n     }\n \n+    NYql::NUdf::TUnboxedValuePod GetMessageGroupId() const {\n+        return NKikimr::NMiniKQL::MakeString(Message.MessageGroupId);\n+    }\n+\n     NYql::NUdf::TUnboxedValuePod GetOffset() const {\n         return NYql::NUdf::TUnboxedValuePod(Message.Offset);\n     }\n+\n+    NYql::NUdf::TUnboxedValuePod GetPartition() const {\n+        return NYql::NUdf::TUnboxedValuePod(Message.Partition);\n+    }\n+\n+    NYql::NUdf::TUnboxedValuePod GetProducerId() const {\n+        return NKikimr::NMiniKQL::MakeString(Message.ProducerId);\n+    }\n+\n+    NYql::NUdf::TUnboxedValuePod GetSeqNo() const {\n+        return NYql::NUdf::TUnboxedValuePod(Message.SeqNo);\n+    }\n };\n \n class TInputConverter {\n protected:\n     IWorker* Worker_;\n     TPlainContainerCache Cache_;\n-    FieldPositions Position;\n \n public:\n     explicit TInputConverter(IWorker* worker)\n         : Worker_(worker)\n     {\n-        const TStructType* structType = worker->GetInputType();\n-        const ui64 count = structType->GetMembersCount();\n- \n-        for (ui64 i = 0; i < count; ++i) { \n-            const auto name = structType->GetMemberName(i);\n-            if (name == DataFieldName) {\n-                Position.Data = i;\n-            } else if (name == OffsetFieldName) {\n-                Position.Offset = i;\n-            }\n-        }\n     }\n \n public:\n@@ -92,8 +99,13 @@ class TInputConverter {\n         result = Cache_.NewArray(holderFactory, static_cast<ui32>(FieldCount), items);\n \n         TMessageWrapper wrap {*message};\n-        items[Position.Data] = wrap.GetData();\n-        items[Position.Offset] = wrap.GetOffset();\n+        // lex order by field name\n+        items[0] = wrap.GetData();\n+        items[1] = wrap.GetMessageGroupId();\n+        items[2] = wrap.GetOffset();\n+        items[3] = wrap.GetPartition();\n+        items[4] = wrap.GetProducerId();\n+        items[5] = wrap.GetSeqNo();\n     }\n \n     void ClearCache() {\ndiff --git a/ydb/core/persqueue/purecalc/purecalc.h b/ydb/core/persqueue/purecalc/purecalc.h\nindex 90fe1a21e7cd..57fdff5e33f7 100644\n--- a/ydb/core/persqueue/purecalc/purecalc.h\n+++ b/ydb/core/persqueue/purecalc/purecalc.h\n@@ -7,17 +7,12 @@ namespace NYdb::NTopic::NPurecalc {\n using namespace NYql::NPureCalc;\n \n struct TMessage {\n-    TMessage(const TString& data)\n-        : Data(data) {\n-    }\n-\n-    TMessage& WithOffset(ui64 offset) {\n-        Offset = offset;\n-        return *this;\n-    }\n-\n-    const TString& Data;\n+    TString Data;\n+    TString MessageGroupId;\n     ui64 Offset = 0;\n+    ui32 Partition = 0;\n+    TString ProducerId;\n+    ui64 SeqNo = 0;\n };\n \n class TMessageInputSpec: public TInputSpecBase {\ndiff --git a/ydb/core/tx/replication/service/base_table_writer.cpp b/ydb/core/tx/replication/service/base_table_writer.cpp\nindex 7c6c57dfc6e4..b2bcd0ef5a5a 100644\n--- a/ydb/core/tx/replication/service/base_table_writer.cpp\n+++ b/ydb/core/tx/replication/service/base_table_writer.cpp\n@@ -433,7 +433,10 @@ class TLocalTableWriter\n         TVector<NChangeExchange::TEvChangeExchange::TEvEnqueueRecords::TRecordInfo> records(::Reserve(ev->Get()->Records.size()));\n         TSet<TRowVersion> versionsWithoutTxId;\n \n-        for (auto& [offset, data, _] : ev->Get()->Records) {\n+        for (auto& r : ev->Get()->Records) {\n+            auto offset = r.Offset;\n+            auto& data = r.Data;\n+\n             auto record = Parser->Parse(ev->Get()->Source, offset, std::move(data));\n \n             if (Mode == EWriteMode::Consistent) {\ndiff --git a/ydb/core/tx/replication/service/common_ut.h b/ydb/core/tx/replication/service/common_ut.h\nnew file mode 100644\nindex 000000000000..6d833760f62d\n--- /dev/null\n+++ b/ydb/core/tx/replication/service/common_ut.h\n@@ -0,0 +1,13 @@\n+#pragma once\n+\n+#include \"worker.h\"\n+\n+namespace NKikimr::NReplication::NService {\n+\n+struct TRecord: public TEvWorker::TEvData::TRecord {\n+    explicit TRecord(ui64 offset, const TString& data)\n+        : TEvWorker::TEvData::TRecord(offset, data, TInstant::Zero(), \"MessageGroupId\", \"ProducerId\", 42)\n+    {}\n+};\n+\n+}\ndiff --git a/ydb/core/tx/replication/service/table_writer_ut.cpp b/ydb/core/tx/replication/service/table_writer_ut.cpp\nindex ffac955bbeac..362972f73852 100644\n--- a/ydb/core/tx/replication/service/table_writer_ut.cpp\n+++ b/ydb/core/tx/replication/service/table_writer_ut.cpp\n@@ -1,6 +1,6 @@\n #include \"service.h\"\n #include \"table_writer.h\"\n-#include \"worker.h\"\n+#include \"common_ut.h\"\n \n #include <ydb/core/tx/datashard/ut_common/datashard_ut_common.h>\n #include <ydb/core/tx/replication/ut_helpers/test_env.h>\n@@ -16,7 +16,6 @@ namespace NKikimr::NReplication::NService {\n \n Y_UNIT_TEST_SUITE(LocalTableWriter) {\n     using namespace NTestHelpers;\n-    using TRecord = TEvWorker::TEvData::TRecord;\n \n     Y_UNIT_TEST(WriteTable) {\n         TEnv env;\n@@ -35,7 +34,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {\n         auto writer = env.GetRuntime().Register(CreateLocalTableWriter(env.GetPathId(\"/Root/Table\")));\n         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());\n \n-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(1, R\"({\"key\":[1], \"update\":{\"value\":\"10\"}})\"),\n             TRecord(2, R\"({\"key\":[2], \"update\":{\"value\":\"20\"}})\"),\n             TRecord(3, R\"({\"key\":[3], \"update\":{\"value\":\"30\"}})\"),\n@@ -92,7 +91,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {\n         auto writer = env.GetRuntime().Register(CreateLocalTableWriter(env.GetPathId(\"/Root/Table\")));\n         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());\n \n-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(1, R\"({\"key\":[1], \"update\":{\"int32_value\":-100500}})\"),\n             TRecord(2, R\"({\"key\":[2], \"update\":{\"uint32_value\":100500}})\"),\n             TRecord(3, R\"({\"key\":[3], \"update\":{\"int64_value\":-200500}})\"),\n@@ -143,7 +142,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {\n         auto writer = env.GetRuntime().Register(CreateLocalTableWriter(env.GetPathId(\"/Root/Table\")));\n         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());\n \n-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(1, R\"({\"key\":[\"1.0\"], \"update\":{\"value\":\"155555555555555.321\"}})\"),\n             TRecord(2, R\"({\"key\":[\"2.0\"], \"update\":{\"value\":\"255555555555555.321\"}})\"),\n             TRecord(3, R\"({\"key\":[\"3.0\"], \"update\":{\"value\":\"355555555555555.321\"}})\"),\n@@ -184,7 +183,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {\n         ui64 order = 1;\n \n         {\n-            auto ev = env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+            auto ev = env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0,\"TestSource\", {\n                 TRecord(order++, R\"({\"key\":[1], \"update\":{\"value\":\"10\"}, \"ts\":[1,0]})\"),\n                 TRecord(order++, R\"({\"key\":[2], \"update\":{\"value\":\"20\"}, \"ts\":[2,0]})\"),\n                 TRecord(order++, R\"({\"key\":[3], \"update\":{\"value\":\"30\"}, \"ts\":[3,0]})\"),\n@@ -203,14 +202,14 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {\n             }));\n         }\n         {\n-            auto ev = env.Send<TEvService::TEvHeartbeat>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+            auto ev = env.Send<TEvService::TEvHeartbeat>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n                 TRecord(order++, R\"({\"resolved\":[10,0]})\"),\n             }));\n             UNIT_ASSERT_VALUES_EQUAL(TRowVersion::FromProto(ev->Get()->Record.GetVersion()), TRowVersion(10, 0));\n             env.GetRuntime().GrabEdgeEvent<TEvWorker::TEvPoll>(env.GetSender());\n         }\n \n-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(order++, R\"({\"key\":[1], \"update\":{\"value\":\"10\"}, \"ts\":[11,0]})\"),\n             TRecord(order++, R\"({\"key\":[2], \"update\":{\"value\":\"20\"}, \"ts\":[12,0]})\"),\n             TRecord(order++, R\"({\"key\":[1], \"update\":{\"value\":\"10\"}, \"ts\":[21,0]})\"),\n@@ -222,12 +221,12 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {\n             {TRowVersion(30, 0), 3},\n         }));\n \n-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(order++, R\"({\"key\":[1], \"update\":{\"value\":\"10\"}, \"ts\":[13,0]})\"),\n             TRecord(order++, R\"({\"key\":[2], \"update\":{\"value\":\"20\"}, \"ts\":[23,0]})\"),\n         }));\n \n-        env.Send<TEvService::TEvHeartbeat>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvService::TEvHeartbeat>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(order++, R\"({\"resolved\":[30,0]})\"),\n         }));\n         env.GetRuntime().GrabEdgeEvent<TEvWorker::TEvPoll>(env.GetSender());\n@@ -294,7 +293,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {\n         auto worker = env.GetRuntime().Register(new TMockWorker(writer, env.GetSender()));\n \n         env.Send<TEvWorker::TEvHandshake>(worker, new TEvWorker::TEvHandshake());\n-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(1, R\"({\"key\":[1], \"update\":{\"value\":\"10\"}, \"ts\":[1,0]})\"),\n             TRecord(2, R\"({\"key\":[2], \"update\":{\"value\":\"20\"}, \"ts\":[11,0]})\"),\n         }));\n@@ -377,7 +376,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {\n         auto worker = env.GetRuntime().Register(new TMockWorker(writer, env.GetSender()));\n \n         env.Send<TEvWorker::TEvHandshake>(worker, new TEvWorker::TEvHandshake());\n-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(1, R\"({\"key\":[1], \"update\":{\"value\":\"10\"}, \"ts\":[1,0]})\"),\n             TRecord(2, R\"({\"resolved\":[10,0]})\"),\n         }));\n@@ -407,14 +406,14 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {\n         auto writer = env.GetRuntime().Register(CreateLocalTableWriter(env.GetPathId(\"/Root/Table\"), EWriteMode::Consistent));\n         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());\n \n-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(1, R\"({\"key\":[1], \"update\":{\"value\":\"10\"}, \"ts\":[1,0]})\"),\n         }));\n         env.Send<TEvWorker::TEvPoll>(writer, MakeTxIdResult({\n             {TRowVersion(10, 0), 1},\n         }));\n \n-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(2, R\"({\"key\":[3], \"update\":{\"value\":\"30\"}, \"ts\":[11,0]})\"),\n             TRecord(3, R\"({\"key\":[2], \"update\":{\"value\":\"20\"}, \"ts\":[2,0]})\"),\n             TRecord(4, R\"({\"resolved\":[20,0]})\"),\ndiff --git a/ydb/core/tx/replication/service/topic_reader.cpp b/ydb/core/tx/replication/service/topic_reader.cpp\nindex 594c1033c617..0e14f9324d5d 100644\n--- a/ydb/core/tx/replication/service/topic_reader.cpp\n+++ b/ydb/core/tx/replication/service/topic_reader.cpp\n@@ -58,10 +58,10 @@ class TRemoteTopicReader: public TActor<TRemoteTopicReader> {\n \n         for (auto& msg : result.Messages) {\n             Y_ABORT_UNLESS(msg.GetCodec() == NYdb::NTopic::ECodec::RAW);\n-            records.emplace_back(msg.GetOffset(), std::move(msg.GetData()), msg.GetCreateTime());\n+            records.emplace_back(msg.GetOffset(), std::move(msg.GetData()), msg.GetCreateTime(), std::move(msg.GetMessageGroupId()), std::move(msg.GetProducerId()), msg.GetSeqNo());\n         }\n \n-        Send(Worker, new TEvWorker::TEvData(ToString(result.PartitionId), std::move(records)));\n+        Send(Worker, new TEvWorker::TEvData(result.PartitionId, ToString(result.PartitionId), std::move(records)));\n     }\n \n     void Handle(TEvYdbProxy::TEvTopicEndPartition::TPtr& ev) {\ndiff --git a/ydb/core/tx/replication/service/transfer_writer.cpp b/ydb/core/tx/replication/service/transfer_writer.cpp\nindex bb2b193e4fb7..c6c97c42a494 100644\n--- a/ydb/core/tx/replication/service/transfer_writer.cpp\n+++ b/ydb/core/tx/replication/service/transfer_writer.cpp\n@@ -551,7 +551,7 @@ class TTransferWriter\n         }\n \n         if (PendingRecords) {\n-            ProcessData(*PendingRecords);\n+            ProcessData(PendingPartitionId, *PendingRecords);\n             PendingRecords.reset();\n         }\n     }\n@@ -584,15 +584,16 @@ class TTransferWriter\n \n     void HoldHandle(TEvWorker::TEvData::TPtr& ev) {\n         Y_ABORT_UNLESS(!PendingRecords);\n+        PendingPartitionId = ev->Get()->PartitionId;\n         PendingRecords = std::move(ev->Get()->Records);\n     }\n \n     void Handle(TEvWorker::TEvData::TPtr& ev) {\n         LOG_D(\"Handle TEvData \" << ev->Get()->ToString());\n-        ProcessData(ev->Get()->Records);\n+        ProcessData(ev->Get()->PartitionId, ev->Get()->Records);\n     }\n \n-    void ProcessData(const TVector<TEvWorker::TEvData::TRecord>& records) {\n+    void ProcessData(const ui32 partitionId, const TVector<TEvWorker::TEvData::TRecord>& records) {\n         if (!records) {\n             Send(Worker, new TEvWorker::TEvGone(TEvWorker::TEvGone::DONE));\n             return;\n@@ -601,17 +602,29 @@ class TTransferWriter\n         TableState->EnshureDataBatch();\n \n         for (auto& message : records) {\n-            NYdb::NTopic::NPurecalc::TMessage input(message.Data);\n-            input.WithOffset(message.Offset);\n-\n-            auto result = ProgramHolder->GetProgram()->Apply(NYql::NPureCalc::StreamFromVector(TVector{input}));\n-            while (auto* m = result->Fetch()) {\n-                TableState->AddData(m->Data);\n+            NYdb::NTopic::NPurecalc::TMessage input;\n+            input.Data = std::move(message.Data);\n+            input.MessageGroupId = std::move(message.MessageGroupId);\n+            input.Partition = partitionId;\n+            input.ProducerId = std::move(message.ProducerId);\n+            input.Offset = message.Offset;\n+            input.SeqNo = message.SeqNo;\n+\n+            try {\n+                auto result = ProgramHolder->GetProgram()->Apply(NYql::NPureCalc::StreamFromVector(TVector{input}));\n+                while (auto* m = result->Fetch()) {\n+                    TableState->AddData(m->Data);\n+                }\n+            } catch (const yexception& e) {\n+                ProcessingError = TStringBuilder() << \"Error transform message: '\" << message.Data << \"': \" << e.what();\n+                break;\n             }\n         }\n \n         if (TableState->Flush()) {\n             Become(&TThis::StateWrite);\n+        } else if (ProcessingError) {\n+            LogCritAndLeave(*ProcessingError);\n         }\n     }\n \n@@ -636,6 +649,10 @@ class TTransferWriter\n             return LogCritAndLeave(error);\n         }\n \n+        if (ProcessingError) {\n+            return LogCritAndLeave(*ProcessingError);\n+        }\n+\n         Send(Worker, new TEvWorker::TEvPoll());\n         return StartWork();\n     }\n@@ -709,8 +726,10 @@ class TTransferWriter\n     TProgramHolder::TPtr ProgramHolder;\n \n     mutable TMaybe<TString> LogPrefix;\n+    mutable TMaybe<TString> ProcessingError;\n \n     std::optional<TActorId> PendingWorker;\n+    ui32 PendingPartitionId = 0;\n     std::optional<TVector<TEvWorker::TEvData::TRecord>> PendingRecords;\n \n     ui32 Attempt = 0;\ndiff --git a/ydb/core/tx/replication/service/transfer_writer_ut.cpp b/ydb/core/tx/replication/service/transfer_writer_ut.cpp\nindex d617bdc3d03a..008518195241 100644\n--- a/ydb/core/tx/replication/service/transfer_writer_ut.cpp\n+++ b/ydb/core/tx/replication/service/transfer_writer_ut.cpp\n@@ -1,6 +1,6 @@\n #include \"service.h\"\n #include \"transfer_writer.h\"\n-#include \"worker.h\"\n+#include \"common_ut.h\"\n \n #include <ydb/core/fq/libs/row_dispatcher/purecalc_compilation/compile_service.h>\n #include <ydb/core/tx/datashard/ut_common/datashard_ut_common.h>\n@@ -17,7 +17,6 @@ namespace NKikimr::NReplication::NService {\n \n Y_UNIT_TEST_SUITE(TransferWriter) {\n     using namespace NTestHelpers;\n-    using TRecord = TEvWorker::TEvData::TRecord;\n \n     Y_UNIT_TEST(Write_ColumnTable) {\n         TEnv env;\n@@ -51,7 +50,7 @@ Y_UNIT_TEST_SUITE(TransferWriter) {\n         auto writer = env.GetRuntime().Register(CreateTransferWriter(lambda, tablePathId, compiler));\n         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());\n \n-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(\"TestSource\", {\n+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, \"TestSource\", {\n             TRecord(1, R\"({\"key\":[1], \"update\":{\"value\":\"10\"}})\"),\n             TRecord(2, R\"({\"key\":[2], \"update\":{\"value\":\"20\"}})\"),\n             TRecord(3, R\"({\"key\":[3], \"update\":{\"value\":\"30\"}})\"),\ndiff --git a/ydb/core/tx/replication/service/worker.cpp b/ydb/core/tx/replication/service/worker.cpp\nindex 66ff8d1f838a..a156b748f615 100644\n--- a/ydb/core/tx/replication/service/worker.cpp\n+++ b/ydb/core/tx/replication/service/worker.cpp\n@@ -13,28 +13,36 @@\n \n namespace NKikimr::NReplication::NService {\n \n-TEvWorker::TEvData::TRecord::TRecord(ui64 offset, const TString& data, TInstant createTime)\n+TEvWorker::TEvData::TRecord::TRecord(ui64 offset, const TString& data, TInstant createTime, const TString& messageGroupId, const TString& producerId, ui64 seqNo)\n     : Offset(offset)\n     , Data(data)\n     , CreateTime(createTime)\n+    , MessageGroupId(messageGroupId)\n+    , ProducerId(producerId)\n+    , SeqNo(seqNo)\n {\n }\n \n-TEvWorker::TEvData::TRecord::TRecord(ui64 offset, TString&& data, TInstant createTime)\n+TEvWorker::TEvData::TRecord::TRecord(ui64 offset, TString&& data, TInstant createTime, TString&& messageGroupId, TString&& producerId, ui64 seqNo)\n     : Offset(offset)\n     , Data(std::move(data))\n     , CreateTime(createTime)\n+    , MessageGroupId(std::move(messageGroupId))\n+    , ProducerId(std::move(producerId))\n+    , SeqNo(seqNo)\n {\n }\n \n-TEvWorker::TEvData::TEvData(const TString& source, const TVector<TRecord>& records)\n-    : Source(source)\n+TEvWorker::TEvData::TEvData(ui32 partitionId, const TString& source, const TVector<TRecord>& records)\n+    : PartitionId(partitionId)\n+    , Source(source)\n     , Records(records)\n {\n }\n \n-TEvWorker::TEvData::TEvData(const TString& source, TVector<TRecord>&& records)\n-    : Source(source)\n+TEvWorker::TEvData::TEvData(ui32 partitionId, const TString& source, TVector<TRecord>&& records)\n+    : PartitionId(partitionId)\n+    , Source(source)\n     , Records(std::move(records))\n {\n }\n@@ -160,7 +168,7 @@ class TWorker: public TActorBootstrapped<TWorker> {\n \n             Writer.Registered();\n             if (InFlightData) {\n-                Send(Writer, new TEvWorker::TEvData(InFlightData->Source, InFlightData->Records));\n+                Send(Writer, new TEvWorker::TEvData(InFlightData->PartitionId, InFlightData->Source, InFlightData->Records));\n             }\n         } else {\n             LOG_W(\"Handshake from unknown actor\"\n@@ -205,7 +213,7 @@ class TWorker: public TActorBootstrapped<TWorker> {\n         }\n \n         Y_ABORT_UNLESS(!InFlightData);\n-        InFlightData = MakeHolder<TEvWorker::TEvData>(ev->Get()->Source, ev->Get()->Records);\n+        InFlightData = MakeHolder<TEvWorker::TEvData>(ev->Get()->PartitionId, ev->Get()->Source, ev->Get()->Records);\n \n         if (Writer) {\n             Send(ev->Forward(Writer));\ndiff --git a/ydb/core/tx/replication/service/worker.h b/ydb/core/tx/replication/service/worker.h\nindex 6246eb10994a..e03f3b24dc19 100644\n--- a/ydb/core/tx/replication/service/worker.h\n+++ b/ydb/core/tx/replication/service/worker.h\n@@ -34,17 +34,21 @@ struct TEvWorker {\n             ui64 Offset;\n             TString Data;\n             TInstant CreateTime;\n+            TString MessageGroupId;\n+            TString ProducerId;\n+            ui64 SeqNo;\n \n-            explicit TRecord(ui64 offset, const TString& data, TInstant createTime = TInstant::Zero());\n-            explicit TRecord(ui64 offset, TString&& data, TInstant createTime = TInstant::Zero());\n+            explicit TRecord(ui64 offset, const TString& data, TInstant createTime, const TString& messageGroupId, const TString& producerId, ui64 seqNo);\n+            explicit TRecord(ui64 offset, TString&& data, TInstant createTime, TString&& messageGroupId, TString&& producerId, ui64 seqNo);\n             void Out(IOutputStream& out) const;\n         };\n \n+        ui32 PartitionId;\n         TString Source;\n         TVector<TRecord> Records;\n \n-        explicit TEvData(const TString& source, const TVector<TRecord>& records);\n-        explicit TEvData(const TString& source, TVector<TRecord>&& records);\n+        explicit TEvData(ui32 partitionId, const TString& source, const TVector<TRecord>& records);\n+        explicit TEvData(ui32 partitionId, const TString& source, TVector<TRecord>&& records);\n         TString ToString() const override;\n     };\n \ndiff --git a/ydb/core/tx/replication/ydb_proxy/ydb_proxy.h b/ydb/core/tx/replication/ydb_proxy/ydb_proxy.h\nindex 6a5801003c24..ec0d8bca62a2 100644\n--- a/ydb/core/tx/replication/ydb_proxy/ydb_proxy.h\n+++ b/ydb/core/tx/replication/ydb_proxy/ydb_proxy.h\n@@ -167,6 +167,9 @@ struct TEvYdbProxy {\n                 , Data(msg.GetData())\n                 , CreateTime(msg.GetCreateTime())\n                 , Codec(codec)\n+                , MessageGroupId(msg.GetMessageGroupId())\n+                , ProducerId(msg.GetProducerId())\n+                , SeqNo(msg.GetSeqNo())\n             {\n             }\n \n@@ -186,6 +189,9 @@ struct TEvYdbProxy {\n             TString& GetData() { return Data; }\n             TInstant GetCreateTime() const { return CreateTime; }\n             ECodec GetCodec() const { return Codec; }\n+            TString& GetMessageGroupId() { return MessageGroupId; }\n+            TString& GetProducerId() { return ProducerId; }\n+            ui64 GetSeqNo() { return SeqNo; }\n             void Out(IOutputStream& out) const;\n \n         private:\n@@ -193,6 +199,9 @@ struct TEvYdbProxy {\n             TString Data;\n             TInstant CreateTime;\n             ECodec Codec;\n+            TString MessageGroupId;\n+            TString ProducerId;\n+            ui64 SeqNo;\n         };\n \n         explicit TReadTopicResult(const NYdb::NTopic::TReadSessionEvent::TDataReceivedEvent& event) {\n",
  "test_patch": "diff --git a/ydb/tests/functional/transfer/main.cpp b/ydb/tests/functional/transfer/main.cpp\nindex 9ea3b36bb79d..6a96711a1acd 100644\n--- a/ydb/tests/functional/transfer/main.cpp\n+++ b/ydb/tests/functional/transfer/main.cpp\n@@ -42,6 +42,11 @@ bool Checker<bool>::Get(const ::Ydb::Value& value) {\n     return value.bool_value();\n }\n \n+template<>\n+ui32 Checker<ui32>::Get(const ::Ydb::Value& value) {\n+    return value.uint32_value();\n+}\n+\n template<>\n ui64 Checker<ui64>::Get(const ::Ydb::Value& value) {\n     return value.uint64_value();\n@@ -70,10 +75,48 @@ std::pair<TString, std::shared_ptr<IChecker>> _C(TString&& name, T&& expected) {\n     };\n }\n \n+struct TMessage {\n+    TString Message;\n+    std::optional<ui32> Partition = std::nullopt;\n+    std::optional<TString> ProducerId = std::nullopt;\n+    std::optional<TString> MessageGroupId = std::nullopt;\n+    std::optional<ui64> SeqNo = std::nullopt;\n+};\n+\n+TMessage _withSeqNo(ui64 seqNo) {\n+    return {\n+        .Message = TStringBuilder() << \"Message-\" << seqNo,\n+        .Partition = 0,\n+        .ProducerId = std::nullopt,\n+        .MessageGroupId = std::nullopt,\n+        .SeqNo = seqNo\n+    };\n+}\n+\n+TMessage _withProducerId(const TString& producerId) {\n+    return {\n+        .Message = TStringBuilder() << \"Message-\" << producerId,\n+        .Partition = 0,\n+        .ProducerId = producerId,\n+        .MessageGroupId = std::nullopt,\n+        .SeqNo = std::nullopt\n+    };\n+}\n+\n+TMessage _withMessageGroupId(const TString& messageGroupId) {\n+    return {\n+        .Message = TStringBuilder() << \"Message-\" << messageGroupId,\n+        .Partition = 0,\n+        .ProducerId = messageGroupId,\n+        .MessageGroupId = messageGroupId,\n+        .SeqNo = std::nullopt\n+    };\n+}\n+\n struct TConfig {\n     const char* TableDDL;\n     const char* Lambda;\n-    const char* Message;\n+    const TVector<TMessage> Messages;\n     TVector<std::pair<TString, std::shared_ptr<IChecker>>> Expectations;\n };\n \n@@ -106,7 +149,10 @@ struct MainTestCase {\n \n         {\n             auto res = session.ExecuteQuery(Sprintf(R\"(\n-                CREATE TOPIC `%s`;\n+                CREATE TOPIC `%s`\n+                WITH (\n+                    min_active_partitions = 10\n+                );\n             )\", TopicName.data()), TTxControl::NoTx()).GetValueSync();\n             UNIT_ASSERT_C(res.IsSuccess(), res.GetIssues().ToString());\n         }\n@@ -126,20 +172,31 @@ struct MainTestCase {\n         }\n \n         {\n-            TWriteSessionSettings writeSettings;\n-            writeSettings.Path(TopicName);\n-            writeSettings.DeduplicationEnabled(false);\n-            auto writeSession = topicClient.CreateSimpleBlockingWriteSession(writeSettings);\n+            for (const auto& m : Config.Messages) {\n+                TWriteSessionSettings writeSettings;\n+                writeSettings.Path(TopicName);\n+                writeSettings.DeduplicationEnabled(m.SeqNo);\n+                if (m.Partition) {\n+                    writeSettings.PartitionId(m.Partition);\n+                }\n+                if (m.ProducerId) {\n+                    writeSettings.ProducerId(*m.ProducerId);\n+                }\n+                if (m.MessageGroupId) {\n+                    writeSettings.MessageGroupId(*m.MessageGroupId);\n+                }\n+                auto writeSession = topicClient.CreateSimpleBlockingWriteSession(writeSettings);\n \n-            UNIT_ASSERT(writeSession->Write(Config.Message));\n-            writeSession->Close(TDuration::Seconds(1));\n+                UNIT_ASSERT(writeSession->Write(m.Message, m.SeqNo));\n+                writeSession->Close(TDuration::Seconds(1));\n+            }\n         }\n \n         {\n             for (size_t attempt = 20; attempt--; ) {\n                 auto res = DoRead(session);\n                 Cerr << \"Attempt=\" << attempt << \" count=\" << res.first << Endl << Flush;\n-                if (res.first == 1) {\n+                if (res.first == Config.Messages.size()) {\n                     const Ydb::ResultSet& proto = res.second;\n                     for (size_t i = 0; i < Config.Expectations.size(); ++i) {\n                         auto& c = Config.Expectations[i];\n@@ -214,7 +271,7 @@ Y_UNIT_TEST_SUITE(Transfer)\n                 };\n             )\",\n \n-            .Message = \"Message-1\",\n+            .Messages = {{\"Message-1\"}},\n \n             .Expectations = {\n                 _C(\"Key\", ui64(0)),\n@@ -247,7 +304,7 @@ Y_UNIT_TEST_SUITE(Transfer)\n                 };\n             )\",\n \n-            .Message = \"Message-1\",\n+            .Messages = {{\"Message-1\"}},\n \n             .Expectations = {\n                 _C(\"Key\", ui64(0)),\n@@ -256,6 +313,51 @@ Y_UNIT_TEST_SUITE(Transfer)\n         }).Run();\n     }\n \n+    Y_UNIT_TEST(Main_ColumnTable_ComplexKey)\n+    {\n+        MainTestCase({\n+            .TableDDL = R\"(\n+                CREATE TABLE `%s` (\n+                    Key1 Uint64 NOT NULL,\n+                    Key3 Uint64 NOT NULL,\n+                    Value1 Utf8,\n+                    Key2 Uint64 NOT NULL,\n+                    Value2 Utf8,\n+                    Key4 Uint64 NOT NULL,\n+                    PRIMARY KEY (Key3, Key2, Key1, Key4)\n+                )  WITH (\n+                    STORE = COLUMN\n+                );\n+            )\",\n+\n+            .Lambda = R\"(\n+                $l = ($x) -> {\n+                    return [\n+                        <|\n+                            Key1:CAST(1 AS Uint64),\n+                            Key2:CAST(2 AS Uint64),\n+                            Value2:CAST(\"value-2\" AS Utf8),\n+                            Key4:CAST(4 AS Uint64),\n+                            Key3:CAST(3 AS Uint64),\n+                            Value1:CAST(\"value-1\" AS Utf8),\n+                        |>\n+                    ];\n+                };\n+            )\",\n+\n+            .Messages = {{\"Message-1\"}},\n+\n+            .Expectations = {\n+                _C(\"Key1\", ui64(1)),\n+                _C(\"Key2\", ui64(2)),\n+                _C(\"Key3\", ui64(3)),\n+                _C(\"Key4\", ui64(4)),\n+                _C(\"Value1\", TString(\"value-1\")),\n+                _C(\"Value2\", TString(\"value-2\")),\n+            }\n+        }).Run();\n+    }\n+\n     Y_UNIT_TEST(Main_ColumnTable_JsonMessage)\n     {\n         MainTestCase({\n@@ -286,12 +388,12 @@ Y_UNIT_TEST_SUITE(Transfer)\n                 };\n             )\",\n \n-            .Message = R\"({\n+            .Messages = {{R\"({\n                 \"id\": 1,\n                 \"first_name\": \"Vasya\",\n                 \"last_name\": \"Pupkin\",\n                 \"salary\": \"123\"\n-            })\",\n+            })\"}},\n \n             .Expectations = {\n                 _C(\"Id\", ui64(1)),\n@@ -326,7 +428,7 @@ Y_UNIT_TEST_SUITE(Transfer)\n                 };\n             )\",\n \n-            .Message = \"Message-1\",\n+            .Messages = {{\"Message-1\"}},\n \n             .Expectations = {\n                 _C(\"Key\", ui64(0)),\n@@ -359,7 +461,7 @@ Y_UNIT_TEST_SUITE(Transfer)\n                 };\n             )\",\n \n-            .Message = \"2025-02-21\",\n+            .Messages = {{\"2025-02-21\"}},\n \n             .Expectations = {\n                 _C(\"Key\", ui64(0)),\n@@ -392,7 +494,7 @@ Y_UNIT_TEST_SUITE(Transfer)\n                 };\n             )\",\n \n-            .Message = \"1.23\",\n+            .Messages = {{\"1.23\"}},\n \n             .Expectations = {\n                 _C(\"Key\", ui64(0)),\n@@ -425,7 +527,7 @@ Y_UNIT_TEST_SUITE(Transfer)\n                 };\n             )\",\n \n-            .Message = \"Message-1 long value 0 1234567890 1 1234567890 2 1234567890 3 1234567890 4 1234567890 5 1234567890 6 1234567890\",\n+            .Messages = {{\"Message-1 long value 0 1234567890 1 1234567890 2 1234567890 3 1234567890 4 1234567890 5 1234567890 6 1234567890\"}},\n \n             .Expectations = {\n                 _C(\"Key\", ui64(0)),\n@@ -434,5 +536,134 @@ Y_UNIT_TEST_SUITE(Transfer)\n         }).Run();\n     }\n \n+    Y_UNIT_TEST(Main_MessageField_Partition)\n+    {\n+        MainTestCase({\n+            .TableDDL = R\"(\n+                CREATE TABLE `%s` (\n+                    Partition Uint32 NOT NULL,\n+                    Message Utf8,\n+                    PRIMARY KEY (Partition)\n+                )  WITH (\n+                    STORE = COLUMN\n+                );\n+            )\",\n+\n+            .Lambda = R\"(\n+                $l = ($x) -> {\n+                    return [\n+                        <|\n+                            Partition:CAST($x._partition AS Uint32),\n+                            Message:CAST($x._data AS Utf8)\n+                        |>\n+                    ];\n+                };\n+            )\",\n+\n+            .Messages = {{\"Message-1\", 7}},\n+\n+            .Expectations = {\n+                _C(\"Partition\", ui32(7)),\n+                _C(\"Message\", TString(\"Message-1\")),\n+            }\n+        }).Run();\n+    }\n+\n+    Y_UNIT_TEST(Main_MessageField_SeqNo)\n+    {\n+        MainTestCase({\n+            .TableDDL = R\"(\n+                CREATE TABLE `%s` (\n+                    SeqNo Uint64 NOT NULL,\n+                    Message Utf8,\n+                    PRIMARY KEY (SeqNo)\n+                )  WITH (\n+                    STORE = COLUMN\n+                );\n+            )\",\n+\n+            .Lambda = R\"(\n+                $l = ($x) -> {\n+                    return [\n+                        <|\n+                            SeqNo:CAST($x._seq_no AS Uint32),\n+                            Message:CAST($x._data AS Utf8)\n+                        |>\n+                    ];\n+                };\n+            )\",\n+\n+            .Messages = {_withSeqNo(13)},\n+\n+            .Expectations = {\n+                _C(\"SeqNo\", ui64(13)),\n+            }\n+        }).Run();\n+    }\n+\n+    Y_UNIT_TEST(Main_MessageField_ProducerId)\n+    {\n+        MainTestCase({\n+            .TableDDL = R\"(\n+                CREATE TABLE `%s` (\n+                    Offset Uint64 NOT NULL,\n+                    ProducerId Utf8,\n+                    PRIMARY KEY (Offset)\n+                )  WITH (\n+                    STORE = COLUMN\n+                );\n+            )\",\n+\n+            .Lambda = R\"(\n+                $l = ($x) -> {\n+                    return [\n+                        <|\n+                            Offset:CAST($x._offset AS Uint64),\n+                            ProducerId:CAST($x._producer_id AS Utf8)\n+                        |>\n+                    ];\n+                };\n+            )\",\n+\n+            .Messages = {_withProducerId(\"Producer-13\")},\n+\n+            .Expectations = {\n+                _C(\"ProducerId\", TString(\"Producer-13\")),\n+            }\n+        }).Run();\n+    }\n+\n+    Y_UNIT_TEST(Main_MessageField_MessageGroupId)\n+    {\n+        MainTestCase({\n+            .TableDDL = R\"(\n+                CREATE TABLE `%s` (\n+                    Offset Uint64 NOT NULL,\n+                    MessageGroupId Utf8,\n+                    PRIMARY KEY (Offset)\n+                )  WITH (\n+                    STORE = COLUMN\n+                );\n+            )\",\n+\n+            .Lambda = R\"(\n+                $l = ($x) -> {\n+                    return [\n+                        <|\n+                            Offset:CAST($x._offset AS Uint64),\n+                            MessageGroupId:CAST($x._message_group_id AS Utf8)\n+                        |>\n+                    ];\n+                };\n+            )\",\n+\n+            .Messages = {_withMessageGroupId(\"MessageGroupId-13\")},\n+\n+            .Expectations = {\n+                _C(\"MessageGroupId\", TString(\"MessageGroupId-13\")),\n+            }\n+        }).Run();\n+    }\n+\n }\n \n",
  "problem_statement": "Add ARM arch support\nHi!\r\n\r\nAs far as I see the only officially supported hardware architecture for now is x86-64. \r\n\r\nWe have a case when we want to build cloud-native application, which will be deployed to AWS EC2 instances with AWS [Graviton](https://aws.amazon.com/ec2/graviton/) CPUs (just because they are cheaper for the same performance in our workload). Not only AWS has ARM-based CPU - e.g. Alibaba Cloud also has their own ARM-based CPUs.\r\n\r\nIs it possible to add ARM architecture support to your roadmap?\r\n\r\nThanks in advance!\n",
  "hints_text": "Looks like you ticket got many likes!\n@fomichev3000 Could you please provide somewhere in the documentation list of supported hardware architectures for YDB? Now it is not clear, which combinations of OS-Hardware Arch are supported by YDB. Also, if you have any specific restritiction on minimal instruction set (e.g. AVX) - please write this info too.\r\n\r\nThanks in advance!\nHardware requirements are now described here: https://ydb.tech/en/docs/cluster/system-requirements\nThanks for the documentation! However, the issue is about adding ARM support to YDB, not just updating the documentation:) So I suggest reopen the issue and close it only when ydb will work on ARM properly.\nOh, sorry, thank you!",
  "created_at": "2025-02-24T06:44:58Z",
  "modified_files": [
    "ydb/core/backup/impl/local_partition_reader.cpp",
    "ydb/core/persqueue/purecalc/purecalc.cpp",
    "ydb/core/persqueue/purecalc/purecalc.h",
    "ydb/core/tx/replication/service/base_table_writer.cpp",
    "b/ydb/core/tx/replication/service/common_ut.h",
    "ydb/core/tx/replication/service/table_writer_ut.cpp",
    "ydb/core/tx/replication/service/topic_reader.cpp",
    "ydb/core/tx/replication/service/transfer_writer.cpp",
    "ydb/core/tx/replication/service/transfer_writer_ut.cpp",
    "ydb/core/tx/replication/service/worker.cpp",
    "ydb/core/tx/replication/service/worker.h",
    "ydb/core/tx/replication/ydb_proxy/ydb_proxy.h"
  ],
  "modified_test_files": [
    "ydb/tests/functional/transfer/main.cpp"
  ]
}