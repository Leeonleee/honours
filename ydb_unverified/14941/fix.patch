diff --git a/ydb/core/backup/impl/local_partition_reader.cpp b/ydb/core/backup/impl/local_partition_reader.cpp
index b7a476693ac9..2a43bb8741e4 100644
--- a/ydb/core/backup/impl/local_partition_reader.cpp
+++ b/ydb/core/backup/impl/local_partition_reader.cpp
@@ -135,11 +135,11 @@ class TLocalPartitionReader
 
         for (auto& result : readResult.GetResult()) {
             gotOffset = std::max(gotOffset, result.GetOffset());
-            records.emplace_back(result.GetOffset(), GetDeserializedData(result.GetData()).GetData());
+            records.emplace_back(result.GetOffset(), GetDeserializedData(result.GetData()).GetData(), TInstant::MilliSeconds(result.GetCreateTimestampMS()), result.GetSourceId(), result.GetSourceId(), result.GetSeqNo());
         }
         SentOffset = gotOffset + 1;
 
-        Send(Worker, new TEvWorker::TEvData(ToString(Partition), std::move(records)));
+        Send(Worker, new TEvWorker::TEvData(Partition, ToString(Partition), std::move(records)));
     }
 
     void Leave(TEvWorker::TEvGone::EStatus status) {
diff --git a/ydb/core/persqueue/purecalc/purecalc.cpp b/ydb/core/persqueue/purecalc/purecalc.cpp
index 018483c9e488..be27c6d34f4c 100644
--- a/ydb/core/persqueue/purecalc/purecalc.cpp
+++ b/ydb/core/persqueue/purecalc/purecalc.cpp
@@ -13,14 +13,13 @@ using namespace NYql::NUdf;
 using namespace NKikimr::NMiniKQL;
 
 constexpr const char* DataFieldName = "_data";
+constexpr const char* MessageGroupIdFieldName = "_message_group_id";
 constexpr const char* OffsetFieldName = "_offset";
+constexpr const char* PartitionFieldName = "_partition";
+constexpr const char* ProducerIdFieldName = "_producer_id";
+constexpr const char* SeqNoFieldName = "_seq_no";
 
-constexpr const size_t FieldCount = 2; // Change it when change fields
-
-struct FieldPositions {
-    ui64 Data = 0;
-    ui64 Offset = 0;
-};
+constexpr const size_t FieldCount = 6; // Change it when change fields
 
 
 NYT::TNode CreateTypeNode(const TString& fieldType) {
@@ -41,7 +40,11 @@ void AddField(NYT::TNode& node, const TString& fieldName, const TString& fieldTy
 NYT::TNode CreateMessageScheme() {
     auto structMembers = NYT::TNode::CreateList();
     AddField(structMembers, DataFieldName, "String");
+    AddField(structMembers, MessageGroupIdFieldName, "String");
     AddField(structMembers, OffsetFieldName, "Uint64");
+    AddField(structMembers, PartitionFieldName, "Uint32");
+    AddField(structMembers, ProducerIdFieldName, "String");
+    AddField(structMembers, SeqNoFieldName, "Uint64");
 
     return NYT::TNode::CreateList()
         .Add("StructType")
@@ -57,32 +60,36 @@ struct TMessageWrapper {
         return NKikimr::NMiniKQL::MakeString(Message.Data);
     }
 
+    NYql::NUdf::TUnboxedValuePod GetMessageGroupId() const {
+        return NKikimr::NMiniKQL::MakeString(Message.MessageGroupId);
+    }
+
     NYql::NUdf::TUnboxedValuePod GetOffset() const {
         return NYql::NUdf::TUnboxedValuePod(Message.Offset);
     }
+
+    NYql::NUdf::TUnboxedValuePod GetPartition() const {
+        return NYql::NUdf::TUnboxedValuePod(Message.Partition);
+    }
+
+    NYql::NUdf::TUnboxedValuePod GetProducerId() const {
+        return NKikimr::NMiniKQL::MakeString(Message.ProducerId);
+    }
+
+    NYql::NUdf::TUnboxedValuePod GetSeqNo() const {
+        return NYql::NUdf::TUnboxedValuePod(Message.SeqNo);
+    }
 };
 
 class TInputConverter {
 protected:
     IWorker* Worker_;
     TPlainContainerCache Cache_;
-    FieldPositions Position;
 
 public:
     explicit TInputConverter(IWorker* worker)
         : Worker_(worker)
     {
-        const TStructType* structType = worker->GetInputType();
-        const ui64 count = structType->GetMembersCount();
- 
-        for (ui64 i = 0; i < count; ++i) { 
-            const auto name = structType->GetMemberName(i);
-            if (name == DataFieldName) {
-                Position.Data = i;
-            } else if (name == OffsetFieldName) {
-                Position.Offset = i;
-            }
-        }
     }
 
 public:
@@ -92,8 +99,13 @@ class TInputConverter {
         result = Cache_.NewArray(holderFactory, static_cast<ui32>(FieldCount), items);
 
         TMessageWrapper wrap {*message};
-        items[Position.Data] = wrap.GetData();
-        items[Position.Offset] = wrap.GetOffset();
+        // lex order by field name
+        items[0] = wrap.GetData();
+        items[1] = wrap.GetMessageGroupId();
+        items[2] = wrap.GetOffset();
+        items[3] = wrap.GetPartition();
+        items[4] = wrap.GetProducerId();
+        items[5] = wrap.GetSeqNo();
     }
 
     void ClearCache() {
diff --git a/ydb/core/persqueue/purecalc/purecalc.h b/ydb/core/persqueue/purecalc/purecalc.h
index 90fe1a21e7cd..57fdff5e33f7 100644
--- a/ydb/core/persqueue/purecalc/purecalc.h
+++ b/ydb/core/persqueue/purecalc/purecalc.h
@@ -7,17 +7,12 @@ namespace NYdb::NTopic::NPurecalc {
 using namespace NYql::NPureCalc;
 
 struct TMessage {
-    TMessage(const TString& data)
-        : Data(data) {
-    }
-
-    TMessage& WithOffset(ui64 offset) {
-        Offset = offset;
-        return *this;
-    }
-
-    const TString& Data;
+    TString Data;
+    TString MessageGroupId;
     ui64 Offset = 0;
+    ui32 Partition = 0;
+    TString ProducerId;
+    ui64 SeqNo = 0;
 };
 
 class TMessageInputSpec: public TInputSpecBase {
diff --git a/ydb/core/tx/replication/service/base_table_writer.cpp b/ydb/core/tx/replication/service/base_table_writer.cpp
index 7c6c57dfc6e4..b2bcd0ef5a5a 100644
--- a/ydb/core/tx/replication/service/base_table_writer.cpp
+++ b/ydb/core/tx/replication/service/base_table_writer.cpp
@@ -433,7 +433,10 @@ class TLocalTableWriter
         TVector<NChangeExchange::TEvChangeExchange::TEvEnqueueRecords::TRecordInfo> records(::Reserve(ev->Get()->Records.size()));
         TSet<TRowVersion> versionsWithoutTxId;
 
-        for (auto& [offset, data, _] : ev->Get()->Records) {
+        for (auto& r : ev->Get()->Records) {
+            auto offset = r.Offset;
+            auto& data = r.Data;
+
             auto record = Parser->Parse(ev->Get()->Source, offset, std::move(data));
 
             if (Mode == EWriteMode::Consistent) {
diff --git a/ydb/core/tx/replication/service/common_ut.h b/ydb/core/tx/replication/service/common_ut.h
new file mode 100644
index 000000000000..6d833760f62d
--- /dev/null
+++ b/ydb/core/tx/replication/service/common_ut.h
@@ -0,0 +1,13 @@
+#pragma once
+
+#include "worker.h"
+
+namespace NKikimr::NReplication::NService {
+
+struct TRecord: public TEvWorker::TEvData::TRecord {
+    explicit TRecord(ui64 offset, const TString& data)
+        : TEvWorker::TEvData::TRecord(offset, data, TInstant::Zero(), "MessageGroupId", "ProducerId", 42)
+    {}
+};
+
+}
diff --git a/ydb/core/tx/replication/service/table_writer_ut.cpp b/ydb/core/tx/replication/service/table_writer_ut.cpp
index ffac955bbeac..362972f73852 100644
--- a/ydb/core/tx/replication/service/table_writer_ut.cpp
+++ b/ydb/core/tx/replication/service/table_writer_ut.cpp
@@ -1,6 +1,6 @@
 #include "service.h"
 #include "table_writer.h"
-#include "worker.h"
+#include "common_ut.h"
 
 #include <ydb/core/tx/datashard/ut_common/datashard_ut_common.h>
 #include <ydb/core/tx/replication/ut_helpers/test_env.h>
@@ -16,7 +16,6 @@ namespace NKikimr::NReplication::NService {
 
 Y_UNIT_TEST_SUITE(LocalTableWriter) {
     using namespace NTestHelpers;
-    using TRecord = TEvWorker::TEvData::TRecord;
 
     Y_UNIT_TEST(WriteTable) {
         TEnv env;
@@ -35,7 +34,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {
         auto writer = env.GetRuntime().Register(CreateLocalTableWriter(env.GetPathId("/Root/Table")));
         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());
 
-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(1, R"({"key":[1], "update":{"value":"10"}})"),
             TRecord(2, R"({"key":[2], "update":{"value":"20"}})"),
             TRecord(3, R"({"key":[3], "update":{"value":"30"}})"),
@@ -92,7 +91,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {
         auto writer = env.GetRuntime().Register(CreateLocalTableWriter(env.GetPathId("/Root/Table")));
         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());
 
-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(1, R"({"key":[1], "update":{"int32_value":-100500}})"),
             TRecord(2, R"({"key":[2], "update":{"uint32_value":100500}})"),
             TRecord(3, R"({"key":[3], "update":{"int64_value":-200500}})"),
@@ -143,7 +142,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {
         auto writer = env.GetRuntime().Register(CreateLocalTableWriter(env.GetPathId("/Root/Table")));
         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());
 
-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(1, R"({"key":["1.0"], "update":{"value":"155555555555555.321"}})"),
             TRecord(2, R"({"key":["2.0"], "update":{"value":"255555555555555.321"}})"),
             TRecord(3, R"({"key":["3.0"], "update":{"value":"355555555555555.321"}})"),
@@ -184,7 +183,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {
         ui64 order = 1;
 
         {
-            auto ev = env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData("TestSource", {
+            auto ev = env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0,"TestSource", {
                 TRecord(order++, R"({"key":[1], "update":{"value":"10"}, "ts":[1,0]})"),
                 TRecord(order++, R"({"key":[2], "update":{"value":"20"}, "ts":[2,0]})"),
                 TRecord(order++, R"({"key":[3], "update":{"value":"30"}, "ts":[3,0]})"),
@@ -203,14 +202,14 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {
             }));
         }
         {
-            auto ev = env.Send<TEvService::TEvHeartbeat>(writer, new TEvWorker::TEvData("TestSource", {
+            auto ev = env.Send<TEvService::TEvHeartbeat>(writer, new TEvWorker::TEvData(0, "TestSource", {
                 TRecord(order++, R"({"resolved":[10,0]})"),
             }));
             UNIT_ASSERT_VALUES_EQUAL(TRowVersion::FromProto(ev->Get()->Record.GetVersion()), TRowVersion(10, 0));
             env.GetRuntime().GrabEdgeEvent<TEvWorker::TEvPoll>(env.GetSender());
         }
 
-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(order++, R"({"key":[1], "update":{"value":"10"}, "ts":[11,0]})"),
             TRecord(order++, R"({"key":[2], "update":{"value":"20"}, "ts":[12,0]})"),
             TRecord(order++, R"({"key":[1], "update":{"value":"10"}, "ts":[21,0]})"),
@@ -222,12 +221,12 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {
             {TRowVersion(30, 0), 3},
         }));
 
-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(order++, R"({"key":[1], "update":{"value":"10"}, "ts":[13,0]})"),
             TRecord(order++, R"({"key":[2], "update":{"value":"20"}, "ts":[23,0]})"),
         }));
 
-        env.Send<TEvService::TEvHeartbeat>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvService::TEvHeartbeat>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(order++, R"({"resolved":[30,0]})"),
         }));
         env.GetRuntime().GrabEdgeEvent<TEvWorker::TEvPoll>(env.GetSender());
@@ -294,7 +293,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {
         auto worker = env.GetRuntime().Register(new TMockWorker(writer, env.GetSender()));
 
         env.Send<TEvWorker::TEvHandshake>(worker, new TEvWorker::TEvHandshake());
-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(1, R"({"key":[1], "update":{"value":"10"}, "ts":[1,0]})"),
             TRecord(2, R"({"key":[2], "update":{"value":"20"}, "ts":[11,0]})"),
         }));
@@ -377,7 +376,7 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {
         auto worker = env.GetRuntime().Register(new TMockWorker(writer, env.GetSender()));
 
         env.Send<TEvWorker::TEvHandshake>(worker, new TEvWorker::TEvHandshake());
-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(1, R"({"key":[1], "update":{"value":"10"}, "ts":[1,0]})"),
             TRecord(2, R"({"resolved":[10,0]})"),
         }));
@@ -407,14 +406,14 @@ Y_UNIT_TEST_SUITE(LocalTableWriter) {
         auto writer = env.GetRuntime().Register(CreateLocalTableWriter(env.GetPathId("/Root/Table"), EWriteMode::Consistent));
         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());
 
-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(1, R"({"key":[1], "update":{"value":"10"}, "ts":[1,0]})"),
         }));
         env.Send<TEvWorker::TEvPoll>(writer, MakeTxIdResult({
             {TRowVersion(10, 0), 1},
         }));
 
-        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvService::TEvGetTxId>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(2, R"({"key":[3], "update":{"value":"30"}, "ts":[11,0]})"),
             TRecord(3, R"({"key":[2], "update":{"value":"20"}, "ts":[2,0]})"),
             TRecord(4, R"({"resolved":[20,0]})"),
diff --git a/ydb/core/tx/replication/service/topic_reader.cpp b/ydb/core/tx/replication/service/topic_reader.cpp
index 594c1033c617..0e14f9324d5d 100644
--- a/ydb/core/tx/replication/service/topic_reader.cpp
+++ b/ydb/core/tx/replication/service/topic_reader.cpp
@@ -58,10 +58,10 @@ class TRemoteTopicReader: public TActor<TRemoteTopicReader> {
 
         for (auto& msg : result.Messages) {
             Y_ABORT_UNLESS(msg.GetCodec() == NYdb::NTopic::ECodec::RAW);
-            records.emplace_back(msg.GetOffset(), std::move(msg.GetData()), msg.GetCreateTime());
+            records.emplace_back(msg.GetOffset(), std::move(msg.GetData()), msg.GetCreateTime(), std::move(msg.GetMessageGroupId()), std::move(msg.GetProducerId()), msg.GetSeqNo());
         }
 
-        Send(Worker, new TEvWorker::TEvData(ToString(result.PartitionId), std::move(records)));
+        Send(Worker, new TEvWorker::TEvData(result.PartitionId, ToString(result.PartitionId), std::move(records)));
     }
 
     void Handle(TEvYdbProxy::TEvTopicEndPartition::TPtr& ev) {
diff --git a/ydb/core/tx/replication/service/transfer_writer.cpp b/ydb/core/tx/replication/service/transfer_writer.cpp
index bb2b193e4fb7..c6c97c42a494 100644
--- a/ydb/core/tx/replication/service/transfer_writer.cpp
+++ b/ydb/core/tx/replication/service/transfer_writer.cpp
@@ -551,7 +551,7 @@ class TTransferWriter
         }
 
         if (PendingRecords) {
-            ProcessData(*PendingRecords);
+            ProcessData(PendingPartitionId, *PendingRecords);
             PendingRecords.reset();
         }
     }
@@ -584,15 +584,16 @@ class TTransferWriter
 
     void HoldHandle(TEvWorker::TEvData::TPtr& ev) {
         Y_ABORT_UNLESS(!PendingRecords);
+        PendingPartitionId = ev->Get()->PartitionId;
         PendingRecords = std::move(ev->Get()->Records);
     }
 
     void Handle(TEvWorker::TEvData::TPtr& ev) {
         LOG_D("Handle TEvData " << ev->Get()->ToString());
-        ProcessData(ev->Get()->Records);
+        ProcessData(ev->Get()->PartitionId, ev->Get()->Records);
     }
 
-    void ProcessData(const TVector<TEvWorker::TEvData::TRecord>& records) {
+    void ProcessData(const ui32 partitionId, const TVector<TEvWorker::TEvData::TRecord>& records) {
         if (!records) {
             Send(Worker, new TEvWorker::TEvGone(TEvWorker::TEvGone::DONE));
             return;
@@ -601,17 +602,29 @@ class TTransferWriter
         TableState->EnshureDataBatch();
 
         for (auto& message : records) {
-            NYdb::NTopic::NPurecalc::TMessage input(message.Data);
-            input.WithOffset(message.Offset);
-
-            auto result = ProgramHolder->GetProgram()->Apply(NYql::NPureCalc::StreamFromVector(TVector{input}));
-            while (auto* m = result->Fetch()) {
-                TableState->AddData(m->Data);
+            NYdb::NTopic::NPurecalc::TMessage input;
+            input.Data = std::move(message.Data);
+            input.MessageGroupId = std::move(message.MessageGroupId);
+            input.Partition = partitionId;
+            input.ProducerId = std::move(message.ProducerId);
+            input.Offset = message.Offset;
+            input.SeqNo = message.SeqNo;
+
+            try {
+                auto result = ProgramHolder->GetProgram()->Apply(NYql::NPureCalc::StreamFromVector(TVector{input}));
+                while (auto* m = result->Fetch()) {
+                    TableState->AddData(m->Data);
+                }
+            } catch (const yexception& e) {
+                ProcessingError = TStringBuilder() << "Error transform message: '" << message.Data << "': " << e.what();
+                break;
             }
         }
 
         if (TableState->Flush()) {
             Become(&TThis::StateWrite);
+        } else if (ProcessingError) {
+            LogCritAndLeave(*ProcessingError);
         }
     }
 
@@ -636,6 +649,10 @@ class TTransferWriter
             return LogCritAndLeave(error);
         }
 
+        if (ProcessingError) {
+            return LogCritAndLeave(*ProcessingError);
+        }
+
         Send(Worker, new TEvWorker::TEvPoll());
         return StartWork();
     }
@@ -709,8 +726,10 @@ class TTransferWriter
     TProgramHolder::TPtr ProgramHolder;
 
     mutable TMaybe<TString> LogPrefix;
+    mutable TMaybe<TString> ProcessingError;
 
     std::optional<TActorId> PendingWorker;
+    ui32 PendingPartitionId = 0;
     std::optional<TVector<TEvWorker::TEvData::TRecord>> PendingRecords;
 
     ui32 Attempt = 0;
diff --git a/ydb/core/tx/replication/service/transfer_writer_ut.cpp b/ydb/core/tx/replication/service/transfer_writer_ut.cpp
index d617bdc3d03a..008518195241 100644
--- a/ydb/core/tx/replication/service/transfer_writer_ut.cpp
+++ b/ydb/core/tx/replication/service/transfer_writer_ut.cpp
@@ -1,6 +1,6 @@
 #include "service.h"
 #include "transfer_writer.h"
-#include "worker.h"
+#include "common_ut.h"
 
 #include <ydb/core/fq/libs/row_dispatcher/purecalc_compilation/compile_service.h>
 #include <ydb/core/tx/datashard/ut_common/datashard_ut_common.h>
@@ -17,7 +17,6 @@ namespace NKikimr::NReplication::NService {
 
 Y_UNIT_TEST_SUITE(TransferWriter) {
     using namespace NTestHelpers;
-    using TRecord = TEvWorker::TEvData::TRecord;
 
     Y_UNIT_TEST(Write_ColumnTable) {
         TEnv env;
@@ -51,7 +50,7 @@ Y_UNIT_TEST_SUITE(TransferWriter) {
         auto writer = env.GetRuntime().Register(CreateTransferWriter(lambda, tablePathId, compiler));
         env.Send<TEvWorker::TEvHandshake>(writer, new TEvWorker::TEvHandshake());
 
-        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData("TestSource", {
+        env.Send<TEvWorker::TEvPoll>(writer, new TEvWorker::TEvData(0, "TestSource", {
             TRecord(1, R"({"key":[1], "update":{"value":"10"}})"),
             TRecord(2, R"({"key":[2], "update":{"value":"20"}})"),
             TRecord(3, R"({"key":[3], "update":{"value":"30"}})"),
diff --git a/ydb/core/tx/replication/service/worker.cpp b/ydb/core/tx/replication/service/worker.cpp
index 66ff8d1f838a..a156b748f615 100644
--- a/ydb/core/tx/replication/service/worker.cpp
+++ b/ydb/core/tx/replication/service/worker.cpp
@@ -13,28 +13,36 @@
 
 namespace NKikimr::NReplication::NService {
 
-TEvWorker::TEvData::TRecord::TRecord(ui64 offset, const TString& data, TInstant createTime)
+TEvWorker::TEvData::TRecord::TRecord(ui64 offset, const TString& data, TInstant createTime, const TString& messageGroupId, const TString& producerId, ui64 seqNo)
     : Offset(offset)
     , Data(data)
     , CreateTime(createTime)
+    , MessageGroupId(messageGroupId)
+    , ProducerId(producerId)
+    , SeqNo(seqNo)
 {
 }
 
-TEvWorker::TEvData::TRecord::TRecord(ui64 offset, TString&& data, TInstant createTime)
+TEvWorker::TEvData::TRecord::TRecord(ui64 offset, TString&& data, TInstant createTime, TString&& messageGroupId, TString&& producerId, ui64 seqNo)
     : Offset(offset)
     , Data(std::move(data))
     , CreateTime(createTime)
+    , MessageGroupId(std::move(messageGroupId))
+    , ProducerId(std::move(producerId))
+    , SeqNo(seqNo)
 {
 }
 
-TEvWorker::TEvData::TEvData(const TString& source, const TVector<TRecord>& records)
-    : Source(source)
+TEvWorker::TEvData::TEvData(ui32 partitionId, const TString& source, const TVector<TRecord>& records)
+    : PartitionId(partitionId)
+    , Source(source)
     , Records(records)
 {
 }
 
-TEvWorker::TEvData::TEvData(const TString& source, TVector<TRecord>&& records)
-    : Source(source)
+TEvWorker::TEvData::TEvData(ui32 partitionId, const TString& source, TVector<TRecord>&& records)
+    : PartitionId(partitionId)
+    , Source(source)
     , Records(std::move(records))
 {
 }
@@ -160,7 +168,7 @@ class TWorker: public TActorBootstrapped<TWorker> {
 
             Writer.Registered();
             if (InFlightData) {
-                Send(Writer, new TEvWorker::TEvData(InFlightData->Source, InFlightData->Records));
+                Send(Writer, new TEvWorker::TEvData(InFlightData->PartitionId, InFlightData->Source, InFlightData->Records));
             }
         } else {
             LOG_W("Handshake from unknown actor"
@@ -205,7 +213,7 @@ class TWorker: public TActorBootstrapped<TWorker> {
         }
 
         Y_ABORT_UNLESS(!InFlightData);
-        InFlightData = MakeHolder<TEvWorker::TEvData>(ev->Get()->Source, ev->Get()->Records);
+        InFlightData = MakeHolder<TEvWorker::TEvData>(ev->Get()->PartitionId, ev->Get()->Source, ev->Get()->Records);
 
         if (Writer) {
             Send(ev->Forward(Writer));
diff --git a/ydb/core/tx/replication/service/worker.h b/ydb/core/tx/replication/service/worker.h
index 6246eb10994a..e03f3b24dc19 100644
--- a/ydb/core/tx/replication/service/worker.h
+++ b/ydb/core/tx/replication/service/worker.h
@@ -34,17 +34,21 @@ struct TEvWorker {
             ui64 Offset;
             TString Data;
             TInstant CreateTime;
+            TString MessageGroupId;
+            TString ProducerId;
+            ui64 SeqNo;
 
-            explicit TRecord(ui64 offset, const TString& data, TInstant createTime = TInstant::Zero());
-            explicit TRecord(ui64 offset, TString&& data, TInstant createTime = TInstant::Zero());
+            explicit TRecord(ui64 offset, const TString& data, TInstant createTime, const TString& messageGroupId, const TString& producerId, ui64 seqNo);
+            explicit TRecord(ui64 offset, TString&& data, TInstant createTime, TString&& messageGroupId, TString&& producerId, ui64 seqNo);
             void Out(IOutputStream& out) const;
         };
 
+        ui32 PartitionId;
         TString Source;
         TVector<TRecord> Records;
 
-        explicit TEvData(const TString& source, const TVector<TRecord>& records);
-        explicit TEvData(const TString& source, TVector<TRecord>&& records);
+        explicit TEvData(ui32 partitionId, const TString& source, const TVector<TRecord>& records);
+        explicit TEvData(ui32 partitionId, const TString& source, TVector<TRecord>&& records);
         TString ToString() const override;
     };
 
diff --git a/ydb/core/tx/replication/ydb_proxy/ydb_proxy.h b/ydb/core/tx/replication/ydb_proxy/ydb_proxy.h
index 6a5801003c24..ec0d8bca62a2 100644
--- a/ydb/core/tx/replication/ydb_proxy/ydb_proxy.h
+++ b/ydb/core/tx/replication/ydb_proxy/ydb_proxy.h
@@ -167,6 +167,9 @@ struct TEvYdbProxy {
                 , Data(msg.GetData())
                 , CreateTime(msg.GetCreateTime())
                 , Codec(codec)
+                , MessageGroupId(msg.GetMessageGroupId())
+                , ProducerId(msg.GetProducerId())
+                , SeqNo(msg.GetSeqNo())
             {
             }
 
@@ -186,6 +189,9 @@ struct TEvYdbProxy {
             TString& GetData() { return Data; }
             TInstant GetCreateTime() const { return CreateTime; }
             ECodec GetCodec() const { return Codec; }
+            TString& GetMessageGroupId() { return MessageGroupId; }
+            TString& GetProducerId() { return ProducerId; }
+            ui64 GetSeqNo() { return SeqNo; }
             void Out(IOutputStream& out) const;
 
         private:
@@ -193,6 +199,9 @@ struct TEvYdbProxy {
             TString Data;
             TInstant CreateTime;
             ECodec Codec;
+            TString MessageGroupId;
+            TString ProducerId;
+            ui64 SeqNo;
         };
 
         explicit TReadTopicResult(const NYdb::NTopic::TReadSessionEvent::TDataReceivedEvent& event) {
