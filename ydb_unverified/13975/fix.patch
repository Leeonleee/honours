diff --git a/ydb/core/viewer/viewer_query.h b/ydb/core/viewer/viewer_query.h
index 4c1f1adf0d9c..cedf79690a6d 100644
--- a/ydb/core/viewer/viewer_query.h
+++ b/ydb/core/viewer/viewer_query.h
@@ -616,14 +616,11 @@ class TJsonQuery : public TViewerPipeClient {
         Send(ev->Sender, ack.Release());
     }
 
-    void HandleTimeout() {
-        TStringBuilder error;
-        error << "Timeout executing query";
+    void ReplyWithError(const TString& error) {
         if (SessionId) {
             auto event = std::make_unique<NKqp::TEvKqp::TEvCancelQueryRequest>();
             event->Record.MutableRequest()->SetSessionId(SessionId);
             Send(NKqp::MakeKqpProxyID(SelfId().NodeId()), event.release());
-            error << ", query was cancelled";
         }
         NJson::TJsonValue json;
         json["error"]["severity"] = NYql::TSeverityIds::S_ERROR;
@@ -634,6 +631,10 @@ class TJsonQuery : public TViewerPipeClient {
         ReplyWithJsonAndPassAway(json);
     }
 
+    void HandleTimeout() {
+        ReplyWithError("Timeout executing query");
+    }
+
 private:
     void RenderResultSetMulti(NJson::TJsonValue& jsonResult, const NYdb::TResultSet& resultSet, bool& hasColumns) {
         if (!hasColumns) {
@@ -676,140 +677,142 @@ class TJsonQuery : public TViewerPipeClient {
     }
 
     void MakeOkReply(NJson::TJsonValue& jsonResponse, NKikimrKqp::TEvQueryResponse& record) {
-        const auto& response = record.GetResponse();
+        try {
+            const auto& response = record.GetResponse();
+
+            if (response.YdbResultsSize() > 0) {
 
-        if (response.YdbResultsSize() > 0) {
-            try {
                 for (const auto& result : response.GetYdbResults()) {
                     ResultSets.emplace_back().emplace_back(result);
                 }
+
             }
-            catch (const std::exception& ex) {
-                NYdb::NIssue::TIssues issues;
-                issues.AddIssue(TStringBuilder() << "Convert error: " << ex.what());
-                MakeErrorReply(jsonResponse, NYdb::TStatus(NYdb::EStatus::BAD_REQUEST, std::move(issues)));
-                return;
-            }
-        }
 
-        if (ResultSets.size() > 0 && !Streaming) {
-            if (Schema == ESchemaType::Classic) {
-                NJson::TJsonValue& jsonResults = jsonResponse["result"];
-                jsonResults.SetType(NJson::JSON_ARRAY);
-                for (const auto& resultSets : ResultSets) {
-                    for (NYdb::TResultSet resultSet : resultSets) {
-                        const auto& columnsMeta = resultSet.GetColumnsMeta();
-                        NYdb::TResultSetParser rsParser(resultSet);
-                        while (rsParser.TryNextRow()) {
-                            NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});
-                            for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {
-                                const NYdb::TColumn& columnMeta = columnsMeta[columnNum];
-                                jsonRow[columnMeta.Name] = ColumnValueToJsonValue(rsParser.ColumnParser(columnNum));
+            if (ResultSets.size() > 0 && !Streaming) {
+                if (Schema == ESchemaType::Classic) {
+                    NJson::TJsonValue& jsonResults = jsonResponse["result"];
+                    jsonResults.SetType(NJson::JSON_ARRAY);
+                    for (const auto& resultSets : ResultSets) {
+                        for (NYdb::TResultSet resultSet : resultSets) {
+                            const auto& columnsMeta = resultSet.GetColumnsMeta();
+                            NYdb::TResultSetParser rsParser(resultSet);
+                            while (rsParser.TryNextRow()) {
+                                NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});
+                                for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {
+                                    const NYdb::TColumn& columnMeta = columnsMeta[columnNum];
+                                    jsonRow[columnMeta.Name] = ColumnValueToJsonValue(rsParser.ColumnParser(columnNum));
+                                }
                             }
                         }
                     }
                 }
-            }
 
-            if (Schema == ESchemaType::Modern) {
-                {
-                    NJson::TJsonValue& jsonColumns = jsonResponse["columns"];
-                    NYdb::TResultSet resultSet(ResultSets.front().front());
-                    const auto& columnsMeta = resultSet.GetColumnsMeta();
-                    jsonColumns.SetType(NJson::JSON_ARRAY);
-                    for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {
-                        NJson::TJsonValue& jsonColumn = jsonColumns.AppendValue({});
-                        const NYdb::TColumn& columnMeta = columnsMeta[columnNum];
-                        jsonColumn["name"] = columnMeta.Name;
-                        jsonColumn["type"] = columnMeta.Type.ToString();
+                if (Schema == ESchemaType::Modern) {
+                    {
+                        NJson::TJsonValue& jsonColumns = jsonResponse["columns"];
+                        NYdb::TResultSet resultSet(ResultSets.front().front());
+                        const auto& columnsMeta = resultSet.GetColumnsMeta();
+                        jsonColumns.SetType(NJson::JSON_ARRAY);
+                        for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {
+                            NJson::TJsonValue& jsonColumn = jsonColumns.AppendValue({});
+                            const NYdb::TColumn& columnMeta = columnsMeta[columnNum];
+                            jsonColumn["name"] = columnMeta.Name;
+                            jsonColumn["type"] = columnMeta.Type.ToString();
+                        }
                     }
-                }
 
-                NJson::TJsonValue& jsonResults = jsonResponse["result"];
-                jsonResults.SetType(NJson::JSON_ARRAY);
-                for (const auto& resultSets : ResultSets) {
-                    for (NYdb::TResultSet resultSet : resultSets) {
-                        const auto& columnsMeta = resultSet.GetColumnsMeta();
-                        NYdb::TResultSetParser rsParser(resultSet);
-                        while (rsParser.TryNextRow()) {
-                            NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});
-                            jsonRow.SetType(NJson::JSON_ARRAY);
-                            for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {
-                                NJson::TJsonValue& jsonColumn = jsonRow.AppendValue({});
-                                jsonColumn = ColumnValueToJsonValue(rsParser.ColumnParser(columnNum));
+                    NJson::TJsonValue& jsonResults = jsonResponse["result"];
+                    jsonResults.SetType(NJson::JSON_ARRAY);
+                    for (const auto& resultSets : ResultSets) {
+                        for (NYdb::TResultSet resultSet : resultSets) {
+                            const auto& columnsMeta = resultSet.GetColumnsMeta();
+                            NYdb::TResultSetParser rsParser(resultSet);
+                            while (rsParser.TryNextRow()) {
+                                NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});
+                                jsonRow.SetType(NJson::JSON_ARRAY);
+                                for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {
+                                    NJson::TJsonValue& jsonColumn = jsonRow.AppendValue({});
+                                    jsonColumn = ColumnValueToJsonValue(rsParser.ColumnParser(columnNum));
+                                }
                             }
                         }
                     }
                 }
-            }
 
-            if (Schema == ESchemaType::Multi) {
-                NJson::TJsonValue& jsonResults = jsonResponse["result"];
-                jsonResults.SetType(NJson::JSON_ARRAY);
-                for (const auto& resultSets : ResultSets) {
-                    NJson::TJsonValue& jsonResult = jsonResults.AppendValue({});
-                    bool hasColumns = false;
-                    for (NYdb::TResultSet resultSet : resultSets) {
-                        RenderResultSetMulti(jsonResult, resultSet, hasColumns);
+                if (Schema == ESchemaType::Multi) {
+                    NJson::TJsonValue& jsonResults = jsonResponse["result"];
+                    jsonResults.SetType(NJson::JSON_ARRAY);
+                    for (const auto& resultSets : ResultSets) {
+                        NJson::TJsonValue& jsonResult = jsonResults.AppendValue({});
+                        bool hasColumns = false;
+                        for (NYdb::TResultSet resultSet : resultSets) {
+                            RenderResultSetMulti(jsonResult, resultSet, hasColumns);
+                        }
                     }
                 }
-            }
 
-            if (Schema == ESchemaType::Ydb) {
-                NJson::TJsonValue& jsonResults = jsonResponse["result"];
-                jsonResults.SetType(NJson::JSON_ARRAY);
-                for (const auto& resultSets : ResultSets) {
-                    for (NYdb::TResultSet resultSet : resultSets) {
-                        const auto& columnsMeta = resultSet.GetColumnsMeta();
-                        NYdb::TResultSetParser rsParser(resultSet);
-                        while (rsParser.TryNextRow()) {
-                            NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});
-                            TString row = NYdb::FormatResultRowJson(rsParser, columnsMeta, IsBase64Encode ? NYdb::EBinaryStringEncoding::Base64 : NYdb::EBinaryStringEncoding::Unicode);
-                            NJson::ReadJsonTree(row, &jsonRow);
+                if (Schema == ESchemaType::Ydb) {
+                    NJson::TJsonValue& jsonResults = jsonResponse["result"];
+                    jsonResults.SetType(NJson::JSON_ARRAY);
+                    for (const auto& resultSets : ResultSets) {
+                        for (NYdb::TResultSet resultSet : resultSets) {
+                            const auto& columnsMeta = resultSet.GetColumnsMeta();
+                            NYdb::TResultSetParser rsParser(resultSet);
+                            while (rsParser.TryNextRow()) {
+                                NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});
+                                TString row = NYdb::FormatResultRowJson(rsParser, columnsMeta, IsBase64Encode ? NYdb::EBinaryStringEncoding::Base64 : NYdb::EBinaryStringEncoding::Unicode);
+                                NJson::ReadJsonTree(row, &jsonRow);
+                            }
                         }
                     }
                 }
-            }
 
-            if (Schema == ESchemaType::Ydb2) {
-                NJson::TJsonValue& jsonResults = jsonResponse["result"];
-                jsonResults.SetType(NJson::JSON_ARRAY);
-                for (const auto& resultSets : ResultSets) {
-                    NJson::TJsonValue& jsonResult = jsonResults.AppendValue({});
-                    bool hasColumns = false;
-                    for (NYdb::TResultSet resultSet : resultSets) {
-                        if (!hasColumns) {
-                            NJson::TJsonValue& jsonColumns = jsonResult["columns"];
-                            jsonColumns.SetType(NJson::JSON_ARRAY);
+                if (Schema == ESchemaType::Ydb2) {
+                    NJson::TJsonValue& jsonResults = jsonResponse["result"];
+                    jsonResults.SetType(NJson::JSON_ARRAY);
+                    for (const auto& resultSets : ResultSets) {
+                        NJson::TJsonValue& jsonResult = jsonResults.AppendValue({});
+                        bool hasColumns = false;
+                        for (NYdb::TResultSet resultSet : resultSets) {
+                            if (!hasColumns) {
+                                NJson::TJsonValue& jsonColumns = jsonResult["columns"];
+                                jsonColumns.SetType(NJson::JSON_ARRAY);
+                                const auto& columnsMeta = resultSet.GetColumnsMeta();
+                                for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {
+                                    NJson::TJsonValue& jsonColumn = jsonColumns.AppendValue({});
+                                    const NYdb::TColumn& columnMeta = columnsMeta[columnNum];
+                                    jsonColumn["name"] = columnMeta.Name;
+                                    jsonColumn["type"] = columnMeta.Type.ToString();
+                                }
+                                hasColumns = true;
+                            }
+                            NJson::TJsonValue& jsonRows = jsonResult["rows"];
                             const auto& columnsMeta = resultSet.GetColumnsMeta();
-                            for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {
-                                NJson::TJsonValue& jsonColumn = jsonColumns.AppendValue({});
-                                const NYdb::TColumn& columnMeta = columnsMeta[columnNum];
-                                jsonColumn["name"] = columnMeta.Name;
-                                jsonColumn["type"] = columnMeta.Type.ToString();
+                            NYdb::TResultSetParser rsParser(resultSet);
+                            while (rsParser.TryNextRow()) {
+                                NJson::TJsonValue& jsonRow = jsonRows.AppendValue({});
+                                TString row = NYdb::FormatResultRowJson(rsParser, columnsMeta, IsBase64Encode ? NYdb::EBinaryStringEncoding::Base64 : NYdb::EBinaryStringEncoding::Unicode);
+                                NJson::ReadJsonTree(row, &jsonRow);
                             }
-                            hasColumns = true;
-                        }
-                        NJson::TJsonValue& jsonRows = jsonResult["rows"];
-                        const auto& columnsMeta = resultSet.GetColumnsMeta();
-                        NYdb::TResultSetParser rsParser(resultSet);
-                        while (rsParser.TryNextRow()) {
-                            NJson::TJsonValue& jsonRow = jsonRows.AppendValue({});
-                            TString row = NYdb::FormatResultRowJson(rsParser, columnsMeta, IsBase64Encode ? NYdb::EBinaryStringEncoding::Base64 : NYdb::EBinaryStringEncoding::Unicode);
-                            NJson::ReadJsonTree(row, &jsonRow);
                         }
                     }
                 }
             }
+            if (response.HasQueryAst()) {
+                jsonResponse["ast"] = response.GetQueryAst();
+            }
+            if (response.HasQueryPlan()) {
+                NJson::ReadJsonTree(response.GetQueryPlan(), &(jsonResponse["plan"]));
+            }
+            if (response.HasQueryStats()) {
+                NProtobufJson::Proto2Json(response.GetQueryStats(), jsonResponse["stats"]);
+            }
         }
-        if (response.HasQueryAst()) {
-            jsonResponse["ast"] = response.GetQueryAst();
-        }
-        if (response.HasQueryPlan()) {
-            NJson::ReadJsonTree(response.GetQueryPlan(), &(jsonResponse["plan"]));
-        }
-        if (response.HasQueryStats()) {
-            NProtobufJson::Proto2Json(response.GetQueryStats(), jsonResponse["stats"]);
+        catch (const std::exception& ex) {
+            NYdb::NIssue::TIssues issues;
+            issues.AddIssue(TStringBuilder() << "Convert error: " << ex.what());
+            MakeErrorReply(jsonResponse, NYdb::TStatus(NYdb::EStatus::BAD_REQUEST, std::move(issues)));
+            return;
         }
     }
 
@@ -836,7 +839,11 @@ class TJsonQuery : public TViewerPipeClient {
         if (ResultSetHasColumns.size() <= data.GetQueryResultIndex()) {
             ResultSetHasColumns.resize(data.GetQueryResultIndex() + 1);
         }
-        RenderResultSetMulti(json["result"], data.GetResultSet(), ResultSetHasColumns[data.GetQueryResultIndex()]);
+        try {
+            RenderResultSetMulti(json["result"], data.GetResultSet(), ResultSetHasColumns[data.GetQueryResultIndex()]);
+        } catch (const std::exception& ex) {
+            return ReplyWithError(ex.what());
+        }
         StreamJsonResponse(json);
     }
 
diff --git a/ydb/public/sdk/cpp/client/ydb_value/value.cpp b/ydb/public/sdk/cpp/client/ydb_value/value.cpp
index d57f09761dab..d071dab48276 100644
--- a/ydb/public/sdk/cpp/client/ydb_value/value.cpp
+++ b/ydb/public/sdk/cpp/client/ydb_value/value.cpp
@@ -565,9 +565,13 @@ void FormatTypeInternal(TTypeParser& parser, IOutputStream& out) {
             out << "Null"sv;
             break;
 
-        default:
-            ThrowFatalError(TStringBuilder()
-                << "Unexpected type kind: " << parser.GetKind());
+        case TTypeParser::ETypeKind::EmptyList:
+            out << "EmptyList"sv;
+            break;
+
+        case TTypeParser::ETypeKind::EmptyDict:
+            out << "EmptyDict"sv;
+            break;
     }
 }
 
diff --git a/ydb/public/sdk/cpp/src/client/value/value.cpp b/ydb/public/sdk/cpp/src/client/value/value.cpp
index 1627f46311c2..91fd53508558 100644
--- a/ydb/public/sdk/cpp/src/client/value/value.cpp
+++ b/ydb/public/sdk/cpp/src/client/value/value.cpp
@@ -567,9 +567,13 @@ void FormatTypeInternal(TTypeParser& parser, IOutputStream& out) {
             out << "Null"sv;
             break;
 
-        default:
-            ThrowFatalError(TStringBuilder()
-                << "Unexpected type kind: " << parser.GetKind());
+        case TTypeParser::ETypeKind::EmptyList:
+            out << "EmptyList"sv;
+            break;
+
+        case TTypeParser::ETypeKind::EmptyDict:
+            out << "EmptyDict"sv;
+            break;
     }
 }
 
