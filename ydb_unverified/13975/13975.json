{
  "repo": "ydb-platform/ydb",
  "pull_number": 13975,
  "instance_id": "ydb-platform__ydb-13975",
  "issue_numbers": [
    "13945"
  ],
  "base_commit": "bb85144a9ae45136b5f4126294ea687d736be88d",
  "patch": "diff --git a/ydb/core/viewer/viewer_query.h b/ydb/core/viewer/viewer_query.h\nindex 4c1f1adf0d9c..cedf79690a6d 100644\n--- a/ydb/core/viewer/viewer_query.h\n+++ b/ydb/core/viewer/viewer_query.h\n@@ -616,14 +616,11 @@ class TJsonQuery : public TViewerPipeClient {\n         Send(ev->Sender, ack.Release());\n     }\n \n-    void HandleTimeout() {\n-        TStringBuilder error;\n-        error << \"Timeout executing query\";\n+    void ReplyWithError(const TString& error) {\n         if (SessionId) {\n             auto event = std::make_unique<NKqp::TEvKqp::TEvCancelQueryRequest>();\n             event->Record.MutableRequest()->SetSessionId(SessionId);\n             Send(NKqp::MakeKqpProxyID(SelfId().NodeId()), event.release());\n-            error << \", query was cancelled\";\n         }\n         NJson::TJsonValue json;\n         json[\"error\"][\"severity\"] = NYql::TSeverityIds::S_ERROR;\n@@ -634,6 +631,10 @@ class TJsonQuery : public TViewerPipeClient {\n         ReplyWithJsonAndPassAway(json);\n     }\n \n+    void HandleTimeout() {\n+        ReplyWithError(\"Timeout executing query\");\n+    }\n+\n private:\n     void RenderResultSetMulti(NJson::TJsonValue& jsonResult, const NYdb::TResultSet& resultSet, bool& hasColumns) {\n         if (!hasColumns) {\n@@ -676,140 +677,142 @@ class TJsonQuery : public TViewerPipeClient {\n     }\n \n     void MakeOkReply(NJson::TJsonValue& jsonResponse, NKikimrKqp::TEvQueryResponse& record) {\n-        const auto& response = record.GetResponse();\n+        try {\n+            const auto& response = record.GetResponse();\n+\n+            if (response.YdbResultsSize() > 0) {\n \n-        if (response.YdbResultsSize() > 0) {\n-            try {\n                 for (const auto& result : response.GetYdbResults()) {\n                     ResultSets.emplace_back().emplace_back(result);\n                 }\n+\n             }\n-            catch (const std::exception& ex) {\n-                NYdb::NIssue::TIssues issues;\n-                issues.AddIssue(TStringBuilder() << \"Convert error: \" << ex.what());\n-                MakeErrorReply(jsonResponse, NYdb::TStatus(NYdb::EStatus::BAD_REQUEST, std::move(issues)));\n-                return;\n-            }\n-        }\n \n-        if (ResultSets.size() > 0 && !Streaming) {\n-            if (Schema == ESchemaType::Classic) {\n-                NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n-                jsonResults.SetType(NJson::JSON_ARRAY);\n-                for (const auto& resultSets : ResultSets) {\n-                    for (NYdb::TResultSet resultSet : resultSets) {\n-                        const auto& columnsMeta = resultSet.GetColumnsMeta();\n-                        NYdb::TResultSetParser rsParser(resultSet);\n-                        while (rsParser.TryNextRow()) {\n-                            NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});\n-                            for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {\n-                                const NYdb::TColumn& columnMeta = columnsMeta[columnNum];\n-                                jsonRow[columnMeta.Name] = ColumnValueToJsonValue(rsParser.ColumnParser(columnNum));\n+            if (ResultSets.size() > 0 && !Streaming) {\n+                if (Schema == ESchemaType::Classic) {\n+                    NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n+                    jsonResults.SetType(NJson::JSON_ARRAY);\n+                    for (const auto& resultSets : ResultSets) {\n+                        for (NYdb::TResultSet resultSet : resultSets) {\n+                            const auto& columnsMeta = resultSet.GetColumnsMeta();\n+                            NYdb::TResultSetParser rsParser(resultSet);\n+                            while (rsParser.TryNextRow()) {\n+                                NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});\n+                                for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {\n+                                    const NYdb::TColumn& columnMeta = columnsMeta[columnNum];\n+                                    jsonRow[columnMeta.Name] = ColumnValueToJsonValue(rsParser.ColumnParser(columnNum));\n+                                }\n                             }\n                         }\n                     }\n                 }\n-            }\n \n-            if (Schema == ESchemaType::Modern) {\n-                {\n-                    NJson::TJsonValue& jsonColumns = jsonResponse[\"columns\"];\n-                    NYdb::TResultSet resultSet(ResultSets.front().front());\n-                    const auto& columnsMeta = resultSet.GetColumnsMeta();\n-                    jsonColumns.SetType(NJson::JSON_ARRAY);\n-                    for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {\n-                        NJson::TJsonValue& jsonColumn = jsonColumns.AppendValue({});\n-                        const NYdb::TColumn& columnMeta = columnsMeta[columnNum];\n-                        jsonColumn[\"name\"] = columnMeta.Name;\n-                        jsonColumn[\"type\"] = columnMeta.Type.ToString();\n+                if (Schema == ESchemaType::Modern) {\n+                    {\n+                        NJson::TJsonValue& jsonColumns = jsonResponse[\"columns\"];\n+                        NYdb::TResultSet resultSet(ResultSets.front().front());\n+                        const auto& columnsMeta = resultSet.GetColumnsMeta();\n+                        jsonColumns.SetType(NJson::JSON_ARRAY);\n+                        for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {\n+                            NJson::TJsonValue& jsonColumn = jsonColumns.AppendValue({});\n+                            const NYdb::TColumn& columnMeta = columnsMeta[columnNum];\n+                            jsonColumn[\"name\"] = columnMeta.Name;\n+                            jsonColumn[\"type\"] = columnMeta.Type.ToString();\n+                        }\n                     }\n-                }\n \n-                NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n-                jsonResults.SetType(NJson::JSON_ARRAY);\n-                for (const auto& resultSets : ResultSets) {\n-                    for (NYdb::TResultSet resultSet : resultSets) {\n-                        const auto& columnsMeta = resultSet.GetColumnsMeta();\n-                        NYdb::TResultSetParser rsParser(resultSet);\n-                        while (rsParser.TryNextRow()) {\n-                            NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});\n-                            jsonRow.SetType(NJson::JSON_ARRAY);\n-                            for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {\n-                                NJson::TJsonValue& jsonColumn = jsonRow.AppendValue({});\n-                                jsonColumn = ColumnValueToJsonValue(rsParser.ColumnParser(columnNum));\n+                    NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n+                    jsonResults.SetType(NJson::JSON_ARRAY);\n+                    for (const auto& resultSets : ResultSets) {\n+                        for (NYdb::TResultSet resultSet : resultSets) {\n+                            const auto& columnsMeta = resultSet.GetColumnsMeta();\n+                            NYdb::TResultSetParser rsParser(resultSet);\n+                            while (rsParser.TryNextRow()) {\n+                                NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});\n+                                jsonRow.SetType(NJson::JSON_ARRAY);\n+                                for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {\n+                                    NJson::TJsonValue& jsonColumn = jsonRow.AppendValue({});\n+                                    jsonColumn = ColumnValueToJsonValue(rsParser.ColumnParser(columnNum));\n+                                }\n                             }\n                         }\n                     }\n                 }\n-            }\n \n-            if (Schema == ESchemaType::Multi) {\n-                NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n-                jsonResults.SetType(NJson::JSON_ARRAY);\n-                for (const auto& resultSets : ResultSets) {\n-                    NJson::TJsonValue& jsonResult = jsonResults.AppendValue({});\n-                    bool hasColumns = false;\n-                    for (NYdb::TResultSet resultSet : resultSets) {\n-                        RenderResultSetMulti(jsonResult, resultSet, hasColumns);\n+                if (Schema == ESchemaType::Multi) {\n+                    NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n+                    jsonResults.SetType(NJson::JSON_ARRAY);\n+                    for (const auto& resultSets : ResultSets) {\n+                        NJson::TJsonValue& jsonResult = jsonResults.AppendValue({});\n+                        bool hasColumns = false;\n+                        for (NYdb::TResultSet resultSet : resultSets) {\n+                            RenderResultSetMulti(jsonResult, resultSet, hasColumns);\n+                        }\n                     }\n                 }\n-            }\n \n-            if (Schema == ESchemaType::Ydb) {\n-                NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n-                jsonResults.SetType(NJson::JSON_ARRAY);\n-                for (const auto& resultSets : ResultSets) {\n-                    for (NYdb::TResultSet resultSet : resultSets) {\n-                        const auto& columnsMeta = resultSet.GetColumnsMeta();\n-                        NYdb::TResultSetParser rsParser(resultSet);\n-                        while (rsParser.TryNextRow()) {\n-                            NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});\n-                            TString row = NYdb::FormatResultRowJson(rsParser, columnsMeta, IsBase64Encode ? NYdb::EBinaryStringEncoding::Base64 : NYdb::EBinaryStringEncoding::Unicode);\n-                            NJson::ReadJsonTree(row, &jsonRow);\n+                if (Schema == ESchemaType::Ydb) {\n+                    NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n+                    jsonResults.SetType(NJson::JSON_ARRAY);\n+                    for (const auto& resultSets : ResultSets) {\n+                        for (NYdb::TResultSet resultSet : resultSets) {\n+                            const auto& columnsMeta = resultSet.GetColumnsMeta();\n+                            NYdb::TResultSetParser rsParser(resultSet);\n+                            while (rsParser.TryNextRow()) {\n+                                NJson::TJsonValue& jsonRow = jsonResults.AppendValue({});\n+                                TString row = NYdb::FormatResultRowJson(rsParser, columnsMeta, IsBase64Encode ? NYdb::EBinaryStringEncoding::Base64 : NYdb::EBinaryStringEncoding::Unicode);\n+                                NJson::ReadJsonTree(row, &jsonRow);\n+                            }\n                         }\n                     }\n                 }\n-            }\n \n-            if (Schema == ESchemaType::Ydb2) {\n-                NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n-                jsonResults.SetType(NJson::JSON_ARRAY);\n-                for (const auto& resultSets : ResultSets) {\n-                    NJson::TJsonValue& jsonResult = jsonResults.AppendValue({});\n-                    bool hasColumns = false;\n-                    for (NYdb::TResultSet resultSet : resultSets) {\n-                        if (!hasColumns) {\n-                            NJson::TJsonValue& jsonColumns = jsonResult[\"columns\"];\n-                            jsonColumns.SetType(NJson::JSON_ARRAY);\n+                if (Schema == ESchemaType::Ydb2) {\n+                    NJson::TJsonValue& jsonResults = jsonResponse[\"result\"];\n+                    jsonResults.SetType(NJson::JSON_ARRAY);\n+                    for (const auto& resultSets : ResultSets) {\n+                        NJson::TJsonValue& jsonResult = jsonResults.AppendValue({});\n+                        bool hasColumns = false;\n+                        for (NYdb::TResultSet resultSet : resultSets) {\n+                            if (!hasColumns) {\n+                                NJson::TJsonValue& jsonColumns = jsonResult[\"columns\"];\n+                                jsonColumns.SetType(NJson::JSON_ARRAY);\n+                                const auto& columnsMeta = resultSet.GetColumnsMeta();\n+                                for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {\n+                                    NJson::TJsonValue& jsonColumn = jsonColumns.AppendValue({});\n+                                    const NYdb::TColumn& columnMeta = columnsMeta[columnNum];\n+                                    jsonColumn[\"name\"] = columnMeta.Name;\n+                                    jsonColumn[\"type\"] = columnMeta.Type.ToString();\n+                                }\n+                                hasColumns = true;\n+                            }\n+                            NJson::TJsonValue& jsonRows = jsonResult[\"rows\"];\n                             const auto& columnsMeta = resultSet.GetColumnsMeta();\n-                            for (size_t columnNum = 0; columnNum < columnsMeta.size(); ++columnNum) {\n-                                NJson::TJsonValue& jsonColumn = jsonColumns.AppendValue({});\n-                                const NYdb::TColumn& columnMeta = columnsMeta[columnNum];\n-                                jsonColumn[\"name\"] = columnMeta.Name;\n-                                jsonColumn[\"type\"] = columnMeta.Type.ToString();\n+                            NYdb::TResultSetParser rsParser(resultSet);\n+                            while (rsParser.TryNextRow()) {\n+                                NJson::TJsonValue& jsonRow = jsonRows.AppendValue({});\n+                                TString row = NYdb::FormatResultRowJson(rsParser, columnsMeta, IsBase64Encode ? NYdb::EBinaryStringEncoding::Base64 : NYdb::EBinaryStringEncoding::Unicode);\n+                                NJson::ReadJsonTree(row, &jsonRow);\n                             }\n-                            hasColumns = true;\n-                        }\n-                        NJson::TJsonValue& jsonRows = jsonResult[\"rows\"];\n-                        const auto& columnsMeta = resultSet.GetColumnsMeta();\n-                        NYdb::TResultSetParser rsParser(resultSet);\n-                        while (rsParser.TryNextRow()) {\n-                            NJson::TJsonValue& jsonRow = jsonRows.AppendValue({});\n-                            TString row = NYdb::FormatResultRowJson(rsParser, columnsMeta, IsBase64Encode ? NYdb::EBinaryStringEncoding::Base64 : NYdb::EBinaryStringEncoding::Unicode);\n-                            NJson::ReadJsonTree(row, &jsonRow);\n                         }\n                     }\n                 }\n             }\n+            if (response.HasQueryAst()) {\n+                jsonResponse[\"ast\"] = response.GetQueryAst();\n+            }\n+            if (response.HasQueryPlan()) {\n+                NJson::ReadJsonTree(response.GetQueryPlan(), &(jsonResponse[\"plan\"]));\n+            }\n+            if (response.HasQueryStats()) {\n+                NProtobufJson::Proto2Json(response.GetQueryStats(), jsonResponse[\"stats\"]);\n+            }\n         }\n-        if (response.HasQueryAst()) {\n-            jsonResponse[\"ast\"] = response.GetQueryAst();\n-        }\n-        if (response.HasQueryPlan()) {\n-            NJson::ReadJsonTree(response.GetQueryPlan(), &(jsonResponse[\"plan\"]));\n-        }\n-        if (response.HasQueryStats()) {\n-            NProtobufJson::Proto2Json(response.GetQueryStats(), jsonResponse[\"stats\"]);\n+        catch (const std::exception& ex) {\n+            NYdb::NIssue::TIssues issues;\n+            issues.AddIssue(TStringBuilder() << \"Convert error: \" << ex.what());\n+            MakeErrorReply(jsonResponse, NYdb::TStatus(NYdb::EStatus::BAD_REQUEST, std::move(issues)));\n+            return;\n         }\n     }\n \n@@ -836,7 +839,11 @@ class TJsonQuery : public TViewerPipeClient {\n         if (ResultSetHasColumns.size() <= data.GetQueryResultIndex()) {\n             ResultSetHasColumns.resize(data.GetQueryResultIndex() + 1);\n         }\n-        RenderResultSetMulti(json[\"result\"], data.GetResultSet(), ResultSetHasColumns[data.GetQueryResultIndex()]);\n+        try {\n+            RenderResultSetMulti(json[\"result\"], data.GetResultSet(), ResultSetHasColumns[data.GetQueryResultIndex()]);\n+        } catch (const std::exception& ex) {\n+            return ReplyWithError(ex.what());\n+        }\n         StreamJsonResponse(json);\n     }\n \ndiff --git a/ydb/public/sdk/cpp/client/ydb_value/value.cpp b/ydb/public/sdk/cpp/client/ydb_value/value.cpp\nindex d57f09761dab..d071dab48276 100644\n--- a/ydb/public/sdk/cpp/client/ydb_value/value.cpp\n+++ b/ydb/public/sdk/cpp/client/ydb_value/value.cpp\n@@ -565,9 +565,13 @@ void FormatTypeInternal(TTypeParser& parser, IOutputStream& out) {\n             out << \"Null\"sv;\n             break;\n \n-        default:\n-            ThrowFatalError(TStringBuilder()\n-                << \"Unexpected type kind: \" << parser.GetKind());\n+        case TTypeParser::ETypeKind::EmptyList:\n+            out << \"EmptyList\"sv;\n+            break;\n+\n+        case TTypeParser::ETypeKind::EmptyDict:\n+            out << \"EmptyDict\"sv;\n+            break;\n     }\n }\n \ndiff --git a/ydb/public/sdk/cpp/src/client/value/value.cpp b/ydb/public/sdk/cpp/src/client/value/value.cpp\nindex 1627f46311c2..91fd53508558 100644\n--- a/ydb/public/sdk/cpp/src/client/value/value.cpp\n+++ b/ydb/public/sdk/cpp/src/client/value/value.cpp\n@@ -567,9 +567,13 @@ void FormatTypeInternal(TTypeParser& parser, IOutputStream& out) {\n             out << \"Null\"sv;\n             break;\n \n-        default:\n-            ThrowFatalError(TStringBuilder()\n-                << \"Unexpected type kind: \" << parser.GetKind());\n+        case TTypeParser::ETypeKind::EmptyList:\n+            out << \"EmptyList\"sv;\n+            break;\n+\n+        case TTypeParser::ETypeKind::EmptyDict:\n+            out << \"EmptyDict\"sv;\n+            break;\n     }\n }\n \n",
  "test_patch": "diff --git a/ydb/core/viewer/tests/canondata/result.json b/ydb/core/viewer/tests/canondata/result.json\nindex c0502a0c4739..a7ad358dfc28 100644\n--- a/ydb/core/viewer/tests/canondata/result.json\n+++ b/ydb/core/viewer/tests/canondata/result.json\n@@ -1161,6 +1161,24 @@\n         ],\n         \"version\": 7\n     },\n+    \"test.test_viewer_query_issue_13945\": {\n+        \"result\": [\n+            {\n+                \"columns\": [\n+                    {\n+                        \"name\": \"column0\",\n+                        \"type\": \"EmptyList\"\n+                    }\n+                ],\n+                \"rows\": [\n+                    [\n+                        []\n+                    ]\n+                ]\n+            }\n+        ],\n+        \"version\": 7\n+    },\n     \"test.test_viewer_sysinfo\": {\n         \"ResponseDuration\": \"number\",\n         \"ResponseTime\": \"number-text\",\ndiff --git a/ydb/core/viewer/tests/test.py b/ydb/core/viewer/tests/test.py\nindex 4e955c43276f..1a255a0440e4 100644\n--- a/ydb/core/viewer/tests/test.py\n+++ b/ydb/core/viewer/tests/test.py\n@@ -318,3 +318,10 @@ def test_viewer_query_issue_13757():\n         'query': 'SELECT CAST(<|one:\"8912\", two:42|> AS Struct<two:Utf8, three:Date?>);',\n         'schema': 'multi'\n     })\n+\n+\n+def test_viewer_query_issue_13945():\n+    return get_viewer_db(\"/viewer/query\", {\n+        'query': 'SELECT AsList();',\n+        'schema': 'multi'\n+    })\n",
  "problem_statement": "crash in value rendering\n```\n======= terminate() call stack ========\n0. /home-big/xenoxeno/work/ydb/ydb/core/driver_lib/run/main.cpp:177: KikimrTerminateHandler() @ 0x139A355A\n1. /-S/contrib/libs/cxxsupp/libcxxrt/exception.cc:1649: std::terminate() @ 0x99922D8\n2. /-S/contrib/libs/cxxsupp/libcxxrt/exception.cc:813: report_failure(_Unwind_Reason_Code, __cxxabiv1::__cxa_exception*) @ 0x9992D01\n3. /-S/contrib/libs/cxxsupp/libcxxrt/exception.cc:870: throw_exception(__cxxabiv1::__cxa_exception*) @ 0x99927BD\n4. /-S/contrib/libs/cxxsupp/libcxxrt/exception.cc:909: __cxa_throw @ 0x99927BD\n5. /-S/ydb/public/sdk/cpp/src/client/types/fatal_error_handlers/handlers.cpp:7: NYdb::V3::ThrowFatalError(std::__y1::basic_string<char, std::__y1::char_traits<char>, std::__y1::allocator<char>> const&) @ 0xC57D107\n6. /-S/ydb/public/sdk/cpp/src/client/value/value.cpp:571: NYdb::V3::FormatTypeInternal(NYdb::V3::TTypeParser&, IOutputStream&) @ 0xD368C84\n7. /-S/ydb/public/sdk/cpp/src/client/value/value.cpp:579: NYdb::V3::FormatType(NYdb::V3::TType const&) @ 0xD36724A\n8. /-S/ydb/public/sdk/cpp/src/client/value/value.cpp:98: NYdb::V3::TType::ToString() const @ 0xD36719D\n9. /home-big/xenoxeno/work/ydb/ydb/core/viewer/viewer_query.h:647: NKikimr::NViewer::TJsonQuery::RenderResultSetMulti(NJson::TJsonValue&, NYdb::V3::TResultSet const&, bool&) @ 0x17613E3E\n10. /home-big/xenoxeno/work/ydb/ydb/core/viewer/viewer_query.h:839: NKikimr::NViewer::TJsonQuery::StreamJsonResponse(NKikimrKqp::TEvExecuterStreamData const&) @ 0x17614F60\n11. /home-big/xenoxeno/work/ydb/ydb/core/viewer/viewer_query.h:603: NKikimr::NViewer::TJsonQuery::HandleReply(TAutoPtr<NActors::TEventHandle<NKikimr::NKqp::TEvKqpExecuter::TEvStreamData>, TDelete>&) @ 0x17610BFE\n12. /-S/ydb/library/actors/core/executor_thread.cpp:281: NActors::TGenericExecutorThread::Execute(NActors::TMailbox*, bool) @ 0xA7830CF\n13. /-S/ydb/library/actors/core/executor_thread.cpp:475: NActors::TGenericExecutorThread::ProcessExecutorPool(NActors::IExecutorPool*)::$_0::operator()(NActors::TMailbox*, bool) const @ 0xA786BB0\n14. /-S/ydb/library/actors/core/executor_thread.cpp:529: NActors::TGenericExecutorThread::ProcessExecutorPool(NActors::IExecutorPool*) @ 0xA786702\n15. /-S/ydb/library/actors/core/executor_thread.cpp:560: NActors::TExecutorThread::ThreadProc() @ 0xA78735E\n16. /-S/util/system/thread.cpp:244: (anonymous namespace)::TPosixThread::ThreadProxy(void*) @ 0x9A2F9DC\n17. ??:0: ?? @ 0x7FE3AA369608\n18. ??:0: ?? @ 0x7FE3AA28E352\n=======================================\nuncaught exception:\n    address -> 0x16ea7f61b710\n    what() -> \"Unexpected type kind: EmptyList\"\n    type -> NYdb::V3::TContractViolation\nAborted\n```\n",
  "hints_text": "Same story for 24-3:\n\n```\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 2025-01-29T07:27:52.747239Z :HTTP NOTICE: [fc00:1::1]:42270 root POST /viewer/json/query?schema=multi&base64=false\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ======= terminate() call stack ========\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 0. ??:0: KikimrTerminateHandler() @ 0x17112B1A\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 1. ??:0: report_failure(_Unwind_Reason_Code, __cxxabiv1::__cxa_exception*) @ 0xDD433DE\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 2. ??:0: NYdb::ThrowFatalError(TBasicString<char, std::__y1::char_traits<char>> const&) @ 0x1034F347\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 3. ??:0: NYdb::FormatTypeInternal(NYdb::TTypeParser&, IOutputStream&) @ 0x10E1B190\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 4. ??:0: NYdb::FormatType(NYdb::TType const&) @ 0x10E1951A\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 5. ??:0: NYdb::TType::ToString() const @ 0x10E1946D\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 6. ??:0: NKikimr::NViewer::TJsonQuery::MakeOkReply(NJson::TJsonValue&, NKikimrKqp::TEvQueryResponse&) @ 0x19D32DAF\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 7. ??:0: NKikimr::NViewer::TJsonQuery::HandleReply(TAutoPtr<NActors::TEventHandle<NKikimr::NKqp::NPrivateEvents::TEvQueryResponse>, TDe\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 8. ??:0: NActors::TGenericExecutorThread::TProcessingResult NActors::TGenericExecutorThread::Execute<NActors::TMailboxTable::THTSwapMai\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 9. ??:0: NActors::TGenericExecutorThread::ProcessExecutorPool(NActors::IExecutorPool*)::$_0::operator()(unsigned int, bool) const @ 0xE\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 10. ??:0: NActors::TGenericExecutorThread::ProcessExecutorPool(NActors::IExecutorPool*) @ 0xE905299\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 11. ??:0: NActors::TExecutorThread::ThreadProc() @ 0xE906036\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 12. ??:0: (anonymous namespace)::TPosixThread::ThreadProxy(void*) @ 0xDDDDA69\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 13. ??:0: start_thread @ 0x76340F28AFA2\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: 14. ??:0: clone @ 0x76340F1B6FEE\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0x17112B1B)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0xDD433DF)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0x1034F348)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0x10E1B191)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0x10E1951B)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0x10E1946E)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0x19D32DB0)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0x19D3108C)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0xE90D989)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0xE9058A2)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0xE90529A)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0xE906037)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0xDDDDA6A)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: ??+0 (0x76340F28AFA3)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: clone+63 (0x76340F1B6FEF)\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: =======================================\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]: uncaught exception:\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]:     address -> 0x16c3d4b22510\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]:     what() -> \"Unexpected type kind: EmptyList\"\nJan 29 10:27:52 ydb01.localdomain ydbd[26407]:     type -> NYdb::TContractViolation\n```",
  "created_at": "2025-01-29T10:50:20Z"
}