{
  "repo": "ydb-platform/ydb",
  "pull_number": 7729,
  "instance_id": "ydb-platform__ydb-7729",
  "issue_numbers": [
    "7189"
  ],
  "base_commit": "752095e52055a54a5f50550c09a458d9ab77e7ba",
  "patch": "diff --git a/ydb/core/protos/sys_view.proto b/ydb/core/protos/sys_view.proto\nindex 234646e12450..58ea6ea6af7a 100644\n--- a/ydb/core/protos/sys_view.proto\n+++ b/ydb/core/protos/sys_view.proto\n@@ -44,6 +44,8 @@ message TPartitionStats {\n     optional uint64 TxRejectedBySpace = 19;\n \n     optional TTtlStats TtlStats = 20;\n+\n+    optional uint64 ByKeyFilterSize = 21;\n }\n \n message TPartitionStatsResult {\ndiff --git a/ydb/core/protos/table_stats.proto b/ydb/core/protos/table_stats.proto\nindex 9f123decb7a8..c80e97233550 100644\n--- a/ydb/core/protos/table_stats.proto\n+++ b/ydb/core/protos/table_stats.proto\n@@ -66,4 +66,6 @@ message TTableStats {\n     repeated TChannelStats Channels = 30;\n \n     optional TStoragePoolsStats StoragePools = 31;\n+\n+    optional uint64 ByKeyFilterSize = 32;\n }\ndiff --git a/ydb/core/tablet_flat/flat_stat_table.h b/ydb/core/tablet_flat/flat_stat_table.h\nindex b5f8e252c823..ef594cc28675 100644\n--- a/ydb/core/tablet_flat/flat_stat_table.h\n+++ b/ydb/core/tablet_flat/flat_stat_table.h\n@@ -102,6 +102,7 @@ struct TStats {\n     ui64 RowCount = 0;\n     TChanneledDataSize DataSize = { };\n     TChanneledDataSize IndexSize = { };\n+    ui64 ByKeyFilterSize = 0;\n     THistogram RowCountHistogram;\n     THistogram DataSizeHistogram;\n \n@@ -109,6 +110,7 @@ struct TStats {\n         RowCount = 0;\n         DataSize = { };\n         IndexSize = { };\n+        ByKeyFilterSize = 0;\n         RowCountHistogram.clear();\n         DataSizeHistogram.clear();\n     }\n@@ -117,6 +119,7 @@ struct TStats {\n         std::swap(RowCount, other.RowCount);\n         std::swap(DataSize, other.DataSize);\n         std::swap(IndexSize, other.IndexSize);\n+        std::swap(ByKeyFilterSize, other.ByKeyFilterSize);\n         RowCountHistogram.swap(other.RowCountHistogram);\n         DataSizeHistogram.swap(other.DataSizeHistogram);\n     }\ndiff --git a/ydb/core/tablet_flat/flat_stat_table_btree_index.cpp b/ydb/core/tablet_flat/flat_stat_table_btree_index.cpp\nindex e25f160cfef3..a87df9bb1ba1 100644\n--- a/ydb/core/tablet_flat/flat_stat_table_btree_index.cpp\n+++ b/ydb/core/tablet_flat/flat_stat_table_btree_index.cpp\n@@ -200,6 +200,7 @@ bool BuildStatsBTreeIndex(const TSubset& subset, TStats& stats, ui32 histogramBu\n     bool ready = true;\n     for (const auto& part : subset.Flatten) {\n         stats.IndexSize.Add(part->IndexesRawSize, part->Label.Channel());\n+        stats.ByKeyFilterSize += part->ByKey ? part->ByKey->Raw.size() : 0;\n         ready &= AddDataSize(part, stats, env, yieldHandler);\n     }\n \ndiff --git a/ydb/core/tablet_flat/flat_stat_table_mixed_index.h b/ydb/core/tablet_flat/flat_stat_table_mixed_index.h\nindex c30ec2f382d4..19ed00c74115 100644\n--- a/ydb/core/tablet_flat/flat_stat_table_mixed_index.h\n+++ b/ydb/core/tablet_flat/flat_stat_table_mixed_index.h\n@@ -22,6 +22,7 @@ inline bool BuildStatsMixedIndex(const TSubset& subset, TStats& stats, ui64 rowC\n     bool started = true;\n     for (const auto& part : subset.Flatten) {\n         stats.IndexSize.Add(part->IndexesRawSize, part->Label.Channel());\n+        stats.ByKeyFilterSize += part->ByKey ? part->ByKey->Raw.size() : 0;\n         TAutoPtr<TStatsScreenedPartIterator> iter = new TStatsScreenedPartIterator(part, env, subset.Scheme->Keys, part->Small, part->Large, \n             rowCountResolution / resolutionDivider, dataSizeResolution / resolutionDivider);\n         auto ready = iter->Start();\ndiff --git a/ydb/core/tx/datashard/datashard__stats.cpp b/ydb/core/tx/datashard/datashard__stats.cpp\nindex 67d5c62db373..0386c224dabf 100644\n--- a/ydb/core/tx/datashard/datashard__stats.cpp\n+++ b/ydb/core/tx/datashard/datashard__stats.cpp\n@@ -133,7 +133,6 @@ class TTableStatsCoroBuilder : public TActorCoroImpl, private IPages {\n \n         auto ev = MakeHolder<TDataShard::TEvPrivate::TEvAsyncTableStats>();\n         ev->TableId = TableId;\n-        ev->IndexSize = IndexSize;\n         ev->StatsUpdateTime = StatsUpdateTime;\n         ev->PartCount = Subset->Flatten.size() + Subset->ColdParts.size();\n         ev->MemRowCount = MemRowCount;\n@@ -272,17 +271,14 @@ class TDataShard::TTxGetTableStats : public NTabletFlatExecutor::TTransactionBas\n \n         const TUserTable& tableInfo = *Self->TableInfos[tableId];\n \n-        auto indexSize = txc.DB.GetTableIndexSize(tableInfo.LocalTid);\n+        // Fill stats with current mem table size:\n         auto memSize = txc.DB.GetTableMemSize(tableInfo.LocalTid);\n         auto memRowCount = txc.DB.GetTableMemRowCount(tableInfo.LocalTid);\n-\n         if (tableInfo.ShadowTid) {\n-            indexSize += txc.DB.GetTableIndexSize(tableInfo.ShadowTid);\n             memSize += txc.DB.GetTableMemSize(tableInfo.ShadowTid);\n             memRowCount += txc.DB.GetTableMemRowCount(tableInfo.ShadowTid);\n         }\n \n-        Result->Record.MutableTableStats()->SetIndexSize(indexSize);\n         Result->Record.MutableTableStats()->SetInMemSize(memSize);\n         Result->Record.MutableTableStats()->SetLastAccessTime(tableInfo.Stats.AccessTime.MilliSeconds());\n         Result->Record.MutableTableStats()->SetLastUpdateTime(tableInfo.Stats.UpdateTime.MilliSeconds());\n@@ -291,18 +287,21 @@ class TDataShard::TTxGetTableStats : public NTabletFlatExecutor::TTransactionBas\n         tableInfo.Stats.RowCountResolution = Ev->Get()->Record.GetRowCountResolution();\n         tableInfo.Stats.HistogramBucketsCount = Ev->Get()->Record.GetHistogramBucketsCount();\n \n-        // Check if first stats update has been completed\n+        // Check if first stats update has been completed:\n         bool ready = (tableInfo.Stats.StatsUpdateTime != TInstant());\n         Result->Record.SetFullStatsReady(ready);\n-        if (!ready)\n+        if (!ready) {\n             return true;\n+        }\n \n         const TStats& stats = tableInfo.Stats.DataStats;\n+        Result->Record.MutableTableStats()->SetIndexSize(stats.IndexSize.Size);\n+        Result->Record.MutableTableStats()->SetByKeyFilterSize(stats.ByKeyFilterSize);\n         Result->Record.MutableTableStats()->SetDataSize(stats.DataSize.Size + memSize);\n         Result->Record.MutableTableStats()->SetRowCount(stats.RowCount + memRowCount);\n         FillHistogram(stats.DataSizeHistogram, *Result->Record.MutableTableStats()->MutableDataSizeHistogram());\n         FillHistogram(stats.RowCountHistogram, *Result->Record.MutableTableStats()->MutableRowCountHistogram());\n-        // Fill key access sample if it was collected not too long ago\n+        // Fill key access sample if it was collected not too long ago:\n         if (Self->StopKeyAccessSamplingAt + TDuration::Seconds(30) >= AppData(ctx)->TimeProvider->Now()) {\n             FillKeyAccessSample(tableInfo.Stats.AccessStats, *Result->Record.MutableTableStats()->MutableKeyAccessSample());\n         }\n@@ -317,7 +316,7 @@ class TDataShard::TTxGetTableStats : public NTabletFlatExecutor::TTransactionBas\n             Result->Record.AddUserTablePartOwners(pi);\n         }\n \n-        for (const auto& pi : Self->SysTablesPartOnwers) {\n+        for (const auto& pi : Self->SysTablesPartOwners) {\n             Result->Record.AddSysTablesPartOwners(pi);\n         }\n \n@@ -375,9 +374,10 @@ void TDataShard::Handle(TEvPrivate::TEvAsyncTableStats::TPtr& ev, const TActorCo\n             LOG_ERROR(ctx, NKikimrServices::TX_DATASHARD,\n                       \"Unexpected async stats update at datashard %\" PRIu64, TabletID());\n         }\n-        tableInfo.Stats.Update(std::move(ev->Get()->Stats), ev->Get()->IndexSize,\n-            std::move(ev->Get()->PartOwners), ev->Get()->PartCount,\n-            ev->Get()->StatsUpdateTime);\n+        tableInfo.Stats.DataStats = std::move(ev->Get()->Stats);\n+        tableInfo.Stats.PartOwners = std::move(ev->Get()->PartOwners);\n+        tableInfo.Stats.PartCount = ev->Get()->PartCount;\n+        tableInfo.Stats.StatsUpdateTime = ev->Get()->StatsUpdateTime;\n         tableInfo.Stats.MemRowCount = ev->Get()->MemRowCount;\n         tableInfo.Stats.MemDataSize = ev->Get()->MemDataSize;\n \n@@ -565,12 +565,12 @@ class TDataShard::TTxInitiateStatsUpdate : public NTabletFlatExecutor::TTransact\n             Self->Actors.insert(actorId);\n         }\n \n-        Self->SysTablesPartOnwers.clear();\n+        Self->SysTablesPartOwners.clear();\n         for (ui32 sysTableId : Self->SysTablesToTransferAtSplit) {\n             THashSet<ui64> sysPartOwners;\n             auto subset = txc.DB.Subset(sysTableId, TEpoch::Max(), { }, { });\n             GetPartOwners(*subset, sysPartOwners);\n-            Self->SysTablesPartOnwers.insert(sysPartOwners.begin(), sysPartOwners.end());\n+            Self->SysTablesPartOwners.insert(sysPartOwners.begin(), sysPartOwners.end());\n         }\n         return true;\n     }\ndiff --git a/ydb/core/tx/datashard/datashard_impl.h b/ydb/core/tx/datashard/datashard_impl.h\nindex 053e7b69d5ef..f4614b08a8ac 100644\n--- a/ydb/core/tx/datashard/datashard_impl.h\n+++ b/ydb/core/tx/datashard/datashard_impl.h\n@@ -403,7 +403,6 @@ class TDataShard\n \n         struct TEvAsyncTableStats : public TEventLocal<TEvAsyncTableStats, EvAsyncTableStats> {\n             ui64 TableId = -1;\n-            ui64 IndexSize = 0;\n             TInstant StatsUpdateTime;\n             NTable::TStats Stats;\n             THashSet<ui64> PartOwners;\n@@ -2634,7 +2633,7 @@ class TDataShard\n             Schema::PlanQueue::TableId,\n             Schema::DeadlineQueue::TableId\n         };\n-    THashSet<ui64> SysTablesPartOnwers;\n+    THashSet<ui64> SysTablesPartOwners;\n \n     // Sys table contents\n     ui32 State;\n@@ -2649,7 +2648,7 @@ class TDataShard\n \n     NMiniKQL::IKeyAccessSampler::TPtr DisabledKeySampler;\n     NMiniKQL::IKeyAccessSampler::TPtr EnabledKeySampler;\n-    NMiniKQL::IKeyAccessSampler::TPtr CurrentKeySampler; // Points to enbaled or disabled\n+    NMiniKQL::IKeyAccessSampler::TPtr CurrentKeySampler; // Points to enabled or disabled\n     TInstant StartedKeyAccessSamplingAt;\n     TInstant StopKeyAccessSamplingAt;\n \n@@ -3241,6 +3240,7 @@ class TDataShard\n \n             ev->Record.MutableTableStats()->SetDataSize(ti.Stats.DataStats.DataSize.Size + ti.Stats.MemDataSize);\n             ev->Record.MutableTableStats()->SetIndexSize(ti.Stats.DataStats.IndexSize.Size);\n+            ev->Record.MutableTableStats()->SetByKeyFilterSize(ti.Stats.DataStats.ByKeyFilterSize);\n             ev->Record.MutableTableStats()->SetInMemSize(ti.Stats.MemDataSize);\n \n             TMap<ui8, std::tuple<ui64, ui64>> channels; // Channel -> (DataSize, IndexSize)\n@@ -3294,7 +3294,7 @@ class TDataShard\n             for (const auto& pi : ti.Stats.PartOwners) {\n                 ev->Record.AddUserTablePartOwners(pi);\n             }\n-            for (const auto& pi : SysTablesPartOnwers) {\n+            for (const auto& pi : SysTablesPartOwners) {\n                 ev->Record.AddSysTablesPartOwners(pi);\n             }\n \ndiff --git a/ydb/core/tx/datashard/datashard_user_table.h b/ydb/core/tx/datashard/datashard_user_table.h\nindex 6f154a143144..e91c052f0a2d 100644\n--- a/ydb/core/tx/datashard/datashard_user_table.h\n+++ b/ydb/core/tx/datashard/datashard_user_table.h\n@@ -354,7 +354,6 @@ struct TUserTable : public TThrRefBase {\n \n     struct TStats {\n         NTable::TStats DataStats;\n-        ui64 IndexSize = 0;\n         ui64 MemRowCount = 0;\n         ui64 MemDataSize = 0;\n         TInstant AccessTime;\n@@ -371,14 +370,6 @@ struct TUserTable : public TThrRefBase {\n         ui64 BackgroundCompactionCount = 0;\n         ui64 CompactBorrowedCount = 0;\n         NTable::TKeyAccessSample AccessStats;\n-\n-        void Update(NTable::TStats&& dataStats, ui64 indexSize, THashSet<ui64>&& partOwners, ui64 partCount, TInstant statsUpdateTime) {\n-            DataStats = dataStats;\n-            IndexSize = indexSize;\n-            PartOwners = partOwners;\n-            PartCount = partCount;\n-            StatsUpdateTime = statsUpdateTime;\n-        }\n     };\n \n     struct TSpecialUpdate {\ndiff --git a/ydb/core/tx/schemeshard/schemeshard__init.cpp b/ydb/core/tx/schemeshard/schemeshard__init.cpp\nindex 3082db929199..e3db4f5760d0 100644\n--- a/ydb/core/tx/schemeshard/schemeshard__init.cpp\n+++ b/ydb/core/tx/schemeshard/schemeshard__init.cpp\n@@ -2285,6 +2285,7 @@ struct TSchemeShard::TTxInit : public TTransactionBase<TSchemeShard> {\n                 stats.RowCount = rowSet.GetValue<Schema::TablePartitionStats::RowCount>();\n                 stats.DataSize = rowSet.GetValue<Schema::TablePartitionStats::DataSize>();\n                 stats.IndexSize = rowSet.GetValue<Schema::TablePartitionStats::IndexSize>();\n+                stats.ByKeyFilterSize = rowSet.GetValue<Schema::TablePartitionStats::ByKeyFilterSize>();\n                 if (rowSet.HaveValue<Schema::TablePartitionStats::StoragePoolsStats>()) {\n                     NKikimrTableStats::TStoragePoolsStats protobufRepresentation;\n                     Y_ABORT_UNLESS(ParseFromStringNoSizeLimit(\ndiff --git a/ydb/core/tx/schemeshard/schemeshard__table_stats.cpp b/ydb/core/tx/schemeshard/schemeshard__table_stats.cpp\nindex 72e7b4a80379..26ac03e3fd41 100644\n--- a/ydb/core/tx/schemeshard/schemeshard__table_stats.cpp\n+++ b/ydb/core/tx/schemeshard/schemeshard__table_stats.cpp\n@@ -64,6 +64,7 @@ auto TSchemeShard::BuildStatsForCollector(TPathId pathId, TShardIdx shardIdx, TT\n     sysStats.SetDataSize(stats.DataSize);\n     sysStats.SetRowCount(stats.RowCount);\n     sysStats.SetIndexSize(stats.IndexSize);\n+    sysStats.SetByKeyFilterSize(stats.ByKeyFilterSize);\n     sysStats.SetCPUCores(std::min(stats.GetCurrentRawCpuUsage() / 1000000., 1.0));\n     sysStats.SetTabletId(ui64(datashardId));\n     sysStats.SetAccessTime(stats.LastAccessTime.MilliSeconds());\n@@ -164,6 +165,7 @@ TPartitionStats TTxStoreTableStats::PrepareStats(const TActorContext& ctx,\n     newStats.RowCount = tableStats.GetRowCount();\n     newStats.DataSize = tableStats.GetDataSize();\n     newStats.IndexSize = tableStats.GetIndexSize();\n+    newStats.ByKeyFilterSize = tableStats.GetByKeyFilterSize();\n     newStats.LastAccessTime = TInstant::MilliSeconds(tableStats.GetLastAccessTime());\n     newStats.LastUpdateTime = TInstant::MilliSeconds(tableStats.GetLastUpdateTime());\n     for (const auto& channelStats : tableStats.GetChannels()) {\ndiff --git a/ydb/core/tx/schemeshard/schemeshard_impl.cpp b/ydb/core/tx/schemeshard/schemeshard_impl.cpp\nindex 0129591d57d1..bc52119090cc 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_impl.cpp\n+++ b/ydb/core/tx/schemeshard/schemeshard_impl.cpp\n@@ -2506,6 +2506,7 @@ void TSchemeShard::PersistTablePartitionStats(NIceDb::TNiceDb& db, const TPathId\n         NIceDb::TUpdate<Schema::TablePartitionStats::RowCount>(stats.RowCount),\n         NIceDb::TUpdate<Schema::TablePartitionStats::DataSize>(stats.DataSize),\n         NIceDb::TUpdate<Schema::TablePartitionStats::IndexSize>(stats.IndexSize),\n+        NIceDb::TUpdate<Schema::TablePartitionStats::ByKeyFilterSize>(stats.ByKeyFilterSize),\n \n         NIceDb::TUpdate<Schema::TablePartitionStats::LastAccessTime>(stats.LastAccessTime.GetValue()),\n         NIceDb::TUpdate<Schema::TablePartitionStats::LastUpdateTime>(stats.LastUpdateTime.GetValue()),\ndiff --git a/ydb/core/tx/schemeshard/schemeshard_info_types.cpp b/ydb/core/tx/schemeshard/schemeshard_info_types.cpp\nindex 852f506dab9c..3660ba1574f5 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_info_types.cpp\n+++ b/ydb/core/tx/schemeshard/schemeshard_info_types.cpp\n@@ -1592,6 +1592,7 @@ void TTableInfo::SetPartitioning(TVector<TTableShardInfo>&& newPartitioning) {\n         newAggregatedStats.RowCount += newStats.RowCount;\n         newAggregatedStats.DataSize += newStats.DataSize;\n         newAggregatedStats.IndexSize += newStats.IndexSize;\n+        newAggregatedStats.ByKeyFilterSize += newStats.ByKeyFilterSize;\n         for (const auto& [poolKind, newStoragePoolStats] : newStats.StoragePoolsStats) {\n             auto& [dataSize, indexSize] = newAggregatedStats.StoragePoolsStats[poolKind];\n             dataSize += newStoragePoolStats.DataSize;\n@@ -1678,6 +1679,7 @@ void TAggregatedStats::UpdateShardStats(TShardIdx datashardIdx, const TPartition\n     Aggregated.RowCount += (newStats.RowCount - oldStats.RowCount);\n     Aggregated.DataSize += (newStats.DataSize - oldStats.DataSize);\n     Aggregated.IndexSize += (newStats.IndexSize - oldStats.IndexSize);\n+    Aggregated.ByKeyFilterSize += (newStats.ByKeyFilterSize - oldStats.ByKeyFilterSize);\n     for (const auto& [poolKind, newStoragePoolStats] : newStats.StoragePoolsStats) {\n         auto& [dataSize, indexSize] = Aggregated.StoragePoolsStats[poolKind];\n         const auto* oldStoragePoolStats = oldStats.StoragePoolsStats.FindPtr(poolKind);\ndiff --git a/ydb/core/tx/schemeshard/schemeshard_info_types.h b/ydb/core/tx/schemeshard/schemeshard_info_types.h\nindex 4eb70beac9c8..d98cdf96ba93 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_info_types.h\n+++ b/ydb/core/tx/schemeshard/schemeshard_info_types.h\n@@ -231,6 +231,7 @@ struct TPartitionStats {\n     ui64 RowCount = 0;\n     ui64 DataSize = 0;\n     ui64 IndexSize = 0;\n+    ui64 ByKeyFilterSize = 0;\n \n     struct TStoragePoolStats {\n         ui64 DataSize = 0;\ndiff --git a/ydb/core/tx/schemeshard/schemeshard_path_describer.cpp b/ydb/core/tx/schemeshard/schemeshard_path_describer.cpp\nindex 97d715494b7f..872956a98b6e 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_path_describer.cpp\n+++ b/ydb/core/tx/schemeshard/schemeshard_path_describer.cpp\n@@ -25,6 +25,7 @@ static void FillTableStats(NKikimrTableStats::TTableStats* stats, const TPartiti\n     stats->SetRowCount(tableStats.RowCount);\n     stats->SetDataSize(tableStats.DataSize);\n     stats->SetIndexSize(tableStats.IndexSize);\n+    stats->SetByKeyFilterSize(tableStats.ByKeyFilterSize);\n     stats->SetLastAccessTime(tableStats.LastAccessTime.MilliSeconds());\n     stats->SetLastUpdateTime(tableStats.LastUpdateTime.MilliSeconds());\n     stats->SetImmediateTxCompleted(tableStats.ImmediateTxCompleted);\ndiff --git a/ydb/core/tx/schemeshard/schemeshard_schema.h b/ydb/core/tx/schemeshard/schemeshard_schema.h\nindex ac7cce9805c8..a4f421a7e652 100644\n--- a/ydb/core/tx/schemeshard/schemeshard_schema.h\n+++ b/ydb/core/tx/schemeshard/schemeshard_schema.h\n@@ -378,6 +378,8 @@ struct Schema : NIceDb::Schema {\n         // Represented by NKikimrTableStats::TStoragePoolsStats.\n         struct StoragePoolsStats : Column<33, NScheme::NTypeIds::String> { using Type = TString; };\n \n+        struct ByKeyFilterSize : Column<34, NScheme::NTypeIds::Uint64> {};\n+\n         using TKey = TableKey<TableOwnerId, TableLocalId, PartitionId>;\n         using TColumns = TableColumns<\n             TableOwnerId,\n@@ -412,7 +414,8 @@ struct Schema : NIceDb::Schema {\n             SearchHeight,\n             FullCompactionTs,\n             MemDataSize,\n-            StoragePoolsStats\n+            StoragePoolsStats,\n+            ByKeyFilterSize\n         >;\n     };\n \n",
  "test_patch": "diff --git a/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_schemeshard_/flat_schemeshard.schema b/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_schemeshard_/flat_schemeshard.schema\nindex 1a4f2de0d060..d816e0a1990b 100644\n--- a/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_schemeshard_/flat_schemeshard.schema\n+++ b/ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_schemeshard_/flat_schemeshard.schema\n@@ -6828,6 +6828,11 @@\n                 \"ColumnId\": 33,\n                 \"ColumnName\": \"StoragePoolsStats\",\n                 \"ColumnType\": \"String\"\n+            },\n+            {\n+                \"ColumnId\": 34,\n+                \"ColumnName\": \"ByKeyFilterSize\",\n+                \"ColumnType\": \"Uint64\"\n             }\n         ],\n         \"ColumnsDropped\": [],\n@@ -6866,7 +6871,8 @@\n                     30,\n                     31,\n                     32,\n-                    33\n+                    33,\n+                    34\n                 ],\n                 \"RoomID\": 0,\n                 \"Codec\": 0,\n",
  "problem_statement": "Report BloomFilter size in describe table response\nBloomFilter might increase amount of memory required for table operation.\r\nIn order to display it in the embedded ui this size is required to be returned as a part of describe table response\n",
  "hints_text": "",
  "created_at": "2024-08-13T14:58:21Z",
  "modified_files": [
    "ydb/core/protos/sys_view.proto",
    "ydb/core/protos/table_stats.proto",
    "ydb/core/tablet_flat/flat_stat_table.h",
    "ydb/core/tablet_flat/flat_stat_table_btree_index.cpp",
    "ydb/core/tablet_flat/flat_stat_table_mixed_index.h",
    "ydb/core/tx/datashard/datashard__stats.cpp",
    "ydb/core/tx/datashard/datashard_impl.h",
    "ydb/core/tx/datashard/datashard_user_table.h",
    "ydb/core/tx/schemeshard/schemeshard__init.cpp",
    "ydb/core/tx/schemeshard/schemeshard__table_stats.cpp",
    "ydb/core/tx/schemeshard/schemeshard_impl.cpp",
    "ydb/core/tx/schemeshard/schemeshard_info_types.cpp",
    "ydb/core/tx/schemeshard/schemeshard_info_types.h",
    "ydb/core/tx/schemeshard/schemeshard_path_describer.cpp",
    "ydb/core/tx/schemeshard/schemeshard_schema.h"
  ],
  "modified_test_files": [
    "ydb/tests/functional/scheme_tests/canondata/tablet_scheme_tests.TestTabletSchemes.test_tablet_schemes_flat_schemeshard_/flat_schemeshard.schema"
  ]
}