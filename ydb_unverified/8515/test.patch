diff --git a/ydb/core/testlib/test_client.cpp b/ydb/core/testlib/test_client.cpp
index 8efd3790b3ac..50d4406fabc3 100644
--- a/ydb/core/testlib/test_client.cpp
+++ b/ydb/core/testlib/test_client.cpp
@@ -2219,54 +2219,6 @@ namespace Tests {
         UNIT_ASSERT((NMsgBusProxy::EResponseStatus)responseDelete.GetStatus());
     }
 
-    bool TClient::LocalQuery(const ui64 tabletId, const TString &pgmText, NKikimrMiniKQL::TResult& result) {
-        TAutoPtr<NMsgBusProxy::TBusTabletLocalMKQL> request = new NMsgBusProxy::TBusTabletLocalMKQL();
-        request->Record.SetTabletID(ChangeStateStorage(tabletId, Domain));
-        request->Record.SetWithRetry(true);
-        auto *mkql = request->Record.MutableProgram();
-        mkql->MutableProgram()->SetText(pgmText);
-
-        TAutoPtr<NBus::TBusMessage> reply;
-        auto status = SyncCall(request, reply);
-        UNIT_ASSERT_VALUES_EQUAL(status, NBus::MESSAGE_OK);
-
-        const NKikimrClient::TResponse &response = dynamic_cast<NMsgBusProxy::TBusResponse *>(reply.Get())->Record;
-        UNIT_ASSERT_VALUES_EQUAL(response.GetStatus(), NMsgBusProxy::MSTATUS_OK);
-
-        if (response.HasExecutionEngineEvaluatedResponse())
-            result.CopyFrom(response.GetExecutionEngineEvaluatedResponse());
-
-        return response.GetExecutionEngineResponseStatus() == ui32(NMiniKQL::IEngineFlat::EStatus::Complete);
-    }
-
-    bool TClient::LocalSchemeTx(const ui64 tabletId, const NTabletFlatScheme::TSchemeChanges& changes, bool dryRun,
-                                NTabletFlatScheme::TSchemeChanges& scheme, TString& err) {
-        TAutoPtr<NMsgBusProxy::TBusTabletLocalSchemeTx> request = new NMsgBusProxy::TBusTabletLocalSchemeTx();
-        request->Record.SetTabletID(ChangeStateStorage(tabletId, Domain));
-        request->Record.SetDryRun(dryRun);
-        auto *schemeChanges = request->Record.MutableSchemeChanges();
-        schemeChanges->CopyFrom(changes);
-
-        TAutoPtr<NBus::TBusMessage> reply;
-        auto status = SyncCall(request, reply);
-        UNIT_ASSERT_EQUAL(status, NBus::MESSAGE_OK);
-
-        const NKikimrClient::TResponse &response = dynamic_cast<NMsgBusProxy::TBusResponse *>(reply.Get())->Record;
-        UNIT_ASSERT_EQUAL(response.GetStatus(), NMsgBusProxy::MSTATUS_OK);
-
-        err = response.GetErrorReason();
-        scheme.CopyFrom(response.GetLocalDbScheme());
-
-        return err.empty();
-    }
-
-    bool TClient::LocalSchemeTx(const ui64 tabletId, const TString &schemeChangesStr, bool dryRun,
-                                NTabletFlatScheme::TSchemeChanges& scheme, TString& err) {
-        NTabletFlatScheme::TSchemeChanges schemeChanges;
-        ::google::protobuf::TextFormat::ParseFromString(schemeChangesStr, &schemeChanges);
-        return LocalSchemeTx(tabletId, schemeChanges, dryRun, scheme, err);
-    }
-
     bool TClient::Compile(const TString &mkql, TString &compiled) {
         TAutoPtr<NMsgBusProxy::TBusRequest> request = new NMsgBusProxy::TBusRequest();
         auto* mkqlTx = request->Record.MutableTransaction()->MutableMiniKQLTransaction();
diff --git a/ydb/core/testlib/test_client.h b/ydb/core/testlib/test_client.h
index c88ee45139b8..5e8b05121e85 100644
--- a/ydb/core/testlib/test_client.h
+++ b/ydb/core/testlib/test_client.h
@@ -487,11 +487,6 @@ namespace Tests {
         ui32 FlatQueryRaw(const TString &query, TFlatQueryOptions& opts, NKikimrClient::TResponse& response, int retryCnt = 10);
 
         bool Compile(const TString &mkql, TString &compiled);
-        bool LocalQuery(ui64 tabletId, const TString &pgmText, NKikimrMiniKQL::TResult& result);
-        bool LocalSchemeTx(const ui64 tabletId, const NTabletFlatScheme::TSchemeChanges& schemeChanges, bool dryRun,
-                           NTabletFlatScheme::TSchemeChanges& scheme, TString& err);
-        bool LocalSchemeTx(const ui64 tabletId, const TString& schemeChanges, bool dryRun,
-                           NTabletFlatScheme::TSchemeChanges& scheme, TString& err);
         void SetSecurityToken(const TString& token) { SecurityToken = token; }
         void ModifyOwner(const TString& parent, const TString& name, const TString& owner);
         void ModifyACL(const TString& parent, const TString& name, const TString& acl);
diff --git a/ydb/core/testlib/tx_helpers.cpp b/ydb/core/testlib/tx_helpers.cpp
index 9dd4864318a9..d014bc4b220d 100644
--- a/ydb/core/testlib/tx_helpers.cpp
+++ b/ydb/core/testlib/tx_helpers.cpp
@@ -6,30 +6,64 @@
 
 #include <ydb/core/base/tablet.h>
 #include <ydb/core/testlib/tablet_helpers.h>
+#include <ydb/core/protos/tx_proxy.pb.h>
+#include <ydb/library/mkql_proto/protos/minikql.pb.h>
 
 namespace NKikimr {
 
-NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId, const TString& schemeChangesStr, bool dryRun,
-                    NTabletFlatScheme::TSchemeChanges& scheme, TString& err) {
+NKikimrProto::EReplyStatus LocalQuery(TTestActorRuntime& runtime, ui64 tabletId,
+    const TString& program, NKikimrMiniKQL::TResult& result)
+{
     TActorId sender = runtime.AllocateEdgeActor();
 
-    auto evTx = new TEvTablet::TEvLocalSchemeTx;
-    evTx->Record.SetDryRun(dryRun);
-    auto schemeChanges = evTx->Record.MutableSchemeChanges();
-    bool parseResult = ::google::protobuf::TextFormat::ParseFromString(schemeChangesStr, schemeChanges);
-    UNIT_ASSERT_C(parseResult, "protobuf parsing failed");
+    auto* req = new TEvTablet::TEvLocalMKQL;
+    auto* tx = req->Record.MutableProgram();
+    tx->MutableProgram()->SetText(program);
+
+    ForwardToTablet(runtime, tabletId, sender, req);
+
+    auto ev = runtime.GrabEdgeEvent<TEvTablet::TEvLocalMKQLResponse>(sender);
+    UNIT_ASSERT(ev);
+    auto* msg = ev->Get();
+
+    result = msg->Record.GetExecutionEngineEvaluatedResponse();
+
+    // emulate enum behavior from proto3
+    return static_cast<NKikimrProto::EReplyStatus>(msg->Record.GetStatus());
+}
 
-    ForwardToTablet(runtime, tabletId, sender, evTx);
+NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId,
+    const NTabletFlatScheme::TSchemeChanges& schemeChanges, bool dryRun,
+    NTabletFlatScheme::TSchemeChanges& scheme, TString& err)
+{
+    TActorId sender = runtime.AllocateEdgeActor();
+
+    auto* req = new TEvTablet::TEvLocalSchemeTx;
+    *req->Record.MutableSchemeChanges() = schemeChanges;
+    req->Record.SetDryRun(dryRun);
 
-    TAutoPtr<IEventHandle> handle;
-    auto event = runtime.GrabEdgeEvent<TEvTablet::TEvLocalSchemeTxResponse>(handle);
-    UNIT_ASSERT(event);
+    ForwardToTablet(runtime, tabletId, sender, req);
 
-    err = event->Record.GetErrorReason();
-    scheme.CopyFrom(event->Record.GetFullScheme());
+    auto ev = runtime.GrabEdgeEvent<TEvTablet::TEvLocalSchemeTxResponse>(sender);
+    UNIT_ASSERT(ev);
+    auto* msg = ev->Get();
+
+    err = msg->Record.GetErrorReason();
+    scheme.CopyFrom(msg->Record.GetFullScheme());
 
     // emulate enum behavior from proto3
-    return static_cast<NKikimrProto::EReplyStatus>(event->Record.GetStatus());
+    return static_cast<NKikimrProto::EReplyStatus>(msg->Record.GetStatus());
+}
+
+NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId,
+    const TString& schemeChangesStr, bool dryRun,
+    NTabletFlatScheme::TSchemeChanges& scheme, TString& err)
+{
+    NTabletFlatScheme::TSchemeChanges schemeChanges;
+    bool parseResult = ::google::protobuf::TextFormat::ParseFromString(schemeChangesStr, &schemeChanges);
+    UNIT_ASSERT_C(parseResult, "protobuf parsing failed");
+
+    return LocalSchemeTx(runtime, tabletId, schemeChanges, dryRun, scheme, err);
 }
 
 ui64 GetExecutorCacheSize(TTestActorRuntime& runtime, ui64 tabletId) {
diff --git a/ydb/core/testlib/tx_helpers.h b/ydb/core/testlib/tx_helpers.h
index f3f4145a4ace..01de42184bc1 100644
--- a/ydb/core/testlib/tx_helpers.h
+++ b/ydb/core/testlib/tx_helpers.h
@@ -3,9 +3,22 @@
 #include <ydb/core/protos/scheme_log.pb.h>
 #include <ydb/core/testlib/actors/test_runtime.h>
 
+namespace NKikimrMiniKQL {
+    class TResult;
+}
+
 namespace NKikimr {
 
-NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId, const TString& schemeChangesStr, bool dryRun, NTabletFlatScheme::TSchemeChanges& scheme, TString& err);
+NKikimrProto::EReplyStatus LocalQuery(TTestActorRuntime& runtime, ui64 tabletId,
+    const TString& program, NKikimrMiniKQL::TResult& result);
+
+NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId,
+    const NTabletFlatScheme::TSchemeChanges& schemeChanges, bool dryRun,
+    NTabletFlatScheme::TSchemeChanges& scheme, TString& err);
+
+NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId,
+    const TString& schemeChangesStr, bool dryRun,
+    NTabletFlatScheme::TSchemeChanges& scheme, TString& err);
 
 ui64 GetExecutorCacheSize(TTestActorRuntime& runtime, ui64 tabletId);
 
