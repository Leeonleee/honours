{
  "repo": "ydb-platform/ydb",
  "pull_number": 8515,
  "instance_id": "ydb-platform__ydb-8515",
  "issue_numbers": [
    "8436"
  ],
  "base_commit": "01c9738746c7931123e0f4bd6287b57af7eaf919",
  "patch": "diff --git a/ydb/core/client/client_ut.cpp b/ydb/core/client/client_ut.cpp\nindex 952f9a44a6b6..96dde076bc01 100644\n--- a/ydb/core/client/client_ut.cpp\n+++ b/ydb/core/client/client_ut.cpp\n@@ -2,6 +2,7 @@\n #include <ydb/library/services/services.pb.h>\n #include <ydb/core/tablet/tablet_impl.h>\n #include <ydb/core/testlib/test_client.h>\n+#include <ydb/core/testlib/tx_helpers.h>\n #include <ydb/core/tx/tx_proxy/proxy.h>\n #include <ydb/core/util/console.h>\n #include <ydb/core/client/minikql_compile/yql_expr_minikql.h>\n@@ -337,11 +338,13 @@ Y_UNIT_TEST_SUITE(TClientTest) {\n         TClient client(settings);\n \n         NKikimrMiniKQL::TResult res;\n-        UNIT_ASSERT(client.LocalQuery(TxAllocator, \"(\"\n-            \"(let row '('('dummyKey (Bool 'true))))\"\n-            \"(let select '('reservedIds))\"\n-            \"(return (AsList (SetResult 'reservedIds (SelectRow 'config row select))))\"\n-        \")\", res));\n+        UNIT_ASSERT_VALUES_EQUAL(\n+            LocalQuery(*server.GetRuntime(), TxAllocator, \"(\"\n+                \"(let row '('('dummyKey (Bool 'true))))\"\n+                \"(let select '('reservedIds))\"\n+                \"(return (AsList (SetResult 'reservedIds (SelectRow 'config row select))))\"\n+            \")\", res),\n+            NKikimrProto::OK);\n \n         {\n             TValue value = TValue::Create(res.GetValue(), res.GetType());\n@@ -1792,15 +1795,14 @@ Y_UNIT_TEST_SUITE(TClientTest) {\n \n         const auto settings = TServerSettings(port);\n         TServer server(settings);\n-        TClient client(settings);\n \n         NTabletFlatScheme::TSchemeChanges scheme1;\n         NTabletFlatScheme::TSchemeChanges scheme2;\n         TString err;\n-        bool success = client.LocalSchemeTx(Tests::Hive, \"\", true, scheme1, err);\n-        UNIT_ASSERT(success);\n-        success = client.LocalSchemeTx(Tests::Hive, \"\", false, scheme2, err);\n-        UNIT_ASSERT(success);\n+        auto status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, \"\", true, scheme1, err);\n+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);\n+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, \"\", false, scheme2, err);\n+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);\n \n         UNIT_ASSERT_VALUES_EQUAL(ToString(scheme1), ToString(scheme2));\n     }\n@@ -1815,10 +1817,10 @@ Y_UNIT_TEST_SUITE(TClientTest) {\n \n         NTabletFlatScheme::TSchemeChanges scheme;\n         TString err;\n-        bool success = false;\n+        NKikimrProto::EReplyStatus status;\n \n-        success = client.LocalSchemeTx(Tests::Hive, \"\", true, scheme, err);\n-        UNIT_ASSERT(success);\n+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, \"\", true, scheme, err);\n+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);\n         TString oldScheme = ToString(scheme);\n \n         TString change =  R\"___(\n@@ -1836,17 +1838,18 @@ Y_UNIT_TEST_SUITE(TClientTest) {\n                 )___\";\n \n         // Dry run first\n-        success = client.LocalSchemeTx(Tests::Hive, change, true, scheme, err);\n-        UNIT_ASSERT(success);\n+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, change, true, scheme, err);\n+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);\n         TString dryRunScheme = ToString(scheme);\n         // Re-read\n-        success = client.LocalSchemeTx(Tests::Hive, \"\", true, scheme, err);\n+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, \"\", true, scheme, err);\n+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);\n         TString newScheme = ToString(scheme);\n         UNIT_ASSERT_VALUES_EQUAL_C(newScheme, oldScheme, \"Schema changed by dry-run\");\n \n         // Update\n-        success = client.LocalSchemeTx(Tests::Hive, change, false, scheme, err);\n-        UNIT_ASSERT(success);\n+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, change, false, scheme, err);\n+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);\n         newScheme = ToString(scheme);\n         UNIT_ASSERT_VALUES_EQUAL_C(newScheme, dryRunScheme, \"Dry-run result is not equal\");\n \n@@ -1868,10 +1871,10 @@ Y_UNIT_TEST_SUITE(TClientTest) {\n \n         NTabletFlatScheme::TSchemeChanges schemeInitial;\n         TString err;\n-        bool success = false;\n+        NKikimrProto::EReplyStatus status;\n \n-        success = client.LocalSchemeTx(Tests::DummyTablet1, \"\", true, schemeInitial, err);\n-        UNIT_ASSERT(success);\n+        status = LocalSchemeTx(*server.GetRuntime(), Tests::DummyTablet1, \"\", true, schemeInitial, err);\n+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);\n         const TString oldScheme = ToString(schemeInitial);\n \n         TString change =  R\"___(\n@@ -1883,8 +1886,8 @@ Y_UNIT_TEST_SUITE(TClientTest) {\n \n         // Update\n         NTabletFlatScheme::TSchemeChanges schemeChanged;\n-        success = client.LocalSchemeTx(Tests::DummyTablet1, change, false, schemeChanged, err);\n-        UNIT_ASSERT(success);\n+        status = LocalSchemeTx(*server.GetRuntime(), Tests::DummyTablet1, change, false, schemeChanged, err);\n+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);\n         const TString newScheme = ToString(schemeChanged);\n \n         TString schemaDiff = DiffStrings(oldScheme, newScheme);\ndiff --git a/ydb/core/client/flat_ut.cpp b/ydb/core/client/flat_ut.cpp\nindex 4f8c3031ac0f..0d500d823e4e 100644\n--- a/ydb/core/client/flat_ut.cpp\n+++ b/ydb/core/client/flat_ut.cpp\n@@ -2,6 +2,7 @@\n \n #include <ydb/core/base/appdata.h>\n #include <ydb/core/testlib/test_client.h>\n+#include <ydb/core/testlib/tx_helpers.h>\n #include <ydb/core/tx/tx_proxy/proxy.h>\n #include <ydb/core/tx/datashard/datashard.h>\n #include <ydb/core/tx/schemeshard/schemeshard.h>\n@@ -1146,7 +1147,7 @@ Y_UNIT_TEST_SUITE(TFlatTest) {\n         ui64 schemeShardTabletId = Tests::ChangeStateStorage(Tests::SchemeRoot, Tests::TestDomain);\n \n         NKikimrMiniKQL::TResult result;\n-        bool ok = annoyingClient.LocalQuery(schemeShardTabletId, Sprintf(R\"(\n+        auto status = LocalQuery(*cleverServer.GetRuntime(), schemeShardTabletId, Sprintf(R\"(\n                                    (\n                                         (let key '('('Id (Uint64 '3)))) # SysParam_IsReadOnlyMode\n                                         (let value '('('Value (Utf8 '\"%s\"))))\n@@ -1154,7 +1155,7 @@ Y_UNIT_TEST_SUITE(TFlatTest) {\n                                         (return ret)\n                                    ))\", (isReadOnly ? \"1\" : \"0\")), result);\n         // Cerr << result << \"\\n\";\n-        UNIT_ASSERT(ok);\n+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);\n         annoyingClient.KillTablet(cleverServer, schemeShardTabletId);\n \n         // Wait for schemeshard to restart\ndiff --git a/ydb/core/client/flat_ut_client.h b/ydb/core/client/flat_ut_client.h\nindex 52608875aea9..71d55bd1fe1e 100644\n--- a/ydb/core/client/flat_ut_client.h\n+++ b/ydb/core/client/flat_ut_client.h\n@@ -77,10 +77,9 @@ class TFlatMsgBusClient : public Tests::TClient {\n         runtime->Send(new IEventHandle(MakeTabletResolverID(), sender, new TEvTabletResolver::TEvTabletProblem(tabletId, TActorId())));\n         runtime->Send(new IEventHandle(MakeTabletResolverID(), sender, new TEvTabletResolver::TEvForward(tabletId, nullptr)));\n \n-        TAutoPtr<IEventHandle> handle;\n-        auto forwardResult = runtime->GrabEdgeEventRethrow<TEvTabletResolver::TEvForwardResult>(handle);\n-        UNIT_ASSERT(forwardResult && forwardResult->Tablet);\n-        runtime->Send(new IEventHandle(forwardResult->Tablet, sender, new TEvents::TEvPoisonPill()));\n+        auto ev = runtime->GrabEdgeEventRethrow<TEvTabletResolver::TEvForwardResult>(sender);\n+        UNIT_ASSERT(ev && ev->Get()->Tablet);\n+        runtime->Send(new IEventHandle(ev->Get()->Tablet, sender, new TEvents::TEvPoisonPill()));\n         runtime->Send(new IEventHandle(MakeTabletResolverID(), sender, new TEvTabletResolver::TEvTabletProblem(tabletId, TActorId())));\n     }\n \n",
  "test_patch": "diff --git a/ydb/core/testlib/test_client.cpp b/ydb/core/testlib/test_client.cpp\nindex 8efd3790b3ac..50d4406fabc3 100644\n--- a/ydb/core/testlib/test_client.cpp\n+++ b/ydb/core/testlib/test_client.cpp\n@@ -2219,54 +2219,6 @@ namespace Tests {\n         UNIT_ASSERT((NMsgBusProxy::EResponseStatus)responseDelete.GetStatus());\n     }\n \n-    bool TClient::LocalQuery(const ui64 tabletId, const TString &pgmText, NKikimrMiniKQL::TResult& result) {\n-        TAutoPtr<NMsgBusProxy::TBusTabletLocalMKQL> request = new NMsgBusProxy::TBusTabletLocalMKQL();\n-        request->Record.SetTabletID(ChangeStateStorage(tabletId, Domain));\n-        request->Record.SetWithRetry(true);\n-        auto *mkql = request->Record.MutableProgram();\n-        mkql->MutableProgram()->SetText(pgmText);\n-\n-        TAutoPtr<NBus::TBusMessage> reply;\n-        auto status = SyncCall(request, reply);\n-        UNIT_ASSERT_VALUES_EQUAL(status, NBus::MESSAGE_OK);\n-\n-        const NKikimrClient::TResponse &response = dynamic_cast<NMsgBusProxy::TBusResponse *>(reply.Get())->Record;\n-        UNIT_ASSERT_VALUES_EQUAL(response.GetStatus(), NMsgBusProxy::MSTATUS_OK);\n-\n-        if (response.HasExecutionEngineEvaluatedResponse())\n-            result.CopyFrom(response.GetExecutionEngineEvaluatedResponse());\n-\n-        return response.GetExecutionEngineResponseStatus() == ui32(NMiniKQL::IEngineFlat::EStatus::Complete);\n-    }\n-\n-    bool TClient::LocalSchemeTx(const ui64 tabletId, const NTabletFlatScheme::TSchemeChanges& changes, bool dryRun,\n-                                NTabletFlatScheme::TSchemeChanges& scheme, TString& err) {\n-        TAutoPtr<NMsgBusProxy::TBusTabletLocalSchemeTx> request = new NMsgBusProxy::TBusTabletLocalSchemeTx();\n-        request->Record.SetTabletID(ChangeStateStorage(tabletId, Domain));\n-        request->Record.SetDryRun(dryRun);\n-        auto *schemeChanges = request->Record.MutableSchemeChanges();\n-        schemeChanges->CopyFrom(changes);\n-\n-        TAutoPtr<NBus::TBusMessage> reply;\n-        auto status = SyncCall(request, reply);\n-        UNIT_ASSERT_EQUAL(status, NBus::MESSAGE_OK);\n-\n-        const NKikimrClient::TResponse &response = dynamic_cast<NMsgBusProxy::TBusResponse *>(reply.Get())->Record;\n-        UNIT_ASSERT_EQUAL(response.GetStatus(), NMsgBusProxy::MSTATUS_OK);\n-\n-        err = response.GetErrorReason();\n-        scheme.CopyFrom(response.GetLocalDbScheme());\n-\n-        return err.empty();\n-    }\n-\n-    bool TClient::LocalSchemeTx(const ui64 tabletId, const TString &schemeChangesStr, bool dryRun,\n-                                NTabletFlatScheme::TSchemeChanges& scheme, TString& err) {\n-        NTabletFlatScheme::TSchemeChanges schemeChanges;\n-        ::google::protobuf::TextFormat::ParseFromString(schemeChangesStr, &schemeChanges);\n-        return LocalSchemeTx(tabletId, schemeChanges, dryRun, scheme, err);\n-    }\n-\n     bool TClient::Compile(const TString &mkql, TString &compiled) {\n         TAutoPtr<NMsgBusProxy::TBusRequest> request = new NMsgBusProxy::TBusRequest();\n         auto* mkqlTx = request->Record.MutableTransaction()->MutableMiniKQLTransaction();\ndiff --git a/ydb/core/testlib/test_client.h b/ydb/core/testlib/test_client.h\nindex c88ee45139b8..5e8b05121e85 100644\n--- a/ydb/core/testlib/test_client.h\n+++ b/ydb/core/testlib/test_client.h\n@@ -487,11 +487,6 @@ namespace Tests {\n         ui32 FlatQueryRaw(const TString &query, TFlatQueryOptions& opts, NKikimrClient::TResponse& response, int retryCnt = 10);\n \n         bool Compile(const TString &mkql, TString &compiled);\n-        bool LocalQuery(ui64 tabletId, const TString &pgmText, NKikimrMiniKQL::TResult& result);\n-        bool LocalSchemeTx(const ui64 tabletId, const NTabletFlatScheme::TSchemeChanges& schemeChanges, bool dryRun,\n-                           NTabletFlatScheme::TSchemeChanges& scheme, TString& err);\n-        bool LocalSchemeTx(const ui64 tabletId, const TString& schemeChanges, bool dryRun,\n-                           NTabletFlatScheme::TSchemeChanges& scheme, TString& err);\n         void SetSecurityToken(const TString& token) { SecurityToken = token; }\n         void ModifyOwner(const TString& parent, const TString& name, const TString& owner);\n         void ModifyACL(const TString& parent, const TString& name, const TString& acl);\ndiff --git a/ydb/core/testlib/tx_helpers.cpp b/ydb/core/testlib/tx_helpers.cpp\nindex 9dd4864318a9..d014bc4b220d 100644\n--- a/ydb/core/testlib/tx_helpers.cpp\n+++ b/ydb/core/testlib/tx_helpers.cpp\n@@ -6,30 +6,64 @@\n \n #include <ydb/core/base/tablet.h>\n #include <ydb/core/testlib/tablet_helpers.h>\n+#include <ydb/core/protos/tx_proxy.pb.h>\n+#include <ydb/library/mkql_proto/protos/minikql.pb.h>\n \n namespace NKikimr {\n \n-NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId, const TString& schemeChangesStr, bool dryRun,\n-                    NTabletFlatScheme::TSchemeChanges& scheme, TString& err) {\n+NKikimrProto::EReplyStatus LocalQuery(TTestActorRuntime& runtime, ui64 tabletId,\n+    const TString& program, NKikimrMiniKQL::TResult& result)\n+{\n     TActorId sender = runtime.AllocateEdgeActor();\n \n-    auto evTx = new TEvTablet::TEvLocalSchemeTx;\n-    evTx->Record.SetDryRun(dryRun);\n-    auto schemeChanges = evTx->Record.MutableSchemeChanges();\n-    bool parseResult = ::google::protobuf::TextFormat::ParseFromString(schemeChangesStr, schemeChanges);\n-    UNIT_ASSERT_C(parseResult, \"protobuf parsing failed\");\n+    auto* req = new TEvTablet::TEvLocalMKQL;\n+    auto* tx = req->Record.MutableProgram();\n+    tx->MutableProgram()->SetText(program);\n+\n+    ForwardToTablet(runtime, tabletId, sender, req);\n+\n+    auto ev = runtime.GrabEdgeEvent<TEvTablet::TEvLocalMKQLResponse>(sender);\n+    UNIT_ASSERT(ev);\n+    auto* msg = ev->Get();\n+\n+    result = msg->Record.GetExecutionEngineEvaluatedResponse();\n+\n+    // emulate enum behavior from proto3\n+    return static_cast<NKikimrProto::EReplyStatus>(msg->Record.GetStatus());\n+}\n \n-    ForwardToTablet(runtime, tabletId, sender, evTx);\n+NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId,\n+    const NTabletFlatScheme::TSchemeChanges& schemeChanges, bool dryRun,\n+    NTabletFlatScheme::TSchemeChanges& scheme, TString& err)\n+{\n+    TActorId sender = runtime.AllocateEdgeActor();\n+\n+    auto* req = new TEvTablet::TEvLocalSchemeTx;\n+    *req->Record.MutableSchemeChanges() = schemeChanges;\n+    req->Record.SetDryRun(dryRun);\n \n-    TAutoPtr<IEventHandle> handle;\n-    auto event = runtime.GrabEdgeEvent<TEvTablet::TEvLocalSchemeTxResponse>(handle);\n-    UNIT_ASSERT(event);\n+    ForwardToTablet(runtime, tabletId, sender, req);\n \n-    err = event->Record.GetErrorReason();\n-    scheme.CopyFrom(event->Record.GetFullScheme());\n+    auto ev = runtime.GrabEdgeEvent<TEvTablet::TEvLocalSchemeTxResponse>(sender);\n+    UNIT_ASSERT(ev);\n+    auto* msg = ev->Get();\n+\n+    err = msg->Record.GetErrorReason();\n+    scheme.CopyFrom(msg->Record.GetFullScheme());\n \n     // emulate enum behavior from proto3\n-    return static_cast<NKikimrProto::EReplyStatus>(event->Record.GetStatus());\n+    return static_cast<NKikimrProto::EReplyStatus>(msg->Record.GetStatus());\n+}\n+\n+NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId,\n+    const TString& schemeChangesStr, bool dryRun,\n+    NTabletFlatScheme::TSchemeChanges& scheme, TString& err)\n+{\n+    NTabletFlatScheme::TSchemeChanges schemeChanges;\n+    bool parseResult = ::google::protobuf::TextFormat::ParseFromString(schemeChangesStr, &schemeChanges);\n+    UNIT_ASSERT_C(parseResult, \"protobuf parsing failed\");\n+\n+    return LocalSchemeTx(runtime, tabletId, schemeChanges, dryRun, scheme, err);\n }\n \n ui64 GetExecutorCacheSize(TTestActorRuntime& runtime, ui64 tabletId) {\ndiff --git a/ydb/core/testlib/tx_helpers.h b/ydb/core/testlib/tx_helpers.h\nindex f3f4145a4ace..01de42184bc1 100644\n--- a/ydb/core/testlib/tx_helpers.h\n+++ b/ydb/core/testlib/tx_helpers.h\n@@ -3,9 +3,22 @@\n #include <ydb/core/protos/scheme_log.pb.h>\n #include <ydb/core/testlib/actors/test_runtime.h>\n \n+namespace NKikimrMiniKQL {\n+    class TResult;\n+}\n+\n namespace NKikimr {\n \n-NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId, const TString& schemeChangesStr, bool dryRun, NTabletFlatScheme::TSchemeChanges& scheme, TString& err);\n+NKikimrProto::EReplyStatus LocalQuery(TTestActorRuntime& runtime, ui64 tabletId,\n+    const TString& program, NKikimrMiniKQL::TResult& result);\n+\n+NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId,\n+    const NTabletFlatScheme::TSchemeChanges& schemeChanges, bool dryRun,\n+    NTabletFlatScheme::TSchemeChanges& scheme, TString& err);\n+\n+NKikimrProto::EReplyStatus LocalSchemeTx(TTestActorRuntime& runtime, ui64 tabletId,\n+    const TString& schemeChangesStr, bool dryRun,\n+    NTabletFlatScheme::TSchemeChanges& scheme, TString& err);\n \n ui64 GetExecutorCacheSize(TTestActorRuntime& runtime, ui64 tabletId);\n \n",
  "problem_statement": "Switch tests to the new tablet service\nTabletService is implemented in #6860, so functional tests which e.g. dump schema for all tablets need to switch to use the new service.\n",
  "hints_text": "",
  "created_at": "2024-08-30T08:49:09Z",
  "modified_files": [
    "ydb/core/client/client_ut.cpp",
    "ydb/core/client/flat_ut.cpp",
    "ydb/core/client/flat_ut_client.h"
  ],
  "modified_test_files": [
    "ydb/core/testlib/test_client.cpp",
    "ydb/core/testlib/test_client.h",
    "ydb/core/testlib/tx_helpers.cpp",
    "ydb/core/testlib/tx_helpers.h"
  ]
}