diff --git a/ydb/core/client/client_ut.cpp b/ydb/core/client/client_ut.cpp
index 952f9a44a6b6..96dde076bc01 100644
--- a/ydb/core/client/client_ut.cpp
+++ b/ydb/core/client/client_ut.cpp
@@ -2,6 +2,7 @@
 #include <ydb/library/services/services.pb.h>
 #include <ydb/core/tablet/tablet_impl.h>
 #include <ydb/core/testlib/test_client.h>
+#include <ydb/core/testlib/tx_helpers.h>
 #include <ydb/core/tx/tx_proxy/proxy.h>
 #include <ydb/core/util/console.h>
 #include <ydb/core/client/minikql_compile/yql_expr_minikql.h>
@@ -337,11 +338,13 @@ Y_UNIT_TEST_SUITE(TClientTest) {
         TClient client(settings);
 
         NKikimrMiniKQL::TResult res;
-        UNIT_ASSERT(client.LocalQuery(TxAllocator, "("
-            "(let row '('('dummyKey (Bool 'true))))"
-            "(let select '('reservedIds))"
-            "(return (AsList (SetResult 'reservedIds (SelectRow 'config row select))))"
-        ")", res));
+        UNIT_ASSERT_VALUES_EQUAL(
+            LocalQuery(*server.GetRuntime(), TxAllocator, "("
+                "(let row '('('dummyKey (Bool 'true))))"
+                "(let select '('reservedIds))"
+                "(return (AsList (SetResult 'reservedIds (SelectRow 'config row select))))"
+            ")", res),
+            NKikimrProto::OK);
 
         {
             TValue value = TValue::Create(res.GetValue(), res.GetType());
@@ -1792,15 +1795,14 @@ Y_UNIT_TEST_SUITE(TClientTest) {
 
         const auto settings = TServerSettings(port);
         TServer server(settings);
-        TClient client(settings);
 
         NTabletFlatScheme::TSchemeChanges scheme1;
         NTabletFlatScheme::TSchemeChanges scheme2;
         TString err;
-        bool success = client.LocalSchemeTx(Tests::Hive, "", true, scheme1, err);
-        UNIT_ASSERT(success);
-        success = client.LocalSchemeTx(Tests::Hive, "", false, scheme2, err);
-        UNIT_ASSERT(success);
+        auto status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, "", true, scheme1, err);
+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);
+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, "", false, scheme2, err);
+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);
 
         UNIT_ASSERT_VALUES_EQUAL(ToString(scheme1), ToString(scheme2));
     }
@@ -1815,10 +1817,10 @@ Y_UNIT_TEST_SUITE(TClientTest) {
 
         NTabletFlatScheme::TSchemeChanges scheme;
         TString err;
-        bool success = false;
+        NKikimrProto::EReplyStatus status;
 
-        success = client.LocalSchemeTx(Tests::Hive, "", true, scheme, err);
-        UNIT_ASSERT(success);
+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, "", true, scheme, err);
+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);
         TString oldScheme = ToString(scheme);
 
         TString change =  R"___(
@@ -1836,17 +1838,18 @@ Y_UNIT_TEST_SUITE(TClientTest) {
                 )___";
 
         // Dry run first
-        success = client.LocalSchemeTx(Tests::Hive, change, true, scheme, err);
-        UNIT_ASSERT(success);
+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, change, true, scheme, err);
+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);
         TString dryRunScheme = ToString(scheme);
         // Re-read
-        success = client.LocalSchemeTx(Tests::Hive, "", true, scheme, err);
+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, "", true, scheme, err);
+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);
         TString newScheme = ToString(scheme);
         UNIT_ASSERT_VALUES_EQUAL_C(newScheme, oldScheme, "Schema changed by dry-run");
 
         // Update
-        success = client.LocalSchemeTx(Tests::Hive, change, false, scheme, err);
-        UNIT_ASSERT(success);
+        status = LocalSchemeTx(*server.GetRuntime(), Tests::Hive, change, false, scheme, err);
+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);
         newScheme = ToString(scheme);
         UNIT_ASSERT_VALUES_EQUAL_C(newScheme, dryRunScheme, "Dry-run result is not equal");
 
@@ -1868,10 +1871,10 @@ Y_UNIT_TEST_SUITE(TClientTest) {
 
         NTabletFlatScheme::TSchemeChanges schemeInitial;
         TString err;
-        bool success = false;
+        NKikimrProto::EReplyStatus status;
 
-        success = client.LocalSchemeTx(Tests::DummyTablet1, "", true, schemeInitial, err);
-        UNIT_ASSERT(success);
+        status = LocalSchemeTx(*server.GetRuntime(), Tests::DummyTablet1, "", true, schemeInitial, err);
+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);
         const TString oldScheme = ToString(schemeInitial);
 
         TString change =  R"___(
@@ -1883,8 +1886,8 @@ Y_UNIT_TEST_SUITE(TClientTest) {
 
         // Update
         NTabletFlatScheme::TSchemeChanges schemeChanged;
-        success = client.LocalSchemeTx(Tests::DummyTablet1, change, false, schemeChanged, err);
-        UNIT_ASSERT(success);
+        status = LocalSchemeTx(*server.GetRuntime(), Tests::DummyTablet1, change, false, schemeChanged, err);
+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);
         const TString newScheme = ToString(schemeChanged);
 
         TString schemaDiff = DiffStrings(oldScheme, newScheme);
diff --git a/ydb/core/client/flat_ut.cpp b/ydb/core/client/flat_ut.cpp
index 4f8c3031ac0f..0d500d823e4e 100644
--- a/ydb/core/client/flat_ut.cpp
+++ b/ydb/core/client/flat_ut.cpp
@@ -2,6 +2,7 @@
 
 #include <ydb/core/base/appdata.h>
 #include <ydb/core/testlib/test_client.h>
+#include <ydb/core/testlib/tx_helpers.h>
 #include <ydb/core/tx/tx_proxy/proxy.h>
 #include <ydb/core/tx/datashard/datashard.h>
 #include <ydb/core/tx/schemeshard/schemeshard.h>
@@ -1146,7 +1147,7 @@ Y_UNIT_TEST_SUITE(TFlatTest) {
         ui64 schemeShardTabletId = Tests::ChangeStateStorage(Tests::SchemeRoot, Tests::TestDomain);
 
         NKikimrMiniKQL::TResult result;
-        bool ok = annoyingClient.LocalQuery(schemeShardTabletId, Sprintf(R"(
+        auto status = LocalQuery(*cleverServer.GetRuntime(), schemeShardTabletId, Sprintf(R"(
                                    (
                                         (let key '('('Id (Uint64 '3)))) # SysParam_IsReadOnlyMode
                                         (let value '('('Value (Utf8 '"%s"))))
@@ -1154,7 +1155,7 @@ Y_UNIT_TEST_SUITE(TFlatTest) {
                                         (return ret)
                                    ))", (isReadOnly ? "1" : "0")), result);
         // Cerr << result << "
";
-        UNIT_ASSERT(ok);
+        UNIT_ASSERT_VALUES_EQUAL(status, NKikimrProto::OK);
         annoyingClient.KillTablet(cleverServer, schemeShardTabletId);
 
         // Wait for schemeshard to restart
diff --git a/ydb/core/client/flat_ut_client.h b/ydb/core/client/flat_ut_client.h
index 52608875aea9..71d55bd1fe1e 100644
--- a/ydb/core/client/flat_ut_client.h
+++ b/ydb/core/client/flat_ut_client.h
@@ -77,10 +77,9 @@ class TFlatMsgBusClient : public Tests::TClient {
         runtime->Send(new IEventHandle(MakeTabletResolverID(), sender, new TEvTabletResolver::TEvTabletProblem(tabletId, TActorId())));
         runtime->Send(new IEventHandle(MakeTabletResolverID(), sender, new TEvTabletResolver::TEvForward(tabletId, nullptr)));
 
-        TAutoPtr<IEventHandle> handle;
-        auto forwardResult = runtime->GrabEdgeEventRethrow<TEvTabletResolver::TEvForwardResult>(handle);
-        UNIT_ASSERT(forwardResult && forwardResult->Tablet);
-        runtime->Send(new IEventHandle(forwardResult->Tablet, sender, new TEvents::TEvPoisonPill()));
+        auto ev = runtime->GrabEdgeEventRethrow<TEvTabletResolver::TEvForwardResult>(sender);
+        UNIT_ASSERT(ev && ev->Get()->Tablet);
+        runtime->Send(new IEventHandle(ev->Get()->Tablet, sender, new TEvents::TEvPoisonPill()));
         runtime->Send(new IEventHandle(MakeTabletResolverID(), sender, new TEvTabletResolver::TEvTabletProblem(tabletId, TActorId())));
     }
 
