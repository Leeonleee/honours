{
  "repo": "ydb-platform/ydb",
  "pull_number": 18553,
  "instance_id": "ydb-platform__ydb-18553",
  "issue_numbers": [
    "16477"
  ],
  "base_commit": "09df44ef8c5b9ed326d48d1e37596e90acdd876b",
  "patch": "diff --git a/ydb/core/viewer/json_pipe_req.cpp b/ydb/core/viewer/json_pipe_req.cpp\nindex 2926ad925ff2..4e616efc772d 100644\n--- a/ydb/core/viewer/json_pipe_req.cpp\n+++ b/ydb/core/viewer/json_pipe_req.cpp\n@@ -1077,7 +1077,7 @@ void TViewerPipeClient::HandleResolveResource(TEvTxProxySchemeCache::TEvNavigate\n             TSchemeCacheNavigate::TEntry& entry(ResourceNavigateResponse->Get()->Request->ResultSet.front());\n             SharedDatabase = CanonizePath(entry.Path);\n             Direct |= (SharedDatabase == AppData()->TenantName);\n-            DatabaseBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(SharedDatabase);\n+            ResourceBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(SharedDatabase);\n             --DataRequests; // don't count this request\n         } else {\n             AddEvent(\"Failed to resolve database - shared database not found\");\n@@ -1114,16 +1114,25 @@ void TViewerPipeClient::HandleResolve(TEvStateStorage::TEvBoardInfo::TPtr& ev) {\n         DatabaseBoardInfoResponse->Set(std::move(ev));\n         if (DatabaseBoardInfoResponse->IsOk()) {\n             if (Direct) {\n-                Bootstrap(); // retry bootstrap without redirect this time\n+                return Bootstrap(); // retry bootstrap without redirect this time\n             } else {\n-                ReplyAndPassAway(MakeForward(GetNodesFromBoardReply(DatabaseBoardInfoResponse->GetRef())));\n+                return ReplyAndPassAway(MakeForward(GetNodesFromBoardReply(DatabaseBoardInfoResponse->GetRef())));\n+            }\n+        }\n+    }\n+    if (ResourceBoardInfoResponse) {\n+        ResourceBoardInfoResponse->Set(std::move(ev));\n+        if (ResourceBoardInfoResponse->IsOk()) {\n+            if (Direct) {\n+                return Bootstrap(); // retry bootstrap without redirect this time\n+            } else {\n+                return ReplyAndPassAway(MakeForward(GetNodesFromBoardReply(ResourceBoardInfoResponse->GetRef())));\n             }\n-        } else {\n-            AddEvent(\"Failed to resolve database nodes\");\n-            Direct = true;\n-            Bootstrap(); // retry bootstrap without redirect this time\n         }\n     }\n+    AddEvent(\"Failed to resolve database nodes\");\n+    Direct = true;\n+    Bootstrap(); // retry bootstrap without redirect this time\n }\n \n void TViewerPipeClient::HandleTimeout() {\ndiff --git a/ydb/core/viewer/json_pipe_req.h b/ydb/core/viewer/json_pipe_req.h\nindex 277b98e184cd..d06221625b7b 100644\n--- a/ydb/core/viewer/json_pipe_req.h\n+++ b/ydb/core/viewer/json_pipe_req.h\n@@ -192,6 +192,7 @@ class TViewerPipeClient : public TActorBootstrapped<TViewerPipeClient> {\n     std::optional<TRequestResponse<TEvTxProxySchemeCache::TEvNavigateKeySetResult>> DatabaseNavigateResponse;\n     std::optional<TRequestResponse<TEvTxProxySchemeCache::TEvNavigateKeySetResult>> ResourceNavigateResponse;\n     std::optional<TRequestResponse<TEvStateStorage::TEvBoardInfo>> DatabaseBoardInfoResponse;\n+    std::optional<TRequestResponse<TEvStateStorage::TEvBoardInfo>> ResourceBoardInfoResponse;\n \n     NTabletPipe::TClientConfig GetPipeClientConfig();\n \ndiff --git a/ydb/core/viewer/viewer_nodes.h b/ydb/core/viewer/viewer_nodes.h\nindex 20705be0eb2f..ae5ca08619c6 100644\n--- a/ydb/core/viewer/viewer_nodes.h\n+++ b/ydb/core/viewer/viewer_nodes.h\n@@ -72,14 +72,17 @@ class TJsonNodes : public TViewerPipeClient {\n \n     std::optional<TRequestResponse<TEvInterconnect::TEvNodesInfo>> NodesInfoResponse;\n     std::optional<TRequestResponse<TEvWhiteboard::TEvNodeStateResponse>> NodeStateResponse;\n-    std::optional<TRequestResponse<TEvStateStorage::TEvBoardInfo>> DatabaseBoardInfoResponse;\n-    std::optional<TRequestResponse<TEvStateStorage::TEvBoardInfo>> ResourceBoardInfoResponse;\n     std::optional<TRequestResponse<TEvTxProxySchemeCache::TEvNavigateKeySetResult>> PathNavigateResponse;\n     std::unordered_map<TTabletId, TRequestResponse<TEvHive::TEvResponseHiveNodeStats>> HiveNodeStats;\n     bool HiveNodeStatsProcessed = false;\n     std::vector<TTabletId> HivesToAsk;\n     bool AskHiveAboutPaths = false;\n     bool DatabaseNavigateProcessed = false;\n+    bool ResourceNavigateProcessed = false;\n+    bool PathNavigateProcessed = false;\n+    bool DatabaseBoardInfoProcessed = false;\n+    bool ResourceBoardInfoProcessed = false;\n+    bool PDisksProcessed = false;\n \n     std::optional<TRequestResponse<NSysView::TEvSysView::TEvGetStoragePoolsResponse>> StoragePoolsResponse;\n     std::optional<TRequestResponse<NSysView::TEvSysView::TEvGetGroupsResponse>> GroupsResponse;\n@@ -113,6 +116,7 @@ class TJsonNodes : public TViewerPipeClient {\n     TString SharedDatabase;\n     bool FilterDatabase = false;\n     bool HasDatabaseNodes = false;\n+    bool HasSharedNodes = false;\n     TPathId FilterPathId;\n     TSubDomainKey SubDomainKey;\n     TSubDomainKey SharedSubDomainKey;\n@@ -150,6 +154,7 @@ class TJsonNodes : public TViewerPipeClient {\n         Pools,\n         Groups,\n         VSlots,\n+        DoneOrError,\n     };\n \n     enum class EPeerRole {\n@@ -1090,7 +1095,7 @@ class TJsonNodes : public TViewerPipeClient {\n             if (!DatabaseNavigateResponse) {\n                 DatabaseNavigateResponse = MakeRequestSchemeCacheNavigate(Database, ENavigateRequestDatabase);\n             }\n-            if (!FieldsNeeded(FieldsHiveNodeStat) && !(FilterPath && FieldsNeeded(FieldsTablets))) {\n+            if (!DatabaseBoardInfoResponse && !FieldsNeeded(FieldsHiveNodeStat) && !(FilterPath && FieldsNeeded(FieldsTablets))) {\n                 DatabaseBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(Database, EBoardInfoRequestDatabase);\n             }\n             if ((Type == EType::Storage || Type == EType::Static) && FilterStoragePools.empty() && FilterGroupIds.empty()) {\n@@ -1177,13 +1182,13 @@ class TJsonNodes : public TViewerPipeClient {\n         if (FilterDatabase) {\n             if (FilterSubDomainKey && FieldsAvailable.test(+ENodeFields::SubDomainKey)) {\n                 TNodeView nodeView;\n-                if (HasDatabaseNodes) {\n+                if (HasDatabaseNodes || !HasSharedNodes) {\n                     for (TNode* node : NodeView) {\n                         if (node->HasSubDomainKey(SubDomainKey)) {\n                             nodeView.push_back(node);\n                         }\n                     }\n-                } else {\n+                } else if (HasSharedNodes) {\n                     for (TNode* node : NodeView) {\n                         if (node->HasSubDomainKey(SharedSubDomainKey)) {\n                             nodeView.push_back(node);\n@@ -1194,16 +1199,16 @@ class TJsonNodes : public TViewerPipeClient {\n                 FoundNodes = TotalNodes = NodeView.size();\n                 InvalidateNodes();\n                 FilterDatabase = false;\n-                AddEvent(\"PreFilter Applied\");\n+                AddEvent(\"PreFilter SubDomain Applied\");\n             } else if (FieldsAvailable.test(+ENodeFields::Database)) {\n                 TNodeView nodeView;\n-                if (HasDatabaseNodes) {\n+                if (HasDatabaseNodes || !HasSharedNodes) {\n                     for (TNode* node : NodeView) {\n                         if (node->HasDatabase(Database)) {\n                             nodeView.push_back(node);\n                         }\n                     }\n-                } else {\n+                } else if (HasSharedNodes) {\n                     for (TNode* node : NodeView) {\n                         if (node->HasDatabase(SharedDatabase)) {\n                             nodeView.push_back(node);\n@@ -1214,7 +1219,7 @@ class TJsonNodes : public TViewerPipeClient {\n                 FoundNodes = TotalNodes = NodeView.size();\n                 InvalidateNodes();\n                 FilterDatabase = false;\n-                AddEvent(\"PreFilter Applied\");\n+                AddEvent(\"PreFilter Database Applied\");\n             } else {\n                 return;\n             }\n@@ -1666,7 +1671,7 @@ class TJsonNodes : public TViewerPipeClient {\n         if (PathNavigateResponse && !PathNavigateResponse->IsDone()) {\n             return false;\n         }\n-        return CurrentTimeoutState < TimeoutTablets;\n+        return true;\n     }\n \n     bool TimeToAskWhiteboard() {\n@@ -1840,7 +1845,7 @@ class TJsonNodes : public TViewerPipeClient {\n             DatabaseNavigateProcessed = true;\n         }\n \n-        if (ResourceNavigateResponse && ResourceNavigateResponse->IsDone()) { // database hive and subdomain key\n+        if (ResourceNavigateResponse && ResourceNavigateResponse->IsDone() && !ResourceNavigateProcessed) { // database hive and subdomain key\n             if (ResourceNavigateResponse->IsOk()) {\n                 auto* ev = ResourceNavigateResponse->Get();\n                 if (ev->Request->ResultSet.size() == 1 && ev->Request->ResultSet.begin()->Status == NSchemeCache::TSchemeCacheNavigate::EStatus::Ok) {\n@@ -1862,17 +1867,19 @@ class TJsonNodes : public TViewerPipeClient {\n                             }\n                         }\n                     } else {\n-                        ResourceBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(path, EBoardInfoRequestResource);\n+                        if (!ResourceBoardInfoResponse) {\n+                            ResourceBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(path, EBoardInfoRequestResource);\n+                        }\n                     }\n                 }\n             } else {\n                 NodeView.clear();\n                 AddProblem(\"no-shared-database-info\");\n             }\n-            ResourceNavigateResponse.reset();\n+            ResourceNavigateProcessed = true;\n         }\n \n-        if (PathNavigateResponse && PathNavigateResponse->IsDone()) { // filter path id\n+        if (PathNavigateResponse && PathNavigateResponse->IsDone() && !PathNavigateProcessed) { // filter path id\n             if (PathNavigateResponse->IsOk()) {\n                 auto* ev = PathNavigateResponse->Get();\n                 if (ev->Request->ResultSet.size() == 1 && ev->Request->ResultSet.begin()->Status == NSchemeCache::TSchemeCacheNavigate::EStatus::Ok) {\n@@ -1901,10 +1908,10 @@ class TJsonNodes : public TViewerPipeClient {\n             } else {\n                 AddProblem(\"no-path-info\");\n             }\n-            PathNavigateResponse.reset();\n+            PathNavigateProcessed = true;\n         }\n \n-        if (DatabaseBoardInfoResponse && DatabaseBoardInfoResponse->IsDone() && TotalNodes > 0) {\n+        if (DatabaseBoardInfoResponse && DatabaseBoardInfoResponse->IsDone() && TotalNodes > 0 && !DatabaseBoardInfoProcessed) {\n             if (DatabaseBoardInfoResponse->IsOk() && DatabaseBoardInfoResponse->Get()->Status == TEvStateStorage::TEvBoardInfo::EStatus::Ok) {\n                 TString database = GetDatabaseFromEndpointsBoardPath(DatabaseBoardInfoResponse->Get()->Path);\n                 for (const auto& entry : DatabaseBoardInfoResponse->Get()->InfoEntries) {\n@@ -1921,10 +1928,10 @@ class TJsonNodes : public TViewerPipeClient {\n             } else {\n                 AddProblem(\"no-database-board-info\");\n             }\n-            DatabaseBoardInfoResponse.reset();\n+            DatabaseBoardInfoProcessed = true;\n         }\n \n-        if (ResourceBoardInfoResponse && ResourceBoardInfoResponse->IsDone() && TotalNodes > 0) {\n+        if (ResourceBoardInfoResponse && ResourceBoardInfoResponse->IsDone() && TotalNodes > 0 && !ResourceBoardInfoProcessed) {\n             if (ResourceBoardInfoResponse->IsOk() && ResourceBoardInfoResponse->Get()->Status == TEvStateStorage::TEvBoardInfo::EStatus::Ok) {\n                 TString database = GetDatabaseFromEndpointsBoardPath(ResourceBoardInfoResponse->Get()->Path);\n                 for (const auto& entry : ResourceBoardInfoResponse->Get()->InfoEntries) {\n@@ -1933,6 +1940,7 @@ class TJsonNodes : public TViewerPipeClient {\n                         if (node) {\n                             node->Database = database;\n                             node->GotDatabaseFromResourceBoardInfo = true;\n+                            HasSharedNodes = true;\n                         }\n                     }\n                 }\n@@ -1940,7 +1948,7 @@ class TJsonNodes : public TViewerPipeClient {\n             } else {\n                 AddProblem(\"no-shared-database-board-info\");\n             }\n-            ResourceBoardInfoResponse.reset();\n+            ResourceBoardInfoProcessed = true;\n         }\n \n         if (!TimeToAskHive()) {\n@@ -1949,8 +1957,8 @@ class TJsonNodes : public TViewerPipeClient {\n \n         AddEvent(\"TimeToAskHive\");\n \n-        if (!HivesToAsk.empty()) {\n-            AddEvent(\"HivesTokHive\");\n+        if (!HivesToAsk.empty() && CurrentTimeoutState < TimeoutTablets) {\n+            AddEvent(\"HivesToAsk\");\n             std::sort(HivesToAsk.begin(), HivesToAsk.end());\n             HivesToAsk.erase(std::unique(HivesToAsk.begin(), HivesToAsk.end()), HivesToAsk.end());\n             for (TTabletId hiveId : HivesToAsk) {\n@@ -2000,6 +2008,9 @@ class TJsonNodes : public TViewerPipeClient {\n                                     if (node->SubDomainKey == SubDomainKey) {\n                                         HasDatabaseNodes = true;\n                                     }\n+                                    if (node->SubDomainKey == SharedSubDomainKey) {\n+                                        HasSharedNodes = true;\n+                                    }\n                                 }\n                             }\n                         }\n@@ -2026,6 +2037,7 @@ class TJsonNodes : public TViewerPipeClient {\n                 FilterStorageStage = EFilterStorageStage::Groups;\n             } else {\n                 AddProblem(\"bsc-storage-pools-no-data\");\n+                FilterStorageStage = EFilterStorageStage::DoneOrError;\n             }\n             StoragePoolsResponse.reset();\n         }\n@@ -2042,8 +2054,8 @@ class TJsonNodes : public TViewerPipeClient {\n                 FilterStorageStage = EFilterStorageStage::VSlots;\n             } else {\n                 AddProblem(\"bsc-storage-groups-no-data\");\n+                FilterStorageStage = EFilterStorageStage::DoneOrError;\n             }\n-            GroupsResponse.reset();\n         }\n         if ((FilterStorageStage == EFilterStorageStage::VSlots || FilterStorageStage == EFilterStorageStage::None) && VSlotsResponse && VSlotsResponse->IsDone()) {\n             if (VSlotsResponse->IsOk()) {\n@@ -2070,14 +2082,14 @@ class TJsonNodes : public TViewerPipeClient {\n                     MaximumSlotsPerDisk = std::max(MaximumSlotsPerDisk.value_or(0), slots);\n                 }\n                 FieldsAvailable.set(+ENodeFields::HasDisks);\n-                FilterStorageStage = EFilterStorageStage::None;\n+                FilterStorageStage = EFilterStorageStage::DoneOrError;\n                 ApplyEverything();\n             } else {\n                 AddProblem(\"bsc-storage-slots-no-data\");\n+                FilterStorageStage = EFilterStorageStage::DoneOrError;\n             }\n-            VSlotsResponse.reset();\n         }\n-        if (PDisksResponse && PDisksResponse->IsDone()) {\n+        if (PDisksResponse && PDisksResponse->IsDone() && !PDisksProcessed) {\n             if (PDisksResponse->IsOk()) {\n                 std::unordered_map<TNodeId, std::size_t> disksPerNode;\n                 for (const auto& pdiskEntry : PDisksResponse->Get()->Record.GetEntries()) {\n@@ -2099,7 +2111,7 @@ class TJsonNodes : public TViewerPipeClient {\n             } else {\n                 AddProblem(\"bsc-pdisks-no-data\");\n             }\n-            PDisksResponse.reset();\n+            PDisksProcessed = true;\n         }\n \n         if (!TimeToAskWhiteboard()) {\n@@ -3077,6 +3089,7 @@ class TJsonNodes : public TViewerPipeClient {\n                 }\n             }\n             if (WaitingForResponse()) {\n+                AddEvent(\"WaitingForSomethingOnTimeout\");\n                 ReplyAndPassAway();\n             }\n         }\ndiff --git a/ydb/core/viewer/viewer_tabletinfo.h b/ydb/core/viewer/viewer_tabletinfo.h\nindex 80fc3e6688e4..d6a39bb9c265 100644\n--- a/ydb/core/viewer/viewer_tabletinfo.h\n+++ b/ydb/core/viewer/viewer_tabletinfo.h\n@@ -108,6 +108,8 @@ class TJsonTabletInfo : public TJsonWhiteboardRequest<TEvWhiteboard::TEvTabletSt\n         }\n         if (DatabaseBoardInfoResponse && DatabaseBoardInfoResponse->IsOk()) {\n             TBase::RequestSettings.FilterNodeIds = TBase::GetNodesFromBoardReply(DatabaseBoardInfoResponse->GetRef());\n+        } else if (ResourceBoardInfoResponse && ResourceBoardInfoResponse->IsOk()) {\n+            TBase::RequestSettings.FilterNodeIds = TBase::GetNodesFromBoardReply(ResourceBoardInfoResponse->GetRef());\n         } else if (Database || SharedDatabase) {\n             RequestStateStorageEndpointsLookup(SharedDatabase ? SharedDatabase : Database);\n             Become(&TThis::StateRequestedLookup, TDuration::MilliSeconds(TBase::RequestSettings.Timeout), new TEvents::TEvWakeup());\ndiff --git a/ydb/core/viewer/viewer_tenantinfo.h b/ydb/core/viewer/viewer_tenantinfo.h\nindex ce91debd83b1..718c4a6159f4 100644\n--- a/ydb/core/viewer/viewer_tenantinfo.h\n+++ b/ydb/core/viewer/viewer_tenantinfo.h\n@@ -991,6 +991,48 @@ class TJsonTenantInfo : public TViewerPipeClient {\n         ReplyAndPassAway(GetHTTPOKJSON(json.Str()));\n     }\n \n+    void HandleTimeout() {\n+        TString error = \"Timeout\";\n+        if (ListTenantsResponse) {\n+            ListTenantsResponse->Error(error);\n+        }\n+        for (auto& [_, request] : TenantStatusResponses) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : NavigateKeySetResult) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : DescribeSchemeResult) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : HiveDomainStats) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : HiveStorageStats) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : SystemStateResponse) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : TabletStateResponse) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : OffloadedSystemStateResponse) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : OffloadedTabletStateResponse) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : SelfCheckResults) {\n+            request.Error(error);\n+        }\n+        for (auto& [_, request] : MetadataCacheEndpointsLookup) {\n+            request.Error(error);\n+        }\n+        ReplyAndPassAway();\n+        TBase::HandleTimeout();\n+    }\n+\n     static YAML::Node GetSwagger() {\n         TSimpleYamlBuilder yaml({\n             .Method = \"get\",\ndiff --git a/ydb/core/viewer/viewer_ut.cpp b/ydb/core/viewer/viewer_ut.cpp\nindex 9a27c1c6d3d4..0a575bbecaaf 100644\n--- a/ydb/core/viewer/viewer_ut.cpp\n+++ b/ydb/core/viewer/viewer_ut.cpp\n@@ -795,8 +795,8 @@ Y_UNIT_TEST_SUITE(Viewer) {\n         TMonService2HttpRequest monReq(nullptr, &httpReq, nullptr, page.Get(), \"/json/nodes\", nullptr);\n         auto request = MakeHolder<NMon::TEvHttpInfo>(monReq);\n \n-        size_t staticNodeId = 0;\n-        size_t sharedDynNodeId = 0;\n+        //size_t staticNodeId = runtime.GetNodeId(0);\n+        size_t sharedDynNodeId = runtime.GetNodeId(1);\n         auto observerFunc = [&](TAutoPtr<IEventHandle>& ev) {\n             switch (ev->GetTypeRewrite()) {\n                 case TEvTxProxySchemeCache::EvNavigateKeySetResult: {\n@@ -804,14 +804,6 @@ Y_UNIT_TEST_SUITE(Viewer) {\n                     ChangeNavigateKeySetResultServerless(x, runtime);\n                     break;\n                 }\n-                case TEvInterconnect::EvNodesInfo: {\n-                    auto *x = reinterpret_cast<TEvInterconnect::TEvNodesInfo::TPtr*>(&ev);\n-                    const TVector<TEvInterconnect::TNodeInfo> &nodes = (*x)->Get()->Nodes;\n-                    UNIT_ASSERT_EQUAL(nodes.size(), 2);\n-                    staticNodeId = nodes[0];\n-                    sharedDynNodeId = nodes[1];\n-                    break;\n-                }\n                 case TEvStateStorage::EvBoardInfo: {\n                     auto *x = reinterpret_cast<TEvStateStorage::TEvBoardInfo::TPtr*>(&ev);\n                     ChangeBoardInfoServerless(x, { sharedDynNodeId });\n@@ -873,9 +865,9 @@ Y_UNIT_TEST_SUITE(Viewer) {\n         TMonService2HttpRequest monReq(nullptr, &httpReq, nullptr, page.Get(), \"/json/nodes\", nullptr);\n         auto request = MakeHolder<NMon::TEvHttpInfo>(monReq);\n \n-        size_t staticNodeId = 0;\n-        size_t sharedDynNodeId = 0;\n-        size_t exclusiveDynNodeId = 0;\n+        //size_t staticNodeId = runtime.GetNodeId(0);\n+        size_t sharedDynNodeId = runtime.GetNodeId(1);\n+        size_t exclusiveDynNodeId = runtime.GetNodeId(2);\n         auto observerFunc = [&](TAutoPtr<IEventHandle>& ev) {\n             switch (ev->GetTypeRewrite()) {\n                 case TEvTxProxySchemeCache::EvNavigateKeySetResult: {\n@@ -883,15 +875,6 @@ Y_UNIT_TEST_SUITE(Viewer) {\n                     ChangeNavigateKeySetResultServerless(x, runtime);\n                     break;\n                 }\n-                case TEvInterconnect::EvNodesInfo: {\n-                    auto *x = reinterpret_cast<TEvInterconnect::TEvNodesInfo::TPtr*>(&ev);\n-                    const TVector<TEvInterconnect::TNodeInfo> &nodes = (*x)->Get()->Nodes;\n-                    UNIT_ASSERT_EQUAL(nodes.size(), 3);\n-                    staticNodeId = nodes[0];\n-                    sharedDynNodeId = nodes[1];\n-                    exclusiveDynNodeId = nodes[2];\n-                    break;\n-                }\n                 case TEvStateStorage::EvBoardInfo: {\n                     auto *x = reinterpret_cast<TEvStateStorage::TEvBoardInfo::TPtr*>(&ev);\n                     ChangeBoardInfoServerless(x, { sharedDynNodeId }, { exclusiveDynNodeId });\n@@ -956,9 +939,9 @@ Y_UNIT_TEST_SUITE(Viewer) {\n         TMonService2HttpRequest monReq(nullptr, &httpReq, nullptr, page.Get(), \"/json/nodes\", nullptr);\n         auto request = MakeHolder<NMon::TEvHttpInfo>(monReq);\n \n-        size_t staticNodeId = 0;\n-        size_t sharedDynNodeId = 0;\n-        size_t exclusiveDynNodeId = 0;\n+        //size_t staticNodeId = runtime.GetNodeId(0);\n+        size_t sharedDynNodeId = runtime.GetNodeId(1);\n+        size_t exclusiveDynNodeId = runtime.GetNodeId(2);\n         auto observerFunc = [&](TAutoPtr<IEventHandle>& ev) {\n             switch (ev->GetTypeRewrite()) {\n                 case TEvTxProxySchemeCache::EvNavigateKeySetResult: {\n@@ -966,15 +949,6 @@ Y_UNIT_TEST_SUITE(Viewer) {\n                     ChangeNavigateKeySetResultServerless(x, runtime);\n                     break;\n                 }\n-                case TEvInterconnect::EvNodesInfo: {\n-                    auto *x = reinterpret_cast<TEvInterconnect::TEvNodesInfo::TPtr*>(&ev);\n-                    const TVector<TEvInterconnect::TNodeInfo> &nodes = (*x)->Get()->Nodes;\n-                    UNIT_ASSERT_EQUAL(nodes.size(), 3);\n-                    staticNodeId = nodes[0];\n-                    sharedDynNodeId = nodes[1];\n-                    exclusiveDynNodeId = nodes[2];\n-                    break;\n-                }\n                 case TEvStateStorage::EvBoardInfo: {\n                     auto *x = reinterpret_cast<TEvStateStorage::TEvBoardInfo::TPtr*>(&ev);\n                     ChangeBoardInfoServerless(x, { sharedDynNodeId }, { exclusiveDynNodeId });\n@@ -1041,10 +1015,10 @@ Y_UNIT_TEST_SUITE(Viewer) {\n         TMonService2HttpRequest monReq(nullptr, &httpReq, nullptr, page.Get(), \"/json/nodes\", nullptr);\n         auto request = MakeHolder<NMon::TEvHttpInfo>(monReq);\n \n-        size_t staticNodeId = 0;\n-        size_t sharedDynNodeId = 0;\n-        size_t exclusiveDynNodeId = 0;\n-        size_t secondExclusiveDynNodeId = 0;\n+        //size_t staticNodeId = runtime.GetNodeId(0);\n+        size_t sharedDynNodeId = runtime.GetNodeId(1);\n+        size_t exclusiveDynNodeId = runtime.GetNodeId(2);\n+        size_t secondExclusiveDynNodeId = runtime.GetNodeId(3);\n         auto observerFunc = [&](TAutoPtr<IEventHandle>& ev) {\n             switch (ev->GetTypeRewrite()) {\n                 case TEvTxProxySchemeCache::EvNavigateKeySetResult: {\n@@ -1052,16 +1026,6 @@ Y_UNIT_TEST_SUITE(Viewer) {\n                     ChangeNavigateKeySetResultServerless(x, runtime);\n                     break;\n                 }\n-                case TEvInterconnect::EvNodesInfo: {\n-                    auto *x = reinterpret_cast<TEvInterconnect::TEvNodesInfo::TPtr*>(&ev);\n-                    const TVector<TEvInterconnect::TNodeInfo> &nodes = (*x)->Get()->Nodes;\n-                    UNIT_ASSERT_EQUAL(nodes.size(), 4);\n-                    staticNodeId = nodes[0];\n-                    sharedDynNodeId = nodes[1];\n-                    exclusiveDynNodeId = nodes[2];\n-                    secondExclusiveDynNodeId = nodes[3];\n-                    break;\n-                }\n                 case TEvStateStorage::EvBoardInfo: {\n                     auto *x = reinterpret_cast<TEvStateStorage::TEvBoardInfo::TPtr*>(&ev);\n                     ChangeBoardInfoServerless(x, { sharedDynNodeId }, { exclusiveDynNodeId, secondExclusiveDynNodeId });\n",
  "test_patch": "diff --git a/ydb/core/viewer/tests/canondata/result.json b/ydb/core/viewer/tests/canondata/result.json\nindex 3e6200f3d290..d9609246e172 100644\n--- a/ydb/core/viewer/tests/canondata/result.json\n+++ b/ydb/core/viewer/tests/canondata/result.json\n@@ -859,6 +859,49 @@\n             \"StartOffset\": 0,\n             \"Truncated\": false\n         },\n+        \"response_last_offset\": {\n+            \"EndOffset\": 21,\n+            \"Messages\": [\n+                {\n+                    \"Codec\": 0,\n+                    \"CreateTimestamp\": \"not-zero-number\",\n+                    \"Message\": \"bWVzc2FnZS0w\",\n+                    \"Offset\": 0,\n+                    \"OriginalSize\": 9,\n+                    \"ProducerId\": \"not-zero-number-text\",\n+                    \"SeqNo\": 1,\n+                    \"StorageSize\": 9,\n+                    \"TimestampDiff\": \"not-zero-number\",\n+                    \"WriteTimestamp\": \"not-zero-number\"\n+                },\n+                {\n+                    \"Codec\": 0,\n+                    \"CreateTimestamp\": \"not-zero-number\",\n+                    \"Message\": \"bWVzc2FnZS0x\",\n+                    \"Offset\": 1,\n+                    \"OriginalSize\": 9,\n+                    \"ProducerId\": \"not-zero-number-text\",\n+                    \"SeqNo\": 2,\n+                    \"StorageSize\": 9,\n+                    \"TimestampDiff\": \"not-zero-number\",\n+                    \"WriteTimestamp\": \"not-zero-number\"\n+                },\n+                {\n+                    \"Codec\": 0,\n+                    \"CreateTimestamp\": \"not-zero-number\",\n+                    \"Message\": \"bWVzc2FnZS0y\",\n+                    \"Offset\": 2,\n+                    \"OriginalSize\": 9,\n+                    \"ProducerId\": \"not-zero-number-text\",\n+                    \"SeqNo\": 3,\n+                    \"StorageSize\": 9,\n+                    \"TimestampDiff\": \"not-zero-number\",\n+                    \"WriteTimestamp\": \"not-zero-number\"\n+                }\n+            ],\n+            \"StartOffset\": 0,\n+            \"Truncated\": false\n+        },\n         \"response_metadata\": {\n             \"EndOffset\": 21,\n             \"Messages\": [\n@@ -907,68 +950,6 @@\n             \"StartOffset\": 0,\n             \"Truncated\": false\n         },\n-        \"response_truncated\": {\n-            \"EndOffset\": 21,\n-            \"Messages\": [\n-                {\n-                    \"Codec\": 1,\n-                    \"CreateTimestamp\": \"not-zero-number\",\n-                    \"Message\": \"Y29tcHI=\",\n-                    \"Offset\": 20,\n-                    \"OriginalSize\": 20,\n-                    \"ProducerId\": \"not-zero-number-text\",\n-                    \"SeqNo\": 21,\n-                    \"StorageSize\": 38,\n-                    \"TimestampDiff\": \"not-zero-number\",\n-                    \"WriteTimestamp\": \"not-zero-number\"\n-                }\n-            ],\n-            \"StartOffset\": 0,\n-            \"Truncated\": true\n-        },\n-        \"response_last_offset\": {\n-            \"EndOffset\": 21,\n-            \"Messages\": [\n-                {\n-                    \"Codec\": 0,\n-                    \"CreateTimestamp\": \"not-zero-number\",\n-                    \"Message\": \"bWVzc2FnZS0w\",\n-                    \"Offset\": 0,\n-                    \"OriginalSize\": 9,\n-                    \"ProducerId\": \"not-zero-number-text\",\n-                    \"SeqNo\": 1,\n-                    \"StorageSize\": 9,\n-                    \"TimestampDiff\": \"not-zero-number\",\n-                    \"WriteTimestamp\": \"not-zero-number\"\n-                },\n-                {\n-                    \"Codec\": 0,\n-                    \"CreateTimestamp\": \"not-zero-number\",\n-                    \"Message\": \"bWVzc2FnZS0x\",\n-                    \"Offset\": 1,\n-                    \"OriginalSize\": 9,\n-                    \"ProducerId\": \"not-zero-number-text\",\n-                    \"SeqNo\": 2,\n-                    \"StorageSize\": 9,\n-                    \"TimestampDiff\": \"not-zero-number\",\n-                    \"WriteTimestamp\": \"not-zero-number\"\n-                },\n-                {\n-                    \"Codec\": 0,\n-                    \"CreateTimestamp\": \"not-zero-number\",\n-                    \"Message\": \"bWVzc2FnZS0y\",\n-                    \"Offset\": 2,\n-                    \"OriginalSize\": 9,\n-                    \"ProducerId\": \"not-zero-number-text\",\n-                    \"SeqNo\": 3,\n-                    \"StorageSize\": 9,\n-                    \"TimestampDiff\": \"not-zero-number\",\n-                    \"WriteTimestamp\": \"not-zero-number\"\n-                }\n-            ],\n-            \"StartOffset\": 0,\n-            \"Truncated\": false\n-        },\n         \"response_read\": {\n             \"EndOffset\": 21,\n             \"Messages\": [\n@@ -1035,6 +1016,25 @@\n             ],\n             \"StartOffset\": 0,\n             \"Truncated\": false\n+        },\n+        \"response_truncated\": {\n+            \"EndOffset\": 21,\n+            \"Messages\": [\n+                {\n+                    \"Codec\": 1,\n+                    \"CreateTimestamp\": \"not-zero-number\",\n+                    \"Message\": \"Y29tcHI=\",\n+                    \"Offset\": 20,\n+                    \"OriginalSize\": 20,\n+                    \"ProducerId\": \"not-zero-number-text\",\n+                    \"SeqNo\": 21,\n+                    \"StorageSize\": 38,\n+                    \"TimestampDiff\": \"not-zero-number\",\n+                    \"WriteTimestamp\": \"not-zero-number\"\n+                }\n+            ],\n+            \"StartOffset\": 0,\n+            \"Truncated\": true\n         }\n     },\n     \"test.test_transfer_describe\": {\n@@ -2617,6 +2617,7 @@\n                     \"ConnectStatus\": \"Green\",\n                     \"Connections\": \"not-zero-number\",\n                     \"CpuUsage\": \"not-zero-number\",\n+                    \"Database\": \"/Root\",\n                     \"DiskSpaceUsage\": \"not-zero-number\",\n                     \"NetworkUtilization\": \"number\",\n                     \"NetworkUtilizationMax\": \"number\",\n",
  "problem_statement": "filter nodes by database when board is not available\n![Image](https://github.com/user-attachments/assets/e1e967a5-d6d9-4447-b132-e57792720b7b)\n",
  "hints_text": "",
  "created_at": "2025-05-20T10:57:26Z"
}