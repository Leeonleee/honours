diff --git a/ydb/core/viewer/json_pipe_req.cpp b/ydb/core/viewer/json_pipe_req.cpp
index 2926ad925ff2..4e616efc772d 100644
--- a/ydb/core/viewer/json_pipe_req.cpp
+++ b/ydb/core/viewer/json_pipe_req.cpp
@@ -1077,7 +1077,7 @@ void TViewerPipeClient::HandleResolveResource(TEvTxProxySchemeCache::TEvNavigate
             TSchemeCacheNavigate::TEntry& entry(ResourceNavigateResponse->Get()->Request->ResultSet.front());
             SharedDatabase = CanonizePath(entry.Path);
             Direct |= (SharedDatabase == AppData()->TenantName);
-            DatabaseBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(SharedDatabase);
+            ResourceBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(SharedDatabase);
             --DataRequests; // don't count this request
         } else {
             AddEvent("Failed to resolve database - shared database not found");
@@ -1114,16 +1114,25 @@ void TViewerPipeClient::HandleResolve(TEvStateStorage::TEvBoardInfo::TPtr& ev) {
         DatabaseBoardInfoResponse->Set(std::move(ev));
         if (DatabaseBoardInfoResponse->IsOk()) {
             if (Direct) {
-                Bootstrap(); // retry bootstrap without redirect this time
+                return Bootstrap(); // retry bootstrap without redirect this time
             } else {
-                ReplyAndPassAway(MakeForward(GetNodesFromBoardReply(DatabaseBoardInfoResponse->GetRef())));
+                return ReplyAndPassAway(MakeForward(GetNodesFromBoardReply(DatabaseBoardInfoResponse->GetRef())));
+            }
+        }
+    }
+    if (ResourceBoardInfoResponse) {
+        ResourceBoardInfoResponse->Set(std::move(ev));
+        if (ResourceBoardInfoResponse->IsOk()) {
+            if (Direct) {
+                return Bootstrap(); // retry bootstrap without redirect this time
+            } else {
+                return ReplyAndPassAway(MakeForward(GetNodesFromBoardReply(ResourceBoardInfoResponse->GetRef())));
             }
-        } else {
-            AddEvent("Failed to resolve database nodes");
-            Direct = true;
-            Bootstrap(); // retry bootstrap without redirect this time
         }
     }
+    AddEvent("Failed to resolve database nodes");
+    Direct = true;
+    Bootstrap(); // retry bootstrap without redirect this time
 }
 
 void TViewerPipeClient::HandleTimeout() {
diff --git a/ydb/core/viewer/json_pipe_req.h b/ydb/core/viewer/json_pipe_req.h
index 277b98e184cd..d06221625b7b 100644
--- a/ydb/core/viewer/json_pipe_req.h
+++ b/ydb/core/viewer/json_pipe_req.h
@@ -192,6 +192,7 @@ class TViewerPipeClient : public TActorBootstrapped<TViewerPipeClient> {
     std::optional<TRequestResponse<TEvTxProxySchemeCache::TEvNavigateKeySetResult>> DatabaseNavigateResponse;
     std::optional<TRequestResponse<TEvTxProxySchemeCache::TEvNavigateKeySetResult>> ResourceNavigateResponse;
     std::optional<TRequestResponse<TEvStateStorage::TEvBoardInfo>> DatabaseBoardInfoResponse;
+    std::optional<TRequestResponse<TEvStateStorage::TEvBoardInfo>> ResourceBoardInfoResponse;
 
     NTabletPipe::TClientConfig GetPipeClientConfig();
 
diff --git a/ydb/core/viewer/viewer_nodes.h b/ydb/core/viewer/viewer_nodes.h
index 20705be0eb2f..ae5ca08619c6 100644
--- a/ydb/core/viewer/viewer_nodes.h
+++ b/ydb/core/viewer/viewer_nodes.h
@@ -72,14 +72,17 @@ class TJsonNodes : public TViewerPipeClient {
 
     std::optional<TRequestResponse<TEvInterconnect::TEvNodesInfo>> NodesInfoResponse;
     std::optional<TRequestResponse<TEvWhiteboard::TEvNodeStateResponse>> NodeStateResponse;
-    std::optional<TRequestResponse<TEvStateStorage::TEvBoardInfo>> DatabaseBoardInfoResponse;
-    std::optional<TRequestResponse<TEvStateStorage::TEvBoardInfo>> ResourceBoardInfoResponse;
     std::optional<TRequestResponse<TEvTxProxySchemeCache::TEvNavigateKeySetResult>> PathNavigateResponse;
     std::unordered_map<TTabletId, TRequestResponse<TEvHive::TEvResponseHiveNodeStats>> HiveNodeStats;
     bool HiveNodeStatsProcessed = false;
     std::vector<TTabletId> HivesToAsk;
     bool AskHiveAboutPaths = false;
     bool DatabaseNavigateProcessed = false;
+    bool ResourceNavigateProcessed = false;
+    bool PathNavigateProcessed = false;
+    bool DatabaseBoardInfoProcessed = false;
+    bool ResourceBoardInfoProcessed = false;
+    bool PDisksProcessed = false;
 
     std::optional<TRequestResponse<NSysView::TEvSysView::TEvGetStoragePoolsResponse>> StoragePoolsResponse;
     std::optional<TRequestResponse<NSysView::TEvSysView::TEvGetGroupsResponse>> GroupsResponse;
@@ -113,6 +116,7 @@ class TJsonNodes : public TViewerPipeClient {
     TString SharedDatabase;
     bool FilterDatabase = false;
     bool HasDatabaseNodes = false;
+    bool HasSharedNodes = false;
     TPathId FilterPathId;
     TSubDomainKey SubDomainKey;
     TSubDomainKey SharedSubDomainKey;
@@ -150,6 +154,7 @@ class TJsonNodes : public TViewerPipeClient {
         Pools,
         Groups,
         VSlots,
+        DoneOrError,
     };
 
     enum class EPeerRole {
@@ -1090,7 +1095,7 @@ class TJsonNodes : public TViewerPipeClient {
             if (!DatabaseNavigateResponse) {
                 DatabaseNavigateResponse = MakeRequestSchemeCacheNavigate(Database, ENavigateRequestDatabase);
             }
-            if (!FieldsNeeded(FieldsHiveNodeStat) && !(FilterPath && FieldsNeeded(FieldsTablets))) {
+            if (!DatabaseBoardInfoResponse && !FieldsNeeded(FieldsHiveNodeStat) && !(FilterPath && FieldsNeeded(FieldsTablets))) {
                 DatabaseBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(Database, EBoardInfoRequestDatabase);
             }
             if ((Type == EType::Storage || Type == EType::Static) && FilterStoragePools.empty() && FilterGroupIds.empty()) {
@@ -1177,13 +1182,13 @@ class TJsonNodes : public TViewerPipeClient {
         if (FilterDatabase) {
             if (FilterSubDomainKey && FieldsAvailable.test(+ENodeFields::SubDomainKey)) {
                 TNodeView nodeView;
-                if (HasDatabaseNodes) {
+                if (HasDatabaseNodes || !HasSharedNodes) {
                     for (TNode* node : NodeView) {
                         if (node->HasSubDomainKey(SubDomainKey)) {
                             nodeView.push_back(node);
                         }
                     }
-                } else {
+                } else if (HasSharedNodes) {
                     for (TNode* node : NodeView) {
                         if (node->HasSubDomainKey(SharedSubDomainKey)) {
                             nodeView.push_back(node);
@@ -1194,16 +1199,16 @@ class TJsonNodes : public TViewerPipeClient {
                 FoundNodes = TotalNodes = NodeView.size();
                 InvalidateNodes();
                 FilterDatabase = false;
-                AddEvent("PreFilter Applied");
+                AddEvent("PreFilter SubDomain Applied");
             } else if (FieldsAvailable.test(+ENodeFields::Database)) {
                 TNodeView nodeView;
-                if (HasDatabaseNodes) {
+                if (HasDatabaseNodes || !HasSharedNodes) {
                     for (TNode* node : NodeView) {
                         if (node->HasDatabase(Database)) {
                             nodeView.push_back(node);
                         }
                     }
-                } else {
+                } else if (HasSharedNodes) {
                     for (TNode* node : NodeView) {
                         if (node->HasDatabase(SharedDatabase)) {
                             nodeView.push_back(node);
@@ -1214,7 +1219,7 @@ class TJsonNodes : public TViewerPipeClient {
                 FoundNodes = TotalNodes = NodeView.size();
                 InvalidateNodes();
                 FilterDatabase = false;
-                AddEvent("PreFilter Applied");
+                AddEvent("PreFilter Database Applied");
             } else {
                 return;
             }
@@ -1666,7 +1671,7 @@ class TJsonNodes : public TViewerPipeClient {
         if (PathNavigateResponse && !PathNavigateResponse->IsDone()) {
             return false;
         }
-        return CurrentTimeoutState < TimeoutTablets;
+        return true;
     }
 
     bool TimeToAskWhiteboard() {
@@ -1840,7 +1845,7 @@ class TJsonNodes : public TViewerPipeClient {
             DatabaseNavigateProcessed = true;
         }
 
-        if (ResourceNavigateResponse && ResourceNavigateResponse->IsDone()) { // database hive and subdomain key
+        if (ResourceNavigateResponse && ResourceNavigateResponse->IsDone() && !ResourceNavigateProcessed) { // database hive and subdomain key
             if (ResourceNavigateResponse->IsOk()) {
                 auto* ev = ResourceNavigateResponse->Get();
                 if (ev->Request->ResultSet.size() == 1 && ev->Request->ResultSet.begin()->Status == NSchemeCache::TSchemeCacheNavigate::EStatus::Ok) {
@@ -1862,17 +1867,19 @@ class TJsonNodes : public TViewerPipeClient {
                             }
                         }
                     } else {
-                        ResourceBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(path, EBoardInfoRequestResource);
+                        if (!ResourceBoardInfoResponse) {
+                            ResourceBoardInfoResponse = MakeRequestStateStorageEndpointsLookup(path, EBoardInfoRequestResource);
+                        }
                     }
                 }
             } else {
                 NodeView.clear();
                 AddProblem("no-shared-database-info");
             }
-            ResourceNavigateResponse.reset();
+            ResourceNavigateProcessed = true;
         }
 
-        if (PathNavigateResponse && PathNavigateResponse->IsDone()) { // filter path id
+        if (PathNavigateResponse && PathNavigateResponse->IsDone() && !PathNavigateProcessed) { // filter path id
             if (PathNavigateResponse->IsOk()) {
                 auto* ev = PathNavigateResponse->Get();
                 if (ev->Request->ResultSet.size() == 1 && ev->Request->ResultSet.begin()->Status == NSchemeCache::TSchemeCacheNavigate::EStatus::Ok) {
@@ -1901,10 +1908,10 @@ class TJsonNodes : public TViewerPipeClient {
             } else {
                 AddProblem("no-path-info");
             }
-            PathNavigateResponse.reset();
+            PathNavigateProcessed = true;
         }
 
-        if (DatabaseBoardInfoResponse && DatabaseBoardInfoResponse->IsDone() && TotalNodes > 0) {
+        if (DatabaseBoardInfoResponse && DatabaseBoardInfoResponse->IsDone() && TotalNodes > 0 && !DatabaseBoardInfoProcessed) {
             if (DatabaseBoardInfoResponse->IsOk() && DatabaseBoardInfoResponse->Get()->Status == TEvStateStorage::TEvBoardInfo::EStatus::Ok) {
                 TString database = GetDatabaseFromEndpointsBoardPath(DatabaseBoardInfoResponse->Get()->Path);
                 for (const auto& entry : DatabaseBoardInfoResponse->Get()->InfoEntries) {
@@ -1921,10 +1928,10 @@ class TJsonNodes : public TViewerPipeClient {
             } else {
                 AddProblem("no-database-board-info");
             }
-            DatabaseBoardInfoResponse.reset();
+            DatabaseBoardInfoProcessed = true;
         }
 
-        if (ResourceBoardInfoResponse && ResourceBoardInfoResponse->IsDone() && TotalNodes > 0) {
+        if (ResourceBoardInfoResponse && ResourceBoardInfoResponse->IsDone() && TotalNodes > 0 && !ResourceBoardInfoProcessed) {
             if (ResourceBoardInfoResponse->IsOk() && ResourceBoardInfoResponse->Get()->Status == TEvStateStorage::TEvBoardInfo::EStatus::Ok) {
                 TString database = GetDatabaseFromEndpointsBoardPath(ResourceBoardInfoResponse->Get()->Path);
                 for (const auto& entry : ResourceBoardInfoResponse->Get()->InfoEntries) {
@@ -1933,6 +1940,7 @@ class TJsonNodes : public TViewerPipeClient {
                         if (node) {
                             node->Database = database;
                             node->GotDatabaseFromResourceBoardInfo = true;
+                            HasSharedNodes = true;
                         }
                     }
                 }
@@ -1940,7 +1948,7 @@ class TJsonNodes : public TViewerPipeClient {
             } else {
                 AddProblem("no-shared-database-board-info");
             }
-            ResourceBoardInfoResponse.reset();
+            ResourceBoardInfoProcessed = true;
         }
 
         if (!TimeToAskHive()) {
@@ -1949,8 +1957,8 @@ class TJsonNodes : public TViewerPipeClient {
 
         AddEvent("TimeToAskHive");
 
-        if (!HivesToAsk.empty()) {
-            AddEvent("HivesTokHive");
+        if (!HivesToAsk.empty() && CurrentTimeoutState < TimeoutTablets) {
+            AddEvent("HivesToAsk");
             std::sort(HivesToAsk.begin(), HivesToAsk.end());
             HivesToAsk.erase(std::unique(HivesToAsk.begin(), HivesToAsk.end()), HivesToAsk.end());
             for (TTabletId hiveId : HivesToAsk) {
@@ -2000,6 +2008,9 @@ class TJsonNodes : public TViewerPipeClient {
                                     if (node->SubDomainKey == SubDomainKey) {
                                         HasDatabaseNodes = true;
                                     }
+                                    if (node->SubDomainKey == SharedSubDomainKey) {
+                                        HasSharedNodes = true;
+                                    }
                                 }
                             }
                         }
@@ -2026,6 +2037,7 @@ class TJsonNodes : public TViewerPipeClient {
                 FilterStorageStage = EFilterStorageStage::Groups;
             } else {
                 AddProblem("bsc-storage-pools-no-data");
+                FilterStorageStage = EFilterStorageStage::DoneOrError;
             }
             StoragePoolsResponse.reset();
         }
@@ -2042,8 +2054,8 @@ class TJsonNodes : public TViewerPipeClient {
                 FilterStorageStage = EFilterStorageStage::VSlots;
             } else {
                 AddProblem("bsc-storage-groups-no-data");
+                FilterStorageStage = EFilterStorageStage::DoneOrError;
             }
-            GroupsResponse.reset();
         }
         if ((FilterStorageStage == EFilterStorageStage::VSlots || FilterStorageStage == EFilterStorageStage::None) && VSlotsResponse && VSlotsResponse->IsDone()) {
             if (VSlotsResponse->IsOk()) {
@@ -2070,14 +2082,14 @@ class TJsonNodes : public TViewerPipeClient {
                     MaximumSlotsPerDisk = std::max(MaximumSlotsPerDisk.value_or(0), slots);
                 }
                 FieldsAvailable.set(+ENodeFields::HasDisks);
-                FilterStorageStage = EFilterStorageStage::None;
+                FilterStorageStage = EFilterStorageStage::DoneOrError;
                 ApplyEverything();
             } else {
                 AddProblem("bsc-storage-slots-no-data");
+                FilterStorageStage = EFilterStorageStage::DoneOrError;
             }
-            VSlotsResponse.reset();
         }
-        if (PDisksResponse && PDisksResponse->IsDone()) {
+        if (PDisksResponse && PDisksResponse->IsDone() && !PDisksProcessed) {
             if (PDisksResponse->IsOk()) {
                 std::unordered_map<TNodeId, std::size_t> disksPerNode;
                 for (const auto& pdiskEntry : PDisksResponse->Get()->Record.GetEntries()) {
@@ -2099,7 +2111,7 @@ class TJsonNodes : public TViewerPipeClient {
             } else {
                 AddProblem("bsc-pdisks-no-data");
             }
-            PDisksResponse.reset();
+            PDisksProcessed = true;
         }
 
         if (!TimeToAskWhiteboard()) {
@@ -3077,6 +3089,7 @@ class TJsonNodes : public TViewerPipeClient {
                 }
             }
             if (WaitingForResponse()) {
+                AddEvent("WaitingForSomethingOnTimeout");
                 ReplyAndPassAway();
             }
         }
diff --git a/ydb/core/viewer/viewer_tabletinfo.h b/ydb/core/viewer/viewer_tabletinfo.h
index 80fc3e6688e4..d6a39bb9c265 100644
--- a/ydb/core/viewer/viewer_tabletinfo.h
+++ b/ydb/core/viewer/viewer_tabletinfo.h
@@ -108,6 +108,8 @@ class TJsonTabletInfo : public TJsonWhiteboardRequest<TEvWhiteboard::TEvTabletSt
         }
         if (DatabaseBoardInfoResponse && DatabaseBoardInfoResponse->IsOk()) {
             TBase::RequestSettings.FilterNodeIds = TBase::GetNodesFromBoardReply(DatabaseBoardInfoResponse->GetRef());
+        } else if (ResourceBoardInfoResponse && ResourceBoardInfoResponse->IsOk()) {
+            TBase::RequestSettings.FilterNodeIds = TBase::GetNodesFromBoardReply(ResourceBoardInfoResponse->GetRef());
         } else if (Database || SharedDatabase) {
             RequestStateStorageEndpointsLookup(SharedDatabase ? SharedDatabase : Database);
             Become(&TThis::StateRequestedLookup, TDuration::MilliSeconds(TBase::RequestSettings.Timeout), new TEvents::TEvWakeup());
diff --git a/ydb/core/viewer/viewer_tenantinfo.h b/ydb/core/viewer/viewer_tenantinfo.h
index ce91debd83b1..718c4a6159f4 100644
--- a/ydb/core/viewer/viewer_tenantinfo.h
+++ b/ydb/core/viewer/viewer_tenantinfo.h
@@ -991,6 +991,48 @@ class TJsonTenantInfo : public TViewerPipeClient {
         ReplyAndPassAway(GetHTTPOKJSON(json.Str()));
     }
 
+    void HandleTimeout() {
+        TString error = "Timeout";
+        if (ListTenantsResponse) {
+            ListTenantsResponse->Error(error);
+        }
+        for (auto& [_, request] : TenantStatusResponses) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : NavigateKeySetResult) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : DescribeSchemeResult) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : HiveDomainStats) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : HiveStorageStats) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : SystemStateResponse) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : TabletStateResponse) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : OffloadedSystemStateResponse) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : OffloadedTabletStateResponse) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : SelfCheckResults) {
+            request.Error(error);
+        }
+        for (auto& [_, request] : MetadataCacheEndpointsLookup) {
+            request.Error(error);
+        }
+        ReplyAndPassAway();
+        TBase::HandleTimeout();
+    }
+
     static YAML::Node GetSwagger() {
         TSimpleYamlBuilder yaml({
             .Method = "get",
diff --git a/ydb/core/viewer/viewer_ut.cpp b/ydb/core/viewer/viewer_ut.cpp
index 9a27c1c6d3d4..0a575bbecaaf 100644
--- a/ydb/core/viewer/viewer_ut.cpp
+++ b/ydb/core/viewer/viewer_ut.cpp
@@ -795,8 +795,8 @@ Y_UNIT_TEST_SUITE(Viewer) {
         TMonService2HttpRequest monReq(nullptr, &httpReq, nullptr, page.Get(), "/json/nodes", nullptr);
         auto request = MakeHolder<NMon::TEvHttpInfo>(monReq);
 
-        size_t staticNodeId = 0;
-        size_t sharedDynNodeId = 0;
+        //size_t staticNodeId = runtime.GetNodeId(0);
+        size_t sharedDynNodeId = runtime.GetNodeId(1);
         auto observerFunc = [&](TAutoPtr<IEventHandle>& ev) {
             switch (ev->GetTypeRewrite()) {
                 case TEvTxProxySchemeCache::EvNavigateKeySetResult: {
@@ -804,14 +804,6 @@ Y_UNIT_TEST_SUITE(Viewer) {
                     ChangeNavigateKeySetResultServerless(x, runtime);
                     break;
                 }
-                case TEvInterconnect::EvNodesInfo: {
-                    auto *x = reinterpret_cast<TEvInterconnect::TEvNodesInfo::TPtr*>(&ev);
-                    const TVector<TEvInterconnect::TNodeInfo> &nodes = (*x)->Get()->Nodes;
-                    UNIT_ASSERT_EQUAL(nodes.size(), 2);
-                    staticNodeId = nodes[0];
-                    sharedDynNodeId = nodes[1];
-                    break;
-                }
                 case TEvStateStorage::EvBoardInfo: {
                     auto *x = reinterpret_cast<TEvStateStorage::TEvBoardInfo::TPtr*>(&ev);
                     ChangeBoardInfoServerless(x, { sharedDynNodeId });
@@ -873,9 +865,9 @@ Y_UNIT_TEST_SUITE(Viewer) {
         TMonService2HttpRequest monReq(nullptr, &httpReq, nullptr, page.Get(), "/json/nodes", nullptr);
         auto request = MakeHolder<NMon::TEvHttpInfo>(monReq);
 
-        size_t staticNodeId = 0;
-        size_t sharedDynNodeId = 0;
-        size_t exclusiveDynNodeId = 0;
+        //size_t staticNodeId = runtime.GetNodeId(0);
+        size_t sharedDynNodeId = runtime.GetNodeId(1);
+        size_t exclusiveDynNodeId = runtime.GetNodeId(2);
         auto observerFunc = [&](TAutoPtr<IEventHandle>& ev) {
             switch (ev->GetTypeRewrite()) {
                 case TEvTxProxySchemeCache::EvNavigateKeySetResult: {
@@ -883,15 +875,6 @@ Y_UNIT_TEST_SUITE(Viewer) {
                     ChangeNavigateKeySetResultServerless(x, runtime);
                     break;
                 }
-                case TEvInterconnect::EvNodesInfo: {
-                    auto *x = reinterpret_cast<TEvInterconnect::TEvNodesInfo::TPtr*>(&ev);
-                    const TVector<TEvInterconnect::TNodeInfo> &nodes = (*x)->Get()->Nodes;
-                    UNIT_ASSERT_EQUAL(nodes.size(), 3);
-                    staticNodeId = nodes[0];
-                    sharedDynNodeId = nodes[1];
-                    exclusiveDynNodeId = nodes[2];
-                    break;
-                }
                 case TEvStateStorage::EvBoardInfo: {
                     auto *x = reinterpret_cast<TEvStateStorage::TEvBoardInfo::TPtr*>(&ev);
                     ChangeBoardInfoServerless(x, { sharedDynNodeId }, { exclusiveDynNodeId });
@@ -956,9 +939,9 @@ Y_UNIT_TEST_SUITE(Viewer) {
         TMonService2HttpRequest monReq(nullptr, &httpReq, nullptr, page.Get(), "/json/nodes", nullptr);
         auto request = MakeHolder<NMon::TEvHttpInfo>(monReq);
 
-        size_t staticNodeId = 0;
-        size_t sharedDynNodeId = 0;
-        size_t exclusiveDynNodeId = 0;
+        //size_t staticNodeId = runtime.GetNodeId(0);
+        size_t sharedDynNodeId = runtime.GetNodeId(1);
+        size_t exclusiveDynNodeId = runtime.GetNodeId(2);
         auto observerFunc = [&](TAutoPtr<IEventHandle>& ev) {
             switch (ev->GetTypeRewrite()) {
                 case TEvTxProxySchemeCache::EvNavigateKeySetResult: {
@@ -966,15 +949,6 @@ Y_UNIT_TEST_SUITE(Viewer) {
                     ChangeNavigateKeySetResultServerless(x, runtime);
                     break;
                 }
-                case TEvInterconnect::EvNodesInfo: {
-                    auto *x = reinterpret_cast<TEvInterconnect::TEvNodesInfo::TPtr*>(&ev);
-                    const TVector<TEvInterconnect::TNodeInfo> &nodes = (*x)->Get()->Nodes;
-                    UNIT_ASSERT_EQUAL(nodes.size(), 3);
-                    staticNodeId = nodes[0];
-                    sharedDynNodeId = nodes[1];
-                    exclusiveDynNodeId = nodes[2];
-                    break;
-                }
                 case TEvStateStorage::EvBoardInfo: {
                     auto *x = reinterpret_cast<TEvStateStorage::TEvBoardInfo::TPtr*>(&ev);
                     ChangeBoardInfoServerless(x, { sharedDynNodeId }, { exclusiveDynNodeId });
@@ -1041,10 +1015,10 @@ Y_UNIT_TEST_SUITE(Viewer) {
         TMonService2HttpRequest monReq(nullptr, &httpReq, nullptr, page.Get(), "/json/nodes", nullptr);
         auto request = MakeHolder<NMon::TEvHttpInfo>(monReq);
 
-        size_t staticNodeId = 0;
-        size_t sharedDynNodeId = 0;
-        size_t exclusiveDynNodeId = 0;
-        size_t secondExclusiveDynNodeId = 0;
+        //size_t staticNodeId = runtime.GetNodeId(0);
+        size_t sharedDynNodeId = runtime.GetNodeId(1);
+        size_t exclusiveDynNodeId = runtime.GetNodeId(2);
+        size_t secondExclusiveDynNodeId = runtime.GetNodeId(3);
         auto observerFunc = [&](TAutoPtr<IEventHandle>& ev) {
             switch (ev->GetTypeRewrite()) {
                 case TEvTxProxySchemeCache::EvNavigateKeySetResult: {
@@ -1052,16 +1026,6 @@ Y_UNIT_TEST_SUITE(Viewer) {
                     ChangeNavigateKeySetResultServerless(x, runtime);
                     break;
                 }
-                case TEvInterconnect::EvNodesInfo: {
-                    auto *x = reinterpret_cast<TEvInterconnect::TEvNodesInfo::TPtr*>(&ev);
-                    const TVector<TEvInterconnect::TNodeInfo> &nodes = (*x)->Get()->Nodes;
-                    UNIT_ASSERT_EQUAL(nodes.size(), 4);
-                    staticNodeId = nodes[0];
-                    sharedDynNodeId = nodes[1];
-                    exclusiveDynNodeId = nodes[2];
-                    secondExclusiveDynNodeId = nodes[3];
-                    break;
-                }
                 case TEvStateStorage::EvBoardInfo: {
                     auto *x = reinterpret_cast<TEvStateStorage::TEvBoardInfo::TPtr*>(&ev);
                     ChangeBoardInfoServerless(x, { sharedDynNodeId }, { exclusiveDynNodeId, secondExclusiveDynNodeId });
