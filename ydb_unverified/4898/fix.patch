diff --git a/ydb/core/base/tablet_pipecache.h b/ydb/core/base/tablet_pipecache.h
index 8df3589c8eda..43e33ab475d8 100644
--- a/ydb/core/base/tablet_pipecache.h
+++ b/ydb/core/base/tablet_pipecache.h
@@ -131,26 +131,26 @@ struct TEvPipeCache {
     };
 };
 
-struct TPipePeNodeCacheConfig : public TAtomicRefCount<TPipePeNodeCacheConfig>{
+struct TPipePerNodeCacheConfig : public TAtomicRefCount<TPipePerNodeCacheConfig>{
     ui64 TabletCacheLimit = 500000;
     TDuration PipeRefreshTime = TDuration::Zero();
     NTabletPipe::TClientConfig PipeConfig = DefaultPipeConfig();
     ::NMonitoring::TDynamicCounterPtr Counters;
 
-    TPipePeNodeCacheConfig() = default;
+    TPipePerNodeCacheConfig() = default;
 
     static NTabletPipe::TClientConfig DefaultPipeConfig();
     static NTabletPipe::TClientConfig DefaultPersistentPipeConfig();
 };
 
-enum class EPipePeNodeCache {
+enum class EPipePerNodeCache {
     Leader,
     Follower,
     Persistent,
 };
 
-IActor* CreatePipePeNodeCache(const TIntrusivePtr<TPipePeNodeCacheConfig> &config);
-TActorId MakePipePeNodeCacheID(EPipePeNodeCache kind);
-TActorId MakePipePeNodeCacheID(bool allowFollower);
+IActor* CreatePipePerNodeCache(const TIntrusivePtr<TPipePerNodeCacheConfig> &config);
+TActorId MakePipePerNodeCacheID(EPipePerNodeCache kind);
+TActorId MakePipePerNodeCacheID(bool allowFollower);
 
 }
diff --git a/ydb/core/driver_lib/run/kikimr_services_initializers.cpp b/ydb/core/driver_lib/run/kikimr_services_initializers.cpp
index 5e7f21aba13c..8a19b586fbc9 100644
--- a/ydb/core/driver_lib/run/kikimr_services_initializers.cpp
+++ b/ydb/core/driver_lib/run/kikimr_services_initializers.cpp
@@ -1343,41 +1343,41 @@ void TTabletResolverInitializer::InitializeServices(
 
 }
 
-// TTabletPipePeNodeCachesInitializer
+// TTabletPipePerNodeCachesInitializer
 
-TTabletPipePeNodeCachesInitializer::TTabletPipePeNodeCachesInitializer(const TKikimrRunConfig& runConfig)
+TTabletPipePerNodeCachesInitializer::TTabletPipePerNodeCachesInitializer(const TKikimrRunConfig& runConfig)
     : IKikimrServicesInitializer(runConfig) {
 }
 
-void TTabletPipePeNodeCachesInitializer::InitializeServices(
+void TTabletPipePerNodeCachesInitializer::InitializeServices(
             NActors::TActorSystemSetup* setup,
             const NKikimr::TAppData* appData)
 {
     auto counters = GetServiceCounters(appData->Counters, "tablets");
 
-    TIntrusivePtr<TPipePeNodeCacheConfig> leaderPipeConfig = new TPipePeNodeCacheConfig();
+    TIntrusivePtr<TPipePerNodeCacheConfig> leaderPipeConfig = new TPipePerNodeCacheConfig();
     leaderPipeConfig->PipeRefreshTime = TDuration::Zero();
     leaderPipeConfig->Counters = counters->GetSubgroup("type", "LEADER_PIPE_CACHE");
 
-    TIntrusivePtr<TPipePeNodeCacheConfig> followerPipeConfig = new TPipePeNodeCacheConfig();
+    TIntrusivePtr<TPipePerNodeCacheConfig> followerPipeConfig = new TPipePerNodeCacheConfig();
     followerPipeConfig->PipeRefreshTime = TDuration::Seconds(30);
     followerPipeConfig->PipeConfig.AllowFollower = true;
     followerPipeConfig->Counters = counters->GetSubgroup("type", "FOLLOWER_PIPE_CACHE");
 
-    TIntrusivePtr<TPipePeNodeCacheConfig> persistentPipeConfig = new TPipePeNodeCacheConfig();
+    TIntrusivePtr<TPipePerNodeCacheConfig> persistentPipeConfig = new TPipePerNodeCacheConfig();
     persistentPipeConfig->PipeRefreshTime = TDuration::Zero();
-    persistentPipeConfig->PipeConfig = TPipePeNodeCacheConfig::DefaultPersistentPipeConfig();
+    persistentPipeConfig->PipeConfig = TPipePerNodeCacheConfig::DefaultPersistentPipeConfig();
     persistentPipeConfig->Counters = counters->GetSubgroup("type", "PERSISTENT_PIPE_CACHE");
 
     setup->LocalServices.emplace_back(
-        MakePipePeNodeCacheID(false),
-        TActorSetupCmd(CreatePipePeNodeCache(leaderPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));
+        MakePipePerNodeCacheID(false),
+        TActorSetupCmd(CreatePipePerNodeCache(leaderPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));
     setup->LocalServices.emplace_back(
-        MakePipePeNodeCacheID(true),
-        TActorSetupCmd(CreatePipePeNodeCache(followerPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));
+        MakePipePerNodeCacheID(true),
+        TActorSetupCmd(CreatePipePerNodeCache(followerPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));
     setup->LocalServices.emplace_back(
-        MakePipePeNodeCacheID(EPipePeNodeCache::Persistent),
-        TActorSetupCmd(CreatePipePeNodeCache(persistentPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));
+        MakePipePerNodeCacheID(EPipePerNodeCache::Persistent),
+        TActorSetupCmd(CreatePipePerNodeCache(persistentPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));
 }
 
 // TTabletMonitoringProxyInitializer
diff --git a/ydb/core/driver_lib/run/kikimr_services_initializers.h b/ydb/core/driver_lib/run/kikimr_services_initializers.h
index 44d450a35636..f8c48e995b4c 100644
--- a/ydb/core/driver_lib/run/kikimr_services_initializers.h
+++ b/ydb/core/driver_lib/run/kikimr_services_initializers.h
@@ -143,9 +143,9 @@ class TTabletResolverInitializer : public IKikimrServicesInitializer {
     void InitializeServices(NActors::TActorSystemSetup *setup, const NKikimr::TAppData *appData) override;
 };
 
-class TTabletPipePeNodeCachesInitializer : public IKikimrServicesInitializer {
+class TTabletPipePerNodeCachesInitializer : public IKikimrServicesInitializer {
 public:
-    TTabletPipePeNodeCachesInitializer(const TKikimrRunConfig& runConfig);
+    TTabletPipePerNodeCachesInitializer(const TKikimrRunConfig& runConfig);
 
     void InitializeServices(NActors::TActorSystemSetup *setup, const NKikimr::TAppData *appData) override;
 };
diff --git a/ydb/core/driver_lib/run/run.cpp b/ydb/core/driver_lib/run/run.cpp
index e86aa2538def..2e999bd16543 100644
--- a/ydb/core/driver_lib/run/run.cpp
+++ b/ydb/core/driver_lib/run/run.cpp
@@ -1440,7 +1440,7 @@ TIntrusivePtr<TServiceInitializersList> TKikimrRunner::CreateServiceInitializers
     }
     if (serviceMask.EnableTabletResolver) {
         sil->AddServiceInitializer(new TTabletResolverInitializer(runConfig));
-        sil->AddServiceInitializer(new TTabletPipePeNodeCachesInitializer(runConfig));
+        sil->AddServiceInitializer(new TTabletPipePerNodeCachesInitializer(runConfig));
     }
     if (serviceMask.EnableTabletMonitoringProxy) {
         sil->AddServiceInitializer(new TTabletMonitoringProxyInitializer(runConfig));
diff --git a/ydb/core/grpc_services/rpc_kh_describe.cpp b/ydb/core/grpc_services/rpc_kh_describe.cpp
index cd9e5a87d810..8e5b621e0dbf 100644
--- a/ydb/core/grpc_services/rpc_kh_describe.cpp
+++ b/ydb/core/grpc_services/rpc_kh_describe.cpp
@@ -98,7 +98,7 @@ class TKikhouseDescribeTableRPC : public TActorBootstrapped<TKikhouseDescribeTab
             }
 
             std::unique_ptr<TEvTablet::TEvLocalSchemeTx> ev(new TEvTablet::TEvLocalSchemeTx());
-            ctx.Send(MakePipePeNodeCacheID(true), new TEvPipeCache::TEvForward(ev.release(), *tabletId, true), IEventHandle::FlagTrackDelivery);
+            ctx.Send(MakePipePerNodeCacheID(true), new TEvPipeCache::TEvForward(ev.release(), *tabletId, true), IEventHandle::FlagTrackDelivery);
 
             TBase::Become(&TThis::StateWaitResolveTable);
             WaitingResolveReply = true;
diff --git a/ydb/core/grpc_services/rpc_object_storage.cpp b/ydb/core/grpc_services/rpc_object_storage.cpp
index 6f2ccde4edf4..8ed0134084b6 100644
--- a/ydb/core/grpc_services/rpc_object_storage.cpp
+++ b/ydb/core/grpc_services/rpc_object_storage.cpp
@@ -250,7 +250,7 @@ class TObjectStorageListingRequestGrpc : public TActorBootstrapped<TObjectStorag
         , UserToken(std::move(userToken))
         , MaxKeys(DEFAULT_MAX_KEYS)
         , SchemeCache(schemeCache)
-        , LeaderPipeCache(MakePipePeNodeCacheID(false))
+        , LeaderPipeCache(MakePipePerNodeCacheID(false))
         , Timeout(TDuration::Seconds(DEFAULT_TIMEOUT_SEC))
         , WaitingResolveReply(false)
         , Finished(false)
diff --git a/ydb/core/grpc_services/rpc_read_columns.cpp b/ydb/core/grpc_services/rpc_read_columns.cpp
index 47e1f86d3f2e..a7ab4cc54ab1 100644
--- a/ydb/core/grpc_services/rpc_read_columns.cpp
+++ b/ydb/core/grpc_services/rpc_read_columns.cpp
@@ -81,7 +81,7 @@ class TReadColumnsRPC : public TActorBootstrapped<TReadColumnsRPC> {
         : TBase()
         , Request(std::move(request))
         , SchemeCache(MakeSchemeCacheID())
-        , LeaderPipeCache(MakePipePeNodeCacheID(false))
+        , LeaderPipeCache(MakePipePerNodeCacheID(false))
         , Timeout(TDuration::Seconds(DEFAULT_TIMEOUT_SEC))
         , WaitingResolveReply(false)
         , Finished(false)
@@ -147,7 +147,7 @@ class TReadColumnsRPC : public TActorBootstrapped<TReadColumnsRPC> {
             }
 
             std::unique_ptr<TEvTablet::TEvLocalSchemeTx> ev(new TEvTablet::TEvLocalSchemeTx());
-            ctx.Send(MakePipePeNodeCacheID(true), new TEvPipeCache::TEvForward(ev.release(), *tabletId, true), IEventHandle::FlagTrackDelivery);
+            ctx.Send(MakePipePerNodeCacheID(true), new TEvPipeCache::TEvForward(ev.release(), *tabletId, true), IEventHandle::FlagTrackDelivery);
 
             TBase::Become(&TThis::StateWaitResolveTable);
             WaitingResolveReply = true;
diff --git a/ydb/core/grpc_services/rpc_read_rows.cpp b/ydb/core/grpc_services/rpc_read_rows.cpp
index 2769ff5a641f..4065927fa755 100644
--- a/ydb/core/grpc_services/rpc_read_rows.cpp
+++ b/ydb/core/grpc_services/rpc_read_rows.cpp
@@ -84,7 +84,7 @@ class TReadRowsRPC : public TActorBootstrapped<TReadRowsRPC> {
 public:
     explicit TReadRowsRPC(std::unique_ptr<IRequestNoOpCtx> request)
         : Request(std::move(request))
-        , PipeCache(MakePipePeNodeCacheID(true))
+        , PipeCache(MakePipePerNodeCacheID(true))
         , Span(TWilsonGrpc::RequestActor, Request->GetWilsonTraceId(), "ReadRowsRpc")
     {}
 
diff --git a/ydb/core/kqp/compute_actor/kqp_scan_compute_manager.h b/ydb/core/kqp/compute_actor/kqp_scan_compute_manager.h
index a6678fb6514e..5f3d7496ec66 100644
--- a/ydb/core/kqp/compute_actor/kqp_scan_compute_manager.h
+++ b/ydb/core/kqp/compute_actor/kqp_scan_compute_manager.h
@@ -64,7 +64,7 @@ class TShardScannerInfo {
         AFL_DEBUG(NKikimrServices::KQP_COMPUTE)("event", "start_scanner")("info", state.ToString(keyColumnTypes))
             ("range", DebugPrintRanges(keyColumnTypes, ranges, *AppData()->TypeRegistry))("subscribed", subscribed);
 
-        NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+        NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
             new TEvPipeCache::TEvForward(ev.release(), TabletId, !subscribed), IEventHandle::FlagTrackDelivery);
     }
 
@@ -74,7 +74,7 @@ class TShardScannerInfo {
             auto abortEv = std::make_unique<TEvKqp::TEvAbortExecution>(NYql::NDqProto::StatusIds::CANCELLED, message ? message : "stop from fetcher");
             NActors::TActivationContext::AsActorContext().Send(*ActorId, std::move(abortEv));
             if (finalFlag) {
-                NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(TabletId));
+                NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(TabletId));
                 NActors::TActivationContext::AsActorContext().Send(TActivationContext::InterconnectProxy(ActorId->NodeId()), new TEvents::TEvUnsubscribe());
             }
             ActorId = {};
diff --git a/ydb/core/kqp/compute_actor/kqp_scan_fetcher_actor.h b/ydb/core/kqp/compute_actor/kqp_scan_fetcher_actor.h
index da998ccae3a0..962aee326470 100644
--- a/ydb/core/kqp/compute_actor/kqp_scan_fetcher_actor.h
+++ b/ydb/core/kqp/compute_actor/kqp_scan_fetcher_actor.h
@@ -153,7 +153,7 @@ class TKqpScanFetcherActor: public NActors::TActorBootstrapped<TKqpScanFetcherAc
 
 private:
     void PassAway() override {
-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
         TBase::PassAway();
     }
 
diff --git a/ydb/core/kqp/executer_actor/kqp_data_executer.cpp b/ydb/core/kqp/executer_actor/kqp_data_executer.cpp
index c8e9bce63a59..04c83281e55f 100644
--- a/ydb/core/kqp/executer_actor/kqp_data_executer.cpp
+++ b/ydb/core/kqp/executer_actor/kqp_data_executer.cpp
@@ -652,7 +652,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
                 YQL_ENSURE(state.DatashardState.Defined());
                 YQL_ENSURE(!state.DatashardState->Follower);
 
-                Send(MakePipePeNodeCacheID(/* allowFollowers */ false), new TEvPipeCache::TEvForward(
+                Send(MakePipePerNodeCacheID(/* allowFollowers */ false), new TEvPipeCache::TEvForward(
                     new TEvDataShard::TEvCancelTransactionProposal(TxId), shardId, /* subscribe */ false));
             }
         }
@@ -1021,7 +1021,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
         }
 
         LOG_T("Execute planned transaction, coordinator: " << TxCoordinator);
-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvForward(ev.Release(), TxCoordinator, /* subscribe */ true));
+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvForward(ev.Release(), TxCoordinator, /* subscribe */ true));
     }
 
 private:
@@ -1338,7 +1338,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
 
         LOG_I("Reattach to shard " << tabletId);
 
-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvForward(
+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvForward(
             new TEvDataShard::TEvProposeTransactionAttach(tabletId, TxId),
             tabletId, /* subscribe */ true), 0, ++shardState->ReattachState.Cookie);
     }
@@ -1695,7 +1695,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
 
         LOG_D("ExecuteDatashardTransaction traceId.verbosity: " << std::to_string(traceId.GetVerbosity()));
 
-        Send(MakePipePeNodeCacheID(GetUseFollowers()), new TEvPipeCache::TEvForward(ev.release(), shardId, true), 0, 0, std::move(traceId));
+        Send(MakePipePerNodeCacheID(GetUseFollowers()), new TEvPipeCache::TEvForward(ev.release(), shardId, true), 0, 0, std::move(traceId));
 
         auto result = ShardStates.emplace(shardId, std::move(shardState));
         YQL_ENSURE(result.second);
@@ -1726,7 +1726,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
 
         LOG_D("ExecuteEvWriteTransaction traceId.verbosity: " << std::to_string(traceId.GetVerbosity()));
 
-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvForward(evWriteTransaction.release(), shardId, true), 0, 0, std::move(traceId));
+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvForward(evWriteTransaction.release(), shardId, true), 0, 0, std::move(traceId));
 
         auto result = ShardStates.emplace(shardId, std::move(shardState));
         YQL_ENSURE(result.second);
@@ -2605,7 +2605,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
             LOG_D("Executing KQP transaction on topic tablet: " << tabletId
                   << ", writeId: " << writeId);
 
-            Send(MakePipePeNodeCacheID(false),
+            Send(MakePipePerNodeCacheID(false),
                  new TEvPipeCache::TEvForward(ev.release(), tabletId, true),
                  0,
                  0,
@@ -2632,10 +2632,10 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da
         Counters->TxProxyMon->TxTotalTimeHgram->Collect(totalTime.MilliSeconds());
         Counters->TxProxyMon->TxExecuteTimeHgram->Collect(totalTime.MilliSeconds());
 
-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
 
         if (GetUseFollowers()) {
-            Send(MakePipePeNodeCacheID(true), new TEvPipeCache::TEvUnlink(0));
+            Send(MakePipePerNodeCacheID(true), new TEvPipeCache::TEvUnlink(0));
         }
 
         TBase::PassAway();
diff --git a/ydb/core/kqp/executer_actor/kqp_executer_impl.h b/ydb/core/kqp/executer_actor/kqp_executer_impl.h
index ab2e544bce8b..5f6f5a538bce 100644
--- a/ydb/core/kqp/executer_actor/kqp_executer_impl.h
+++ b/ydb/core/kqp/executer_actor/kqp_executer_impl.h
@@ -575,7 +575,7 @@ class TKqpExecuterBase : public TActorBootstrapped<TDerived> {
     void InvalidateNode(ui64 node) {
         for (auto tablet : ShardsOnNode[node]) {
             auto ev = MakeHolder<TEvPipeCache::TEvForcePipeReconnect>(tablet);
-            this->Send(MakePipePeNodeCacheID(false), ev.Release());
+            this->Send(MakePipePerNodeCacheID(false), ev.Release());
         }
     }
 
diff --git a/ydb/core/kqp/executer_actor/kqp_shards_resolver.cpp b/ydb/core/kqp/executer_actor/kqp_shards_resolver.cpp
index a33deb3af3b0..7b20b791436e 100644
--- a/ydb/core/kqp/executer_actor/kqp_shards_resolver.cpp
+++ b/ydb/core/kqp/executer_actor/kqp_shards_resolver.cpp
@@ -41,7 +41,7 @@ class TKqpShardsResolver : public TActorBootstrapped<TKqpShardsResolver> {
         , TxId(txId)
         , ShardIds(std::move(shardIds))
         , UseFollowers(useFollowers)
-        , TabletResolver(MakePipePeNodeCacheID(UseFollowers))
+        , TabletResolver(MakePipePerNodeCacheID(UseFollowers))
     {}
 
     void Bootstrap() {
diff --git a/ydb/core/kqp/runtime/kqp_read_actor.cpp b/ydb/core/kqp/runtime/kqp_read_actor.cpp
index 530cd956fb0d..8be73df82927 100644
--- a/ydb/core/kqp/runtime/kqp_read_actor.cpp
+++ b/ydb/core/kqp/runtime/kqp_read_actor.cpp
@@ -29,8 +29,8 @@ bool IsDebugLogEnabled(const NActors::TActorSystem* actorSystem, NActors::NLog::
     return settings && settings->Satisfies(NActors::NLog::EPriority::PRI_DEBUG, component);
 }
 
-NActors::TActorId MainPipeCacheId = NKikimr::MakePipePeNodeCacheID(false);
-NActors::TActorId FollowersPipeCacheId =  NKikimr::MakePipePeNodeCacheID(true);
+NActors::TActorId MainPipeCacheId = NKikimr::MakePipePerNodeCacheID(false);
+NActors::TActorId FollowersPipeCacheId =  NKikimr::MakePipePerNodeCacheID(true);
 
 }
 
diff --git a/ydb/core/kqp/runtime/kqp_stream_lookup_actor.cpp b/ydb/core/kqp/runtime/kqp_stream_lookup_actor.cpp
index 5abaae6f99a5..32e81bc88a5a 100644
--- a/ydb/core/kqp/runtime/kqp_stream_lookup_actor.cpp
+++ b/ydb/core/kqp/runtime/kqp_stream_lookup_actor.cpp
@@ -23,7 +23,7 @@ namespace NKqp {
 namespace {
 
 static constexpr TDuration SCHEME_CACHE_REQUEST_TIMEOUT = TDuration::Seconds(10);
-NActors::TActorId MainPipeCacheId = NKikimr::MakePipePeNodeCacheID(false);
+NActors::TActorId MainPipeCacheId = NKikimr::MakePipePerNodeCacheID(false);
 
 class TKqpStreamLookupActor : public NActors::TActorBootstrapped<TKqpStreamLookupActor>, public NYql::NDq::IDqComputeActorAsyncInput {
 public:
diff --git a/ydb/core/kqp/runtime/kqp_write_actor.cpp b/ydb/core/kqp/runtime/kqp_write_actor.cpp
index 713d0d734a47..46c50e026ad8 100644
--- a/ydb/core/kqp/runtime/kqp_write_actor.cpp
+++ b/ydb/core/kqp/runtime/kqp_write_actor.cpp
@@ -806,7 +806,7 @@ class TKqpWriteActor : public TActorBootstrapped<TKqpWriteActor>, public NYql::N
     }
 
     NActors::TActorId TxProxyId = MakeTxProxyID();
-    NActors::TActorId PipeCacheId = NKikimr::MakePipePeNodeCacheID(false);
+    NActors::TActorId PipeCacheId = NKikimr::MakePipePerNodeCacheID(false);
 
     TString LogPrefix;
     const NKikimrKqp::TKqpTableSinkSettings Settings;
diff --git a/ydb/core/kqp/ut/common/columnshard.cpp b/ydb/core/kqp/ut/common/columnshard.cpp
index 4bd74f93cf74..90e3992b7176 100644
--- a/ydb/core/kqp/ut/common/columnshard.cpp
+++ b/ydb/core/kqp/ut/common/columnshard.cpp
@@ -125,7 +125,7 @@ namespace NKqp {
             }
         }
         for (auto shard : shards) {
-            Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+            Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                     new TEvents::TEvPoisonPill(), shard, false));
         }
     }
diff --git a/ydb/core/kqp/ut/olap/blobs_sharing_ut.cpp b/ydb/core/kqp/ut/olap/blobs_sharing_ut.cpp
index 87adac24d7b2..de619f580a7b 100644
--- a/ydb/core/kqp/ut/olap/blobs_sharing_ut.cpp
+++ b/ydb/core/kqp/ut/olap/blobs_sharing_ut.cpp
@@ -146,7 +146,7 @@ Y_UNIT_TEST_SUITE(KqpOlapBlobsSharing) {
             const TString sessionId = TGUID::CreateTimebased().AsUuidString();
             NOlap::NDataSharing::TTransferContext transferContext((NOlap::TTabletId)destination, sourceTablets, snapshot, move);
             NOlap::NDataSharing::TDestinationSession session(std::make_shared<TTestController>(), pathIdsRemap, sessionId, transferContext);
-            Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+            Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                 new NOlap::NDataSharing::NEvents::TEvProposeFromInitiator(session), destination, false));
             {
                 const TInstant start = TInstant::Now();
@@ -157,13 +157,13 @@ Y_UNIT_TEST_SUITE(KqpOlapBlobsSharing) {
                 AFL_VERIFY(CSTransferStatus->GetProposed());
             }
             if (RebootTablet) {
-                Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+                Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                     new TEvents::TEvPoisonPill(), destination, false));
             }
             {
                 const TInstant start = TInstant::Now();
                 while (!CSTransferStatus->GetConfirmed() && TInstant::Now() - start < TDuration::Seconds(10)) {
-                    Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+                    Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                         new NOlap::NDataSharing::NEvents::TEvConfirmFromInitiator(sessionId), destination, false));
                     Sleep(TDuration::Seconds(1));
                     Cerr << "WAIT_CONFIRMED..." << Endl;
@@ -171,10 +171,10 @@ Y_UNIT_TEST_SUITE(KqpOlapBlobsSharing) {
                 AFL_VERIFY(CSTransferStatus->GetConfirmed());
             }
             if (RebootTablet) {
-                Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+                Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                     new TEvents::TEvPoisonPill(), destination, false));
                 for (auto&& i : sources) {
-                    Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+                    Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                         new TEvents::TEvPoisonPill(), i, false));
                 }
             }
diff --git a/ydb/core/kqp/ut/olap/indexes_ut.cpp b/ydb/core/kqp/ut/olap/indexes_ut.cpp
index be811e512930..c1a370231cb1 100644
--- a/ydb/core/kqp/ut/olap/indexes_ut.cpp
+++ b/ydb/core/kqp/ut/olap/indexes_ut.cpp
@@ -148,7 +148,7 @@ Y_UNIT_TEST_SUITE(KqpOlapIndexes) {
         AFL_VERIFY(startCount == 30);
 
         for (auto&& i : csController->GetShardActualIds()) {
-            kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+            kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                 new TEvents::TEvPoisonPill(), i, false));
         }
 
diff --git a/ydb/core/kqp/ut/olap/kqp_olap_ut.cpp b/ydb/core/kqp/ut/olap/kqp_olap_ut.cpp
index 28c0c0f4b122..5616ce2fa7ad 100644
--- a/ydb/core/kqp/ut/olap/kqp_olap_ut.cpp
+++ b/ydb/core/kqp/ut/olap/kqp_olap_ut.cpp
@@ -1622,7 +1622,7 @@ Y_UNIT_TEST_SUITE(KqpOlap) {
                             Cerr << (TStringBuilder() << "-- EvScanData from " << ev->Sender << ": hijack event" << Endl);
                             Cerr.Flush();
                             for (auto&& i : csController->GetShardActualIds()) {
-                                runtime->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+                                runtime->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                                     new TEvents::TEvPoisonPill(), i, false));
                             }
                         } else {
diff --git a/ydb/core/kqp/ut/olap/write_ut.cpp b/ydb/core/kqp/ut/olap/write_ut.cpp
index f864ca1daf26..040b74a97082 100644
--- a/ydb/core/kqp/ut/olap/write_ut.cpp
+++ b/ydb/core/kqp/ut/olap/write_ut.cpp
@@ -77,7 +77,7 @@ Y_UNIT_TEST_SUITE(KqpOlapWrite) {
             AFL_VERIFY(Singleton<NKikimr::NWrappers::NExternalStorage::TFakeExternalStorage>()->GetDeletesCount() == 0)("count", Singleton<NKikimr::NWrappers::NExternalStorage::TFakeExternalStorage>()->GetDeletesCount());
             while (Singleton<NWrappers::NExternalStorage::TFakeExternalStorage>()->GetSize() && TMonotonic::Now() - startInstant < TDuration::Seconds(200)) {
                 for (auto&& i : csController->GetShardActualIds()) {
-                    kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+                    kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                         new TEvents::TEvPoisonPill(), i, false));
                 }
                 csController->EnableBackground(NKikimr::NYDBTest::ICSController::EBackground::GC);
@@ -90,7 +90,7 @@ Y_UNIT_TEST_SUITE(KqpOlapWrite) {
             const auto startInstant = TMonotonic::Now();
             while (TMonotonic::Now() - startInstant < TDuration::Seconds(10)) {
                 for (auto&& i : csController->GetShardActualIds()) {
-                    kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
+                    kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(
                         new TEvents::TEvPoisonPill(), i, false));
                 }
                 Cerr << "Waiting empty... " << Singleton<NKikimr::NWrappers::NExternalStorage::TFakeExternalStorage>()->GetWritesCount() << "/" << Singleton<NKikimr::NWrappers::NExternalStorage::TFakeExternalStorage>()->GetDeletesCount() << Endl;
diff --git a/ydb/core/kqp/ut/scan/kqp_split_ut.cpp b/ydb/core/kqp/ut/scan/kqp_split_ut.cpp
index 81ed1beeafad..5e968ec37d08 100644
--- a/ydb/core/kqp/ut/scan/kqp_split_ut.cpp
+++ b/ydb/core/kqp/ut/scan/kqp_split_ut.cpp
@@ -144,7 +144,7 @@ Y_UNIT_TEST_SUITE(KqpSplit) {
         }
 
     private:
-        TActorId PipeCache = MakePipePeNodeCacheID(false);
+        TActorId PipeCache = MakePipePerNodeCacheID(false);
         TActorId Owner;
         TActorId Client;
 
@@ -397,9 +397,9 @@ Y_UNIT_TEST_SUITE(KqpSplit) {
             : Table(table)
         {
             if (testActorType == ETestActorType::SorceRead) {
-                InterceptReadActorPipeCache(MakePipePeNodeCacheID(false));
+                InterceptReadActorPipeCache(MakePipePerNodeCacheID(false));
             } else if (testActorType == ETestActorType::StreamLookup) {
-                InterceptStreamLookupActorPipeCache(MakePipePeNodeCacheID(false));
+                InterceptStreamLookupActorPipeCache(MakePipePerNodeCacheID(false));
             }
             
             if (providedServer) {
diff --git a/ydb/core/statistics/aggregator/aggregator_impl.cpp b/ydb/core/statistics/aggregator/aggregator_impl.cpp
index 65f5edc9fb45..4e67bd023bc7 100644
--- a/ydb/core/statistics/aggregator/aggregator_impl.cpp
+++ b/ydb/core/statistics/aggregator/aggregator_impl.cpp
@@ -455,7 +455,7 @@ void TStatisticsAggregator::NextRange() {
     record.MutableTableId()->SetTableId(ScanTableId.PathId.LocalPathId);
     record.SetStartKey(StartKey.GetBuffer());
 
-    Send(MakePipePeNodeCacheID(false),
+    Send(MakePipePerNodeCacheID(false),
         new TEvPipeCache::TEvForward(request.release(), range.DataShardId, true),
         IEventHandle::FlagTrackDelivery);
 }
diff --git a/ydb/core/sys_view/common/processor_scan.h b/ydb/core/sys_view/common/processor_scan.h
index a74d665b65a8..1d181f0ae10e 100644
--- a/ydb/core/sys_view/common/processor_scan.h
+++ b/ydb/core/sys_view/common/processor_scan.h
@@ -74,7 +74,7 @@ class TProcessorScan : public TScanActorBase<
         auto req = MakeHolder<TEvRequest>();
         req->Record.CopyFrom(Request);
 
-        TBase::Send(MakePipePeNodeCacheID(false),
+        TBase::Send(MakePipePerNodeCacheID(false),
             new TEvPipeCache::TEvForward(req.Release(), this->SysViewProcessorId, true),
             IEventHandle::FlagTrackDelivery);
 
@@ -110,7 +110,7 @@ class TProcessorScan : public TScanActorBase<
     }
 
     void PassAway() override {
-        TBase::Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
+        TBase::Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
         TBase::PassAway();
     }
 
diff --git a/ydb/core/sys_view/partition_stats/partition_stats.cpp b/ydb/core/sys_view/partition_stats/partition_stats.cpp
index 37684c26278c..87b569613fe5 100644
--- a/ydb/core/sys_view/partition_stats/partition_stats.cpp
+++ b/ydb/core/sys_view/partition_stats/partition_stats.cpp
@@ -399,7 +399,7 @@ class TPartitionStatsCollector : public TActorBootstrapped<TPartitionStatsCollec
             << "top size# " << sorted.size()
             << ", time# " << now);
 
-        Send(MakePipePeNodeCacheID(false),
+        Send(MakePipePerNodeCacheID(false),
             new TEvPipeCache::TEvForward(sendEvent.Release(), SysViewProcessorId, true));
     }
 
@@ -413,7 +413,7 @@ class TPartitionStatsCollector : public TActorBootstrapped<TPartitionStatsCollec
     }
 
     void PassAway() override {
-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
         TBase::PassAway();
     }
 
@@ -534,7 +534,7 @@ class TPartitionStatsScan : public TScanActorBase<TPartitionStatsScan> {
 
         request->Record.SetIncludePathColumn(IncludePathColumn);
 
-        auto pipeCache = MakePipePeNodeCacheID(false);
+        auto pipeCache = MakePipePerNodeCacheID(false);
         Send(pipeCache, new TEvPipeCache::TEvForward(request.Release(), SchemeShardId, true),
             IEventHandle::FlagTrackDelivery);
 
@@ -675,7 +675,7 @@ class TPartitionStatsScan : public TScanActorBase<TPartitionStatsScan> {
     }
 
     void PassAway() override {
-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
         TBase::PassAway();
     }
 
diff --git a/ydb/core/sys_view/query_stats/query_stats.cpp b/ydb/core/sys_view/query_stats/query_stats.cpp
index 8871569a3239..c2e26a237972 100644
--- a/ydb/core/sys_view/query_stats/query_stats.cpp
+++ b/ydb/core/sys_view/query_stats/query_stats.cpp
@@ -172,7 +172,7 @@ class TQueryStatsScan : public TScanActorBase<TQueryStatsScan<TGreater>> {
         auto request = MakeHolder<TEvSysView::TEvGetQueryMetricsRequest>();
         request->Record.CopyFrom(Request);
 
-        this->Send(MakePipePeNodeCacheID(false),
+        this->Send(MakePipePerNodeCacheID(false),
             new TEvPipeCache::TEvForward(request.Release(), this->SysViewProcessorId, true),
             IEventHandle::FlagTrackDelivery);
 
@@ -469,7 +469,7 @@ class TQueryStatsScan : public TScanActorBase<TQueryStatsScan<TGreater>> {
 
     void PassAway() override {
         if (UseProcessor) {
-            this->Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
+            this->Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
         } else {
             for (auto& [nodeId, _] : Nodes) {
                 this->Send(TActorContext::InterconnectProxy(nodeId), new TEvents::TEvUnsubscribe);
diff --git a/ydb/core/sys_view/service/sysview_service.cpp b/ydb/core/sys_view/service/sysview_service.cpp
index 2cd2684f3cb7..5d8c76c0ad0f 100644
--- a/ydb/core/sys_view/service/sysview_service.cpp
+++ b/ydb/core/sys_view/service/sysview_service.cpp
@@ -388,7 +388,7 @@ class TSysViewService : public TActorBootstrapped<TSysViewService> {
             << ", interval end# " << intervalEnd
             << ", query count# " << record.GetMetrics().HashesSize());
 
-        Send(MakePipePeNodeCacheID(false),
+        Send(MakePipePerNodeCacheID(false),
             new TEvPipeCache::TEvForward(summary.Release(), processorId, true),
             IEventHandle::FlagTrackDelivery);
     }
@@ -521,7 +521,7 @@ class TSysViewService : public TActorBootstrapped<TSysViewService> {
             << ", is retrying# " << dbCounters.IsRetrying
             << ", is labeled# " << isLabeled);
 
-        Send(MakePipePeNodeCacheID(false),
+        Send(MakePipePerNodeCacheID(false),
             new TEvPipeCache::TEvForward(sendEv.Release(), processorId, true),
             IEventHandle::FlagTrackDelivery);
     }
@@ -991,7 +991,7 @@ class TSysViewService : public TActorBootstrapped<TSysViewService> {
     }
 
     void PassAway() override {
-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
         TBase::PassAway();
     }
 
diff --git a/ydb/core/sys_view/storage/base.h b/ydb/core/sys_view/storage/base.h
index e216a8bf814e..65c8aa2910c4 100644
--- a/ydb/core/sys_view/storage/base.h
+++ b/ydb/core/sys_view/storage/base.h
@@ -47,7 +47,7 @@ namespace NKikimr::NSysView {
                 return;
             }
 
-            auto pipeCache = MakePipePeNodeCacheID(false);
+            auto pipeCache = MakePipePerNodeCacheID(false);
             TBase::Send(pipeCache, new TEvPipeCache::TEvForward(static_cast<TDerived&>(*this).CreateQuery(),
                 bsControllerId, true), IEventHandle::FlagTrackDelivery);
         }
@@ -184,7 +184,7 @@ namespace NKikimr::NSysView {
         }
 
         void PassAway() override {
-            TBase::Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
+            TBase::Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
             TBase::PassAway();
         }
 
diff --git a/ydb/core/sys_view/tablets/tablets.cpp b/ydb/core/sys_view/tablets/tablets.cpp
index f45e33bee03e..ffecd239b183 100644
--- a/ydb/core/sys_view/tablets/tablets.cpp
+++ b/ydb/core/sys_view/tablets/tablets.cpp
@@ -180,7 +180,7 @@ class TTabletsScan : public TScanActorBase<TTabletsScan> {
         record.SetFrom(FromTabletId);
         record.SetTo(ToTabletId);
 
-        auto pipeCache = MakePipePeNodeCacheID(false);
+        auto pipeCache = MakePipePerNodeCacheID(false);
         Send(pipeCache, new TEvPipeCache::TEvForward(request.Release(), HiveId, true),
             IEventHandle::FlagTrackDelivery);
     }
@@ -202,7 +202,7 @@ class TTabletsScan : public TScanActorBase<TTabletsScan> {
 
         record.SetBatchSizeLimit(BatchSize);
 
-        auto pipeCache = MakePipePeNodeCacheID(false);
+        auto pipeCache = MakePipePerNodeCacheID(false);
         Send(pipeCache, new TEvPipeCache::TEvForward(request.Release(), HiveId, true),
             IEventHandle::FlagTrackDelivery);
     }
@@ -338,7 +338,7 @@ class TTabletsScan : public TScanActorBase<TTabletsScan> {
     }
 
     void PassAway() override {
-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));
         TBase::PassAway();
     }
 
diff --git a/ydb/core/tablet/tablet_pipecache.cpp b/ydb/core/tablet/tablet_pipecache.cpp
index f1dbadcff7ad..fb1dc554be8d 100644
--- a/ydb/core/tablet/tablet_pipecache.cpp
+++ b/ydb/core/tablet/tablet_pipecache.cpp
@@ -9,8 +9,8 @@
 
 namespace NKikimr {
 
-class TPipePeNodeCache : public TActor<TPipePeNodeCache> {
-    TIntrusiveConstPtr<TPipePeNodeCacheConfig> Config;
+class TPipePerNodeCache : public TActor<TPipePerNodeCache> {
+    TIntrusiveConstPtr<TPipePerNodeCacheConfig> Config;
     NTabletPipe::TClientConfig PipeConfig;
 
     struct TCounters {
@@ -503,7 +503,7 @@ class TPipePeNodeCache : public TActor<TPipePeNodeCache> {
         return NKikimrServices::TActivity::TABLET_PIPE_SERVER;
     }
 
-    TPipePeNodeCache(const TIntrusivePtr<TPipePeNodeCacheConfig> &config)
+    TPipePerNodeCache(const TIntrusivePtr<TPipePerNodeCacheConfig> &config)
         : TActor(&TThis::StateWork)
         , Config(config)
         , PipeConfig(Config->PipeConfig)
@@ -525,7 +525,7 @@ class TPipePeNodeCache : public TActor<TPipePeNodeCache> {
     }
 };
 
-NTabletPipe::TClientConfig TPipePeNodeCacheConfig::DefaultPipeConfig() {
+NTabletPipe::TClientConfig TPipePerNodeCacheConfig::DefaultPipeConfig() {
     NTabletPipe::TClientConfig config;
     config.RetryPolicy = {
         .RetryLimitCount = 3,
@@ -533,7 +533,7 @@ NTabletPipe::TClientConfig TPipePeNodeCacheConfig::DefaultPipeConfig() {
     return config;
 }
 
-NTabletPipe::TClientConfig TPipePeNodeCacheConfig::DefaultPersistentPipeConfig() {
+NTabletPipe::TClientConfig TPipePerNodeCacheConfig::DefaultPersistentPipeConfig() {
     NTabletPipe::TClientConfig config;
     config.CheckAliveness = true;
     config.RetryPolicy = {
@@ -545,28 +545,28 @@ NTabletPipe::TClientConfig TPipePeNodeCacheConfig::DefaultPersistentPipeConfig()
     return config;
 }
 
-IActor* CreatePipePeNodeCache(const TIntrusivePtr<TPipePeNodeCacheConfig> &config) {
-    return new TPipePeNodeCache(config);
+IActor* CreatePipePerNodeCache(const TIntrusivePtr<TPipePerNodeCacheConfig> &config) {
+    return new TPipePerNodeCache(config);
 }
 
-TActorId MakePipePeNodeCacheID(EPipePeNodeCache kind) {
+TActorId MakePipePerNodeCacheID(EPipePerNodeCache kind) {
     char x[12] = "PipeCache";
     switch (kind) {
-        case EPipePeNodeCache::Leader:
+        case EPipePerNodeCache::Leader:
             x[9] = 'A';
             break;
-        case EPipePeNodeCache::Follower:
+        case EPipePerNodeCache::Follower:
             x[9] = 'F';
             break;
-        case EPipePeNodeCache::Persistent:
+        case EPipePerNodeCache::Persistent:
             x[9] = 'P';
             break;
     }
     return TActorId(0, TStringBuf(x, 12));
 }
 
-TActorId MakePipePeNodeCacheID(bool allowFollower) {
-    return MakePipePeNodeCacheID(allowFollower ? EPipePeNodeCache::Follower : EPipePeNodeCache::Leader);
+TActorId MakePipePerNodeCacheID(bool allowFollower) {
+    return MakePipePerNodeCacheID(allowFollower ? EPipePerNodeCache::Follower : EPipePerNodeCache::Leader);
 }
 
 }
diff --git a/ydb/core/tablet/tablet_pipecache_ut.cpp b/ydb/core/tablet/tablet_pipecache_ut.cpp
index 8aab680adbbc..4c1deaf838b0 100644
--- a/ydb/core/tablet/tablet_pipecache_ut.cpp
+++ b/ydb/core/tablet/tablet_pipecache_ut.cpp
@@ -117,9 +117,9 @@ Y_UNIT_TEST_SUITE(TPipeCacheTest) {
         };
         runtime.SetObserverFunc(observerFunc);
 
-        auto config = MakeIntrusive<TPipePeNodeCacheConfig>();
+        auto config = MakeIntrusive<TPipePerNodeCacheConfig>();
         config->PipeRefreshTime = TDuration::Seconds(1);
-        auto cacheActor = runtime.Register(CreatePipePeNodeCache(config));
+        auto cacheActor = runtime.Register(CreatePipePerNodeCache(config));
 
         TActorId sender = runtime.AllocateEdgeActor();
         for (size_t i = 0; i < 20; ++i) {
@@ -138,9 +138,9 @@ Y_UNIT_TEST_SUITE(TPipeCacheTest) {
         TTestBasicRuntime runtime;
         SetupTabletServices(runtime);
 
-        auto config = MakeIntrusive<TPipePeNodeCacheConfig>();
+        auto config = MakeIntrusive<TPipePerNodeCacheConfig>();
         config->PipeRefreshTime = TDuration::Seconds(1);
-        auto cacheActor = runtime.Register(CreatePipePeNodeCache(config));
+        auto cacheActor = runtime.Register(CreatePipePerNodeCache(config));
 
         TActorId sender = runtime.AllocateEdgeActor();
 
@@ -175,8 +175,8 @@ Y_UNIT_TEST_SUITE(TPipeCacheTest) {
                 return new TCustomTablet(tablet, info);
             });
 
-        auto config = MakeIntrusive<TPipePeNodeCacheConfig>();
-        auto cacheActor = runtime.Register(CreatePipePeNodeCache(config));
+        auto config = MakeIntrusive<TPipePerNodeCacheConfig>();
+        auto cacheActor = runtime.Register(CreatePipePerNodeCache(config));
 
         TActorId sender = runtime.AllocateEdgeActor();
 
diff --git a/ydb/core/tablet/tablet_sys.cpp b/ydb/core/tablet/tablet_sys.cpp
index 439fb8c1452a..89fbce3a4fe9 100644
--- a/ydb/core/tablet/tablet_sys.cpp
+++ b/ydb/core/tablet/tablet_sys.cpp
@@ -1734,7 +1734,7 @@ void TTablet::ReassignYellowChannels(TVector<ui32> &&yellowMoveChannels) {
         " Type: " << TTabletTypes::TypeToStr((TTabletTypes::EType)Info->TabletType)
         << ", YellowMoveChannels: " << yellowMoveChannelsString(), "TSYS30");
 
-    Send(MakePipePeNodeCacheID(false),
+    Send(MakePipePerNodeCacheID(false),
         new TEvPipeCache::TEvForward(
             new TEvHive::TEvReassignTabletSpace(Info->TabletID, std::move(yellowMoveChannels)),
             Info->HiveId,
diff --git a/ydb/core/tablet_flat/flat_executor.cpp b/ydb/core/tablet_flat/flat_executor.cpp
index 0de6639b0eda..72f6bae938ee 100644
--- a/ydb/core/tablet_flat/flat_executor.cpp
+++ b/ydb/core/tablet_flat/flat_executor.cpp
@@ -324,7 +324,7 @@ void TExecutor::SendReassignYellowChannels(const TVector<ui32> &yellowChannels)
     if (Owner->ReassignChannelsEnabled()) {
         auto* info = Owner->Info();
         if (Y_LIKELY(info) && info->HiveId) {
-            Send(MakePipePeNodeCacheID(false),
+            Send(MakePipePerNodeCacheID(false),
                 new TEvPipeCache::TEvForward(
                     new TEvHive::TEvReassignTabletSpace(info->TabletID, yellowChannels),
                     info->HiveId,
diff --git a/ydb/core/tx/columnshard/blobs_action/abstract/gc_actor.h b/ydb/core/tx/columnshard/blobs_action/abstract/gc_actor.h
index 009dee623caf..7acd09a7c16e 100644
--- a/ydb/core/tx/columnshard/blobs_action/abstract/gc_actor.h
+++ b/ydb/core/tx/columnshard/blobs_action/abstract/gc_actor.h
@@ -32,7 +32,7 @@ class TSharedBlobsCollectionActor: public TActorBootstrapped<TDerived> {
         auto* blobIds = BlobIdsByTablets.Find((TTabletId)ev->Cookie);
         AFL_VERIFY(blobIds);
         auto evResend = std::make_unique<NEvents::TEvDeleteSharedBlobs>(TBase::SelfId(), ev->Cookie, OperatorId, *blobIds);
-        NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+        NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
             new TEvPipeCache::TEvForward(evResend.release(), ev->Cookie, true), IEventHandle::FlagTrackDelivery, ev->Cookie);
     }
 protected:
@@ -61,7 +61,7 @@ class TSharedBlobsCollectionActor: public TActorBootstrapped<TDerived> {
         } else {
             for (auto&& i : BlobIdsByTablets) {
                 auto ev = std::make_unique<NEvents::TEvDeleteSharedBlobs>(TBase::SelfId(), (ui64)SelfTabletId, OperatorId, i.second);
-                NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+                NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
                     new TEvPipeCache::TEvForward(ev.release(), (ui64)i.first, true), IEventHandle::FlagTrackDelivery, (ui64)i.first);
             }
         }
diff --git a/ydb/core/tx/columnshard/data_sharing/destination/session/destination.cpp b/ydb/core/tx/columnshard/data_sharing/destination/session/destination.cpp
index b3ce83bcf961..b66012803463 100644
--- a/ydb/core/tx/columnshard/data_sharing/destination/session/destination.cpp
+++ b/ydb/core/tx/columnshard/data_sharing/destination/session/destination.cpp
@@ -46,11 +46,11 @@ void TDestinationSession::SendCurrentCursorAck(const NColumnShard::TColumnShard&
         found = true;
         if (cursor.GetDataFinished()) {
             auto ev = std::make_unique<NEvents::TEvAckFinishToSource>(GetSessionId());
-            NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+            NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
                 new TEvPipeCache::TEvForward(ev.release(), (ui64)cursor.GetTabletId(), true), IEventHandle::FlagTrackDelivery, GetRuntimeId());
         } else if (cursor.GetPackIdx()) {
             auto ev = std::make_unique<NEvents::TEvAckDataToSource>(GetSessionId(), cursor.GetPackIdx());
-            NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+            NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
                 new TEvPipeCache::TEvForward(ev.release(), (ui64)cursor.GetTabletId(), true), IEventHandle::FlagTrackDelivery, GetRuntimeId());
         } else {
             std::set<ui64> pathIdsBase;
@@ -59,7 +59,7 @@ void TDestinationSession::SendCurrentCursorAck(const NColumnShard::TColumnShard&
             }
             TSourceSession source(GetSessionId(), TransferContext, cursor.GetTabletId(), pathIdsBase, (TTabletId)shard.TabletID());
             auto ev = std::make_unique<NEvents::TEvStartToSource>(source);
-            NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+            NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
                 new TEvPipeCache::TEvForward(ev.release(), (ui64)cursor.GetTabletId(), true), IEventHandle::FlagTrackDelivery, GetRuntimeId());
         }
     }
diff --git a/ydb/core/tx/columnshard/data_sharing/initiator/controller/schemeshard.h b/ydb/core/tx/columnshard/data_sharing/initiator/controller/schemeshard.h
index 17ef14c50e20..293b67a98657 100644
--- a/ydb/core/tx/columnshard/data_sharing/initiator/controller/schemeshard.h
+++ b/ydb/core/tx/columnshard/data_sharing/initiator/controller/schemeshard.h
@@ -40,7 +40,7 @@ class TSSInitiatorController: public IInitiatorController {
     }
     virtual void DoFinished(const TString& /*sessionId*/) const override {
 //        auto ev = std::make_unique<TBlobsTransferFinished>(sessionId);
-//        NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+//        NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
 //            new TEvPipeCache::TEvForward(ev.release(), (ui64)TabletId, true), IEventHandle::FlagTrackDelivery, ReplyId);
     }
     virtual TString GetClassName() const override {
diff --git a/ydb/core/tx/columnshard/data_sharing/modification/transactions/tx_change_blobs_owning.cpp b/ydb/core/tx/columnshard/data_sharing/modification/transactions/tx_change_blobs_owning.cpp
index d10cac2c1e6b..a1ab8ae16d07 100644
--- a/ydb/core/tx/columnshard/data_sharing/modification/transactions/tx_change_blobs_owning.cpp
+++ b/ydb/core/tx/columnshard/data_sharing/modification/transactions/tx_change_blobs_owning.cpp
@@ -15,7 +15,7 @@ void TTxApplyLinksModification::DoComplete(const TActorContext& /*ctx*/) {
     Task->ApplyForRuntime(Self->GetStoragesManager()->GetSharedBlobsManager());
 
     auto ev = std::make_unique<NOlap::NDataSharing::NEvents::TEvApplyLinksModificationFinished>(Task->GetTabletId(), SessionId, PackIdx);
-    NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+    NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
         new TEvPipeCache::TEvForward(ev.release(), (ui64)InitiatorTabletId, true), IEventHandle::FlagTrackDelivery);
 }
 
diff --git a/ydb/core/tx/columnshard/data_sharing/source/session/source.cpp b/ydb/core/tx/columnshard/data_sharing/source/session/source.cpp
index 3cf78859289f..3e9ad429c183 100644
--- a/ydb/core/tx/columnshard/data_sharing/source/session/source.cpp
+++ b/ydb/core/tx/columnshard/data_sharing/source/session/source.cpp
@@ -75,7 +75,7 @@ void TSourceSession::ActualizeDestination(const std::shared_ptr<NDataLocks::TMan
         if (!Cursor->IsAckDataReceived()) {
             const THashMap<ui64, NEvents::TPathIdData>& packPortions = Cursor->GetSelected();
             auto ev = std::make_unique<NEvents::TEvSendDataFromSource>(GetSessionId(), Cursor->GetPackIdx(), SelfTabletId, packPortions);
-            NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+            NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
                 new TEvPipeCache::TEvForward(ev.release(), (ui64)DestinationTabletId, true), IEventHandle::FlagTrackDelivery, GetRuntimeId());
         }
         {
@@ -85,13 +85,13 @@ void TSourceSession::ActualizeDestination(const std::shared_ptr<NDataLocks::TMan
                     continue;
                 }
                 auto ev = std::make_unique<NEvents::TEvApplyLinksModification>(SelfTabletId, GetSessionId(), Cursor->GetPackIdx(), task);
-                NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+                NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
                     new TEvPipeCache::TEvForward(ev.release(), (ui64)tabletId, true), IEventHandle::FlagTrackDelivery, GetRuntimeId());
             }
         }
     } else {
         auto ev = std::make_unique<NEvents::TEvFinishedFromSource>(GetSessionId(), SelfTabletId);
-        NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),
+        NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),
             new TEvPipeCache::TEvForward(ev.release(), (ui64)DestinationTabletId, true), IEventHandle::FlagTrackDelivery, GetRuntimeId());
         Finish(dataLocksManager);
     }
diff --git a/ydb/core/tx/coordinator/coordinator__last_step_subscriptions.cpp b/ydb/core/tx/coordinator/coordinator__last_step_subscriptions.cpp
index e7d4bd2fe984..c13b6972abf9 100644
--- a/ydb/core/tx/coordinator/coordinator__last_step_subscriptions.cpp
+++ b/ydb/core/tx/coordinator/coordinator__last_step_subscriptions.cpp
@@ -141,7 +141,7 @@ namespace NKikimr::NFlatTxCoordinator {
 
     void TTxCoordinator::SubscribeToSibling(TSiblingState& state) {
         if (!state.Subscribed) {
-            auto pipeCache = MakePipePeNodeCacheID(false);
+            auto pipeCache = MakePipePerNodeCacheID(false);
             Send(pipeCache, new TEvPipeCache::TEvForward(
                     new TEvTxProxy::TEvSubscribeLastStep(state.CoordinatorId, ++state.SeqNo),
                     state.CoordinatorId,
@@ -153,7 +153,7 @@ namespace NKikimr::NFlatTxCoordinator {
     void TTxCoordinator::UnsubscribeFromSiblings() {
         for (auto& pr : Siblings) {
             if (pr.second.Subscribed) {
-                auto pipeCache = MakePipePeNodeCacheID(false);
+                auto pipeCache = MakePipePerNodeCacheID(false);
                 Send(pipeCache, new TEvPipeCache::TEvForward(
                         new TEvTxProxy::TEvUnsubscribeLastStep(pr.first, pr.second.SeqNo),
                         pr.first,
diff --git a/ydb/core/tx/data_events/shard_writer.cpp b/ydb/core/tx/data_events/shard_writer.cpp
index b356a70de79d..f7dcb85e705d 100644
--- a/ydb/core/tx/data_events/shard_writer.cpp
+++ b/ydb/core/tx/data_events/shard_writer.cpp
@@ -41,7 +41,7 @@ namespace NKikimr::NEvWrite {
         , DedupId(dedupId)
         , DataForShard(data)
         , ExternalController(externalController)
-        , LeaderPipeCache(MakePipePeNodeCacheID(false))
+        , LeaderPipeCache(MakePipePerNodeCacheID(false))
         , ActorSpan(parentSpan.BuildChildrenSpan("ShardWriter"))
     {
     }
diff --git a/ydb/core/tx/datashard/datashard.cpp b/ydb/core/tx/datashard/datashard.cpp
index 883981622674..9a2dd40d9425 100644
--- a/ydb/core/tx/datashard/datashard.cpp
+++ b/ydb/core/tx/datashard/datashard.cpp
@@ -102,7 +102,7 @@ class TDatashardKeySampler : public NMiniKQL::IKeyAccessSampler {
 TDataShard::TDataShard(const TActorId &tablet, TTabletStorageInfo *info)
     : TActor(&TThis::StateInit)
     , TTabletExecutedFlat(info, tablet, new TDataShardMiniKQLFactory(this))
-    , PersistentPipeCache(MakePipePeNodeCacheID(EPipePeNodeCache::Persistent))
+    , PersistentPipeCache(MakePipePerNodeCacheID(EPipePerNodeCache::Persistent))
     , SchemeShardPipeRetryPolicy({})
     , PathOwnerId(INVALID_TABLET_ID)
     , CurrentSchemeShardId(INVALID_TABLET_ID)
diff --git a/ydb/core/tx/datashard/datashard_repl_offsets_client.cpp b/ydb/core/tx/datashard/datashard_repl_offsets_client.cpp
index 777479d3827b..fd1fe8608ce7 100644
--- a/ydb/core/tx/datashard/datashard_repl_offsets_client.cpp
+++ b/ydb/core/tx/datashard/datashard_repl_offsets_client.cpp
@@ -15,7 +15,7 @@ namespace NKikimr::NDataShard {
             : Owner(owner)
             , SrcTabletId(srcTabletId)
             , PathId(pathId)
-            , PipeCache(MakePipePeNodeCacheID(false))
+            , PipeCache(MakePipePerNodeCacheID(false))
             , Result(new TEvPrivate::TEvReplicationSourceOffsets(srcTabletId, pathId))
         { }
 
diff --git a/ydb/core/tx/datashard/ut_common/datashard_ut_common.cpp b/ydb/core/tx/datashard/ut_common/datashard_ut_common.cpp
index 7473631d6890..44d573cf96de 100644
--- a/ydb/core/tx/datashard/ut_common/datashard_ut_common.cpp
+++ b/ydb/core/tx/datashard/ut_common/datashard_ut_common.cpp
@@ -2405,7 +2405,7 @@ void SendViaPipeCache(
     ui32 nodeIndex = sender.NodeId() - runtime.GetNodeId(0);
     runtime.Send(
         new IEventHandle(
-            MakePipePeNodeCacheID(options.Follower),
+            MakePipePerNodeCacheID(options.Follower),
             sender,
             new TEvPipeCache::TEvForward(msg.release(), tabletId, options.Subscribe),
             options.Flags,
diff --git a/ydb/core/tx/long_tx_service/acquire_snapshot_impl.cpp b/ydb/core/tx/long_tx_service/acquire_snapshot_impl.cpp
index 81cb5bf8c91c..52558c3a5abc 100644
--- a/ydb/core/tx/long_tx_service/acquire_snapshot_impl.cpp
+++ b/ydb/core/tx/long_tx_service/acquire_snapshot_impl.cpp
@@ -24,7 +24,7 @@ namespace NLongTxService {
             , Cookie(cookie)
             , DatabaseName(databaseName)
             , SchemeCache(MakeSchemeCacheID())
-            , LeaderPipeCache(MakePipePeNodeCacheID(false))
+            , LeaderPipeCache(MakePipePerNodeCacheID(false))
             , LogPrefix("LongTxService.AcquireSnapshot ")
         { }
 
diff --git a/ydb/core/tx/sequenceproxy/sequenceproxy_allocate.cpp b/ydb/core/tx/sequenceproxy/sequenceproxy_allocate.cpp
index be9da3e15049..28de42c38deb 100644
--- a/ydb/core/tx/sequenceproxy/sequenceproxy_allocate.cpp
+++ b/ydb/core/tx/sequenceproxy/sequenceproxy_allocate.cpp
@@ -24,7 +24,7 @@ namespace NSequenceProxy {
         TAllocateActor(const TActorId& owner, ui64 cookie, ui64 tabletId, const TPathId& pathId, ui64 cache)
             : Owner(owner)
             , Cookie(cookie)
-            , PipeCache(MakePipePeNodeCacheID(true))
+            , PipeCache(MakePipePerNodeCacheID(true))
             , TabletId(tabletId)
             , PathId(pathId)
             , Cache(cache)
diff --git a/ydb/core/tx/time_cast/time_cast.cpp b/ydb/core/tx/time_cast/time_cast.cpp
index 3348711bcea9..dfe773b4a2e1 100644
--- a/ydb/core/tx/time_cast/time_cast.cpp
+++ b/ydb/core/tx/time_cast/time_cast.cpp
@@ -318,7 +318,7 @@ void TMediatorTimecastProxy::Handle(TEvMediatorTimecast::TEvWaitPlanStep::TPtr &
         for (ui64 coordinatorId : mediator.Coordinators) {
             TMediatorCoordinator &coordinator = MediatorCoordinators[coordinatorId];
             if (coordinator.WaitingSteps.insert(planStep).second && !coordinator.RetryPending) {
-                Send(MakePipePeNodeCacheID(false),
+                Send(MakePipePerNodeCacheID(false),
                     new TEvPipeCache::TEvForward(
                         new TEvTxProxy::TEvRequirePlanSteps(coordinatorId, planStep),
                         coordinatorId,
@@ -370,7 +370,7 @@ void TMediatorTimecastProxy::Handle(TEvPrivate::TEvRetryCoordinator::TPtr &ev, c
     if (it != MediatorCoordinators.end() && it->second.RetryPending) {
         it->second.RetryPending = false;
         if (!it->second.WaitingSteps.empty()) {
-            Send(MakePipePeNodeCacheID(false),
+            Send(MakePipePerNodeCacheID(false),
                 new TEvPipeCache::TEvForward(
                     new TEvTxProxy::TEvRequirePlanSteps(msg->Coordinator, it->second.WaitingSteps),
                     msg->Coordinator,
diff --git a/ydb/core/tx/tx_proxy/proxy_impl.cpp b/ydb/core/tx/tx_proxy/proxy_impl.cpp
index dfaf5e35f74d..a8c758309d8d 100644
--- a/ydb/core/tx/tx_proxy/proxy_impl.cpp
+++ b/ydb/core/tx/tx_proxy/proxy_impl.cpp
@@ -441,9 +441,9 @@ class TTxProxy : public TActorBootstrapped<TTxProxy> {
         Services.SchemeCache = ctx.ExecutorThread.RegisterActor(CreateSchemeBoardSchemeCache(cacheConfig.Get()));
         ctx.ExecutorThread.ActorSystem->RegisterLocalService(MakeSchemeCacheID(), Services.SchemeCache);
 
-        // PipePeNodeCaches are an external dependency
-        Services.LeaderPipeCache = MakePipePeNodeCacheID(false);
-        Services.FollowerPipeCache = MakePipePeNodeCacheID(true);
+        // PipePerNodeCaches are an external dependency
+        Services.LeaderPipeCache = MakePipePerNodeCacheID(false);
+        Services.FollowerPipeCache = MakePipePerNodeCacheID(true);
 
         TxAllocatorClient.Bootstrap(ctx);
 
diff --git a/ydb/core/tx/tx_proxy/upload_rows_common_impl.h b/ydb/core/tx/tx_proxy/upload_rows_common_impl.h
index 4f43111e3a71..33e5c7c2c017 100644
--- a/ydb/core/tx/tx_proxy/upload_rows_common_impl.h
+++ b/ydb/core/tx/tx_proxy/upload_rows_common_impl.h
@@ -213,7 +213,7 @@ class TUploadRowsBase : public TActorBootstrapped<TUploadRowsBase<DerivedActivit
     explicit TUploadRowsBase(TDuration timeout = TDuration::Max(), bool diskQuotaExceeded = false, NWilson::TSpan span = {})
         : TBase()
         , SchemeCache(MakeSchemeCacheID())
-        , LeaderPipeCache(MakePipePeNodeCacheID(false))
+        , LeaderPipeCache(MakePipePerNodeCacheID(false))
         , Timeout((timeout && timeout <= DEFAULT_TIMEOUT) ? timeout : DEFAULT_TIMEOUT)
         , Status(Ydb::StatusIds::SUCCESS)
         , DiskQuotaExceeded(diskQuotaExceeded)
diff --git a/ydb/services/metadata/common/ss_dialog.cpp b/ydb/services/metadata/common/ss_dialog.cpp
index 81e61ed15a85..eed3d71d01dc 100644
--- a/ydb/services/metadata/common/ss_dialog.cpp
+++ b/ydb/services/metadata/common/ss_dialog.cpp
@@ -29,7 +29,7 @@ void TSSDialogActor::Handle(TEvTxProxySchemeCache::TEvNavigateKeySetResult::TPtr
     auto& entity = request->ResultSet.front();
     SchemeShardId = entity.DomainInfo->ExtractSchemeShard();
     NTabletPipe::TClientConfig clientConfig;
-    SchemeShardPipe = MakePipePeNodeCacheID(false);
+    SchemeShardPipe = MakePipePerNodeCacheID(false);
     Execute();
 }
 
