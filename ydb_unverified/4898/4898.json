{
  "repo": "ydb-platform/ydb",
  "pull_number": 4898,
  "instance_id": "ydb-platform__ydb-4898",
  "issue_numbers": [
    "4769"
  ],
  "base_commit": "2f366dc34b456c2e728ac13d0f985ae215df79ff",
  "patch": "diff --git a/ydb/core/base/tablet_pipecache.h b/ydb/core/base/tablet_pipecache.h\nindex 8df3589c8eda..43e33ab475d8 100644\n--- a/ydb/core/base/tablet_pipecache.h\n+++ b/ydb/core/base/tablet_pipecache.h\n@@ -131,26 +131,26 @@ struct TEvPipeCache {\n     };\n };\n \n-struct TPipePeNodeCacheConfig : public TAtomicRefCount<TPipePeNodeCacheConfig>{\n+struct TPipePerNodeCacheConfig : public TAtomicRefCount<TPipePerNodeCacheConfig>{\n     ui64 TabletCacheLimit = 500000;\n     TDuration PipeRefreshTime = TDuration::Zero();\n     NTabletPipe::TClientConfig PipeConfig = DefaultPipeConfig();\n     ::NMonitoring::TDynamicCounterPtr Counters;\n \n-    TPipePeNodeCacheConfig() = default;\n+    TPipePerNodeCacheConfig() = default;\n \n     static NTabletPipe::TClientConfig DefaultPipeConfig();\n     static NTabletPipe::TClientConfig DefaultPersistentPipeConfig();\n };\n \n-enum class EPipePeNodeCache {\n+enum class EPipePerNodeCache {\n     Leader,\n     Follower,\n     Persistent,\n };\n \n-IActor* CreatePipePeNodeCache(const TIntrusivePtr<TPipePeNodeCacheConfig> &config);\n-TActorId MakePipePeNodeCacheID(EPipePeNodeCache kind);\n-TActorId MakePipePeNodeCacheID(bool allowFollower);\n+IActor* CreatePipePerNodeCache(const TIntrusivePtr<TPipePerNodeCacheConfig> &config);\n+TActorId MakePipePerNodeCacheID(EPipePerNodeCache kind);\n+TActorId MakePipePerNodeCacheID(bool allowFollower);\n \n }\ndiff --git a/ydb/core/driver_lib/run/kikimr_services_initializers.cpp b/ydb/core/driver_lib/run/kikimr_services_initializers.cpp\nindex 5e7f21aba13c..8a19b586fbc9 100644\n--- a/ydb/core/driver_lib/run/kikimr_services_initializers.cpp\n+++ b/ydb/core/driver_lib/run/kikimr_services_initializers.cpp\n@@ -1343,41 +1343,41 @@ void TTabletResolverInitializer::InitializeServices(\n \n }\n \n-// TTabletPipePeNodeCachesInitializer\n+// TTabletPipePerNodeCachesInitializer\n \n-TTabletPipePeNodeCachesInitializer::TTabletPipePeNodeCachesInitializer(const TKikimrRunConfig& runConfig)\n+TTabletPipePerNodeCachesInitializer::TTabletPipePerNodeCachesInitializer(const TKikimrRunConfig& runConfig)\n     : IKikimrServicesInitializer(runConfig) {\n }\n \n-void TTabletPipePeNodeCachesInitializer::InitializeServices(\n+void TTabletPipePerNodeCachesInitializer::InitializeServices(\n             NActors::TActorSystemSetup* setup,\n             const NKikimr::TAppData* appData)\n {\n     auto counters = GetServiceCounters(appData->Counters, \"tablets\");\n \n-    TIntrusivePtr<TPipePeNodeCacheConfig> leaderPipeConfig = new TPipePeNodeCacheConfig();\n+    TIntrusivePtr<TPipePerNodeCacheConfig> leaderPipeConfig = new TPipePerNodeCacheConfig();\n     leaderPipeConfig->PipeRefreshTime = TDuration::Zero();\n     leaderPipeConfig->Counters = counters->GetSubgroup(\"type\", \"LEADER_PIPE_CACHE\");\n \n-    TIntrusivePtr<TPipePeNodeCacheConfig> followerPipeConfig = new TPipePeNodeCacheConfig();\n+    TIntrusivePtr<TPipePerNodeCacheConfig> followerPipeConfig = new TPipePerNodeCacheConfig();\n     followerPipeConfig->PipeRefreshTime = TDuration::Seconds(30);\n     followerPipeConfig->PipeConfig.AllowFollower = true;\n     followerPipeConfig->Counters = counters->GetSubgroup(\"type\", \"FOLLOWER_PIPE_CACHE\");\n \n-    TIntrusivePtr<TPipePeNodeCacheConfig> persistentPipeConfig = new TPipePeNodeCacheConfig();\n+    TIntrusivePtr<TPipePerNodeCacheConfig> persistentPipeConfig = new TPipePerNodeCacheConfig();\n     persistentPipeConfig->PipeRefreshTime = TDuration::Zero();\n-    persistentPipeConfig->PipeConfig = TPipePeNodeCacheConfig::DefaultPersistentPipeConfig();\n+    persistentPipeConfig->PipeConfig = TPipePerNodeCacheConfig::DefaultPersistentPipeConfig();\n     persistentPipeConfig->Counters = counters->GetSubgroup(\"type\", \"PERSISTENT_PIPE_CACHE\");\n \n     setup->LocalServices.emplace_back(\n-        MakePipePeNodeCacheID(false),\n-        TActorSetupCmd(CreatePipePeNodeCache(leaderPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));\n+        MakePipePerNodeCacheID(false),\n+        TActorSetupCmd(CreatePipePerNodeCache(leaderPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));\n     setup->LocalServices.emplace_back(\n-        MakePipePeNodeCacheID(true),\n-        TActorSetupCmd(CreatePipePeNodeCache(followerPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));\n+        MakePipePerNodeCacheID(true),\n+        TActorSetupCmd(CreatePipePerNodeCache(followerPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));\n     setup->LocalServices.emplace_back(\n-        MakePipePeNodeCacheID(EPipePeNodeCache::Persistent),\n-        TActorSetupCmd(CreatePipePeNodeCache(persistentPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));\n+        MakePipePerNodeCacheID(EPipePerNodeCache::Persistent),\n+        TActorSetupCmd(CreatePipePerNodeCache(persistentPipeConfig), TMailboxType::ReadAsFilled, appData->UserPoolId));\n }\n \n // TTabletMonitoringProxyInitializer\ndiff --git a/ydb/core/driver_lib/run/kikimr_services_initializers.h b/ydb/core/driver_lib/run/kikimr_services_initializers.h\nindex 44d450a35636..f8c48e995b4c 100644\n--- a/ydb/core/driver_lib/run/kikimr_services_initializers.h\n+++ b/ydb/core/driver_lib/run/kikimr_services_initializers.h\n@@ -143,9 +143,9 @@ class TTabletResolverInitializer : public IKikimrServicesInitializer {\n     void InitializeServices(NActors::TActorSystemSetup *setup, const NKikimr::TAppData *appData) override;\n };\n \n-class TTabletPipePeNodeCachesInitializer : public IKikimrServicesInitializer {\n+class TTabletPipePerNodeCachesInitializer : public IKikimrServicesInitializer {\n public:\n-    TTabletPipePeNodeCachesInitializer(const TKikimrRunConfig& runConfig);\n+    TTabletPipePerNodeCachesInitializer(const TKikimrRunConfig& runConfig);\n \n     void InitializeServices(NActors::TActorSystemSetup *setup, const NKikimr::TAppData *appData) override;\n };\ndiff --git a/ydb/core/driver_lib/run/run.cpp b/ydb/core/driver_lib/run/run.cpp\nindex e86aa2538def..2e999bd16543 100644\n--- a/ydb/core/driver_lib/run/run.cpp\n+++ b/ydb/core/driver_lib/run/run.cpp\n@@ -1440,7 +1440,7 @@ TIntrusivePtr<TServiceInitializersList> TKikimrRunner::CreateServiceInitializers\n     }\n     if (serviceMask.EnableTabletResolver) {\n         sil->AddServiceInitializer(new TTabletResolverInitializer(runConfig));\n-        sil->AddServiceInitializer(new TTabletPipePeNodeCachesInitializer(runConfig));\n+        sil->AddServiceInitializer(new TTabletPipePerNodeCachesInitializer(runConfig));\n     }\n     if (serviceMask.EnableTabletMonitoringProxy) {\n         sil->AddServiceInitializer(new TTabletMonitoringProxyInitializer(runConfig));\ndiff --git a/ydb/core/grpc_services/rpc_kh_describe.cpp b/ydb/core/grpc_services/rpc_kh_describe.cpp\nindex cd9e5a87d810..8e5b621e0dbf 100644\n--- a/ydb/core/grpc_services/rpc_kh_describe.cpp\n+++ b/ydb/core/grpc_services/rpc_kh_describe.cpp\n@@ -98,7 +98,7 @@ class TKikhouseDescribeTableRPC : public TActorBootstrapped<TKikhouseDescribeTab\n             }\n \n             std::unique_ptr<TEvTablet::TEvLocalSchemeTx> ev(new TEvTablet::TEvLocalSchemeTx());\n-            ctx.Send(MakePipePeNodeCacheID(true), new TEvPipeCache::TEvForward(ev.release(), *tabletId, true), IEventHandle::FlagTrackDelivery);\n+            ctx.Send(MakePipePerNodeCacheID(true), new TEvPipeCache::TEvForward(ev.release(), *tabletId, true), IEventHandle::FlagTrackDelivery);\n \n             TBase::Become(&TThis::StateWaitResolveTable);\n             WaitingResolveReply = true;\ndiff --git a/ydb/core/grpc_services/rpc_object_storage.cpp b/ydb/core/grpc_services/rpc_object_storage.cpp\nindex 6f2ccde4edf4..8ed0134084b6 100644\n--- a/ydb/core/grpc_services/rpc_object_storage.cpp\n+++ b/ydb/core/grpc_services/rpc_object_storage.cpp\n@@ -250,7 +250,7 @@ class TObjectStorageListingRequestGrpc : public TActorBootstrapped<TObjectStorag\n         , UserToken(std::move(userToken))\n         , MaxKeys(DEFAULT_MAX_KEYS)\n         , SchemeCache(schemeCache)\n-        , LeaderPipeCache(MakePipePeNodeCacheID(false))\n+        , LeaderPipeCache(MakePipePerNodeCacheID(false))\n         , Timeout(TDuration::Seconds(DEFAULT_TIMEOUT_SEC))\n         , WaitingResolveReply(false)\n         , Finished(false)\ndiff --git a/ydb/core/grpc_services/rpc_read_columns.cpp b/ydb/core/grpc_services/rpc_read_columns.cpp\nindex 47e1f86d3f2e..a7ab4cc54ab1 100644\n--- a/ydb/core/grpc_services/rpc_read_columns.cpp\n+++ b/ydb/core/grpc_services/rpc_read_columns.cpp\n@@ -81,7 +81,7 @@ class TReadColumnsRPC : public TActorBootstrapped<TReadColumnsRPC> {\n         : TBase()\n         , Request(std::move(request))\n         , SchemeCache(MakeSchemeCacheID())\n-        , LeaderPipeCache(MakePipePeNodeCacheID(false))\n+        , LeaderPipeCache(MakePipePerNodeCacheID(false))\n         , Timeout(TDuration::Seconds(DEFAULT_TIMEOUT_SEC))\n         , WaitingResolveReply(false)\n         , Finished(false)\n@@ -147,7 +147,7 @@ class TReadColumnsRPC : public TActorBootstrapped<TReadColumnsRPC> {\n             }\n \n             std::unique_ptr<TEvTablet::TEvLocalSchemeTx> ev(new TEvTablet::TEvLocalSchemeTx());\n-            ctx.Send(MakePipePeNodeCacheID(true), new TEvPipeCache::TEvForward(ev.release(), *tabletId, true), IEventHandle::FlagTrackDelivery);\n+            ctx.Send(MakePipePerNodeCacheID(true), new TEvPipeCache::TEvForward(ev.release(), *tabletId, true), IEventHandle::FlagTrackDelivery);\n \n             TBase::Become(&TThis::StateWaitResolveTable);\n             WaitingResolveReply = true;\ndiff --git a/ydb/core/grpc_services/rpc_read_rows.cpp b/ydb/core/grpc_services/rpc_read_rows.cpp\nindex 2769ff5a641f..4065927fa755 100644\n--- a/ydb/core/grpc_services/rpc_read_rows.cpp\n+++ b/ydb/core/grpc_services/rpc_read_rows.cpp\n@@ -84,7 +84,7 @@ class TReadRowsRPC : public TActorBootstrapped<TReadRowsRPC> {\n public:\n     explicit TReadRowsRPC(std::unique_ptr<IRequestNoOpCtx> request)\n         : Request(std::move(request))\n-        , PipeCache(MakePipePeNodeCacheID(true))\n+        , PipeCache(MakePipePerNodeCacheID(true))\n         , Span(TWilsonGrpc::RequestActor, Request->GetWilsonTraceId(), \"ReadRowsRpc\")\n     {}\n \ndiff --git a/ydb/core/kqp/compute_actor/kqp_scan_compute_manager.h b/ydb/core/kqp/compute_actor/kqp_scan_compute_manager.h\nindex a6678fb6514e..5f3d7496ec66 100644\n--- a/ydb/core/kqp/compute_actor/kqp_scan_compute_manager.h\n+++ b/ydb/core/kqp/compute_actor/kqp_scan_compute_manager.h\n@@ -64,7 +64,7 @@ class TShardScannerInfo {\n         AFL_DEBUG(NKikimrServices::KQP_COMPUTE)(\"event\", \"start_scanner\")(\"info\", state.ToString(keyColumnTypes))\n             (\"range\", DebugPrintRanges(keyColumnTypes, ranges, *AppData()->TypeRegistry))(\"subscribed\", subscribed);\n \n-        NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+        NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n             new TEvPipeCache::TEvForward(ev.release(), TabletId, !subscribed), IEventHandle::FlagTrackDelivery);\n     }\n \n@@ -74,7 +74,7 @@ class TShardScannerInfo {\n             auto abortEv = std::make_unique<TEvKqp::TEvAbortExecution>(NYql::NDqProto::StatusIds::CANCELLED, message ? message : \"stop from fetcher\");\n             NActors::TActivationContext::AsActorContext().Send(*ActorId, std::move(abortEv));\n             if (finalFlag) {\n-                NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(TabletId));\n+                NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(TabletId));\n                 NActors::TActivationContext::AsActorContext().Send(TActivationContext::InterconnectProxy(ActorId->NodeId()), new TEvents::TEvUnsubscribe());\n             }\n             ActorId = {};\ndiff --git a/ydb/core/kqp/compute_actor/kqp_scan_fetcher_actor.h b/ydb/core/kqp/compute_actor/kqp_scan_fetcher_actor.h\nindex da998ccae3a0..962aee326470 100644\n--- a/ydb/core/kqp/compute_actor/kqp_scan_fetcher_actor.h\n+++ b/ydb/core/kqp/compute_actor/kqp_scan_fetcher_actor.h\n@@ -153,7 +153,7 @@ class TKqpScanFetcherActor: public NActors::TActorBootstrapped<TKqpScanFetcherAc\n \n private:\n     void PassAway() override {\n-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n         TBase::PassAway();\n     }\n \ndiff --git a/ydb/core/kqp/executer_actor/kqp_data_executer.cpp b/ydb/core/kqp/executer_actor/kqp_data_executer.cpp\nindex c8e9bce63a59..04c83281e55f 100644\n--- a/ydb/core/kqp/executer_actor/kqp_data_executer.cpp\n+++ b/ydb/core/kqp/executer_actor/kqp_data_executer.cpp\n@@ -652,7 +652,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da\n                 YQL_ENSURE(state.DatashardState.Defined());\n                 YQL_ENSURE(!state.DatashardState->Follower);\n \n-                Send(MakePipePeNodeCacheID(/* allowFollowers */ false), new TEvPipeCache::TEvForward(\n+                Send(MakePipePerNodeCacheID(/* allowFollowers */ false), new TEvPipeCache::TEvForward(\n                     new TEvDataShard::TEvCancelTransactionProposal(TxId), shardId, /* subscribe */ false));\n             }\n         }\n@@ -1021,7 +1021,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da\n         }\n \n         LOG_T(\"Execute planned transaction, coordinator: \" << TxCoordinator);\n-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvForward(ev.Release(), TxCoordinator, /* subscribe */ true));\n+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvForward(ev.Release(), TxCoordinator, /* subscribe */ true));\n     }\n \n private:\n@@ -1338,7 +1338,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da\n \n         LOG_I(\"Reattach to shard \" << tabletId);\n \n-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvForward(\n+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvForward(\n             new TEvDataShard::TEvProposeTransactionAttach(tabletId, TxId),\n             tabletId, /* subscribe */ true), 0, ++shardState->ReattachState.Cookie);\n     }\n@@ -1695,7 +1695,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da\n \n         LOG_D(\"ExecuteDatashardTransaction traceId.verbosity: \" << std::to_string(traceId.GetVerbosity()));\n \n-        Send(MakePipePeNodeCacheID(GetUseFollowers()), new TEvPipeCache::TEvForward(ev.release(), shardId, true), 0, 0, std::move(traceId));\n+        Send(MakePipePerNodeCacheID(GetUseFollowers()), new TEvPipeCache::TEvForward(ev.release(), shardId, true), 0, 0, std::move(traceId));\n \n         auto result = ShardStates.emplace(shardId, std::move(shardState));\n         YQL_ENSURE(result.second);\n@@ -1726,7 +1726,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da\n \n         LOG_D(\"ExecuteEvWriteTransaction traceId.verbosity: \" << std::to_string(traceId.GetVerbosity()));\n \n-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvForward(evWriteTransaction.release(), shardId, true), 0, 0, std::move(traceId));\n+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvForward(evWriteTransaction.release(), shardId, true), 0, 0, std::move(traceId));\n \n         auto result = ShardStates.emplace(shardId, std::move(shardState));\n         YQL_ENSURE(result.second);\n@@ -2605,7 +2605,7 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da\n             LOG_D(\"Executing KQP transaction on topic tablet: \" << tabletId\n                   << \", writeId: \" << writeId);\n \n-            Send(MakePipePeNodeCacheID(false),\n+            Send(MakePipePerNodeCacheID(false),\n                  new TEvPipeCache::TEvForward(ev.release(), tabletId, true),\n                  0,\n                  0,\n@@ -2632,10 +2632,10 @@ class TKqpDataExecuter : public TKqpExecuterBase<TKqpDataExecuter, EExecType::Da\n         Counters->TxProxyMon->TxTotalTimeHgram->Collect(totalTime.MilliSeconds());\n         Counters->TxProxyMon->TxExecuteTimeHgram->Collect(totalTime.MilliSeconds());\n \n-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n \n         if (GetUseFollowers()) {\n-            Send(MakePipePeNodeCacheID(true), new TEvPipeCache::TEvUnlink(0));\n+            Send(MakePipePerNodeCacheID(true), new TEvPipeCache::TEvUnlink(0));\n         }\n \n         TBase::PassAway();\ndiff --git a/ydb/core/kqp/executer_actor/kqp_executer_impl.h b/ydb/core/kqp/executer_actor/kqp_executer_impl.h\nindex ab2e544bce8b..5f6f5a538bce 100644\n--- a/ydb/core/kqp/executer_actor/kqp_executer_impl.h\n+++ b/ydb/core/kqp/executer_actor/kqp_executer_impl.h\n@@ -575,7 +575,7 @@ class TKqpExecuterBase : public TActorBootstrapped<TDerived> {\n     void InvalidateNode(ui64 node) {\n         for (auto tablet : ShardsOnNode[node]) {\n             auto ev = MakeHolder<TEvPipeCache::TEvForcePipeReconnect>(tablet);\n-            this->Send(MakePipePeNodeCacheID(false), ev.Release());\n+            this->Send(MakePipePerNodeCacheID(false), ev.Release());\n         }\n     }\n \ndiff --git a/ydb/core/kqp/executer_actor/kqp_shards_resolver.cpp b/ydb/core/kqp/executer_actor/kqp_shards_resolver.cpp\nindex a33deb3af3b0..7b20b791436e 100644\n--- a/ydb/core/kqp/executer_actor/kqp_shards_resolver.cpp\n+++ b/ydb/core/kqp/executer_actor/kqp_shards_resolver.cpp\n@@ -41,7 +41,7 @@ class TKqpShardsResolver : public TActorBootstrapped<TKqpShardsResolver> {\n         , TxId(txId)\n         , ShardIds(std::move(shardIds))\n         , UseFollowers(useFollowers)\n-        , TabletResolver(MakePipePeNodeCacheID(UseFollowers))\n+        , TabletResolver(MakePipePerNodeCacheID(UseFollowers))\n     {}\n \n     void Bootstrap() {\ndiff --git a/ydb/core/kqp/runtime/kqp_read_actor.cpp b/ydb/core/kqp/runtime/kqp_read_actor.cpp\nindex 530cd956fb0d..8be73df82927 100644\n--- a/ydb/core/kqp/runtime/kqp_read_actor.cpp\n+++ b/ydb/core/kqp/runtime/kqp_read_actor.cpp\n@@ -29,8 +29,8 @@ bool IsDebugLogEnabled(const NActors::TActorSystem* actorSystem, NActors::NLog::\n     return settings && settings->Satisfies(NActors::NLog::EPriority::PRI_DEBUG, component);\n }\n \n-NActors::TActorId MainPipeCacheId = NKikimr::MakePipePeNodeCacheID(false);\n-NActors::TActorId FollowersPipeCacheId =  NKikimr::MakePipePeNodeCacheID(true);\n+NActors::TActorId MainPipeCacheId = NKikimr::MakePipePerNodeCacheID(false);\n+NActors::TActorId FollowersPipeCacheId =  NKikimr::MakePipePerNodeCacheID(true);\n \n }\n \ndiff --git a/ydb/core/kqp/runtime/kqp_stream_lookup_actor.cpp b/ydb/core/kqp/runtime/kqp_stream_lookup_actor.cpp\nindex 5abaae6f99a5..32e81bc88a5a 100644\n--- a/ydb/core/kqp/runtime/kqp_stream_lookup_actor.cpp\n+++ b/ydb/core/kqp/runtime/kqp_stream_lookup_actor.cpp\n@@ -23,7 +23,7 @@ namespace NKqp {\n namespace {\n \n static constexpr TDuration SCHEME_CACHE_REQUEST_TIMEOUT = TDuration::Seconds(10);\n-NActors::TActorId MainPipeCacheId = NKikimr::MakePipePeNodeCacheID(false);\n+NActors::TActorId MainPipeCacheId = NKikimr::MakePipePerNodeCacheID(false);\n \n class TKqpStreamLookupActor : public NActors::TActorBootstrapped<TKqpStreamLookupActor>, public NYql::NDq::IDqComputeActorAsyncInput {\n public:\ndiff --git a/ydb/core/kqp/runtime/kqp_write_actor.cpp b/ydb/core/kqp/runtime/kqp_write_actor.cpp\nindex 713d0d734a47..46c50e026ad8 100644\n--- a/ydb/core/kqp/runtime/kqp_write_actor.cpp\n+++ b/ydb/core/kqp/runtime/kqp_write_actor.cpp\n@@ -806,7 +806,7 @@ class TKqpWriteActor : public TActorBootstrapped<TKqpWriteActor>, public NYql::N\n     }\n \n     NActors::TActorId TxProxyId = MakeTxProxyID();\n-    NActors::TActorId PipeCacheId = NKikimr::MakePipePeNodeCacheID(false);\n+    NActors::TActorId PipeCacheId = NKikimr::MakePipePerNodeCacheID(false);\n \n     TString LogPrefix;\n     const NKikimrKqp::TKqpTableSinkSettings Settings;\ndiff --git a/ydb/core/kqp/ut/common/columnshard.cpp b/ydb/core/kqp/ut/common/columnshard.cpp\nindex 4bd74f93cf74..90e3992b7176 100644\n--- a/ydb/core/kqp/ut/common/columnshard.cpp\n+++ b/ydb/core/kqp/ut/common/columnshard.cpp\n@@ -125,7 +125,7 @@ namespace NKqp {\n             }\n         }\n         for (auto shard : shards) {\n-            Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+            Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                     new TEvents::TEvPoisonPill(), shard, false));\n         }\n     }\ndiff --git a/ydb/core/kqp/ut/olap/blobs_sharing_ut.cpp b/ydb/core/kqp/ut/olap/blobs_sharing_ut.cpp\nindex 87adac24d7b2..de619f580a7b 100644\n--- a/ydb/core/kqp/ut/olap/blobs_sharing_ut.cpp\n+++ b/ydb/core/kqp/ut/olap/blobs_sharing_ut.cpp\n@@ -146,7 +146,7 @@ Y_UNIT_TEST_SUITE(KqpOlapBlobsSharing) {\n             const TString sessionId = TGUID::CreateTimebased().AsUuidString();\n             NOlap::NDataSharing::TTransferContext transferContext((NOlap::TTabletId)destination, sourceTablets, snapshot, move);\n             NOlap::NDataSharing::TDestinationSession session(std::make_shared<TTestController>(), pathIdsRemap, sessionId, transferContext);\n-            Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+            Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                 new NOlap::NDataSharing::NEvents::TEvProposeFromInitiator(session), destination, false));\n             {\n                 const TInstant start = TInstant::Now();\n@@ -157,13 +157,13 @@ Y_UNIT_TEST_SUITE(KqpOlapBlobsSharing) {\n                 AFL_VERIFY(CSTransferStatus->GetProposed());\n             }\n             if (RebootTablet) {\n-                Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+                Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                     new TEvents::TEvPoisonPill(), destination, false));\n             }\n             {\n                 const TInstant start = TInstant::Now();\n                 while (!CSTransferStatus->GetConfirmed() && TInstant::Now() - start < TDuration::Seconds(10)) {\n-                    Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+                    Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                         new NOlap::NDataSharing::NEvents::TEvConfirmFromInitiator(sessionId), destination, false));\n                     Sleep(TDuration::Seconds(1));\n                     Cerr << \"WAIT_CONFIRMED...\" << Endl;\n@@ -171,10 +171,10 @@ Y_UNIT_TEST_SUITE(KqpOlapBlobsSharing) {\n                 AFL_VERIFY(CSTransferStatus->GetConfirmed());\n             }\n             if (RebootTablet) {\n-                Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+                Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                     new TEvents::TEvPoisonPill(), destination, false));\n                 for (auto&& i : sources) {\n-                    Kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+                    Kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                         new TEvents::TEvPoisonPill(), i, false));\n                 }\n             }\ndiff --git a/ydb/core/kqp/ut/olap/indexes_ut.cpp b/ydb/core/kqp/ut/olap/indexes_ut.cpp\nindex be811e512930..c1a370231cb1 100644\n--- a/ydb/core/kqp/ut/olap/indexes_ut.cpp\n+++ b/ydb/core/kqp/ut/olap/indexes_ut.cpp\n@@ -148,7 +148,7 @@ Y_UNIT_TEST_SUITE(KqpOlapIndexes) {\n         AFL_VERIFY(startCount == 30);\n \n         for (auto&& i : csController->GetShardActualIds()) {\n-            kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+            kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                 new TEvents::TEvPoisonPill(), i, false));\n         }\n \ndiff --git a/ydb/core/kqp/ut/olap/kqp_olap_ut.cpp b/ydb/core/kqp/ut/olap/kqp_olap_ut.cpp\nindex 28c0c0f4b122..5616ce2fa7ad 100644\n--- a/ydb/core/kqp/ut/olap/kqp_olap_ut.cpp\n+++ b/ydb/core/kqp/ut/olap/kqp_olap_ut.cpp\n@@ -1622,7 +1622,7 @@ Y_UNIT_TEST_SUITE(KqpOlap) {\n                             Cerr << (TStringBuilder() << \"-- EvScanData from \" << ev->Sender << \": hijack event\" << Endl);\n                             Cerr.Flush();\n                             for (auto&& i : csController->GetShardActualIds()) {\n-                                runtime->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+                                runtime->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                                     new TEvents::TEvPoisonPill(), i, false));\n                             }\n                         } else {\ndiff --git a/ydb/core/kqp/ut/olap/write_ut.cpp b/ydb/core/kqp/ut/olap/write_ut.cpp\nindex f864ca1daf26..040b74a97082 100644\n--- a/ydb/core/kqp/ut/olap/write_ut.cpp\n+++ b/ydb/core/kqp/ut/olap/write_ut.cpp\n@@ -77,7 +77,7 @@ Y_UNIT_TEST_SUITE(KqpOlapWrite) {\n             AFL_VERIFY(Singleton<NKikimr::NWrappers::NExternalStorage::TFakeExternalStorage>()->GetDeletesCount() == 0)(\"count\", Singleton<NKikimr::NWrappers::NExternalStorage::TFakeExternalStorage>()->GetDeletesCount());\n             while (Singleton<NWrappers::NExternalStorage::TFakeExternalStorage>()->GetSize() && TMonotonic::Now() - startInstant < TDuration::Seconds(200)) {\n                 for (auto&& i : csController->GetShardActualIds()) {\n-                    kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+                    kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                         new TEvents::TEvPoisonPill(), i, false));\n                 }\n                 csController->EnableBackground(NKikimr::NYDBTest::ICSController::EBackground::GC);\n@@ -90,7 +90,7 @@ Y_UNIT_TEST_SUITE(KqpOlapWrite) {\n             const auto startInstant = TMonotonic::Now();\n             while (TMonotonic::Now() - startInstant < TDuration::Seconds(10)) {\n                 for (auto&& i : csController->GetShardActualIds()) {\n-                    kikimr.GetTestServer().GetRuntime()->Send(MakePipePeNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n+                    kikimr.GetTestServer().GetRuntime()->Send(MakePipePerNodeCacheID(false), NActors::TActorId(), new TEvPipeCache::TEvForward(\n                         new TEvents::TEvPoisonPill(), i, false));\n                 }\n                 Cerr << \"Waiting empty... \" << Singleton<NKikimr::NWrappers::NExternalStorage::TFakeExternalStorage>()->GetWritesCount() << \"/\" << Singleton<NKikimr::NWrappers::NExternalStorage::TFakeExternalStorage>()->GetDeletesCount() << Endl;\ndiff --git a/ydb/core/kqp/ut/scan/kqp_split_ut.cpp b/ydb/core/kqp/ut/scan/kqp_split_ut.cpp\nindex 81ed1beeafad..5e968ec37d08 100644\n--- a/ydb/core/kqp/ut/scan/kqp_split_ut.cpp\n+++ b/ydb/core/kqp/ut/scan/kqp_split_ut.cpp\n@@ -144,7 +144,7 @@ Y_UNIT_TEST_SUITE(KqpSplit) {\n         }\n \n     private:\n-        TActorId PipeCache = MakePipePeNodeCacheID(false);\n+        TActorId PipeCache = MakePipePerNodeCacheID(false);\n         TActorId Owner;\n         TActorId Client;\n \n@@ -397,9 +397,9 @@ Y_UNIT_TEST_SUITE(KqpSplit) {\n             : Table(table)\n         {\n             if (testActorType == ETestActorType::SorceRead) {\n-                InterceptReadActorPipeCache(MakePipePeNodeCacheID(false));\n+                InterceptReadActorPipeCache(MakePipePerNodeCacheID(false));\n             } else if (testActorType == ETestActorType::StreamLookup) {\n-                InterceptStreamLookupActorPipeCache(MakePipePeNodeCacheID(false));\n+                InterceptStreamLookupActorPipeCache(MakePipePerNodeCacheID(false));\n             }\n             \n             if (providedServer) {\ndiff --git a/ydb/core/statistics/aggregator/aggregator_impl.cpp b/ydb/core/statistics/aggregator/aggregator_impl.cpp\nindex 65f5edc9fb45..4e67bd023bc7 100644\n--- a/ydb/core/statistics/aggregator/aggregator_impl.cpp\n+++ b/ydb/core/statistics/aggregator/aggregator_impl.cpp\n@@ -455,7 +455,7 @@ void TStatisticsAggregator::NextRange() {\n     record.MutableTableId()->SetTableId(ScanTableId.PathId.LocalPathId);\n     record.SetStartKey(StartKey.GetBuffer());\n \n-    Send(MakePipePeNodeCacheID(false),\n+    Send(MakePipePerNodeCacheID(false),\n         new TEvPipeCache::TEvForward(request.release(), range.DataShardId, true),\n         IEventHandle::FlagTrackDelivery);\n }\ndiff --git a/ydb/core/sys_view/common/processor_scan.h b/ydb/core/sys_view/common/processor_scan.h\nindex a74d665b65a8..1d181f0ae10e 100644\n--- a/ydb/core/sys_view/common/processor_scan.h\n+++ b/ydb/core/sys_view/common/processor_scan.h\n@@ -74,7 +74,7 @@ class TProcessorScan : public TScanActorBase<\n         auto req = MakeHolder<TEvRequest>();\n         req->Record.CopyFrom(Request);\n \n-        TBase::Send(MakePipePeNodeCacheID(false),\n+        TBase::Send(MakePipePerNodeCacheID(false),\n             new TEvPipeCache::TEvForward(req.Release(), this->SysViewProcessorId, true),\n             IEventHandle::FlagTrackDelivery);\n \n@@ -110,7 +110,7 @@ class TProcessorScan : public TScanActorBase<\n     }\n \n     void PassAway() override {\n-        TBase::Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n+        TBase::Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n         TBase::PassAway();\n     }\n \ndiff --git a/ydb/core/sys_view/partition_stats/partition_stats.cpp b/ydb/core/sys_view/partition_stats/partition_stats.cpp\nindex 37684c26278c..87b569613fe5 100644\n--- a/ydb/core/sys_view/partition_stats/partition_stats.cpp\n+++ b/ydb/core/sys_view/partition_stats/partition_stats.cpp\n@@ -399,7 +399,7 @@ class TPartitionStatsCollector : public TActorBootstrapped<TPartitionStatsCollec\n             << \"top size# \" << sorted.size()\n             << \", time# \" << now);\n \n-        Send(MakePipePeNodeCacheID(false),\n+        Send(MakePipePerNodeCacheID(false),\n             new TEvPipeCache::TEvForward(sendEvent.Release(), SysViewProcessorId, true));\n     }\n \n@@ -413,7 +413,7 @@ class TPartitionStatsCollector : public TActorBootstrapped<TPartitionStatsCollec\n     }\n \n     void PassAway() override {\n-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n         TBase::PassAway();\n     }\n \n@@ -534,7 +534,7 @@ class TPartitionStatsScan : public TScanActorBase<TPartitionStatsScan> {\n \n         request->Record.SetIncludePathColumn(IncludePathColumn);\n \n-        auto pipeCache = MakePipePeNodeCacheID(false);\n+        auto pipeCache = MakePipePerNodeCacheID(false);\n         Send(pipeCache, new TEvPipeCache::TEvForward(request.Release(), SchemeShardId, true),\n             IEventHandle::FlagTrackDelivery);\n \n@@ -675,7 +675,7 @@ class TPartitionStatsScan : public TScanActorBase<TPartitionStatsScan> {\n     }\n \n     void PassAway() override {\n-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n         TBase::PassAway();\n     }\n \ndiff --git a/ydb/core/sys_view/query_stats/query_stats.cpp b/ydb/core/sys_view/query_stats/query_stats.cpp\nindex 8871569a3239..c2e26a237972 100644\n--- a/ydb/core/sys_view/query_stats/query_stats.cpp\n+++ b/ydb/core/sys_view/query_stats/query_stats.cpp\n@@ -172,7 +172,7 @@ class TQueryStatsScan : public TScanActorBase<TQueryStatsScan<TGreater>> {\n         auto request = MakeHolder<TEvSysView::TEvGetQueryMetricsRequest>();\n         request->Record.CopyFrom(Request);\n \n-        this->Send(MakePipePeNodeCacheID(false),\n+        this->Send(MakePipePerNodeCacheID(false),\n             new TEvPipeCache::TEvForward(request.Release(), this->SysViewProcessorId, true),\n             IEventHandle::FlagTrackDelivery);\n \n@@ -469,7 +469,7 @@ class TQueryStatsScan : public TScanActorBase<TQueryStatsScan<TGreater>> {\n \n     void PassAway() override {\n         if (UseProcessor) {\n-            this->Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n+            this->Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n         } else {\n             for (auto& [nodeId, _] : Nodes) {\n                 this->Send(TActorContext::InterconnectProxy(nodeId), new TEvents::TEvUnsubscribe);\ndiff --git a/ydb/core/sys_view/service/sysview_service.cpp b/ydb/core/sys_view/service/sysview_service.cpp\nindex 2cd2684f3cb7..5d8c76c0ad0f 100644\n--- a/ydb/core/sys_view/service/sysview_service.cpp\n+++ b/ydb/core/sys_view/service/sysview_service.cpp\n@@ -388,7 +388,7 @@ class TSysViewService : public TActorBootstrapped<TSysViewService> {\n             << \", interval end# \" << intervalEnd\n             << \", query count# \" << record.GetMetrics().HashesSize());\n \n-        Send(MakePipePeNodeCacheID(false),\n+        Send(MakePipePerNodeCacheID(false),\n             new TEvPipeCache::TEvForward(summary.Release(), processorId, true),\n             IEventHandle::FlagTrackDelivery);\n     }\n@@ -521,7 +521,7 @@ class TSysViewService : public TActorBootstrapped<TSysViewService> {\n             << \", is retrying# \" << dbCounters.IsRetrying\n             << \", is labeled# \" << isLabeled);\n \n-        Send(MakePipePeNodeCacheID(false),\n+        Send(MakePipePerNodeCacheID(false),\n             new TEvPipeCache::TEvForward(sendEv.Release(), processorId, true),\n             IEventHandle::FlagTrackDelivery);\n     }\n@@ -991,7 +991,7 @@ class TSysViewService : public TActorBootstrapped<TSysViewService> {\n     }\n \n     void PassAway() override {\n-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n         TBase::PassAway();\n     }\n \ndiff --git a/ydb/core/sys_view/storage/base.h b/ydb/core/sys_view/storage/base.h\nindex e216a8bf814e..65c8aa2910c4 100644\n--- a/ydb/core/sys_view/storage/base.h\n+++ b/ydb/core/sys_view/storage/base.h\n@@ -47,7 +47,7 @@ namespace NKikimr::NSysView {\n                 return;\n             }\n \n-            auto pipeCache = MakePipePeNodeCacheID(false);\n+            auto pipeCache = MakePipePerNodeCacheID(false);\n             TBase::Send(pipeCache, new TEvPipeCache::TEvForward(static_cast<TDerived&>(*this).CreateQuery(),\n                 bsControllerId, true), IEventHandle::FlagTrackDelivery);\n         }\n@@ -184,7 +184,7 @@ namespace NKikimr::NSysView {\n         }\n \n         void PassAway() override {\n-            TBase::Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n+            TBase::Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n             TBase::PassAway();\n         }\n \ndiff --git a/ydb/core/sys_view/tablets/tablets.cpp b/ydb/core/sys_view/tablets/tablets.cpp\nindex f45e33bee03e..ffecd239b183 100644\n--- a/ydb/core/sys_view/tablets/tablets.cpp\n+++ b/ydb/core/sys_view/tablets/tablets.cpp\n@@ -180,7 +180,7 @@ class TTabletsScan : public TScanActorBase<TTabletsScan> {\n         record.SetFrom(FromTabletId);\n         record.SetTo(ToTabletId);\n \n-        auto pipeCache = MakePipePeNodeCacheID(false);\n+        auto pipeCache = MakePipePerNodeCacheID(false);\n         Send(pipeCache, new TEvPipeCache::TEvForward(request.Release(), HiveId, true),\n             IEventHandle::FlagTrackDelivery);\n     }\n@@ -202,7 +202,7 @@ class TTabletsScan : public TScanActorBase<TTabletsScan> {\n \n         record.SetBatchSizeLimit(BatchSize);\n \n-        auto pipeCache = MakePipePeNodeCacheID(false);\n+        auto pipeCache = MakePipePerNodeCacheID(false);\n         Send(pipeCache, new TEvPipeCache::TEvForward(request.Release(), HiveId, true),\n             IEventHandle::FlagTrackDelivery);\n     }\n@@ -338,7 +338,7 @@ class TTabletsScan : public TScanActorBase<TTabletsScan> {\n     }\n \n     void PassAway() override {\n-        Send(MakePipePeNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n+        Send(MakePipePerNodeCacheID(false), new TEvPipeCache::TEvUnlink(0));\n         TBase::PassAway();\n     }\n \ndiff --git a/ydb/core/tablet/tablet_pipecache.cpp b/ydb/core/tablet/tablet_pipecache.cpp\nindex f1dbadcff7ad..fb1dc554be8d 100644\n--- a/ydb/core/tablet/tablet_pipecache.cpp\n+++ b/ydb/core/tablet/tablet_pipecache.cpp\n@@ -9,8 +9,8 @@\n \n namespace NKikimr {\n \n-class TPipePeNodeCache : public TActor<TPipePeNodeCache> {\n-    TIntrusiveConstPtr<TPipePeNodeCacheConfig> Config;\n+class TPipePerNodeCache : public TActor<TPipePerNodeCache> {\n+    TIntrusiveConstPtr<TPipePerNodeCacheConfig> Config;\n     NTabletPipe::TClientConfig PipeConfig;\n \n     struct TCounters {\n@@ -503,7 +503,7 @@ class TPipePeNodeCache : public TActor<TPipePeNodeCache> {\n         return NKikimrServices::TActivity::TABLET_PIPE_SERVER;\n     }\n \n-    TPipePeNodeCache(const TIntrusivePtr<TPipePeNodeCacheConfig> &config)\n+    TPipePerNodeCache(const TIntrusivePtr<TPipePerNodeCacheConfig> &config)\n         : TActor(&TThis::StateWork)\n         , Config(config)\n         , PipeConfig(Config->PipeConfig)\n@@ -525,7 +525,7 @@ class TPipePeNodeCache : public TActor<TPipePeNodeCache> {\n     }\n };\n \n-NTabletPipe::TClientConfig TPipePeNodeCacheConfig::DefaultPipeConfig() {\n+NTabletPipe::TClientConfig TPipePerNodeCacheConfig::DefaultPipeConfig() {\n     NTabletPipe::TClientConfig config;\n     config.RetryPolicy = {\n         .RetryLimitCount = 3,\n@@ -533,7 +533,7 @@ NTabletPipe::TClientConfig TPipePeNodeCacheConfig::DefaultPipeConfig() {\n     return config;\n }\n \n-NTabletPipe::TClientConfig TPipePeNodeCacheConfig::DefaultPersistentPipeConfig() {\n+NTabletPipe::TClientConfig TPipePerNodeCacheConfig::DefaultPersistentPipeConfig() {\n     NTabletPipe::TClientConfig config;\n     config.CheckAliveness = true;\n     config.RetryPolicy = {\n@@ -545,28 +545,28 @@ NTabletPipe::TClientConfig TPipePeNodeCacheConfig::DefaultPersistentPipeConfig()\n     return config;\n }\n \n-IActor* CreatePipePeNodeCache(const TIntrusivePtr<TPipePeNodeCacheConfig> &config) {\n-    return new TPipePeNodeCache(config);\n+IActor* CreatePipePerNodeCache(const TIntrusivePtr<TPipePerNodeCacheConfig> &config) {\n+    return new TPipePerNodeCache(config);\n }\n \n-TActorId MakePipePeNodeCacheID(EPipePeNodeCache kind) {\n+TActorId MakePipePerNodeCacheID(EPipePerNodeCache kind) {\n     char x[12] = \"PipeCache\";\n     switch (kind) {\n-        case EPipePeNodeCache::Leader:\n+        case EPipePerNodeCache::Leader:\n             x[9] = 'A';\n             break;\n-        case EPipePeNodeCache::Follower:\n+        case EPipePerNodeCache::Follower:\n             x[9] = 'F';\n             break;\n-        case EPipePeNodeCache::Persistent:\n+        case EPipePerNodeCache::Persistent:\n             x[9] = 'P';\n             break;\n     }\n     return TActorId(0, TStringBuf(x, 12));\n }\n \n-TActorId MakePipePeNodeCacheID(bool allowFollower) {\n-    return MakePipePeNodeCacheID(allowFollower ? EPipePeNodeCache::Follower : EPipePeNodeCache::Leader);\n+TActorId MakePipePerNodeCacheID(bool allowFollower) {\n+    return MakePipePerNodeCacheID(allowFollower ? EPipePerNodeCache::Follower : EPipePerNodeCache::Leader);\n }\n \n }\ndiff --git a/ydb/core/tablet/tablet_pipecache_ut.cpp b/ydb/core/tablet/tablet_pipecache_ut.cpp\nindex 8aab680adbbc..4c1deaf838b0 100644\n--- a/ydb/core/tablet/tablet_pipecache_ut.cpp\n+++ b/ydb/core/tablet/tablet_pipecache_ut.cpp\n@@ -117,9 +117,9 @@ Y_UNIT_TEST_SUITE(TPipeCacheTest) {\n         };\n         runtime.SetObserverFunc(observerFunc);\n \n-        auto config = MakeIntrusive<TPipePeNodeCacheConfig>();\n+        auto config = MakeIntrusive<TPipePerNodeCacheConfig>();\n         config->PipeRefreshTime = TDuration::Seconds(1);\n-        auto cacheActor = runtime.Register(CreatePipePeNodeCache(config));\n+        auto cacheActor = runtime.Register(CreatePipePerNodeCache(config));\n \n         TActorId sender = runtime.AllocateEdgeActor();\n         for (size_t i = 0; i < 20; ++i) {\n@@ -138,9 +138,9 @@ Y_UNIT_TEST_SUITE(TPipeCacheTest) {\n         TTestBasicRuntime runtime;\n         SetupTabletServices(runtime);\n \n-        auto config = MakeIntrusive<TPipePeNodeCacheConfig>();\n+        auto config = MakeIntrusive<TPipePerNodeCacheConfig>();\n         config->PipeRefreshTime = TDuration::Seconds(1);\n-        auto cacheActor = runtime.Register(CreatePipePeNodeCache(config));\n+        auto cacheActor = runtime.Register(CreatePipePerNodeCache(config));\n \n         TActorId sender = runtime.AllocateEdgeActor();\n \n@@ -175,8 +175,8 @@ Y_UNIT_TEST_SUITE(TPipeCacheTest) {\n                 return new TCustomTablet(tablet, info);\n             });\n \n-        auto config = MakeIntrusive<TPipePeNodeCacheConfig>();\n-        auto cacheActor = runtime.Register(CreatePipePeNodeCache(config));\n+        auto config = MakeIntrusive<TPipePerNodeCacheConfig>();\n+        auto cacheActor = runtime.Register(CreatePipePerNodeCache(config));\n \n         TActorId sender = runtime.AllocateEdgeActor();\n \ndiff --git a/ydb/core/tablet/tablet_sys.cpp b/ydb/core/tablet/tablet_sys.cpp\nindex 439fb8c1452a..89fbce3a4fe9 100644\n--- a/ydb/core/tablet/tablet_sys.cpp\n+++ b/ydb/core/tablet/tablet_sys.cpp\n@@ -1734,7 +1734,7 @@ void TTablet::ReassignYellowChannels(TVector<ui32> &&yellowMoveChannels) {\n         \" Type: \" << TTabletTypes::TypeToStr((TTabletTypes::EType)Info->TabletType)\n         << \", YellowMoveChannels: \" << yellowMoveChannelsString(), \"TSYS30\");\n \n-    Send(MakePipePeNodeCacheID(false),\n+    Send(MakePipePerNodeCacheID(false),\n         new TEvPipeCache::TEvForward(\n             new TEvHive::TEvReassignTabletSpace(Info->TabletID, std::move(yellowMoveChannels)),\n             Info->HiveId,\ndiff --git a/ydb/core/tablet_flat/flat_executor.cpp b/ydb/core/tablet_flat/flat_executor.cpp\nindex 0de6639b0eda..72f6bae938ee 100644\n--- a/ydb/core/tablet_flat/flat_executor.cpp\n+++ b/ydb/core/tablet_flat/flat_executor.cpp\n@@ -324,7 +324,7 @@ void TExecutor::SendReassignYellowChannels(const TVector<ui32> &yellowChannels)\n     if (Owner->ReassignChannelsEnabled()) {\n         auto* info = Owner->Info();\n         if (Y_LIKELY(info) && info->HiveId) {\n-            Send(MakePipePeNodeCacheID(false),\n+            Send(MakePipePerNodeCacheID(false),\n                 new TEvPipeCache::TEvForward(\n                     new TEvHive::TEvReassignTabletSpace(info->TabletID, yellowChannels),\n                     info->HiveId,\ndiff --git a/ydb/core/tx/columnshard/blobs_action/abstract/gc_actor.h b/ydb/core/tx/columnshard/blobs_action/abstract/gc_actor.h\nindex 009dee623caf..7acd09a7c16e 100644\n--- a/ydb/core/tx/columnshard/blobs_action/abstract/gc_actor.h\n+++ b/ydb/core/tx/columnshard/blobs_action/abstract/gc_actor.h\n@@ -32,7 +32,7 @@ class TSharedBlobsCollectionActor: public TActorBootstrapped<TDerived> {\n         auto* blobIds = BlobIdsByTablets.Find((TTabletId)ev->Cookie);\n         AFL_VERIFY(blobIds);\n         auto evResend = std::make_unique<NEvents::TEvDeleteSharedBlobs>(TBase::SelfId(), ev->Cookie, OperatorId, *blobIds);\n-        NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+        NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n             new TEvPipeCache::TEvForward(evResend.release(), ev->Cookie, true), IEventHandle::FlagTrackDelivery, ev->Cookie);\n     }\n protected:\n@@ -61,7 +61,7 @@ class TSharedBlobsCollectionActor: public TActorBootstrapped<TDerived> {\n         } else {\n             for (auto&& i : BlobIdsByTablets) {\n                 auto ev = std::make_unique<NEvents::TEvDeleteSharedBlobs>(TBase::SelfId(), (ui64)SelfTabletId, OperatorId, i.second);\n-                NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+                NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n                     new TEvPipeCache::TEvForward(ev.release(), (ui64)i.first, true), IEventHandle::FlagTrackDelivery, (ui64)i.first);\n             }\n         }\ndiff --git a/ydb/core/tx/columnshard/data_sharing/destination/session/destination.cpp b/ydb/core/tx/columnshard/data_sharing/destination/session/destination.cpp\nindex b3ce83bcf961..b66012803463 100644\n--- a/ydb/core/tx/columnshard/data_sharing/destination/session/destination.cpp\n+++ b/ydb/core/tx/columnshard/data_sharing/destination/session/destination.cpp\n@@ -46,11 +46,11 @@ void TDestinationSession::SendCurrentCursorAck(const NColumnShard::TColumnShard&\n         found = true;\n         if (cursor.GetDataFinished()) {\n             auto ev = std::make_unique<NEvents::TEvAckFinishToSource>(GetSessionId());\n-            NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+            NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n                 new TEvPipeCache::TEvForward(ev.release(), (ui64)cursor.GetTabletId(), true), IEventHandle::FlagTrackDelivery, GetRuntimeId());\n         } else if (cursor.GetPackIdx()) {\n             auto ev = std::make_unique<NEvents::TEvAckDataToSource>(GetSessionId(), cursor.GetPackIdx());\n-            NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+            NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n                 new TEvPipeCache::TEvForward(ev.release(), (ui64)cursor.GetTabletId(), true), IEventHandle::FlagTrackDelivery, GetRuntimeId());\n         } else {\n             std::set<ui64> pathIdsBase;\n@@ -59,7 +59,7 @@ void TDestinationSession::SendCurrentCursorAck(const NColumnShard::TColumnShard&\n             }\n             TSourceSession source(GetSessionId(), TransferContext, cursor.GetTabletId(), pathIdsBase, (TTabletId)shard.TabletID());\n             auto ev = std::make_unique<NEvents::TEvStartToSource>(source);\n-            NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+            NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n                 new TEvPipeCache::TEvForward(ev.release(), (ui64)cursor.GetTabletId(), true), IEventHandle::FlagTrackDelivery, GetRuntimeId());\n         }\n     }\ndiff --git a/ydb/core/tx/columnshard/data_sharing/initiator/controller/schemeshard.h b/ydb/core/tx/columnshard/data_sharing/initiator/controller/schemeshard.h\nindex 17ef14c50e20..293b67a98657 100644\n--- a/ydb/core/tx/columnshard/data_sharing/initiator/controller/schemeshard.h\n+++ b/ydb/core/tx/columnshard/data_sharing/initiator/controller/schemeshard.h\n@@ -40,7 +40,7 @@ class TSSInitiatorController: public IInitiatorController {\n     }\n     virtual void DoFinished(const TString& /*sessionId*/) const override {\n //        auto ev = std::make_unique<TBlobsTransferFinished>(sessionId);\n-//        NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+//        NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n //            new TEvPipeCache::TEvForward(ev.release(), (ui64)TabletId, true), IEventHandle::FlagTrackDelivery, ReplyId);\n     }\n     virtual TString GetClassName() const override {\ndiff --git a/ydb/core/tx/columnshard/data_sharing/modification/transactions/tx_change_blobs_owning.cpp b/ydb/core/tx/columnshard/data_sharing/modification/transactions/tx_change_blobs_owning.cpp\nindex d10cac2c1e6b..a1ab8ae16d07 100644\n--- a/ydb/core/tx/columnshard/data_sharing/modification/transactions/tx_change_blobs_owning.cpp\n+++ b/ydb/core/tx/columnshard/data_sharing/modification/transactions/tx_change_blobs_owning.cpp\n@@ -15,7 +15,7 @@ void TTxApplyLinksModification::DoComplete(const TActorContext& /*ctx*/) {\n     Task->ApplyForRuntime(Self->GetStoragesManager()->GetSharedBlobsManager());\n \n     auto ev = std::make_unique<NOlap::NDataSharing::NEvents::TEvApplyLinksModificationFinished>(Task->GetTabletId(), SessionId, PackIdx);\n-    NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+    NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n         new TEvPipeCache::TEvForward(ev.release(), (ui64)InitiatorTabletId, true), IEventHandle::FlagTrackDelivery);\n }\n \ndiff --git a/ydb/core/tx/columnshard/data_sharing/source/session/source.cpp b/ydb/core/tx/columnshard/data_sharing/source/session/source.cpp\nindex 3cf78859289f..3e9ad429c183 100644\n--- a/ydb/core/tx/columnshard/data_sharing/source/session/source.cpp\n+++ b/ydb/core/tx/columnshard/data_sharing/source/session/source.cpp\n@@ -75,7 +75,7 @@ void TSourceSession::ActualizeDestination(const std::shared_ptr<NDataLocks::TMan\n         if (!Cursor->IsAckDataReceived()) {\n             const THashMap<ui64, NEvents::TPathIdData>& packPortions = Cursor->GetSelected();\n             auto ev = std::make_unique<NEvents::TEvSendDataFromSource>(GetSessionId(), Cursor->GetPackIdx(), SelfTabletId, packPortions);\n-            NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+            NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n                 new TEvPipeCache::TEvForward(ev.release(), (ui64)DestinationTabletId, true), IEventHandle::FlagTrackDelivery, GetRuntimeId());\n         }\n         {\n@@ -85,13 +85,13 @@ void TSourceSession::ActualizeDestination(const std::shared_ptr<NDataLocks::TMan\n                     continue;\n                 }\n                 auto ev = std::make_unique<NEvents::TEvApplyLinksModification>(SelfTabletId, GetSessionId(), Cursor->GetPackIdx(), task);\n-                NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+                NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n                     new TEvPipeCache::TEvForward(ev.release(), (ui64)tabletId, true), IEventHandle::FlagTrackDelivery, GetRuntimeId());\n             }\n         }\n     } else {\n         auto ev = std::make_unique<NEvents::TEvFinishedFromSource>(GetSessionId(), SelfTabletId);\n-        NActors::TActivationContext::AsActorContext().Send(MakePipePeNodeCacheID(false),\n+        NActors::TActivationContext::AsActorContext().Send(MakePipePerNodeCacheID(false),\n             new TEvPipeCache::TEvForward(ev.release(), (ui64)DestinationTabletId, true), IEventHandle::FlagTrackDelivery, GetRuntimeId());\n         Finish(dataLocksManager);\n     }\ndiff --git a/ydb/core/tx/coordinator/coordinator__last_step_subscriptions.cpp b/ydb/core/tx/coordinator/coordinator__last_step_subscriptions.cpp\nindex e7d4bd2fe984..c13b6972abf9 100644\n--- a/ydb/core/tx/coordinator/coordinator__last_step_subscriptions.cpp\n+++ b/ydb/core/tx/coordinator/coordinator__last_step_subscriptions.cpp\n@@ -141,7 +141,7 @@ namespace NKikimr::NFlatTxCoordinator {\n \n     void TTxCoordinator::SubscribeToSibling(TSiblingState& state) {\n         if (!state.Subscribed) {\n-            auto pipeCache = MakePipePeNodeCacheID(false);\n+            auto pipeCache = MakePipePerNodeCacheID(false);\n             Send(pipeCache, new TEvPipeCache::TEvForward(\n                     new TEvTxProxy::TEvSubscribeLastStep(state.CoordinatorId, ++state.SeqNo),\n                     state.CoordinatorId,\n@@ -153,7 +153,7 @@ namespace NKikimr::NFlatTxCoordinator {\n     void TTxCoordinator::UnsubscribeFromSiblings() {\n         for (auto& pr : Siblings) {\n             if (pr.second.Subscribed) {\n-                auto pipeCache = MakePipePeNodeCacheID(false);\n+                auto pipeCache = MakePipePerNodeCacheID(false);\n                 Send(pipeCache, new TEvPipeCache::TEvForward(\n                         new TEvTxProxy::TEvUnsubscribeLastStep(pr.first, pr.second.SeqNo),\n                         pr.first,\ndiff --git a/ydb/core/tx/data_events/shard_writer.cpp b/ydb/core/tx/data_events/shard_writer.cpp\nindex b356a70de79d..f7dcb85e705d 100644\n--- a/ydb/core/tx/data_events/shard_writer.cpp\n+++ b/ydb/core/tx/data_events/shard_writer.cpp\n@@ -41,7 +41,7 @@ namespace NKikimr::NEvWrite {\n         , DedupId(dedupId)\n         , DataForShard(data)\n         , ExternalController(externalController)\n-        , LeaderPipeCache(MakePipePeNodeCacheID(false))\n+        , LeaderPipeCache(MakePipePerNodeCacheID(false))\n         , ActorSpan(parentSpan.BuildChildrenSpan(\"ShardWriter\"))\n     {\n     }\ndiff --git a/ydb/core/tx/datashard/datashard.cpp b/ydb/core/tx/datashard/datashard.cpp\nindex 883981622674..9a2dd40d9425 100644\n--- a/ydb/core/tx/datashard/datashard.cpp\n+++ b/ydb/core/tx/datashard/datashard.cpp\n@@ -102,7 +102,7 @@ class TDatashardKeySampler : public NMiniKQL::IKeyAccessSampler {\n TDataShard::TDataShard(const TActorId &tablet, TTabletStorageInfo *info)\n     : TActor(&TThis::StateInit)\n     , TTabletExecutedFlat(info, tablet, new TDataShardMiniKQLFactory(this))\n-    , PersistentPipeCache(MakePipePeNodeCacheID(EPipePeNodeCache::Persistent))\n+    , PersistentPipeCache(MakePipePerNodeCacheID(EPipePerNodeCache::Persistent))\n     , SchemeShardPipeRetryPolicy({})\n     , PathOwnerId(INVALID_TABLET_ID)\n     , CurrentSchemeShardId(INVALID_TABLET_ID)\ndiff --git a/ydb/core/tx/datashard/datashard_repl_offsets_client.cpp b/ydb/core/tx/datashard/datashard_repl_offsets_client.cpp\nindex 777479d3827b..fd1fe8608ce7 100644\n--- a/ydb/core/tx/datashard/datashard_repl_offsets_client.cpp\n+++ b/ydb/core/tx/datashard/datashard_repl_offsets_client.cpp\n@@ -15,7 +15,7 @@ namespace NKikimr::NDataShard {\n             : Owner(owner)\n             , SrcTabletId(srcTabletId)\n             , PathId(pathId)\n-            , PipeCache(MakePipePeNodeCacheID(false))\n+            , PipeCache(MakePipePerNodeCacheID(false))\n             , Result(new TEvPrivate::TEvReplicationSourceOffsets(srcTabletId, pathId))\n         { }\n \ndiff --git a/ydb/core/tx/datashard/ut_common/datashard_ut_common.cpp b/ydb/core/tx/datashard/ut_common/datashard_ut_common.cpp\nindex 7473631d6890..44d573cf96de 100644\n--- a/ydb/core/tx/datashard/ut_common/datashard_ut_common.cpp\n+++ b/ydb/core/tx/datashard/ut_common/datashard_ut_common.cpp\n@@ -2405,7 +2405,7 @@ void SendViaPipeCache(\n     ui32 nodeIndex = sender.NodeId() - runtime.GetNodeId(0);\n     runtime.Send(\n         new IEventHandle(\n-            MakePipePeNodeCacheID(options.Follower),\n+            MakePipePerNodeCacheID(options.Follower),\n             sender,\n             new TEvPipeCache::TEvForward(msg.release(), tabletId, options.Subscribe),\n             options.Flags,\ndiff --git a/ydb/core/tx/long_tx_service/acquire_snapshot_impl.cpp b/ydb/core/tx/long_tx_service/acquire_snapshot_impl.cpp\nindex 81cb5bf8c91c..52558c3a5abc 100644\n--- a/ydb/core/tx/long_tx_service/acquire_snapshot_impl.cpp\n+++ b/ydb/core/tx/long_tx_service/acquire_snapshot_impl.cpp\n@@ -24,7 +24,7 @@ namespace NLongTxService {\n             , Cookie(cookie)\n             , DatabaseName(databaseName)\n             , SchemeCache(MakeSchemeCacheID())\n-            , LeaderPipeCache(MakePipePeNodeCacheID(false))\n+            , LeaderPipeCache(MakePipePerNodeCacheID(false))\n             , LogPrefix(\"LongTxService.AcquireSnapshot \")\n         { }\n \ndiff --git a/ydb/core/tx/sequenceproxy/sequenceproxy_allocate.cpp b/ydb/core/tx/sequenceproxy/sequenceproxy_allocate.cpp\nindex be9da3e15049..28de42c38deb 100644\n--- a/ydb/core/tx/sequenceproxy/sequenceproxy_allocate.cpp\n+++ b/ydb/core/tx/sequenceproxy/sequenceproxy_allocate.cpp\n@@ -24,7 +24,7 @@ namespace NSequenceProxy {\n         TAllocateActor(const TActorId& owner, ui64 cookie, ui64 tabletId, const TPathId& pathId, ui64 cache)\n             : Owner(owner)\n             , Cookie(cookie)\n-            , PipeCache(MakePipePeNodeCacheID(true))\n+            , PipeCache(MakePipePerNodeCacheID(true))\n             , TabletId(tabletId)\n             , PathId(pathId)\n             , Cache(cache)\ndiff --git a/ydb/core/tx/time_cast/time_cast.cpp b/ydb/core/tx/time_cast/time_cast.cpp\nindex 3348711bcea9..dfe773b4a2e1 100644\n--- a/ydb/core/tx/time_cast/time_cast.cpp\n+++ b/ydb/core/tx/time_cast/time_cast.cpp\n@@ -318,7 +318,7 @@ void TMediatorTimecastProxy::Handle(TEvMediatorTimecast::TEvWaitPlanStep::TPtr &\n         for (ui64 coordinatorId : mediator.Coordinators) {\n             TMediatorCoordinator &coordinator = MediatorCoordinators[coordinatorId];\n             if (coordinator.WaitingSteps.insert(planStep).second && !coordinator.RetryPending) {\n-                Send(MakePipePeNodeCacheID(false),\n+                Send(MakePipePerNodeCacheID(false),\n                     new TEvPipeCache::TEvForward(\n                         new TEvTxProxy::TEvRequirePlanSteps(coordinatorId, planStep),\n                         coordinatorId,\n@@ -370,7 +370,7 @@ void TMediatorTimecastProxy::Handle(TEvPrivate::TEvRetryCoordinator::TPtr &ev, c\n     if (it != MediatorCoordinators.end() && it->second.RetryPending) {\n         it->second.RetryPending = false;\n         if (!it->second.WaitingSteps.empty()) {\n-            Send(MakePipePeNodeCacheID(false),\n+            Send(MakePipePerNodeCacheID(false),\n                 new TEvPipeCache::TEvForward(\n                     new TEvTxProxy::TEvRequirePlanSteps(msg->Coordinator, it->second.WaitingSteps),\n                     msg->Coordinator,\ndiff --git a/ydb/core/tx/tx_proxy/proxy_impl.cpp b/ydb/core/tx/tx_proxy/proxy_impl.cpp\nindex dfaf5e35f74d..a8c758309d8d 100644\n--- a/ydb/core/tx/tx_proxy/proxy_impl.cpp\n+++ b/ydb/core/tx/tx_proxy/proxy_impl.cpp\n@@ -441,9 +441,9 @@ class TTxProxy : public TActorBootstrapped<TTxProxy> {\n         Services.SchemeCache = ctx.ExecutorThread.RegisterActor(CreateSchemeBoardSchemeCache(cacheConfig.Get()));\n         ctx.ExecutorThread.ActorSystem->RegisterLocalService(MakeSchemeCacheID(), Services.SchemeCache);\n \n-        // PipePeNodeCaches are an external dependency\n-        Services.LeaderPipeCache = MakePipePeNodeCacheID(false);\n-        Services.FollowerPipeCache = MakePipePeNodeCacheID(true);\n+        // PipePerNodeCaches are an external dependency\n+        Services.LeaderPipeCache = MakePipePerNodeCacheID(false);\n+        Services.FollowerPipeCache = MakePipePerNodeCacheID(true);\n \n         TxAllocatorClient.Bootstrap(ctx);\n \ndiff --git a/ydb/core/tx/tx_proxy/upload_rows_common_impl.h b/ydb/core/tx/tx_proxy/upload_rows_common_impl.h\nindex 4f43111e3a71..33e5c7c2c017 100644\n--- a/ydb/core/tx/tx_proxy/upload_rows_common_impl.h\n+++ b/ydb/core/tx/tx_proxy/upload_rows_common_impl.h\n@@ -213,7 +213,7 @@ class TUploadRowsBase : public TActorBootstrapped<TUploadRowsBase<DerivedActivit\n     explicit TUploadRowsBase(TDuration timeout = TDuration::Max(), bool diskQuotaExceeded = false, NWilson::TSpan span = {})\n         : TBase()\n         , SchemeCache(MakeSchemeCacheID())\n-        , LeaderPipeCache(MakePipePeNodeCacheID(false))\n+        , LeaderPipeCache(MakePipePerNodeCacheID(false))\n         , Timeout((timeout && timeout <= DEFAULT_TIMEOUT) ? timeout : DEFAULT_TIMEOUT)\n         , Status(Ydb::StatusIds::SUCCESS)\n         , DiskQuotaExceeded(diskQuotaExceeded)\ndiff --git a/ydb/services/metadata/common/ss_dialog.cpp b/ydb/services/metadata/common/ss_dialog.cpp\nindex 81e61ed15a85..eed3d71d01dc 100644\n--- a/ydb/services/metadata/common/ss_dialog.cpp\n+++ b/ydb/services/metadata/common/ss_dialog.cpp\n@@ -29,7 +29,7 @@ void TSSDialogActor::Handle(TEvTxProxySchemeCache::TEvNavigateKeySetResult::TPtr\n     auto& entity = request->ResultSet.front();\n     SchemeShardId = entity.DomainInfo->ExtractSchemeShard();\n     NTabletPipe::TClientConfig clientConfig;\n-    SchemeShardPipe = MakePipePeNodeCacheID(false);\n+    SchemeShardPipe = MakePipePerNodeCacheID(false);\n     Execute();\n }\n \n",
  "test_patch": "diff --git a/ydb/core/testlib/basics/helpers.h b/ydb/core/testlib/basics/helpers.h\nindex 3a77ce61fa81..a771080a75e5 100644\n--- a/ydb/core/testlib/basics/helpers.h\n+++ b/ydb/core/testlib/basics/helpers.h\n@@ -43,7 +43,7 @@ namespace NFake {\n     void SetupCustomStateStorage(TTestActorRuntime &runtime, ui32 NToSelect, ui32 nrings, ui32 ringSize); \n     void SetupBSNodeWarden(TTestActorRuntime& runtime, ui32 nodeIndex, TIntrusivePtr<TNodeWardenConfig> nodeWardenConfig);\n     void SetupTabletResolver(TTestActorRuntime& runtime, ui32 nodeIndex);\n-    void SetupTabletPipePeNodeCaches(TTestActorRuntime& runtime, ui32 nodeIndex, bool forceFollowers = false);\n+    void SetupTabletPipePerNodeCaches(TTestActorRuntime& runtime, ui32 nodeIndex, bool forceFollowers = false);\n     void SetupResourceBroker(TTestActorRuntime& runtime, ui32 nodeIndex);\n     void SetupSharedPageCache(TTestActorRuntime& runtime, ui32 nodeIndex, NFake::TCaches caches);\n     void SetupNodeWhiteboard(TTestActorRuntime& runtime, ui32 nodeIndex);\ndiff --git a/ydb/core/testlib/basics/services.cpp b/ydb/core/testlib/basics/services.cpp\nindex 7146c5001b10..fde3c5b348fd 100644\n--- a/ydb/core/testlib/basics/services.cpp\n+++ b/ydb/core/testlib/basics/services.cpp\n@@ -83,26 +83,26 @@ namespace NPDisk {\n             TActorSetupCmd(tabletResolver, TMailboxType::Revolving, 0), nodeIndex);\n     }\n \n-    void SetupTabletPipePeNodeCaches(TTestActorRuntime& runtime, ui32 nodeIndex, bool forceFollowers)\n+    void SetupTabletPipePerNodeCaches(TTestActorRuntime& runtime, ui32 nodeIndex, bool forceFollowers)\n     {\n-        TIntrusivePtr<TPipePeNodeCacheConfig> leaderPipeConfig = new TPipePeNodeCacheConfig();\n+        TIntrusivePtr<TPipePerNodeCacheConfig> leaderPipeConfig = new TPipePerNodeCacheConfig();\n         leaderPipeConfig->PipeRefreshTime = TDuration::Zero();\n \n-        TIntrusivePtr<TPipePeNodeCacheConfig> followerPipeConfig = new TPipePeNodeCacheConfig();\n+        TIntrusivePtr<TPipePerNodeCacheConfig> followerPipeConfig = new TPipePerNodeCacheConfig();\n         followerPipeConfig->PipeRefreshTime = TDuration::Seconds(30);\n         followerPipeConfig->PipeConfig.AllowFollower = true;\n         followerPipeConfig->PipeConfig.ForceFollower = forceFollowers;\n \n-        TIntrusivePtr<TPipePeNodeCacheConfig> persistentPipeConfig = new TPipePeNodeCacheConfig();\n+        TIntrusivePtr<TPipePerNodeCacheConfig> persistentPipeConfig = new TPipePerNodeCacheConfig();\n         persistentPipeConfig->PipeRefreshTime = TDuration::Zero();\n-        persistentPipeConfig->PipeConfig = TPipePeNodeCacheConfig::DefaultPersistentPipeConfig();\n-\n-        runtime.AddLocalService(MakePipePeNodeCacheID(false),\n-            TActorSetupCmd(CreatePipePeNodeCache(leaderPipeConfig), TMailboxType::Revolving, 0), nodeIndex);\n-        runtime.AddLocalService(MakePipePeNodeCacheID(true),\n-            TActorSetupCmd(CreatePipePeNodeCache(followerPipeConfig), TMailboxType::Revolving, 0), nodeIndex);\n-        runtime.AddLocalService(MakePipePeNodeCacheID(EPipePeNodeCache::Persistent),\n-            TActorSetupCmd(CreatePipePeNodeCache(persistentPipeConfig), TMailboxType::Revolving, 0), nodeIndex);\n+        persistentPipeConfig->PipeConfig = TPipePerNodeCacheConfig::DefaultPersistentPipeConfig();\n+\n+        runtime.AddLocalService(MakePipePerNodeCacheID(false),\n+            TActorSetupCmd(CreatePipePerNodeCache(leaderPipeConfig), TMailboxType::Revolving, 0), nodeIndex);\n+        runtime.AddLocalService(MakePipePerNodeCacheID(true),\n+            TActorSetupCmd(CreatePipePerNodeCache(followerPipeConfig), TMailboxType::Revolving, 0), nodeIndex);\n+        runtime.AddLocalService(MakePipePerNodeCacheID(EPipePerNodeCache::Persistent),\n+            TActorSetupCmd(CreatePipePerNodeCache(persistentPipeConfig), TMailboxType::Revolving, 0), nodeIndex);\n     }\n \n     void SetupResourceBroker(TTestActorRuntime& runtime, ui32 nodeIndex)\n@@ -359,7 +359,7 @@ namespace NPDisk {\n             SetupBSNodeWarden(runtime, nodeIndex, disk.MakeWardenConf(*app.Domains, keyConfig));\n \n             SetupTabletResolver(runtime, nodeIndex);\n-            SetupTabletPipePeNodeCaches(runtime, nodeIndex, forceFollowers);\n+            SetupTabletPipePerNodeCaches(runtime, nodeIndex, forceFollowers);\n             SetupResourceBroker(runtime, nodeIndex);\n             SetupSharedPageCache(runtime, nodeIndex, caches);\n             SetupBlobCache(runtime, nodeIndex);\n",
  "problem_statement": "Rename PipePeNode -> PipePerNode\nIt's an ancient typo and needs to be fixed. Renaming would affect a lot of files though, so warrants a separate issue.\n",
  "hints_text": "",
  "created_at": "2024-05-27T15:10:30Z"
}