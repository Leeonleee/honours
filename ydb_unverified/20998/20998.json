{
  "repo": "ydb-platform/ydb",
  "pull_number": 20998,
  "instance_id": "ydb-platform__ydb-20998",
  "issue_numbers": [
    "20717"
  ],
  "base_commit": "e07ad6eedbd31d4e178018322ed54a717731671a",
  "patch": "diff --git a/yql/essentials/minikql/comp_nodes/mkql_block_agg.cpp b/yql/essentials/minikql/comp_nodes/mkql_block_agg.cpp\nindex 266e909b98e3..645a5037e009 100644\n--- a/yql/essentials/minikql/comp_nodes/mkql_block_agg.cpp\n+++ b/yql/essentials/minikql/comp_nodes/mkql_block_agg.cpp\n@@ -863,7 +863,7 @@ template <typename T>\n T MakeKey(TStringBuf s, ui32 keyLength) {\n     Y_UNUSED(keyLength);\n     Y_ASSERT(s.Size() <= sizeof(T));\n-    return *(const T*)s.Data();\n+    return ReadUnaligned<T>(s.Data());\n }\n \n template <>\n@@ -1280,8 +1280,10 @@ struct THashedWrapperBaseState : public TBlockState {\n         }\n \n         std::array<TOutputBuffer, PrefetchBatchSize> out;\n-        for (ui32 i = 0; i < PrefetchBatchSize; ++i) {\n-            out[i].Resize(sizeof(TKey));\n+        if constexpr (!std::is_same<TKey, TSSOKey>::value && !std::is_same<TKey, TExternalFixedSizeKey>::value) {\n+            for (ui32 i = 0; i < PrefetchBatchSize; ++i) {\n+                out[i].Resize(sizeof(TKey));\n+            }\n         }\n \n         std::array<TRobinHoodBatchRequestItem<TKey>, PrefetchBatchSize> insertBatch;\n@@ -1374,13 +1376,18 @@ struct THashedWrapperBaseState : public TBlockState {\n             }\n \n             // encode key\n-            out[insertBatchLen].Rewind();\n+            auto& buf = out[insertBatchLen];\n+            buf.Rewind();\n+            if constexpr (!std::is_same<TKey, TSSOKey>::value && !std::is_same<TKey, TExternalFixedSizeKey>::value) {\n+                WriteUnaligned<TKey>(buf.Data(), TKey{});\n+            }\n+\n             for (ui32 i = 0; i < keysDatum.size(); ++i) {\n                 if (keysDatum[i].is_scalar()) {\n                     // TODO: more efficient code when grouping by scalar\n-                    Readers_[i]->SaveScalarItem(*keysDatum[i].scalar(), out[insertBatchLen]);\n+                    Readers_[i]->SaveScalarItem(*keysDatum[i].scalar(), buf);\n                 } else {\n-                    Readers_[i]->SaveItem(*keysDatum[i].array(), row, out[insertBatchLen]);\n+                    Readers_[i]->SaveItem(*keysDatum[i].array(), row, buf);\n                 }\n             }\n \ndiff --git a/yql/essentials/public/udf/arrow/block_io_buffer.h b/yql/essentials/public/udf/arrow/block_io_buffer.h\nindex 46bfd4acbb4c..2d1b7b79e117 100644\n--- a/yql/essentials/public/udf/arrow/block_io_buffer.h\n+++ b/yql/essentials/public/udf/arrow/block_io_buffer.h\n@@ -89,6 +89,10 @@ class TOutputBuffer {\n         return TStringBuf(Vec_.data(), Vec_.data() + Pos_);\n     }\n \n+    char* Data() {\n+        return Vec_.data();\n+    }\n+\n private:\n     void Ensure(size_t delta) {\n         if (Pos_ + delta > Vec_.size()) {\n",
  "test_patch": "diff --git a/yql/essentials/tests/sql/minirun/part4/canondata/result.json b/yql/essentials/tests/sql/minirun/part4/canondata/result.json\nindex b2ba2b1602eb..d69f46521596 100644\n--- a/yql/essentials/tests/sql/minirun/part4/canondata/result.json\n+++ b/yql/essentials/tests/sql/minirun/part4/canondata/result.json\n@@ -314,6 +314,27 @@\n             \"uri\": \"https://{canondata_backend}/1936842/397d19bc034685a9103c63c079eb706022471c35/resource.tar.gz#test.test_blocks-agg_by_key-default.txt-Results_/results.txt\"\n         }\n     ],\n+    \"test.test[blocks-agg_with_long_keys-default.txt-Debug]\": [\n+        {\n+            \"checksum\": \"7c4a660fbbc90bdd8f4dd41a3c661bf5\",\n+            \"size\": 1144,\n+            \"uri\": \"https://{canondata_backend}/1942173/aec80438f8fc63ab8d93cee4a56261df6843c1f3/resource.tar.gz#test.test_blocks-agg_with_long_keys-default.txt-Debug_/opt.yql\"\n+        }\n+    ],\n+    \"test.test[blocks-agg_with_long_keys-default.txt-Peephole]\": [\n+        {\n+            \"checksum\": \"c8f494b293f588852db9bb9a43439a45\",\n+            \"size\": 1738,\n+            \"uri\": \"https://{canondata_backend}/1942173/aec80438f8fc63ab8d93cee4a56261df6843c1f3/resource.tar.gz#test.test_blocks-agg_with_long_keys-default.txt-Peephole_/opt.yql\"\n+        }\n+    ],\n+    \"test.test[blocks-agg_with_long_keys-default.txt-Results]\": [\n+        {\n+            \"checksum\": \"57c5aab96cb792f5f669cfb9a119550a\",\n+            \"size\": 84929,\n+            \"uri\": \"https://{canondata_backend}/1942173/aec80438f8fc63ab8d93cee4a56261df6843c1f3/resource.tar.gz#test.test_blocks-agg_with_long_keys-default.txt-Results_/results.txt\"\n+        }\n+    ],\n     \"test.test[blocks-or_opt_scalar-default.txt-Debug]\": [\n         {\n             \"checksum\": \"48438c52974cf1f5de5ed35df99e54b5\",\ndiff --git a/yql/essentials/tests/sql/minirun/part6/canondata/result.json b/yql/essentials/tests/sql/minirun/part6/canondata/result.json\nindex d2ab457a4bbe..68dbb001a7ee 100644\n--- a/yql/essentials/tests/sql/minirun/part6/canondata/result.json\n+++ b/yql/essentials/tests/sql/minirun/part6/canondata/result.json\n@@ -296,6 +296,27 @@\n             \"uri\": \"file://test.test_bitcast_implicit-mod_bitcast-default.txt-Results_/extracted\"\n         }\n     ],\n+    \"test.test[blocks-agg_with_optional_string_keys-default.txt-Debug]\": [\n+        {\n+            \"checksum\": \"c4c01814bb43ce233a32b92dbde44870\",\n+            \"size\": 1114,\n+            \"uri\": \"https://{canondata_backend}/1881367/91257b77defd2cabf8041b14bff63c8d29b9acc0/resource.tar.gz#test.test_blocks-agg_with_optional_string_keys-default.txt-Debug_/opt.yql\"\n+        }\n+    ],\n+    \"test.test[blocks-agg_with_optional_string_keys-default.txt-Peephole]\": [\n+        {\n+            \"checksum\": \"746a1d389eb41491e1275c5323df00bf\",\n+            \"size\": 1547,\n+            \"uri\": \"https://{canondata_backend}/1881367/91257b77defd2cabf8041b14bff63c8d29b9acc0/resource.tar.gz#test.test_blocks-agg_with_optional_string_keys-default.txt-Peephole_/opt.yql\"\n+        }\n+    ],\n+    \"test.test[blocks-agg_with_optional_string_keys-default.txt-Results]\": [\n+        {\n+            \"checksum\": \"bddaea9e12611287fc78163411a25cdc\",\n+            \"size\": 73787,\n+            \"uri\": \"https://{canondata_backend}/1881367/91257b77defd2cabf8041b14bff63c8d29b9acc0/resource.tar.gz#test.test_blocks-agg_with_optional_string_keys-default.txt-Results_/results.txt\"\n+        }\n+    ],\n     \"test.test[blocks-coalesce_scalar-default.txt-Debug]\": [\n         {\n             \"checksum\": \"5ee084040bec68362ce741c283ddead6\",\ndiff --git a/yql/essentials/tests/sql/minirun/part8/canondata/result.json b/yql/essentials/tests/sql/minirun/part8/canondata/result.json\nindex 054fd02bb283..206b4466aff2 100644\n--- a/yql/essentials/tests/sql/minirun/part8/canondata/result.json\n+++ b/yql/essentials/tests/sql/minirun/part8/canondata/result.json\n@@ -394,6 +394,27 @@\n             \"uri\": \"https://{canondata_backend}/1130705/a25045513209436069d9f9a29831b732c13e1675/resource.tar.gz#test.test_blocks-agg_singular_type_value-default.txt-Results_/results.txt\"\n         }\n     ],\n+    \"test.test[blocks-agg_with_optional_short_keys-default.txt-Debug]\": [\n+        {\n+            \"checksum\": \"169d1c9b335c178ff63d1f4858a7b237\",\n+            \"size\": 1067,\n+            \"uri\": \"https://{canondata_backend}/1937367/01b34a497b7b8ca6a58c91f8a4e3d26eac6fc1dd/resource.tar.gz#test.test_blocks-agg_with_optional_short_keys-default.txt-Debug_/opt.yql\"\n+        }\n+    ],\n+    \"test.test[blocks-agg_with_optional_short_keys-default.txt-Peephole]\": [\n+        {\n+            \"checksum\": \"922eb78f0602be1324327c4e1d615df7\",\n+            \"size\": 1500,\n+            \"uri\": \"https://{canondata_backend}/1937367/01b34a497b7b8ca6a58c91f8a4e3d26eac6fc1dd/resource.tar.gz#test.test_blocks-agg_with_optional_short_keys-default.txt-Peephole_/opt.yql\"\n+        }\n+    ],\n+    \"test.test[blocks-agg_with_optional_short_keys-default.txt-Results]\": [\n+        {\n+            \"checksum\": \"8bc94ce2c4b3fae8ee00c3d9b1f1a922\",\n+            \"size\": 73786,\n+            \"uri\": \"https://{canondata_backend}/1937367/01b34a497b7b8ca6a58c91f8a4e3d26eac6fc1dd/resource.tar.gz#test.test_blocks-agg_with_optional_short_keys-default.txt-Results_/results.txt\"\n+        }\n+    ],\n     \"test.test[blocks-and_scalar-default.txt-Debug]\": [\n         {\n             \"checksum\": \"e5ccc5c53756e09ded8e82b6d662e5e9\",\ndiff --git a/yql/essentials/tests/sql/sql2yql/canondata/result.json b/yql/essentials/tests/sql/sql2yql/canondata/result.json\nindex 3f568eff7af6..67c25ae718ee 100644\n--- a/yql/essentials/tests/sql/sql2yql/canondata/result.json\n+++ b/yql/essentials/tests/sql/sql2yql/canondata/result.json\n@@ -1385,6 +1385,27 @@\n             \"uri\": \"https://{canondata_backend}/1781765/0dce37dc71c65fe553d73ed7cf98a62bdee9ddee/resource.tar.gz#test_sql2yql.test_blocks-agg_singular_type_value_optional_/sql.yql\"\n         }\n     ],\n+    \"test_sql2yql.test[blocks-agg_with_long_keys]\": [\n+        {\n+            \"checksum\": \"9e33943a7d53d564dcd74254699f5e40\",\n+            \"size\": 2268,\n+            \"uri\": \"https://{canondata_backend}/1881367/d038dca8eefe1a3deb4de9ce8bf77e4ff93a0ee8/resource.tar.gz#test_sql2yql.test_blocks-agg_with_long_keys_/sql.yql\"\n+        }\n+    ],\n+    \"test_sql2yql.test[blocks-agg_with_optional_short_keys]\": [\n+        {\n+            \"checksum\": \"d86c09153425549662c29e059055313a\",\n+            \"size\": 1833,\n+            \"uri\": \"https://{canondata_backend}/1917492/6861dabe163fc1019f5ab349e6b1256e5319ed13/resource.tar.gz#test_sql2yql.test_blocks-agg_with_optional_short_keys_/sql.yql\"\n+        }\n+    ],\n+    \"test_sql2yql.test[blocks-agg_with_optional_string_keys]\": [\n+        {\n+            \"checksum\": \"bb039e048c5409c0403a0fad71eb7fc5\",\n+            \"size\": 1863,\n+            \"uri\": \"https://{canondata_backend}/1881367/d038dca8eefe1a3deb4de9ce8bf77e4ff93a0ee8/resource.tar.gz#test_sql2yql.test_blocks-agg_with_optional_string_keys_/sql.yql\"\n+        }\n+    ],\n     \"test_sql2yql.test[blocks-and]\": [\n         {\n             \"checksum\": \"e22a52b51ef20174c3b832acb09df01b\",\n@@ -8297,6 +8318,21 @@\n             \"uri\": \"file://test_sql_format.test_blocks-agg_singular_type_value_optional_/formatted.sql\"\n         }\n     ],\n+    \"test_sql_format.test[blocks-agg_with_long_keys]\": [\n+        {\n+            \"uri\": \"file://test_sql_format.test_blocks-agg_with_long_keys_/formatted.sql\"\n+        }\n+    ],\n+    \"test_sql_format.test[blocks-agg_with_optional_short_keys]\": [\n+        {\n+            \"uri\": \"file://test_sql_format.test_blocks-agg_with_optional_short_keys_/formatted.sql\"\n+        }\n+    ],\n+    \"test_sql_format.test[blocks-agg_with_optional_string_keys]\": [\n+        {\n+            \"uri\": \"file://test_sql_format.test_blocks-agg_with_optional_string_keys_/formatted.sql\"\n+        }\n+    ],\n     \"test_sql_format.test[blocks-and]\": [\n         {\n             \"uri\": \"file://test_sql_format.test_blocks-and_/formatted.sql\"\ndiff --git a/yql/essentials/tests/sql/sql2yql/canondata/test_sql_format.test_blocks-agg_with_long_keys_/formatted.sql b/yql/essentials/tests/sql/sql2yql/canondata/test_sql_format.test_blocks-agg_with_long_keys_/formatted.sql\nnew file mode 100644\nindex 000000000000..d99382d13c85\n--- /dev/null\n+++ b/yql/essentials/tests/sql/sql2yql/canondata/test_sql_format.test_blocks-agg_with_long_keys_/formatted.sql\n@@ -0,0 +1,30 @@\n+PRAGMA config.flags('PeepholeFlags', 'UseAggPhases');\n+\n+$src = ListMap(\n+    ListFromRange(CAST(0 AS Int64), CAST(500 AS Int64)), ($keyVal) -> {\n+        RETURN <|\n+            k1: $keyVal,\n+            k2: $keyVal + 1,\n+            k3: $keyVal + 2,\n+            v: $keyVal\n+        |>;\n+    }\n+);\n+\n+SELECT\n+    k1,\n+    k2,\n+    k3,\n+    sum(v) AS s\n+FROM\n+    as_table($src)\n+GROUP BY\n+    k1,\n+    k2,\n+    k3\n+ORDER BY\n+    k1,\n+    k2,\n+    k3,\n+    s\n+;\ndiff --git a/yql/essentials/tests/sql/sql2yql/canondata/test_sql_format.test_blocks-agg_with_optional_short_keys_/formatted.sql b/yql/essentials/tests/sql/sql2yql/canondata/test_sql_format.test_blocks-agg_with_optional_short_keys_/formatted.sql\nnew file mode 100644\nindex 000000000000..55cbd221ce68\n--- /dev/null\n+++ b/yql/essentials/tests/sql/sql2yql/canondata/test_sql_format.test_blocks-agg_with_optional_short_keys_/formatted.sql\n@@ -0,0 +1,22 @@\n+PRAGMA config.flags('PeepholeFlags', 'UseAggPhases');\n+\n+$src = ListMap(\n+    ListFromRange(CAST(0 AS Int64), CAST(500 AS Int64)), ($x) -> {\n+        RETURN <|\n+            k: if($x % 10 == 0, NULL, $x),\n+            v: $x\n+        |>;\n+    }\n+);\n+\n+SELECT\n+    k,\n+    sum(v) AS s\n+FROM\n+    as_table($src)\n+GROUP BY\n+    k\n+ORDER BY\n+    k,\n+    s\n+;\ndiff --git a/yql/essentials/tests/sql/sql2yql/canondata/test_sql_format.test_blocks-agg_with_optional_string_keys_/formatted.sql b/yql/essentials/tests/sql/sql2yql/canondata/test_sql_format.test_blocks-agg_with_optional_string_keys_/formatted.sql\nnew file mode 100644\nindex 000000000000..684223df1cdc\n--- /dev/null\n+++ b/yql/essentials/tests/sql/sql2yql/canondata/test_sql_format.test_blocks-agg_with_optional_string_keys_/formatted.sql\n@@ -0,0 +1,22 @@\n+PRAGMA config.flags('PeepholeFlags', 'UseAggPhases');\n+\n+$src = ListMap(\n+    ListFromRange(CAST(0 AS Int64), CAST(500 AS Int64)), ($x) -> {\n+        RETURN <|\n+            k: if($x % 10 == 0, NULL, CAST($x AS String)),\n+            v: $x\n+        |>;\n+    }\n+);\n+\n+SELECT\n+    k,\n+    sum(v) AS s\n+FROM\n+    as_table($src)\n+GROUP BY\n+    k\n+ORDER BY\n+    k,\n+    s\n+;\ndiff --git a/yql/essentials/tests/sql/suites/blocks/agg_with_long_keys.sql b/yql/essentials/tests/sql/suites/blocks/agg_with_long_keys.sql\nnew file mode 100644\nindex 000000000000..9f23b66e0522\n--- /dev/null\n+++ b/yql/essentials/tests/sql/suites/blocks/agg_with_long_keys.sql\n@@ -0,0 +1,13 @@\n+pragma config.flags(\"PeepholeFlags\",\"UseAggPhases\");\n+\n+$src = ListMap(ListFromRange(cast (0 as Int64), cast(500 as Int64)), ($keyVal) -> {\n+    return <|\n+        k1: $keyVal,\n+        k2: $keyVal + 1,\n+        k3: $keyVal + 2,\n+        v: $keyVal\n+    |>;\n+});\n+\n+select k1, k2, k3, sum(v) as s from as_table($src) group by k1, k2, k3 order by k1, k2, k3, s;\n+\ndiff --git a/yql/essentials/tests/sql/suites/blocks/agg_with_optional_short_keys.sql b/yql/essentials/tests/sql/suites/blocks/agg_with_optional_short_keys.sql\nnew file mode 100644\nindex 000000000000..a2e36fa528e5\n--- /dev/null\n+++ b/yql/essentials/tests/sql/suites/blocks/agg_with_optional_short_keys.sql\n@@ -0,0 +1,11 @@\n+pragma config.flags(\"PeepholeFlags\",\"UseAggPhases\");\n+\n+$src = ListMap(ListFromRange(cast (0 as Int64), cast(500 as Int64)), ($x) -> {\n+    return <|\n+        k: if ($x % 10 == 0, NULL, $x),\n+        v: $x\n+    |>;\n+});\n+\n+select k, sum(v) as s from as_table($src) group by k order by k, s;\n+\ndiff --git a/yql/essentials/tests/sql/suites/blocks/agg_with_optional_string_keys.sql b/yql/essentials/tests/sql/suites/blocks/agg_with_optional_string_keys.sql\nnew file mode 100644\nindex 000000000000..85b11d3abef9\n--- /dev/null\n+++ b/yql/essentials/tests/sql/suites/blocks/agg_with_optional_string_keys.sql\n@@ -0,0 +1,11 @@\n+pragma config.flags(\"PeepholeFlags\",\"UseAggPhases\");\n+\n+$src = ListMap(ListFromRange(cast (0 as Int64), cast(500 as Int64)), ($x) -> {\n+    return <|\n+        k: if ($x % 10 == 0, NULL, cast ($x as String)),\n+        v: $x\n+    |>;\n+});\n+\n+select k, sum(v) as s from as_table($src) group by k order by k, s;\n+\n",
  "problem_statement": "[stable-25-1] GROUP BY does not group nulls\nCan reproduce using [Whitelist run](https://github.com/ydb-platform/ydb/actions/runs/15973752438) and `test_tpcds.py.TestTpcdsS1.test_tpcds[93]` test. Was found at 36ea483efe1685d63a26655990457f94996a38b5 successfully reproduces up to ac0294de1abdd66ad047b4a96d2d9ab37e4f409d\n\nCore issue is that [q93.sql](ydb/library/benchmarks/queries/tpcds/yql/q93.sql) select is returning a bunch of nulls instead of proper `ss_customer_sk` - https://nda.ya.ru/t/zEHbZsB97GBeq3\n\n\nTest history indicates that the problem is persistent on `stable-25-1`, but is absent on `main`\n",
  "hints_text": "With this changes in config test works correctly\n\n```\ndiff --git a/ydb/core/protos/table_service_config.proto b/ydb/core/protos/table_service_config.proto\nindex 48d6303701a..02e5eb04729 100644\n--- a/ydb/core/protos/table_service_config.proto\n+++ b/ydb/core/protos/table_service_config.proto\n@@ -310,7 +310,7 @@ message TTableServiceConfig {\n\n     optional uint64 QueryReplayCacheUploadTTLSec = 62 [default = 36000];\n\n-    optional bool EnableQueryServiceSpilling = 63 [ default = false ];\n+    optional bool EnableQueryServiceSpilling = 63 [ default = true ];\n\n     optional uint32 DefaultCostBasedOptimizationLevel = 64 [default = 2];\n\n@@ -318,7 +318,7 @@ message TTableServiceConfig {\n\n     optional bool EnableImplicitQueryParameterTypes = 66 [ default = false ];\n\n-    optional string EnableSpillingNodes = 67 [ default = \"None\" ];\n+    optional string EnableSpillingNodes = 67 [ default = \"All\" ];\n\n     message TComputeSchedulerSettings {\n         optional uint64 AdvanceTimeIntervalUsec = 1 [default = 500000];\n```\n\nSeems to be a problem in Block Aggregations\nCorrect (scalar) AST\n\n```\n(\n(let $1 (DataType 'Int64))\n(let $2 (OptionalType $1))\n(let $3 '('\"ss_customer_sk\" $2))\n(let $4 (OptionalType (DataType 'Double)))\n(let $5 (StructType $3 '('\"ss_item_sk\" $1) '('\"ss_quantity\" $2) '('\"ss_sales_price\" $4) '('\"ss_ticket_number\" $1)))\n(let $6 '('('\"_logical_id\" '5131) '('\"_id\" '\"8fc6eec2-b3c951a7-ad6fc813-581ae63e\") '('\"_wide_channels\" $5)))\n(let $7 (DqPhyStage '() (lambda '() (block '(\n  (let $39 (KqpTable '\"/local/test_db/olap_yatests/tpcds/s1/store_sales\" '\"72075186224037897:32\" '\"\" '1))\n  (let $40 '('\"ss_customer_sk\" '\"ss_item_sk\" '\"ss_quantity\" '\"ss_sales_price\" '\"ss_ticket_number\"))\n  (let $41 (KqpBlockReadOlapTableRanges $39 (Void) $40 '() '() (lambda '($42) $42)))\n  (return (FromFlow $41))\n))) $6))\n(let $8 '\"sr_return_quantity\")\n(let $9 (StructType '('\"sr_item_sk\" $1) '('\"sr_reason_sk\" $2) '($8 $2) '('\"sr_ticket_number\" $1)))\n(let $10 '('('\"_logical_id\" '5142) '('\"_id\" '\"9ef786ab-e53dfb62-b87febd1-17ad8db8\") '('\"_wide_channels\" $9)))\n(let $11 (DqPhyStage '() (lambda '() (block '(\n  (let $43 (KqpTable '\"/local/test_db/olap_yatests/tpcds/s1/store_returns\" '\"72075186224037897:22\" '\"\" '1))\n  (let $44 '('\"sr_item_sk\" '\"sr_reason_sk\" $8 '\"sr_ticket_number\"))\n  (let $45 (KqpBlockReadOlapTableRanges $43 (Void) $44 '() '() (lambda '($46) $46)))\n  (return (FromFlow $45))\n))) $10))\n(let $12 (Bool 'false))\n(let $13 '('\"_wide_channels\" (StructType '('\"r_reason_sk\" $1))))\n(let $14 '('('\"_logical_id\" '3358) '('\"_id\" '\"752d20b8-1f52572f-b472201f-9180f75c\") $13))\n(let $15 (DqPhyStage '() (lambda '() (block '(\n  (let $47 (KqpTable '\"/local/test_db/olap_yatests/tpcds/s1/reason\" '\"72075186224037897:15\" '\"\" '1))\n  (let $48 (KqpBlockReadOlapTableRanges $47 (Void) '('\"r_reason_desc\" '\"r_reason_sk\") '() '() (lambda '($49) (block '(\n    (let $50 '('eq '\"r_reason_desc\" (String '\"reason 28\")))\n    (let $51 '('?? $50 $12))\n    (return (TKqpOlapExtractMembers (KqpOlapFilter $49 $51) '('\"r_reason_sk\")))\n  )))))\n  (return (FromFlow $48))\n))) $14))\n(let $16 (DqCnUnionAll (TDqOutput $15 '0)))\n(let $17 '('('\"_logical_id\" '3576) '('\"_id\" '\"e537d2c5-343628fb-9635243a-d01dbfed\") $13))\n(let $18 (DqPhyStage '($16) (lambda '($52) $52) $17))\n(let $19 '('1 '4))\n(let $20 (DqCnHashShuffle (TDqOutput $7 '0) $19 '1 '\"HashV1\"))\n(let $21 '('0 '3))\n(let $22 (DqCnHashShuffle (TDqOutput $11 '0) $21 '1 '\"HashV1\"))\n(let $23 (DqCnBroadcast (TDqOutput $18 '0)))\n(let $24 '($20 $22 $23))\n(let $25 (lambda '($92 $93) $93))\n(let $26 (lambda '($94 $95 $96) $95))\n(let $27 (lambda '($97 $98 $99 $100) (AggrAdd $98 $100)))\n(let $28 (lambda '($101 $102) $102 $101))\n(let $29 '('('\"_logical_id\" '3822) '('\"_id\" '\"2974037e-9f7006e7-23fb8584-990581c4\") '('\"_wide_channels\" (StructType '('_yql_agg_0 $4) $3))))\n(let $30 (DqPhyStage $24 (lambda '($53 $54 $55) (block '(\n  (let $56 (Condense1 (NarrowMap (ToFlow (WideFromBlocks $55)) (lambda '($65) (AsStruct '('\"r_reason_sk\" $65)))) (lambda '($66) (AsList $66)) (lambda '($67 $68) $12) (lambda '($69 $70) (Append $70 $69))))\n  (let $57 '\"reason.r_reason_sk\")\n  (let $58 '\"store_returns.sr_reason_sk\")\n  (let $59 '\"store_returns.sr_return_quantity\")\n  (let $60 '\"store_sales.ss_customer_sk\")\n  (let $61 '\"store_sales.ss_quantity\")\n  (let $62 '\"store_sales.ss_sales_price\")\n  (let $63 (lambda '($81) $81 (Member $81 $60) (Coalesce (== (Member $81 $58) (Member $81 $57)) $12)))\n  (let $64 (lambda '($85 $86 $87) (block '(\n    (let $88 (Member $85 $59))\n    (let $89 (Member $85 $61))\n    (let $90 (Member $85 $62))\n    (let $91 (If (Exists $88) (* (- $89 $88) $90) (* $89 $90)))\n    (return $91 $86)\n  ))))\n  (return (FromFlow (WideCombiner (WideMap (WideFilter (ExpandMap (FlatMap $56 (lambda '($71) (block '(\n    (let $72 '('0 '0 '2 '1 '3 '2))\n    (let $73 '('1 '3 '2 '4))\n    (let $74 (GraceJoinCore (ToFlow (WideFromBlocks $53)) (ToFlow (WideFromBlocks $54)) '\"Left\" $19 $21 $72 $73 '('\"store_sales.ss_item_sk\" '\"store_sales.ss_ticket_number\") '('\"store_returns.sr_item_sk\" '\"store_returns.sr_ticket_number\"\n) '()))\n    (return (NarrowFlatMap $74 (lambda '($75 $76 $77 $78 $79) (Map (Collect $71) (lambda '($80) (AsStruct '($57 (Member $80 '\"r_reason_sk\")) '($58 $78) '($59 $79) '($60 $75) '($61 $76) '($62 $77)))))))\n  )))) $63) (lambda '($82 $83 $84) $84)) $64) '-1073741824 $25 $26 $27 $28)))\n))) $29))\n(let $31 (DqCnHashShuffle (TDqOutput $30 '0) '('1) '0 '\"HashV1\"))\n(let $32 (Uint64 '100))\n(let $33 '('('\"_logical_id\" '4926) '('\"_id\" '\"8f14e1b2-fe2b8c5e-c0f7fcff-72aae1e0\") '('\"_wide_channels\" (StructType '('Sum0 $4) $3))))\n(let $34 (DqPhyStage '($31) (lambda '($103) (block '(\n  (let $104 (WideCombiner (ToFlow $103) '\"\" $25 $26 $27 $28))\n  (let $105 (Bool 'true))\n  (return (FromFlow (WideTopSort $104 $32 '('('0 $105) '('1 $105)))))\n))) $33))\n(let $35 (DqCnMerge (TDqOutput $34 '0) '('('0 '\"Asc\") '('1 '\"Asc\"))))\n(let $36 (DqPhyStage '($35) (lambda '($106) (FromFlow (NarrowMap (Take (ToFlow $106) $32) (lambda '($107 $108) (AsStruct '('\"ss_customer_sk\" $108) '('\"sumsales\" $107)))))) '('('\"_logical_id\" '5025) '('\"_id\" '\"7ef4e773-bd028aff-9e88cb73-\n938b46bf\"))))\n(let $37 '($7 $11 $15 $18 $30 $34 $36))\n(let $38 (DqCnResult (TDqOutput $36 '0) '('\"ss_customer_sk\" '\"sumsales\")))\n(return (KqpPhysicalQuery '((KqpPhysicalTx $37 '($38) '() '('('\"type\" '\"generic\")))) '((KqpTxResultBinding (ListType (StructType $3 '('\"sumsales\" $4))) '0 '0)) '('('\"type\" '\"query\"))))\n)\n```\nThe problem may be reproduced in main\n\n1. Apply diff\n\n```\ndiff --git a/ydb/core/protos/table_service_config.proto b/ydb/core/protos/table_service_config.proto\nindex 807eabd9d08..ed128f3ed31 100644\n--- a/ydb/core/protos/table_service_config.proto\n+++ b/ydb/core/protos/table_service_config.proto\n@@ -314,7 +314,7 @@ message TTableServiceConfig {\n\n     optional bool EnableImplicitQueryParameterTypes = 66 [ default = true ];\n\n-    optional string EnableSpillingNodes = 67 [ default = \"All\" ];\n+    optional string EnableSpillingNodes = 67 [ default = \"None\" ];\n\n     message TComputeSchedulerSettings {\n         optional uint64 AdvanceTimeIntervalUsec = 1 [default = 500000];\n```\n\n2. Run test\n\n```\n~/ydb/ydb/tests/functional/tpc/large$ ~/ydb/ya make -ttt -F test_tpcds.py::TestTpcdsS1::test_tpcds[93] --keep-temps\n```\n\n3. Optional speedup for this test (~ 1.5 min instead of 15 min) - skip unused tables\n\nhttps://paste.yandex-team.ru/a4395b73-6f0c-4c51-b71a-d1f82be428fb \nIBlockReader::SaveItem can write fewer than KeyLength_ bytes into the serialized key buffer, the tail of the buffer contains random bytes in this case after the current batch starts over. Optionals are prefixed with a \"value present\" flag byte, NULLs specifically are serialized as a single zero byte but KeyLength_ bytes (1 + 8 = 9 bytes in case of `Optional<Int64>`) are still hashed into the hashmap key.\nSomething like `out[insertBatchLen].Resize(KeyLength_);` is needed here instead: https://github.com/ydb-platform/ydb/blob/e615d9b964fe63a31cc13a254846043785a995c2/yql/essentials/minikql/comp_nodes/mkql_block_agg.cpp#L1377 (I need to verify KeyLength_ makes sense for all key types though - it's undefined for TSSOKey at least)",
  "created_at": "2025-07-11T11:56:11Z"
}