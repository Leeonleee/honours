diff --git a/yql/essentials/minikql/comp_nodes/mkql_block_agg.cpp b/yql/essentials/minikql/comp_nodes/mkql_block_agg.cpp
index 266e909b98e3..645a5037e009 100644
--- a/yql/essentials/minikql/comp_nodes/mkql_block_agg.cpp
+++ b/yql/essentials/minikql/comp_nodes/mkql_block_agg.cpp
@@ -863,7 +863,7 @@ template <typename T>
 T MakeKey(TStringBuf s, ui32 keyLength) {
     Y_UNUSED(keyLength);
     Y_ASSERT(s.Size() <= sizeof(T));
-    return *(const T*)s.Data();
+    return ReadUnaligned<T>(s.Data());
 }
 
 template <>
@@ -1280,8 +1280,10 @@ struct THashedWrapperBaseState : public TBlockState {
         }
 
         std::array<TOutputBuffer, PrefetchBatchSize> out;
-        for (ui32 i = 0; i < PrefetchBatchSize; ++i) {
-            out[i].Resize(sizeof(TKey));
+        if constexpr (!std::is_same<TKey, TSSOKey>::value && !std::is_same<TKey, TExternalFixedSizeKey>::value) {
+            for (ui32 i = 0; i < PrefetchBatchSize; ++i) {
+                out[i].Resize(sizeof(TKey));
+            }
         }
 
         std::array<TRobinHoodBatchRequestItem<TKey>, PrefetchBatchSize> insertBatch;
@@ -1374,13 +1376,18 @@ struct THashedWrapperBaseState : public TBlockState {
             }
 
             // encode key
-            out[insertBatchLen].Rewind();
+            auto& buf = out[insertBatchLen];
+            buf.Rewind();
+            if constexpr (!std::is_same<TKey, TSSOKey>::value && !std::is_same<TKey, TExternalFixedSizeKey>::value) {
+                WriteUnaligned<TKey>(buf.Data(), TKey{});
+            }
+
             for (ui32 i = 0; i < keysDatum.size(); ++i) {
                 if (keysDatum[i].is_scalar()) {
                     // TODO: more efficient code when grouping by scalar
-                    Readers_[i]->SaveScalarItem(*keysDatum[i].scalar(), out[insertBatchLen]);
+                    Readers_[i]->SaveScalarItem(*keysDatum[i].scalar(), buf);
                 } else {
-                    Readers_[i]->SaveItem(*keysDatum[i].array(), row, out[insertBatchLen]);
+                    Readers_[i]->SaveItem(*keysDatum[i].array(), row, buf);
                 }
             }
 
diff --git a/yql/essentials/public/udf/arrow/block_io_buffer.h b/yql/essentials/public/udf/arrow/block_io_buffer.h
index 46bfd4acbb4c..2d1b7b79e117 100644
--- a/yql/essentials/public/udf/arrow/block_io_buffer.h
+++ b/yql/essentials/public/udf/arrow/block_io_buffer.h
@@ -89,6 +89,10 @@ class TOutputBuffer {
         return TStringBuf(Vec_.data(), Vec_.data() + Pos_);
     }
 
+    char* Data() {
+        return Vec_.data();
+    }
+
 private:
     void Ensure(size_t delta) {
         if (Pos_ + delta > Vec_.size()) {
