diff --git a/ydb/core/tx/columnshard/hooks/testing/ro_controller.h b/ydb/core/tx/columnshard/hooks/testing/ro_controller.h
index cc7354f52b21..1487ad560507 100644
--- a/ydb/core/tx/columnshard/hooks/testing/ro_controller.h
+++ b/ydb/core/tx/columnshard/hooks/testing/ro_controller.h
@@ -4,6 +4,7 @@
 #include <ydb/core/tx/columnshard/common/tablet_id.h>
 #include <ydb/core/tx/columnshard/engines/writer/write_controller.h>
 #include <ydb/core/tx/columnshard/hooks/abstract/abstract.h>
+#include <ydb/core/testlib/basics/runtime.h>
 #include <util/string/join.h>
 
 namespace NKikimr::NYDBTest::NColumnShard {
@@ -108,7 +109,7 @@ class TReadOnlyController: public ICSController {
         }
     }
 
-    void WaitCleaning(const TDuration d) const {
+    void WaitCleaning(const TDuration d, NActors::TTestBasicRuntime* testRuntime = nullptr) const {
         TInstant start = TInstant::Now();
         ui32 countStart = GetCleaningStartedCounter().Val();
         while (Now() - start < d) {
@@ -117,7 +118,11 @@ class TReadOnlyController: public ICSController {
                 start = TInstant::Now();
             }
             Cerr << "WAIT_CLEANING: " << GetCleaningStartedCounter().Val() << Endl;
-            Sleep(TDuration::Seconds(1));
+            if (testRuntime) {
+                testRuntime->SimulateSleep(TDuration::Seconds(1));
+            } else {
+                Sleep(TDuration::Seconds(1));
+            }
         }
     }
 
diff --git a/ydb/core/tx/columnshard/test_helper/columnshard_ut_common.cpp b/ydb/core/tx/columnshard/test_helper/columnshard_ut_common.cpp
index 833a430a4feb..9e2b466469a7 100644
--- a/ydb/core/tx/columnshard/test_helper/columnshard_ut_common.cpp
+++ b/ydb/core/tx/columnshard/test_helper/columnshard_ut_common.cpp
@@ -54,16 +54,34 @@ void RefreshTiering(TTestBasicRuntime& runtime, const TActorId& sender) {
     ForwardToTablet(runtime, TTestTxConfig::TxTablet0, sender, event.release());
 }
 
-bool ProposeSchemaTx(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, NOlap::TSnapshot snap) {
+namespace {
+std::optional<TPlanStep> ProposeSchemaTxOptional(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, const ui64 txId) {
     auto event = std::make_unique<TEvColumnShard::TEvProposeTransaction>(
-        NKikimrTxColumnShard::TX_KIND_SCHEMA, 0, sender, snap.GetTxId(), txBody, 0, 0);
-
+        NKikimrTxColumnShard::TX_KIND_SCHEMA, 0, sender, txId, txBody, 0, 0);
+    const auto now = runtime.GetTimeProvider()->Now();
     ForwardToTablet(runtime, TTestTxConfig::TxTablet0, sender, event.release());
     auto ev = runtime.GrabEdgeEvent<TEvColumnShard::TEvProposeTransactionResult>(sender);
     const auto& res = ev->Get()->Record;
-    UNIT_ASSERT_EQUAL(res.GetTxId(), snap.GetTxId());
+    UNIT_ASSERT_EQUAL(res.GetTxId(), txId);
     UNIT_ASSERT_EQUAL(res.GetTxKind(), NKikimrTxColumnShard::TX_KIND_SCHEMA);
-    return (res.GetStatus() == NKikimrTxColumnShard::PREPARED);
+    if (res.GetStatus() == NKikimrTxColumnShard::PREPARED) {
+        UNIT_ASSERT_LE(now.MilliSeconds(), res.GetMinStep());
+        UNIT_ASSERT_EQUAL(res.GetMaxStep(), std::numeric_limits<ui64>::max());
+        return {TPlanStep(res.GetMinStep())};
+    }
+    return std::nullopt;
+}
+} //namespace
+
+void ProposeSchemaTxFail(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, const ui64 txId) {
+    const auto result = ProposeSchemaTxOptional(runtime, sender, txBody, txId);
+    AFL_VERIFY(!result);
+}
+
+TPlanStep ProposeSchemaTx(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, const ui64 txId) {
+    const auto result = ProposeSchemaTxOptional(runtime, sender, txBody, txId);
+    AFL_VERIFY(result);
+    return *result;
 }
 
 void PlanSchemaTx(TTestBasicRuntime& runtime, const TActorId& sender, NOlap::TSnapshot snap) {
@@ -208,7 +226,7 @@ void ScanIndexStats(TTestBasicRuntime& runtime, TActorId& sender, const std::vec
 }
 
 template<class Checker>
-void ProposeCommitCheck(TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, ui64 txId, const std::vector<ui64>& /* writeIds */, const ui64 lockId, Checker&& checker) {
+TPlanStep ProposeCommitCheck(TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, ui64 txId, const std::vector<ui64>& /* writeIds */, const ui64 lockId, Checker&& checker) {
     auto write = std::make_unique<NEvents::TDataEvents::TEvWrite>(txId, NKikimrDataEvents::TEvWrite::MODE_PREPARE);
     auto* lock = write->Record.MutableLocks()->AddLocks();
     lock->SetLockId(lockId);
@@ -221,31 +239,37 @@ void ProposeCommitCheck(TTestBasicRuntime& runtime, TActorId& sender, ui64 shard
 
     auto& res = event->Record;
     checker(res);
+    return TPlanStep(res.GetMinStep());
 }
 
-void ProposeCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, ui64 txId, const std::vector<ui64>& writeIds, const ui64 lockId) {
-    ProposeCommitCheck(runtime, sender, shardId, txId, writeIds, lockId, [&](auto& res) {
+TPlanStep ProposeCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, ui64 txId, const std::vector<ui64>& writeIds, const ui64 lockId) {
+    const auto now = runtime.GetTimeProvider()->Now();
+    return ProposeCommitCheck(runtime, sender, shardId, txId, writeIds, lockId, [&](auto& res) {
         AFL_VERIFY(res.GetTxId() == txId)("tx_id", txId)("res", res.GetTxId());
         UNIT_ASSERT_EQUAL(res.GetStatus(), NKikimrDataEvents::TEvWriteResult::STATUS_PREPARED);
+        UNIT_ASSERT_LE(now.MilliSeconds(), res.GetMinStep());
+        UNIT_ASSERT_UNEQUAL(res.GetMaxStep(), std::numeric_limits<ui64>::max());
+        UNIT_ASSERT_LE(res.GetMinStep(), res.GetMaxStep());
     });
 }
 
 void ProposeCommitFail(TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, ui64 txId, const std::vector<ui64>& writeIds, const ui64 lockId) {
-    ProposeCommitCheck(runtime, sender, shardId, txId, writeIds, lockId, [&](auto& res) {
+    const auto result = ProposeCommitCheck(runtime, sender, shardId, txId, writeIds, lockId, [&](auto& res) {
         UNIT_ASSERT_UNEQUAL(res.GetStatus(), NKikimrDataEvents::TEvWriteResult::STATUS_PREPARED);
     });
+    Y_UNUSED(result);
 }
 
-void ProposeCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 txId, const std::vector<ui64>& writeIds, const ui64 lockId) {
-    ProposeCommit(runtime, sender, TTestTxConfig::TxTablet0, txId, writeIds, lockId);
+TPlanStep ProposeCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 txId, const std::vector<ui64>& writeIds, const ui64 lockId) {
+    return ProposeCommit(runtime, sender, TTestTxConfig::TxTablet0, txId, writeIds, lockId);
 }
 
 
-void ProposeCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 txId, const std::vector<ui64>& writeIds) {
-    ProposeCommit(runtime, sender, TTestTxConfig::TxTablet0, txId, writeIds);
+TPlanStep ProposeCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 txId, const std::vector<ui64>& writeIds) {
+    return ProposeCommit(runtime, sender, TTestTxConfig::TxTablet0, txId, writeIds);
 }
 
-void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 planStep, const TSet<ui64>& txIds) {
+void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, TPlanStep planStep, const TSet<ui64>& txIds) {
     PlanCommit(runtime, sender, TTestTxConfig::TxTablet0, planStep, txIds);
 }
 
@@ -254,8 +278,8 @@ void Wakeup(TTestBasicRuntime& runtime, const TActorId& sender, const ui64 shard
     ForwardToTablet(runtime, shardId, sender, wakeup.release());
 }
 
-void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, ui64 planStep, const TSet<ui64>& txIds) {
-    auto plan = std::make_unique<TEvTxProcessing::TEvPlanStep>(planStep, 0, shardId);
+void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, TPlanStep planStep, const TSet<ui64>& txIds) {
+    auto plan = std::make_unique<TEvTxProcessing::TEvPlanStep>(planStep.Val(), 0, shardId);
     for (ui64 txId : txIds) {
         auto tx = plan->Record.AddTransactions();
         tx->SetTxId(txId);
@@ -466,7 +490,7 @@ namespace NKikimr::NColumnShard {
         return NOlap::TIndexInfo::BuildDefault(NOlap::TTestStoragesManager::GetInstance(), columns, pkIds);
     }
 
-    void SetupSchema(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, const NOlap::TSnapshot& snapshot, bool succeed) {
+    NTxUT::TPlanStep SetupSchema(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, const ui64 txId) {
 
         auto controller = NYDBTest::TControllers::GetControllerAs<NYDBTest::NColumnShard::TController>();
         while (controller && !controller->IsActiveTablet(TTestTxConfig::TxTablet0)) {
@@ -474,17 +498,15 @@ namespace NKikimr::NColumnShard {
         }
 
         using namespace NTxUT;
-        bool ok = ProposeSchemaTx(runtime, sender, txBody, snapshot);
-        UNIT_ASSERT_VALUES_EQUAL(ok, succeed);
-        if (succeed) {
-            PlanSchemaTx(runtime, sender, snapshot);
-        }
+        const auto planStep = ProposeSchemaTx(runtime, sender, txBody, txId);
+        PlanSchemaTx(runtime, sender, NOlap::TSnapshot(planStep, txId));
+        return planStep;
     }
 
-    void SetupSchema(TTestBasicRuntime& runtime, TActorId& sender, ui64 pathId,
+    NTxUT::TPlanStep SetupSchema(TTestBasicRuntime& runtime, TActorId& sender, ui64 pathId,
                  const TestTableDescription& table, TString codec) {
         using namespace NTxUT;
-        NOlap::TSnapshot snapshot(10, 10);
+        const ui64 txId = 10;
         TString txBody;
         auto specials = TTestSchema::TTableSpecials().WithCodec(codec);
         if (table.InStore) {
@@ -492,11 +514,11 @@ namespace NKikimr::NColumnShard {
         } else {
             txBody = TTestSchema::CreateStandaloneTableTxBody(pathId, table.Schema, table.Pk, specials);
         }
-        SetupSchema(runtime, sender, txBody, snapshot, true);
+        return SetupSchema(runtime, sender, txBody, txId);
     }
 
 
-    void PrepareTablet(TTestBasicRuntime& runtime, const ui64 tableId, const std::vector<NArrow::NTest::TTestColumn>& schema, const ui32 keySize) {
+    NTxUT::TPlanStep PrepareTablet(TTestBasicRuntime& runtime, const ui64 tableId, const std::vector<NArrow::NTest::TTestColumn>& schema, const ui32 keySize) {
         using namespace NTxUT;
         CreateTestBootstrapper(runtime, CreateTestTabletInfo(TTestTxConfig::TxTablet0, TTabletTypes::ColumnShard), &CreateColumnShard);
 
@@ -512,10 +534,10 @@ namespace NKikimr::NColumnShard {
             tableDescription.Pk.push_back(schema[i]);
         }
         TActorId sender = runtime.AllocateEdgeActor();
-        SetupSchema(runtime, sender, tableId, tableDescription);
+        return SetupSchema(runtime, sender, tableId, tableDescription);
     }
 
-    void PrepareTablet(TTestBasicRuntime& runtime, const TString& schemaTxBody, bool succeed) {
+    NTxUT::TPlanStep PrepareTablet(TTestBasicRuntime& runtime, const TString& schemaTxBody) {
         using namespace NTxUT;
         CreateTestBootstrapper(runtime, CreateTestTabletInfo(TTestTxConfig::TxTablet0, TTabletTypes::ColumnShard), &CreateColumnShard);
 
@@ -524,7 +546,7 @@ namespace NKikimr::NColumnShard {
         runtime.DispatchEvents(options);
 
         TActorId sender = runtime.AllocateEdgeActor();
-        SetupSchema(runtime, sender, schemaTxBody, NOlap::TSnapshot(1000, 100), succeed);
+        return SetupSchema(runtime, sender, schemaTxBody, 100);
     }
 
      std::shared_ptr<arrow::RecordBatch> ReadAllAsBatch(TTestBasicRuntime& runtime, const ui64 tableId, const NOlap::TSnapshot& snapshot, const std::vector<NArrow::NTest::TTestColumn>& schema) {
diff --git a/ydb/core/tx/columnshard/test_helper/columnshard_ut_common.h b/ydb/core/tx/columnshard/test_helper/columnshard_ut_common.h
index a844f3f80114..f433bf54be3f 100644
--- a/ydb/core/tx/columnshard/test_helper/columnshard_ut_common.h
+++ b/ydb/core/tx/columnshard/test_helper/columnshard_ut_common.h
@@ -25,6 +25,8 @@ struct TIndexInfo;
 
 namespace NKikimr::NTxUT {
 
+using TPlanStep = TPositiveIncreasingControlInteger;
+
 // Private events of different actors reuse the same ES_PRIVATE range
 // So in order to capture the right private event we need to check its type via dynamic_cast
 template <class TPrivateEvent>
@@ -395,7 +397,8 @@ struct TTestSchema {
 
 void RefreshTiering(TTestBasicRuntime& runtime, const TActorId& sender);
 
-bool ProposeSchemaTx(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, NOlap::TSnapshot snap);
+void ProposeSchemaTxFail(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, const ui64 txId);
+[[nodiscard]] TPlanStep ProposeSchemaTx(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, const ui64 txId);
 void PlanSchemaTx(TTestBasicRuntime& runtime, const TActorId& sender, NOlap::TSnapshot snap);
 
 void PlanWriteTx(TTestBasicRuntime& runtime, const TActorId& sender, NOlap::TSnapshot snap, bool waitResult = true);
@@ -418,14 +421,14 @@ void ScanIndexStats(TTestBasicRuntime& runtime, TActorId& sender, const std::vec
 
 void ProposeCommitFail(
      TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, ui64 txId, const std::vector<ui64>& writeIds, const ui64 lockId = 1);
-void ProposeCommit(
+[[nodiscard]] TPlanStep ProposeCommit(
     TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, ui64 txId, const std::vector<ui64>& writeIds, const ui64 lockId = 1);
-void ProposeCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 txId, const std::vector<ui64>& writeIds, const ui64 lockId = 1);
+[[nodiscard]] TPlanStep ProposeCommit(TTestBasicRuntime& runtime, TActorId& sender, const ui64 txId, const std::vector<ui64>& writeIds, const ui64 lockId = 1);
 
-void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, ui64 planStep, const TSet<ui64>& txIds);
-void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 planStep, const TSet<ui64>& txIds);
+void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 shardId, TPlanStep planStep, const TSet<ui64>& txIds);
+void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, TPlanStep planStep, const TSet<ui64>& txIds);
 
-inline void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, ui64 planStep, ui64 txId) {
+inline void PlanCommit(TTestBasicRuntime& runtime, TActorId& sender, TPlanStep planStep, ui64 txId) {
     TSet<ui64> ids;
     ids.insert(txId);
     PlanCommit(runtime, sender, planStep, ids);
@@ -557,12 +560,11 @@ struct TestTableDescription {
     }
 };
 
-void SetupSchema(TTestBasicRuntime& runtime, TActorId& sender, ui64 pathId, const TestTableDescription& table = {}, TString codec = "none");
-void SetupSchema(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, const NOlap::TSnapshot& snapshot, bool succeed = true);
+[[nodiscard]] NTxUT::TPlanStep SetupSchema(TTestBasicRuntime& runtime, TActorId& sender, ui64 pathId, const TestTableDescription& table = {}, TString codec = "none");
+[[nodiscard]] NTxUT::TPlanStep SetupSchema(TTestBasicRuntime& runtime, TActorId& sender, const TString& txBody, const ui64 txId);
 
-void PrepareTablet(
+[[nodiscard]] NTxUT::TPlanStep PrepareTablet(
     TTestBasicRuntime& runtime, const ui64 tableId, const std::vector<NArrow::NTest::TTestColumn>& schema, const ui32 keySize = 1);
-void PrepareTablet(TTestBasicRuntime& runtime, const TString& schemaTxBody, bool succeed);
 
 std::shared_ptr<arrow::RecordBatch> ReadAllAsBatch(
     TTestBasicRuntime& runtime, const ui64 tableId, const NOlap::TSnapshot& snapshot, const std::vector<NArrow::NTest::TTestColumn>& schema);
diff --git a/ydb/core/tx/columnshard/test_helper/shard_reader.h b/ydb/core/tx/columnshard/test_helper/shard_reader.h
index ebef456bbee5..8f1d3afb1c8f 100644
--- a/ydb/core/tx/columnshard/test_helper/shard_reader.h
+++ b/ydb/core/tx/columnshard/test_helper/shard_reader.h
@@ -35,6 +35,8 @@ class TShardReader {
     std::vector<std::shared_ptr<arrow::RecordBatch>> ResultBatches;
     YDB_READONLY(ui32, IterationsCount, 0);
 
+    std::vector<Ydb::Issue::IssueMessage> Errors;
+
 public:
     ui64 GetReadStat(const TString& paramName) const {
         AFL_VERIFY(IsCorrectlyFinished());
@@ -92,6 +94,10 @@ class TShardReader {
         return IsFinished() && *Finished == -1;
     }
 
+    const std::vector<Ydb::Issue::IssueMessage>& GetErrors() const {
+        return Errors;
+    }
+
     bool InitializeScanner() {
         AFL_VERIFY(!ScanActorId);
         const TActorId sender = Runtime.AllocateEdgeActor();
@@ -104,6 +110,9 @@ class TShardReader {
             ScanActorId = ActorIdFromProto(msg.GetScanActorId());
             return true;
         } else if (auto* evError = std::get<1>(event)) {
+            for (auto issue : evError->Record.GetIssues()) {
+                Errors.emplace_back(issue);
+            }
             Finished = -1;
         } else {
             AFL_VERIFY(false);
@@ -136,6 +145,9 @@ class TShardReader {
                 Finished = 1;
             }
         } else if (auto* evError = std::get<1>(event)) {
+            for (auto issue : evError->Record.GetIssues()) {
+                Errors.emplace_back(issue);
+            }
             Finished = -1;
         } else {
             AFL_VERIFY(false);
diff --git a/ydb/core/tx/columnshard/test_helper/shard_writer.cpp b/ydb/core/tx/columnshard/test_helper/shard_writer.cpp
index 92e262d2f776..b1e61360b66f 100644
--- a/ydb/core/tx/columnshard/test_helper/shard_writer.cpp
+++ b/ydb/core/tx/columnshard/test_helper/shard_writer.cpp
@@ -8,7 +8,7 @@
 
 namespace NKikimr::NTxUT {
 
-NKikimrDataEvents::TEvWriteResult::EStatus TShardWriter::StartCommit(const ui64 txId) {
+NKikimrDataEvents::TEvWriteResult TShardWriter::StartCommitImpl(const ui64 txId) {
     auto evCommit = std::make_unique<NKikimr::NEvents::TDataEvents::TEvWrite>(txId, NKikimrDataEvents::TEvWrite::MODE_IMMEDIATE);
     evCommit->Record.MutableLocks()->SetOp(NKikimrDataEvents::TKqpLocks::Commit);
     auto* lock = evCommit->Record.MutableLocks()->AddLocks();
@@ -18,8 +18,23 @@ NKikimrDataEvents::TEvWriteResult::EStatus TShardWriter::StartCommit(const ui64
     TAutoPtr<NActors::IEventHandle> handle;
     auto event = Runtime.GrabEdgeEvent<NKikimr::NEvents::TDataEvents::TEvWriteResult>(handle);
     AFL_VERIFY(event);
+    AFL_VERIFY(event->Record.GetTxId() == txId);
+    return event->Record;
+}
 
-    return event->Record.GetStatus();
+void TShardWriter::StartCommitFail(const ui64 txId) {
+    auto event = StartCommitImpl(txId);
+    AFL_VERIFY(event.GetStatus() == NKikimrDataEvents::TEvWriteResult::STATUS_BAD_REQUEST);
+}
+
+TPlanStep TShardWriter::StartCommit(const ui64 txId) {
+    const auto now = Runtime.GetTimeProvider()->Now();
+    auto event = StartCommitImpl(txId);
+    AFL_VERIFY(event.GetStatus() == NKikimrDataEvents::TEvWriteResult::STATUS_PREPARED);
+    AFL_VERIFY(now.MilliSeconds() <= event.GetMinStep());
+    AFL_VERIFY(event.GetMinStep() <= event.GetMaxStep());
+    AFL_VERIFY(event.GetMaxStep() < Max<ui64>());
+    return TPlanStep{event.GetMinStep()};
 }
 
 NKikimrDataEvents::TEvWriteResult::EStatus TShardWriter::Abort(const ui64 txId) {
diff --git a/ydb/core/tx/columnshard/test_helper/shard_writer.h b/ydb/core/tx/columnshard/test_helper/shard_writer.h
index b43e9749a69b..584a443df480 100644
--- a/ydb/core/tx/columnshard/test_helper/shard_writer.h
+++ b/ydb/core/tx/columnshard/test_helper/shard_writer.h
@@ -1,6 +1,7 @@
 #pragma once
-#include <ydb/core/protos/data_events.pb.h>
+#include <ydb/core/tx/data_events/events.h>
 #include <ydb/core/testlib/basics/runtime.h>
+#include <ydb/core/tx/columnshard/test_helper/columnshard_ut_common.h>
 
 #include <ydb/library/accessor/accessor.h>
 
@@ -19,6 +20,9 @@ class TShardWriter {
     YDB_ACCESSOR(ui64, LockNodeId, 1);
     const TActorId Sender;
 
+private:
+    [[nodiscard]] NKikimrDataEvents::TEvWriteResult StartCommitImpl(const ui64 txId);
+
 public:
     TShardWriter(TTestBasicRuntime& runtime, const ui64 tabletId, const ui64 pathId, const ui64 lockId)
         : Runtime(runtime)
@@ -32,8 +36,8 @@ class TShardWriter {
     const TActorId& GetSender() const {
         return Sender;
     }
-
-    [[nodiscard]] NKikimrDataEvents::TEvWriteResult::EStatus StartCommit(const ui64 txId);
+    void StartCommitFail(const ui64 txId);
+    [[nodiscard]] NTxUT::TPlanStep StartCommit(const ui64 txId);
     [[nodiscard]] NKikimrDataEvents::TEvWriteResult::EStatus Abort(const ui64 txId);
 
     [[nodiscard]] NKikimrDataEvents::TEvWriteResult::EStatus Write(
diff --git a/ydb/core/tx/columnshard/test_helper/test_combinator.h b/ydb/core/tx/columnshard/test_helper/test_combinator.h
new file mode 100644
index 000000000000..d98519465e44
--- /dev/null
+++ b/ydb/core/tx/columnshard/test_helper/test_combinator.h
@@ -0,0 +1,80 @@
+#pragma once
+
+
+#define Y_UNIT_TEST_COMBINATOR_1(BaseName, Flag1)                                                                                  \
+    template<bool> void BaseName(NUnitTest::TTestContext&);                                                                        \
+    struct TTestRegistration##BaseName {                                                                                           \
+        TTestRegistration##BaseName() {                                                                                            \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false>), false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true>), false);  \
+        }                                                                                                                          \
+    };                                                                                                                             \
+    static TTestRegistration##BaseName testRegistration##BaseName;                                                                 \
+    template<bool Flag1>                                                                                                           \
+    void BaseName(NUnitTest::TTestContext&)
+
+#define Y_UNIT_TEST_COMBINATOR_2(BaseName, Flag1, Flag2)                                                                                             \
+    template<bool, bool> void BaseName(NUnitTest::TTestContext&);                                                                                    \
+    struct TTestRegistration##BaseName {                                                                                                             \
+        TTestRegistration##BaseName() {                                                                                                              \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "-" #Flag2, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, false>), false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "-" #Flag2, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  false>), false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "+" #Flag2, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, true>),  false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "+" #Flag2, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  true>),  false); \
+        }                                                                                                                                            \
+    };                                                                                                                                               \
+    static TTestRegistration##BaseName testRegistration##BaseName;                                                                                   \
+    template<bool Flag1, bool Flag2>                                                                                                                 \
+    void BaseName(NUnitTest::TTestContext&)
+
+
+#define Y_UNIT_TEST_COMBINATOR_3(BaseName, Flag1, Flag2, Flag3)                                                                                                        \
+    template<bool, bool, bool> void BaseName(NUnitTest::TTestContext&);                                                                                                \
+    struct TTestRegistration##BaseName {                                                                                                                               \
+        TTestRegistration##BaseName() {                                                                                                                                \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "-" #Flag2 "-" #Flag3, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, false, false>), false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "-" #Flag2 "-" #Flag3, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  false, false>), false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "+" #Flag2 "-" #Flag3, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, true,  false>), false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "+" #Flag2 "-" #Flag3, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  true,  false>), false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "-" #Flag2 "+" #Flag3, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, false, true>),  false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "-" #Flag2 "+" #Flag3, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  false, true>),  false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "+" #Flag2 "+" #Flag3, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, true,  true>),  false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "+" #Flag2 "+" #Flag3, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  true,  true>),  false); \
+        }                                                                                                                                                              \
+    };                                                                                                                                                                 \
+    static TTestRegistration##BaseName testRegistration##BaseName;                                                                                                     \
+    template<bool Flag1, bool Flag2, bool Flag3>                                                                                                                       \
+    void BaseName(NUnitTest::TTestContext&)
+
+#define Y_UNIT_TEST_COMBINATOR_4(BaseName, Flag1, Flag2, Flag3, Flag4)                                                                                                                   \
+    template<bool, bool, bool, bool> void BaseName(NUnitTest::TTestContext&);                                                                                                            \
+    struct TTestRegistration##BaseName {                                                                                                                                                 \
+        TTestRegistration##BaseName() {                                                                                                                                                  \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "-" #Flag2 "-" #Flag3 "-" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, false, false, false>), false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "-" #Flag2 "-" #Flag3 "-" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  false, false, false>), false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "+" #Flag2 "-" #Flag3 "-" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, true,  false, false>), false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "+" #Flag2 "-" #Flag3 "-" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  true,  false, false>), false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "-" #Flag2 "+" #Flag3 "-" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, false, true,  false>), false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "-" #Flag2 "+" #Flag3 "-" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  false, true,  false>), false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "+" #Flag2 "+" #Flag3 "-" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, true,  true,  false>), false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "+" #Flag2 "+" #Flag3 "-" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  true,  true,  false>), false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "-" #Flag2 "-" #Flag3 "+" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, false, false, true>),  false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "-" #Flag2 "-" #Flag3 "+" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  false, false, true>),  false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "+" #Flag2 "-" #Flag3 "+" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, true,  false, true>),  false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "+" #Flag2 "-" #Flag3 "+" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  true,  false, true>),  false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "-" #Flag2 "+" #Flag3 "+" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, false, true,  true>),  false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "-" #Flag2 "+" #Flag3 "+" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  false, true,  true>),  false); \
+            TCurrentTest::AddTest(#BaseName "-" #Flag1 "+" #Flag2 "+" #Flag3 "+" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<false, true,  true,  true>),  false); \
+            TCurrentTest::AddTest(#BaseName "+" #Flag1 "+" #Flag2 "+" #Flag3 "+" #Flag4, static_cast<void (*)(NUnitTest::TTestContext&)>(&BaseName<true,  true,  true,  true>),  false); \
+        }                                                                                                                                                                                \
+    };                                                                                                                                                                                   \
+    static TTestRegistration##BaseName testRegistration##BaseName;                                                                                                                       \
+    template<bool Flag1, bool Flag2, bool Flag3, bool Flag4>                                                                                                                             \
+    void BaseName(NUnitTest::TTestContext&)
+
+
+#define Y_UNIT_TEST_DUO Y_UNIT_TEST_COMBINATOR_1
+#define Y_UNIT_TEST_QUATRO Y_UNIT_TEST_COMBINATOR_2
+#define Y_UNIT_TEST_OCTO Y_UNIT_TEST_COMBINATOR_3
+#define Y_UNIT_TEST_SEDECIM Y_UNIT_TEST_COMBINATOR_4
+
diff --git a/ydb/tests/functional/api/test_insert.py b/ydb/tests/functional/api/test_insert.py
index 4e5a1f93a72c..ad28e4b87bf9 100644
--- a/ydb/tests/functional/api/test_insert.py
+++ b/ydb/tests/functional/api/test_insert.py
@@ -191,7 +191,7 @@ def callee():
                         callee,
                         raises(
                             ydb.PreconditionFailed,
-                            "Conflict with existing key."
+                            "(Duplicate keys have been found.)|(Conflict with existing key.)"
                         )
                     )
 
diff --git a/ydb/tests/functional/api/test_isolation.py b/ydb/tests/functional/api/test_isolation.py
index 3954115349fd..3b398881a1a9 100644
--- a/ydb/tests/functional/api/test_isolation.py
+++ b/ydb/tests/functional/api/test_isolation.py
@@ -651,6 +651,9 @@ def test_anti_dependency_cycles_g2_two_edges(self):
         def callee():
             t1.execute('{} update {} set value = 0 where id = 1;'.format(prefix, table_name))
 
+            # Sinks allow UPDATE statement to be delayed, so we do commit here to execute update.
+            t1.commit()
+
         assert_that(
             callee,
             raises(
diff --git a/ydb/tests/functional/api/ya.make b/ydb/tests/functional/api/ya.make
index 5060311299de..9ab14133538b 100644
--- a/ydb/tests/functional/api/ya.make
+++ b/ydb/tests/functional/api/ya.make
@@ -4,6 +4,7 @@ FORK_TEST_FILES()
 SIZE(MEDIUM)
 
 ENV(YDB_DRIVER_BINARY="ydb/apps/ydbd/ydbd")
+ENV(YDB_HARD_MEMORY_LIMIT_BYTES="8000000000")
 
 TEST_SRCS(
     test_session_pool.py
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_from_table.sql-plan_/dynumber_insert_from_table.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_from_table.sql-plan_/dynumber_insert_from_table.sql.plan
index c1ec7180d970..e78bb7600be4 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_from_table.sql-plan_/dynumber_insert_from_table.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_from_table.sql-plan_/dynumber_insert_from_table.sql.plan
@@ -21,21 +21,13 @@
         },
         {
             "name": "/local/base_dynumber_insert_from_table_sql_plan/ResultTableDyNumber",
-            "reads": [
-                {
-                    "lookup_by": [
-                        "Key"
-                    ],
-                    "type": "Lookup"
-                }
-            ],
             "writes": [
                 {
                     "columns": [
                         "Key",
                         "Value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_literal.sql-plan_/dynumber_insert_literal.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_literal.sql-plan_/dynumber_insert_literal.sql.plan
index 2360a2fc1bee..db6d72b7f43e 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_literal.sql-plan_/dynumber_insert_literal.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_literal.sql-plan_/dynumber_insert_literal.sql.plan
@@ -6,21 +6,13 @@
     "tables": [
         {
             "name": "/local/base_dynumber_insert_literal_sql_plan/ResultLiteralDyNumber",
-            "reads": [
-                {
-                    "lookup_by": [
-                        "Key"
-                    ],
-                    "type": "Lookup"
-                }
-            ],
             "writes": [
                 {
                     "columns": [
                         "Key",
                         "Value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_params.sql-plan_/dynumber_insert_params.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_params.sql-plan_/dynumber_insert_params.sql.plan
index 7fdad896072b..23abca39d642 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_params.sql-plan_/dynumber_insert_params.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_dynumber_insert_params.sql-plan_/dynumber_insert_params.sql.plan
@@ -6,21 +6,13 @@
     "tables": [
         {
             "name": "/local/base_dynumber_insert_params_sql_plan/ResultParamsDyNumber",
-            "reads": [
-                {
-                    "lookup_by": [
-                        "Key"
-                    ],
-                    "type": "Lookup"
-                }
-            ],
             "writes": [
                 {
                     "columns": [
                         "Key",
                         "Value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_explain.script-script_/explain.script.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_explain.script-script_/explain.script.plan
index c57e7aca54b5..0faa53fd98e5 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_explain.script-script_/explain.script.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_explain.script-script_/explain.script.plan
@@ -519,27 +519,23 @@
                 "PlanNodeType": "Query",
                 "Plans": [
                     {
-                        "Node Type": "Effect",
+                        "Node Type": "Sink",
                         "PlanNodeId": 2,
                         "Plans": [
                             {
-                                "CTE Name": "precompute_0_0",
-                                "Node Type": "Upsert-ConstantExpr",
+                                "Node Type": "ConstantExpr-Sink",
                                 "Operators": [
                                     {
-                                        "Inputs": [
-                                            {
-                                                "InternalOperatorId": 1
-                                            }
-                                        ],
-                                        "Name": "Upsert",
-                                        "Path": "/local/base_explain_script_script/ScriptingTest",
-                                        "Table": "base_explain_script_script/ScriptingTest"
+                                        "Inputs": [],
+                                        "Iterator": "[{Key: 3,Value: \"Three\"},{Key: 4,Value: \"Four\"}]",
+                                        "Name": "Iterator"
                                     },
                                     {
                                         "Inputs": [],
-                                        "Iterator": "precompute_0_0",
-                                        "Name": "Iterator"
+                                        "Name": "Replace",
+                                        "Path": "/local/base_explain_script_script/ScriptingTest",
+                                        "SinkType": "KqpTableSink",
+                                        "Table": "base_explain_script_script/ScriptingTest"
                                     }
                                 ],
                                 "PlanNodeId": 1,
@@ -563,7 +559,7 @@
                                 "Key",
                                 "Value"
                             ],
-                            "type": "MultiUpsert"
+                            "type": "MultiReplace"
                         }
                     ]
                 }
@@ -575,27 +571,23 @@
                 "PlanNodeType": "Query",
                 "Plans": [
                     {
-                        "Node Type": "Effect",
+                        "Node Type": "Sink",
                         "PlanNodeId": 2,
                         "Plans": [
                             {
-                                "CTE Name": "precompute_0_0",
-                                "Node Type": "Upsert-ConstantExpr",
+                                "Node Type": "ConstantExpr-Sink",
                                 "Operators": [
                                     {
-                                        "Inputs": [
-                                            {
-                                                "InternalOperatorId": 1
-                                            }
-                                        ],
-                                        "Name": "Upsert",
-                                        "Path": "/local/base_explain_script_script/ScriptingTest",
-                                        "Table": "base_explain_script_script/ScriptingTest"
+                                        "Inputs": [],
+                                        "Iterator": "[{Key: 1,Value: \"One\"},{Key: 2,Value: \"Two\"}]",
+                                        "Name": "Iterator"
                                     },
                                     {
                                         "Inputs": [],
-                                        "Iterator": "precompute_0_0",
-                                        "Name": "Iterator"
+                                        "Name": "Replace",
+                                        "Path": "/local/base_explain_script_script/ScriptingTest",
+                                        "SinkType": "KqpTableSink",
+                                        "Table": "base_explain_script_script/ScriptingTest"
                                     }
                                 ],
                                 "PlanNodeId": 1,
@@ -619,7 +611,7 @@
                                 "Key",
                                 "Value"
                             ],
-                            "type": "MultiUpsert"
+                            "type": "MultiReplace"
                         }
                     ]
                 }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_join_group_by_lookup.script-script_/join_group_by_lookup.script.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_join_group_by_lookup.script-script_/join_group_by_lookup.script.plan
index b0bfc9915f5c..fa973cd0756c 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_join_group_by_lookup.script-script_/join_group_by_lookup.script.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_join_group_by_lookup.script-script_/join_group_by_lookup.script.plan
@@ -294,27 +294,23 @@
                 "PlanNodeType": "Query",
                 "Plans": [
                     {
-                        "Node Type": "Effect",
+                        "Node Type": "Sink",
                         "PlanNodeId": 2,
                         "Plans": [
                             {
-                                "CTE Name": "precompute_0_0",
-                                "Node Type": "Upsert-ConstantExpr",
+                                "Node Type": "ConstantExpr-Sink",
                                 "Operators": [
                                     {
-                                        "Inputs": [
-                                            {
-                                                "InternalOperatorId": 1
-                                            }
-                                        ],
-                                        "Name": "Upsert",
-                                        "Path": "/local/base_join_group_by_lookup_script_script/Temp",
-                                        "Table": "base_join_group_by_lookup_script_script/Temp"
+                                        "Inputs": [],
+                                        "Iterator": "[{Group: 1,Value: \"One\"},{Group: 3,Value: \"Three\"}]",
+                                        "Name": "Iterator"
                                     },
                                     {
                                         "Inputs": [],
-                                        "Iterator": "precompute_0_0",
-                                        "Name": "Iterator"
+                                        "Name": "Replace",
+                                        "Path": "/local/base_join_group_by_lookup_script_script/Temp",
+                                        "SinkType": "KqpTableSink",
+                                        "Table": "base_join_group_by_lookup_script_script/Temp"
                                     }
                                 ],
                                 "PlanNodeId": 1,
@@ -338,7 +334,7 @@
                                 "Group",
                                 "Value"
                             ],
-                            "type": "MultiUpsert"
+                            "type": "MultiReplace"
                         }
                     ]
                 }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_from_table.sql-plan_/json_insert_from_table.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_from_table.sql-plan_/json_insert_from_table.sql.plan
index a38f5dd1ff77..3422943b64c2 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_from_table.sql-plan_/json_insert_from_table.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_from_table.sql-plan_/json_insert_from_table.sql.plan
@@ -21,21 +21,13 @@
         },
         {
             "name": "/local/base_json_insert_from_table_sql_plan/ResultTableJD",
-            "reads": [
-                {
-                    "lookup_by": [
-                        "Key"
-                    ],
-                    "type": "Lookup"
-                }
-            ],
             "writes": [
                 {
                     "columns": [
                         "Key",
                         "Value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_literal.sql-plan_/json_insert_literal.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_literal.sql-plan_/json_insert_literal.sql.plan
index 1324aa83b6c6..e2b336b31c87 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_literal.sql-plan_/json_insert_literal.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_literal.sql-plan_/json_insert_literal.sql.plan
@@ -6,21 +6,13 @@
     "tables": [
         {
             "name": "/local/base_json_insert_literal_sql_plan/ResultLiteralJD",
-            "reads": [
-                {
-                    "lookup_by": [
-                        "Key"
-                    ],
-                    "type": "Lookup"
-                }
-            ],
             "writes": [
                 {
                     "columns": [
                         "Key",
                         "Value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_params.sql-plan_/json_insert_params.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_params.sql-plan_/json_insert_params.sql.plan
index 12d03175a1f8..802cd64665dc 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_params.sql-plan_/json_insert_params.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_json_insert_params.sql-plan_/json_insert_params.sql.plan
@@ -6,21 +6,13 @@
     "tables": [
         {
             "name": "/local/base_json_insert_params_sql_plan/ResultParamsJD",
-            "reads": [
-                {
-                    "lookup_by": [
-                        "Key"
-                    ],
-                    "type": "Lookup"
-                }
-            ],
             "writes": [
                 {
                     "columns": [
                         "Key",
                         "Value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_simple_ct.script-script_/simple_ct.script.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_simple_ct.script-script_/simple_ct.script.plan
index a3f28f505fd8..10512bcaaa79 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_simple_ct.script-script_/simple_ct.script.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_simple_ct.script-script_/simple_ct.script.plan
@@ -10,27 +10,23 @@
                 "PlanNodeType": "Query",
                 "Plans": [
                     {
-                        "Node Type": "Effect",
+                        "Node Type": "Sink",
                         "PlanNodeId": 2,
                         "Plans": [
                             {
-                                "CTE Name": "precompute_0_0",
-                                "Node Type": "Upsert-ConstantExpr",
+                                "Node Type": "ConstantExpr-Sink",
                                 "Operators": [
                                     {
-                                        "Inputs": [
-                                            {
-                                                "InternalOperatorId": 1
-                                            }
-                                        ],
-                                        "Name": "Upsert",
-                                        "Path": "/local/base_simple_ct_script_script/Questions",
-                                        "Table": "base_simple_ct_script_script/Questions"
+                                        "Inputs": [],
+                                        "Iterator": "[{idx: 1,text: \"to do or not to do\"}]",
+                                        "Name": "Iterator"
                                     },
                                     {
                                         "Inputs": [],
-                                        "Iterator": "precompute_0_0",
-                                        "Name": "Iterator"
+                                        "Name": "Upsert",
+                                        "Path": "/local/base_simple_ct_script_script/Questions",
+                                        "SinkType": "KqpTableSink",
+                                        "Table": "base_simple_ct_script_script/Questions"
                                     }
                                 ],
                                 "PlanNodeId": 1,
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_table_types.script-script_/table_types.script.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_table_types.script-script_/table_types.script.plan
index c09de3f8757c..4f05136f0ad5 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_table_types.script-script_/table_types.script.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_table_types.script-script_/table_types.script.plan
@@ -135,27 +135,23 @@
                 "PlanNodeType": "Query",
                 "Plans": [
                     {
-                        "Node Type": "Effect",
+                        "Node Type": "Sink",
                         "PlanNodeId": 2,
                         "Plans": [
                             {
-                                "CTE Name": "precompute_0_0",
-                                "Node Type": "Upsert-ConstantExpr",
+                                "Node Type": "ConstantExpr-Sink",
                                 "Operators": [
                                     {
-                                        "Inputs": [
-                                            {
-                                                "InternalOperatorId": 1
-                                            }
-                                        ],
-                                        "Name": "Upsert",
-                                        "Path": "/local/base_table_types_script_script/TableTypes",
-                                        "Table": "base_table_types_script_script/TableTypes"
+                                        "Inputs": [],
+                                        "Iterator": "[{Key: \"Key\",Value01: \"true\",Value02: 1,Value03: -1,Value04: 2,Value05: -2,Value06: 3,Value07: \"4.5\",Value08: Minus,Value09: \"3.14\",Value10: DyNumber,Value21: \"\\u041F\\u0440\\u0438\\u0432\\u0435\\u0442\",Value22: \"{\\\"name\\\": \\\"George\\\", \\\"age\\\": 23}\",Value23: JsonDocument,Value24: \"{a=1; b=2}\",Value31: Apply,Value32: Apply,Value33: Apply,Value34: Apply}]",
+                                        "Name": "Iterator"
                                     },
                                     {
                                         "Inputs": [],
-                                        "Iterator": "precompute_0_0",
-                                        "Name": "Iterator"
+                                        "Name": "Replace",
+                                        "Path": "/local/base_table_types_script_script/TableTypes",
+                                        "SinkType": "KqpTableSink",
+                                        "Table": "base_table_types_script_script/TableTypes"
                                     }
                                 ],
                                 "PlanNodeId": 1,
@@ -196,7 +192,7 @@
                                 "Value33",
                                 "Value34"
                             ],
-                            "type": "MultiUpsert"
+                            "type": "MultiReplace"
                         }
                     ]
                 }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_insert.sql-plan_/write_insert.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_insert.sql-plan_/write_insert.sql.plan
index d9b00b71fdfc..f6a5f6b88beb 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_insert.sql-plan_/write_insert.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_insert.sql-plan_/write_insert.sql.plan
@@ -6,15 +6,6 @@
     "tables": [
         {
             "name": "/local/base_write_insert_sql_plan/Input",
-            "reads": [
-                {
-                    "lookup_by": [
-                        "key",
-                        "subkey"
-                    ],
-                    "type": "Lookup"
-                }
-            ],
             "writes": [
                 {
                     "columns": [
@@ -22,7 +13,7 @@
                         "subkey",
                         "value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         },
@@ -41,13 +32,6 @@
                         "Name (-\u221e, +\u221e)"
                     ],
                     "type": "Scan"
-                },
-                {
-                    "lookup_by": [
-                        "Group",
-                        "Name"
-                    ],
-                    "type": "Lookup"
                 }
             ],
             "writes": [
@@ -57,7 +41,7 @@
                         "Group",
                         "Name"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_insert_revert.sql-plan_/write_insert_revert.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_insert_revert.sql-plan_/write_insert_revert.sql.plan
index 586f7e00d290..3b4d0c4d679c 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_insert_revert.sql-plan_/write_insert_revert.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_insert_revert.sql-plan_/write_insert_revert.sql.plan
@@ -22,7 +22,7 @@
                         "subkey",
                         "value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         },
@@ -44,7 +44,7 @@
                         "Group",
                         "Name"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiInsert"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_usage.script-script_/write_multi_usage.script.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_usage.script-script_/write_multi_usage.script.plan
index 8c8f361d05b9..d47da6224a7e 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_usage.script-script_/write_multi_usage.script.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_usage.script-script_/write_multi_usage.script.plan
@@ -65,6 +65,7 @@
                                                                     "Name (-\u221e, +\u221e)"
                                                                 ],
                                                                 "ReadRangesPointPrefixLen": "0",
+                                                                "Reverse": false,
                                                                 "Scan": "Sequential",
                                                                 "Table": "base_write_multi_usage_script_script/Temp"
                                                             }
@@ -144,6 +145,7 @@
                                                                     "Name (-\u221e, +\u221e)"
                                                                 ],
                                                                 "ReadRangesPointPrefixLen": "0",
+                                                                "Reverse": false,
                                                                 "Scan": "Sequential",
                                                                 "Table": "base_write_multi_usage_script_script/Input1"
                                                             }
@@ -214,98 +216,30 @@
                 "PlanNodeType": "Query",
                 "Plans": [
                     {
-                        "Node Type": "Effect",
-                        "PlanNodeId": 12,
+                        "Node Type": "Sink",
+                        "PlanNodeId": 7,
                         "Plans": [
                             {
-                                "CTE Name": "precompute_0_1",
-                                "Node Type": "Upsert-ConstantExpr",
+                                "Node Type": "Stage-Sink",
                                 "Operators": [
                                     {
-                                        "Inputs": [
-                                            {
-                                                "InternalOperatorId": 1
-                                            }
-                                        ],
+                                        "Inputs": [],
                                         "Name": "Upsert",
                                         "Path": "/local/base_write_multi_usage_script_script/Temp",
+                                        "SinkType": "KqpTableSink",
                                         "Table": "base_write_multi_usage_script_script/Temp"
-                                    },
-                                    {
-                                        "Inputs": [],
-                                        "Iterator": "precompute_0_1",
-                                        "Name": "Iterator"
                                     }
                                 ],
-                                "PlanNodeId": 11,
-                                "Tables": [
-                                    "base_write_multi_usage_script_script/Temp"
-                                ]
-                            }
-                        ]
-                    },
-                    {
-                        "Node Type": "Effect",
-                        "PlanNodeId": 10,
-                        "Plans": [
-                            {
-                                "CTE Name": "precompute_0_0",
-                                "Node Type": "Delete-ConstantExpr",
-                                "Operators": [
-                                    {
-                                        "Inputs": [
-                                            {
-                                                "InternalOperatorId": 1
-                                            }
-                                        ],
-                                        "Name": "Delete",
-                                        "Path": "/local/base_write_multi_usage_script_script/Input1",
-                                        "Table": "base_write_multi_usage_script_script/Input1"
-                                    },
-                                    {
-                                        "Inputs": [],
-                                        "Iterator": "precompute_0_0",
-                                        "Name": "Iterator"
-                                    }
-                                ],
-                                "PlanNodeId": 9,
-                                "Tables": [
-                                    "base_write_multi_usage_script_script/Input1"
-                                ]
-                            }
-                        ]
-                    },
-                    {
-                        "Node Type": "Precompute_0_0",
-                        "Parent Relationship": "InitPlan",
-                        "PlanNodeId": 7,
-                        "PlanNodeType": "Materialize",
-                        "Plans": [
-                            {
-                                "Node Type": "Stage",
-                                "PlanNodeId": 6
-                            }
-                        ],
-                        "Subplan Name": "CTE precompute_0_0"
-                    },
-                    {
-                        "Node Type": "Precompute_0_1",
-                        "Parent Relationship": "InitPlan",
-                        "PlanNodeId": 5,
-                        "PlanNodeType": "Materialize",
-                        "Plans": [
-                            {
-                                "Node Type": "Collect",
-                                "PlanNodeId": 4,
+                                "PlanNodeId": 6,
                                 "Plans": [
                                     {
                                         "Node Type": "UnionAll",
-                                        "PlanNodeId": 3,
+                                        "PlanNodeId": 5,
                                         "PlanNodeType": "Connection",
                                         "Plans": [
                                             {
                                                 "Node Type": "Stage",
-                                                "PlanNodeId": 2,
+                                                "PlanNodeId": 4,
                                                 "Plans": [
                                                     {
                                                         "Node Type": "TableRangeScan",
@@ -325,7 +259,7 @@
                                                                 "Table": "base_write_multi_usage_script_script/Input1"
                                                             }
                                                         ],
-                                                        "PlanNodeId": 1,
+                                                        "PlanNodeId": 3,
                                                         "Tables": [
                                                             "base_write_multi_usage_script_script/Input1"
                                                         ]
@@ -334,10 +268,39 @@
                                             }
                                         ]
                                     }
+                                ],
+                                "Tables": [
+                                    "base_write_multi_usage_script_script/Temp"
+                                ]
+                            }
+                        ]
+                    },
+                    {
+                        "Node Type": "Sink",
+                        "PlanNodeId": 2,
+                        "Plans": [
+                            {
+                                "Node Type": "ConstantExpr-Sink",
+                                "Operators": [
+                                    {
+                                        "Inputs": [],
+                                        "Iterator": "[{Group: 1,Name: ToString}]",
+                                        "Name": "Iterator"
+                                    },
+                                    {
+                                        "Inputs": [],
+                                        "Name": "Delete",
+                                        "Path": "/local/base_write_multi_usage_script_script/Input1",
+                                        "SinkType": "KqpTableSink",
+                                        "Table": "base_write_multi_usage_script_script/Input1"
+                                    }
+                                ],
+                                "PlanNodeId": 1,
+                                "Tables": [
+                                    "base_write_multi_usage_script_script/Input1"
                                 ]
                             }
-                        ],
-                        "Subplan Name": "CTE precompute_0_1"
+                        ]
                     }
                 ],
                 "Stats": {
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_usage_key.script-script_/write_multi_usage_key.script.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_usage_key.script-script_/write_multi_usage_key.script.plan
index 2f5f92230673..073b8bb49d0b 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_usage_key.script-script_/write_multi_usage_key.script.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_usage_key.script-script_/write_multi_usage_key.script.plan
@@ -104,44 +104,20 @@
                 "PlanNodeType": "Query",
                 "Plans": [
                     {
-                        "Node Type": "Effect",
-                        "PlanNodeId": 8,
+                        "Node Type": "Sink",
+                        "PlanNodeId": 5,
                         "Plans": [
                             {
-                                "CTE Name": "precompute_0_0",
-                                "Node Type": "Upsert-ConstantExpr",
+                                "Node Type": "Stage-Sink",
                                 "Operators": [
                                     {
-                                        "Inputs": [
-                                            {
-                                                "InternalOperatorId": 1
-                                            }
-                                        ],
+                                        "Inputs": [],
                                         "Name": "Upsert",
                                         "Path": "/local/base_write_multi_usage_key_script_script/Temp",
+                                        "SinkType": "KqpTableSink",
                                         "Table": "base_write_multi_usage_key_script_script/Temp"
-                                    },
-                                    {
-                                        "Inputs": [],
-                                        "Iterator": "precompute_0_0",
-                                        "Name": "Iterator"
                                     }
                                 ],
-                                "PlanNodeId": 7,
-                                "Tables": [
-                                    "base_write_multi_usage_key_script_script/Temp"
-                                ]
-                            }
-                        ]
-                    },
-                    {
-                        "Node Type": "Precompute_0",
-                        "Parent Relationship": "InitPlan",
-                        "PlanNodeId": 5,
-                        "PlanNodeType": "Materialize",
-                        "Plans": [
-                            {
-                                "Node Type": "Collect",
                                 "PlanNodeId": 4,
                                 "Plans": [
                                     {
@@ -193,10 +169,12 @@
                                             }
                                         ]
                                     }
+                                ],
+                                "Tables": [
+                                    "base_write_multi_usage_key_script_script/Temp"
                                 ]
                             }
-                        ],
-                        "Subplan Name": "CTE precompute_0_0"
+                        ]
                     }
                 ],
                 "Stats": {
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_write.sql-plan_/write_multi_write.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_write.sql-plan_/write_multi_write.sql.plan
index 841dfdec96d8..c95d86b6795b 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_write.sql-plan_/write_multi_write.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_multi_write.sql-plan_/write_multi_write.sql.plan
@@ -9,7 +9,6 @@
             "writes": [
                 {
                     "columns": [
-                        "Amount",
                         "Comment",
                         "Group",
                         "Name"
@@ -17,18 +16,19 @@
                     "type": "MultiUpsert"
                 },
                 {
-                    "columns": [
-                        "Comment",
-                        "Group",
-                        "Name"
-                    ],
-                    "type": "MultiUpsert"
+                    "type": "MultiErase"
                 },
                 {
                     "type": "MultiErase"
                 },
                 {
-                    "type": "MultiErase"
+                    "columns": [
+                        "Amount",
+                        "Comment",
+                        "Group",
+                        "Name"
+                    ],
+                    "type": "MultiReplace"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_replace.sql-plan_/write_replace.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_replace.sql-plan_/write_replace.sql.plan
index cd2b46dbe89c..5c028acd1cb8 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_replace.sql-plan_/write_replace.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_replace.sql-plan_/write_replace.sql.plan
@@ -26,7 +26,7 @@
                         "subkey",
                         "value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiReplace"
                 }
             ]
         },
@@ -40,7 +40,7 @@
                         "Group",
                         "Name"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiReplace"
                 },
                 {
                     "columns": [
@@ -49,7 +49,7 @@
                         "Group",
                         "Name"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiReplace"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_update.sql-plan_/write_update.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_update.sql-plan_/write_update.sql.plan
index ce96e820d33b..257d7e1c1634 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_update.sql-plan_/write_update.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_update.sql-plan_/write_update.sql.plan
@@ -26,8 +26,8 @@
                 {
                     "columns": [
                         "Amount",
-                        "Name",
-                        "Group"
+                        "Group",
+                        "Name"
                     ],
                     "type": "MultiUpsert"
                 }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_update_on.sql-plan_/write_update_on.sql.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_update_on.sql-plan_/write_update_on.sql.plan
index 9574e68bdd9a..06b591ec55f5 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_update_on.sql-plan_/write_update_on.sql.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_update_on.sql-plan_/write_update_on.sql.plan
@@ -6,19 +6,6 @@
     "tables": [
         {
             "name": "/local/base_write_update_on_sql_plan/Input",
-            "reads": [
-                {
-                    "columns": [
-                        "key",
-                        "subkey"
-                    ],
-                    "lookup_by": [
-                        "key",
-                        "subkey"
-                    ],
-                    "type": "Lookup"
-                }
-            ],
             "writes": [
                 {
                     "columns": [
@@ -26,7 +13,7 @@
                         "subkey",
                         "value"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiUpdate"
                 }
             ]
         },
@@ -46,17 +33,6 @@
                         "Name (-\u221e, +\u221e)"
                     ],
                     "type": "Scan"
-                },
-                {
-                    "columns": [
-                        "Group",
-                        "Name"
-                    ],
-                    "lookup_by": [
-                        "Group",
-                        "Name"
-                    ],
-                    "type": "Lookup"
                 }
             ],
             "writes": [
@@ -66,7 +42,7 @@
                         "Group",
                         "Name"
                     ],
-                    "type": "MultiUpsert"
+                    "type": "MultiUpdate"
                 }
             ]
         }
diff --git a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_write_group_by.script-script_/write_write_group_by.script.plan b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_write_group_by.script-script_/write_write_group_by.script.plan
index 34538f0c81ef..64e854f08dad 100644
--- a/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_write_group_by.script-script_/write_write_group_by.script.plan
+++ b/ydb/tests/functional/canonical/canondata/test_sql.TestCanonicalFolder1.test_case_write_write_group_by.script-script_/write_write_group_by.script.plan
@@ -106,44 +106,20 @@
                 "PlanNodeType": "Query",
                 "Plans": [
                     {
-                        "Node Type": "Effect",
-                        "PlanNodeId": 10,
+                        "Node Type": "Sink",
+                        "PlanNodeId": 7,
                         "Plans": [
                             {
-                                "CTE Name": "precompute_0_0",
-                                "Node Type": "Upsert-ConstantExpr",
+                                "Node Type": "Stage-Sink",
                                 "Operators": [
                                     {
-                                        "Inputs": [
-                                            {
-                                                "InternalOperatorId": 1
-                                            }
-                                        ],
+                                        "Inputs": [],
                                         "Name": "Upsert",
                                         "Path": "/local/base_write_write_group_by_script_script/Temp",
+                                        "SinkType": "KqpTableSink",
                                         "Table": "base_write_write_group_by_script_script/Temp"
-                                    },
-                                    {
-                                        "Inputs": [],
-                                        "Iterator": "precompute_0_0",
-                                        "Name": "Iterator"
                                     }
                                 ],
-                                "PlanNodeId": 9,
-                                "Tables": [
-                                    "base_write_write_group_by_script_script/Temp"
-                                ]
-                            }
-                        ]
-                    },
-                    {
-                        "Node Type": "Precompute_0",
-                        "Parent Relationship": "InitPlan",
-                        "PlanNodeId": 7,
-                        "PlanNodeType": "Materialize",
-                        "Plans": [
-                            {
-                                "Node Type": "Collect",
                                 "PlanNodeId": 6,
                                 "Plans": [
                                     {
@@ -224,10 +200,12 @@
                                             }
                                         ]
                                     }
+                                ],
+                                "Tables": [
+                                    "base_write_write_group_by_script_script/Temp"
                                 ]
                             }
-                        ],
-                        "Subplan Name": "CTE precompute_0_0"
+                        ]
                     }
                 ],
                 "Stats": {
diff --git a/ydb/tests/functional/clickbench/canondata/test.test_plans_column_/queries-original-plan-column-0 b/ydb/tests/functional/clickbench/canondata/test.test_plans_column_/queries-original-plan-column-0
index 2626baeb227f..55e2200cc82c 100644
--- a/ydb/tests/functional/clickbench/canondata/test.test_plans_column_/queries-original-plan-column-0
+++ b/ydb/tests/functional/clickbench/canondata/test.test_plans_column_/queries-original-plan-column-0
@@ -79,7 +79,9 @@
                                                         "Inputs": [],
                                                         "Name": "TableFullScan",
                                                         "Path": "/local/clickbench/plans/column/hits",
-                                                        "ReadColumns": null,
+                                                        "ReadColumns": [
+                                                            "CounterID"
+                                                        ],
                                                         "ReadRanges": [
                                                             "CounterID (-\u221e, +\u221e)",
                                                             "EventDate (-\u221e, +\u221e)",
@@ -141,6 +143,9 @@
                     "name": "/local/clickbench/plans/column/hits",
                     "reads": [
                         {
+                            "columns": [
+                                "CounterID"
+                            ],
                             "scan_by": [
                                 "CounterID (-\u221e, +\u221e)",
                                 "EventDate (-\u221e, +\u221e)",
diff --git a/ydb/tests/functional/clickbench/canondata/test.test_plans_column_/queries-original-plan-column-40 b/ydb/tests/functional/clickbench/canondata/test.test_plans_column_/queries-original-plan-column-40
index a87ce4a6ce60..600be0f4a4ce 100644
--- a/ydb/tests/functional/clickbench/canondata/test.test_plans_column_/queries-original-plan-column-40
+++ b/ydb/tests/functional/clickbench/canondata/test.test_plans_column_/queries-original-plan-column-40
@@ -107,7 +107,7 @@
                                                                                             }
                                                                                         ],
                                                                                         "Name": "Filter",
-                                                                                        "Predicate": "IsRefresh == 0 AND TraficSourceID == -1 OR TraficSourceID == 6 AND RefererHash == 3594120000172545465",
+                                                                                        "Predicate": "IsRefresh == 0 AND RefererHash == 3594120000172545465 AND TraficSourceID == -1 OR TraficSourceID == 6",
                                                                                         "Pushdown": "True"
                                                                                     },
                                                                                     {
@@ -169,7 +169,7 @@
                                                                                                             "Id": 108
                                                                                                         },
                                                                                                         "Constant": {
-                                                                                                            "Int32": -1
+                                                                                                            "Int64": 3594120000172545465
                                                                                                         }
                                                                                                     }
                                                                                                 },
@@ -181,7 +181,7 @@
                                                                                                         "Function": {
                                                                                                             "Arguments": [
                                                                                                                 {
-                                                                                                                    "Id": 38
+                                                                                                                    "Id": 103
                                                                                                                 },
                                                                                                                 {
                                                                                                                     "Id": 108
@@ -199,7 +199,7 @@
                                                                                                             "Id": 110
                                                                                                         },
                                                                                                         "Constant": {
-                                                                                                            "Int32": 6
+                                                                                                            "Int32": -1
                                                                                                         }
                                                                                                     }
                                                                                                 },
@@ -228,28 +228,28 @@
                                                                                                         "Column": {
                                                                                                             "Id": 112
                                                                                                         },
+                                                                                                        "Constant": {
+                                                                                                            "Int32": 6
+                                                                                                        }
+                                                                                                    }
+                                                                                                },
+                                                                                                {
+                                                                                                    "Assign": {
+                                                                                                        "Column": {
+                                                                                                            "Id": 113
+                                                                                                        },
                                                                                                         "Function": {
                                                                                                             "Arguments": [
                                                                                                                 {
-                                                                                                                    "Id": 109
+                                                                                                                    "Id": 38
                                                                                                                 },
                                                                                                                 {
-                                                                                                                    "Id": 111
+                                                                                                                    "Id": 112
                                                                                                                 }
                                                                                                             ],
                                                                                                             "FunctionType": 2,
                                                                                                             "KernelIdx": 3,
-                                                                                                            "YqlOperationId": 1
-                                                                                                        }
-                                                                                                    }
-                                                                                                },
-                                                                                                {
-                                                                                                    "Assign": {
-                                                                                                        "Column": {
-                                                                                                            "Id": 113
-                                                                                                        },
-                                                                                                        "Constant": {
-                                                                                                            "Int64": 3594120000172545465
+                                                                                                            "YqlOperationId": 11
                                                                                                         }
                                                                                                     }
                                                                                                 },
@@ -261,7 +261,7 @@
                                                                                                         "Function": {
                                                                                                             "Arguments": [
                                                                                                                 {
-                                                                                                                    "Id": 103
+                                                                                                                    "Id": 111
                                                                                                                 },
                                                                                                                 {
                                                                                                                     "Id": 113
@@ -269,7 +269,7 @@
                                                                                                             ],
                                                                                                             "FunctionType": 2,
                                                                                                             "KernelIdx": 4,
-                                                                                                            "YqlOperationId": 11
+                                                                                                            "YqlOperationId": 1
                                                                                                         }
                                                                                                     }
                                                                                                 },
@@ -281,7 +281,7 @@
                                                                                                         "Function": {
                                                                                                             "Arguments": [
                                                                                                                 {
-                                                                                                                    "Id": 112
+                                                                                                                    "Id": 109
                                                                                                                 },
                                                                                                                 {
                                                                                                                     "Id": 114
diff --git a/ydb/tests/functional/compatibility/test_stress.py b/ydb/tests/functional/compatibility/test_stress.py
new file mode 100644
index 000000000000..a6e6ca250004
--- /dev/null
+++ b/ydb/tests/functional/compatibility/test_stress.py
@@ -0,0 +1,365 @@
+# -*- coding: utf-8 -*-
+import os
+
+import pytest
+
+import yatest
+
+from ydb.tests.library.harness.kikimr_runner import KiKiMR
+from ydb.tests.library.harness.kikimr_config import KikimrConfigGenerator
+from ydb.tests.library.harness.param_constants import kikimr_driver_path
+from ydb.tests.library.common.types import Erasure
+from ydb.tests.stress.simple_queue.workload import Workload
+
+last_stable_binary_path = yatest.common.binary_path("ydb/tests/library/compatibility/ydbd-last-stable")
+current_binary_path = kikimr_driver_path()
+
+all_binary_combinations = [
+    [last_stable_binary_path],
+    [current_binary_path],
+    [last_stable_binary_path, current_binary_path],
+]
+all_binary_combinations_ids = ["last_stable", "current", "mixed"]
+
+
+class TestStress(object):
+    @pytest.fixture(autouse=True, params=all_binary_combinations, ids=all_binary_combinations_ids)
+    def setup(self, request):
+        binary_paths = request.param
+        self.config = KikimrConfigGenerator(
+            erasure=Erasure.MIRROR_3_DC,
+            binary_paths=binary_paths,
+            # uncomment for 64 datetime in tpc-h/tpc-ds
+            # extra_feature_flags={"enable_table_datetime64": True},
+        )
+
+        self.cluster = KiKiMR(self.config)
+        self.cluster.start()
+        self.endpoint = "%s:%s" % (self.cluster.nodes[1].host, self.cluster.nodes[1].port)
+        output_path = yatest.common.test_output_path()
+        self.output_f = open(os.path.join(output_path, "out.log"), "w")
+        yield
+        self.cluster.stop()
+
+    def get_command_prefix_log(self, subcmds: list[str], path: str) -> list[str]:
+        return (
+            [
+                yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+                "--verbose",
+                "--endpoint",
+                "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+                "--database=/Root",
+                "workload",
+                "log",
+            ]
+            + subcmds
+            + ["--path", path]
+        )
+
+    def set_auto_partitioning_size_mb(self, path, size_mb):
+        yatest.common.execute(
+            [
+                yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+                "--verbose",
+                "--endpoint",
+                "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+                "--database=/Root",
+                "sql", "-s",
+                "ALTER TABLE `{}` SET (AUTO_PARTITIONING_PARTITION_SIZE_MB={})".format(path, size_mb),
+            ],
+            stdout=self.output_f,
+            stderr=self.output_f,
+        )
+
+    @pytest.mark.parametrize("store_type", ["row"])
+    def test_log(self, store_type):
+        timeout_scale = 60
+
+        upload_commands = [
+            # bulk upsert workload
+            self.get_command_prefix_log(subcmds=["run", "bulk_upsert"], path=store_type)
+            + ["--seconds", str(timeout_scale), "--threads", "10", "--rows", "2000"],
+            # upsert workload
+            self.get_command_prefix_log(subcmds=["run", "upsert"], path=store_type)
+            + ["--seconds", str(timeout_scale), "--threads", "10"],
+            # insert workload
+            self.get_command_prefix_log(subcmds=["run", "insert"], path=store_type)
+            + ["--seconds", str(timeout_scale), "--threads", "10"],
+        ]
+        # init
+        yatest.common.execute(
+            self.get_command_prefix_log(subcmds=["init"], path=store_type)
+            + [
+                "--store",
+                store_type,
+                "--min-partitions",
+                "100",
+                "--partition-size",
+                "10",
+                "--auto-partition",
+                "0",
+                "--ttl",
+                "10",
+            ],
+            stdout=self.output_f,
+            stderr=self.output_f,
+        )
+
+        yatest.common.execute(
+            self.get_command_prefix_log(subcmds=["import", "--bulk-size", "1000", "-t", "1", "generator"], path=store_type),
+            stdout=self.output_f,
+            stderr=self.output_f,
+            wait=True,
+        )
+        select = yatest.common.execute(
+            self.get_command_prefix_log(subcmds=["run", "select"], path=store_type)
+            + [
+                "--client-timeout",
+                "10000",
+                "--threads",
+                "10",
+                "--seconds",
+                str(timeout_scale * len(upload_commands)),
+            ],
+            wait=False,
+            stdout=self.output_f,
+            stderr=self.output_f,
+        )
+
+        for i, command in enumerate(upload_commands):
+            yatest.common.execute(
+                command,
+                wait=True,
+                stdout=self.output_f,
+                stderr=self.output_f,
+            )
+
+        select.wait()
+
+    @pytest.mark.skip(reason="Too huge logs")
+    @pytest.mark.parametrize("mode", ["row"])
+    def test_simple_queue(self, mode: str):
+        with Workload(f"grpc://localhost:{self.cluster.nodes[1].grpc_port}", "/Root", 180, mode) as workload:
+            for handle in workload.loop():
+                handle()
+
+    @pytest.mark.parametrize("store_type", ["row"])
+    def test_kv(self, store_type):
+        init_command_prefix = [
+            yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+            "--verbose",
+            "--endpoint",
+            "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+            "--database=/Root",
+            "workload",
+            "kv",
+            "init",
+            "--min-partitions",
+            "10",
+            "--partition-size",
+            "10",
+            "--auto-partition",
+            "0",
+            "--init-upserts",
+            "0",
+            "--cols",
+            "5",
+            "--int-cols",
+            "2",
+            "--key-cols",
+            "3",
+        ]
+
+        run_command_prefix = [
+            yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+            "--verbose",
+            "--endpoint",
+            "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+            "--database=/Root",
+            "workload",
+            "kv",
+            "run",
+            "mixed",
+            "--seconds",
+            "180",
+            "--threads",
+            "10",
+            "--cols",
+            "5",
+            "--len",
+            "200",
+            "--int-cols",
+            "2",
+            "--key-cols",
+            "3",
+        ]
+
+        init_command = init_command_prefix
+        init_command.extend(
+            [
+                "--path",
+                store_type,
+                "--store",
+                store_type,
+            ]
+        )
+        run_command = run_command_prefix
+        run_command.extend(
+            [
+                "--path",
+                store_type,
+            ]
+        )
+        yatest.common.execute(init_command, wait=True, stdout=self.output_f, stderr=self.output_f)
+        yatest.common.execute(run_command, wait=True, stdout=self.output_f, stderr=self.output_f)
+
+    @pytest.mark.parametrize("store_type", ["row"])
+    def test_tpch1(self, store_type):
+        init_command = [
+            yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+            "--verbose",
+            "--endpoint",
+            "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+            "--database=/Root",
+            "workload",
+            "tpch",
+            "-p",
+            "tpch",
+            "init",
+            "--store={}".format(store_type),
+            "--datetime",  # use 32 bit dates instead of 64 (not supported in 24-4)
+        ]
+        import_command = [
+            yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+            "--verbose",
+            "--endpoint",
+            "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+            "--database=/Root",
+            "workload",
+            "tpch",
+            "-p",
+            "tpch",
+            "import",
+            "generator",
+            "--scale=1",
+        ]
+        run_command = [
+            yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+            "--verbose",
+            "--endpoint",
+            "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+            "--database=/Root",
+            "workload",
+            "tpch",
+            "-p",
+            "tpch",
+            "run",
+            "--scale=1",
+            "--exclude",
+            # not working for row tables
+            "17",
+            "--check-canonical",
+        ]
+
+        yatest.common.execute(init_command, wait=True, stdout=self.output_f, stderr=self.output_f)
+
+        # make tables distributed across nodes
+        tables = [
+            "lineitem",
+            "nation",
+            "orders",
+            "part",
+            "partsupp",
+            "region",
+            "supplier",
+        ]
+        for table in tables:
+            self.set_auto_partitioning_size_mb("tpch/{}".format(table), 25)
+
+        yatest.common.execute(import_command, wait=True, stdout=self.output_f, stderr=self.output_f)
+        yatest.common.execute(run_command, wait=True, stdout=self.output_f, stderr=self.output_f)
+
+    @pytest.mark.skip(reason="Not stabilized yet")
+    @pytest.mark.parametrize("store_type", ["row"])
+    def test_tpcds1(self, store_type):
+        init_command = [
+            yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+            "--verbose",
+            "--endpoint",
+            "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+            "--database=/Root",
+            "workload",
+            "tpcds",
+            "-p",
+            "tpcds",
+
+            "init",
+            "--store={}".format(store_type),
+            "--datetime",  # use 32 bit dates instead of 64 (not supported in 24-4)
+        ]
+        import_command = [
+            yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+            "--verbose",
+            "--endpoint",
+            "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+            "--database=/Root",
+            "workload",
+            "tpcds",
+            "-p",
+            "tpcds",
+            "import",
+            "generator",
+            "--scale=1",
+        ]
+        run_command = [
+            yatest.common.binary_path(os.getenv("YDB_CLI_BINARY")),
+            "--verbose",
+            "--endpoint",
+            "grpc://localhost:%d" % self.cluster.nodes[1].grpc_port,
+            "--database=/Root",
+            "workload",
+            "tpcds",
+            "-p",
+            "tpcds",
+            "run",
+            "--scale=1",
+            "--check-canonical",
+            "--exclude",
+            # not working for row tables
+            "5,7,14,18,22,23,24,26,27,31,33,39,46,51,54,56,58,60,61,64,66,67,68,72,75,77,78,79,80,93",
+        ]
+
+        yatest.common.execute(init_command, wait=True, stdout=self.output_f, stderr=self.output_f)
+
+        # make table distributed across nodes
+        tables = [
+            "call_center",
+            "catalog_page",
+            "catalog_returns",
+            "catalog_sales",
+            "customer",
+            "customer_demographics",
+            "date_dim",
+            "household_demographics",
+            "income_band",
+            "inventory",
+            "item",
+            "promotion",
+            "reason",
+            "ship_mode",
+            "store",
+            "store_returns",
+            "store_sales",
+            "time_dim",
+            "warehouse",
+            "web_page",
+            "web_returns",
+            "web_sales",
+            "web_site",
+        ]
+
+        for table in tables:
+            self.set_auto_partitioning_size_mb("tpcds/{}".format(table), 25)
+
+        yatest.common.execute(import_command, wait=True, stdout=self.output_f, stderr=self.output_f)
+        yatest.common.execute(run_command, wait=True, stdout=self.output_f, stderr=self.output_f)
diff --git a/ydb/tests/functional/compatibility/ya.make b/ydb/tests/functional/compatibility/ya.make
index 0c9096aa3a5d..637be3ea2e58 100644
--- a/ydb/tests/functional/compatibility/ya.make
+++ b/ydb/tests/functional/compatibility/ya.make
@@ -1,21 +1,27 @@
 PY3TEST()
 ENV(YDB_DRIVER_BINARY="ydb/apps/ydbd/ydbd")
+ENV(YDB_CLI_BINARY="ydb/apps/ydb/ydb")
 
 TEST_SRCS(
     test_followers.py
     test_compatibility.py
+    test_stress.py
 )
 
 SIZE(LARGE)
+REQUIREMENTS(cpu:all)
+REQUIREMENTS(ram:all)
 INCLUDE(${ARCADIA_ROOT}/ydb/tests/large.inc)
 
 DEPENDS(
+    ydb/apps/ydb
     ydb/apps/ydbd
     ydb/tests/library/compatibility
 )
 
 PEERDIR(
     ydb/tests/library
+    ydb/tests/stress/simple_queue/workload
 )
 
 END()
diff --git a/ydb/tests/olap/ya.make b/ydb/tests/olap/ya.make
index 1689defbcf07..ceba4f136e81 100644
--- a/ydb/tests/olap/ya.make
+++ b/ydb/tests/olap/ya.make
@@ -5,6 +5,7 @@ PY3TEST()
 
     TEST_SRCS(
         test_quota_exhaustion.py
+        zip_bomb.py
     )
 
     IF (SANITIZER_TYPE OR WITH_VALGRIND)
diff --git a/ydb/tests/olap/zip_bomb.py b/ydb/tests/olap/zip_bomb.py
new file mode 100644
index 000000000000..a124c3a7ab9e
--- /dev/null
+++ b/ydb/tests/olap/zip_bomb.py
@@ -0,0 +1,125 @@
+import sys
+import time
+
+import ydb
+from threading import Thread
+from ydb.tests.library.harness.kikimr_config import KikimrConfigGenerator
+from ydb.tests.library.harness.kikimr_runner import KiKiMR
+from ydb.tests.library.harness.util import LogLevels
+
+ROWS_CHUNK_SIZE = 100000
+ROWS_CHUNKS_COUNT = 2
+
+
+class TestZipBomb(object):
+    @classmethod
+    def setup_class(cls):
+        cls.cluster = KiKiMR(KikimrConfigGenerator(
+            column_shard_config={},
+            additional_log_configs={'MEMORY_CONTROLLER': LogLevels.INFO, "TX_COLUMNSHARD": LogLevels.DEBUG},
+            extra_feature_flags={'enable_write_portions_on_insert': True},
+            static_pdisk_size=10 * 1024 * 1024,
+            dynamic_pdisk_size=5 * 1024 * 1024
+        ))
+        cls.cluster.start()
+
+    @classmethod
+    def teardown_class(cls):
+        cls.cluster.stop()
+
+    def make_session(self):
+        driver = ydb.Driver(endpoint=f'grpc://localhost:{self.cluster.nodes[1].grpc_port}', database=self.database_name)
+        session = ydb.QuerySessionPool(driver)
+        driver.wait(5, fail_fast=True)
+        return session
+
+    def create_test_str_table(self, session, table):
+        return session.execute_with_retries(f"""
+                CREATE TABLE `{table}` (
+                    k Int32 NOT NULL,
+                    v1 String,
+                    v2 String,
+                    v3 String,
+                    v4 String,
+                    v5 String,
+                    PRIMARY KEY (k)
+                ) WITH (STORE = COLUMN, AUTO_PARTITIONING_MIN_PARTITIONS_COUNT=1)
+            """)
+
+    def upsert_test_str_chunk(self, session, table, chunk_id, retries=10):
+        long_string = 'x' * 5000
+        return session.execute_with_retries(f"""
+                $n = {ROWS_CHUNK_SIZE};
+                $values_list = ListReplicate(42ul, $n);
+                $value = '{long_string}';
+                $rows_list = ListFoldMap($values_list, {chunk_id * ROWS_CHUNK_SIZE}, ($val, $i)->((<|k:$i, v1:$value||'1', v2:$value||'2', v3:$value||'3', v4:$value||'4', v5:$value||'5'|>, $i + 1)));
+
+                UPSERT INTO `{table}`
+                SELECT * FROM AS_TABLE($rows_list);
+            """, None, ydb.retries.RetrySettings(max_retries=retries))
+
+    def upsert_str(self, session, table):
+        for i in range(ROWS_CHUNKS_COUNT):
+            res = self.upsert_test_str_chunk(session, table, i, retries=0)
+            print(f"upsert #{i} ok, result:", res, file=sys.stderr)
+
+    def select(self, table, session):
+        result = session.execute_with_retries("""
+            SELECT
+                MAX(v1),
+                MAX(v2),
+                MAX(v3),
+                MAX(v4),
+                MAX(v5)
+            FROM huge
+        """)
+        print(result[0].rows, file=sys.stderr)
+
+    def get_rss(self, pid):
+        with open(f"/proc/{pid}/status", "r") as f:
+            for line in f:
+                if line.startswith("RssAnon:"):
+                    return int(line.split()[1])
+
+    def watch_rss(self, pid, rss):
+        maxrss = 0
+        try:
+            while rss[1] == 0:
+                rss_kb = self.get_rss(pid)
+                if rss_kb > maxrss:
+                    maxrss = rss_kb
+                time.sleep(1)
+        except FileNotFoundError:
+            return
+        rss[0] = maxrss
+
+    def test(self):
+        """As per https://github.com/ydb-platform/ydb/issues/13529"""
+        pid = self.cluster.nodes[1].pid
+        maxrss = [0, 0]
+        watch_thread = Thread(target=self.watch_rss, args=[pid, maxrss])
+        watch_thread.start()
+        print('Pid {}'.format(pid), file=sys.stderr)
+        self.database_name = '/Root'
+        session = self.make_session()
+
+        # Overflow the database
+        self.create_test_str_table(session, 'huge')
+        self.upsert_str(session, 'huge')
+        rss = self.get_rss(pid)
+        print('Rss after upsert {}'.format(rss), file=sys.stderr)
+        threads = []
+        for c in range(20):
+            thread = Thread(target=self.select, args=['huge', session])
+            threads.append(thread)
+
+        for thread in threads:
+            thread.start()
+
+        for thread in threads:
+            thread.join()
+
+        maxrss[1] = 1
+        watch_thread.join()
+        print('Max rss {}', format(maxrss[0]), file=sys.stderr)
+        assert maxrss[0] < 12 * 1024 * 1024, "Too high memory consumption"
