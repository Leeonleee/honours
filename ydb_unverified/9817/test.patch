diff --git a/build/config/tests/py_style/config_paths.json b/build/config/tests/py_style/config_paths.json
deleted file mode 100644
index 7b3c51669b84..000000000000
--- a/build/config/tests/py_style/config_paths.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-    "": "build/config/tests/py_style/config.toml",
-    "devtools/contrib/piglet/template_generator/": "maps/infra/pyproject.toml",
-    "devtools/dwh/intrasearch/utils/": "devtools/dwh/pyproject.toml",
-    "devtools/rnd/": "devtools/rnd/pyproject.toml",
-    "devtools/yamaker/": "devtools/yamaker/pyproject.toml",
-    "dj/services/arcanum/": "dj/services/arcanum/pyproject.toml",
-    "intranet/search/": "intranet/search/pyproject.toml",
-    "maps/": "maps/infra/pyproject.toml",
-    "ml/tensorflow/models/userbert/pipeline/multipart/data/": "ml/tensorflow/models/userbert/pipeline/multipart/data/pyproject.toml",
-    "partner/python/": "partner/python/pyproject.toml"
-}
diff --git a/build/config/tests/py_style/default_configs.json b/build/config/tests/py_style/default_configs.json
new file mode 100644
index 000000000000..1c8f2ab58517
--- /dev/null
+++ b/build/config/tests/py_style/default_configs.json
@@ -0,0 +1,6 @@
+{
+    "flake8": "build/config/tests/flake8/flake8.conf",
+    "py2_flake8": "build/config/tests/flake8/flake8.conf",
+    "black": "build/config/tests/py_style/config.toml",
+    "dummy_linter": "build/config/tests/py_style/dummy_linter_config.json"
+}
diff --git a/build/config/tests/py_style/dummy_linter_config.json b/build/config/tests/py_style/dummy_linter_config.json
new file mode 100644
index 000000000000..0967ef424bce
--- /dev/null
+++ b/build/config/tests/py_style/dummy_linter_config.json
@@ -0,0 +1,1 @@
+{}
diff --git a/build/config/tests/py_style/ya.make b/build/config/tests/py_style/ya.make
index 37dcd2ec82ed..6a6a2875588a 100644
--- a/build/config/tests/py_style/ya.make
+++ b/build/config/tests/py_style/ya.make
@@ -2,7 +2,6 @@ LIBRARY()
 
 RESOURCE_FILES(
     config.toml
-    config_paths.json
 )
 
 END()
diff --git a/build/platform/test_tool/host.ya.make.inc b/build/platform/test_tool/host.ya.make.inc
index f44f5f2df2c1..69a66014eb1c 100644
--- a/build/platform/test_tool/host.ya.make.inc
+++ b/build/platform/test_tool/host.ya.make.inc
@@ -1,12 +1,12 @@
 IF (HOST_OS_DARWIN AND HOST_ARCH_X86_64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083800804)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120352053)
 ELSEIF (HOST_OS_DARWIN AND HOST_ARCH_ARM64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083799383)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120351367)
 ELSEIF (HOST_OS_LINUX AND HOST_ARCH_X86_64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083802536)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120353733)
 ELSEIF (HOST_OS_LINUX AND HOST_ARCH_AARCH64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083798661)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120350948)
 ELSEIF (HOST_OS_WINDOWS AND HOST_ARCH_X86_64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083801684)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120352672)
 
 ENDIF()
diff --git a/build/platform/test_tool/host_os.ya.make.inc b/build/platform/test_tool/host_os.ya.make.inc
index 43fc98f8c790..f82b95639d6f 100644
--- a/build/platform/test_tool/host_os.ya.make.inc
+++ b/build/platform/test_tool/host_os.ya.make.inc
@@ -1,12 +1,12 @@
 IF (HOST_OS_DARWIN AND HOST_ARCH_X86_64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083800164)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120327883)
 ELSEIF (HOST_OS_DARWIN AND HOST_ARCH_ARM64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083799217)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120327375)
 ELSEIF (HOST_OS_LINUX AND HOST_ARCH_X86_64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083801854)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120328912)
 ELSEIF (HOST_OS_LINUX AND HOST_ARCH_AARCH64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083798603)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120326904)
 ELSEIF (HOST_OS_WINDOWS AND HOST_ARCH_X86_64)
-    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7083801030)
+    DECLARE_EXTERNAL_RESOURCE(TEST_TOOL_HOST sbr:7120328512)
 
 ENDIF()
diff --git a/build/plugins/ytest.py b/build/plugins/ytest.py
index 6b1a77e23580..f24ba674a0c4 100644
--- a/build/plugins/ytest.py
+++ b/build/plugins/ytest.py
@@ -24,7 +24,6 @@
     serialize_list,
     get_unit_list_variable,
     deserialize_list,
-    prepare_env,
     create_dart_record,
 )
 
@@ -99,6 +98,19 @@
     df.UseArcadiaPython.value,
 )
 
+LINTER_FIELDS_BASE = (
+    df.LintName.value,
+    df.LintExtraParams.from_macro_args,
+    df.TestName.name_from_macro_args,
+    df.TestedProjectName.unit_name,
+    df.SourceFolderPath.normalized,
+    df.TestEnv.value,
+    df.UseArcadiaPython.value,
+    df.LintFileProcessingTime.from_macro_args,
+    df.Linter.value,
+    df.CustomDependencies.depends_with_linter,
+)
+
 tidy_config_map = None
 
 
@@ -397,13 +409,6 @@ def dump_test(unit, kw):
     return data
 
 
-def reference_group_var(varname: str, extensions: list[str] | None = None) -> str:
-    if extensions is None:
-        return f'"${{join=\\;:{varname}}}"'
-
-    return serialize_list(f'${{ext={ext};join=\\;:{varname}}}' for ext in extensions)
-
-
 def count_entries(x):
     # see (de)serialize_list
     assert x is None or isinstance(x, str), type(x)
@@ -693,6 +698,39 @@ def govet(fields, unit, *args):
         unit.set_property(["DART_DATA", data])
 
 
+@df.with_fields(
+    CHECK_FIELDS_BASE
+    + (
+        df.TestedProjectName.normalized_basename,
+        df.SourceFolderPath.normalized,
+        df.TestFiles.flat_args_wo_first,
+        df.ModuleLang.value,
+    )
+)
+def detekt_report(fields, unit, *args):
+    flat_args, spec_args = _common.sort_by_keywords(
+        {
+            "DEPENDS": -1,
+            "TIMEOUT": 1,
+            "DATA": -1,
+            "TAG": -1,
+            "REQUIREMENTS": -1,
+            "FORK_MODE": 1,
+            "SPLIT_FACTOR": 1,
+            "FORK_SUBTESTS": 0,
+            "FORK_TESTS": 0,
+            "SIZE": 1,
+        },
+        args,
+    )
+
+    dart_record = create_dart_record(fields, unit, flat_args, spec_args)
+
+    data = dump_test(unit, dart_record)
+    if data:
+        unit.set_property(["DART_DATA", data])
+
+
 def onadd_check(unit, *args):
     if unit.get("TIDY") == "yes":
         # graph changed for clang_tidy tests
@@ -727,6 +765,8 @@ def onadd_check(unit, *args):
         gofmt(unit, *args)
     elif check_type == "govet":
         govet(unit, *args)
+    elif check_type == "detekt.report":
+        detekt_report(unit, *args)
 
 
 def on_register_no_check_imports(unit):
@@ -950,32 +990,14 @@ def onsetup_run_python(unit):
         unit.ondepends('contrib/tools/python')
 
 
-@_common.lazy
-def get_linter_configs(unit, config_paths):
-    rel_config_path = _common.rootrel_arc_src(config_paths, unit)
-    arc_config_path = unit.resolve_arc_path(rel_config_path)
-    abs_config_path = unit.resolve(arc_config_path)
-    with open(abs_config_path, 'r') as fd:
-        return list(json.load(fd).values())
-
-
 @df.with_fields(
     (
-        df.LintName.value,
-        df.TestFiles.py_linter_files,
-        df.LintConfigs.value,
-        df.LintExtraParams.from_macro_args,
-        df.TestName.name_from_macro_args,
-        df.TestedProjectName.unit_name,
-        df.SourceFolderPath.normalized,
-        df.TestEnv.value,
-        df.UseArcadiaPython.value,
-        df.LintFileProcessingTime.from_macro_args,
-        df.Linter.value,
-        df.CustomDependencies.depends_with_linter,
+        df.TestFiles.cpp_linter_files,
+        df.LintConfigs.cpp_configs,
     )
+    + LINTER_FIELDS_BASE
 )
-def on_add_py_linter_check(fields, unit, *args):
+def on_add_cpp_linter_check(fields, unit, *args):
     if unit.get("TIDY") == "yes":
         return
 
@@ -988,8 +1010,8 @@ def on_add_py_linter_check(fields, unit, *args):
         "NAME": 1,
         "LINTER": 1,
         "DEPENDS": unlimited,
-        "FILES": unlimited,
-        "CONFIGS": unlimited,
+        "CONFIGS": 1,
+        "CUSTOM_CONFIG": 1,
         "GLOBAL_RESOURCES": unlimited,
         "FILE_PROCESSING_TIME": 1,
         "EXTRA_PARAMS": unlimited,
@@ -1012,91 +1034,48 @@ def on_add_py_linter_check(fields, unit, *args):
         unit.set_property(["DART_DATA", data])
 
 
-def on_add_linter_check(unit, *args):
+@df.with_fields(
+    (
+        df.TestFiles.py_linter_files,
+        df.LintConfigs.python_configs,
+    )
+    + LINTER_FIELDS_BASE
+)
+def on_add_py_linter_check(fields, unit, *args):
     if unit.get("TIDY") == "yes":
         return
-    source_root_from_prefix = '${ARCADIA_ROOT}/'
-    source_root_to_prefix = '$S/'
-    unlimited = -1
 
     no_lint_value = _common.get_no_lint_value(unit)
     if no_lint_value in ("none", "none_internal"):
         return
 
+    unlimited = -1
     keywords = {
+        "NAME": 1,
+        "LINTER": 1,
         "DEPENDS": unlimited,
-        "FILES": unlimited,
-        "CONFIGS": unlimited,
+        "CONFIGS": 1,
         "GLOBAL_RESOURCES": unlimited,
         "FILE_PROCESSING_TIME": 1,
         "EXTRA_PARAMS": unlimited,
+        "PROJECT_TO_CONFIG_MAP": 1,
+        "FLAKE_MIGRATIONS_CONFIG": 1,
+        "CUSTOM_CONFIG": 1,
     }
-    flat_args, spec_args = _common.sort_by_keywords(keywords, args)
-    if len(flat_args) != 2:
-        unit.message(['ERROR', '_ADD_LINTER_CHECK params: expected 2 free parameters'])
-        return
-
-    configs = []
-    for cfg in spec_args.get('CONFIGS', []):
-        filename = unit.resolve(source_root_to_prefix + cfg)
-        if not os.path.exists(filename):
-            unit.message(['ERROR', 'Configuration file {} is not found'.format(filename)])
-            return
-        configs.append(cfg)
-    deps = []
-
-    lint_name, linter = flat_args
-    deps.append(os.path.dirname(linter))
-
-    test_files = []
-    for path in spec_args.get('FILES', []):
-        if path.startswith(source_root_from_prefix):
-            test_files.append(path.replace(source_root_from_prefix, source_root_to_prefix, 1))
-        elif path.startswith(source_root_to_prefix):
-            test_files.append(path)
-
-    if lint_name == 'cpp_style':
-        files_dart = reference_group_var("ALL_SRCS", consts.STYLE_CPP_ALL_EXTS)
-    else:
-        if not test_files:
-            unit.message(['WARN', 'No files to lint for {}'.format(lint_name)])
-            return
-        files_dart = serialize_list(test_files)
-
-    for arg in spec_args.get('EXTRA_PARAMS', []):
-        if '=' not in arg:
-            unit.message(['WARN', 'Wrong EXTRA_PARAMS value: "{}". Values must have format "name=value".'.format(arg)])
-            return
-
-    deps += spec_args.get('DEPENDS', [])
-
-    for dep in deps:
-        unit.ondepends(dep)
+    _, spec_args = _common.sort_by_keywords(keywords, args)
 
-    for resource in spec_args.get('GLOBAL_RESOURCES', []):
+    global_resources = spec_args.get('GLOBAL_RESOURCES', [])
+    for resource in global_resources:
         unit.onpeerdir(resource)
+    try:
+        dart_record = create_dart_record(fields, unit, (), spec_args)
+    except df.DartValueError as e:
+        if msg := str(e):
+            unit.message(['WARN', msg])
+        return
+    dart_record[df.ScriptRelPath.KEY] = 'custom_lint'
 
-    test_record = {
-        'TEST-NAME': lint_name,
-        'SCRIPT-REL-PATH': 'custom_lint',
-        'TESTED-PROJECT-NAME': unit.name(),
-        'SOURCE-FOLDER-PATH': _common.get_norm_unit_path(unit),
-        'CUSTOM-DEPENDENCIES': " ".join(deps),
-        'TEST-ENV': prepare_env(unit.get("TEST_ENV_VALUE")),
-        'USE_ARCADIA_PYTHON': unit.get('USE_ARCADIA_PYTHON') or '',
-        # TODO remove FILES, see DEVTOOLS-7052
-        'FILES': files_dart,
-        'TEST-FILES': files_dart,
-        # Linter specific parameters
-        # TODO Add configs to DATA. See YMAKE-427
-        'LINT-CONFIGS': serialize_list(configs),
-        'LINT-NAME': lint_name,
-        'LINT-FILE-PROCESSING-TIME': spec_args.get('FILE_PROCESSING_TIME', [''])[0],
-        'LINT-EXTRA-PARAMS': serialize_list(spec_args.get('EXTRA_PARAMS', [])),
-        'LINTER': linter,
-    }
-
-    data = dump_test(unit, test_record)
+    data = dump_test(unit, dart_record)
     if data:
         unit.set_property(["DART_DATA", data])
 
diff --git a/contrib/python/more-itertools/py3/tests/test_recipes.py b/contrib/python/more-itertools/py3/tests/test_recipes.py
index d3762d49dbef..684a6fcd0b1f 100644
--- a/contrib/python/more-itertools/py3/tests/test_recipes.py
+++ b/contrib/python/more-itertools/py3/tests/test_recipes.py
@@ -2,11 +2,12 @@
 from doctest import DocTestSuite
 from fractions import Fraction
 from functools import reduce
-from itertools import combinations, count, permutations
+from itertools import combinations, count, groupby, permutations
 from operator import mul
 from math import factorial
 from sys import version_info
 from unittest import TestCase, skipIf
+from unittest.mock import patch
 
 import more_itertools as mi
 
@@ -158,6 +159,22 @@ def test_key(self):
         self.assertTrue(mi.all_equal('4٤໔４৪', key=int))
         self.assertFalse(mi.all_equal('Abc', key=str.casefold))
 
+    @patch('more_itertools.recipes.groupby', autospec=True)
+    def test_groupby_calls(self, mock_groupby):
+        next_count = 0
+
+        class _groupby(groupby):
+            def __next__(true_self):
+                nonlocal next_count
+                next_count += 1
+                return super().__next__()
+
+        mock_groupby.side_effect = _groupby
+        iterable = iter('aaaaa')
+        self.assertTrue(mi.all_equal(iterable))
+        self.assertEqual(list(iterable), [])
+        self.assertEqual(next_count, 2)
+
 
 class QuantifyTests(TestCase):
     """Tests for ``quantify()``"""
diff --git a/library/cpp/yt/memory/unittests/atomic_intrusive_ptr_ut.cpp b/library/cpp/yt/memory/unittests/atomic_intrusive_ptr_ut.cpp
index 68489fcdf7cb..47db5325e1aa 100644
--- a/library/cpp/yt/memory/unittests/atomic_intrusive_ptr_ut.cpp
+++ b/library/cpp/yt/memory/unittests/atomic_intrusive_ptr_ut.cpp
@@ -3,12 +3,17 @@
 #include <library/cpp/yt/memory/new.h>
 #include <library/cpp/yt/memory/ref_counted.h>
 #include <library/cpp/yt/memory/atomic_intrusive_ptr.h>
+#include <library/cpp/yt/memory/leaky_singleton.h>
+
+#include <util/system/compiler.h>
 
 namespace NYT {
 namespace {
 
 ////////////////////////////////////////////////////////////////////////////////
 
+#ifndef _lsan_enabled_
+
 using ::testing::IsNull;
 using ::testing::NotNull;
 using ::testing::InSequence;
@@ -168,16 +173,25 @@ class TObjectWithFullRC
 
 ////////////////////////////////////////////////////////////////////////////////
 
-TEST(TAtomicPtrTest, Empty)
+TEST(TIntrusiveAtomicPtrTest, Empty)
 {
     TIntricateObjectPtr emptyPointer;
     EXPECT_EQ(nullptr, emptyPointer.Get());
 }
 
-// Reserved ref count.
-constexpr int RRC = 65535;
+constexpr int ReservedRefCount = 65535;
 
-TEST(TAtomicPtrTest, Basic)
+TEST(TIntrusiveAtomicPtrTest, Reset)
+{
+    TIntricateObject object;
+    TIntricateObjectPtr owningPointer(&object);
+    TAtomicIntrusivePtr<TIntricateObject> atomicPointer(owningPointer);
+    atomicPointer.Reset();
+    EXPECT_EQ(nullptr, atomicPointer.Get());
+    EXPECT_THAT(object, HasRefCounts(1 + ReservedRefCount, ReservedRefCount, 0));
+}
+
+TEST(TIntrusiveAtomicPtrTest, Basic)
 {
     TIntricateObject object;
 
@@ -196,27 +210,27 @@ TEST(TAtomicPtrTest, Basic)
         TIntricateObjectPtr owningPointer(&object);
         TAtomicIntrusivePtr<TIntricateObject> atomicPointer(owningPointer);
 
-        EXPECT_THAT(object, HasRefCounts(2 + RRC, 1, 1));
+        EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 1, 1));
         EXPECT_EQ(&object, owningPointer.Get());
 
 
         auto p1 = atomicPointer.Acquire();
 
-        EXPECT_THAT(object, HasRefCounts(2 + RRC, 1, 1));
+        EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 1, 1));
 
         p1.Reset();
 
-        EXPECT_THAT(object, HasRefCounts(2 + RRC, 2, 1));
+        EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 2, 1));
 
         owningPointer.Reset();
 
-        EXPECT_THAT(object, HasRefCounts(2 + RRC, 3, 1));
+        EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 3, 1));
     }
 
-    EXPECT_THAT(object, HasRefCounts(2 + RRC, 2 + RRC, 2));
+    EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 2 + ReservedRefCount, 2));
 }
 
-TEST(TAtomicPtrTest, BasicConst)
+TEST(TIntrusiveAtomicPtrTest, BasicConst)
 {
     const TIntricateObject object;
 
@@ -235,86 +249,86 @@ TEST(TAtomicPtrTest, BasicConst)
         TConstIntricateObjectPtr owningPointer(&object);
         TAtomicIntrusivePtr<const TIntricateObject> atomicPointer(owningPointer);
 
-        EXPECT_THAT(object, HasRefCounts(2 + RRC, 1, 1));
+        EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 1, 1));
         EXPECT_EQ(&object, owningPointer.Get());
 
 
         auto p1 = atomicPointer.Acquire();
 
-        EXPECT_THAT(object, HasRefCounts(2 + RRC, 1, 1));
+        EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 1, 1));
 
         p1.Reset();
 
-        EXPECT_THAT(object, HasRefCounts(2 + RRC, 2, 1));
+        EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 2, 1));
 
         owningPointer.Reset();
 
-        EXPECT_THAT(object, HasRefCounts(2 + RRC, 3, 1));
+        EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 3, 1));
     }
 
-    EXPECT_THAT(object, HasRefCounts(2 + RRC, 2 + RRC, 2));
+    EXPECT_THAT(object, HasRefCounts(2 + ReservedRefCount, 2 + ReservedRefCount, 2));
 }
 
-TEST(TAtomicPtrTest, Acquire)
+TEST(TIntrusiveAtomicPtrTest, Acquire)
 {
     TIntricateObject object;
     {
         TAtomicIntrusivePtr<TIntricateObject> atomicPtr{TIntricateObjectPtr(&object)};
-        EXPECT_THAT(object, HasRefCounts(RRC, 0, 0));
+        EXPECT_THAT(object, HasRefCounts(ReservedRefCount, 0, 0));
 
-        for (int i = 0; i < RRC / 2; ++i) {
+        for (int i = 0; i < ReservedRefCount / 2; ++i) {
             {
                 auto tmp = atomicPtr.Acquire();
-                EXPECT_THAT(object, HasRefCounts(RRC, i, 0));
+                EXPECT_THAT(object, HasRefCounts(ReservedRefCount, i, 0));
             }
-            EXPECT_THAT(object, HasRefCounts(RRC, i + 1, 0));
+            EXPECT_THAT(object, HasRefCounts(ReservedRefCount, i + 1, 0));
         }
 
         {
             auto tmp = atomicPtr.Acquire();
-            EXPECT_THAT(object, HasRefCounts(RRC + RRC / 2, RRC / 2, 0));
+            EXPECT_THAT(object, HasRefCounts(ReservedRefCount + ReservedRefCount / 2, ReservedRefCount / 2, 0));
         }
 
-        EXPECT_THAT(object, HasRefCounts(RRC + RRC / 2, RRC / 2 + 1, 0));
+        EXPECT_THAT(object, HasRefCounts(ReservedRefCount + ReservedRefCount / 2, ReservedRefCount / 2 + 1, 0));
     }
 
-    EXPECT_THAT(object, HasRefCounts(RRC + RRC / 2, RRC + RRC / 2, 1));
+    EXPECT_THAT(object, HasRefCounts(ReservedRefCount + ReservedRefCount / 2, ReservedRefCount + ReservedRefCount / 2, 1));
 }
 
-TEST(TAtomicPtrTest, AcquireConst)
+TEST(TIntrusiveAtomicPtrTest, AcquireConst)
 {
     const TIntricateObject object;
     {
         TAtomicIntrusivePtr<const TIntricateObject> atomicPtr{TConstIntricateObjectPtr(&object)};
-        EXPECT_THAT(object, HasRefCounts(RRC, 0, 0));
+        EXPECT_THAT(object, HasRefCounts(ReservedRefCount, 0, 0));
 
-        for (int i = 0; i < RRC / 2; ++i) {
+        for (int i = 0; i < ReservedRefCount / 2; ++i) {
             {
                 auto tmp = atomicPtr.Acquire();
-                EXPECT_THAT(object, HasRefCounts(RRC, i, 0));
+                EXPECT_THAT(object, HasRefCounts(ReservedRefCount, i, 0));
             }
-            EXPECT_THAT(object, HasRefCounts(RRC, i + 1, 0));
+            EXPECT_THAT(object, HasRefCounts(ReservedRefCount, i + 1, 0));
         }
 
         {
             auto tmp = atomicPtr.Acquire();
-            EXPECT_THAT(object, HasRefCounts(RRC + RRC / 2, RRC / 2, 0));
+            EXPECT_THAT(object, HasRefCounts(ReservedRefCount + ReservedRefCount / 2, ReservedRefCount / 2, 0));
         }
 
-        EXPECT_THAT(object, HasRefCounts(RRC + RRC / 2, RRC / 2 + 1, 0));
+        EXPECT_THAT(object, HasRefCounts(ReservedRefCount + ReservedRefCount / 2, ReservedRefCount / 2 + 1, 0));
     }
 
-    EXPECT_THAT(object, HasRefCounts(RRC + RRC / 2, RRC + RRC / 2, 1));
+    EXPECT_THAT(object, HasRefCounts(ReservedRefCount + ReservedRefCount / 2, ReservedRefCount + ReservedRefCount / 2, 1));
 }
 
-TEST(TAtomicPtrTest, CAS)
+TEST(TIntrusiveAtomicPtrTest, CAS)
 {
     TIntricateObject o1;
     TIntricateObject o2;
     {
 
         TAtomicIntrusivePtr<TIntricateObject> atomicPtr{TIntricateObjectPtr(&o1)};
-        EXPECT_THAT(o1, HasRefCounts(RRC, 0, 0));
+        EXPECT_THAT(o1, HasRefCounts(ReservedRefCount, 0, 0));
 
         TIntricateObjectPtr p2(&o2);
         EXPECT_THAT(o2, HasRefCounts(1, 0, 0));
@@ -323,28 +337,28 @@ TEST(TAtomicPtrTest, CAS)
         EXPECT_TRUE(atomicPtr.CompareAndSwap(rawPtr, std::move(p2)));
         EXPECT_EQ(rawPtr, &o1);
 
-        EXPECT_THAT(o1, HasRefCounts(RRC, RRC, 1));
-        EXPECT_THAT(o2, HasRefCounts(RRC, 0, 0));
+        EXPECT_THAT(o1, HasRefCounts(ReservedRefCount, ReservedRefCount, 1));
+        EXPECT_THAT(o2, HasRefCounts(ReservedRefCount, 0, 0));
 
         rawPtr = nullptr;
         EXPECT_FALSE(atomicPtr.CompareAndSwap(rawPtr, TIntricateObjectPtr(&o1)));
         EXPECT_EQ(rawPtr, &o2);
 
-        EXPECT_THAT(o1, HasRefCounts(2 * RRC, 2 * RRC, 2));
-        EXPECT_THAT(o2, HasRefCounts(RRC, 0, 0));
+        EXPECT_THAT(o1, HasRefCounts(2 * ReservedRefCount, 2 * ReservedRefCount, 2));
+        EXPECT_THAT(o2, HasRefCounts(ReservedRefCount, 0, 0));
     }
 
-    EXPECT_THAT(o2, HasRefCounts(RRC, RRC, 1));
+    EXPECT_THAT(o2, HasRefCounts(ReservedRefCount, ReservedRefCount, 1));
 }
 
-TEST(TAtomicPtrTest, CASConst)
+TEST(TIntrusiveAtomicPtrTest, CASConst)
 {
     const TIntricateObject o1;
     const TIntricateObject o2;
     {
 
         TAtomicIntrusivePtr<const TIntricateObject> atomicPtr{TConstIntricateObjectPtr(&o1)};
-        EXPECT_THAT(o1, HasRefCounts(RRC, 0, 0));
+        EXPECT_THAT(o1, HasRefCounts(ReservedRefCount, 0, 0));
 
         TConstIntricateObjectPtr p2(&o2);
         EXPECT_THAT(o2, HasRefCounts(1, 0, 0));
@@ -353,20 +367,45 @@ TEST(TAtomicPtrTest, CASConst)
         EXPECT_TRUE(atomicPtr.CompareAndSwap(rawPtr, std::move(p2)));
         EXPECT_EQ(rawPtr, &o1);
 
-        EXPECT_THAT(o1, HasRefCounts(RRC, RRC, 1));
-        EXPECT_THAT(o2, HasRefCounts(RRC, 0, 0));
+        EXPECT_THAT(o1, HasRefCounts(ReservedRefCount, ReservedRefCount, 1));
+        EXPECT_THAT(o2, HasRefCounts(ReservedRefCount, 0, 0));
 
         rawPtr = nullptr;
         EXPECT_FALSE(atomicPtr.CompareAndSwap(rawPtr, TConstIntricateObjectPtr(&o1)));
         EXPECT_EQ(rawPtr, &o2);
 
-        EXPECT_THAT(o1, HasRefCounts(2 * RRC, 2 * RRC, 2));
-        EXPECT_THAT(o2, HasRefCounts(RRC, 0, 0));
+        EXPECT_THAT(o1, HasRefCounts(2 * ReservedRefCount, 2 * ReservedRefCount, 2));
+        EXPECT_THAT(o2, HasRefCounts(ReservedRefCount, 0, 0));
     }
 
-    EXPECT_THAT(o2, HasRefCounts(RRC, RRC, 1));
+    EXPECT_THAT(o2, HasRefCounts(ReservedRefCount, ReservedRefCount, 1));
 }
 
+TEST(TIntrusiveAtomicPtrTest, LSan)
+{
+    struct S final
+    { };
+
+    struct TSingleton
+    {
+        TSingleton()
+        {
+            for (auto& ptr : Ptrs) {
+                ptr.Store(New<S>());
+                // Clobber pointer bits to prevent LSan from tracing the pointer.
+                ptr.Acquire();
+            }
+        }
+
+        // LSan has some issues detecting leaks when just one allocation is made.
+        std::array<TAtomicIntrusivePtr<S>, 100> Ptrs;
+    };
+
+    LeakySingleton<TSingleton>();
+}
+
+#endif
+
 ////////////////////////////////////////////////////////////////////////////////
 
 } // namespace
diff --git a/library/cpp/yt/string/unittests/format_ut.cpp b/library/cpp/yt/string/unittests/format_ut.cpp
index aa820fd5afa0..ac3be99ad97b 100644
--- a/library/cpp/yt/string/unittests/format_ut.cpp
+++ b/library/cpp/yt/string/unittests/format_ut.cpp
@@ -78,6 +78,7 @@ static_assert(CFormattable<TInstant>);
 struct TUnformattable
 { };
 static_assert(!CFormattable<TUnformattable>);
+static_assert(!CFormattable<std::variant<TUnformattable>>);
 
 static_assert(CFormattable<TWithCustomFlags>);
 
diff --git a/yt/yt/client/unittests/connection_ut.cpp b/yt/yt/client/unittests/connection_ut.cpp
index 336d1a5b6d0c..8e9a0dc10eee 100644
--- a/yt/yt/client/unittests/connection_ut.cpp
+++ b/yt/yt/client/unittests/connection_ut.cpp
@@ -23,13 +23,13 @@ TEST_F(TProxyUrlTest, ParseProxyUrlAliasingRules)
 TEST_F(TProxyUrlTest, ApplyProxyUrlAliasingRules)
 {
     {
-        TString url = "markov";
+        std::string url = "markov";
         ApplyProxyUrlAliasingRules(url, THashMap<std::string, std::string>({{"primary", "localhost:12345"}}));
         ASSERT_EQ(url, "markov");
     }
     // See ENV in ya.make
     {
-        TString url = "primary";
+        std::string url = "primary";
         ApplyProxyUrlAliasingRules(url, THashMap<std::string, std::string>({{"primary", "localhost:12345"}}));
         ASSERT_EQ(url, "localhost:12345");
     }
diff --git a/yt/yt/client/unittests/query_builder_ut.cpp b/yt/yt/client/unittests/query_builder_ut.cpp
index 2a6313c49583..687f95d5c068 100644
--- a/yt/yt/client/unittests/query_builder_ut.cpp
+++ b/yt/yt/client/unittests/query_builder_ut.cpp
@@ -27,6 +27,8 @@ TEST(TQueryBuilderTest, Simple)
     b.AddGroupByExpression("x + y * z", "group_expr");
     b.AddGroupByExpression("x - 1");
 
+    b.SetWithTotals(EWithTotalsMode::BeforeHaving);
+
     b.AddHavingConjunct("group_expr > 42");
     b.AddHavingConjunct("group_expr < 420");
 
@@ -46,6 +48,7 @@ TEST(TQueryBuilderTest, Simple)
         "LEFT JOIN [table2] AS [lookup2] ON (idx) = (lookup2.idx) "
         "WHERE (x > y_alias) AND (y = 177 OR y % 2 = 0) "
         "GROUP BY (x + y * z) AS group_expr, (x - 1) "
+        "WITH TOTALS "
         "HAVING (group_expr > 42) AND (group_expr < 420) "
         "ORDER BY (z) ASC, (x) DESC, (x + y) DESC, (z - y_alias) "
         "LIMIT 43");
@@ -62,6 +65,23 @@ TEST(TQueryBuilderTest, SourceAlias)
         "FROM [//t] AS t_alias");
 }
 
+TEST(TQueryBuilderTest, TotalsAfterHaving)
+{
+    TQueryBuilder b;
+    b.AddSelectExpression("x");
+    b.SetSource("//t");
+    b.AddGroupByExpression("x - 1");
+    b.SetWithTotals(EWithTotalsMode::AfterHaving);
+    b.AddHavingConjunct("group_expr > 42");
+
+    EXPECT_EQ(b.Build(),
+        "(x) "
+        "FROM [//t] "
+        "GROUP BY (x - 1) "
+        "HAVING (group_expr > 42) "
+        "WITH TOTALS");
+}
+
 ////////////////////////////////////////////////////////////////////////////////
 
 } // namespace
diff --git a/yt/yt/core/http/unittests/http_ut.cpp b/yt/yt/core/http/unittests/http_ut.cpp
index e5bc967d7309..cda7dea65f85 100644
--- a/yt/yt/core/http/unittests/http_ut.cpp
+++ b/yt/yt/core/http/unittests/http_ut.cpp
@@ -159,6 +159,11 @@ struct TFakeConnection
     TString Input;
     TString Output;
 
+    TConnectionId GetId() const override
+    {
+        return {};
+    }
+
     bool SetNoDelay() override
     {
         return true;
@@ -216,12 +221,12 @@ struct TFakeConnection
         THROW_ERROR_EXCEPTION("Not implemented");
     }
 
-    const TNetworkAddress& LocalAddress() const override
+    const TNetworkAddress& GetLocalAddress() const override
     {
         THROW_ERROR_EXCEPTION("Not implemented");
     }
 
-    const TNetworkAddress& RemoteAddress() const override
+    const TNetworkAddress& GetRemoteAddress() const override
     {
         THROW_ERROR_EXCEPTION("Not implemented");
     }
@@ -1149,7 +1154,7 @@ TEST_P(THttpServerTest, ConnectionKeepAlive)
 
         auto response = New<THttpInput>(
             connection,
-            connection->RemoteAddress(),
+            connection->GetRemoteAddress(),
             Poller->GetInvoker(),
             EMessageType::Response,
             New<THttpIOConfig>());
@@ -1183,7 +1188,7 @@ TEST_P(THttpServerTest, ConnectionKeepAlive)
 
         auto response = New<THttpInput>(
             connection,
-            connection->RemoteAddress(),
+            connection->GetRemoteAddress(),
             Poller->GetInvoker(),
             EMessageType::Response,
             New<THttpIOConfig>());
diff --git a/yt/yt/core/misc/unittests/boolean_formula_ut.cpp b/yt/yt/core/misc/unittests/boolean_formula_ut.cpp
index 0bae531297b3..94e43cbf2d55 100644
--- a/yt/yt/core/misc/unittests/boolean_formula_ut.cpp
+++ b/yt/yt/core/misc/unittests/boolean_formula_ut.cpp
@@ -12,8 +12,9 @@ class TBooleanFormulaTest
     : public ::testing::Test
     , public ::testing::WithParamInterface<std::tuple<
         const char*,
-        std::vector<TString>,
-        bool>>
+        std::vector<std::string>,
+        bool
+    >>
 { };
 
 TEST_P(TBooleanFormulaTest, Test)
@@ -35,31 +36,31 @@ INSTANTIATE_TEST_SUITE_P(
     TBooleanFormulaTest,
     TBooleanFormulaTest,
     ::testing::Values(
-        std::tuple("", std::vector<TString>{}, true),
-        std::tuple("", std::vector<TString>{"b"}, true),
-        std::tuple("a", std::vector<TString>{"b"}, false),
-        std::tuple("!a", std::vector<TString>{"b"}, true),
-        std::tuple("b", std::vector<TString>{"b"}, true),
-        std::tuple("a|b", std::vector<TString>{"b"}, true),
-        std::tuple("a & b", std::vector<TString>{"b"}, false),
-        std::tuple("(b)", std::vector<TString>{"b"}, true),
-        std::tuple("a|(a|b)", std::vector<TString>{"b"}, true),
-        std::tuple("(a|b)&(!a&b)", std::vector<TString>{"b"}, true),
-        std::tuple("a&b", std::vector<TString>{"a", "b"}, true),
-        std::tuple("(a|c)&(b|c)", std::vector<TString>{"a", "b"}, true),
-        std::tuple("(a|b)&c", std::vector<TString>{"a", "b"}, false),
-        std::tuple("a|b|c", std::vector<TString>{"b"}, true),
-        std::tuple("!a & b & !c", std::vector<TString>{"b"}, true),
-        std::tuple("var-1 | !var/2", std::vector<TString>{"var-1"}, true),
-        std::tuple("var-1 | !var/2", std::vector<TString>{"var/2"}, false),
-        std::tuple("var-1 | !var/2", std::vector<TString>{}, true),
-        std::tuple("!in-", std::vector<TString>{}, true),
-        std::tuple("in/|x", std::vector<TString>{"in/"}, true),
-        std::tuple("%true", std::vector<TString>{""}, true),
-        std::tuple("%false", std::vector<TString>{"false"}, false),
-        std::tuple("%true|%false", std::vector<TString>{""}, true),
-        std::tuple("a.b.c-d.e:1234", std::vector<TString>{"a.b.c-d.e:1234"}, true),
-        std::tuple("!a.b.c-d.e:1234", std::vector<TString>{"a.b.c-d.e:1234"}, false)
+        std::tuple("", std::vector<std::string>{}, true),
+        std::tuple("", std::vector<std::string>{"b"}, true),
+        std::tuple("a", std::vector<std::string>{"b"}, false),
+        std::tuple("!a", std::vector<std::string>{"b"}, true),
+        std::tuple("b", std::vector<std::string>{"b"}, true),
+        std::tuple("a|b", std::vector<std::string>{"b"}, true),
+        std::tuple("a & b", std::vector<std::string>{"b"}, false),
+        std::tuple("(b)", std::vector<std::string>{"b"}, true),
+        std::tuple("a|(a|b)", std::vector<std::string>{"b"}, true),
+        std::tuple("(a|b)&(!a&b)", std::vector<std::string>{"b"}, true),
+        std::tuple("a&b", std::vector<std::string>{"a", "b"}, true),
+        std::tuple("(a|c)&(b|c)", std::vector<std::string>{"a", "b"}, true),
+        std::tuple("(a|b)&c", std::vector<std::string>{"a", "b"}, false),
+        std::tuple("a|b|c", std::vector<std::string>{"b"}, true),
+        std::tuple("!a & b & !c", std::vector<std::string>{"b"}, true),
+        std::tuple("var-1 | !var/2", std::vector<std::string>{"var-1"}, true),
+        std::tuple("var-1 | !var/2", std::vector<std::string>{"var/2"}, false),
+        std::tuple("var-1 | !var/2", std::vector<std::string>{}, true),
+        std::tuple("!in-", std::vector<std::string>{}, true),
+        std::tuple("in/|x", std::vector<std::string>{"in/"}, true),
+        std::tuple("%true", std::vector<std::string>{""}, true),
+        std::tuple("%false", std::vector<std::string>{"false"}, false),
+        std::tuple("%true|%false", std::vector<std::string>{""}, true),
+        std::tuple("a.b.c-d.e:1234", std::vector<std::string>{"a.b.c-d.e:1234"}, true),
+        std::tuple("!a.b.c-d.e:1234", std::vector<std::string>{"a.b.c-d.e:1234"}, false)
 ));
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -165,7 +166,7 @@ TEST(TBooleanFormulaTest, ExternalOperators)
     auto aOrB = formulaA | formulaB;
     auto notA = !formulaA;
 
-    for (auto vars : std::vector<std::vector<TString>>{{}, {"a"}, {"b"}, {"a", "b"}}) {
+    for (auto vars : std::vector<std::vector<std::string>>{{}, {"a"}, {"b"}, {"a", "b"}}) {
         bool resA = formulaA.IsSatisfiedBy(vars);
         bool resB = formulaB.IsSatisfiedBy(vars);
 
@@ -175,25 +176,25 @@ TEST(TBooleanFormulaTest, ExternalOperators)
     }
 
     EXPECT_FALSE((!MakeBooleanFormula("a | b"))
-        .IsSatisfiedBy(std::vector<TString>{"b"}));
+        .IsSatisfiedBy(std::vector<std::string>{"b"}));
 
     EXPECT_EQ((formulaA & formulaB).GetFormula(), "(a) & (b)");
     EXPECT_EQ((formulaA | formulaB).GetFormula(), "(a) | (b)");
     EXPECT_EQ((!formulaA).GetFormula(), "!(a)");
 
     auto empty = MakeBooleanFormula("");
-    EXPECT_TRUE(empty.IsSatisfiedBy(THashSet<TString>{}));
-    EXPECT_FALSE((!empty).IsSatisfiedBy(THashSet<TString>{}));
-    EXPECT_TRUE((empty | !empty).IsSatisfiedBy(THashSet<TString>{}));
-
-    EXPECT_TRUE((empty | formulaA).IsSatisfiedBy(THashSet<TString>{}));
-    EXPECT_TRUE((empty | formulaA).IsSatisfiedBy(THashSet<TString>{"a"}));
-    EXPECT_TRUE((formulaA | empty).IsSatisfiedBy(THashSet<TString>{}));
-    EXPECT_TRUE((formulaA | empty).IsSatisfiedBy(THashSet<TString>{"a"}));
-    EXPECT_FALSE((empty & formulaA).IsSatisfiedBy(THashSet<TString>{}));
-    EXPECT_TRUE((empty & formulaA).IsSatisfiedBy(THashSet<TString>{"a"}));
-    EXPECT_FALSE((formulaA & empty).IsSatisfiedBy(THashSet<TString>{}));
-    EXPECT_TRUE((formulaA & empty).IsSatisfiedBy(THashSet<TString>{"a"}));
+    EXPECT_TRUE(empty.IsSatisfiedBy(THashSet<std::string>{}));
+    EXPECT_FALSE((!empty).IsSatisfiedBy(THashSet<std::string>{}));
+    EXPECT_TRUE((empty | !empty).IsSatisfiedBy(THashSet<std::string>{}));
+
+    EXPECT_TRUE((empty | formulaA).IsSatisfiedBy(THashSet<std::string>{}));
+    EXPECT_TRUE((empty | formulaA).IsSatisfiedBy(THashSet<std::string>{"a"}));
+    EXPECT_TRUE((formulaA | empty).IsSatisfiedBy(THashSet<std::string>{}));
+    EXPECT_TRUE((formulaA | empty).IsSatisfiedBy(THashSet<std::string>{"a"}));
+    EXPECT_FALSE((empty & formulaA).IsSatisfiedBy(THashSet<std::string>{}));
+    EXPECT_TRUE((empty & formulaA).IsSatisfiedBy(THashSet<std::string>{"a"}));
+    EXPECT_FALSE((formulaA & empty).IsSatisfiedBy(THashSet<std::string>{}));
+    EXPECT_TRUE((formulaA & empty).IsSatisfiedBy(THashSet<std::string>{"a"}));
 }
 
 ////////////////////////////////////////////////////////////////////////////////
diff --git a/yt/yt/core/rpc/unittests/lib/test_service.cpp b/yt/yt/core/rpc/unittests/lib/test_service.cpp
index f0994b55e367..afd60131da13 100644
--- a/yt/yt/core/rpc/unittests/lib/test_service.cpp
+++ b/yt/yt/core/rpc/unittests/lib/test_service.cpp
@@ -20,6 +20,10 @@ using namespace NConcurrency;
 
 ////////////////////////////////////////////////////////////////////////////////
 
+YT_DEFINE_GLOBAL(std::unique_ptr<NThreading::TEvent>, Latch_);
+
+////////////////////////////////////////////////////////////////////////////////
+
 class TTestService
     : public ITestService
     , public TServiceBase
@@ -54,6 +58,10 @@ class TTestService
             .SetQueueSizeLimit(20)
             .SetConcurrencyByteLimit(10_MB)
             .SetQueueByteSizeLimit(20_MB));
+        RegisterMethod(RPC_SERVICE_METHOD_DESC(LatchedCall)
+            .SetCancelable(true)
+            .SetConcurrencyLimit(10)
+            .SetQueueSizeLimit(20));
         RegisterMethod(RPC_SERVICE_METHOD_DESC(SlowCanceledCall)
             .SetCancelable(true));
         RegisterMethod(RPC_SERVICE_METHOD_DESC(RequestBytesThrottledCall));
@@ -166,6 +174,15 @@ class TTestService
         context->Reply();
     }
 
+    DECLARE_RPC_SERVICE_METHOD(NTestRpc, LatchedCall)
+    {
+        context->SetRequestInfo();
+        if (request->wait_on_latch()) {
+            Latch_()->Wait();
+        }
+        context->Reply();
+    }
+
     DECLARE_RPC_SERVICE_METHOD(NTestRpc, SlowCanceledCall)
     {
         try {
@@ -396,4 +413,29 @@ ITestServicePtr CreateTestService(
 
 ////////////////////////////////////////////////////////////////////////////////
 
+void ReleaseLatchedCalls()
+{
+    if (!Latch_()) {
+        return;
+    }
+
+    Latch_()->NotifyAll();
+}
+
+void MaybeInitLatch()
+{
+    if (!Latch_()) {
+        Latch_() = std::make_unique<NThreading::TEvent>();
+    }
+}
+
+void ResetLatch()
+{
+    if (Latch_()) {
+        Latch_().reset();
+    }
+}
+
+////////////////////////////////////////////////////////////////////////////////
+
 } // namespace NYT::NRpc
diff --git a/yt/yt/core/rpc/unittests/lib/test_service.h b/yt/yt/core/rpc/unittests/lib/test_service.h
index 3bc224eee8a3..bfb9ebd149d6 100644
--- a/yt/yt/core/rpc/unittests/lib/test_service.h
+++ b/yt/yt/core/rpc/unittests/lib/test_service.h
@@ -33,6 +33,7 @@ class TTestProxy
     DEFINE_RPC_PROXY_METHOD(NTestRpc, NotRegistered);
     DEFINE_RPC_PROXY_METHOD(NTestRpc, SlowCall);
     DEFINE_RPC_PROXY_METHOD(NTestRpc, SlowCanceledCall);
+    DEFINE_RPC_PROXY_METHOD(NTestRpc, LatchedCall);
     DEFINE_RPC_PROXY_METHOD(NTestRpc, NoReply);
     DEFINE_RPC_PROXY_METHOD(NTestRpc, FlakyCall);
     DEFINE_RPC_PROXY_METHOD(NTestRpc, RequireCoolFeature);
@@ -75,4 +76,10 @@ ITestServicePtr CreateTestService(
 
 ////////////////////////////////////////////////////////////////////////////////
 
+void ReleaseLatchedCalls();
+void MaybeInitLatch();
+void ResetLatch();
+
+////////////////////////////////////////////////////////////////////////////////
+
 } // namespace NYT::NRpc
diff --git a/yt/yt/core/rpc/unittests/lib/test_service.proto b/yt/yt/core/rpc/unittests/lib/test_service.proto
index 8ef02ef1f5d2..d126bea68f7c 100644
--- a/yt/yt/core/rpc/unittests/lib/test_service.proto
+++ b/yt/yt/core/rpc/unittests/lib/test_service.proto
@@ -130,6 +130,17 @@ message TRspSlowCanceledCall
 
 ////////////////////////////////////////////////////////////////////////////////
 
+message TReqLatchedCall
+{
+    optional bool wait_on_latch = 1 [default = true];
+}
+
+message TRspLatchedCall
+{
+}
+
+////////////////////////////////////////////////////////////////////////////////
+
 message TReqRequestBytesThrottledCall
 {
 }
diff --git a/yt/yt/core/rpc/unittests/rpc_ut.cpp b/yt/yt/core/rpc/unittests/rpc_ut.cpp
index 6b67d5f11721..146a3cad28ef 100644
--- a/yt/yt/core/rpc/unittests/rpc_ut.cpp
+++ b/yt/yt/core/rpc/unittests/rpc_ut.cpp
@@ -787,6 +787,8 @@ TYPED_TEST(TRpcTest, SlowCall)
 
 TYPED_TEST(TRpcTest, RequestQueueSizeLimit)
 {
+    MaybeInitLatch();
+
     std::vector<TFuture<void>> futures;
     std::vector<TTestProxy> proxies;
 
@@ -798,7 +800,7 @@ TYPED_TEST(TRpcTest, RequestQueueSizeLimit)
     }
 
     for (int i = 0; i <= 30; ++i) {
-        auto req = proxies[i].SlowCall();
+        auto req = proxies[i].LatchedCall();
         futures.push_back(req->Invoke().AsVoid());
     }
 
@@ -806,11 +808,14 @@ TYPED_TEST(TRpcTest, RequestQueueSizeLimit)
     {
         TTestProxy proxy(this->CreateChannel());
         proxy.SetDefaultTimeout(TDuration::Seconds(60.0));
-        auto req = proxy.SlowCall();
+        auto req = proxy.LatchedCall();
         EXPECT_EQ(NRpc::EErrorCode::RequestQueueSizeLimitExceeded, req->Invoke().Get().GetCode());
     }
+    ReleaseLatchedCalls();
 
     EXPECT_TRUE(AllSucceeded(std::move(futures)).Get().IsOK());
+
+    ResetLatch();
 }
 
 TYPED_TEST(TNotGrpcTest, RequesMemoryPressureException)
@@ -968,19 +973,15 @@ TYPED_TEST(TNotGrpcTest, RequestQueueByteSizeLimit)
 
 TYPED_TEST(TRpcTest, ConcurrencyLimit)
 {
-    auto shared_counter = std::make_shared<std::atomic<int>>(0);
+    MaybeInitLatch();
 
     std::vector<TFuture<void>> futures;
     for (int i = 0; i < 10; ++i) {
         TTestProxy proxy(this->CreateChannel());
         proxy.SetDefaultTimeout(TDuration::Seconds(10.0));
-        auto req = proxy.SlowCall();
+        auto req = proxy.LatchedCall();
         futures.push_back(
-            req->Invoke()
-                .AsVoid()
-                .Apply(BIND([counter = shared_counter] {
-                    counter->fetch_add(1);
-                })));
+            req->Invoke().AsVoid());
     }
 
     Sleep(TDuration::MilliSeconds(200));
@@ -988,18 +989,21 @@ TYPED_TEST(TRpcTest, ConcurrencyLimit)
     TFuture<void> backlogFuture;
     {
         TTestProxy proxy(this->CreateChannel());
-        auto req = proxy.SlowCall();
+        auto req = proxy.LatchedCall();
+        req->set_wait_on_latch(false);
         backlogFuture =
-            req->Invoke()
-                .AsVoid()
-                .Apply(BIND([counter = shared_counter] {
-                    EXPECT_EQ(counter->load(), 10);
-                }));
+            req->Invoke().AsVoid();
     }
 
+    Sleep(TDuration::Seconds(2));
+    EXPECT_FALSE(backlogFuture.IsSet());
+    ReleaseLatchedCalls();
+
     EXPECT_TRUE(AllSucceeded(std::move(futures)).Get().IsOK());
 
     EXPECT_TRUE(backlogFuture.Get().IsOK());
+
+    ResetLatch();
 }
 
 TYPED_TEST(TRpcTest, NoReply)
diff --git a/yt/yt/core/ytree/unittests/yson_schema_ut.cpp b/yt/yt/core/ytree/unittests/yson_schema_ut.cpp
index 220e38975a64..88df8268a290 100644
--- a/yt/yt/core/ytree/unittests/yson_schema_ut.cpp
+++ b/yt/yt/core/ytree/unittests/yson_schema_ut.cpp
@@ -157,6 +157,20 @@ struct TTestStructWithCustomType
     }
 };
 
+struct TTestStructWithUndefinedType
+    : public TYsonStruct
+{
+    NYT::NYTree::TYsonStructPtr UndefinedTypeField;
+
+    REGISTER_YSON_STRUCT(TTestStructWithUndefinedType);
+
+    static void Register(TRegistrar registrar)
+    {
+        registrar.Parameter("undefined_type_field", &TThis::UndefinedTypeField)
+            .Optional();
+    }
+};
+
 ////////////////////////////////////////////////////////////////////////////////
 
 void CheckSchema(const TYsonStructPtr& ysonStruct, TStringBuf expected)
@@ -236,6 +250,30 @@ TEST(TYsonStructSchemaTest, TestYsonStructWithCustomType)
             ]})");
 }
 
+TEST(TYsonStructSchemaTest, TestYsonStructWithUndefinedType)
+{
+    auto ysonStruct = New<TTestStructWithUndefinedType>();
+    CheckSchema(
+        ysonStruct,
+        R"({type_name="struct";
+            members=[
+                {
+                    name="undefined_type_field";
+                    type={type_name="optional";item={type_name="struct";members=[];};};
+                };
+            ]})");
+    ysonStruct->UndefinedTypeField = New<TTestSubStruct>();
+    CheckSchema(
+        ysonStruct,
+        R"({type_name="struct";
+            members=[
+                {
+                    name="undefined_type_field";
+                    type={type_name="optional";item={type_name="struct";members=[{name="my_uint";type="uint32";}]}};
+                };
+            ]})");
+}
+
 ////////////////////////////////////////////////////////////////////////////////
 
 } // namespace
