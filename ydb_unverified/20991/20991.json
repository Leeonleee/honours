{
  "repo": "ydb-platform/ydb",
  "pull_number": 20991,
  "instance_id": "ydb-platform__ydb-20991",
  "issue_numbers": [
    "20713"
  ],
  "base_commit": "2722720b3a6bb289b2a3a44663158ce9cfc431fc",
  "patch": "diff --git a/ydb/core/driver_lib/cli_base/cli_kicli.cpp b/ydb/core/driver_lib/cli_base/cli_kicli.cpp\nindex 9649ad48f992..aa1d209d8fce 100644\n--- a/ydb/core/driver_lib/cli_base/cli_kicli.cpp\n+++ b/ydb/core/driver_lib/cli_base/cli_kicli.cpp\n@@ -46,6 +46,10 @@ void PrepareRequest(TClientCommand::TConfig& config, TAutoPtr<NMsgBusProxy::TBus\n     SetToken(config, request);\n }\n \n+void PrepareRequest(TClientCommand::TConfig& config, TAutoPtr<NMsgBusProxy::TBusBlobStorageConfigRequest>& request) {\n+    SetToken(config, request);\n+}\n+\n template <>\n int OnMessageBus(const TClientCommand::TConfig& config, const NMsgBusProxy::TBusResponse& response) {\n     const NKikimrClient::TResponse& resp(response.Record);\ndiff --git a/ydb/core/driver_lib/cli_base/cli_kicli.h b/ydb/core/driver_lib/cli_base/cli_kicli.h\nindex 33a8ca2734df..0623f8a2a84b 100644\n--- a/ydb/core/driver_lib/cli_base/cli_kicli.h\n+++ b/ydb/core/driver_lib/cli_base/cli_kicli.h\n@@ -58,14 +58,15 @@ void PrepareRequest(TClientCommand::TConfig& config, TAutoPtr<NMsgBusProxy::TBus\n void PrepareRequest(TClientCommand::TConfig& config, TAutoPtr<NMsgBusProxy::TBusConsoleRequest>& request);\n void PrepareRequest(TClientCommand::TConfig& config, TAutoPtr<NMsgBusProxy::TBusFillNode>& request);\n void PrepareRequest(TClientCommand::TConfig& config, TAutoPtr<NMsgBusProxy::TBusDrainNode>& request);\n+void PrepareRequest(TClientCommand::TConfig& config, TAutoPtr<NMsgBusProxy::TBusBlobStorageConfigRequest>& request);\n \n template <typename ResponseType>\n int OnMessageBus(const TClientCommand::TConfig& config, const ResponseType& response);\n \n template <typename RequestType, typename ResponseType>\n int MessageBusCall(TClientCommand::TConfig& config, TAutoPtr<RequestType> request, std::function<int(const ResponseType&)> callback) {\n-    PrepareRequest(config, request);\n     auto handler = [&](NClient::TKikimr& kikimr) {\n+        PrepareRequest(config, request);\n         NThreading::TFuture<NClient::TResult> future(kikimr.ExecuteRequest(request.Release()));\n         return HandleResponse<NClient::TResult>(future, [&](const NClient::TResult& result) -> int {\n             if (!result.HaveResponse<ResponseType>()) {\ndiff --git a/ydb/core/driver_lib/run/run.cpp b/ydb/core/driver_lib/run/run.cpp\nindex 022f31282ba8..a5f85636590e 100644\n--- a/ydb/core/driver_lib/run/run.cpp\n+++ b/ydb/core/driver_lib/run/run.cpp\n@@ -480,6 +480,9 @@ void TKikimrRunner::InitializeMonitoring(const TKikimrRunConfig& runConfig, bool\n         if (securityConfig.MonitoringAllowedSIDsSize() > 0) {\n             monConfig.AllowedSIDs.assign(securityConfig.GetMonitoringAllowedSIDs().begin(), securityConfig.GetMonitoringAllowedSIDs().end());\n         }\n+        if (securityConfig.AdministrationAllowedSIDsSize() > 0) {\n+            monConfig.AllowedSIDs.insert(monConfig.AllowedSIDs.end(), securityConfig.GetAdministrationAllowedSIDs().begin(), securityConfig.GetAdministrationAllowedSIDs().end());\n+        }\n         monConfig.AllowOrigin = appConfig.GetMonitoringConfig().GetAllowOrigin();\n \n         if (ModuleFactories && ModuleFactories->MonitoringFactory) {\ndiff --git a/ydb/core/grpc_services/grpc_request_check_actor.h b/ydb/core/grpc_services/grpc_request_check_actor.h\nindex 973567c567f6..a7b112b59654 100644\n--- a/ydb/core/grpc_services/grpc_request_check_actor.h\n+++ b/ydb/core/grpc_services/grpc_request_check_actor.h\n@@ -42,7 +42,9 @@ bool TGRpcRequestProxyHandleMethods::ValidateAndReplyOnError(TCtx* ctx) {\n inline TVector<TEvTicketParser::TEvAuthorizeTicket::TEntry> GetEntriesForAuthAndCheckRequest(TEvRequestAuthAndCheck::TPtr& ev) {\n     const bool isBearerToken = ev->Get()->YdbToken && ev->Get()->YdbToken->StartsWith(\"Bearer\");\n     const bool useAccessService = AppData()->AuthConfig.GetUseAccessService();\n-    const bool needClusterAccessResourceCheck = AppData()->DomainsConfig.GetSecurityConfig().ViewerAllowedSIDsSize() > 0 ||\n+    const bool needClusterAccessResourceCheck =\n+                                AppData()->DomainsConfig.GetSecurityConfig().DatabaseAllowedSIDsSize() > 0 ||\n+                                AppData()->DomainsConfig.GetSecurityConfig().ViewerAllowedSIDsSize() > 0 ||\n                                 AppData()->DomainsConfig.GetSecurityConfig().MonitoringAllowedSIDsSize() > 0 ||\n                                 AppData()->DomainsConfig.GetSecurityConfig().AdministrationAllowedSIDsSize() > 0;\n \n@@ -64,7 +66,9 @@ inline TVector<TEvTicketParser::TEvAuthorizeTicket::TEntry> GetEntriesForAuthAnd\n \n inline TVector<TEvTicketParser::TEvAuthorizeTicket::TEntry> GetEntriesForClusterAccessCheck(const TVector<std::pair<TString, TString>>& rootAttributes) {\n     const bool useAccessService = AppData()->AuthConfig.GetUseAccessService();\n-    const bool needClusterAccessResourceCheck = AppData()->DomainsConfig.GetSecurityConfig().ViewerAllowedSIDsSize() > 0 ||\n+    const bool needClusterAccessResourceCheck =\n+                                AppData()->DomainsConfig.GetSecurityConfig().DatabaseAllowedSIDsSize() > 0 ||\n+                                AppData()->DomainsConfig.GetSecurityConfig().ViewerAllowedSIDsSize() > 0 ||\n                                 AppData()->DomainsConfig.GetSecurityConfig().MonitoringAllowedSIDsSize() > 0 ||\n                                 AppData()->DomainsConfig.GetSecurityConfig().AdministrationAllowedSIDsSize() > 0;\n \ndiff --git a/ydb/core/protos/config.proto b/ydb/core/protos/config.proto\nindex 187ae23b6aa1..fcf60d8c4704 100644\n--- a/ydb/core/protos/config.proto\n+++ b/ydb/core/protos/config.proto\n@@ -273,6 +273,7 @@ message TDomainsConfig {\n         repeated string ViewerAllowedSIDs = 6;\n         repeated string RegisterDynamicNodeAllowedSIDs = 8;\n         repeated string BootstrapAllowedSIDs = 9;\n+        repeated string DatabaseAllowedSIDs = 10;\n \n         message TUser {\n             optional string Name = 1;\ndiff --git a/ydb/core/viewer/json_pipe_req.cpp b/ydb/core/viewer/json_pipe_req.cpp\nindex 48e6bbe80b38..8263a2c90c3d 100644\n--- a/ydb/core/viewer/json_pipe_req.cpp\n+++ b/ydb/core/viewer/json_pipe_req.cpp\n@@ -1218,6 +1218,10 @@ bool TViewerPipeClient::NeedToRedirect() {\n             RedirectToDatabase(Database); // to find some dynamic node and redirect query there\n             return true;\n         }\n+        if (!Viewer->CheckAccessViewer(request)) {\n+            ReplyAndPassAway(GetHTTPFORBIDDEN(\"text/html\", \"<html><body><h1>403 Forbidden</h1></body></html>\"), \"Access denied\");\n+            return true;\n+        }\n     }\n     return false;\n }\ndiff --git a/ydb/core/viewer/json_pipe_req.h b/ydb/core/viewer/json_pipe_req.h\nindex fdc147bf2327..70104fbe5446 100644\n--- a/ydb/core/viewer/json_pipe_req.h\n+++ b/ydb/core/viewer/json_pipe_req.h\n@@ -278,7 +278,7 @@ class TViewerPipeClient : public TActorBootstrapped<TViewerPipeClient> {\n \n     static bool IsSuccess(const TEvTxUserProxy::TEvProposeTransactionStatus& ev);\n     static TString GetError(const TEvTxUserProxy::TEvProposeTransactionStatus& ev);\n-    \n+\n     static bool IsSuccess(const NKqp::TEvGetScriptExecutionOperationResponse& ev);\n     static TString GetError(const NKqp::TEvGetScriptExecutionOperationResponse& ev);\n \ndiff --git a/ydb/core/viewer/pdisk_restart.h b/ydb/core/viewer/pdisk_restart.h\nindex 4b29a0eb6398..1786d902d736 100644\n--- a/ydb/core/viewer/pdisk_restart.h\n+++ b/ydb/core/viewer/pdisk_restart.h\n@@ -49,7 +49,7 @@ class TJsonPDiskRestart : public TViewerPipeClient {\n             return ReplyAndPassAway(GetHTTPBADREQUEST(\"text/plain\", \"Only POST method is allowed\"));\n         }\n         if (force && !Viewer->CheckAccessAdministration(Event->Get())) {\n-            return ReplyAndPassAway(GetHTTPFORBIDDEN());\n+            return ReplyAndPassAway(GetHTTPFORBIDDEN(\"text/html\", \"<html><body><h1>403 Forbidden</h1></body></html>\"), \"Access denied\");\n         }\n \n         if (!nodeId) {\ndiff --git a/ydb/core/viewer/viewer.cpp b/ydb/core/viewer/viewer.cpp\nindex 545a8abee0bc..d5240b04648c 100644\n--- a/ydb/core/viewer/viewer.cpp\n+++ b/ydb/core/viewer/viewer.cpp\n@@ -55,17 +55,35 @@ class TViewer : public TActorBootstrapped<TViewer>, public IViewer {\n         Become(&TThis::StateWork);\n         NActors::TMon* mon = AppData(ctx)->Mon;\n         if (mon) {\n+            TVector<TString> databaseAllowedSIDs;\n             TVector<TString> viewerAllowedSIDs;\n             TVector<TString> monitoringAllowedSIDs;\n+            {\n+                const auto& protoAllowedSIDs = KikimrRunConfig.AppConfig.GetDomainsConfig().GetSecurityConfig().GetDatabaseAllowedSIDs();\n+                for (const auto& sid : protoAllowedSIDs) {\n+                    databaseAllowedSIDs.emplace_back(sid);\n+                }\n+            }\n             {\n                 const auto& protoAllowedSIDs = KikimrRunConfig.AppConfig.GetDomainsConfig().GetSecurityConfig().GetViewerAllowedSIDs();\n                 for (const auto& sid : protoAllowedSIDs) {\n+                    databaseAllowedSIDs.emplace_back(sid);\n                     viewerAllowedSIDs.emplace_back(sid);\n                 }\n             }\n             {\n                 const auto& protoAllowedSIDs = KikimrRunConfig.AppConfig.GetDomainsConfig().GetSecurityConfig().GetMonitoringAllowedSIDs();\n                 for (const auto& sid : protoAllowedSIDs) {\n+                    databaseAllowedSIDs.emplace_back(sid);\n+                    viewerAllowedSIDs.emplace_back(sid);\n+                    monitoringAllowedSIDs.emplace_back(sid);\n+                }\n+            }\n+            {\n+                const auto& protoAllowedSIDs = KikimrRunConfig.AppConfig.GetDomainsConfig().GetSecurityConfig().GetAdministrationAllowedSIDs();\n+                for (const auto& sid : protoAllowedSIDs) {\n+                    databaseAllowedSIDs.emplace_back(sid);\n+                    viewerAllowedSIDs.emplace_back(sid);\n                     monitoringAllowedSIDs.emplace_back(sid);\n                 }\n             }\n@@ -74,7 +92,7 @@ class TViewer : public TActorBootstrapped<TViewer>, public IViewer {\n                 .ActorSystem = ctx.ActorSystem(),\n                 .ActorId = ctx.SelfID,\n                 .UseAuth = true,\n-                .AllowedSIDs = viewerAllowedSIDs,\n+                .AllowedSIDs = databaseAllowedSIDs,\n             });\n             mon->RegisterActorPage({\n                 .RelPath = \"viewer/capabilities\",\n@@ -140,14 +158,14 @@ class TViewer : public TActorBootstrapped<TViewer>, public IViewer {\n                 .ActorSystem = ctx.ActorSystem(),\n                 .ActorId = ctx.SelfID,\n                 .UseAuth = true,\n-                .AllowedSIDs = viewerAllowedSIDs,\n+                .AllowedSIDs = databaseAllowedSIDs,\n             });\n             mon->RegisterActorPage({\n                 .RelPath = \"storage\",\n                 .ActorSystem = ctx.ActorSystem(),\n                 .ActorId = ctx.SelfID,\n                 .UseAuth = true,\n-                .AllowedSIDs = viewerAllowedSIDs,\n+                .AllowedSIDs = databaseAllowedSIDs,\n             });\n             if (!KikimrRunConfig.AppConfig.GetMonitoringConfig().GetHideHttpEndpoint()) {\n                 auto whiteboardServiceId = NNodeWhiteboard::MakeNodeWhiteboardServiceId(ctx.SelfID.NodeId());\n@@ -223,6 +241,18 @@ class TViewer : public TActorBootstrapped<TViewer>, public IViewer {\n         return IsTokenAllowed(userTokenObject, AppData()->DomainsConfig.GetSecurityConfig().GetAdministrationAllowedSIDs());\n     }\n \n+    bool CheckAccessViewer(const TRequestState& request) override {\n+        auto userTokenObject = request.GetUserTokenObject();\n+        if (!KikimrRunConfig.AppConfig.GetDomainsConfig().GetSecurityConfig().GetEnforceUserTokenRequirement()) {\n+            if (!KikimrRunConfig.AppConfig.GetDomainsConfig().GetSecurityConfig().GetEnforceUserTokenCheckRequirement() || userTokenObject.empty()) {\n+                return true;\n+            }\n+        }\n+        return IsTokenAllowed(userTokenObject, AppData()->DomainsConfig.GetSecurityConfig().GetViewerAllowedSIDs())\n+            || IsTokenAllowed(userTokenObject, AppData()->DomainsConfig.GetSecurityConfig().GetMonitoringAllowedSIDs())\n+            || IsTokenAllowed(userTokenObject, AppData()->DomainsConfig.GetSecurityConfig().GetAdministrationAllowedSIDs());\n+    }\n+\n     static bool IsStaticGroup(ui32 groupId) {\n         return groupId & 0x80000000 == 0;\n     }\ndiff --git a/ydb/core/viewer/viewer.h b/ydb/core/viewer/viewer.h\nindex 691f95609512..fe05669c3464 100644\n--- a/ydb/core/viewer/viewer.h\n+++ b/ydb/core/viewer/viewer.h\n@@ -297,6 +297,7 @@ class IViewer {\n     virtual TString GetHTTPNOTFOUND(const TRequestState& request) = 0;\n     virtual TString GetHTTPINTERNALERROR(const TRequestState& request, TString contentType = {}, TString response = {}) = 0;\n     virtual TString GetHTTPFORWARD(const TRequestState& request, const TString& location) = 0;\n+    virtual bool CheckAccessViewer(const TRequestState& request) = 0;\n     virtual bool CheckAccessAdministration(const TRequestState& request) = 0;\n     virtual void TranslateFromBSC2Human(const NKikimrBlobStorage::TConfigResponse& response, TString& bscError, bool& forceRetryPossible) = 0;\n     virtual TString MakeForward(const TRequestState& request, const std::vector<ui32>& nodes) = 0;\ndiff --git a/ydb/core/viewer/viewer_whoami.h b/ydb/core/viewer/viewer_whoami.h\nindex e944a2417b91..c91a2bf48f2a 100644\n--- a/ydb/core/viewer/viewer_whoami.h\n+++ b/ydb/core/viewer/viewer_whoami.h\n@@ -56,9 +56,14 @@ class TJsonWhoAmI : public TViewerPipeClient {\n \n         NACLib::TUserToken token(std::move(userToken));\n         json[\"IsTokenRequired\"] = AppData()->EnforceUserTokenRequirement;\n-        json[\"IsViewerAllowed\"] = IsTokenAllowed(&token, AppData()->DomainsConfig.GetSecurityConfig().GetViewerAllowedSIDs());\n-        json[\"IsMonitoringAllowed\"] = IsTokenAllowed(&token, AppData()->DomainsConfig.GetSecurityConfig().GetMonitoringAllowedSIDs());\n-        json[\"IsAdministrationAllowed\"] = IsTokenAllowed(&token, AppData()->DomainsConfig.GetSecurityConfig().GetAdministrationAllowedSIDs());\n+        bool isAdministrationAllowed = IsTokenAllowed(&token, AppData()->DomainsConfig.GetSecurityConfig().GetAdministrationAllowedSIDs());\n+        bool isMonitoringAllowed = isAdministrationAllowed || IsTokenAllowed(&token, AppData()->DomainsConfig.GetSecurityConfig().GetMonitoringAllowedSIDs());\n+        bool isViewerAllowed = isMonitoringAllowed || IsTokenAllowed(&token, AppData()->DomainsConfig.GetSecurityConfig().GetViewerAllowedSIDs());\n+        bool isDatabaseAllowed = isViewerAllowed || IsTokenAllowed(&token, AppData()->DomainsConfig.GetSecurityConfig().GetDatabaseAllowedSIDs());\n+        json[\"IsAdministrationAllowed\"] = isAdministrationAllowed;\n+        json[\"IsMonitoringAllowed\"] = isMonitoringAllowed;\n+        json[\"IsViewerAllowed\"] = isViewerAllowed;\n+        json[\"IsDatabaseAllowed\"] = isDatabaseAllowed;\n         TBase::ReplyAndPassAway(GetHTTPOKJSON(json));\n     }\n \n",
  "test_patch": "diff --git a/ydb/core/viewer/tests/canondata/result.json b/ydb/core/viewer/tests/canondata/result.json\nindex 6a5467975fc2..224e679871ca 100644\n--- a/ydb/core/viewer/tests/canondata/result.json\n+++ b/ydb/core/viewer/tests/canondata/result.json\n@@ -355,6 +355,140 @@\n             }\n         }\n     },\n+    \"test.test_security\": {\n+        \"cluster_nodes_database\": {\n+            \"status_code\": 403,\n+            \"text\": \"<html><body><h1>403 Forbidden</h1></body></html>\"\n+        },\n+        \"cluster_nodes_monitoring\": {\n+            \"FieldsAvailable\": \"0000000000000000000110100000011\",\n+            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FoundNodes\": \"3\",\n+            \"Nodes\": [\n+                {\n+                    \"NodeId\": 1\n+                },\n+                {\n+                    \"NodeId\": 50001\n+                },\n+                {\n+                    \"NodeId\": 50000\n+                }\n+            ],\n+            \"TotalNodes\": \"3\"\n+        },\n+        \"cluster_nodes_root\": {\n+            \"FieldsAvailable\": \"0000000000000000000110100000011\",\n+            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FoundNodes\": \"3\",\n+            \"Nodes\": [\n+                {\n+                    \"NodeId\": 1\n+                },\n+                {\n+                    \"NodeId\": 50001\n+                },\n+                {\n+                    \"NodeId\": 50000\n+                }\n+            ],\n+            \"TotalNodes\": \"3\"\n+        },\n+        \"cluster_nodes_viewer\": {\n+            \"FieldsAvailable\": \"0000000000000000000110100000011\",\n+            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FoundNodes\": \"3\",\n+            \"Nodes\": [\n+                {\n+                    \"NodeId\": 1\n+                },\n+                {\n+                    \"NodeId\": 50001\n+                },\n+                {\n+                    \"NodeId\": 50000\n+                }\n+            ],\n+            \"TotalNodes\": \"3\"\n+        },\n+        \"database_nodes_database\": {\n+            \"FieldsAvailable\": \"0000000010000000000110100000011\",\n+            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FoundNodes\": \"1\",\n+            \"Nodes\": [\n+                {\n+                    \"NodeId\": 50000\n+                }\n+            ],\n+            \"TotalNodes\": \"1\"\n+        },\n+        \"database_nodes_monitoring\": {\n+            \"FieldsAvailable\": \"0000000010000000000110100000011\",\n+            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FoundNodes\": \"1\",\n+            \"Nodes\": [\n+                {\n+                    \"NodeId\": 50000\n+                }\n+            ],\n+            \"TotalNodes\": \"1\"\n+        },\n+        \"database_nodes_root\": {\n+            \"FieldsAvailable\": \"0000000010000000000110100000011\",\n+            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FoundNodes\": \"1\",\n+            \"Nodes\": [\n+                {\n+                    \"NodeId\": 50000\n+                }\n+            ],\n+            \"TotalNodes\": \"1\"\n+        },\n+        \"database_nodes_viewer\": {\n+            \"FieldsAvailable\": \"0000000010000000000110100000011\",\n+            \"FieldsRequired\": \"0000000000000000000000000000001\",\n+            \"FoundNodes\": \"1\",\n+            \"Nodes\": [\n+                {\n+                    \"NodeId\": 50000\n+                }\n+            ],\n+            \"TotalNodes\": \"1\"\n+        },\n+        \"down_node_database\": {\n+            \"status_code\": 403,\n+            \"text\": \"<html><body><h1>403 Forbidden</h1><p><main>: Error: SID is not allowed\\n</p></body></html>\"\n+        },\n+        \"down_node_monitoring\": {\n+            \"Down\": false,\n+            \"NodeId\": 1\n+        },\n+        \"down_node_root\": {\n+            \"Down\": false,\n+            \"NodeId\": 1\n+        },\n+        \"down_node_viewer\": {\n+            \"status_code\": 403,\n+            \"text\": \"<html><body><h1>403 Forbidden</h1><p><main>: Error: SID is not allowed\\n</p></body></html>\"\n+        },\n+        \"restart_pdisk_database\": {\n+            \"status_code\": 403,\n+            \"text\": \"<html><body><h1>403 Forbidden</h1><p><main>: Error: SID is not allowed\\n</p></body></html>\"\n+        },\n+        \"restart_pdisk_monitoring\": {\n+            \"status_code\": 403,\n+            \"text\": \"<html><body><h1>403 Forbidden</h1></body></html>\"\n+        },\n+        \"restart_pdisk_root\": {\n+            \"debugMessage\": \"text\",\n+            \"error\": \"Calling this operation could cause at least 4 groups (2181038080, 2181038081, 2181038082, ...2181038083) to go into a dead state\",\n+            \"result\": false\n+        },\n+        \"restart_pdisk_viewer\": {\n+            \"status_code\": 403,\n+            \"text\": \"<html><body><h1>403 Forbidden</h1><p><main>: Error: SID is not allowed\\n</p></body></html>\"\n+        }\n+    },\n     \"test.test_storage_groups\": {\n         \"FieldsAvailable\": \"111111111111111111111\",\n         \"FieldsRequired\": \"111111111111111111111\",\n@@ -1921,7 +2055,7 @@\n                         \"Subject\": \"user1\"\n                     }\n                 ],\n-                \"Owner\": \"root@builtin\",\n+                \"Owner\": \"root\",\n                 \"Path\": \"/Root/dedicated_db\"\n             }\n         },\n@@ -2008,7 +2142,7 @@\n                         \"Subject\": \"DATABASE-ADMINS\"\n                     }\n                 ],\n-                \"Owner\": \"root@builtin\",\n+                \"Owner\": \"root\",\n                 \"Path\": \"/Root/dedicated_db\"\n             }\n         },\n@@ -2278,7 +2412,7 @@\n     },\n     \"test.test_viewer_check_access\": {\n         \"/Root\": {\n-            \"read\": true\n+            \"read\": false\n         },\n         \"/Root/dedicated_db\": {\n             \"read\": true\n@@ -2402,7 +2536,7 @@\n                         \"CreateStep\": \"not-zero-number-text\",\n                         \"CreateTxId\": \"not-zero-number-text\",\n                         \"Name\": \"dedicated_db\",\n-                        \"Owner\": \"root@builtin\",\n+                        \"Owner\": \"root\",\n                         \"ParentPathId\": \"1\",\n                         \"PathId\": \"not-zero-number-text\",\n                         \"PathState\": 2,\n@@ -2415,7 +2549,7 @@\n                         \"CreateStep\": \"not-zero-number-text\",\n                         \"CreateTxId\": \"not-zero-number-text\",\n                         \"Name\": \"serverless_db\",\n-                        \"Owner\": \"root@builtin\",\n+                        \"Owner\": \"root\",\n                         \"ParentPathId\": \"1\",\n                         \"PathId\": \"not-zero-number-text\",\n                         \"PathState\": 3,\n@@ -2428,7 +2562,7 @@\n                         \"CreateStep\": \"not-zero-number-text\",\n                         \"CreateTxId\": \"not-zero-number-text\",\n                         \"Name\": \"shared_db\",\n-                        \"Owner\": \"root@builtin\",\n+                        \"Owner\": \"root\",\n                         \"ParentPathId\": \"1\",\n                         \"PathId\": \"not-zero-number-text\",\n                         \"PathState\": 2,\n@@ -2492,13 +2626,25 @@\n                     \"SchemeShardId_Depricated\": \"72057594046678944\",\n                     \"SecurityState\": {\n                         \"Audience\": \"/Root\",\n+                        \"PublicKeys\": \"not-empty-array\",\n                         \"Sids\": [\n+                            {\n+                                \"Name\": \"monitoring\",\n+                                \"Type\": 1\n+                            },\n+                            {\n+                                \"Name\": \"viewer\",\n+                                \"Type\": 1\n+                            },\n                             {\n                                 \"Members\": [\n+                                    \"monitoring\",\n+                                    \"viewer\",\n                                     \"root\",\n                                     \"DATABASE-ADMINS\",\n                                     \"ADMINS\",\n                                     \"DDL-ADMINS\",\n+                                    \"database\",\n                                     \"ACCESS-ADMINS\",\n                                     \"DATA-WRITERS\",\n                                     \"DATA-READERS\",\n@@ -2507,6 +2653,10 @@\n                                 \"Name\": \"USERS\",\n                                 \"Type\": 2\n                             },\n+                            {\n+                                \"Name\": \"database\",\n+                                \"Type\": 1\n+                            },\n                             {\n                                 \"Members\": [\n                                     \"DDL-ADMINS\",\n@@ -2515,6 +2665,13 @@\n                                 \"Name\": \"METADATA-READERS\",\n                                 \"Type\": 2\n                             },\n+                            {\n+                                \"Members\": [\n+                                    \"root\"\n+                                ],\n+                                \"Name\": \"ADMINS\",\n+                                \"Type\": 2\n+                            },\n                             {\n                                 \"Members\": [\n                                     \"DATA-WRITERS\"\n@@ -2536,13 +2693,6 @@\n                                 \"Name\": \"DDL-ADMINS\",\n                                 \"Type\": 2\n                             },\n-                            {\n-                                \"Members\": [\n-                                    \"root\"\n-                                ],\n-                                \"Name\": \"ADMINS\",\n-                                \"Type\": 2\n-                            },\n                             {\n                                 \"Members\": [\n                                     \"DATABASE-ADMINS\"\n@@ -2586,7 +2736,7 @@\n                     \"PathState\": 2,\n                     \"PathSubType\": 0,\n                     \"PathType\": 1,\n-                    \"PathVersion\": \"12\",\n+                    \"PathVersion\": \"16\",\n                     \"SchemeshardId\": \"72057594046678944\"\n                 }\n             },\n@@ -2710,7 +2860,7 @@\n                     \"CreateTxId\": \"not-zero-number-text\",\n                     \"EffectiveACL\": \"text\",\n                     \"Name\": \"Root/dedicated_db\",\n-                    \"Owner\": \"root@builtin\",\n+                    \"Owner\": \"root\",\n                     \"ParentPathId\": \"1\",\n                     \"PathId\": \"not-zero-number-text\",\n                     \"PathState\": 2,\n@@ -2824,7 +2974,7 @@\n                     \"CreateTxId\": \"not-zero-number-text\",\n                     \"EffectiveACL\": \"text\",\n                     \"Name\": \"Root/serverless_db\",\n-                    \"Owner\": \"root@builtin\",\n+                    \"Owner\": \"root\",\n                     \"ParentPathId\": \"1\",\n                     \"PathId\": \"not-zero-number-text\",\n                     \"PathState\": 2,\n@@ -2954,7 +3104,7 @@\n                     \"CreateTxId\": \"not-zero-number-text\",\n                     \"EffectiveACL\": \"text\",\n                     \"Name\": \"Root/shared_db\",\n-                    \"Owner\": \"root@builtin\",\n+                    \"Owner\": \"root\",\n                     \"ParentPathId\": \"1\",\n                     \"PathId\": \"not-zero-number-text\",\n                     \"PathState\": 2,\n@@ -8026,7 +8176,7 @@\n                     50000\n                 ],\n                 \"Overall\": \"Green\",\n-                \"Owner\": \"root@builtin\",\n+                \"Owner\": \"root\",\n                 \"PoolStats\": [\n                     {\n                         \"Name\": \"System\",\n@@ -8086,7 +8236,7 @@\n                 \"Metrics\": \"not-empty-object\",\n                 \"Name\": \"/Root/serverless_db\",\n                 \"Overall\": \"Green\",\n-                \"Owner\": \"root@builtin\",\n+                \"Owner\": \"root\",\n                 \"ResourceId\": \"72057594046678944-7\",\n                 \"State\": \"RUNNING\",\n                 \"StateStats\": [\n@@ -8113,7 +8263,7 @@\n                     50001\n                 ],\n                 \"Overall\": \"Green\",\n-                \"Owner\": \"root@builtin\",\n+                \"Owner\": \"root\",\n                 \"PoolStats\": [\n                     {\n                         \"Name\": \"System\",\n@@ -8231,7 +8381,7 @@\n                         50000\n                     ],\n                     \"Overall\": \"Green\",\n-                    \"Owner\": \"root@builtin\",\n+                    \"Owner\": \"root\",\n                     \"PoolStats\": [\n                         {\n                             \"Name\": \"System\",\n@@ -8294,7 +8444,7 @@\n                     \"Id\": \"72057594046678944-8\",\n                     \"Metrics\": \"not-empty-object\",\n                     \"Name\": \"/Root/serverless_db\",\n-                    \"Owner\": \"root@builtin\",\n+                    \"Owner\": \"root\",\n                     \"ResourceId\": \"72057594046678944-7\",\n                     \"State\": \"RUNNING\",\n                     \"StateStats\": [\n@@ -8325,7 +8475,7 @@\n                         50001\n                     ],\n                     \"Overall\": \"Green\",\n-                    \"Owner\": \"root@builtin\",\n+                    \"Owner\": \"root\",\n                     \"PoolStats\": [\n                         {\n                             \"Name\": \"System\",\n@@ -8557,5 +8707,58 @@\n     },\n     \"test.test_wait_for_cluster_ready\": {\n         \"wait_good\": true\n+    },\n+    \"test.test_whoami_database\": {\n+        \"status_code\": 403,\n+        \"text\": \"<html><body><h1>403 Forbidden</h1></body></html>\"\n+    },\n+    \"test.test_whoami_monitoring\": {\n+        \"AuthType\": \"Login\",\n+        \"GroupSIDs\": [\n+            \"USERS\",\n+            \"all-users@well-known\"\n+        ],\n+        \"IsAdministrationAllowed\": false,\n+        \"IsDatabaseAllowed\": true,\n+        \"IsMonitoringAllowed\": true,\n+        \"IsTokenRequired\": false,\n+        \"IsViewerAllowed\": true,\n+        \"OriginalUserToken\": \"text\",\n+        \"UserSID\": \"monitoring\"\n+    },\n+    \"test.test_whoami_root\": {\n+        \"AuthType\": \"Login\",\n+        \"GroupSIDs\": [\n+            \"all-users@well-known\",\n+            \"DATA-WRITERS\",\n+            \"DDL-ADMINS\",\n+            \"METADATA-READERS\",\n+            \"ADMINS\",\n+            \"USERS\",\n+            \"DATABASE-ADMINS\",\n+            \"ACCESS-ADMINS\",\n+            \"DATA-READERS\"\n+        ],\n+        \"IsAdministrationAllowed\": true,\n+        \"IsDatabaseAllowed\": true,\n+        \"IsMonitoringAllowed\": true,\n+        \"IsTokenRequired\": false,\n+        \"IsViewerAllowed\": true,\n+        \"OriginalUserToken\": \"text\",\n+        \"UserSID\": \"root\"\n+    },\n+    \"test.test_whoami_viewer\": {\n+        \"AuthType\": \"Login\",\n+        \"GroupSIDs\": [\n+            \"USERS\",\n+            \"all-users@well-known\"\n+        ],\n+        \"IsAdministrationAllowed\": false,\n+        \"IsDatabaseAllowed\": true,\n+        \"IsMonitoringAllowed\": false,\n+        \"IsTokenRequired\": false,\n+        \"IsViewerAllowed\": true,\n+        \"OriginalUserToken\": \"text\",\n+        \"UserSID\": \"viewer\"\n     }\n }\ndiff --git a/ydb/core/viewer/tests/test.py b/ydb/core/viewer/tests/test.py\nindex 96e327bca82b..f7af905ade0f 100644\n--- a/ydb/core/viewer/tests/test.py\n+++ b/ydb/core/viewer/tests/test.py\n@@ -13,45 +13,68 @@\n import re\n \n \n-cluster = KiKiMR(KikimrConfigGenerator(extra_feature_flags={\n+config = KikimrConfigGenerator(extra_feature_flags={\n     'enable_alter_database_create_hive_first': True,\n     'enable_topic_transfer': True,\n     'enable_script_execution_operations': True,\n-    }))\n+    },\n+    enable_static_auth=True)\n+config.yaml_config['domains_config']['security_config']['enforce_user_token_requirement'] = False\n+config.yaml_config['domains_config']['security_config']['enforce_user_token_check_requirement'] = True\n+config.yaml_config['domains_config']['security_config']['database_allowed_sids'] = ['database']\n+config.yaml_config['domains_config']['security_config']['viewer_allowed_sids'] = ['viewer']\n+config.yaml_config['domains_config']['security_config']['monitoring_allowed_sids'] = ['monitoring', 'root']\n+config.yaml_config['domains_config']['security_config']['administration_allowed_sids'] = ['root']\n+cluster = KiKiMR(config)\n cluster.start()\n+\n+\n+def login_user(request):\n+    return requests.post(\"http://localhost:%s/login\" % cluster.nodes[1].mon_port, json=request)\n+\n+\n+root_session_id = login_user({'user': 'root', 'password': '1234'}).cookies.get('ydb_session_id')\n+root_token = 'Login ' + root_session_id\n+database_session_id = ''\n+viewer_session_id = ''\n+monitoring_session_id = ''\n domain_name = '/' + cluster.domain_name\n dedicated_db = domain_name + \"/dedicated_db\"\n shared_db = domain_name + \"/shared_db\"\n serverless_db = domain_name + \"/serverless_db\"\n-print('Creating database %s' % dedicated_db)\n cluster.create_database(dedicated_db,\n                         storage_pool_units_count={\n                             'hdd': 1\n-                        })\n+                        },\n+                        token=root_token)\n cluster.register_and_start_slots(dedicated_db, count=1)\n-cluster.wait_tenant_up(dedicated_db)\n+cluster.wait_tenant_up(dedicated_db, token=root_token)\n cluster.create_hostel_database(shared_db,\n                                storage_pool_units_count={\n                                    'hdd': 1\n-                               })\n+                               },\n+                               token=root_token)\n cluster.register_and_start_slots(shared_db, count=1)\n-cluster.wait_tenant_up(shared_db)\n-cluster.create_serverless_database(serverless_db, shared_db)\n-cluster.wait_tenant_up(serverless_db)\n+cluster.wait_tenant_up(shared_db, token=root_token)\n+cluster.create_serverless_database(serverless_db, shared_db, token=root_token)\n+cluster.wait_tenant_up(serverless_db, token=root_token)\n databases = [domain_name, dedicated_db, shared_db, serverless_db]\n+default_headers = {\n+    'Cookie': 'ydb_session_id=' + root_session_id,\n+}\n \n \n-def call_viewer_api_get(url, headers=None):\n+def call_viewer_api_get(url, headers=default_headers):\n     port = cluster.nodes[1].mon_port\n     return requests.get(\"http://localhost:%s%s\" % (port, url), headers=headers)\n \n \n-def call_viewer_api_post(url, body=None, headers=None):\n+def call_viewer_api_post(url, body=None, headers=default_headers):\n     port = cluster.nodes[1].mon_port\n     return requests.post(\"http://localhost:%s%s\" % (port, url), json=body, headers=headers)\n \n \n-def call_viewer_api_delete(url, headers=None):\n+def call_viewer_api_delete(url, headers=default_headers):\n     port = cluster.nodes[1].mon_port\n     return requests.delete(\"http://localhost:%s%s\" % (port, url), headers=headers)\n \n@@ -62,19 +85,19 @@ def get_result(result):\n     return {\"status_code\": result.status_code, \"text\": result.text}\n \n \n-def call_viewer(url, params=None, headers=None):\n+def call_viewer(url, params=None, headers=default_headers):\n     if params is None:\n         params = {}\n     return get_result(call_viewer_api_get(url + '?' + urlencode(params), headers))\n \n \n-def call_viewer_post(url, params=None, body=None, headers=None):\n+def call_viewer_post(url, params=None, body=None, headers=default_headers):\n     if params is None:\n         params = {}\n     return get_result(call_viewer_api_post(url + '?' + urlencode(params), body, headers))\n \n \n-def call_viewer_delete(url, params=None, headers=None):\n+def call_viewer_delete(url, params=None, headers=default_headers):\n     if params is None:\n         params = {}\n     return get_result(call_viewer_api_delete(url + '?' + urlencode(params), headers))\n@@ -114,16 +137,16 @@ def get_viewer_db_not_domain(url, params=None):\n     return call_viewer_db_not_domain(url, params)\n \n \n-def get_viewer(url, params=None):\n+def get_viewer(url, params=None, headers=default_headers):\n     if params is None:\n         params = {}\n-    return call_viewer(url, params)\n+    return call_viewer(url, params, headers)\n \n \n-def post_viewer(url, params=None, body=None):\n+def post_viewer(url, params=None, body=None, headers=default_headers):\n     if params is None:\n         params = {}\n-    return call_viewer_post(url, params, body)\n+    return call_viewer_post(url, params, body, headers)\n \n \n def delete_viewer(url, params=None):\n@@ -140,16 +163,21 @@ def delete_viewer(url, params=None):\n def wait_for_cluster_ready():\n     global wait_time\n     global wait_good\n+    global default_headers\n+    global database_session_id\n+    global viewer_session_id\n+    global monitoring_session_id\n+\n     for node_id, node in cluster.nodes.items():\n         while wait_time < max_wait_time:\n             all_good = False\n             while True:\n                 try:\n                     print(\"Waiting for node %s to be ready\" % node_id)\n-                    result_counter = get_result(requests.get(\"http://localhost:%s/viewer/simple_counter?max_counter=1&period=1\" % node.mon_port))  # check that handlers are ready\n+                    result_counter = get_result(requests.get(\"http://localhost:%s/viewer/simple_counter?max_counter=1&period=1\" % node.mon_port, headers=default_headers))\n                     if result_counter['status_code'] != 200:\n                         break\n-                    result = get_result(requests.get(\"http://localhost:%s/viewer/sysinfo?node_id=.\" % node.mon_port))  # check that stats are ready\n+                    result = get_result(requests.get(\"http://localhost:%s/viewer/sysinfo?node_id=.\" % node.mon_port, headers=default_headers))\n                     if 'status_code' in result and result.status_code != 200:\n                         break\n                     if 'SystemStateInfo' not in result or len(result['SystemStateInfo']) == 0:\n@@ -171,6 +199,21 @@ def wait_for_cluster_ready():\n                 break\n             time.sleep(1)\n             wait_time += 1\n+    call_viewer(\"/viewer/query\", {\n+        'database': domain_name,\n+        'query': 'create user database password \"2345\"'\n+    })\n+    call_viewer(\"/viewer/query\", {\n+        'database': domain_name,\n+        'query': 'create user viewer password \"3456\"'\n+    })\n+    call_viewer(\"/viewer/query\", {\n+        'database': domain_name,\n+        'query': 'create user monitoring password \"4567\"'\n+    })\n+    database_session_id = login_user({'user': 'database', 'password': '2345'}).cookies.get('ydb_session_id')\n+    viewer_session_id = login_user({'user': 'viewer', 'password': '3456'}).cookies.get('ydb_session_id')\n+    monitoring_session_id = login_user({'user': 'monitoring', 'password': '4567'}).cookies.get('ydb_session_id')\n     for database in databases:\n         if database != domain_name:\n             call_viewer(\"/viewer/query\", {\n@@ -198,12 +241,12 @@ def wait_for_cluster_ready():\n             all_good = False\n             print(\"Waiting for database %s to be ready\" % database)\n             while True:\n-                result = get_result(requests.get(\"http://localhost:%s/viewer/tenantinfo?database=%s\" % (cluster.nodes[1].mon_port, database)))  # force connect between nodes\n+                result = get_result(requests.get(\"http://localhost:%s/viewer/tenantinfo?database=%s\" % (cluster.nodes[1].mon_port, database), headers=default_headers))  # force connect between nodes\n                 if 'status_code' in result and result['status_code'] != 200:\n                     break\n                 if 'CoresUsed' not in result['TenantInfo'][0]:\n                     break\n-                result = get_result(requests.get(\"http://localhost:%s/viewer/healthcheck?database=%s\" % (cluster.nodes[1].mon_port, database)))  # force connect between nodes\n+                result = get_result(requests.get(\"http://localhost:%s/viewer/healthcheck?database=%s\" % (cluster.nodes[1].mon_port, database), headers=default_headers))  # force connect between nodes\n                 if 'status_code' in result and result['status_code'] != 200:\n                     break\n                 if result['self_check_result'] != 'GOOD':\n@@ -229,12 +272,12 @@ def wait_for_cluster_ready():\n                     bad += 1\n             if bad > 0:\n                 break\n-            result = get_result(requests.get(\"http://localhost:%s/storage/groups?fields_required=all\" % (cluster.nodes[1].mon_port)))  # force connect between nodes\n+            result = get_result(requests.get(\"http://localhost:%s/storage/groups?fields_required=all\" % (cluster.nodes[1].mon_port), headers=default_headers))  # force connect between nodes\n             if 'status_code' in result and result['status_code'] != 200:\n                 break\n             if len(result['StorageGroups']) < 5:\n                 break\n-            result = get_result(requests.get(\"http://localhost:%s/viewer/cluster\" % (cluster.nodes[1].mon_port)))  # force connect between nodes\n+            result = get_result(requests.get(\"http://localhost:%s/viewer/cluster\" % (cluster.nodes[1].mon_port), headers=default_headers))  # force connect between nodes\n             if 'status_code' in result and result['status_code'] != 200:\n                 break\n             if 'StorageTotal' not in result or result['StorageTotal'] == 0:\n@@ -258,6 +301,28 @@ def test_wait_for_cluster_ready():\n     return {\"wait_good\": wait_good}\n \n \n+def test_whoami_root():\n+    return get_viewer_normalized(\"/viewer/whoami\")\n+\n+\n+def test_whoami_database():\n+    return get_viewer_normalized(\"/viewer/whoami\", headers={\n+        'Cookie': 'ydb_session_id=' + database_session_id,\n+    })\n+\n+\n+def test_whoami_viewer():\n+    return get_viewer_normalized(\"/viewer/whoami\", headers={\n+        'Cookie': 'ydb_session_id=' + viewer_session_id,\n+    })\n+\n+\n+def test_whoami_monitoring():\n+    return get_viewer_normalized(\"/viewer/whoami\", headers={\n+        'Cookie': 'ydb_session_id=' + monitoring_session_id,\n+    })\n+\n+\n def test_counter():\n     return get_viewer(\"/viewer/simple_counter\", {'max_counter': 1})\n \n@@ -457,6 +522,8 @@ def normalize_result_schema(result):\n                                           'EffectiveACL',\n                                           'CreateTxId',\n                                           'PathId',\n+                                          'PublicKeys',\n+                                          'OriginalUserToken',\n                                           ])\n \n \n@@ -510,8 +577,8 @@ def normalize_result(result):\n     return result\n \n \n-def get_viewer_normalized(url, params=None):\n-    return normalize_result(get_viewer(url, params))\n+def get_viewer_normalized(url, params=None, headers=default_headers):\n+    return normalize_result(get_viewer(url, params, headers))\n \n \n def get_viewer_db_normalized(url, params=None):\n@@ -1127,3 +1194,115 @@ def test_viewer_query_long_multipart():\n     result['fetch_error_stream_response'] = normalize_multipart_response(response_fetch_error_stream)\n \n     return result\n+\n+\n+def test_security():\n+    result = {}\n+    result['database_nodes_root'] = get_viewer_normalized(\"/viewer/nodes\", params={\n+        'database': dedicated_db,\n+        'fields_required': 'NodeId',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + root_session_id,\n+    })\n+    result['database_nodes_monitoring'] = get_viewer_normalized(\"/viewer/nodes\", params={\n+        'database': dedicated_db,\n+        'fields_required': 'NodeId',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + monitoring_session_id,\n+    })\n+    result['database_nodes_viewer'] = get_viewer_normalized(\"/viewer/nodes\", params={\n+        'database': dedicated_db,\n+        'fields_required': 'NodeId',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + viewer_session_id,\n+    })\n+    result['database_nodes_database'] = get_viewer_normalized(\"/viewer/nodes\", params={\n+        'database': dedicated_db,\n+        'fields_required': 'NodeId',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + database_session_id,\n+    })\n+\n+    result['cluster_nodes_root'] = get_viewer_normalized(\"/viewer/nodes\", params={\n+        'fields_required': 'NodeId',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + root_session_id,\n+    })\n+    result['cluster_nodes_monitoring'] = get_viewer_normalized(\"/viewer/nodes\", params={\n+        'fields_required': 'NodeId',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + monitoring_session_id,\n+    })\n+    result['cluster_nodes_viewer'] = get_viewer_normalized(\"/viewer/nodes\", params={\n+        'fields_required': 'NodeId',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + viewer_session_id,\n+    })\n+    result['cluster_nodes_database'] = get_viewer_normalized(\"/viewer/nodes\", params={\n+        'fields_required': 'NodeId',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + database_session_id,\n+    })\n+\n+    result['down_node_root'] = get_viewer(\"/tablets/app\", params={\n+        'TabletID': '72057594037968897',\n+        'page': 'SetDown',\n+        'node': '1',\n+        'down': '0',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + root_session_id,\n+    })\n+    result['down_node_monitoring'] = get_viewer(\"/tablets/app\", params={\n+        'TabletID': '72057594037968897',\n+        'page': 'SetDown',\n+        'node': '1',\n+        'down': '0',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + monitoring_session_id,\n+    })\n+    result['down_node_viewer'] = get_viewer(\"/tablets/app\", params={\n+        'TabletID': '72057594037968897',\n+        'page': 'SetDown',\n+        'node': '1',\n+        'down': '0',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + viewer_session_id,\n+    })\n+    result['down_node_database'] = get_viewer(\"/tablets/app\", params={\n+        'TabletID': '72057594037968897',\n+        'page': 'SetDown',\n+        'node': '1',\n+        'down': '0',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + database_session_id,\n+    })\n+\n+    result['restart_pdisk_root'] = replace_values_by_key(post_viewer(\"/pdisk/restart\", body={\n+        'node_id': '1',\n+        'pdisk_id': '1',\n+        'force': '1',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + root_session_id,\n+    }), ['debugMessage'])\n+    result['restart_pdisk_monitoring'] = post_viewer(\"/pdisk/restart\", body={\n+        'node_id': '1',\n+        'pdisk_id': '1',\n+        'force': '1',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + monitoring_session_id,\n+    })\n+    result['restart_pdisk_viewer'] = post_viewer(\"/pdisk/restart\", body={\n+        'node_id': '1',\n+        'pdisk_id': '1',\n+        'force': '1',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + viewer_session_id,\n+    })\n+    result['restart_pdisk_database'] = post_viewer(\"/pdisk/restart\", body={\n+        'node_id': '1',\n+        'pdisk_id': '1',\n+        'force': '1',\n+    }, headers={\n+        'Cookie': 'ydb_session_id=' + database_session_id,\n+    })\n+    return result\ndiff --git a/ydb/tests/library/clients/kikimr_client.py b/ydb/tests/library/clients/kikimr_client.py\nindex 87d7150dfdbc..e16515fe2140 100644\n--- a/ydb/tests/library/clients/kikimr_client.py\n+++ b/ydb/tests/library/clients/kikimr_client.py\n@@ -173,8 +173,10 @@ def __poll(self, flat_transaction_response):\n             'SchemeOperationStatus'\n         )\n \n-    def bind_storage_pools(self, domain_name, spools):\n+    def bind_storage_pools(self, domain_name, spools, token=None):\n         request = msgbus.TSchemeOperation()\n+        if token:\n+            request.SecurityToken = token\n         scheme_transaction = request.Transaction\n         scheme_operation = scheme_transaction.ModifyScheme\n         scheme_operation.WorkingDir = '/'\ndiff --git a/ydb/tests/library/harness/kikimr_config.py b/ydb/tests/library/harness/kikimr_config.py\nindex f51e98ef31ad..2c23cab17a55 100644\n--- a/ydb/tests/library/harness/kikimr_config.py\n+++ b/ydb/tests/library/harness/kikimr_config.py\n@@ -176,6 +176,7 @@ def __init__(\n             bridge_config=None,\n             memory_controller_config=None,\n             verbose_memory_limit_exception=False,\n+            enable_static_auth=False,\n     ):\n         if extra_feature_flags is None:\n             extra_feature_flags = []\n@@ -541,6 +542,11 @@ def __init__(\n             security_config = self.yaml_config[\"domains_config\"][\"security_config\"]\n             security_config.setdefault(\"administration_allowed_sids\", []).append(self.__default_clusteradmin)\n             security_config.setdefault(\"default_access\", []).append('+F:{}'.format(self.__default_clusteradmin))\n+        self.__enable_static_auth = enable_static_auth\n+\n+    @property\n+    def enable_static_auth(self):\n+        return self.__enable_static_auth\n \n     @property\n     def default_clusteradmin(self):\ndiff --git a/ydb/tests/library/harness/kikimr_runner.py b/ydb/tests/library/harness/kikimr_runner.py\nindex c0b49151e50c..99ad01ada803 100644\n--- a/ydb/tests/library/harness/kikimr_runner.py\n+++ b/ydb/tests/library/harness/kikimr_runner.py\n@@ -10,6 +10,7 @@\n from google.protobuf import text_format\n import yaml\n import subprocess\n+import requests\n \n from six.moves.queue import Queue\n \n@@ -388,6 +389,12 @@ def __call_kikimr_new_cli(self, cmd, connect_to_server=True, token=None):\n         if token is not None:\n             env = os.environ.copy()\n             env['YDB_TOKEN'] = token\n+        elif self.__configurator.enable_static_auth:\n+            # If no token is provided, use the default user from the configuration\n+            default_user = next(iter(self.__configurator.yaml_config[\"domains_config\"][\"security_config\"][\"default_users\"]))\n+            env = os.environ.copy()\n+            env['YDB_USER'] = default_user[\"name\"]\n+            env['YDB_PASSWORD'] = default_user[\"password\"]\n \n         logger.debug(\"Executing command = {}\".format(full_command))\n         try:\n@@ -494,8 +501,17 @@ def __run(self):\n             )\n             pools[p['name']] = p['kind']\n \n+        root_token = self.__configurator.default_clusteradmin\n+        if not root_token and self.__configurator.enable_static_auth:\n+            root_token = requests.post(\"http://localhost:%s/login\" % self.nodes[1].mon_port, json={\n+                \"user\": self.__configurator.yaml_config[\"domains_config\"][\"security_config\"][\"default_users\"][0][\"name\"],\n+                \"password\": self.__configurator.yaml_config[\"domains_config\"][\"security_config\"][\"default_users\"][0][\"password\"]\n+            }).cookies.get('ydb_session_id')\n+            logger.info(\"Obtained root token: %s\" % root_token)\n+\n         if len(pools) > 0:\n-            self.client.bind_storage_pools(self.domain_name, pools)\n+            logger.info(\"Binding storage pools to domain %s: %s\", self.domain_name, pools)\n+            self.client.bind_storage_pools(self.domain_name, pools, token=root_token)\n             default_pool_name = list(pools.keys())[0]\n         else:\n             default_pool_name = \"\"\n@@ -504,7 +520,7 @@ def __run(self):\n         logger.info(\"Cluster started and initialized\")\n \n         if bs_needed:\n-            self.client.add_config_item(read_binary(__name__, \"resources/default_profile.txt\"), token=self.__configurator.default_clusteradmin)\n+            self.client.add_config_item(read_binary(__name__, \"resources/default_profile.txt\"), token=root_token)\n \n     def __run_node(self, node_id):\n         \"\"\"\ndiff --git a/ydb/tests/library/ya.make b/ydb/tests/library/ya.make\nindex 330cd6058d7e..f35b69d91842 100644\n--- a/ydb/tests/library/ya.make\n+++ b/ydb/tests/library/ya.make\n@@ -76,6 +76,7 @@ PEERDIR(\n     contrib/python/importlib-resources\n     contrib/python/protobuf\n     contrib/python/pytest\n+    contrib/python/requests\n     contrib/python/setuptools\n     contrib/python/six\n     ydb/public/sdk/python\n",
  "problem_statement": "create ui role for managed db users\nlets name id \"DatabaseAllowedSIDs\"\n",
  "hints_text": "",
  "created_at": "2025-07-11T10:59:27Z"
}