diff --git a/ydb/core/viewer/tests/canondata/result.json b/ydb/core/viewer/tests/canondata/result.json
index 6a5467975fc2..224e679871ca 100644
--- a/ydb/core/viewer/tests/canondata/result.json
+++ b/ydb/core/viewer/tests/canondata/result.json
@@ -355,6 +355,140 @@
             }
         }
     },
+    "test.test_security": {
+        "cluster_nodes_database": {
+            "status_code": 403,
+            "text": "<html><body><h1>403 Forbidden</h1></body></html>"
+        },
+        "cluster_nodes_monitoring": {
+            "FieldsAvailable": "0000000000000000000110100000011",
+            "FieldsRequired": "0000000000000000000000000000001",
+            "FoundNodes": "3",
+            "Nodes": [
+                {
+                    "NodeId": 1
+                },
+                {
+                    "NodeId": 50001
+                },
+                {
+                    "NodeId": 50000
+                }
+            ],
+            "TotalNodes": "3"
+        },
+        "cluster_nodes_root": {
+            "FieldsAvailable": "0000000000000000000110100000011",
+            "FieldsRequired": "0000000000000000000000000000001",
+            "FoundNodes": "3",
+            "Nodes": [
+                {
+                    "NodeId": 1
+                },
+                {
+                    "NodeId": 50001
+                },
+                {
+                    "NodeId": 50000
+                }
+            ],
+            "TotalNodes": "3"
+        },
+        "cluster_nodes_viewer": {
+            "FieldsAvailable": "0000000000000000000110100000011",
+            "FieldsRequired": "0000000000000000000000000000001",
+            "FoundNodes": "3",
+            "Nodes": [
+                {
+                    "NodeId": 1
+                },
+                {
+                    "NodeId": 50001
+                },
+                {
+                    "NodeId": 50000
+                }
+            ],
+            "TotalNodes": "3"
+        },
+        "database_nodes_database": {
+            "FieldsAvailable": "0000000010000000000110100000011",
+            "FieldsRequired": "0000000000000000000000000000001",
+            "FoundNodes": "1",
+            "Nodes": [
+                {
+                    "NodeId": 50000
+                }
+            ],
+            "TotalNodes": "1"
+        },
+        "database_nodes_monitoring": {
+            "FieldsAvailable": "0000000010000000000110100000011",
+            "FieldsRequired": "0000000000000000000000000000001",
+            "FoundNodes": "1",
+            "Nodes": [
+                {
+                    "NodeId": 50000
+                }
+            ],
+            "TotalNodes": "1"
+        },
+        "database_nodes_root": {
+            "FieldsAvailable": "0000000010000000000110100000011",
+            "FieldsRequired": "0000000000000000000000000000001",
+            "FoundNodes": "1",
+            "Nodes": [
+                {
+                    "NodeId": 50000
+                }
+            ],
+            "TotalNodes": "1"
+        },
+        "database_nodes_viewer": {
+            "FieldsAvailable": "0000000010000000000110100000011",
+            "FieldsRequired": "0000000000000000000000000000001",
+            "FoundNodes": "1",
+            "Nodes": [
+                {
+                    "NodeId": 50000
+                }
+            ],
+            "TotalNodes": "1"
+        },
+        "down_node_database": {
+            "status_code": 403,
+            "text": "<html><body><h1>403 Forbidden</h1><p><main>: Error: SID is not allowed
</p></body></html>"
+        },
+        "down_node_monitoring": {
+            "Down": false,
+            "NodeId": 1
+        },
+        "down_node_root": {
+            "Down": false,
+            "NodeId": 1
+        },
+        "down_node_viewer": {
+            "status_code": 403,
+            "text": "<html><body><h1>403 Forbidden</h1><p><main>: Error: SID is not allowed
</p></body></html>"
+        },
+        "restart_pdisk_database": {
+            "status_code": 403,
+            "text": "<html><body><h1>403 Forbidden</h1><p><main>: Error: SID is not allowed
</p></body></html>"
+        },
+        "restart_pdisk_monitoring": {
+            "status_code": 403,
+            "text": "<html><body><h1>403 Forbidden</h1></body></html>"
+        },
+        "restart_pdisk_root": {
+            "debugMessage": "text",
+            "error": "Calling this operation could cause at least 4 groups (2181038080, 2181038081, 2181038082, ...2181038083) to go into a dead state",
+            "result": false
+        },
+        "restart_pdisk_viewer": {
+            "status_code": 403,
+            "text": "<html><body><h1>403 Forbidden</h1><p><main>: Error: SID is not allowed
</p></body></html>"
+        }
+    },
     "test.test_storage_groups": {
         "FieldsAvailable": "111111111111111111111",
         "FieldsRequired": "111111111111111111111",
@@ -1921,7 +2055,7 @@
                         "Subject": "user1"
                     }
                 ],
-                "Owner": "root@builtin",
+                "Owner": "root",
                 "Path": "/Root/dedicated_db"
             }
         },
@@ -2008,7 +2142,7 @@
                         "Subject": "DATABASE-ADMINS"
                     }
                 ],
-                "Owner": "root@builtin",
+                "Owner": "root",
                 "Path": "/Root/dedicated_db"
             }
         },
@@ -2278,7 +2412,7 @@
     },
     "test.test_viewer_check_access": {
         "/Root": {
-            "read": true
+            "read": false
         },
         "/Root/dedicated_db": {
             "read": true
@@ -2402,7 +2536,7 @@
                         "CreateStep": "not-zero-number-text",
                         "CreateTxId": "not-zero-number-text",
                         "Name": "dedicated_db",
-                        "Owner": "root@builtin",
+                        "Owner": "root",
                         "ParentPathId": "1",
                         "PathId": "not-zero-number-text",
                         "PathState": 2,
@@ -2415,7 +2549,7 @@
                         "CreateStep": "not-zero-number-text",
                         "CreateTxId": "not-zero-number-text",
                         "Name": "serverless_db",
-                        "Owner": "root@builtin",
+                        "Owner": "root",
                         "ParentPathId": "1",
                         "PathId": "not-zero-number-text",
                         "PathState": 3,
@@ -2428,7 +2562,7 @@
                         "CreateStep": "not-zero-number-text",
                         "CreateTxId": "not-zero-number-text",
                         "Name": "shared_db",
-                        "Owner": "root@builtin",
+                        "Owner": "root",
                         "ParentPathId": "1",
                         "PathId": "not-zero-number-text",
                         "PathState": 2,
@@ -2492,13 +2626,25 @@
                     "SchemeShardId_Depricated": "72057594046678944",
                     "SecurityState": {
                         "Audience": "/Root",
+                        "PublicKeys": "not-empty-array",
                         "Sids": [
+                            {
+                                "Name": "monitoring",
+                                "Type": 1
+                            },
+                            {
+                                "Name": "viewer",
+                                "Type": 1
+                            },
                             {
                                 "Members": [
+                                    "monitoring",
+                                    "viewer",
                                     "root",
                                     "DATABASE-ADMINS",
                                     "ADMINS",
                                     "DDL-ADMINS",
+                                    "database",
                                     "ACCESS-ADMINS",
                                     "DATA-WRITERS",
                                     "DATA-READERS",
@@ -2507,6 +2653,10 @@
                                 "Name": "USERS",
                                 "Type": 2
                             },
+                            {
+                                "Name": "database",
+                                "Type": 1
+                            },
                             {
                                 "Members": [
                                     "DDL-ADMINS",
@@ -2515,6 +2665,13 @@
                                 "Name": "METADATA-READERS",
                                 "Type": 2
                             },
+                            {
+                                "Members": [
+                                    "root"
+                                ],
+                                "Name": "ADMINS",
+                                "Type": 2
+                            },
                             {
                                 "Members": [
                                     "DATA-WRITERS"
@@ -2536,13 +2693,6 @@
                                 "Name": "DDL-ADMINS",
                                 "Type": 2
                             },
-                            {
-                                "Members": [
-                                    "root"
-                                ],
-                                "Name": "ADMINS",
-                                "Type": 2
-                            },
                             {
                                 "Members": [
                                     "DATABASE-ADMINS"
@@ -2586,7 +2736,7 @@
                     "PathState": 2,
                     "PathSubType": 0,
                     "PathType": 1,
-                    "PathVersion": "12",
+                    "PathVersion": "16",
                     "SchemeshardId": "72057594046678944"
                 }
             },
@@ -2710,7 +2860,7 @@
                     "CreateTxId": "not-zero-number-text",
                     "EffectiveACL": "text",
                     "Name": "Root/dedicated_db",
-                    "Owner": "root@builtin",
+                    "Owner": "root",
                     "ParentPathId": "1",
                     "PathId": "not-zero-number-text",
                     "PathState": 2,
@@ -2824,7 +2974,7 @@
                     "CreateTxId": "not-zero-number-text",
                     "EffectiveACL": "text",
                     "Name": "Root/serverless_db",
-                    "Owner": "root@builtin",
+                    "Owner": "root",
                     "ParentPathId": "1",
                     "PathId": "not-zero-number-text",
                     "PathState": 2,
@@ -2954,7 +3104,7 @@
                     "CreateTxId": "not-zero-number-text",
                     "EffectiveACL": "text",
                     "Name": "Root/shared_db",
-                    "Owner": "root@builtin",
+                    "Owner": "root",
                     "ParentPathId": "1",
                     "PathId": "not-zero-number-text",
                     "PathState": 2,
@@ -8026,7 +8176,7 @@
                     50000
                 ],
                 "Overall": "Green",
-                "Owner": "root@builtin",
+                "Owner": "root",
                 "PoolStats": [
                     {
                         "Name": "System",
@@ -8086,7 +8236,7 @@
                 "Metrics": "not-empty-object",
                 "Name": "/Root/serverless_db",
                 "Overall": "Green",
-                "Owner": "root@builtin",
+                "Owner": "root",
                 "ResourceId": "72057594046678944-7",
                 "State": "RUNNING",
                 "StateStats": [
@@ -8113,7 +8263,7 @@
                     50001
                 ],
                 "Overall": "Green",
-                "Owner": "root@builtin",
+                "Owner": "root",
                 "PoolStats": [
                     {
                         "Name": "System",
@@ -8231,7 +8381,7 @@
                         50000
                     ],
                     "Overall": "Green",
-                    "Owner": "root@builtin",
+                    "Owner": "root",
                     "PoolStats": [
                         {
                             "Name": "System",
@@ -8294,7 +8444,7 @@
                     "Id": "72057594046678944-8",
                     "Metrics": "not-empty-object",
                     "Name": "/Root/serverless_db",
-                    "Owner": "root@builtin",
+                    "Owner": "root",
                     "ResourceId": "72057594046678944-7",
                     "State": "RUNNING",
                     "StateStats": [
@@ -8325,7 +8475,7 @@
                         50001
                     ],
                     "Overall": "Green",
-                    "Owner": "root@builtin",
+                    "Owner": "root",
                     "PoolStats": [
                         {
                             "Name": "System",
@@ -8557,5 +8707,58 @@
     },
     "test.test_wait_for_cluster_ready": {
         "wait_good": true
+    },
+    "test.test_whoami_database": {
+        "status_code": 403,
+        "text": "<html><body><h1>403 Forbidden</h1></body></html>"
+    },
+    "test.test_whoami_monitoring": {
+        "AuthType": "Login",
+        "GroupSIDs": [
+            "USERS",
+            "all-users@well-known"
+        ],
+        "IsAdministrationAllowed": false,
+        "IsDatabaseAllowed": true,
+        "IsMonitoringAllowed": true,
+        "IsTokenRequired": false,
+        "IsViewerAllowed": true,
+        "OriginalUserToken": "text",
+        "UserSID": "monitoring"
+    },
+    "test.test_whoami_root": {
+        "AuthType": "Login",
+        "GroupSIDs": [
+            "all-users@well-known",
+            "DATA-WRITERS",
+            "DDL-ADMINS",
+            "METADATA-READERS",
+            "ADMINS",
+            "USERS",
+            "DATABASE-ADMINS",
+            "ACCESS-ADMINS",
+            "DATA-READERS"
+        ],
+        "IsAdministrationAllowed": true,
+        "IsDatabaseAllowed": true,
+        "IsMonitoringAllowed": true,
+        "IsTokenRequired": false,
+        "IsViewerAllowed": true,
+        "OriginalUserToken": "text",
+        "UserSID": "root"
+    },
+    "test.test_whoami_viewer": {
+        "AuthType": "Login",
+        "GroupSIDs": [
+            "USERS",
+            "all-users@well-known"
+        ],
+        "IsAdministrationAllowed": false,
+        "IsDatabaseAllowed": true,
+        "IsMonitoringAllowed": false,
+        "IsTokenRequired": false,
+        "IsViewerAllowed": true,
+        "OriginalUserToken": "text",
+        "UserSID": "viewer"
     }
 }
diff --git a/ydb/core/viewer/tests/test.py b/ydb/core/viewer/tests/test.py
index 96e327bca82b..f7af905ade0f 100644
--- a/ydb/core/viewer/tests/test.py
+++ b/ydb/core/viewer/tests/test.py
@@ -13,45 +13,68 @@
 import re
 
 
-cluster = KiKiMR(KikimrConfigGenerator(extra_feature_flags={
+config = KikimrConfigGenerator(extra_feature_flags={
     'enable_alter_database_create_hive_first': True,
     'enable_topic_transfer': True,
     'enable_script_execution_operations': True,
-    }))
+    },
+    enable_static_auth=True)
+config.yaml_config['domains_config']['security_config']['enforce_user_token_requirement'] = False
+config.yaml_config['domains_config']['security_config']['enforce_user_token_check_requirement'] = True
+config.yaml_config['domains_config']['security_config']['database_allowed_sids'] = ['database']
+config.yaml_config['domains_config']['security_config']['viewer_allowed_sids'] = ['viewer']
+config.yaml_config['domains_config']['security_config']['monitoring_allowed_sids'] = ['monitoring', 'root']
+config.yaml_config['domains_config']['security_config']['administration_allowed_sids'] = ['root']
+cluster = KiKiMR(config)
 cluster.start()
+
+
+def login_user(request):
+    return requests.post("http://localhost:%s/login" % cluster.nodes[1].mon_port, json=request)
+
+
+root_session_id = login_user({'user': 'root', 'password': '1234'}).cookies.get('ydb_session_id')
+root_token = 'Login ' + root_session_id
+database_session_id = ''
+viewer_session_id = ''
+monitoring_session_id = ''
 domain_name = '/' + cluster.domain_name
 dedicated_db = domain_name + "/dedicated_db"
 shared_db = domain_name + "/shared_db"
 serverless_db = domain_name + "/serverless_db"
-print('Creating database %s' % dedicated_db)
 cluster.create_database(dedicated_db,
                         storage_pool_units_count={
                             'hdd': 1
-                        })
+                        },
+                        token=root_token)
 cluster.register_and_start_slots(dedicated_db, count=1)
-cluster.wait_tenant_up(dedicated_db)
+cluster.wait_tenant_up(dedicated_db, token=root_token)
 cluster.create_hostel_database(shared_db,
                                storage_pool_units_count={
                                    'hdd': 1
-                               })
+                               },
+                               token=root_token)
 cluster.register_and_start_slots(shared_db, count=1)
-cluster.wait_tenant_up(shared_db)
-cluster.create_serverless_database(serverless_db, shared_db)
-cluster.wait_tenant_up(serverless_db)
+cluster.wait_tenant_up(shared_db, token=root_token)
+cluster.create_serverless_database(serverless_db, shared_db, token=root_token)
+cluster.wait_tenant_up(serverless_db, token=root_token)
 databases = [domain_name, dedicated_db, shared_db, serverless_db]
+default_headers = {
+    'Cookie': 'ydb_session_id=' + root_session_id,
+}
 
 
-def call_viewer_api_get(url, headers=None):
+def call_viewer_api_get(url, headers=default_headers):
     port = cluster.nodes[1].mon_port
     return requests.get("http://localhost:%s%s" % (port, url), headers=headers)
 
 
-def call_viewer_api_post(url, body=None, headers=None):
+def call_viewer_api_post(url, body=None, headers=default_headers):
     port = cluster.nodes[1].mon_port
     return requests.post("http://localhost:%s%s" % (port, url), json=body, headers=headers)
 
 
-def call_viewer_api_delete(url, headers=None):
+def call_viewer_api_delete(url, headers=default_headers):
     port = cluster.nodes[1].mon_port
     return requests.delete("http://localhost:%s%s" % (port, url), headers=headers)
 
@@ -62,19 +85,19 @@ def get_result(result):
     return {"status_code": result.status_code, "text": result.text}
 
 
-def call_viewer(url, params=None, headers=None):
+def call_viewer(url, params=None, headers=default_headers):
     if params is None:
         params = {}
     return get_result(call_viewer_api_get(url + '?' + urlencode(params), headers))
 
 
-def call_viewer_post(url, params=None, body=None, headers=None):
+def call_viewer_post(url, params=None, body=None, headers=default_headers):
     if params is None:
         params = {}
     return get_result(call_viewer_api_post(url + '?' + urlencode(params), body, headers))
 
 
-def call_viewer_delete(url, params=None, headers=None):
+def call_viewer_delete(url, params=None, headers=default_headers):
     if params is None:
         params = {}
     return get_result(call_viewer_api_delete(url + '?' + urlencode(params), headers))
@@ -114,16 +137,16 @@ def get_viewer_db_not_domain(url, params=None):
     return call_viewer_db_not_domain(url, params)
 
 
-def get_viewer(url, params=None):
+def get_viewer(url, params=None, headers=default_headers):
     if params is None:
         params = {}
-    return call_viewer(url, params)
+    return call_viewer(url, params, headers)
 
 
-def post_viewer(url, params=None, body=None):
+def post_viewer(url, params=None, body=None, headers=default_headers):
     if params is None:
         params = {}
-    return call_viewer_post(url, params, body)
+    return call_viewer_post(url, params, body, headers)
 
 
 def delete_viewer(url, params=None):
@@ -140,16 +163,21 @@ def delete_viewer(url, params=None):
 def wait_for_cluster_ready():
     global wait_time
     global wait_good
+    global default_headers
+    global database_session_id
+    global viewer_session_id
+    global monitoring_session_id
+
     for node_id, node in cluster.nodes.items():
         while wait_time < max_wait_time:
             all_good = False
             while True:
                 try:
                     print("Waiting for node %s to be ready" % node_id)
-                    result_counter = get_result(requests.get("http://localhost:%s/viewer/simple_counter?max_counter=1&period=1" % node.mon_port))  # check that handlers are ready
+                    result_counter = get_result(requests.get("http://localhost:%s/viewer/simple_counter?max_counter=1&period=1" % node.mon_port, headers=default_headers))
                     if result_counter['status_code'] != 200:
                         break
-                    result = get_result(requests.get("http://localhost:%s/viewer/sysinfo?node_id=." % node.mon_port))  # check that stats are ready
+                    result = get_result(requests.get("http://localhost:%s/viewer/sysinfo?node_id=." % node.mon_port, headers=default_headers))
                     if 'status_code' in result and result.status_code != 200:
                         break
                     if 'SystemStateInfo' not in result or len(result['SystemStateInfo']) == 0:
@@ -171,6 +199,21 @@ def wait_for_cluster_ready():
                 break
             time.sleep(1)
             wait_time += 1
+    call_viewer("/viewer/query", {
+        'database': domain_name,
+        'query': 'create user database password "2345"'
+    })
+    call_viewer("/viewer/query", {
+        'database': domain_name,
+        'query': 'create user viewer password "3456"'
+    })
+    call_viewer("/viewer/query", {
+        'database': domain_name,
+        'query': 'create user monitoring password "4567"'
+    })
+    database_session_id = login_user({'user': 'database', 'password': '2345'}).cookies.get('ydb_session_id')
+    viewer_session_id = login_user({'user': 'viewer', 'password': '3456'}).cookies.get('ydb_session_id')
+    monitoring_session_id = login_user({'user': 'monitoring', 'password': '4567'}).cookies.get('ydb_session_id')
     for database in databases:
         if database != domain_name:
             call_viewer("/viewer/query", {
@@ -198,12 +241,12 @@ def wait_for_cluster_ready():
             all_good = False
             print("Waiting for database %s to be ready" % database)
             while True:
-                result = get_result(requests.get("http://localhost:%s/viewer/tenantinfo?database=%s" % (cluster.nodes[1].mon_port, database)))  # force connect between nodes
+                result = get_result(requests.get("http://localhost:%s/viewer/tenantinfo?database=%s" % (cluster.nodes[1].mon_port, database), headers=default_headers))  # force connect between nodes
                 if 'status_code' in result and result['status_code'] != 200:
                     break
                 if 'CoresUsed' not in result['TenantInfo'][0]:
                     break
-                result = get_result(requests.get("http://localhost:%s/viewer/healthcheck?database=%s" % (cluster.nodes[1].mon_port, database)))  # force connect between nodes
+                result = get_result(requests.get("http://localhost:%s/viewer/healthcheck?database=%s" % (cluster.nodes[1].mon_port, database), headers=default_headers))  # force connect between nodes
                 if 'status_code' in result and result['status_code'] != 200:
                     break
                 if result['self_check_result'] != 'GOOD':
@@ -229,12 +272,12 @@ def wait_for_cluster_ready():
                     bad += 1
             if bad > 0:
                 break
-            result = get_result(requests.get("http://localhost:%s/storage/groups?fields_required=all" % (cluster.nodes[1].mon_port)))  # force connect between nodes
+            result = get_result(requests.get("http://localhost:%s/storage/groups?fields_required=all" % (cluster.nodes[1].mon_port), headers=default_headers))  # force connect between nodes
             if 'status_code' in result and result['status_code'] != 200:
                 break
             if len(result['StorageGroups']) < 5:
                 break
-            result = get_result(requests.get("http://localhost:%s/viewer/cluster" % (cluster.nodes[1].mon_port)))  # force connect between nodes
+            result = get_result(requests.get("http://localhost:%s/viewer/cluster" % (cluster.nodes[1].mon_port), headers=default_headers))  # force connect between nodes
             if 'status_code' in result and result['status_code'] != 200:
                 break
             if 'StorageTotal' not in result or result['StorageTotal'] == 0:
@@ -258,6 +301,28 @@ def test_wait_for_cluster_ready():
     return {"wait_good": wait_good}
 
 
+def test_whoami_root():
+    return get_viewer_normalized("/viewer/whoami")
+
+
+def test_whoami_database():
+    return get_viewer_normalized("/viewer/whoami", headers={
+        'Cookie': 'ydb_session_id=' + database_session_id,
+    })
+
+
+def test_whoami_viewer():
+    return get_viewer_normalized("/viewer/whoami", headers={
+        'Cookie': 'ydb_session_id=' + viewer_session_id,
+    })
+
+
+def test_whoami_monitoring():
+    return get_viewer_normalized("/viewer/whoami", headers={
+        'Cookie': 'ydb_session_id=' + monitoring_session_id,
+    })
+
+
 def test_counter():
     return get_viewer("/viewer/simple_counter", {'max_counter': 1})
 
@@ -457,6 +522,8 @@ def normalize_result_schema(result):
                                           'EffectiveACL',
                                           'CreateTxId',
                                           'PathId',
+                                          'PublicKeys',
+                                          'OriginalUserToken',
                                           ])
 
 
@@ -510,8 +577,8 @@ def normalize_result(result):
     return result
 
 
-def get_viewer_normalized(url, params=None):
-    return normalize_result(get_viewer(url, params))
+def get_viewer_normalized(url, params=None, headers=default_headers):
+    return normalize_result(get_viewer(url, params, headers))
 
 
 def get_viewer_db_normalized(url, params=None):
@@ -1127,3 +1194,115 @@ def test_viewer_query_long_multipart():
     result['fetch_error_stream_response'] = normalize_multipart_response(response_fetch_error_stream)
 
     return result
+
+
+def test_security():
+    result = {}
+    result['database_nodes_root'] = get_viewer_normalized("/viewer/nodes", params={
+        'database': dedicated_db,
+        'fields_required': 'NodeId',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + root_session_id,
+    })
+    result['database_nodes_monitoring'] = get_viewer_normalized("/viewer/nodes", params={
+        'database': dedicated_db,
+        'fields_required': 'NodeId',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + monitoring_session_id,
+    })
+    result['database_nodes_viewer'] = get_viewer_normalized("/viewer/nodes", params={
+        'database': dedicated_db,
+        'fields_required': 'NodeId',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + viewer_session_id,
+    })
+    result['database_nodes_database'] = get_viewer_normalized("/viewer/nodes", params={
+        'database': dedicated_db,
+        'fields_required': 'NodeId',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + database_session_id,
+    })
+
+    result['cluster_nodes_root'] = get_viewer_normalized("/viewer/nodes", params={
+        'fields_required': 'NodeId',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + root_session_id,
+    })
+    result['cluster_nodes_monitoring'] = get_viewer_normalized("/viewer/nodes", params={
+        'fields_required': 'NodeId',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + monitoring_session_id,
+    })
+    result['cluster_nodes_viewer'] = get_viewer_normalized("/viewer/nodes", params={
+        'fields_required': 'NodeId',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + viewer_session_id,
+    })
+    result['cluster_nodes_database'] = get_viewer_normalized("/viewer/nodes", params={
+        'fields_required': 'NodeId',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + database_session_id,
+    })
+
+    result['down_node_root'] = get_viewer("/tablets/app", params={
+        'TabletID': '72057594037968897',
+        'page': 'SetDown',
+        'node': '1',
+        'down': '0',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + root_session_id,
+    })
+    result['down_node_monitoring'] = get_viewer("/tablets/app", params={
+        'TabletID': '72057594037968897',
+        'page': 'SetDown',
+        'node': '1',
+        'down': '0',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + monitoring_session_id,
+    })
+    result['down_node_viewer'] = get_viewer("/tablets/app", params={
+        'TabletID': '72057594037968897',
+        'page': 'SetDown',
+        'node': '1',
+        'down': '0',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + viewer_session_id,
+    })
+    result['down_node_database'] = get_viewer("/tablets/app", params={
+        'TabletID': '72057594037968897',
+        'page': 'SetDown',
+        'node': '1',
+        'down': '0',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + database_session_id,
+    })
+
+    result['restart_pdisk_root'] = replace_values_by_key(post_viewer("/pdisk/restart", body={
+        'node_id': '1',
+        'pdisk_id': '1',
+        'force': '1',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + root_session_id,
+    }), ['debugMessage'])
+    result['restart_pdisk_monitoring'] = post_viewer("/pdisk/restart", body={
+        'node_id': '1',
+        'pdisk_id': '1',
+        'force': '1',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + monitoring_session_id,
+    })
+    result['restart_pdisk_viewer'] = post_viewer("/pdisk/restart", body={
+        'node_id': '1',
+        'pdisk_id': '1',
+        'force': '1',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + viewer_session_id,
+    })
+    result['restart_pdisk_database'] = post_viewer("/pdisk/restart", body={
+        'node_id': '1',
+        'pdisk_id': '1',
+        'force': '1',
+    }, headers={
+        'Cookie': 'ydb_session_id=' + database_session_id,
+    })
+    return result
diff --git a/ydb/tests/library/clients/kikimr_client.py b/ydb/tests/library/clients/kikimr_client.py
index 87d7150dfdbc..e16515fe2140 100644
--- a/ydb/tests/library/clients/kikimr_client.py
+++ b/ydb/tests/library/clients/kikimr_client.py
@@ -173,8 +173,10 @@ def __poll(self, flat_transaction_response):
             'SchemeOperationStatus'
         )
 
-    def bind_storage_pools(self, domain_name, spools):
+    def bind_storage_pools(self, domain_name, spools, token=None):
         request = msgbus.TSchemeOperation()
+        if token:
+            request.SecurityToken = token
         scheme_transaction = request.Transaction
         scheme_operation = scheme_transaction.ModifyScheme
         scheme_operation.WorkingDir = '/'
diff --git a/ydb/tests/library/harness/kikimr_config.py b/ydb/tests/library/harness/kikimr_config.py
index f51e98ef31ad..2c23cab17a55 100644
--- a/ydb/tests/library/harness/kikimr_config.py
+++ b/ydb/tests/library/harness/kikimr_config.py
@@ -176,6 +176,7 @@ def __init__(
             bridge_config=None,
             memory_controller_config=None,
             verbose_memory_limit_exception=False,
+            enable_static_auth=False,
     ):
         if extra_feature_flags is None:
             extra_feature_flags = []
@@ -541,6 +542,11 @@ def __init__(
             security_config = self.yaml_config["domains_config"]["security_config"]
             security_config.setdefault("administration_allowed_sids", []).append(self.__default_clusteradmin)
             security_config.setdefault("default_access", []).append('+F:{}'.format(self.__default_clusteradmin))
+        self.__enable_static_auth = enable_static_auth
+
+    @property
+    def enable_static_auth(self):
+        return self.__enable_static_auth
 
     @property
     def default_clusteradmin(self):
diff --git a/ydb/tests/library/harness/kikimr_runner.py b/ydb/tests/library/harness/kikimr_runner.py
index c0b49151e50c..99ad01ada803 100644
--- a/ydb/tests/library/harness/kikimr_runner.py
+++ b/ydb/tests/library/harness/kikimr_runner.py
@@ -10,6 +10,7 @@
 from google.protobuf import text_format
 import yaml
 import subprocess
+import requests
 
 from six.moves.queue import Queue
 
@@ -388,6 +389,12 @@ def __call_kikimr_new_cli(self, cmd, connect_to_server=True, token=None):
         if token is not None:
             env = os.environ.copy()
             env['YDB_TOKEN'] = token
+        elif self.__configurator.enable_static_auth:
+            # If no token is provided, use the default user from the configuration
+            default_user = next(iter(self.__configurator.yaml_config["domains_config"]["security_config"]["default_users"]))
+            env = os.environ.copy()
+            env['YDB_USER'] = default_user["name"]
+            env['YDB_PASSWORD'] = default_user["password"]
 
         logger.debug("Executing command = {}".format(full_command))
         try:
@@ -494,8 +501,17 @@ def __run(self):
             )
             pools[p['name']] = p['kind']
 
+        root_token = self.__configurator.default_clusteradmin
+        if not root_token and self.__configurator.enable_static_auth:
+            root_token = requests.post("http://localhost:%s/login" % self.nodes[1].mon_port, json={
+                "user": self.__configurator.yaml_config["domains_config"]["security_config"]["default_users"][0]["name"],
+                "password": self.__configurator.yaml_config["domains_config"]["security_config"]["default_users"][0]["password"]
+            }).cookies.get('ydb_session_id')
+            logger.info("Obtained root token: %s" % root_token)
+
         if len(pools) > 0:
-            self.client.bind_storage_pools(self.domain_name, pools)
+            logger.info("Binding storage pools to domain %s: %s", self.domain_name, pools)
+            self.client.bind_storage_pools(self.domain_name, pools, token=root_token)
             default_pool_name = list(pools.keys())[0]
         else:
             default_pool_name = ""
@@ -504,7 +520,7 @@ def __run(self):
         logger.info("Cluster started and initialized")
 
         if bs_needed:
-            self.client.add_config_item(read_binary(__name__, "resources/default_profile.txt"), token=self.__configurator.default_clusteradmin)
+            self.client.add_config_item(read_binary(__name__, "resources/default_profile.txt"), token=root_token)
 
     def __run_node(self, node_id):
         """
diff --git a/ydb/tests/library/ya.make b/ydb/tests/library/ya.make
index 330cd6058d7e..f35b69d91842 100644
--- a/ydb/tests/library/ya.make
+++ b/ydb/tests/library/ya.make
@@ -76,6 +76,7 @@ PEERDIR(
     contrib/python/importlib-resources
     contrib/python/protobuf
     contrib/python/pytest
+    contrib/python/requests
     contrib/python/setuptools
     contrib/python/six
     ydb/public/sdk/python
