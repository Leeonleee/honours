You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
`corr(x, y)` with constant columns should return `NaN`, not `NULL`
### What happens?

The `corr` aggregate should return `NaN` when a column is constant, not `NULL`, same as `0 / 0` returns `NaN` not `NULL` anymore since v1.1.

EDIT: can't check right now but it should be verified if the same issue exists for `regr_slope`



### To Reproduce

```sql
SELECT 
    corr(x, x)
FROM
    (SELECT 1 AS x UNION ALL SELECT 1 AS x);
````
```
┌────────────┐
│ corr(x, x) │
│   double   │
├────────────┤
│       NULL │
└────────────┘
```

### OS:

Linux

### DuckDB Version:

1.1.0

### DuckDB Client:

Python

### Hardware:

x64

### Full Name:

Soeren Wolfers

### Affiliation:

G-Research

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation/) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/core_functions/aggregate/distributive/skew.cpp]
1: #include "duckdb/core_functions/aggregate/distributive_functions.hpp"
2: #include "duckdb/common/exception.hpp"
3: #include "duckdb/common/vector_operations/vector_operations.hpp"
4: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
5: #include "duckdb/common/algorithm.hpp"
6: 
7: namespace duckdb {
8: 
9: struct SkewState {
10: 	size_t n;
11: 	double sum;
12: 	double sum_sqr;
13: 	double sum_cub;
14: };
15: 
16: struct SkewnessOperation {
17: 	template <class STATE>
18: 	static void Initialize(STATE &state) {
19: 		state.n = 0;
20: 		state.sum = state.sum_sqr = state.sum_cub = 0;
21: 	}
22: 
23: 	template <class INPUT_TYPE, class STATE, class OP>
24: 	static void ConstantOperation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input,
25: 	                              idx_t count) {
26: 		for (idx_t i = 0; i < count; i++) {
27: 			Operation<INPUT_TYPE, STATE, OP>(state, input, unary_input);
28: 		}
29: 	}
30: 
31: 	template <class INPUT_TYPE, class STATE, class OP>
32: 	static void Operation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input) {
33: 		state.n++;
34: 		state.sum += input;
35: 		state.sum_sqr += pow(input, 2);
36: 		state.sum_cub += pow(input, 3);
37: 	}
38: 
39: 	template <class STATE, class OP>
40: 	static void Combine(const STATE &source, STATE &target, AggregateInputData &) {
41: 		if (source.n == 0) {
42: 			return;
43: 		}
44: 
45: 		target.n += source.n;
46: 		target.sum += source.sum;
47: 		target.sum_sqr += source.sum_sqr;
48: 		target.sum_cub += source.sum_cub;
49: 	}
50: 
51: 	template <class TARGET_TYPE, class STATE>
52: 	static void Finalize(STATE &state, TARGET_TYPE &target, AggregateFinalizeData &finalize_data) {
53: 		if (state.n <= 2) {
54: 			finalize_data.ReturnNull();
55: 			return;
56: 		}
57: 		double n = state.n;
58: 		double temp = 1 / n;
59: 		auto p = std::pow(temp * (state.sum_sqr - state.sum * state.sum * temp), 3);
60: 		if (p < 0) {
61: 			p = 0; // Shouldn't be below 0 but floating points are weird
62: 		}
63: 		double div = std::sqrt(p);
64: 		if (div == 0) {
65: 			target = NAN;
66: 			return;
67: 		}
68: 		double temp1 = std::sqrt(n * (n - 1)) / (n - 2);
69: 		target = temp1 * temp *
70: 		         (state.sum_cub - 3 * state.sum_sqr * state.sum * temp + 2 * pow(state.sum, 3) * temp * temp) / div;
71: 		if (!Value::DoubleIsFinite(target)) {
72: 			throw OutOfRangeException("SKEW is out of range!");
73: 		}
74: 	}
75: 
76: 	static bool IgnoreNull() {
77: 		return true;
78: 	}
79: };
80: 
81: AggregateFunction SkewnessFun::GetFunction() {
82: 	return AggregateFunction::UnaryAggregate<SkewState, double, double, SkewnessOperation>(LogicalType::DOUBLE,
83: 	                                                                                       LogicalType::DOUBLE);
84: }
85: 
86: } // namespace duckdb
[end of src/core_functions/aggregate/distributive/skew.cpp]
[start of src/core_functions/aggregate/regression/regr_intercept.cpp]
1: //! AVG(y)-REGR_SLOPE(y,x)*AVG(x)
2: 
3: #include "duckdb/core_functions/aggregate/regression_functions.hpp"
4: #include "duckdb/core_functions/aggregate/regression/regr_slope.hpp"
5: #include "duckdb/function/function_set.hpp"
6: 
7: namespace duckdb {
8: 
9: struct RegrInterceptState {
10: 	size_t count;
11: 	double sum_x;
12: 	double sum_y;
13: 	RegrSlopeState slope;
14: };
15: 
16: struct RegrInterceptOperation {
17: 	template <class STATE>
18: 	static void Initialize(STATE &state) {
19: 		state.count = 0;
20: 		state.sum_x = 0;
21: 		state.sum_y = 0;
22: 		RegrSlopeOperation::Initialize<RegrSlopeState>(state.slope);
23: 	}
24: 
25: 	template <class A_TYPE, class B_TYPE, class STATE, class OP>
26: 	static void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {
27: 		state.count++;
28: 		state.sum_x += x;
29: 		state.sum_y += y;
30: 		RegrSlopeOperation::Operation<A_TYPE, B_TYPE, RegrSlopeState, OP>(state.slope, y, x, idata);
31: 	}
32: 
33: 	template <class STATE, class OP>
34: 	static void Combine(const STATE &source, STATE &target, AggregateInputData &aggr_input_data) {
35: 		target.count += source.count;
36: 		target.sum_x += source.sum_x;
37: 		target.sum_y += source.sum_y;
38: 		RegrSlopeOperation::Combine<RegrSlopeState, OP>(source.slope, target.slope, aggr_input_data);
39: 	}
40: 
41: 	template <class T, class STATE>
42: 	static void Finalize(STATE &state, T &target, AggregateFinalizeData &finalize_data) {
43: 		if (state.count == 0) {
44: 			finalize_data.ReturnNull();
45: 			return;
46: 		}
47: 		RegrSlopeOperation::Finalize<T, RegrSlopeState>(state.slope, target, finalize_data);
48: 		if (Value::IsNan(target)) {
49: 			finalize_data.ReturnNull();
50: 			return;
51: 		}
52: 		auto x_avg = state.sum_x / state.count;
53: 		auto y_avg = state.sum_y / state.count;
54: 		target = y_avg - target * x_avg;
55: 	}
56: 
57: 	static bool IgnoreNull() {
58: 		return true;
59: 	}
60: };
61: 
62: AggregateFunction RegrInterceptFun::GetFunction() {
63: 	return AggregateFunction::BinaryAggregate<RegrInterceptState, double, double, double, RegrInterceptOperation>(
64: 	    LogicalType::DOUBLE, LogicalType::DOUBLE, LogicalType::DOUBLE);
65: }
66: 
67: } // namespace duckdb
[end of src/core_functions/aggregate/regression/regr_intercept.cpp]
[start of src/include/duckdb/core_functions/aggregate/algebraic/corr.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/core_functions/aggregate/algebraic/corr.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/function/aggregate_function.hpp"
12: #include "duckdb/core_functions/aggregate/algebraic/covar.hpp"
13: #include "duckdb/core_functions/aggregate/algebraic/stddev.hpp"
14: 
15: namespace duckdb {
16: 
17: struct CorrState {
18: 	CovarState cov_pop;
19: 	StddevState dev_pop_x;
20: 	StddevState dev_pop_y;
21: };
22: 
23: // Returns the correlation coefficient for non-null pairs in a group.
24: // CORR(y, x) = COVAR_POP(y, x) / (STDDEV_POP(x) * STDDEV_POP(y))
25: struct CorrOperation {
26: 	template <class STATE>
27: 	static void Initialize(STATE &state) {
28: 		CovarOperation::Initialize<CovarState>(state.cov_pop);
29: 		STDDevBaseOperation::Initialize<StddevState>(state.dev_pop_x);
30: 		STDDevBaseOperation::Initialize<StddevState>(state.dev_pop_y);
31: 	}
32: 
33: 	template <class A_TYPE, class B_TYPE, class STATE, class OP>
34: 	static void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {
35: 		CovarOperation::Operation<A_TYPE, B_TYPE, CovarState, OP>(state.cov_pop, y, x, idata);
36: 		STDDevBaseOperation::Execute<A_TYPE, StddevState>(state.dev_pop_x, x);
37: 		STDDevBaseOperation::Execute<B_TYPE, StddevState>(state.dev_pop_y, y);
38: 	}
39: 
40: 	template <class STATE, class OP>
41: 	static void Combine(const STATE &source, STATE &target, AggregateInputData &aggr_input_data) {
42: 		CovarOperation::Combine<CovarState, OP>(source.cov_pop, target.cov_pop, aggr_input_data);
43: 		STDDevBaseOperation::Combine<StddevState, OP>(source.dev_pop_x, target.dev_pop_x, aggr_input_data);
44: 		STDDevBaseOperation::Combine<StddevState, OP>(source.dev_pop_y, target.dev_pop_y, aggr_input_data);
45: 	}
46: 
47: 	template <class T, class STATE>
48: 	static void Finalize(STATE &state, T &target, AggregateFinalizeData &finalize_data) {
49: 		if (state.cov_pop.count == 0 || state.dev_pop_x.count == 0 || state.dev_pop_y.count == 0) {
50: 			finalize_data.ReturnNull();
51: 		} else {
52: 			auto cov = state.cov_pop.co_moment / state.cov_pop.count;
53: 			auto std_x = state.dev_pop_x.count > 1 ? sqrt(state.dev_pop_x.dsquared / state.dev_pop_x.count) : 0;
54: 			if (!Value::DoubleIsFinite(std_x)) {
55: 				throw OutOfRangeException("STDDEV_POP for X is out of range!");
56: 			}
57: 			auto std_y = state.dev_pop_y.count > 1 ? sqrt(state.dev_pop_y.dsquared / state.dev_pop_y.count) : 0;
58: 			if (!Value::DoubleIsFinite(std_y)) {
59: 				throw OutOfRangeException("STDDEV_POP for Y is out of range!");
60: 			}
61: 			target = std_x * std_y != 0 ? cov / (std_x * std_y) : NAN;
62: 		}
63: 	}
64: 
65: 	static bool IgnoreNull() {
66: 		return true;
67: 	}
68: };
69: 
70: } // namespace duckdb
[end of src/include/duckdb/core_functions/aggregate/algebraic/corr.hpp]
[start of src/include/duckdb/core_functions/aggregate/regression/regr_slope.hpp]
1: // REGR_SLOPE(y, x)
2: // Returns the slope of the linear regression line for non-null pairs in a group.
3: // It is computed for non-null pairs using the following formula:
4: // COVAR_POP(x,y) / VAR_POP(x)
5: 
6: //! Input : Any numeric type
7: //! Output : Double
8: 
9: #pragma once
10: #include "duckdb/core_functions/aggregate/algebraic/stddev.hpp"
11: #include "duckdb/core_functions/aggregate/algebraic/covar.hpp"
12: 
13: namespace duckdb {
14: 
15: struct RegrSlopeState {
16: 	CovarState cov_pop;
17: 	StddevState var_pop;
18: };
19: 
20: struct RegrSlopeOperation {
21: 	template <class STATE>
22: 	static void Initialize(STATE &state) {
23: 		CovarOperation::Initialize<CovarState>(state.cov_pop);
24: 		STDDevBaseOperation::Initialize<StddevState>(state.var_pop);
25: 	}
26: 
27: 	template <class A_TYPE, class B_TYPE, class STATE, class OP>
28: 	static void Operation(STATE &state, const A_TYPE &y, const B_TYPE &x, AggregateBinaryInput &idata) {
29: 		CovarOperation::Operation<A_TYPE, B_TYPE, CovarState, OP>(state.cov_pop, y, x, idata);
30: 		STDDevBaseOperation::Execute<A_TYPE, StddevState>(state.var_pop, x);
31: 	}
32: 
33: 	template <class STATE, class OP>
34: 	static void Combine(const STATE &source, STATE &target, AggregateInputData &aggr_input_data) {
35: 		CovarOperation::Combine<CovarState, OP>(source.cov_pop, target.cov_pop, aggr_input_data);
36: 		STDDevBaseOperation::Combine<StddevState, OP>(source.var_pop, target.var_pop, aggr_input_data);
37: 	}
38: 
39: 	template <class T, class STATE>
40: 	static void Finalize(STATE &state, T &target, AggregateFinalizeData &finalize_data) {
41: 		if (state.cov_pop.count == 0 || state.var_pop.count == 0) {
42: 			finalize_data.ReturnNull();
43: 		} else {
44: 			auto cov = state.cov_pop.co_moment / state.cov_pop.count;
45: 			auto var_pop = state.var_pop.count > 1 ? (state.var_pop.dsquared / state.var_pop.count) : 0;
46: 			if (!Value::DoubleIsFinite(var_pop)) {
47: 				throw OutOfRangeException("VARPOP is out of range!");
48: 			}
49: 			target = var_pop != 0 ? cov / var_pop : NAN;
50: 		}
51: 	}
52: 
53: 	static bool IgnoreNull() {
54: 		return true;
55: 	}
56: };
57: } // namespace duckdb
[end of src/include/duckdb/core_functions/aggregate/regression/regr_slope.hpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: