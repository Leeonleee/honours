{
  "repo": "duckdb/duckdb",
  "pull_number": 6978,
  "instance_id": "duckdb__duckdb-6978",
  "issue_numbers": [
    "6932"
  ],
  "base_commit": "05ec2cc675ec3aac2d4de17f392629bf3b74111d",
  "patch": "diff --git a/tools/pythonpkg/src/vector_conversion.cpp b/tools/pythonpkg/src/vector_conversion.cpp\nindex 1805ef3ba535..4141f701ea13 100644\n--- a/tools/pythonpkg/src/vector_conversion.cpp\n+++ b/tools/pythonpkg/src/vector_conversion.cpp\n@@ -311,7 +311,7 @@ void VectorConversion::NumpyToDuckDB(PandasColumnBindData &bind_data, py::array\n \n \t\t\t// Get the pointer to the object\n \t\t\tPyObject *val = src_ptr[source_idx];\n-\t\t\tif (bind_data.pandas_type == PandasType::OBJECT && !PyUnicode_CheckExact(val)) {\n+\t\t\tif (bind_data.pandas_type == PandasType::OBJECT && !py::isinstance<py::str>(val)) {\n \t\t\t\tif (val == Py_None) {\n \t\t\t\t\tout_mask.SetInvalid(row);\n \t\t\t\t\tcontinue;\n@@ -344,7 +344,7 @@ void VectorConversion::NumpyToDuckDB(PandasColumnBindData &bind_data, py::array\n \t\t\t}\n \t\t\t// Python 3 string representation:\n \t\t\t// https://github.com/python/cpython/blob/3a8fdb28794b2f19f6c8464378fb8b46bce1f5f4/Include/cpython/unicodeobject.h#L79\n-\t\t\tif (!PyUnicode_CheckExact(val)) {\n+\t\t\tif (!py::isinstance<py::str>(val)) {\n \t\t\t\tout_mask.SetInvalid(row);\n \t\t\t\tcontinue;\n \t\t\t}\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/pandas/test_df_object_resolution.py b/tools/pythonpkg/tests/fast/pandas/test_df_object_resolution.py\nindex 5a9c216b06fc..fc23fd4fba41 100644\n--- a/tools/pythonpkg/tests/fast/pandas/test_df_object_resolution.py\n+++ b/tools/pythonpkg/tests/fast/pandas/test_df_object_resolution.py\n@@ -371,6 +371,13 @@ def test_double_object_conversion(self):\n         double_dtype = np.dtype('float64')\n         assert isinstance(converted_col['0'].dtype, double_dtype.__class__) == True\n \n+    def test_numpy_stringliterals(self):\n+        con = duckdb.connect()\n+        df = pd.DataFrame({\"x\": list(map(np.str_, range(3)))})\n+\n+        res = con.execute(\"select * from df\").fetchall()\n+        assert res == [('0',), ('1',), ('2',)]\n+\n     def test_integer_conversion_fail(self):\n         data = [2**10000, 0]\n         x = pd.DataFrame({'0': pd.Series(data=data, dtype='object')})\n",
  "problem_statement": "DuckDB returns bogus values for numpy string scalars\n### What happens?\r\n\r\nDuckDB returns `None` values for DataFrame columns whose data are composed of numpy `str_` scalars.\r\n\r\nEncountered in https://github.com/ibis-project/ibis/issues/5879.\r\n\r\n### To Reproduce\r\n\r\n```\r\nIn [18]: import duckdb, numpy as np, pandas as pd\r\n\r\nIn [19]: df = pd.DataFrame({\"x\": list(map(np.str_, range(3))), \"y\": list(range(3))})\r\n\r\nIn [20]: con.execute(\"select * from df\").fetchall()\r\nOut[20]: [(None, 0), (None, 1), (None, 2)]\r\n```\r\n\r\nI haven't tried this on `master`.\r\n\r\n### OS:\r\n\r\nNixOS\r\n\r\n### DuckDB Version:\r\n\r\n0.7.1\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nPhillip Cloud\r\n\r\n### Affiliation:\r\n\r\nVoltron Data\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "On master I can reproduce this \ud83d\udc4d \r\n\r\nWhat is the expected behavior here? What is ` numpy.str_` scalar supposed to represent is what I'm wondering\r\nThe `df` prints as:\r\n```\r\n   x  y\r\n0  0  0\r\n1  1  1\r\n2  2  2\r\n```\r\nSo I'm guessing they're supposed to represent just strings?\nYep, they should be strings. They print like numbers due to the way pandas reprs the DataFrame. Perhaps `[\"a\", \"b\", \"c\"]` is a better test case \ud83d\ude05\nThere's already a `UNICODE` enum variant in the codebase, but it's not handled anywhere in `vector_conversion.cpp`.",
  "created_at": "2023-04-05T10:07:58Z"
}