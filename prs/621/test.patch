diff --git a/test/rigger/test_rigger.cpp b/test/rigger/test_rigger.cpp
index 37644302d706..18f1be727a28 100644
--- a/test/rigger/test_rigger.cpp
+++ b/test/rigger/test_rigger.cpp
@@ -678,4 +678,55 @@ TEST_CASE("Tests found by Rigger", "[rigger]") {
 		result = con.Query("SELECT MIN(100000000000000000<<t0.rowid) FROM t0 WHERE NOT c0;");
 		REQUIRE(CHECK_COLUMN(result, 0, {Value::BIGINT(-8802109549835190272LL)}));
 	}
+	SECTION("618") {
+		// Failed ALTER COLUMN results in a "Transaction conflict" error that cannot be aborted
+		REQUIRE_NO_FAIL(con.Query("CREATE TABLE t0(c0 DATE);"));
+		REQUIRE_NO_FAIL(con.Query("INSERT INTO t0 VALUES (DATE '2000-01-01');"));
+		REQUIRE_FAIL(con.Query("ALTER TABLE t0 ALTER COLUMN c0 SET DATA TYPE INT;"));
+		REQUIRE_NO_FAIL(con.Query("INSERT INTO t0 VALUES (DEFAULT);"));
+	}
+	SECTION("619") {
+		// Query on altered table results in a segmentation fault
+		REQUIRE_NO_FAIL(con.Query("CREATE TABLE t0(c0 INT UNIQUE, c1 DATE);"));
+		REQUIRE_NO_FAIL(con.Query("ALTER TABLE t0 ALTER c1 TYPE INT;"));
+		REQUIRE_NO_FAIL(con.Query("INSERT INTO t0(c0) VALUES(-1);"));
+
+		result = con.Query("SELECT * FROM t0 WHERE c0 < 0;");
+		REQUIRE(CHECK_COLUMN(result, 0, {-1}));
+		REQUIRE(CHECK_COLUMN(result, 1, {Value()}));
+	}
+	SECTION("622") {
+		// UPDATE on altered table results in an error "Could not find node in column segment tree"
+		REQUIRE_NO_FAIL(con.Query("CREATE TABLE t0(c0 TIMESTAMP);"));
+		REQUIRE_NO_FAIL(con.Query("INSERT INTO t0 VALUES(NULL);"));
+		REQUIRE_NO_FAIL(con.Query("DELETE FROM t0;"));
+		REQUIRE_NO_FAIL(con.Query("ALTER TABLE t0 ALTER c0 TYPE DATE;"));
+		REQUIRE_NO_FAIL(con.Query("INSERT INTO t0 VALUES(NULL);"));
+		REQUIRE_NO_FAIL(con.Query("UPDATE t0 SET c0 = '1969-12-18'; "));
+	}
+	SECTION("624") {
+		// ALTER TABLE results in an assertion failure "Assertion `expr.return_type == vector.type' failed"
+		REQUIRE_NO_FAIL(con.Query("CREATE TABLE t0(c0 INT, c1 VARCHAR);"));
+		REQUIRE_NO_FAIL(con.Query("INSERT INTO t0(c1) VALUES(NULL);"));
+		REQUIRE_NO_FAIL(con.Query("ALTER TABLE t0 ALTER c1 TYPE TIMESTAMP;"));
+	}
+	SECTION("625") {
+		// DROP column results in an assertion failure unique.index < base.columns.size()
+		REQUIRE_NO_FAIL(con.Query("CREATE TABLE t0(c0 INT, c INT UNIQUE);"));
+		// we don't support this case yet
+		REQUIRE_FAIL(con.Query("ALTER TABLE t0 DROP c0;"));
+		// check that unique constraint still works
+		REQUIRE_NO_FAIL(con.Query("INSERT INTO t0 (c) VALUES (1);"));
+		REQUIRE_FAIL(con.Query("INSERT INTO t0 (c) VALUES (1);"));
+	}
+	SECTION("628") {
+		// DROP column results in an assertion failure unique.index < base.columns.size()
+		REQUIRE_NO_FAIL(con.Query("CREATE TABLE t0(c0 INT, c1 INT UNIQUE);"));
+		REQUIRE_FAIL(con.Query("ALTER TABLE t0 DROP c1;"));
+	}
+	SECTION("629") {
+		// ALTER TYPE with USING results in an assertion failure "types.size() > 0"
+		REQUIRE_NO_FAIL(con.Query("CREATE TABLE t0(c0 INT);"));
+		REQUIRE_NO_FAIL(con.Query("ALTER TABLE t0 ALTER c0 TYPE VARCHAR USING ''; "));
+	}
 }
