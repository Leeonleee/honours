You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Using both `hive_partitioning` and `hive_types` in `read_json_objects` intermittently segfaults
### What happens?

duckdb cli will intermittently segfault when using `read_json_objects` with `hive_partitioning = true` and defined `hive_types`.

Specifically the segfault is of type `EXC_BAD_ACCESS`, subtype `KERN_INVALID_ADDRESS at 0x0000000000000004`

The intermittency varies, however in my local testing running the supplied script will cause the issue on anything between 1-120 attempts at a query.

### To Reproduce

To reproduce:

- Install duckdb (in my case by using `brew install duckdb` on macOS)
- Create the following script in your editor, and run it.  It should run the problematic command repeatedly until it segfaults at which point it should say upon which attempt this occurred.
```sh
#!/bin/sh

mkdir "month=07"
echo '{ "hello": "there" }' > month=07/mytest.json

counter=1
until duckdb -s "select * from read_json_objects('./month=*/*.json', hive_partitioning = true, format = auto, hive_types = {'month': int}, filename = true ) where month = 7;" 
  [ $? -eq 139 ]
do counter=$((counter+1)) 
done

printf "segfaulted on try: $counter\n"
```

In the hopes of saving you some debug time, some additional info:

- The state occurs when both when running duckdb interactively or via `-s`.... I only use `-s` here to make repeat testing until a failure state easier
- The same issue seems to manifest with single JSON objects, and line delimited JSON files with multiple objects
- The issue manifests with all sorts of JSON content, the content in the above script is just to illustrate, it does not appear to be the problem.
- Using `hive_partitioning = true` but not setting `hive_types` does not seem to trigger the condition



### OS:

macOS 14.5 (23F79), arm64

### DuckDB Version:

v1.0.0 1f98600c2c

### DuckDB Client:

Native CLI Client

### Full Name:

Lee Brotherston

### Affiliation:

OpsHelmInc

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
Using both `hive_partitioning` and `hive_types` in `read_json_objects` intermittently segfaults
### What happens?

duckdb cli will intermittently segfault when using `read_json_objects` with `hive_partitioning = true` and defined `hive_types`.

Specifically the segfault is of type `EXC_BAD_ACCESS`, subtype `KERN_INVALID_ADDRESS at 0x0000000000000004`

The intermittency varies, however in my local testing running the supplied script will cause the issue on anything between 1-120 attempts at a query.

### To Reproduce

To reproduce:

- Install duckdb (in my case by using `brew install duckdb` on macOS)
- Create the following script in your editor, and run it.  It should run the problematic command repeatedly until it segfaults at which point it should say upon which attempt this occurred.
```sh
#!/bin/sh

mkdir "month=07"
echo '{ "hello": "there" }' > month=07/mytest.json

counter=1
until duckdb -s "select * from read_json_objects('./month=*/*.json', hive_partitioning = true, format = auto, hive_types = {'month': int}, filename = true ) where month = 7;" 
  [ $? -eq 139 ]
do counter=$((counter+1)) 
done

printf "segfaulted on try: $counter\n"
```

In the hopes of saving you some debug time, some additional info:

- The state occurs when both when running duckdb interactively or via `-s`.... I only use `-s` here to make repeat testing until a failure state easier
- The same issue seems to manifest with single JSON objects, and line delimited JSON files with multiple objects
- The issue manifests with all sorts of JSON content, the content in the above script is just to illustrate, it does not appear to be the problem.
- Using `hive_partitioning = true` but not setting `hive_types` does not seem to trigger the condition



### OS:

macOS 14.5 (23F79), arm64

### DuckDB Version:

v1.0.0 1f98600c2c

### DuckDB Client:

Native CLI Client

### Full Name:

Lee Brotherston

### Affiliation:

OpsHelmInc

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of extension/json/json_functions/read_json_objects.cpp]
1: #include "json_common.hpp"
2: #include "json_functions.hpp"
3: #include "json_scan.hpp"
4: #include "duckdb/common/helper.hpp"
5: 
6: namespace duckdb {
7: 
8: unique_ptr<FunctionData> ReadJSONObjectsBind(ClientContext &context, TableFunctionBindInput &input,
9:                                              vector<LogicalType> &return_types, vector<string> &names) {
10: 	auto bind_data = make_uniq<JSONScanData>();
11: 	bind_data->Bind(context, input);
12: 
13: 	bind_data->names.emplace_back("json");
14: 	return_types.push_back(LogicalType::JSON());
15: 	names.emplace_back("json");
16: 
17: 	SimpleMultiFileList file_list(std::move(bind_data->files));
18: 	MultiFileReader().BindOptions(bind_data->options.file_options, file_list, return_types, names,
19: 	                              bind_data->reader_bind);
20: 	bind_data->files = file_list.GetAllFiles();
21: 
22: 	return std::move(bind_data);
23: }
24: 
25: static void ReadJSONObjectsFunction(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {
26: 	auto &gstate = data_p.global_state->Cast<JSONGlobalTableFunctionState>().state;
27: 	auto &lstate = data_p.local_state->Cast<JSONLocalTableFunctionState>().state;
28: 
29: 	// Fetch next lines
30: 	const auto count = lstate.ReadNext(gstate);
31: 	const auto units = lstate.units;
32: 	const auto objects = lstate.values;
33: 
34: 	if (!gstate.names.empty()) {
35: 		// Create the strings without copying them
36: 		auto strings = FlatVector::GetData<string_t>(output.data[0]);
37: 		auto &validity = FlatVector::Validity(output.data[0]);
38: 		for (idx_t i = 0; i < count; i++) {
39: 			if (objects[i]) {
40: 				strings[i] = string_t(units[i].pointer, units[i].size);
41: 			} else {
42: 				validity.SetInvalid(i);
43: 			}
44: 		}
45: 	}
46: 
47: 	output.SetCardinality(count);
48: 
49: 	if (output.size() != 0) {
50: 		MultiFileReader().FinalizeChunk(context, gstate.bind_data.reader_bind, lstate.GetReaderData(), output, nullptr);
51: 	}
52: }
53: 
54: TableFunction GetReadJSONObjectsTableFunction(bool list_parameter, shared_ptr<JSONScanInfo> function_info) {
55: 	auto parameter = list_parameter ? LogicalType::LIST(LogicalType::VARCHAR) : LogicalType::VARCHAR;
56: 	TableFunction table_function({parameter}, ReadJSONObjectsFunction, ReadJSONObjectsBind,
57: 	                             JSONGlobalTableFunctionState::Init, JSONLocalTableFunctionState::Init);
58: 	JSONScan::TableFunctionDefaults(table_function);
59: 	table_function.function_info = std::move(function_info);
60: 
61: 	return table_function;
62: }
63: 
64: TableFunctionSet JSONFunctions::GetReadJSONObjectsFunction() {
65: 	TableFunctionSet function_set("read_json_objects");
66: 	auto function_info =
67: 	    make_shared_ptr<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::ARRAY, JSONRecordType::RECORDS);
68: 	function_set.AddFunction(GetReadJSONObjectsTableFunction(false, function_info));
69: 	function_set.AddFunction(GetReadJSONObjectsTableFunction(true, function_info));
70: 	return function_set;
71: }
72: 
73: TableFunctionSet JSONFunctions::GetReadNDJSONObjectsFunction() {
74: 	TableFunctionSet function_set("read_ndjson_objects");
75: 	auto function_info = make_shared_ptr<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::NEWLINE_DELIMITED,
76: 	                                                   JSONRecordType::RECORDS);
77: 	function_set.AddFunction(GetReadJSONObjectsTableFunction(false, function_info));
78: 	function_set.AddFunction(GetReadJSONObjectsTableFunction(true, function_info));
79: 	return function_set;
80: }
81: 
82: TableFunctionSet JSONFunctions::GetReadJSONObjectsAutoFunction() {
83: 	TableFunctionSet function_set("read_json_objects_auto");
84: 	auto function_info = make_shared_ptr<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::AUTO_DETECT,
85: 	                                                   JSONRecordType::RECORDS);
86: 	function_set.AddFunction(GetReadJSONObjectsTableFunction(false, function_info));
87: 	function_set.AddFunction(GetReadJSONObjectsTableFunction(true, function_info));
88: 	return function_set;
89: }
90: 
91: } // namespace duckdb
[end of extension/json/json_functions/read_json_objects.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: