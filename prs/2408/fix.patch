diff --git a/tools/rpkg/NAMESPACE b/tools/rpkg/NAMESPACE
index 8850579c34c0..df95a2bd175a 100644
--- a/tools/rpkg/NAMESPACE
+++ b/tools/rpkg/NAMESPACE
@@ -9,6 +9,7 @@ export(duckdb_register_arrow)
 export(duckdb_shutdown)
 export(duckdb_unregister)
 export(duckdb_unregister_arrow)
+export(duckdb_list_arrow)
 export(read_csv_duckdb)
 exportClasses(duckdb_connection)
 exportClasses(duckdb_driver)
diff --git a/tools/rpkg/R/register.R b/tools/rpkg/R/register.R
index f1cd0cbbe37d..236a6c9cbab0 100644
--- a/tools/rpkg/R/register.R
+++ b/tools/rpkg/R/register.R
@@ -64,7 +64,12 @@ duckdb_register_arrow <- function(conn, name, arrow_scannable) {
 #' @rdname duckdb_register_arrow
 #' @export
 duckdb_unregister_arrow <- function(conn, name) {
-  stopifnot(dbIsValid(conn))
   .Call(duckdb_unregister_arrow_R, conn@conn_ref, as.character(name))
   invisible(TRUE)
+}
+
+#' @rdname duckdb_register_arrow
+#' @export
+duckdb_list_arrow <- function(conn) {
+    sort(gsub("_registered_arrow_", "", names(attributes(conn@driver@database_ref)), fixed=TRUE))
 }
\ No newline at end of file
diff --git a/tools/rpkg/man/duckdb_register_arrow.Rd b/tools/rpkg/man/duckdb_register_arrow.Rd
index 0f6caff2497e..78a718014195 100644
--- a/tools/rpkg/man/duckdb_register_arrow.Rd
+++ b/tools/rpkg/man/duckdb_register_arrow.Rd
@@ -3,6 +3,7 @@
 
ame{duckdb_register_arrow}
 \alias{duckdb_register_arrow}
 \alias{duckdb_unregister_arrow}
+\alias{duckdb_list_arrow}
 \title{Register an Arrow data source as a virtual table}
 \usage{
 duckdb_register_arrow(conn, name, arrow_scannable)
diff --git a/tools/rpkg/src/connection.cpp b/tools/rpkg/src/connection.cpp
index 773451dcfe9b..96b093f346fc 100644
--- a/tools/rpkg/src/connection.cpp
+++ b/tools/rpkg/src/connection.cpp
@@ -6,11 +6,11 @@ static SEXP duckdb_finalize_connection_R(SEXP connsexp) {
 	if (TYPEOF(connsexp) != EXTPTRSXP) {
 		Rf_error("duckdb_finalize_connection_R: Need external pointer parameter");
 	}
-	Connection *connaddr = (Connection *)R_ExternalPtrAddr(connsexp);
-	if (connaddr) {
+	auto conn_wrapper = (ConnWrapper *)R_ExternalPtrAddr(connsexp);
+	if (conn_wrapper) {
 		Rf_warning("duckdb_finalize_connection_R: Connection is garbage-collected, use dbDisconnect() to avoid this.");
 		R_ClearExternalPtr(connsexp);
-		delete connaddr;
+		delete conn_wrapper;
 	}
 	return R_NilValue;
 }
@@ -19,13 +19,17 @@ SEXP RApi::Connect(SEXP dbsexp) {
 	if (TYPEOF(dbsexp) != EXTPTRSXP) {
 		Rf_error("duckdb_connect_R: Need external pointer parameter");
 	}
-	DuckDB *dbaddr = (DuckDB *)R_ExternalPtrAddr(dbsexp);
-	if (!dbaddr) {
+	auto db_wrapper = (DBWrapper *)R_ExternalPtrAddr(dbsexp);
+	if (!db_wrapper || !db_wrapper->db) {
 		Rf_error("duckdb_connect_R: Invalid database reference");
 	}
 
 	RProtector r;
-	SEXP connsexp = r.Protect(R_MakeExternalPtr(new Connection(*dbaddr), R_NilValue, R_NilValue));
+	auto conn_wrapper = new ConnWrapper();
+	conn_wrapper->db_sexp = dbsexp;
+	conn_wrapper->conn = make_unique<Connection>(*db_wrapper->db);
+
+	SEXP connsexp = r.Protect(R_MakeExternalPtr(conn_wrapper, R_NilValue, R_NilValue));
 	R_RegisterCFinalizer(connsexp, (void (*)(SEXP))duckdb_finalize_connection_R);
 
 	return connsexp;
@@ -35,10 +39,10 @@ SEXP RApi::Disconnect(SEXP connsexp) {
 	if (TYPEOF(connsexp) != EXTPTRSXP) {
 		Rf_error("duckdb_disconnect_R: Need external pointer parameter");
 	}
-	Connection *connaddr = (Connection *)R_ExternalPtrAddr(connsexp);
-	if (connaddr) {
+	auto conn_wrapper = (ConnWrapper *)R_ExternalPtrAddr(connsexp);
+	if (conn_wrapper) {
 		R_ClearExternalPtr(connsexp);
-		delete connaddr;
+		delete conn_wrapper;
 	}
 	return R_NilValue;
 }
diff --git a/tools/rpkg/src/database.cpp b/tools/rpkg/src/database.cpp
index eb6e78583ea8..fcec6dad152e 100644
--- a/tools/rpkg/src/database.cpp
+++ b/tools/rpkg/src/database.cpp
@@ -9,12 +9,12 @@ static SEXP duckdb_finalize_database_R(SEXP dbsexp) {
 	if (TYPEOF(dbsexp) != EXTPTRSXP) {
 		Rf_error("duckdb_finalize_connection_R: Need external pointer parameter");
 	}
-	DuckDB *dbaddr = (DuckDB *)R_ExternalPtrAddr(dbsexp);
-	if (dbaddr) {
+	auto db_wrapper = (DBWrapper *)R_ExternalPtrAddr(dbsexp);
+	if (db_wrapper) {
 		Rf_warning("duckdb_finalize_database_R: Database is garbage-collected, use dbDisconnect(con, shutdown=TRUE) or "
 		           "duckdb::duckdb_shutdown(drv) to avoid this.");
 		R_ClearExternalPtr(dbsexp);
-		delete dbaddr;
+		delete db_wrapper;
 	}
 	return R_NilValue;
 }
@@ -42,7 +42,7 @@ SEXP RApi::Startup(SEXP dbdirsexp, SEXP readonlysexp, SEXP configsexp) {
 	RProtector r;
 	auto confignamessexp = r.Protect(GET_NAMES(configsexp));
 
-	for (idx_t i = 0; i < Rf_length(configsexp); i++) {
+	for (idx_t i = 0; i < (idx_t)Rf_length(configsexp); i++) {
 		string key = string(CHAR(STRING_ELT(confignamessexp, i)));
 		string val = string(CHAR(STRING_ELT(VECTOR_ELT(configsexp, i), 0)));
 		auto config_property = DBConfig::GetOptionByName(key);
@@ -56,24 +56,28 @@ SEXP RApi::Startup(SEXP dbdirsexp, SEXP readonlysexp, SEXP configsexp) {
 		}
 	}
 
-	DuckDB *dbaddr;
+	DBWrapper *wrapper;
+
 	try {
-		dbaddr = new DuckDB(dbdir, &config);
+		wrapper = new DBWrapper();
+		config.replacement_scans.emplace_back(ArrowScanReplacement, wrapper);
+		wrapper->db = make_unique<DuckDB>(dbdir, &config);
 	} catch (std::exception &e) {
 		Rf_error("duckdb_startup_R: Failed to open database: %s", e.what());
 	}
-	ExtensionHelper::LoadAllExtensions(*dbaddr);
+	D_ASSERT(wrapper->db);
+	ExtensionHelper::LoadAllExtensions(*wrapper->db);
 
 	DataFrameScanFunction scan_fun;
 	CreateTableFunctionInfo info(scan_fun);
-	Connection conn(*dbaddr);
+	Connection conn(*wrapper->db);
 	auto &context = *conn.context;
 	auto &catalog = Catalog::GetCatalog(context);
 	context.transaction.BeginTransaction();
 	catalog.CreateTableFunction(context, &info);
 	context.transaction.Commit();
 
-	SEXP dbsexp = r.Protect(R_MakeExternalPtr(dbaddr, R_NilValue, R_NilValue));
+	SEXP dbsexp = r.Protect(R_MakeExternalPtr(wrapper, R_NilValue, R_NilValue));
 	R_RegisterCFinalizer(dbsexp, (void (*)(SEXP))duckdb_finalize_database_R);
 	return dbsexp;
 }
@@ -82,10 +86,10 @@ SEXP RApi::Shutdown(SEXP dbsexp) {
 	if (TYPEOF(dbsexp) != EXTPTRSXP) {
 		Rf_error("duckdb_finalize_connection_R: Need external pointer parameter");
 	}
-	DuckDB *dbaddr = (DuckDB *)R_ExternalPtrAddr(dbsexp);
-	if (dbaddr) {
+	auto db_wrapper = (DBWrapper *)R_ExternalPtrAddr(dbsexp);
+	if (db_wrapper) {
 		R_ClearExternalPtr(dbsexp);
-		delete dbaddr;
+		delete db_wrapper;
 	}
 
 	return R_NilValue;
diff --git a/tools/rpkg/src/include/rapi.hpp b/tools/rpkg/src/include/rapi.hpp
index 5da5a8ce5220..fdba2e1d6dac 100644
--- a/tools/rpkg/src/include/rapi.hpp
+++ b/tools/rpkg/src/include/rapi.hpp
@@ -6,9 +6,25 @@
 
 #include "duckdb.hpp"
 #include "duckdb/function/table_function.hpp"
+#include "duckdb/common/unordered_map.hpp"
+#include "duckdb/parser/tableref/table_function_ref.hpp"
+#include "duckdb/common/mutex.hpp"
 
 namespace duckdb {
 
+typedef unordered_map<std::string, SEXP> arrow_scans_t;
+
+struct DBWrapper {
+	unique_ptr<DuckDB> db;
+	arrow_scans_t arrow_scans;
+	mutex lock;
+};
+
+struct ConnWrapper {
+	unique_ptr<Connection> conn;
+	SEXP db_sexp;
+};
+
 struct RApi {
 
 	static SEXP Startup(SEXP dbdirsexp, SEXP readonlysexp, SEXP configsexp);
@@ -39,6 +55,7 @@ struct RApi {
 	static SEXP RegisterArrow(SEXP connsexp, SEXP namesexp, SEXP export_funsexp, SEXP valuesexp);
 
 	static SEXP UnregisterArrow(SEXP connsexp, SEXP namesexp);
+	static unique_ptr<TableFunctionRef> ArrowScanReplacement(const string &table_name, void *data);
 
 	static SEXP PointerToString(SEXP extptr);
 	static SEXP StringsToSexp(vector<string> s);
diff --git a/tools/rpkg/src/register.cpp b/tools/rpkg/src/register.cpp
index 99b9334f5e1e..85d79eaf8457 100644
--- a/tools/rpkg/src/register.cpp
+++ b/tools/rpkg/src/register.cpp
@@ -5,6 +5,8 @@
 #include "duckdb/planner/table_filter.hpp"
 #include "duckdb/planner/filter/constant_filter.hpp"
 #include "duckdb/planner/filter/conjunction_filter.hpp"
+#include "duckdb/parser/expression/constant_expression.hpp"
+#include "duckdb/parser/expression/function_expression.hpp"
 
 using namespace duckdb;
 
@@ -12,8 +14,8 @@ SEXP RApi::RegisterDataFrame(SEXP connsexp, SEXP namesexp, SEXP valuesexp) {
 	if (TYPEOF(connsexp) != EXTPTRSXP) {
 		Rf_error("duckdb_register_R: Need external pointer parameter for connection");
 	}
-	Connection *conn = (Connection *)R_ExternalPtrAddr(connsexp);
-	if (!conn) {
+	auto conn_wrapper = (ConnWrapper *)R_ExternalPtrAddr(connsexp);
+	if (!conn_wrapper || !conn_wrapper->conn) {
 		Rf_error("duckdb_register_R: Invalid connection");
 	}
 	if (TYPEOF(namesexp) != STRSXP || Rf_length(namesexp) != 1) {
@@ -28,7 +30,8 @@ SEXP RApi::RegisterDataFrame(SEXP connsexp, SEXP namesexp, SEXP valuesexp) {
 		Rf_error("duckdb_register_R: Need at least one-column data frame parameter for value");
 	}
 	try {
-		conn->TableFunction("r_dataframe_scan", {Value::POINTER((uintptr_t)valuesexp)})->CreateView(name, true, true);
+		conn_wrapper->conn->TableFunction("r_dataframe_scan", {Value::POINTER((uintptr_t)valuesexp)})
+		    ->CreateView(name, true, true);
 		auto key = Rf_install(("_registered_df_" + name).c_str());
 		Rf_setAttrib(connsexp, key, valuesexp);
 	} catch (std::exception &e) {
@@ -41,8 +44,8 @@ SEXP RApi::UnregisterDataFrame(SEXP connsexp, SEXP namesexp) {
 	if (TYPEOF(connsexp) != EXTPTRSXP) {
 		Rf_error("duckdb_unregister_R: Need external pointer parameter for connection");
 	}
-	Connection *conn = (Connection *)R_ExternalPtrAddr(connsexp);
-	if (!conn) {
+	auto conn_wrapper = (ConnWrapper *)R_ExternalPtrAddr(connsexp);
+	if (!conn_wrapper || !conn_wrapper->conn) {
 		Rf_error("duckdb_unregister_R: Invalid connection");
 	}
 	if (TYPEOF(namesexp) != STRSXP || Rf_length(namesexp) != 1) {
@@ -51,7 +54,7 @@ SEXP RApi::UnregisterDataFrame(SEXP connsexp, SEXP namesexp) {
 	auto name = string(CHAR(STRING_ELT(namesexp, 0)));
 	auto key = Rf_install(("_registered_df_" + name).c_str());
 	Rf_setAttrib(connsexp, key, R_NilValue);
-	auto res = conn->Query("DROP VIEW IF EXISTS \"" + name + "\"");
+	auto res = conn_wrapper->conn->Query("DROP VIEW IF EXISTS \"" + name + "\"");
 	if (!res->success) {
 		Rf_error(res->error.c_str());
 	}
@@ -220,12 +223,30 @@ static SEXP duckdb_finalize_arrow_factory_R(SEXP factorysexp) {
 	return R_NilValue;
 }
 
+unique_ptr<TableFunctionRef> RApi::ArrowScanReplacement(const string &table_name, void *data) {
+	auto db_wrapper = (DBWrapper *)data;
+	lock_guard<mutex> arrow_scans_lock(db_wrapper->lock);
+	for (auto &e : db_wrapper->arrow_scans) {
+		if (e.first == table_name) {
+			auto table_function = make_unique<TableFunctionRef>();
+			vector<unique_ptr<ParsedExpression>> children;
+			children.push_back(make_unique<ConstantExpression>(Value::POINTER((uintptr_t)R_ExternalPtrAddr(e.second))));
+			children.push_back(
+			    make_unique<ConstantExpression>(Value::POINTER((uintptr_t)RArrowTabularStreamFactory::Produce)));
+			children.push_back(make_unique<ConstantExpression>(Value::UBIGINT(100000)));
+			table_function->function = make_unique<FunctionExpression>("arrow_scan", move(children));
+			return table_function;
+		}
+	}
+	return nullptr;
+}
+
 SEXP RApi::RegisterArrow(SEXP connsexp, SEXP namesexp, SEXP export_funsexp, SEXP valuesexp) {
 	if (TYPEOF(connsexp) != EXTPTRSXP) {
 		Rf_error("duckdb_register_R: Need external pointer parameter for connection");
 	}
-	Connection *conn = (Connection *)R_ExternalPtrAddr(connsexp);
-	if (!conn) {
+	auto conn_wrapper = (ConnWrapper *)R_ExternalPtrAddr(connsexp);
+	if (!conn_wrapper || !conn_wrapper->conn) {
 		Rf_error("duckdb_register_R: Invalid connection");
 	}
 	if (TYPEOF(namesexp) != STRSXP || Rf_length(namesexp) != 1) {
@@ -242,22 +263,24 @@ SEXP RApi::RegisterArrow(SEXP connsexp, SEXP namesexp, SEXP export_funsexp, SEXP
 
 	RProtector r;
 	auto stream_factory = new RArrowTabularStreamFactory(export_funsexp, valuesexp);
-	auto stream_factory_produce = RArrowTabularStreamFactory::Produce;
-	conn->TableFunction("arrow_scan", {Value::POINTER((uintptr_t)stream_factory),
-	                                   Value::POINTER((uintptr_t)stream_factory_produce), Value::UBIGINT(100000)})
-	    ->CreateView(name, true, true);
-
 	// make r external ptr object to keep factory around until arrow table is unregistered
 	SEXP factorysexp = r.Protect(R_MakeExternalPtr(stream_factory, R_NilValue, R_NilValue));
 	R_RegisterCFinalizer(factorysexp, (void (*)(SEXP))duckdb_finalize_arrow_factory_R);
 
+	{
+		auto *db_wrapper = (DBWrapper *)R_ExternalPtrAddr(conn_wrapper->db_sexp);
+		// TODO check if this name already exists?
+		lock_guard<mutex> arrow_scans_lock(db_wrapper->lock);
+		auto &arrow_scans = db_wrapper->arrow_scans;
+		arrow_scans[name] = factorysexp;
+	}
 	SEXP state_list = r.Protect(NEW_LIST(3));
 	SET_VECTOR_ELT(state_list, 0, export_funsexp);
 	SET_VECTOR_ELT(state_list, 1, valuesexp);
 	SET_VECTOR_ELT(state_list, 2, factorysexp);
 
 	auto key = Rf_install(("_registered_arrow_" + name).c_str());
-	Rf_setAttrib(connsexp, key, state_list);
+	Rf_setAttrib(conn_wrapper->db_sexp, key, state_list);
 
 	return R_NilValue;
 }
@@ -266,19 +289,23 @@ SEXP RApi::UnregisterArrow(SEXP connsexp, SEXP namesexp) {
 	if (TYPEOF(connsexp) != EXTPTRSXP) {
 		Rf_error("duckdb_unregister_R: Need external pointer parameter for connection");
 	}
-	Connection *conn = (Connection *)R_ExternalPtrAddr(connsexp);
-	if (!conn) {
+	auto conn_wrapper = (ConnWrapper *)R_ExternalPtrAddr(connsexp);
+	if (!conn_wrapper || !conn_wrapper->conn) {
 		Rf_error("duckdb_unregister_R: Invalid connection");
 	}
 	if (TYPEOF(namesexp) != STRSXP || Rf_length(namesexp) != 1) {
 		Rf_error("duckdb_unregister_R: Need single string parameter for name");
 	}
+
 	auto name = string(CHAR(STRING_ELT(namesexp, 0)));
-	auto key = Rf_install(("_registered_arrow_" + name).c_str());
-	Rf_setAttrib(connsexp, key, R_NilValue);
-	auto res = conn->Query("DROP VIEW IF EXISTS \"" + name + "\"");
-	if (!res->success) {
-		Rf_error(res->error.c_str());
+	{
+		auto *db_wrapper = (DBWrapper *)R_ExternalPtrAddr(conn_wrapper->db_sexp);
+		lock_guard<mutex> arrow_scans_lock(db_wrapper->lock);
+		auto &arrow_scans = db_wrapper->arrow_scans;
+		arrow_scans.erase(name);
 	}
+	auto key = Rf_install(("_registered_arrow_" + name).c_str());
+	Rf_setAttrib(conn_wrapper->db_sexp, key, R_NilValue);
+
 	return R_NilValue;
 }
diff --git a/tools/rpkg/src/statement.cpp b/tools/rpkg/src/statement.cpp
index 435bf3a4ddc3..4cf19d6eac23 100644
--- a/tools/rpkg/src/statement.cpp
+++ b/tools/rpkg/src/statement.cpp
@@ -54,12 +54,12 @@ SEXP RApi::Prepare(SEXP connsexp, SEXP querysexp) {
 		Rf_error("duckdb_prepare_R: No query");
 	}
 
-	Connection *conn = (Connection *)R_ExternalPtrAddr(connsexp);
-	if (!conn) {
+	auto conn_wrapper = (ConnWrapper *)R_ExternalPtrAddr(connsexp);
+	if (!conn_wrapper || !conn_wrapper->conn) {
 		Rf_error("duckdb_prepare_R: Invalid connection");
 	}
 
-	auto stmt = conn->Prepare(query);
+	auto stmt = conn_wrapper->conn->Prepare(query);
 	if (!stmt->success) {
 		Rf_error("duckdb_prepare_R: Failed to prepare query %s
Error: %s", query, stmt->error.c_str());
 	}
