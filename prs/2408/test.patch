diff --git a/tools/rpkg/tests/testthat/test_register_arrow.R b/tools/rpkg/tests/testthat/test_register_arrow.R
index 16786a64561c..e0e0ad10d5c0 100644
--- a/tools/rpkg/tests/testthat/test_register_arrow.R
+++ b/tools/rpkg/tests/testthat/test_register_arrow.R
@@ -319,9 +319,51 @@ test_that("duckdb_register_arrow() under many threads", {
 
     expect_error(DBI::dbGetQuery(con, "SELECT cyl, SUM(mpg) FROM mtcars_arrow GROUP BY cyl"),NA)
 
-
     expect_error(DBI::dbGetQuery(con, "SELECT cyl, AVG(mpg) FROM mtcars_arrow GROUP BY cyl"),NA)
+})
 
+test_that("we can unregister in finalizers yay", {
+    con <- DBI::dbConnect(duckdb::duckdb())
+    ds <- arrow::InMemoryDataset$create(mtcars)
+
+    # Creates an environment that disconnects the database when it's GC'd
+    duckdb_disconnector <- function(con, table_name) {
+      # we need to force the name here
+      table_name_forced <- force(table_name)
+      reg.finalizer(environment(), function(...) {
+        duckdb::duckdb_unregister_arrow(con, table_name_forced)
+      })
+      environment()
+    }
+
+    for (i in 1:100) {
+      table_name <- paste0("mtcars_", i)
+      duckdb::duckdb_register_arrow(con, table_name, ds)
+      object_to_clean <- duckdb_disconnector(con, table_name)
+    }
+    object_to_clean <- NULL # otherwise we leak one
+    # force a gc run, now they should all be gone
+    gc()
+
+    expect_equal(length(duckdb::duckdb_list_arrow(con)), 0)
 })
 
 
+test_that("we can list registered arrow tables", {
+    con <- DBI::dbConnect(duckdb::duckdb())
+    ds <- arrow::InMemoryDataset$create(mtcars)
+
+    expect_equal(length(duckdb::duckdb_list_arrow(con)), 0)
+
+    duckdb::duckdb_register_arrow(con, "t1", ds)
+    duckdb::duckdb_register_arrow(con, "t2", ds)
+
+    expect_equal(duckdb::duckdb_list_arrow(con), c("t1", "t2"))
+
+    duckdb::duckdb_unregister_arrow(con, "t1")
+    expect_equal(duckdb::duckdb_list_arrow(con), c("t2"))
+    duckdb::duckdb_unregister_arrow(con, "t2")
+
+
+    expect_equal(length(duckdb::duckdb_list_arrow(con)), 0)
+})
