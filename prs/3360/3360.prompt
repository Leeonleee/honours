You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Assertion Failed at expression_iterator.cpp:187
#### What happens?
INTERNAL Error: Assertion triggered in file "/root/duckdb/src/planner/expression_iterator.cpp" on line 187: node.type == QueryNodeType::SELECT_NODE

#### To Reproduce
```sql
create view strings as (with recursive t(a) as (select 1 union select a+1 from t where a < 3) select * from t order by a);
SELECT a, (SELECT a FROM strings i2 WHERE a=(SELECT SUM(a) FROM strings i2 WHERE i2.a>i1.a)) FROM strings i1 ORDER BY 1;
```

#### Environment (please complete the following information):
 - OS: linux
 - DuckDB Version: v0.3.3-dev1395 80ae1e12d
 - DuckDB Client: /usr/local/bin/duckdb

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

Assertion Failed at expression_iterator.cpp:187
#### What happens?
INTERNAL Error: Assertion triggered in file "/root/duckdb/src/planner/expression_iterator.cpp" on line 187: node.type == QueryNodeType::SELECT_NODE

#### To Reproduce
```sql
create view strings as (with recursive t(a) as (select 1 union select a+1 from t where a < 3) select * from t order by a);
SELECT a, (SELECT a FROM strings i2 WHERE a=(SELECT SUM(a) FROM strings i2 WHERE i2.a>i1.a)) FROM strings i1 ORDER BY 1;
```

#### Environment (please complete the following information):
 - OS: linux
 - DuckDB Version: v0.3.3-dev1395 80ae1e12d
 - DuckDB Client: /usr/local/bin/duckdb

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
44: 
45: 
[end of README.md]
[start of src/planner/expression_iterator.cpp]
1: #include "duckdb/planner/expression_iterator.hpp"
2: 
3: #include "duckdb/planner/bound_query_node.hpp"
4: #include "duckdb/planner/expression/list.hpp"
5: #include "duckdb/planner/query_node/bound_select_node.hpp"
6: #include "duckdb/planner/query_node/bound_set_operation_node.hpp"
7: #include "duckdb/planner/tableref/list.hpp"
8: 
9: namespace duckdb {
10: 
11: void ExpressionIterator::EnumerateChildren(const Expression &expr,
12:                                            const std::function<void(const Expression &child)> &callback) {
13: 	EnumerateChildren((Expression &)expr, [&](unique_ptr<Expression> &child) { callback(*child); });
14: }
15: 
16: void ExpressionIterator::EnumerateChildren(Expression &expr, const std::function<void(Expression &child)> &callback) {
17: 	EnumerateChildren(expr, [&](unique_ptr<Expression> &child) { callback(*child); });
18: }
19: 
20: void ExpressionIterator::EnumerateChildren(Expression &expr,
21:                                            const std::function<void(unique_ptr<Expression> &child)> &callback) {
22: 	switch (expr.expression_class) {
23: 	case ExpressionClass::BOUND_AGGREGATE: {
24: 		auto &aggr_expr = (BoundAggregateExpression &)expr;
25: 		for (auto &child : aggr_expr.children) {
26: 			callback(child);
27: 		}
28: 		if (aggr_expr.filter) {
29: 			callback(aggr_expr.filter);
30: 		}
31: 		break;
32: 	}
33: 	case ExpressionClass::BOUND_BETWEEN: {
34: 		auto &between_expr = (BoundBetweenExpression &)expr;
35: 		callback(between_expr.input);
36: 		callback(between_expr.lower);
37: 		callback(between_expr.upper);
38: 		break;
39: 	}
40: 	case ExpressionClass::BOUND_CASE: {
41: 		auto &case_expr = (BoundCaseExpression &)expr;
42: 		for (auto &case_check : case_expr.case_checks) {
43: 			callback(case_check.when_expr);
44: 			callback(case_check.then_expr);
45: 		}
46: 		callback(case_expr.else_expr);
47: 		break;
48: 	}
49: 	case ExpressionClass::BOUND_CAST: {
50: 		auto &cast_expr = (BoundCastExpression &)expr;
51: 		callback(cast_expr.child);
52: 		break;
53: 	}
54: 	case ExpressionClass::BOUND_COMPARISON: {
55: 		auto &comp_expr = (BoundComparisonExpression &)expr;
56: 		callback(comp_expr.left);
57: 		callback(comp_expr.right);
58: 		break;
59: 	}
60: 	case ExpressionClass::BOUND_CONJUNCTION: {
61: 		auto &conj_expr = (BoundConjunctionExpression &)expr;
62: 		for (auto &child : conj_expr.children) {
63: 			callback(child);
64: 		}
65: 		break;
66: 	}
67: 	case ExpressionClass::BOUND_FUNCTION: {
68: 		auto &func_expr = (BoundFunctionExpression &)expr;
69: 		for (auto &child : func_expr.children) {
70: 			callback(child);
71: 		}
72: 		break;
73: 	}
74: 	case ExpressionClass::BOUND_OPERATOR: {
75: 		auto &op_expr = (BoundOperatorExpression &)expr;
76: 		for (auto &child : op_expr.children) {
77: 			callback(child);
78: 		}
79: 		break;
80: 	}
81: 	case ExpressionClass::BOUND_SUBQUERY: {
82: 		auto &subquery_expr = (BoundSubqueryExpression &)expr;
83: 		if (subquery_expr.child) {
84: 			callback(subquery_expr.child);
85: 		}
86: 		break;
87: 	}
88: 	case ExpressionClass::BOUND_WINDOW: {
89: 		auto &window_expr = (BoundWindowExpression &)expr;
90: 		for (auto &partition : window_expr.partitions) {
91: 			callback(partition);
92: 		}
93: 		for (auto &order : window_expr.orders) {
94: 			callback(order.expression);
95: 		}
96: 		for (auto &child : window_expr.children) {
97: 			callback(child);
98: 		}
99: 		if (window_expr.start_expr) {
100: 			callback(window_expr.start_expr);
101: 		}
102: 		if (window_expr.end_expr) {
103: 			callback(window_expr.end_expr);
104: 		}
105: 		if (window_expr.offset_expr) {
106: 			callback(window_expr.offset_expr);
107: 		}
108: 		if (window_expr.default_expr) {
109: 			callback(window_expr.default_expr);
110: 		}
111: 		break;
112: 	}
113: 	case ExpressionClass::BOUND_UNNEST: {
114: 		auto &unnest_expr = (BoundUnnestExpression &)expr;
115: 		callback(unnest_expr.child);
116: 		break;
117: 	}
118: 	case ExpressionClass::BOUND_COLUMN_REF:
119: 	case ExpressionClass::BOUND_CONSTANT:
120: 	case ExpressionClass::BOUND_DEFAULT:
121: 	case ExpressionClass::BOUND_PARAMETER:
122: 	case ExpressionClass::BOUND_REF:
123: 		// these node types have no children
124: 		break;
125: 	default:
126: 		throw InternalException("ExpressionIterator used on unbound expression");
127: 	}
128: }
129: 
130: void ExpressionIterator::EnumerateExpression(unique_ptr<Expression> &expr,
131:                                              const std::function<void(Expression &child)> &callback) {
132: 	if (!expr) {
133: 		return;
134: 	}
135: 	callback(*expr);
136: 	ExpressionIterator::EnumerateChildren(*expr,
137: 	                                      [&](unique_ptr<Expression> &child) { EnumerateExpression(child, callback); });
138: }
139: 
140: void ExpressionIterator::EnumerateTableRefChildren(BoundTableRef &ref,
141:                                                    const std::function<void(Expression &child)> &callback) {
142: 	switch (ref.type) {
143: 	case TableReferenceType::CROSS_PRODUCT: {
144: 		auto &bound_crossproduct = (BoundCrossProductRef &)ref;
145: 		EnumerateTableRefChildren(*bound_crossproduct.left, callback);
146: 		EnumerateTableRefChildren(*bound_crossproduct.right, callback);
147: 		break;
148: 	}
149: 	case TableReferenceType::EXPRESSION_LIST: {
150: 		auto &bound_expr_list = (BoundExpressionListRef &)ref;
151: 		for (auto &expr_list : bound_expr_list.values) {
152: 			for (auto &expr : expr_list) {
153: 				EnumerateExpression(expr, callback);
154: 			}
155: 		}
156: 		break;
157: 	}
158: 	case TableReferenceType::JOIN: {
159: 		auto &bound_join = (BoundJoinRef &)ref;
160: 		EnumerateExpression(bound_join.condition, callback);
161: 		EnumerateTableRefChildren(*bound_join.left, callback);
162: 		EnumerateTableRefChildren(*bound_join.right, callback);
163: 		break;
164: 	}
165: 	case TableReferenceType::SUBQUERY: {
166: 		auto &bound_subquery = (BoundSubqueryRef &)ref;
167: 		EnumerateQueryNodeChildren(*bound_subquery.subquery, callback);
168: 		break;
169: 	}
170: 	default:
171: 		D_ASSERT(ref.type == TableReferenceType::TABLE_FUNCTION || ref.type == TableReferenceType::BASE_TABLE ||
172: 		         ref.type == TableReferenceType::EMPTY);
173: 		break;
174: 	}
175: }
176: 
177: void ExpressionIterator::EnumerateQueryNodeChildren(BoundQueryNode &node,
178:                                                     const std::function<void(Expression &child)> &callback) {
179: 	switch (node.type) {
180: 	case QueryNodeType::SET_OPERATION_NODE: {
181: 		auto &bound_setop = (BoundSetOperationNode &)node;
182: 		EnumerateQueryNodeChildren(*bound_setop.left, callback);
183: 		EnumerateQueryNodeChildren(*bound_setop.right, callback);
184: 		break;
185: 	}
186: 	default:
187: 		D_ASSERT(node.type == QueryNodeType::SELECT_NODE);
188: 		auto &bound_select = (BoundSelectNode &)node;
189: 		for (idx_t i = 0; i < bound_select.select_list.size(); i++) {
190: 			EnumerateExpression(bound_select.select_list[i], callback);
191: 		}
192: 		EnumerateExpression(bound_select.where_clause, callback);
193: 		for (idx_t i = 0; i < bound_select.groups.group_expressions.size(); i++) {
194: 			EnumerateExpression(bound_select.groups.group_expressions[i], callback);
195: 		}
196: 		EnumerateExpression(bound_select.having, callback);
197: 		for (idx_t i = 0; i < bound_select.aggregates.size(); i++) {
198: 			EnumerateExpression(bound_select.aggregates[i], callback);
199: 		}
200: 		for (idx_t i = 0; i < bound_select.unnests.size(); i++) {
201: 			EnumerateExpression(bound_select.unnests[i], callback);
202: 		}
203: 		for (idx_t i = 0; i < bound_select.windows.size(); i++) {
204: 			EnumerateExpression(bound_select.windows[i], callback);
205: 		}
206: 		if (bound_select.from_table) {
207: 			EnumerateTableRefChildren(*bound_select.from_table, callback);
208: 		}
209: 		break;
210: 	}
211: 	for (idx_t i = 0; i < node.modifiers.size(); i++) {
212: 		switch (node.modifiers[i]->type) {
213: 		case ResultModifierType::DISTINCT_MODIFIER:
214: 			for (auto &expr : ((BoundDistinctModifier &)*node.modifiers[i]).target_distincts) {
215: 				EnumerateExpression(expr, callback);
216: 			}
217: 			break;
218: 		case ResultModifierType::ORDER_MODIFIER:
219: 			for (auto &order : ((BoundOrderModifier &)*node.modifiers[i]).orders) {
220: 				EnumerateExpression(order.expression, callback);
221: 			}
222: 			break;
223: 		default:
224: 			break;
225: 		}
226: 	}
227: }
228: 
229: } // namespace duckdb
[end of src/planner/expression_iterator.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: