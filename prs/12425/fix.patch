diff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp
index d671b44815be..66693a5702a8 100644
--- a/tools/pythonpkg/src/pyconnection.cpp
+++ b/tools/pythonpkg/src/pyconnection.cpp
@@ -1522,6 +1522,9 @@ shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Connect(const string &databas
 	config.AddExtensionOption("pandas_analyze_sample",
 	                          "The maximum number of rows to sample when analyzing a pandas object column.",
 	                          LogicalType::UBIGINT, Value::UBIGINT(1000));
+	config.AddExtensionOption("python_enable_replacements",
+	                          "Whether variables visible to the current stack should be used for replacement scans.",
+	                          LogicalType::BOOLEAN, Value::BOOLEAN(true));
 	if (!DuckDBPyConnection::IsJupyter()) {
 		config_dict["duckdb_api"] = Value("python");
 	} else {
diff --git a/tools/pythonpkg/src/python_replacement_scan.cpp b/tools/pythonpkg/src/python_replacement_scan.cpp
index 2119f7e5855a..bfa317c60b3f 100644
--- a/tools/pythonpkg/src/python_replacement_scan.cpp
+++ b/tools/pythonpkg/src/python_replacement_scan.cpp
@@ -153,31 +153,37 @@ static unique_ptr<TableRef> TryReplacement(py::dict &dict, const string &name, C
 }
 
 static unique_ptr<TableRef> ReplaceInternal(ClientContext &context, const string &table_name) {
+	Value result;
+	auto lookup_result = context.TryGetCurrentSetting("python_enable_replacements", result);
+	D_ASSERT((bool)lookup_result);
+	auto enabled = result.GetValue<bool>();
+
+	if (!enabled) {
+		return nullptr;
+	}
+
 	py::gil_scoped_acquire acquire;
-	// Here we do an exhaustive search on the frame lineage
 	auto current_frame = py::module::import("inspect").attr("currentframe")();
-	while (hasattr(current_frame, "f_locals")) {
-		auto local_dict = py::reinterpret_borrow<py::dict>(current_frame.attr("f_locals"));
-		// search local dictionary
-		if (local_dict) {
-			auto result = TryReplacement(local_dict, table_name, context, current_frame);
-			if (result) {
-				return result;
-			}
+
+	auto local_dict = py::reinterpret_borrow<py::dict>(current_frame.attr("f_locals"));
+	// search local dictionary
+	if (local_dict) {
+		auto result = TryReplacement(local_dict, table_name, context, current_frame);
+		if (result) {
+			return result;
 		}
-		// search global dictionary
-		auto global_dict = py::reinterpret_borrow<py::dict>(current_frame.attr("f_globals"));
-		if (global_dict) {
-			auto result = TryReplacement(global_dict, table_name, context, current_frame);
-			if (result) {
-				return result;
-			}
+	}
+	// search global dictionary
+	auto global_dict = py::reinterpret_borrow<py::dict>(current_frame.attr("f_globals"));
+	if (global_dict) {
+		auto result = TryReplacement(global_dict, table_name, context, current_frame);
+		if (result) {
+			return result;
 		}
-		current_frame = current_frame.attr("f_back");
 	}
-	// Not found :(
 	return nullptr;
 }
+
 unique_ptr<TableRef> PythonReplacementScan::Replace(ClientContext &context, ReplacementScanInput &input,
                                                     optional_ptr<ReplacementScanData> data) {
 	auto &table_name = input.table_name;
