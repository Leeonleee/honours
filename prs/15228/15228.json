{
  "repo": "duckdb/duckdb",
  "pull_number": 15228,
  "instance_id": "duckdb__duckdb-15228",
  "issue_numbers": [
    "15175",
    "15175"
  ],
  "base_commit": "23dc2bc4dc6d34c3a59d29a43d2351d873675098",
  "patch": "diff --git a/src/common/multi_file_reader.cpp b/src/common/multi_file_reader.cpp\nindex e81bedcaf114..97eba1014d0d 100644\n--- a/src/common/multi_file_reader.cpp\n+++ b/src/common/multi_file_reader.cpp\n@@ -215,7 +215,9 @@ void MultiFileReader::BindOptions(MultiFileReaderOptions &options, MultiFileList\n \n \t\tfor (auto &part : partitions) {\n \t\t\tidx_t hive_partitioning_index;\n-\t\t\tauto lookup = std::find(names.begin(), names.end(), part.first);\n+\t\t\tauto lookup = std::find_if(names.begin(), names.end(), [&](const string &col_name) {\n+\t\t\t\treturn StringUtil::CIEquals(col_name, part.first);\n+\t\t\t});\n \t\t\tif (lookup != names.end()) {\n \t\t\t\t// hive partitioning column also exists in file - override\n \t\t\t\tauto idx = NumericCast<idx_t>(lookup - names.begin());\n",
  "test_patch": "diff --git a/data/parquet-testing/hive-partitioning/ci-column-names/COL1=Hannes/data_0.parquet b/data/parquet-testing/hive-partitioning/ci-column-names/COL1=Hannes/data_0.parquet\nnew file mode 100644\nindex 000000000000..c70efafac6d7\nBinary files /dev/null and b/data/parquet-testing/hive-partitioning/ci-column-names/COL1=Hannes/data_0.parquet differ\ndiff --git a/data/parquet-testing/hive-partitioning/ci-column-names/COL1=Mark/data_0.parquet b/data/parquet-testing/hive-partitioning/ci-column-names/COL1=Mark/data_0.parquet\nnew file mode 100644\nindex 000000000000..f7f4c00d7b22\nBinary files /dev/null and b/data/parquet-testing/hive-partitioning/ci-column-names/COL1=Mark/data_0.parquet differ\ndiff --git a/test/sql/copy/partitioned/hive_partition_case_insensitive_column.test b/test/sql/copy/partitioned/hive_partition_case_insensitive_column.test\nnew file mode 100644\nindex 000000000000..678e4ec78f6a\n--- /dev/null\n+++ b/test/sql/copy/partitioned/hive_partition_case_insensitive_column.test\n@@ -0,0 +1,11 @@\n+# name: test/sql/copy/partitioned/hive_partition_case_insensitive_column.test\n+# description: Test when columns in the hive partitioned files differ only in case from the partitions themselves\n+# group: [partitioned]\n+\n+require parquet\n+\n+query II\n+SELECT * FROM  'data/parquet-testing/hive-partitioning/ci-column-names/**/*.parquet' ORDER BY ALL\n+----\n+Hannes\t2\n+Mark\t1\n",
  "problem_statement": "The Parquet reader considers 'FOO' and 'foo' as duplicate column names when different cases are used for the column name and the partition key.\n### What happens?\n\nWhen a Parquet dataset contains a column names and a partition key which are case-sensitive different but case-insensitive the same, DuckDB fails when reading it.\r\n\r\n\n\n### To Reproduce\n\n1. Untar this file :\r\n[people.tar.gz](https://github.com/user-attachments/files/18048196/people.tar.gz)\r\n\r\n2. use the following SQL\r\n\r\n```\r\n.echo on\r\n\r\nFROM read_parquet('people/**/*.parquet', hive_partitioning = false);\r\nFROM read_parquet('people/**/*.parquet');\r\n```\r\n\r\n3. results : \r\n\r\n```\r\nduckdb-1.1.3 < a.sql\r\n\r\nFROM read_parquet('people/**/*.parquet', hive_partitioning = false);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  col1   \u2502 col2  \u2502\r\n\u2502 varchar \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 Hannes  \u2502     2 \u2502\r\n\u2502 Mark    \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nBinder Error: table \"read_parquet\" has duplicate column name \"COL1\"\r\n```\r\n\n\n### OS:\n\nubuntu 22.04 x86_64 \n\n### DuckDB Version:\n\n1.1.3 and bleeding\n\n### DuckDB Client:\n\ncli \n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nNicolas chuche\n\n### Affiliation:\n\nMinistere de la transition \u00e9cologique\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a nightly build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\nThe Parquet reader considers 'FOO' and 'foo' as duplicate column names when different cases are used for the column name and the partition key.\n### What happens?\n\nWhen a Parquet dataset contains a column names and a partition key which are case-sensitive different but case-insensitive the same, DuckDB fails when reading it.\r\n\r\n\n\n### To Reproduce\n\n1. Untar this file :\r\n[people.tar.gz](https://github.com/user-attachments/files/18048196/people.tar.gz)\r\n\r\n2. use the following SQL\r\n\r\n```\r\n.echo on\r\n\r\nFROM read_parquet('people/**/*.parquet', hive_partitioning = false);\r\nFROM read_parquet('people/**/*.parquet');\r\n```\r\n\r\n3. results : \r\n\r\n```\r\nduckdb-1.1.3 < a.sql\r\n\r\nFROM read_parquet('people/**/*.parquet', hive_partitioning = false);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  col1   \u2502 col2  \u2502\r\n\u2502 varchar \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 Hannes  \u2502     2 \u2502\r\n\u2502 Mark    \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nBinder Error: table \"read_parquet\" has duplicate column name \"COL1\"\r\n```\r\n\n\n### OS:\n\nubuntu 22.04 x86_64 \n\n### DuckDB Version:\n\n1.1.3 and bleeding\n\n### DuckDB Client:\n\ncli \n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nNicolas chuche\n\n### Affiliation:\n\nMinistere de la transition \u00e9cologique\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a nightly build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2024-12-09T14:52:35Z"
}