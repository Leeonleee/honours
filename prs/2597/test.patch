diff --git a/data/parquet-testing/broken/broken_bigint.parquet b/data/parquet-testing/broken/broken_bigint.parquet
new file mode 100644
index 000000000000..fc2e3859b6e8
Binary files /dev/null and b/data/parquet-testing/broken/broken_bigint.parquet differ
diff --git a/data/parquet-testing/broken/broken_date.parquet b/data/parquet-testing/broken/broken_date.parquet
new file mode 100644
index 000000000000..2215cb1dc2ba
Binary files /dev/null and b/data/parquet-testing/broken/broken_date.parquet differ
diff --git a/data/parquet-testing/broken/broken_int.parquet b/data/parquet-testing/broken/broken_int.parquet
new file mode 100644
index 000000000000..8cf309fca197
Binary files /dev/null and b/data/parquet-testing/broken/broken_int.parquet differ
diff --git a/data/parquet-testing/broken/broken_smallint.parquet b/data/parquet-testing/broken/broken_smallint.parquet
new file mode 100644
index 000000000000..a44c096700a6
Binary files /dev/null and b/data/parquet-testing/broken/broken_smallint.parquet differ
diff --git a/data/parquet-testing/broken/broken_timestamp.parquet b/data/parquet-testing/broken/broken_timestamp.parquet
new file mode 100644
index 000000000000..859fd9e7cee3
Binary files /dev/null and b/data/parquet-testing/broken/broken_timestamp.parquet differ
diff --git a/data/parquet-testing/broken/broken_timestamp_ms.parquet b/data/parquet-testing/broken/broken_timestamp_ms.parquet
new file mode 100644
index 000000000000..433f7761a113
Binary files /dev/null and b/data/parquet-testing/broken/broken_timestamp_ms.parquet differ
diff --git a/data/parquet-testing/broken/broken_tinyint.parquet b/data/parquet-testing/broken/broken_tinyint.parquet
new file mode 100644
index 000000000000..a20079c13874
Binary files /dev/null and b/data/parquet-testing/broken/broken_tinyint.parquet differ
diff --git a/data/parquet-testing/broken/broken_ubigint.parquet b/data/parquet-testing/broken/broken_ubigint.parquet
new file mode 100644
index 000000000000..77a623aa0df9
Binary files /dev/null and b/data/parquet-testing/broken/broken_ubigint.parquet differ
diff --git a/data/parquet-testing/broken/broken_uinteger.parquet b/data/parquet-testing/broken/broken_uinteger.parquet
new file mode 100644
index 000000000000..f019cbc4f280
Binary files /dev/null and b/data/parquet-testing/broken/broken_uinteger.parquet differ
diff --git a/data/parquet-testing/broken/broken_usmallint.parquet b/data/parquet-testing/broken/broken_usmallint.parquet
new file mode 100644
index 000000000000..1bb946331a84
Binary files /dev/null and b/data/parquet-testing/broken/broken_usmallint.parquet differ
diff --git a/data/parquet-testing/broken/broken_utinyint.parquet b/data/parquet-testing/broken/broken_utinyint.parquet
new file mode 100644
index 000000000000..81e36a64aba0
Binary files /dev/null and b/data/parquet-testing/broken/broken_utinyint.parquet differ
diff --git a/test/parquet/test_parquet_reader.test b/test/parquet/test_parquet_reader.test
index 7864cce28b3d..1c154b760595 100644
--- a/test/parquet/test_parquet_reader.test
+++ b/test/parquet/test_parquet_reader.test
@@ -8,7 +8,7 @@ statement ok
 PRAGMA enable_verification
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/manyrowgroups.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/manyrowgroups.parquet') limit 50;
 ----
 42	
 42	
@@ -64,7 +64,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/manyrowgroups.parquet') limit 5
 mode skip 
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/map.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/map.parquet') limit 50;
 ----
 {key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:19:57 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 921]}	
 {key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:19:59 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 922]}	
@@ -119,10 +119,8 @@ SELECT * FROM parquet_scan('data/parquet-testing/map.parquet') limit 50
 
 mode unskip 
 
-mode skip 
-
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/int32_decimal.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/int32_decimal.parquet') limit 50;
 ----
 1.00	
 2.00	
@@ -149,19 +147,17 @@ SELECT * FROM parquet_scan('data/parquet-testing/int32_decimal.parquet') limit 5
 23.00	
 24.00	
 
-mode unskip 
-
 mode skip 
 
 query IIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/nonnullable.impala.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/nonnullable.impala.parquet') limit 50;
 ----
 8	[-1]	[[-1, -2], []]	{key: [k1], value: [-1]}	[{key: [], value: []}, {key: [k1], value: [1]}, {key: [], value: []}, {key: [], value: []}]	{a: -1, B: [-1], c: {D: [[{e: -1, f: nonnullable}]]}, G: {key: [], value: []}}	
 
 mode unskip 
 
 query IIIIIIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/bug687_nulls.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/bug687_nulls.parquet') limit 50;
 ----
 NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	
 95	42	39	49	16	34	82	7	40	82	
@@ -215,7 +211,7 @@ NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
 4	94	21	52	43	32	43	51	56	60	
 
 query IIII
-SELECT * FROM parquet_scan('data/parquet-testing/bug1554.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/bug1554.parquet') limit 50;
 ----
 1584883:SSuWRbZnFmIqCUBQYxk9+48fdIwywjfQUyfcKP+pbJhaqWS+UZh0Sua8VNJKlQpIlRzyWr57xyrqTh2ZgIQnxQ==	False	NULL	200	
 1584883:VduFa/R/CL7CbbEUmdFKysh80R38hXdrfuDlFhsa5mU3G3vfUDiQdTR0H0LzJzWojUDGgUr+hKp55VRRXMxaaQ==	False	NULL	200	
@@ -271,7 +267,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/bug1554.parquet') limit 50
 mode skip 
 
 query IIIII
-SELECT * FROM parquet_scan('data/parquet-testing/apkwan.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/apkwan.parquet') limit 50;
 ----
 53e997b9b7602d9701f9f044	[https://link.springer.com/10.1007/s00108-004-1229-0]	[{name: M. Stoll, id: 56018d9645cedb3395e77641, org: Abteilung Klinische Immunologie Medizinische Hochschule Hannover}, {name: H. Heiken, id: 53f4d53adabfaef34ff814c8, org: Abteilung Klinische Immunologie Medizinische Hochschule Hannover}, {name: G. M. N. Behrens, id: 53f42afbdabfaec09f0ed4e0, org: Abteilung Klinische Immunologie Medizinische Hochschule Hannover}, {name: R. E. Schmidt, id: 56018d9645cedb3395e77644, org: Abteilung Klinische Immunologie Medizinische Hochschule Hannover}]	en	Immunrekonstitutionssyndrome (IRIS)	
 53e997b2b7602d9701f8fea5	[]	[{name: D. Barr, id: 5440d4cfdabfae805a6fd46c, org: Camborne School of Mines Redruth, Cornwall England}]	en	Mineral bioprocessing	
@@ -327,7 +323,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/apkwan.parquet') limit 50
 mode unskip 
 
 query II
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/nested_lists.snappy.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/nested_lists.snappy.parquet') limit 50;
 ----
 [[[a, b], [c]], [NULL, [d]]]	1
 [[[a, b], [c, d]], [NULL, [e]]]	1
@@ -336,7 +332,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/nested_lists.snappy.parqu
 mode skip 
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/nulls.snappy.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/nulls.snappy.parquet') limit 50;
 ----
 {b_c_int: NULL}	
 {b_c_int: NULL}	
@@ -350,14 +346,14 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/nulls.snappy.parquet') li
 mode unskip 
 
 query III
-SELECT * FROM parquet_scan('data/parquet-testing/nan-float.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/nan-float.parquet') limit 50;
 ----
 -1.0	foo	True	
 NULL	bar	False	
 2.5	baz	True	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/manyrowgroups2.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/manyrowgroups2.parquet') limit 50;
 ----
 42	
 42	
@@ -411,7 +407,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/manyrowgroups2.parquet') limit
 90	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/struct.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/struct.parquet') limit 50;
 ----
 {'str_field': hello, 'f64_field': NULL}
 {'str_field': NULL, 'f64_field': 1.230000}
@@ -419,7 +415,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/struct.parquet') limit 50
 mode skip 
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/byte_array_decimal.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/byte_array_decimal.parquet') limit 50;
 ----
 1.00	
 2.00	
@@ -449,25 +445,25 @@ SELECT * FROM parquet_scan('data/parquet-testing/byte_array_decimal.parquet') li
 mode unskip 
 
 query II
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/list_columns.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/list_columns.parquet') limit 50;
 ----
 [1, 2, 3]	[abc, efg, hij]	
 [NULL, 1]	NULL	
 [4]	[efg, NULL, hij, xyz]	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/timestamp-ms.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/timestamp-ms.parquet') limit 50;
 ----
 2020-10-05 17:21:49	
 
 query IIIIIIIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/alltypes_dictionary.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/alltypes_dictionary.parquet') limit 50;
 ----
 0	True	0	0	0	0	0.0	0.0	01/01/09	0	2009-01-01 00:00:00	
 1	False	1	1	1	10	1.100000023841858	10.1	01/01/09	1	2009-01-01 00:01:00	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/binary.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/binary.parquet') limit 50;
 ----
 \x00
 \x01
@@ -483,7 +479,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/binary.parquet') limit 50
 \x0B
 
 query IIII
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/nation.dict-malformed.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/nation.dict-malformed.parquet') limit 50;
 ----
 0	ALGERIA	0	 haggle. carefully final deposits detect slyly agai	
 1	ARGENTINA	1	al foxes promise slyly according to the regular accounts. bold requests alon	
@@ -512,7 +508,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/nation.dict-malformed.par
 24	UNITED STATES	1	y final packages. slow foxes cajole quickly. quickly silent platelets breach ironic accounts. unusual pinto be	
 
 query IIIIIIIIIIIIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet') limit 50;
 ----
 1	155190	7706	1	17	21168.23	0.04	0.02	N	O	1996-03-13	1996-02-12	1996-03-22	DELIVER IN PERSON	TRUCK	egular courts above the	
 1	67310	7311	2	36	45983.16	0.09	0.06	N	O	1996-04-12	1996-02-28	1996-04-20	TAKE BACK RETURN	MAIL	ly final dependencies: slyly bold 	
@@ -568,7 +564,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet'
 mode skip 
 
 query III
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/nested_maps.snappy.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/nested_maps.snappy.parquet') limit 50;
 ----
 {key: [a], value: [{key: [1, 2], value: [True, False]}]}	1	1.0	
 {key: [], value: [{key: [1], value: [True]}]}	1	1.0	
@@ -580,7 +576,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/nested_maps.snappy.parque
 mode unskip 
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/dict-page-offset-zero.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/dict-page-offset-zero.parquet') limit 50;
 ----
 1552	
 1552	
@@ -623,34 +619,32 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/dict-page-offset-zero.par
 1552	
 
 query III
-SELECT * FROM parquet_scan('data/parquet-testing/silly-names.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/silly-names.parquet') limit 50;
 ----
 1	foo	True	
 2	bar	False	
 3	baz	True	
 
 query III
-SELECT * FROM parquet_scan('data/parquet-testing/zstd.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/zstd.parquet') limit 50;
 ----
 -1.0	foo	True	
 NULL	bar	False	
 2.5	baz	True	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/bug1618_struct_strings.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/bug1618_struct_strings.parquet') limit 50;
 ----
 {'str_field': hello, 'f64_field': NULL}
 {'str_field': NULL, 'f64_field': 1.230000}
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/single_nan.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/single_nan.parquet') limit 50;
 ----
 NULL	
 
-mode skip 
-
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/int64_decimal.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/int64_decimal.parquet') limit 50;
 ----
 1.00	
 2.00	
@@ -677,10 +671,8 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/int64_decimal.parquet') l
 23.00	
 24.00	
 
-mode unskip 
-
 query IIIIIIIIIIIIIIIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/filter_bug1391.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/filter_bug1391.parquet') limit 50;
 ----
 98	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	XYZ	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	275	DDU Emergency & General Surgery	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	7	Ward/Unit	3	Department	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	CODE	
 13	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	XYZ	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	275	DDU Emergency & General Surgery	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	7	Ward/Unit	3	Department	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	CODE	
@@ -734,7 +726,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/filter_bug1391.parquet') limit
 257	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	XYZ	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	141	Therapies CBU	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	7	Ward/Unit	NULL	NULL	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	1900-01-01 00:00:00.000	9999-12-31 00:00:00.000	CODE	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/fixed_length_decimal_legacy.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/fixed_length_decimal_legacy.parquet') limit 50;
 ----
 1.00	
 2.00	
@@ -762,12 +754,12 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/fixed_length_decimal_lega
 24.00	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/timestamp.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/timestamp.parquet') limit 50;
 ----
 2020-10-05 17:21:49.48844
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/fixed_length_decimal.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/fixed_length_decimal.parquet') limit 50;
 ----
 1.00	
 2.00	
@@ -795,7 +787,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/fixed_length_decimal.parq
 24.00	
 
 query IIIIIIIIIIIIIIIIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/leftdate3_192_loop_1.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/leftdate3_192_loop_1.parquet') limit 50;
 ----
 00080010	10006	22156	0.0	1.0	3743.0	1925-12-31	109.0	109.75	109.0	400.0	NULL	109.375	109.5	600.0	7.412625	7.26	109.75	NULL	NULL	
 00299090	10022	22158	0.0	1.0	3420.0	1925-12-31	55.0	56.0	56.0	3400.0	NULL	56.0	56.25	200.0	9.365437	9.365437	55.125	NULL	NULL	
@@ -849,14 +841,14 @@ SELECT * FROM parquet_scan('data/parquet-testing/leftdate3_192_loop_1.parquet')
 04557310	10559	22202	0.0	1.0	5311.0	1925-12-31	53.0	54.125	53.0	3800.0	NULL	52.75	53.0	599.0	18.0	18.0	53.5	NULL	NULL	
 
 query III
-SELECT * FROM parquet_scan('data/parquet-testing/blob.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/blob.parquet') limit 50;
 ----
 1	\x04\x00	str1	
 2	\x04\x00\x80	str2	
 3	\x03\xFF\x00\xFF	str3
 
 query IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/bug1588.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/bug1588.parquet') limit 50;
 ----
 1621259:e1WMOfPKh7EnuBJ+dG3V8mksk2NSFL8m7vLi1NPB3xk6NzQI4Dfqs3Ok2GmTRXqMqo3oc7T3ckM0/uTs/e4nVg==	1621259	e1WMOfPKh7EnuBJ+dG3V8mksk2NSFL8m7vLi1NPB3xk6NzQI4Dfqs3Ok2GmTRXqMqo3oc7T3ckM0/uTs/e4nVg==	a	YiX2OkkxZvSMMT5TmbyZjlE8gCQSSmvxUrNBtLw1rWrs5cmxQNdTwPJgzgXNB3nF+1vaazrHwH32rnq67T7cHg==	http://crawler-test.com/urls/page_url_length_n	0.66	200	Page URL Length	wl8lmqkOqcTS8gbpoGaBf0ZxvleJXOCIrIDuQui6k7nhUPa5Xu/tupkmw0xYxSz8ByUNjMGgY0i0egvh6WNBBw==	http://crawler-test.com/urls/page_url_length/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx	0.0	200	Page URL Length (400 characters	a	Page URL Length (400 characters)	False	False	True	False	NULL	NULL	http://crawler-test.com/urls/page_url_length_n	YiX2OkkxZvSMMT5TmbyZjlE8gCQSSmvxUrNBtLw1rWrs5cmxQNdTwPJgzgXNB3nF+1vaazrHwH32rnq67T7cHg==	http://crawler-test.com/urls/page_url_length/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx	wl8lmqkOqcTS8gbpoGaBf0ZxvleJXOCIrIDuQui6k7nhUPa5Xu/tupkmw0xYxSz8ByUNjMGgY0i0egvh6WNBBw==	False	False	False	2	2	False	False	False	1	doc	0	
 1621259:fCt7H+I6nGxXkRaRSYXL5kW5lkuXmaXAXiZdcm5dejcpwITcdVYNeYY0JQAJbDAOX2mjEOQX0Z/vvq9OAQDFUQ==	1621259	fCt7H+I6nGxXkRaRSYXL5kW5lkuXmaXAXiZdcm5dejcpwITcdVYNeYY0JQAJbDAOX2mjEOQX0Z/vvq9OAQDFUQ==	a	XnZecm8bhAZFA327isPnIwA+v6xejmC5P8/iQ0ax8ZMBhM/mCxes6Ugj8WsvwK6qKJteGGM5pLvdyBDhcaisyw==	https://crawler-test.com/content/page_html_size_n	1.89	200	Page HTML Size	hzYV7GhCYN6hhz7hXVTbyIct7YXRsyHzsCriciWYnQeMCzu9UKIsFAKdKf3yecmiDIVgYA/N8lLETj4AyprBmA==	https://crawler-test.com/content/page_html_size/5	0.27	200	Page html Size (~5 KB)	a	Page HTML Size (~5 KB)	False	False	True	False	NULL	NULL	https://crawler-test.com/content/page_html_size_n	XnZecm8bhAZFA327isPnIwA+v6xejmC5P8/iQ0ax8ZMBhM/mCxes6Ugj8WsvwK6qKJteGGM5pLvdyBDhcaisyw==	https://crawler-test.com/content/page_html_size/5	hzYV7GhCYN6hhz7hXVTbyIct7YXRsyHzsCriciWYnQeMCzu9UKIsFAKdKf3yecmiDIVgYA/N8lLETj4AyprBmA==	True	True	False	2	2	False	False	False	1	doc	0	
@@ -910,7 +902,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/bug1588.parquet') limit 50
 1621259:QQ/wWoUYYMJETokJJxVZSlqTHUMifVE7YGZcGNvLQkWH4CpFqgXBlt/ABSfSJs3zBJL9gitT6ABEmV5MWFwOUQ==	1621259	QQ/wWoUYYMJETokJJxVZSlqTHUMifVE7YGZcGNvLQkWH4CpFqgXBlt/ABSfSJs3zBJL9gitT6ABEmV5MWFwOUQ==	a	0FgjuY6ilewP5/Tv2RHwt9A66vuidBx3jYV1+sEb5Rcld/ErHsWinoZyRnlrirqQiLdBjxv9zCe/9i9wj+FPkg==	https://crawler-test.com/titles/page_title_length_n	1.89	200	Page Title Length	/yh69joQhtpoZX9pPVfv7cbB3acvTzB22nfHIpCNP1cgfcZC3BnkcflsLTVeRY5xZ1qDpYf5fGlQMu72PhPOxQ==	https://crawler-test.com/titles/page_title_length/2	0.27	200	xx	a	Page Title Length (2 characters)	False	False	True	False	NULL	NULL	https://crawler-test.com/titles/page_title_length_n	0FgjuY6ilewP5/Tv2RHwt9A66vuidBx3jYV1+sEb5Rcld/ErHsWinoZyRnlrirqQiLdBjxv9zCe/9i9wj+FPkg==	https://crawler-test.com/titles/page_title_length/2	/yh69joQhtpoZX9pPVfv7cbB3acvTzB22nfHIpCNP1cgfcZC3BnkcflsLTVeRY5xZ1qDpYf5fGlQMu72PhPOxQ==	True	True	False	2	2	False	False	False	1	doc	0	
 
 query II
-SELECT * FROM parquet_scan('data/parquet-testing/bug1589.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/bug1589.parquet') limit 50;
 ----
 200	NULL	
 300	NULL	
@@ -966,7 +958,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/bug1589.parquet') limit 50
 mode skip 
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/hadoop_lz4_compressed_larger.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/hadoop_lz4_compressed_larger.parquet') limit 50;
 ----
 c7ce6bef-d5b0-4863-b199-8ea8c7fb117b	
 e8fb9197-cb9f-4118-b67f-fbfa65f61843	
@@ -1024,7 +1016,7 @@ mode unskip
 mode skip 
 
 query III
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/non_hadoop_lz4_compressed.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/non_hadoop_lz4_compressed.parquet') limit 50;
 ----
 1593604800	abc	42.0	
 1593604800	def	7.7	
@@ -1034,7 +1026,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/non_hadoop_lz4_compressed
 mode unskip 
 
 query IIIIIIIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/alltypes_plain.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/alltypes_plain.parquet') limit 50;
 ----
 4	True	0	0	0	0	0.0	0.0	03/01/09	0	2009-03-01 00:00:00	
 5	False	1	1	1	10	1.100000023841858	10.1	03/01/09	1	2009-03-01 00:01:00	
@@ -1048,7 +1040,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/alltypes_plain.parquet')
 mode skip 
 
 query II
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/repeated_no_annotation.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/repeated_no_annotation.parquet') limit 50;
 ----
 1	NULL	
 2	NULL	
@@ -1062,7 +1054,7 @@ mode unskip
 mode skip 
 
 query IIIIIIIIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/data-types.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/data-types.parquet') limit 50;
 ----
 NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	
 42	43	44	45	4.599999904632568	4.7	4.80	49	50	True	2019-11-26 20:11:42.501000	2020-01-10	
@@ -1073,7 +1065,7 @@ NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
 mode unskip 
 
 query IIII
-SELECT * FROM parquet_scan('data/parquet-testing/unsigned.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/unsigned.parquet') limit 50;
 ----
 1	1	1	1	
 2	2	2	2	
@@ -1083,13 +1075,13 @@ SELECT * FROM parquet_scan('data/parquet-testing/unsigned.parquet') limit 50
 255	65535	4294967295	18446744073709551615	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/pandas-date.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/pandas-date.parquet') limit 50;
 ----
 2021-01-12	
 1921-12-24	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/date.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/date.parquet') limit 50;
 ----
 1970-01-01	
 1971-01-01	
@@ -1131,7 +1123,7 @@ NULL
 mode skip 
 
 query IIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/nullable.impala.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/nullable.impala.parquet') limit 50;
 ----
 1	[1, 2, 3]	[[1, 2], [3, 4]]	{key: [k1, k2], value: [1, 100]}	[{key: [k1], value: [1]}]	{A: 1, : [1], C: {d: [[{E: 10, F: aaa}, {E: -10, F: bb}], [{E: 11, F: c}]]}, g: {key: [foo], value: [{H: {i: [1.1]}}]}}	
 2	[NULL, 1, 2, NULL, 3, NULL]	[[NULL, 1, 2, NULL], [3, NULL, 4], [], NULL]	{key: [k1, k2], value: [2, NULL]}	[{key: [k3, k1], value: [NULL, 1]}, NULL, {key: [], value: []}]	{A: NULL, : [NULL], C: {d: [[{E: NULL, F: NULL}, {E: 10, F: aaa}, {E: NULL, F: NULL}, {E: -10, F: bb}, {E: NULL, F: NULL}], [{E: 11, F: c}, NULL], [], NULL]}, g: {key: [g1, g2, g3, g4, g5], value: [{H: {i: [2.2, NULL]}}, {H: {i: []}}, NULL, {H: {i: NULL}}, {H: NULL}]}}	
@@ -1146,7 +1138,7 @@ mode unskip
 mode skip 
 
 query III
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/hadoop_lz4_compressed.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/hadoop_lz4_compressed.parquet') limit 50;
 ----
 1593604800	abc	42.0	
 1593604800	def	7.7	
@@ -1156,20 +1148,18 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/hadoop_lz4_compressed.par
 mode unskip 
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/fixed.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/fixed.parquet') limit 50;
 ----
 \x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F
 
 query IIIIIIIIIII
-SELECT * FROM parquet_scan('data/parquet-testing/arrow/alltypes_plain.snappy.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/arrow/alltypes_plain.snappy.parquet') limit 50;
 ----
 6	True	0	0	0	0	0.0	0.0	04/01/09	0	2009-04-01 00:00:00	
 7	False	1	1	1	10	1.100000023841858	10.1	04/01/09	1	2009-04-01 00:01:00	
 
-mode skip 
-
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/decimal/arrow/int32_decimal.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/decimal/int32_decimal.parquet') limit 50;
 ----
 1.00	
 2.00	
@@ -1196,10 +1186,8 @@ SELECT * FROM parquet_scan('data/parquet-testing/decimal/arrow/int32_decimal.par
 23.00	
 24.00	
 
-mode unskip 
-
 query IIIII
-SELECT * FROM parquet_scan('data/parquet-testing/decimal/pandas_decimal.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/decimal/pandas_decimal.parquet') limit 50;
 ----
 1234.0	12.34	12345.6789	123456789.98765433	922337203685477580700.92230685477500000	
 -1234.0	-12.34	-9765.4321	-987654321.12345680	-922337236854775807.92233720306854775	
@@ -1211,7 +1199,7 @@ NULL	NULL	NULL	NULL	0E-17
 mode skip 
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/decimal/arrow/byte_array_decimal.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/decimal/arrow/byte_array_decimal.parquet') limit 50;
 ----
 1.00	
 2.00	
@@ -1241,7 +1229,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/decimal/arrow/byte_array_decima
 mode unskip 
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/decimal/decimal_dc.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/decimal/decimal_dc.parquet') limit 50
 ----
 NULL	
 NULL	
@@ -1294,10 +1282,8 @@ NULL
 NULL	
 NULL	
 
-mode skip 
-
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/decimal/int64_decimal.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/decimal/int64_decimal.parquet') limit 50
 ----
 1.00	
 2.00	
@@ -1324,10 +1310,8 @@ SELECT * FROM parquet_scan('data/parquet-testing/decimal/int64_decimal.parquet')
 23.00	
 24.00	
 
-mode unskip 
-
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/decimal/fixed_length_decimal_legacy.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/decimal/fixed_length_decimal_legacy.parquet') limit 50;
 ----
 1.00	
 2.00	
@@ -1355,7 +1339,7 @@ SELECT * FROM parquet_scan('data/parquet-testing/decimal/fixed_length_decimal_le
 24.00	
 
 query I
-SELECT * FROM parquet_scan('data/parquet-testing/decimal/fixed_length_decimal.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/decimal/fixed_length_decimal.parquet') limit 50;
 ----
 1.00	
 2.00	
@@ -1383,29 +1367,29 @@ SELECT * FROM parquet_scan('data/parquet-testing/decimal/fixed_length_decimal.pa
 24.00	
 
 query II
-SELECT * FROM parquet_scan('data/parquet-testing/glob2/t1.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/glob2/t1.parquet') limit 50;
 ----
 1	hello	
 
 query II
-SELECT * FROM parquet_scan('data/parquet-testing/cache/cache1.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/cache/cache1.parquet') limit 50;
 ----
 1	hello	
 
 query II
-SELECT * FROM parquet_scan('data/parquet-testing/cache/cache2.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/cache/cache2.parquet') limit 50;
 ----
 0	10	
 1	20	
 2	30	
 
 query II
-SELECT * FROM parquet_scan('data/parquet-testing/glob/t2.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/glob/t2.parquet') limit 50;
 ----
 1	hello	
 
 query II
-SELECT * FROM parquet_scan('data/parquet-testing/glob/t1.parquet') limit 50 
+SELECT * FROM parquet_scan('data/parquet-testing/glob/t1.parquet') limit 50;
 ----
 1	hello	
 
diff --git a/test/sql/copy/parquet/incorrect_converted_type.test b/test/sql/copy/parquet/incorrect_converted_type.test
new file mode 100644
index 000000000000..7ab14fe672a7
--- /dev/null
+++ b/test/sql/copy/parquet/incorrect_converted_type.test
@@ -0,0 +1,39 @@
+# name: test/sql/copy/parquet/incorrect_converted_type.test
+# description: Test parquet files with incorrect converted type annotations
+# group: [parquet]
+
+require parquet
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_bigint.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_date.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_int.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_smallint.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_timestamp.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_timestamp_ms.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_tinyint.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_ubigint.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_uinteger.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_usmallint.parquet';
+
+statement error
+SELECT * FROM 'data/parquet-testing/broken/broken_utinyint.parquet';
+
diff --git a/test/sql/copy/parquet/test_parquet_scan.test b/test/sql/copy/parquet/test_parquet_scan.test
index ea90fe4e8556..a81d3f234e35 100644
--- a/test/sql/copy/parquet/test_parquet_scan.test
+++ b/test/sql/copy/parquet/test_parquet_scan.test
@@ -95,7 +95,7 @@ query IIIIRRITTTTI
 SELECT * FROM parquet_scan('data/parquet-testing/data-types.parquet')
 ----
 NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
-42	43	44	45	4.600000	4.700000	480	49	50	1	2019-11-26 20:11:42.501	2020-01-10
+42	43	44	45	4.600000	4.700000	4.80	49	50	1	2019-11-26 20:11:42.501	2020-01-10
 -127	-32767	-2147483647	-9223372036854775807	-4.600000	-4.700000	NULL	NULL	NULL	0	NULL	NULL
 127	32767	2147483647	9223372036854775807	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
 NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
diff --git a/test/sql/copy/parquet/writer/parquet_write_date.test b/test/sql/copy/parquet/writer/parquet_write_date.test
new file mode 100644
index 000000000000..eb7f60ca2f7c
--- /dev/null
+++ b/test/sql/copy/parquet/writer/parquet_write_date.test
@@ -0,0 +1,37 @@
+# name: test/sql/copy/parquet/writer/parquet_write_date.test
+# description: Parquet dates round trip
+# group: [writer]
+
+require parquet
+
+require vector_size 64
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+CREATE TABLE dates(d DATE)
+
+statement ok
+INSERT INTO dates VALUES (DATE '1992-01-01'), (DATE '1900-01-01'), (NULL), (DATE '2020-09-27')
+
+query I nosort date_scan
+SELECT * FROM dates
+----
+
+statement ok
+COPY dates TO '__TEST_DIR__/dates.parquet' (FORMAT 'parquet');
+
+query I nosort date_scan
+SELECT * FROM '__TEST_DIR__/dates.parquet'
+----
+
+query I
+SELECT typeof(d) FROM '__TEST_DIR__/dates.parquet' LIMIT 1
+----
+DATE
+
+query I
+SELECT * FROM '__TEST_DIR__/dates.parquet' WHERE d='1992-01-01'
+----
+1992-01-01
diff --git a/test/sql/copy/parquet/writer/parquet_write_hugeint.test b/test/sql/copy/parquet/writer/parquet_write_hugeint.test
new file mode 100644
index 000000000000..9e61b1f7fc14
--- /dev/null
+++ b/test/sql/copy/parquet/writer/parquet_write_hugeint.test
@@ -0,0 +1,33 @@
+# name: test/sql/copy/parquet/writer/parquet_write_hugeint.test
+# description: Parquet hugeint round trip
+# group: [writer]
+
+require parquet
+
+require vector_size 64
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+CREATE TABLE hugeints(h HUGEINT)
+
+statement ok
+INSERT INTO hugeints VALUES (-1180591620717411303424), (0), (NULL), (1180591620717411303424)
+
+statement ok
+COPY hugeints TO '__TEST_DIR__/hugeints.parquet' (FORMAT 'parquet');
+
+query I
+SELECT * FROM '__TEST_DIR__/hugeints.parquet'
+----
+-1180591620717411303424
+0
+NULL
+1180591620717411303424
+
+query I
+SELECT typeof(h) FROM '__TEST_DIR__/hugeints.parquet' LIMIT 1
+----
+DOUBLE
+
diff --git a/test/sql/copy/parquet/writer/parquet_write_signed.test b/test/sql/copy/parquet/writer/parquet_write_signed.test
new file mode 100644
index 000000000000..af5c14286962
--- /dev/null
+++ b/test/sql/copy/parquet/writer/parquet_write_signed.test
@@ -0,0 +1,77 @@
+# name: test/sql/copy/parquet/writer/parquet_write_signed.test
+# description: Parquet signed types round trip
+# group: [writer]
+
+require parquet
+
+require vector_size 64
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+CREATE TABLE values_TINYINT AS SELECT d::TINYINT d FROM (VALUES
+    (-128), (42), (NULL), (127)) tbl (d);
+
+statement ok
+CREATE TABLE values_SMALLINT AS SELECT d::SMALLINT d FROM (VALUES
+    (-32768), (42), (NULL), (32767)) tbl (d);
+
+statement ok
+CREATE TABLE values_INTEGER AS SELECT d::INTEGER d FROM (VALUES
+    (-2147483648), (42), (NULL), (2147483647)) tbl (d);
+
+statement ok
+CREATE TABLE values_BIGINT AS SELECT d::BIGINT d FROM (VALUES
+    (-9223372036854775808), (42), (NULL), (9223372036854775807)) tbl (d);
+
+foreach type TINYINT SMALLINT INTEGER BIGINT
+
+statement ok
+CREATE OR REPLACE TABLE signed(d ${type})
+
+statement ok
+INSERT INTO signed SELECT * FROM values_${type}
+
+statement ok
+COPY signed TO '__TEST_DIR__/signed.parquet' (FORMAT 'parquet');
+
+query I
+SELECT * FROM '__TEST_DIR__/signed.parquet' EXCEPT SELECT * FROM signed
+----
+
+query I
+SELECT * FROM signed EXCEPT SELECT * FROM '__TEST_DIR__/signed.parquet'
+----
+
+query I
+SELECT * FROM '__TEST_DIR__/signed.parquet' WHERE d=42
+----
+42
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/signed.parquet' WHERE d>42
+----
+1
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/signed.parquet' WHERE d>=42
+----
+2
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/signed.parquet' WHERE d<42
+----
+1
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/signed.parquet' WHERE d<=42
+----
+2
+
+query I
+SELECT typeof(d)='${type}' FROM '__TEST_DIR__/signed.parquet' LIMIT 1
+----
+true
+
+endloop
\ No newline at end of file
diff --git a/test/sql/copy/parquet/writer/parquet_write_timestamp.test b/test/sql/copy/parquet/writer/parquet_write_timestamp.test
new file mode 100644
index 000000000000..415d5338db94
--- /dev/null
+++ b/test/sql/copy/parquet/writer/parquet_write_timestamp.test
@@ -0,0 +1,45 @@
+# name: test/sql/copy/parquet/writer/parquet_write_timestamp.test
+# description: Parquet timestamp round trip
+# group: [writer]
+
+require parquet
+
+require vector_size 64
+
+statement ok
+PRAGMA enable_verification
+
+foreach type TIMESTAMP TIMESTAMP_MS TIMESTAMP_NS TIMESTAMP_S
+
+statement ok
+CREATE OR REPLACE TABLE timestamps(d ${type})
+
+statement ok
+INSERT INTO timestamps VALUES
+    (TIMESTAMP '1992-01-01 12:03:27'),
+    (TIMESTAMP '1900-01-01 03:08:47'),
+    (NULL),
+    (TIMESTAMP '2020-09-27 13:12:01')
+
+query I nosort ts_scan
+SELECT * FROM timestamps
+----
+
+statement ok
+COPY timestamps TO '__TEST_DIR__/timestamps.parquet' (FORMAT 'parquet');
+
+query I nosort ts_scan
+SELECT * FROM '__TEST_DIR__/timestamps.parquet'
+----
+
+query I
+SELECT * FROM '__TEST_DIR__/timestamps.parquet' WHERE d='1992-01-01 12:03:27'
+----
+1992-01-01 12:03:27
+
+query I
+SELECT typeof(d) FROM '__TEST_DIR__/timestamps.parquet' LIMIT 1
+----
+TIMESTAMP
+
+endloop
\ No newline at end of file
diff --git a/test/sql/copy/parquet/writer/parquet_write_unsigned.test b/test/sql/copy/parquet/writer/parquet_write_unsigned.test
new file mode 100644
index 000000000000..c97dd5c22586
--- /dev/null
+++ b/test/sql/copy/parquet/writer/parquet_write_unsigned.test
@@ -0,0 +1,77 @@
+# name: test/sql/copy/parquet/writer/parquet_write_unsigned.test
+# description: Parquet unsigned types round trip
+# group: [writer]
+
+require parquet
+
+require vector_size 64
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+CREATE TABLE values_UTINYINT AS SELECT d::UTINYINT d FROM (VALUES
+    (0), (42), (NULL), (255)) tbl (d);
+
+statement ok
+CREATE TABLE values_USMALLINT AS SELECT d::USMALLINT d FROM (VALUES
+    (0), (42), (NULL), (65535)) tbl (d);
+
+statement ok
+CREATE TABLE values_UINTEGER AS SELECT d::UINTEGER d FROM (VALUES
+    (0), (42), (NULL), (4294967295)) tbl (d);
+
+statement ok
+CREATE TABLE values_UBIGINT AS SELECT d::UBIGINT d FROM (VALUES
+    (0), (42), (NULL), (18446744073709551615)) tbl (d);
+
+foreach type UTINYINT USMALLINT UINTEGER UBIGINT
+
+statement ok
+CREATE OR REPLACE TABLE unsigned(d ${type})
+
+statement ok
+INSERT INTO unsigned SELECT * FROM values_${type}
+
+statement ok
+COPY unsigned TO '__TEST_DIR__/unsigned.parquet' (FORMAT 'parquet');
+
+query I
+SELECT * FROM '__TEST_DIR__/unsigned.parquet' EXCEPT SELECT * FROM unsigned
+----
+
+query I
+SELECT * FROM unsigned EXCEPT SELECT * FROM '__TEST_DIR__/unsigned.parquet'
+----
+
+query I
+SELECT * FROM '__TEST_DIR__/unsigned.parquet' WHERE d=42
+----
+42
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/unsigned.parquet' WHERE d>42
+----
+1
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/unsigned.parquet' WHERE d>=42
+----
+2
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/unsigned.parquet' WHERE d<42
+----
+1
+
+query I
+SELECT COUNT(*) FROM '__TEST_DIR__/unsigned.parquet' WHERE d<=42
+----
+2
+
+query I
+SELECT typeof(d)='${type}' FROM '__TEST_DIR__/unsigned.parquet' LIMIT 1
+----
+true
+
+endloop
\ No newline at end of file
diff --git a/test/sql/copy/parquet/test_parquet_write.test b/test/sql/copy/parquet/writer/test_parquet_write.test
similarity index 86%
rename from test/sql/copy/parquet/test_parquet_write.test
rename to test/sql/copy/parquet/writer/test_parquet_write.test
index 120f40bea545..b7d715fdcd80 100644
--- a/test/sql/copy/parquet/test_parquet_write.test
+++ b/test/sql/copy/parquet/writer/test_parquet_write.test
@@ -1,11 +1,10 @@
-# name: test/sql/copy/parquet/test_parquet_write.test
+# name: test/sql/copy/parquet/writer/test_parquet_write.test
 # description: Parquet basic write
-# group: [parquet]
+# group: [writer]
 
 require parquet
 
 # single scalar value
-
 require vector_size 64
 
 statement ok
diff --git a/test/sql/copy/parquet/test_parquet_write_complex.test b/test/sql/copy/parquet/writer/test_parquet_write_complex.test
similarity index 96%
rename from test/sql/copy/parquet/test_parquet_write_complex.test
rename to test/sql/copy/parquet/writer/test_parquet_write_complex.test
index 26f77396994f..d650ab3a1946 100644
--- a/test/sql/copy/parquet/test_parquet_write_complex.test
+++ b/test/sql/copy/parquet/writer/test_parquet_write_complex.test
@@ -1,6 +1,6 @@
-# name: test/sql/copy/parquet/test_parquet_write_complex.test
+# name: test/sql/copy/parquet/writer/test_parquet_write_complex.test
 # description: Parquet read and re-write various files
-# group: [parquet]
+# group: [writer]
 
 require parquet
 
diff --git a/tools/pythonpkg/tests/fast/arrow/parquet_write_roundtrip.py b/tools/pythonpkg/tests/fast/arrow/parquet_write_roundtrip.py
new file mode 100644
index 000000000000..65cfc1d7dbaa
--- /dev/null
+++ b/tools/pythonpkg/tests/fast/arrow/parquet_write_roundtrip.py
@@ -0,0 +1,93 @@
+import duckdb
+import pytest
+import tempfile
+import numpy
+import pandas
+import datetime
+try:
+    import pyarrow as pa
+    can_run = True
+except:
+    can_run = False
+
+def parquet_types_test(type_list):
+    temp = tempfile.NamedTemporaryFile()
+    temp_name = temp.name
+    for type_pair in type_list:
+        value_list = type_pair[0]
+        numpy_type = type_pair[1]
+        sql_type = type_pair[2]
+        add_cast = len(type_pair) > 3 and type_pair[3]
+        add_sql_cast = len(type_pair) > 4 and type_pair[4]
+        df = pandas.DataFrame.from_dict({
+            'val': numpy.array(value_list, dtype=numpy_type)
+        })
+        duckdb_cursor = duckdb.connect()
+        duckdb_cursor.execute(f"CREATE TABLE tmp AS SELECT val::{sql_type} val FROM df")
+        duckdb_cursor.execute(f"COPY tmp TO '{temp_name}' (FORMAT PARQUET)")
+        read_df = pandas.read_parquet(temp_name)
+        if add_cast:
+            read_df['val'] = read_df['val'].astype(numpy_type)
+        assert df.equals(read_df)
+
+        read_from_duckdb = duckdb_cursor.execute(f"SELECT * FROM parquet_scan('{temp_name}')").df()
+        assert read_df.equals(read_from_duckdb)
+
+        df.to_parquet(temp_name)
+        if add_sql_cast:
+            read_from_arrow = duckdb_cursor.execute(f"SELECT val::{sql_type} val FROM parquet_scan('{temp_name}')").df()
+        else:
+            read_from_arrow = duckdb_cursor.execute(f"SELECT * FROM parquet_scan('{temp_name}')").df()
+        assert read_df.equals(read_from_arrow)
+
+
+class TestParquetRoundtrip(object):
+    def test_roundtrip_numeric(self, duckdb_cursor):
+        if not can_run:
+            return
+        type_list = [
+            ([-2**7, 0, 2**7-1], numpy.int8, 'TINYINT'),
+            ([-2**15, 0, 2**15-1], numpy.int16, 'SMALLINT'),
+            ([-2**31, 0, 2**31-1], numpy.int32, 'INTEGER'),
+            ([-2**63, 0, 2**63-1], numpy.int64, 'BIGINT'),
+            ([0, 42, 2**8-1], numpy.uint8, 'UTINYINT'),
+            ([0, 42, 2**16-1], numpy.uint16, 'USMALLINT'),
+            ([0, 42, 2**32-1], numpy.uint32, 'UINTEGER', False, True),
+            ([0, 42, 2**64-1], numpy.uint64, 'UBIGINT'),
+            ([0, 0.5, -0.5], numpy.float32, 'REAL'),
+            ([0, 0.5, -0.5], numpy.float64, 'DOUBLE'),
+        ]
+        parquet_types_test(type_list)
+
+    def test_roundtrip_timestamp(self, duckdb_cursor):
+        if not can_run:
+            return
+        date_time_list = [
+            datetime.datetime(2018, 3, 10, 11, 17, 54),
+            datetime.datetime(1900, 12, 12, 23, 48, 42),
+            None,
+            datetime.datetime(1992, 7, 9, 7, 5, 33)
+        ]
+        type_list = [
+            (date_time_list, 'datetime64[ns]', 'TIMESTAMP_NS'),
+            (date_time_list, 'datetime64[us]', 'TIMESTAMP'),
+            (date_time_list, 'datetime64[ms]', 'TIMESTAMP_MS'),
+            (date_time_list, 'datetime64[s]', 'TIMESTAMP_S'),
+            (date_time_list, 'datetime64[D]', 'DATE', True)
+        ]
+        parquet_types_test(type_list)
+
+    def test_roundtrip_varchar(self, duckdb_cursor):
+        if not can_run:
+            return
+        varchar_list = [
+            'hello',
+            'this is a very long string',
+            'hello',
+            None
+        ]
+        type_list = [
+            (varchar_list, object, 'VARCHAR')
+        ]
+        parquet_types_test(type_list)
+
diff --git a/tools/pythonpkg/tests/fast/types/test_blob.py b/tools/pythonpkg/tests/fast/types/test_blob.py
index d681a9e152f1..40c748e77dc0 100644
--- a/tools/pythonpkg/tests/fast/types/test_blob.py
+++ b/tools/pythonpkg/tests/fast/types/test_blob.py
@@ -9,4 +9,4 @@ def test_blob(self, duckdb_cursor):
 
         duckdb_cursor.execute("SELECT BLOB 'hello' AS a")
         results = duckdb_cursor.fetchnumpy()
-        assert results['a'] == numpy.array([b'hello'], dtype=numpy.object)
+        assert results['a'] == numpy.array([b'hello'], dtype=object)
