You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
format and printf unable to number-format unsigned numeric values
### What happens?

When given unsigned numeric types such as ubigint and uinteger, both printf and format print "Error: Invalid Input Error: Invalid type specifier ... for formatting a value of type string" when a numeric formatting specifier is applied.

The workaround is to convert the numeric value to a signed type which is big enough to hold the value first.

### To Reproduce

```
$ duckdb
v0.10.0 20b1486d11
Enter ".help" for usage hints.
D select printf('%x', 123::ubigint);
Error: Invalid Input Error: Invalid type specifier "x" for formatting a value of type string
D select format('{:x}', 123::ubigint);
Error: Invalid Input Error: Invalid type specifier "x" for formatting a value of type string
D select printf('%x', 123::uinteger);
Error: Invalid Input Error: Invalid type specifier "x" for formatting a value of type string
D select format('{:x}', 123::uinteger);
Error: Invalid Input Error: Invalid type specifier "x" for formatting a value of type string
D select format('{:x}', 123::ubigint::int);
┌───────────────────────────────────────────────────────┐
│ format('{:x}', CAST(CAST(123 AS UBIGINT) AS INTEGER)) │
│                        varchar                        │
├───────────────────────────────────────────────────────┤
│ 7b                                                    │
└───────────────────────────────────────────────────────┘
D select printf('%d', 123::ubigint);
Error: Invalid Input Error: Invalid type specifier "d" for formatting a value of type string
```

### OS:

OS X

### DuckDB Version:

0.10.0

### DuckDB Client:

duckdb CLI

### Full Name:

Keunwoo Lee

### Affiliation:

Airtable

### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?

I have tested with a nightly build

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://www.duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/core_functions/scalar/string/printf.cpp]
1: #include "duckdb/core_functions/scalar/string_functions.hpp"
2: #include "duckdb/planner/expression/bound_function_expression.hpp"
3: #include "duckdb/common/limits.hpp"
4: #include "fmt/format.h"
5: #include "fmt/printf.h"
6: 
7: namespace duckdb {
8: 
9: struct FMTPrintf {
10: 	template <class CTX>
11: 	static string OP(const char *format_str, vector<duckdb_fmt::basic_format_arg<CTX>> &format_args) {
12: 		return duckdb_fmt::vsprintf(
13: 		    format_str, duckdb_fmt::basic_format_args<CTX>(format_args.data(), static_cast<int>(format_args.size())));
14: 	}
15: };
16: 
17: struct FMTFormat {
18: 	template <class CTX>
19: 	static string OP(const char *format_str, vector<duckdb_fmt::basic_format_arg<CTX>> &format_args) {
20: 		return duckdb_fmt::vformat(
21: 		    format_str, duckdb_fmt::basic_format_args<CTX>(format_args.data(), static_cast<int>(format_args.size())));
22: 	}
23: };
24: 
25: unique_ptr<FunctionData> BindPrintfFunction(ClientContext &context, ScalarFunction &bound_function,
26:                                             vector<unique_ptr<Expression>> &arguments) {
27: 	for (idx_t i = 1; i < arguments.size(); i++) {
28: 		switch (arguments[i]->return_type.id()) {
29: 		case LogicalTypeId::BOOLEAN:
30: 		case LogicalTypeId::TINYINT:
31: 		case LogicalTypeId::SMALLINT:
32: 		case LogicalTypeId::INTEGER:
33: 		case LogicalTypeId::BIGINT:
34: 		case LogicalTypeId::FLOAT:
35: 		case LogicalTypeId::DOUBLE:
36: 		case LogicalTypeId::VARCHAR:
37: 			// these types are natively supported
38: 			bound_function.arguments.push_back(arguments[i]->return_type);
39: 			break;
40: 		case LogicalTypeId::DECIMAL:
41: 			// decimal type: add cast to double
42: 			bound_function.arguments.emplace_back(LogicalType::DOUBLE);
43: 			break;
44: 		case LogicalTypeId::UNKNOWN:
45: 			// parameter: accept any input and rebind later
46: 			bound_function.arguments.emplace_back(LogicalType::ANY);
47: 			break;
48: 		default:
49: 			// all other types: add cast to string
50: 			bound_function.arguments.emplace_back(LogicalType::VARCHAR);
51: 			break;
52: 		}
53: 	}
54: 	return nullptr;
55: }
56: 
57: template <class FORMAT_FUN, class CTX>
58: static void PrintfFunction(DataChunk &args, ExpressionState &state, Vector &result) {
59: 	auto &format_string = args.data[0];
60: 	auto &result_validity = FlatVector::Validity(result);
61: 	result.SetVectorType(VectorType::CONSTANT_VECTOR);
62: 	result_validity.Initialize(args.size());
63: 	for (idx_t i = 0; i < args.ColumnCount(); i++) {
64: 		switch (args.data[i].GetVectorType()) {
65: 		case VectorType::CONSTANT_VECTOR:
66: 			if (ConstantVector::IsNull(args.data[i])) {
67: 				// constant null! result is always NULL regardless of other input
68: 				result.SetVectorType(VectorType::CONSTANT_VECTOR);
69: 				ConstantVector::SetNull(result, true);
70: 				return;
71: 			}
72: 			break;
73: 		default:
74: 			// FLAT VECTOR, we can directly OR the nullmask
75: 			args.data[i].Flatten(args.size());
76: 			result.SetVectorType(VectorType::FLAT_VECTOR);
77: 			result_validity.Combine(FlatVector::Validity(args.data[i]), args.size());
78: 			break;
79: 		}
80: 	}
81: 	idx_t count = result.GetVectorType() == VectorType::CONSTANT_VECTOR ? 1 : args.size();
82: 
83: 	auto format_data = FlatVector::GetData<string_t>(format_string);
84: 	auto result_data = FlatVector::GetData<string_t>(result);
85: 	for (idx_t idx = 0; idx < count; idx++) {
86: 		if (result.GetVectorType() == VectorType::FLAT_VECTOR && FlatVector::IsNull(result, idx)) {
87: 			// this entry is NULL: skip it
88: 			continue;
89: 		}
90: 
91: 		// first fetch the format string
92: 		auto fmt_idx = format_string.GetVectorType() == VectorType::CONSTANT_VECTOR ? 0 : idx;
93: 		auto format_string = format_data[fmt_idx].GetString();
94: 
95: 		// now gather all the format arguments
96: 		vector<duckdb_fmt::basic_format_arg<CTX>> format_args;
97: 		vector<unsafe_unique_array<data_t>> string_args;
98: 
99: 		for (idx_t col_idx = 1; col_idx < args.ColumnCount(); col_idx++) {
100: 			auto &col = args.data[col_idx];
101: 			idx_t arg_idx = col.GetVectorType() == VectorType::CONSTANT_VECTOR ? 0 : idx;
102: 			switch (col.GetType().id()) {
103: 			case LogicalTypeId::BOOLEAN: {
104: 				auto arg_data = FlatVector::GetData<bool>(col);
105: 				format_args.emplace_back(duckdb_fmt::internal::make_arg<CTX>(arg_data[arg_idx]));
106: 				break;
107: 			}
108: 			case LogicalTypeId::TINYINT: {
109: 				auto arg_data = FlatVector::GetData<int8_t>(col);
110: 				format_args.emplace_back(duckdb_fmt::internal::make_arg<CTX>(arg_data[arg_idx]));
111: 				break;
112: 			}
113: 			case LogicalTypeId::SMALLINT: {
114: 				auto arg_data = FlatVector::GetData<int16_t>(col);
115: 				format_args.emplace_back(duckdb_fmt::internal::make_arg<CTX>(arg_data[arg_idx]));
116: 				break;
117: 			}
118: 			case LogicalTypeId::INTEGER: {
119: 				auto arg_data = FlatVector::GetData<int32_t>(col);
120: 				format_args.emplace_back(duckdb_fmt::internal::make_arg<CTX>(arg_data[arg_idx]));
121: 				break;
122: 			}
123: 			case LogicalTypeId::BIGINT: {
124: 				auto arg_data = FlatVector::GetData<int64_t>(col);
125: 				format_args.emplace_back(duckdb_fmt::internal::make_arg<CTX>(arg_data[arg_idx]));
126: 				break;
127: 			}
128: 			case LogicalTypeId::FLOAT: {
129: 				auto arg_data = FlatVector::GetData<float>(col);
130: 				format_args.emplace_back(duckdb_fmt::internal::make_arg<CTX>(arg_data[arg_idx]));
131: 				break;
132: 			}
133: 			case LogicalTypeId::DOUBLE: {
134: 				auto arg_data = FlatVector::GetData<double>(col);
135: 				format_args.emplace_back(duckdb_fmt::internal::make_arg<CTX>(arg_data[arg_idx]));
136: 				break;
137: 			}
138: 			case LogicalTypeId::VARCHAR: {
139: 				auto arg_data = FlatVector::GetData<string_t>(col);
140: 				auto string_view =
141: 				    duckdb_fmt::basic_string_view<char>(arg_data[arg_idx].GetData(), arg_data[arg_idx].GetSize());
142: 				format_args.emplace_back(duckdb_fmt::internal::make_arg<CTX>(string_view));
143: 				break;
144: 			}
145: 			default:
146: 				throw InternalException("Unexpected type for printf format");
147: 			}
148: 		}
149: 		// finally actually perform the format
150: 		string dynamic_result = FORMAT_FUN::template OP<CTX>(format_string.c_str(), format_args);
151: 		result_data[idx] = StringVector::AddString(result, dynamic_result);
152: 	}
153: }
154: 
155: ScalarFunction PrintfFun::GetFunction() {
156: 	// duckdb_fmt::printf_context, duckdb_fmt::vsprintf
157: 	ScalarFunction printf_fun({LogicalType::VARCHAR}, LogicalType::VARCHAR,
158: 	                          PrintfFunction<FMTPrintf, duckdb_fmt::printf_context>, BindPrintfFunction);
159: 	printf_fun.varargs = LogicalType::ANY;
160: 	return printf_fun;
161: }
162: 
163: ScalarFunction FormatFun::GetFunction() {
164: 	// duckdb_fmt::format_context, duckdb_fmt::vformat
165: 	ScalarFunction format_fun({LogicalType::VARCHAR}, LogicalType::VARCHAR,
166: 	                          PrintfFunction<FMTFormat, duckdb_fmt::format_context>, BindPrintfFunction);
167: 	format_fun.varargs = LogicalType::ANY;
168: 	return format_fun;
169: }
170: 
171: } // namespace duckdb
[end of src/core_functions/scalar/string/printf.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: