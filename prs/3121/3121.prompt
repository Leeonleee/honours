You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
ILIKE and ~~ equivalents to LIKE do not support escape clause
#### What happens?
This is another one I ran into when doing documentation, so it's likely not widely used!

When using `ILIKE` or any of the (`~~, !~~, ~*, !~*` ) syntax instead of a `LIKE`-style expression, the escape clause is not supported. 

LIKE escape PR is #640.
 
#### To Reproduce
These queries run:
```sql
select 'a%c' like 'a$%c' escape '$';
select 'a%c' ilike 'a%C';
select 'a%c' ~~ 'a%c';
```
These queries do not run:
```sql
select 'a%c' ilike 'a$%C' escape '$';
Error: Binder Error: No function matches the given name and argument types 'like_escape(VARCHAR, VARCHAR)'. You might need to add explicit type casts.
        Candidate functions:
        like_escape(VARCHAR, VARCHAR, VARCHAR) -> BOOLEAN

LINE 1: select 'a%c' ilike 'a$%C' escape '$';
```
```sql
select 'a%c' ~~ 'a$%c' escape '$';
Error: Parser Error: parser error : syntax error at or near "escape"
LINE 1: select 'a%c' ~~ 'a$%c' escape '$';
```
#### Environment (please complete the following information):
 - OS: Windows
 - DuckDB Version: 0.3.2
 - DuckDB Client: DuckDB CLI

#### Before Submitting

- [ ] **Have you tried this on the latest `master` branch?**

- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

ILIKE and ~~ equivalents to LIKE do not support escape clause
#### What happens?
This is another one I ran into when doing documentation, so it's likely not widely used!

When using `ILIKE` or any of the (`~~, !~~, ~*, !~*` ) syntax instead of a `LIKE`-style expression, the escape clause is not supported. 

LIKE escape PR is #640.
 
#### To Reproduce
These queries run:
```sql
select 'a%c' like 'a$%c' escape '$';
select 'a%c' ilike 'a%C';
select 'a%c' ~~ 'a%c';
```
These queries do not run:
```sql
select 'a%c' ilike 'a$%C' escape '$';
Error: Binder Error: No function matches the given name and argument types 'like_escape(VARCHAR, VARCHAR)'. You might need to add explicit type casts.
        Candidate functions:
        like_escape(VARCHAR, VARCHAR, VARCHAR) -> BOOLEAN

LINE 1: select 'a%c' ilike 'a$%C' escape '$';
```
```sql
select 'a%c' ~~ 'a$%c' escape '$';
Error: Parser Error: parser error : syntax error at or near "escape"
LINE 1: select 'a%c' ~~ 'a$%c' escape '$';
```
#### Environment (please complete the following information):
 - OS: Windows
 - DuckDB Version: 0.3.2
 - DuckDB Client: DuckDB CLI

#### Before Submitting

- [ ] **Have you tried this on the latest `master` branch?**

- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
44: 
45: 
[end of README.md]
[start of src/function/scalar/string/like.cpp]
1: #include "duckdb/common/exception.hpp"
2: #include "duckdb/common/vector_operations/vector_operations.hpp"
3: #include "duckdb/function/scalar/string_functions.hpp"
4: #include "duckdb/planner/expression/bound_function_expression.hpp"
5: #include "duckdb/storage/statistics/string_statistics.hpp"
6: #include "duckdb/execution/expression_executor.hpp"
7: 
8: namespace duckdb {
9: 
10: struct StandardCharacterReader {
11: 	static char Operation(const char *data, idx_t pos) {
12: 		return data[pos];
13: 	}
14: };
15: 
16: struct ASCIILCaseReader {
17: 	static char Operation(const char *data, idx_t pos) {
18: 		return (char)LowerFun::ascii_to_lower_map[(uint8_t)data[pos]];
19: 	}
20: };
21: 
22: template <char PERCENTAGE, char UNDERSCORE, class READER = StandardCharacterReader>
23: bool TemplatedLikeOperator(const char *sdata, idx_t slen, const char *pdata, idx_t plen, char escape) {
24: 	idx_t pidx = 0;
25: 	idx_t sidx = 0;
26: 	for (; pidx < plen && sidx < slen; pidx++) {
27: 		char pchar = READER::Operation(pdata, pidx);
28: 		char schar = READER::Operation(sdata, sidx);
29: 		if (pchar == escape) {
30: 			pidx++;
31: 			if (pidx == plen) {
32: 				throw SyntaxException("Like pattern must not end with escape character!");
33: 			}
34: 			if (pdata[pidx] != schar) {
35: 				return false;
36: 			}
37: 			sidx++;
38: 		} else if (pchar == UNDERSCORE) {
39: 			sidx++;
40: 		} else if (pchar == PERCENTAGE) {
41: 			pidx++;
42: 			while (pidx < plen && pdata[pidx] == PERCENTAGE) {
43: 				pidx++;
44: 			}
45: 			if (pidx == plen) {
46: 				return true; /* tail is acceptable */
47: 			}
48: 			for (; sidx < slen; sidx++) {
49: 				if (TemplatedLikeOperator<PERCENTAGE, UNDERSCORE, READER>(sdata + sidx, slen - sidx, pdata + pidx,
50: 				                                                          plen - pidx, escape)) {
51: 					return true;
52: 				}
53: 			}
54: 			return false;
55: 		} else if (pchar == schar) {
56: 			sidx++;
57: 		} else {
58: 			return false;
59: 		}
60: 	}
61: 	while (pidx < plen && pdata[pidx] == PERCENTAGE) {
62: 		pidx++;
63: 	}
64: 	return pidx == plen && sidx == slen;
65: }
66: 
67: struct LikeSegment {
68: 	explicit LikeSegment(string pattern) : pattern(move(pattern)) {
69: 	}
70: 
71: 	string pattern;
72: };
73: 
74: struct LikeMatcher : public FunctionData {
75: 	LikeMatcher(vector<LikeSegment> segments, bool has_start_percentage, bool has_end_percentage)
76: 	    : segments(move(segments)), has_start_percentage(has_start_percentage), has_end_percentage(has_end_percentage) {
77: 	}
78: 
79: 	bool Match(string_t &str) {
80: 		auto str_data = (const unsigned char *)str.GetDataUnsafe();
81: 		auto str_len = str.GetSize();
82: 		idx_t segment_idx = 0;
83: 		idx_t end_idx = segments.size() - 1;
84: 		if (!has_start_percentage) {
85: 			// no start sample_size: match the first part of the string directly
86: 			auto &segment = segments[0];
87: 			if (str_len < segment.pattern.size()) {
88: 				return false;
89: 			}
90: 			if (memcmp(str_data, segment.pattern.c_str(), segment.pattern.size()) != 0) {
91: 				return false;
92: 			}
93: 			str_data += segment.pattern.size();
94: 			str_len -= segment.pattern.size();
95: 			segment_idx++;
96: 			if (segments.size() == 1) {
97: 				// only one segment, and it matches
98: 				// we have a match if there is an end sample_size, OR if the memcmp was an exact match (remaining str is
99: 				// empty)
100: 				return has_end_percentage || str_len == 0;
101: 			}
102: 		}
103: 		// main match loop: for every segment in the middle, use Contains to find the needle in the haystack
104: 		for (; segment_idx < end_idx; segment_idx++) {
105: 			auto &segment = segments[segment_idx];
106: 			// find the pattern of the current segment
107: 			idx_t next_offset = ContainsFun::Find(str_data, str_len, (const unsigned char *)segment.pattern.c_str(),
108: 			                                      segment.pattern.size());
109: 			if (next_offset == DConstants::INVALID_INDEX) {
110: 				// could not find this pattern in the string: no match
111: 				return false;
112: 			}
113: 			idx_t offset = next_offset + segment.pattern.size();
114: 			str_data += offset;
115: 			str_len -= offset;
116: 		}
117: 		if (!has_end_percentage) {
118: 			end_idx--;
119: 			// no end sample_size: match the final segment now
120: 			auto &segment = segments.back();
121: 			if (str_len < segment.pattern.size()) {
122: 				return false;
123: 			}
124: 			if (memcmp(str_data + str_len - segment.pattern.size(), segment.pattern.c_str(), segment.pattern.size()) !=
125: 			    0) {
126: 				return false;
127: 			}
128: 			return true;
129: 		} else {
130: 			auto &segment = segments.back();
131: 			// find the pattern of the current segment
132: 			idx_t next_offset = ContainsFun::Find(str_data, str_len, (const unsigned char *)segment.pattern.c_str(),
133: 			                                      segment.pattern.size());
134: 			return next_offset != DConstants::INVALID_INDEX;
135: 		}
136: 	}
137: 
138: 	static unique_ptr<LikeMatcher> CreateLikeMatcher(string like_pattern, char escape = '\0') {
139: 		vector<LikeSegment> segments;
140: 		idx_t last_non_pattern = 0;
141: 		bool has_start_percentage = false;
142: 		bool has_end_percentage = false;
143: 		for (idx_t i = 0; i < like_pattern.size(); i++) {
144: 			auto ch = like_pattern[i];
145: 			if (ch == escape || ch == '%' || ch == '_') {
146: 				// special character, push a constant pattern
147: 				if (i > last_non_pattern) {
148: 					segments.emplace_back(like_pattern.substr(last_non_pattern, i - last_non_pattern));
149: 				}
150: 				last_non_pattern = i + 1;
151: 				if (ch == escape || ch == '_') {
152: 					// escape or underscore: could not create efficient like matcher
153: 					// FIXME: we could handle escaped percentages here
154: 					return nullptr;
155: 				} else {
156: 					// sample_size
157: 					if (i == 0) {
158: 						has_start_percentage = true;
159: 					}
160: 					if (i + 1 == like_pattern.size()) {
161: 						has_end_percentage = true;
162: 					}
163: 				}
164: 			}
165: 		}
166: 		if (last_non_pattern < like_pattern.size()) {
167: 			segments.emplace_back(like_pattern.substr(last_non_pattern, like_pattern.size() - last_non_pattern));
168: 		}
169: 		if (segments.empty()) {
170: 			return nullptr;
171: 		}
172: 		return make_unique<LikeMatcher>(move(segments), has_start_percentage, has_end_percentage);
173: 	}
174: 
175: 	unique_ptr<FunctionData> Copy() override {
176: 		return make_unique<LikeMatcher>(segments, has_start_percentage, has_end_percentage);
177: 	}
178: 
179: private:
180: 	vector<LikeSegment> segments;
181: 	bool has_start_percentage;
182: 	bool has_end_percentage;
183: };
184: 
185: static unique_ptr<FunctionData> LikeBindFunction(ClientContext &context, ScalarFunction &bound_function,
186:                                                  vector<unique_ptr<Expression>> &arguments) {
187: 	// pattern is the second argument. If its constant, we can already prepare the pattern and store it for later.
188: 	D_ASSERT(arguments.size() == 2 || arguments.size() == 3);
189: 	if (arguments[1]->IsFoldable()) {
190: 		Value pattern_str = ExpressionExecutor::EvaluateScalar(*arguments[1]);
191: 		return LikeMatcher::CreateLikeMatcher(pattern_str.ToString());
192: 	}
193: 	return nullptr;
194: }
195: 
196: bool LikeOperatorFunction(const char *s, idx_t slen, const char *pattern, idx_t plen, char escape) {
197: 	return TemplatedLikeOperator<'%', '_'>(s, slen, pattern, plen, escape);
198: }
199: 
200: bool LikeOperatorFunction(string_t &s, string_t &pat, char escape = '\0') {
201: 	return LikeOperatorFunction(s.GetDataUnsafe(), s.GetSize(), pat.GetDataUnsafe(), pat.GetSize(), escape);
202: }
203: 
204: bool LikeFun::Glob(const char *string, idx_t slen, const char *pattern, idx_t plen) {
205: 	idx_t sidx = 0;
206: 	idx_t pidx = 0;
207: main_loop : {
208: 	// main matching loop
209: 	while (sidx < slen && pidx < plen) {
210: 		char s = string[sidx];
211: 		char p = pattern[pidx];
212: 		switch (p) {
213: 		case '*': {
214: 			// asterisk: match any set of characters
215: 			// skip any subsequent asterisks
216: 			pidx++;
217: 			while (pidx < plen && pattern[pidx] == '*') {
218: 				pidx++;
219: 			}
220: 			// if the asterisk is the last character, the pattern always matches
221: 			if (pidx == plen) {
222: 				return true;
223: 			}
224: 			// recursively match the remainder of the pattern
225: 			for (; sidx < slen; sidx++) {
226: 				if (LikeFun::Glob(string + sidx, slen - sidx, pattern + pidx, plen - pidx)) {
227: 					return true;
228: 				}
229: 			}
230: 			return false;
231: 		}
232: 		case '?':
233: 			// wildcard: matches anything but null
234: 			break;
235: 		case '[':
236: 			pidx++;
237: 			goto parse_bracket;
238: 		case '\\':
239: 			// escape character, next character needs to match literally
240: 			pidx++;
241: 			// check that we still have a character remaining
242: 			if (pidx == plen) {
243: 				return false;
244: 			}
245: 			p = pattern[pidx];
246: 			if (s != p) {
247: 				return false;
248: 			}
249: 			break;
250: 		default:
251: 			// not a control character: characters need to match literally
252: 			if (s != p) {
253: 				return false;
254: 			}
255: 			break;
256: 		}
257: 		sidx++;
258: 		pidx++;
259: 	}
260: 	while (pidx < plen && pattern[pidx] == '*') {
261: 		pidx++;
262: 	}
263: 	// we are finished only if we have consumed the full pattern
264: 	return pidx == plen && sidx == slen;
265: }
266: parse_bracket : {
267: 	// inside a bracket
268: 	if (pidx == plen) {
269: 		return false;
270: 	}
271: 	// check the first character
272: 	// if it is an exclamation mark we need to invert our logic
273: 	char p = pattern[pidx];
274: 	char s = string[sidx];
275: 	bool invert = false;
276: 	if (p == '!') {
277: 		invert = true;
278: 		pidx++;
279: 	}
280: 	bool found_match = invert;
281: 	idx_t start_pos = pidx;
282: 	bool found_closing_bracket = false;
283: 	// now check the remainder of the pattern
284: 	while (pidx < plen) {
285: 		p = pattern[pidx];
286: 		// if the first character is a closing bracket, we match it literally
287: 		// otherwise it indicates an end of bracket
288: 		if (p == ']' && pidx > start_pos) {
289: 			// end of bracket found: we are done
290: 			found_closing_bracket = true;
291: 			pidx++;
292: 			break;
293: 		}
294: 		// we either match a range (a-b) or a single character (a)
295: 		// check if the next character is a dash
296: 		if (pidx + 1 == plen) {
297: 			// no next character!
298: 			break;
299: 		}
300: 		bool matches;
301: 		if (pattern[pidx + 1] == '-') {
302: 			// range! find the next character in the range
303: 			if (pidx + 2 == plen) {
304: 				break;
305: 			}
306: 			char next_char = pattern[pidx + 2];
307: 			// check if the current character is within the range
308: 			matches = s >= p && s <= next_char;
309: 			// shift the pattern forward past the range
310: 			pidx += 3;
311: 		} else {
312: 			// no range! perform a direct match
313: 			matches = p == s;
314: 			// shift the pattern forward past the character
315: 			pidx++;
316: 		}
317: 		if (found_match == invert && matches) {
318: 			// found a match! set the found_matches flag
319: 			// we keep on pattern matching after this until we reach the end bracket
320: 			// however, we don't need to update the found_match flag anymore
321: 			found_match = !invert;
322: 		}
323: 	}
324: 	if (!found_closing_bracket) {
325: 		// no end of bracket: invalid pattern
326: 		return false;
327: 	}
328: 	if (!found_match) {
329: 		// did not match the bracket: return false;
330: 		return false;
331: 	}
332: 	// finished the bracket matching: move forward
333: 	sidx++;
334: 	goto main_loop;
335: }
336: }
337: 
338: struct LikeEscapeOperator {
339: 	template <class TA, class TB, class TC>
340: 	static inline bool Operation(TA str, TB pattern, TC escape) {
341: 		// Only one escape character should be allowed
342: 		if (escape.GetSize() > 1) {
343: 			throw SyntaxException("Invalid escape string. Escape string must be empty or one character.");
344: 		}
345: 		char escape_char = escape.GetSize() == 0 ? '\0' : *escape.GetDataUnsafe();
346: 		return LikeOperatorFunction(str.GetDataUnsafe(), str.GetSize(), pattern.GetDataUnsafe(), pattern.GetSize(),
347: 		                            escape_char);
348: 	}
349: };
350: 
351: struct NotLikeEscapeOperator {
352: 	template <class TA, class TB, class TC>
353: 	static inline bool Operation(TA str, TB pattern, TC escape) {
354: 		return !LikeEscapeOperator::Operation(str, pattern, escape);
355: 	}
356: };
357: 
358: struct LikeOperator {
359: 	template <class TA, class TB, class TR>
360: 	static inline TR Operation(TA str, TB pattern) {
361: 		return LikeOperatorFunction(str, pattern);
362: 	}
363: };
364: 
365: struct ILikeOperator {
366: 	template <class TA, class TB, class TR>
367: 	static inline TR Operation(TA str, TB pattern) {
368: 		auto str_data = str.GetDataUnsafe();
369: 		auto str_size = str.GetSize();
370: 		auto pat_data = pattern.GetDataUnsafe();
371: 		auto pat_size = pattern.GetSize();
372: 		// lowercase both the str and the pattern
373: 		idx_t str_llength = LowerFun::LowerLength(str_data, str_size);
374: 		auto str_ldata = unique_ptr<char[]>(new char[str_llength]);
375: 		LowerFun::LowerCase(str_data, str_size, str_ldata.get());
376: 
377: 		idx_t pat_llength = LowerFun::LowerLength(pat_data, pat_size);
378: 		auto pat_ldata = unique_ptr<char[]>(new char[pat_llength]);
379: 		LowerFun::LowerCase(pat_data, pat_size, pat_ldata.get());
380: 		string_t str_lcase(str_ldata.get(), str_llength);
381: 		string_t pat_lcase(pat_ldata.get(), pat_llength);
382: 		return LikeOperatorFunction(str_lcase, pat_lcase);
383: 	}
384: };
385: 
386: struct NotLikeOperator {
387: 	template <class TA, class TB, class TR>
388: 	static inline TR Operation(TA str, TB pattern) {
389: 		return !LikeOperatorFunction(str, pattern);
390: 	}
391: };
392: 
393: struct NotILikeOperator {
394: 	template <class TA, class TB, class TR>
395: 	static inline TR Operation(TA str, TB pattern) {
396: 		return !ILikeOperator::Operation<TA, TB, TR>(str, pattern);
397: 	}
398: };
399: 
400: struct ILikeOperatorASCII {
401: 	template <class TA, class TB, class TR>
402: 	static inline TR Operation(TA str, TB pattern) {
403: 		return TemplatedLikeOperator<'%', '_', ASCIILCaseReader>(str.GetDataUnsafe(), str.GetSize(),
404: 		                                                         pattern.GetDataUnsafe(), pattern.GetSize(), '\0');
405: 	}
406: };
407: 
408: struct NotILikeOperatorASCII {
409: 	template <class TA, class TB, class TR>
410: 	static inline TR Operation(TA str, TB pattern) {
411: 		return !ILikeOperatorASCII::Operation<TA, TB, TR>(str, pattern);
412: 	}
413: };
414: 
415: struct GlobOperator {
416: 	template <class TA, class TB, class TR>
417: 	static inline TR Operation(TA str, TB pattern) {
418: 		return LikeFun::Glob(str.GetDataUnsafe(), str.GetSize(), pattern.GetDataUnsafe(), pattern.GetSize());
419: 	}
420: };
421: 
422: // This can be moved to the scalar_function class
423: template <typename FUNC>
424: static void LikeEscapeFunction(DataChunk &args, ExpressionState &state, Vector &result) {
425: 	auto &str = args.data[0];
426: 	auto &pattern = args.data[1];
427: 	auto &escape = args.data[2];
428: 
429: 	TernaryExecutor::Execute<string_t, string_t, string_t, bool>(
430: 	    str, pattern, escape, result, args.size(), FUNC::template Operation<string_t, string_t, string_t>);
431: }
432: 
433: template <class ASCII_OP>
434: static unique_ptr<BaseStatistics> ILikePropagateStats(ClientContext &context, BoundFunctionExpression &expr,
435:                                                       FunctionData *bind_data,
436:                                                       vector<unique_ptr<BaseStatistics>> &child_stats) {
437: 	D_ASSERT(child_stats.size() >= 1);
438: 	// can only propagate stats if the children have stats
439: 	if (!child_stats[0]) {
440: 		return nullptr;
441: 	}
442: 	auto &sstats = (StringStatistics &)*child_stats[0];
443: 	if (!sstats.has_unicode) {
444: 		expr.function.function = ScalarFunction::BinaryFunction<string_t, string_t, bool, ASCII_OP>;
445: 	}
446: 	return nullptr;
447: }
448: 
449: template <class OP, bool INVERT>
450: static void RegularLikeFunction(DataChunk &input, ExpressionState &state, Vector &result) {
451: 	auto &func_expr = (BoundFunctionExpression &)state.expr;
452: 	if (func_expr.bind_info) {
453: 		auto &matcher = (LikeMatcher &)*func_expr.bind_info;
454: 		// use fast like matcher
455: 		UnaryExecutor::Execute<string_t, bool>(input.data[0], result, input.size(), [&](string_t input) {
456: 			return INVERT ? !matcher.Match(input) : matcher.Match(input);
457: 		});
458: 	} else {
459: 		// use generic like matcher
460: 		BinaryExecutor::ExecuteStandard<string_t, string_t, bool, OP>(input.data[0], input.data[1], result,
461: 		                                                              input.size());
462: 	}
463: }
464: void LikeFun::RegisterFunction(BuiltinFunctions &set) {
465: 	// like
466: 	set.AddFunction(ScalarFunction("~~", {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
467: 	                               RegularLikeFunction<LikeOperator, false>, false, LikeBindFunction));
468: 	// not like
469: 	set.AddFunction(ScalarFunction("!~~", {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
470: 	                               RegularLikeFunction<NotLikeOperator, true>, false, LikeBindFunction));
471: 	// glob
472: 	set.AddFunction(ScalarFunction("~~~", {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
473: 	                               ScalarFunction::BinaryFunction<string_t, string_t, bool, GlobOperator>));
474: 	// ilike
475: 	set.AddFunction(ScalarFunction("~~*", {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
476: 	                               ScalarFunction::BinaryFunction<string_t, string_t, bool, ILikeOperator>, false,
477: 	                               nullptr, nullptr, ILikePropagateStats<ILikeOperatorASCII>));
478: 	// not ilike
479: 	set.AddFunction(ScalarFunction("!~~*", {LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
480: 	                               ScalarFunction::BinaryFunction<string_t, string_t, bool, NotILikeOperator>, false,
481: 	                               nullptr, nullptr, ILikePropagateStats<NotILikeOperatorASCII>));
482: }
483: 
484: void LikeEscapeFun::RegisterFunction(BuiltinFunctions &set) {
485: 	set.AddFunction({"like_escape"}, ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},
486: 	                                                LogicalType::BOOLEAN, LikeEscapeFunction<LikeEscapeOperator>));
487: 	set.AddFunction({"not_like_escape"},
488: 	                ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},
489: 	                               LogicalType::BOOLEAN, LikeEscapeFunction<NotLikeEscapeOperator>));
490: }
491: } // namespace duckdb
[end of src/function/scalar/string/like.cpp]
[start of third_party/libpg_query/grammar/statements/select.y]
1: 
2: /*****************************************************************************
3:  *
4:  *		QUERY:
5:  *				SELECT STATEMENTS
6:  *
7:  *****************************************************************************/
8: 
9: /* A complete SELECT statement looks like this.
10:  *
11:  * The rule returns either a single PGSelectStmt node or a tree of them,
12:  * representing a set-operation tree.
13:  *
14:  * There is an ambiguity when a sub-SELECT is within an a_expr and there
15:  * are excess parentheses: do the parentheses belong to the sub-SELECT or
16:  * to the surrounding a_expr?  We don't really care, but bison wants to know.
17:  * To resolve the ambiguity, we are careful to define the grammar so that
18:  * the decision is staved off as long as possible: as long as we can keep
19:  * absorbing parentheses into the sub-SELECT, we will do so, and only when
20:  * it's no longer possible to do that will we decide that parens belong to
21:  * the expression.	For example, in "SELECT (((SELECT 2)) + 3)" the extra
22:  * parentheses are treated as part of the sub-select.  The necessity of doing
23:  * it that way is shown by "SELECT (((SELECT 2)) UNION SELECT 2)".	Had we
24:  * parsed "((SELECT 2))" as an a_expr, it'd be too late to go back to the
25:  * SELECT viewpoint when we see the UNION.
26:  *
27:  * This approach is implemented by defining a nonterminal select_with_parens,
28:  * which represents a SELECT with at least one outer layer of parentheses,
29:  * and being careful to use select_with_parens, never '(' PGSelectStmt ')',
30:  * in the expression grammar.  We will then have shift-reduce conflicts
31:  * which we can resolve in favor of always treating '(' <select> ')' as
32:  * a select_with_parens.  To resolve the conflicts, the productions that
33:  * conflict with the select_with_parens productions are manually given
34:  * precedences lower than the precedence of ')', thereby ensuring that we
35:  * shift ')' (and then reduce to select_with_parens) rather than trying to
36:  * reduce the inner <select> nonterminal to something else.  We use UMINUS
37:  * precedence for this, which is a fairly arbitrary choice.
38:  *
39:  * To be able to define select_with_parens itself without ambiguity, we need
40:  * a nonterminal select_no_parens that represents a SELECT structure with no
41:  * outermost parentheses.  This is a little bit tedious, but it works.
42:  *
43:  * In non-expression contexts, we use PGSelectStmt which can represent a SELECT
44:  * with or without outer parentheses.
45:  */
46: 
47: SelectStmt: select_no_parens			%prec UMINUS
48: 			| select_with_parens		%prec UMINUS
49: 		;
50: 
51: select_with_parens:
52: 			'(' select_no_parens ')'				{ $$ = $2; }
53: 			| '(' select_with_parens ')'			{ $$ = $2; }
54: 		;
55: 
56: /*
57:  * This rule parses the equivalent of the standard's <query expression>.
58:  * The duplicative productions are annoying, but hard to get rid of without
59:  * creating shift/reduce conflicts.
60:  *
61:  *	The locking clause (FOR UPDATE etc) may be before or after LIMIT/OFFSET.
62:  *	In <=7.2.X, LIMIT/OFFSET had to be after FOR UPDATE
63:  *	We now support both orderings, but prefer LIMIT/OFFSET before the locking
64:  * clause.
65:  *	2002-08-28 bjm
66:  */
67: select_no_parens:
68: 			simple_select						{ $$ = $1; }
69: 			| select_clause sort_clause
70: 				{
71: 					insertSelectOptions((PGSelectStmt *) $1, $2, NIL,
72: 										NULL, NULL, NULL,
73: 										yyscanner);
74: 					$$ = $1;
75: 				}
76: 			| select_clause opt_sort_clause for_locking_clause opt_select_limit
77: 				{
78: 					insertSelectOptions((PGSelectStmt *) $1, $2, $3,
79: 										(PGNode*) list_nth($4, 0), (PGNode*) list_nth($4, 1),
80: 										NULL,
81: 										yyscanner);
82: 					$$ = $1;
83: 				}
84: 			| select_clause opt_sort_clause select_limit opt_for_locking_clause
85: 				{
86: 					insertSelectOptions((PGSelectStmt *) $1, $2, $4,
87: 										(PGNode*) list_nth($3, 0), (PGNode*) list_nth($3, 1),
88: 										NULL,
89: 										yyscanner);
90: 					$$ = $1;
91: 				}
92: 			| with_clause select_clause
93: 				{
94: 					insertSelectOptions((PGSelectStmt *) $2, NULL, NIL,
95: 										NULL, NULL,
96: 										$1,
97: 										yyscanner);
98: 					$$ = $2;
99: 				}
100: 			| with_clause select_clause sort_clause
101: 				{
102: 					insertSelectOptions((PGSelectStmt *) $2, $3, NIL,
103: 										NULL, NULL,
104: 										$1,
105: 										yyscanner);
106: 					$$ = $2;
107: 				}
108: 			| with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit
109: 				{
110: 					insertSelectOptions((PGSelectStmt *) $2, $3, $4,
111: 										(PGNode*) list_nth($5, 0), (PGNode*) list_nth($5, 1),
112: 										$1,
113: 										yyscanner);
114: 					$$ = $2;
115: 				}
116: 			| with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause
117: 				{
118: 					insertSelectOptions((PGSelectStmt *) $2, $3, $5,
119: 										(PGNode*) list_nth($4, 0), (PGNode*) list_nth($4, 1),
120: 										$1,
121: 										yyscanner);
122: 					$$ = $2;
123: 				}
124: 		;
125: 
126: select_clause:
127: 			simple_select							{ $$ = $1; }
128: 			| select_with_parens					{ $$ = $1; }
129: 		;
130: 
131: /*
132:  * This rule parses SELECT statements that can appear within set operations,
133:  * including UNION, INTERSECT and EXCEPT.  '(' and ')' can be used to specify
134:  * the ordering of the set operations.	Without '(' and ')' we want the
135:  * operations to be ordered per the precedence specs at the head of this file.
136:  *
137:  * As with select_no_parens, simple_select cannot have outer parentheses,
138:  * but can have parenthesized subclauses.
139:  *
140:  * Note that sort clauses cannot be included at this level --- SQL requires
141:  *		SELECT foo UNION SELECT bar ORDER BY baz
142:  * to be parsed as
143:  *		(SELECT foo UNION SELECT bar) ORDER BY baz
144:  * not
145:  *		SELECT foo UNION (SELECT bar ORDER BY baz)
146:  * Likewise for WITH, FOR UPDATE and LIMIT.  Therefore, those clauses are
147:  * described as part of the select_no_parens production, not simple_select.
148:  * This does not limit functionality, because you can reintroduce these
149:  * clauses inside parentheses.
150:  *
151:  * NOTE: only the leftmost component PGSelectStmt should have INTO.
152:  * However, this is not checked by the grammar; parse analysis must check it.
153:  */
154: simple_select:
155: 			SELECT opt_all_clause opt_target_list
156: 			into_clause from_clause where_clause
157: 			group_clause having_clause window_clause qualify_clause sample_clause
158: 				{
159: 					PGSelectStmt *n = makeNode(PGSelectStmt);
160: 					n->targetList = $3;
161: 					n->intoClause = $4;
162: 					n->fromClause = $5;
163: 					n->whereClause = $6;
164: 					n->groupClause = $7;
165: 					n->havingClause = $8;
166: 					n->windowClause = $9;
167: 					n->qualifyClause = $10;
168: 					n->sampleOptions = $11;
169: 					$$ = (PGNode *)n;
170: 				}
171: 			| SELECT distinct_clause target_list
172: 			into_clause from_clause where_clause
173: 			group_clause having_clause window_clause qualify_clause sample_clause
174: 				{
175: 					PGSelectStmt *n = makeNode(PGSelectStmt);
176: 					n->distinctClause = $2;
177: 					n->targetList = $3;
178: 					n->intoClause = $4;
179: 					n->fromClause = $5;
180: 					n->whereClause = $6;
181: 					n->groupClause = $7;
182: 					n->havingClause = $8;
183: 					n->windowClause = $9;
184: 					n->qualifyClause = $10;
185: 					n->sampleOptions = $11;
186: 					$$ = (PGNode *)n;
187: 				}
188: 			| values_clause							{ $$ = $1; }
189: 			| TABLE relation_expr
190: 				{
191: 					/* same as SELECT * FROM relation_expr */
192: 					PGColumnRef *cr = makeNode(PGColumnRef);
193: 					PGResTarget *rt = makeNode(PGResTarget);
194: 					PGSelectStmt *n = makeNode(PGSelectStmt);
195: 
196: 					cr->fields = list_make1(makeNode(PGAStar));
197: 					cr->location = -1;
198: 
199: 					rt->name = NULL;
200: 					rt->indirection = NIL;
201: 					rt->val = (PGNode *)cr;
202: 					rt->location = -1;
203: 
204: 					n->targetList = list_make1(rt);
205: 					n->fromClause = list_make1($2);
206: 					$$ = (PGNode *)n;
207: 				}
208: 			| select_clause UNION all_or_distinct select_clause
209: 				{
210: 					$$ = makeSetOp(PG_SETOP_UNION, $3, $1, $4);
211: 				}
212: 			| select_clause INTERSECT all_or_distinct select_clause
213: 				{
214: 					$$ = makeSetOp(PG_SETOP_INTERSECT, $3, $1, $4);
215: 				}
216: 			| select_clause EXCEPT all_or_distinct select_clause
217: 				{
218: 					$$ = makeSetOp(PG_SETOP_EXCEPT, $3, $1, $4);
219: 				}
220: 		;
221: 
222: /*
223:  * SQL standard WITH clause looks like:
224:  *
225:  * WITH [ RECURSIVE ] <query name> [ (<column>,...) ]
226:  *		AS (query) [ SEARCH or CYCLE clause ]
227:  *
228:  * We don't currently support the SEARCH or CYCLE clause.
229:  *
230:  * Recognizing WITH_LA here allows a CTE to be named TIME or ORDINALITY.
231:  */
232: with_clause:
233: 		WITH cte_list
234: 			{
235: 				$$ = makeNode(PGWithClause);
236: 				$$->ctes = $2;
237: 				$$->recursive = false;
238: 				$$->location = @1;
239: 			}
240: 		| WITH_LA cte_list
241: 			{
242: 				$$ = makeNode(PGWithClause);
243: 				$$->ctes = $2;
244: 				$$->recursive = false;
245: 				$$->location = @1;
246: 			}
247: 		| WITH RECURSIVE cte_list
248: 			{
249: 				$$ = makeNode(PGWithClause);
250: 				$$->ctes = $3;
251: 				$$->recursive = true;
252: 				$$->location = @1;
253: 			}
254: 		;
255: 
256: cte_list:
257: 		common_table_expr						{ $$ = list_make1($1); }
258: 		| cte_list ',' common_table_expr		{ $$ = lappend($1, $3); }
259: 		;
260: 
261: common_table_expr:  name opt_name_list AS '(' PreparableStmt ')'
262: 			{
263: 				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
264: 				n->ctename = $1;
265: 				n->aliascolnames = $2;
266: 				n->ctequery = $5;
267: 				n->location = @1;
268: 				$$ = (PGNode *) n;
269: 			}
270: 		;
271: 
272: into_clause:
273: 			INTO OptTempTableName
274: 				{
275: 					$$ = makeNode(PGIntoClause);
276: 					$$->rel = $2;
277: 					$$->colNames = NIL;
278: 					$$->options = NIL;
279: 					$$->onCommit = PG_ONCOMMIT_NOOP;
280: 					$$->viewQuery = NULL;
281: 					$$->skipData = false;
282: 				}
283: 			| /*EMPTY*/
284: 				{ $$ = NULL; }
285: 		;
286: 
287: /*
288:  * Redundancy here is needed to avoid shift/reduce conflicts,
289:  * since TEMP is not a reserved word.  See also OptTemp.
290:  */
291: OptTempTableName:
292: 			TEMPORARY opt_table qualified_name
293: 				{
294: 					$$ = $3;
295: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
296: 				}
297: 			| TEMP opt_table qualified_name
298: 				{
299: 					$$ = $3;
300: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
301: 				}
302: 			| LOCAL TEMPORARY opt_table qualified_name
303: 				{
304: 					$$ = $4;
305: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
306: 				}
307: 			| LOCAL TEMP opt_table qualified_name
308: 				{
309: 					$$ = $4;
310: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
311: 				}
312: 			| GLOBAL TEMPORARY opt_table qualified_name
313: 				{
314: 					ereport(PGWARNING,
315: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
316: 							 parser_errposition(@1)));
317: 					$$ = $4;
318: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
319: 				}
320: 			| GLOBAL TEMP opt_table qualified_name
321: 				{
322: 					ereport(PGWARNING,
323: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
324: 							 parser_errposition(@1)));
325: 					$$ = $4;
326: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
327: 				}
328: 			| UNLOGGED opt_table qualified_name
329: 				{
330: 					$$ = $3;
331: 					$$->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
332: 				}
333: 			| TABLE qualified_name
334: 				{
335: 					$$ = $2;
336: 					$$->relpersistence = RELPERSISTENCE_PERMANENT;
337: 				}
338: 			| qualified_name
339: 				{
340: 					$$ = $1;
341: 					$$->relpersistence = RELPERSISTENCE_PERMANENT;
342: 				}
343: 		;
344: 
345: opt_table:	TABLE									{}
346: 			| /*EMPTY*/								{}
347: 		;
348: 
349: all_or_distinct:
350: 			ALL										{ $$ = true; }
351: 			| DISTINCT								{ $$ = false; }
352: 			| /*EMPTY*/								{ $$ = false; }
353: 		;
354: 
355: /* We use (NIL) as a placeholder to indicate that all target expressions
356:  * should be placed in the DISTINCT list during parsetree analysis.
357:  */
358: distinct_clause:
359: 			DISTINCT								{ $$ = list_make1(NIL); }
360: 			| DISTINCT ON '(' expr_list ')'			{ $$ = $4; }
361: 		;
362: 
363: opt_all_clause:
364: 			ALL										{ $$ = NIL;}
365: 			| /*EMPTY*/								{ $$ = NIL; }
366: 		;
367: 
368: opt_ignore_nulls:
369: 			IGNORE_P NULLS_P						{ $$ = true;}
370: 			| RESPECT_P NULLS_P						{ $$ = false;}
371: 			| /*EMPTY*/								{ $$ = false; }
372: 		;
373: 
374: opt_sort_clause:
375: 			sort_clause								{ $$ = $1;}
376: 			| /*EMPTY*/								{ $$ = NIL; }
377: 		;
378: 
379: sort_clause:
380: 			ORDER BY sortby_list					{ $$ = $3; }
381: 			| ORDER BY ALL opt_asc_desc opt_nulls_order
382: 				{
383: 					PGSortBy *sort = makeNode(PGSortBy);
384: 					sort->node = (PGNode *) makeNode(PGAStar);
385: 					sort->sortby_dir = $4;
386: 					sort->sortby_nulls = $5;
387: 					sort->useOp = NIL;
388: 					sort->location = -1;		/* no operator */
389: 					$$ = list_make1(sort);
390: 				}
391: 			| ORDER BY '*' opt_asc_desc opt_nulls_order
392: 				{
393: 					PGSortBy *sort = makeNode(PGSortBy);
394: 					sort->node = (PGNode *) makeNode(PGAStar);
395: 					sort->sortby_dir = $4;
396: 					sort->sortby_nulls = $5;
397: 					sort->useOp = NIL;
398: 					sort->location = -1;		/* no operator */
399: 					$$ = list_make1(sort);
400: 				}
401: 		;
402: 
403: sortby_list:
404: 			sortby									{ $$ = list_make1($1); }
405: 			| sortby_list ',' sortby				{ $$ = lappend($1, $3); }
406: 		;
407: 
408: sortby:		a_expr USING qual_all_Op opt_nulls_order
409: 				{
410: 					$$ = makeNode(PGSortBy);
411: 					$$->node = $1;
412: 					$$->sortby_dir = SORTBY_USING;
413: 					$$->sortby_nulls = $4;
414: 					$$->useOp = $3;
415: 					$$->location = @3;
416: 				}
417: 			| a_expr opt_asc_desc opt_nulls_order
418: 				{
419: 					$$ = makeNode(PGSortBy);
420: 					$$->node = $1;
421: 					$$->sortby_dir = $2;
422: 					$$->sortby_nulls = $3;
423: 					$$->useOp = NIL;
424: 					$$->location = -1;		/* no operator */
425: 				}
426: 		;
427: 
428: opt_asc_desc: ASC_P							{ $$ = PG_SORTBY_ASC; }
429: 			| DESC_P						{ $$ = PG_SORTBY_DESC; }
430: 			| /*EMPTY*/						{ $$ = PG_SORTBY_DEFAULT; }
431: 		;
432: 
433: opt_nulls_order: NULLS_LA FIRST_P			{ $$ = PG_SORTBY_NULLS_FIRST; }
434: 			| NULLS_LA LAST_P				{ $$ = PG_SORTBY_NULLS_LAST; }
435: 			| /*EMPTY*/						{ $$ = PG_SORTBY_NULLS_DEFAULT; }
436: 		;
437: 
438: select_limit:
439: 			limit_clause offset_clause			{ $$ = list_make2($2, $1); }
440: 			| offset_clause limit_clause		{ $$ = list_make2($1, $2); }
441: 			| limit_clause						{ $$ = list_make2(NULL, $1); }
442: 			| offset_clause						{ $$ = list_make2($1, NULL); }
443: 		;
444: 
445: opt_select_limit:
446: 			select_limit						{ $$ = $1; }
447: 			| /* EMPTY */						{ $$ = list_make2(NULL,NULL); }
448: 		;
449: 
450: limit_clause:
451: 			LIMIT select_limit_value
452: 				{ $$ = $2; }
453: 			| LIMIT select_limit_value ',' select_offset_value
454: 				{
455: 					/* Disabled because it was too confusing, bjm 2002-02-18 */
456: 					ereport(ERROR,
457: 							(errcode(PG_ERRCODE_SYNTAX_ERROR),
458: 							 errmsg("LIMIT #,# syntax is not supported"),
459: 							 errhint("Use separate LIMIT and OFFSET clauses."),
460: 							 parser_errposition(@1)));
461: 				}
462: 			/* SQL:2008 syntax */
463: 			/* to avoid shift/reduce conflicts, handle the optional value with
464: 			 * a separate production rather than an opt_ expression.  The fact
465: 			 * that ONLY is fully reserved means that this way, we defer any
466: 			 * decision about what rule reduces ROW or ROWS to the point where
467: 			 * we can see the ONLY token in the lookahead slot.
468: 			 */
469: 			| FETCH first_or_next select_fetch_first_value row_or_rows ONLY
470: 				{ $$ = $3; }
471: 			| FETCH first_or_next row_or_rows ONLY
472: 				{ $$ = makeIntConst(1, -1); }
473: 		;
474: 
475: offset_clause:
476: 			OFFSET select_offset_value
477: 				{ $$ = $2; }
478: 			/* SQL:2008 syntax */
479: 			| OFFSET select_fetch_first_value row_or_rows
480: 				{ $$ = $2; }
481: 		;
482: 
483: /*
484:  * SAMPLE clause
485:  */
486: sample_count:
487: 	FCONST '%'
488: 		{
489: 			$$ = makeSampleSize(makeFloat($1), true);
490: 		}
491: 	| ICONST '%'
492: 		{
493: 			$$ = makeSampleSize(makeInteger($1), true);
494: 		}
495: 	| FCONST PERCENT
496: 		{
497: 			$$ = makeSampleSize(makeFloat($1), true);
498: 		}
499: 	| ICONST PERCENT
500: 		{
501: 			$$ = makeSampleSize(makeInteger($1), true);
502: 		}
503: 	| ICONST
504: 		{
505: 			$$ = makeSampleSize(makeInteger($1), false);
506: 		}
507: 	| ICONST ROWS
508: 		{
509: 			$$ = makeSampleSize(makeInteger($1), false);
510: 		}
511: 	;
512: 
513: sample_clause:
514: 			USING SAMPLE tablesample_entry
515: 				{
516: 					$$ = $3;
517: 				}
518: 			| /* EMPTY */
519: 				{ $$ = NULL; }
520: 		;
521: 
522: /*
523:  * TABLESAMPLE decoration in a FROM item
524:  */
525: opt_sample_func:
526: 			ColId					{ $$ = $1; }
527: 			| /*EMPTY*/				{ $$ = NULL; }
528: 		;
529: 
530: tablesample_entry:
531: 	opt_sample_func '(' sample_count ')' opt_repeatable_clause
532: 				{
533: 					$$ = makeSampleOptions($3, $1, $5, @1);
534: 				}
535: 	| sample_count
536: 		{
537: 			$$ = makeSampleOptions($1, NULL, -1, @1);
538: 		}
539: 	| sample_count '(' ColId ')'
540: 		{
541: 			$$ = makeSampleOptions($1, $3, -1, @1);
542: 		}
543: 	| sample_count '(' ColId ',' ICONST ')'
544: 		{
545: 			$$ = makeSampleOptions($1, $3, $5, @1);
546: 		}
547: 	;
548: 
549: tablesample_clause:
550: 			TABLESAMPLE tablesample_entry
551: 				{
552: 					$$ = $2;
553: 				}
554: 		;
555: 
556: opt_tablesample_clause:
557: 			tablesample_clause			{ $$ = $1; }
558: 			| /*EMPTY*/					{ $$ = NULL; }
559: 		;
560: 
561: 
562: opt_repeatable_clause:
563: 			REPEATABLE '(' ICONST ')'	{ $$ = $3; }
564: 			| /*EMPTY*/					{ $$ = -1; }
565: 		;
566: 
567: select_limit_value:
568: 			a_expr									{ $$ = $1; }
569: 			| ALL
570: 				{
571: 					/* LIMIT ALL is represented as a NULL constant */
572: 					$$ = makeNullAConst(@1);
573: 				}
574: 			| a_expr '%'
575: 				{ $$ = makeLimitPercent($1); }
576: 			| FCONST PERCENT
577: 				{ $$ = makeLimitPercent(makeFloatConst($1,@1)); }
578: 			| ICONST PERCENT
579: 				{ $$ = makeLimitPercent(makeIntConst($1,@1)); }
580: 		;
581: 
582: select_offset_value:
583: 			a_expr									{ $$ = $1; }
584: 		;
585: 
586: /*
587:  * Allowing full expressions without parentheses causes various parsing
588:  * problems with the trailing ROW/ROWS key words.  SQL spec only calls for
589:  * <simple value specification>, which is either a literal or a parameter (but
590:  * an <SQL parameter reference> could be an identifier, bringing up conflicts
591:  * with ROW/ROWS). We solve this by leveraging the presence of ONLY (see above)
592:  * to determine whether the expression is missing rather than trying to make it
593:  * optional in this rule.
594:  *
595:  * c_expr covers almost all the spec-required cases (and more), but it doesn't
596:  * cover signed numeric literals, which are allowed by the spec. So we include
597:  * those here explicitly. We need FCONST as well as ICONST because values that
598:  * don't fit in the platform's "long", but do fit in bigint, should still be
599:  * accepted here. (This is possible in 64-bit Windows as well as all 32-bit
600:  * builds.)
601:  */
602: select_fetch_first_value:
603: 			c_expr									{ $$ = $1; }
604: 			| '+' I_or_F_const
605: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, $2, @1); }
606: 			| '-' I_or_F_const
607: 				{ $$ = doNegate($2, @1); }
608: 		;
609: 
610: I_or_F_const:
611: 			Iconst									{ $$ = makeIntConst($1,@1); }
612: 			| FCONST								{ $$ = makeFloatConst($1,@1); }
613: 		;
614: 
615: /* noise words */
616: row_or_rows: ROW									{ $$ = 0; }
617: 			| ROWS									{ $$ = 0; }
618: 		;
619: 
620: first_or_next: FIRST_P								{ $$ = 0; }
621: 			| NEXT									{ $$ = 0; }
622: 		;
623: 
624: 
625: /*
626:  * This syntax for group_clause tries to follow the spec quite closely.
627:  * However, the spec allows only column references, not expressions,
628:  * which introduces an ambiguity between implicit row constructors
629:  * (a,b) and lists of column references.
630:  *
631:  * We handle this by using the a_expr production for what the spec calls
632:  * <ordinary grouping set>, which in the spec represents either one column
633:  * reference or a parenthesized list of column references. Then, we check the
634:  * top node of the a_expr to see if it's an implicit PGRowExpr, and if so, just
635:  * grab and use the list, discarding the node. (this is done in parse analysis,
636:  * not here)
637:  *
638:  * (we abuse the row_format field of PGRowExpr to distinguish implicit and
639:  * explicit row constructors; it's debatable if anyone sanely wants to use them
640:  * in a group clause, but if they have a reason to, we make it possible.)
641:  *
642:  * Each item in the group_clause list is either an expression tree or a
643:  * PGGroupingSet node of some type.
644:  */
645: group_clause:
646: 			GROUP_P BY group_by_list				{ $$ = $3; }
647: 			| GROUP_P BY ALL
648: 				{
649: 					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, @3);
650: 					$$ = list_make1(node);
651: 				}
652: 			| GROUP_P BY '*'
653: 				{
654: 					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, @3);
655: 					$$ = list_make1(node);
656: 				}
657: 			| /*EMPTY*/								{ $$ = NIL; }
658: 		;
659: 
660: group_by_list:
661: 			group_by_item							{ $$ = list_make1($1); }
662: 			| group_by_list ',' group_by_item		{ $$ = lappend($1,$3); }
663: 		;
664: 
665: group_by_item:
666: 			a_expr									{ $$ = $1; }
667: 			| empty_grouping_set					{ $$ = $1; }
668: 			| cube_clause							{ $$ = $1; }
669: 			| rollup_clause							{ $$ = $1; }
670: 			| grouping_sets_clause					{ $$ = $1; }
671: 		;
672: 
673: empty_grouping_set:
674: 			'(' ')'
675: 				{
676: 					$$ = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, @1);
677: 				}
678: 		;
679: 
680: /*
681:  * These hacks rely on setting precedence of CUBE and ROLLUP below that of '(',
682:  * so that they shift in these rules rather than reducing the conflicting
683:  * unreserved_keyword rule.
684:  */
685: 
686: rollup_clause:
687: 			ROLLUP '(' expr_list ')'
688: 				{
689: 					$$ = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, $3, @1);
690: 				}
691: 		;
692: 
693: cube_clause:
694: 			CUBE '(' expr_list ')'
695: 				{
696: 					$$ = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, $3, @1);
697: 				}
698: 		;
699: 
700: grouping_sets_clause:
701: 			GROUPING SETS '(' group_by_list ')'
702: 				{
703: 					$$ = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, $4, @1);
704: 				}
705: 		;
706: 
707: grouping_or_grouping_id:
708: 		GROUPING								{ $$ = NULL; }
709: 		| GROUPING_ID							{ $$ = NULL; }
710: 		;
711: 
712: having_clause:
713: 			HAVING a_expr							{ $$ = $2; }
714: 			| /*EMPTY*/								{ $$ = NULL; }
715: 		;
716: 
717: qualify_clause:
718: 			QUALIFY a_expr							{ $$ = $2; }
719: 			| /*EMPTY*/								{ $$ = NULL; }
720: 		;
721: 
722: for_locking_clause:
723: 			for_locking_items						{ $$ = $1; }
724: 			| FOR READ_P ONLY							{ $$ = NIL; }
725: 		;
726: 
727: opt_for_locking_clause:
728: 			for_locking_clause						{ $$ = $1; }
729: 			| /* EMPTY */							{ $$ = NIL; }
730: 		;
731: 
732: for_locking_items:
733: 			for_locking_item						{ $$ = list_make1($1); }
734: 			| for_locking_items for_locking_item	{ $$ = lappend($1, $2); }
735: 		;
736: 
737: for_locking_item:
738: 			for_locking_strength locked_rels_list opt_nowait_or_skip
739: 				{
740: 					PGLockingClause *n = makeNode(PGLockingClause);
741: 					n->lockedRels = $2;
742: 					n->strength = $1;
743: 					n->waitPolicy = $3;
744: 					$$ = (PGNode *) n;
745: 				}
746: 		;
747: 
748: for_locking_strength:
749: 			FOR UPDATE 							{ $$ = LCS_FORUPDATE; }
750: 			| FOR NO KEY UPDATE 				{ $$ = PG_LCS_FORNOKEYUPDATE; }
751: 			| FOR SHARE 						{ $$ = PG_LCS_FORSHARE; }
752: 			| FOR KEY SHARE 					{ $$ = PG_LCS_FORKEYSHARE; }
753: 		;
754: 
755: locked_rels_list:
756: 			OF qualified_name_list					{ $$ = $2; }
757: 			| /* EMPTY */							{ $$ = NIL; }
758: 		;
759: 
760: 
761: opt_nowait_or_skip:
762: 			NOWAIT							{ $$ = LockWaitError; }
763: 			| SKIP LOCKED					{ $$ = PGLockWaitSkip; }
764: 			| /*EMPTY*/						{ $$ = PGLockWaitBlock; }
765: 		;
766: 
767: /*
768:  * We should allow ROW '(' expr_list ')' too, but that seems to require
769:  * making VALUES a fully reserved word, which will probably break more apps
770:  * than allowing the noise-word is worth.
771:  */
772: values_clause:
773: 			VALUES '(' expr_list ')'
774: 				{
775: 					PGSelectStmt *n = makeNode(PGSelectStmt);
776: 					n->valuesLists = list_make1($3);
777: 					$$ = (PGNode *) n;
778: 				}
779: 			| values_clause ',' '(' expr_list ')'
780: 				{
781: 					PGSelectStmt *n = (PGSelectStmt *) $1;
782: 					n->valuesLists = lappend(n->valuesLists, $4);
783: 					$$ = (PGNode *) n;
784: 				}
785: 		;
786: 
787: 
788: /*****************************************************************************
789:  *
790:  *	clauses common to all Optimizable Stmts:
791:  *		from_clause		- allow list of both JOIN expressions and table names
792:  *		where_clause	- qualifications for joins or restrictions
793:  *
794:  *****************************************************************************/
795: 
796: from_clause:
797: 			FROM from_list							{ $$ = $2; }
798: 			| /*EMPTY*/								{ $$ = NIL; }
799: 		;
800: 
801: from_list:
802: 			table_ref								{ $$ = list_make1($1); }
803: 			| from_list ',' table_ref				{ $$ = lappend($1, $3); }
804: 		;
805: 
806: /*
807:  * table_ref is where an alias clause can be attached.
808:  */
809: table_ref:	relation_expr opt_alias_clause opt_tablesample_clause
810: 				{
811: 					$1->alias = $2;
812: 					$1->sample = $3;
813: 					$$ = (PGNode *) $1;
814: 				}
815: 			| func_table func_alias_clause opt_tablesample_clause
816: 				{
817: 					PGRangeFunction *n = (PGRangeFunction *) $1;
818: 					n->alias = (PGAlias*) linitial($2);
819: 					n->coldeflist = (PGList*) lsecond($2);
820: 					n->sample = $3;
821: 					$$ = (PGNode *) n;
822: 				}
823: 			| LATERAL_P func_table func_alias_clause
824: 				{
825: 					PGRangeFunction *n = (PGRangeFunction *) $2;
826: 					n->lateral = true;
827: 					n->alias = (PGAlias*) linitial($3);
828: 					n->coldeflist = (PGList*) lsecond($3);
829: 					$$ = (PGNode *) n;
830: 				}
831: 			| select_with_parens opt_alias_clause opt_tablesample_clause
832: 				{
833: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
834: 					n->lateral = false;
835: 					n->subquery = $1;
836: 					n->alias = $2;
837: 					n->sample = $3;
838: 					$$ = (PGNode *) n;
839: 				}
840: 			| LATERAL_P select_with_parens opt_alias_clause
841: 				{
842: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
843: 					n->lateral = true;
844: 					n->subquery = $2;
845: 					n->alias = $3;
846: 					n->sample = NULL;
847: 					$$ = (PGNode *) n;
848: 				}
849: 			| joined_table
850: 				{
851: 					$$ = (PGNode *) $1;
852: 				}
853: 			| '(' joined_table ')' alias_clause
854: 				{
855: 					$2->alias = $4;
856: 					$$ = (PGNode *) $2;
857: 				}
858: 		;
859: 
860: 
861: /*
862:  * It may seem silly to separate joined_table from table_ref, but there is
863:  * method in SQL's madness: if you don't do it this way you get reduce-
864:  * reduce conflicts, because it's not clear to the parser generator whether
865:  * to expect alias_clause after ')' or not.  For the same reason we must
866:  * treat 'JOIN' and 'join_type JOIN' separately, rather than allowing
867:  * join_type to expand to empty; if we try it, the parser generator can't
868:  * figure out when to reduce an empty join_type right after table_ref.
869:  *
870:  * Note that a CROSS JOIN is the same as an unqualified
871:  * INNER JOIN, and an INNER JOIN/ON has the same shape
872:  * but a qualification expression to limit membership.
873:  * A NATURAL JOIN implicitly matches column names between
874:  * tables and the shape is determined by which columns are
875:  * in common. We'll collect columns during the later transformations.
876:  */
877: 
878: joined_table:
879: 			'(' joined_table ')'
880: 				{
881: 					$$ = $2;
882: 				}
883: 			| table_ref CROSS JOIN table_ref
884: 				{
885: 					/* CROSS JOIN is same as unqualified inner join */
886: 					PGJoinExpr *n = makeNode(PGJoinExpr);
887: 					n->jointype = PG_JOIN_INNER;
888: 					n->isNatural = false;
889: 					n->larg = $1;
890: 					n->rarg = $4;
891: 					n->usingClause = NIL;
892: 					n->quals = NULL;
893: 					n->location = @2;
894: 					$$ = n;
895: 				}
896: 			| table_ref join_type JOIN table_ref join_qual
897: 				{
898: 					PGJoinExpr *n = makeNode(PGJoinExpr);
899: 					n->jointype = $2;
900: 					n->isNatural = false;
901: 					n->larg = $1;
902: 					n->rarg = $4;
903: 					if ($5 != NULL && IsA($5, PGList))
904: 						n->usingClause = (PGList *) $5; /* USING clause */
905: 					else
906: 						n->quals = $5; /* ON clause */
907: 					n->location = @2;
908: 					$$ = n;
909: 				}
910: 			| table_ref JOIN table_ref join_qual
911: 				{
912: 					/* letting join_type reduce to empty doesn't work */
913: 					PGJoinExpr *n = makeNode(PGJoinExpr);
914: 					n->jointype = PG_JOIN_INNER;
915: 					n->isNatural = false;
916: 					n->larg = $1;
917: 					n->rarg = $3;
918: 					if ($4 != NULL && IsA($4, PGList))
919: 						n->usingClause = (PGList *) $4; /* USING clause */
920: 					else
921: 						n->quals = $4; /* ON clause */
922: 					n->location = @2;
923: 					$$ = n;
924: 				}
925: 			| table_ref NATURAL join_type JOIN table_ref
926: 				{
927: 					PGJoinExpr *n = makeNode(PGJoinExpr);
928: 					n->jointype = $3;
929: 					n->isNatural = true;
930: 					n->larg = $1;
931: 					n->rarg = $5;
932: 					n->usingClause = NIL; /* figure out which columns later... */
933: 					n->quals = NULL; /* fill later */
934: 					n->location = @2;
935: 					$$ = n;
936: 				}
937: 			| table_ref NATURAL JOIN table_ref
938: 				{
939: 					/* letting join_type reduce to empty doesn't work */
940: 					PGJoinExpr *n = makeNode(PGJoinExpr);
941: 					n->jointype = PG_JOIN_INNER;
942: 					n->isNatural = true;
943: 					n->larg = $1;
944: 					n->rarg = $4;
945: 					n->usingClause = NIL; /* figure out which columns later... */
946: 					n->quals = NULL; /* fill later */
947: 					n->location = @2;
948: 					$$ = n;
949: 				}
950: 		;
951: 
952: alias_clause:
953: 			AS ColId '(' name_list ')'
954: 				{
955: 					$$ = makeNode(PGAlias);
956: 					$$->aliasname = $2;
957: 					$$->colnames = $4;
958: 				}
959: 			| AS ColIdOrString
960: 				{
961: 					$$ = makeNode(PGAlias);
962: 					$$->aliasname = $2;
963: 				}
964: 			| ColId '(' name_list ')'
965: 				{
966: 					$$ = makeNode(PGAlias);
967: 					$$->aliasname = $1;
968: 					$$->colnames = $3;
969: 				}
970: 			| ColId
971: 				{
972: 					$$ = makeNode(PGAlias);
973: 					$$->aliasname = $1;
974: 				}
975: 		;
976: 
977: opt_alias_clause: alias_clause						{ $$ = $1; }
978: 			| /*EMPTY*/								{ $$ = NULL; }
979: 		;
980: 
981: /*
982:  * func_alias_clause can include both an PGAlias and a coldeflist, so we make it
983:  * return a 2-element list that gets disassembled by calling production.
984:  */
985: func_alias_clause:
986: 			alias_clause
987: 				{
988: 					$$ = list_make2($1, NIL);
989: 				}
990: 			| AS '(' TableFuncElementList ')'
991: 				{
992: 					$$ = list_make2(NULL, $3);
993: 				}
994: 			| AS ColId '(' TableFuncElementList ')'
995: 				{
996: 					PGAlias *a = makeNode(PGAlias);
997: 					a->aliasname = $2;
998: 					$$ = list_make2(a, $4);
999: 				}
1000: 			| ColId '(' TableFuncElementList ')'
1001: 				{
1002: 					PGAlias *a = makeNode(PGAlias);
1003: 					a->aliasname = $1;
1004: 					$$ = list_make2(a, $3);
1005: 				}
1006: 			| /*EMPTY*/
1007: 				{
1008: 					$$ = list_make2(NULL, NIL);
1009: 				}
1010: 		;
1011: 
1012: join_type:	FULL join_outer							{ $$ = PG_JOIN_FULL; }
1013: 			| LEFT join_outer						{ $$ = PG_JOIN_LEFT; }
1014: 			| RIGHT join_outer						{ $$ = PG_JOIN_RIGHT; }
1015: 			| INNER_P								{ $$ = PG_JOIN_INNER; }
1016: 		;
1017: 
1018: /* OUTER is just noise... */
1019: join_outer: OUTER_P									{ $$ = NULL; }
1020: 			| /*EMPTY*/								{ $$ = NULL; }
1021: 		;
1022: 
1023: /* JOIN qualification clauses
1024:  * Possibilities are:
1025:  *	USING ( column list ) allows only unqualified column names,
1026:  *						  which must match between tables.
1027:  *	ON expr allows more general qualifications.
1028:  *
1029:  * We return USING as a PGList node, while an ON-expr will not be a List.
1030:  */
1031: 
1032: join_qual:	USING '(' name_list ')'					{ $$ = (PGNode *) $3; }
1033: 			| ON a_expr								{ $$ = $2; }
1034: 		;
1035: 
1036: 
1037: relation_expr:
1038: 			qualified_name
1039: 				{
1040: 					/* inheritance query, implicitly */
1041: 					$$ = $1;
1042: 					$$->inh = true;
1043: 					$$->alias = NULL;
1044: 				}
1045: 			| qualified_name '*'
1046: 				{
1047: 					/* inheritance query, explicitly */
1048: 					$$ = $1;
1049: 					$$->inh = true;
1050: 					$$->alias = NULL;
1051: 				}
1052: 			| ONLY qualified_name
1053: 				{
1054: 					/* no inheritance */
1055: 					$$ = $2;
1056: 					$$->inh = false;
1057: 					$$->alias = NULL;
1058: 				}
1059: 			| ONLY '(' qualified_name ')'
1060: 				{
1061: 					/* no inheritance, SQL99-style syntax */
1062: 					$$ = $3;
1063: 					$$->inh = false;
1064: 					$$->alias = NULL;
1065: 				}
1066: 		;
1067: 
1068: 
1069: /*
1070:  * Given "UPDATE foo set set ...", we have to decide without looking any
1071:  * further ahead whether the first "set" is an alias or the UPDATE's SET
1072:  * keyword.  Since "set" is allowed as a column name both interpretations
1073:  * are feasible.  We resolve the shift/reduce conflict by giving the first
1074:  * production a higher precedence than the SET token
1075:  * has, causing the parser to prefer to reduce, in effect assuming that the
1076:  * SET is not an alias.
1077:  */
1078: 
1079: /*
1080:  * func_table represents a function invocation in a FROM list. It can be
1081:  * a plain function call, like "foo(...)", or a ROWS FROM expression with
1082:  * one or more function calls, "ROWS FROM (foo(...), bar(...))",
1083:  * optionally with WITH ORDINALITY attached.
1084:  * In the ROWS FROM syntax, a column list can be given for each
1085:  * function, for example:
1086:  *     ROWS FROM (foo() AS (foo_res_a text, foo_res_b text),
1087:  *                bar() AS (bar_res_a text, bar_res_b text))
1088:  * It's also possible to attach a column list to the PGRangeFunction
1089:  * as a whole, but that's handled by the table_ref production.
1090:  */
1091: func_table: func_expr_windowless opt_ordinality
1092: 				{
1093: 					PGRangeFunction *n = makeNode(PGRangeFunction);
1094: 					n->lateral = false;
1095: 					n->ordinality = $2;
1096: 					n->is_rowsfrom = false;
1097: 					n->functions = list_make1(list_make2($1, NIL));
1098: 					n->sample = NULL;
1099: 					/* alias and coldeflist are set by table_ref production */
1100: 					$$ = (PGNode *) n;
1101: 				}
1102: 			| ROWS FROM '(' rowsfrom_list ')' opt_ordinality
1103: 				{
1104: 					PGRangeFunction *n = makeNode(PGRangeFunction);
1105: 					n->lateral = false;
1106: 					n->ordinality = $6;
1107: 					n->is_rowsfrom = true;
1108: 					n->functions = $4;
1109: 					n->sample = NULL;
1110: 					/* alias and coldeflist are set by table_ref production */
1111: 					$$ = (PGNode *) n;
1112: 				}
1113: 		;
1114: 
1115: rowsfrom_item: func_expr_windowless opt_col_def_list
1116: 				{ $$ = list_make2($1, $2); }
1117: 		;
1118: 
1119: rowsfrom_list:
1120: 			rowsfrom_item						{ $$ = list_make1($1); }
1121: 			| rowsfrom_list ',' rowsfrom_item	{ $$ = lappend($1, $3); }
1122: 		;
1123: 
1124: opt_col_def_list: AS '(' TableFuncElementList ')'	{ $$ = $3; }
1125: 			| /*EMPTY*/								{ $$ = NIL; }
1126: 		;
1127: 
1128: opt_ordinality: WITH_LA ORDINALITY					{ $$ = true; }
1129: 			| /*EMPTY*/								{ $$ = false; }
1130: 		;
1131: 
1132: 
1133: where_clause:
1134: 			WHERE a_expr							{ $$ = $2; }
1135: 			| /*EMPTY*/								{ $$ = NULL; }
1136: 		;
1137: 
1138: /* variant for UPDATE and DELETE */
1139: TableFuncElementList:
1140: 			TableFuncElement
1141: 				{
1142: 					$$ = list_make1($1);
1143: 				}
1144: 			| TableFuncElementList ',' TableFuncElement
1145: 				{
1146: 					$$ = lappend($1, $3);
1147: 				}
1148: 		;
1149: 
1150: TableFuncElement:	ColId Typename opt_collate_clause
1151: 				{
1152: 					PGColumnDef *n = makeNode(PGColumnDef);
1153: 					n->colname = $1;
1154: 					n->typeName = $2;
1155: 					n->inhcount = 0;
1156: 					n->is_local = true;
1157: 					n->is_not_null = false;
1158: 					n->is_from_type = false;
1159: 					n->storage = 0;
1160: 					n->raw_default = NULL;
1161: 					n->cooked_default = NULL;
1162: 					n->collClause = (PGCollateClause *) $3;
1163: 					n->collOid = InvalidOid;
1164: 					n->constraints = NIL;
1165: 					n->location = @1;
1166: 					$$ = (PGNode *)n;
1167: 				}
1168: 		;
1169: 
1170: opt_collate_clause:
1171: 			COLLATE any_name
1172: 				{
1173: 					PGCollateClause *n = makeNode(PGCollateClause);
1174: 					n->arg = NULL;
1175: 					n->collname = $2;
1176: 					n->location = @1;
1177: 					$$ = (PGNode *) n;
1178: 				}
1179: 			| /* EMPTY */				{ $$ = NULL; }
1180: 		;
1181: /*****************************************************************************
1182:  *
1183:  *	Type syntax
1184:  *		SQL introduces a large amount of type-specific syntax.
1185:  *		Define individual clauses to handle these cases, and use
1186:  *		 the generic case to handle regular type-extensible Postgres syntax.
1187:  *		- thomas 1997-10-10
1188:  *
1189:  *****************************************************************************/
1190: 
1191: colid_type_list:
1192:             ColId Typename   {
1193:              $$ = list_make1(list_make2(makeString($1), $2));
1194:             }
1195:             | colid_type_list ',' ColId Typename {
1196:              $$ = lappend($1, list_make2(makeString($3), $4));
1197:             }
1198: 
1199: RowOrStruct: ROW | STRUCT
1200: 
1201: Typename:	SimpleTypename opt_array_bounds
1202: 				{
1203: 					$$ = $1;
1204: 					$$->arrayBounds = $2;
1205: 				}
1206: 			| SETOF SimpleTypename opt_array_bounds
1207: 				{
1208: 					$$ = $2;
1209: 					$$->arrayBounds = $3;
1210: 					$$->setof = true;
1211: 				}
1212: 			/* SQL standard syntax, currently only one-dimensional */
1213: 			| SimpleTypename ARRAY '[' Iconst ']'
1214: 				{
1215: 					$$ = $1;
1216: 					$$->arrayBounds = list_make1(makeInteger($4));
1217: 				}
1218: 			| SETOF SimpleTypename ARRAY '[' Iconst ']'
1219: 				{
1220: 					$$ = $2;
1221: 					$$->arrayBounds = list_make1(makeInteger($5));
1222: 					$$->setof = true;
1223: 				}
1224: 			| SimpleTypename ARRAY
1225: 				{
1226: 					$$ = $1;
1227: 					$$->arrayBounds = list_make1(makeInteger(-1));
1228: 				}
1229: 			| SETOF SimpleTypename ARRAY
1230: 				{
1231: 					$$ = $2;
1232: 					$$->arrayBounds = list_make1(makeInteger(-1));
1233: 					$$->setof = true;
1234: 				}
1235: 			| RowOrStruct '(' colid_type_list ')' opt_array_bounds {
1236:                $$ = SystemTypeName("struct");
1237:                $$->arrayBounds = $5;
1238:                $$->typmods = $3;
1239:                $$->location = @1;
1240:                }
1241:             | MAP '(' type_list ')' opt_array_bounds {
1242:                $$ = SystemTypeName("map");
1243:                $$->arrayBounds = $5;
1244:                $$->typmods = $3;
1245:                $$->location = @1;
1246: 			}
1247: 		;
1248: 
1249: opt_array_bounds:
1250: 			opt_array_bounds '[' ']'
1251: 					{  $$ = lappend($1, makeInteger(-1)); }
1252: 			| opt_array_bounds '[' Iconst ']'
1253: 					{  $$ = lappend($1, makeInteger($3)); }
1254: 			| /*EMPTY*/
1255: 					{  $$ = NIL; }
1256: 		;
1257: 
1258: SimpleTypename:
1259: 			GenericType								{ $$ = $1; }
1260: 			| Numeric								{ $$ = $1; }
1261: 			| Bit									{ $$ = $1; }
1262: 			| Character								{ $$ = $1; }
1263: 			| ConstDatetime							{ $$ = $1; }
1264: 			| ConstInterval opt_interval
1265: 				{
1266: 					$$ = $1;
1267: 					$$->typmods = $2;
1268: 				}
1269: 			| ConstInterval '(' Iconst ')'
1270: 				{
1271: 					$$ = $1;
1272: 					$$->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
1273: 											 makeIntConst($3, @3));
1274: 				}
1275: 		;
1276: 
1277: /* We have a separate ConstTypename to allow defaulting fixed-length
1278:  * types such as CHAR() and BIT() to an unspecified length.
1279:  * SQL9x requires that these default to a length of one, but this
1280:  * makes no sense for constructs like CHAR 'hi' and BIT '0101',
1281:  * where there is an obvious better choice to make.
1282:  * Note that ConstInterval is not included here since it must
1283:  * be pushed up higher in the rules to accommodate the postfix
1284:  * options (e.g. INTERVAL '1' YEAR). Likewise, we have to handle
1285:  * the generic-type-name case in AExprConst to avoid premature
1286:  * reduce/reduce conflicts against function names.
1287:  */
1288: ConstTypename:
1289: 			Numeric									{ $$ = $1; }
1290: 			| ConstBit								{ $$ = $1; }
1291: 			| ConstCharacter						{ $$ = $1; }
1292: 			| ConstDatetime							{ $$ = $1; }
1293: 		;
1294: 
1295: /*
1296:  * GenericType covers all type names that don't have special syntax mandated
1297:  * by the standard, including qualified names.  We also allow type modifiers.
1298:  * To avoid parsing conflicts against function invocations, the modifiers
1299:  * have to be shown as expr_list here, but parse analysis will only accept
1300:  * constants for them.
1301:  */
1302: GenericType:
1303: 			type_name_token opt_type_modifiers
1304: 				{
1305: 					$$ = makeTypeName($1);
1306: 					$$->typmods = $2;
1307: 					$$->location = @1;
1308: 				}
1309: 			// | type_name_token attrs opt_type_modifiers
1310: 			// 	{
1311: 			// 		$$ = makeTypeNameFromNameList(lcons(makeString($1), $2));
1312: 			// 		$$->typmods = $3;
1313: 			// 		$$->location = @1;
1314: 			// 	}
1315: 		;
1316: 
1317: opt_type_modifiers: '(' expr_list ')'				{ $$ = $2; }
1318: 					| /* EMPTY */					{ $$ = NIL; }
1319: 		;
1320: 
1321: /*
1322:  * SQL numeric data types
1323:  */
1324: Numeric:	INT_P
1325: 				{
1326: 					$$ = SystemTypeName("int4");
1327: 					$$->location = @1;
1328: 				}
1329: 			| INTEGER
1330: 				{
1331: 					$$ = SystemTypeName("int4");
1332: 					$$->location = @1;
1333: 				}
1334: 			| SMALLINT
1335: 				{
1336: 					$$ = SystemTypeName("int2");
1337: 					$$->location = @1;
1338: 				}
1339: 			| BIGINT
1340: 				{
1341: 					$$ = SystemTypeName("int8");
1342: 					$$->location = @1;
1343: 				}
1344: 			| REAL
1345: 				{
1346: 					$$ = SystemTypeName("float4");
1347: 					$$->location = @1;
1348: 				}
1349: 			| FLOAT_P opt_float
1350: 				{
1351: 					$$ = $2;
1352: 					$$->location = @1;
1353: 				}
1354: 			| DOUBLE_P PRECISION
1355: 				{
1356: 					$$ = SystemTypeName("float8");
1357: 					$$->location = @1;
1358: 				}
1359: 			| DECIMAL_P opt_type_modifiers
1360: 				{
1361: 					$$ = SystemTypeName("numeric");
1362: 					$$->typmods = $2;
1363: 					$$->location = @1;
1364: 				}
1365: 			| DEC opt_type_modifiers
1366: 				{
1367: 					$$ = SystemTypeName("numeric");
1368: 					$$->typmods = $2;
1369: 					$$->location = @1;
1370: 				}
1371: 			| NUMERIC opt_type_modifiers
1372: 				{
1373: 					$$ = SystemTypeName("numeric");
1374: 					$$->typmods = $2;
1375: 					$$->location = @1;
1376: 				}
1377: 			| BOOLEAN_P
1378: 				{
1379: 					$$ = SystemTypeName("bool");
1380: 					$$->location = @1;
1381: 				}
1382: 		;
1383: 
1384: opt_float:	'(' Iconst ')'
1385: 				{
1386: 					/*
1387: 					 * Check FLOAT() precision limits assuming IEEE floating
1388: 					 * types - thomas 1997-09-18
1389: 					 */
1390: 					if ($2 < 1)
1391: 						ereport(ERROR,
1392: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
1393: 								 errmsg("precision for type float must be at least 1 bit"),
1394: 								 parser_errposition(@2)));
1395: 					else if ($2 <= 24)
1396: 						$$ = SystemTypeName("float4");
1397: 					else if ($2 <= 53)
1398: 						$$ = SystemTypeName("float8");
1399: 					else
1400: 						ereport(ERROR,
1401: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
1402: 								 errmsg("precision for type float must be less than 54 bits"),
1403: 								 parser_errposition(@2)));
1404: 				}
1405: 			| /*EMPTY*/
1406: 				{
1407: 					$$ = SystemTypeName("float4");
1408: 				}
1409: 		;
1410: 
1411: /*
1412:  * SQL bit-field data types
1413:  * The following implements BIT() and BIT VARYING().
1414:  */
1415: Bit:		BitWithLength
1416: 				{
1417: 					$$ = $1;
1418: 				}
1419: 			| BitWithoutLength
1420: 				{
1421: 					$$ = $1;
1422: 				}
1423: 		;
1424: 
1425: /* ConstBit is like Bit except "BIT" defaults to unspecified length */
1426: /* See notes for ConstCharacter, which addresses same issue for "CHAR" */
1427: ConstBit:	BitWithLength
1428: 				{
1429: 					$$ = $1;
1430: 				}
1431: 			| BitWithoutLength
1432: 				{
1433: 					$$ = $1;
1434: 					$$->typmods = NIL;
1435: 				}
1436: 		;
1437: 
1438: BitWithLength:
1439: 			BIT opt_varying '(' expr_list ')'
1440: 				{
1441: 					const char *typname;
1442: 
1443: 					typname = $2 ? "varbit" : "bit";
1444: 					$$ = SystemTypeName(typname);
1445: 					$$->typmods = $4;
1446: 					$$->location = @1;
1447: 				}
1448: 		;
1449: 
1450: BitWithoutLength:
1451: 			BIT opt_varying
1452: 				{
1453: 					/* bit defaults to bit(1), varbit to no limit */
1454: 					if ($2)
1455: 					{
1456: 						$$ = SystemTypeName("varbit");
1457: 					}
1458: 					else
1459: 					{
1460: 						$$ = SystemTypeName("bit");
1461: 						$$->typmods = list_make1(makeIntConst(1, -1));
1462: 					}
1463: 					$$->location = @1;
1464: 				}
1465: 		;
1466: 
1467: 
1468: /*
1469:  * SQL character data types
1470:  * The following implements CHAR() and VARCHAR().
1471:  */
1472: Character:  CharacterWithLength
1473: 				{
1474: 					$$ = $1;
1475: 				}
1476: 			| CharacterWithoutLength
1477: 				{
1478: 					$$ = $1;
1479: 				}
1480: 		;
1481: 
1482: ConstCharacter:  CharacterWithLength
1483: 				{
1484: 					$$ = $1;
1485: 				}
1486: 			| CharacterWithoutLength
1487: 				{
1488: 					/* Length was not specified so allow to be unrestricted.
1489: 					 * This handles problems with fixed-length (bpchar) strings
1490: 					 * which in column definitions must default to a length
1491: 					 * of one, but should not be constrained if the length
1492: 					 * was not specified.
1493: 					 */
1494: 					$$ = $1;
1495: 					$$->typmods = NIL;
1496: 				}
1497: 		;
1498: 
1499: CharacterWithLength:  character '(' Iconst ')'
1500: 				{
1501: 					$$ = SystemTypeName($1);
1502: 					$$->typmods = list_make1(makeIntConst($3, @3));
1503: 					$$->location = @1;
1504: 				}
1505: 		;
1506: 
1507: CharacterWithoutLength:	 character
1508: 				{
1509: 					$$ = SystemTypeName($1);
1510: 					/* char defaults to char(1), varchar to no limit */
1511: 					if (strcmp($1, "bpchar") == 0)
1512: 						$$->typmods = list_make1(makeIntConst(1, -1));
1513: 					$$->location = @1;
1514: 				}
1515: 		;
1516: 
1517: character:	CHARACTER opt_varying
1518: 										{ $$ = $2 ? "varchar": "bpchar"; }
1519: 			| CHAR_P opt_varying
1520: 										{ $$ = $2 ? "varchar": "bpchar"; }
1521: 			| VARCHAR
1522: 										{ $$ = "varchar"; }
1523: 			| NATIONAL CHARACTER opt_varying
1524: 										{ $$ = $3 ? "varchar": "bpchar"; }
1525: 			| NATIONAL CHAR_P opt_varying
1526: 										{ $$ = $3 ? "varchar": "bpchar"; }
1527: 			| NCHAR opt_varying
1528: 										{ $$ = $2 ? "varchar": "bpchar"; }
1529: 		;
1530: 
1531: opt_varying:
1532: 			VARYING									{ $$ = true; }
1533: 			| /*EMPTY*/								{ $$ = false; }
1534: 		;
1535: 
1536: /*
1537:  * SQL date/time types
1538:  */
1539: ConstDatetime:
1540: 			TIMESTAMP '(' Iconst ')' opt_timezone
1541: 				{
1542: 					if ($5)
1543: 						$$ = SystemTypeName("timestamptz");
1544: 					else
1545: 						$$ = SystemTypeName("timestamp");
1546: 					$$->typmods = list_make1(makeIntConst($3, @3));
1547: 					$$->location = @1;
1548: 				}
1549: 			| TIMESTAMP opt_timezone
1550: 				{
1551: 					if ($2)
1552: 						$$ = SystemTypeName("timestamptz");
1553: 					else
1554: 						$$ = SystemTypeName("timestamp");
1555: 					$$->location = @1;
1556: 				}
1557: 			| TIME '(' Iconst ')' opt_timezone
1558: 				{
1559: 					if ($5)
1560: 						$$ = SystemTypeName("timetz");
1561: 					else
1562: 						$$ = SystemTypeName("time");
1563: 					$$->typmods = list_make1(makeIntConst($3, @3));
1564: 					$$->location = @1;
1565: 				}
1566: 			| TIME opt_timezone
1567: 				{
1568: 					if ($2)
1569: 						$$ = SystemTypeName("timetz");
1570: 					else
1571: 						$$ = SystemTypeName("time");
1572: 					$$->location = @1;
1573: 				}
1574: 		;
1575: 
1576: ConstInterval:
1577: 			INTERVAL
1578: 				{
1579: 					$$ = SystemTypeName("interval");
1580: 					$$->location = @1;
1581: 				}
1582: 		;
1583: 
1584: opt_timezone:
1585: 			WITH_LA TIME ZONE						{ $$ = true; }
1586: 			| WITHOUT TIME ZONE						{ $$ = false; }
1587: 			| /*EMPTY*/								{ $$ = false; }
1588: 		;
1589: 
1590: year_keyword:
1591: 	YEAR_P | YEARS_P
1592: 
1593: month_keyword:
1594: 	MONTH_P | MONTHS_P
1595: 
1596: day_keyword:
1597: 	DAY_P | DAYS_P
1598: 
1599: hour_keyword:
1600: 	HOUR_P | HOURS_P
1601: 
1602: minute_keyword:
1603: 	MINUTE_P | MINUTES_P
1604: 
1605: second_keyword:
1606: 	SECOND_P | SECONDS_P
1607: 
1608: millisecond_keyword:
1609: 	MILLISECOND_P | MILLISECONDS_P
1610: 
1611: microsecond_keyword:
1612: 	MICROSECOND_P | MICROSECONDS_P
1613: 
1614: opt_interval:
1615: 			year_keyword
1616: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(YEAR), @1)); }
1617: 			| month_keyword
1618: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(MONTH), @1)); }
1619: 			| day_keyword
1620: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(DAY), @1)); }
1621: 			| hour_keyword
1622: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(HOUR), @1)); }
1623: 			| minute_keyword
1624: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), @1)); }
1625: 			| second_keyword
1626: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(SECOND), @1)); }
1627: 			| millisecond_keyword
1628: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), @1)); }
1629: 			| microsecond_keyword
1630: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), @1)); }
1631: 			| year_keyword TO month_keyword
1632: 				{
1633: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
1634: 												 INTERVAL_MASK(MONTH), @1));
1635: 				}
1636: 			| day_keyword TO hour_keyword
1637: 				{
1638: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
1639: 												 INTERVAL_MASK(HOUR), @1));
1640: 				}
1641: 			| day_keyword TO minute_keyword
1642: 				{
1643: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
1644: 												 INTERVAL_MASK(HOUR) |
1645: 												 INTERVAL_MASK(MINUTE), @1));
1646: 				}
1647: 			| day_keyword TO second_keyword
1648: 				{
1649: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
1650: 												 INTERVAL_MASK(HOUR) |
1651: 												 INTERVAL_MASK(MINUTE) |
1652: 												 INTERVAL_MASK(SECOND), @1));
1653: 				}
1654: 			| hour_keyword TO minute_keyword
1655: 				{
1656: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
1657: 												 INTERVAL_MASK(MINUTE), @1));
1658: 				}
1659: 			| hour_keyword TO second_keyword
1660: 				{
1661: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
1662: 												 INTERVAL_MASK(MINUTE) |
1663: 												 INTERVAL_MASK(SECOND), @1));
1664: 				}
1665: 			| minute_keyword TO second_keyword
1666: 				{
1667: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
1668: 												 INTERVAL_MASK(SECOND), @1));
1669: 				}
1670: 			| /*EMPTY*/
1671: 				{ $$ = NIL; }
1672: 		;
1673: 
1674: /*****************************************************************************
1675:  *
1676:  *	expression grammar
1677:  *
1678:  *****************************************************************************/
1679: 
1680: /*
1681:  * General expressions
1682:  * This is the heart of the expression syntax.
1683:  *
1684:  * We have two expression types: a_expr is the unrestricted kind, and
1685:  * b_expr is a subset that must be used in some places to avoid shift/reduce
1686:  * conflicts.  For example, we can't do BETWEEN as "BETWEEN a_expr AND a_expr"
1687:  * because that use of AND conflicts with AND as a boolean operator.  So,
1688:  * b_expr is used in BETWEEN and we remove boolean keywords from b_expr.
1689:  *
1690:  * Note that '(' a_expr ')' is a b_expr, so an unrestricted expression can
1691:  * always be used by surrounding it with parens.
1692:  *
1693:  * c_expr is all the productions that are common to a_expr and b_expr;
1694:  * it's factored out just to eliminate redundant coding.
1695:  *
1696:  * Be careful of productions involving more than one terminal token.
1697:  * By default, bison will assign such productions the precedence of their
1698:  * last terminal, but in nearly all cases you want it to be the precedence
1699:  * of the first terminal instead; otherwise you will not get the behavior
1700:  * you expect!  So we use %prec annotations freely to set precedences.
1701:  */
1702: a_expr:		c_expr									{ $$ = $1; }
1703: 			|
1704: 			a_expr TYPECAST Typename
1705: 					{ $$ = makeTypeCast($1, $3, 0, @2); }
1706: 			| a_expr COLLATE any_name
1707: 				{
1708: 					PGCollateClause *n = makeNode(PGCollateClause);
1709: 					n->arg = $1;
1710: 					n->collname = $3;
1711: 					n->location = @2;
1712: 					$$ = (PGNode *) n;
1713: 				}
1714: 			| a_expr AT TIME ZONE a_expr			%prec AT
1715: 				{
1716: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
1717: 											   list_make2($5, $1),
1718: 											   @2);
1719: 				}
1720: 		/*
1721: 		 * These operators must be called out explicitly in order to make use
1722: 		 * of bison's automatic operator-precedence handling.  All other
1723: 		 * operator names are handled by the generic productions using "Op",
1724: 		 * below; and all those operators will have the same precedence.
1725: 		 *
1726: 		 * If you add more explicitly-known operators, be sure to add them
1727: 		 * also to b_expr and to the MathOp list below.
1728: 		 */
1729: 			| '+' a_expr					%prec UMINUS
1730: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, $2, @1); }
1731: 			| '-' a_expr					%prec UMINUS
1732: 				{ $$ = doNegate($2, @1); }
1733: 			| a_expr '+' a_expr
1734: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", $1, $3, @2); }
1735: 			| a_expr '-' a_expr
1736: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", $1, $3, @2); }
1737: 			| a_expr '*' a_expr
1738: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", $1, $3, @2); }
1739: 			| a_expr '/' a_expr
1740: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", $1, $3, @2); }
1741: 			| a_expr '%' a_expr
1742: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", $1, $3, @2); }
1743: 			| a_expr '^' a_expr
1744: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", $1, $3, @2); }
1745: 			| a_expr '<' a_expr
1746: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", $1, $3, @2); }
1747: 			| a_expr '>' a_expr
1748: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", $1, $3, @2); }
1749: 			| a_expr '=' a_expr
1750: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", $1, $3, @2); }
1751: 			| a_expr LESS_EQUALS a_expr
1752: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", $1, $3, @2); }
1753: 			| a_expr GREATER_EQUALS a_expr
1754: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", $1, $3, @2); }
1755: 			| a_expr NOT_EQUALS a_expr
1756: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", $1, $3, @2); }
1757: 
1758: 			| a_expr qual_Op a_expr				%prec Op
1759: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $2, $1, $3, @2); }
1760: 			| qual_Op a_expr					%prec Op
1761: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $1, NULL, $2, @1); }
1762: 			| a_expr qual_Op					%prec POSTFIXOP
1763: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $2, $1, NULL, @2); }
1764: 
1765: 			| a_expr AND a_expr
1766: 				{ $$ = makeAndExpr($1, $3, @2); }
1767: 			| a_expr OR a_expr
1768: 				{ $$ = makeOrExpr($1, $3, @2); }
1769: 			| NOT a_expr
1770: 				{ $$ = makeNotExpr($2, @1); }
1771: 			| NOT_LA a_expr						%prec NOT
1772: 				{ $$ = makeNotExpr($2, @1); }
1773: 
1774: 			| a_expr GLOB a_expr %prec GLOB
1775: 				{
1776: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
1777: 												   $1, $3, @2);
1778: 				}
1779: 			| a_expr LIKE a_expr
1780: 				{
1781: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
1782: 												   $1, $3, @2);
1783: 				}
1784: 			| a_expr LIKE a_expr ESCAPE a_expr					%prec LIKE
1785: 				{
1786: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
1787: 											   list_make3($1, $3, $5),
1788: 											   @2);
1789: 					$$ = (PGNode *) n;
1790: 				}
1791: 			| a_expr NOT_LA LIKE a_expr							%prec NOT_LA
1792: 				{
1793: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
1794: 												   $1, $4, @2);
1795: 				}
1796: 			| a_expr NOT_LA LIKE a_expr ESCAPE a_expr			%prec NOT_LA
1797: 				{
1798: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
1799: 											   list_make3($1, $4, $6),
1800: 											   @2);
1801: 					$$ = (PGNode *) n;
1802: 				}
1803: 			| a_expr ILIKE a_expr
1804: 				{
1805: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
1806: 												   $1, $3, @2);
1807: 				}
1808: 			| a_expr ILIKE a_expr ESCAPE a_expr					%prec ILIKE
1809: 				{
1810: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
1811: 											   list_make2($3, $5),
1812: 											   @2);
1813: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
1814: 												   $1, (PGNode *) n, @2);
1815: 				}
1816: 			| a_expr NOT_LA ILIKE a_expr						%prec NOT_LA
1817: 				{
1818: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
1819: 												   $1, $4, @2);
1820: 				}
1821: 			| a_expr NOT_LA ILIKE a_expr ESCAPE a_expr			%prec NOT_LA
1822: 				{
1823: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
1824: 											   list_make2($4, $6),
1825: 											   @2);
1826: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
1827: 												   $1, (PGNode *) n, @2);
1828: 				}
1829: 
1830: 			| a_expr SIMILAR TO a_expr							%prec SIMILAR
1831: 				{
1832: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
1833: 											   list_make2($4, makeNullAConst(-1)),
1834: 											   @2);
1835: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
1836: 												   $1, (PGNode *) n, @2);
1837: 				}
1838: 			| a_expr SIMILAR TO a_expr ESCAPE a_expr			%prec SIMILAR
1839: 				{
1840: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
1841: 											   list_make2($4, $6),
1842: 											   @2);
1843: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
1844: 												   $1, (PGNode *) n, @2);
1845: 				}
1846: 			| a_expr NOT_LA SIMILAR TO a_expr					%prec NOT_LA
1847: 				{
1848: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
1849: 											   list_make2($5, makeNullAConst(-1)),
1850: 											   @2);
1851: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
1852: 												   $1, (PGNode *) n, @2);
1853: 				}
1854: 			| a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr		%prec NOT_LA
1855: 				{
1856: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
1857: 											   list_make2($5, $7),
1858: 											   @2);
1859: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
1860: 												   $1, (PGNode *) n, @2);
1861: 				}
1862: 
1863: 			/* PGNullTest clause
1864: 			 * Define SQL-style Null test clause.
1865: 			 * Allow two forms described in the standard:
1866: 			 *	a IS NULL
1867: 			 *	a IS NOT NULL
1868: 			 * Allow two SQL extensions
1869: 			 *	a ISNULL
1870: 			 *	a NOTNULL
1871: 			 */
1872: 			| a_expr IS NULL_P							%prec IS
1873: 				{
1874: 					PGNullTest *n = makeNode(PGNullTest);
1875: 					n->arg = (PGExpr *) $1;
1876: 					n->nulltesttype = PG_IS_NULL;
1877: 					n->location = @2;
1878: 					$$ = (PGNode *)n;
1879: 				}
1880: 			| a_expr ISNULL
1881: 				{
1882: 					PGNullTest *n = makeNode(PGNullTest);
1883: 					n->arg = (PGExpr *) $1;
1884: 					n->nulltesttype = PG_IS_NULL;
1885: 					n->location = @2;
1886: 					$$ = (PGNode *)n;
1887: 				}
1888: 			| a_expr IS NOT NULL_P						%prec IS
1889: 				{
1890: 					PGNullTest *n = makeNode(PGNullTest);
1891: 					n->arg = (PGExpr *) $1;
1892: 					n->nulltesttype = IS_NOT_NULL;
1893: 					n->location = @2;
1894: 					$$ = (PGNode *)n;
1895: 				}
1896: 			| a_expr NOT NULL_P
1897: 				{
1898: 					PGNullTest *n = makeNode(PGNullTest);
1899: 					n->arg = (PGExpr *) $1;
1900: 					n->nulltesttype = IS_NOT_NULL;
1901: 					n->location = @2;
1902: 					$$ = (PGNode *)n;
1903: 				}
1904: 			| a_expr NOTNULL
1905: 				{
1906: 					PGNullTest *n = makeNode(PGNullTest);
1907: 					n->arg = (PGExpr *) $1;
1908: 					n->nulltesttype = IS_NOT_NULL;
1909: 					n->location = @2;
1910: 					$$ = (PGNode *)n;
1911: 				}
1912: 			| row {
1913: 				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), $1, @1);
1914: 				$$ = (PGNode *) n;
1915: 			}
1916: 			| '{' dict_arguments '}' {
1917: 				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), $2, @2);
1918: 				$$ = (PGNode *) n;
1919: 			}
1920: 			| '[' opt_expr_list ']' {
1921: 				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), $2, @2);
1922: 				$$ = (PGNode *) n;
1923: 			}
1924: 			| row LAMBDA_ARROW a_expr
1925: 			{
1926: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
1927: 				n->parameters = $1;
1928: 				n->function = $3;
1929: 				n->location = @2;
1930: 				$$ = (PGNode *) n;
1931: 			}
1932: 			| columnref LAMBDA_ARROW a_expr
1933: 			{
1934: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
1935: 				n->parameters = list_make1($1);
1936: 				n->function = $3;
1937: 				n->location = @2;
1938: 				$$ = (PGNode *) n;
1939: 			}
1940: 			| row OVERLAPS row
1941: 				{
1942: 					if (list_length($1) != 2)
1943: 						ereport(ERROR,
1944: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
1945: 								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
1946: 								 parser_errposition(@1)));
1947: 					if (list_length($3) != 2)
1948: 						ereport(ERROR,
1949: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
1950: 								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
1951: 								 parser_errposition(@3)));
1952: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
1953: 											   list_concat($1, $3),
1954: 											   @2);
1955: 				}
1956: 			| a_expr IS TRUE_P							%prec IS
1957: 				{
1958: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1959: 					b->arg = (PGExpr *) $1;
1960: 					b->booltesttype = PG_IS_TRUE;
1961: 					b->location = @2;
1962: 					$$ = (PGNode *)b;
1963: 				}
1964: 			| a_expr IS NOT TRUE_P						%prec IS
1965: 				{
1966: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1967: 					b->arg = (PGExpr *) $1;
1968: 					b->booltesttype = IS_NOT_TRUE;
1969: 					b->location = @2;
1970: 					$$ = (PGNode *)b;
1971: 				}
1972: 			| a_expr IS FALSE_P							%prec IS
1973: 				{
1974: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1975: 					b->arg = (PGExpr *) $1;
1976: 					b->booltesttype = IS_FALSE;
1977: 					b->location = @2;
1978: 					$$ = (PGNode *)b;
1979: 				}
1980: 			| a_expr IS NOT FALSE_P						%prec IS
1981: 				{
1982: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1983: 					b->arg = (PGExpr *) $1;
1984: 					b->booltesttype = IS_NOT_FALSE;
1985: 					b->location = @2;
1986: 					$$ = (PGNode *)b;
1987: 				}
1988: 			| a_expr IS UNKNOWN							%prec IS
1989: 				{
1990: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1991: 					b->arg = (PGExpr *) $1;
1992: 					b->booltesttype = IS_UNKNOWN;
1993: 					b->location = @2;
1994: 					$$ = (PGNode *)b;
1995: 				}
1996: 			| a_expr IS NOT UNKNOWN						%prec IS
1997: 				{
1998: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1999: 					b->arg = (PGExpr *) $1;
2000: 					b->booltesttype = IS_NOT_UNKNOWN;
2001: 					b->location = @2;
2002: 					$$ = (PGNode *)b;
2003: 				}
2004: 			| a_expr IS DISTINCT FROM a_expr			%prec IS
2005: 				{
2006: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", $1, $5, @2);
2007: 				}
2008: 			| a_expr IS NOT DISTINCT FROM a_expr		%prec IS
2009: 				{
2010: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", $1, $6, @2);
2011: 				}
2012: 			| a_expr IS OF '(' type_list ')'			%prec IS
2013: 				{
2014: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", $1, (PGNode *) $5, @2);
2015: 				}
2016: 			| a_expr IS NOT OF '(' type_list ')'		%prec IS
2017: 				{
2018: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", $1, (PGNode *) $6, @2);
2019: 				}
2020: 			| a_expr BETWEEN opt_asymmetric b_expr AND a_expr		%prec BETWEEN
2021: 				{
2022: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
2023: 												   "BETWEEN",
2024: 												   $1,
2025: 												   (PGNode *) list_make2($4, $6),
2026: 												   @2);
2027: 				}
2028: 			| a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr %prec NOT_LA
2029: 				{
2030: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
2031: 												   "NOT BETWEEN",
2032: 												   $1,
2033: 												   (PGNode *) list_make2($5, $7),
2034: 												   @2);
2035: 				}
2036: 			| a_expr BETWEEN SYMMETRIC b_expr AND a_expr			%prec BETWEEN
2037: 				{
2038: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
2039: 												   "BETWEEN SYMMETRIC",
2040: 												   $1,
2041: 												   (PGNode *) list_make2($4, $6),
2042: 												   @2);
2043: 				}
2044: 			| a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr		%prec NOT_LA
2045: 				{
2046: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
2047: 												   "NOT BETWEEN SYMMETRIC",
2048: 												   $1,
2049: 												   (PGNode *) list_make2($5, $7),
2050: 												   @2);
2051: 				}
2052: 			| a_expr IN_P in_expr
2053: 				{
2054: 					/* in_expr returns a PGSubLink or a list of a_exprs */
2055: 					if (IsA($3, PGSubLink))
2056: 					{
2057: 						/* generate foo = ANY (subquery) */
2058: 						PGSubLink *n = (PGSubLink *) $3;
2059: 						n->subLinkType = PG_ANY_SUBLINK;
2060: 						n->subLinkId = 0;
2061: 						n->testexpr = $1;
2062: 						n->operName = NIL;		/* show it's IN not = ANY */
2063: 						n->location = @2;
2064: 						$$ = (PGNode *)n;
2065: 					}
2066: 					else
2067: 					{
2068: 						/* generate scalar IN expression */
2069: 						$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", $1, $3, @2);
2070: 					}
2071: 				}
2072: 			| a_expr NOT_LA IN_P in_expr						%prec NOT_LA
2073: 				{
2074: 					/* in_expr returns a PGSubLink or a list of a_exprs */
2075: 					if (IsA($4, PGSubLink))
2076: 					{
2077: 						/* generate NOT (foo = ANY (subquery)) */
2078: 						/* Make an = ANY node */
2079: 						PGSubLink *n = (PGSubLink *) $4;
2080: 						n->subLinkType = PG_ANY_SUBLINK;
2081: 						n->subLinkId = 0;
2082: 						n->testexpr = $1;
2083: 						n->operName = NIL;		/* show it's IN not = ANY */
2084: 						n->location = @2;
2085: 						/* Stick a NOT on top; must have same parse location */
2086: 						$$ = makeNotExpr((PGNode *) n, @2);
2087: 					}
2088: 					else
2089: 					{
2090: 						/* generate scalar NOT IN expression */
2091: 						$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", $1, $4, @2);
2092: 					}
2093: 				}
2094: 			| a_expr subquery_Op sub_type select_with_parens	%prec Op
2095: 				{
2096: 					PGSubLink *n = makeNode(PGSubLink);
2097: 					n->subLinkType = $3;
2098: 					n->subLinkId = 0;
2099: 					n->testexpr = $1;
2100: 					n->operName = $2;
2101: 					n->subselect = $4;
2102: 					n->location = @2;
2103: 					$$ = (PGNode *)n;
2104: 				}
2105: 			| a_expr subquery_Op sub_type '(' a_expr ')'		%prec Op
2106: 				{
2107: 					if ($3 == PG_ANY_SUBLINK)
2108: 						$$ = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, $2, $1, $5, @2);
2109: 					else
2110: 						$$ = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, $2, $1, $5, @2);
2111: 				}
2112: 			| DEFAULT
2113: 				{
2114: 					/*
2115: 					 * The SQL spec only allows DEFAULT in "contextually typed
2116: 					 * expressions", but for us, it's easier to allow it in
2117: 					 * any a_expr and then throw error during parse analysis
2118: 					 * if it's in an inappropriate context.  This way also
2119: 					 * lets us say something smarter than "syntax error".
2120: 					 */
2121: 					PGSetToDefault *n = makeNode(PGSetToDefault);
2122: 					/* parse analysis will fill in the rest */
2123: 					n->location = @1;
2124: 					$$ = (PGNode *)n;
2125: 				}
2126: 			| ARRAY '[' opt_expr_list ']' {
2127: 				PGList *func_name = list_make1(makeString("construct_array"));
2128: 				PGFuncCall *n = makeFuncCall(func_name, $3, @1);
2129: 				$$ = (PGNode *) n;
2130: 			}
2131: 		;
2132: 
2133: /*
2134:  * Restricted expressions
2135:  *
2136:  * b_expr is a subset of the complete expression syntax defined by a_expr.
2137:  *
2138:  * Presently, AND, NOT, IS, and IN are the a_expr keywords that would
2139:  * cause trouble in the places where b_expr is used.  For simplicity, we
2140:  * just eliminate all the boolean-keyword-operator productions from b_expr.
2141:  */
2142: b_expr:		c_expr
2143: 				{ $$ = $1; }
2144: 			| b_expr TYPECAST Typename
2145: 				{ $$ = makeTypeCast($1, $3, 0, @2); }
2146: 			| '+' b_expr					%prec UMINUS
2147: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, $2, @1); }
2148: 			| '-' b_expr					%prec UMINUS
2149: 				{ $$ = doNegate($2, @1); }
2150: 			| b_expr '+' b_expr
2151: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", $1, $3, @2); }
2152: 			| b_expr '-' b_expr
2153: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", $1, $3, @2); }
2154: 			| b_expr '*' b_expr
2155: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", $1, $3, @2); }
2156: 			| b_expr '/' b_expr
2157: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", $1, $3, @2); }
2158: 			| b_expr '%' b_expr
2159: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", $1, $3, @2); }
2160: 			| b_expr '^' b_expr
2161: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", $1, $3, @2); }
2162: 			| b_expr '<' b_expr
2163: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", $1, $3, @2); }
2164: 			| b_expr '>' b_expr
2165: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", $1, $3, @2); }
2166: 			| b_expr '=' b_expr
2167: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", $1, $3, @2); }
2168: 			| b_expr LESS_EQUALS b_expr
2169: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", $1, $3, @2); }
2170: 			| b_expr GREATER_EQUALS b_expr
2171: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", $1, $3, @2); }
2172: 			| b_expr NOT_EQUALS b_expr
2173: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", $1, $3, @2); }
2174: 			| b_expr qual_Op b_expr				%prec Op
2175: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $2, $1, $3, @2); }
2176: 			| qual_Op b_expr					%prec Op
2177: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $1, NULL, $2, @1); }
2178: 			| b_expr qual_Op					%prec POSTFIXOP
2179: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $2, $1, NULL, @2); }
2180: 			| b_expr IS DISTINCT FROM b_expr		%prec IS
2181: 				{
2182: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", $1, $5, @2);
2183: 				}
2184: 			| b_expr IS NOT DISTINCT FROM b_expr	%prec IS
2185: 				{
2186: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", $1, $6, @2);
2187: 				}
2188: 			| b_expr IS OF '(' type_list ')'		%prec IS
2189: 				{
2190: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", $1, (PGNode *) $5, @2);
2191: 				}
2192: 			| b_expr IS NOT OF '(' type_list ')'	%prec IS
2193: 				{
2194: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", $1, (PGNode *) $6, @2);
2195: 				}
2196: 		;
2197: 
2198: /*
2199:  * Productions that can be used in both a_expr and b_expr.
2200:  *
2201:  * Note: productions that refer recursively to a_expr or b_expr mostly
2202:  * cannot appear here.	However, it's OK to refer to a_exprs that occur
2203:  * inside parentheses, such as function arguments; that cannot introduce
2204:  * ambiguity to the b_expr syntax.
2205:  */
2206: c_expr:		columnref								{ $$ = $1; }
2207: 			| AexprConst							{ $$ = $1; }
2208: 			| '#' ICONST
2209: 				{
2210: 					PGPositionalReference *n = makeNode(PGPositionalReference);
2211: 					n->position = $2;
2212: 					n->location = @1;
2213: 					$$ = (PGNode *) n;
2214: 				}
2215: 			| '?' opt_indirection
2216: 				{
2217: 					if ($2)
2218: 					{
2219: 						PGAIndirection *n = makeNode(PGAIndirection);
2220: 						n->arg = makeParamRef(0, @1);
2221: 						n->indirection = check_indirection($2, yyscanner);
2222: 						$$ = (PGNode *) n;
2223: 					}
2224: 					else
2225: 						$$ = makeParamRef(0, @1);
2226: 				}
2227: 			| PARAM opt_indirection
2228: 				{
2229: 					PGParamRef *p = makeNode(PGParamRef);
2230: 					p->number = $1;
2231: 					p->location = @1;
2232: 					if ($2)
2233: 					{
2234: 						PGAIndirection *n = makeNode(PGAIndirection);
2235: 						n->arg = (PGNode *) p;
2236: 						n->indirection = check_indirection($2, yyscanner);
2237: 						$$ = (PGNode *) n;
2238: 					}
2239: 					else
2240: 						$$ = (PGNode *) p;
2241: 				}
2242: 			| '(' a_expr ')' opt_indirection
2243: 				{
2244: 					if ($4)
2245: 					{
2246: 						PGAIndirection *n = makeNode(PGAIndirection);
2247: 						n->arg = $2;
2248: 						n->indirection = check_indirection($4, yyscanner);
2249: 						$$ = (PGNode *)n;
2250: 					}
2251: 					else
2252: 						$$ = $2;
2253: 				}
2254: 			| case_expr
2255: 				{ $$ = $1; }
2256: 			| func_expr opt_indirection
2257: 				{
2258: 					if ($2) {
2259: 						PGAIndirection *n = makeNode(PGAIndirection);
2260: 						n->arg = $1;
2261: 						n->indirection = check_indirection($2, yyscanner);
2262: 						$$ = (PGNode *)n;
2263: 					}
2264: 					else {
2265: 						$$ = $1;
2266: 					}
2267: 				}
2268: 			| select_with_parens			%prec UMINUS
2269: 				{
2270: 					PGSubLink *n = makeNode(PGSubLink);
2271: 					n->subLinkType = PG_EXPR_SUBLINK;
2272: 					n->subLinkId = 0;
2273: 					n->testexpr = NULL;
2274: 					n->operName = NIL;
2275: 					n->subselect = $1;
2276: 					n->location = @1;
2277: 					$$ = (PGNode *)n;
2278: 				}
2279: 			| select_with_parens indirection
2280: 				{
2281: 					/*
2282: 					 * Because the select_with_parens nonterminal is designed
2283: 					 * to "eat" as many levels of parens as possible, the
2284: 					 * '(' a_expr ')' opt_indirection production above will
2285: 					 * fail to match a sub-SELECT with indirection decoration;
2286: 					 * the sub-SELECT won't be regarded as an a_expr as long
2287: 					 * as there are parens around it.  To support applying
2288: 					 * subscripting or field selection to a sub-SELECT result,
2289: 					 * we need this redundant-looking production.
2290: 					 */
2291: 					PGSubLink *n = makeNode(PGSubLink);
2292: 					PGAIndirection *a = makeNode(PGAIndirection);
2293: 					n->subLinkType = PG_EXPR_SUBLINK;
2294: 					n->subLinkId = 0;
2295: 					n->testexpr = NULL;
2296: 					n->operName = NIL;
2297: 					n->subselect = $1;
2298: 					n->location = @1;
2299: 					a->arg = (PGNode *)n;
2300: 					a->indirection = check_indirection($2, yyscanner);
2301: 					$$ = (PGNode *)a;
2302: 				}
2303: 			| EXISTS select_with_parens
2304: 				{
2305: 					PGSubLink *n = makeNode(PGSubLink);
2306: 					n->subLinkType = PG_EXISTS_SUBLINK;
2307: 					n->subLinkId = 0;
2308: 					n->testexpr = NULL;
2309: 					n->operName = NIL;
2310: 					n->subselect = $2;
2311: 					n->location = @1;
2312: 					$$ = (PGNode *)n;
2313: 				}
2314: 			| grouping_or_grouping_id '(' expr_list ')'
2315: 			  {
2316: 				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
2317: 				  g->args = $3;
2318: 				  g->location = @1;
2319: 				  $$ = (PGNode *)g;
2320: 			  }
2321: 		;
2322: 
2323: func_application: func_name '(' ')'
2324: 				{
2325: 					$$ = (PGNode *) makeFuncCall($1, NIL, @1);
2326: 				}
2327: 			| func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'
2328: 				{
2329: 					PGFuncCall *n = makeFuncCall($1, $3, @1);
2330: 					n->agg_order = $4;
2331: 					n->agg_ignore_nulls = $5;
2332: 					$$ = (PGNode *)n;
2333: 				}
2334: 			| func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'
2335: 				{
2336: 					PGFuncCall *n = makeFuncCall($1, list_make1($4), @1);
2337: 					n->func_variadic = true;
2338: 					n->agg_order = $5;
2339: 					n->agg_ignore_nulls = $6;
2340: 					$$ = (PGNode *)n;
2341: 				}
2342: 			| func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'
2343: 				{
2344: 					PGFuncCall *n = makeFuncCall($1, lappend($3, $6), @1);
2345: 					n->func_variadic = true;
2346: 					n->agg_order = $7;
2347: 					n->agg_ignore_nulls = $8;
2348: 					$$ = (PGNode *)n;
2349: 				}
2350: 			| func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'
2351: 				{
2352: 					PGFuncCall *n = makeFuncCall($1, $4, @1);
2353: 					n->agg_order = $5;
2354: 					n->agg_ignore_nulls = $6;
2355: 					/* Ideally we'd mark the PGFuncCall node to indicate
2356: 					 * "must be an aggregate", but there's no provision
2357: 					 * for that in PGFuncCall at the moment.
2358: 					 */
2359: 					$$ = (PGNode *)n;
2360: 				}
2361: 			| func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'
2362: 				{
2363: 					PGFuncCall *n = makeFuncCall($1, $4, @1);
2364: 					n->agg_order = $5;
2365: 					n->agg_ignore_nulls = $6;
2366: 					n->agg_distinct = true;
2367: 					$$ = (PGNode *)n;
2368: 				}
2369: 			| func_name '(' '*' ')'
2370: 				{
2371: 					/*
2372: 					 * We consider AGGREGATE(*) to invoke a parameterless
2373: 					 * aggregate.  This does the right thing for COUNT(*),
2374: 					 * and there are no other aggregates in SQL that accept
2375: 					 * '*' as parameter.
2376: 					 *
2377: 					 * The PGFuncCall node is also marked agg_star = true,
2378: 					 * so that later processing can detect what the argument
2379: 					 * really was.
2380: 					 */
2381: 					PGFuncCall *n = makeFuncCall($1, NIL, @1);
2382: 					n->agg_star = true;
2383: 					$$ = (PGNode *)n;
2384: 				}
2385: 		;
2386: 
2387: 
2388: /*
2389:  * func_expr and its cousin func_expr_windowless are split out from c_expr just
2390:  * so that we have classifications for "everything that is a function call or
2391:  * looks like one".  This isn't very important, but it saves us having to
2392:  * document which variants are legal in places like "FROM function()" or the
2393:  * backwards-compatible functional-index syntax for CREATE INDEX.
2394:  * (Note that many of the special SQL functions wouldn't actually make any
2395:  * sense as functional index entries, but we ignore that consideration here.)
2396:  */
2397: func_expr: func_application within_group_clause filter_clause export_clause over_clause
2398: 				{
2399: 					PGFuncCall *n = (PGFuncCall *) $1;
2400: 					/*
2401: 					 * The order clause for WITHIN GROUP and the one for
2402: 					 * plain-aggregate ORDER BY share a field, so we have to
2403: 					 * check here that at most one is present.  We also check
2404: 					 * for DISTINCT and VARIADIC here to give a better error
2405: 					 * location.  Other consistency checks are deferred to
2406: 					 * parse analysis.
2407: 					 */
2408: 					if ($2 != NIL)
2409: 					{
2410: 						if (n->agg_order != NIL)
2411: 							ereport(ERROR,
2412: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
2413: 									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
2414: 									 parser_errposition(@2)));
2415: 						if (n->agg_distinct)
2416: 							ereport(ERROR,
2417: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
2418: 									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
2419: 									 parser_errposition(@2)));
2420: 						if (n->func_variadic)
2421: 							ereport(ERROR,
2422: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
2423: 									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
2424: 									 parser_errposition(@2)));
2425: 						n->agg_order = $2;
2426: 						n->agg_within_group = true;
2427: 					}
2428: 					n->agg_filter = $3;
2429: 					n->export_state = $4;
2430: 					n->over = $5;
2431: 					$$ = (PGNode *) n;
2432: 				}
2433: 			| func_expr_common_subexpr
2434: 				{ $$ = $1; }
2435: 		;
2436: 
2437: /*
2438:  * As func_expr but does not accept WINDOW functions directly
2439:  * (but they can still be contained in arguments for functions etc).
2440:  * Use this when window expressions are not allowed, where needed to
2441:  * disambiguate the grammar (e.g. in CREATE INDEX).
2442:  */
2443: func_expr_windowless:
2444: 			func_application						{ $$ = $1; }
2445: 			| func_expr_common_subexpr				{ $$ = $1; }
2446: 		;
2447: 
2448: /*
2449:  * Special expressions that are considered to be functions.
2450:  */
2451: func_expr_common_subexpr:
2452: 			COLLATION FOR '(' a_expr ')'
2453: 				{
2454: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
2455: 											   list_make1($4),
2456: 											   @1);
2457: 				}
2458: 			| CURRENT_DATE
2459: 				{
2460: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, @1);
2461: 				}
2462: 			| CURRENT_TIME
2463: 				{
2464: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, @1);
2465: 				}
2466: 			| CURRENT_TIME '(' Iconst ')'
2467: 				{
2468: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, $3, @1);
2469: 				}
2470: 			| CURRENT_TIMESTAMP
2471: 				{
2472: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, @1);
2473: 				}
2474: 			| CURRENT_TIMESTAMP '(' Iconst ')'
2475: 				{
2476: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, $3, @1);
2477: 				}
2478: 			| LOCALTIME
2479: 				{
2480: 					$$ = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, @1);
2481: 				}
2482: 			| LOCALTIME '(' Iconst ')'
2483: 				{
2484: 					$$ = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, $3, @1);
2485: 				}
2486: 			| LOCALTIMESTAMP
2487: 				{
2488: 					$$ = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, @1);
2489: 				}
2490: 			| LOCALTIMESTAMP '(' Iconst ')'
2491: 				{
2492: 					$$ = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, $3, @1);
2493: 				}
2494: 			| CURRENT_ROLE
2495: 				{
2496: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, @1);
2497: 				}
2498: 			| CURRENT_USER
2499: 				{
2500: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, @1);
2501: 				}
2502: 			| SESSION_USER
2503: 				{
2504: 					$$ = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, @1);
2505: 				}
2506: 			| USER
2507: 				{
2508: 					$$ = makeSQLValueFunction(PG_SVFOP_USER, -1, @1);
2509: 				}
2510: 			| CURRENT_CATALOG
2511: 				{
2512: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, @1);
2513: 				}
2514: 			| CURRENT_SCHEMA
2515: 				{
2516: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, @1);
2517: 				}
2518: 			| CAST '(' a_expr AS Typename ')'
2519: 				{ $$ = makeTypeCast($3, $5, 0, @1); }
2520: 			| TRY_CAST '(' a_expr AS Typename ')'
2521: 				{ $$ = makeTypeCast($3, $5, 1, @1); }
2522: 			| EXTRACT '(' extract_list ')'
2523: 				{
2524: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("date_part"), $3, @1);
2525: 				}
2526: 			| OVERLAY '(' overlay_list ')'
2527: 				{
2528: 					/* overlay(A PLACING B FROM C FOR D) is converted to
2529: 					 * overlay(A, B, C, D)
2530: 					 * overlay(A PLACING B FROM C) is converted to
2531: 					 * overlay(A, B, C)
2532: 					 */
2533: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("overlay"), $3, @1);
2534: 				}
2535: 			| POSITION '(' position_list ')'
2536: 				{
2537: 					/* position(A in B) is converted to position(B, A) */
2538: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("position"), $3, @1);
2539: 				}
2540: 			| SUBSTRING '(' substr_list ')'
2541: 				{
2542: 					/* substring(A from B for C) is converted to
2543: 					 * substring(A, B, C) - thomas 2000-11-28
2544: 					 */
2545: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("substring"), $3, @1);
2546: 				}
2547: 			| TREAT '(' a_expr AS Typename ')'
2548: 				{
2549: 					/* TREAT(expr AS target) converts expr of a particular type to target,
2550: 					 * which is defined to be a subtype of the original expression.
2551: 					 * In SQL99, this is intended for use with structured UDTs,
2552: 					 * but let's make this a generally useful form allowing stronger
2553: 					 * coercions than are handled by implicit casting.
2554: 					 *
2555: 					 * Convert SystemTypeName() to SystemFuncName() even though
2556: 					 * at the moment they result in the same thing.
2557: 					 */
2558: 					$$ = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast($5->names))->val.str),
2559: 												list_make1($3),
2560: 												@1);
2561: 				}
2562: 			| TRIM '(' BOTH trim_list ')'
2563: 				{
2564: 					/* various trim expressions are defined in SQL
2565: 					 * - thomas 1997-07-19
2566: 					 */
2567: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("trim"), $4, @1);
2568: 				}
2569: 			| TRIM '(' LEADING trim_list ')'
2570: 				{
2571: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), $4, @1);
2572: 				}
2573: 			| TRIM '(' TRAILING trim_list ')'
2574: 				{
2575: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), $4, @1);
2576: 				}
2577: 			| TRIM '(' trim_list ')'
2578: 				{
2579: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("trim"), $3, @1);
2580: 				}
2581: 			| NULLIF '(' a_expr ',' a_expr ')'
2582: 				{
2583: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", $3, $5, @1);
2584: 				}
2585: 			| COALESCE '(' expr_list ')'
2586: 				{
2587: 					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
2588: 					c->args = $3;
2589: 					c->location = @1;
2590: 					$$ = (PGNode *)c;
2591: 				}
2592: 		;
2593: 
2594: /* We allow several variants for SQL and other compatibility. */
2595: /*
2596:  * Aggregate decoration clauses
2597:  */
2598: within_group_clause:
2599: 			WITHIN GROUP_P '(' sort_clause ')'		{ $$ = $4; }
2600: 			| /*EMPTY*/								{ $$ = NIL; }
2601: 		;
2602: 
2603: filter_clause:
2604: 			FILTER '(' WHERE a_expr ')'				{ $$ = $4; }
2605: 			| /*EMPTY*/								{ $$ = NULL; }
2606: 		;
2607: 
2608: export_clause:
2609: 			EXPORT_STATE            				{ $$ = true; }
2610: 			| /*EMPTY*/								{ $$ = false; }
2611: 		;
2612: 
2613: /*
2614:  * Window Definitions
2615:  */
2616: window_clause:
2617: 			WINDOW window_definition_list			{ $$ = $2; }
2618: 			| /*EMPTY*/								{ $$ = NIL; }
2619: 		;
2620: 
2621: window_definition_list:
2622: 			window_definition						{ $$ = list_make1($1); }
2623: 			| window_definition_list ',' window_definition
2624: 													{ $$ = lappend($1, $3); }
2625: 		;
2626: 
2627: window_definition:
2628: 			ColId AS window_specification
2629: 				{
2630: 					PGWindowDef *n = $3;
2631: 					n->name = $1;
2632: 					$$ = n;
2633: 				}
2634: 		;
2635: 
2636: over_clause: OVER window_specification
2637: 				{ $$ = $2; }
2638: 			| OVER ColId
2639: 				{
2640: 					PGWindowDef *n = makeNode(PGWindowDef);
2641: 					n->name = $2;
2642: 					n->refname = NULL;
2643: 					n->partitionClause = NIL;
2644: 					n->orderClause = NIL;
2645: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
2646: 					n->startOffset = NULL;
2647: 					n->endOffset = NULL;
2648: 					n->location = @2;
2649: 					$$ = n;
2650: 				}
2651: 			| /*EMPTY*/
2652: 				{ $$ = NULL; }
2653: 		;
2654: 
2655: window_specification: '(' opt_existing_window_name opt_partition_clause
2656: 						opt_sort_clause opt_frame_clause ')'
2657: 				{
2658: 					PGWindowDef *n = makeNode(PGWindowDef);
2659: 					n->name = NULL;
2660: 					n->refname = $2;
2661: 					n->partitionClause = $3;
2662: 					n->orderClause = $4;
2663: 					/* copy relevant fields of opt_frame_clause */
2664: 					n->frameOptions = $5->frameOptions;
2665: 					n->startOffset = $5->startOffset;
2666: 					n->endOffset = $5->endOffset;
2667: 					n->location = @1;
2668: 					$$ = n;
2669: 				}
2670: 		;
2671: 
2672: /*
2673:  * If we see PARTITION, RANGE, or ROWS as the first token after the '('
2674:  * of a window_specification, we want the assumption to be that there is
2675:  * no existing_window_name; but those keywords are unreserved and so could
2676:  * be ColIds.  We fix this by making them have the same precedence as IDENT
2677:  * and giving the empty production here a slightly higher precedence, so
2678:  * that the shift/reduce conflict is resolved in favor of reducing the rule.
2679:  * These keywords are thus precluded from being an existing_window_name but
2680:  * are not reserved for any other purpose.
2681:  */
2682: opt_existing_window_name: ColId						{ $$ = $1; }
2683: 			| /*EMPTY*/				%prec Op		{ $$ = NULL; }
2684: 		;
2685: 
2686: opt_partition_clause: PARTITION BY expr_list		{ $$ = $3; }
2687: 			| /*EMPTY*/								{ $$ = NIL; }
2688: 		;
2689: 
2690: /*
2691:  * For frame clauses, we return a PGWindowDef, but only some fields are used:
2692:  * frameOptions, startOffset, and endOffset.
2693:  *
2694:  * This is only a subset of the full SQL:2008 frame_clause grammar.
2695:  * We don't support <window frame exclusion> yet.
2696:  */
2697: opt_frame_clause:
2698: 			RANGE frame_extent
2699: 				{
2700: 					PGWindowDef *n = $2;
2701: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
2702: 					$$ = n;
2703: 				}
2704: 			| ROWS frame_extent
2705: 				{
2706: 					PGWindowDef *n = $2;
2707: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
2708: 					$$ = n;
2709: 				}
2710: 			| /*EMPTY*/
2711: 				{
2712: 					PGWindowDef *n = makeNode(PGWindowDef);
2713: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
2714: 					n->startOffset = NULL;
2715: 					n->endOffset = NULL;
2716: 					$$ = n;
2717: 				}
2718: 		;
2719: 
2720: frame_extent: frame_bound
2721: 				{
2722: 					PGWindowDef *n = $1;
2723: 					/* reject invalid cases */
2724: 					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
2725: 						ereport(ERROR,
2726: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2727: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
2728: 								 parser_errposition(@1)));
2729: 					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
2730: 						ereport(ERROR,
2731: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2732: 								 errmsg("frame starting from following row cannot end with current row"),
2733: 								 parser_errposition(@1)));
2734: 					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
2735: 					$$ = n;
2736: 				}
2737: 			| BETWEEN frame_bound AND frame_bound
2738: 				{
2739: 					PGWindowDef *n1 = $2;
2740: 					PGWindowDef *n2 = $4;
2741: 					/* form merged options */
2742: 					int		frameOptions = n1->frameOptions;
2743: 					/* shift converts START_ options to END_ options */
2744: 					frameOptions |= n2->frameOptions << 1;
2745: 					frameOptions |= FRAMEOPTION_BETWEEN;
2746: 					/* reject invalid cases */
2747: 					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
2748: 						ereport(ERROR,
2749: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2750: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
2751: 								 parser_errposition(@2)));
2752: 					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
2753: 						ereport(ERROR,
2754: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2755: 								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
2756: 								 parser_errposition(@4)));
2757: 					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
2758: 						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
2759: 						ereport(ERROR,
2760: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2761: 								 errmsg("frame starting from current row cannot have preceding rows"),
2762: 								 parser_errposition(@4)));
2763: 					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
2764: 						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
2765: 										 FRAMEOPTION_END_CURRENT_ROW)))
2766: 						ereport(ERROR,
2767: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2768: 								 errmsg("frame starting from following row cannot have preceding rows"),
2769: 								 parser_errposition(@4)));
2770: 					n1->frameOptions = frameOptions;
2771: 					n1->endOffset = n2->startOffset;
2772: 					$$ = n1;
2773: 				}
2774: 		;
2775: 
2776: /*
2777:  * This is used for both frame start and frame end, with output set up on
2778:  * the assumption it's frame start; the frame_extent productions must reject
2779:  * invalid cases.
2780:  */
2781: frame_bound:
2782: 			UNBOUNDED PRECEDING
2783: 				{
2784: 					PGWindowDef *n = makeNode(PGWindowDef);
2785: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
2786: 					n->startOffset = NULL;
2787: 					n->endOffset = NULL;
2788: 					$$ = n;
2789: 				}
2790: 			| UNBOUNDED FOLLOWING
2791: 				{
2792: 					PGWindowDef *n = makeNode(PGWindowDef);
2793: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
2794: 					n->startOffset = NULL;
2795: 					n->endOffset = NULL;
2796: 					$$ = n;
2797: 				}
2798: 			| CURRENT_P ROW
2799: 				{
2800: 					PGWindowDef *n = makeNode(PGWindowDef);
2801: 					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
2802: 					n->startOffset = NULL;
2803: 					n->endOffset = NULL;
2804: 					$$ = n;
2805: 				}
2806: 			| a_expr PRECEDING
2807: 				{
2808: 					PGWindowDef *n = makeNode(PGWindowDef);
2809: 					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
2810: 					n->startOffset = $1;
2811: 					n->endOffset = NULL;
2812: 					$$ = n;
2813: 				}
2814: 			| a_expr FOLLOWING
2815: 				{
2816: 					PGWindowDef *n = makeNode(PGWindowDef);
2817: 					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
2818: 					n->startOffset = $1;
2819: 					n->endOffset = NULL;
2820: 					$$ = n;
2821: 				}
2822: 		;
2823: 
2824: 
2825: /*
2826:  * Supporting nonterminals for expressions.
2827:  */
2828: 
2829: /* Explicit row production.
2830:  *
2831:  * SQL99 allows an optional ROW keyword, so we can now do single-element rows
2832:  * without conflicting with the parenthesized a_expr production.  Without the
2833:  * ROW keyword, there must be more than one a_expr inside the parens.
2834:  */
2835: qualified_row:	ROW '(' expr_list ')'					{ $$ = $3; }
2836: 			| ROW '(' ')'							{ $$ = NIL; }
2837: 		;
2838: 
2839: row:		qualified_row							{ $$ = $1;}
2840: 			| '(' expr_list ',' a_expr ')'			{ $$ = lappend($2, $4); }
2841: 		;
2842: 
2843: dict_arg:
2844: 	ColIdOrString ':' a_expr						{
2845: 		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
2846: 		na->name = $1;
2847: 		na->arg = (PGExpr *) $3;
2848: 		na->argnumber = -1;
2849: 		na->location = @1;
2850: 		$$ = (PGNode *) na;
2851: 	}
2852: 
2853: dict_arguments:
2854: 	dict_arg						{ $$ = list_make1($1); }
2855: 	| dict_arguments ',' dict_arg	{ $$ = lappend($1, $3); }
2856: 
2857: sub_type:	ANY										{ $$ = PG_ANY_SUBLINK; }
2858: 			| SOME									{ $$ = PG_ANY_SUBLINK; }
2859: 			| ALL									{ $$ = PG_ALL_SUBLINK; }
2860: 		;
2861: 
2862: all_Op:		Op										{ $$ = $1; }
2863: 			| MathOp								{ $$ = (char*) $1; }
2864: 		;
2865: 
2866: MathOp:		 '+'									{ $$ = "+"; }
2867: 			| '-'									{ $$ = "-"; }
2868: 			| '*'									{ $$ = "*"; }
2869: 			| '/'									{ $$ = "/"; }
2870: 			| '%'									{ $$ = "%"; }
2871: 			| '^'									{ $$ = "^"; }
2872: 			| '<'									{ $$ = "<"; }
2873: 			| '>'									{ $$ = ">"; }
2874: 			| '='									{ $$ = "="; }
2875: 			| LESS_EQUALS							{ $$ = "<="; }
2876: 			| GREATER_EQUALS						{ $$ = ">="; }
2877: 			| NOT_EQUALS							{ $$ = "<>"; }
2878: 		;
2879: 
2880: qual_Op:	Op
2881: 					{ $$ = list_make1(makeString($1)); }
2882: 			| OPERATOR '(' any_operator ')'
2883: 					{ $$ = $3; }
2884: 		;
2885: 
2886: qual_all_Op:
2887: 			all_Op
2888: 					{ $$ = list_make1(makeString($1)); }
2889: 			| OPERATOR '(' any_operator ')'
2890: 					{ $$ = $3; }
2891: 		;
2892: 
2893: subquery_Op:
2894: 			all_Op
2895: 					{ $$ = list_make1(makeString($1)); }
2896: 			| OPERATOR '(' any_operator ')'
2897: 					{ $$ = $3; }
2898: 			| LIKE
2899: 					{ $$ = list_make1(makeString("~~")); }
2900: 			| NOT_LA LIKE
2901: 					{ $$ = list_make1(makeString("!~~")); }
2902: 			| GLOB
2903: 					{ $$ = list_make1(makeString("~~~")); }
2904: 			| NOT_LA GLOB
2905: 					{ $$ = list_make1(makeString("!~~~")); }
2906: 			| ILIKE
2907: 					{ $$ = list_make1(makeString("~~*")); }
2908: 			| NOT_LA ILIKE
2909: 					{ $$ = list_make1(makeString("!~~*")); }
2910: /* cannot put SIMILAR TO here, because SIMILAR TO is a hack.
2911:  * the regular expression is preprocessed by a function (similar_escape),
2912:  * and the ~ operator for posix regular expressions is used.
2913:  *        x SIMILAR TO y     ->    x ~ similar_escape(y)
2914:  * this transformation is made on the fly by the parser upwards.
2915:  * however the PGSubLink structure which handles any/some/all stuff
2916:  * is not ready for such a thing.
2917:  */
2918: 			;
2919: 
2920: 
2921: any_operator:
2922: 			all_Op
2923: 					{ $$ = list_make1(makeString($1)); }
2924: 			| ColId '.' any_operator
2925: 					{ $$ = lcons(makeString($1), $3); }
2926: 		;
2927: 
2928: expr_list:	a_expr
2929: 				{
2930: 					$$ = list_make1($1);
2931: 				}
2932: 			| expr_list ',' a_expr
2933: 				{
2934: 					$$ = lappend($1, $3);
2935: 				}
2936: 		;
2937: 
2938: opt_expr_list:
2939: 			expr_list
2940: 				{
2941: 					$$ = $1;
2942: 				}
2943: 			| /* empty */
2944: 				{
2945: 					$$ = NULL;
2946: 				}
2947: 		;
2948: 
2949: 
2950: /* function arguments can have names */
2951: func_arg_list:  func_arg_expr
2952: 				{
2953: 					$$ = list_make1($1);
2954: 				}
2955: 			| func_arg_list ',' func_arg_expr
2956: 				{
2957: 					$$ = lappend($1, $3);
2958: 				}
2959: 		;
2960: 
2961: func_arg_expr:  a_expr
2962: 				{
2963: 					$$ = $1;
2964: 				}
2965: 			| param_name COLON_EQUALS a_expr
2966: 				{
2967: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
2968: 					na->name = $1;
2969: 					na->arg = (PGExpr *) $3;
2970: 					na->argnumber = -1;		/* until determined */
2971: 					na->location = @1;
2972: 					$$ = (PGNode *) na;
2973: 				}
2974: 			| param_name EQUALS_GREATER a_expr
2975: 				{
2976: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
2977: 					na->name = $1;
2978: 					na->arg = (PGExpr *) $3;
2979: 					na->argnumber = -1;		/* until determined */
2980: 					na->location = @1;
2981: 					$$ = (PGNode *) na;
2982: 				}
2983: 		;
2984: 
2985: type_list:	Typename								{ $$ = list_make1($1); }
2986: 			| type_list ',' Typename				{ $$ = lappend($1, $3); }
2987: 		;
2988: 
2989: extract_list:
2990: 			extract_arg FROM a_expr
2991: 				{
2992: 					$$ = list_make2(makeStringConst($1, @1), $3);
2993: 				}
2994: 			| /*EMPTY*/								{ $$ = NIL; }
2995: 		;
2996: 
2997: /* Allow delimited string Sconst in extract_arg as an SQL extension.
2998:  * - thomas 2001-04-12
2999:  */
3000: extract_arg:
3001: 			IDENT											{ $$ = $1; }
3002: 			| year_keyword									{ $$ = (char*) "year"; }
3003: 			| month_keyword									{ $$ = (char*) "month"; }
3004: 			| day_keyword									{ $$ = (char*) "day"; }
3005: 			| hour_keyword									{ $$ = (char*) "hour"; }
3006: 			| minute_keyword								{ $$ = (char*) "minute"; }
3007: 			| second_keyword								{ $$ = (char*) "second"; }
3008: 			| millisecond_keyword							{ $$ = (char*) "millisecond"; }
3009: 			| microsecond_keyword							{ $$ = (char*) "microsecond"; }
3010: 			| Sconst										{ $$ = $1; }
3011: 		;
3012: 
3013: /* OVERLAY() arguments
3014:  * SQL99 defines the OVERLAY() function:
3015:  * o overlay(text placing text from int for int)
3016:  * o overlay(text placing text from int)
3017:  * and similarly for binary strings
3018:  */
3019: overlay_list:
3020: 			a_expr overlay_placing substr_from substr_for
3021: 				{
3022: 					$$ = list_make4($1, $2, $3, $4);
3023: 				}
3024: 			| a_expr overlay_placing substr_from
3025: 				{
3026: 					$$ = list_make3($1, $2, $3);
3027: 				}
3028: 		;
3029: 
3030: overlay_placing:
3031: 			PLACING a_expr
3032: 				{ $$ = $2; }
3033: 		;
3034: 
3035: /* position_list uses b_expr not a_expr to avoid conflict with general IN */
3036: 
3037: position_list:
3038: 			b_expr IN_P b_expr						{ $$ = list_make2($3, $1); }
3039: 			| /*EMPTY*/								{ $$ = NIL; }
3040: 		;
3041: 
3042: /* SUBSTRING() arguments
3043:  * SQL9x defines a specific syntax for arguments to SUBSTRING():
3044:  * o substring(text from int for int)
3045:  * o substring(text from int) get entire string from starting point "int"
3046:  * o substring(text for int) get first "int" characters of string
3047:  * o substring(text from pattern) get entire string matching pattern
3048:  * o substring(text from pattern for escape) same with specified escape char
3049:  * We also want to support generic substring functions which accept
3050:  * the usual generic list of arguments. So we will accept both styles
3051:  * here, and convert the SQL9x style to the generic list for further
3052:  * processing. - thomas 2000-11-28
3053:  */
3054: substr_list:
3055: 			a_expr substr_from substr_for
3056: 				{
3057: 					$$ = list_make3($1, $2, $3);
3058: 				}
3059: 			| a_expr substr_for substr_from
3060: 				{
3061: 					/* not legal per SQL99, but might as well allow it */
3062: 					$$ = list_make3($1, $3, $2);
3063: 				}
3064: 			| a_expr substr_from
3065: 				{
3066: 					$$ = list_make2($1, $2);
3067: 				}
3068: 			| a_expr substr_for
3069: 				{
3070: 					/*
3071: 					 * Since there are no cases where this syntax allows
3072: 					 * a textual FOR value, we forcibly cast the argument
3073: 					 * to int4.  The possible matches in pg_proc are
3074: 					 * substring(text,int4) and substring(text,text),
3075: 					 * and we don't want the parser to choose the latter,
3076: 					 * which it is likely to do if the second argument
3077: 					 * is unknown or doesn't have an implicit cast to int4.
3078: 					 */
3079: 					$$ = list_make3($1, makeIntConst(1, -1),
3080: 									makeTypeCast($2,
3081: 												 SystemTypeName("int4"), 0, -1));
3082: 				}
3083: 			| expr_list
3084: 				{
3085: 					$$ = $1;
3086: 				}
3087: 			| /*EMPTY*/
3088: 				{ $$ = NIL; }
3089: 		;
3090: 
3091: substr_from:
3092: 			FROM a_expr								{ $$ = $2; }
3093: 		;
3094: 
3095: substr_for: FOR a_expr								{ $$ = $2; }
3096: 		;
3097: 
3098: trim_list:	a_expr FROM expr_list					{ $$ = lappend($3, $1); }
3099: 			| FROM expr_list						{ $$ = $2; }
3100: 			| expr_list								{ $$ = $1; }
3101: 		;
3102: 
3103: in_expr:	select_with_parens
3104: 				{
3105: 					PGSubLink *n = makeNode(PGSubLink);
3106: 					n->subselect = $1;
3107: 					/* other fields will be filled later */
3108: 					$$ = (PGNode *)n;
3109: 				}
3110: 			| '(' expr_list ')'						{ $$ = (PGNode *)$2; }
3111: 		;
3112: 
3113: /*
3114:  * Define SQL-style CASE clause.
3115:  * - Full specification
3116:  *	CASE WHEN a = b THEN c ... ELSE d END
3117:  * - Implicit argument
3118:  *	CASE a WHEN b THEN c ... ELSE d END
3119:  */
3120: case_expr:	CASE case_arg when_clause_list case_default END_P
3121: 				{
3122: 					PGCaseExpr *c = makeNode(PGCaseExpr);
3123: 					c->casetype = InvalidOid; /* not analyzed yet */
3124: 					c->arg = (PGExpr *) $2;
3125: 					c->args = $3;
3126: 					c->defresult = (PGExpr *) $4;
3127: 					c->location = @1;
3128: 					$$ = (PGNode *)c;
3129: 				}
3130: 		;
3131: 
3132: when_clause_list:
3133: 			/* There must be at least one */
3134: 			when_clause								{ $$ = list_make1($1); }
3135: 			| when_clause_list when_clause			{ $$ = lappend($1, $2); }
3136: 		;
3137: 
3138: when_clause:
3139: 			WHEN a_expr THEN a_expr
3140: 				{
3141: 					PGCaseWhen *w = makeNode(PGCaseWhen);
3142: 					w->expr = (PGExpr *) $2;
3143: 					w->result = (PGExpr *) $4;
3144: 					w->location = @1;
3145: 					$$ = (PGNode *)w;
3146: 				}
3147: 		;
3148: 
3149: case_default:
3150: 			ELSE a_expr								{ $$ = $2; }
3151: 			| /*EMPTY*/								{ $$ = NULL; }
3152: 		;
3153: 
3154: case_arg:	a_expr									{ $$ = $1; }
3155: 			| /*EMPTY*/								{ $$ = NULL; }
3156: 		;
3157: 
3158: columnref:	ColId
3159: 				{
3160: 					$$ = makeColumnRef($1, NIL, @1, yyscanner);
3161: 				}
3162: 			| ColId indirection
3163: 				{
3164: 					$$ = makeColumnRef($1, $2, @1, yyscanner);
3165: 				}
3166: 		;
3167: 
3168: indirection_el:
3169: 			'.' attr_name
3170: 				{
3171: 					$$ = (PGNode *) makeString($2);
3172: 				}
3173: 			| '[' a_expr ']'
3174: 				{
3175: 					PGAIndices *ai = makeNode(PGAIndices);
3176: 					ai->is_slice = false;
3177: 					ai->lidx = NULL;
3178: 					ai->uidx = $2;
3179: 					$$ = (PGNode *) ai;
3180: 				}
3181: 			| '[' opt_slice_bound ':' opt_slice_bound ']'
3182: 				{
3183: 					PGAIndices *ai = makeNode(PGAIndices);
3184: 					ai->is_slice = true;
3185: 					ai->lidx = $2;
3186: 					ai->uidx = $4;
3187: 					$$ = (PGNode *) ai;
3188: 				}
3189: 		;
3190: 
3191: opt_slice_bound:
3192: 			a_expr									{ $$ = $1; }
3193: 			| /*EMPTY*/								{ $$ = NULL; }
3194: 		;
3195: 
3196: indirection:
3197: 			indirection_el							{ $$ = list_make1($1); }
3198: 			| indirection indirection_el			{ $$ = lappend($1, $2); }
3199: 		;
3200: 
3201: opt_indirection:
3202: 			/*EMPTY*/								{ $$ = NIL; }
3203: 			| opt_indirection indirection_el		{ $$ = lappend($1, $2); }
3204: 		;
3205: 
3206: opt_asymmetric: ASYMMETRIC
3207: 			| /*EMPTY*/
3208: 		;
3209: 
3210: 
3211: /*****************************************************************************
3212:  *
3213:  *	target list for SELECT
3214:  *
3215:  *****************************************************************************/
3216: 
3217: opt_target_list: target_list						{ $$ = $1; }
3218: 			| /* EMPTY */							{ $$ = NIL; }
3219: 		;
3220: 
3221: target_list:
3222: 			target_el								{ $$ = list_make1($1); }
3223: 			| target_list ',' target_el				{ $$ = lappend($1, $3); }
3224: 		;
3225: 
3226: target_el:	a_expr AS ColLabelOrString
3227: 				{
3228: 					$$ = makeNode(PGResTarget);
3229: 					$$->name = $3;
3230: 					$$->indirection = NIL;
3231: 					$$->val = (PGNode *)$1;
3232: 					$$->location = @1;
3233: 				}
3234: 			/*
3235: 			 * We support omitting AS only for column labels that aren't
3236: 			 * any known keyword.  There is an ambiguity against postfix
3237: 			 * operators: is "a ! b" an infix expression, or a postfix
3238: 			 * expression and a column label?  We prefer to resolve this
3239: 			 * as an infix expression, which we accomplish by assigning
3240: 			 * IDENT a precedence higher than POSTFIXOP.
3241: 			 */
3242: 			| a_expr IDENT
3243: 				{
3244: 					$$ = makeNode(PGResTarget);
3245: 					$$->name = $2;
3246: 					$$->indirection = NIL;
3247: 					$$->val = (PGNode *)$1;
3248: 					$$->location = @1;
3249: 				}
3250: 			| a_expr
3251: 				{
3252: 					$$ = makeNode(PGResTarget);
3253: 					$$->name = NULL;
3254: 					$$->indirection = NIL;
3255: 					$$->val = (PGNode *)$1;
3256: 					$$->location = @1;
3257: 				}
3258: 			| '*' opt_except_list opt_replace_list
3259: 				{
3260: 					PGColumnRef *n = makeNode(PGColumnRef);
3261: 					PGAStar *star = makeNode(PGAStar);
3262: 					n->fields = list_make1(star);
3263: 					n->location = @1;
3264: 					star->except_list = $2;
3265: 					star->replace_list = $3;
3266: 
3267: 					$$ = makeNode(PGResTarget);
3268: 					$$->name = NULL;
3269: 					$$->indirection = NIL;
3270: 					$$->val = (PGNode *)n;
3271: 					$$->location = @1;
3272: 				}
3273: 			| ColId '.' '*' opt_except_list opt_replace_list
3274: 				{
3275: 					PGColumnRef *n = makeNode(PGColumnRef);
3276: 					PGAStar *star = makeNode(PGAStar);
3277: 					n->fields = list_make1(star);
3278: 					n->location = @1;
3279: 					star->relation = $1;
3280: 					star->except_list = $4;
3281: 					star->replace_list = $5;
3282: 
3283: 					$$ = makeNode(PGResTarget);
3284: 					$$->name = NULL;
3285: 					$$->indirection = NIL;
3286: 					$$->val = (PGNode *)n;
3287: 					$$->location = @1;
3288: 				}
3289: 		;
3290: 
3291: except_list: EXCLUDE '(' name_list ')'					{ $$ = $3; }
3292: 			| EXCLUDE ColId								{ $$ = list_make1(makeString($2)); }
3293: 		;
3294: 
3295: opt_except_list: except_list						{ $$ = $1; }
3296: 			| /*EMPTY*/								{ $$ = NULL; }
3297: 		;
3298: 
3299: replace_list_el: a_expr AS ColId					{ $$ = list_make2($1, makeString($3)); }
3300: 		;
3301: 
3302: replace_list:
3303: 			replace_list_el							{ $$ = list_make1($1); }
3304: 			| replace_list ',' replace_list_el		{ $$ = lappend($1, $3); }
3305: 		;
3306: 
3307: opt_replace_list: REPLACE '(' replace_list ')'		{ $$ = $3; }
3308: 			| REPLACE replace_list_el				{ $$ = list_make1($2); }
3309: 			| /*EMPTY*/								{ $$ = NULL; }
3310: 		;
3311: 
3312: /*****************************************************************************
3313:  *
3314:  *	Names and constants
3315:  *
3316:  *****************************************************************************/
3317: 
3318: qualified_name_list:
3319: 			qualified_name							{ $$ = list_make1($1); }
3320: 			| qualified_name_list ',' qualified_name { $$ = lappend($1, $3); }
3321: 		;
3322: 
3323: /*
3324:  * The production for a qualified relation name has to exactly match the
3325:  * production for a qualified func_name, because in a FROM clause we cannot
3326:  * tell which we are parsing until we see what comes after it ('(' for a
3327:  * func_name, something else for a relation). Therefore we allow 'indirection'
3328:  * which may contain subscripts, and reject that case in the C code.
3329:  */
3330: qualified_name:
3331: 			ColIdOrString
3332: 				{
3333: 					$$ = makeRangeVar(NULL, $1, @1);
3334: 				}
3335: 			| ColId indirection
3336: 				{
3337: 					check_qualified_name($2, yyscanner);
3338: 					$$ = makeRangeVar(NULL, NULL, @1);
3339: 					switch (list_length($2))
3340: 					{
3341: 						case 1:
3342: 							$$->catalogname = NULL;
3343: 							$$->schemaname = $1;
3344: 							$$->relname = strVal(linitial($2));
3345: 							break;
3346: 						case 2:
3347: 							$$->catalogname = $1;
3348: 							$$->schemaname = strVal(linitial($2));
3349: 							$$->relname = strVal(lsecond($2));
3350: 							break;
3351: 						default:
3352: 							ereport(ERROR,
3353: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
3354: 									 errmsg("improper qualified name (too many dotted names): %s",
3355: 											NameListToString(lcons(makeString($1), $2))),
3356: 									 parser_errposition(@1)));
3357: 							break;
3358: 					}
3359: 				}
3360: 		;
3361: 
3362: name_list:	name
3363: 					{ $$ = list_make1(makeString($1)); }
3364: 			| name_list ',' name
3365: 					{ $$ = lappend($1, makeString($3)); }
3366: 		;
3367: 
3368: 
3369: name:		ColId									{ $$ = $1; };
3370: 
3371: attr_name:	ColLabel								{ $$ = $1; };
3372: 
3373: /*
3374:  * The production for a qualified func_name has to exactly match the
3375:  * production for a qualified columnref, because we cannot tell which we
3376:  * are parsing until we see what comes after it ('(' or Sconst for a func_name,
3377:  * anything else for a columnref).  Therefore we allow 'indirection' which
3378:  * may contain subscripts, and reject that case in the C code.  (If we
3379:  * ever implement SQL99-like methods, such syntax may actually become legal!)
3380:  */
3381: func_name:	function_name_token
3382: 					{ $$ = list_make1(makeString($1)); }
3383: 			|
3384: 			ColId indirection
3385: 					{
3386: 						$$ = check_func_name(lcons(makeString($1), $2),
3387: 											 yyscanner);
3388: 					}
3389: 		;
3390: 
3391: 
3392: /*
3393:  * Constants
3394:  */
3395: AexprConst: Iconst
3396: 				{
3397: 					$$ = makeIntConst($1, @1);
3398: 				}
3399: 			| FCONST
3400: 				{
3401: 					$$ = makeFloatConst($1, @1);
3402: 				}
3403: 			| Sconst opt_indirection
3404: 				{
3405: 					if ($2)
3406: 					{
3407: 						PGAIndirection *n = makeNode(PGAIndirection);
3408: 						n->arg = makeStringConst($1, @1);
3409: 						n->indirection = check_indirection($2, yyscanner);
3410: 						$$ = (PGNode *) n;
3411: 					}
3412: 					else
3413: 						$$ = makeStringConst($1, @1);
3414: 				}
3415: 			| BCONST
3416: 				{
3417: 					$$ = makeBitStringConst($1, @1);
3418: 				}
3419: 			| XCONST
3420: 				{
3421: 					/* This is a bit constant per SQL99:
3422: 					 * Without Feature F511, "BIT data type",
3423: 					 * a <general literal> shall not be a
3424: 					 * <bit string literal> or a <hex string literal>.
3425: 					 */
3426: 					$$ = makeBitStringConst($1, @1);
3427: 				}
3428: 			| func_name Sconst
3429: 				{
3430: 					/* generic type 'literal' syntax */
3431: 					PGTypeName *t = makeTypeNameFromNameList($1);
3432: 					t->location = @1;
3433: 					$$ = makeStringConstCast($2, @2, t);
3434: 				}
3435: 			| func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst
3436: 				{
3437: 					/* generic syntax with a type modifier */
3438: 					PGTypeName *t = makeTypeNameFromNameList($1);
3439: 					PGListCell *lc;
3440: 
3441: 					/*
3442: 					 * We must use func_arg_list and opt_sort_clause in the
3443: 					 * production to avoid reduce/reduce conflicts, but we
3444: 					 * don't actually wish to allow PGNamedArgExpr in this
3445: 					 * context, ORDER BY, nor IGNORE NULLS.
3446: 					 */
3447: 					foreach(lc, $3)
3448: 					{
3449: 						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);
3450: 
3451: 						if (IsA(arg, PGNamedArgExpr))
3452: 							ereport(ERROR,
3453: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
3454: 									 errmsg("type modifier cannot have parameter name"),
3455: 									 parser_errposition(arg->location)));
3456: 					}
3457: 					if ($4 != NIL)
3458: 							ereport(ERROR,
3459: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
3460: 									 errmsg("type modifier cannot have ORDER BY"),
3461: 									 parser_errposition(@4)));
3462: 					if ($5 != false)
3463: 							ereport(ERROR,
3464: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
3465: 									 errmsg("type modifier cannot have IGNORE NULLS"),
3466: 									 parser_errposition(@5)));
3467: 
3468: 
3469: 					t->typmods = $3;
3470: 					t->location = @1;
3471: 					$$ = makeStringConstCast($7, @7, t);
3472: 				}
3473: 			| ConstTypename Sconst
3474: 				{
3475: 					$$ = makeStringConstCast($2, @2, $1);
3476: 				}
3477: 			| ConstInterval '(' a_expr ')' opt_interval
3478: 				{
3479: 					$$ = makeIntervalNode($3, @3, $5);
3480: 				}
3481: 			| ConstInterval Iconst opt_interval
3482: 				{
3483: 					$$ = makeIntervalNode($2, @2, $3);
3484: 				}
3485: 			| ConstInterval Sconst opt_interval
3486: 				{
3487: 					$$ = makeIntervalNode($2, @2, $3);
3488: 				}
3489: 			| TRUE_P
3490: 				{
3491: 					$$ = makeBoolAConst(true, @1);
3492: 				}
3493: 			| FALSE_P
3494: 				{
3495: 					$$ = makeBoolAConst(false, @1);
3496: 				}
3497: 			| NULL_P
3498: 				{
3499: 					$$ = makeNullAConst(@1);
3500: 				}
3501: 		;
3502: 
3503: Iconst:		ICONST									{ $$ = $1; };
3504: Sconst:		SCONST									{ $$ = $1; };
3505: 
3506: /* Role specifications */
3507: /*
3508:  * Name classification hierarchy.
3509:  *
3510:  * IDENT is the lexeme returned by the lexer for identifiers that match
3511:  * no known keyword.  In most cases, we can accept certain keywords as
3512:  * names, not only IDENTs.	We prefer to accept as many such keywords
3513:  * as possible to minimize the impact of "reserved words" on programmers.
3514:  * So, we divide names into several possible classes.  The classification
3515:  * is chosen in part to make keywords acceptable as names wherever possible.
3516:  */
3517: 
3518: /* Column identifier --- names that can be column, table, etc names.
3519:  */
3520: ColId:		IDENT									{ $$ = $1; }
3521: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3522: 			| col_name_keyword						{ $$ = pstrdup($1); }
3523: 		;
3524: 
3525: ColIdOrString:	ColId											{ $$ = $1; }
3526: 				| SCONST										{ $$ = $1; }
3527: 		;
3528: 
3529: 
3530: /* Type/function identifier --- names that can be type or function names.
3531:  */
3532: type_function_name:	IDENT							{ $$ = $1; }
3533: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3534: 			| type_func_name_keyword				{ $$ = pstrdup($1); }
3535: 		;
3536: 
3537: function_name_token:	IDENT						{ $$ = $1; }
3538: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3539: 			| func_name_keyword						{ $$ = pstrdup($1); }
3540: 		;
3541: 
3542: type_name_token:	IDENT						{ $$ = $1; }
3543: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3544: 			| type_name_keyword						{ $$ = pstrdup($1); }
3545: 		;
3546: 
3547: any_name:	ColId						{ $$ = list_make1(makeString($1)); }
3548: 			| ColId attrs				{ $$ = lcons(makeString($1), $2); }
3549: 		;
3550: 
3551: attrs:		'.' attr_name
3552: 					{ $$ = list_make1(makeString($2)); }
3553: 			| attrs '.' attr_name
3554: 					{ $$ = lappend($1, makeString($3)); }
3555: 		;
3556: 
3557: opt_name_list:
3558: 			'(' name_list ')'						{ $$ = $2; }
3559: 			| /*EMPTY*/								{ $$ = NIL; }
3560: 		;
3561: 
3562: param_name:	type_function_name
3563: 		;
3564: 
3565: /* Any not-fully-reserved word --- these names can be, eg, role names.
3566:  */
3567: /* Column label --- allowed labels in "AS" clauses.
3568:  * This presently includes *all* Postgres keywords.
3569:  */
3570: ColLabel:	IDENT									{ $$ = $1; }
3571: 			| other_keyword							{ $$ = pstrdup($1); }
3572: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3573: 			| reserved_keyword						{ $$ = pstrdup($1); }
3574: 		;
3575: 
3576: ColLabelOrString:	ColLabel						{ $$ = $1; }
3577: 					| SCONST						{ $$ = $1; }
3578: 		;
[end of third_party/libpg_query/grammar/statements/select.y]
[start of third_party/libpg_query/src_backend_parser_gram.cpp]
1: /* A Bison parser, made by GNU Bison 2.3.  */
2: 
3: /* Skeleton implementation for Bison's Yacc-like parsers in C
4: 
5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
6:    Free Software Foundation, Inc.
7: 
8:    This program is free software; you can redistribute it and/or modify
9:    it under the terms of the GNU General Public License as published by
10:    the Free Software Foundation; either version 2, or (at your option)
11:    any later version.
12: 
13:    This program is distributed in the hope that it will be useful,
14:    but WITHOUT ANY WARRANTY; without even the implied warranty of
15:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
16:    GNU General Public License for more details.
17: 
18:    You should have received a copy of the GNU General Public License
19:    along with this program; if not, write to the Free Software
20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,
21:    Boston, MA 02110-1301, USA.  */
22: 
23: /* As a special exception, you may create a larger work that contains
24:    part or all of the Bison parser skeleton and distribute that work
25:    under terms of your choice, so long as that work isn't itself a
26:    parser generator using the skeleton or a modified version thereof
27:    as a parser skeleton.  Alternatively, if you modify or redistribute
28:    the parser skeleton itself, you may (at your option) remove this
29:    special exception, which will cause the skeleton and the resulting
30:    Bison output files to be licensed under the GNU General Public
31:    License without this special exception.
32: 
33:    This special exception was added by the Free Software Foundation in
34:    version 2.2 of Bison.  */
35: 
36: /* C LALR(1) parser skeleton written by Richard Stallman, by
37:    simplifying the original so-called "semantic" parser.  */
38: 
39: /* All symbols defined below should begin with yy or YY, to avoid
40:    infringing on user name space.  This should be done even for local
41:    variables, as they might otherwise be expanded by user macros.
42:    There are some unavoidable exceptions within include files to
43:    define necessary library symbols; they are noted "INFRINGES ON
44:    USER NAME SPACE" below.  */
45: 
46: /* Identify Bison output.  */
47: #define YYBISON 1
48: 
49: /* Bison version.  */
50: #define YYBISON_VERSION "2.3"
51: 
52: /* Skeleton name.  */
53: #define YYSKELETON_NAME "yacc.c"
54: 
55: /* Pure parsers.  */
56: #define YYPURE 1
57: 
58: /* Using locations.  */
59: #define YYLSP_NEEDED 1
60: 
61: /* Substitute the variable and function names.  */
62: #define yyparse base_yyparse
63: #define yylex   base_yylex
64: #define yyerror base_yyerror
65: #define yylval  base_yylval
66: #define yychar  base_yychar
67: #define yydebug base_yydebug
68: #define yynerrs base_yynerrs
69: #define yylloc base_yylloc
70: 
71: /* Tokens.  */
72: #ifndef YYTOKENTYPE
73: # define YYTOKENTYPE
74:    /* Put the tokens into the symbol table, so that GDB and other debuggers
75:       know about them.  */
76:    enum yytokentype {
77:      IDENT = 258,
78:      FCONST = 259,
79:      SCONST = 260,
80:      BCONST = 261,
81:      XCONST = 262,
82:      Op = 263,
83:      ICONST = 264,
84:      PARAM = 265,
85:      TYPECAST = 266,
86:      DOT_DOT = 267,
87:      COLON_EQUALS = 268,
88:      EQUALS_GREATER = 269,
89:      LAMBDA_ARROW = 270,
90:      LESS_EQUALS = 271,
91:      GREATER_EQUALS = 272,
92:      NOT_EQUALS = 273,
93:      ABORT_P = 274,
94:      ABSOLUTE_P = 275,
95:      ACCESS = 276,
96:      ACTION = 277,
97:      ADD_P = 278,
98:      ADMIN = 279,
99:      AFTER = 280,
100:      AGGREGATE = 281,
101:      ALL = 282,
102:      ALSO = 283,
103:      ALTER = 284,
104:      ALWAYS = 285,
105:      ANALYSE = 286,
106:      ANALYZE = 287,
107:      AND = 288,
108:      ANY = 289,
109:      ARRAY = 290,
110:      AS = 291,
111:      ASC_P = 292,
112:      ASSERTION = 293,
113:      ASSIGNMENT = 294,
114:      ASYMMETRIC = 295,
115:      AT = 296,
116:      ATTACH = 297,
117:      ATTRIBUTE = 298,
118:      AUTHORIZATION = 299,
119:      BACKWARD = 300,
120:      BEFORE = 301,
121:      BEGIN_P = 302,
122:      BETWEEN = 303,
123:      BIGINT = 304,
124:      BINARY = 305,
125:      BIT = 306,
126:      BOOLEAN_P = 307,
127:      BOTH = 308,
128:      BY = 309,
129:      CACHE = 310,
130:      CALL_P = 311,
131:      CALLED = 312,
132:      CASCADE = 313,
133:      CASCADED = 314,
134:      CASE = 315,
135:      CAST = 316,
136:      CATALOG_P = 317,
137:      CHAIN = 318,
138:      CHAR_P = 319,
139:      CHARACTER = 320,
140:      CHARACTERISTICS = 321,
141:      CHECK_P = 322,
142:      CHECKPOINT = 323,
143:      CLASS = 324,
144:      CLOSE = 325,
145:      CLUSTER = 326,
146:      COALESCE = 327,
147:      COLLATE = 328,
148:      COLLATION = 329,
149:      COLUMN = 330,
150:      COLUMNS = 331,
151:      COMMENT = 332,
152:      COMMENTS = 333,
153:      COMMIT = 334,
154:      COMMITTED = 335,
155:      COMPRESSION = 336,
156:      CONCURRENTLY = 337,
157:      CONFIGURATION = 338,
158:      CONFLICT = 339,
159:      CONNECTION = 340,
160:      CONSTRAINT = 341,
161:      CONSTRAINTS = 342,
162:      CONTENT_P = 343,
163:      CONTINUE_P = 344,
164:      CONVERSION_P = 345,
165:      COPY = 346,
166:      COST = 347,
167:      CREATE_P = 348,
168:      CROSS = 349,
169:      CSV = 350,
170:      CUBE = 351,
171:      CURRENT_P = 352,
172:      CURRENT_CATALOG = 353,
173:      CURRENT_DATE = 354,
174:      CURRENT_ROLE = 355,
175:      CURRENT_SCHEMA = 356,
176:      CURRENT_TIME = 357,
177:      CURRENT_TIMESTAMP = 358,
178:      CURRENT_USER = 359,
179:      CURSOR = 360,
180:      CYCLE = 361,
181:      DATA_P = 362,
182:      DATABASE = 363,
183:      DAY_P = 364,
184:      DAYS_P = 365,
185:      DEALLOCATE = 366,
186:      DEC = 367,
187:      DECIMAL_P = 368,
188:      DECLARE = 369,
189:      DEFAULT = 370,
190:      DEFAULTS = 371,
191:      DEFERRABLE = 372,
192:      DEFERRED = 373,
193:      DEFINER = 374,
194:      DELETE_P = 375,
195:      DELIMITER = 376,
196:      DELIMITERS = 377,
197:      DEPENDS = 378,
198:      DESC_P = 379,
199:      DESCRIBE = 380,
200:      DETACH = 381,
201:      DICTIONARY = 382,
202:      DISABLE_P = 383,
203:      DISCARD = 384,
204:      DISTINCT = 385,
205:      DO = 386,
206:      DOCUMENT_P = 387,
207:      DOMAIN_P = 388,
208:      DOUBLE_P = 389,
209:      DROP = 390,
210:      EACH = 391,
211:      ELSE = 392,
212:      ENABLE_P = 393,
213:      ENCODING = 394,
214:      ENCRYPTED = 395,
215:      END_P = 396,
216:      ENUM_P = 397,
217:      ESCAPE = 398,
218:      EVENT = 399,
219:      EXCEPT = 400,
220:      EXCLUDE = 401,
221:      EXCLUDING = 402,
222:      EXCLUSIVE = 403,
223:      EXECUTE = 404,
224:      EXISTS = 405,
225:      EXPLAIN = 406,
226:      EXPORT_P = 407,
227:      EXPORT_STATE = 408,
228:      EXTENSION = 409,
229:      EXTERNAL = 410,
230:      EXTRACT = 411,
231:      FALSE_P = 412,
232:      FAMILY = 413,
233:      FETCH = 414,
234:      FILTER = 415,
235:      FIRST_P = 416,
236:      FLOAT_P = 417,
237:      FOLLOWING = 418,
238:      FOR = 419,
239:      FORCE = 420,
240:      FOREIGN = 421,
241:      FORWARD = 422,
242:      FREEZE = 423,
243:      FROM = 424,
244:      FULL = 425,
245:      FUNCTION = 426,
246:      FUNCTIONS = 427,
247:      GENERATED = 428,
248:      GLOB = 429,
249:      GLOBAL = 430,
250:      GRANT = 431,
251:      GRANTED = 432,
252:      GROUP_P = 433,
253:      GROUPING = 434,
254:      GROUPING_ID = 435,
255:      HANDLER = 436,
256:      HAVING = 437,
257:      HEADER_P = 438,
258:      HOLD = 439,
259:      HOUR_P = 440,
260:      HOURS_P = 441,
261:      IDENTITY_P = 442,
262:      IF_P = 443,
263:      IGNORE_P = 444,
264:      ILIKE = 445,
265:      IMMEDIATE = 446,
266:      IMMUTABLE = 447,
267:      IMPLICIT_P = 448,
268:      IMPORT_P = 449,
269:      IN_P = 450,
270:      INCLUDING = 451,
271:      INCREMENT = 452,
272:      INDEX = 453,
273:      INDEXES = 454,
274:      INHERIT = 455,
275:      INHERITS = 456,
276:      INITIALLY = 457,
277:      INLINE_P = 458,
278:      INNER_P = 459,
279:      INOUT = 460,
280:      INPUT_P = 461,
281:      INSENSITIVE = 462,
282:      INSERT = 463,
283:      INSTALL = 464,
284:      INSTEAD = 465,
285:      INT_P = 466,
286:      INTEGER = 467,
287:      INTERSECT = 468,
288:      INTERVAL = 469,
289:      INTO = 470,
290:      INVOKER = 471,
291:      IS = 472,
292:      ISNULL = 473,
293:      ISOLATION = 474,
294:      JOIN = 475,
295:      KEY = 476,
296:      LABEL = 477,
297:      LANGUAGE = 478,
298:      LARGE_P = 479,
299:      LAST_P = 480,
300:      LATERAL_P = 481,
301:      LEADING = 482,
302:      LEAKPROOF = 483,
303:      LEFT = 484,
304:      LEVEL = 485,
305:      LIKE = 486,
306:      LIMIT = 487,
307:      LISTEN = 488,
308:      LOAD = 489,
309:      LOCAL = 490,
310:      LOCALTIME = 491,
311:      LOCALTIMESTAMP = 492,
312:      LOCATION = 493,
313:      LOCK_P = 494,
314:      LOCKED = 495,
315:      LOGGED = 496,
316:      MACRO = 497,
317:      MAP = 498,
318:      MAPPING = 499,
319:      MATCH = 500,
320:      MATERIALIZED = 501,
321:      MAXVALUE = 502,
322:      METHOD = 503,
323:      MICROSECOND_P = 504,
324:      MICROSECONDS_P = 505,
325:      MILLISECOND_P = 506,
326:      MILLISECONDS_P = 507,
327:      MINUTE_P = 508,
328:      MINUTES_P = 509,
329:      MINVALUE = 510,
330:      MODE = 511,
331:      MONTH_P = 512,
332:      MONTHS_P = 513,
333:      MOVE = 514,
334:      NAME_P = 515,
335:      NAMES = 516,
336:      NATIONAL = 517,
337:      NATURAL = 518,
338:      NCHAR = 519,
339:      NEW = 520,
340:      NEXT = 521,
341:      NO = 522,
342:      NONE = 523,
343:      NOT = 524,
344:      NOTHING = 525,
345:      NOTIFY = 526,
346:      NOTNULL = 527,
347:      NOWAIT = 528,
348:      NULL_P = 529,
349:      NULLIF = 530,
350:      NULLS_P = 531,
351:      NUMERIC = 532,
352:      OBJECT_P = 533,
353:      OF = 534,
354:      OFF = 535,
355:      OFFSET = 536,
356:      OIDS = 537,
357:      OLD = 538,
358:      ON = 539,
359:      ONLY = 540,
360:      OPERATOR = 541,
361:      OPTION = 542,
362:      OPTIONS = 543,
363:      OR = 544,
364:      ORDER = 545,
365:      ORDINALITY = 546,
366:      OUT_P = 547,
367:      OUTER_P = 548,
368:      OVER = 549,
369:      OVERLAPS = 550,
370:      OVERLAY = 551,
371:      OVERRIDING = 552,
372:      OWNED = 553,
373:      OWNER = 554,
374:      PARALLEL = 555,
375:      PARSER = 556,
376:      PARTIAL = 557,
377:      PARTITION = 558,
378:      PASSING = 559,
379:      PASSWORD = 560,
380:      PERCENT = 561,
381:      PLACING = 562,
382:      PLANS = 563,
383:      POLICY = 564,
384:      POSITION = 565,
385:      PRAGMA_P = 566,
386:      PRECEDING = 567,
387:      PRECISION = 568,
388:      PREPARE = 569,
389:      PREPARED = 570,
390:      PRESERVE = 571,
391:      PRIMARY = 572,
392:      PRIOR = 573,
393:      PRIVILEGES = 574,
394:      PROCEDURAL = 575,
395:      PROCEDURE = 576,
396:      PROGRAM = 577,
397:      PUBLICATION = 578,
398:      QUALIFY = 579,
399:      QUOTE = 580,
400:      RANGE = 581,
401:      READ_P = 582,
402:      REAL = 583,
403:      REASSIGN = 584,
404:      RECHECK = 585,
405:      RECURSIVE = 586,
406:      REF = 587,
407:      REFERENCES = 588,
408:      REFERENCING = 589,
409:      REFRESH = 590,
410:      REINDEX = 591,
411:      RELATIVE_P = 592,
412:      RELEASE = 593,
413:      RENAME = 594,
414:      REPEATABLE = 595,
415:      REPLACE = 596,
416:      REPLICA = 597,
417:      RESET = 598,
418:      RESPECT_P = 599,
419:      RESTART = 600,
420:      RESTRICT = 601,
421:      RETURNING = 602,
422:      RETURNS = 603,
423:      REVOKE = 604,
424:      RIGHT = 605,
425:      ROLE = 606,
426:      ROLLBACK = 607,
427:      ROLLUP = 608,
428:      ROW = 609,
429:      ROWS = 610,
430:      RULE = 611,
431:      SAMPLE = 612,
432:      SAVEPOINT = 613,
433:      SCHEMA = 614,
434:      SCHEMAS = 615,
435:      SCROLL = 616,
436:      SEARCH = 617,
437:      SECOND_P = 618,
438:      SECONDS_P = 619,
439:      SECURITY = 620,
440:      SELECT = 621,
441:      SEQUENCE = 622,
442:      SEQUENCES = 623,
443:      SERIALIZABLE = 624,
444:      SERVER = 625,
445:      SESSION = 626,
446:      SESSION_USER = 627,
447:      SET = 628,
448:      SETOF = 629,
449:      SETS = 630,
450:      SHARE = 631,
451:      SHOW = 632,
452:      SIMILAR = 633,
453:      SIMPLE = 634,
454:      SKIP = 635,
455:      SMALLINT = 636,
456:      SNAPSHOT = 637,
457:      SOME = 638,
458:      SQL_P = 639,
459:      STABLE = 640,
460:      STANDALONE_P = 641,
461:      START = 642,
462:      STATEMENT = 643,
463:      STATISTICS = 644,
464:      STDIN = 645,
465:      STDOUT = 646,
466:      STORAGE = 647,
467:      STRICT_P = 648,
468:      STRIP_P = 649,
469:      STRUCT = 650,
470:      SUBSCRIPTION = 651,
471:      SUBSTRING = 652,
472:      SUMMARIZE = 653,
473:      SYMMETRIC = 654,
474:      SYSID = 655,
475:      SYSTEM_P = 656,
476:      TABLE = 657,
477:      TABLES = 658,
478:      TABLESAMPLE = 659,
479:      TABLESPACE = 660,
480:      TEMP = 661,
481:      TEMPLATE = 662,
482:      TEMPORARY = 663,
483:      TEXT_P = 664,
484:      THEN = 665,
485:      TIME = 666,
486:      TIMESTAMP = 667,
487:      TO = 668,
488:      TRAILING = 669,
489:      TRANSACTION = 670,
490:      TRANSFORM = 671,
491:      TREAT = 672,
492:      TRIGGER = 673,
493:      TRIM = 674,
494:      TRUE_P = 675,
495:      TRUNCATE = 676,
496:      TRUSTED = 677,
497:      TRY_CAST = 678,
498:      TYPE_P = 679,
499:      TYPES_P = 680,
500:      UNBOUNDED = 681,
501:      UNCOMMITTED = 682,
502:      UNENCRYPTED = 683,
503:      UNION = 684,
504:      UNIQUE = 685,
505:      UNKNOWN = 686,
506:      UNLISTEN = 687,
507:      UNLOGGED = 688,
508:      UNTIL = 689,
509:      UPDATE = 690,
510:      USER = 691,
511:      USING = 692,
512:      VACUUM = 693,
513:      VALID = 694,
514:      VALIDATE = 695,
515:      VALIDATOR = 696,
516:      VALUE_P = 697,
517:      VALUES = 698,
518:      VARCHAR = 699,
519:      VARIADIC = 700,
520:      VARYING = 701,
521:      VERBOSE = 702,
522:      VERSION_P = 703,
523:      VIEW = 704,
524:      VIEWS = 705,
525:      VOLATILE = 706,
526:      WHEN = 707,
527:      WHERE = 708,
528:      WHITESPACE_P = 709,
529:      WINDOW = 710,
530:      WITH = 711,
531:      WITHIN = 712,
532:      WITHOUT = 713,
533:      WORK = 714,
534:      WRAPPER = 715,
535:      WRITE_P = 716,
536:      XML_P = 717,
537:      XMLATTRIBUTES = 718,
538:      XMLCONCAT = 719,
539:      XMLELEMENT = 720,
540:      XMLEXISTS = 721,
541:      XMLFOREST = 722,
542:      XMLNAMESPACES = 723,
543:      XMLPARSE = 724,
544:      XMLPI = 725,
545:      XMLROOT = 726,
546:      XMLSERIALIZE = 727,
547:      XMLTABLE = 728,
548:      YEAR_P = 729,
549:      YEARS_P = 730,
550:      YES_P = 731,
551:      ZONE = 732,
552:      NOT_LA = 733,
553:      NULLS_LA = 734,
554:      WITH_LA = 735,
555:      POSTFIXOP = 736,
556:      UMINUS = 737
557:    };
558: #endif
559: /* Tokens.  */
560: #define IDENT 258
561: #define FCONST 259
562: #define SCONST 260
563: #define BCONST 261
564: #define XCONST 262
565: #define Op 263
566: #define ICONST 264
567: #define PARAM 265
568: #define TYPECAST 266
569: #define DOT_DOT 267
570: #define COLON_EQUALS 268
571: #define EQUALS_GREATER 269
572: #define LAMBDA_ARROW 270
573: #define LESS_EQUALS 271
574: #define GREATER_EQUALS 272
575: #define NOT_EQUALS 273
576: #define ABORT_P 274
577: #define ABSOLUTE_P 275
578: #define ACCESS 276
579: #define ACTION 277
580: #define ADD_P 278
581: #define ADMIN 279
582: #define AFTER 280
583: #define AGGREGATE 281
584: #define ALL 282
585: #define ALSO 283
586: #define ALTER 284
587: #define ALWAYS 285
588: #define ANALYSE 286
589: #define ANALYZE 287
590: #define AND 288
591: #define ANY 289
592: #define ARRAY 290
593: #define AS 291
594: #define ASC_P 292
595: #define ASSERTION 293
596: #define ASSIGNMENT 294
597: #define ASYMMETRIC 295
598: #define AT 296
599: #define ATTACH 297
600: #define ATTRIBUTE 298
601: #define AUTHORIZATION 299
602: #define BACKWARD 300
603: #define BEFORE 301
604: #define BEGIN_P 302
605: #define BETWEEN 303
606: #define BIGINT 304
607: #define BINARY 305
608: #define BIT 306
609: #define BOOLEAN_P 307
610: #define BOTH 308
611: #define BY 309
612: #define CACHE 310
613: #define CALL_P 311
614: #define CALLED 312
615: #define CASCADE 313
616: #define CASCADED 314
617: #define CASE 315
618: #define CAST 316
619: #define CATALOG_P 317
620: #define CHAIN 318
621: #define CHAR_P 319
622: #define CHARACTER 320
623: #define CHARACTERISTICS 321
624: #define CHECK_P 322
625: #define CHECKPOINT 323
626: #define CLASS 324
627: #define CLOSE 325
628: #define CLUSTER 326
629: #define COALESCE 327
630: #define COLLATE 328
631: #define COLLATION 329
632: #define COLUMN 330
633: #define COLUMNS 331
634: #define COMMENT 332
635: #define COMMENTS 333
636: #define COMMIT 334
637: #define COMMITTED 335
638: #define COMPRESSION 336
639: #define CONCURRENTLY 337
640: #define CONFIGURATION 338
641: #define CONFLICT 339
642: #define CONNECTION 340
643: #define CONSTRAINT 341
644: #define CONSTRAINTS 342
645: #define CONTENT_P 343
646: #define CONTINUE_P 344
647: #define CONVERSION_P 345
648: #define COPY 346
649: #define COST 347
650: #define CREATE_P 348
651: #define CROSS 349
652: #define CSV 350
653: #define CUBE 351
654: #define CURRENT_P 352
655: #define CURRENT_CATALOG 353
656: #define CURRENT_DATE 354
657: #define CURRENT_ROLE 355
658: #define CURRENT_SCHEMA 356
659: #define CURRENT_TIME 357
660: #define CURRENT_TIMESTAMP 358
661: #define CURRENT_USER 359
662: #define CURSOR 360
663: #define CYCLE 361
664: #define DATA_P 362
665: #define DATABASE 363
666: #define DAY_P 364
667: #define DAYS_P 365
668: #define DEALLOCATE 366
669: #define DEC 367
670: #define DECIMAL_P 368
671: #define DECLARE 369
672: #define DEFAULT 370
673: #define DEFAULTS 371
674: #define DEFERRABLE 372
675: #define DEFERRED 373
676: #define DEFINER 374
677: #define DELETE_P 375
678: #define DELIMITER 376
679: #define DELIMITERS 377
680: #define DEPENDS 378
681: #define DESC_P 379
682: #define DESCRIBE 380
683: #define DETACH 381
684: #define DICTIONARY 382
685: #define DISABLE_P 383
686: #define DISCARD 384
687: #define DISTINCT 385
688: #define DO 386
689: #define DOCUMENT_P 387
690: #define DOMAIN_P 388
691: #define DOUBLE_P 389
692: #define DROP 390
693: #define EACH 391
694: #define ELSE 392
695: #define ENABLE_P 393
696: #define ENCODING 394
697: #define ENCRYPTED 395
698: #define END_P 396
699: #define ENUM_P 397
700: #define ESCAPE 398
701: #define EVENT 399
702: #define EXCEPT 400
703: #define EXCLUDE 401
704: #define EXCLUDING 402
705: #define EXCLUSIVE 403
706: #define EXECUTE 404
707: #define EXISTS 405
708: #define EXPLAIN 406
709: #define EXPORT_P 407
710: #define EXPORT_STATE 408
711: #define EXTENSION 409
712: #define EXTERNAL 410
713: #define EXTRACT 411
714: #define FALSE_P 412
715: #define FAMILY 413
716: #define FETCH 414
717: #define FILTER 415
718: #define FIRST_P 416
719: #define FLOAT_P 417
720: #define FOLLOWING 418
721: #define FOR 419
722: #define FORCE 420
723: #define FOREIGN 421
724: #define FORWARD 422
725: #define FREEZE 423
726: #define FROM 424
727: #define FULL 425
728: #define FUNCTION 426
729: #define FUNCTIONS 427
730: #define GENERATED 428
731: #define GLOB 429
732: #define GLOBAL 430
733: #define GRANT 431
734: #define GRANTED 432
735: #define GROUP_P 433
736: #define GROUPING 434
737: #define GROUPING_ID 435
738: #define HANDLER 436
739: #define HAVING 437
740: #define HEADER_P 438
741: #define HOLD 439
742: #define HOUR_P 440
743: #define HOURS_P 441
744: #define IDENTITY_P 442
745: #define IF_P 443
746: #define IGNORE_P 444
747: #define ILIKE 445
748: #define IMMEDIATE 446
749: #define IMMUTABLE 447
750: #define IMPLICIT_P 448
751: #define IMPORT_P 449
752: #define IN_P 450
753: #define INCLUDING 451
754: #define INCREMENT 452
755: #define INDEX 453
756: #define INDEXES 454
757: #define INHERIT 455
758: #define INHERITS 456
759: #define INITIALLY 457
760: #define INLINE_P 458
761: #define INNER_P 459
762: #define INOUT 460
763: #define INPUT_P 461
764: #define INSENSITIVE 462
765: #define INSERT 463
766: #define INSTALL 464
767: #define INSTEAD 465
768: #define INT_P 466
769: #define INTEGER 467
770: #define INTERSECT 468
771: #define INTERVAL 469
772: #define INTO 470
773: #define INVOKER 471
774: #define IS 472
775: #define ISNULL 473
776: #define ISOLATION 474
777: #define JOIN 475
778: #define KEY 476
779: #define LABEL 477
780: #define LANGUAGE 478
781: #define LARGE_P 479
782: #define LAST_P 480
783: #define LATERAL_P 481
784: #define LEADING 482
785: #define LEAKPROOF 483
786: #define LEFT 484
787: #define LEVEL 485
788: #define LIKE 486
789: #define LIMIT 487
790: #define LISTEN 488
791: #define LOAD 489
792: #define LOCAL 490
793: #define LOCALTIME 491
794: #define LOCALTIMESTAMP 492
795: #define LOCATION 493
796: #define LOCK_P 494
797: #define LOCKED 495
798: #define LOGGED 496
799: #define MACRO 497
800: #define MAP 498
801: #define MAPPING 499
802: #define MATCH 500
803: #define MATERIALIZED 501
804: #define MAXVALUE 502
805: #define METHOD 503
806: #define MICROSECOND_P 504
807: #define MICROSECONDS_P 505
808: #define MILLISECOND_P 506
809: #define MILLISECONDS_P 507
810: #define MINUTE_P 508
811: #define MINUTES_P 509
812: #define MINVALUE 510
813: #define MODE 511
814: #define MONTH_P 512
815: #define MONTHS_P 513
816: #define MOVE 514
817: #define NAME_P 515
818: #define NAMES 516
819: #define NATIONAL 517
820: #define NATURAL 518
821: #define NCHAR 519
822: #define NEW 520
823: #define NEXT 521
824: #define NO 522
825: #define NONE 523
826: #define NOT 524
827: #define NOTHING 525
828: #define NOTIFY 526
829: #define NOTNULL 527
830: #define NOWAIT 528
831: #define NULL_P 529
832: #define NULLIF 530
833: #define NULLS_P 531
834: #define NUMERIC 532
835: #define OBJECT_P 533
836: #define OF 534
837: #define OFF 535
838: #define OFFSET 536
839: #define OIDS 537
840: #define OLD 538
841: #define ON 539
842: #define ONLY 540
843: #define OPERATOR 541
844: #define OPTION 542
845: #define OPTIONS 543
846: #define OR 544
847: #define ORDER 545
848: #define ORDINALITY 546
849: #define OUT_P 547
850: #define OUTER_P 548
851: #define OVER 549
852: #define OVERLAPS 550
853: #define OVERLAY 551
854: #define OVERRIDING 552
855: #define OWNED 553
856: #define OWNER 554
857: #define PARALLEL 555
858: #define PARSER 556
859: #define PARTIAL 557
860: #define PARTITION 558
861: #define PASSING 559
862: #define PASSWORD 560
863: #define PERCENT 561
864: #define PLACING 562
865: #define PLANS 563
866: #define POLICY 564
867: #define POSITION 565
868: #define PRAGMA_P 566
869: #define PRECEDING 567
870: #define PRECISION 568
871: #define PREPARE 569
872: #define PREPARED 570
873: #define PRESERVE 571
874: #define PRIMARY 572
875: #define PRIOR 573
876: #define PRIVILEGES 574
877: #define PROCEDURAL 575
878: #define PROCEDURE 576
879: #define PROGRAM 577
880: #define PUBLICATION 578
881: #define QUALIFY 579
882: #define QUOTE 580
883: #define RANGE 581
884: #define READ_P 582
885: #define REAL 583
886: #define REASSIGN 584
887: #define RECHECK 585
888: #define RECURSIVE 586
889: #define REF 587
890: #define REFERENCES 588
891: #define REFERENCING 589
892: #define REFRESH 590
893: #define REINDEX 591
894: #define RELATIVE_P 592
895: #define RELEASE 593
896: #define RENAME 594
897: #define REPEATABLE 595
898: #define REPLACE 596
899: #define REPLICA 597
900: #define RESET 598
901: #define RESPECT_P 599
902: #define RESTART 600
903: #define RESTRICT 601
904: #define RETURNING 602
905: #define RETURNS 603
906: #define REVOKE 604
907: #define RIGHT 605
908: #define ROLE 606
909: #define ROLLBACK 607
910: #define ROLLUP 608
911: #define ROW 609
912: #define ROWS 610
913: #define RULE 611
914: #define SAMPLE 612
915: #define SAVEPOINT 613
916: #define SCHEMA 614
917: #define SCHEMAS 615
918: #define SCROLL 616
919: #define SEARCH 617
920: #define SECOND_P 618
921: #define SECONDS_P 619
922: #define SECURITY 620
923: #define SELECT 621
924: #define SEQUENCE 622
925: #define SEQUENCES 623
926: #define SERIALIZABLE 624
927: #define SERVER 625
928: #define SESSION 626
929: #define SESSION_USER 627
930: #define SET 628
931: #define SETOF 629
932: #define SETS 630
933: #define SHARE 631
934: #define SHOW 632
935: #define SIMILAR 633
936: #define SIMPLE 634
937: #define SKIP 635
938: #define SMALLINT 636
939: #define SNAPSHOT 637
940: #define SOME 638
941: #define SQL_P 639
942: #define STABLE 640
943: #define STANDALONE_P 641
944: #define START 642
945: #define STATEMENT 643
946: #define STATISTICS 644
947: #define STDIN 645
948: #define STDOUT 646
949: #define STORAGE 647
950: #define STRICT_P 648
951: #define STRIP_P 649
952: #define STRUCT 650
953: #define SUBSCRIPTION 651
954: #define SUBSTRING 652
955: #define SUMMARIZE 653
956: #define SYMMETRIC 654
957: #define SYSID 655
958: #define SYSTEM_P 656
959: #define TABLE 657
960: #define TABLES 658
961: #define TABLESAMPLE 659
962: #define TABLESPACE 660
963: #define TEMP 661
964: #define TEMPLATE 662
965: #define TEMPORARY 663
966: #define TEXT_P 664
967: #define THEN 665
968: #define TIME 666
969: #define TIMESTAMP 667
970: #define TO 668
971: #define TRAILING 669
972: #define TRANSACTION 670
973: #define TRANSFORM 671
974: #define TREAT 672
975: #define TRIGGER 673
976: #define TRIM 674
977: #define TRUE_P 675
978: #define TRUNCATE 676
979: #define TRUSTED 677
980: #define TRY_CAST 678
981: #define TYPE_P 679
982: #define TYPES_P 680
983: #define UNBOUNDED 681
984: #define UNCOMMITTED 682
985: #define UNENCRYPTED 683
986: #define UNION 684
987: #define UNIQUE 685
988: #define UNKNOWN 686
989: #define UNLISTEN 687
990: #define UNLOGGED 688
991: #define UNTIL 689
992: #define UPDATE 690
993: #define USER 691
994: #define USING 692
995: #define VACUUM 693
996: #define VALID 694
997: #define VALIDATE 695
998: #define VALIDATOR 696
999: #define VALUE_P 697
1000: #define VALUES 698
1001: #define VARCHAR 699
1002: #define VARIADIC 700
1003: #define VARYING 701
1004: #define VERBOSE 702
1005: #define VERSION_P 703
1006: #define VIEW 704
1007: #define VIEWS 705
1008: #define VOLATILE 706
1009: #define WHEN 707
1010: #define WHERE 708
1011: #define WHITESPACE_P 709
1012: #define WINDOW 710
1013: #define WITH 711
1014: #define WITHIN 712
1015: #define WITHOUT 713
1016: #define WORK 714
1017: #define WRAPPER 715
1018: #define WRITE_P 716
1019: #define XML_P 717
1020: #define XMLATTRIBUTES 718
1021: #define XMLCONCAT 719
1022: #define XMLELEMENT 720
1023: #define XMLEXISTS 721
1024: #define XMLFOREST 722
1025: #define XMLNAMESPACES 723
1026: #define XMLPARSE 724
1027: #define XMLPI 725
1028: #define XMLROOT 726
1029: #define XMLSERIALIZE 727
1030: #define XMLTABLE 728
1031: #define YEAR_P 729
1032: #define YEARS_P 730
1033: #define YES_P 731
1034: #define ZONE 732
1035: #define NOT_LA 733
1036: #define NULLS_LA 734
1037: #define WITH_LA 735
1038: #define POSTFIXOP 736
1039: #define UMINUS 737
1040: 
1041: 
1042: 
1043: 
1044: /* Copy the first part of user declarations.  */
1045: #line 1 "third_party/libpg_query/grammar/grammar.y.tmp"
1046: 
1047: #line 1 "third_party/libpg_query/grammar/grammar.hpp"
1048: /*#define YYDEBUG 1*/
1049: /*-------------------------------------------------------------------------
1050:  *
1051:  * gram.y
1052:  *	  POSTGRESQL BISON rules/actions
1053:  *
1054:  * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
1055:  * Portions Copyright (c) 1994, Regents of the University of California
1056:  *
1057:  *
1058:  * IDENTIFICATION
1059:  *	  src/backend/parser/gram.y
1060:  *
1061:  * HISTORY
1062:  *	  AUTHOR			DATE			MAJOR EVENT
1063:  *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
1064:  *	  Andrew Yu			Oct, 1994		lispy code conversion
1065:  *
1066:  * NOTES
1067:  *	  CAPITALS are used to represent terminal symbols.
1068:  *	  non-capitals are used to represent non-terminals.
1069:  *
1070:  *	  In general, nothing in this file should initiate database accesses
1071:  *	  nor depend on changeable state (such as SET variables).  If you do
1072:  *	  database accesses, your code will fail when we have aborted the
1073:  *	  current transaction and are just parsing commands to find the next
1074:  *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
1075:  *	  will do the wrong thing in multi-query strings like this:
1076:  *			SET constraint_exclusion TO off; SELECT * FROM foo;
1077:  *	  because the entire string is parsed by gram.y before the SET gets
1078:  *	  executed.  Anything that depends on the database or changeable state
1079:  *	  should be handled during parse analysis so that it happens at the
1080:  *	  right time not the wrong time.
1081:  *
1082:  * WARNINGS
1083:  *	  If you use a list, make sure the datum is a node so that the printing
1084:  *	  routines work.
1085:  *
1086:  *	  Sometimes we assign constants to makeStrings. Make sure we don't free
1087:  *	  those.
1088:  *
1089:  *-------------------------------------------------------------------------
1090:  */
1091: #include "pg_functions.hpp"
1092: #include <string.h>
1093: 
1094: #include <ctype.h>
1095: #include <limits.h>
1096: 
1097: #include "nodes/makefuncs.hpp"
1098: #include "nodes/nodeFuncs.hpp"
1099: #include "parser/gramparse.hpp"
1100: #include "parser/parser.hpp"
1101: #include "utils/datetime.hpp"
1102: 
1103: namespace duckdb_libpgquery {
1104: #define DEFAULT_SCHEMA "main"
1105: 
1106: /*
1107:  * Location tracking support --- simpler than bison's default, since we only
1108:  * want to track the start position not the end position of each nonterminal.
1109:  */
1110: #define YYLLOC_DEFAULT(Current, Rhs, N) \
1111: 	do { \
1112: 		if ((N) > 0) \
1113: 			(Current) = (Rhs)[1]; \
1114: 		else \
1115: 			(Current) = (-1); \
1116: 	} while (0)
1117: 
1118: /*
1119:  * The above macro assigns -1 (unknown) as the parse location of any
1120:  * nonterminal that was reduced from an empty rule, or whose leftmost
1121:  * component was reduced from an empty rule.  This is problematic
1122:  * for nonterminals defined like
1123:  *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
1124:  * because we'll set -1 as the location during the first reduction and then
1125:  * copy it during each subsequent reduction, leaving us with -1 for the
1126:  * location even when the list is not empty.  To fix that, do this in the
1127:  * action for the nonempty rule(s):
1128:  *		if (@$ < 0) @$ = @2;
1129:  * (Although we have many nonterminals that follow this pattern, we only
1130:  * bother with fixing @$ like this when the nonterminal's parse location
1131:  * is actually referenced in some rule.)
1132:  *
1133:  * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
1134:  * locations until it's found one that's not -1.  Then we'd get a correct
1135:  * location for any nonterminal that isn't entirely empty.  But this way
1136:  * would add overhead to every rule reduction, and so far there's not been
1137:  * a compelling reason to pay that overhead.
1138:  */
1139: 
1140: /*
1141:  * Bison doesn't allocate anything that needs to live across parser calls,
1142:  * so we can easily have it use palloc instead of malloc.  This prevents
1143:  * memory leaks if we error out during parsing.  Note this only works with
1144:  * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
1145:  * if possible, so there's not really much problem anyhow, at least if
1146:  * you're building with gcc.
1147:  */
1148: #define YYMALLOC palloc
1149: #define YYFREE   pfree
1150: #define YYINITDEPTH 1000
1151: 
1152: /* yields an integer bitmask of these flags: */
1153: #define CAS_NOT_DEFERRABLE			0x01
1154: #define CAS_DEFERRABLE				0x02
1155: #define CAS_INITIALLY_IMMEDIATE		0x04
1156: #define CAS_INITIALLY_DEFERRED		0x08
1157: #define CAS_NOT_VALID				0x10
1158: #define CAS_NO_INHERIT				0x20
1159: 
1160: 
1161: #define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
1162: #define parser_errposition(pos)  scanner_errposition(pos, yyscanner)
1163: 
1164: static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
1165: 						 const char *msg);
1166: static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
1167: static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
1168: static PGNode *makeColumnRef(char *colname, PGList *indirection,
1169: 						   int location, core_yyscan_t yyscanner);
1170: static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
1171: static PGNode *makeStringConst(char *str, int location);
1172: static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
1173: static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
1174: static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
1175: static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
1176: static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
1177: static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
1178: static PGNode *makeIntConst(int val, int location);
1179: static PGNode *makeFloatConst(char *str, int location);
1180: static PGNode *makeBitStringConst(char *str, int location);
1181: static PGNode *makeNullAConst(int location);
1182: static PGNode *makeAConst(PGValue *v, int location);
1183: static PGNode *makeBoolAConst(bool state, int location);
1184: static PGNode *makeParamRef(int number, int location);
1185: static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
1186: static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
1187: static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
1188: static void insertSelectOptions(PGSelectStmt *stmt,
1189: 								PGList *sortClause, PGList *lockingClause,
1190: 								PGNode *limitOffset, PGNode *limitCount,
1191: 								PGWithClause *withClause,
1192: 								core_yyscan_t yyscanner);
1193: static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
1194: static PGNode *doNegate(PGNode *n, int location);
1195: static void doNegateFloat(PGValue *v);
1196: static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
1197: static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
1198: static PGNode *makeNotExpr(PGNode *expr, int location);
1199: static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
1200: 								  int location);
1201: static void SplitColQualList(PGList *qualList,
1202: 							 PGList **constraintList, PGCollateClause **collClause,
1203: 							 core_yyscan_t yyscanner);
1204: static void processCASbits(int cas_bits, int location, const char *constrType,
1205: 			   bool *deferrable, bool *initdeferred, bool *not_valid,
1206: 			   bool *no_inherit, core_yyscan_t yyscanner);
1207: static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
1208: static PGNode *makeLimitPercent(PGNode *limit_percent);
1209: 
1210: 
1211: 
1212: /* Enabling traces.  */
1213: #ifndef YYDEBUG
1214: # define YYDEBUG 0
1215: #endif
1216: 
1217: /* Enabling verbose error messages.  */
1218: #ifdef YYERROR_VERBOSE
1219: # undef YYERROR_VERBOSE
1220: # define YYERROR_VERBOSE 1
1221: #else
1222: # define YYERROR_VERBOSE 0
1223: #endif
1224: 
1225: /* Enabling the token table.  */
1226: #ifndef YYTOKEN_TABLE
1227: # define YYTOKEN_TABLE 0
1228: #endif
1229: 
1230: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
1231: typedef union YYSTYPE
1232: #line 14 "third_party/libpg_query/grammar/grammar.y"
1233: {
1234: 	core_YYSTYPE		core_yystype;
1235: 	/* these fields must match core_YYSTYPE: */
1236: 	int					ival;
1237: 	char				*str;
1238: 	const char			*keyword;
1239: 	const char          *conststr;
1240: 
1241: 	char				chr;
1242: 	bool				boolean;
1243: 	PGJoinType			jtype;
1244: 	PGDropBehavior		dbehavior;
1245: 	PGOnCommitAction		oncommit;
1246: 	PGOnCreateConflict		oncreateconflict;
1247: 	PGList				*list;
1248: 	PGNode				*node;
1249: 	PGValue				*value;
1250: 	PGObjectType			objtype;
1251: 	PGTypeName			*typnam;
1252: 	PGObjectWithArgs		*objwithargs;
1253: 	PGDefElem				*defelt;
1254: 	PGSortBy				*sortby;
1255: 	PGWindowDef			*windef;
1256: 	PGJoinExpr			*jexpr;
1257: 	PGIndexElem			*ielem;
1258: 	PGAlias				*alias;
1259: 	PGRangeVar			*range;
1260: 	PGIntoClause			*into;
1261: 	PGWithClause			*with;
1262: 	PGInferClause			*infer;
1263: 	PGOnConflictClause	*onconflict;
1264: 	PGAIndices			*aind;
1265: 	PGResTarget			*target;
1266: 	PGInsertStmt			*istmt;
1267: 	PGVariableSetStmt		*vsetstmt;
1268: 	PGOverridingKind       override;
1269: 	PGSortByDir            sortorder;
1270: 	PGSortByNulls          nullorder;
1271: 	PGLockClauseStrength lockstrength;
1272: 	PGLockWaitPolicy lockwaitpolicy;
1273: 	PGSubLinkType subquerytype;
1274: 	PGViewCheckOption viewcheckoption;
1275: }
1276: /* Line 193 of yacc.c.  */
1277: #line 1278 "third_party/libpg_query/grammar/grammar_out.cpp"
1278: 	YYSTYPE;
1279: # define yystype YYSTYPE /* obsolescent; will be withdrawn */
1280: # define YYSTYPE_IS_DECLARED 1
1281: # define YYSTYPE_IS_TRIVIAL 1
1282: #endif
1283: 
1284: #if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
1285: typedef struct YYLTYPE
1286: {
1287:   int first_line;
1288:   int first_column;
1289:   int last_line;
1290:   int last_column;
1291: } YYLTYPE;
1292: # define yyltype YYLTYPE /* obsolescent; will be withdrawn */
1293: # define YYLTYPE_IS_DECLARED 1
1294: # define YYLTYPE_IS_TRIVIAL 1
1295: #endif
1296: 
1297: 
1298: /* Copy the second part of user declarations.  */
1299: 
1300: 
1301: /* Line 216 of yacc.c.  */
1302: #line 1303 "third_party/libpg_query/grammar/grammar_out.cpp"
1303: 
1304: #ifdef short
1305: # undef short
1306: #endif
1307: 
1308: #ifdef YYTYPE_UINT8
1309: typedef YYTYPE_UINT8 yytype_uint8;
1310: #else
1311: typedef unsigned char yytype_uint8;
1312: #endif
1313: 
1314: #ifdef YYTYPE_INT8
1315: typedef YYTYPE_INT8 yytype_int8;
1316: #elif (defined __STDC__ || defined __C99__FUNC__ \
1317:      || defined __cplusplus || defined _MSC_VER)
1318: typedef signed char yytype_int8;
1319: #else
1320: typedef short int yytype_int8;
1321: #endif
1322: 
1323: #ifdef YYTYPE_UINT16
1324: typedef YYTYPE_UINT16 yytype_uint16;
1325: #else
1326: typedef unsigned short int yytype_uint16;
1327: #endif
1328: 
1329: #ifdef YYTYPE_INT16
1330: typedef YYTYPE_INT16 yytype_int16;
1331: #else
1332: typedef short int yytype_int16;
1333: #endif
1334: 
1335: #ifndef YYSIZE_T
1336: # ifdef __SIZE_TYPE__
1337: #  define YYSIZE_T __SIZE_TYPE__
1338: # elif defined size_t
1339: #  define YYSIZE_T size_t
1340: # elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
1341:      || defined __cplusplus || defined _MSC_VER)
1342: #  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
1343: #  define YYSIZE_T size_t
1344: # else
1345: #  define YYSIZE_T unsigned int
1346: # endif
1347: #endif
1348: 
1349: #define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
1350: 
1351: #ifndef YY_
1352: # if defined YYENABLE_NLS && YYENABLE_NLS
1353: #  if ENABLE_NLS
1354: #   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
1355: #   define YY_(msgid) dgettext ("bison-runtime", msgid)
1356: #  endif
1357: # endif
1358: # ifndef YY_
1359: #  define YY_(msgid) msgid
1360: # endif
1361: #endif
1362: 
1363: /* Suppress unused-variable warnings by "using" E.  */
1364: #if ! defined lint || defined __GNUC__
1365: # define YYUSE(e) ((void) (e))
1366: #else
1367: # define YYUSE(e) /* empty */
1368: #endif
1369: 
1370: /* Identity function, used to suppress warnings about constant conditions.  */
1371: #ifndef lint
1372: # define YYID(n) (n)
1373: #else
1374: #if (defined __STDC__ || defined __C99__FUNC__ \
1375:      || defined __cplusplus || defined _MSC_VER)
1376: static int
1377: YYID (int i)
1378: #else
1379: static int
1380: YYID (i)
1381:     int i;
1382: #endif
1383: {
1384:   return i;
1385: }
1386: #endif
1387: 
1388: #if ! defined yyoverflow || YYERROR_VERBOSE
1389: 
1390: /* The parser invokes alloca or malloc; define the necessary symbols.  */
1391: 
1392: # ifdef YYSTACK_USE_ALLOCA
1393: #  if YYSTACK_USE_ALLOCA
1394: #   ifdef __GNUC__
1395: #    define YYSTACK_ALLOC __builtin_alloca
1396: #   elif defined __BUILTIN_VA_ARG_INCR
1397: #    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
1398: #   elif defined _AIX
1399: #    define YYSTACK_ALLOC __alloca
1400: #   elif defined _MSC_VER
1401: #    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
1402: #    define alloca _alloca
1403: #   else
1404: #    define YYSTACK_ALLOC alloca
1405: #    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1406:      || defined __cplusplus || defined _MSC_VER)
1407: #     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
1408: #     ifndef _STDLIB_H
1409: #      define _STDLIB_H 1
1410: #     endif
1411: #    endif
1412: #   endif
1413: #  endif
1414: # endif
1415: 
1416: # ifdef YYSTACK_ALLOC
1417:    /* Pacify GCC's `empty if-body' warning.  */
1418: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
1419: #  ifndef YYSTACK_ALLOC_MAXIMUM
1420:     /* The OS might guarantee only one guard page at the bottom of the stack,
1421:        and a page size can be as small as 4096 bytes.  So we cannot safely
1422:        invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
1423:        to allow for a few compiler-allocated temporary stack slots.  */
1424: #   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
1425: #  endif
1426: # else
1427: #  define YYSTACK_ALLOC YYMALLOC
1428: #  define YYSTACK_FREE YYFREE
1429: #  ifndef YYSTACK_ALLOC_MAXIMUM
1430: #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
1431: #  endif
1432: #  if (defined __cplusplus && ! defined _STDLIB_H \
1433:        && ! ((defined YYMALLOC || defined malloc) \
1434: 	     && (defined YYFREE || defined free)))
1435: #   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
1436: #   ifndef _STDLIB_H
1437: #    define _STDLIB_H 1
1438: #   endif
1439: #  endif
1440: #  ifndef YYMALLOC
1441: #   define YYMALLOC malloc
1442: #   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1443:      || defined __cplusplus || defined _MSC_VER)
1444: void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
1445: #   endif
1446: #  endif
1447: #  ifndef YYFREE
1448: #   define YYFREE free
1449: #   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1450:      || defined __cplusplus || defined _MSC_VER)
1451: void free (void *); /* INFRINGES ON USER NAME SPACE */
1452: #   endif
1453: #  endif
1454: # endif
1455: #endif /* ! defined yyoverflow || YYERROR_VERBOSE */
1456: 
1457: 
1458: #if (! defined yyoverflow \
1459:      && (! defined __cplusplus \
1460: 	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
1461: 	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
1462: 
1463: /* A type that is properly aligned for any stack member.  */
1464: union yyalloc
1465: {
1466:   yytype_int16 yyss;
1467:   YYSTYPE yyvs;
1468:     YYLTYPE yyls;
1469: };
1470: 
1471: /* The size of the maximum gap between one aligned stack and the next.  */
1472: # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
1473: 
1474: /* The size of an array large to enough to hold all stacks, each with
1475:    N elements.  */
1476: # define YYSTACK_BYTES(N) \
1477:      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
1478:       + 2 * YYSTACK_GAP_MAXIMUM)
1479: 
1480: /* Copy COUNT objects from FROM to TO.  The source and destination do
1481:    not overlap.  */
1482: # ifndef YYCOPY
1483: #  if defined __GNUC__ && 1 < __GNUC__
1484: #   define YYCOPY(To, From, Count) \
1485:       __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
1486: #  else
1487: #   define YYCOPY(To, From, Count)		\
1488:       do					\
1489: 	{					\
1490: 	  YYSIZE_T yyi;				\
1491: 	  for (yyi = 0; yyi < (Count); yyi++)	\
1492: 	    (To)[yyi] = (From)[yyi];		\
1493: 	}					\
1494:       while (YYID (0))
1495: #  endif
1496: # endif
1497: 
1498: /* Relocate STACK from its old location to the new one.  The
1499:    local variables YYSIZE and YYSTACKSIZE give the old and new number of
1500:    elements in the stack, and YYPTR gives the new location of the
1501:    stack.  Advance YYPTR to a properly aligned location for the next
1502:    stack.  */
1503: # define YYSTACK_RELOCATE(Stack)					\
1504:     do									\
1505:       {									\
1506: 	YYSIZE_T yynewbytes;						\
1507: 	YYCOPY (&yyptr->Stack, Stack, yysize);				\
1508: 	Stack = &yyptr->Stack;						\
1509: 	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
1510: 	yyptr += yynewbytes / sizeof (*yyptr);				\
1511:       }									\
1512:     while (YYID (0))
1513: 
1514: #endif
1515: 
1516: /* YYFINAL -- State number of the termination state.  */
1517: #define YYFINAL  597
1518: /* YYLAST -- Last index in YYTABLE.  */
1519: #define YYLAST   54070
1520: 
1521: /* YYNTOKENS -- Number of terminals.  */
1522: #define YYNTOKENS  504
1523: /* YYNNTS -- Number of nonterminals.  */
1524: #define YYNNTS  385
1525: /* YYNRULES -- Number of rules.  */
1526: #define YYNRULES  1811
1527: /* YYNRULES -- Number of states.  */
1528: #define YYNSTATES  2994
1529: 
1530: /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
1531: #define YYUNDEFTOK  2
1532: #define YYMAXUTOK   737
1533: 
1534: #define YYTRANSLATE(YYX)						\
1535:   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
1536: 
1537: /* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
1538: static const yytype_uint16 yytranslate[] =
1539: {
1540:        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1541:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1542:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1543:        2,     2,     2,     2,     2,   501,     2,   489,     2,     2,
1544:      494,   495,   487,   485,   498,   486,   496,   488,     2,     2,
1545:        2,     2,     2,     2,     2,     2,     2,     2,   503,   497,
1546:      481,   483,   482,   502,     2,     2,     2,     2,     2,     2,
1547:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1548:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1549:        2,   492,     2,   493,   490,     2,     2,     2,     2,     2,
1550:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1551:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1552:        2,     2,     2,   499,     2,   500,     2,     2,     2,     2,
1553:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1554:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1555:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1556:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1557:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1558:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1559:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1560:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1561:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1562:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1563:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1564:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1565:        2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
1566:        5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
1567:       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
1568:       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
1569:       35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
1570:       45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
1571:       55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
1572:       65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
1573:       75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
1574:       85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
1575:       95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
1576:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
1577:      115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
1578:      125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
1579:      135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
1580:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
1581:      155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
1582:      165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
1583:      175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
1584:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
1585:      195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
1586:      205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
1587:      215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
1588:      225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
1589:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
1590:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
1591:      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
1592:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
1593:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
1594:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
1595:      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
1596:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
1597:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
1598:      325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
1599:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
1600:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
1601:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
1602:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
1603:      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
1604:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
1605:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
1606:      405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
1607:      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
1608:      425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
1609:      435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
1610:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
1611:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
1612:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
1613:      475,   476,   477,   478,   479,   480,   484,   491
1614: };
1615: 
1616: #if YYDEBUG
1617: /* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
1618:    YYRHS.  */
1619: static const yytype_uint16 yyprhs[] =
1620: {
1621:        0,     0,     3,     5,     9,    11,    13,    15,    17,    19,
1622:       21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
1623:       41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
1624:       61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
1625:       80,    85,    92,    97,   104,   109,   116,   121,   128,   130,
1626:      133,   137,   140,   142,   146,   149,   153,   155,   159,   162,
1627:      168,   172,   179,   184,   191,   198,   205,   211,   217,   224,
1628:      234,   239,   245,   253,   260,   265,   274,   279,   282,   287,
1629:      291,   298,   303,   306,   309,   312,   315,   317,   320,   321,
1630:      323,   326,   329,   332,   334,   338,   343,   346,   348,   349,
1631:      352,   356,   359,   363,   372,   374,   375,   377,   381,   388,
1632:      395,   404,   411,   420,   427,   436,   443,   452,   461,   472,
1633:      481,   492,   494,   495,   503,   505,   510,   515,   523,   526,
1634:      528,   532,   537,   541,   542,   544,   545,   548,   552,   558,
1635:      567,   573,   574,   580,   586,   594,   597,   598,   600,   602,
1636:      604,   608,   611,   612,   614,   615,   617,   621,   623,   627,
1637:      629,   633,   636,   639,   644,   650,   656,   665,   667,   668,
1638:      672,   682,   695,   699,   700,   705,   712,   714,   717,   719,
1639:      721,   722,   724,   727,   730,   732,   735,   738,   740,   743,
1640:      747,   750,   753,   756,   759,   763,   767,   771,   773,   777,
1641:      779,   780,   782,   785,   788,   791,   794,   797,   800,   803,
1642:      806,   808,   810,   811,   821,   834,   846,   847,   850,   852,
1643:      854,   856,   858,   860,   862,   866,   867,   869,   872,   874,
1644:      876,   879,   882,   886,   888,   890,   893,   896,   898,   901,
1645:      905,   911,   915,   918,   924,   930,   933,   937,   939,   941,
1646:      944,   947,   948,   953,   954,   958,   963,   968,   969,   973,
1647:      976,   977,   981,   983,   985,   987,   989,   991,   993,   995,
1648:      997,   999,  1001,  1005,  1009,  1011,  1014,  1017,  1020,  1023,
1649:     1026,  1029,  1030,  1034,  1038,  1042,  1043,  1045,  1048,  1050,
1650:     1053,  1056,  1059,  1062,  1067,  1069,  1073,  1075,  1079,  1081,
1651:     1083,  1085,  1087,  1091,  1093,  1096,  1097,  1099,  1100,  1102,
1652:     1106,  1107,  1110,  1111,  1115,  1119,  1121,  1127,  1131,  1133,
1653:     1137,  1139,  1144,  1150,  1156,  1163,  1167,  1175,  1180,  1192,
1654:     1194,  1198,  1201,  1204,  1207,  1208,  1212,  1214,  1216,  1219,
1655:     1222,  1225,  1228,  1230,  1231,  1233,  1236,  1243,  1248,  1255,
1656:     1260,  1267,  1276,  1281,  1288,  1290,  1292,  1294,  1296,  1298,
1657:     1301,  1303,  1306,  1308,  1310,  1312,  1316,  1320,  1324,  1328,
1658:     1331,  1334,  1336,  1340,  1342,  1344,  1346,  1348,  1352,  1354,
1659:     1356,  1357,  1359,  1361,  1363,  1365,  1369,  1376,  1378,  1380,
1660:     1383,  1387,  1396,  1408,  1418,  1420,  1422,  1426,  1427,  1429,
1661:     1433,  1435,  1436,  1438,  1439,  1441,  1442,  1444,  1448,  1450,
1662:     1452,  1454,  1458,  1459,  1462,  1465,  1466,  1469,  1470,  1472,
1663:     1473,  1475,  1477,  1479,  1483,  1487,  1489,  1491,  1495,  1499,
1664:     1503,  1507,  1512,  1516,  1519,  1521,  1523,  1525,  1527,  1529,
1665:     1533,  1535,  1537,  1541,  1545,  1547,  1550,  1555,  1560,  1563,
1666:     1567,  1573,  1579,  1581,  1583,  1595,  1607,  1609,  1612,  1617,
1667:     1622,  1627,  1630,  1633,  1637,  1639,  1643,  1650,  1653,  1654,
1668:     1658,  1662,  1667,  1672,  1677,  1682,  1686,  1689,  1691,  1693,
1669:     1694,  1696,  1698,  1699,  1701,  1707,  1709,  1710,  1713,  1716,
1670:     1717,  1719,  1720,  1724,  1730,  1736,  1738,  1742,  1747,  1751,
1671:     1753,  1755,  1756,  1759,  1762,  1763,  1766,  1769,  1771,  1773,
1672:     1775,  1776,  1779,  1784,  1790,  1795,  1798,  1802,  1805,  1808,
1673:     1811,  1814,  1816,  1819,  1823,  1824,  1826,  1827,  1833,  1835,
1674:     1840,  1847,  1850,  1852,  1853,  1858,  1859,  1861,  1863,  1866,
1675:     1869,  1872,  1874,  1876,  1879,  1882,  1884,  1886,  1888,  1890,
1676:     1892,  1894,  1898,  1902,  1906,  1907,  1909,  1913,  1915,  1917,
1677:     1919,  1921,  1923,  1926,  1931,  1936,  1942,  1944,  1946,  1949,
1678:     1950,  1953,  1954,  1956,  1960,  1962,  1963,  1965,  1968,  1972,
1679:     1975,  1980,  1983,  1987,  1990,  1991,  1993,  1996,  1997,  2002,
1680:     2008,  2011,  2012,  2014,  2018,  2022,  2026,  2030,  2034,  2038,
1681:     2040,  2045,  2049,  2054,  2060,  2065,  2071,  2076,  2082,  2085,
1682:     2090,  2092,  2094,  2095,  2097,  2102,  2108,  2113,  2114,  2117,
1683:     2120,  2123,  2125,  2127,  2128,  2133,  2136,  2138,  2141,  2144,
1684:     2149,  2152,  2159,  2162,  2164,  2168,  2173,  2174,  2177,  2178,
1685:     2181,  2182,  2184,  2188,  2192,  2195,  2196,  2199,  2204,  2206,
1686:     2208,  2211,  2215,  2221,  2228,  2231,  2235,  2241,  2247,  2251,
1687:     2256,  2257,  2259,  2261,  2263,  2265,  2267,  2270,  2275,  2277,
1688:     2279,  2281,  2283,  2286,  2290,  2291,  2293,  2295,  2297,  2299,
1689:     2301,  2304,  2307,  2310,  2313,  2316,  2318,  2322,  2323,  2325,
1690:     2327,  2329,  2331,  2337,  2340,  2342,  2344,  2346,  2348,  2353,
1691:     2355,  2358,  2361,  2363,  2367,  2371,  2374,  2376,  2377,  2383,
1692:     2386,  2392,  2395,  2397,  2401,  2405,  2406,  2408,  2410,  2412,
1693:     2414,  2416,  2418,  2420,  2422,  2424,  2426,  2428,  2430,  2432,
1694:     2434,  2436,  2438,  2440,  2442,  2444,  2446,  2448,  2450,  2452,
1695:     2454,  2458,  2462,  2466,  2470,  2474,  2478,  2482,  2483,  2485,
1696:     2489,  2493,  2499,  2502,  2505,  2509,  2513,  2517,  2521,  2525,
1697:     2529,  2533,  2537,  2541,  2545,  2549,  2553,  2557,  2560,  2563,
1698:     2567,  2571,  2574,  2577,  2581,  2585,  2591,  2596,  2603,  2607,
1699:     2613,  2618,  2625,  2630,  2637,  2643,  2651,  2655,  2658,  2663,
1700:     2667,  2670,  2672,  2676,  2680,  2684,  2688,  2692,  2696,  2701,
1701:     2705,  2710,  2714,  2719,  2725,  2732,  2739,  2747,  2754,  2762,
1702:     2769,  2777,  2781,  2786,  2791,  2798,  2800,  2805,  2807,  2811,
1703:     2814,  2817,  2821,  2825,  2829,  2833,  2837,  2841,  2845,  2849,
1704:     2853,  2857,  2861,  2865,  2869,  2872,  2875,  2881,  2888,  2895,
1705:     2903,  2905,  2907,  2910,  2913,  2916,  2921,  2923,  2926,  2928,
1706:     2931,  2934,  2939,  2943,  2950,  2958,  2968,  2976,  2984,  2989,
1707:     2995,  2997,  2999,  3001,  3007,  3009,  3011,  3016,  3018,  3023,
1708:     3025,  3030,  3032,  3037,  3039,  3041,  3043,  3045,  3047,  3049,
1709:     3056,  3063,  3068,  3073,  3078,  3083,  3090,  3096,  3102,  3108,
1710:     3113,  3120,  3125,  3131,  3132,  3138,  3139,  3141,  3142,  3145,
1711:     3146,  3148,  3152,  3156,  3159,  3162,  3163,  3170,  3172,  3173,
1712:     3177,  3178,  3181,  3184,  3185,  3187,  3192,  3195,  3198,  3201,
1713:     3204,  3207,  3212,  3216,  3218,  3224,  3228,  3230,  3234,  3236,
1714:     3238,  3240,  3242,  3244,  3246,  3248,  3250,  3252,  3254,  3256,
1715:     3258,  3260,  3262,  3264,  3266,  3268,  3270,  3275,  3277,  3282,
1716:     3284,  3289,  3291,  3294,  3296,  3299,  3301,  3304,  3306,  3310,
1717:     3312,  3316,  3318,  3319,  3321,  3325,  3327,  3331,  3335,  3337,
1718:     3341,  3345,  3346,  3348,  3350,  3352,  3354,  3356,  3358,  3360,
1719:     3362,  3364,  3366,  3371,  3375,  3378,  3382,  3383,  3387,  3391,
1720:     3394,  3397,  3399,  3400,  3403,  3406,  3410,  3413,  3415,  3417,
1721:     3421,  3427,  3429,  3432,  3437,  3440,  3441,  3443,  3444,  3446,
1722:     3449,  3452,  3456,  3462,  3464,  3465,  3467,  3470,  3471,  3474,
1723:     3476,  3477,  3479,  3480,  3482,  3486,  3490,  3493,  3495,  3499,
1724:     3505,  3510,  3513,  3515,  3516,  3520,  3522,  3526,  3531,  3534,
1725:     3535,  3537,  3541,  3543,  3546,  3548,  3552,  3554,  3556,  3558,
1726:     3561,  3563,  3565,  3568,  3570,  3572,  3575,  3583,  3586,  3592,
1727:     3596,  3600,  3602,  3604,  3606,  3608,  3610,  3612,  3614,  3616,
1728:     3618,  3620,  3622,  3624,  3626,  3628,  3630,  3632,  3634,  3636,
1729:     3638,  3640,  3643,  3646,  3650,  3654,  3655,  3657,  3659,  3661,
1730:     3663,  3665,  3667,  3669,  3675,  3679,  3680,  3682,  3684,  3686,
1731:     3688,  3693,  3701,  3704,  3705,  3707,  3709,  3711,  3713,  3727,
1732:     3744,  3746,  3749,  3750,  3752,  3753,  3755,  3756,  3759,  3760,
1733:     3762,  3763,  3770,  3779,  3786,  3795,  3802,  3811,  3814,  3816,
1734:     3821,  3825,  3828,  3833,  3837,  3843,  3845,  3846,  3848,  3850,
1735:     3851,  3853,  3855,  3857,  3859,  3861,  3863,  3865,  3867,  3869,
1736:     3871,  3873,  3877,  3879,  3881,  3883,  3885,  3887,  3889,  3892,
1737:     3894,  3896,  3899,  3903,  3907,  3911,  3913,  3917,  3921,  3924,
1738:     3928,  3932,  3936,  3940,  3942,  3944,  3946,  3948,  3952,  3958,
1739:     3960,  3962,  3964,  3966,  3970,  3973,  3976,  3980,  3982,  3984,
1740:     3989,  3995,  4001,  4006,  4013,  4015,  4017,  4019,  4021,  4023,
1741:     4025,  4026,  4028,  4032,  4034,  4035,  4043,  4045,  4048,  4052,
1742:     4055,  4056,  4059,  4060,  4063,  4068,  4071,  4073,  4075,  4077,
1743:     4080,  4084,  4087,  4090,  4093,  4096,  4100,  4105,  4108,  4110,
1744:     4112,  4114,  4118,  4121,  4131,  4143,  4156,  4171,  4175,  4180,
1745:     4185,  4186,  4194,  4205,  4208,  4212,  4213,  4218,  4220,  4222,
1746:     4224,  4226,  4228,  4230,  4232,  4234,  4236,  4238,  4240,  4242,
1747:     4244,  4246,  4248,  4250,  4252,  4254,  4256,  4258,  4260,  4262,
1748:     4264,  4266,  4268,  4270,  4272,  4274,  4276,  4278,  4280,  4282,
1749:     4284,  4286,  4288,  4290,  4292,  4294,  4296,  4298,  4300,  4302,
1750:     4304,  4306,  4308,  4310,  4312,  4314,  4316,  4318,  4320,  4322,
1751:     4324,  4326,  4328,  4330,  4332,  4334,  4336,  4338,  4340,  4342,
1752:     4344,  4346,  4348,  4350,  4352,  4354,  4356,  4358,  4360,  4362,
1753:     4364,  4366,  4368,  4370,  4372,  4374,  4376,  4378,  4380,  4382,
1754:     4384,  4386,  4388,  4390,  4392,  4394,  4396,  4398,  4400,  4402,
1755:     4404,  4406,  4408,  4410,  4412,  4414,  4416,  4418,  4420,  4422,
1756:     4424,  4426,  4428,  4430,  4432,  4434,  4436,  4438,  4440,  4442,
1757:     4444,  4446,  4448,  4450,  4452,  4454,  4456,  4458,  4460,  4462,
1758:     4464,  4466,  4468,  4470,  4472,  4474,  4476,  4478,  4480,  4482,
1759:     4484,  4486,  4488,  4490,  4492,  4494,  4496,  4498,  4500,  4502,
1760:     4504,  4506,  4508,  4510,  4512,  4514,  4516,  4518,  4520,  4522,
1761:     4524,  4526,  4528,  4530,  4532,  4534,  4536,  4538,  4540,  4542,
1762:     4544,  4546,  4548,  4550,  4552,  4554,  4556,  4558,  4560,  4562,
1763:     4564,  4566,  4568,  4570,  4572,  4574,  4576,  4578,  4580,  4582,
1764:     4584,  4586,  4588,  4590,  4592,  4594,  4596,  4598,  4600,  4602,
1765:     4604,  4606,  4608,  4610,  4612,  4614,  4616,  4618,  4620,  4622,
1766:     4624,  4626,  4628,  4630,  4632,  4634,  4636,  4638,  4640,  4642,
1767:     4644,  4646,  4648,  4650,  4652,  4654,  4656,  4658,  4660,  4662,
1768:     4664,  4666,  4668,  4670,  4672,  4674,  4676,  4678,  4680,  4682,
1769:     4684,  4686,  4688,  4690,  4692,  4694,  4696,  4698,  4700,  4702,
1770:     4704,  4706,  4708,  4710,  4712,  4714,  4716,  4718,  4720,  4722,
1771:     4724,  4726,  4728,  4730,  4732,  4734,  4736,  4738,  4740,  4742,
1772:     4744,  4746,  4748,  4750,  4752,  4754,  4756,  4758,  4760,  4762,
1773:     4764,  4766,  4768,  4770,  4772,  4774,  4776,  4778,  4780,  4782,
1774:     4784,  4786,  4788,  4790,  4792,  4794,  4796,  4798,  4800,  4802,
1775:     4804,  4806,  4808,  4810,  4812,  4814,  4816,  4818,  4820,  4822,
1776:     4824,  4826,  4828,  4830,  4832,  4834,  4836,  4838,  4840,  4842,
1777:     4844,  4846,  4848,  4850,  4852,  4854,  4856,  4858,  4860,  4862,
1778:     4864,  4866,  4868,  4870,  4872,  4874,  4876,  4878,  4880,  4882,
1779:     4884,  4886,  4888,  4890,  4892,  4894,  4896,  4898,  4900,  4902,
1780:     4904,  4906,  4908,  4910,  4912,  4914,  4916,  4918,  4920,  4922,
1781:     4924,  4926,  4928,  4930,  4932,  4934,  4936,  4938,  4940,  4942,
1782:     4944,  4946,  4948,  4950,  4952,  4954,  4956,  4958,  4960,  4962,
1783:     4964,  4966,  4968,  4970,  4972,  4974,  4976,  4978,  4980,  4982,
1784:     4984,  4986,  4988,  4990,  4992,  4994,  4996,  4998,  5000,  5002,
1785:     5004,  5006,  5008,  5010,  5012,  5014,  5016,  5018,  5020,  5022,
1786:     5024,  5026,  5028,  5030,  5032,  5034,  5036,  5038,  5040,  5042,
1787:     5044,  5046,  5048,  5050,  5052,  5054,  5056,  5058,  5060,  5062,
1788:     5064,  5066,  5068,  5070,  5072,  5074,  5076,  5078,  5080,  5082,
1789:     5084,  5086,  5088,  5090,  5092,  5094,  5096,  5098,  5100,  5102,
1790:     5104,  5106,  5108,  5110,  5112,  5114,  5116,  5118,  5120,  5122,
1791:     5124,  5126,  5128,  5130,  5132,  5134,  5136,  5138,  5140,  5142,
1792:     5144,  5146,  5148,  5150,  5152,  5154,  5156,  5158,  5160,  5162,
1793:     5164,  5166,  5168,  5170,  5172,  5174,  5176,  5178,  5180,  5182,
1794:     5184,  5186,  5188,  5190,  5192,  5194,  5196,  5198,  5200,  5202,
1795:     5204,  5206,  5208,  5210,  5212,  5214,  5216,  5218,  5220,  5222,
1796:     5224,  5226,  5228,  5230,  5232,  5234,  5236,  5238,  5240,  5242,
1797:     5244,  5246,  5248,  5250,  5252,  5254,  5256,  5258,  5260,  5262,
1798:     5264,  5266,  5268,  5270,  5272,  5274,  5276,  5278,  5280,  5282,
1799:     5284,  5286,  5288,  5290,  5292,  5294,  5296,  5298,  5300,  5302,
1800:     5304,  5306,  5308,  5310,  5312,  5314,  5316,  5318,  5320,  5322,
1801:     5324,  5326,  5328,  5330,  5332,  5334,  5336,  5338,  5340,  5342,
1802:     5344,  5346
1803: };
1804: 
1805: /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
1806: static const yytype_int16 yyrhs[] =
1807: {
1808:      505,     0,    -1,   506,    -1,   506,   497,   507,    -1,   507,
1809:       -1,   837,    -1,   548,    -1,   508,    -1,   869,    -1,   876,
1810:       -1,   838,    -1,   614,    -1,   879,    -1,   520,    -1,   610,
1811:       -1,   827,    -1,   544,    -1,   557,    -1,   519,    -1,   865,
1812:       -1,   603,    -1,   546,    -1,   841,    -1,   839,    -1,   840,
1813:       -1,   830,    -1,   525,    -1,   858,    -1,   543,    -1,   824,
1814:       -1,   523,    -1,   631,    -1,   555,    -1,   613,    -1,   860,
1815:       -1,   870,    -1,   852,    -1,   873,    -1,   877,    -1,    -1,
1816:       29,   402,   697,   516,    -1,    29,   402,   188,   150,   697,
1817:      516,    -1,    29,   198,   805,   516,    -1,    29,   198,   188,
1818:      150,   805,   516,    -1,    29,   367,   805,   516,    -1,    29,
1819:      367,   188,   150,   805,   516,    -1,    29,   449,   805,   516,
1820:       -1,    29,   449,   188,   150,   805,   516,    -1,   511,    -1,
1821:      509,   511,    -1,   373,   115,   739,    -1,   135,   115,    -1,
1822:      345,    -1,   345,   550,   551,    -1,   373,   552,    -1,   373,
1823:      173,   602,    -1,   515,    -1,   512,   498,   515,    -1,    23,
1824:      582,    -1,    23,   188,   269,   150,   582,    -1,    23,    75,
1825:      582,    -1,    23,    75,   188,   269,   150,   582,    -1,    29,
1826:      524,   813,   510,    -1,    29,   524,   813,   135,   269,   274,
1827:       -1,    29,   524,   813,   373,   269,   274,    -1,    29,   524,
1828:      813,   373,   389,   554,    -1,    29,   524,   813,   373,   570,
1829:       -1,    29,   524,   813,   343,   570,    -1,    29,   524,   813,
1830:      373,   392,   813,    -1,    29,   524,   813,    23,   173,   602,
1831:       36,   187,   560,    -1,    29,   524,   813,   509,    -1,    29,
1832:      524,   813,   135,   187,    -1,    29,   524,   813,   135,   187,
1833:      188,   150,    -1,   135,   524,   188,   150,   813,   607,    -1,
1834:      135,   524,   813,   607,    -1,    29,   524,   813,   518,   424,
1835:      709,   706,   514,    -1,    29,   524,   813,   517,    -1,    23,
1836:      572,    -1,    29,    86,   807,   558,    -1,   440,    86,   807,
1837:       -1,   135,    86,   188,   150,   807,   607,    -1,   135,    86,
1838:      807,   607,    -1,   373,   241,    -1,   373,   433,    -1,   373,
1839:      570,    -1,   343,   570,    -1,   517,    -1,   437,   739,    -1,
1840:       -1,   565,    -1,   373,   565,    -1,    23,   565,    -1,   135,
1841:      580,    -1,   513,    -1,   516,   498,   513,    -1,   288,   494,
1842:      512,   495,    -1,   373,   107,    -1,   373,    -1,    -1,   111,
1843:      807,    -1,   111,   314,   807,    -1,   111,    27,    -1,   111,
1844:      314,    27,    -1,    93,   424,   818,    36,   142,   494,   521,
1845:      495,    -1,   522,    -1,    -1,   812,    -1,   522,   498,   812,
1846:       -1,    29,   359,   807,   339,   413,   807,    -1,    29,   402,
1847:      697,   339,   413,   807,    -1,    29,   402,   188,   150,   697,
1848:      339,   413,   807,    -1,    29,   367,   805,   339,   413,   807,
1849:       -1,    29,   367,   188,   150,   805,   339,   413,   807,    -1,
1850:       29,   449,   805,   339,   413,   807,    -1,    29,   449,   188,
1851:      150,   805,   339,   413,   807,    -1,    29,   198,   805,   339,
1852:      413,   807,    -1,    29,   198,   188,   150,   805,   339,   413,
1853:      807,    -1,    29,   402,   697,   339,   524,   807,   413,   807,
1854:       -1,    29,   402,   188,   150,   697,   339,   524,   807,   413,
1855:      807,    -1,    29,   402,   697,   339,    86,   807,   413,   807,
1856:       -1,    29,   402,   188,   150,   697,   339,    86,   807,   413,
1857:      807,    -1,    75,    -1,    -1,   529,   208,   215,   527,   526,
1858:      532,   534,    -1,   631,    -1,   297,   535,   442,   631,    -1,
1859:      494,   539,   495,   631,    -1,   494,   539,   495,   297,   535,
1860:      442,   631,    -1,   115,   443,    -1,   805,    -1,   805,    36,
1861:      813,    -1,   494,   541,   495,   703,    -1,   284,    86,   807,
1862:       -1,    -1,   636,    -1,    -1,   813,   794,    -1,   542,   483,
1863:      739,    -1,   494,   536,   495,   483,   739,    -1,   284,    84,
1864:      528,   131,   435,   373,   540,   703,    -1,   284,    84,   528,
1865:      131,   270,    -1,    -1,   813,   537,   538,   650,   651,    -1,
1866:      744,   537,   538,   650,   651,    -1,   494,   739,   495,   537,
1867:      538,   650,   651,    -1,   347,   797,    -1,    -1,   436,    -1,
1868:      401,    -1,   542,    -1,   536,   498,   542,    -1,    73,   818,
1869:       -1,    -1,   818,    -1,    -1,   530,    -1,   539,   498,   530,
1870:       -1,   531,    -1,   540,   498,   531,    -1,   533,    -1,   541,
1871:      498,   533,    -1,   813,   794,    -1,   311,   813,    -1,   311,
1872:      813,   483,   857,    -1,   311,   813,   494,   772,   495,    -1,
1873:       93,   601,   367,   805,   545,    -1,    93,   601,   367,   188,
1874:      269,   150,   805,   545,    -1,   549,    -1,    -1,   149,   807,
1875:      547,    -1,    93,   601,   402,   881,    36,   149,   807,   547,
1876:      880,    -1,    93,   601,   402,   188,   269,   150,   881,    36,
1877:      149,   807,   547,   880,    -1,   494,   770,   495,    -1,    -1,
1878:       29,   367,   805,   549,    -1,    29,   367,   188,   150,   805,
1879:      549,    -1,   552,    -1,   549,   552,    -1,   456,    -1,   480,
1880:       -1,    -1,     4,    -1,   485,     4,    -1,   486,     4,    -1,
1881:      554,    -1,    36,   711,    -1,    55,   551,    -1,   106,    -1,
1882:      267,   106,    -1,   197,   553,   551,    -1,   247,   551,    -1,
1883:      255,   551,    -1,   267,   247,    -1,   267,   255,    -1,   298,
1884:       54,   818,    -1,   367,   260,   818,    -1,   387,   550,   551,
1885:       -1,   345,    -1,   345,   550,   551,    -1,    54,    -1,    -1,
1886:      811,    -1,   485,   811,    -1,   486,   811,    -1,    19,   556,
1887:       -1,    47,   556,    -1,   387,   556,    -1,    79,   556,    -1,
1888:      141,   556,    -1,   352,   556,    -1,   459,    -1,   415,    -1,
1889:       -1,    93,   601,   402,   805,   494,   589,   495,   577,   569,
1890:       -1,    93,   601,   402,   188,   269,   150,   805,   494,   589,
1891:      495,   577,   569,    -1,    93,   289,   341,   601,   402,   805,
1892:      494,   589,   495,   577,   569,    -1,    -1,   558,   581,    -1,
1893:      596,    -1,   888,    -1,   767,    -1,   551,    -1,   812,    -1,
1894:      268,    -1,   494,   549,   495,    -1,    -1,   812,    -1,   267,
1895:       22,    -1,   346,    -1,    58,    -1,   373,   274,    -1,   373,
1896:      115,    -1,    86,   807,   564,    -1,   564,    -1,   576,    -1,
1897:       73,   818,    -1,   269,   274,    -1,   274,    -1,   430,   588,
1898:       -1,   317,   221,   588,    -1,    67,   494,   739,   495,   571,
1899:       -1,   437,    81,   807,    -1,   115,   740,    -1,   173,   602,
1900:       36,   187,   560,    -1,   333,   805,   591,   599,   567,    -1,
1901:      580,   561,    -1,   284,   435,   562,    -1,   566,    -1,   593,
1902:       -1,   566,   593,    -1,   593,   566,    -1,    -1,   288,   494,
1903:      583,   495,    -1,    -1,   284,    79,   135,    -1,   284,    79,
1904:      120,   355,    -1,   284,    79,   316,   355,    -1,    -1,   494,
1905:      574,   495,    -1,   267,   200,    -1,    -1,    86,   807,   597,
1906:       -1,   597,    -1,    78,    -1,    87,    -1,   116,    -1,   187,
1907:       -1,   199,    -1,   389,    -1,   392,    -1,    27,    -1,   594,
1908:       -1,   574,   498,   594,    -1,   437,   198,   585,    -1,   117,
1909:       -1,   269,   117,    -1,   202,   118,    -1,   202,   191,    -1,
1910:      456,   570,    -1,   456,   282,    -1,   458,   282,    -1,    -1,
1911:      494,   584,   495,    -1,   579,   196,   573,    -1,   579,   147,
1912:      573,    -1,    -1,   822,    -1,   269,   117,    -1,   117,    -1,
1913:      202,   191,    -1,   202,   118,    -1,   269,   439,    -1,   267,
1914:      200,    -1,   813,   709,   568,   592,    -1,   565,    -1,   583,
1915:      498,   565,    -1,   587,    -1,   584,   498,   587,    -1,   813,
1916:       -1,   582,    -1,   600,    -1,   572,    -1,   822,   483,   559,
1917:       -1,   822,    -1,   456,   578,    -1,    -1,   598,    -1,    -1,
1918:      813,    -1,   494,   595,   495,    -1,    -1,   592,   563,    -1,
1919:       -1,   284,   120,   562,    -1,   822,   483,   559,    -1,   822,
1920:       -1,   822,   496,   822,   483,   559,    -1,   822,   496,   822,
1921:       -1,   590,    -1,   595,   498,   590,    -1,   709,    -1,   815,
1922:      819,   489,   424,    -1,   374,   815,   819,   489,   424,    -1,
1923:       67,   494,   739,   495,   558,    -1,   430,   494,   595,   495,
1924:      588,   558,    -1,   430,   575,   558,    -1,   317,   221,   494,
1925:      595,   495,   588,   558,    -1,   317,   221,   575,   558,    -1,
1926:      166,   221,   494,   595,   495,   333,   805,   591,   599,   567,
1927:      558,    -1,   586,    -1,   598,   498,   586,    -1,   245,   170,
1928:       -1,   245,   302,    -1,   245,   379,    -1,    -1,   231,   805,
1929:      579,    -1,   408,    -1,   406,    -1,   235,   408,    -1,   235,
1930:      406,    -1,   175,   408,    -1,   175,   406,    -1,   433,    -1,
1931:       -1,    30,    -1,    54,   115,    -1,   135,   604,   188,   150,
1932:      606,   607,    -1,   135,   604,   606,   607,    -1,   135,   605,
1933:      188,   150,   806,   607,    -1,   135,   605,   806,   607,    -1,
1934:      135,   608,   807,   284,   818,   607,    -1,   135,   608,   188,
1935:      150,   807,   284,   818,   607,    -1,   135,   424,   609,   607,
1936:       -1,   135,   424,   188,   150,   609,   607,    -1,   402,    -1,
1937:      367,    -1,   171,    -1,   242,    -1,   449,    -1,   246,   449,
1938:       -1,   198,    -1,   166,   402,    -1,    74,    -1,    90,    -1,
1939:      389,    -1,   409,   362,   301,    -1,   409,   362,   127,    -1,
1940:      409,   362,   407,    -1,   409,   362,    83,    -1,    21,   248,
1941:       -1,   144,   418,    -1,   154,    -1,   166,   107,   460,    -1,
1942:      323,    -1,   359,    -1,   370,    -1,   818,    -1,   606,   498,
1943:      818,    -1,    58,    -1,   346,    -1,    -1,   309,    -1,   356,
1944:       -1,   418,    -1,   709,    -1,   609,   498,   709,    -1,    93,
1945:      611,   805,   612,    36,   739,    -1,   171,    -1,   242,    -1,
1946:      494,   495,    -1,   494,   772,   495,    -1,   529,   435,   866,
1947:      373,   540,   687,   867,   534,    -1,    91,   626,   805,   591,
1948:      624,   615,   620,   629,   616,   550,   621,    -1,    91,   494,
1949:      826,   495,   413,   620,   629,   550,   621,    -1,   169,    -1,
1950:      413,    -1,   618,   122,   812,    -1,    -1,   628,    -1,   617,
1951:      498,   628,    -1,   437,    -1,    -1,    36,    -1,    -1,   322,
1952:       -1,    -1,   625,    -1,   494,   630,   495,    -1,   849,    -1,
1953:      551,    -1,   487,    -1,   494,   617,   495,    -1,    -1,   822,
1954:      622,    -1,   456,   282,    -1,    -1,   625,   627,    -1,    -1,
1955:       50,    -1,    -1,    50,    -1,   282,    -1,   168,    -1,   121,
1956:      619,   812,    -1,   274,   619,   812,    -1,    95,    -1,   183,
1957:       -1,   325,   619,   812,    -1,   143,   619,   812,    -1,   165,
1958:      325,   595,    -1,   165,   325,   487,    -1,   165,   269,   274,
1959:      595,    -1,   165,   274,   595,    -1,   139,   812,    -1,   849,
1960:       -1,   812,    -1,   390,    -1,   391,    -1,   623,    -1,   630,
1961:      498,   623,    -1,   633,    -1,   632,    -1,   494,   633,   495,
1962:       -1,   494,   632,   495,    -1,   635,    -1,   634,   647,    -1,
1963:      634,   646,   679,   653,    -1,   634,   646,   652,   680,    -1,
1964:      636,   634,    -1,   636,   634,   647,    -1,   636,   634,   646,
1965:      679,   653,    -1,   636,   634,   646,   652,   680,    -1,   635,
1966:       -1,   632,    -1,   366,   644,   796,   639,   687,   703,   669,
1967:      677,   749,   678,   657,    -1,   366,   643,   797,   639,   687,
1968:      703,   669,   677,   749,   678,   657,    -1,   686,    -1,   402,
1969:      697,    -1,   634,   429,   642,   634,    -1,   634,   213,   642,
1970:      634,    -1,   634,   145,   642,   634,    -1,   456,   637,    -1,
1971:      480,   637,    -1,   456,   331,   637,    -1,   638,    -1,   637,
1972:      498,   638,    -1,   807,   820,    36,   494,   826,   495,    -1,
1973:      215,   640,    -1,    -1,   408,   641,   805,    -1,   406,   641,
1974:      805,    -1,   235,   408,   641,   805,    -1,   235,   406,   641,
1975:      805,    -1,   175,   408,   641,   805,    -1,   175,   406,   641,
1976:      805,    -1,   433,   641,   805,    -1,   402,   805,    -1,   805,
1977:       -1,   402,    -1,    -1,    27,    -1,   130,    -1,    -1,   130,
1978:       -1,   130,   284,   494,   770,   495,    -1,    27,    -1,    -1,
1979:      189,   276,    -1,   344,   276,    -1,    -1,   647,    -1,    -1,
1980:      290,    54,   648,    -1,   290,    54,    27,   650,   651,    -1,
1981:      290,    54,   487,   650,   651,    -1,   649,    -1,   648,   498,
1982:      649,    -1,   739,   437,   767,   651,    -1,   739,   650,   651,
1983:       -1,    37,    -1,   124,    -1,    -1,   479,   161,    -1,   479,
1984:      225,    -1,    -1,   654,   655,    -1,   655,   654,    -1,   654,
1985:       -1,   655,    -1,   652,    -1,    -1,   232,   663,    -1,   232,
1986:      663,   498,   664,    -1,   159,   668,   665,   667,   285,    -1,
1987:      159,   668,   667,   285,    -1,   281,   664,    -1,   281,   665,
1988:      667,    -1,     4,   489,    -1,     9,   489,    -1,     4,   306,
1989:       -1,     9,   306,    -1,     9,    -1,     9,   355,    -1,   437,
1990:      357,   659,    -1,    -1,   813,    -1,    -1,   658,   494,   656,
1991:      495,   662,    -1,   656,    -1,   656,   494,   813,   495,    -1,
1992:      656,   494,   813,   498,     9,   495,    -1,   404,   659,    -1,
1993:      660,    -1,    -1,   340,   494,     9,   495,    -1,    -1,   739,
1994:       -1,    27,    -1,   739,   489,    -1,     4,   306,    -1,     9,
1995:      306,    -1,   739,    -1,   741,    -1,   485,   666,    -1,   486,
1996:      666,    -1,   811,    -1,     4,    -1,   354,    -1,   355,    -1,
1997:      161,    -1,   266,    -1,   178,    54,   670,    -1,   178,    54,
1998:       27,    -1,   178,    54,   487,    -1,    -1,   671,    -1,   670,
1999:      498,   671,    -1,   739,    -1,   672,    -1,   674,    -1,   673,
2000:       -1,   675,    -1,   494,   495,    -1,   353,   494,   770,   495,
2001:       -1,    96,   494,   770,   495,    -1,   179,   375,   494,   670,
2002:      495,    -1,   179,    -1,   180,    -1,   182,   739,    -1,    -1,
2003:      324,   739,    -1,    -1,   681,    -1,   164,   327,   285,    -1,
2004:      679,    -1,    -1,   682,    -1,   681,   682,    -1,   683,   684,
2005:      685,    -1,   164,   435,    -1,   164,   267,   221,   435,    -1,
2006:      164,   376,    -1,   164,   221,   376,    -1,   279,   804,    -1,
2007:       -1,   273,    -1,   380,   240,    -1,    -1,   443,   494,   770,
2008:      495,    -1,   686,   498,   494,   770,   495,    -1,   169,   688,
2009:       -1,    -1,   689,    -1,   688,   498,   689,    -1,   697,   692,
2010:      661,    -1,   698,   693,   661,    -1,   226,   698,   693,    -1,
2011:      632,   692,   661,    -1,   226,   632,   692,    -1,   690,    -1,
2012:      494,   690,   495,   691,    -1,   494,   690,   495,    -1,   689,
2013:       94,   220,   689,    -1,   689,   694,   220,   689,   696,    -1,
2014:      689,   220,   689,   696,    -1,   689,   263,   694,   220,   689,
2015:       -1,   689,   263,   220,   689,    -1,    36,   813,   494,   806,
2016:      495,    -1,    36,   814,    -1,   813,   494,   806,   495,    -1,
2017:      813,    -1,   691,    -1,    -1,   691,    -1,    36,   494,   704,
2018:      495,    -1,    36,   813,   494,   704,   495,    -1,   813,   494,
2019:      704,   495,    -1,    -1,   170,   695,    -1,   229,   695,    -1,
2020:      350,   695,    -1,   204,    -1,   293,    -1,    -1,   437,   494,
2021:      806,   495,    -1,   284,   739,    -1,   805,    -1,   805,   487,
2022:       -1,   285,   805,    -1,   285,   494,   805,   495,    -1,   744,
2023:      702,    -1,   355,   169,   494,   700,   495,   702,    -1,   744,
2024:      701,    -1,   699,    -1,   700,   498,   699,    -1,    36,   494,
2025:      704,   495,    -1,    -1,   480,   291,    -1,    -1,   453,   739,
2026:       -1,    -1,   705,    -1,   704,   498,   705,    -1,   813,   709,
2027:      706,    -1,    73,   818,    -1,    -1,   813,   709,    -1,   707,
2028:      498,   813,   709,    -1,   354,    -1,   395,    -1,   711,   710,
2029:       -1,   374,   711,   710,    -1,   711,    35,   492,   811,   493,
2030:       -1,   374,   711,    35,   492,   811,   493,    -1,   711,    35,
2031:       -1,   374,   711,    35,    -1,   708,   494,   707,   495,   710,
2032:       -1,   243,   494,   774,   495,   710,    -1,   710,   492,   493,
2033:       -1,   710,   492,   811,   493,    -1,    -1,   713,    -1,   715,
2034:       -1,   717,    -1,   721,    -1,   727,    -1,   728,   738,    -1,
2035:      728,   494,   811,   495,    -1,   715,    -1,   718,    -1,   722,
2036:       -1,   727,    -1,   817,   714,    -1,   494,   770,   495,    -1,
2037:       -1,   211,    -1,   212,    -1,   381,    -1,    49,    -1,   328,
2038:       -1,   162,   716,    -1,   134,   313,    -1,   113,   714,    -1,
2039:      112,   714,    -1,   277,   714,    -1,    52,    -1,   494,   811,
2040:      495,    -1,    -1,   719,    -1,   720,    -1,   719,    -1,   720,
2041:       -1,    51,   726,   494,   770,   495,    -1,    51,   726,    -1,
2042:      723,    -1,   724,    -1,   723,    -1,   724,    -1,   725,   494,
2043:      811,   495,    -1,   725,    -1,    65,   726,    -1,    64,   726,
2044:       -1,   444,    -1,   262,    65,   726,    -1,   262,    64,   726,
2045:       -1,   264,   726,    -1,   446,    -1,    -1,   412,   494,   811,
2046:      495,   729,    -1,   412,   729,    -1,   411,   494,   811,   495,
2047:      729,    -1,   411,   729,    -1,   214,    -1,   480,   411,   477,
2048:       -1,   458,   411,   477,    -1,    -1,   474,    -1,   475,    -1,
2049:      257,    -1,   258,    -1,   109,    -1,   110,    -1,   185,    -1,
2050:      186,    -1,   253,    -1,   254,    -1,   363,    -1,   364,    -1,
2051:      251,    -1,   252,    -1,   249,    -1,   250,    -1,   730,    -1,
2052:      731,    -1,   732,    -1,   733,    -1,   734,    -1,   735,    -1,
2053:      736,    -1,   737,    -1,   730,   413,   731,    -1,   732,   413,
2054:      733,    -1,   732,   413,   734,    -1,   732,   413,   735,    -1,
2055:      733,   413,   734,    -1,   733,   413,   735,    -1,   734,   413,
2056:      735,    -1,    -1,   741,    -1,   739,    11,   709,    -1,   739,
2057:       73,   818,    -1,   739,    41,   411,   477,   739,    -1,   485,
2058:      739,    -1,   486,   739,    -1,   739,   485,   739,    -1,   739,
2059:      486,   739,    -1,   739,   487,   739,    -1,   739,   488,   739,
2060:       -1,   739,   489,   739,    -1,   739,   490,   739,    -1,   739,
2061:      481,   739,    -1,   739,   482,   739,    -1,   739,   483,   739,
2062:       -1,   739,    16,   739,    -1,   739,    17,   739,    -1,   739,
2063:       18,   739,    -1,   739,   766,   739,    -1,   766,   739,    -1,
2064:      739,   766,    -1,   739,    33,   739,    -1,   739,   289,   739,
2065:       -1,   269,   739,    -1,   478,   739,    -1,   739,   174,   739,
2066:       -1,   739,   231,   739,    -1,   739,   231,   739,   143,   739,
2067:       -1,   739,   478,   231,   739,    -1,   739,   478,   231,   739,
2068:      143,   739,    -1,   739,   190,   739,    -1,   739,   190,   739,
2069:      143,   739,    -1,   739,   478,   190,   739,    -1,   739,   478,
2070:      190,   739,   143,   739,    -1,   739,   378,   413,   739,    -1,
2071:      739,   378,   413,   739,   143,   739,    -1,   739,   478,   378,
2072:      413,   739,    -1,   739,   478,   378,   413,   739,   143,   739,
2073:       -1,   739,   217,   274,    -1,   739,   218,    -1,   739,   217,
2074:      269,   274,    -1,   739,   269,   274,    -1,   739,   272,    -1,
2075:      760,    -1,   499,   762,   500,    -1,   492,   771,   493,    -1,
2076:      760,    15,   739,    -1,   790,    15,   739,    -1,   760,   295,
2077:      760,    -1,   739,   217,   420,    -1,   739,   217,   269,   420,
2078:       -1,   739,   217,   157,    -1,   739,   217,   269,   157,    -1,
2079:      739,   217,   431,    -1,   739,   217,   269,   431,    -1,   739,
2080:      217,   130,   169,   739,    -1,   739,   217,   269,   130,   169,
2081:      739,    -1,   739,   217,   279,   494,   774,   495,    -1,   739,
2082:      217,   269,   279,   494,   774,   495,    -1,   739,    48,   795,
2083:      740,    33,   739,    -1,   739,   478,    48,   795,   740,    33,
2084:      739,    -1,   739,    48,   399,   740,    33,   739,    -1,   739,
2085:      478,    48,   399,   740,    33,   739,    -1,   739,   195,   784,
2086:       -1,   739,   478,   195,   784,    -1,   739,   768,   763,   632,
2087:       -1,   739,   768,   763,   494,   739,   495,    -1,   115,    -1,
2088:       35,   492,   771,   493,    -1,   741,    -1,   740,    11,   709,
2089:       -1,   485,   740,    -1,   486,   740,    -1,   740,   485,   740,
2090:       -1,   740,   486,   740,    -1,   740,   487,   740,    -1,   740,
2091:      488,   740,    -1,   740,   489,   740,    -1,   740,   490,   740,
2092:       -1,   740,   481,   740,    -1,   740,   482,   740,    -1,   740,
2093:      483,   740,    -1,   740,    16,   740,    -1,   740,    17,   740,
2094:       -1,   740,    18,   740,    -1,   740,   766,   740,    -1,   766,
2095:      740,    -1,   740,   766,    -1,   740,   217,   130,   169,   740,
2096:       -1,   740,   217,   269,   130,   169,   740,    -1,   740,   217,
2097:      279,   494,   774,   495,    -1,   740,   217,   269,   279,   494,
2098:      774,   495,    -1,   790,    -1,   810,    -1,   501,     9,    -1,
2099:      502,   794,    -1,    10,   794,    -1,   494,   739,   495,   794,
2100:       -1,   785,    -1,   743,   794,    -1,   632,    -1,   632,   793,
2101:       -1,   150,   632,    -1,   676,   494,   770,   495,    -1,   809,
2102:      494,   495,    -1,   809,   494,   772,   646,   645,   495,    -1,
2103:      809,   494,   445,   773,   646,   645,   495,    -1,   809,   494,
2104:      772,   498,   445,   773,   646,   645,   495,    -1,   809,   494,
2105:       27,   772,   646,   645,   495,    -1,   809,   494,   130,   772,
2106:      646,   645,   495,    -1,   809,   494,   487,   495,    -1,   742,
2107:      746,   747,   748,   752,    -1,   745,    -1,   742,    -1,   745,
2108:       -1,    74,   164,   494,   739,   495,    -1,    99,    -1,   102,
2109:       -1,   102,   494,   811,   495,    -1,   103,    -1,   103,   494,
2110:      811,   495,    -1,   236,    -1,   236,   494,   811,   495,    -1,
2111:      237,    -1,   237,   494,   811,   495,    -1,   100,    -1,   104,
2112:       -1,   372,    -1,   436,    -1,    98,    -1,   101,    -1,    61,
2113:      494,   739,    36,   709,   495,    -1,   423,   494,   739,    36,
2114:      709,   495,    -1,   156,   494,   775,   495,    -1,   296,   494,
2115:      777,   495,    -1,   310,   494,   779,   495,    -1,   397,   494,
2116:      780,   495,    -1,   417,   494,   739,    36,   709,   495,    -1,
2117:      419,   494,    53,   783,   495,    -1,   419,   494,   227,   783,
2118:      495,    -1,   419,   494,   414,   783,   495,    -1,   419,   494,
2119:      783,   495,    -1,   275,   494,   739,   498,   739,   495,    -1,
2120:       72,   494,   770,   495,    -1,   457,   178,   494,   647,   495,
2121:       -1,    -1,   160,   494,   453,   739,   495,    -1,    -1,   153,
2122:       -1,    -1,   455,   750,    -1,    -1,   751,    -1,   750,   498,
2123:      751,    -1,   813,    36,   753,    -1,   294,   753,    -1,   294,
2124:      813,    -1,    -1,   494,   754,   755,   646,   756,   495,    -1,
2125:      813,    -1,    -1,   303,    54,   770,    -1,    -1,   326,   757,
2126:       -1,   355,   757,    -1,    -1,   758,    -1,    48,   758,    33,
2127:      758,    -1,   426,   312,    -1,   426,   163,    -1,    97,   354,
2128:       -1,   739,   312,    -1,   739,   163,    -1,   354,   494,   770,
2129:      495,    -1,   354,   494,   495,    -1,   759,    -1,   494,   770,
2130:      498,   739,   495,    -1,   814,   503,   739,    -1,   761,    -1,
2131:      762,   498,   761,    -1,    34,    -1,   383,    -1,    27,    -1,
2132:        8,    -1,   765,    -1,   485,    -1,   486,    -1,   487,    -1,
2133:      488,    -1,   489,    -1,   490,    -1,   481,    -1,   482,    -1,
2134:      483,    -1,    16,    -1,    17,    -1,    18,    -1,     8,    -1,
2135:      286,   494,   769,   495,    -1,   764,    -1,   286,   494,   769,
2136:      495,    -1,   764,    -1,   286,   494,   769,   495,    -1,   231,
2137:       -1,   478,   231,    -1,   174,    -1,   478,   174,    -1,   190,
2138:       -1,   478,   190,    -1,   764,    -1,   813,   496,   769,    -1,
2139:      739,    -1,   770,   498,   739,    -1,   770,    -1,    -1,   773,
2140:       -1,   772,   498,   773,    -1,   739,    -1,   821,    13,   739,
2141:       -1,   821,    14,   739,    -1,   709,    -1,   774,   498,   709,
2142:       -1,   776,   169,   739,    -1,    -1,     3,    -1,   730,    -1,
2143:      731,    -1,   732,    -1,   733,    -1,   734,    -1,   735,    -1,
2144:      736,    -1,   737,    -1,   812,    -1,   739,   778,   781,   782,
2145:       -1,   739,   778,   781,    -1,   307,   739,    -1,   740,   195,
2146:      740,    -1,    -1,   739,   781,   782,    -1,   739,   782,   781,
2147:       -1,   739,   781,    -1,   739,   782,    -1,   770,    -1,    -1,
2148:      169,   739,    -1,   164,   739,    -1,   739,   169,   770,    -1,
2149:      169,   770,    -1,   770,    -1,   632,    -1,   494,   770,   495,
2150:       -1,    60,   789,   786,   788,   141,    -1,   787,    -1,   786,
2151:      787,    -1,   452,   739,   410,   739,    -1,   137,   739,    -1,
2152:       -1,   739,    -1,    -1,   813,    -1,   813,   793,    -1,   496,
2153:      808,    -1,   492,   739,   493,    -1,   492,   792,   503,   792,
2154:      493,    -1,   739,    -1,    -1,   791,    -1,   793,   791,    -1,
2155:       -1,   794,   791,    -1,    40,    -1,    -1,   797,    -1,    -1,
2156:      798,    -1,   797,   498,   798,    -1,   739,    36,   823,    -1,
2157:      739,     3,    -1,   739,    -1,   487,   800,   803,    -1,   813,
2158:      496,   487,   800,   803,    -1,   146,   494,   806,   495,    -1,
2159:      146,   813,    -1,   799,    -1,    -1,   739,    36,   813,    -1,
2160:      801,    -1,   802,   498,   801,    -1,   341,   494,   802,   495,
2161:       -1,   341,   801,    -1,    -1,   805,    -1,   804,   498,   805,
2162:       -1,   814,    -1,   813,   793,    -1,   807,    -1,   806,   498,
2163:      807,    -1,   813,    -1,   822,    -1,   816,    -1,   813,   793,
2164:       -1,   811,    -1,     4,    -1,   812,   794,    -1,     6,    -1,
2165:        7,    -1,   809,   812,    -1,   809,   494,   772,   646,   645,
2166:      495,   812,    -1,   712,   812,    -1,   728,   494,   739,   495,
2167:      738,    -1,   728,   811,   738,    -1,   728,   812,   738,    -1,
2168:      420,    -1,   157,    -1,   274,    -1,     9,    -1,     5,    -1,
2169:        3,    -1,   882,    -1,   883,    -1,   813,    -1,     5,    -1,
2170:        3,    -1,   882,    -1,   887,    -1,     3,    -1,   882,    -1,
2171:      884,    -1,     3,    -1,   882,    -1,   885,    -1,   813,    -1,
2172:      813,   819,    -1,   496,   808,    -1,   819,   496,   808,    -1,
2173:      494,   806,   495,    -1,    -1,   815,    -1,     3,    -1,   886,
2174:       -1,   882,    -1,   888,    -1,   822,    -1,     5,    -1,   314,
2175:      807,   825,    36,   826,    -1,   494,   774,   495,    -1,    -1,
2176:      631,    -1,   525,    -1,   613,    -1,   865,    -1,    93,   359,
2177:      813,   828,    -1,    93,   359,   188,   269,   150,   813,   828,
2178:       -1,   828,   829,    -1,    -1,   557,    -1,   830,    -1,   544,
2179:       -1,   877,    -1,    93,   836,   198,   833,   834,   284,   805,
2180:      832,   494,   541,   495,   835,   703,    -1,    93,   836,   198,
2181:      833,   188,   269,   150,   585,   284,   805,   832,   494,   541,
2182:      495,   835,   703,    -1,   813,    -1,   437,   831,    -1,    -1,
2183:       82,    -1,    -1,   585,    -1,    -1,   456,   570,    -1,    -1,
2184:      430,    -1,    -1,    29,   402,   697,   373,   359,   807,    -1,
2185:       29,   402,   188,   150,   697,   373,   359,   807,    -1,    29,
2186:      367,   805,   373,   359,   807,    -1,    29,   367,   188,   150,
2187:      805,   373,   359,   807,    -1,    29,   449,   805,   373,   359,
2188:      807,    -1,    29,   449,   188,   150,   805,   373,   359,   807,
2189:       -1,   165,    68,    -1,    68,    -1,   152,   108,   812,   621,
2190:       -1,   194,   108,   812,    -1,   151,   844,    -1,   151,   848,
2191:      842,   844,    -1,   151,   447,   844,    -1,   151,   494,   847,
2192:      495,   844,    -1,   447,    -1,    -1,   849,    -1,   551,    -1,
2193:       -1,   631,    -1,   525,    -1,   613,    -1,   865,    -1,   879,
2194:       -1,     3,    -1,   882,    -1,   886,    -1,   845,    -1,   812,
2195:       -1,   850,    -1,   847,   498,   850,    -1,    32,    -1,    31,
2196:       -1,   420,    -1,   157,    -1,   284,    -1,   846,    -1,   851,
2197:      843,    -1,   845,    -1,   848,    -1,   373,   853,    -1,   373,
2198:      235,   853,    -1,   373,   371,   853,    -1,   373,   175,   853,
2199:       -1,   854,    -1,   875,   169,    97,    -1,   411,   477,   856,
2200:       -1,   359,   812,    -1,   875,   413,   857,    -1,   875,   483,
2201:      857,    -1,   875,   413,   115,    -1,   875,   483,   115,    -1,
2202:      849,    -1,   551,    -1,   812,    -1,     3,    -1,   728,   812,
2203:      738,    -1,   728,   494,   811,   495,   812,    -1,   551,    -1,
2204:      115,    -1,   235,    -1,   855,    -1,   857,   498,   855,    -1,
2205:      234,   859,    -1,   209,   859,    -1,   165,   209,   859,    -1,
2206:      812,    -1,   813,    -1,   438,   862,   864,   842,    -1,   438,
2207:      862,   864,   842,   805,    -1,   438,   862,   864,   842,   869,
2208:       -1,   438,   494,   863,   495,    -1,   438,   494,   863,   495,
2209:      805,   820,    -1,   848,    -1,   447,    -1,   168,    -1,   170,
2210:       -1,     3,    -1,   170,    -1,    -1,   861,    -1,   863,   498,
2211:      861,    -1,   168,    -1,    -1,   529,   120,   169,   866,   868,
2212:      867,   534,    -1,   697,    -1,   697,   813,    -1,   697,    36,
2213:      813,    -1,   453,   739,    -1,    -1,   437,   688,    -1,    -1,
2214:      848,   842,    -1,   848,   842,   805,   820,    -1,   343,   872,
2215:       -1,   875,    -1,    27,    -1,   871,    -1,   411,   477,    -1,
2216:      415,   219,   230,    -1,   874,   631,    -1,   398,   631,    -1,
2217:      398,   875,    -1,   874,   875,    -1,   874,   411,   477,    -1,
2218:      874,   415,   219,   230,    -1,   874,    27,    -1,   377,    -1,
2219:      125,    -1,   813,    -1,   875,   496,   813,    -1,    56,   742,
2220:       -1,    93,   601,   449,   805,   591,   835,    36,   631,   878,
2221:       -1,    93,   289,   341,   601,   449,   805,   591,   835,    36,
2222:      631,   878,    -1,    93,   601,   331,   449,   805,   494,   595,
2223:      495,   835,    36,   631,   878,    -1,    93,   289,   341,   601,
2224:      331,   449,   805,   494,   595,   495,   835,    36,   631,   878,
2225:       -1,   456,    67,   287,    -1,   456,    59,    67,   287,    -1,
2226:      456,   235,    67,   287,    -1,    -1,    93,   601,   402,   881,
2227:       36,   631,   880,    -1,    93,   601,   402,   188,   269,   150,
2228:      881,    36,   631,   880,    -1,   456,   107,    -1,   456,   267,
2229:      107,    -1,    -1,   805,   591,   577,   569,    -1,    19,    -1,
2230:       20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,    -1,
2231:       25,    -1,    26,    -1,    28,    -1,    29,    -1,    30,    -1,
2232:       38,    -1,    39,    -1,    41,    -1,    42,    -1,    43,    -1,
2233:       45,    -1,    46,    -1,    47,    -1,    54,    -1,    55,    -1,
2234:       56,    -1,    57,    -1,    58,    -1,    59,    -1,    62,    -1,
2235:       63,    -1,    66,    -1,    68,    -1,    69,    -1,    70,    -1,
2236:       71,    -1,    76,    -1,    77,    -1,    78,    -1,    79,    -1,
2237:       80,    -1,    81,    -1,    83,    -1,    84,    -1,    85,    -1,
2238:       87,    -1,    88,    -1,    89,    -1,    90,    -1,    91,    -1,
2239:       92,    -1,    95,    -1,    96,    -1,    97,    -1,   105,    -1,
2240:      106,    -1,   107,    -1,   108,    -1,   109,    -1,   110,    -1,
2241:      111,    -1,   114,    -1,   116,    -1,   118,    -1,   119,    -1,
2242:      120,    -1,   121,    -1,   122,    -1,   123,    -1,   125,    -1,
2243:      126,    -1,   127,    -1,   128,    -1,   129,    -1,   132,    -1,
2244:      133,    -1,   134,    -1,   135,    -1,   136,    -1,   138,    -1,
2245:      139,    -1,   140,    -1,   142,    -1,   143,    -1,   144,    -1,
2246:      146,    -1,   147,    -1,   148,    -1,   149,    -1,   151,    -1,
2247:      152,    -1,   153,    -1,   154,    -1,   155,    -1,   158,    -1,
2248:      160,    -1,   161,    -1,   163,    -1,   165,    -1,   167,    -1,
2249:      171,    -1,   172,    -1,   173,    -1,   175,    -1,   177,    -1,
2250:      181,    -1,   183,    -1,   184,    -1,   185,    -1,   186,    -1,
2251:      187,    -1,   188,    -1,   189,    -1,   191,    -1,   192,    -1,
2252:      193,    -1,   194,    -1,   196,    -1,   197,    -1,   198,    -1,
2253:      199,    -1,   200,    -1,   201,    -1,   203,    -1,   206,    -1,
2254:      207,    -1,   208,    -1,   209,    -1,   210,    -1,   216,    -1,
2255:      219,    -1,   221,    -1,   222,    -1,   223,    -1,   224,    -1,
2256:      225,    -1,   228,    -1,   230,    -1,   233,    -1,   234,    -1,
2257:      235,    -1,   238,    -1,   239,    -1,   240,    -1,   241,    -1,
2258:      242,    -1,   244,    -1,   245,    -1,   246,    -1,   247,    -1,
2259:      248,    -1,   249,    -1,   250,    -1,   251,    -1,   252,    -1,
2260:      253,    -1,   254,    -1,   255,    -1,   256,    -1,   257,    -1,
2261:      258,    -1,   259,    -1,   260,    -1,   261,    -1,   265,    -1,
2262:      266,    -1,   267,    -1,   270,    -1,   271,    -1,   273,    -1,
2263:      276,    -1,   278,    -1,   279,    -1,   280,    -1,   282,    -1,
2264:      283,    -1,   286,    -1,   287,    -1,   288,    -1,   291,    -1,
2265:      294,    -1,   297,    -1,   298,    -1,   299,    -1,   300,    -1,
2266:      301,    -1,   302,    -1,   303,    -1,   304,    -1,   305,    -1,
2267:      306,    -1,   308,    -1,   309,    -1,   311,    -1,   312,    -1,
2268:      314,    -1,   315,    -1,   316,    -1,   318,    -1,   319,    -1,
2269:      320,    -1,   321,    -1,   322,    -1,   323,    -1,   325,    -1,
2270:      326,    -1,   327,    -1,   329,    -1,   330,    -1,   331,    -1,
2271:      332,    -1,   334,    -1,   335,    -1,   336,    -1,   337,    -1,
2272:      338,    -1,   339,    -1,   340,    -1,   341,    -1,   342,    -1,
2273:      343,    -1,   344,    -1,   345,    -1,   346,    -1,   348,    -1,
2274:      349,    -1,   351,    -1,   352,    -1,   353,    -1,   355,    -1,
2275:      356,    -1,   357,    -1,   358,    -1,   359,    -1,   360,    -1,
2276:      361,    -1,   362,    -1,   363,    -1,   364,    -1,   365,    -1,
2277:      367,    -1,   368,    -1,   369,    -1,   370,    -1,   371,    -1,
2278:      373,    -1,   375,    -1,   376,    -1,   377,    -1,   379,    -1,
2279:      380,    -1,   382,    -1,   384,    -1,   385,    -1,   386,    -1,
2280:      387,    -1,   388,    -1,   389,    -1,   390,    -1,   391,    -1,
2281:      392,    -1,   393,    -1,   394,    -1,   396,    -1,   398,    -1,
2282:      400,    -1,   401,    -1,   403,    -1,   405,    -1,   406,    -1,
2283:      407,    -1,   408,    -1,   409,    -1,   415,    -1,   416,    -1,
2284:      418,    -1,   421,    -1,   422,    -1,   424,    -1,   425,    -1,
2285:      426,    -1,   427,    -1,   428,    -1,   431,    -1,   432,    -1,
2286:      433,    -1,   434,    -1,   435,    -1,   438,    -1,   439,    -1,
2287:      440,    -1,   441,    -1,   442,    -1,   446,    -1,   448,    -1,
2288:      449,    -1,   450,    -1,   451,    -1,   454,    -1,   457,    -1,
2289:      458,    -1,   459,    -1,   460,    -1,   461,    -1,   462,    -1,
2290:      474,    -1,   475,    -1,   476,    -1,   477,    -1,    48,    -1,
2291:       49,    -1,    51,    -1,    52,    -1,    64,    -1,    65,    -1,
2292:       72,    -1,   112,    -1,   113,    -1,   150,    -1,   156,    -1,
2293:      162,    -1,   179,    -1,   180,    -1,   205,    -1,   211,    -1,
2294:      212,    -1,   214,    -1,   243,    -1,   262,    -1,   264,    -1,
2295:      268,    -1,   275,    -1,   277,    -1,   292,    -1,   296,    -1,
2296:      310,    -1,   313,    -1,   328,    -1,   354,    -1,   374,    -1,
2297:      381,    -1,   395,    -1,   397,    -1,   411,    -1,   412,    -1,
2298:      417,    -1,   419,    -1,   423,    -1,   443,    -1,   444,    -1,
2299:      463,    -1,   464,    -1,   465,    -1,   466,    -1,   467,    -1,
2300:      468,    -1,   469,    -1,   470,    -1,   471,    -1,   472,    -1,
2301:      473,    -1,    44,    -1,    50,    -1,    74,    -1,    82,    -1,
2302:       94,    -1,   101,    -1,   168,    -1,   170,    -1,   174,    -1,
2303:      190,    -1,   204,    -1,   217,    -1,   218,    -1,   220,    -1,
2304:      229,    -1,   231,    -1,   243,    -1,   263,    -1,   272,    -1,
2305:      293,    -1,   295,    -1,   350,    -1,   378,    -1,   395,    -1,
2306:      404,    -1,   447,    -1,    44,    -1,    50,    -1,    74,    -1,
2307:       82,    -1,    94,    -1,   101,    -1,   168,    -1,   170,    -1,
2308:      174,    -1,   190,    -1,   204,    -1,   217,    -1,   218,    -1,
2309:      220,    -1,   229,    -1,   231,    -1,   263,    -1,   272,    -1,
2310:      293,    -1,   295,    -1,   350,    -1,   378,    -1,   404,    -1,
2311:      423,    -1,   447,    -1,    48,    -1,    49,    -1,    51,    -1,
2312:       52,    -1,    65,    -1,    64,    -1,    72,    -1,   112,    -1,
2313:      113,    -1,   150,    -1,   156,    -1,   162,    -1,   179,    -1,
2314:      180,    -1,   205,    -1,   212,    -1,   214,    -1,   211,    -1,
2315:      243,    -1,   262,    -1,   264,    -1,   268,    -1,   275,    -1,
2316:      277,    -1,   292,    -1,   296,    -1,   310,    -1,   313,    -1,
2317:      328,    -1,   354,    -1,   374,    -1,   381,    -1,   395,    -1,
2318:      397,    -1,   411,    -1,   412,    -1,   417,    -1,   419,    -1,
2319:      423,    -1,   443,    -1,   444,    -1,   463,    -1,   464,    -1,
2320:      465,    -1,   466,    -1,   467,    -1,   468,    -1,   469,    -1,
2321:      470,    -1,   471,    -1,   472,    -1,   473,    -1,    44,    -1,
2322:       50,    -1,    74,    -1,    82,    -1,    94,    -1,   101,    -1,
2323:      168,    -1,   170,    -1,   174,    -1,   190,    -1,   204,    -1,
2324:      217,    -1,   218,    -1,   220,    -1,   229,    -1,   231,    -1,
2325:      243,    -1,   263,    -1,   272,    -1,   293,    -1,   295,    -1,
2326:      350,    -1,   378,    -1,   395,    -1,   404,    -1,   423,    -1,
2327:      447,    -1,    27,    -1,    31,    -1,    32,    -1,    33,    -1,
2328:       34,    -1,    35,    -1,    36,    -1,    37,    -1,    40,    -1,
2329:       53,    -1,    60,    -1,    61,    -1,    67,    -1,    73,    -1,
2330:       75,    -1,    86,    -1,    93,    -1,    98,    -1,    99,    -1,
2331:      100,    -1,   102,    -1,   103,    -1,   104,    -1,   115,    -1,
2332:      117,    -1,   124,    -1,   130,    -1,   131,    -1,   137,    -1,
2333:      141,    -1,   145,    -1,   157,    -1,   159,    -1,   164,    -1,
2334:      166,    -1,   169,    -1,   176,    -1,   178,    -1,   182,    -1,
2335:      195,    -1,   202,    -1,   213,    -1,   215,    -1,   226,    -1,
2336:      227,    -1,   232,    -1,   236,    -1,   237,    -1,   269,    -1,
2337:      274,    -1,   281,    -1,   284,    -1,   285,    -1,   289,    -1,
2338:      290,    -1,   307,    -1,   317,    -1,   324,    -1,   333,    -1,
2339:      347,    -1,   366,    -1,   372,    -1,   383,    -1,   399,    -1,
2340:      402,    -1,   410,    -1,   413,    -1,   414,    -1,   420,    -1,
2341:      429,    -1,   430,    -1,   436,    -1,   437,    -1,   445,    -1,
2342:      452,    -1,   453,    -1,   455,    -1,   456,    -1
2343: };
2344: 
2345: /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
2346: static const yytype_uint16 yyrline[] =
2347: {
2348:        0,   467,   467,   483,   495,   504,   505,   506,   507,   508,
2349:      509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
2350:      519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
2351:      529,   530,   531,   532,   533,   534,   535,   536,   537,   539,
2352:        9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
2353:       93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
2354:      157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
2355:      253,   262,   271,   280,   290,   303,   318,   327,   335,   350,
2356:      358,   368,   378,   385,   392,   400,   407,   418,   419,   424,
2357:      428,   433,   438,   446,   447,   452,   456,   457,   458,     7,
2358:       13,    19,    25,     7,    17,    18,    21,    23,     6,    15,
2359:       25,    35,    45,    55,    65,    75,    85,    95,   106,   117,
2360:      127,   140,   141,     8,    21,    27,    34,    40,    47,    57,
2361:       61,    70,    79,    88,    95,    96,   101,   113,   118,   143,
2362:      153,   163,   169,   180,   191,   206,   207,   213,   214,   219,
2363:      220,   226,   227,   231,   232,   237,   239,   245,   246,   250,
2364:      251,   256,     7,    14,    22,     9,    19,    32,    33,     7,
2365:       14,    31,    51,    52,     9,    17,    29,    30,    34,    35,
2366:       36,    41,    42,    43,    48,    52,    56,    60,    64,    68,
2367:       72,    76,    80,    84,    88,    92,    97,   101,   105,   112,
2368:      113,   117,   118,   119,     2,     9,    15,    21,    28,    35,
2369:       45,    46,    47,     7,    21,    36,    56,    57,    84,    85,
2370:       86,    87,    88,    89,    93,    94,    99,   104,   105,   106,
2371:      107,   108,   113,   120,   121,   122,   139,   146,   153,   163,
2372:      173,   185,   193,   202,   211,   230,   237,   242,   244,   246,
2373:      248,   251,   256,   257,   261,   262,   263,   264,   269,   273,
2374:      274,   279,   286,   291,   292,   293,   294,   295,   296,   297,
2375:      298,   304,   305,   309,   314,   321,   328,   335,   347,   348,
2376:      349,   350,   354,   359,   360,   361,   366,   371,   372,   373,
2377:      374,   375,   376,   381,   404,   408,   415,   416,   420,   424,
2378:      425,   426,   430,   434,   442,   443,   448,   449,   453,   461,
2379:      462,   467,   468,   472,   477,   481,   485,   490,   498,   499,
2380:      503,   504,   510,   521,   534,   548,   562,   576,   590,   613,
2381:      617,   624,   628,   636,   641,   648,   658,   659,   660,   661,
2382:      662,   669,   676,   677,   682,   683,     9,    19,    29,    39,
2383:       49,    59,    69,    79,    93,    94,    95,    96,    97,    98,
2384:       99,   100,   101,   102,   103,   104,   105,   106,   107,   112,
2385:      113,   114,   115,   116,   117,   118,   123,   124,   129,   130,
2386:      131,   136,   137,   138,   141,   142,     7,    18,    19,    23,
2387:       27,     7,     1,    30,    53,    54,    59,    63,    68,    72,
2388:       80,    81,    85,    86,    91,    92,    96,    97,   102,   103,
2389:      104,   105,   106,   111,   119,   123,   128,   129,   134,   138,
2390:      143,   147,   151,   155,   159,   163,   167,   171,   175,   179,
2391:      183,   187,   191,   195,   203,   209,   210,   211,   216,   220,
2392:       47,    48,    52,    53,    68,    69,    76,    84,    92,   100,
2393:      108,   116,   127,   128,   155,   171,   188,   189,   208,   212,
2394:      216,   233,   240,   247,   257,   258,   261,   273,   284,   292,
2395:      297,   302,   307,   312,   320,   328,   333,   338,   345,   346,
2396:      350,   351,   352,   359,   360,   364,   365,   369,   370,   371,
2397:      375,   376,   380,   381,   391,   404,   405,   408,   417,   428,
2398:      429,   430,   433,   434,   435,   439,   440,   441,   442,   446,
2399:      447,   451,   453,   469,   471,   476,   479,   487,   491,   495,
2400:      499,   503,   507,   514,   519,   526,   527,   531,   535,   539,
2401:      543,   550,   557,   558,   563,   564,   568,   569,   574,   576,
2402:      578,   583,   603,   604,   606,   611,   612,   616,   617,   620,
2403:      621,   646,   647,   652,   657,   661,   662,   666,   667,   668,
2404:      669,   670,   674,   687,   694,   701,   708,   709,   713,   714,
2405:      718,   719,   723,   724,   728,   729,   733,   734,   738,   749,
2406:      750,   751,   752,   756,   757,   762,   763,   764,   773,   779,
2407:      797,   798,   802,   803,   809,   815,   823,   831,   840,   849,
2408:      853,   879,   883,   896,   910,   925,   937,   953,   959,   964,
2409:      970,   977,   978,   986,   990,   994,  1000,  1007,  1012,  1013,
2410:     1014,  1015,  1019,  1020,  1032,  1033,  1038,  1045,  1052,  1059,
2411:     1091,  1102,  1115,  1120,  1121,  1124,  1125,  1128,  1129,  1134,
2412:     1135,  1140,  1144,  1150,  1171,  1179,  1192,  1195,  1199,  1199,
2413:     1201,  1206,  1213,  1218,  1224,  1229,  1235,  1241,  1250,  1252,
2414:     1255,  1259,  1260,  1261,  1262,  1263,  1264,  1269,  1289,  1290,
2415:     1291,  1292,  1303,  1317,  1318,  1324,  1329,  1334,  1339,  1344,
2416:     1349,  1354,  1359,  1365,  1371,  1377,  1384,  1406,  1415,  1419,
2417:     1427,  1431,  1439,  1451,  1472,  1476,  1482,  1486,  1499,  1507,
2418:     1517,  1519,  1521,  1523,  1525,  1527,  1532,  1533,  1540,  1549,
2419:     1557,  1566,  1577,  1585,  1586,  1587,  1591,  1591,  1594,  1594,
2420:     1597,  1597,  1600,  1600,  1603,  1603,  1606,  1606,  1609,  1609,
2421:     1612,  1612,  1615,  1617,  1619,  1621,  1623,  1625,  1627,  1629,
2422:     1631,  1636,  1641,  1647,  1654,  1659,  1665,  1671,  1702,  1704,
2423:     1706,  1714,  1729,  1731,  1733,  1735,  1737,  1739,  1741,  1743,
2424:     1745,  1747,  1749,  1751,  1753,  1755,  1758,  1760,  1762,  1765,
2425:     1767,  1769,  1771,  1774,  1779,  1784,  1791,  1796,  1803,  1808,
2426:     1816,  1821,  1830,  1838,  1846,  1854,  1872,  1880,  1888,  1896,
2427:     1904,  1912,  1916,  1920,  1924,  1932,  1940,  1956,  1964,  1972,
2428:     1980,  1988,  1996,  2004,  2008,  2012,  2016,  2020,  2028,  2036,
2429:     2044,  2052,  2072,  2094,  2105,  2112,  2126,  2142,  2144,  2146,
2430:     2148,  2150,  2152,  2154,  2156,  2158,  2160,  2162,  2164,  2166,
2431:     2168,  2170,  2172,  2174,  2176,  2178,  2180,  2184,  2188,  2192,
2432:     2206,  2207,  2208,  2215,  2227,  2242,  2254,  2256,  2268,  2279,
2433:     2303,  2314,  2323,  2327,  2334,  2342,  2350,  2361,  2369,  2397,
2434:     2433,  2444,  2445,  2452,  2458,  2462,  2466,  2470,  2474,  2478,
2435:     2482,  2486,  2490,  2494,  2498,  2502,  2506,  2510,  2514,  2518,
2436:     2520,  2522,  2526,  2535,  2540,  2547,  2562,  2569,  2573,  2577,
2437:     2581,  2585,  2599,  2600,  2604,  2605,  2609,  2610,  2617,  2618,
2438:     2622,  2623,  2628,  2636,  2638,  2652,  2655,  2682,  2683,  2686,
2439:     2687,  2698,  2704,  2711,  2720,  2737,  2782,  2790,  2798,  2806,
2440:     2814,  2835,  2836,  2839,  2840,  2844,  2854,  2855,  2857,  2858,
2441:     2859,  2862,  2863,  2866,  2867,  2868,  2869,  2870,  2871,  2872,
2442:     2873,  2874,  2875,  2876,  2877,  2880,  2882,  2887,  2889,  2894,
2443:     2896,  2898,  2900,  2902,  2904,  2906,  2908,  2922,  2924,  2928,
2444:     2932,  2939,  2944,  2951,  2955,  2961,  2965,  2974,  2985,  2986,
2445:     2990,  2994,  3001,  3002,  3003,  3004,  3005,  3006,  3007,  3008,
2446:     3009,  3010,  3020,  3024,  3031,  3038,  3039,  3055,  3059,  3064,
2447:     3068,  3083,  3088,  3092,  3095,  3098,  3099,  3100,  3103,  3110,
2448:     3120,  3134,  3135,  3139,  3150,  3151,  3154,  3155,  3158,  3162,
2449:     3169,  3173,  3181,  3192,  3193,  3197,  3198,  3202,  3203,  3206,
2450:     3207,  3217,  3218,  3222,  3223,  3226,  3242,  3250,  3258,  3273,
2451:     3291,  3292,  3295,  3296,  3299,  3303,  3304,  3307,  3308,  3309,
2452:     3319,  3320,  3331,  3335,  3362,  3364,  3369,  3371,  3381,  3384,
2453:     3395,  3399,  3403,  3415,  3419,  3428,  3435,  3473,  3477,  3481,
2454:     3485,  3489,  3493,  3497,  3503,  3504,  3520,  3521,  3522,  3525,
2455:     3526,  3532,  3533,  3534,  3537,  3538,  3539,  3542,  3543,  3544,
2456:     3547,  3548,  3551,  3553,  3558,  3559,  3562,  3570,  3571,  3572,
2457:     3573,  3576,  3577,     7,    18,    19,    23,    24,    25,    26,
2458:        7,    16,    34,    41,    46,    47,    48,    49,     8,    33,
2459:       62,    66,    67,    72,    73,    78,    79,    83,    84,    89,
2460:       90,     7,    16,    25,    34,    43,    52,     5,    11,     7,
2461:       20,     9,    16,    26,    33,    44,    45,    50,    51,    52,
2462:       57,    58,    59,    60,    61,    65,    66,    67,    72,    73,
2463:       78,    82,    90,    91,    96,    97,    98,   104,   109,   117,
2464:      118,    10,    16,    22,    28,    38,    39,    47,    58,    70,
2465:       78,    86,    93,   103,   105,   111,   115,   119,   134,   141,
2466:      142,   143,   147,   148,     7,    14,    20,    28,    29,     8,
2467:       22,    36,    48,    56,    70,    71,    72,    73,    74,    87,
2468:       88,    93,    94,    98,    99,     7,    21,    25,    32,    43,
2469:       44,    50,    51,     9,    19,     2,     7,    14,    24,    25,
2470:       32,     3,    10,    17,    24,    31,    38,    45,    55,    55,
2471:       57,    58,     6,     8,    21,    34,    52,    74,    75,    76,
2472:       77,    11,    24,    41,    42,    43,    48,    61,    61,    61,
2473:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2474:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2475:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2476:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2477:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2478:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2479:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2480:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2481:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2482:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2483:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2484:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2485:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2486:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2487:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2488:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2489:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2490:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2491:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2492:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2493:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2494:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2495:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2496:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2497:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2498:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2499:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2500:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2501:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2502:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2503:       61,    61,    62,    62,    62,    62,    62,    62,    62,    62,
2504:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2505:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2506:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2507:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2508:       62,    62,    62,    62,    63,    63,    63,    63,    63,    63,
2509:       63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
2510:       63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
2511:       64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
2512:       64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
2513:       64,    64,    64,    64,    64,    65,    65,    65,    65,    65,
2514:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2515:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2516:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2517:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2518:       65,    65,    65,    65,    65,    65,    65,    66,    66,    66,
2519:       66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
2520:       66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
2521:       66,    66,    66,    66,    67,    67,    67,    67,    67,    67,
2522:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2523:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2524:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2525:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2526:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2527:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2528:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2529:       67,    67
2530: };
2531: #endif
2532: 
2533: #if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
2534: /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
2535:    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
2536: static const char *const yytname[] =
2537: {
2538:   "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
2539:   "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
2540:   "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
2541:   "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
2542:   "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
2543:   "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
2544:   "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
2545:   "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
2546:   "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
2547:   "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
2548:   "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
2549:   "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
2550:   "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
2551:   "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
2552:   "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
2553:   "CROSS", "CSV", "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE",
2554:   "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP",
2555:   "CURRENT_USER", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
2556:   "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
2557:   "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
2558:   "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY",
2559:   "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P",
2560:   "DOUBLE_P", "DROP", "EACH", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
2561:   "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
2562:   "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE",
2563:   "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH",
2564:   "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN",
2565:   "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
2566:   "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GROUP_P", "GROUPING",
2567:   "GROUPING_ID", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P",
2568:   "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE",
2569:   "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT",
2570:   "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
2571:   "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL",
2572:   "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
2573:   "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL",
2574:   "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF",
2575:   "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME",
2576:   "LOCALTIMESTAMP", "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO",
2577:   "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD",
2578:   "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P",
2579:   "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P",
2580:   "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT",
2581:   "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P",
2582:   "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET",
2583:   "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR",
2584:   "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
2585:   "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
2586:   "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PLACING", "PLANS",
2587:   "POLICY", "POSITION", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
2588:   "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
2589:   "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY", "QUOTE", "RANGE",
2590:   "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
2591:   "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
2592:   "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
2593:   "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
2594:   "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
2595:   "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P",
2596:   "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES",
2597:   "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET", "SETOF",
2598:   "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT",
2599:   "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P", "START",
2600:   "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P",
2601:   "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE",
2602:   "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
2603:   "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
2604:   "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT",
2605:   "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P",
2606:   "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE",
2607:   "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING",
2608:   "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
2609:   "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
2610:   "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH",
2611:   "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
2612:   "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
2613:   "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
2614:   "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
2615:   "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
2616:   "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
2617:   "'{'", "'}'", "'#'", "'?'", "':'", "$accept", "stmtblock", "stmtmulti",
2618:   "stmt", "AlterTableStmt", "alter_identity_column_option_list",
2619:   "alter_column_default", "alter_identity_column_option",
2620:   "alter_generic_option_list", "alter_table_cmd", "alter_using",
2621:   "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
2622:   "opt_set_data", "DeallocateStmt", "CreateEnumStmt", "opt_enum_val_list",
2623:   "enum_val_list", "RenameStmt", "opt_column", "InsertStmt", "insert_rest",
2624:   "insert_target", "opt_conf_expr", "opt_with_clause",
2625:   "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
2626:   "returning_clause", "override_kind", "set_target_list", "opt_collate",
2627:   "opt_class", "insert_column_list", "set_clause_list", "index_params",
2628:   "set_target", "PragmaStmt", "CreateSeqStmt", "OptSeqOptList",
2629:   "ExecuteStmt", "execute_param_clause", "AlterSeqStmt", "SeqOptList",
2630:   "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
2631:   "TransactionStmt", "opt_transaction", "CreateStmt",
2632:   "ConstraintAttributeSpec", "def_arg", "OptParenthesizedSeqOptList",
2633:   "generic_option_arg", "key_action", "ColConstraint", "ColConstraintElem",
2634:   "generic_option_elem", "key_update", "key_actions",
2635:   "create_generic_options", "OnCommitOption", "reloptions",
2636:   "opt_no_inherit", "TableConstraint", "TableLikeOption", "reloption_list",
2637:   "ExistingIndex", "ConstraintAttr", "OptWith", "definition",
2638:   "TableLikeOptionList", "generic_option_name", "ConstraintAttributeElem",
2639:   "columnDef", "generic_option_list", "def_list", "index_name",
2640:   "TableElement", "def_elem", "opt_definition", "OptTableElementList",
2641:   "columnElem", "opt_column_list", "ColQualList", "key_delete",
2642:   "reloption_elem", "columnList", "func_type", "ConstraintElem",
2643:   "TableElementList", "key_match", "TableLikeClause", "OptTemp",
2644:   "generated_when", "DropStmt", "drop_type_any_name", "drop_type_name",
2645:   "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
2646:   "type_name_list", "CreateFunctionStmt", "macro_alias", "param_list",
2647:   "UpdateStmt", "CopyStmt", "copy_from", "copy_delimiter",
2648:   "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
2649:   "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
2650:   "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
2651:   "copy_generic_opt_arg_list_item", "copy_file_name",
2652:   "copy_generic_opt_list", "SelectStmt", "select_with_parens",
2653:   "select_no_parens", "select_clause", "simple_select", "with_clause",
2654:   "cte_list", "common_table_expr", "into_clause", "OptTempTableName",
2655:   "opt_table", "all_or_distinct", "distinct_clause", "opt_all_clause",
2656:   "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
2657:   "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
2658:   "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
2659:   "sample_clause", "opt_sample_func", "tablesample_entry",
2660:   "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
2661:   "select_limit_value", "select_offset_value", "select_fetch_first_value",
2662:   "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
2663:   "group_by_list", "group_by_item", "empty_grouping_set", "rollup_clause",
2664:   "cube_clause", "grouping_sets_clause", "grouping_or_grouping_id",
2665:   "having_clause", "qualify_clause", "for_locking_clause",
2666:   "opt_for_locking_clause", "for_locking_items", "for_locking_item",
2667:   "for_locking_strength", "locked_rels_list", "opt_nowait_or_skip",
2668:   "values_clause", "from_clause", "from_list", "table_ref", "joined_table",
2669:   "alias_clause", "opt_alias_clause", "func_alias_clause", "join_type",
2670:   "join_outer", "join_qual", "relation_expr", "func_table",
2671:   "rowsfrom_item", "rowsfrom_list", "opt_col_def_list", "opt_ordinality",
2672:   "where_clause", "TableFuncElementList", "TableFuncElement",
2673:   "opt_collate_clause", "colid_type_list", "RowOrStruct", "Typename",
2674:   "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
2675:   "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
2676:   "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
2677:   "CharacterWithLength", "CharacterWithoutLength", "character",
2678:   "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
2679:   "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
2680:   "minute_keyword", "second_keyword", "millisecond_keyword",
2681:   "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
2682:   "func_application", "func_expr", "func_expr_windowless",
2683:   "func_expr_common_subexpr", "within_group_clause", "filter_clause",
2684:   "export_clause", "window_clause", "window_definition_list",
2685:   "window_definition", "over_clause", "window_specification",
2686:   "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
2687:   "frame_extent", "frame_bound", "qualified_row", "row", "dict_arg",
2688:   "dict_arguments", "sub_type", "all_Op", "MathOp", "qual_Op",
2689:   "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
2690:   "opt_expr_list", "func_arg_list", "func_arg_expr", "type_list",
2691:   "extract_list", "extract_arg", "overlay_list", "overlay_placing",
2692:   "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
2693:   "in_expr", "case_expr", "when_clause_list", "when_clause",
2694:   "case_default", "case_arg", "columnref", "indirection_el",
2695:   "opt_slice_bound", "indirection", "opt_indirection", "opt_asymmetric",
2696:   "opt_target_list", "target_list", "target_el", "except_list",
2697:   "opt_except_list", "replace_list_el", "replace_list", "opt_replace_list",
2698:   "qualified_name_list", "qualified_name", "name_list", "name",
2699:   "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
2700:   "ColIdOrString", "type_function_name", "function_name_token",
2701:   "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
2702:   "ColLabel", "ColLabelOrString", "PrepareStmt", "prep_type_clause",
2703:   "PreparableStmt", "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
2704:   "IndexStmt", "access_method", "access_method_clause", "opt_concurrently",
2705:   "opt_index_name", "opt_reloptions", "opt_unique",
2706:   "AlterObjectSchemaStmt", "CheckPointStmt", "ExportStmt", "ImportStmt",
2707:   "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
2708:   "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
2709:   "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
2710:   "explain_option_name", "VariableSetStmt", "set_rest", "generic_set",
2711:   "var_value", "zone_value", "var_list", "LoadStmt", "file_name",
2712:   "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
2713:   "opt_freeze", "DeleteStmt", "relation_expr_opt_alias",
2714:   "where_or_current_clause", "using_clause", "AnalyzeStmt",
2715:   "VariableResetStmt", "generic_reset", "reset_rest", "VariableShowStmt",
2716:   "show_or_describe", "var_name", "CallStmt", "ViewStmt",
2717:   "opt_check_option", "CreateAsStmt", "opt_with_data", "create_as_target",
2718:   "unreserved_keyword", "col_name_keyword", "func_name_keyword",
2719:   "type_name_keyword", "other_keyword", "type_func_name_keyword",
2720:   "reserved_keyword", 0
2721: };
2722: #endif
2723: 
2724: # ifdef YYPRINT
2725: /* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
2726:    token YYLEX-NUM.  */
2727: static const yytype_uint16 yytoknum[] =
2728: {
2729:        0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
2730:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
2731:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
2732:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
2733:      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
2734:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
2735:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
2736:      325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
2737:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
2738:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
2739:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
2740:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
2741:      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
2742:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
2743:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
2744:      405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
2745:      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
2746:      425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
2747:      435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
2748:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
2749:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
2750:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
2751:      475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
2752:      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
2753:      495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
2754:      505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
2755:      515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
2756:      525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
2757:      535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
2758:      545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
2759:      555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
2760:      565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
2761:      575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
2762:      585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
2763:      595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
2764:      605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
2765:      615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
2766:      625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
2767:      635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
2768:      645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
2769:      655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
2770:      665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
2771:      675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
2772:      685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
2773:      695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
2774:      705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
2775:      715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
2776:      725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
2777:      735,    60,    62,    61,   736,    43,    45,    42,    47,    37,
2778:       94,   737,    91,    93,    40,    41,    46,    59,    44,   123,
2779:      125,    35,    63,    58
2780: };
2781: # endif
2782: 
2783: /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
2784: static const yytype_uint16 yyr1[] =
2785: {
2786:        0,   504,   505,   506,   506,   507,   507,   507,   507,   507,
2787:      507,   507,   507,   507,   507,   507,   507,   507,   507,   507,
2788:      507,   507,   507,   507,   507,   507,   507,   507,   507,   507,
2789:      507,   507,   507,   507,   507,   507,   507,   507,   507,   507,
2790:      508,   508,   508,   508,   508,   508,   508,   508,   509,   509,
2791:      510,   510,   511,   511,   511,   511,   512,   512,   513,   513,
2792:      513,   513,   513,   513,   513,   513,   513,   513,   513,   513,
2793:      513,   513,   513,   513,   513,   513,   513,   513,   513,   513,
2794:      513,   513,   513,   513,   513,   513,   513,   514,   514,   515,
2795:      515,   515,   515,   516,   516,   517,   518,   518,   518,   519,
2796:      519,   519,   519,   520,   521,   521,   522,   522,   523,   523,
2797:      523,   523,   523,   523,   523,   523,   523,   523,   523,   523,
2798:      523,   524,   524,   525,   526,   526,   526,   526,   526,   527,
2799:      527,   528,   528,   528,   529,   529,   530,   531,   531,   532,
2800:      532,   532,   533,   533,   533,   534,   534,   535,   535,   536,
2801:      536,   537,   537,   538,   538,   539,   539,   540,   540,   541,
2802:      541,   542,   543,   543,   543,   544,   544,   545,   545,   546,
2803:      546,   546,   547,   547,   548,   548,   549,   549,   550,   550,
2804:      550,   551,   551,   551,   551,   552,   552,   552,   552,   552,
2805:      552,   552,   552,   552,   552,   552,   552,   552,   552,   553,
2806:      553,   554,   554,   554,   555,   555,   555,   555,   555,   555,
2807:      556,   556,   556,   557,   557,   557,   558,   558,   559,   559,
2808:      559,   559,   559,   559,   560,   560,   561,   562,   562,   562,
2809:      562,   562,   563,   563,   563,   563,   564,   564,   564,   564,
2810:      564,   564,   564,   564,   564,   565,   566,   567,   567,   567,
2811:      567,   567,   568,   568,   569,   569,   569,   569,   570,   571,
2812:      571,   572,   572,   573,   573,   573,   573,   573,   573,   573,
2813:      573,   574,   574,   575,   576,   576,   576,   576,   577,   577,
2814:      577,   577,   578,   579,   579,   579,   580,   581,   581,   581,
2815:      581,   581,   581,   582,   583,   583,   584,   584,   585,   586,
2816:      586,   586,   587,   587,   588,   588,   589,   589,   590,   591,
2817:      591,   592,   592,   593,   594,   594,   594,   594,   595,   595,
2818:      596,   596,   596,   597,   597,   597,   597,   597,   597,   598,
2819:      598,   599,   599,   599,   599,   600,   601,   601,   601,   601,
2820:      601,   601,   601,   601,   602,   602,   603,   603,   603,   603,
2821:      603,   603,   603,   603,   604,   604,   604,   604,   604,   604,
2822:      604,   604,   604,   604,   604,   604,   604,   604,   604,   605,
2823:      605,   605,   605,   605,   605,   605,   606,   606,   607,   607,
2824:      607,   608,   608,   608,   609,   609,   610,   611,   611,   612,
2825:      612,   613,   614,   614,   615,   615,   616,   616,   617,   617,
2826:      618,   618,   619,   619,   620,   620,   621,   621,   622,   622,
2827:      622,   622,   622,   623,   624,   624,   625,   625,   626,   626,
2828:      627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
2829:      627,   627,   627,   627,   628,   629,   629,   629,   630,   630,
2830:      631,   631,   632,   632,   633,   633,   633,   633,   633,   633,
2831:      633,   633,   634,   634,   635,   635,   635,   635,   635,   635,
2832:      635,   636,   636,   636,   637,   637,   638,   639,   639,   640,
2833:      640,   640,   640,   640,   640,   640,   640,   640,   641,   641,
2834:      642,   642,   642,   643,   643,   644,   644,   645,   645,   645,
2835:      646,   646,   647,   647,   647,   648,   648,   649,   649,   650,
2836:      650,   650,   651,   651,   651,   652,   652,   652,   652,   653,
2837:      653,   654,   654,   654,   654,   655,   655,   656,   656,   656,
2838:      656,   656,   656,   657,   657,   658,   658,   659,   659,   659,
2839:      659,   660,   661,   661,   662,   662,   663,   663,   663,   663,
2840:      663,   664,   665,   665,   665,   666,   666,   667,   667,   668,
2841:      668,   669,   669,   669,   669,   670,   670,   671,   671,   671,
2842:      671,   671,   672,   673,   674,   675,   676,   676,   677,   677,
2843:      678,   678,   679,   679,   680,   680,   681,   681,   682,   683,
2844:      683,   683,   683,   684,   684,   685,   685,   685,   686,   686,
2845:      687,   687,   688,   688,   689,   689,   689,   689,   689,   689,
2846:      689,   690,   690,   690,   690,   690,   690,   691,   691,   691,
2847:      691,   692,   692,   693,   693,   693,   693,   693,   694,   694,
2848:      694,   694,   695,   695,   696,   696,   697,   697,   697,   697,
2849:      698,   698,   699,   700,   700,   701,   701,   702,   702,   703,
2850:      703,   704,   704,   705,   706,   706,   707,   707,   708,   708,
2851:      709,   709,   709,   709,   709,   709,   709,   709,   710,   710,
2852:      710,   711,   711,   711,   711,   711,   711,   711,   712,   712,
2853:      712,   712,   713,   714,   714,   715,   715,   715,   715,   715,
2854:      715,   715,   715,   715,   715,   715,   716,   716,   717,   717,
2855:      718,   718,   719,   720,   721,   721,   722,   722,   723,   724,
2856:      725,   725,   725,   725,   725,   725,   726,   726,   727,   727,
2857:      727,   727,   728,   729,   729,   729,   730,   730,   731,   731,
2858:      732,   732,   733,   733,   734,   734,   735,   735,   736,   736,
2859:      737,   737,   738,   738,   738,   738,   738,   738,   738,   738,
2860:      738,   738,   738,   738,   738,   738,   738,   738,   739,   739,
2861:      739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
2862:      739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
2863:      739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
2864:      739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
2865:      739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
2866:      739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
2867:      739,   739,   739,   739,   739,   739,   739,   740,   740,   740,
2868:      740,   740,   740,   740,   740,   740,   740,   740,   740,   740,
2869:      740,   740,   740,   740,   740,   740,   740,   740,   740,   740,
2870:      741,   741,   741,   741,   741,   741,   741,   741,   741,   741,
2871:      741,   741,   742,   742,   742,   742,   742,   742,   742,   743,
2872:      743,   744,   744,   745,   745,   745,   745,   745,   745,   745,
2873:      745,   745,   745,   745,   745,   745,   745,   745,   745,   745,
2874:      745,   745,   745,   745,   745,   745,   745,   745,   745,   745,
2875:      745,   745,   746,   746,   747,   747,   748,   748,   749,   749,
2876:      750,   750,   751,   752,   752,   752,   753,   754,   754,   755,
2877:      755,   756,   756,   756,   757,   757,   758,   758,   758,   758,
2878:      758,   759,   759,   760,   760,   761,   762,   762,   763,   763,
2879:      763,   764,   764,   765,   765,   765,   765,   765,   765,   765,
2880:      765,   765,   765,   765,   765,   766,   766,   767,   767,   768,
2881:      768,   768,   768,   768,   768,   768,   768,   769,   769,   770,
2882:      770,   771,   771,   772,   772,   773,   773,   773,   774,   774,
2883:      775,   775,   776,   776,   776,   776,   776,   776,   776,   776,
2884:      776,   776,   777,   777,   778,   779,   779,   780,   780,   780,
2885:      780,   780,   780,   781,   782,   783,   783,   783,   784,   784,
2886:      785,   786,   786,   787,   788,   788,   789,   789,   790,   790,
2887:      791,   791,   791,   792,   792,   793,   793,   794,   794,   795,
2888:      795,   796,   796,   797,   797,   798,   798,   798,   798,   798,
2889:      799,   799,   800,   800,   801,   802,   802,   803,   803,   803,
2890:      804,   804,   805,   805,   806,   806,   807,   808,   809,   809,
2891:      810,   810,   810,   810,   810,   810,   810,   810,   810,   810,
2892:      810,   810,   810,   810,   811,   812,   813,   813,   813,   814,
2893:      814,   815,   815,   815,   816,   816,   816,   817,   817,   817,
2894:      818,   818,   819,   819,   820,   820,   821,   822,   822,   822,
2895:      822,   823,   823,   824,   825,   825,   826,   826,   826,   826,
2896:      827,   827,   828,   828,   829,   829,   829,   829,   830,   830,
2897:      831,   832,   832,   833,   833,   834,   834,   835,   835,   836,
2898:      836,   837,   837,   837,   837,   837,   837,   838,   838,   839,
2899:      840,   841,   841,   841,   841,   842,   842,   843,   843,   843,
2900:      844,   844,   844,   844,   844,   845,   845,   845,   846,   846,
2901:      847,   847,   848,   848,   849,   849,   849,   849,   850,   851,
2902:      851,   852,   852,   852,   852,   853,   853,   853,   853,   854,
2903:      854,   854,   854,   855,   855,   856,   856,   856,   856,   856,
2904:      856,   856,   857,   857,   858,   858,   858,   859,   859,   860,
2905:      860,   860,   860,   860,   861,   861,   861,   861,   861,   862,
2906:      862,   863,   863,   864,   864,   865,   866,   866,   866,   867,
2907:      867,   868,   868,   869,   869,   870,   871,   871,   872,   872,
2908:      872,   873,   873,   873,   873,   873,   873,   873,   874,   874,
2909:      875,   875,   876,   877,   877,   877,   877,   878,   878,   878,
2910:      878,   879,   879,   880,   880,   880,   881,   882,   882,   882,
2911:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2912:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2913:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2914:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2915:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2916:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2917:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2918:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2919:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2920:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2921:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2922:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2923:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2924:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2925:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2926:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2927:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2928:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2929:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2930:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2931:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2932:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2933:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2934:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2935:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2936:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2937:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2938:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2939:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2940:      882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
2941:      882,   882,   883,   883,   883,   883,   883,   883,   883,   883,
2942:      883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
2943:      883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
2944:      883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
2945:      883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
2946:      883,   883,   883,   883,   884,   884,   884,   884,   884,   884,
2947:      884,   884,   884,   884,   884,   884,   884,   884,   884,   884,
2948:      884,   884,   884,   884,   884,   884,   884,   884,   884,   884,
2949:      885,   885,   885,   885,   885,   885,   885,   885,   885,   885,
2950:      885,   885,   885,   885,   885,   885,   885,   885,   885,   885,
2951:      885,   885,   885,   885,   885,   886,   886,   886,   886,   886,
2952:      886,   886,   886,   886,   886,   886,   886,   886,   886,   886,
2953:      886,   886,   886,   886,   886,   886,   886,   886,   886,   886,
2954:      886,   886,   886,   886,   886,   886,   886,   886,   886,   886,
2955:      886,   886,   886,   886,   886,   886,   886,   886,   886,   886,
2956:      886,   886,   886,   886,   886,   886,   886,   887,   887,   887,
2957:      887,   887,   887,   887,   887,   887,   887,   887,   887,   887,
2958:      887,   887,   887,   887,   887,   887,   887,   887,   887,   887,
2959:      887,   887,   887,   887,   888,   888,   888,   888,   888,   888,
2960:      888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
2961:      888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
2962:      888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
2963:      888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
2964:      888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
2965:      888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
2966:      888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
2967:      888,   888
2968: };
2969: 
2970: /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
2971: static const yytype_uint8 yyr2[] =
2972: {
2973:        0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
2974:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2975:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2976:        1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
2977:        4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
2978:        3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
2979:        3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
2980:        4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
2981:        6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
2982:        2,     2,     2,     1,     3,     4,     2,     1,     0,     2,
2983:        3,     2,     3,     8,     1,     0,     1,     3,     6,     6,
2984:        8,     6,     8,     6,     8,     6,     8,     8,    10,     8,
2985:       10,     1,     0,     7,     1,     4,     4,     7,     2,     1,
2986:        3,     4,     3,     0,     1,     0,     2,     3,     5,     8,
2987:        5,     0,     5,     5,     7,     2,     0,     1,     1,     1,
2988:        3,     2,     0,     1,     0,     1,     3,     1,     3,     1,
2989:        3,     2,     2,     4,     5,     5,     8,     1,     0,     3,
2990:        9,    12,     3,     0,     4,     6,     1,     2,     1,     1,
2991:        0,     1,     2,     2,     1,     2,     2,     1,     2,     3,
2992:        2,     2,     2,     2,     3,     3,     3,     1,     3,     1,
2993:        0,     1,     2,     2,     2,     2,     2,     2,     2,     2,
2994:        1,     1,     0,     9,    12,    11,     0,     2,     1,     1,
2995:        1,     1,     1,     1,     3,     0,     1,     2,     1,     1,
2996:        2,     2,     3,     1,     1,     2,     2,     1,     2,     3,
2997:        5,     3,     2,     5,     5,     2,     3,     1,     1,     2,
2998:        2,     0,     4,     0,     3,     4,     4,     0,     3,     2,
2999:        0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
3000:        1,     1,     3,     3,     1,     2,     2,     2,     2,     2,
3001:        2,     0,     3,     3,     3,     0,     1,     2,     1,     2,
3002:        2,     2,     2,     4,     1,     3,     1,     3,     1,     1,
3003:        1,     1,     3,     1,     2,     0,     1,     0,     1,     3,
3004:        0,     2,     0,     3,     3,     1,     5,     3,     1,     3,
3005:        1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
3006:        3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
3007:        2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
3008:        6,     8,     4,     6,     1,     1,     1,     1,     1,     2,
3009:        1,     2,     1,     1,     1,     3,     3,     3,     3,     2,
3010:        2,     1,     3,     1,     1,     1,     1,     3,     1,     1,
3011:        0,     1,     1,     1,     1,     3,     6,     1,     1,     2,
3012:        3,     8,    11,     9,     1,     1,     3,     0,     1,     3,
3013:        1,     0,     1,     0,     1,     0,     1,     3,     1,     1,
3014:        1,     3,     0,     2,     2,     0,     2,     0,     1,     0,
3015:        1,     1,     1,     3,     3,     1,     1,     3,     3,     3,
3016:        3,     4,     3,     2,     1,     1,     1,     1,     1,     3,
3017:        1,     1,     3,     3,     1,     2,     4,     4,     2,     3,
3018:        5,     5,     1,     1,    11,    11,     1,     2,     4,     4,
3019:        4,     2,     2,     3,     1,     3,     6,     2,     0,     3,
3020:        3,     4,     4,     4,     4,     3,     2,     1,     1,     0,
3021:        1,     1,     0,     1,     5,     1,     0,     2,     2,     0,
3022:        1,     0,     3,     5,     5,     1,     3,     4,     3,     1,
3023:        1,     0,     2,     2,     0,     2,     2,     1,     1,     1,
3024:        0,     2,     4,     5,     4,     2,     3,     2,     2,     2,
3025:        2,     1,     2,     3,     0,     1,     0,     5,     1,     4,
3026:        6,     2,     1,     0,     4,     0,     1,     1,     2,     2,
3027:        2,     1,     1,     2,     2,     1,     1,     1,     1,     1,
3028:        1,     3,     3,     3,     0,     1,     3,     1,     1,     1,
3029:        1,     1,     2,     4,     4,     5,     1,     1,     2,     0,
3030:        2,     0,     1,     3,     1,     0,     1,     2,     3,     2,
3031:        4,     2,     3,     2,     0,     1,     2,     0,     4,     5,
3032:        2,     0,     1,     3,     3,     3,     3,     3,     3,     1,
3033:        4,     3,     4,     5,     4,     5,     4,     5,     2,     4,
3034:        1,     1,     0,     1,     4,     5,     4,     0,     2,     2,
3035:        2,     1,     1,     0,     4,     2,     1,     2,     2,     4,
3036:        2,     6,     2,     1,     3,     4,     0,     2,     0,     2,
3037:        0,     1,     3,     3,     2,     0,     2,     4,     1,     1,
3038:        2,     3,     5,     6,     2,     3,     5,     5,     3,     4,
3039:        0,     1,     1,     1,     1,     1,     2,     4,     1,     1,
3040:        1,     1,     2,     3,     0,     1,     1,     1,     1,     1,
3041:        2,     2,     2,     2,     2,     1,     3,     0,     1,     1,
3042:        1,     1,     5,     2,     1,     1,     1,     1,     4,     1,
3043:        2,     2,     1,     3,     3,     2,     1,     0,     5,     2,
3044:        5,     2,     1,     3,     3,     0,     1,     1,     1,     1,
3045:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3046:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3047:        3,     3,     3,     3,     3,     3,     3,     0,     1,     3,
3048:        3,     5,     2,     2,     3,     3,     3,     3,     3,     3,
3049:        3,     3,     3,     3,     3,     3,     3,     2,     2,     3,
3050:        3,     2,     2,     3,     3,     5,     4,     6,     3,     5,
3051:        4,     6,     4,     6,     5,     7,     3,     2,     4,     3,
3052:        2,     1,     3,     3,     3,     3,     3,     3,     4,     3,
3053:        4,     3,     4,     5,     6,     6,     7,     6,     7,     6,
3054:        7,     3,     4,     4,     6,     1,     4,     1,     3,     2,
3055:        2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
3056:        3,     3,     3,     3,     2,     2,     5,     6,     6,     7,
3057:        1,     1,     2,     2,     2,     4,     1,     2,     1,     2,
3058:        2,     4,     3,     6,     7,     9,     7,     7,     4,     5,
3059:        1,     1,     1,     5,     1,     1,     4,     1,     4,     1,
3060:        4,     1,     4,     1,     1,     1,     1,     1,     1,     6,
3061:        6,     4,     4,     4,     4,     6,     5,     5,     5,     4,
3062:        6,     4,     5,     0,     5,     0,     1,     0,     2,     0,
3063:        1,     3,     3,     2,     2,     0,     6,     1,     0,     3,
3064:        0,     2,     2,     0,     1,     4,     2,     2,     2,     2,
3065:        2,     4,     3,     1,     5,     3,     1,     3,     1,     1,
3066:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3067:        1,     1,     1,     1,     1,     1,     4,     1,     4,     1,
3068:        4,     1,     2,     1,     2,     1,     2,     1,     3,     1,
3069:        3,     1,     0,     1,     3,     1,     3,     3,     1,     3,
3070:        3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
3071:        1,     1,     4,     3,     2,     3,     0,     3,     3,     2,
3072:        2,     1,     0,     2,     2,     3,     2,     1,     1,     3,
3073:        5,     1,     2,     4,     2,     0,     1,     0,     1,     2,
3074:        2,     3,     5,     1,     0,     1,     2,     0,     2,     1,
3075:        0,     1,     0,     1,     3,     3,     2,     1,     3,     5,
3076:        4,     2,     1,     0,     3,     1,     3,     4,     2,     0,
3077:        1,     3,     1,     2,     1,     3,     1,     1,     1,     2,
3078:        1,     1,     2,     1,     1,     2,     7,     2,     5,     3,
3079:        3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3080:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3081:        1,     2,     2,     3,     3,     0,     1,     1,     1,     1,
3082:        1,     1,     1,     5,     3,     0,     1,     1,     1,     1,
3083:        4,     7,     2,     0,     1,     1,     1,     1,    13,    16,
3084:        1,     2,     0,     1,     0,     1,     0,     2,     0,     1,
3085:        0,     6,     8,     6,     8,     6,     8,     2,     1,     4,
3086:        3,     2,     4,     3,     5,     1,     0,     1,     1,     0,
3087:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3088:        1,     3,     1,     1,     1,     1,     1,     1,     2,     1,
3089:        1,     2,     3,     3,     3,     1,     3,     3,     2,     3,
3090:        3,     3,     3,     1,     1,     1,     1,     3,     5,     1,
3091:        1,     1,     1,     3,     2,     2,     3,     1,     1,     4,
3092:        5,     5,     4,     6,     1,     1,     1,     1,     1,     1,
3093:        0,     1,     3,     1,     0,     7,     1,     2,     3,     2,
3094:        0,     2,     0,     2,     4,     2,     1,     1,     1,     2,
3095:        3,     2,     2,     2,     2,     3,     4,     2,     1,     1,
3096:        1,     3,     2,     9,    11,    12,    14,     3,     4,     4,
3097:        0,     7,    10,     2,     3,     0,     4,     1,     1,     1,
3098:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3099:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3100:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3101:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3102:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3103:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3104:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3105:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3106:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3107:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3108:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3109:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3110:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3111:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3112:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3113:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3114:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3115:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3116:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3117:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3118:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3119:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3120:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3121:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3122:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3123:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3124:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3125:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3126:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3127:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3128:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3129:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3130:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3131:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3132:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3133:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3134:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3135:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3136:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3137:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3138:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3139:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3140:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3141:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3142:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3143:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3144:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3145:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3146:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3147:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3148:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3149:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3150:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3151:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3152:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3153:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3154:        1,     1
3155: };
3156: 
3157: /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
3158:    STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
3159:    means the default is an error.  */
3160: static const yytype_uint16 yydefact[] =
3161: {
3162:      135,   212,     0,  1153,  1152,   212,     0,  1128,   212,   419,
3163:      343,     0,  1229,     0,   212,     0,   135,     0,     0,     0,
3164:        0,     0,     0,     0,     0,   212,   486,     0,  1228,   212,
3165:        0,     0,  1200,     0,     0,     0,     0,     0,     2,     4,
3166:        7,    18,    13,    30,    26,     0,    28,    16,    21,     6,
3167:       32,    17,    20,    14,    33,    11,    31,   453,   440,   491,
3168:      452,   134,   456,    29,    15,    25,     5,    10,    23,    24,
3169:       22,  1136,    36,    27,    34,    19,     8,    35,    37,     0,
3170:        9,    38,    12,   211,   210,   204,     0,     0,     0,     0,
3171:        0,   205,  1066,  1247,  1248,  1249,  1250,  1251,  1252,  1253,
3172:     1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1604,
3173:     1263,  1264,  1265,  1552,  1553,  1605,  1554,  1555,  1266,  1267,
3174:     1268,  1269,  1270,  1271,  1272,  1273,  1556,  1557,  1274,  1275,
3175:     1276,  1277,  1278,  1558,  1606,  1279,  1280,  1281,  1282,  1283,
3176:     1284,  1607,  1285,  1286,  1287,  1288,  1289,  1290,  1291,  1292,
3177:     1293,  1608,  1294,  1295,  1296,  1609,  1297,  1298,  1299,  1300,
3178:     1301,  1302,  1303,  1559,  1560,  1304,  1305,  1306,  1307,  1308,
3179:     1309,  1310,  1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,
3180:     1319,  1320,  1321,  1322,  1323,  1324,  1325,  1326,  1327,  1328,
3181:     1329,  1330,  1331,  1561,  1332,  1333,  1334,  1335,  1336,  1562,
3182:     1337,  1338,  1339,  1563,  1340,  1341,  1342,  1610,  1611,  1343,
3183:     1344,  1345,  1612,  1346,  1347,  1564,  1565,  1348,  1349,  1350,
3184:     1351,  1352,  1353,  1354,  1355,  1613,  1356,  1357,  1358,  1359,
3185:     1360,  1361,  1362,  1363,  1364,  1365,  1366,  1614,  1566,  1367,
3186:     1368,  1369,  1370,  1371,  1567,  1568,  1569,  1372,  1615,  1616,
3187:     1373,  1617,  1374,  1375,  1376,  1377,  1378,  1379,  1618,  1380,
3188:     1619,  1381,  1382,  1383,  1384,  1385,  1386,  1387,  1388,  1570,
3189:     1389,  1390,  1391,  1392,  1393,  1394,  1395,  1396,  1397,  1398,
3190:     1399,  1400,  1401,  1402,  1403,  1404,  1405,  1406,  1571,  1621,
3191:     1572,  1407,  1408,  1409,  1573,  1410,  1411,  1622,  1412,  1574,
3192:     1413,  1575,  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,
3193:     1422,  1576,  1623,  1423,  1624,  1577,  1424,  1425,  1426,  1427,
3194:     1428,  1429,  1430,  1431,  1432,  1433,  1434,  1435,  1578,  1436,
3195:     1437,  1579,  1438,  1439,  1440,  1441,  1442,  1443,  1444,  1445,
3196:     1446,  1447,  1448,  1449,  1580,  1450,  1451,  1452,  1453,  1454,
3197:     1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,  1463,  1464,
3198:     1465,  1466,  1467,  1468,  1625,  1469,  1470,  1471,  1581,  1472,
3199:     1473,  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,  1482,
3200:     1483,  1484,  1485,  1486,  1487,  1488,  1582,  1489,  1490,  1491,
3201:     1626,  1492,  1493,  1583,  1494,  1495,  1496,  1497,  1498,  1499,
3202:     1500,  1501,  1502,  1503,  1504,  1505,  1584,  1506,  1585,  1507,
3203:     1508,  1509,  1510,  1628,  1511,  1512,  1513,  1514,  1515,  1586,
3204:     1587,  1516,  1517,  1588,  1518,  1589,  1519,  1520,  1590,  1521,
3205:     1522,  1523,  1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,
3206:     1532,  1533,  1534,  1535,  1591,  1592,  1536,  1629,  1537,  1538,
3207:     1539,  1540,  1541,  1542,  1543,  1544,  1545,  1546,  1547,  1593,
3208:     1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,
3209:     1548,  1549,  1550,  1551,  1232,     0,     0,  1048,  1067,  1068,
3210:     1076,   207,   418,   135,     0,   387,     0,     0,   388,     0,
3211:        0,   337,   336,     0,  1119,   342,     0,     0,     0,  1066,
3212:      101,  1570,  1438,  1584,    99,  1046,  1067,     0,   362,   363,
3213:        0,   371,     0,   356,   360,   357,     0,   381,   373,   382,
3214:      374,   355,   375,   364,   354,     0,   383,     0,   358,     0,
3215:        0,     0,   208,   173,   343,   135,     0,  1141,  1142,  1140,
3216:     1131,  1136,  1143,  1144,     0,  1127,     0,     0,  1065,  1187,
3217:     1188,  1185,  1184,   162,  1095,  1217,  1586,  1516,  1230,  1218,
3218:     1215,  1216,   209,   485,   483,     0,  1022,  1346,  1383,  1476,
3219:     1487,  1586,  1161,  1165,     0,   206,  1591,  1222,     0,  1223,
3220:     1070,     0,   457,   626,  1069,  1042,  1199,     0,  1204,     0,
3221:     1452,   461,   464,  1085,   462,   453,     0,     1,   135,     0,
3222:        0,     0,   482,   482,     0,   482,     0,   445,   453,   448,
3223:      452,     0,  1135,  1213,  1227,  1586,  1516,  1221,  1224,  1354,
3224:        0,     0,  1354,     0,  1354,     0,  1354,     0,     0,  1014,
3225:        0,  1015,  1049,  1097,  1098,  1096,     0,  1099,   310,   341,
3226:      340,   339,   338,   343,  1354,  1103,  1080,     0,     0,     0,
3227:        0,     0,     0,  1114,   102,   100,   369,   370,     0,   361,
3228:      359,     0,  1077,  1630,   678,  1631,   707,   685,   707,   707,
3229:     1632,  1633,  1634,  1635,   674,   674,  1319,   687,  1636,  1637,
3230:     1638,  1354,  1639,  1640,   675,   676,   712,  1641,  1642,  1643,
3231:     1644,  1645,     0,     0,  1646,   707,  1647,   674,  1648,  1649,
3232:      679,  1650,   648,     0,  1651,   677,   649,  1652,   715,   715,
3233:     1653,   702,  1654,   380,     0,   384,   660,   661,   662,   663,
3234:      688,   689,   664,   694,   695,   699,   665,   747,   674,  1078,
3235:     1079,  1354,   380,   376,  1354,   380,  1044,  1354,     0,     0,
3236:      169,     0,  1133,  1145,  1655,  1656,  1657,  1658,  1660,  1659,
3237:     1661,  1662,  1663,  1664,  1665,  1666,  1667,  1668,  1669,  1672,
3238:     1670,  1671,  1673,  1674,  1675,  1676,  1677,  1678,  1679,  1680,
3239:     1681,  1682,  1683,  1684,  1685,  1686,  1687,  1688,  1689,  1690,
3240:     1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,  1700,
3241:     1701,  1702,  1703,  1704,  1705,  1706,  1159,     0,  1160,  1150,
3242:     1139,  1146,  1147,   135,   417,  1186,  1130,     0,     0,     0,
3243:        0,  1219,     0,     0,     0,  1051,  1053,  1054,   945,  1064,
3244:     1017,     0,  1553,  1554,  1555,  1007,     0,  1556,  1557,  1558,
3245:     1606,   877,   864,   873,   878,   865,   867,   874,  1559,  1560,
3246:      815,  1561,  1562,  1062,  1563,  1564,  1565,  1567,  1568,  1569,
3247:      869,   871,  1571,  1572,     0,  1063,  1574,  1575,  1419,  1577,
3248:     1578,  1580,  1581,   875,  1583,  1585,  1586,  1587,  1588,  1589,
3249:     1061,  1590,   876,  1592,     0,     0,     0,  1033,   962,     0,
3250:        0,     0,  1017,   848,     0,     0,   668,   669,   690,   691,
3251:      670,   696,   697,   671,     0,  1027,   748,   893,  1017,   860,
3252:      923,   791,     0,   846,   840,   468,  1023,     0,   841,  1050,
3253:     1017,  1008,   468,  1021,  1164,  1162,  1168,  1163,     0,     0,
3254:        0,     0,     0,   628,   627,  1043,  1198,  1196,  1197,  1195,
3255:     1194,  1201,     0,  1203,  1136,   959,     0,  1008,   463,     0,
3256:        0,     0,   443,   442,     3,     0,     0,  1206,     0,   480,
3257:      481,     0,     0,     0,     0,     0,     0,     0,     0,   575,
3258:      507,   508,   510,   572,   576,   584,     0,   449,     0,  1085,
3259:     1225,     0,     0,     0,   122,   122,     0,     0,     0,     0,
3260:        0,    93,    42,    86,     0,     0,     0,     0,   187,   200,
3261:        0,     0,     0,     0,     0,   197,     0,     0,   180,    44,
3262:      174,   176,     0,   122,     0,    40,     0,     0,     0,    46,
3263:     1066,     0,  1604,  1605,  1606,  1607,  1608,   878,     0,  1610,
3264:     1611,  1612,  1613,  1614,  1615,  1616,  1617,  1618,  1619,  1570,
3265:     1621,  1622,  1623,  1624,  1625,  1626,  1584,  1628,  1590,     0,
3266:     1629,     0,   852,   965,   491,   963,  1086,     0,  1067,  1073,
3267:     1013,     0,  1087,  1734,  1735,  1736,  1737,  1738,  1739,  1740,
3268:     1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,
3269:     1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,  1760,
3270:     1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,
3271:     1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,  1780,
3272:     1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,
3273:     1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,  1799,  1800,
3274:     1801,  1802,  1803,  1804,  1805,  1806,  1694,  1807,  1808,  1809,
3275:     1810,  1811,  1010,  1047,  1089,  1088,  1090,  1016,     0,     0,
3276:      415,     0,     0,  1100,     0,  1081,     0,     0,  1354,   168,
3277:     1354,   310,     0,   310,     0,     0,  1113,  1116,   372,   368,
3278:      366,   365,   367,   706,   693,   701,   700,     0,   683,   682,
3279:      681,     0,   680,     0,     0,   707,   707,   705,   684,   660,
3280:        0,     0,     0,   711,     0,   709,   378,   379,     0,   352,
3281:        0,   654,   650,     0,   720,   721,   722,   723,   730,   731,
3282:      728,   729,   724,   725,   718,   719,   726,   727,   716,   717,
3283:        0,   732,   733,   734,   735,   736,   737,   738,   739,   666,
3284:      672,     0,     0,   347,     0,     0,   349,     0,     0,     0,
3285:        0,   135,     0,   181,  1155,  1156,  1154,     0,     0,  1138,
3286:      184,   201,  1149,  1158,  1148,  1157,  1137,  1132,     0,  1129,
3287:      406,  1174,  1173,  1182,   163,     0,   968,     0,   135,  1220,
3288:     1231,     0,   844,   962,  1006,     0,     0,     0,     0,     0,
3289:        0,   850,   971,     0,     0,   771,     0,     0,     0,   986,
3290:        0,   992,     0,     0,     0,   772,   752,   753,     0,  1032,
3291:     1039,   961,     0,   848,   959,     0,   926,     0,  1069,     0,
3292:      842,   843,   849,     0,  1057,     0,   747,   747,  1026,   945,
3293:        0,   942,   943,   944,     0,     0,     0,  1020,     0,   953,
3294:      955,     0,     0,   787,   951,     0,   790,     0,     0,     0,
3295:        0,   939,   940,   941,   933,   934,   935,   936,   937,   938,
3296:      949,   932,   768,     0,     0,   895,   847,     0,     0,   767,
3297:        0,     0,     0,   591,     0,  1055,  1052,     0,  1009,   591,
3298:     1176,  1180,  1181,  1179,     0,  1175,  1167,  1166,  1171,  1169,
3299:     1172,  1170,     0,  1192,     0,  1189,   588,     0,   465,     0,
3300:        0,  1212,     0,   129,     0,  1207,     0,   460,   459,   501,
3301:      501,   492,   495,   501,   458,   549,   550,     0,     0,     0,
3302:        0,   581,   579,  1051,  1064,   537,   511,   536,     0,     0,
3303:      515,     0,   541,   748,   574,   447,   505,   506,   509,   446,
3304:        0,   577,     0,   587,   575,   510,     0,  1214,  1226,     0,
3305:        0,     0,     0,     0,  1354,     0,     0,    77,    58,   262,
3306:        0,   121,     0,     0,     0,     0,     0,     0,     0,    85,
3307:       82,    83,    84,     0,     0,     0,     0,   185,   186,   199,
3308:        0,   190,   191,   188,   192,   193,     0,     0,   178,   179,
3309:        0,     0,     0,     0,   177,     0,     0,     0,     0,     0,
3310:        0,     0,     0,   491,   491,   491,   858,     0,   489,   490,
3311:        0,     0,  1011,  1014,   405,   318,     0,   308,     0,     0,
3312:        0,     0,     0,     0,   343,  1106,  1104,  1102,  1105,  1107,
3313:     1082,     0,     0,     0,     0,   165,   167,     0,   307,   281,
3314:        0,  1118,   389,     0,     0,  1354,  1115,   298,     0,     0,
3315:        0,     0,   380,     0,   704,   703,   655,   651,     0,     0,
3316:        0,     0,   385,     0,     0,     0,     0,     0,     0,     0,
3317:        0,     0,     0,   380,   377,   380,  1045,     0,   380,   172,
3318:     1354,   310,     0,  1134,  1151,   182,   202,   183,   203,   438,
3319:        0,   412,   420,   425,   403,     0,   403,     0,   422,   426,
3320:      403,   421,   403,   416,     0,   164,     0,  1094,     0,  1093,
3321:        0,  1018,     0,     0,  1005,  1001,     0,     0,     0,     0,
3322:        0,   972,   973,   974,   975,   976,   977,   978,   979,   980,
3323:        0,     0,   981,     0,     0,     0,   931,   942,   943,   944,
3324:      939,   940,   941,   933,   934,   935,   936,   937,   938,   957,
3325:        0,     0,     0,     0,     0,     0,     0,     0,   817,     0,
3326:        0,   840,   922,     0,   959,   991,     0,     0,     0,     0,
3327:        0,     0,   959,   997,     0,     0,     0,  1031,     0,  1028,
3328:      793,  1017,     0,     0,   792,     0,     0,     0,  1059,  1060,
3329:      749,   763,   764,   765,   769,  1092,  1091,  1025,     0,  1019,
3330:        0,     0,   750,   773,   778,     0,   998,   811,     0,   799,
3331:        0,   786,     0,   797,   801,   774,   789,     0,   770,     0,
3332:     1020,   954,   956,     0,   952,     0,   760,   761,   762,   754,
3333:      755,   756,   757,   758,   759,   766,   930,   928,   929,     0,
3334:        0,     0,   897,   794,     0,     0,   796,   795,  1346,  1383,
3335:        0,   479,   479,   479,   467,   477,  1024,     0,   640,   491,
3336:     1033,   640,     0,   747,   629,  1085,  1202,  1190,  1191,   960,
3337:     1084,   135,     0,  1210,     0,     0,     0,   141,   124,     0,
3338:     1208,     0,   157,   591,     0,  1017,   499,   500,   504,   504,
3339:        0,     0,   504,  1581,  1472,     0,     0,     0,     0,   542,
3340:      582,     0,   573,   539,   540,     0,   538,  1051,   543,  1050,
3341:      544,   547,   548,   516,   583,  1040,   585,     0,   578,   451,
3342:      450,   589,     0,    43,     0,  1354,    60,     0,     0,     0,
3343:        0,     0,     0,   216,   253,   216,    98,  1354,   380,  1354,
3344:      380,  1251,  1320,  1488,     0,    56,    89,     0,   286,   115,
3345:        0,   271,   315,    79,    94,   108,     0,     0,    45,   175,
3346:      189,   194,   111,   198,   195,  1123,   196,   122,     0,    41,
3347:        0,   109,     0,  1121,     0,     0,    47,   113,  1125,   489,
3348:      489,   489,     0,   964,     0,     0,     0,   966,   967,  1013,
3349:        0,   404,     0,   309,     0,   414,   394,   395,   405,     0,
3350:        0,   310,  1103,     0,  1083,   105,     0,     0,     0,     0,
3351:      301,   299,   329,     0,   306,   300,   308,     0,     0,   257,
3352:        0,  1245,     0,     0,   390,   386,     0,     0,     0,   673,
3353:      686,   353,   660,     0,   714,   713,   715,   715,   660,     0,
3354:      646,     0,   658,     0,   698,   667,   740,   741,   742,   743,
3355:      744,   745,   746,   346,   348,     0,   350,     0,     0,   407,
3356:        0,   410,     0,   409,   413,   408,   402,     0,   433,     0,
3357:        0,     0,     0,     0,     0,  1183,   969,   484,   816,     0,
3358:        0,  1002,     0,     0,   891,     0,   866,   868,   881,     0,
3359:      870,   872,     0,   946,     0,     0,     0,   882,   819,   820,
3360:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3361:        0,     0,     0,     0,     0,     0,     0,   835,   834,   883,
3362:      921,     0,     0,   989,   990,   884,     0,     0,   996,     0,
3363:        0,     0,   889,     0,     0,     0,     0,  1038,   845,   960,
3364:      927,   925,   851,   747,     0,     0,     0,     0,     0,     0,
3365:        0,   800,   788,     0,   798,   802,     0,     0,     0,   782,
3366:        0,     0,   780,   812,   776,     0,     0,   813,     0,     0,
3367:      896,   905,   479,   479,   479,   479,   476,   478,     0,     0,
3368:        0,     0,  1472,     0,   612,   590,   592,   599,   612,   617,
3369:      861,   638,   862,  1069,     0,   554,   489,  1039,   554,     0,
3370:     1177,  1193,     0,  1211,     0,   146,   128,   148,   147,     0,
3371:      155,     0,  1017,     0,   146,   130,     0,   149,     0,  1210,
3372:        0,   161,     0,   493,   494,   496,     0,   947,   504,   498,
3373:      546,   545,     0,   514,   580,   512,     0,   586,     0,     0,
3374:        0,   261,     0,     0,     0,   216,     0,     0,   325,     0,
3375:      312,    78,     0,     0,     0,    52,    97,    70,    62,    48,
3376:       76,     0,     0,    81,     0,    74,    91,    92,    90,    95,
3377:        0,   245,   226,   258,     0,     0,     0,     0,     0,     0,
3378:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3379:      491,   487,   488,   853,  1012,   436,   437,   180,   435,   319,
3380:        0,     0,   307,  1118,  1101,     0,     0,   104,   106,     0,
3381:      168,   310,     0,   285,   281,     0,   279,   278,   280,     0,
3382:     1246,   173,     0,  1241,  1117,     0,     0,  1112,   692,   657,
3383:        0,   710,   708,   656,     0,   652,   659,   380,     0,   439,
3384:        0,   398,   434,   423,   428,     0,   432,   430,   429,   424,
3385:      427,     0,  1004,  1000,     0,   863,   970,     0,   958,   984,
3386:      983,   818,   830,   831,   832,   985,     0,     0,     0,   827,
3387:      828,   829,   821,   822,   823,   824,   825,   826,   833,   994,
3388:      993,   987,   988,     0,   886,   887,   888,   995,     0,  1030,
3389:      959,  1035,     0,     0,   924,  1058,   751,     0,     0,   779,
3390:      999,   803,     0,     0,     0,   775,   946,     0,     0,     0,
3391:        0,     0,   784,     0,     0,     0,     0,   859,     0,     0,
3392:        0,     0,   470,   469,   475,   612,   617,     0,   453,     0,
3393:      599,     0,   611,   533,   610,     0,     0,   623,   621,     0,
3394:      623,     0,   623,     0,   533,     0,   613,   533,   610,     0,
3395:      630,  1043,   639,     0,   569,     0,  1029,   569,     0,   466,
3396:     1209,     0,  1205,     0,     0,     0,   136,   133,   123,     0,
3397:        0,   158,   146,   137,   502,   503,     0,   497,   513,  1041,
3398:      116,   216,     0,     0,    59,     0,   327,   273,   305,   288,
3399:        0,     0,     0,   217,     0,   293,     0,    51,    71,     0,
3400:       67,     0,    96,     0,     0,     0,     0,     0,    54,    66,
3401:        0,    49,     0,   380,   380,    57,   272,  1077,  1630,  1631,
3402:     1632,  1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,
3403:     1642,  1643,  1644,  1645,  1723,  1646,   223,  1647,  1419,  1648,
3404:     1649,  1650,     0,  1651,   649,  1652,  1653,  1654,   933,   934,
3405:      221,   314,   218,   320,   220,   222,     0,  1078,   219,   317,
3406:      112,  1124,     0,   110,     0,  1122,   119,   117,   114,  1126,
3407:      856,   857,   854,   489,   417,   397,     0,     0,     0,  1354,
3408:        0,   103,     0,  1118,   166,   307,     0,   335,   257,   330,
3409:        0,  1245,  1243,     0,  1240,     0,     0,     0,   653,   647,
3410:      351,     0,   411,     0,   431,  1003,   879,   890,   982,     0,
3411:        0,     0,     0,   885,   880,  1037,     0,  1034,   809,   807,
3412:      804,     0,   805,   783,     0,     0,   781,   777,     0,   814,
3413:      892,     0,   908,   903,   904,   474,   473,   472,   471,   598,
3414:      596,     0,   601,  1069,   608,   526,   532,   597,     0,   593,
3415:        0,   622,   618,     0,   619,     0,     0,   620,     0,   594,
3416:        0,  1069,   595,     0,   637,     0,     0,   899,   853,   899,
3417:     1178,   145,   125,     0,   126,   156,     0,     0,     0,     0,
3418:      150,   391,     0,   323,    61,     0,   305,     0,   216,   290,
3419:      289,   292,   287,   291,   294,     0,     0,     0,     0,     0,
3420:      274,     0,     0,     0,   237,     0,     0,   305,     0,   311,
3421:      233,   234,   344,     0,     0,     0,    63,    53,    50,    55,
3422:       64,     0,     0,    65,    68,   645,    80,    73,  1723,  1730,
3423:        0,     0,     0,     0,     0,     0,   393,   400,   180,     0,
3424:        0,   281,     0,     0,   307,   107,     0,     0,     0,  1245,
3425:        0,     0,   213,     0,   254,     0,   170,  1244,     0,  1233,
3426:        0,  1110,  1111,     0,     0,   399,   836,     0,     0,     0,
3427:     1036,   806,   810,   808,   785,   894,   910,   907,   633,     0,
3428:      636,   600,     0,     0,   521,   528,     0,   531,   525,     0,
3429:      602,     0,     0,   604,   606,     0,     0,     0,   641,     0,
3430:        0,     0,  1046,   552,  1295,  1564,  1471,   553,     0,   551,
3431:      555,   558,   560,   559,   561,   557,   568,     0,   571,  1056,
3432:      571,     0,     0,     0,   159,     0,   152,   152,     0,   138,
3433:      948,     0,   216,     0,   304,   324,   252,     0,     0,   235,
3434:        0,   242,     0,   276,   277,   275,   236,   305,   310,   238,
3435:        0,   345,     0,    72,     0,    88,     0,     0,   316,   120,
3436:      118,   855,   417,     0,  1118,   257,  1240,     0,     0,   281,
3437:      173,  1242,   270,   263,   264,   265,   266,   267,   268,   269,
3438:      284,   283,   255,   256,     0,     0,     0,  1112,     0,   837,
3439:        0,   838,     0,   491,   638,     0,     0,   632,     0,   519,
3440:      517,   520,   522,   518,     0,     0,   609,   625,     0,   605,
3441:      603,   614,     0,   645,     0,   616,     0,     0,     0,   562,
3442:        0,   898,   900,     0,     0,   524,   524,     0,   132,     0,
3443:      640,     0,     0,   154,   154,   140,     0,   310,   326,     0,
3444:      296,   303,   295,     0,     0,   232,     0,   239,   334,   241,
3445:      225,   644,     0,    75,     0,   321,   392,   396,     0,   215,
3446:     1234,     0,  1240,   257,  1245,     0,  1237,     0,     0,  1118,
3447:      839,     0,   913,   631,   634,     0,   607,     0,     0,     0,
3448:      642,   643,   615,     0,     0,     0,   556,     0,     0,   570,
3449:        0,   455,   454,   127,   152,   131,   160,   151,   501,   153,
3450:      501,     0,   334,   282,     0,     0,   260,   225,     0,   251,
3451:        0,    69,    87,   322,     0,   307,  1235,   214,   171,  1238,
3452:     1239,     0,   640,   909,     0,     0,     0,     0,   529,     0,
3453:      535,   624,   564,     0,   563,   901,   902,   526,   154,   504,
3454:      504,   640,   251,   297,   302,     0,   240,   243,   331,   332,
3455:      333,     0,   247,   244,   248,     0,  1240,     0,  1108,  1552,
3456:     1296,  1523,     0,   911,   914,   912,   906,   635,     0,     0,
3457:      527,   565,   523,   501,   143,   142,   139,   216,   259,     0,
3458:        0,     0,   249,     0,   250,   224,  1236,  1118,     0,   918,
3459:      917,   916,   920,   919,   530,     0,   504,   328,   229,     0,
3460:      228,     0,   313,   246,   640,     0,     0,   144,   227,   231,
3461:      230,  1109,   915,   534
3462: };
3463: 
3464: /* YYDEFGOTO[NTERM-NUM].  */
3465: static const yytype_int16 yydefgoto[] =
3466: {
3467:       -1,    37,    38,    39,    40,  2137,  2138,  2139,  1824,   981,
3468:     2833,  1825,   982,   983,  2141,    41,    42,  2186,  2187,    43,
3469:     1443,   537,  1757,  1382,  2558,    45,  2090,  1762,  2094,  2704,
3470:     2342,  2089,  2096,  2813,  2878,  2091,  1763,  2705,  1764,    46,
3471:       47,  1515,    48,   740,    49,  1516,  1470,  1251,  1001,  1460,
3472:     1240,    50,    85,    51,  2128,  2431,  2891,  2151,  2982,  2589,
3473:     2590,  1826,  2932,  2933,  2130,  2200,  1452,  2926,  1890,  2760,
3474:     1830,  1813,  2591,  1899,  2714,  2467,  1827,  2373,  1891,  2575,
3475:     2819,  1526,  1892,  2820,  2568,  1893,  1495,  1519,  2375,  2934,
3476:     1831,  1496,  2432,  1439,  1894,  2889,  1895,   496,  2594,    52,
3477:      529,   530,   732,  1189,   531,   713,    53,   497,  1155,   538,
3478:       55,  1878,  2618,  2220,  2619,  1947,  1872,  1249,  1944,  1569,
3479:     1499,  1250,   484,  1583,  2221,  2177,  1570,   539,   883,    58,
3480:       59,    60,   578,   591,   592,  1353,  1734,  2058,   951,   565,
3481:      566,  1866,   606,  1489,  1391,  1392,  1768,  2103,  1418,  1419,
3482:      960,   961,  2665,  2871,  2666,  2667,  2526,  2527,  2950,  1406,
3483:     1410,  1411,  1788,  1778,  1397,  2334,  2689,  2690,  2691,  2692,
3484:     2693,  2694,   884,  2547,  2805,  1414,  1415,   963,   964,   965,
3485:     1423,  1798,    62,  1738,  2065,  2066,  2067,  2312,  2313,  2327,
3486:     2323,  2532,  2673,  2068,  2069,  2658,  2659,  2777,  2330,  2075,
3487:     2677,  2678,  2735,  1543,   714,  1256,  1192,   716,   885,   717,
3488:     1168,   886,  1172,   719,   887,   888,   889,   722,   890,   891,
3489:      892,   725,  1164,   893,   894,  1183,  1211,  1212,  1213,  1214,
3490:     1215,  1216,  1217,  1218,  1219,   935,  1637,   896,   897,   898,
3491:     2071,   899,  1345,  1722,  2051,  2698,  2801,  2802,  2297,  2513,
3492:     2656,  2773,  2906,  2943,  2944,   900,   901,  1296,  1297,  1719,
3493:     1340,  1341,   902,  2434,  1343,  1630,  1295,  1292,  1044,  1045,
3494:     1257,  1610,  1611,  1633,  1976,  1640,  1646,  2003,  2004,  1654,
3495:     1687,   903,  1594,  1595,  1962,  1265,   904,   631,  1051,   632,
3496:     1262,  1681,   912,   905,   906,  1289,  1290,  2017,  2272,  1659,
3497:     1794,   583,  2669,   736,  1132,   907,   908,   909,   910,   937,
3498:      585,  1046,   477,   728,  2879,  1145,   941,  1047,  1828,  1677,
3499:       63,   810,   636,    64,  1143,  1507,    65,  2642,  2477,  1157,
3500:     1528,  1903,   498,    66,    67,    68,    69,    70,   613,  1243,
3501:      540,  1244,  1245,   797,    71,  1252,   799,   800,    72,   572,
3502:      573,  1253,  1366,  1254,    73,   551,    74,   931,   588,   932,
3503:      934,   542,   948,  2085,  1753,    76,    77,   559,   560,    78,
3504:       79,   574,    80,    81,  2639,   543,  2203,  1152,   506,   479,
3505:      480,   730,  1135,  1049,  1136
3506: };
3507: 
3508: /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
3509:    STATE-NUM.  */
3510: #define YYPACT_NINF -2651
3511: static const int yypact[] =
3512: {
3513:     5657,  -116,   665, -2651, -2651,  -116, 34163, -2651,  -116,    52,
3514:     2172, 38913, -2651,  4963,  -116, 45563,   727,   276,   195,   363,
3515:    39388, 39388, 45563, 45563, 39863,  -116,   240, 46038, -2651,  -116,
3516:    23217, 36538,     1,    91, 46513, 45563,  1051,   639,   176, -2651,
3517:    -2651, -2651, -2651, -2651, -2651,   119, -2651, -2651, -2651, -2651,
3518:    -2651, -2651, -2651, -2651, -2651, -2651, -2651,    99, -2651,   568,
3519:      116,   495,   147, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3520:    -2651,   290, -2651, -2651, -2651, -2651, -2651, -2651, -2651, 22741,
3521:    -2651, -2651, -2651, -2651, -2651, -2651, 40338, 45563, 40813, 37013,
3522:    41288, -2651,   153, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3523:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3524:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3525:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3526:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3527:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3528:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3529:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3530:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3531:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3532:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3533:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3534:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3535:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3536:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3537:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3538:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3539:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,   154,
3540:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3541:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3542:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3543:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3544:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3545:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3546:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3547:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3548:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3549:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3550:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3551:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3552:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3553:    -2651, -2651, -2651, -2651, -2651, -2651,   155, -2651, -2651, -2651,
3554:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3555:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3556:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3557:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3558:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3559:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3560:    -2651, -2651, -2651, -2651, -2651,   228,   273, -2651,   156, -2651,
3561:    -2651, -2651, -2651,  1051, 41763, -2651,   655,   670, -2651,   406,
3562:    46988, -2651, -2651, 45563, -2651, -2651,   415, 41763,   608, -2651,
3563:    -2651, -2651, 42238, -2651, -2651, -2651, -2651,   578, -2651, -2651,
3564:      398, -2651,    67, -2651, -2651, -2651,   493, -2651, -2651, -2651,
3565:    -2651, -2651, -2651, -2651, -2651,   587, -2651, 52213, -2651, 47463,
3566:    47938, 48413, -2651,   463,   592,   362, 22265, -2651, -2651, -2651,
3567:    -2651,   290, -2651, -2651,   956, -2651, 39388,   956, -2651, -2651,
3568:    -2651, -2651, -2651,  -161,   483, -2651,   526,   816, -2651, -2651,
3569:    -2651,   551, -2651, -2651,   786,  9938,  9938, 48888, 48888,   956,
3570:    48888,   603, -2651, -2651,   261, -2651,    91, -2651,   495,   551,
3571:    -2651, 23693, -2651,   609,   273, -2651, -2651,   191,   940, 12938,
3572:    45563,   624, -2651,   696,   624,   664,   699, -2651,  5657,  1034,
3573:     1014, 36538,   241,   241,  1182,   241,   907,   910, -2651,  1279,
3574:    -2651,   747, -2651, 41763, -2651,   768,  1044, -2651,   551,  1134,
3575:      725,   961,  1161,  2706,  1166,   785,  1170,   944,  6438, 12938,
3576:    32738, -2651,   273, -2651, -2651, -2651,   843, -2651,   849, -2651,
3577:    -2651, -2651, -2651,   592,  1096, -2651,   863,  1351,   923, 42713,
3578:    43188, 41763,   887,  1310, -2651, -2651, -2651, -2651,   939, -2651,
3579:    -2651,   127, -2651, -2651, -2651, -2651,   962, -2651,   962,   962,
3580:    -2651, -2651, -2651, -2651,   920,   920,  1109,   937, -2651, -2651,
3581:    -2651,  1285, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3582:    -2651, -2651,   952,   256, -2651,   962, -2651,   920, -2651, -2651,
3583:    -2651, -2651, -2651, 53593, -2651, -2651, -2651, -2651,  -143,   646,
3584:    -2651, -2651, -2651,    42,   954, -2651,  1415, -2651, -2651, -2651,
3585:    -2651, -2651, -2651, -2651, -2651,   966, -2651,  2871,   920, -2651,
3586:    -2651,  1306,    43, -2651,  1318,    49, -2651,  1321,  1189, 12938,
3587:    -2651,  1076, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3588:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3589:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3590:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3591:    -2651, -2651, -2651,    91, -2651, -2651, -2651, -2651, -2651, -2651,
3592:    -2651, -2651, -2651, -2651, -2651, -2651, -2651,   107, -2651, -2651,
3593:    30146, -2651, -2651,   362,   986, -2651, -2651, 30146, 13438, 52673,
3594:     1450, -2651,  1258, 45563,  1022, -2651, -2651, -2651, -2651, -2651,
3595:    -2651,  1005,  1503,    92,  1529, 12938,  1043,    92,    92,  1048,
3596:     1382, -2651, -2651, -2651,   158,  1054,  1056, -2651,   159,   159,
3597:    -2651,  1062,  1068, -2651,   160,  1070,  1072,  1566,  1570,   141,
3598:     1083,  1104,   256,    92, 12938, -2651,  1110,   159,  1112,  1119,
3599:     1142,  1579,  1146, -2651,  1641,  1157,   109,   152,  1179,  1184,
3600:    -2651,  1207, -2651,   162, 12938, 12938, 12938,  1518, 12938,  7438,
3601:    41763,  1694, -2651,   273,  1217,   956, -2651, -2651, -2651, -2651,
3602:    -2651, -2651, -2651, -2651,   143,  3768, -2651,  1257, -2651, -2651,
3603:    -2651,   172, 12938, -2651,  1700,   -11, -2651,   163, -2651, -2651,
3604:    -2651,   317,  1501,  1219, -2651, -2651, -2651, -2651,   192,  1623,
3605:    29196, 29671, 41763, -2651, -2651,   273, -2651, -2651, -2651, -2651,
3606:    -2651, -2651,   291, -2651,   290, 31407,   381,   273,   624, 45563,
3607:    45563,  1682, -2651, -2651, -2651, 36538, 41763, 49363,  1349, -2651,
3608:    -2651,   495,   495,  8938,   495,   434,    45, 10438, 13938,  1561,
3609:     1445,   164,   517,  1565, -2651,  1451,   907,   910, 12938,   696,
3610:    -2651,  1502, 41763, 34638,   779,   824,  1239,  1326,  1247,   501,
3611:     1656, -2651,  1245, -2651,  1331, 41763, 53593,   131, -2651,  1693,
3612:      131,   131,   309,  1696,  1338,   203,  1494,     3,   -98,  1245,
3613:     2357, -2651, 36538,   105,   445,  1245, 41763,  1342,   581,  1245,
3614:      114, 13438,   819,   890,   258,   957,  1139,   118, 13438,  1171,
3615:     1185,  1204,  1340,  1366,  1453,  1512,  1577,  1612,  1618,   124,
3616:     1621,  1625,  1640,  1648,  1657,  1667,   140,  1670,    90, 13438,
3617:     1672,  1261, -2651, 31407,   -69, -2651, -2651,  1675,   142, -2651,
3618:    27770,  1254, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3619:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3620:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3621:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3622:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3623:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3624:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3625:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3626:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,  1347, 45563,
3627:     1302,   388,  1611,  1673, 32738,  1267,  1626, 41763,  1496,  2357,
3628:     1498,  1276,  1735,   849, 10938,  1739, -2651, 49838, -2651, -2651,
3629:    -2651, -2651, -2651, -2651,  1282, -2651, -2651, 12938, -2651, -2651,
3630:    -2651,  1773, -2651, 52673, 52673,   962,   962, -2651, -2651,  1748,
3631:     1373,  1383,  1773, -2651,  1773, -2651, -2651, -2651, 52673, -2651,
3632:    45563,  1301,  1309,  1773, -2651, -2651, -2651, -2651, -2651, -2651,
3633:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3634:     1773,  1389, -2651,  1391,  1394,  1395, -2651, -2651, -2651, -2651,
3635:    -2651, 45563, 45563, -2651, 45563, 45563, -2651, 45563, 45563,   522,
3636:    43663,   362, 37488, -2651, -2651, -2651, -2651,   360,   474, -2651,
3637:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, 32738, -2651,
3638:     2110, -2651, -2651, -2651,  1311,   548, -2651,   611,  1051, -2651,
3639:    -2651, 12938,   273, 12938, 31407,  1358, 12938, 12938,  1317,  1773,
3640:     1773, -2651,  1538,  1773,  1773, 31473, 12938, 26552, 12938, 17438,
3641:    11438, 12938, 12938,  7938, 12938, 31473,  1801,  1801, 24645, -2651,
3642:     1472,  1322,  1328,  1376, 27035,  1324, -2651,   713, -2651,  1323,
3643:    -2651,   273,   273, 12938, -2651, 12938,  3409,  3409, -2651,   139,
3644:    52673, 12938, 12938, 12938, 12938, 32263,  1414,   103, 45563, 12938,
3645:    12938,  1333,   836, -2651, 12938,  1560, -2651,  1343, 12938,  1423,
3646:      660, 12938, 12938, 12938, 12938, 12938, 12938, 12938, 12938, 12938,
3647:    -2651, -2651, 18924,   148,  1662,  1681,   273, 12938,     6,   206,
3648:    12938, 37963,  9938,  1676,  6438, -2651,   273, 28246,   137,  1676,
3649:    -2651, -2651, -2651, -2651,   167, -2651, -2651, -2651, -2651,  1311,
3650:    -2651,  1311,  1353, 41763,   191, 36063, -2651, 12938, -2651,   625,
3651:     1350,  1409,   543,  1811, 45563, -2651, 25121,  1636, -2651,   244,
3652:      244,  1354, -2651, 30617,  1636, -2651, -2651, 17924,  1474,  1632,
3653:     1572, -2651, -2651,  1549,  1555, -2651,  1372, 31566, 14438, 14438,
3654:    -2651,  1336, 31407,  1345, -2651, -2651, -2651, -2651, -2651, -2651,
3655:       15, -2651, 41763,   -14,  1561,   517,   637, -2651, -2651,  1329,
3656:     1380, 50313, 45563,  1654,  1607,  1658,  -150, -2651, -2651, -2651,
3657:    52673, -2651, 45563, 45563, 50788, 51263, 33213, 45563, 32738, -2651,
3658:    -2651, -2651, -2651, 45563,   452, 45563,  3751, -2651, -2651, -2651,
3659:      131, -2651, -2651, -2651, -2651, -2651, 45563, 45563, -2651, -2651,
3660:      131, 45563, 45563,   131, -2651,  1460, 45563, 45563, 45563, 45563,
3661:     1530, 45563, 45563,   -59,   -59,  1587, -2651, 11938,    73, -2651,
3662:    12938, 12938, -2651, 12938,  1556, -2651,   691, -2651,  1599,    36,
3663:     1433, 41763, 41763, 45563,   586, -2651, -2651, -2651, -2651, -2651,
3664:    -2651, 32738,  1392,  1398,  1733, -2651,  2357,  1738, 35113,   766,
3665:      -24,  1443, -2651,   710, 12938,  1620, -2651, -2651,  1609, 12938,
3666:      717,  1410,    42,   735, -2651, -2651,  1412,  1309,  1432,  1434,
3667:     1418,  1419, -2651,   740, 52673,  1773,    85,  1420,  1422,  1437,
3668:      993,   800,  1341,    43, -2651,    49, -2651,  1635,   171, -2651,
3669:     1651,   849,  1874, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3670:      791, 21789, -2651, -2651,  1885,   956,  1885,   679, -2651, -2651,
3671:     1885, -2651,  1885, -2651, 30146, -2651, 13438, -2651, 52673, -2651,
3672:      795, -2651,  1439, 12938,    40, -2651, 30683,   796, 12938,  1430,
3673:     1438, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3674:     1440,  1768, -2651,  1444,  1446,  4881, -2651, -2651, -2651, -2651,
3675:    -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3676:     1447,  1442, 30749,  1448, 17438, 17438,  7438,  1377, -2651, 17438,
3677:     1452, -2651, -2651,   817, 30635,  1322,  1454, 30986, 12438, 12938,
3678:    12438, 12438, 31167,  1322,  1456, 31248, 45563, -2651, 14938, -2651,
3679:    -2651, -2651, 12938, 41763, -2651, 12938,   826, 27053, -2651, -2651,
3680:    -2651,  5234,  5234,  5234, 31473, -2651, -2651, -2651,  1463, -2651,
3681:    17438, 17438, -2651,  1843,  3450,  7438, -2651, -2651,  1779, -2651,
3682:      621, -2651,  1458, -2651, -2651,  3903, -2651, 26552,  4294, 12938,
3683:      130, -2651, 12938,  1333, 12938,  1540,  5234,  5234,  5234,   283,
3684:      283,    68,    68,    68,   275,   206, -2651, -2651, -2651,  1461,
3685:     1464,  1465,  1807, 31407,  1146, 12938, -2651, 31407,   845,   874,
3686:    41763,    96,  3155,  4640, -2651, -2651, -2651, 20361,  1508,   -69,
3687:     1518,  1508,  1773,  3409, -2651,   696, -2651, -2651, -2651, 31407,
3688:    -2651,  1051, 20361,  1509,  1521,   410, 23217,  1683, -2651, 45563,
3689:    -2651, 45563, -2651,   -33,  1482, -2651, -2651, -2651,  1489,  1489,
3690:    12938,  1594,  1489,  1686,  1687,   695,   695,  1336,  1688, -2651,
3691:    -2651,  1539, -2651, -2651, -2651, 12938,  8438,  1352, -2651,  1355,
3692:    -2651, -2651, -2651, -2651,  1483, -2651, -2651,  1753, -2651, -2651,
3693:    -2651, -2651,  1581,  1245, 12938,  1728, -2651,    59,  1504,  1849,
3694:     -127,  1803, 45563, -2651,  1716, -2651,   121,  1856,   171,  1858,
3695:      171, 32738, 32738, 32738,   839, -2651, -2651,   956, -2651, -2651,
3696:      847, -2651,   279, -2651, -2651, -2651,  1597,   703,  1245,  2357,
3697:    -2651, -2651, -2651, -2651, -2651, -2651, -2651,   144,   798,  1245,
3698:     1601, -2651,  1602, -2651,  1606,   801,  1245, -2651, -2651,    73,
3699:       73,    73, 13438, -2651,  1744,  1746,  1531, 31407, 31407, 31407,
3700:     1532, -2651,   146, -2651, 45563, -2651, -2651, -2651,  1556, 41763,
3701:     1533,   849, -2651,   492, -2651,   956, 45563, 41763, 41763, 41763,
3702:    -2651, -2651, -2651,  1534,  1526, -2651, 52673,   -76,  1750,  1752,
3703:    45563,  1585,  1247,  2006, -2651, 31407,  1893, 41763,   865, -2651,
3704:    -2651, -2651, -2651,  1773, -2651, -2651,  -163,  -163, -2651, 45563,
3705:    -2651,  1551, -2651,  1552, -2651, -2651, -2651, -2651, -2651, -2651,
3706:    -2651, -2651, -2651, -2651, -2651, 45563, -2651,  1896,  1051, -2651,
3707:    32738, -2651, 35588, -2651, -2651, -2651, -2651,   956, -2651,   956,
3708:     1774, 45563, 28721,   956,   956, -2651, -2651, -2651, -2651, 31287,
3709:    12938, -2651,  1906, 52673, -2651, 27082, -2651, -2651, -2651, 12938,
3710:    -2651, -2651, 12938, -2651, 26552, 12938,  1880, -2651,  2040,  2040,
3711:    27035, 52673, 17438, 17438, 17438, 17438,   667,  1112, 17438, 17438,
3712:    17438, 17438, 17438, 17438, 17438, 17438, 17438, 18424,   177, -2651,
3713:    -2651, 12938, 12938,  1888,  1880, -2651, 52673,  1558,  1322,  1559,
3714:     1563, 12938, -2651, 52673,   866,  7438, 31332, -2651,   273, 27101,
3715:    -2651, 31407, -2651,  3409, 12938,  1441,  3007, 12938,   871, 12938,
3716:     1887, -2651, -2651,  1568, -2651, -2651, 52673, 12938,  1564,  4854,
3717:    17438, 17438,  5394, -2651,  5654, 12938,  7438, -2651,  1587,  1613,
3718:    -2651,  1770,  1663,  1663,  1663,  1663, -2651, -2651, 41763, 41763,
3719:    41763, 20837,  1898, 19885, 44138,  1571,   951, -2651, 44138, 44613,
3720:    -2651,  1590, -2651,   273, 12938,  1894,    73,  1472,  1894,  1576,
3721:    -2651, -2651,  1578,  1571, 12938,  1742, -2651, -2651, -2651,  1643,
3722:    -2651,   875, -2651,  2007,  1742, -2651,   879, -2651, 25121,  1509,
3723:    12938,   273,   115, -2651, -2651, -2651,  1596, -2651,  1489, -2651,
3724:    -2651, -2651,  1813, -2651, -2651, -2651, 41763, -2651, 45563, 27167,
3725:     1942, -2651, 45563, 45563, 45563, -2651, 45563,   903,   123,  1605,
3726:    -2651,   123,  1920,   188,  1247,   203,  2412,   -19, -2651, -2651,
3727:    -2651,  1677, 45563, -2651, 45563, -2651, -2651, -2651, -2651, -2651,
3728:    33213, -2651, -2651, -2651, 32738, 26076, 32738, 45563, 45563, 45563,
3729:    45563, 45563, 45563, 45563, 45563, 45563, 45563,  1608,  1615,  1616,
3730:     1587, -2651, -2651, -2651, -2651, -2651, -2651,   -98, -2651, -2651,
3731:      146,  1610, 35113,  1443,  1673, 45088,  1622,  1598, -2651,   909,
3732:     2357,  1630,  2066, -2651,   766, 35113, -2651, -2651, -2651,  2027,
3733:    -2651,   463,   145, -2651, -2651,  1051, 45563,  1678, -2651,  1309,
3734:     1627, -2651, -2651,  1309, 52673, -2651, -2651,   171, 41763, -2651,
3735:      918, -2651, -2651, -2651, -2651, 45563,  1633, -2651,  1633, -2651,
3736:    -2651, 12938, 31407, -2651,  1638, -2651, 31407, 27404, -2651, 31407,
3737:     1888, -2651,  2105,  2105,  2105,  1133,  1956,   134,  1634,  2105,
3738:     2105,  2105,   237,   237,   100,   100,   100,  2040,   177, 31407,
3739:    31407, -2651, -2651,  1639, -2651, -2651, -2651,  1322,  1644, -2651,
3740:     5465, -2651,   930, 45563, -2651, -2651,   266, 12938, 12938,  1843,
3741:    -2651, 31791, 12938, 52673,   931,  1843,   149, 12938,  3026,  3730,
3742:    12938, 12938,  5775, 27590,  1645, 12938, 25597, -2651, 41763, 41763,
3743:    41763, 41763, -2651, -2651, -2651, 44138, 44613,  1647, 19408,   951,
3744:     1650, 41763, -2651,  1726,  1652, 20361,  1915,  1854, -2651, 20361,
3745:     1854,   914,  1854,  1922,  1726, 24169, -2651,  1726,  1659,  1860,
3746:    -2651,   534, 31407,  2101,  1974,  1664, -2651,  1974,   956, -2651,
3747:    31407,  9938, -2651,  1051,   953, 45563,   273,   -68, -2651,  1674,
3748:    45563, -2651,  1742, 31407, -2651, -2651, 26552, -2651, -2651, -2651,
3749:    -2651, -2651, 45563,   932, -2651,   941,   123, -2651,  1702, -2651,
3750:      196,  1962,    22, -2651, 32738,  1137,   687, -2651,  1975,  1890,
3751:    -2651,   131, -2651, 12938,   687,  1891,   184, 45563, -2651, -2651,
3752:     3186, -2651, 52673,   171,   171, -2651, -2651,  1671,  1685,  1689,
3753:     1690,  1691,  1692,  1698,  1699,  1701,  1703,  1705,  1706,  1707,
3754:     1708,  1711,  1713,  1714,   952,  1715, -2651,  1718,  1596,  1720,
3755:     1721,  1722, 53133,  1723,  1724,  1727,  1730,  1731,   360,   474,
3756:    -2651, -2651, -2651, -2651, -2651, -2651,   863,  1732, -2651,  1695,
3757:    -2651, -2651,  1760, -2651,  1761, -2651, -2651, -2651, -2651, -2651,
3758:    -2651, -2651, -2651,    73,   986,    98, 45563,  1684,  2130,  1908,
3759:     1736, -2651,   956,  1443, -2651, 35113,   535,   157,  1752, -2651,
3760:      122,  1585, -2651,  2075,  1756,  1899, 45563,  1740, -2651, -2651,
3761:    -2651,  2153, -2651, 35588,  1633, 31407, -2651, -2651, -2651, 17438,
3762:     2023,  1741, 52673, -2651, -2651, -2651, 12938, -2651,  1843,  1843,
3763:    31791,   946, -2651,  1843, 12938, 12938,  1843,  1843, 12938, -2651,
3764:    -2651, 27650, 51738, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3765:    -2651, 33688, 44138,  1743, -2651, 38438, -2651, -2651, 45563,   951,
3766:    20361, -2651, -2651,  1039, -2651, 20361,  2004, -2651, 20361, -2651,
3767:    45563,  1745, -2651, 45563, -2651,  9438, 12938,  1777,   956,  1777,
3768:    -2651,  1219, -2651,   410, -2651, -2651,  2143, 21313,  2102, 12938,
3769:    -2651, -2651,  1747,   123, -2651,  1907,  1702,  1749, -2651, -2651,
3770:    -2651, -2651, -2651, -2651, -2651,   967,  1754, 45563, 45563, 17438,
3771:    -2651,   687,   267,   194, -2651,  2020, 41763,  1702,  2165, -2651,
3772:    -2651, -2651, -2651,  2132,  2214,  2104, -2651, -2651, 31407, -2651,
3773:    -2651,  1773,  1773, -2651, -2651,  2178, -2651, -2651, -2651, -2651,
3774:      863,  -206, 26076, 45563, 45563,  1757, -2651, -2651,   -98,  2133,
3775:      984,   766,  1051,  2106, 35113, -2651,  2221,  1763, 45563,  1585,
3776:     1029,  1029, -2651,  1904, -2651,  1905, -2651, -2651,   202, -2651,
3777:    41763, -2651, -2651, 21313,  1051, -2651,  2342, 17438, 52673,   995,
3778:    -2651, -2651,  1843,  1843,  1843, -2651,  1958, -2651, -2651,  1003,
3779:     2227, -2651, 45563,   -48,   -55,  1771,  1772, -2651, -2651,  1004,
3780:    -2651, 12938,  1776, -2651, -2651, 20361,  1039,  1008, -2651, 52673,
3781:    45563,  1017, 52673, -2651,  1786,  -142,  1788, -2651,  6938,  1766,
3782:    -2651, -2651, -2651, -2651, -2651, 31407, 31407, 45563,  1943, -2651,
3783:     1943,  1826, 45563, 12938, -2651,  1019,  2200,    32,   -32, 31407,
3784:    -2651, 41763, -2651, 32738, -2651,   123, -2651, 32738, 12938, -2651,
3785:      732,  1133,  2247, -2651, -2651, -2651, -2651,  1702,   849, -2651,
3786:    45563, -2651,  2099, -2651, 45563,  1850,  -183,  1864, -2651, -2651,
3787:    -2651, -2651,   986,   956,  1443,  1752,  1756, 41763,  1051,   766,
3788:      463, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651, -2651,
3789:    -2651, -2651, -2651, -2651,  2223,  2008,  2229,  1678,  1035,  2342,
3790:     1041, -2651,  2240,  1587,  1590, 33688,  1805, -2651,  1049, -2651,
3791:    -2651, -2651, -2651, -2651, 45563,  1172, -2651, 31407, 45563, -2651,
3792:    -2651, -2651, 45563,  2178,  1059, -2651, 12938,  1806, 12938, -2651,
3793:    15438,  1799, -2651,  2266, 12938,  1866,  1866,  1051, -2651, 27710,
3794:     1508, 21313, 45563, 45563, 45563, -2651,  1931,   849,   123,  1063,
3795:    -2651,  1823, -2651, 27728,  2033, -2651,  2121, -2651,  2067, -2651,
3796:     1817, -2651, 12938, -2651,  1892, -2651, -2651, -2651,  2278, -2651,
3797:    -2651,  1824,  1756,  1752,  1585,  2030, -2651,  2036,  1831,  1443,
3798:    -2651, 12938,   595, -2651, -2651, 45563, -2651,  1075,  1832,  1081,
3799:    -2651, -2651, -2651,  1088, 15438,  1090, -2651, 45563,  1840, 31407,
3800:     1969, -2651, -2651, -2651,  2200, -2651, -2651, -2651,   244, -2651,
3801:      244, 25121,  2067, -2651, 32738, 26076,  2069,  1817,    44,  2057,
3802:     2357, -2651, 31407, -2651,  1051, 35113, -2651, -2651, -2651, -2651,
3803:    -2651, 21313,  1508,  1322, 15938, 15938,  1847,  1101, -2651,  2337,
3804:     2009, -2651, -2651,  1105, -2651, -2651, -2651, 38438, 45563,  1489,
3805:     1489,  -148,  2057, -2651, -2651,  2148, -2651, -2651, -2651, -2651,
3806:    -2651,   126,  2071, -2651,  2072,  1165,  1756,  1129, -2651, 16938,
3807:     2003,   590, 30664, -2651, -2651, -2651, -2651, -2651,  1868,  1867,
3808:    -2651, -2651, -2651,   244, -2651, -2651, -2651, -2651, -2651,   404,
3809:      404,  2245, -2651,  1932, -2651, -2651, -2651,  1443,  2333, -2651,
3810:    -2651, -2651, -2651, -2651, -2651,  2360,  1489,   123, -2651,  2349,
3811:    -2651,   173, -2651, -2651,  1508, 16438,  1877, -2651, -2651, -2651,
3812:    -2651, -2651, -2651, -2651
3813: };
3814: 
3815: /* YYPGOTO[NTERM-NUM].  */
3816: static const yytype_int16 yypgoto[] =
3817: {
3818:    -2651, -2651, -2651,  1781, -2651, -2651, -2651,   243, -2651,   928,
3819:    -2651,   231,  -567,   567, -2651, -2651, -2651, -2651, -2651, -2651,
3820:     -914,    21, -2651, -2651, -2651, -2651,    50,   287, -2651,  -424,
3821:    -1879,  -165, -2651, -2464, -2561, -2651,  -491, -2425, -1690, -2651,
3822:    -1107,   204, -2651, -2124, -2651,  -621,  -981,  -788,  -990, -2651,
3823:       10, -2651,  1026, -1097, -1780, -2434,  -487, -2651,  -563, -2651,
3824:     -319, -1774,  -532,  -519, -2651, -2347,  -934, -2651,  1435,  -225,
3825:    -2651,   600, -2651, -2109, -2651, -2651,   589, -2651,  -957, -2651,
3826:    -2651, -1841,   218,  -466, -2296, -2127,   545,  -633, -2651,  -510,
3827:      270, -1717, -2651,   618, -2651,  -455, -2651,  -494, -2156, -2651,
3828:    -2651, -2651,  1208,  -717, -2651,  1259, -2651, -2651, -2651,    23,
3829:    -2651, -2651, -2651, -2651, -2651,  -463,   552, -2270, -2651,   491,
3830:    -2651, -2651, -2651, -2651,   -50,   254, -2651,     8,   424,   -35,
3831:        4,    31,    27,    37,  1497,  1525, -2651, -1167,   693, -2651,
3832:    -2651, -1778,  -602,   -46, -2651,   668, -1356, -1727,  -482,  1018,
3833:     1481,  1484,  -339,  -359, -2651,  -464, -2651, -1337, -2651, -2651,
3834:      671,  1065, -1297, -1291, -2651,   382,  -400,  -334, -2651, -2651,
3835:    -2651, -2651, -2651,   132,  -232,  -473,  1047, -2651,  1510, -2651,
3836:    -2651, -2651, -2651, -1249,   720, -1985,   412, -1951, -1860,   174,
3837:      161,  -973,  -200,    19,   417,  -296, -2651, -2651,  -293, -1715,
3838:    -2110,  -308,  -305, -2651, -2651,  -486, -1125,  -684, -2651, -2651,
3839:      170,   964, -2651, -2651, -2651,  2162,  2166, -2651, -2651,  2246,
3840:     2460, -2651,  -578,  2551,   209,  -677,  1221, -1040,  1222, -1091,
3841:     -909,  -871,  1223,  1224, -1232,  3416,  1216,   927,     0, -2651,
3842:    -2359, -1664, -2651, -2651, -2651,   -60, -2651,  -370, -2651,  -368,
3843:    -2651, -2651, -2651,  -404, -2650, -2651,  1158,   842, -2651, -2651,
3844:    -1244, -2651,  3582,   736, -2651, -1638,  -560,  1246,  -710,  -982,
3845:    -1152, -2651, -2651, -2651, -2651, -2651, -2651, -1602, -1792,  -551,
3846:      807, -2651, -2651,   917, -2651, -2651, -1066,  -546,  1020,  -564,
3847:     -830,   812, -2651,  -555,  1162, -2651,   776, -1922, -2651,   440,
3848:    -2651,  1519,  -526,   973, -1029,    25, -2651,  -694,   165,  1808,
3849:     -856, -2093, -2651, -2651,  -490, -2199,  -906, -2651,  -605, -2651,
3850:    -2651, -2651, -1174, -2651,   638, -2651, -1092, -2651,  -245, -2651,
3851:    -2651, -2114, -2651, -2651, -2651, -2651, -2651, -2651,  -419, -2651,
3852:     -471,  -469, -2651, -2651,    12,  -786,  1291, -2651, -2651,   605,
3853:    -2651,   942, -2651,   792, -2651,    55, -2651,  1154, -2651, -2651,
3854:    -2651,    30,  1588,   435, -2651,  1167, -2651, -2651, -2651, -2651,
3855:    -2651,   750, -2651, -1090, -2501,    70, -2337, -1182,    -6, -2651,
3856:    -2651, -2651,  -527, -2651, -2089
3857: };
3858: 
3859: /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
3860:    positive, shift that token.  If negative, reduce the rule which
3861:    number is the opposite.  If zero, do what YYDEFACT says.
3862:    If YYTABLE_NINF, syntax error.  */
3863: #define YYTABLE_NINF -1734
3864: static const yytype_int16 yytable[] =
3865: {
3866:      478,   596,  1000,   647,   735,  1140,   474,   966,    56,   802,
3867:     1474,   913,  1239,   607,  1246,  1223,  1438,  1473,  1226,  1179,
3868:      925,    44,  1533,    54,  1299,  1133,  2078,    61,   541,   936,
3869:       75,   475,  1185,  1629,  1769,  2131,  1505,  1772,   577,   733,
3870:      741,   715,  2104,    61,  1449,  2109,  1506,  2146,  1562,  2148,
3871:      582,  1508,  1301,  1509,  1537,  2457,   999,  1485,  1005,  2038,
3872:     1009,  1445,  2436,  1427,   742,   609,  2438,   796,  1346,  2458,
3873:       82,  2097,   594,  2072,  1668,  1669,   552,  2471,  2309,  1310,
3874:     1356,  2167,  2168,  2169,  1589,  2468,  1137,   617,  2072,  1478,
3875:     1165,  1166,   610,  2271,   819,  2127, -1512,  -707,  1255,  -441,
3876:     1186,  1186,   482, -1732, -1732,  2812,  1241,  1186,   625,  1316,
3877:     1741,  1981,  1790,  1241,  -715,  1510,  -444,  1177,  2326, -1074,
3878:     1793,  2632,   803, -1609,   959,  1900,  1430, -1071, -1071, -1620,
3879:     1363, -1712, -1712,   962,  2636,  1233,  1737, -1723, -1723,  2572,
3880:      819,  1318, -1049,  1679,  2132, -1627,  -712, -1075,   548,  1141,
3881:     -712,   548,   819, -1730, -1730, -1072, -1072,  -715, -1074, -1620,
3882:    -1627, -1075,  2660, -1609,  -674,  -687,  -931,  -702,   548,  2189,
3883:     1679,   586,   548,  -931,   658,  1716,  -950,  1960,  2738,  1229,
3884:     1441,  1605,  1717,  -950,  2616,   549,   549,  1347,  1981, -1512,
3885:     1185,  1476,  -441,   819,   926,  1360,  1233,   548,  2706,  1458,
3886:     1306,   819,  1461,  1462,  1351,  1876,  2196,  -180,  2324,  -444,
3887:     1159,  2261,  -180,  1641,  2928,  2348,  2556,  1310,  2768,  1441,
3888:     -401,   604,     3,     4,  1241,  1433,  1241,  1241,  2599,  1186,
3889:     2159,   604,  1603,  2797,  2226,  2228,  1398,  2611,  2815,   599,
3890:     2369, -1512,  2633,  2814,  1450,  2840,  2959,  1316,  1981,  1165,
3891:     1166,  2781,  2472,  2880,  1160, -1512,  2133,  2634,  2779,  1796,
3892:    -1512,  2764,  1864,   545,  2490, -1512,  1398,   563,   949,  2765,
3893:     2712, -1709, -1709,   802, -1512,  1177,  2354,  1310, -1512,  1318,
3894:      802,  1766,  1399,  2737,  2706,  2367,  1310,  1811,  2989,  2968,
3895:     1511,  2729,  2751,  1241,  1310,  1180,  1241,  1241,  2335,    83,
3896:     2782,  1483,  1457,  2377,  2630,  2074,  2834,  1361,  1484, -1512,
3897:     1811,  2725,  1399,  1511,  2569,  1180,  1316,  1181,  1291,  1302,
3898:     1175,  1176,   807,   955,  1316,  2370,  2135,   600, -1512,  2610,
3899:     2529,  1641,  1247,   808,  2533,  2992,  2238,  1181,  2627,  1318,
3900:     2355,  2896,    26,    84,  1812,  2366,  2929,  1358,  1318,  2626,
3901:     2098,  1182,  -566,  2631,  2390,  2326,  1318,  2953,  1468,   927,
3902:     1724,   928,  1472,  1606,  1565,  2475,  1797,  2124,  1767,   819,
3903:      564,   950,  1400,  1358,  2240,  2378,  1435, -1512,    31,  1137,
3904:    -1512,  2357,  1469,  -441,   544,  2723, -1512,  2570,  1187,  1187,
3905:     2371,  1401,  2372,   802,   802,  1187,   957,  2072,  2839,  2072,
3906:     -444,  1607,  2262,  2816,   546,  2363,   686,  2365,  1426,   976,
3907:     2918,  2736,  2473,  2491,  1379,  1463,  2660,  1865,  1448,    33,
3908:    -1512,  1401,  1268,  2930,    57,  2722,  2557,  1362,  1161,  1487,
3909:      919,  2827,    34,  2681,  2783,  2966,  1451,  2766,  2635,  1586,
3910:       57,  2780,  1488, -1512,  1523,  2519,  -441,  2990,  2488,  1877,
3911:     1402,  2924,  2706,  1629,    57,   534,    35,  2379,  2724,  1927,
3912:      595,  2573,  2978,  -444,  2134,  2098,  2135,  1348,  2726,   659,
3913:       36,   547,  2836,  2561,  1806,   973,  2937,  1531,  1567,  1790,
3914:     1402,   974,  1884,   819,  1424,   608,  2112,  1352,  1540,  1436,
3915:     1541,   635,  1593,  1425,  2136,   587,  2897,  1448,  2057,  1547,
3916:     1725,   596,  1680,    57,   633,  1863,   634,  2898,  2484,  1926,
3917:       61,  2080,  2745,   637,  2099,  1375,  1548,  1187,  1477,  2436,
3918:     1521,   729,  -931,  2438,   629, -1512,  1474,  2107,   630,  2040,
3919:      801,  1718,  -950, -1512,  1162,  2617,  2175,  2176,  1163,  1133,
3920:     1188,  1222,  2706,  1566,  1568,  2670,   483,  1225,   798, -1512,
3921:     2674, -1512, -1512,  2676,   601,  -441,  1464,  2160,  1339,   478,
3922:      478,  2960,    61,   967,  1465,  2059,  2060,  1180,  1641,  1641,
3923:     2794,  2661,  -444,  1641,  2650,  1599,  1600,  2082,  1922,  1613,
3924:     1614,  2563,   609,   478,  1284,   589,  -707,   975, -1512,  1181,
3925:     1996, -1512, -1512, -1512,  -441,  1395,  -441,  1534,  1535,   930,
3926:     2574,   805,  1231,  1182,  1863,  1232,    56,  1530, -1074,   610,
3927:     1180,  -444, -1609,  -444,  1641,  1641,  1237,  1238, -1620,    44,
3928:      947,    54,  1048,   478,  1134,    61,  2844,   938,    75,   629,
3929:     2838, -1049,  1181,   630, -1627,  -712, -1075,  1305,   929,   597,
3930:     2843,  1928,  1930,  1571,  1739,   611,  1184, -1074, -1620, -1627,
3931:    -1075,  2072, -1609,  1167,  1171,  2072,  -702,  1354,  1754,  1468,
3932:     2560,  1742,  1991,  1992,  1993,  1994,  1995,  1996,    82,  2601,
3933:     2602,  2979,  1840,   598,   920,  2615,   955,  1237,  1238,  1929,
3934:     1931,  1932,  1843,  1469,  2628,  1846,  1450,   715,  -180,  -180,
3935:     2789,  1334,  1335,  1336,  1337,  1338,  1339,   729,  1555,  2110,
3936:     1396,  1590,  1542,  1291,   819,   802,  2192,  1597,  1700,   804,
3937:     1676,   549,   806,   602,  1789,  1789,  1591,  2592,  2562,  1500,
3938:     1643,  1645,   628,  1653,  1993,  1994,  1995,  1996,    26,  1302,
3939:     1629,   733,  1554,   478,   916,  2902,   727,   612,  1558,  2620,
3940:      976,  2593,  1450,  1666,   921,  2907,   648,   643,   973,   957,
3941:     2980,  2030,  1133,  2970,   974,  1591,  1137,   813,     3,     4,
3942:     1563,   486,  2155,   796,    31,   629,  1241,   486,  2627,   630,
3943:     1336,  1337,  1338,  1339,   561,  2156,  1241,  2981,  2031,  1241,
3944:      579,   603,   649,  1943, -1120,  1945,  1373,  2209,  2715,  1374,
3945:     1501,  2275,  2436,  2213,   801,   978,  2438,  2246,   958,  2576,
3946:     1591,   801,  1048,   729,  1479,    33,   653,  1299,   973,   629,
3947:     1591,  2087,  1137,  1357,   974,  1911,   657,   650,    34,   478,
3948:      534,   487,  1450,   648,  1670,   979,   656,   487,  1682,   618,
3949:       61,  2018, -1707, -1707,  1701,  1839,  1933,  1502,  1934,  2081,
3950:     1755,  1936,    35,  1832,   596,  1169,  2088,  2579,   478,  1474,
3951:     1702,  1921,  1923,  2984,  1441,  1703,    36,  2072,   604,   649,
3952:      975,    26,  1803,    86,   651,  1442,  2072,  1178,   478,   478,
3953:      478,  2072,   478,   478,  2072,   489,  1376,  1241,  1451,  1377,
3954:     2170,  1859,  1860,  1861,  2284,  2298,  2299,  2300,  2301,  1838,
3955:     1241,  1704,   980,  2072,  2185,  2032,   478,    31,  1220,  1441,
3956:     2033,    26,  2971, -1708, -1708,  2581,  1133,    57,  1849,    26,
3957:     1444,  2107,   727,  1856,   801,   801,  1641,  1641,  1641,  1641,
3958:      975,  2904,  1641,  1641,  1641,  1641,  1641,  1641,  1641,  1641,
3959:     1641,  1641,  2818,  2161,  1451,  2101,  2247,    31,    33,  1448,
3960:     1482,   651,   660,  2822,  1450,    31,  2248,   478,  1950,   661,
3961:     2905,   478,   478,  1951,  1814,  1387,  1388,   739,  1394,    57,
3962:      595,   548,   478,  2197,   947,  1242,  1688,   973,  2204,  1908,
3963:    -1710, -1710,  1242,   974,  1641,  1641,  1841,   809,    33,  2072,
3964:      729,  1844,   610,   610,   504,   610,    33,  2539,   533,    36,
3965:     2542,    34,   491,  1689,   492,  1448,   554,   605,   491,    34,
3966:      492,  2824,   608,   811,  1952,  1048,  2584,   593,   593,  1169,
3967:     1883,  2072,  1048,   976,  1451,    35,   494,  1559,   727,   495,
3968:     1377,  1475,    57,    35,    87,   495,   629,  1178, -1049,    36,
3969:      630,    91,    88,  1048,   481,   812,  2481,  1756,  1705,  1450,
3970:      532,  2034,  1450,  1585,   802,  2316,  1586,   813,  2079,  2585,
3971:     1304,   562,  2035,  1202,  1203,   575,  2752,   802,  1920,  1307,
3972:      621,   639,  2158,   640,   977,  2586,   955,    89,   978,  -490,
3973:      814,   956,  1355,   976,  -490,  1448,   641,  1505,   642,   975,
3974:      918,  2111,  2111,  1365,  2317,  1242,  1242,  1506,  1653,  2008,
3975:     1653,  1653,  1508,    26,  1509,  2875,   924,  2007,   979,  2009,
3976:     2010,  2143,  1956,  2145,  1180,  1690,  1587,  2753,   933,  1588,
3977:     1691,  2072,  1629,  1949,    90,  1692,  2754,  1953,  2318,  1954,
3978:     1750,  2317,   939,  1225,  1003,  2028,  1181,  1364,   978,    31,
3979:     2014,  2501,  1801,  2316,  2535,  1377,  1451,  2076,  1134,   957,
3980:     1184,   818,  -490,  2320,  1981,  2755,  2388,  2072,  1048,  1982,
3981:     1983,  1984, -1711, -1711,  2381,  2318,  2222,  2162,  1004,   942,
3982:     2166,   478,  2587,  1206,  1207,   980,  2364,   729,   729,  2588,
3983:       33,  2319,   914,   915,   535,   917,  2663,  2977,  1196,  1197,
3984:     2320,  2664,   729,    34, -1713, -1713,  1873,  2938,   958,  1874,
3985:      940,  -490,  2954,  2955,   943,   727,  2454,  1448, -1714, -1714,
3986:     2380,   986,  2389,   945,  2576,  1904,  2956,    35,  1586,  2317,
3987:     2577,  1663,  1909,  1664,  2321,  1377,  2756, -1715, -1715,  2210,
3988:      987,   536,  1897,  2578,  1898,   980,   801,    57,  2757,   946,
3989:     1912,  1451,   976,  1588,  1451,  1918,   953,  2072,  1919,  2211,
3990:     2212,   968,  1134,  2318,   798,   970,  1202,  1203,  2183,  2987,
3991:     2553,  2052,  2579,  2053,  2580,   478,  1693,   478,    61,  2319,
3992:      478,   478,  2346,   971,  2322,  1271,   635,  1694,  2320,  2991,
3993:      478,   988,   478,   478,   478,   478,   478,   478,   478,   633,
3994:     2054,   634,  2055,  1007,   972,    61,  1939,   978,   637,  1940,
3995:     1957,  1964,  1448,  1377,  1377,  1448,   952,   478,   954,   478,
3996:      984,  2322,  2321,  1293,   729,   478,   478,   478,   478,  1134,
3997:     2581,   985,  2000,   478,   478,  1377,  1002,  1008,   478,    26,
3998:     1006,  2022,   478,  2671,  1377,   478,   478,   478,   478,   478,
3999:      478,   478,   478,   478,  2149,  1571,   478,  2150,  1138,  2582,
4000:     2649,   478,  2153,  1139,   478,  2154,   478,  2534,  1048,  2537,
4001:     1986,  1134,   973, -1716, -1716,    31,  1206,  1207,   974,  1144,
4002:     2208,  2269,   989,  1377,  1225,  1142,  2280,  2430,  2107,  1377,
4003:     2344,   478,  1147,  2345,  2349,   608,   608,  2350,   608, -1717,
4004:    -1717,  1154,   727,   727,   980,   818,   930,  1146,  1981,  2322,
4005:     1758,   478,  1156,  1982,  1983,  1984,    33,   727,  2368,  1158,
4006:     2388,  1874,   478,   478,  2463,  2564,  2583,  1874,  1163,    34,
4007:     1814,  2584,   990,  2482,  1167,   802,  2483,    26,  2758,  1987,
4008:      991,  2759,  1170,  1641,   602,  2495,  2502,  2565,  2496,  1588,
4009:     1874,  1171,   992,    35,   729,  1173,  2566,  1612,  -491,  1874,
4010:     1134,  2651,  1134,  -491,  1588,  2217,  1174,    36,  1190,   818,
4011:     1191,  2267,  1981,    31,  2585,  2524,  1221,  1982,  1983,  1984,
4012:     1193,  1241,  2716,   993,   975,  2717, -1718, -1718,  1224,  2524,
4013:     2586,  1227,  1591,  1228,  2277,   655,  2672,  2234,  1230,  2744,
4014:     1248,  1048,  1874,   973,   478,   478,  1258,   478,  1259,   974,
4015:     2771,   718,   603,  1588,    33,  2241,  2770,  1263,  2774,  2786,
4016:     2480,  2775,  1225,  2791,   738,  1134,  2792,    34,  -678,  2331,
4017:      995,  -491,  2795,  1641,  2810,  2792,  1261,  2811,   478,   727,
4018:     2263,  -453,  2919,   478,  2920, -1719, -1719,  2268,  1901,  1743,
4019:     2849,    35,   996,  2811,  -685,  -453,  2850,  1266,   729,  1588,
4020:     -453,  1601,  1267,   548,  2856,    36,  1268,  1225,  1269,  1832,
4021:     1270,  2439,   998,   973,  2862,  1591,    36,  2792,  2883,   974,
4022:     -491,  2884,  1272,   593,  -566,   801,  -567,  2587,  2453,   604,
4023:     2908,  -675,  1985,  2909,  2588,  -676,  2911,  1273,   801,  1225,
4024:     1048,  1641,   729,  2912,  -679,  2914,  1377,   478,  1377,  -453,
4025:    -1720, -1720,   478,  2597,  1986,   975,  2947,  2976,  1274,  2792,
4026:     2951,   596,  1616,  2800,  1276,   620,  1277,   623,  -453,   627,
4027:     1617,  1618,  1619,  1278,  1988,  1989,  1990,   976,  1991,  1992,
4028:     1993,  1994,  1995,  1996,  2967, -1721, -1721,  2811,   478,   478,
4029:      478, -1722, -1722,   478, -1724, -1724,  1279,  2742, -1725, -1725,
4030:     1280,  2107,   478,   478,   478,   478,  -677,  1194,  1195,   727,
4031:      596,  1281,   478, -1726, -1726,    57,   478,  -453,  1986,   478,
4032:     2965, -1727, -1727,  1987,  1288,   975,  -453,   718,  1802,  2433,
4033:    -1728, -1728,   978,  1282,   478,   478,  2606,  2607,  1283,   478,
4034:    -1729, -1729,    57, -1731, -1731, -1733, -1733,  1241,  1490,  1491,
4035:     1791,  1792,  1241,   478,  1204,  1205,   478,  2222,   478,  -542,
4036:     -542,  1284,   979,  1300,  1206,  1207,  -546,  -546,   605,  -545,
4037:     -545,  1303,  1369,  1371,  1344,  1350,  1351,  1352,  1380,   478,
4038:     1367,   596,  1386,  1196,  1197,   956,   958,  1987,  2479,  1420,
4039:     1422,   478,  1428,  1446,  1566,  1568,  1242,  2070,  1179,  1447,
4040:     1948,  1448,  1453,  1454,  1455,  1686,   478,  1459,   976,  1242,
4041:     1466,  1467,  2070,   727,  1471,  1481,  1486,  1493,  1498,   635,
4042:     1494,  1503,   475,  1511,   478,  1514,  1504,  1517,  1512,   980,
4043:     1518,  1520,   633,   718,   634,  1524,  1529,   475,    61,   478,
4044:      478,   637,   819,  1536,  1538,  1137,  2551,  1198,  1199,  1200,
4045:     1201,  1202,  1203,  1545,  1539,  1204,  1205,   727,   478,  1847,
4046:     1591,  1546,  1549,   978,  1550,  -453,    57,  1551,  1552,  1584,
4047:     1593,  1598,  1310,  1658,   476,  1134,  1134,  1134,   976,   505,
4048:     1377,  1660,  1662,   505,  2430,  1678,  1665,  1685,   550,   550,
4049:      553,   505,   558,  1848,  1696,   558,  1699,  1697,   558,   584,
4050:     1720,  1721,   505,   505,  1751,  1737,  1752,  1759,  1744,   603,
4051:     1780,  1309,  1770,  1781,  1310,  1783,  1048,  1782,  1988,  1989,
4052:     1990,  1784,  1991,  1992,  1993,  1994,  1995,  1996,   629,  1854,
4053:     1785,   942,   630,   978,  1804,  1808,  1809,   604,  1871,  1810,
4054:     2106,  1875,  1879,  1887,  1316,  1413,  1885,   558,  1888,  1906,
4055:      729, -1734,  1886,  1907,   584,   505,   584,   584,   584,  1902,
4056:      980,  1206,  1207,  1855,  1913,  1910,  2605,  1566,  1568,  1914,
4057:     1938,  1915,   593,  1916,  1917,  1924,  1318,  1925,  1241,  1935,
4058:     1937,  1946,  1988,  1989,  1990,  1966,  1991,  1992,  1993,  1994,
4059:     1995,  1996,  1958,  1967,  1134,  1968,   801,  1969,  1974,  1970,
4060:     2024,  1971,  1973,  1977,    57,  1474,  1901,  1999,  2029,  2005,
4061:      718,  2012,  2036,  2045,   478,  2046,   802,   729,  2048,  2049,
4062:     2050,  2074,  2084,   478,  2086,  2100,   478,  2093,  2102,   478,
4063:      980,  -547,  -548,  2113,  2114,   729,   478,   478,   478,   478,
4064:      596,  2116,   478,   478,   478,   478,   478,   478,   478,   478,
4065:      478,   478,  2152,  2117,  2118,   478,   478,  2120,  2122,  2123,
4066:      729,  2126,  2294,   638,  2129,   478,  2142,   729,  2144,   478,
4067:     2157,   596,  1208,  1209,  2163,  2164,   652, -1734,   478,  2165,
4068:     2171,   478,  2172,   478,  2195,  2174,  2173,  2182,   596,  2194,
4069:      729,   478,  2198, -1734,   478,   478,  2199,  2178, -1734,   478,
4070:      478,  2202,  2205,  2206,  2215,  2216,  2218,  2233,  2225,  2002,
4071:     2188,  1981,  2001,  2264,  2265,   478,  2282,   478,  2266,  2286,
4072:     1293,  2070,  2283,  2070,  2296,  2057,  2295,  2307,   478,  2315,
4073:     2329,  2338,  2333,  2339, -1734,  1620,  1621,  1622,   478,  1623,
4074:     1624,  1625,  1626,  1627,  1628,  2343,   475,  2719,   475,  2341,
4075:     2356,  2347,  2362,  2376,   478,  2828,  2462,  2430,  2358,  2374,
4076:      923,  2392,  2466,  2450,  2456,   727,  2470,  1242,  2821,  1293,
4077:     2451,  2452,  2223,   818,  2224,  2476,  1981,  2461,  2229,  2230,
4078:     2478, -1734, -1734, -1734,  2465,  2489,  2433,  1686,  2492,  1327,
4079:     2525,  1874,   969,  2486,  2493,  2530,  2778,   718,   718,  2494,
4080:     2510,  2521,  2538,  2047,  1134,  2522,  2528,  2531,  1134,  2437,
4081:     1134,  2544,   718,  2543,  2778,  2545,  2546,  2559,  2567,  2548,
4082:     1572,  2064,  2571,  2595,  2596,  2600,  2622, -1071,  1149,  1151,
4083:     1153,  2852,   727,  2613,  2614,    57,  2064,  2623,  2612,  2621,
4084:      595, -1707,  2637,  2640,  2882, -1708, -1709, -1710, -1711,  2644,
4085:      727,  1241,  2647,  2793, -1712, -1713,  2793, -1714,  1556, -1715,
4086:     1557, -1716, -1717, -1718, -1719,  1573,  1638, -1720,   729, -1721,
4087:    -1722, -1724,  2638,  2474, -1725,   727, -1726, -1727, -1728, -1729,
4088:    -1730, -1734,   727, -1731,  2675,   478, -1732, -1733, -1072,  2702,
4089:     2624,  1574,  2697,  2708,  2643,  2648,  2863,  2662,  2865,  2680,
4090:     2711,  2727,  2710,  2713,  2831,   727,  2730,  2731,  2718,  1575,
4091:     2732,  2734,  2741,  1576,  2733,  2743,  2747,  2748,  2749,  2762,
4092:     2763,  2772,  2859,  2776,  2800,  2784,  2785,  2804,  2807,  2935,
4093:     2788,   478,   478,  2812,   718,  1577,   478,   729,  1578,  2821,
4094:     2796,   478,  2798,  2826,   478,   478,  2830,  2832,  2835,   478,
4095:     2845,  2903,   584,  1579,  2851,  2846,  2847,  2867,   645,  2855,
4096:     2864,   646,  2868,  2870,  2881,   584,  2885,  2726,  2887,   478,
4097:      505,  2890,  2888,   478,  2894,  2070,  2893,  2899,  2895,  2070,
4098:     2435, -1734,  2877,  2900,  1779,  2901,  2917,  2910,  1334,  1335,
4099:     1336,  1337,  1338,  1339,  2512,   478,  2925,   646,   505,   505,
4100:      475,  2931,  2946,   485,   475,  2178,  2948,   486,  2958,  2949,
4101:      818,  2552,  2554,  1981,   550,  2961,  2963,  2969,  1982,  1983,
4102:     1984,  2975,    57,  2974,   727,  2959,  2985,  2960,  1134,  2986,
4103:    -1120,  2988,  2993,   911,   911,   558,   558,   478,   558,   944,
4104:     2391,  2395,  1834,  2140,  1580,  2351,   729,  2876,  2701,   584,
4105:     2921,  1987,  1581,   986,  2464,  2555,  2603,  2983,   505,  2433,
4106:     2927,  2825,  2964,  2957,   718,  1807,  2761,   487,  1437,   584,
4107:     2125,  2147,   987,  2469,   488,  1815,  2437,  1818,  2923,  2179,
4108:     1829,   584,  2962,   727,  2396,  2121,  1833,  2922,  1835,  1553,
4109:     2180,  2219,  1532,  2645,  2455,  1582,  1378,  1359,  2105,  1293,
4110:     1842,  1372,  1417,  1800,  1416,  1845,  2858,  2872,   986,  1850,
4111:     1851,  1852,  1853,  2952,  1857,  1858,  2115,   584,   584,   584,
4112:     2337,   489,  1777,   988,  2913,  1383,  2866,   987,  2806,  2549,
4113:     1293,  1799,  2083,  1421,  2629,  2310,  2790,   801,  2306,  2854,
4114:     2520,  2853,  2536,   478,  2860,  2305,   729,  2308,  2861,  2700,
4115:      478,  1429,   727,  1602,  1604,  1608,  1609,  2915,   478,   478,
4116:     2916,  2945,   478,  2550,  1456,  2020,  1726,  2108,   718,  1592,
4117:     2043,  1961,  2041,  1870,  1736,   478,  2077,  2336,   988,  2382,
4118:     2184,  2070,  2848,  1564,   478,  1480,  1955,  2383,  1746,   478,
4119:     2070,   490,   478,  1381,  2352,  2070,     0,     0,  2070,   478,
4120:      478,     0,  1748,     0,     0,     0,   475,     0,     0,     0,
4121:        0,   478,   718,   478,   989,   475,     0,  2070,     0, -1734,
4122:      475,  1638,  1638,   475,     0,     0,  1638,     0,     0,     0,
4123:        0,     0,     0,   478,     0,     0,     0,     0,   491,     0,
4124:      492,     0,   475,     0,     0,  2384, -1734, -1734, -1734,     0,
4125:     1991,  1992,  1993,  1994,  1995,  1996,   493,     0,     0,     0,
4126:        0,   727,   494,     0,   990,   495,  2437,  1638,  1638,   989,
4127:        0,     0,   991,     0,     0,     0,     0,     0,     0,     0,
4128:        0,  1260,     0,     0,   992,     0,     0,  2625,  1987,    57,
4129:     2746,   727,     0,     0,     0,     0,     0,   478,     0,     0,
4130:        0,   478,   729,  2070,     0,     0,     0,     0,  1242,     0,
4131:        0,     0,  2629,   596,     0,   993,     0,     0,     0,   990,
4132:        0,     0,     0,     0,     0,   478,  1513,   991,   475,   478,
4133:        0,     0,     0,   729,     0,  2070,   729,     0,     0,   992,
4134:        0,  2385,   478,     0,     0,     0,     0,     0,  1298,   720,
4135:        0,     0,     0,   721,     0,     0,     0,   478,     0,     0,
4136:      475,   727,   995,     0,     0,     0,     0,  1134,     0,     0,
4137:      993,  1134,   478,  2699,     0,     0,     0,     0,     0,     0,
4138:        0,     0,     0,     0,   996,     0,     0,     0,     0,   973,
4139:      584,     0,     0,     0,     0,   974,     0,     0,     0,  2064,
4140:        0,     0,   986,  2064,   998,     0,     0,   505,   505,  1561,
4141:        0,     0,     0,   584,   584,  1385,  2842,   995,     0,     0,
4142:        0,   987,     0,     0,     0,     0,     0,    57,    57,   478,
4143:        0,     0,     0,   723,     0,  2070,     0,  2435,     0,   996,
4144:      584,  1440,     0,     0,     0,     0,     0,     0,     0,     0,
4145:      478,     0,   478,   584,   478,     0,     0,     0,   478,   998,
4146:      475,  2386,     0,     0,  2387,   478,     0,     0,     0,     0,
4147:      584,  2070,   988,     0,   584,  2873,     0,     0,     0,     0,
4148:        0,   727,     0,  1988,  1989,  1990,   478,  1991,  1992,  1993,
4149:     1994,  1995,  1996,     0,     0,     0,   475,     0,     0,     0,
4150:        0,   975,     0,     0,     0,   478,     0,     0,     0,     0,
4151:     1978,  1979,     0,     0,     0,  1998,     0,   727,   478,     0,
4152:      718,     0,     0,     0,     0,   720,     0,     0,     0,   721,
4153:     1735,     0,     0,  2201,     0,     0,     0,     0,  1134,  2437,
4154:        0,     0,     0,     0,     0,     0,     0,     0,   727,     0,
4155:       57,   727,  1745,     0,  1747,   478,  2025,  2026,   478,   478,
4156:        0,  2070,  2936,   989,     0,     0,  1448,     0,  2837,  1638,
4157:     1638,  1638,  1638,     0,     0,  1638,  1638,  1638,  1638,  1638,
4158:     1638,  1638,  1638,  1638,  1638,     0,   475,   718,     0,     0,
4159:        0,     0,     0,   478,     0,     0,     0,     0,     0,     0,
4160:        0,  1795,     0,     0,     0,   718,     0,  1497,     0,   723,
4161:        0,     0,     0,   990,  2064,   584,     0,     0,     0,  2064,
4162:        0,   991,  2064,     0,     0,  1527,     0,  1638,  1638,     0,
4163:      718,   720,     0,   992,     0,   721,     0,   718,     0,   478,
4164:     1194,  1195,     0,     0,     0,     0,     0,   724,     0,     0,
4165:        0,     0,     0,     0,   976,     0,     0,     0,  1544,     0,
4166:      718,     0,     0,     0,   993,     0,     0,     0,     0,     0,
4167:        0,     0,     0,     0,     0,   818,     0,     0,  1981,     0,
4168:     1880,  1881,     0,  1982,  1983,  1984,     0,     0,     0,   646,
4169:      646,     0,   505,   505,   818,   505,   646,  1981,   584,     0,
4170:     2278,     0,  1982,  1983,  1984,   994,    57,     0,     0,   978,
4171:     2435,   995,     0,     0,     0,   723,  1196,  1197,     0,  2504,
4172:        0,     0,     0,     0,     0,     0,     0,     0,    57,     0,
4173:        0,     0,     0,   996,     0,     0,     0,     0,   726,   997,
4174:        0,     0,     0,     0,     0,  1631,     0,     0,     0,     0,
4175:        0,  2360,     0,   998,   727,     0,  1657,     0,     0,  2064,
4176:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4177:        0,     0,  1293,     0,     0,  2393,     0,     0,     0,   718,
4178:     1198,  1199,  1200,  1201,  1202,  1203,   646,     0,  1204,  1205,
4179:     2440,  2441,  2442,  2443,  2444,  2445,  2446,  2447,  2448,  2449,
4180:        0,     0,     0,     0,     0,     0,   980,     0,   720,     0,
4181:        0,     0,   721,     0,     0, -1514,     0,     0,     0,   584,
4182:      911,     0,     0,   724,     0,     0,     0,     0,     0,     0,
4183:        0,     0,    57,     0,     0,     0,     0,     0,   718,     0,
4184:        0,   584,     0,   584,     0,     0,     0,     0,     0,     0,
4185:        0,     0,  1760,     0,  1765,     0,     0,     0,  2242,  2243,
4186:     2244,  2245,     0,     0,  2249,  2250,  2251,  2252,  2253,  2254,
4187:     2255,  2256,  2257,  2258,     0,     0,     0,     0,     0,     0,
4188:        0,     0,   986,     0,  1986,     0,     0,     0,     0,     0,
4189:      584,    57,   723,     0,  1206,  1207,     0,     0,     0,  1440,
4190:      505,   987,     0,  1986,     0,     0,     0,   718, -1514,  2056,
4191:      505,  1816,   505,  1820,   726,   505,  2288,  2289,     0,     0,
4192:        0,   505,     0,   505,     0,     0,     0,     0,     0,   724,
4193:        0,     0,     0,     0,   646,   505,     0,     0,     0,   646,
4194:      505,     0,     0,     0,   505,   505,   505,   505,     0,   505,
4195:      505,     0,   988,  1987,     0,     0,     0,     0,     0,     0,
4196:    -1514,     0,     0,     0,     0,     0,     0,     0,     0,   584,
4197:      584,  1882,  1987,     0, -1514,     0,     0,     0,    57, -1514,
4198:        0,     0,     0,     0, -1514,     0,  1896,     0,     0,     0,
4199:        0,     0,     0, -1514,     0,   720,   720, -1514,     0,   721,
4200:      721,     0,     0,     0,     0,  1208,  1209,     0,     0,     0,
4201:      720,     0,     0,     0,   721,     0,   718,     0,     0,  2384,
4202:      726,     0,     0,     0,     0,  1210,     0,     0, -1514,     0,
4203:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4204:        0,     0,     0,   989,     0,     0,   718, -1514,     0,     0,
4205:        0,     0,     0,     0,     0,     0,     0,     0,  2181,     0,
4206:        0,     0,     0,     0,     0,     0,  2190,  2191,  2193,     0,
4207:        0,     0,     0,     0,     0,     0,  1638,     0,     0,   723,
4208:      723,     0,     0,     0,     0,     0,  2207,     0,     0,     0,
4209:        0,     0,     0,   990,   723,     0, -1514,     0,     0, -1514,
4210:        0,   991,     0,     0,     0, -1514,   724,     0,     0,     0,
4211:        0,     0,     0,   992,     0,     0,   718,     0,  1309,     0,
4212:        0,  1310,     0,     0,   505,     0,     0,     0,     0,     0,
4213:        0,  1298,   720,     0,     0,     0,   721,     0,     0, -1514,
4214:        0,     0,     0,     0,   993,     0,     0,     0,  1988,  1989,
4215:     1990,  1316,  1991,  1992,  1993,  1994,  1995,  1996, -1734,     0,
4216:        0,     0, -1514,     0,     0,  1631,  1638,  1988,  1989,  1990,
4217:        0,  1991,  1992,  1993,  1994,  1995,  1996,     0,  1194,  1195,
4218:        0,     0,     0,  1318,     0,     0,     0,     0,     0,     0,
4219:        0,   995,     0,     0,     0,     0,     0,   726,   584,     0,
4220:        0,     0,     0,     0,     0,  2073,     0,     0,     0,     0,
4221:        0,  2720,     0,   996,     0,     0,   723,  2057,     0,     0,
4222:     2073,     0,     0,     0,  2092,     0,     0,  2095,     0,  1765,
4223:        0,     0,     0,   998,  1638,     0,   718,  2302,  2303,  2304,
4224:        0,     0,     0,     0, -1514,     0,  2739,  2740,     0,     0,
4225:        0,     0, -1514,  2027,  1196,  1197,     0,     0,     0,     0,
4226:        0,  2750,   720,     0,     0,     0,   721,     0, -1514,     0,
4227:    -1514, -1514,   718,     0,     0,     0,     0,     0,     0,     0,
4228:     1497,     0,     0,     0, -1734,     0,     0,     0,     0,     0,
4229:        0,     0,     0,   724,   724,  2359,     0,     0,     0,     0,
4230:    -1734,     0,     0,   718,     0, -1734,   718, -1514,   724,     0,
4231:    -1514, -1514, -1514,     0,     0,     0,     0,     0,  1198,  1199,
4232:     1200,  1201,  1202,  1203,     0,     0,  1204,  1205,     0,     0,
4233:        0,     0,     0,     0,     0,  2808,     0,     0,     0,     0,
4234:        0, -1734,  1497,     0,     0,     0,   723,   584,     0,     0,
4235:        0,     0,     0,     0,  1497,   584,   584,   584,     0,     0,
4236:        0,     0,     0,  2829,  2460,  2646,   720,     0,   505,     0,
4237:      721,     0,     0,     0,     0,   584,     0,     0,     0,     0,
4238:        0,     0,     0,     0,   726,   726,     0,  2214,     0,     0,
4239:        0,     0,     0,     0,     0,     0,  1327,  1561,   818,   726,
4240:        0,  1981,     0,   646,     0,     0,  1982,  1983,  1984,     0,
4241:      720,     0,     0,     0,   721,     0,     0,     0,     0,  1497,
4242:     1497,     0,     0,  2505,     0,     0,     0,     0,     0,     0,
4243:      724,  1308,  1206,  1207,   973,     0,  1309,     0,     0,  1310,
4244:      974,     0,  1631,     0,  1311,  1312,  1313,   986,     0,     0,
4245:      723,     0,     0,     0,     0,  2721,     0,     0,     0,     0,
4246:        0,  1314,     0,     0,  1315,     0,   987,     0,     0,  1316,
4247:        0,     0,     0,     0,     0,     0,  1317,  2515,  2516,  2517,
4248:     2518,     0,     0,     0,     0,     0,     0,     0, -1734,     0,
4249:        0,     0,     0,     0,   723,     0,     0,     0,     0,     0,
4250:        0,  1318,     0,     0,     0,     0,     0,     0,     0,   718,
4251:        0,     0,     0,     0,     0,     0,     0,   988,     0,     0,
4252:        0,   726,     0,  2769,     0,     0,   584,   584,   584,   476,
4253:        0,  2073,  2314,     0,     0,     0,  2314,  2328,     0,     0,
4254:        0,     0,     0,  1208,  1209,     0,   975,     0,     0,     0,
4255:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4256:      724,     0,     0,     0,     0,     0,  1765,     0,     0,     0,
4257:        0,  1309,     0,     0,  1310,     0,     0,     0,     0,     0,
4258:        0,     0,     0,     0,   584,     0,   505,     0, -1734,     0,
4259:     1497,  1440,  1497,     0,  1527,  1334,  1335,  1336,  1337,  1338,
4260:     1339,     0,  1319,     0,  1316,     0,     0,  1986,   989,     0,
4261:      505, -1734,  2394,     0,     0,     0,     0,     0,  1320,     0,
4262:        0,     0,     0,  1321,     0,   505,   505,   505,   505,   505,
4263:      505,   505,   505,   505,   505,     0,  1318,     0,     0,     0,
4264:        0,   895,   895,     0,     0,  1322,  1323,     0,     0,     0,
4265:     1440,   726,     0,   584,     0,     0,     0,     0,   990,  1324,
4266:        0,     0,     0,  1440,   724,     0,   991,     0,     0,     0,
4267:        0,     0,     0,     0,  1527,     0,  1987,     0,   992,     0,
4268:        0,     0,     0,     0,     0,     0,   584,     0,     0,     0,
4269:        0,     0,     0,  1497,     0,     0,     0,  1325,     0,   976,
4270:     1326,     0,     0,     0,  1043,  1050,  2037,     0,   724,   993,
4271:        0,     0,     0,     0,  1327,     0,     0,  1328,   720,     0,
4272:        0,     0,   721,     0,     0,     0,     0,     0,     0,     0,
4273:        0,     0,     0,     0,     0,     0,     0, -1734,     0,     0,
4274:        0,  2497,     0,     0,     0,     0,     0,     0,     0,     0,
4275:     1836,     0,     0, -1734,   978,   726,   995,     0, -1734,     0,
4276:        0,     0,     0,     0,  2514,  2728,   584,   584,   584,   584,
4277:        0,     0,     0,  2314,  2328,     0,  2314,     0,   996,  2523,
4278:        0,     0,     0,  2073,  1837,   720,     0,  2073,     0,   721,
4279:        0,     0,     0,  2541, -1734,     0,     0,     0,   998,   726,
4280:        0,     0,   723,   720,     0,     0,  1329,   721,     0,   911,
4281:        0,     0,     0,  2092,     0,     0,     0,     0,  1765,  2767,
4282:        0,     0,     0,     0,  1631,     0,     0,     0,   720,     0,
4283:     1440,     0,   721,     0,     0,   720,     0,     0,     0,   721,
4284:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1327,
4285:        0,   980,     0,     0,     0,  2604,     0,     0,   720,     0,
4286:        0,     0,   721,     0,     0,     0,     0,     0,     0,   723,
4287:        0,  1988,  1989,  1990,     0,  1991,  1992,  1993,  1994,  1995,
4288:     1996,     0,     0,     0,  1043,     0,     0,   723,     0,     0,
4289:     2817,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4290:        0,  1264,     0,     0,     0,     0,  1330,     0,     0,  1331,
4291:     1332,  1333,   723,  1334,  1335,  1336,  1337,  1338,  1339,   723,
4292:        0,     0,     0,     0,  1497,     0,  2841,     0,     0,     0,
4293:     1275,     0,     0,  1896,     0,     0,     0,     0,     0,     0,
4294:        0, -1734,   723,     0,  2641,     0,     0,     0,     0,     0,
4295:     1285,  1286,  1287,     0,     0,  1294,     0,     0,     0,     0,
4296:        0,     0,  1309,     0,     0,  1310,     0,     0,     0,     0,
4297:     1311,  1312,  1313,     0,     0,     0,     0,   720,  1349,     0,
4298:     2657,   721,     0,     0,     0,     0,     0,  1314,     0,   476,
4299:     2314,     0,     0,  2668,     0,  1316,   505,     0,  2073,     0,
4300:        0,     0,  1317,  2073,     0,     0,  2073,     0,  2679,     0,
4301:        0,  2682,     0,     0,     0,     0,   724,     0,     0,     0,
4302:        0,     0,     0,     0,     0,  2707,     0,  1318,     0,  1393,
4303:        0,     0,     0,  1407,  1412,     0,   720,     0,     0,     0,
4304:      721, -1734,     0,     0,     0,   646,   505,     0,  1334,  1335,
4305:     1336,  1337,  1338,  1339,   584,     0,     0,     0,     0,     0,
4306:        0,   723,     0,     0,     0,     0,     0,     0,     0,     0,
4307:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4308:        0,   505,   505,   724,     0,     0,     0,  1043,     0,     0,
4309:        0,     0,  1440,     0,  1043,     0,   505,     0,     0,     0,
4310:        0,   724,     0,     0,     0,   720,     0,   726,   584,   721,
4311:        0,  2707,     0,     0,     0,  1043,     0,     0,     0,     0,
4312:      723,     0,     0,     0,     0,     0,   724,     0,  1319,     0,
4313:      505,     0,     0,   724,     0,     0,     0,  1342,     0,     0,
4314:        0,     0,     0,  2073,  1320,     0,     0,     0,  2682,  1321,
4315:        0,     0,     0,     0,     0,     0,   724,     0,     0,     0,
4316:        0,     0,     0,     0,     0,  2803,     0,     0,     0,     0,
4317:      505,  1322,  1323,     0,   726,     0,     0,  1342,     0,   584,
4318:        0,     0,     0,     0,     0,  1324,     0,     0,     0,   723,
4319:        0,     0,   726,     0,     0,     0,     0,     0,   505,     0,
4320:        0,     0,   646,     0,     0,     0,     0,     0,     0,     0,
4321:        0,     0,     0,     0,   720,   584,     0,   726,   721,     0,
4322:        0,     0,     0,  1325,   726,     0,  1326,     0,     0,     0,
4323:     1043,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4324:     1327,     0,     0,   476,   720,     0,     0,   726,   721,     0,
4325:        0,     0,  2857,     0,     0,     0,   505,     0,     0,     0,
4326:     2679,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4327:        0,     0,     0,     0,     0,   724,     0,     0,     0,  2707,
4328:      646,   646,   646,     0,     0,  1342,     0,     0,     0,     0,
4329:        0,     0,  1342,     0,     0,     0,     0,     0,   723,     0,
4330:    -1528,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4331:        0,     0,     0,     0,   720,     0,     0,     0,   721,     0,
4332:        0,     0,     0,  2679,     0,     0,     0,     0,   723,     0,
4333:        0,     0,  1329,     0,   724,  2803,     0,     0,     0,     0,
4334:        0,     0,  1596,     0,     0,     0,     0,     0,     0,  1765,
4335:        0,     0,  1615,     0,  1632,     0,     0,  1644,  1647,  1652,
4336:     1655,     0,     0,  1440,     0,     0,   726,     0,     0,  2707,
4337:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4338:        0,  1667,     0,     0,     0,  2668,   646,  1671,  1672,  1673,
4339:     1674,     0,     0, -1528,     0,  1683,  1684,     0,   723,     0,
4340:     1695,     0,     0,   724,  1698,     0,     0,  1706,  1707,  1708,
4341:     1709,  1710,  1711,  1712,  1713,  1714,     0,     0,  1715,     0,
4342:        0,     0,     0,  1723,     0,   726,  1727,     0,   895,     0,
4343:     1043,     0,  1330,     0,   720,  1331,  1332,  1333,   721,  1334,
4344:     1335,  1336,  1337,  1338,  1339, -1528,     0,     0,     0,     0,
4345:        0,     0,     0,  1749,     0,     0,     0,     0,     0, -1528,
4346:        0,     0,     0,     0, -1528,     0,     0,     0,     0, -1528,
4347:      720,     0,     0,     0,   721,     0,     0,     0, -1528,     0,
4348:        0,     0, -1528,     0,  1286,  1287,     0,     0,     0,     0,
4349:        0,     0,     0,     0,   726,     0,     0,     0,     0,     0,
4350:        0,   720,     0,     0,   720,   721,  1342,     0,   721,     0,
4351:        0,     0,   724, -1528,     0,     0,     0,  1342,   723,     0,
4352:        0,  1639,  1309,     0,     0,  1310,     0,  1342,  1342,  1342,
4353:        0,     0, -1528,     0,     0,     0,  1342,     0,     0,     0,
4354:        0,     0,   724,     0,     0,     0,     0,     0,     0,  1309,
4355:        0,     0,  1310,     0,   723,  1316,     0,  1311,  1312,  1313,
4356:        0,     0, -1734,  1043,     0,     0,  1867,  1868,     0,  1869,
4357:        0,     0,     0,     0,  1314,     0,     0,     0,     0,     0,
4358:        0, -1528,  1316,     0, -1528,   723,     0,  1318,   723,  1317,
4359:    -1528,  1342,     0,     0,     0,     0,     0,     0,     0,     0,
4360:     1905,     0,     0,   726,     0,     0,     0,     0,     0,     0,
4361:        0,     0,   724,     0,  1318,     0,     0,     0,     0,     0,
4362:        0,     0,     0,     0, -1528,     0,     0,     0,     0,     0,
4363:        0,     0,     0,   726,     0,  1342,     0,     0,     0,     0,
4364:        0,     0,     0,     0,   507,     0,     0, -1528,     0,  1342,
4365:        0,     0,     0,     0,  1342,     0,     0,  2287,     0,     0,
4366:        0,     0,  1043,     0,     0,     0,     0,     0,     0,  1959,
4367:        0,     0,     0,     0,  1965,     0,     0,     0,     0,     0,
4368:        0,     0,     0,     0,     0,     0,     0,     0, -1734,     0,
4369:        0,     0,     0,     0,     0,     0,     0,   508,     0,     0,
4370:        0,     0,  2057,   726, -1734,     0,     0,   720,     0, -1734,
4371:        0,   721,  1980,   509,     0,  1319,     0,     0,     0,     0,
4372:        0,     0,     0,     0,  1652,     0,  1652,  1652,     0, -1528,
4373:        0,  1320,   724,     0,  2016,     0,  1321, -1528,  2019,     0,
4374:        0,  2021,     0,     0,     0, -1734,     0,     0,     0,     0,
4375:        0,     0,     0, -1528,     0, -1528, -1528,     0,  1322,  1323,
4376:        0,     0,     0,     0,     0,     0,     0,   510,   724,     0,
4377:        0,     0,  1324,     0,     0,  2039,     0,   511,  2042,     0,
4378:     2044,     0,     0,     0,     0,     0,     0,     0,     0,   512,
4379:        0,   723, -1528,     0,   513, -1528, -1528, -1528,     0,   724,
4380:     1327,     0,   724,     0,     0,     0,     0,     0,     0,     0,
4381:     1325,     0,     0,  1326,     0,     0,     0,     0,     0,     0,
4382:        0,   514,     0,   726,     0,     0,     0,  1327,     0,     0,
4383:     1328,     0,     0,     0,     0,     0,     0,     0,  1342,     0,
4384:        0,     0,     0,     0,     0,     0,  1393,     0,     0,     0,
4385:        0,     0,     0,     0,     0,     0,     0,  1342,     0,   726,
4386:        0,  1412,  1713,     0,     0,   515,     0,     0,     0,   516,
4387:        0,     0,     0,     0,  1342,     0,  1639,  1639,     0,  1997,
4388:     2119,  1639,     0,     0,     0,     0,  1342,     0,     0,  1342,
4389:      726,     0, -1734,   726,  1342,     0,     0,  1342,     0,     0,
4390:        0,     0,  1309,     0,     0,  1310,     0,     0,     0,  1342,
4391:    -1734, -1734, -1734,  1342,  1342,  1342,  1342,     0,     0,  1329,
4392:        0,     0,  1639,  1639,     0,  1342,  1342,     0,     0,     0,
4393:        0,     0,   517,     0,     0,  1316,     0,  1342,  1043,     0,
4394:     1342,     0,  1317,     0,     0,     0,   518,     0,  1342,  1342,
4395:     1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,     0,     0,
4396:        0,     0,     0,     0,     0,  1342,     0,  1318,     0,  1342,
4397:        0,     0,     0,     0,     0,     0,     0,     0,     0,   519,
4398:        0,     0,   520,     0,     0,     0,     0,     0,     0,     0,
4399:      521,  1342, -1734,   522,     0,     0,     0,     0,     0,  1334,
4400:     1335,  1336,  1337,  1338,  1339,   724,     0,     0,     0,     0,
4401:        0,     0,   523,     0,     0,     0,     0,     0,     0,  1330,
4402:        0,     0,  1331,  1332,  1333,   524,  1334,  1335,  1336,  1337,
4403:     1338,  1339,   525,     0,     0,     0,  2232,     0,     0,  1972,
4404:        0,   526,     0,     0,     0,  2236,     0,   527,  2237,     0,
4405:        0,  2239,     0,     0,     0,     0,     0,     0,     0,     0,
4406:        0,     0,  1309,     0,     0,  1310,     0,     0,  1319,     0,
4407:        0,     0,   528,     0,     0,     0,     0,  2259,  2260,     0,
4408:        0,     0,     0,     0,  1320,     0,     0,     0,     0,  1321,
4409:        0,  2270,     0,     0,     0,  1316,   726,     0,     0,     0,
4410:     2276,     0, -1734,  2279,     0,  2281,     0,     0,     0,  1342,
4411:     1342,  1342,     0,  2285,     0,     0,     0,     0,     0,     0,
4412:        0,  2292,  2293,     0,     0,  1324,     0,  1318,     0,     0,
4413:        0,     0,     0,  1309,     0,     0,  1310,     0,     0,     0,
4414:        0,  1311,  1312,  1313,     0,     0,     0,  1342,     0,     0,
4415:     2332,     0,     0,     0,     0,     0,     0,     0,  1314,     0,
4416:     2340,  2273,     0,     0,     0,     0,  1316,     0,     0,     0,
4417:        0,     0,     0,  1317,     0,     0,  2353,     0,     0,     0,
4418:     1327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4419:        0,     0,     0,     0,     0,     0,     0,  2290,  1318,     0,
4420:        0,  1342,     0,     0,     0,     0,     0,  1342,     0,     0,
4421:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4422:     1997,  1997,  1342,     0,  1639,  1639,  1639,  1639, -1734,     0,
4423:     1639,  1639,  1639,  1639,  1639,  1639,  1639,  1639,  1639,  1639,
4424:     1997,     0,     0,     0, -1734,     0,     0,     0,     0, -1734,
4425:        0,     0,     0,     0,     0,     0,     0,     0,  1342,     0,
4426:        0,  1342,     0,  1342,     0,     0,     0,  1997,  1997,     0,
4427:        0,     0,  1329,     0,     0,     0,     0,     0,     0,     0,
4428:        0,  1342,  1639,  1639,  1342, -1734,  1342,     0,     0,     0,
4429:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1319,
4430:        0,     0,     0,     0,     0,     0,     0,  2485,     0,     0,
4431:        0,     0,     0,     0,     0,  1320,     0,   -39,     0,     0,
4432:     1321,     0,  1309,     0,     0,  1310,     0,     0,     0,     0,
4433:        0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
4434:     1327,     0,  1322,  1323,     0,     0,     2,     0,     3,     4,
4435:        0,     0,     0,  2498,  2499,  1316,  1324,     0,  2500,     0,
4436:        0,  1342, -1734,  2503,     5,     0,  2506,  2507,     0,     0,
4437:        0,  2511,  1330,     6,     0, -1734, -1734, -1734,     0,  1334,
4438:     1335,  1336,  1337,  1338,  1339,     7,     0,  1318,     0,     0,
4439:        0,     0,     0,     0,  1325,     0,     8,  1326,     0,     0,
4440:        0,     0,     0,     0,     0,     0,     0,     0,     9,     0,
4441:       10,  1327,     0,     0,  1328,     0,     0,   895,     0,     0,
4442:        0,     0,     0,     0,     0,     0,     0,     0,    11,     0,
4443:        0,     0, -1734,     0,     0,     0,     0,     0,     0,     0,
4444:        0,     0,    12,  1309,     0,     0,  1310,     0,     0,     0,
4445:        0,     0,    13,     0,     0,     0,     0,  2291,    14,  2598,
4446:        0,     0,     0,     0,     0,     0,    15,     0,    16,    17,
4447:        0,     0,     0,     0,  1342,     0,  1316,     0,  1342,  1342,
4448:        0,  1342,    18, -1734,  1997,  1997,  1997,  1997, -1734,     0,
4449:        0,  1997,  1997,  1997,  1997,  1997,  1997,  1997,  1997,  1997,
4450:     1997,  1342,  1342,  1329, -1734,     0,     0,     0,  1318, -1734,
4451:        0,    19,  1342,     0,     0,     0,     0,     0,  1342,     0,
4452:        0,  1342,     0,  1342,     0,     0,    20,  1342,     0,     0,
4453:     1997,  1997, -1734,     0,  1342,  1342,     0,     0,     0,  1334,
4454:     1335,  1336,  1337,  1338,  1339, -1734,     0,     0,     0,     0,
4455:        0,    21,     0,     0,     0,     0,     0,     0,     0,     0,
4456:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4457:        0,     0,  2016,     0,  1342,     0,     0,     0,  2508,     0,
4458:     2652,  2653,  1342,     0,  2654,     0,     0,     0,     0,     0,
4459:        0,     0,     0,     0,     0,  1342,     0,     0,     0,     0,
4460:     1327,     0,     0,  1330,     0,     0,  1331,  1332,  1333, -1734,
4461:     1334,  1335,  1336,  1337,  1338,  1339,     0,     0,     0,     0,
4462:     1661,  2695,  2696,     0,     0, -1734,     0,     0,    22,     0,
4463:    -1734,    23,     0,     0,     0,  2709,     0,     0,     0,     0,
4464:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4465:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4466:       24,     0,     0,     0,     0,     0, -1734,     0,     0,    25,
4467:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4468:        0,     0,     0,    26,     0,     0,     0,     0,     0,     0,
4469:       27,     0, -1734,     0,    28,     0,     0,     0,     0,     0,
4470:        0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
4471:        0,     0,     0,     0,     0,    30,     0,     0,     0,    31,
4472:        0,  1327,     0,     0,     0,     0,     0,  1342,     0,     0,
4473:        0,  1639,     0,     0,     0,     0,     0,     0,     0,     0,
4474:     1342,  1342,  1342,     0,     0,  1342,     0,  2787,  1342,  1342,
4475:        0,     0,     0,  1342,     0,    32,     0,     0,     0,     0,
4476:       33,     0,     0,     0,  1294,     0,     0,     0,     0,     0,
4477:        0,     0,     0,    34,     0,     0,     0,     0,     0,  2809,
4478:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4479:        0,     0, -1734,     0,  2823,     0,     0,    35,     0,  1334,
4480:     1335,  1336,  1337,  1338,  1339,     0,     0,     0,     0,     0,
4481:        0,    36,     0, -1734,   -39,     0,     0,     0,     0,     0,
4482:        0,  1639,     0,     0,     0,     0,     0,     0,     0,     0,
4483:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4484:     1342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4485:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4486:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4487:        0,     0,     0,     0,     0,     0,  2695,     0,     0,     0,
4488:     2869,     0,     0,     0,     0,     0,     0,     0,  1997,  1639,
4489:        0,     0,     0,     0,  1342,  1342,  1342,     0,     0,     0,
4490:        0,     0,     0,     0,     0,     0,     0,     0,  2892,     0,
4491:        0,     0,     0, -1734,     0,     0,     0,     0,     0,     0,
4492:     1334,  1335,  1336,  1337,  1338,  1339,     0,     0,     0,     0,
4493:        0,     0,     0,     0,     0,     0,     0,  1342,  1342,     0,
4494:     2695,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4495:        0,  1342,     0,     0,     0,     0,     0,     0,     0,     0,
4496:        0,     0,     0,  1997,     0,     0,     0,     0,     0,     0,
4497:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4498:     2942,  2942,     0,     0,     0,     0,     0,     0,     0,     0,
4499:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4500:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4501:        0,  1997,     0,     0,     0,  2942,     0,     0,     0,     0,
4502:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1342,
4503:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4504:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4505:        0,  1342,     0,     0,     0,     0,     0,     0,     0,     0,
4506:        0,  2942,     0,     0,     0,  1342,     0,     0,     0,     0,
4507:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4508:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4509:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4510:        0,  1010,   815,   548,   816,   817,   818,   819,   820,     0,
4511:        0,  1342,     0,     0,     0,     0,     0,    93,    94,    95,
4512:       96,    97,    98,    99,   100,  1011,   101,   102,   103,     0,
4513:        0,     0,     0,   821,  1342,     0,   104,   105,     0,   106,
4514:      107,   108,  1012,   110,   111,   112,   113,   822,  1013,   823,
4515:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
4516:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4517:      829,     0,  1014,     0,   135,   136,   137,   138,   139,   140,
4518:     1015,   142,   143,   144,  1342,   145,   146,   147,   148,   149,
4519:      150,     0,  1016,   152,   153,   154,   831,   832,   833,  1017,
4520:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4521:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4522:      171,   172,     0,   173,   174,   175,   176,   177,  1018,     0,
4523:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4524:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4525:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4526:      844,   204,     0,   205,     0,   206,  1019,     0,  1020,   209,
4527:      210,   211,  1021,   213,     0,   214,     0,   845,   846,   217,
4528:        0,   218,   219,   220,   221,   222,   223,   224,  1022,   226,
4529:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4530:        0,   236,  1023,   238,   239,   240,   241,   242,   243,   847,
4531:      848,     0,   849,     0,   247,  1024,  1025,   250,  1026,   252,
4532:      253,   254,   255,   256,     0,     0,   257,  1027,   259,  1028,
4533:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4534:      268,  1029,   270,   271,   272,   273,   274,   275,   276,   277,
4535:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4536:      852,  1030,   853,   291,   292,   293,   294,   854,   295,   296,
4537:     1031,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4538:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4539:      311,  1032,   313,  1033,   859,   316,   317,   318,   319,   320,
4540:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4541:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4542:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4543:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4544:      357,   358,   359,   360,   361,     0,   362,   363,  1034,   365,
4545:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
4546:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
4547:      863,   385,   386,   387,   388,   389,  1035,   391,   392,   864,
4548:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
4549:      403,   404,   405,  1036,   407,   865,   409,     0,   410,   411,
4550:        0,   412,  1037,   414,   415,   416,   417,   418,     0,   866,
4551:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
4552:      427,  1038,   429,   430,   431,   432,   433,     0,     0,   434,
4553:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
4554:      443,   444,   873,  1039,   446,  1040,   448,   449,   450,   451,
4555:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
4556:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
4557:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
4558:        0,     0,     0,   875,   876,  1041,     0,     0,     0,     0,
4559:      878,     0,   879,  1042,     0,     0,     0,   880,     0,   881,
4560:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
4561:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
4562:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
4563:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
4564:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
4565:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
4566:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4567:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
4568:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
4569:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
4570:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4571:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4572:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
4573:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4574:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4575:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4576:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
4577:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
4578:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
4579:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4580:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
4581:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
4582:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
4583:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4584:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
4585:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4586:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
4587:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4588:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4589:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
4590:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4591:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4592:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4593:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4594:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
4595:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
4596:      376,   377,   378,   379,    26,   380,   381,   382,   383,   384,
4597:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
4598:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
4599:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
4600:       31,   412,   413,   414,   415,   416,   417,   418,     0,   866,
4601:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
4602:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
4603:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
4604:      443,   576,   873,     0,   446,   447,   448,   449,   450,   451,
4605:        0,     0,   452,     0,    34,   453,   454,   455,   456,   457,
4606:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
4607:      468,   469,   470,   471,   472,   473,   874,     0,    35,     0,
4608:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
4609:      878,     0,   879,  2799,     0,     0,     0,   880,     0,   881,
4610:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
4611:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
4612:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
4613:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
4614:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
4615:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
4616:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4617:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
4618:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
4619:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
4620:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4621:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4622:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
4623:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4624:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4625:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4626:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
4627:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
4628:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
4629:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4630:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
4631:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
4632:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
4633:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4634:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
4635:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4636:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
4637:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4638:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4639:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
4640:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4641:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4642:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4643:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4644:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
4645:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
4646:      376,   377,   378,   379,    26,   380,   381,   382,   383,   384,
4647:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
4648:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
4649:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
4650:       31,   412,   413,   414,   415,   416,   417,   418,     0,   866,
4651:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
4652:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
4653:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
4654:      443,   576,   873,     0,   446,   447,   448,   449,   450,   451,
4655:        0,     0,   452,     0,    34,   453,   454,   455,   456,   457,
4656:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
4657:      468,   469,   470,   471,   472,   473,   874,     0,    35,     0,
4658:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
4659:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
4660:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
4661:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
4662:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
4663:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
4664:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
4665:      824,  1648,   118,   119,   120,   121,   122,   123,   825,   826,
4666:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4667:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
4668:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
4669:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
4670:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4671:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4672:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
4673:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4674:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4675:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4676:      844,   204,     0,   205,     0,   206,   207,  1649,   208,   209,
4677:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
4678:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
4679:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4680:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
4681:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
4682:      253,   254,   255,   256,     0,  1650,   257,   258,   259,   260,
4683:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4684:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
4685:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4686:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
4687:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4688:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4689:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
4690:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4691:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4692:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4693:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4694:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
4695:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
4696:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
4697:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
4698:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
4699:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
4700:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
4701:      867,     0,  1651,   421,   422,   868,   424,   869,   870,   426,
4702:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
4703:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
4704:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
4705:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
4706:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
4707:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
4708:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
4709:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
4710:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
4711:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
4712:       96,    97,    98,    99,   100,  -937,   101,   102,   103,     0,
4713:        0,     0,  -937,   821,     0,     0,   104,   105,     0,   106,
4714:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
4715:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
4716:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4717:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
4718:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
4719:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
4720:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4721:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4722:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
4723:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4724:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4725:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4726:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
4727:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
4728:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
4729:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4730:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
4731:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
4732:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
4733:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4734:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
4735:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4736:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
4737:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4738:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4739:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
4740:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4741:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4742:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4743:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4744:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
4745:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
4746:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
4747:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
4748:      394,  -937,   395,   396,   397,   398,   399,   400,   401,   402,
4749:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
4750:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
4751:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
4752:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
4753:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
4754:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
4755:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
4756:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
4757:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
4758:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
4759:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
4760:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
4761:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
4762:       96,    97,    98,    99,   100,  1389,   101,   102,   103,     0,
4763:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
4764:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
4765:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
4766:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4767:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
4768:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
4769:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
4770:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4771:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4772:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
4773:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4774:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4775:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4776:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
4777:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
4778:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
4779:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4780:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
4781:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
4782:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
4783:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4784:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
4785:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4786:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
4787:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4788:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4789:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
4790:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4791:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4792:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4793:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4794:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
4795:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
4796:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
4797:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
4798:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
4799:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
4800:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
4801:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
4802:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
4803:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
4804:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
4805:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
4806:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
4807:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
4808:        0,     0,     0,   875,   876,  1390,     0,     0,     0,     0,
4809:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
4810:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
4811:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
4812:       96,    97,    98,    99,   100,  2683,   101,   102,   103,     0,
4813:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
4814:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
4815:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
4816:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4817:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
4818:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
4819:      150,     0,   151,   152,  2684,   154,   831,   832,   833,   834,
4820:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4821:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4822:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
4823:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4824:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4825:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4826:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
4827:      210,   211,   212,   213,     0,   214,     0,  2685,   846,   217,
4828:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
4829:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4830:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
4831:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
4832:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
4833:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4834:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
4835:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4836:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
4837:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4838:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4839:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
4840:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4841:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4842:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4843:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4844:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
4845:      366,  2686,   862,   369,   370,   371,   372,   373,   374,   375,
4846:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
4847:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
4848:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
4849:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
4850:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
4851:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
4852:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
4853:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
4854:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
4855:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
4856:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
4857:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
4858:        0,     0,     0,   875,   876,  2687,     0,     0,     0,     0,
4859:      878,     0,  2688,     0,     0,     0,     0,   880,     0,   881,
4860:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
4861:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
4862:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
4863:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
4864:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
4865:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
4866:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4867:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
4868:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
4869:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
4870:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4871:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4872:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
4873:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4874:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4875:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4876:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
4877:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
4878:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
4879:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4880:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
4881:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
4882:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
4883:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4884:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
4885:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4886:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
4887:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4888:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4889:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
4890:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4891:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4892:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4893:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4894:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
4895:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
4896:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
4897:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
4898:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
4899:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
4900:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
4901:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
4902:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
4903:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
4904:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
4905:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
4906:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
4907:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
4908:        0,     0,     0,   875,   876,   877,     0,     0,     0,     0,
4909:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
4910:      882,    92,  1403,   548,   816,   817,   818,  1404,   820,     0,
4911:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
4912:       96,    97,    98,    99,   100,  1405,   101,   102,   103,     0,
4913:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
4914:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
4915:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
4916:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4917:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
4918:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
4919:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
4920:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4921:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4922:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
4923:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4924:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4925:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4926:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
4927:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
4928:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
4929:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4930:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
4931:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
4932:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
4933:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4934:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
4935:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4936:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
4937:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4938:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4939:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
4940:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4941:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4942:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4943:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4944:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
4945:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
4946:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
4947:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
4948:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
4949:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
4950:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
4951:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
4952:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
4953:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
4954:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
4955:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
4956:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
4957:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
4958:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
4959:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
4960:      882,  1010,   815,   548,   816,   817,   818,   819,   820,     0,
4961:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
4962:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
4963:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
4964:      107,   108,  1012,   110,   111,   112,   113,   822,  1013,   823,
4965:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
4966:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
4967:      829,     0,  1014,     0,   135,   136,   137,   138,   139,   140,
4968:     1015,   142,   143,   144,     0,   145,   146,   147,   148,   149,
4969:      150,     0,  1016,   152,   153,   154,   831,   832,   833,  1017,
4970:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
4971:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
4972:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
4973:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
4974:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
4975:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
4976:      844,   204,     0,   205,     0,   206,  1019,     0,  1020,   209,
4977:      210,   211,  1021,   213,     0,   214,     0,   845,   846,   217,
4978:        0,   218,   219,   220,   221,   222,   223,   224,  1022,   226,
4979:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
4980:        0,   236,  1023,   238,   239,   240,   241,   242,   243,   847,
4981:      848,     0,   849,     0,   247,  1024,  1025,   250,  1026,   252,
4982:      253,   254,   255,   256,     0,     0,   257,  1027,   259,  1028,
4983:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
4984:      268,  1029,   270,   271,   272,   273,   274,   275,   276,   277,
4985:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
4986:      852,  1030,   853,   291,   292,   293,   294,   854,   295,   296,
4987:     1031,   298,   855,   856,   300,   857,   302,   303,   304,     0,
4988:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
4989:      311,  1032,   313,  1033,   859,   316,   317,   318,   319,   320,
4990:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
4991:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
4992:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
4993:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
4994:      357,   358,   359,   360,   361,     0,   362,   363,  1034,   365,
4995:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
4996:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
4997:      863,   385,   386,   387,   388,   389,  1035,   391,   392,   864,
4998:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
4999:      403,   404,   405,  1036,   407,   865,   409,     0,   410,   411,
5000:        0,   412,  1037,   414,   415,   416,   417,   418,     0,   866,
5001:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5002:      427,  1038,   429,   430,   431,   432,   433,     0,     0,   434,
5003:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5004:      443,   444,   873,     0,   446,  1040,   448,   449,   450,   451,
5005:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5006:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5007:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5008:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5009:      878,     0,   879,  1522,     0,     0,     0,   880,     0,   881,
5010:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5011:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5012:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5013:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5014:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
5015:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5016:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5017:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5018:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5019:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
5020:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5021:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5022:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5023:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5024:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5025:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5026:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5027:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
5028:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5029:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5030:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5031:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5032:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5033:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5034:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5035:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5036:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
5037:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5038:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5039:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5040:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5041:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5042:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5043:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5044:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5045:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5046:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5047:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5048:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5049:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5050:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5051:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5052:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
5053:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5054:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5055:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5056:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5057:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5058:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5059:      878,     0,   879,  1642,     0,     0,     0,   880,     0,   881,
5060:      882,  1010,   815,   548,   816,   817,   818,   819,   820,     0,
5061:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5062:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5063:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5064:      107,   108,  1012,   110,   111,   112,   113,   822,  1013,   823,
5065:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5066:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5067:      829,     0,  1014,     0,   135,   136,   137,   138,   139,   140,
5068:     1015,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5069:      150,     0,  1016,   152,   153,   154,   831,   832,   833,  1017,
5070:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5071:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5072:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5073:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5074:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5075:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5076:      844,   204,     0,   205,     0,   206,  1019,     0,  1020,   209,
5077:      210,   211,  1021,   213,     0,   214,     0,   845,   846,   217,
5078:        0,   218,   219,   220,   221,   222,   223,   224,  1022,   226,
5079:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5080:        0,   236,  1023,   238,   239,   240,   241,   242,   243,   847,
5081:      848,     0,   849,     0,   247,  1024,  1025,   250,  1026,   252,
5082:      253,   254,   255,   256,     0,     0,   257,  1027,   259,  1028,
5083:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5084:      268,  1029,   270,   271,   272,   273,   274,   275,   276,   277,
5085:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5086:      852,  1030,   853,   291,   292,   293,   294,   854,   295,   296,
5087:     1031,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5088:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5089:      311,  1032,   313,  1033,   859,   316,   317,   318,   319,   320,
5090:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5091:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5092:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5093:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5094:      357,   358,   359,   360,   361,     0,   362,   363,  1034,   365,
5095:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5096:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5097:      863,   385,   386,   387,   388,   389,  1035,   391,   392,   864,
5098:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5099:      403,   404,   405,  1036,   407,   865,   409,     0,   410,   411,
5100:        0,   412,  1037,   414,   415,   416,   417,   418,     0,   866,
5101:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5102:      427,  1038,   429,   430,   431,   432,   433,     0,     0,   434,
5103:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5104:      443,   444,   873,  1862,   446,  1040,   448,   449,   450,   451,
5105:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5106:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5107:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5108:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5109:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
5110:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5111:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5112:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5113:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5114:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
5115:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5116:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5117:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5118:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5119:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
5120:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5121:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5122:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5123:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5124:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5125:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5126:      844,   204,     0,   205,     0,   206,   207,  1649,   208,   209,
5127:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
5128:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5129:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5130:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5131:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5132:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5133:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5134:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5135:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5136:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
5137:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5138:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5139:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5140:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5141:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5142:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5143:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5144:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5145:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5146:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5147:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5148:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5149:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5150:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5151:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5152:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
5153:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5154:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5155:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5156:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5157:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5158:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5159:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
5160:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5161:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5162:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5163:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5164:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
5165:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5166:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5167:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5168:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5169:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
5170:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5171:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5172:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5173:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5174:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5175:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5176:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5177:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
5178:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5179:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5180:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5181:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5182:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5183:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5184:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5185:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5186:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
5187:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5188:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5189:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5190:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5191:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5192:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5193:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5194:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5195:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5196:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5197:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5198:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5199:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5200:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5201:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5202:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
5203:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5204:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5205:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5206:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5207:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5208:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5209:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
5210:      882,  1010,   815,   548,   816,   817,   818,   819,   820,     0,
5211:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5212:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5213:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5214:      107,   108,  1012,   110,   111,   112,   113,   822,  1013,   823,
5215:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5216:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5217:      829,     0,  1014,     0,   135,   136,   137,   138,   139,   140,
5218:     1015,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5219:      150,     0,  1016,   152,   153,   154,   831,   832,   833,  1017,
5220:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5221:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5222:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5223:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5224:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5225:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5226:      844,   204,     0,   205,     0,   206,  1019,     0,  1020,   209,
5227:      210,   211,  1021,   213,     0,   214,     0,   845,   846,   217,
5228:        0,   218,   219,   220,   221,   222,   223,   224,  1022,   226,
5229:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5230:        0,   236,  1023,   238,   239,   240,   241,   242,   243,   847,
5231:      848,     0,   849,     0,   247,  1024,  1025,   250,  1026,   252,
5232:      253,   254,   255,   256,     0,     0,   257,  1027,   259,  1028,
5233:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5234:      268,  1029,   270,   271,   272,   273,   274,   275,   276,   277,
5235:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5236:      852,  1030,   853,   291,   292,   293,   294,   854,   295,   296,
5237:     1031,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5238:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5239:      311,  1032,   313,  1033,   859,   316,   317,   318,   319,   320,
5240:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5241:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5242:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5243:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5244:      357,   358,   359,   360,   361,     0,   362,   363,  1034,   365,
5245:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5246:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5247:      863,   385,   386,   387,   388,   389,  1035,   391,   392,   864,
5248:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5249:      403,   404,   405,  1036,   407,   865,   409,     0,   410,   411,
5250:        0,   412,  1037,   414,   415,   416,   417,   418,     0,   866,
5251:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5252:      427,  1038,   429,   430,   431,   432,   433,     0,     0,   434,
5253:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5254:      443,   444,   873,     0,   446,  1040,   448,   449,   450,   451,
5255:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5256:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5257:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5258:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5259:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
5260:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5261:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5262:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5263:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5264:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
5265:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5266:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5267:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5268:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5269:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
5270:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5271:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5272:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5273:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5274:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5275:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5276:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5277:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
5278:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5279:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5280:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5281:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5282:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5283:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5284:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5285:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5286:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
5287:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5288:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5289:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5290:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5291:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5292:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5293:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5294:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5295:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5296:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5297:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5298:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5299:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5300:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5301:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5302:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
5303:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5304:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5305:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5306:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5307:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5308:        0,     0,     0,  1408,  1409,     0,     0,     0,     0,     0,
5309:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
5310:      882,    92,  1787,   548,   816,   817,   818,   819,   820,     0,
5311:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5312:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5313:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5314:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
5315:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5316:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5317:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5318:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5319:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
5320:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5321:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5322:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5323:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5324:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5325:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5326:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5327:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
5328:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5329:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5330:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5331:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5332:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5333:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5334:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5335:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5336:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
5337:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5338:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5339:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5340:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5341:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5342:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5343:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5344:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5345:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5346:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5347:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5348:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5349:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5350:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5351:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5352:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
5353:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5354:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5355:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5356:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5357:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5358:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5359:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
5360:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5361:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5362:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5363:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5364:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
5365:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5366:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5367:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5368:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5369:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
5370:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5371:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5372:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5373:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5374:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5375:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5376:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5377:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
5378:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5379:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5380:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5381:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5382:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5383:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5384:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5385:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5386:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
5387:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5388:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5389:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5390:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5391:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5392:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5393:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5394:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5395:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5396:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5397:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5398:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5399:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5400:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5401:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5402:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
5403:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5404:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5405:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5406:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5407:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5408:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5409:      878,     0,  2015,     0,     0,     0,     0,   880,     0,   881,
5410:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5411:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5412:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5413:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5414:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
5415:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5416:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5417:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5418:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5419:      150,     0,   151,   152,  2684,   154,   831,   832,   833,   834,
5420:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5421:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5422:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5423:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5424:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5425:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5426:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5427:      210,   211,   212,   213,     0,   214,     0,  2685,   846,   217,
5428:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5429:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5430:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5431:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5432:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5433:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5434:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5435:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5436:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
5437:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5438:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5439:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5440:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5441:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5442:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5443:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5444:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5445:      366,  2686,   862,   369,   370,   371,   372,   373,   374,   375,
5446:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5447:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5448:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5449:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5450:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5451:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5452:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
5453:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5454:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5455:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5456:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5457:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5458:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5459:      878,     0,  2688,     0,     0,     0,     0,   880,     0,   881,
5460:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5461:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5462:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5463:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5464:      107,   108,   109,   110,   111,   112,  2939,   822,   115,   823,
5465:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5466:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5467:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5468:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5469:      150,     0,   151,   152,   153,  2940,   831,   832,   833,   834,
5470:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5471:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5472:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5473:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5474:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5475:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5476:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5477:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
5478:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5479:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5480:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5481:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5482:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5483:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5484:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5485:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5486:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
5487:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5488:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5489:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5490:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5491:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5492:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5493:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5494:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5495:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5496:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5497:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5498:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5499:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5500:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5501:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5502:      427,   871,   429,   430,  2941,   432,   433,     0,     0,   434,
5503:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5504:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5505:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5506:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5507:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5508:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5509:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
5510:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5511:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5512:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5513:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5514:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
5515:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5516:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5517:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5518:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5519:      150,     0,   151,   152,   153,  2940,   831,   832,   833,   834,
5520:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5521:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5522:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5523:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5524:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5525:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5526:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5527:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
5528:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5529:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5530:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5531:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5532:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5533:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5534:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5535:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5536:      852,   289,   853,   291,   292,   293,   294,   854,   295,   296,
5537:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5538:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5539:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5540:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5541:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5542:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5543:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5544:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5545:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5546:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5547:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5548:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5549:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5550:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5551:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5552:      427,   871,   429,   430,  2941,   432,   433,     0,     0,   434,
5553:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5554:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5555:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5556:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5557:      468,   469,   470,   471,   472,   473,   874,     0,     0,     0,
5558:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5559:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
5560:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5561:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5562:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5563:        0,     0,     0,   821,     0,     0,   104,   105,     0,   106,
5564:      107,   108,   109,   110,   111,   112, -1734,   822,   115,   823,
5565:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5566:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5567:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5568:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5569:      150,     0,   151,   152,   153,  2940,   831,   832,   833,   834,
5570:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5571:      838,   839,   165,   840,   166,     0,   167,   168,   169,   170,
5572:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5573:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5574:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5575:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5576:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5577:      210,   211, -1734,   213,     0,   214,     0,   845,   846,   217,
5578:        0,   218,   219,   220,   221,   222,   223,   224, -1734,   226,
5579:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5580:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5581:      848,     0,   849,     0,   247,     0,     0,   250,   251,   252,
5582:      253,   254,   255,   256,     0,     0,   257,   258,   259, -1734,
5583:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5584:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5585:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5586:      852,   289,   853,   291,   292,   293,   294,     0,   295,   296,
5587:        0,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5588:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5589:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5590:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5591:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5592:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5593:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5594:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5595:      366,   367,   862,   369,   370,   371,   372,   373,   374,   375,
5596:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5597:      863,   385,   386,   387,   388,   389, -1734,   391,   392,   864,
5598:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5599:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5600:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5601:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5602:      427,   871,   429,   430,  2941,   432,   433,     0,     0,   434,
5603:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5604:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5605:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5606:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5607:      468,   469,   470,   471,   472,   473, -1734,     0,     0,     0,
5608:        0,     0,     0,   875,   876,     0,     0,     0,     0,     0,
5609:      878,     0,   879,     0,     0,     0,     0,   880,     0,   881,
5610:      882,    92,   815,   548,   816,   817,   818,   819,   820,     0,
5611:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
5612:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5613:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
5614:      107,   108,   109,   110,   111,   112,   113,   822,   115,   823,
5615:      824,     0,   118,   119,   120,   121,   122,   123,   825,   826,
5616:      124,   125,   827,   828,   128,     0,   129,   130,   131,   132,
5617:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
5618:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5619:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
5620:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
5621:      838,   839,   165,     0,   166,     0,   167,   168,   169,   170,
5622:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5623:      178,   179,   676,   181,   182,     0,   183,   184,   185,     0,
5624:      186,   187,   188,     0,   189,   190,   191,   192,   841,   194,
5625:      195,   196,   197,   198,   842,   843,   200,     0,   201,   202,
5626:      844,   204,     0,   205,     0,   206,   207,     0,   208,   209,
5627:      210,   211,   212,   213,     0,   214,     0,   845,   846,   217,
5628:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
5629:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5630:        0,   236,   237,   238,   239,   240,   241,   242,   243,   847,
5631:      848,     0,   849,     0,   247,   248,   249,   250,   251,   252,
5632:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
5633:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
5634:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5635:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5636:      852,   289,   853,   291,   292,   293,   294,     0,   295,   296,
5637:      297,   298,   855,   856,   300,   857,   302,   303,   304,     0,
5638:      305,   306,     0,     0,   858,   308,   309,     0,     0,   310,
5639:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
5640:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
5641:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5642:      339,   340,     0,   341,   342,   343,   861,   345,   346,   347,
5643:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5644:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
5645:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
5646:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5647:      863,   385,   386,   387,   388,   389,   390,   391,   392,   864,
5648:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5649:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
5650:        0,   412,   413,   414,   415,   416,   417,   418,     0,   866,
5651:      867,     0,     0,   421,   422,   868,   424,   869,   870,   426,
5652:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
5653:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
5654:      443,   444,   873,     0,   446,   447,   448,   449,   450,   451,
5655:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5656:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5657:      468,   469,   470,   471,   472,   473,     0,     0,     0,     0,
5658:        0,     0,     0,  1634,  1635,     0,     0,    92,   815,   548,
5659:      816,   817,  1636,   819,   820,     0,     0,     0,     0,   881,
5660:      882,     0,     0,    93,    94,    95,    96,    97,    98,    99,
5661:      100,     0,   101,   102,   103,     0,     0,     0,     0,     0,
5662:        0,     0,   104,   105,     0,   106,   107,   108,   109,   110,
5663:      111,   112,   113,   822,   115,   823,   824,     0,   118,   119,
5664:      120,   121,   122,   123,   825,   826,   124,   125,   827,   828,
5665:      128,     0,   129,   130,   131,   132,   829,     0,   830,     0,
5666:      135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
5667:        0,   145,   146,   147,   148,   149,   150,     0,   151,   152,
5668:      153,   154,   831,   832,   833,   834,   835,   836,   837,   156,
5669:      157,   158,   159,   160,   161,   162,   838,   839,   165,     0,
5670:      166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
5671:      174,   175,   176,   177,     0,     0,   178,   179,   676,   181,
5672:      182,     0,   183,   184,   185,     0,   186,   187,   188,     0,
5673:      189,   190,   191,   192,   841,   194,   195,   196,   197,   198,
5674:      842,   843,   200,     0,   201,   202,   844,   204,     0,   205,
5675:        0,   206,   207,     0,   208,   209,   210,   211,   212,   213,
5676:        0,   214,     0,   845,   846,   217,     0,   218,   219,   220,
5677:      221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
5678:      230,   231,   232,   233,   234,   235,     0,   236,   237,   238,
5679:      239,   240,   241,   242,   243,   847,   848,     0,   849,     0,
5680:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
5681:        0,     0,   257,   258,   259,   260,     0,   261,   262,   263,
5682:      850,   851,   264,   265,   266,   267,   268,   269,   270,   271,
5683:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
5684:      282,   283,   284,   285,   286,   287,   852,   289,   853,   291,
5685:      292,   293,   294,     0,   295,   296,   297,   298,   855,   856,
5686:      300,   857,   302,   303,   304,     0,   305,   306,     0,     0,
5687:      307,   308,   309,     0,     0,   310,   311,   312,   313,   314,
5688:      859,   316,   317,   318,   319,   320,   321,   322,   323,   324,
5689:      325,     0,   326,   327,   860,   329,   330,   331,   332,   333,
5690:      334,     0,   335,   336,   337,   338,   339,   340,     0,   341,
5691:      342,   343,   861,   345,   346,   347,   348,     0,   349,   350,
5692:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
5693:      361,     0,   362,   363,   364,   365,   366,   367,  1773,  1774,
5694:      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
5695:        0,   380,   381,   382,   383,   384,   863,   385,   386,   387,
5696:      388,   389,   390,   391,   392,   864,   394,     0,   395,   396,
5697:      397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
5698:      407,   865,   409,     0,   410,   411,     0,   412,   413,   414,
5699:      415,   416,   417,   418,     0,   866,   867,     0,     0,   421,
5700:      422,   868,   424,   869,   870,   426,   427,   871,   429,   430,
5701:      431,   432,   433,     0,     0,   434,   435,   436,   437,   438,
5702:      872,     0,   439,   440,   441,   442,   443,   444,   873,     0,
5703:      446,   447,   448,   449,   450,   451,     0,     0,   452,     0,
5704:        0,   453,   454,   455,   456,   457,   458,   459,   460,   461,
5705:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
5706:      472,   473,     0,     0,     0,     0,     0,     0,     0,  1775,
5707:     1776,     0,     0,     0,     0,     0,     0,     0,  1636,     0,
5708:        0,     0,     0,     0,     0,   881,   882,    92,   815,   548,
5709:      816,   817,   818,   819,   820,     0,     0,     0,     0,     0,
5710:        0,     0,     0,    93,    94,    95,    96,    97,    98,    99,
5711:      100,     0,   101,   102,   103,     0,     0,     0,     0,     0,
5712:        0,     0,   104,   105,     0,   106,   107,   108,   109,   110,
5713:      111,   112,   113,   822,   115,   823,   824,     0,   118,   119,
5714:      120,   121,   122,   123,   825,   826,   124,   125,   827,   828,
5715:      128,     0,   129,   130,   131,   132,   829,     0,   830,     0,
5716:      135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
5717:        0,   145,   146,   147,   148,   149,   150,     0,   151,   152,
5718:      153,   154,   831,   832,   833,   834,   835,   836,   837,   156,
5719:      157,   158,   159,   160,   161,   162,   838,   839,   165,     0,
5720:      166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
5721:      174,   175,   176,   177,     0,     0,   178,   179,   676,   181,
5722:      182,     0,   183,   184,   185,     0,   186,   187,   188,     0,
5723:      189,   190,   191,   192,   841,   194,   195,   196,   197,   198,
5724:      842,   843,   200,     0,   201,   202,   844,   204,     0,   205,
5725:        0,   206,   207,     0,   208,   209,   210,   211,   212,   213,
5726:        0,   214,     0,   845,   846,   217,     0,   218,   219,   220,
5727:      221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
5728:      230,   231,   232,   233,   234,   235,     0,   236,   237,   238,
5729:      239,   240,   241,   242,   243,   847,   848,     0,   849,     0,
5730:      247,     0,   249,   250,   251,   252,   253,   254,   255,   256,
5731:        0,     0,   257,   258,   259,   260,     0,   261,   262,   263,
5732:      850,   851,   264,   265,   266,   267,   268,   269,   270,   271,
5733:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
5734:      282,   283,   284,   285,   286,   287,   852,   289,   853,   291,
5735:      292,   293,   294,     0,   295,   296,   297,   298,   855,   856,
5736:      300,   857,   302,   303,   304,     0,   305,   306,     0,     0,
5737:      858,   308,   309,     0,     0,   310,   311,   312,   313,   314,
5738:      859,   316,   317,   318,   319,   320,   321,   322,   323,   324,
5739:      325,     0,   326,   327,   860,   329,   330,   331,   332,   333,
5740:      334,     0,   335,   336,   337,   338,   339,   340,     0,   341,
5741:      342,   343,   861,   345,   346,   347,   348,     0,   349,   350,
5742:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
5743:      361,     0,   362,   363,   364,   365,   366,   367,   368,   369,
5744:      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
5745:        0,   380,   381,   382,   383,   384,   863,   385,   386,   387,
5746:      388,   389,   390,   391,   392,   864,   394,     0,   395,   396,
5747:      397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
5748:      407,   865,   409,     0,   410,   411,     0,   412,   413,   414,
5749:      415,   416,   417,   418,     0,   866,   867,     0,     0,   421,
5750:      422,   868,   424,   869,   870,   426,   427,   871,   429,   430,
5751:      431,   432,   433,     0,     0,   434,   435,   436,   437,   438,
5752:      872,     0,   439,   440,   441,   442,   443,   444,   873,     0,
5753:      446,   447,   448,   449,   450,   451,     0,     0,   452,     0,
5754:        0,   453,   454,   455,   456,   457,   458,   459,   460,   461,
5755:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
5756:      472,   473,     0,     0,     0,     0,     0,     0,     0,  1634,
5757:     1635,     0,     0,     0,     0,     0,     0,     0,  1636,     0,
5758:        0,     0,     0,     0,     0,   881,   882,    92,   815,   548,
5759:      816,   817,   818,   819,   820,     0,     0,     0,     0,     0,
5760:        0,     0,     0,    93,    94,    95,    96,    97,    98,    99,
5761:      100,     0,   101,   102,   103,     0,     0,     0,     0,   821,
5762:        0,     0,   104,   105,     0,   106,   107,   108,   109,   110,
5763:      111,   112,     0,   822,   115,   823,   824,     0,   118,   119,
5764:      120,   121,   122,   123,   825,   826,   124,   125,   827,   828,
5765:      128,     0,   129,   130,   131,   132,   829,     0,   830,     0,
5766:      135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
5767:        0,   145,   146,   147,   148,   149,   150,     0,   151,   152,
5768:      153,   154,   831,   832,   833,   834,   835,   836,   837,   156,
5769:      157,   158,   159,   160,   161,   162,   838,   839,   165,   840,
5770:      166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
5771:      174,   175,   176,   177,     0,     0,   178,   179,   676,   181,
5772:      182,     0,   183,   184,   185,     0,   186,     0,   188,     0,
5773:      189,   190,   191,   192,   841,   194,   195,   196,   197,   198,
5774:      842,   843,   200,     0,   201,   202,   844,   204,     0,   205,
5775:        0,   206,   207,     0,   208,   209,   210,   211,     0,   213,
5776:        0,   214,     0,   845,   846,   217,     0,   218,   219,   220,
5777:      221,   222,   223,   224,     0,   226,   227,   228,   229,     0,
5778:      230,   231,   232,   233,   234,   235,     0,   236,   237,   238,
5779:      239,   240,   241,   242,   243,   847,   848,     0,   849,     0,
5780:      247,     0,     0,   250,   251,   252,   253,   254,   255,   256,
5781:        0,     0,   257,   258,   259,     0,     0,   261,   262,   263,
5782:      850,   851,   264,   265,   266,   267,   268,   269,   270,   271,
5783:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
5784:      282,   283,   284,   285,   286,   287,   852,   289,   853,   291,
5785:      292,   293,   294,     0,   295,   296,     0,   298,   855,   856,
5786:      300,   857,   302,   303,   304,     0,   305,   306,     0,     0,
5787:      858,   308,   309,     0,     0,   310,   311,   312,   313,   314,
5788:      859,   316,   317,   318,   319,   320,   321,   322,   323,   324,
5789:      325,     0,   326,   327,   860,   329,   330,   331,   332,   333,
5790:      334,     0,   335,   336,   337,   338,   339,   340,     0,   341,
5791:      342,   343,   861,   345,   346,   347,   348,     0,   349,   350,
5792:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
5793:      361,     0,   362,   363,   364,   365,   366,   367,   862,   369,
5794:      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
5795:        0,   380,   381,   382,   383,   384,   863,   385,   386,   387,
5796:      388,   389,     0,   391,   392,   864,   394,     0,   395,   396,
5797:      397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
5798:      407,   865,   409,     0,   410,   411,     0,   412,   413,   414,
5799:      415,   416,   417,   418,     0,   866,   867,     0,     0,   421,
5800:      422,   868,   424,   869,   870,   426,   427,   871,   429,   430,
5801:      431,   432,   433,     0,     0,   434,   435,   436,   437,   438,
5802:      872,     0,   439,   440,   441,   442,   443,   444,   873,     0,
5803:      446,   447,   448,   449,   450,   451,     0,     0,   452,     0,
5804:        0,   453,   454,   455,   456,   457,   458,   459,   460,   461,
5805:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
5806:      472,   473,     0,     0,     0,     0,     0,     0,     0,   875,
5807:      876,   499,     0,     0,     0,     0,   878,     0,   879,     0,
5808:        0,     0,     0,   880,     0,   881,   882,    93,    94,    95,
5809:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
5810:        0,     0,     0,     0,  2311,     0,   104,   105,     0,   106,
5811:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
5812:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
5813:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
5814:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
5815:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
5816:      150,     0,  -612,   152,   153,   154,     0,     0,     0,     0,
5817:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
5818:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
5819:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
5820:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
5821:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
5822:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
5823:      203,   204,     0,   205,     0,   206,     0,     0,  -612,   209,
5824:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
5825:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
5826:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
5827:        0,   236,  -612,   238,   239,   240,   241,   242,   243,   244,
5828:      245,     0,   246,     0,   247,     0,     0,   250,  -612,   252,
5829:      253,   254,   255,   256,     0,     0,   257,  -612,   259,     0,
5830:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
5831:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
5832:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
5833:      288,  -612,   290,   291,   292,   293,   294,     0,   295,   296,
5834:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
5835:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
5836:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
5837:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
5838:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
5839:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
5840:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
5841:      357,   358,   359,   360,   361,     0,   362,   363,  -612,   365,
5842:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
5843:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
5844:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
5845:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
5846:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
5847:        0,   412,  -612,   414,   415,   416,   417,   418,     0,   419,
5848:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
5849:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
5850:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
5851:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
5852:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
5853:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
5854:      468,   469,   470,   471,   472,   473,     0,     0,    92,     0,
5855:      580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5856:        0,     0,     0,   942,    93,    94,    95,    96,    97,    98,
5857:       99,   100,     0,   101,   102,   103,     0,     0,     0,     0,
5858:        0,     0,     0,   104,   105,     0,   106,   107,   108,   109,
5859:      110,   111,   112,   113,   114,   115,   116,   117,     0,   118,
5860:      119,   120,   121,   122,   123,     0,   826,   124,   125,   126,
5861:      127,   128,     0,   129,   130,   131,   132,   829,     0,   830,
5862:        0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
5863:      144,     0,   145,   146,   147,   148,   149,   150,     0,   151,
5864:      152,   153,   154,   831,   832,   833,   834,   835,   836,   837,
5865:      156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
5866:        0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
5867:      173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
5868:      181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
5869:        0,   189,   190,   191,   192,   193,   194,   195,   196,   197,
5870:      198,   842,     0,   200,     0,   201,   202,   203,   204,     0,
5871:      205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
5872:      213,     0,   214,     0,   215,   216,   217,     0,   218,   219,
5873:      220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
5874:        0,   230,   231,   232,   233,   234,   235,     0,   236,   237,
5875:      238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
5876:        0,   247,   248,   249,   250,   251,   252,   253,   254,   255,
5877:      256,  2061,     0,   257,   258,   259,   260,     0,   261,   262,
5878:      263,   850,   851,   264,   265,   266,   267,   268,   269,   270,
5879:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
5880:      281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
5881:      291,   292,   293,   294,     0,   295,   296,   297,   298,     0,
5882:      856,   300,   301,   302,   303,   304,     0,   305,   306,     0,
5883:      581,   307,   308,   309,     0,     0,   310,   311,   312,   313,
5884:      314,   859,   316,   317,   318,   319,   320,   321,   322,   323,
5885:      324,   325,     0,   326,   327,   860,   329,   330,   331,   332,
5886:      333,   334,     0,   335,   336,   337,   338,   339,   340,     0,
5887:      341,   342,   343,   344,   345,   346,   347,   348,     0,   349,
5888:      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
5889:      360,   361,     0,   362,   363,   364,   365,   366,   367,   368,
5890:     2062,   370,   371,   372,   373,   374,   375,   376,   377,   378,
5891:      379,    26,   380,   381,   382,   383,   384,   863,   385,   386,
5892:      387,   388,   389,   390,   391,   392,   393,   394,     0,   395,
5893:      396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
5894:      406,   407,   865,   409,     0,   410,   411,    31,   412,   413,
5895:      414,   415,   416,   417,   418,     0,   419,   420,     0,     0,
5896:      421,   422,   868,   424,   869,     0,   426,   427,   871,   429,
5897:      430,   431,   432,   433,     0,     0,   434,   435,   436,   437,
5898:      438,   872,     0,   439,   440,   441,   442,   443,   576,   445,
5899:        0,   446,   447,   448,   449,   450,   451,     0,     0,   452,
5900:        0,    34,   453,   454,   455,   456,   457,   458,   459,   460,
5901:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
5902:      471,   472,   473,     0,    92,    35,   580,     0,     0,     0,
5903:        0,     0,     0,     0,     0,     0,     0,     0,     0,  2063,
5904:       93,    94,    95,    96,    97,    98,    99,   100,     0,   101,
5905:      102,   103,     0,     0,     0,     0,     0,     0,     0,   104,
5906:      105,     0,   106,   107,   108,   109,   110,   111,   112,   113,
5907:      114,   115,   116,   117,     0,   118,   119,   120,   121,   122,
5908:      123,     0,   826,   124,   125,   126,   127,   128,     0,   129,
5909:      130,   131,   132,   829,     0,   830,     0,   135,   136,   137,
5910:      138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
5911:      147,   148,   149,   150,     0,   151,   152,   153,   154,   831,
5912:      832,   833,   834,   835,   836,   837,   156,   157,   158,   159,
5913:      160,   161,   162,   163,   164,   165,     0,   166,     0,   167,
5914:      168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
5915:      177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
5916:      184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
5917:      192,   193,   194,   195,   196,   197,   198,   842,     0,   200,
5918:        0,   201,   202,   203,   204,     0,   205,     0,   206,   207,
5919:        0,   208,   209,   210,   211,   212,   213,     0,   214,     0,
5920:      215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
5921:      224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
5922:      233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
5923:      242,   243,   244,   245,     0,   246,     0,   247,   248,   249,
5924:      250,   251,   252,   253,   254,   255,   256,  2061,     0,   257,
5925:      258,   259,   260,     0,   261,   262,   263,   850,   851,   264,
5926:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
5927:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
5928:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
5929:        0,   295,   296,   297,   298,     0,   856,   300,   301,   302,
5930:      303,   304,     0,   305,   306,     0,   581,   307,   308,   309,
5931:        0,     0,   310,   311,   312,   313,   314,   859,   316,   317,
5932:      318,   319,   320,   321,   322,   323,   324,   325,     0,   326,
5933:      327,   860,   329,   330,   331,   332,   333,   334,     0,   335,
5934:      336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
5935:      345,   346,   347,   348,     0,   349,   350,   351,   352,   353,
5936:      354,   355,   356,   357,   358,   359,   360,   361,     0,   362,
5937:      363,   364,   365,   366,   367,   368,  2062,   370,   371,   372,
5938:      373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
5939:      382,   383,   384,   863,   385,   386,   387,   388,   389,   390,
5940:      391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
5941:      400,   401,   402,   403,   404,   405,   406,   407,   865,   409,
5942:        0,   410,   411,     0,   412,   413,   414,   415,   416,   417,
5943:      418,     0,   419,   420,     0,     0,   421,   422,   868,   424,
5944:      869,     0,   426,   427,   871,   429,   430,   431,   432,   433,
5945:        0,     0,   434,   435,   436,   437,   438,   872,     0,   439,
5946:      440,   441,   442,   443,   444,   445,     0,   446,   447,   448,
5947:      449,   450,   451,     0,     0,   452,     0,     0,   453,   454,
5948:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
5949:      465,   466,   467,   468,   469,   470,   471,   472,   473,     0,
5950:       92,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5951:        0,     0,     0,     0,     0,  2063,    93,    94,    95,    96,
5952:       97,    98,    99,   100,     0,   101,   102,   103,     0,     0,
5953:        0,     0,     0,     0,     0,   104,   105,     0,   106,   107,
5954:      108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
5955:        0,   118,   119,   120,   121,   122,   123,     0,   826,   124,
5956:      125,   126,   127,   128,     0,   129,   130,   131,   132,   829,
5957:        0,   830,     0,   135,   136,   137,   138,   139,   140,   141,
5958:      142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
5959:        0,   151,   152,   153,   154,   831,   832,   833,   834,   835,
5960:      836,   837,   156,   157,   158,   159,   160,   161,   162,   163,
5961:      164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
5962:      172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
5963:      179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
5964:      187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
5965:      196,   197,   198,   842,     0,   200,     0,   201,   202,   203,
5966:      204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
5967:      211,   212,   213,     0,   214,     0,   215,   216,   217,     0,
5968:      218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
5969:      228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
5970:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
5971:        0,   246,     0,   247,   248,   249,   250,   251,   252,   253,
5972:      254,   255,   256,     0,     0,   257,   258,   259,   260,     0,
5973:      261,   262,   263,   850,   851,   264,   265,   266,   267,   268,
5974:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
5975:      279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
5976:      289,   290,   291,   292,   293,   294,     0,   295,   296,   297,
5977:      298,     0,   856,   300,   301,   302,   303,   304,     0,   305,
5978:      306,     0,     0,   307,   308,   309,     0,     0,   310,   311,
5979:      312,   313,   314,   859,   316,   317,   318,   319,   320,   321,
5980:      322,   323,   324,   325,     0,   326,   327,   860,   329,   330,
5981:      331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
5982:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
5983:        0,   349,   350,   351,   352,   353,   354,   355,   356,   357,
5984:      358,   359,   360,   361,     0,   362,   363,   364,   365,   366,
5985:      367,   368,  2062,   370,   371,   372,   373,   374,   375,   376,
5986:      377,   378,   379,     0,   380,   381,   382,   383,   384,   863,
5987:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
5988:        0,   395,   396,   397,   398,   399,   400,   401,   402,   403,
5989:      404,   405,   406,   407,   865,   409,     0,   410,   411,     0,
5990:      412,   413,   414,   415,   416,   417,   418,     0,   419,   420,
5991:        0,     0,   421,   422,   868,   424,   869,     0,   426,   427,
5992:      871,   429,   430,   431,   432,   433,     0,     0,   434,   435,
5993:      436,   437,   438,   872,     0,   439,   440,   441,   442,   443,
5994:      444,   445,     0,   446,   447,   448,   449,   450,   451,     0,
5995:        0,   452,     0,     0,   453,   454,   455,   456,   457,   458,
5996:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
5997:      469,   470,   471,   472,   473,     0,    92,     0,     0,     0,
5998:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5999:        0,    36,    93,    94,    95,    96,    97,    98,    99,   100,
6000:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
6001:        0,   104,   105,     0,   106,   107,   108,   109,   110,   111,
6002:      112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
6003:      121,   122,   123,     0,   826,   124,   125,   126,   127,   128,
6004:        0,   129,   130,   131,   132,   829,     0,   830,     0,   135,
6005:      136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
6006:      145,   146,   147,   148,   149,   150,     0,   151,   152,   153,
6007:      154,   831,   832,   833,   834,   835,   836,   837,   156,   157,
6008:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
6009:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
6010:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
6011:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
6012:      190,   191,   192,   193,   194,   195,   196,   197,   198,   842,
6013:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
6014:      206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
6015:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
6016:      222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
6017:      231,   232,   233,   234,   235,     0,   236,   237,   238,   239,
6018:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
6019:      248,   249,   250,   251,   252,   253,   254,   255,   256,     0,
6020:        0,   257,   258,   259,   260,     0,   261,   262,   263,   850,
6021:      851,   264,   265,   266,   267,   268,   269,   270,   271,   272,
6022:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
6023:      283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
6024:      293,   294,     0,   295,   296,   297,   298,     0,   856,   300,
6025:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
6026:      308,   309,     0,     0,   310,   311,   312,   313,   314,   859,
6027:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
6028:        0,   326,   327,   860,   329,   330,   331,   332,   333,   334,
6029:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
6030:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
6031:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
6032:        0,   362,   363,   364,   365,   366,   367,   368,   369,   370,
6033:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
6034:      380,   381,   382,   383,   384,   863,   385,   386,   387,   388,
6035:      389,   390,   391,   392,   393,   394,     0,   395,   396,   397,
6036:      398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
6037:      865,   409,     0,   410,   411,     0,   412,   413,   414,   415,
6038:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
6039:      868,   424,   869,     0,   426,   427,   871,   429,   430,   431,
6040:      432,   433,     0,     0,   434,   435,   436,   437,   438,   872,
6041:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
6042:      447,   448,   449,   450,   451,     0,     0,   452,     0,     0,
6043:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
6044:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
6045:      473,     0,   743,  1233,   548,     0,     0,     0,   819,     0,
6046:        0,     0,     0,     0,     0,     0,     0,  2703,    93,    94,
6047:       95,    96,    97,    98,    99,   100,     0,   101,   102,   103,
6048:        0,     0,     0,     0,     0,     0,     0,   104,   105,     0,
6049:      106,   107,   108,     0,   110,   111,   112,   744,   745,     0,
6050:      746,   747,     0,   118,   119,   120,   121,   122,   123,     0,
6051:        0,   124,   125,   748,   749,   128,     0,   129,   130,   131,
6052:      132,   750,     0,     0,     0,   135,   136,   137,   138,   139,
6053:      140,     0,   142,   143,   144,     0,   145,   146,   147,   148,
6054:      149,   150,     0,     0,   152,   153,   154,     0,     0,     0,
6055:        0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
6056:      162,   751,   752,   165,     0,   166,     0,   167,   168,   169,
6057:      170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
6058:        0,   178,   179,   180,   181,   182,     0,   183,   184,   185,
6059:        0,   186,   187,   188,     0,   189,   190,   191,   192,   753,
6060:      194,   195,   196,   197,   198,   754,  1234,   200,     0,   201,
6061:      202,   755,   204,     0,   205,     0,   206,     0,     0,     0,
6062:      209,   210,   211,     0,   213,     0,   214,     0,   756,   757,
6063:      217,     0,   218,   219,   220,   221,   222,   223,   224,     0,
6064:      226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
6065:      235,     0,   236,     0,   758,   239,   240,   241,   242,   243,
6066:      759,   760,     0,   761,     0,   247,     0,     0,   250,     0,
6067:      252,   253,   254,   255,   256,     0,     0,   257,     0,   259,
6068:        0,     0,   261,   262,   263,     0,     0,   264,   265,   266,
6069:      267,   268,   762,   270,   271,   272,   273,   274,   275,   276,
6070:      277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
6071:      287,   763,     0,   764,   291,   292,   293,   765,     0,   295,
6072:      296,     0,   298,     0,   766,   300,   767,   302,   303,   304,
6073:        0,   305,   306,  1235,     0,   307,   308,   309,     0,     0,
6074:      310,   768,     0,   313,     0,   769,   316,   317,   318,   319,
6075:      320,   321,   322,   323,   324,   325,     0,   326,   327,   770,
6076:      329,   330,   771,   332,   333,   334,     0,   335,   336,   337,
6077:      338,   339,   340,     0,   341,   342,   343,   772,   345,   346,
6078:      347,   348,     0,   349,   350,   351,   352,   353,   354,   355,
6079:      356,   357,   358,   359,   360,   361,     0,   362,   363,     0,
6080:      365,   366,   367,   773,   369,   370,   371,   372,   373,   374,
6081:      375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
6082:      384,     0,   385,   774,   387,   388,   389,     0,   391,   392,
6083:      775,   394,     0,   395,   396,   397,   398,   399,   400,   401,
6084:      402,   403,   404,   405,   776,   407,   777,   409,     0,   410,
6085:      411,     0,   412,     0,   414,   415,   416,   417,   418,     0,
6086:      778,   779,     0,     0,   421,   422,   780,   424,   781,  1236,
6087:      426,   427,   782,   429,   430,   431,   432,   433,     0,     0,
6088:      434,   435,   436,   437,   438,     0,     0,   439,   440,   441,
6089:      442,   443,  1126,   784,     0,   446,     0,   448,   449,   450,
6090:      451,     0,     0,   452,     0,     0,   453,   454,   455,   456,
6091:      457,   458,   785,   786,   787,   788,   789,   790,   791,   792,
6092:      793,   794,   795,   470,   471,   472,   473,     0,   743,     0,
6093:        0,     0,     0,     0,  1237,  1238,  1941,     0,     0,     0,
6094:        0,     0,     0,  1942,    93,    94,    95,    96,    97,    98,
6095:       99,   100,     0,   101,   102,   103,     3,     4,     0,     0,
6096:        0,     0,     0,   104,   105,     0,   106,   107,   108,     0,
6097:      110,   111,   112,   744,   745,     0,   746,   747,     0,   118,
6098:      119,   120,   121,   122,   123,     0,     0,   124,   125,   748,
6099:      749,   128,     0,   129,   130,   131,   132,   750,     0,     0,
6100:        0,   135,   136,   137,   138,   139,   140,     0,   142,   143,
6101:      144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
6102:      152,   153,   154,     0,     0,     0,     0,     0,     0,     0,
6103:      156,   157,   158,   159,   160,   161,   162,   751,   752,   165,
6104:        0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
6105:      173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
6106:      181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
6107:        0,   189,   190,   191,   192,   753,   194,   195,   196,   197,
6108:      198,   754,     0,   200,     0,   201,   202,   755,   204,     0,
6109:      205,     0,   206,     0,     0,     0,   209,   210,   211,     0,
6110:      213,     0,   214,     0,   756,   757,   217,     0,   218,   219,
6111:      220,   221,   222,   223,   224,     0,   226,   227,   228,   229,
6112:        0,   230,   231,   232,   233,   234,   235,     0,   236,     0,
6113:      758,   239,   240,   241,   242,   243,   759,   760,     0,   761,
6114:        0,   247,     0,     0,   250,     0,   252,   253,   254,   255,
6115:      256,     0,     0,   257,     0,   259,     0,     0,   261,   262,
6116:      263,     0,     0,   264,   265,   266,   267,   268,   762,   270,
6117:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
6118:      281,   282,   283,   284,   285,   286,   287,   763,     0,   764,
6119:      291,   292,   293,   765,     0,   295,   296,     0,   298,     0,
6120:      766,   300,   767,   302,   303,   304,     0,   305,   306,     0,
6121:        0,   307,   308,   309,     0,     0,   310,   768,     0,   313,
6122:        0,   769,   316,   317,   318,   319,   320,   321,   322,   323,
6123:      324,   325,     0,   326,   327,   770,   329,   330,   771,   332,
6124:      333,   334,     0,   335,   336,   337,   338,   339,   340,     0,
6125:      341,   342,   343,   772,   345,   346,   347,   348,     0,   349,
6126:      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
6127:      360,   361,     0,   362,   363,     0,   365,   366,   367,   773,
6128:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
6129:      379,    26,   380,   381,   382,   383,   384,     0,   385,   774,
6130:      387,   388,   389,     0,   391,   392,   775,   394,     0,   395,
6131:      396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
6132:      776,   407,   777,   409,     0,   410,   411,    31,   412,     0,
6133:      414,   415,   416,   417,   418,     0,   778,   779,     0,     0,
6134:      421,   422,   780,   424,   781,     0,   426,   427,   782,   429,
6135:      430,   431,   432,   433,     0,     0,   434,   435,   436,   437,
6136:      438,     0,     0,   439,   440,   441,   442,   443,   783,   784,
6137:        0,   446,     0,   448,   449,   450,   451,     0,     0,   452,
6138:        0,    34,   453,   454,   455,   456,   457,   458,   785,   786,
6139:      787,   788,   789,   790,   791,   792,   793,   794,   795,   470,
6140:      471,   472,   473,     0,   499,    35,     0,     0,     0,     0,
6141:        0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
6142:       93,    94,    95,    96,    97,    98,    99,   100,   614,   101,
6143:      102,   103,     0,     0,     0,     0,     0,     0,     0,   104,
6144:      105,     0,   106,   107,   108,     0,   110,   111,   112,   113,
6145:      114,     0,   116,   117,     0,   118,   119,   120,   121,   122,
6146:      123,     0,     0,   124,   125,   126,   127,   128,     0,   129,
6147:      130,   131,   132,   133,     0,     0,     0,   135,   136,   137,
6148:      138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
6149:      147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
6150:        0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
6151:      160,   161,   162,   163,   164,   165,     0,   166,     0,   167,
6152:      168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
6153:      177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
6154:      184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
6155:      192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
6156:        0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
6157:        0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
6158:      215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
6159:      224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
6160:      233,   234,   235,     0,   236,     0,   238,   239,   240,   241,
6161:      242,   243,   244,   245,     0,   246,     0,   247,     0,     0,
6162:      250,     0,   252,   253,   254,   255,   256,     0,     0,   257,
6163:        0,   259,     0,     0,   261,   262,   263,     0,     0,   264,
6164:      265,   266,   267,   268,   501,   270,   271,   272,   273,   274,
6165:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
6166:      285,   286,   287,   288,     0,   290,   291,   292,   293,   294,
6167:        0,   295,   296,     0,   298,     0,   299,   300,   301,   302,
6168:      303,   304,     0,   305,   306,     0,     0,   307,   308,   309,
6169:        0,     0,   310,   311,     0,   313,     0,   315,   316,   317,
6170:      318,   319,   320,   321,   322,   323,   324,   325,     0,   326,
6171:      327,   328,   329,   330,   331,   332,   333,   334,     0,   335,
6172:      336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
6173:      345,   346,   347,   348,     0,   349,   350,   351,   352,   353,
6174:      354,   355,   356,   357,   358,   359,   360,   361,     0,   362,
6175:      363,     0,   365,   366,   367,   368,   369,   370,   371,   372,
6176:      373,   374,   375,   376,   377,   378,   379,    26,   380,   381,
6177:      382,   383,   384,     0,   385,   386,   387,   388,   389,     0,
6178:      391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
6179:      400,   401,   402,   403,   404,   405,   503,   407,   408,   409,
6180:        0,   410,   411,    31,   412,     0,   414,   415,   416,   417,
6181:      418,     0,   615,   420,     0,     0,   616,   422,   423,   424,
6182:      425,     0,   426,   427,   428,   429,   430,   431,   432,   433,
6183:        0,     0,   434,   435,   436,   437,   438,     0,     0,   439,
6184:      440,   441,   442,   443,   576,   445,     0,   446,     0,   448,
6185:      449,   450,   451,     0,     0,   452,     0,    34,   453,   454,
6186:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
6187:      465,   466,   467,   468,   469,   470,   471,   472,   473,     0,
6188:      499,    35,     0,     0,     0,     0,     0,     0,     0,     0,
6189:        0,     0,     0,     0,     0,    36,    93,    94,    95,    96,
6190:       97,    98,    99,   100,     0,   101,   102,   103,     0,     0,
6191:        0,     0,     0,     0,     0,   104,   105,     0,   106,   107,
6192:      108,     0,   110,   111,   112,   113,   114,     0,   116,   117,
6193:        0,   118,   119,   120,   121,   122,   123,     0,     0,   124,
6194:      125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
6195:        0,     0,     0,   135,   136,   137,   138,   139,   140,     0,
6196:      142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
6197:        0,     0,   152,   153,   154,     0,     0,     0,     0,     0,
6198:        0,     0,   156,   157,   158,   159,   160,   161,   162,   163,
6199:      164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
6200:      172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
6201:      179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
6202:      187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
6203:      196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
6204:      204,     0,   205,     0,   206,     0,     0,     0,   209,   210,
6205:      211,     0,   213,     0,   214,     0,   215,   216,   217,     0,
6206:      218,   219,   220,   221,   222,   223,   224,     0,   226,   227,
6207:      228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
6208:      236,     0,   238,   239,   240,   241,   242,   243,   244,   245,
6209:        0,   246,     0,   247,     0,     0,   250,     0,   252,   253,
6210:      254,   255,   256,     0,     0,   257,     0,   259,     0,     0,
6211:      261,   262,   263,     0,     0,   264,   265,   266,   267,   268,
6212:      501,   270,   271,   272,   273,   274,   275,   276,   277,   278,
6213:      279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
6214:        0,   290,   291,   292,   293,   294,     0,   295,   296,     0,
6215:      298,     0,   299,   300,   301,   302,   303,   304,     0,   305,
6216:      306,     0,     0,   307,   308,   309,     0,     0,   310,   311,
6217:        0,   313,     0,   315,   316,   317,   318,   319,   320,   321,
6218:      322,   323,   324,   325,     0,   326,   327,   328,   329,   330,
6219:      331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
6220:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
6221:        0,   349,   350,   351,   352,   353,   354,   355,   356,   357,
6222:      358,   359,   360,   361,     0,   362,   363,     0,   365,   366,
6223:      367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
6224:      377,   378,   379,    26,   380,   381,   382,   383,   384,     0,
6225:      385,   386,   387,   388,   389,     0,   391,   392,   393,   394,
6226:        0,   395,   396,   397,   398,   399,   400,   401,   402,   403,
6227:      404,   405,   503,   407,   408,   409,     0,   410,   411,    31,
6228:      412,     0,   414,   415,   416,   417,   418,     0,   419,   420,
6229:        0,     0,   421,   422,   423,   424,   425,     0,   426,   427,
6230:      428,   429,   430,   431,   432,   433,     0,     0,   434,   435,
6231:      436,   437,   438,     0,     0,   439,   440,   441,   442,   443,
6232:      576,   445,     0,   446,     0,   448,   449,   450,   451,     0,
6233:        0,   452,     0,    34,   453,   454,   455,   456,   457,   458,
6234:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
6235:      469,   470,   471,   472,   473,     0,   499,    35,   580,     0,
6236:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6237:        0,    36,    93,    94,    95,    96,    97,    98,    99,   100,
6238:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
6239:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
6240:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
6241:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
6242:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
6243:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
6244:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
6245:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
6246:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
6247:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
6248:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
6249:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
6250:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
6251:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
6252:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
6253:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
6254:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
6255:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
6256:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
6257:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
6258:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
6259:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
6260:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
6261:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
6262:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
6263:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
6264:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
6265:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
6266:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
6267:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
6268:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
6269:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
6270:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
6271:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
6272:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
6273:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
6274:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
6275:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
6276:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
6277:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
6278:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
6279:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
6280:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
6281:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
6282:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
6283:      473,     0,   499,     0,   580,     0,     0,     0,     0,     0,
6284:        0,     0,     0,     0,     0,     0,     0,   922,    93,    94,
6285:       95,    96,    97,    98,    99,   100,     0,   101,   102,   103,
6286:        0,     0,     0,     0,     0,     0,     0,   104,   105,     0,
6287:      106,   107,   108,     0,   110,   111,   112,   113,   114,     0,
6288:      116,   117,     0,   118,   119,   120,   121,   122,   123,     0,
6289:        0,   124,   125,   126,   127,   128,     0,   129,   130,   131,
6290:      132,   133,     0,     0,     0,   135,   136,   137,   138,   139,
6291:      140,     0,   142,   143,   144,     0,   145,   146,   147,   148,
6292:      149,   150,     0,     0,   152,   153,   154,     0,     0,     0,
6293:        0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
6294:      162,   163,   164,   165,     0,   166,     0,   167,   168,   169,
6295:      170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
6296:        0,   178,   179,   180,   181,   182,     0,   183,   184,   185,
6297:        0,   186,   187,   188,     0,   189,   190,   191,   192,   193,
6298:      194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
6299:      202,   203,   204,     0,   205,     0,   206,     0,     0,     0,
6300:      209,   210,   211,     0,   213,     0,   214,     0,   215,   216,
6301:      217,     0,   218,   219,   220,   221,   222,   223,   224,     0,
6302:      226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
6303:      235,     0,   236,     0,   238,   239,   240,   241,   242,   243,
6304:      244,   245,     0,   246,     0,   247,     0,     0,   250,     0,
6305:      252,   253,   254,   255,   256,     0,     0,   257,     0,   259,
6306:        0,     0,   261,   262,   263,     0,     0,   264,   265,   266,
6307:      267,   268,   501,   270,   271,   272,   273,   274,   275,   276,
6308:      277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
6309:      287,   288,     0,   290,   291,   292,   293,   294,     0,   295,
6310:      296,     0,   298,     0,   299,   300,   301,   302,   303,   304,
6311:        0,   305,   306,     0,     0,   307,   308,   309,     0,     0,
6312:      310,   311,     0,   313,     0,   315,   316,   317,   318,   319,
6313:      320,   321,   322,   323,   324,   325,     0,   326,   327,   328,
6314:      329,   330,   331,   332,   333,   334,     0,   335,   336,   337,
6315:      338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
6316:      347,   348,     0,   349,   350,   351,   352,   353,   354,   355,
6317:      356,   357,   358,   359,   360,   361,     0,   362,   363,     0,
6318:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
6319:      375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
6320:      384,     0,   385,   386,   387,   388,   389,     0,   391,   392,
6321:      393,   394,     0,   395,   396,   397,   398,   399,   400,   401,
6322:      402,   403,   404,   405,   503,   407,   408,   409,     0,   410,
6323:      411,     0,   412,     0,   414,   415,   416,   417,   418,     0,
6324:      419,   420,     0,     0,   421,   422,   423,   424,   425,     0,
6325:      426,   427,   428,   429,   430,   431,   432,   433,     0,     0,
6326:      434,   435,   436,   437,   438,     0,     0,   439,   440,   441,
6327:      442,   443,   444,   445,     0,   446,     0,   448,   449,   450,
6328:      451,     0,     0,   452,     0,     0,   453,   454,   455,   456,
6329:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
6330:      467,   468,   469,   470,   471,   472,   473,     0,   499,     0,
6331:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6332:        0,     0,     0,  2540,    93,    94,    95,    96,    97,    98,
6333:       99,   100,     0,   101,   102,   103,     0,     0,     0,     0,
6334:        0,     0,     0,   104,   105,     0,   106,   107,   108,     0,
6335:      110,   111,   112,   113,   114,     0,   116,   117,     0,   118,
6336:      119,   120,   121,   122,   123,     0,     0,   124,   125,   126,
6337:      127,   128,     0,   129,   130,   131,   132,   133,     0,     0,
6338:        0,   135,   136,   137,   138,   139,   140,     0,   142,   143,
6339:      144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
6340:      152,   153,   154,     0,     0,     0,     0,     0,     0,     0,
6341:      156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
6342:        0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
6343:      173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
6344:      181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
6345:        0,   189,   190,   191,   192,   193,   194,   195,   196,   197,
6346:      198,   199,     0,   200,     0,   201,   202,   203,   204,     0,
6347:      205,     0,   206,     0,     0,     0,   209,   210,   211,     0,
6348:      213,     0,   214,     0,   215,   216,   217,     0,   218,   219,
6349:      220,   221,   222,   223,   224,     0,   226,   227,   228,   229,
6350:        0,   230,   231,   232,   233,   234,   235,     0,   236,     0,
6351:      238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
6352:        0,   247,     0,     0,   250,     0,   252,   253,   254,   255,
6353:      256,     0,     0,   257,     0,   259,     0,     0,   261,   262,
6354:      263,     0,     0,   264,   265,   266,   267,   268,   501,   270,
6355:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
6356:      281,   282,   283,   284,   285,   286,   287,   288,     0,   290,
6357:      291,   292,   293,   294,     0,   295,   296,     0,   298,     0,
6358:      299,   300,   301,   302,   303,   304,     0,   305,   306,     0,
6359:        0,   307,   308,   309,     0,     0,   310,   311,     0,   313,
6360:        0,   315,   316,   317,   318,   319,   320,   321,   322,   323,
6361:      324,   325,     0,   326,   327,   328,   329,   330,   331,   332,
6362:      333,   334,     0,   335,   336,   337,   338,   339,   340,     0,
6363:      341,   342,   343,   344,   345,   346,   347,   348,     0,   349,
6364:      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
6365:      360,   361,     0,   362,   363,     0,   365,   366,   367,   368,
6366:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
6367:      379,     0,   380,   381,   382,   383,   384,     0,   385,   386,
6368:      387,   388,   389,     0,   391,   392,   393,   394,     0,   395,
6369:      396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
6370:      503,   407,   408,   409,     0,   410,   411,     0,   412,     0,
6371:      414,   415,   416,   417,   418,     0,   419,   420,     0,     0,
6372:      421,   422,   423,   424,   425,     0,   426,   427,   428,   429,
6373:      430,   431,   432,   433,     0,     0,   434,   435,   436,   437,
6374:      438,     0,     0,   439,   440,   441,   442,   443,   444,   445,
6375:        0,   446,     0,   448,   449,   450,   451,     0,     0,   452,
6376:        0,     0,   453,   454,   455,   456,   457,   458,   459,   460,
6377:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
6378:      471,   472,   473,     0,   499,     0,     0,     0,     0,     0,
6379:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
6380:       93,    94,    95,    96,    97,    98,    99,   100,     0,   101,
6381:      102,   103,     0,     0,     0,     0,     0,     0,     0,   104,
6382:      105,     0,   106,   107,   108,     0,   110,   111,   112,   113,
6383:      114,     0,   116,   117,     0,   118,   119,   120,   121,   122,
6384:      123,     0,     0,   124,   125,   126,   127,   128,     0,   129,
6385:      130,   131,   132,   133,     0,     0,     0,   135,   136,   137,
6386:      138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
6387:      147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
6388:        0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
6389:      160,   161,   162,   163,   164,   165,     0,   166,     0,   167,
6390:      168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
6391:      177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
6392:      184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
6393:      192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
6394:        0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
6395:        0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
6396:      215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
6397:      224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
6398:      233,   234,   235,     0,   236,     0,   238,   239,   240,   241,
6399:      242,   243,   244,   245,     0,   246,     0,   247,     0,     0,
6400:      250,     0,   252,   253,   254,   255,   256,     0,     0,   257,
6401:        0,   259,     0,     0,   261,   262,   263,     0,     0,   264,
6402:      265,   266,   267,   268,   501,   270,   271,   272,   273,   274,
6403:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
6404:      285,   286,   287,   288,     0,   290,   291,   292,   293,   294,
6405:        0,   295,   296,     0,   298,     0,   299,   300,   301,   302,
6406:      303,   304,     0,   305,   306,     0,     0,   307,   308,   309,
6407:        0,     0,   310,   311,     0,   313,     0,   315,   316,   317,
6408:      318,   319,   320,   321,   322,   323,   324,   325,     0,   326,
6409:      327,   328,   329,   330,   331,   332,   333,   334,     0,   335,
6410:      336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
6411:      345,   346,   347,   348,     0,   349,   350,   351,   352,   353,
6412:      354,   355,   356,   357,   358,   359,   360,   361,     0,   362,
6413:      363,     0,   365,   366,   367,   368,   369,   370,   371,   372,
6414:      373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
6415:      382,   383,   384,     0,   385,   386,   387,   388,   389,     0,
6416:      391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
6417:      400,   401,   402,   403,   404,   405,   503,   407,   408,   409,
6418:        0,   410,   411,     0,   412,     0,   414,   415,   416,   417,
6419:      418,     0,   419,   420,     0,     0,   421,   422,   423,   424,
6420:      425,     0,   426,   427,   428,   429,   430,   431,   432,   433,
6421:        0,     0,   434,   435,   436,   437,   438,     0,     0,   439,
6422:      440,   441,   442,   443,   444,   445,     0,   446,     0,   448,
6423:      449,   450,   451,     0,     0,   452,     0,     0,   453,   454,
6424:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
6425:      465,   466,   467,   468,   469,   470,   471,   472,   473,     0,
6426:      499,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6427:        0,     0,     0,     0,     0,  1761,    93,    94,    95,    96,
6428:       97,    98,    99,   100,     0,   101,   102,   103,     0,     0,
6429:        0,     0,     0,     0,     0,   104,   105,     0,   106,   107,
6430:      108,     0,   110,   111,   112,   113,   114,     0,   116,   117,
6431:        0,   118,   119,   120,   121,   122,   123,     0,     0,   124,
6432:      125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
6433:        0,     0,     0,   135,   136,   137,   138,   139,   140,     0,
6434:      142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
6435:        0,     0,   152,   153,   154,     0,     0,     0,     0,     0,
6436:        0,     0,   156,   157,   158,   159,   160,   161,   162,   163,
6437:      164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
6438:      172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
6439:      179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
6440:      187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
6441:      196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
6442:      204,     0,   205,     0,   206,     0,     0,     0,   209,   210,
6443:      211,     0,   213,     0,   214,     0,   215,   216,   217,     0,
6444:      218,   219,   220,   221,   222,   223,   224,     0,   226,   227,
6445:      228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
6446:      236,     0,   238,   239,   240,   241,   242,   243,   244,   245,
6447:        0,   246,     0,   247,     0,     0,   250,     0,   252,   253,
6448:      254,   255,   256,     0,     0,   257,     0,   259,     0,     0,
6449:      261,   262,   263,     0,     0,   264,   265,   266,   267,   268,
6450:      501,   270,   271,   272,   273,   274,   275,   276,   277,   278,
6451:      279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
6452:        0,   290,   291,   292,   293,   294,     0,   295,   296,     0,
6453:      298,     0,   299,   300,   301,   302,   303,   304,     0,   305,
6454:      306,     0,     0,   307,   308,   309,     0,     0,   310,   311,
6455:        0,   313,     0,   315,   316,   317,   318,   319,   320,   321,
6456:      322,   323,   324,   325,     0,   326,   327,   328,   329,   330,
6457:      331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
6458:      340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
6459:        0,   349,   350,   351,   352,   353,   354,   355,   356,   357,
6460:      358,   359,   360,   361,     0,   362,   363,     0,   365,   366,
6461:      367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
6462:      377,   378,   379,     0,   380,   381,   382,   383,   384,     0,
6463:      385,   386,   387,   388,   389,     0,   391,   392,   393,   394,
6464:        0,   395,   396,   397,   398,   399,   400,   401,   402,   403,
6465:      404,   405,   503,   407,   408,   409,     0,   410,   411,     0,
6466:      412,     0,   414,   415,   416,   417,   418,     0,   419,   420,
6467:        0,     0,   421,   422,   423,   424,   425,     0,   426,   427,
6468:      428,   429,   430,   431,   432,   433,     0,     0,   434,   435,
6469:      436,   437,   438,     0,     0,   439,   440,   441,   442,   443,
6470:      444,   445,     0,   446,     0,   448,   449,   450,   451,     0,
6471:        0,   452,     0,     0,   453,   454,   455,   456,   457,   458,
6472:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
6473:      469,   470,   471,   472,   473,     0,     0,     0,     0,  2397,
6474:     1233,   548,     0,     0,  1616,   819,     0,     0,     0,     0,
6475:        0,  2512,  1617,  1618,  1619,    93,    94,    95,    96,    97,
6476:       98,    99,   100,  1053,   101,   102,   103,  1054,  1055,  1056,
6477:     1057,  1058,  1059,  1060,   104,   105,  1061,   106,   107,   108,
6478:     2398,   110,   111,   112,     0,   664,  2399,   666,   667,  1062,
6479:      118,   119,   120,   121,   122,   123,  1063,  1064,   124,   125,
6480:      668,   669,   128,  1065,   129,   130,   131,   132,     0,  1066,
6481:     2400,  1067,   135,   136,   137,   138,   139,   140,  2401,   142,
6482:      143,   144,  1068,   145,   146,   147,   148,   149,   150,  1069,
6483:     2402,   152,   153,   154,  1070,  1071,  1072,  2403,  1073,  1074,
6484:     1075,   156,   157,   158,   159,   160,   161,   162,   674,   675,
6485:      165,  1076,   166,  1077,   167,   168,   169,   170,   171,   172,
6486:     1078,   173,   174,   175,   176,   177,  1079,  1080,   178,   179,
6487:      676,   181,   182,  1081,   183,   184,   185,  1082,   186,   187,
6488:      188,  1083,   189,   190,   191,   192,     0,   194,   195,   196,
6489:      197,   198,     0,  1084,   200,  1085,   201,   202,   677,   204,
6490:     1086,   205,  1087,   206,  2404,  1088,  2405,   209,   210,   211,
6491:     2406,   213,  1089,   214,  1090,     0,     0,   217,  1091,   218,
6492:      219,   220,   221,   222,   223,   224,  2407,   226,   227,   228,
6493:      229,  1092,   230,   231,   232,   233,   234,   235,  1093,   236,
6494:     2408,     0,   239,   240,   241,   242,   243,   684,   685,  1094,
6495:      686,  1095,   247,  2409,  2410,   250,  2411,   252,   253,   254,
6496:      255,   256,  1096,  1097,   257,  2412,   259,  2413,  1098,   261,
6497:      262,   263,  1099,  1100,   264,   265,   266,   267,   268,  2414,
6498:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6499:      280,   281,   282,   283,   284,   285,   286,   287,   693,  2415,
6500:      695,   291,   292,   293,  2416,  1101,   295,   296,  2417,   298,
6501:     1102,     0,   300,   697,   302,   303,   304,  1103,   305,   306,
6502:     1104,  1105,  2418,   308,   309,  1106,  1107,   310,     0,  2419,
6503:      313,  2420,     0,   316,   317,   318,   319,   320,   321,   322,
6504:      323,   324,   325,  1108,   326,   327,     0,   329,   330,     0,
6505:      332,   333,   334,  1109,   335,   336,   337,   338,   339,   340,
6506:     1110,   341,   342,   343,   700,   345,   346,   347,   348,  1111,
6507:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
6508:      359,   360,   361,  1112,   362,   363,  2421,   365,   366,   367,
6509:      702,   369,   370,   371,   372,   373,   374,   375,   376,   377,
6510:      378,   379,  1113,   380,   381,   382,   383,   384,  1114,   385,
6511:     2422,   387,   388,   389,  2423,   391,   392,   705,   394,  1115,
6512:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
6513:      405,  2424,   407,     0,   409,  1116,   410,   411,  1117,   412,
6514:     2425,   414,   415,   416,   417,   418,  1118,   708,   709,  1119,
6515:     1120,   421,   422,     0,   424,     0,  1121,   426,   427,  2426,
6516:      429,   430,   431,   432,   433,  1122,  1123,   434,   435,   436,
6517:      437,   438,  1124,  1125,   439,   440,   441,   442,   443,     0,
6518:      711,  1127,   446,  2427,   448,   449,   450,   451,  1128,  1129,
6519:      452,  1130,  1131,   453,   454,   455,   456,   457,   458,     0,
6520:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6521:      470,   471,   472,   473,     0,   499,     0,  1620,  1621,  1622,
6522:     1616,  2428,  2429,  1625,  1626,  1627,  1628,     0,  1617,  1618,
6523:     1619,    93,    94,    95,    96,    97,    98,    99,   100,     0,
6524:      101,   102,   103,     0,     0,     0,     0,     0,     0,     0,
6525:      104,   105,     0,   106,   107,   108,     0,   110,   111,   112,
6526:      113,   114,     0,   116,   117,     0,   118,   119,   120,   121,
6527:      122,   123,     0,     0,   124,   125,   126,   127,   128,     0,
6528:      129,   130,   131,   132,   133,     0,     0,     0,   135,   136,
6529:      137,   138,   139,   140,     0,   142,   143,   144,     0,   145,
6530:      146,   147,   148,   149,   150,     0,     0,   152,   153,   154,
6531:        0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
6532:      159,   160,   161,   162,   163,   164,   165,     0,   166,     0,
6533:      167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
6534:      176,   177,     0,     0,   178,   179,   180,   181,   182,     0,
6535:      183,   184,   185,     0,   186,   187,   188,     0,   189,   190,
6536:      191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
6537:      200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
6538:        0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
6539:        0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
6540:      223,   224,     0,   226,   227,   228,   229,     0,   230,   231,
6541:      232,   233,   234,   235,     0,   236,     0,   238,   239,   240,
6542:      241,   242,   243,   244,   245,     0,   246,     0,   247,     0,
6543:        0,   250,     0,   252,   253,   254,   255,   256,     0,     0,
6544:      257,     0,   259,     0,     0,   261,   262,   263,     0,     0,
6545:      264,   265,   266,   267,   268,   501,   270,   271,   272,   273,
6546:      274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
6547:      284,   285,   286,   287,   288,     0,   290,   291,   292,   293,
6548:      294,     0,   295,   296,     0,   298,     0,   299,   300,   301,
6549:      302,   303,   304,     0,   305,   306,     0,     0,   307,   308,
6550:      309,     0,     0,   310,   311,     0,   313,     0,   315,   316,
6551:      317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
6552:      326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
6553:      335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
6554:      344,   345,   346,   347,   348,     0,   349,   350,   351,   352,
6555:      353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
6556:      362,   363,     0,   365,   366,   367,   368,   369,   370,   371,
6557:      372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
6558:      381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
6559:        0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
6560:      399,   400,   401,   402,   403,   404,   405,   503,   407,   408,
6561:      409,     0,   410,   411,     0,   412,     0,   414,   415,   416,
6562:      417,   418,     0,   419,   420,     0,     0,   421,   422,   423,
6563:      424,   425,     0,   426,   427,   428,   429,   430,   431,   432,
6564:      433,     0,     0,   434,   435,   436,   437,   438,     0,     0,
6565:      439,   440,   441,   442,   443,   444,   445,     0,   446,     0,
6566:      448,   449,   450,   451,     0,     0,   452,     0,     0,   453,
6567:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
6568:      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
6569:        0,     0,     0,  1620,  1621,  1622,     0,  1623,  1624,  1625,
6570:     1626,  1627,  1628,  1309,     0,     0,  1310,     0,     0,     0,
6571:        0,  1311,  1312,  1313,     0,     0,     0,     0,     0,     0,
6572:        0,  1309,     0,     0,  1310,     0,     0,     0,  1314,  1311,
6573:     1312,  1313,     0,     0,     0,     0,  1316,     0,     0,     0,
6574:        0,     0,     0,  1317,     0,     0,  1314,     0,     0,     0,
6575:     1309,     0,     0,  1310,  1316,     0,     0,     0,  1311,  1312,
6576:     1313,  1317,     0,     0,     0,     0,     0,     0,  1318,  1309,
6577:        0,     0,  1310,     0,     0,  1314,     0,  1311,  1312,  1313,
6578:        0,     0,     0,  1316,     0,     0,  1318,     0,     0,     0,
6579:     1317,     0,     0,     0,  1314,     0,     0,     0,     0,     0,
6580:        0,     0,  1316,     0,     0,     0,     0,     0,     0,  1317,
6581:        0,     0,     0,     0,     0,  1318,     0,     0,     0,     0,
6582:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6583:        0,     0,     0,     0,  1318,  1309,     0,     0,  1310,     0,
6584:        0,     0,     0,  1311,  1312,  1313,     0,     0,     0,     0,
6585:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6586:     1314,     0,     0,     0,     0,     0,     0,     0,  1316,  1319,
6587:        0,     0,     0,     0,     0,  1317,     0,     0,     0,     0,
6588:        0,     0,     0,     0,     0,  1320,     0,  1319,     0,     0,
6589:     1321,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6590:     1318,     0,     0,  1320,     0,     0,     0,     0,  1321,     0,
6591:        0,     0,  1322,  1323,     0,     0,  1319,     0,     0,     0,
6592:        0,     0,     0,     0,     0,     0,  1324,     0,     0,     0,
6593:     1322,  1323,  1320,     0,     0,  1319,     0,  1321,     0,     0,
6594:        0,     0,     0,     0,  1324,     0,     0,     0,     0,     0,
6595:        0,  1320,     0,     0,     0,     0,  1321,     0,     0,  1322,
6596:     1323,     0,     0,     0,  1325,     0,     0,  1326,     0,     0,
6597:        0,     0,     0,  1324,     0,     0,     0,     0,  1322,  1323,
6598:        0,  1327,  1325,     0,  1328,  1326,     0,     0,     0,     0,
6599:        0,     0,  1324,     0,     0,     0,     0,     0,     0,  1327,
6600:        0,  1319,  1328,     0,     0,     0,     0,     0,     0,     0,
6601:        0,  1325,     0,     0,  1326,     0,     0,  1320,     0,     0,
6602:        0,     0,  1321,     0,     0,     0,     0,     0,  1327,     0,
6603:     1325,  1328,     0,  1326,     0,     0,     0,     0,     0,     0,
6604:        0,     0,     0,     0,  1322,  1323,     0,  1327,     0,     0,
6605:     1328,     0,     0,     0,     0,     0,     0,     0,  1324,     0,
6606:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6607:        0,     0,  1309,  1329,     0,  1310,     0,     0,     0,     0,
6608:     1311,  1312,  1313,     0,     0,     0,     0,     0,     0,     0,
6609:        0,  1329,     0,     0,     0,     0,  1325,  1314,     0,  1326,
6610:        0,     0,     0,     0,     0,  1316,     0,     0,     0,     0,
6611:        0,     0,  1317,  1327,     0,     0,  1328,     0,     0,     0,
6612:     1329,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6613:        0,     0,     0,     0,     0,     0,     0,  1318,     0,  1329,
6614:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6615:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6616:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6617:        0,     0,     0,  1330,     0,     0,  1331,  1332,  1333,     0,
6618:     1334,  1335,  1336,  1337,  1338,  1339,     0,     0,     0,     0,
6619:     1661,  1330,     0,     0,  1331,  1332,  1333,     0,  1334,  1335,
6620:     1336,  1337,  1338,  1339,     0,  1329,     0,     0,  2023,     0,
6621:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6622:     1330,     0,     0,  1331,  1332,  1333,     0,  1334,  1335,  1336,
6623:     1337,  1338,  1339,     0,     0,     0,     0,  2235,  1319,  1330,
6624:        0,     0,  1331,  1332,  1333,     0,  1334,  1335,  1336,  1337,
6625:     1338,  1339,     0,     0,  1320,     0,  2274,     0,  1309,  1321,
6626:        0,  1310,     0,     0,     0,     0,  1311,  1312,  1313,     0,
6627:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6628:        0,  1322,  1323,  1314,     0,     0,     0,     0,     0,     0,
6629:        0,  1316,     0,     0,     0,  1324,     0,     0,  1317,     0,
6630:        0,     0,     0,     0,     0,  1330,     0,     0,  1331,  1332,
6631:     1333,     0,  1334,  1335,  1336,  1337,  1338,  1339,  1309,     0,
6632:        0,  1310,  2361,  1318,     0,     0,  1311,  1312,  1313,     0,
6633:        0,     0,     0,  1325,     0,     0,  1326,     0,     0,     0,
6634:        0,     0,     0,  1314,     0,     0,     0,     0,     0,     0,
6635:     1327,  1316,     0,  1328,     0,     0,     0,     0,  1317,     0,
6636:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6637:        0,     0,     0,     0,     0,     0,     0,     0,  1309,     0,
6638:        0,  1310,     0,  1318,     0,     0,  1311,  1312,  1313,     0,
6639:        0,     0,     0,     0,     0,     0,  1309,     0,     0,  1310,
6640:        0,     0,     0,  1314,  1311,  1312,  1313,     0,     0,     0,
6641:        0,  1316,     0,     0,     0,     0,     0,     0,  1317,     0,
6642:        0,  1314,     0,     0,  1319,     0,     0,     0,     0,  1316,
6643:        0,     0,     0,     0,     0,     0,  1317,     0,  1309,     0,
6644:     1320,  1310,  1329,  1318,     0,  1321,  1311,  1312,  1313,     0,
6645:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6646:        0,  1318,     0,  1314,     0,     0,     0,  1322,  1323,     0,
6647:        0,  1316,     0,     0,     0,     0,     0,     0,  1317,     0,
6648:        0,  1324,     0,     0,  1319,     0,     0,     0,     0,     0,
6649:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6650:     1320,     0,     0,  1318,     0,  1321,     0,     0,     0,     0,
6651:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1325,
6652:        0,     0,  1326,     0,     0,     0,     0,  1322,  1323,     0,
6653:        0,     0,     0,     0,     0,     0,  1327,     0,     0,  1328,
6654:        0,  1324,  1330,     0,  1319,  1331,  1332,  1333,     0,  1334,
6655:     1335,  1336,  1337,  1338,  1339,     0,     0,     0,     0,  2487,
6656:     1320,     0,  1319,     0,     0,  1321,     0,     0,     0,     0,
6657:        0,     0,     0,     0,     0,     0,     0,     0,  1320,  1325,
6658:        0,     0,  1326,  1321,     0,     0,     0,  1322,  1323,     0,
6659:        0,     0,     0,     0,     0,     0,  1327,     0,     0,  1328,
6660:        0,  1324,     0,     0,  1319,  1322,  1323,     0,     0,     0,
6661:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1324,
6662:     1320,     0,     0,     0,     0,  1321,     0,     0,  1329,     0,
6663:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1325,
6664:        0,     0,  1326,     0,     0,     0,     0,  1322,  1323,     0,
6665:        0,     0,     0,     0,     0,     0,  1327,  1325,     0,  1328,
6666:     1326,  1324,     0,     0,     0,     0,     0,     0,     0,     0,
6667:        0,     0,     0,     0,  1327,     0,     0,  1328,     0,     0,
6668:        0,     0,     0,     0,     0,     0,     0,     0,  1329,     0,
6669:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1325,
6670:        0,     0,  1326,     0,     0,     0,     0,     0,     0,     0,
6671:        0,     0,     0,     0,     0,     0,  1327,     0,     0,  1328,
6672:        0,     0,     0,     0,     0,     0,     0,     0,  1330,     0,
6673:        0,  1331,  1332,  1333,     0,  1334,  1335,  1336,  1337,  1338,
6674:     1339,     0,     0,     0,     0,  2509,     0,     0,  1329,     0,
6675:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6676:        0,     0,     0,     0,     0,     0,  1329,     0,     0,     0,
6677:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6678:        0,     0,     0,     0,     0,     0,     0,     0,  1330,     0,
6679:        0,  1331,  1332,  1333,     0,  1334,  1335,  1336,  1337,  1338,
6680:     1339,     0,     0,     0,     0,  2655,     0,     0,  1329,     0,
6681:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6682:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6683:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6684:        0,     0,     0,     0,     0,     0,     0,     0,  1330,     0,
6685:        0,  1331,  1332,  1333,     0,  1334,  1335,  1336,  1337,  1338,
6686:     1339,     0,     0,     0,     0,  2874,  1330,     0,     0,  1331,
6687:     1332,  1333,     0,  1334,  1335,  1336,  1337,  1338,  1339,     0,
6688:        0,     0,     0,  2886,     0,     0,     0,     0,     0,     0,
6689:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6690:        0,     0,     0,     0,     0,     0,     0,     0,  1330,  1052,
6691:        0,  1331,  1332,  1333,     0,  1334,  1335,  1336,  1337,  1338,
6692:     1339,     0,     0,  1492,     0,    93,    94,    95,    96,    97,
6693:       98,    99,   100,  1053,   101,   102,   103,  1054,  1055,  1056,
6694:     1057,  1058,  1059,  1060,   104,   105,  1061,   106,   107,   108,
6695:        0,   110,   111,   112,   744,   745,     0,   746,   747,  1062,
6696:      118,   119,   120,   121,   122,   123,  1063,  1064,   124,   125,
6697:      748,   749,   128,  1065,   129,   130,   131,   132,   750,  1066,
6698:        0,  1067,   135,   136,   137,   138,   139,   140,     0,   142,
6699:      143,   144,  1068,   145,   146,   147,   148,   149,   150,  1069,
6700:        0,   152,   153,   154,  1070,  1071,  1072,     0,  1073,  1074,
6701:     1075,   156,   157,   158,   159,   160,   161,   162,   751,   752,
6702:      165,  1076,   166,  1077,   167,   168,   169,   170,   171,   172,
6703:     1078,   173,   174,   175,   176,   177,  1079,  1080,   178,   179,
6704:      180,   181,   182,  1081,   183,   184,   185,  1082,   186,   187,
6705:      188,  1083,   189,   190,   191,   192,   753,   194,   195,   196,
6706:      197,   198,   754,  1084,   200,  1085,   201,   202,   755,   204,
6707:     1086,   205,  1087,   206,     0,  1088,     0,   209,   210,   211,
6708:        0,   213,  1089,   214,  1090,   756,   757,   217,  1091,   218,
6709:      219,   220,   221,   222,   223,   224,     0,   226,   227,   228,
6710:      229,  1092,   230,   231,   232,   233,   234,   235,  1093,   236,
6711:        0,   758,   239,   240,   241,   242,   243,   759,   760,  1094,
6712:      761,  1095,   247,     0,     0,   250,     0,   252,   253,   254,
6713:      255,   256,  1096,  1097,   257,     0,   259,     0,  1098,   261,
6714:      262,   263,  1099,  1100,   264,   265,   266,   267,   268,   762,
6715:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6716:      280,   281,   282,   283,   284,   285,   286,   287,   763,     0,
6717:      764,   291,   292,   293,   765,  1101,   295,   296,     0,   298,
6718:     1102,   766,   300,   767,   302,   303,   304,  1103,   305,   306,
6719:     1104,  1105,   307,   308,   309,  1106,  1107,   310,   768,     0,
6720:      313,     0,   769,   316,   317,   318,   319,   320,   321,   322,
6721:      323,   324,   325,  1108,   326,   327,   770,   329,   330,   771,
6722:      332,   333,   334,  1109,   335,   336,   337,   338,   339,   340,
6723:     1110,   341,   342,   343,   772,   345,   346,   347,   348,  1111,
6724:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
6725:      359,   360,   361,  1112,   362,   363,     0,   365,   366,   367,
6726:      773,   369,   370,   371,   372,   373,   374,   375,   376,   377,
6727:      378,   379,  1113,   380,   381,   382,   383,   384,  1114,   385,
6728:      774,   387,   388,   389,     0,   391,   392,   775,   394,  1115,
6729:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
6730:      405,   776,   407,   777,   409,  1116,   410,   411,  1117,   412,
6731:        0,   414,   415,   416,   417,   418,  1118,   778,   779,  1119,
6732:     1120,   421,   422,   780,   424,   781,  1121,   426,   427,   782,
6733:      429,   430,   431,   432,   433,  1122,  1123,   434,   435,   436,
6734:      437,   438,  1124,  1125,   439,   440,   441,   442,   443,  1126,
6735:      784,  1127,   446,     0,   448,   449,   450,   451,  1128,  1129,
6736:      452,  1130,  1131,   453,   454,   455,   456,   457,   458,   785,
6737:      786,   787,   788,   789,   790,   791,   792,   793,   794,   795,
6738:      470,   471,   472,   473,   499,     0,     0,     0,     0,     0,
6739:        0,     0,     0,  1740,     0,     0,     0,     0,     0,     0,
6740:       93,    94,    95,    96,    97,    98,    99,   100,     0,   101,
6741:      102,   103,     0,     0,     0,     0,     0,     0,     0,   104,
6742:      105,     0,   106,   107,   108,     0,   110,   111,   112,   113,
6743:      114,     0,   116,   117,     0,   118,   119,   120,   121,   122,
6744:      123,     0,     0,   124,   125,   126,   127,   128,     0,   129,
6745:      130,   131,   132,   133,     0,     0,     0,   135,   136,   137,
6746:      138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
6747:      147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
6748:        0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
6749:      160,   161,   162,   163,   164,   165,     0,   166,     0,   167,
6750:      168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
6751:      177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
6752:      184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
6753:      192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
6754:        0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
6755:        0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
6756:      215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
6757:      224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
6758:      233,   234,   235,     0,   236,     0,   238,   239,   240,   241,
6759:      242,   243,   244,   245,     0,   246,     0,   247,     0,     0,
6760:      250,     0,   252,   253,   254,   255,   256,     0,     0,   257,
6761:        0,   259,     0,     0,   261,   262,   263,     0,     0,   264,
6762:      265,   266,   267,   268,   501,   270,   271,   272,   273,   274,
6763:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
6764:      285,   286,   287,   288,     0,   290,   291,   292,   293,   294,
6765:        0,   295,   296,     0,   298,     0,   299,   300,   301,   302,
6766:      303,   304,     0,   305,   306,     0,     0,   307,   308,   309,
6767:        0,     0,   310,   311,     0,   313,     0,   315,   316,   317,
6768:      318,   319,   320,   321,   322,   323,   324,   325,     0,   326,
6769:      327,   328,   329,   330,   331,   332,   333,   334,     0,   335,
6770:      336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
6771:      345,   346,   347,   348,     0,   349,   350,   351,   352,   353,
6772:      354,   355,   356,   357,   358,   359,   360,   361,     0,   362,
6773:      363,     0,   365,   366,   367,   368,   369,   370,   371,   372,
6774:      373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
6775:      382,   383,   384,     0,   385,   386,   387,   388,   389,     0,
6776:      391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
6777:      400,   401,   402,   403,   404,   405,   503,   407,   408,   409,
6778:        0,   410,   411,     0,   412,     0,   414,   415,   416,   417,
6779:      418,     0,   419,   420,     0,     0,   421,   422,   423,   424,
6780:      425,     0,   426,   427,   428,   429,   430,   431,   432,   433,
6781:        0,     0,   434,   435,   436,   437,   438,     0,     0,   439,
6782:      440,   441,   442,   443,   444,   445,     0,   446,     0,   448,
6783:      449,   450,   451,     0,     0,   452,     0,     0,   453,   454,
6784:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
6785:      465,   466,   467,   468,   469,   470,   471,   472,   473,   743,
6786:     1233,   548,     0,     0,     0,   819,     0,     0,  2227,     0,
6787:        0,     0,     0,     0,     0,    93,    94,    95,    96,    97,
6788:       98,    99,   100,     0,   101,   102,   103,     0,     0,     0,
6789:        0,     0,     0,     0,   104,   105,     0,   106,   107,   108,
6790:        0,   110,   111,   112,   744,   745,     0,   746,   747,     0,
6791:      118,   119,   120,   121,   122,   123,     0,     0,   124,   125,
6792:      748,   749,   128,     0,   129,   130,   131,   132,   750,     0,
6793:        0,     0,   135,   136,   137,   138,   139,   140,     0,   142,
6794:      143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
6795:        0,   152,   153,   154,     0,     0,     0,     0,     0,     0,
6796:        0,   156,   157,   158,   159,   160,   161,   162,   751,   752,
6797:      165,  1368,   166,     0,   167,   168,   169,   170,   171,   172,
6798:        0,   173,   174,   175,   176,   177,     0,     0,   178,   179,
6799:      180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
6800:      188,     0,   189,   190,   191,   192,   753,   194,   195,   196,
6801:      197,   198,   754,  1234,   200,     0,   201,   202,   755,   204,
6802:        0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
6803:        0,   213,     0,   214,     0,   756,   757,   217,     0,   218,
6804:      219,   220,   221,   222,   223,   224,     0,   226,   227,   228,
6805:      229,     0,   230,   231,   232,   233,   234,   235,     0,   236,
6806:        0,   758,   239,   240,   241,   242,   243,   759,   760,     0,
6807:      761,     0,   247,     0,     0,   250,     0,   252,   253,   254,
6808:      255,   256,     0,     0,   257,     0,   259,     0,     0,   261,
6809:      262,   263,     0,     0,   264,   265,   266,   267,   268,   762,
6810:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6811:      280,   281,   282,   283,   284,   285,   286,   287,   763,     0,
6812:      764,   291,   292,   293,   765,     0,   295,   296,     0,   298,
6813:        0,   766,   300,   767,   302,   303,   304,     0,   305,   306,
6814:     1235,     0,   307,   308,   309,     0,     0,   310,   768,     0,
6815:      313,     0,   769,   316,   317,   318,   319,   320,   321,   322,
6816:      323,   324,   325,     0,   326,   327,   770,   329,   330,   771,
6817:      332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
6818:        0,   341,   342,   343,   772,   345,   346,   347,   348,     0,
6819:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
6820:      359,   360,   361,     0,   362,   363,     0,   365,   366,   367,
6821:      773,   369,   370,   371,   372,   373,   374,   375,   376,   377,
6822:      378,   379,     0,   380,   381,   382,   383,   384,     0,   385,
6823:      774,   387,   388,   389,     0,   391,   392,   775,   394,     0,
6824:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
6825:      405,   776,   407,   777,   409,     0,   410,   411,     0,   412,
6826:        0,   414,   415,   416,   417,   418,     0,   778,   779,     0,
6827:        0,   421,   422,   780,   424,   781,  1236,   426,   427,   782,
6828:      429,   430,   431,   432,   433,     0,     0,   434,   435,   436,
6829:      437,   438,     0,     0,   439,   440,   441,   442,   443,  1126,
6830:      784,     0,   446,     0,   448,   449,   450,   451,     0,     0,
6831:      452,     0,     0,   453,   454,   455,   456,   457,   458,   785,
6832:      786,   787,   788,   789,   790,   791,   792,   793,   794,   795,
6833:      470,   471,   472,   473,   743,  1233,   548,     0,     0,     0,
6834:      819,  1237,  1238,     0,     0,     0,     0,     0,     0,     0,
6835:       93,    94,    95,    96,    97,    98,    99,   100,     0,   101,
6836:      102,   103,     0,     0,     0,     0,     0,     0,     0,   104,
6837:      105,     0,   106,   107,   108,     0,   110,   111,   112,   744,
6838:      745,     0,   746,   747,     0,   118,   119,   120,   121,   122,
6839:      123,     0,     0,   124,   125,   748,   749,   128,     0,   129,
6840:      130,   131,   132,   750,     0,     0,     0,   135,   136,   137,
6841:      138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
6842:      147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
6843:        0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
6844:      160,   161,   162,   751,   752,   165,  1370,   166,     0,   167,
6845:      168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
6846:      177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
6847:      184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
6848:      192,   753,   194,   195,   196,   197,   198,   754,  1234,   200,
6849:        0,   201,   202,   755,   204,     0,   205,     0,   206,     0,
6850:        0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
6851:      756,   757,   217,     0,   218,   219,   220,   221,   222,   223,
6852:      224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
6853:      233,   234,   235,     0,   236,     0,   758,   239,   240,   241,
6854:      242,   243,   759,   760,     0,   761,     0,   247,     0,     0,
6855:      250,     0,   252,   253,   254,   255,   256,     0,     0,   257,
6856:        0,   259,     0,     0,   261,   262,   263,     0,     0,   264,
6857:      265,   266,   267,   268,   762,   270,   271,   272,   273,   274,
6858:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
6859:      285,   286,   287,   763,     0,   764,   291,   292,   293,   765,
6860:        0,   295,   296,     0,   298,     0,   766,   300,   767,   302,
6861:      303,   304,     0,   305,   306,  1235,     0,   307,   308,   309,
6862:        0,     0,   310,   768,     0,   313,     0,   769,   316,   317,
6863:      318,   319,   320,   321,   322,   323,   324,   325,     0,   326,
6864:      327,   770,   329,   330,   771,   332,   333,   334,     0,   335,
6865:      336,   337,   338,   339,   340,     0,   341,   342,   343,   772,
6866:      345,   346,   347,   348,     0,   349,   350,   351,   352,   353,
6867:      354,   355,   356,   357,   358,   359,   360,   361,     0,   362,
6868:      363,     0,   365,   366,   367,   773,   369,   370,   371,   372,
6869:      373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
6870:      382,   383,   384,     0,   385,   774,   387,   388,   389,     0,
6871:      391,   392,   775,   394,     0,   395,   396,   397,   398,   399,
6872:      400,   401,   402,   403,   404,   405,   776,   407,   777,   409,
6873:        0,   410,   411,     0,   412,     0,   414,   415,   416,   417,
6874:      418,     0,   778,   779,     0,     0,   421,   422,   780,   424,
6875:      781,  1236,   426,   427,   782,   429,   430,   431,   432,   433,
6876:        0,     0,   434,   435,   436,   437,   438,     0,     0,   439,
6877:      440,   441,   442,   443,  1126,   784,     0,   446,     0,   448,
6878:      449,   450,   451,     0,     0,   452,     0,     0,   453,   454,
6879:      455,   456,   457,   458,   785,   786,   787,   788,   789,   790,
6880:      791,   792,   793,   794,   795,   470,   471,   472,   473,   743,
6881:     1233,   548,     0,     0,     0,   819,  1237,  1238,     0,     0,
6882:        0,     0,     0,     0,     0,    93,    94,    95,    96,    97,
6883:       98,    99,   100,     0,   101,   102,   103,     0,     0,     0,
6884:        0,     0,     0,     0,   104,   105,     0,   106,   107,   108,
6885:        0,   110,   111,   112,   744,   745,     0,   746,   747,     0,
6886:      118,   119,   120,   121,   122,   123,     0,     0,   124,   125,
6887:      748,   749,   128,     0,   129,   130,   131,   132,   750,     0,
6888:        0,     0,   135,   136,   137,   138,   139,   140,     0,   142,
6889:      143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
6890:        0,   152,   153,   154,     0,     0,     0,     0,     0,     0,
6891:        0,   156,   157,   158,   159,   160,   161,   162,   751,   752,
6892:      165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
6893:        0,   173,   174,   175,   176,   177,     0,     0,   178,   179,
6894:      180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
6895:      188,     0,   189,   190,   191,   192,   753,   194,   195,   196,
6896:      197,   198,   754,  1234,   200,     0,   201,   202,   755,   204,
6897:        0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
6898:        0,   213,     0,   214,     0,   756,   757,   217,     0,   218,
6899:      219,   220,   221,   222,   223,   224,     0,   226,   227,   228,
6900:      229,     0,   230,   231,   232,   233,   234,   235,     0,   236,
6901:        0,   758,   239,   240,   241,   242,   243,   759,   760,     0,
6902:      761,     0,   247,     0,     0,   250,     0,   252,   253,   254,
6903:      255,   256,     0,     0,   257,     0,   259,     0,     0,   261,
6904:      262,   263,     0,     0,   264,   265,   266,   267,   268,   762,
6905:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6906:      280,   281,   282,   283,   284,   285,   286,   287,   763,     0,
6907:      764,   291,   292,   293,   765,     0,   295,   296,     0,   298,
6908:        0,   766,   300,   767,   302,   303,   304,     0,   305,   306,
6909:     1235,     0,   307,   308,   309,     0,     0,   310,   768,     0,
6910:      313,     0,   769,   316,   317,   318,   319,   320,   321,   322,
6911:      323,   324,   325,     0,   326,   327,   770,   329,   330,   771,
6912:      332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
6913:        0,   341,   342,   343,   772,   345,   346,   347,   348,     0,
6914:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
6915:      359,   360,   361,     0,   362,   363,     0,   365,   366,   367,
6916:      773,   369,   370,   371,   372,   373,   374,   375,   376,   377,
6917:      378,   379,     0,   380,   381,   382,   383,   384,     0,   385,
6918:      774,   387,   388,   389,     0,   391,   392,   775,   394,     0,
6919:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
6920:      405,   776,   407,   777,   409,     0,   410,   411,     0,   412,
6921:        0,   414,   415,   416,   417,   418,     0,   778,   779,     0,
6922:        0,   421,   422,   780,   424,   781,  1236,   426,   427,   782,
6923:      429,   430,   431,   432,   433,     0,     0,   434,   435,   436,
6924:      437,   438,     0,     0,   439,   440,   441,   442,   443,  1126,
6925:      784,     0,   446,     0,   448,   449,   450,   451,     0,     0,
6926:      452,     0,     0,   453,   454,   455,   456,   457,   458,   785,
6927:      786,   787,   788,   789,   790,   791,   792,   793,   794,   795,
6928:      470,   471,   472,   473,     0,  1309,     0,     0,  1310,     0,
6929:        0,  1237,  1238,  1311,  1312,  1313,     0,     0,     0,     0,
6930:        0,     0,     0,  1309,     0,     0,  1310,     0,     0,     0,
6931:     1314,  1311,  1312,  1313,  1766,     0,     0,     0,  1316,     0,
6932:        0,     0,     0,     0,     0,  1317,     0,     0,  1314,     0,
6933:        0,     0,  1309,     0,     0,  1310,  1316,     0,     0,     0,
6934:     1311,  1312,  1313,  1317,     0,     0,     0,     0,     0,     0,
6935:     1318,  1309,     0,     0,  1310,     0,     0,  1314,     0,  1311,
6936:     1312,  1313,     0,     0,     0,  1316,     0,     0,  1318,     0,
6937:        0,     0,  1317,     0,     0,     0,  1314,     0,     0,  1963,
6938:        0,     0,     0,     0,  1316,     0,     0,     0,     0,     0,
6939:        0,  1317,     0,     0,     0,     0,     0,  1318,     0,     0,
6940:        0,  1767,     0,     0,     0,     0,     0,     0,     0,     0,
6941:        0,     0,     0,     0,     0,     0,  1318,  1309,     0,     0,
6942:     1310,     0,     0,     0,     0,  1311,  1312,  1313,     0,     0,
6943:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6944:        0,     0,  1314,     0,     0,     0,     0,     0,     0,     0,
6945:     1316,  1319,     0,     0,     0,     0,     0,  1317,     0,  2001,
6946:        0,     0,     0,     0,  2002,     0,     0,  1320,     0,  1319,
6947:        0,     0,  1321,     0,     0,     0,     0,     0,     0,     0,
6948:        0,     0,  1318,     0,     0,  1320,     0,  2972,     0,     0,
6949:     1321,     0,     0,     0,  1322,  1323,     0,     0,  1319,     0,
6950:        0,     0,     0,     0,     0,     0,     0,     0,  1324,     0,
6951:        0,     0,  1322,  1323,  1320,     0,     0,  1319,     0,  1321,
6952:        0,     0,     0,     0,     0,     0,  1324,     0,     0,     0,
6953:        0,     0,     0,  1320,     0,     0,     0,     0,  1321,     0,
6954:        0,  1322,  1323,     0,     0,     0,  1325,     0,     0,  1326,
6955:        0,     0,     0,     0,     0,  1324,     0,     0,     0,     0,
6956:     1322,  1323,     0,  1327,  1325,     0,  1328,  1326,     0,     0,
6957:        0,     0,     0,     0,  1324,     0,     0,     0,     0,     0,
6958:        0,  1327,     0,  1319,  1328,     0,     0,     0,     0,     0,
6959:        0,     0,     0,  1325,     0,     0,  1326,     0,     0,  1320,
6960:        0,     0,     0,     0,  1321,     0,     0,     0,     0,     0,
6961:     1327,     0,  1325,  1328,     0,  1326,     0,     0,     0,     0,
6962:        0,     0,     0,     0,     0,     0,  1322,  1323,     0,  1327,
6963:        0,     0,  1328,     0,     0,     0,  2973,     0,     0,     0,
6964:     1324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6965:        0,     0,     0,     0,  1309,  1329,     0,  1310,     0,     0,
6966:        0,     0,  1311,  1312,  1313,     0,     0,     0,     0,     0,
6967:        0,     0,     0,  1329,     0,     0,     0,     0,  1325,  1314,
6968:        0,  1326,  2006,     0,     0,     0,     0,  1316,     0,     0,
6969:        0,     0,     0,     0,  1317,  1327,     0,     0,  1328,     0,
6970:        0,     0,  1329,     0,     0,     0,     0,     0,     0,     0,
6971:        0,     0,     0,     0,  1771,     0,  1975,     0,     0,  1318,
6972:        0,  1329,     0,     0,     0,     0,     0,     0,     0,     0,
6973:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6974:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6975:        0,     0,     0,     0,     0,  1330,     0,     0,  1331,  1332,
6976:     1333,     0,  1334,  1335,  1336,  1337,  1338,  1339,     0,     0,
6977:        0,     0,     0,  1330,     0,     0,  1331,  1332,  1333,     0,
6978:     1334,  1335,  1336,  1337,  1338,  1339,     0,  1329,     0,     0,
6979:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6980:        0,     0,  1330,     0,     0,  1331,  1332,  1333,     0,  1334,
6981:     1335,  1336,  1337,  1338,  1339,     0,     0,     0,     0,     0,
6982:     1319,  1330,     0,     0,  1331,  1332,  1333,     0,  1334,  1335,
6983:     1336,  1337,  1338,  1339,     0,  1309,  1320,     0,  1310,     0,
6984:        0,  1321,     0,  1311,  1312,  1313,     0,     0,     0,     0,
6985:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6986:     1314,     0,     0,  1322,  1323,     0,     0,     0,  1316,     0,
6987:        0,     0,     0,     0,     0,  1317,     0,  1324,     0,     0,
6988:        0,     0,     0,     0,     0,     0,     0,  1330,     0,     0,
6989:     1331,  1332,  1333,     0,  1334,  1335,  1336,  1337,  1338,  1339,
6990:     1318,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6991:        0,     0,     0,     0,     0,  1325,  1309,     0,  1326,  1310,
6992:        0,     0,     0,     0,  1311,  1312,  1313,     0,     0,     0,
6993:        0,     0,  1327,     0,     0,  1328,     0,     0,     0,     0,
6994:        0,  1314,     0,     0,  2013,     0,     0,     0,     0,  1316,
6995:        0,     0,     0,     0,     0,  1309,  1317,     0,  1310,     0,
6996:        0,     0,     0,  1311,  1312,  1313,     0,     0,     0,     0,
6997:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6998:     1314,  1318,     0,     0,     0,     0,     0,     0,  1316,     0,
6999:        0,     0,     0,     0,     0,  1317,  2011,     0,     0,     0,
7000:     1309,  1319,     0,  1310,     0,     0,     0,     0,  1311,  1312,
7001:     1313,     0,     0,     0,     0,     0,     0,  1320,     0,     0,
7002:     1318,     0,  1321,     0,  1329,  1314,     0,     0,  2273,     0,
7003:        0,     0,     0,  1316,     0,     0,     0,     0,     0,     0,
7004:     1317,     0,     0,     0,  1322,  1323,     0,     0,     0,     0,
7005:        0,     0,     0,     0,     0,     0,     0,     0,  1324,     0,
7006:        0,     0,     0,     0,     0,  1318,     0,     0,     0,     0,
7007:        0,     0,     0,     0,     0,  1309,     0,     0,  1310,     0,
7008:        0,     0,  1319,  1311,  1312,  1313,     0,     0,     0,     0,
7009:        0,     0,     0,     0,     0,     0,  1325,     0,  1320,  1326,
7010:     1314,     0,     0,  1321,     0,     0,     0,     0,  1316,     0,
7011:        0,     0,     0,  1327,     0,  1317,  1328,     0,     0,     0,
7012:        0,  1319,     0,     0,  1330,  1322,  1323,  1331,  1332,  1333,
7013:        0,  1334,  1335,  1336,  1337,  1338,  1339,  1320,     0,  1324,
7014:     1318,  1309,  1321,     0,  1310,     0,     0,     0,     0,  1311,
7015:     1312,  1313,     0,     0,     0,     0,     0,     0,     0,     0,
7016:        0,     0,     0,     0,  1322,  1323,  1319,     0,     0,     0,
7017:        0,     0,     0,     0,  1316,     0,     0,  1325,  1324,     0,
7018:     1326,  1317,  1320,     0,     0,     0,     0,  1321,     0,     0,
7019:        0,     0,     0,     0,  1327,     0,     0,  1328,     0,     0,
7020:        0,     0,     0,     0,     0,  1329,  1318,     0,     0,  1322,
7021:     1323,     0,     0,     0,     0,     0,  1325,     0,     0,  1326,
7022:        0,     0,     0,  1324,     0,     0,     0,     0,     0,     0,
7023:        0,     0,     0,  1327,  1309,     0,  1328,  1310,     0,     0,
7024:        0,  1319,  1311,  1312,  1313,     0,     0,     0,     0,     0,
7025:        0,     0,     0,     0,     0,     0,     0,  1320,     0,  1314,
7026:        0,  1325,  1321,     0,  1326,     0,     0,  1316,     0,     0,
7027:        0,     0,     0,     0,  1317,     0,     0,     0,  1327,     0,
7028:        0,  1328,     0,     0,  1322,  1323,  1329,     0,     0,     0,
7029:        0,     0,     0,     0,     0,     0,     0,     0,  1324,  1318,
7030:        0,     0,     0,     0,     0,  1330,     0,  1319,  1331,  1332,
7031:     1333,     0,  1334,  1335,  1336,  1337,  1338,  1339,     0,     0,
7032:        0,     0,     0,  1320,     0,  1329,     0,     0,  1321,     0,
7033:        0,     0,     0,     0,     0,     0,  1325,     0,     0,  1326,
7034:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7035:     1322,  1323,     0,  1327,     0,     0,  1328,  2231,     0,     0,
7036:        0,     0,     0,     0,  1324,     0,     0,     0,     0,     0,
7037:     1329,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7038:        0,     0,     0,     0,     0,     0,  1330,     0,     0,  1331,
7039:     1332,  1333,     0,  1334,  1335,  1336,  1337,  1338,  1339,     0,
7040:     1319,     0,  1325,     0,     0,  1326,     0,     0,     0,     0,
7041:        0,     0,     0,     0,     0,     0,  1320,     0,     0,  1327,
7042:        0,  1321,     0,     0,     0,  1330,     0,     0,  1331,  1332,
7043:     1333,     0,  1334,  1335,  1336,  1337,  1338,  1339,     0,     0,
7044:        0,     0,     0,  1322,  1323,  1329,     0,     0,     0,     0,
7045:        0,     0,     0,     0,     0,     0,     0,  1324,     0,  1309,
7046:        0,     0,  1310,     0,     0,     0,     0,  1311,  1312,  1313,
7047:     1330,     0,     0,  1331,  1332,  1333,     0,  1334,  1335,  1336,
7048:     1337,  1338,  1339,     0,     0,     0,     0,     0,     0,     0,
7049:        0,     0,  1316,     0,     0,  1325,     0,     0,  1326,  1317,
7050:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7051:        0,  1329,  1327,     0,     0,  1328,     0,     0,     0,     0,
7052:        0,     0,     0,     0,  1318,     0,     0,     0,     0,     0,
7053:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7054:        0,     0,     0,     0,     0,  1330,     0,     0,  1331,  1332,
7055:     1333,     0,  1334,  1335,  1336,  1337,  1338,  1339,     0,     0,
7056:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7057:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7058:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7059:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7060:        0,     0,     0,     0,  1329,     0,     0,     0,     0,     0,
7061:        0,  1330,     0,     0,  1331,  1332,  1333,     0,  1334,  1335,
7062:     1336,  1337,  1338,  1339,     0,  1319,     0,     0,     0,     0,
7063:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7064:        0,  1320,     0,     0,     0,     0,  1321,     0,     0,     0,
7065:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7066:        0,     0,     0,     0,     0,     0,     0,     0, -1734, -1734,
7067:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7068:        0,     0,  1324,     0,     0,     0,     0,     0,     0,     0,
7069:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7070:        0,     0,     0,     0,  1330,     0,     0,  1331,  1332,  1333,
7071:        0,  1334,  1335,  1336,  1337,  1786,  1339,     0,     0,     0,
7072:        0,     0,     0, -1734,     0,     0,     0,     0,     0,     0,
7073:        0,     0,     0,     0,     0,     0,     0,  1327,     0,     0,
7074:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7075:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7076:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7077:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7078:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7079:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7080:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7081:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7082:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1329,
7083:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7084:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7085:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7086:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7087:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7088:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7089:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7090:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7091:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7092:        0,     0,     0,     0,     0,     0,  1052,     0,  1675,  1330,
7093:        0,     0,  1331,  1332,  1333,     0,  1334,  1335,  1336,  1337,
7094:     1338,  1339,    93,    94,    95,    96,    97,    98,    99,   100,
7095:     1053,   101,   102,   103,  1054,  1055,  1056,  1057,  1058,  1059,
7096:     1060,   104,   105,  1061,   106,   107,   108,     0,   110,   111,
7097:      112,   744,   745,     0,   746,   747,  1062,   118,   119,   120,
7098:      121,   122,   123,  1063,  1064,   124,   125,   748,   749,   128,
7099:     1065,   129,   130,   131,   132,   750,  1066,     0,  1067,   135,
7100:      136,   137,   138,   139,   140,     0,   142,   143,   144,  1068,
7101:      145,   146,   147,   148,   149,   150,  1069,     0,   152,   153,
7102:      154,  1070,  1071,  1072,     0,  1073,  1074,  1075,   156,   157,
7103:      158,   159,   160,   161,   162,   751,   752,   165,  1076,   166,
7104:     1077,   167,   168,   169,   170,   171,   172,  1078,   173,   174,
7105:      175,   176,   177,  1079,  1080,   178,   179,   180,   181,   182,
7106:     1081,   183,   184,   185,  1082,   186,   187,   188,  1083,   189,
7107:      190,   191,   192,   753,   194,   195,   196,   197,   198,   754,
7108:     1084,   200,  1085,   201,   202,   755,   204,  1086,   205,  1087,
7109:      206,     0,  1088,     0,   209,   210,   211,     0,   213,  1089,
7110:      214,  1090,   756,   757,   217,  1091,   218,   219,   220,   221,
7111:      222,   223,   224,     0,   226,   227,   228,   229,  1092,   230,
7112:      231,   232,   233,   234,   235,  1093,   236,     0,   758,   239,
7113:      240,   241,   242,   243,   759,   760,  1094,   761,  1095,   247,
7114:        0,     0,   250,     0,   252,   253,   254,   255,   256,  1096,
7115:     1097,   257,     0,   259,     0,  1098,   261,   262,   263,  1099,
7116:     1100,   264,   265,   266,   267,   268,   762,   270,   271,   272,
7117:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7118:      283,   284,   285,   286,   287,   763,     0,   764,   291,   292,
7119:      293,   765,  1101,   295,   296,     0,   298,  1102,   766,   300,
7120:      767,   302,   303,   304,  1103,   305,   306,  1104,  1105,   307,
7121:      308,   309,  1106,  1107,   310,   768,     0,   313,     0,   769,
7122:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7123:     1108,   326,   327,   770,   329,   330,   771,   332,   333,   334,
7124:     1109,   335,   336,   337,   338,   339,   340,  1110,   341,   342,
7125:      343,   772,   345,   346,   347,   348,  1111,   349,   350,   351,
7126:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7127:     1112,   362,   363,     0,   365,   366,   367,   773,   369,   370,
7128:      371,   372,   373,   374,   375,   376,   377,   378,   379,  1113,
7129:      380,   381,   382,   383,   384,  1114,   385,   774,   387,   388,
7130:      389,     0,   391,   392,   775,   394,  1115,   395,   396,   397,
7131:      398,   399,   400,   401,   402,   403,   404,   405,   776,   407,
7132:      777,   409,  1116,   410,   411,  1117,   412,     0,   414,   415,
7133:      416,   417,   418,  1118,   778,   779,  1119,  1120,   421,   422,
7134:      780,   424,   781,  1121,   426,   427,   782,   429,   430,   431,
7135:      432,   433,  1122,  1123,   434,   435,   436,   437,   438,  1124,
7136:     1125,   439,   440,   441,   442,   443,  1126,   784,  1127,   446,
7137:        0,   448,   449,   450,   451,  1128,  1129,   452,  1130,  1131,
7138:      453,   454,   455,   456,   457,   458,   785,   786,   787,   788,
7139:      789,   790,   791,   792,   793,   794,   795,   470,   471,   472,
7140:      473,  1052,     0,     0,     0,     0,     0,     0,     0,     0,
7141:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7142:       96,    97,    98,    99,   100,  1053,   101,   102,   103,  1054,
7143:     1055,  1056,  1057,  1058,  1059,  1060,   104,   105,  1061,   106,
7144:      107,   108,     0,   110,   111,   112,   744,   745,     0,   746,
7145:      747,  1062,   118,   119,   120,   121,   122,   123,  1063,  1064,
7146:      124,   125,   748,   749,   128,  1065,   129,   130,   131,   132,
7147:      750,  1066,     0,  1067,   135,   136,   137,   138,   139,   140,
7148:        0,   142,   143,   144,  1068,   145,   146,   147,   148,   149,
7149:      150,  1069,     0,   152,   153,   154,  1070,  1071,  1072,     0,
7150:     1073,  1074,  1075,   156,   157,   158,   159,   160,   161,   162,
7151:      751,   752,   165,  1076,   166,  1077,   167,   168,   169,   170,
7152:      171,   172,  1078,   173,   174,   175,   176,   177,  1079,  1080,
7153:      178,   179,   180,   181,   182,  1081,   183,   184,   185,  1082,
7154:      186,   187,   188,  1083,   189,   190,   191,   192,   753,   194,
7155:      195,   196,   197,   198,   754,  1084,   200,  1085,   201,   202,
7156:      755,   204,  1086,   205,  1087,   206,     0,  1088,     0,   209,
7157:      210,   211,     0,   213,  1089,   214,  1090,   756,   757,   217,
7158:     1091,   218,   219,   220,   221,   222,   223,   224,     0,   226,
7159:      227,   228,   229,  1092,   230,   231,   232,   233,   234,   235,
7160:     1093,   236,     0,   758,   239,   240,   241,   242,   243,   759,
7161:      760,  1094,   761,  1095,   247,     0,     0,   250,     0,   252,
7162:      253,   254,   255,   256,  1096,  1097,   257,     0,   259,     0,
7163:     1098,   261,   262,   263,  1099,  1100,   264,   265,   266,   267,
7164:      268,   762,   270,   271,   272,   273,   274,   275,   276,   277,
7165:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7166:      763,     0,   764,   291,   292,   293,   765,  1101,   295,   296,
7167:        0,   298,  1102,   766,   300,   767,   302,   303,   304,  1103,
7168:      305,   306,  1104,  1105,   307,   308,   309,  1106,  1107,   310,
7169:      768,     0,   313,     0,   769,   316,   317,   318,   319,   320,
7170:      321,   322,   323,   324,   325,  1108,   326,   327,   770,   329,
7171:      330,   771,   332,   333,   334,  1109,   335,   336,   337,   338,
7172:      339,   340,  1110,   341,   342,   343,   772,   345,   346,   347,
7173:      348,  1111,   349,   350,   351,   352,   353,   354,   355,   356,
7174:      357,   358,   359,   360,   361,  1112,   362,   363,     0,   365,
7175:      366,   367,   773,   369,   370,   371,   372,   373,   374,   375,
7176:      376,   377,   378,   379,  1113,   380,   381,   382,   383,   384,
7177:     1114,   385,   774,   387,   388,   389,     0,   391,   392,   775,
7178:      394,  1115,   395,   396,   397,   398,   399,   400,   401,   402,
7179:      403,   404,   405,   776,   407,   777,   409,  1116,   410,   411,
7180:     1117,   412,     0,   414,   415,   416,   417,   418,  1118,   778,
7181:      779,  1119,  1120,   421,   422,   780,   424,   781,  1121,   426,
7182:      427,   782,   429,   430,   431,   432,   433,  1122,  1123,   434,
7183:      435,   436,   437,   438,  1124,  1125,   439,   440,   441,   442,
7184:      443,  1126,   784,  1127,   446,     0,   448,   449,   450,   451,
7185:     1128,  1129,   452,  1130,  1131,   453,   454,   455,   456,   457,
7186:      458,   785,   786,   787,   788,   789,   790,   791,   792,   793,
7187:      794,   795,   470,   471,   472,   473,  1052,     0,     0,     0,
7188:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7189:        0,     0,    93,    94,    95,    96,  1821,    98,    99,   100,
7190:     1053,   101,   102,   103,  1054,  1055,  1056,  1057,  1058,  1059,
7191:     1060,   104,   105,  1061,   106,   107,   108,     0,   110,   111,
7192:      112,   744,   745,     0,   746,   747,  1062,   118,   119,   120,
7193:      121,   122,   123,  1063,  1064,   124,   125,   748,   749,   128,
7194:     1065,   129,   130,   131,   132,   750,  1066,     0,  1067,   135,
7195:      136,   137,   138,   139,   140,     0,   142,   143,   144,  1068,
7196:      145,   146,   147,   148,   149,   150,  1069,     0,   152,   153,
7197:      154,  1070,  1071,  1072,     0,  1073,  1074,  1075,   156,   157,
7198:      158,   159,   160,   161,   162,   751,   752,   165,  1076,   166,
7199:     1077,   167,   168,   169,   170,   171,   172,  1078,   173,   174,
7200:      175,   176,   177,  1079,  1080,   178,   179,   180,  1822,   182,
7201:     1081,   183,   184,   185,  1082,   186,   187,   188,  1083,   189,
7202:      190,   191,   192,   753,   194,   195,   196,   197,   198,   754,
7203:     1084,   200,  1085,   201,   202,   755,   204,  1086,   205,  1087,
7204:      206,     0,  1088,     0,   209,   210,   211,     0,   213,  1089,
7205:      214,  1090,   756,   757,   217,  1091,   218,   219,   220,   221,
7206:      222,   223,   224,     0,   226,   227,   228,   229,  1092,   230,
7207:      231,   232,   233,   234,   235,  1093,   236,     0,   758,   239,
7208:      240,   241,   242,   243,   759,   760,  1094,   761,  1095,   247,
7209:        0,     0,   250,     0,   252,   253,   254,   255,   256,  1096,
7210:     1097,   257,     0,   259,     0,  1098,   261,   262,   263,  1099,
7211:     1100,   264,   265,   266,   267,   268,   762,   270,   271,   272,
7212:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7213:      283,   284,   285,   286,   287,   763,     0,   764,   291,   292,
7214:      293,   765,  1101,   295,   296,     0,   298,  1102,   766,   300,
7215:      767,   302,   303,   304,  1103,   305,   306,  1104,  1105,   307,
7216:      308,   309,  1106,  1107,   310,   768,     0,   313,     0,   769,
7217:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7218:     1108,   326,   327,   770,   329,   330,   771,   332,   333,   334,
7219:     1109,   335,   336,   337,   338,   339,   340,  1110,   341,   342,
7220:      343,   772,   345,   346,   347,   348,  1111,   349,   350,   351,
7221:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7222:     1112,   362,   363,     0,   365,   366,   367,   773,   369,   370,
7223:      371,   372,   373,   374,   375,   376,   377,   378,   379,  1113,
7224:      380,   381,   382,   383,   384,  1114,  1823,   774,   387,   388,
7225:      389,     0,   391,   392,   775,   394,  1115,   395,   396,   397,
7226:      398,   399,   400,   401,   402,   403,   404,   405,   776,   407,
7227:      777,   409,  1116,   410,   411,  1117,   412,     0,   414,   415,
7228:      416,   417,   418,  1118,   778,   779,  1119,  1120,   421,   422,
7229:      780,   424,   781,  1121,   426,   427,   782,   429,   430,   431,
7230:      432,   433,  1122,  1123,   434,   435,   436,   437,   438,  1124,
7231:     1125,   439,   440,   441,   442,   443,  1126,   784,  1127,   446,
7232:        0,   448,   449,   450,   451,  1128,  1129,   452,  1130,  1131,
7233:      453,   454,   455,   456,   457,   458,   785,   786,   787,   788,
7234:      789,   790,   791,   792,   793,   794,   795,   470,   471,   472,
7235:      473,    92,     0,     0,     0,     0,     0,     0,     0,     0,
7236:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7237:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
7238:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
7239:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
7240:      117,     0,   118,   119,   120,   121,   122,   123,     0,   826,
7241:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
7242:      829,     0,   830,     0,   135,   136,   137,   138,   139,   140,
7243:      141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
7244:      150,     0,   151,   152,   153,   154,   831,   832,   833,   834,
7245:      835,   836,   837,   156,   157,   158,   159,   160,   161,   162,
7246:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
7247:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
7248:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
7249:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
7250:      195,   196,   197,   198,   842,     0,   200,     0,   201,   202,
7251:      203,   204,     0,   205,     0,   206,   207,     0,   208,   209,
7252:      210,   211,   212,   213,     0,   214,     0,   215,   216,   217,
7253:        0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
7254:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
7255:        0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
7256:      245,     0,   246,     0,   247,   248,   249,   250,   251,   252,
7257:      253,   254,   255,   256,     0,     0,   257,   258,   259,   260,
7258:        0,   261,   262,   263,   850,   851,   264,   265,   266,   267,
7259:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
7260:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7261:      288,   289,   290,   291,   292,   293,   294,     0,   295,   296,
7262:      297,   298,     0,   856,   300,   301,   302,   303,   304,     0,
7263:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
7264:      311,   312,   313,   314,   859,   316,   317,   318,   319,   320,
7265:      321,   322,   323,   324,   325,     0,   326,   327,   860,   329,
7266:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
7267:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
7268:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
7269:      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
7270:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7271:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
7272:      863,   385,   386,   387,   388,   389,   390,   391,   392,   393,
7273:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
7274:      403,   404,   405,   406,   407,   865,   409,     0,   410,   411,
7275:        0,   412,   413,   414,   415,   416,   417,   418,     0,   419,
7276:      420,     0,     0,   421,   422,   868,   424,   869,     0,   426,
7277:      427,   871,   429,   430,   431,   432,   433,     0,     0,   434,
7278:      435,   436,   437,   438,   872,     0,   439,   440,   441,   442,
7279:      443,   444,   445,     0,   446,   447,   448,   449,   450,   451,
7280:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
7281:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7282:      468,   469,   470,   471,   472,   473,    92,     0,     0,     0,
7283:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7284:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
7285:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
7286:        0,   104,   105,     0,   106,   107,   108,   109,   110,   111,
7287:      112,   113,   114,   115,   116,   117,     0,   118,   119,   120,
7288:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
7289:        0,   129,   130,   131,   132,   133,     0,   134,     0,   135,
7290:      136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
7291:      145,   146,   147,   148,   149,   150,     0,   151,   152,   153,
7292:      154,     0,     0,     0,   155,     0,     0,     0,   156,   157,
7293:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
7294:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
7295:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
7296:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
7297:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7298:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
7299:      206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
7300:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
7301:      222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
7302:      231,   232,   233,   234,   235,     0,   236,   237,   238,   239,
7303:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
7304:      248,   249,   250,   251,   252,   253,   254,   255,   256,     0,
7305:        0,   257,   258,   259,   260,     0,   261,   262,   263,     0,
7306:        0,   264,   265,   266,   267,   268,   269,   270,   271,   272,
7307:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7308:      283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
7309:      293,   294,     0,   295,   296,   297,   298,     0,   299,   300,
7310:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
7311:      308,   309,     0,     0,   310,   311,   312,   313,   314,   315,
7312:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7313:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
7314:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
7315:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
7316:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7317:        0,   362,   363,   364,   365,   366,   367,   368,   369,   370,
7318:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
7319:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
7320:      389,   390,   391,   392,   393,   394,     0,   395,   396,   397,
7321:      398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
7322:      408,   409,     0,   410,   411,     0,   412,   413,   414,   415,
7323:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
7324:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
7325:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
7326:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
7327:      447,   448,   449,   450,   451,     0,     0,   452,     0,     0,
7328:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7329:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7330:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
7331:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7332:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
7333:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
7334:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
7335:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
7336:      124,   125,   126,   127,   128,  1430,   129,   130,   131,   132,
7337:      133,     0,     0,  1431,   135,   136,   137,   138,   139,   140,
7338:        0,   142,   143,   144,  1432,   145,   146,   147,   148,   149,
7339:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
7340:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
7341:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
7342:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
7343:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
7344:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
7345:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
7346:      203,   204,     0,   205,  1433,   206,     0,     0,     0,   209,
7347:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
7348:        0,   218,   219,   220,   221,   222,  1434,   224,     0,   226,
7349:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
7350:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
7351:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
7352:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
7353:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
7354:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
7355:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7356:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
7357:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
7358:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
7359:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
7360:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
7361:      330,   331,   332,   333,   334,  1435,   335,   336,   337,   338,
7362:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
7363:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
7364:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
7365:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7366:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
7367:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
7368:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
7369:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
7370:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
7371:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
7372:      427,   428,   429,   430,   431,   432,   433,     0,  1436,   434,
7373:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
7374:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
7375:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
7376:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7377:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
7378:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7379:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
7380:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
7381:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
7382:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
7383:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
7384:     1430,   129,   130,   131,   132,   133,     0,     0,     0,   135,
7385:      136,   137,   138,   139,   140,     0,   142,   143,   144,  1432,
7386:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
7387:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
7388:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
7389:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
7390:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
7391:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
7392:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7393:        0,   200,     0,   201,   202,   203,   204,     0,   205,  1433,
7394:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
7395:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
7396:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
7397:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
7398:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
7399:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
7400:        0,   257,     0,   259,  1889,     0,   261,   262,   263,     0,
7401:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
7402:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7403:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
7404:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
7405:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
7406:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
7407:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7408:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
7409:     1435,   335,   336,   337,   338,   339,   340,     0,   341,   342,
7410:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
7411:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7412:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
7413:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
7414:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
7415:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
7416:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
7417:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
7418:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
7419:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
7420:      432,   433,     0,  1436,   434,   435,   436,   437,   438,     0,
7421:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
7422:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
7423:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7424:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7425:      473,   743,     0,   548,     0,     0,     0,     0,     0,     0,
7426:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7427:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
7428:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
7429:      107,   108,     0,   110,   111,   112,   744,   745,     0,   746,
7430:      747,     0,   118,   119,   120,   121,   122,   123,     0,     0,
7431:      124,   125,   748,   749,   128,     0,   129,   130,   131,   132,
7432:      750,     0,     0,     0,   135,   136,   137,   138,   139,   140,
7433:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
7434:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
7435:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
7436:      751,   752,   165,     0,   166,     0,   167,   168,   169,   170,
7437:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
7438:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
7439:      186,   187,   188,     0,   189,   190,   191,   192,   753,   194,
7440:      195,   196,   197,   198,   754,  1234,   200,     0,   201,   202,
7441:      755,   204,     0,   205,     0,   206,     0,     0,     0,   209,
7442:      210,   211,     0,   213,     0,   214,     0,   756,   757,   217,
7443:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
7444:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
7445:        0,   236,     0,   758,   239,   240,   241,   242,   243,   759,
7446:      760,     0,   761,     0,   247,     0,     0,   250,     0,   252,
7447:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
7448:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
7449:      268,   762,   270,   271,   272,   273,   274,   275,   276,   277,
7450:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7451:      763,     0,   764,   291,   292,   293,   765,     0,   295,   296,
7452:        0,   298,     0,   766,   300,   767,   302,   303,   304,     0,
7453:      305,   306,  1235,     0,   307,   308,   309,     0,     0,   310,
7454:      768,     0,   313,     0,   769,   316,   317,   318,   319,   320,
7455:      321,   322,   323,   324,   325,     0,   326,   327,   770,   329,
7456:      330,   771,   332,   333,   334,     0,   335,   336,   337,   338,
7457:      339,   340,     0,   341,   342,   343,   772,   345,   346,   347,
7458:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
7459:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
7460:      366,   367,   773,   369,   370,   371,   372,   373,   374,   375,
7461:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
7462:        0,   385,   774,   387,   388,   389,     0,   391,   392,   775,
7463:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
7464:      403,   404,   405,   776,   407,   777,   409,     0,   410,   411,
7465:        0,   412,     0,   414,   415,   416,   417,   418,     0,   778,
7466:      779,     0,     0,   421,   422,   780,   424,   781,  1236,   426,
7467:      427,   782,   429,   430,   431,   432,   433,     0,     0,   434,
7468:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
7469:      443,  1126,   784,     0,   446,     0,   448,   449,   450,   451,
7470:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
7471:      458,   785,   786,   787,   788,   789,   790,   791,   792,   793,
7472:      794,   795,   470,   471,   472,   473,   499,     0,   580,     0,
7473:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7474:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
7475:        0,   101,   102,   103,     3,     4,     0,     0,     0,     0,
7476:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
7477:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
7478:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
7479:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
7480:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
7481:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
7482:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
7483:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
7484:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
7485:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
7486:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
7487:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7488:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
7489:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
7490:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
7491:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
7492:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
7493:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
7494:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
7495:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
7496:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
7497:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7498:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
7499:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
7500:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
7501:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
7502:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7503:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
7504:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
7505:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
7506:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7507:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
7508:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
7509:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
7510:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
7511:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
7512:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
7513:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
7514:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
7515:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
7516:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
7517:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
7518:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7519:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7520:      473,   499,     0,   580,     0,     0,     0,     0,     0,     0,
7521:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7522:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
7523:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
7524:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
7525:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
7526:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
7527:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
7528:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
7529:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
7530:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
7531:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
7532:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
7533:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
7534:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
7535:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
7536:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
7537:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
7538:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
7539:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
7540:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
7541:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
7542:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
7543:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
7544:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
7545:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7546:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
7547:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
7548:      305,   306,     0,   581,   307,   308,   309,     0,     0,   310,
7549:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
7550:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
7551:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
7552:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
7553:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
7554:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
7555:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7556:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
7557:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
7558:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
7559:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
7560:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
7561:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
7562:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
7563:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
7564:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
7565:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
7566:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7567:      468,   469,   470,   471,   472,   473,   499,     0,   580,     0,
7568:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7569:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
7570:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
7571:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
7572:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
7573:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
7574:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
7575:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
7576:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
7577:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
7578:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
7579:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
7580:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
7581:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
7582:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7583:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
7584:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
7585:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
7586:      222,   624,   224,     0,   226,   227,   228,   229,     0,   230,
7587:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
7588:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
7589:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
7590:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
7591:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
7592:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7593:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
7594:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
7595:      301,   302,   303,   304,     0,   305,   306,     0,   581,   307,
7596:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
7597:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7598:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
7599:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
7600:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
7601:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7602:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
7603:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
7604:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
7605:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
7606:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
7607:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
7608:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
7609:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
7610:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
7611:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
7612:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
7613:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7614:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7615:      473,   743,     0,     0,     0,     0,     0,     0,     0,     0,
7616:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7617:       96,    97,    98,    99,   100,     0,   101,   102,   103,     3,
7618:        4,     0,     0,     0,     0,     0,   104,   105,     0,   106,
7619:      107,   108,     0,   110,   111,   112,   744,   745,     0,   746,
7620:      747,     0,   118,   119,   120,   121,   122,   123,     0,     0,
7621:      124,   125,   748,   749,   128,     0,   129,   130,   131,   132,
7622:      750,     0,     0,     0,   135,   136,   137,   138,   139,   140,
7623:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
7624:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
7625:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
7626:      751,   752,   165,     0,   166,     0,   167,   168,   169,   170,
7627:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
7628:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
7629:      186,   187,   188,     0,   189,   190,   191,   192,   753,   194,
7630:      195,   196,   197,   198,   754,     0,   200,     0,   201,   202,
7631:      755,   204,     0,   205,     0,   206,     0,     0,     0,   209,
7632:      210,   211,     0,   213,     0,   214,     0,   756,   757,   217,
7633:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
7634:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
7635:        0,   236,     0,   758,   239,   240,   241,   242,   243,   759,
7636:      760,     0,   761,     0,   247,     0,     0,   250,     0,   252,
7637:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
7638:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
7639:      268,   762,   270,   271,   272,   273,   274,   275,   276,   277,
7640:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7641:      763,     0,   764,   291,   292,   293,   765,     0,   295,   296,
7642:        0,   298,     0,   766,   300,   767,   302,   303,   304,     0,
7643:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
7644:      768,     0,   313,     0,   769,   316,   317,   318,   319,   320,
7645:      321,   322,   323,   324,   325,     0,   326,   327,   770,   329,
7646:      330,   771,   332,   333,   334,     0,   335,   336,   337,   338,
7647:      339,   340,     0,   341,   342,   343,   772,   345,   346,   347,
7648:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
7649:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
7650:      366,   367,   773,   369,   370,   371,   372,   373,   374,   375,
7651:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
7652:        0,   385,   774,   387,   388,   389,     0,   391,   392,   775,
7653:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
7654:      403,   404,   405,   776,   407,   777,   409,     0,   410,   411,
7655:        0,   412,     0,   414,   415,   416,   417,   418,     0,   778,
7656:      779,     0,     0,   421,   422,   780,   424,   781,     0,   426,
7657:      427,   782,   429,   430,   431,   432,   433,     0,     0,   434,
7658:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
7659:      443,  1126,   784,     0,   446,     0,   448,   449,   450,   451,
7660:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
7661:      458,   785,   786,   787,   788,   789,   790,   791,   792,   793,
7662:      794,   795,   470,   471,   472,   473,   499,     0,   580,     0,
7663:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7664:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
7665:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
7666:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
7667:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
7668:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
7669:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
7670:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
7671:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
7672:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
7673:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
7674:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
7675:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
7676:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
7677:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7678:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
7679:      206,     0,     0,     0,   209,   210,   211,     0,  1728,     0,
7680:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
7681:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
7682:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
7683:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
7684:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
7685:        0,   257,     0,   259,     0,     0,   261,   262,  1729,     0,
7686:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
7687:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7688:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
7689:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
7690:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
7691:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
7692:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7693:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
7694:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
7695:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
7696:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7697:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
7698:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
7699:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
7700:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
7701:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
7702:      408,   409,     0,   410,   411,  1730,   412,     0,   414,  1731,
7703:      416,  1732,   418,     0,   419,   420,     0,     0,   421,   422,
7704:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
7705:      432,   433,     0,     0,   434,   435,  1733,   437,   438,     0,
7706:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
7707:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
7708:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7709:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7710:      473,   499,  2663,     0,     0,     0,     0,  2664,     0,     0,
7711:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7712:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
7713:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
7714:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
7715:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
7716:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
7717:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
7718:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
7719:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
7720:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
7721:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
7722:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
7723:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
7724:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
7725:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
7726:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
7727:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
7728:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
7729:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
7730:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
7731:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
7732:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
7733:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
7734:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
7735:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7736:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
7737:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
7738:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
7739:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
7740:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
7741:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
7742:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
7743:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
7744:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
7745:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7746:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
7747:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
7748:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
7749:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
7750:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
7751:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
7752:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
7753:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
7754:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
7755:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
7756:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7757:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
7758:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7759:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
7760:      500,   101,   102,   103,     0,     0,     0,     0,     0,     0,
7761:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
7762:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
7763:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
7764:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
7765:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
7766:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
7767:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
7768:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
7769:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
7770:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
7771:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
7772:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7773:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
7774:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
7775:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
7776:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
7777:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
7778:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
7779:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
7780:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
7781:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
7782:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7783:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
7784:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
7785:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
7786:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
7787:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7788:        0,   326,   327,   328,   329,   330,   331,   502,   333,   334,
7789:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
7790:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
7791:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7792:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
7793:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
7794:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
7795:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
7796:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
7797:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
7798:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
7799:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
7800:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
7801:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
7802:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
7803:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7804:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7805:      473,   499,     0,   548,     0,     0,     0,     0,     0,     0,
7806:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7807:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
7808:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
7809:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
7810:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
7811:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
7812:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
7813:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
7814:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
7815:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
7816:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
7817:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
7818:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
7819:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
7820:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
7821:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
7822:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
7823:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
7824:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
7825:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
7826:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
7827:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
7828:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
7829:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
7830:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7831:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
7832:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
7833:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
7834:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
7835:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
7836:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
7837:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
7838:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
7839:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
7840:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7841:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
7842:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
7843:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
7844:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
7845:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
7846:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
7847:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
7848:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
7849:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
7850:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
7851:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7852:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
7853:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7854:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
7855:      555,   101,   102,   103,     0,     0,     0,     0,     0,     0,
7856:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
7857:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
7858:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
7859:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
7860:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
7861:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
7862:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
7863:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
7864:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
7865:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
7866:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
7867:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7868:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
7869:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
7870:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
7871:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
7872:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
7873:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
7874:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
7875:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
7876:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
7877:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7878:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
7879:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
7880:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
7881:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
7882:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7883:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
7884:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
7885:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
7886:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7887:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
7888:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
7889:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
7890:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
7891:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
7892:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
7893:      416,   417,   418,     0,   556,   420,     0,     0,   557,   422,
7894:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
7895:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
7896:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
7897:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
7898:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7899:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7900:      473,   499,     0,   580,     0,     0,     0,     0,     0,     0,
7901:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7902:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
7903:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
7904:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
7905:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
7906:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
7907:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
7908:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
7909:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
7910:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
7911:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
7912:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
7913:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
7914:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
7915:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
7916:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
7917:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
7918:        0,   218,   219,   220,   221,   222,   619,   224,     0,   226,
7919:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
7920:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
7921:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
7922:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
7923:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
7924:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
7925:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7926:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
7927:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
7928:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
7929:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
7930:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
7931:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
7932:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
7933:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
7934:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
7935:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7936:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
7937:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
7938:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
7939:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
7940:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
7941:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
7942:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
7943:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
7944:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
7945:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
7946:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7947:      468,   469,   470,   471,   472,   473,   499,     0,   580,     0,
7948:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7949:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
7950:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
7951:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
7952:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
7953:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
7954:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
7955:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
7956:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
7957:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
7958:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
7959:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
7960:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
7961:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
7962:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7963:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
7964:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
7965:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
7966:      222,   622,   224,     0,   226,   227,   228,   229,     0,   230,
7967:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
7968:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
7969:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
7970:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
7971:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
7972:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7973:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
7974:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
7975:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
7976:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
7977:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7978:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
7979:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
7980:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
7981:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7982:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
7983:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
7984:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
7985:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
7986:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
7987:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
7988:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
7989:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
7990:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
7991:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
7992:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
7993:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7994:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7995:      473,   499,     0,   580,     0,     0,     0,     0,     0,     0,
7996:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
7997:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
7998:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
7999:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8000:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8001:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8002:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8003:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8004:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8005:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8006:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8007:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8008:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8009:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8010:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8011:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8012:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8013:        0,   218,   219,   220,   221,   222,   626,   224,     0,   226,
8014:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8015:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8016:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8017:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8018:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8019:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8020:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8021:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8022:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8023:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8024:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8025:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8026:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8027:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8028:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8029:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8030:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8031:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8032:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8033:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8034:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8035:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
8036:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8037:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8038:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8039:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8040:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8041:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8042:      468,   469,   470,   471,   472,   473,   499,     0,   580,     0,
8043:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8044:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8045:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
8046:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8047:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8048:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8049:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8050:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8051:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8052:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8053:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8054:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8055:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8056:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8057:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8058:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8059:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8060:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8061:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
8062:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8063:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8064:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8065:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8066:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8067:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8068:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8069:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8070:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8071:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8072:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8073:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8074:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8075:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
8076:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8077:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8078:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8079:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
8080:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8081:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8082:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8083:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8084:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8085:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8086:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8087:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8088:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8089:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8090:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
8091:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8092:       96,    97,    98,    99,   100,   654,   101,   102,   103,     0,
8093:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
8094:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8095:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8096:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8097:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8098:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8099:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8100:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8101:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8102:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8103:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8104:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8105:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8106:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8107:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8108:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
8109:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8110:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8111:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8112:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8113:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8114:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8115:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8116:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8117:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8118:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8119:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8120:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8121:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8122:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8123:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8124:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8125:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8126:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8127:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8128:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8129:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8130:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
8131:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8132:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8133:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8134:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8135:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8136:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8137:      468,   469,   470,   471,   472,   473,   499,     0,   580,     0,
8138:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8139:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8140:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
8141:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8142:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8143:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8144:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8145:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8146:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8147:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8148:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8149:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8150:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8151:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8152:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8153:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8154:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8155:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8156:      222,  1148,   224,     0,   226,   227,   228,   229,     0,   230,
8157:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8158:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8159:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8160:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8161:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8162:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8163:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8164:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8165:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8166:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8167:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8168:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8169:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8170:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
8171:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8172:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8173:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8174:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
8175:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8176:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8177:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8178:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8179:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8180:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8181:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8182:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8183:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8184:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8185:      473,   499,     0,   580,     0,     0,     0,     0,     0,     0,
8186:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8187:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
8188:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
8189:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8190:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8191:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8192:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8193:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8194:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8195:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8196:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8197:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8198:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8199:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8200:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8201:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8202:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8203:        0,   218,   219,   220,   221,   222,  1150,   224,     0,   226,
8204:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8205:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8206:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8207:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8208:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8209:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8210:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8211:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8212:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8213:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8214:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8215:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8216:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8217:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8218:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8219:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8220:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8221:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8222:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8223:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8224:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8225:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
8226:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8227:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8228:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8229:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8230:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8231:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8232:      468,   469,   470,   471,   472,   473,   499,     0,   580,     0,
8233:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8234:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8235:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
8236:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8237:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8238:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8239:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8240:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8241:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8242:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8243:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8244:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8245:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8246:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8247:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8248:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8249:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8250:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8251:      222,  1560,   224,     0,   226,   227,   228,   229,     0,   230,
8252:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8253:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8254:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8255:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8256:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8257:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8258:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8259:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8260:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8261:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8262:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8263:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8264:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8265:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
8266:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8267:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8268:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8269:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
8270:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8271:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8272:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8273:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8274:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8275:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8276:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8277:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8278:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8279:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8280:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
8281:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8282:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
8283:        0,     0,     0,     0,  2311,     0,   104,   105,     0,   106,
8284:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8285:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8286:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8287:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8288:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8289:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8290:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8291:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8292:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8293:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8294:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8295:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8296:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8297:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8298:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
8299:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8300:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8301:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8302:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8303:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8304:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8305:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8306:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8307:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8308:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8309:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8310:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8311:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8312:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8313:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8314:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8315:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8316:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8317:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8318:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8319:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8320:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
8321:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8322:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8323:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8324:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8325:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8326:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8327:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
8328:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8329:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8330:        0,   101,   102,   103,     0,     0,     0,     0,     0,  2325,
8331:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8332:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8333:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8334:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8335:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8336:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8337:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8338:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8339:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8340:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8341:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8342:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8343:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8344:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8345:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8346:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
8347:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8348:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8349:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8350:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8351:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8352:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8353:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8354:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8355:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8356:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8357:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8358:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8359:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8360:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
8361:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8362:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8363:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8364:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
8365:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8366:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8367:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8368:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8369:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8370:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8371:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8372:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8373:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8374:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8375:      473,   499,     0,   580,     0,     0,     0,     0,     0,     0,
8376:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8377:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
8378:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
8379:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8380:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8381:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8382:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8383:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8384:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8385:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8386:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8387:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8388:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8389:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8390:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8391:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8392:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8393:        0,   218,   219,   220,   221,   222,  2459,   224,     0,   226,
8394:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8395:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8396:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8397:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8398:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8399:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8400:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8401:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8402:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8403:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8404:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8405:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8406:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8407:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8408:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8409:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8410:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8411:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8412:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8413:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8414:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8415:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
8416:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8417:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8418:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8419:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8420:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8421:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8422:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
8423:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8424:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8425:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
8426:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8427:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8428:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8429:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8430:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8431:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8432:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8433:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8434:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8435:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8436:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8437:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8438:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8439:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8440:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8441:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
8442:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8443:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8444:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8445:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8446:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8447:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8448:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8449:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8450:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8451:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8452:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8453:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8454:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8455:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
8456:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8457:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8458:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8459:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
8460:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8461:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8462:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8463:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8464:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8465:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8466:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8467:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8468:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8469:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8470:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
8471:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8472:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
8473:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
8474:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8475:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8476:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8477:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8478:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8479:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8480:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8481:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8482:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8483:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8484:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8485:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8486:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8487:      210,   211,     0,   567,     0,   214,     0,   215,   216,   217,
8488:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
8489:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8490:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8491:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8492:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8493:        0,   261,   262,   568,     0,     0,   264,   265,   266,   267,
8494:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8495:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8496:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8497:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8498:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8499:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8500:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8501:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8502:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8503:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8504:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8505:      366,   367,   368,   369,   370,   371,   372,   569,   374,   375,
8506:      376,   377,   378,   379,     0,   380,   381,   382,   383,   570,
8507:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8508:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8509:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8510:        0,   412,     0,   414,   415,   416,   417,   418,     0,   571,
8511:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8512:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8513:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8514:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8515:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8516:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8517:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
8518:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8519:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8520:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
8521:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8522:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8523:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8524:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8525:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8526:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8527:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8528:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8529:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8530:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8531:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8532:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8533:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8534:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8535:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8536:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
8537:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8538:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8539:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8540:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8541:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8542:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8543:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8544:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8545:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8546:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8547:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8548:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8549:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8550:      343,   344,   345,   346,   590,   348,     0,   349,   350,   351,
8551:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8552:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8553:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8554:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
8555:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8556:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8557:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8558:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8559:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8560:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8561:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8562:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8563:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8564:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8565:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
8566:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8567:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
8568:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
8569:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8570:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8571:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8572:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8573:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8574:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8575:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8576:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8577:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8578:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8579:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8580:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8581:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8582:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8583:        0,   218,   219,   220,   221,   222,   644,   224,     0,   226,
8584:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8585:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8586:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8587:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8588:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8589:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8590:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8591:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8592:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8593:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8594:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8595:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8596:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8597:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8598:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8599:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8600:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8601:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8602:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8603:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8604:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8605:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
8606:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8607:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8608:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8609:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8610:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8611:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8612:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
8613:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8614:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8615:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
8616:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8617:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8618:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8619:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8620:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8621:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8622:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8623:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8624:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8625:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8626:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8627:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8628:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8629:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8630:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8631:      222,   731,   224,     0,   226,   227,   228,   229,     0,   230,
8632:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8633:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8634:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8635:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8636:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8637:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8638:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8639:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8640:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8641:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8642:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8643:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8644:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8645:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
8646:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8647:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8648:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8649:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
8650:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8651:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8652:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8653:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8654:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8655:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8656:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8657:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8658:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8659:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8660:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
8661:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8662:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
8663:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
8664:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8665:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8666:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8667:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8668:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8669:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8670:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8671:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8672:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8673:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8674:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8675:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8676:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8677:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8678:        0,   218,   219,   220,   221,   222,   734,   224,     0,   226,
8679:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8680:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8681:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8682:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8683:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8684:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8685:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8686:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8687:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8688:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8689:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8690:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8691:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8692:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8693:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8694:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8695:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8696:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8697:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8698:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8699:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8700:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
8701:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8702:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8703:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8704:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8705:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8706:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8707:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
8708:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8709:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8710:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
8711:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8712:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8713:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8714:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8715:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8716:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8717:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8718:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8719:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8720:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8721:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8722:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8723:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8724:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8725:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8726:      222,   737,   224,     0,   226,   227,   228,   229,     0,   230,
8727:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8728:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8729:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8730:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8731:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8732:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8733:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8734:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8735:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8736:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8737:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8738:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8739:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8740:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
8741:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8742:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8743:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8744:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
8745:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8746:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8747:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8748:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8749:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8750:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8751:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8752:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8753:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8754:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8755:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
8756:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8757:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
8758:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
8759:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8760:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8761:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8762:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8763:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8764:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8765:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8766:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8767:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8768:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8769:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8770:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8771:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8772:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8773:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
8774:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8775:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8776:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8777:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8778:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8779:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8780:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8781:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8782:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8783:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8784:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8785:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8786:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8787:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8788:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8789:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8790:      366,   367,   368,   369,   370,   371,   372,   569,   374,   375,
8791:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8792:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8793:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8794:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8795:        0,   412,     0,   414,   415,   416,   417,   418,     0,   571,
8796:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8797:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8798:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8799:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8800:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8801:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8802:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
8803:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8804:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8805:        0,   101,   102,   103,     0,     0,     0,     0,     0,  1384,
8806:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8807:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8808:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8809:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8810:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8811:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8812:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8813:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8814:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8815:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8816:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8817:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8818:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8819:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8820:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8821:      222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
8822:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8823:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8824:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8825:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8826:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8827:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8828:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8829:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8830:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8831:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8832:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8833:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8834:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8835:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
8836:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8837:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8838:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8839:      380,   381,   382,   383,   384,     0,     0,   386,   387,   388,
8840:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8841:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8842:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8843:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8844:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8845:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8846:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8847:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8848:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8849:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8850:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
8851:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8852:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
8853:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
8854:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8855:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8856:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8857:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8858:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8859:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8860:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8861:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8862:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8863:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8864:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8865:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8866:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8867:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8868:        0,   218,   219,   220,   221,   222,  1525,   224,     0,   226,
8869:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8870:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8871:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8872:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8873:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8874:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8875:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8876:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8877:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8878:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8879:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8880:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8881:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8882:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8883:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8884:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8885:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8886:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8887:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8888:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8889:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8890:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
8891:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8892:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8893:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8894:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8895:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8896:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8897:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
8898:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8899:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8900:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
8901:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8902:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8903:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8904:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
8905:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
8906:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
8907:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
8908:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
8909:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
8910:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
8911:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
8912:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8913:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
8914:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
8915:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
8916:      222,  1805,   224,     0,   226,   227,   228,   229,     0,   230,
8917:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
8918:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
8919:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
8920:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
8921:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
8922:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8923:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
8924:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
8925:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
8926:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
8927:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8928:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
8929:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
8930:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
8931:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8932:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
8933:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
8934:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
8935:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
8936:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
8937:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
8938:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
8939:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
8940:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
8941:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
8942:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
8943:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8944:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8945:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
8946:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
8947:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
8948:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
8949:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
8950:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
8951:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
8952:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
8953:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
8954:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
8955:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
8956:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
8957:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
8958:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
8959:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
8960:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
8961:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
8962:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
8963:        0,   218,   219,   220,   221,   222,  1817,   224,     0,   226,
8964:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
8965:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
8966:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
8967:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
8968:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
8969:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
8970:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8971:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
8972:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
8973:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
8974:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
8975:      321,   322,   323,   324,   325,     0,   326,   327,   328,   329,
8976:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
8977:      339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
8978:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
8979:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
8980:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8981:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
8982:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
8983:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
8984:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
8985:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
8986:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
8987:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
8988:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
8989:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
8990:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
8991:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8992:      468,   469,   470,   471,   472,   473,   499,     0,     0,     0,
8993:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8994:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
8995:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
8996:        0,   104,   105,     0,   106,   107,   108,     0,   110,   111,
8997:      112,   113,   114,     0,   116,   117,     0,   118,   119,   120,
8998:      121,   122,   123,     0,     0,   124,   125,   126,   127,   128,
8999:        0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
9000:      136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
9001:      145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
9002:      154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
9003:      158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
9004:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
9005:      175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
9006:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
9007:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
9008:        0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
9009:      206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
9010:      214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
9011:      222,  1819,   224,     0,   226,   227,   228,   229,     0,   230,
9012:      231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
9013:      240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
9014:        0,     0,   250,     0,   252,   253,   254,   255,   256,     0,
9015:        0,   257,     0,   259,     0,     0,   261,   262,   263,     0,
9016:        0,   264,   265,   266,   267,   268,   501,   270,   271,   272,
9017:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
9018:      283,   284,   285,   286,   287,   288,     0,   290,   291,   292,
9019:      293,   294,     0,   295,   296,     0,   298,     0,   299,   300,
9020:      301,   302,   303,   304,     0,   305,   306,     0,     0,   307,
9021:      308,   309,     0,     0,   310,   311,     0,   313,     0,   315,
9022:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
9023:        0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
9024:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
9025:      343,   344,   345,   346,   347,   348,     0,   349,   350,   351,
9026:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
9027:        0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
9028:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
9029:      380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
9030:      389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
9031:      398,   399,   400,   401,   402,   403,   404,   405,   503,   407,
9032:      408,   409,     0,   410,   411,     0,   412,     0,   414,   415,
9033:      416,   417,   418,     0,   419,   420,     0,     0,   421,   422,
9034:      423,   424,   425,     0,   426,   427,   428,   429,   430,   431,
9035:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
9036:        0,   439,   440,   441,   442,   443,   444,   445,     0,   446,
9037:        0,   448,   449,   450,   451,     0,     0,   452,     0,     0,
9038:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
9039:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
9040:      473,   499,     0,     0,     0,     0,     0,     0,     0,     0,
9041:        0,     0,     0,     0,     0,     0,     0,    93,    94,    95,
9042:       96,    97,    98,    99,   100,     0,   101,   102,   103,     0,
9043:        0,     0,     0,     0,     0,     0,   104,   105,     0,   106,
9044:      107,   108,     0,   110,   111,   112,   113,   114,     0,   116,
9045:      117,     0,   118,   119,   120,   121,   122,   123,     0,     0,
9046:      124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
9047:      133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
9048:        0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
9049:      150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
9050:        0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
9051:      163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
9052:      171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
9053:      178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
9054:      186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
9055:      195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
9056:      203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
9057:      210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
9058:        0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
9059:      227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
9060:        0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
9061:      245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
9062:      253,   254,   255,   256,     0,     0,   257,     0,   259,     0,
9063:        0,   261,   262,   263,     0,     0,   264,   265,   266,   267,
9064:      268,   501,   270,   271,   272,   273,   274,   275,   276,   277,
9065:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
9066:      288,     0,   290,   291,   292,   293,   294,     0,   295,   296,
9067:        0,   298,     0,   299,   300,   301,   302,   303,   304,     0,
9068:      305,   306,     0,     0,   307,   308,   309,     0,     0,   310,
9069:      311,     0,   313,     0,   315,   316,   317,   318,   319,   320,
9070:      321,     0,   323,   324,   325,     0,   326,   327,   328,   329,
9071:      330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
9072:      339,   340,     0,   341,     0,   343,   344,   345,   346,   347,
9073:      348,     0,   349,   350,   351,   352,   353,   354,   355,   356,
9074:      357,   358,   359,   360,   361,     0,   362,   363,     0,   365,
9075:      366,   367,   368,     0,   370,   371,   372,   373,   374,   375,
9076:      376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
9077:        0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
9078:      394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
9079:      403,   404,   405,   503,   407,   408,   409,     0,   410,   411,
9080:        0,   412,     0,   414,   415,   416,   417,   418,     0,   419,
9081:      420,     0,     0,   421,   422,   423,   424,   425,     0,   426,
9082:      427,   428,   429,   430,   431,   432,   433,     0,     0,   434,
9083:      435,   436,   437,   438,     0,     0,   439,   440,   441,   442,
9084:      443,   444,   445,     0,   446,     0,   448,   449,   450,   451,
9085:        0,     0,   452,     0,     0,   453,   454,   455,   456,   457,
9086:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
9087:      468,   469,   470,   471,   472,   473,   662,     0,     0,     0,
9088:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
9089:        0,     0,    93,    94,    95,    96,    97,    98,    99,   100,
9090:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
9091:        0,   104,   105,     0,   106,   107,   108,   663,   110,   111,
9092:      112,     0,   664,   665,   666,   667,     0,   118,   119,   120,
9093:      121,   122,   123,     0,     0,   124,   125,   668,   669,   128,
9094:        0,   129,   130,   131,   132,     0,     0,   670,     0,   135,
9095:      136,   137,   138,   139,   140,   671,   142,   143,   144,     0,
9096:      145,   146,   147,   148,   149,   150,     0,   672,   152,   153,
9097:      154,     0,     0,     0,   673,     0,     0,     0,   156,   157,
9098:      158,   159,   160,   161,   162,   674,   675,   165,     0,   166,
9099:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
9100:      175,   176,   177,     0,     0,   178,   179,   676,   181,   182,
9101:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
9102:      190,   191,   192,     0,   194,   195,   196,   197,   198,     0,
9103:        0,   200,     0,   201,   202,   677,   204,     0,   205,     0,
9104:      206,   678,     0,   679,   209,   210,   211,   680,   213,     0,
9105:      214,     0,     0,     0,   217,     0,   218,   219,   220,   221,
9106:      222,   681,   224,   682,   226,   227,   228,   229,     0,   230,
9107:      231,   232,   233,   234,   235,     0,   236,   683,     0,   239,
9108:      240,   241,   242,   243,   684,   685,     0,   686,     0,   247,
9109:      687,   688,   250,   689,   252,   253,   254,   255,   256,     0,
9110:        0,   257,   690,   259,   691,     0,   261,   262,   263,     0,
9111:        0,   264,   265,   266,   267,   268,   692,   270,   271,   272,
9112:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
9113:      283,   284,   285,   286,   287,   693,   694,   695,   291,   292,
9114:      293,     0,     0,   295,   296,   696,   298,     0,     0,   300,
9115:      697,   302,   303,   304,     0,   305,   306,     0,     0,   307,
9116:      308,   309,     0,     0,   310,     0,   698,   313,   699,     0,
9117:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
9118:        0,   326,   327,     0,   329,   330,     0,   332,   333,   334,
9119:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
9120:      343,   700,   345,   346,   347,   348,     0,   349,   350,   351,
9121:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
9122:        0,   362,   363,   701,   365,   366,   367,   702,   369,   370,
9123:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
9124:      380,   381,   382,   383,   384,     0,   385,   703,   387,   388,
9125:      389,   704,   391,   392,   705,   394,     0,   395,   396,   397,
9126:      398,   399,   400,   401,   402,   403,   404,   405,   706,   407,
9127:        0,   409,     0,   410,   411,     0,   412,   707,   414,   415,
9128:      416,   417,   418,     0,   708,   709,     0,     0,   421,   422,
9129:        0,   424,     0,     0,   426,   427,   710,   429,   430,   431,
9130:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
9131:        0,   439,   440,   441,   442,   443,     0,   711,     0,   446,
9132:      712,   448,   449,   450,   451,     0,     0,   452,     0,     0,
9133:      453,   454,   455,   456,   457,   458,   662,     0,     0,     0,
9134:        0,     0,     0,     0,     0,     0,     0,   470,   471,   472,
9135:      473,     0,    93,    94,    95,    96,    97,    98,    99,   100,
9136:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
9137:        0,   104,   105,     0,   106,   107,   108,   663,   110,   111,
9138:      112,     0,   664,   665,   666,   667,     0,   118,   119,   120,
9139:      121,   122,   123,     0,     0,   124,   125,   668,   669,   128,
9140:        0,   129,   130,   131,   132,     0,     0,   670,     0,   135,
9141:      136,   137,   138,   139,   140,   671,   142,   143,   144,     0,
9142:      145,   146,   147,   148,   149,   150,     0,   672,   152,   153,
9143:      154,     0,     0,     0,   673,     0,     0,     0,   156,   157,
9144:      158,   159,   160,   161,   162,   674,   675,   165,     0,   166,
9145:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
9146:      175,   176,   177,     0,     0,   178,   179,   676,   181,   182,
9147:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
9148:      190,   191,   192,     0,   194,   195,   196,   197,   198,     0,
9149:        0,   200,     0,   201,   202,   677,   204,     0,   205,     0,
9150:      206,   678,     0,   679,   209,   210,   211,   680,   213,     0,
9151:      214,     0,     0,     0,   217,     0,   218,   219,   220,   221,
9152:      222,   223,   224,   682,   226,   227,   228,   229,     0,   230,
9153:      231,   232,   233,   234,   235,     0,   236,   683,     0,   239,
9154:      240,   241,   242,   243,   684,   685,     0,   686,     0,   247,
9155:      687,   688,   250,   689,   252,   253,   254,   255,   256,     0,
9156:        0,   257,   690,   259,   691,     0,   261,   262,   263,     0,
9157:        0,   264,   265,   266,   267,   268,   692,   270,   271,   272,
9158:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
9159:      283,   284,   285,   286,   287,   693,   694,   695,   291,   292,
9160:      293,     0,     0,   295,   296,   696,   298,     0,     0,   300,
9161:      697,   302,   303,   304,     0,   305,   306,     0,     0,   307,
9162:      308,   309,     0,     0,   310,     0,   698,   313,   699,     0,
9163:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
9164:        0,   326,   327,     0,   329,   330,     0,   332,   333,   334,
9165:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
9166:      343,   700,   345,   346,   347,   348,     0,   349,   350,   351,
9167:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
9168:        0,   362,   363,   701,   365,   366,   367,   702,   369,   370,
9169:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
9170:      380,   381,   382,   383,   384,     0,   385,   703,   387,   388,
9171:      389,   704,   391,   392,   705,   394,     0,   395,   396,   397,
9172:      398,   399,   400,   401,   402,   403,   404,   405,   706,   407,
9173:        0,   409,     0,   410,   411,     0,   412,   707,   414,   415,
9174:      416,   417,   418,     0,   708,   709,     0,     0,   421,   422,
9175:        0,   424,     0,     0,   426,   427,   710,   429,   430,   431,
9176:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
9177:        0,   439,   440,   441,   442,   443,     0,   711,     0,   446,
9178:      712,   448,   449,   450,   451,     0,     0,   452,     0,     0,
9179:      453,   454,   455,   456,   457,   458,  2397,     0,     0,     0,
9180:        0,     0,     0,     0,     0,     0,     0,   470,   471,   472,
9181:      473,     0,    93,    94,    95,    96,    97,    98,    99,   100,
9182:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
9183:        0,   104,   105,     0,   106,   107,   108,  2398,   110,   111,
9184:      112,     0,   664,  2399,   666,   667,     0,   118,   119,   120,
9185:      121,   122,   123,     0,     0,   124,   125,   668,   669,   128,
9186:        0,   129,   130,   131,   132,     0,     0,  2400,     0,   135,
9187:      136,   137,   138,   139,   140,  2401,   142,   143,   144,     0,
9188:      145,   146,   147,   148,   149,   150,     0,  2402,   152,   153,
9189:      154,     0,     0,     0,  2403,     0,     0,     0,   156,   157,
9190:      158,   159,   160,   161,   162,   674,   675,   165,     0,   166,
9191:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
9192:      175,   176,   177,     0,     0,   178,   179,   676,   181,   182,
9193:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
9194:      190,   191,   192,     0,   194,   195,   196,   197,   198,     0,
9195:        0,   200,     0,   201,   202,   677,   204,     0,   205,     0,
9196:      206,  2404,     0,  2405,   209,   210,   211,  2406,   213,     0,
9197:      214,     0,     0,     0,   217,     0,   218,   219,   220,   221,
9198:      222,   223,   224,  2407,   226,   227,   228,   229,     0,   230,
9199:      231,   232,   233,   234,   235,     0,   236,  2408,     0,   239,
9200:      240,   241,   242,   243,   684,   685,     0,   686,     0,   247,
9201:     2409,  2410,   250,  2411,   252,   253,   254,   255,   256,     0,
9202:        0,   257,  2412,   259,  2413,     0,   261,   262,   263,     0,
9203:        0,   264,   265,   266,   267,   268,  2608,   270,   271,   272,
9204:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
9205:      283,   284,   285,   286,   287,   693,  2415,   695,   291,   292,
9206:      293,     0,     0,   295,   296,  2417,   298,     0,     0,   300,
9207:      697,   302,   303,   304,     0,   305,   306,     0,     0,   307,
9208:      308,   309,     0,     0,   310,     0,  2419,   313,  2420,     0,
9209:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
9210:        0,   326,   327,     0,   329,   330,     0,   332,   333,   334,
9211:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
9212:      343,   700,   345,   346,   347,   348,     0,   349,   350,   351,
9213:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
9214:        0,   362,   363,  2421,   365,   366,   367,     0,   369,   370,
9215:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
9216:      380,   381,   382,   383,   384,     0,   385,     0,   387,   388,
9217:      389,  2423,   391,   392,   705,   394,     0,   395,   396,   397,
9218:      398,   399,   400,   401,   402,   403,   404,   405,  2609,   407,
9219:        0,   409,     0,   410,   411,     0,   412,  2425,   414,   415,
9220:      416,   417,   418,     0,   708,   709,     0,     0,   421,   422,
9221:        0,   424,     0,     0,   426,   427,  2426,   429,   430,   431,
9222:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
9223:        0,   439,   440,   441,   442,   443,     0,   711,     0,   446,
9224:     2427,   448,   449,   450,   451,     0,     0,   452,     0,     0,
9225:      453,   454,   455,   456,   457,   458,   662,     0,     0,     0,
9226:        0,     0,     0,     0,     0,     0,     0,   470,   471,   472,
9227:      473,     0,    93,    94,    95,    96,    97,    98,    99,   100,
9228:        0,   101,   102,   103,     0,     0,     0,     0,     0,     0,
9229:        0,   104,   105,     0,   106,   107,   108,   663,   110,   111,
9230:      112,     0,   664,   665,   666,   667,     0,   118,   119,   120,
9231:      121,   122,   123,     0,     0,   124,   125,   668,   669,   128,
9232:        0,   129,   130,   131,   132,     0,     0,   670,     0,   135,
9233:      136,   137,   138,   139,   140,   671,   142,   143,   144,     0,
9234:      145,   146,   147,   148,   149,   150,     0,   672,   152,   153,
9235:      154,     0,     0,     0,   673,     0,     0,     0,   156,   157,
9236:      158,   159,   160,   161,   162,   674,   675,   165,     0,   166,
9237:        0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
9238:      175,   176,   177,     0,     0,   178,   179,   676,   181,   182,
9239:        0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
9240:      190,   191,   192,     0,   194,   195,   196,   197,   198,     0,
9241:        0,   200,     0,   201,   202,   677,   204,     0,   205,     0,
9242:      206,   678,     0,   679,   209,   210,   211,   680,   213,     0,
9243:      214,     0,     0,     0,   217,     0,   218,   219,   220,   221,
9244:      222,   223,   224,   682,   226,   227,   228,   229,     0,   230,
9245:      231,   232,   233,   234,   235,     0,   236,   683,     0,   239,
9246:      240,   241,   242,   243,   684,   685,     0,   686,     0,   247,
9247:      687,   688,   250,   689,   252,   253,   254,   255,   256,     0,
9248:        0,   257,   690,   259,   691,     0,   261,   262,   263,     0,
9249:        0,   264,   265,   266,   267,   268,     0,   270,   271,   272,
9250:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
9251:      283,   284,   285,   286,   287,   693,   694,   695,   291,   292,
9252:      293,     0,     0,   295,   296,   696,   298,     0,     0,   300,
9253:      697,   302,   303,   304,     0,   305,   306,     0,     0,   307,
9254:      308,   309,     0,     0,   310,     0,   698,   313,   699,     0,
9255:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
9256:        0,   326,   327,     0,   329,   330,     0,   332,   333,   334,
9257:        0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
9258:      343,   700,   345,   346,   347,   348,     0,   349,   350,   351,
9259:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
9260:        0,   362,   363,   701,   365,   366,   367,     0,   369,   370,
9261:      371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
9262:      380,   381,   382,   383,   384,     0,   385,     0,   387,   388,
9263:      389,   704,   391,   392,   705,   394,     0,   395,   396,   397,
9264:      398,   399,   400,   401,   402,   403,   404,   405,     0,   407,
9265:        0,   409,     0,   410,   411,     0,   412,   707,   414,   415,
9266:      416,   417,   418,     0,   708,   709,     0,     0,   421,   422,
9267:        0,   424,     0,     0,   426,   427,   710,   429,   430,   431,
9268:      432,   433,     0,     0,   434,   435,   436,   437,   438,     0,
9269:        0,   439,   440,   441,   442,   443,     0,   711,     0,   446,
9270:      712,   448,   449,   450,   451,     0,     0,   452,     0,     0,
9271:      453,   454,   455,   456,   457,   458,     0,     0,     0,     0,
9272:        0,     0,     0,     0,     0,     0,     0,   470,   471,   472,
9273:      473
9274: };
9275: 
9276: static const yytype_int16 yycheck[] =
9277: {
9278:        6,    36,   623,   493,   530,   638,     6,   609,     0,   536,
9279:     1000,   566,   800,    59,   800,   732,   973,   998,   735,   703,
9280:      584,     0,  1174,     0,   880,   630,  1741,     0,    16,   589,
9281:        0,     6,   709,  1277,  1390,  1815,  1143,  1393,    30,   529,
9282:      534,   527,  1769,    16,   978,  1772,  1143,  1821,  1230,  1823,
9283:       31,  1143,   882,  1143,  1179,  2182,   623,  1039,   625,  1697,
9284:      627,   975,  2155,   969,   535,    61,  2155,   536,   898,  2183,
9285:        0,  1761,    35,  1737,  1306,  1307,    21,  2201,  2063,    11,
9286:      910,  1859,  1860,  1861,  1258,  2194,   632,    79,  1752,  1003,
9287:      668,   669,    61,  2015,     9,  1812,     0,     5,   808,     0,
9288:       58,    58,    50,    13,    14,    73,   800,    58,    89,    41,
9289:     1359,    11,  1409,   807,     5,  1144,     0,   695,  2069,     5,
9290:     1411,  2468,   541,     5,   606,   149,    67,    13,    14,     5,
9291:      918,    13,    14,   606,  2471,     4,   169,    13,    14,   117,
9292:        9,    73,     5,    40,    23,     5,     5,     5,     5,   643,
9293:        9,     5,     9,    13,    14,    13,    14,     5,     5,     5,
9294:        5,     5,  2521,     5,     5,     5,    27,     5,     5,  1886,
9295:       40,   170,     5,    34,   107,    27,    27,   137,  2612,   739,
9296:       75,  1272,    34,    34,  2454,    20,    21,    15,    11,    93,
9297:      867,    86,    93,     9,     3,     3,     4,     5,  2557,   987,
9298:      894,     9,   990,   991,   215,   169,   282,     4,  2068,    93,
9299:       83,  2003,     9,  1279,   170,  2094,   284,    11,  2643,    75,
9300:      122,   290,    31,    32,   918,   166,   920,   921,  2384,    58,
9301:       86,   290,  1272,   375,  1951,  1952,   221,  2436,   270,   120,
9302:      117,   145,   120,  2707,   241,  2746,   120,    41,    11,   827,
9303:      828,   306,   107,  2814,   127,   159,   135,   135,   306,   273,
9304:      164,    59,   189,    68,   130,   169,   221,    27,    27,    67,
9305:     2566,    13,    14,   800,   178,   853,   161,    11,   182,    73,
9306:      807,    37,   267,   489,  2643,  2126,    11,   437,   115,  2939,
9307:      496,  2587,  2629,   987,    11,   458,   990,   991,  2076,   415,
9308:      355,  1011,   986,   115,   147,   453,   489,   115,  1018,   213,
9309:      437,   117,   267,   496,   118,   458,    41,   480,   878,   883,
9310:       64,    65,   483,   159,    41,   202,   345,   208,   232,  2422,
9311:     2315,  1397,   803,   494,  2319,  2985,  1974,   480,  2465,    73,
9312:      225,  2842,   366,   459,   494,  2125,   302,   911,    73,  2463,
9313:      498,   494,   494,   196,   373,  2306,    73,  2918,   456,   168,
9314:      354,   170,   359,  1272,     4,  2206,   380,   494,   124,     9,
9315:      130,   130,   327,   937,  1976,   187,   317,   281,   402,   925,
9316:      284,  2108,   480,   284,   108,   118,   290,   191,   346,   346,
9317:      267,   376,   269,   920,   921,   346,   232,  2061,  2745,  2063,
9318:      284,  1272,  2004,   435,   209,  2122,   214,  2124,   968,   288,
9319:     2874,  2610,   267,   279,   940,   106,  2775,   344,   494,   443,
9320:      324,   376,   164,   379,     0,  2581,   494,   235,   301,   498,
9321:      169,  2727,   456,  2543,   489,  2936,   433,   235,   316,   498,
9322:       16,   489,  1044,   347,  1154,  2305,   347,   274,  2240,   413,
9323:      435,  2885,  2811,  1697,    30,    93,   480,   269,   191,  1550,
9324:       36,   439,    58,   347,   343,   498,   345,   295,   274,   402,
9325:      494,   108,  2742,  2352,  1431,    23,  2901,  1171,     4,  1776,
9326:      435,    29,  1511,     9,   966,    61,  1777,   498,  1182,   430,
9327:     1184,   483,   452,   966,   373,   494,  2843,   494,   402,  1193,
9328:      494,   536,   399,    79,   483,  1487,   483,  2844,  2225,  1549,
9329:      483,  1743,  2621,   483,  1763,   934,  1210,   346,   413,  2612,
9330:     1153,   527,   383,  2612,   492,   429,  1516,  1771,   496,   399,
9331:      536,   383,   383,   437,   407,   437,   390,   391,   446,  1144,
9332:      498,   498,  2901,  1237,  1238,  2530,   494,   498,   536,   453,
9333:     2535,   455,   456,  2538,   435,   456,   247,   413,   490,   565,
9334:      566,   435,   535,   609,   255,  1732,  1733,   458,  1634,  1635,
9335:     2680,  2522,   456,  1639,  2496,  1269,  1270,  1751,   493,  1273,
9336:     1274,  2361,   578,   589,   494,   494,   494,   135,   492,   480,
9337:      490,   495,   496,   497,   495,   161,   497,  1175,  1176,   587,
9338:     2374,   546,   495,   494,  1586,   498,   598,  1167,   494,   578,
9339:      458,   495,   494,   497,  1680,  1681,   485,   486,   494,   598,
9340:      601,   598,   628,   629,   630,   598,  2750,   590,   598,   492,
9341:     2744,   494,   480,   496,   494,   494,   494,   494,   447,     0,
9342:     2749,  1550,  1551,  1248,  1354,   498,   494,   494,   494,   494,
9343:      494,  2315,   494,   494,   494,  2319,   494,   494,   115,   456,
9344:     2350,   494,   485,   486,   487,   488,   489,   490,   598,   485,
9345:      486,   267,  1460,   497,   413,  2453,   159,   485,   486,  1550,
9346:     1551,  1552,  1470,   480,   149,  1473,   241,  1173,   485,   486,
9347:     2675,   485,   486,   487,   488,   489,   490,   703,  1224,     4,
9348:      266,  1261,  1188,  1263,     9,  1232,  1888,  1267,    48,   544,
9349:     1315,   546,   547,   145,  1408,  1409,  1262,    30,  2356,   331,
9350:     1280,  1281,   494,  1283,   487,   488,   489,   490,   366,  1293,
9351:     1974,  1221,  1222,   739,   569,  2849,   527,   447,  1228,  2456,
9352:      288,    54,   241,  1303,   483,  2855,   331,   341,    23,   232,
9353:      346,   130,  1357,   163,    29,  1301,  1302,   496,    31,    32,
9354:     1231,   175,   483,  1232,   402,   492,  1460,   175,  2895,   496,
9355:      487,   488,   489,   490,    24,   496,  1470,   373,   157,  1473,
9356:       30,   213,   367,  1571,   198,  1571,   495,  1912,  2568,   498,
9357:      402,  2023,  2885,  1918,   800,   343,  2885,   130,   281,    67,
9358:     1346,   807,   808,   809,   359,   443,   198,  1663,    23,   492,
9359:     1356,   401,  1358,   496,    29,  1532,   418,   402,   456,   825,
9360:       93,   235,   241,   331,  1310,   373,   248,   235,  1318,    79,
9361:      803,  1661,    13,    14,   174,  1456,  1553,   449,  1555,  1745,
9362:      297,  1558,   480,  1448,   879,   675,   436,   115,   854,  1839,
9363:      190,  1545,  1546,  2967,    75,   195,   494,  2521,   290,   367,
9364:      135,   366,  1429,   198,   449,    86,  2530,   697,   874,   875,
9365:      876,  2535,   878,   879,  2538,   289,   495,  1571,   433,   498,
9366:     1862,  1483,  1484,  1485,  2036,  2052,  2053,  2054,  2055,  1456,
9367:     1584,   231,   440,  2557,   402,   274,   902,   402,   728,    75,
9368:      279,   366,   312,    13,    14,   173,  1511,   483,  1475,   366,
9369:       86,  2155,   703,  1480,   920,   921,  1982,  1983,  1984,  1985,
9370:      135,   326,  1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,
9371:     1996,  1997,  2712,  1847,   433,  1765,   269,   402,   443,   494,
9372:      359,   449,   449,  2717,   241,   402,   279,   953,   269,   362,
9373:      355,   957,   958,   274,  1440,   951,   952,   494,   954,   535,
9374:      536,     5,   968,  1897,   945,   800,   130,    23,  1902,  1529,
9375:       13,    14,   807,    29,  2040,  2041,  1466,   494,   443,  2643,
9376:      986,  1471,   951,   952,    11,   954,   443,  2324,    15,   494,
9377:     2327,   456,   406,   157,   408,   494,    23,   429,   406,   456,
9378:      408,   269,   578,   477,   325,  1011,   274,    34,    35,   839,
9379:     1504,  2675,  1018,   288,   433,   480,   430,   495,   809,   433,
9380:      498,  1002,   598,   480,   359,   433,   492,   857,   494,   494,
9381:      496,     5,   367,  1039,     8,   219,  2218,   494,   378,   241,
9382:       14,   420,   241,   495,  1571,    94,   498,   496,  1742,   317,
9383:      885,    25,   431,   253,   254,    29,    27,  1584,  1544,   894,
9384:       87,   406,   359,   408,   339,   333,   159,   402,   343,   159,
9385:      284,   164,   907,   288,   164,   494,   406,  2184,   408,   135,
9386:      477,  1775,  1776,   918,   170,   920,   921,  2184,  1648,  1649,
9387:     1650,  1651,  2184,   366,  2184,  2810,   487,  1648,   373,  1650,
9388:     1651,  1818,  1588,  1820,   458,   269,   495,    78,   168,   498,
9389:      274,  2775,  2356,  1576,   449,   279,    87,  1580,   204,  1582,
9390:      495,   170,   498,   498,   339,  1685,   480,   918,   343,   402,
9391:     1656,  2283,   495,    94,   220,   498,   433,  1739,  1144,   232,
9392:      494,     8,   232,   229,    11,   116,  2136,  2811,  1154,    16,
9393:       17,    18,    13,    14,  2135,   204,  1942,   359,   373,   495,
9394:      359,  1167,   430,   363,   364,   440,  2123,  1173,  1174,   437,
9395:      443,   220,   567,   568,   447,   570,     4,  2957,   185,   186,
9396:      229,     9,  1188,   456,    13,    14,   495,  2902,   281,   498,
9397:      494,   281,  2919,  2920,   495,   986,  2177,   494,    13,    14,
9398:     2134,    36,  2136,   169,    67,   495,  2921,   480,   498,   170,
9399:       73,   498,   495,   500,   263,   498,   187,    13,    14,  1913,
9400:       55,   494,   456,    86,   458,   440,  1232,   803,   199,   215,
9401:      495,   433,   288,   498,   433,   495,    54,  2901,   498,  1916,
9402:     1917,   494,  1248,   204,  1232,   477,   253,   254,  1881,  2976,
9403:      297,   406,   115,   408,   117,  1261,   420,  1263,  1231,   220,
9404:     1266,  1267,  2092,   219,   350,   841,  1258,   431,   229,  2984,
9405:     1276,   106,  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1258,
9406:      406,  1258,   408,   339,   150,  1258,   495,   343,  1258,   498,
9407:      495,   495,   494,   498,   498,   494,   603,  1303,   605,  1305,
9408:      339,   350,   263,   879,  1310,  1311,  1312,  1313,  1314,  1315,
9409:      173,   150,   495,  1319,  1320,   498,   150,   373,  1324,   366,
9410:      150,   495,  1328,   284,   498,  1331,  1332,  1333,  1334,  1335,
9411:     1336,  1337,  1338,  1339,   495,  1940,  1342,   498,   495,   202,
9412:     2492,  1347,   495,   494,  1350,   498,  1352,  2320,  1354,  2322,
9413:      217,  1357,    23,    13,    14,   402,   363,   364,    29,   496,
9414:      495,   495,   197,   498,   498,   269,   495,  2155,  2612,   498,
9415:      495,  1377,   449,   498,   495,   951,   952,   498,   954,    13,
9416:       14,   494,  1173,  1174,   440,     8,  1374,    36,    11,   350,
9417:     1382,  1397,    82,    16,    17,    18,   443,  1188,   495,   460,
9418:     2390,   498,  1408,  1409,   495,  2362,   269,   498,   446,   456,
9419:     1896,   274,   247,   495,   494,  1942,   498,   366,   389,   286,
9420:      255,   392,   313,  2489,   145,   495,   495,   495,   498,   498,
9421:      498,   494,   267,   480,  1440,   150,   495,  1272,   159,   498,
9422:     1446,   495,  1448,   164,   498,  1935,   494,   494,   494,     8,
9423:       35,  2011,    11,   402,   317,  2311,   150,    16,    17,    18,
9424:      494,  2155,   495,   298,   135,   498,    13,    14,   150,  2325,
9425:      333,   150,  2018,   284,    33,   502,   437,  1963,   402,   495,
9426:      494,  1487,   498,    23,  1490,  1491,    36,  1493,   230,    29,
9427:      495,   527,   213,   498,   443,  1981,  2648,   492,   495,   495,
9428:     2217,   498,   498,   495,   531,  1511,   498,   456,     5,  2073,
9429:      345,   232,   495,  2579,   495,   498,   494,   498,  1524,  1310,
9430:     2006,   145,  2878,  1529,  2880,    13,    14,  2013,  1520,  1364,
9431:      495,   480,   367,   498,     5,   159,   495,   494,  1544,   498,
9432:      164,     3,   494,     5,   495,   494,   164,   498,   494,  2154,
9433:      494,  2156,   387,    23,   495,  2101,   494,   498,   495,    29,
9434:      281,   498,   494,   590,   494,  1571,   494,   430,  2170,   290,
9435:      495,     5,   195,   498,   437,     5,   495,   494,  1584,   498,
9436:     1586,  2647,  1588,   495,     5,   495,   498,  1593,   498,   213,
9437:       13,    14,  1598,  2381,   217,   135,   495,  2953,   494,   498,
9438:      495,  1636,     8,   498,   494,    86,   494,    88,   232,    90,
9439:       16,    17,    18,   494,   481,   482,   483,   288,   485,   486,
9440:      487,   488,   489,   490,   495,    13,    14,   498,  1634,  1635,
9441:     1636,    13,    14,  1639,    13,    14,   494,  2618,    13,    14,
9442:      494,  2885,  1648,  1649,  1650,  1651,     5,   109,   110,  1440,
9443:     1685,   494,  1658,    13,    14,  1231,  1662,   281,   217,  1665,
9444:      495,    13,    14,   286,   146,   135,   290,   703,   339,  2155,
9445:       13,    14,   343,   494,  1680,  1681,  2393,  2394,   494,  1685,
9446:       13,    14,  1258,    13,    14,    13,    14,  2381,    13,    14,
9447:      354,   355,  2386,  1699,   257,   258,  1702,  2483,  1704,   354,
9448:      355,   494,   373,     9,   363,   364,   354,   355,   429,   354,
9449:      355,   494,   920,   921,   457,    15,   215,   498,    36,  1725,
9450:       97,  1756,   373,   185,   186,   164,   281,   286,  2214,   164,
9451:      279,  1737,   230,   494,  2428,  2429,  1571,  1737,  2422,   413,
9452:     1575,   494,    86,   498,   413,  1321,  1752,    54,   288,  1584,
9453:       54,   413,  1752,  1544,   260,   413,   495,   503,   456,  1751,
9454:      413,   150,  1737,   496,  1770,   269,    93,   269,   142,   440,
9455:      494,    36,  1751,   809,  1751,    36,   494,  1752,  1751,  1785,
9456:     1786,  1751,     9,    35,   411,  2331,  2341,   249,   250,   251,
9457:      252,   253,   254,   492,   411,   257,   258,  1588,  1804,   339,
9458:     2346,   492,   413,   343,   413,   429,  1382,   413,   413,   498,
9459:      452,   494,    11,   341,     6,  1821,  1822,  1823,   288,    11,
9460:      498,   493,   498,    15,  2612,   411,   503,   494,    20,    21,
9461:       22,    23,    24,   373,   274,    27,   413,   494,    30,    31,
9462:      178,   160,    34,    35,   494,   169,   437,    36,   495,   213,
9463:      376,     8,   498,   221,    11,   306,  1862,   285,   481,   482,
9464:      483,   306,   485,   486,   487,   488,   489,   490,   492,   339,
9465:      498,   495,   496,   343,   494,   221,   269,   290,   322,   221,
9466:      286,   282,   449,   150,    41,   958,   494,    79,   150,   269,
9467:     1896,    48,   494,   284,    86,    87,    88,    89,    90,   456,
9468:      440,   363,   364,   373,   492,   495,  2392,  2601,  2602,   477,
9469:       36,   477,   939,   495,   495,   495,    73,   495,  2612,   284,
9470:      269,    36,   481,   482,   483,   495,   485,   486,   487,   488,
9471:      489,   490,   493,   495,  1940,   495,  1942,   169,   496,   495,
9472:      477,   495,   495,   495,  1520,  2935,  1938,   495,   169,   495,
9473:      986,   495,   494,   413,  1960,   494,  2483,  1963,   494,   494,
9474:      153,   453,   453,  1969,   443,   483,  1972,   284,   479,  1975,
9475:      440,   285,   285,   285,   435,  1981,  1982,  1983,  1984,  1985,
9476:     2015,   498,  1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,
9477:     1996,  1997,  1827,   240,   413,  2001,  2002,   269,   494,   150,
9478:     2006,   198,  2048,   484,   288,  2011,   150,  2013,   150,  2015,
9479:      413,  2046,   474,   475,   413,   413,   497,   174,  2024,   413,
9480:      276,  2027,   276,  2029,   498,   493,   495,   494,  2063,   495,
9481:     2036,  2037,   282,   190,  2040,  2041,   284,  1872,   195,  2045,
9482:     2046,   456,    36,   150,   493,   493,   150,   141,   274,   169,
9483:     1885,    11,   164,   495,   495,  2061,   169,  2063,   495,   495,
9484:     1636,  2061,   494,  2063,   294,   402,   453,   169,  2074,   498,
9485:      480,   495,   178,   495,   231,   481,   482,   483,  2084,   485,
9486:      486,   487,   488,   489,   490,   442,  2061,  2577,  2063,   347,
9487:      494,    84,   150,   173,  2100,  2728,   498,  2885,   285,   494,
9488:      581,   424,    36,   495,   494,  1896,    79,  1942,  2713,  1685,
9489:      495,   495,  1947,     8,  1949,   437,    11,   495,  1953,  1954,
9490:      493,    16,    17,    18,   494,   169,  2612,  1703,   494,   286,
9491:      404,   498,   613,   495,   495,   220,  2662,  1173,  1174,   495,
9492:      495,   494,   220,  1719,  2150,   495,   494,   293,  2154,  2155,
9493:     2156,   291,  1188,   494,  2680,    54,   182,   483,   456,   495,
9494:       50,  1737,   200,   188,   274,   274,    36,   496,   649,   650,
9495:      651,  2773,  1963,   413,   413,  1751,  1752,   269,   483,   495,
9496:     1756,   496,   107,   284,  2817,   496,   496,   496,   496,    36,
9497:     1981,  2885,   169,  2679,   496,   496,  2682,   496,  1225,   496,
9498:     1227,   496,   496,   496,   496,    95,  1279,   496,  2214,   496,
9499:      496,   496,   456,  2205,   496,  2006,   496,   496,   496,   496,
9500:      496,   378,  2013,   496,   220,  2231,   496,   496,   496,    86,
9501:      494,   121,   455,   131,   494,   494,  2796,   494,  2798,   494,
9502:      333,   221,   495,   494,  2734,  2036,    81,   115,   494,   139,
9503:       36,    73,   495,   143,   150,   122,   150,    36,   495,   355,
9504:      355,   303,  2788,    36,   498,   494,   494,   324,   442,  2890,
9505:      494,  2277,  2278,    73,  1310,   165,  2282,  2283,   168,  2884,
9506:      494,  2287,   494,    36,  2290,  2291,   187,   437,   424,  2295,
9507:       67,  2851,   484,   183,    54,   287,    67,   498,   490,   494,
9508:      494,   493,    36,   437,   373,   497,   483,   274,   187,  2315,
9509:      502,   494,   245,  2319,    36,  2315,   424,   287,   494,  2319,
9510:     2155,   478,  2812,   287,  1397,   494,   357,   495,   485,   486,
9511:      487,   488,   489,   490,   494,  2341,   267,   529,   530,   531,
9512:     2315,   284,   495,   171,  2319,  2180,     9,   175,   200,   340,
9513:        8,  2343,  2344,    11,   546,   284,   284,   354,    16,    17,
9514:       18,   494,  1938,   495,  2155,   120,    33,   435,  2374,     9,
9515:      198,    22,   495,   565,   566,   567,   568,  2383,   570,   598,
9516:     2137,  2150,  1454,  1816,   274,  2098,  2392,  2811,  2553,   581,
9517:     2881,   286,   282,    36,  2190,  2345,  2386,  2960,   590,  2885,
9518:     2887,  2720,  2934,  2922,  1440,  1432,  2631,   235,   973,   601,
9519:     1810,  1822,    55,  2195,   242,  1442,  2422,  1444,  2884,  1874,
9520:     1447,   613,  2932,  2214,  2154,  1807,  1453,  2882,  1455,  1221,
9521:     1878,  1940,  1173,  2483,  2180,   325,   939,   912,  1770,  2015,
9522:     1467,   922,   961,  1425,   960,  1472,  2785,  2806,    36,  1476,
9523:     1477,  1478,  1479,  2917,  1481,  1482,  1785,   649,   650,   651,
9524:     2078,   289,  1397,   106,  2864,   946,  2800,    55,  2700,  2337,
9525:     2046,  1424,  1752,   963,  2466,  2063,  2676,  2483,  2061,  2775,
9526:     2306,  2774,  2321,  2489,  2792,  2061,  2492,  2063,  2793,  2549,
9527:     2496,   972,  2283,  1272,  1272,  1272,  1272,  2867,  2504,  2505,
9528:     2868,  2905,  2508,  2338,   985,  1663,  1348,  1771,  1544,  1263,
9529:     1703,  1594,  1700,  1493,  1352,  2521,  1740,  2077,   106,   107,
9530:     1882,  2521,  2767,  1232,  2530,  1006,  1584,   115,  1374,  2535,
9531:     2530,   359,  2538,   945,  2099,  2535,    -1,    -1,  2538,  2545,
9532:     2546,    -1,  1375,    -1,    -1,    -1,  2521,    -1,    -1,    -1,
9533:       -1,  2557,  1588,  2559,   197,  2530,    -1,  2557,    -1,   217,
9534:     2535,  1634,  1635,  2538,    -1,    -1,  1639,    -1,    -1,    -1,
9535:       -1,    -1,    -1,  2579,    -1,    -1,    -1,    -1,   406,    -1,
9536:      408,    -1,  2557,    -1,    -1,   173,   481,   482,   483,    -1,
9537:      485,   486,   487,   488,   489,   490,   424,    -1,    -1,    -1,
9538:       -1,  2392,   430,    -1,   247,   433,  2612,  1680,  1681,   197,
9539:       -1,    -1,   255,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9540:       -1,   813,    -1,    -1,   267,    -1,    -1,  2462,   286,  2205,
9541:     2622,  2422,    -1,    -1,    -1,    -1,    -1,  2643,    -1,    -1,
9542:       -1,  2647,  2648,  2643,    -1,    -1,    -1,    -1,  2483,    -1,
9543:       -1,    -1,  2644,  2688,    -1,   298,    -1,    -1,    -1,   247,
9544:       -1,    -1,    -1,    -1,    -1,  2671,  1147,   255,  2643,  2675,
9545:       -1,    -1,    -1,  2679,    -1,  2675,  2682,    -1,    -1,   267,
9546:       -1,   269,  2688,    -1,    -1,    -1,    -1,    -1,   880,   527,
9547:       -1,    -1,    -1,   527,    -1,    -1,    -1,  2703,    -1,    -1,
9548:     2675,  2492,   345,    -1,    -1,    -1,    -1,  2713,    -1,    -1,
9549:      298,  2717,  2718,  2548,    -1,    -1,    -1,    -1,    -1,    -1,
9550:       -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    23,
9551:      922,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,  2315,
9552:       -1,    -1,    36,  2319,   387,    -1,    -1,   939,   940,  1230,
9553:       -1,    -1,    -1,   945,   946,   947,  2748,   345,    -1,    -1,
9554:       -1,    55,    -1,    -1,    -1,    -1,    -1,  2343,  2344,  2775,
9555:       -1,    -1,    -1,   527,    -1,  2775,    -1,  2612,    -1,   367,
9556:      972,   973,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9557:     2796,    -1,  2798,   985,  2800,    -1,    -1,    -1,  2804,   387,
9558:     2775,   389,    -1,    -1,   392,  2811,    -1,    -1,    -1,    -1,
9559:     1002,  2811,   106,    -1,  1006,  2807,    -1,    -1,    -1,    -1,
9560:       -1,  2612,    -1,   481,   482,   483,  2832,   485,   486,   487,
9561:      488,   489,   490,    -1,    -1,    -1,  2811,    -1,    -1,    -1,
9562:       -1,   135,    -1,    -1,    -1,  2851,    -1,    -1,    -1,    -1,
9563:     1634,  1635,    -1,    -1,    -1,  1639,    -1,  2648,  2864,    -1,
9564:     1896,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,   703,
9565:     1351,    -1,    -1,  1900,    -1,    -1,    -1,    -1,  2884,  2885,
9566:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2679,    -1,
9567:     2466,  2682,  1373,    -1,  1375,  2901,  1680,  1681,  2904,  2905,
9568:       -1,  2901,  2894,   197,    -1,    -1,   494,    -1,  2743,  1982,
9569:     1983,  1984,  1985,    -1,    -1,  1988,  1989,  1990,  1991,  1992,
9570:     1993,  1994,  1995,  1996,  1997,    -1,  2901,  1963,    -1,    -1,
9571:       -1,    -1,    -1,  2939,    -1,    -1,    -1,    -1,    -1,    -1,
9572:       -1,  1422,    -1,    -1,    -1,  1981,    -1,  1139,    -1,   703,
9573:       -1,    -1,    -1,   247,  2530,  1147,    -1,    -1,    -1,  2535,
9574:       -1,   255,  2538,    -1,    -1,  1157,    -1,  2040,  2041,    -1,
9575:     2006,   809,    -1,   267,    -1,   809,    -1,  2013,    -1,  2985,
9576:      109,   110,    -1,    -1,    -1,    -1,    -1,   527,    -1,    -1,
9577:       -1,    -1,    -1,    -1,   288,    -1,    -1,    -1,  1190,    -1,
9578:     2036,    -1,    -1,    -1,   298,    -1,    -1,    -1,    -1,    -1,
9579:       -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
9580:     1501,  1502,    -1,    16,    17,    18,    -1,    -1,    -1,  1221,
9581:     1222,    -1,  1224,  1225,     8,  1227,  1228,    11,  1230,    -1,
9582:       33,    -1,    16,    17,    18,   339,  2622,    -1,    -1,   343,
9583:     2885,   345,    -1,    -1,    -1,   809,   185,   186,    -1,    33,
9584:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2644,    -1,
9585:       -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,   527,   373,
9586:       -1,    -1,    -1,    -1,    -1,  1277,    -1,    -1,    -1,    -1,
9587:       -1,  2118,    -1,   387,  2885,    -1,  1288,    -1,    -1,  2675,
9588:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9589:       -1,    -1,  2688,    -1,    -1,  2142,    -1,    -1,    -1,  2155,
9590:      249,   250,   251,   252,   253,   254,  1318,    -1,   257,   258,
9591:     2157,  2158,  2159,  2160,  2161,  2162,  2163,  2164,  2165,  2166,
9592:       -1,    -1,    -1,    -1,    -1,    -1,   440,    -1,   986,    -1,
9593:       -1,    -1,   986,    -1,    -1,     0,    -1,    -1,    -1,  1351,
9594:     1352,    -1,    -1,   703,    -1,    -1,    -1,    -1,    -1,    -1,
9595:       -1,    -1,  2748,    -1,    -1,    -1,    -1,    -1,  2214,    -1,
9596:       -1,  1373,    -1,  1375,    -1,    -1,    -1,    -1,    -1,    -1,
9597:       -1,    -1,  1384,    -1,  1386,    -1,    -1,    -1,  1982,  1983,
9598:     1984,  1985,    -1,    -1,  1988,  1989,  1990,  1991,  1992,  1993,
9599:     1994,  1995,  1996,  1997,    -1,    -1,    -1,    -1,    -1,    -1,
9600:       -1,    -1,    36,    -1,   217,    -1,    -1,    -1,    -1,    -1,
9601:     1422,  2807,   986,    -1,   363,   364,    -1,    -1,    -1,  1431,
9602:     1432,    55,    -1,   217,    -1,    -1,    -1,  2283,    93,  1730,
9603:     1442,  1443,  1444,  1445,   703,  1447,  2040,  2041,    -1,    -1,
9604:       -1,  1453,    -1,  1455,    -1,    -1,    -1,    -1,    -1,   809,
9605:       -1,    -1,    -1,    -1,  1466,  1467,    -1,    -1,    -1,  1471,
9606:     1472,    -1,    -1,    -1,  1476,  1477,  1478,  1479,    -1,  1481,
9607:     1482,    -1,   106,   286,    -1,    -1,    -1,    -1,    -1,    -1,
9608:      145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1501,
9609:     1502,  1503,   286,    -1,   159,    -1,    -1,    -1,  2894,   164,
9610:       -1,    -1,    -1,    -1,   169,    -1,  1518,    -1,    -1,    -1,
9611:       -1,    -1,    -1,   178,    -1,  1173,  1174,   182,    -1,  1173,
9612:     1174,    -1,    -1,    -1,    -1,   474,   475,    -1,    -1,    -1,
9613:     1188,    -1,    -1,    -1,  1188,    -1,  2392,    -1,    -1,   173,
9614:      809,    -1,    -1,    -1,    -1,   494,    -1,    -1,   213,    -1,
9615:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9616:       -1,    -1,    -1,   197,    -1,    -1,  2422,   232,    -1,    -1,
9617:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1879,    -1,
9618:       -1,    -1,    -1,    -1,    -1,    -1,  1887,  1888,  1889,    -1,
9619:       -1,    -1,    -1,    -1,    -1,    -1,  2489,    -1,    -1,  1173,
9620:     1174,    -1,    -1,    -1,    -1,    -1,  1907,    -1,    -1,    -1,
9621:       -1,    -1,    -1,   247,  1188,    -1,   281,    -1,    -1,   284,
9622:       -1,   255,    -1,    -1,    -1,   290,   986,    -1,    -1,    -1,
9623:       -1,    -1,    -1,   267,    -1,    -1,  2492,    -1,     8,    -1,
9624:       -1,    11,    -1,    -1,  1656,    -1,    -1,    -1,    -1,    -1,
9625:       -1,  1663,  1310,    -1,    -1,    -1,  1310,    -1,    -1,   324,
9626:       -1,    -1,    -1,    -1,   298,    -1,    -1,    -1,   481,   482,
9627:      483,    41,   485,   486,   487,   488,   489,   490,    48,    -1,
9628:       -1,    -1,   347,    -1,    -1,  1697,  2579,   481,   482,   483,
9629:       -1,   485,   486,   487,   488,   489,   490,    -1,   109,   110,
9630:       -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
9631:       -1,   345,    -1,    -1,    -1,    -1,    -1,   986,  1730,    -1,
9632:       -1,    -1,    -1,    -1,    -1,  1737,    -1,    -1,    -1,    -1,
9633:       -1,  2578,    -1,   367,    -1,    -1,  1310,   402,    -1,    -1,
9634:     1752,    -1,    -1,    -1,  1756,    -1,    -1,  1759,    -1,  1761,
9635:       -1,    -1,    -1,   387,  2647,    -1,  2612,  2058,  2059,  2060,
9636:       -1,    -1,    -1,    -1,   429,    -1,  2613,  2614,    -1,    -1,
9637:       -1,    -1,   437,   143,   185,   186,    -1,    -1,    -1,    -1,
9638:       -1,  2628,  1440,    -1,    -1,    -1,  1440,    -1,   453,    -1,
9639:      455,   456,  2648,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9640:     1812,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,
9641:       -1,    -1,    -1,  1173,  1174,  2116,    -1,    -1,    -1,    -1,
9642:      190,    -1,    -1,  2679,    -1,   195,  2682,   492,  1188,    -1,
9643:      495,   496,   497,    -1,    -1,    -1,    -1,    -1,   249,   250,
9644:      251,   252,   253,   254,    -1,    -1,   257,   258,    -1,    -1,
9645:       -1,    -1,    -1,    -1,    -1,  2702,    -1,    -1,    -1,    -1,
9646:       -1,   231,  1874,    -1,    -1,    -1,  1440,  1879,    -1,    -1,
9647:       -1,    -1,    -1,    -1,  1886,  1887,  1888,  1889,    -1,    -1,
9648:       -1,    -1,    -1,  2730,  2185,  2489,  1544,    -1,  1900,    -1,
9649:     1544,    -1,    -1,    -1,    -1,  1907,    -1,    -1,    -1,    -1,
9650:       -1,    -1,    -1,    -1,  1173,  1174,    -1,  1919,    -1,    -1,
9651:       -1,    -1,    -1,    -1,    -1,    -1,   286,  2218,     8,  1188,
9652:       -1,    11,    -1,  1935,    -1,    -1,    16,    17,    18,    -1,
9653:     1588,    -1,    -1,    -1,  1588,    -1,    -1,    -1,    -1,  1951,
9654:     1952,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
9655:     1310,     3,   363,   364,    23,    -1,     8,    -1,    -1,    11,
9656:       29,    -1,  1974,    -1,    16,    17,    18,    36,    -1,    -1,
9657:     1544,    -1,    -1,    -1,    -1,  2579,    -1,    -1,    -1,    -1,
9658:       -1,    33,    -1,    -1,    36,    -1,    55,    -1,    -1,    41,
9659:       -1,    -1,    -1,    -1,    -1,    -1,    48,  2298,  2299,  2300,
9660:     2301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,
9661:       -1,    -1,    -1,    -1,  1588,    -1,    -1,    -1,    -1,    -1,
9662:       -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2885,
9663:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,
9664:       -1,  1310,    -1,  2647,    -1,    -1,  2058,  2059,  2060,  2061,
9665:       -1,  2063,  2064,    -1,    -1,    -1,  2068,  2069,    -1,    -1,
9666:       -1,    -1,    -1,   474,   475,    -1,   135,    -1,    -1,    -1,
9667:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9668:     1440,    -1,    -1,    -1,    -1,    -1,  2098,    -1,    -1,    -1,
9669:       -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,
9670:       -1,    -1,    -1,    -1,  2116,    -1,  2118,    -1,   478,    -1,
9671:     2122,  2123,  2124,    -1,  2126,   485,   486,   487,   488,   489,
9672:      490,    -1,   174,    -1,    41,    -1,    -1,   217,   197,    -1,
9673:     2142,    48,  2144,    -1,    -1,    -1,    -1,    -1,   190,    -1,
9674:       -1,    -1,    -1,   195,    -1,  2157,  2158,  2159,  2160,  2161,
9675:     2162,  2163,  2164,  2165,  2166,    -1,    73,    -1,    -1,    -1,
9676:       -1,   565,   566,    -1,    -1,   217,   218,    -1,    -1,    -1,
9677:     2182,  1440,    -1,  2185,    -1,    -1,    -1,    -1,   247,   231,
9678:       -1,    -1,    -1,  2195,  1544,    -1,   255,    -1,    -1,    -1,
9679:       -1,    -1,    -1,    -1,  2206,    -1,   286,    -1,   267,    -1,
9680:       -1,    -1,    -1,    -1,    -1,    -1,  2218,    -1,    -1,    -1,
9681:       -1,    -1,    -1,  2225,    -1,    -1,    -1,   269,    -1,   288,
9682:      272,    -1,    -1,    -1,   628,   629,   143,    -1,  1588,   298,
9683:       -1,    -1,    -1,    -1,   286,    -1,    -1,   289,  1896,    -1,
9684:       -1,    -1,  1896,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9685:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,    -1,    -1,
9686:       -1,  2273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9687:      339,    -1,    -1,   190,   343,  1544,   345,    -1,   195,    -1,
9688:       -1,    -1,    -1,    -1,  2296,  2586,  2298,  2299,  2300,  2301,
9689:       -1,    -1,    -1,  2305,  2306,    -1,  2308,    -1,   367,  2311,
9690:       -1,    -1,    -1,  2315,   373,  1963,    -1,  2319,    -1,  1963,
9691:       -1,    -1,    -1,  2325,   231,    -1,    -1,    -1,   387,  1588,
9692:       -1,    -1,  1896,  1981,    -1,    -1,   378,  1981,    -1,  2341,
9693:       -1,    -1,    -1,  2345,    -1,    -1,    -1,    -1,  2350,  2640,
9694:       -1,    -1,    -1,    -1,  2356,    -1,    -1,    -1,  2006,    -1,
9695:     2362,    -1,  2006,    -1,    -1,  2013,    -1,    -1,    -1,  2013,
9696:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
9697:       -1,   440,    -1,    -1,    -1,  2387,    -1,    -1,  2036,    -1,
9698:       -1,    -1,  2036,    -1,    -1,    -1,    -1,    -1,    -1,  1963,
9699:       -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
9700:      490,    -1,    -1,    -1,   808,    -1,    -1,  1981,    -1,    -1,
9701:     2711,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9702:       -1,   825,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,
9703:      482,   483,  2006,   485,   486,   487,   488,   489,   490,  2013,
9704:       -1,    -1,    -1,    -1,  2456,    -1,  2747,    -1,    -1,    -1,
9705:      854,    -1,    -1,  2465,    -1,    -1,    -1,    -1,    -1,    -1,
9706:       -1,   378,  2036,    -1,  2476,    -1,    -1,    -1,    -1,    -1,
9707:      874,   875,   876,    -1,    -1,   879,    -1,    -1,    -1,    -1,
9708:       -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
9709:       16,    17,    18,    -1,    -1,    -1,    -1,  2155,   902,    -1,
9710:     2512,  2155,    -1,    -1,    -1,    -1,    -1,    33,    -1,  2521,
9711:     2522,    -1,    -1,  2525,    -1,    41,  2528,    -1,  2530,    -1,
9712:       -1,    -1,    48,  2535,    -1,    -1,  2538,    -1,  2540,    -1,
9713:       -1,  2543,    -1,    -1,    -1,    -1,  1896,    -1,    -1,    -1,
9714:       -1,    -1,    -1,    -1,    -1,  2557,    -1,    73,    -1,   953,
9715:       -1,    -1,    -1,   957,   958,    -1,  2214,    -1,    -1,    -1,
9716:     2214,   478,    -1,    -1,    -1,  2577,  2578,    -1,   485,   486,
9717:      487,   488,   489,   490,  2586,    -1,    -1,    -1,    -1,    -1,
9718:       -1,  2155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9719:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9720:       -1,  2613,  2614,  1963,    -1,    -1,    -1,  1011,    -1,    -1,
9721:       -1,    -1,  2624,    -1,  1018,    -1,  2628,    -1,    -1,    -1,
9722:       -1,  1981,    -1,    -1,    -1,  2283,    -1,  1896,  2640,  2283,
9723:       -1,  2643,    -1,    -1,    -1,  1039,    -1,    -1,    -1,    -1,
9724:     2214,    -1,    -1,    -1,    -1,    -1,  2006,    -1,   174,    -1,
9725:     2662,    -1,    -1,  2013,    -1,    -1,    -1,   895,    -1,    -1,
9726:       -1,    -1,    -1,  2675,   190,    -1,    -1,    -1,  2680,   195,
9727:       -1,    -1,    -1,    -1,    -1,    -1,  2036,    -1,    -1,    -1,
9728:       -1,    -1,    -1,    -1,    -1,  2697,    -1,    -1,    -1,    -1,
9729:     2702,   217,   218,    -1,  1963,    -1,    -1,   935,    -1,  2711,
9730:       -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,  2283,
9731:       -1,    -1,  1981,    -1,    -1,    -1,    -1,    -1,  2730,    -1,
9732:       -1,    -1,  2734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9733:       -1,    -1,    -1,    -1,  2392,  2747,    -1,  2006,  2392,    -1,
9734:       -1,    -1,    -1,   269,  2013,    -1,   272,    -1,    -1,    -1,
9735:     1154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9736:      286,    -1,    -1,  2775,  2422,    -1,    -1,  2036,  2422,    -1,
9737:       -1,    -1,  2784,    -1,    -1,    -1,  2788,    -1,    -1,    -1,
9738:     2792,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9739:       -1,    -1,    -1,    -1,    -1,  2155,    -1,    -1,    -1,  2811,
9740:     2812,  2813,  2814,    -1,    -1,  1043,    -1,    -1,    -1,    -1,
9741:       -1,    -1,  1050,    -1,    -1,    -1,    -1,    -1,  2392,    -1,
9742:        0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9743:       -1,    -1,    -1,    -1,  2492,    -1,    -1,    -1,  2492,    -1,
9744:       -1,    -1,    -1,  2855,    -1,    -1,    -1,    -1,  2422,    -1,
9745:       -1,    -1,   378,    -1,  2214,  2867,    -1,    -1,    -1,    -1,
9746:       -1,    -1,  1266,    -1,    -1,    -1,    -1,    -1,    -1,  2881,
9747:       -1,    -1,  1276,    -1,  1278,    -1,    -1,  1281,  1282,  1283,
9748:     1284,    -1,    -1,  2895,    -1,    -1,  2155,    -1,    -1,  2901,
9749:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9750:       -1,  1305,    -1,    -1,    -1,  2917,  2918,  1311,  1312,  1313,
9751:     1314,    -1,    -1,    93,    -1,  1319,  1320,    -1,  2492,    -1,
9752:     1324,    -1,    -1,  2283,  1328,    -1,    -1,  1331,  1332,  1333,
9753:     1334,  1335,  1336,  1337,  1338,  1339,    -1,    -1,  1342,    -1,
9754:       -1,    -1,    -1,  1347,    -1,  2214,  1350,    -1,  1352,    -1,
9755:     1354,    -1,   478,    -1,  2612,   481,   482,   483,  2612,   485,
9756:      486,   487,   488,   489,   490,   145,    -1,    -1,    -1,    -1,
9757:       -1,    -1,    -1,  1377,    -1,    -1,    -1,    -1,    -1,   159,
9758:       -1,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
9759:     2648,    -1,    -1,    -1,  2648,    -1,    -1,    -1,   178,    -1,
9760:       -1,    -1,   182,    -1,  1408,  1409,    -1,    -1,    -1,    -1,
9761:       -1,    -1,    -1,    -1,  2283,    -1,    -1,    -1,    -1,    -1,
9762:       -1,  2679,    -1,    -1,  2682,  2679,  1264,    -1,  2682,    -1,
9763:       -1,    -1,  2392,   213,    -1,    -1,    -1,  1275,  2612,    -1,
9764:       -1,  1279,     8,    -1,    -1,    11,    -1,  1285,  1286,  1287,
9765:       -1,    -1,   232,    -1,    -1,    -1,  1294,    -1,    -1,    -1,
9766:       -1,    -1,  2422,    -1,    -1,    -1,    -1,    -1,    -1,     8,
9767:       -1,    -1,    11,    -1,  2648,    41,    -1,    16,    17,    18,
9768:       -1,    -1,    48,  1487,    -1,    -1,  1490,  1491,    -1,  1493,
9769:       -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,
9770:       -1,   281,    41,    -1,   284,  2679,    -1,    73,  2682,    48,
9771:      290,  1349,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9772:     1524,    -1,    -1,  2392,    -1,    -1,    -1,    -1,    -1,    -1,
9773:       -1,    -1,  2492,    -1,    73,    -1,    -1,    -1,    -1,    -1,
9774:       -1,    -1,    -1,    -1,   324,    -1,    -1,    -1,    -1,    -1,
9775:       -1,    -1,    -1,  2422,    -1,  1393,    -1,    -1,    -1,    -1,
9776:       -1,    -1,    -1,    -1,    21,    -1,    -1,   347,    -1,  1407,
9777:       -1,    -1,    -1,    -1,  1412,    -1,    -1,   143,    -1,    -1,
9778:       -1,    -1,  1586,    -1,    -1,    -1,    -1,    -1,    -1,  1593,
9779:       -1,    -1,    -1,    -1,  1598,    -1,    -1,    -1,    -1,    -1,
9780:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,    -1,
9781:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,
9782:       -1,    -1,   402,  2492,   190,    -1,    -1,  2885,    -1,   195,
9783:       -1,  2885,  1636,    90,    -1,   174,    -1,    -1,    -1,    -1,
9784:       -1,    -1,    -1,    -1,  1648,    -1,  1650,  1651,    -1,   429,
9785:       -1,   190,  2612,    -1,  1658,    -1,   195,   437,  1662,    -1,
9786:       -1,  1665,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,
9787:       -1,    -1,    -1,   453,    -1,   455,   456,    -1,   217,   218,
9788:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,  2648,    -1,
9789:       -1,    -1,   231,    -1,    -1,  1699,    -1,   154,  1702,    -1,
9790:     1704,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,
9791:       -1,  2885,   492,    -1,   171,   495,   496,   497,    -1,  2679,
9792:      286,    -1,  2682,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9793:      269,    -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,
9794:       -1,   198,    -1,  2612,    -1,    -1,    -1,   286,    -1,    -1,
9795:      289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1596,    -1,
9796:       -1,    -1,    -1,    -1,    -1,    -1,  1770,    -1,    -1,    -1,
9797:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  1615,    -1,  2648,
9798:       -1,  1785,  1786,    -1,    -1,   242,    -1,    -1,    -1,   246,
9799:       -1,    -1,    -1,    -1,  1632,    -1,  1634,  1635,    -1,  1637,
9800:     1804,  1639,    -1,    -1,    -1,    -1,  1644,    -1,    -1,  1647,
9801:     2679,    -1,   378,  2682,  1652,    -1,    -1,  1655,    -1,    -1,
9802:       -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,  1667,
9803:       16,    17,    18,  1671,  1672,  1673,  1674,    -1,    -1,   378,
9804:       -1,    -1,  1680,  1681,    -1,  1683,  1684,    -1,    -1,    -1,
9805:       -1,    -1,   309,    -1,    -1,    41,    -1,  1695,  1862,    -1,
9806:     1698,    -1,    48,    -1,    -1,    -1,   323,    -1,  1706,  1707,
9807:     1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,    -1,    -1,
9808:       -1,    -1,    -1,    -1,    -1,  1723,    -1,    73,    -1,  1727,
9809:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
9810:       -1,    -1,   359,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9811:      367,  1749,   478,   370,    -1,    -1,    -1,    -1,    -1,   485,
9812:      486,   487,   488,   489,   490,  2885,    -1,    -1,    -1,    -1,
9813:       -1,    -1,   389,    -1,    -1,    -1,    -1,    -1,    -1,   478,
9814:       -1,    -1,   481,   482,   483,   402,   485,   486,   487,   488,
9815:      489,   490,   409,    -1,    -1,    -1,  1960,    -1,    -1,   498,
9816:       -1,   418,    -1,    -1,    -1,  1969,    -1,   424,  1972,    -1,
9817:       -1,  1975,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9818:       -1,    -1,     8,    -1,    -1,    11,    -1,    -1,   174,    -1,
9819:       -1,    -1,   449,    -1,    -1,    -1,    -1,  2001,  2002,    -1,
9820:       -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,
9821:       -1,  2015,    -1,    -1,    -1,    41,  2885,    -1,    -1,    -1,
9822:     2024,    -1,    48,  2027,    -1,  2029,    -1,    -1,    -1,  1867,
9823:     1868,  1869,    -1,  2037,    -1,    -1,    -1,    -1,    -1,    -1,
9824:       -1,  2045,  2046,    -1,    -1,   231,    -1,    73,    -1,    -1,
9825:       -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
9826:       -1,    16,    17,    18,    -1,    -1,    -1,  1905,    -1,    -1,
9827:     2074,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
9828:     2084,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
9829:       -1,    -1,    -1,    48,    -1,    -1,  2100,    -1,    -1,    -1,
9830:      286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9831:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,    73,    -1,
9832:       -1,  1959,    -1,    -1,    -1,    -1,    -1,  1965,    -1,    -1,
9833:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9834:     1978,  1979,  1980,    -1,  1982,  1983,  1984,  1985,   174,    -1,
9835:     1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,  1997,
9836:     1998,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,
9837:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2016,    -1,
9838:       -1,  2019,    -1,  2021,    -1,    -1,    -1,  2025,  2026,    -1,
9839:       -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9840:       -1,  2039,  2040,  2041,  2042,   231,  2044,    -1,    -1,    -1,
9841:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,
9842:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2231,    -1,    -1,
9843:       -1,    -1,    -1,    -1,    -1,   190,    -1,     0,    -1,    -1,
9844:      195,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
9845:       -1,    -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,
9846:      286,    -1,   217,   218,    -1,    -1,    29,    -1,    31,    32,
9847:       -1,    -1,    -1,  2277,  2278,    41,   231,    -1,  2282,    -1,
9848:       -1,  2119,    48,  2287,    47,    -1,  2290,  2291,    -1,    -1,
9849:       -1,  2295,   478,    56,    -1,   481,   482,   483,    -1,   485,
9850:      486,   487,   488,   489,   490,    68,    -1,    73,    -1,    -1,
9851:       -1,    -1,    -1,    -1,   269,    -1,    79,   272,    -1,    -1,
9852:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
9853:       93,   286,    -1,    -1,   289,    -1,    -1,  2341,    -1,    -1,
9854:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
9855:       -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9856:       -1,    -1,   125,     8,    -1,    -1,    11,    -1,    -1,    -1,
9857:       -1,    -1,   135,    -1,    -1,    -1,    -1,   143,   141,  2383,
9858:       -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,   151,   152,
9859:       -1,    -1,    -1,    -1,  2232,    -1,    41,    -1,  2236,  2237,
9860:       -1,  2239,   165,    48,  2242,  2243,  2244,  2245,   174,    -1,
9861:       -1,  2249,  2250,  2251,  2252,  2253,  2254,  2255,  2256,  2257,
9862:     2258,  2259,  2260,   378,   190,    -1,    -1,    -1,    73,   195,
9863:       -1,   194,  2270,    -1,    -1,    -1,    -1,    -1,  2276,    -1,
9864:       -1,  2279,    -1,  2281,    -1,    -1,   209,  2285,    -1,    -1,
9865:     2288,  2289,   478,    -1,  2292,  2293,    -1,    -1,    -1,   485,
9866:      486,   487,   488,   489,   490,   231,    -1,    -1,    -1,    -1,
9867:       -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9868:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9869:       -1,    -1,  2496,    -1,  2332,    -1,    -1,    -1,   143,    -1,
9870:     2504,  2505,  2340,    -1,  2508,    -1,    -1,    -1,    -1,    -1,
9871:       -1,    -1,    -1,    -1,    -1,  2353,    -1,    -1,    -1,    -1,
9872:      286,    -1,    -1,   478,    -1,    -1,   481,   482,   483,   174,
9873:      485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
9874:      495,  2545,  2546,    -1,    -1,   190,    -1,    -1,   311,    -1,
9875:      195,   314,    -1,    -1,    -1,  2559,    -1,    -1,    -1,    -1,
9876:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9877:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9878:      343,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,   352,
9879:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9880:       -1,    -1,    -1,   366,    -1,    -1,    -1,    -1,    -1,    -1,
9881:      373,    -1,   378,    -1,   377,    -1,    -1,    -1,    -1,    -1,
9882:       -1,    -1,    -1,    -1,   387,    -1,    -1,    -1,    -1,    -1,
9883:       -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,   402,
9884:       -1,   286,    -1,    -1,    -1,    -1,    -1,  2485,    -1,    -1,
9885:       -1,  2489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9886:     2498,  2499,  2500,    -1,    -1,  2503,    -1,  2671,  2506,  2507,
9887:       -1,    -1,    -1,  2511,    -1,   438,    -1,    -1,    -1,    -1,
9888:      443,    -1,    -1,    -1,  2688,    -1,    -1,    -1,    -1,    -1,
9889:       -1,    -1,    -1,   456,    -1,    -1,    -1,    -1,    -1,  2703,
9890:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9891:       -1,    -1,   478,    -1,  2718,    -1,    -1,   480,    -1,   485,
9892:      486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
9893:       -1,   494,    -1,   378,   497,    -1,    -1,    -1,    -1,    -1,
9894:       -1,  2579,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9895:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9896:     2598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9897:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9898:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9899:       -1,    -1,    -1,    -1,    -1,    -1,  2800,    -1,    -1,    -1,
9900:     2804,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2646,  2647,
9901:       -1,    -1,    -1,    -1,  2652,  2653,  2654,    -1,    -1,    -1,
9902:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2832,    -1,
9903:       -1,    -1,    -1,   478,    -1,    -1,    -1,    -1,    -1,    -1,
9904:      485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
9905:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2695,  2696,    -1,
9906:     2864,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9907:       -1,  2709,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9908:       -1,    -1,    -1,  2721,    -1,    -1,    -1,    -1,    -1,    -1,
9909:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9910:     2904,  2905,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9911:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9912:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9913:       -1,  2769,    -1,    -1,    -1,  2939,    -1,    -1,    -1,    -1,
9914:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2787,
9915:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9916:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9917:       -1,  2809,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9918:       -1,  2985,    -1,    -1,    -1,  2823,    -1,    -1,    -1,    -1,
9919:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9920:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9921:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9922:       -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
9923:       -1,  2869,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
9924:       22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
9925:       -1,    -1,    -1,    35,  2892,    -1,    38,    39,    -1,    41,
9926:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
9927:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
9928:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
9929:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
9930:       82,    83,    84,    85,  2942,    87,    88,    89,    90,    91,
9931:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
9932:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
9933:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
9934:      122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
9935:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
9936:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
9937:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
9938:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
9939:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
9940:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
9941:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
9942:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
9943:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
9944:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
9945:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
9946:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
9947:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
9948:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
9949:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
9950:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
9951:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
9952:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
9953:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
9954:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
9955:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
9956:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
9957:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
9958:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
9959:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
9960:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
9961:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
9962:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
9963:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
9964:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
9965:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
9966:      442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
9967:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
9968:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
9969:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
9970:       -1,    -1,    -1,   485,   486,   487,    -1,    -1,    -1,    -1,
9971:      492,    -1,   494,   495,    -1,    -1,    -1,   499,    -1,   501,
9972:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
9973:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
9974:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
9975:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
9976:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
9977:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
9978:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
9979:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
9980:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
9981:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
9982:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
9983:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
9984:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
9985:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
9986:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
9987:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
9988:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
9989:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
9990:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
9991:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
9992:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
9993:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
9994:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
9995:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
9996:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
9997:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
9998:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
9999:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10000:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10001:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10002:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10003:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10004:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10005:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10006:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10007:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10008:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
10009:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10010:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10011:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10012:      402,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10013:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10014:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10015:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10016:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10017:       -1,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
10018:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10019:      472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
10020:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10021:      492,    -1,   494,   495,    -1,    -1,    -1,   499,    -1,   501,
10022:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10023:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10024:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10025:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10026:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10027:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10028:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10029:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10030:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10031:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10032:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10033:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10034:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10035:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10036:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10037:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10038:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10039:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10040:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10041:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10042:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10043:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10044:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10045:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10046:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10047:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10048:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10049:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10050:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10051:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10052:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10053:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10054:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10055:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10056:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10057:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10058:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
10059:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10060:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10061:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10062:      402,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10063:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10064:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10065:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10066:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10067:       -1,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
10068:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10069:      472,   473,   474,   475,   476,   477,   478,    -1,   480,    -1,
10070:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10071:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10072:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10073:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10074:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10075:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10076:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10077:       52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
10078:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10079:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10080:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10081:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10082:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10083:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10084:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10085:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10086:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10087:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10088:      162,   163,    -1,   165,    -1,   167,   168,   169,   170,   171,
10089:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10090:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10091:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10092:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10093:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10094:      222,   223,   224,   225,    -1,   227,   228,   229,   230,   231,
10095:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10096:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10097:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10098:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10099:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10100:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10101:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10102:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10103:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10104:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10105:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10106:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10107:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10108:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10109:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10110:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10111:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10112:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10113:      412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
10114:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10115:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10116:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10117:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10118:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10119:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10120:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10121:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10122:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10123:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10124:       22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
10125:       -1,    -1,    34,    35,    -1,    -1,    38,    39,    -1,    41,
10126:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10127:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10128:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10129:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10130:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10131:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10132:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10133:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10134:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10135:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10136:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10137:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10138:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10139:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10140:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10141:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10142:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10143:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10144:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10145:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10146:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10147:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10148:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10149:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10150:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10151:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10152:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10153:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10154:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10155:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10156:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10157:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10158:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10159:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10160:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
10161:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10162:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10163:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10164:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10165:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10166:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10167:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10168:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10169:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10170:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10171:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10172:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10173:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10174:       22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
10175:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10176:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10177:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10178:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10179:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10180:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10181:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10182:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10183:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10184:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10185:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10186:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10187:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10188:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10189:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10190:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10191:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10192:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10193:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10194:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10195:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10196:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10197:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10198:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10199:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10200:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10201:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10202:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10203:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10204:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10205:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10206:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10207:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10208:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10209:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10210:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10211:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10212:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10213:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10214:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10215:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10216:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10217:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10218:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10219:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10220:       -1,    -1,    -1,   485,   486,   487,    -1,    -1,    -1,    -1,
10221:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10222:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10223:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10224:       22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
10225:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10226:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10227:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10228:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10229:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10230:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10231:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10232:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10233:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10234:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10235:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10236:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10237:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10238:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10239:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10240:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10241:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10242:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10243:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10244:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10245:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10246:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10247:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10248:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10249:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10250:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10251:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10252:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10253:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10254:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10255:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10256:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10257:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10258:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10259:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10260:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10261:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10262:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10263:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10264:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10265:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10266:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10267:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10268:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10269:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10270:       -1,    -1,    -1,   485,   486,   487,    -1,    -1,    -1,    -1,
10271:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10272:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10273:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10274:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10275:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10276:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10277:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10278:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10279:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10280:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10281:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10282:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10283:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10284:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10285:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10286:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10287:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10288:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10289:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10290:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10291:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10292:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10293:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10294:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10295:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10296:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10297:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10298:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10299:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10300:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10301:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10302:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10303:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10304:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10305:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10306:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10307:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10308:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10309:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10310:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10311:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10312:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10313:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10314:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10315:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10316:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10317:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10318:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10319:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10320:       -1,    -1,    -1,   485,   486,   487,    -1,    -1,    -1,    -1,
10321:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10322:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10323:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10324:       22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
10325:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10326:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10327:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10328:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10329:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10330:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10331:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10332:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10333:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10334:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10335:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10336:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10337:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10338:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10339:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10340:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10341:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10342:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10343:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10344:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10345:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10346:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10347:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10348:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10349:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10350:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10351:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10352:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10353:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10354:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10355:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10356:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10357:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10358:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10359:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10360:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10361:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10362:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10363:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10364:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10365:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10366:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10367:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10368:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10369:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10370:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10371:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10372:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10373:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10374:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10375:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10376:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10377:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10378:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10379:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10380:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10381:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10382:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10383:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10384:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10385:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10386:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10387:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10388:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10389:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10390:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10391:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10392:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10393:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10394:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10395:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10396:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10397:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10398:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10399:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10400:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10401:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10402:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10403:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10404:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10405:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10406:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10407:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10408:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10409:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10410:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10411:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10412:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10413:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10414:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10415:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10416:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10417:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10418:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10419:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10420:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10421:      492,    -1,   494,   495,    -1,    -1,    -1,   499,    -1,   501,
10422:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10423:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10424:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10425:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10426:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10427:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10428:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10429:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10430:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10431:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10432:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10433:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10434:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10435:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10436:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10437:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10438:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10439:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10440:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10441:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10442:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10443:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10444:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10445:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10446:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10447:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10448:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10449:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10450:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10451:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10452:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10453:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10454:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10455:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10456:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10457:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10458:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10459:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10460:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10461:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10462:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10463:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10464:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10465:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10466:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10467:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10468:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10469:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10470:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10471:      492,    -1,   494,   495,    -1,    -1,    -1,   499,    -1,   501,
10472:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10473:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10474:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10475:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10476:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10477:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10478:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10479:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10480:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10481:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10482:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10483:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10484:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10485:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10486:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10487:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10488:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10489:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10490:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10491:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10492:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10493:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10494:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10495:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10496:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10497:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10498:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10499:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10500:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10501:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10502:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10503:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10504:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10505:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10506:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10507:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10508:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10509:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10510:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10511:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10512:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10513:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10514:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10515:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10516:      442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
10517:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10518:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10519:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10520:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10521:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10522:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10523:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10524:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10525:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10526:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10527:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10528:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10529:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10530:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10531:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10532:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10533:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10534:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10535:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10536:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10537:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10538:      162,   163,    -1,   165,    -1,   167,   168,   169,   170,   171,
10539:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10540:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10541:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10542:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10543:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10544:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10545:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10546:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10547:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10548:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10549:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10550:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10551:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10552:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10553:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10554:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10555:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10556:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10557:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10558:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10559:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10560:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10561:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10562:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10563:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10564:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10565:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10566:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10567:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10568:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10569:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10570:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10571:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10572:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10573:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10574:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10575:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10576:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10577:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10578:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10579:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10580:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10581:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10582:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10583:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10584:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10585:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10586:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10587:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10588:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10589:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10590:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10591:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10592:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10593:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10594:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10595:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10596:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10597:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10598:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10599:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10600:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10601:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10602:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10603:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10604:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10605:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10606:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10607:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10608:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10609:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10610:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10611:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10612:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10613:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10614:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10615:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10616:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10617:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10618:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10619:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10620:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10621:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10622:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10623:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10624:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10625:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10626:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10627:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10628:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10629:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10630:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10631:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10632:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10633:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10634:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10635:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10636:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10637:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10638:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10639:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10640:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10641:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10642:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10643:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10644:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10645:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10646:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10647:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10648:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10649:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10650:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10651:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10652:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10653:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10654:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10655:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10656:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10657:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10658:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10659:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10660:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10661:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10662:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10663:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10664:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10665:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10666:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10667:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10668:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10669:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10670:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10671:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10672:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10673:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10674:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10675:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10676:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10677:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10678:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10679:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10680:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10681:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10682:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10683:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10684:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10685:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10686:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10687:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10688:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10689:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10690:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10691:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10692:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10693:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10694:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10695:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10696:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10697:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10698:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10699:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10700:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10701:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10702:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10703:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10704:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10705:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10706:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10707:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10708:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10709:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10710:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10711:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10712:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10713:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10714:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10715:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10716:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10717:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10718:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10719:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10720:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10721:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10722:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10723:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10724:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10725:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10726:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10727:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10728:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10729:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10730:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10731:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10732:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10733:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10734:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10735:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10736:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10737:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10738:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10739:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10740:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10741:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10742:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10743:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10744:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10745:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10746:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10747:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10748:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10749:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10750:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10751:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10752:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10753:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10754:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10755:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10756:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10757:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10758:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10759:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10760:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10761:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10762:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10763:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10764:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10765:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10766:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10767:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10768:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10769:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10770:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10771:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10772:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10773:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10774:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10775:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10776:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10777:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10778:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10779:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10780:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10781:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10782:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10783:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10784:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10785:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10786:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10787:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10788:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10789:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10790:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10791:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10792:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10793:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10794:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10795:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10796:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10797:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10798:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10799:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10800:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10801:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10802:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10803:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10804:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10805:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10806:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10807:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10808:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10809:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10810:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10811:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10812:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10813:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10814:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10815:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10816:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10817:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10818:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10819:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10820:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10821:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10822:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10823:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10824:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10825:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10826:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10827:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10828:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10829:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10830:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10831:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10832:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10833:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10834:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10835:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10836:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10837:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10838:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10839:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10840:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10841:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10842:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10843:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10844:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10845:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10846:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10847:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10848:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10849:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10850:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10851:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10852:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10853:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10854:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10855:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10856:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10857:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10858:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10859:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10860:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10861:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10862:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10863:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10864:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10865:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10866:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10867:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10868:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10869:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10870:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10871:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10872:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10873:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10874:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10875:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10876:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10877:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10878:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10879:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10880:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10881:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10882:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10883:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10884:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10885:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10886:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10887:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10888:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10889:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10890:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10891:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10892:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10893:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10894:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10895:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10896:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10897:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10898:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10899:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10900:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10901:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10902:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10903:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10904:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10905:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10906:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10907:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10908:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10909:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10910:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10911:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10912:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10913:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10914:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10915:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10916:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10917:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10918:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10919:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10920:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10921:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10922:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10923:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10924:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10925:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10926:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10927:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10928:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10929:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10930:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10931:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10932:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10933:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10934:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10935:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10936:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10937:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10938:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10939:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10940:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10941:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10942:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10943:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
10944:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10945:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10946:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10947:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10948:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10949:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
10950:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
10951:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10952:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
10953:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
10954:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
10955:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
10956:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
10957:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
10958:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
10959:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
10960:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
10961:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
10962:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
10963:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
10964:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
10965:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
10966:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
10967:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
10968:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10969:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
10970:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
10971:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
10972:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10973:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10974:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10975:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10976:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10977:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10978:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10979:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10980:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
10981:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
10982:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10983:      112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
10984:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
10985:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
10986:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
10987:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
10988:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
10989:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
10990:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
10991:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
10992:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
10993:      212,    -1,   214,    -1,   216,    -1,    -1,   219,   220,   221,
10994:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
10995:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10996:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10997:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10998:      262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
10999:       -1,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
11000:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
11001:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
11002:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
11003:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
11004:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
11005:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
11006:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
11007:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
11008:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
11009:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
11010:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
11011:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
11012:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
11013:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
11014:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
11015:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
11016:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
11017:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
11018:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
11019:      472,   473,   474,   475,   476,   477,   478,    -1,    -1,    -1,
11020:       -1,    -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,
11021:      492,    -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
11022:      502,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
11023:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
11024:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
11025:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
11026:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
11027:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
11028:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
11029:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
11030:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
11031:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
11032:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
11033:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
11034:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
11035:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
11036:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
11037:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
11038:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
11039:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
11040:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
11041:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
11042:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
11043:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
11044:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
11045:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
11046:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
11047:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
11048:      262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
11049:      272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
11050:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
11051:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
11052:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
11053:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
11054:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
11055:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
11056:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
11057:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
11058:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
11059:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
11060:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
11061:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
11062:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
11063:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
11064:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
11065:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
11066:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
11067:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
11068:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
11069:      472,   473,   474,   475,   476,   477,    -1,    -1,    -1,    -1,
11070:       -1,    -1,    -1,   485,   486,    -1,    -1,     3,     4,     5,
11071:        6,     7,   494,     9,    10,    -1,    -1,    -1,    -1,   501,
11072:      502,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
11073:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
11074:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
11075:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
11076:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
11077:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
11078:       76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
11079:       -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
11080:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
11081:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
11082:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
11083:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
11084:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
11085:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
11086:      156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
11087:       -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
11088:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
11089:      186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
11090:      196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
11091:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
11092:      216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
11093:       -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
11094:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
11095:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
11096:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
11097:      266,   267,   268,    -1,   270,   271,   272,   273,   274,   275,
11098:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
11099:      286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
11100:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
11101:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
11102:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
11103:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
11104:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
11105:      346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
11106:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
11107:       -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
11108:      376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
11109:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
11110:      396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
11111:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
11112:      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
11113:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
11114:      436,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
11115:      446,   447,   448,   449,   450,   451,    -1,    -1,   454,    -1,
11116:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
11117:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
11118:      476,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,
11119:      486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,
11120:       -1,    -1,    -1,    -1,    -1,   501,   502,     3,     4,     5,
11121:        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
11122:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
11123:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
11124:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
11125:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
11126:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
11127:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
11128:       76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
11129:       -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
11130:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
11131:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
11132:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
11133:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
11134:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
11135:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
11136:      156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
11137:       -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
11138:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
11139:      186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
11140:      196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
11141:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
11142:      216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
11143:       -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
11144:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
11145:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
11146:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
11147:      266,   267,   268,    -1,   270,   271,   272,   273,   274,   275,
11148:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
11149:      286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
11150:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
11151:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
11152:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
11153:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
11154:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
11155:      346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
11156:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
11157:       -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
11158:      376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
11159:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
11160:      396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
11161:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
11162:      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
11163:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
11164:      436,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
11165:      446,   447,   448,   449,   450,   451,    -1,    -1,   454,    -1,
11166:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
11167:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
11168:      476,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,
11169:      486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,
11170:       -1,    -1,    -1,    -1,    -1,   501,   502,     3,     4,     5,
11171:        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
11172:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
11173:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
11174:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
11175:       46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
11176:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
11177:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
11178:       76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
11179:       -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
11180:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
11181:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
11182:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
11183:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
11184:      136,    -1,   138,   139,   140,    -1,   142,    -1,   144,    -1,
11185:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
11186:      156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
11187:       -1,   167,   168,    -1,   170,   171,   172,   173,    -1,   175,
11188:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
11189:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
11190:      196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
11191:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
11192:      216,    -1,    -1,   219,   220,   221,   222,   223,   224,   225,
11193:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
11194:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
11195:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
11196:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
11197:      266,   267,   268,    -1,   270,   271,    -1,   273,   274,   275,
11198:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
11199:      286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
11200:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
11201:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
11202:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
11203:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
11204:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
11205:      346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
11206:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
11207:       -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
11208:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
11209:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
11210:      396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
11211:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
11212:      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
11213:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
11214:      436,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
11215:      446,   447,   448,   449,   450,   451,    -1,    -1,   454,    -1,
11216:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
11217:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
11218:      476,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,
11219:      486,     3,    -1,    -1,    -1,    -1,   492,    -1,   494,    -1,
11220:       -1,    -1,    -1,   499,    -1,   501,   502,    19,    20,    21,
11221:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
11222:       -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,
11223:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
11224:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
11225:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
11226:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
11227:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
11228:       92,    -1,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
11229:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
11230:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
11231:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
11232:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
11233:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
11234:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
11235:      162,   163,    -1,   165,    -1,   167,    -1,    -1,   170,   171,
11236:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
11237:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
11238:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
11239:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
11240:      212,    -1,   214,    -1,   216,    -1,    -1,   219,   220,   221,
11241:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,    -1,
11242:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
11243:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
11244:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
11245:      262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
11246:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
11247:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
11248:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
11249:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
11250:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
11251:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
11252:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
11253:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
11254:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
11255:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
11256:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
11257:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
11258:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
11259:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
11260:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
11261:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
11262:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
11263:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
11264:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
11265:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
11266:      472,   473,   474,   475,   476,   477,    -1,    -1,     3,    -1,
11267:        5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11268:       -1,    -1,    -1,   495,    19,    20,    21,    22,    23,    24,
11269:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
11270:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
11271:       45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
11272:       55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
11273:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
11274:       -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
11275:       85,    -1,    87,    88,    89,    90,    91,    92,    -1,    94,
11276:       95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
11277:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
11278:       -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
11279:      125,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
11280:      135,   136,    -1,   138,   139,   140,    -1,   142,   143,   144,
11281:       -1,   146,   147,   148,   149,   150,   151,   152,   153,   154,
11282:      155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
11283:      165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
11284:      175,    -1,   177,    -1,   179,   180,   181,    -1,   183,   184,
11285:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
11286:       -1,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
11287:      205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
11288:       -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
11289:      225,   226,    -1,   228,   229,   230,   231,    -1,   233,   234,
11290:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
11291:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
11292:      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
11293:      265,   266,   267,   268,    -1,   270,   271,   272,   273,    -1,
11294:      275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
11295:      285,   286,   287,   288,    -1,    -1,   291,   292,   293,   294,
11296:      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
11297:      305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
11298:      315,   316,    -1,   318,   319,   320,   321,   322,   323,    -1,
11299:      325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
11300:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
11301:      345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
11302:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
11303:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
11304:      375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
11305:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
11306:      395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
11307:      405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
11308:      415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
11309:      425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
11310:      435,   436,    -1,   438,   439,   440,   441,   442,   443,   444,
11311:       -1,   446,   447,   448,   449,   450,   451,    -1,    -1,   454,
11312:       -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
11313:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
11314:      475,   476,   477,    -1,     3,   480,     5,    -1,    -1,    -1,
11315:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
11316:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
11317:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
11318:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
11319:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
11320:       59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
11321:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
11322:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
11323:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
11324:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
11325:      109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
11326:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
11327:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
11328:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
11329:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
11330:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
11331:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
11332:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
11333:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
11334:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
11335:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
11336:      219,   220,   221,   222,   223,   224,   225,   226,    -1,   228,
11337:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
11338:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
11339:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
11340:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
11341:       -1,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
11342:      279,   280,    -1,   282,   283,    -1,   285,   286,   287,   288,
11343:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
11344:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
11345:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
11346:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
11347:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
11348:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
11349:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
11350:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
11351:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
11352:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
11353:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
11354:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
11355:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
11356:      419,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
11357:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
11358:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
11359:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
11360:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
11361:      469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
11362:        3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11363:       -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
11364:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
11365:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
11366:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
11367:       -1,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
11368:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
11369:       -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
11370:       83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
11371:       -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
11372:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
11373:      113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
11374:      123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
11375:      133,   134,   135,   136,    -1,   138,   139,   140,    -1,   142,
11376:      143,   144,    -1,   146,   147,   148,   149,   150,   151,   152,
11377:      153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
11378:      163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
11379:      173,   174,   175,    -1,   177,    -1,   179,   180,   181,    -1,
11380:      183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
11381:      193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
11382:      203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
11383:       -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
11384:      223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,
11385:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
11386:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
11387:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
11388:      263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
11389:      273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
11390:      283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
11391:      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
11392:      303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
11393:      313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
11394:      323,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
11395:       -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
11396:      343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
11397:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
11398:      363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
11399:      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
11400:       -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
11401:      393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
11402:      403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
11403:       -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
11404:      423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
11405:      433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
11406:      443,   444,    -1,   446,   447,   448,   449,   450,   451,    -1,
11407:       -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
11408:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
11409:      473,   474,   475,   476,   477,    -1,     3,    -1,    -1,    -1,
11410:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11411:       -1,   494,    19,    20,    21,    22,    23,    24,    25,    26,
11412:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
11413:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
11414:       47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
11415:       57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
11416:       -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
11417:       77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
11418:       87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
11419:       97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
11420:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
11421:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
11422:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
11423:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
11424:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
11425:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
11426:      167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
11427:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
11428:      187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
11429:      197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
11430:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
11431:      217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
11432:       -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
11433:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
11434:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
11435:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
11436:      267,   268,    -1,   270,   271,   272,   273,    -1,   275,   276,
11437:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
11438:      287,   288,    -1,    -1,   291,   292,   293,   294,   295,   296,
11439:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
11440:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
11441:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
11442:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
11443:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
11444:       -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
11445:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
11446:      367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
11447:      377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
11448:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
11449:      397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
11450:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
11451:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
11452:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
11453:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
11454:      447,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
11455:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
11456:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
11457:      477,    -1,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
11458:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,
11459:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
11460:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
11461:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
11462:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
11463:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
11464:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
11465:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
11466:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
11467:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
11468:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
11469:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
11470:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
11471:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
11472:      151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
11473:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
11474:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
11475:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
11476:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
11477:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
11478:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
11479:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
11480:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
11481:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
11482:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
11483:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
11484:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
11485:       -1,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
11486:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
11487:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
11488:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
11489:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
11490:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
11491:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
11492:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
11493:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
11494:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
11495:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
11496:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
11497:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
11498:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
11499:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
11500:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
11501:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
11502:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
11503:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
11504:      471,   472,   473,   474,   475,   476,   477,    -1,     3,    -1,
11505:       -1,    -1,    -1,    -1,   485,   486,   487,    -1,    -1,    -1,
11506:       -1,    -1,    -1,   494,    19,    20,    21,    22,    23,    24,
11507:       25,    26,    -1,    28,    29,    30,    31,    32,    -1,    -1,
11508:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
11509:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
11510:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
11511:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
11512:       -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
11513:       85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
11514:       95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11515:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
11516:       -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
11517:      125,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
11518:      135,   136,    -1,   138,   139,   140,    -1,   142,   143,   144,
11519:       -1,   146,   147,   148,   149,   150,   151,   152,   153,   154,
11520:      155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
11521:      165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,
11522:      175,    -1,   177,    -1,   179,   180,   181,    -1,   183,   184,
11523:      185,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
11524:       -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
11525:      205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
11526:       -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
11527:      225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
11528:      235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
11529:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
11530:      255,   256,   257,   258,   259,   260,   261,   262,    -1,   264,
11531:      265,   266,   267,   268,    -1,   270,   271,    -1,   273,    -1,
11532:      275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
11533:       -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,   294,
11534:       -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
11535:      305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
11536:      315,   316,    -1,   318,   319,   320,   321,   322,   323,    -1,
11537:      325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
11538:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
11539:      345,   346,    -1,   348,   349,    -1,   351,   352,   353,   354,
11540:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
11541:      365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
11542:      375,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
11543:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
11544:      395,   396,   397,   398,    -1,   400,   401,   402,   403,    -1,
11545:      405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
11546:      415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
11547:      425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
11548:      435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
11549:       -1,   446,    -1,   448,   449,   450,   451,    -1,    -1,   454,
11550:       -1,   456,   457,   458,   459,   460,   461,   462,   463,   464,
11551:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
11552:      475,   476,   477,    -1,     3,   480,    -1,    -1,    -1,    -1,
11553:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
11554:       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
11555:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
11556:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
11557:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
11558:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
11559:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
11560:       79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
11561:       89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
11562:       -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
11563:      109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
11564:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
11565:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
11566:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
11567:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
11568:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
11569:       -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
11570:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
11571:      189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
11572:      199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
11573:      209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
11574:      219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
11575:       -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
11576:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
11577:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
11578:      259,   260,   261,   262,    -1,   264,   265,   266,   267,   268,
11579:       -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
11580:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
11581:       -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
11582:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
11583:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
11584:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
11585:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
11586:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
11587:      349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
11588:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
11589:      369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
11590:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
11591:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
11592:       -1,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
11593:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
11594:      419,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
11595:       -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
11596:      439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
11597:      449,   450,   451,    -1,    -1,   454,    -1,   456,   457,   458,
11598:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
11599:      469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
11600:        3,   480,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11601:       -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
11602:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
11603:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
11604:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
11605:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
11606:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
11607:       -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
11608:       83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
11609:       -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
11610:       -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
11611:      113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
11612:      123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
11613:      133,   134,   135,   136,    -1,   138,   139,   140,    -1,   142,
11614:      143,   144,    -1,   146,   147,   148,   149,   150,   151,   152,
11615:      153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
11616:      163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
11617:      173,    -1,   175,    -1,   177,    -1,   179,   180,   181,    -1,
11618:      183,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
11619:      193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
11620:      203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
11621:       -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
11622:      223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
11623:      233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
11624:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
11625:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
11626:       -1,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
11627:      273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
11628:      283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
11629:       -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
11630:      303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
11631:      313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
11632:      323,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
11633:       -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
11634:      343,   344,   345,   346,    -1,   348,   349,    -1,   351,   352,
11635:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
11636:      363,   364,   365,   366,   367,   368,   369,   370,   371,    -1,
11637:      373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
11638:       -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
11639:      393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
11640:      403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
11641:       -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
11642:      423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
11643:      433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
11644:      443,   444,    -1,   446,    -1,   448,   449,   450,   451,    -1,
11645:       -1,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
11646:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
11647:      473,   474,   475,   476,   477,    -1,     3,   480,     5,    -1,
11648:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11649:       -1,   494,    19,    20,    21,    22,    23,    24,    25,    26,
11650:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
11651:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
11652:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
11653:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
11654:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
11655:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
11656:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
11657:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
11658:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
11659:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
11660:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
11661:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
11662:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
11663:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
11664:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
11665:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
11666:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
11667:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
11668:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
11669:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
11670:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
11671:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
11672:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
11673:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
11674:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
11675:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
11676:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
11677:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
11678:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
11679:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
11680:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
11681:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
11682:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
11683:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
11684:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
11685:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
11686:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
11687:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
11688:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
11689:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
11690:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
11691:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
11692:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
11693:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
11694:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
11695:      477,    -1,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
11696:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,
11697:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
11698:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
11699:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
11700:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
11701:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
11702:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
11703:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
11704:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
11705:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
11706:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
11707:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
11708:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
11709:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
11710:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
11711:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
11712:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
11713:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
11714:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
11715:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
11716:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
11717:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
11718:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
11719:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
11720:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
11721:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
11722:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
11723:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
11724:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
11725:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
11726:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
11727:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
11728:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
11729:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
11730:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
11731:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
11732:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
11733:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
11734:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
11735:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
11736:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
11737:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
11738:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
11739:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
11740:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
11741:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
11742:      471,   472,   473,   474,   475,   476,   477,    -1,     3,    -1,
11743:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11744:       -1,    -1,    -1,   494,    19,    20,    21,    22,    23,    24,
11745:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
11746:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
11747:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
11748:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
11749:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
11750:       -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
11751:       85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
11752:       95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11753:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
11754:       -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
11755:      125,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
11756:      135,   136,    -1,   138,   139,   140,    -1,   142,   143,   144,
11757:       -1,   146,   147,   148,   149,   150,   151,   152,   153,   154,
11758:      155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
11759:      165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,
11760:      175,    -1,   177,    -1,   179,   180,   181,    -1,   183,   184,
11761:      185,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
11762:       -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
11763:      205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
11764:       -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
11765:      225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
11766:      235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
11767:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
11768:      255,   256,   257,   258,   259,   260,   261,   262,    -1,   264,
11769:      265,   266,   267,   268,    -1,   270,   271,    -1,   273,    -1,
11770:      275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
11771:       -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,   294,
11772:       -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
11773:      305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
11774:      315,   316,    -1,   318,   319,   320,   321,   322,   323,    -1,
11775:      325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
11776:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
11777:      345,   346,    -1,   348,   349,    -1,   351,   352,   353,   354,
11778:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
11779:      365,    -1,   367,   368,   369,   370,   371,    -1,   373,   374,
11780:      375,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
11781:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
11782:      395,   396,   397,   398,    -1,   400,   401,    -1,   403,    -1,
11783:      405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
11784:      415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
11785:      425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
11786:      435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
11787:       -1,   446,    -1,   448,   449,   450,   451,    -1,    -1,   454,
11788:       -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
11789:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
11790:      475,   476,   477,    -1,     3,    -1,    -1,    -1,    -1,    -1,
11791:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,
11792:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
11793:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
11794:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
11795:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
11796:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
11797:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
11798:       79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
11799:       89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
11800:       -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
11801:      109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
11802:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
11803:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
11804:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
11805:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
11806:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
11807:       -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
11808:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
11809:      189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
11810:      199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
11811:      209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
11812:      219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
11813:       -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
11814:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
11815:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
11816:      259,   260,   261,   262,    -1,   264,   265,   266,   267,   268,
11817:       -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
11818:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
11819:       -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
11820:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
11821:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
11822:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
11823:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
11824:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
11825:      349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
11826:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
11827:      369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
11828:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
11829:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
11830:       -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
11831:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
11832:      419,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
11833:       -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
11834:      439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
11835:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
11836:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
11837:      469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
11838:        3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11839:       -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,
11840:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
11841:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
11842:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
11843:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
11844:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
11845:       -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
11846:       83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
11847:       -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
11848:       -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
11849:      113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
11850:      123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
11851:      133,   134,   135,   136,    -1,   138,   139,   140,    -1,   142,
11852:      143,   144,    -1,   146,   147,   148,   149,   150,   151,   152,
11853:      153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
11854:      163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
11855:      173,    -1,   175,    -1,   177,    -1,   179,   180,   181,    -1,
11856:      183,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
11857:      193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
11858:      203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
11859:       -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
11860:      223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
11861:      233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
11862:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
11863:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
11864:       -1,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
11865:      273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
11866:      283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
11867:       -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
11868:      303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
11869:      313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
11870:      323,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
11871:       -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
11872:      343,   344,   345,   346,    -1,   348,   349,    -1,   351,   352,
11873:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
11874:      363,   364,   365,    -1,   367,   368,   369,   370,   371,    -1,
11875:      373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
11876:       -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
11877:      393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
11878:      403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
11879:       -1,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
11880:      423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
11881:      433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
11882:      443,   444,    -1,   446,    -1,   448,   449,   450,   451,    -1,
11883:       -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
11884:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
11885:      473,   474,   475,   476,   477,    -1,    -1,    -1,    -1,     3,
11886:        4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
11887:       -1,   494,    16,    17,    18,    19,    20,    21,    22,    23,
11888:       24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
11889:       34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
11890:       44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
11891:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
11892:       64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
11893:       74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
11894:       84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
11895:       94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
11896:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
11897:      114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
11898:      124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
11899:      134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
11900:      144,   145,   146,   147,   148,   149,    -1,   151,   152,   153,
11901:      154,   155,    -1,   157,   158,   159,   160,   161,   162,   163,
11902:      164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
11903:      174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
11904:      184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
11905:      194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
11906:      204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
11907:      214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
11908:      224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
11909:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
11910:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
11911:      254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
11912:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
11913:      274,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
11914:      284,   285,   286,   287,   288,   289,   290,   291,    -1,   293,
11915:      294,   295,    -1,   297,   298,   299,   300,   301,   302,   303,
11916:      304,   305,   306,   307,   308,   309,    -1,   311,   312,    -1,
11917:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
11918:      324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
11919:      334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
11920:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
11921:      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
11922:      364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
11923:      374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
11924:      384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
11925:      394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
11926:      404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
11927:      414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
11928:      424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
11929:      434,   435,   436,   437,   438,   439,   440,   441,   442,    -1,
11930:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
11931:      454,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
11932:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11933:      474,   475,   476,   477,    -1,     3,    -1,   481,   482,   483,
11934:        8,   485,   486,   487,   488,   489,   490,    -1,    16,    17,
11935:       18,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
11936:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11937:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
11938:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
11939:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
11940:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
11941:       78,    79,    80,    81,    -1,    83,    84,    85,    -1,    87,
11942:       88,    89,    90,    91,    92,    -1,    -1,    95,    96,    97,
11943:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,
11944:      108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
11945:      118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
11946:      128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
11947:      138,   139,   140,    -1,   142,   143,   144,    -1,   146,   147,
11948:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
11949:      158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
11950:       -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,
11951:       -1,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
11952:      188,   189,    -1,   191,   192,   193,   194,    -1,   196,   197,
11953:      198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
11954:      208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
11955:       -1,   219,    -1,   221,   222,   223,   224,   225,    -1,    -1,
11956:      228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,
11957:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
11958:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
11959:      258,   259,   260,   261,   262,    -1,   264,   265,   266,   267,
11960:      268,    -1,   270,   271,    -1,   273,    -1,   275,   276,   277,
11961:      278,   279,   280,    -1,   282,   283,    -1,    -1,   286,   287,
11962:      288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,
11963:      298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
11964:      308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
11965:      318,   319,   320,   321,   322,   323,    -1,   325,   326,   327,
11966:      328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
11967:      338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
11968:      348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
11969:      358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
11970:      368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
11971:       -1,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
11972:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
11973:      398,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
11974:      408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
11975:      418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
11976:      428,    -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,
11977:      438,   439,   440,   441,   442,   443,   444,    -1,   446,    -1,
11978:      448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
11979:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
11980:      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
11981:       -1,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
11982:      488,   489,   490,     8,    -1,    -1,    11,    -1,    -1,    -1,
11983:       -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
11984:       -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    33,    16,
11985:       17,    18,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
11986:       -1,    -1,    -1,    48,    -1,    -1,    33,    -1,    -1,    -1,
11987:        8,    -1,    -1,    11,    41,    -1,    -1,    -1,    16,    17,
11988:       18,    48,    -1,    -1,    -1,    -1,    -1,    -1,    73,     8,
11989:       -1,    -1,    11,    -1,    -1,    33,    -1,    16,    17,    18,
11990:       -1,    -1,    -1,    41,    -1,    -1,    73,    -1,    -1,    -1,
11991:       48,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,
11992:       -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
11993:       -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
11994:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11995:       -1,    -1,    -1,    -1,    73,     8,    -1,    -1,    11,    -1,
11996:       -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
11997:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11998:       33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,   174,
11999:       -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
12000:       -1,    -1,    -1,    -1,    -1,   190,    -1,   174,    -1,    -1,
12001:      195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12002:       73,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,
12003:       -1,    -1,   217,   218,    -1,    -1,   174,    -1,    -1,    -1,
12004:       -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,
12005:      217,   218,   190,    -1,    -1,   174,    -1,   195,    -1,    -1,
12006:       -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
12007:       -1,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,   217,
12008:      218,    -1,    -1,    -1,   269,    -1,    -1,   272,    -1,    -1,
12009:       -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,   217,   218,
12010:       -1,   286,   269,    -1,   289,   272,    -1,    -1,    -1,    -1,
12011:       -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,   286,
12012:       -1,   174,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12013:       -1,   269,    -1,    -1,   272,    -1,    -1,   190,    -1,    -1,
12014:       -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,   286,    -1,
12015:      269,   289,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,
12016:       -1,    -1,    -1,    -1,   217,   218,    -1,   286,    -1,    -1,
12017:      289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,
12018:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12019:       -1,    -1,     8,   378,    -1,    11,    -1,    -1,    -1,    -1,
12020:       16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12021:       -1,   378,    -1,    -1,    -1,    -1,   269,    33,    -1,   272,
12022:       -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
12023:       -1,    -1,    48,   286,    -1,    -1,   289,    -1,    -1,    -1,
12024:      378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12025:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,   378,
12026:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12027:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12028:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12029:       -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,
12030:      485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
12031:      495,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
12032:      487,   488,   489,   490,    -1,   378,    -1,    -1,   495,    -1,
12033:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12034:      478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
12035:      488,   489,   490,    -1,    -1,    -1,    -1,   495,   174,   478,
12036:       -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
12037:      489,   490,    -1,    -1,   190,    -1,   495,    -1,     8,   195,
12038:       -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,
12039:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12040:       -1,   217,   218,    33,    -1,    -1,    -1,    -1,    -1,    -1,
12041:       -1,    41,    -1,    -1,    -1,   231,    -1,    -1,    48,    -1,
12042:       -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,
12043:      483,    -1,   485,   486,   487,   488,   489,   490,     8,    -1,
12044:       -1,    11,   495,    73,    -1,    -1,    16,    17,    18,    -1,
12045:       -1,    -1,    -1,   269,    -1,    -1,   272,    -1,    -1,    -1,
12046:       -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
12047:      286,    41,    -1,   289,    -1,    -1,    -1,    -1,    48,    -1,
12048:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12049:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
12050:       -1,    11,    -1,    73,    -1,    -1,    16,    17,    18,    -1,
12051:       -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
12052:       -1,    -1,    -1,    33,    16,    17,    18,    -1,    -1,    -1,
12053:       -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
12054:       -1,    33,    -1,    -1,   174,    -1,    -1,    -1,    -1,    41,
12055:       -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,     8,    -1,
12056:      190,    11,   378,    73,    -1,   195,    16,    17,    18,    -1,
12057:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12058:       -1,    73,    -1,    33,    -1,    -1,    -1,   217,   218,    -1,
12059:       -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
12060:       -1,   231,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,
12061:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12062:      190,    -1,    -1,    73,    -1,   195,    -1,    -1,    -1,    -1,
12063:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,
12064:       -1,    -1,   272,    -1,    -1,    -1,    -1,   217,   218,    -1,
12065:       -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,
12066:       -1,   231,   478,    -1,   174,   481,   482,   483,    -1,   485,
12067:      486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,   495,
12068:      190,    -1,   174,    -1,    -1,   195,    -1,    -1,    -1,    -1,
12069:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,   269,
12070:       -1,    -1,   272,   195,    -1,    -1,    -1,   217,   218,    -1,
12071:       -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,
12072:       -1,   231,    -1,    -1,   174,   217,   218,    -1,    -1,    -1,
12073:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,
12074:      190,    -1,    -1,    -1,    -1,   195,    -1,    -1,   378,    -1,
12075:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,
12076:       -1,    -1,   272,    -1,    -1,    -1,    -1,   217,   218,    -1,
12077:       -1,    -1,    -1,    -1,    -1,    -1,   286,   269,    -1,   289,
12078:      272,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12079:       -1,    -1,    -1,    -1,   286,    -1,    -1,   289,    -1,    -1,
12080:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,
12081:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,
12082:       -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12083:       -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,
12084:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,
12085:       -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
12086:      490,    -1,    -1,    -1,    -1,   495,    -1,    -1,   378,    -1,
12087:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12088:       -1,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,
12089:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12090:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,
12091:       -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
12092:      490,    -1,    -1,    -1,    -1,   495,    -1,    -1,   378,    -1,
12093:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12094:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12095:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12096:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,
12097:       -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
12098:      490,    -1,    -1,    -1,    -1,   495,   478,    -1,    -1,   481,
12099:      482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
12100:       -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,    -1,    -1,
12101:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12102:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,     3,
12103:       -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
12104:      490,    -1,    -1,   493,    -1,    19,    20,    21,    22,    23,
12105:       24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
12106:       34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
12107:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
12108:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
12109:       64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
12110:       -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
12111:       84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
12112:       -1,    95,    96,    97,    98,    99,   100,    -1,   102,   103,
12113:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12114:      114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
12115:      124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
12116:      134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
12117:      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
12118:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
12119:      164,   165,   166,   167,    -1,   169,    -1,   171,   172,   173,
12120:       -1,   175,   176,   177,   178,   179,   180,   181,   182,   183,
12121:      184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
12122:      194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
12123:       -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
12124:      214,   215,   216,    -1,    -1,   219,    -1,   221,   222,   223,
12125:      224,   225,   226,   227,   228,    -1,   230,    -1,   232,   233,
12126:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
12127:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12128:      254,   255,   256,   257,   258,   259,   260,   261,   262,    -1,
12129:      264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
12130:      274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
12131:      284,   285,   286,   287,   288,   289,   290,   291,   292,    -1,
12132:      294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
12133:      304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
12134:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
12135:      324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
12136:      334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
12137:      344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
12138:      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
12139:      364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
12140:      374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
12141:      384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
12142:      394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
12143:       -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
12144:      414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
12145:      424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
12146:      434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
12147:      444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
12148:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
12149:      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
12150:      474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,    -1,
12151:       -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,
12152:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
12153:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
12154:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
12155:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
12156:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
12157:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
12158:       79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
12159:       89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
12160:       -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
12161:      109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
12162:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
12163:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
12164:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
12165:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
12166:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
12167:       -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
12168:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
12169:      189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
12170:      199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
12171:      209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
12172:      219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
12173:       -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
12174:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
12175:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
12176:      259,   260,   261,   262,    -1,   264,   265,   266,   267,   268,
12177:       -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
12178:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
12179:       -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
12180:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
12181:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
12182:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
12183:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
12184:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
12185:      349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
12186:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
12187:      369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
12188:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
12189:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
12190:       -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
12191:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
12192:      419,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
12193:       -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
12194:      439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
12195:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
12196:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
12197:      469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
12198:        4,     5,    -1,    -1,    -1,     9,    -1,    -1,   487,    -1,
12199:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
12200:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
12201:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
12202:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
12203:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
12204:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
12205:       -1,    -1,    76,    77,    78,    79,    80,    81,    -1,    83,
12206:       84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
12207:       -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
12208:       -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12209:      114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
12210:       -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
12211:      134,   135,   136,    -1,   138,   139,   140,    -1,   142,   143,
12212:      144,    -1,   146,   147,   148,   149,   150,   151,   152,   153,
12213:      154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
12214:       -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
12215:       -1,   175,    -1,   177,    -1,   179,   180,   181,    -1,   183,
12216:      184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
12217:      194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
12218:       -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
12219:      214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
12220:      224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
12221:      234,   235,    -1,    -1,   238,   239,   240,   241,   242,   243,
12222:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12223:      254,   255,   256,   257,   258,   259,   260,   261,   262,    -1,
12224:      264,   265,   266,   267,   268,    -1,   270,   271,    -1,   273,
12225:       -1,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
12226:      284,    -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,
12227:      294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
12228:      304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
12229:      314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
12230:       -1,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
12231:      334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
12232:      344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
12233:      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
12234:      364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
12235:      374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
12236:      384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
12237:      394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
12238:       -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
12239:       -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
12240:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
12241:      434,   435,    -1,    -1,   438,   439,   440,   441,   442,   443,
12242:      444,    -1,   446,    -1,   448,   449,   450,   451,    -1,    -1,
12243:      454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
12244:      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
12245:      474,   475,   476,   477,     3,     4,     5,    -1,    -1,    -1,
12246:        9,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12247:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
12248:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
12249:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
12250:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
12251:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
12252:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
12253:       79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
12254:       89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
12255:       -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
12256:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
12257:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
12258:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
12259:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
12260:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
12261:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
12262:       -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
12263:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
12264:      189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
12265:      199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
12266:      209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
12267:      219,    -1,   221,   222,   223,   224,   225,    -1,    -1,   228,
12268:       -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
12269:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
12270:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
12271:      259,   260,   261,   262,    -1,   264,   265,   266,   267,   268,
12272:       -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
12273:      279,   280,    -1,   282,   283,   284,    -1,   286,   287,   288,
12274:       -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
12275:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
12276:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
12277:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
12278:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
12279:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
12280:      349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
12281:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
12282:      369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
12283:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
12284:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
12285:       -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
12286:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
12287:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
12288:       -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
12289:      439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
12290:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
12291:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
12292:      469,   470,   471,   472,   473,   474,   475,   476,   477,     3,
12293:        4,     5,    -1,    -1,    -1,     9,   485,   486,    -1,    -1,
12294:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
12295:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
12296:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
12297:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
12298:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
12299:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
12300:       -1,    -1,    76,    77,    78,    79,    80,    81,    -1,    83,
12301:       84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
12302:       -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
12303:       -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12304:      114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
12305:       -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
12306:      134,   135,   136,    -1,   138,   139,   140,    -1,   142,   143,
12307:      144,    -1,   146,   147,   148,   149,   150,   151,   152,   153,
12308:      154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
12309:       -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
12310:       -1,   175,    -1,   177,    -1,   179,   180,   181,    -1,   183,
12311:      184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
12312:      194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
12313:       -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
12314:      214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
12315:      224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
12316:      234,   235,    -1,    -1,   238,   239,   240,   241,   242,   243,
12317:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12318:      254,   255,   256,   257,   258,   259,   260,   261,   262,    -1,
12319:      264,   265,   266,   267,   268,    -1,   270,   271,    -1,   273,
12320:       -1,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
12321:      284,    -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,
12322:      294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
12323:      304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
12324:      314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
12325:       -1,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
12326:      334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
12327:      344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
12328:      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
12329:      364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
12330:      374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
12331:      384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
12332:      394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
12333:       -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
12334:       -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
12335:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
12336:      434,   435,    -1,    -1,   438,   439,   440,   441,   442,   443,
12337:      444,    -1,   446,    -1,   448,   449,   450,   451,    -1,    -1,
12338:      454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
12339:      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
12340:      474,   475,   476,   477,    -1,     8,    -1,    -1,    11,    -1,
12341:       -1,   485,   486,    16,    17,    18,    -1,    -1,    -1,    -1,
12342:       -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
12343:       33,    16,    17,    18,    37,    -1,    -1,    -1,    41,    -1,
12344:       -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    33,    -1,
12345:       -1,    -1,     8,    -1,    -1,    11,    41,    -1,    -1,    -1,
12346:       16,    17,    18,    48,    -1,    -1,    -1,    -1,    -1,    -1,
12347:       73,     8,    -1,    -1,    11,    -1,    -1,    33,    -1,    16,
12348:       17,    18,    -1,    -1,    -1,    41,    -1,    -1,    73,    -1,
12349:       -1,    -1,    48,    -1,    -1,    -1,    33,    -1,    -1,    36,
12350:       -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
12351:       -1,    48,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
12352:       -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12353:       -1,    -1,    -1,    -1,    -1,    -1,    73,     8,    -1,    -1,
12354:       11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
12355:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12356:       -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12357:       41,   174,    -1,    -1,    -1,    -1,    -1,    48,    -1,   164,
12358:       -1,    -1,    -1,    -1,   169,    -1,    -1,   190,    -1,   174,
12359:       -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12360:       -1,    -1,    73,    -1,    -1,   190,    -1,   163,    -1,    -1,
12361:      195,    -1,    -1,    -1,   217,   218,    -1,    -1,   174,    -1,
12362:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,
12363:       -1,    -1,   217,   218,   190,    -1,    -1,   174,    -1,   195,
12364:       -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,
12365:       -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,
12366:       -1,   217,   218,    -1,    -1,    -1,   269,    -1,    -1,   272,
12367:       -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,
12368:      217,   218,    -1,   286,   269,    -1,   289,   272,    -1,    -1,
12369:       -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
12370:       -1,   286,    -1,   174,   289,    -1,    -1,    -1,    -1,    -1,
12371:       -1,    -1,    -1,   269,    -1,    -1,   272,    -1,    -1,   190,
12372:       -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
12373:      286,    -1,   269,   289,    -1,   272,    -1,    -1,    -1,    -1,
12374:       -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,   286,
12375:       -1,    -1,   289,    -1,    -1,    -1,   312,    -1,    -1,    -1,
12376:      231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12377:       -1,    -1,    -1,    -1,     8,   378,    -1,    11,    -1,    -1,
12378:       -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
12379:       -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,   269,    33,
12380:       -1,   272,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,
12381:       -1,    -1,    -1,    -1,    48,   286,    -1,    -1,   289,    -1,
12382:       -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12383:       -1,    -1,    -1,    -1,   437,    -1,   307,    -1,    -1,    73,
12384:       -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12385:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12386:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12387:       -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,
12388:      483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
12389:       -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,
12390:      485,   486,   487,   488,   489,   490,    -1,   378,    -1,    -1,
12391:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12392:       -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,
12393:      486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
12394:      174,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
12395:      487,   488,   489,   490,    -1,     8,   190,    -1,    11,    -1,
12396:       -1,   195,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
12397:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12398:       33,    -1,    -1,   217,   218,    -1,    -1,    -1,    41,    -1,
12399:       -1,    -1,    -1,    -1,    -1,    48,    -1,   231,    -1,    -1,
12400:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,
12401:      481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
12402:       73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12403:       -1,    -1,    -1,    -1,    -1,   269,     8,    -1,   272,    11,
12404:       -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
12405:       -1,    -1,   286,    -1,    -1,   289,    -1,    -1,    -1,    -1,
12406:       -1,    33,    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,
12407:       -1,    -1,    -1,    -1,    -1,     8,    48,    -1,    11,    -1,
12408:       -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
12409:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12410:       33,    73,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
12411:       -1,    -1,    -1,    -1,    -1,    48,   169,    -1,    -1,    -1,
12412:        8,   174,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,
12413:       18,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,
12414:       73,    -1,   195,    -1,   378,    33,    -1,    -1,    36,    -1,
12415:       -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,
12416:       48,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
12417:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,
12418:       -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
12419:       -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
12420:       -1,    -1,   174,    16,    17,    18,    -1,    -1,    -1,    -1,
12421:       -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,   190,   272,
12422:       33,    -1,    -1,   195,    -1,    -1,    -1,    -1,    41,    -1,
12423:       -1,    -1,    -1,   286,    -1,    48,   289,    -1,    -1,    -1,
12424:       -1,   174,    -1,    -1,   478,   217,   218,   481,   482,   483,
12425:       -1,   485,   486,   487,   488,   489,   490,   190,    -1,   231,
12426:       73,     8,   195,    -1,    11,    -1,    -1,    -1,    -1,    16,
12427:       17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12428:       -1,    -1,    -1,    -1,   217,   218,   174,    -1,    -1,    -1,
12429:       -1,    -1,    -1,    -1,    41,    -1,    -1,   269,   231,    -1,
12430:      272,    48,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,
12431:       -1,    -1,    -1,    -1,   286,    -1,    -1,   289,    -1,    -1,
12432:       -1,    -1,    -1,    -1,    -1,   378,    73,    -1,    -1,   217,
12433:      218,    -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,   272,
12434:       -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,
12435:       -1,    -1,    -1,   286,     8,    -1,   289,    11,    -1,    -1,
12436:       -1,   174,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
12437:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,    33,
12438:       -1,   269,   195,    -1,   272,    -1,    -1,    41,    -1,    -1,
12439:       -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,   286,    -1,
12440:       -1,   289,    -1,    -1,   217,   218,   378,    -1,    -1,    -1,
12441:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    73,
12442:       -1,    -1,    -1,    -1,    -1,   478,    -1,   174,   481,   482,
12443:      483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
12444:       -1,    -1,    -1,   190,    -1,   378,    -1,    -1,   195,    -1,
12445:       -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,   272,
12446:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12447:      217,   218,    -1,   286,    -1,    -1,   289,   410,    -1,    -1,
12448:       -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
12449:      378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12450:       -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,
12451:      482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
12452:      174,    -1,   269,    -1,    -1,   272,    -1,    -1,    -1,    -1,
12453:       -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,   286,
12454:       -1,   195,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,
12455:      483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
12456:       -1,    -1,    -1,   217,   218,   378,    -1,    -1,    -1,    -1,
12457:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,     8,
12458:       -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
12459:      478,    -1,    -1,   481,   482,   483,    -1,   485,   486,   487,
12460:      488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12461:       -1,    -1,    41,    -1,    -1,   269,    -1,    -1,   272,    48,
12462:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12463:       -1,   378,   286,    -1,    -1,   289,    -1,    -1,    -1,    -1,
12464:       -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
12465:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12466:       -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,
12467:      483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
12468:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12469:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12470:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12471:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12472:       -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,
12473:       -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
12474:      487,   488,   489,   490,    -1,   174,    -1,    -1,    -1,    -1,
12475:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12476:       -1,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
12477:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12478:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
12479:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12480:       -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12481:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12482:       -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,
12483:       -1,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
12484:       -1,    -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,
12485:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,
12486:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12487:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12488:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12489:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12490:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12491:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12492:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12493:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12494:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
12495:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12496:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12497:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12498:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12499:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12500:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12501:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12502:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12503:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12504:       -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,   478,
12505:       -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
12506:      489,   490,    19,    20,    21,    22,    23,    24,    25,    26,
12507:       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
12508:       37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
12509:       47,    48,    49,    -1,    51,    52,    53,    54,    55,    56,
12510:       57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
12511:       67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
12512:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
12513:       87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
12514:       97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
12515:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
12516:      117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
12517:      127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
12518:      137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
12519:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
12520:      157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
12521:      167,    -1,   169,    -1,   171,   172,   173,    -1,   175,   176,
12522:      177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
12523:      187,   188,   189,    -1,   191,   192,   193,   194,   195,   196,
12524:      197,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
12525:      207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
12526:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
12527:      227,   228,    -1,   230,    -1,   232,   233,   234,   235,   236,
12528:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
12529:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
12530:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
12531:      267,   268,   269,   270,   271,    -1,   273,   274,   275,   276,
12532:      277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
12533:      287,   288,   289,   290,   291,   292,    -1,   294,    -1,   296,
12534:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
12535:      307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
12536:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
12537:      327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
12538:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
12539:      347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
12540:      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
12541:      367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
12542:      377,    -1,   379,   380,   381,   382,   383,   384,   385,   386,
12543:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
12544:      397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
12545:      407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
12546:      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
12547:      427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
12548:      437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
12549:       -1,   448,   449,   450,   451,   452,   453,   454,   455,   456,
12550:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
12551:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
12552:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12553:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12554:       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
12555:       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
12556:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12557:       52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
12558:       62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
12559:       72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
12560:       -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
12561:       92,    93,    -1,    95,    96,    97,    98,    99,   100,    -1,
12562:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
12563:      112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
12564:      122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
12565:      132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
12566:      142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
12567:      152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
12568:      162,   163,   164,   165,   166,   167,    -1,   169,    -1,   171,
12569:      172,   173,    -1,   175,   176,   177,   178,   179,   180,   181,
12570:      182,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
12571:      192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
12572:      202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
12573:      212,   213,   214,   215,   216,    -1,    -1,   219,    -1,   221,
12574:      222,   223,   224,   225,   226,   227,   228,    -1,   230,    -1,
12575:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
12576:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12577:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
12578:      262,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
12579:       -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
12580:      282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
12581:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
12582:      302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
12583:      312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
12584:      322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
12585:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
12586:      342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
12587:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
12588:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
12589:      372,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
12590:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
12591:      392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
12592:      402,   403,    -1,   405,   406,   407,   408,   409,   410,   411,
12593:      412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
12594:      422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
12595:      432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
12596:      442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
12597:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
12598:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
12599:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
12600:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12601:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
12602:       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
12603:       37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
12604:       47,    48,    49,    -1,    51,    52,    53,    54,    55,    56,
12605:       57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
12606:       67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
12607:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
12608:       87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
12609:       97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
12610:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
12611:      117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
12612:      127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
12613:      137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
12614:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
12615:      157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
12616:      167,    -1,   169,    -1,   171,   172,   173,    -1,   175,   176,
12617:      177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
12618:      187,   188,   189,    -1,   191,   192,   193,   194,   195,   196,
12619:      197,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
12620:      207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
12621:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
12622:      227,   228,    -1,   230,    -1,   232,   233,   234,   235,   236,
12623:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
12624:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
12625:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
12626:      267,   268,   269,   270,   271,    -1,   273,   274,   275,   276,
12627:      277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
12628:      287,   288,   289,   290,   291,   292,    -1,   294,    -1,   296,
12629:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
12630:      307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
12631:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
12632:      327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
12633:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
12634:      347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
12635:      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
12636:      367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
12637:      377,    -1,   379,   380,   381,   382,   383,   384,   385,   386,
12638:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
12639:      397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
12640:      407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
12641:      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
12642:      427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
12643:      437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
12644:       -1,   448,   449,   450,   451,   452,   453,   454,   455,   456,
12645:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
12646:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
12647:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12648:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12649:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
12650:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
12651:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
12652:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    61,
12653:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
12654:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
12655:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
12656:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
12657:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
12658:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
12659:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
12660:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
12661:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
12662:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
12663:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
12664:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
12665:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
12666:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
12667:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
12668:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
12669:      222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
12670:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
12671:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12672:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
12673:      262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
12674:      272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
12675:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
12676:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
12677:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
12678:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
12679:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
12680:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
12681:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
12682:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
12683:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
12684:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
12685:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
12686:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
12687:       -1,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
12688:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
12689:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
12690:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
12691:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
12692:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
12693:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
12694:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
12695:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12696:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
12697:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
12698:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
12699:       47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
12700:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
12701:       -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
12702:       77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
12703:       87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
12704:       97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
12705:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
12706:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
12707:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
12708:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
12709:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
12710:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
12711:      167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
12712:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
12713:      187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
12714:      197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
12715:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
12716:      217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
12717:       -1,   228,   229,   230,   231,    -1,   233,   234,   235,    -1,
12718:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
12719:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
12720:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
12721:      267,   268,    -1,   270,   271,   272,   273,    -1,   275,   276,
12722:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
12723:      287,   288,    -1,    -1,   291,   292,   293,   294,   295,   296,
12724:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
12725:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
12726:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
12727:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
12728:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
12729:       -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
12730:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
12731:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
12732:      377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
12733:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
12734:      397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
12735:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
12736:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
12737:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
12738:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
12739:      447,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
12740:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
12741:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
12742:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12743:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12744:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
12745:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
12746:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12747:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
12748:       62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
12749:       72,    -1,    -1,    75,    76,    77,    78,    79,    80,    81,
12750:       -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
12751:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
12752:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
12753:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
12754:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
12755:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
12756:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
12757:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
12758:      162,   163,    -1,   165,   166,   167,    -1,    -1,    -1,   171,
12759:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
12760:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
12761:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
12762:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
12763:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
12764:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
12765:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
12766:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12767:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
12768:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
12769:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
12770:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
12771:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
12772:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
12773:      312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
12774:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
12775:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
12776:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
12777:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
12778:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
12779:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
12780:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
12781:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
12782:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
12783:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
12784:      422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
12785:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
12786:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
12787:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
12788:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
12789:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
12790:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12791:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
12792:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
12793:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
12794:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
12795:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
12796:       67,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
12797:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
12798:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
12799:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
12800:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
12801:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
12802:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
12803:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
12804:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
12805:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,   166,
12806:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
12807:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
12808:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
12809:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
12810:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
12811:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
12812:       -1,   228,    -1,   230,   231,    -1,   233,   234,   235,    -1,
12813:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
12814:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
12815:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
12816:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
12817:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
12818:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
12819:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
12820:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
12821:      317,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
12822:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
12823:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
12824:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
12825:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
12826:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
12827:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
12828:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
12829:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
12830:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
12831:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
12832:      427,   428,    -1,   430,   431,   432,   433,   434,   435,    -1,
12833:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
12834:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
12835:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
12836:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
12837:      477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
12838:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12839:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
12840:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
12841:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12842:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
12843:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
12844:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
12845:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
12846:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
12847:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
12848:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
12849:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
12850:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
12851:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
12852:      152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
12853:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
12854:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
12855:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
12856:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
12857:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
12858:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
12859:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
12860:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
12861:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12862:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
12863:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
12864:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
12865:      282,   283,   284,    -1,   286,   287,   288,    -1,    -1,   291,
12866:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
12867:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
12868:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
12869:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
12870:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
12871:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
12872:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
12873:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
12874:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
12875:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
12876:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
12877:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
12878:      412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
12879:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
12880:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
12881:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
12882:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
12883:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
12884:      472,   473,   474,   475,   476,   477,     3,    -1,     5,    -1,
12885:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12886:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
12887:       -1,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
12888:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
12889:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
12890:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
12891:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
12892:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
12893:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
12894:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
12895:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
12896:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
12897:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
12898:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
12899:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
12900:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
12901:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
12902:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
12903:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
12904:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
12905:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
12906:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
12907:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
12908:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
12909:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
12910:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
12911:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
12912:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
12913:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
12914:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
12915:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
12916:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
12917:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
12918:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
12919:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
12920:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
12921:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
12922:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
12923:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
12924:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
12925:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
12926:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
12927:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
12928:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
12929:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
12930:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
12931:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
12932:      477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
12933:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12934:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
12935:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
12936:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12937:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
12938:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
12939:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
12940:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
12941:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
12942:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
12943:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
12944:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
12945:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
12946:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
12947:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
12948:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
12949:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
12950:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
12951:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
12952:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
12953:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
12954:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
12955:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
12956:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12957:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
12958:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
12959:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
12960:      282,   283,    -1,   285,   286,   287,   288,    -1,    -1,   291,
12961:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
12962:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
12963:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
12964:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
12965:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
12966:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
12967:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
12968:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
12969:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
12970:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
12971:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
12972:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
12973:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
12974:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
12975:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
12976:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
12977:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
12978:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
12979:      472,   473,   474,   475,   476,   477,     3,    -1,     5,    -1,
12980:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12981:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
12982:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
12983:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
12984:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
12985:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
12986:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
12987:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
12988:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
12989:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
12990:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
12991:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
12992:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
12993:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
12994:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
12995:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
12996:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
12997:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
12998:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
12999:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13000:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13001:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13002:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13003:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13004:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13005:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13006:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13007:      277,   278,   279,   280,    -1,   282,   283,    -1,   285,   286,
13008:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13009:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13010:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13011:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13012:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13013:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13014:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13015:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13016:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13017:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13018:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13019:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13020:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13021:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13022:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13023:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13024:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13025:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13026:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13027:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13028:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13029:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    31,
13030:       32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13031:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13032:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13033:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13034:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13035:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13036:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13037:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13038:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13039:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13040:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13041:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13042:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13043:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13044:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13045:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13046:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13047:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13048:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13049:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13050:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13051:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13052:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13053:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13054:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13055:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13056:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13057:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13058:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13059:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13060:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13061:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13062:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13063:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13064:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13065:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13066:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13067:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13068:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13069:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13070:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13071:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13072:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13073:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13074:      472,   473,   474,   475,   476,   477,     3,    -1,     5,    -1,
13075:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13076:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13077:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13078:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13079:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13080:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13081:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13082:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13083:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13084:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13085:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13086:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13087:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13088:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13089:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13090:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13091:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13092:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13093:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13094:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13095:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13096:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13097:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13098:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13099:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13100:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13101:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13102:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13103:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13104:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13105:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13106:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13107:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13108:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13109:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13110:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13111:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13112:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13113:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13114:      397,   398,    -1,   400,   401,   402,   403,    -1,   405,   406,
13115:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13116:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13117:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13118:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13119:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13120:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13121:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13122:      477,     3,     4,    -1,    -1,    -1,    -1,     9,    -1,    -1,
13123:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13124:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13125:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13126:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13127:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13128:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13129:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13130:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13131:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13132:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13133:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13134:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13135:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13136:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13137:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13138:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13139:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13140:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13141:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13142:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13143:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13144:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13145:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13146:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13147:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13148:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13149:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13150:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13151:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13152:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13153:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13154:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13155:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13156:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13157:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13158:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13159:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13160:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13161:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13162:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13163:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13164:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13165:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13166:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13167:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13168:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13169:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
13170:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13171:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13172:       27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13173:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13174:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13175:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13176:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13177:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13178:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13179:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13180:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13181:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13182:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13183:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13184:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13185:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13186:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13187:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13188:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13189:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13190:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13191:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13192:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13193:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13194:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13195:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13196:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13197:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13198:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13199:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13200:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13201:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13202:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13203:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13204:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13205:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13206:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13207:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13208:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13209:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13210:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13211:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13212:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13213:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13214:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13215:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13216:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13217:      477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
13218:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13219:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13220:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13221:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13222:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13223:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13224:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13225:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13226:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13227:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13228:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13229:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13230:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13231:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13232:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13233:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13234:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13235:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13236:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13237:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13238:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13239:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13240:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13241:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13242:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13243:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13244:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13245:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13246:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13247:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13248:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13249:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13250:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13251:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13252:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13253:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13254:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13255:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13256:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13257:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13258:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13259:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13260:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13261:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13262:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13263:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13264:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
13265:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13266:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13267:       27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13268:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13269:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13270:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13271:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13272:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13273:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13274:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13275:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13276:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13277:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13278:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13279:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13280:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13281:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13282:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13283:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13284:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13285:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13286:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13287:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13288:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13289:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13290:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13291:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13292:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13293:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13294:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13295:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13296:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13297:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13298:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13299:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13300:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13301:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13302:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13303:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13304:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13305:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13306:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13307:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13308:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13309:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13310:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13311:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13312:      477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
13313:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13314:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13315:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13316:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13317:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13318:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13319:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13320:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13321:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13322:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13323:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13324:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13325:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13326:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13327:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13328:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13329:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13330:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13331:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13332:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13333:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13334:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13335:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13336:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13337:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13338:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13339:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13340:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13341:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13342:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13343:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13344:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13345:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13346:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13347:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13348:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13349:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13350:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13351:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13352:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13353:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13354:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13355:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13356:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13357:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13358:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13359:      472,   473,   474,   475,   476,   477,     3,    -1,     5,    -1,
13360:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13361:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13362:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13363:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13364:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13365:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13366:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13367:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13368:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13369:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13370:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13371:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13372:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13373:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13374:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13375:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13376:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13377:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13378:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13379:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13380:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13381:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13382:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13383:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13384:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13385:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13386:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13387:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13388:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13389:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13390:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13391:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13392:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13393:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13394:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13395:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13396:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13397:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13398:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13399:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13400:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13401:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13402:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13403:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13404:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13405:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13406:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13407:      477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
13408:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13409:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13410:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13411:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13412:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13413:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13414:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13415:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13416:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13417:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13418:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13419:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13420:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13421:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13422:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13423:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13424:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13425:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13426:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13427:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13428:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13429:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13430:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13431:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13432:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13433:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13434:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13435:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13436:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13437:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13438:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13439:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13440:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13441:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13442:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13443:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13444:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13445:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13446:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13447:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13448:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13449:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13450:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13451:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13452:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13453:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13454:      472,   473,   474,   475,   476,   477,     3,    -1,     5,    -1,
13455:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13456:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13457:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13458:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13459:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13460:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13461:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13462:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13463:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13464:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13465:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13466:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13467:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13468:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13469:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13470:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13471:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13472:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13473:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13474:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13475:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13476:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13477:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13478:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13479:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13480:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13481:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13482:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13483:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13484:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13485:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13486:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13487:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13488:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13489:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13490:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13491:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13492:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13493:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13494:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13495:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13496:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13497:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13498:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13499:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13500:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13501:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13502:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13503:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13504:       22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
13505:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13506:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13507:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13508:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13509:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13510:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13511:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13512:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13513:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13514:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13515:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13516:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13517:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13518:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13519:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13520:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13521:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13522:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13523:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13524:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13525:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13526:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13527:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13528:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13529:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13530:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13531:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13532:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13533:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13534:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13535:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13536:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13537:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13538:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13539:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13540:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13541:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13542:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13543:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13544:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13545:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13546:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13547:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13548:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13549:      472,   473,   474,   475,   476,   477,     3,    -1,     5,    -1,
13550:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13551:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13552:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13553:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13554:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13555:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13556:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13557:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13558:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13559:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13560:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13561:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13562:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13563:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13564:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13565:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13566:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13567:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13568:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13569:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13570:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13571:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13572:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13573:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13574:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13575:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13576:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13577:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13578:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13579:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13580:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13581:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13582:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13583:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13584:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13585:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13586:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13587:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13588:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13589:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13590:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13591:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13592:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13593:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13594:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13595:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13596:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13597:      477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
13598:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13599:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13600:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13601:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13602:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13603:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13604:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13605:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13606:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13607:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13608:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13609:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13610:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13611:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13612:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13613:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13614:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13615:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13616:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13617:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13618:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13619:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13620:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13621:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13622:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13623:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13624:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13625:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13626:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13627:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13628:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13629:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13630:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13631:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13632:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13633:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13634:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13635:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13636:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13637:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13638:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13639:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13640:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13641:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13642:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13643:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13644:      472,   473,   474,   475,   476,   477,     3,    -1,     5,    -1,
13645:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13646:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13647:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13648:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13649:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13650:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13651:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13652:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13653:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13654:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13655:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13656:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13657:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13658:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13659:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13660:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13661:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13662:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13663:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13664:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13665:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13666:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13667:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13668:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13669:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13670:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13671:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13672:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13673:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13674:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13675:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13676:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13677:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13678:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13679:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13680:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13681:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13682:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13683:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13684:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13685:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13686:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13687:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13688:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13689:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13690:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13691:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13692:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13693:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13694:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13695:       -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,    41,
13696:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13697:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13698:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13699:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13700:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13701:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13702:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13703:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13704:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13705:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13706:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13707:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13708:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13709:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13710:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13711:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13712:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13713:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13714:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13715:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13716:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13717:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13718:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13719:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13720:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13721:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13722:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13723:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13724:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13725:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13726:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13727:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13728:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13729:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13730:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13731:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13732:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13733:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13734:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13735:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13736:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13737:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13738:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13739:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
13740:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13741:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13742:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    36,
13743:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13744:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13745:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13746:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13747:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13748:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13749:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13750:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13751:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13752:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13753:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13754:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13755:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13756:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13757:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13758:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13759:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13760:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13761:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13762:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13763:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13764:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13765:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13766:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13767:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13768:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13769:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13770:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13771:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13772:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13773:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13774:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13775:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13776:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13777:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13778:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13779:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13780:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13781:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13782:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13783:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13784:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13785:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13786:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13787:      477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
13788:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13789:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13790:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13791:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13792:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13793:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13794:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13795:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13796:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13797:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13798:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13799:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13800:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13801:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13802:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13803:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13804:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13805:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13806:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13807:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13808:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13809:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13810:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13811:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13812:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13813:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13814:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13815:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13816:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13817:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13818:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13819:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13820:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13821:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13822:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13823:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13824:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13825:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13826:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13827:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13828:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13829:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13830:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13831:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13832:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13833:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13834:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
13835:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13836:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13837:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13838:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13839:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13840:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13841:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13842:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13843:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13844:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13845:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13846:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13847:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13848:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13849:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13850:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13851:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13852:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13853:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13854:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13855:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13856:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13857:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13858:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13859:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13860:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13861:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13862:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13863:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13864:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13865:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13866:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13867:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13868:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13869:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13870:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13871:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13872:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13873:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13874:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13875:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13876:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13877:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13878:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13879:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13880:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13881:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13882:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13883:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13884:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13885:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13886:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13887:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13888:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13889:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13890:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13891:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13892:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13893:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13894:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13895:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13896:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13897:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13898:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13899:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13900:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13901:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13902:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13903:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13904:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
13905:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
13906:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13907:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
13908:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
13909:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
13910:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
13911:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
13912:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
13913:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
13914:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
13915:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
13916:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
13917:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
13918:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
13919:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
13920:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
13921:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
13922:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
13923:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
13924:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
13925:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
13926:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
13927:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
13928:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
13929:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
13930:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13931:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13932:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13933:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
13934:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
13935:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13936:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
13937:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
13938:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
13939:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
13940:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
13941:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
13942:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
13943:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
13944:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
13945:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
13946:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
13947:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
13948:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
13949:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
13950:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
13951:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
13952:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
13953:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13954:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13955:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
13956:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
13957:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
13958:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
13959:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
13960:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
13961:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
13962:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
13963:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
13964:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
13965:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
13966:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
13967:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
13968:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
13969:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
13970:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
13971:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
13972:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13973:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
13974:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
13975:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
13976:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
13977:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13978:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13979:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13980:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13981:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13982:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13983:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13984:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
13985:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
13986:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
13987:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
13988:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
13989:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
13990:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
13991:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
13992:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
13993:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
13994:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
13995:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
13996:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
13997:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
13998:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
13999:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
14000:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
14001:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
14002:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
14003:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
14004:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
14005:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
14006:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
14007:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
14008:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
14009:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
14010:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
14011:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
14012:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
14013:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
14014:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
14015:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
14016:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
14017:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
14018:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
14019:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
14020:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
14021:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
14022:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
14023:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
14024:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
14025:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14026:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
14027:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
14028:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
14029:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
14030:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
14031:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
14032:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
14033:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
14034:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
14035:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
14036:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
14037:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
14038:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
14039:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
14040:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
14041:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
14042:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
14043:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
14044:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
14045:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
14046:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
14047:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
14048:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
14049:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
14050:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
14051:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
14052:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
14053:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
14054:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
14055:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
14056:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
14057:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
14058:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
14059:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
14060:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
14061:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
14062:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
14063:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
14064:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
14065:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
14066:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
14067:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
14068:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
14069:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
14070:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
14071:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
14072:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14073:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
14074:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
14075:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
14076:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
14077:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
14078:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
14079:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
14080:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
14081:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
14082:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
14083:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
14084:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
14085:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
14086:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
14087:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
14088:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
14089:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
14090:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
14091:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
14092:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
14093:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
14094:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
14095:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
14096:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
14097:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
14098:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
14099:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
14100:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
14101:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
14102:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
14103:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
14104:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
14105:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
14106:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
14107:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
14108:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
14109:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
14110:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
14111:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
14112:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
14113:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
14114:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
14115:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
14116:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
14117:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
14118:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
14119:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
14120:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14121:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
14122:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
14123:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
14124:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
14125:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
14126:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
14127:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
14128:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
14129:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
14130:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
14131:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
14132:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
14133:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
14134:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
14135:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
14136:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
14137:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
14138:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
14139:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
14140:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
14141:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
14142:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
14143:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
14144:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
14145:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
14146:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
14147:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
14148:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
14149:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
14150:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
14151:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
14152:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
14153:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
14154:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
14155:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
14156:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
14157:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
14158:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
14159:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
14160:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
14161:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
14162:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
14163:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
14164:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
14165:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
14166:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
14167:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14168:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
14169:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
14170:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
14171:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
14172:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
14173:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
14174:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
14175:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
14176:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
14177:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
14178:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
14179:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
14180:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
14181:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
14182:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
14183:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
14184:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
14185:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
14186:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
14187:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
14188:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
14189:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
14190:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
14191:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
14192:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
14193:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
14194:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
14195:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
14196:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
14197:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
14198:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
14199:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
14200:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
14201:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
14202:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
14203:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
14204:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
14205:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
14206:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
14207:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
14208:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
14209:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
14210:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
14211:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
14212:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
14213:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
14214:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
14215:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14216:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
14217:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    36,
14218:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
14219:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
14220:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
14221:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
14222:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
14223:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
14224:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
14225:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
14226:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
14227:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
14228:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
14229:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
14230:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
14231:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
14232:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
14233:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
14234:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
14235:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
14236:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
14237:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
14238:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
14239:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
14240:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
14241:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
14242:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
14243:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
14244:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
14245:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
14246:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
14247:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
14248:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
14249:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
14250:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
14251:      367,   368,   369,   370,   371,    -1,    -1,   374,   375,   376,
14252:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
14253:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
14254:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
14255:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
14256:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
14257:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
14258:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
14259:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
14260:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
14261:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
14262:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14263:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
14264:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
14265:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
14266:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
14267:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
14268:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
14269:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
14270:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
14271:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
14272:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
14273:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
14274:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
14275:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
14276:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
14277:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
14278:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
14279:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
14280:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
14281:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
14282:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
14283:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
14284:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
14285:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
14286:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
14287:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
14288:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
14289:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
14290:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
14291:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
14292:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
14293:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
14294:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
14295:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
14296:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
14297:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
14298:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
14299:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
14300:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
14301:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
14302:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
14303:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
14304:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
14305:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
14306:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
14307:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
14308:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
14309:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
14310:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14311:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
14312:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
14313:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
14314:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
14315:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
14316:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
14317:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
14318:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
14319:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
14320:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
14321:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
14322:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
14323:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
14324:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
14325:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
14326:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
14327:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
14328:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
14329:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
14330:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
14331:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
14332:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
14333:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
14334:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
14335:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
14336:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
14337:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
14338:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
14339:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
14340:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
14341:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
14342:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
14343:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
14344:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
14345:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
14346:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
14347:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
14348:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
14349:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
14350:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
14351:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
14352:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
14353:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
14354:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
14355:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
14356:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
14357:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14358:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
14359:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
14360:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
14361:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
14362:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
14363:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
14364:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
14365:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
14366:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
14367:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
14368:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
14369:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
14370:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
14371:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
14372:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
14373:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
14374:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
14375:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
14376:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
14377:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
14378:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
14379:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
14380:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
14381:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
14382:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
14383:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
14384:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
14385:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
14386:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
14387:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
14388:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
14389:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
14390:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
14391:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
14392:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
14393:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
14394:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
14395:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
14396:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
14397:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
14398:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
14399:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
14400:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
14401:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
14402:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
14403:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
14404:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
14405:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14406:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
14407:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
14408:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
14409:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
14410:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
14411:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
14412:       77,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
14413:       87,    88,    89,    90,    91,    92,    -1,    -1,    95,    96,
14414:       97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,
14415:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
14416:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
14417:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
14418:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
14419:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
14420:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
14421:      167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,
14422:      177,    -1,   179,   180,   181,    -1,   183,   184,   185,   186,
14423:      187,   188,   189,    -1,   191,   192,   193,   194,    -1,   196,
14424:      197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
14425:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
14426:       -1,    -1,   219,    -1,   221,   222,   223,   224,   225,    -1,
14427:       -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,
14428:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
14429:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
14430:      257,   258,   259,   260,   261,   262,    -1,   264,   265,   266,
14431:      267,   268,    -1,   270,   271,    -1,   273,    -1,   275,   276,
14432:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
14433:      287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,
14434:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
14435:       -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
14436:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
14437:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
14438:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
14439:       -1,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
14440:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
14441:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
14442:      377,    -1,   379,   380,   381,   382,    -1,   384,   385,   386,
14443:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
14444:      397,   398,    -1,   400,   401,    -1,   403,    -1,   405,   406,
14445:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
14446:      417,   418,   419,    -1,   421,   422,   423,   424,   425,   426,
14447:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
14448:       -1,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
14449:       -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
14450:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
14451:      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
14452:      477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14453:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
14454:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
14455:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
14456:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
14457:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
14458:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
14459:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
14460:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
14461:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
14462:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
14463:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
14464:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
14465:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
14466:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
14467:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
14468:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
14469:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
14470:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
14471:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
14472:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
14473:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
14474:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
14475:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
14476:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
14477:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
14478:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
14479:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
14480:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
14481:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
14482:      302,    -1,   304,   305,   306,    -1,   308,   309,   310,   311,
14483:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
14484:      322,   323,    -1,   325,    -1,   327,   328,   329,   330,   331,
14485:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
14486:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
14487:      352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
14488:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
14489:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
14490:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
14491:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
14492:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
14493:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
14494:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
14495:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
14496:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
14497:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
14498:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
14499:      472,   473,   474,   475,   476,   477,     3,    -1,    -1,    -1,
14500:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14501:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
14502:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
14503:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
14504:       47,    -1,    49,    50,    51,    52,    -1,    54,    55,    56,
14505:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
14506:       -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,    76,
14507:       77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
14508:       87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
14509:       97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
14510:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
14511:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
14512:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
14513:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
14514:      147,   148,   149,    -1,   151,   152,   153,   154,   155,    -1,
14515:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
14516:      167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
14517:      177,    -1,    -1,    -1,   181,    -1,   183,   184,   185,   186,
14518:      187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
14519:      197,   198,   199,   200,   201,    -1,   203,   204,    -1,   206,
14520:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
14521:      217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
14522:       -1,   228,   229,   230,   231,    -1,   233,   234,   235,    -1,
14523:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
14524:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
14525:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
14526:      267,    -1,    -1,   270,   271,   272,   273,    -1,    -1,   276,
14527:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
14528:      287,   288,    -1,    -1,   291,    -1,   293,   294,   295,    -1,
14529:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
14530:       -1,   308,   309,    -1,   311,   312,    -1,   314,   315,   316,
14531:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
14532:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
14533:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
14534:       -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
14535:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
14536:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
14537:      377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
14538:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
14539:       -1,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
14540:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
14541:       -1,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
14542:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
14543:       -1,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
14544:      447,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
14545:      457,   458,   459,   460,   461,   462,     3,    -1,    -1,    -1,
14546:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,   475,   476,
14547:      477,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
14548:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
14549:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
14550:       47,    -1,    49,    50,    51,    52,    -1,    54,    55,    56,
14551:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
14552:       -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,    76,
14553:       77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
14554:       87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
14555:       97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
14556:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
14557:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
14558:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
14559:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
14560:      147,   148,   149,    -1,   151,   152,   153,   154,   155,    -1,
14561:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
14562:      167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
14563:      177,    -1,    -1,    -1,   181,    -1,   183,   184,   185,   186,
14564:      187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
14565:      197,   198,   199,   200,   201,    -1,   203,   204,    -1,   206,
14566:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
14567:      217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
14568:       -1,   228,   229,   230,   231,    -1,   233,   234,   235,    -1,
14569:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
14570:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
14571:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
14572:      267,    -1,    -1,   270,   271,   272,   273,    -1,    -1,   276,
14573:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
14574:      287,   288,    -1,    -1,   291,    -1,   293,   294,   295,    -1,
14575:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
14576:       -1,   308,   309,    -1,   311,   312,    -1,   314,   315,   316,
14577:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
14578:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
14579:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
14580:       -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
14581:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
14582:      367,   368,   369,   370,   371,    -1,   373,   374,   375,   376,
14583:      377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
14584:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
14585:       -1,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
14586:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
14587:       -1,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
14588:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
14589:       -1,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
14590:      447,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
14591:      457,   458,   459,   460,   461,   462,     3,    -1,    -1,    -1,
14592:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,   475,   476,
14593:      477,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
14594:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
14595:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
14596:       47,    -1,    49,    50,    51,    52,    -1,    54,    55,    56,
14597:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
14598:       -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,    76,
14599:       77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
14600:       87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
14601:       97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
14602:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
14603:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
14604:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
14605:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
14606:      147,   148,   149,    -1,   151,   152,   153,   154,   155,    -1,
14607:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
14608:      167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
14609:      177,    -1,    -1,    -1,   181,    -1,   183,   184,   185,   186,
14610:      187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
14611:      197,   198,   199,   200,   201,    -1,   203,   204,    -1,   206,
14612:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
14613:      217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
14614:       -1,   228,   229,   230,   231,    -1,   233,   234,   235,    -1,
14615:       -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
14616:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
14617:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
14618:      267,    -1,    -1,   270,   271,   272,   273,    -1,    -1,   276,
14619:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
14620:      287,   288,    -1,    -1,   291,    -1,   293,   294,   295,    -1,
14621:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
14622:       -1,   308,   309,    -1,   311,   312,    -1,   314,   315,   316,
14623:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
14624:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
14625:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
14626:       -1,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
14627:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
14628:      367,   368,   369,   370,   371,    -1,   373,    -1,   375,   376,
14629:      377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
14630:      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
14631:       -1,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
14632:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
14633:       -1,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
14634:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
14635:       -1,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
14636:      447,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
14637:      457,   458,   459,   460,   461,   462,     3,    -1,    -1,    -1,
14638:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,   475,   476,
14639:      477,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
14640:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
14641:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
14642:       47,    -1,    49,    50,    51,    52,    -1,    54,    55,    56,
14643:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
14644:       -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,    76,
14645:       77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
14646:       87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
14647:       97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
14648:      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
14649:       -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
14650:      127,   128,   129,    -1,    -1,   132,   133,   134,   135,   136,
14651:       -1,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
14652:      147,   148,   149,    -1,   151,   152,   153,   154,   155,    -1,
14653:       -1,   158,    -1,   160,   161,   162,   163,    -1,   165,    -1,
14654:      167,   168,    -1,   170,   171,   172,   173,   174,   175,    -1,
14655:      177,    -1,    -1,    -1,   181,    -1,   183,   184,   185,   186,
14656:      187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
14657:      197,   198,   199,   200,   201,    -1,   203,   204,    -1,   206,
14658:      207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
14659:      217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
14660:       -1,   228,   229,   230,   231,    -1,   233,   234,   235,    -1,
14661:       -1,   238,   239,   240,   241,   242,    -1,   244,   245,   246,
14662:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
14663:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
14664:      267,    -1,    -1,   270,   271,   272,   273,    -1,    -1,   276,
14665:      277,   278,   279,   280,    -1,   282,   283,    -1,    -1,   286,
14666:      287,   288,    -1,    -1,   291,    -1,   293,   294,   295,    -1,
14667:      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
14668:       -1,   308,   309,    -1,   311,   312,    -1,   314,   315,   316,
14669:       -1,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
14670:      327,   328,   329,   330,   331,   332,    -1,   334,   335,   336,
14671:      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
14672:       -1,   348,   349,   350,   351,   352,   353,    -1,   355,   356,
14673:      357,   358,   359,   360,   361,   362,   363,   364,   365,    -1,
14674:      367,   368,   369,   370,   371,    -1,   373,    -1,   375,   376,
14675:      377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
14676:      387,   388,   389,   390,   391,   392,   393,   394,    -1,   396,
14677:       -1,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
14678:      407,   408,   409,    -1,   411,   412,    -1,    -1,   415,   416,
14679:       -1,   418,    -1,    -1,   421,   422,   423,   424,   425,   426,
14680:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
14681:       -1,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
14682:      447,   448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,
14683:      457,   458,   459,   460,   461,   462,    -1,    -1,    -1,    -1,
14684:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,   475,   476,
14685:      477
14686: };
14687: 
14688: /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
14689:    symbol of state STATE-NUM.  */
14690: static const yytype_uint16 yystos[] =
14691: {
14692:        0,    19,    29,    31,    32,    47,    56,    68,    79,    91,
14693:       93,   111,   125,   135,   141,   149,   151,   152,   165,   194,
14694:      209,   234,   311,   314,   343,   352,   366,   373,   377,   387,
14695:      398,   402,   438,   443,   456,   480,   494,   505,   506,   507,
14696:      508,   519,   520,   523,   525,   529,   543,   544,   546,   548,
14697:      555,   557,   603,   610,   613,   614,   631,   632,   633,   634,
14698:      635,   636,   686,   824,   827,   830,   837,   838,   839,   840,
14699:      841,   848,   852,   858,   860,   865,   869,   870,   873,   874,
14700:      876,   877,   879,   415,   459,   556,   198,   359,   367,   402,
14701:      449,   556,     3,    19,    20,    21,    22,    23,    24,    25,
14702:       26,    28,    29,    30,    38,    39,    41,    42,    43,    44,
14703:       45,    46,    47,    48,    49,    50,    51,    52,    54,    55,
14704:       56,    57,    58,    59,    62,    63,    64,    65,    66,    68,
14705:       69,    70,    71,    72,    74,    76,    77,    78,    79,    80,
14706:       81,    82,    83,    84,    85,    87,    88,    89,    90,    91,
14707:       92,    94,    95,    96,    97,   101,   105,   106,   107,   108,
14708:      109,   110,   111,   112,   113,   114,   116,   118,   119,   120,
14709:      121,   122,   123,   125,   126,   127,   128,   129,   132,   133,
14710:      134,   135,   136,   138,   139,   140,   142,   143,   144,   146,
14711:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
14712:      158,   160,   161,   162,   163,   165,   167,   168,   170,   171,
14713:      172,   173,   174,   175,   177,   179,   180,   181,   183,   184,
14714:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
14715:      196,   197,   198,   199,   200,   201,   203,   204,   205,   206,
14716:      207,   208,   209,   210,   211,   212,   214,   216,   217,   218,
14717:      219,   220,   221,   222,   223,   224,   225,   228,   229,   230,
14718:      231,   233,   234,   235,   238,   239,   240,   241,   242,   243,
14719:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
14720:      254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
14721:      264,   265,   266,   267,   268,   270,   271,   272,   273,   275,
14722:      276,   277,   278,   279,   280,   282,   283,   286,   287,   288,
14723:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
14724:      301,   302,   303,   304,   305,   306,   308,   309,   310,   311,
14725:      312,   313,   314,   315,   316,   318,   319,   320,   321,   322,
14726:      323,   325,   326,   327,   328,   329,   330,   331,   332,   334,
14727:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
14728:      345,   346,   348,   349,   350,   351,   352,   353,   354,   355,
14729:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
14730:      367,   368,   369,   370,   371,   373,   374,   375,   376,   377,
14731:      378,   379,   380,   381,   382,   384,   385,   386,   387,   388,
14732:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
14733:      400,   401,   403,   404,   405,   406,   407,   408,   409,   411,
14734:      412,   415,   416,   417,   418,   419,   421,   422,   423,   424,
14735:      425,   426,   427,   428,   431,   432,   433,   434,   435,   438,
14736:      439,   440,   441,   442,   443,   444,   446,   447,   448,   449,
14737:      450,   451,   454,   457,   458,   459,   460,   461,   462,   463,
14738:      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
14739:      474,   475,   476,   477,   742,   809,   813,   816,   882,   883,
14740:      884,   556,    50,   494,   626,   171,   175,   235,   242,   289,
14741:      359,   406,   408,   424,   430,   433,   601,   611,   836,     3,
14742:       27,   243,   314,   395,   807,   813,   882,    21,    74,    90,
14743:      144,   154,   166,   171,   198,   242,   246,   309,   323,   356,
14744:      359,   367,   370,   389,   402,   409,   418,   424,   449,   604,
14745:      605,   608,   556,   807,    93,   447,   494,   525,   613,   631,
14746:      844,   848,   865,   879,   108,    68,   209,   108,     5,   812,
14747:      813,   859,   859,   813,   807,    27,   411,   415,   813,   871,
14748:      872,   875,   556,    27,   130,   643,   644,   175,   235,   359,
14749:      371,   411,   853,   854,   875,   556,   443,   631,   636,   875,
14750:        5,   285,   697,   805,   813,   814,   170,   494,   862,   494,
14751:      331,   637,   638,   807,   637,   632,   633,     0,   497,   120,
14752:      208,   435,   145,   213,   290,   429,   646,   647,   632,   634,
14753:      635,   498,   447,   842,    27,   411,   415,   631,   875,   188,
14754:      805,   807,   188,   805,   188,   697,   188,   805,   494,   492,
14755:      496,   791,   793,   525,   613,   631,   826,   865,   805,   406,
14756:      408,   406,   408,   341,   188,   813,   813,   818,   331,   367,
14757:      402,   449,   805,   198,    27,   807,   248,   418,   107,   402,
14758:      449,   362,     3,    44,    49,    50,    51,    52,    64,    65,
14759:       74,    82,    94,   101,   112,   113,   134,   162,   168,   170,
14760:      174,   188,   190,   204,   211,   212,   214,   217,   218,   220,
14761:      229,   231,   243,   262,   263,   264,   272,   277,   293,   295,
14762:      328,   350,   354,   374,   378,   381,   395,   404,   411,   412,
14763:      423,   444,   447,   609,   708,   709,   711,   713,   715,   717,
14764:      719,   720,   721,   723,   724,   725,   727,   728,   817,   882,
14765:      885,   188,   606,   818,   188,   806,   807,   188,   807,   494,
14766:      547,   601,   844,     3,    48,    49,    51,    52,    64,    65,
14767:       72,   112,   113,   150,   156,   162,   179,   180,   205,   211,
14768:      212,   214,   243,   262,   264,   268,   275,   277,   292,   296,
14769:      310,   313,   328,   354,   374,   381,   395,   397,   411,   412,
14770:      417,   419,   423,   443,   444,   463,   464,   465,   466,   467,
14771:      468,   469,   470,   471,   472,   473,   845,   847,   848,   850,
14772:      851,   882,   886,   842,   812,   859,   812,   483,   494,   494,
14773:      825,   477,   219,   496,   284,     4,     6,     7,     8,     9,
14774:       10,    35,    49,    51,    52,    60,    61,    64,    65,    72,
14775:       74,    98,    99,   100,   101,   102,   103,   104,   112,   113,
14776:      115,   150,   156,   157,   162,   179,   180,   211,   212,   214,
14777:      236,   237,   262,   264,   269,   274,   275,   277,   286,   296,
14778:      310,   328,   354,   372,   381,   397,   411,   412,   417,   419,
14779:      420,   423,   436,   444,   478,   485,   486,   487,   492,   494,
14780:      499,   501,   502,   632,   676,   712,   715,   718,   719,   720,
14781:      722,   723,   724,   727,   728,   739,   741,   742,   743,   745,
14782:      759,   760,   766,   785,   790,   797,   798,   809,   810,   811,
14783:      812,   813,   796,   797,   853,   853,   812,   853,   477,   169,
14784:      413,   483,   494,   805,   487,   793,     3,   168,   170,   447,
14785:      848,   861,   863,   168,   864,   739,   770,   813,   637,   498,
14786:      494,   820,   495,   495,   507,   169,   215,   697,   866,    27,
14787:      130,   642,   642,    54,   642,   159,   164,   232,   281,   652,
14788:      654,   655,   679,   681,   682,   683,   646,   647,   494,   805,
14789:      477,   219,   150,    23,    29,   135,   288,   339,   343,   373,
14790:      440,   513,   516,   517,   339,   150,    36,    55,   106,   197,
14791:      247,   255,   267,   298,   339,   345,   367,   373,   387,   516,
14792:      549,   552,   150,   339,   373,   516,   150,   339,   373,   516,
14793:        3,    27,    44,    50,    74,    82,    94,   101,   130,   168,
14794:      170,   174,   190,   204,   217,   218,   220,   229,   231,   243,
14795:      263,   272,   293,   295,   350,   378,   395,   404,   423,   445,
14796:      447,   487,   495,   739,   772,   773,   815,   821,   882,   887,
14797:      739,   792,     3,    27,    31,    32,    33,    34,    35,    36,
14798:       37,    40,    53,    60,    61,    67,    73,    75,    86,    93,
14799:       98,    99,   100,   102,   103,   104,   115,   117,   124,   130,
14800:      131,   137,   141,   145,   157,   159,   164,   166,   169,   176,
14801:      178,   182,   195,   202,   213,   215,   226,   227,   232,   236,
14802:      237,   269,   274,   281,   284,   285,   289,   290,   307,   317,
14803:      324,   333,   347,   366,   372,   383,   399,   402,   410,   413,
14804:      414,   420,   429,   430,   436,   437,   443,   445,   452,   453,
14805:      455,   456,   808,   822,   882,   886,   888,   791,   495,   494,
14806:      591,   601,   269,   828,   496,   819,    36,   449,   188,   805,
14807:      188,   805,   881,   805,   494,   612,    82,   833,   460,    83,
14808:      127,   301,   407,   446,   726,   726,   726,   494,   714,   714,
14809:      313,   494,   716,   150,   494,    64,    65,   726,   714,   711,
14810:      458,   480,   494,   729,   494,   729,    58,   346,   498,   607,
14811:      494,    35,   710,   494,   109,   110,   185,   186,   249,   250,
14812:      251,   252,   253,   254,   257,   258,   363,   364,   474,   475,
14813:      494,   730,   731,   732,   733,   734,   735,   736,   737,   738,
14814:      714,   150,   498,   607,   150,   498,   607,   150,   284,   770,
14815:      402,   495,   498,     4,   157,   284,   420,   485,   486,   551,
14816:      554,   811,   812,   843,   845,   846,   849,   844,   494,   621,
14817:      625,   551,   849,   855,   857,   772,   709,   774,    36,   230,
14818:      813,   494,   794,   492,   739,   789,   494,   494,   164,   494,
14819:      494,   632,   494,   494,   494,   739,   494,   494,   494,   494,
14820:      494,   494,   494,   494,   494,   739,   739,   739,   146,   799,
14821:      800,   770,   771,   632,   739,   770,   761,   762,   813,   814,
14822:        9,   794,   793,   494,   812,   494,   811,   812,     3,     8,
14823:       11,    16,    17,    18,    33,    36,    41,    48,    73,   174,
14824:      190,   195,   217,   218,   231,   269,   272,   286,   289,   378,
14825:      478,   481,   482,   483,   485,   486,   487,   488,   489,   490,
14826:      764,   765,   766,   768,   457,   746,   794,    15,   295,   739,
14827:       15,   215,   498,   639,   494,   812,   794,   496,   793,   639,
14828:        3,   115,   235,   551,   728,   812,   856,    97,   115,   857,
14829:      115,   857,   805,   495,   498,   842,   495,   498,   638,   806,
14830:       36,   866,   527,   805,    36,   813,   373,   634,   634,    27,
14831:      487,   648,   649,   739,   634,   161,   266,   668,   221,   267,
14832:      327,   376,   435,     4,     9,    27,   663,   739,   485,   486,
14833:      664,   665,   739,   741,   679,   680,   655,   654,   652,   653,
14834:      164,   682,   279,   684,   652,   679,   770,   820,   230,   805,
14835:       67,    75,    86,   166,   188,   317,   430,   572,   582,   597,
14836:      813,    75,    86,   524,    86,   524,   494,   413,   494,   570,
14837:      241,   433,   570,    86,   498,   413,   805,   711,   551,    54,
14838:      553,   551,   551,   106,   247,   255,    54,   413,   456,   480,
14839:      550,   260,   359,   550,   552,   697,    86,   413,   524,   359,
14840:      805,   413,   359,   772,   772,   773,   495,   498,   646,   647,
14841:       13,    14,   493,   503,   413,   590,   595,   813,   456,   624,
14842:      331,   402,   449,   150,    93,   544,   557,   829,   830,   877,
14843:      808,   496,   142,   805,   269,   545,   549,   269,   494,   591,
14844:       36,   591,   495,   772,    36,   188,   585,   813,   834,   494,
14845:      770,   811,   609,   774,   726,   726,    35,   710,   411,   411,
14846:      811,   811,   709,   707,   813,   492,   492,   811,   811,   413,
14847:      413,   413,   413,   606,   818,   806,   807,   807,   818,   495,
14848:      188,   805,   881,   844,   850,     4,   811,     4,   811,   623,
14849:      630,   822,    50,    95,   121,   139,   143,   165,   168,   183,
14850:      274,   282,   325,   627,   498,   495,   498,   495,   498,   826,
14851:      770,   791,   771,   452,   786,   787,   739,   770,   494,   811,
14852:      811,     3,   730,   731,   732,   733,   734,   735,   736,   737,
14853:      775,   776,   812,   811,   811,   739,     8,    16,    17,    18,
14854:      481,   482,   483,   485,   486,   487,   488,   489,   490,   764,
14855:      769,   813,   739,   777,   485,   486,   494,   740,   741,   766,
14856:      779,   790,   495,   770,   739,   770,   780,   739,    53,   169,
14857:      227,   414,   739,   770,   783,   739,   494,   813,   341,   803,
14858:      493,   495,   498,   498,   500,   503,   770,   739,   738,   738,
14859:      709,   739,   739,   739,   739,     5,   822,   823,   411,    40,
14860:      399,   795,   818,   739,   739,   494,   632,   784,   130,   157,
14861:      269,   274,   279,   420,   431,   739,   274,   494,   739,   413,
14862:       48,   174,   190,   195,   231,   378,   739,   739,   739,   739,
14863:      739,   739,   739,   739,   739,   739,    27,    34,   383,   763,
14864:      178,   160,   747,   739,   354,   494,   760,   739,   175,   235,
14865:      402,   406,   408,   433,   640,   805,   798,   169,   687,   772,
14866:      487,   687,   494,   812,   495,   805,   861,   805,   869,   739,
14867:      495,   494,   437,   868,   115,   297,   494,   526,   631,    36,
14868:      813,   494,   531,   540,   542,   813,    37,   124,   650,   650,
14869:      498,   437,   650,   354,   355,   485,   486,   665,   667,   741,
14870:      376,   221,   285,   306,   306,   498,   489,     4,   666,   811,
14871:      666,   354,   355,   667,   804,   805,   273,   380,   685,   680,
14872:      653,   495,   339,   516,   494,   188,   582,   807,   221,   269,
14873:      221,   437,   494,   575,   709,   807,   813,   188,   807,   188,
14874:      813,    23,   135,   373,   512,   515,   565,   580,   822,   807,
14875:      574,   594,   822,   807,   513,   807,   339,   373,   516,   549,
14876:      551,   818,   807,   551,   818,   807,   551,   339,   373,   516,
14877:      807,   807,   807,   807,   339,   373,   516,   807,   807,   646,
14878:      646,   646,   445,   773,   189,   344,   645,   739,   739,   739,
14879:      792,   322,   620,   495,   498,   282,   169,   413,   615,   449,
14880:      805,   805,   813,   601,   808,   494,   494,   150,   150,   231,
14881:      572,   582,   586,   589,   598,   600,   813,   456,   458,   577,
14882:      149,   631,   456,   835,   495,   739,   269,   284,   770,   495,
14883:      495,   607,   495,   492,   477,   477,   495,   495,   495,   498,
14884:      709,   811,   493,   811,   495,   495,   731,   733,   734,   735,
14885:      734,   735,   735,   607,   607,   284,   607,   269,    36,   495,
14886:      498,   487,   494,   551,   622,   849,    36,   619,   812,   619,
14887:      269,   274,   325,   619,   619,   855,   709,   495,   493,   739,
14888:      137,   787,   788,    36,   495,   739,   495,   495,   495,   169,
14889:      495,   495,   498,   495,   496,   307,   778,   495,   740,   740,
14890:      739,    11,    16,    17,    18,   195,   217,   286,   481,   482,
14891:      483,   485,   486,   487,   488,   489,   490,   766,   740,   495,
14892:      495,   164,   169,   781,   782,   495,    36,   783,   770,   783,
14893:      783,   169,   495,    36,   806,   494,   739,   801,   794,   739,
14894:      761,   739,   495,   495,   477,   740,   740,   143,   770,   169,
14895:      130,   157,   274,   279,   420,   431,   494,   143,   769,   739,
14896:      399,   795,   739,   784,   739,   413,   494,   632,   494,   494,
14897:      153,   748,   406,   408,   406,   408,   805,   402,   641,   641,
14898:      641,   226,   355,   494,   632,   688,   689,   690,   697,   698,
14899:      742,   744,   745,   813,   453,   703,   646,   800,   703,   811,
14900:      738,   820,   826,   688,   453,   867,   443,   401,   436,   535,
14901:      530,   539,   813,   284,   532,   813,   536,   542,   498,   687,
14902:      483,   794,   479,   651,   651,   649,   286,   764,   767,   651,
14903:        4,   811,   667,   285,   435,   664,   498,   240,   413,   739,
14904:      269,   597,   494,   150,   494,   575,   198,   595,   558,   288,
14905:      568,   558,    23,   135,   343,   345,   373,   509,   510,   511,
14906:      517,   518,   150,   607,   150,   607,   565,   580,   565,   495,
14907:      498,   561,   812,   495,   498,   483,   496,   413,   359,    86,
14908:      413,   524,   359,   413,   413,   413,   359,   645,   645,   645,
14909:      773,   276,   276,   495,   493,   390,   391,   629,   812,   590,
14910:      620,   805,   494,   591,   828,   402,   521,   522,   812,   595,
14911:      805,   805,   881,   805,   495,   498,   282,   570,   282,   284,
14912:      569,   807,   456,   880,   570,    36,   150,   805,   495,   710,
14913:      811,   729,   729,   710,   813,   493,   493,   818,   150,   623,
14914:      617,   628,   849,   812,   812,   274,   595,   487,   595,   812,
14915:      812,   410,   739,   141,   709,   495,   739,   739,   769,   739,
14916:      781,   709,   740,   740,   740,   740,   130,   269,   279,   740,
14917:      740,   740,   740,   740,   740,   740,   740,   740,   740,   739,
14918:      739,   782,   781,   709,   495,   495,   495,   770,   709,   495,
14919:      739,   801,   802,    36,   495,   738,   739,    33,    33,   739,
14920:      495,   739,   169,   494,   774,   739,   495,   143,   740,   740,
14921:      143,   143,   739,   739,   647,   453,   294,   752,   641,   641,
14922:      641,   641,   805,   805,   805,   632,   698,   169,   632,   689,
14923:      690,    36,   691,   692,   813,   498,    94,   170,   204,   220,
14924:      229,   263,   350,   694,   692,    36,   691,   693,   813,   480,
14925:      702,   793,   739,   178,   669,   645,   803,   669,   495,   495,
14926:      739,   347,   534,   442,   495,   498,   794,    84,   534,   495,
14927:      498,   531,   867,   739,   161,   225,   494,   651,   285,   805,
14928:      807,   495,   150,   595,   582,   595,   558,   585,   495,   117,
14929:      202,   267,   269,   581,   494,   592,   173,   115,   187,   269,
14930:      570,   550,   107,   115,   173,   269,   389,   392,   552,   570,
14931:      373,   511,   424,   807,   813,   515,   594,     3,    44,    50,
14932:       74,    82,    94,   101,   168,   170,   174,   190,   204,   217,
14933:      218,   220,   229,   231,   243,   263,   268,   272,   286,   293,
14934:      295,   350,   374,   378,   395,   404,   423,   447,   485,   486,
14935:      551,   559,   596,   709,   767,   812,   815,   882,   888,   822,
14936:      807,   807,   807,   807,   807,   807,   807,   807,   807,   807,
14937:      495,   495,   495,   646,   550,   629,   494,   589,   835,   188,
14938:      805,   495,   498,   495,   545,   494,    36,   579,   577,   586,
14939:       79,   547,   107,   267,   631,   585,   437,   832,   493,   709,
14940:      607,   881,   495,   498,   595,   739,   495,   495,   782,   169,
14941:      130,   279,   494,   495,   495,   495,   498,   813,   739,   739,
14942:      739,   774,   495,   739,    33,    33,   739,   739,   143,   495,
14943:      495,   739,   494,   753,   813,   805,   805,   805,   805,   692,
14944:      693,   494,   495,   813,   814,   404,   660,   661,   494,   689,
14945:      220,   293,   695,   689,   695,   220,   694,   695,   220,   661,
14946:      494,   813,   661,   494,   291,    54,   182,   677,   495,   677,
14947:      812,   797,   631,   297,   631,   530,   284,   494,   528,   483,
14948:      542,   534,   769,   558,   582,   495,   495,   456,   588,   118,
14949:      191,   200,   117,   439,   565,   583,    67,    73,    86,   115,
14950:      117,   173,   202,   269,   274,   317,   333,   430,   437,   563,
14951:      564,   576,    30,    54,   602,   188,   274,   551,   739,   602,
14952:      274,   485,   486,   554,   813,   709,   607,   607,   243,   395,
14953:      815,   819,   483,   413,   413,   645,   621,   437,   616,   618,
14954:      595,   495,    36,   269,   494,   812,   835,   589,   149,   631,
14955:      147,   196,   569,   120,   135,   316,   880,   107,   456,   878,
14956:      284,   813,   831,   494,    36,   628,   740,   169,   494,   774,
14957:      801,   495,   739,   739,   739,   495,   754,   813,   699,   700,
14958:      744,   691,   494,     4,     9,   656,   658,   659,   813,   806,
14959:      689,   284,   437,   696,   689,   220,   689,   704,   705,   813,
14960:      494,   704,   813,    27,    96,   179,   353,   487,   494,   670,
14961:      671,   672,   673,   674,   675,   739,   739,   455,   749,   812,
14962:      749,   535,    86,   494,   533,   541,   744,   813,   131,   739,
14963:      495,   333,   588,   494,   578,   558,   495,   498,   494,   818,
14964:      807,   740,   602,   118,   191,   117,   274,   221,   805,   588,
14965:       81,   115,    36,   150,    73,   706,   819,   489,   559,   807,
14966:      807,   495,   550,   122,   495,   577,   631,   150,    36,   495,
14967:      807,   880,    27,    78,    87,   116,   187,   199,   389,   392,
14968:      573,   573,   355,   355,    59,    67,   235,   805,   541,   740,
14969:      774,   495,   303,   755,   495,   498,    36,   701,   806,   306,
14970:      489,   306,   355,   489,   494,   494,   495,   739,   494,   689,
14971:      696,   495,   498,   709,   704,   495,   494,   375,   494,   495,
14972:      498,   750,   751,   813,   324,   678,   678,   442,   807,   739,
14973:      495,   498,    73,   537,   537,   270,   435,   805,   558,   584,
14974:      587,   822,   565,   739,   269,   564,    36,   588,   591,   807,
14975:      187,   818,   437,   514,   489,   424,   621,   812,   835,   569,
14976:      878,   805,   631,   577,   547,    67,   287,    67,   832,   495,
14977:      495,    54,   646,   702,   699,   494,   495,   813,   656,   806,
14978:      705,   706,   495,   770,   494,   770,   671,   498,    36,   739,
14979:      437,   657,   657,   631,   495,   703,   533,   818,   538,   818,
14980:      538,   373,   591,   495,   498,   483,   495,   187,   245,   599,
14981:      494,   560,   739,   424,    36,   494,   878,   569,   880,   287,
14982:      287,   494,   835,   770,   326,   355,   756,   704,   495,   498,
14983:      495,   495,   495,   670,   495,   751,   753,   357,   537,   650,
14984:      650,   540,   599,   587,   559,   267,   571,   560,   170,   302,
14985:      379,   284,   566,   567,   593,   549,   631,   541,   703,    48,
14986:       97,   426,   739,   757,   758,   757,   495,   495,     9,   340,
14987:      662,   495,   659,   538,   651,   651,   703,   567,   200,   120,
14988:      435,   284,   593,   284,   566,   495,   878,   495,   758,   354,
14989:      163,   312,   163,   312,   495,   494,   650,   558,    58,   267,
14990:      346,   373,   562,   562,   835,    33,     9,   651,    22,   115,
14991:      274,   703,   758,   495
14992: };
14993: 
14994: #define yyerrok		(yyerrstatus = 0)
14995: #define yyclearin	(yychar = YYEMPTY)
14996: #define YYEMPTY		(-2)
14997: #define YYEOF		0
14998: 
14999: #define YYACCEPT	goto yyacceptlab
15000: #define YYABORT		goto yyabortlab
15001: #define YYERROR		goto yyerrorlab
15002: 
15003: 
15004: /* Like YYERROR except do call yyerror.  This remains here temporarily
15005:    to ease the transition to the new meaning of YYERROR, for GCC.
15006:    Once GCC version 2 has supplanted version 1, this can go.  */
15007: 
15008: #define YYFAIL		goto yyerrlab
15009: 
15010: #define YYRECOVERING()  (!!yyerrstatus)
15011: 
15012: #define YYBACKUP(Token, Value)					\
15013: do								\
15014:   if (yychar == YYEMPTY && yylen == 1)				\
15015:     {								\
15016:       yychar = (Token);						\
15017:       yylval = (Value);						\
15018:       yytoken = YYTRANSLATE (yychar);				\
15019:       YYPOPSTACK (1);						\
15020:       goto yybackup;						\
15021:     }								\
15022:   else								\
15023:     {								\
15024:       yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
15025:       YYERROR;							\
15026:     }								\
15027: while (YYID (0))
15028: 
15029: 
15030: #define YYTERROR	1
15031: #define YYERRCODE	256
15032: 
15033: 
15034: /* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
15035:    If N is 0, then set CURRENT to the empty location which ends
15036:    the previous symbol: RHS[0] (always defined).  */
15037: 
15038: #define YYRHSLOC(Rhs, K) ((Rhs)[K])
15039: #ifndef YYLLOC_DEFAULT
15040: # define YYLLOC_DEFAULT(Current, Rhs, N)				\
15041:     do									\
15042:       if (YYID (N))                                                    \
15043: 	{								\
15044: 	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
15045: 	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
15046: 	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
15047: 	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
15048: 	}								\
15049:       else								\
15050: 	{								\
15051: 	  (Current).first_line   = (Current).last_line   =		\
15052: 	    YYRHSLOC (Rhs, 0).last_line;				\
15053: 	  (Current).first_column = (Current).last_column =		\
15054: 	    YYRHSLOC (Rhs, 0).last_column;				\
15055: 	}								\
15056:     while (YYID (0))
15057: #endif
15058: 
15059: 
15060: /* YY_LOCATION_PRINT -- Print the location on the stream.
15061:    This macro was not mandated originally: define only if we know
15062:    we won't break user code: when these are the locations we know.  */
15063: 
15064: #ifndef YY_LOCATION_PRINT
15065: # if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
15066: #  define YY_LOCATION_PRINT(File, Loc)			\
15067:      fprintf (File, "%d.%d-%d.%d",			\
15068: 	      (Loc).first_line, (Loc).first_column,	\
15069: 	      (Loc).last_line,  (Loc).last_column)
15070: # else
15071: #  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
15072: # endif
15073: #endif
15074: 
15075: 
15076: /* YYLEX -- calling `yylex' with the right arguments.  */
15077: 
15078: #ifdef YYLEX_PARAM
15079: # define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
15080: #else
15081: # define YYLEX yylex (&yylval, &yylloc, yyscanner)
15082: #endif
15083: 
15084: /* Enable debugging if requested.  */
15085: #if YYDEBUG
15086: 
15087: # ifndef YYFPRINTF
15088: #  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
15089: #  define YYFPRINTF fprintf
15090: # endif
15091: 
15092: # define YYDPRINTF(Args)			\
15093: do {						\
15094:   if (yydebug)					\
15095:     YYFPRINTF Args;				\
15096: } while (YYID (0))
15097: 
15098: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
15099: do {									  \
15100:   if (yydebug)								  \
15101:     {									  \
15102:       YYFPRINTF (stderr, "%s ", Title);					  \
15103:       yy_symbol_print (stderr,						  \
15104: 		  Type, Value, Location, yyscanner); \
15105:       YYFPRINTF (stderr, "\n");						  \
15106:     }									  \
15107: } while (YYID (0))
15108: 
15109: 
15110: /*--------------------------------.
15111: | Print this symbol on YYOUTPUT.  |
15112: `--------------------------------*/
15113: 
15114: /*ARGSUSED*/
15115: #if (defined __STDC__ || defined __C99__FUNC__ \
15116:      || defined __cplusplus || defined _MSC_VER)
15117: static void
15118: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
15119: #else
15120: static void
15121: yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
15122:     FILE *yyoutput;
15123:     int yytype;
15124:     YYSTYPE const * const yyvaluep;
15125:     YYLTYPE const * const yylocationp;
15126:     core_yyscan_t yyscanner;
15127: #endif
15128: {
15129:   if (!yyvaluep)
15130:     return;
15131:   YYUSE (yylocationp);
15132:   YYUSE (yyscanner);
15133: # ifdef YYPRINT
15134:   if (yytype < YYNTOKENS)
15135:     YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
15136: # else
15137:   YYUSE (yyoutput);
15138: # endif
15139:   switch (yytype)
15140:     {
15141:       default:
15142: 	break;
15143:     }
15144: }
15145: 
15146: 
15147: /*--------------------------------.
15148: | Print this symbol on YYOUTPUT.  |
15149: `--------------------------------*/
15150: 
15151: #if (defined __STDC__ || defined __C99__FUNC__ \
15152:      || defined __cplusplus || defined _MSC_VER)
15153: static void
15154: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
15155: #else
15156: static void
15157: yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
15158:     FILE *yyoutput;
15159:     int yytype;
15160:     YYSTYPE const * const yyvaluep;
15161:     YYLTYPE const * const yylocationp;
15162:     core_yyscan_t yyscanner;
15163: #endif
15164: {
15165:   if (yytype < YYNTOKENS)
15166:     YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
15167:   else
15168:     YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
15169: 
15170:   YY_LOCATION_PRINT (yyoutput, *yylocationp);
15171:   YYFPRINTF (yyoutput, ": ");
15172:   yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
15173:   YYFPRINTF (yyoutput, ")");
15174: }
15175: 
15176: /*------------------------------------------------------------------.
15177: | yy_stack_print -- Print the state stack from its BOTTOM up to its |
15178: | TOP (included).                                                   |
15179: `------------------------------------------------------------------*/
15180: 
15181: #if (defined __STDC__ || defined __C99__FUNC__ \
15182:      || defined __cplusplus || defined _MSC_VER)
15183: static void
15184: yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
15185: #else
15186: static void
15187: yy_stack_print (bottom, top)
15188:     yytype_int16 *bottom;
15189:     yytype_int16 *top;
15190: #endif
15191: {
15192:   YYFPRINTF (stderr, "Stack now");
15193:   for (; bottom <= top; ++bottom)
15194:     YYFPRINTF (stderr, " %d", *bottom);
15195:   YYFPRINTF (stderr, "\n");
15196: }
15197: 
15198: # define YY_STACK_PRINT(Bottom, Top)				\
15199: do {								\
15200:   if (yydebug)							\
15201:     yy_stack_print ((Bottom), (Top));				\
15202: } while (YYID (0))
15203: 
15204: 
15205: /*------------------------------------------------.
15206: | Report that the YYRULE is going to be reduced.  |
15207: `------------------------------------------------*/
15208: 
15209: #if (defined __STDC__ || defined __C99__FUNC__ \
15210:      || defined __cplusplus || defined _MSC_VER)
15211: static void
15212: yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
15213: #else
15214: static void
15215: yy_reduce_print (yyvsp, yylsp, yyrule, yyscanner)
15216:     YYSTYPE *yyvsp;
15217:     YYLTYPE *yylsp;
15218:     int yyrule;
15219:     core_yyscan_t yyscanner;
15220: #endif
15221: {
15222:   int yynrhs = yyr2[yyrule];
15223:   int yyi;
15224:   unsigned long int yylno = yyrline[yyrule];
15225:   YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
15226: 	     yyrule - 1, yylno);
15227:   /* The symbols being reduced.  */
15228:   for (yyi = 0; yyi < yynrhs; yyi++)
15229:     {
15230:       fprintf (stderr, "   $%d = ", yyi + 1);
15231:       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
15232: 		       &(yyvsp[(yyi + 1) - (yynrhs)])
15233: 		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , yyscanner);
15234:       fprintf (stderr, "\n");
15235:     }
15236: }
15237: 
15238: # define YY_REDUCE_PRINT(Rule)		\
15239: do {					\
15240:   if (yydebug)				\
15241:     yy_reduce_print (yyvsp, yylsp, Rule, yyscanner); \
15242: } while (YYID (0))
15243: 
15244: /* Nonzero means print parse trace.  It is left uninitialized so that
15245:    multiple parsers can coexist.  */
15246: int yydebug;
15247: #else /* !YYDEBUG */
15248: # define YYDPRINTF(Args)
15249: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)
15250: # define YY_STACK_PRINT(Bottom, Top)
15251: # define YY_REDUCE_PRINT(Rule)
15252: #endif /* !YYDEBUG */
15253: 
15254: 
15255: /* YYINITDEPTH -- initial size of the parser's stacks.  */
15256: #ifndef	YYINITDEPTH
15257: # define YYINITDEPTH 200
15258: #endif
15259: 
15260: /* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
15261:    if the built-in stack extension method is used).
15262: 
15263:    Do not make this value too large; the results are undefined if
15264:    YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
15265:    evaluated with infinite-precision integer arithmetic.  */
15266: 
15267: #ifndef YYMAXDEPTH
15268: # define YYMAXDEPTH 10000
15269: #endif
15270: 
15271: 
15272: 
15273: #if YYERROR_VERBOSE
15274: 
15275: # ifndef yystrlen
15276: #  if defined __GLIBC__ && defined _STRING_H
15277: #   define yystrlen strlen
15278: #  else
15279: /* Return the length of YYSTR.  */
15280: #if (defined __STDC__ || defined __C99__FUNC__ \
15281:      || defined __cplusplus || defined _MSC_VER)
15282: static YYSIZE_T
15283: yystrlen (const char *yystr)
15284: #else
15285: static YYSIZE_T
15286: yystrlen (yystr)
15287:     const char *yystr;
15288: #endif
15289: {
15290:   YYSIZE_T yylen;
15291:   for (yylen = 0; yystr[yylen]; yylen++)
15292:     continue;
15293:   return yylen;
15294: }
15295: #  endif
15296: # endif
15297: 
15298: # ifndef yystpcpy
15299: #  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
15300: #   define yystpcpy stpcpy
15301: #  else
15302: /* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
15303:    YYDEST.  */
15304: #if (defined __STDC__ || defined __C99__FUNC__ \
15305:      || defined __cplusplus || defined _MSC_VER)
15306: static char *
15307: yystpcpy (char *yydest, const char *yysrc)
15308: #else
15309: static char *
15310: yystpcpy (yydest, yysrc)
15311:     char *yydest;
15312:     const char *yysrc;
15313: #endif
15314: {
15315:   char *yyd = yydest;
15316:   const char *yys = yysrc;
15317: 
15318:   while ((*yyd++ = *yys++) != '\0')
15319:     continue;
15320: 
15321:   return yyd - 1;
15322: }
15323: #  endif
15324: # endif
15325: 
15326: # ifndef yytnamerr
15327: /* Copy to YYRES the contents of YYSTR after stripping away unnecessary
15328:    quotes and backslashes, so that it's suitable for yyerror.  The
15329:    heuristic is that double-quoting is unnecessary unless the string
15330:    contains an apostrophe, a comma, or backslash (other than
15331:    backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
15332:    null, do not copy; instead, return the length of what the result
15333:    would have been.  */
15334: static YYSIZE_T
15335: yytnamerr (char *yyres, const char *yystr)
15336: {
15337:   if (*yystr == '"')
15338:     {
15339:       YYSIZE_T yyn = 0;
15340:       char const *yyp = yystr;
15341: 
15342:       for (;;)
15343: 	switch (*++yyp)
15344: 	  {
15345: 	  case '\'':
15346: 	  case ',':
15347: 	    goto do_not_strip_quotes;
15348: 
15349: 	  case '\\':
15350: 	    if (*++yyp != '\\')
15351: 	      goto do_not_strip_quotes;
15352: 	    /* Fall through.  */
15353: 	  default:
15354: 	    if (yyres)
15355: 	      yyres[yyn] = *yyp;
15356: 	    yyn++;
15357: 	    break;
15358: 
15359: 	  case '"':
15360: 	    if (yyres)
15361: 	      yyres[yyn] = '\0';
15362: 	    return yyn;
15363: 	  }
15364:     do_not_strip_quotes: ;
15365:     }
15366: 
15367:   if (! yyres)
15368:     return yystrlen (yystr);
15369: 
15370:   return yystpcpy (yyres, yystr) - yyres;
15371: }
15372: # endif
15373: 
15374: /* Copy into YYRESULT an error message about the unexpected token
15375:    YYCHAR while in state YYSTATE.  Return the number of bytes copied,
15376:    including the terminating null byte.  If YYRESULT is null, do not
15377:    copy anything; just return the number of bytes that would be
15378:    copied.  As a special case, return 0 if an ordinary "syntax error"
15379:    message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
15380:    size calculation.  */
15381: static YYSIZE_T
15382: yysyntax_error (char *yyresult, int yystate, int yychar)
15383: {
15384:   int yyn = yypact[yystate];
15385: 
15386:   if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
15387:     return 0;
15388:   else
15389:     {
15390:       int yytype = YYTRANSLATE (yychar);
15391:       YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
15392:       YYSIZE_T yysize = yysize0;
15393:       YYSIZE_T yysize1;
15394:       int yysize_overflow = 0;
15395:       enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
15396:       char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
15397:       int yyx;
15398: 
15399: # if 0
15400:       /* This is so xgettext sees the translatable formats that are
15401: 	 constructed on the fly.  */
15402:       YY_("syntax error, unexpected %s");
15403:       YY_("syntax error, unexpected %s, expecting %s");
15404:       YY_("syntax error, unexpected %s, expecting %s or %s");
15405:       YY_("syntax error, unexpected %s, expecting %s or %s or %s");
15406:       YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
15407: # endif
15408:       char *yyfmt;
15409:       char const *yyf;
15410:       static char const yyunexpected[] = "syntax error, unexpected %s";
15411:       static char const yyexpecting[] = ", expecting %s";
15412:       static char const yyor[] = " or %s";
15413:       char yyformat[sizeof yyunexpected
15414: 		    + sizeof yyexpecting - 1
15415: 		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
15416: 		       * (sizeof yyor - 1))];
15417:       char const *yyprefix = yyexpecting;
15418: 
15419:       /* Start YYX at -YYN if negative to avoid negative indexes in
15420: 	 YYCHECK.  */
15421:       int yyxbegin = yyn < 0 ? -yyn : 0;
15422: 
15423:       /* Stay within bounds of both yycheck and yytname.  */
15424:       int yychecklim = YYLAST - yyn + 1;
15425:       int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
15426:       int yycount = 1;
15427: 
15428:       yyarg[0] = yytname[yytype];
15429:       yyfmt = yystpcpy (yyformat, yyunexpected);
15430: 
15431:       for (yyx = yyxbegin; yyx < yyxend; ++yyx)
15432: 	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
15433: 	  {
15434: 	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
15435: 	      {
15436: 		yycount = 1;
15437: 		yysize = yysize0;
15438: 		yyformat[sizeof yyunexpected - 1] = '\0';
15439: 		break;
15440: 	      }
15441: 	    yyarg[yycount++] = yytname[yyx];
15442: 	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
15443: 	    yysize_overflow |= (yysize1 < yysize);
15444: 	    yysize = yysize1;
15445: 	    yyfmt = yystpcpy (yyfmt, yyprefix);
15446: 	    yyprefix = yyor;
15447: 	  }
15448: 
15449:       yyf = YY_(yyformat);
15450:       yysize1 = yysize + yystrlen (yyf);
15451:       yysize_overflow |= (yysize1 < yysize);
15452:       yysize = yysize1;
15453: 
15454:       if (yysize_overflow)
15455: 	return YYSIZE_MAXIMUM;
15456: 
15457:       if (yyresult)
15458: 	{
15459: 	  /* Avoid sprintf, as that infringes on the user's name space.
15460: 	     Don't have undefined behavior even if the translation
15461: 	     produced a string with the wrong number of "%s"s.  */
15462: 	  char *yyp = yyresult;
15463: 	  int yyi = 0;
15464: 	  while ((*yyp = *yyf) != '\0')
15465: 	    {
15466: 	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
15467: 		{
15468: 		  yyp += yytnamerr (yyp, yyarg[yyi++]);
15469: 		  yyf += 2;
15470: 		}
15471: 	      else
15472: 		{
15473: 		  yyp++;
15474: 		  yyf++;
15475: 		}
15476: 	    }
15477: 	}
15478:       return yysize;
15479:     }
15480: }
15481: #endif /* YYERROR_VERBOSE */
15482: 
15483: 
15484: /*-----------------------------------------------.
15485: | Release the memory associated to this symbol.  |
15486: `-----------------------------------------------*/
15487: 
15488: /*ARGSUSED*/
15489: #if (defined __STDC__ || defined __C99__FUNC__ \
15490:      || defined __cplusplus || defined _MSC_VER)
15491: static void
15492: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
15493: #else
15494: static void
15495: yydestruct (yymsg, yytype, yyvaluep, yylocationp, yyscanner)
15496:     const char *yymsg;
15497:     int yytype;
15498:     YYSTYPE *yyvaluep;
15499:     YYLTYPE *yylocationp;
15500:     core_yyscan_t yyscanner;
15501: #endif
15502: {
15503:   YYUSE (yyvaluep);
15504:   YYUSE (yylocationp);
15505:   YYUSE (yyscanner);
15506: 
15507:   if (!yymsg)
15508:     yymsg = "Deleting";
15509:   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
15510: 
15511:   switch (yytype)
15512:     {
15513: 
15514:       default:
15515: 	break;
15516:     }
15517: }
15518: 
15519: 
15520: /* Prevent warnings from -Wmissing-prototypes.  */
15521: 
15522: #ifdef YYPARSE_PARAM
15523: #if defined __STDC__ || defined __cplusplus
15524: int yyparse (void *YYPARSE_PARAM);
15525: #else
15526: int yyparse ();
15527: #endif
15528: #else /* ! YYPARSE_PARAM */
15529: #if defined __STDC__ || defined __cplusplus
15530: int yyparse (core_yyscan_t yyscanner);
15531: #else
15532: int yyparse ();
15533: #endif
15534: #endif /* ! YYPARSE_PARAM */
15535: 
15536: 
15537: 
15538: 
15539: 
15540: 
15541: /*----------.
15542: | yyparse.  |
15543: `----------*/
15544: 
15545: #ifdef YYPARSE_PARAM
15546: #if (defined __STDC__ || defined __C99__FUNC__ \
15547:      || defined __cplusplus || defined _MSC_VER)
15548: int
15549: yyparse (void *YYPARSE_PARAM)
15550: #else
15551: int
15552: yyparse (YYPARSE_PARAM)
15553:     void *YYPARSE_PARAM;
15554: #endif
15555: #else /* ! YYPARSE_PARAM */
15556: #if (defined __STDC__ || defined __C99__FUNC__ \
15557:      || defined __cplusplus || defined _MSC_VER)
15558: int
15559: yyparse (core_yyscan_t yyscanner)
15560: #else
15561: int
15562: yyparse (yyscanner)
15563:     core_yyscan_t yyscanner;
15564: #endif
15565: #endif
15566: {
15567:   /* The look-ahead symbol.  */
15568: int yychar;
15569: 
15570: /* The semantic value of the look-ahead symbol.  */
15571: YYSTYPE yylval;
15572: 
15573: /* Number of syntax errors so far.  */
15574: int yynerrs;
15575: /* Location data for the look-ahead symbol.  */
15576: YYLTYPE yylloc;
15577: 
15578:   int yystate;
15579:   int yyn;
15580:   int yyresult;
15581:   /* Number of tokens to shift before error messages enabled.  */
15582:   int yyerrstatus;
15583:   /* Look-ahead token as an internal (translated) token number.  */
15584:   int yytoken = 0;
15585: #if YYERROR_VERBOSE
15586:   /* Buffer for error messages, and its allocated size.  */
15587:   char yymsgbuf[128];
15588:   char *yymsg = yymsgbuf;
15589:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
15590: #endif
15591: 
15592:   /* Three stacks and their tools:
15593:      `yyss': related to states,
15594:      `yyvs': related to semantic values,
15595:      `yyls': related to locations.
15596: 
15597:      Refer to the stacks thru separate pointers, to allow yyoverflow
15598:      to reallocate them elsewhere.  */
15599: 
15600:   /* The state stack.  */
15601:   yytype_int16 yyssa[YYINITDEPTH];
15602:   yytype_int16 *yyss = yyssa;
15603:   yytype_int16 *yyssp;
15604: 
15605:   /* The semantic value stack.  */
15606:   YYSTYPE yyvsa[YYINITDEPTH];
15607:   YYSTYPE *yyvs = yyvsa;
15608:   YYSTYPE *yyvsp;
15609: 
15610:   /* The location stack.  */
15611:   YYLTYPE yylsa[YYINITDEPTH];
15612:   YYLTYPE *yyls = yylsa;
15613:   YYLTYPE *yylsp;
15614:   /* The locations where the error started and ended.  */
15615:   YYLTYPE yyerror_range[2];
15616: 
15617: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))
15618: 
15619:   YYSIZE_T yystacksize = YYINITDEPTH;
15620: 
15621:   /* The variables used to return semantic value and location from the
15622:      action routines.  */
15623:   YYSTYPE yyval;
15624:   YYLTYPE yyloc;
15625: 
15626:   /* The number of symbols on the RHS of the reduced rule.
15627:      Keep to zero when no symbol should be popped.  */
15628:   int yylen = 0;
15629: 
15630:   YYDPRINTF ((stderr, "Starting parse\n"));
15631: 
15632:   yystate = 0;
15633:   yyerrstatus = 0;
15634:   yynerrs = 0;
15635:   yychar = YYEMPTY;		/* Cause a token to be read.  */
15636: 
15637:   /* Initialize stack pointers.
15638:      Waste one element of value and location stack
15639:      so that they stay on the same level as the state stack.
15640:      The wasted elements are never initialized.  */
15641: 
15642:   yyssp = yyss;
15643:   yyvsp = yyvs;
15644:   yylsp = yyls;
15645: #if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
15646:   /* Initialize the default location before parsing starts.  */
15647:   yylloc.first_line   = yylloc.last_line   = 1;
15648:   yylloc.first_column = yylloc.last_column = 0;
15649: #endif
15650: 
15651:   goto yysetstate;
15652: 
15653: /*------------------------------------------------------------.
15654: | yynewstate -- Push a new state, which is found in yystate.  |
15655: `------------------------------------------------------------*/
15656:  yynewstate:
15657:   /* In all cases, when you get here, the value and location stacks
15658:      have just been pushed.  So pushing a state here evens the stacks.  */
15659:   yyssp++;
15660: 
15661:  yysetstate:
15662:   *yyssp = yystate;
15663: 
15664:   if (yyss + yystacksize - 1 <= yyssp)
15665:     {
15666:       /* Get the current used size of the three stacks, in elements.  */
15667:       YYSIZE_T yysize = yyssp - yyss + 1;
15668: 
15669: #ifdef yyoverflow
15670:       {
15671: 	/* Give user a chance to reallocate the stack.  Use copies of
15672: 	   these so that the &'s don't force the real ones into
15673: 	   memory.  */
15674: 	YYSTYPE *yyvs1 = yyvs;
15675: 	yytype_int16 *yyss1 = yyss;
15676: 	YYLTYPE *yyls1 = yyls;
15677: 
15678: 	/* Each stack pointer address is followed by the size of the
15679: 	   data in use in that stack, in bytes.  This used to be a
15680: 	   conditional around just the two extra args, but that might
15681: 	   be undefined if yyoverflow is a macro.  */
15682: 	yyoverflow (YY_("memory exhausted"),
15683: 		    &yyss1, yysize * sizeof (*yyssp),
15684: 		    &yyvs1, yysize * sizeof (*yyvsp),
15685: 		    &yyls1, yysize * sizeof (*yylsp),
15686: 		    &yystacksize);
15687: 	yyls = yyls1;
15688: 	yyss = yyss1;
15689: 	yyvs = yyvs1;
15690:       }
15691: #else /* no yyoverflow */
15692: # ifndef YYSTACK_RELOCATE
15693:       goto yyexhaustedlab;
15694: # else
15695:       /* Extend the stack our own way.  */
15696:       if (YYMAXDEPTH <= yystacksize)
15697: 	goto yyexhaustedlab;
15698:       yystacksize *= 2;
15699:       if (YYMAXDEPTH < yystacksize)
15700: 	yystacksize = YYMAXDEPTH;
15701: 
15702:       {
15703: 	yytype_int16 *yyss1 = yyss;
15704: 	union yyalloc *yyptr =
15705: 	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
15706: 	if (! yyptr)
15707: 	  goto yyexhaustedlab;
15708: 	YYSTACK_RELOCATE (yyss);
15709: 	YYSTACK_RELOCATE (yyvs);
15710: 	YYSTACK_RELOCATE (yyls);
15711: #  undef YYSTACK_RELOCATE
15712: 	if (yyss1 != yyssa)
15713: 	  YYSTACK_FREE (yyss1);
15714:       }
15715: # endif
15716: #endif /* no yyoverflow */
15717: 
15718:       yyssp = yyss + yysize - 1;
15719:       yyvsp = yyvs + yysize - 1;
15720:       yylsp = yyls + yysize - 1;
15721: 
15722:       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
15723: 		  (unsigned long int) yystacksize));
15724: 
15725:       if (yyss + yystacksize - 1 <= yyssp)
15726: 	YYABORT;
15727:     }
15728: 
15729:   YYDPRINTF ((stderr, "Entering state %d\n", yystate));
15730: 
15731:   goto yybackup;
15732: 
15733: /*-----------.
15734: | yybackup.  |
15735: `-----------*/
15736: yybackup:
15737: 
15738:   /* Do appropriate processing given the current state.  Read a
15739:      look-ahead token if we need one and don't already have one.  */
15740: 
15741:   /* First try to decide what to do without reference to look-ahead token.  */
15742:   yyn = yypact[yystate];
15743:   if (yyn == YYPACT_NINF)
15744:     goto yydefault;
15745: 
15746:   /* Not known => get a look-ahead token if don't already have one.  */
15747: 
15748:   /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
15749:   if (yychar == YYEMPTY)
15750:     {
15751:       YYDPRINTF ((stderr, "Reading a token: "));
15752:       yychar = YYLEX;
15753:     }
15754: 
15755:   if (yychar <= YYEOF)
15756:     {
15757:       yychar = yytoken = YYEOF;
15758:       YYDPRINTF ((stderr, "Now at end of input.\n"));
15759:     }
15760:   else
15761:     {
15762:       yytoken = YYTRANSLATE (yychar);
15763:       YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
15764:     }
15765: 
15766:   /* If the proper action on seeing token YYTOKEN is to reduce or to
15767:      detect an error, take that action.  */
15768:   yyn += yytoken;
15769:   if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
15770:     goto yydefault;
15771:   yyn = yytable[yyn];
15772:   if (yyn <= 0)
15773:     {
15774:       if (yyn == 0 || yyn == YYTABLE_NINF)
15775: 	goto yyerrlab;
15776:       yyn = -yyn;
15777:       goto yyreduce;
15778:     }
15779: 
15780:   if (yyn == YYFINAL)
15781:     YYACCEPT;
15782: 
15783:   /* Count tokens shifted since error; after three, turn off error
15784:      status.  */
15785:   if (yyerrstatus)
15786:     yyerrstatus--;
15787: 
15788:   /* Shift the look-ahead token.  */
15789:   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
15790: 
15791:   /* Discard the shifted token unless it is eof.  */
15792:   if (yychar != YYEOF)
15793:     yychar = YYEMPTY;
15794: 
15795:   yystate = yyn;
15796:   *++yyvsp = yylval;
15797:   *++yylsp = yylloc;
15798:   goto yynewstate;
15799: 
15800: 
15801: /*-----------------------------------------------------------.
15802: | yydefault -- do the default action for the current state.  |
15803: `-----------------------------------------------------------*/
15804: yydefault:
15805:   yyn = yydefact[yystate];
15806:   if (yyn == 0)
15807:     goto yyerrlab;
15808:   goto yyreduce;
15809: 
15810: 
15811: /*-----------------------------.
15812: | yyreduce -- Do a reduction.  |
15813: `-----------------------------*/
15814: yyreduce:
15815:   /* yyn is the number of a rule to reduce with.  */
15816:   yylen = yyr2[yyn];
15817: 
15818:   /* If YYLEN is nonzero, implement the default value of the action:
15819:      `$$ = $1'.
15820: 
15821:      Otherwise, the following line sets YYVAL to garbage.
15822:      This behavior is undocumented and Bison
15823:      users should not rely upon it.  Assigning to YYVAL
15824:      unconditionally makes the parser a bit smaller, and it avoids a
15825:      GCC warning that YYVAL may be used uninitialized.  */
15826:   yyval = yyvsp[1-yylen];
15827: 
15828:   /* Default location.  */
15829:   YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
15830:   YY_REDUCE_PRINT (yyn);
15831:   switch (yyn)
15832:     {
15833:         case 2:
15834: #line 468 "third_party/libpg_query/grammar/grammar.y"
15835:     {
15836: 				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[(1) - (1)].list);
15837: 			;}
15838:     break;
15839: 
15840:   case 3:
15841: #line 484 "third_party/libpg_query/grammar/grammar.y"
15842:     {
15843: 					if ((yyvsp[(1) - (3)].list) != NIL)
15844: 					{
15845: 						/* update length of previous stmt */
15846: 						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[(1) - (3)].list)), (yylsp[(2) - (3)]));
15847: 					}
15848: 					if ((yyvsp[(3) - (3)].node) != NULL)
15849: 						(yyval.list) = lappend((yyvsp[(1) - (3)].list), makeRawStmt((yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]) + 1));
15850: 					else
15851: 						(yyval.list) = (yyvsp[(1) - (3)].list);
15852: 				;}
15853:     break;
15854: 
15855:   case 4:
15856: #line 496 "third_party/libpg_query/grammar/grammar.y"
15857:     {
15858: 					if ((yyvsp[(1) - (1)].node) != NULL)
15859: 						(yyval.list) = list_make1(makeRawStmt((yyvsp[(1) - (1)].node), 0));
15860: 					else
15861: 						(yyval.list) = NIL;
15862: 				;}
15863:     break;
15864: 
15865:   case 39:
15866: #line 539 "third_party/libpg_query/grammar/grammar.y"
15867:     { (yyval.node) = NULL; ;}
15868:     break;
15869: 
15870:   case 40:
15871: #line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
15872:     {
15873: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15874: 					n->relation = (yyvsp[(3) - (4)].range);
15875: 					n->cmds = (yyvsp[(4) - (4)].list);
15876: 					n->relkind = PG_OBJECT_TABLE;
15877: 					n->missing_ok = false;
15878: 					(yyval.node) = (PGNode *)n;
15879: 				;}
15880:     break;
15881: 
15882:   case 41:
15883: #line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
15884:     {
15885: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15886: 					n->relation = (yyvsp[(5) - (6)].range);
15887: 					n->cmds = (yyvsp[(6) - (6)].list);
15888: 					n->relkind = PG_OBJECT_TABLE;
15889: 					n->missing_ok = true;
15890: 					(yyval.node) = (PGNode *)n;
15891: 				;}
15892:     break;
15893: 
15894:   case 42:
15895: #line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
15896:     {
15897: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15898: 					n->relation = (yyvsp[(3) - (4)].range);
15899: 					n->cmds = (yyvsp[(4) - (4)].list);
15900: 					n->relkind = PG_OBJECT_INDEX;
15901: 					n->missing_ok = false;
15902: 					(yyval.node) = (PGNode *)n;
15903: 				;}
15904:     break;
15905: 
15906:   case 43:
15907: #line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
15908:     {
15909: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15910: 					n->relation = (yyvsp[(5) - (6)].range);
15911: 					n->cmds = (yyvsp[(6) - (6)].list);
15912: 					n->relkind = PG_OBJECT_INDEX;
15913: 					n->missing_ok = true;
15914: 					(yyval.node) = (PGNode *)n;
15915: 				;}
15916:     break;
15917: 
15918:   case 44:
15919: #line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
15920:     {
15921: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15922: 					n->relation = (yyvsp[(3) - (4)].range);
15923: 					n->cmds = (yyvsp[(4) - (4)].list);
15924: 					n->relkind = PG_OBJECT_SEQUENCE;
15925: 					n->missing_ok = false;
15926: 					(yyval.node) = (PGNode *)n;
15927: 				;}
15928:     break;
15929: 
15930:   case 45:
15931: #line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
15932:     {
15933: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15934: 					n->relation = (yyvsp[(5) - (6)].range);
15935: 					n->cmds = (yyvsp[(6) - (6)].list);
15936: 					n->relkind = PG_OBJECT_SEQUENCE;
15937: 					n->missing_ok = true;
15938: 					(yyval.node) = (PGNode *)n;
15939: 				;}
15940:     break;
15941: 
15942:   case 46:
15943: #line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
15944:     {
15945: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15946: 					n->relation = (yyvsp[(3) - (4)].range);
15947: 					n->cmds = (yyvsp[(4) - (4)].list);
15948: 					n->relkind = PG_OBJECT_VIEW;
15949: 					n->missing_ok = false;
15950: 					(yyval.node) = (PGNode *)n;
15951: 				;}
15952:     break;
15953: 
15954:   case 47:
15955: #line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
15956:     {
15957: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15958: 					n->relation = (yyvsp[(5) - (6)].range);
15959: 					n->cmds = (yyvsp[(6) - (6)].list);
15960: 					n->relkind = PG_OBJECT_VIEW;
15961: 					n->missing_ok = true;
15962: 					(yyval.node) = (PGNode *)n;
15963: 				;}
15964:     break;
15965: 
15966:   case 48:
15967: #line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
15968:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
15969:     break;
15970: 
15971:   case 49:
15972: #line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
15973:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
15974:     break;
15975: 
15976:   case 50:
15977: #line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
15978:     { (yyval.node) = (yyvsp[(3) - (3)].node); ;}
15979:     break;
15980: 
15981:   case 51:
15982: #line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
15983:     { (yyval.node) = NULL; ;}
15984:     break;
15985: 
15986:   case 52:
15987: #line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
15988:     {
15989: 					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
15990: 				;}
15991:     break;
15992: 
15993:   case 53:
15994: #line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
15995:     {
15996: 					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
15997: 				;}
15998:     break;
15999: 
16000:   case 54:
16001: #line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
16002:     {
16003: 					if (strcmp((yyvsp[(2) - (2)].defelt)->defname, "as") == 0 ||
16004: 						strcmp((yyvsp[(2) - (2)].defelt)->defname, "restart") == 0 ||
16005: 						strcmp((yyvsp[(2) - (2)].defelt)->defname, "owned_by") == 0)
16006: 						ereport(ERROR,
16007: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
16008: 								 errmsg("sequence option \"%s\" not supported here", (yyvsp[(2) - (2)].defelt)->defname),
16009: 								 parser_errposition((yylsp[(2) - (2)]))));
16010: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
16011: 				;}
16012:     break;
16013: 
16014:   case 55:
16015: #line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
16016:     {
16017: 					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[(3) - (3)].ival)), (yylsp[(1) - (3)]));
16018: 				;}
16019:     break;
16020: 
16021:   case 56:
16022: #line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
16023:     {
16024: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
16025: 				;}
16026:     break;
16027: 
16028:   case 57:
16029: #line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
16030:     {
16031: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
16032: 				;}
16033:     break;
16034: 
16035:   case 58:
16036: #line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
16037:     {
16038: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16039: 					n->subtype = PG_AT_AddColumn;
16040: 					n->def = (yyvsp[(2) - (2)].node);
16041: 					n->missing_ok = false;
16042: 					(yyval.node) = (PGNode *)n;
16043: 				;}
16044:     break;
16045: 
16046:   case 59:
16047: #line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
16048:     {
16049: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16050: 					n->subtype = PG_AT_AddColumn;
16051: 					n->def = (yyvsp[(5) - (5)].node);
16052: 					n->missing_ok = true;
16053: 					(yyval.node) = (PGNode *)n;
16054: 				;}
16055:     break;
16056: 
16057:   case 60:
16058: #line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
16059:     {
16060: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16061: 					n->subtype = PG_AT_AddColumn;
16062: 					n->def = (yyvsp[(3) - (3)].node);
16063: 					n->missing_ok = false;
16064: 					(yyval.node) = (PGNode *)n;
16065: 				;}
16066:     break;
16067: 
16068:   case 61:
16069: #line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
16070:     {
16071: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16072: 					n->subtype = PG_AT_AddColumn;
16073: 					n->def = (yyvsp[(6) - (6)].node);
16074: 					n->missing_ok = true;
16075: 					(yyval.node) = (PGNode *)n;
16076: 				;}
16077:     break;
16078: 
16079:   case 62:
16080: #line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
16081:     {
16082: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16083: 					n->subtype = PG_AT_ColumnDefault;
16084: 					n->name = (yyvsp[(3) - (4)].str);
16085: 					n->def = (yyvsp[(4) - (4)].node);
16086: 					(yyval.node) = (PGNode *)n;
16087: 				;}
16088:     break;
16089: 
16090:   case 63:
16091: #line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
16092:     {
16093: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16094: 					n->subtype = PG_AT_DropNotNull;
16095: 					n->name = (yyvsp[(3) - (6)].str);
16096: 					(yyval.node) = (PGNode *)n;
16097: 				;}
16098:     break;
16099: 
16100:   case 64:
16101: #line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
16102:     {
16103: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16104: 					n->subtype = PG_AT_SetNotNull;
16105: 					n->name = (yyvsp[(3) - (6)].str);
16106: 					(yyval.node) = (PGNode *)n;
16107: 				;}
16108:     break;
16109: 
16110:   case 65:
16111: #line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
16112:     {
16113: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16114: 					n->subtype = PG_AT_SetStatistics;
16115: 					n->name = (yyvsp[(3) - (6)].str);
16116: 					n->def = (PGNode *) makeInteger((yyvsp[(6) - (6)].ival));
16117: 					(yyval.node) = (PGNode *)n;
16118: 				;}
16119:     break;
16120: 
16121:   case 66:
16122: #line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
16123:     {
16124: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16125: 					n->subtype = PG_AT_SetOptions;
16126: 					n->name = (yyvsp[(3) - (5)].str);
16127: 					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
16128: 					(yyval.node) = (PGNode *)n;
16129: 				;}
16130:     break;
16131: 
16132:   case 67:
16133: #line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
16134:     {
16135: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16136: 					n->subtype = PG_AT_ResetOptions;
16137: 					n->name = (yyvsp[(3) - (5)].str);
16138: 					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
16139: 					(yyval.node) = (PGNode *)n;
16140: 				;}
16141:     break;
16142: 
16143:   case 68:
16144: #line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
16145:     {
16146: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16147: 					n->subtype = PG_AT_SetStorage;
16148: 					n->name = (yyvsp[(3) - (6)].str);
16149: 					n->def = (PGNode *) makeString((yyvsp[(6) - (6)].str));
16150: 					(yyval.node) = (PGNode *)n;
16151: 				;}
16152:     break;
16153: 
16154:   case 69:
16155: #line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
16156:     {
16157: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16158: 					PGConstraint *c = makeNode(PGConstraint);
16159: 
16160: 					c->contype = PG_CONSTR_IDENTITY;
16161: 					c->generated_when = (yyvsp[(6) - (9)].ival);
16162: 					c->options = (yyvsp[(9) - (9)].list);
16163: 					c->location = (yylsp[(5) - (9)]);
16164: 
16165: 					n->subtype = PG_AT_AddIdentity;
16166: 					n->name = (yyvsp[(3) - (9)].str);
16167: 					n->def = (PGNode *) c;
16168: 
16169: 					(yyval.node) = (PGNode *)n;
16170: 				;}
16171:     break;
16172: 
16173:   case 70:
16174: #line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
16175:     {
16176: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16177: 					n->subtype = PG_AT_SetIdentity;
16178: 					n->name = (yyvsp[(3) - (4)].str);
16179: 					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
16180: 					(yyval.node) = (PGNode *)n;
16181: 				;}
16182:     break;
16183: 
16184:   case 71:
16185: #line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
16186:     {
16187: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16188: 					n->subtype = AT_DropIdentity;
16189: 					n->name = (yyvsp[(3) - (5)].str);
16190: 					n->missing_ok = false;
16191: 					(yyval.node) = (PGNode *)n;
16192: 				;}
16193:     break;
16194: 
16195:   case 72:
16196: #line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
16197:     {
16198: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16199: 					n->subtype = AT_DropIdentity;
16200: 					n->name = (yyvsp[(3) - (7)].str);
16201: 					n->missing_ok = true;
16202: 					(yyval.node) = (PGNode *)n;
16203: 				;}
16204:     break;
16205: 
16206:   case 73:
16207: #line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
16208:     {
16209: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16210: 					n->subtype = PG_AT_DropColumn;
16211: 					n->name = (yyvsp[(5) - (6)].str);
16212: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
16213: 					n->missing_ok = true;
16214: 					(yyval.node) = (PGNode *)n;
16215: 				;}
16216:     break;
16217: 
16218:   case 74:
16219: #line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
16220:     {
16221: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16222: 					n->subtype = PG_AT_DropColumn;
16223: 					n->name = (yyvsp[(3) - (4)].str);
16224: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
16225: 					n->missing_ok = false;
16226: 					(yyval.node) = (PGNode *)n;
16227: 				;}
16228:     break;
16229: 
16230:   case 75:
16231: #line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
16232:     {
16233: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16234: 					PGColumnDef *def = makeNode(PGColumnDef);
16235: 					n->subtype = PG_AT_AlterColumnType;
16236: 					n->name = (yyvsp[(3) - (8)].str);
16237: 					n->def = (PGNode *) def;
16238: 					/* We only use these fields of the PGColumnDef node */
16239: 					def->typeName = (yyvsp[(6) - (8)].typnam);
16240: 					def->collClause = (PGCollateClause *) (yyvsp[(7) - (8)].node);
16241: 					def->raw_default = (yyvsp[(8) - (8)].node);
16242: 					def->location = (yylsp[(3) - (8)]);
16243: 					(yyval.node) = (PGNode *)n;
16244: 				;}
16245:     break;
16246: 
16247:   case 76:
16248: #line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
16249:     {
16250: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16251: 					n->subtype = PG_AT_AlterColumnGenericOptions;
16252: 					n->name = (yyvsp[(3) - (4)].str);
16253: 					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
16254: 					(yyval.node) = (PGNode *)n;
16255: 				;}
16256:     break;
16257: 
16258:   case 77:
16259: #line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
16260:     {
16261: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16262: 					n->subtype = PG_AT_AddConstraint;
16263: 					n->def = (yyvsp[(2) - (2)].node);
16264: 					(yyval.node) = (PGNode *)n;
16265: 				;}
16266:     break;
16267: 
16268:   case 78:
16269: #line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
16270:     {
16271: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16272: 					PGConstraint *c = makeNode(PGConstraint);
16273: 					n->subtype = PG_AT_AlterConstraint;
16274: 					n->def = (PGNode *) c;
16275: 					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
16276: 					c->conname = (yyvsp[(3) - (4)].str);
16277: 					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "ALTER CONSTRAINT statement",
16278: 									&c->deferrable,
16279: 									&c->initdeferred,
16280: 									NULL, NULL, yyscanner);
16281: 					(yyval.node) = (PGNode *)n;
16282: 				;}
16283:     break;
16284: 
16285:   case 79:
16286: #line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
16287:     {
16288: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16289: 					n->subtype = PG_AT_ValidateConstraint;
16290: 					n->name = (yyvsp[(3) - (3)].str);
16291: 					(yyval.node) = (PGNode *)n;
16292: 				;}
16293:     break;
16294: 
16295:   case 80:
16296: #line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
16297:     {
16298: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16299: 					n->subtype = PG_AT_DropConstraint;
16300: 					n->name = (yyvsp[(5) - (6)].str);
16301: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
16302: 					n->missing_ok = true;
16303: 					(yyval.node) = (PGNode *)n;
16304: 				;}
16305:     break;
16306: 
16307:   case 81:
16308: #line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
16309:     {
16310: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16311: 					n->subtype = PG_AT_DropConstraint;
16312: 					n->name = (yyvsp[(3) - (4)].str);
16313: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
16314: 					n->missing_ok = false;
16315: 					(yyval.node) = (PGNode *)n;
16316: 				;}
16317:     break;
16318: 
16319:   case 82:
16320: #line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
16321:     {
16322: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16323: 					n->subtype = PG_AT_SetLogged;
16324: 					(yyval.node) = (PGNode *)n;
16325: 				;}
16326:     break;
16327: 
16328:   case 83:
16329: #line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
16330:     {
16331: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16332: 					n->subtype = PG_AT_SetUnLogged;
16333: 					(yyval.node) = (PGNode *)n;
16334: 				;}
16335:     break;
16336: 
16337:   case 84:
16338: #line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
16339:     {
16340: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16341: 					n->subtype = PG_AT_SetRelOptions;
16342: 					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
16343: 					(yyval.node) = (PGNode *)n;
16344: 				;}
16345:     break;
16346: 
16347:   case 85:
16348: #line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
16349:     {
16350: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16351: 					n->subtype = PG_AT_ResetRelOptions;
16352: 					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
16353: 					(yyval.node) = (PGNode *)n;
16354: 				;}
16355:     break;
16356: 
16357:   case 86:
16358: #line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
16359:     {
16360: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16361: 					n->subtype = PG_AT_GenericOptions;
16362: 					n->def = (PGNode *)(yyvsp[(1) - (1)].list);
16363: 					(yyval.node) = (PGNode *) n;
16364: 				;}
16365:     break;
16366: 
16367:   case 87:
16368: #line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
16369:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
16370:     break;
16371: 
16372:   case 88:
16373: #line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
16374:     { (yyval.node) = NULL; ;}
16375:     break;
16376: 
16377:   case 89:
16378: #line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
16379:     {
16380: 					(yyval.defelt) = (yyvsp[(1) - (1)].defelt);
16381: 				;}
16382:     break;
16383: 
16384:   case 90:
16385: #line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
16386:     {
16387: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
16388: 					(yyval.defelt)->defaction = PG_DEFELEM_SET;
16389: 				;}
16390:     break;
16391: 
16392:   case 91:
16393: #line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
16394:     {
16395: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
16396: 					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
16397: 				;}
16398:     break;
16399: 
16400:   case 92:
16401: #line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
16402:     {
16403: 					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[(2) - (2)].str), NULL, DEFELEM_DROP, (yylsp[(2) - (2)]));
16404: 				;}
16405:     break;
16406: 
16407:   case 93:
16408: #line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
16409:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
16410:     break;
16411: 
16412:   case 94:
16413: #line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
16414:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
16415:     break;
16416: 
16417:   case 95:
16418: #line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
16419:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
16420:     break;
16421: 
16422:   case 96:
16423: #line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
16424:     { (yyval.ival) = 1; ;}
16425:     break;
16426: 
16427:   case 97:
16428: #line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
16429:     { (yyval.ival) = 0; ;}
16430:     break;
16431: 
16432:   case 98:
16433: #line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
16434:     { (yyval.ival) = 0; ;}
16435:     break;
16436: 
16437:   case 99:
16438: #line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
16439:     {
16440: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
16441: 						n->name = (yyvsp[(2) - (2)].str);
16442: 						(yyval.node) = (PGNode *) n;
16443: 					;}
16444:     break;
16445: 
16446:   case 100:
16447: #line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
16448:     {
16449: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
16450: 						n->name = (yyvsp[(3) - (3)].str);
16451: 						(yyval.node) = (PGNode *) n;
16452: 					;}
16453:     break;
16454: 
16455:   case 101:
16456: #line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
16457:     {
16458: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
16459: 						n->name = NULL;
16460: 						(yyval.node) = (PGNode *) n;
16461: 					;}
16462:     break;
16463: 
16464:   case 102:
16465: #line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
16466:     {
16467: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
16468: 						n->name = NULL;
16469: 						(yyval.node) = (PGNode *) n;
16470: 					;}
16471:     break;
16472: 
16473:   case 103:
16474: #line 8 "third_party/libpg_query/grammar/statements/create_enum.y"
16475:     {
16476: 					PGCreateEnumStmt *n = makeNode(PGCreateEnumStmt);
16477: 					n->typeName = (yyvsp[(3) - (8)].list);
16478: 					n->vals = (yyvsp[(7) - (8)].list);
16479: 					(yyval.node) = (PGNode *)n;
16480: 				;}
16481:     break;
16482: 
16483:   case 104:
16484: #line 17 "third_party/libpg_query/grammar/statements/create_enum.y"
16485:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16486:     break;
16487: 
16488:   case 105:
16489: #line 18 "third_party/libpg_query/grammar/statements/create_enum.y"
16490:     { (yyval.list) = NIL; ;}
16491:     break;
16492: 
16493:   case 106:
16494: #line 22 "third_party/libpg_query/grammar/statements/create_enum.y"
16495:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
16496:     break;
16497: 
16498:   case 107:
16499: #line 24 "third_party/libpg_query/grammar/statements/create_enum.y"
16500:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
16501:     break;
16502: 
16503:   case 108:
16504: #line 7 "third_party/libpg_query/grammar/statements/rename.y"
16505:     {
16506: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16507: 					n->renameType = PG_OBJECT_SCHEMA;
16508: 					n->subname = (yyvsp[(3) - (6)].str);
16509: 					n->newname = (yyvsp[(6) - (6)].str);
16510: 					n->missing_ok = false;
16511: 					(yyval.node) = (PGNode *)n;
16512: 				;}
16513:     break;
16514: 
16515:   case 109:
16516: #line 16 "third_party/libpg_query/grammar/statements/rename.y"
16517:     {
16518: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16519: 					n->renameType = PG_OBJECT_TABLE;
16520: 					n->relation = (yyvsp[(3) - (6)].range);
16521: 					n->subname = NULL;
16522: 					n->newname = (yyvsp[(6) - (6)].str);
16523: 					n->missing_ok = false;
16524: 					(yyval.node) = (PGNode *)n;
16525: 				;}
16526:     break;
16527: 
16528:   case 110:
16529: #line 26 "third_party/libpg_query/grammar/statements/rename.y"
16530:     {
16531: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16532: 					n->renameType = PG_OBJECT_TABLE;
16533: 					n->relation = (yyvsp[(5) - (8)].range);
16534: 					n->subname = NULL;
16535: 					n->newname = (yyvsp[(8) - (8)].str);
16536: 					n->missing_ok = true;
16537: 					(yyval.node) = (PGNode *)n;
16538: 				;}
16539:     break;
16540: 
16541:   case 111:
16542: #line 36 "third_party/libpg_query/grammar/statements/rename.y"
16543:     {
16544: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16545: 					n->renameType = PG_OBJECT_SEQUENCE;
16546: 					n->relation = (yyvsp[(3) - (6)].range);
16547: 					n->subname = NULL;
16548: 					n->newname = (yyvsp[(6) - (6)].str);
16549: 					n->missing_ok = false;
16550: 					(yyval.node) = (PGNode *)n;
16551: 				;}
16552:     break;
16553: 
16554:   case 112:
16555: #line 46 "third_party/libpg_query/grammar/statements/rename.y"
16556:     {
16557: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16558: 					n->renameType = PG_OBJECT_SEQUENCE;
16559: 					n->relation = (yyvsp[(5) - (8)].range);
16560: 					n->subname = NULL;
16561: 					n->newname = (yyvsp[(8) - (8)].str);
16562: 					n->missing_ok = true;
16563: 					(yyval.node) = (PGNode *)n;
16564: 				;}
16565:     break;
16566: 
16567:   case 113:
16568: #line 56 "third_party/libpg_query/grammar/statements/rename.y"
16569:     {
16570: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16571: 					n->renameType = PG_OBJECT_VIEW;
16572: 					n->relation = (yyvsp[(3) - (6)].range);
16573: 					n->subname = NULL;
16574: 					n->newname = (yyvsp[(6) - (6)].str);
16575: 					n->missing_ok = false;
16576: 					(yyval.node) = (PGNode *)n;
16577: 				;}
16578:     break;
16579: 
16580:   case 114:
16581: #line 66 "third_party/libpg_query/grammar/statements/rename.y"
16582:     {
16583: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16584: 					n->renameType = PG_OBJECT_VIEW;
16585: 					n->relation = (yyvsp[(5) - (8)].range);
16586: 					n->subname = NULL;
16587: 					n->newname = (yyvsp[(8) - (8)].str);
16588: 					n->missing_ok = true;
16589: 					(yyval.node) = (PGNode *)n;
16590: 				;}
16591:     break;
16592: 
16593:   case 115:
16594: #line 76 "third_party/libpg_query/grammar/statements/rename.y"
16595:     {
16596: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16597: 					n->renameType = PG_OBJECT_INDEX;
16598: 					n->relation = (yyvsp[(3) - (6)].range);
16599: 					n->subname = NULL;
16600: 					n->newname = (yyvsp[(6) - (6)].str);
16601: 					n->missing_ok = false;
16602: 					(yyval.node) = (PGNode *)n;
16603: 				;}
16604:     break;
16605: 
16606:   case 116:
16607: #line 86 "third_party/libpg_query/grammar/statements/rename.y"
16608:     {
16609: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16610: 					n->renameType = PG_OBJECT_INDEX;
16611: 					n->relation = (yyvsp[(5) - (8)].range);
16612: 					n->subname = NULL;
16613: 					n->newname = (yyvsp[(8) - (8)].str);
16614: 					n->missing_ok = true;
16615: 					(yyval.node) = (PGNode *)n;
16616: 				;}
16617:     break;
16618: 
16619:   case 117:
16620: #line 96 "third_party/libpg_query/grammar/statements/rename.y"
16621:     {
16622: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16623: 					n->renameType = PG_OBJECT_COLUMN;
16624: 					n->relationType = PG_OBJECT_TABLE;
16625: 					n->relation = (yyvsp[(3) - (8)].range);
16626: 					n->subname = (yyvsp[(6) - (8)].str);
16627: 					n->newname = (yyvsp[(8) - (8)].str);
16628: 					n->missing_ok = false;
16629: 					(yyval.node) = (PGNode *)n;
16630: 				;}
16631:     break;
16632: 
16633:   case 118:
16634: #line 107 "third_party/libpg_query/grammar/statements/rename.y"
16635:     {
16636: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16637: 					n->renameType = PG_OBJECT_COLUMN;
16638: 					n->relationType = PG_OBJECT_TABLE;
16639: 					n->relation = (yyvsp[(5) - (10)].range);
16640: 					n->subname = (yyvsp[(8) - (10)].str);
16641: 					n->newname = (yyvsp[(10) - (10)].str);
16642: 					n->missing_ok = true;
16643: 					(yyval.node) = (PGNode *)n;
16644: 				;}
16645:     break;
16646: 
16647:   case 119:
16648: #line 118 "third_party/libpg_query/grammar/statements/rename.y"
16649:     {
16650: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16651: 					n->renameType = PG_OBJECT_TABCONSTRAINT;
16652: 					n->relation = (yyvsp[(3) - (8)].range);
16653: 					n->subname = (yyvsp[(6) - (8)].str);
16654: 					n->newname = (yyvsp[(8) - (8)].str);
16655: 					n->missing_ok = false;
16656: 					(yyval.node) = (PGNode *)n;
16657: 				;}
16658:     break;
16659: 
16660:   case 120:
16661: #line 128 "third_party/libpg_query/grammar/statements/rename.y"
16662:     {
16663: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16664: 					n->renameType = PG_OBJECT_TABCONSTRAINT;
16665: 					n->relation = (yyvsp[(5) - (10)].range);
16666: 					n->subname = (yyvsp[(8) - (10)].str);
16667: 					n->newname = (yyvsp[(10) - (10)].str);
16668: 					n->missing_ok = true;
16669: 					(yyval.node) = (PGNode *)n;
16670: 				;}
16671:     break;
16672: 
16673:   case 121:
16674: #line 140 "third_party/libpg_query/grammar/statements/rename.y"
16675:     { (yyval.ival) = COLUMN; ;}
16676:     break;
16677: 
16678:   case 122:
16679: #line 141 "third_party/libpg_query/grammar/statements/rename.y"
16680:     { (yyval.ival) = 0; ;}
16681:     break;
16682: 
16683:   case 123:
16684: #line 10 "third_party/libpg_query/grammar/statements/insert.y"
16685:     {
16686: 					(yyvsp[(5) - (7)].istmt)->relation = (yyvsp[(4) - (7)].range);
16687: 					(yyvsp[(5) - (7)].istmt)->onConflictClause = (yyvsp[(6) - (7)].onconflict);
16688: 					(yyvsp[(5) - (7)].istmt)->returningList = (yyvsp[(7) - (7)].list);
16689: 					(yyvsp[(5) - (7)].istmt)->withClause = (yyvsp[(1) - (7)].with);
16690: 					(yyval.node) = (PGNode *) (yyvsp[(5) - (7)].istmt);
16691: 				;}
16692:     break;
16693: 
16694:   case 124:
16695: #line 22 "third_party/libpg_query/grammar/statements/insert.y"
16696:     {
16697: 					(yyval.istmt) = makeNode(PGInsertStmt);
16698: 					(yyval.istmt)->cols = NIL;
16699: 					(yyval.istmt)->selectStmt = (yyvsp[(1) - (1)].node);
16700: 				;}
16701:     break;
16702: 
16703:   case 125:
16704: #line 28 "third_party/libpg_query/grammar/statements/insert.y"
16705:     {
16706: 					(yyval.istmt) = makeNode(PGInsertStmt);
16707: 					(yyval.istmt)->cols = NIL;
16708: 					(yyval.istmt)->override = (yyvsp[(2) - (4)].override);
16709: 					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
16710: 				;}
16711:     break;
16712: 
16713:   case 126:
16714: #line 35 "third_party/libpg_query/grammar/statements/insert.y"
16715:     {
16716: 					(yyval.istmt) = makeNode(PGInsertStmt);
16717: 					(yyval.istmt)->cols = (yyvsp[(2) - (4)].list);
16718: 					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
16719: 				;}
16720:     break;
16721: 
16722:   case 127:
16723: #line 41 "third_party/libpg_query/grammar/statements/insert.y"
16724:     {
16725: 					(yyval.istmt) = makeNode(PGInsertStmt);
16726: 					(yyval.istmt)->cols = (yyvsp[(2) - (7)].list);
16727: 					(yyval.istmt)->override = (yyvsp[(5) - (7)].override);
16728: 					(yyval.istmt)->selectStmt = (yyvsp[(7) - (7)].node);
16729: 				;}
16730:     break;
16731: 
16732:   case 128:
16733: #line 48 "third_party/libpg_query/grammar/statements/insert.y"
16734:     {
16735: 					(yyval.istmt) = makeNode(PGInsertStmt);
16736: 					(yyval.istmt)->cols = NIL;
16737: 					(yyval.istmt)->selectStmt = NULL;
16738: 				;}
16739:     break;
16740: 
16741:   case 129:
16742: #line 58 "third_party/libpg_query/grammar/statements/insert.y"
16743:     {
16744: 					(yyval.range) = (yyvsp[(1) - (1)].range);
16745: 				;}
16746:     break;
16747: 
16748:   case 130:
16749: #line 62 "third_party/libpg_query/grammar/statements/insert.y"
16750:     {
16751: 					(yyvsp[(1) - (3)].range)->alias = makeAlias((yyvsp[(3) - (3)].str), NIL);
16752: 					(yyval.range) = (yyvsp[(1) - (3)].range);
16753: 				;}
16754:     break;
16755: 
16756:   case 131:
16757: #line 71 "third_party/libpg_query/grammar/statements/insert.y"
16758:     {
16759: 					(yyval.infer) = makeNode(PGInferClause);
16760: 					(yyval.infer)->indexElems = (yyvsp[(2) - (4)].list);
16761: 					(yyval.infer)->whereClause = (yyvsp[(4) - (4)].node);
16762: 					(yyval.infer)->conname = NULL;
16763: 					(yyval.infer)->location = (yylsp[(1) - (4)]);
16764: 				;}
16765:     break;
16766: 
16767:   case 132:
16768: #line 80 "third_party/libpg_query/grammar/statements/insert.y"
16769:     {
16770: 					(yyval.infer) = makeNode(PGInferClause);
16771: 					(yyval.infer)->indexElems = NIL;
16772: 					(yyval.infer)->whereClause = NULL;
16773: 					(yyval.infer)->conname = (yyvsp[(3) - (3)].str);
16774: 					(yyval.infer)->location = (yylsp[(1) - (3)]);
16775: 				;}
16776:     break;
16777: 
16778:   case 133:
16779: #line 88 "third_party/libpg_query/grammar/statements/insert.y"
16780:     {
16781: 					(yyval.infer) = NULL;
16782: 				;}
16783:     break;
16784: 
16785:   case 134:
16786: #line 95 "third_party/libpg_query/grammar/statements/insert.y"
16787:     { (yyval.with) = (yyvsp[(1) - (1)].with); ;}
16788:     break;
16789: 
16790:   case 135:
16791: #line 96 "third_party/libpg_query/grammar/statements/insert.y"
16792:     { (yyval.with) = NULL; ;}
16793:     break;
16794: 
16795:   case 136:
16796: #line 102 "third_party/libpg_query/grammar/statements/insert.y"
16797:     {
16798: 					(yyval.target) = makeNode(PGResTarget);
16799: 					(yyval.target)->name = (yyvsp[(1) - (2)].str);
16800: 					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
16801: 					(yyval.target)->val = NULL;
16802: 					(yyval.target)->location = (yylsp[(1) - (2)]);
16803: 				;}
16804:     break;
16805: 
16806:   case 137:
16807: #line 114 "third_party/libpg_query/grammar/statements/insert.y"
16808:     {
16809: 					(yyvsp[(1) - (3)].target)->val = (PGNode *) (yyvsp[(3) - (3)].node);
16810: 					(yyval.list) = list_make1((yyvsp[(1) - (3)].target));
16811: 				;}
16812:     break;
16813: 
16814:   case 138:
16815: #line 119 "third_party/libpg_query/grammar/statements/insert.y"
16816:     {
16817: 					int ncolumns = list_length((yyvsp[(2) - (5)].list));
16818: 					int i = 1;
16819: 					PGListCell *col_cell;
16820: 
16821: 					/* Create a PGMultiAssignRef source for each target */
16822: 					foreach(col_cell, (yyvsp[(2) - (5)].list))
16823: 					{
16824: 						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
16825: 						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);
16826: 
16827: 						r->source = (PGNode *) (yyvsp[(5) - (5)].node);
16828: 						r->colno = i;
16829: 						r->ncolumns = ncolumns;
16830: 						res_col->val = (PGNode *) r;
16831: 						i++;
16832: 					}
16833: 
16834: 					(yyval.list) = (yyvsp[(2) - (5)].list);
16835: 				;}
16836:     break;
16837: 
16838:   case 139:
16839: #line 144 "third_party/libpg_query/grammar/statements/insert.y"
16840:     {
16841: 					(yyval.onconflict) = makeNode(PGOnConflictClause);
16842: 					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
16843: 					(yyval.onconflict)->infer = (yyvsp[(3) - (8)].infer);
16844: 					(yyval.onconflict)->targetList = (yyvsp[(7) - (8)].list);
16845: 					(yyval.onconflict)->whereClause = (yyvsp[(8) - (8)].node);
16846: 					(yyval.onconflict)->location = (yylsp[(1) - (8)]);
16847: 				;}
16848:     break;
16849: 
16850:   case 140:
16851: #line 154 "third_party/libpg_query/grammar/statements/insert.y"
16852:     {
16853: 					(yyval.onconflict) = makeNode(PGOnConflictClause);
16854: 					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
16855: 					(yyval.onconflict)->infer = (yyvsp[(3) - (5)].infer);
16856: 					(yyval.onconflict)->targetList = NIL;
16857: 					(yyval.onconflict)->whereClause = NULL;
16858: 					(yyval.onconflict)->location = (yylsp[(1) - (5)]);
16859: 				;}
16860:     break;
16861: 
16862:   case 141:
16863: #line 163 "third_party/libpg_query/grammar/statements/insert.y"
16864:     {
16865: 					(yyval.onconflict) = NULL;
16866: 				;}
16867:     break;
16868: 
16869:   case 142:
16870: #line 170 "third_party/libpg_query/grammar/statements/insert.y"
16871:     {
16872: 					(yyval.ielem) = makeNode(PGIndexElem);
16873: 					(yyval.ielem)->name = (yyvsp[(1) - (5)].str);
16874: 					(yyval.ielem)->expr = NULL;
16875: 					(yyval.ielem)->indexcolname = NULL;
16876: 					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
16877: 					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
16878: 					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
16879: 					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
16880: 				;}
16881:     break;
16882: 
16883:   case 143:
16884: #line 181 "third_party/libpg_query/grammar/statements/insert.y"
16885:     {
16886: 					(yyval.ielem) = makeNode(PGIndexElem);
16887: 					(yyval.ielem)->name = NULL;
16888: 					(yyval.ielem)->expr = (yyvsp[(1) - (5)].node);
16889: 					(yyval.ielem)->indexcolname = NULL;
16890: 					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
16891: 					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
16892: 					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
16893: 					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
16894: 				;}
16895:     break;
16896: 
16897:   case 144:
16898: #line 192 "third_party/libpg_query/grammar/statements/insert.y"
16899:     {
16900: 					(yyval.ielem) = makeNode(PGIndexElem);
16901: 					(yyval.ielem)->name = NULL;
16902: 					(yyval.ielem)->expr = (yyvsp[(2) - (7)].node);
16903: 					(yyval.ielem)->indexcolname = NULL;
16904: 					(yyval.ielem)->collation = (yyvsp[(4) - (7)].list);
16905: 					(yyval.ielem)->opclass = (yyvsp[(5) - (7)].list);
16906: 					(yyval.ielem)->ordering = (yyvsp[(6) - (7)].sortorder);
16907: 					(yyval.ielem)->nulls_ordering = (yyvsp[(7) - (7)].nullorder);
16908: 				;}
16909:     break;
16910: 
16911:   case 145:
16912: #line 206 "third_party/libpg_query/grammar/statements/insert.y"
16913:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
16914:     break;
16915: 
16916:   case 146:
16917: #line 207 "third_party/libpg_query/grammar/statements/insert.y"
16918:     { (yyval.list) = NIL; ;}
16919:     break;
16920: 
16921:   case 147:
16922: #line 213 "third_party/libpg_query/grammar/statements/insert.y"
16923:     { (yyval.override) = PG_OVERRIDING_USER_VALUE; ;}
16924:     break;
16925: 
16926:   case 148:
16927: #line 214 "third_party/libpg_query/grammar/statements/insert.y"
16928:     { (yyval.override) = OVERRIDING_SYSTEM_VALUE; ;}
16929:     break;
16930: 
16931:   case 149:
16932: #line 219 "third_party/libpg_query/grammar/statements/insert.y"
16933:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
16934:     break;
16935: 
16936:   case 150:
16937: #line 220 "third_party/libpg_query/grammar/statements/insert.y"
16938:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].target)); ;}
16939:     break;
16940: 
16941:   case 151:
16942: #line 226 "third_party/libpg_query/grammar/statements/insert.y"
16943:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
16944:     break;
16945: 
16946:   case 152:
16947: #line 227 "third_party/libpg_query/grammar/statements/insert.y"
16948:     { (yyval.list) = NIL; ;}
16949:     break;
16950: 
16951:   case 153:
16952: #line 231 "third_party/libpg_query/grammar/statements/insert.y"
16953:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16954:     break;
16955: 
16956:   case 154:
16957: #line 232 "third_party/libpg_query/grammar/statements/insert.y"
16958:     { (yyval.list) = NIL; ;}
16959:     break;
16960: 
16961:   case 155:
16962: #line 238 "third_party/libpg_query/grammar/statements/insert.y"
16963:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
16964:     break;
16965: 
16966:   case 156:
16967: #line 240 "third_party/libpg_query/grammar/statements/insert.y"
16968:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
16969:     break;
16970: 
16971:   case 157:
16972: #line 245 "third_party/libpg_query/grammar/statements/insert.y"
16973:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16974:     break;
16975: 
16976:   case 158:
16977: #line 246 "third_party/libpg_query/grammar/statements/insert.y"
16978:     { (yyval.list) = list_concat((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].list)); ;}
16979:     break;
16980: 
16981:   case 159:
16982: #line 250 "third_party/libpg_query/grammar/statements/insert.y"
16983:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].ielem)); ;}
16984:     break;
16985: 
16986:   case 160:
16987: #line 251 "third_party/libpg_query/grammar/statements/insert.y"
16988:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].ielem)); ;}
16989:     break;
16990: 
16991:   case 161:
16992: #line 257 "third_party/libpg_query/grammar/statements/insert.y"
16993:     {
16994: 					(yyval.target) = makeNode(PGResTarget);
16995: 					(yyval.target)->name = (yyvsp[(1) - (2)].str);
16996: 					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
16997: 					(yyval.target)->val = NULL;	/* upper production sets this */
16998: 					(yyval.target)->location = (yylsp[(1) - (2)]);
16999: 				;}
17000:     break;
17001: 
17002:   case 162:
17003: #line 8 "third_party/libpg_query/grammar/statements/pragma.y"
17004:     {
17005: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
17006: 					n->kind = PG_PRAGMA_TYPE_NOTHING;
17007: 					n->name = (yyvsp[(2) - (2)].str);
17008: 					(yyval.node) = (PGNode *)n;
17009: 				;}
17010:     break;
17011: 
17012:   case 163:
17013: #line 15 "third_party/libpg_query/grammar/statements/pragma.y"
17014:     {
17015: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
17016: 					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
17017: 					n->name = (yyvsp[(2) - (4)].str);
17018: 					n->args = (yyvsp[(4) - (4)].list);
17019: 					(yyval.node) = (PGNode *)n;
17020: 				;}
17021:     break;
17022: 
17023:   case 164:
17024: #line 23 "third_party/libpg_query/grammar/statements/pragma.y"
17025:     {
17026: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
17027: 					n->kind = PG_PRAGMA_TYPE_CALL;
17028: 					n->name = (yyvsp[(2) - (5)].str);
17029: 					n->args = (yyvsp[(4) - (5)].list);
17030: 					(yyval.node) = (PGNode *)n;
17031: 				;}
17032:     break;
17033: 
17034:   case 165:
17035: #line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
17036:     {
17037: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
17038: 					(yyvsp[(4) - (5)].range)->relpersistence = (yyvsp[(2) - (5)].ival);
17039: 					n->sequence = (yyvsp[(4) - (5)].range);
17040: 					n->options = (yyvsp[(5) - (5)].list);
17041: 					n->ownerId = InvalidOid;
17042: 					n->onconflict = PG_ERROR_ON_CONFLICT;
17043: 					(yyval.node) = (PGNode *)n;
17044: 				;}
17045:     break;
17046: 
17047:   case 166:
17048: #line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
17049:     {
17050: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
17051: 					(yyvsp[(7) - (8)].range)->relpersistence = (yyvsp[(2) - (8)].ival);
17052: 					n->sequence = (yyvsp[(7) - (8)].range);
17053: 					n->options = (yyvsp[(8) - (8)].list);
17054: 					n->ownerId = InvalidOid;
17055: 					n->onconflict = PG_IGNORE_ON_CONFLICT;
17056: 					(yyval.node) = (PGNode *)n;
17057: 				;}
17058:     break;
17059: 
17060:   case 167:
17061: #line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
17062:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
17063:     break;
17064: 
17065:   case 168:
17066: #line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
17067:     { (yyval.list) = NIL; ;}
17068:     break;
17069: 
17070:   case 169:
17071: #line 8 "third_party/libpg_query/grammar/statements/execute.y"
17072:     {
17073: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
17074: 					n->name = (yyvsp[(2) - (3)].str);
17075: 					n->params = (yyvsp[(3) - (3)].list);
17076: 					(yyval.node) = (PGNode *) n;
17077: 				;}
17078:     break;
17079: 
17080:   case 170:
17081: #line 16 "third_party/libpg_query/grammar/statements/execute.y"
17082:     {
17083: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
17084: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
17085: 					n->name = (yyvsp[(7) - (9)].str);
17086: 					n->params = (yyvsp[(8) - (9)].list);
17087: 					ctas->query = (PGNode *) n;
17088: 					ctas->into = (yyvsp[(4) - (9)].into);
17089: 					ctas->relkind = PG_OBJECT_TABLE;
17090: 					ctas->is_select_into = false;
17091: 					ctas->onconflict = PG_ERROR_ON_CONFLICT;
17092: 					/* cram additional flags into the PGIntoClause */
17093: 					(yyvsp[(4) - (9)].into)->rel->relpersistence = (yyvsp[(2) - (9)].ival);
17094: 					(yyvsp[(4) - (9)].into)->skipData = !((yyvsp[(9) - (9)].boolean));
17095: 					(yyval.node) = (PGNode *) ctas;
17096: 				;}
17097:     break;
17098: 
17099:   case 171:
17100: #line 33 "third_party/libpg_query/grammar/statements/execute.y"
17101:     {
17102: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
17103: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
17104: 					n->name = (yyvsp[(10) - (12)].str);
17105: 					n->params = (yyvsp[(11) - (12)].list);
17106: 					ctas->query = (PGNode *) n;
17107: 					ctas->into = (yyvsp[(7) - (12)].into);
17108: 					ctas->relkind = PG_OBJECT_TABLE;
17109: 					ctas->is_select_into = false;
17110: 					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
17111: 					/* cram additional flags into the PGIntoClause */
17112: 					(yyvsp[(7) - (12)].into)->rel->relpersistence = (yyvsp[(2) - (12)].ival);
17113: 					(yyvsp[(7) - (12)].into)->skipData = !((yyvsp[(12) - (12)].boolean));
17114: 					(yyval.node) = (PGNode *) ctas;
17115: 				;}
17116:     break;
17117: 
17118:   case 172:
17119: #line 51 "third_party/libpg_query/grammar/statements/execute.y"
17120:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17121:     break;
17122: 
17123:   case 173:
17124: #line 52 "third_party/libpg_query/grammar/statements/execute.y"
17125:     { (yyval.list) = NIL; ;}
17126:     break;
17127: 
17128:   case 174:
17129: #line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17130:     {
17131: 					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
17132: 					n->sequence = (yyvsp[(3) - (4)].range);
17133: 					n->options = (yyvsp[(4) - (4)].list);
17134: 					n->missing_ok = false;
17135: 					(yyval.node) = (PGNode *)n;
17136: 				;}
17137:     break;
17138: 
17139:   case 175:
17140: #line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17141:     {
17142: 					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
17143: 					n->sequence = (yyvsp[(5) - (6)].range);
17144: 					n->options = (yyvsp[(6) - (6)].list);
17145: 					n->missing_ok = true;
17146: 					(yyval.node) = (PGNode *)n;
17147: 				;}
17148:     break;
17149: 
17150:   case 176:
17151: #line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17152:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
17153:     break;
17154: 
17155:   case 177:
17156: #line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17157:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
17158:     break;
17159: 
17160:   case 178:
17161: #line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17162:     {;}
17163:     break;
17164: 
17165:   case 179:
17166: #line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17167:     {;}
17168:     break;
17169: 
17170:   case 180:
17171: #line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17172:     {;}
17173:     break;
17174: 
17175:   case 181:
17176: #line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17177:     { (yyval.value) = makeFloat((yyvsp[(1) - (1)].str)); ;}
17178:     break;
17179: 
17180:   case 182:
17181: #line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17182:     { (yyval.value) = makeFloat((yyvsp[(2) - (2)].str)); ;}
17183:     break;
17184: 
17185:   case 183:
17186: #line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17187:     {
17188: 					(yyval.value) = makeFloat((yyvsp[(2) - (2)].str));
17189: 					doNegateFloat((yyval.value));
17190: 				;}
17191:     break;
17192: 
17193:   case 184:
17194: #line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17195:     { (yyval.value) = makeInteger((yyvsp[(1) - (1)].ival)); ;}
17196:     break;
17197: 
17198:   case 185:
17199: #line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17200:     {
17201: 					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[(2) - (2)].typnam), (yylsp[(1) - (2)]));
17202: 				;}
17203:     break;
17204: 
17205:   case 186:
17206: #line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17207:     {
17208: 					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
17209: 				;}
17210:     break;
17211: 
17212:   case 187:
17213: #line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17214:     {
17215: 					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
17216: 				;}
17217:     break;
17218: 
17219:   case 188:
17220: #line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17221:     {
17222: 					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[(1) - (2)]));
17223: 				;}
17224:     break;
17225: 
17226:   case 189:
17227: #line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17228:     {
17229: 					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
17230: 				;}
17231:     break;
17232: 
17233:   case 190:
17234: #line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17235:     {
17236: 					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
17237: 				;}
17238:     break;
17239: 
17240:   case 191:
17241: #line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17242:     {
17243: 					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
17244: 				;}
17245:     break;
17246: 
17247:   case 192:
17248: #line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17249:     {
17250: 					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[(1) - (2)]));
17251: 				;}
17252:     break;
17253: 
17254:   case 193:
17255: #line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17256:     {
17257: 					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[(1) - (2)]));
17258: 				;}
17259:     break;
17260: 
17261:   case 194:
17262: #line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17263:     {
17264: 					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
17265: 				;}
17266:     break;
17267: 
17268:   case 195:
17269: #line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17270:     {
17271: 					/* not documented, only used by pg_dump */
17272: 					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
17273: 				;}
17274:     break;
17275: 
17276:   case 196:
17277: #line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17278:     {
17279: 					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
17280: 				;}
17281:     break;
17282: 
17283:   case 197:
17284: #line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17285:     {
17286: 					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
17287: 				;}
17288:     break;
17289: 
17290:   case 198:
17291: #line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17292:     {
17293: 					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
17294: 				;}
17295:     break;
17296: 
17297:   case 199:
17298: #line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17299:     {;}
17300:     break;
17301: 
17302:   case 200:
17303: #line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17304:     {;}
17305:     break;
17306: 
17307:   case 201:
17308: #line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17309:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
17310:     break;
17311: 
17312:   case 202:
17313: #line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17314:     { (yyval.ival) = + (yyvsp[(2) - (2)].ival); ;}
17315:     break;
17316: 
17317:   case 203:
17318: #line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17319:     { (yyval.ival) = - (yyvsp[(2) - (2)].ival); ;}
17320:     break;
17321: 
17322:   case 204:
17323: #line 3 "third_party/libpg_query/grammar/statements/transaction.y"
17324:     {
17325: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17326: 					n->kind = PG_TRANS_STMT_ROLLBACK;
17327: 					n->options = NIL;
17328: 					(yyval.node) = (PGNode *)n;
17329: 				;}
17330:     break;
17331: 
17332:   case 205:
17333: #line 10 "third_party/libpg_query/grammar/statements/transaction.y"
17334:     {
17335: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17336: 					n->kind = PG_TRANS_STMT_BEGIN;
17337: 					(yyval.node) = (PGNode *)n;
17338: 				;}
17339:     break;
17340: 
17341:   case 206:
17342: #line 16 "third_party/libpg_query/grammar/statements/transaction.y"
17343:     {
17344: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17345: 					n->kind = PG_TRANS_STMT_START;
17346: 					(yyval.node) = (PGNode *)n;
17347: 				;}
17348:     break;
17349: 
17350:   case 207:
17351: #line 22 "third_party/libpg_query/grammar/statements/transaction.y"
17352:     {
17353: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17354: 					n->kind = PG_TRANS_STMT_COMMIT;
17355: 					n->options = NIL;
17356: 					(yyval.node) = (PGNode *)n;
17357: 				;}
17358:     break;
17359: 
17360:   case 208:
17361: #line 29 "third_party/libpg_query/grammar/statements/transaction.y"
17362:     {
17363: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17364: 					n->kind = PG_TRANS_STMT_COMMIT;
17365: 					n->options = NIL;
17366: 					(yyval.node) = (PGNode *)n;
17367: 				;}
17368:     break;
17369: 
17370:   case 209:
17371: #line 36 "third_party/libpg_query/grammar/statements/transaction.y"
17372:     {
17373: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17374: 					n->kind = PG_TRANS_STMT_ROLLBACK;
17375: 					n->options = NIL;
17376: 					(yyval.node) = (PGNode *)n;
17377: 				;}
17378:     break;
17379: 
17380:   case 210:
17381: #line 45 "third_party/libpg_query/grammar/statements/transaction.y"
17382:     {;}
17383:     break;
17384: 
17385:   case 211:
17386: #line 46 "third_party/libpg_query/grammar/statements/transaction.y"
17387:     {;}
17388:     break;
17389: 
17390:   case 212:
17391: #line 47 "third_party/libpg_query/grammar/statements/transaction.y"
17392:     {;}
17393:     break;
17394: 
17395:   case 213:
17396: #line 9 "third_party/libpg_query/grammar/statements/create.y"
17397:     {
17398: 					PGCreateStmt *n = makeNode(PGCreateStmt);
17399: 					(yyvsp[(4) - (9)].range)->relpersistence = (yyvsp[(2) - (9)].ival);
17400: 					n->relation = (yyvsp[(4) - (9)].range);
17401: 					n->tableElts = (yyvsp[(6) - (9)].list);
17402: 					n->ofTypename = NULL;
17403: 					n->constraints = NIL;
17404: 					n->options = (yyvsp[(8) - (9)].list);
17405: 					n->oncommit = (yyvsp[(9) - (9)].oncommit);
17406: 					n->onconflict = PG_ERROR_ON_CONFLICT;
17407: 					(yyval.node) = (PGNode *)n;
17408: 				;}
17409:     break;
17410: 
17411:   case 214:
17412: #line 24 "third_party/libpg_query/grammar/statements/create.y"
17413:     {
17414: 					PGCreateStmt *n = makeNode(PGCreateStmt);
17415: 					(yyvsp[(7) - (12)].range)->relpersistence = (yyvsp[(2) - (12)].ival);
17416: 					n->relation = (yyvsp[(7) - (12)].range);
17417: 					n->tableElts = (yyvsp[(9) - (12)].list);
17418: 					n->ofTypename = NULL;
17419: 					n->constraints = NIL;
17420: 					n->options = (yyvsp[(11) - (12)].list);
17421: 					n->oncommit = (yyvsp[(12) - (12)].oncommit);
17422: 					n->onconflict = PG_IGNORE_ON_CONFLICT;
17423: 					(yyval.node) = (PGNode *)n;
17424: 				;}
17425:     break;
17426: 
17427:   case 215:
17428: #line 39 "third_party/libpg_query/grammar/statements/create.y"
17429:     {
17430: 					PGCreateStmt *n = makeNode(PGCreateStmt);
17431: 					(yyvsp[(6) - (11)].range)->relpersistence = (yyvsp[(4) - (11)].ival);
17432: 					n->relation = (yyvsp[(6) - (11)].range);
17433: 					n->tableElts = (yyvsp[(8) - (11)].list);
17434: 					n->ofTypename = NULL;
17435: 					n->constraints = NIL;
17436: 					n->options = (yyvsp[(10) - (11)].list);
17437: 					n->oncommit = (yyvsp[(11) - (11)].oncommit);
17438: 					n->onconflict = PG_REPLACE_ON_CONFLICT;
17439: 					(yyval.node) = (PGNode *)n;
17440: 				;}
17441:     break;
17442: 
17443:   case 216:
17444: #line 56 "third_party/libpg_query/grammar/statements/create.y"
17445:     { (yyval.ival) = 0; ;}
17446:     break;
17447: 
17448:   case 217:
17449: #line 58 "third_party/libpg_query/grammar/statements/create.y"
17450:     {
17451: 					/*
17452: 					 * We must complain about conflicting options.
17453: 					 * We could, but choose not to, complain about redundant
17454: 					 * options (ie, where $2's bit is already set in $1).
17455: 					 */
17456: 					int		newspec = (yyvsp[(1) - (2)].ival) | (yyvsp[(2) - (2)].ival);
17457: 
17458: 					/* special message for this case */
17459: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
17460: 						ereport(ERROR,
17461: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
17462: 								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
17463: 								 parser_errposition((yylsp[(2) - (2)]))));
17464: 					/* generic message for other conflicts */
17465: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
17466: 						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
17467: 						ereport(ERROR,
17468: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
17469: 								 errmsg("conflicting constraint properties"),
17470: 								 parser_errposition((yylsp[(2) - (2)]))));
17471: 					(yyval.ival) = newspec;
17472: 				;}
17473:     break;
17474: 
17475:   case 218:
17476: #line 84 "third_party/libpg_query/grammar/statements/create.y"
17477:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].typnam); ;}
17478:     break;
17479: 
17480:   case 219:
17481: #line 85 "third_party/libpg_query/grammar/statements/create.y"
17482:     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
17483:     break;
17484: 
17485:   case 220:
17486: #line 86 "third_party/libpg_query/grammar/statements/create.y"
17487:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].list); ;}
17488:     break;
17489: 
17490:   case 221:
17491: #line 87 "third_party/libpg_query/grammar/statements/create.y"
17492:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].value); ;}
17493:     break;
17494: 
17495:   case 222:
17496: #line 88 "third_party/libpg_query/grammar/statements/create.y"
17497:     { (yyval.node) = (PGNode *)makeString((yyvsp[(1) - (1)].str)); ;}
17498:     break;
17499: 
17500:   case 223:
17501: #line 89 "third_party/libpg_query/grammar/statements/create.y"
17502:     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
17503:     break;
17504: 
17505:   case 224:
17506: #line 93 "third_party/libpg_query/grammar/statements/create.y"
17507:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17508:     break;
17509: 
17510:   case 225:
17511: #line 94 "third_party/libpg_query/grammar/statements/create.y"
17512:     { (yyval.list) = NIL; ;}
17513:     break;
17514: 
17515:   case 226:
17516: #line 99 "third_party/libpg_query/grammar/statements/create.y"
17517:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
17518:     break;
17519: 
17520:   case 227:
17521: #line 104 "third_party/libpg_query/grammar/statements/create.y"
17522:     { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; ;}
17523:     break;
17524: 
17525:   case 228:
17526: #line 105 "third_party/libpg_query/grammar/statements/create.y"
17527:     { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; ;}
17528:     break;
17529: 
17530:   case 229:
17531: #line 106 "third_party/libpg_query/grammar/statements/create.y"
17532:     { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; ;}
17533:     break;
17534: 
17535:   case 230:
17536: #line 107 "third_party/libpg_query/grammar/statements/create.y"
17537:     { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; ;}
17538:     break;
17539: 
17540:   case 231:
17541: #line 108 "third_party/libpg_query/grammar/statements/create.y"
17542:     { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; ;}
17543:     break;
17544: 
17545:   case 232:
17546: #line 114 "third_party/libpg_query/grammar/statements/create.y"
17547:     {
17548: 					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
17549: 					n->conname = (yyvsp[(2) - (3)].str);
17550: 					n->location = (yylsp[(1) - (3)]);
17551: 					(yyval.node) = (PGNode *) n;
17552: 				;}
17553:     break;
17554: 
17555:   case 233:
17556: #line 120 "third_party/libpg_query/grammar/statements/create.y"
17557:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17558:     break;
17559: 
17560:   case 234:
17561: #line 121 "third_party/libpg_query/grammar/statements/create.y"
17562:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17563:     break;
17564: 
17565:   case 235:
17566: #line 123 "third_party/libpg_query/grammar/statements/create.y"
17567:     {
17568: 					/*
17569: 					 * Note: the PGCollateClause is momentarily included in
17570: 					 * the list built by ColQualList, but we split it out
17571: 					 * again in SplitColQualList.
17572: 					 */
17573: 					PGCollateClause *n = makeNode(PGCollateClause);
17574: 					n->arg = NULL;
17575: 					n->collname = (yyvsp[(2) - (2)].list);
17576: 					n->location = (yylsp[(1) - (2)]);
17577: 					(yyval.node) = (PGNode *) n;
17578: 				;}
17579:     break;
17580: 
17581:   case 236:
17582: #line 140 "third_party/libpg_query/grammar/statements/create.y"
17583:     {
17584: 					PGConstraint *n = makeNode(PGConstraint);
17585: 					n->contype = PG_CONSTR_NOTNULL;
17586: 					n->location = (yylsp[(1) - (2)]);
17587: 					(yyval.node) = (PGNode *)n;
17588: 				;}
17589:     break;
17590: 
17591:   case 237:
17592: #line 147 "third_party/libpg_query/grammar/statements/create.y"
17593:     {
17594: 					PGConstraint *n = makeNode(PGConstraint);
17595: 					n->contype = PG_CONSTR_NULL;
17596: 					n->location = (yylsp[(1) - (1)]);
17597: 					(yyval.node) = (PGNode *)n;
17598: 				;}
17599:     break;
17600: 
17601:   case 238:
17602: #line 154 "third_party/libpg_query/grammar/statements/create.y"
17603:     {
17604: 					PGConstraint *n = makeNode(PGConstraint);
17605: 					n->contype = PG_CONSTR_UNIQUE;
17606: 					n->location = (yylsp[(1) - (2)]);
17607: 					n->keys = NULL;
17608: 					n->options = (yyvsp[(2) - (2)].list);
17609: 					n->indexname = NULL;
17610: 					(yyval.node) = (PGNode *)n;
17611: 				;}
17612:     break;
17613: 
17614:   case 239:
17615: #line 164 "third_party/libpg_query/grammar/statements/create.y"
17616:     {
17617: 					PGConstraint *n = makeNode(PGConstraint);
17618: 					n->contype = PG_CONSTR_PRIMARY;
17619: 					n->location = (yylsp[(1) - (3)]);
17620: 					n->keys = NULL;
17621: 					n->options = (yyvsp[(3) - (3)].list);
17622: 					n->indexname = NULL;
17623: 					(yyval.node) = (PGNode *)n;
17624: 				;}
17625:     break;
17626: 
17627:   case 240:
17628: #line 174 "third_party/libpg_query/grammar/statements/create.y"
17629:     {
17630: 					PGConstraint *n = makeNode(PGConstraint);
17631: 					n->contype = PG_CONSTR_CHECK;
17632: 					n->location = (yylsp[(1) - (5)]);
17633: 					n->is_no_inherit = (yyvsp[(5) - (5)].boolean);
17634: 					n->raw_expr = (yyvsp[(3) - (5)].node);
17635: 					n->cooked_expr = NULL;
17636: 					n->skip_validation = false;
17637: 					n->initially_valid = true;
17638: 					(yyval.node) = (PGNode *)n;
17639: 				;}
17640:     break;
17641: 
17642:   case 241:
17643: #line 186 "third_party/libpg_query/grammar/statements/create.y"
17644:     {
17645: 					PGConstraint *n = makeNode(PGConstraint);
17646: 					n->contype = PG_CONSTR_COMPRESSION;
17647: 					n->location = (yylsp[(1) - (3)]);
17648: 					n->compression_name = (yyvsp[(3) - (3)].str);
17649: 					(yyval.node) = (PGNode *)n;
17650: 				;}
17651:     break;
17652: 
17653:   case 242:
17654: #line 194 "third_party/libpg_query/grammar/statements/create.y"
17655:     {
17656: 					PGConstraint *n = makeNode(PGConstraint);
17657: 					n->contype = PG_CONSTR_DEFAULT;
17658: 					n->location = (yylsp[(1) - (2)]);
17659: 					n->raw_expr = (yyvsp[(2) - (2)].node);
17660: 					n->cooked_expr = NULL;
17661: 					(yyval.node) = (PGNode *)n;
17662: 				;}
17663:     break;
17664: 
17665:   case 243:
17666: #line 203 "third_party/libpg_query/grammar/statements/create.y"
17667:     {
17668: 					PGConstraint *n = makeNode(PGConstraint);
17669: 					n->contype = PG_CONSTR_IDENTITY;
17670: 					n->generated_when = (yyvsp[(2) - (5)].ival);
17671: 					n->options = (yyvsp[(5) - (5)].list);
17672: 					n->location = (yylsp[(1) - (5)]);
17673: 					(yyval.node) = (PGNode *)n;
17674: 				;}
17675:     break;
17676: 
17677:   case 244:
17678: #line 212 "third_party/libpg_query/grammar/statements/create.y"
17679:     {
17680: 					PGConstraint *n = makeNode(PGConstraint);
17681: 					n->contype = PG_CONSTR_FOREIGN;
17682: 					n->location = (yylsp[(1) - (5)]);
17683: 					n->pktable			= (yyvsp[(2) - (5)].range);
17684: 					n->fk_attrs			= NIL;
17685: 					n->pk_attrs			= (yyvsp[(3) - (5)].list);
17686: 					n->fk_matchtype		= (yyvsp[(4) - (5)].ival);
17687: 					n->fk_upd_action	= (char) ((yyvsp[(5) - (5)].ival) >> 8);
17688: 					n->fk_del_action	= (char) ((yyvsp[(5) - (5)].ival) & 0xFF);
17689: 					n->skip_validation  = false;
17690: 					n->initially_valid  = true;
17691: 					(yyval.node) = (PGNode *)n;
17692: 				;}
17693:     break;
17694: 
17695:   case 245:
17696: #line 231 "third_party/libpg_query/grammar/statements/create.y"
17697:     {
17698: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
17699: 				;}
17700:     break;
17701: 
17702:   case 246:
17703: #line 237 "third_party/libpg_query/grammar/statements/create.y"
17704:     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
17705:     break;
17706: 
17707:   case 247:
17708: #line 243 "third_party/libpg_query/grammar/statements/create.y"
17709:     { (yyval.ival) = ((yyvsp[(1) - (1)].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
17710:     break;
17711: 
17712:   case 248:
17713: #line 245 "third_party/libpg_query/grammar/statements/create.y"
17714:     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[(1) - (1)].ival) & 0xFF); ;}
17715:     break;
17716: 
17717:   case 249:
17718: #line 247 "third_party/libpg_query/grammar/statements/create.y"
17719:     { (yyval.ival) = ((yyvsp[(1) - (2)].ival) << 8) | ((yyvsp[(2) - (2)].ival) & 0xFF); ;}
17720:     break;
17721: 
17722:   case 250:
17723: #line 249 "third_party/libpg_query/grammar/statements/create.y"
17724:     { (yyval.ival) = ((yyvsp[(2) - (2)].ival) << 8) | ((yyvsp[(1) - (2)].ival) & 0xFF); ;}
17725:     break;
17726: 
17727:   case 251:
17728: #line 251 "third_party/libpg_query/grammar/statements/create.y"
17729:     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
17730:     break;
17731: 
17732:   case 252:
17733: #line 256 "third_party/libpg_query/grammar/statements/create.y"
17734:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
17735:     break;
17736: 
17737:   case 253:
17738: #line 257 "third_party/libpg_query/grammar/statements/create.y"
17739:     { (yyval.list) = NIL; ;}
17740:     break;
17741: 
17742:   case 254:
17743: #line 261 "third_party/libpg_query/grammar/statements/create.y"
17744:     { (yyval.oncommit) = ONCOMMIT_DROP; ;}
17745:     break;
17746: 
17747:   case 255:
17748: #line 262 "third_party/libpg_query/grammar/statements/create.y"
17749:     { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; ;}
17750:     break;
17751: 
17752:   case 256:
17753: #line 263 "third_party/libpg_query/grammar/statements/create.y"
17754:     { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; ;}
17755:     break;
17756: 
17757:   case 257:
17758: #line 264 "third_party/libpg_query/grammar/statements/create.y"
17759:     { (yyval.oncommit) = PG_ONCOMMIT_NOOP; ;}
17760:     break;
17761: 
17762:   case 258:
17763: #line 269 "third_party/libpg_query/grammar/statements/create.y"
17764:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17765:     break;
17766: 
17767:   case 259:
17768: #line 273 "third_party/libpg_query/grammar/statements/create.y"
17769:     {  (yyval.boolean) = true; ;}
17770:     break;
17771: 
17772:   case 260:
17773: #line 274 "third_party/libpg_query/grammar/statements/create.y"
17774:     {  (yyval.boolean) = false; ;}
17775:     break;
17776: 
17777:   case 261:
17778: #line 280 "third_party/libpg_query/grammar/statements/create.y"
17779:     {
17780: 					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
17781: 					n->conname = (yyvsp[(2) - (3)].str);
17782: 					n->location = (yylsp[(1) - (3)]);
17783: 					(yyval.node) = (PGNode *) n;
17784: 				;}
17785:     break;
17786: 
17787:   case 262:
17788: #line 286 "third_party/libpg_query/grammar/statements/create.y"
17789:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17790:     break;
17791: 
17792:   case 263:
17793: #line 291 "third_party/libpg_query/grammar/statements/create.y"
17794:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; ;}
17795:     break;
17796: 
17797:   case 264:
17798: #line 292 "third_party/libpg_query/grammar/statements/create.y"
17799:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; ;}
17800:     break;
17801: 
17802:   case 265:
17803: #line 293 "third_party/libpg_query/grammar/statements/create.y"
17804:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; ;}
17805:     break;
17806: 
17807:   case 266:
17808: #line 294 "third_party/libpg_query/grammar/statements/create.y"
17809:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; ;}
17810:     break;
17811: 
17812:   case 267:
17813: #line 295 "third_party/libpg_query/grammar/statements/create.y"
17814:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; ;}
17815:     break;
17816: 
17817:   case 268:
17818: #line 296 "third_party/libpg_query/grammar/statements/create.y"
17819:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; ;}
17820:     break;
17821: 
17822:   case 269:
17823: #line 297 "third_party/libpg_query/grammar/statements/create.y"
17824:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; ;}
17825:     break;
17826: 
17827:   case 270:
17828: #line 298 "third_party/libpg_query/grammar/statements/create.y"
17829:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; ;}
17830:     break;
17831: 
17832:   case 271:
17833: #line 304 "third_party/libpg_query/grammar/statements/create.y"
17834:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
17835:     break;
17836: 
17837:   case 272:
17838: #line 305 "third_party/libpg_query/grammar/statements/create.y"
17839:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
17840:     break;
17841: 
17842:   case 273:
17843: #line 309 "third_party/libpg_query/grammar/statements/create.y"
17844:     { (yyval.str) = (yyvsp[(3) - (3)].str); ;}
17845:     break;
17846: 
17847:   case 274:
17848: #line 315 "third_party/libpg_query/grammar/statements/create.y"
17849:     {
17850: 					PGConstraint *n = makeNode(PGConstraint);
17851: 					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
17852: 					n->location = (yylsp[(1) - (1)]);
17853: 					(yyval.node) = (PGNode *)n;
17854: 				;}
17855:     break;
17856: 
17857:   case 275:
17858: #line 322 "third_party/libpg_query/grammar/statements/create.y"
17859:     {
17860: 					PGConstraint *n = makeNode(PGConstraint);
17861: 					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
17862: 					n->location = (yylsp[(1) - (2)]);
17863: 					(yyval.node) = (PGNode *)n;
17864: 				;}
17865:     break;
17866: 
17867:   case 276:
17868: #line 329 "third_party/libpg_query/grammar/statements/create.y"
17869:     {
17870: 					PGConstraint *n = makeNode(PGConstraint);
17871: 					n->contype = PG_CONSTR_ATTR_DEFERRED;
17872: 					n->location = (yylsp[(1) - (2)]);
17873: 					(yyval.node) = (PGNode *)n;
17874: 				;}
17875:     break;
17876: 
17877:   case 277:
17878: #line 336 "third_party/libpg_query/grammar/statements/create.y"
17879:     {
17880: 					PGConstraint *n = makeNode(PGConstraint);
17881: 					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
17882: 					n->location = (yylsp[(1) - (2)]);
17883: 					(yyval.node) = (PGNode *)n;
17884: 				;}
17885:     break;
17886: 
17887:   case 278:
17888: #line 347 "third_party/libpg_query/grammar/statements/create.y"
17889:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
17890:     break;
17891: 
17892:   case 279:
17893: #line 348 "third_party/libpg_query/grammar/statements/create.y"
17894:     { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[(1) - (2)]))); ;}
17895:     break;
17896: 
17897:   case 280:
17898: #line 349 "third_party/libpg_query/grammar/statements/create.y"
17899:     { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[(1) - (2)]))); ;}
17900:     break;
17901: 
17902:   case 281:
17903: #line 350 "third_party/libpg_query/grammar/statements/create.y"
17904:     { (yyval.list) = NIL; ;}
17905:     break;
17906: 
17907:   case 282:
17908: #line 354 "third_party/libpg_query/grammar/statements/create.y"
17909:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17910:     break;
17911: 
17912:   case 283:
17913: #line 359 "third_party/libpg_query/grammar/statements/create.y"
17914:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
17915:     break;
17916: 
17917:   case 284:
17918: #line 360 "third_party/libpg_query/grammar/statements/create.y"
17919:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) & ~(yyvsp[(3) - (3)].ival); ;}
17920:     break;
17921: 
17922:   case 285:
17923: #line 361 "third_party/libpg_query/grammar/statements/create.y"
17924:     { (yyval.ival) = 0; ;}
17925:     break;
17926: 
17927:   case 286:
17928: #line 366 "third_party/libpg_query/grammar/statements/create.y"
17929:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
17930:     break;
17931: 
17932:   case 287:
17933: #line 371 "third_party/libpg_query/grammar/statements/create.y"
17934:     { (yyval.ival) = CAS_NOT_DEFERRABLE; ;}
17935:     break;
17936: 
17937:   case 288:
17938: #line 372 "third_party/libpg_query/grammar/statements/create.y"
17939:     { (yyval.ival) = CAS_DEFERRABLE; ;}
17940:     break;
17941: 
17942:   case 289:
17943: #line 373 "third_party/libpg_query/grammar/statements/create.y"
17944:     { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; ;}
17945:     break;
17946: 
17947:   case 290:
17948: #line 374 "third_party/libpg_query/grammar/statements/create.y"
17949:     { (yyval.ival) = CAS_INITIALLY_DEFERRED; ;}
17950:     break;
17951: 
17952:   case 291:
17953: #line 375 "third_party/libpg_query/grammar/statements/create.y"
17954:     { (yyval.ival) = CAS_NOT_VALID; ;}
17955:     break;
17956: 
17957:   case 292:
17958: #line 376 "third_party/libpg_query/grammar/statements/create.y"
17959:     { (yyval.ival) = CAS_NO_INHERIT; ;}
17960:     break;
17961: 
17962:   case 293:
17963: #line 382 "third_party/libpg_query/grammar/statements/create.y"
17964:     {
17965: 					PGColumnDef *n = makeNode(PGColumnDef);
17966: 					n->colname = (yyvsp[(1) - (4)].str);
17967: 					n->typeName = (yyvsp[(2) - (4)].typnam);
17968: 					n->inhcount = 0;
17969: 					n->is_local = true;
17970: 					n->is_not_null = false;
17971: 					n->is_from_type = false;
17972: 					n->storage = 0;
17973: 					n->raw_default = NULL;
17974: 					n->cooked_default = NULL;
17975: 					n->collOid = InvalidOid;
17976: 					n->fdwoptions = (yyvsp[(3) - (4)].list);
17977: 					SplitColQualList((yyvsp[(4) - (4)].list), &n->constraints, &n->collClause,
17978: 									 yyscanner);
17979: 					n->location = (yylsp[(1) - (4)]);
17980: 					(yyval.node) = (PGNode *)n;
17981: 				;}
17982:     break;
17983: 
17984:   case 294:
17985: #line 405 "third_party/libpg_query/grammar/statements/create.y"
17986:     {
17987: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
17988: 				;}
17989:     break;
17990: 
17991:   case 295:
17992: #line 409 "third_party/libpg_query/grammar/statements/create.y"
17993:     {
17994: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
17995: 				;}
17996:     break;
17997: 
17998:   case 296:
17999: #line 415 "third_party/libpg_query/grammar/statements/create.y"
18000:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
18001:     break;
18002: 
18003:   case 297:
18004: #line 416 "third_party/libpg_query/grammar/statements/create.y"
18005:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
18006:     break;
18007: 
18008:   case 298:
18009: #line 420 "third_party/libpg_query/grammar/statements/create.y"
18010:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
18011:     break;
18012: 
18013:   case 299:
18014: #line 424 "third_party/libpg_query/grammar/statements/create.y"
18015:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18016:     break;
18017: 
18018:   case 300:
18019: #line 425 "third_party/libpg_query/grammar/statements/create.y"
18020:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18021:     break;
18022: 
18023:   case 301:
18024: #line 426 "third_party/libpg_query/grammar/statements/create.y"
18025:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18026:     break;
18027: 
18028:   case 302:
18029: #line 431 "third_party/libpg_query/grammar/statements/create.y"
18030:     {
18031: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
18032: 				;}
18033:     break;
18034: 
18035:   case 303:
18036: #line 435 "third_party/libpg_query/grammar/statements/create.y"
18037:     {
18038: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
18039: 				;}
18040:     break;
18041: 
18042:   case 304:
18043: #line 442 "third_party/libpg_query/grammar/statements/create.y"
18044:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
18045:     break;
18046: 
18047:   case 305:
18048: #line 443 "third_party/libpg_query/grammar/statements/create.y"
18049:     { (yyval.list) = NIL; ;}
18050:     break;
18051: 
18052:   case 306:
18053: #line 448 "third_party/libpg_query/grammar/statements/create.y"
18054:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18055:     break;
18056: 
18057:   case 307:
18058: #line 449 "third_party/libpg_query/grammar/statements/create.y"
18059:     { (yyval.list) = NIL; ;}
18060:     break;
18061: 
18062:   case 308:
18063: #line 454 "third_party/libpg_query/grammar/statements/create.y"
18064:     {
18065: 					(yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str));
18066: 				;}
18067:     break;
18068: 
18069:   case 309:
18070: #line 461 "third_party/libpg_query/grammar/statements/create.y"
18071:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
18072:     break;
18073: 
18074:   case 310:
18075: #line 462 "third_party/libpg_query/grammar/statements/create.y"
18076:     { (yyval.list) = NIL; ;}
18077:     break;
18078: 
18079:   case 311:
18080: #line 467 "third_party/libpg_query/grammar/statements/create.y"
18081:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
18082:     break;
18083: 
18084:   case 312:
18085: #line 468 "third_party/libpg_query/grammar/statements/create.y"
18086:     { (yyval.list) = NIL; ;}
18087:     break;
18088: 
18089:   case 313:
18090: #line 472 "third_party/libpg_query/grammar/statements/create.y"
18091:     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
18092:     break;
18093: 
18094:   case 314:
18095: #line 478 "third_party/libpg_query/grammar/statements/create.y"
18096:     {
18097: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
18098: 				;}
18099:     break;
18100: 
18101:   case 315:
18102: #line 482 "third_party/libpg_query/grammar/statements/create.y"
18103:     {
18104: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
18105: 				;}
18106:     break;
18107: 
18108:   case 316:
18109: #line 486 "third_party/libpg_query/grammar/statements/create.y"
18110:     {
18111: 					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (5)].str), (yyvsp[(3) - (5)].str), (PGNode *) (yyvsp[(5) - (5)].node),
18112: 											 PG_DEFELEM_UNSPEC, (yylsp[(1) - (5)]));
18113: 				;}
18114:     break;
18115: 
18116:   case 317:
18117: #line 491 "third_party/libpg_query/grammar/statements/create.y"
18118:     {
18119: 					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[(1) - (3)]));
18120: 				;}
18121:     break;
18122: 
18123:   case 318:
18124: #line 498 "third_party/libpg_query/grammar/statements/create.y"
18125:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
18126:     break;
18127: 
18128:   case 319:
18129: #line 499 "third_party/libpg_query/grammar/statements/create.y"
18130:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
18131:     break;
18132: 
18133:   case 320:
18134: #line 503 "third_party/libpg_query/grammar/statements/create.y"
18135:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
18136:     break;
18137: 
18138:   case 321:
18139: #line 505 "third_party/libpg_query/grammar/statements/create.y"
18140:     {
18141: 					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(1) - (4)].str)), (yyvsp[(2) - (4)].list)));
18142: 					(yyval.typnam)->pct_type = true;
18143: 					(yyval.typnam)->location = (yylsp[(1) - (4)]);
18144: 				;}
18145:     break;
18146: 
18147:   case 322:
18148: #line 511 "third_party/libpg_query/grammar/statements/create.y"
18149:     {
18150: 					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(2) - (5)].str)), (yyvsp[(3) - (5)].list)));
18151: 					(yyval.typnam)->pct_type = true;
18152: 					(yyval.typnam)->setof = true;
18153: 					(yyval.typnam)->location = (yylsp[(2) - (5)]);
18154: 				;}
18155:     break;
18156: 
18157:   case 323:
18158: #line 522 "third_party/libpg_query/grammar/statements/create.y"
18159:     {
18160: 					PGConstraint *n = makeNode(PGConstraint);
18161: 					n->contype = PG_CONSTR_CHECK;
18162: 					n->location = (yylsp[(1) - (5)]);
18163: 					n->raw_expr = (yyvsp[(3) - (5)].node);
18164: 					n->cooked_expr = NULL;
18165: 					processCASbits((yyvsp[(5) - (5)].ival), (yylsp[(5) - (5)]), "CHECK",
18166: 								   NULL, NULL, &n->skip_validation,
18167: 								   &n->is_no_inherit, yyscanner);
18168: 					n->initially_valid = !n->skip_validation;
18169: 					(yyval.node) = (PGNode *)n;
18170: 				;}
18171:     break;
18172: 
18173:   case 324:
18174: #line 536 "third_party/libpg_query/grammar/statements/create.y"
18175:     {
18176: 					PGConstraint *n = makeNode(PGConstraint);
18177: 					n->contype = PG_CONSTR_UNIQUE;
18178: 					n->location = (yylsp[(1) - (6)]);
18179: 					n->keys = (yyvsp[(3) - (6)].list);
18180: 					n->options = (yyvsp[(5) - (6)].list);
18181: 					n->indexname = NULL;
18182: 					processCASbits((yyvsp[(6) - (6)].ival), (yylsp[(6) - (6)]), "UNIQUE",
18183: 								   &n->deferrable, &n->initdeferred, NULL,
18184: 								   NULL, yyscanner);
18185: 					(yyval.node) = (PGNode *)n;
18186: 				;}
18187:     break;
18188: 
18189:   case 325:
18190: #line 549 "third_party/libpg_query/grammar/statements/create.y"
18191:     {
18192: 					PGConstraint *n = makeNode(PGConstraint);
18193: 					n->contype = PG_CONSTR_UNIQUE;
18194: 					n->location = (yylsp[(1) - (3)]);
18195: 					n->keys = NIL;
18196: 					n->options = NIL;
18197: 					n->indexname = (yyvsp[(2) - (3)].str);
18198: 					n->indexspace = NULL;
18199: 					processCASbits((yyvsp[(3) - (3)].ival), (yylsp[(3) - (3)]), "UNIQUE",
18200: 								   &n->deferrable, &n->initdeferred, NULL,
18201: 								   NULL, yyscanner);
18202: 					(yyval.node) = (PGNode *)n;
18203: 				;}
18204:     break;
18205: 
18206:   case 326:
18207: #line 564 "third_party/libpg_query/grammar/statements/create.y"
18208:     {
18209: 					PGConstraint *n = makeNode(PGConstraint);
18210: 					n->contype = PG_CONSTR_PRIMARY;
18211: 					n->location = (yylsp[(1) - (7)]);
18212: 					n->keys = (yyvsp[(4) - (7)].list);
18213: 					n->options = (yyvsp[(6) - (7)].list);
18214: 					n->indexname = NULL;
18215: 					processCASbits((yyvsp[(7) - (7)].ival), (yylsp[(7) - (7)]), "PRIMARY KEY",
18216: 								   &n->deferrable, &n->initdeferred, NULL,
18217: 								   NULL, yyscanner);
18218: 					(yyval.node) = (PGNode *)n;
18219: 				;}
18220:     break;
18221: 
18222:   case 327:
18223: #line 577 "third_party/libpg_query/grammar/statements/create.y"
18224:     {
18225: 					PGConstraint *n = makeNode(PGConstraint);
18226: 					n->contype = PG_CONSTR_PRIMARY;
18227: 					n->location = (yylsp[(1) - (4)]);
18228: 					n->keys = NIL;
18229: 					n->options = NIL;
18230: 					n->indexname = (yyvsp[(3) - (4)].str);
18231: 					n->indexspace = NULL;
18232: 					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "PRIMARY KEY",
18233: 								   &n->deferrable, &n->initdeferred, NULL,
18234: 								   NULL, yyscanner);
18235: 					(yyval.node) = (PGNode *)n;
18236: 				;}
18237:     break;
18238: 
18239:   case 328:
18240: #line 592 "third_party/libpg_query/grammar/statements/create.y"
18241:     {
18242: 					PGConstraint *n = makeNode(PGConstraint);
18243: 					n->contype = PG_CONSTR_FOREIGN;
18244: 					n->location = (yylsp[(1) - (11)]);
18245: 					n->pktable			= (yyvsp[(7) - (11)].range);
18246: 					n->fk_attrs			= (yyvsp[(4) - (11)].list);
18247: 					n->pk_attrs			= (yyvsp[(8) - (11)].list);
18248: 					n->fk_matchtype		= (yyvsp[(9) - (11)].ival);
18249: 					n->fk_upd_action	= (char) ((yyvsp[(10) - (11)].ival) >> 8);
18250: 					n->fk_del_action	= (char) ((yyvsp[(10) - (11)].ival) & 0xFF);
18251: 					processCASbits((yyvsp[(11) - (11)].ival), (yylsp[(11) - (11)]), "FOREIGN KEY",
18252: 								   &n->deferrable, &n->initdeferred,
18253: 								   &n->skip_validation, NULL,
18254: 								   yyscanner);
18255: 					n->initially_valid = !n->skip_validation;
18256: 					(yyval.node) = (PGNode *)n;
18257: 				;}
18258:     break;
18259: 
18260:   case 329:
18261: #line 614 "third_party/libpg_query/grammar/statements/create.y"
18262:     {
18263: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
18264: 				;}
18265:     break;
18266: 
18267:   case 330:
18268: #line 618 "third_party/libpg_query/grammar/statements/create.y"
18269:     {
18270: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
18271: 				;}
18272:     break;
18273: 
18274:   case 331:
18275: #line 625 "third_party/libpg_query/grammar/statements/create.y"
18276:     {
18277: 				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
18278: 			;}
18279:     break;
18280: 
18281:   case 332:
18282: #line 629 "third_party/libpg_query/grammar/statements/create.y"
18283:     {
18284: 				ereport(ERROR,
18285: 						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
18286: 						 errmsg("MATCH PARTIAL not yet implemented"),
18287: 						 parser_errposition((yylsp[(1) - (2)]))));
18288: 				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
18289: 			;}
18290:     break;
18291: 
18292:   case 333:
18293: #line 637 "third_party/libpg_query/grammar/statements/create.y"
18294:     {
18295: 				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
18296: 			;}
18297:     break;
18298: 
18299:   case 334:
18300: #line 641 "third_party/libpg_query/grammar/statements/create.y"
18301:     {
18302: 				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
18303: 			;}
18304:     break;
18305: 
18306:   case 335:
18307: #line 649 "third_party/libpg_query/grammar/statements/create.y"
18308:     {
18309: 					PGTableLikeClause *n = makeNode(PGTableLikeClause);
18310: 					n->relation = (yyvsp[(2) - (3)].range);
18311: 					n->options = (yyvsp[(3) - (3)].ival);
18312: 					(yyval.node) = (PGNode *)n;
18313: 				;}
18314:     break;
18315: 
18316:   case 336:
18317: #line 658 "third_party/libpg_query/grammar/statements/create.y"
18318:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
18319:     break;
18320: 
18321:   case 337:
18322: #line 659 "third_party/libpg_query/grammar/statements/create.y"
18323:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
18324:     break;
18325: 
18326:   case 338:
18327: #line 660 "third_party/libpg_query/grammar/statements/create.y"
18328:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
18329:     break;
18330: 
18331:   case 339:
18332: #line 661 "third_party/libpg_query/grammar/statements/create.y"
18333:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
18334:     break;
18335: 
18336:   case 340:
18337: #line 663 "third_party/libpg_query/grammar/statements/create.y"
18338:     {
18339: 					ereport(PGWARNING,
18340: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
18341: 							 parser_errposition((yylsp[(1) - (2)]))));
18342: 					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
18343: 				;}
18344:     break;
18345: 
18346:   case 341:
18347: #line 670 "third_party/libpg_query/grammar/statements/create.y"
18348:     {
18349: 					ereport(PGWARNING,
18350: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
18351: 							 parser_errposition((yylsp[(1) - (2)]))));
18352: 					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
18353: 				;}
18354:     break;
18355: 
18356:   case 342:
18357: #line 676 "third_party/libpg_query/grammar/statements/create.y"
18358:     { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; ;}
18359:     break;
18360: 
18361:   case 343:
18362: #line 677 "third_party/libpg_query/grammar/statements/create.y"
18363:     { (yyval.ival) = RELPERSISTENCE_PERMANENT; ;}
18364:     break;
18365: 
18366:   case 344:
18367: #line 682 "third_party/libpg_query/grammar/statements/create.y"
18368:     { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; ;}
18369:     break;
18370: 
18371:   case 345:
18372: #line 683 "third_party/libpg_query/grammar/statements/create.y"
18373:     { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; ;}
18374:     break;
18375: 
18376:   case 346:
18377: #line 10 "third_party/libpg_query/grammar/statements/drop.y"
18378:     {
18379: 					PGDropStmt *n = makeNode(PGDropStmt);
18380: 					n->removeType = (yyvsp[(2) - (6)].objtype);
18381: 					n->missing_ok = true;
18382: 					n->objects = (yyvsp[(5) - (6)].list);
18383: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
18384: 					n->concurrent = false;
18385: 					(yyval.node) = (PGNode *)n;
18386: 				;}
18387:     break;
18388: 
18389:   case 347:
18390: #line 20 "third_party/libpg_query/grammar/statements/drop.y"
18391:     {
18392: 					PGDropStmt *n = makeNode(PGDropStmt);
18393: 					n->removeType = (yyvsp[(2) - (4)].objtype);
18394: 					n->missing_ok = false;
18395: 					n->objects = (yyvsp[(3) - (4)].list);
18396: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
18397: 					n->concurrent = false;
18398: 					(yyval.node) = (PGNode *)n;
18399: 				;}
18400:     break;
18401: 
18402:   case 348:
18403: #line 30 "third_party/libpg_query/grammar/statements/drop.y"
18404:     {
18405: 					PGDropStmt *n = makeNode(PGDropStmt);
18406: 					n->removeType = (yyvsp[(2) - (6)].objtype);
18407: 					n->missing_ok = true;
18408: 					n->objects = (yyvsp[(5) - (6)].list);
18409: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
18410: 					n->concurrent = false;
18411: 					(yyval.node) = (PGNode *)n;
18412: 				;}
18413:     break;
18414: 
18415:   case 349:
18416: #line 40 "third_party/libpg_query/grammar/statements/drop.y"
18417:     {
18418: 					PGDropStmt *n = makeNode(PGDropStmt);
18419: 					n->removeType = (yyvsp[(2) - (4)].objtype);
18420: 					n->missing_ok = false;
18421: 					n->objects = (yyvsp[(3) - (4)].list);
18422: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
18423: 					n->concurrent = false;
18424: 					(yyval.node) = (PGNode *)n;
18425: 				;}
18426:     break;
18427: 
18428:   case 350:
18429: #line 50 "third_party/libpg_query/grammar/statements/drop.y"
18430:     {
18431: 					PGDropStmt *n = makeNode(PGDropStmt);
18432: 					n->removeType = (yyvsp[(2) - (6)].objtype);
18433: 					n->objects = list_make1(lappend((yyvsp[(5) - (6)].list), makeString((yyvsp[(3) - (6)].str))));
18434: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
18435: 					n->missing_ok = false;
18436: 					n->concurrent = false;
18437: 					(yyval.node) = (PGNode *) n;
18438: 				;}
18439:     break;
18440: 
18441:   case 351:
18442: #line 60 "third_party/libpg_query/grammar/statements/drop.y"
18443:     {
18444: 					PGDropStmt *n = makeNode(PGDropStmt);
18445: 					n->removeType = (yyvsp[(2) - (8)].objtype);
18446: 					n->objects = list_make1(lappend((yyvsp[(7) - (8)].list), makeString((yyvsp[(5) - (8)].str))));
18447: 					n->behavior = (yyvsp[(8) - (8)].dbehavior);
18448: 					n->missing_ok = true;
18449: 					n->concurrent = false;
18450: 					(yyval.node) = (PGNode *) n;
18451: 				;}
18452:     break;
18453: 
18454:   case 352:
18455: #line 70 "third_party/libpg_query/grammar/statements/drop.y"
18456:     {
18457: 					PGDropStmt *n = makeNode(PGDropStmt);
18458: 					n->removeType = PG_OBJECT_TYPE;
18459: 					n->missing_ok = false;
18460: 					n->objects = (yyvsp[(3) - (4)].list);
18461: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
18462: 					n->concurrent = false;
18463: 					(yyval.node) = (PGNode *) n;
18464: 				;}
18465:     break;
18466: 
18467:   case 353:
18468: #line 80 "third_party/libpg_query/grammar/statements/drop.y"
18469:     {
18470: 					PGDropStmt *n = makeNode(PGDropStmt);
18471: 					n->removeType = PG_OBJECT_TYPE;
18472: 					n->missing_ok = true;
18473: 					n->objects = (yyvsp[(5) - (6)].list);
18474: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
18475: 					n->concurrent = false;
18476: 					(yyval.node) = (PGNode *) n;
18477: 				;}
18478:     break;
18479: 
18480:   case 354:
18481: #line 93 "third_party/libpg_query/grammar/statements/drop.y"
18482:     { (yyval.objtype) = PG_OBJECT_TABLE; ;}
18483:     break;
18484: 
18485:   case 355:
18486: #line 94 "third_party/libpg_query/grammar/statements/drop.y"
18487:     { (yyval.objtype) = PG_OBJECT_SEQUENCE; ;}
18488:     break;
18489: 
18490:   case 356:
18491: #line 95 "third_party/libpg_query/grammar/statements/drop.y"
18492:     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
18493:     break;
18494: 
18495:   case 357:
18496: #line 96 "third_party/libpg_query/grammar/statements/drop.y"
18497:     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
18498:     break;
18499: 
18500:   case 358:
18501: #line 97 "third_party/libpg_query/grammar/statements/drop.y"
18502:     { (yyval.objtype) = PG_OBJECT_VIEW; ;}
18503:     break;
18504: 
18505:   case 359:
18506: #line 98 "third_party/libpg_query/grammar/statements/drop.y"
18507:     { (yyval.objtype) = PG_OBJECT_MATVIEW; ;}
18508:     break;
18509: 
18510:   case 360:
18511: #line 99 "third_party/libpg_query/grammar/statements/drop.y"
18512:     { (yyval.objtype) = PG_OBJECT_INDEX; ;}
18513:     break;
18514: 
18515:   case 361:
18516: #line 100 "third_party/libpg_query/grammar/statements/drop.y"
18517:     { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; ;}
18518:     break;
18519: 
18520:   case 362:
18521: #line 101 "third_party/libpg_query/grammar/statements/drop.y"
18522:     { (yyval.objtype) = PG_OBJECT_COLLATION; ;}
18523:     break;
18524: 
18525:   case 363:
18526: #line 102 "third_party/libpg_query/grammar/statements/drop.y"
18527:     { (yyval.objtype) = PG_OBJECT_CONVERSION; ;}
18528:     break;
18529: 
18530:   case 364:
18531: #line 103 "third_party/libpg_query/grammar/statements/drop.y"
18532:     { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; ;}
18533:     break;
18534: 
18535:   case 365:
18536: #line 104 "third_party/libpg_query/grammar/statements/drop.y"
18537:     { (yyval.objtype) = PG_OBJECT_TSPARSER; ;}
18538:     break;
18539: 
18540:   case 366:
18541: #line 105 "third_party/libpg_query/grammar/statements/drop.y"
18542:     { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; ;}
18543:     break;
18544: 
18545:   case 367:
18546: #line 106 "third_party/libpg_query/grammar/statements/drop.y"
18547:     { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; ;}
18548:     break;
18549: 
18550:   case 368:
18551: #line 107 "third_party/libpg_query/grammar/statements/drop.y"
18552:     { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; ;}
18553:     break;
18554: 
18555:   case 369:
18556: #line 112 "third_party/libpg_query/grammar/statements/drop.y"
18557:     { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; ;}
18558:     break;
18559: 
18560:   case 370:
18561: #line 113 "third_party/libpg_query/grammar/statements/drop.y"
18562:     { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; ;}
18563:     break;
18564: 
18565:   case 371:
18566: #line 114 "third_party/libpg_query/grammar/statements/drop.y"
18567:     { (yyval.objtype) = PG_OBJECT_EXTENSION; ;}
18568:     break;
18569: 
18570:   case 372:
18571: #line 115 "third_party/libpg_query/grammar/statements/drop.y"
18572:     { (yyval.objtype) = PG_OBJECT_FDW; ;}
18573:     break;
18574: 
18575:   case 373:
18576: #line 116 "third_party/libpg_query/grammar/statements/drop.y"
18577:     { (yyval.objtype) = PG_OBJECT_PUBLICATION; ;}
18578:     break;
18579: 
18580:   case 374:
18581: #line 117 "third_party/libpg_query/grammar/statements/drop.y"
18582:     { (yyval.objtype) = PG_OBJECT_SCHEMA; ;}
18583:     break;
18584: 
18585:   case 375:
18586: #line 118 "third_party/libpg_query/grammar/statements/drop.y"
18587:     { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; ;}
18588:     break;
18589: 
18590:   case 376:
18591: #line 123 "third_party/libpg_query/grammar/statements/drop.y"
18592:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
18593:     break;
18594: 
18595:   case 377:
18596: #line 124 "third_party/libpg_query/grammar/statements/drop.y"
18597:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
18598:     break;
18599: 
18600:   case 378:
18601: #line 129 "third_party/libpg_query/grammar/statements/drop.y"
18602:     { (yyval.dbehavior) = PG_DROP_CASCADE; ;}
18603:     break;
18604: 
18605:   case 379:
18606: #line 130 "third_party/libpg_query/grammar/statements/drop.y"
18607:     { (yyval.dbehavior) = PG_DROP_RESTRICT; ;}
18608:     break;
18609: 
18610:   case 380:
18611: #line 131 "third_party/libpg_query/grammar/statements/drop.y"
18612:     { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ ;}
18613:     break;
18614: 
18615:   case 381:
18616: #line 136 "third_party/libpg_query/grammar/statements/drop.y"
18617:     { (yyval.objtype) = PG_OBJECT_POLICY; ;}
18618:     break;
18619: 
18620:   case 382:
18621: #line 137 "third_party/libpg_query/grammar/statements/drop.y"
18622:     { (yyval.objtype) = PG_OBJECT_RULE; ;}
18623:     break;
18624: 
18625:   case 383:
18626: #line 138 "third_party/libpg_query/grammar/statements/drop.y"
18627:     { (yyval.objtype) = PG_OBJECT_TRIGGER; ;}
18628:     break;
18629: 
18630:   case 384:
18631: #line 141 "third_party/libpg_query/grammar/statements/drop.y"
18632:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
18633:     break;
18634: 
18635:   case 385:
18636: #line 142 "third_party/libpg_query/grammar/statements/drop.y"
18637:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
18638:     break;
18639: 
18640:   case 386:
18641: #line 8 "third_party/libpg_query/grammar/statements/create_function.y"
18642:     {
18643: 					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
18644: 					n->name = (yyvsp[(3) - (6)].range);
18645: 					n->params = (yyvsp[(4) - (6)].list);
18646: 					n->function = (yyvsp[(6) - (6)].node);
18647: 					(yyval.node) = (PGNode *)n;
18648: 				;}
18649:     break;
18650: 
18651:   case 389:
18652: #line 24 "third_party/libpg_query/grammar/statements/create_function.y"
18653:     {
18654: 				(yyval.list) = NIL;
18655: 			;}
18656:     break;
18657: 
18658:   case 390:
18659: #line 28 "third_party/libpg_query/grammar/statements/create_function.y"
18660:     {
18661: 				(yyval.list) = (yyvsp[(2) - (3)].list);
18662: 			;}
18663:     break;
18664: 
18665:   case 391:
18666: #line 12 "third_party/libpg_query/grammar/statements/update.y"
18667:     {
18668: 					PGUpdateStmt *n = makeNode(PGUpdateStmt);
18669: 					n->relation = (yyvsp[(3) - (8)].range);
18670: 					n->targetList = (yyvsp[(5) - (8)].list);
18671: 					n->fromClause = (yyvsp[(6) - (8)].list);
18672: 					n->whereClause = (yyvsp[(7) - (8)].node);
18673: 					n->returningList = (yyvsp[(8) - (8)].list);
18674: 					n->withClause = (yyvsp[(1) - (8)].with);
18675: 					(yyval.node) = (PGNode *)n;
18676: 				;}
18677:     break;
18678: 
18679:   case 392:
18680: #line 3 "third_party/libpg_query/grammar/statements/copy.y"
18681:     {
18682: 					PGCopyStmt *n = makeNode(PGCopyStmt);
18683: 					n->relation = (yyvsp[(3) - (11)].range);
18684: 					n->query = NULL;
18685: 					n->attlist = (yyvsp[(4) - (11)].list);
18686: 					n->is_from = (yyvsp[(6) - (11)].boolean);
18687: 					n->is_program = (yyvsp[(7) - (11)].boolean);
18688: 					n->filename = (yyvsp[(8) - (11)].str);
18689: 
18690: 					if (n->is_program && n->filename == NULL)
18691: 						ereport(ERROR,
18692: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
18693: 								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
18694: 								 parser_errposition((yylsp[(8) - (11)]))));
18695: 
18696: 					n->options = NIL;
18697: 					/* Concatenate user-supplied flags */
18698: 					if ((yyvsp[(2) - (11)].defelt))
18699: 						n->options = lappend(n->options, (yyvsp[(2) - (11)].defelt));
18700: 					if ((yyvsp[(5) - (11)].defelt))
18701: 						n->options = lappend(n->options, (yyvsp[(5) - (11)].defelt));
18702: 					if ((yyvsp[(9) - (11)].defelt))
18703: 						n->options = lappend(n->options, (yyvsp[(9) - (11)].defelt));
18704: 					if ((yyvsp[(11) - (11)].list))
18705: 						n->options = list_concat(n->options, (yyvsp[(11) - (11)].list));
18706: 					(yyval.node) = (PGNode *)n;
18707: 				;}
18708:     break;
18709: 
18710:   case 393:
18711: #line 31 "third_party/libpg_query/grammar/statements/copy.y"
18712:     {
18713: 					PGCopyStmt *n = makeNode(PGCopyStmt);
18714: 					n->relation = NULL;
18715: 					n->query = (yyvsp[(3) - (9)].node);
18716: 					n->attlist = NIL;
18717: 					n->is_from = false;
18718: 					n->is_program = (yyvsp[(6) - (9)].boolean);
18719: 					n->filename = (yyvsp[(7) - (9)].str);
18720: 					n->options = (yyvsp[(9) - (9)].list);
18721: 
18722: 					if (n->is_program && n->filename == NULL)
18723: 						ereport(ERROR,
18724: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
18725: 								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
18726: 								 parser_errposition((yylsp[(5) - (9)]))));
18727: 
18728: 					(yyval.node) = (PGNode *)n;
18729: 				;}
18730:     break;
18731: 
18732:   case 394:
18733: #line 53 "third_party/libpg_query/grammar/statements/copy.y"
18734:     { (yyval.boolean) = true; ;}
18735:     break;
18736: 
18737:   case 395:
18738: #line 54 "third_party/libpg_query/grammar/statements/copy.y"
18739:     { (yyval.boolean) = false; ;}
18740:     break;
18741: 
18742:   case 396:
18743: #line 60 "third_party/libpg_query/grammar/statements/copy.y"
18744:     {
18745: 					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(2) - (3)]));
18746: 				;}
18747:     break;
18748: 
18749:   case 397:
18750: #line 63 "third_party/libpg_query/grammar/statements/copy.y"
18751:     { (yyval.defelt) = NULL; ;}
18752:     break;
18753: 
18754:   case 398:
18755: #line 69 "third_party/libpg_query/grammar/statements/copy.y"
18756:     {
18757: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
18758: 				;}
18759:     break;
18760: 
18761:   case 399:
18762: #line 73 "third_party/libpg_query/grammar/statements/copy.y"
18763:     {
18764: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
18765: 				;}
18766:     break;
18767: 
18768:   case 400:
18769: #line 80 "third_party/libpg_query/grammar/statements/copy.y"
18770:     {;}
18771:     break;
18772: 
18773:   case 401:
18774: #line 81 "third_party/libpg_query/grammar/statements/copy.y"
18775:     {;}
18776:     break;
18777: 
18778:   case 402:
18779: #line 85 "third_party/libpg_query/grammar/statements/copy.y"
18780:     {;}
18781:     break;
18782: 
18783:   case 403:
18784: #line 86 "third_party/libpg_query/grammar/statements/copy.y"
18785:     {;}
18786:     break;
18787: 
18788:   case 404:
18789: #line 91 "third_party/libpg_query/grammar/statements/copy.y"
18790:     { (yyval.boolean) = true; ;}
18791:     break;
18792: 
18793:   case 405:
18794: #line 92 "third_party/libpg_query/grammar/statements/copy.y"
18795:     { (yyval.boolean) = false; ;}
18796:     break;
18797: 
18798:   case 406:
18799: #line 96 "third_party/libpg_query/grammar/statements/copy.y"
18800:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18801:     break;
18802: 
18803:   case 407:
18804: #line 97 "third_party/libpg_query/grammar/statements/copy.y"
18805:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
18806:     break;
18807: 
18808:   case 408:
18809: #line 102 "third_party/libpg_query/grammar/statements/copy.y"
18810:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
18811:     break;
18812: 
18813:   case 409:
18814: #line 103 "third_party/libpg_query/grammar/statements/copy.y"
18815:     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
18816:     break;
18817: 
18818:   case 410:
18819: #line 104 "third_party/libpg_query/grammar/statements/copy.y"
18820:     { (yyval.node) = (PGNode *) makeNode(PGAStar); ;}
18821:     break;
18822: 
18823:   case 411:
18824: #line 105 "third_party/libpg_query/grammar/statements/copy.y"
18825:     { (yyval.node) = (PGNode *) (yyvsp[(2) - (3)].list); ;}
18826:     break;
18827: 
18828:   case 412:
18829: #line 106 "third_party/libpg_query/grammar/statements/copy.y"
18830:     { (yyval.node) = NULL; ;}
18831:     break;
18832: 
18833:   case 413:
18834: #line 112 "third_party/libpg_query/grammar/statements/copy.y"
18835:     {
18836: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
18837: 				;}
18838:     break;
18839: 
18840:   case 414:
18841: #line 120 "third_party/libpg_query/grammar/statements/copy.y"
18842:     {
18843: 					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (2)]));
18844: 				;}
18845:     break;
18846: 
18847:   case 415:
18848: #line 123 "third_party/libpg_query/grammar/statements/copy.y"
18849:     { (yyval.defelt) = NULL; ;}
18850:     break;
18851: 
18852:   case 416:
18853: #line 128 "third_party/libpg_query/grammar/statements/copy.y"
18854:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
18855:     break;
18856: 
18857:   case 417:
18858: #line 129 "third_party/libpg_query/grammar/statements/copy.y"
18859:     { (yyval.list) = NIL; ;}
18860:     break;
18861: 
18862:   case 418:
18863: #line 135 "third_party/libpg_query/grammar/statements/copy.y"
18864:     {
18865: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
18866: 				;}
18867:     break;
18868: 
18869:   case 419:
18870: #line 138 "third_party/libpg_query/grammar/statements/copy.y"
18871:     { (yyval.defelt) = NULL; ;}
18872:     break;
18873: 
18874:   case 420:
18875: #line 144 "third_party/libpg_query/grammar/statements/copy.y"
18876:     {
18877: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
18878: 				;}
18879:     break;
18880: 
18881:   case 421:
18882: #line 148 "third_party/libpg_query/grammar/statements/copy.y"
18883:     {
18884: 					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
18885: 				;}
18886:     break;
18887: 
18888:   case 422:
18889: #line 152 "third_party/libpg_query/grammar/statements/copy.y"
18890:     {
18891: 					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
18892: 				;}
18893:     break;
18894: 
18895:   case 423:
18896: #line 156 "third_party/libpg_query/grammar/statements/copy.y"
18897:     {
18898: 					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18899: 				;}
18900:     break;
18901: 
18902:   case 424:
18903: #line 160 "third_party/libpg_query/grammar/statements/copy.y"
18904:     {
18905: 					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18906: 				;}
18907:     break;
18908: 
18909:   case 425:
18910: #line 164 "third_party/libpg_query/grammar/statements/copy.y"
18911:     {
18912: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[(1) - (1)]));
18913: 				;}
18914:     break;
18915: 
18916:   case 426:
18917: #line 168 "third_party/libpg_query/grammar/statements/copy.y"
18918:     {
18919: 					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
18920: 				;}
18921:     break;
18922: 
18923:   case 427:
18924: #line 172 "third_party/libpg_query/grammar/statements/copy.y"
18925:     {
18926: 					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18927: 				;}
18928:     break;
18929: 
18930:   case 428:
18931: #line 176 "third_party/libpg_query/grammar/statements/copy.y"
18932:     {
18933: 					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18934: 				;}
18935:     break;
18936: 
18937:   case 429:
18938: #line 180 "third_party/libpg_query/grammar/statements/copy.y"
18939:     {
18940: 					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
18941: 				;}
18942:     break;
18943: 
18944:   case 430:
18945: #line 184 "third_party/libpg_query/grammar/statements/copy.y"
18946:     {
18947: 					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));
18948: 				;}
18949:     break;
18950: 
18951:   case 431:
18952: #line 188 "third_party/libpg_query/grammar/statements/copy.y"
18953:     {
18954: 					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[(4) - (4)].list), (yylsp[(1) - (4)]));
18955: 				;}
18956:     break;
18957: 
18958:   case 432:
18959: #line 192 "third_party/libpg_query/grammar/statements/copy.y"
18960:     {
18961: 					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
18962: 				;}
18963:     break;
18964: 
18965:   case 433:
18966: #line 196 "third_party/libpg_query/grammar/statements/copy.y"
18967:     {
18968: 					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[(2) - (2)].str)), (yylsp[(1) - (2)]));
18969: 				;}
18970:     break;
18971: 
18972:   case 434:
18973: #line 203 "third_party/libpg_query/grammar/statements/copy.y"
18974:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
18975:     break;
18976: 
18977:   case 435:
18978: #line 209 "third_party/libpg_query/grammar/statements/copy.y"
18979:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
18980:     break;
18981: 
18982:   case 436:
18983: #line 210 "third_party/libpg_query/grammar/statements/copy.y"
18984:     { (yyval.str) = NULL; ;}
18985:     break;
18986: 
18987:   case 437:
18988: #line 211 "third_party/libpg_query/grammar/statements/copy.y"
18989:     { (yyval.str) = NULL; ;}
18990:     break;
18991: 
18992:   case 438:
18993: #line 217 "third_party/libpg_query/grammar/statements/copy.y"
18994:     {
18995: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
18996: 				;}
18997:     break;
18998: 
18999:   case 439:
19000: #line 221 "third_party/libpg_query/grammar/statements/copy.y"
19001:     {
19002: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
19003: 				;}
19004:     break;
19005: 
19006:   case 442:
19007: #line 52 "third_party/libpg_query/grammar/statements/select.y"
19008:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
19009:     break;
19010: 
19011:   case 443:
19012: #line 53 "third_party/libpg_query/grammar/statements/select.y"
19013:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
19014:     break;
19015: 
19016:   case 444:
19017: #line 68 "third_party/libpg_query/grammar/statements/select.y"
19018:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19019:     break;
19020: 
19021:   case 445:
19022: #line 70 "third_party/libpg_query/grammar/statements/select.y"
19023:     {
19024: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list), NIL,
19025: 										NULL, NULL, NULL,
19026: 										yyscanner);
19027: 					(yyval.node) = (yyvsp[(1) - (2)].node);
19028: 				;}
19029:     break;
19030: 
19031:   case 446:
19032: #line 77 "third_party/libpg_query/grammar/statements/select.y"
19033:     {
19034: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list),
19035: 										(PGNode*) list_nth((yyvsp[(4) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (4)].list), 1),
19036: 										NULL,
19037: 										yyscanner);
19038: 					(yyval.node) = (yyvsp[(1) - (4)].node);
19039: 				;}
19040:     break;
19041: 
19042:   case 447:
19043: #line 85 "third_party/libpg_query/grammar/statements/select.y"
19044:     {
19045: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(4) - (4)].list),
19046: 										(PGNode*) list_nth((yyvsp[(3) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(3) - (4)].list), 1),
19047: 										NULL,
19048: 										yyscanner);
19049: 					(yyval.node) = (yyvsp[(1) - (4)].node);
19050: 				;}
19051:     break;
19052: 
19053:   case 448:
19054: #line 93 "third_party/libpg_query/grammar/statements/select.y"
19055:     {
19056: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (2)].node), NULL, NIL,
19057: 										NULL, NULL,
19058: 										(yyvsp[(1) - (2)].with),
19059: 										yyscanner);
19060: 					(yyval.node) = (yyvsp[(2) - (2)].node);
19061: 				;}
19062:     break;
19063: 
19064:   case 449:
19065: #line 101 "third_party/libpg_query/grammar/statements/select.y"
19066:     {
19067: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].list), NIL,
19068: 										NULL, NULL,
19069: 										(yyvsp[(1) - (3)].with),
19070: 										yyscanner);
19071: 					(yyval.node) = (yyvsp[(2) - (3)].node);
19072: 				;}
19073:     break;
19074: 
19075:   case 450:
19076: #line 109 "third_party/libpg_query/grammar/statements/select.y"
19077:     {
19078: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].list),
19079: 										(PGNode*) list_nth((yyvsp[(5) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(5) - (5)].list), 1),
19080: 										(yyvsp[(1) - (5)].with),
19081: 										yyscanner);
19082: 					(yyval.node) = (yyvsp[(2) - (5)].node);
19083: 				;}
19084:     break;
19085: 
19086:   case 451:
19087: #line 117 "third_party/libpg_query/grammar/statements/select.y"
19088:     {
19089: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list),
19090: 										(PGNode*) list_nth((yyvsp[(4) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (5)].list), 1),
19091: 										(yyvsp[(1) - (5)].with),
19092: 										yyscanner);
19093: 					(yyval.node) = (yyvsp[(2) - (5)].node);
19094: 				;}
19095:     break;
19096: 
19097:   case 452:
19098: #line 127 "third_party/libpg_query/grammar/statements/select.y"
19099:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19100:     break;
19101: 
19102:   case 453:
19103: #line 128 "third_party/libpg_query/grammar/statements/select.y"
19104:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19105:     break;
19106: 
19107:   case 454:
19108: #line 158 "third_party/libpg_query/grammar/statements/select.y"
19109:     {
19110: 					PGSelectStmt *n = makeNode(PGSelectStmt);
19111: 					n->targetList = (yyvsp[(3) - (11)].list);
19112: 					n->intoClause = (yyvsp[(4) - (11)].into);
19113: 					n->fromClause = (yyvsp[(5) - (11)].list);
19114: 					n->whereClause = (yyvsp[(6) - (11)].node);
19115: 					n->groupClause = (yyvsp[(7) - (11)].list);
19116: 					n->havingClause = (yyvsp[(8) - (11)].node);
19117: 					n->windowClause = (yyvsp[(9) - (11)].list);
19118: 					n->qualifyClause = (yyvsp[(10) - (11)].node);
19119: 					n->sampleOptions = (yyvsp[(11) - (11)].node);
19120: 					(yyval.node) = (PGNode *)n;
19121: 				;}
19122:     break;
19123: 
19124:   case 455:
19125: #line 174 "third_party/libpg_query/grammar/statements/select.y"
19126:     {
19127: 					PGSelectStmt *n = makeNode(PGSelectStmt);
19128: 					n->distinctClause = (yyvsp[(2) - (11)].list);
19129: 					n->targetList = (yyvsp[(3) - (11)].list);
19130: 					n->intoClause = (yyvsp[(4) - (11)].into);
19131: 					n->fromClause = (yyvsp[(5) - (11)].list);
19132: 					n->whereClause = (yyvsp[(6) - (11)].node);
19133: 					n->groupClause = (yyvsp[(7) - (11)].list);
19134: 					n->havingClause = (yyvsp[(8) - (11)].node);
19135: 					n->windowClause = (yyvsp[(9) - (11)].list);
19136: 					n->qualifyClause = (yyvsp[(10) - (11)].node);
19137: 					n->sampleOptions = (yyvsp[(11) - (11)].node);
19138: 					(yyval.node) = (PGNode *)n;
19139: 				;}
19140:     break;
19141: 
19142:   case 456:
19143: #line 188 "third_party/libpg_query/grammar/statements/select.y"
19144:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19145:     break;
19146: 
19147:   case 457:
19148: #line 190 "third_party/libpg_query/grammar/statements/select.y"
19149:     {
19150: 					/* same as SELECT * FROM relation_expr */
19151: 					PGColumnRef *cr = makeNode(PGColumnRef);
19152: 					PGResTarget *rt = makeNode(PGResTarget);
19153: 					PGSelectStmt *n = makeNode(PGSelectStmt);
19154: 
19155: 					cr->fields = list_make1(makeNode(PGAStar));
19156: 					cr->location = -1;
19157: 
19158: 					rt->name = NULL;
19159: 					rt->indirection = NIL;
19160: 					rt->val = (PGNode *)cr;
19161: 					rt->location = -1;
19162: 
19163: 					n->targetList = list_make1(rt);
19164: 					n->fromClause = list_make1((yyvsp[(2) - (2)].range));
19165: 					(yyval.node) = (PGNode *)n;
19166: 				;}
19167:     break;
19168: 
19169:   case 458:
19170: #line 209 "third_party/libpg_query/grammar/statements/select.y"
19171:     {
19172: 					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
19173: 				;}
19174:     break;
19175: 
19176:   case 459:
19177: #line 213 "third_party/libpg_query/grammar/statements/select.y"
19178:     {
19179: 					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
19180: 				;}
19181:     break;
19182: 
19183:   case 460:
19184: #line 217 "third_party/libpg_query/grammar/statements/select.y"
19185:     {
19186: 					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
19187: 				;}
19188:     break;
19189: 
19190:   case 461:
19191: #line 234 "third_party/libpg_query/grammar/statements/select.y"
19192:     {
19193: 				(yyval.with) = makeNode(PGWithClause);
19194: 				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
19195: 				(yyval.with)->recursive = false;
19196: 				(yyval.with)->location = (yylsp[(1) - (2)]);
19197: 			;}
19198:     break;
19199: 
19200:   case 462:
19201: #line 241 "third_party/libpg_query/grammar/statements/select.y"
19202:     {
19203: 				(yyval.with) = makeNode(PGWithClause);
19204: 				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
19205: 				(yyval.with)->recursive = false;
19206: 				(yyval.with)->location = (yylsp[(1) - (2)]);
19207: 			;}
19208:     break;
19209: 
19210:   case 463:
19211: #line 248 "third_party/libpg_query/grammar/statements/select.y"
19212:     {
19213: 				(yyval.with) = makeNode(PGWithClause);
19214: 				(yyval.with)->ctes = (yyvsp[(3) - (3)].list);
19215: 				(yyval.with)->recursive = true;
19216: 				(yyval.with)->location = (yylsp[(1) - (3)]);
19217: 			;}
19218:     break;
19219: 
19220:   case 464:
19221: #line 257 "third_party/libpg_query/grammar/statements/select.y"
19222:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
19223:     break;
19224: 
19225:   case 465:
19226: #line 258 "third_party/libpg_query/grammar/statements/select.y"
19227:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
19228:     break;
19229: 
19230:   case 466:
19231: #line 262 "third_party/libpg_query/grammar/statements/select.y"
19232:     {
19233: 				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
19234: 				n->ctename = (yyvsp[(1) - (6)].str);
19235: 				n->aliascolnames = (yyvsp[(2) - (6)].list);
19236: 				n->ctequery = (yyvsp[(5) - (6)].node);
19237: 				n->location = (yylsp[(1) - (6)]);
19238: 				(yyval.node) = (PGNode *) n;
19239: 			;}
19240:     break;
19241: 
19242:   case 467:
19243: #line 274 "third_party/libpg_query/grammar/statements/select.y"
19244:     {
19245: 					(yyval.into) = makeNode(PGIntoClause);
19246: 					(yyval.into)->rel = (yyvsp[(2) - (2)].range);
19247: 					(yyval.into)->colNames = NIL;
19248: 					(yyval.into)->options = NIL;
19249: 					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
19250: 					(yyval.into)->viewQuery = NULL;
19251: 					(yyval.into)->skipData = false;
19252: 				;}
19253:     break;
19254: 
19255:   case 468:
19256: #line 284 "third_party/libpg_query/grammar/statements/select.y"
19257:     { (yyval.into) = NULL; ;}
19258:     break;
19259: 
19260:   case 469:
19261: #line 293 "third_party/libpg_query/grammar/statements/select.y"
19262:     {
19263: 					(yyval.range) = (yyvsp[(3) - (3)].range);
19264: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19265: 				;}
19266:     break;
19267: 
19268:   case 470:
19269: #line 298 "third_party/libpg_query/grammar/statements/select.y"
19270:     {
19271: 					(yyval.range) = (yyvsp[(3) - (3)].range);
19272: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19273: 				;}
19274:     break;
19275: 
19276:   case 471:
19277: #line 303 "third_party/libpg_query/grammar/statements/select.y"
19278:     {
19279: 					(yyval.range) = (yyvsp[(4) - (4)].range);
19280: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19281: 				;}
19282:     break;
19283: 
19284:   case 472:
19285: #line 308 "third_party/libpg_query/grammar/statements/select.y"
19286:     {
19287: 					(yyval.range) = (yyvsp[(4) - (4)].range);
19288: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19289: 				;}
19290:     break;
19291: 
19292:   case 473:
19293: #line 313 "third_party/libpg_query/grammar/statements/select.y"
19294:     {
19295: 					ereport(PGWARNING,
19296: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
19297: 							 parser_errposition((yylsp[(1) - (4)]))));
19298: 					(yyval.range) = (yyvsp[(4) - (4)].range);
19299: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19300: 				;}
19301:     break;
19302: 
19303:   case 474:
19304: #line 321 "third_party/libpg_query/grammar/statements/select.y"
19305:     {
19306: 					ereport(PGWARNING,
19307: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
19308: 							 parser_errposition((yylsp[(1) - (4)]))));
19309: 					(yyval.range) = (yyvsp[(4) - (4)].range);
19310: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19311: 				;}
19312:     break;
19313: 
19314:   case 475:
19315: #line 329 "third_party/libpg_query/grammar/statements/select.y"
19316:     {
19317: 					(yyval.range) = (yyvsp[(3) - (3)].range);
19318: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
19319: 				;}
19320:     break;
19321: 
19322:   case 476:
19323: #line 334 "third_party/libpg_query/grammar/statements/select.y"
19324:     {
19325: 					(yyval.range) = (yyvsp[(2) - (2)].range);
19326: 					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
19327: 				;}
19328:     break;
19329: 
19330:   case 477:
19331: #line 339 "third_party/libpg_query/grammar/statements/select.y"
19332:     {
19333: 					(yyval.range) = (yyvsp[(1) - (1)].range);
19334: 					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
19335: 				;}
19336:     break;
19337: 
19338:   case 478:
19339: #line 345 "third_party/libpg_query/grammar/statements/select.y"
19340:     {;}
19341:     break;
19342: 
19343:   case 479:
19344: #line 346 "third_party/libpg_query/grammar/statements/select.y"
19345:     {;}
19346:     break;
19347: 
19348:   case 480:
19349: #line 350 "third_party/libpg_query/grammar/statements/select.y"
19350:     { (yyval.boolean) = true; ;}
19351:     break;
19352: 
19353:   case 481:
19354: #line 351 "third_party/libpg_query/grammar/statements/select.y"
19355:     { (yyval.boolean) = false; ;}
19356:     break;
19357: 
19358:   case 482:
19359: #line 352 "third_party/libpg_query/grammar/statements/select.y"
19360:     { (yyval.boolean) = false; ;}
19361:     break;
19362: 
19363:   case 483:
19364: #line 359 "third_party/libpg_query/grammar/statements/select.y"
19365:     { (yyval.list) = list_make1(NIL); ;}
19366:     break;
19367: 
19368:   case 484:
19369: #line 360 "third_party/libpg_query/grammar/statements/select.y"
19370:     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
19371:     break;
19372: 
19373:   case 485:
19374: #line 364 "third_party/libpg_query/grammar/statements/select.y"
19375:     { (yyval.list) = NIL;;}
19376:     break;
19377: 
19378:   case 486:
19379: #line 365 "third_party/libpg_query/grammar/statements/select.y"
19380:     { (yyval.list) = NIL; ;}
19381:     break;
19382: 
19383:   case 487:
19384: #line 369 "third_party/libpg_query/grammar/statements/select.y"
19385:     { (yyval.boolean) = true;;}
19386:     break;
19387: 
19388:   case 488:
19389: #line 370 "third_party/libpg_query/grammar/statements/select.y"
19390:     { (yyval.boolean) = false;;}
19391:     break;
19392: 
19393:   case 489:
19394: #line 371 "third_party/libpg_query/grammar/statements/select.y"
19395:     { (yyval.boolean) = false; ;}
19396:     break;
19397: 
19398:   case 490:
19399: #line 375 "third_party/libpg_query/grammar/statements/select.y"
19400:     { (yyval.list) = (yyvsp[(1) - (1)].list);;}
19401:     break;
19402: 
19403:   case 491:
19404: #line 376 "third_party/libpg_query/grammar/statements/select.y"
19405:     { (yyval.list) = NIL; ;}
19406:     break;
19407: 
19408:   case 492:
19409: #line 380 "third_party/libpg_query/grammar/statements/select.y"
19410:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
19411:     break;
19412: 
19413:   case 493:
19414: #line 382 "third_party/libpg_query/grammar/statements/select.y"
19415:     {
19416: 					PGSortBy *sort = makeNode(PGSortBy);
19417: 					sort->node = (PGNode *) makeNode(PGAStar);
19418: 					sort->sortby_dir = (yyvsp[(4) - (5)].sortorder);
19419: 					sort->sortby_nulls = (yyvsp[(5) - (5)].nullorder);
19420: 					sort->useOp = NIL;
19421: 					sort->location = -1;		/* no operator */
19422: 					(yyval.list) = list_make1(sort);
19423: 				;}
19424:     break;
19425: 
19426:   case 494:
19427: #line 392 "third_party/libpg_query/grammar/statements/select.y"
19428:     {
19429: 					PGSortBy *sort = makeNode(PGSortBy);
19430: 					sort->node = (PGNode *) makeNode(PGAStar);
19431: 					sort->sortby_dir = (yyvsp[(4) - (5)].sortorder);
19432: 					sort->sortby_nulls = (yyvsp[(5) - (5)].nullorder);
19433: 					sort->useOp = NIL;
19434: 					sort->location = -1;		/* no operator */
19435: 					(yyval.list) = list_make1(sort);
19436: 				;}
19437:     break;
19438: 
19439:   case 495:
19440: #line 404 "third_party/libpg_query/grammar/statements/select.y"
19441:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].sortby)); ;}
19442:     break;
19443: 
19444:   case 496:
19445: #line 405 "third_party/libpg_query/grammar/statements/select.y"
19446:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].sortby)); ;}
19447:     break;
19448: 
19449:   case 497:
19450: #line 409 "third_party/libpg_query/grammar/statements/select.y"
19451:     {
19452: 					(yyval.sortby) = makeNode(PGSortBy);
19453: 					(yyval.sortby)->node = (yyvsp[(1) - (4)].node);
19454: 					(yyval.sortby)->sortby_dir = SORTBY_USING;
19455: 					(yyval.sortby)->sortby_nulls = (yyvsp[(4) - (4)].nullorder);
19456: 					(yyval.sortby)->useOp = (yyvsp[(3) - (4)].list);
19457: 					(yyval.sortby)->location = (yylsp[(3) - (4)]);
19458: 				;}
19459:     break;
19460: 
19461:   case 498:
19462: #line 418 "third_party/libpg_query/grammar/statements/select.y"
19463:     {
19464: 					(yyval.sortby) = makeNode(PGSortBy);
19465: 					(yyval.sortby)->node = (yyvsp[(1) - (3)].node);
19466: 					(yyval.sortby)->sortby_dir = (yyvsp[(2) - (3)].sortorder);
19467: 					(yyval.sortby)->sortby_nulls = (yyvsp[(3) - (3)].nullorder);
19468: 					(yyval.sortby)->useOp = NIL;
19469: 					(yyval.sortby)->location = -1;		/* no operator */
19470: 				;}
19471:     break;
19472: 
19473:   case 499:
19474: #line 428 "third_party/libpg_query/grammar/statements/select.y"
19475:     { (yyval.sortorder) = PG_SORTBY_ASC; ;}
19476:     break;
19477: 
19478:   case 500:
19479: #line 429 "third_party/libpg_query/grammar/statements/select.y"
19480:     { (yyval.sortorder) = PG_SORTBY_DESC; ;}
19481:     break;
19482: 
19483:   case 501:
19484: #line 430 "third_party/libpg_query/grammar/statements/select.y"
19485:     { (yyval.sortorder) = PG_SORTBY_DEFAULT; ;}
19486:     break;
19487: 
19488:   case 502:
19489: #line 433 "third_party/libpg_query/grammar/statements/select.y"
19490:     { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; ;}
19491:     break;
19492: 
19493:   case 503:
19494: #line 434 "third_party/libpg_query/grammar/statements/select.y"
19495:     { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; ;}
19496:     break;
19497: 
19498:   case 504:
19499: #line 435 "third_party/libpg_query/grammar/statements/select.y"
19500:     { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; ;}
19501:     break;
19502: 
19503:   case 505:
19504: #line 439 "third_party/libpg_query/grammar/statements/select.y"
19505:     { (yyval.list) = list_make2((yyvsp[(2) - (2)].node), (yyvsp[(1) - (2)].node)); ;}
19506:     break;
19507: 
19508:   case 506:
19509: #line 440 "third_party/libpg_query/grammar/statements/select.y"
19510:     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node)); ;}
19511:     break;
19512: 
19513:   case 507:
19514: #line 441 "third_party/libpg_query/grammar/statements/select.y"
19515:     { (yyval.list) = list_make2(NULL, (yyvsp[(1) - (1)].node)); ;}
19516:     break;
19517: 
19518:   case 508:
19519: #line 442 "third_party/libpg_query/grammar/statements/select.y"
19520:     { (yyval.list) = list_make2((yyvsp[(1) - (1)].node), NULL); ;}
19521:     break;
19522: 
19523:   case 509:
19524: #line 446 "third_party/libpg_query/grammar/statements/select.y"
19525:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
19526:     break;
19527: 
19528:   case 510:
19529: #line 447 "third_party/libpg_query/grammar/statements/select.y"
19530:     { (yyval.list) = list_make2(NULL,NULL); ;}
19531:     break;
19532: 
19533:   case 511:
19534: #line 452 "third_party/libpg_query/grammar/statements/select.y"
19535:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19536:     break;
19537: 
19538:   case 512:
19539: #line 454 "third_party/libpg_query/grammar/statements/select.y"
19540:     {
19541: 					/* Disabled because it was too confusing, bjm 2002-02-18 */
19542: 					ereport(ERROR,
19543: 							(errcode(PG_ERRCODE_SYNTAX_ERROR),
19544: 							 errmsg("LIMIT #,# syntax is not supported"),
19545: 							 errhint("Use separate LIMIT and OFFSET clauses."),
19546: 							 parser_errposition((yylsp[(1) - (4)]))));
19547: 				;}
19548:     break;
19549: 
19550:   case 513:
19551: #line 470 "third_party/libpg_query/grammar/statements/select.y"
19552:     { (yyval.node) = (yyvsp[(3) - (5)].node); ;}
19553:     break;
19554: 
19555:   case 514:
19556: #line 472 "third_party/libpg_query/grammar/statements/select.y"
19557:     { (yyval.node) = makeIntConst(1, -1); ;}
19558:     break;
19559: 
19560:   case 515:
19561: #line 477 "third_party/libpg_query/grammar/statements/select.y"
19562:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19563:     break;
19564: 
19565:   case 516:
19566: #line 480 "third_party/libpg_query/grammar/statements/select.y"
19567:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
19568:     break;
19569: 
19570:   case 517:
19571: #line 488 "third_party/libpg_query/grammar/statements/select.y"
19572:     {
19573: 			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
19574: 		;}
19575:     break;
19576: 
19577:   case 518:
19578: #line 492 "third_party/libpg_query/grammar/statements/select.y"
19579:     {
19580: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
19581: 		;}
19582:     break;
19583: 
19584:   case 519:
19585: #line 496 "third_party/libpg_query/grammar/statements/select.y"
19586:     {
19587: 			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
19588: 		;}
19589:     break;
19590: 
19591:   case 520:
19592: #line 500 "third_party/libpg_query/grammar/statements/select.y"
19593:     {
19594: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
19595: 		;}
19596:     break;
19597: 
19598:   case 521:
19599: #line 504 "third_party/libpg_query/grammar/statements/select.y"
19600:     {
19601: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (1)].ival)), false);
19602: 		;}
19603:     break;
19604: 
19605:   case 522:
19606: #line 508 "third_party/libpg_query/grammar/statements/select.y"
19607:     {
19608: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), false);
19609: 		;}
19610:     break;
19611: 
19612:   case 523:
19613: #line 515 "third_party/libpg_query/grammar/statements/select.y"
19614:     {
19615: 					(yyval.node) = (yyvsp[(3) - (3)].node);
19616: 				;}
19617:     break;
19618: 
19619:   case 524:
19620: #line 519 "third_party/libpg_query/grammar/statements/select.y"
19621:     { (yyval.node) = NULL; ;}
19622:     break;
19623: 
19624:   case 525:
19625: #line 526 "third_party/libpg_query/grammar/statements/select.y"
19626:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
19627:     break;
19628: 
19629:   case 526:
19630: #line 527 "third_party/libpg_query/grammar/statements/select.y"
19631:     { (yyval.str) = NULL; ;}
19632:     break;
19633: 
19634:   case 527:
19635: #line 532 "third_party/libpg_query/grammar/statements/select.y"
19636:     {
19637: 					(yyval.node) = makeSampleOptions((yyvsp[(3) - (5)].node), (yyvsp[(1) - (5)].str), (yyvsp[(5) - (5)].ival), (yylsp[(1) - (5)]));
19638: 				;}
19639:     break;
19640: 
19641:   case 528:
19642: #line 536 "third_party/libpg_query/grammar/statements/select.y"
19643:     {
19644: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (1)].node), NULL, -1, (yylsp[(1) - (1)]));
19645: 		;}
19646:     break;
19647: 
19648:   case 529:
19649: #line 540 "third_party/libpg_query/grammar/statements/select.y"
19650:     {
19651: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].str), -1, (yylsp[(1) - (4)]));
19652: 		;}
19653:     break;
19654: 
19655:   case 530:
19656: #line 544 "third_party/libpg_query/grammar/statements/select.y"
19657:     {
19658: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (6)].node), (yyvsp[(3) - (6)].str), (yyvsp[(5) - (6)].ival), (yylsp[(1) - (6)]));
19659: 		;}
19660:     break;
19661: 
19662:   case 531:
19663: #line 551 "third_party/libpg_query/grammar/statements/select.y"
19664:     {
19665: 					(yyval.node) = (yyvsp[(2) - (2)].node);
19666: 				;}
19667:     break;
19668: 
19669:   case 532:
19670: #line 557 "third_party/libpg_query/grammar/statements/select.y"
19671:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19672:     break;
19673: 
19674:   case 533:
19675: #line 558 "third_party/libpg_query/grammar/statements/select.y"
19676:     { (yyval.node) = NULL; ;}
19677:     break;
19678: 
19679:   case 534:
19680: #line 563 "third_party/libpg_query/grammar/statements/select.y"
19681:     { (yyval.ival) = (yyvsp[(3) - (4)].ival); ;}
19682:     break;
19683: 
19684:   case 535:
19685: #line 564 "third_party/libpg_query/grammar/statements/select.y"
19686:     { (yyval.ival) = -1; ;}
19687:     break;
19688: 
19689:   case 536:
19690: #line 568 "third_party/libpg_query/grammar/statements/select.y"
19691:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19692:     break;
19693: 
19694:   case 537:
19695: #line 570 "third_party/libpg_query/grammar/statements/select.y"
19696:     {
19697: 					/* LIMIT ALL is represented as a NULL constant */
19698: 					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
19699: 				;}
19700:     break;
19701: 
19702:   case 538:
19703: #line 575 "third_party/libpg_query/grammar/statements/select.y"
19704:     { (yyval.node) = makeLimitPercent((yyvsp[(1) - (2)].node)); ;}
19705:     break;
19706: 
19707:   case 539:
19708: #line 577 "third_party/libpg_query/grammar/statements/select.y"
19709:     { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[(1) - (2)].str),(yylsp[(1) - (2)]))); ;}
19710:     break;
19711: 
19712:   case 540:
19713: #line 579 "third_party/libpg_query/grammar/statements/select.y"
19714:     { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[(1) - (2)].ival),(yylsp[(1) - (2)]))); ;}
19715:     break;
19716: 
19717:   case 541:
19718: #line 583 "third_party/libpg_query/grammar/statements/select.y"
19719:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19720:     break;
19721: 
19722:   case 542:
19723: #line 603 "third_party/libpg_query/grammar/statements/select.y"
19724:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19725:     break;
19726: 
19727:   case 543:
19728: #line 605 "third_party/libpg_query/grammar/statements/select.y"
19729:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
19730:     break;
19731: 
19732:   case 544:
19733: #line 607 "third_party/libpg_query/grammar/statements/select.y"
19734:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
19735:     break;
19736: 
19737:   case 545:
19738: #line 611 "third_party/libpg_query/grammar/statements/select.y"
19739:     { (yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival),(yylsp[(1) - (1)])); ;}
19740:     break;
19741: 
19742:   case 546:
19743: #line 612 "third_party/libpg_query/grammar/statements/select.y"
19744:     { (yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str),(yylsp[(1) - (1)])); ;}
19745:     break;
19746: 
19747:   case 547:
19748: #line 616 "third_party/libpg_query/grammar/statements/select.y"
19749:     { (yyval.ival) = 0; ;}
19750:     break;
19751: 
19752:   case 548:
19753: #line 617 "third_party/libpg_query/grammar/statements/select.y"
19754:     { (yyval.ival) = 0; ;}
19755:     break;
19756: 
19757:   case 549:
19758: #line 620 "third_party/libpg_query/grammar/statements/select.y"
19759:     { (yyval.ival) = 0; ;}
19760:     break;
19761: 
19762:   case 550:
19763: #line 621 "third_party/libpg_query/grammar/statements/select.y"
19764:     { (yyval.ival) = 0; ;}
19765:     break;
19766: 
19767:   case 551:
19768: #line 646 "third_party/libpg_query/grammar/statements/select.y"
19769:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
19770:     break;
19771: 
19772:   case 552:
19773: #line 648 "third_party/libpg_query/grammar/statements/select.y"
19774:     {
19775: 					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[(3) - (3)]));
19776: 					(yyval.list) = list_make1(node);
19777: 				;}
19778:     break;
19779: 
19780:   case 553:
19781: #line 653 "third_party/libpg_query/grammar/statements/select.y"
19782:     {
19783: 					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[(3) - (3)]));
19784: 					(yyval.list) = list_make1(node);
19785: 				;}
19786:     break;
19787: 
19788:   case 554:
19789: #line 657 "third_party/libpg_query/grammar/statements/select.y"
19790:     { (yyval.list) = NIL; ;}
19791:     break;
19792: 
19793:   case 555:
19794: #line 661 "third_party/libpg_query/grammar/statements/select.y"
19795:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
19796:     break;
19797: 
19798:   case 556:
19799: #line 662 "third_party/libpg_query/grammar/statements/select.y"
19800:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].node)); ;}
19801:     break;
19802: 
19803:   case 557:
19804: #line 666 "third_party/libpg_query/grammar/statements/select.y"
19805:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19806:     break;
19807: 
19808:   case 558:
19809: #line 667 "third_party/libpg_query/grammar/statements/select.y"
19810:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19811:     break;
19812: 
19813:   case 559:
19814: #line 668 "third_party/libpg_query/grammar/statements/select.y"
19815:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19816:     break;
19817: 
19818:   case 560:
19819: #line 669 "third_party/libpg_query/grammar/statements/select.y"
19820:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19821:     break;
19822: 
19823:   case 561:
19824: #line 670 "third_party/libpg_query/grammar/statements/select.y"
19825:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19826:     break;
19827: 
19828:   case 562:
19829: #line 675 "third_party/libpg_query/grammar/statements/select.y"
19830:     {
19831: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[(1) - (2)]));
19832: 				;}
19833:     break;
19834: 
19835:   case 563:
19836: #line 688 "third_party/libpg_query/grammar/statements/select.y"
19837:     {
19838: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
19839: 				;}
19840:     break;
19841: 
19842:   case 564:
19843: #line 695 "third_party/libpg_query/grammar/statements/select.y"
19844:     {
19845: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
19846: 				;}
19847:     break;
19848: 
19849:   case 565:
19850: #line 702 "third_party/libpg_query/grammar/statements/select.y"
19851:     {
19852: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
19853: 				;}
19854:     break;
19855: 
19856:   case 566:
19857: #line 708 "third_party/libpg_query/grammar/statements/select.y"
19858:     { (yyval.node) = NULL; ;}
19859:     break;
19860: 
19861:   case 567:
19862: #line 709 "third_party/libpg_query/grammar/statements/select.y"
19863:     { (yyval.node) = NULL; ;}
19864:     break;
19865: 
19866:   case 568:
19867: #line 713 "third_party/libpg_query/grammar/statements/select.y"
19868:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19869:     break;
19870: 
19871:   case 569:
19872: #line 714 "third_party/libpg_query/grammar/statements/select.y"
19873:     { (yyval.node) = NULL; ;}
19874:     break;
19875: 
19876:   case 570:
19877: #line 718 "third_party/libpg_query/grammar/statements/select.y"
19878:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19879:     break;
19880: 
19881:   case 571:
19882: #line 719 "third_party/libpg_query/grammar/statements/select.y"
19883:     { (yyval.node) = NULL; ;}
19884:     break;
19885: 
19886:   case 572:
19887: #line 723 "third_party/libpg_query/grammar/statements/select.y"
19888:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
19889:     break;
19890: 
19891:   case 573:
19892: #line 724 "third_party/libpg_query/grammar/statements/select.y"
19893:     { (yyval.list) = NIL; ;}
19894:     break;
19895: 
19896:   case 574:
19897: #line 728 "third_party/libpg_query/grammar/statements/select.y"
19898:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
19899:     break;
19900: 
19901:   case 575:
19902: #line 729 "third_party/libpg_query/grammar/statements/select.y"
19903:     { (yyval.list) = NIL; ;}
19904:     break;
19905: 
19906:   case 576:
19907: #line 733 "third_party/libpg_query/grammar/statements/select.y"
19908:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
19909:     break;
19910: 
19911:   case 577:
19912: #line 734 "third_party/libpg_query/grammar/statements/select.y"
19913:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
19914:     break;
19915: 
19916:   case 578:
19917: #line 739 "third_party/libpg_query/grammar/statements/select.y"
19918:     {
19919: 					PGLockingClause *n = makeNode(PGLockingClause);
19920: 					n->lockedRels = (yyvsp[(2) - (3)].list);
19921: 					n->strength = (yyvsp[(1) - (3)].lockstrength);
19922: 					n->waitPolicy = (yyvsp[(3) - (3)].lockwaitpolicy);
19923: 					(yyval.node) = (PGNode *) n;
19924: 				;}
19925:     break;
19926: 
19927:   case 579:
19928: #line 749 "third_party/libpg_query/grammar/statements/select.y"
19929:     { (yyval.lockstrength) = LCS_FORUPDATE; ;}
19930:     break;
19931: 
19932:   case 580:
19933: #line 750 "third_party/libpg_query/grammar/statements/select.y"
19934:     { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; ;}
19935:     break;
19936: 
19937:   case 581:
19938: #line 751 "third_party/libpg_query/grammar/statements/select.y"
19939:     { (yyval.lockstrength) = PG_LCS_FORSHARE; ;}
19940:     break;
19941: 
19942:   case 582:
19943: #line 752 "third_party/libpg_query/grammar/statements/select.y"
19944:     { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; ;}
19945:     break;
19946: 
19947:   case 583:
19948: #line 756 "third_party/libpg_query/grammar/statements/select.y"
19949:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
19950:     break;
19951: 
19952:   case 584:
19953: #line 757 "third_party/libpg_query/grammar/statements/select.y"
19954:     { (yyval.list) = NIL; ;}
19955:     break;
19956: 
19957:   case 585:
19958: #line 762 "third_party/libpg_query/grammar/statements/select.y"
19959:     { (yyval.lockwaitpolicy) = LockWaitError; ;}
19960:     break;
19961: 
19962:   case 586:
19963: #line 763 "third_party/libpg_query/grammar/statements/select.y"
19964:     { (yyval.lockwaitpolicy) = PGLockWaitSkip; ;}
19965:     break;
19966: 
19967:   case 587:
19968: #line 764 "third_party/libpg_query/grammar/statements/select.y"
19969:     { (yyval.lockwaitpolicy) = PGLockWaitBlock; ;}
19970:     break;
19971: 
19972:   case 588:
19973: #line 774 "third_party/libpg_query/grammar/statements/select.y"
19974:     {
19975: 					PGSelectStmt *n = makeNode(PGSelectStmt);
19976: 					n->valuesLists = list_make1((yyvsp[(3) - (4)].list));
19977: 					(yyval.node) = (PGNode *) n;
19978: 				;}
19979:     break;
19980: 
19981:   case 589:
19982: #line 780 "third_party/libpg_query/grammar/statements/select.y"
19983:     {
19984: 					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[(1) - (5)].node);
19985: 					n->valuesLists = lappend(n->valuesLists, (yyvsp[(4) - (5)].list));
19986: 					(yyval.node) = (PGNode *) n;
19987: 				;}
19988:     break;
19989: 
19990:   case 590:
19991: #line 797 "third_party/libpg_query/grammar/statements/select.y"
19992:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
19993:     break;
19994: 
19995:   case 591:
19996: #line 798 "third_party/libpg_query/grammar/statements/select.y"
19997:     { (yyval.list) = NIL; ;}
19998:     break;
19999: 
20000:   case 592:
20001: #line 802 "third_party/libpg_query/grammar/statements/select.y"
20002:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
20003:     break;
20004: 
20005:   case 593:
20006: #line 803 "third_party/libpg_query/grammar/statements/select.y"
20007:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
20008:     break;
20009: 
20010:   case 594:
20011: #line 810 "third_party/libpg_query/grammar/statements/select.y"
20012:     {
20013: 					(yyvsp[(1) - (3)].range)->alias = (yyvsp[(2) - (3)].alias);
20014: 					(yyvsp[(1) - (3)].range)->sample = (yyvsp[(3) - (3)].node);
20015: 					(yyval.node) = (PGNode *) (yyvsp[(1) - (3)].range);
20016: 				;}
20017:     break;
20018: 
20019:   case 595:
20020: #line 816 "third_party/libpg_query/grammar/statements/select.y"
20021:     {
20022: 					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(1) - (3)].node);
20023: 					n->alias = (PGAlias*) linitial((yyvsp[(2) - (3)].list));
20024: 					n->coldeflist = (PGList*) lsecond((yyvsp[(2) - (3)].list));
20025: 					n->sample = (yyvsp[(3) - (3)].node);
20026: 					(yyval.node) = (PGNode *) n;
20027: 				;}
20028:     break;
20029: 
20030:   case 596:
20031: #line 824 "third_party/libpg_query/grammar/statements/select.y"
20032:     {
20033: 					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(2) - (3)].node);
20034: 					n->lateral = true;
20035: 					n->alias = (PGAlias*) linitial((yyvsp[(3) - (3)].list));
20036: 					n->coldeflist = (PGList*) lsecond((yyvsp[(3) - (3)].list));
20037: 					(yyval.node) = (PGNode *) n;
20038: 				;}
20039:     break;
20040: 
20041:   case 597:
20042: #line 832 "third_party/libpg_query/grammar/statements/select.y"
20043:     {
20044: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
20045: 					n->lateral = false;
20046: 					n->subquery = (yyvsp[(1) - (3)].node);
20047: 					n->alias = (yyvsp[(2) - (3)].alias);
20048: 					n->sample = (yyvsp[(3) - (3)].node);
20049: 					(yyval.node) = (PGNode *) n;
20050: 				;}
20051:     break;
20052: 
20053:   case 598:
20054: #line 841 "third_party/libpg_query/grammar/statements/select.y"
20055:     {
20056: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
20057: 					n->lateral = true;
20058: 					n->subquery = (yyvsp[(2) - (3)].node);
20059: 					n->alias = (yyvsp[(3) - (3)].alias);
20060: 					n->sample = NULL;
20061: 					(yyval.node) = (PGNode *) n;
20062: 				;}
20063:     break;
20064: 
20065:   case 599:
20066: #line 850 "third_party/libpg_query/grammar/statements/select.y"
20067:     {
20068: 					(yyval.node) = (PGNode *) (yyvsp[(1) - (1)].jexpr);
20069: 				;}
20070:     break;
20071: 
20072:   case 600:
20073: #line 854 "third_party/libpg_query/grammar/statements/select.y"
20074:     {
20075: 					(yyvsp[(2) - (4)].jexpr)->alias = (yyvsp[(4) - (4)].alias);
20076: 					(yyval.node) = (PGNode *) (yyvsp[(2) - (4)].jexpr);
20077: 				;}
20078:     break;
20079: 
20080:   case 601:
20081: #line 880 "third_party/libpg_query/grammar/statements/select.y"
20082:     {
20083: 					(yyval.jexpr) = (yyvsp[(2) - (3)].jexpr);
20084: 				;}
20085:     break;
20086: 
20087:   case 602:
20088: #line 884 "third_party/libpg_query/grammar/statements/select.y"
20089:     {
20090: 					/* CROSS JOIN is same as unqualified inner join */
20091: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20092: 					n->jointype = PG_JOIN_INNER;
20093: 					n->isNatural = false;
20094: 					n->larg = (yyvsp[(1) - (4)].node);
20095: 					n->rarg = (yyvsp[(4) - (4)].node);
20096: 					n->usingClause = NIL;
20097: 					n->quals = NULL;
20098: 					n->location = (yylsp[(2) - (4)]);
20099: 					(yyval.jexpr) = n;
20100: 				;}
20101:     break;
20102: 
20103:   case 603:
20104: #line 897 "third_party/libpg_query/grammar/statements/select.y"
20105:     {
20106: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20107: 					n->jointype = (yyvsp[(2) - (5)].jtype);
20108: 					n->isNatural = false;
20109: 					n->larg = (yyvsp[(1) - (5)].node);
20110: 					n->rarg = (yyvsp[(4) - (5)].node);
20111: 					if ((yyvsp[(5) - (5)].node) != NULL && IsA((yyvsp[(5) - (5)].node), PGList))
20112: 						n->usingClause = (PGList *) (yyvsp[(5) - (5)].node); /* USING clause */
20113: 					else
20114: 						n->quals = (yyvsp[(5) - (5)].node); /* ON clause */
20115: 					n->location = (yylsp[(2) - (5)]);
20116: 					(yyval.jexpr) = n;
20117: 				;}
20118:     break;
20119: 
20120:   case 604:
20121: #line 911 "third_party/libpg_query/grammar/statements/select.y"
20122:     {
20123: 					/* letting join_type reduce to empty doesn't work */
20124: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20125: 					n->jointype = PG_JOIN_INNER;
20126: 					n->isNatural = false;
20127: 					n->larg = (yyvsp[(1) - (4)].node);
20128: 					n->rarg = (yyvsp[(3) - (4)].node);
20129: 					if ((yyvsp[(4) - (4)].node) != NULL && IsA((yyvsp[(4) - (4)].node), PGList))
20130: 						n->usingClause = (PGList *) (yyvsp[(4) - (4)].node); /* USING clause */
20131: 					else
20132: 						n->quals = (yyvsp[(4) - (4)].node); /* ON clause */
20133: 					n->location = (yylsp[(2) - (4)]);
20134: 					(yyval.jexpr) = n;
20135: 				;}
20136:     break;
20137: 
20138:   case 605:
20139: #line 926 "third_party/libpg_query/grammar/statements/select.y"
20140:     {
20141: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20142: 					n->jointype = (yyvsp[(3) - (5)].jtype);
20143: 					n->isNatural = true;
20144: 					n->larg = (yyvsp[(1) - (5)].node);
20145: 					n->rarg = (yyvsp[(5) - (5)].node);
20146: 					n->usingClause = NIL; /* figure out which columns later... */
20147: 					n->quals = NULL; /* fill later */
20148: 					n->location = (yylsp[(2) - (5)]);
20149: 					(yyval.jexpr) = n;
20150: 				;}
20151:     break;
20152: 
20153:   case 606:
20154: #line 938 "third_party/libpg_query/grammar/statements/select.y"
20155:     {
20156: 					/* letting join_type reduce to empty doesn't work */
20157: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20158: 					n->jointype = PG_JOIN_INNER;
20159: 					n->isNatural = true;
20160: 					n->larg = (yyvsp[(1) - (4)].node);
20161: 					n->rarg = (yyvsp[(4) - (4)].node);
20162: 					n->usingClause = NIL; /* figure out which columns later... */
20163: 					n->quals = NULL; /* fill later */
20164: 					n->location = (yylsp[(2) - (4)]);
20165: 					(yyval.jexpr) = n;
20166: 				;}
20167:     break;
20168: 
20169:   case 607:
20170: #line 954 "third_party/libpg_query/grammar/statements/select.y"
20171:     {
20172: 					(yyval.alias) = makeNode(PGAlias);
20173: 					(yyval.alias)->aliasname = (yyvsp[(2) - (5)].str);
20174: 					(yyval.alias)->colnames = (yyvsp[(4) - (5)].list);
20175: 				;}
20176:     break;
20177: 
20178:   case 608:
20179: #line 960 "third_party/libpg_query/grammar/statements/select.y"
20180:     {
20181: 					(yyval.alias) = makeNode(PGAlias);
20182: 					(yyval.alias)->aliasname = (yyvsp[(2) - (2)].str);
20183: 				;}
20184:     break;
20185: 
20186:   case 609:
20187: #line 965 "third_party/libpg_query/grammar/statements/select.y"
20188:     {
20189: 					(yyval.alias) = makeNode(PGAlias);
20190: 					(yyval.alias)->aliasname = (yyvsp[(1) - (4)].str);
20191: 					(yyval.alias)->colnames = (yyvsp[(3) - (4)].list);
20192: 				;}
20193:     break;
20194: 
20195:   case 610:
20196: #line 971 "third_party/libpg_query/grammar/statements/select.y"
20197:     {
20198: 					(yyval.alias) = makeNode(PGAlias);
20199: 					(yyval.alias)->aliasname = (yyvsp[(1) - (1)].str);
20200: 				;}
20201:     break;
20202: 
20203:   case 611:
20204: #line 977 "third_party/libpg_query/grammar/statements/select.y"
20205:     { (yyval.alias) = (yyvsp[(1) - (1)].alias); ;}
20206:     break;
20207: 
20208:   case 612:
20209: #line 978 "third_party/libpg_query/grammar/statements/select.y"
20210:     { (yyval.alias) = NULL; ;}
20211:     break;
20212: 
20213:   case 613:
20214: #line 987 "third_party/libpg_query/grammar/statements/select.y"
20215:     {
20216: 					(yyval.list) = list_make2((yyvsp[(1) - (1)].alias), NIL);
20217: 				;}
20218:     break;
20219: 
20220:   case 614:
20221: #line 991 "third_party/libpg_query/grammar/statements/select.y"
20222:     {
20223: 					(yyval.list) = list_make2(NULL, (yyvsp[(3) - (4)].list));
20224: 				;}
20225:     break;
20226: 
20227:   case 615:
20228: #line 995 "third_party/libpg_query/grammar/statements/select.y"
20229:     {
20230: 					PGAlias *a = makeNode(PGAlias);
20231: 					a->aliasname = (yyvsp[(2) - (5)].str);
20232: 					(yyval.list) = list_make2(a, (yyvsp[(4) - (5)].list));
20233: 				;}
20234:     break;
20235: 
20236:   case 616:
20237: #line 1001 "third_party/libpg_query/grammar/statements/select.y"
20238:     {
20239: 					PGAlias *a = makeNode(PGAlias);
20240: 					a->aliasname = (yyvsp[(1) - (4)].str);
20241: 					(yyval.list) = list_make2(a, (yyvsp[(3) - (4)].list));
20242: 				;}
20243:     break;
20244: 
20245:   case 617:
20246: #line 1007 "third_party/libpg_query/grammar/statements/select.y"
20247:     {
20248: 					(yyval.list) = list_make2(NULL, NIL);
20249: 				;}
20250:     break;
20251: 
20252:   case 618:
20253: #line 1012 "third_party/libpg_query/grammar/statements/select.y"
20254:     { (yyval.jtype) = PG_JOIN_FULL; ;}
20255:     break;
20256: 
20257:   case 619:
20258: #line 1013 "third_party/libpg_query/grammar/statements/select.y"
20259:     { (yyval.jtype) = PG_JOIN_LEFT; ;}
20260:     break;
20261: 
20262:   case 620:
20263: #line 1014 "third_party/libpg_query/grammar/statements/select.y"
20264:     { (yyval.jtype) = PG_JOIN_RIGHT; ;}
20265:     break;
20266: 
20267:   case 621:
20268: #line 1015 "third_party/libpg_query/grammar/statements/select.y"
20269:     { (yyval.jtype) = PG_JOIN_INNER; ;}
20270:     break;
20271: 
20272:   case 622:
20273: #line 1019 "third_party/libpg_query/grammar/statements/select.y"
20274:     { (yyval.node) = NULL; ;}
20275:     break;
20276: 
20277:   case 623:
20278: #line 1020 "third_party/libpg_query/grammar/statements/select.y"
20279:     { (yyval.node) = NULL; ;}
20280:     break;
20281: 
20282:   case 624:
20283: #line 1032 "third_party/libpg_query/grammar/statements/select.y"
20284:     { (yyval.node) = (PGNode *) (yyvsp[(3) - (4)].list); ;}
20285:     break;
20286: 
20287:   case 625:
20288: #line 1033 "third_party/libpg_query/grammar/statements/select.y"
20289:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
20290:     break;
20291: 
20292:   case 626:
20293: #line 1039 "third_party/libpg_query/grammar/statements/select.y"
20294:     {
20295: 					/* inheritance query, implicitly */
20296: 					(yyval.range) = (yyvsp[(1) - (1)].range);
20297: 					(yyval.range)->inh = true;
20298: 					(yyval.range)->alias = NULL;
20299: 				;}
20300:     break;
20301: 
20302:   case 627:
20303: #line 1046 "third_party/libpg_query/grammar/statements/select.y"
20304:     {
20305: 					/* inheritance query, explicitly */
20306: 					(yyval.range) = (yyvsp[(1) - (2)].range);
20307: 					(yyval.range)->inh = true;
20308: 					(yyval.range)->alias = NULL;
20309: 				;}
20310:     break;
20311: 
20312:   case 628:
20313: #line 1053 "third_party/libpg_query/grammar/statements/select.y"
20314:     {
20315: 					/* no inheritance */
20316: 					(yyval.range) = (yyvsp[(2) - (2)].range);
20317: 					(yyval.range)->inh = false;
20318: 					(yyval.range)->alias = NULL;
20319: 				;}
20320:     break;
20321: 
20322:   case 629:
20323: #line 1060 "third_party/libpg_query/grammar/statements/select.y"
20324:     {
20325: 					/* no inheritance, SQL99-style syntax */
20326: 					(yyval.range) = (yyvsp[(3) - (4)].range);
20327: 					(yyval.range)->inh = false;
20328: 					(yyval.range)->alias = NULL;
20329: 				;}
20330:     break;
20331: 
20332:   case 630:
20333: #line 1092 "third_party/libpg_query/grammar/statements/select.y"
20334:     {
20335: 					PGRangeFunction *n = makeNode(PGRangeFunction);
20336: 					n->lateral = false;
20337: 					n->ordinality = (yyvsp[(2) - (2)].boolean);
20338: 					n->is_rowsfrom = false;
20339: 					n->functions = list_make1(list_make2((yyvsp[(1) - (2)].node), NIL));
20340: 					n->sample = NULL;
20341: 					/* alias and coldeflist are set by table_ref production */
20342: 					(yyval.node) = (PGNode *) n;
20343: 				;}
20344:     break;
20345: 
20346:   case 631:
20347: #line 1103 "third_party/libpg_query/grammar/statements/select.y"
20348:     {
20349: 					PGRangeFunction *n = makeNode(PGRangeFunction);
20350: 					n->lateral = false;
20351: 					n->ordinality = (yyvsp[(6) - (6)].boolean);
20352: 					n->is_rowsfrom = true;
20353: 					n->functions = (yyvsp[(4) - (6)].list);
20354: 					n->sample = NULL;
20355: 					/* alias and coldeflist are set by table_ref production */
20356: 					(yyval.node) = (PGNode *) n;
20357: 				;}
20358:     break;
20359: 
20360:   case 632:
20361: #line 1116 "third_party/libpg_query/grammar/statements/select.y"
20362:     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list)); ;}
20363:     break;
20364: 
20365:   case 633:
20366: #line 1120 "third_party/libpg_query/grammar/statements/select.y"
20367:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
20368:     break;
20369: 
20370:   case 634:
20371: #line 1121 "third_party/libpg_query/grammar/statements/select.y"
20372:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
20373:     break;
20374: 
20375:   case 635:
20376: #line 1124 "third_party/libpg_query/grammar/statements/select.y"
20377:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
20378:     break;
20379: 
20380:   case 636:
20381: #line 1125 "third_party/libpg_query/grammar/statements/select.y"
20382:     { (yyval.list) = NIL; ;}
20383:     break;
20384: 
20385:   case 637:
20386: #line 1128 "third_party/libpg_query/grammar/statements/select.y"
20387:     { (yyval.boolean) = true; ;}
20388:     break;
20389: 
20390:   case 638:
20391: #line 1129 "third_party/libpg_query/grammar/statements/select.y"
20392:     { (yyval.boolean) = false; ;}
20393:     break;
20394: 
20395:   case 639:
20396: #line 1134 "third_party/libpg_query/grammar/statements/select.y"
20397:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
20398:     break;
20399: 
20400:   case 640:
20401: #line 1135 "third_party/libpg_query/grammar/statements/select.y"
20402:     { (yyval.node) = NULL; ;}
20403:     break;
20404: 
20405:   case 641:
20406: #line 1141 "third_party/libpg_query/grammar/statements/select.y"
20407:     {
20408: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
20409: 				;}
20410:     break;
20411: 
20412:   case 642:
20413: #line 1145 "third_party/libpg_query/grammar/statements/select.y"
20414:     {
20415: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
20416: 				;}
20417:     break;
20418: 
20419:   case 643:
20420: #line 1151 "third_party/libpg_query/grammar/statements/select.y"
20421:     {
20422: 					PGColumnDef *n = makeNode(PGColumnDef);
20423: 					n->colname = (yyvsp[(1) - (3)].str);
20424: 					n->typeName = (yyvsp[(2) - (3)].typnam);
20425: 					n->inhcount = 0;
20426: 					n->is_local = true;
20427: 					n->is_not_null = false;
20428: 					n->is_from_type = false;
20429: 					n->storage = 0;
20430: 					n->raw_default = NULL;
20431: 					n->cooked_default = NULL;
20432: 					n->collClause = (PGCollateClause *) (yyvsp[(3) - (3)].node);
20433: 					n->collOid = InvalidOid;
20434: 					n->constraints = NIL;
20435: 					n->location = (yylsp[(1) - (3)]);
20436: 					(yyval.node) = (PGNode *)n;
20437: 				;}
20438:     break;
20439: 
20440:   case 644:
20441: #line 1172 "third_party/libpg_query/grammar/statements/select.y"
20442:     {
20443: 					PGCollateClause *n = makeNode(PGCollateClause);
20444: 					n->arg = NULL;
20445: 					n->collname = (yyvsp[(2) - (2)].list);
20446: 					n->location = (yylsp[(1) - (2)]);
20447: 					(yyval.node) = (PGNode *) n;
20448: 				;}
20449:     break;
20450: 
20451:   case 645:
20452: #line 1179 "third_party/libpg_query/grammar/statements/select.y"
20453:     { (yyval.node) = NULL; ;}
20454:     break;
20455: 
20456:   case 646:
20457: #line 1192 "third_party/libpg_query/grammar/statements/select.y"
20458:     {
20459:              (yyval.list) = list_make1(list_make2(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].typnam)));
20460:             ;}
20461:     break;
20462: 
20463:   case 647:
20464: #line 1195 "third_party/libpg_query/grammar/statements/select.y"
20465:     {
20466:              (yyval.list) = lappend((yyvsp[(1) - (4)].list), list_make2(makeString((yyvsp[(3) - (4)].str)), (yyvsp[(4) - (4)].typnam)));
20467:             ;}
20468:     break;
20469: 
20470:   case 650:
20471: #line 1202 "third_party/libpg_query/grammar/statements/select.y"
20472:     {
20473: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
20474: 					(yyval.typnam)->arrayBounds = (yyvsp[(2) - (2)].list);
20475: 				;}
20476:     break;
20477: 
20478:   case 651:
20479: #line 1207 "third_party/libpg_query/grammar/statements/select.y"
20480:     {
20481: 					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
20482: 					(yyval.typnam)->arrayBounds = (yyvsp[(3) - (3)].list);
20483: 					(yyval.typnam)->setof = true;
20484: 				;}
20485:     break;
20486: 
20487:   case 652:
20488: #line 1214 "third_party/libpg_query/grammar/statements/select.y"
20489:     {
20490: 					(yyval.typnam) = (yyvsp[(1) - (5)].typnam);
20491: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(4) - (5)].ival)));
20492: 				;}
20493:     break;
20494: 
20495:   case 653:
20496: #line 1219 "third_party/libpg_query/grammar/statements/select.y"
20497:     {
20498: 					(yyval.typnam) = (yyvsp[(2) - (6)].typnam);
20499: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(5) - (6)].ival)));
20500: 					(yyval.typnam)->setof = true;
20501: 				;}
20502:     break;
20503: 
20504:   case 654:
20505: #line 1225 "third_party/libpg_query/grammar/statements/select.y"
20506:     {
20507: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
20508: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
20509: 				;}
20510:     break;
20511: 
20512:   case 655:
20513: #line 1230 "third_party/libpg_query/grammar/statements/select.y"
20514:     {
20515: 					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
20516: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
20517: 					(yyval.typnam)->setof = true;
20518: 				;}
20519:     break;
20520: 
20521:   case 656:
20522: #line 1235 "third_party/libpg_query/grammar/statements/select.y"
20523:     {
20524:                (yyval.typnam) = SystemTypeName("struct");
20525:                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
20526:                (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
20527:                (yyval.typnam)->location = (yylsp[(1) - (5)]);
20528:                ;}
20529:     break;
20530: 
20531:   case 657:
20532: #line 1241 "third_party/libpg_query/grammar/statements/select.y"
20533:     {
20534:                (yyval.typnam) = SystemTypeName("map");
20535:                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
20536:                (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
20537:                (yyval.typnam)->location = (yylsp[(1) - (5)]);
20538: 			;}
20539:     break;
20540: 
20541:   case 658:
20542: #line 1251 "third_party/libpg_query/grammar/statements/select.y"
20543:     {  (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeInteger(-1)); ;}
20544:     break;
20545: 
20546:   case 659:
20547: #line 1253 "third_party/libpg_query/grammar/statements/select.y"
20548:     {  (yyval.list) = lappend((yyvsp[(1) - (4)].list), makeInteger((yyvsp[(3) - (4)].ival))); ;}
20549:     break;
20550: 
20551:   case 660:
20552: #line 1255 "third_party/libpg_query/grammar/statements/select.y"
20553:     {  (yyval.list) = NIL; ;}
20554:     break;
20555: 
20556:   case 661:
20557: #line 1259 "third_party/libpg_query/grammar/statements/select.y"
20558:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20559:     break;
20560: 
20561:   case 662:
20562: #line 1260 "third_party/libpg_query/grammar/statements/select.y"
20563:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20564:     break;
20565: 
20566:   case 663:
20567: #line 1261 "third_party/libpg_query/grammar/statements/select.y"
20568:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20569:     break;
20570: 
20571:   case 664:
20572: #line 1262 "third_party/libpg_query/grammar/statements/select.y"
20573:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20574:     break;
20575: 
20576:   case 665:
20577: #line 1263 "third_party/libpg_query/grammar/statements/select.y"
20578:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20579:     break;
20580: 
20581:   case 666:
20582: #line 1265 "third_party/libpg_query/grammar/statements/select.y"
20583:     {
20584: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
20585: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20586: 				;}
20587:     break;
20588: 
20589:   case 667:
20590: #line 1270 "third_party/libpg_query/grammar/statements/select.y"
20591:     {
20592: 					(yyval.typnam) = (yyvsp[(1) - (4)].typnam);
20593: 					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
20594: 											 makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
20595: 				;}
20596:     break;
20597: 
20598:   case 668:
20599: #line 1289 "third_party/libpg_query/grammar/statements/select.y"
20600:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20601:     break;
20602: 
20603:   case 669:
20604: #line 1290 "third_party/libpg_query/grammar/statements/select.y"
20605:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20606:     break;
20607: 
20608:   case 670:
20609: #line 1291 "third_party/libpg_query/grammar/statements/select.y"
20610:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20611:     break;
20612: 
20613:   case 671:
20614: #line 1292 "third_party/libpg_query/grammar/statements/select.y"
20615:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20616:     break;
20617: 
20618:   case 672:
20619: #line 1304 "third_party/libpg_query/grammar/statements/select.y"
20620:     {
20621: 					(yyval.typnam) = makeTypeName((yyvsp[(1) - (2)].str));
20622: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20623: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20624: 				;}
20625:     break;
20626: 
20627:   case 673:
20628: #line 1317 "third_party/libpg_query/grammar/statements/select.y"
20629:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
20630:     break;
20631: 
20632:   case 674:
20633: #line 1318 "third_party/libpg_query/grammar/statements/select.y"
20634:     { (yyval.list) = NIL; ;}
20635:     break;
20636: 
20637:   case 675:
20638: #line 1325 "third_party/libpg_query/grammar/statements/select.y"
20639:     {
20640: 					(yyval.typnam) = SystemTypeName("int4");
20641: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20642: 				;}
20643:     break;
20644: 
20645:   case 676:
20646: #line 1330 "third_party/libpg_query/grammar/statements/select.y"
20647:     {
20648: 					(yyval.typnam) = SystemTypeName("int4");
20649: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20650: 				;}
20651:     break;
20652: 
20653:   case 677:
20654: #line 1335 "third_party/libpg_query/grammar/statements/select.y"
20655:     {
20656: 					(yyval.typnam) = SystemTypeName("int2");
20657: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20658: 				;}
20659:     break;
20660: 
20661:   case 678:
20662: #line 1340 "third_party/libpg_query/grammar/statements/select.y"
20663:     {
20664: 					(yyval.typnam) = SystemTypeName("int8");
20665: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20666: 				;}
20667:     break;
20668: 
20669:   case 679:
20670: #line 1345 "third_party/libpg_query/grammar/statements/select.y"
20671:     {
20672: 					(yyval.typnam) = SystemTypeName("float4");
20673: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20674: 				;}
20675:     break;
20676: 
20677:   case 680:
20678: #line 1350 "third_party/libpg_query/grammar/statements/select.y"
20679:     {
20680: 					(yyval.typnam) = (yyvsp[(2) - (2)].typnam);
20681: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20682: 				;}
20683:     break;
20684: 
20685:   case 681:
20686: #line 1355 "third_party/libpg_query/grammar/statements/select.y"
20687:     {
20688: 					(yyval.typnam) = SystemTypeName("float8");
20689: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20690: 				;}
20691:     break;
20692: 
20693:   case 682:
20694: #line 1360 "third_party/libpg_query/grammar/statements/select.y"
20695:     {
20696: 					(yyval.typnam) = SystemTypeName("numeric");
20697: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20698: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20699: 				;}
20700:     break;
20701: 
20702:   case 683:
20703: #line 1366 "third_party/libpg_query/grammar/statements/select.y"
20704:     {
20705: 					(yyval.typnam) = SystemTypeName("numeric");
20706: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20707: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20708: 				;}
20709:     break;
20710: 
20711:   case 684:
20712: #line 1372 "third_party/libpg_query/grammar/statements/select.y"
20713:     {
20714: 					(yyval.typnam) = SystemTypeName("numeric");
20715: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20716: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20717: 				;}
20718:     break;
20719: 
20720:   case 685:
20721: #line 1378 "third_party/libpg_query/grammar/statements/select.y"
20722:     {
20723: 					(yyval.typnam) = SystemTypeName("bool");
20724: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20725: 				;}
20726:     break;
20727: 
20728:   case 686:
20729: #line 1385 "third_party/libpg_query/grammar/statements/select.y"
20730:     {
20731: 					/*
20732: 					 * Check FLOAT() precision limits assuming IEEE floating
20733: 					 * types - thomas 1997-09-18
20734: 					 */
20735: 					if ((yyvsp[(2) - (3)].ival) < 1)
20736: 						ereport(ERROR,
20737: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
20738: 								 errmsg("precision for type float must be at least 1 bit"),
20739: 								 parser_errposition((yylsp[(2) - (3)]))));
20740: 					else if ((yyvsp[(2) - (3)].ival) <= 24)
20741: 						(yyval.typnam) = SystemTypeName("float4");
20742: 					else if ((yyvsp[(2) - (3)].ival) <= 53)
20743: 						(yyval.typnam) = SystemTypeName("float8");
20744: 					else
20745: 						ereport(ERROR,
20746: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
20747: 								 errmsg("precision for type float must be less than 54 bits"),
20748: 								 parser_errposition((yylsp[(2) - (3)]))));
20749: 				;}
20750:     break;
20751: 
20752:   case 687:
20753: #line 1406 "third_party/libpg_query/grammar/statements/select.y"
20754:     {
20755: 					(yyval.typnam) = SystemTypeName("float4");
20756: 				;}
20757:     break;
20758: 
20759:   case 688:
20760: #line 1416 "third_party/libpg_query/grammar/statements/select.y"
20761:     {
20762: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20763: 				;}
20764:     break;
20765: 
20766:   case 689:
20767: #line 1420 "third_party/libpg_query/grammar/statements/select.y"
20768:     {
20769: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20770: 				;}
20771:     break;
20772: 
20773:   case 690:
20774: #line 1428 "third_party/libpg_query/grammar/statements/select.y"
20775:     {
20776: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20777: 				;}
20778:     break;
20779: 
20780:   case 691:
20781: #line 1432 "third_party/libpg_query/grammar/statements/select.y"
20782:     {
20783: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20784: 					(yyval.typnam)->typmods = NIL;
20785: 				;}
20786:     break;
20787: 
20788:   case 692:
20789: #line 1440 "third_party/libpg_query/grammar/statements/select.y"
20790:     {
20791: 					const char *typname;
20792: 
20793: 					typname = (yyvsp[(2) - (5)].boolean) ? "varbit" : "bit";
20794: 					(yyval.typnam) = SystemTypeName(typname);
20795: 					(yyval.typnam)->typmods = (yyvsp[(4) - (5)].list);
20796: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
20797: 				;}
20798:     break;
20799: 
20800:   case 693:
20801: #line 1452 "third_party/libpg_query/grammar/statements/select.y"
20802:     {
20803: 					/* bit defaults to bit(1), varbit to no limit */
20804: 					if ((yyvsp[(2) - (2)].boolean))
20805: 					{
20806: 						(yyval.typnam) = SystemTypeName("varbit");
20807: 					}
20808: 					else
20809: 					{
20810: 						(yyval.typnam) = SystemTypeName("bit");
20811: 						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
20812: 					}
20813: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20814: 				;}
20815:     break;
20816: 
20817:   case 694:
20818: #line 1473 "third_party/libpg_query/grammar/statements/select.y"
20819:     {
20820: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20821: 				;}
20822:     break;
20823: 
20824:   case 695:
20825: #line 1477 "third_party/libpg_query/grammar/statements/select.y"
20826:     {
20827: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20828: 				;}
20829:     break;
20830: 
20831:   case 696:
20832: #line 1483 "third_party/libpg_query/grammar/statements/select.y"
20833:     {
20834: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20835: 				;}
20836:     break;
20837: 
20838:   case 697:
20839: #line 1487 "third_party/libpg_query/grammar/statements/select.y"
20840:     {
20841: 					/* Length was not specified so allow to be unrestricted.
20842: 					 * This handles problems with fixed-length (bpchar) strings
20843: 					 * which in column definitions must default to a length
20844: 					 * of one, but should not be constrained if the length
20845: 					 * was not specified.
20846: 					 */
20847: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20848: 					(yyval.typnam)->typmods = NIL;
20849: 				;}
20850:     break;
20851: 
20852:   case 698:
20853: #line 1500 "third_party/libpg_query/grammar/statements/select.y"
20854:     {
20855: 					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (4)].conststr));
20856: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
20857: 					(yyval.typnam)->location = (yylsp[(1) - (4)]);
20858: 				;}
20859:     break;
20860: 
20861:   case 699:
20862: #line 1508 "third_party/libpg_query/grammar/statements/select.y"
20863:     {
20864: 					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (1)].conststr));
20865: 					/* char defaults to char(1), varchar to no limit */
20866: 					if (strcmp((yyvsp[(1) - (1)].conststr), "bpchar") == 0)
20867: 						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
20868: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20869: 				;}
20870:     break;
20871: 
20872:   case 700:
20873: #line 1518 "third_party/libpg_query/grammar/statements/select.y"
20874:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
20875:     break;
20876: 
20877:   case 701:
20878: #line 1520 "third_party/libpg_query/grammar/statements/select.y"
20879:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
20880:     break;
20881: 
20882:   case 702:
20883: #line 1522 "third_party/libpg_query/grammar/statements/select.y"
20884:     { (yyval.conststr) = "varchar"; ;}
20885:     break;
20886: 
20887:   case 703:
20888: #line 1524 "third_party/libpg_query/grammar/statements/select.y"
20889:     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
20890:     break;
20891: 
20892:   case 704:
20893: #line 1526 "third_party/libpg_query/grammar/statements/select.y"
20894:     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
20895:     break;
20896: 
20897:   case 705:
20898: #line 1528 "third_party/libpg_query/grammar/statements/select.y"
20899:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
20900:     break;
20901: 
20902:   case 706:
20903: #line 1532 "third_party/libpg_query/grammar/statements/select.y"
20904:     { (yyval.boolean) = true; ;}
20905:     break;
20906: 
20907:   case 707:
20908: #line 1533 "third_party/libpg_query/grammar/statements/select.y"
20909:     { (yyval.boolean) = false; ;}
20910:     break;
20911: 
20912:   case 708:
20913: #line 1541 "third_party/libpg_query/grammar/statements/select.y"
20914:     {
20915: 					if ((yyvsp[(5) - (5)].boolean))
20916: 						(yyval.typnam) = SystemTypeName("timestamptz");
20917: 					else
20918: 						(yyval.typnam) = SystemTypeName("timestamp");
20919: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
20920: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
20921: 				;}
20922:     break;
20923: 
20924:   case 709:
20925: #line 1550 "third_party/libpg_query/grammar/statements/select.y"
20926:     {
20927: 					if ((yyvsp[(2) - (2)].boolean))
20928: 						(yyval.typnam) = SystemTypeName("timestamptz");
20929: 					else
20930: 						(yyval.typnam) = SystemTypeName("timestamp");
20931: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20932: 				;}
20933:     break;
20934: 
20935:   case 710:
20936: #line 1558 "third_party/libpg_query/grammar/statements/select.y"
20937:     {
20938: 					if ((yyvsp[(5) - (5)].boolean))
20939: 						(yyval.typnam) = SystemTypeName("timetz");
20940: 					else
20941: 						(yyval.typnam) = SystemTypeName("time");
20942: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
20943: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
20944: 				;}
20945:     break;
20946: 
20947:   case 711:
20948: #line 1567 "third_party/libpg_query/grammar/statements/select.y"
20949:     {
20950: 					if ((yyvsp[(2) - (2)].boolean))
20951: 						(yyval.typnam) = SystemTypeName("timetz");
20952: 					else
20953: 						(yyval.typnam) = SystemTypeName("time");
20954: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20955: 				;}
20956:     break;
20957: 
20958:   case 712:
20959: #line 1578 "third_party/libpg_query/grammar/statements/select.y"
20960:     {
20961: 					(yyval.typnam) = SystemTypeName("interval");
20962: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20963: 				;}
20964:     break;
20965: 
20966:   case 713:
20967: #line 1585 "third_party/libpg_query/grammar/statements/select.y"
20968:     { (yyval.boolean) = true; ;}
20969:     break;
20970: 
20971:   case 714:
20972: #line 1586 "third_party/libpg_query/grammar/statements/select.y"
20973:     { (yyval.boolean) = false; ;}
20974:     break;
20975: 
20976:   case 715:
20977: #line 1587 "third_party/libpg_query/grammar/statements/select.y"
20978:     { (yyval.boolean) = false; ;}
20979:     break;
20980: 
20981:   case 732:
20982: #line 1616 "third_party/libpg_query/grammar/statements/select.y"
20983:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[(1) - (1)]))); ;}
20984:     break;
20985: 
20986:   case 733:
20987: #line 1618 "third_party/libpg_query/grammar/statements/select.y"
20988:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[(1) - (1)]))); ;}
20989:     break;
20990: 
20991:   case 734:
20992: #line 1620 "third_party/libpg_query/grammar/statements/select.y"
20993:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[(1) - (1)]))); ;}
20994:     break;
20995: 
20996:   case 735:
20997: #line 1622 "third_party/libpg_query/grammar/statements/select.y"
20998:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[(1) - (1)]))); ;}
20999:     break;
21000: 
21001:   case 736:
21002: #line 1624 "third_party/libpg_query/grammar/statements/select.y"
21003:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[(1) - (1)]))); ;}
21004:     break;
21005: 
21006:   case 737:
21007: #line 1626 "third_party/libpg_query/grammar/statements/select.y"
21008:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[(1) - (1)]))); ;}
21009:     break;
21010: 
21011:   case 738:
21012: #line 1628 "third_party/libpg_query/grammar/statements/select.y"
21013:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[(1) - (1)]))); ;}
21014:     break;
21015: 
21016:   case 739:
21017: #line 1630 "third_party/libpg_query/grammar/statements/select.y"
21018:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[(1) - (1)]))); ;}
21019:     break;
21020: 
21021:   case 740:
21022: #line 1632 "third_party/libpg_query/grammar/statements/select.y"
21023:     {
21024: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
21025: 												 INTERVAL_MASK(MONTH), (yylsp[(1) - (3)])));
21026: 				;}
21027:     break;
21028: 
21029:   case 741:
21030: #line 1637 "third_party/libpg_query/grammar/statements/select.y"
21031:     {
21032: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
21033: 												 INTERVAL_MASK(HOUR), (yylsp[(1) - (3)])));
21034: 				;}
21035:     break;
21036: 
21037:   case 742:
21038: #line 1642 "third_party/libpg_query/grammar/statements/select.y"
21039:     {
21040: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
21041: 												 INTERVAL_MASK(HOUR) |
21042: 												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
21043: 				;}
21044:     break;
21045: 
21046:   case 743:
21047: #line 1648 "third_party/libpg_query/grammar/statements/select.y"
21048:     {
21049: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
21050: 												 INTERVAL_MASK(HOUR) |
21051: 												 INTERVAL_MASK(MINUTE) |
21052: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
21053: 				;}
21054:     break;
21055: 
21056:   case 744:
21057: #line 1655 "third_party/libpg_query/grammar/statements/select.y"
21058:     {
21059: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
21060: 												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
21061: 				;}
21062:     break;
21063: 
21064:   case 745:
21065: #line 1660 "third_party/libpg_query/grammar/statements/select.y"
21066:     {
21067: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
21068: 												 INTERVAL_MASK(MINUTE) |
21069: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
21070: 				;}
21071:     break;
21072: 
21073:   case 746:
21074: #line 1666 "third_party/libpg_query/grammar/statements/select.y"
21075:     {
21076: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
21077: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
21078: 				;}
21079:     break;
21080: 
21081:   case 747:
21082: #line 1671 "third_party/libpg_query/grammar/statements/select.y"
21083:     { (yyval.list) = NIL; ;}
21084:     break;
21085: 
21086:   case 748:
21087: #line 1702 "third_party/libpg_query/grammar/statements/select.y"
21088:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21089:     break;
21090: 
21091:   case 749:
21092: #line 1705 "third_party/libpg_query/grammar/statements/select.y"
21093:     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
21094:     break;
21095: 
21096:   case 750:
21097: #line 1707 "third_party/libpg_query/grammar/statements/select.y"
21098:     {
21099: 					PGCollateClause *n = makeNode(PGCollateClause);
21100: 					n->arg = (yyvsp[(1) - (3)].node);
21101: 					n->collname = (yyvsp[(3) - (3)].list);
21102: 					n->location = (yylsp[(2) - (3)]);
21103: 					(yyval.node) = (PGNode *) n;
21104: 				;}
21105:     break;
21106: 
21107:   case 751:
21108: #line 1715 "third_party/libpg_query/grammar/statements/select.y"
21109:     {
21110: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
21111: 											   list_make2((yyvsp[(5) - (5)].node), (yyvsp[(1) - (5)].node)),
21112: 											   (yylsp[(2) - (5)]));
21113: 				;}
21114:     break;
21115: 
21116:   case 752:
21117: #line 1730 "third_party/libpg_query/grammar/statements/select.y"
21118:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21119:     break;
21120: 
21121:   case 753:
21122: #line 1732 "third_party/libpg_query/grammar/statements/select.y"
21123:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21124:     break;
21125: 
21126:   case 754:
21127: #line 1734 "third_party/libpg_query/grammar/statements/select.y"
21128:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21129:     break;
21130: 
21131:   case 755:
21132: #line 1736 "third_party/libpg_query/grammar/statements/select.y"
21133:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21134:     break;
21135: 
21136:   case 756:
21137: #line 1738 "third_party/libpg_query/grammar/statements/select.y"
21138:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21139:     break;
21140: 
21141:   case 757:
21142: #line 1740 "third_party/libpg_query/grammar/statements/select.y"
21143:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21144:     break;
21145: 
21146:   case 758:
21147: #line 1742 "third_party/libpg_query/grammar/statements/select.y"
21148:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21149:     break;
21150: 
21151:   case 759:
21152: #line 1744 "third_party/libpg_query/grammar/statements/select.y"
21153:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21154:     break;
21155: 
21156:   case 760:
21157: #line 1746 "third_party/libpg_query/grammar/statements/select.y"
21158:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21159:     break;
21160: 
21161:   case 761:
21162: #line 1748 "third_party/libpg_query/grammar/statements/select.y"
21163:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21164:     break;
21165: 
21166:   case 762:
21167: #line 1750 "third_party/libpg_query/grammar/statements/select.y"
21168:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21169:     break;
21170: 
21171:   case 763:
21172: #line 1752 "third_party/libpg_query/grammar/statements/select.y"
21173:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21174:     break;
21175: 
21176:   case 764:
21177: #line 1754 "third_party/libpg_query/grammar/statements/select.y"
21178:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21179:     break;
21180: 
21181:   case 765:
21182: #line 1756 "third_party/libpg_query/grammar/statements/select.y"
21183:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21184:     break;
21185: 
21186:   case 766:
21187: #line 1759 "third_party/libpg_query/grammar/statements/select.y"
21188:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21189:     break;
21190: 
21191:   case 767:
21192: #line 1761 "third_party/libpg_query/grammar/statements/select.y"
21193:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21194:     break;
21195: 
21196:   case 768:
21197: #line 1763 "third_party/libpg_query/grammar/statements/select.y"
21198:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
21199:     break;
21200: 
21201:   case 769:
21202: #line 1766 "third_party/libpg_query/grammar/statements/select.y"
21203:     { (yyval.node) = makeAndExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21204:     break;
21205: 
21206:   case 770:
21207: #line 1768 "third_party/libpg_query/grammar/statements/select.y"
21208:     { (yyval.node) = makeOrExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21209:     break;
21210: 
21211:   case 771:
21212: #line 1770 "third_party/libpg_query/grammar/statements/select.y"
21213:     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21214:     break;
21215: 
21216:   case 772:
21217: #line 1772 "third_party/libpg_query/grammar/statements/select.y"
21218:     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21219:     break;
21220: 
21221:   case 773:
21222: #line 1775 "third_party/libpg_query/grammar/statements/select.y"
21223:     {
21224: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
21225: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
21226: 				;}
21227:     break;
21228: 
21229:   case 774:
21230: #line 1780 "third_party/libpg_query/grammar/statements/select.y"
21231:     {
21232: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
21233: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
21234: 				;}
21235:     break;
21236: 
21237:   case 775:
21238: #line 1785 "third_party/libpg_query/grammar/statements/select.y"
21239:     {
21240: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
21241: 											   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
21242: 											   (yylsp[(2) - (5)]));
21243: 					(yyval.node) = (PGNode *) n;
21244: 				;}
21245:     break;
21246: 
21247:   case 776:
21248: #line 1792 "third_party/libpg_query/grammar/statements/select.y"
21249:     {
21250: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
21251: 												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
21252: 				;}
21253:     break;
21254: 
21255:   case 777:
21256: #line 1797 "third_party/libpg_query/grammar/statements/select.y"
21257:     {
21258: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
21259: 											   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21260: 											   (yylsp[(2) - (6)]));
21261: 					(yyval.node) = (PGNode *) n;
21262: 				;}
21263:     break;
21264: 
21265:   case 778:
21266: #line 1804 "third_party/libpg_query/grammar/statements/select.y"
21267:     {
21268: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
21269: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
21270: 				;}
21271:     break;
21272: 
21273:   case 779:
21274: #line 1809 "third_party/libpg_query/grammar/statements/select.y"
21275:     {
21276: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
21277: 											   list_make2((yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
21278: 											   (yylsp[(2) - (5)]));
21279: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
21280: 												   (yyvsp[(1) - (5)].node), (PGNode *) n, (yylsp[(2) - (5)]));
21281: 				;}
21282:     break;
21283: 
21284:   case 780:
21285: #line 1817 "third_party/libpg_query/grammar/statements/select.y"
21286:     {
21287: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
21288: 												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
21289: 				;}
21290:     break;
21291: 
21292:   case 781:
21293: #line 1822 "third_party/libpg_query/grammar/statements/select.y"
21294:     {
21295: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
21296: 											   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21297: 											   (yylsp[(2) - (6)]));
21298: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
21299: 												   (yyvsp[(1) - (6)].node), (PGNode *) n, (yylsp[(2) - (6)]));
21300: 				;}
21301:     break;
21302: 
21303:   case 782:
21304: #line 1831 "third_party/libpg_query/grammar/statements/select.y"
21305:     {
21306: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
21307: 											   list_make2((yyvsp[(4) - (4)].node), makeNullAConst(-1)),
21308: 											   (yylsp[(2) - (4)]));
21309: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
21310: 												   (yyvsp[(1) - (4)].node), (PGNode *) n, (yylsp[(2) - (4)]));
21311: 				;}
21312:     break;
21313: 
21314:   case 783:
21315: #line 1839 "third_party/libpg_query/grammar/statements/select.y"
21316:     {
21317: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
21318: 											   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21319: 											   (yylsp[(2) - (6)]));
21320: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
21321: 												   (yyvsp[(1) - (6)].node), (PGNode *) n, (yylsp[(2) - (6)]));
21322: 				;}
21323:     break;
21324: 
21325:   case 784:
21326: #line 1847 "third_party/libpg_query/grammar/statements/select.y"
21327:     {
21328: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
21329: 											   list_make2((yyvsp[(5) - (5)].node), makeNullAConst(-1)),
21330: 											   (yylsp[(2) - (5)]));
21331: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
21332: 												   (yyvsp[(1) - (5)].node), (PGNode *) n, (yylsp[(2) - (5)]));
21333: 				;}
21334:     break;
21335: 
21336:   case 785:
21337: #line 1855 "third_party/libpg_query/grammar/statements/select.y"
21338:     {
21339: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
21340: 											   list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
21341: 											   (yylsp[(2) - (7)]));
21342: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
21343: 												   (yyvsp[(1) - (7)].node), (PGNode *) n, (yylsp[(2) - (7)]));
21344: 				;}
21345:     break;
21346: 
21347:   case 786:
21348: #line 1873 "third_party/libpg_query/grammar/statements/select.y"
21349:     {
21350: 					PGNullTest *n = makeNode(PGNullTest);
21351: 					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21352: 					n->nulltesttype = PG_IS_NULL;
21353: 					n->location = (yylsp[(2) - (3)]);
21354: 					(yyval.node) = (PGNode *)n;
21355: 				;}
21356:     break;
21357: 
21358:   case 787:
21359: #line 1881 "third_party/libpg_query/grammar/statements/select.y"
21360:     {
21361: 					PGNullTest *n = makeNode(PGNullTest);
21362: 					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
21363: 					n->nulltesttype = PG_IS_NULL;
21364: 					n->location = (yylsp[(2) - (2)]);
21365: 					(yyval.node) = (PGNode *)n;
21366: 				;}
21367:     break;
21368: 
21369:   case 788:
21370: #line 1889 "third_party/libpg_query/grammar/statements/select.y"
21371:     {
21372: 					PGNullTest *n = makeNode(PGNullTest);
21373: 					n->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
21374: 					n->nulltesttype = IS_NOT_NULL;
21375: 					n->location = (yylsp[(2) - (4)]);
21376: 					(yyval.node) = (PGNode *)n;
21377: 				;}
21378:     break;
21379: 
21380:   case 789:
21381: #line 1897 "third_party/libpg_query/grammar/statements/select.y"
21382:     {
21383: 					PGNullTest *n = makeNode(PGNullTest);
21384: 					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21385: 					n->nulltesttype = IS_NOT_NULL;
21386: 					n->location = (yylsp[(2) - (3)]);
21387: 					(yyval.node) = (PGNode *)n;
21388: 				;}
21389:     break;
21390: 
21391:   case 790:
21392: #line 1905 "third_party/libpg_query/grammar/statements/select.y"
21393:     {
21394: 					PGNullTest *n = makeNode(PGNullTest);
21395: 					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
21396: 					n->nulltesttype = IS_NOT_NULL;
21397: 					n->location = (yylsp[(2) - (2)]);
21398: 					(yyval.node) = (PGNode *)n;
21399: 				;}
21400:     break;
21401: 
21402:   case 791:
21403: #line 1912 "third_party/libpg_query/grammar/statements/select.y"
21404:     {
21405: 				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[(1) - (1)].list), (yylsp[(1) - (1)]));
21406: 				(yyval.node) = (PGNode *) n;
21407: 			;}
21408:     break;
21409: 
21410:   case 792:
21411: #line 1916 "third_party/libpg_query/grammar/statements/select.y"
21412:     {
21413: 				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
21414: 				(yyval.node) = (PGNode *) n;
21415: 			;}
21416:     break;
21417: 
21418:   case 793:
21419: #line 1920 "third_party/libpg_query/grammar/statements/select.y"
21420:     {
21421: 				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
21422: 				(yyval.node) = (PGNode *) n;
21423: 			;}
21424:     break;
21425: 
21426:   case 794:
21427: #line 1925 "third_party/libpg_query/grammar/statements/select.y"
21428:     {
21429: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
21430: 				n->parameters = (yyvsp[(1) - (3)].list);
21431: 				n->function = (yyvsp[(3) - (3)].node);
21432: 				n->location = (yylsp[(2) - (3)]);
21433: 				(yyval.node) = (PGNode *) n;
21434: 			;}
21435:     break;
21436: 
21437:   case 795:
21438: #line 1933 "third_party/libpg_query/grammar/statements/select.y"
21439:     {
21440: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
21441: 				n->parameters = list_make1((yyvsp[(1) - (3)].node));
21442: 				n->function = (yyvsp[(3) - (3)].node);
21443: 				n->location = (yylsp[(2) - (3)]);
21444: 				(yyval.node) = (PGNode *) n;
21445: 			;}
21446:     break;
21447: 
21448:   case 796:
21449: #line 1941 "third_party/libpg_query/grammar/statements/select.y"
21450:     {
21451: 					if (list_length((yyvsp[(1) - (3)].list)) != 2)
21452: 						ereport(ERROR,
21453: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
21454: 								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
21455: 								 parser_errposition((yylsp[(1) - (3)]))));
21456: 					if (list_length((yyvsp[(3) - (3)].list)) != 2)
21457: 						ereport(ERROR,
21458: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
21459: 								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
21460: 								 parser_errposition((yylsp[(3) - (3)]))));
21461: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
21462: 											   list_concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)),
21463: 											   (yylsp[(2) - (3)]));
21464: 				;}
21465:     break;
21466: 
21467:   case 797:
21468: #line 1957 "third_party/libpg_query/grammar/statements/select.y"
21469:     {
21470: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21471: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21472: 					b->booltesttype = PG_IS_TRUE;
21473: 					b->location = (yylsp[(2) - (3)]);
21474: 					(yyval.node) = (PGNode *)b;
21475: 				;}
21476:     break;
21477: 
21478:   case 798:
21479: #line 1965 "third_party/libpg_query/grammar/statements/select.y"
21480:     {
21481: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21482: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
21483: 					b->booltesttype = IS_NOT_TRUE;
21484: 					b->location = (yylsp[(2) - (4)]);
21485: 					(yyval.node) = (PGNode *)b;
21486: 				;}
21487:     break;
21488: 
21489:   case 799:
21490: #line 1973 "third_party/libpg_query/grammar/statements/select.y"
21491:     {
21492: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21493: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21494: 					b->booltesttype = IS_FALSE;
21495: 					b->location = (yylsp[(2) - (3)]);
21496: 					(yyval.node) = (PGNode *)b;
21497: 				;}
21498:     break;
21499: 
21500:   case 800:
21501: #line 1981 "third_party/libpg_query/grammar/statements/select.y"
21502:     {
21503: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21504: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
21505: 					b->booltesttype = IS_NOT_FALSE;
21506: 					b->location = (yylsp[(2) - (4)]);
21507: 					(yyval.node) = (PGNode *)b;
21508: 				;}
21509:     break;
21510: 
21511:   case 801:
21512: #line 1989 "third_party/libpg_query/grammar/statements/select.y"
21513:     {
21514: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21515: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21516: 					b->booltesttype = IS_UNKNOWN;
21517: 					b->location = (yylsp[(2) - (3)]);
21518: 					(yyval.node) = (PGNode *)b;
21519: 				;}
21520:     break;
21521: 
21522:   case 802:
21523: #line 1997 "third_party/libpg_query/grammar/statements/select.y"
21524:     {
21525: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21526: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
21527: 					b->booltesttype = IS_NOT_UNKNOWN;
21528: 					b->location = (yylsp[(2) - (4)]);
21529: 					(yyval.node) = (PGNode *)b;
21530: 				;}
21531:     break;
21532: 
21533:   case 803:
21534: #line 2005 "third_party/libpg_query/grammar/statements/select.y"
21535:     {
21536: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
21537: 				;}
21538:     break;
21539: 
21540:   case 804:
21541: #line 2009 "third_party/libpg_query/grammar/statements/select.y"
21542:     {
21543: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
21544: 				;}
21545:     break;
21546: 
21547:   case 805:
21548: #line 2013 "third_party/libpg_query/grammar/statements/select.y"
21549:     {
21550: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
21551: 				;}
21552:     break;
21553: 
21554:   case 806:
21555: #line 2017 "third_party/libpg_query/grammar/statements/select.y"
21556:     {
21557: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
21558: 				;}
21559:     break;
21560: 
21561:   case 807:
21562: #line 2021 "third_party/libpg_query/grammar/statements/select.y"
21563:     {
21564: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
21565: 												   "BETWEEN",
21566: 												   (yyvsp[(1) - (6)].node),
21567: 												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21568: 												   (yylsp[(2) - (6)]));
21569: 				;}
21570:     break;
21571: 
21572:   case 808:
21573: #line 2029 "third_party/libpg_query/grammar/statements/select.y"
21574:     {
21575: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
21576: 												   "NOT BETWEEN",
21577: 												   (yyvsp[(1) - (7)].node),
21578: 												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
21579: 												   (yylsp[(2) - (7)]));
21580: 				;}
21581:     break;
21582: 
21583:   case 809:
21584: #line 2037 "third_party/libpg_query/grammar/statements/select.y"
21585:     {
21586: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
21587: 												   "BETWEEN SYMMETRIC",
21588: 												   (yyvsp[(1) - (6)].node),
21589: 												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21590: 												   (yylsp[(2) - (6)]));
21591: 				;}
21592:     break;
21593: 
21594:   case 810:
21595: #line 2045 "third_party/libpg_query/grammar/statements/select.y"
21596:     {
21597: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
21598: 												   "NOT BETWEEN SYMMETRIC",
21599: 												   (yyvsp[(1) - (7)].node),
21600: 												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
21601: 												   (yylsp[(2) - (7)]));
21602: 				;}
21603:     break;
21604: 
21605:   case 811:
21606: #line 2053 "third_party/libpg_query/grammar/statements/select.y"
21607:     {
21608: 					/* in_expr returns a PGSubLink or a list of a_exprs */
21609: 					if (IsA((yyvsp[(3) - (3)].node), PGSubLink))
21610: 					{
21611: 						/* generate foo = ANY (subquery) */
21612: 						PGSubLink *n = (PGSubLink *) (yyvsp[(3) - (3)].node);
21613: 						n->subLinkType = PG_ANY_SUBLINK;
21614: 						n->subLinkId = 0;
21615: 						n->testexpr = (yyvsp[(1) - (3)].node);
21616: 						n->operName = NIL;		/* show it's IN not = ANY */
21617: 						n->location = (yylsp[(2) - (3)]);
21618: 						(yyval.node) = (PGNode *)n;
21619: 					}
21620: 					else
21621: 					{
21622: 						/* generate scalar IN expression */
21623: 						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
21624: 					}
21625: 				;}
21626:     break;
21627: 
21628:   case 812:
21629: #line 2073 "third_party/libpg_query/grammar/statements/select.y"
21630:     {
21631: 					/* in_expr returns a PGSubLink or a list of a_exprs */
21632: 					if (IsA((yyvsp[(4) - (4)].node), PGSubLink))
21633: 					{
21634: 						/* generate NOT (foo = ANY (subquery)) */
21635: 						/* Make an = ANY node */
21636: 						PGSubLink *n = (PGSubLink *) (yyvsp[(4) - (4)].node);
21637: 						n->subLinkType = PG_ANY_SUBLINK;
21638: 						n->subLinkId = 0;
21639: 						n->testexpr = (yyvsp[(1) - (4)].node);
21640: 						n->operName = NIL;		/* show it's IN not = ANY */
21641: 						n->location = (yylsp[(2) - (4)]);
21642: 						/* Stick a NOT on top; must have same parse location */
21643: 						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[(2) - (4)]));
21644: 					}
21645: 					else
21646: 					{
21647: 						/* generate scalar NOT IN expression */
21648: 						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
21649: 					}
21650: 				;}
21651:     break;
21652: 
21653:   case 813:
21654: #line 2095 "third_party/libpg_query/grammar/statements/select.y"
21655:     {
21656: 					PGSubLink *n = makeNode(PGSubLink);
21657: 					n->subLinkType = (yyvsp[(3) - (4)].subquerytype);
21658: 					n->subLinkId = 0;
21659: 					n->testexpr = (yyvsp[(1) - (4)].node);
21660: 					n->operName = (yyvsp[(2) - (4)].list);
21661: 					n->subselect = (yyvsp[(4) - (4)].node);
21662: 					n->location = (yylsp[(2) - (4)]);
21663: 					(yyval.node) = (PGNode *)n;
21664: 				;}
21665:     break;
21666: 
21667:   case 814:
21668: #line 2106 "third_party/libpg_query/grammar/statements/select.y"
21669:     {
21670: 					if ((yyvsp[(3) - (6)].subquerytype) == PG_ANY_SUBLINK)
21671: 						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
21672: 					else
21673: 						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
21674: 				;}
21675:     break;
21676: 
21677:   case 815:
21678: #line 2113 "third_party/libpg_query/grammar/statements/select.y"
21679:     {
21680: 					/*
21681: 					 * The SQL spec only allows DEFAULT in "contextually typed
21682: 					 * expressions", but for us, it's easier to allow it in
21683: 					 * any a_expr and then throw error during parse analysis
21684: 					 * if it's in an inappropriate context.  This way also
21685: 					 * lets us say something smarter than "syntax error".
21686: 					 */
21687: 					PGSetToDefault *n = makeNode(PGSetToDefault);
21688: 					/* parse analysis will fill in the rest */
21689: 					n->location = (yylsp[(1) - (1)]);
21690: 					(yyval.node) = (PGNode *)n;
21691: 				;}
21692:     break;
21693: 
21694:   case 816:
21695: #line 2126 "third_party/libpg_query/grammar/statements/select.y"
21696:     {
21697: 				PGList *func_name = list_make1(makeString("construct_array"));
21698: 				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
21699: 				(yyval.node) = (PGNode *) n;
21700: 			;}
21701:     break;
21702: 
21703:   case 817:
21704: #line 2143 "third_party/libpg_query/grammar/statements/select.y"
21705:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21706:     break;
21707: 
21708:   case 818:
21709: #line 2145 "third_party/libpg_query/grammar/statements/select.y"
21710:     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
21711:     break;
21712: 
21713:   case 819:
21714: #line 2147 "third_party/libpg_query/grammar/statements/select.y"
21715:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21716:     break;
21717: 
21718:   case 820:
21719: #line 2149 "third_party/libpg_query/grammar/statements/select.y"
21720:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21721:     break;
21722: 
21723:   case 821:
21724: #line 2151 "third_party/libpg_query/grammar/statements/select.y"
21725:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21726:     break;
21727: 
21728:   case 822:
21729: #line 2153 "third_party/libpg_query/grammar/statements/select.y"
21730:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21731:     break;
21732: 
21733:   case 823:
21734: #line 2155 "third_party/libpg_query/grammar/statements/select.y"
21735:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21736:     break;
21737: 
21738:   case 824:
21739: #line 2157 "third_party/libpg_query/grammar/statements/select.y"
21740:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21741:     break;
21742: 
21743:   case 825:
21744: #line 2159 "third_party/libpg_query/grammar/statements/select.y"
21745:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21746:     break;
21747: 
21748:   case 826:
21749: #line 2161 "third_party/libpg_query/grammar/statements/select.y"
21750:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21751:     break;
21752: 
21753:   case 827:
21754: #line 2163 "third_party/libpg_query/grammar/statements/select.y"
21755:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21756:     break;
21757: 
21758:   case 828:
21759: #line 2165 "third_party/libpg_query/grammar/statements/select.y"
21760:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21761:     break;
21762: 
21763:   case 829:
21764: #line 2167 "third_party/libpg_query/grammar/statements/select.y"
21765:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21766:     break;
21767: 
21768:   case 830:
21769: #line 2169 "third_party/libpg_query/grammar/statements/select.y"
21770:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21771:     break;
21772: 
21773:   case 831:
21774: #line 2171 "third_party/libpg_query/grammar/statements/select.y"
21775:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21776:     break;
21777: 
21778:   case 832:
21779: #line 2173 "third_party/libpg_query/grammar/statements/select.y"
21780:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21781:     break;
21782: 
21783:   case 833:
21784: #line 2175 "third_party/libpg_query/grammar/statements/select.y"
21785:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21786:     break;
21787: 
21788:   case 834:
21789: #line 2177 "third_party/libpg_query/grammar/statements/select.y"
21790:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21791:     break;
21792: 
21793:   case 835:
21794: #line 2179 "third_party/libpg_query/grammar/statements/select.y"
21795:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
21796:     break;
21797: 
21798:   case 836:
21799: #line 2181 "third_party/libpg_query/grammar/statements/select.y"
21800:     {
21801: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
21802: 				;}
21803:     break;
21804: 
21805:   case 837:
21806: #line 2185 "third_party/libpg_query/grammar/statements/select.y"
21807:     {
21808: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
21809: 				;}
21810:     break;
21811: 
21812:   case 838:
21813: #line 2189 "third_party/libpg_query/grammar/statements/select.y"
21814:     {
21815: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
21816: 				;}
21817:     break;
21818: 
21819:   case 839:
21820: #line 2193 "third_party/libpg_query/grammar/statements/select.y"
21821:     {
21822: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
21823: 				;}
21824:     break;
21825: 
21826:   case 840:
21827: #line 2206 "third_party/libpg_query/grammar/statements/select.y"
21828:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21829:     break;
21830: 
21831:   case 841:
21832: #line 2207 "third_party/libpg_query/grammar/statements/select.y"
21833:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21834:     break;
21835: 
21836:   case 842:
21837: #line 2209 "third_party/libpg_query/grammar/statements/select.y"
21838:     {
21839: 					PGPositionalReference *n = makeNode(PGPositionalReference);
21840: 					n->position = (yyvsp[(2) - (2)].ival);
21841: 					n->location = (yylsp[(1) - (2)]);
21842: 					(yyval.node) = (PGNode *) n;
21843: 				;}
21844:     break;
21845: 
21846:   case 843:
21847: #line 2216 "third_party/libpg_query/grammar/statements/select.y"
21848:     {
21849: 					if ((yyvsp[(2) - (2)].list))
21850: 					{
21851: 						PGAIndirection *n = makeNode(PGAIndirection);
21852: 						n->arg = makeParamRef(0, (yylsp[(1) - (2)]));
21853: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21854: 						(yyval.node) = (PGNode *) n;
21855: 					}
21856: 					else
21857: 						(yyval.node) = makeParamRef(0, (yylsp[(1) - (2)]));
21858: 				;}
21859:     break;
21860: 
21861:   case 844:
21862: #line 2228 "third_party/libpg_query/grammar/statements/select.y"
21863:     {
21864: 					PGParamRef *p = makeNode(PGParamRef);
21865: 					p->number = (yyvsp[(1) - (2)].ival);
21866: 					p->location = (yylsp[(1) - (2)]);
21867: 					if ((yyvsp[(2) - (2)].list))
21868: 					{
21869: 						PGAIndirection *n = makeNode(PGAIndirection);
21870: 						n->arg = (PGNode *) p;
21871: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21872: 						(yyval.node) = (PGNode *) n;
21873: 					}
21874: 					else
21875: 						(yyval.node) = (PGNode *) p;
21876: 				;}
21877:     break;
21878: 
21879:   case 845:
21880: #line 2243 "third_party/libpg_query/grammar/statements/select.y"
21881:     {
21882: 					if ((yyvsp[(4) - (4)].list))
21883: 					{
21884: 						PGAIndirection *n = makeNode(PGAIndirection);
21885: 						n->arg = (yyvsp[(2) - (4)].node);
21886: 						n->indirection = check_indirection((yyvsp[(4) - (4)].list), yyscanner);
21887: 						(yyval.node) = (PGNode *)n;
21888: 					}
21889: 					else
21890: 						(yyval.node) = (yyvsp[(2) - (4)].node);
21891: 				;}
21892:     break;
21893: 
21894:   case 846:
21895: #line 2255 "third_party/libpg_query/grammar/statements/select.y"
21896:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21897:     break;
21898: 
21899:   case 847:
21900: #line 2257 "third_party/libpg_query/grammar/statements/select.y"
21901:     {
21902: 					if ((yyvsp[(2) - (2)].list)) {
21903: 						PGAIndirection *n = makeNode(PGAIndirection);
21904: 						n->arg = (yyvsp[(1) - (2)].node);
21905: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21906: 						(yyval.node) = (PGNode *)n;
21907: 					}
21908: 					else {
21909: 						(yyval.node) = (yyvsp[(1) - (2)].node);
21910: 					}
21911: 				;}
21912:     break;
21913: 
21914:   case 848:
21915: #line 2269 "third_party/libpg_query/grammar/statements/select.y"
21916:     {
21917: 					PGSubLink *n = makeNode(PGSubLink);
21918: 					n->subLinkType = PG_EXPR_SUBLINK;
21919: 					n->subLinkId = 0;
21920: 					n->testexpr = NULL;
21921: 					n->operName = NIL;
21922: 					n->subselect = (yyvsp[(1) - (1)].node);
21923: 					n->location = (yylsp[(1) - (1)]);
21924: 					(yyval.node) = (PGNode *)n;
21925: 				;}
21926:     break;
21927: 
21928:   case 849:
21929: #line 2280 "third_party/libpg_query/grammar/statements/select.y"
21930:     {
21931: 					/*
21932: 					 * Because the select_with_parens nonterminal is designed
21933: 					 * to "eat" as many levels of parens as possible, the
21934: 					 * '(' a_expr ')' opt_indirection production above will
21935: 					 * fail to match a sub-SELECT with indirection decoration;
21936: 					 * the sub-SELECT won't be regarded as an a_expr as long
21937: 					 * as there are parens around it.  To support applying
21938: 					 * subscripting or field selection to a sub-SELECT result,
21939: 					 * we need this redundant-looking production.
21940: 					 */
21941: 					PGSubLink *n = makeNode(PGSubLink);
21942: 					PGAIndirection *a = makeNode(PGAIndirection);
21943: 					n->subLinkType = PG_EXPR_SUBLINK;
21944: 					n->subLinkId = 0;
21945: 					n->testexpr = NULL;
21946: 					n->operName = NIL;
21947: 					n->subselect = (yyvsp[(1) - (2)].node);
21948: 					n->location = (yylsp[(1) - (2)]);
21949: 					a->arg = (PGNode *)n;
21950: 					a->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21951: 					(yyval.node) = (PGNode *)a;
21952: 				;}
21953:     break;
21954: 
21955:   case 850:
21956: #line 2304 "third_party/libpg_query/grammar/statements/select.y"
21957:     {
21958: 					PGSubLink *n = makeNode(PGSubLink);
21959: 					n->subLinkType = PG_EXISTS_SUBLINK;
21960: 					n->subLinkId = 0;
21961: 					n->testexpr = NULL;
21962: 					n->operName = NIL;
21963: 					n->subselect = (yyvsp[(2) - (2)].node);
21964: 					n->location = (yylsp[(1) - (2)]);
21965: 					(yyval.node) = (PGNode *)n;
21966: 				;}
21967:     break;
21968: 
21969:   case 851:
21970: #line 2315 "third_party/libpg_query/grammar/statements/select.y"
21971:     {
21972: 				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
21973: 				  g->args = (yyvsp[(3) - (4)].list);
21974: 				  g->location = (yylsp[(1) - (4)]);
21975: 				  (yyval.node) = (PGNode *)g;
21976: 			  ;}
21977:     break;
21978: 
21979:   case 852:
21980: #line 2324 "third_party/libpg_query/grammar/statements/select.y"
21981:     {
21982: 					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[(1) - (3)].list), NIL, (yylsp[(1) - (3)]));
21983: 				;}
21984:     break;
21985: 
21986:   case 853:
21987: #line 2328 "third_party/libpg_query/grammar/statements/select.y"
21988:     {
21989: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(3) - (6)].list), (yylsp[(1) - (6)]));
21990: 					n->agg_order = (yyvsp[(4) - (6)].list);
21991: 					n->agg_ignore_nulls = (yyvsp[(5) - (6)].boolean);
21992: 					(yyval.node) = (PGNode *)n;
21993: 				;}
21994:     break;
21995: 
21996:   case 854:
21997: #line 2335 "third_party/libpg_query/grammar/statements/select.y"
21998:     {
21999: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), list_make1((yyvsp[(4) - (7)].node)), (yylsp[(1) - (7)]));
22000: 					n->func_variadic = true;
22001: 					n->agg_order = (yyvsp[(5) - (7)].list);
22002: 					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
22003: 					(yyval.node) = (PGNode *)n;
22004: 				;}
22005:     break;
22006: 
22007:   case 855:
22008: #line 2343 "third_party/libpg_query/grammar/statements/select.y"
22009:     {
22010: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (9)].list), lappend((yyvsp[(3) - (9)].list), (yyvsp[(6) - (9)].node)), (yylsp[(1) - (9)]));
22011: 					n->func_variadic = true;
22012: 					n->agg_order = (yyvsp[(7) - (9)].list);
22013: 					n->agg_ignore_nulls = (yyvsp[(8) - (9)].boolean);
22014: 					(yyval.node) = (PGNode *)n;
22015: 				;}
22016:     break;
22017: 
22018:   case 856:
22019: #line 2351 "third_party/libpg_query/grammar/statements/select.y"
22020:     {
22021: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));
22022: 					n->agg_order = (yyvsp[(5) - (7)].list);
22023: 					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
22024: 					/* Ideally we'd mark the PGFuncCall node to indicate
22025: 					 * "must be an aggregate", but there's no provision
22026: 					 * for that in PGFuncCall at the moment.
22027: 					 */
22028: 					(yyval.node) = (PGNode *)n;
22029: 				;}
22030:     break;
22031: 
22032:   case 857:
22033: #line 2362 "third_party/libpg_query/grammar/statements/select.y"
22034:     {
22035: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));
22036: 					n->agg_order = (yyvsp[(5) - (7)].list);
22037: 					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
22038: 					n->agg_distinct = true;
22039: 					(yyval.node) = (PGNode *)n;
22040: 				;}
22041:     break;
22042: 
22043:   case 858:
22044: #line 2370 "third_party/libpg_query/grammar/statements/select.y"
22045:     {
22046: 					/*
22047: 					 * We consider AGGREGATE(*) to invoke a parameterless
22048: 					 * aggregate.  This does the right thing for COUNT(*),
22049: 					 * and there are no other aggregates in SQL that accept
22050: 					 * '*' as parameter.
22051: 					 *
22052: 					 * The PGFuncCall node is also marked agg_star = true,
22053: 					 * so that later processing can detect what the argument
22054: 					 * really was.
22055: 					 */
22056: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (4)].list), NIL, (yylsp[(1) - (4)]));
22057: 					n->agg_star = true;
22058: 					(yyval.node) = (PGNode *)n;
22059: 				;}
22060:     break;
22061: 
22062:   case 859:
22063: #line 2398 "third_party/libpg_query/grammar/statements/select.y"
22064:     {
22065: 					PGFuncCall *n = (PGFuncCall *) (yyvsp[(1) - (5)].node);
22066: 					/*
22067: 					 * The order clause for WITHIN GROUP and the one for
22068: 					 * plain-aggregate ORDER BY share a field, so we have to
22069: 					 * check here that at most one is present.  We also check
22070: 					 * for DISTINCT and VARIADIC here to give a better error
22071: 					 * location.  Other consistency checks are deferred to
22072: 					 * parse analysis.
22073: 					 */
22074: 					if ((yyvsp[(2) - (5)].list) != NIL)
22075: 					{
22076: 						if (n->agg_order != NIL)
22077: 							ereport(ERROR,
22078: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22079: 									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
22080: 									 parser_errposition((yylsp[(2) - (5)]))));
22081: 						if (n->agg_distinct)
22082: 							ereport(ERROR,
22083: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22084: 									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
22085: 									 parser_errposition((yylsp[(2) - (5)]))));
22086: 						if (n->func_variadic)
22087: 							ereport(ERROR,
22088: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22089: 									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
22090: 									 parser_errposition((yylsp[(2) - (5)]))));
22091: 						n->agg_order = (yyvsp[(2) - (5)].list);
22092: 						n->agg_within_group = true;
22093: 					}
22094: 					n->agg_filter = (yyvsp[(3) - (5)].node);
22095: 					n->export_state = (yyvsp[(4) - (5)].boolean);
22096: 					n->over = (yyvsp[(5) - (5)].windef);
22097: 					(yyval.node) = (PGNode *) n;
22098: 				;}
22099:     break;
22100: 
22101:   case 860:
22102: #line 2434 "third_party/libpg_query/grammar/statements/select.y"
22103:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
22104:     break;
22105: 
22106:   case 861:
22107: #line 2444 "third_party/libpg_query/grammar/statements/select.y"
22108:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
22109:     break;
22110: 
22111:   case 862:
22112: #line 2445 "third_party/libpg_query/grammar/statements/select.y"
22113:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
22114:     break;
22115: 
22116:   case 863:
22117: #line 2453 "third_party/libpg_query/grammar/statements/select.y"
22118:     {
22119: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
22120: 											   list_make1((yyvsp[(4) - (5)].node)),
22121: 											   (yylsp[(1) - (5)]));
22122: 				;}
22123:     break;
22124: 
22125:   case 864:
22126: #line 2459 "third_party/libpg_query/grammar/statements/select.y"
22127:     {
22128: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[(1) - (1)]));
22129: 				;}
22130:     break;
22131: 
22132:   case 865:
22133: #line 2463 "third_party/libpg_query/grammar/statements/select.y"
22134:     {
22135: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[(1) - (1)]));
22136: 				;}
22137:     break;
22138: 
22139:   case 866:
22140: #line 2467 "third_party/libpg_query/grammar/statements/select.y"
22141:     {
22142: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
22143: 				;}
22144:     break;
22145: 
22146:   case 867:
22147: #line 2471 "third_party/libpg_query/grammar/statements/select.y"
22148:     {
22149: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[(1) - (1)]));
22150: 				;}
22151:     break;
22152: 
22153:   case 868:
22154: #line 2475 "third_party/libpg_query/grammar/statements/select.y"
22155:     {
22156: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
22157: 				;}
22158:     break;
22159: 
22160:   case 869:
22161: #line 2479 "third_party/libpg_query/grammar/statements/select.y"
22162:     {
22163: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[(1) - (1)]));
22164: 				;}
22165:     break;
22166: 
22167:   case 870:
22168: #line 2483 "third_party/libpg_query/grammar/statements/select.y"
22169:     {
22170: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
22171: 				;}
22172:     break;
22173: 
22174:   case 871:
22175: #line 2487 "third_party/libpg_query/grammar/statements/select.y"
22176:     {
22177: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[(1) - (1)]));
22178: 				;}
22179:     break;
22180: 
22181:   case 872:
22182: #line 2491 "third_party/libpg_query/grammar/statements/select.y"
22183:     {
22184: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
22185: 				;}
22186:     break;
22187: 
22188:   case 873:
22189: #line 2495 "third_party/libpg_query/grammar/statements/select.y"
22190:     {
22191: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[(1) - (1)]));
22192: 				;}
22193:     break;
22194: 
22195:   case 874:
22196: #line 2499 "third_party/libpg_query/grammar/statements/select.y"
22197:     {
22198: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[(1) - (1)]));
22199: 				;}
22200:     break;
22201: 
22202:   case 875:
22203: #line 2503 "third_party/libpg_query/grammar/statements/select.y"
22204:     {
22205: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[(1) - (1)]));
22206: 				;}
22207:     break;
22208: 
22209:   case 876:
22210: #line 2507 "third_party/libpg_query/grammar/statements/select.y"
22211:     {
22212: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[(1) - (1)]));
22213: 				;}
22214:     break;
22215: 
22216:   case 877:
22217: #line 2511 "third_party/libpg_query/grammar/statements/select.y"
22218:     {
22219: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[(1) - (1)]));
22220: 				;}
22221:     break;
22222: 
22223:   case 878:
22224: #line 2515 "third_party/libpg_query/grammar/statements/select.y"
22225:     {
22226: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[(1) - (1)]));
22227: 				;}
22228:     break;
22229: 
22230:   case 879:
22231: #line 2519 "third_party/libpg_query/grammar/statements/select.y"
22232:     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 0, (yylsp[(1) - (6)])); ;}
22233:     break;
22234: 
22235:   case 880:
22236: #line 2521 "third_party/libpg_query/grammar/statements/select.y"
22237:     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 1, (yylsp[(1) - (6)])); ;}
22238:     break;
22239: 
22240:   case 881:
22241: #line 2523 "third_party/libpg_query/grammar/statements/select.y"
22242:     {
22243: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22244: 				;}
22245:     break;
22246: 
22247:   case 882:
22248: #line 2527 "third_party/libpg_query/grammar/statements/select.y"
22249:     {
22250: 					/* overlay(A PLACING B FROM C FOR D) is converted to
22251: 					 * overlay(A, B, C, D)
22252: 					 * overlay(A PLACING B FROM C) is converted to
22253: 					 * overlay(A, B, C)
22254: 					 */
22255: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22256: 				;}
22257:     break;
22258: 
22259:   case 883:
22260: #line 2536 "third_party/libpg_query/grammar/statements/select.y"
22261:     {
22262: 					/* position(A in B) is converted to position(B, A) */
22263: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22264: 				;}
22265:     break;
22266: 
22267:   case 884:
22268: #line 2541 "third_party/libpg_query/grammar/statements/select.y"
22269:     {
22270: 					/* substring(A from B for C) is converted to
22271: 					 * substring(A, B, C) - thomas 2000-11-28
22272: 					 */
22273: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22274: 				;}
22275:     break;
22276: 
22277:   case 885:
22278: #line 2548 "third_party/libpg_query/grammar/statements/select.y"
22279:     {
22280: 					/* TREAT(expr AS target) converts expr of a particular type to target,
22281: 					 * which is defined to be a subtype of the original expression.
22282: 					 * In SQL99, this is intended for use with structured UDTs,
22283: 					 * but let's make this a generally useful form allowing stronger
22284: 					 * coercions than are handled by implicit casting.
22285: 					 *
22286: 					 * Convert SystemTypeName() to SystemFuncName() even though
22287: 					 * at the moment they result in the same thing.
22288: 					 */
22289: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[(5) - (6)].typnam)->names))->val.str),
22290: 												list_make1((yyvsp[(3) - (6)].node)),
22291: 												(yylsp[(1) - (6)]));
22292: 				;}
22293:     break;
22294: 
22295:   case 886:
22296: #line 2563 "third_party/libpg_query/grammar/statements/select.y"
22297:     {
22298: 					/* various trim expressions are defined in SQL
22299: 					 * - thomas 1997-07-19
22300: 					 */
22301: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
22302: 				;}
22303:     break;
22304: 
22305:   case 887:
22306: #line 2570 "third_party/libpg_query/grammar/statements/select.y"
22307:     {
22308: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
22309: 				;}
22310:     break;
22311: 
22312:   case 888:
22313: #line 2574 "third_party/libpg_query/grammar/statements/select.y"
22314:     {
22315: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
22316: 				;}
22317:     break;
22318: 
22319:   case 889:
22320: #line 2578 "third_party/libpg_query/grammar/statements/select.y"
22321:     {
22322: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22323: 				;}
22324:     break;
22325: 
22326:   case 890:
22327: #line 2582 "third_party/libpg_query/grammar/statements/select.y"
22328:     {
22329: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(1) - (6)]));
22330: 				;}
22331:     break;
22332: 
22333:   case 891:
22334: #line 2586 "third_party/libpg_query/grammar/statements/select.y"
22335:     {
22336: 					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
22337: 					c->args = (yyvsp[(3) - (4)].list);
22338: 					c->location = (yylsp[(1) - (4)]);
22339: 					(yyval.node) = (PGNode *)c;
22340: 				;}
22341:     break;
22342: 
22343:   case 892:
22344: #line 2599 "third_party/libpg_query/grammar/statements/select.y"
22345:     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
22346:     break;
22347: 
22348:   case 893:
22349: #line 2600 "third_party/libpg_query/grammar/statements/select.y"
22350:     { (yyval.list) = NIL; ;}
22351:     break;
22352: 
22353:   case 894:
22354: #line 2604 "third_party/libpg_query/grammar/statements/select.y"
22355:     { (yyval.node) = (yyvsp[(4) - (5)].node); ;}
22356:     break;
22357: 
22358:   case 895:
22359: #line 2605 "third_party/libpg_query/grammar/statements/select.y"
22360:     { (yyval.node) = NULL; ;}
22361:     break;
22362: 
22363:   case 896:
22364: #line 2609 "third_party/libpg_query/grammar/statements/select.y"
22365:     { (yyval.boolean) = true; ;}
22366:     break;
22367: 
22368:   case 897:
22369: #line 2610 "third_party/libpg_query/grammar/statements/select.y"
22370:     { (yyval.boolean) = false; ;}
22371:     break;
22372: 
22373:   case 898:
22374: #line 2617 "third_party/libpg_query/grammar/statements/select.y"
22375:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
22376:     break;
22377: 
22378:   case 899:
22379: #line 2618 "third_party/libpg_query/grammar/statements/select.y"
22380:     { (yyval.list) = NIL; ;}
22381:     break;
22382: 
22383:   case 900:
22384: #line 2622 "third_party/libpg_query/grammar/statements/select.y"
22385:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].windef)); ;}
22386:     break;
22387: 
22388:   case 901:
22389: #line 2624 "third_party/libpg_query/grammar/statements/select.y"
22390:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].windef)); ;}
22391:     break;
22392: 
22393:   case 902:
22394: #line 2629 "third_party/libpg_query/grammar/statements/select.y"
22395:     {
22396: 					PGWindowDef *n = (yyvsp[(3) - (3)].windef);
22397: 					n->name = (yyvsp[(1) - (3)].str);
22398: 					(yyval.windef) = n;
22399: 				;}
22400:     break;
22401: 
22402:   case 903:
22403: #line 2637 "third_party/libpg_query/grammar/statements/select.y"
22404:     { (yyval.windef) = (yyvsp[(2) - (2)].windef); ;}
22405:     break;
22406: 
22407:   case 904:
22408: #line 2639 "third_party/libpg_query/grammar/statements/select.y"
22409:     {
22410: 					PGWindowDef *n = makeNode(PGWindowDef);
22411: 					n->name = (yyvsp[(2) - (2)].str);
22412: 					n->refname = NULL;
22413: 					n->partitionClause = NIL;
22414: 					n->orderClause = NIL;
22415: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
22416: 					n->startOffset = NULL;
22417: 					n->endOffset = NULL;
22418: 					n->location = (yylsp[(2) - (2)]);
22419: 					(yyval.windef) = n;
22420: 				;}
22421:     break;
22422: 
22423:   case 905:
22424: #line 2652 "third_party/libpg_query/grammar/statements/select.y"
22425:     { (yyval.windef) = NULL; ;}
22426:     break;
22427: 
22428:   case 906:
22429: #line 2657 "third_party/libpg_query/grammar/statements/select.y"
22430:     {
22431: 					PGWindowDef *n = makeNode(PGWindowDef);
22432: 					n->name = NULL;
22433: 					n->refname = (yyvsp[(2) - (6)].str);
22434: 					n->partitionClause = (yyvsp[(3) - (6)].list);
22435: 					n->orderClause = (yyvsp[(4) - (6)].list);
22436: 					/* copy relevant fields of opt_frame_clause */
22437: 					n->frameOptions = (yyvsp[(5) - (6)].windef)->frameOptions;
22438: 					n->startOffset = (yyvsp[(5) - (6)].windef)->startOffset;
22439: 					n->endOffset = (yyvsp[(5) - (6)].windef)->endOffset;
22440: 					n->location = (yylsp[(1) - (6)]);
22441: 					(yyval.windef) = n;
22442: 				;}
22443:     break;
22444: 
22445:   case 907:
22446: #line 2682 "third_party/libpg_query/grammar/statements/select.y"
22447:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22448:     break;
22449: 
22450:   case 908:
22451: #line 2683 "third_party/libpg_query/grammar/statements/select.y"
22452:     { (yyval.str) = NULL; ;}
22453:     break;
22454: 
22455:   case 909:
22456: #line 2686 "third_party/libpg_query/grammar/statements/select.y"
22457:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
22458:     break;
22459: 
22460:   case 910:
22461: #line 2687 "third_party/libpg_query/grammar/statements/select.y"
22462:     { (yyval.list) = NIL; ;}
22463:     break;
22464: 
22465:   case 911:
22466: #line 2699 "third_party/libpg_query/grammar/statements/select.y"
22467:     {
22468: 					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
22469: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
22470: 					(yyval.windef) = n;
22471: 				;}
22472:     break;
22473: 
22474:   case 912:
22475: #line 2705 "third_party/libpg_query/grammar/statements/select.y"
22476:     {
22477: 					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
22478: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
22479: 					(yyval.windef) = n;
22480: 				;}
22481:     break;
22482: 
22483:   case 913:
22484: #line 2711 "third_party/libpg_query/grammar/statements/select.y"
22485:     {
22486: 					PGWindowDef *n = makeNode(PGWindowDef);
22487: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
22488: 					n->startOffset = NULL;
22489: 					n->endOffset = NULL;
22490: 					(yyval.windef) = n;
22491: 				;}
22492:     break;
22493: 
22494:   case 914:
22495: #line 2721 "third_party/libpg_query/grammar/statements/select.y"
22496:     {
22497: 					PGWindowDef *n = (yyvsp[(1) - (1)].windef);
22498: 					/* reject invalid cases */
22499: 					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
22500: 						ereport(ERROR,
22501: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22502: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
22503: 								 parser_errposition((yylsp[(1) - (1)]))));
22504: 					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
22505: 						ereport(ERROR,
22506: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22507: 								 errmsg("frame starting from following row cannot end with current row"),
22508: 								 parser_errposition((yylsp[(1) - (1)]))));
22509: 					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
22510: 					(yyval.windef) = n;
22511: 				;}
22512:     break;
22513: 
22514:   case 915:
22515: #line 2738 "third_party/libpg_query/grammar/statements/select.y"
22516:     {
22517: 					PGWindowDef *n1 = (yyvsp[(2) - (4)].windef);
22518: 					PGWindowDef *n2 = (yyvsp[(4) - (4)].windef);
22519: 					/* form merged options */
22520: 					int		frameOptions = n1->frameOptions;
22521: 					/* shift converts START_ options to END_ options */
22522: 					frameOptions |= n2->frameOptions << 1;
22523: 					frameOptions |= FRAMEOPTION_BETWEEN;
22524: 					/* reject invalid cases */
22525: 					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
22526: 						ereport(ERROR,
22527: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22528: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
22529: 								 parser_errposition((yylsp[(2) - (4)]))));
22530: 					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
22531: 						ereport(ERROR,
22532: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22533: 								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
22534: 								 parser_errposition((yylsp[(4) - (4)]))));
22535: 					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
22536: 						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
22537: 						ereport(ERROR,
22538: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22539: 								 errmsg("frame starting from current row cannot have preceding rows"),
22540: 								 parser_errposition((yylsp[(4) - (4)]))));
22541: 					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
22542: 						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
22543: 										 FRAMEOPTION_END_CURRENT_ROW)))
22544: 						ereport(ERROR,
22545: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22546: 								 errmsg("frame starting from following row cannot have preceding rows"),
22547: 								 parser_errposition((yylsp[(4) - (4)]))));
22548: 					n1->frameOptions = frameOptions;
22549: 					n1->endOffset = n2->startOffset;
22550: 					(yyval.windef) = n1;
22551: 				;}
22552:     break;
22553: 
22554:   case 916:
22555: #line 2783 "third_party/libpg_query/grammar/statements/select.y"
22556:     {
22557: 					PGWindowDef *n = makeNode(PGWindowDef);
22558: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
22559: 					n->startOffset = NULL;
22560: 					n->endOffset = NULL;
22561: 					(yyval.windef) = n;
22562: 				;}
22563:     break;
22564: 
22565:   case 917:
22566: #line 2791 "third_party/libpg_query/grammar/statements/select.y"
22567:     {
22568: 					PGWindowDef *n = makeNode(PGWindowDef);
22569: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
22570: 					n->startOffset = NULL;
22571: 					n->endOffset = NULL;
22572: 					(yyval.windef) = n;
22573: 				;}
22574:     break;
22575: 
22576:   case 918:
22577: #line 2799 "third_party/libpg_query/grammar/statements/select.y"
22578:     {
22579: 					PGWindowDef *n = makeNode(PGWindowDef);
22580: 					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
22581: 					n->startOffset = NULL;
22582: 					n->endOffset = NULL;
22583: 					(yyval.windef) = n;
22584: 				;}
22585:     break;
22586: 
22587:   case 919:
22588: #line 2807 "third_party/libpg_query/grammar/statements/select.y"
22589:     {
22590: 					PGWindowDef *n = makeNode(PGWindowDef);
22591: 					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
22592: 					n->startOffset = (yyvsp[(1) - (2)].node);
22593: 					n->endOffset = NULL;
22594: 					(yyval.windef) = n;
22595: 				;}
22596:     break;
22597: 
22598:   case 920:
22599: #line 2815 "third_party/libpg_query/grammar/statements/select.y"
22600:     {
22601: 					PGWindowDef *n = makeNode(PGWindowDef);
22602: 					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
22603: 					n->startOffset = (yyvsp[(1) - (2)].node);
22604: 					n->endOffset = NULL;
22605: 					(yyval.windef) = n;
22606: 				;}
22607:     break;
22608: 
22609:   case 921:
22610: #line 2835 "third_party/libpg_query/grammar/statements/select.y"
22611:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22612:     break;
22613: 
22614:   case 922:
22615: #line 2836 "third_party/libpg_query/grammar/statements/select.y"
22616:     { (yyval.list) = NIL; ;}
22617:     break;
22618: 
22619:   case 923:
22620: #line 2839 "third_party/libpg_query/grammar/statements/select.y"
22621:     { (yyval.list) = (yyvsp[(1) - (1)].list);;}
22622:     break;
22623: 
22624:   case 924:
22625: #line 2840 "third_party/libpg_query/grammar/statements/select.y"
22626:     { (yyval.list) = lappend((yyvsp[(2) - (5)].list), (yyvsp[(4) - (5)].node)); ;}
22627:     break;
22628: 
22629:   case 925:
22630: #line 2844 "third_party/libpg_query/grammar/statements/select.y"
22631:     {
22632: 		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
22633: 		na->name = (yyvsp[(1) - (3)].str);
22634: 		na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
22635: 		na->argnumber = -1;
22636: 		na->location = (yylsp[(1) - (3)]);
22637: 		(yyval.node) = (PGNode *) na;
22638: 	;}
22639:     break;
22640: 
22641:   case 926:
22642: #line 2854 "third_party/libpg_query/grammar/statements/select.y"
22643:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
22644:     break;
22645: 
22646:   case 927:
22647: #line 2855 "third_party/libpg_query/grammar/statements/select.y"
22648:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
22649:     break;
22650: 
22651:   case 928:
22652: #line 2857 "third_party/libpg_query/grammar/statements/select.y"
22653:     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
22654:     break;
22655: 
22656:   case 929:
22657: #line 2858 "third_party/libpg_query/grammar/statements/select.y"
22658:     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
22659:     break;
22660: 
22661:   case 930:
22662: #line 2859 "third_party/libpg_query/grammar/statements/select.y"
22663:     { (yyval.subquerytype) = PG_ALL_SUBLINK; ;}
22664:     break;
22665: 
22666:   case 931:
22667: #line 2862 "third_party/libpg_query/grammar/statements/select.y"
22668:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22669:     break;
22670: 
22671:   case 932:
22672: #line 2863 "third_party/libpg_query/grammar/statements/select.y"
22673:     { (yyval.str) = (char*) (yyvsp[(1) - (1)].conststr); ;}
22674:     break;
22675: 
22676:   case 933:
22677: #line 2866 "third_party/libpg_query/grammar/statements/select.y"
22678:     { (yyval.conststr) = "+"; ;}
22679:     break;
22680: 
22681:   case 934:
22682: #line 2867 "third_party/libpg_query/grammar/statements/select.y"
22683:     { (yyval.conststr) = "-"; ;}
22684:     break;
22685: 
22686:   case 935:
22687: #line 2868 "third_party/libpg_query/grammar/statements/select.y"
22688:     { (yyval.conststr) = "*"; ;}
22689:     break;
22690: 
22691:   case 936:
22692: #line 2869 "third_party/libpg_query/grammar/statements/select.y"
22693:     { (yyval.conststr) = "/"; ;}
22694:     break;
22695: 
22696:   case 937:
22697: #line 2870 "third_party/libpg_query/grammar/statements/select.y"
22698:     { (yyval.conststr) = "%"; ;}
22699:     break;
22700: 
22701:   case 938:
22702: #line 2871 "third_party/libpg_query/grammar/statements/select.y"
22703:     { (yyval.conststr) = "^"; ;}
22704:     break;
22705: 
22706:   case 939:
22707: #line 2872 "third_party/libpg_query/grammar/statements/select.y"
22708:     { (yyval.conststr) = "<"; ;}
22709:     break;
22710: 
22711:   case 940:
22712: #line 2873 "third_party/libpg_query/grammar/statements/select.y"
22713:     { (yyval.conststr) = ">"; ;}
22714:     break;
22715: 
22716:   case 941:
22717: #line 2874 "third_party/libpg_query/grammar/statements/select.y"
22718:     { (yyval.conststr) = "="; ;}
22719:     break;
22720: 
22721:   case 942:
22722: #line 2875 "third_party/libpg_query/grammar/statements/select.y"
22723:     { (yyval.conststr) = "<="; ;}
22724:     break;
22725: 
22726:   case 943:
22727: #line 2876 "third_party/libpg_query/grammar/statements/select.y"
22728:     { (yyval.conststr) = ">="; ;}
22729:     break;
22730: 
22731:   case 944:
22732: #line 2877 "third_party/libpg_query/grammar/statements/select.y"
22733:     { (yyval.conststr) = "<>"; ;}
22734:     break;
22735: 
22736:   case 945:
22737: #line 2881 "third_party/libpg_query/grammar/statements/select.y"
22738:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22739:     break;
22740: 
22741:   case 946:
22742: #line 2883 "third_party/libpg_query/grammar/statements/select.y"
22743:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22744:     break;
22745: 
22746:   case 947:
22747: #line 2888 "third_party/libpg_query/grammar/statements/select.y"
22748:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22749:     break;
22750: 
22751:   case 948:
22752: #line 2890 "third_party/libpg_query/grammar/statements/select.y"
22753:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22754:     break;
22755: 
22756:   case 949:
22757: #line 2895 "third_party/libpg_query/grammar/statements/select.y"
22758:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22759:     break;
22760: 
22761:   case 950:
22762: #line 2897 "third_party/libpg_query/grammar/statements/select.y"
22763:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22764:     break;
22765: 
22766:   case 951:
22767: #line 2899 "third_party/libpg_query/grammar/statements/select.y"
22768:     { (yyval.list) = list_make1(makeString("~~")); ;}
22769:     break;
22770: 
22771:   case 952:
22772: #line 2901 "third_party/libpg_query/grammar/statements/select.y"
22773:     { (yyval.list) = list_make1(makeString("!~~")); ;}
22774:     break;
22775: 
22776:   case 953:
22777: #line 2903 "third_party/libpg_query/grammar/statements/select.y"
22778:     { (yyval.list) = list_make1(makeString("~~~")); ;}
22779:     break;
22780: 
22781:   case 954:
22782: #line 2905 "third_party/libpg_query/grammar/statements/select.y"
22783:     { (yyval.list) = list_make1(makeString("!~~~")); ;}
22784:     break;
22785: 
22786:   case 955:
22787: #line 2907 "third_party/libpg_query/grammar/statements/select.y"
22788:     { (yyval.list) = list_make1(makeString("~~*")); ;}
22789:     break;
22790: 
22791:   case 956:
22792: #line 2909 "third_party/libpg_query/grammar/statements/select.y"
22793:     { (yyval.list) = list_make1(makeString("!~~*")); ;}
22794:     break;
22795: 
22796:   case 957:
22797: #line 2923 "third_party/libpg_query/grammar/statements/select.y"
22798:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22799:     break;
22800: 
22801:   case 958:
22802: #line 2925 "third_party/libpg_query/grammar/statements/select.y"
22803:     { (yyval.list) = lcons(makeString((yyvsp[(1) - (3)].str)), (yyvsp[(3) - (3)].list)); ;}
22804:     break;
22805: 
22806:   case 959:
22807: #line 2929 "third_party/libpg_query/grammar/statements/select.y"
22808:     {
22809: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
22810: 				;}
22811:     break;
22812: 
22813:   case 960:
22814: #line 2933 "third_party/libpg_query/grammar/statements/select.y"
22815:     {
22816: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
22817: 				;}
22818:     break;
22819: 
22820:   case 961:
22821: #line 2940 "third_party/libpg_query/grammar/statements/select.y"
22822:     {
22823: 					(yyval.list) = (yyvsp[(1) - (1)].list);
22824: 				;}
22825:     break;
22826: 
22827:   case 962:
22828: #line 2944 "third_party/libpg_query/grammar/statements/select.y"
22829:     {
22830: 					(yyval.list) = NULL;
22831: 				;}
22832:     break;
22833: 
22834:   case 963:
22835: #line 2952 "third_party/libpg_query/grammar/statements/select.y"
22836:     {
22837: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
22838: 				;}
22839:     break;
22840: 
22841:   case 964:
22842: #line 2956 "third_party/libpg_query/grammar/statements/select.y"
22843:     {
22844: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
22845: 				;}
22846:     break;
22847: 
22848:   case 965:
22849: #line 2962 "third_party/libpg_query/grammar/statements/select.y"
22850:     {
22851: 					(yyval.node) = (yyvsp[(1) - (1)].node);
22852: 				;}
22853:     break;
22854: 
22855:   case 966:
22856: #line 2966 "third_party/libpg_query/grammar/statements/select.y"
22857:     {
22858: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
22859: 					na->name = (yyvsp[(1) - (3)].str);
22860: 					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
22861: 					na->argnumber = -1;		/* until determined */
22862: 					na->location = (yylsp[(1) - (3)]);
22863: 					(yyval.node) = (PGNode *) na;
22864: 				;}
22865:     break;
22866: 
22867:   case 967:
22868: #line 2975 "third_party/libpg_query/grammar/statements/select.y"
22869:     {
22870: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
22871: 					na->name = (yyvsp[(1) - (3)].str);
22872: 					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
22873: 					na->argnumber = -1;		/* until determined */
22874: 					na->location = (yylsp[(1) - (3)]);
22875: 					(yyval.node) = (PGNode *) na;
22876: 				;}
22877:     break;
22878: 
22879:   case 968:
22880: #line 2985 "third_party/libpg_query/grammar/statements/select.y"
22881:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
22882:     break;
22883: 
22884:   case 969:
22885: #line 2986 "third_party/libpg_query/grammar/statements/select.y"
22886:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
22887:     break;
22888: 
22889:   case 970:
22890: #line 2991 "third_party/libpg_query/grammar/statements/select.y"
22891:     {
22892: 					(yyval.list) = list_make2(makeStringConst((yyvsp[(1) - (3)].str), (yylsp[(1) - (3)])), (yyvsp[(3) - (3)].node));
22893: 				;}
22894:     break;
22895: 
22896:   case 971:
22897: #line 2994 "third_party/libpg_query/grammar/statements/select.y"
22898:     { (yyval.list) = NIL; ;}
22899:     break;
22900: 
22901:   case 972:
22902: #line 3001 "third_party/libpg_query/grammar/statements/select.y"
22903:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22904:     break;
22905: 
22906:   case 973:
22907: #line 3002 "third_party/libpg_query/grammar/statements/select.y"
22908:     { (yyval.str) = (char*) "year"; ;}
22909:     break;
22910: 
22911:   case 974:
22912: #line 3003 "third_party/libpg_query/grammar/statements/select.y"
22913:     { (yyval.str) = (char*) "month"; ;}
22914:     break;
22915: 
22916:   case 975:
22917: #line 3004 "third_party/libpg_query/grammar/statements/select.y"
22918:     { (yyval.str) = (char*) "day"; ;}
22919:     break;
22920: 
22921:   case 976:
22922: #line 3005 "third_party/libpg_query/grammar/statements/select.y"
22923:     { (yyval.str) = (char*) "hour"; ;}
22924:     break;
22925: 
22926:   case 977:
22927: #line 3006 "third_party/libpg_query/grammar/statements/select.y"
22928:     { (yyval.str) = (char*) "minute"; ;}
22929:     break;
22930: 
22931:   case 978:
22932: #line 3007 "third_party/libpg_query/grammar/statements/select.y"
22933:     { (yyval.str) = (char*) "second"; ;}
22934:     break;
22935: 
22936:   case 979:
22937: #line 3008 "third_party/libpg_query/grammar/statements/select.y"
22938:     { (yyval.str) = (char*) "millisecond"; ;}
22939:     break;
22940: 
22941:   case 980:
22942: #line 3009 "third_party/libpg_query/grammar/statements/select.y"
22943:     { (yyval.str) = (char*) "microsecond"; ;}
22944:     break;
22945: 
22946:   case 981:
22947: #line 3010 "third_party/libpg_query/grammar/statements/select.y"
22948:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22949:     break;
22950: 
22951:   case 982:
22952: #line 3021 "third_party/libpg_query/grammar/statements/select.y"
22953:     {
22954: 					(yyval.list) = list_make4((yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node));
22955: 				;}
22956:     break;
22957: 
22958:   case 983:
22959: #line 3025 "third_party/libpg_query/grammar/statements/select.y"
22960:     {
22961: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
22962: 				;}
22963:     break;
22964: 
22965:   case 984:
22966: #line 3032 "third_party/libpg_query/grammar/statements/select.y"
22967:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
22968:     break;
22969: 
22970:   case 985:
22971: #line 3038 "third_party/libpg_query/grammar/statements/select.y"
22972:     { (yyval.list) = list_make2((yyvsp[(3) - (3)].node), (yyvsp[(1) - (3)].node)); ;}
22973:     break;
22974: 
22975:   case 986:
22976: #line 3039 "third_party/libpg_query/grammar/statements/select.y"
22977:     { (yyval.list) = NIL; ;}
22978:     break;
22979: 
22980:   case 987:
22981: #line 3056 "third_party/libpg_query/grammar/statements/select.y"
22982:     {
22983: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
22984: 				;}
22985:     break;
22986: 
22987:   case 988:
22988: #line 3060 "third_party/libpg_query/grammar/statements/select.y"
22989:     {
22990: 					/* not legal per SQL99, but might as well allow it */
22991: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyvsp[(2) - (3)].node));
22992: 				;}
22993:     break;
22994: 
22995:   case 989:
22996: #line 3065 "third_party/libpg_query/grammar/statements/select.y"
22997:     {
22998: 					(yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));
22999: 				;}
23000:     break;
23001: 
23002:   case 990:
23003: #line 3069 "third_party/libpg_query/grammar/statements/select.y"
23004:     {
23005: 					/*
23006: 					 * Since there are no cases where this syntax allows
23007: 					 * a textual FOR value, we forcibly cast the argument
23008: 					 * to int4.  The possible matches in pg_proc are
23009: 					 * substring(text,int4) and substring(text,text),
23010: 					 * and we don't want the parser to choose the latter,
23011: 					 * which it is likely to do if the second argument
23012: 					 * is unknown or doesn't have an implicit cast to int4.
23013: 					 */
23014: 					(yyval.list) = list_make3((yyvsp[(1) - (2)].node), makeIntConst(1, -1),
23015: 									makeTypeCast((yyvsp[(2) - (2)].node),
23016: 												 SystemTypeName("int4"), 0, -1));
23017: 				;}
23018:     break;
23019: 
23020:   case 991:
23021: #line 3084 "third_party/libpg_query/grammar/statements/select.y"
23022:     {
23023: 					(yyval.list) = (yyvsp[(1) - (1)].list);
23024: 				;}
23025:     break;
23026: 
23027:   case 992:
23028: #line 3088 "third_party/libpg_query/grammar/statements/select.y"
23029:     { (yyval.list) = NIL; ;}
23030:     break;
23031: 
23032:   case 993:
23033: #line 3092 "third_party/libpg_query/grammar/statements/select.y"
23034:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
23035:     break;
23036: 
23037:   case 994:
23038: #line 3095 "third_party/libpg_query/grammar/statements/select.y"
23039:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
23040:     break;
23041: 
23042:   case 995:
23043: #line 3098 "third_party/libpg_query/grammar/statements/select.y"
23044:     { (yyval.list) = lappend((yyvsp[(3) - (3)].list), (yyvsp[(1) - (3)].node)); ;}
23045:     break;
23046: 
23047:   case 996:
23048: #line 3099 "third_party/libpg_query/grammar/statements/select.y"
23049:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
23050:     break;
23051: 
23052:   case 997:
23053: #line 3100 "third_party/libpg_query/grammar/statements/select.y"
23054:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
23055:     break;
23056: 
23057:   case 998:
23058: #line 3104 "third_party/libpg_query/grammar/statements/select.y"
23059:     {
23060: 					PGSubLink *n = makeNode(PGSubLink);
23061: 					n->subselect = (yyvsp[(1) - (1)].node);
23062: 					/* other fields will be filled later */
23063: 					(yyval.node) = (PGNode *)n;
23064: 				;}
23065:     break;
23066: 
23067:   case 999:
23068: #line 3110 "third_party/libpg_query/grammar/statements/select.y"
23069:     { (yyval.node) = (PGNode *)(yyvsp[(2) - (3)].list); ;}
23070:     break;
23071: 
23072:   case 1000:
23073: #line 3121 "third_party/libpg_query/grammar/statements/select.y"
23074:     {
23075: 					PGCaseExpr *c = makeNode(PGCaseExpr);
23076: 					c->casetype = InvalidOid; /* not analyzed yet */
23077: 					c->arg = (PGExpr *) (yyvsp[(2) - (5)].node);
23078: 					c->args = (yyvsp[(3) - (5)].list);
23079: 					c->defresult = (PGExpr *) (yyvsp[(4) - (5)].node);
23080: 					c->location = (yylsp[(1) - (5)]);
23081: 					(yyval.node) = (PGNode *)c;
23082: 				;}
23083:     break;
23084: 
23085:   case 1001:
23086: #line 3134 "third_party/libpg_query/grammar/statements/select.y"
23087:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
23088:     break;
23089: 
23090:   case 1002:
23091: #line 3135 "third_party/libpg_query/grammar/statements/select.y"
23092:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
23093:     break;
23094: 
23095:   case 1003:
23096: #line 3140 "third_party/libpg_query/grammar/statements/select.y"
23097:     {
23098: 					PGCaseWhen *w = makeNode(PGCaseWhen);
23099: 					w->expr = (PGExpr *) (yyvsp[(2) - (4)].node);
23100: 					w->result = (PGExpr *) (yyvsp[(4) - (4)].node);
23101: 					w->location = (yylsp[(1) - (4)]);
23102: 					(yyval.node) = (PGNode *)w;
23103: 				;}
23104:     break;
23105: 
23106:   case 1004:
23107: #line 3150 "third_party/libpg_query/grammar/statements/select.y"
23108:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
23109:     break;
23110: 
23111:   case 1005:
23112: #line 3151 "third_party/libpg_query/grammar/statements/select.y"
23113:     { (yyval.node) = NULL; ;}
23114:     break;
23115: 
23116:   case 1006:
23117: #line 3154 "third_party/libpg_query/grammar/statements/select.y"
23118:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
23119:     break;
23120: 
23121:   case 1007:
23122: #line 3155 "third_party/libpg_query/grammar/statements/select.y"
23123:     { (yyval.node) = NULL; ;}
23124:     break;
23125: 
23126:   case 1008:
23127: #line 3159 "third_party/libpg_query/grammar/statements/select.y"
23128:     {
23129: 					(yyval.node) = makeColumnRef((yyvsp[(1) - (1)].str), NIL, (yylsp[(1) - (1)]), yyscanner);
23130: 				;}
23131:     break;
23132: 
23133:   case 1009:
23134: #line 3163 "third_party/libpg_query/grammar/statements/select.y"
23135:     {
23136: 					(yyval.node) = makeColumnRef((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].list), (yylsp[(1) - (2)]), yyscanner);
23137: 				;}
23138:     break;
23139: 
23140:   case 1010:
23141: #line 3170 "third_party/libpg_query/grammar/statements/select.y"
23142:     {
23143: 					(yyval.node) = (PGNode *) makeString((yyvsp[(2) - (2)].str));
23144: 				;}
23145:     break;
23146: 
23147:   case 1011:
23148: #line 3174 "third_party/libpg_query/grammar/statements/select.y"
23149:     {
23150: 					PGAIndices *ai = makeNode(PGAIndices);
23151: 					ai->is_slice = false;
23152: 					ai->lidx = NULL;
23153: 					ai->uidx = (yyvsp[(2) - (3)].node);
23154: 					(yyval.node) = (PGNode *) ai;
23155: 				;}
23156:     break;
23157: 
23158:   case 1012:
23159: #line 3182 "third_party/libpg_query/grammar/statements/select.y"
23160:     {
23161: 					PGAIndices *ai = makeNode(PGAIndices);
23162: 					ai->is_slice = true;
23163: 					ai->lidx = (yyvsp[(2) - (5)].node);
23164: 					ai->uidx = (yyvsp[(4) - (5)].node);
23165: 					(yyval.node) = (PGNode *) ai;
23166: 				;}
23167:     break;
23168: 
23169:   case 1013:
23170: #line 3192 "third_party/libpg_query/grammar/statements/select.y"
23171:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
23172:     break;
23173: 
23174:   case 1014:
23175: #line 3193 "third_party/libpg_query/grammar/statements/select.y"
23176:     { (yyval.node) = NULL; ;}
23177:     break;
23178: 
23179:   case 1015:
23180: #line 3197 "third_party/libpg_query/grammar/statements/select.y"
23181:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
23182:     break;
23183: 
23184:   case 1016:
23185: #line 3198 "third_party/libpg_query/grammar/statements/select.y"
23186:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
23187:     break;
23188: 
23189:   case 1017:
23190: #line 3202 "third_party/libpg_query/grammar/statements/select.y"
23191:     { (yyval.list) = NIL; ;}
23192:     break;
23193: 
23194:   case 1018:
23195: #line 3203 "third_party/libpg_query/grammar/statements/select.y"
23196:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
23197:     break;
23198: 
23199:   case 1021:
23200: #line 3217 "third_party/libpg_query/grammar/statements/select.y"
23201:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
23202:     break;
23203: 
23204:   case 1022:
23205: #line 3218 "third_party/libpg_query/grammar/statements/select.y"
23206:     { (yyval.list) = NIL; ;}
23207:     break;
23208: 
23209:   case 1023:
23210: #line 3222 "third_party/libpg_query/grammar/statements/select.y"
23211:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
23212:     break;
23213: 
23214:   case 1024:
23215: #line 3223 "third_party/libpg_query/grammar/statements/select.y"
23216:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
23217:     break;
23218: 
23219:   case 1025:
23220: #line 3227 "third_party/libpg_query/grammar/statements/select.y"
23221:     {
23222: 					(yyval.target) = makeNode(PGResTarget);
23223: 					(yyval.target)->name = (yyvsp[(3) - (3)].str);
23224: 					(yyval.target)->indirection = NIL;
23225: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (3)].node);
23226: 					(yyval.target)->location = (yylsp[(1) - (3)]);
23227: 				;}
23228:     break;
23229: 
23230:   case 1026:
23231: #line 3243 "third_party/libpg_query/grammar/statements/select.y"
23232:     {
23233: 					(yyval.target) = makeNode(PGResTarget);
23234: 					(yyval.target)->name = (yyvsp[(2) - (2)].str);
23235: 					(yyval.target)->indirection = NIL;
23236: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (2)].node);
23237: 					(yyval.target)->location = (yylsp[(1) - (2)]);
23238: 				;}
23239:     break;
23240: 
23241:   case 1027:
23242: #line 3251 "third_party/libpg_query/grammar/statements/select.y"
23243:     {
23244: 					(yyval.target) = makeNode(PGResTarget);
23245: 					(yyval.target)->name = NULL;
23246: 					(yyval.target)->indirection = NIL;
23247: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (1)].node);
23248: 					(yyval.target)->location = (yylsp[(1) - (1)]);
23249: 				;}
23250:     break;
23251: 
23252:   case 1028:
23253: #line 3259 "third_party/libpg_query/grammar/statements/select.y"
23254:     {
23255: 					PGColumnRef *n = makeNode(PGColumnRef);
23256: 					PGAStar *star = makeNode(PGAStar);
23257: 					n->fields = list_make1(star);
23258: 					n->location = (yylsp[(1) - (3)]);
23259: 					star->except_list = (yyvsp[(2) - (3)].list);
23260: 					star->replace_list = (yyvsp[(3) - (3)].list);
23261: 
23262: 					(yyval.target) = makeNode(PGResTarget);
23263: 					(yyval.target)->name = NULL;
23264: 					(yyval.target)->indirection = NIL;
23265: 					(yyval.target)->val = (PGNode *)n;
23266: 					(yyval.target)->location = (yylsp[(1) - (3)]);
23267: 				;}
23268:     break;
23269: 
23270:   case 1029:
23271: #line 3274 "third_party/libpg_query/grammar/statements/select.y"
23272:     {
23273: 					PGColumnRef *n = makeNode(PGColumnRef);
23274: 					PGAStar *star = makeNode(PGAStar);
23275: 					n->fields = list_make1(star);
23276: 					n->location = (yylsp[(1) - (5)]);
23277: 					star->relation = (yyvsp[(1) - (5)].str);
23278: 					star->except_list = (yyvsp[(4) - (5)].list);
23279: 					star->replace_list = (yyvsp[(5) - (5)].list);
23280: 
23281: 					(yyval.target) = makeNode(PGResTarget);
23282: 					(yyval.target)->name = NULL;
23283: 					(yyval.target)->indirection = NIL;
23284: 					(yyval.target)->val = (PGNode *)n;
23285: 					(yyval.target)->location = (yylsp[(1) - (5)]);
23286: 				;}
23287:     break;
23288: 
23289:   case 1030:
23290: #line 3291 "third_party/libpg_query/grammar/statements/select.y"
23291:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
23292:     break;
23293: 
23294:   case 1031:
23295: #line 3292 "third_party/libpg_query/grammar/statements/select.y"
23296:     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
23297:     break;
23298: 
23299:   case 1032:
23300: #line 3295 "third_party/libpg_query/grammar/statements/select.y"
23301:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
23302:     break;
23303: 
23304:   case 1033:
23305: #line 3296 "third_party/libpg_query/grammar/statements/select.y"
23306:     { (yyval.list) = NULL; ;}
23307:     break;
23308: 
23309:   case 1034:
23310: #line 3299 "third_party/libpg_query/grammar/statements/select.y"
23311:     { (yyval.list) = list_make2((yyvsp[(1) - (3)].node), makeString((yyvsp[(3) - (3)].str))); ;}
23312:     break;
23313: 
23314:   case 1035:
23315: #line 3303 "third_party/libpg_query/grammar/statements/select.y"
23316:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
23317:     break;
23318: 
23319:   case 1036:
23320: #line 3304 "third_party/libpg_query/grammar/statements/select.y"
23321:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
23322:     break;
23323: 
23324:   case 1037:
23325: #line 3307 "third_party/libpg_query/grammar/statements/select.y"
23326:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
23327:     break;
23328: 
23329:   case 1038:
23330: #line 3308 "third_party/libpg_query/grammar/statements/select.y"
23331:     { (yyval.list) = list_make1((yyvsp[(2) - (2)].list)); ;}
23332:     break;
23333: 
23334:   case 1039:
23335: #line 3309 "third_party/libpg_query/grammar/statements/select.y"
23336:     { (yyval.list) = NULL; ;}
23337:     break;
23338: 
23339:   case 1040:
23340: #line 3319 "third_party/libpg_query/grammar/statements/select.y"
23341:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].range)); ;}
23342:     break;
23343: 
23344:   case 1041:
23345: #line 3320 "third_party/libpg_query/grammar/statements/select.y"
23346:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].range)); ;}
23347:     break;
23348: 
23349:   case 1042:
23350: #line 3332 "third_party/libpg_query/grammar/statements/select.y"
23351:     {
23352: 					(yyval.range) = makeRangeVar(NULL, (yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23353: 				;}
23354:     break;
23355: 
23356:   case 1043:
23357: #line 3336 "third_party/libpg_query/grammar/statements/select.y"
23358:     {
23359: 					check_qualified_name((yyvsp[(2) - (2)].list), yyscanner);
23360: 					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[(1) - (2)]));
23361: 					switch (list_length((yyvsp[(2) - (2)].list)))
23362: 					{
23363: 						case 1:
23364: 							(yyval.range)->catalogname = NULL;
23365: 							(yyval.range)->schemaname = (yyvsp[(1) - (2)].str);
23366: 							(yyval.range)->relname = strVal(linitial((yyvsp[(2) - (2)].list)));
23367: 							break;
23368: 						case 2:
23369: 							(yyval.range)->catalogname = (yyvsp[(1) - (2)].str);
23370: 							(yyval.range)->schemaname = strVal(linitial((yyvsp[(2) - (2)].list)));
23371: 							(yyval.range)->relname = strVal(lsecond((yyvsp[(2) - (2)].list)));
23372: 							break;
23373: 						default:
23374: 							ereport(ERROR,
23375: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
23376: 									 errmsg("improper qualified name (too many dotted names): %s",
23377: 											NameListToString(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)))),
23378: 									 parser_errposition((yylsp[(1) - (2)]))));
23379: 							break;
23380: 					}
23381: 				;}
23382:     break;
23383: 
23384:   case 1044:
23385: #line 3363 "third_party/libpg_query/grammar/statements/select.y"
23386:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
23387:     break;
23388: 
23389:   case 1045:
23390: #line 3365 "third_party/libpg_query/grammar/statements/select.y"
23391:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
23392:     break;
23393: 
23394:   case 1046:
23395: #line 3369 "third_party/libpg_query/grammar/statements/select.y"
23396:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23397:     break;
23398: 
23399:   case 1047:
23400: #line 3371 "third_party/libpg_query/grammar/statements/select.y"
23401:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23402:     break;
23403: 
23404:   case 1048:
23405: #line 3382 "third_party/libpg_query/grammar/statements/select.y"
23406:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
23407:     break;
23408: 
23409:   case 1049:
23410: #line 3385 "third_party/libpg_query/grammar/statements/select.y"
23411:     {
23412: 						(yyval.list) = check_func_name(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)),
23413: 											 yyscanner);
23414: 					;}
23415:     break;
23416: 
23417:   case 1050:
23418: #line 3396 "third_party/libpg_query/grammar/statements/select.y"
23419:     {
23420: 					(yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival), (yylsp[(1) - (1)]));
23421: 				;}
23422:     break;
23423: 
23424:   case 1051:
23425: #line 3400 "third_party/libpg_query/grammar/statements/select.y"
23426:     {
23427: 					(yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23428: 				;}
23429:     break;
23430: 
23431:   case 1052:
23432: #line 3404 "third_party/libpg_query/grammar/statements/select.y"
23433:     {
23434: 					if ((yyvsp[(2) - (2)].list))
23435: 					{
23436: 						PGAIndirection *n = makeNode(PGAIndirection);
23437: 						n->arg = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
23438: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
23439: 						(yyval.node) = (PGNode *) n;
23440: 					}
23441: 					else
23442: 						(yyval.node) = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
23443: 				;}
23444:     break;
23445: 
23446:   case 1053:
23447: #line 3416 "third_party/libpg_query/grammar/statements/select.y"
23448:     {
23449: 					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23450: 				;}
23451:     break;
23452: 
23453:   case 1054:
23454: #line 3420 "third_party/libpg_query/grammar/statements/select.y"
23455:     {
23456: 					/* This is a bit constant per SQL99:
23457: 					 * Without Feature F511, "BIT data type",
23458: 					 * a <general literal> shall not be a
23459: 					 * <bit string literal> or a <hex string literal>.
23460: 					 */
23461: 					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23462: 				;}
23463:     break;
23464: 
23465:   case 1055:
23466: #line 3429 "third_party/libpg_query/grammar/statements/select.y"
23467:     {
23468: 					/* generic type 'literal' syntax */
23469: 					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (2)].list));
23470: 					t->location = (yylsp[(1) - (2)]);
23471: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), t);
23472: 				;}
23473:     break;
23474: 
23475:   case 1056:
23476: #line 3436 "third_party/libpg_query/grammar/statements/select.y"
23477:     {
23478: 					/* generic syntax with a type modifier */
23479: 					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (7)].list));
23480: 					PGListCell *lc;
23481: 
23482: 					/*
23483: 					 * We must use func_arg_list and opt_sort_clause in the
23484: 					 * production to avoid reduce/reduce conflicts, but we
23485: 					 * don't actually wish to allow PGNamedArgExpr in this
23486: 					 * context, ORDER BY, nor IGNORE NULLS.
23487: 					 */
23488: 					foreach(lc, (yyvsp[(3) - (7)].list))
23489: 					{
23490: 						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);
23491: 
23492: 						if (IsA(arg, PGNamedArgExpr))
23493: 							ereport(ERROR,
23494: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
23495: 									 errmsg("type modifier cannot have parameter name"),
23496: 									 parser_errposition(arg->location)));
23497: 					}
23498: 					if ((yyvsp[(4) - (7)].list) != NIL)
23499: 							ereport(ERROR,
23500: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
23501: 									 errmsg("type modifier cannot have ORDER BY"),
23502: 									 parser_errposition((yylsp[(4) - (7)]))));
23503: 					if ((yyvsp[(5) - (7)].boolean) != false)
23504: 							ereport(ERROR,
23505: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
23506: 									 errmsg("type modifier cannot have IGNORE NULLS"),
23507: 									 parser_errposition((yylsp[(5) - (7)]))));
23508: 
23509: 
23510: 					t->typmods = (yyvsp[(3) - (7)].list);
23511: 					t->location = (yylsp[(1) - (7)]);
23512: 					(yyval.node) = makeStringConstCast((yyvsp[(7) - (7)].str), (yylsp[(7) - (7)]), t);
23513: 				;}
23514:     break;
23515: 
23516:   case 1057:
23517: #line 3474 "third_party/libpg_query/grammar/statements/select.y"
23518:     {
23519: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), (yyvsp[(1) - (2)].typnam));
23520: 				;}
23521:     break;
23522: 
23523:   case 1058:
23524: #line 3478 "third_party/libpg_query/grammar/statements/select.y"
23525:     {
23526: 					(yyval.node) = makeIntervalNode((yyvsp[(3) - (5)].node), (yylsp[(3) - (5)]), (yyvsp[(5) - (5)].list));
23527: 				;}
23528:     break;
23529: 
23530:   case 1059:
23531: #line 3482 "third_party/libpg_query/grammar/statements/select.y"
23532:     {
23533: 					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].ival), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
23534: 				;}
23535:     break;
23536: 
23537:   case 1060:
23538: #line 3486 "third_party/libpg_query/grammar/statements/select.y"
23539:     {
23540: 					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
23541: 				;}
23542:     break;
23543: 
23544:   case 1061:
23545: #line 3490 "third_party/libpg_query/grammar/statements/select.y"
23546:     {
23547: 					(yyval.node) = makeBoolAConst(true, (yylsp[(1) - (1)]));
23548: 				;}
23549:     break;
23550: 
23551:   case 1062:
23552: #line 3494 "third_party/libpg_query/grammar/statements/select.y"
23553:     {
23554: 					(yyval.node) = makeBoolAConst(false, (yylsp[(1) - (1)]));
23555: 				;}
23556:     break;
23557: 
23558:   case 1063:
23559: #line 3498 "third_party/libpg_query/grammar/statements/select.y"
23560:     {
23561: 					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
23562: 				;}
23563:     break;
23564: 
23565:   case 1064:
23566: #line 3503 "third_party/libpg_query/grammar/statements/select.y"
23567:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
23568:     break;
23569: 
23570:   case 1065:
23571: #line 3504 "third_party/libpg_query/grammar/statements/select.y"
23572:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23573:     break;
23574: 
23575:   case 1066:
23576: #line 3520 "third_party/libpg_query/grammar/statements/select.y"
23577:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23578:     break;
23579: 
23580:   case 1067:
23581: #line 3521 "third_party/libpg_query/grammar/statements/select.y"
23582:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23583:     break;
23584: 
23585:   case 1068:
23586: #line 3522 "third_party/libpg_query/grammar/statements/select.y"
23587:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23588:     break;
23589: 
23590:   case 1069:
23591: #line 3525 "third_party/libpg_query/grammar/statements/select.y"
23592:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23593:     break;
23594: 
23595:   case 1070:
23596: #line 3526 "third_party/libpg_query/grammar/statements/select.y"
23597:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23598:     break;
23599: 
23600:   case 1071:
23601: #line 3532 "third_party/libpg_query/grammar/statements/select.y"
23602:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23603:     break;
23604: 
23605:   case 1072:
23606: #line 3533 "third_party/libpg_query/grammar/statements/select.y"
23607:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23608:     break;
23609: 
23610:   case 1073:
23611: #line 3534 "third_party/libpg_query/grammar/statements/select.y"
23612:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23613:     break;
23614: 
23615:   case 1074:
23616: #line 3537 "third_party/libpg_query/grammar/statements/select.y"
23617:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23618:     break;
23619: 
23620:   case 1075:
23621: #line 3538 "third_party/libpg_query/grammar/statements/select.y"
23622:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23623:     break;
23624: 
23625:   case 1076:
23626: #line 3539 "third_party/libpg_query/grammar/statements/select.y"
23627:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23628:     break;
23629: 
23630:   case 1077:
23631: #line 3542 "third_party/libpg_query/grammar/statements/select.y"
23632:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23633:     break;
23634: 
23635:   case 1078:
23636: #line 3543 "third_party/libpg_query/grammar/statements/select.y"
23637:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23638:     break;
23639: 
23640:   case 1079:
23641: #line 3544 "third_party/libpg_query/grammar/statements/select.y"
23642:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23643:     break;
23644: 
23645:   case 1080:
23646: #line 3547 "third_party/libpg_query/grammar/statements/select.y"
23647:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
23648:     break;
23649: 
23650:   case 1081:
23651: #line 3548 "third_party/libpg_query/grammar/statements/select.y"
23652:     { (yyval.list) = lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)); ;}
23653:     break;
23654: 
23655:   case 1082:
23656: #line 3552 "third_party/libpg_query/grammar/statements/select.y"
23657:     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
23658:     break;
23659: 
23660:   case 1083:
23661: #line 3554 "third_party/libpg_query/grammar/statements/select.y"
23662:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
23663:     break;
23664: 
23665:   case 1084:
23666: #line 3558 "third_party/libpg_query/grammar/statements/select.y"
23667:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
23668:     break;
23669: 
23670:   case 1085:
23671: #line 3559 "third_party/libpg_query/grammar/statements/select.y"
23672:     { (yyval.list) = NIL; ;}
23673:     break;
23674: 
23675:   case 1087:
23676: #line 3570 "third_party/libpg_query/grammar/statements/select.y"
23677:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23678:     break;
23679: 
23680:   case 1088:
23681: #line 3571 "third_party/libpg_query/grammar/statements/select.y"
23682:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23683:     break;
23684: 
23685:   case 1089:
23686: #line 3572 "third_party/libpg_query/grammar/statements/select.y"
23687:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23688:     break;
23689: 
23690:   case 1090:
23691: #line 3573 "third_party/libpg_query/grammar/statements/select.y"
23692:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23693:     break;
23694: 
23695:   case 1091:
23696: #line 3576 "third_party/libpg_query/grammar/statements/select.y"
23697:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23698:     break;
23699: 
23700:   case 1092:
23701: #line 3577 "third_party/libpg_query/grammar/statements/select.y"
23702:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23703:     break;
23704: 
23705:   case 1093:
23706: #line 8 "third_party/libpg_query/grammar/statements/prepare.y"
23707:     {
23708: 					PGPrepareStmt *n = makeNode(PGPrepareStmt);
23709: 					n->name = (yyvsp[(2) - (5)].str);
23710: 					n->argtypes = (yyvsp[(3) - (5)].list);
23711: 					n->query = (yyvsp[(5) - (5)].node);
23712: 					(yyval.node) = (PGNode *) n;
23713: 				;}
23714:     break;
23715: 
23716:   case 1094:
23717: #line 18 "third_party/libpg_query/grammar/statements/prepare.y"
23718:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
23719:     break;
23720: 
23721:   case 1095:
23722: #line 19 "third_party/libpg_query/grammar/statements/prepare.y"
23723:     { (yyval.list) = NIL; ;}
23724:     break;
23725: 
23726:   case 1100:
23727: #line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
23728:     {
23729: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
23730: 					/* ...but not both */
23731: 					n->schemaname = (yyvsp[(3) - (4)].str);
23732: 					n->schemaElts = (yyvsp[(4) - (4)].list);
23733: 					n->onconflict = PG_ERROR_ON_CONFLICT;
23734: 					(yyval.node) = (PGNode *)n;
23735: 				;}
23736:     break;
23737: 
23738:   case 1101:
23739: #line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
23740:     {
23741: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
23742: 					/* ...but not here */
23743: 					n->schemaname = (yyvsp[(6) - (7)].str);
23744: 					if ((yyvsp[(7) - (7)].list) != NIL)
23745: 						ereport(ERROR,
23746: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
23747: 								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
23748: 								 parser_errposition((yylsp[(7) - (7)]))));
23749: 					n->schemaElts = (yyvsp[(7) - (7)].list);
23750: 					n->onconflict = PG_IGNORE_ON_CONFLICT;
23751: 					(yyval.node) = (PGNode *)n;
23752: 				;}
23753:     break;
23754: 
23755:   case 1102:
23756: #line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
23757:     {
23758: 					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
23759: 						(yyloc) = (yylsp[(2) - (2)]);
23760: 					(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
23761: 				;}
23762:     break;
23763: 
23764:   case 1103:
23765: #line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
23766:     { (yyval.list) = NIL; ;}
23767:     break;
23768: 
23769:   case 1108:
23770: #line 11 "third_party/libpg_query/grammar/statements/index.y"
23771:     {
23772: 					PGIndexStmt *n = makeNode(PGIndexStmt);
23773: 					n->unique = (yyvsp[(2) - (13)].boolean);
23774: 					n->concurrent = (yyvsp[(4) - (13)].boolean);
23775: 					n->idxname = (yyvsp[(5) - (13)].str);
23776: 					n->relation = (yyvsp[(7) - (13)].range);
23777: 					n->accessMethod = (yyvsp[(8) - (13)].str);
23778: 					n->indexParams = (yyvsp[(10) - (13)].list);
23779: 					n->options = (yyvsp[(12) - (13)].list);
23780: 					n->whereClause = (yyvsp[(13) - (13)].node);
23781: 					n->excludeOpNames = NIL;
23782: 					n->idxcomment = NULL;
23783: 					n->indexOid = InvalidOid;
23784: 					n->oldNode = InvalidOid;
23785: 					n->primary = false;
23786: 					n->isconstraint = false;
23787: 					n->deferrable = false;
23788: 					n->initdeferred = false;
23789: 					n->transformed = false;
23790: 					n->onconflict = PG_ERROR_ON_CONFLICT;
23791: 					(yyval.node) = (PGNode *)n;
23792: 				;}
23793:     break;
23794: 
23795:   case 1109:
23796: #line 36 "third_party/libpg_query/grammar/statements/index.y"
23797:     {
23798: 					PGIndexStmt *n = makeNode(PGIndexStmt);
23799: 					n->unique = (yyvsp[(2) - (16)].boolean);
23800: 					n->concurrent = (yyvsp[(4) - (16)].boolean);
23801: 					n->idxname = (yyvsp[(8) - (16)].str);
23802: 					n->relation = (yyvsp[(10) - (16)].range);
23803: 					n->accessMethod = (yyvsp[(11) - (16)].str);
23804: 					n->indexParams = (yyvsp[(13) - (16)].list);
23805: 					n->options = (yyvsp[(15) - (16)].list);
23806: 					n->whereClause = (yyvsp[(16) - (16)].node);
23807: 					n->excludeOpNames = NIL;
23808: 					n->idxcomment = NULL;
23809: 					n->indexOid = InvalidOid;
23810: 					n->oldNode = InvalidOid;
23811: 					n->primary = false;
23812: 					n->isconstraint = false;
23813: 					n->deferrable = false;
23814: 					n->initdeferred = false;
23815: 					n->transformed = false;
23816: 					n->onconflict = PG_IGNORE_ON_CONFLICT;
23817: 					(yyval.node) = (PGNode *)n;
23818: 				;}
23819:     break;
23820: 
23821:   case 1110:
23822: #line 62 "third_party/libpg_query/grammar/statements/index.y"
23823:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23824:     break;
23825: 
23826:   case 1111:
23827: #line 66 "third_party/libpg_query/grammar/statements/index.y"
23828:     { (yyval.str) = (yyvsp[(2) - (2)].str); ;}
23829:     break;
23830: 
23831:   case 1112:
23832: #line 67 "third_party/libpg_query/grammar/statements/index.y"
23833:     { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; ;}
23834:     break;
23835: 
23836:   case 1113:
23837: #line 72 "third_party/libpg_query/grammar/statements/index.y"
23838:     { (yyval.boolean) = true; ;}
23839:     break;
23840: 
23841:   case 1114:
23842: #line 73 "third_party/libpg_query/grammar/statements/index.y"
23843:     { (yyval.boolean) = false; ;}
23844:     break;
23845: 
23846:   case 1115:
23847: #line 78 "third_party/libpg_query/grammar/statements/index.y"
23848:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23849:     break;
23850: 
23851:   case 1116:
23852: #line 79 "third_party/libpg_query/grammar/statements/index.y"
23853:     { (yyval.str) = NULL; ;}
23854:     break;
23855: 
23856:   case 1117:
23857: #line 83 "third_party/libpg_query/grammar/statements/index.y"
23858:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
23859:     break;
23860: 
23861:   case 1118:
23862: #line 84 "third_party/libpg_query/grammar/statements/index.y"
23863:     { (yyval.list) = NIL; ;}
23864:     break;
23865: 
23866:   case 1119:
23867: #line 89 "third_party/libpg_query/grammar/statements/index.y"
23868:     { (yyval.boolean) = true; ;}
23869:     break;
23870: 
23871:   case 1120:
23872: #line 90 "third_party/libpg_query/grammar/statements/index.y"
23873:     { (yyval.boolean) = false; ;}
23874:     break;
23875: 
23876:   case 1121:
23877: #line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
23878:     {
23879: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23880: 					n->objectType = PG_OBJECT_TABLE;
23881: 					n->relation = (yyvsp[(3) - (6)].range);
23882: 					n->newschema = (yyvsp[(6) - (6)].str);
23883: 					n->missing_ok = false;
23884: 					(yyval.node) = (PGNode *)n;
23885: 				;}
23886:     break;
23887: 
23888:   case 1122:
23889: #line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
23890:     {
23891: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23892: 					n->objectType = PG_OBJECT_TABLE;
23893: 					n->relation = (yyvsp[(5) - (8)].range);
23894: 					n->newschema = (yyvsp[(8) - (8)].str);
23895: 					n->missing_ok = true;
23896: 					(yyval.node) = (PGNode *)n;
23897: 				;}
23898:     break;
23899: 
23900:   case 1123:
23901: #line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
23902:     {
23903: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23904: 					n->objectType = PG_OBJECT_SEQUENCE;
23905: 					n->relation = (yyvsp[(3) - (6)].range);
23906: 					n->newschema = (yyvsp[(6) - (6)].str);
23907: 					n->missing_ok = false;
23908: 					(yyval.node) = (PGNode *)n;
23909: 				;}
23910:     break;
23911: 
23912:   case 1124:
23913: #line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
23914:     {
23915: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23916: 					n->objectType = PG_OBJECT_SEQUENCE;
23917: 					n->relation = (yyvsp[(5) - (8)].range);
23918: 					n->newschema = (yyvsp[(8) - (8)].str);
23919: 					n->missing_ok = true;
23920: 					(yyval.node) = (PGNode *)n;
23921: 				;}
23922:     break;
23923: 
23924:   case 1125:
23925: #line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
23926:     {
23927: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23928: 					n->objectType = PG_OBJECT_VIEW;
23929: 					n->relation = (yyvsp[(3) - (6)].range);
23930: 					n->newschema = (yyvsp[(6) - (6)].str);
23931: 					n->missing_ok = false;
23932: 					(yyval.node) = (PGNode *)n;
23933: 				;}
23934:     break;
23935: 
23936:   case 1126:
23937: #line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
23938:     {
23939: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23940: 					n->objectType = PG_OBJECT_VIEW;
23941: 					n->relation = (yyvsp[(5) - (8)].range);
23942: 					n->newschema = (yyvsp[(8) - (8)].str);
23943: 					n->missing_ok = true;
23944: 					(yyval.node) = (PGNode *)n;
23945: 				;}
23946:     break;
23947: 
23948:   case 1127:
23949: #line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
23950:     {
23951: 					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
23952: 					n->force = true;
23953: 					(yyval.node) = (PGNode *)n;
23954: 				;}
23955:     break;
23956: 
23957:   case 1128:
23958: #line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
23959:     {
23960: 					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
23961: 					n->force = false;
23962: 					(yyval.node) = (PGNode *)n;
23963: 				;}
23964:     break;
23965: 
23966:   case 1129:
23967: #line 8 "third_party/libpg_query/grammar/statements/export.y"
23968:     {
23969: 					PGExportStmt *n = makeNode(PGExportStmt);
23970: 					n->filename = (yyvsp[(3) - (4)].str);
23971: 					n->options = NIL;
23972: 					if ((yyvsp[(4) - (4)].list)) {
23973: 						n->options = list_concat(n->options, (yyvsp[(4) - (4)].list));
23974: 					}
23975: 					(yyval.node) = (PGNode *)n;
23976: 				;}
23977:     break;
23978: 
23979:   case 1130:
23980: #line 21 "third_party/libpg_query/grammar/statements/export.y"
23981:     {
23982: 					PGImportStmt *n = makeNode(PGImportStmt);
23983: 					n->filename = (yyvsp[(3) - (3)].str);
23984: 					(yyval.node) = (PGNode *)n;
23985: 				;}
23986:     break;
23987: 
23988:   case 1131:
23989: #line 10 "third_party/libpg_query/grammar/statements/explain.y"
23990:     {
23991: 					PGExplainStmt *n = makeNode(PGExplainStmt);
23992: 					n->query = (yyvsp[(2) - (2)].node);
23993: 					n->options = NIL;
23994: 					(yyval.node) = (PGNode *) n;
23995: 				;}
23996:     break;
23997: 
23998:   case 1132:
23999: #line 17 "third_party/libpg_query/grammar/statements/explain.y"
24000:     {
24001: 					PGExplainStmt *n = makeNode(PGExplainStmt);
24002: 					n->query = (yyvsp[(4) - (4)].node);
24003: 					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[(2) - (4)])));
24004: 					if ((yyvsp[(3) - (4)].boolean))
24005: 						n->options = lappend(n->options,
24006: 											 makeDefElem("verbose", NULL, (yylsp[(3) - (4)])));
24007: 					(yyval.node) = (PGNode *) n;
24008: 				;}
24009:     break;
24010: 
24011:   case 1133:
24012: #line 27 "third_party/libpg_query/grammar/statements/explain.y"
24013:     {
24014: 					PGExplainStmt *n = makeNode(PGExplainStmt);
24015: 					n->query = (yyvsp[(3) - (3)].node);
24016: 					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[(2) - (3)])));
24017: 					(yyval.node) = (PGNode *) n;
24018: 				;}
24019:     break;
24020: 
24021:   case 1134:
24022: #line 34 "third_party/libpg_query/grammar/statements/explain.y"
24023:     {
24024: 					PGExplainStmt *n = makeNode(PGExplainStmt);
24025: 					n->query = (yyvsp[(5) - (5)].node);
24026: 					n->options = (yyvsp[(3) - (5)].list);
24027: 					(yyval.node) = (PGNode *) n;
24028: 				;}
24029:     break;
24030: 
24031:   case 1135:
24032: #line 44 "third_party/libpg_query/grammar/statements/explain.y"
24033:     { (yyval.boolean) = true; ;}
24034:     break;
24035: 
24036:   case 1136:
24037: #line 45 "third_party/libpg_query/grammar/statements/explain.y"
24038:     { (yyval.boolean) = false; ;}
24039:     break;
24040: 
24041:   case 1137:
24042: #line 50 "third_party/libpg_query/grammar/statements/explain.y"
24043:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
24044:     break;
24045: 
24046:   case 1138:
24047: #line 51 "third_party/libpg_query/grammar/statements/explain.y"
24048:     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
24049:     break;
24050: 
24051:   case 1139:
24052: #line 52 "third_party/libpg_query/grammar/statements/explain.y"
24053:     { (yyval.node) = NULL; ;}
24054:     break;
24055: 
24056:   case 1145:
24057: #line 65 "third_party/libpg_query/grammar/statements/explain.y"
24058:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24059:     break;
24060: 
24061:   case 1146:
24062: #line 66 "third_party/libpg_query/grammar/statements/explain.y"
24063:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
24064:     break;
24065: 
24066:   case 1147:
24067: #line 67 "third_party/libpg_query/grammar/statements/explain.y"
24068:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
24069:     break;
24070: 
24071:   case 1148:
24072: #line 72 "third_party/libpg_query/grammar/statements/explain.y"
24073:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24074:     break;
24075: 
24076:   case 1149:
24077: #line 73 "third_party/libpg_query/grammar/statements/explain.y"
24078:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24079:     break;
24080: 
24081:   case 1150:
24082: #line 79 "third_party/libpg_query/grammar/statements/explain.y"
24083:     {
24084: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
24085: 				;}
24086:     break;
24087: 
24088:   case 1151:
24089: #line 83 "third_party/libpg_query/grammar/statements/explain.y"
24090:     {
24091: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
24092: 				;}
24093:     break;
24094: 
24095:   case 1152:
24096: #line 90 "third_party/libpg_query/grammar/statements/explain.y"
24097:     {;}
24098:     break;
24099: 
24100:   case 1153:
24101: #line 91 "third_party/libpg_query/grammar/statements/explain.y"
24102:     {;}
24103:     break;
24104: 
24105:   case 1154:
24106: #line 96 "third_party/libpg_query/grammar/statements/explain.y"
24107:     { (yyval.str) = (char*) "true"; ;}
24108:     break;
24109: 
24110:   case 1155:
24111: #line 97 "third_party/libpg_query/grammar/statements/explain.y"
24112:     { (yyval.str) = (char*) "false"; ;}
24113:     break;
24114: 
24115:   case 1156:
24116: #line 98 "third_party/libpg_query/grammar/statements/explain.y"
24117:     { (yyval.str) = (char*) "on"; ;}
24118:     break;
24119: 
24120:   case 1157:
24121: #line 104 "third_party/libpg_query/grammar/statements/explain.y"
24122:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24123:     break;
24124: 
24125:   case 1158:
24126: #line 110 "third_party/libpg_query/grammar/statements/explain.y"
24127:     {
24128: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
24129: 				;}
24130:     break;
24131: 
24132:   case 1159:
24133: #line 117 "third_party/libpg_query/grammar/statements/explain.y"
24134:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24135:     break;
24136: 
24137:   case 1160:
24138: #line 118 "third_party/libpg_query/grammar/statements/explain.y"
24139:     { (yyval.str) = (char*) "analyze"; ;}
24140:     break;
24141: 
24142:   case 1161:
24143: #line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
24144:     {
24145: 					PGVariableSetStmt *n = (yyvsp[(2) - (2)].vsetstmt);
24146: 					n->scope = VAR_SET_SCOPE_DEFAULT;
24147: 					(yyval.node) = (PGNode *) n;
24148: 				;}
24149:     break;
24150: 
24151:   case 1162:
24152: #line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
24153:     {
24154: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
24155: 					n->scope = VAR_SET_SCOPE_LOCAL;
24156: 					(yyval.node) = (PGNode *) n;
24157: 				;}
24158:     break;
24159: 
24160:   case 1163:
24161: #line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
24162:     {
24163: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
24164: 					n->scope = VAR_SET_SCOPE_SESSION;
24165: 					(yyval.node) = (PGNode *) n;
24166: 				;}
24167:     break;
24168: 
24169:   case 1164:
24170: #line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
24171:     {
24172: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
24173: 					n->scope = VAR_SET_SCOPE_GLOBAL;
24174: 					(yyval.node) = (PGNode *) n;
24175: 				;}
24176:     break;
24177: 
24178:   case 1165:
24179: #line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
24180:     {(yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt);;}
24181:     break;
24182: 
24183:   case 1166:
24184: #line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
24185:     {
24186: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24187: 					n->kind = VAR_SET_CURRENT;
24188: 					n->name = (yyvsp[(1) - (3)].str);
24189: 					(yyval.vsetstmt) = n;
24190: 				;}
24191:     break;
24192: 
24193:   case 1167:
24194: #line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
24195:     {
24196: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24197: 					n->kind = VAR_SET_VALUE;
24198: 					n->name = (char*) "timezone";
24199: 					if ((yyvsp[(3) - (3)].node) != NULL)
24200: 						n->args = list_make1((yyvsp[(3) - (3)].node));
24201: 					else
24202: 						n->kind = VAR_SET_DEFAULT;
24203: 					(yyval.vsetstmt) = n;
24204: 				;}
24205:     break;
24206: 
24207:   case 1168:
24208: #line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
24209:     {
24210: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24211: 					n->kind = VAR_SET_VALUE;
24212: 					n->name = (char*) "search_path";
24213: 					n->args = list_make1(makeStringConst((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)])));
24214: 					(yyval.vsetstmt) = n;
24215: 				;}
24216:     break;
24217: 
24218:   case 1169:
24219: #line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
24220:     {
24221: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24222: 					n->kind = VAR_SET_VALUE;
24223: 					n->name = (yyvsp[(1) - (3)].str);
24224: 					n->args = (yyvsp[(3) - (3)].list);
24225: 					(yyval.vsetstmt) = n;
24226: 				;}
24227:     break;
24228: 
24229:   case 1170:
24230: #line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
24231:     {
24232: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24233: 					n->kind = VAR_SET_VALUE;
24234: 					n->name = (yyvsp[(1) - (3)].str);
24235: 					n->args = (yyvsp[(3) - (3)].list);
24236: 					(yyval.vsetstmt) = n;
24237: 				;}
24238:     break;
24239: 
24240:   case 1171:
24241: #line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
24242:     {
24243: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24244: 					n->kind = VAR_SET_DEFAULT;
24245: 					n->name = (yyvsp[(1) - (3)].str);
24246: 					(yyval.vsetstmt) = n;
24247: 				;}
24248:     break;
24249: 
24250:   case 1172:
24251: #line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
24252:     {
24253: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24254: 					n->kind = VAR_SET_DEFAULT;
24255: 					n->name = (yyvsp[(1) - (3)].str);
24256: 					(yyval.vsetstmt) = n;
24257: 				;}
24258:     break;
24259: 
24260:   case 1173:
24261: #line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
24262:     { (yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])); ;}
24263:     break;
24264: 
24265:   case 1174:
24266: #line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
24267:     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
24268:     break;
24269: 
24270:   case 1175:
24271: #line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
24272:     {
24273: 					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
24274: 				;}
24275:     break;
24276: 
24277:   case 1176:
24278: #line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
24279:     {
24280: 					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
24281: 				;}
24282:     break;
24283: 
24284:   case 1177:
24285: #line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
24286:     {
24287: 					PGTypeName *t = (yyvsp[(1) - (3)].typnam);
24288: 					if ((yyvsp[(3) - (3)].list) != NIL)
24289: 					{
24290: 						PGAConst *n = (PGAConst *) linitial((yyvsp[(3) - (3)].list));
24291: 						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
24292: 							ereport(ERROR,
24293: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
24294: 									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
24295: 									 parser_errposition((yylsp[(3) - (3)]))));
24296: 					}
24297: 					t->typmods = (yyvsp[(3) - (3)].list);
24298: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), t);
24299: 				;}
24300:     break;
24301: 
24302:   case 1178:
24303: #line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
24304:     {
24305: 					PGTypeName *t = (yyvsp[(1) - (5)].typnam);
24306: 					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
24307: 											makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
24308: 					(yyval.node) = makeStringConstCast((yyvsp[(5) - (5)].str), (yylsp[(5) - (5)]), t);
24309: 				;}
24310:     break;
24311: 
24312:   case 1179:
24313: #line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
24314:     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
24315:     break;
24316: 
24317:   case 1180:
24318: #line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
24319:     { (yyval.node) = NULL; ;}
24320:     break;
24321: 
24322:   case 1181:
24323: #line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
24324:     { (yyval.node) = NULL; ;}
24325:     break;
24326: 
24327:   case 1182:
24328: #line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
24329:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
24330:     break;
24331: 
24332:   case 1183:
24333: #line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
24334:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
24335:     break;
24336: 
24337:   case 1184:
24338: #line 8 "third_party/libpg_query/grammar/statements/load.y"
24339:     {
24340: 					PGLoadStmt *n = makeNode(PGLoadStmt);
24341: 					n->filename = (yyvsp[(2) - (2)].str);
24342: 					n->load_type = PG_LOAD_TYPE_LOAD;
24343: 					(yyval.node) = (PGNode *)n;
24344: 				;}
24345:     break;
24346: 
24347:   case 1185:
24348: #line 14 "third_party/libpg_query/grammar/statements/load.y"
24349:     {
24350:                     PGLoadStmt *n = makeNode(PGLoadStmt);
24351:                     n->filename = (yyvsp[(2) - (2)].str);
24352:                     n->load_type = PG_LOAD_TYPE_INSTALL;
24353:                     (yyval.node) = (PGNode *)n;
24354: 				;}
24355:     break;
24356: 
24357:   case 1186:
24358: #line 20 "third_party/libpg_query/grammar/statements/load.y"
24359:     {
24360:                       PGLoadStmt *n = makeNode(PGLoadStmt);
24361:                       n->filename = (yyvsp[(3) - (3)].str);
24362:                       n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
24363:                       (yyval.node) = (PGNode *)n;
24364:                 ;}
24365:     break;
24366: 
24367:   case 1187:
24368: #line 28 "third_party/libpg_query/grammar/statements/load.y"
24369:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24370:     break;
24371: 
24372:   case 1188:
24373: #line 29 "third_party/libpg_query/grammar/statements/load.y"
24374:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24375:     break;
24376: 
24377:   case 1189:
24378: #line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
24379:     {
24380: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24381: 					n->options = PG_VACOPT_VACUUM;
24382: 					if ((yyvsp[(2) - (4)].boolean))
24383: 						n->options |= PG_VACOPT_FULL;
24384: 					if ((yyvsp[(3) - (4)].boolean))
24385: 						n->options |= PG_VACOPT_FREEZE;
24386: 					if ((yyvsp[(4) - (4)].boolean))
24387: 						n->options |= PG_VACOPT_VERBOSE;
24388: 					n->relation = NULL;
24389: 					n->va_cols = NIL;
24390: 					(yyval.node) = (PGNode *)n;
24391: 				;}
24392:     break;
24393: 
24394:   case 1190:
24395: #line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
24396:     {
24397: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24398: 					n->options = PG_VACOPT_VACUUM;
24399: 					if ((yyvsp[(2) - (5)].boolean))
24400: 						n->options |= PG_VACOPT_FULL;
24401: 					if ((yyvsp[(3) - (5)].boolean))
24402: 						n->options |= PG_VACOPT_FREEZE;
24403: 					if ((yyvsp[(4) - (5)].boolean))
24404: 						n->options |= PG_VACOPT_VERBOSE;
24405: 					n->relation = (yyvsp[(5) - (5)].range);
24406: 					n->va_cols = NIL;
24407: 					(yyval.node) = (PGNode *)n;
24408: 				;}
24409:     break;
24410: 
24411:   case 1191:
24412: #line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
24413:     {
24414: 					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[(5) - (5)].node);
24415: 					n->options |= PG_VACOPT_VACUUM;
24416: 					if ((yyvsp[(2) - (5)].boolean))
24417: 						n->options |= PG_VACOPT_FULL;
24418: 					if ((yyvsp[(3) - (5)].boolean))
24419: 						n->options |= PG_VACOPT_FREEZE;
24420: 					if ((yyvsp[(4) - (5)].boolean))
24421: 						n->options |= PG_VACOPT_VERBOSE;
24422: 					(yyval.node) = (PGNode *)n;
24423: 				;}
24424:     break;
24425: 
24426:   case 1192:
24427: #line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
24428:     {
24429: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24430: 					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (4)].ival);
24431: 					n->relation = NULL;
24432: 					n->va_cols = NIL;
24433: 					(yyval.node) = (PGNode *) n;
24434: 				;}
24435:     break;
24436: 
24437:   case 1193:
24438: #line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
24439:     {
24440: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24441: 					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (6)].ival);
24442: 					n->relation = (yyvsp[(5) - (6)].range);
24443: 					n->va_cols = (yyvsp[(6) - (6)].list);
24444: 					if (n->va_cols != NIL)	/* implies analyze */
24445: 						n->options |= PG_VACOPT_ANALYZE;
24446: 					(yyval.node) = (PGNode *) n;
24447: 				;}
24448:     break;
24449: 
24450:   case 1194:
24451: #line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
24452:     { (yyval.ival) = PG_VACOPT_ANALYZE; ;}
24453:     break;
24454: 
24455:   case 1195:
24456: #line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
24457:     { (yyval.ival) = PG_VACOPT_VERBOSE; ;}
24458:     break;
24459: 
24460:   case 1196:
24461: #line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
24462:     { (yyval.ival) = PG_VACOPT_FREEZE; ;}
24463:     break;
24464: 
24465:   case 1197:
24466: #line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
24467:     { (yyval.ival) = PG_VACOPT_FULL; ;}
24468:     break;
24469: 
24470:   case 1198:
24471: #line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
24472:     {
24473: 					if (strcmp((yyvsp[(1) - (1)].str), "disable_page_skipping") == 0)
24474: 						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
24475: 					else
24476: 						ereport(ERROR,
24477: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
24478: 							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[(1) - (1)].str)),
24479: 									 parser_errposition((yylsp[(1) - (1)]))));
24480: 				;}
24481:     break;
24482: 
24483:   case 1199:
24484: #line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
24485:     { (yyval.boolean) = true; ;}
24486:     break;
24487: 
24488:   case 1200:
24489: #line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
24490:     { (yyval.boolean) = false; ;}
24491:     break;
24492: 
24493:   case 1201:
24494: #line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
24495:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
24496:     break;
24497: 
24498:   case 1202:
24499: #line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
24500:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
24501:     break;
24502: 
24503:   case 1203:
24504: #line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
24505:     { (yyval.boolean) = true; ;}
24506:     break;
24507: 
24508:   case 1204:
24509: #line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
24510:     { (yyval.boolean) = false; ;}
24511:     break;
24512: 
24513:   case 1205:
24514: #line 9 "third_party/libpg_query/grammar/statements/delete.y"
24515:     {
24516: 					PGDeleteStmt *n = makeNode(PGDeleteStmt);
24517: 					n->relation = (yyvsp[(4) - (7)].range);
24518: 					n->usingClause = (yyvsp[(5) - (7)].list);
24519: 					n->whereClause = (yyvsp[(6) - (7)].node);
24520: 					n->returningList = (yyvsp[(7) - (7)].list);
24521: 					n->withClause = (yyvsp[(1) - (7)].with);
24522: 					(yyval.node) = (PGNode *)n;
24523: 				;}
24524:     break;
24525: 
24526:   case 1206:
24527: #line 22 "third_party/libpg_query/grammar/statements/delete.y"
24528:     {
24529: 					(yyval.range) = (yyvsp[(1) - (1)].range);
24530: 				;}
24531:     break;
24532: 
24533:   case 1207:
24534: #line 26 "third_party/libpg_query/grammar/statements/delete.y"
24535:     {
24536: 					PGAlias *alias = makeNode(PGAlias);
24537: 					alias->aliasname = (yyvsp[(2) - (2)].str);
24538: 					(yyvsp[(1) - (2)].range)->alias = alias;
24539: 					(yyval.range) = (yyvsp[(1) - (2)].range);
24540: 				;}
24541:     break;
24542: 
24543:   case 1208:
24544: #line 33 "third_party/libpg_query/grammar/statements/delete.y"
24545:     {
24546: 					PGAlias *alias = makeNode(PGAlias);
24547: 					alias->aliasname = (yyvsp[(3) - (3)].str);
24548: 					(yyvsp[(1) - (3)].range)->alias = alias;
24549: 					(yyval.range) = (yyvsp[(1) - (3)].range);
24550: 				;}
24551:     break;
24552: 
24553:   case 1209:
24554: #line 43 "third_party/libpg_query/grammar/statements/delete.y"
24555:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
24556:     break;
24557: 
24558:   case 1210:
24559: #line 44 "third_party/libpg_query/grammar/statements/delete.y"
24560:     { (yyval.node) = NULL; ;}
24561:     break;
24562: 
24563:   case 1211:
24564: #line 50 "third_party/libpg_query/grammar/statements/delete.y"
24565:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
24566:     break;
24567: 
24568:   case 1212:
24569: #line 51 "third_party/libpg_query/grammar/statements/delete.y"
24570:     { (yyval.list) = NIL; ;}
24571:     break;
24572: 
24573:   case 1213:
24574: #line 10 "third_party/libpg_query/grammar/statements/analyze.y"
24575:     {
24576: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24577: 					n->options = PG_VACOPT_ANALYZE;
24578: 					if ((yyvsp[(2) - (2)].boolean))
24579: 						n->options |= PG_VACOPT_VERBOSE;
24580: 					n->relation = NULL;
24581: 					n->va_cols = NIL;
24582: 					(yyval.node) = (PGNode *)n;
24583: 				;}
24584:     break;
24585: 
24586:   case 1214:
24587: #line 20 "third_party/libpg_query/grammar/statements/analyze.y"
24588:     {
24589: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24590: 					n->options = PG_VACOPT_ANALYZE;
24591: 					if ((yyvsp[(2) - (4)].boolean))
24592: 						n->options |= PG_VACOPT_VERBOSE;
24593: 					n->relation = (yyvsp[(3) - (4)].range);
24594: 					n->va_cols = (yyvsp[(4) - (4)].list);
24595: 					(yyval.node) = (PGNode *)n;
24596: 				;}
24597:     break;
24598: 
24599:   case 1215:
24600: #line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
24601:     { (yyval.node) = (PGNode *) (yyvsp[(2) - (2)].vsetstmt); ;}
24602:     break;
24603: 
24604:   case 1216:
24605: #line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
24606:     {
24607: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24608: 					n->kind = VAR_RESET;
24609: 					n->name = (yyvsp[(1) - (1)].str);
24610: 					(yyval.vsetstmt) = n;
24611: 				;}
24612:     break;
24613: 
24614:   case 1217:
24615: #line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
24616:     {
24617: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24618: 					n->kind = VAR_RESET_ALL;
24619: 					(yyval.vsetstmt) = n;
24620: 				;}
24621:     break;
24622: 
24623:   case 1218:
24624: #line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
24625:     { (yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt); ;}
24626:     break;
24627: 
24628:   case 1219:
24629: #line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
24630:     {
24631: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24632: 					n->kind = VAR_RESET;
24633: 					n->name = (char*) "timezone";
24634: 					(yyval.vsetstmt) = n;
24635: 				;}
24636:     break;
24637: 
24638:   case 1220:
24639: #line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
24640:     {
24641: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24642: 					n->kind = VAR_RESET;
24643: 					n->name = (char*) "transaction_isolation";
24644: 					(yyval.vsetstmt) = n;
24645: 				;}
24646:     break;
24647: 
24648:   case 1221:
24649: #line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
24650:     {
24651: 				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
24652: 				n->stmt = (yyvsp[(2) - (2)].node);
24653: 				n->name = (char*) "select";
24654: 				n->is_summary = 0;
24655: 				(yyval.node) = (PGNode *) n;
24656: 			;}
24657:     break;
24658: 
24659:   case 1222:
24660: #line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
24661:     {
24662: 				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
24663: 				n->stmt = (yyvsp[(2) - (2)].node);
24664: 				n->name = (char*) "select";
24665: 				n->is_summary = 1;
24666: 				(yyval.node) = (PGNode *) n;
24667: 			;}
24668:     break;
24669: 
24670:   case 1223:
24671: #line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
24672:     {
24673: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24674: 				n->name = (yyvsp[(2) - (2)].str);
24675: 				n->is_summary = 1;
24676: 				(yyval.node) = (PGNode *) n;
24677: 			;}
24678:     break;
24679: 
24680:   case 1224:
24681: #line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
24682:     {
24683: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24684: 				n->name = (yyvsp[(2) - (2)].str);
24685: 				n->is_summary = 0;
24686: 				(yyval.node) = (PGNode *) n;
24687: 			;}
24688:     break;
24689: 
24690:   case 1225:
24691: #line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
24692:     {
24693: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24694: 				n->name = (char*) "timezone";
24695: 				n->is_summary = 0;
24696: 				(yyval.node) = (PGNode *) n;
24697: 			;}
24698:     break;
24699: 
24700:   case 1226:
24701: #line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
24702:     {
24703: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24704: 				n->name = (char*) "transaction_isolation";
24705: 				n->is_summary = 0;
24706: 				(yyval.node) = (PGNode *) n;
24707: 			;}
24708:     break;
24709: 
24710:   case 1227:
24711: #line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
24712:     {
24713: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24714: 				n->name = (char*) "all";
24715: 				n->is_summary = 0;
24716: 				(yyval.node) = (PGNode *) n;
24717: 			;}
24718:     break;
24719: 
24720:   case 1230:
24721: #line 57 "third_party/libpg_query/grammar/statements/variable_show.y"
24722:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24723:     break;
24724: 
24725:   case 1231:
24726: #line 59 "third_party/libpg_query/grammar/statements/variable_show.y"
24727:     { (yyval.str) = psprintf("%s.%s", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}
24728:     break;
24729: 
24730:   case 1232:
24731: #line 7 "third_party/libpg_query/grammar/statements/call.y"
24732:     {
24733: 					PGCallStmt *n = makeNode(PGCallStmt);
24734: 					n->func = (yyvsp[(2) - (2)].node);
24735: 					(yyval.node) = (PGNode *) n;
24736: 				;}
24737:     break;
24738: 
24739:   case 1233:
24740: #line 10 "third_party/libpg_query/grammar/statements/view.y"
24741:     {
24742: 					PGViewStmt *n = makeNode(PGViewStmt);
24743: 					n->view = (yyvsp[(4) - (9)].range);
24744: 					n->view->relpersistence = (yyvsp[(2) - (9)].ival);
24745: 					n->aliases = (yyvsp[(5) - (9)].list);
24746: 					n->query = (yyvsp[(8) - (9)].node);
24747: 					n->onconflict = PG_ERROR_ON_CONFLICT;
24748: 					n->options = (yyvsp[(6) - (9)].list);
24749: 					n->withCheckOption = (yyvsp[(9) - (9)].viewcheckoption);
24750: 					(yyval.node) = (PGNode *) n;
24751: 				;}
24752:     break;
24753: 
24754:   case 1234:
24755: #line 23 "third_party/libpg_query/grammar/statements/view.y"
24756:     {
24757: 					PGViewStmt *n = makeNode(PGViewStmt);
24758: 					n->view = (yyvsp[(6) - (11)].range);
24759: 					n->view->relpersistence = (yyvsp[(4) - (11)].ival);
24760: 					n->aliases = (yyvsp[(7) - (11)].list);
24761: 					n->query = (yyvsp[(10) - (11)].node);
24762: 					n->onconflict = PG_REPLACE_ON_CONFLICT;
24763: 					n->options = (yyvsp[(8) - (11)].list);
24764: 					n->withCheckOption = (yyvsp[(11) - (11)].viewcheckoption);
24765: 					(yyval.node) = (PGNode *) n;
24766: 				;}
24767:     break;
24768: 
24769:   case 1235:
24770: #line 36 "third_party/libpg_query/grammar/statements/view.y"
24771:     {
24772: 					PGViewStmt *n = makeNode(PGViewStmt);
24773: 					n->view = (yyvsp[(5) - (12)].range);
24774: 					n->view->relpersistence = (yyvsp[(2) - (12)].ival);
24775: 					n->aliases = (yyvsp[(7) - (12)].list);
24776: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(11) - (12)].node));
24777: 					n->onconflict = PG_ERROR_ON_CONFLICT;
24778: 					n->options = (yyvsp[(9) - (12)].list);
24779: 					n->withCheckOption = (yyvsp[(12) - (12)].viewcheckoption);
24780: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
24781: 						ereport(ERROR,
24782: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24783: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
24784: 								 parser_errposition((yylsp[(12) - (12)]))));
24785: 					(yyval.node) = (PGNode *) n;
24786: 				;}
24787:     break;
24788: 
24789:   case 1236:
24790: #line 54 "third_party/libpg_query/grammar/statements/view.y"
24791:     {
24792: 					PGViewStmt *n = makeNode(PGViewStmt);
24793: 					n->view = (yyvsp[(7) - (14)].range);
24794: 					n->view->relpersistence = (yyvsp[(4) - (14)].ival);
24795: 					n->aliases = (yyvsp[(9) - (14)].list);
24796: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(13) - (14)].node));
24797: 					n->onconflict = PG_REPLACE_ON_CONFLICT;
24798: 					n->options = (yyvsp[(11) - (14)].list);
24799: 					n->withCheckOption = (yyvsp[(14) - (14)].viewcheckoption);
24800: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
24801: 						ereport(ERROR,
24802: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24803: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
24804: 								 parser_errposition((yylsp[(14) - (14)]))));
24805: 					(yyval.node) = (PGNode *) n;
24806: 				;}
24807:     break;
24808: 
24809:   case 1237:
24810: #line 74 "third_party/libpg_query/grammar/statements/view.y"
24811:     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
24812:     break;
24813: 
24814:   case 1238:
24815: #line 75 "third_party/libpg_query/grammar/statements/view.y"
24816:     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
24817:     break;
24818: 
24819:   case 1239:
24820: #line 76 "third_party/libpg_query/grammar/statements/view.y"
24821:     { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; ;}
24822:     break;
24823: 
24824:   case 1240:
24825: #line 77 "third_party/libpg_query/grammar/statements/view.y"
24826:     { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; ;}
24827:     break;
24828: 
24829:   case 1241:
24830: #line 12 "third_party/libpg_query/grammar/statements/create_as.y"
24831:     {
24832: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
24833: 					ctas->query = (yyvsp[(6) - (7)].node);
24834: 					ctas->into = (yyvsp[(4) - (7)].into);
24835: 					ctas->relkind = PG_OBJECT_TABLE;
24836: 					ctas->is_select_into = false;
24837: 					ctas->onconflict = PG_ERROR_ON_CONFLICT;
24838: 					/* cram additional flags into the PGIntoClause */
24839: 					(yyvsp[(4) - (7)].into)->rel->relpersistence = (yyvsp[(2) - (7)].ival);
24840: 					(yyvsp[(4) - (7)].into)->skipData = !((yyvsp[(7) - (7)].boolean));
24841: 					(yyval.node) = (PGNode *) ctas;
24842: 				;}
24843:     break;
24844: 
24845:   case 1242:
24846: #line 25 "third_party/libpg_query/grammar/statements/create_as.y"
24847:     {
24848: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
24849: 					ctas->query = (yyvsp[(9) - (10)].node);
24850: 					ctas->into = (yyvsp[(7) - (10)].into);
24851: 					ctas->relkind = PG_OBJECT_TABLE;
24852: 					ctas->is_select_into = false;
24853: 					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
24854: 					/* cram additional flags into the PGIntoClause */
24855: 					(yyvsp[(7) - (10)].into)->rel->relpersistence = (yyvsp[(2) - (10)].ival);
24856: 					(yyvsp[(7) - (10)].into)->skipData = !((yyvsp[(10) - (10)].boolean));
24857: 					(yyval.node) = (PGNode *) ctas;
24858: 				;}
24859:     break;
24860: 
24861:   case 1243:
24862: #line 41 "third_party/libpg_query/grammar/statements/create_as.y"
24863:     { (yyval.boolean) = true; ;}
24864:     break;
24865: 
24866:   case 1244:
24867: #line 42 "third_party/libpg_query/grammar/statements/create_as.y"
24868:     { (yyval.boolean) = false; ;}
24869:     break;
24870: 
24871:   case 1245:
24872: #line 43 "third_party/libpg_query/grammar/statements/create_as.y"
24873:     { (yyval.boolean) = true; ;}
24874:     break;
24875: 
24876:   case 1246:
24877: #line 49 "third_party/libpg_query/grammar/statements/create_as.y"
24878:     {
24879: 					(yyval.into) = makeNode(PGIntoClause);
24880: 					(yyval.into)->rel = (yyvsp[(1) - (4)].range);
24881: 					(yyval.into)->colNames = (yyvsp[(2) - (4)].list);
24882: 					(yyval.into)->options = (yyvsp[(3) - (4)].list);
24883: 					(yyval.into)->onCommit = (yyvsp[(4) - (4)].oncommit);
24884: 					(yyval.into)->viewQuery = NULL;
24885: 					(yyval.into)->skipData = false;		/* might get changed later */
24886: 				;}
24887:     break;
24888: 
24889: 
24890: /* Line 1267 of yacc.c.  */
24891: #line 24892 "third_party/libpg_query/grammar/grammar_out.cpp"
24892:       default: break;
24893:     }
24894:   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
24895: 
24896:   YYPOPSTACK (yylen);
24897:   yylen = 0;
24898:   YY_STACK_PRINT (yyss, yyssp);
24899: 
24900:   *++yyvsp = yyval;
24901:   *++yylsp = yyloc;
24902: 
24903:   /* Now `shift' the result of the reduction.  Determine what state
24904:      that goes to, based on the state we popped back to and the rule
24905:      number reduced by.  */
24906: 
24907:   yyn = yyr1[yyn];
24908: 
24909:   yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
24910:   if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
24911:     yystate = yytable[yystate];
24912:   else
24913:     yystate = yydefgoto[yyn - YYNTOKENS];
24914: 
24915:   goto yynewstate;
24916: 
24917: 
24918: /*------------------------------------.
24919: | yyerrlab -- here on detecting error |
24920: `------------------------------------*/
24921: yyerrlab:
24922:   /* If not already recovering from an error, report this error.  */
24923:   if (!yyerrstatus)
24924:     {
24925:       ++yynerrs;
24926: #if ! YYERROR_VERBOSE
24927:       yyerror (&yylloc, yyscanner, YY_("syntax error"));
24928: #else
24929:       {
24930: 	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
24931: 	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
24932: 	  {
24933: 	    YYSIZE_T yyalloc = 2 * yysize;
24934: 	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
24935: 	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
24936: 	    if (yymsg != yymsgbuf)
24937: 	      YYSTACK_FREE (yymsg);
24938: 	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
24939: 	    if (yymsg)
24940: 	      yymsg_alloc = yyalloc;
24941: 	    else
24942: 	      {
24943: 		yymsg = yymsgbuf;
24944: 		yymsg_alloc = sizeof yymsgbuf;
24945: 	      }
24946: 	  }
24947: 
24948: 	if (0 < yysize && yysize <= yymsg_alloc)
24949: 	  {
24950: 	    (void) yysyntax_error (yymsg, yystate, yychar);
24951: 	    yyerror (&yylloc, yyscanner, yymsg);
24952: 	  }
24953: 	else
24954: 	  {
24955: 	    yyerror (&yylloc, yyscanner, YY_("syntax error"));
24956: 	    if (yysize != 0)
24957: 	      goto yyexhaustedlab;
24958: 	  }
24959:       }
24960: #endif
24961:     }
24962: 
24963:   yyerror_range[0] = yylloc;
24964: 
24965:   if (yyerrstatus == 3)
24966:     {
24967:       /* If just tried and failed to reuse look-ahead token after an
24968: 	 error, discard it.  */
24969: 
24970:       if (yychar <= YYEOF)
24971: 	{
24972: 	  /* Return failure if at end of input.  */
24973: 	  if (yychar == YYEOF)
24974: 	    YYABORT;
24975: 	}
24976:       else
24977: 	{
24978: 	  yydestruct ("Error: discarding",
24979: 		      yytoken, &yylval, &yylloc, yyscanner);
24980: 	  yychar = YYEMPTY;
24981: 	}
24982:     }
24983: 
24984:   /* Else will try to reuse look-ahead token after shifting the error
24985:      token.  */
24986:   goto yyerrlab1;
24987: 
24988: 
24989: /*---------------------------------------------------.
24990: | yyerrorlab -- error raised explicitly by YYERROR.  |
24991: `---------------------------------------------------*/
24992: yyerrorlab:
24993: 
24994:   /* Pacify compilers like GCC when the user code never invokes
24995:      YYERROR and the label yyerrorlab therefore never appears in user
24996:      code.  */
24997:   if (/*CONSTCOND*/ 0)
24998:      goto yyerrorlab;
24999: 
25000:   yyerror_range[0] = yylsp[1-yylen];
25001:   /* Do not reclaim the symbols of the rule which action triggered
25002:      this YYERROR.  */
25003:   YYPOPSTACK (yylen);
25004:   yylen = 0;
25005:   YY_STACK_PRINT (yyss, yyssp);
25006:   yystate = *yyssp;
25007:   goto yyerrlab1;
25008: 
25009: 
25010: /*-------------------------------------------------------------.
25011: | yyerrlab1 -- common code for both syntax error and YYERROR.  |
25012: `-------------------------------------------------------------*/
25013: yyerrlab1:
25014:   yyerrstatus = 3;	/* Each real token shifted decrements this.  */
25015: 
25016:   for (;;)
25017:     {
25018:       yyn = yypact[yystate];
25019:       if (yyn != YYPACT_NINF)
25020: 	{
25021: 	  yyn += YYTERROR;
25022: 	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
25023: 	    {
25024: 	      yyn = yytable[yyn];
25025: 	      if (0 < yyn)
25026: 		break;
25027: 	    }
25028: 	}
25029: 
25030:       /* Pop the current state because it cannot handle the error token.  */
25031:       if (yyssp == yyss)
25032: 	YYABORT;
25033: 
25034:       yyerror_range[0] = *yylsp;
25035:       yydestruct ("Error: popping",
25036: 		  yystos[yystate], yyvsp, yylsp, yyscanner);
25037:       YYPOPSTACK (1);
25038:       yystate = *yyssp;
25039:       YY_STACK_PRINT (yyss, yyssp);
25040:     }
25041: 
25042:   if (yyn == YYFINAL)
25043:     YYACCEPT;
25044: 
25045:   *++yyvsp = yylval;
25046: 
25047:   yyerror_range[1] = yylloc;
25048:   /* Using YYLLOC is tempting, but would change the location of
25049:      the look-ahead.  YYLOC is available though.  */
25050:   YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
25051:   *++yylsp = yyloc;
25052: 
25053:   /* Shift the error token.  */
25054:   YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
25055: 
25056:   yystate = yyn;
25057:   goto yynewstate;
25058: 
25059: 
25060: /*-------------------------------------.
25061: | yyacceptlab -- YYACCEPT comes here.  |
25062: `-------------------------------------*/
25063: yyacceptlab:
25064:   yyresult = 0;
25065:   goto yyreturn;
25066: 
25067: /*-----------------------------------.
25068: | yyabortlab -- YYABORT comes here.  |
25069: `-----------------------------------*/
25070: yyabortlab:
25071:   yyresult = 1;
25072:   goto yyreturn;
25073: 
25074: #ifndef yyoverflow
25075: /*-------------------------------------------------.
25076: | yyexhaustedlab -- memory exhaustion comes here.  |
25077: `-------------------------------------------------*/
25078: yyexhaustedlab:
25079:   yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
25080:   yyresult = 2;
25081:   /* Fall through.  */
25082: #endif
25083: 
25084: yyreturn:
25085:   if (yychar != YYEOF && yychar != YYEMPTY)
25086:      yydestruct ("Cleanup: discarding lookahead",
25087: 		 yytoken, &yylval, &yylloc, yyscanner);
25088:   /* Do not reclaim the symbols of the rule which action triggered
25089:      this YYABORT or YYACCEPT.  */
25090:   YYPOPSTACK (yylen);
25091:   YY_STACK_PRINT (yyss, yyssp);
25092:   while (yyssp != yyss)
25093:     {
25094:       yydestruct ("Cleanup: popping",
25095: 		  yystos[*yyssp], yyvsp, yylsp, yyscanner);
25096:       YYPOPSTACK (1);
25097:     }
25098: #ifndef yyoverflow
25099:   if (yyss != yyssa)
25100:     YYSTACK_FREE (yyss);
25101: #endif
25102: #if YYERROR_VERBOSE
25103:   if (yymsg != yymsgbuf)
25104:     YYSTACK_FREE (yymsg);
25105: #endif
25106:   /* Make sure YYID is used.  */
25107:   return YYID (yyresult);
25108: }
25109: 
25110: 
25111: #line 70 "third_party/libpg_query/grammar/statements/create_as.y"
25112: 
25113: 
25114: #line 1 "third_party/libpg_query/grammar/grammar.cpp"
25115: /*
25116:  * The signature of this function is required by bison.  However, we
25117:  * ignore the passed yylloc and instead use the last token position
25118:  * available from the scanner.
25119:  */
25120: static void
25121: base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
25122: {
25123: 	parser_yyerror(msg);
25124: }
25125: 
25126: static PGRawStmt *
25127: makeRawStmt(PGNode *stmt, int stmt_location)
25128: {
25129: 	PGRawStmt    *rs = makeNode(PGRawStmt);
25130: 
25131: 	rs->stmt = stmt;
25132: 	rs->stmt_location = stmt_location;
25133: 	rs->stmt_len = 0;			/* might get changed later */
25134: 	return rs;
25135: }
25136: 
25137: /* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
25138: static void
25139: updateRawStmtEnd(PGRawStmt *rs, int end_location)
25140: {
25141: 	/*
25142: 	 * If we already set the length, don't change it.  This is for situations
25143: 	 * like "select foo ;; select bar" where the same statement will be last
25144: 	 * in the string for more than one semicolon.
25145: 	 */
25146: 	if (rs->stmt_len > 0)
25147: 		return;
25148: 
25149: 	/* OK, update length of PGRawStmt */
25150: 	rs->stmt_len = end_location - rs->stmt_location;
25151: }
25152: 
25153: static PGNode *
25154: makeColumnRef(char *colname, PGList *indirection,
25155: 			  int location, core_yyscan_t yyscanner)
25156: {
25157: 	/*
25158: 	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
25159: 	 * is any subscripting in the specified indirection list.  However,
25160: 	 * any field selection at the start of the indirection list must be
25161: 	 * transposed into the "fields" part of the PGColumnRef node.
25162: 	 */
25163: 	PGColumnRef  *c = makeNode(PGColumnRef);
25164: 	int		nfields = 0;
25165: 	PGListCell *l;
25166: 
25167: 	c->location = location;
25168: 	foreach(l, indirection)
25169: 	{
25170: 		if (IsA(lfirst(l), PGAIndices))
25171: 		{
25172: 			PGAIndirection *i = makeNode(PGAIndirection);
25173: 
25174: 			if (nfields == 0)
25175: 			{
25176: 				/* easy case - all indirection goes to PGAIndirection */
25177: 				c->fields = list_make1(makeString(colname));
25178: 				i->indirection = check_indirection(indirection, yyscanner);
25179: 			}
25180: 			else
25181: 			{
25182: 				/* got to split the list in two */
25183: 				i->indirection = check_indirection(list_copy_tail(indirection,
25184: 																  nfields),
25185: 												   yyscanner);
25186: 				indirection = list_truncate(indirection, nfields);
25187: 				c->fields = lcons(makeString(colname), indirection);
25188: 			}
25189: 			i->arg = (PGNode *) c;
25190: 			return (PGNode *) i;
25191: 		}
25192: 		else if (IsA(lfirst(l), PGAStar))
25193: 		{
25194: 			/* We only allow '*' at the end of a PGColumnRef */
25195: 			if (lnext(l) != NULL)
25196: 				parser_yyerror("improper use of \"*\"");
25197: 		}
25198: 		nfields++;
25199: 	}
25200: 	/* No subscripting, so all indirection gets added to field list */
25201: 	c->fields = lcons(makeString(colname), indirection);
25202: 	return (PGNode *) c;
25203: }
25204: 
25205: static PGNode *
25206: makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
25207: {
25208: 	PGTypeCast *n = makeNode(PGTypeCast);
25209: 	n->arg = arg;
25210: 	n->typeName = tpname;
25211: 	n->tryCast = trycast;
25212: 	n->location = location;
25213: 	return (PGNode *) n;
25214: }
25215: 
25216: static PGNode *
25217: makeStringConst(char *str, int location)
25218: {
25219: 	PGAConst *n = makeNode(PGAConst);
25220: 
25221: 	n->val.type = T_PGString;
25222: 	n->val.val.str = str;
25223: 	n->location = location;
25224: 
25225: 	return (PGNode *)n;
25226: }
25227: 
25228: static PGNode *
25229: makeStringConstCast(char *str, int location, PGTypeName *tpname)
25230: {
25231: 	PGNode *s = makeStringConst(str, location);
25232: 
25233: 	return makeTypeCast(s, tpname, 0, -1);
25234: }
25235: 
25236: static PGNode *
25237: makeIntervalNode(char *str, int location, PGList *typmods) {
25238: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
25239: 
25240: 	n->val_type = T_PGString;
25241: 	n->sval = str;
25242: 	n->location = location;
25243: 	n->typmods = typmods;
25244: 
25245: 	return (PGNode *)n;
25246: 
25247: }
25248: 
25249: static PGNode *
25250: makeIntervalNode(int val, int location, PGList *typmods) {
25251: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
25252: 
25253: 	n->val_type = T_PGInteger;
25254: 	n->ival = val;
25255: 	n->location = location;
25256: 	n->typmods = typmods;
25257: 
25258: 	return (PGNode *)n;
25259: }
25260: 
25261: static PGNode *
25262: makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
25263: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
25264: 
25265: 	n->val_type = T_PGAExpr;
25266: 	n->eval = arg;
25267: 	n->location = location;
25268: 	n->typmods = typmods;
25269: 
25270: 	return (PGNode *)n;
25271: }
25272: 
25273: static PGNode *
25274: makeSampleSize(PGValue *sample_size, bool is_percentage) {
25275: 	PGSampleSize *n = makeNode(PGSampleSize);
25276: 
25277: 	n->sample_size = *sample_size;
25278: 	n->is_percentage = is_percentage;
25279: 
25280: 	return (PGNode *)n;
25281: }
25282: 
25283: static PGNode *
25284: makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
25285: 	PGSampleOptions *n = makeNode(PGSampleOptions);
25286: 
25287: 	n->sample_size = sample_size;
25288: 	n->method = method;
25289: 	n->seed = seed;
25290: 	n->location = location;
25291: 
25292: 	return (PGNode *)n;
25293: }
25294: 
25295: /* makeLimitPercent()
25296:  * Make limit percent node
25297:  */
25298: static PGNode *
25299: makeLimitPercent(PGNode *limit_percent) {
25300: 	PGLimitPercent *n = makeNode(PGLimitPercent);
25301: 
25302: 	n->limit_percent = limit_percent;
25303: 
25304: 	return (PGNode *)n;
25305: }
25306: 
25307: static PGNode *
25308: makeIntConst(int val, int location)
25309: {
25310: 	PGAConst *n = makeNode(PGAConst);
25311: 
25312: 	n->val.type = T_PGInteger;
25313: 	n->val.val.ival = val;
25314: 	n->location = location;
25315: 
25316: 	return (PGNode *)n;
25317: }
25318: 
25319: static PGNode *
25320: makeFloatConst(char *str, int location)
25321: {
25322: 	PGAConst *n = makeNode(PGAConst);
25323: 
25324: 	n->val.type = T_PGFloat;
25325: 	n->val.val.str = str;
25326: 	n->location = location;
25327: 
25328: 	return (PGNode *)n;
25329: }
25330: 
25331: static PGNode *
25332: makeBitStringConst(char *str, int location)
25333: {
25334: 	PGAConst *n = makeNode(PGAConst);
25335: 
25336: 	n->val.type = T_PGBitString;
25337: 	n->val.val.str = str;
25338: 	n->location = location;
25339: 
25340: 	return (PGNode *)n;
25341: }
25342: 
25343: static PGNode *
25344: makeNullAConst(int location)
25345: {
25346: 	PGAConst *n = makeNode(PGAConst);
25347: 
25348: 	n->val.type = T_PGNull;
25349: 	n->location = location;
25350: 
25351: 	return (PGNode *)n;
25352: }
25353: 
25354: static PGNode *
25355: makeAConst(PGValue *v, int location)
25356: {
25357: 	PGNode *n;
25358: 
25359: 	switch (v->type)
25360: 	{
25361: 		case T_PGFloat:
25362: 			n = makeFloatConst(v->val.str, location);
25363: 			break;
25364: 
25365: 		case T_PGInteger:
25366: 			n = makeIntConst(v->val.ival, location);
25367: 			break;
25368: 
25369: 		case T_PGString:
25370: 		default:
25371: 			n = makeStringConst(v->val.str, location);
25372: 			break;
25373: 	}
25374: 
25375: 	return n;
25376: }
25377: 
25378: /* makeBoolAConst()
25379:  * Create an PGAConst string node and put it inside a boolean cast.
25380:  */
25381: static PGNode *
25382: makeBoolAConst(bool state, int location)
25383: {
25384: 	PGAConst *n = makeNode(PGAConst);
25385: 
25386: 	n->val.type = T_PGString;
25387: 	n->val.val.str = (state ? (char*) "t" : (char*) "f");
25388: 	n->location = location;
25389: 
25390: 	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
25391: }
25392: 
25393: /* check_qualified_name --- check the result of qualified_name production
25394:  *
25395:  * It's easiest to let the grammar production for qualified_name allow
25396:  * subscripts and '*', which we then must reject here.
25397:  */
25398: static void
25399: check_qualified_name(PGList *names, core_yyscan_t yyscanner)
25400: {
25401: 	PGListCell   *i;
25402: 
25403: 	foreach(i, names)
25404: 	{
25405: 		if (!IsA(lfirst(i), PGString))
25406: 			parser_yyerror("syntax error");
25407: 	}
25408: }
25409: 
25410: /* check_func_name --- check the result of func_name production
25411:  *
25412:  * It's easiest to let the grammar production for func_name allow subscripts
25413:  * and '*', which we then must reject here.
25414:  */
25415: static PGList *
25416: check_func_name(PGList *names, core_yyscan_t yyscanner)
25417: {
25418: 	PGListCell   *i;
25419: 
25420: 	foreach(i, names)
25421: 	{
25422: 		if (!IsA(lfirst(i), PGString))
25423: 			parser_yyerror("syntax error");
25424: 	}
25425: 	return names;
25426: }
25427: 
25428: /* check_indirection --- check the result of indirection production
25429:  *
25430:  * We only allow '*' at the end of the list, but it's hard to enforce that
25431:  * in the grammar, so do it here.
25432:  */
25433: static PGList *
25434: check_indirection(PGList *indirection, core_yyscan_t yyscanner)
25435: {
25436: 	PGListCell *l;
25437: 
25438: 	foreach(l, indirection)
25439: 	{
25440: 		if (IsA(lfirst(l), PGAStar))
25441: 		{
25442: 			if (lnext(l) != NULL)
25443: 				parser_yyerror("improper use of \"*\"");
25444: 		}
25445: 	}
25446: 	return indirection;
25447: }
25448: 
25449: /* makeParamRef
25450:  * Creates a new PGParamRef node
25451:  */
25452: static PGNode* makeParamRef(int number, int location)
25453: {
25454: 	PGParamRef *p = makeNode(PGParamRef);
25455: 	p->number = number;
25456: 	p->location = location;
25457: 	return (PGNode *) p;
25458: }
25459: 
25460: 
25461: /* insertSelectOptions()
25462:  * Insert ORDER BY, etc into an already-constructed SelectStmt.
25463:  *
25464:  * This routine is just to avoid duplicating code in PGSelectStmt productions.
25465:  */
25466: static void
25467: insertSelectOptions(PGSelectStmt *stmt,
25468: 					PGList *sortClause, PGList *lockingClause,
25469: 					PGNode *limitOffset, PGNode *limitCount,
25470: 					PGWithClause *withClause,
25471: 					core_yyscan_t yyscanner)
25472: {
25473: 	Assert(IsA(stmt, PGSelectStmt));
25474: 
25475: 	/*
25476: 	 * Tests here are to reject constructs like
25477: 	 *	(SELECT foo ORDER BY bar) ORDER BY baz
25478: 	 */
25479: 	if (sortClause)
25480: 	{
25481: 		if (stmt->sortClause)
25482: 			ereport(ERROR,
25483: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
25484: 					 errmsg("multiple ORDER BY clauses not allowed"),
25485: 					 parser_errposition(exprLocation((PGNode *) sortClause))));
25486: 		stmt->sortClause = sortClause;
25487: 	}
25488: 	/* We can handle multiple locking clauses, though */
25489: 	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
25490: 	if (limitOffset)
25491: 	{
25492: 		if (stmt->limitOffset)
25493: 			ereport(ERROR,
25494: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
25495: 					 errmsg("multiple OFFSET clauses not allowed"),
25496: 					 parser_errposition(exprLocation(limitOffset))));
25497: 		stmt->limitOffset = limitOffset;
25498: 	}
25499: 	if (limitCount)
25500: 	{
25501: 		if (stmt->limitCount)
25502: 			ereport(ERROR,
25503: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
25504: 					 errmsg("multiple LIMIT clauses not allowed"),
25505: 					 parser_errposition(exprLocation(limitCount))));
25506: 		stmt->limitCount = limitCount;
25507: 	}
25508: 	if (withClause)
25509: 	{
25510: 		if (stmt->withClause)
25511: 			ereport(ERROR,
25512: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
25513: 					 errmsg("multiple WITH clauses not allowed"),
25514: 					 parser_errposition(exprLocation((PGNode *) withClause))));
25515: 		stmt->withClause = withClause;
25516: 	}
25517: }
25518: 
25519: static PGNode *
25520: makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
25521: {
25522: 	PGSelectStmt *n = makeNode(PGSelectStmt);
25523: 
25524: 	n->op = op;
25525: 	n->all = all;
25526: 	n->larg = (PGSelectStmt *) larg;
25527: 	n->rarg = (PGSelectStmt *) rarg;
25528: 	return (PGNode *) n;
25529: }
25530: 
25531: /* SystemFuncName()
25532:  * Build a properly-qualified reference to a built-in function.
25533:  */
25534: PGList *
25535: SystemFuncName(const char *name)
25536: {
25537: 	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
25538: }
25539: 
25540: /* SystemTypeName()
25541:  * Build a properly-qualified reference to a built-in type.
25542:  *
25543:  * typmod is defaulted, but may be changed afterwards by caller.
25544:  * Likewise for the location.
25545:  */
25546: PGTypeName *
25547: SystemTypeName(const char *name)
25548: {
25549: 	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
25550: 											   makeString(name)));
25551: }
25552: 
25553: /* doNegate()
25554:  * Handle negation of a numeric constant.
25555:  *
25556:  * Formerly, we did this here because the optimizer couldn't cope with
25557:  * indexquals that looked like "var = -4" --- it wants "var = const"
25558:  * and a unary minus operator applied to a constant didn't qualify.
25559:  * As of Postgres 7.0, that problem doesn't exist anymore because there
25560:  * is a constant-subexpression simplifier in the optimizer.  However,
25561:  * there's still a good reason for doing this here, which is that we can
25562:  * postpone committing to a particular internal representation for simple
25563:  * negative constants.	It's better to leave "-123.456" in string form
25564:  * until we know what the desired type is.
25565:  */
25566: static PGNode *
25567: doNegate(PGNode *n, int location)
25568: {
25569: 	if (IsA(n, PGAConst))
25570: 	{
25571: 		PGAConst *con = (PGAConst *)n;
25572: 
25573: 		/* report the constant's location as that of the '-' sign */
25574: 		con->location = location;
25575: 
25576: 		if (con->val.type == T_PGInteger)
25577: 		{
25578: 			con->val.val.ival = -con->val.val.ival;
25579: 			return n;
25580: 		}
25581: 		if (con->val.type == T_PGFloat)
25582: 		{
25583: 			doNegateFloat(&con->val);
25584: 			return n;
25585: 		}
25586: 	}
25587: 
25588: 	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
25589: }
25590: 
25591: static void
25592: doNegateFloat(PGValue *v)
25593: {
25594: 	char   *oldval = v->val.str;
25595: 
25596: 	Assert(IsA(v, PGFloat));
25597: 	if (*oldval == '+')
25598: 		oldval++;
25599: 	if (*oldval == '-')
25600: 		v->val.str = oldval+1;	/* just strip the '-' */
25601: 	else
25602: 		v->val.str = psprintf("-%s", oldval);
25603: }
25604: 
25605: static PGNode *
25606: makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
25607: {
25608: 	PGNode	   *lexp = lexpr;
25609: 
25610: 	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
25611: 	while (IsA(lexp, PGAExpr) &&
25612: 		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
25613: 		lexp = ((PGAExpr *) lexp)->lexpr;
25614: 	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
25615: 	if (IsA(lexp, PGBoolExpr))
25616: 	{
25617: 		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;
25618: 
25619: 		if (blexpr->boolop == PG_AND_EXPR)
25620: 		{
25621: 			blexpr->args = lappend(blexpr->args, rexpr);
25622: 			return (PGNode *) blexpr;
25623: 		}
25624: 	}
25625: 	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
25626: }
25627: 
25628: static PGNode *
25629: makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
25630: {
25631: 	PGNode	   *lexp = lexpr;
25632: 
25633: 	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
25634: 	while (IsA(lexp, PGAExpr) &&
25635: 		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
25636: 		lexp = ((PGAExpr *) lexp)->lexpr;
25637: 	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
25638: 	if (IsA(lexp, PGBoolExpr))
25639: 	{
25640: 		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;
25641: 
25642: 		if (blexpr->boolop == PG_OR_EXPR)
25643: 		{
25644: 			blexpr->args = lappend(blexpr->args, rexpr);
25645: 			return (PGNode *) blexpr;
25646: 		}
25647: 	}
25648: 	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
25649: }
25650: 
25651: static PGNode *
25652: makeNotExpr(PGNode *expr, int location)
25653: {
25654: 	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
25655: }
25656: 
25657: static PGNode *
25658: makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
25659: {
25660: 	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);
25661: 
25662: 	svf->op = op;
25663: 	/* svf->type will be filled during parse analysis */
25664: 	svf->typmod = typmod;
25665: 	svf->location = location;
25666: 	return (PGNode *) svf;
25667: }
25668: 
25669: /* Separate PGConstraint nodes from COLLATE clauses in a */
25670: static void
25671: SplitColQualList(PGList *qualList,
25672: 				 PGList **constraintList, PGCollateClause **collClause,
25673: 				 core_yyscan_t yyscanner)
25674: {
25675: 	PGListCell   *cell;
25676: 	PGListCell   *prev;
25677: 	PGListCell   *next;
25678: 
25679: 	*collClause = NULL;
25680: 	prev = NULL;
25681: 	for (cell = list_head(qualList); cell; cell = next)
25682: 	{
25683: 		PGNode   *n = (PGNode *) lfirst(cell);
25684: 
25685: 		next = lnext(cell);
25686: 		if (IsA(n, PGConstraint))
25687: 		{
25688: 			/* keep it in list */
25689: 			prev = cell;
25690: 			continue;
25691: 		}
25692: 		if (IsA(n, PGCollateClause))
25693: 		{
25694: 			PGCollateClause *c = (PGCollateClause *) n;
25695: 
25696: 			if (*collClause)
25697: 				ereport(ERROR,
25698: 						(errcode(PG_ERRCODE_SYNTAX_ERROR),
25699: 						 errmsg("multiple COLLATE clauses not allowed"),
25700: 						 parser_errposition(c->location)));
25701: 			*collClause = c;
25702: 		}
25703: 		else
25704: 			elog(ERROR, "unexpected node type %d", (int) n->type);
25705: 		/* remove non-Constraint nodes from qualList */
25706: 		qualList = list_delete_cell(qualList, cell, prev);
25707: 	}
25708: 	*constraintList = qualList;
25709: }
25710: 
25711: /*
25712:  * Process result of ConstraintAttributeSpec, and set appropriate bool flags
25713:  * in the output command node.  Pass NULL for any flags the particular
25714:  * command doesn't support.
25715:  */
25716: static void
25717: processCASbits(int cas_bits, int location, const char *constrType,
25718: 			   bool *deferrable, bool *initdeferred, bool *not_valid,
25719: 			   bool *no_inherit, core_yyscan_t yyscanner)
25720: {
25721: 	/* defaults */
25722: 	if (deferrable)
25723: 		*deferrable = false;
25724: 	if (initdeferred)
25725: 		*initdeferred = false;
25726: 	if (not_valid)
25727: 		*not_valid = false;
25728: 
25729: 	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
25730: 	{
25731: 		if (deferrable)
25732: 			*deferrable = true;
25733: 		else
25734: 			ereport(ERROR,
25735: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
25736: 					 /* translator: %s is CHECK, UNIQUE, or similar */
25737: 					 errmsg("%s constraints cannot be marked DEFERRABLE",
25738: 							constrType),
25739: 					 parser_errposition(location)));
25740: 	}
25741: 
25742: 	if (cas_bits & CAS_INITIALLY_DEFERRED)
25743: 	{
25744: 		if (initdeferred)
25745: 			*initdeferred = true;
25746: 		else
25747: 			ereport(ERROR,
25748: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
25749: 					 /* translator: %s is CHECK, UNIQUE, or similar */
25750: 					 errmsg("%s constraints cannot be marked DEFERRABLE",
25751: 							constrType),
25752: 					 parser_errposition(location)));
25753: 	}
25754: 
25755: 	if (cas_bits & CAS_NOT_VALID)
25756: 	{
25757: 		if (not_valid)
25758: 			*not_valid = true;
25759: 		else
25760: 			ereport(ERROR,
25761: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
25762: 					 /* translator: %s is CHECK, UNIQUE, or similar */
25763: 					 errmsg("%s constraints cannot be marked NOT VALID",
25764: 							constrType),
25765: 					 parser_errposition(location)));
25766: 	}
25767: 
25768: 	if (cas_bits & CAS_NO_INHERIT)
25769: 	{
25770: 		if (no_inherit)
25771: 			*no_inherit = true;
25772: 		else
25773: 			ereport(ERROR,
25774: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
25775: 					 /* translator: %s is CHECK, UNIQUE, or similar */
25776: 					 errmsg("%s constraints cannot be marked NO INHERIT",
25777: 							constrType),
25778: 					 parser_errposition(location)));
25779: 	}
25780: }
25781: 
25782: /*----------
25783:  * Recursive view transformation
25784:  *
25785:  * Convert
25786:  *
25787:  *     CREATE RECURSIVE VIEW relname (aliases) AS query
25788:  *
25789:  * to
25790:  *
25791:  *     CREATE VIEW relname (aliases) AS
25792:  *         WITH RECURSIVE relname (aliases) AS (query)
25793:  *         SELECT aliases FROM relname
25794:  *
25795:  * Actually, just the WITH ... part, which is then inserted into the original
25796:  * view as the query.
25797:  * ----------
25798:  */
25799: static PGNode *
25800: makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
25801: {
25802: 	PGSelectStmt *s = makeNode(PGSelectStmt);
25803: 	PGWithClause *w = makeNode(PGWithClause);
25804: 	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
25805: 	PGList	   *tl = NIL;
25806: 	PGListCell   *lc;
25807: 
25808: 	/* create common table expression */
25809: 	cte->ctename = relname;
25810: 	cte->aliascolnames = aliases;
25811: 	cte->ctequery = query;
25812: 	cte->location = -1;
25813: 
25814: 	/* create WITH clause and attach CTE */
25815: 	w->recursive = true;
25816: 	w->ctes = list_make1(cte);
25817: 	w->location = -1;
25818: 
25819: 	/* create target list for the new SELECT from the alias list of the
25820: 	 * recursive view specification */
25821: 	foreach (lc, aliases)
25822: 	{
25823: 		PGResTarget *rt = makeNode(PGResTarget);
25824: 
25825: 		rt->name = NULL;
25826: 		rt->indirection = NIL;
25827: 		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
25828: 		rt->location = -1;
25829: 
25830: 		tl = lappend(tl, rt);
25831: 	}
25832: 
25833: 	/* create new SELECT combining WITH clause, target list, and fake FROM
25834: 	 * clause */
25835: 	s->withClause = w;
25836: 	s->targetList = tl;
25837: 	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));
25838: 
25839: 	return (PGNode *) s;
25840: }
25841: 
25842: /* parser_init()
25843:  * Initialize to parse one query string
25844:  */
25845: void
25846: parser_init(base_yy_extra_type *yyext)
25847: {
25848: 	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
25849: }
25850: 
25851: #undef yyparse
25852: #undef yylex
25853: #undef yyerror
25854: #undef yylval
25855: #undef yychar
25856: #undef yydebug
25857: #undef yynerrs
25858: #undef yylloc
25859: 
25860: } // namespace duckdb_libpgquery
25861: 
[end of third_party/libpg_query/src_backend_parser_gram.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: