{
  "repo": "duckdb/duckdb",
  "pull_number": 16880,
  "instance_id": "duckdb__duckdb-16880",
  "issue_numbers": [
    "16863"
  ],
  "base_commit": "ca91dfd833972619a0ada1dacd719f884c669e25",
  "patch": "diff --git a/src/optimizer/pushdown/pushdown_left_join.cpp b/src/optimizer/pushdown/pushdown_left_join.cpp\nindex 8ac7d3e8472c..002bb2540de8 100644\n--- a/src/optimizer/pushdown/pushdown_left_join.cpp\n+++ b/src/optimizer/pushdown/pushdown_left_join.cpp\n@@ -6,6 +6,7 @@\n #include \"duckdb/common/types/value.hpp\"\n #include \"duckdb/common/unique_ptr.hpp\"\n #include \"duckdb/common/unordered_map.hpp\"\n+#include \"duckdb/common/vector.hpp\"\n #include \"duckdb/execution/expression_executor.hpp\"\n #include \"duckdb/optimizer/filter_pushdown.hpp\"\n #include \"duckdb/optimizer/optimizer.hpp\"\n@@ -15,6 +16,7 @@\n #include \"duckdb/planner/expression/bound_comparison_expression.hpp\"\n #include \"duckdb/planner/expression/bound_constant_expression.hpp\"\n #include \"duckdb/planner/expression_iterator.hpp\"\n+#include \"duckdb/planner/joinside.hpp\"\n #include \"duckdb/planner/logical_operator.hpp\"\n #include \"duckdb/planner/operator/logical_any_join.hpp\"\n #include \"duckdb/planner/operator/logical_comparison_join.hpp\"\n@@ -95,6 +97,7 @@ unique_ptr<LogicalOperator> FilterPushdown::PushdownLeftJoin(unique_ptr<LogicalO\n \t\t}\n \t}\n \t// now check the set of filters\n+\tvector<unique_ptr<Filter>> remaining_filters;\n \tfor (idx_t i = 0; i < filters.size(); i++) {\n \t\tauto side = JoinSide::GetJoinSide(filters[i]->bindings, left_bindings, right_bindings);\n \t\tif (side == JoinSide::LEFT) {\n@@ -127,6 +130,12 @@ unique_ptr<LogicalOperator> FilterPushdown::PushdownLeftJoin(unique_ptr<LogicalO\n \t\t\t\t// now push down the inner join\n \t\t\t\treturn PushdownInnerJoin(std::move(op), left_bindings, right_bindings);\n \t\t\t}\n+\t\t\t// we should keep the filters which only matched the right side\n+\t\t\tif (side == JoinSide::RIGHT) {\n+\t\t\t\tremaining_filters.push_back(std::move(filters[i]));\n+\t\t\t\tfilters.erase_at(i);\n+\t\t\t\ti--;\n+\t\t\t}\n \t\t}\n \t}\n \t// finally we check the FilterCombiner to see if there are any predicates we can push into the RHS\n@@ -185,6 +194,10 @@ unique_ptr<LogicalOperator> FilterPushdown::PushdownLeftJoin(unique_ptr<LogicalO\n \t\top->children[1] = right_pushdown.Rewrite(std::move(op->children[1]));\n \t}\n \n+\tfor (auto &filter : remaining_filters) {\n+\t\tfilters.push_back(std::move(filter));\n+\t}\n+\n \treturn PushFinalFilters(std::move(op));\n }\n \n",
  "test_patch": "diff --git a/test/optimizer/pushdown/issue_16863.test b/test/optimizer/pushdown/issue_16863.test\nnew file mode 100644\nindex 000000000000..2919d379393b\n--- /dev/null\n+++ b/test/optimizer/pushdown/issue_16863.test\n@@ -0,0 +1,18 @@\n+# name: test/optimizer/pushdown/issue_16863.test\n+# description: Test right join filter lost in filter pushdown\n+# group: [pushdown]\n+\n+statement ok\n+pragma enable_verification\n+\n+statement ok\n+CREATE TABLE t1 (c1 DATE);\n+\n+statement ok\n+INSERT INTO t1 (c1) VALUES ('2023-10-31');\n+\n+query II\n+SELECT t1.c1, (t1.c1 IS NULL)\n+FROM t1 RIGHT JOIN (SELECT NULL AS col0 FROM t1) AS sub0 ON true\n+WHERE (t1.c1 IS NULL);\n+----\n",
  "problem_statement": "Unexpected result when `RIGHT JOIN` with a subquery\n### What happens?\n\nConsider the following test case. The query unexpectedly returns a row `2023-10-31 false`. If the expression `t1.c1 IS NULL` is evaluated as `false`, then the filter should be evaluated as `false` and the query should return an empty result.\n\nMySQL or PostgreSQL can return the expected results.\n\n### To Reproduce\n\n```sql\nCREATE TABLE t1 (c1 DATE);\nINSERT INTO t1 (c1) VALUES ('2023-10-31');\n\nSELECT t1.c1, (t1.c1 IS NULL)\nFROM t1 RIGHT JOIN (SELECT NULL AS col0 FROM t1) AS sub0 ON true\nWHERE (t1.c1 IS NULL);\n-- Expected: empty\n-- Actual: 2023-10-31 false\n\n```\n\n### OS:\n\nUbuntu 22.04\n\n### DuckDB Version:\n\nv1.3.0-dev1894 77849ba91c\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nSuyang Zhong\n\n### Affiliation:\n\nNUS\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n",
  "hints_text": "",
  "created_at": "2025-03-28T07:13:49Z"
}