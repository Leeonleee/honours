{
  "repo": "duckdb/duckdb",
  "pull_number": 6239,
  "instance_id": "duckdb__duckdb-6239",
  "issue_numbers": [
    "6238"
  ],
  "base_commit": "8dfa7815d0bb6b81282fec16284b339fbd474d12",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\nindex 5731c1ce90f6..e1e461025264 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n@@ -386,7 +386,7 @@ public boolean supportsSchemasInPrivilegeDefinitions() throws SQLException {\n \n \t@Override\n \tpublic boolean supportsCatalogsInDataManipulation() throws SQLException {\n-\t\treturn false;\n+\t\treturn true;\n \t}\n \n \t@Override\n@@ -396,12 +396,12 @@ public boolean supportsCatalogsInProcedureCalls() throws SQLException {\n \n \t@Override\n \tpublic boolean supportsCatalogsInTableDefinitions() throws SQLException {\n-\t\treturn false;\n+\t\treturn true;\n \t}\n \n \t@Override\n \tpublic boolean supportsCatalogsInIndexDefinitions() throws SQLException {\n-\t\treturn false;\n+\t\treturn true;\n \t}\n \n \t@Override\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex a5a4e44c3c9d..3d356fd4e5de 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -2605,6 +2605,196 @@ public static void test_supportsLikeEscapeClause_shouldBe_true() throws Exceptio\n \t\t);\n \t}\n \t\n+\tpublic static void test_supports_catalogs_in_table_definitions() throws Exception {\n+\t\tfinal String CATALOG_NAME = \"tmp\";\n+\t\tfinal String TABLE_NAME = \"t1\";\n+\t\tfinal String IS_TablesQuery = \"SELECT * FROM information_schema.tables \"+\n+\t\t\tString.format(\"WHERE table_catalog = '%s' \", CATALOG_NAME)+\n+\t\t\tString.format(\"AND table_name = '%s'\", TABLE_NAME)\n+\t\t;\n+\t\tfinal String QUALIFIED_TABLE_NAME = CATALOG_NAME + \".\" + TABLE_NAME;\n+\t\tResultSet resultSet = null;\n+\t\ttry (\n+\t\t\t\tfinal Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\t\t\tfinal Statement statement = connection.createStatement();\n+\t\t){\n+\t\t\tfinal DatabaseMetaData databaseMetaData = connection.getMetaData();\n+\t\t\tstatement.execute(String.format(\"ATTACH '' AS \\\"%s\\\"\", CATALOG_NAME));\n+\n+\t\t\tfinal boolean supportsCatalogsInTableDefinitions = databaseMetaData.supportsCatalogsInTableDefinitions();\n+\t\t\ttry {\n+\t\t\t\tstatement.execute(String.format(\"CREATE TABLE %s (id int)\", QUALIFIED_TABLE_NAME));\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tif (supportsCatalogsInTableDefinitions) {\n+\t\t\t\t\tfail(\n+\t\t\t\t\t\t\"supportsCatalogsInTableDefinitions is true but CREATE TABLE in attached database is not allowed. \"+\n+\t\t\t\t\t\tex.getMessage()\n+\t\t\t\t\t);\n+\t\t\t\t\tex.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tresultSet = statement.executeQuery(IS_TablesQuery);\n+\t\t\tassertTrue(resultSet.next(), \"Expected exactly 1 row from information_schema.tables, got 0\");\n+\t\t\tassertFalse(resultSet.next());\n+\t\t\tresultSet.close();\n+\n+\t\t\ttry {\n+\t\t\t\tstatement.execute(String.format(\"DROP TABLE %s\", QUALIFIED_TABLE_NAME));\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tif (supportsCatalogsInTableDefinitions) {\n+\t\t\t\t\tfail(\n+\t\t\t\t\t\t\"supportsCatalogsInTableDefinitions is true but DROP TABLE in attached database is not allowed. \" + \n+\t\t\t\t\t\tex.getMessage()\n+\t\t\t\t\t);\n+\t\t\t\t\tex.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tresultSet = statement.executeQuery(IS_TablesQuery);\n+\t\t\tassertTrue(resultSet.next() == false, \"Expected exactly 0 rows from information_schema.tables, got > 0\");\n+\t\t\tresultSet.close();\n+\n+\t\t\tassertTrue(supportsCatalogsInTableDefinitions, \"supportsCatalogsInTableDefinitions should return true.\");\n+\t\t} \n+\t}\n+\n+\tpublic static void test_supports_catalogs_in_data_manipulation() throws Exception {\n+\t\tfinal String CATALOG_NAME = \"tmp\";\n+\t\tfinal String TABLE_NAME = \"t1\";\n+\t\tfinal String COLUMN_NAME = \"id\";\n+\t\tfinal String QUALIFIED_TABLE_NAME = CATALOG_NAME + \".\" + TABLE_NAME;\n+\n+\t\tResultSet resultSet = null;\n+\t\ttry (\n+\t\t\tfinal Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\t\tfinal Statement statement = connection.createStatement();\n+\t\t){\n+\t\t\tfinal DatabaseMetaData databaseMetaData = connection.getMetaData();\n+\t\t\tstatement.execute(String.format(\"ATTACH '' AS \\\"%s\\\"\", CATALOG_NAME));\n+\t\t\tstatement.execute(String.format(\"CREATE TABLE %s(%s int)\", QUALIFIED_TABLE_NAME, COLUMN_NAME));\n+\t\t\t\n+\t\t\tfinal boolean supportsCatalogsInDataManipulation = databaseMetaData.supportsCatalogsInDataManipulation();\n+\t\t\ttry {\n+\t\t\t\tstatement.execute(String.format(\"INSERT INTO %s VALUES(1)\", QUALIFIED_TABLE_NAME));\n+\t\t\t\tresultSet = statement.executeQuery(String.format(\"SELECT * FROM %s\", QUALIFIED_TABLE_NAME));\n+\t\t\t\tassertTrue(resultSet.next(), \"Expected exactly 1 row from \" + QUALIFIED_TABLE_NAME + \", got 0\");\n+\t\t\t\tassertTrue(resultSet.getInt(COLUMN_NAME) == 1, \"Value for \" + COLUMN_NAME + \" should be 1\");\n+\t\t\t\tresultSet.close();\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tif (supportsCatalogsInDataManipulation) {\n+\t\t\t\t\tfail(\n+\t\t\t\t\t\t\"supportsCatalogsInDataManipulation is true but INSERT in \" + QUALIFIED_TABLE_NAME + \" is not allowed.\" + \n+\t\t\t\t\t\tex.getMessage()\n+\t\t\t\t  );\n+\t\t\t\t\tex.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\tstatement.execute(String.format(\"UPDATE %1$s SET %2$s = 2 WHERE %2$s = 1\", QUALIFIED_TABLE_NAME, COLUMN_NAME));\n+\t\t\t\tresultSet = statement.executeQuery(String.format(\"SELECT * FROM %s\", QUALIFIED_TABLE_NAME));\n+\t\t\t\tassertTrue(resultSet.next(), \"Expected exactly 1 row from \" + QUALIFIED_TABLE_NAME + \", got 0\");\n+\t\t\t\tassertTrue(resultSet.getInt(COLUMN_NAME) == 2, \"Value for \" + COLUMN_NAME + \" should be 2\");\n+\t\t\t\tresultSet.close();\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tif (supportsCatalogsInDataManipulation) {\n+\t\t\t\t\tfail(\n+\t\t\t\t\t\t\"supportsCatalogsInDataManipulation is true but UPDATE of \" + QUALIFIED_TABLE_NAME + \" is not allowed. \"+\n+\t\t\t\t\t\tex.getMessage()\n+\t\t\t\t\t);\n+\t\t\t\t\tex.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\tstatement.execute(String.format(\"DELETE FROM %s WHERE %s = 2\", QUALIFIED_TABLE_NAME, COLUMN_NAME));\n+\t\t\t\tresultSet = statement.executeQuery(String.format(\"SELECT * FROM %s\", QUALIFIED_TABLE_NAME));\n+\t\t\t\tassertTrue(resultSet.next() == false, \"Expected 0 rows from \" + QUALIFIED_TABLE_NAME + \", got > 0\");\n+\t\t\t\tresultSet.close();\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tif (supportsCatalogsInDataManipulation) {\n+\t\t\t\t\tfail(\n+\t\t\t\t\t\t\"supportsCatalogsInDataManipulation is true but UPDATE of \" + QUALIFIED_TABLE_NAME + \" is not allowed. \"+\n+\t\t\t\t\t\tex.getMessage()\n+\t\t\t\t\t);\n+\t\t\t\t\tex.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\tassertTrue(supportsCatalogsInDataManipulation, \"supportsCatalogsInDataManipulation should return true.\");\n+\t\t} \n+\t}\n+\n+\tpublic static void test_supports_catalogs_in_index_definitions() throws Exception {\n+\t\tfinal String CATALOG_NAME = \"tmp\";\n+\t\tfinal String TABLE_NAME = \"t1\";\n+\t\tfinal String INDEX_NAME = \"idx1\";\n+\t\tfinal String QUALIFIED_TABLE_NAME = CATALOG_NAME + \".\" + TABLE_NAME;\n+\t\tfinal String QUALIFIED_INDEX_NAME = CATALOG_NAME + \".\" + INDEX_NAME;\n+\n+\t\tResultSet resultSet = null;\n+\t\ttry (\n+\t\t\tfinal Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\t\tfinal Statement statement = connection.createStatement();\n+\t\t){\n+\t\t\tfinal DatabaseMetaData databaseMetaData = connection.getMetaData();\n+\t\t\tstatement.execute(String.format(\"ATTACH '' AS \\\"%s\\\"\", CATALOG_NAME ) );\n+\t\t\t\n+\t\t\tfinal boolean supportsCatalogsInIndexDefinitions = databaseMetaData.supportsCatalogsInIndexDefinitions();\n+\t\t\ttry {\n+\t\t\t\tstatement.execute(String.format(\"CREATE TABLE %s(id int)\", QUALIFIED_TABLE_NAME));\n+\t\t\t\tstatement.execute(String.format(\"CREATE INDEX %s ON %s(id)\", INDEX_NAME, QUALIFIED_TABLE_NAME));\n+\t\t\t\tresultSet = statement.executeQuery(\n+\t\t\t\t\tString.format(\n+\t\t\t\t\t\t\"SELECT * FROM duckdb_indexes() \" +\n+\t\t\t\t\t\t\"WHERE database_name = '%s' AND table_name = '%s' AND index_name = '%s' \", \n+\t\t\t\t\t\tCATALOG_NAME, TABLE_NAME, INDEX_NAME\n+\t\t\t\t\t)\n+\t\t\t\t);\n+\t\t\t\tassertTrue(resultSet.next(), \"Expected exactly 1 row from duckdb_indexes(), got 0\");\n+\t\t\t\tresultSet.close();\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tif (supportsCatalogsInIndexDefinitions) {\n+\t\t\t\t\tfail(\n+\t\t\t\t\t\t\"supportsCatalogsInIndexDefinitions is true but \" +\n+\t\t\t\t\t\t\"CREATE INDEX on \" + QUALIFIED_TABLE_NAME + \" is not allowed. \" +\n+\t\t\t\t\t\tex.getMessage()\n+\t\t\t\t\t);\n+\t\t\t\t\tex.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\tstatement.execute(\"DROP index \" + QUALIFIED_INDEX_NAME);\n+\t\t\t\tresultSet = statement.executeQuery(\n+\t\t\t\t\tString.format(\n+\t\t\t\t\t\t\"SELECT * FROM duckdb_indexes() \" + \n+\t\t\t\t\t\t\"WHERE database_name = '%s' AND table_name = '%s' AND index_name = '%s'\",\n+\t\t\t\t\t\tCATALOG_NAME, TABLE_NAME, INDEX_NAME\n+\t\t\t\t\t)\n+\t\t\t\t);\n+\t\t\t\tassertFalse(resultSet.next());\n+\t\t\t\tresultSet.close();\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tif (supportsCatalogsInIndexDefinitions) {\n+\t\t\t\t\tfail(\n+\t\t\t\t\t\t\"supportsCatalogsInIndexDefinitions is true but DROP of \" + QUALIFIED_INDEX_NAME + \" is not allowed.\" +\n+\t\t\t\t\t\tex.getMessage()\n+\t\t\t\t\t);\n+\t\t\t\t\tex.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\tassertTrue(supportsCatalogsInIndexDefinitions, \"supportsCatalogsInIndexDefinitions should return true.\");\n+\t\t} \n+\t}\n+\n \tpublic static void main(String[] args) throws Exception {\n \t\t// Woo I can do reflection too, take this, JUnit!\n \t\tMethod[] methods = TestDuckDBJDBC.class.getMethods();\n@@ -2633,8 +2823,7 @@ public int compare(Method o1, Method o2) {\n \t\t\t\tLocalDateTime start = LocalDateTime.now();\n \t\t\t\ttry {\n \t\t\t\t\tm.invoke(null);\n-\t\t\t\t\tSystem.out.println(\n-\t\t\t\t\t\t\t\"success in \" + Duration.between(start, LocalDateTime.now()).getSeconds() + \" seconds\");\n+\t\t\t\t\tSystem.out.println(\"success in \" + Duration.between(start, LocalDateTime.now()).getSeconds() + \" seconds\");\n \t\t\t\t} catch (Throwable t) {\n \t\t\t\t\tSystem.out.println(\"failed with \" + t);\n \t\t\t\t\tt.printStackTrace(System.out);\n",
  "problem_statement": "DuckDBJ: DuckDBDatabaseMetaData.supportsCatalogsIn%() methods should return true\n### What happens?\n\nInterface DatabaseMetaData provides these methods:\r\n\r\n- supportsCatalogsInDataManipulation: \"Retrieves whether a catalog name can be used in a data manipulation statement\", see: https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsCatalogsInDataManipulation()\r\n- supportsCatalogsInIndexDefinitions: \"Retrieves whether a catalog name can be used in an index definition statement.\"  https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsCatalogsInIndexDefinitions()\r\n- supportsCatalogsInTableDefinitions: \"Retrieves whether a catalog name can be used in a table definition statement.\" https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsCatalogsInTableDefinitions()\r\n\r\nThe respective implementations in DuckDBDatabaseMetaData always return false. \r\n\r\nI believe they should return true, as duckdb lets you use catalog qualified names to manipulate objects in attached databases. \n\n### To Reproduce\n\nTest for https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsCatalogsInTableDefinitions():\r\n\r\n```\r\n\tpublic static void test_supports_catalogs_in_table_definitions() throws Exception {\r\n\t\tfinal Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\r\n\t\tfinal Statement statement = connection.createStatement();\r\n\t\tfinal DatabaseMetaData databaseMetaData = connection.getMetaData();\r\n\t\tfinal String CATALOG_NAME = \"tmp\";\r\n\t\tfinal String TABLE_NAME = \"t1\";\r\n\t\tfinal String qualifiedTableName = CATALOG_NAME + \".\" + TABLE_NAME;\r\n\t\tResultSet resultSet = null;\r\n\t\ttry {\r\n\t\t\tfinal File file = Files.createTempFile(\"duckdb-jdbc-test-\", \".duckdb\").toFile();\r\n\t\t\tfile.delete();\r\n\t\t\tstatement.execute(\"ATTACH '\" + file.getAbsolutePath() + \"' AS \\\"\" + CATALOG_NAME + \"\\\"\");\r\n\t\t\tfile.deleteOnExit();\r\n\t\t\t\r\n\t\t\tfinal boolean supportsCatalogsInTableDefinitions = databaseMetaData.supportsCatalogsInTableDefinitions();\r\n\t\t\ttry {\r\n\t\t\t\tstatement.execute(\"CREATE TABLE \" + qualifiedTableName + \"(id int)\");\r\n\t\t\t}\r\n\t\t\tcatch (SQLException ex) {\r\n\t\t\t\tif (supportsCatalogsInTableDefinitions) {\r\n\t\t\t\t\tfail(\"supportsCatalogsInTableDefinitions is true but CREATE TABLE in attached database is not allowed.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresultSet = statement.executeQuery(\r\n\t\t\t\t\"SELECT * FROM information_schema.tables \"+\r\n\t\t\t\t\"WHERE table_catalog = '\" + CATALOG_NAME + \"' \" +\r\n\t\t\t\t\"AND table_name = '\" + TABLE_NAME + \"' \"\r\n\t\t\t);\r\n\t\t\tassertTrue(resultSet.next(), \"Expected exactly 1 row from information_schema.tables, got 0\");\r\n\t\t\tassertFalse(resultSet.next());\r\n\t\t\tresultSet.close();\r\n\r\n\t\t\ttry {\r\n\t\t\t\tstatement.execute(\"DROP TABLE \" + qualifiedTableName);\r\n\t\t\t}\r\n\t\t\tcatch (SQLException ex) {\r\n\t\t\t\tif (supportsCatalogsInTableDefinitions) {\r\n\t\t\t\t\tfail(\"supportsCatalogsInTableDefinitions is true but DROP TABLE in attached database is not allowed.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresultSet = statement.executeQuery(\r\n\t\t\t\t\"SELECT * FROM information_schema.tables \"+\r\n\t\t\t\t\"WHERE table_catalog = '\" + CATALOG_NAME + \"' \" +\r\n\t\t\t\t\"AND table_name = '\" + TABLE_NAME + \"' \"\r\n\t\t\t);\r\n\t\t\tassertTrue(resultSet.next() == false, \"Expected exactly 0 rows from information_schema.tables, got > 0\");\r\n\t\t\tresultSet.close();\r\n\r\n\t\t\tassertTrue(supportsCatalogsInTableDefinitions, \"supportsCatalogsInTableDefinitions should return true.\");\r\n\t\t} \r\n\t\tfinally {\r\n\t\t\tif (resultSet != null) {\r\n\t\t\t\tresultSet.close();\r\n\t\t\t}\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t}\r\n\t}\r\n```\r\n\r\nTest for https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsCatalogsInDataManipulation()\r\n\r\n```\r\n\tpublic static void test_supports_catalogs_in_data_manipulation() throws Exception {\r\n\t\tfinal File file = Files.createTempFile(\"duckdb-jdbc-test-\", \".duckdb\").toFile();\r\n\t\tfinal String filePath = file.getAbsolutePath();\r\n\t\tfinal String CATALOG_NAME = \"tmp\";\r\n\t\tfinal String TABLE_NAME = \"t1\";\r\n\t\tfinal String qualifiedTableName = CATALOG_NAME + \".\" + TABLE_NAME;\r\n\t\tfile.delete();\r\n\t\tConnection connection = null;\r\n\t\tStatement statement = null;\r\n\t\t\r\n\t\tconnection = DriverManager.getConnection(\"jdbc:duckdb:\" + filePath);\r\n\t\tfile.deleteOnExit();\r\n\t\tstatement = connection.createStatement();\r\n\t\tstatement.execute(\"CREATE TABLE \" + TABLE_NAME + \"(id int)\");\r\n\t\tstatement.close();\r\n\t\tconnection.close();\r\n\t\t\r\n\t\tThread.currentThread().sleep(1000);\r\n\t\t\r\n\t\tconnection = DriverManager.getConnection(\"jdbc:duckdb:\");\r\n\t\tfinal DatabaseMetaData databaseMetaData = connection.getMetaData();\r\n\t\tstatement = connection.createStatement();\r\n\t\tResultSet resultSet = null;\r\n\t\ttry {\r\n\t\t\tstatement.execute(\"ATTACH '\" + filePath + \"' AS \\\"\" + CATALOG_NAME + \"\\\"\");\r\n\t\t\t\r\n\t\t\tfinal boolean supportsCatalogsInDataManipulation = databaseMetaData.supportsCatalogsInDataManipulation();\r\n\t\t\ttry {\r\n\t\t\t\tstatement.execute(\"INSERT INTO \" + qualifiedTableName + \" VALUES(1)\");\r\n\t\t\t\tresultSet = statement.executeQuery(\"SELECT * FROM \"+ qualifiedTableName);\r\n\t\t\t\tassertTrue(resultSet.next(), \"Expected exactly 1 row from \" + qualifiedTableName + \", got 0\");\r\n\t\t\t\tassertTrue(resultSet.getInt(\"ID\") == 1, \"Value for ID should be 1\");\r\n\t\t\t\tresultSet.close();\r\n\t\t\t}\r\n\t\t\tcatch (SQLException ex) {\r\n\t\t\t\tif (supportsCatalogsInDataManipulation) {\r\n\t\t\t\t\tfail(\"supportsCatalogsInDataManipulation is true but INSERT in \" + qualifiedTableName + \" is not allowed.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tstatement.execute(\"UPDATE \" + qualifiedTableName + \" SET ID = 2 WHERE ID = 1\");\r\n\t\t\t\tresultSet = statement.executeQuery(\"SELECT * FROM \"+ qualifiedTableName);\r\n\t\t\t\tassertTrue(resultSet.next(), \"Expected exactly 1 row from \" + qualifiedTableName + \", got 0\");\r\n\t\t\t\tassertTrue(resultSet.getInt(\"ID\") == 2, \"Value for ID should be 2\");\r\n\t\t\t\tresultSet.close();\r\n\t\t\t}\r\n\t\t\tcatch (SQLException ex) {\r\n\t\t\t\tif (supportsCatalogsInDataManipulation) {\r\n\t\t\t\t\tfail(\"supportsCatalogsInDataManipulation is true but UPDATE of \" + qualifiedTableName + \" is not allowed.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tstatement.execute(\"DELETE FROM \" + qualifiedTableName + \" WHERE ID = 2\");\r\n\t\t\t\tresultSet = statement.executeQuery(\"SELECT * FROM \"+ qualifiedTableName);\r\n\t\t\t\tassertTrue(resultSet.next() == false, \"Expected 0 rows from \" + qualifiedTableName + \", got > 0\");\r\n\t\t\t\tresultSet.close();\r\n\t\t\t}\r\n\t\t\tcatch (SQLException ex) {\r\n\t\t\t\tif (supportsCatalogsInDataManipulation) {\r\n\t\t\t\t\tfail(\"supportsCatalogsInDataManipulation is true but UPDATE of \" + qualifiedTableName + \" is not allowed.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tassertTrue(supportsCatalogsInDataManipulation, \"supportsCatalogsInDataManipulation should return true.\");\r\n\t\t} \r\n\t\tfinally {\r\n\t\t\tif (resultSet != null) {\r\n\t\t\t\tresultSet.close();\r\n\t\t\t}\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t}\r\n\t}\r\n```\r\n\r\nTest for https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsCatalogsInIndexDefinitions()\r\n\r\n```\r\n\tpublic static void test_supports_catalogs_in_index_definitions() throws Exception {\r\n\t\tfinal File file = Files.createTempFile(\"duckdb-jdbc-test-\", \".duckdb\").toFile();\r\n\t\tfinal String filePath = file.getAbsolutePath();\r\n\t\tfinal String CATALOG_NAME = \"tmp\";\r\n\t\tfinal String TABLE_NAME = \"t1\";\r\n\t\tfinal String INDEX_NAME = \"idx1\";\r\n\t\tfinal String qualifiedTableName = CATALOG_NAME + \".\" + TABLE_NAME;\r\n\t\tfinal String qualifiedIndexName = CATALOG_NAME + \".\" + INDEX_NAME;\r\n\t\tfile.delete();\r\n\t\tConnection connection = null;\r\n\t\tStatement statement = null;\r\n\t\t\r\n\t\tconnection = DriverManager.getConnection(\"jdbc:duckdb:\" + filePath);\r\n\t\tfile.deleteOnExit();\r\n\t\tstatement = connection.createStatement();\r\n\t\tstatement.execute(\"CREATE TABLE \" + TABLE_NAME + \"(id int)\");\r\n\t\tstatement.close();\r\n\t\tconnection.close();\r\n\t\t\r\n\t\tThread.currentThread().sleep(1000);\r\n\t\t\r\n\t\tconnection = DriverManager.getConnection(\"jdbc:duckdb:\");\r\n\t\tfinal DatabaseMetaData databaseMetaData = connection.getMetaData();\r\n\t\tstatement = connection.createStatement();\r\n\t\tResultSet resultSet = null;\r\n\t\ttry {\r\n\t\t\tstatement.execute(\"ATTACH '\" + filePath + \"' AS \\\"\" + CATALOG_NAME + \"\\\"\");\r\n\t\t\t\r\n\t\t\tfinal boolean supportsCatalogsInIndexDefinitions = databaseMetaData.supportsCatalogsInIndexDefinitions();\r\n\t\t\ttry {\r\n\t\t\t\tstatement.execute(\"CREATE INDEX \" + INDEX_NAME + \" ON \" + qualifiedTableName + \"(ID)\");\r\n\t\t\t\tresultSet = statement.executeQuery(\r\n\t\t\t\t\t\"SELECT * FROM duckdb_indexes() \" +\r\n\t\t\t\t\t\"WHERE database_name = '\" + CATALOG_NAME + \"' \" +\r\n\t\t\t\t\t\"AND table_name = '\" + TABLE_NAME + \"' \" +\r\n\t\t\t\t\t\"WHERE index_name = '\" + INDEX_NAME + \"' \"\r\n\t\t\t\t);\r\n\t\t\t\tassertTrue(resultSet.next(), \"Expected exactly 1 row from duckdb_indexes(), got 0\");\r\n\t\t\t\tresultSet.close();\r\n\t\t\t}\r\n\t\t\tcatch (SQLException ex) {\r\n\t\t\t\tif (supportsCatalogsInIndexDefinitions) {\r\n\t\t\t\t\tfail(\r\n\t\t\t\t\t\t\"supportsCatalogsInIndexDefinitions is true but \" +\r\n\t\t\t\t\t\t\"CREATE INDEX on \" + qualifiedTableName + \" is not allowed.\"\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tstatement.execute(\"DROP index \" + qualifiedIndexName);\r\n\t\t\t\tresultSet = statement.executeQuery(\r\n\t\t\t\t\t\"SELECT * FROM duckdb_indexes() \" +\r\n\t\t\t\t\t\"WHERE database_name = '\" + CATALOG_NAME + \"' \" +\r\n\t\t\t\t\t\"AND table_name = '\" + TABLE_NAME + \"' \" +\r\n\t\t\t\t\t\"WHERE index_name = '\" + INDEX_NAME + \"' \"\r\n\t\t\t\t);\r\n\t\t\t\tassertFalse(resultSet.next());\r\n\t\t\t\tresultSet.close();\r\n\t\t\t}\r\n\t\t\tcatch (SQLException ex) {\r\n\t\t\t\tif (supportsCatalogsInIndexDefinitions) {\r\n\t\t\t\t\tfail(\"supportsCatalogsInIndexDefinitions is true but DROP of \" + qualifiedIndexName + \" is not allowed.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tassertTrue(supportsCatalogsInIndexDefinitions, \"supportsCatalogsInIndexDefinitions should return true.\");\r\n\t\t} \r\n\t\tfinally {\r\n\t\t\tif (resultSet != null) {\r\n\t\t\t\tresultSet.close();\r\n\t\t\t}\r\n\t\t\tstatement.close();\r\n\t\t\tconnection.close();\r\n\t\t}\r\n\t}\r\n```\n\n### OS:\n\nWindows 10 Pro\n\n### DuckDB Version:\n\nv0.6.2-dev2495 8dfa7815d0\n\n### DuckDB Client:\n\nDuckDBJ (jdbc)\n\n### Full Name:\n\nRoland Bouman\n\n### Affiliation:\n\nJust-Bi.nl (an EPAM company) \n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2023-02-13T02:13:35Z"
}