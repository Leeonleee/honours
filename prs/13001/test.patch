diff --git a/test/sql/aggregate/aggregates/histogram_table_function.test b/test/sql/aggregate/aggregates/histogram_table_function.test
index e6b9b876cec7..e5cbb5307c40 100644
--- a/test/sql/aggregate/aggregates/histogram_table_function.test
+++ b/test/sql/aggregate/aggregates/histogram_table_function.test
@@ -22,6 +22,12 @@ SELECT * FROM histogram_values(integers, i, bin_count := 2)
 80	0
 100	1
 
+# missing column
+statement error
+SELECT * FROM histogram_values(integers, k)
+----
+not found in FROM clause
+
 statement ok
 INSERT INTO integers FROM range(127)
 
diff --git a/test/sql/binder/missing_column_error.test b/test/sql/binder/missing_column_error.test
new file mode 100644
index 000000000000..a50047454eaa
--- /dev/null
+++ b/test/sql/binder/missing_column_error.test
@@ -0,0 +1,26 @@
+# name: test/sql/binder/missing_column_error.test
+# description: Correctly report missing column errors instead of lateral joins
+# group: [binder]
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+create table customers (name varchar, age integer, something_easy_to_type_wrong integer, city varchar);
+
+statement ok
+create table zipcodes (city varchar, zipcode varchar);
+
+statement error
+with cte as (
+  select *,
+	  rank() over (order by something_easy_to_typo_wrong) as rk
+  from customers
+  where age <= 42
+)
+select *
+from zipcodes
+join cte
+using (city);
+----
+something_easy_to_type_wrong
diff --git a/test/sql/subquery/scalar/correlated_missing_columns.test b/test/sql/subquery/scalar/correlated_missing_columns.test
new file mode 100644
index 000000000000..1b89ee436ae6
--- /dev/null
+++ b/test/sql/subquery/scalar/correlated_missing_columns.test
@@ -0,0 +1,57 @@
+# name: test/sql/subquery/scalar/correlated_missing_columns.test
+# description: Test correlated missing columns
+# group: [scalar]
+
+require tpch
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+CALL dbgen(sf=0);
+
+# verify that we can grab missing columns from either the correlated subquery or the outer (uncorrelated) subquery
+statement error
+SELECT (SELECT l_linestat FROM orders) FROM lineitem
+----
+lineitem.l_linestatus
+
+statement error
+SELECT (SELECT l_returnfla FROM orders) FROM lineitem
+----
+lineitem.l_returnflag
+
+statement error
+SELECT (SELECT o_totalp FROM orders) FROM lineitem
+----
+orders.o_totalprice
+
+# column exists in outer query but is used in an aggregate
+statement error
+SELECT * FROM lineitem WHERE (SELECT SUM(l_orderkey) > 0)
+----
+cannot contain aggregates
+
+# prefer missing column over unsupported
+# where clause
+statement error
+SELECT * FROM lineitem WHERE (SELECT SUM(o_orderke) FROM orders)
+----
+o_orderkey
+
+statement error
+SELECT * FROM lineitem WHERE (SELECT SUM(o_orderke) OVER () FROM orders)
+----
+o_orderkey
+
+# group by
+statement error
+SELECT * FROM lineitem GROUP BY (SELECT SUM(o_orderke) OVER () FROM orders)
+----
+o_orderkey
+
+# limit
+statement error
+SELECT * FROM lineitem LIMIT (SELECT SUM(o_orderke) FROM orders LIMIT 1)
+----
+o_orderkey
