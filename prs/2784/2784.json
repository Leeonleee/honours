{
  "repo": "duckdb/duckdb",
  "pull_number": 2784,
  "instance_id": "duckdb__duckdb-2784",
  "issue_numbers": [
    "1342"
  ],
  "base_commit": "d0670872fe61b5d581bb3a28c7f05c60dc086a3b",
  "patch": "diff --git a/tools/nodejs/package.json b/tools/nodejs/package.json\nindex 90c757aa6d34..54dab4eba8dc 100644\n--- a/tools/nodejs/package.json\n+++ b/tools/nodejs/package.json\n@@ -25,8 +25,8 @@\n     \"test\": \"test\"\n   },\n   \"devDependencies\": {\n-    \"mocha\": \"^8.3.0\",\n-    \"aws-sdk\": \"^2.790.0\"\n+    \"aws-sdk\": \"^2.790.0\",\n+    \"mocha\": \"^8.3.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\ndiff --git a/tools/nodejs/src/statement.cpp b/tools/nodejs/src/statement.cpp\nindex 40820b104e7d..a0fec39846b0 100644\n--- a/tools/nodejs/src/statement.cpp\n+++ b/tools/nodejs/src/statement.cpp\n@@ -171,6 +171,9 @@ static Napi::Value convert_chunk(Napi::Env &env, std::vector<std::string> names,\n \t\t\tcase duckdb::LogicalTypeId::VARCHAR: {\n \t\t\t\tvalue = Napi::String::New(env, dval.str_value);\n \t\t\t} break;\n+\t\t\tcase duckdb::LogicalTypeId::BOOLEAN: {\n+\t\t\t\tvalue = Napi::Boolean::New(env, dval.value_.boolean);\n+\t\t\t} break;\n \t\t\tcase duckdb::LogicalTypeId::BLOB: {\n \t\t\t\tvalue = Napi::Buffer<char>::Copy(env, dval.str_value.c_str(), dval.str_value.length());\n \t\t\t} break;\n",
  "test_patch": "diff --git a/tools/nodejs/test/data_type_support.test.js b/tools/nodejs/test/data_type_support.test.js\nnew file mode 100644\nindex 000000000000..da615bc56991\n--- /dev/null\n+++ b/tools/nodejs/test/data_type_support.test.js\n@@ -0,0 +1,23 @@\n+var sqlite3 = require(\"..\");\n+var assert = require(\"assert\");\n+\n+describe(\"data type support\", function () {\n+  let db;\n+  before(function (done) {\n+    db = new sqlite3.Database(\":memory:\", done);\n+  });\n+\n+  it(\"supports BOOLEAN values\", function (done) {\n+    db.run(\"CREATE TABLE boolean_table (i BOOLEAN)\");\n+    const stmt = db.prepare(\"INSERT INTO boolean_table VALUES (?)\");\n+    const values = [true, false];\n+    values.forEach((bool) => {\n+      stmt.run(bool);\n+    });\n+    db.prepare(\"SELECT i from boolean_table;\").all((err, res) => {\n+      assert(err === null);\n+      assert(res.every((v, i) => v.i === values[i]));\n+      done();\n+    });\n+  });\n+});\n",
  "problem_statement": "PRAGMA table_info returns Data type error on node.js environment\nHello,\r\nI tried executing PRAGMA table_info using the node.js environment and it returned a Data type error. Other commands seem to work fine.\r\n\r\nCode used (file main.js):\r\n```javascript\r\nvar duckdb = require('duckdb');\r\n\r\nvar db = new duckdb.Database('database.duckdb');\r\nvar con = db.connect();\r\n\r\nvar n_rows = 20;\r\n\r\n// Create a new table\r\nconsole.log('Creating table.')\r\ncon.run('CREATE TABLE a (i INTEGER, j INTEGER)');\r\nvar stmt = con.prepare('INSERT INTO a VALUES (?, ?)');\r\nfor (var i = 0; i < n_rows; i++) {\r\n  stmt.run(i, i*10);\r\n}\r\nstmt.finalize();\r\n\r\nconsole.log('Table created, now getting its info.')\r\n// Iterate over the tables and get their info\r\ncon.all('PRAGMA show_tables;', function(err, res){\r\n  if (err){\r\n    throw err;\r\n  }\r\n  res.forEach(e => {\r\n    console.log(e['name'])\r\n    con.all(`PRAGMA table_info(${e['name']})`, function(err, res){\r\n      if (err){\r\n        throw err;\r\n      }\r\n      console.log(res);\r\n    });\r\n  });\r\n})\r\n```\r\n\r\nCommand executed:\r\n```bash\r\nnode main.js\r\n```\r\n\r\nOutput:\r\n```\r\nCreating table.\r\nTable created, now getting its info.\r\na\r\nundefined:0\r\nError: Data type is not supported BOOLEAN\r\n```\r\nPRAGMA table_info seems to work fine when the table **is not** present. But, it returns an error with a table that **is** present.\r\nI searched the issues page but couldn't find anything related. Is this a bug (or known issue), or is it a problem somewhere on my side?\n",
  "hints_text": "Indeed we are probably missing boolean support in the nodejs connector. Happy to review a PR!\nGood to know, I am going to fix it in the near future.\nThanks, see here: https://github.com/cwida/duckdb/blob/master/tools/nodejs/src/statement.cpp#L139\nThanks for the pointer.\r\nHow do I compile the changes I make on the statement.cpp file?\r\n\r\nHere is what I tried:\r\n\r\n- Running make from the root of DuckDB, but it didn't create a node package (at least not that I could find).\r\n- I also tried looking for NodeJS flags on the root's Makefile.\r\n- Running make from within tools/nodejs, but the command failed (example of error ERROR:root:code for hash sha512 was not found).\nCheck out our CI setup [here](https://github.com/cwida/duckdb/blob/master/.github/workflows/main.yml), that is \"sort of\" documentation on how we set up these things ourselves :)\r\n\r\nIf that still doesn't work feel free to ask again.\nFrom file you mentioned, I tried the following command:\r\n```bash\r\n./scripts/node_build.sh 15\r\n```\r\n(I am not sure about that 15).\r\n\r\nInitially it would fail compilation because some unique_ptrs didn't have std:: in front of them. So I just added it.\r\nNow, it fails during compilation because it cannot find the module utf8proc_wrapper.hpp\r\n```\r\n../src/duckdb.cpp:62605:10: fatal error: 'utf8proc_wrapper.hpp' file not found\r\n```\r\nI am not sure where I went wrong.",
  "created_at": "2021-12-12T22:02:02Z"
}