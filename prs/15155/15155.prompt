You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Inconsistent results when using ORDER BY with PIVOT
### What happens?

PIVOT statement does not look to correctly handle ORDER BY clause.
Results sometimes sorted correctly and sometimes not. 
Running PIVOT multiple times produces different results

### To Reproduce

```sql
create table p (col1 timestamp, col2 int);
insert into p values ('2024-12-04 09:30:01', 100);
insert into p values ('2024-12-04 09:30:02', 100);
insert into p values ('2024-12-04 09:30:03', 100);
insert into p values ('2024-12-04 09:30:04', 100);

pivot p using sum (col2)
group by col1
order by col1;
```

### OS:

Windows

### DuckDB Version:

1.1.3

### DuckDB Client:

build from sourcce

### Hardware:

_No response_

### Full Name:

Alex G

### Affiliation:

Fintech

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation/) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/parser/transform/statement/transform_pivot_stmt.cpp]
1: #include "duckdb/parser/transformer.hpp"
2: #include "duckdb/parser/tableref/pivotref.hpp"
3: #include "duckdb/parser/parsed_data/create_type_info.hpp"
4: #include "duckdb/parser/statement/create_statement.hpp"
5: #include "duckdb/parser/statement/select_statement.hpp"
6: #include "duckdb/parser/expression/columnref_expression.hpp"
7: #include "duckdb/parser/expression/star_expression.hpp"
8: #include "duckdb/parser/query_node/select_node.hpp"
9: #include "duckdb/parser/statement/multi_statement.hpp"
10: #include "duckdb/parser/statement/drop_statement.hpp"
11: #include "duckdb/parser/parsed_data/drop_info.hpp"
12: #include "duckdb/parser/expression/cast_expression.hpp"
13: #include "duckdb/parser/expression/constant_expression.hpp"
14: #include "duckdb/parser/expression/operator_expression.hpp"
15: #include "duckdb/parser/expression/function_expression.hpp"
16: #include "duckdb/parser/result_modifier.hpp"
17: #include "duckdb/parser/tableref/subqueryref.hpp"
18: #include "duckdb/common/types/uuid.hpp"
19: 
20: namespace duckdb {
21: 
22: void Transformer::AddPivotEntry(string enum_name, unique_ptr<SelectNode> base, unique_ptr<ParsedExpression> column,
23:                                 unique_ptr<QueryNode> subquery, bool has_parameters) {
24: 	if (parent) {
25: 		parent->AddPivotEntry(std::move(enum_name), std::move(base), std::move(column), std::move(subquery),
26: 		                      has_parameters);
27: 		return;
28: 	}
29: 	auto result = make_uniq<CreatePivotEntry>();
30: 	result->enum_name = std::move(enum_name);
31: 	result->base = std::move(base);
32: 	result->column = std::move(column);
33: 	result->subquery = std::move(subquery);
34: 	result->has_parameters = has_parameters;
35: 
36: 	pivot_entries.push_back(std::move(result));
37: }
38: 
39: bool Transformer::HasPivotEntries() {
40: 	return !GetPivotEntries().empty();
41: }
42: 
43: idx_t Transformer::PivotEntryCount() {
44: 	return GetPivotEntries().size();
45: }
46: 
47: vector<unique_ptr<Transformer::CreatePivotEntry>> &Transformer::GetPivotEntries() {
48: 	if (parent) {
49: 		return parent->GetPivotEntries();
50: 	}
51: 	return pivot_entries;
52: }
53: 
54: void Transformer::PivotEntryCheck(const string &type) {
55: 	auto &entries = GetPivotEntries();
56: 	if (!entries.empty()) {
57: 		throw ParserException(
58: 		    "PIVOT statements with pivot elements extracted from the data cannot be used in %ss.\nIn order to use "
59: 		    "PIVOT in a %s the PIVOT values must be manually specified, e.g.:\nPIVOT ... ON %s IN (val1, val2, ...)",
60: 		    type, type, entries[0]->column->ToString());
61: 	}
62: }
63: unique_ptr<SQLStatement> Transformer::GenerateCreateEnumStmt(unique_ptr<CreatePivotEntry> entry) {
64: 	auto result = make_uniq<CreateStatement>();
65: 	auto info = make_uniq<CreateTypeInfo>();
66: 
67: 	info->temporary = true;
68: 	info->internal = false;
69: 	info->catalog = INVALID_CATALOG;
70: 	info->schema = INVALID_SCHEMA;
71: 	info->name = std::move(entry->enum_name);
72: 	info->on_conflict = OnCreateConflict::REPLACE_ON_CONFLICT;
73: 
74: 	// generate the query that will result in the enum creation
75: 	unique_ptr<QueryNode> subselect;
76: 	if (!entry->subquery) {
77: 		auto select_node = std::move(entry->base);
78: 		auto columnref = entry->column->Copy();
79: 		auto cast = make_uniq<CastExpression>(LogicalType::VARCHAR, std::move(columnref));
80: 		select_node->select_list.push_back(std::move(cast));
81: 
82: 		auto is_not_null =
83: 		    make_uniq<OperatorExpression>(ExpressionType::OPERATOR_IS_NOT_NULL, std::move(entry->column));
84: 		select_node->where_clause = std::move(is_not_null);
85: 
86: 		// order by the column
87: 		select_node->modifiers.push_back(make_uniq<DistinctModifier>());
88: 		auto modifier = make_uniq<OrderModifier>();
89: 		modifier->orders.emplace_back(OrderType::ASCENDING, OrderByNullType::ORDER_DEFAULT,
90: 		                              make_uniq<ConstantExpression>(Value::INTEGER(1)));
91: 		select_node->modifiers.push_back(std::move(modifier));
92: 		subselect = std::move(select_node);
93: 	} else {
94: 		subselect = std::move(entry->subquery);
95: 	}
96: 
97: 	auto select = make_uniq<SelectStatement>();
98: 	select->node = TransformMaterializedCTE(std::move(subselect));
99: 	info->query = std::move(select);
100: 	info->type = LogicalType::INVALID;
101: 
102: 	result->info = std::move(info);
103: 	return std::move(result);
104: }
105: 
106: // unique_ptr<SQLStatement> GenerateDropEnumStmt(string enum_name) {
107: //	auto result = make_uniq<DropStatement>();
108: //	result->info->if_exists = true;
109: //	result->info->schema = INVALID_SCHEMA;
110: //	result->info->catalog = INVALID_CATALOG;
111: //	result->info->name = std::move(enum_name);
112: //	result->info->type = CatalogType::TYPE_ENTRY;
113: //	return std::move(result);
114: //}
115: 
116: unique_ptr<SQLStatement> Transformer::CreatePivotStatement(unique_ptr<SQLStatement> statement) {
117: 	auto result = make_uniq<MultiStatement>();
118: 	for (auto &pivot : pivot_entries) {
119: 		if (pivot->has_parameters) {
120: 			throw ParserException(
121: 			    "PIVOT statements with pivot elements extracted from the data cannot have parameters in their source.\n"
122: 			    "In order to use parameters the PIVOT values must be manually specified, e.g.:\n"
123: 			    "PIVOT ... ON %s IN (val1, val2, ...)",
124: 			    pivot->column->ToString());
125: 		}
126: 		result->statements.push_back(GenerateCreateEnumStmt(std::move(pivot)));
127: 	}
128: 	result->statements.push_back(std::move(statement));
129: 	// FIXME: drop the types again!?
130: 	//	for(auto &pivot : pivot_entries) {
131: 	//		result->statements.push_back(GenerateDropEnumStmt(std::move(pivot->enum_name)));
132: 	//	}
133: 	return std::move(result);
134: }
135: 
136: unique_ptr<QueryNode> Transformer::TransformPivotStatement(duckdb_libpgquery::PGSelectStmt &select) {
137: 	auto pivot = select.pivot;
138: 	auto current_param_count = ParamCount();
139: 	auto source = TransformTableRefNode(*pivot->source);
140: 	auto next_param_count = ParamCount();
141: 	bool has_parameters = next_param_count > current_param_count;
142: 
143: 	auto select_node = make_uniq<SelectNode>();
144: 	// handle the CTEs
145: 	if (select.withClause) {
146: 		TransformCTE(*PGPointerCast<duckdb_libpgquery::PGWithClause>(select.withClause), select_node->cte_map);
147: 	}
148: 	if (!pivot->columns) {
149: 		// no pivot columns - not actually a pivot
150: 		select_node->from_table = std::move(source);
151: 		if (pivot->groups) {
152: 			auto groups = TransformStringList(pivot->groups);
153: 			GroupingSet set;
154: 			for (idx_t gr = 0; gr < groups.size(); gr++) {
155: 				auto &group = groups[gr];
156: 				auto colref = make_uniq<ColumnRefExpression>(group);
157: 				select_node->select_list.push_back(colref->Copy());
158: 				select_node->groups.group_expressions.push_back(std::move(colref));
159: 				set.insert(gr);
160: 			}
161: 			select_node->groups.grouping_sets.push_back(std::move(set));
162: 		}
163: 		if (pivot->aggrs) {
164: 			TransformExpressionList(*pivot->aggrs, select_node->select_list);
165: 		}
166: 		return std::move(select_node);
167: 	}
168: 
169: 	// generate CREATE TYPE statements for each of the columns that do not have an IN list
170: 	bool is_pivot = !pivot->unpivots;
171: 	auto columns = TransformPivotList(*pivot->columns, is_pivot);
172: 	for (idx_t c = 0; c < columns.size(); c++) {
173: 		auto &col = columns[c];
174: 		if (!col.pivot_enum.empty() || !col.entries.empty()) {
175: 			continue;
176: 		}
177: 		if (col.pivot_expressions.size() != 1) {
178: 			throw InternalException("PIVOT statement with multiple names in pivot entry!?");
179: 		}
180: 		auto enum_name = "__pivot_enum_" + UUID::ToString(UUID::GenerateRandomUUID());
181: 
182: 		auto new_select = make_uniq<SelectNode>();
183: 		ExtractCTEsRecursive(new_select->cte_map);
184: 		new_select->from_table = source->Copy();
185: 		AddPivotEntry(enum_name, std::move(new_select), col.pivot_expressions[0]->Copy(), std::move(col.subquery),
186: 		              has_parameters);
187: 		col.pivot_enum = enum_name;
188: 	}
189: 
190: 	// generate the actual query, including the pivot
191: 	select_node->select_list.push_back(make_uniq<StarExpression>());
192: 
193: 	auto pivot_ref = make_uniq<PivotRef>();
194: 	pivot_ref->source = std::move(source);
195: 	if (pivot->unpivots) {
196: 		pivot_ref->unpivot_names = TransformStringList(pivot->unpivots);
197: 	} else {
198: 		if (pivot->aggrs) {
199: 			TransformExpressionList(*pivot->aggrs, pivot_ref->aggregates);
200: 		} else {
201: 			// pivot but no aggregates specified - push a count star
202: 			vector<unique_ptr<ParsedExpression>> children;
203: 			auto function = make_uniq<FunctionExpression>("count_star", std::move(children));
204: 			pivot_ref->aggregates.push_back(std::move(function));
205: 		}
206: 	}
207: 	if (pivot->groups) {
208: 		pivot_ref->groups = TransformStringList(pivot->groups);
209: 	}
210: 	pivot_ref->pivots = std::move(columns);
211: 	SetQueryLocation(*pivot_ref, pivot->location);
212: 	select_node->from_table = std::move(pivot_ref);
213: 	// transform order by/limit modifiers
214: 	TransformModifiers(select, *select_node);
215: 
216: 	return std::move(select_node);
217: }
218: 
219: } // namespace duckdb
[end of src/parser/transform/statement/transform_pivot_stmt.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: