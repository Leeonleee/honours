{
  "repo": "duckdb/duckdb",
  "pull_number": 11341,
  "instance_id": "duckdb__duckdb-11341",
  "issue_numbers": [
    "11339"
  ],
  "base_commit": "8ef134fa0e855ad0cd9d03af0f8907a6adab8718",
  "patch": "diff --git a/extension/tpch/dbgen/dbgen.cpp b/extension/tpch/dbgen/dbgen.cpp\nindex 815cfc8f233e..c6e938068db1 100644\n--- a/extension/tpch/dbgen/dbgen.cpp\n+++ b/extension/tpch/dbgen/dbgen.cpp\n@@ -30,10 +30,14 @@ struct tpch_append_information {\n \tduckdb::unique_ptr<InternalAppender> appender;\n };\n \n-void append_value(tpch_append_information &info, int32_t value) {\n+void append_int32(tpch_append_information &info, int32_t value) {\n \tinfo.appender->Append<int32_t>(value);\n }\n \n+void append_int64(tpch_append_information &info, int64_t value) {\n+\tinfo.appender->Append<int64_t>(value);\n+}\n+\n void append_string(tpch_append_information &info, const char *value) {\n \tinfo.appender->Append<const char *>(value);\n }\n@@ -59,9 +63,9 @@ static void append_order(order_t *o, tpch_append_information *info) {\n \t// fill the current row with the order information\n \tappend_info.appender->BeginRow();\n \t// o_orderkey\n-\tappend_value(append_info, o->okey);\n+\tappend_int64(append_info, o->okey);\n \t// o_custkey\n-\tappend_value(append_info, o->custkey);\n+\tappend_int64(append_info, o->custkey);\n \t// o_orderstatus\n \tappend_char(append_info, o->orderstatus);\n \t// o_totalprice\n@@ -73,7 +77,7 @@ static void append_order(order_t *o, tpch_append_information *info) {\n \t// o_clerk\n \tappend_string(append_info, o->clerk);\n \t// o_shippriority\n-\tappend_value(append_info, o->spriority);\n+\tappend_int32(append_info, o->spriority);\n \t// o_comment\n \tappend_string(append_info, o->comment);\n \tappend_info.appender->EndRow();\n@@ -86,13 +90,13 @@ static void append_line(order_t *o, tpch_append_information *info) {\n \tfor (DSS_HUGE i = 0; i < o->lines; i++) {\n \t\tappend_info.appender->BeginRow();\n \t\t// l_orderkey\n-\t\tappend_value(append_info, o->l[i].okey);\n+\t\tappend_int64(append_info, o->l[i].okey);\n \t\t// l_partkey\n-\t\tappend_value(append_info, o->l[i].partkey);\n+\t\tappend_int64(append_info, o->l[i].partkey);\n \t\t// l_suppkey\n-\t\tappend_value(append_info, o->l[i].suppkey);\n+\t\tappend_int64(append_info, o->l[i].suppkey);\n \t\t// l_linenumber\n-\t\tappend_value(append_info, o->l[i].lcnt);\n+\t\tappend_int64(append_info, o->l[i].lcnt);\n \t\t// l_quantity\n \t\tappend_decimal(append_info, o->l[i].quantity);\n \t\t// l_extendedprice\n@@ -131,13 +135,13 @@ static void append_supp(supplier_t *supp, tpch_append_information *info) {\n \n \tappend_info.appender->BeginRow();\n \t// s_suppkey\n-\tappend_value(append_info, supp->suppkey);\n+\tappend_int64(append_info, supp->suppkey);\n \t// s_name\n \tappend_string(append_info, supp->name);\n \t// s_address\n \tappend_string(append_info, supp->address);\n \t// s_nationkey\n-\tappend_value(append_info, supp->nation_code);\n+\tappend_int32(append_info, supp->nation_code);\n \t// s_phone\n \tappend_string(append_info, supp->phone);\n \t// s_acctbal\n@@ -152,13 +156,13 @@ static void append_cust(customer_t *c, tpch_append_information *info) {\n \n \tappend_info.appender->BeginRow();\n \t// c_custkey\n-\tappend_value(append_info, c->custkey);\n+\tappend_int64(append_info, c->custkey);\n \t// c_name\n \tappend_string(append_info, c->name);\n \t// c_address\n \tappend_string(append_info, c->address);\n \t// c_nationkey\n-\tappend_value(append_info, c->nation_code);\n+\tappend_int32(append_info, c->nation_code);\n \t// c_phone\n \tappend_string(append_info, c->phone);\n \t// c_acctbal\n@@ -175,7 +179,7 @@ static void append_part(part_t *part, tpch_append_information *info) {\n \n \tappend_info.appender->BeginRow();\n \t// p_partkey\n-\tappend_value(append_info, part->partkey);\n+\tappend_int64(append_info, part->partkey);\n \t// p_name\n \tappend_string(append_info, part->name);\n \t// p_mfgr\n@@ -185,7 +189,7 @@ static void append_part(part_t *part, tpch_append_information *info) {\n \t// p_type\n \tappend_string(append_info, part->type);\n \t// p_size\n-\tappend_value(append_info, part->size);\n+\tappend_int32(append_info, part->size);\n \t// p_container\n \tappend_string(append_info, part->container);\n \t// p_retailprice\n@@ -200,11 +204,11 @@ static void append_psupp(part_t *part, tpch_append_information *info) {\n \tfor (size_t i = 0; i < SUPP_PER_PART; i++) {\n \t\tappend_info.appender->BeginRow();\n \t\t// ps_partkey\n-\t\tappend_value(append_info, part->s[i].partkey);\n+\t\tappend_int64(append_info, part->s[i].partkey);\n \t\t// ps_suppkey\n-\t\tappend_value(append_info, part->s[i].suppkey);\n+\t\tappend_int64(append_info, part->s[i].suppkey);\n \t\t// ps_availqty\n-\t\tappend_value(append_info, part->s[i].qty);\n+\t\tappend_int64(append_info, part->s[i].qty);\n \t\t// ps_supplycost\n \t\tappend_decimal(append_info, part->s[i].scost);\n \t\t// ps_comment\n@@ -223,11 +227,11 @@ static void append_nation(code_t *c, tpch_append_information *info) {\n \n \tappend_info.appender->BeginRow();\n \t// n_nationkey\n-\tappend_value(append_info, c->code);\n+\tappend_int32(append_info, c->code);\n \t// n_name\n \tappend_string(append_info, c->text);\n \t// n_regionkey\n-\tappend_value(append_info, c->join);\n+\tappend_int32(append_info, c->join);\n \t// n_comment\n \tappend_string(append_info, c->comment);\n \tappend_info.appender->EndRow();\n@@ -238,7 +242,7 @@ static void append_region(code_t *c, tpch_append_information *info) {\n \n \tappend_info.appender->BeginRow();\n \t// r_regionkey\n-\tappend_value(append_info, c->code);\n+\tappend_int32(append_info, c->code);\n \t// r_name\n \tappend_string(append_info, c->text);\n \t// r_comment\n@@ -344,7 +348,7 @@ struct SupplierInfo {\n };\n const char *SupplierInfo::Columns[] = {\"s_suppkey\", \"s_name\",    \"s_address\", \"s_nationkey\",\n                                        \"s_phone\",   \"s_acctbal\", \"s_comment\"};\n-const LogicalType SupplierInfo::Types[] = {LogicalType(LogicalTypeId::INTEGER), LogicalType(LogicalTypeId::VARCHAR),\n+const LogicalType SupplierInfo::Types[] = {LogicalType(LogicalTypeId::BIGINT),  LogicalType(LogicalTypeId::VARCHAR),\n                                            LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::INTEGER),\n                                            LogicalType(LogicalTypeId::VARCHAR), LogicalType::DECIMAL(15, 2),\n                                            LogicalType(LogicalTypeId::VARCHAR)};\n@@ -357,7 +361,7 @@ struct CustomerInfo {\n };\n const char *CustomerInfo::Columns[] = {\"c_custkey\", \"c_name\",    \"c_address\",    \"c_nationkey\",\n                                        \"c_phone\",   \"c_acctbal\", \"c_mktsegment\", \"c_comment\"};\n-const LogicalType CustomerInfo::Types[] = {LogicalType(LogicalTypeId::INTEGER), LogicalType(LogicalTypeId::VARCHAR),\n+const LogicalType CustomerInfo::Types[] = {LogicalType(LogicalTypeId::BIGINT),  LogicalType(LogicalTypeId::VARCHAR),\n                                            LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::INTEGER),\n                                            LogicalType(LogicalTypeId::VARCHAR), LogicalType::DECIMAL(15, 2),\n                                            LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::VARCHAR)};\n@@ -371,7 +375,7 @@ struct PartInfo {\n const char *PartInfo::Columns[] = {\"p_partkey\", \"p_name\",      \"p_mfgr\",        \"p_brand\",  \"p_type\",\n                                    \"p_size\",    \"p_container\", \"p_retailprice\", \"p_comment\"};\n const LogicalType PartInfo::Types[] = {\n-    LogicalType(LogicalTypeId::INTEGER), LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::VARCHAR),\n+    LogicalType(LogicalTypeId::BIGINT),  LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::VARCHAR),\n     LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::INTEGER),\n     LogicalType(LogicalTypeId::VARCHAR), LogicalType::DECIMAL(15, 2),         LogicalType(LogicalTypeId::VARCHAR)};\n \n@@ -382,8 +386,8 @@ struct PartsuppInfo {\n \tstatic const LogicalType Types[];\n };\n const char *PartsuppInfo::Columns[] = {\"ps_partkey\", \"ps_suppkey\", \"ps_availqty\", \"ps_supplycost\", \"ps_comment\"};\n-const LogicalType PartsuppInfo::Types[] = {LogicalType(LogicalTypeId::INTEGER), LogicalType(LogicalTypeId::INTEGER),\n-                                           LogicalType(LogicalTypeId::INTEGER), LogicalType::DECIMAL(15, 2),\n+const LogicalType PartsuppInfo::Types[] = {LogicalType(LogicalTypeId::BIGINT),  LogicalType(LogicalTypeId::BIGINT), \n+                                           LogicalType(LogicalTypeId::BIGINT),  LogicalType::DECIMAL(15, 2),\n                                            LogicalType(LogicalTypeId::VARCHAR)};\n \n struct OrdersInfo {\n@@ -395,7 +399,7 @@ struct OrdersInfo {\n const char *OrdersInfo::Columns[] = {\"o_orderkey\",      \"o_custkey\", \"o_orderstatus\",  \"o_totalprice\", \"o_orderdate\",\n                                      \"o_orderpriority\", \"o_clerk\",   \"o_shippriority\", \"o_comment\"};\n const LogicalType OrdersInfo::Types[] = {\n-    LogicalType(LogicalTypeId::INTEGER), LogicalType(LogicalTypeId::INTEGER), LogicalType(LogicalTypeId::VARCHAR),\n+    LogicalType(LogicalTypeId::BIGINT),  LogicalType(LogicalTypeId::BIGINT),  LogicalType(LogicalTypeId::VARCHAR),\n     LogicalType::DECIMAL(15, 2),         LogicalType(LogicalTypeId::DATE),    LogicalType(LogicalTypeId::VARCHAR),\n     LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::INTEGER), LogicalType(LogicalTypeId::VARCHAR)};\n \n@@ -410,8 +414,8 @@ const char *LineitemInfo::Columns[] = {\"l_orderkey\",    \"l_partkey\",       \"l_su\n                                        \"l_returnflag\",  \"l_linestatus\",    \"l_shipdate\", \"l_commitdate\",\n                                        \"l_receiptdate\", \"l_shipinstruct\",  \"l_shipmode\", \"l_comment\"};\n const LogicalType LineitemInfo::Types[] = {\n-    LogicalType(LogicalTypeId::INTEGER), LogicalType(LogicalTypeId::INTEGER), LogicalType(LogicalTypeId::INTEGER),\n-    LogicalType(LogicalTypeId::INTEGER), LogicalType::DECIMAL(15, 2),         LogicalType::DECIMAL(15, 2),\n+    LogicalType(LogicalTypeId::BIGINT),  LogicalType(LogicalTypeId::BIGINT),  LogicalType(LogicalTypeId::BIGINT), \n+    LogicalType(LogicalTypeId::BIGINT),  LogicalType::DECIMAL(15, 2),         LogicalType::DECIMAL(15, 2),\n     LogicalType::DECIMAL(15, 2),         LogicalType::DECIMAL(15, 2),         LogicalType(LogicalTypeId::VARCHAR),\n     LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::DATE),    LogicalType(LogicalTypeId::DATE),\n     LogicalType(LogicalTypeId::DATE),    LogicalType(LogicalTypeId::VARCHAR), LogicalType(LogicalTypeId::VARCHAR),\n",
  "test_patch": "diff --git a/test/api/serialized_plans/serialized_plans.binary b/test/api/serialized_plans/serialized_plans.binary\nindex 42a316d52da3..ec497ee84bd1 100644\nBinary files a/test/api/serialized_plans/serialized_plans.binary and b/test/api/serialized_plans/serialized_plans.binary differ\n",
  "problem_statement": "The upper limit of the data type in the tpc-h table is not sufficient, resulting in a negative result set\n### What happens?\r\n\r\nThe upper limit of the data type in the tpc-h table is not sufficient, resulting in a negative result set. When generating TPC-H test data, a negative result set will be generated when SF exceeds 358.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nCALL dbgen(sf=1000, children=1000, step=358);\r\nselect o_orderkey from orders where o_orderkey < 0 limit 3;\r\n```\r\n```text\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 o_orderkey  \u2502\r\n\u2502    int32    \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 -2146967295 \u2502\r\n\u2502 -2146967294 \u2502\r\n\u2502 -2146967293 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n### OS:\r\n\r\ncentos 8.x\r\n\r\n### DuckDB Version:\r\n\r\nv0.10.0 20b1486d11\r\n\r\n### DuckDB Client:\r\n\r\nv0.10.0 20b1486d11\r\n\r\n### Full Name:\r\n\r\nYejr\r\n\r\n### Affiliation:\r\n\r\nGreatSQL\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "@GreatSQL Thanks, I could reproduce the issue.",
  "created_at": "2024-03-25T09:23:26Z"
}