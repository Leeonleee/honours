diff --git a/tools/pythonpkg/tests/fast/pandas/test_df_recursive_nested.py b/tools/pythonpkg/tests/fast/pandas/test_df_recursive_nested.py
index e8ca7a6b5808..b8de512ad673 100644
--- a/tools/pythonpkg/tests/fast/pandas/test_df_recursive_nested.py
+++ b/tools/pythonpkg/tests/fast/pandas/test_df_recursive_nested.py
@@ -64,31 +64,31 @@ def test_recursive_struct(self, duckdb_cursor, pandas):
             Value(
                 data,
                 """
-        	STRUCT(
-				A STRUCT(
-					a STRUCT(
-						"1" INTEGER[]
-					),
-					b STRUCT(
-						"1" INTEGER[]
-					),
-					c STRUCT(
-						"1" INTEGER[]
-					)
-				),
-				B STRUCT(
-					a STRUCT(
-						"1" INTEGER[]
-					),
-					b STRUCT(
-						"1" INTEGER[]
-					),
-					c STRUCT(
-						"1" INTEGER[]
-					)
-				)
-			)
-		""",
+            STRUCT(
+                A STRUCT(
+                    a STRUCT(
+                        "1" INTEGER[]
+                    ),
+                    b STRUCT(
+                        "1" INTEGER[]
+                    ),
+                    c STRUCT(
+                        "1" INTEGER[]
+                    )
+                ),
+                B STRUCT(
+                    a STRUCT(
+                        "1" INTEGER[]
+                    ),
+                    b STRUCT(
+                        "1" INTEGER[]
+                    ),
+                    c STRUCT(
+                        "1" INTEGER[]
+                    )
+                )
+            )
+        """,
             ),
         )
 
@@ -116,30 +116,21 @@ def test_recursive_map(self, duckdb_cursor, pandas):
 
     @pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])
     def test_recursive_stresstest(self, duckdb_cursor, pandas):
-        # LIST(
-        # 	STRUCT(
-        # 		MAP(
-        # 			STRUCT(
-        # 				LIST(
-        # 					INTEGER
-        # 				)
-        # 			)
-        # 			LIST(
-        # 				STRUCT(
-        # 					VARCHAR
-        # 				)
-        # 			)
-        # 		)
-        # 	)
-        # )
         data = [
             {
                 'a': {
                     'key': [
+                        # key 1
                         {'1': [5, 4, 3], '2': [8, 7, 6], '3': [1, 2, 3]},
+                        # key 2
                         {'1': [], '2': NULL, '3': [NULL, 0, NULL]},
                     ],
-                    'value': [[{'A': 'abc', 'B': 'def', 'C': NULL}], [NULL]],
+                    'value': [
+                        # value 1
+                        [{'A': 'abc', 'B': 'def', 'C': NULL}],
+                        # value 2
+                        [NULL],
+                    ],
                 },
                 'b': NULL,
                 'c': {'key': [], 'value': []},
@@ -147,12 +138,30 @@ def test_recursive_stresstest(self, duckdb_cursor, pandas):
         ]
         reference_query = create_reference_query()
         df = pandas.DataFrame([{'a': data}])
+        duckdb_type = """
+            STRUCT(
+                a MAP(
+                    STRUCT(
+                        "1" INTEGER[],
+                        "2" INTEGER[],
+                        "3" INTEGER[]
+                    ),
+                    STRUCT(
+                        A VARCHAR,
+                        B VARCHAR,
+                        C VARCHAR
+                    )[]
+                ),
+                b INTEGER,
+                c MAP(VARCHAR, VARCHAR)
+            )[]
+        """
         check_equal(
             duckdb_cursor,
             df,
             reference_query,
             Value(
                 data,
-                type='STRUCT(a MAP(STRUCT("1" INTEGER[], "2" INTEGER, "3" INTEGER), STRUCT(A VARCHAR, B VARCHAR, C VARCHAR)[]), b INTEGER, c MAP(VARCHAR, VARCHAR))[]',
+                type=duckdb_type,
             ),
         )
diff --git a/tools/pythonpkg/tests/fast/udf/test_scalar_native.py b/tools/pythonpkg/tests/fast/udf/test_scalar_native.py
index b11a479a0831..df58f6a40bb6 100644
--- a/tools/pythonpkg/tests/fast/udf/test_scalar_native.py
+++ b/tools/pythonpkg/tests/fast/udf/test_scalar_native.py
@@ -169,7 +169,7 @@ def return_overflow():
     def test_structs(self):
         def add_extra_column(original):
             original['a'] = 200
-            original['bb'] = 0
+            original['c'] = 0
             return original
 
         con = duckdb.connect()
@@ -192,11 +192,16 @@ def add_extra_column(original):
         res.fetchall()
 
         def swap_keys(dict):
+            reversed_keys = list(dict.keys())[::-1]  # Reverse the keys
+            keys = list(dict.keys())  # Original keys
             result = {}
-            reversed_keys = list(dict.keys())
-            reversed_keys.reverse()
-            for item in reversed_keys:
-                result[item] = dict[item]
+
+            halfway = len(keys) // 2
+            for i in range(halfway):
+                item1 = reversed_keys[i]
+                item2 = keys[i]
+                result[item1] = dict[item2]
+                result[item2] = dict[item1]
             return result
 
         con.create_function(
@@ -211,3 +216,32 @@ def swap_keys(dict):
         """
         ).fetchall()
         assert res == [({'a': 'answer_to_life', 'b': 42},)]
+
+    def test_struct_different_field_order(self, duckdb_cursor):
+        def example():
+            return {
+                "country": "country",
+                "postal_code": "postal_code",
+                "state": "state",
+                "city": "city",
+                "street2": "street2",
+                "street1": "street1",
+            }
+
+        # The order in which the fields are provided is intentionally different
+        return_type = """
+        STRUCT(
+            "street1" STRING,
+            "street2" STRING,
+            "city" STRING,
+            "state" STRING,
+            "postal_code" STRING,
+            "country" STRING
+        )
+        """
+
+        duckdb_cursor.create_function("example", example, return_type=return_type)
+
+        (res,) = duckdb_cursor.sql("SELECT example()").fetchone()
+        for key, val in res.items():
+            assert key == val
