You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Scoping problem with function argument
### What happens?

Somehow, `z` seems to disappear:
```sql
create or replace function demo(n, z) as table (
  select list_transform(range(0,n), x -> z) as row
);  

from demo(3,0);
```
```
Binder Error: Referenced column "z" not found in FROM clause!
```



### To Reproduce

```sql
create or replace function demo(n, z) as table (
  select list_transform(range(0,n), x -> z) as row
);  

from demo(3,0);
```

### OS:

macos

### DuckDB Version:

v1.0, v1.1.3-dev38 â”‚

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Peter Koppstein

### Affiliation:

Princeton University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation/) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/planner/binder/expression/bind_macro_expression.cpp]
1: #include "duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp"
2: #include "duckdb/common/reference_map.hpp"
3: #include "duckdb/common/string_util.hpp"
4: #include "duckdb/function/scalar_macro_function.hpp"
5: #include "duckdb/parser/expression/function_expression.hpp"
6: #include "duckdb/parser/expression/subquery_expression.hpp"
7: #include "duckdb/parser/parsed_expression_iterator.hpp"
8: #include "duckdb/planner/expression_binder.hpp"
9: 
10: namespace duckdb {
11: 
12: void ExpressionBinder::ReplaceMacroParametersInLambda(FunctionExpression &function,
13:                                                       vector<unordered_set<string>> &lambda_params) {
14: 
15: 	for (auto &child : function.children) {
16: 		if (child->expression_class != ExpressionClass::LAMBDA) {
17: 			ReplaceMacroParameters(child, lambda_params);
18: 			continue;
19: 		}
20: 
21: 		// Special-handling for LHS lambda parameters.
22: 		// We do not replace them, and we add them to the lambda_params vector.
23: 		auto &lambda_expr = child->Cast<LambdaExpression>();
24: 		string error_message;
25: 		auto column_ref_expressions = lambda_expr.ExtractColumnRefExpressions(error_message);
26: 
27: 		if (!error_message.empty()) {
28: 			// Possibly a JSON function, replace both LHS and RHS.
29: 			ParsedExpressionIterator::EnumerateChildren(*lambda_expr.lhs, [&](unique_ptr<ParsedExpression> &child) {
30: 				ReplaceMacroParameters(child, lambda_params);
31: 			});
32: 			ParsedExpressionIterator::EnumerateChildren(*lambda_expr.expr, [&](unique_ptr<ParsedExpression> &child) {
33: 				ReplaceMacroParameters(child, lambda_params);
34: 			});
35: 			continue;
36: 		}
37: 
38: 		// Push the lambda parameter names of this level.
39: 		lambda_params.emplace_back();
40: 		for (const auto &column_ref_expr : column_ref_expressions) {
41: 			const auto &column_ref = column_ref_expr.get().Cast<ColumnRefExpression>();
42: 			lambda_params.back().emplace(column_ref.GetName());
43: 		}
44: 
45: 		// Only replace in the RHS of the expression.
46: 		ParsedExpressionIterator::EnumerateChildren(*lambda_expr.expr, [&](unique_ptr<ParsedExpression> &child) {
47: 			ReplaceMacroParameters(child, lambda_params);
48: 		});
49: 
50: 		lambda_params.pop_back();
51: 	}
52: }
53: 
54: void ExpressionBinder::ReplaceMacroParameters(unique_ptr<ParsedExpression> &expr,
55:                                               vector<unordered_set<string>> &lambda_params) {
56: 
57: 	switch (expr->GetExpressionClass()) {
58: 	case ExpressionClass::COLUMN_REF: {
59: 		// If the expression is a column reference, we replace it with its argument.
60: 		auto &col_ref = expr->Cast<ColumnRefExpression>();
61: 		if (LambdaExpression::IsLambdaParameter(lambda_params, col_ref.GetName())) {
62: 			return;
63: 		}
64: 
65: 		bool bind_macro_parameter = false;
66: 		if (col_ref.IsQualified()) {
67: 			if (col_ref.GetTableName().find(DummyBinding::DUMMY_NAME) != string::npos) {
68: 				bind_macro_parameter = true;
69: 			}
70: 		} else {
71: 			bind_macro_parameter = macro_binding->HasMatchingBinding(col_ref.GetColumnName());
72: 		}
73: 
74: 		if (bind_macro_parameter) {
75: 			D_ASSERT(macro_binding->HasMatchingBinding(col_ref.GetColumnName()));
76: 			expr = macro_binding->ParamToArg(col_ref);
77: 		}
78: 		return;
79: 	}
80: 	case ExpressionClass::FUNCTION: {
81: 		// Special-handling for lambdas, which are inside function expressions.
82: 		auto &function = expr->Cast<FunctionExpression>();
83: 		if (function.IsLambdaFunction()) {
84: 			return ReplaceMacroParametersInLambda(function, lambda_params);
85: 		}
86: 		break;
87: 	}
88: 	case ExpressionClass::SUBQUERY: {
89: 		auto &sq = (expr->Cast<SubqueryExpression>()).subquery;
90: 		ParsedExpressionIterator::EnumerateQueryNodeChildren(
91: 		    *sq->node, [&](unique_ptr<ParsedExpression> &child) { ReplaceMacroParameters(child, lambda_params); });
92: 		break;
93: 	}
94: 	default:
95: 		break;
96: 	}
97: 
98: 	ParsedExpressionIterator::EnumerateChildren(
99: 	    *expr, [&](unique_ptr<ParsedExpression> &child) { ReplaceMacroParameters(child, lambda_params); });
100: }
101: 
102: void ExpressionBinder::UnfoldMacroExpression(FunctionExpression &function, ScalarMacroCatalogEntry &macro_func,
103:                                              unique_ptr<ParsedExpression> &expr) {
104: 	// validate the arguments and separate positional and default arguments
105: 	vector<unique_ptr<ParsedExpression>> positionals;
106: 	unordered_map<string, unique_ptr<ParsedExpression>> defaults;
107: 
108: 	auto bind_result =
109: 	    MacroFunction::BindMacroFunction(macro_func.macros, macro_func.name, function, positionals, defaults);
110: 	if (!bind_result.error.empty()) {
111: 		throw BinderException(*expr, bind_result.error);
112: 	}
113: 	auto &macro_def = macro_func.macros[bind_result.function_idx.GetIndex()]->Cast<ScalarMacroFunction>();
114: 
115: 	// create a MacroBinding to bind this macro's parameters to its arguments
116: 	vector<LogicalType> types;
117: 	vector<string> names;
118: 	// positional parameters
119: 	for (idx_t i = 0; i < macro_def.parameters.size(); i++) {
120: 		types.emplace_back(LogicalType::SQLNULL);
121: 		auto &param = macro_def.parameters[i]->Cast<ColumnRefExpression>();
122: 		names.push_back(param.GetColumnName());
123: 	}
124: 	// default parameters
125: 	for (auto it = macro_def.default_parameters.begin(); it != macro_def.default_parameters.end(); it++) {
126: 		types.emplace_back(LogicalType::SQLNULL);
127: 		names.push_back(it->first);
128: 		// now push the defaults into the positionals
129: 		positionals.push_back(std::move(defaults[it->first]));
130: 	}
131: 	auto new_macro_binding = make_uniq<DummyBinding>(types, names, macro_func.name);
132: 	new_macro_binding->arguments = &positionals;
133: 	macro_binding = new_macro_binding.get();
134: 
135: 	// replace current expression with stored macro expression
136: 	expr = macro_def.expression->Copy();
137: 
138: 	// qualify only the macro parameters with a new empty binder that only knows the macro binding
139: 	auto dummy_binder = Binder::CreateBinder(context);
140: 	dummy_binder->macro_binding = new_macro_binding.get();
141: 	ExpressionBinder::QualifyColumnNames(*dummy_binder, expr);
142: 
143: 	// now replace the parameters
144: 	vector<unordered_set<string>> lambda_params;
145: 	ReplaceMacroParameters(expr, lambda_params);
146: }
147: 
148: BindResult ExpressionBinder::BindMacro(FunctionExpression &function, ScalarMacroCatalogEntry &macro_func, idx_t depth,
149:                                        unique_ptr<ParsedExpression> &expr) {
150: 	auto stack_checker = StackCheck(*expr, 3);
151: 
152: 	// unfold the macro expression
153: 	UnfoldMacroExpression(function, macro_func, expr);
154: 
155: 	// bind the unfolded macro
156: 	return BindExpression(expr, depth);
157: }
158: 
159: } // namespace duckdb
[end of src/planner/binder/expression/bind_macro_expression.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: