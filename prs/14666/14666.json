{
  "repo": "duckdb/duckdb",
  "pull_number": 14666,
  "instance_id": "duckdb__duckdb-14666",
  "issue_numbers": [
    "14563"
  ],
  "base_commit": "9cba6a2a03e3fbca4364cab89d81a19ab50511b8",
  "patch": "diff --git a/src/planner/binder/expression/bind_macro_expression.cpp b/src/planner/binder/expression/bind_macro_expression.cpp\nindex caa6ba777da4..358dd5db03fc 100644\n--- a/src/planner/binder/expression/bind_macro_expression.cpp\n+++ b/src/planner/binder/expression/bind_macro_expression.cpp\n@@ -1,4 +1,5 @@\n #include \"duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp\"\n+#include \"duckdb/common/enums/expression_type.hpp\"\n #include \"duckdb/common/reference_map.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/function/scalar_macro_function.hpp\"\n@@ -26,12 +27,8 @@ void ExpressionBinder::ReplaceMacroParametersInLambda(FunctionExpression &functi\n \n \t\tif (!error_message.empty()) {\n \t\t\t// Possibly a JSON function, replace both LHS and RHS.\n-\t\t\tParsedExpressionIterator::EnumerateChildren(*lambda_expr.lhs, [&](unique_ptr<ParsedExpression> &child) {\n-\t\t\t\tReplaceMacroParameters(child, lambda_params);\n-\t\t\t});\n-\t\t\tParsedExpressionIterator::EnumerateChildren(*lambda_expr.expr, [&](unique_ptr<ParsedExpression> &child) {\n-\t\t\t\tReplaceMacroParameters(child, lambda_params);\n-\t\t\t});\n+\t\t\tReplaceMacroParameters(lambda_expr.lhs, lambda_params);\n+\t\t\tReplaceMacroParameters(lambda_expr.expr, lambda_params);\n \t\t\tcontinue;\n \t\t}\n \n@@ -43,9 +40,7 @@ void ExpressionBinder::ReplaceMacroParametersInLambda(FunctionExpression &functi\n \t\t}\n \n \t\t// Only replace in the RHS of the expression.\n-\t\tParsedExpressionIterator::EnumerateChildren(*lambda_expr.expr, [&](unique_ptr<ParsedExpression> &child) {\n-\t\t\tReplaceMacroParameters(child, lambda_params);\n-\t\t});\n+\t\tReplaceMacroParameters(lambda_expr.expr, lambda_params);\n \n \t\tlambda_params.pop_back();\n \t}\n",
  "test_patch": "diff --git a/test/sql/function/list/lambdas/lambdas_and_functions.test b/test/sql/function/list/lambdas/lambdas_and_functions.test\nnew file mode 100644\nindex 000000000000..99515e95f426\n--- /dev/null\n+++ b/test/sql/function/list/lambdas/lambdas_and_functions.test\n@@ -0,0 +1,35 @@\n+# name: test/sql/function/list/lambdas/lambdas_and_functions.test\n+# description: Test mixing lambdas and functions\n+# group: [lambdas]\n+\n+require json\n+\n+statement ok\n+create or replace function demo(n, z) as table (\n+  select list_transform(range(0,n), x -> z) as row\n+);\n+\n+query I\n+from demo(3,0);\n+----\n+[0, 0, 0]\n+\n+statement ok\n+create or replace function demo(n, z) as table (\n+  select list_transform(range(0,n), x -> 0+z) as row\n+);\n+\n+query I\n+from demo(3,0);\n+----\n+[0, 0, 0]\n+\n+statement ok\n+create or replace function demo(n, z) as table (\n+  select list_transform(range(0,n), x -> (z->'a')) as row\n+);\n+\n+query I\n+from demo(3, {'a': 2});\n+----\n+[2, 2, 2]\n\\ No newline at end of file\n",
  "problem_statement": "Scoping problem with function argument\n### What happens?\r\n\r\nSomehow, `z` seems to disappear:\r\n```sql\r\ncreate or replace function demo(n, z) as table (\r\n  select list_transform(range(0,n), x -> z) as row\r\n);  \r\n\r\nfrom demo(3,0);\r\n```\r\n```\r\nBinder Error: Referenced column \"z\" not found in FROM clause!\r\n```\r\n\r\n\r\n\r\n### To Reproduce\r\n\r\n```sql\r\ncreate or replace function demo(n, z) as table (\r\n  select list_transform(range(0,n), x -> z) as row\r\n);  \r\n\r\nfrom demo(3,0);\r\n```\r\n\r\n### OS:\r\n\r\nmacos\r\n\r\n### DuckDB Version:\r\n\r\nv1.0, v1.1.3-dev38 \u2502\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nPeter Koppstein\r\n\r\n### Affiliation:\r\n\r\nPrinceton University\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a source build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "If it helps, this seems to work when adding the var within an expression (0+z, x-z, etc)\r\n```sql\r\ncreate or replace function demo(n, z) as table (\r\n    select list_transform(range(0,n), x -> 0+z) as row\r\n  );\r\nfrom demo(3,1);\r\n```\r\n```text\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502    row    \u2502\r\n\u2502  int32[]  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 [1, 1, 1] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n@lcostantino - Good to know, thanks. I was able to find another workaround too (adding a FROM clause).  Hopefully the problem will be easy for the gurus to fix. ",
  "created_at": "2024-11-01T06:21:07Z"
}