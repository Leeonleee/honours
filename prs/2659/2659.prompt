You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
parquet struct fields with Uppercase chars can't be referenced
#### What happens?
A short, clear and concise description of what the bug is.

Seems like when a parquet file has a struct containing a field name with an uppercase letter, duckdb can't reference it.

#### To Reproduce
Steps to reproduce the behavior. Bonus points if those are only SQL queries.

>>> duckdb.__version__
'0.3.1'
>>> data={'one':[{'Three':3,'four':10}], 'Two':[{'Three':4,'four':10}]}
>>> t=pa.Table.from_pydict(data)
>>> pq.write_table(t, 'data.parquet')
>>> rel=duckdb.connect()
>>> rel.query("select one from 'data.parquet'")
---------------------
-- Expression Tree --
---------------------
Subquery [select one from 'data.parquet']

---------------------
-- Result Columns  --
---------------------
- one (STRUCT<Three: BIGINT, four: BIGINT>)

---------------------
-- Result Preview  --
---------------------
one
STRUCT<Three: BIGINT, four: BIGINT>
[ Rows: 1]
{'Three': 3, 'four': 10}



>>> rel.query("select one['Three'] from 'data.parquet'")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
RuntimeError: Could not find key in struct
>>> rel.query("select one['Three'] from 'data.parquet'")

#### Environment (please complete the following information):
 - OS: [e.g. iOS]
 - DuckDB Version: [e.g. 22]
 - DuckDB Client: [e.g. Python]

#### Before Submitting

- [ ] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [ ] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

parquet struct fields with Uppercase chars can't be referenced
#### What happens?
A short, clear and concise description of what the bug is.

Seems like when a parquet file has a struct containing a field name with an uppercase letter, duckdb can't reference it.

#### To Reproduce
Steps to reproduce the behavior. Bonus points if those are only SQL queries.

>>> duckdb.__version__
'0.3.1'
>>> data={'one':[{'Three':3,'four':10}], 'Two':[{'Three':4,'four':10}]}
>>> t=pa.Table.from_pydict(data)
>>> pq.write_table(t, 'data.parquet')
>>> rel=duckdb.connect()
>>> rel.query("select one from 'data.parquet'")
---------------------
-- Expression Tree --
---------------------
Subquery [select one from 'data.parquet']

---------------------
-- Result Columns  --
---------------------
- one (STRUCT<Three: BIGINT, four: BIGINT>)

---------------------
-- Result Preview  --
---------------------
one
STRUCT<Three: BIGINT, four: BIGINT>
[ Rows: 1]
{'Three': 3, 'four': 10}



>>> rel.query("select one['Three'] from 'data.parquet'")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
RuntimeError: Could not find key in struct
>>> rel.query("select one['Three'] from 'data.parquet'")

#### Environment (please complete the following information):
 - OS: [e.g. iOS]
 - DuckDB Version: [e.g. 22]
 - DuckDB Client: [e.g. Python]

#### Before Submitting

- [ ] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [ ] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/function/scalar/struct/struct_extract.cpp]
1: #include "duckdb/common/string_util.hpp"
2: #include "duckdb/execution/expression_executor.hpp"
3: #include "duckdb/function/scalar/nested_functions.hpp"
4: #include "duckdb/planner/expression/bound_function_expression.hpp"
5: #include "duckdb/storage/statistics/struct_statistics.hpp"
6: 
7: namespace duckdb {
8: 
9: struct StructExtractBindData : public FunctionData {
10: 	StructExtractBindData(string key, idx_t index, LogicalType type) : key(move(key)), index(index), type(move(type)) {
11: 	}
12: 
13: 	string key;
14: 	idx_t index;
15: 	LogicalType type;
16: 
17: public:
18: 	unique_ptr<FunctionData> Copy() override {
19: 		return make_unique<StructExtractBindData>(key, index, type);
20: 	}
21: 	bool Equals(FunctionData &other_p) override {
22: 		auto &other = (StructExtractBindData &)other_p;
23: 		return key == other.key && index == other.index && type == other.type;
24: 	}
25: };
26: 
27: static void StructExtractFunction(DataChunk &args, ExpressionState &state, Vector &result) {
28: 	auto &func_expr = (BoundFunctionExpression &)state.expr;
29: 	auto &info = (StructExtractBindData &)*func_expr.bind_info;
30: 
31: 	// this should be guaranteed by the binder
32: 	auto &vec = args.data[0];
33: 
34: 	vec.Verify(args.size());
35: 	if (vec.GetVectorType() == VectorType::DICTIONARY_VECTOR) {
36: 		auto &child = DictionaryVector::Child(vec);
37: 		auto &dict_sel = DictionaryVector::SelVector(vec);
38: 		auto &children = StructVector::GetEntries(child);
39: 		D_ASSERT(info.index < children.size());
40: 		auto &struct_child = children[info.index];
41: 		result.Slice(*struct_child, dict_sel, args.size());
42: 	} else {
43: 		auto &children = StructVector::GetEntries(vec);
44: 		D_ASSERT(info.index < children.size());
45: 		auto &struct_child = children[info.index];
46: 		result.Reference(*struct_child);
47: 	}
48: 	result.Verify(args.size());
49: }
50: 
51: static unique_ptr<FunctionData> StructExtractBind(ClientContext &context, ScalarFunction &bound_function,
52:                                                   vector<unique_ptr<Expression>> &arguments) {
53: 	D_ASSERT(bound_function.arguments.size() == 2);
54: 	if (arguments[0]->return_type.id() == LogicalTypeId::SQLNULL ||
55: 	    arguments[1]->return_type.id() == LogicalTypeId::SQLNULL) {
56: 		bound_function.return_type = LogicalType::SQLNULL;
57: 		bound_function.arguments[0] = LogicalType::SQLNULL;
58: 		return make_unique<StructExtractBindData>("", 0, LogicalType::SQLNULL);
59: 	}
60: 	D_ASSERT(LogicalTypeId::STRUCT == arguments[0]->return_type.id());
61: 	auto &struct_children = StructType::GetChildTypes(arguments[0]->return_type);
62: 	if (struct_children.empty()) {
63: 		throw InternalException("Can't extract something from an empty struct");
64: 	}
65: 
66: 	auto &key_child = arguments[1];
67: 
68: 	if (key_child->return_type.id() != LogicalTypeId::VARCHAR ||
69: 	    key_child->return_type.id() != LogicalTypeId::VARCHAR || !key_child->IsFoldable()) {
70: 		throw Exception("Key name for struct_extract needs to be a constant string");
71: 	}
72: 	Value key_val = ExpressionExecutor::EvaluateScalar(*key_child.get());
73: 	D_ASSERT(key_val.type().id() == LogicalTypeId::VARCHAR);
74: 	if (key_val.is_null || key_val.str_value.length() < 1) {
75: 		throw Exception("Key name for struct_extract needs to be neither NULL nor empty");
76: 	}
77: 	string key = StringUtil::Lower(key_val.str_value);
78: 
79: 	LogicalType return_type;
80: 	idx_t key_index = 0;
81: 	bool found_key = false;
82: 
83: 	for (size_t i = 0; i < struct_children.size(); i++) {
84: 		auto &child = struct_children[i];
85: 		if (child.first == key) {
86: 			found_key = true;
87: 			key_index = i;
88: 			return_type = child.second;
89: 			break;
90: 		}
91: 	}
92: 	if (!found_key) {
93: 		throw Exception("Could not find key in struct");
94: 	}
95: 
96: 	bound_function.return_type = return_type;
97: 	bound_function.arguments[0] = arguments[0]->return_type;
98: 	return make_unique<StructExtractBindData>(key, key_index, return_type);
99: }
100: 
101: static unique_ptr<BaseStatistics> PropagateStructExtractStats(ClientContext &context, BoundFunctionExpression &expr,
102:                                                               FunctionData *bind_data,
103:                                                               vector<unique_ptr<BaseStatistics>> &child_stats) {
104: 	if (!child_stats[0]) {
105: 		return nullptr;
106: 	}
107: 	auto &struct_stats = (StructStatistics &)*child_stats[0];
108: 	auto &info = (StructExtractBindData &)*bind_data;
109: 	if (info.index >= struct_stats.child_stats.size() || !struct_stats.child_stats[info.index]) {
110: 		return nullptr;
111: 	}
112: 	return struct_stats.child_stats[info.index]->Copy();
113: }
114: 
115: ScalarFunction StructExtractFun::GetFunction() {
116: 	return ScalarFunction("struct_extract", {LogicalTypeId::STRUCT, LogicalType::VARCHAR}, LogicalType::ANY,
117: 	                      StructExtractFunction, false, StructExtractBind, nullptr, PropagateStructExtractStats);
118: }
119: 
120: void StructExtractFun::RegisterFunction(BuiltinFunctions &set) {
121: 	// the arguments and return types are actually set in the binder function
122: 	auto fun = GetFunction();
123: 	set.AddFunction(fun);
124: }
125: 
126: } // namespace duckdb
[end of src/function/scalar/struct/struct_extract.cpp]
[start of src/function/scalar/struct/struct_pack.cpp]
1: #include "duckdb/planner/expression/bound_function_expression.hpp"
2: #include "duckdb/common/string_util.hpp"
3: #include "duckdb/parser/expression/bound_expression.hpp"
4: #include "duckdb/function/scalar/nested_functions.hpp"
5: #include "duckdb/common/unordered_set.hpp"
6: #include "duckdb/storage/statistics/struct_statistics.hpp"
7: #include "duckdb/planner/expression_binder.hpp"
8: 
9: namespace duckdb {
10: 
11: static void StructPackFunction(DataChunk &args, ExpressionState &state, Vector &result) {
12: #ifdef DEBUG
13: 	auto &func_expr = (BoundFunctionExpression &)state.expr;
14: 	auto &info = (VariableReturnBindData &)*func_expr.bind_info;
15: 	// this should never happen if the binder below is sane
16: 	D_ASSERT(args.ColumnCount() == StructType::GetChildTypes(info.stype).size());
17: #endif
18: 	bool all_const = true;
19: 	auto &child_entries = StructVector::GetEntries(result);
20: 	for (size_t i = 0; i < args.ColumnCount(); i++) {
21: 		if (args.data[i].GetVectorType() != VectorType::CONSTANT_VECTOR) {
22: 			all_const = false;
23: 		}
24: 		// same holds for this
25: 		child_entries[i]->Reference(args.data[i]);
26: 	}
27: 	result.SetVectorType(all_const ? VectorType::CONSTANT_VECTOR : VectorType::FLAT_VECTOR);
28: 
29: 	result.Verify(args.size());
30: }
31: 
32: static unique_ptr<FunctionData> StructPackBind(ClientContext &context, ScalarFunction &bound_function,
33:                                                vector<unique_ptr<Expression>> &arguments) {
34: 	unordered_set<string> name_collision_set;
35: 
36: 	// collect names and deconflict, construct return type
37: 	if (arguments.empty()) {
38: 		throw Exception("Can't pack nothing into a struct");
39: 	}
40: 	child_list_t<LogicalType> struct_children;
41: 	for (idx_t i = 0; i < arguments.size(); i++) {
42: 		auto &child = arguments[i];
43: 		if (child->alias.empty() && bound_function.name == "struct_pack") {
44: 			throw BinderException("Need named argument for struct pack, e.g. STRUCT_PACK(a := b)");
45: 		}
46: 		if (child->alias.empty() && bound_function.name == "row") {
47: 			child->alias = "v" + std::to_string(i + 1);
48: 		}
49: 		if (name_collision_set.find(child->alias) != name_collision_set.end()) {
50: 			throw BinderException("Duplicate struct entry name \"%s\"", child->alias);
51: 		}
52: 		ExpressionBinder::ResolveParameterType(arguments[i]);
53: 		name_collision_set.insert(child->alias);
54: 		struct_children.push_back(make_pair(child->alias, arguments[i]->return_type));
55: 	}
56: 
57: 	// this is more for completeness reasons
58: 	bound_function.return_type = LogicalType::STRUCT(move(struct_children));
59: 	return make_unique<VariableReturnBindData>(bound_function.return_type);
60: }
61: 
62: unique_ptr<BaseStatistics> StructPackStats(ClientContext &context, BoundFunctionExpression &expr,
63:                                            FunctionData *bind_data, vector<unique_ptr<BaseStatistics>> &child_stats) {
64: 	auto struct_stats = make_unique<StructStatistics>(expr.return_type);
65: 	D_ASSERT(child_stats.size() == struct_stats->child_stats.size());
66: 	for (idx_t i = 0; i < struct_stats->child_stats.size(); i++) {
67: 		struct_stats->child_stats[i] = child_stats[i] ? child_stats[i]->Copy() : nullptr;
68: 	}
69: 	return move(struct_stats);
70: }
71: 
72: void StructPackFun::RegisterFunction(BuiltinFunctions &set) {
73: 	// the arguments and return types are actually set in the binder function
74: 	ScalarFunction fun("struct_pack", {}, LogicalTypeId::STRUCT, StructPackFunction, false, StructPackBind, nullptr,
75: 	                   StructPackStats);
76: 	fun.varargs = LogicalType::ANY;
77: 	set.AddFunction(fun);
78: 	fun.name = "row";
79: 	set.AddFunction(fun);
80: }
81: 
82: } // namespace duckdb
[end of src/function/scalar/struct/struct_pack.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: