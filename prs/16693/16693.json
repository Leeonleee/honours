{
  "repo": "duckdb/duckdb",
  "pull_number": 16693,
  "instance_id": "duckdb__duckdb-16693",
  "issue_numbers": [
    "16554",
    "16554"
  ],
  "base_commit": "b5375825e66b71dfd352f070d7c496201c79dae4",
  "patch": "diff --git a/tools/shell/shell.cpp b/tools/shell/shell.cpp\nindex 60aa2368105e..3a3cdff9fd5e 100644\n--- a/tools/shell/shell.cpp\n+++ b/tools/shell/shell.cpp\n@@ -1739,11 +1739,7 @@ void ShellState::ExecutePreparedStatement(sqlite3_stmt *pStmt) {\n \t\t/* extract the data and data types */\n \t\tfor (int i = 0; i < nCol; i++) {\n \t\t\tresult.types[i] = sqlite3_column_type(pStmt, i);\n-\t\t\tif (result.types[i] == SQLITE_BLOB && cMode == RenderMode::INSERT) {\n-\t\t\t\tresult.data[i] = \"\";\n-\t\t\t} else {\n-\t\t\t\tresult.data[i] = (const char *)sqlite3_column_text(pStmt, i);\n-\t\t\t}\n+\t\t\tresult.data[i] = (const char *)sqlite3_column_text(pStmt, i);\n \t\t\tif (!result.data[i] && result.types[i] != SQLITE_NULL) {\n \t\t\t\t// OOM\n \t\t\t\trc = SQLITE_NOMEM;\n",
  "test_patch": "diff --git a/tools/shell/tests/test_shell_basics.py b/tools/shell/tests/test_shell_basics.py\nindex e2c554bb5a2d..1523ac2ccef2 100644\n--- a/tools/shell/tests/test_shell_basics.py\n+++ b/tools/shell/tests/test_shell_basics.py\n@@ -834,6 +834,17 @@ def test_dump_mixed(shell):\n     result = test.run()\n     result.check_stdout('CREATE TABLE a(d DATE, k FLOAT, t TIMESTAMP);')\n \n+def test_dump_blobs(shell):\n+    test = (\n+        ShellTest(shell)\n+        .statement(\"create table test(t VARCHAR, b BLOB);\")\n+        .statement(\".changes off\")\n+        .statement(\"insert into test values('literal blob', '\\\\x07\\\\x08\\\\x09');\")\n+        .statement(\".dump\")\n+    )\n+    result = test.run()\n+    result.check_stdout(\"'\\\\x07\\\\x08\\\\x09'\")\n+\n def test_invalid_csv(shell, tmp_path):\n     file = tmp_path / 'nonsencsv.csv'\n     with open(file, 'wb+') as f:\n@@ -869,18 +880,6 @@ def test_mode_trash(shell):\n     result = test.run()\n     result.check_stdout('')\n \n-@pytest.mark.skip(reason=\"Broken test, ported directly, was commented out\")\n-def test_dump_blobs(shell):\n-    test = (\n-        ShellTest(shell)\n-        .statement(\"CREATE TABLE a (b BLOB);\")\n-        .statement(\".changes off\")\n-        .statement(\"INSERT INTO a VALUES (DATE '1992-01-01', 0.3, NOW());\")\n-        .statement(\".dump\")\n-    )\n-    result = test.run()\n-    result.check_stdout('COMMIT')\n-\n def test_sqlite_comments(shell):\n     # Using /* <comment> */\n     test = (\n",
  "problem_statement": "[CLI] Empty strings for BLOB values in .mode insert / .dump\n### What happens?\n\nFor tables (or queries) with BLOB columns, `.dump` (or `.mode insert`) only produce empty strings instead of some kind \"literal BLOB value\".\n\nIn duckdb-cli 1.2.0 and 1.2.1.  \nAlso checked with 1.1.3, there the BLOBs are emitted as sqlite style BLOB literal ( `X'01F32B'` ) which is just wrong (as it is somewhat strangly interpreded as string with a prefixed X `'x01F32B'` - parser glitch ?)\n\nIt would make sense to emit these as eg `'\\x01\\xF3\\x2B'::BLOB`.\n\n### To Reproduce\n\n#### code\n```\ncreate table test(t VARCHAR, b BLOB);\ninsert into test values('literal blob', '\\x07\\x08\\x09');\ninsert into test values('text-as-blob', 'ABC'::BLOB);\ninsert into test values('unhex', unhex('040506'));\n\nselect * from test;\n\n.mode insert TEST\nselect * from test;\n\n.dump\n```\n\n#### results on 1.2.0/1.2.1 / BLOBs missing\n```\n-- select * from test;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      t       \u2502      b       \u2502\n\u2502   varchar    \u2502     blob     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 literal blob \u2502 \\x07\\x08\\x09 \u2502\n\u2502 text-as-blob \u2502 ABC          \u2502\n\u2502 unhex        \u2502 \\x04\\x05\\x06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- .mode insert TEST\n-- select * from test;\nINSERT INTO TEST(t,b) VALUES('literal blob','');\nINSERT INTO TEST(t,b) VALUES('text-as-blob','');\nINSERT INTO TEST(t,b) VALUES('unhex','');\n\n-- .dump\nBEGIN TRANSACTION;\nCREATE TABLE test(t VARCHAR, b BLOB);;\nINSERT INTO test VALUES('literal blob','');\nINSERT INTO test VALUES('text-as-blob','');\nINSERT INTO test VALUES('unhex','');\nCOMMIT;\n```\n\n#### results on 1.1.3 / BLOBs as invalid (sqlite-style) literals\n```\n-- select * from test;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      t       \u2502      b       \u2502\n\u2502   varchar    \u2502     blob     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 literal blob \u2502 \\x07\\x08\\x09 \u2502\n\u2502 text-as-blob \u2502 ABC          \u2502\n\u2502 unhex        \u2502 \\x04\\x05\\x06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- .mode insert TEST\n-- select * from test;\nINSERT INTO TEST(t,b) VALUES('literal blob',X'070809');\nINSERT INTO TEST(t,b) VALUES('text-as-blob',X'414243');\nINSERT INTO TEST(t,b) VALUES('unhex',X'040506');\n\n-- .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE test(t VARCHAR, b BLOB);;\nINSERT INTO test VALUES('literal blob',X'070809');\nINSERT INTO test VALUES('text-as-blob',X'414243');\nINSERT INTO test VALUES('unhex',X'040506');\nCOMMIT;\n```\n\n### OS:\n\nLinux (Ubuntu 24.04), x86_x64\n\n### DuckDB Version:\n\n1.2.1\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nMarc Gerber\n\n### Affiliation:\n\nprivate\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [ ] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n[CLI] Empty strings for BLOB values in .mode insert / .dump\n### What happens?\n\nFor tables (or queries) with BLOB columns, `.dump` (or `.mode insert`) only produce empty strings instead of some kind \"literal BLOB value\".\n\nIn duckdb-cli 1.2.0 and 1.2.1.  \nAlso checked with 1.1.3, there the BLOBs are emitted as sqlite style BLOB literal ( `X'01F32B'` ) which is just wrong (as it is somewhat strangly interpreded as string with a prefixed X `'x01F32B'` - parser glitch ?)\n\nIt would make sense to emit these as eg `'\\x01\\xF3\\x2B'::BLOB`.\n\n### To Reproduce\n\n#### code\n```\ncreate table test(t VARCHAR, b BLOB);\ninsert into test values('literal blob', '\\x07\\x08\\x09');\ninsert into test values('text-as-blob', 'ABC'::BLOB);\ninsert into test values('unhex', unhex('040506'));\n\nselect * from test;\n\n.mode insert TEST\nselect * from test;\n\n.dump\n```\n\n#### results on 1.2.0/1.2.1 / BLOBs missing\n```\n-- select * from test;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      t       \u2502      b       \u2502\n\u2502   varchar    \u2502     blob     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 literal blob \u2502 \\x07\\x08\\x09 \u2502\n\u2502 text-as-blob \u2502 ABC          \u2502\n\u2502 unhex        \u2502 \\x04\\x05\\x06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- .mode insert TEST\n-- select * from test;\nINSERT INTO TEST(t,b) VALUES('literal blob','');\nINSERT INTO TEST(t,b) VALUES('text-as-blob','');\nINSERT INTO TEST(t,b) VALUES('unhex','');\n\n-- .dump\nBEGIN TRANSACTION;\nCREATE TABLE test(t VARCHAR, b BLOB);;\nINSERT INTO test VALUES('literal blob','');\nINSERT INTO test VALUES('text-as-blob','');\nINSERT INTO test VALUES('unhex','');\nCOMMIT;\n```\n\n#### results on 1.1.3 / BLOBs as invalid (sqlite-style) literals\n```\n-- select * from test;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      t       \u2502      b       \u2502\n\u2502   varchar    \u2502     blob     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 literal blob \u2502 \\x07\\x08\\x09 \u2502\n\u2502 text-as-blob \u2502 ABC          \u2502\n\u2502 unhex        \u2502 \\x04\\x05\\x06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- .mode insert TEST\n-- select * from test;\nINSERT INTO TEST(t,b) VALUES('literal blob',X'070809');\nINSERT INTO TEST(t,b) VALUES('text-as-blob',X'414243');\nINSERT INTO TEST(t,b) VALUES('unhex',X'040506');\n\n-- .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE test(t VARCHAR, b BLOB);;\nINSERT INTO test VALUES('literal blob',X'070809');\nINSERT INTO test VALUES('text-as-blob',X'414243');\nINSERT INTO test VALUES('unhex',X'040506');\nCOMMIT;\n```\n\n### OS:\n\nLinux (Ubuntu 24.04), x86_x64\n\n### DuckDB Version:\n\n1.2.1\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nMarc Gerber\n\n### Affiliation:\n\nprivate\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [ ] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2025-03-17T13:50:32Z"
}