{
  "repo": "duckdb/duckdb",
  "pull_number": 11937,
  "instance_id": "duckdb__duckdb-11937",
  "issue_numbers": [
    "11936"
  ],
  "base_commit": "d26007417b7770860ae78278c898d2ecf13f08fd",
  "patch": "diff --git a/src/common/row_operations/row_radix_scatter.cpp b/src/common/row_operations/row_radix_scatter.cpp\nindex 01557ca455cf..73242d13c828 100644\n--- a/src/common/row_operations/row_radix_scatter.cpp\n+++ b/src/common/row_operations/row_radix_scatter.cpp\n@@ -125,7 +125,7 @@ void RadixScatterListVector(Vector &v, UnifiedVectorFormat &vdata, const Selecti\n \t\t\t\t\tkey_locations[i][0] = 1;\n \t\t\t\t\tkey_locations[i]++;\n \t\t\t\t\tRowOperations::RadixScatter(child_vector, list_size, *FlatVector::IncrementalSelectionVector(), 1,\n-\t\t\t\t\t                            key_locations + i, false, true, false, prefix_len, width - 1,\n+\t\t\t\t\t                            key_locations + i, false, true, false, prefix_len, width - 2,\n \t\t\t\t\t                            list_entry.offset);\n \t\t\t\t} else {\n \t\t\t\t\t// denote that the list is empty with a 0\n",
  "test_patch": "diff --git a/test/sql/order/issue_11936.test b/test/sql/order/issue_11936.test\nnew file mode 100644\nindex 000000000000..028ac5ba4108\n--- /dev/null\n+++ b/test/sql/order/issue_11936.test\n@@ -0,0 +1,21 @@\n+# name: test/sql/order/issue_11936.test\n+# description: Test order nested list\n+# group: [order]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE test(col1 INT, col2 INT2[][][][][][]);\n+\n+statement ok\n+INSERT INTO test VALUES(1000000000, null), (1000000001, [[[[[[]]]]]]), (null, [[[[[[]]]]]]), (null, [[[[[[]]]]]]), (1, [[[[[[]]]]]]);\n+\n+query II\n+SELECT col1, col2 FROM test ORDER BY col1 NULLS LAST, col2;\n+----\n+1\t[[[[[[]]]]]]\n+1000000000\tNULL\n+1000000001\t[[[[[[]]]]]]\n+NULL\t[[[[[[]]]]]]\n+NULL\t[[[[[[]]]]]]\n",
  "problem_statement": "ORDER BY with nested list type gives wrong result\n### What happens?\n\nORDER BY with nested list type gives wrong result.\n\n### To Reproduce\n\n```sql\r\nCREATE TABLE test(col1 INT, col2 INT2[][][][][][]);\r\nINSERT INTO test VALUES(1000000000, null), (1000000001, [[[[[[]]]]]]), (null, [[[[[[]]]]]]), (null, [[[[[[]]]]]]), (1, [[[[[[]]]]]]);\r\nSELECT col1, col2 FROM test ORDER BY col1 NULLS LAST, col2;\r\n```\r\n```sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502    col1    \u2502       col2        \u2502\r\n\u2502   int32    \u2502 int16[][][][][][] \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502            \u2502 [[[[[[]]]]]]      \u2502\r\n\u2502            \u2502 [[[[[[]]]]]]      \u2502\r\n\u2502          1 \u2502 [[[[[[]]]]]]      \u2502\r\n\u2502 1000000000 \u2502                   \u2502\r\n\u2502 1000000001 \u2502 [[[[[[]]]]]]      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nx64\n\n### DuckDB Version:\n\nmain\n\n### DuckDB Client:\n\ncmd\n\n### Full Name:\n\ngitccl\n\n### Affiliation:\n\nZhejiang University\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [ ] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [ ] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-05-05T08:49:55Z"
}