{
  "repo": "duckdb/duckdb",
  "pull_number": 3904,
  "instance_id": "duckdb__duckdb-3904",
  "issue_numbers": [
    "3896",
    "3896"
  ],
  "base_commit": "8742b790923c2719430a6af778caa187a5a38c00",
  "patch": "diff --git a/extension/parquet/column_reader.cpp b/extension/parquet/column_reader.cpp\nindex e7486e9d5c38..c2f73df55652 100644\n--- a/extension/parquet/column_reader.cpp\n+++ b/extension/parquet/column_reader.cpp\n@@ -828,9 +828,26 @@ uint64_t StructColumnReader::TotalCompressedSize() {\n \treturn size;\n }\n \n+static bool TypeHasExactRowCount(const LogicalType &type) {\n+\tswitch (type.id()) {\n+\tcase LogicalTypeId::LIST:\n+\tcase LogicalTypeId::MAP:\n+\t\treturn false;\n+\tcase LogicalTypeId::STRUCT:\n+\t\tfor (auto &kv : StructType::GetChildTypes(type)) {\n+\t\t\tif (TypeHasExactRowCount(kv.second.id())) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\tdefault:\n+\t\treturn true;\n+\t}\n+}\n+\n idx_t StructColumnReader::GroupRowsAvailable() {\n \tfor (idx_t i = 0; i < child_readers.size(); i++) {\n-\t\tif (child_readers[i]->Type().id() != LogicalTypeId::LIST) {\n+\t\tif (TypeHasExactRowCount(child_readers[i]->Type())) {\n \t\t\treturn child_readers[i]->GroupRowsAvailable();\n \t\t}\n \t}\n",
  "test_patch": "diff --git a/test/sql/copy/parquet/parquet_3896.test b/test/sql/copy/parquet/parquet_3896.test\nnew file mode 100644\nindex 000000000000..3c9b9b454e15\n--- /dev/null\n+++ b/test/sql/copy/parquet/parquet_3896.test\n@@ -0,0 +1,78 @@\n+# name: test/sql/copy/parquet/parquet_3896.test\n+# description: Issue #3896: Error reading parquet file: Struct child row count mismatch\n+# group: [parquet]\n+\n+require parquet\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# single struct with map and scalar key\n+statement ok\n+CREATE VIEW v1 AS\n+SELECT map([2], [{'key1': map([3,4],[1,2]), 'key2':2}]) AS x\n+\n+query I nosort mapres1\n+SELECT * FROM v1;\n+----\n+\n+statement ok\n+COPY v1\n+TO '__TEST_DIR__/map.parquet' (FORMAT 'parquet');\n+\n+query I nosort mapres1\n+SELECT * FROM '__TEST_DIR__/map.parquet';\n+----\n+\n+# multiple struct with map and scalar key\n+statement ok\n+CREATE VIEW v2 AS\n+SELECT map([2], [{'key1': map([3,4],[1,2]), 'key2':2}]) AS x\n+UNION ALL\n+SELECT map([2], [{'key1': map([3,4],[1,2]), 'key2':2}])\n+\n+query I nosort mapres2\n+SELECT * FROM v2;\n+----\n+\n+statement ok\n+COPY v2\n+TO '__TEST_DIR__/map.parquet' (FORMAT 'parquet');\n+\n+query I nosort mapres2\n+SELECT * FROM '__TEST_DIR__/map.parquet';\n+----\n+\n+# struct with struct of lists and scalar key\n+statement ok\n+CREATE VIEW v3 AS\n+SELECT {'key': [2], 'val': [{'key1': {'key': [3,4], 'val': [1,2]}, 'key2':2}]} AS x\n+\n+query I nosort structres1\n+SELECT * FROM v3;\n+----\n+\n+statement ok\n+COPY v3\n+TO '__TEST_DIR__/map.parquet' (FORMAT 'parquet');\n+\n+query I nosort structres1\n+SELECT * FROM '__TEST_DIR__/map.parquet';\n+----\n+\n+# struct with struct of lists and scalar list key\n+statement ok\n+CREATE VIEW v4 AS\n+SELECT {'key': [2], 'val': [{'key1': {'key': [3,4], 'val': [1,2]}, 'key2':[2]}]} AS x\n+\n+query I nosort structres2\n+SELECT * FROM v4;\n+----\n+\n+statement ok\n+COPY v4\n+TO '__TEST_DIR__/map.parquet' (FORMAT 'parquet');\n+\n+query I nosort structres2\n+SELECT * FROM '__TEST_DIR__/map.parquet';\n+----\n",
  "problem_statement": "Error reading parquet file: Struct child row count mismatch\n#### What happens?\r\nWhen reading a parquet file through the CLI, I get the error \"Struct child row count mismatch\". It only occurs on a specific column other columns work fine.\r\n\r\n#### To Reproduce\r\nThe original parquet file contains more columns but i tried to create a minimal example.\r\n```sql\r\nCOPY\r\n(SELECT map([1],[{'key1': map([1,2], [1,2]), 'key2':2}]) \r\nUNION ALL SELECT map([2], [{'key1': map([3,4],[1,2]), 'key2':2}])) \r\nTO 'test.parquet' (FORMAT 'parquet');\r\nSELECT * FROM 'test.parquet';\r\nError: Struct child row count mismatch\r\n```\r\n\r\nUsing SELECT it gives the correct result:\r\n```sql\r\nSELECT map([1],[{'key1': map([1,2], [1,2]), 'key2':2}]) \r\nUNION ALL SELECT map([2], [{'key1': map([3,4],[1,2]), 'key2':2}])\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 map(main.list_value(1), main.list_value(main.struct_pack(map(main.list_value(1,... \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {1={'key1': {1=1, 2=2}, 'key2': 2}}                                                \u2502\r\n\u2502 {2={'key1': {3=1, 4=2}, 'key2': 2}}                                                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nUsing only one row, a different error occurs:\r\n```sql\r\nCOPY\r\n(SELECT map([1],[{'key1': map([1,2], [1,2]), 'key2':2}])) TO 'test.parquet' (FORMAT 'parquet');\r\nSELECT * FROM 'test.parquet';\r\nError: TProtocolException: Invalid data\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Linux\r\n - DuckDB Version: 0.3.4\r\n - DuckDB Client: CLI\r\n\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\nError reading parquet file: Struct child row count mismatch\n#### What happens?\r\nWhen reading a parquet file through the CLI, I get the error \"Struct child row count mismatch\". It only occurs on a specific column other columns work fine.\r\n\r\n#### To Reproduce\r\nThe original parquet file contains more columns but i tried to create a minimal example.\r\n```sql\r\nCOPY\r\n(SELECT map([1],[{'key1': map([1,2], [1,2]), 'key2':2}]) \r\nUNION ALL SELECT map([2], [{'key1': map([3,4],[1,2]), 'key2':2}])) \r\nTO 'test.parquet' (FORMAT 'parquet');\r\nSELECT * FROM 'test.parquet';\r\nError: Struct child row count mismatch\r\n```\r\n\r\nUsing SELECT it gives the correct result:\r\n```sql\r\nSELECT map([1],[{'key1': map([1,2], [1,2]), 'key2':2}]) \r\nUNION ALL SELECT map([2], [{'key1': map([3,4],[1,2]), 'key2':2}])\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 map(main.list_value(1), main.list_value(main.struct_pack(map(main.list_value(1,... \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {1={'key1': {1=1, 2=2}, 'key2': 2}}                                                \u2502\r\n\u2502 {2={'key1': {3=1, 4=2}, 'key2': 2}}                                                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nUsing only one row, a different error occurs:\r\n```sql\r\nCOPY\r\n(SELECT map([1],[{'key1': map([1,2], [1,2]), 'key2':2}])) TO 'test.parquet' (FORMAT 'parquet');\r\nSELECT * FROM 'test.parquet';\r\nError: TProtocolException: Invalid data\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Linux\r\n - DuckDB Version: 0.3.4\r\n - DuckDB Client: CLI\r\n\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "Could you share the Parquet file?\nCould you share the Parquet file?",
  "created_at": "2022-06-18T19:27:17Z"
}