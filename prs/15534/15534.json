{
  "repo": "duckdb/duckdb",
  "pull_number": 15534,
  "instance_id": "duckdb__duckdb-15534",
  "issue_numbers": [
    "15290"
  ],
  "base_commit": "0959644c1d57409e78d2fae0262f792921a54c55",
  "patch": "diff --git a/src/planner/binder/expression/bind_unpacked_star_expression.cpp b/src/planner/binder/expression/bind_unpacked_star_expression.cpp\nindex 24e708129528..b255542180dd 100644\n--- a/src/planner/binder/expression/bind_unpacked_star_expression.cpp\n+++ b/src/planner/binder/expression/bind_unpacked_star_expression.cpp\n@@ -50,6 +50,23 @@ static void ReplaceInFunction(unique_ptr<ParsedExpression> &expr, expression_lis\n static void ReplaceInOperator(unique_ptr<ParsedExpression> &expr, expression_list_t &star_list) {\n \tauto &operator_expr = expr->Cast<OperatorExpression>();\n \n+\tvector<ExpressionType> allowed_types({\n+\t    ExpressionType::OPERATOR_COALESCE,\n+\t    ExpressionType::COMPARE_IN,\n+\t    ExpressionType::COMPARE_NOT_IN,\n+\t});\n+\tbool allowed = false;\n+\tfor (idx_t i = 0; i < allowed_types.size() && !allowed; i++) {\n+\t\tauto &type = allowed_types[i];\n+\t\tif (operator_expr.type == type) {\n+\t\t\tallowed = true;\n+\t\t}\n+\t}\n+\tif (!allowed) {\n+\t\tthrow BinderException(\"*COLUMNS() can not be used together with the '%s' operator\",\n+\t\t                      EnumUtil::ToString(operator_expr.type));\n+\t}\n+\n \t// Replace children\n \texpression_list_t new_children;\n \tfor (auto &child : operator_expr.children) {\n",
  "test_patch": "diff --git a/test/fuzzer/fuzz_not_unpacked_columns.test b/test/fuzzer/fuzz_not_unpacked_columns.test\nnew file mode 100644\nindex 000000000000..29e3206c8d58\n--- /dev/null\n+++ b/test/fuzzer/fuzz_not_unpacked_columns.test\n@@ -0,0 +1,40 @@\n+# name: test/fuzzer/fuzz_not_unpacked_columns.test\n+# group: [fuzzer]\n+\n+statement ok\n+CREATE TABLE v00 (c01 INT, c02 STRING);\n+\n+statement error\n+SELECT NOT (*COLUMNS(*)) FROM v00;\n+----\n+Binder Error: *COLUMNS() can not be used together with the 'OPERATOR_NOT' operator\n+\n+statement error\n+SELECT (*COLUMNS(*) IS NOT NULL) FROM v00;\n+----\n+Binder Error: *COLUMNS() can not be used together with the 'OPERATOR_IS_NOT_NULL' operator\n+\n+statement error\n+SELECT (*COLUMNS(*) IS NULL) FROM v00;\n+----\n+Binder Error: *COLUMNS() can not be used together with the 'OPERATOR_IS_NULL' operator\n+\n+statement error\n+SELECT (*COLUMNS(*))[2] FROM v00;\n+----\n+Binder Error: *COLUMNS() can not be used together with the 'ARRAY_EXTRACT' operator\n+\n+statement error\n+SELECT (*COLUMNS(*))[2:1:0] FROM v00;\n+----\n+Binder Error: *COLUMNS() can not be used together with the 'ARRAY_SLICE' operator\n+\n+statement error\n+SELECT (*COLUMNS(*)).a FROM v00;\n+----\n+Binder Error: *COLUMNS() can not be used together with the 'STRUCT_EXTRACT' operator\n+\n+statement error\n+SELECT construct_array(*COLUMNS(*)) FROM v00;\n+----\n+Binder Error: *COLUMNS() can not be used together with the 'ARRAY_CONSTRUCTOR' operator\n",
  "problem_statement": "DuckDB triggers Assertion Failure: children.size() == 1\n### What happens?\n\nThe latest version of the DuckDB (latest main: v1.1.4-dev3139 07780a0d22) triggers Assertion Failure when running the following SQL statement: \r\n\r\n```sql\r\nCREATE TABLE v00 (c01 INT, c02 STRING); -- Both columns are required. \r\nPIVOT any_name : ( v00 AS ta5200 NATURAL JOIN v00 AS ta10801 ) ON CASE 'string' WHEN 'string' % c01 THEN NOT * COLUMNS ( * RENAME ( XMLPARSE AS any_name ) ) ->> 'string' END;\r\n```\r\n\r\nThis error is only reproducible when compiling DuckDB with assertions turned on, e.g., compiled with `make relassert`. The code seems to work properly with released builds and non-assert builds. Just a faulty assertion?\r\n\r\nThe stack trace for the assertion failure (v1.1.4-dev3139 07780a0d22) is: \r\n\r\n```\r\n#0  duckdb::InternalException::InternalException (this=0x60d0000074f0, Python Exception <class 'gdb.error'> There is no member named _M_dataplus.: \r\nmsg=) at /home/duckdb/duckdb/src/common/exception.cpp:333\r\n#1  0x000000000202e0ea in duckdb::InternalException::InternalException<char const*, int, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (this=0x60d0000074f0, msg=..., params=<incomplete type>, params=<incomplete type>, params=<incomplete type>, \r\n    params=<incomplete type>) at ../../src/include/duckdb/common/exception.hpp:313\r\n#2  0x0000000001de7c50 in duckdb::DuckDBAssertInternal (condition=<optimized out>, condition_name=<optimized out>, file=<optimized out>, \r\n    linenr=<optimized out>) at /home/duckdb/duckdb/src/common/assert.cpp:13\r\n#3  0x00000000059f15b6 in duckdb::ExpressionBinder::ResolveNotType (this=0x7fff041ccc50, op=..., children=...)\r\n    at /home/duckdb/duckdb/src/planner/binder/expression/bind_operator_expression.cpp:16\r\n#4  0x00000000059f5806 in duckdb::ExpressionBinder::ResolveOperatorType (this=<optimized out>, op=..., children=...)\r\n    at /home/duckdb/duckdb/src/planner/binder/expression/bind_operator_expression.cpp:77\r\n#5  0x00000000059df531 in duckdb::ExpressionBinder::BindExpression (this=0x7fff041ccc50, op=..., depth=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/binder/expression/bind_operator_expression.cpp:183\r\n#6  0x0000000005f8efd8 in duckdb::ExpressionBinder::BindExpression (this=0x7fff041ccc50, expr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:94\r\n#7  0x0000000005e4d929 in duckdb::WhereBinder::BindExpression (this=0x7fff041ccc50, expr_ptr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder/where_binder.cpp:38\r\n#8  0x0000000005f94308 in duckdb::ExpressionBinder::Bind (this=0x7fff041ccc50, expr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:365\r\n#9  0x0000000005f95f5f in duckdb::ExpressionBinder::BindChild (this=0x7fff041ccc50, expr=..., depth=<optimized out>, error=...)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:223\r\n#10 0x00000000059c3967 in duckdb::ExpressionBinder::BindFunction (this=0x7fff041ccc50, function=..., func=..., depth=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/binder/expression/bind_function_expression.cpp:110\r\n#11 0x00000000059c11fb in duckdb::ExpressionBinder::BindExpression (this=0x7fff041ccc50, function=..., depth=<optimized out>, expr_ptr=...)\r\n    at /home/duckdb/duckdb/src/planner/binder/expression/bind_function_expression.cpp:93\r\n#12 0x0000000005f90847 in duckdb::ExpressionBinder::BindExpression (this=0x7fff041ccc50, expr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:89\r\n#13 0x0000000005e4d929 in duckdb::WhereBinder::BindExpression (this=0x7fff041ccc50, expr_ptr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder/where_binder.cpp:38\r\n#14 0x0000000005f94308 in duckdb::ExpressionBinder::Bind (this=0x7fff041ccc50, expr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:365\r\n#15 0x0000000005f95f5f in duckdb::ExpressionBinder::BindChild (this=0x7fff041ccc50, expr=..., depth=<optimized out>, error=...)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:223\r\n#16 0x0000000005990d00 in duckdb::ExpressionBinder::BindExpression (this=0x7fff041ccc50, expr=..., depth=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/binder/expression/bind_case_expression.cpp:14\r\n#17 0x0000000005f8e6d3 in duckdb::ExpressionBinder::BindExpression (this=0x7fff041ccc50, expr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:67\r\n#18 0x0000000005e4d929 in duckdb::WhereBinder::BindExpression (this=0x7fff041ccc50, expr_ptr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder/where_binder.cpp:38\r\n#19 0x0000000005f94308 in duckdb::ExpressionBinder::Bind (this=0x7fff041ccc50, expr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:365\r\n#20 0x0000000005f95f5f in duckdb::ExpressionBinder::BindChild (this=0x7fff041ccc50, expr=..., depth=<optimized out>, error=...)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:223\r\n#21 0x00000000059dba66 in duckdb::ExpressionBinder::BindExpression (this=0x7fff041ccc50, op=..., depth=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/binder/expression/bind_operator_expression.cpp:96\r\n#22 0x0000000005f8efd8 in duckdb::ExpressionBinder::BindExpression (this=0x7fff041ccc50, expr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:94\r\n#23 0x0000000005e4d929 in duckdb::WhereBinder::BindExpression (this=0x7fff041ccc50, expr_ptr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder/where_binder.cpp:38\r\n#24 0x0000000005f94308 in duckdb::ExpressionBinder::Bind (this=0x7fff041ccc50, expr=..., depth=<optimized out>, root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:365\r\n#25 0x0000000005f9ab7e in duckdb::ExpressionBinder::Bind (this=<optimized out>, expr=..., result_type=..., root_expression=<optimized out>)\r\n    at /home/duckdb/duckdb/src/planner/expression_binder.cpp:317\r\n#26 0x000000000ad369cd in duckdb::Binder::BindSelectNode (this=0x61900000a580, statement=..., from_table=...)\r\n    at /home/duckdb/duckdb/src/planner/binder/query_node/bind_select_node.cpp:456\r\n#27 0x000000000ad32f35 in duckdb::Binder::BindNode (this=<optimized out>, statement=...)\r\n    at /home/duckdb/duckdb/src/planner/binder/query_node/bind_select_node.cpp:373\r\n#28 0x0000000005fc0f1d in duckdb::Binder::BindNode (this=0x61900000a580, node=...) at /home/duckdb/duckdb/src/planner/binder.cpp:328\r\n#29 0x0000000005fc2483 in duckdb::Binder::Bind (this=0x61900000a580, node=...) at /home/duckdb/duckdb/src/planner/binder.cpp:365\r\n#30 0x0000000005ac79f8 in duckdb::Binder::Bind (this=0x61900000a580, stmt=...) at /home/duckdb/duckdb/src/planner/binder/statement/bind_select.cpp:11\r\n#31 0x0000000005fb5d0a in duckdb::Binder::Bind (this=<optimized out>, statement=...) at /home/duckdb/duckdb/src/planner/binder.cpp:150\r\n#32 0x0000000005b1f60a in duckdb::Binder::Bind (this=0x61900000a580, stmt=...) at /home/duckdb/duckdb/src/planner/binder/statement/bind_create.cpp:737\r\n#33 0x0000000005fb7867 in duckdb::Binder::Bind (this=<optimized out>, statement=...) at /home/duckdb/duckdb/src/planner/binder.cpp:162\r\n#34 0x000000000600a2cc in duckdb::Planner::CreatePlan (this=0x7fff041d03b0, statement=...) at /home/duckdb/duckdb/src/planner/planner.cpp:43\r\n#35 0x0000000006013453 in duckdb::Planner::CreatePlan (this=0x60d0000074f0, statement=...) at /home/duckdb/duckdb/src/planner/planner.cpp:142\r\n#36 0x00000000033b510c in duckdb::ClientContext::CreatePreparedStatementInternal (this=0x616000074790, lock=..., query=..., statement=..., values=...)\r\n    at /home/duckdb/duckdb/src/main/client_context.cpp:340\r\n#37 0x00000000033bb6d4 in duckdb::ClientContext::CreatePreparedStatement (this=0x616000074790, lock=..., query=..., statement=..., values=..., \r\n    mode=<optimized out>) at /home/duckdb/duckdb/src/main/client_context.cpp:426\r\n#38 0x00000000033dd73a in duckdb::ClientContext::PendingStatementInternal (this=0x616000074790, lock=..., query=..., statement=..., parameters=...)\r\n    at /home/duckdb/duckdb/src/main/client_context.cpp:745\r\n#39 0x00000000033ea364 in duckdb::ClientContext::PendingStatementOrPreparedStatement (this=0x616000074790, lock=..., query=..., statement=..., \r\n    prepared=..., parameters=...) at /home/duckdb/duckdb/src/main/client_context.cpp:863\r\n#40 0x00000000033d8e48 in duckdb::ClientContext::PendingStatementOrPreparedStatementInternal (this=0x616000074790, lock=..., query=..., statement=..., \r\n    prepared=..., parameters=...) at /home/duckdb/duckdb/src/main/client_context.cpp:837\r\n#41 0x00000000033e0b9b in duckdb::ClientContext::PendingQueryInternal (this=0x616000074790, lock=..., statement=..., parameters=..., verify=<optimized out>)\r\n    at /home/duckdb/duckdb/src/main/client_context.cpp:1054\r\n#42 0x00000000033f6c5e in duckdb::ClientContext::PendingQuery (this=0x616000074790, statement=..., values=..., allow_stream_result=<optimized out>)\r\n    at /home/duckdb/duckdb/src/main/client_context.cpp:1041\r\n#43 0x00000000033ee170 in duckdb::ClientContext::PendingQuery (this=0x616000074790, statement=..., allow_stream_result=<optimized out>)\r\n    at /home/duckdb/duckdb/src/main/client_context.cpp:1001\r\n#44 0x00000000033ed1d4 in duckdb::ClientContext::Query (this=0x7fff041c84e0, statement=..., allow_stream_result=<optimized out>)\r\n    at /home/duckdb/duckdb/src/main/client_context.cpp:914\r\n#45 0x000000000343c45d in duckdb::Connection::Query (this=<optimized out>, statement=...) at /home/duckdb/duckdb/src/main/connection.cpp:130\r\n#46 0x000000000070493f in duckdb_shell_sqlite3_prepare_v2 (db=0x60f000000a90, zSql=<optimized out>, nByte=<optimized out>, ppStmt=<optimized out>, \r\n    pzTail=<optimized out>) at ../../tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:201\r\n#47 0x000000000066d9e6 in duckdb_shell::ShellState::ExecuteSQL (this=0x7fff041d2cc0, \r\n    zSql=0x6120000a4ec0 \"PIVOT any_name : ( v00 AS ta5200 NATURAL JOIN v00 AS ta10801 ) ON CASE 'string' WHEN 'string' % c01 THEN NOT * COLUMNS ( * RENAME ( XMLPARSE AS any_name ) ) ->> 'string' END;\", pzErrMsg=<optimized out>) at ../../tools/shell/shell.cpp:3524\r\n#48 0x0000000000698f43 in duckdb_shell::ShellState::RunOneSqlLine (this=<optimized out>, zSql=<optimized out>) at ../../tools/shell/shell.cpp:8706\r\n#49 0x000000000068e530 in duckdb_shell::ShellState::ProcessInput (this=0x7fff041d2cc0) at ../../tools/shell/shell.cpp:8936\r\n#50 0x000000000069f1ad in main (argc=<optimized out>, argv=<optimized out>) at ../../tools/shell/shell.cpp:10152\r\n```\n\n### To Reproduce\n\n1. Clone the DuckDB Git from the official repo.\r\n2. Checkout to the latest main (v1.1.4-dev3139 07780a0d22).\r\n3. Compile the DuckDB binary by using `make relassert`. The assertion must be turned on. \r\n4. Run the compiled DuckDB and input the following SQL:\r\n\r\n```sql\r\nCREATE TABLE v00 (c01 INT, c02 STRING); -- Both columns are required. \r\nPIVOT any_name : ( v00 AS ta5200 NATURAL JOIN v00 AS ta10801 ) ON CASE 'string' WHEN 'string' % c01 THEN NOT * COLUMNS ( * RENAME ( XMLPARSE AS any_name ) ) ->> 'string' END;\r\n```\n\n### OS:\n\nUbuntu 24.04 LTS\n\n### DuckDB Version:\n\nv1.1.4-dev3139 07780a0d22\n\n### DuckDB Client:\n\ncli\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nYu Liang\n\n### Affiliation:\n\nThe Pennsylvania State Univeristy\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2025-01-03T09:43:59Z"
}