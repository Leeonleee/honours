diff --git a/src/include/duckdb/main/table_description.hpp b/src/include/duckdb/main/table_description.hpp
index 2a35b4f16691..151592f49355 100644
--- a/src/include/duckdb/main/table_description.hpp
+++ b/src/include/duckdb/main/table_description.hpp
@@ -13,12 +13,26 @@
 namespace duckdb {
 
 struct TableDescription {
+public:
 	//! The schema of the table
 	string schema;
 	//! The table name of the table
 	string table;
 	//! The columns of the table
 	vector<ColumnDefinition> columns;
+
+public:
+	idx_t PhysicalColumnCount() const {
+		idx_t count = 0;
+		for (auto &column : columns) {
+			if (column.Generated()) {
+				continue;
+			}
+			count++;
+		}
+		D_ASSERT(count != 0);
+		return count;
+	}
 };
 
 } // namespace duckdb
diff --git a/src/main/appender.cpp b/src/main/appender.cpp
index ae3608524149..33ef17bf444c 100644
--- a/src/main/appender.cpp
+++ b/src/main/appender.cpp
@@ -62,6 +62,9 @@ Appender::Appender(Connection &con, const string &schema_name, const string &tab
 	}
 	vector<optional_ptr<const ParsedExpression>> defaults;
 	for (auto &column : description->columns) {
+		if (column.Generated()) {
+			continue;
+		}
 		types.push_back(column.Type());
 		defaults.push_back(column.HasDefaultValue() ? &column.DefaultValue() : nullptr);
 	}
diff --git a/src/main/client_context.cpp b/src/main/client_context.cpp
index 467f28dacde1..90c029ab498b 100644
--- a/src/main/client_context.cpp
+++ b/src/main/client_context.cpp
@@ -1132,13 +1132,19 @@ void ClientContext::Append(TableDescription &description, ColumnDataCollection &
 		auto &table_entry =
 		    Catalog::GetEntry<TableCatalogEntry>(*this, INVALID_CATALOG, description.schema, description.table);
 		// verify that the table columns and types match up
-		if (description.columns.size() != table_entry.GetColumns().PhysicalColumnCount()) {
+		if (description.PhysicalColumnCount() != table_entry.GetColumns().PhysicalColumnCount()) {
 			throw InvalidInputException("Failed to append: table entry has different number of columns!");
 		}
+		idx_t table_entry_col_idx = 0;
 		for (idx_t i = 0; i < description.columns.size(); i++) {
-			if (description.columns[i].Type() != table_entry.GetColumns().GetColumn(PhysicalIndex(i)).Type()) {
+			auto &column = description.columns[i];
+			if (column.Generated()) {
+				continue;
+			}
+			if (column.Type() != table_entry.GetColumns().GetColumn(PhysicalIndex(table_entry_col_idx)).Type()) {
 				throw InvalidInputException("Failed to append: table entry has different number of columns!");
 			}
+			table_entry_col_idx++;
 		}
 		auto binder = Binder::CreateBinder(*this);
 		auto bound_constraints = binder->BindConstraints(table_entry);
