You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Importing Exported Database with Indexes Fails with Syntax Error (Missing Semicolons)
#### What happens?
If you create a database with indexes in it, export it, and then try to import it, the import statement will fail with a sytax error.

#### To Reproduce

I used the Kaggle Big Data Bowl 2022 dataset.  I'm able to import it just fine.  However after creating some indexes and export, I end up with exported schema SQL which looks like this (notice no semicolons at the end of the create index statements):



```
CREATE TABLE games("gameId" INTEGER, season INTEGER, week INTEGER, "gameDate" DATE, "gameTimeEastern" TIME, "homeTeamAbbr" VARCHAR, "visitorTeamAbbr" VARCHAR);
CREATE TABLE "PFFScoutingData"("gameId" INTEGER, "playId" INTEGER, "snapDetail" VARCHAR, "snapTime" VARCHAR, "operationTime" VARCHAR, "hangTime" VARCHAR, "kickType" VARCHAR, "kickDirectionIntended" VARCHAR, "kickDirectionActual" VARCHAR, "returnDirectionIntended" VARCHAR, "returnDirectionActual" VARCHAR, "missedTackler" VARCHAR, "assistTackler" VARCHAR, tackler VARCHAR, "kickoffReturnFormation" VARCHAR, gunners VARCHAR, "puntRushers" VARCHAR, "specialTeamsSafeties" VARCHAR, vises VARCHAR, "kickContactType" VARCHAR);
CREATE TABLE players("nflId" INTEGER, height VARCHAR, weight INTEGER, "birthDate" VARCHAR, "collegeName" VARCHAR, "Position" VARCHAR, "displayName" VARCHAR);
CREATE TABLE plays("gameId" INTEGER, "playId" INTEGER, "playDescription" VARCHAR, quarter INTEGER, down INTEGER, "yardsToGo" INTEGER, "possessionTeam" VARCHAR, "specialTeamsPlayType" VARCHAR, "specialTeamsResult" VARCHAR, "kickerId" VARCHAR, "returnerId" VARCHAR, "kickBlockerId" VARCHAR, "yardlineSide" VARCHAR, "yardlineNumber" INTEGER, "gameClock" TIME, "penaltyCodes" VARCHAR, "penaltyJerseyNumbers" VARCHAR, "penaltyYards" VARCHAR, "preSnapHomeScore" INTEGER, "preSnapVisitorScore" INTEGER, "passResult" VARCHAR, "kickLength" VARCHAR, "kickReturnYardage" VARCHAR, "playResult" INTEGER, "absoluteYardlineNumber" INTEGER);
CREATE TABLE tracking("time" TIMESTAMP, x DOUBLE, y DOUBLE, s DOUBLE, a DOUBLE, dis DOUBLE, o VARCHAR, dir VARCHAR, "event" VARCHAR, "nflId" VARCHAR, "displayName" VARCHAR, "jerseyNumber" VARCHAR, "position" VARCHAR, team VARCHAR, "frameId" INTEGER, "gameId" INTEGER, "playId" INTEGER, "playDirection" VARCHAR);


create index nflid_idx on tracking (nflid)
create unique index tracking_key_idx on tracking (gameId, playId, frameId, nflId)

```
Adding semicolons manually fixes my ability to import from the exported data.

#### Environment (please complete the following information):
 - OS: Windows 11
 - DuckDB Version: 0.3.2
 - DuckDB Client: Python

#### Before Submitting

- [ No] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [ ] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
44: 
45: 
[end of README.md]
[start of src/catalog/catalog_entry/index_catalog_entry.cpp]
1: #include "duckdb/catalog/catalog_entry/index_catalog_entry.hpp"
2: #include "duckdb/storage/data_table.hpp"
3: 
4: namespace duckdb {
5: 
6: IndexCatalogEntry::IndexCatalogEntry(Catalog *catalog, SchemaCatalogEntry *schema, CreateIndexInfo *info)
7:     : StandardEntry(CatalogType::INDEX_ENTRY, schema, catalog, info->index_name), index(nullptr), sql(info->sql) {
8: }
9: 
10: IndexCatalogEntry::~IndexCatalogEntry() {
11: 	// remove the associated index from the info
12: 	if (!info || !index) {
13: 		return;
14: 	}
15: 	info->indexes.RemoveIndex(index);
16: }
17: 
18: string IndexCatalogEntry::ToSQL() {
19: 	if (sql.empty()) {
20: 		throw InternalException("Cannot convert INDEX to SQL because it was not created with a SQL statement");
21: 	}
22: 	return sql;
23: }
24: 
25: } // namespace duckdb
[end of src/catalog/catalog_entry/index_catalog_entry.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: