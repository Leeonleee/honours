{
  "repo": "duckdb/duckdb",
  "pull_number": 9362,
  "instance_id": "duckdb__duckdb-9362",
  "issue_numbers": [
    "8837"
  ],
  "base_commit": "c6b0182b300f0b1212abe7f33550ded6687b1ebf",
  "patch": "diff --git a/.github/workflows/Regression.yml b/.github/workflows/Regression.yml\nindex bb2c81b1a253..9979c090df3e 100644\n--- a/.github/workflows/Regression.yml\n+++ b/.github/workflows/Regression.yml\n@@ -224,7 +224,7 @@ jobs:\n \n     - uses: actions/setup-python@v4\n       with:\n-        python-version: '3.7'\n+        python-version: '3.11'\n \n     - name: Install\n       shell: bash\ndiff --git a/tools/pythonpkg/src/numpy/array_wrapper.cpp b/tools/pythonpkg/src/numpy/array_wrapper.cpp\nindex 4aedf295e063..3b1acbea84e1 100644\n--- a/tools/pythonpkg/src/numpy/array_wrapper.cpp\n+++ b/tools/pythonpkg/src/numpy/array_wrapper.cpp\n@@ -83,7 +83,7 @@ struct TimestampConvertNano {\n struct DateConvert {\n \ttemplate <class DUCKDB_T, class NUMPY_T>\n \tstatic int64_t ConvertValue(date_t val) {\n-\t\treturn Date::EpochNanoseconds(val);\n+\t\treturn Date::EpochMicroseconds(val);\n \t}\n \n \ttemplate <class NUMPY_T, bool PANDAS>\ndiff --git a/tools/pythonpkg/src/numpy/raw_array_wrapper.cpp b/tools/pythonpkg/src/numpy/raw_array_wrapper.cpp\nindex f3166acdcd2d..8838bd1c85af 100644\n--- a/tools/pythonpkg/src/numpy/raw_array_wrapper.cpp\n+++ b/tools/pythonpkg/src/numpy/raw_array_wrapper.cpp\n@@ -114,8 +114,7 @@ string RawArrayWrapper::DuckDBToNumpyDtype(const LogicalType &type) {\n \tcase LogicalTypeId::TIMESTAMP_SEC:\n \t\treturn \"datetime64[s]\";\n \tcase LogicalTypeId::DATE:\n-\t\t// FIXME: should this not be 'date64[ns]' ?\n-\t\treturn \"datetime64[ns]\";\n+\t\treturn \"datetime64[us]\";\n \tcase LogicalTypeId::INTERVAL:\n \t\treturn \"timedelta64[ns]\";\n \tcase LogicalTypeId::TIME:\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/api/test_dbapi09.py b/tools/pythonpkg/tests/fast/api/test_dbapi09.py\nindex 02899a3868cc..dde8ebff0b96 100644\n--- a/tools/pythonpkg/tests/fast/api/test_dbapi09.py\n+++ b/tools/pythonpkg/tests/fast/api/test_dbapi09.py\n@@ -18,5 +18,5 @@ def test_fetchnumpy_date(self, duckdb_cursor):\n \n     def test_fetchdf_date(self, duckdb_cursor):\n         res = duckdb_cursor.execute(\"SELECT DATE '2020-01-10' as test_date\").fetchdf()\n-        ser = pandas.Series(numpy.array(['2020-01-10'], dtype=\"datetime64[ns]\"), name=\"test_date\")\n+        ser = pandas.Series(numpy.array(['2020-01-10'], dtype=\"datetime64[us]\"), name=\"test_date\")\n         pandas.testing.assert_series_equal(res['test_date'], ser)\ndiff --git a/tools/pythonpkg/tests/fast/pandas/test_datetime_time.py b/tools/pythonpkg/tests/fast/pandas/test_datetime_time.py\nindex 12045a06c065..ccbe7003c7a8 100644\n--- a/tools/pythonpkg/tests/fast/pandas/test_datetime_time.py\n+++ b/tools/pythonpkg/tests/fast/pandas/test_datetime_time.py\n@@ -4,6 +4,8 @@\n from conftest import NumpyPandas, ArrowPandas\n from datetime import datetime, timezone, time, timedelta\n \n+_ = pytest.importorskip(\"pandas\", minversion=\"2.0.0\")\n+\n \n class TestDateTimeTime(object):\n     @pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])\n@@ -23,14 +25,17 @@ def test_time_low(self, duckdb_cursor, pandas):\n         pandas.testing.assert_frame_equal(df_out, duckdb_time)\n \n     @pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])\n-    def test_pandas_datetime_overflow(self, pandas):\n+    @pytest.mark.parametrize('input', ['2263-02-28', '9999-01-01'])\n+    def test_pandas_datetime_big(self, pandas, input):\n         duckdb_con = duckdb.connect()\n \n         duckdb_con.execute(\"create table test (date DATE)\")\n-        duckdb_con.execute(\"INSERT INTO TEST VALUES ('2263-02-28')\")\n+        duckdb_con.execute(f\"INSERT INTO TEST VALUES ('{input}')\")\n \n-        with pytest.raises(duckdb.ConversionException):\n-            res = duckdb_con.execute(\"select * from test\").df()\n+        res = duckdb_con.execute(\"select * from test\").df()\n+        date_value = np.array([f'{input}'], dtype='datetime64[us]')\n+        df = pandas.DataFrame({'date': date_value})\n+        pandas.testing.assert_frame_equal(res, df)\n \n     def test_timezone_datetime(self):\n         con = duckdb.connect()\ndiff --git a/tools/pythonpkg/tests/fast/types/test_numpy.py b/tools/pythonpkg/tests/fast/types/test_numpy.py\nindex fe23d1fcfa43..6c8c13243755 100644\n--- a/tools/pythonpkg/tests/fast/types/test_numpy.py\n+++ b/tools/pythonpkg/tests/fast/types/test_numpy.py\n@@ -17,11 +17,12 @@ def test_numpy_datetime64(self, duckdb_cursor):\n             \"select * from tbl\"\n         ).fetchall()\n \n-    def test_numpy_datetime_overflow(self):\n+    def test_numpy_datetime_big(self):\n         duckdb_con = duckdb.connect()\n \n         duckdb_con.execute(\"create table test (date DATE)\")\n         duckdb_con.execute(\"INSERT INTO TEST VALUES ('2263-02-28')\")\n \n-        with pytest.raises(duckdb.ConversionException):\n-            res1 = duckdb_con.execute(\"select * from test\").fetchnumpy()\n+        res1 = duckdb_con.execute(\"select * from test\").fetchnumpy()\n+        date_value = {'date': np.array(['2263-02-28'], dtype='datetime64[us]')}\n+        assert res1 == date_value\n",
  "problem_statement": "DATE -> Pandas Dataframe returns error with DATE that are out of bounds for pandas/numpy datetime64[ns]\n### What happens?\n\nConversion to pandas dataframe returns an error for DATEs that are out of bounds for datetime64[ns] https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-oob\r\n\r\nThat makes working with databases/files  store DATEs such as \"9999-12-31\" problematic. Such dates are surprisingly common in financial data to indicate products with no expiring date.\r\n\r\nPossible options might include:\r\n\r\nOption 1: Returning a warning instead (https://github.com/duckdb/duckdb/issues/4026#issuecomment-1413851125 problem persists, but users are warned)\r\nOption 2: https://github.com/duckdb/duckdb/issues/4026 Using microsecond precision\n\n### To Reproduce\n\n```python\r\n>>> import duckdb\r\n>>> duckdb.sql(\"select '9999-01-01'::DATE\").df()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nduckdb.duckdb.ConversionException: Conversion Error: Could not convert DATE (9999-01-01) to nanoseconds\r\n```\n\n### OS:\n\nW10\n\n### DuckDB Version:\n\n0.8.2-dev4025\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nAlessandro Martinello\n\n### Affiliation:\n\nDanmarks Nationalbank\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2023-10-16T12:42:52Z"
}