{
  "repo": "duckdb/duckdb",
  "pull_number": 9278,
  "instance_id": "duckdb__duckdb-9278",
  "issue_numbers": [
    "9063"
  ],
  "base_commit": "a20ac9759d2cbbec636dcd8053e2066a33cf28aa",
  "patch": "diff --git a/tools/pythonpkg/duckdb-stubs/__init__.pyi b/tools/pythonpkg/duckdb-stubs/__init__.pyi\nindex 79d9f821629b..255c5d262ddf 100644\n--- a/tools/pythonpkg/duckdb-stubs/__init__.pyi\n+++ b/tools/pythonpkg/duckdb-stubs/__init__.pyi\n@@ -351,6 +351,7 @@ class DuckDBPyRelation:\n     def bool_and(self, column: str, groups: str, window_spec: str, projected_columns: str) -> DuckDBPyRelation: ...\n     def bool_or(self, column: str, groups: str, window_spec: str, projected_columns: str) -> DuckDBPyRelation: ...\n     def count(self, column: str, groups: str, window_spec: str, projected_columns: str) -> DuckDBPyRelation: ...\n+    def value_counts(self, column: str, groups: str) -> DuckDBPyRelation: ...\n     def create(self, table_name: str) -> None: ...\n     def create_view(self, view_name: str, replace: bool = ...) -> DuckDBPyRelation: ...\n     def cume_dist(self, window_spec: str, projected_columns: str) -> DuckDBPyRelation: ...\ndiff --git a/tools/pythonpkg/src/include/duckdb_python/pyrelation.hpp b/tools/pythonpkg/src/include/duckdb_python/pyrelation.hpp\nindex 298c11ba3c36..f418f5ae9f25 100644\n--- a/tools/pythonpkg/src/include/duckdb_python/pyrelation.hpp\n+++ b/tools/pythonpkg/src/include/duckdb_python/pyrelation.hpp\n@@ -106,6 +106,7 @@ struct DuckDBPyRelation {\n \t                                     const string &window_spec = \"\", const string &projected_columns = \"\");\n \tunique_ptr<DuckDBPyRelation> BoolOr(const string &column, const string &groups = \"\", const string &window_spec = \"\",\n \t                                    const string &projected_columns = \"\");\n+\tunique_ptr<DuckDBPyRelation> ValueCounts(const string &column, const string &groups = \"\");\n \tunique_ptr<DuckDBPyRelation> Count(const string &column, const string &groups = \"\", const string &window_spec = \"\",\n \t                                   const string &projected_columns = \"\");\n \tunique_ptr<DuckDBPyRelation> FAvg(const string &column, const string &groups = \"\", const string &window_spec = \"\",\ndiff --git a/tools/pythonpkg/src/pyrelation.cpp b/tools/pythonpkg/src/pyrelation.cpp\nindex a59019d461d3..1d121f0841c0 100644\n--- a/tools/pythonpkg/src/pyrelation.cpp\n+++ b/tools/pythonpkg/src/pyrelation.cpp\n@@ -460,6 +460,10 @@ unique_ptr<DuckDBPyRelation> DuckDBPyRelation::BoolOr(const std::string &column,\n \treturn ApplyAggOrWin(\"bool_or\", column, \"\", groups, window_spec, projected_columns);\n }\n \n+unique_ptr<DuckDBPyRelation> DuckDBPyRelation::ValueCounts(const std::string &column, const std::string &groups) {\n+\treturn Count(column, groups, \"\", column);\n+}\n+\n unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Count(const std::string &column, const std::string &groups,\n                                                      const std::string &window_spec,\n                                                      const std::string &projected_columns) {\ndiff --git a/tools/pythonpkg/src/pyrelation/initialize.cpp b/tools/pythonpkg/src/pyrelation/initialize.cpp\nindex 5f8e14ea955c..cb959435b35a 100644\n--- a/tools/pythonpkg/src/pyrelation/initialize.cpp\n+++ b/tools/pythonpkg/src/pyrelation/initialize.cpp\n@@ -102,6 +102,9 @@ static void InitializeAggregates(py::class_<DuckDBPyRelation> &m) {\n \t         py::arg(\"column\"), py::arg(\"groups\") = \"\", py::arg(\"window_spec\") = \"\", py::arg(\"projected_columns\") = \"\")\n \t    .def(\"count\", &DuckDBPyRelation::Count, \"Computes the number of elements present in a given column\",\n \t         py::arg(\"column\"), py::arg(\"groups\") = \"\", py::arg(\"window_spec\") = \"\", py::arg(\"projected_columns\") = \"\")\n+\t    .def(\"value_counts\", &DuckDBPyRelation::ValueCounts,\n+\t         \"Computes the number of elements present in a given column, also projecting the original column\",\n+\t         py::arg(\"column\"), py::arg(\"groups\") = \"\")\n \t    .def(\"favg\", &DuckDBPyRelation::FAvg,\n \t         \"Computes the average of all values present in a given column using a more accurate floating point \"\n \t         \"summation (Kahan Sum)\",\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/relational_api/test_rapi_aggregations.py b/tools/pythonpkg/tests/fast/relational_api/test_rapi_aggregations.py\nindex a20d8294d3b2..303338cdfb9c 100644\n--- a/tools/pythonpkg/tests/fast/relational_api/test_rapi_aggregations.py\n+++ b/tools/pythonpkg/tests/fast/relational_api/test_rapi_aggregations.py\n@@ -8,16 +8,16 @@ def setup_and_teardown_of_table(duckdb_cursor):\n     duckdb_cursor.execute(\"create table agg(id int, v int, t int, f float, s varchar);\")\n     duckdb_cursor.execute(\n         \"\"\"\n-\t\tinsert into agg values\n-\t\t(1, 1, 2, 0.54, 'h'),\n-\t\t(1, 1, 1, 0.21, 'e'),\n-\t\t(1, 2, 3, 0.001, 'l'),\n-\t\t(2, 10, 4, 0.04, 'l'),\n-\t\t(2, 11, -1, 10.45, 'o'),\n-\t\t(3, -1, 0, 13.32, ','),\n-\t\t(3, 5, -2, 9.87, 'wor'),\n-\t\t(3, null, 10, 6.56, 'ld');\n-\t\t\"\"\"\n+        insert into agg values\n+        (1, 1, 2, 0.54, 'h'),\n+        (1, 1, 1, 0.21, 'e'),\n+        (1, 2, 3, 0.001, 'l'),\n+        (2, 10, 4, 0.04, 'l'),\n+        (2, 11, -1, 10.45, 'o'),\n+        (3, -1, 0, 13.32, ','),\n+        (3, 5, -2, 9.87, 'wor'),\n+        (3, null, 10, 6.56, 'ld');\n+        \"\"\"\n     )\n     yield\n     duckdb_cursor.execute(\"drop table agg\")\n@@ -148,6 +148,16 @@ def test_count(self, table):\n         assert len(result) == len(expected)\n         assert all([r == e for r, e in zip(result, expected)])\n \n+    def test_value_counts(self, table):\n+        result = table.value_counts(\"v\").execute().fetchall()\n+        expected = [(None, 0), (-1, 1), (1, 2), (2, 1), (5, 1), (10, 1), (11, 1)]\n+        assert len(result) == len(expected)\n+        assert all([r == e for r, e in zip(result, expected)])\n+        result = table.value_counts(\"v\", groups=\"v\").order(\"v\").execute().fetchall()\n+        expected = [(-1, 1), (1, 2), (2, 1), (5, 1), (10, 1), (11, 1), (None, 0)]\n+        assert len(result) == len(expected)\n+        assert all([r == e for r, e in zip(result, expected)])\n+\n     def test_favg(self, table):\n         result = [round(r[0], 2) for r in table.favg(\"f\").execute().fetchall()]\n         expected = [5.12]\n",
  "problem_statement": "[Python] DuckDBPyRelation.value_counts was removed\n### What happens?\n\nThe `value_counts` method seems to have disappeared from the relational API. \r\n\r\n@Tishj tracked it down to #8568.\r\n\r\nThis is a super useful and convenient method when doing exploratory analysis. Without it, the alternatives to `rel.value_counts(\"col\")` are:\r\n\r\n* `rel.count(\"col\", \"col\", projected_columns=\"col\")`\r\n* `rel.aggregate(\"col, count(col)\")`\r\n\r\nNeither of which are terribly ergonomic.\n\n### To Reproduce\n\nduckdb.values([1,2,3,4,]).value_counts(\"col1\")\n\n### OS:\n\nUbuntu 20.23\n\n### DuckDB Version:\n\n0.8.2-dev5002\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nNed Letcher\n\n### Affiliation:\n\nThoughtworks\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2023-10-09T15:33:25Z"
}