{
  "repo": "duckdb/duckdb",
  "pull_number": 4757,
  "instance_id": "duckdb__duckdb-4757",
  "issue_numbers": [
    "4747"
  ],
  "base_commit": "7c111322de1095436350f95e33c5553b09302165",
  "patch": "diff --git a/tools/pythonpkg/src/array_wrapper.cpp b/tools/pythonpkg/src/array_wrapper.cpp\nindex 6260d28649cf..6d90fb31db26 100644\n--- a/tools/pythonpkg/src/array_wrapper.cpp\n+++ b/tools/pythonpkg/src/array_wrapper.cpp\n@@ -322,7 +322,7 @@ static bool ConvertColumnCategoricalTemplate(idx_t target_offset, data_ptr_t tar\n \t\t\tidx_t src_idx = idata.sel->get_index(i);\n \t\t\tidx_t offset = target_offset + i;\n \t\t\tif (!idata.validity.RowIsValidUnsafe(src_idx)) {\n-\t\t\t\tout_ptr[offset] = duckdb_py_convert::RegularConvert::template ConvertValue<DUCKDB_T, NUMPY_T>(-1);\n+\t\t\t\tout_ptr[offset] = static_cast<NUMPY_T>(-1);\n \t\t\t} else {\n \t\t\t\tout_ptr[offset] =\n \t\t\t\t    duckdb_py_convert::RegularConvert::template ConvertValue<DUCKDB_T, NUMPY_T>(src_ptr[src_idx]);\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/pandas/test_pandas_category.py b/tools/pythonpkg/tests/fast/pandas/test_pandas_category.py\nindex 63703ca6a1db..a4cb97fa37b5 100644\n--- a/tools/pythonpkg/tests/fast/pandas/test_pandas_category.py\n+++ b/tools/pythonpkg/tests/fast/pandas/test_pandas_category.py\n@@ -82,6 +82,9 @@ def test_category_string(self, duckdb_cursor):\n     def test_category_string_null(self, duckdb_cursor):\n         check_category_equal(['foo','bla',None,'zoo', 'foo', 'foo',None, 'bla'])\n \n+    def test_category_string_null_bug_4747(self, duckdb_cursor):\n+        check_category_equal([str(i) for i in range(160)] + [None])\n+\n     def test_categorical_fetchall(self, duckdb_cursor):\n         df_in = pd.DataFrame({\n         'x': pd.Categorical(['foo','bla',None,'zoo', 'foo', 'foo',None, 'bla'], ordered=True),\n",
  "problem_statement": "Pandas categorical conversion error: \"ValueError: codes need to be between -1 and len(categories)-1\"\n### What happens?\n\nThere's a pandas Exception when there is null in an enum type column with `128 < num_possible_values_in_enum < 256`. This is probably because the dtype of the column is supposedly int8 inside duckdb, but is converted to int16 at some point when the `-1` mapping for `null` is translated to `255` instead.\r\n\r\n```\r\n{'cls': <class 'pandas.core.arrays.categorical.Categorical'>, 'codes': array([**255**,   1,  72,  83,  94, 105, 116, 127, 138, 149,   2,  13,  24,\r\n        35,  46,  57,  68,  69,  70,  71,  73,  74,  75,  76,  77,  78,\r\n        79,  80,  81,  82,  84,  85,  86,  87,  88,  89,  90,  91,  92,\r\n        93,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104, 106, 107,\r\n       108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121,\r\n       122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135,\r\n       136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150,\r\n       151, 152, 153, 154, 155, 156, 157, 158, 159,   3,   4,   5,   6,\r\n         7,   8,   9,  10,  11,  12,  14,  15,  16,  17,  18,  19,  20,\r\n        21,  22,  23,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,\r\n        36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  47,  48,  49,\r\n        50,  51,  52,  53,  54,  55,  56,  58,  59,  60,  61,  62,  63,\r\n        64,  65,  66,  67], dtype=int16), 'categories': None, 'ordered': None, 'dtype': CategoricalDtype(categories=['A0', 'A1', 'A10', 'A100', 'A101', 'A102', 'A103', 'A104',\r\n                  'A105', 'A106',\r\n                  ...\r\n                  'A90', 'A91', 'A92', 'A93', 'A94', 'A95', 'A96', 'A97',\r\n                  'A98', 'A99'],\r\n, ordered=True)}\r\nTraceback (most recent call last):\r\n  File \"/lan/csv/geomrd1/usr/pankaj/proj/duckdb/cat-bug.py\", line 15, in <module>\r\n    print(db.execute('''select nullif(a, 'A0') from df''').fetchdf())\r\n  File \"/lan/csv/geomrd1/usr/pankaj/proj/duckdb/cat-bug.py\", line 8, in from_codes\r\n    return from_codes_orig(codes, categories=categories, ordered=ordered, dtype=dtype)\r\n  File \"/lan/csv/geomrd1/usr/pankaj/proj/duckdb/pyenv/lib/python3.10/site-packages/pandas/core/arrays/categorical.py\", line 709, in from_codes\r\n    raise ValueError(\"codes need to be between -1 and len(categories)-1\")\r\nValueError: codes need to be between -1 and len(categories)-1\r\n```\n\n### To Reproduce\n\n```\r\nimport pandas as pd\r\nimport duckdb\r\n\r\n# patch for debug prints, not needed to reproduce the problem\r\nfrom_codes_orig = pd.core.arrays.categorical.Categorical.from_codes\r\ndef from_codes(cls, codes, categories=None, ordered=None, dtype=None):\r\n    print(locals())\r\n    return from_codes_orig(codes, categories=categories, ordered=ordered, dtype=dtype)\r\npd.core.arrays.categorical.Categorical.from_codes = classmethod(from_codes)\r\n\r\nnum_codes = 160  # Passes with < 128\r\ndb = duckdb.connect()\r\ndf = pd.DataFrame({'a':pd.Series(f'A{i}' for i in range(num_codes))}).astype('category')\r\ndb.register('df', df)\r\nprint(db.execute('''select nullif(a, 'A0') from df''').fetchdf())\r\n```\n\n### OS:\n\nLinux\n\n### DuckDB Version:\n\n0.5.1-dev271\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nPankaj Pandey\n\n### Affiliation:\n\nCadence (not using duckdb in any official product)\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "The following line seems to be relevant. `-1` is probably not valid for unsigned `DUCKDB_T uint8` to `NUMPY_T int16` conversion\r\n``` \r\ntemplate <class DUCKDB_T, class NUMPY_T>\r\nstatic bool ConvertColumnCategoricalTemplate(idx_t target_offset, data_ptr_t target_data, UnifiedVectorFormat &idata,\r\n                                             idx_t count) {\r\n...\r\n    if (!idata.validity.RowIsValidUnsafe(src_idx)) {\r\n        out_ptr[offset] = duckdb_py_convert::RegularConvert::template ConvertValue<DUCKDB_T, NUMPY_T>(-1);\r\n    }\r\n...\r\n```\r\nChanging the line to following makes the case pass without error, but i'm not sure if this is the correct way to do it:\r\n```\r\n    if (!idata.validity.RowIsValidUnsafe(src_idx)) {\r\n        out_ptr[offset] = static_cast<NUMPY_T>(-1);\r\n    }\r\n```\r\n",
  "created_at": "2022-09-19T18:35:52Z"
}