{
  "repo": "duckdb/duckdb",
  "pull_number": 786,
  "instance_id": "duckdb__duckdb-786",
  "issue_numbers": [
    "726"
  ],
  "base_commit": "097e22ed7f70d84986559dd60bc6333c52065fe5",
  "patch": "diff --git a/tools/rpkg/DESCRIPTION b/tools/rpkg/DESCRIPTION\nindex 074201739c7e..20e1ce6d4005 100644\n--- a/tools/rpkg/DESCRIPTION\n+++ b/tools/rpkg/DESCRIPTION\n@@ -26,12 +26,12 @@ Depends:\n Imports:\n     dbplyr,\n     methods,\n-    testthat,\n     utils\n Suggests: \n     callr,\n     DBItest,\n-    nycflights13\n+    nycflights13,\n+    testthat\n Encoding: UTF-8\n LazyData: true\n RoxygenNote: 7.1.1\ndiff --git a/tools/rpkg/R/Driver.R b/tools/rpkg/R/Driver.R\nindex 981397ad6409..b6e80cfb267f 100644\n--- a/tools/rpkg/R/Driver.R\n+++ b/tools/rpkg/R/Driver.R\n@@ -2,7 +2,7 @@ DBDIR_MEMORY <- \":memory:\"\n \n #' @title DuckDB Driver\n #'\n-#' @description A DuckDB database instance. \n+#' @description A DuckDB database instance.\n #'\n #' @param dbdir The file in which the DuckDB database should be stored\n #' @param read_only Whether the database file should be opened in read-only mode\n@@ -12,7 +12,6 @@ DBDIR_MEMORY <- \":memory:\"\n #' @export\n #' @examples\n #' \\dontrun{\n-#' #' library(DBI)\n #' duckdb::duckdb()\n #' }\n #'\ndiff --git a/tools/rpkg/man/duckdb_driver.Rd b/tools/rpkg/man/duckdb_driver.Rd\nindex 7ae1043091b3..c06eebe926c5 100644\n--- a/tools/rpkg/man/duckdb_driver.Rd\n+++ b/tools/rpkg/man/duckdb_driver.Rd\n@@ -67,7 +67,6 @@ A DuckDB database instance.\n }\n \\examples{\n \\dontrun{\n-#' library(DBI)\n duckdb::duckdb()\n }\n \n",
  "test_patch": "diff --git a/tools/rpkg/tests/testthat.R b/tools/rpkg/tests/testthat.R\nindex 03b5eae9b505..4eca55582d09 100644\n--- a/tools/rpkg/tests/testthat.R\n+++ b/tools/rpkg/tests/testthat.R\n@@ -1,4 +1,5 @@\n-library(\"testthat\")\n+library(testthat)\n+library(DBI)\n \n # the easy part\n test_check(\"duckdb\")\ndiff --git a/tools/rpkg/tests/testthat/test_bind.R b/tools/rpkg/tests/testthat/test_bind.R\nindex 4e15c4429dee..2698768961db 100644\n--- a/tools/rpkg/tests/testthat/test_bind.R\n+++ b/tools/rpkg/tests/testthat/test_bind.R\n@@ -1,6 +1,3 @@\n-library(\"testthat\")\n-library(\"DBI\")\n-\n test_convert <- function(con, type, val) {\n   val_comp <- val\n   if (is.factor(val)) {\ndiff --git a/tools/rpkg/tests/testthat/test_parquet.R b/tools/rpkg/tests/testthat/test_parquet.R\nindex 275fd22d697d..d6d973d8826d 100644\n--- a/tools/rpkg/tests/testthat/test_parquet.R\n+++ b/tools/rpkg/tests/testthat/test_parquet.R\n@@ -1,6 +1,3 @@\n-library(\"testthat\")\n-library(\"DBI\")\n-\n test_that(\"parquet reader works on the notorious userdata1 file\", {\n   con <- dbConnect(duckdb::duckdb())\n   res <- dbGetQuery(con, \"SELECT * FROM parquet_scan('userdata1.parquet')\")\ndiff --git a/tools/rpkg/tests/testthat/test_read.R b/tools/rpkg/tests/testthat/test_read.R\nindex 8571b4c3be3f..124c0d3333f7 100644\n--- a/tools/rpkg/tests/testthat/test_read.R\n+++ b/tools/rpkg/tests/testthat/test_read.R\n@@ -1,6 +1,3 @@\n-library(\"testthat\")\n-library(\"DBI\")\n-\n test_that(\"read_csv_duckdb() works as expected\", {\n   con <- dbConnect(duckdb::duckdb())\n \ndiff --git a/tools/rpkg/tests/testthat/test_readonly.R b/tools/rpkg/tests/testthat/test_readonly.R\nindex 624e6bcf5fbc..37314c05048f 100644\n--- a/tools/rpkg/tests/testthat/test_readonly.R\n+++ b/tools/rpkg/tests/testthat/test_readonly.R\n@@ -1,18 +1,14 @@\n-library(testthat)\n-\n test_that(\"read_only flag and shutdown works as expected\", {\n-  library(\"DBI\")\n \n   dbdir <- tempfile()\n \n   # 1st: create a db and write some tables\n \n   callr::r(function(dbdir) {\n-    library(\"DBI\")\n-    con <- dbConnect(duckdb::duckdb(), dbdir, read_only = FALSE) # FALSE is the default\n+    con <- DBI::dbConnect(duckdb::duckdb(), dbdir, read_only = FALSE) # FALSE is the default\n     print(con)\n-    res <- dbWriteTable(con, \"iris\", iris)\n-    dbDisconnect(con)\n+    res <- DBI::dbWriteTable(con, \"iris\", iris)\n+    DBI::dbDisconnect(con)\n     duckdb::duckdb_shutdown(con@driver)\n   }, args = list(dbdir))\n \n@@ -30,10 +26,9 @@ test_that(\"read_only flag and shutdown works as expected\", {\n \n   # con is still alive\n   callr::r(function(dbdir) {\n-    library(\"DBI\")\n-    con <- dbConnect(duckdb::duckdb(), dbdir, read_only = TRUE)\n-    res <- dbReadTable(con, \"iris\")\n-    dbDisconnect(con, shutdown = TRUE)\n+    con <- DBI::dbConnect(duckdb::duckdb(), dbdir, read_only = TRUE)\n+    res <- DBI::dbReadTable(con, \"iris\")\n+    DBI::dbDisconnect(con, shutdown = TRUE)\n   }, args = list(dbdir))\n \n   # shut down one of them again\n@@ -47,10 +42,9 @@ test_that(\"read_only flag and shutdown works as expected\", {\n   # now we can get write access again\n   # TODO shutdown\n   callr::r(function(dbdir) {\n-    library(\"DBI\")\n-    con <- dbConnect(duckdb::duckdb(), dbdir, read_only = FALSE) # FALSE is the default\n-    res <- dbWriteTable(con, \"iris2\", iris)\n-    dbDisconnect(con)\n+    con <- DBI::dbConnect(duckdb::duckdb(), dbdir, read_only = FALSE) # FALSE is the default\n+    res <- DBI::dbWriteTable(con, \"iris2\", iris)\n+    DBI::dbDisconnect(con)\n   }, args = list(dbdir))\n \n   expect_true(T)\ndiff --git a/tools/rpkg/tests/testthat/test_register.R b/tools/rpkg/tests/testthat/test_register.R\nindex 5de72c3d48d5..81e74d37a505 100644\n--- a/tools/rpkg/tests/testthat/test_register.R\n+++ b/tools/rpkg/tests/testthat/test_register.R\n@@ -1,7 +1,3 @@\n-library(\"testthat\")\n-library(\"DBI\")\n-\n-\n test_that(\"duckdb_register() works\", {\n   con <- dbConnect(duckdb::duckdb())\n \n",
  "problem_statement": "R: Move {testthat} from Imports to Suggests\n{testthat} usually lives in Suggests and should not be imported.\r\n\r\nThe import of `testthat::skip()` should be replaced.\r\n\r\nhttps://github.com/cwida/duckdb/blob/acd392bf8b45e13a920ede21a08da1c5fd096953/tools/rpkg/R/Result.R#L223-L239\n",
  "hints_text": "Please also take dbplyr out of the imports while you're at it as discussed",
  "created_at": "2020-07-26T13:49:37Z"
}