{
  "repo": "duckdb/duckdb",
  "pull_number": 4847,
  "instance_id": "duckdb__duckdb-4847",
  "issue_numbers": [
    "4842"
  ],
  "base_commit": "8e9e2398542bdf5358a89e85ee2ccfc436f72c4e",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\nindex 6c90c4f58568..909858caa09f 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n@@ -89,15 +89,18 @@ public static int type_to_int(DuckDBColumnType type) throws SQLException {\n \t\t\treturn Types.INTEGER;\n \t\tcase BIGINT:\n \t\t\treturn Types.BIGINT;\n+\t\tcase LIST:\n+\t\t\treturn Types.ARRAY;\n+\t\tcase ENUM:\n \t\tcase HUGEINT:\n-\t\t\treturn Types.JAVA_OBJECT;\n \t\tcase UTINYINT:\n-\t\t\treturn Types.JAVA_OBJECT;\n \t\tcase USMALLINT:\n-\t\t\treturn Types.JAVA_OBJECT;\n+\t\tcase STRUCT:\n+\t\tcase UUID:\n+\t\tcase JSON:\n \t\tcase UINTEGER:\n-\t\t\treturn Types.JAVA_OBJECT;\n \t\tcase UBIGINT:\n+\t\tcase INTERVAL:\n \t\t\treturn Types.JAVA_OBJECT;\n \t\tcase FLOAT:\n \t\t\treturn Types.FLOAT;\n@@ -118,13 +121,10 @@ public static int type_to_int(DuckDBColumnType type) throws SQLException {\n \t\t\treturn Types.TIMESTAMP;\n \t\tcase TIMESTAMP_WITH_TIME_ZONE:\n \t\t\treturn Types.TIMESTAMP_WITH_TIMEZONE;\n-\t\tcase INTERVAL:\n-\t\t\treturn Types.JAVA_OBJECT;\n \t\tcase BLOB:\n \t\t\treturn Types.BLOB;\n-\n \t\tdefault:\n-\t\t\tthrow new SQLException(\"Unsupported type \" + type.toString());\n+\t\t\tthrow new SQLException(\"Unsupported type \" + type);\n \t\t}\n \t}\n \ndiff --git a/tools/jdbc/src/main/java/org/duckdb/JsonNode.java b/tools/jdbc/src/main/java/org/duckdb/JsonNode.java\nindex dd24baae812d..0ddce6b9f6ea 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/JsonNode.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/JsonNode.java\n@@ -1,5 +1,7 @@\n package org.duckdb;\n \n+import java.util.Objects;\n+\n /**\n  * Basic wrapper for the JSON type - modelled after the jackson databind JsonNode\n  */\n@@ -15,10 +17,10 @@ public boolean isObject() {\n         return source.charAt(0) == '{';\n     }\n     public boolean isBoolean() {\n-        return source == \"true\" || source == \"false\";\n+        return \"true\".equals(source) || \"false\".equals(source);\n     }\n     public boolean isNull() {\n-        return source == \"null\";\n+        return \"null\".equals(source);\n     }\n     public boolean isNumber() {\n         return Character.isDigit(source.charAt(0));\n@@ -29,4 +31,17 @@ public boolean isString() {\n     public String toString() {\n         return source;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof JsonNode)) return false;\n+        JsonNode jsonNode = (JsonNode) o;\n+        return Objects.equals(source, jsonNode.source);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(source);\n+    }\n }\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex 22b7ce0ca5e6..4130d037c8c6 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -2282,14 +2282,25 @@ public static void test_json() throws Exception {\n \t\ttry (Statement stmt = conn.createStatement()) {\n \t\t\tResultSet rs = stmt.executeQuery(\"select [1, 5]::JSON\");\n \t\t\trs.next();\n+\t\t\tassertEquals(rs.getMetaData().getColumnType(1), Types.JAVA_OBJECT);\n \t\t\tJsonNode jsonNode = (JsonNode) rs.getObject(1);\n \t\t\tassertTrue(jsonNode.isArray());\n \t\t\tassertEquals(jsonNode.toString(), \"[1, 5]\");\n \t\t}\n \n \t\ttry (Statement stmt = conn.createStatement()) {\n-\t\t\tResultSet rs = stmt.executeQuery(\"select \\'hello\\'::JSON\");\n+\t\t\tResultSet rs = stmt.executeQuery(\"select {'key': 'value'}::JSON\");\n \t\t\trs.next();\n+\t\t\tassertEquals(rs.getMetaData().getColumnType(1), Types.JAVA_OBJECT);\n+\t\t\tJsonNode jsonNode = (JsonNode) rs.getObject(1);\n+\t\t\tassertTrue(jsonNode.isObject());\n+\t\t\tassertEquals(jsonNode.toString(), \"{'key': value}\"); // this isn't valid json output, must load json extension for that\n+\t\t}\n+\n+\t\ttry (Statement stmt = conn.createStatement()) {\n+\t\t\tResultSet rs = stmt.executeQuery(\"select 'hello'::JSON\");\n+\t\t\trs.next();\n+\t\t\tassertEquals(rs.getMetaData().getColumnType(1), Types.JAVA_OBJECT);\n \t\t\tJsonNode jsonNode = (JsonNode) rs.getObject(1);\n \t\t\tassertTrue(jsonNode.isString());\n \t\t\tassertEquals(jsonNode.toString(), \"hello\");\n",
  "problem_statement": "JSON not working as expected using DataGrip and JDBC driver 0.5.1\n### What happens?\n\nTesting how to extract information from JSON strings, I got some unexpected errors.\r\n\r\nFor more details, you can see [the discussion in the DuckDB Discord](https://discord.com/channels/909674491309850675/921073327009853451/1025148079533477908).\n\n### To Reproduce\n\nYou can try with a query like this:\r\n\r\n```sql\r\n    with data as (select '{\"key\": \"value\"}' tags)\r\n  select json_transform(tags, '{\"key\": \"VARCHAR\"}') t\r\n    from data;\r\n```\r\nIt returns to me `No enum constant org.duckdb.DuckDBColumnType.STRUCT(key VARCHAR)`.\r\n\r\nI could make it work using:\r\n```sql\r\n    with data as (select '{\"key\": \"value\"}' tags)\r\n  select json_transform(tags, '{\"key\": \"VARCHAR\"}')::VARCHAR t\r\n    from data;\r\n```\r\nWhich returns a string.\r\n\r\nBut not using:\r\n```sql\r\n    with data as (select '{\"key\": \"value\"}' tags)\r\n  select json_transform(tags, '{\"key\": \"VARCHAR\"}')::JSON t\r\n    from data;\r\n```\r\nEven after running\r\n```\r\ninstall 'json';\r\nload 'json';\r\n```\r\n\r\nAdditional information:\r\n- This works:\r\n```sql\r\n    with data as (select '{\"key\": \"value\"}' tags)\r\n  select tags ->>'key' t\r\n    from data;\r\n```\r\nBut this fails:\r\n```sql\r\n    with data as (select '{\"key\": \"value\"}' tags)\r\n  select tags ->'key' t\r\n    from data;\r\n```\r\nWith error:\r\n```<failed to load>\r\njava.sql.SQLException: Unsupported type JSON\r\n\tat org.duckdb.DuckDBResultSetMetaData.type_to_int(DuckDBResultSetMetaData.java:125)\r\n\tat org.duckdb.DuckDBResultSetMetaData.getColumnType(DuckDBResultSetMetaData.java:133)\r\n\tin RemoteResultSetMetaDataImpl.getFixedColumnType(RemoteResultSetMetaDataImpl.java:105)\r\n```\n\n### OS:\n\niOS\n\n### DuckDB Version:\n\n0.5.1\n\n### DuckDB Client:\n\nJDBC - DataGrip\n\n### Full Name:\n\nFrancesco Mucio\n\n### Affiliation:\n\nPicsart\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2022-09-30T05:10:15Z"
}