You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Unexpected Result When Using `IS DISTINCT FROM` and `CASE WHEN` in a JOIN clause
### What happens?

The query involving the `IS DISTINCT FROM` operator with a `NATURAL RIGHT JOIN` returns an empty table when it should return one row. The expected behavior is that the `WHERE` condition would evaluate to `TRUE` (as the second query) and thus include the joined row in the result set.

### To Reproduce

```sql

CREATE TABLE t1(c0 INT, c1 INT);
CREATE TABLE t0(c0 INT);
INSERT INTO t1 (c0, c1) VALUES (0, 1);

SELECT * FROM t0 NATURAL RIGHT JOIN t1; -- 0 1
SELECT ((CASE t0.c0 WHEN t0.c0 THEN 1 ELSE NULL END )IS DISTINCT FROM((1+(CASE t1.c1 WHEN t1.c1 THEN 2 ELSE NULL END )))) FROM t0 NATURAL RIGHT JOIN t1; -- true
SELECT * FROM t0 NATURAL RIGHT JOIN t1 WHERE ((CASE t0.c0 WHEN t0.c0 THEN 1 ELSE NULL END )IS DISTINCT FROM((1+(CASE t1.c1 WHEN t1.c1 THEN 2 ELSE NULL END ))));
-- Expected: 0 1
-- Actual: empty table
```

### OS:

ubuntu 22.04

### DuckDB Version:

v0.10.3-dev1500 202ebd80f4

### DuckDB Client:

CLI

### Full Name:

Suyang Zhong

### Affiliation:

NUS

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
18: 
19: ## Installation
20: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
21: 
22: ## Data Import
23: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
24: 
25: ```sql
26: SELECT * FROM 'myfile.csv';
27: SELECT * FROM 'myfile.parquet';
28: ```
29: 
30: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
31: 
32: ## SQL Reference
33: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
34: 
35: ## Development
36: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
37: 
38: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
39: 
40: ## Support
41: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/optimizer/rule/move_constants.cpp]
1: #include "duckdb/optimizer/rule/move_constants.hpp"
2: 
3: #include "duckdb/common/exception.hpp"
4: #include "duckdb/common/value_operations/value_operations.hpp"
5: #include "duckdb/planner/expression/bound_comparison_expression.hpp"
6: #include "duckdb/planner/expression/bound_constant_expression.hpp"
7: #include "duckdb/planner/expression/bound_function_expression.hpp"
8: #include "duckdb/optimizer/expression_rewriter.hpp"
9: 
10: namespace duckdb {
11: 
12: MoveConstantsRule::MoveConstantsRule(ExpressionRewriter &rewriter) : Rule(rewriter) {
13: 	auto op = make_uniq<ComparisonExpressionMatcher>();
14: 	op->matchers.push_back(make_uniq<ConstantExpressionMatcher>());
15: 	op->policy = SetMatcher::Policy::UNORDERED;
16: 
17: 	auto arithmetic = make_uniq<FunctionExpressionMatcher>();
18: 	// we handle multiplication, addition and subtraction because those are "easy"
19: 	// integer division makes the division case difficult
20: 	// e.g. [x / 2 = 3] means [x = 6 OR x = 7] because of truncation -> no clean rewrite rules
21: 	arithmetic->function = make_uniq<ManyFunctionMatcher>(unordered_set<string> {"+", "-", "*"});
22: 	// we match only on integral numeric types
23: 	arithmetic->type = make_uniq<IntegerTypeMatcher>();
24: 	auto child_constant_matcher = make_uniq<ConstantExpressionMatcher>();
25: 	auto child_expression_matcher = make_uniq<ExpressionMatcher>();
26: 	child_constant_matcher->type = make_uniq<IntegerTypeMatcher>();
27: 	child_expression_matcher->type = make_uniq<IntegerTypeMatcher>();
28: 	arithmetic->matchers.push_back(std::move(child_constant_matcher));
29: 	arithmetic->matchers.push_back(std::move(child_expression_matcher));
30: 	arithmetic->policy = SetMatcher::Policy::SOME;
31: 	op->matchers.push_back(std::move(arithmetic));
32: 	root = std::move(op);
33: }
34: 
35: unique_ptr<Expression> MoveConstantsRule::Apply(LogicalOperator &op, vector<reference<Expression>> &bindings,
36:                                                 bool &changes_made, bool is_root) {
37: 	auto &comparison = bindings[0].get().Cast<BoundComparisonExpression>();
38: 	auto &outer_constant = bindings[1].get().Cast<BoundConstantExpression>();
39: 	auto &arithmetic = bindings[2].get().Cast<BoundFunctionExpression>();
40: 	auto &inner_constant = bindings[3].get().Cast<BoundConstantExpression>();
41: 	D_ASSERT(arithmetic.return_type.IsIntegral());
42: 	D_ASSERT(arithmetic.children[0]->return_type.IsIntegral());
43: 	if (inner_constant.value.IsNull() || outer_constant.value.IsNull()) {
44: 		return make_uniq<BoundConstantExpression>(Value(comparison.return_type));
45: 	}
46: 	auto &constant_type = outer_constant.return_type;
47: 	hugeint_t outer_value = IntegralValue::Get(outer_constant.value);
48: 	hugeint_t inner_value = IntegralValue::Get(inner_constant.value);
49: 
50: 	idx_t arithmetic_child_index = arithmetic.children[0].get() == &inner_constant ? 1 : 0;
51: 	auto &op_type = arithmetic.function.name;
52: 	if (op_type == "+") {
53: 		// [x + 1 COMP 10] OR [1 + x COMP 10]
54: 		// order does not matter in addition:
55: 		// simply change right side to 10-1 (outer_constant - inner_constant)
56: 		if (!Hugeint::TrySubtractInPlace(outer_value, inner_value)) {
57: 			return nullptr;
58: 		}
59: 		auto result_value = Value::HUGEINT(outer_value);
60: 		if (!result_value.DefaultTryCastAs(constant_type)) {
61: 			if (comparison.type != ExpressionType::COMPARE_EQUAL) {
62: 				return nullptr;
63: 			}
64: 			// if the cast is not possible then the comparison is not possible
65: 			// for example, if we have x + 5 = 3, where x is an unsigned number, we will get x = -2
66: 			// since this is not possible we can remove the entire branch here
67: 			return ExpressionRewriter::ConstantOrNull(std::move(arithmetic.children[arithmetic_child_index]),
68: 			                                          Value::BOOLEAN(false));
69: 		}
70: 		outer_constant.value = std::move(result_value);
71: 	} else if (op_type == "-") {
72: 		// [x - 1 COMP 10] O R [1 - x COMP 10]
73: 		// order matters in subtraction:
74: 		if (arithmetic_child_index == 0) {
75: 			// [x - 1 COMP 10]
76: 			// change right side to 10+1 (outer_constant + inner_constant)
77: 			if (!Hugeint::TryAddInPlace(outer_value, inner_value)) {
78: 				return nullptr;
79: 			}
80: 			auto result_value = Value::HUGEINT(outer_value);
81: 			if (!result_value.DefaultTryCastAs(constant_type)) {
82: 				// if the cast is not possible then an equality comparison is not possible
83: 				if (comparison.type != ExpressionType::COMPARE_EQUAL) {
84: 					return nullptr;
85: 				}
86: 				return ExpressionRewriter::ConstantOrNull(std::move(arithmetic.children[arithmetic_child_index]),
87: 				                                          Value::BOOLEAN(false));
88: 			}
89: 			outer_constant.value = std::move(result_value);
90: 		} else {
91: 			// [1 - x COMP 10]
92: 			// change right side to 1-10=-9
93: 			if (!Hugeint::TrySubtractInPlace(inner_value, outer_value)) {
94: 				return nullptr;
95: 			}
96: 			auto result_value = Value::HUGEINT(inner_value);
97: 			if (!result_value.DefaultTryCastAs(constant_type)) {
98: 				// if the cast is not possible then an equality comparison is not possible
99: 				if (comparison.type != ExpressionType::COMPARE_EQUAL) {
100: 					return nullptr;
101: 				}
102: 				return ExpressionRewriter::ConstantOrNull(std::move(arithmetic.children[arithmetic_child_index]),
103: 				                                          Value::BOOLEAN(false));
104: 			}
105: 			outer_constant.value = std::move(result_value);
106: 			// in this case, we should also flip the comparison
107: 			// e.g. if we have [4 - x < 2] then we should have [x > 2]
108: 			comparison.type = FlipComparisonExpression(comparison.type);
109: 		}
110: 	} else {
111: 		D_ASSERT(op_type == "*");
112: 		// [x * 2 COMP 10] OR [2 * x COMP 10]
113: 		// order does not matter in multiplication:
114: 		// change right side to 10/2 (outer_constant / inner_constant)
115: 		// but ONLY if outer_constant is cleanly divisible by the inner_constant
116: 		if (inner_value == 0) {
117: 			// x * 0, the result is either 0 or NULL
118: 			// we let the arithmetic_simplification rule take care of simplifying this first
119: 			return nullptr;
120: 		}
121: 		// check out of range for HUGEINT or not cleanly divisible
122: 		// HUGEINT is not cleanly divisible when outer_value == minimum and inner value == -1. (modulo overflow)
123: 		if ((outer_value == NumericLimits<hugeint_t>::Minimum() && inner_value == -1) ||
124: 		    outer_value % inner_value != 0) {
125: 			bool is_equality = comparison.type == ExpressionType::COMPARE_EQUAL;
126: 			bool is_inequality = comparison.type == ExpressionType::COMPARE_NOTEQUAL;
127: 			if (is_equality || is_inequality) {
128: 				// we know the values are not equal
129: 				// the result will be either FALSE or NULL (if COMPARE_EQUAL)
130: 				// or TRUE or NULL (if COMPARE_NOTEQUAL)
131: 				return ExpressionRewriter::ConstantOrNull(std::move(arithmetic.children[arithmetic_child_index]),
132: 				                                          Value::BOOLEAN(is_inequality));
133: 			} else {
134: 				// not cleanly divisible and we are doing > >= < <=, skip the simplification for now
135: 				return nullptr;
136: 			}
137: 		}
138: 		if (inner_value < 0) {
139: 			// multiply by negative value, need to flip expression
140: 			comparison.type = FlipComparisonExpression(comparison.type);
141: 		}
142: 		// else divide the RHS by the LHS
143: 		// we need to do a range check on the cast even though we do a division
144: 		// because e.g. -128 / -1 = 128, which is out of range
145: 		auto result_value = Value::HUGEINT(outer_value / inner_value);
146: 		if (!result_value.DefaultTryCastAs(constant_type)) {
147: 			return ExpressionRewriter::ConstantOrNull(std::move(arithmetic.children[arithmetic_child_index]),
148: 			                                          Value::BOOLEAN(false));
149: 		}
150: 		outer_constant.value = std::move(result_value);
151: 	}
152: 	// replace left side with x
153: 	// first extract x from the arithmetic expression
154: 	auto arithmetic_child = std::move(arithmetic.children[arithmetic_child_index]);
155: 	// then place in the comparison
156: 	if (comparison.left.get() == &outer_constant) {
157: 		comparison.right = std::move(arithmetic_child);
158: 	} else {
159: 		comparison.left = std::move(arithmetic_child);
160: 	}
161: 	changes_made = true;
162: 	return nullptr;
163: }
164: 
165: } // namespace duckdb
[end of src/optimizer/rule/move_constants.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: