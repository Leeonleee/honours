{
  "repo": "duckdb/duckdb",
  "pull_number": 970,
  "instance_id": "duckdb__duckdb-970",
  "issue_numbers": [
    "965"
  ],
  "base_commit": "b30481acb919dbb402098bba22a477e39fcac397",
  "patch": "diff --git a/src/execution/window_segment_tree.cpp b/src/execution/window_segment_tree.cpp\nindex 8f111fb30b1c..ba6918eebc75 100644\n--- a/src/execution/window_segment_tree.cpp\n+++ b/src/execution/window_segment_tree.cpp\n@@ -46,6 +46,7 @@ void WindowSegmentTree::WindowSegmentValue(idx_t l_idx, idx_t begin, idx_t end)\n \tif (begin == end) {\n \t\treturn;\n \t}\n+\tinputs.Reset();\n \tinputs.SetCardinality(end - begin);\n \n \tidx_t start_in_vector = begin % STANDARD_VECTOR_SIZE;\ndiff --git a/src/parser/transform/expression/transform_function.cpp b/src/parser/transform/expression/transform_function.cpp\nindex 5842b469d063..ff0d2600cdac 100644\n--- a/src/parser/transform/expression/transform_function.cpp\n+++ b/src/parser/transform/expression/transform_function.cpp\n@@ -63,9 +63,9 @@ void Transformer::TransformWindowDef(PGWindowDef *window_spec, WindowExpression\n \t\texpr->start = WindowBoundary::EXPR_PRECEDING;\n \t} else if (window_spec->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) {\n \t\texpr->start = WindowBoundary::EXPR_FOLLOWING;\n-\t} else if (window_spec->frameOptions & (FRAMEOPTION_START_CURRENT_ROW | FRAMEOPTION_RANGE)) {\n+\t} else if ((window_spec->frameOptions & FRAMEOPTION_START_CURRENT_ROW) && (window_spec->frameOptions & FRAMEOPTION_RANGE)) {\n \t\texpr->start = WindowBoundary::CURRENT_ROW_RANGE;\n-\t} else if (window_spec->frameOptions & (FRAMEOPTION_START_CURRENT_ROW | FRAMEOPTION_ROWS)) {\n+\t} else if ((window_spec->frameOptions & FRAMEOPTION_START_CURRENT_ROW) && (window_spec->frameOptions & FRAMEOPTION_ROWS)) {\n \t\texpr->start = WindowBoundary::CURRENT_ROW_ROWS;\n \t}\n \n@@ -77,9 +77,9 @@ void Transformer::TransformWindowDef(PGWindowDef *window_spec, WindowExpression\n \t\texpr->end = WindowBoundary::EXPR_PRECEDING;\n \t} else if (window_spec->frameOptions & FRAMEOPTION_END_VALUE_FOLLOWING) {\n \t\texpr->end = WindowBoundary::EXPR_FOLLOWING;\n-\t} else if (window_spec->frameOptions & (FRAMEOPTION_END_CURRENT_ROW | FRAMEOPTION_RANGE)) {\n+\t} else if ((window_spec->frameOptions & FRAMEOPTION_END_CURRENT_ROW) && (window_spec->frameOptions & FRAMEOPTION_RANGE)) {\n \t\texpr->end = WindowBoundary::CURRENT_ROW_RANGE;\n-\t} else if (window_spec->frameOptions & (FRAMEOPTION_END_CURRENT_ROW | FRAMEOPTION_ROWS)) {\n+\t} else if ((window_spec->frameOptions & FRAMEOPTION_END_CURRENT_ROW) && (window_spec->frameOptions & FRAMEOPTION_ROWS)) {\n \t\texpr->end = WindowBoundary::CURRENT_ROW_ROWS;\n \t}\n \n",
  "test_patch": "diff --git a/test/sql/window/window_mtcars.test b/test/sql/window/window_mtcars.test\nnew file mode 100644\nindex 000000000000..398814bbc090\n--- /dev/null\n+++ b/test/sql/window/window_mtcars.test\n@@ -0,0 +1,147 @@\n+# name: test/sql/window/window_mtcars.test\n+# description: Test window function without\n+# group: [window]\n+\n+require vector_size 512\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE mtcars (mpg DECIMAL, cyl INTEGER, disp DECIMAL, hp INTEGER, drat DECIMAL, wt DECIMAL, qsec DECIMAL, vs INTEGER, am INTEGER, gear INTEGER, carb INTEGER);\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('21.0', '6', '160.0', '110', '3.90', '2.620', '16.46', '0', '1', '4', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('21.0', '6', '160.0', '110', '3.90', '2.875', '17.02', '0', '1', '4', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('22.8', '4', '108.0', '93', '3.85', '2.320', '18.61', '1', '1', '4', '1');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('21.4', '6', '258.0', '110', '3.08', '3.215', '19.44', '1', '0', '3', '1');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('18.7', '8', '360.0', '175', '3.15', '3.440', '17.02', '0', '0', '3', '2');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('18.1', '6', '225.0', '105', '2.76', '3.460', '20.22', '1', '0', '3', '1');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('14.3', '8', '360.0', '245', '3.21', '3.570', '15.84', '0', '0', '3', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('24.4', '4', '146.7', '62', '3.69', '3.190', '20.00', '1', '0', '4', '2');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('22.8', '4', '140.8', '95', '3.92', '3.150', '22.90', '1', '0', '4', '2');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('19.2', '6', '167.6', '123', '3.92', '3.440', '18.30', '1', '0', '4', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('17.8', '6', '167.6', '123', '3.92', '3.440', '18.90', '1', '0', '4', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('16.4', '8', '275.8', '180', '3.07', '4.070', '17.40', '0', '0', '3', '3');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('17.3', '8', '275.8', '180', '3.07', '3.730', '17.60', '0', '0', '3', '3');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('15.2', '8', '275.8', '180', '3.07', '3.780', '18.00', '0', '0', '3', '3');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('10.4', '8', '472.0', '205', '2.93', '5.250', '17.98', '0', '0', '3', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('10.4', '8', '460.0', '215', '3.00', '5.424', '17.82', '0', '0', '3', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('14.7', '8', '440.0', '230', '3.23', '5.345', '17.42', '0', '0', '3', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('32.4', '4', '78.7', '66', '4.08', '2.200', '19.47', '1', '1', '4', '1');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('30.4', '4', '75.7', '52', '4.93', '1.615', '18.52', '1', '1', '4', '2');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('33.9', '4', '71.1', '65', '4.22', '1.835', '19.90', '1', '1', '4', '1');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('21.5', '4', '120.1', '97', '3.70', '2.465', '20.01', '1', '0', '3', '1');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('15.5', '8', '318.0', '150', '2.76', '3.520', '16.87', '0', '0', '3', '2');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('15.2', '8', '304.0', '150', '3.15', '3.435', '17.30', '0', '0', '3', '2');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('13.3', '8', '350.0', '245', '3.73', '3.840', '15.41', '0', '0', '3', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('19.2', '8', '400.0', '175', '3.08', '3.845', '17.05', '0', '0', '3', '2');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('27.3', '4', '79.0', '66', '4.08', '1.935', '18.90', '1', '1', '4', '1');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('26.0', '4', '120.3', '91', '4.43', '2.140', '16.70', '0', '1', '5', '2');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('30.4', '4', '95.1', '113', '3.77', '1.513', '16.90', '1', '1', '5', '2');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('15.8', '8', '351.0', '264', '4.22', '3.170', '14.50', '0', '1', '5', '4');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('19.7', '6', '145.0', '175', '3.62', '2.770', '15.50', '0', '1', '5', '6');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('15.0', '8', '301.0', '335', '3.54', '3.570', '14.60', '0', '1', '5', '8');\n+\n+statement ok\n+INSERT INTO mtcars VALUES ('21.4', '4', '121.0', '109', '4.11', '2.780', '18.60', '1', '1', '4', '2');\n+\n+query TT\n+SELECT\n+\tmpg,\n+\tSUM(mpg) OVER (ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS mpg_roll\n+FROM\n+\tmtcars\n+----\n+21.000\t21.000\n+21.000\t42.000\n+22.800\t43.800\n+21.400\t44.200\n+18.700\t40.100\n+18.100\t36.800\n+14.300\t32.400\n+24.400\t38.700\n+22.800\t47.200\n+19.200\t42.000\n+17.800\t37.000\n+16.400\t34.200\n+17.300\t33.700\n+15.200\t32.500\n+10.400\t25.600\n+10.400\t20.800\n+14.700\t25.100\n+32.400\t47.100\n+30.400\t62.800\n+33.900\t64.300\n+21.500\t55.400\n+15.500\t37.000\n+15.200\t30.700\n+13.300\t28.500\n+19.200\t32.500\n+27.300\t46.500\n+26.000\t53.300\n+30.400\t56.400\n+15.800\t46.200\n+19.700\t35.500\n+15.000\t34.700\n+21.400\t36.400\ndiff --git a/test/sql/window/window_rolling_summation.test_slow b/test/sql/window/window_rolling_summation.test_slow\nnew file mode 100644\nindex 000000000000..daf51c667117\n--- /dev/null\n+++ b/test/sql/window/window_rolling_summation.test_slow\n@@ -0,0 +1,37 @@\n+# name: test/sql/window/window_rolling_summation.test\n+# description: Rolling summation (issue #965)\n+# group: [window]\n+\n+require vector_size 512\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table temp as select * from range(0, 10000) temp(x);\n+\n+query TTTTT\n+SELECT *,\n+       expected=x_roll\n+FROM\n+  (SELECT x,\n+          rowid,\n+          CASE WHEN x=0 THEN 0\n+          ELSE x*2-1\n+          END AS expected,\n+          SUM(x) OVER (ORDER BY rowid ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS x_roll\n+   FROM temp) t1(x)\n+WHERE x BETWEEN 892 AND 902\n+ORDER BY x;\n+----\n+892\t892\t1783\t1783\t1\n+893\t893\t1785\t1785\t1\n+894\t894\t1787\t1787\t1\n+895\t895\t1789\t1789\t1\n+896\t896\t1791\t1791\t1\n+897\t897\t1793\t1793\t1\n+898\t898\t1795\t1795\t1\n+899\t899\t1797\t1797\t1\n+900\t900\t1799\t1799\t1\n+901\t901\t1801\t1801\t1\n+902\t902\t1803\t1803\t1\n\\ No newline at end of file\n",
  "problem_statement": "R: Incorrect results from rolling window summation\nI would imagine that this affects duckdb as a whole, but here is an example in R of computing a size 2 rolling summation of the current row + 1 row before it. I've compared with SQLite for the correct results:\r\n\r\n``` r\r\nlibrary(duckdb)\r\nlibrary(RSQLite)\r\nlibrary(DBI)\r\n\r\ncon_sqlite <- dbConnect(SQLite())\r\ncon_duck <- dbConnect(duckdb())\r\n\r\ndbWriteTable(con_sqlite, \"cars\", mtcars)\r\ndbWriteTable(con_duck, \"cars\", mtcars)\r\n\r\nquery <- \"\r\n  SELECT \r\n    mpg, \r\n    SUM(mpg) OVER (ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS mpg_roll\r\n  FROM\r\n    cars\r\n\"\r\n\r\nhead(dbGetQuery(con_sqlite, query), n = 10)\r\n#>     mpg mpg_roll\r\n#> 1  21.0     21.0\r\n#> 2  21.0     42.0\r\n#> 3  22.8     43.8\r\n#> 4  21.4     44.2\r\n#> 5  18.7     40.1\r\n#> 6  18.1     36.8\r\n#> 7  14.3     32.4\r\n#> 8  24.4     38.7\r\n#> 9  22.8     47.2\r\n#> 10 19.2     42.0\r\n\r\nhead(dbGetQuery(con_duck, query), n = 10)\r\n#>     mpg mpg_roll\r\n#> 1  21.0    642.9\r\n#> 2  21.0    642.9\r\n#> 3  22.8    621.9\r\n#> 4  21.4    600.9\r\n#> 5  18.7    578.1\r\n#> 6  18.1    556.7\r\n#> 7  14.3    538.0\r\n#> 8  24.4    519.9\r\n#> 9  22.8    505.6\r\n#> 10 19.2    481.2\r\n```\r\n\r\n<sup>Created on 2020-09-28 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9001)</sup>\n",
  "hints_text": "Possibly related to missing order by clause?  Without order by, correct interpretation may be that multiple preceding rows are tied/included.  TBH, not sure if there is constant handling here, with at least some dbms issuing a syntax error. \r\n\r\nBehavior appears correct with order by clause:  \r\n\r\nquery=\"\"\"\r\n  SELECT \r\n    mpg, \r\n    SUM(mpg) OVER (order by model ROWS BETWEEN 1 PRECEDING AND CURRENT ROW  ) AS mpg_roll\r\n  FROM\r\n    cars order by model  \r\n\"\"\"\r\nprint(cur.execute(query).fetchall())\r\n\r\n(15.2, 15.2), \r\n(10.4, 25.6), \r\n(13.3, 23.7), \r\n(14.7, 28.0), \r\n(22.8, 37.5), \r\n(15.5, 38.3), \r\n(14.3, 29.8), \r\n(19.7, 34.0), \r\n(32.4, 52.1), \r\n(27.3, 59.7), \r\n(15.8, 43.1), \r\n(30.4, 46.2), \r\n(21.4, 51.8), \r\n(18.7, 40.1), \r\n(10.4, 29.1), \r\n(30.4, 40.8), \r\n(15.0, 45.4), \r\n(21.0, 36.0), \r\n(21.0, 42.0), \r\n(22.8, 43.8), \r\n(24.4, 47.2), \r\n(19.2, 43.6), \r\n(17.8, 37.0), \r\n(16.4, 34.2), \r\n(17.3, 33.7), \r\n(15.2, 32.5), \r\n(19.2, 34.4), \r\n(26.0, 45.2), \r\n(33.9, 59.9), \r\n(21.5, 55.4), \r\n(18.1, 39.6), \r\n(21.4, 39.5)\r\n\nOh interesting. I probably would have expected the implicit row number to be used when order-by isn't specified here.\r\n\r\nNevertheless, I think there might still be some issues? Here is a similar example with a row number specified, again we just compute the rolling sum of the current value + 1 value before. Results seem to be incorrect at seemingly random locations\r\n\r\n``` r\r\nlibrary(duckdb)\r\n#> Warning: package 'duckdb' was built under R version 4.0.2\r\n#> Loading required package: DBI\r\nlibrary(DBI)\r\nlibrary(data.table)\r\n\r\ncon_duck <- dbConnect(duckdb())\r\n\r\nn_row <- 1e5L\r\n\r\ndf <- data.frame(\r\n  x = seq_len(n_row) + 0, \r\n  row_number = seq_len(n_row)\r\n)\r\n\r\nquery <- \"\r\n  SELECT \r\n    SUM(x) OVER (ORDER BY row_number ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS x_roll\r\n  FROM\r\n    temp\r\n\"\r\n\r\nduckdb_register(con_duck, \"temp\", df)\r\n\r\nroll_duck <- dbGetQuery(con_duck, query)$x_roll\r\nroll_dt <- frollsum(df$x, 2)\r\n\r\n# frollsum() doesn't compute on partial windows so hack this to mimic duckdb behavior\r\nroll_dt[[1]] <- df$x[[1]]\r\n\r\nissues <- roll_duck != roll_dt\r\n\r\n# quite a few differences\r\nsum(issues)\r\n#> [1] 6305\r\n\r\nfirst_diff <- which(issues)[1]\r\n\r\ndf$roll_duck <- roll_duck\r\ndf$roll_dt <- roll_dt\r\n\r\n# check out the rows around the first issue\r\ndf[first_diff + -5:5,]\r\n#>       x row_number roll_duck roll_dt\r\n#> 892 892        892      1783    1783\r\n#> 893 893        893      1785    1785\r\n#> 894 894        894      1787    1787\r\n#> 895 895        895      1789    1789\r\n#> 896 896        896      1791    1791\r\n#> 897 897        897      1857    1793\r\n#> 898 898        898      1923    1795\r\n#> 899 899        899      1925    1797\r\n#> 900 900        900      1927    1799\r\n#> 901 901        901      1929    1801\r\n#> 902 902        902      1931    1803\r\n```\r\n\r\n<sup>Created on 2020-09-28 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9001)</sup>\nThanks for the report! I can confirm this is a bug, even with the ordering specified. The following SQL statements reproduces your results:\r\n\r\n```sql\r\ncreate table temp as select * from range(0, 10000) temp(x);\r\nSELECT *,\r\n       expected=x_roll\r\nFROM\r\n  (SELECT x,\r\n          rowid,\r\n          CASE WHEN x=0 THEN 0\r\n          ELSE x*2-1\r\n          END AS expected,\r\n          SUM(x) OVER (ORDER BY rowid ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS x_roll\r\n   FROM temp) t1(x)\r\nWHERE x BETWEEN 892 AND 902\r\nORDER BY x;\r\n```\r\n\r\nThis gives the following results:\r\n```\r\nx           rowid       expected    x_roll      expected=x_roll\r\n----------  ----------  ----------  ----------  ---------------\r\n892         892         1783        1783        true           \r\n893         893         1785        1785        true           \r\n894         894         1787        1787        true           \r\n895         895         1789        1789        true           \r\n896         896         1791        1855        false          \r\n897         897         1793        1921        false          \r\n898         898         1795        1923        false          \r\n899         899         1797        1925        false          \r\n900         900         1799        1927        false          \r\n901         901         1801        1929        false          \r\n902         902         1803        1931        false    \r\n```\r\n\r\nThe case where no ORDER BY is specified is a bit more fuzzy indeed. This case is not as important as the results are not well defined (and many systems throw an error here). I do think the results you are seeing are a result of a bug as well (likely the same bug). Likely when we fix this bug the results will match the ones by SQLite.",
  "created_at": "2020-09-29T13:21:53Z"
}