{
  "repo": "duckdb/duckdb",
  "pull_number": 12208,
  "instance_id": "duckdb__duckdb-12208",
  "issue_numbers": [
    "11945"
  ],
  "base_commit": "d6c92486f3639c471b1a168fd7548ade6692b2aa",
  "patch": "diff --git a/tools/pythonpkg/scripts/cache_data.json b/tools/pythonpkg/scripts/cache_data.json\nindex edcbac28bd63..fb0a6b674967 100644\n--- a/tools/pythonpkg/scripts/cache_data.json\n+++ b/tools/pythonpkg/scripts/cache_data.json\n@@ -502,7 +502,8 @@\n         \"name\": \"types\",\n         \"children\": [\n             \"types.UnionType\",\n-            \"types.GenericAlias\"\n+            \"types.GenericAlias\",\n+            \"types.BuiltinFunctionType\"\n         ]\n     },\n     \"types.UnionType\": {\n@@ -517,6 +518,12 @@\n         \"name\": \"GenericAlias\",\n         \"children\": []\n     },\n+    \"types.BuiltinFunctionType\": {\n+        \"type\": \"attribute\",\n+        \"full_path\": \"types.BuiltinFunctionType\",\n+        \"name\": \"BuiltinFunctionType\",\n+        \"children\": []\n+    },\n     \"typing\": {\n         \"type\": \"module\",\n         \"full_path\": \"typing\",\ndiff --git a/tools/pythonpkg/scripts/imports.py b/tools/pythonpkg/scripts/imports.py\nindex 2e371c97ee2d..d597ab1ed6b3 100644\n--- a/tools/pythonpkg/scripts/imports.py\n+++ b/tools/pythonpkg/scripts/imports.py\n@@ -92,6 +92,7 @@\n \n types.UnionType\n types.GenericAlias\n+types.BuiltinFunctionType\n \n import typing\n \ndiff --git a/tools/pythonpkg/src/include/duckdb_python/import_cache/modules/types_module.hpp b/tools/pythonpkg/src/include/duckdb_python/import_cache/modules/types_module.hpp\nindex 4d4698061378..58f0be007c1f 100644\n--- a/tools/pythonpkg/src/include/duckdb_python/import_cache/modules/types_module.hpp\n+++ b/tools/pythonpkg/src/include/duckdb_python/import_cache/modules/types_module.hpp\n@@ -20,13 +20,15 @@ struct TypesCacheItem : public PythonImportCacheItem {\n \n public:\n \tTypesCacheItem()\n-\t    : PythonImportCacheItem(\"types\"), UnionType(\"UnionType\", this), GenericAlias(\"GenericAlias\", this) {\n+\t    : PythonImportCacheItem(\"types\"), UnionType(\"UnionType\", this), GenericAlias(\"GenericAlias\", this),\n+\t      BuiltinFunctionType(\"BuiltinFunctionType\", this) {\n \t}\n \t~TypesCacheItem() override {\n \t}\n \n \tPythonImportCacheItem UnionType;\n \tPythonImportCacheItem GenericAlias;\n+\tPythonImportCacheItem BuiltinFunctionType;\n };\n \n } // namespace duckdb\ndiff --git a/tools/pythonpkg/src/python_replacement_scan.cpp b/tools/pythonpkg/src/python_replacement_scan.cpp\nindex 37eebd943dcb..a5a61fe81995 100644\n--- a/tools/pythonpkg/src/python_replacement_scan.cpp\n+++ b/tools/pythonpkg/src/python_replacement_scan.cpp\n@@ -117,6 +117,11 @@ static unique_ptr<TableRef> TryReplacementObject(const py::object &entry, const\n \treturn std::move(table_function);\n }\n \n+static bool IsBuiltinFunction(const py::object &object) {\n+\tauto &import_cache_py = *DuckDBPyConnection::ImportCache();\n+\treturn py::isinstance(object, import_cache_py.types.BuiltinFunctionType());\n+}\n+\n static unique_ptr<TableRef> TryReplacement(py::dict &dict, const string &name, ClientContext &context,\n                                            py::object &current_frame) {\n \tauto table_name = py::str(name);\n@@ -125,6 +130,11 @@ static unique_ptr<TableRef> TryReplacement(py::dict &dict, const string &name, C\n \t\treturn nullptr;\n \t}\n \tconst py::object &entry = dict[table_name];\n+\n+\tif (IsBuiltinFunction(entry)) {\n+\t\treturn nullptr;\n+\t}\n+\n \tauto result = TryReplacementObject(entry, name, context);\n \tif (!result) {\n \t\tstd::string location = py::cast<py::str>(current_frame.attr(\"f_code\").attr(\"co_filename\"));\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/api/test_duckdb_connection.py b/tools/pythonpkg/tests/fast/api/test_duckdb_connection.py\nindex 4d1afb7b3bf4..c5f8e6375d69 100644\n--- a/tools/pythonpkg/tests/fast/api/test_duckdb_connection.py\n+++ b/tools/pythonpkg/tests/fast/api/test_duckdb_connection.py\n@@ -320,6 +320,14 @@ def test_close(self):\n     def test_interrupt(self):\n         assert None != duckdb.interrupt\n \n+    def test_wrap_shadowing(self):\n+        pd = NumpyPandas()\n+        import duckdb\n+\n+        df = pd.DataFrame({\"a\": [1, 2, 3]})\n+        res = duckdb.sql(\"from df\").fetchall()\n+        assert res == [(1,), (2,), (3,)]\n+\n     def test_wrap_coverage(self):\n         con = duckdb.default_connection\n \n",
  "problem_statement": "Shadowing of variable names in Python\n### What happens?\r\n\r\nIn builds subsequent to 10.2, names from the duckdb module appear to be shadowing Python variables when used in queries. \r\n\r\n### To Reproduce\r\n\r\nWhen I use a variable name for a dataframe in an SQL query that happens to be the name of some function in the duckdb module, I run in to the following problem. I'm using the variable name \"df\" in this case but I could have use \"pl\" or \"arrow\" or many other to reproduce the same error.\r\n\r\n```python\r\nimport pandas as pd\r\nimport duckdb\r\n\r\ndf = pd.DataFrame({\"a\":[1,2,3]})\r\nduckdb.sql(\"from df\")\r\n```\r\n```text\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/username/venv/lib/python3.12/site-packages/duckdb/__init__.py\", line 455, in sql\r\n    return conn.sql(query, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\r\nduckdb.duckdb.InvalidInputException: Invalid Input Error: Python Object \"df\" of type \"builtin_function_or_method\" found on line \"/Users/username/venv/lib/python3.12/site-packages/duckdb/__init__.py:455\" not suitable for replacement scans.\r\nMake sure that \"df\" is either a pandas.DataFrame, duckdb.DuckDBPyRelation, pyarrow Table, Dataset, RecordBatchReader, Scanner, or NumPy ndarrays with supported format\r\n```\r\nWhen I use a variable name for the dataframe that is not visible in the duckdb module then there are no problems.\r\n\r\n```python\r\npdf = df\r\nduckdb.sql(\"from pdf\")\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502\r\n\u2502 int64 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502\r\n\u2502     2 \u2502\r\n\u2502     3 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n### OS:\r\n\r\nMacOS Sonama 14.4.1 (silicon)\r\n\r\n### DuckDB Version:\r\n\r\n0.10.3-dev777\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nDavid Brennan\r\n\r\n### Affiliation:\r\n\r\nNone\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a nightly build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Might be related to #11202 actually, since it shows up in `duckdb.sql`\nCan we perhaps ignore objects of type `builtin_function_or_method` in replacement scans entirely?",
  "created_at": "2024-05-23T09:52:57Z"
}