{
  "repo": "duckdb/duckdb",
  "pull_number": 5539,
  "instance_id": "duckdb__duckdb-5539",
  "issue_numbers": [
    "5410"
  ],
  "base_commit": "8948cead74f4fb8bd024791793ed47f22c7263d9",
  "patch": "diff --git a/src/common/box_renderer.cpp b/src/common/box_renderer.cpp\nindex a7da542fcc64..b9a48aabf896 100644\n--- a/src/common/box_renderer.cpp\n+++ b/src/common/box_renderer.cpp\n@@ -573,6 +573,13 @@ void BoxRenderer::Render(ClientContext &context, const vector<string> &names, co\n \t// figure out how many/which rows to render\n \tidx_t row_count = result.Count();\n \tidx_t rows_to_render = MinValue<idx_t>(row_count, config.max_rows);\n+\tif (row_count <= config.max_rows + 3) {\n+\t\t// hiding rows adds 3 extra rows\n+\t\t// so hiding rows makes no sense if we are only slightly over the limit\n+\t\t// if we are 1 row over the limit hiding rows will actually increase the number of lines we display!\n+\t\t// in this case render all the rows\n+\t\trows_to_render = row_count;\n+\t}\n \tidx_t top_rows;\n \tidx_t bottom_rows;\n \tif (rows_to_render == row_count) {\ndiff --git a/tools/shell/shell.c b/tools/shell/shell.c\nindex a0b260263518..2527bafb5b48 100644\n--- a/tools/shell/shell.c\n+++ b/tools/shell/shell.c\n@@ -12892,7 +12892,8 @@ static void exec_prepared_stmt(\n ){\n   int rc;\n   if (pArg->cMode == MODE_DuckBox) {\n-\t  char *str = sqlite3_print_duckbox(pStmt, pArg->max_rows, pArg->nullValue);\n+\t  size_t max_rows = pArg->outfile[0] == '\\0' || pArg->outfile[0] == '|' ? pArg->max_rows : (size_t) -1;\n+\t  char *str = sqlite3_print_duckbox(pStmt, max_rows, pArg->nullValue);\n \t  if (str) {\n \t\t  utf8_printf(pArg->out, \"%s\", str);\n \t\t  sqlite3_free(str);\n@@ -20391,7 +20392,7 @@ static void verify_uninitialized(void){\n static void main_init(ShellState *data) {\n   memset(data, 0, sizeof(*data));\n   data->normalMode = data->cMode = data->mode = MODE_DuckBox;\n-  data->max_rows = 20;\n+  data->max_rows = 40;\n   data->autoExplain = 1;\n   memcpy(data->colSeparator,SEP_Column, 2);\n   memcpy(data->rowSeparator,SEP_Row, 2);\n",
  "test_patch": "diff --git a/tools/shell/shell-test.py b/tools/shell/shell-test.py\nindex 295942880d9c..7769bbd0dcca 100644\n--- a/tools/shell/shell-test.py\n+++ b/tools/shell/shell-test.py\n@@ -849,6 +849,22 @@ def tf():\n select 42 limit 0;\n ''', out='0 rows')\n \n+# #5411 - with maxrows=2, we still display all 4 rows (hiding them would take up more space)\n+test('''\n+.maxrows 2\n+select * from range(4);\n+''', out='1')\n+\n+outfile = tf()\n+test('''\n+.maxrows 2\n+.output %s\n+SELECT * FROM range(100);\n+''' % outfile)\n+outstr = open(outfile,'rb').read().decode('utf8')\n+if '50' not in outstr:\n+     raise Exception('.output test failed')\n+\n # test null-byte rendering\n test('select varchar from test_all_types();', out='goo\\\\0se')\n \n",
  "problem_statement": "[CLI] BoxRenderer hides columns, even when `.output <file>` is set\n### What happens?\n\nWhen executing queries through the CLI, when the column is too big for the window of the terminal, we hide the overflowing columns.\r\nBut when `.output <file>` is used, the result will be written to a file, so this interactive display (or more specifically; the hiding feature of it) is often not preferred when this is the case.\r\n\r\n(Problem mentioned on the DuckDB Discord server, but I figured it was worth a bug report)\n\n### To Reproduce\n\n```sql\r\n.output filename\r\nselect * from table_with_many_many_columns;\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\nmaster\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nThijs Bruineman\n\n### Affiliation:\n\nDuckDB Labs\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2022-11-29T15:04:28Z"
}