{
  "repo": "duckdb/duckdb",
  "pull_number": 4070,
  "instance_id": "duckdb__duckdb-4070",
  "issue_numbers": [
    "3906"
  ],
  "base_commit": "cdbc688c124023f847c0b5e94db02c1206e8d92e",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\nindex 651ba4d8c915..86319df74f62 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n@@ -30,7 +30,12 @@\n import java.time.LocalDateTime;\n import java.time.OffsetDateTime;\n \n+import java.util.logging.Logger;\n+import java.util.logging.Level;\n+\n public class DuckDBPreparedStatement implements PreparedStatement {\n+\tprivate static Logger logger = Logger.getLogger(DuckDBPreparedStatement.class.getName());\n+\n \tprivate DuckDBConnection conn;\n \n \tprivate ByteBuffer stmt_ref = null;\n@@ -292,7 +297,7 @@ public int getMaxFieldSize() throws SQLException {\n \n \t@Override\n \tpublic void setMaxFieldSize(int max) throws SQLException {\n-\t\tthrow new SQLFeatureNotSupportedException();\n+\t\tlogger.log(Level.FINE, \"setMaxFieldSize not supported\");\n \t}\n \n \t@Override\n@@ -315,7 +320,7 @@ public int getQueryTimeout() throws SQLException {\n \n \t@Override\n \tpublic void setQueryTimeout(int seconds) throws SQLException {\n-\t\tthrow new SQLFeatureNotSupportedException();\n+\t\tlogger.log(Level.FINE, \"setQueryTimeout not supported\");\n \t}\n \n \t@Override\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\nindex 904aad97ae5e..8407e581fbe2 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n@@ -213,7 +213,7 @@ public boolean isSigned(int column) throws SQLException {\n \t}\n \n \tpublic int getColumnDisplaySize(int column) throws SQLException {\n-\t\tthrow new SQLFeatureNotSupportedException();\n+\t\treturn 0; // most systems will fall back to getPrecision\n \t}\n \n \tpublic int getPrecision(int column) throws SQLException {\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex 06c56dcd9bac..9c749be0799c 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -27,6 +27,8 @@\n import java.time.LocalDateTime;\n import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n+import javax.sql.rowset.RowSetProvider;\n+import javax.sql.rowset.CachedRowSet;\n \n import org.duckdb.DuckDBAppender;\n import org.duckdb.DuckDBConnection;\n@@ -2186,6 +2188,18 @@ public static void test_get_schema() throws Exception {\n \t\t}\n \t}\n \n+\t/**\n+\t * @see GH3906\n+\t */\n+\tpublic static void test_cached_row_set() throws Exception {\n+\t\tCachedRowSet rowSet = RowSetProvider.newFactory().createCachedRowSet();\n+\t\trowSet.setUrl(\"jdbc:duckdb:\");\n+\t\trowSet.setCommand(\"select 1\");\n+\t\trowSet.execute();\n+\n+\t\trowSet.next();\n+\t\tassertEquals(rowSet.getInt(1), 1);\n+\t}\n \n \tpublic static void main(String[] args) throws Exception {\n \t\t// Woo I can do reflection too, take this, JUnit!\n",
  "problem_statement": "DuckDb Jdbc driver limitations\n#### What happens?\r\nWe have a use case for doing custom sql things in our app for which we are using calcite before sending the query to duckdb. I am using DuckDb's jdbc driver but so far ran into following limitations -\r\n1. Duckdb's DuckDBConnection.java class does not support `getSchema()` which `Retrieves this {@code Connection} object's current schema name.` so cannot directly using JDBC catalog schema from calcite which automatically discovers db schemas as it uses this method [here](https://github.com/apache/calcite/blob/main/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcCatalogSchema.java#L112)\r\n```\r\npublic String getSchema() throws SQLException {\r\n\t\tthrow new SQLFeatureNotSupportedException();\r\n\t}\r\n```\r\n2. Was thinking of using [CachedRowSet](https://docs.oracle.com/javase/7/docs/api/javax/sql/rowset/CachedRowSet.html) for serializing query responses but it uses ResultSetMetaData's `getColumnDisplaySize` method, which is not implemented (DuckDBResultSetMetaData.java)\r\n```\r\npublic int getColumnDisplaySize(int column) throws SQLException {\r\n\t\tthrow new SQLFeatureNotSupportedException();\r\n\t}\r\n```\r\n\r\nAny particular reason why these methods are not implemented yet ?\r\n\r\n#### To Reproduce\r\nMethods are not implemented \r\n\r\n#### Environment (please complete the following information):\r\n - duckdb_jdbc - 0.3.3\r\n\r\n#### Identity Disclosure:\r\n - Full Name: Parag Jain\r\n - Affiliation: Rill Data\r\n\r\n\r\n\r\n\n",
  "hints_text": "Thanks for the report! Indeed these methods should be implemented.\n`getSchema` has been implemented in #3988\nI'll be looking to implement the remaining required methods for CachedResultSet over the coming days as well",
  "created_at": "2022-07-08T18:20:49Z"
}