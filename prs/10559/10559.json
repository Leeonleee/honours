{
  "repo": "duckdb/duckdb",
  "pull_number": 10559,
  "instance_id": "duckdb__duckdb-10559",
  "issue_numbers": [
    "10528",
    "10528"
  ],
  "base_commit": "ba390fa34661203a899b23ceaf4ea73e7bb5ee86",
  "patch": "diff --git a/data/csv/integer_exponent.csv b/data/csv/integer_exponent.csv\nnew file mode 100644\nindex 000000000000..9b7d3aa8f5cd\n--- /dev/null\n+++ b/data/csv/integer_exponent.csv\n@@ -0,0 +1,4 @@\n+a,b,c\n+1,2,3\n+4,5,6\n+7,8,1E-7\ndiff --git a/src/include/duckdb/common/operator/integer_cast_operator.hpp b/src/include/duckdb/common/operator/integer_cast_operator.hpp\nindex 10953fe2099b..28a5125f3f14 100644\n--- a/src/include/duckdb/common/operator/integer_cast_operator.hpp\n+++ b/src/include/duckdb/common/operator/integer_cast_operator.hpp\n@@ -267,6 +267,9 @@ static bool IntegerCastLoop(const char *buf, idx_t len, T &result, bool strict)\n \t\t\t}\n \t\t\tif (ALLOW_EXPONENT) {\n \t\t\t\tif (buf[pos] == 'e' || buf[pos] == 'E') {\n+\t\t\t\t\tif (strict) {\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n \t\t\t\t\tif (pos == start_pos) {\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n",
  "test_patch": "diff --git a/test/sql/copy/csv/integer_exponent.test b/test/sql/copy/csv/integer_exponent.test\nnew file mode 100644\nindex 000000000000..711ac18560f8\n--- /dev/null\n+++ b/test/sql/copy/csv/integer_exponent.test\n@@ -0,0 +1,13 @@\n+# name: test/sql/copy/csv/integer_exponent.test\n+# description: Test exponents without decimal points\n+# group: [csv]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query III\n+from 'data/csv/integer_exponent.csv'\n+----\n+1\t2\t3.0\n+4\t5\t6.0\n+7\t8\t1e-07\n",
  "problem_statement": "CSV parsing double in the scientific notation (1E-7) as bigint \n### What happens?\r\n\r\nHello, \r\n\r\nI am trying to parse multiple csv files with autodetect and in some of them the double numbers are in the scientific notation, i.e. 1E-7 . Duckdb is automatically converting it to BIGINT. Is there a way to parse it as double? I am scanning multiple csv files and I do not know the column name. it is parsed as double only if the value contains the decimal separator (1.0E-7).\r\n\r\n Is this expected behaviour?\r\n\r\n### To Reproduce\r\n\r\nsample.csv as:\r\n```\r\na,b,c\r\n1,2,3\r\n4,5,6\r\n7,8,1E-7\r\n```\r\n\r\nthan, run:\r\n```sql\r\ncreate table tmp as select * from 'sample.csv';\r\n```\r\n\r\n### OS:\r\n\r\ndebian amd64\r\n\r\n### DuckDB Version:\r\n\r\nv9.2\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nDavide Placido\r\n\r\n### Affiliation:\r\n\r\nNone\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\nCSV parsing double in the scientific notation (1E-7) as bigint \n### What happens?\r\n\r\nHello, \r\n\r\nI am trying to parse multiple csv files with autodetect and in some of them the double numbers are in the scientific notation, i.e. 1E-7 . Duckdb is automatically converting it to BIGINT. Is there a way to parse it as double? I am scanning multiple csv files and I do not know the column name. it is parsed as double only if the value contains the decimal separator (1.0E-7).\r\n\r\n Is this expected behaviour?\r\n\r\n### To Reproduce\r\n\r\nsample.csv as:\r\n```\r\na,b,c\r\n1,2,3\r\n4,5,6\r\n7,8,1E-7\r\n```\r\n\r\nthan, run:\r\n```sql\r\ncreate table tmp as select * from 'sample.csv';\r\n```\r\n\r\n### OS:\r\n\r\ndebian amd64\r\n\r\n### DuckDB Version:\r\n\r\nv9.2\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nDavide Placido\r\n\r\n### Affiliation:\r\n\r\nNone\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "This seems to be expected behavior but both we'll double-check it and look for workarounds. Stay tuned.\nThis seems to be expected behavior but both we'll double-check it and look for workarounds. Stay tuned.",
  "created_at": "2024-02-09T18:48:29Z"
}