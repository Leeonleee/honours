{
  "repo": "duckdb/duckdb",
  "pull_number": 2604,
  "instance_id": "duckdb__duckdb-2604",
  "issue_numbers": [
    "2599",
    "2599"
  ],
  "base_commit": "a22047abc1b63d37447c7ed9867654667c2ef880",
  "patch": "diff --git a/src/include/duckdb/execution/executor.hpp b/src/include/duckdb/execution/executor.hpp\nindex 2c8c2a89233d..739684a9cf18 100644\n--- a/src/include/duckdb/execution/executor.hpp\n+++ b/src/include/duckdb/execution/executor.hpp\n@@ -26,6 +26,8 @@ class Task;\n struct PipelineEventStack;\n struct ProducerToken;\n \n+using event_map_t = unordered_map<const Pipeline *, PipelineEventStack>;\n+\n class Executor {\n \tfriend class Pipeline;\n \tfriend class PipelineTask;\n@@ -81,14 +83,11 @@ class Executor {\n \t                            unordered_map<Pipeline *, vector<shared_ptr<Pipeline>>> &child_pipelines,\n \t                            vector<shared_ptr<Event>> &events, bool main_schedule = true);\n \n-\tvoid SchedulePipeline(const shared_ptr<Pipeline> &pipeline,\n-\t                      unordered_map<Pipeline *, PipelineEventStack> &event_map, vector<shared_ptr<Event>> &events,\n-\t                      bool complete_pipeline);\n-\tvoid ScheduleUnionPipeline(const shared_ptr<Pipeline> &pipeline, PipelineEventStack &stack,\n-\t                           unordered_map<Pipeline *, PipelineEventStack> &event_map,\n-\t                           vector<shared_ptr<Event>> &events);\n-\tvoid ScheduleChildPipeline(Pipeline *parent, const shared_ptr<Pipeline> &pipeline,\n-\t                           unordered_map<Pipeline *, PipelineEventStack> &event_map,\n+\tvoid SchedulePipeline(const shared_ptr<Pipeline> &pipeline, event_map_t &event_map,\n+\t                      vector<shared_ptr<Event>> &events, bool complete_pipeline);\n+\tPipeline *ScheduleUnionPipeline(const shared_ptr<Pipeline> &pipeline, const Pipeline *parent,\n+\t                                event_map_t &event_map, vector<shared_ptr<Event>> &events);\n+\tvoid ScheduleChildPipeline(Pipeline *parent, const shared_ptr<Pipeline> &pipeline, event_map_t &event_map,\n \t                           vector<shared_ptr<Event>> &events);\n \tvoid ExtractPipelines(shared_ptr<Pipeline> &pipeline, vector<shared_ptr<Pipeline>> &result);\n \tbool NextExecutor();\ndiff --git a/src/parallel/executor.cpp b/src/parallel/executor.cpp\nindex 7cf232ed996f..bb7560f3e81c 100644\n--- a/src/parallel/executor.cpp\n+++ b/src/parallel/executor.cpp\n@@ -40,14 +40,18 @@ struct PipelineEventStack {\n \tEvent *pipeline_complete_event;\n };\n \n-void Executor::ScheduleUnionPipeline(const shared_ptr<Pipeline> &pipeline, PipelineEventStack &parent_stack,\n-                                     unordered_map<Pipeline *, PipelineEventStack> &event_map,\n-                                     vector<shared_ptr<Event>> &events) {\n+Pipeline *Executor::ScheduleUnionPipeline(const shared_ptr<Pipeline> &pipeline, const Pipeline *parent,\n+                                          event_map_t &event_map, vector<shared_ptr<Event>> &events) {\n \tpipeline->Ready();\n \n \tD_ASSERT(pipeline);\n \tauto pipeline_event = make_shared<PipelineEvent>(pipeline);\n \n+\tauto parent_stack_entry = event_map.find(parent);\n+\tD_ASSERT(parent_stack_entry != event_map.end());\n+\n+\tauto &parent_stack = parent_stack_entry->second;\n+\n \tPipelineEventStack stack;\n \tstack.pipeline_event = pipeline_event.get();\n \tstack.pipeline_finish_event = parent_stack.pipeline_finish_event;\n@@ -57,18 +61,21 @@ void Executor::ScheduleUnionPipeline(const shared_ptr<Pipeline> &pipeline, Pipel\n \tparent_stack.pipeline_finish_event->AddDependency(*pipeline_event);\n \n \tevents.push_back(move(pipeline_event));\n+\tevent_map.insert(make_pair(pipeline.get(), stack));\n+\n+\tauto parent_pipeline = pipeline.get();\n \n \tauto union_entry = union_pipelines.find(pipeline.get());\n \tif (union_entry != union_pipelines.end()) {\n \t\tfor (auto &entry : union_entry->second) {\n-\t\t\tScheduleUnionPipeline(entry, parent_stack, event_map, events);\n+\t\t\tparent_pipeline = ScheduleUnionPipeline(entry, parent_pipeline, event_map, events);\n \t\t}\n \t}\n-\tevent_map.insert(make_pair(pipeline.get(), stack));\n+\n+\treturn parent_pipeline;\n }\n \n-void Executor::ScheduleChildPipeline(Pipeline *parent, const shared_ptr<Pipeline> &pipeline,\n-                                     unordered_map<Pipeline *, PipelineEventStack> &event_map,\n+void Executor::ScheduleChildPipeline(Pipeline *parent, const shared_ptr<Pipeline> &pipeline, event_map_t &event_map,\n                                      vector<shared_ptr<Event>> &events) {\n \tpipeline->Ready();\n \n@@ -102,12 +109,10 @@ void Executor::ScheduleChildPipeline(Pipeline *parent, const shared_ptr<Pipeline\n \t}\n \n \tevents.push_back(move(pipeline_event));\n-\n \tevent_map.insert(make_pair(child_ptr, stack));\n }\n \n-void Executor::SchedulePipeline(const shared_ptr<Pipeline> &pipeline,\n-                                unordered_map<Pipeline *, PipelineEventStack> &event_map,\n+void Executor::SchedulePipeline(const shared_ptr<Pipeline> &pipeline, event_map_t &event_map,\n                                 vector<shared_ptr<Event>> &events, bool complete_pipeline) {\n \tD_ASSERT(pipeline);\n \n@@ -129,13 +134,15 @@ void Executor::SchedulePipeline(const shared_ptr<Pipeline> &pipeline,\n \tevents.push_back(move(pipeline_finish_event));\n \tevents.push_back(move(pipeline_complete_event));\n \n+\tevent_map.insert(make_pair(pipeline.get(), stack));\n+\n \tauto union_entry = union_pipelines.find(pipeline.get());\n \tif (union_entry != union_pipelines.end()) {\n+\t\tauto parent_pipeline = pipeline.get();\n \t\tfor (auto &entry : union_entry->second) {\n-\t\t\tScheduleUnionPipeline(entry, stack, event_map, events);\n+\t\t\tparent_pipeline = ScheduleUnionPipeline(entry, parent_pipeline, event_map, events);\n \t\t}\n \t}\n-\tevent_map.insert(make_pair(pipeline.get(), stack));\n }\n \n void Executor::ScheduleEventsInternal(const vector<shared_ptr<Pipeline>> &pipelines,\n@@ -143,7 +150,7 @@ void Executor::ScheduleEventsInternal(const vector<shared_ptr<Pipeline>> &pipeli\n                                       vector<shared_ptr<Event>> &events, bool main_schedule) {\n \tD_ASSERT(events.empty());\n \t// create all the required pipeline events\n-\tunordered_map<Pipeline *, PipelineEventStack> event_map;\n+\tevent_map_t event_map;\n \tfor (auto &pipeline : pipelines) {\n \t\tSchedulePipeline(pipeline, event_map, events, main_schedule);\n \t}\n",
  "test_patch": "diff --git a/test/sql/setops/union_limit.test b/test/sql/setops/union_limit.test\nnew file mode 100644\nindex 000000000000..f3b9368080b8\n--- /dev/null\n+++ b/test/sql/setops/union_limit.test\n@@ -0,0 +1,194 @@\n+# name: test/sql/setops/union_limit.test\n+# description: Test union limit\n+# group: [setops]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+SELECT 1 UNION ALL SELECT * FROM range(2, 100) UNION ALL SELECT 999 LIMIT 5;\n+----\n+1\n+2\n+3\n+4\n+5\n+\n+query I\n+SELECT 'select count(case'a union all select 'when a='||range||' then 1' from range(100) LIMIT 5;\n+----\n+select count(case\n+when a=0 then 1\n+when a=1 then 1\n+when a=2 then 1\n+when a=3 then 1\n+\n+query I\n+SELECT STRING_AGG(a, ' ') FROM (SELECT 'select count(case'a union all select 'when a='||range||' then 1' from range(2) union all select 'end) from t') tbl;\n+----\n+select count(case when a=0 then 1 when a=1 then 1 end) from t\n+\n+query I\n+SELECT 'select count(case'a union all select 'when a='||range||' then 1' from range(2) union all select 'end) from t' LIMIT 5;\n+----\n+select count(case\n+when a=0 then 1\n+when a=1 then 1\n+end) from t\n+\n+query I\n+SELECT 'select count(case'a union all select 'when a='||range||' then 1' from range(100) union all select 'end) from t' LIMIT 5;\n+----\n+select count(case\n+when a=0 then 1\n+when a=1 then 1\n+when a=2 then 1\n+when a=3 then 1\n+\n+\n+query I\n+SELECT 1\n+UNION ALL\n+(\n+\tSELECT * FROM generate_series(10, 12, 1)\n+\tUNION ALL\n+\t(\n+\t\tSELECT * FROM generate_series(100, 103, 1)\n+\t)\n+\tUNION ALL\n+\tSELECT * FROM generate_series(1000, 1002, 1)\n+)\n+UNION ALL\n+SELECT * FROM generate_series(10000, 10002, 1)\n+UNION ALL\n+(\n+\tSELECT * FROM generate_series(100000, 100002, 1)\n+\tUNION ALL\n+\tSELECT * FROM generate_series(1000000, 1000003, 1)\n+);\n+----\n+1\n+10\n+11\n+12\n+100\n+101\n+102\n+103\n+1000\n+1001\n+1002\n+10000\n+10001\n+10002\n+100000\n+100001\n+100002\n+1000000\n+1000001\n+1000002\n+1000003\n+\n+query I\n+SELECT ARRAY_AGG(1)\n+UNION ALL\n+(\n+\tSELECT ARRAY_AGG(i) FROM generate_series(10, 12, 1) tbl(i)\n+\tUNION ALL\n+\t(\n+\t\tSELECT ARRAY_AGG(i) FROM generate_series(100, 103, 1) tbl(i)\n+\t)\n+\tUNION ALL\n+\tSELECT ARRAY_AGG(i) FROM generate_series(1000, 1002, 1) tbl(i)\n+)\n+UNION ALL\n+SELECT ARRAY_AGG(i) FROM generate_series(10000, 10002, 1) tbl(i)\n+UNION ALL\n+(\n+\tSELECT ARRAY_AGG(i) FROM generate_series(100000, 100002, 1) tbl(i)\n+\tUNION ALL\n+\tSELECT ARRAY_AGG(i) FROM generate_series(1000000, 1000003, 1) tbl(i)\n+);\n+----\n+[1]\n+[10, 11, 12]\n+[100, 101, 102, 103]\n+[1000, 1001, 1002]\n+[10000, 10001, 10002]\n+[100000, 100001, 100002]\n+[1000000, 1000001, 1000002, 1000003]\n+\n+\n+query I\n+SELECT 1\n+UNION ALL\n+(\n+\tSELECT * FROM generate_series(10, 12, 1)\n+\tUNION ALL\n+\t(\n+\t\tSELECT * FROM generate_series(100, 103, 1)\n+\t)\n+\tUNION ALL\n+\tSELECT * FROM generate_series(1000, 1002, 1)\n+)\n+UNION ALL\n+SELECT * FROM generate_series(10000, 10002, 1)\n+UNION ALL\n+(\n+\tSELECT * FROM generate_series(100000, 100002, 1)\n+\tUNION ALL\n+\tSELECT * FROM generate_series(1000000, 1000003, 1)\n+)\n+LIMIT 1000;\n+----\n+1\n+10\n+11\n+12\n+100\n+101\n+102\n+103\n+1000\n+1001\n+1002\n+10000\n+10001\n+10002\n+100000\n+100001\n+100002\n+1000000\n+1000001\n+1000002\n+1000003\n+\n+query I\n+SELECT ARRAY_AGG(1)\n+UNION ALL\n+(\n+\tSELECT ARRAY_AGG(i) FROM generate_series(10, 12, 1) tbl(i)\n+\tUNION ALL\n+\t(\n+\t\tSELECT ARRAY_AGG(i) FROM generate_series(100, 103, 1) tbl(i)\n+\t)\n+\tUNION ALL\n+\tSELECT ARRAY_AGG(i) FROM generate_series(1000, 1002, 1) tbl(i)\n+)\n+UNION ALL\n+SELECT ARRAY_AGG(i) FROM generate_series(10000, 10002, 1) tbl(i)\n+UNION ALL\n+(\n+\tSELECT ARRAY_AGG(i) FROM generate_series(100000, 100002, 1) tbl(i)\n+\tUNION ALL\n+\tSELECT ARRAY_AGG(i) FROM generate_series(1000000, 1000003, 1) tbl(i)\n+)\n+LIMIT 1000;\n+----\n+[1]\n+[10, 11, 12]\n+[100, 101, 102, 103]\n+[1000, 1001, 1002]\n+[10000, 10001, 10002]\n+[100000, 100001, 100002]\n+[1000000, 1000001, 1000002, 1000003]\n",
  "problem_statement": "union all disorders\n#### What happens?\r\nuse 2 union all to link 3 select, the 3rd sometimes come to in front of the 2nd.\r\n\r\n#### To Reproduce\r\nv0.3.0 46a0fc50a is right\r\n\r\n```\r\nD SELECT 'select count(case 'a union all select 'when a='||range||' then 1 ' from range(2) union all select 'end) from t';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 select count(case  \u2502\r\n\u2502 when a=0 then 1    \u2502\r\n\u2502 when a=1 then 1    \u2502\r\n\u2502 end) from t        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select * from(SELECT 'select count(case 'a union all select 'when a='||range||' then 1 ' from range(2000) union all select 'end) from t')limit 5;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 select count(case  \u2502\r\n\u2502 when a=0 then 1    \u2502\r\n\u2502 when a=1 then 1    \u2502\r\n\u2502 when a=2 then 1    \u2502\r\n\u2502 when a=3 then 1    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nv0.3.1-dev705 b77704c86 is right when second select is from range(2)\r\nwrong when range(2000)\r\n```\r\nD SELECT 'select count(case 'a union all select 'when a='||range||' then 1 ' from range(2) union all select 'end) from t';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 select count(case  \u2502\r\n\u2502 when a=0 then 1    \u2502\r\n\u2502 when a=1 then 1    \u2502\r\n\u2502 end) from t        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nD select * from(SELECT 'select count(case 'a union all select 'when a='||range||' then 1 ' from range(2000) union all select 'end) from t')limit 5;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 select count(case  \u2502\r\n\u2502 end) from t        \u2502\r\n\u2502 when a=0 then 1    \u2502\r\n\u2502 when a=1 then 1    \u2502\r\n\u2502 when a=2 then 1    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\t\t\r\n\r\n#### Environment (please complete the following information):\r\n - OS: [e.g. iOS]\r\n - DuckDB Version: [e.g. 22]0.3.1-dev 705\r\n - DuckDB Client: [e.g. Python]\r\n\r\n#### Before Submitting\r\n\r\n- [x ] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x ] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n \nunion all disorders\n#### What happens?\r\nuse 2 union all to link 3 select, the 3rd sometimes come to in front of the 2nd.\r\n\r\n#### To Reproduce\r\nv0.3.0 46a0fc50a is right\r\n\r\n```\r\nD SELECT 'select count(case 'a union all select 'when a='||range||' then 1 ' from range(2) union all select 'end) from t';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 select count(case  \u2502\r\n\u2502 when a=0 then 1    \u2502\r\n\u2502 when a=1 then 1    \u2502\r\n\u2502 end) from t        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select * from(SELECT 'select count(case 'a union all select 'when a='||range||' then 1 ' from range(2000) union all select 'end) from t')limit 5;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 select count(case  \u2502\r\n\u2502 when a=0 then 1    \u2502\r\n\u2502 when a=1 then 1    \u2502\r\n\u2502 when a=2 then 1    \u2502\r\n\u2502 when a=3 then 1    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nv0.3.1-dev705 b77704c86 is right when second select is from range(2)\r\nwrong when range(2000)\r\n```\r\nD SELECT 'select count(case 'a union all select 'when a='||range||' then 1 ' from range(2) union all select 'end) from t';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 select count(case  \u2502\r\n\u2502 when a=0 then 1    \u2502\r\n\u2502 when a=1 then 1    \u2502\r\n\u2502 end) from t        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nD select * from(SELECT 'select count(case 'a union all select 'when a='||range||' then 1 ' from range(2000) union all select 'end) from t')limit 5;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         a          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 select count(case  \u2502\r\n\u2502 end) from t        \u2502\r\n\u2502 when a=0 then 1    \u2502\r\n\u2502 when a=1 then 1    \u2502\r\n\u2502 when a=2 then 1    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\t\t\r\n\r\n#### Environment (please complete the following information):\r\n - OS: [e.g. iOS]\r\n - DuckDB Version: [e.g. 22]0.3.1-dev 705\r\n - DuckDB Client: [e.g. Python]\r\n\r\n#### Before Submitting\r\n\r\n- [x ] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x ] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n \n",
  "hints_text": "Hello, thanks for your report. the result set order under parallelism is generally not defined. If you need a particular order,  try adding an `ORDER BY`. Does this fix the issue?\r\n\r\nAlso, we have seen a lot of activity from you in the last weeks. Would you mind telling us a little about yourself? Are you working with DuckDB for your employer, and if so, who do you work for? Keep in mind that this issue tracker is not meant to be a commercial support forum. See also https://berthub.eu/articles/posts/anonymous-help/ Thanks!\nHello, thanks for your report. the result set order under parallelism is generally not defined. If you need a particular order,  try adding an `ORDER BY`. Does this fix the issue?\r\n\r\nAlso, we have seen a lot of activity from you in the last weeks. Would you mind telling us a little about yourself? Are you working with DuckDB for your employer, and if so, who do you work for? Keep in mind that this issue tracker is not meant to be a commercial support forum. See also https://berthub.eu/articles/posts/anonymous-help/ Thanks!",
  "created_at": "2021-11-15T18:56:06Z"
}