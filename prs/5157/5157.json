{
  "repo": "duckdb/duckdb",
  "pull_number": 5157,
  "instance_id": "duckdb__duckdb-5157",
  "issue_numbers": [
    "5104"
  ],
  "base_commit": "80ef5caa5b372f9dd9baeb860a5f024abe96f492",
  "patch": "diff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex e3fce07f19f9..86f86d3a5994 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -717,6 +717,9 @@ DuckDBPyConnection *DuckDBPyConnection::Enter() {\n bool DuckDBPyConnection::Exit(DuckDBPyConnection &self, const py::object &exc_type, const py::object &exc,\n                               const py::object &traceback) {\n \tself.Close();\n+\tif (exc_type.ptr() != Py_None) {\n+\t\treturn false;\n+\t}\n \treturn true;\n }\n \n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/api/test_with_propagating_exceptions.py b/tools/pythonpkg/tests/fast/api/test_with_propagating_exceptions.py\nnew file mode 100644\nindex 000000000000..c9fa98d4d1d6\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/api/test_with_propagating_exceptions.py\n@@ -0,0 +1,18 @@\n+import pytest\n+import duckdb\n+\n+class TestWithPropagatingExceptions(object):\n+\n+    def test_with(self):\n+        # Should propagate exception raised in the 'with duckdb.connect() ..'\n+        with pytest.raises(duckdb.ParserException, match=\"syntax error at or near *\"):\n+            with duckdb.connect() as con:\n+                print('before')\n+                con.execute('invalid')\n+                print('after')\n+\n+        # Does not raise an exception\n+        with duckdb.connect() as con:\n+            print('before')\n+            con.execute('select 1')\n+            print('after')\n",
  "problem_statement": "Using \"with duckdb.connect\" causes silent crashes on invalid SQL (and perhaps other kinds of errors)\n### What happens?\r\n\r\nUsing `with duckdb.connect` causes silent crashes on invalid SQL (and perhaps other kinds of errors).\r\n\r\n### To Reproduce\r\n\r\nThis:\r\n\r\n```\r\nimport ducckdb\r\n\r\nprint(duckdb.__version__)\r\n\r\nwith duckdb.connect() as con:\r\n  print('before')\r\n  con.execute('select 1')\r\n  print('after')\r\n\r\nwith duckdb.connect() as con:\r\n  print('before')\r\n  con.execute('invalid')\r\n  print('after')\r\n```\r\n\r\nproduces this output:\r\n\r\n```\r\n0.5.1\r\nbefore\r\nafter\r\nbefore\r\n```\r\n\r\nThere's a missing `after` for the second `with` block and there are no exceptions shown, it fails silently.\r\n\r\n### OS:\r\n\r\nlinux\r\n\r\n### DuckDB Version:\r\n\r\n0.5.1\r\n\r\n### DuckDB Client:\r\n\r\npython\r\n\r\n### Full Name:\r\n\r\nCebaa\r\n\r\n### Affiliation:\r\n\r\nNone\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Pretty sure that's just being caused by not rethrowing errors in this function: https://github.com/duckdb/duckdb/blob/efa7dfa643290010cca95b93b71f7a87a2772f59/tools/pythonpkg/src/pyconnection.cpp#L717-L721",
  "created_at": "2022-11-01T09:38:21Z"
}