You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Unexpected result when casting `TIMESTAMP_S` to `TIME`
### What happens?

Consider the following test cases. The second and the third queries are unexpected since the expression and its negation cannot be evaluated as `true` at the same time. I could reproduce it using `TIMESTAMP_S`, `TIMESTAMP_NS`, and `TIMESTAMP_MS`. Things work well for `TIMESTAMP`.

### To Reproduce

```sql
CREATE TABLE  t0(c0 TIMESTAMP_S); -- also for TIMESTAMP_NS and TIMESTAMP_MS
INSERT INTO t0(c0) VALUES ('2030-01-01');
INSERT INTO t0( c0) VALUES ('1969-12-23 20:44:40');

SELECT * FROM t0; -- 2030-01-01 00:00:00, 1969-12-23 20:44:40
-- Unexpected that both query returns the same result
SELECT (CAST(t0.c0 AS TIME)>=('12:34:56')) FROM t0; -- true, true
SELECT NOT (CAST(t0.c0 AS TIME)>=('12:34:56')) FROM t0; -- true, true


-- original query found by TLP
SELECT * FROM t0 WHERE (CAST(t0.c0 AS TIME)>=('12:34:56')) UNION ALL SELECT * FROM t0 WHERE (NOT (CAST(t0.c0 AS TIME)>=('12:34:56'))) UNION ALL SELECT * FROM t0 WHERE (((CAST(t0.c0 AS TIME)>=('12:34:56'))) IS NULL);
-- 4 rows (unexpected)
```

### OS:

Ubuntu 22.04

### DuckDB Version:

v1.1.1-dev238 f0f78913a5

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Suyang Zhong

### Affiliation:

NUS

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
Unexpected result when casting `TIMESTAMP_S` to `TIME`
### What happens?

Consider the following test cases. The second and the third queries are unexpected since the expression and its negation cannot be evaluated as `true` at the same time. I could reproduce it using `TIMESTAMP_S`, `TIMESTAMP_NS`, and `TIMESTAMP_MS`. Things work well for `TIMESTAMP`.

### To Reproduce

```sql
CREATE TABLE  t0(c0 TIMESTAMP_S); -- also for TIMESTAMP_NS and TIMESTAMP_MS
INSERT INTO t0(c0) VALUES ('2030-01-01');
INSERT INTO t0( c0) VALUES ('1969-12-23 20:44:40');

SELECT * FROM t0; -- 2030-01-01 00:00:00, 1969-12-23 20:44:40
-- Unexpected that both query returns the same result
SELECT (CAST(t0.c0 AS TIME)>=('12:34:56')) FROM t0; -- true, true
SELECT NOT (CAST(t0.c0 AS TIME)>=('12:34:56')) FROM t0; -- true, true


-- original query found by TLP
SELECT * FROM t0 WHERE (CAST(t0.c0 AS TIME)>=('12:34:56')) UNION ALL SELECT * FROM t0 WHERE (NOT (CAST(t0.c0 AS TIME)>=('12:34:56'))) UNION ALL SELECT * FROM t0 WHERE (((CAST(t0.c0 AS TIME)>=('12:34:56'))) IS NULL);
-- 4 rows (unexpected)
```

### OS:

Ubuntu 22.04

### DuckDB Version:

v1.1.1-dev238 f0f78913a5

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Suyang Zhong

### Affiliation:

NUS

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/optimizer/statistics/expression/propagate_cast.cpp]
1: #include "duckdb/optimizer/statistics_propagator.hpp"
2: #include "duckdb/planner/expression/bound_cast_expression.hpp"
3: 
4: namespace duckdb {
5: 
6: static unique_ptr<BaseStatistics> StatisticsOperationsNumericNumericCast(const BaseStatistics &input,
7:                                                                          const LogicalType &target) {
8: 	if (!NumericStats::HasMinMax(input)) {
9: 		return nullptr;
10: 	}
11: 	Value min = NumericStats::Min(input);
12: 	Value max = NumericStats::Max(input);
13: 	if (!min.DefaultTryCastAs(target) || !max.DefaultTryCastAs(target)) {
14: 		// overflow in cast: bailout
15: 		return nullptr;
16: 	}
17: 	auto result = NumericStats::CreateEmpty(target);
18: 	result.CopyBase(input);
19: 	NumericStats::SetMin(result, min);
20: 	NumericStats::SetMax(result, max);
21: 	return result.ToUnique();
22: }
23: 
24: static unique_ptr<BaseStatistics> StatisticsNumericCastSwitch(const BaseStatistics &input, const LogicalType &target) {
25: 	//	Downcasting timestamps to times is not a truncation operation
26: 	switch (target.id()) {
27: 	case LogicalTypeId::TIME: {
28: 		switch (input.GetType().id()) {
29: 		case LogicalTypeId::TIMESTAMP:
30: 		case LogicalTypeId::TIMESTAMP_TZ:
31: 			return nullptr;
32: 		default:
33: 			break;
34: 		}
35: 		break;
36: 	}
37: 	// FIXME: perform actual stats propagation for these casts
38: 	case LogicalTypeId::TIMESTAMP:
39: 	case LogicalTypeId::TIMESTAMP_TZ: {
40: 		const bool to_timestamp = target.id() == LogicalTypeId::TIMESTAMP;
41: 		const bool to_timestamp_tz = target.id() == LogicalTypeId::TIMESTAMP_TZ;
42: 		//  Casting to timestamp[_tz] (us) from a different unit can not re-use stats
43: 		switch (input.GetType().id()) {
44: 		case LogicalTypeId::TIMESTAMP_NS:
45: 		case LogicalTypeId::TIMESTAMP_MS:
46: 		case LogicalTypeId::TIMESTAMP_SEC:
47: 			return nullptr;
48: 		case LogicalTypeId::TIMESTAMP: {
49: 			if (to_timestamp_tz) {
50: 				// Both use INT64 physical type, but should not be treated equal
51: 				return nullptr;
52: 			}
53: 			break;
54: 		}
55: 		case LogicalTypeId::TIMESTAMP_TZ: {
56: 			if (to_timestamp) {
57: 				// Both use INT64 physical type, but should not be treated equal
58: 				return nullptr;
59: 			}
60: 			break;
61: 		}
62: 		default:
63: 			break;
64: 		}
65: 		break;
66: 	}
67: 	case LogicalTypeId::TIMESTAMP_NS: {
68: 		// Same as above ^
69: 		switch (input.GetType().id()) {
70: 		case LogicalTypeId::TIMESTAMP:
71: 		case LogicalTypeId::TIMESTAMP_TZ:
72: 		case LogicalTypeId::TIMESTAMP_MS:
73: 		case LogicalTypeId::TIMESTAMP_SEC:
74: 			return nullptr;
75: 		default:
76: 			break;
77: 		}
78: 		break;
79: 	}
80: 	case LogicalTypeId::TIMESTAMP_MS: {
81: 		// Same as above ^
82: 		switch (input.GetType().id()) {
83: 		case LogicalTypeId::TIMESTAMP:
84: 		case LogicalTypeId::TIMESTAMP_TZ:
85: 		case LogicalTypeId::TIMESTAMP_NS:
86: 		case LogicalTypeId::TIMESTAMP_SEC:
87: 			return nullptr;
88: 		default:
89: 			break;
90: 		}
91: 		break;
92: 	}
93: 	case LogicalTypeId::TIMESTAMP_SEC: {
94: 		// Same as above ^
95: 		switch (input.GetType().id()) {
96: 		case LogicalTypeId::TIMESTAMP:
97: 		case LogicalTypeId::TIMESTAMP_TZ:
98: 		case LogicalTypeId::TIMESTAMP_NS:
99: 		case LogicalTypeId::TIMESTAMP_MS:
100: 			return nullptr;
101: 		default:
102: 			break;
103: 		}
104: 		break;
105: 	}
106: 	default:
107: 		break;
108: 	}
109: 
110: 	switch (target.InternalType()) {
111: 	case PhysicalType::INT8:
112: 	case PhysicalType::INT16:
113: 	case PhysicalType::INT32:
114: 	case PhysicalType::INT64:
115: 	case PhysicalType::INT128:
116: 	case PhysicalType::FLOAT:
117: 	case PhysicalType::DOUBLE:
118: 		return StatisticsOperationsNumericNumericCast(input, target);
119: 	default:
120: 		return nullptr;
121: 	}
122: }
123: 
124: unique_ptr<BaseStatistics> StatisticsPropagator::PropagateExpression(BoundCastExpression &cast,
125:                                                                      unique_ptr<Expression> &expr_ptr) {
126: 	auto child_stats = PropagateExpression(cast.child);
127: 	if (!child_stats) {
128: 		return nullptr;
129: 	}
130: 	unique_ptr<BaseStatistics> result_stats;
131: 	switch (cast.child->return_type.InternalType()) {
132: 	case PhysicalType::INT8:
133: 	case PhysicalType::INT16:
134: 	case PhysicalType::INT32:
135: 	case PhysicalType::INT64:
136: 	case PhysicalType::INT128:
137: 	case PhysicalType::FLOAT:
138: 	case PhysicalType::DOUBLE:
139: 		result_stats = StatisticsNumericCastSwitch(*child_stats, cast.return_type);
140: 		break;
141: 	default:
142: 		return nullptr;
143: 	}
144: 	if (cast.try_cast && result_stats) {
145: 		result_stats->Set(StatsInfo::CAN_HAVE_NULL_VALUES);
146: 	}
147: 	return result_stats;
148: }
149: 
150: } // namespace duckdb
[end of src/optimizer/statistics/expression/propagate_cast.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: