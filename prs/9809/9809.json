{
  "repo": "duckdb/duckdb",
  "pull_number": 9809,
  "instance_id": "duckdb__duckdb-9809",
  "issue_numbers": [
    "9739",
    "9739"
  ],
  "base_commit": "275f4a7e9564db08cc3cda211e1f63a7967308cf",
  "patch": "diff --git a/src/parser/transform/constraint/transform_constraint.cpp b/src/parser/transform/constraint/transform_constraint.cpp\nindex c77780e41f20..84b8a409685b 100644\n--- a/src/parser/transform/constraint/transform_constraint.cpp\n+++ b/src/parser/transform/constraint/transform_constraint.cpp\n@@ -73,6 +73,9 @@ unique_ptr<Constraint> Transformer::TransformConstraint(duckdb_libpgquery::PGLis\n \tcase duckdb_libpgquery::PG_CONSTR_UNIQUE:\n \tcase duckdb_libpgquery::PG_CONSTR_PRIMARY: {\n \t\tbool is_primary_key = constraint->contype == duckdb_libpgquery::PG_CONSTR_PRIMARY;\n+\t\tif (!constraint->keys) {\n+\t\t\tthrow ParserException(\"UNIQUE USING INDEX is not supported\");\n+\t\t}\n \t\tvector<string> columns;\n \t\tfor (auto kc = constraint->keys->head; kc; kc = kc->next) {\n \t\t\tcolumns.emplace_back(reinterpret_cast<duckdb_libpgquery::PGValue *>(kc->data.ptr_value)->val.str);\n",
  "test_patch": "diff --git a/test/sql/create/create_using_index.test b/test/sql/create/create_using_index.test\nnew file mode 100644\nindex 000000000000..9b361558e366\n--- /dev/null\n+++ b/test/sql/create/create_using_index.test\n@@ -0,0 +1,8 @@\n+# name: test/sql/create/create_using_index.test\n+# description: Issue #9739 - DuckDB SIGSEGV when creating TABLE CONSTRAINT with non-existing INDEX\n+# group: [create]\n+\n+statement error\n+CREATE TABLE t0 (i INT, CONSTRAINT any_constraint UNIQUE USING INDEX any_non_existed_index);\n+----\n+not supported\n",
  "problem_statement": "DuckDB SIGSEGV when creating TABLE CONSTRAINT with non-existing INDEX\n### What happens?\n\nThe latest release version of DuckDB (`v0.9.1` `401c8061c6ece`) crashes when executing the following query: \r\n\r\n```sql\r\nCREATE TABLE t0 ( CONSTRAINT any_constraint UNIQUE USING INDEX any_non_existed_index);\r\n```\r\n\r\nHere is the Stack Trace from GDB:\r\n\r\n```\r\n(gdb) bt\r\n#0  duckdb::Transformer::TransformConstraint (this=this@entry=0xffffffffd0f0, cell=cell@entry=0xaaaaac6a9fb8)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transform/constraint/transform_constraint.cpp:77\r\n#1  0x0000aaaaab5a7e7c in duckdb::Transformer::TransformCreateTable (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/unique_ptr.hpp:38\r\n#2  0x0000aaaaaaf65734 in duckdb::Transformer::TransformStatementInternal (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transformer.cpp:145\r\n#3  0x0000aaaaaaf658e4 in duckdb::Transformer::TransformStatement (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transformer.cpp:60\r\n#4  0x0000aaaaaaf657fc in duckdb::Transformer::TransformStatementInternal (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transformer.cpp:135\r\n#5  0x0000aaaaaaf658e4 in duckdb::Transformer::TransformStatement (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transformer.cpp:60\r\n#6  0x0000aaaaaaf662c4 in duckdb::Transformer::TransformParseTree (this=this@entry=0xffffffffd0f0, tree=<optimized out>, statements=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/optional_ptr.hpp:35\r\n#7  0x0000aaaaaaf6a4c0 in duckdb::Parser::ParseQuery (this=this@entry=0xffffffffd398,\r\n    query=\"CREATE TEMPORARY TABLE v5 ( CONSTRAINT sconst UNIQUE USING INDEX v0, CONSTRAINT sconst UNIQUE ( v0)) WITHOUT OIDS;\")\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/parser.cpp:178\r\n#8  0x0000aaaaaaf53de8 in duckdb_shell_sqlite3_prepare_v2 (db=0xaaaaac589820,\r\n    zSql=0xaaaaac58b1b0 \"CREATE TEMPORARY TABLE v5 ( CONSTRAINT sconst UNIQUE USING INDEX v0, CONSTRAINT sconst UNIQUE ( v0)) WITHOUT OIDS;\", nByte=<optimized out>,\r\n    ppStmt=0xffffffffd5e0, pzTail=0xffffffffd5e8) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:170\r\n#9  0x0000aaaaaaf3d800 in shell_exec (pArg=0xffffffffd908,\r\n    zSql=0xaaaaac58b1b0 \"CREATE TEMPORARY TABLE v5 ( CONSTRAINT sconst UNIQUE USING INDEX v0, CONSTRAINT sconst UNIQUE ( v0)) WITHOUT OIDS;\", pzErrMsg=<optimized out>)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:13142\r\n#10 0x0000aaaaaaf3f484 in runOneSqlLine (p=0xffffffffd908,\r\n    zSql=0xaaaaac58b1b0 \"CREATE TEMPORARY TABLE v5 ( CONSTRAINT sconst UNIQUE USING INDEX v0, CONSTRAINT sconst UNIQUE ( v0)) WITHOUT OIDS;\", in=0x0, startline=1)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:19654\r\n#11 0x0000aaaaaaf46afc in process_input (p=0xffffffffd908) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:19772\r\n#12 0x0000aaaaaaf29fec in main (argc=<optimized out>, argv=0xffffffffec68) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:20585\r\n```\r\n\r\nThe bug is also reproducible from the latest `main` branch (`60ddc316ca0c1`)\n\n### To Reproduce\n\n1. Clone the DuckDB Git from the official repo.\r\n2. Checkout to either the latest `main` or release version: `0.9.1` (`401c8061c6ece`). \r\n3. Compile the `DuckDB` binary by using either `make reldebug`  or `make debug`. \r\n4. Run the compiled `DuckDB` and input the following SQL: \r\n\r\n```sql\r\nCREATE TABLE t0 ( CONSTRAINT any_constraint UNIQUE USING INDEX any_non_existed_index);\r\n```\r\n\r\n5. Observe and log the crash information. \n\n### OS:\n\nUbuntu 20.04 LTS\n\n### DuckDB Version:\n\nv0.9.1 401c8061c6\n\n### DuckDB Client:\n\nDuckDB official command line client\n\n### Full Name:\n\nYu Liang\n\n### Affiliation:\n\nThe Pennsylvania State University\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nDuckDB SIGSEGV when creating TABLE CONSTRAINT with non-existing INDEX\n### What happens?\n\nThe latest release version of DuckDB (`v0.9.1` `401c8061c6ece`) crashes when executing the following query: \r\n\r\n```sql\r\nCREATE TABLE t0 ( CONSTRAINT any_constraint UNIQUE USING INDEX any_non_existed_index);\r\n```\r\n\r\nHere is the Stack Trace from GDB:\r\n\r\n```\r\n(gdb) bt\r\n#0  duckdb::Transformer::TransformConstraint (this=this@entry=0xffffffffd0f0, cell=cell@entry=0xaaaaac6a9fb8)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transform/constraint/transform_constraint.cpp:77\r\n#1  0x0000aaaaab5a7e7c in duckdb::Transformer::TransformCreateTable (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/unique_ptr.hpp:38\r\n#2  0x0000aaaaaaf65734 in duckdb::Transformer::TransformStatementInternal (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transformer.cpp:145\r\n#3  0x0000aaaaaaf658e4 in duckdb::Transformer::TransformStatement (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transformer.cpp:60\r\n#4  0x0000aaaaaaf657fc in duckdb::Transformer::TransformStatementInternal (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transformer.cpp:135\r\n#5  0x0000aaaaaaf658e4 in duckdb::Transformer::TransformStatement (this=this@entry=0xffffffffd0f0, stmt=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/transformer.cpp:60\r\n#6  0x0000aaaaaaf662c4 in duckdb::Transformer::TransformParseTree (this=this@entry=0xffffffffd0f0, tree=<optimized out>, statements=...)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/include/duckdb/common/optional_ptr.hpp:35\r\n#7  0x0000aaaaaaf6a4c0 in duckdb::Parser::ParseQuery (this=this@entry=0xffffffffd398,\r\n    query=\"CREATE TEMPORARY TABLE v5 ( CONSTRAINT sconst UNIQUE USING INDEX v0, CONSTRAINT sconst UNIQUE ( v0)) WITHOUT OIDS;\")\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/src/parser/parser.cpp:178\r\n#8  0x0000aaaaaaf53de8 in duckdb_shell_sqlite3_prepare_v2 (db=0xaaaaac589820,\r\n    zSql=0xaaaaac58b1b0 \"CREATE TEMPORARY TABLE v5 ( CONSTRAINT sconst UNIQUE USING INDEX v0, CONSTRAINT sconst UNIQUE ( v0)) WITHOUT OIDS;\", nByte=<optimized out>,\r\n    ppStmt=0xffffffffd5e0, pzTail=0xffffffffd5e8) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:170\r\n#9  0x0000aaaaaaf3d800 in shell_exec (pArg=0xffffffffd908,\r\n    zSql=0xaaaaac58b1b0 \"CREATE TEMPORARY TABLE v5 ( CONSTRAINT sconst UNIQUE USING INDEX v0, CONSTRAINT sconst UNIQUE ( v0)) WITHOUT OIDS;\", pzErrMsg=<optimized out>)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:13142\r\n#10 0x0000aaaaaaf3f484 in runOneSqlLine (p=0xffffffffd908,\r\n    zSql=0xaaaaac58b1b0 \"CREATE TEMPORARY TABLE v5 ( CONSTRAINT sconst UNIQUE USING INDEX v0, CONSTRAINT sconst UNIQUE ( v0)) WITHOUT OIDS;\", in=0x0, startline=1)\r\n    at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:19654\r\n#11 0x0000aaaaaaf46afc in process_input (p=0xffffffffd908) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:19772\r\n#12 0x0000aaaaaaf29fec in main (argc=<optimized out>, argv=0xffffffffec68) at /Users/sly/Desktop/Projects/DBMSs/duckdb/duckdb_ori/tools/shell/shell.c:20585\r\n```\r\n\r\nThe bug is also reproducible from the latest `main` branch (`60ddc316ca0c1`)\n\n### To Reproduce\n\n1. Clone the DuckDB Git from the official repo.\r\n2. Checkout to either the latest `main` or release version: `0.9.1` (`401c8061c6ece`). \r\n3. Compile the `DuckDB` binary by using either `make reldebug`  or `make debug`. \r\n4. Run the compiled `DuckDB` and input the following SQL: \r\n\r\n```sql\r\nCREATE TABLE t0 ( CONSTRAINT any_constraint UNIQUE USING INDEX any_non_existed_index);\r\n```\r\n\r\n5. Observe and log the crash information. \n\n### OS:\n\nUbuntu 20.04 LTS\n\n### DuckDB Version:\n\nv0.9.1 401c8061c6\n\n### DuckDB Client:\n\nDuckDB official command line client\n\n### Full Name:\n\nYu Liang\n\n### Affiliation:\n\nThe Pennsylvania State University\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2023-11-27T12:34:06Z"
}