You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Support for regexp_extract
Sometimes I need to extract nth appearance of some regexp-matching value. For example, 2nd `\d{4}` in string. In spark I can do it with regexp_extract, but how will I do it in duckdb?

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/function/scalar/string/regexp.cpp]
1: #include "duckdb/function/scalar/string_functions.hpp"
2: #include "duckdb/common/exception.hpp"
3: #include "duckdb/common/vector_operations/vector_operations.hpp"
4: #include "duckdb/execution/expression_executor.hpp"
5: #include "duckdb/planner/expression/bound_function_expression.hpp"
6: #include "duckdb/common/vector_operations/unary_executor.hpp"
7: #include "duckdb/common/vector_operations/binary_executor.hpp"
8: #include "duckdb/common/vector_operations/ternary_executor.hpp"
9: #include "utf8proc_wrapper.hpp"
10: 
11: #include "duckdb/function/scalar/regexp.hpp"
12: 
13: namespace duckdb {
14: 
15: RegexpMatchesBindData::RegexpMatchesBindData(duckdb_re2::RE2::Options options, string constant_string_p)
16:     : options(options), constant_string(move(constant_string_p)) {
17: 	constant_pattern = !constant_string.empty();
18: 	if (constant_pattern) {
19: 		auto pattern = make_unique<RE2>(constant_string, options);
20: 		if (!pattern->ok()) {
21: 			throw Exception(pattern->error());
22: 		}
23: 
24: 		range_success = pattern->PossibleMatchRange(&range_min, &range_max, 1000);
25: 	} else {
26: 		range_success = false;
27: 	}
28: }
29: 
30: RegexpMatchesBindData::~RegexpMatchesBindData() {
31: }
32: 
33: unique_ptr<FunctionData> RegexpMatchesBindData::Copy() {
34: 	return make_unique<RegexpMatchesBindData>(options, constant_string);
35: }
36: 
37: static inline duckdb_re2::StringPiece CreateStringPiece(string_t &input) {
38: 	return duckdb_re2::StringPiece(input.GetDataUnsafe(), input.GetSize());
39: }
40: 
41: static void ParseRegexOptions(string &options, duckdb_re2::RE2::Options &result, bool *global_replace = nullptr) {
42: 	for (idx_t i = 0; i < options.size(); i++) {
43: 		switch (options[i]) {
44: 		case 'c':
45: 			// case-sensitive matching
46: 			result.set_case_sensitive(true);
47: 			break;
48: 		case 'i':
49: 			// case-insensitive matching
50: 			result.set_case_sensitive(false);
51: 			break;
52: 		case 'm':
53: 		case 'n':
54: 		case 'p':
55: 			// newline-sensitive matching
56: 			result.set_dot_nl(false);
57: 			break;
58: 		case 's':
59: 			// non-newline-sensitive matching
60: 			result.set_dot_nl(true);
61: 			break;
62: 		case 'g':
63: 			// global replace, only available for regexp_replace
64: 			if (global_replace) {
65: 				*global_replace = true;
66: 			} else {
67: 				throw InvalidInputException("Option 'g' (global replace) is only valid for regexp_replace");
68: 			}
69: 			break;
70: 		case ' ':
71: 		case '\t':
72: 		case '\n':
73: 			// ignore whitespace
74: 			break;
75: 		default:
76: 			throw InvalidInputException("Unrecognized Regex option %c", options[i]);
77: 		}
78: 	}
79: }
80: 
81: struct RegexPartialMatch {
82: 	static inline bool Operation(const duckdb_re2::StringPiece &input, duckdb_re2::RE2 &re) {
83: 		return duckdb_re2::RE2::PartialMatch(input, re);
84: 	}
85: };
86: 
87: struct RegexFullMatch {
88: 	static inline bool Operation(const duckdb_re2::StringPiece &input, duckdb_re2::RE2 &re) {
89: 		return duckdb_re2::RE2::FullMatch(input, re);
90: 	}
91: };
92: 
93: struct RegexLocalState : public FunctionData {
94: 	explicit RegexLocalState(RegexpMatchesBindData &info)
95: 	    : constant_pattern(duckdb_re2::StringPiece(info.constant_string.c_str(), info.constant_string.size()),
96: 	                       info.options) {
97: 		D_ASSERT(info.constant_pattern);
98: 	}
99: 
100: 	RE2 constant_pattern;
101: };
102: 
103: static unique_ptr<FunctionData> RegexInitLocalState(const BoundFunctionExpression &expr, FunctionData *bind_data) {
104: 	auto &info = (RegexpMatchesBindData &)*bind_data;
105: 	if (info.constant_pattern) {
106: 		return make_unique<RegexLocalState>(info);
107: 	}
108: 	return nullptr;
109: }
110: 
111: template <class OP>
112: static void RegexpMatchesFunction(DataChunk &args, ExpressionState &state, Vector &result) {
113: 	auto &strings = args.data[0];
114: 	auto &patterns = args.data[1];
115: 
116: 	auto &func_expr = (BoundFunctionExpression &)state.expr;
117: 	auto &info = (RegexpMatchesBindData &)*func_expr.bind_info;
118: 
119: 	if (info.constant_pattern) {
120: 		auto &lstate = (RegexLocalState &)*ExecuteFunctionState::GetFunctionState(state);
121: 		UnaryExecutor::Execute<string_t, bool>(strings, result, args.size(), [&](string_t input) {
122: 			return OP::Operation(CreateStringPiece(input), lstate.constant_pattern);
123: 		});
124: 	} else {
125: 		BinaryExecutor::Execute<string_t, string_t, bool>(strings, patterns, result, args.size(),
126: 		                                                  [&](string_t input, string_t pattern) {
127: 			                                                  RE2 re(CreateStringPiece(pattern), info.options);
128: 			                                                  if (!re.ok()) {
129: 				                                                  throw Exception(re.error());
130: 			                                                  }
131: 			                                                  return OP::Operation(CreateStringPiece(input), re);
132: 		                                                  });
133: 	}
134: }
135: 
136: static unique_ptr<FunctionData> RegexpMatchesBind(ClientContext &context, ScalarFunction &bound_function,
137:                                                   vector<unique_ptr<Expression>> &arguments) {
138: 	// pattern is the second argument. If its constant, we can already prepare the pattern and store it for later.
139: 	D_ASSERT(arguments.size() == 2 || arguments.size() == 3);
140: 	RE2::Options options;
141: 	options.set_log_errors(false);
142: 	if (arguments.size() == 3) {
143: 		if (!arguments[2]->IsFoldable()) {
144: 			throw InvalidInputException("Regex options field must be a constant");
145: 		}
146: 		Value options_str = ExpressionExecutor::EvaluateScalar(*arguments[2]);
147: 		if (!options_str.is_null && options_str.type().id() == LogicalTypeId::VARCHAR) {
148: 			ParseRegexOptions(options_str.str_value, options);
149: 		}
150: 	}
151: 
152: 	if (arguments[1]->IsFoldable()) {
153: 		Value pattern_str = ExpressionExecutor::EvaluateScalar(*arguments[1]);
154: 		if (!pattern_str.is_null && pattern_str.type().id() == LogicalTypeId::VARCHAR) {
155: 			return make_unique<RegexpMatchesBindData>(options, pattern_str.str_value);
156: 		}
157: 	}
158: 	return make_unique<RegexpMatchesBindData>(options, "");
159: }
160: 
161: static void RegexReplaceFunction(DataChunk &args, ExpressionState &state, Vector &result) {
162: 	auto &func_expr = (BoundFunctionExpression &)state.expr;
163: 	auto &info = (RegexpReplaceBindData &)*func_expr.bind_info;
164: 
165: 	auto &strings = args.data[0];
166: 	auto &patterns = args.data[1];
167: 	auto &replaces = args.data[2];
168: 
169: 	TernaryExecutor::Execute<string_t, string_t, string_t, string_t>(
170: 	    strings, patterns, replaces, result, args.size(), [&](string_t input, string_t pattern, string_t replace) {
171: 		    RE2 re(CreateStringPiece(pattern), info.options);
172: 		    std::string sstring = input.GetString();
173: 		    if (info.global_replace) {
174: 			    RE2::GlobalReplace(&sstring, re, CreateStringPiece(replace));
175: 		    } else {
176: 			    RE2::Replace(&sstring, re, CreateStringPiece(replace));
177: 		    }
178: 		    return StringVector::AddString(result, sstring);
179: 	    });
180: }
181: 
182: unique_ptr<FunctionData> RegexpReplaceBindData::Copy() {
183: 	auto copy = make_unique<RegexpReplaceBindData>();
184: 	copy->options = options;
185: 	copy->global_replace = global_replace;
186: 	return move(copy);
187: }
188: 
189: static unique_ptr<FunctionData> RegexReplaceBind(ClientContext &context, ScalarFunction &bound_function,
190:                                                  vector<unique_ptr<Expression>> &arguments) {
191: 	auto data = make_unique<RegexpReplaceBindData>();
192: 	data->options.set_log_errors(false);
193: 	if (arguments.size() == 4) {
194: 		if (!arguments[3]->IsFoldable()) {
195: 			throw InvalidInputException("Regex options field must be a constant");
196: 		}
197: 		Value options_str = ExpressionExecutor::EvaluateScalar(*arguments[3]);
198: 		if (!options_str.is_null && options_str.type().id() == LogicalTypeId::VARCHAR) {
199: 			ParseRegexOptions(options_str.str_value, data->options, &data->global_replace);
200: 		}
201: 	}
202: 
203: 	return move(data);
204: }
205: 
206: void RegexpFun::RegisterFunction(BuiltinFunctions &set) {
207: 	ScalarFunctionSet regexp_full_match("regexp_full_match");
208: 	regexp_full_match.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
209: 	                                             RegexpMatchesFunction<RegexFullMatch>, false, RegexpMatchesBind,
210: 	                                             nullptr, nullptr, RegexInitLocalState));
211: 	regexp_full_match.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},
212: 	                                             LogicalType::BOOLEAN, RegexpMatchesFunction<RegexFullMatch>, false,
213: 	                                             RegexpMatchesBind, nullptr, nullptr, RegexInitLocalState));
214: 
215: 	ScalarFunctionSet regexp_partial_match("regexp_matches");
216: 	regexp_partial_match.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR}, LogicalType::BOOLEAN,
217: 	                                                RegexpMatchesFunction<RegexPartialMatch>, false, RegexpMatchesBind,
218: 	                                                nullptr, nullptr, RegexInitLocalState));
219: 	regexp_partial_match.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},
220: 	                                                LogicalType::BOOLEAN, RegexpMatchesFunction<RegexPartialMatch>,
221: 	                                                false, RegexpMatchesBind, nullptr, nullptr, RegexInitLocalState));
222: 
223: 	ScalarFunctionSet regexp_replace("regexp_replace");
224: 	regexp_replace.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},
225: 	                                          LogicalType::VARCHAR, RegexReplaceFunction, false, RegexReplaceBind));
226: 	regexp_replace.AddFunction(
227: 	    ScalarFunction({LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR, LogicalType::VARCHAR},
228: 	                   LogicalType::VARCHAR, RegexReplaceFunction, false, RegexReplaceBind));
229: 
230: 	set.AddFunction(regexp_full_match);
231: 	set.AddFunction(regexp_partial_match);
232: 	set.AddFunction(regexp_replace);
233: }
234: 
235: } // namespace duckdb
[end of src/function/scalar/string/regexp.cpp]
[start of src/include/duckdb/function/scalar/regexp.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/function/scalar/regexp.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/function/function_set.hpp"
12: #include "re2/re2.h"
13: 
14: namespace duckdb {
15: 
16: struct RegexpMatchesBindData : public FunctionData {
17: 	RegexpMatchesBindData(duckdb_re2::RE2::Options options, string constant_string);
18: 	~RegexpMatchesBindData() override;
19: 
20: 	duckdb_re2::RE2::Options options;
21: 	string constant_string;
22: 	bool constant_pattern;
23: 	string range_min;
24: 	string range_max;
25: 	bool range_success;
26: 
27: 	unique_ptr<FunctionData> Copy() override;
28: };
29: 
30: struct RegexpReplaceBindData : public FunctionData {
31: 	duckdb_re2::RE2::Options options;
32: 	bool global_replace;
33: 
34: 	unique_ptr<FunctionData> Copy() override;
35: };
36: 
37: } // namespace duckdb
[end of src/include/duckdb/function/scalar/regexp.hpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: