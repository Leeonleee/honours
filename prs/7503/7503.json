{
  "repo": "duckdb/duckdb",
  "pull_number": 7503,
  "instance_id": "duckdb__duckdb-7503",
  "issue_numbers": [
    "6573",
    "6573"
  ],
  "base_commit": "eae707d54cb3dabfc87a486819b49c700c972ba5",
  "patch": "diff --git a/src/common/file_system.cpp b/src/common/file_system.cpp\nindex 933b89853def..f9857a93f996 100644\n--- a/src/common/file_system.cpp\n+++ b/src/common/file_system.cpp\n@@ -11,6 +11,7 @@\n #include \"duckdb/main/client_data.hpp\"\n #include \"duckdb/main/database.hpp\"\n #include \"duckdb/main/extension_helper.hpp\"\n+#include \"duckdb/common/windows_util.hpp\"\n \n #include <cstdint>\n #include <cstdio>\n@@ -53,6 +54,14 @@ bool PathMatched(const string &path, const string &sub_path) {\n \n #ifndef _WIN32\n \n+string FileSystem::GetEnvVariable(const string &name) {\n+\tconst char *env = getenv(name.c_str());\n+\tif (!env) {\n+\t\treturn string();\n+\t}\n+\treturn env;\n+}\n+\n bool FileSystem::IsPathAbsolute(const string &path) {\n \tauto path_separator = FileSystem::PathSeparator();\n \treturn PathMatched(path, path_separator);\n@@ -85,36 +94,59 @@ string FileSystem::GetWorkingDirectory() {\n \t}\n \treturn string(buffer.get());\n }\n+\n+string FileSystem::NormalizeAbsolutePath(const string &path) {\n+\tD_ASSERT(IsPathAbsolute(path));\n+\treturn path;\n+}\n+\n #else\n \n-bool FileSystem::IsPathAbsolute(const string &path) {\n-\t// 1) A single backslash\n-\tauto sub_path = FileSystem::PathSeparator();\n-\tif (PathMatched(path, sub_path)) {\n-\t\treturn true;\n+string FileSystem::GetEnvVariable(const string &env) {\n+\t// first convert the environment variable name to the correct encoding\n+\tauto env_w = WindowsUtil::UTF8ToUnicode(env.c_str());\n+\t// use _wgetenv to get the value\n+\tauto res_w = _wgetenv(env_w.c_str());\n+\tif (!res_w) {\n+\t\t// no environment variable of this name found\n+\t\treturn string();\n \t}\n-\t// 2) check if starts with a double-backslash (i.e., \\\\)\n-\tsub_path += FileSystem::PathSeparator();\n-\tif (PathMatched(path, sub_path)) {\n+\treturn WindowsUtil::UnicodeToUTF8(res_w);\n+}\n+\n+bool FileSystem::IsPathAbsolute(const string &path) {\n+\t// 1) A single backslash or forward-slash\n+\tif (PathMatched(path, \"\\\\\") || PathMatched(path, \"/\")) {\n \t\treturn true;\n \t}\n-\t// 3) A disk designator with a backslash (e.g., C:\\)\n+\t// 2) A disk designator with a backslash (e.g., C:\\ or C:/)\n \tauto path_aux = path;\n \tpath_aux.erase(0, 1);\n-\tsub_path = \":\" + FileSystem::PathSeparator();\n-\tif (PathMatched(path_aux, sub_path)) {\n+\tif (PathMatched(path_aux, \":\\\\\") || PathMatched(path_aux, \":/\")) {\n \t\treturn true;\n \t}\n \treturn false;\n }\n \n+string FileSystem::NormalizeAbsolutePath(const string &path) {\n+\tD_ASSERT(IsPathAbsolute(path));\n+\tauto result = StringUtil::Lower(FileSystem::ConvertSeparators(path));\n+\tif (PathMatched(result, \"\\\\\")) {\n+\t\t// Path starts with a single backslash or forward slash\n+\t\t// prepend drive letter\n+\t\treturn GetWorkingDirectory().substr(0, 2) + result;\n+\t}\n+\treturn result;\n+}\n+\n string FileSystem::PathSeparator() {\n \treturn \"\\\\\";\n }\n \n void FileSystem::SetWorkingDirectory(const string &path) {\n-\tif (!SetCurrentDirectory(path.c_str())) {\n-\t\tthrow IOException(\"Could not change working directory!\");\n+\tauto unicode_path = WindowsUtil::UTF8ToUnicode(path.c_str());\n+\tif (!SetCurrentDirectoryW(unicode_path.c_str())) {\n+\t\tthrow IOException(\"Could not change working directory to \\\"%s\\\"\", path);\n \t}\n }\n \n@@ -134,16 +166,16 @@ idx_t FileSystem::GetAvailableMemory() {\n }\n \n string FileSystem::GetWorkingDirectory() {\n-\tidx_t count = GetCurrentDirectory(0, nullptr);\n+\tidx_t count = GetCurrentDirectoryW(0, nullptr);\n \tif (count == 0) {\n \t\tthrow IOException(\"Could not get working directory!\");\n \t}\n-\tauto buffer = make_unsafe_array<char>(count);\n-\tidx_t ret = GetCurrentDirectory(count, buffer.get());\n+\tauto buffer = make_unsafe_array<wchar_t>(count);\n+\tidx_t ret = GetCurrentDirectoryW(count, buffer.get());\n \tif (count != ret + 1) {\n \t\tthrow IOException(\"Could not get working directory!\");\n \t}\n-\treturn string(buffer.get(), ret);\n+\treturn WindowsUtil::UnicodeToUTF8(buffer.get());\n }\n \n #endif\n@@ -161,13 +193,7 @@ string FileSystem::ConvertSeparators(const string &path) {\n \t\treturn path;\n \t}\n \t// on windows-based systems we accept both\n-\tstring result = path;\n-\tfor (idx_t i = 0; i < result.size(); i++) {\n-\t\tif (result[i] == '/') {\n-\t\t\tresult[i] = separator;\n-\t\t}\n-\t}\n-\treturn result;\n+\treturn StringUtil::Replace(path, \"/\", separator_str);\n }\n \n string FileSystem::ExtractName(const string &path) {\n@@ -202,14 +228,10 @@ string FileSystem::GetHomeDirectory(optional_ptr<FileOpener> opener) {\n \t}\n \t// fallback to the default home directories for the specified system\n #ifdef DUCKDB_WINDOWS\n-\tconst char *homedir = getenv(\"USERPROFILE\");\n+\treturn FileSystem::GetEnvVariable(\"USERPROFILE\");\n #else\n-\tconst char *homedir = getenv(\"HOME\");\n+\treturn FileSystem::GetEnvVariable(\"HOME\");\n #endif\n-\tif (homedir) {\n-\t\treturn homedir;\n-\t}\n-\treturn string();\n }\n \n string FileSystem::GetHomeDirectory() {\ndiff --git a/src/common/local_file_system.cpp b/src/common/local_file_system.cpp\nindex c92d2c5aea2b..958d4c345dbd 100644\n--- a/src/common/local_file_system.cpp\n+++ b/src/common/local_file_system.cpp\n@@ -162,8 +162,9 @@ static FileType GetFileTypeInternal(int fd) { // LCOV_EXCL_START\n \t}\n } // LCOV_EXCL_STOP\n \n-unique_ptr<FileHandle> LocalFileSystem::OpenFile(const string &path, uint8_t flags, FileLockType lock_type,\n+unique_ptr<FileHandle> LocalFileSystem::OpenFile(const string &path_p, uint8_t flags, FileLockType lock_type,\n                                                  FileCompressionType compression, FileOpener *opener) {\n+\tauto path = FileSystem::ExpandPath(path_p, opener);\n \tif (compression != FileCompressionType::UNCOMPRESSED) {\n \t\tthrow NotImplementedException(\"Unsupported compression type for default file system\");\n \t}\n@@ -506,8 +507,9 @@ struct WindowsFileHandle : public FileHandle {\n \t};\n };\n \n-unique_ptr<FileHandle> LocalFileSystem::OpenFile(const string &path, uint8_t flags, FileLockType lock_type,\n+unique_ptr<FileHandle> LocalFileSystem::OpenFile(const string &path_p, uint8_t flags, FileLockType lock_type,\n                                                  FileCompressionType compression, FileOpener *opener) {\n+\tauto path = FileSystem::ExpandPath(path_p, opener);\n \tif (compression != FileCompressionType::UNCOMPRESSED) {\n \t\tthrow NotImplementedException(\"Unsupported compression type for default file system\");\n \t}\n@@ -775,7 +777,7 @@ void LocalFileSystem::MoveFile(const string &source, const string &target) {\n \tauto source_unicode = WindowsUtil::UTF8ToUnicode(source.c_str());\n \tauto target_unicode = WindowsUtil::UTF8ToUnicode(target.c_str());\n \tif (!MoveFileW(source_unicode.c_str(), target_unicode.c_str())) {\n-\t\tthrow IOException(\"Could not move file\");\n+\t\tthrow IOException(\"Could not move file: %s\", GetLastErrorAsString());\n \t}\n }\n \ndiff --git a/src/core_functions/scalar/list/list_lambdas.cpp b/src/core_functions/scalar/list/list_lambdas.cpp\nindex 0f34d43cecf5..169c7f4e62ab 100644\n--- a/src/core_functions/scalar/list/list_lambdas.cpp\n+++ b/src/core_functions/scalar/list/list_lambdas.cpp\n@@ -77,7 +77,7 @@ static void AppendFilteredToResult(Vector &lambda_vector, list_entry_t *result_e\n \t\t}\n \n \t\t// found a true value\n-\t\tif (lambda_validity.RowIsValid(entry) && lambda_values[entry] > 0) {\n+\t\tif (lambda_validity.RowIsValid(entry) && lambda_values[entry]) {\n \t\t\ttrue_sel.set_index(true_count++, i);\n \t\t\tcurr_list_len++;\n \t\t}\ndiff --git a/src/function/table/read_csv.cpp b/src/function/table/read_csv.cpp\nindex dcbabbe3dc8c..ff4b52643e4e 100644\n--- a/src/function/table/read_csv.cpp\n+++ b/src/function/table/read_csv.cpp\n@@ -586,6 +586,9 @@ bool LineInfo::CanItGetLine(idx_t file_idx, idx_t batch_idx) {\n \tif (current_batches.empty() || done) {\n \t\treturn true;\n \t}\n+\tif (file_idx >= current_batches.size() || current_batches[file_idx].empty()) {\n+\t\treturn true;\n+\t}\n \tauto min_value = *current_batches[file_idx].begin();\n \tif (min_value >= batch_idx) {\n \t\treturn true;\ndiff --git a/src/include/duckdb/common/file_system.hpp b/src/include/duckdb/common/file_system.hpp\nindex d84c4e444a24..0f3133f06414 100644\n--- a/src/include/duckdb/common/file_system.hpp\n+++ b/src/include/duckdb/common/file_system.hpp\n@@ -178,6 +178,9 @@ class FileSystem {\n \tDUCKDB_API static string PathSeparator();\n \t//! Checks if path is starts with separator (i.e., '/' on UNIX '\\\\' on Windows)\n \tDUCKDB_API static bool IsPathAbsolute(const string &path);\n+\t//! Normalize an absolute path - the goal of normalizing is converting \"\\test.db\" and \"C:/test.db\" into \"C:\\test.db\"\n+\t//! so that the database system cache can correctly\n+\tDUCKDB_API static string NormalizeAbsolutePath(const string &path);\n \t//! Join two paths together\n \tDUCKDB_API static string JoinPath(const string &a, const string &path);\n \t//! Convert separators in a path to the local separators (e.g. convert \"/\" into \\\\ on windows)\n@@ -187,6 +190,9 @@ class FileSystem {\n \t//! Extract the name of a file (e.g if the input is lib/example.dll the name is 'example.dll')\n \tDUCKDB_API static string ExtractName(const string &path);\n \n+\t//! Returns the value of an environment variable - or the empty string if it is not set\n+\tDUCKDB_API static string GetEnvVariable(const string &name);\n+\n \t//! Whether there is a glob in the string\n \tDUCKDB_API static bool HasGlob(const string &str);\n \t//! Runs a glob on the file system, returning a list of matching files\ndiff --git a/src/main/db_instance_cache.cpp b/src/main/db_instance_cache.cpp\nindex 6306e268cab6..0e7550008f46 100644\n--- a/src/main/db_instance_cache.cpp\n+++ b/src/main/db_instance_cache.cpp\n@@ -1,8 +1,10 @@\n #include \"duckdb/main/db_instance_cache.hpp\"\n #include \"duckdb/main/extension_helper.hpp\"\n+\n namespace duckdb {\n \n-string GetDBAbsolutePath(const string &database) {\n+string GetDBAbsolutePath(const string &database_p) {\n+\tauto database = FileSystem::ExpandPath(database_p, nullptr);\n \tif (database.empty()) {\n \t\treturn \":memory:\";\n \t}\n@@ -15,9 +17,9 @@ string GetDBAbsolutePath(const string &database) {\n \t\treturn database;\n \t}\n \tif (FileSystem::IsPathAbsolute(database)) {\n-\t\treturn database;\n+\t\treturn FileSystem::NormalizeAbsolutePath(database);\n \t}\n-\treturn FileSystem::JoinPath(FileSystem::GetWorkingDirectory(), database);\n+\treturn FileSystem::NormalizeAbsolutePath(FileSystem::JoinPath(FileSystem::GetWorkingDirectory(), database));\n }\n \n shared_ptr<DuckDB> DBInstanceCache::GetInstanceInternal(const string &database, const DBConfig &config) {\ndiff --git a/src/main/extension/extension_install.cpp b/src/main/extension/extension_install.cpp\nindex 8a2055700687..8b47cbfdbee0 100644\n--- a/src/main/extension/extension_install.cpp\n+++ b/src/main/extension/extension_install.cpp\n@@ -133,6 +133,23 @@ void ExtensionHelper::InstallExtension(ClientContext &context, const string &ext\n \tInstallExtensionInternal(config, &client_config, fs, local_path, extension, force_install);\n }\n \n+unsafe_array_ptr<data_t> ReadExtensionFileFromDisk(FileSystem &fs, const string &path, idx_t &file_size) {\n+\tauto source_file = fs.OpenFile(path, FileFlags::FILE_FLAGS_READ);\n+\tfile_size = source_file->GetFileSize();\n+\tauto in_buffer = make_unsafe_array<data_t>(file_size);\n+\tsource_file->Read(in_buffer.get(), file_size);\n+\tsource_file->Close();\n+\treturn in_buffer;\n+}\n+\n+void WriteExtensionFileToDisk(FileSystem &fs, const string &path, void *data, idx_t data_size) {\n+\tauto target_file = fs.OpenFile(path, FileFlags::FILE_FLAGS_WRITE | FileFlags::FILE_FLAGS_APPEND |\n+\t                                         FileFlags::FILE_FLAGS_FILE_CREATE_NEW);\n+\ttarget_file->Write(data, data_size);\n+\ttarget_file->Close();\n+\ttarget_file.reset();\n+}\n+\n void ExtensionHelper::InstallExtensionInternal(DBConfig &config, ClientConfig *client_config, FileSystem &fs,\n                                                const string &local_path, const string &extension, bool force_install) {\n \tif (!config.options.enable_external_access) {\n@@ -152,18 +169,9 @@ void ExtensionHelper::InstallExtensionInternal(DBConfig &config, ClientConfig *c\n \t}\n \tauto is_http_url = StringUtil::Contains(extension, \"http://\");\n \tif (fs.FileExists(extension)) {\n-\n-\t\tstd::ifstream in(extension, std::ios::binary);\n-\t\tif (in.bad()) {\n-\t\t\tthrow IOException(\"Failed to read extension from \\\"%s\\\"\", extension);\n-\t\t}\n-\t\tstd::ofstream out(temp_path, std::ios::binary);\n-\t\tout << in.rdbuf();\n-\t\tif (out.bad()) {\n-\t\t\tthrow IOException(\"Failed to write extension to \\\"%s\\\"\", temp_path);\n-\t\t}\n-\t\tin.close();\n-\t\tout.close();\n+\t\tidx_t file_size;\n+\t\tauto in_buffer = ReadExtensionFileFromDisk(fs, extension, file_size);\n+\t\tWriteExtensionFileToDisk(fs, temp_path, in_buffer.get(), file_size);\n \n \t\tfs.MoveFile(temp_path, local_extension_path);\n \t\treturn;\n@@ -225,12 +233,8 @@ void ExtensionHelper::InstallExtensionInternal(DBConfig &config, ClientConfig *c\n \t\t}\n \t}\n \tauto decompressed_body = GZipFileSystem::UncompressGZIPString(res->body);\n-\tstd::ofstream out(temp_path, std::ios::binary);\n-\tout.write(decompressed_body.data(), decompressed_body.size());\n-\tif (out.bad()) {\n-\t\tthrow IOException(\"Failed to write extension to %s\", temp_path);\n-\t}\n-\tout.close();\n+\n+\tWriteExtensionFileToDisk(fs, temp_path, (void *)decompressed_body.data(), decompressed_body.size());\n \tfs.MoveFile(temp_path, local_extension_path);\n #endif\n }\ndiff --git a/src/storage/storage_manager.cpp b/src/storage/storage_manager.cpp\nindex 1837888c6858..96adf1fd8d21 100644\n--- a/src/storage/storage_manager.cpp\n+++ b/src/storage/storage_manager.cpp\n@@ -19,6 +19,9 @@ StorageManager::StorageManager(AttachedDatabase &db, string path_p, bool read_on\n     : db(db), path(std::move(path_p)), read_only(read_only) {\n \tif (path.empty()) {\n \t\tpath = \":memory:\";\n+\t} else {\n+\t\tauto &fs = FileSystem::Get(db);\n+\t\tthis->path = fs.ExpandPath(path);\n \t}\n }\n \ndiff --git a/tools/pythonpkg/src/pandas/analyzer.cpp b/tools/pythonpkg/src/pandas/analyzer.cpp\nindex a951d2bff2e7..847cb964dd10 100644\n--- a/tools/pythonpkg/src/pandas/analyzer.cpp\n+++ b/tools/pythonpkg/src/pandas/analyzer.cpp\n@@ -321,6 +321,8 @@ LogicalType PandasAnalyzer::GetItemType(py::handle ele, bool &can_convert) {\n \t\t// Fall back to string for unknown types\n \t\tcan_convert = false;\n \t\treturn LogicalType::VARCHAR;\n+\tdefault:\n+\t\tthrow InternalException(\"Unsupported PythonObjectType\");\n \t}\n }\n \n",
  "test_patch": "diff --git a/test/api/CMakeLists.txt b/test/api/CMakeLists.txt\nindex bbb7c5ff2aef..30f528f11009 100644\n--- a/test/api/CMakeLists.txt\n+++ b/test/api/CMakeLists.txt\n@@ -22,7 +22,8 @@ set(TEST_API_OBJECTS\n     test_dbdir.cpp\n     test_progress_bar.cpp\n     test_threads.cpp\n-    test_windows_header_compatibility.cpp)\n+    test_windows_header_compatibility.cpp\n+    test_windows_unicode_path.cpp)\n \n if(NOT WIN32)\n   set(TEST_API_OBJECTS ${TEST_API_OBJECTS} test_read_only.cpp)\ndiff --git a/test/api/test_windows_unicode_path.cpp b/test/api/test_windows_unicode_path.cpp\nnew file mode 100644\nindex 000000000000..2cd9aa36e4d1\n--- /dev/null\n+++ b/test/api/test_windows_unicode_path.cpp\n@@ -0,0 +1,53 @@\n+#include \"catch.hpp\"\n+#include \"test_helpers.hpp\"\n+#include \"duckdb.hpp\"\n+#include \"duckdb/main/db_instance_cache.hpp\"\n+\n+using namespace duckdb;\n+using namespace std;\n+\n+void TestConnectToDatabase(const string &path, bool create_table = false) {\n+\t// connect to the database using the standard syntax\n+\t{\n+\t\tDuckDB db(path);\n+\t\tConnection con(db);\n+\t\tif (create_table) {\n+\t\t\tREQUIRE_NO_FAIL(con.Query(\"CREATE TABLE test AS SELECT * FROM range(10) t(i)\"));\n+\t\t}\n+\n+\t\tauto result = con.Query(\"SELECT SUM(i) FROM test\");\n+\t\tREQUIRE(CHECK_COLUMN(result, 0, {45}));\n+\t}\n+\n+\t// connect to the database using the db instance cache\n+\t{\n+\t\tDBInstanceCache cache;\n+\t\tDBConfig config;\n+\t\tauto db = cache.CreateInstance(path, config);\n+\t\tConnection con(*db);\n+\n+\t\tauto result = con.Query(\"SELECT SUM(i) FROM test\");\n+\t\tREQUIRE(CHECK_COLUMN(result, 0, {45}));\n+\t}\n+}\n+\n+TEST_CASE(\"Issue #6931 - test windows unicode path\", \"[windows]\") {\n+\tstring dirname = \"Mosegu\u00ed_i_Gonz\u00e1lez\";\n+\tauto test_directory = TestDirectoryPath() + \"/\" + dirname;\n+\tauto current_directory = TestGetCurrentDirectory();\n+\tTestCreateDirectory(test_directory);\n+\tTestChangeDirectory(test_directory);\n+\n+\t// relative path INSIDE folder with accents\n+\tTestConnectToDatabase(\"test.db\", true);\n+\n+\tTestChangeDirectory(\"..\");\n+\t// relative path TOWARDS folder with accents\n+\tTestConnectToDatabase(dirname + \"/\" + \"test.db\");\n+\n+\t// absolute path with folder with accents\n+\tTestConnectToDatabase(current_directory + \"/\" + test_directory + \"/\" + \"test.db\");\n+\n+\t// revert current working directory\n+\tTestChangeDirectory(current_directory);\n+}\ndiff --git a/test/helpers/test_helpers.cpp b/test/helpers/test_helpers.cpp\nindex faaeb51ab350..265e7a4153cf 100644\n--- a/test/helpers/test_helpers.cpp\n+++ b/test/helpers/test_helpers.cpp\n@@ -60,6 +60,10 @@ void TestChangeDirectory(string path) {\n \tFileSystem::SetWorkingDirectory(path);\n }\n \n+string TestGetCurrentDirectory() {\n+\treturn FileSystem::GetWorkingDirectory();\n+}\n+\n void DeleteDatabase(string path) {\n \tif (!custom_test_directory.empty()) {\n \t\treturn;\ndiff --git a/test/include/test_helpers.hpp b/test/include/test_helpers.hpp\nindex 2ced3f07cf38..3444f01d3216 100644\n--- a/test/include/test_helpers.hpp\n+++ b/test/include/test_helpers.hpp\n@@ -37,6 +37,7 @@ void TestDeleteDirectory(string path);\n void TestCreateDirectory(string path);\n void TestDeleteFile(string path);\n void TestChangeDirectory(string path);\n+string TestGetCurrentDirectory();\n string TestDirectoryPath();\n string TestCreatePath(string suffix);\n unique_ptr<DBConfig> GetTestConfig();\ndiff --git a/test/sql/attach/attach_home_directory.test b/test/sql/attach/attach_home_directory.test\nnew file mode 100644\nindex 000000000000..60e4bac777db\n--- /dev/null\n+++ b/test/sql/attach/attach_home_directory.test\n@@ -0,0 +1,37 @@\n+# name: test/sql/attach/attach_home_directory.test\n+# description: Test resolution of ATTACH with home directory\n+# group: [attach]\n+\n+# FIXME: ATTACH does not correctly receive the FileOpener of the client\n+mode skip\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+ATTACH '__TEST_DIR__/home_dir.db' AS s1\n+\n+statement ok\n+CREATE TABLE s1.integers AS FROM range(10) t(i);\n+\n+query I\n+SELECT SUM(i) FROM s1.integers\n+----\n+45\n+\n+statement ok\n+DETACH s1\n+\n+statement ok\n+SET home_directory='__TEST_DIR__'\n+\n+statement ok\n+ATTACH '~/home_dir.db' AS s1\n+\n+query I\n+SELECT SUM(i) FROM s1.integers\n+----\n+45\n+\n+statement ok\n+DETACH s1\ndiff --git a/test/sql/copy/csv/csv_windows_mixed_separators.test b/test/sql/copy/csv/csv_windows_mixed_separators.test\nnew file mode 100644\nindex 000000000000..765c24f35627\n--- /dev/null\n+++ b/test/sql/copy/csv/csv_windows_mixed_separators.test\n@@ -0,0 +1,45 @@\n+# name: test/sql/copy/csv/csv_windows_mixed_separators.test\n+# description: Test mixed separators on Windows\n+# group: [csv]\n+\n+require windows\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# \\  and / are interchangeable on Windows\n+query I\n+SELECT * FROM 'test\\sql/copy\\csv/data\\test/date.csv'\n+----\n+2019-06-05\n+\n+query I\n+SELECT * FROM glob('test\\sql/copy\\csv\\data/test/*.csv') t(g) WHERE g LIKE '%date.csv'\n+----\n+test\\sql\\copy\\csv\\data\\test\\date.csv\n+\n+# also for attach\n+statement ok\n+ATTACH '__TEST_DIR__/windows_test.db' AS s1\n+\n+statement  ok\n+CREATE TABLE s1.tbl AS SELECT * FROM range(10) t(i);\n+\n+query I\n+SELECT SUM(i) FROM s1.tbl\n+----\n+45\n+\n+statement ok\n+DETACH s1\n+\n+statement ok\n+ATTACH '__TEST_DIR__\\windows_test.db' AS s1\n+\n+query I\n+SELECT SUM(i) FROM s1.tbl\n+----\n+45\n+\n+statement ok\n+DETACH s1\ndiff --git a/test/sql/copy/csv/glob/read_csv_glob_crawl.test b/test/sql/copy/csv/glob/read_csv_glob_crawl.test\nindex d1515ce6ba82..f5bcd8fb9ba4 100644\n--- a/test/sql/copy/csv/glob/read_csv_glob_crawl.test\n+++ b/test/sql/copy/csv/glob/read_csv_glob_crawl.test\n@@ -172,14 +172,6 @@ FROM read_csv_auto('test/sql/copy/csv/data/glob/crawl/hidden/**');\n 42\t42\n 42\t42\n \n-# symlink test: symlinks will not be searched\n-query I\n-FROM read_csv_auto('test/sql/copy/csv/data/glob/crawl/.symbolic_link/**');\n-----\n--42\n-\n-\n-\n #  additional tests\n statement ok\n CREATE TABLE t0 AS SELECT (i%2) AS c_2, (i%3) AS c_3, (i*i) AS c_pow FROM RANGE(0,10) tbl(i);\n@@ -312,12 +304,15 @@ select count(*) from glob('__TEST_DIR__/partitioned0/c_2=0/**/data_0.csv')\n ----\n 3\n \n+require notwindows\n \n+# symlink test: symlinks will not be searched\n+query I\n+FROM read_csv_auto('test/sql/copy/csv/data/glob/crawl/.symbolic_link/**');\n+----\n+-42\n \n \n-\n-require notwindows\n-\n statement error\n SELECT sum(column0) FROM read_csv('test/sql/copy/csv/data/glob/crawl/d/**/', auto_detect=1);\n ----\ndiff --git a/tools/pythonpkg/tests/fast/test_windows_abs_path.py b/tools/pythonpkg/tests/fast/test_windows_abs_path.py\nnew file mode 100644\nindex 000000000000..fb73e3ed5bdb\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/test_windows_abs_path.py\n@@ -0,0 +1,68 @@\n+import duckdb\n+import pytest\n+import os\n+import shutil\n+\n+class TestWindowsAbsPath(object):\n+    def test_windows_path_accent(self):\n+        if os.name != 'nt':\n+            return\n+        current_directory = os.getcwd()\n+        test_dir = os.path.join(current_directory, 't\u00e9st')\n+        if os.path.isdir(test_dir):\n+            shutil.rmtree(test_dir)\n+        os.mkdir(test_dir)\n+\n+        dbname = 'test.db'\n+        dbpath = os.path.join(test_dir, dbname)\n+        con = duckdb.connect(dbpath)\n+        con.execute(\"CREATE OR REPLACE TABLE int AS SELECT * FROM range(10) t(i)\")\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        os.chdir('t\u00e9st')\n+        dbpath = os.path.join('..',  dbpath)\n+        con = duckdb.connect(dbpath)\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        con = duckdb.connect(dbname)\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        os.chdir('..')\n+\n+    def test_windows_abs_path(self):\n+        if os.name != 'nt':\n+            return\n+        current_directory = os.getcwd()\n+        dbpath = os.path.join(current_directory, 'test.db')\n+        con = duckdb.connect(dbpath)\n+        con.execute(\"CREATE OR REPLACE TABLE int AS SELECT * FROM range(10) t(i)\")\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        assert dbpath[1] == ':'\n+        # remove the drive separator and reconnect\n+        dbpath = dbpath[2:]\n+        con = duckdb.connect(dbpath)\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        # forward slashes work as well\n+        dbpath = dbpath.replace('\\\\', '/')\n+        con = duckdb.connect(dbpath)\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n",
  "problem_statement": "accent in file path causing IOException\n### What happens?\n\nduckdb.connect() causes an IOException when the full filepath contains an \"\u00e9\" character, but a relative path is provided. If the section of the path containing the \"\u00e9\" character is provided, it works fine.\r\n\n\n### To Reproduce\n\n![image](https://user-images.githubusercontent.com/12448250/222928596-e9a66e69-790c-45c8-a442-20fdbf57ee19.png)\n\n### OS:\n\nWindows10 x64\n\n### DuckDB Version:\n\n0.7.1, duckdb-0.7.2.dev225\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nClement Sreeves\n\n### Affiliation:\n\nPersonal Project\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\naccent in file path causing IOException\n### What happens?\n\nduckdb.connect() causes an IOException when the full filepath contains an \"\u00e9\" character, but a relative path is provided. If the section of the path containing the \"\u00e9\" character is provided, it works fine.\r\n\n\n### To Reproduce\n\n![image](https://user-images.githubusercontent.com/12448250/222928596-e9a66e69-790c-45c8-a442-20fdbf57ee19.png)\n\n### OS:\n\nWindows10 x64\n\n### DuckDB Version:\n\n0.7.1, duckdb-0.7.2.dev225\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nClement Sreeves\n\n### Affiliation:\n\nPersonal Project\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2023-05-14T13:02:36Z"
}