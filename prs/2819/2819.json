{
  "repo": "duckdb/duckdb",
  "pull_number": 2819,
  "instance_id": "duckdb__duckdb-2819",
  "issue_numbers": [
    "2787"
  ],
  "base_commit": "18b71004d14876926ab1ab8b16dd8533745f7bdb",
  "patch": "diff --git a/tools/nodejs/src/statement.cpp b/tools/nodejs/src/statement.cpp\nindex a0fec39846b0..3148772e2361 100644\n--- a/tools/nodejs/src/statement.cpp\n+++ b/tools/nodejs/src/statement.cpp\n@@ -135,6 +135,10 @@ static Napi::Value convert_chunk(Napi::Env &env, std::vector<std::string> names,\n \n \t\tfor (duckdb::idx_t col_idx = 0; col_idx < chunk.ColumnCount(); col_idx++) {\n \t\t\tNapi::Value value;\n+\t\t\t// set up a new Napi::Object for some data types, e.g. INTERVAL\n+\t\t\tNapi::Object object_value;\n+\n+\t\t\tbool is_object_value {false};\n \n \t\t\tauto dval = chunk.GetValue(col_idx, row_idx);\n \t\t\tif (dval.is_null) {\n@@ -159,6 +163,13 @@ static Napi::Value convert_chunk(Napi::Env &env, std::vector<std::string> names,\n \t\t\tcase duckdb::LogicalTypeId::HUGEINT: {\n \t\t\t\tvalue = Napi::Number::New(env, dval.GetValue<double>());\n \t\t\t} break;\n+\t\t\tcase duckdb::LogicalTypeId::INTERVAL: {\n+\t\t\t\tis_object_value = true;\n+\t\t\t\tobject_value = Napi::Object::New(env);\n+\t\t\t\tobject_value.Set(\"months\", dval.value_.interval.months);\n+\t\t\t\tobject_value.Set(\"days\", dval.value_.interval.days);\n+\t\t\t\tobject_value.Set(\"micros\", dval.value_.interval.micros);\n+\t\t\t} break;\n #if (NAPI_VERSION > 4)\n \t\t\tcase duckdb::LogicalTypeId::DATE: {\n \t\t\t\tconst auto scale = duckdb::Interval::SECS_PER_DAY * duckdb::Interval::MSECS_PER_SEC;\n@@ -185,7 +196,11 @@ static Napi::Value convert_chunk(Napi::Env &env, std::vector<std::string> names,\n \t\t\t\t    .ThrowAsJavaScriptException();\n \t\t\t\treturn env.Null();\n \t\t\t}\n-\t\t\trow_result.Set(node_names[col_idx], value);\n+\t\t\tif (is_object_value == true) {\n+\t\t\t\trow_result.Set(node_names[col_idx], object_value);\n+\t\t\t} else {\n+\t\t\t\trow_result.Set(node_names[col_idx], value);\n+\t\t\t}\n \t\t}\n \t\tresult.Set(row_idx, row_result);\n \t}\n",
  "test_patch": "diff --git a/tools/nodejs/test/data_type_support.test.js b/tools/nodejs/test/data_type_support.test.js\nindex da615bc56991..1cf6ab508dcb 100644\n--- a/tools/nodejs/test/data_type_support.test.js\n+++ b/tools/nodejs/test/data_type_support.test.js\n@@ -20,4 +20,18 @@ describe(\"data type support\", function () {\n       done();\n     });\n   });\n+  it(\"supports INTERVAL values\", function (done) {\n+    db.prepare(`SELECT \n+    INTERVAL 1 MINUTE as minutes,\n+    INTERVAL 5 DAY as days,\n+    INTERVAL 4 MONTH as months,\n+    INTERVAL 4 MONTH + INTERVAL 5 DAY + INTERVAL 1 MINUTE as combined;`).each((err, row) => {\n+      assert(err === null);\n+      assert.deepEqual(row.minutes, { months: 0, days: 0, micros: 60 * 1000 * 1000});\n+      assert.deepEqual(row.days, { months: 0, days: 5, micros: 0});\n+      assert.deepEqual(row.months, {months: 4, days: 0, micros: 0});\n+      assert.deepEqual(row.combined, {months: 4, days: 5, micros: 60 * 1000 * 1000});\n+      done();\n+    });\n+  });\n });\n",
  "problem_statement": "add support for `INTERVAL` in node.js bindings\n#### What happens?\r\n\r\nWhile calculation some durations between timestamps in node.js, I had an error thrown `[Error: Data type is not supported INTERVAL]`.  Which makes sense: there is no `INTERVAL` case in [`statement.cpp`](https://github.com/duckdb/duckdb/blob/master/tools/nodejs/src/statement.cpp#L146).\r\n\r\nSeems like a pretty easy thing to add. I would be happy to submit a PR that adds it, but figured I'd ask: what would be the right translation between duckdb and napi here? A single number in micros (or milis), or something else?\r\n\r\n#### To Reproduce\r\n\r\n```javascript\r\nimport duckdb from 'duckdb';\r\n\r\nconst db = new duckdb.Database(':memory:');\r\nvar con = db.connect();\r\ncon\r\n  .prepare(\" SELECT TIMESTAMP '1992-09-20 11:30:00' - TIMESTAMP '1992-09-20 14:30:00';\")\r\n  .all(console.log);\r\n```\r\n\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Mac OS X Catalina\r\n - DuckDB Version: 0.3.1\r\n - DuckDB Client: Node.js\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "The DuckDB `INTERVAL` type has three fields: months, days and microseconds, so unfortunately you can't just return \u00b5s. This is because the type is intended to represent \"uneven\" units (e.g., months). So maybe a struct with the same members?",
  "created_at": "2021-12-19T15:41:24Z"
}