{
  "repo": "duckdb/duckdb",
  "pull_number": 7332,
  "instance_id": "duckdb__duckdb-7332",
  "issue_numbers": [
    "3545"
  ],
  "base_commit": "fc797c18cf8be9262fc9a519592b64b379de84b1",
  "patch": "diff --git a/extension/icu/icu-datepart.cpp b/extension/icu/icu-datepart.cpp\nindex b490be265dca..445f5a083057 100644\n--- a/extension/icu/icu-datepart.cpp\n+++ b/extension/icu/icu-datepart.cpp\n@@ -203,6 +203,14 @@ struct ICUDatePart : public ICUDateFunc {\n \t\treturn Date::EpochToDate(ExtractEpoch(calendar, 0));\n \t}\n \n+\tstatic string_t MonthName(icu::Calendar *calendar, const uint64_t micros) {\n+\t\treturn Date::MONTH_NAMES[ExtractMonth(calendar, micros) - 1];\n+\t}\n+\n+\tstatic string_t DayName(icu::Calendar *calendar, const uint64_t micros) {\n+\t\treturn Date::DAY_NAMES[ExtractDayOfWeek(calendar, micros)];\n+\t}\n+\n \ttemplate <typename RESULT_TYPE>\n \tstruct BindAdapterData : public BindData {\n \t\tusing result_t = RESULT_TYPE;\n@@ -246,7 +254,7 @@ struct ICUDatePart : public ICUDateFunc {\n \t\t\t\t                                                         return info.adapters[0](calendar, micros);\n \t\t\t                                                         } else {\n \t\t\t\t                                                         mask.SetInvalid(idx);\n-\t\t\t\t                                                         return RESULT_TYPE(0);\n+\t\t\t\t                                                         return RESULT_TYPE();\n \t\t\t                                                         }\n \t\t                                                         });\n \t}\n@@ -482,6 +490,44 @@ struct ICUDatePart : public ICUDateFunc {\n \t\tCreateScalarFunctionInfo func_info(set);\n \t\tcatalog.AddFunction(context, func_info);\n \t}\n+\n+\tstatic unique_ptr<FunctionData> BindMonthName(ClientContext &context, ScalarFunction &bound_function,\n+\t                                              vector<unique_ptr<Expression>> &arguments) {\n+\t\tusing data_t = BindAdapterData<string_t>;\n+\t\treturn BindAdapter<data_t>(context, bound_function, arguments, MonthName);\n+\t}\n+\n+\ttemplate <typename INPUT_TYPE>\n+\tstatic ScalarFunction GetMonthNameFunction(const LogicalType &temporal_type) {\n+\t\treturn ScalarFunction({temporal_type}, LogicalType::VARCHAR, UnaryTimestampFunction<INPUT_TYPE, string_t>,\n+\t\t                      BindMonthName);\n+\t}\n+\tstatic void AddMonthNameFunctions(const string &name, ClientContext &context) {\n+\t\tauto &catalog = Catalog::GetSystemCatalog(context);\n+\t\tScalarFunctionSet set(name);\n+\t\tset.AddFunction(GetMonthNameFunction<timestamp_t>(LogicalType::TIMESTAMP_TZ));\n+\t\tCreateScalarFunctionInfo func_info(set);\n+\t\tcatalog.AddFunction(context, func_info);\n+\t}\n+\n+\tstatic unique_ptr<FunctionData> BindDayName(ClientContext &context, ScalarFunction &bound_function,\n+\t                                            vector<unique_ptr<Expression>> &arguments) {\n+\t\tusing data_t = BindAdapterData<string_t>;\n+\t\treturn BindAdapter<data_t>(context, bound_function, arguments, DayName);\n+\t}\n+\n+\ttemplate <typename INPUT_TYPE>\n+\tstatic ScalarFunction GetDayNameFunction(const LogicalType &temporal_type) {\n+\t\treturn ScalarFunction({temporal_type}, LogicalType::VARCHAR, UnaryTimestampFunction<INPUT_TYPE, string_t>,\n+\t\t                      BindDayName);\n+\t}\n+\tstatic void AddDayNameFunctions(const string &name, ClientContext &context) {\n+\t\tauto &catalog = Catalog::GetSystemCatalog(context);\n+\t\tScalarFunctionSet set(name);\n+\t\tset.AddFunction(GetDayNameFunction<timestamp_t>(LogicalType::TIMESTAMP_TZ));\n+\t\tCreateScalarFunctionInfo func_info(set);\n+\t\tcatalog.AddFunction(context, func_info);\n+\t}\n };\n \n void RegisterICUDatePartFunctions(ClientContext &context) {\n@@ -520,6 +566,10 @@ void RegisterICUDatePartFunctions(ClientContext &context) {\n \t//  register the last_day function\n \tICUDatePart::AddLastDayFunctions(\"last_day\", context);\n \n+\t// register the dayname/monthname functions\n+\tICUDatePart::AddMonthNameFunctions(\"monthname\", context);\n+\tICUDatePart::AddDayNameFunctions(\"dayname\", context);\n+\n \t// finally the actual date_part function\n \tICUDatePart::AddDatePartFunctions(\"date_part\", context);\n \tICUDatePart::AddDatePartFunctions(\"datepart\", context);\n",
  "test_patch": "diff --git a/test/sql/function/timestamp/test_icu_datepart.test b/test/sql/function/timestamp/test_icu_datepart.test\nindex 8726020117e9..b6dd8fd827ae 100644\n--- a/test/sql/function/timestamp/test_icu_datepart.test\n+++ b/test/sql/function/timestamp/test_icu_datepart.test\n@@ -698,6 +698,22 @@ infinity\tNULL\tNULL\n -infinity\tNULL\tNULL\n NULL\tNULL\tNULL\n \n+# dayname/monthname\n+query II\n+SELECT dayname(ts), monthname(ts) from timestamps;\n+----\n+Wednesday\tMarch\n+Tuesday\tJuly\n+Thursday\tDecember\n+Monday\tFebruary\n+Friday\tNovember\n+Monday\tNovember\n+Monday\tNovember\n+Friday\tDecember\n+NULL\tNULL\n+NULL\tNULL\n+NULL\tNULL\n+\n #\n # Fractional Time Zones\n #\n",
  "problem_statement": "ICU versions of MonthName and DayName\nThese would be special cases of a more generic `icu_to_char(VARCHAR, TIMESTAMPTZ)` function.\n",
  "hints_text": "",
  "created_at": "2023-05-02T20:36:41Z"
}