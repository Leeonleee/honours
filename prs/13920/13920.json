{
  "repo": "duckdb/duckdb",
  "pull_number": 13920,
  "instance_id": "duckdb__duckdb-13920",
  "issue_numbers": [
    "13867",
    "13867"
  ],
  "base_commit": "5c56a19a6940d1e1f32c80a6acf4348fed8a949c",
  "patch": "diff --git a/scripts/apply_extension_patches.py b/scripts/apply_extension_patches.py\nindex c76b900ae20f..8f4c7c263eb1 100644\n--- a/scripts/apply_extension_patches.py\n+++ b/scripts/apply_extension_patches.py\n@@ -13,7 +13,7 @@\n \n \n def raise_error(error_msg):\n-    sys.stderr.write(error_message + '\\n')\n+    sys.stderr.write(error_msg + '\\n')\n     sys.exit(1)\n \n \ndiff --git a/src/common/random_engine.cpp b/src/common/random_engine.cpp\nindex e51f71001024..2dc0df1894d0 100644\n--- a/src/common/random_engine.cpp\n+++ b/src/common/random_engine.cpp\n@@ -29,12 +29,18 @@ double RandomEngine::NextRandom(double min, double max) {\n }\n \n double RandomEngine::NextRandom() {\n-\treturn std::ldexp(random_state->pcg(), -32);\n+\tauto uint64 = NextRandomInteger64();\n+\treturn std::ldexp(uint64, -64);\n }\n+\n uint32_t RandomEngine::NextRandomInteger() {\n \treturn random_state->pcg();\n }\n \n+uint64_t RandomEngine::NextRandomInteger64() {\n+\treturn (static_cast<uint64_t>(NextRandomInteger()) << UINT64_C(32)) | static_cast<uint64_t>(NextRandomInteger());\n+}\n+\n uint32_t RandomEngine::NextRandomInteger(uint32_t min, uint32_t max) {\n \treturn min + static_cast<uint32_t>(NextRandom() * double(max - min));\n }\ndiff --git a/src/include/duckdb/common/random_engine.hpp b/src/include/duckdb/common/random_engine.hpp\nindex 224a5a20322d..ab91f3684a04 100644\n--- a/src/include/duckdb/common/random_engine.hpp\n+++ b/src/include/duckdb/common/random_engine.hpp\n@@ -30,6 +30,7 @@ struct RandomEngine {\n \tdouble NextRandom();\n \tuint32_t NextRandomInteger();\n \tuint32_t NextRandomInteger(uint32_t min, uint32_t max);\n+\tuint64_t NextRandomInteger64();\n \n \tvoid SetSeed(uint32_t seed);\n \n",
  "test_patch": "diff --git a/.github/patches/extensions/spatial/random_test_fix.patch b/.github/patches/extensions/spatial/random_test_fix.patch\nnew file mode 100644\nindex 000000000000..da793ab49562\n--- /dev/null\n+++ b/.github/patches/extensions/spatial/random_test_fix.patch\n@@ -0,0 +1,158 @@\n+diff --git a/test/sql/index/rtree_basic_points.test b/test/sql/index/rtree_basic_points.test\n+index c4de65b..047ad35 100644\n+--- a/test/sql/index/rtree_basic_points.test\n++++ b/test/sql/index/rtree_basic_points.test\n+@@ -7,7 +7,7 @@ FROM st_generatepoints({min_x: 0, min_y: 0, max_x: 10000, max_y: 10000}::BOX_2D,\n+ query I\n+ SELECT count(*) FROM t1 WHERE ST_Within(geom, ST_MakeEnvelope(450, 450, 650, 650));\n+ ----\n+-352\n++390\n+ \n+ statement ok\n+ CREATE INDEX my_idx ON t1 USING RTREE (geom);\n+@@ -20,4 +20,4 @@ physical_plan\t<REGEX>:.*RTREE_INDEX_SCAN.*\n+ query I\n+ SELECT count(*) FROM t1 WHERE ST_Within(geom, ST_MakeEnvelope(450, 450, 650, 650));\n+ ----\n+-352\n+\\ No newline at end of file\n++390\n+diff --git a/test/sql/index/rtree_block_reclaim.test_slow b/test/sql/index/rtree_block_reclaim.test_slow\n+index f474266..903f634 100644\n+--- a/test/sql/index/rtree_block_reclaim.test_slow\n++++ b/test/sql/index/rtree_block_reclaim.test_slow\n+@@ -21,7 +21,7 @@ CREATE INDEX idx ON tbl USING RTREE (geom);\n+ query II\n+ SELECT i, geom FROM tbl WHERE i = 50000;;\n+ ----\n+-50000\tPOINT (4732.4060765095055 128.3674407750368)\n++50000\tPOINT (1345.636742415942 425.3127709233669)\n+ \n+ statement ok\n+ CHECKPOINT;\n+@@ -51,7 +51,7 @@ CHECKPOINT;\n+ query II\n+ SELECT i, geom FROM tbl WHERE i = 50000;\n+ ----\n+-50000\tPOINT (4732.4060765095055 128.3674407750368)\n++50000\tPOINT (1345.636742415942 425.3127709233669)\n+ \n+ # now loop and always DROP INDEX, then recreate (reusing the same blocks)\n+ \n+@@ -87,6 +87,6 @@ FROM pragma_database_size() current, blocks_idx;\n+ query II\n+ SELECT i, geom FROM tbl WHERE i = 50000;\n+ ----\n+-50000\tPOINT (4732.4060765095055 128.3674407750368)\n++50000\tPOINT (1345.636742415942 425.3127709233669)\n+ \n+ endloop\n+\\ No newline at end of file\n+diff --git a/test/sql/index/rtree_persistence.test b/test/sql/index/rtree_persistence.test\n+index a971dd5..926ab36 100644\n+--- a/test/sql/index/rtree_persistence.test\n++++ b/test/sql/index/rtree_persistence.test\n+@@ -10,7 +10,7 @@ FROM st_generatepoints({min_x: 0, min_y: 0, max_x: 10000, max_y: 10000}::BOX_2D,\n+ query I\n+ SELECT count(*) FROM t1 WHERE ST_Within(geom, ST_MakeEnvelope(450, 450, 650, 650));\n+ ----\n+-352\n++390\n+ \n+ statement ok\n+ CREATE INDEX my_idx ON t1 USING RTREE (geom);\n+@@ -31,4 +31,4 @@ physical_plan\t<REGEX>:.*RTREE_INDEX_SCAN.*\n+ query I\n+ SELECT count(*) FROM t1 WHERE ST_Within(geom, ST_MakeEnvelope(450, 450, 650, 650));\n+ ----\n+-352\n+\\ No newline at end of file\n++390\n+diff --git a/test/sql/index/rtree_persistence_load.test b/test/sql/index/rtree_persistence_load.test\n+index 15ca910..056d8ce 100644\n+--- a/test/sql/index/rtree_persistence_load.test\n++++ b/test/sql/index/rtree_persistence_load.test\n+@@ -10,7 +10,7 @@ FROM st_generatepoints({min_x: 0, min_y: 0, max_x: 10000, max_y: 10000}::BOX_2D,\n+ query I\n+ SELECT count(*) FROM t1 WHERE ST_Within(geom, ST_MakeEnvelope(450, 450, 650, 650));\n+ ----\n+-43\n++36\n+ \n+ statement ok\n+ CREATE INDEX my_idx ON t1 USING RTREE (geom);\n+@@ -39,4 +39,4 @@ physical_plan\t<REGEX>:.*RTREE_INDEX_SCAN.*\n+ query I\n+ SELECT count(*) FROM t1 WHERE ST_Within(geom, ST_MakeEnvelope(450, 450, 650, 650));\n+ ----\n+-43\n+\\ No newline at end of file\n++36\n+diff --git a/test/sql/index/rtree_persistence_wal.test b/test/sql/index/rtree_persistence_wal.test\n+index 14b3c53..6d310ed 100644\n+--- a/test/sql/index/rtree_persistence_wal.test\n++++ b/test/sql/index/rtree_persistence_wal.test\n+@@ -13,7 +13,7 @@ FROM st_generatepoints({min_x: 0, min_y: 0, max_x: 10000, max_y: 10000}::BOX_2D,\n+ query I\n+ SELECT count(*) FROM t1 WHERE ST_Within(geom, ST_MakeEnvelope(450, 450, 650, 650));\n+ ----\n+-43\n++36\n+ \n+ statement ok\n+ CREATE INDEX my_idx ON t1 USING RTREE (geom);\n+@@ -34,4 +34,4 @@ physical_plan\t<REGEX>:.*RTREE_INDEX_SCAN.*\n+ query I\n+ SELECT count(*) FROM t1 WHERE ST_Within(geom, ST_MakeEnvelope(450, 450, 650, 650));\n+ ----\n+-43\n+\\ No newline at end of file\n++36\n+diff --git a/test/sql/index/rtree_projection.test b/test/sql/index/rtree_projection.test\n+index b60c922..23488e4 100644\n+--- a/test/sql/index/rtree_projection.test\n++++ b/test/sql/index/rtree_projection.test\n+@@ -15,30 +15,30 @@ CREATE INDEX my_idx ON points USING RTREE(geom);\n+ query II rowsort\n+ SELECT * FROM points WHERE ST_Intersects(geom, ST_MakeEnvelope(0, 0, 500, 500));\n+ ----\n+-351\tPOINT (359.812940005213 406.6655575297773)\n+-472\tPOINT (169.11179292947054 129.24372218549252)\n+-775\tPOINT (173.61568519845605 455.52933821454644)\n++249\tPOINT (42.208750495658 488.510431689545)\n++760\tPOINT (16.631746553017916 252.64710064171524)\n++907\tPOINT (88.77047830284079 251.89159351805182)\n+ \n+ query II rowsort\n+ SELECT geom, id FROM points WHERE ST_Intersects(geom, ST_MakeEnvelope(0, 0, 500, 500));\n+ ----\n+-POINT (169.11179292947054 129.24372218549252)\t472\n+-POINT (173.61568519845605 455.52933821454644)\t775\n+-POINT (359.812940005213 406.6655575297773)\t351\n++POINT (16.631746553017916 252.64710064171524)\t760\n++POINT (42.208750495658 488.510431689545)\t249\n++POINT (88.77047830284079 251.89159351805182)\t907\n+ \n+ query I rowsort\n+ SELECT id FROM points WHERE ST_Intersects(geom, ST_MakeEnvelope(0, 0, 500, 500));\n+ ----\n+-351\n+-472\n+-775\n++249\n++760\n++907\n+ \n+ query III rowsort\n+ SELECT id, geom, ST_Intersects(geom, ST_MakeEnvelope(0, 0, 500, 500)) as contained FROM points WHERE ST_Intersects(geom, ST_MakeEnvelope(0, 0, 500, 500));\n+ ----\n+-351\tPOINT (359.812940005213 406.6655575297773)\ttrue\n+-472\tPOINT (169.11179292947054 129.24372218549252)\ttrue\n+-775\tPOINT (173.61568519845605 455.52933821454644)\ttrue\n++249\tPOINT (42.208750495658 488.510431689545)\t1\n++760\tPOINT (16.631746553017916 252.64710064171524)\t1\n++907\tPOINT (88.77047830284079 251.89159351805182)\t1\n+ \n+ query I rowsort\n+ SELECT ST_Intersects(geom, ST_MakeEnvelope(0, 0, 500, 500)) as contained FROM points WHERE ST_Intersects(geom, ST_MakeEnvelope(0, 0, 500, 500));\ndiff --git a/test/api/test_api.cpp b/test/api/test_api.cpp\nindex 3452604e4066..767c6bbb0abb 100644\n--- a/test/api/test_api.cpp\n+++ b/test/api/test_api.cpp\n@@ -618,7 +618,7 @@ TEST_CASE(\"Issue #6284: CachingPhysicalOperator in pull causes issues\", \"[api][.\n \t\tcount += chunk->size();\n \t}\n \n-\tREQUIRE(951468 - count == 0);\n+\tREQUIRE(951698 == count);\n }\n \n TEST_CASE(\"Fuzzer 50 - Alter table heap-use-after-free\", \"[api]\") {\ndiff --git a/test/issues/general/test_9399.test_slow b/test/issues/general/test_9399.test_slow\nindex 86dac620f801..5327aa648c49 100644\n--- a/test/issues/general/test_9399.test_slow\n+++ b/test/issues/general/test_9399.test_slow\n@@ -29,4 +29,4 @@ FROM test GROUP BY c0)\n SELECT * FROM cte\n ORDER BY c0\n ----\n-299445 values hashing to 851e651ae21c938efff67bf148818639\n+299406 values hashing to e9b6d718674413df6f4d2c3c3c5bd853\ndiff --git a/test/optimizer/topn/complex_top_n.test b/test/optimizer/topn/complex_top_n.test\nindex 6e81978f7c5f..6a366b4fd911 100644\n--- a/test/optimizer/topn/complex_top_n.test\n+++ b/test/optimizer/topn/complex_top_n.test\n@@ -44,7 +44,7 @@ LEFT JOIN (\n   LEFT JOIN ORDERITEMVIEW ON ORDERVIEW.ORDER_ID = ORDERITEM_ORDERID\n ) AS Q3J ON (Q3J.Q3P = CTE.CUSTOMER_ID) order by all;\n ----\n-285 values hashing to 9b1c4d195c0e3c4de5b190b1ab7b357b\n+261 values hashing to 5a4c1b428d36bcb30b04222a764fbafc\n \n query II\n explain WITH CTE AS (\ndiff --git a/test/sql/copy/parquet/hive_timestamps.test b/test/sql/copy/parquet/hive_timestamps.test\nindex 6e29e0d9bc1e..533c8eb3499a 100644\n--- a/test/sql/copy/parquet/hive_timestamps.test\n+++ b/test/sql/copy/parquet/hive_timestamps.test\n@@ -39,11 +39,11 @@ FROM timeseries\n ORDER BY ALL\n LIMIT 5\n ----\n-2023-11-01 00:00:00\t15134\n-2023-11-01 01:00:00\t16968\n-2023-11-01 02:00:00\t13882\n-2023-11-01 03:00:00\t14317\n-2023-11-01 04:00:00\t14905\n+2023-11-01 00:00:00\t15848\n+2023-11-01 01:00:00\t13946\n+2023-11-01 02:00:00\t14636\n+2023-11-01 03:00:00\t13540\n+2023-11-01 04:00:00\t16269\n \n statement ok\n COPY (\n@@ -58,8 +58,8 @@ FROM read_parquet('__TEST_DIR__/hive/*/*.parquet')\n ORDER BY ALL\n LIMIT 5\n ----\n-2023-11-01 00:00:00\t15134\n-2023-11-01 01:00:00\t16968\n-2023-11-01 02:00:00\t13882\n-2023-11-01 03:00:00\t14317\n-2023-11-01 04:00:00\t14905\n+2023-11-01 00:00:00\t15848\n+2023-11-01 01:00:00\t13946\n+2023-11-01 02:00:00\t14636\n+2023-11-01 03:00:00\t13540\n+2023-11-01 04:00:00\t16269\ndiff --git a/test/sql/join/iejoin/iejoin_projection_maps.test b/test/sql/join/iejoin/iejoin_projection_maps.test\nindex c4090b320968..ea3c7a771e21 100644\n--- a/test/sql/join/iejoin/iejoin_projection_maps.test\n+++ b/test/sql/join/iejoin/iejoin_projection_maps.test\n@@ -27,7 +27,7 @@ query IIIIII\n SELECT SUM(id) AS id, SUM(id2) AS id2, SUM(id3) AS id3, SUM(value) AS sum_value, SUM(one_min_value) AS sum_one_min_value, sum_value + sum_one_min_value AS sum\n FROM df\n ----\n-256630\t29499\t17606\t2500.532\t2499.468\t5000.000\n+255978\t29751\t17482\t2504.293\t2495.704\t4999.997\n \n statement ok\n PRAGMA enable_verification\n@@ -51,7 +51,7 @@ FROM (\n GROUP BY ALL\n ORDER BY ALL\n ----\n-660 values hashing to 0acad7a6a360d48246479ab35572ecce\n+660 values hashing to 7a9e98649bddd1ba74c34324caf4674c\n \n endloop\n \ndiff --git a/test/sql/join/iejoin/test_iejoin_events.test b/test/sql/join/iejoin/test_iejoin_events.test\nindex 8876036d5505..86de26c9a45b 100644\n--- a/test/sql/join/iejoin/test_iejoin_events.test\n+++ b/test/sql/join/iejoin/test_iejoin_events.test\n@@ -43,4 +43,4 @@ SELECT COUNT(*) FROM (\n \t  AND r.id <> s.id\n ) q2;\n ----\n-6\n+4\ndiff --git a/test/sql/sample/test_sample.test_slow b/test/sql/sample/test_sample.test_slow\nindex e56ebc09eacb..57a41394ea41 100644\n--- a/test/sql/sample/test_sample.test_slow\n+++ b/test/sql/sample/test_sample.test_slow\n@@ -218,10 +218,10 @@ select * from integers using sample 10000%;\n query I\n select i from integers using sample (1 rows) repeatable (0);\n ----\n-130\n+152\n \n query I\n select i from integers using sample reservoir(1%) repeatable (0);\n ----\n-83\n-21\n+51\n+78\ndiff --git a/test/sql/window/test_window_wide_frame.test_slow b/test/sql/window/test_window_wide_frame.test_slow\nindex a9907fce83e9..9199a6540ded 100644\n--- a/test/sql/window/test_window_wide_frame.test_slow\n+++ b/test/sql/window/test_window_wide_frame.test_slow\n@@ -25,4 +25,4 @@ window w as (order by timestamp asc range between interval 55 seconds preceding\n order by 3 desc\n limit 1;\n ----\n-2020-10-15 16:58:10.318385\t50.000000\t3363\n+2020-10-15 16:47:25.764708\t49.0\t3437\n",
  "problem_statement": "Random generator gives repeated results \n### What happens?\r\n\r\nrandom() gives repeated results even when run only 100k times and single-threaded.\r\n\r\nIn comparison, numpy gives unique results even when asked for 100M random numbers.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nSET THREADS to 1;\r\nSELECT count() FROM (SELECT DISTINCT random() AS a FROM range(100_000));\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 count_star() \u2502\r\n\u2502    int64     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502        99998 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n### OS:\r\n\r\nUbuntu22.04\r\n\r\n### DuckDB Version:\r\n\r\n1.1.0\r\n\r\n### DuckDB Client:\r\n\r\nPython3.9\r\n\r\n### Hardware:\r\n\r\ni5, x64\r\n\r\n### Full Name:\r\n\r\nSoeren Wolfers\r\n\r\n### Affiliation:\r\n\r\nG-Research\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\nRandom generator gives repeated results \n### What happens?\r\n\r\nrandom() gives repeated results even when run only 100k times and single-threaded.\r\n\r\nIn comparison, numpy gives unique results even when asked for 100M random numbers.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nSET THREADS to 1;\r\nSELECT count() FROM (SELECT DISTINCT random() AS a FROM range(100_000));\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 count_star() \u2502\r\n\u2502    int64     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502        99998 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n### OS:\r\n\r\nUbuntu22.04\r\n\r\n### DuckDB Version:\r\n\r\n1.1.0\r\n\r\n### DuckDB Client:\r\n\r\nPython3.9\r\n\r\n### Hardware:\r\n\r\ni5, x64\r\n\r\n### Full Name:\r\n\r\nSoeren Wolfers\r\n\r\n### Affiliation:\r\n\r\nG-Research\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2024-09-13T10:34:46Z"
}