{
  "repo": "duckdb/duckdb",
  "pull_number": 5059,
  "instance_id": "duckdb__duckdb-5059",
  "issue_numbers": [
    "5038"
  ],
  "base_commit": "ad8530cbe0afc91f5b10ae0f6d1dd16ae322156d",
  "patch": "diff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex af6246f75def..e3fce07f19f9 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -282,7 +282,11 @@ unique_ptr<DuckDBPyRelation> DuckDBPyConnection::Table(const string &tname) {\n \tif (!connection) {\n \t\tthrow ConnectionException(\"Connection has already been closed\");\n \t}\n-\treturn make_unique<DuckDBPyRelation>(connection->Table(tname));\n+\tauto qualified_name = QualifiedName::Parse(tname);\n+\tif (qualified_name.schema.empty()) {\n+\t\tqualified_name.schema = DEFAULT_SCHEMA;\n+\t}\n+\treturn make_unique<DuckDBPyRelation>(connection->Table(qualified_name.schema, qualified_name.name));\n }\n \n unique_ptr<DuckDBPyRelation> DuckDBPyConnection::Values(py::object params) {\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/relational_api/test_rapi_query.py b/tools/pythonpkg/tests/fast/relational_api/test_rapi_query.py\nindex ce79d998dad8..70f50bc0eb1c 100644\n--- a/tools/pythonpkg/tests/fast/relational_api/test_rapi_query.py\n+++ b/tools/pythonpkg/tests/fast/relational_api/test_rapi_query.py\n@@ -42,6 +42,14 @@ def test_query_table_unrelated(self, tbl_table):\n         result = rel.execute()\n         assert(result.fetchall() == [(5,)])\n \n+    def test_query_table_qualified(self):\n+        con = duckdb.default_connection\n+        con.execute(\"create schema fff\")\n+\n+        # Create table in fff schema\n+        con.execute(\"create table fff.t2 as select 1 as t\")\n+        assert(con.table(\"fff.t2\").fetchall() == [(1,)])\n+\n     def test_query_insert_into_relation(self, tbl_table):\n         con = duckdb.default_connection\n         rel = con.query(\"select i from range(1000) tbl(i)\")\n",
  "problem_statement": "Python Table function does not support fully qualified table name\n### What happens?\r\n\r\nMethod [https://duckdb.org/docs/api/python/reference/#duckdb.DuckDBPyConnection.table](duckdb.DuckDBPyConnection.table) does not support fully qualified table name.\r\n\r\n\r\n### To Reproduce\r\n\r\n```\r\nimport duckdb\r\n\r\ncon = duckdb.connect(\":memory:\")\r\ncon.execute(\"create schema fff\")\r\n\r\n# Create table in main schema\r\ncon.execute(\"create table t1 as select 1 as t\")\r\ncon.table(\"t1\") # -> this works fine\r\n\r\n# Create table in fff schema\r\ncon.execute(\"create table fff.t2 as select 1 as t\")\r\ncon.table(\"fff.t2\") # -> Table does not exist!\r\ncon.table(\"main.fff.t2\") # -> Table does not exist!\r\ncon.table(\"t2\") # -> Table does not exist!\r\n```\r\n\r\nAlternatively, it is possible to use `duckdb.query('SELECT * FROM fff.t2')`, that works.\r\n\r\n### OS:\r\n\r\nMacOS\r\n\r\n### DuckDB Version:\r\n\r\n0.5.1\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nRadek Tom\u0161ej\r\n\r\n### Affiliation:\r\n\r\nAlma Career\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2022-10-21T11:22:17Z"
}