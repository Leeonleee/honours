{
  "repo": "duckdb/duckdb",
  "pull_number": 2692,
  "instance_id": "duckdb__duckdb-2692",
  "issue_numbers": [
    "2678",
    "2678"
  ],
  "base_commit": "b14008ca50b2665653842049d499fdef2b214226",
  "patch": "diff --git a/src/function/scalar/sequence/nextval.cpp b/src/function/scalar/sequence/nextval.cpp\nindex a56f03b8b5af..0956ca90f15f 100644\n--- a/src/function/scalar/sequence/nextval.cpp\n+++ b/src/function/scalar/sequence/nextval.cpp\n@@ -9,6 +9,7 @@\n #include \"duckdb/planner/expression/bound_function_expression.hpp\"\n #include \"duckdb/transaction/transaction.hpp\"\n #include \"duckdb/common/vector_operations/unary_executor.hpp\"\n+#include \"duckdb/common/operator/add.hpp\"\n \n namespace duckdb {\n \n@@ -42,9 +43,12 @@ struct NextSequenceValueOperator {\n \tstatic int64_t Operation(Transaction &transaction, SequenceCatalogEntry *seq) {\n \t\tlock_guard<mutex> seqlock(seq->lock);\n \t\tint64_t result;\n+\t\tresult = seq->counter;\n+\t\tbool overflow = !TryAddOperator::Operation(seq->counter, seq->increment, seq->counter);\n \t\tif (seq->cycle) {\n-\t\t\tresult = seq->counter;\n-\t\t\tseq->counter += seq->increment;\n+\t\t\tif (overflow) {\n+\t\t\t\tthrow SequenceException(\"overflow in sequence\");\n+\t\t\t}\n \t\t\tif (result < seq->min_value) {\n \t\t\t\tresult = seq->max_value;\n \t\t\t\tseq->counter = seq->max_value + seq->increment;\n@@ -53,13 +57,11 @@ struct NextSequenceValueOperator {\n \t\t\t\tseq->counter = seq->min_value + seq->increment;\n \t\t\t}\n \t\t} else {\n-\t\t\tresult = seq->counter;\n-\t\t\tseq->counter += seq->increment;\n-\t\t\tif (result < seq->min_value) {\n+\t\t\tif (result < seq->min_value || (overflow && seq->increment < 0)) {\n \t\t\t\tthrow SequenceException(\"nextval: reached minimum value of sequence \\\"%s\\\" (%lld)\", seq->name,\n \t\t\t\t                        seq->min_value);\n \t\t\t}\n-\t\t\tif (result > seq->max_value) {\n+\t\t\tif (result > seq->max_value || overflow) {\n \t\t\t\tthrow SequenceException(\"nextval: reached maximum value of sequence \\\"%s\\\" (%lld)\", seq->name,\n \t\t\t\t                        seq->max_value);\n \t\t\t}\n",
  "test_patch": "diff --git a/test/sql/catalog/sequence/sequence_overflow.test b/test/sql/catalog/sequence/sequence_overflow.test\nnew file mode 100644\nindex 000000000000..c8cf5be38c09\n--- /dev/null\n+++ b/test/sql/catalog/sequence/sequence_overflow.test\n@@ -0,0 +1,45 @@\n+# name: test/sql/catalog/sequence/sequence_overflow.test\n+# description: Issue #2678: overflow in sequences\n+# group: [sequence]\n+\n+statement ok\n+create sequence seq1 INCREMENT BY 1 MINVALUE 9223372036854775800 MAXVALUE 9223372036854775807 CYCLE;\n+\n+statement error\n+SELECT nextval('seq1') from generate_series(0,20);\n+\n+statement ok\n+create sequence seq2 INCREMENT BY -1 MINVALUE -9223372036854775808 MAXVALUE -9223372036854775800 CYCLE;\n+\n+statement error\n+SELECT nextval('seq2') from generate_series(0,20);\n+\n+statement ok\n+create sequence seq3 INCREMENT BY 1 MINVALUE 9223372036854775800 MAXVALUE 9223372036854775807;\n+\n+statement error\n+SELECT nextval('seq3') from generate_series(0,20);\n+\n+statement ok\n+create sequence seq4 INCREMENT BY -1 MINVALUE -9223372036854775808 MAXVALUE -9223372036854775800;\n+\n+statement error\n+SELECT nextval('seq4') from generate_series(0,20);\n+\n+statement ok\n+create sequence seq5 INCREMENT BY 9223372036854775807 MINVALUE 9223372036854775800 MAXVALUE 9223372036854775807 CYCLE;\n+\n+statement error\n+SELECT nextval('seq5') from generate_series(0,20);\n+\n+statement ok\n+create sequence seq6 INCREMENT BY 9223372036854775807 MINVALUE 9223372036854775800 MAXVALUE 9223372036854775807;\n+\n+statement error\n+SELECT nextval('seq6') from generate_series(0,20);\n+\n+statement ok\n+create sequence seq7 INCREMENT BY -9223372036854775808 MINVALUE -9223372036854775808 MAXVALUE -9223372036854775800;\n+\n+statement error\n+SELECT nextval('seq7') from generate_series(0,20);\n",
  "problem_statement": "Very edge case on sequences\n#### What happens?\r\nAs promised, I will keep posting here the issues I find.\r\nWhile testing a cleanup for sequences in MonetDB, I got an assertion about integer overflow in DuckDB. Basically I run over the int64 max value and it would be expectable to go back to the minimum value. I know this is an extreme case and you can close the issue if you don't find it relevant. If this should be fixed, we have to be careful to not introduce a new branch in the sequence values retrieval and possibly slow it down.\r\n\r\n#### To Reproduce\r\ncreate sequence ups7 INCREMENT BY 1 MINVALUE 9223372036854775800 MAXVALUE 9223372036854775807 CYCLE;\r\nSELECT nextval('ups7') from generate_series(0,20);\r\nsrc/function/scalar/sequence/nextval.cpp:47:17: runtime error: signed integer overflow: 9223372036854775807 + 1 cannot be represented in type 'long int'\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Linux\r\n - DuckDB Version: Tip of master branch\r\n - DuckDB Client: shell\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\nVery edge case on sequences\n#### What happens?\r\nAs promised, I will keep posting here the issues I find.\r\nWhile testing a cleanup for sequences in MonetDB, I got an assertion about integer overflow in DuckDB. Basically I run over the int64 max value and it would be expectable to go back to the minimum value. I know this is an extreme case and you can close the issue if you don't find it relevant. If this should be fixed, we have to be careful to not introduce a new branch in the sequence values retrieval and possibly slow it down.\r\n\r\n#### To Reproduce\r\ncreate sequence ups7 INCREMENT BY 1 MINVALUE 9223372036854775800 MAXVALUE 9223372036854775807 CYCLE;\r\nSELECT nextval('ups7') from generate_series(0,20);\r\nsrc/function/scalar/sequence/nextval.cpp:47:17: runtime error: signed integer overflow: 9223372036854775807 + 1 cannot be represented in type 'long int'\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Linux\r\n - DuckDB Version: Tip of master branch\r\n - DuckDB Client: shell\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "Thanks for the report! Indeed this is an edge case but undefined behavior should always be fixed.\nThanks for the report! Indeed this is an edge case but undefined behavior should always be fixed.",
  "created_at": "2021-11-30T11:49:15Z"
}