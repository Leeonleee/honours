You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Very edge case on sequences
#### What happens?
As promised, I will keep posting here the issues I find.
While testing a cleanup for sequences in MonetDB, I got an assertion about integer overflow in DuckDB. Basically I run over the int64 max value and it would be expectable to go back to the minimum value. I know this is an extreme case and you can close the issue if you don't find it relevant. If this should be fixed, we have to be careful to not introduce a new branch in the sequence values retrieval and possibly slow it down.

#### To Reproduce
create sequence ups7 INCREMENT BY 1 MINVALUE 9223372036854775800 MAXVALUE 9223372036854775807 CYCLE;
SELECT nextval('ups7') from generate_series(0,20);
src/function/scalar/sequence/nextval.cpp:47:17: runtime error: signed integer overflow: 9223372036854775807 + 1 cannot be represented in type 'long int'

#### Environment (please complete the following information):
 - OS: Linux
 - DuckDB Version: Tip of master branch
 - DuckDB Client: shell

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

Very edge case on sequences
#### What happens?
As promised, I will keep posting here the issues I find.
While testing a cleanup for sequences in MonetDB, I got an assertion about integer overflow in DuckDB. Basically I run over the int64 max value and it would be expectable to go back to the minimum value. I know this is an extreme case and you can close the issue if you don't find it relevant. If this should be fixed, we have to be careful to not introduce a new branch in the sequence values retrieval and possibly slow it down.

#### To Reproduce
create sequence ups7 INCREMENT BY 1 MINVALUE 9223372036854775800 MAXVALUE 9223372036854775807 CYCLE;
SELECT nextval('ups7') from generate_series(0,20);
src/function/scalar/sequence/nextval.cpp:47:17: runtime error: signed integer overflow: 9223372036854775807 + 1 cannot be represented in type 'long int'

#### Environment (please complete the following information):
 - OS: Linux
 - DuckDB Version: Tip of master branch
 - DuckDB Client: shell

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/function/scalar/sequence/nextval.cpp]
1: #include "duckdb/function/scalar/sequence_functions.hpp"
2: 
3: #include "duckdb/catalog/catalog.hpp"
4: #include "duckdb/catalog/catalog_entry/sequence_catalog_entry.hpp"
5: #include "duckdb/common/exception.hpp"
6: #include "duckdb/common/vector_operations/vector_operations.hpp"
7: #include "duckdb/execution/expression_executor.hpp"
8: #include "duckdb/catalog/catalog.hpp"
9: #include "duckdb/planner/expression/bound_function_expression.hpp"
10: #include "duckdb/transaction/transaction.hpp"
11: #include "duckdb/common/vector_operations/unary_executor.hpp"
12: 
13: namespace duckdb {
14: 
15: struct NextvalBindData : public FunctionData {
16: 	//! The client context for the function call
17: 	ClientContext &context;
18: 	//! The sequence to use for the nextval computation; only if
19: 	SequenceCatalogEntry *sequence;
20: 
21: 	NextvalBindData(ClientContext &context, SequenceCatalogEntry *sequence) : context(context), sequence(sequence) {
22: 	}
23: 
24: 	unique_ptr<FunctionData> Copy() override {
25: 		return make_unique<NextvalBindData>(context, sequence);
26: 	}
27: };
28: 
29: struct CurrentSequenceValueOperator {
30: 	static int64_t Operation(Transaction &transaction, SequenceCatalogEntry *seq) {
31: 		lock_guard<mutex> seqlock(seq->lock);
32: 		int64_t result;
33: 		if (seq->usage_count == 0u) {
34: 			throw SequenceException("currval: sequence is not yet defined in this session");
35: 		}
36: 		result = seq->last_value;
37: 		return result;
38: 	}
39: };
40: 
41: struct NextSequenceValueOperator {
42: 	static int64_t Operation(Transaction &transaction, SequenceCatalogEntry *seq) {
43: 		lock_guard<mutex> seqlock(seq->lock);
44: 		int64_t result;
45: 		if (seq->cycle) {
46: 			result = seq->counter;
47: 			seq->counter += seq->increment;
48: 			if (result < seq->min_value) {
49: 				result = seq->max_value;
50: 				seq->counter = seq->max_value + seq->increment;
51: 			} else if (result > seq->max_value) {
52: 				result = seq->min_value;
53: 				seq->counter = seq->min_value + seq->increment;
54: 			}
55: 		} else {
56: 			result = seq->counter;
57: 			seq->counter += seq->increment;
58: 			if (result < seq->min_value) {
59: 				throw SequenceException("nextval: reached minimum value of sequence \"%s\" (%lld)", seq->name,
60: 				                        seq->min_value);
61: 			}
62: 			if (result > seq->max_value) {
63: 				throw SequenceException("nextval: reached maximum value of sequence \"%s\" (%lld)", seq->name,
64: 				                        seq->max_value);
65: 			}
66: 		}
67: 		seq->last_value = result;
68: 		seq->usage_count++;
69: 		transaction.sequence_usage[seq] = SequenceValue(seq->usage_count, seq->counter);
70: 		return result;
71: 	}
72: };
73: 
74: struct NextValData {
75: 	NextValData(NextvalBindData &bind_data_p, Transaction &transaction_p)
76: 	    : bind_data(bind_data_p), transaction(transaction_p) {
77: 	}
78: 
79: 	NextvalBindData &bind_data;
80: 	Transaction &transaction;
81: };
82: 
83: template <class OP>
84: static void NextValFunction(DataChunk &args, ExpressionState &state, Vector &result) {
85: 	auto &func_expr = (BoundFunctionExpression &)state.expr;
86: 	auto &info = (NextvalBindData &)*func_expr.bind_info;
87: 	auto &input = args.data[0];
88: 
89: 	auto &transaction = Transaction::GetTransaction(info.context);
90: 	if (info.sequence) {
91: 		// sequence to use is hard coded
92: 		// increment the sequence
93: 		result.SetVectorType(VectorType::FLAT_VECTOR);
94: 		auto result_data = FlatVector::GetData<int64_t>(result);
95: 		for (idx_t i = 0; i < args.size(); i++) {
96: 			// get the next value from the sequence
97: 			result_data[i] = OP::Operation(transaction, info.sequence);
98: 		}
99: 	} else {
100: 		NextValData next_val_input(info, transaction);
101: 		// sequence to use comes from the input
102: 		UnaryExecutor::Execute<string_t, int64_t>(input, result, args.size(), [&](string_t value) {
103: 			auto qname = QualifiedName::Parse(value.GetString());
104: 			// fetch the sequence from the catalog
105: 			auto sequence = Catalog::GetCatalog(info.context)
106: 			                    .GetEntry<SequenceCatalogEntry>(info.context, qname.schema, qname.name);
107: 			// finally get the next value from the sequence
108: 			return OP::Operation(transaction, sequence);
109: 		});
110: 	}
111: }
112: 
113: static unique_ptr<FunctionData> NextValBind(ClientContext &context, ScalarFunction &bound_function,
114:                                             vector<unique_ptr<Expression>> &arguments) {
115: 	SequenceCatalogEntry *sequence = nullptr;
116: 	if (arguments[0]->IsFoldable()) {
117: 		// parameter to nextval function is a foldable constant
118: 		// evaluate the constant and perform the catalog lookup already
119: 		Value seqname = ExpressionExecutor::EvaluateScalar(*arguments[0]);
120: 		if (!seqname.is_null) {
121: 			D_ASSERT(seqname.type().id() == LogicalTypeId::VARCHAR);
122: 			auto qname = QualifiedName::Parse(seqname.str_value);
123: 			sequence = Catalog::GetCatalog(context).GetEntry<SequenceCatalogEntry>(context, qname.schema, qname.name);
124: 		}
125: 	}
126: 	return make_unique<NextvalBindData>(context, sequence);
127: }
128: 
129: static void NextValDependency(BoundFunctionExpression &expr, unordered_set<CatalogEntry *> &dependencies) {
130: 	auto &info = (NextvalBindData &)*expr.bind_info;
131: 	if (info.sequence) {
132: 		dependencies.insert(info.sequence);
133: 	}
134: }
135: 
136: void NextvalFun::RegisterFunction(BuiltinFunctions &set) {
137: 	set.AddFunction(ScalarFunction("nextval", {LogicalType::VARCHAR}, LogicalType::BIGINT,
138: 	                               NextValFunction<NextSequenceValueOperator>, true, NextValBind, NextValDependency));
139: }
140: 
141: void CurrvalFun::RegisterFunction(BuiltinFunctions &set) {
142: 	set.AddFunction(ScalarFunction("currval", {LogicalType::VARCHAR}, LogicalType::BIGINT,
143: 	                               NextValFunction<CurrentSequenceValueOperator>, true, NextValBind,
144: 	                               NextValDependency));
145: }
146: 
147: } // namespace duckdb
[end of src/function/scalar/sequence/nextval.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: