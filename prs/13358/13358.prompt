You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
python UDF: NULLs intercepted for scalars but not columnar args
### What happens?

According to https://duckdb.org/docs/api/python/function.html#null-handling, if you pass a NULL into a python UDF, duckdb will short-circuit and immediately resolve to NULL, and won't ever call the python with None.

This short-circuiting appears to happen when the input is a scalar, but doesn't when it is a column.

PS I think this short-circuiting (with a configurable override) is fantastic UX

### To Reproduce

```python
import duckdb
from duckdb.typing import INTEGER


def add_one(x):
    return x + 1


duckdb.create_function("add_one", add_one, [INTEGER], INTEGER, type="native")
duckdb.sql("SELECT add_one(1), add_one(NULL)").fetchall()
# [(2, None)]
duckdb.sql("SELECT add_one(x) FROM (SELECT UNNEST([1, NULL]) as x)").fetchall()
# Invalid Input Error: Python exception occurred while executing the UDF: TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
```

### OS:

MacM1, MacOS 14.5

### DuckDB Version:

1.0.0

### DuckDB Client:

python

### Full Name:

Nick Crews

### Affiliation:

Ship Creek Group

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://www.duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/common/vector_operations/vector_copy.cpp]
1: //===--------------------------------------------------------------------===//
2: // copy.cpp
3: // Description: This file contains the implementation of the different copy
4: // functions
5: //===--------------------------------------------------------------------===//
6: 
7: #include "duckdb/common/exception.hpp"
8: #include "duckdb/common/types/null_value.hpp"
9: #include "duckdb/common/uhugeint.hpp"
10: #include "duckdb/storage/segment/uncompressed.hpp"
11: #include "duckdb/common/vector_operations/vector_operations.hpp"
12: 
13: namespace duckdb {
14: 
15: template <class T>
16: static void TemplatedCopy(const Vector &source, const SelectionVector &sel, Vector &target, idx_t source_offset,
17:                           idx_t target_offset, idx_t copy_count) {
18: 	auto ldata = FlatVector::GetData<T>(source);
19: 	auto tdata = FlatVector::GetData<T>(target);
20: 	for (idx_t i = 0; i < copy_count; i++) {
21: 		auto source_idx = sel.get_index(source_offset + i);
22: 		tdata[target_offset + i] = ldata[source_idx];
23: 	}
24: }
25: 
26: static const ValidityMask &ExtractValidityMask(const Vector &v) {
27: 	switch (v.GetVectorType()) {
28: 	case VectorType::FLAT_VECTOR:
29: 		return FlatVector::Validity(v);
30: 	case VectorType::FSST_VECTOR:
31: 		return FSSTVector::Validity(v);
32: 	default:
33: 		throw InternalException("Unsupported vector type in vector copy");
34: 	}
35: }
36: 
37: void VectorOperations::Copy(const Vector &source_p, Vector &target, const SelectionVector &sel_p, idx_t source_count,
38:                             idx_t source_offset, idx_t target_offset) {
39: 	D_ASSERT(source_offset <= source_count);
40: 	D_ASSERT(source_p.GetType() == target.GetType());
41: 	idx_t copy_count = source_count - source_offset;
42: 
43: 	SelectionVector owned_sel;
44: 	const SelectionVector *sel = &sel_p;
45: 
46: 	const Vector *source = &source_p;
47: 	bool finished = false;
48: 	while (!finished) {
49: 		switch (source->GetVectorType()) {
50: 		case VectorType::DICTIONARY_VECTOR: {
51: 			// dictionary vector: merge selection vectors
52: 			auto &child = DictionaryVector::Child(*source);
53: 			auto &dict_sel = DictionaryVector::SelVector(*source);
54: 			// merge the selection vectors and verify the child
55: 			auto new_buffer = dict_sel.Slice(*sel, source_count);
56: 			owned_sel.Initialize(new_buffer);
57: 			sel = &owned_sel;
58: 			source = &child;
59: 			break;
60: 		}
61: 		case VectorType::SEQUENCE_VECTOR: {
62: 			int64_t start, increment;
63: 			Vector seq(source->GetType());
64: 			SequenceVector::GetSequence(*source, start, increment);
65: 			VectorOperations::GenerateSequence(seq, source_count, *sel, start, increment);
66: 			VectorOperations::Copy(seq, target, *sel, source_count, source_offset, target_offset);
67: 			return;
68: 		}
69: 		case VectorType::CONSTANT_VECTOR:
70: 			sel = ConstantVector::ZeroSelectionVector(copy_count, owned_sel);
71: 			finished = true;
72: 			break;
73: 		case VectorType::FSST_VECTOR:
74: 			finished = true;
75: 			break;
76: 		case VectorType::FLAT_VECTOR:
77: 			finished = true;
78: 			break;
79: 		default:
80: 			throw NotImplementedException("FIXME unimplemented vector type for VectorOperations::Copy");
81: 		}
82: 	}
83: 
84: 	if (copy_count == 0) {
85: 		return;
86: 	}
87: 
88: 	// Allow copying of a single value to constant vectors
89: 	const auto target_vector_type = target.GetVectorType();
90: 	if (copy_count == 1 && target_vector_type == VectorType::CONSTANT_VECTOR) {
91: 		target_offset = 0;
92: 		target.SetVectorType(VectorType::FLAT_VECTOR);
93: 	}
94: 	D_ASSERT(target.GetVectorType() == VectorType::FLAT_VECTOR);
95: 
96: 	// first copy the nullmask
97: 	auto &tmask = FlatVector::Validity(target);
98: 	if (source->GetVectorType() == VectorType::CONSTANT_VECTOR) {
99: 		const bool valid = !ConstantVector::IsNull(*source);
100: 		for (idx_t i = 0; i < copy_count; i++) {
101: 			tmask.Set(target_offset + i, valid);
102: 		}
103: 	} else {
104: 		auto &smask = ExtractValidityMask(*source);
105: 		tmask.CopySel(smask, *sel, source_offset, target_offset, copy_count);
106: 	}
107: 
108: 	D_ASSERT(sel);
109: 
110: 	// For FSST Vectors we decompress instead of copying.
111: 	if (source->GetVectorType() == VectorType::FSST_VECTOR) {
112: 		FSSTVector::DecompressVector(*source, target, source_offset, target_offset, copy_count, sel);
113: 		return;
114: 	}
115: 
116: 	// now copy over the data
117: 	switch (source->GetType().InternalType()) {
118: 	case PhysicalType::BOOL:
119: 	case PhysicalType::INT8:
120: 		TemplatedCopy<int8_t>(*source, *sel, target, source_offset, target_offset, copy_count);
121: 		break;
122: 	case PhysicalType::INT16:
123: 		TemplatedCopy<int16_t>(*source, *sel, target, source_offset, target_offset, copy_count);
124: 		break;
125: 	case PhysicalType::INT32:
126: 		TemplatedCopy<int32_t>(*source, *sel, target, source_offset, target_offset, copy_count);
127: 		break;
128: 	case PhysicalType::INT64:
129: 		TemplatedCopy<int64_t>(*source, *sel, target, source_offset, target_offset, copy_count);
130: 		break;
131: 	case PhysicalType::UINT8:
132: 		TemplatedCopy<uint8_t>(*source, *sel, target, source_offset, target_offset, copy_count);
133: 		break;
134: 	case PhysicalType::UINT16:
135: 		TemplatedCopy<uint16_t>(*source, *sel, target, source_offset, target_offset, copy_count);
136: 		break;
137: 	case PhysicalType::UINT32:
138: 		TemplatedCopy<uint32_t>(*source, *sel, target, source_offset, target_offset, copy_count);
139: 		break;
140: 	case PhysicalType::UINT64:
141: 		TemplatedCopy<uint64_t>(*source, *sel, target, source_offset, target_offset, copy_count);
142: 		break;
143: 	case PhysicalType::INT128:
144: 		TemplatedCopy<hugeint_t>(*source, *sel, target, source_offset, target_offset, copy_count);
145: 		break;
146: 	case PhysicalType::UINT128:
147: 		TemplatedCopy<uhugeint_t>(*source, *sel, target, source_offset, target_offset, copy_count);
148: 		break;
149: 	case PhysicalType::FLOAT:
150: 		TemplatedCopy<float>(*source, *sel, target, source_offset, target_offset, copy_count);
151: 		break;
152: 	case PhysicalType::DOUBLE:
153: 		TemplatedCopy<double>(*source, *sel, target, source_offset, target_offset, copy_count);
154: 		break;
155: 	case PhysicalType::INTERVAL:
156: 		TemplatedCopy<interval_t>(*source, *sel, target, source_offset, target_offset, copy_count);
157: 		break;
158: 	case PhysicalType::VARCHAR: {
159: 		auto ldata = FlatVector::GetData<string_t>(*source);
160: 		auto tdata = FlatVector::GetData<string_t>(target);
161: 		for (idx_t i = 0; i < copy_count; i++) {
162: 			auto source_idx = sel->get_index(source_offset + i);
163: 			auto target_idx = target_offset + i;
164: 			if (tmask.RowIsValid(target_idx)) {
165: 				tdata[target_idx] = StringVector::AddStringOrBlob(target, ldata[source_idx]);
166: 			}
167: 		}
168: 		break;
169: 	}
170: 	case PhysicalType::STRUCT: {
171: 		auto &source_children = StructVector::GetEntries(*source);
172: 		auto &target_children = StructVector::GetEntries(target);
173: 		D_ASSERT(source_children.size() == target_children.size());
174: 		for (idx_t i = 0; i < source_children.size(); i++) {
175: 			VectorOperations::Copy(*source_children[i], *target_children[i], sel_p, source_count, source_offset,
176: 			                       target_offset);
177: 		}
178: 		break;
179: 	}
180: 	case PhysicalType::ARRAY: {
181: 		D_ASSERT(target.GetType().InternalType() == PhysicalType::ARRAY);
182: 		D_ASSERT(ArrayType::GetSize(source->GetType()) == ArrayType::GetSize(target.GetType()));
183: 
184: 		auto &source_child = ArrayVector::GetEntry(*source);
185: 		auto &target_child = ArrayVector::GetEntry(target);
186: 		auto array_size = ArrayType::GetSize(source->GetType());
187: 
188: 		// Create a selection vector for the child elements
189: 		SelectionVector child_sel(source_count * array_size);
190: 		for (idx_t i = 0; i < copy_count; i++) {
191: 			auto source_idx = sel->get_index(source_offset + i);
192: 			for (idx_t j = 0; j < array_size; j++) {
193: 				child_sel.set_index((source_offset * array_size) + (i * array_size + j), source_idx * array_size + j);
194: 			}
195: 		}
196: 		VectorOperations::Copy(source_child, target_child, child_sel, source_count * array_size,
197: 		                       source_offset * array_size, target_offset * array_size);
198: 		break;
199: 	}
200: 	case PhysicalType::LIST: {
201: 		D_ASSERT(target.GetType().InternalType() == PhysicalType::LIST);
202: 
203: 		auto &source_child = ListVector::GetEntry(*source);
204: 		auto sdata = FlatVector::GetData<list_entry_t>(*source);
205: 		auto tdata = FlatVector::GetData<list_entry_t>(target);
206: 
207: 		if (target_vector_type == VectorType::CONSTANT_VECTOR) {
208: 			// If we are only writing one value, then the copied values (if any) are contiguous
209: 			// and we can just Append from the offset position
210: 			if (!tmask.RowIsValid(target_offset)) {
211: 				break;
212: 			}
213: 			auto source_idx = sel->get_index(source_offset);
214: 			auto &source_entry = sdata[source_idx];
215: 			const idx_t source_child_size = source_entry.length + source_entry.offset;
216: 
217: 			//! overwrite constant target vectors.
218: 			ListVector::SetListSize(target, 0);
219: 			ListVector::Append(target, source_child, source_child_size, source_entry.offset);
220: 
221: 			auto &target_entry = tdata[target_offset];
222: 			target_entry.length = source_entry.length;
223: 			target_entry.offset = 0;
224: 		} else {
225: 			//! if the source has list offsets, we need to append them to the target
226: 			//! build a selection vector for the copied child elements
227: 			vector<sel_t> child_rows;
228: 			for (idx_t i = 0; i < copy_count; ++i) {
229: 				if (tmask.RowIsValid(target_offset + i)) {
230: 					auto source_idx = sel->get_index(source_offset + i);
231: 					auto &source_entry = sdata[source_idx];
232: 					for (idx_t j = 0; j < source_entry.length; ++j) {
233: 						child_rows.emplace_back(source_entry.offset + j);
234: 					}
235: 				}
236: 			}
237: 			idx_t source_child_size = child_rows.size();
238: 			SelectionVector child_sel(child_rows.data());
239: 
240: 			idx_t old_target_child_len = ListVector::GetListSize(target);
241: 
242: 			//! append to list itself
243: 			ListVector::Append(target, source_child, child_sel, source_child_size);
244: 
245: 			//! now write the list offsets
246: 			for (idx_t i = 0; i < copy_count; i++) {
247: 				auto source_idx = sel->get_index(source_offset + i);
248: 				auto &source_entry = sdata[source_idx];
249: 				auto &target_entry = tdata[target_offset + i];
250: 
251: 				target_entry.length = source_entry.length;
252: 				target_entry.offset = old_target_child_len;
253: 				if (tmask.RowIsValid(target_offset + i)) {
254: 					old_target_child_len += target_entry.length;
255: 				}
256: 			}
257: 		}
258: 		break;
259: 	}
260: 	default:
261: 		throw NotImplementedException("Unimplemented type '%s' for copy!",
262: 		                              TypeIdToString(source->GetType().InternalType()));
263: 	}
264: 
265: 	if (target_vector_type != VectorType::FLAT_VECTOR) {
266: 		target.SetVectorType(target_vector_type);
267: 	}
268: }
269: 
270: void VectorOperations::Copy(const Vector &source, Vector &target, idx_t source_count, idx_t source_offset,
271:                             idx_t target_offset) {
272: 	VectorOperations::Copy(source, target, *FlatVector::IncrementalSelectionVector(), source_count, source_offset,
273: 	                       target_offset);
274: }
275: 
276: } // namespace duckdb
[end of src/common/vector_operations/vector_copy.cpp]
[start of src/include/duckdb/common/vector_operations/vector_operations.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/common/vector_operations/vector_operations.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/types/data_chunk.hpp"
12: #include "duckdb/common/types/vector.hpp"
13: 
14: #include <functional>
15: 
16: namespace duckdb {
17: class CastFunctionSet;
18: struct GetCastFunctionInput;
19: 
20: // VectorOperations contains a set of operations that operate on sets of
21: // vectors. In general, the operators must all have the same type, otherwise an
22: // exception is thrown. Note that the functions underneath use restrict
23: // pointers, hence the data that the vectors point to (and hence the vector
24: // themselves) should not be equal! For example, if you call the function Add(A,
25: // B, A) then ASSERT_RESTRICT will be triggered. Instead call AddInPlace(A, B)
26: // or Add(A, B, C)
27: struct VectorOperations {
28: 	//===--------------------------------------------------------------------===//
29: 	// In-Place Operators
30: 	//===--------------------------------------------------------------------===//
31: 	//! left += delta
32: 	static void AddInPlace(Vector &left, int64_t delta, idx_t count);
33: 
34: 	//===--------------------------------------------------------------------===//
35: 	// NULL Operators
36: 	//===--------------------------------------------------------------------===//
37: 	//! result = IS NOT NULL(input)
38: 	static void IsNotNull(Vector &arg, Vector &result, idx_t count);
39: 	//! result = IS NULL (input)
40: 	static void IsNull(Vector &input, Vector &result, idx_t count);
41: 	// Returns whether or not arg vector has a NULL value
42: 	static bool HasNull(Vector &input, idx_t count);
43: 	static bool HasNotNull(Vector &input, idx_t count);
44: 	//! Count the number of not-NULL values.
45: 	static idx_t CountNotNull(Vector &input, const idx_t count);
46: 
47: 	//===--------------------------------------------------------------------===//
48: 	// Boolean Operations
49: 	//===--------------------------------------------------------------------===//
50: 	// result = left && right
51: 	static void And(Vector &left, Vector &right, Vector &result, idx_t count);
52: 	// result = left || right
53: 	static void Or(Vector &left, Vector &right, Vector &result, idx_t count);
54: 	// result = NOT(left)
55: 	static void Not(Vector &left, Vector &result, idx_t count);
56: 
57: 	//===--------------------------------------------------------------------===//
58: 	// Comparison Operations
59: 	//===--------------------------------------------------------------------===//
60: 	// result = left == right
61: 	static void Equals(Vector &left, Vector &right, Vector &result, idx_t count);
62: 	// result = left != right
63: 	static void NotEquals(Vector &left, Vector &right, Vector &result, idx_t count);
64: 	// result = left > right
65: 	static void GreaterThan(Vector &left, Vector &right, Vector &result, idx_t count);
66: 	// result = left >= right
67: 	static void GreaterThanEquals(Vector &left, Vector &right, Vector &result, idx_t count);
68: 	// result = left < right
69: 	static void LessThan(Vector &left, Vector &right, Vector &result, idx_t count);
70: 	// result = left <= right
71: 	static void LessThanEquals(Vector &left, Vector &right, Vector &result, idx_t count);
72: 
73: 	// result = A != B with nulls being equal
74: 	static void DistinctFrom(Vector &left, Vector &right, Vector &result, idx_t count);
75: 	// result := A == B with nulls being equal
76: 	static void NotDistinctFrom(Vector &left, Vector &right, Vector &result, idx_t count);
77: 	// result := A > B with nulls being maximal
78: 	static void DistinctGreaterThan(Vector &left, Vector &right, Vector &result, idx_t count);
79: 	// result := A >= B with nulls being maximal
80: 	static void DistinctGreaterThanEquals(Vector &left, Vector &right, Vector &result, idx_t count);
81: 	// result := A < B with nulls being maximal
82: 	static void DistinctLessThan(Vector &left, Vector &right, Vector &result, idx_t count);
83: 	// result := A <= B with nulls being maximal
84: 	static void DistinctLessThanEquals(Vector &left, Vector &right, Vector &result, idx_t count);
85: 
86: 	//===--------------------------------------------------------------------===//
87: 	// Select Comparisons
88: 	//===--------------------------------------------------------------------===//
89: 	static idx_t Equals(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
90: 	                    optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
91: 	                    optional_ptr<ValidityMask> null_mask = nullptr);
92: 	static idx_t NotEquals(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
93: 	                       optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
94: 	                       optional_ptr<ValidityMask> null_mask = nullptr);
95: 	static idx_t GreaterThan(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
96: 	                         optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
97: 	                         optional_ptr<ValidityMask> null_mask = nullptr);
98: 	static idx_t GreaterThanEquals(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
99: 	                               optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
100: 	                               optional_ptr<ValidityMask> null_mask = nullptr);
101: 	static idx_t LessThan(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
102: 	                      optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
103: 	                      optional_ptr<ValidityMask> null_mask = nullptr);
104: 	static idx_t LessThanEquals(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
105: 	                            optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
106: 	                            optional_ptr<ValidityMask> null_mask = nullptr);
107: 
108: 	// true := A != B with nulls being equal
109: 	static idx_t DistinctFrom(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
110: 	                          optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel);
111: 	// true := A == B with nulls being equal
112: 	static idx_t NotDistinctFrom(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
113: 	                             optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel);
114: 	// true := A > B with nulls being maximal
115: 	static idx_t DistinctGreaterThan(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
116: 	                                 optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
117: 	                                 optional_ptr<ValidityMask> null_mask = nullptr);
118: 	// true := A >= B with nulls being maximal
119: 	static idx_t DistinctGreaterThanEquals(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel,
120: 	                                       idx_t count, optional_ptr<SelectionVector> true_sel,
121: 	                                       optional_ptr<SelectionVector> false_sel,
122: 	                                       optional_ptr<ValidityMask> null_mask = nullptr);
123: 	// true := A < B with nulls being maximal
124: 	static idx_t DistinctLessThan(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
125: 	                              optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
126: 	                              optional_ptr<ValidityMask> null_mask = nullptr);
127: 	// true := A <= B with nulls being maximal
128: 	static idx_t DistinctLessThanEquals(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel,
129: 	                                    idx_t count, optional_ptr<SelectionVector> true_sel,
130: 	                                    optional_ptr<SelectionVector> false_sel,
131: 	                                    optional_ptr<ValidityMask> null_mask = nullptr);
132: 
133: 	// true := A > B with nulls being minimal
134: 	static idx_t DistinctGreaterThanNullsFirst(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel,
135: 	                                           idx_t count, optional_ptr<SelectionVector> true_sel,
136: 	                                           optional_ptr<SelectionVector> false_sel,
137: 	                                           optional_ptr<ValidityMask> null_mask = nullptr);
138: 	// true := A < B with nulls being minimal
139: 	static idx_t DistinctLessThanNullsFirst(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel,
140: 	                                        idx_t count, optional_ptr<SelectionVector> true_sel,
141: 	                                        optional_ptr<SelectionVector> false_sel,
142: 	                                        optional_ptr<ValidityMask> null_mask = nullptr);
143: 
144: 	//===--------------------------------------------------------------------===//
145: 	// Nested Comparisons
146: 	//===--------------------------------------------------------------------===//
147: 	// true := A != B with nulls being equal
148: 	static idx_t NestedNotEquals(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
149: 	                             optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
150: 	                             optional_ptr<ValidityMask> null_mask = nullptr);
151: 	// true := A == B with nulls being equal
152: 	static idx_t NestedEquals(Vector &left, Vector &right, optional_ptr<const SelectionVector> sel, idx_t count,
153: 	                          optional_ptr<SelectionVector> true_sel, optional_ptr<SelectionVector> false_sel,
154: 	                          optional_ptr<ValidityMask> null_mask = nullptr);
155: 
156: 	//===--------------------------------------------------------------------===//
157: 	// Hash functions
158: 	//===--------------------------------------------------------------------===//
159: 	// hashes = HASH(input)
160: 	static void Hash(Vector &input, Vector &hashes, idx_t count);
161: 	static void Hash(Vector &input, Vector &hashes, const SelectionVector &rsel, idx_t count);
162: 	// hashes ^= HASH(input)
163: 	static void CombineHash(Vector &hashes, Vector &input, idx_t count);
164: 	static void CombineHash(Vector &hashes, Vector &input, const SelectionVector &rsel, idx_t count);
165: 
166: 	//===--------------------------------------------------------------------===//
167: 	// Generate functions
168: 	//===--------------------------------------------------------------------===//
169: 	static void GenerateSequence(Vector &result, idx_t count, int64_t start = 0, int64_t increment = 1);
170: 	static void GenerateSequence(Vector &result, idx_t count, const SelectionVector &sel, int64_t start = 0,
171: 	                             int64_t increment = 1);
172: 	//===--------------------------------------------------------------------===//
173: 	// Helpers
174: 	//===--------------------------------------------------------------------===//
175: 	//! Cast the data from the source type to the target type. Any elements that could not be converted are turned into
176: 	//! NULLs. If any elements cannot be converted, returns false and fills in the error_message. If no error message is
177: 	//! provided, an exception is thrown instead.
178: 	DUCKDB_API static bool TryCast(CastFunctionSet &set, GetCastFunctionInput &input, Vector &source, Vector &result,
179: 	                               idx_t count, string *error_message, bool strict = false,
180: 	                               const bool nullify_parent = false);
181: 	DUCKDB_API static bool DefaultTryCast(Vector &source, Vector &result, idx_t count, string *error_message,
182: 	                                      bool strict = false);
183: 	DUCKDB_API static bool TryCast(ClientContext &context, Vector &source, Vector &result, idx_t count,
184: 	                               string *error_message, bool strict = false, const bool nullify_parent = false);
185: 	//! Cast the data from the source type to the target type. Throws an exception if the cast fails.
186: 	DUCKDB_API static void Cast(ClientContext &context, Vector &source, Vector &result, idx_t count,
187: 	                            bool strict = false);
188: 	DUCKDB_API static void DefaultCast(Vector &source, Vector &result, idx_t count, bool strict = false);
189: 
190: 	// Copy the data of <source> to the target vector
191: 	static void Copy(const Vector &source, Vector &target, idx_t source_count, idx_t source_offset,
192: 	                 idx_t target_offset);
193: 	static void Copy(const Vector &source, Vector &target, const SelectionVector &sel, idx_t source_count,
194: 	                 idx_t source_offset, idx_t target_offset);
195: 
196: 	// Copy the data of <source> to the target location, setting null values to
197: 	// NullValue<T>. Used to store data without separate NULL mask.
198: 	static void WriteToStorage(Vector &source, idx_t count, data_ptr_t target);
199: 	// Reads the data of <source> to the target vector, setting the nullmask
200: 	// for any NullValue<T> of source. Used to go back from storage to a proper vector
201: 	static void ReadFromStorage(data_ptr_t source, idx_t count, Vector &result);
202: };
203: } // namespace duckdb
[end of src/include/duckdb/common/vector_operations/vector_operations.hpp]
[start of tools/pythonpkg/src/include/duckdb_python/pybind11/pybind_wrapper.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb_python/pybind11//pybind_wrapper.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include <pybind11/pybind11.h>
12: #include <pybind11/numpy.h>
13: #include <pybind11/stl.h>
14: #include "duckdb/common/vector.hpp"
15: #include "duckdb/common/assert.hpp"
16: #include "duckdb/common/helper.hpp"
17: #include <memory>
18: 
19: PYBIND11_DECLARE_HOLDER_TYPE(T, duckdb::unique_ptr<T>)
20: PYBIND11_DECLARE_HOLDER_TYPE(T, duckdb::shared_ptr<T>)
21: 
22: namespace pybind11 {
23: 
24: namespace detail {
25: 
26: template <typename Type, bool SAFE>
27: struct type_caster<duckdb::vector<Type, SAFE>> : list_caster<duckdb::vector<Type, SAFE>, Type> {};
28: } // namespace detail
29: 
30: bool gil_check();
31: void gil_assert();
32: bool is_list_like(handle obj);
33: bool is_dict_like(handle obj);
34: 
35: } // namespace pybind11
36: 
37: namespace duckdb {
38: #ifdef __GNUG__
39: #define PYBIND11_NAMESPACE pybind11 __attribute__((visibility("hidden")))
40: #else
41: #define PYBIND11_NAMESPACE pybind11
42: #endif
43: namespace py {
44: 
45: // We include everything from pybind11
46: using namespace pybind11;
47: 
48: // But we have the option to override certain functions
49: template <typename T, detail::enable_if_t<std::is_base_of<object, T>::value, int> = 0>
50: bool isinstance(handle obj) {
51: 	return T::check_(obj);
52: }
53: 
54: template <typename T, detail::enable_if_t<!std::is_base_of<object, T>::value, int> = 0>
55: bool isinstance(handle obj) {
56: 	return detail::isinstance_generic(obj, typeid(T));
57: }
58: 
59: template <>
60: inline bool isinstance<handle>(handle) = delete;
61: template <>
62: inline bool isinstance<object>(handle obj) {
63: 	return obj.ptr() != nullptr;
64: }
65: 
66: inline bool isinstance(handle obj, handle type) {
67: 	if (type.ptr() == nullptr) {
68: 		// The type was not imported, just return false
69: 		return false;
70: 	}
71: 	const auto result = PyObject_IsInstance(obj.ptr(), type.ptr());
72: 	if (result == -1) {
73: 		throw error_already_set();
74: 	}
75: 	return result != 0;
76: }
77: 
78: template <class T>
79: bool try_cast(const handle &object, T &result) {
80: 	try {
81: 		result = cast<T>(object);
82: 	} catch (cast_error &) {
83: 		return false;
84: 	}
85: 	return true;
86: }
87: 
88: } // namespace py
89: 
90: template <class T, typename... ARGS>
91: void DefineMethod(std::vector<const char *> aliases, T &mod, ARGS &&... args) {
92: 	for (auto &alias : aliases) {
93: 		mod.def(alias, args...);
94: 	}
95: }
96: 
97: } // namespace duckdb
[end of tools/pythonpkg/src/include/duckdb_python/pybind11/pybind_wrapper.hpp]
[start of tools/pythonpkg/src/python_udf.cpp]
1: #include "duckdb/main/query_result.hpp"
2: #include "duckdb_python/pybind11/pybind_wrapper.hpp"
3: #include "duckdb/function/scalar_function.hpp"
4: #include "duckdb_python/pytype.hpp"
5: #include "duckdb_python/pyconnection/pyconnection.hpp"
6: #include "duckdb_python/pandas/pandas_scan.hpp"
7: #include "duckdb/common/arrow/arrow.hpp"
8: #include "duckdb/common/arrow/arrow_converter.hpp"
9: #include "duckdb/common/arrow/arrow_wrapper.hpp"
10: #include "duckdb/common/arrow/arrow_appender.hpp"
11: #include "duckdb/common/arrow/result_arrow_wrapper.hpp"
12: #include "duckdb_python/arrow/arrow_array_stream.hpp"
13: #include "duckdb/function/table/arrow.hpp"
14: #include "duckdb/function/function.hpp"
15: #include "duckdb_python/numpy/numpy_scan.hpp"
16: #include "duckdb_python/arrow/arrow_export_utils.hpp"
17: #include "duckdb/common/types/arrow_aux_data.hpp"
18: #include "duckdb/parser/tableref/table_function_ref.hpp"
19: 
20: namespace duckdb {
21: 
22: static py::list ConvertToSingleBatch(vector<LogicalType> &types, vector<string> &names, DataChunk &input,
23:                                      const ClientProperties &options) {
24: 	ArrowSchema schema;
25: 	ArrowConverter::ToArrowSchema(&schema, types, names, options);
26: 
27: 	py::list single_batch;
28: 	ArrowAppender appender(types, STANDARD_VECTOR_SIZE, options);
29: 	appender.Append(input, 0, input.size(), input.size());
30: 	auto array = appender.Finalize();
31: 	TransformDuckToArrowChunk(schema, array, single_batch);
32: 	return single_batch;
33: }
34: 
35: static py::object ConvertDataChunkToPyArrowTable(DataChunk &input, const ClientProperties &options) {
36: 	auto types = input.GetTypes();
37: 	vector<string> names;
38: 	names.reserve(types.size());
39: 	for (idx_t i = 0; i < types.size(); i++) {
40: 		names.push_back(StringUtil::Format("c%d", i));
41: 	}
42: 
43: 	return pyarrow::ToArrowTable(types, names, ConvertToSingleBatch(types, names, input, options), options);
44: }
45: 
46: static void ConvertPyArrowToDataChunk(const py::object &table, Vector &out, ClientContext &context, idx_t count) {
47: 
48: 	// Create the stream factory from the Table object
49: 	auto stream_factory = make_uniq<PythonTableArrowArrayStreamFactory>(table.ptr(), context.GetClientProperties());
50: 	auto stream_factory_produce = PythonTableArrowArrayStreamFactory::Produce;
51: 	auto stream_factory_get_schema = PythonTableArrowArrayStreamFactory::GetSchema;
52: 
53: 	// Get the functions we need
54: 	auto function = ArrowTableFunction::ArrowScanFunction;
55: 	auto bind = ArrowTableFunction::ArrowScanBind;
56: 	auto init_global = ArrowTableFunction::ArrowScanInitGlobal;
57: 	auto init_local = ArrowTableFunction::ArrowScanInitLocalInternal;
58: 
59: 	// Prepare the inputs for the bind
60: 	vector<Value> children;
61: 	children.reserve(3);
62: 	children.push_back(Value::POINTER(CastPointerToValue(stream_factory.get())));
63: 	children.push_back(Value::POINTER(CastPointerToValue(stream_factory_produce)));
64: 	children.push_back(Value::POINTER(CastPointerToValue(stream_factory_get_schema)));
65: 	named_parameter_map_t named_params;
66: 	vector<LogicalType> input_types;
67: 	vector<string> input_names;
68: 
69: 	TableFunctionRef empty;
70: 	TableFunction dummy_table_function;
71: 	dummy_table_function.name = "ConvertPyArrowToDataChunk";
72: 	TableFunctionBindInput bind_input(children, named_params, input_types, input_names, nullptr, nullptr,
73: 	                                  dummy_table_function, empty);
74: 	vector<LogicalType> return_types;
75: 	vector<string> return_names;
76: 
77: 	auto bind_data = bind(context, bind_input, return_types, return_names);
78: 
79: 	if (return_types.size() != 1) {
80: 		throw InvalidInputException(
81: 		    "The returned table from a pyarrow scalar udf should only contain one column, found %d",
82: 		    return_types.size());
83: 	}
84: 	// if (return_types[0] != out.GetType()) {
85: 	//	throw InvalidInputException("The type of the returned array (%s) does not match the expected type: '%s'", )
86: 	//}
87: 
88: 	DataChunk result;
89: 	// Reserve for STANDARD_VECTOR_SIZE instead of count, in case the returned table contains too many tuples
90: 	result.Initialize(context, return_types, STANDARD_VECTOR_SIZE);
91: 
92: 	vector<column_t> column_ids = {0};
93: 	TableFunctionInitInput input(bind_data.get(), column_ids, vector<idx_t>(), nullptr);
94: 	auto global_state = init_global(context, input);
95: 	auto local_state = init_local(context, input, global_state.get());
96: 
97: 	TableFunctionInput function_input(bind_data.get(), local_state.get(), global_state.get());
98: 	function(context, function_input, result);
99: 	if (result.size() != count) {
100: 		throw InvalidInputException("Returned pyarrow table should have %d tuples, found %d", count, result.size());
101: 	}
102: 
103: 	VectorOperations::Cast(context, result.data[0], out, count);
104: }
105: 
106: static scalar_function_t CreateVectorizedFunction(PyObject *function, PythonExceptionHandling exception_handling) {
107: 	// Through the capture of the lambda, we have access to the function pointer
108: 	// We just need to make sure that it doesn't get garbage collected
109: 	scalar_function_t func = [=](DataChunk &input, ExpressionState &state, Vector &result) -> void {
110: 		py::gil_scoped_acquire gil;
111: 
112: 		// owning references
113: 		py::object python_object;
114: 		// Convert the input datachunk to pyarrow
115: 		ClientProperties options;
116: 
117: 		if (state.HasContext()) {
118: 			auto &context = state.GetContext();
119: 			options = context.GetClientProperties();
120: 		}
121: 
122: 		auto pyarrow_table = ConvertDataChunkToPyArrowTable(input, options);
123: 		py::tuple column_list = pyarrow_table.attr("columns");
124: 
125: 		auto count = input.size();
126: 
127: 		// Call the function
128: 		auto ret = PyObject_CallObject(function, column_list.ptr());
129: 		if (ret == nullptr && PyErr_Occurred()) {
130: 			if (exception_handling == PythonExceptionHandling::FORWARD_ERROR) {
131: 				auto exception = py::error_already_set();
132: 				throw InvalidInputException("Python exception occurred while executing the UDF: %s", exception.what());
133: 			} else if (exception_handling == PythonExceptionHandling::RETURN_NULL) {
134: 				PyErr_Clear();
135: 				python_object = py::module_::import("pyarrow").attr("nulls")(count);
136: 			} else {
137: 				throw NotImplementedException("Exception handling type not implemented");
138: 			}
139: 		} else {
140: 			python_object = py::reinterpret_steal<py::object>(ret);
141: 		}
142: 		if (!py::isinstance(python_object, py::module_::import("pyarrow").attr("lib").attr("Table"))) {
143: 			// Try to convert into a table
144: 			py::list single_array(1);
145: 			py::list single_name(1);
146: 
147: 			single_array[0] = python_object;
148: 			single_name[0] = "c0";
149: 			try {
150: 				python_object = py::module_::import("pyarrow").attr("lib").attr("Table").attr("from_arrays")(
151: 				    single_array, py::arg("names") = single_name);
152: 			} catch (py::error_already_set &) {
153: 				throw InvalidInputException("Could not convert the result into an Arrow Table");
154: 			}
155: 		}
156: 		// Convert the pyarrow result back to a DuckDB datachunk
157: 		ConvertPyArrowToDataChunk(python_object, result, state.GetContext(), count);
158: 
159: 		if (input.size() == 1) {
160: 			result.SetVectorType(VectorType::CONSTANT_VECTOR);
161: 		}
162: 	};
163: 	return func;
164: }
165: 
166: static scalar_function_t CreateNativeFunction(PyObject *function, PythonExceptionHandling exception_handling,
167:                                               const ClientProperties &client_properties) {
168: 	// Through the capture of the lambda, we have access to the function pointer
169: 	// We just need to make sure that it doesn't get garbage collected
170: 	scalar_function_t func = [=](DataChunk &input, ExpressionState &state, Vector &result) -> void { // NOLINT
171: 		py::gil_scoped_acquire gil;
172: 
173: 		// owning references
174: 		vector<py::object> python_objects;
175: 		vector<PyObject *> python_results;
176: 		python_results.resize(input.size());
177: 		for (idx_t row = 0; row < input.size(); row++) {
178: 
179: 			auto bundled_parameters = py::tuple((int)input.ColumnCount());
180: 			for (idx_t i = 0; i < input.ColumnCount(); i++) {
181: 				// Fill the tuple with the arguments for this row
182: 				auto &column = input.data[i];
183: 				auto value = column.GetValue(row);
184: 				bundled_parameters[i] = PythonObject::FromValue(value, column.GetType(), client_properties);
185: 			}
186: 
187: 			// Call the function
188: 			auto ret = PyObject_CallObject(function, bundled_parameters.ptr());
189: 			if (ret == nullptr && PyErr_Occurred()) {
190: 				if (exception_handling == PythonExceptionHandling::FORWARD_ERROR) {
191: 					auto exception = py::error_already_set();
192: 					throw InvalidInputException("Python exception occurred while executing the UDF: %s",
193: 					                            exception.what());
194: 				} else if (exception_handling == PythonExceptionHandling::RETURN_NULL) {
195: 					PyErr_Clear();
196: 					ret = Py_None;
197: 				} else {
198: 					throw NotImplementedException("Exception handling type not implemented");
199: 				}
200: 			}
201: 			python_objects.push_back(py::reinterpret_steal<py::object>(ret));
202: 			python_results[row] = ret;
203: 		}
204: 
205: 		NumpyScan::ScanObjectColumn(python_results.data(), sizeof(PyObject *), input.size(), 0, result);
206: 		if (input.size() == 1) {
207: 			result.SetVectorType(VectorType::CONSTANT_VECTOR);
208: 		}
209: 	};
210: 	return func;
211: }
212: 
213: namespace {
214: 
215: struct ParameterKind {
216: 	enum class Type : uint8_t { POSITIONAL_ONLY, POSITIONAL_OR_KEYWORD, VAR_POSITIONAL, KEYWORD_ONLY, VAR_KEYWORD };
217: 	static ParameterKind::Type FromString(const string &type_str) {
218: 		if (type_str == "POSITIONAL_ONLY") {
219: 			return Type::POSITIONAL_ONLY;
220: 		} else if (type_str == "POSITIONAL_OR_KEYWORD") {
221: 			return Type::POSITIONAL_OR_KEYWORD;
222: 		} else if (type_str == "VAR_POSITIONAL") {
223: 			return Type::VAR_POSITIONAL;
224: 		} else if (type_str == "KEYWORD_ONLY") {
225: 			return Type::KEYWORD_ONLY;
226: 		} else if (type_str == "VAR_KEYWORD") {
227: 			return Type::VAR_KEYWORD;
228: 		} else {
229: 			throw NotImplementedException("ParameterKindType not implemented for '%s'", type_str);
230: 		}
231: 	}
232: };
233: 
234: struct PythonUDFData {
235: public:
236: 	PythonUDFData(const string &name, bool vectorized, FunctionNullHandling null_handling)
237: 	    : name(name), null_handling(null_handling), vectorized(vectorized) {
238: 		return_type = LogicalType::INVALID;
239: 		param_count = DConstants::INVALID_INDEX;
240: 	}
241: 
242: public:
243: 	string name;
244: 	vector<LogicalType> parameters;
245: 	LogicalType return_type;
246: 	LogicalType varargs = LogicalTypeId::INVALID;
247: 	FunctionNullHandling null_handling;
248: 	idx_t param_count;
249: 	bool vectorized;
250: 
251: public:
252: 	void Verify() {
253: 		if (return_type == LogicalType::INVALID) {
254: 			throw InvalidInputException("Could not infer the return type, please set it explicitly");
255: 		}
256: 	}
257: 
258: 	void OverrideReturnType(const shared_ptr<DuckDBPyType> &type) {
259: 		if (!type) {
260: 			return;
261: 		}
262: 		return_type = type->Type();
263: 	}
264: 
265: 	void OverrideParameters(const py::object &parameters_p) {
266: 		if (py::none().is(parameters_p)) {
267: 			return;
268: 		}
269: 		if (!py::isinstance<py::list>(parameters_p)) {
270: 			throw InvalidInputException("Either leave 'parameters' empty, or provide a list of DuckDBPyType objects");
271: 		}
272: 
273: 		auto params = py::list(parameters_p);
274: 		if (params.size() != param_count) {
275: 			throw InvalidInputException("%d types provided, but the provided function takes %d parameters",
276: 			                            params.size(), param_count);
277: 		}
278: 		D_ASSERT(parameters.empty() || parameters.size() == param_count);
279: 		if (parameters.empty()) {
280: 			for (idx_t i = 0; i < param_count; i++) {
281: 				parameters.push_back(LogicalType::ANY);
282: 			}
283: 		}
284: 		idx_t i = 0;
285: 		for (auto &param : params) {
286: 			auto type = py::cast<shared_ptr<DuckDBPyType>>(param);
287: 			parameters[i++] = type->Type();
288: 		}
289: 	}
290: 
291: 	py::object GetSignature(const py::object &udf) {
292: 		const int32_t PYTHON_3_10_HEX = 0x030a00f0;
293: 		auto python_version = PY_VERSION_HEX;
294: 
295: 		auto signature_func = py::module_::import("inspect").attr("signature");
296: 		if (python_version >= PYTHON_3_10_HEX) {
297: 			return signature_func(udf, py::arg("eval_str") = true);
298: 		} else {
299: 			return signature_func(udf);
300: 		}
301: 	}
302: 
303: 	void AnalyzeSignature(const py::object &udf) {
304: 		auto signature = GetSignature(udf);
305: 		auto sig_params = signature.attr("parameters");
306: 		auto return_annotation = signature.attr("return_annotation");
307: 		if (!py::none().is(return_annotation)) {
308: 			shared_ptr<DuckDBPyType> pytype;
309: 			if (py::try_cast<shared_ptr<DuckDBPyType>>(return_annotation, pytype)) {
310: 				return_type = pytype->Type();
311: 			}
312: 		}
313: 		param_count = py::len(sig_params);
314: 		parameters.reserve(param_count);
315: 		auto params = py::dict(sig_params);
316: 		for (auto &item : params) {
317: 			auto &value = item.second;
318: 			shared_ptr<DuckDBPyType> pytype;
319: 			if (py::try_cast<shared_ptr<DuckDBPyType>>(value.attr("annotation"), pytype)) {
320: 				parameters.push_back(pytype->Type());
321: 			} else {
322: 				std::string kind = py::str(value.attr("kind"));
323: 				auto parameter_kind = ParameterKind::FromString(kind);
324: 				if (parameter_kind == ParameterKind::Type::VAR_POSITIONAL) {
325: 					varargs = LogicalType::ANY;
326: 				}
327: 				parameters.push_back(LogicalType::ANY);
328: 			}
329: 		}
330: 	}
331: 
332: 	ScalarFunction GetFunction(const py::function &udf, PythonExceptionHandling exception_handling, bool side_effects,
333: 	                           const ClientProperties &client_properties) {
334: 
335: 		auto &import_cache = *DuckDBPyConnection::ImportCache();
336: 		// Import this module, because importing this from a non-main thread causes a segfault
337: 		(void)import_cache.numpy.core.multiarray();
338: 
339: 		scalar_function_t func;
340: 		if (vectorized) {
341: 			func = CreateVectorizedFunction(udf.ptr(), exception_handling);
342: 		} else {
343: 			func = CreateNativeFunction(udf.ptr(), exception_handling, client_properties);
344: 		}
345: 		FunctionStability function_side_effects =
346: 		    side_effects ? FunctionStability::VOLATILE : FunctionStability::CONSISTENT;
347: 		ScalarFunction scalar_function(name, std::move(parameters), return_type, func, nullptr, nullptr, nullptr,
348: 		                               nullptr, varargs, function_side_effects, null_handling);
349: 		return scalar_function;
350: 	}
351: };
352: 
353: } // namespace
354: 
355: ScalarFunction DuckDBPyConnection::CreateScalarUDF(const string &name, const py::function &udf,
356:                                                    const py::object &parameters,
357:                                                    const shared_ptr<DuckDBPyType> &return_type, bool vectorized,
358:                                                    FunctionNullHandling null_handling,
359:                                                    PythonExceptionHandling exception_handling, bool side_effects) {
360: 	PythonUDFData data(name, vectorized, null_handling);
361: 	auto &connection = con.GetConnection();
362: 
363: 	data.AnalyzeSignature(udf);
364: 	data.OverrideParameters(parameters);
365: 	data.OverrideReturnType(return_type);
366: 	data.Verify();
367: 	return data.GetFunction(udf, exception_handling, side_effects, connection.context->GetClientProperties());
368: }
369: 
370: } // namespace duckdb
[end of tools/pythonpkg/src/python_udf.cpp]
[start of tools/pythonpkg/src/typing/pytype.cpp]
1: #include "duckdb_python/pytype.hpp"
2: #include "duckdb/common/types.hpp"
3: #include "duckdb/common/exception.hpp"
4: #include "duckdb/common/string_util.hpp"
5: #include "duckdb_python/pyconnection/pyconnection.hpp"
6: #include "duckdb/main/connection.hpp"
7: #include "duckdb/common/vector.hpp"
8: 
9: namespace duckdb {
10: 
11: // NOLINTNEXTLINE(readability-identifier-naming)
12: bool PyGenericAlias::check_(const py::handle &object) {
13: 	if (!ModuleIsLoaded<TypesCacheItem>()) {
14: 		return false;
15: 	}
16: 	auto &import_cache = *DuckDBPyConnection::ImportCache();
17: 	return py::isinstance(object, import_cache.types.GenericAlias());
18: }
19: 
20: // NOLINTNEXTLINE(readability-identifier-naming)
21: bool PyUnionType::check_(const py::handle &object) {
22: 	auto types_loaded = ModuleIsLoaded<TypesCacheItem>();
23: 	auto typing_loaded = ModuleIsLoaded<TypingCacheItem>();
24: 
25: 	if (!types_loaded && !typing_loaded) {
26: 		return false;
27: 	}
28: 
29: 	auto &import_cache = *DuckDBPyConnection::ImportCache();
30: 	if (types_loaded && py::isinstance(object, import_cache.types.UnionType())) {
31: 		return true;
32: 	}
33: 	if (typing_loaded && py::isinstance(object, import_cache.typing._UnionGenericAlias())) {
34: 		return true;
35: 	}
36: 	return false;
37: }
38: 
39: DuckDBPyType::DuckDBPyType(LogicalType type) : type(std::move(type)) {
40: }
41: 
42: bool DuckDBPyType::Equals(const shared_ptr<DuckDBPyType> &other) const {
43: 	if (!other) {
44: 		return false;
45: 	}
46: 	return type == other->type;
47: }
48: 
49: bool DuckDBPyType::EqualsString(const string &type_str) const {
50: 	return StringUtil::CIEquals(type.ToString(), type_str);
51: }
52: 
53: shared_ptr<DuckDBPyType> DuckDBPyType::GetAttribute(const string &name) const {
54: 	if (type.id() == LogicalTypeId::STRUCT || type.id() == LogicalTypeId::UNION) {
55: 		auto &children = StructType::GetChildTypes(type);
56: 		for (idx_t i = 0; i < children.size(); i++) {
57: 			auto &child = children[i];
58: 			if (StringUtil::CIEquals(child.first, name)) {
59: 				return make_shared_ptr<DuckDBPyType>(StructType::GetChildType(type, i));
60: 			}
61: 		}
62: 	}
63: 	if (type.id() == LogicalTypeId::LIST && StringUtil::CIEquals(name, "child")) {
64: 		return make_shared_ptr<DuckDBPyType>(ListType::GetChildType(type));
65: 	}
66: 	if (type.id() == LogicalTypeId::MAP) {
67: 		auto is_key = StringUtil::CIEquals(name, "key");
68: 		auto is_value = StringUtil::CIEquals(name, "value");
69: 		if (is_key) {
70: 			return make_shared_ptr<DuckDBPyType>(MapType::KeyType(type));
71: 		} else if (is_value) {
72: 			return make_shared_ptr<DuckDBPyType>(MapType::ValueType(type));
73: 		} else {
74: 			throw py::attribute_error(StringUtil::Format("Tried to get a child from a map by the name of '%s', but "
75: 			                                             "this type only has 'key' and 'value' children",
76: 			                                             name));
77: 		}
78: 	}
79: 	throw py::attribute_error(
80: 	    StringUtil::Format("Tried to get child type by the name of '%s', but this type either isn't nested, "
81: 	                       "or it doesn't have a child by that name",
82: 	                       name));
83: }
84: 
85: static LogicalType FromObject(const py::object &object);
86: 
87: namespace {
88: enum class PythonTypeObject : uint8_t {
89: 	INVALID,   // not convertible to our type
90: 	BASE,      // 'builtin' type objects
91: 	UNION,     // typing.UnionType
92: 	COMPOSITE, // list|dict types
93: 	STRUCT,    // dictionary
94: 	STRING,    // string value
95: };
96: }
97: 
98: static PythonTypeObject GetTypeObjectType(const py::handle &type_object) {
99: 	if (py::isinstance<py::type>(type_object)) {
100: 		return PythonTypeObject::BASE;
101: 	}
102: 	if (py::isinstance<py::str>(type_object)) {
103: 		return PythonTypeObject::STRING;
104: 	}
105: 	if (py::isinstance<PyGenericAlias>(type_object)) {
106: 		return PythonTypeObject::COMPOSITE;
107: 	}
108: 	if (py::isinstance<py::dict>(type_object)) {
109: 		return PythonTypeObject::STRUCT;
110: 	}
111: 	if (py::isinstance<PyUnionType>(type_object)) {
112: 		return PythonTypeObject::UNION;
113: 	}
114: 	return PythonTypeObject::INVALID;
115: }
116: 
117: static LogicalType FromString(const string &type_str, shared_ptr<DuckDBPyConnection> pycon) {
118: 	if (!pycon) {
119: 		pycon = DuckDBPyConnection::DefaultConnection();
120: 	}
121: 	auto &connection = pycon->con.GetConnection();
122: 	return TransformStringToLogicalType(type_str, *connection.context);
123: }
124: 
125: static bool FromNumpyType(const py::object &type, LogicalType &result) {
126: 	// Since this is a type, we have to create an instance from it first.
127: 	auto obj = type();
128: 	// We convert these to string because the underlying physical
129: 	// types of a numpy type aren't consistent on every platform
130: 	string type_str = py::str(obj.attr("dtype"));
131: 	if (type_str == "bool") {
132: 		result = LogicalType::BOOLEAN;
133: 	} else if (type_str == "int8") {
134: 		result = LogicalType::TINYINT;
135: 	} else if (type_str == "uint8") {
136: 		result = LogicalType::UTINYINT;
137: 	} else if (type_str == "int16") {
138: 		result = LogicalType::SMALLINT;
139: 	} else if (type_str == "uint16") {
140: 		result = LogicalType::USMALLINT;
141: 	} else if (type_str == "int32") {
142: 		result = LogicalType::INTEGER;
143: 	} else if (type_str == "uint32") {
144: 		result = LogicalType::UINTEGER;
145: 	} else if (type_str == "int64") {
146: 		result = LogicalType::BIGINT;
147: 	} else if (type_str == "uint64") {
148: 		result = LogicalType::UBIGINT;
149: 	} else if (type_str == "float16") {
150: 		// FIXME: should we even support this?
151: 		result = LogicalType::FLOAT;
152: 	} else if (type_str == "float32") {
153: 		result = LogicalType::FLOAT;
154: 	} else if (type_str == "float64") {
155: 		result = LogicalType::DOUBLE;
156: 	} else {
157: 		return false;
158: 	}
159: 	return true;
160: }
161: 
162: static LogicalType FromType(const py::type &obj) {
163: 	py::module_ builtins = py::module_::import("builtins");
164: 	if (obj.is(builtins.attr("str"))) {
165: 		return LogicalType::VARCHAR;
166: 	}
167: 	if (obj.is(builtins.attr("int"))) {
168: 		return LogicalType::BIGINT;
169: 	}
170: 	if (obj.is(builtins.attr("bytearray"))) {
171: 		return LogicalType::BLOB;
172: 	}
173: 	if (obj.is(builtins.attr("bytes"))) {
174: 		return LogicalType::BLOB;
175: 	}
176: 	if (obj.is(builtins.attr("float"))) {
177: 		return LogicalType::DOUBLE;
178: 	}
179: 	if (obj.is(builtins.attr("bool"))) {
180: 		return LogicalType::BOOLEAN;
181: 	}
182: 
183: 	LogicalType result;
184: 	if (FromNumpyType(obj, result)) {
185: 		return result;
186: 	}
187: 
188: 	throw py::type_error("Could not convert from unknown 'type' to DuckDBPyType");
189: }
190: 
191: static bool IsMapType(const py::tuple &args) {
192: 	if (args.size() != 2) {
193: 		return false;
194: 	}
195: 	for (auto &arg : args) {
196: 		if (GetTypeObjectType(arg) == PythonTypeObject::INVALID) {
197: 			return false;
198: 		}
199: 	}
200: 	return true;
201: }
202: 
203: static py::tuple FilterNones(const py::tuple &args) {
204: 	py::list result;
205: 
206: 	for (const auto &arg : args) {
207: 		py::object object = py::reinterpret_borrow<py::object>(arg);
208: 		if (object.is(py::none().get_type())) {
209: 			continue;
210: 		}
211: 		result.append(object);
212: 	}
213: 	return py::tuple(result);
214: }
215: 
216: static LogicalType FromUnionTypeInternal(const py::tuple &args) {
217: 	idx_t index = 1;
218: 	child_list_t<LogicalType> members;
219: 
220: 	for (const auto &arg : args) {
221: 		auto name = StringUtil::Format("u%d", index++);
222: 		py::object object = py::reinterpret_borrow<py::object>(arg);
223: 		members.push_back(make_pair(name, FromObject(object)));
224: 	}
225: 
226: 	return LogicalType::UNION(std::move(members));
227: }
228: 
229: static LogicalType FromUnionType(const py::object &obj) {
230: 	py::tuple args = obj.attr("__args__");
231: 
232: 	// Optional inserts NoneType into the Union
233: 	// all types are nullable in DuckDB so we just filter the Nones
234: 	auto filtered_args = FilterNones(args);
235: 	if (filtered_args.size() == 1) {
236: 		// If only a single type is left, dont construct a UNION
237: 		return FromObject(filtered_args[0]);
238: 	}
239: 	return FromUnionTypeInternal(filtered_args);
240: };
241: 
242: static LogicalType FromGenericAlias(const py::object &obj) {
243: 	py::module_ builtins = py::module_::import("builtins");
244: 	py::module_ types = py::module_::import("types");
245: 	auto generic_alias = types.attr("GenericAlias");
246: 	D_ASSERT(py::isinstance(obj, generic_alias));
247: 	auto origin = obj.attr("__origin__");
248: 	py::tuple args = obj.attr("__args__");
249: 
250: 	if (origin.is(builtins.attr("list"))) {
251: 		if (args.size() != 1) {
252: 			throw NotImplementedException("Can only create a LIST from a single type");
253: 		}
254: 		return LogicalType::LIST(FromObject(args[0]));
255: 	}
256: 	if (origin.is(builtins.attr("dict"))) {
257: 		if (IsMapType(args)) {
258: 			return LogicalType::MAP(FromObject(args[0]), FromObject(args[1]));
259: 		} else {
260: 			throw NotImplementedException("Can only create a MAP from a dict if args is formed correctly");
261: 		}
262: 	}
263: 	string origin_type = py::str(origin);
264: 	throw InvalidInputException("Could not convert from '%s' to DuckDBPyType", origin_type);
265: }
266: 
267: static LogicalType FromDictionary(const py::object &obj) {
268: 	auto dict = py::reinterpret_steal<py::dict>(obj);
269: 	child_list_t<LogicalType> children;
270: 	children.reserve(dict.size());
271: 	for (auto &item : dict) {
272: 		auto &name_p = item.first;
273: 		auto type_p = py::reinterpret_borrow<py::object>(item.second);
274: 		string name = py::str(name_p);
275: 		auto type = FromObject(type_p);
276: 		children.push_back(std::make_pair(name, std::move(type)));
277: 	}
278: 	return LogicalType::STRUCT(std::move(children));
279: }
280: 
281: static LogicalType FromObject(const py::object &object) {
282: 	auto object_type = GetTypeObjectType(object);
283: 	switch (object_type) {
284: 	case PythonTypeObject::BASE: {
285: 		return FromType(object);
286: 	}
287: 	case PythonTypeObject::COMPOSITE: {
288: 		return FromGenericAlias(object);
289: 	}
290: 	case PythonTypeObject::STRUCT: {
291: 		return FromDictionary(object);
292: 	}
293: 	case PythonTypeObject::UNION: {
294: 		return FromUnionType(object);
295: 	}
296: 	case PythonTypeObject::STRING: {
297: 		auto string_value = std::string(py::str(object));
298: 		return FromString(string_value, nullptr);
299: 	}
300: 	default: {
301: 		string actual_type = py::str(object.get_type());
302: 		throw NotImplementedException("Could not convert from object of type '%s' to DuckDBPyType", actual_type);
303: 	}
304: 	}
305: }
306: 
307: void DuckDBPyType::Initialize(py::handle &m) {
308: 	auto type_module = py::class_<DuckDBPyType, shared_ptr<DuckDBPyType>>(m, "DuckDBPyType", py::module_local());
309: 
310: 	type_module.def("__repr__", &DuckDBPyType::ToString, "Stringified representation of the type object");
311: 	type_module.def("__eq__", &DuckDBPyType::Equals, "Compare two types for equality", py::arg("other"));
312: 	type_module.def("__eq__", &DuckDBPyType::EqualsString, "Compare two types for equality", py::arg("other"));
313: 	type_module.def_property_readonly("id", &DuckDBPyType::GetId);
314: 	type_module.def_property_readonly("children", &DuckDBPyType::Children);
315: 	type_module.def(py::init<>([](const string &type_str, shared_ptr<DuckDBPyConnection> connection = nullptr) {
316: 		auto ltype = FromString(type_str, std::move(connection));
317: 		return make_shared_ptr<DuckDBPyType>(ltype);
318: 	}));
319: 	type_module.def(py::init<>([](const PyGenericAlias &obj) {
320: 		auto ltype = FromGenericAlias(obj);
321: 		return make_shared_ptr<DuckDBPyType>(ltype);
322: 	}));
323: 	type_module.def(py::init<>([](const PyUnionType &obj) {
324: 		auto ltype = FromUnionType(obj);
325: 		return make_shared_ptr<DuckDBPyType>(ltype);
326: 	}));
327: 	type_module.def(py::init<>([](const py::object &obj) {
328: 		auto ltype = FromObject(obj);
329: 		return make_shared_ptr<DuckDBPyType>(ltype);
330: 	}));
331: 	type_module.def("__getattr__", &DuckDBPyType::GetAttribute, "Get the child type by 'name'", py::arg("name"));
332: 	type_module.def("__getitem__", &DuckDBPyType::GetAttribute, "Get the child type by 'name'", py::arg("name"));
333: 
334: 	py::implicitly_convertible<py::object, DuckDBPyType>();
335: 	py::implicitly_convertible<py::str, DuckDBPyType>();
336: 	py::implicitly_convertible<PyGenericAlias, DuckDBPyType>();
337: 	py::implicitly_convertible<PyUnionType, DuckDBPyType>();
338: }
339: 
340: string DuckDBPyType::ToString() const {
341: 	return type.ToString();
342: }
343: 
344: py::list DuckDBPyType::Children() const {
345: 
346: 	switch (type.id()) {
347: 	case LogicalTypeId::LIST:
348: 	case LogicalTypeId::STRUCT:
349: 	case LogicalTypeId::UNION:
350: 	case LogicalTypeId::MAP:
351: 	case LogicalTypeId::ARRAY:
352: 	case LogicalTypeId::ENUM:
353: 	case LogicalTypeId::DECIMAL:
354: 		break;
355: 	default:
356: 		throw InvalidInputException("This type is not nested so it doesn't have children");
357: 	}
358: 
359: 	py::list children;
360: 	auto id = type.id();
361: 	if (id == LogicalTypeId::LIST) {
362: 		children.append(py::make_tuple("child", make_shared_ptr<DuckDBPyType>(ListType::GetChildType(type))));
363: 		return children;
364: 	}
365: 	if (id == LogicalTypeId::ARRAY) {
366: 		children.append(py::make_tuple("child", make_shared_ptr<DuckDBPyType>(ArrayType::GetChildType(type))));
367: 		children.append(py::make_tuple("size", ArrayType::GetSize(type)));
368: 		return children;
369: 	}
370: 	if (id == LogicalTypeId::ENUM) {
371: 		auto &values_insert_order = EnumType::GetValuesInsertOrder(type);
372: 		auto strings = FlatVector::GetData<string_t>(values_insert_order);
373: 		py::list strings_list;
374: 		for (size_t i = 0; i < EnumType::GetSize(type); i++) {
375: 			strings_list.append(py::str(strings[i].GetString()));
376: 		}
377: 		children.append(py::make_tuple("values", strings_list));
378: 		return children;
379: 	}
380: 	if (id == LogicalTypeId::STRUCT || id == LogicalTypeId::UNION) {
381: 		auto &struct_children = StructType::GetChildTypes(type);
382: 		for (idx_t i = 0; i < struct_children.size(); i++) {
383: 			auto &child = struct_children[i];
384: 			children.append(
385: 			    py::make_tuple(child.first, make_shared_ptr<DuckDBPyType>(StructType::GetChildType(type, i))));
386: 		}
387: 		return children;
388: 	}
389: 	if (id == LogicalTypeId::MAP) {
390: 		children.append(py::make_tuple("key", make_shared_ptr<DuckDBPyType>(MapType::KeyType(type))));
391: 		children.append(py::make_tuple("value", make_shared_ptr<DuckDBPyType>(MapType::ValueType(type))));
392: 		return children;
393: 	}
394: 	if (id == LogicalTypeId::DECIMAL) {
395: 		children.append(py::make_tuple("precision", DecimalType::GetWidth(type)));
396: 		children.append(py::make_tuple("scale", DecimalType::GetScale(type)));
397: 		return children;
398: 	}
399: 	throw InternalException("Children is not implemented for this type");
400: }
401: 
402: string DuckDBPyType::GetId() const {
403: 	return StringUtil::Lower(LogicalTypeIdToString(type.id()));
404: }
405: 
406: const LogicalType &DuckDBPyType::Type() const {
407: 	return type;
408: }
409: 
410: } // namespace duckdb
[end of tools/pythonpkg/src/typing/pytype.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: