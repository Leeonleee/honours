{
  "repo": "duckdb/duckdb",
  "pull_number": 13344,
  "instance_id": "duckdb__duckdb-13344",
  "issue_numbers": [
    "13193"
  ],
  "base_commit": "950d776b2158962d31fa20673cd1909d5c3bd1db",
  "patch": "diff --git a/src/include/duckdb/parser/transformer.hpp b/src/include/duckdb/parser/transformer.hpp\nindex ed7ae9c57cfc..0646660ce7e9 100644\n--- a/src/include/duckdb/parser/transformer.hpp\n+++ b/src/include/duckdb/parser/transformer.hpp\n@@ -90,6 +90,7 @@ class Transformer {\n \tTransformer &RootTransformer();\n \tconst Transformer &RootTransformer() const;\n \tvoid SetParamCount(idx_t new_count);\n+\tvoid ClearParameters();\n \tvoid SetParam(const string &name, idx_t index, PreparedParamType type);\n \tbool GetParam(const string &name, idx_t &index, PreparedParamType type);\n \ndiff --git a/src/parser/transform/statement/transform_prepare.cpp b/src/parser/transform/statement/transform_prepare.cpp\nindex 1979987699c5..5466731277b5 100644\n--- a/src/parser/transform/statement/transform_prepare.cpp\n+++ b/src/parser/transform/statement/transform_prepare.cpp\n@@ -15,7 +15,7 @@ unique_ptr<PrepareStatement> Transformer::TransformPrepare(duckdb_libpgquery::PG\n \tauto result = make_uniq<PrepareStatement>();\n \tresult->name = string(stmt.name);\n \tresult->statement = TransformStatement(*stmt.query);\n-\tSetParamCount(0);\n+\tClearParameters();\n \n \treturn result;\n }\ndiff --git a/src/parser/transformer.cpp b/src/parser/transformer.cpp\nindex 23b5d2ccb2c1..6a30a9d334e1 100644\n--- a/src/parser/transformer.cpp\n+++ b/src/parser/transformer.cpp\n@@ -21,7 +21,7 @@ Transformer::~Transformer() {\n }\n \n void Transformer::Clear() {\n-\tSetParamCount(0);\n+\tClearParameters();\n \tpivot_entries.clear();\n }\n \n@@ -59,7 +59,7 @@ unique_ptr<SQLStatement> Transformer::TransformStatement(duckdb_libpgquery::PGNo\n \tauto result = TransformStatementInternal(stmt);\n \tif (!named_param_map.empty()) {\n \t\t// Avoid overriding a previous move with nothing\n-\t\tresult->named_param_map = std::move(named_param_map);\n+\t\tresult->named_param_map = named_param_map;\n \t}\n \treturn result;\n }\n@@ -90,6 +90,12 @@ void Transformer::SetParamCount(idx_t new_count) {\n \troot.prepared_statement_parameter_index = new_count;\n }\n \n+void Transformer::ClearParameters() {\n+\tauto &root = RootTransformer();\n+\troot.prepared_statement_parameter_index = 0;\n+\troot.named_param_map.clear();\n+}\n+\n static void ParamTypeCheck(PreparedParamType last_type, PreparedParamType new_type) {\n \t// Mixing positional/auto-increment and named parameters is not supported\n \tif (last_type == PreparedParamType::INVALID) {\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/api/test_duckdb_query.py b/tools/pythonpkg/tests/fast/api/test_duckdb_query.py\nindex 1ced34502903..43f36603f00b 100644\n--- a/tools/pythonpkg/tests/fast/api/test_duckdb_query.py\n+++ b/tools/pythonpkg/tests/fast/api/test_duckdb_query.py\n@@ -41,6 +41,24 @@ def test_duckdb_query_empty_result(self):\n         res = con.query('show tables').fetchall()\n         assert res == []\n \n+    def test_parametrized_explain(self, duckdb_cursor):\n+        query = \"\"\"\n+            EXPLAIN ANALYZE\n+            SELECT\n+                *\n+            FROM (VALUES\n+                (1, 'John'),\n+                (2, 'Jane'),\n+                (3, 'Doe')\n+            ) my_table(id, name)\n+            WHERE name = ?\n+        \"\"\"\n+        params = (\"John\",)\n+        duckdb_cursor.execute(query, params)\n+\n+        results = duckdb_cursor.fetchall()\n+        assert 'EXPLAIN_ANALYZE' in results[0][1]\n+\n     def test_named_param(self):\n         con = duckdb.connect()\n \n",
  "problem_statement": "Exception Raised when trying to EXPLAIN ANALYZE with parameters\n### What happens?\r\n\r\nWhen I `execute` the query `EXPLAIN ANALYZE SELECT * FROM my_table WHERE name = ?` with parameters I get `Error: Invalid Input Error: Parameter argument/count mismatch, identifiers of the excess parameters: 1`.\r\n\r\nIf I have to remove the parameters to make a sample query string it will take a long time. Thus please make parameters work.\r\n\r\nI can see this is the same issue as in Javascript reported in the closed issue https://github.com/duckdb/duckdb/issues/9393.\r\n\r\n### To Reproduce\r\n\r\n```python\r\nimport duckdb\r\n\r\n# Create a connection\r\ncon = duckdb.connect()\r\n\r\n# Create a cursor\r\ncur = con.cursor()\r\n\r\n# Create a table\r\ncur.execute(\"CREATE TABLE my_table (id INTEGER, name VARCHAR)\")\r\n\r\n# Insert some data\r\ncur.execute(\"INSERT INTO my_table VALUES (1, 'John'), (2, 'Jane'), (3, 'Doe')\")\r\n\r\n# Execute a parameterized query\r\nquery = \"EXPLAIN ANALYZE SELECT * FROM my_table WHERE name = ?\"\r\nparams = (\"John\",)\r\ncur.execute(query, params)\r\n\r\n# Fetch the results\r\nresults = cur.fetchall()\r\nprint(results)\r\n\r\n# Close the cursor and connection\r\ncur.close()\r\ncon.close()\r\n```\r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"/home/jovyan/repos/mt-pm-reporting/script.py\", line 18, in <module>\r\n    cur.execute(query, params)\r\nduckdb.duckdb.InvalidInputException: Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result\r\nError: Invalid Input Error: Parameter argument/count mismatch, identifiers of the excess parameters: 1\r\n```\r\n\r\n### OS:\r\n\r\nx86\r\n\r\n### DuckDB Version:\r\n\r\n??\r\n\r\n### DuckDB Client:\r\n\r\nduckdb==1.0.0 in python\r\n\r\n### Full Name:\r\n\r\nMarc Skov Madsen\r\n\r\n### Affiliation:\r\n\r\n\u00d8rsted\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have not tested with any build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-08-07T14:25:28Z"
}