{
  "repo": "duckdb/duckdb",
  "pull_number": 11315,
  "instance_id": "duckdb__duckdb-11315",
  "issue_numbers": [
    "11294",
    "11294"
  ],
  "base_commit": "9bc963f1a44fbb0248c1c6d11f97b1b22b156b64",
  "patch": "diff --git a/src/optimizer/pushdown/pushdown_set_operation.cpp b/src/optimizer/pushdown/pushdown_set_operation.cpp\nindex e96eba2e5dc7..315fe5dc0c03 100644\n--- a/src/optimizer/pushdown/pushdown_set_operation.cpp\n+++ b/src/optimizer/pushdown/pushdown_set_operation.cpp\n@@ -69,7 +69,7 @@ unique_ptr<LogicalOperator> FilterPushdown::PushdownSetOperation(unique_ptr<Logi\n \t\t// both empty: return empty result\n \t\treturn make_uniq<LogicalEmptyResult>(std::move(op));\n \t}\n-\tif (left_empty) {\n+\tif (left_empty && setop.setop_all) {\n \t\t// left child is empty result\n \t\tswitch (op->type) {\n \t\tcase LogicalOperatorType::LOGICAL_UNION:\n@@ -88,7 +88,7 @@ unique_ptr<LogicalOperator> FilterPushdown::PushdownSetOperation(unique_ptr<Logi\n \t\tdefault:\n \t\t\tthrow InternalException(\"Unsupported set operation\");\n \t\t}\n-\t} else if (right_empty) {\n+\t} else if (right_empty && setop.setop_all) {\n \t\t// right child is empty result\n \t\tswitch (op->type) {\n \t\tcase LogicalOperatorType::LOGICAL_UNION:\n",
  "test_patch": "diff --git a/test/optimizer/pushdown_set_op.test b/test/optimizer/pushdown_set_op.test\nindex 27339db1fc92..550bb16f2348 100644\n--- a/test/optimizer/pushdown_set_op.test\n+++ b/test/optimizer/pushdown_set_op.test\n@@ -30,7 +30,7 @@ logical_opt\t<!REGEX>:.*EXCEPT.*\n \n # if RHS is empty we can optimize away the except\n query II\n-explain select 42 except select 42 where 1=0;\n+explain select 42 except all select 42 where 1=0;\n ----\n logical_opt\t<!REGEX>:.*EXCEPT.*\n \n@@ -41,12 +41,12 @@ explain select * from (select 42 intersect select 42) tbl(i) where i=42;\n logical_opt\t<REGEX>:.*INTERSECT.*\n \n query II\n-explain select * from (select 42 intersect select 43) tbl(i) where i=42;\n+explain select * from (select 42 intersect all select 43) tbl(i) where i=42;\n ----\n logical_opt\t<!REGEX>:.*INTERSECT.*\n \n query II\n-explain select * from (select 43 intersect select 42) tbl(i) where i=42;\n+explain select * from (select 43 intersect all select 42) tbl(i) where i=42;\n ----\n logical_opt\t<!REGEX>:.*INTERSECT.*\n \n@@ -56,12 +56,12 @@ explain select * from (select 42 except select 42) tbl(i) where i=42;\n logical_opt\t<REGEX>:.*EXCEPT.*\n \n query II\n-explain select * from (select 42 except select 43) tbl(i) where i=42;\n+explain select * from (select 42 except all select 43) tbl(i) where i=42;\n ----\n logical_opt\t<!REGEX>:.*EXCEPT.*\n \n query II\n-explain select * from (select 43 except select 42) tbl(i) where i=42;\n+explain select * from (select 43 except all select 42) tbl(i) where i=42;\n ----\n logical_opt\t<!REGEX>:.*EXCEPT.*\n \ndiff --git a/test/sql/setops/test_union_except_empty.test b/test/sql/setops/test_union_except_empty.test\nnew file mode 100644\nindex 000000000000..02fe846a24fd\n--- /dev/null\n+++ b/test/sql/setops/test_union_except_empty.test\n@@ -0,0 +1,28 @@\n+# name: test/sql/setops/test_union_except_empty.test\n+# description: Test order of UNION statements\n+# group: [setops]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table t (i int);\n+\n+statement ok\n+insert into t values (1),(2),(3),(4),(4);\n+\n+query I\n+select i from t union select 1 where false order by 1;\n+----\n+1\n+2\n+3\n+4\n+\n+query I\n+select i from t except select 1 where false order by 1;\n+----\n+1\n+2\n+3\n+4\n",
  "problem_statement": "UNION [ DISTINCT ] and EXCEPT [ DISTINCT ] is ignored when subquery returns no rows\n### What happens?\n\n`UNION [ DISTINCT ]` and `EXCEPT [ DISTINCT ]` should remove duplicate rows irrespective of whether both of its subqueries produce any rows. But it doesn't in some cases.\n\n### To Reproduce\n\n```sql\r\ncreate table t (i int);\r\ninsert into t values (1),(2),(3),(4),(4);\r\nselect i from t union select 1 where false order by 1;\r\n```\r\n\r\nThis produces:\r\n\r\n```\r\n|i  |\r\n|---|\r\n|1  |\r\n|2  |\r\n|3  |\r\n|4  |\r\n|4  |\r\n```\r\n\r\nIt should produce:\r\n\r\n```\r\n|i  |\r\n|---|\r\n|1  |\r\n|2  |\r\n|3  |\r\n|4  |\r\n```\r\n\r\nThis seems to be due to an optimisation done for \"obviously false\" predicates, e.g. `WHERE FALSE`. It doesn't happen here, for example:\r\n\r\n```sql\r\nselect i from t union select 1 from t where i = -1 order by 1;\r\n```\r\n\r\n`EXCEPT` is also affected:\r\n\r\n```sql\r\n-- Incorrect result:\r\nselect i from t except select 1 where false order by 1;\r\n\r\n-- Correct result:\r\nselect i from t except select 1 from t where i = -1 order by 1;\r\n```\r\n\r\nNote, I couldn't test the latest snapshots because of:\r\n\r\n- https://github.com/duckdb/duckdb/issues/11244\n\n### OS:\n\nMicrosoft Windows [Version 10.0.22631.3296]\n\n### DuckDB Version:\n\n0.10.0\n\n### DuckDB Client:\n\nJDBC\n\n### Full Name:\n\nLukas Eder\n\n### Affiliation:\n\nData Geekery\n\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\n\nI have tested with a release build (and could not test with a nightly build)\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nUNION [ DISTINCT ] and EXCEPT [ DISTINCT ] is ignored when subquery returns no rows\n### What happens?\n\n`UNION [ DISTINCT ]` and `EXCEPT [ DISTINCT ]` should remove duplicate rows irrespective of whether both of its subqueries produce any rows. But it doesn't in some cases.\n\n### To Reproduce\n\n```sql\r\ncreate table t (i int);\r\ninsert into t values (1),(2),(3),(4),(4);\r\nselect i from t union select 1 where false order by 1;\r\n```\r\n\r\nThis produces:\r\n\r\n```\r\n|i  |\r\n|---|\r\n|1  |\r\n|2  |\r\n|3  |\r\n|4  |\r\n|4  |\r\n```\r\n\r\nIt should produce:\r\n\r\n```\r\n|i  |\r\n|---|\r\n|1  |\r\n|2  |\r\n|3  |\r\n|4  |\r\n```\r\n\r\nThis seems to be due to an optimisation done for \"obviously false\" predicates, e.g. `WHERE FALSE`. It doesn't happen here, for example:\r\n\r\n```sql\r\nselect i from t union select 1 from t where i = -1 order by 1;\r\n```\r\n\r\n`EXCEPT` is also affected:\r\n\r\n```sql\r\n-- Incorrect result:\r\nselect i from t except select 1 where false order by 1;\r\n\r\n-- Correct result:\r\nselect i from t except select 1 from t where i = -1 order by 1;\r\n```\r\n\r\nNote, I couldn't test the latest snapshots because of:\r\n\r\n- https://github.com/duckdb/duckdb/issues/11244\n\n### OS:\n\nMicrosoft Windows [Version 10.0.22631.3296]\n\n### DuckDB Version:\n\n0.10.0\n\n### DuckDB Client:\n\nJDBC\n\n### Full Name:\n\nLukas Eder\n\n### Affiliation:\n\nData Geekery\n\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\n\nI have tested with a release build (and could not test with a nightly build)\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "Previously reported (in a very roundabout way) at https://github.com/duckdb/duckdb/issues/11163\nPreviously reported (in a very roundabout way) at https://github.com/duckdb/duckdb/issues/11163",
  "created_at": "2024-03-22T17:49:08Z"
}