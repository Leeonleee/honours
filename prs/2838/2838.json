{
  "repo": "duckdb/duckdb",
  "pull_number": 2838,
  "instance_id": "duckdb__duckdb-2838",
  "issue_numbers": [
    "2752"
  ],
  "base_commit": "f338ea4234e8ffd65a29c5a34da47aabb2eab0d1",
  "patch": "diff --git a/extension/parquet/column_reader.cpp b/extension/parquet/column_reader.cpp\nindex 667932f957c1..da0b6359b13a 100644\n--- a/extension/parquet/column_reader.cpp\n+++ b/extension/parquet/column_reader.cpp\n@@ -157,7 +157,7 @@ unique_ptr<ColumnReader> ColumnReader::CreateReader(ParquetReader &reader, const\n \t\t\t\tthrow InternalException(\"Unrecognized type for Decimal\");\n \t\t\t}\n \t\tdefault:\n-\t\t\tthrow NotImplementedException(\"Unrecognized type for Decimal\");\n+\t\t\tthrow NotImplementedException(\"Unrecognized Parquet type for Decimal\");\n \t\t}\n \t\tbreak;\n \tdefault:\n@@ -564,8 +564,7 @@ StructColumnReader::StructColumnReader(ParquetReader &reader, LogicalType type_p\n                                        vector<unique_ptr<ColumnReader>> child_readers_p)\n     : ColumnReader(reader, move(type_p), schema_p, schema_idx_p, max_define_p, max_repeat_p),\n       child_readers(move(child_readers_p)) {\n-\tD_ASSERT(type.id() == LogicalTypeId::STRUCT);\n-\tD_ASSERT(!StructType::GetChildTypes(type).empty());\n+\tD_ASSERT(type.InternalType() == PhysicalType::STRUCT);\n }\n \n ColumnReader *StructColumnReader::GetChildReader(idx_t child_idx) {\ndiff --git a/extension/parquet/column_writer.cpp b/extension/parquet/column_writer.cpp\nindex 5de7cfcfca26..6d3c5d6883b9 100644\n--- a/extension/parquet/column_writer.cpp\n+++ b/extension/parquet/column_writer.cpp\n@@ -40,8 +40,10 @@ using duckdb_parquet::format::Type;\n //===--------------------------------------------------------------------===//\n // ColumnWriter\n //===--------------------------------------------------------------------===//\n-ColumnWriter::ColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define)\n-    : writer(writer), schema_idx(schema_idx), max_repeat(max_repeat), max_define(max_define) {\n+ColumnWriter::ColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define,\n+                           bool can_have_nulls)\n+    : writer(writer), schema_idx(schema_idx), max_repeat(max_repeat), max_define(max_define),\n+      can_have_nulls(can_have_nulls) {\n }\n ColumnWriter::~ColumnWriter() {\n }\n@@ -196,6 +198,9 @@ void ColumnWriter::HandleDefineLevels(ColumnWriterState &state, ColumnWriterStat\n \t\t\t} else if (validity.RowIsValid(vector_index)) {\n \t\t\t\tstate.definition_levels.push_back(define_value);\n \t\t\t} else {\n+\t\t\t\tif (!can_have_nulls) {\n+\t\t\t\t\tthrow IOException(\"Parquet writer: map key column is not allowed to contain NULL values\");\n+\t\t\t\t}\n \t\t\t\tstate.definition_levels.push_back(null_value);\n \t\t\t}\n \t\t\tif (parent->is_empty.empty() || !parent->is_empty[current_index]) {\n@@ -208,6 +213,9 @@ void ColumnWriter::HandleDefineLevels(ColumnWriterState &state, ColumnWriterStat\n \t\t\tif (validity.RowIsValid(i)) {\n \t\t\t\tstate.definition_levels.push_back(define_value);\n \t\t\t} else {\n+\t\t\t\tif (!can_have_nulls) {\n+\t\t\t\t\tthrow IOException(\"Parquet writer: map key column is not allowed to contain NULL values\");\n+\t\t\t\t}\n \t\t\t\tstate.definition_levels.push_back(null_value);\n \t\t\t}\n \t\t}\n@@ -490,8 +498,9 @@ static void TemplatedWritePlain(Vector &col, idx_t chunk_start, idx_t chunk_end,\n template <class SRC, class TGT, class OP = ParquetCastOperator>\n class StandardColumnWriter : public ColumnWriter {\n public:\n-\tStandardColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define)\n-\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define) {\n+\tStandardColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define,\n+\t                     bool can_have_nulls)\n+\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define, can_have_nulls) {\n \t}\n \t~StandardColumnWriter() override = default;\n \n@@ -518,8 +527,9 @@ class BooleanWriterPageState : public ColumnWriterPageState {\n \n class BooleanColumnWriter : public ColumnWriter {\n public:\n-\tBooleanColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define)\n-\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define) {\n+\tBooleanColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define,\n+\t                    bool can_have_nulls)\n+\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define, can_have_nulls) {\n \t}\n \t~BooleanColumnWriter() override = default;\n \n@@ -570,8 +580,9 @@ class BooleanColumnWriter : public ColumnWriter {\n //===--------------------------------------------------------------------===//\n class DecimalColumnWriter : public ColumnWriter {\n public:\n-\tDecimalColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define)\n-\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define) {\n+\tDecimalColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define,\n+\t                    bool can_have_nulls)\n+\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define, can_have_nulls) {\n \t}\n \t~DecimalColumnWriter() override = default;\n \n@@ -596,8 +607,8 @@ class DecimalColumnWriter : public ColumnWriter {\n //===--------------------------------------------------------------------===//\n class StringColumnWriter : public ColumnWriter {\n public:\n-\tStringColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define)\n-\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define) {\n+\tStringColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define, bool can_have_nulls)\n+\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define, can_have_nulls) {\n \t}\n \t~StringColumnWriter() override = default;\n \n@@ -627,8 +638,9 @@ class StringColumnWriter : public ColumnWriter {\n class StructColumnWriter : public ColumnWriter {\n public:\n \tStructColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define,\n-\t                   vector<unique_ptr<ColumnWriter>> child_writers_p)\n-\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define), child_writers(move(child_writers_p)) {\n+\t                   vector<unique_ptr<ColumnWriter>> child_writers_p, bool can_have_nulls)\n+\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define, can_have_nulls),\n+\t      child_writers(move(child_writers_p)) {\n \t}\n \t~StructColumnWriter() override = default;\n \n@@ -723,8 +735,8 @@ void StructColumnWriter::FinalizeWrite(ColumnWriterState &state_p) {\n class ListColumnWriter : public ColumnWriter {\n public:\n \tListColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define,\n-\t                 unique_ptr<ColumnWriter> child_writer_p)\n-\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define), child_writer(move(child_writer_p)) {\n+\t                 unique_ptr<ColumnWriter> child_writer_p, bool can_have_nulls)\n+\t    : ColumnWriter(writer, schema_idx, max_repeat, max_define, can_have_nulls), child_writer(move(child_writer_p)) {\n \t}\n \t~ListColumnWriter() override = default;\n \n@@ -810,6 +822,9 @@ void ListColumnWriter::Prepare(ColumnWriterState &state_p, ColumnWriterState *pa\n \t\t\t\tstate.is_empty.push_back(false);\n \t\t\t}\n \t\t} else {\n+\t\t\tif (!can_have_nulls) {\n+\t\t\t\tthrow IOException(\"Parquet writer: map key column is not allowed to contain NULL values\");\n+\t\t\t}\n \t\t\tstate.definition_levels.push_back(max_define - 1);\n \t\t\tstate.repetition_levels.push_back(first_repeat_level);\n \t\t\tstate.is_empty.push_back(true);\n@@ -846,13 +861,18 @@ void ListColumnWriter::FinalizeWrite(ColumnWriterState &state_p) {\n //===--------------------------------------------------------------------===//\n unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parquet::format::SchemaElement> &schemas,\n                                                              ParquetWriter &writer, const LogicalType &type,\n-                                                             const string &name, idx_t max_repeat, idx_t max_define) {\n+                                                             const string &name, idx_t max_repeat, idx_t max_define,\n+                                                             bool can_have_nulls) {\n+\tauto null_type = can_have_nulls ? FieldRepetitionType::OPTIONAL : FieldRepetitionType::REQUIRED;\n+\tif (!can_have_nulls) {\n+\t\tmax_define--;\n+\t}\n \tidx_t schema_idx = schemas.size();\n \tif (type.id() == LogicalTypeId::STRUCT) {\n \t\tauto &child_types = StructType::GetChildTypes(type);\n \t\t// set up the schema element for this struct\n \t\tduckdb_parquet::format::SchemaElement schema_element;\n-\t\tschema_element.repetition_type = FieldRepetitionType::OPTIONAL;\n+\t\tschema_element.repetition_type = null_type;\n \t\tschema_element.num_children = child_types.size();\n \t\tschema_element.__isset.num_children = true;\n \t\tschema_element.__isset.type = false;\n@@ -866,7 +886,8 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \t\t\tchild_writers.push_back(CreateWriterRecursive(schemas, writer, child_type.second, child_type.first,\n \t\t\t                                              max_repeat, max_define + 1));\n \t\t}\n-\t\treturn make_unique<StructColumnWriter>(writer, schema_idx, max_repeat, max_define, move(child_writers));\n+\t\treturn make_unique<StructColumnWriter>(writer, schema_idx, max_repeat, max_define, move(child_writers),\n+\t\t                                       can_have_nulls);\n \t}\n \tif (type.id() == LogicalTypeId::LIST) {\n \t\tauto &child_type = ListType::GetChildType(type);\n@@ -874,7 +895,7 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \t\t// for some reason we only set the converted type in the OPTIONAL element\n \t\t// first an OPTIONAL element\n \t\tduckdb_parquet::format::SchemaElement optional_element;\n-\t\toptional_element.repetition_type = FieldRepetitionType::OPTIONAL;\n+\t\toptional_element.repetition_type = null_type;\n \t\toptional_element.num_children = 1;\n \t\toptional_element.converted_type = ConvertedType::LIST;\n \t\toptional_element.__isset.num_children = true;\n@@ -894,12 +915,63 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \t\trepeated_element.name = \"list\";\n \t\tschemas.push_back(move(repeated_element));\n \n-\t\tauto child_writer = CreateWriterRecursive(schemas, writer, child_type, \"child\", max_repeat + 1, max_define + 2);\n-\t\treturn make_unique<ListColumnWriter>(writer, schema_idx, max_repeat, max_define, move(child_writer));\n+\t\tauto child_writer =\n+\t\t    CreateWriterRecursive(schemas, writer, child_type, \"element\", max_repeat + 1, max_define + 2);\n+\t\treturn make_unique<ListColumnWriter>(writer, schema_idx, max_repeat, max_define, move(child_writer),\n+\t\t                                     can_have_nulls);\n+\t}\n+\tif (type.id() == LogicalTypeId::MAP) {\n+\t\t// map type\n+\t\t// maps are stored as follows:\n+\t\t// <map-repetition> group <name> (MAP) {\n+\t\t// \trepeated group key_value {\n+\t\t// \t\trequired <key-type> key;\n+\t\t// \t\t<value-repetition> <value-type> value;\n+\t\t// \t}\n+\t\t// }\n+\t\t// top map element\n+\t\tduckdb_parquet::format::SchemaElement top_element;\n+\t\ttop_element.repetition_type = null_type;\n+\t\ttop_element.num_children = 1;\n+\t\ttop_element.converted_type = ConvertedType::MAP;\n+\t\ttop_element.__isset.repetition_type = true;\n+\t\ttop_element.__isset.num_children = true;\n+\t\ttop_element.__isset.converted_type = true;\n+\t\ttop_element.__isset.type = false;\n+\t\ttop_element.name = name;\n+\t\tschemas.push_back(move(top_element));\n+\n+\t\t// key_value element\n+\t\tduckdb_parquet::format::SchemaElement kv_element;\n+\t\tkv_element.repetition_type = FieldRepetitionType::REPEATED;\n+\t\tkv_element.num_children = 2;\n+\t\tkv_element.__isset.repetition_type = true;\n+\t\tkv_element.__isset.num_children = true;\n+\t\tkv_element.__isset.type = false;\n+\t\tkv_element.name = \"key_value\";\n+\t\tschemas.push_back(move(kv_element));\n+\n+\t\t// construct the child types recursively\n+\t\tvector<LogicalType> kv_types {ListType::GetChildType(MapType::KeyType(type)),\n+\t\t                              ListType::GetChildType(MapType::ValueType(type))};\n+\t\tvector<string> kv_names {\"key\", \"value\"};\n+\t\tvector<unique_ptr<ColumnWriter>> child_writers;\n+\t\tchild_writers.reserve(2);\n+\t\tfor (idx_t i = 0; i < 2; i++) {\n+\t\t\t// key needs to be marked as REQUIRED\n+\t\t\tbool is_key = i == 0;\n+\t\t\tauto child_writer = CreateWriterRecursive(schemas, writer, kv_types[i], kv_names[i], max_repeat + 1,\n+\t\t\t                                          max_define + 2, !is_key);\n+\t\t\tauto list_writer = make_unique<ListColumnWriter>(writer, schema_idx, max_repeat, max_define,\n+\t\t\t                                                 move(child_writer), can_have_nulls);\n+\t\t\tchild_writers.push_back(move(list_writer));\n+\t\t}\n+\t\treturn make_unique<StructColumnWriter>(writer, schema_idx, max_repeat, max_define, move(child_writers),\n+\t\t                                       can_have_nulls);\n \t}\n \tduckdb_parquet::format::SchemaElement schema_element;\n \tschema_element.type = ParquetWriter::DuckDBTypeToParquetType(type);\n-\tschema_element.repetition_type = FieldRepetitionType::OPTIONAL;\n+\tschema_element.repetition_type = null_type;\n \tschema_element.num_children = 0;\n \tschema_element.__isset.num_children = true;\n \tschema_element.__isset.type = true;\n@@ -911,44 +983,54 @@ unique_ptr<ColumnWriter> ColumnWriter::CreateWriterRecursive(vector<duckdb_parqu\n \n \tswitch (type.id()) {\n \tcase LogicalTypeId::BOOLEAN:\n-\t\treturn make_unique<BooleanColumnWriter>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<BooleanColumnWriter>(writer, schema_idx, max_repeat, max_define, can_have_nulls);\n \tcase LogicalTypeId::TINYINT:\n-\t\treturn make_unique<StandardColumnWriter<int8_t, int32_t>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<int8_t, int32_t>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                          can_have_nulls);\n \tcase LogicalTypeId::SMALLINT:\n-\t\treturn make_unique<StandardColumnWriter<int16_t, int32_t>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<int16_t, int32_t>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                           can_have_nulls);\n \tcase LogicalTypeId::INTEGER:\n \tcase LogicalTypeId::DATE:\n-\t\treturn make_unique<StandardColumnWriter<int32_t, int32_t>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<int32_t, int32_t>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                           can_have_nulls);\n \tcase LogicalTypeId::BIGINT:\n \tcase LogicalTypeId::TIMESTAMP:\n \tcase LogicalTypeId::TIMESTAMP_MS:\n-\t\treturn make_unique<StandardColumnWriter<int64_t, int64_t>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<int64_t, int64_t>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                           can_have_nulls);\n \tcase LogicalTypeId::HUGEINT:\n-\t\treturn make_unique<StandardColumnWriter<hugeint_t, double, ParquetHugeintOperator>>(writer, schema_idx,\n-\t\t                                                                                    max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<hugeint_t, double, ParquetHugeintOperator>>(\n+\t\t    writer, schema_idx, max_repeat, max_define, can_have_nulls);\n \tcase LogicalTypeId::TIMESTAMP_NS:\n-\t\treturn make_unique<StandardColumnWriter<int64_t, int64_t, ParquetTimestampNSOperator>>(writer, schema_idx,\n-\t\t                                                                                       max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<int64_t, int64_t, ParquetTimestampNSOperator>>(\n+\t\t    writer, schema_idx, max_repeat, max_define, can_have_nulls);\n \tcase LogicalTypeId::TIMESTAMP_SEC:\n-\t\treturn make_unique<StandardColumnWriter<int64_t, int64_t, ParquetTimestampSOperator>>(writer, schema_idx,\n-\t\t                                                                                      max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<int64_t, int64_t, ParquetTimestampSOperator>>(\n+\t\t    writer, schema_idx, max_repeat, max_define, can_have_nulls);\n \tcase LogicalTypeId::UTINYINT:\n-\t\treturn make_unique<StandardColumnWriter<uint8_t, int32_t>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<uint8_t, int32_t>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                           can_have_nulls);\n \tcase LogicalTypeId::USMALLINT:\n-\t\treturn make_unique<StandardColumnWriter<uint16_t, int32_t>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<uint16_t, int32_t>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                            can_have_nulls);\n \tcase LogicalTypeId::UINTEGER:\n-\t\treturn make_unique<StandardColumnWriter<uint32_t, uint32_t>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<uint32_t, uint32_t>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                             can_have_nulls);\n \tcase LogicalTypeId::UBIGINT:\n-\t\treturn make_unique<StandardColumnWriter<uint64_t, uint64_t>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<uint64_t, uint64_t>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                             can_have_nulls);\n \tcase LogicalTypeId::FLOAT:\n-\t\treturn make_unique<StandardColumnWriter<float, float>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<float, float>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                       can_have_nulls);\n \tcase LogicalTypeId::DOUBLE:\n-\t\treturn make_unique<StandardColumnWriter<double, double>>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StandardColumnWriter<double, double>>(writer, schema_idx, max_repeat, max_define,\n+\t\t                                                         can_have_nulls);\n \tcase LogicalTypeId::DECIMAL:\n-\t\treturn make_unique<DecimalColumnWriter>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<DecimalColumnWriter>(writer, schema_idx, max_repeat, max_define, can_have_nulls);\n \tcase LogicalTypeId::BLOB:\n \tcase LogicalTypeId::VARCHAR:\n-\t\treturn make_unique<StringColumnWriter>(writer, schema_idx, max_repeat, max_define);\n+\t\treturn make_unique<StringColumnWriter>(writer, schema_idx, max_repeat, max_define, can_have_nulls);\n \tdefault:\n \t\tthrow InternalException(\"Unsupported type in Parquet writer\");\n \t}\ndiff --git a/extension/parquet/include/column_writer.hpp b/extension/parquet/include/column_writer.hpp\nindex a412ec4140c0..e840281a2a6c 100644\n--- a/extension/parquet/include/column_writer.hpp\n+++ b/extension/parquet/include/column_writer.hpp\n@@ -31,20 +31,21 @@ class ColumnWriter {\n \tstatic constexpr const idx_t MAX_UNCOMPRESSED_PAGE_SIZE = 100000000;\n \n public:\n-\tColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define);\n+\tColumnWriter(ParquetWriter &writer, idx_t schema_idx, idx_t max_repeat, idx_t max_define, bool can_have_nulls);\n \tvirtual ~ColumnWriter();\n \n \tParquetWriter &writer;\n \tidx_t schema_idx;\n \tidx_t max_repeat;\n \tidx_t max_define;\n+\tbool can_have_nulls;\n \n public:\n \t//! Create the column writer for a specific type recursively\n \tstatic unique_ptr<ColumnWriter> CreateWriterRecursive(vector<duckdb_parquet::format::SchemaElement> &schemas,\n \t                                                      ParquetWriter &writer, const LogicalType &type,\n \t                                                      const string &name, idx_t max_repeat = 0,\n-\t                                                      idx_t max_define = 1);\n+\t                                                      idx_t max_define = 1, bool can_have_nulls = true);\n \n \tvirtual unique_ptr<ColumnWriterState> InitializeWriteState(duckdb_parquet::format::RowGroup &row_group,\n \t                                                           vector<string> schema_path);\ndiff --git a/extension/parquet/parquet_reader.cpp b/extension/parquet/parquet_reader.cpp\nindex 85b815a731cc..6e44da18fb44 100644\n--- a/extension/parquet/parquet_reader.cpp\n+++ b/extension/parquet/parquet_reader.cpp\n@@ -261,7 +261,32 @@ unique_ptr<ColumnReader> ParquetReader::CreateReaderRecursive(const FileMetaData\n \t\tbool is_repeated = s_ele.repetition_type == FieldRepetitionType::REPEATED;\n \t\tbool is_list = s_ele.__isset.converted_type && s_ele.converted_type == ConvertedType::LIST;\n \t\tbool is_map = s_ele.__isset.converted_type && s_ele.converted_type == ConvertedType::MAP;\n-\t\t// if we only have a single child no reason to create a struct ay\n+\t\tbool is_map_kv = s_ele.__isset.converted_type && s_ele.converted_type == ConvertedType::MAP_KEY_VALUE;\n+\t\tif (!is_map_kv && this_idx > 0) {\n+\t\t\t// check if the parent node of this is a map\n+\t\t\tauto &p_ele = file_meta_data->schema[this_idx - 1];\n+\t\t\tbool parent_is_map = p_ele.__isset.converted_type && p_ele.converted_type == ConvertedType::MAP;\n+\t\t\tbool parent_has_children = p_ele.__isset.num_children && p_ele.num_children == 1;\n+\t\t\tis_map_kv = parent_is_map && parent_has_children;\n+\t\t}\n+\n+\t\tif (is_map_kv) {\n+\t\t\tif (child_types.size() != 2) {\n+\t\t\t\tthrow IOException(\"MAP_KEY_VALUE requires two children\");\n+\t\t\t}\n+\t\t\tif (!is_repeated) {\n+\t\t\t\tthrow IOException(\"MAP_KEY_VALUE needs to be repeated\");\n+\t\t\t}\n+\t\t\tresult_type = LogicalType::MAP(move(child_types[0].second), move(child_types[1].second));\n+\t\t\tfor (auto &child_reader : child_readers) {\n+\t\t\t\tauto child_type = LogicalType::LIST(child_reader->Type());\n+\t\t\t\tchild_reader = make_unique<ListColumnReader>(*this, move(child_type), s_ele, this_idx, max_define,\n+\t\t\t\t                                             max_repeat, move(child_reader));\n+\t\t\t}\n+\t\t\tresult = make_unique<StructColumnReader>(*this, result_type, s_ele, this_idx, max_define - 1,\n+\t\t\t                                         max_repeat - 1, move(child_readers));\n+\t\t\treturn result;\n+\t\t}\n \t\tif (child_types.size() > 1 || (!is_list && !is_map && !is_repeated)) {\n \t\t\tresult_type = LogicalType::STRUCT(move(child_types));\n \t\t\tresult = make_unique<StructColumnReader>(*this, result_type, s_ele, this_idx, max_define, max_repeat,\n@@ -278,7 +303,6 @@ unique_ptr<ColumnReader> ParquetReader::CreateReaderRecursive(const FileMetaData\n \t\t}\n \t\treturn result;\n \t} else { // leaf node\n-\n \t\tif (s_ele.repetition_type == FieldRepetitionType::REPEATED) {\n \t\t\tconst auto derived_type = DeriveLogicalType(s_ele);\n \t\t\tauto list_type = LogicalType::LIST(derived_type);\ndiff --git a/src/common/types.cpp b/src/common/types.cpp\nindex b3de9ed5308d..6a580e5594de 100644\n--- a/src/common/types.cpp\n+++ b/src/common/types.cpp\n@@ -975,6 +975,9 @@ LogicalType LogicalType::STRUCT(child_list_t<LogicalType> children) {\n \treturn LogicalType(LogicalTypeId::STRUCT, move(info));\n }\n \n+//===--------------------------------------------------------------------===//\n+// Map Type\n+//===--------------------------------------------------------------------===//\n LogicalType LogicalType::MAP(child_list_t<LogicalType> children) {\n \tauto info = make_shared<StructTypeInfo>(move(children));\n \treturn LogicalType(LogicalTypeId::MAP, move(info));\n@@ -987,6 +990,16 @@ LogicalType LogicalType::MAP(LogicalType key, LogicalType value) {\n \treturn LogicalType::MAP(move(child_types));\n }\n \n+const LogicalType &MapType::KeyType(const LogicalType &type) {\n+\tD_ASSERT(type.id() == LogicalTypeId::MAP);\n+\treturn StructType::GetChildTypes(type)[0].second;\n+}\n+\n+const LogicalType &MapType::ValueType(const LogicalType &type) {\n+\tD_ASSERT(type.id() == LogicalTypeId::MAP);\n+\treturn StructType::GetChildTypes(type)[1].second;\n+}\n+\n //===--------------------------------------------------------------------===//\n // User Type\n //===--------------------------------------------------------------------===//\ndiff --git a/src/include/duckdb/common/types.hpp b/src/include/duckdb/common/types.hpp\nindex 2f0c94f5977b..cb33df4b8518 100644\n--- a/src/include/duckdb/common/types.hpp\n+++ b/src/include/duckdb/common/types.hpp\n@@ -522,6 +522,11 @@ struct StructType {\n \tDUCKDB_API static idx_t GetChildCount(const LogicalType &type);\n };\n \n+struct MapType {\n+\tDUCKDB_API static const LogicalType &KeyType(const LogicalType &type);\n+\tDUCKDB_API static const LogicalType &ValueType(const LogicalType &type);\n+};\n+\n \n string LogicalTypeIdToString(LogicalTypeId type);\n \n",
  "test_patch": "diff --git a/test/parquet/test_parquet_reader.test b/test/parquet/test_parquet_reader.test\nindex 8b5b1014afc6..ca387b55e57e 100644\n--- a/test/parquet/test_parquet_reader.test\n+++ b/test/parquet/test_parquet_reader.test\n@@ -61,63 +61,59 @@ SELECT * FROM parquet_scan('data/parquet-testing/manyrowgroups.parquet') limit 5\n 89\t\n 90\t\n \n-mode skip\n-\n query I\n SELECT * FROM parquet_scan('data/parquet-testing/map.parquet') limit 50;\n ----\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:19:57 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 921]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:19:59 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 922]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:19:59 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 919]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:01 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 908]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:02 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 908]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:05 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 907]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:05 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 910]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Cascade, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), pass, 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:07 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, MISS from ip-10-1-1-216.ec2.internal:3128, nosniff, 20]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:07 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 907]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:06 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 908]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:08 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 910]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:08 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 907]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:09 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 909]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:10 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 913]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Cascade, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), pass, 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:10 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, MISS from ip-10-1-1-216.ec2.internal:3128, nosniff, 20]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:11 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 873]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:12 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 868]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:14 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 871]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:15 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 871]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:15 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 870]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:14 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 867]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:16 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 874]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:16 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 869]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:20 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 874]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:20 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 877]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:21 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 876]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:22 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 873]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:23 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 874]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:26 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 879]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:25 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 876]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:26 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 875]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:26 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 874]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:28 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 872]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:29 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 876]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:29 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 878]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Cascade, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), pass, 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:31 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, MISS from ip-10-1-1-216.ec2.internal:3128, nosniff, 20]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:30 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 877]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Cascade, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), pass, 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:34 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, MISS from ip-10-1-1-216.ec2.internal:3128, nosniff, 20]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Cascade, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), pass, 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:34 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, MISS from ip-10-1-1-216.ec2.internal:3128, nosniff, 20]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Cascade, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), pass, 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:35 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, MISS from ip-10-1-1-216.ec2.internal:3128, nosniff, 20]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:36 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 920]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Cascade, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), pass, 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:36 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, MISS from ip-10-1-1-216.ec2.internal:3128, nosniff, 20]}\t\n-{key: [Content-Encoding, Connection, Content-Type, Date, Vary, Server, X-Content-Type-Options, Last-Modified, Content-Length], value: [gzip, keep-alive, application/javascript;charset=utf-8, Sat, 30 Jan 2021 16:20:43 GMT, Accept-Encoding, nginx/1.10.3, nosniff, Tue, 26 Jan 2021 15:49:12 GMT, 151]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:43 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 917]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:44 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 876]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:49 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 891]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:49 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 892]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:49 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 892]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:50 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 892]}\t\n-{key: [Content-Encoding, X-Frame-Options, Connection, Via, X-Xss-Protection, Content-Type, Date, X-Cache, Vary, Server, X-Cache-Lookup, X-Content-Type-Options, Content-Length], value: [gzip, SAMEORIGIN, keep-alive, 1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), 1; mode=block, text/html;charset=utf-8, Sat, 30 Jan 2021 16:20:53 GMT, MISS from ip-10-1-1-216.ec2.internal, Accept-Encoding, nginx/1.10.3, HIT from ip-10-1-1-216.ec2.internal:3128, nosniff, 891]}\t\n-\n-mode unskip\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:19:57 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=921}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:19:59 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=922}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:19:59 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=919}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:01 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=908}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:02 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=908}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:05 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=907}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:05 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=910}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Cascade=pass, X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:07 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=MISS from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=20}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:07 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=907}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:06 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=908}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:08 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=910}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:08 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=907}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:09 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=909}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:10 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=913}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Cascade=pass, X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:10 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=MISS from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=20}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:11 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=873}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:12 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=868}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:14 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=871}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:15 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=871}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:15 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=870}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:14 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=867}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:16 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=874}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:16 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=869}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:20 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=874}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:20 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=877}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:21 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=876}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:22 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=873}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:23 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=874}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:26 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=879}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:25 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=876}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:26 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=875}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:26 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=874}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:28 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=872}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:29 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=876}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:29 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=878}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Cascade=pass, X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:31 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=MISS from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=20}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:30 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=877}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Cascade=pass, X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:34 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=MISS from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=20}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Cascade=pass, X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:34 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=MISS from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=20}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Cascade=pass, X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:35 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=MISS from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=20}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:36 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=920}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Cascade=pass, X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:36 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=MISS from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=20}\n+{Content-Encoding=gzip, Connection=keep-alive, Content-Type=application/javascript;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:43 GMT, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Content-Type-Options=nosniff, Last-Modified=Tue, 26 Jan 2021 15:49:12 GMT, Content-Length=151}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:43 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=917}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:44 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=876}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:49 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=891}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:49 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=892}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:49 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=892}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:50 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=892}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:20:53 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=891}\n \n query I\n SELECT * FROM parquet_scan('data/parquet-testing/arrow/int32_decimal.parquet') limit 50;\n@@ -147,14 +143,10 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/int32_decimal.parquet') l\n 23.00\t\n 24.00\t\n \n-mode skip\n-\n query IIIIII\n SELECT * FROM parquet_scan('data/parquet-testing/arrow/nonnullable.impala.parquet') limit 50;\n ----\n-8\t[-1]\t[[-1, -2], []]\t{key: [k1], value: [-1]}\t[{key: [], value: []}, {key: [k1], value: [1]}, {key: [], value: []}, {key: [], value: []}]\t{a: -1, B: [-1], c: {D: [[{e: -1, f: nonnullable}]]}, G: {key: [], value: []}}\t\n-\n-mode unskip\n+8\t[-1]\t[[-1, -2], []]\t{k1=-1}\t[{}, {k1=1}, {}, {}]\t{'a': -1, 'B': [-1], 'c': {'D': [[{'e': -1, 'f': nonnullable}]]}, 'G': {}}\n \n query IIIIIIIIII\n SELECT * FROM parquet_scan('data/parquet-testing/bug687_nulls.parquet') limit 50;\n@@ -264,63 +256,10 @@ SELECT * FROM parquet_scan('data/parquet-testing/bug1554.parquet') limit 50;\n 1584883:7ANjserj/Xp/vz4XFpL1wOC68SXgZ4LvfE5ggEiTrl1yjOtH4TWIezdNsg4TNakKE5TsYM06P4Qd9HQenS9ksA==\tTrue\tNULL\t200\t\n 1584883:sV6uqASHK17GJVEXh2mxbbRIk08qivvqS561cy09Zn+SCUMHZL7J/BLRsx0/kYi1Uzkh52SsocpbQzuYeRT+lQ==\tFalse\tNULL\t200\t\n \n-mode skip\n-\n query IIIII\n SELECT * FROM parquet_scan('data/parquet-testing/apkwan.parquet') limit 50;\n ----\n-53e997b9b7602d9701f9f044\t[https://link.springer.com/10.1007/s00108-004-1229-0]\t[{name: M. Stoll, id: 56018d9645cedb3395e77641, org: Abteilung Klinische Immunologie Medizinische Hochschule Hannover}, {name: H. Heiken, id: 53f4d53adabfaef34ff814c8, org: Abteilung Klinische Immunologie Medizinische Hochschule Hannover}, {name: G. M. N. Behrens, id: 53f42afbdabfaec09f0ed4e0, org: Abteilung Klinische Immunologie Medizinische Hochschule Hannover}, {name: R. E. Schmidt, id: 56018d9645cedb3395e77644, org: Abteilung Klinische Immunologie Medizinische Hochschule Hannover}]\ten\tImmunrekonstitutionssyndrome (IRIS)\t\n-53e997b2b7602d9701f8fea5\t[]\t[{name: D. Barr, id: 5440d4cfdabfae805a6fd46c, org: Camborne School of Mines Redruth, Cornwall England}]\ten\tMineral bioprocessing\t\n-53e997aeb7602d9701f8856e\t[http://www.ncbi.nlm.nih.gov/pubmed/4669724?report=xml&format=text, http://www.ncbi.nlm.nih.gov/pubmed/5123793?report=xml&format=text, http://www.ncbi.nlm.nih.gov/pubmed/5315218?report=xml&format=text]\t[{name: B Sharf, id: 54059f34dabfae44f081a626, org: NULL}, {name: E Bental, id: 5434518edabfaebba5856df4, org: NULL}]\ten\tPancreatic encephalopathy.\t\n-53e997bab7602d9701fa1e34\t[]\t[{name: R. A. Kyle, id: 53f45704dabfaedd74e30781, org: NULL}]\ten\tWilliam Thornton\t\n-53e997abb7602d9701f846c0\t[]\t[{name: J. Mitchell, id: 5405942bdabfae44f08177f9, org: NULL}]\ten\tNew Writer\t\n-53e9978db7602d9701f4d7e8\t[]\t[{name: &NA;, id: NULL, org: NULL}]\ten\tMianserin\t\n-53e9984bb7602d970207c61d\t[http://subs.emis.de/LNI/Proceedings/Proceedings26/article639.html]\t[{name: Olaf Th. Buck, id: 53f4cef7dabfaeedd477c91f, org: NULL}, {name: Volker Linnemann, id: 544837ccdabfae87b7dea930, org: NULL}]\ten\tVerbalisierung von Datenbanktransaktionen.\t\n-53e99796b7602d9701f5cd36\t[]\t[{name: D. P. McKenzie, id: 53f4384cdabfaeb22f48309c, org: NULL}, {name: J. G. Gluyas, id: 53f42c87dabfaec09f108097, org: NULL}, {name: G. Eglinton, id: 56017dd445cedb3395e642dd, org: NULL}, {name: M. L. Coleman, id: 53f44fc6dabfaedd74e13c0e, org: NULL}]\ten\tGeneral Discussion\t\n-53e99809b7602d970201f551\t[http://dx.doi.org/10.1016/S0140-6736(00)82170-4, http://www.ncbi.nlm.nih.gov/pubmed/20914302?report=xml&format=text]\t[{name: A Moncrieff, id: 53f42dcfdabfaee43ebca730, org: NULL}, {name: L E Whitby, id: 53f4508fdabfaeb22f4e9af6, org: NULL}]\ten\tCooleys An\u00e6mia.\t\n-53e997a6b7602d9701f7ffb0\t[http://www.ncbi.nlm.nih.gov/pubmed/4051185?report=xml&format=text]\t[{name: R R Walters, id: 53f43b0edabfaee0d9b91d40, org: NULL}]\ten\tAffinity chromatography.\t\n-53e99813b7602d970202f0a1\t[http://dx.doi.org/10.1002/nadc.200747186]\t[{name: Sean Milmo, id: 53f45f64dabfaee4dc832b5f, org: NULL}]\ten\tReady for Reach?\t\n-53e99796b7602d9701f5ca78\t[http://www.ncbi.nlm.nih.gov/pubmed/1488574?report=xml&format=text]\t[{name: C Ferrando, id: 53f45048dabfaec09f1ef02, org: NULL}, {name: G Pi\u00e9drola, id: 53f42adfdabfaeb22f3de3e8, org: NULL}, {name: E P\u00e9rez-Rodriguez, id: 53f43ffddabfaee4dc7bed2d, org: NULL}, {name: L Fogu\u00e9, id: 53f469d7dabfaedf43653a66, org: NULL}, {name: J Zapatero, id: 53f4c9fbdabfaee57d77f0a6, org: NULL}, {name: J Flandes, id: 53f44cb0dabfaee4dc7ead2, org: NULL}, {name: J Mart\u00edn-Aresti, id: 53f43aa5dabfaeecd69879c, org: NULL}]\ten\tGigant carcinosarcoma.\t\n-53e997bab7602d9701fa3c16\t[]\t[]\tzh\tNULL\t\n-53e9984fb7602d970208630d\t[http://dx.doi.org/10.1002/anie.196901402]\t[{name: H. B\u00fcrger, id: 54089223dabfae8faa64dd56, org: NULL}, {name: U. Goetze, id: 53f4611ddabfaee0d9c1a2b4, org: NULL}]\ten\tTris(trimethylsilyl)indium\t\n-53e997f1b7602d9701ff36f0\t[http://dx.doi.org/10.1111/j.1444-0938.2001.tb06604.x]\t[{name: Robert F Hess, id: 53f4374cdabfaedf4358791c, org: NULL}]\ten\tAmblyopia: site unseen\t\n-53e9978eb7602d9701f53490\t[http://dx.doi.org/10.1287/opre.25.3.367]\t[{name: M. Segal, id: 54334533dabfaeb542182481, org: NULL}, {name: D. B. Weinberger, id: 53f47a08dabfaefedbbb9ba2, org: NULL}]\ten\tTurfing\t\n-53e99875b7602d97020adabd\t[http://dx.doi.org/10.1364/OE.18.011827, http://www.ncbi.nlm.nih.gov/pubmed/20589044?report=xml&format=text]\t[{name: Lan Liu, id: 53f4477cdabfaedf435d09b4, org: NULL}, {name: Shilie Zheng, id: 53f43998dabfaec22ba9f15f, org: NULL}, {name: Xianmin Zhang, id: 561c410845cedb3397fbe778, org: NULL}, {name: Xiaofeng Jin, id: 5444f555dabfae862d9faa75, org: NULL}, {name: Hao Chi, id: 56cb18bfc35f4f3c65660078, org: NULL}]\ten\tPerformances improvement in radio over fiber link through carrier suppression using Stimulated Brillouin scattering.\t\n-53e9982cb7602d970204f2b4\t[]\t[{name: D. P. Evans, id: 53f3a4ffdabfae4b34ad3032, org: NULL}]\ten\tPolarisation end-points\t\n-53e9978ab7602d9701f4a5b2\t[http://dx.doi.org/10.1007/BF01502987, http://link.springer.com/article/10.1007/BF01502987, http://dx.doi.org/10.1007/BF01503556, http://link.springer.com/article/10.1007/BF01503556, http://dx.doi.org/10.1007/BF01427524, http://link.springer.com/article/10.1007/BF01427524, http://dx.doi.org/10.1007/BF01423265, http://link.springer.com/article/10.1007/BF01423265]\t[{name: Wolfgang Ostwald, id: 53f4375adabfaee43ec388cf, org: NULL}]\ten\tNotizen\t\n-53e99813b7602d970202895c\t[http://dx.doi.org/10.1016/S0140-6736(00)61089-9, http://www.ncbi.nlm.nih.gov/pubmed/12814739?report=xml&format=text, http://www.ncbi.nlm.nih.gov/pubmed/14917868?report=xml&format=text, http://dx.doi.org/10.1016/S0140-6736(03)13657-4]\t[{name: J ROLLAND, id: 53f7922ddabfae8faa49a3b6, org: NULL}, {name: J WEIL, id: 5601b6f645cedb3395e9d9b, org: NULL}]\ten\tDiagnosis of tuberculomas]\t\n-53e997bdb7602d9701fa4eef\t[http://dx.doi.org/10.1007/978-0-387-09766-4_2400]\t[]\ten\tUncertainty Quantification.\t\n-53e997d7b7602d9701fcc1fd\t[]\t[{name: NULL, id: NULL, org: NULL}, {name: NULL, id: NULL, org: NULL}]\tzh\tNULL\t\n-53e99854b7602d970208cccc\t[http://dl.acm.org/citation.cfm?id=1658809]\t[{name: John Cherniavsky, id: 53f43b43dabfaedf435aebce, org: NULL}, {name: Eric Hamilton, id: 53f43147dabfaee1c0a66248, org: NULL}]\ten\tThe Learning Grid\t\n-53e99808b7602d970201b8d9\t[]\t[]\ten\tCloning Many Cows\t\n-53e997ecb7602d9701fe7475\t[http://www.ncbi.nlm.nih.gov/pubmed/20774473?report=xml&format=text]\t[{name: R H Simpson, id: 53f43528dabfaeb2ac04865d, org: NULL}, {name: K Stone, id: 5601aa8a45cedb3395e8ae97, org: NULL}]\ten\tASTHMA IN CHILDREN.\t\n-53e9983db7602d9702067ba2\t[http://dx.doi.org/10.1055/s-0028-1104942]\t[{name: W. Erhard, id: 54303485dabfaeca69bd6391, org: NULL}, {name: M. Reichmann, id: 53f44d91dabfaee43ec9a1aa, org: NULL}, {name: W. Delius, id: 54334287dabfaeb542180ed1, org: NULL}, {name: H. Sebening, id: 53f47665dabfaee0d9c6d739, org: NULL}, {name: G. Herrmann, id: 5440a60cdabfae7d84b99bd9, org: NULL}]\ten\tLangzeitverlauf nach Mitralklappenersatz\t\n-53e997bdb7602d9701fa68fe\t[]\t[{name: &NA;, id: NULL, org: NULL}]\ten\tTetanus vaccine\t\n-53e997aeb7602d9701f89275\t[]\t[{name: Jerry Menikoff, id: 53f42b12dabfaec09f0ef34e, org: NULL}, {name: Edward P. Richards, id: 53f44302dabfaee0d9ba65a6, org: NULL}, {name: Katharine C. Rathbun, id: 53f43b0ddabfaec09f1aa456, org: NULL}, {name: CARE LAW, id: 53f432a2dabfaee1c0a77460, org: NULL}, {name: John Neibel, id: 53f43844dabfaee2a1cf7fe8, org: NULL}, {name: Larry Maxwell, id: 53f38ec9dabfae4b34a478a2, org: NULL}]\ten\tPROFESSIONAL ASSOCIATIONS\t\n-53e9978db7602d9701f4dbed\t[]\t[{name: &NA;, id: NULL, org: NULL}]\ten\tMIDWIFERY.: \t\n-53e997b9b7602d9701f9f514\t[]\t[{name: C. K. Halford, id: 53f45d5bdabfaee4dc82bb77, org: Center for Energy Research | University of Nevada}, {name: R. F. Boehm, id: 53f44872dabfaee02ad21324, org: Center for Energy Research | University of Nevada}]\ten\tI. Mahderekal\t\n-53e997f8b7602d9701ffd9d3\t[http://dx.doi.org/10.1016/S0003-2670(01)80674-7]\t[{name: W. koch, id: 5448b152dabfae87b7e64788, org: NULL}]\ten\tH. ginsberg, leichtmetallanalyse \t\n-53e99866b7602d970209e5b3\t[http://dx.doi.org/10.1182/blood-2007-05-091710, http://www.ncbi.nlm.nih.gov/pubmed/17993616?report=xml&format=text]\t[{name: Vanta J. Jokubaitis, id: 53f433cbdabfaee2a1ccc99a, org: NULL}, {name: Lidia Sinka, id: 53f469f3dabfaee43ed04d57, org: NULL}, {name: Rebecca Driessen, id: 53f4ce8adabfaeed21f81d66, org: NULL}, {name: Genevieve Whitty, id: 53f457fddabfaedf43611bcd, org: NULL}, {name: David N. Haylock, id: 53f3aa43dabfae4b34af274e, org: NULL}, {name: Ivan Bertoncello, id: 53f47605dabfaedf43683457, org: NULL}, {name: Ian Smith, id: 54481db7dabfae87b7dda2f2, org: NULL}, {name: Bruno Peault, id: 53f47a61dabfaee43ed42418, org: NULL}, {name: Manuela Tavian, id: 53f46838dabfaedf4364d633, org: NULL}, {name: Paul J. Simmons, id: 54053724dabfae92b41b5367, org: NULL}]\ten\tAngiotensin-converting enzyme (CD143) marks hematopoietic stem cells in human embryonic, fetal, and adult hematopoietic tissues\t\n-53e99813b7602d970202982a\t[http://dx.doi.org/10.1190/1.1893044]\t[{name: joseph r mcconnell, id: 53f42ba1dabfaeb22f3ecc40, org: NULL}, {name: mark j potts, id: NULL, org: NULL}, {name: karl l schleicher, id: NULL, org: NULL}, {name: cameron b wason, id: 53f44d6ddabfaee4dc7ed91, org: NULL}]\ten\tDispersive noise attenuation\t\n-53e99876b7602d97020b00dd\t[http://dx.doi.org/10.1016/0300-9629(71)90197-6]\t[{name: Amada Alvarez Reimer, id: 53f433e6dabfaeee2299213d, org: NULL}]\ten\tChemical control of feeding behavior and role of glycine in the nutrition of Zoanthus (Coelenterata, Zoanthidea)\t\n-53e9978db7602d9701f52736\t[]\t[{name: Udo Reifner, id: 53f459c9dabfaee4dc81f2b5, org: Universit\u00e4t Hamburg, Hamburg, Deutschland}]\ten\tVerbraucherdarlehensvertrag\t\n-53e99785b7602d9701f44315\t[http://dx.doi.org/10.1007/978-1-4419-5906-5_550]\t[{name: Christophe De Canni\u00e8re, id: 54055d53dabfae91d3fd9f5a, org: NULL}]\ten\tBlowfish.\t\n-53e9978ab7602d9701f4a062\t[]\t[{name: Katrina Mathers, id: 53f46293dabfaee2a1d9f7de, org: The Lampshade Collective, Australia}]\ten\tNullarbor\t\n-53e99818b7602d9702034a4e\t[]\t[{name: Mark E. Rosheim, id: 53f43a0ddabfaedf435a11b9, org: NULL}]\ten\tRobot Wrist Actuators\t\n-53e997c2b7602d9701fb1bdb\t[]\t[{name: John W. Burton, id: 53f468a6dabfaefedbb91a28, org: NULL}]\ten\tSocial Change.\t\n-53e997d1b7602d9701fc515f\t[]\t[{name: NULL, id: NULL, org: NULL}]\tzh\tNULL\t\n-53e99846b7602d9702074c8d\t[]\t[{name: P. M. Clarkson, id: 54344b84dabfaebba5855ee3, org: NULL}, {name: T. I. Haweel, id: 53f43852dabfaee2a1cf8930, org: NULL}]\ten\tMedian LMS algorithm\t\n-53e99792b7602d9701f56ef2\t[]\t[{name: Walter G. Steblez, id: 53f4397ddabfaee1c0aba79, org: NULL}]\ten\tROMANIA\t\n-53e9979bb7602d9701f68259\t[]\t[{name: Reinhard T. Kr\u00fcger, id: 53f45ecedabfaee02ad77349, org: Riethof 7 30916 Isernhagen Deutschland}]\ten\tDer Selbststeuerungskreis\t\n-53e997e4b7602d9701fdd2d1\t[http://dx.doi.org/10.1126/science.267.5206.1920, http://www.sciencemag.org/content/267/5206/1920, http://www.ncbi.nlm.nih.gov/pubmed/17770099?report=xml&format=text]\t[{name: A Regalado, id: 53f42c4fdabfaeb22f3f8081, org: NULL}]\ten\tBlue-light special.\t\n-53e997e8b7602d9701fe2161\t[http://www.ncbi.nlm.nih.gov/pubmed/10332443?report=xml&format=text]\t[{name: ANDREW L. ALTMAN, id: 53f42deddabfaec22ba1ee48, org: From the Department of Urology, Case Western Reserve University, Cleveland, Ohio}, {name: ALLEN D. SEFTEL, id: 560f67d245cedb339772e652, org: From the Department of Urology, Case Western Reserve University, Cleveland, Ohio}, {name: SCOTT L. BROWN, id: 53f39082dabfae4b34a51ea8, org: From the Department of Urology, Case Western Reserve University, Cleveland, Ohio}, {name: NEHEMIA HAMPEL, id: 53f39851dabfae4b34a81604, org: From the Department of Urology, Case Western Reserve University, Cleveland, Ohio}]\ten\tCOCAINE ASSOCIATED PRIAPISM\t\n-53e997c2b7602d9701faedb5\t[]\t[{name: Kellogg S Stelle, id: 53f430fddabfaeb1a7bb8ee3, org: NULL}]\ten\tSupersymmetric mechanics\t\n-53e997a2b7602d9701f7264e\t[http://dx.doi.org/10.1007/BF00466590, https://link.springer.com/10.1007/BF00466590]\t[{name: egon stahl, id: 540837e6dabfae92b42316e0, org: NULL}, {name: j pfeifle, id: NULL, org: NULL}]\ten\tD\u00fcnnschicht-Chromatographie\t\n-53e9985fb7602d970209b3ee\t[http://dx.doi.org/10.1016/0005-1098(94)00137-8, https://www.sciencedirect.com/science/article/pii/0005109894001378]\t[{name: Ton Geerts, id: 53f43602dabfaee43ec2cba0, org: NULL}]\ten\tA note on lattices of Euclidean subspaces\t\n-53e99785b7602d9701f447a2\t[https://link.springer.com/10.1007/s10039-006-1167-2]\t[{name: U. Culemann, id: NULL, org: Universit\u00e4tsklinikum des Saarlandes Klinik f\u00fcr Unfall-, Hand- und Wiederherstellungschirurgie 66421 Homburg/Saar Deutschland 66421 Homburg/Saar Deutschland}, {name: U. Culemann, id: 53f47248dabfaeee22a7fb77, org: Klinik f\u00fcr Unfall|Universit\u00e4tsklinikum des Saarlandes}]\ten\tBeckenringverletzungen\t\n-53e997d1b7602d9701fc2268\t[http://dx.doi.org/10.1098/rstb.1982.0151, http://www.ncbi.nlm.nih.gov/pubmed/6130546?report=xml&format=text]\t[{name: K. J. Ullrich, id: 5406d5addabfae44f0860eb9, org: NULL}, {name: H. Murer, id: 53f437cedabfaedf4358c982, org: NULL}]\ten\tSulphate and Phosphate Transport in the Renal Proximal Tubule\t\n-\n-mode unskip\n+250 values hashing to 562eeaca73c7830bb6b5457b51156014\n \n query II\n SELECT * FROM parquet_scan('data/parquet-testing/arrow/nested_lists.snappy.parquet') limit 50;\n@@ -557,19 +496,15 @@ SELECT * FROM parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet'\n 38\t175839\t874\t1\t44\t84252.52\t0.04\t0.02\tN\tO\t1996-09-29\t1996-11-17\t1996-09-30\tCOLLECT COD\tMAIL\ts. blithely unusual theodolites am\t\n 39\t2320\t9821\t1\t44\t53782.08\t0.09\t0.06\tN\tO\t1996-11-14\t1996-12-15\t1996-12-12\tCOLLECT COD\tRAIL\teodolites. careful\t\n \n-mode skip\n-\n query III\n SELECT * FROM parquet_scan('data/parquet-testing/arrow/nested_maps.snappy.parquet') limit 50;\n ----\n-{key: [a], value: [{key: [1, 2], value: [True, False]}]}\t1\t1.0\t\n-{key: [], value: [{key: [1], value: [True]}]}\t1\t1.0\t\n-{key: [c], value: [NULL]}\t1\t1.0\t\n-{key: [d], value: [{key: [], value: []}]}\t1\t1.0\t\n-{key: [e], value: [{key: [1], value: [True]}]}\t1\t1.0\t\n-{key: [f], value: [{key: [3, 4, 5], value: [True, False, True]}]}\t1\t1.0\t\n-\n-mode unskip\n+{a={1=True, 2=False}}\t1\t1.000000\n+{b={1=True}}\t1\t1.000000\n+{c=NULL}\t1\t1.000000\n+{d={}}\t1\t1.000000\n+{e={1=True}}\t1\t1.000000\n+{f={3=True, 4=False, 5=True}}\t1\t1.000000\n \n query I\n SELECT * FROM parquet_scan('data/parquet-testing/arrow/dict-page-offset-zero.parquet') limit 50;\n@@ -1033,19 +968,15 @@ SELECT * FROM parquet_scan('data/parquet-testing/arrow/alltypes_plain.parquet')\n 0\tTrue\t0\t0\t0\t0\t0.0\t0.0\t01/01/09\t0\t2009-01-01 00:00:00\t\n 1\tFalse\t1\t1\t1\t10\t1.100000023841858\t10.1\t01/01/09\t1\t2009-01-01 00:01:00\t\n \n-mode skip \n-\n query II\n SELECT * FROM parquet_scan('data/parquet-testing/arrow/repeated_no_annotation.parquet') limit 50;\n ----\n-1\tNULL\t\n-2\tNULL\t\n-3\t{phone: []}\t\n-4\t{phone: [{number: 5555555555, kind: NULL}]}\t\n-5\t{phone: [{number: 1111111111, kind: home}]}\t\n-6\t{phone: [{number: 1111111111, kind: home}, {number: 2222222222, kind: NULL}, {number: 3333333333, kind: mobile}]}\t\n-\n-mode unskip \n+1\tNULL\n+2\tNULL\n+3\t{'phone': []}\n+4\t{'phone': [{'number': 5555555555, 'kind': NULL}]}\n+5\t{'phone': [{'number': 1111111111, 'kind': home}]}\n+6\t{'phone': [{'number': 1111111111, 'kind': home}, {'number': 2222222222, 'kind': NULL}, {'number': 3333333333, 'kind': mobile}]}\n \n query IIIIIIIIIIII\n SELECT * FROM parquet_scan('data/parquet-testing/data-types.parquet') limit 50;\n@@ -1112,20 +1043,16 @@ NULL\n 1996-01-01\t\n 1997-01-01\t\n \n-mode skip\n-\n query IIIIII\n SELECT * FROM parquet_scan('data/parquet-testing/arrow/nullable.impala.parquet') limit 50;\n ----\n-1\t[1, 2, 3]\t[[1, 2], [3, 4]]\t{key: [k1, k2], value: [1, 100]}\t[{key: [k1], value: [1]}]\t{A: 1, : [1], C: {d: [[{E: 10, F: aaa}, {E: -10, F: bb}], [{E: 11, F: c}]]}, g: {key: [foo], value: [{H: {i: [1.1]}}]}}\t\n-2\t[NULL, 1, 2, NULL, 3, NULL]\t[[NULL, 1, 2, NULL], [3, NULL, 4], [], NULL]\t{key: [k1, k2], value: [2, NULL]}\t[{key: [k3, k1], value: [NULL, 1]}, NULL, {key: [], value: []}]\t{A: NULL, : [NULL], C: {d: [[{E: NULL, F: NULL}, {E: 10, F: aaa}, {E: NULL, F: NULL}, {E: -10, F: bb}, {E: NULL, F: NULL}], [{E: 11, F: c}, NULL], [], NULL]}, g: {key: [g1, g2, g3, g4, g5], value: [{H: {i: [2.2, NULL]}}, {H: {i: []}}, NULL, {H: {i: NULL}}, {H: NULL}]}}\t\n-3\t[]\t[NULL]\t{key: [], value: []}\t[NULL, NULL]\t{A: NULL, : NULL, C: {d: []}, g: {key: [], value: []}}\t\n-4\tNULL\t[]\t{key: [], value: []}\t[]\t{A: NULL, : NULL, C: {d: NULL}, g: NULL}\t\n-5\tNULL\tNULL\t{key: [], value: []}\tNULL\t{A: NULL, : NULL, C: NULL, g: {key: [foo], value: [{H: {i: [2.2, 3.3]}}]}}\t\n-6\tNULL\tNULL\tNULL\tNULL\tNULL\t\n-7\tNULL\t[NULL, [5, 6]]\t{key: [k1, k3], value: [NULL, NULL]}\tNULL\t{A: 7, : [2, 3, NULL], C: {d: [[], [NULL], NULL]}, g: NULL}\t\n-\n-mode unskip\n+1\t[1, 2, 3]\t[[1, 2], [3, 4]]\t{k1=1, k2=100}\t[{k1=1}]\t{'A': 1, 'b': [1], 'C': {'d': [[{'E': 10, 'F': aaa}, {'E': -10, 'F': bbb}], [{'E': 11, 'F': c}]]}, 'g': {foo={'H': {'i': [1.100000]}}}}\n+2\t[NULL, 1, 2, NULL, 3, NULL]\t[[NULL, 1, 2, NULL], [3, NULL, 4], [], NULL]\t{k1=2, k2=NULL}\t[{k3=NULL, k1=1}, NULL, {}]\t{'A': NULL, 'b': [NULL], 'C': {'d': [[{'E': NULL, 'F': NULL}, {'E': 10, 'F': aaa}, {'E': NULL, 'F': NULL}, {'E': -10, 'F': bbb}, {'E': NULL, 'F': NULL}], [{'E': 11, 'F': c}, NULL], [], NULL]}, 'g': {g1={'H': {'i': [2.200000, NULL]}}, g2={'H': {'i': []}}, g3=NULL, g4={'H': {'i': NULL}}, g5={'H': NULL}}}\n+3\t[]\t[NULL]\t{}\t[NULL, NULL]\t{'A': NULL, 'b': NULL, 'C': {'d': []}, 'g': {}}\n+4\tNULL\t[]\t{}\t[]\t{'A': NULL, 'b': NULL, 'C': {'d': NULL}, 'g': NULL}\n+5\tNULL\tNULL\t{}\tNULL\t{'A': NULL, 'b': NULL, 'C': NULL, 'g': {foo={'H': {'i': [2.200000, 3.300000]}}}}\n+6\tNULL\tNULL\tNULL\tNULL\tNULL\n+7\tNULL\t[NULL, [5, 6]]\t{k1=NULL, k3=NULL}\tNULL\t{'A': 7, 'b': [2, 3, NULL], 'C': {'d': [[], [NULL], NULL]}, 'g': NULL}\n \n mode skip\n \ndiff --git a/test/sql/copy/parquet/test_parquet_nested.test b/test/sql/copy/parquet/test_parquet_nested.test\nindex dfda69aea05a..0955d0c18630 100644\n--- a/test/sql/copy/parquet/test_parquet_nested.test\n+++ b/test/sql/copy/parquet/test_parquet_nested.test\n@@ -5,40 +5,12 @@\n require parquet\n \n \n-query II\n-select struct_extract(h, 'key'), struct_extract(h, 'value') from (SELECT unlist(raw_header) h FROM parquet_scan('data/parquet-testing/map.parquet')) sq limit 30;\n+query I\n+select * FROM parquet_scan('data/parquet-testing/map.parquet') sq limit 3;\n ----\n-Content-Encoding\tgzip\n-X-Frame-Options\tSAMEORIGIN\n-Connection\tkeep-alive\n-Via\t1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf)\n-X-Xss-Protection\t1; mode=block\n-Content-Type\ttext/html;charset=utf-8\n-Date\tSat, 30 Jan 2021 16:19:57 GMT\n-X-Cache\tMISS from ip-10-1-1-216.ec2.internal\n-Vary\tAccept-Encoding\n-Server\tnginx/1.10.3\n-X-Cache-Lookup\tHIT from ip-10-1-1-216.ec2.internal:3128\n-X-Content-Type-Options\tnosniff\n-Content-Length\t921\n-Content-Encoding\tgzip\n-X-Frame-Options\tSAMEORIGIN\n-Connection\tkeep-alive\n-Via\t1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf)\n-X-Xss-Protection\t1; mode=block\n-Content-Type\ttext/html;charset=utf-8\n-Date\tSat, 30 Jan 2021 16:19:59 GMT\n-X-Cache\tMISS from ip-10-1-1-216.ec2.internal\n-Vary\tAccept-Encoding\n-Server\tnginx/1.10.3\n-X-Cache-Lookup\tHIT from ip-10-1-1-216.ec2.internal:3128\n-X-Content-Type-Options\tnosniff\n-Content-Length\t922\n-Content-Encoding\tgzip\n-X-Frame-Options\tSAMEORIGIN\n-Connection\tkeep-alive\n-Via\t1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf)\n-\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:19:57 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=921}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:19:59 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=922}\n+{Content-Encoding=gzip, X-Frame-Options=SAMEORIGIN, Connection=keep-alive, Via=1.1 ip-10-1-1-216.ec2.internal (squid/4.10-20200322-r358ad2fdf), X-Xss-Protection=1; mode=block, Content-Type=text/html;charset=utf-8, Date=Sat, 30 Jan 2021 16:19:59 GMT, X-Cache=MISS from ip-10-1-1-216.ec2.internal, Vary=Accept-Encoding, Server=nginx/1.10.3, X-Cache-Lookup=HIT from ip-10-1-1-216.ec2.internal:3128, X-Content-Type-Options=nosniff, Content-Length=919}\n \n # this was a hard one\n query II\ndiff --git a/test/sql/copy/parquet/writer/write_map.test b/test/sql/copy/parquet/writer/write_map.test\nnew file mode 100644\nindex 000000000000..806e4a5eefc6\n--- /dev/null\n+++ b/test/sql/copy/parquet/writer/write_map.test\n@@ -0,0 +1,101 @@\n+# name: test/sql/copy/parquet/writer/write_map.test\n+# description: Write maps\n+# group: [writer]\n+\n+require parquet\n+\n+# int -> int map\n+statement ok\n+CREATE TABLE int_maps(m MAP(INTEGER,INTEGER));\n+\n+statement ok\n+INSERT INTO int_maps VALUES \n+\t(MAP([42, 84], [1, 2])), \n+\t(MAP([101, 201, 301], [3, NULL, 5])),\n+\t(MAP([55, 66, 77], [6, 7, NULL]))\n+;\n+\n+statement ok\n+COPY int_maps TO '__TEST_DIR__/int_map.parquet' (FORMAT PARQUET)\n+\n+query I\n+SELECT * FROM '__TEST_DIR__/int_map.parquet'\n+----\n+{42=1, 84=2}\n+{101=3, 201=NULL, 301=5}\n+{55=6, 66=7, 77=NULL}\n+\n+statement ok\n+INSERT INTO int_maps VALUES\n+\t(MAP([NULL], [NULL]))\n+;\n+\n+# parquet does not support keys with null values\n+statement error\n+COPY string_map TO '__TEST_DIR__/int_maps.parquet' (FORMAT PARQUET)\n+\n+# string -> string map\n+statement ok\n+CREATE TABLE string_map(m MAP(VARCHAR,VARCHAR));\n+\n+statement ok\n+INSERT INTO string_map VALUES \n+\t(MAP(['key1', 'key2'], ['value1', 'value2'])), \n+\t(MAP(['best band', 'best boyband', 'richest person'], ['Tenacious D', 'Backstreet Boys', 'Jon Lajoie'])),\n+\t(MAP([], [])),\n+\t(NULL),\n+\t(MAP(['option'], [NULL]))\n+;\n+\n+statement ok\n+COPY string_map TO '__TEST_DIR__/string_map.parquet' (FORMAT PARQUET)\n+\n+query I\n+SELECT * FROM '__TEST_DIR__/string_map.parquet'\n+----\n+{key1=value1, key2=value2}\n+{best band=Tenacious D, best boyband=Backstreet Boys, richest person=Jon Lajoie}\n+{}\n+NULL\n+{option=NULL}\n+\n+statement ok\n+INSERT INTO string_map VALUES\n+\t(MAP([NULL], [NULL]))\n+;\n+\n+# parquet does not support keys with null values\n+statement error\n+COPY string_map TO '__TEST_DIR__/string_map.parquet' (FORMAT PARQUET)\n+\n+# list -> list map\n+statement ok\n+CREATE TABLE list_map(m MAP(INT[],INT[]));\n+\n+statement ok\n+INSERT INTO list_map VALUES \n+\t(MAP([[1, 2, 3], [], [4, 5]], [[6, 7, 8], NULL, [NULL]])),\n+\t(MAP([], [])),\n+\t(MAP([[1]], [NULL])),\n+\t(MAP([[10, 12, 14, 16, 18, 20], [], []], [[1], [2], [3]]))\n+;\n+\n+statement ok\n+COPY list_map TO '__TEST_DIR__/list_map.parquet' (FORMAT PARQUET)\n+\n+query I\n+SELECT * FROM '__TEST_DIR__/list_map.parquet'\n+----\n+{[1, 2, 3]=[6, 7, 8], []=NULL, [4, 5]=[NULL]}\n+{}\n+{[1]=NULL}\n+{[10, 12, 14, 16, 18, 20]=[1], []=[2], []=[3]}\n+\n+statement ok\n+INSERT INTO list_map VALUES\n+\t(MAP([NULL], [NULL]))\n+;\n+\n+# parquet does not support keys with null values\n+statement error\n+COPY list_map TO '__TEST_DIR__/list_map.parquet' (FORMAT PARQUET)\ndiff --git a/test/sqlite/result_helper.cpp b/test/sqlite/result_helper.cpp\nindex c24e8fa9d271..8782a3e8a9e6 100644\n--- a/test/sqlite/result_helper.cpp\n+++ b/test/sqlite/result_helper.cpp\n@@ -220,7 +220,8 @@ void TestResultHelper::CheckQueryResult(unique_ptr<MaterializedQueryResult> owne\n \t\t\t\t\t\tColumnCountMismatch(original_expected_columns, row_wise);\n \t\t\t\t\t}\n \t\t\t\t\tPrintLineSep();\n-\t\t\t\t\tPrintErrorHeader(\"Error in test! Column count mismatch after splitting on tab!\");\n+\t\t\t\t\tPrintErrorHeader(\"Error in test! Column count mismatch after splitting on tab on row \" +\n+\t\t\t\t\t                 to_string(i + 1) + \"!\");\n \t\t\t\t\tstd::cerr << \"Expected \" << termcolor::bold << expected_column_count << termcolor::reset\n \t\t\t\t\t          << \" columns, but got \" << termcolor::bold << splits.size() << termcolor::reset\n \t\t\t\t\t          << \" columns\" << std::endl;\n@@ -510,7 +511,7 @@ void TestResultHelper::PrintSQL(string sql) {\n \tstd::cerr << std::endl;\n }\n \n-void TestResultHelper::PrintErrorHeader(const char *description) {\n+void TestResultHelper::PrintErrorHeader(const string &description) {\n \tPrintLineSep();\n \tstd::cerr << termcolor::red << termcolor::bold << description << \" \" << termcolor::reset;\n \tstd::cerr << termcolor::bold << \"(\" << file_name << \":\" << query_line << \")!\" << termcolor::reset << std::endl;\ndiff --git a/test/sqlite/result_helper.hpp b/test/sqlite/result_helper.hpp\nindex 97987a3eb0ce..1fea42595eef 100644\n--- a/test/sqlite/result_helper.hpp\n+++ b/test/sqlite/result_helper.hpp\n@@ -42,7 +42,7 @@ class TestResultHelper {\n \tstatic void PrintLineSep();\n \tstatic void PrintHeader(string header);\n \tstatic void PrintSQL(string sql);\n-\tvoid PrintErrorHeader(const char *description);\n+\tvoid PrintErrorHeader(const string &description);\n \tstatic void PrintResultError(vector<string> &result_values, vector<string> &values, idx_t expected_column_count,\n \t                             bool row_wise);\n \tstatic void PrintResultError(MaterializedQueryResult &result, vector<string> &values, idx_t expected_column_count,\n",
  "problem_statement": "Improper casting from parquet map to duckdb map via parquet_scan\nIt's unclear to me if this has not been implemented or not, so apologies if this is a known issue:\r\n\r\nI am writing a map column in my parquet files and trying to read them from duckdb using the python library.\r\nWhen I query the files using pyarrow, the data looks correct and it sees it as a map:\r\n```\r\ndimensionMap: map<string, string> not null\r\n  child 0, entries: struct<key: string not null, value: string not null> not null\r\n      child 0, key: string not null\r\n      child 1, value: string not null\r\n```\r\n\r\nHowever I cannot seem to actually extract data from the map easily:\r\nWhen I am unable to use any of the built in map functions, as it seems the types aren't quite working as expected:\r\nif trying to use the bracket notation `map['foo']` I get an error:\r\n```\r\nRuntimeError: Binder Error: No function matches the given name and argument types 'array_extract(LIST<STRUCT<key: VARCHAR, value: VARCHAR>>, VARCHAR)'. You might need to add explicit type casts.\r\n```\r\nand if trying to use `map_extract` directly I get an error :\r\n```\r\nRuntimeError: Binder Error: MAP_EXTRACT can only operate on MAPs\r\n```\r\n\r\nIt seems some of the types are correct, but the queries don't seem to actually run as expected, the output of parquet_schema(...) for the relevant columns is given below:\r\n![Screen Shot 2021-12-07 at 12 41 53 PM](https://user-images.githubusercontent.com/7540465/145103733-e15caaa9-0b05-48b9-9b17-c3afd1e770ad.png)\r\n\r\n#### What happens?\r\nParquet map types of nested structs cannot be read by duckdb. \r\n\r\n#### To Reproduce\r\nSteps to reproduce the behavior. Bonus points if those are only SQL queries.\r\nI had to create an example file using pyarrow (I was unable to actually insert data using pyarrow since my project writes the data from the jvm).\r\n\r\n```\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\nimport duckdb \r\nmaptype = pa.map_(pa.string(), pa.string())\r\nt = pa.Table.from_pydict({'my_map':[]}, pa.schema([pa.field('my_map',maptype)])) \r\npq.write_table(t, 'test')\r\ncursor = duckdb.connect()\r\ncursor.execute(\"SELECT my_map['k'] FROM parquet_scan('test')\").fetchall()\r\ncursor.execute(\"SELECT map_extract(my_map,'k') FROM parquet_scan('test')\").fetchall()\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: iOS\r\n - DuckDB Version: 0.3.1\r\n - DuckDB Client: python\r\n\r\n#### Before Submitting\r\n\r\n- [X] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "This might be an issue specifically with the `parquet_scan` API. If I import the table directly from arrow it appears to work without issues. \r\n```\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\nimport duckdb \r\nt = pa.Table.from_pydict({'my_map':[]}, pa.schema([pa.field('my_map',maptype)])) \r\narrow = duckdb.arrow(t)\r\narrow.query('arrow',\"SELECT my_map['k'] FROM arrow\").fetchall()\r\narrow.query('arrow',\"SELECT map_extract(my_map,'k') FROM arrow\").fetchall()\r\n```",
  "created_at": "2021-12-23T20:54:01Z"
}