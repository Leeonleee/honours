{
  "repo": "duckdb/duckdb",
  "pull_number": 5801,
  "instance_id": "duckdb__duckdb-5801",
  "issue_numbers": [
    "5791"
  ],
  "base_commit": "8caaee9cc8b9cc5d0dddb5dc69d0ea7cc9876229",
  "patch": "diff --git a/extension/icu/icu-timezone.cpp b/extension/icu/icu-timezone.cpp\nindex 0c17fdbda5ce..4d84c1fa601c 100644\n--- a/extension/icu/icu-timezone.cpp\n+++ b/extension/icu/icu-timezone.cpp\n@@ -1,6 +1,7 @@\n #include \"duckdb/common/types/date.hpp\"\n #include \"duckdb/common/types/time.hpp\"\n #include \"duckdb/common/types/timestamp.hpp\"\n+#include \"duckdb/function/cast/cast_function_set.hpp\"\n #include \"duckdb/parser/parsed_data/create_scalar_function_info.hpp\"\n #include \"duckdb/parser/parsed_data/create_table_function_info.hpp\"\n #include \"include/icu-datefunc.hpp\"\n@@ -85,12 +86,16 @@ static void ICUTimeZoneFunction(ClientContext &context, TableFunctionInput &data\n \toutput.SetCardinality(index);\n }\n \n-struct ICUFromLocalTimestamp : public ICUDateFunc {\n-\tstatic inline timestamp_t Operation(icu::Calendar *calendar, timestamp_t local) {\n+struct ICUFromNaiveTimestamp : public ICUDateFunc {\n+\tstatic inline timestamp_t Operation(icu::Calendar *calendar, timestamp_t naive) {\n+\t\tif (!Timestamp::IsFinite(naive)) {\n+\t\t\treturn naive;\n+\t\t}\n+\n \t\t// Extract the parts from the \"instant\"\n \t\tdate_t local_date;\n \t\tdtime_t local_time;\n-\t\tTimestamp::Convert(local, local_date, local_time);\n+\t\tTimestamp::Convert(naive, local_date, local_time);\n \n \t\tint32_t year;\n \t\tint32_t mm;\n@@ -116,19 +121,52 @@ struct ICUFromLocalTimestamp : public ICUDateFunc {\n \n \t\treturn GetTime(calendar, micros);\n \t}\n+\n+\tstatic bool CastFromNaive(Vector &source, Vector &result, idx_t count, CastParameters &parameters) {\n+\t\tauto &cast_data = (CastData &)*parameters.cast_data;\n+\t\tauto info = (BindData *)cast_data.info.get();\n+\t\tCalendarPtr calendar(info->calendar->clone());\n+\n+\t\tUnaryExecutor::Execute<timestamp_t, timestamp_t>(\n+\t\t    source, result, count, [&](timestamp_t input) { return Operation(calendar.get(), input); });\n+\t\treturn true;\n+\t}\n+\n+\tstatic BoundCastInfo BindCastFromNaive(BindCastInput &input, const LogicalType &source, const LogicalType &target) {\n+\t\tif (!input.context) {\n+\t\t\tthrow InternalException(\"Missing context for TIMESTAMP to TIMESTAMPTZ cast.\");\n+\t\t}\n+\n+\t\tauto cast_data = make_unique<CastData>(make_unique<BindData>(*input.context));\n+\n+\t\treturn BoundCastInfo(CastFromNaive, move(cast_data));\n+\t}\n+\n+\tstatic void AddCasts(ClientContext &context) {\n+\t\tauto &config = DBConfig::GetConfig(context);\n+\t\tauto &casts = config.GetCastFunctions();\n+\n+\t\tcasts.RegisterCastFunction(LogicalType::TIMESTAMP, LogicalType::TIMESTAMP_TZ, BindCastFromNaive);\n+\t}\n };\n \n-struct ICUToLocalTimestamp : public ICUDateFunc {\n+struct ICUToNaiveTimestamp : public ICUDateFunc {\n \tstatic inline timestamp_t Operation(icu::Calendar *calendar, timestamp_t instant) {\n+\t\tif (!Timestamp::IsFinite(instant)) {\n+\t\t\treturn instant;\n+\t\t}\n+\n \t\t// Extract the time zone parts\n \t\tauto micros = SetTime(calendar, instant);\n+\t\tconst auto era = ExtractField(calendar, UCAL_ERA);\n \t\tconst auto year = ExtractField(calendar, UCAL_YEAR);\n \t\tconst auto mm = ExtractField(calendar, UCAL_MONTH) + 1;\n \t\tconst auto dd = ExtractField(calendar, UCAL_DATE);\n \n+\t\tconst auto yyyy = era ? year : (-year + 1);\n \t\tdate_t local_date;\n-\t\tif (!Date::TryFromDate(year, mm, dd, local_date)) {\n-\t\t\tthrow ConversionException(\"Unable to create local date in TIMEZONE function\");\n+\t\tif (!Date::TryFromDate(yyyy, mm, dd, local_date)) {\n+\t\t\tthrow ConversionException(\"Unable to convert TIMESTAMPTZ to local date\");\n \t\t}\n \n \t\tconst auto hr = ExtractField(calendar, UCAL_HOUR_OF_DAY);\n@@ -139,12 +177,39 @@ struct ICUToLocalTimestamp : public ICUDateFunc {\n \t\tmicros += millis * Interval::MICROS_PER_MSEC;\n \t\tdtime_t local_time = Time::FromTime(hr, mn, secs, micros);\n \n-\t\ttimestamp_t result;\n-\t\tif (!Timestamp::TryFromDatetime(local_date, local_time, result)) {\n-\t\t\tthrow ConversionException(\"Unable to create local timestamp in TIMEZONE function\");\n+\t\ttimestamp_t naive;\n+\t\tif (!Timestamp::TryFromDatetime(local_date, local_time, naive)) {\n+\t\t\tthrow ConversionException(\"Unable to convert TIMESTAMPTZ to local TIMESTAMP\");\n \t\t}\n \n-\t\treturn result;\n+\t\treturn naive;\n+\t}\n+\n+\tstatic bool CastToNaive(Vector &source, Vector &result, idx_t count, CastParameters &parameters) {\n+\t\tauto &cast_data = (CastData &)*parameters.cast_data;\n+\t\tauto info = (BindData *)cast_data.info.get();\n+\t\tCalendarPtr calendar(info->calendar->clone());\n+\n+\t\tUnaryExecutor::Execute<timestamp_t, timestamp_t>(\n+\t\t    source, result, count, [&](timestamp_t input) { return Operation(calendar.get(), input); });\n+\t\treturn true;\n+\t}\n+\n+\tstatic BoundCastInfo BindCastToNaive(BindCastInput &input, const LogicalType &source, const LogicalType &target) {\n+\t\tif (!input.context) {\n+\t\t\tthrow InternalException(\"Missing context for TIMESTAMPTZ to TIMESTAMP cast.\");\n+\t\t}\n+\n+\t\tauto cast_data = make_unique<CastData>(make_unique<BindData>(*input.context));\n+\n+\t\treturn BoundCastInfo(CastToNaive, move(cast_data));\n+\t}\n+\n+\tstatic void AddCasts(ClientContext &context) {\n+\t\tauto &config = DBConfig::GetConfig(context);\n+\t\tauto &casts = config.GetCastFunctions();\n+\n+\t\tcasts.RegisterCastFunction(LogicalType::TIMESTAMP_TZ, LogicalType::TIMESTAMP, BindCastToNaive);\n \t}\n };\n \n@@ -186,7 +251,7 @@ struct ICULocalTimestampFunc : public ICUDateFunc {\n \t\tauto calendar = calendar_ptr.get();\n \n \t\tconst auto now = info.now;\n-\t\treturn ICUToLocalTimestamp::Operation(calendar, now);\n+\t\treturn ICUToNaiveTimestamp::Operation(calendar, now);\n \t}\n \n \tstatic void Execute(DataChunk &input, ExpressionState &state, Vector &result) {\n@@ -244,13 +309,8 @@ struct ICUTimeZoneFunc : public ICUDateFunc {\n \t\t\t\tConstantVector::SetNull(result, true);\n \t\t\t} else {\n \t\t\t\tSetTimeZone(calendar, *ConstantVector::GetData<string_t>(tz_vec));\n-\t\t\t\tUnaryExecutor::Execute<timestamp_t, timestamp_t>(ts_vec, result, input.size(), [&](timestamp_t ts) {\n-\t\t\t\t\tif (Timestamp::IsFinite(ts)) {\n-\t\t\t\t\t\treturn OP::Operation(calendar, ts);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\treturn ts;\n-\t\t\t\t\t}\n-\t\t\t\t});\n+\t\t\t\tUnaryExecutor::Execute<timestamp_t, timestamp_t>(\n+\t\t\t\t    ts_vec, result, input.size(), [&](timestamp_t ts) { return OP::Operation(calendar, ts); });\n \t\t\t}\n \t\t} else {\n \t\t\tBinaryExecutor::Execute<string_t, timestamp_t, timestamp_t>(tz_vec, ts_vec, result, input.size(),\n@@ -268,9 +328,9 @@ struct ICUTimeZoneFunc : public ICUDateFunc {\n \tstatic void AddFunction(const string &name, ClientContext &context) {\n \t\tScalarFunctionSet set(name);\n \t\tset.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::TIMESTAMP}, LogicalType::TIMESTAMP_TZ,\n-\t\t                               Execute<ICUFromLocalTimestamp>, Bind));\n+\t\t                               Execute<ICUFromNaiveTimestamp>, Bind));\n \t\tset.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::TIMESTAMP_TZ}, LogicalType::TIMESTAMP,\n-\t\t                               Execute<ICUToLocalTimestamp>, Bind));\n+\t\t                               Execute<ICUToNaiveTimestamp>, Bind));\n \n \t\tCreateScalarFunctionInfo func_info(set);\n \t\tauto &catalog = Catalog::GetSystemCatalog(context);\n@@ -279,14 +339,20 @@ struct ICUTimeZoneFunc : public ICUDateFunc {\n };\n \n void RegisterICUTimeZoneFunctions(ClientContext &context) {\n+\t//\tTable functions\n \tauto &catalog = Catalog::GetSystemCatalog(context);\n \tTableFunction tz_names(\"pg_timezone_names\", {}, ICUTimeZoneFunction, ICUTimeZoneBind, ICUTimeZoneInit);\n \tCreateTableFunctionInfo tz_names_info(move(tz_names));\n \tcatalog.CreateTableFunction(context, &tz_names_info);\n \n+\t//\tScalar functions\n \tICUTimeZoneFunc::AddFunction(\"timezone\", context);\n \tICULocalTimestampFunc::AddFunction(\"current_localtimestamp\", context);\n \tICULocalTimeFunc::AddFunction(\"current_localtime\", context);\n+\n+\t// \tCasts\n+\tICUFromNaiveTimestamp::AddCasts(context);\n+\tICUToNaiveTimestamp::AddCasts(context);\n }\n \n } // namespace duckdb\n",
  "test_patch": "diff --git a/test/sql/function/timestamp/test_icu_datediff.test b/test/sql/function/timestamp/test_icu_datediff.test\nindex 3001c3fe86ca..1da070a49ee2 100644\n--- a/test/sql/function/timestamp/test_icu_datediff.test\n+++ b/test/sql/function/timestamp/test_icu_datediff.test\n@@ -100,18 +100,18 @@ FROM (\n \tFROM generate_series('2022-09-01'::DATE, '2022-09-12'::DATE, INTERVAL 1 DAY) tbl(d)\n );\n ----\n-2022-08-31 08:00:00-07\t2022-09-01 00:00:00-07\t0\n-2022-09-01 08:00:00-07\t2022-09-02 00:00:00-07\t0\n-2022-09-02 08:00:00-07\t2022-09-03 00:00:00-07\t0\n-2022-09-03 08:00:00-07\t2022-09-04 00:00:00-07\t0\n-2022-09-04 08:00:00-07\t2022-09-05 00:00:00-07\t1\n-2022-09-05 08:00:00-07\t2022-09-06 00:00:00-07\t0\n-2022-09-06 08:00:00-07\t2022-09-07 00:00:00-07\t0\n-2022-09-07 08:00:00-07\t2022-09-08 00:00:00-07\t0\n-2022-09-08 08:00:00-07\t2022-09-09 00:00:00-07\t0\n-2022-09-09 08:00:00-07\t2022-09-10 00:00:00-07\t0\n-2022-09-10 08:00:00-07\t2022-09-11 00:00:00-07\t0\n-2022-09-11 08:00:00-07\t2022-09-12 00:00:00-07\t1\n+2022-08-31 15:00:00-07\t2022-09-01 07:00:00-07\t0\n+2022-09-01 15:00:00-07\t2022-09-02 07:00:00-07\t0\n+2022-09-02 15:00:00-07\t2022-09-03 07:00:00-07\t0\n+2022-09-03 15:00:00-07\t2022-09-04 07:00:00-07\t0\n+2022-09-04 15:00:00-07\t2022-09-05 07:00:00-07\t1\n+2022-09-05 15:00:00-07\t2022-09-06 07:00:00-07\t0\n+2022-09-06 15:00:00-07\t2022-09-07 07:00:00-07\t0\n+2022-09-07 15:00:00-07\t2022-09-08 07:00:00-07\t0\n+2022-09-08 15:00:00-07\t2022-09-09 07:00:00-07\t0\n+2022-09-09 15:00:00-07\t2022-09-10 07:00:00-07\t0\n+2022-09-10 15:00:00-07\t2022-09-11 07:00:00-07\t0\n+2022-09-11 15:00:00-07\t2022-09-12 07:00:00-07\t1\n \n query I\n SELECT date_diff('week', '2015-10-06 04:22:11'::timestamptz, '2016-11-25 23:19:37'::timestamptz);\ndiff --git a/test/sql/function/timestamp/test_icu_datepart.test b/test/sql/function/timestamp/test_icu_datepart.test\nindex aa34c7e6b961..d6325327fa37 100644\n--- a/test/sql/function/timestamp/test_icu_datepart.test\n+++ b/test/sql/function/timestamp/test_icu_datepart.test\n@@ -12,18 +12,18 @@ statement ok\n SET TimeZone = 'America/Los_Angeles';\n \n statement ok\n-CREATE TABLE timestamps AS SELECT ts::TIMESTAMPTZ AS ts, part FROM (VALUES\n-\t('0044-03-13 (BC) 10:33:41.987654+01', 'era'),\n-\t('1962-07-31 12:20:48.123456+00', 'epoch'),\n-\t('2021-01-01 00:00:00+00', 'year'),\n-\t('2021-02-02 00:00:00+00', 'month'),\n-\t('2021-11-26 10:15:13.123456+00', 'microsecond'),\n-\t('2021-11-15 02:30:00-08', 'hour'),\n-\t('2021-11-15 02:30:00-07', 'minute'),\n-\t('2021-12-25 00:00:00+02', 'day'),\n-\t('infinity', 'second'),\n-\t('-infinity', 'decade'),\n-\t(NULL, 'century'),\n+CREATE TABLE timestamps AS SELECT * FROM (VALUES\n+\t('0044-03-13 (BC) 10:33:41.987654+01'::TIMESTAMPTZ, 'era'),\n+\t('1962-07-31 12:20:48.123456+00'::TIMESTAMPTZ, 'epoch'),\n+\t('2021-01-01 00:00:00+00'::TIMESTAMPTZ, 'year'),\n+\t('2021-02-02 00:00:00+00'::TIMESTAMPTZ, 'month'),\n+\t('2021-11-26 10:15:13.123456+00'::TIMESTAMPTZ, 'microsecond'),\n+\t('2021-11-15 02:30:00-08'::TIMESTAMPTZ, 'hour'),\n+\t('2021-11-15 02:30:00-07'::TIMESTAMPTZ, 'minute'),\n+\t('2021-12-25 00:00:00+02'::TIMESTAMPTZ, 'day'),\n+\t('infinity'::TIMESTAMPTZ, 'second'),\n+\t('-infinity'::TIMESTAMPTZ, 'decade'),\n+\t(NULL::TIMESTAMPTZ, 'century'),\n ) tbl(ts, part);\n \n query II\n@@ -31,7 +31,7 @@ SELECT year(ts), year(ts::TIMESTAMP) FROM timestamps;\n ----\n 44\t-43\n 1962\t1962\n-2020\t2021\n+2020\t2020\n 2021\t2021\n 2021\t2021\n 2021\t2021\n@@ -46,7 +46,7 @@ SELECT month(ts), month(ts::TIMESTAMP) FROM timestamps;\n ----\n 3\t3\n 7\t7\n-12\t1\n+12\t12\n 2\t2\n 11\t11\n 11\t11\n@@ -59,10 +59,10 @@ NULL\tNULL\n query II\n SELECT day(ts), day(ts::TIMESTAMP) FROM timestamps;\n ----\n-15\t13\n+15\t15\n+31\t31\n 31\t31\n-31\t1\n-1\t2\n+1\t1\n 26\t26\n 15\t15\n 15\t15\n@@ -120,7 +120,7 @@ NULL\tNULL\n query II\n SELECT microsecond(ts), microsecond(ts::TIMESTAMP) FROM timestamps;\n ----\n-43987654\t41987654\n+43987654\t43987654\n 48123456\t48123456\n 0\t0\n 0\t0\n@@ -135,7 +135,7 @@ NULL\tNULL\n query II\n SELECT millisecond(ts), millisecond(ts::TIMESTAMP) FROM timestamps;\n ----\n-43987\t41987\n+43987\t43987\n 48123\t48123\n 0\t0\n 0\t0\n@@ -150,7 +150,7 @@ NULL\tNULL\n query II\n SELECT second(ts), second(ts::TIMESTAMP) FROM timestamps;\n ----\n-43\t41\n+43\t43\n 48\t48\n 0\t0\n 0\t0\n@@ -165,7 +165,7 @@ NULL\tNULL\n query II\n SELECT minute(ts), minute(ts::TIMESTAMP) FROM timestamps;\n ----\n-40\t33\n+40\t40\n 20\t20\n 0\t0\n 0\t0\n@@ -180,25 +180,26 @@ NULL\tNULL\n query II\n SELECT hour(ts), hour(ts::TIMESTAMP) FROM timestamps;\n ----\n-1\t9\n-5\t12\n-16\t0\n-16\t0\n-2\t10\n-2\t10\n-1\t9\n-14\t22\n+1\t1\n+5\t5\n+16\t16\n+16\t16\n+2\t2\n+2\t2\n+1\t1\n+14\t14\n NULL\tNULL\n NULL\tNULL\n NULL\tNULL\n \n+# ICU uses the Julian calendar before the Gregorian Epoch.\n query II\n SELECT dayofweek(ts), dayofweek(ts::TIMESTAMP) FROM timestamps;\n ----\n-3\t3\n+3\t5\n 2\t2\n-4\t5\n-1\t2\n+4\t4\n+1\t1\n 5\t5\n 1\t1\n 1\t1\n@@ -210,10 +211,10 @@ NULL\tNULL\n query II\n SELECT isodow(ts), isodow(ts::TIMESTAMP) FROM timestamps;\n ----\n-4\t3\n+4\t5\n 3\t2\n-5\t5\n-2\t2\n+5\t4\n+2\t1\n 6\t5\n 2\t1\n 2\t1\n@@ -240,10 +241,10 @@ NULL\tNULL\n query II\n SELECT dayofyear(ts), dayofyear(ts::TIMESTAMP) FROM timestamps;\n ----\n-74\t72\n+74\t74\n 212\t212\n-366\t1\n-32\t33\n+366\t366\n+32\t32\n 330\t330\n 319\t319\n 319\t319\n@@ -257,7 +258,7 @@ SELECT quarter(ts), quarter(ts::TIMESTAMP) FROM timestamps;\n ----\n 1\t1\n 3\t3\n-4\t1\n+4\t4\n 1\t1\n 4\t4\n 4\t4\n@@ -300,14 +301,14 @@ NULL\tNULL\n query II\n SELECT epoch(ts), epoch(ts::TIMESTAMP) FROM timestamps;\n ----\n--63517990756\t-63517962378\n--234211151\t-234185951\n-1609430400\t1609459200\n-1612195200\t1612224000\n-1637892913\t1637921713\n-1636943400\t1636972200\n-1636939800\t1636968600\n-1640354400\t1640383200\n+-63517990756\t-63517817956\n+-234211151\t-234211151\n+1609430400\t1609430400\n+1612195200\t1612195200\n+1637892913\t1637892913\n+1636943400\t1636943400\n+1636939800\t1636939800\n+1640354400\t1640354400\n NULL\tNULL\n NULL\tNULL\n NULL\tNULL\n@@ -316,11 +317,11 @@ query III\n SELECT date_part(part, ts), date_part(part, ts::TIMESTAMP), part FROM timestamps;\n ----\n 0\t0\tera\n--234211151\t-234185951\tepoch\n-2020\t2021\tyear\n+-234211151\t-234211151\tepoch\n+2020\t2020\tyear\n 2\t2\tmonth\n 13123456\t13123456\tmicrosecond\n-2\t10\thour\n+2\t2\thour\n 30\t30\tminute\n 24\t24\tday\n NULL\tNULL\tsecond\n@@ -438,10 +439,10 @@ FROM timestamps\n query II\n SELECT dayofmonth(ts), dayofmonth(ts::TIMESTAMP) FROM timestamps;\n ----\n-15\t13\n+15\t15\n 31\t31\n-31\t1\n-1\t2\n+31\t31\n+1\t1\n 26\t26\n 15\t15\n 15\t15\n@@ -453,10 +454,10 @@ NULL\tNULL\n query II\n SELECT weekday(ts), weekday(ts::TIMESTAMP) FROM timestamps;\n ----\n-3\t3\n+3\t5\n 2\t2\n-4\t5\n-1\t2\n+4\t4\n+1\t1\n 5\t5\n 1\t1\n 1\t1\n@@ -684,7 +685,7 @@ SELECT ts, LAST_DAY(ts), LAST_DAY(ts::TIMESTAMP) FROM timestamps;\n ----\n 0044-03-15 (BC) 01:40:43.987654-07:52\t0044-03-29 (BC)\t0044-03-31 (BC)\n 1962-07-31 05:20:48.123456-07\t1962-07-31\t1962-07-31\n-2020-12-31 16:00:00-08\t2020-12-31\t2021-01-31\n+2020-12-31 16:00:00-08\t2020-12-31\t2020-12-31\n 2021-02-01 16:00:00-08\t2021-02-28\t2021-02-28\n 2021-11-26 02:15:13.123456-08\t2021-11-30\t2021-11-30\n 2021-11-15 02:30:00-08\t2021-11-30\t2021-11-30\n",
  "problem_statement": "Casting timestamp to timestamptz changes the time in local time\n### What happens?\n\nSetting the session timezone as non-UTC and converting a `timestamp` to a `timestamptz` changes which instant is represented. \r\n\r\nFor example, casting `'2023-01-01 00:00:00'::timestamp` to `timestamptz` while timezone is set to US/Eastern results in `2022-12-31 19:00:00-05`. I believe it should be `2023-01-01 00:00:00-05`, which is what Postgres returns.\r\n\r\nStated differently, if I have a `timestamp` showing midnight in local time, converting to a `timestamptz` should still be midnight in local time. Currently, it switches to midnight in UTC.\n\n### To Reproduce\n\nI think the third `select` is the wrong behavior. \r\n```\r\nD set timezone='US/Eastern';\r\nD select '2023-01-01 00:00:00'::timestamp;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST('2023-01-01 00:00:00' AS TIMESTAMP) \u2502\r\n\u2502                timestamp                 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2023-01-01 00:00:00                      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select '2023-01-01 00:00:00'::timestamptz;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST('2023-01-01 00:00:00' AS TIMESTAMP WITH TIME ZONE) \u2502\r\n\u2502                timestamp with time zone                 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2023-01-01 00:00:00-05                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select '2023-01-01 00:00:00'::timestamp::timestamptz;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(CAST('2023-01-01 00:00:00' AS TIMESTAMP) AS TIMESTAMP WITH TIME ZONE) \u2502\r\n\u2502                          timestamp with time zone                          \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2022-12-31 19:00:00-05                                                     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI agree with Postgresql's behavior:\r\n\r\n```\r\ndb=# set timezone='US/Eastern';\r\nSET\r\ndb=# select '2023-01-01 00:00:00'::timestamp;\r\n      timestamp      \r\n---------------------\r\n 2023-01-01 00:00:00\r\n(1 row)\r\n\r\ndb=# select '2023-01-01 00:00:00'::timestamptz;\r\n      timestamptz       \r\n------------------------\r\n 2023-01-01 00:00:00-05\r\n(1 row)\r\n\r\ndb=# select '2023-01-01 00:00:00'::timestamp::timestamptz;\r\n      timestamptz       \r\n------------------------\r\n 2023-01-01 00:00:00-05\r\n(1 row)\r\n\r\n```\n\n### OS:\n\nmacOS 11.6.8 Intel\n\n### DuckDB Version:\n\nv0.6.2-dev772 ec4a46083e\n\n### DuckDB Client:\n\nDuckDB CLI\n\n### Full Name:\n\nPaul Rosenzweig\n\n### Affiliation:\n\nNone\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "Actually it doesn't change the instant because `2022-12-31 19:00:00-05 == 2023-01-01 00:00:00+00` (we just copy the value under the hood). The issue is that in the cast PG assumes that the `TS` is a na\u00efve (local) timestamp and extracts the parts in UTC and uses them to construct a `TSTZ` in the current time zone. We will have to patch the cast in ICU somehow.\nThe inverse cast is also supposed to use naive timestamps and I will fix that too.",
  "created_at": "2022-12-29T19:41:53Z"
}