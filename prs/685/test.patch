diff --git a/test/sql/CMakeLists.txt b/test/sql/CMakeLists.txt
index 523825d63008..9efce803a435 100644
--- a/test/sql/CMakeLists.txt
+++ b/test/sql/CMakeLists.txt
@@ -1,6 +1,7 @@
 add_subdirectory(aggregate)
 add_subdirectory(append)
 add_subdirectory(blob)
+add_subdirectory(binder)
 add_subdirectory(catalog)
 add_subdirectory(collate)
 add_subdirectory(create)
diff --git a/test/sql/binder/CMakeLists.txt b/test/sql/binder/CMakeLists.txt
new file mode 100644
index 000000000000..af8c8f5d4b80
--- /dev/null
+++ b/test/sql/binder/CMakeLists.txt
@@ -0,0 +1,4 @@
+add_library_unity(test_sql_binder OBJECT test_case_insensitive_binding.cpp)
+set(ALL_OBJECT_FILES
+    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_binder>
+    PARENT_SCOPE)
diff --git a/test/sql/binder/test_case_insensitive_binding.cpp b/test/sql/binder/test_case_insensitive_binding.cpp
new file mode 100644
index 000000000000..b942f2380bed
--- /dev/null
+++ b/test/sql/binder/test_case_insensitive_binding.cpp
@@ -0,0 +1,79 @@
+#include "catch.hpp"
+#include "test_helpers.hpp"
+
+using namespace duckdb;
+using namespace std;
+
+TEST_CASE("Test case insensitive binding of columns", "[binder]") {
+	unique_ptr<QueryResult> result;
+	DuckDB db(nullptr);
+	Connection con(db);
+	con.EnableQueryVerification();
+
+	// we can bind case insensitive column names
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (\"HeLlO\" INTEGER)"));
+
+	// lowercase names are aliased
+	REQUIRE_NO_FAIL(con.Query("SELECT HeLlO FROM test"));
+	REQUIRE_NO_FAIL(con.Query("SELECT hello FROM test"));
+	REQUIRE_NO_FAIL(con.Query("SELECT \"HeLlO\" FROM test"));
+	// specifying a different, non-lower, case does fail!
+	REQUIRE_FAIL(con.Query("SELECT \"HELLO\" FROM test"));
+	REQUIRE_FAIL(con.Query("SELECT \"HELLo\" FROM test"));
+
+	REQUIRE_NO_FAIL(con.Query("SELECT test.HeLlO FROM test"));
+	REQUIRE_NO_FAIL(con.Query("SELECT test.hello FROM test"));
+	REQUIRE_NO_FAIL(con.Query("SELECT test.\"HeLlO\" FROM test"));
+	REQUIRE_FAIL(con.Query("SELECT test.\"HELLO\" FROM test"));
+	REQUIRE_FAIL(con.Query("SELECT test.\"HELLo\" FROM test"));
+
+	REQUIRE_NO_FAIL(con.Query("UPDATE test SET hello=3"));
+	REQUIRE_NO_FAIL(con.Query("UPDATE test SET HeLlO=3"));
+
+	// but ONLY if there are no conflicts!
+	// if the reference is ambiguous (e.g. hello -> HeLlO, HELLO) the name must match exactly
+	REQUIRE_NO_FAIL(con.Query("DROP TABLE test"));
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test(\"HeLlO\" INTEGER, \"HELLO\" INTEGER)"));
+
+	REQUIRE_FAIL(con.Query("SELECT HeLlO FROM test"));
+	REQUIRE_FAIL(con.Query("SELECT hello FROM test"));
+	REQUIRE_NO_FAIL(con.Query("SELECT \"HeLlO\" FROM test"));
+	REQUIRE_NO_FAIL(con.Query("SELECT \"HELLO\" FROM test"));
+	REQUIRE_FAIL(con.Query("SELECT \"HELLo\" FROM test"));
+	REQUIRE_FAIL(con.Query("UPDATE test SET hello = 3"));
+	REQUIRE_NO_FAIL(con.Query("UPDATE test SET \"HeLlO\" = 3"));
+	REQUIRE_NO_FAIL(con.Query("UPDATE test SET \"HELLO\" = 3"));
+
+	REQUIRE_FAIL(con.Query("SELECT test.HeLlO FROM test"));
+	REQUIRE_FAIL(con.Query("SELECT test.hello FROM test"));
+	REQUIRE_NO_FAIL(con.Query("SELECT test.\"HeLlO\" FROM test"));
+	REQUIRE_NO_FAIL(con.Query("SELECT test.\"HELLO\" FROM test"));
+	REQUIRE_FAIL(con.Query("SELECT test.\"HELLo\" FROM test"));
+
+	// conflicts can also come from different sources!
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test1(\"HeLlO\" INTEGER)"));
+	REQUIRE_NO_FAIL(con.Query("CREATE TABLE test2(\"HELLO\" INTEGER)"));
+
+	REQUIRE_FAIL(con.Query("SELECT HeLlO FROM test1, test2"));
+	REQUIRE_FAIL(con.Query("SELECT hello FROM test1, test2"));
+	REQUIRE_NO_FAIL(con.Query("SELECT \"HeLlO\" FROM test1, test2"));
+	REQUIRE_NO_FAIL(con.Query("SELECT \"HELLO\" FROM test1, test2"));
+	REQUIRE_FAIL(con.Query("SELECT \"HELLo\" FROM test1, test2"));
+
+	// in this case we can eliminate the conflict by specifically selecting the source
+	REQUIRE_NO_FAIL(con.Query("SELECT test1.HeLlO FROM test1, test2"));
+	REQUIRE_NO_FAIL(con.Query("SELECT test1.hello FROM test1, test2"));
+	REQUIRE_NO_FAIL(con.Query("SELECT test1.\"HeLlO\" FROM test1, test2"));
+	REQUIRE_FAIL(con.Query("SELECT test1.\"HELLO\" FROM test1, test2"));
+	REQUIRE_FAIL(con.Query("SELECT test1.\"HELLo\" FROM test1, test2"));
+
+	REQUIRE_NO_FAIL(con.Query("SELECT test2.HeLlO FROM test1, test2"));
+	REQUIRE_NO_FAIL(con.Query("SELECT test2.hello FROM test1, test2"));
+	REQUIRE_FAIL(con.Query("SELECT test2.\"HeLlO\" FROM test1, test2"));
+	REQUIRE_NO_FAIL(con.Query("SELECT test2.\"HELLO\" FROM test1, test2"));
+	REQUIRE_FAIL(con.Query("SELECT test2.\"HELLo\" FROM test1, test2"));
+
+	REQUIRE_NO_FAIL(con.Query("SELECT * FROM test1 JOIN test2 USING (hello)"));
+
+	REQUIRE_NO_FAIL(con.Query("SELECT hello FROM (SELECT 42) tbl(\"HeLlO\")"));
+}
