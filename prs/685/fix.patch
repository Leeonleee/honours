diff --git a/src/catalog/catalog_entry/table_catalog_entry.cpp b/src/catalog/catalog_entry/table_catalog_entry.cpp
index b037f5c976b5..f54964267717 100644
--- a/src/catalog/catalog_entry/table_catalog_entry.cpp
+++ b/src/catalog/catalog_entry/table_catalog_entry.cpp
@@ -24,15 +24,39 @@
 
 #include <algorithm>
 
-using namespace duckdb;
 using namespace std;
 
+namespace duckdb {
+
+void TableCatalogEntry::AddLowerCaseAliases(unordered_map<string, column_t> &name_map) {
+	unordered_map<string, column_t> extra_lowercase_names;
+	for(auto &entry : name_map) {
+		auto lcase = StringUtil::Lower(entry.first);
+		// check the lowercase name map if there already exists a lowercase version
+		if (extra_lowercase_names.find(lcase) == extra_lowercase_names.end()) {
+			// not yet: add the mapping
+			extra_lowercase_names[lcase] = entry.second;
+		} else {
+			// the lowercase already exists: set it to invalid index
+			extra_lowercase_names[lcase] = INVALID_INDEX;
+		}
+	}
+	// for any new lowercase names, add them to the original name map
+	for(auto &entry : extra_lowercase_names) {
+		if (entry.second != INVALID_INDEX) {
+			name_map[entry.first] = entry.second;
+		}
+	}
+}
+
 TableCatalogEntry::TableCatalogEntry(Catalog *catalog, SchemaCatalogEntry *schema, BoundCreateTableInfo *info,
                                      std::shared_ptr<DataTable> inherited_storage)
     : StandardEntry(CatalogType::TABLE, schema, catalog, info->Base().table), storage(inherited_storage),
       columns(move(info->Base().columns)), constraints(move(info->Base().constraints)),
       bound_constraints(move(info->bound_constraints)), name_map(info->name_map) {
 	this->temporary = info->Base().temporary;
+	// add lower case aliases
+	AddLowerCaseAliases(name_map);
 	// add the "rowid" alias, if there is no rowid column specified in the table
 	if (name_map.find("rowid") == name_map.end()) {
 		name_map["rowid"] = COLUMN_IDENTIFIER_ROW_ID;
@@ -442,3 +466,5 @@ unique_ptr<CatalogEntry> TableCatalogEntry::Copy(ClientContext &context) {
 void TableCatalogEntry::SetAsRoot() {
 	storage->SetAsRoot();
 }
+
+}
diff --git a/src/include/duckdb/catalog/catalog_entry/table_catalog_entry.hpp b/src/include/duckdb/catalog/catalog_entry/table_catalog_entry.hpp
index 1a418b6625aa..f948952a20b7 100644
--- a/src/include/duckdb/catalog/catalog_entry/table_catalog_entry.hpp
+++ b/src/include/duckdb/catalog/catalog_entry/table_catalog_entry.hpp
@@ -58,6 +58,9 @@ class TableCatalogEntry : public StandardEntry {
 	//! Returns a list of types of the specified columns of the table
 	vector<TypeId> GetTypes(const vector<column_t> &column_ids);
 
+	//! Add lower case aliases to a name map (e.g. "Hello" -> "hello" is also acceptable)
+	static void AddLowerCaseAliases(unordered_map<string, column_t> &name_map);
+
 	//! Serialize the meta information of the TableCatalogEntry a serializer
 	virtual void Serialize(Serializer &serializer);
 	//! Deserializes to a CreateTableInfo
diff --git a/src/include/duckdb/planner/table_binding.hpp b/src/include/duckdb/planner/table_binding.hpp
index e93ff4348f87..516c2b8601c6 100644
--- a/src/include/duckdb/planner/table_binding.hpp
+++ b/src/include/duckdb/planner/table_binding.hpp
@@ -65,7 +65,7 @@ struct GenericBinding : public Binding {
 	//! Column names of the subquery
 	vector<string> names;
 	//! Name -> index for the names
-	unordered_map<string, uint64_t> name_map;
+	unordered_map<string, column_t> name_map;
 
 public:
 	bool HasMatchingBinding(const string &column_name) override;
diff --git a/src/planner/table_binding.cpp b/src/planner/table_binding.cpp
index f7fc43b85e6d..baabb150f96b 100644
--- a/src/planner/table_binding.cpp
+++ b/src/planner/table_binding.cpp
@@ -81,6 +81,7 @@ GenericBinding::GenericBinding(const string &alias, vector<SQLType> coltypes, ve
 		}
 		name_map[name] = i;
 	}
+	TableCatalogEntry::AddLowerCaseAliases(name_map);
 }
 
 bool GenericBinding::HasMatchingBinding(const string &column_name) {
