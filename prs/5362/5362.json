{
  "repo": "duckdb/duckdb",
  "pull_number": 5362,
  "instance_id": "duckdb__duckdb-5362",
  "issue_numbers": [
    "5288"
  ],
  "base_commit": "cb6376f9de3a598f397810b7549e884f6588ca54",
  "patch": "diff --git a/.github/workflows/Main.yml b/.github/workflows/Main.yml\nindex a453d8e0dacc..9e1e59d76fc5 100644\n--- a/.github/workflows/Main.yml\n+++ b/.github/workflows/Main.yml\n@@ -491,7 +491,7 @@ jobs:\n       shell: bash\n       run: |\n         git clone https://github.com/Mytherin/psqlodbc.git\n-        (cd psqlodbc && git checkout 70fa016bde0b326d98803742aa570a1e5b3f6e89 && make debug)\n+        (cd psqlodbc && git checkout 0a939c70ec405abde8a36dc4d88043561b64b78d && make debug)\n \n     - name: Setup Ccache\n       uses: hendrikmuhs/ccache-action@main\ndiff --git a/.github/workflows/Windows.yml b/.github/workflows/Windows.yml\nindex 969c8f37072c..7e245e435eb7 100644\n--- a/.github/workflows/Windows.yml\n+++ b/.github/workflows/Windows.yml\n@@ -195,7 +195,7 @@ jobs:\n       shell: bash\n       run: |\n         git clone https://github.com/Mytherin/psqlodbc.git\n-        (cd psqlodbc && git checkout 70fa016bde0b326d98803742aa570a1e5b3f6e89 && make release)\n+        (cd psqlodbc && git checkout 0a939c70ec405abde8a36dc4d88043561b64b78d && make release)\n \n     - name: Test psqlodbc\n       shell: bash\ndiff --git a/src/common/operator/cast_operators.cpp b/src/common/operator/cast_operators.cpp\nindex 83dfb687fca7..91a67dd41217 100644\n--- a/src/common/operator/cast_operators.cpp\n+++ b/src/common/operator/cast_operators.cpp\n@@ -1577,6 +1577,7 @@ bool TryCast::Operation(string_t input, hugeint_t &result, bool strict) {\n //===--------------------------------------------------------------------===//\n // Decimal String Cast\n //===--------------------------------------------------------------------===//\n+\n template <class TYPE>\n struct DecimalCastData {\n \ttypedef TYPE type_t;\n@@ -1585,9 +1586,14 @@ struct DecimalCastData {\n \tuint8_t scale;\n \tuint8_t digit_count;\n \tuint8_t decimal_count;\n+\t//! Whether we have determined if the result should be rounded\n+\tbool round_set;\n+\t//! If the result should be rounded\n+\tbool should_round;\n \t//! Only set when ALLOW_EXPONENT is enabled\n+\tenum class ExponentType : uint8_t { NONE, POSITIVE, NEGATIVE };\n \tuint8_t excessive_decimals;\n-\tbool positive_exponent;\n+\tExponentType exponent_type;\n };\n \n struct DecimalCastOperation {\n@@ -1634,17 +1640,19 @@ struct DecimalCastOperation {\n \tstatic bool HandleExponent(T &state, int32_t exponent) {\n \t\tauto decimal_excess = (state.decimal_count > state.scale) ? state.decimal_count - state.scale : 0;\n \t\tif (exponent > 0) {\n-\t\t\tstate.positive_exponent = true;\n-\t\t\t//! Positive exponents need up to 'exponent' amount of digits\n-\t\t\t//! Everything beyond that amount needs to be truncated\n+\t\t\tstate.exponent_type = T::ExponentType::POSITIVE;\n+\t\t\t// Positive exponents need up to 'exponent' amount of digits\n+\t\t\t// Everything beyond that amount needs to be truncated\n \t\t\tif (decimal_excess > exponent) {\n-\t\t\t\t//! We've allowed too many decimals\n+\t\t\t\t// We've allowed too many decimals\n \t\t\t\tstate.excessive_decimals = decimal_excess - exponent;\n \t\t\t\texponent = 0;\n \t\t\t} else {\n \t\t\t\texponent -= decimal_excess;\n \t\t\t}\n \t\t\tD_ASSERT(exponent >= 0);\n+\t\t} else if (exponent < 0) {\n+\t\t\tstate.exponent_type = T::ExponentType::NEGATIVE;\n \t\t}\n \t\tif (!Finalize<T, NEGATIVE>(state)) {\n \t\t\treturn false;\n@@ -1676,6 +1684,11 @@ struct DecimalCastOperation {\n \n \ttemplate <class T, bool NEGATIVE, bool ALLOW_EXPONENT>\n \tstatic bool HandleDecimal(T &state, uint8_t digit) {\n+\t\tif (state.decimal_count == state.scale && !state.round_set) {\n+\t\t\t// Determine whether the last registered decimal should be rounded or not\n+\t\t\tstate.round_set = true;\n+\t\t\tstate.should_round = digit >= 5;\n+\t\t}\n \t\tif (!ALLOW_EXPONENT && state.decimal_count == state.scale) {\n \t\t\t// we exceeded the amount of supported decimals\n \t\t\t// however, we don't throw an error here\n@@ -1706,7 +1719,7 @@ struct DecimalCastOperation {\n \t\t\tstate.result /= 10.0;\n \t\t}\n \t\t//! Only round up when exponents are involved\n-\t\tif (state.positive_exponent && round_up) {\n+\t\tif (state.exponent_type == T::ExponentType::POSITIVE && round_up) {\n \t\t\tRoundUpResult<T, NEGATIVE>(state);\n \t\t}\n \t\tD_ASSERT(state.decimal_count > state.scale);\n@@ -1716,13 +1729,16 @@ struct DecimalCastOperation {\n \n \ttemplate <class T, bool NEGATIVE>\n \tstatic bool Finalize(T &state) {\n-\t\tif (!state.positive_exponent && state.decimal_count > state.scale) {\n+\t\tif (state.exponent_type != T::ExponentType::POSITIVE && state.decimal_count > state.scale) {\n \t\t\t//! Did not encounter an exponent, but ALLOW_EXPONENT was on\n \t\t\tstate.excessive_decimals = state.decimal_count - state.scale;\n \t\t}\n \t\tif (state.excessive_decimals && !TruncateExcessiveDecimals<T, NEGATIVE>(state)) {\n \t\t\treturn false;\n \t\t}\n+\t\tif (state.exponent_type == T::ExponentType::NONE && state.round_set && state.should_round) {\n+\t\t\tRoundUpResult<T, NEGATIVE>(state);\n+\t\t}\n \t\t//  if we have not gotten exactly \"scale\" decimals, we need to multiply the result\n \t\t//  e.g. if we have a string \"1.0\" that is cast to a DECIMAL(9,3), the value needs to be 1000\n \t\t//  but we have only gotten the value \"10\" so far, so we multiply by 1000\n@@ -1742,7 +1758,9 @@ bool TryDecimalStringCast(string_t input, T &result, string *error_message, uint\n \tstate.digit_count = 0;\n \tstate.decimal_count = 0;\n \tstate.excessive_decimals = 0;\n-\tstate.positive_exponent = false;\n+\tstate.exponent_type = DecimalCastData<T>::ExponentType::NONE;\n+\tstate.round_set = false;\n+\tstate.should_round = false;\n \tif (!TryIntegerCast<DecimalCastData<T>, true, true, DecimalCastOperation, false>(input.GetDataUnsafe(),\n \t                                                                                 input.GetSize(), state, false)) {\n \t\tstring error = StringUtil::Format(\"Could not convert string \\\"%s\\\" to DECIMAL(%d,%d)\", input.GetString(),\n",
  "test_patch": "diff --git a/test/sql/types/decimal/test_decimal_small_precision_behavior.test b/test/sql/types/decimal/test_decimal_small_precision_behavior.test\nnew file mode 100644\nindex 000000000000..25daafe01348\n--- /dev/null\n+++ b/test/sql/types/decimal/test_decimal_small_precision_behavior.test\n@@ -0,0 +1,45 @@\n+# name: test/sql/types/decimal/test_decimal_small_precision_behavior.test\n+# group: [decimal]\n+\n+statement ok\n+pragma enable_verification\n+\n+query I\n+select '1.023450000001'::DECIMAL(5,4)\n+----\n+1.0235\n+\n+query I\n+select '1.234499999'::DECIMAL(4,3)\n+----\n+1.234\n+\n+query I\n+select '1.23499999'::DECIMAL(4,3)\n+----\n+1.235\n+\n+query I\n+select '1.234499999'::DECIMAL(5,4)\n+----\n+1.2345\n+\n+query I\n+select '-1.023450000001'::DECIMAL(5,4)\n+----\n+-1.0235\n+\n+query I\n+select '-1.234499999'::DECIMAL(4,3)\n+----\n+-1.234\n+\n+query I\n+select '-1.23499999'::DECIMAL(4,3)\n+----\n+-1.235\n+\n+query I\n+select '-1.234499999'::DECIMAL(5,4)\n+----\n+-1.2345\n",
  "problem_statement": "DECIMAL field truncates on precision loss, rather than rounds\n### What happens?\r\n\r\nWhen I insert a DECIMAL or FLOAT of a higher precision than the column supports - PSQL/MySQL rounds it before saving.\r\n\r\nDuckDB truncates. Which makes it an outlier.\r\n\r\nTo test in PSQL:\r\n\r\n```\r\nCREATE TABLE qwe (\r\n\tid serial PRIMARY KEY,\r\n\tdec decimal(10,3) NOT NULL,\r\n\tfl NUMERIC ( 10,3 ) NOT NULL\r\n)\r\n\r\nINSERT INTO qwe(dec,fl) VALUES (20.999999,5.99999999),(5.123123,5.123123123),\r\n\r\nSELECT * FROM qwe\r\n```\r\n\r\n### To Reproduce\r\n\r\n```\r\nCREATE TABLE test(\r\ndec DECIMAL(5,3)\r\n)\r\n\r\nINSERT INTO test VALUES (2.99999),(3.123), (8.8976553)\r\n\r\nSELECT * FROM test\r\n```\r\n\r\n### OS:\r\n\r\nlinux\r\n\r\n### DuckDB Version:\r\n\r\n5.0.2\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nIgor\r\n\r\n### Affiliation:\r\n\r\nnone.\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2022-11-15T13:19:01Z"
}