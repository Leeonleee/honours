{
  "repo": "duckdb/duckdb",
  "pull_number": 3355,
  "instance_id": "duckdb__duckdb-3355",
  "issue_numbers": [
    "3349",
    "3349"
  ],
  "base_commit": "7c5ba6c0e1521a76a6644a4525dd6f393215baed",
  "patch": "diff --git a/src/execution/radix_partitioned_hashtable.cpp b/src/execution/radix_partitioned_hashtable.cpp\nindex fc5c9c679ce4..cae6ab5e7dcc 100644\n--- a/src/execution/radix_partitioned_hashtable.cpp\n+++ b/src/execution/radix_partitioned_hashtable.cpp\n@@ -341,17 +341,21 @@ void RadixPartitionedHashTable::GetData(ExecutionContext &context, DataChunk &ch\n \t// special case hack to sort out aggregating from empty intermediates\n \t// for aggregations without groups\n \tif (gstate.is_empty && grouping_set.empty()) {\n-\t\tD_ASSERT(chunk.ColumnCount() == op.aggregates.size());\n+\t\tD_ASSERT(chunk.ColumnCount() == null_groups.size() + op.aggregates.size());\n \t\t// for each column in the aggregates, set to initial state\n \t\tchunk.SetCardinality(1);\n-\t\tfor (idx_t i = 0; i < chunk.ColumnCount(); i++) {\n+\t\tfor (auto null_group : null_groups) {\n+\t\t\tchunk.data[null_group].SetVectorType(VectorType::CONSTANT_VECTOR);\n+\t\t\tConstantVector::SetNull(chunk.data[null_group], true);\n+\t\t}\n+\t\tfor (idx_t i = 0; i < op.aggregates.size(); i++) {\n \t\t\tD_ASSERT(op.aggregates[i]->GetExpressionClass() == ExpressionClass::BOUND_AGGREGATE);\n \t\t\tauto &aggr = (BoundAggregateExpression &)*op.aggregates[i];\n \t\t\tauto aggr_state = unique_ptr<data_t[]>(new data_t[aggr.function.state_size()]);\n \t\t\taggr.function.initialize(aggr_state.get());\n \n \t\t\tVector state_vector(Value::POINTER((uintptr_t)aggr_state.get()));\n-\t\t\taggr.function.finalize(state_vector, aggr.bind_info.get(), chunk.data[i], 1, 0);\n+\t\t\taggr.function.finalize(state_vector, aggr.bind_info.get(), chunk.data[null_groups.size() + i], 1, 0);\n \t\t\tif (aggr.function.destructor) {\n \t\t\t\taggr.function.destructor(state_vector, 1);\n \t\t\t}\n",
  "test_patch": "diff --git a/test/issues/fuzz/multi_rollup_assertion.test b/test/issues/fuzz/multi_rollup_assertion.test\nnew file mode 100644\nindex 000000000000..e786f9e6bbe7\n--- /dev/null\n+++ b/test/issues/fuzz/multi_rollup_assertion.test\n@@ -0,0 +1,14 @@\n+# name: test/issues/fuzz/multi_rollup_assertion.test\n+# description: Issue 3349: Assertion Failed: chunk.ColumnCount() == op.aggregates.size()\n+# group: [fuzz]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table strings (a VARCHAR, b VARCHAR);\n+\n+query III\n+select b, b, count(*) from strings group by rollup (b, b) order by 1, 2, 3;\n+----\n+NULL\tNULL\t0\n",
  "problem_statement": "Assertion Failed: chunk.ColumnCount() == op.aggregates.size()\n#### What happens?\r\nAssertion triggered in file \"/root/duckdb/src/execution/radix_partitioned_hashtable.cpp\" on line 344: chunk.ColumnCount() == op.aggregates.size()\r\n\r\n#### To Reproduce\r\n```sql\r\ncreate table strings (a VARCHAR, b VARCHAR);\r\nselect b, b, count(*) from strings group by rollup (b, b) order by 1, 2, 3;\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: linux\r\n - DuckDB Version: v0.3.3-dev1395 80ae1e12d\r\n - DuckDB Client: /usr/local/bin/duckdb \r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\nAssertion Failed: chunk.ColumnCount() == op.aggregates.size()\n#### What happens?\r\nAssertion triggered in file \"/root/duckdb/src/execution/radix_partitioned_hashtable.cpp\" on line 344: chunk.ColumnCount() == op.aggregates.size()\r\n\r\n#### To Reproduce\r\n```sql\r\ncreate table strings (a VARCHAR, b VARCHAR);\r\nselect b, b, count(*) from strings group by rollup (b, b) order by 1, 2, 3;\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: linux\r\n - DuckDB Version: v0.3.3-dev1395 80ae1e12d\r\n - DuckDB Client: /usr/local/bin/duckdb \r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "ASAN detail:\r\n\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==26117==ERROR: AddressSanitizer: SEGV on unknown address 0x0000000000c8 (pc 0x000001919ae9 bp 0x60200000ed10 sp 0x7ffcba0d4ee0 T0)\r\n==26117==The signal is caused by a READ memory access.\r\n==26117==Hint: address points to the zero page.\r\n    #0 0x1919ae9 in duckdb::RadixPartitionedHashTable::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSinkState&, duckdb::GlobalSourceState&) const /root/duckdb/src/execution/radix_partitioned_hashtable.cpp:350:54\r\n    #1 0x269af16 in duckdb::PhysicalHashAggregate::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSourceState&, duckdb::LocalSourceState&) const /root/duckdb/src/execution/operator/aggregate/physical_hash_aggregate.cpp:260:34\r\n    #2 0x5f586a in duckdb::PipelineExecutor::FetchFromSource(duckdb::DataChunk&) /root/duckdb/src/parallel/pipeline_executor.cpp:316:19\r\n    #3 0x5ff172 in duckdb::PipelineExecutor::Execute(unsigned long) /root/duckdb/src/parallel/pipeline_executor.cpp:56:3\r\n    #4 0x5ff172 in duckdb::PipelineTask::ExecuteTask(duckdb::TaskExecutionMode) /root/duckdb/src/parallel/pipeline.cpp:42:39\r\n    #5 0x5e0934 in duckdb::ExecutorTask::Execute(duckdb::TaskExecutionMode) /root/duckdb/src/parallel/executor_task.cpp:17:10\r\n    #6 0x5ed394 in duckdb::Executor::ExecuteTask() /root/duckdb/src/parallel/executor.cpp:350:24\r\n    #7 0x5322d1 in duckdb::ClientContext::ExecuteTaskInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&) /root/duckdb/src/main/client_context.cpp:336:41\r\n    #8 0x533ea3 in duckdb::PendingQueryResult::ExecuteTaskInternal(duckdb::ClientContextLock&) /root/duckdb/src/main/pending_query_result.cpp:45:18\r\n    #9 0x533ea3 in duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&, bool) /root/duckdb/src/main/pending_query_result.cpp:50:9\r\n    #10 0x518357 in duckdb::ClientContext::ExecutePendingQueryInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&, bool) /root/duckdb/src/main/client_context.cpp:700:15\r\n    #11 0x518357 in duckdb::ClientContext::Query(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool) /root/duckdb/src/main/client_context.cpp:639:21\r\n    #12 0x519c06 in duckdb::Connection::Query(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /root/duckdb/src/main/connection.cpp:71:25\r\n    #13 0x4e57c8 in duckdb_query /root/duckdb/src/main/capi/duckdb-c.cpp:67:22\r\n    #14 0x4e10d3 in run_one_statement_new(void*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /mnt/jingzhou_workspace/sqlsim/client_new/duckdb/client_new.cpp:57:13\r\n    #15 0x4d3984 in run_testcase(void*&, char const*, int) /root/autodriver.cpp:102:14\r\n    #16 0x4d8601 in do_fuzz()::$_3::operator()() const /root/autodriver.cpp:227:13\r\n    #17 0x4d809e in do_fuzz() /root/autodriver.cpp:235:13\r\n    #18 0x4d8b43 in main /root/autodriver.cpp:292:9\r\n    #19 0x7f96e9d510b2 in __libc_start_main /build/glibc-sMfBJT/glibc-2.31/csu/../csu/libc-start.c:308:16\r\n    #20 0x4247ad in _start (/root/autodriver+0x4247ad)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV /root/duckdb/src/execution/radix_partitioned_hashtable.cpp:350:54 in duckdb::RadixPartitionedHashTable::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSinkState&, duckdb::GlobalSourceState&) const\r\n==26117==ABORTING\r\n```\nIn fact, I'm not sure whether it is a input triggering bug, or an invalid SQL input.\r\n\r\nI have found many inputs causing duckdb binary crashes by fuzzing. I want to know how to distinguish if an input triggers bug.\nASAN detail:\r\n\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==26117==ERROR: AddressSanitizer: SEGV on unknown address 0x0000000000c8 (pc 0x000001919ae9 bp 0x60200000ed10 sp 0x7ffcba0d4ee0 T0)\r\n==26117==The signal is caused by a READ memory access.\r\n==26117==Hint: address points to the zero page.\r\n    #0 0x1919ae9 in duckdb::RadixPartitionedHashTable::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSinkState&, duckdb::GlobalSourceState&) const /root/duckdb/src/execution/radix_partitioned_hashtable.cpp:350:54\r\n    #1 0x269af16 in duckdb::PhysicalHashAggregate::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSourceState&, duckdb::LocalSourceState&) const /root/duckdb/src/execution/operator/aggregate/physical_hash_aggregate.cpp:260:34\r\n    #2 0x5f586a in duckdb::PipelineExecutor::FetchFromSource(duckdb::DataChunk&) /root/duckdb/src/parallel/pipeline_executor.cpp:316:19\r\n    #3 0x5ff172 in duckdb::PipelineExecutor::Execute(unsigned long) /root/duckdb/src/parallel/pipeline_executor.cpp:56:3\r\n    #4 0x5ff172 in duckdb::PipelineTask::ExecuteTask(duckdb::TaskExecutionMode) /root/duckdb/src/parallel/pipeline.cpp:42:39\r\n    #5 0x5e0934 in duckdb::ExecutorTask::Execute(duckdb::TaskExecutionMode) /root/duckdb/src/parallel/executor_task.cpp:17:10\r\n    #6 0x5ed394 in duckdb::Executor::ExecuteTask() /root/duckdb/src/parallel/executor.cpp:350:24\r\n    #7 0x5322d1 in duckdb::ClientContext::ExecuteTaskInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&) /root/duckdb/src/main/client_context.cpp:336:41\r\n    #8 0x533ea3 in duckdb::PendingQueryResult::ExecuteTaskInternal(duckdb::ClientContextLock&) /root/duckdb/src/main/pending_query_result.cpp:45:18\r\n    #9 0x533ea3 in duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&, bool) /root/duckdb/src/main/pending_query_result.cpp:50:9\r\n    #10 0x518357 in duckdb::ClientContext::ExecutePendingQueryInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&, bool) /root/duckdb/src/main/client_context.cpp:700:15\r\n    #11 0x518357 in duckdb::ClientContext::Query(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool) /root/duckdb/src/main/client_context.cpp:639:21\r\n    #12 0x519c06 in duckdb::Connection::Query(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /root/duckdb/src/main/connection.cpp:71:25\r\n    #13 0x4e57c8 in duckdb_query /root/duckdb/src/main/capi/duckdb-c.cpp:67:22\r\n    #14 0x4e10d3 in run_one_statement_new(void*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /mnt/jingzhou_workspace/sqlsim/client_new/duckdb/client_new.cpp:57:13\r\n    #15 0x4d3984 in run_testcase(void*&, char const*, int) /root/autodriver.cpp:102:14\r\n    #16 0x4d8601 in do_fuzz()::$_3::operator()() const /root/autodriver.cpp:227:13\r\n    #17 0x4d809e in do_fuzz() /root/autodriver.cpp:235:13\r\n    #18 0x4d8b43 in main /root/autodriver.cpp:292:9\r\n    #19 0x7f96e9d510b2 in __libc_start_main /build/glibc-sMfBJT/glibc-2.31/csu/../csu/libc-start.c:308:16\r\n    #20 0x4247ad in _start (/root/autodriver+0x4247ad)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV /root/duckdb/src/execution/radix_partitioned_hashtable.cpp:350:54 in duckdb::RadixPartitionedHashTable::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSinkState&, duckdb::GlobalSourceState&) const\r\n==26117==ABORTING\r\n```\nIn fact, I'm not sure whether it is a input triggering bug, or an invalid SQL input.\r\n\r\nI have found many inputs causing duckdb binary crashes by fuzzing. I want to know how to distinguish if an input triggers bug.",
  "created_at": "2022-04-02T11:06:07Z"
}