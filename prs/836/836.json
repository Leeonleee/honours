{
  "repo": "duckdb/duckdb",
  "pull_number": 836,
  "instance_id": "duckdb__duckdb-836",
  "issue_numbers": [
    "739"
  ],
  "base_commit": "1d7b34629d859c01ecb0109d2315a26fd99b42fb",
  "patch": "diff --git a/examples/R/dplyr.R b/examples/R/dplyr.R\nindex 016e3a3b9536..f725a1abe64f 100644\n--- a/examples/R/dplyr.R\n+++ b/examples/R/dplyr.R\n@@ -1,16 +1,18 @@\n library(\"DBI\")\n library(\"dplyr\")\n \n-dsrc <- duckdb::src_duckdb()\n+library(\"DBI\")\n+\n+# create a DuckDB connection, either as a temporary in-memory database (default) or with a file\n+con <- dbConnect(duckdb::duckdb(), \":memory:\")\n \n # taken from the dbplyr vignette\n # https://cran.r-project.org/web/packages/dbplyr/vignettes/dbplyr.html\n \n-copy_to(dsrc, nycflights13::flights, \"flights\", temporary = FALSE)\n+copy_to(con, nycflights13::flights, \"flights\", temporary = FALSE)\n \n-flights_db <- tbl(dsrc, \"flights\")\n+flights_db <- tbl(con, \"flights\")\n \n-flights_db %>% \n+flights_db %>%\n   group_by(dest) %>%\n-  summarise(delay = mean(dep_time))\n-\n+  summarise(delay = mean(dep_time, na.rm = TRUE))\ndiff --git a/tools/rpkg/NAMESPACE b/tools/rpkg/NAMESPACE\nindex 1c48e08e5fdf..6ccf7301510b 100644\n--- a/tools/rpkg/NAMESPACE\n+++ b/tools/rpkg/NAMESPACE\n@@ -5,7 +5,6 @@ export(duckdb_register)\n export(duckdb_shutdown)\n export(duckdb_unregister)\n export(read_csv_duckdb)\n-export(src_duckdb)\n exportClasses(duckdb_connection)\n exportClasses(duckdb_driver)\n exportClasses(duckdb_result)\ndiff --git a/tools/rpkg/R/Driver.R b/tools/rpkg/R/Driver.R\nindex 71a4a342ea08..0eb2cfec34e6 100644\n--- a/tools/rpkg/R/Driver.R\n+++ b/tools/rpkg/R/Driver.R\n@@ -117,6 +117,7 @@ setMethod(\n \n #' @rdname duckdb_driver\n #' @inheritParams DBI::dbIsValid\n+#' @importFrom DBI dbConnect\n #' @export\n setMethod(\n   \"dbIsValid\", \"duckdb_driver\",\n@@ -164,18 +165,3 @@ duckdb_shutdown <- function(drv) {\n is_installed <- function(pkg) {\n   as.logical(requireNamespace(pkg, quietly = TRUE)) == TRUE\n }\n-\n-\n-#' @importFrom DBI dbConnect\n-#' @param path The file in which the DuckDB database should be stored\n-#' @param create Create a new database if none is present in `path`\n-#' @rdname duckdb_driver\n-#' @export\n-src_duckdb <- function(path = \":memory:\", create = FALSE, read_only = FALSE) {\n-  requireNamespace(\"dbplyr\", quietly = TRUE)\n-  if (path != \":memory:\" && !create && !file.exists(path)) {\n-    stop(\"`path` '\", path, \"' must already exist, unless `create` = TRUE\")\n-  }\n-  con <- DBI::dbConnect(duckdb::duckdb(), path, read_only = read_only)\n-  dbplyr::src_dbi(con, auto_disconnect = TRUE)\n-}\ndiff --git a/tools/rpkg/man/duckdb_driver.Rd b/tools/rpkg/man/duckdb_driver.Rd\nindex c06eebe926c5..b8d2fd3b39b6 100644\n--- a/tools/rpkg/man/duckdb_driver.Rd\n+++ b/tools/rpkg/man/duckdb_driver.Rd\n@@ -11,7 +11,6 @@\n \\alias{dbIsValid,duckdb_driver-method}\n \\alias{dbGetInfo,duckdb_driver-method}\n \\alias{duckdb_shutdown}\n-\\alias{src_duckdb}\n \\title{DuckDB Driver}\n \\usage{\n duckdb(dbdir = DBDIR_MEMORY, read_only = FALSE)\n@@ -33,8 +32,6 @@ duckdb(dbdir = DBDIR_MEMORY, read_only = FALSE)\n \\S4method{dbGetInfo}{duckdb_driver}(dbObj, ...)\n \n duckdb_shutdown(drv)\n-\n-src_duckdb(path = \":memory:\", create = FALSE, read_only = FALSE)\n }\n \\arguments{\n \\item{dbdir}{The file in which the DuckDB database should be stored}\n@@ -57,10 +54,6 @@ For details see the appropriate \\code{DBIDriver}.}\n or \\linkS4class{DBIConnection}}\n \n \\item{obj}{An R object whose SQL type we want to determine.}\n-\n-\\item{path}{The file in which the DuckDB database should be stored}\n-\n-\\item{create}{Create a new database if none is present in `path`}\n }\n \\description{\n A DuckDB database instance.\n",
  "test_patch": "diff --git a/tools/rpkg/tests/testthat.R b/tools/rpkg/tests/testthat.R\nindex bcd6da66d8da..df897ffcb022 100644\n--- a/tools/rpkg/tests/testthat.R\n+++ b/tools/rpkg/tests/testthat.R\n@@ -1,31 +1,4 @@\n library(testthat)\n library(DBI)\n \n-# the easy part\n test_check(\"duckdb\")\n-\n-dbplyr_tests <- function() {\n-  if (!identical(Sys.getenv(\"NOT_CRAN\"), \"true\")) {\n-    return()\n-  }\n-  # the hacky part\n-  library(\"dbplyr\")\n-\n-  # pull dbplyr sources to harvest test cases\n-  zipfile <- tempfile()\n-  all_pkgs <- available.packages()\n-  version_latest <- all_pkgs[all_pkgs[, \"Package\"] == \"dbplyr\", \"Version\"]\n-  url <- sprintf(\"https://github.com/tidyverse/dbplyr/archive/v%s.zip\", version_latest)\n-  download.file(url, zipfile)\n-  dbplyr_src <- tempdir()\n-  unzip(zipfile, exdir = dbplyr_src)\n-  tests <- Sys.glob(file.path(dbplyr_src, \"dbplyr*\", \"tests\"))\n-  setwd(tests)\n-\n-  options(duckdb.debug = T)\n-  test_register_src(\"duckdb\", duckdb::src_duckdb())\n-\n-  # TODO fix excluded test cases\n-  test_check(\"dbplyr\", stop_on_failure = TRUE, , invert = T, filter = \"(verb-joins|verb-mutate)\")\n-}\n-# dbplyr_tests()\n",
  "problem_statement": "R: Rethink src_duckdb()?\nIn recent dbplyr, connections (of class `\"DBIConnection\"`) can be used interchangeably with objects of class `\"src\"`. Do we still need `src_duckdb()`?\n",
  "hints_text": "Yeah lets take it out, one dependency down, just need to also update the example in `examples/R`. ",
  "created_at": "2020-08-14T04:01:34Z"
}