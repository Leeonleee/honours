diff --git a/examples/R/dplyr.R b/examples/R/dplyr.R
index 016e3a3b9536..f725a1abe64f 100644
--- a/examples/R/dplyr.R
+++ b/examples/R/dplyr.R
@@ -1,16 +1,18 @@
 library("DBI")
 library("dplyr")
 
-dsrc <- duckdb::src_duckdb()
+library("DBI")
+
+# create a DuckDB connection, either as a temporary in-memory database (default) or with a file
+con <- dbConnect(duckdb::duckdb(), ":memory:")
 
 # taken from the dbplyr vignette
 # https://cran.r-project.org/web/packages/dbplyr/vignettes/dbplyr.html
 
-copy_to(dsrc, nycflights13::flights, "flights", temporary = FALSE)
+copy_to(con, nycflights13::flights, "flights", temporary = FALSE)
 
-flights_db <- tbl(dsrc, "flights")
+flights_db <- tbl(con, "flights")
 
-flights_db %>% 
+flights_db %>%
   group_by(dest) %>%
-  summarise(delay = mean(dep_time))
-
+  summarise(delay = mean(dep_time, na.rm = TRUE))
diff --git a/tools/rpkg/NAMESPACE b/tools/rpkg/NAMESPACE
index 1c48e08e5fdf..6ccf7301510b 100644
--- a/tools/rpkg/NAMESPACE
+++ b/tools/rpkg/NAMESPACE
@@ -5,7 +5,6 @@ export(duckdb_register)
 export(duckdb_shutdown)
 export(duckdb_unregister)
 export(read_csv_duckdb)
-export(src_duckdb)
 exportClasses(duckdb_connection)
 exportClasses(duckdb_driver)
 exportClasses(duckdb_result)
diff --git a/tools/rpkg/R/Driver.R b/tools/rpkg/R/Driver.R
index 71a4a342ea08..0eb2cfec34e6 100644
--- a/tools/rpkg/R/Driver.R
+++ b/tools/rpkg/R/Driver.R
@@ -117,6 +117,7 @@ setMethod(
 
 #' @rdname duckdb_driver
 #' @inheritParams DBI::dbIsValid
+#' @importFrom DBI dbConnect
 #' @export
 setMethod(
   "dbIsValid", "duckdb_driver",
@@ -164,18 +165,3 @@ duckdb_shutdown <- function(drv) {
 is_installed <- function(pkg) {
   as.logical(requireNamespace(pkg, quietly = TRUE)) == TRUE
 }
-
-
-#' @importFrom DBI dbConnect
-#' @param path The file in which the DuckDB database should be stored
-#' @param create Create a new database if none is present in `path`
-#' @rdname duckdb_driver
-#' @export
-src_duckdb <- function(path = ":memory:", create = FALSE, read_only = FALSE) {
-  requireNamespace("dbplyr", quietly = TRUE)
-  if (path != ":memory:" && !create && !file.exists(path)) {
-    stop("`path` '", path, "' must already exist, unless `create` = TRUE")
-  }
-  con <- DBI::dbConnect(duckdb::duckdb(), path, read_only = read_only)
-  dbplyr::src_dbi(con, auto_disconnect = TRUE)
-}
diff --git a/tools/rpkg/man/duckdb_driver.Rd b/tools/rpkg/man/duckdb_driver.Rd
index c06eebe926c5..b8d2fd3b39b6 100644
--- a/tools/rpkg/man/duckdb_driver.Rd
+++ b/tools/rpkg/man/duckdb_driver.Rd
@@ -11,7 +11,6 @@
 \alias{dbIsValid,duckdb_driver-method}
 \alias{dbGetInfo,duckdb_driver-method}
 \alias{duckdb_shutdown}
-\alias{src_duckdb}
 \title{DuckDB Driver}
 \usage{
 duckdb(dbdir = DBDIR_MEMORY, read_only = FALSE)
@@ -33,8 +32,6 @@ duckdb(dbdir = DBDIR_MEMORY, read_only = FALSE)
 \S4method{dbGetInfo}{duckdb_driver}(dbObj, ...)
 
 duckdb_shutdown(drv)
-
-src_duckdb(path = ":memory:", create = FALSE, read_only = FALSE)
 }
 \arguments{
 \item{dbdir}{The file in which the DuckDB database should be stored}
@@ -57,10 +54,6 @@ For details see the appropriate \code{DBIDriver}.}
 or \linkS4class{DBIConnection}}
 
 \item{obj}{An R object whose SQL type we want to determine.}
-
-\item{path}{The file in which the DuckDB database should be stored}
-
-\item{create}{Create a new database if none is present in `path`}
 }
 \description{
 A DuckDB database instance.
