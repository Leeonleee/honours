You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
`duckdb.duckdb.InvalidInputException: Invalid Input Error: PandasScan called but GIL was already held!` on recursive python calls
### What happens?

A code previously working until duckdb 1.0.0 started erroring out in duckdb 1.1 by raising following error:

```
    res = eval(code, gs, ns)
          ^^^^^^^^^^^^^^^^^^
  File "<string>", line 1, in <module>
duckdb.duckdb.InvalidInputException: Invalid Input Error: PandasScan called but GIL was already held!
```


### To Reproduce

```
import pandas as pd
import duckdb

get_data = lambda start, N=10: pd.DataFrame({'a':range(N), 'b':[f'{i+1}' for i in range(start, start+N)]})

tab1 = get_data(65)
tab2 = get_data(66)

db = duckdb.connect()
sql = '''
create table fixed_ids as
with recursive fanout as (
    SELECT c1.a as node_id, c2.a as comp_id2,
        from tab1 c1
        inner JOIN tab2 c2 on c1.b = c2.b
        inner JOIN tab2 c2l2 on c2.a = c2l2.a
    UNION all
    SELECT fo.comp_id2 as node_id, c2l1.b as comp_id2
        FROM tab1 c1 inner JOIN fanout fo ON fo.comp_id2 = c1.a
        inner JOIN tab2 c2l1 on c1.b = c2l1.b
)
SELECT node_id, first(comp_id2)::uint64 as fixed_id from fanout group by node_id;

SELECT * from fixed_ids
'''
if 0: # Enable to run sql statement-by-statement to workaround https://github.com/duckdb/duckdb/issues/13863
    stmts = db.extract_statements(sql)
    for stmt in stmts[:-1]:
        db.execute(stmt.query)
    sql = stmts[-1].query
print(db.execute(sql).df())
```



### OS:

RH8

### DuckDB Version:

1.1.0

### DuckDB Client:

python

### Hardware:

_No response_

### Full Name:

Pankaj Pandey

### Affiliation:

Cadence

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

Tested with duckdb 1.1 release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of tools/pythonpkg/src/pyconnection.cpp]
1: #include "duckdb_python/pyconnection/pyconnection.hpp"
2: 
3: #include "duckdb/catalog/default/default_types.hpp"
4: #include "duckdb/common/arrow/arrow.hpp"
5: #include "duckdb/common/enums/file_compression_type.hpp"
6: #include "duckdb/common/printer.hpp"
7: #include "duckdb/common/types.hpp"
8: #include "duckdb/common/types/vector.hpp"
9: #include "duckdb/function/table/read_csv.hpp"
10: #include "duckdb/main/client_config.hpp"
11: #include "duckdb/main/client_context.hpp"
12: #include "duckdb/main/config.hpp"
13: #include "duckdb/main/db_instance_cache.hpp"
14: #include "duckdb/main/extension_helper.hpp"
15: #include "duckdb/main/prepared_statement.hpp"
16: #include "duckdb/main/relation/read_csv_relation.hpp"
17: #include "duckdb/main/relation/read_json_relation.hpp"
18: #include "duckdb/main/relation/value_relation.hpp"
19: #include "duckdb/main/relation/view_relation.hpp"
20: #include "duckdb/parser/expression/constant_expression.hpp"
21: #include "duckdb/parser/expression/function_expression.hpp"
22: #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
23: #include "duckdb/parser/parser.hpp"
24: #include "duckdb/parser/statement/select_statement.hpp"
25: #include "duckdb/parser/tableref/subqueryref.hpp"
26: #include "duckdb/parser/tableref/table_function_ref.hpp"
27: #include "duckdb_python/arrow/arrow_array_stream.hpp"
28: #include "duckdb_python/map.hpp"
29: #include "duckdb_python/pandas/pandas_scan.hpp"
30: #include "duckdb_python/pyrelation.hpp"
31: #include "duckdb_python/pystatement.hpp"
32: #include "duckdb_python/pyresult.hpp"
33: #include "duckdb_python/python_conversion.hpp"
34: #include "duckdb_python/numpy/numpy_type.hpp"
35: #include "duckdb/main/prepared_statement.hpp"
36: #include "duckdb_python/jupyter_progress_bar_display.hpp"
37: #include "duckdb_python/pyfilesystem.hpp"
38: #include "duckdb/main/client_config.hpp"
39: #include "duckdb/function/table/read_csv.hpp"
40: #include "duckdb/common/enums/file_compression_type.hpp"
41: #include "duckdb/catalog/default/default_types.hpp"
42: #include "duckdb/main/relation/value_relation.hpp"
43: #include "duckdb_python/filesystem_object.hpp"
44: #include "duckdb/parser/parsed_data/create_scalar_function_info.hpp"
45: #include "duckdb/function/scalar_function.hpp"
46: #include "duckdb_python/pandas/pandas_scan.hpp"
47: #include "duckdb_python/python_objects.hpp"
48: #include "duckdb/function/function.hpp"
49: #include "duckdb_python/pybind11/conversions/exception_handling_enum.hpp"
50: #include "duckdb/parser/parsed_data/drop_info.hpp"
51: #include "duckdb/catalog/catalog_entry/scalar_function_catalog_entry.hpp"
52: #include "duckdb/main/pending_query_result.hpp"
53: #include "duckdb/parser/keyword_helper.hpp"
54: #include "duckdb_python/python_replacement_scan.hpp"
55: #include "duckdb/common/shared_ptr.hpp"
56: #include "duckdb/main/materialized_query_result.hpp"
57: #include "duckdb/main/stream_query_result.hpp"
58: #include "duckdb/main/relation/materialized_relation.hpp"
59: #include "duckdb/main/relation/query_relation.hpp"
60: #include "duckdb/main/extension_util.hpp"
61: 
62: #include <random>
63: 
64: #include "duckdb/common/printer.hpp"
65: 
66: namespace duckdb {
67: 
68: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::default_connection = nullptr;       // NOLINT: allow global
69: DBInstanceCache instance_cache;                                                        // NOLINT: allow global
70: shared_ptr<PythonImportCache> DuckDBPyConnection::import_cache = nullptr;              // NOLINT: allow global
71: PythonEnvironmentType DuckDBPyConnection::environment = PythonEnvironmentType::NORMAL; // NOLINT: allow global
72: 
73: DuckDBPyConnection::~DuckDBPyConnection() {
74: 	try {
75: 		py::gil_scoped_release gil;
76: 		// Release any structures that do not need to hold the GIL here
77: 		con.SetDatabase(nullptr);
78: 		con.SetConnection(nullptr);
79: 	} catch (...) { // NOLINT
80: 	}
81: }
82: 
83: void DuckDBPyConnection::DetectEnvironment() {
84: 	// If __main__ does not have a __file__ attribute, we are in interactive mode
85: 	auto main_module = py::module_::import("__main__");
86: 	if (py::hasattr(main_module, "__file__")) {
87: 		return;
88: 	}
89: 	DuckDBPyConnection::environment = PythonEnvironmentType::INTERACTIVE;
90: 	if (!ModuleIsLoaded<IpythonCacheItem>()) {
91: 		return;
92: 	}
93: 
94: 	// Check to see if we are in a Jupyter Notebook
95: 	auto &import_cache_py = *DuckDBPyConnection::ImportCache();
96: 	auto get_ipython = import_cache_py.IPython.get_ipython();
97: 	if (get_ipython.ptr() == nullptr) {
98: 		// Could either not load the IPython module, or it has no 'get_ipython' attribute
99: 		return;
100: 	}
101: 	auto ipython = get_ipython();
102: 	if (!py::hasattr(ipython, "config")) {
103: 		return;
104: 	}
105: 	py::dict ipython_config = ipython.attr("config");
106: 	if (ipython_config.contains("IPKernelApp")) {
107: 		DuckDBPyConnection::environment = PythonEnvironmentType::JUPYTER;
108: 	}
109: 	return;
110: }
111: 
112: bool DuckDBPyConnection::DetectAndGetEnvironment() {
113: 	DuckDBPyConnection::DetectEnvironment();
114: 	return DuckDBPyConnection::IsInteractive();
115: }
116: 
117: bool DuckDBPyConnection::IsJupyter() {
118: 	return DuckDBPyConnection::environment == PythonEnvironmentType::JUPYTER;
119: }
120: 
121: // NOTE: this function is generated by tools/pythonpkg/scripts/generate_connection_methods.py.
122: // Do not edit this function manually, your changes will be overwritten!
123: 
124: static void InitializeConnectionMethods(py::class_<DuckDBPyConnection, shared_ptr<DuckDBPyConnection>> &m) {
125: 	m.def("cursor", &DuckDBPyConnection::Cursor, "Create a duplicate of the current connection");
126: 	m.def("register_filesystem", &DuckDBPyConnection::RegisterFilesystem, "Register a fsspec compliant filesystem",
127: 	      py::arg("filesystem"));
128: 	m.def("unregister_filesystem", &DuckDBPyConnection::UnregisterFilesystem, "Unregister a filesystem",
129: 	      py::arg("name"));
130: 	m.def("list_filesystems", &DuckDBPyConnection::ListFilesystems,
131: 	      "List registered filesystems, including builtin ones");
132: 	m.def("filesystem_is_registered", &DuckDBPyConnection::FileSystemIsRegistered,
133: 	      "Check if a filesystem with the provided name is currently registered", py::arg("name"));
134: 	m.def("create_function", &DuckDBPyConnection::RegisterScalarUDF,
135: 	      "Create a DuckDB function out of the passing in Python function so it can be used in queries",
136: 	      py::arg("name"), py::arg("function"), py::arg("parameters") = py::none(), py::arg("return_type") = py::none(),
137: 	      py::kw_only(), py::arg("type") = PythonUDFType::NATIVE,
138: 	      py::arg("null_handling") = FunctionNullHandling::DEFAULT_NULL_HANDLING,
139: 	      py::arg("exception_handling") = PythonExceptionHandling::FORWARD_ERROR, py::arg("side_effects") = false);
140: 	m.def("remove_function", &DuckDBPyConnection::UnregisterUDF, "Remove a previously created function",
141: 	      py::arg("name"));
142: 	m.def("sqltype", &DuckDBPyConnection::Type, "Create a type object by parsing the 'type_str' string",
143: 	      py::arg("type_str"));
144: 	m.def("dtype", &DuckDBPyConnection::Type, "Create a type object by parsing the 'type_str' string",
145: 	      py::arg("type_str"));
146: 	m.def("type", &DuckDBPyConnection::Type, "Create a type object by parsing the 'type_str' string",
147: 	      py::arg("type_str"));
148: 	m.def("array_type", &DuckDBPyConnection::ArrayType, "Create an array type object of 'type'",
149: 	      py::arg("type").none(false), py::arg("size"));
150: 	m.def("list_type", &DuckDBPyConnection::ListType, "Create a list type object of 'type'",
151: 	      py::arg("type").none(false));
152: 	m.def("union_type", &DuckDBPyConnection::UnionType, "Create a union type object from 'members'",
153: 	      py::arg("members").none(false));
154: 	m.def("string_type", &DuckDBPyConnection::StringType, "Create a string type with an optional collation",
155: 	      py::arg("collation") = "");
156: 	m.def("enum_type", &DuckDBPyConnection::EnumType,
157: 	      "Create an enum type of underlying 'type', consisting of the list of 'values'", py::arg("name"),
158: 	      py::arg("type"), py::arg("values"));
159: 	m.def("decimal_type", &DuckDBPyConnection::DecimalType, "Create a decimal type with 'width' and 'scale'",
160: 	      py::arg("width"), py::arg("scale"));
161: 	m.def("struct_type", &DuckDBPyConnection::StructType, "Create a struct type object from 'fields'",
162: 	      py::arg("fields"));
163: 	m.def("row_type", &DuckDBPyConnection::StructType, "Create a struct type object from 'fields'", py::arg("fields"));
164: 	m.def("map_type", &DuckDBPyConnection::MapType, "Create a map type object from 'key_type' and 'value_type'",
165: 	      py::arg("key").none(false), py::arg("value").none(false));
166: 	m.def("duplicate", &DuckDBPyConnection::Cursor, "Create a duplicate of the current connection");
167: 	m.def("execute", &DuckDBPyConnection::Execute,
168: 	      "Execute the given SQL query, optionally using prepared statements with parameters set", py::arg("query"),
169: 	      py::arg("parameters") = py::none());
170: 	m.def("executemany", &DuckDBPyConnection::ExecuteMany,
171: 	      "Execute the given prepared statement multiple times using the list of parameter sets in parameters",
172: 	      py::arg("query"), py::arg("parameters") = py::none());
173: 	m.def("close", &DuckDBPyConnection::Close, "Close the connection");
174: 	m.def("interrupt", &DuckDBPyConnection::Interrupt, "Interrupt pending operations");
175: 	m.def("fetchone", &DuckDBPyConnection::FetchOne, "Fetch a single row from a result following execute");
176: 	m.def("fetchmany", &DuckDBPyConnection::FetchMany, "Fetch the next set of rows from a result following execute",
177: 	      py::arg("size") = 1);
178: 	m.def("fetchall", &DuckDBPyConnection::FetchAll, "Fetch all rows from a result following execute");
179: 	m.def("fetchnumpy", &DuckDBPyConnection::FetchNumpy, "Fetch a result as list of NumPy arrays following execute");
180: 	m.def("fetchdf", &DuckDBPyConnection::FetchDF, "Fetch a result as DataFrame following execute()", py::kw_only(),
181: 	      py::arg("date_as_object") = false);
182: 	m.def("fetch_df", &DuckDBPyConnection::FetchDF, "Fetch a result as DataFrame following execute()", py::kw_only(),
183: 	      py::arg("date_as_object") = false);
184: 	m.def("df", &DuckDBPyConnection::FetchDF, "Fetch a result as DataFrame following execute()", py::kw_only(),
185: 	      py::arg("date_as_object") = false);
186: 	m.def("fetch_df_chunk", &DuckDBPyConnection::FetchDFChunk,
187: 	      "Fetch a chunk of the result as DataFrame following execute()", py::arg("vectors_per_chunk") = 1,
188: 	      py::kw_only(), py::arg("date_as_object") = false);
189: 	m.def("pl", &DuckDBPyConnection::FetchPolars, "Fetch a result as Polars DataFrame following execute()",
190: 	      py::arg("rows_per_batch") = 1000000);
191: 	m.def("fetch_arrow_table", &DuckDBPyConnection::FetchArrow, "Fetch a result as Arrow table following execute()",
192: 	      py::arg("rows_per_batch") = 1000000);
193: 	m.def("arrow", &DuckDBPyConnection::FetchArrow, "Fetch a result as Arrow table following execute()",
194: 	      py::arg("rows_per_batch") = 1000000);
195: 	m.def("fetch_record_batch", &DuckDBPyConnection::FetchRecordBatchReader,
196: 	      "Fetch an Arrow RecordBatchReader following execute()", py::arg("rows_per_batch") = 1000000);
197: 	m.def("torch", &DuckDBPyConnection::FetchPyTorch, "Fetch a result as dict of PyTorch Tensors following execute()");
198: 	m.def("tf", &DuckDBPyConnection::FetchTF, "Fetch a result as dict of TensorFlow Tensors following execute()");
199: 	m.def("begin", &DuckDBPyConnection::Begin, "Start a new transaction");
200: 	m.def("commit", &DuckDBPyConnection::Commit, "Commit changes performed within a transaction");
201: 	m.def("rollback", &DuckDBPyConnection::Rollback, "Roll back changes performed within a transaction");
202: 	m.def("checkpoint", &DuckDBPyConnection::Checkpoint,
203: 	      "Synchronizes data in the write-ahead log (WAL) to the database data file (no-op for in-memory connections)");
204: 	m.def("append", &DuckDBPyConnection::Append, "Append the passed DataFrame to the named table",
205: 	      py::arg("table_name"), py::arg("df"), py::kw_only(), py::arg("by_name") = false);
206: 	m.def("register", &DuckDBPyConnection::RegisterPythonObject,
207: 	      "Register the passed Python Object value for querying with a view", py::arg("view_name"),
208: 	      py::arg("python_object"));
209: 	m.def("unregister", &DuckDBPyConnection::UnregisterPythonObject, "Unregister the view name", py::arg("view_name"));
210: 	m.def("table", &DuckDBPyConnection::Table, "Create a relation object for the named table", py::arg("table_name"));
211: 	m.def("view", &DuckDBPyConnection::View, "Create a relation object for the named view", py::arg("view_name"));
212: 	m.def("values", &DuckDBPyConnection::Values, "Create a relation object from the passed values", py::arg("values"));
213: 	m.def("table_function", &DuckDBPyConnection::TableFunction,
214: 	      "Create a relation object from the named table function with given parameters", py::arg("name"),
215: 	      py::arg("parameters") = py::none());
216: 	m.def("read_json", &DuckDBPyConnection::ReadJSON, "Create a relation object from the JSON file in 'name'",
217: 	      py::arg("path_or_buffer"), py::kw_only(), py::arg("columns") = py::none(),
218: 	      py::arg("sample_size") = py::none(), py::arg("maximum_depth") = py::none(), py::arg("records") = py::none(),
219: 	      py::arg("format") = py::none(), py::arg("date_format") = py::none(), py::arg("timestamp_format") = py::none(),
220: 	      py::arg("compression") = py::none(), py::arg("maximum_object_size") = py::none(),
221: 	      py::arg("ignore_errors") = py::none(), py::arg("convert_strings_to_integers") = py::none(),
222: 	      py::arg("field_appearance_threshold") = py::none(), py::arg("map_inference_threshold") = py::none(),
223: 	      py::arg("maximum_sample_files") = py::none(), py::arg("filename") = py::none(),
224: 	      py::arg("hive_partitioning") = py::none(), py::arg("union_by_name") = py::none(),
225: 	      py::arg("hive_types") = py::none(), py::arg("hive_types_autocast") = py::none());
226: 	m.def("extract_statements", &DuckDBPyConnection::ExtractStatements,
227: 	      "Parse the query string and extract the Statement object(s) produced", py::arg("query"));
228: 	m.def("sql", &DuckDBPyConnection::RunQuery,
229: 	      "Run a SQL query. If it is a SELECT statement, create a relation object from the given SQL query, otherwise "
230: 	      "run the query as-is.",
231: 	      py::arg("query"), py::kw_only(), py::arg("alias") = "", py::arg("params") = py::none());
232: 	m.def("query", &DuckDBPyConnection::RunQuery,
233: 	      "Run a SQL query. If it is a SELECT statement, create a relation object from the given SQL query, otherwise "
234: 	      "run the query as-is.",
235: 	      py::arg("query"), py::kw_only(), py::arg("alias") = "", py::arg("params") = py::none());
236: 	m.def("from_query", &DuckDBPyConnection::RunQuery,
237: 	      "Run a SQL query. If it is a SELECT statement, create a relation object from the given SQL query, otherwise "
238: 	      "run the query as-is.",
239: 	      py::arg("query"), py::kw_only(), py::arg("alias") = "", py::arg("params") = py::none());
240: 	m.def("read_csv", &DuckDBPyConnection::ReadCSV, "Create a relation object from the CSV file in 'name'",
241: 	      py::arg("path_or_buffer"), py::kw_only());
242: 	m.def("from_csv_auto", &DuckDBPyConnection::ReadCSV, "Create a relation object from the CSV file in 'name'",
243: 	      py::arg("path_or_buffer"), py::kw_only());
244: 	m.def("from_df", &DuckDBPyConnection::FromDF, "Create a relation object from the DataFrame in df", py::arg("df"));
245: 	m.def("from_arrow", &DuckDBPyConnection::FromArrow, "Create a relation object from an Arrow object",
246: 	      py::arg("arrow_object"));
247: 	m.def("from_parquet", &DuckDBPyConnection::FromParquet,
248: 	      "Create a relation object from the Parquet files in file_glob", py::arg("file_glob"),
249: 	      py::arg("binary_as_string") = false, py::kw_only(), py::arg("file_row_number") = false,
250: 	      py::arg("filename") = false, py::arg("hive_partitioning") = false, py::arg("union_by_name") = false,
251: 	      py::arg("compression") = py::none());
252: 	m.def("read_parquet", &DuckDBPyConnection::FromParquet,
253: 	      "Create a relation object from the Parquet files in file_glob", py::arg("file_glob"),
254: 	      py::arg("binary_as_string") = false, py::kw_only(), py::arg("file_row_number") = false,
255: 	      py::arg("filename") = false, py::arg("hive_partitioning") = false, py::arg("union_by_name") = false,
256: 	      py::arg("compression") = py::none());
257: 	m.def("from_parquet", &DuckDBPyConnection::FromParquets,
258: 	      "Create a relation object from the Parquet files in file_globs", py::arg("file_globs"),
259: 	      py::arg("binary_as_string") = false, py::kw_only(), py::arg("file_row_number") = false,
260: 	      py::arg("filename") = false, py::arg("hive_partitioning") = false, py::arg("union_by_name") = false,
261: 	      py::arg("compression") = py::none());
262: 	m.def("read_parquet", &DuckDBPyConnection::FromParquets,
263: 	      "Create a relation object from the Parquet files in file_globs", py::arg("file_globs"),
264: 	      py::arg("binary_as_string") = false, py::kw_only(), py::arg("file_row_number") = false,
265: 	      py::arg("filename") = false, py::arg("hive_partitioning") = false, py::arg("union_by_name") = false,
266: 	      py::arg("compression") = py::none());
267: 	m.def("from_substrait", &DuckDBPyConnection::FromSubstrait, "Create a query object from protobuf plan",
268: 	      py::arg("proto"));
269: 	m.def("get_substrait", &DuckDBPyConnection::GetSubstrait, "Serialize a query to protobuf", py::arg("query"),
270: 	      py::kw_only(), py::arg("enable_optimizer") = true);
271: 	m.def("get_substrait_json", &DuckDBPyConnection::GetSubstraitJSON,
272: 	      "Serialize a query to protobuf on the JSON format", py::arg("query"), py::kw_only(),
273: 	      py::arg("enable_optimizer") = true);
274: 	m.def("from_substrait_json", &DuckDBPyConnection::FromSubstraitJSON,
275: 	      "Create a query object from a JSON protobuf plan", py::arg("json"));
276: 	m.def("get_table_names", &DuckDBPyConnection::GetTableNames, "Extract the required table names from a query",
277: 	      py::arg("query"));
278: 	m.def("install_extension", &DuckDBPyConnection::InstallExtension, "Install an extension by name",
279: 	      py::arg("extension"), py::kw_only(), py::arg("force_install") = false);
280: 	m.def("load_extension", &DuckDBPyConnection::LoadExtension, "Load an installed extension", py::arg("extension"));
281: } // END_OF_CONNECTION_METHODS
282: 
283: void DuckDBPyConnection::UnregisterFilesystem(const py::str &name) {
284: 	auto &database = con.GetDatabase();
285: 	auto &fs = database.GetFileSystem();
286: 
287: 	fs.UnregisterSubSystem(name);
288: }
289: 
290: void DuckDBPyConnection::RegisterFilesystem(AbstractFileSystem filesystem) {
291: 	PythonGILWrapper gil_wrapper;
292: 
293: 	auto &database = con.GetDatabase();
294: 	if (!py::isinstance<AbstractFileSystem>(filesystem)) {
295: 		throw InvalidInputException("Bad filesystem instance");
296: 	}
297: 
298: 	auto &fs = database.GetFileSystem();
299: 
300: 	auto protocol = filesystem.attr("protocol");
301: 	if (protocol.is_none() || py::str("abstract").equal(protocol)) {
302: 		throw InvalidInputException("Must provide concrete fsspec implementation");
303: 	}
304: 
305: 	vector<string> protocols;
306: 	if (py::isinstance<py::str>(protocol)) {
307: 		protocols.push_back(py::str(protocol));
308: 	} else {
309: 		for (const auto &sub_protocol : protocol) {
310: 			protocols.push_back(py::str(sub_protocol));
311: 		}
312: 	}
313: 
314: 	fs.RegisterSubSystem(make_uniq<PythonFilesystem>(std::move(protocols), std::move(filesystem)));
315: }
316: 
317: py::list DuckDBPyConnection::ListFilesystems() {
318: 	auto &database = con.GetDatabase();
319: 	auto subsystems = database.GetFileSystem().ListSubSystems();
320: 	py::list names;
321: 	for (auto &name : subsystems) {
322: 		names.append(py::str(name));
323: 	}
324: 	return names;
325: }
326: 
327: py::list DuckDBPyConnection::ExtractStatements(const string &query) {
328: 	py::list result;
329: 	auto &connection = con.GetConnection();
330: 	auto statements = connection.ExtractStatements(query);
331: 	for (auto &statement : statements) {
332: 		result.append(make_uniq<DuckDBPyStatement>(std::move(statement)));
333: 	}
334: 	return result;
335: }
336: 
337: bool DuckDBPyConnection::FileSystemIsRegistered(const string &name) {
338: 	auto &database = con.GetDatabase();
339: 	auto subsystems = database.GetFileSystem().ListSubSystems();
340: 	return std::find(subsystems.begin(), subsystems.end(), name) != subsystems.end();
341: }
342: 
343: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::UnregisterUDF(const string &name) {
344: 	auto entry = registered_functions.find(name);
345: 	if (entry == registered_functions.end()) {
346: 		// Not registered or already unregistered
347: 		throw InvalidInputException("No function by the name of '%s' was found in the list of registered functions",
348: 		                            name);
349: 	}
350: 
351: 	auto &connection = con.GetConnection();
352: 	auto &context = *connection.context;
353: 
354: 	context.RunFunctionInTransaction([&]() {
355: 		// create function
356: 		auto &catalog = Catalog::GetCatalog(context, SYSTEM_CATALOG);
357: 		DropInfo info;
358: 		info.type = CatalogType::SCALAR_FUNCTION_ENTRY;
359: 		info.name = name;
360: 		info.allow_drop_internal = true;
361: 		info.cascade = false;
362: 		info.if_not_found = OnEntryNotFound::THROW_EXCEPTION;
363: 		catalog.DropEntry(context, info);
364: 	});
365: 	registered_functions.erase(entry);
366: 
367: 	return shared_from_this();
368: }
369: 
370: shared_ptr<DuckDBPyConnection>
371: DuckDBPyConnection::RegisterScalarUDF(const string &name, const py::function &udf, const py::object &parameters_p,
372:                                       const shared_ptr<DuckDBPyType> &return_type_p, PythonUDFType type,
373:                                       FunctionNullHandling null_handling, PythonExceptionHandling exception_handling,
374:                                       bool side_effects) {
375: 	auto &connection = con.GetConnection();
376: 	auto &context = *connection.context;
377: 
378: 	if (context.transaction.HasActiveTransaction()) {
379: 		context.CancelTransaction();
380: 	}
381: 	if (registered_functions.find(name) != registered_functions.end()) {
382: 		throw NotImplementedException("A function by the name of '%s' is already created, creating multiple "
383: 		                              "functions with the same name is not supported yet, please remove it first",
384: 		                              name);
385: 	}
386: 	auto scalar_function = CreateScalarUDF(name, udf, parameters_p, return_type_p, type == PythonUDFType::ARROW,
387: 	                                       null_handling, exception_handling, side_effects);
388: 	CreateScalarFunctionInfo info(scalar_function);
389: 
390: 	context.RegisterFunction(info);
391: 
392: 	auto dependency = make_uniq<ExternalDependency>();
393: 	dependency->AddDependency("function", PythonDependencyItem::Create(udf));
394: 	registered_functions[name] = std::move(dependency);
395: 
396: 	return shared_from_this();
397: }
398: 
399: void DuckDBPyConnection::Initialize(py::handle &m) {
400: 	auto connection_module =
401: 	    py::class_<DuckDBPyConnection, shared_ptr<DuckDBPyConnection>>(m, "DuckDBPyConnection", py::module_local());
402: 
403: 	connection_module.def("__enter__", &DuckDBPyConnection::Enter)
404: 	    .def("__exit__", &DuckDBPyConnection::Exit, py::arg("exc_type"), py::arg("exc"), py::arg("traceback"));
405: 	connection_module.def("__del__", &DuckDBPyConnection::Close);
406: 
407: 	InitializeConnectionMethods(connection_module);
408: 	connection_module.def_property_readonly("description", &DuckDBPyConnection::GetDescription,
409: 	                                        "Get result set attributes, mainly column names");
410: 	connection_module.def_property_readonly("rowcount", &DuckDBPyConnection::GetRowcount, "Get result set row count");
411: 	PyDateTime_IMPORT; // NOLINT
412: 	DuckDBPyConnection::ImportCache();
413: }
414: 
415: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::ExecuteMany(const py::object &query, py::object params_p) {
416: 	con.SetResult(nullptr);
417: 	if (params_p.is_none()) {
418: 		params_p = py::list();
419: 	}
420: 
421: 	auto statements = GetStatements(query);
422: 	if (statements.empty()) {
423: 		// TODO: should we throw?
424: 		return nullptr;
425: 	}
426: 
427: 	auto last_statement = std::move(statements.back());
428: 	statements.pop_back();
429: 	// First immediately execute any preceding statements (if any)
430: 	// FIXME: DBAPI says to not accept an 'executemany' call with multiple statements
431: 	ExecuteImmediately(std::move(statements));
432: 
433: 	auto prep = PrepareQuery(std::move(last_statement));
434: 
435: 	if (!py::is_list_like(params_p)) {
436: 		throw InvalidInputException("executemany requires a list of parameter sets to be provided");
437: 	}
438: 	auto outer_list = py::list(params_p);
439: 	if (outer_list.empty()) {
440: 		throw InvalidInputException("executemany requires a non-empty list of parameter sets to be provided");
441: 	}
442: 
443: 	unique_ptr<QueryResult> query_result;
444: 	// Execute once for every set of parameters that are provided
445: 	for (auto &parameters : outer_list) {
446: 		auto params = py::reinterpret_borrow<py::object>(parameters);
447: 		query_result = ExecuteInternal(*prep, std::move(params));
448: 	}
449: 	// Set the internal 'result' object
450: 	if (query_result) {
451: 		auto py_result = make_uniq<DuckDBPyResult>(std::move(query_result));
452: 		con.SetResult(make_uniq<DuckDBPyRelation>(std::move(py_result)));
453: 	}
454: 
455: 	return shared_from_this();
456: }
457: 
458: unique_ptr<QueryResult> DuckDBPyConnection::CompletePendingQuery(PendingQueryResult &pending_query) {
459: 	PendingExecutionResult execution_result;
460: 	while (!PendingQueryResult::IsResultReady(execution_result = pending_query.ExecuteTask())) {
461: 		{
462: 			py::gil_scoped_acquire gil;
463: 			if (PyErr_CheckSignals() != 0) {
464: 				throw std::runtime_error("Query interrupted");
465: 			}
466: 		}
467: 		if (execution_result == PendingExecutionResult::BLOCKED) {
468: 			pending_query.WaitForTask();
469: 		}
470: 	}
471: 	if (execution_result == PendingExecutionResult::EXECUTION_ERROR) {
472: 		pending_query.ThrowError();
473: 	}
474: 	return pending_query.Execute();
475: }
476: 
477: py::list TransformNamedParameters(const case_insensitive_map_t<idx_t> &named_param_map, const py::dict &params) {
478: 	py::list new_params(params.size());
479: 
480: 	for (auto &item : params) {
481: 		const std::string &item_name = item.first.cast<std::string>();
482: 		auto entry = named_param_map.find(item_name);
483: 		if (entry == named_param_map.end()) {
484: 			throw InvalidInputException(
485: 			    "Named parameters could not be transformed, because query string is missing named parameter '%s'",
486: 			    item_name);
487: 		}
488: 		auto param_idx = entry->second;
489: 		// Add the value of the named parameter to the list
490: 		new_params[param_idx - 1] = item.second;
491: 	}
492: 
493: 	if (named_param_map.size() != params.size()) {
494: 		// One or more named parameters were expected, but not found
495: 		vector<string> missing_params;
496: 		missing_params.reserve(named_param_map.size());
497: 		for (auto &entry : named_param_map) {
498: 			auto &name = entry.first;
499: 			if (!params.contains(name)) {
500: 				missing_params.push_back(name);
501: 			}
502: 		}
503: 		auto message = StringUtil::Join(missing_params, ", ");
504: 		throw InvalidInputException("Not all named parameters have been located, missing: %s", message);
505: 	}
506: 
507: 	return new_params;
508: }
509: 
510: case_insensitive_map_t<BoundParameterData> TransformPreparedParameters(PreparedStatement &prep,
511:                                                                        const py::object &params) {
512: 	case_insensitive_map_t<BoundParameterData> named_values;
513: 	if (py::is_list_like(params)) {
514: 		if (prep.named_param_map.size() != py::len(params)) {
515: 			if (py::len(params) == 0) {
516: 				throw InvalidInputException("Expected %d parameters, but none were supplied",
517: 				                            prep.named_param_map.size());
518: 			}
519: 			throw InvalidInputException("Prepared statement needs %d parameters, %d given", prep.named_param_map.size(),
520: 			                            py::len(params));
521: 		}
522: 		auto unnamed_values = DuckDBPyConnection::TransformPythonParamList(params);
523: 		for (idx_t i = 0; i < unnamed_values.size(); i++) {
524: 			auto &value = unnamed_values[i];
525: 			auto identifier = std::to_string(i + 1);
526: 			named_values[identifier] = BoundParameterData(std::move(value));
527: 		}
528: 	} else if (py::is_dict_like(params)) {
529: 		auto dict = py::cast<py::dict>(params);
530: 		named_values = DuckDBPyConnection::TransformPythonParamDict(dict);
531: 	} else {
532: 		throw InvalidInputException("Prepared parameters can only be passed as a list or a dictionary");
533: 	}
534: 	return named_values;
535: }
536: 
537: unique_ptr<PreparedStatement> DuckDBPyConnection::PrepareQuery(unique_ptr<SQLStatement> statement) {
538: 	auto &connection = con.GetConnection();
539: 	unique_ptr<PreparedStatement> prep;
540: 	{
541: 		py::gil_scoped_release release;
542: 		unique_lock<mutex> lock(py_connection_lock);
543: 
544: 		prep = connection.Prepare(std::move(statement));
545: 		if (prep->HasError()) {
546: 			prep->error.Throw();
547: 		}
548: 	}
549: 	return prep;
550: }
551: 
552: unique_ptr<QueryResult> DuckDBPyConnection::ExecuteInternal(PreparedStatement &prep, py::object params) {
553: 	if (params.is_none()) {
554: 		params = py::list();
555: 	}
556: 
557: 	// Execute the prepared statement with the prepared parameters
558: 	auto named_values = TransformPreparedParameters(prep, params);
559: 	unique_ptr<QueryResult> res;
560: 	{
561: 		py::gil_scoped_release release;
562: 		unique_lock<std::mutex> lock(py_connection_lock);
563: 
564: 		auto pending_query = prep.PendingQuery(named_values);
565: 		if (pending_query->HasError()) {
566: 			pending_query->ThrowError();
567: 		}
568: 		res = CompletePendingQuery(*pending_query);
569: 
570: 		if (res->HasError()) {
571: 			res->ThrowError();
572: 		}
573: 	}
574: 	return res;
575: }
576: 
577: vector<unique_ptr<SQLStatement>> DuckDBPyConnection::GetStatements(const py::object &query) {
578: 	vector<unique_ptr<SQLStatement>> result;
579: 	auto &connection = con.GetConnection();
580: 
581: 	shared_ptr<DuckDBPyStatement> statement_obj;
582: 	if (py::try_cast(query, statement_obj)) {
583: 		result.push_back(statement_obj->GetStatement());
584: 		return result;
585: 	}
586: 	if (py::isinstance<py::str>(query)) {
587: 		auto sql_query = std::string(py::str(query));
588: 		return connection.ExtractStatements(sql_query);
589: 	}
590: 	throw InvalidInputException("Please provide either a DuckDBPyStatement or a string representing the query");
591: }
592: 
593: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::ExecuteFromString(const string &query) {
594: 	return Execute(py::str(query));
595: }
596: 
597: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Execute(const py::object &query, py::object params) {
598: 	con.SetResult(nullptr);
599: 
600: 	auto statements = GetStatements(query);
601: 	if (statements.empty()) {
602: 		// TODO: should we throw?
603: 		return nullptr;
604: 	}
605: 
606: 	auto last_statement = std::move(statements.back());
607: 	statements.pop_back();
608: 	// First immediately execute any preceding statements (if any)
609: 	// FIXME: SQLites implementation says to not accept an 'execute' call with multiple statements
610: 	ExecuteImmediately(std::move(statements));
611: 
612: 	auto prep = PrepareQuery(std::move(last_statement));
613: 	auto res = ExecuteInternal(*prep, std::move(params));
614: 
615: 	// Set the internal 'result' object
616: 	if (res) {
617: 		auto py_result = make_uniq<DuckDBPyResult>(std::move(res));
618: 		con.SetResult(make_uniq<DuckDBPyRelation>(std::move(py_result)));
619: 	}
620: 	return shared_from_this();
621: }
622: 
623: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Append(const string &name, const PandasDataFrame &value,
624:                                                           bool by_name) {
625: 	RegisterPythonObject("__append_df", value);
626: 	string columns = "";
627: 	if (by_name) {
628: 		auto df_columns = value.attr("columns");
629: 		vector<string> column_names;
630: 		for (auto &column : df_columns) {
631: 			column_names.push_back(std::string(py::str(column)));
632: 		}
633: 		columns += "(";
634: 		for (idx_t i = 0; i < column_names.size(); i++) {
635: 			auto &column = column_names[i];
636: 			if (i != 0) {
637: 				columns += ", ";
638: 			}
639: 			columns += StringUtil::Format("%s", SQLIdentifier(column));
640: 		}
641: 		columns += ")";
642: 	}
643: 
644: 	auto sql_query = StringUtil::Format("INSERT INTO %s %s SELECT * FROM __append_df", SQLIdentifier(name), columns);
645: 	return Execute(py::str(sql_query));
646: }
647: 
648: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::RegisterPythonObject(const string &name,
649:                                                                         const py::object &python_object) {
650: 	auto &connection = con.GetConnection();
651: 	auto &client = *connection.context;
652: 	auto object = PythonReplacementScan::ReplacementObject(python_object, name, client);
653: 	auto view_rel = make_shared_ptr<ViewRelation>(connection.context, std::move(object), name);
654: 	bool replace = registered_objects.count(name);
655: 	view_rel->CreateView(name, replace, true);
656: 	registered_objects.insert(name);
657: 	return shared_from_this();
658: }
659: 
660: static void ParseMultiFileReaderOptions(named_parameter_map_t &options, const Optional<py::object> &filename,
661:                                         const Optional<py::object> &hive_partitioning,
662:                                         const Optional<py::object> &union_by_name,
663:                                         const Optional<py::object> &hive_types,
664:                                         const Optional<py::object> &hive_types_autocast) {
665: 	if (!py::none().is(filename)) {
666: 		auto val = TransformPythonValue(filename);
667: 		options["filename"] = val;
668: 	}
669: 
670: 	if (!py::none().is(hive_types)) {
671: 		auto val = TransformPythonValue(hive_types);
672: 		options["hive_types"] = val;
673: 	}
674: 
675: 	if (!py::none().is(hive_partitioning)) {
676: 		if (!py::isinstance<py::bool_>(hive_partitioning)) {
677: 			string actual_type = py::str(hive_partitioning.get_type());
678: 			throw BinderException("read_json only accepts 'hive_partitioning' as a boolean, not '%s'", actual_type);
679: 		}
680: 		auto val = TransformPythonValue(hive_partitioning, LogicalTypeId::BOOLEAN);
681: 		options["hive_partitioning"] = val;
682: 	}
683: 
684: 	if (!py::none().is(union_by_name)) {
685: 		if (!py::isinstance<py::bool_>(union_by_name)) {
686: 			string actual_type = py::str(union_by_name.get_type());
687: 			throw BinderException("read_json only accepts 'union_by_name' as a boolean, not '%s'", actual_type);
688: 		}
689: 		auto val = TransformPythonValue(union_by_name, LogicalTypeId::BOOLEAN);
690: 		options["union_by_name"] = val;
691: 	}
692: 
693: 	if (!py::none().is(hive_types_autocast)) {
694: 		if (!py::isinstance<py::bool_>(hive_types_autocast)) {
695: 			string actual_type = py::str(hive_types_autocast.get_type());
696: 			throw BinderException("read_json only accepts 'hive_types_autocast' as a boolean, not '%s'", actual_type);
697: 		}
698: 		auto val = TransformPythonValue(hive_types_autocast, LogicalTypeId::BOOLEAN);
699: 		options["hive_types_autocast"] = val;
700: 	}
701: }
702: 
703: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::ReadJSON(
704:     const py::object &name_p, const Optional<py::object> &columns, const Optional<py::object> &sample_size,
705:     const Optional<py::object> &maximum_depth, const Optional<py::str> &records, const Optional<py::str> &format,
706:     const Optional<py::object> &date_format, const Optional<py::object> &timestamp_format,
707:     const Optional<py::object> &compression, const Optional<py::object> &maximum_object_size,
708:     const Optional<py::object> &ignore_errors, const Optional<py::object> &convert_strings_to_integers,
709:     const Optional<py::object> &field_appearance_threshold, const Optional<py::object> &map_inference_threshold,
710:     const Optional<py::object> &maximum_sample_files, const Optional<py::object> &filename,
711:     const Optional<py::object> &hive_partitioning, const Optional<py::object> &union_by_name,
712:     const Optional<py::object> &hive_types, const Optional<py::object> &hive_types_autocast) {
713: 
714: 	named_parameter_map_t options;
715: 
716: 	auto &connection = con.GetConnection();
717: 	auto path_like = GetPathLike(name_p);
718: 	auto &name = path_like.files;
719: 	auto file_like_object_wrapper = std::move(path_like.dependency);
720: 
721: 	ParseMultiFileReaderOptions(options, filename, hive_partitioning, union_by_name, hive_types, hive_types_autocast);
722: 
723: 	if (!py::none().is(columns)) {
724: 		if (!py::is_dict_like(columns)) {
725: 			throw BinderException("read_json only accepts 'columns' as a dict[str, str]");
726: 		}
727: 		py::dict columns_dict = columns;
728: 		child_list_t<Value> struct_fields;
729: 
730: 		for (auto &kv : columns_dict) {
731: 			auto &column_name = kv.first;
732: 			auto &type = kv.second;
733: 			if (!py::isinstance<py::str>(column_name)) {
734: 				string actual_type = py::str(column_name.get_type());
735: 				throw BinderException("The provided column name must be a str, not of type '%s'", actual_type);
736: 			}
737: 			if (!py::isinstance<py::str>(type)) {
738: 				string actual_type = py::str(column_name.get_type());
739: 				throw BinderException("The provided column type must be a str, not of type '%s'", actual_type);
740: 			}
741: 			struct_fields.emplace_back(py::str(column_name), Value(py::str(type)));
742: 		}
743: 		auto dtype_struct = Value::STRUCT(std::move(struct_fields));
744: 		options["columns"] = std::move(dtype_struct);
745: 	}
746: 
747: 	if (!py::none().is(records)) {
748: 		if (!py::isinstance<py::str>(records)) {
749: 			string actual_type = py::str(records.get_type());
750: 			throw BinderException("read_json only accepts 'records' as a string, not '%s'", actual_type);
751: 		}
752: 		auto records_s = py::reinterpret_borrow<py::str>(records);
753: 		auto records_option = std::string(py::str(records_s));
754: 		options["records"] = Value(records_option);
755: 	}
756: 
757: 	if (!py::none().is(format)) {
758: 		if (!py::isinstance<py::str>(format)) {
759: 			string actual_type = py::str(format.get_type());
760: 			throw BinderException("read_json only accepts 'format' as a string, not '%s'", actual_type);
761: 		}
762: 		auto format_s = py::reinterpret_borrow<py::str>(format);
763: 		auto format_option = std::string(py::str(format_s));
764: 		options["format"] = Value(format_option);
765: 	}
766: 
767: 	if (!py::none().is(date_format)) {
768: 		if (!py::isinstance<py::str>(date_format)) {
769: 			string actual_type = py::str(date_format.get_type());
770: 			throw BinderException("read_json only accepts 'date_format' as a string, not '%s'", actual_type);
771: 		}
772: 		auto date_format_s = py::reinterpret_borrow<py::str>(date_format);
773: 		auto date_format_option = std::string(py::str(date_format_s));
774: 		options["date_format"] = Value(date_format_option);
775: 	}
776: 
777: 	if (!py::none().is(timestamp_format)) {
778: 		if (!py::isinstance<py::str>(timestamp_format)) {
779: 			string actual_type = py::str(timestamp_format.get_type());
780: 			throw BinderException("read_json only accepts 'timestamp_format' as a string, not '%s'", actual_type);
781: 		}
782: 		auto timestamp_format_s = py::reinterpret_borrow<py::str>(timestamp_format);
783: 		auto timestamp_format_option = std::string(py::str(timestamp_format_s));
784: 		options["timestamp_format"] = Value(timestamp_format_option);
785: 	}
786: 
787: 	if (!py::none().is(compression)) {
788: 		if (!py::isinstance<py::str>(compression)) {
789: 			string actual_type = py::str(compression.get_type());
790: 			throw BinderException("read_json only accepts 'compression' as a string, not '%s'", actual_type);
791: 		}
792: 		auto compression_s = py::reinterpret_borrow<py::str>(compression);
793: 		auto compression_option = std::string(py::str(compression_s));
794: 		options["compression"] = Value(compression_option);
795: 	}
796: 
797: 	if (!py::none().is(sample_size)) {
798: 		if (!py::isinstance<py::int_>(sample_size)) {
799: 			string actual_type = py::str(sample_size.get_type());
800: 			throw BinderException("read_json only accepts 'sample_size' as an integer, not '%s'", actual_type);
801: 		}
802: 		options["sample_size"] = Value::INTEGER(py::int_(sample_size));
803: 	}
804: 
805: 	if (!py::none().is(maximum_depth)) {
806: 		if (!py::isinstance<py::int_>(maximum_depth)) {
807: 			string actual_type = py::str(maximum_depth.get_type());
808: 			throw BinderException("read_json only accepts 'maximum_depth' as an integer, not '%s'", actual_type);
809: 		}
810: 		options["maximum_depth"] = Value::INTEGER(py::int_(maximum_depth));
811: 	}
812: 
813: 	if (!py::none().is(maximum_object_size)) {
814: 		if (!py::isinstance<py::int_>(maximum_object_size)) {
815: 			string actual_type = py::str(maximum_object_size.get_type());
816: 			throw BinderException("read_json only accepts 'maximum_object_size' as an unsigned integer, not '%s'",
817: 			                      actual_type);
818: 		}
819: 		auto val = TransformPythonValue(maximum_object_size, LogicalTypeId::UINTEGER);
820: 		options["maximum_object_size"] = val;
821: 	}
822: 
823: 	if (!py::none().is(ignore_errors)) {
824: 		if (!py::isinstance<py::bool_>(ignore_errors)) {
825: 			string actual_type = py::str(ignore_errors.get_type());
826: 			throw BinderException("read_json only accepts 'ignore_errors' as a boolean, not '%s'", actual_type);
827: 		}
828: 		auto val = TransformPythonValue(ignore_errors, LogicalTypeId::BOOLEAN);
829: 		options["ignore_errors"] = val;
830: 	}
831: 
832: 	if (!py::none().is(convert_strings_to_integers)) {
833: 		if (!py::isinstance<py::bool_>(convert_strings_to_integers)) {
834: 			string actual_type = py::str(convert_strings_to_integers.get_type());
835: 			throw BinderException("read_json only accepts 'convert_strings_to_integers' as a boolean, not '%s'",
836: 			                      actual_type);
837: 		}
838: 		auto val = TransformPythonValue(convert_strings_to_integers, LogicalTypeId::BOOLEAN);
839: 		options["convert_strings_to_integers"] = val;
840: 	}
841: 
842: 	if (!py::none().is(field_appearance_threshold)) {
843: 		if (!py::isinstance<py::float_>(field_appearance_threshold)) {
844: 			string actual_type = py::str(field_appearance_threshold.get_type());
845: 			throw BinderException("read_json only accepts 'field_appearance_threshold' as a float, not '%s'",
846: 			                      actual_type);
847: 		}
848: 		auto val = TransformPythonValue(field_appearance_threshold, LogicalTypeId::DOUBLE);
849: 		options["field_appearance_threshold"] = val;
850: 	}
851: 
852: 	if (!py::none().is(map_inference_threshold)) {
853: 		if (!py::isinstance<py::int_>(map_inference_threshold)) {
854: 			string actual_type = py::str(map_inference_threshold.get_type());
855: 			throw BinderException("read_json only accepts 'map_inference_threshold' as an integer, not '%s'",
856: 			                      actual_type);
857: 		}
858: 		auto val = TransformPythonValue(map_inference_threshold, LogicalTypeId::BIGINT);
859: 		options["map_inference_threshold"] = val;
860: 	}
861: 
862: 	if (!py::none().is(maximum_sample_files)) {
863: 		if (!py::isinstance<py::int_>(maximum_sample_files)) {
864: 			string actual_type = py::str(maximum_sample_files.get_type());
865: 			throw BinderException("read_json only accepts 'maximum_sample_files' as an integer, not '%s'", actual_type);
866: 		}
867: 		auto val = TransformPythonValue(maximum_sample_files, LogicalTypeId::BIGINT);
868: 		options["maximum_sample_files"] = val;
869: 	}
870: 
871: 	bool auto_detect = false;
872: 	if (!options.count("columns")) {
873: 		options["auto_detect"] = Value::BOOLEAN(true);
874: 		auto_detect = true;
875: 	}
876: 
877: 	py::gil_scoped_release gil;
878: 	auto read_json_relation =
879: 	    make_shared_ptr<ReadJSONRelation>(connection.context, name, std::move(options), auto_detect);
880: 	if (read_json_relation == nullptr) {
881: 		throw BinderException("read_json can only be used when the JSON extension is (statically) loaded");
882: 	}
883: 	if (file_like_object_wrapper) {
884: 		read_json_relation->AddExternalDependency(std::move(file_like_object_wrapper));
885: 	}
886: 	return make_uniq<DuckDBPyRelation>(std::move(read_json_relation));
887: }
888: 
889: PathLike DuckDBPyConnection::GetPathLike(const py::object &object) {
890: 	return PathLike::Create(object, *this);
891: }
892: 
893: static void AcceptableCSVOptions(const string &unkown_parameter) {
894: 	// List of strings to match against
895: 	const unordered_set<string> valid_parameters = {"header",
896: 	                                                "compression",
897: 	                                                "sep",
898: 	                                                "delimiter",
899: 	                                                "dtype",
900: 	                                                "na_values",
901: 	                                                "skiprows",
902: 	                                                "quotechar",
903: 	                                                "escapechar",
904: 	                                                "encoding",
905: 	                                                "parallel",
906: 	                                                "date_format",
907: 	                                                "timestamp_format",
908: 	                                                "sample_size",
909: 	                                                "all_varchar",
910: 	                                                "normalize_names",
911: 	                                                "null_padding",
912: 	                                                "names",
913: 	                                                "lineterminator",
914: 	                                                "columns",
915: 	                                                "auto_type_candidates",
916: 	                                                "max_line_size",
917: 	                                                "ignore_errors",
918: 	                                                "store_rejects",
919: 	                                                "rejects_table",
920: 	                                                "rejects_scan",
921: 	                                                "rejects_limit",
922: 	                                                "force_not_null",
923: 	                                                "buffer_size",
924: 	                                                "decimal",
925: 	                                                "allow_quoted_nulls",
926: 	                                                "filename",
927: 	                                                "hive_partitioning",
928: 	                                                "union_by_name",
929: 	                                                "hive_types",
930: 	                                                "hive_types_autocast"};
931: 
932: 	std::ostringstream error;
933: 	error << "The methods read_csv and read_csv_auto do not have the \"" << unkown_parameter << "\" argument." << '\n';
934: 	error << "Possible arguments as suggestions: " << '\n';
935: 	vector<string> parameters(valid_parameters.begin(), valid_parameters.end());
936: 	auto suggestions = StringUtil::TopNJaroWinkler(parameters, unkown_parameter, 3);
937: 	for (auto &suggestion : suggestions) {
938: 		error << "* " << suggestion << '\n';
939: 	}
940: 	throw InvalidInputException(error.str());
941: }
942: 
943: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::ReadCSV(const py::object &name_p, py::kwargs &kwargs) {
944: 	py::object header = py::none();
945: 	py::object compression = py::none();
946: 	py::object sep = py::none();
947: 	py::object delimiter = py::none();
948: 	py::object dtype = py::none();
949: 	py::object na_values = py::none();
950: 	py::object skiprows = py::none();
951: 	py::object quotechar = py::none();
952: 	py::object escapechar = py::none();
953: 	py::object encoding = py::none();
954: 	py::object parallel = py::none();
955: 	py::object date_format = py::none();
956: 	py::object timestamp_format = py::none();
957: 	py::object sample_size = py::none();
958: 	py::object all_varchar = py::none();
959: 	py::object normalize_names = py::none();
960: 	py::object null_padding = py::none();
961: 	py::object names_p = py::none();
962: 	py::object lineterminator = py::none();
963: 	py::object columns = py::none();
964: 	py::object auto_type_candidates = py::none();
965: 	py::object max_line_size = py::none();
966: 	py::object ignore_errors = py::none();
967: 	py::object store_rejects = py::none();
968: 	py::object rejects_table = py::none();
969: 	py::object rejects_scan = py::none();
970: 	py::object rejects_limit = py::none();
971: 	py::object force_not_null = py::none();
972: 	py::object buffer_size = py::none();
973: 	py::object decimal = py::none();
974: 	py::object allow_quoted_nulls = py::none();
975: 	py::object filename = py::none();
976: 	py::object hive_partitioning = py::none();
977: 	py::object union_by_name = py::none();
978: 	py::object hive_types = py::none();
979: 	py::object hive_types_autocast = py::none();
980: 	for (auto &arg : kwargs) {
981: 		const auto &arg_name = py::str(arg.first).cast<std::string>();
982: 
983: 		if (arg_name == "header") {
984: 			header = kwargs[arg_name.c_str()];
985: 		} else if (arg_name == "compression") {
986: 			compression = kwargs[arg_name.c_str()];
987: 		} else if (arg_name == "sep") {
988: 			sep = kwargs[arg_name.c_str()];
989: 		} else if (arg_name == "delimiter") {
990: 			delimiter = kwargs[arg_name.c_str()];
991: 		} else if (arg_name == "dtype") {
992: 			dtype = kwargs[arg_name.c_str()];
993: 		} else if (arg_name == "na_values") {
994: 			na_values = kwargs[arg_name.c_str()];
995: 		} else if (arg_name == "skiprows") {
996: 			skiprows = kwargs[arg_name.c_str()];
997: 		} else if (arg_name == "quotechar") {
998: 			quotechar = kwargs[arg_name.c_str()];
999: 		} else if (arg_name == "escapechar") {
1000: 			escapechar = kwargs[arg_name.c_str()];
1001: 		} else if (arg_name == "encoding") {
1002: 			encoding = kwargs[arg_name.c_str()];
1003: 		} else if (arg_name == "parallel") {
1004: 			parallel = kwargs[arg_name.c_str()];
1005: 		} else if (arg_name == "date_format") {
1006: 			date_format = kwargs[arg_name.c_str()];
1007: 		} else if (arg_name == "timestamp_format") {
1008: 			timestamp_format = kwargs[arg_name.c_str()];
1009: 		} else if (arg_name == "sample_size") {
1010: 			sample_size = kwargs[arg_name.c_str()];
1011: 		} else if (arg_name == "all_varchar") {
1012: 			all_varchar = kwargs[arg_name.c_str()];
1013: 		} else if (arg_name == "normalize_names") {
1014: 			normalize_names = kwargs[arg_name.c_str()];
1015: 		} else if (arg_name == "null_padding") {
1016: 			null_padding = kwargs[arg_name.c_str()];
1017: 		} else if (arg_name == "names") {
1018: 			names_p = kwargs[arg_name.c_str()];
1019: 		} else if (arg_name == "lineterminator") {
1020: 			lineterminator = kwargs[arg_name.c_str()];
1021: 		} else if (arg_name == "columns") {
1022: 			columns = kwargs[arg_name.c_str()];
1023: 		} else if (arg_name == "auto_type_candidates") {
1024: 			auto_type_candidates = kwargs[arg_name.c_str()];
1025: 		} else if (arg_name == "max_line_size") {
1026: 			max_line_size = kwargs[arg_name.c_str()];
1027: 		} else if (arg_name == "ignore_errors") {
1028: 			ignore_errors = kwargs[arg_name.c_str()];
1029: 		} else if (arg_name == "store_rejects") {
1030: 			store_rejects = kwargs[arg_name.c_str()];
1031: 		} else if (arg_name == "rejects_table") {
1032: 			rejects_table = kwargs[arg_name.c_str()];
1033: 		} else if (arg_name == "rejects_scan") {
1034: 			rejects_scan = kwargs[arg_name.c_str()];
1035: 		} else if (arg_name == "rejects_limit") {
1036: 			rejects_limit = kwargs[arg_name.c_str()];
1037: 		} else if (arg_name == "force_not_null") {
1038: 			force_not_null = kwargs[arg_name.c_str()];
1039: 		} else if (arg_name == "buffer_size") {
1040: 			buffer_size = kwargs[arg_name.c_str()];
1041: 		} else if (arg_name == "decimal") {
1042: 			decimal = kwargs[arg_name.c_str()];
1043: 		} else if (arg_name == "allow_quoted_nulls") {
1044: 			allow_quoted_nulls = kwargs[arg_name.c_str()];
1045: 		} else if (arg_name == "filename") {
1046: 			filename = kwargs[arg_name.c_str()];
1047: 		} else if (arg_name == "hive_partitioning") {
1048: 			hive_partitioning = kwargs[arg_name.c_str()];
1049: 		} else if (arg_name == "union_by_name") {
1050: 			union_by_name = kwargs[arg_name.c_str()];
1051: 		} else if (arg_name == "hive_types") {
1052: 			hive_types = kwargs[arg_name.c_str()];
1053: 		} else if (arg_name == "hive_types_autocast") {
1054: 			hive_types_autocast = kwargs[arg_name.c_str()];
1055: 		} else {
1056: 			AcceptableCSVOptions(arg_name);
1057: 		}
1058: 	}
1059: 
1060: 	auto &connection = con.GetConnection();
1061: 	CSVReaderOptions options;
1062: 	auto path_like = GetPathLike(name_p);
1063: 	auto &name = path_like.files;
1064: 	auto file_like_object_wrapper = std::move(path_like.dependency);
1065: 	named_parameter_map_t bind_parameters;
1066: 
1067: 	ParseMultiFileReaderOptions(bind_parameters, filename, hive_partitioning, union_by_name, hive_types,
1068: 	                            hive_types_autocast);
1069: 
1070: 	// First check if the header is explicitly set
1071: 	// when false this affects the returned types, so it needs to be known at initialization of the relation
1072: 	if (!py::none().is(header)) {
1073: 
1074: 		bool header_as_int = py::isinstance<py::int_>(header);
1075: 		bool header_as_bool = py::isinstance<py::bool_>(header);
1076: 
1077: 		bool header_value;
1078: 		if (header_as_bool) {
1079: 			header_value = py::bool_(header);
1080: 		} else if (header_as_int) {
1081: 			if ((int)py::int_(header) != 0) {
1082: 				throw InvalidInputException("read_csv only accepts 0 if 'header' is given as an integer");
1083: 			}
1084: 			header_value = true;
1085: 		} else {
1086: 			throw InvalidInputException("read_csv only accepts 'header' as an integer, or a boolean");
1087: 		}
1088: 		bind_parameters["header"] = Value::BOOLEAN(header_value);
1089: 	}
1090: 
1091: 	if (!py::none().is(compression)) {
1092: 		if (!py::isinstance<py::str>(compression)) {
1093: 			throw InvalidInputException("read_csv only accepts 'compression' as a string");
1094: 		}
1095: 		bind_parameters["compression"] = Value(py::str(compression));
1096: 	}
1097: 
1098: 	if (!py::none().is(dtype)) {
1099: 		if (py::is_dict_like(dtype)) {
1100: 			child_list_t<Value> struct_fields;
1101: 			py::dict dtype_dict = dtype;
1102: 			for (auto &kv : dtype_dict) {
1103: 				shared_ptr<DuckDBPyType> sql_type;
1104: 				if (!py::try_cast(kv.second, sql_type)) {
1105: 					throw py::value_error("The types provided to 'dtype' have to be DuckDBPyType");
1106: 				}
1107: 				struct_fields.emplace_back(py::str(kv.first), Value(sql_type->ToString()));
1108: 			}
1109: 			auto dtype_struct = Value::STRUCT(std::move(struct_fields));
1110: 			bind_parameters["dtypes"] = std::move(dtype_struct);
1111: 		} else if (py::is_list_like(dtype)) {
1112: 			vector<Value> list_values;
1113: 			py::list dtype_list = dtype;
1114: 			for (auto &child : dtype_list) {
1115: 				shared_ptr<DuckDBPyType> sql_type;
1116: 				if (!py::try_cast(child, sql_type)) {
1117: 					throw py::value_error("The types provided to 'dtype' have to be DuckDBPyType");
1118: 				}
1119: 				list_values.push_back(sql_type->ToString());
1120: 			}
1121: 			bind_parameters["dtypes"] = Value::LIST(LogicalType::VARCHAR, std::move(list_values));
1122: 		} else {
1123: 			throw InvalidInputException("read_csv only accepts 'dtype' as a dictionary or a list of strings");
1124: 		}
1125: 	}
1126: 
1127: 	bool has_sep = !py::none().is(sep);
1128: 	bool has_delimiter = !py::none().is(delimiter);
1129: 	if (has_sep && has_delimiter) {
1130: 		throw InvalidInputException("read_csv takes either 'delimiter' or 'sep', not both");
1131: 	}
1132: 	if (has_sep) {
1133: 		bind_parameters["delim"] = Value(py::str(sep));
1134: 	} else if (has_delimiter) {
1135: 		bind_parameters["delim"] = Value(py::str(delimiter));
1136: 	}
1137: 
1138: 	if (!py::none().is(names_p)) {
1139: 		if (!py::is_list_like(names_p)) {
1140: 			throw InvalidInputException("read_csv only accepts 'names' as a list of strings");
1141: 		}
1142: 		vector<Value> names;
1143: 		py::list names_list = names_p;
1144: 		for (auto &elem : names_list) {
1145: 			if (!py::isinstance<py::str>(elem)) {
1146: 				throw InvalidInputException("read_csv 'names' list has to consist of only strings");
1147: 			}
1148: 			names.push_back(Value(std::string(py::str(elem))));
1149: 		}
1150: 		bind_parameters["names"] = Value::LIST(LogicalType::VARCHAR, std::move(names));
1151: 	}
1152: 
1153: 	if (!py::none().is(na_values)) {
1154: 		vector<Value> null_values;
1155: 		if (!py::isinstance<py::str>(na_values) && !py::is_list_like(na_values)) {
1156: 			throw InvalidInputException("read_csv only accepts 'na_values' as a string or a list of strings");
1157: 		} else if (py::isinstance<py::str>(na_values)) {
1158: 			null_values.push_back(Value(py::str(na_values)));
1159: 		} else {
1160: 			py::list null_list = na_values;
1161: 			for (auto &elem : null_list) {
1162: 				if (!py::isinstance<py::str>(elem)) {
1163: 					throw InvalidInputException("read_csv 'na_values' list has to consist of only strings");
1164: 				}
1165: 				null_values.push_back(Value(std::string(py::str(elem))));
1166: 			}
1167: 		}
1168: 		bind_parameters["nullstr"] = Value::LIST(LogicalType::VARCHAR, std::move(null_values));
1169: 	}
1170: 
1171: 	if (!py::none().is(skiprows)) {
1172: 		if (!py::isinstance<py::int_>(skiprows)) {
1173: 			throw InvalidInputException("read_csv only accepts 'skiprows' as an integer");
1174: 		}
1175: 		bind_parameters["skip"] = Value::INTEGER(py::int_(skiprows));
1176: 	}
1177: 
1178: 	if (!py::none().is(parallel)) {
1179: 		if (!py::isinstance<py::bool_>(parallel)) {
1180: 			throw InvalidInputException("read_csv only accepts 'parallel' as a boolean");
1181: 		}
1182: 		bind_parameters["parallel"] = Value::BOOLEAN(py::bool_(parallel));
1183: 	}
1184: 
1185: 	if (!py::none().is(quotechar)) {
1186: 		if (!py::isinstance<py::str>(quotechar)) {
1187: 			throw InvalidInputException("read_csv only accepts 'quotechar' as a string");
1188: 		}
1189: 		bind_parameters["quote"] = Value(py::str(quotechar));
1190: 	}
1191: 
1192: 	if (!py::none().is(escapechar)) {
1193: 		if (!py::isinstance<py::str>(escapechar)) {
1194: 			throw InvalidInputException("read_csv only accepts 'escapechar' as a string");
1195: 		}
1196: 		bind_parameters["escape"] = Value(py::str(escapechar));
1197: 	}
1198: 
1199: 	if (!py::none().is(encoding)) {
1200: 		if (!py::isinstance<py::str>(encoding)) {
1201: 			throw InvalidInputException("read_csv only accepts 'encoding' as a string");
1202: 		}
1203: 		string encoding_str = StringUtil::Lower(py::str(encoding));
1204: 		if (encoding_str != "utf8" && encoding_str != "utf-8") {
1205: 			throw BinderException("Copy is only supported for UTF-8 encoded files, ENCODING 'UTF-8'");
1206: 		}
1207: 	}
1208: 
1209: 	if (!py::none().is(date_format)) {
1210: 		if (!py::isinstance<py::str>(date_format)) {
1211: 			throw InvalidInputException("read_csv only accepts 'date_format' as a string");
1212: 		}
1213: 		bind_parameters["dateformat"] = Value(py::str(date_format));
1214: 	}
1215: 
1216: 	if (!py::none().is(timestamp_format)) {
1217: 		if (!py::isinstance<py::str>(timestamp_format)) {
1218: 			throw InvalidInputException("read_csv only accepts 'timestamp_format' as a string");
1219: 		}
1220: 		bind_parameters["timestampformat"] = Value(py::str(timestamp_format));
1221: 	}
1222: 
1223: 	if (!py::none().is(sample_size)) {
1224: 		if (!py::isinstance<py::int_>(sample_size)) {
1225: 			throw InvalidInputException("read_csv only accepts 'sample_size' as an integer");
1226: 		}
1227: 		bind_parameters["sample_size"] = Value::INTEGER(py::int_(sample_size));
1228: 	}
1229: 
1230: 	if (!py::none().is(all_varchar)) {
1231: 		if (!py::isinstance<py::bool_>(all_varchar)) {
1232: 			throw InvalidInputException("read_csv only accepts 'all_varchar' as a boolean");
1233: 		}
1234: 		bind_parameters["all_varchar"] = Value::BOOLEAN(py::bool_(all_varchar));
1235: 	}
1236: 
1237: 	if (!py::none().is(normalize_names)) {
1238: 		if (!py::isinstance<py::bool_>(normalize_names)) {
1239: 			throw InvalidInputException("read_csv only accepts 'normalize_names' as a boolean");
1240: 		}
1241: 		bind_parameters["normalize_names"] = Value::BOOLEAN(py::bool_(normalize_names));
1242: 	}
1243: 
1244: 	if (!py::none().is(null_padding)) {
1245: 		if (!py::isinstance<py::bool_>(null_padding)) {
1246: 			throw InvalidInputException("read_csv only accepts 'null_padding' as a boolean");
1247: 		}
1248: 		bind_parameters["null_padding"] = Value::BOOLEAN(py::bool_(null_padding));
1249: 	}
1250: 
1251: 	if (!py::none().is(lineterminator)) {
1252: 		PythonCSVLineTerminator::Type new_line_type;
1253: 		if (!py::try_cast<PythonCSVLineTerminator::Type>(lineterminator, new_line_type)) {
1254: 			string actual_type = py::str(lineterminator.get_type());
1255: 			throw BinderException("read_csv only accepts 'lineterminator' as a string or CSVLineTerminator, not '%s'",
1256: 			                      actual_type);
1257: 		}
1258: 		bind_parameters["new_line"] = Value(PythonCSVLineTerminator::ToString(new_line_type));
1259: 	}
1260: 
1261: 	if (!py::none().is(max_line_size)) {
1262: 		if (!py::isinstance<py::str>(max_line_size) && !py::isinstance<py::int_>(max_line_size)) {
1263: 			string actual_type = py::str(max_line_size.get_type());
1264: 			throw BinderException("read_csv only accepts 'max_line_size' as a string or an integer, not '%s'",
1265: 			                      actual_type);
1266: 		}
1267: 		auto val = TransformPythonValue(max_line_size, LogicalTypeId::VARCHAR);
1268: 		bind_parameters["max_line_size"] = val;
1269: 	}
1270: 
1271: 	if (!py::none().is(auto_type_candidates)) {
1272: 		if (!py::isinstance<py::list>(auto_type_candidates)) {
1273: 			string actual_type = py::str(auto_type_candidates.get_type());
1274: 			throw BinderException("read_csv only accepts 'auto_type_candidates' as a list[str], not '%s'", actual_type);
1275: 		}
1276: 		auto val = TransformPythonValue(auto_type_candidates, LogicalType::LIST(LogicalTypeId::VARCHAR));
1277: 		bind_parameters["auto_type_candidates"] = val;
1278: 	}
1279: 
1280: 	if (!py::none().is(ignore_errors)) {
1281: 		if (!py::isinstance<py::bool_>(ignore_errors)) {
1282: 			string actual_type = py::str(ignore_errors.get_type());
1283: 			throw BinderException("read_csv only accepts 'ignore_errors' as a bool, not '%s'", actual_type);
1284: 		}
1285: 		auto val = TransformPythonValue(ignore_errors, LogicalTypeId::BOOLEAN);
1286: 		bind_parameters["ignore_errors"] = val;
1287: 	}
1288: 
1289: 	if (!py::none().is(store_rejects)) {
1290: 		if (!py::isinstance<py::bool_>(store_rejects)) {
1291: 			string actual_type = py::str(store_rejects.get_type());
1292: 			throw BinderException("read_csv only accepts 'store_rejects' as a bool, not '%s'", actual_type);
1293: 		}
1294: 		auto val = TransformPythonValue(store_rejects, LogicalTypeId::BOOLEAN);
1295: 		bind_parameters["store_rejects"] = val;
1296: 	}
1297: 
1298: 	if (!py::none().is(rejects_table)) {
1299: 		if (!py::isinstance<py::str>(rejects_table)) {
1300: 			string actual_type = py::str(rejects_table.get_type());
1301: 			throw BinderException("read_csv only accepts 'rejects_table' as a string, not '%s'", actual_type);
1302: 		}
1303: 		auto val = TransformPythonValue(rejects_table, LogicalTypeId::VARCHAR);
1304: 		bind_parameters["rejects_table"] = val;
1305: 	}
1306: 
1307: 	if (!py::none().is(rejects_scan)) {
1308: 		if (!py::isinstance<py::str>(rejects_scan)) {
1309: 			string actual_type = py::str(rejects_scan.get_type());
1310: 			throw BinderException("read_csv only accepts 'rejects_scan' as a string, not '%s'", actual_type);
1311: 		}
1312: 		auto val = TransformPythonValue(rejects_scan, LogicalTypeId::VARCHAR);
1313: 		bind_parameters["rejects_scan"] = val;
1314: 	}
1315: 
1316: 	if (!py::none().is(rejects_limit)) {
1317: 		if (!py::isinstance<py::int_>(rejects_limit)) {
1318: 			string actual_type = py::str(rejects_limit.get_type());
1319: 			throw BinderException("read_csv only accepts 'rejects_limit' as an int, not '%s'", actual_type);
1320: 		}
1321: 		auto val = TransformPythonValue(rejects_limit, LogicalTypeId::BIGINT);
1322: 		bind_parameters["rejects_limit"] = val;
1323: 	}
1324: 
1325: 	if (!py::none().is(force_not_null)) {
1326: 		if (!py::isinstance<py::list>(force_not_null)) {
1327: 			string actual_type = py::str(force_not_null.get_type());
1328: 			throw BinderException("read_csv only accepts 'force_not_null' as a list[str], not '%s'", actual_type);
1329: 		}
1330: 		auto val = TransformPythonValue(force_not_null, LogicalType::LIST(LogicalTypeId::VARCHAR));
1331: 		bind_parameters["force_not_null"] = val;
1332: 	}
1333: 
1334: 	if (!py::none().is(buffer_size)) {
1335: 		if (!py::isinstance<py::int_>(buffer_size)) {
1336: 			string actual_type = py::str(buffer_size.get_type());
1337: 			throw BinderException("read_csv only accepts 'buffer_size' as a list[str], not '%s'", actual_type);
1338: 		}
1339: 		auto val = TransformPythonValue(buffer_size, LogicalTypeId::UBIGINT);
1340: 		bind_parameters["buffer_size"] = val;
1341: 	}
1342: 
1343: 	if (!py::none().is(decimal)) {
1344: 		if (!py::isinstance<py::str>(decimal)) {
1345: 			string actual_type = py::str(decimal.get_type());
1346: 			throw BinderException("read_csv only accepts 'decimal' as a string, not '%s'", actual_type);
1347: 		}
1348: 		auto val = TransformPythonValue(decimal, LogicalTypeId::VARCHAR);
1349: 		bind_parameters["decimal_separator"] = val;
1350: 	}
1351: 
1352: 	if (!py::none().is(allow_quoted_nulls)) {
1353: 		if (!py::isinstance<py::bool_>(allow_quoted_nulls)) {
1354: 			string actual_type = py::str(allow_quoted_nulls.get_type());
1355: 			throw BinderException("read_csv only accepts 'allow_quoted_nulls' as a bool, not '%s'", actual_type);
1356: 		}
1357: 		auto val = TransformPythonValue(allow_quoted_nulls, LogicalTypeId::BOOLEAN);
1358: 		bind_parameters["allow_quoted_nulls"] = val;
1359: 	}
1360: 
1361: 	if (!py::none().is(columns)) {
1362: 		if (!py::is_dict_like(columns)) {
1363: 			throw BinderException("read_csv only accepts 'columns' as a dict[str, str]");
1364: 		}
1365: 		py::dict columns_dict = columns;
1366: 		child_list_t<Value> struct_fields;
1367: 
1368: 		for (auto &kv : columns_dict) {
1369: 			auto &column_name = kv.first;
1370: 			auto &type = kv.second;
1371: 			if (!py::isinstance<py::str>(column_name)) {
1372: 				string actual_type = py::str(column_name.get_type());
1373: 				throw BinderException("The provided column name must be a str, not of type '%s'", actual_type);
1374: 			}
1375: 			if (!py::isinstance<py::str>(type)) {
1376: 				string actual_type = py::str(column_name.get_type());
1377: 				throw BinderException("The provided column type must be a str, not of type '%s'", actual_type);
1378: 			}
1379: 			struct_fields.emplace_back(py::str(column_name), Value(py::str(type)));
1380: 		}
1381: 		auto dtype_struct = Value::STRUCT(std::move(struct_fields));
1382: 		bind_parameters["columns"] = std::move(dtype_struct);
1383: 	}
1384: 
1385: 	// Create the ReadCSV Relation using the 'options'
1386: 
1387: 	py::gil_scoped_release gil;
1388: 	auto read_csv_p = connection.ReadCSV(name, std::move(bind_parameters));
1389: 	auto &read_csv = read_csv_p->Cast<ReadCSVRelation>();
1390: 	if (file_like_object_wrapper) {
1391: 		read_csv.AddExternalDependency(std::move(file_like_object_wrapper));
1392: 	}
1393: 
1394: 	return make_uniq<DuckDBPyRelation>(read_csv_p->Alias(read_csv.alias));
1395: }
1396: 
1397: void DuckDBPyConnection::ExecuteImmediately(vector<unique_ptr<SQLStatement>> statements) {
1398: 	auto &connection = con.GetConnection();
1399: 	if (statements.empty()) {
1400: 		return;
1401: 	}
1402: 	for (auto &stmt : statements) {
1403: 		if (!stmt->named_param_map.empty()) {
1404: 			throw NotImplementedException(
1405: 			    "Prepared parameters are only supported for the last statement, please split your query up into "
1406: 			    "separate 'execute' calls if you want to use prepared parameters");
1407: 		}
1408: 		auto pending_query = connection.PendingQuery(std::move(stmt), false);
1409: 		if (pending_query->HasError()) {
1410: 			pending_query->ThrowError();
1411: 		}
1412: 		auto res = CompletePendingQuery(*pending_query);
1413: 
1414: 		if (res->HasError()) {
1415: 			res->ThrowError();
1416: 		}
1417: 	}
1418: }
1419: 
1420: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::RunQuery(const py::object &query, string alias, py::object params) {
1421: 	auto &connection = con.GetConnection();
1422: 	if (alias.empty()) {
1423: 		alias = "unnamed_relation_" + StringUtil::GenerateRandomName(16);
1424: 	}
1425: 
1426: 	auto statements = GetStatements(query);
1427: 	if (statements.empty()) {
1428: 		// TODO: should we throw?
1429: 		return nullptr;
1430: 	}
1431: 
1432: 	auto last_statement = std::move(statements.back());
1433: 	statements.pop_back();
1434: 	// First immediately execute any preceding statements (if any)
1435: 	ExecuteImmediately(std::move(statements));
1436: 
1437: 	// Attempt to create a Relation for lazy execution if possible
1438: 	shared_ptr<Relation> relation;
1439: 	if (py::none().is(params)) {
1440: 		// FIXME: currently we can't create relations with prepared parameters
1441: 		{
1442: 			py::gil_scoped_release gil;
1443: 			auto statement_type = last_statement->type;
1444: 			switch (statement_type) {
1445: 			case StatementType::SELECT_STATEMENT: {
1446: 				auto select_statement = unique_ptr_cast<SQLStatement, SelectStatement>(std::move(last_statement));
1447: 				relation = connection.RelationFromQuery(std::move(select_statement), alias);
1448: 				break;
1449: 			}
1450: 			default:
1451: 				break;
1452: 			}
1453: 		}
1454: 	}
1455: 
1456: 	if (!relation) {
1457: 		// Could not create a relation, resort to direct execution
1458: 		auto prep = PrepareQuery(std::move(last_statement));
1459: 		auto res = ExecuteInternal(*prep, std::move(params));
1460: 		if (!res) {
1461: 			return nullptr;
1462: 		}
1463: 		if (res->properties.return_type != StatementReturnType::QUERY_RESULT) {
1464: 			return nullptr;
1465: 		}
1466: 		if (res->type == QueryResultType::STREAM_RESULT) {
1467: 			auto &stream_result = res->Cast<StreamQueryResult>();
1468: 			res = stream_result.Materialize();
1469: 		}
1470: 		auto &materialized_result = res->Cast<MaterializedQueryResult>();
1471: 		relation = make_shared_ptr<MaterializedRelation>(connection.context, materialized_result.TakeCollection(),
1472: 		                                                 res->names, alias);
1473: 	}
1474: 	return make_uniq<DuckDBPyRelation>(std::move(relation));
1475: }
1476: 
1477: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::Table(const string &tname) {
1478: 	auto &connection = con.GetConnection();
1479: 	auto qualified_name = QualifiedName::Parse(tname);
1480: 	if (qualified_name.schema.empty()) {
1481: 		qualified_name.schema = DEFAULT_SCHEMA;
1482: 	}
1483: 	try {
1484: 		return make_uniq<DuckDBPyRelation>(connection.Table(qualified_name.schema, qualified_name.name));
1485: 	} catch (const CatalogException &) {
1486: 		// CatalogException will be of the type '... is not a table'
1487: 		// Not a table in the database, make a query relation that can perform replacement scans
1488: 		auto sql_query = StringUtil::Format("from %s", KeywordHelper::WriteOptionallyQuoted(tname));
1489: 		return RunQuery(py::str(sql_query), tname);
1490: 	}
1491: }
1492: 
1493: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::Values(py::object params) {
1494: 	auto &connection = con.GetConnection();
1495: 	if (params.is_none()) {
1496: 		params = py::list();
1497: 	}
1498: 	if (!py::hasattr(params, "__len__")) {
1499: 		throw InvalidInputException("Type of object passed to parameter 'values' must be iterable");
1500: 	}
1501: 	vector<vector<Value>> values {DuckDBPyConnection::TransformPythonParamList(params)};
1502: 	return make_uniq<DuckDBPyRelation>(connection.Values(values));
1503: }
1504: 
1505: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::View(const string &vname) {
1506: 	auto &connection = con.GetConnection();
1507: 	return make_uniq<DuckDBPyRelation>(connection.View(vname));
1508: }
1509: 
1510: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::TableFunction(const string &fname, py::object params) {
1511: 	auto &connection = con.GetConnection();
1512: 	if (params.is_none()) {
1513: 		params = py::list();
1514: 	}
1515: 	if (!py::is_list_like(params)) {
1516: 		throw InvalidInputException("'params' has to be a list of parameters");
1517: 	}
1518: 
1519: 	return make_uniq<DuckDBPyRelation>(
1520: 	    connection.TableFunction(fname, DuckDBPyConnection::TransformPythonParamList(params)));
1521: }
1522: 
1523: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromDF(const PandasDataFrame &value) {
1524: 	auto &connection = con.GetConnection();
1525: 	string name = "df_" + StringUtil::GenerateRandomName();
1526: 	if (PandasDataFrame::IsPyArrowBacked(value)) {
1527: 		auto table = PandasDataFrame::ToArrowTable(value);
1528: 		return DuckDBPyConnection::FromArrow(table);
1529: 	}
1530: 	auto tableref = PythonReplacementScan::ReplacementObject(value, name, *connection.context);
1531: 	D_ASSERT(tableref);
1532: 	auto rel = make_shared_ptr<ViewRelation>(connection.context, std::move(tableref), name);
1533: 	return make_uniq<DuckDBPyRelation>(std::move(rel));
1534: }
1535: 
1536: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromParquet(const string &file_glob, bool binary_as_string,
1537:                                                              bool file_row_number, bool filename,
1538:                                                              bool hive_partitioning, bool union_by_name,
1539:                                                              const py::object &compression) {
1540: 	auto &connection = con.GetConnection();
1541: 	string name = "parquet_" + StringUtil::GenerateRandomName();
1542: 	vector<Value> params;
1543: 	params.emplace_back(file_glob);
1544: 	named_parameter_map_t named_parameters({{"binary_as_string", Value::BOOLEAN(binary_as_string)},
1545: 	                                        {"file_row_number", Value::BOOLEAN(file_row_number)},
1546: 	                                        {"filename", Value::BOOLEAN(filename)},
1547: 	                                        {"hive_partitioning", Value::BOOLEAN(hive_partitioning)},
1548: 	                                        {"union_by_name", Value::BOOLEAN(union_by_name)}});
1549: 
1550: 	if (!py::none().is(compression)) {
1551: 		if (!py::isinstance<py::str>(compression)) {
1552: 			throw InvalidInputException("from_parquet only accepts 'compression' as a string");
1553: 		}
1554: 		named_parameters["compression"] = Value(py::str(compression));
1555: 	}
1556: 	py::gil_scoped_release gil;
1557: 	return make_uniq<DuckDBPyRelation>(connection.TableFunction("parquet_scan", params, named_parameters)->Alias(name));
1558: }
1559: 
1560: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromParquets(const vector<string> &file_globs, bool binary_as_string,
1561:                                                               bool file_row_number, bool filename,
1562:                                                               bool hive_partitioning, bool union_by_name,
1563:                                                               const py::object &compression) {
1564: 	auto &connection = con.GetConnection();
1565: 	string name = "parquet_" + StringUtil::GenerateRandomName();
1566: 	vector<Value> params;
1567: 	auto file_globs_as_value = vector<Value>();
1568: 	for (const auto &file : file_globs) {
1569: 		file_globs_as_value.emplace_back(file);
1570: 	}
1571: 	params.emplace_back(Value::LIST(file_globs_as_value));
1572: 	named_parameter_map_t named_parameters({{"binary_as_string", Value::BOOLEAN(binary_as_string)},
1573: 	                                        {"file_row_number", Value::BOOLEAN(file_row_number)},
1574: 	                                        {"filename", Value::BOOLEAN(filename)},
1575: 	                                        {"hive_partitioning", Value::BOOLEAN(hive_partitioning)},
1576: 	                                        {"union_by_name", Value::BOOLEAN(union_by_name)}});
1577: 
1578: 	if (!py::none().is(compression)) {
1579: 		if (!py::isinstance<py::str>(compression)) {
1580: 			throw InvalidInputException("from_parquet only accepts 'compression' as a string");
1581: 		}
1582: 		named_parameters["compression"] = Value(py::str(compression));
1583: 	}
1584: 
1585: 	return make_uniq<DuckDBPyRelation>(connection.TableFunction("parquet_scan", params, named_parameters)->Alias(name));
1586: }
1587: 
1588: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromArrow(py::object &arrow_object) {
1589: 	auto &connection = con.GetConnection();
1590: 	string name = "arrow_object_" + StringUtil::GenerateRandomName();
1591: 	if (!IsAcceptedArrowObject(arrow_object)) {
1592: 		auto py_object_type = string(py::str(arrow_object.get_type().attr("__name__")));
1593: 		throw InvalidInputException("Python Object Type %s is not an accepted Arrow Object.", py_object_type);
1594: 	}
1595: 	auto tableref = PythonReplacementScan::ReplacementObject(arrow_object, name, *connection.context);
1596: 	D_ASSERT(tableref);
1597: 	auto rel = make_shared_ptr<ViewRelation>(connection.context, std::move(tableref), name);
1598: 	return make_uniq<DuckDBPyRelation>(std::move(rel));
1599: }
1600: 
1601: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromSubstrait(py::bytes &proto) {
1602: 	auto &connection = con.GetConnection();
1603: 	string name = "substrait_" + StringUtil::GenerateRandomName();
1604: 	vector<Value> params;
1605: 	params.emplace_back(Value::BLOB_RAW(proto));
1606: 	return make_uniq<DuckDBPyRelation>(connection.TableFunction("from_substrait", params)->Alias(name));
1607: }
1608: 
1609: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::GetSubstrait(const string &query, bool enable_optimizer) {
1610: 	auto &connection = con.GetConnection();
1611: 	vector<Value> params;
1612: 	params.emplace_back(query);
1613: 	named_parameter_map_t named_parameters({{"enable_optimizer", Value::BOOLEAN(enable_optimizer)}});
1614: 	return make_uniq<DuckDBPyRelation>(
1615: 	    connection.TableFunction("get_substrait", params, named_parameters)->Alias(query));
1616: }
1617: 
1618: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::GetSubstraitJSON(const string &query, bool enable_optimizer) {
1619: 	auto &connection = con.GetConnection();
1620: 	vector<Value> params;
1621: 	params.emplace_back(query);
1622: 	named_parameter_map_t named_parameters({{"enable_optimizer", Value::BOOLEAN(enable_optimizer)}});
1623: 	return make_uniq<DuckDBPyRelation>(
1624: 	    connection.TableFunction("get_substrait_json", params, named_parameters)->Alias(query));
1625: }
1626: 
1627: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromSubstraitJSON(const string &json) {
1628: 	auto &connection = con.GetConnection();
1629: 	string name = "from_substrait_" + StringUtil::GenerateRandomName();
1630: 	vector<Value> params;
1631: 	params.emplace_back(json);
1632: 	return make_uniq<DuckDBPyRelation>(connection.TableFunction("from_substrait_json", params)->Alias(name));
1633: }
1634: 
1635: unordered_set<string> DuckDBPyConnection::GetTableNames(const string &query) {
1636: 	auto &connection = con.GetConnection();
1637: 	return connection.GetTableNames(query);
1638: }
1639: 
1640: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::UnregisterPythonObject(const string &name) {
1641: 	auto &connection = con.GetConnection();
1642: 	if (!registered_objects.count(name)) {
1643: 		return shared_from_this();
1644: 	}
1645: 	py::gil_scoped_release release;
1646: 	// FIXME: DROP TEMPORARY VIEW? doesn't exist?
1647: 	connection.Query("DROP VIEW \"" + name + "\"");
1648: 	registered_objects.erase(name);
1649: 	return shared_from_this();
1650: }
1651: 
1652: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Begin() {
1653: 	ExecuteFromString("BEGIN TRANSACTION");
1654: 	return shared_from_this();
1655: }
1656: 
1657: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Commit() {
1658: 	auto &connection = con.GetConnection();
1659: 	if (connection.context->transaction.IsAutoCommit()) {
1660: 		return shared_from_this();
1661: 	}
1662: 	ExecuteFromString("COMMIT");
1663: 	return shared_from_this();
1664: }
1665: 
1666: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Rollback() {
1667: 	ExecuteFromString("ROLLBACK");
1668: 	return shared_from_this();
1669: }
1670: 
1671: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Checkpoint() {
1672: 	ExecuteFromString("CHECKPOINT");
1673: 	return shared_from_this();
1674: }
1675: 
1676: Optional<py::list> DuckDBPyConnection::GetDescription() {
1677: 	if (!con.HasResult()) {
1678: 		return py::none();
1679: 	}
1680: 	auto &result = con.GetResult();
1681: 	return result.Description();
1682: }
1683: 
1684: int DuckDBPyConnection::GetRowcount() {
1685: 	return -1;
1686: }
1687: 
1688: void DuckDBPyConnection::Close() {
1689: 	con.SetResult(nullptr);
1690: 	con.SetConnection(nullptr);
1691: 	con.SetDatabase(nullptr);
1692: 	// https://peps.python.org/pep-0249/#Connection.close
1693: 	cursors.ClearCursors();
1694: 	registered_functions.clear();
1695: }
1696: 
1697: void DuckDBPyConnection::Interrupt() {
1698: 	auto &connection = con.GetConnection();
1699: 	connection.Interrupt();
1700: }
1701: 
1702: void DuckDBPyConnection::InstallExtension(const string &extension, bool force_install) {
1703: 	auto &connection = con.GetConnection();
1704: 
1705: 	ExtensionInstallOptions options;
1706: 	options.force_install = force_install;
1707: 	ExtensionHelper::InstallExtension(*connection.context, extension, options);
1708: }
1709: 
1710: void DuckDBPyConnection::LoadExtension(const string &extension) {
1711: 	auto &connection = con.GetConnection();
1712: 	ExtensionHelper::LoadExternalExtension(*connection.context, extension);
1713: }
1714: 
1715: void DuckDBPyConnection::Cursors::AddCursor(shared_ptr<DuckDBPyConnection> conn) {
1716: 	lock_guard<mutex> l(lock);
1717: 
1718: 	// Clean up previously created cursors
1719: 	vector<weak_ptr<DuckDBPyConnection>> compacted_cursors;
1720: 	bool needs_compaction = false;
1721: 	for (auto &cur_p : cursors) {
1722: 		auto cur = cur_p.lock();
1723: 		if (!cur) {
1724: 			needs_compaction = true;
1725: 			continue;
1726: 		}
1727: 		compacted_cursors.push_back(cur_p);
1728: 	}
1729: 	if (needs_compaction) {
1730: 		cursors = std::move(compacted_cursors);
1731: 	}
1732: 
1733: 	cursors.push_back(conn);
1734: }
1735: 
1736: void DuckDBPyConnection::Cursors::ClearCursors() {
1737: 	lock_guard<mutex> l(lock);
1738: 
1739: 	for (auto &cur : cursors) {
1740: 		auto cursor = cur.lock();
1741: 		if (!cursor) {
1742: 			// The cursor has already been closed
1743: 			continue;
1744: 		}
1745: 		cursor->Close();
1746: 	}
1747: 
1748: 	cursors.clear();
1749: }
1750: 
1751: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Cursor() {
1752: 	auto res = make_shared_ptr<DuckDBPyConnection>();
1753: 	res->con.SetDatabase(con);
1754: 	res->con.SetConnection(make_uniq<Connection>(res->con.GetDatabase()));
1755: 	cursors.AddCursor(res);
1756: 	return res;
1757: }
1758: 
1759: // these should be functions on the result but well
1760: Optional<py::tuple> DuckDBPyConnection::FetchOne() {
1761: 	if (!con.HasResult()) {
1762: 		throw InvalidInputException("No open result set");
1763: 	}
1764: 	auto &result = con.GetResult();
1765: 	return result.FetchOne();
1766: }
1767: 
1768: py::list DuckDBPyConnection::FetchMany(idx_t size) {
1769: 	if (!con.HasResult()) {
1770: 		throw InvalidInputException("No open result set");
1771: 	}
1772: 	auto &result = con.GetResult();
1773: 	return result.FetchMany(size);
1774: }
1775: 
1776: py::list DuckDBPyConnection::FetchAll() {
1777: 	if (!con.HasResult()) {
1778: 		throw InvalidInputException("No open result set");
1779: 	}
1780: 	auto &result = con.GetResult();
1781: 	return result.FetchAll();
1782: }
1783: 
1784: py::dict DuckDBPyConnection::FetchNumpy() {
1785: 	if (!con.HasResult()) {
1786: 		throw InvalidInputException("No open result set");
1787: 	}
1788: 	auto &result = con.GetResult();
1789: 	return result.FetchNumpyInternal();
1790: }
1791: 
1792: PandasDataFrame DuckDBPyConnection::FetchDF(bool date_as_object) {
1793: 	if (!con.HasResult()) {
1794: 		throw InvalidInputException("No open result set");
1795: 	}
1796: 	auto &result = con.GetResult();
1797: 	return result.FetchDF(date_as_object);
1798: }
1799: 
1800: PandasDataFrame DuckDBPyConnection::FetchDFChunk(const idx_t vectors_per_chunk, bool date_as_object) {
1801: 	if (!con.HasResult()) {
1802: 		throw InvalidInputException("No open result set");
1803: 	}
1804: 	auto &result = con.GetResult();
1805: 	return result.FetchDFChunk(vectors_per_chunk, date_as_object);
1806: }
1807: 
1808: duckdb::pyarrow::Table DuckDBPyConnection::FetchArrow(idx_t rows_per_batch) {
1809: 	if (!con.HasResult()) {
1810: 		throw InvalidInputException("No open result set");
1811: 	}
1812: 	auto &result = con.GetResult();
1813: 	return result.ToArrowTable(rows_per_batch);
1814: }
1815: 
1816: py::dict DuckDBPyConnection::FetchPyTorch() {
1817: 	if (!con.HasResult()) {
1818: 		throw InvalidInputException("No open result set");
1819: 	}
1820: 	auto &result = con.GetResult();
1821: 	return result.FetchPyTorch();
1822: }
1823: 
1824: py::dict DuckDBPyConnection::FetchTF() {
1825: 	if (!con.HasResult()) {
1826: 		throw InvalidInputException("No open result set");
1827: 	}
1828: 	auto &result = con.GetResult();
1829: 	return result.FetchTF();
1830: }
1831: 
1832: PolarsDataFrame DuckDBPyConnection::FetchPolars(idx_t rows_per_batch) {
1833: 	auto arrow = FetchArrow(rows_per_batch);
1834: 	return py::cast<PolarsDataFrame>(py::module::import("polars").attr("DataFrame")(arrow));
1835: }
1836: 
1837: duckdb::pyarrow::RecordBatchReader DuckDBPyConnection::FetchRecordBatchReader(const idx_t rows_per_batch) {
1838: 	if (!con.HasResult()) {
1839: 		throw InvalidInputException("No open result set");
1840: 	}
1841: 	auto &result = con.GetResult();
1842: 	return result.FetchRecordBatchReader(rows_per_batch);
1843: }
1844: 
1845: case_insensitive_map_t<Value> TransformPyConfigDict(const py::dict &py_config_dict) {
1846: 	case_insensitive_map_t<Value> config_dict;
1847: 	for (auto &kv : py_config_dict) {
1848: 		auto key = py::str(kv.first);
1849: 		auto val = py::str(kv.second);
1850: 		config_dict[key] = Value(val);
1851: 	}
1852: 	return config_dict;
1853: }
1854: 
1855: static bool HasJupyterProgressBarDependencies() {
1856: 	auto &import_cache = *DuckDBPyConnection::ImportCache();
1857: 	if (!import_cache.ipywidgets()) {
1858: 		// ipywidgets not installed, needed to support the progress bar
1859: 		return false;
1860: 	}
1861: 	return true;
1862: }
1863: 
1864: static void SetDefaultConfigArguments(ClientContext &context) {
1865: 	if (!DuckDBPyConnection::IsInteractive()) {
1866: 		// Don't need to set any special default arguments
1867: 		return;
1868: 	}
1869: 
1870: 	auto &config = ClientConfig::GetConfig(context);
1871: 	config.enable_progress_bar = true;
1872: 
1873: 	if (!DuckDBPyConnection::IsJupyter()) {
1874: 		return;
1875: 	}
1876: 	if (!HasJupyterProgressBarDependencies()) {
1877: 		// Disable progress bar altogether
1878: 		config.system_progress_bar_disable_reason =
1879: 		    "required package 'ipywidgets' is missing, which is needed to render progress bars in Jupyter";
1880: 		config.enable_progress_bar = false;
1881: 		return;
1882: 	}
1883: 
1884: 	// Set the function used to create the display for the progress bar
1885: 	context.config.display_create_func = JupyterProgressBarDisplay::Create;
1886: }
1887: 
1888: void InstantiateNewInstance(DuckDB &db) {
1889: 	auto &db_instance = *db.instance;
1890: 	PandasScanFunction scan_fun;
1891: 	MapFunction map_fun;
1892: 	ExtensionUtil::RegisterFunction(db_instance, scan_fun);
1893: 	ExtensionUtil::RegisterFunction(db_instance, map_fun);
1894: }
1895: 
1896: static shared_ptr<DuckDBPyConnection> FetchOrCreateInstance(const string &database_path, DBConfig &config) {
1897: 	auto res = make_shared_ptr<DuckDBPyConnection>();
1898: 	bool cache_instance = database_path != ":memory:" && !database_path.empty();
1899: 	config.replacement_scans.emplace_back(PythonReplacementScan::Replace);
1900: 	{
1901: 		py::gil_scoped_release release;
1902: 		unique_lock<mutex> lock(res->py_connection_lock);
1903: 		auto database =
1904: 		    instance_cache.GetOrCreateInstance(database_path, config, cache_instance, InstantiateNewInstance);
1905: 		res->con.SetDatabase(std::move(database));
1906: 		res->con.SetConnection(make_uniq<Connection>(res->con.GetDatabase()));
1907: 	}
1908: 	return res;
1909: }
1910: 
1911: bool IsDefaultConnectionString(const string &database, bool read_only, case_insensitive_map_t<Value> &config) {
1912: 	bool is_default = StringUtil::CIEquals(database, ":default:");
1913: 	if (!is_default) {
1914: 		return false;
1915: 	}
1916: 	// Only allow fetching the default connection when no options are passed
1917: 	if (read_only == true || !config.empty()) {
1918: 		throw InvalidInputException("Default connection fetching is only allowed without additional options");
1919: 	}
1920: 	return true;
1921: }
1922: 
1923: static string GetPathString(const py::object &path) {
1924: 	auto &import_cache = *DuckDBPyConnection::ImportCache();
1925: 	const bool is_path = py::isinstance(path, import_cache.pathlib.Path());
1926: 	if (is_path || py::isinstance<py::str>(path)) {
1927: 		return std::string(py::str(path));
1928: 	}
1929: 	string actual_type = py::str(path.get_type());
1930: 	throw InvalidInputException("Please provide either a str or a pathlib.Path, not %s", actual_type);
1931: }
1932: 
1933: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Connect(const py::object &database_p, bool read_only,
1934:                                                            const py::dict &config_options) {
1935: 	auto config_dict = TransformPyConfigDict(config_options);
1936: 	auto database = GetPathString(database_p);
1937: 	if (IsDefaultConnectionString(database, read_only, config_dict)) {
1938: 		return DuckDBPyConnection::DefaultConnection();
1939: 	}
1940: 
1941: 	DBConfig config(read_only);
1942: 	config.AddExtensionOption("pandas_analyze_sample",
1943: 	                          "The maximum number of rows to sample when analyzing a pandas object column.",
1944: 	                          LogicalType::UBIGINT, Value::UBIGINT(1000));
1945: 	config.AddExtensionOption("python_enable_replacements",
1946: 	                          "Whether variables visible to the current stack should be used for replacement scans.",
1947: 	                          LogicalType::BOOLEAN, Value::BOOLEAN(true));
1948: 	if (!DuckDBPyConnection::IsJupyter()) {
1949: 		config_dict["duckdb_api"] = Value("python");
1950: 	} else {
1951: 		config_dict["duckdb_api"] = Value("python jupyter");
1952: 	}
1953: 	config.SetOptionsByName(config_dict);
1954: 
1955: 	auto res = FetchOrCreateInstance(database, config);
1956: 	auto &client_context = *res->con.GetConnection().context;
1957: 	SetDefaultConfigArguments(client_context);
1958: 	return res;
1959: }
1960: 
1961: vector<Value> DuckDBPyConnection::TransformPythonParamList(const py::handle &params) {
1962: 	vector<Value> args;
1963: 	args.reserve(py::len(params));
1964: 
1965: 	for (auto param : params) {
1966: 		args.emplace_back(TransformPythonValue(param, LogicalType::UNKNOWN, false));
1967: 	}
1968: 	return args;
1969: }
1970: 
1971: case_insensitive_map_t<BoundParameterData> DuckDBPyConnection::TransformPythonParamDict(const py::dict &params) {
1972: 	case_insensitive_map_t<BoundParameterData> args;
1973: 
1974: 	for (auto pair : params) {
1975: 		auto &key = pair.first;
1976: 		auto &value = pair.second;
1977: 		args[std::string(py::str(key))] = BoundParameterData(TransformPythonValue(value, LogicalType::UNKNOWN, false));
1978: 	}
1979: 	return args;
1980: }
1981: 
1982: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::DefaultConnection() {
1983: 	if (!default_connection) {
1984: 		py::dict config_dict;
1985: 		default_connection = DuckDBPyConnection::Connect(py::str(":memory:"), false, config_dict);
1986: 	}
1987: 	return default_connection;
1988: }
1989: 
1990: PythonImportCache *DuckDBPyConnection::ImportCache() {
1991: 	if (!import_cache) {
1992: 		import_cache = make_shared_ptr<PythonImportCache>();
1993: 	}
1994: 	return import_cache.get();
1995: }
1996: 
1997: ModifiedMemoryFileSystem &DuckDBPyConnection::GetObjectFileSystem() {
1998: 	if (!internal_object_filesystem) {
1999: 		D_ASSERT(!FileSystemIsRegistered("DUCKDB_INTERNAL_OBJECTSTORE"));
2000: 		auto &import_cache_py = *ImportCache();
2001: 		auto modified_memory_fs = import_cache_py.duckdb.filesystem.ModifiedMemoryFileSystem();
2002: 		if (modified_memory_fs.ptr() == nullptr) {
2003: 			throw InvalidInputException(
2004: 			    "This operation could not be completed because required module 'fsspec' is not installed");
2005: 		}
2006: 		internal_object_filesystem = make_shared_ptr<ModifiedMemoryFileSystem>(modified_memory_fs());
2007: 		auto &abstract_fs = reinterpret_cast<AbstractFileSystem &>(*internal_object_filesystem);
2008: 		RegisterFilesystem(abstract_fs);
2009: 	}
2010: 	return *internal_object_filesystem;
2011: }
2012: 
2013: bool DuckDBPyConnection::IsInteractive() {
2014: 	return DuckDBPyConnection::environment != PythonEnvironmentType::NORMAL;
2015: }
2016: 
2017: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Enter() {
2018: 	return shared_from_this();
2019: }
2020: 
2021: void DuckDBPyConnection::Exit(DuckDBPyConnection &self, const py::object &exc_type, const py::object &exc,
2022:                               const py::object &traceback) {
2023: 	self.Close();
2024: 	if (exc_type.ptr() != Py_None) {
2025: 		// Propagate the exception if any occurred
2026: 		PyErr_SetObject(exc_type.ptr(), exc.ptr());
2027: 		throw py::error_already_set();
2028: 	}
2029: }
2030: 
2031: void DuckDBPyConnection::Cleanup() {
2032: 	default_connection.reset();
2033: 	import_cache.reset();
2034: }
2035: 
2036: bool DuckDBPyConnection::IsPandasDataframe(const py::object &object) {
2037: 	if (!ModuleIsLoaded<PandasCacheItem>()) {
2038: 		return false;
2039: 	}
2040: 	auto &import_cache_py = *DuckDBPyConnection::ImportCache();
2041: 	return py::isinstance(object, import_cache_py.pandas.DataFrame());
2042: }
2043: 
2044: bool DuckDBPyConnection::IsPolarsDataframe(const py::object &object) {
2045: 	if (!ModuleIsLoaded<PolarsCacheItem>()) {
2046: 		return false;
2047: 	}
2048: 	auto &import_cache_py = *DuckDBPyConnection::ImportCache();
2049: 	return py::isinstance(object, import_cache_py.polars.DataFrame()) ||
2050: 	       py::isinstance(object, import_cache_py.polars.LazyFrame());
2051: }
2052: 
2053: bool IsValidNumpyDimensions(const py::handle &object, int &dim) {
2054: 	// check the dimensions of numpy arrays
2055: 	// should only be called by IsAcceptedNumpyObject
2056: 	auto &import_cache = *DuckDBPyConnection::ImportCache();
2057: 	if (!py::isinstance(object, import_cache.numpy.ndarray())) {
2058: 		return false;
2059: 	}
2060: 	auto shape = (py::cast<py::array>(object)).attr("shape");
2061: 	if (py::len(shape) != 1) {
2062: 		return false;
2063: 	}
2064: 	int cur_dim = (shape.attr("__getitem__")(0)).cast<int>();
2065: 	dim = dim == -1 ? cur_dim : dim;
2066: 	return dim == cur_dim;
2067: }
2068: NumpyObjectType DuckDBPyConnection::IsAcceptedNumpyObject(const py::object &object) {
2069: 	if (!ModuleIsLoaded<NumpyCacheItem>()) {
2070: 		return NumpyObjectType::INVALID;
2071: 	}
2072: 	auto &import_cache = *DuckDBPyConnection::ImportCache();
2073: 	if (py::isinstance(object, import_cache.numpy.ndarray())) {
2074: 		auto len = py::len((py::cast<py::array>(object)).attr("shape"));
2075: 		switch (len) {
2076: 		case 1:
2077: 			return NumpyObjectType::NDARRAY1D;
2078: 		case 2:
2079: 			return NumpyObjectType::NDARRAY2D;
2080: 		default:
2081: 			return NumpyObjectType::INVALID;
2082: 		}
2083: 	} else if (py::is_dict_like(object)) {
2084: 		int dim = -1;
2085: 		for (auto item : py::cast<py::dict>(object)) {
2086: 			if (!IsValidNumpyDimensions(item.second, dim)) {
2087: 				return NumpyObjectType::INVALID;
2088: 			}
2089: 		}
2090: 		return NumpyObjectType::DICT;
2091: 	} else if (py::is_list_like(object)) {
2092: 		int dim = -1;
2093: 		for (auto item : py::cast<py::list>(object)) {
2094: 			if (!IsValidNumpyDimensions(item, dim)) {
2095: 				return NumpyObjectType::INVALID;
2096: 			}
2097: 		}
2098: 		return NumpyObjectType::LIST;
2099: 	}
2100: 	return NumpyObjectType::INVALID;
2101: }
2102: 
2103: PyArrowObjectType DuckDBPyConnection::GetArrowType(const py::handle &obj) {
2104: 	D_ASSERT(py::gil_check());
2105: 
2106: 	if (py::isinstance<py::capsule>(obj)) {
2107: 		auto capsule = py::reinterpret_borrow<py::capsule>(obj);
2108: 		if (string(capsule.name()) != "arrow_array_stream") {
2109: 			throw InvalidInputException("Expected a 'arrow_array_stream' PyCapsule, got: %s", string(capsule.name()));
2110: 		}
2111: 		auto stream = capsule.get_pointer<struct ArrowArrayStream>();
2112: 		if (!stream->release) {
2113: 			throw InvalidInputException("The ArrowArrayStream was already released");
2114: 		}
2115: 		return PyArrowObjectType::PyCapsule;
2116: 	}
2117: 
2118: 	if (ModuleIsLoaded<PyarrowCacheItem>()) {
2119: 		auto &import_cache = *DuckDBPyConnection::ImportCache();
2120: 		// First Verify Lib Types
2121: 		auto table_class = import_cache.pyarrow.Table();
2122: 		auto record_batch_reader_class = import_cache.pyarrow.RecordBatchReader();
2123: 		if (py::isinstance(obj, table_class)) {
2124: 			return PyArrowObjectType::Table;
2125: 		} else if (py::isinstance(obj, record_batch_reader_class)) {
2126: 			return PyArrowObjectType::RecordBatchReader;
2127: 		}
2128: 
2129: 		if (ModuleIsLoaded<PyarrowDatasetCacheItem>()) {
2130: 			// Then Verify dataset types
2131: 			auto dataset_class = import_cache.pyarrow.dataset.Dataset();
2132: 			auto scanner_class = import_cache.pyarrow.dataset.Scanner();
2133: 
2134: 			if (py::isinstance(obj, scanner_class)) {
2135: 				return PyArrowObjectType::Scanner;
2136: 			} else if (py::isinstance(obj, dataset_class)) {
2137: 				return PyArrowObjectType::Dataset;
2138: 			}
2139: 		}
2140: 	}
2141: 
2142: 	if (py::hasattr(obj, "__arrow_c_stream__")) {
2143: 		return PyArrowObjectType::PyCapsuleInterface;
2144: 	}
2145: 
2146: 	return PyArrowObjectType::Invalid;
2147: }
2148: 
2149: bool DuckDBPyConnection::IsAcceptedArrowObject(const py::object &object) {
2150: 	return DuckDBPyConnection::GetArrowType(object) != PyArrowObjectType::Invalid;
2151: }
2152: 
2153: unique_lock<std::mutex> DuckDBPyConnection::AcquireConnectionLock() {
2154: 	// we first release the gil and then acquire the connection lock
2155: 	unique_lock<std::mutex> lock(py_connection_lock, std::defer_lock);
2156: 	{
2157: 		py::gil_scoped_release release;
2158: 		lock.lock();
2159: 	}
2160: 	return lock;
2161: }
2162: 
2163: } // namespace duckdb
[end of tools/pythonpkg/src/pyconnection.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: