{
  "repo": "duckdb/duckdb",
  "pull_number": 2298,
  "instance_id": "duckdb__duckdb-2298",
  "issue_numbers": [
    "2294"
  ],
  "base_commit": "7dd852e1dd7aa521e76cbf6f756da487e2e1a1cd",
  "patch": "diff --git a/src/execution/operator/persistent/buffered_csv_reader.cpp b/src/execution/operator/persistent/buffered_csv_reader.cpp\nindex e7e4106668ef..f39ec75cba14 100644\n--- a/src/execution/operator/persistent/buffered_csv_reader.cpp\n+++ b/src/execution/operator/persistent/buffered_csv_reader.cpp\n@@ -176,7 +176,7 @@ unique_ptr<FileHandle> BufferedCSVReader::OpenCSV(const BufferedCSVReaderOptions\n static string GenerateColumnName(const idx_t total_cols, const idx_t col_number, const string &prefix = \"column\") {\n \tint max_digits = NumericHelper::UnsignedLength(total_cols - 1);\n \tint digits = NumericHelper::UnsignedLength(col_number);\n-\tstring leading_zeros = string(\"0\", max_digits - digits);\n+\tstring leading_zeros = string(max_digits - digits, '0');\n \tstring value = to_string(col_number);\n \treturn string(prefix + leading_zeros + value);\n }\n",
  "test_patch": "diff --git a/test/sql/copy/csv/data/manycolumns.csv b/test/sql/copy/csv/data/manycolumns.csv\nnew file mode 100644\nindex 000000000000..42fcedb76d9b\n--- /dev/null\n+++ b/test/sql/copy/csv/data/manycolumns.csv\n@@ -0,0 +1,1 @@\n+1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101\ndiff --git a/test/sql/copy/csv/test_many_columns.test b/test/sql/copy/csv/test_many_columns.test\nnew file mode 100644\nindex 000000000000..cef88bd9e3bd\n--- /dev/null\n+++ b/test/sql/copy/csv/test_many_columns.test\n@@ -0,0 +1,12 @@\n+# name: test/sql/copy/csv/test_many_columns.test\n+# description: Test read CSV function with many (>100) auto-generated columns\n+# group: [csv]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE t AS SELECT * FROM read_csv_auto('test/sql/copy/csv/data/manycolumns.csv');\n+\n+statement ok\n+PRAGMA SHOW('t');\n",
  "problem_statement": "Non UTF8 generated column name\nCreating a table with more than 100 columns creates a column name that's not valid UTF8.\r\n\r\n```sh\r\n> echo  \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101\" > bad.csv\r\n\r\n> duckdb :memory: \"CREATE TABLE t AS SELECT * FROM read_csv_auto('bad.csv'); PRAGMA SHOW('t');\"\r\nError: String value is not valid UTF8\r\n```\r\n\r\nCreate table succeeds, but the pragma fails. \r\n\r\n**Environment (please complete the following information):**\r\n - OS: osx 10.6 \r\n - DuckDB Version: v0.2.10-dev308  \u2502 c7b4e0a3a , v0.2.7          \u2502 8bc050d05 \u2502\r\n\r\n**Before submitting**\r\n- [X] Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n- [X] Have you tried this on the latest `master` branch? In case you cannot compile, you may find some binaries here: https://github.com/duckdb/duckdb/releases/tag/master-builds\r\n\r\nP.S. I'm really enjoying DuckDB, it's a fantastic project!\n",
  "hints_text": "This looks like its related to `SHOW`",
  "created_at": "2021-09-20T07:48:13Z"
}