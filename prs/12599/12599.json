{
  "repo": "duckdb/duckdb",
  "pull_number": 12599,
  "instance_id": "duckdb__duckdb-12599",
  "issue_numbers": [
    "12592"
  ],
  "base_commit": "9d43c5c0b00d3c429d6a8c4ba6e86867c09dcb26",
  "patch": "diff --git a/src/main/relation/setop_relation.cpp b/src/main/relation/setop_relation.cpp\nindex 63b47480c02e..4023099c6368 100644\n--- a/src/main/relation/setop_relation.cpp\n+++ b/src/main/relation/setop_relation.cpp\n@@ -17,7 +17,7 @@ SetOpRelation::SetOpRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> r\n \n unique_ptr<QueryNode> SetOpRelation::GetQueryNode() {\n \tauto result = make_uniq<SetOperationNode>();\n-\tif (setop_type == SetOperationType::EXCEPT || setop_type == SetOperationType::INTERSECT) {\n+\tif (!setop_all) {\n \t\tresult->modifiers.push_back(make_uniq<DistinctModifier>());\n \t}\n \tresult->left = left->GetQueryNode();\n",
  "test_patch": "diff --git a/test/api/test_relation_api.cpp b/test/api/test_relation_api.cpp\nindex 95a35aeb1e5c..5bfcf998f2d8 100644\n--- a/test/api/test_relation_api.cpp\n+++ b/test/api/test_relation_api.cpp\n@@ -16,7 +16,7 @@ TEST_CASE(\"Test simple relation API\", \"[relation_api]\") {\n \n \t// create some tables\n \tREQUIRE_NO_FAIL(con.Query(\"CREATE TABLE integers(i INTEGER)\"));\n-\tREQUIRE_NO_FAIL(con.Query(\"INSERT INTO integers VALUES (1), (2), (3)\"));\n+\tREQUIRE_NO_FAIL(con.Query(\"INSERT INTO integers VALUES (1), (2), (3), (1), (2), (3)\"));\n \n \t// simple projection\n \tREQUIRE_NOTHROW(tbl = con.Table(\"integers\"));\n@@ -102,7 +102,7 @@ TEST_CASE(\"Test simple relation API\", \"[relation_api]\") {\n \n \t// filters can also contain conjunctions\n \tREQUIRE_NOTHROW(result = proj->Filter(\"a=2 OR a=4\")->Execute());\n-\tREQUIRE(CHECK_COLUMN(result, 0, {2, 4}));\n+\tREQUIRE(CHECK_COLUMN(result, 0, {2, 2, 4, 4}));\n \n \t// alias\n \tREQUIRE_NOTHROW(result = proj->Project(\"a + 1\")->Alias(\"bla\")->Execute());\n@@ -110,9 +110,9 @@ TEST_CASE(\"Test simple relation API\", \"[relation_api]\") {\n \n \t// now test ordering\n \tREQUIRE_NOTHROW(result = proj->Order(\"a DESC\")->Execute());\n-\tREQUIRE(CHECK_COLUMN(result, 0, {4, 2}));\n+\tREQUIRE(CHECK_COLUMN(result, 0, {4, 4, 2, 2}));\n \tREQUIRE_NOTHROW(result = proj->Order(duckdb::vector<string> {\"a DESC\", \"a ASC\"})->Execute());\n-\tREQUIRE(CHECK_COLUMN(result, 0, {4, 2}));\n+\tREQUIRE(CHECK_COLUMN(result, 0, {4, 4, 2, 2}));\n \n \t// top n\n \tREQUIRE_NOTHROW(result = proj->Order(\"a\")->Limit(1)->Execute());\n@@ -122,24 +122,24 @@ TEST_CASE(\"Test simple relation API\", \"[relation_api]\") {\n \n \t// test set operations\n \tREQUIRE_NOTHROW(result = tbl->Union(tbl)->Order(\"i\")->Execute());\n-\tREQUIRE(CHECK_COLUMN(result, 0, {1, 1, 2, 2, 3, 3}));\n+\tREQUIRE(CHECK_COLUMN(result, 0, {1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3}));\n \tREQUIRE_NOTHROW(result = tbl->Except(tbl)->Order(\"i\")->Execute());\n \tREQUIRE(CHECK_COLUMN(result, 0, {}));\n \tREQUIRE_NOTHROW(result = tbl->Intersect(tbl)->Order(\"i\")->Execute());\n-\tREQUIRE(CHECK_COLUMN(result, 0, {1, 2, 3}));\n+\tREQUIRE(CHECK_COLUMN(result, 0, {1, 1, 2, 2, 3, 3}));\n \tREQUIRE_NOTHROW(result = tbl->Except(tbl->Filter(\"i=2\"))->Order(\"i\")->Execute());\n-\tREQUIRE(CHECK_COLUMN(result, 0, {1, 3}));\n+\tREQUIRE(CHECK_COLUMN(result, 0, {1, 1, 3, 3}));\n \tREQUIRE_NOTHROW(result = tbl->Intersect(tbl->Filter(\"i=2\"))->Order(\"i\")->Execute());\n-\tREQUIRE(CHECK_COLUMN(result, 0, {2}));\n+\tREQUIRE(CHECK_COLUMN(result, 0, {2, 2}));\n \n \t// set operations with projections\n \tREQUIRE_NOTHROW(proj = tbl->Project(\"i::TINYINT AS i, i::SMALLINT, i::BIGINT, i::VARCHAR\"));\n \tREQUIRE_NOTHROW(proj2 = tbl->Project(\"(i+10)::TINYINT, (i+10)::SMALLINT, (i+10)::BIGINT, (i+10)::VARCHAR\"));\n \tREQUIRE_NOTHROW(result = proj->Union(proj2)->Order(\"i\")->Execute());\n-\tREQUIRE(CHECK_COLUMN(result, 0, {1, 2, 3, 11, 12, 13}));\n-\tREQUIRE(CHECK_COLUMN(result, 1, {1, 2, 3, 11, 12, 13}));\n-\tREQUIRE(CHECK_COLUMN(result, 2, {1, 2, 3, 11, 12, 13}));\n-\tREQUIRE(CHECK_COLUMN(result, 3, {\"1\", \"2\", \"3\", \"11\", \"12\", \"13\"}));\n+\tREQUIRE(CHECK_COLUMN(result, 0, {1, 1, 2, 2, 3, 3, 11, 11, 12, 12, 13, 13}));\n+\tREQUIRE(CHECK_COLUMN(result, 1, {1, 1, 2, 2, 3, 3, 11, 11, 12, 12, 13, 13}));\n+\tREQUIRE(CHECK_COLUMN(result, 2, {1, 1, 2, 2, 3, 3, 11, 11, 12, 12, 13, 13}));\n+\tREQUIRE(CHECK_COLUMN(result, 3, {\"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"11\", \"11\", \"12\", \"12\", \"13\", \"13\"}));\n \n \t// distinct\n \tREQUIRE_NOTHROW(result = tbl->Union(tbl)->Union(tbl)->Distinct()->Order(\"1\")->Execute());\n@@ -260,8 +260,8 @@ TEST_CASE(\"Test combinations of set operations\", \"[relation_api]\") {\n \tREQUIRE(CHECK_COLUMN(result, 0, {1, 2, 3}));\n \tREQUIRE(CHECK_COLUMN(result, 1, {10, 5, 4}));\n \tREQUIRE_NOTHROW(result = vunion->Intersect(vunion)->Order(\"1\")->Execute());\n-\tREQUIRE(CHECK_COLUMN(result, 0, {1, 2, 3}));\n-\tREQUIRE(CHECK_COLUMN(result, 1, {10, 5, 4}));\n+\tREQUIRE(CHECK_COLUMN(result, 0, {1, 1, 2, 2, 3, 3}));\n+\tREQUIRE(CHECK_COLUMN(result, 1, {10, 10, 5, 5, 4, 4}));\n \tREQUIRE_NOTHROW(result = vunion->Except(vunion)->Execute());\n \tREQUIRE(CHECK_COLUMN(result, 0, {}));\n \tREQUIRE(CHECK_COLUMN(result, 1, {}));\ndiff --git a/tools/pythonpkg/tests/fast/test_relation.py b/tools/pythonpkg/tests/fast/test_relation.py\nindex 4d66adf8256d..b6e1cc9591d0 100644\n--- a/tools/pythonpkg/tests/fast/test_relation.py\n+++ b/tools/pythonpkg/tests/fast/test_relation.py\n@@ -514,7 +514,7 @@ def test_materialized_relation(self, duckdb_cursor, num_rows):\n \n         except_rel = unioned_rel.except_(materialized_one)\n         res = except_rel.fetchall()\n-        assert res == [('a',)]\n+        assert res == [tuple('a') for _ in range(5)]\n \n         intersect_rel = unioned_rel.intersect(materialized_one).order('range')\n         res = intersect_rel.fetchall()\n",
  "problem_statement": "`DuckDBPyRelation.intersect()` (Python function API) implicitly performs `.distinct()` operation (i.e. deduplicates for set semantics)\n### What happens?\r\n\r\nPython function API `.intersect()` method \"*promises*\" bag semantics (as suggested in documentation, and as shown by `.sql_query()` method.\r\nHowever, it actually *delivers* set semantics (i.e. implied `.distinct()`).\r\n\r\n### To Reproduce\r\n\r\n```python\r\nimport duckdb\r\ntest = duckdb.sql(\"SELECT 1 from range(5)\")\r\ntest\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   1   \u2502\r\n\u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502\r\n\u2502     1 \u2502\r\n\u2502     1 \u2502\r\n\u2502     1 \u2502\r\n\u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\ni.e. `test` is a table with duplicates.\r\nIntersection with itself should leave it unchanged:\r\n```python\r\ntest.intersect(test).sql_query()\r\n```\r\n```sql\r\n'(SELECT 1 FROM range(5)) INTERSECT ALL (SELECT 1 FROM range(5))'\r\n```\r\ni.e. `sql_query()` promises bag semantics (`ALL`), which indeed is provided via `sql()` (DB API):\r\n```python\r\nduckdb.sql(test.intersect(test).sql_query())\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   1   \u2502\r\n\u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502\r\n\u2502     1 \u2502\r\n\u2502     1 \u2502\r\n\u2502     1 \u2502\r\n\u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nHowever, using the function API deduplicates:\r\n```python\r\ntest.intersect(test)\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   1   \u2502\r\n\u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n### OS:\r\n\r\nWindows 11\r\n\r\n### DuckDB Version:\r\n\r\n1.0\r\n\r\n### DuckDB Client:\r\n\r\nPython (3.12)\r\n\r\n### Full Name:\r\n\r\nOlaf\r\n\r\n### Affiliation:\r\n\r\nNone\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-06-19T11:54:03Z"
}