You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
`DuckDBPyRelation.intersect()` (Python function API) implicitly performs `.distinct()` operation (i.e. deduplicates for set semantics)
### What happens?

Python function API `.intersect()` method "*promises*" bag semantics (as suggested in documentation, and as shown by `.sql_query()` method.
However, it actually *delivers* set semantics (i.e. implied `.distinct()`).

### To Reproduce

```python
import duckdb
test = duckdb.sql("SELECT 1 from range(5)")
test
```
```
┌───────┐
│   1   │
│ int32 │
├───────┤
│     1 │
│     1 │
│     1 │
│     1 │
│     1 │
└───────┘
```
i.e. `test` is a table with duplicates.
Intersection with itself should leave it unchanged:
```python
test.intersect(test).sql_query()
```
```sql
'(SELECT 1 FROM range(5)) INTERSECT ALL (SELECT 1 FROM range(5))'
```
i.e. `sql_query()` promises bag semantics (`ALL`), which indeed is provided via `sql()` (DB API):
```python
duckdb.sql(test.intersect(test).sql_query())
```
```
┌───────┐
│   1   │
│ int32 │
├───────┤
│     1 │
│     1 │
│     1 │
│     1 │
│     1 │
└───────┘
```
However, using the function API deduplicates:
```python
test.intersect(test)
```
```
┌───────┐
│   1   │
│ int32 │
├───────┤
│     1 │
└───────┘
```

### OS:

Windows 11

### DuckDB Version:

1.0

### DuckDB Client:

Python (3.12)

### Full Name:

Olaf

### Affiliation:

None

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://www.duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/main/relation/setop_relation.cpp]
1: #include "duckdb/main/relation/setop_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node/set_operation_node.hpp"
4: #include "duckdb/parser/result_modifier.hpp"
5: 
6: namespace duckdb {
7: 
8: SetOpRelation::SetOpRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> right_p, SetOperationType setop_type_p,
9:                              bool setop_all)
10:     : Relation(left_p->context, RelationType::SET_OPERATION_RELATION), left(std::move(left_p)),
11:       right(std::move(right_p)), setop_type(setop_type_p), setop_all(setop_all) {
12: 	if (left->context.GetContext() != right->context.GetContext()) {
13: 		throw InvalidInputException("Cannot combine LEFT and RIGHT relations of different connections!");
14: 	}
15: 	context.GetContext()->TryBindRelation(*this, this->columns);
16: }
17: 
18: unique_ptr<QueryNode> SetOpRelation::GetQueryNode() {
19: 	auto result = make_uniq<SetOperationNode>();
20: 	if (setop_type == SetOperationType::EXCEPT || setop_type == SetOperationType::INTERSECT) {
21: 		result->modifiers.push_back(make_uniq<DistinctModifier>());
22: 	}
23: 	result->left = left->GetQueryNode();
24: 	result->right = right->GetQueryNode();
25: 	result->setop_type = setop_type;
26: 	result->setop_all = setop_all;
27: 	return std::move(result);
28: }
29: 
30: string SetOpRelation::GetAlias() {
31: 	return left->GetAlias();
32: }
33: 
34: const vector<ColumnDefinition> &SetOpRelation::Columns() {
35: 	return this->columns;
36: }
37: 
38: string SetOpRelation::ToString(idx_t depth) {
39: 	string str = RenderWhitespace(depth);
40: 	switch (setop_type) {
41: 	case SetOperationType::UNION:
42: 		str += "Union";
43: 		break;
44: 	case SetOperationType::EXCEPT:
45: 		str += "Except";
46: 		break;
47: 	case SetOperationType::INTERSECT:
48: 		str += "Intersect";
49: 		break;
50: 	default:
51: 		throw InternalException("Unknown setop type");
52: 	}
53: 	return str + "\n" + left->ToString(depth + 1) + right->ToString(depth + 1);
54: }
55: 
56: } // namespace duckdb
[end of src/main/relation/setop_relation.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: