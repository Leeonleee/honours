{
  "repo": "duckdb/duckdb",
  "pull_number": 4727,
  "instance_id": "duckdb__duckdb-4727",
  "issue_numbers": [
    "4702",
    "4702"
  ],
  "base_commit": "27d89cabf527c5b533d691724692299886179224",
  "patch": "diff --git a/src/catalog/catalog_entry/table_catalog_entry.cpp b/src/catalog/catalog_entry/table_catalog_entry.cpp\nindex 48aefd5a0a41..10d4cd55338d 100644\n--- a/src/catalog/catalog_entry/table_catalog_entry.cpp\n+++ b/src/catalog/catalog_entry/table_catalog_entry.cpp\n@@ -629,12 +629,19 @@ unique_ptr<CatalogEntry> TableCatalogEntry::ChangeColumnType(ClientContext &cont\n \tauto expression = info.expression->Copy();\n \tauto bound_expression = expr_binder.Bind(expression);\n \tauto bound_create_info = binder->BindCreateTableInfo(move(create_info));\n+\tvector<column_t> storage_oids;\n \tif (bound_columns.empty()) {\n-\t\tbound_columns.push_back(COLUMN_IDENTIFIER_ROW_ID);\n+\t\tstorage_oids.push_back(COLUMN_IDENTIFIER_ROW_ID);\n+\t}\n+\t// transform to storage_oid\n+\telse {\n+\t\tfor (idx_t i = 0; i < bound_columns.size(); i++) {\n+\t\t\tstorage_oids.push_back(columns[bound_columns[i]].StorageOid());\n+\t\t}\n \t}\n \n-\tauto new_storage =\n-\t    make_shared<DataTable>(context, *storage, change_idx, info.target_type, move(bound_columns), *bound_expression);\n+\tauto new_storage = make_shared<DataTable>(context, *storage, columns[change_idx].StorageOid(), info.target_type,\n+\t                                          move(storage_oids), *bound_expression);\n \tauto result =\n \t    make_unique<TableCatalogEntry>(catalog, schema, (BoundCreateTableInfo *)bound_create_info.get(), new_storage);\n \treturn move(result);\n",
  "test_patch": "diff --git a/test/sql/alter/alter_type/test_alter_type_with_generated_column.test b/test/sql/alter/alter_type/test_alter_type_with_generated_column.test\nnew file mode 100644\nindex 000000000000..4864266f047e\n--- /dev/null\n+++ b/test/sql/alter/alter_type/test_alter_type_with_generated_column.test\n@@ -0,0 +1,27 @@\n+# name: test/sql/alter/alter_type/test_alter_type_with_generated_column.test\n+# description: Test ALTER TABLE ALTER TYPE with Generated Column\n+# group: [alter_type]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE test(i AS (1), j INTEGER)\n+\n+statement ok\n+INSERT INTO test VALUES (1), (2)\n+\n+# Alter generated column\n+statement error\n+ALTER TABLE test ALTER i TYPE VARCHAR\n+\n+# Alter normal column\n+statement ok\n+ALTER TABLE test ALTER j TYPE VARCHAR\n+\n+query IT\n+SELECT * FROM test\n+----\n+1\t1\n+1\t2\n+\n",
  "problem_statement": "heap-buffer-overflow when alter column type with generated column presented\n### What happens?\n\nHit stacktrace when alter column type with generated column presented\r\n\r\n```sql\r\nCREATE TABLE t0(c0 AS (1), c1 INT);\r\nalter table t0 alter c1 type long;\r\n```\r\n\r\n```\r\n=================================================================\r\n==55091==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x607000035060 at pc 0x000001afce14 bp 0x7ffebb5fb7a0 sp 0x7ffebb5fb798\r\nWRITE of size 1 at 0x607000035060 thread T0\r\n    #0 0x1afce13 in duckdb::LogicalType::operator=(duckdb::LogicalType const&) /data/zippond/git/work/duckdb/src/include/duckdb/common/types.hpp:413\r\n    #1 0x1ac7102 in duckdb::ColumnDefinition::SetType(duckdb::LogicalType const&) /data/zippond/git/work/duckdb/src/parser/column_definition.cpp:90\r\n    #2 0x34d188c in duckdb::DataTable::DataTable(duckdb::ClientContext&, duckdb::DataTable&, unsigned long, duckdb::LogicalType const&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&) /data/zippond/git/work/duckdb/src/storage/data_table.cpp:215\r\n    #3 0x47ba8cb in void __gnu_cxx::new_allocator<duckdb::DataTable>::construct<duckdb::DataTable, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(duckdb::DataTable*, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/ext/new_allocator.h:147\r\n    #4 0x47b8eac in void std::allocator_traits<std::allocator<duckdb::DataTable> >::construct<duckdb::DataTable, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::allocator<duckdb::DataTable>&, duckdb::DataTable*, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/alloc_traits.h:484\r\n    #5 0x47b72e3 in std::_Sp_counted_ptr_inplace<duckdb::DataTable, std::allocator<duckdb::DataTable>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr_base.h:548\r\n    #6 0x47b150f in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<duckdb::DataTable, std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(duckdb::DataTable*&, std::_Sp_alloc_shared_tag<std::allocator<duckdb::DataTable> >, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr_base.h:679\r\n    #7 0x47aae48 in std::__shared_ptr<duckdb::DataTable, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::_Sp_alloc_shared_tag<std::allocator<duckdb::DataTable> >, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr_base.h:1344\r\n    #8 0x47a400a in std::shared_ptr<duckdb::DataTable>::shared_ptr<std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::_Sp_alloc_shared_tag<std::allocator<duckdb::DataTable> >, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr.h:359\r\n    #9 0x479a852 in std::shared_ptr<duckdb::DataTable> std::allocate_shared<duckdb::DataTable, std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::allocator<duckdb::DataTable> const&, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr.h:702\r\n    #10 0x478abf8 in std::shared_ptr<duckdb::DataTable> std::make_shared<duckdb::DataTable, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr.h:718\r\n    #11 0x476543b in duckdb::TableCatalogEntry::ChangeColumnType(duckdb::ClientContext&, duckdb::ChangeColumnTypeInfo&) /data/zippond/git/work/duckdb/src/catalog/catalog_entry/table_catalog_entry.cpp:607\r\n    #12 0x4753c92 in duckdb::TableCatalogEntry::AlterEntry(duckdb::ClientContext&, duckdb::AlterInfo*) /data/zippond/git/work/duckdb/src/catalog/catalog_entry/table_catalog_entry.cpp:196\r\n    #13 0x1c2c0f4 in duckdb::CatalogSet::AlterEntry(duckdb::ClientContext&, std::string const&, duckdb::AlterInfo*) /data/zippond/git/work/duckdb/src/catalog/catalog_set.cpp:178\r\n    #14 0x4747d82 in duckdb::SchemaCatalogEntry::Alter(duckdb::ClientContext&, duckdb::AlterInfo*) /data/zippond/git/work/duckdb/src/catalog/catalog_entry/schema_catalog_entry.cpp:285\r\n    #15 0x1c27011 in duckdb::Catalog::Alter(duckdb::ClientContext&, duckdb::AlterInfo*) /data/zippond/git/work/duckdb/src/catalog/catalog.cpp:393\r\n    #16 0x59d0b87 in duckdb::PhysicalAlter::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSourceState&, duckdb::LocalSourceState&) const /data/zippond/git/work/duckdb/src/execution/operator/schema/physical_alter.cpp:29\r\n    #17 0x3072244 in duckdb::PipelineExecutor::FetchFromSource(duckdb::DataChunk&) /data/zippond/git/work/duckdb/src/parallel/pipeline_executor.cpp:334\r\n    #18 0x306ff37 in duckdb::PipelineExecutor::ExecutePull(duckdb::DataChunk&) /data/zippond/git/work/duckdb/src/parallel/pipeline_executor.cpp:208\r\n    #19 0x305ceb4 in duckdb::Executor::FetchChunk() /data/zippond/git/work/duckdb/src/parallel/executor.cpp:528\r\n    #20 0x2d38466 in duckdb::ClientContext::FetchInternal(duckdb::ClientContextLock&, duckdb::Executor&, duckdb::BaseQueryResult&) /data/zippond/git/work/duckdb/src/main/client_context.cpp:99\r\n    #21 0x2d3d550 in duckdb::ClientContext::FetchResultInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&) /data/zippond/git/work/duckdb/src/main/client_context.cpp:258\r\n    #22 0x2d77567 in duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&) /data/zippond/git/work/duckdb/src/main/pending_query_result.cpp:56\r\n    #23 0x2d77857 in duckdb::PendingQueryResult::Execute() /data/zippond/git/work/duckdb/src/main/pending_query_result.cpp:63\r\n    #24 0x2d78f94 in duckdb::PreparedStatement::Execute(std::vector<duckdb::Value, std::allocator<duckdb::Value> >&, bool) /data/zippond/git/work/duckdb/src/main/prepared_statement.cpp:50\r\n    #25 0x1a6a5e7 in sqlite3_step /data/zippond/git/work/duckdb/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:211\r\n    #26 0x1a15837 in exec_prepared_stmt_columnar /data/zippond/git/work/duckdb/tools/shell/shell.c:12719\r\n    #27 0x1a19921 in exec_prepared_stmt /data/zippond/git/work/duckdb/tools/shell/shell.c:12895\r\n    #28 0x1a1cb88 in shell_exec /data/zippond/git/work/duckdb/tools/shell/shell.c:13216\r\n    #29 0x1a51a7d in runOneSqlLine /data/zippond/git/work/duckdb/tools/shell/shell.c:20005\r\n    #30 0x1a52f3c in process_input /data/zippond/git/work/duckdb/tools/shell/shell.c:20120\r\n    #31 0x1a578e2 in main /data/zippond/git/work/duckdb/tools/shell/shell.c:20938\r\n    #32 0x7f5a8f966ad4 in __libc_start_main (/lib64/libc.so.6+0x23ad4)\r\n    #33 0x19bbfc8 in _start (/data/zippond/git/work/duckdb/build/debug/duckdb+0x19bbfc8)\r\n```\n\n### To Reproduce\n\n```sql\r\nCREATE TABLE t0(c0 AS (1), c1 INT);\r\nalter table t0 alter c1 type long;\r\n```\n\n### OS:\n\nlinuxamd64\n\n### DuckDB Version:\n\nv0.5.1-dev126 3591cd172\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nDong Zhi-peng\n\n### Affiliation:\n\nXJTU\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nheap-buffer-overflow when alter column type with generated column presented\n### What happens?\n\nHit stacktrace when alter column type with generated column presented\r\n\r\n```sql\r\nCREATE TABLE t0(c0 AS (1), c1 INT);\r\nalter table t0 alter c1 type long;\r\n```\r\n\r\n```\r\n=================================================================\r\n==55091==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x607000035060 at pc 0x000001afce14 bp 0x7ffebb5fb7a0 sp 0x7ffebb5fb798\r\nWRITE of size 1 at 0x607000035060 thread T0\r\n    #0 0x1afce13 in duckdb::LogicalType::operator=(duckdb::LogicalType const&) /data/zippond/git/work/duckdb/src/include/duckdb/common/types.hpp:413\r\n    #1 0x1ac7102 in duckdb::ColumnDefinition::SetType(duckdb::LogicalType const&) /data/zippond/git/work/duckdb/src/parser/column_definition.cpp:90\r\n    #2 0x34d188c in duckdb::DataTable::DataTable(duckdb::ClientContext&, duckdb::DataTable&, unsigned long, duckdb::LogicalType const&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&) /data/zippond/git/work/duckdb/src/storage/data_table.cpp:215\r\n    #3 0x47ba8cb in void __gnu_cxx::new_allocator<duckdb::DataTable>::construct<duckdb::DataTable, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(duckdb::DataTable*, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/ext/new_allocator.h:147\r\n    #4 0x47b8eac in void std::allocator_traits<std::allocator<duckdb::DataTable> >::construct<duckdb::DataTable, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::allocator<duckdb::DataTable>&, duckdb::DataTable*, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/alloc_traits.h:484\r\n    #5 0x47b72e3 in std::_Sp_counted_ptr_inplace<duckdb::DataTable, std::allocator<duckdb::DataTable>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr_base.h:548\r\n    #6 0x47b150f in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<duckdb::DataTable, std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(duckdb::DataTable*&, std::_Sp_alloc_shared_tag<std::allocator<duckdb::DataTable> >, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr_base.h:679\r\n    #7 0x47aae48 in std::__shared_ptr<duckdb::DataTable, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::_Sp_alloc_shared_tag<std::allocator<duckdb::DataTable> >, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr_base.h:1344\r\n    #8 0x47a400a in std::shared_ptr<duckdb::DataTable>::shared_ptr<std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::_Sp_alloc_shared_tag<std::allocator<duckdb::DataTable> >, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr.h:359\r\n    #9 0x479a852 in std::shared_ptr<duckdb::DataTable> std::allocate_shared<duckdb::DataTable, std::allocator<duckdb::DataTable>, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(std::allocator<duckdb::DataTable> const&, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr.h:702\r\n    #10 0x478abf8 in std::shared_ptr<duckdb::DataTable> std::make_shared<duckdb::DataTable, duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >, duckdb::Expression&>(duckdb::ClientContext&, duckdb::DataTable&, unsigned long&, duckdb::LogicalType&, std::vector<unsigned long, std::allocator<unsigned long> >&&, duckdb::Expression&) /usr/include/c++/9/bits/shared_ptr.h:718\r\n    #11 0x476543b in duckdb::TableCatalogEntry::ChangeColumnType(duckdb::ClientContext&, duckdb::ChangeColumnTypeInfo&) /data/zippond/git/work/duckdb/src/catalog/catalog_entry/table_catalog_entry.cpp:607\r\n    #12 0x4753c92 in duckdb::TableCatalogEntry::AlterEntry(duckdb::ClientContext&, duckdb::AlterInfo*) /data/zippond/git/work/duckdb/src/catalog/catalog_entry/table_catalog_entry.cpp:196\r\n    #13 0x1c2c0f4 in duckdb::CatalogSet::AlterEntry(duckdb::ClientContext&, std::string const&, duckdb::AlterInfo*) /data/zippond/git/work/duckdb/src/catalog/catalog_set.cpp:178\r\n    #14 0x4747d82 in duckdb::SchemaCatalogEntry::Alter(duckdb::ClientContext&, duckdb::AlterInfo*) /data/zippond/git/work/duckdb/src/catalog/catalog_entry/schema_catalog_entry.cpp:285\r\n    #15 0x1c27011 in duckdb::Catalog::Alter(duckdb::ClientContext&, duckdb::AlterInfo*) /data/zippond/git/work/duckdb/src/catalog/catalog.cpp:393\r\n    #16 0x59d0b87 in duckdb::PhysicalAlter::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSourceState&, duckdb::LocalSourceState&) const /data/zippond/git/work/duckdb/src/execution/operator/schema/physical_alter.cpp:29\r\n    #17 0x3072244 in duckdb::PipelineExecutor::FetchFromSource(duckdb::DataChunk&) /data/zippond/git/work/duckdb/src/parallel/pipeline_executor.cpp:334\r\n    #18 0x306ff37 in duckdb::PipelineExecutor::ExecutePull(duckdb::DataChunk&) /data/zippond/git/work/duckdb/src/parallel/pipeline_executor.cpp:208\r\n    #19 0x305ceb4 in duckdb::Executor::FetchChunk() /data/zippond/git/work/duckdb/src/parallel/executor.cpp:528\r\n    #20 0x2d38466 in duckdb::ClientContext::FetchInternal(duckdb::ClientContextLock&, duckdb::Executor&, duckdb::BaseQueryResult&) /data/zippond/git/work/duckdb/src/main/client_context.cpp:99\r\n    #21 0x2d3d550 in duckdb::ClientContext::FetchResultInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&) /data/zippond/git/work/duckdb/src/main/client_context.cpp:258\r\n    #22 0x2d77567 in duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&) /data/zippond/git/work/duckdb/src/main/pending_query_result.cpp:56\r\n    #23 0x2d77857 in duckdb::PendingQueryResult::Execute() /data/zippond/git/work/duckdb/src/main/pending_query_result.cpp:63\r\n    #24 0x2d78f94 in duckdb::PreparedStatement::Execute(std::vector<duckdb::Value, std::allocator<duckdb::Value> >&, bool) /data/zippond/git/work/duckdb/src/main/prepared_statement.cpp:50\r\n    #25 0x1a6a5e7 in sqlite3_step /data/zippond/git/work/duckdb/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:211\r\n    #26 0x1a15837 in exec_prepared_stmt_columnar /data/zippond/git/work/duckdb/tools/shell/shell.c:12719\r\n    #27 0x1a19921 in exec_prepared_stmt /data/zippond/git/work/duckdb/tools/shell/shell.c:12895\r\n    #28 0x1a1cb88 in shell_exec /data/zippond/git/work/duckdb/tools/shell/shell.c:13216\r\n    #29 0x1a51a7d in runOneSqlLine /data/zippond/git/work/duckdb/tools/shell/shell.c:20005\r\n    #30 0x1a52f3c in process_input /data/zippond/git/work/duckdb/tools/shell/shell.c:20120\r\n    #31 0x1a578e2 in main /data/zippond/git/work/duckdb/tools/shell/shell.c:20938\r\n    #32 0x7f5a8f966ad4 in __libc_start_main (/lib64/libc.so.6+0x23ad4)\r\n    #33 0x19bbfc8 in _start (/data/zippond/git/work/duckdb/build/debug/duckdb+0x19bbfc8)\r\n```\n\n### To Reproduce\n\n```sql\r\nCREATE TABLE t0(c0 AS (1), c1 INT);\r\nalter table t0 alter c1 type long;\r\n```\n\n### OS:\n\nlinuxamd64\n\n### DuckDB Version:\n\nv0.5.1-dev126 3591cd172\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nDong Zhi-peng\n\n### Affiliation:\n\nXJTU\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "This is a duplicate of #4677\nEh not exactly. #4677 is about `SET NOT NULL` while this one is about `ALTER TYPE`.\r\nThey're both related to generated column as it changed the column index mapping from `DataTable` and `TableCatalogEntry`. \r\nAnd it seems this mismatching causes some other issues.\nThis is a duplicate of #4677\nEh not exactly. #4677 is about `SET NOT NULL` while this one is about `ALTER TYPE`.\r\nThey're both related to generated column as it changed the column index mapping from `DataTable` and `TableCatalogEntry`. \r\nAnd it seems this mismatching causes some other issues.",
  "created_at": "2022-09-15T09:37:20Z"
}