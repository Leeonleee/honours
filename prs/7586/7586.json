{
  "repo": "duckdb/duckdb",
  "pull_number": 7586,
  "instance_id": "duckdb__duckdb-7586",
  "issue_numbers": [
    "7582",
    "7582"
  ],
  "base_commit": "1d304769a4451e69f2cf4c376dad498226615c2c",
  "patch": "diff --git a/src/storage/table/list_column_data.cpp b/src/storage/table/list_column_data.cpp\nindex 7eed8ff9ad3b..e26b1cd79db5 100644\n--- a/src/storage/table/list_column_data.cpp\n+++ b/src/storage/table/list_column_data.cpp\n@@ -62,11 +62,11 @@ void ListColumnData::InitializeScanWithOffset(ColumnScanState &state, idx_t row_\n \n \t// we need to read the list at position row_idx to get the correct row offset of the child\n \tauto child_offset = row_idx == start ? 0 : FetchListOffset(row_idx - 1);\n-\n \tD_ASSERT(child_offset <= child_column->GetMaxEntry());\n \tif (child_offset < child_column->GetMaxEntry()) {\n \t\tchild_column->InitializeScanWithOffset(state.child_states[1], start + child_offset);\n \t}\n+\tstate.last_offset = child_offset;\n }\n \n idx_t ListColumnData::Scan(TransactionData transaction, idx_t vector_index, ColumnScanState &state, Vector &result) {\n@@ -108,9 +108,10 @@ idx_t ListColumnData::ScanCount(ColumnScanState &state, Vector &result, idx_t co\n \n \tif (child_scan_count > 0) {\n \t\tauto &child_entry = ListVector::GetEntry(result);\n-\t\tD_ASSERT(child_entry.GetType().InternalType() == PhysicalType::STRUCT ||\n-\t\t         state.child_states[1].row_index + child_scan_count <=\n-\t\t             child_column->start + child_column->GetMaxEntry());\n+\t\tif (child_entry.GetType().InternalType() != PhysicalType::STRUCT &&\n+\t\t    state.child_states[1].row_index + child_scan_count > child_column->start + child_column->GetMaxEntry()) {\n+\t\t\tthrow InternalException(\"ListColumnData::ScanCount - internal list scan offset is out of range\");\n+\t\t}\n \t\tchild_column->ScanCount(state.child_states[1], child_entry, child_scan_count);\n \t}\n \tstate.last_offset = last_entry;\n",
  "test_patch": "diff --git a/test/sql/storage/issue7582_list_storage.test b/test/sql/storage/issue7582_list_storage.test\nnew file mode 100644\nindex 000000000000..6caff28a95c1\n--- /dev/null\n+++ b/test/sql/storage/issue7582_list_storage.test\n@@ -0,0 +1,27 @@\n+# name: test/sql/storage/issue7582_list_storage.test\n+# description: Issue #7582: EXC_BAD_ACCESS during insert\n+# group: [storage]\n+\n+require parquet\n+\n+load __TEST_DIR__/issue7582.db\n+\n+statement ok\n+SET wal_autocheckpoint='1GB'\n+\n+statement ok\n+CREATE TABLE tbl (n TEXT[]);\n+\n+statement ok\n+INSERT INTO tbl (n) SELECT CASE WHEN i<100 THEN ['a', 'b'] ELSE [] END l FROM range(1026) t(i);\n+\n+statement ok\n+INSERT INTO tbl (n) SELECT CASE WHEN i<100 THEN ['a', 'b'] ELSE [] END l FROM range(1026) t(i);\n+\n+statement ok\n+INSERT INTO tbl (n) SELECT CASE WHEN i<100 THEN ['a', 'b'] ELSE [] END l FROM range(1026) t(i);\n+\n+restart\n+\n+statement ok\n+FROM tbl\n\\ No newline at end of file\n",
  "problem_statement": "EXC_BAD_ACCESS during insert\n### What happens?\r\n\r\nInserting text[] repeatedly segfaults giving a EXC_BAD_ACCESS error.\r\n\r\n```\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x636c70706c706469)\r\n    frame #0: 0x00007ff81ba4abc6 libsystem_platform.dylib`_platform_memmove$VARIANT$Rosetta + 294\r\nlibsystem_platform.dylib`:\r\n->  0x7ff81ba4abc6 <+294>: movq   (%rsi), %r12\r\n    0x7ff81ba4abc9 <+297>: movq   0x8(%rsi), %r13\r\n    0x7ff81ba4abcd <+301>: movq   0x10(%rsi), %r14\r\n    0x7ff81ba4abd1 <+305>: movq   0x18(%rsi), %r15\r\nTarget 0: (python) stopped.\r\n(lldb) bt\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x636c70706c706469)\r\n  * frame #0: 0x00007ff81ba4abc6 libsystem_platform.dylib`_platform_memmove$VARIANT$Rosetta + 294\r\n    frame #1: 0x0000000128993dec duckdb.cpython-310-darwin.so`duckdb::BufferedFileWriter::WriteData(unsigned char const*, unsigned long long) + 92\r\n    frame #2: 0x00000001289c25ee duckdb.cpython-310-darwin.so`duckdb::Vector::Serialize(unsigned long long, duckdb::Serializer&) + 1038\r\n    frame #3: 0x00000001289c28ab duckdb.cpython-310-darwin.so`duckdb::Vector::Serialize(unsigned long long, duckdb::Serializer&) + 1739\r\n    frame #4: 0x00000001289c21a5 duckdb.cpython-310-darwin.so`duckdb::DataChunk::Serialize(duckdb::Serializer&) + 245\r\n    frame #5: 0x0000000129742095 duckdb.cpython-310-darwin.so`std::__1::__function::__func<duckdb::DataTable::WriteToLog(duckdb::WriteAheadLog&, unsigned long long, unsigned long long)::$_14, std::__1::allocator<duckdb::DataTable::WriteToLog(duckdb::WriteAheadLog&, unsigned long long, unsigned long long)::$_14>, void (duckdb::DataChunk&)>::operator()(duckdb::DataChunk&) + 85\r\n    frame #6: 0x0000000129725133 duckdb.cpython-310-darwin.so`duckdb::DataTable::ScanTableSegment(unsigned long long, unsigned long long, std::__1::function<void (duckdb::DataChunk&)> const&) + 1475\r\n    frame #7: 0x00000001297253b7 duckdb.cpython-310-darwin.so`duckdb::DataTable::WriteToLog(duckdb::WriteAheadLog&, unsigned long long, unsigned long long) + 135\r\n    frame #8: 0x00000001297e37ad duckdb.cpython-310-darwin.so`void duckdb::CommitState::CommitEntry<true>(duckdb::UndoFlags, unsigned char*) + 365\r\n    frame #9: 0x00000001297e142d duckdb.cpython-310-darwin.so`duckdb::UndoBuffer::Commit(duckdb::UndoBuffer::IteratorState&, duckdb::optional_ptr<duckdb::WriteAheadLog>, unsigned long long) + 189\r\n    frame #10: 0x00000001297e079c duckdb.cpython-310-darwin.so`duckdb::DuckTransaction::Commit(duckdb::AttachedDatabase&, unsigned long long, bool) + 172\r\n    frame #11: 0x00000001297e01b4 duckdb.cpython-310-darwin.so`duckdb::DuckTransactionManager::CommitTransaction(duckdb::ClientContext&, duckdb::Transaction*) + 196\r\n    frame #12: 0x00000001297e23a0 duckdb.cpython-310-darwin.so`duckdb::MetaTransaction::Commit() + 256\r\n    frame #13: 0x00000001297e2fd0 duckdb.cpython-310-darwin.so`duckdb::TransactionContext::Commit() + 96\r\n    frame #14: 0x0000000129486865 duckdb.cpython-310-darwin.so`duckdb::ClientContext::EndQueryInternal(duckdb::ClientContextLock&, bool, bool) + 965\r\n    frame #15: 0x0000000129485332 duckdb.cpython-310-darwin.so`duckdb::ClientContext::CleanupInternal(duckdb::ClientContextLock&, duckdb::BaseQueryResult*, bool) + 386\r\n    frame #16: 0x00000001294856db duckdb.cpython-310-darwin.so`duckdb::ClientContext::FetchInternal(duckdb::ClientContextLock&, duckdb::Executor&, duckdb::BaseQueryResult&) + 91\r\n    frame #17: 0x00000001294878b9 duckdb.cpython-310-darwin.so`duckdb::ClientContext::FetchResultInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&) + 793\r\n    frame #18: 0x000000012948d8a7 duckdb.cpython-310-darwin.so`duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&) + 87\r\n    frame #19: 0x00000001294909c2 duckdb.cpython-310-darwin.so`duckdb::PendingQueryResult::Execute() + 50\r\n    frame #20: 0x000000012987e5c9 duckdb.cpython-310-darwin.so`duckdb::DuckDBPyConnection::CompletePendingQuery(duckdb::PendingQueryResult&) + 121\r\n    frame #21: 0x000000012987f5df duckdb.cpython-310-darwin.so`duckdb::DuckDBPyConnection::ExecuteInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool) + 1903\r\n    frame #22: 0x000000012987e392 duckdb.cpython-310-darwin.so`duckdb::DuckDBPyConnection::Execute(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool) + 50\r\n    frame #23: 0x000000012989ac50 duckdb.cpython-310-darwin.so`std::__1::shared_ptr<duckdb::DuckDBPyConnection> pybind11::detail::argument_loader<duckdb::DuckDBPyConnection*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool>::call_impl<std::__1::shared_ptr<duckdb::DuckDBPyConnection>, pybind11::cpp_function::cpp_function<std::__1::shared_ptr<duckdb::DuckDBPyConnection>, duckdb::DuckDBPyConnection, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool, pybind11::name, pybind11::is_method, pybind11::sibling, char [86], pybind11::arg, pybind11::arg_v, pybind11::arg_v>(std::__1::shared_ptr<duckdb::DuckDBPyConnection> (duckdb::DuckDBPyConnection::*)(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [86], pybind11::arg const&, pybind11::arg_v const&, pybind11::arg_v const&)::'lambda'(duckdb::DuckDBPyConnection*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool)&, 0ul, 1ul, 2ul, 3ul, pybind11::detail::void_type>(duckdb::DuckDBPyConnection&&, pybind11::detail::index_sequence<0ul, 1ul, 2ul, 3ul>, pybind11::detail::void_type&&) && + 80\r\n    frame #24: 0x000000012989a98f duckdb.cpython-310-darwin.so`void pybind11::cpp_function::initialize<pybind11::cpp_function::cpp_function<std::__1::shared_ptr<duckdb::DuckDBPyConnection>, duckdb::DuckDBPyConnection, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool, pybind11::name, pybind11::is_method, pybind11::sibling, char [86], pybind11::arg, pybind11::arg_v, pybind11::arg_v>(std::__1::shared_ptr<duckdb::DuckDBPyConnection> (duckdb::DuckDBPyConnection::*)(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [86], pybind11::arg const&, pybind11::arg_v const&, pybind11::arg_v const&)::'lambda'(duckdb::DuckDBPyConnection*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool), std::__1::shared_ptr<duckdb::DuckDBPyConnection>, duckdb::DuckDBPyConnection*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool, pybind11::name, pybind11::is_method, pybind11::sibling, char [86], pybind11::arg, pybind11::arg_v, pybind11::arg_v>(std::__1::shared_ptr<duckdb::DuckDBPyConnection>&&, duckdb::DuckDBPyConnection (*)(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [86], pybind11::arg const&, pybind11::arg_v const&, pybind11::arg_v const&)::'lambda'(pybind11::detail::function_call&)::operator()(pybind11::detail::function_call&) const + 111\r\n    frame #25: 0x00000001297f00b3 duckdb.cpython-310-darwin.so`pybind11::cpp_function::dispatcher(_object*, _object*, _object*) + 4723\r\n    frame #26: 0x00000001000c8094 python`cfunction_call + 52\r\n    frame #27: 0x00000001000686f1 python`_PyObject_MakeTpCall + 305\r\n    frame #28: 0x000000010006e83e python`method_vectorcall + 686\r\n    frame #29: 0x000000010018bc28 python`_PyEval_EvalFrameDefault + 49608\r\n    frame #30: 0x000000010017dcc1 python`_PyEval_Vector + 545\r\n    frame #31: 0x0000000100206470 python`run_mod + 240\r\n    frame #32: 0x0000000100206235 python`pyrun_file + 133\r\n    frame #33: 0x0000000100205d86 python`_PyRun_SimpleFileObject + 422\r\n    frame #34: 0x00000001002056af python`_PyRun_AnyFileObject + 143\r\n    frame #35: 0x000000010022a988 python`pymain_run_file_obj + 216\r\n    frame #36: 0x000000010022a315 python`pymain_run_file + 85\r\n    frame #37: 0x0000000100229b48 python`pymain_run_python + 376\r\n    frame #38: 0x0000000100229985 python`Py_RunMain + 37\r\n    frame #39: 0x00000001000018d8 python`main + 56\r\n    frame #40: 0x00000002003c741f dyld`start + 1903\r\n\r\n```\r\n\r\n### To Reproduce\r\n\r\nI can reproduce almost always reproduce the segfault with the following, but not if I shrink the csv or do not repeat the insert.\r\n\r\n```python\r\nimport duckdb\r\nfrom ast import literal_eval\r\ncon = duckdb.connect(\"/tmp/test.duckdb\")\r\ncon.execute(\"CREATE OR REPLACE TABLE tbl (n TEXT[]);\")\r\ndf = pd.read_csv(f\"bad.csv\")\r\ndf[\"n\"] = df[\"n\"].apply(literal_eval)\r\ne_df = df[:1046]\r\ni_df = df[1046:]\r\nfor df in [\"e_df\", \"e_df\", \"i_df\"]:\r\n    con.execute(f\"INSERT INTO tbl (n) SELECT n FROM {df}\")\r\n```\r\n\r\n[bad.csv](https://github.com/duckdb/duckdb/files/11511771/bad.csv)\r\n\r\n\r\n\r\n### OS:\r\n\r\nOSX M1, python platform macOS-10.16-x86_64-i386-64bit\r\n\r\n### DuckDB Version:\r\n\r\n0.8\r\n\r\n### DuckDB Client:\r\n\r\nPython 3.10.9\r\n\r\n### Full Name:\r\n\r\neaubin\r\n\r\n### Affiliation:\r\n\r\nNone\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\nEXC_BAD_ACCESS during insert\n### What happens?\r\n\r\nInserting text[] repeatedly segfaults giving a EXC_BAD_ACCESS error.\r\n\r\n```\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x636c70706c706469)\r\n    frame #0: 0x00007ff81ba4abc6 libsystem_platform.dylib`_platform_memmove$VARIANT$Rosetta + 294\r\nlibsystem_platform.dylib`:\r\n->  0x7ff81ba4abc6 <+294>: movq   (%rsi), %r12\r\n    0x7ff81ba4abc9 <+297>: movq   0x8(%rsi), %r13\r\n    0x7ff81ba4abcd <+301>: movq   0x10(%rsi), %r14\r\n    0x7ff81ba4abd1 <+305>: movq   0x18(%rsi), %r15\r\nTarget 0: (python) stopped.\r\n(lldb) bt\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x636c70706c706469)\r\n  * frame #0: 0x00007ff81ba4abc6 libsystem_platform.dylib`_platform_memmove$VARIANT$Rosetta + 294\r\n    frame #1: 0x0000000128993dec duckdb.cpython-310-darwin.so`duckdb::BufferedFileWriter::WriteData(unsigned char const*, unsigned long long) + 92\r\n    frame #2: 0x00000001289c25ee duckdb.cpython-310-darwin.so`duckdb::Vector::Serialize(unsigned long long, duckdb::Serializer&) + 1038\r\n    frame #3: 0x00000001289c28ab duckdb.cpython-310-darwin.so`duckdb::Vector::Serialize(unsigned long long, duckdb::Serializer&) + 1739\r\n    frame #4: 0x00000001289c21a5 duckdb.cpython-310-darwin.so`duckdb::DataChunk::Serialize(duckdb::Serializer&) + 245\r\n    frame #5: 0x0000000129742095 duckdb.cpython-310-darwin.so`std::__1::__function::__func<duckdb::DataTable::WriteToLog(duckdb::WriteAheadLog&, unsigned long long, unsigned long long)::$_14, std::__1::allocator<duckdb::DataTable::WriteToLog(duckdb::WriteAheadLog&, unsigned long long, unsigned long long)::$_14>, void (duckdb::DataChunk&)>::operator()(duckdb::DataChunk&) + 85\r\n    frame #6: 0x0000000129725133 duckdb.cpython-310-darwin.so`duckdb::DataTable::ScanTableSegment(unsigned long long, unsigned long long, std::__1::function<void (duckdb::DataChunk&)> const&) + 1475\r\n    frame #7: 0x00000001297253b7 duckdb.cpython-310-darwin.so`duckdb::DataTable::WriteToLog(duckdb::WriteAheadLog&, unsigned long long, unsigned long long) + 135\r\n    frame #8: 0x00000001297e37ad duckdb.cpython-310-darwin.so`void duckdb::CommitState::CommitEntry<true>(duckdb::UndoFlags, unsigned char*) + 365\r\n    frame #9: 0x00000001297e142d duckdb.cpython-310-darwin.so`duckdb::UndoBuffer::Commit(duckdb::UndoBuffer::IteratorState&, duckdb::optional_ptr<duckdb::WriteAheadLog>, unsigned long long) + 189\r\n    frame #10: 0x00000001297e079c duckdb.cpython-310-darwin.so`duckdb::DuckTransaction::Commit(duckdb::AttachedDatabase&, unsigned long long, bool) + 172\r\n    frame #11: 0x00000001297e01b4 duckdb.cpython-310-darwin.so`duckdb::DuckTransactionManager::CommitTransaction(duckdb::ClientContext&, duckdb::Transaction*) + 196\r\n    frame #12: 0x00000001297e23a0 duckdb.cpython-310-darwin.so`duckdb::MetaTransaction::Commit() + 256\r\n    frame #13: 0x00000001297e2fd0 duckdb.cpython-310-darwin.so`duckdb::TransactionContext::Commit() + 96\r\n    frame #14: 0x0000000129486865 duckdb.cpython-310-darwin.so`duckdb::ClientContext::EndQueryInternal(duckdb::ClientContextLock&, bool, bool) + 965\r\n    frame #15: 0x0000000129485332 duckdb.cpython-310-darwin.so`duckdb::ClientContext::CleanupInternal(duckdb::ClientContextLock&, duckdb::BaseQueryResult*, bool) + 386\r\n    frame #16: 0x00000001294856db duckdb.cpython-310-darwin.so`duckdb::ClientContext::FetchInternal(duckdb::ClientContextLock&, duckdb::Executor&, duckdb::BaseQueryResult&) + 91\r\n    frame #17: 0x00000001294878b9 duckdb.cpython-310-darwin.so`duckdb::ClientContext::FetchResultInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&) + 793\r\n    frame #18: 0x000000012948d8a7 duckdb.cpython-310-darwin.so`duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&) + 87\r\n    frame #19: 0x00000001294909c2 duckdb.cpython-310-darwin.so`duckdb::PendingQueryResult::Execute() + 50\r\n    frame #20: 0x000000012987e5c9 duckdb.cpython-310-darwin.so`duckdb::DuckDBPyConnection::CompletePendingQuery(duckdb::PendingQueryResult&) + 121\r\n    frame #21: 0x000000012987f5df duckdb.cpython-310-darwin.so`duckdb::DuckDBPyConnection::ExecuteInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool) + 1903\r\n    frame #22: 0x000000012987e392 duckdb.cpython-310-darwin.so`duckdb::DuckDBPyConnection::Execute(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool) + 50\r\n    frame #23: 0x000000012989ac50 duckdb.cpython-310-darwin.so`std::__1::shared_ptr<duckdb::DuckDBPyConnection> pybind11::detail::argument_loader<duckdb::DuckDBPyConnection*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool>::call_impl<std::__1::shared_ptr<duckdb::DuckDBPyConnection>, pybind11::cpp_function::cpp_function<std::__1::shared_ptr<duckdb::DuckDBPyConnection>, duckdb::DuckDBPyConnection, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool, pybind11::name, pybind11::is_method, pybind11::sibling, char [86], pybind11::arg, pybind11::arg_v, pybind11::arg_v>(std::__1::shared_ptr<duckdb::DuckDBPyConnection> (duckdb::DuckDBPyConnection::*)(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [86], pybind11::arg const&, pybind11::arg_v const&, pybind11::arg_v const&)::'lambda'(duckdb::DuckDBPyConnection*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool)&, 0ul, 1ul, 2ul, 3ul, pybind11::detail::void_type>(duckdb::DuckDBPyConnection&&, pybind11::detail::index_sequence<0ul, 1ul, 2ul, 3ul>, pybind11::detail::void_type&&) && + 80\r\n    frame #24: 0x000000012989a98f duckdb.cpython-310-darwin.so`void pybind11::cpp_function::initialize<pybind11::cpp_function::cpp_function<std::__1::shared_ptr<duckdb::DuckDBPyConnection>, duckdb::DuckDBPyConnection, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool, pybind11::name, pybind11::is_method, pybind11::sibling, char [86], pybind11::arg, pybind11::arg_v, pybind11::arg_v>(std::__1::shared_ptr<duckdb::DuckDBPyConnection> (duckdb::DuckDBPyConnection::*)(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [86], pybind11::arg const&, pybind11::arg_v const&, pybind11::arg_v const&)::'lambda'(duckdb::DuckDBPyConnection*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool), std::__1::shared_ptr<duckdb::DuckDBPyConnection>, duckdb::DuckDBPyConnection*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool, pybind11::name, pybind11::is_method, pybind11::sibling, char [86], pybind11::arg, pybind11::arg_v, pybind11::arg_v>(std::__1::shared_ptr<duckdb::DuckDBPyConnection>&&, duckdb::DuckDBPyConnection (*)(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::object, bool), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [86], pybind11::arg const&, pybind11::arg_v const&, pybind11::arg_v const&)::'lambda'(pybind11::detail::function_call&)::operator()(pybind11::detail::function_call&) const + 111\r\n    frame #25: 0x00000001297f00b3 duckdb.cpython-310-darwin.so`pybind11::cpp_function::dispatcher(_object*, _object*, _object*) + 4723\r\n    frame #26: 0x00000001000c8094 python`cfunction_call + 52\r\n    frame #27: 0x00000001000686f1 python`_PyObject_MakeTpCall + 305\r\n    frame #28: 0x000000010006e83e python`method_vectorcall + 686\r\n    frame #29: 0x000000010018bc28 python`_PyEval_EvalFrameDefault + 49608\r\n    frame #30: 0x000000010017dcc1 python`_PyEval_Vector + 545\r\n    frame #31: 0x0000000100206470 python`run_mod + 240\r\n    frame #32: 0x0000000100206235 python`pyrun_file + 133\r\n    frame #33: 0x0000000100205d86 python`_PyRun_SimpleFileObject + 422\r\n    frame #34: 0x00000001002056af python`_PyRun_AnyFileObject + 143\r\n    frame #35: 0x000000010022a988 python`pymain_run_file_obj + 216\r\n    frame #36: 0x000000010022a315 python`pymain_run_file + 85\r\n    frame #37: 0x0000000100229b48 python`pymain_run_python + 376\r\n    frame #38: 0x0000000100229985 python`Py_RunMain + 37\r\n    frame #39: 0x00000001000018d8 python`main + 56\r\n    frame #40: 0x00000002003c741f dyld`start + 1903\r\n\r\n```\r\n\r\n### To Reproduce\r\n\r\nI can reproduce almost always reproduce the segfault with the following, but not if I shrink the csv or do not repeat the insert.\r\n\r\n```python\r\nimport duckdb\r\nfrom ast import literal_eval\r\ncon = duckdb.connect(\"/tmp/test.duckdb\")\r\ncon.execute(\"CREATE OR REPLACE TABLE tbl (n TEXT[]);\")\r\ndf = pd.read_csv(f\"bad.csv\")\r\ndf[\"n\"] = df[\"n\"].apply(literal_eval)\r\ne_df = df[:1046]\r\ni_df = df[1046:]\r\nfor df in [\"e_df\", \"e_df\", \"i_df\"]:\r\n    con.execute(f\"INSERT INTO tbl (n) SELECT n FROM {df}\")\r\n```\r\n\r\n[bad.csv](https://github.com/duckdb/duckdb/files/11511771/bad.csv)\r\n\r\n\r\n\r\n### OS:\r\n\r\nOSX M1, python platform macOS-10.16-x86_64-i386-64bit\r\n\r\n### DuckDB Version:\r\n\r\n0.8\r\n\r\n### DuckDB Client:\r\n\r\nPython 3.10.9\r\n\r\n### Full Name:\r\n\r\neaubin\r\n\r\n### Affiliation:\r\n\r\nNone\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2023-05-19T07:48:19Z"
}