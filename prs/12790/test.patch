diff --git a/test/api/CMakeLists.txt b/test/api/CMakeLists.txt
index 49cbd7aa7353..a8fe73c493c3 100644
--- a/test/api/CMakeLists.txt
+++ b/test/api/CMakeLists.txt
@@ -8,6 +8,7 @@ set(TEST_API_OBJECTS
     test_api.cpp
     test_config.cpp
     test_custom_allocator.cpp
+    test_extension_setting_autoload.cpp
     test_instance_cache.cpp
     test_results.cpp
     test_reset.cpp
diff --git a/test/api/capi/test_capi.cpp b/test/api/capi/test_capi.cpp
index ae884be3145a..801b0d229b6b 100644
--- a/test/api/capi/test_capi.cpp
+++ b/test/api/capi/test_capi.cpp
@@ -567,7 +567,7 @@ TEST_CASE("Test C API config", "[capi]") {
 	REQUIRE(duckdb_set_config(config, "aaaa_invalidoption", "read_only") == DuckDBSuccess);
 	REQUIRE(((DBConfig *)config)->options.unrecognized_options["aaaa_invalidoption"] == "read_only");
 	REQUIRE(duckdb_open_ext(dbdir.c_str(), &db, config, &error) == DuckDBError);
-	REQUIRE_THAT(error, Catch::Matchers::Contains("Unrecognized configuration property"));
+	REQUIRE_THAT(error, Catch::Matchers::Contains("The following options were not recognized"));
 	duckdb_free(error);
 
 	// we can destroy the config right after duckdb_open
diff --git a/test/api/test_extension_setting_autoload.cpp b/test/api/test_extension_setting_autoload.cpp
new file mode 100644
index 000000000000..add13fc929b8
--- /dev/null
+++ b/test/api/test_extension_setting_autoload.cpp
@@ -0,0 +1,31 @@
+#include "catch.hpp"
+#include "test_helpers.hpp"
+
+#include <iostream>
+#include <map>
+#include <set>
+
+using namespace duckdb;
+using namespace std;
+
+TEST_CASE("Test autoload of extension settings", "[api]") {
+	DBConfig config;
+	config.SetOptionByName("timezone", "America/Los_Angeles");
+
+	config.options.allow_unsigned_extensions = true;
+	config.options.autoload_known_extensions = true;
+	auto env_var = std::getenv("LOCAL_EXTENSION_REPO");
+	if (!env_var) {
+		return;
+	}
+	config.options.autoinstall_extension_repo = std::string(env_var);
+	REQUIRE(config.options.unrecognized_options.count("timezone"));
+
+	// Create a connection
+	duckdb::unique_ptr<DuckDB> db;
+	REQUIRE_NOTHROW(db = make_uniq<DuckDB>(nullptr, &config));
+	Connection con(*db);
+
+	auto res = con.Query("select current_setting('timezone')");
+	REQUIRE(CHECK_COLUMN(res, 0, {Value("America/Los_Angeles")}));
+}
diff --git a/tools/pythonpkg/tests/fast/api/test_config.py b/tools/pythonpkg/tests/fast/api/test_config.py
index d7963c6b9df4..b9772297163a 100644
--- a/tools/pythonpkg/tests/fast/api/test_config.py
+++ b/tools/pythonpkg/tests/fast/api/test_config.py
@@ -4,6 +4,7 @@
 import numpy
 import pytest
 import re
+import os
 from conftest import NumpyPandas, ArrowPandas
 
 
@@ -45,6 +46,13 @@ def test_external_access(self, duckdb_cursor, pandas):
             query_failed = True
         assert query_failed == True
 
+    def test_extension_setting(self):
+        repository = os.environ.get('LOCAL_EXTENSION_REPO')
+        if not repository:
+            return
+        con = duckdb.connect(config={"TimeZone": "UTC", 'autoinstall_extension_repository': repository})
+        assert 'UTC' == con.sql("select current_setting('TimeZone')").fetchone()[0]
+
     def test_unrecognized_option(self, duckdb_cursor):
         success = True
         try:
