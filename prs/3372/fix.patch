diff --git a/src/common/exception_format_value.cpp b/src/common/exception_format_value.cpp
index 701eecf3c4fa..f5a5721ad9fc 100644
--- a/src/common/exception_format_value.cpp
+++ b/src/common/exception_format_value.cpp
@@ -2,6 +2,7 @@
 #include "duckdb/common/types.hpp"
 #include "fmt/format.h"
 #include "fmt/printf.h"
+#include "duckdb/common/types/hugeint.hpp"
 
 namespace duckdb {
 
@@ -11,6 +12,9 @@ ExceptionFormatValue::ExceptionFormatValue(double dbl_val)
 ExceptionFormatValue::ExceptionFormatValue(int64_t int_val)
     : type(ExceptionFormatValueType::FORMAT_VALUE_TYPE_INTEGER), int_val(int_val) {
 }
+ExceptionFormatValue::ExceptionFormatValue(hugeint_t huge_val)
+    : type(ExceptionFormatValueType::FORMAT_VALUE_TYPE_STRING), str_val(Hugeint::ToString(huge_val)) {
+}
 ExceptionFormatValue::ExceptionFormatValue(string str_val)
     : type(ExceptionFormatValueType::FORMAT_VALUE_TYPE_STRING), str_val(move(str_val)) {
 }
@@ -44,6 +48,10 @@ template <>
 ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(char *value) {
 	return ExceptionFormatValue(string(value));
 }
+template <>
+ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(hugeint_t value) {
+	return ExceptionFormatValue(value);
+}
 
 string ExceptionFormatValue::Format(const string &msg, vector<ExceptionFormatValue> &values) {
 	std::vector<duckdb_fmt::basic_format_arg<duckdb_fmt::printf_context>> format_args;
diff --git a/src/common/types/cast_helpers.cpp b/src/common/types/cast_helpers.cpp
index 6cd95dab5faf..5011b674bd07 100644
--- a/src/common/types/cast_helpers.cpp
+++ b/src/common/types/cast_helpers.cpp
@@ -1,4 +1,5 @@
 #include "duckdb/common/types/cast_helpers.hpp"
+#include "duckdb/common/types/hugeint.hpp"
 
 namespace duckdb {
 
@@ -101,4 +102,9 @@ int NumericHelper::UnsignedLength(uint64_t value) {
 	}
 }
 
+template <>
+std::string NumericHelper::ToString(hugeint_t value) {
+	return Hugeint::ToString(value);
+}
+
 } // namespace duckdb
diff --git a/src/function/scalar/operators/bitwise.cpp b/src/function/scalar/operators/bitwise.cpp
index 854d94e255b4..d6a7f9f26d9c 100644
--- a/src/function/scalar/operators/bitwise.cpp
+++ b/src/function/scalar/operators/bitwise.cpp
@@ -1,5 +1,6 @@
 #include "duckdb/function/scalar/operators.hpp"
 #include "duckdb/common/vector_operations/vector_operations.hpp"
+#include "duckdb/common/types/cast_helpers.hpp"
 
 namespace duckdb {
 
@@ -137,15 +138,32 @@ void BitwiseXorFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 // << [bitwise_left_shift]
 //===--------------------------------------------------------------------===//
-template <class T>
-bool ShiftInRange(T shift) {
-	return shift >= 0 && shift < T(sizeof(T) * 8);
-}
 
 struct BitwiseShiftLeftOperator {
 	template <class TA, class TB, class TR>
 	static inline TR Operation(TA input, TB shift) {
-		return ShiftInRange(shift) ? input << shift : 0;
+		TA max_shift = TA(sizeof(TA) * 8);
+		if (input < 0) {
+			throw OutOfRangeException("Cannot left-shift negative number %s", NumericHelper::ToString(input));
+		}
+		if (shift < 0) {
+			throw OutOfRangeException("Cannot left-shift by negative number %s", NumericHelper::ToString(shift));
+		}
+		if (shift >= max_shift) {
+			if (input == 0) {
+				return 0;
+			}
+			throw OutOfRangeException("Left-shift value %s is out of range", NumericHelper::ToString(shift));
+		}
+		if (shift == 0) {
+			return input;
+		}
+		TA max_value = (TA(1) << (max_shift - shift - 1));
+		if (input >= max_value) {
+			throw OutOfRangeException("Overflow in left shift (%s << %s)", NumericHelper::ToString(input),
+			                          NumericHelper::ToString(shift));
+		}
+		return input << shift;
 	}
 };
 
@@ -161,10 +179,15 @@ void LeftShiftFun::RegisterFunction(BuiltinFunctions &set) {
 //===--------------------------------------------------------------------===//
 // >> [bitwise_right_shift]
 //===--------------------------------------------------------------------===//
+template <class T>
+bool RightShiftInRange(T shift) {
+	return shift >= 0 && shift < T(sizeof(T) * 8);
+}
+
 struct BitwiseShiftRightOperator {
 	template <class TA, class TB, class TR>
 	static inline TR Operation(TA input, TB shift) {
-		return ShiftInRange(shift) ? input >> shift : 0;
+		return RightShiftInRange(shift) ? input >> shift : 0;
 	}
 };
 
diff --git a/src/include/duckdb/common/exception_format_value.hpp b/src/include/duckdb/common/exception_format_value.hpp
index 83492341a2dc..969da298bed5 100644
--- a/src/include/duckdb/common/exception_format_value.hpp
+++ b/src/include/duckdb/common/exception_format_value.hpp
@@ -20,9 +20,10 @@ enum class ExceptionFormatValueType : uint8_t {
 };
 
 struct ExceptionFormatValue {
-	DUCKDB_API ExceptionFormatValue(double dbl_val);  // NOLINT
-	DUCKDB_API ExceptionFormatValue(int64_t int_val); // NOLINT
-	DUCKDB_API ExceptionFormatValue(string str_val);  // NOLINT
+	DUCKDB_API ExceptionFormatValue(double dbl_val);   // NOLINT
+	DUCKDB_API ExceptionFormatValue(int64_t int_val);  // NOLINT
+	DUCKDB_API ExceptionFormatValue(string str_val);   // NOLINT
+	DUCKDB_API ExceptionFormatValue(hugeint_t hg_val); // NOLINT
 
 	ExceptionFormatValueType type;
 
@@ -52,5 +53,7 @@ template <>
 DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(const char *value);
 template <>
 DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(char *value);
+template <>
+DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(hugeint_t value);
 
 } // namespace duckdb
diff --git a/src/include/duckdb/common/types/cast_helpers.hpp b/src/include/duckdb/common/types/cast_helpers.hpp
index a54b3e6e7c86..b69d8a66bc01 100644
--- a/src/include/duckdb/common/types/cast_helpers.hpp
+++ b/src/include/duckdb/common/types/cast_helpers.hpp
@@ -71,6 +71,11 @@ class NumericHelper {
 		result.Finalize();
 		return result;
 	}
+
+	template <class T>
+	static std::string ToString(T value) {
+		return std::to_string(value);
+	}
 };
 
 template <>
@@ -82,6 +87,9 @@ int NumericHelper::UnsignedLength(uint32_t value);
 template <>
 int NumericHelper::UnsignedLength(uint64_t value);
 
+template <>
+std::string NumericHelper::ToString(hugeint_t value);
+
 struct DecimalToString {
 	template <class SIGNED, class UNSIGNED>
 	static int DecimalLength(SIGNED value, uint8_t scale) {
