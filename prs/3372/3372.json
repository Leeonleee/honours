{
  "repo": "duckdb/duckdb",
  "pull_number": 3372,
  "instance_id": "duckdb__duckdb-3372",
  "issue_numbers": [
    "3365",
    "3365"
  ],
  "base_commit": "4fefffeac3e9b76755bf74319b7a7c06ae404b3e",
  "patch": "diff --git a/src/common/exception_format_value.cpp b/src/common/exception_format_value.cpp\nindex 701eecf3c4fa..f5a5721ad9fc 100644\n--- a/src/common/exception_format_value.cpp\n+++ b/src/common/exception_format_value.cpp\n@@ -2,6 +2,7 @@\n #include \"duckdb/common/types.hpp\"\n #include \"fmt/format.h\"\n #include \"fmt/printf.h\"\n+#include \"duckdb/common/types/hugeint.hpp\"\n \n namespace duckdb {\n \n@@ -11,6 +12,9 @@ ExceptionFormatValue::ExceptionFormatValue(double dbl_val)\n ExceptionFormatValue::ExceptionFormatValue(int64_t int_val)\n     : type(ExceptionFormatValueType::FORMAT_VALUE_TYPE_INTEGER), int_val(int_val) {\n }\n+ExceptionFormatValue::ExceptionFormatValue(hugeint_t huge_val)\n+    : type(ExceptionFormatValueType::FORMAT_VALUE_TYPE_STRING), str_val(Hugeint::ToString(huge_val)) {\n+}\n ExceptionFormatValue::ExceptionFormatValue(string str_val)\n     : type(ExceptionFormatValueType::FORMAT_VALUE_TYPE_STRING), str_val(move(str_val)) {\n }\n@@ -44,6 +48,10 @@ template <>\n ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(char *value) {\n \treturn ExceptionFormatValue(string(value));\n }\n+template <>\n+ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(hugeint_t value) {\n+\treturn ExceptionFormatValue(value);\n+}\n \n string ExceptionFormatValue::Format(const string &msg, vector<ExceptionFormatValue> &values) {\n \tstd::vector<duckdb_fmt::basic_format_arg<duckdb_fmt::printf_context>> format_args;\ndiff --git a/src/common/types/cast_helpers.cpp b/src/common/types/cast_helpers.cpp\nindex 6cd95dab5faf..5011b674bd07 100644\n--- a/src/common/types/cast_helpers.cpp\n+++ b/src/common/types/cast_helpers.cpp\n@@ -1,4 +1,5 @@\n #include \"duckdb/common/types/cast_helpers.hpp\"\n+#include \"duckdb/common/types/hugeint.hpp\"\n \n namespace duckdb {\n \n@@ -101,4 +102,9 @@ int NumericHelper::UnsignedLength(uint64_t value) {\n \t}\n }\n \n+template <>\n+std::string NumericHelper::ToString(hugeint_t value) {\n+\treturn Hugeint::ToString(value);\n+}\n+\n } // namespace duckdb\ndiff --git a/src/function/scalar/operators/bitwise.cpp b/src/function/scalar/operators/bitwise.cpp\nindex 854d94e255b4..d6a7f9f26d9c 100644\n--- a/src/function/scalar/operators/bitwise.cpp\n+++ b/src/function/scalar/operators/bitwise.cpp\n@@ -1,5 +1,6 @@\n #include \"duckdb/function/scalar/operators.hpp\"\n #include \"duckdb/common/vector_operations/vector_operations.hpp\"\n+#include \"duckdb/common/types/cast_helpers.hpp\"\n \n namespace duckdb {\n \n@@ -137,15 +138,32 @@ void BitwiseXorFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n // << [bitwise_left_shift]\n //===--------------------------------------------------------------------===//\n-template <class T>\n-bool ShiftInRange(T shift) {\n-\treturn shift >= 0 && shift < T(sizeof(T) * 8);\n-}\n \n struct BitwiseShiftLeftOperator {\n \ttemplate <class TA, class TB, class TR>\n \tstatic inline TR Operation(TA input, TB shift) {\n-\t\treturn ShiftInRange(shift) ? input << shift : 0;\n+\t\tTA max_shift = TA(sizeof(TA) * 8);\n+\t\tif (input < 0) {\n+\t\t\tthrow OutOfRangeException(\"Cannot left-shift negative number %s\", NumericHelper::ToString(input));\n+\t\t}\n+\t\tif (shift < 0) {\n+\t\t\tthrow OutOfRangeException(\"Cannot left-shift by negative number %s\", NumericHelper::ToString(shift));\n+\t\t}\n+\t\tif (shift >= max_shift) {\n+\t\t\tif (input == 0) {\n+\t\t\t\treturn 0;\n+\t\t\t}\n+\t\t\tthrow OutOfRangeException(\"Left-shift value %s is out of range\", NumericHelper::ToString(shift));\n+\t\t}\n+\t\tif (shift == 0) {\n+\t\t\treturn input;\n+\t\t}\n+\t\tTA max_value = (TA(1) << (max_shift - shift - 1));\n+\t\tif (input >= max_value) {\n+\t\t\tthrow OutOfRangeException(\"Overflow in left shift (%s << %s)\", NumericHelper::ToString(input),\n+\t\t\t                          NumericHelper::ToString(shift));\n+\t\t}\n+\t\treturn input << shift;\n \t}\n };\n \n@@ -161,10 +179,15 @@ void LeftShiftFun::RegisterFunction(BuiltinFunctions &set) {\n //===--------------------------------------------------------------------===//\n // >> [bitwise_right_shift]\n //===--------------------------------------------------------------------===//\n+template <class T>\n+bool RightShiftInRange(T shift) {\n+\treturn shift >= 0 && shift < T(sizeof(T) * 8);\n+}\n+\n struct BitwiseShiftRightOperator {\n \ttemplate <class TA, class TB, class TR>\n \tstatic inline TR Operation(TA input, TB shift) {\n-\t\treturn ShiftInRange(shift) ? input >> shift : 0;\n+\t\treturn RightShiftInRange(shift) ? input >> shift : 0;\n \t}\n };\n \ndiff --git a/src/include/duckdb/common/exception_format_value.hpp b/src/include/duckdb/common/exception_format_value.hpp\nindex 83492341a2dc..969da298bed5 100644\n--- a/src/include/duckdb/common/exception_format_value.hpp\n+++ b/src/include/duckdb/common/exception_format_value.hpp\n@@ -20,9 +20,10 @@ enum class ExceptionFormatValueType : uint8_t {\n };\n \n struct ExceptionFormatValue {\n-\tDUCKDB_API ExceptionFormatValue(double dbl_val);  // NOLINT\n-\tDUCKDB_API ExceptionFormatValue(int64_t int_val); // NOLINT\n-\tDUCKDB_API ExceptionFormatValue(string str_val);  // NOLINT\n+\tDUCKDB_API ExceptionFormatValue(double dbl_val);   // NOLINT\n+\tDUCKDB_API ExceptionFormatValue(int64_t int_val);  // NOLINT\n+\tDUCKDB_API ExceptionFormatValue(string str_val);   // NOLINT\n+\tDUCKDB_API ExceptionFormatValue(hugeint_t hg_val); // NOLINT\n \n \tExceptionFormatValueType type;\n \n@@ -52,5 +53,7 @@ template <>\n DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(const char *value);\n template <>\n DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(char *value);\n+template <>\n+DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(hugeint_t value);\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/common/types/cast_helpers.hpp b/src/include/duckdb/common/types/cast_helpers.hpp\nindex a54b3e6e7c86..b69d8a66bc01 100644\n--- a/src/include/duckdb/common/types/cast_helpers.hpp\n+++ b/src/include/duckdb/common/types/cast_helpers.hpp\n@@ -71,6 +71,11 @@ class NumericHelper {\n \t\tresult.Finalize();\n \t\treturn result;\n \t}\n+\n+\ttemplate <class T>\n+\tstatic std::string ToString(T value) {\n+\t\treturn std::to_string(value);\n+\t}\n };\n \n template <>\n@@ -82,6 +87,9 @@ int NumericHelper::UnsignedLength(uint32_t value);\n template <>\n int NumericHelper::UnsignedLength(uint64_t value);\n \n+template <>\n+std::string NumericHelper::ToString(hugeint_t value);\n+\n struct DecimalToString {\n \ttemplate <class SIGNED, class UNSIGNED>\n \tstatic int DecimalLength(SIGNED value, uint8_t scale) {\n",
  "test_patch": "diff --git a/test/issues/fuzz/bitwise_shift_overflow.test b/test/issues/fuzz/bitwise_shift_overflow.test\nnew file mode 100644\nindex 000000000000..6990f12893e7\n--- /dev/null\n+++ b/test/issues/fuzz/bitwise_shift_overflow.test\n@@ -0,0 +1,79 @@\n+# name: test/issues/fuzz/bitwise_shift_overflow.test\n+# description: Issue #3365: Undefined behavior at bitwise.cpp:148:38\n+# group: [fuzz]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# issue tests\n+statement error\n+SELECT 1000::bigint<<55;\n+\n+statement error\n+SELECT 256::bigint<<55;\n+\n+query I\n+SELECT 255::bigint<<55;\n+----\n+9187343239835811840\n+\n+query I\n+SELECT 0::bigint<<999;\n+----\n+0\n+\n+# all integer types\n+# tinyint\n+statement error\n+SELECT 10::tinyint<<4::tinyint;\n+\n+query I\n+SELECT 10::tinyint<<3::tinyint;\n+----\n+80\n+\n+# cannot left shift negative numbers\n+statement error\n+SELECT (-128)::tinyint<<0::tinyint;\n+\n+statement error\n+SELECT (-10)::tinyint<<4::tinyint;\n+\n+statement error\n+SELECT (-10)::tinyint<<3::tinyint;\n+\n+# smallint\n+statement error\n+SELECT 1000::smallint<<6::smallint;\n+\n+query I\n+SELECT 1000::smallint<<5::smallint;\n+----\n+32000\n+\n+# integer\n+statement error\n+SELECT 1000::integer<<22::integer;\n+\n+query I\n+SELECT 1000::integer<<21::integer;\n+----\n+2097152000\n+\n+# bigint\n+statement error\n+SELECT 1000::bigint<<54::bigint;\n+\n+query I\n+SELECT 1000::bigint<<53::bigint;\n+----\n+9007199254740992000\n+\n+# hugeint\n+statement error\n+SELECT 1000::hugeint<<118::hugeint;\n+\n+query I\n+SELECT 1000::hugeint<<117::hugeint;\n+----\n+166153499473114484112975882535043072000\ndiff --git a/test/issues/rigger/test_515.test b/test/issues/rigger/test_515.test\nindex 3c295379f06a..b5202897fdfd 100644\n--- a/test/issues/rigger/test_515.test\n+++ b/test/issues/rigger/test_515.test\n@@ -21,18 +21,11 @@ INSERT INTO t1(c1, c0) VALUES (1, 1);\n statement ok\n INSERT INTO t0 VALUES (0);\n \n-query IRI\n+statement error\n SELECT * FROM t1 JOIN t0 ON t1.c1 WHERE NOT (t1.c0<<-1);\n-----\n-1\t1.000000\t0\n \n-query IRI\n+statement error\n SELECT * FROM t1 JOIN t0 ON t1.c1 WHERE (t1.c0<<-1);\n-----\n \n-query T\n+statement error\n SELECT NOT (t1.c0<<-1) FROM t1;\n-----\n-1\n-1\n-\ndiff --git a/test/issues/rigger/test_538.test b/test/issues/rigger/test_538.test\nindex 2c78e5098f5b..c4b2610ac55b 100644\n--- a/test/issues/rigger/test_538.test\n+++ b/test/issues/rigger/test_538.test\n@@ -15,13 +15,8 @@ INSERT INTO t0(c0) VALUES (-1);\n statement ok\n INSERT INTO t0(c0) VALUES (0);\n \n-query T\n+statement error\n SELECT t0.c0 AND (t0.c0<<64) FROM t0;\n-----\n-0\n-0\n \n-query I\n+statement error\n SELECT * FROM t0 WHERE t0.c0 AND (t0.c0<<64);\n-----\n-\ndiff --git a/test/sql/function/operator/test_bitwise_ops.test b/test/sql/function/operator/test_bitwise_ops.test\nindex 13e4fe636adc..9f121ebf1652 100644\n--- a/test/sql/function/operator/test_bitwise_ops.test\n+++ b/test/sql/function/operator/test_bitwise_ops.test\n@@ -35,26 +35,18 @@ SELECT xor(1, 1), xor(1, 0), xor(0, 0), xor(NULL, 1), xor(1, NULL)\n ----\n 0\t1\t0\tNULL\tNULL\n \n-# out of range shifts return 0\n-query IIII\n+# out of range shifts throw an error\n+statement error\n SELECT 1::TINYINT << -1::TINYINT, 1::TINYINT >> -1::TINYINT, 1::TINYINT << 12::TINYINT, 1::TINYINT >> 12::TINYINT\n-----\n-0\t0\t0\t0\n \n-query IIII\n+statement error\n SELECT 1::SMALLINT << -1::SMALLINT, 1::SMALLINT >> -1::SMALLINT, 1::SMALLINT << 20::SMALLINT, 1::SMALLINT >> 20::SMALLINT\n-----\n-0\t0\t0\t0\n \n-query IIII\n+statement error\n SELECT 1::INT << -1::INT, 1::INT >> -1::INT, 1::INT << 40::INT, 1::INT >> 40::INT\n-----\n-0\t0\t0\t0\n \n-query IIII\n+statement error\n SELECT 1::BIGINT << -1::BIGINT, 1::BIGINT >> -1::BIGINT, 1::BIGINT << 1000::BIGINT, 1::BIGINT >> 1000::BIGINT\n-----\n-0\t0\t0\t0\n \n # test invalid bitwise ops\n statement error\ndiff --git a/test/sql/types/hugeint/test_hugeint_bitwise.test b/test/sql/types/hugeint/test_hugeint_bitwise.test\nindex c163323cf9a8..f21fd3d856a8 100644\n--- a/test/sql/types/hugeint/test_hugeint_bitwise.test\n+++ b/test/sql/types/hugeint/test_hugeint_bitwise.test\n@@ -16,10 +16,8 @@ SELECT 27::HUGEINT << 0\n ----\n 27\n \n-query I\n+statement error\n SELECT -27::HUGEINT << 1\n-----\n-0\n \n # large shifts\n query II\n@@ -40,15 +38,17 @@ select 1::HUGEINT << 64;\n \n \n # out of bounds shifts\n-query II\n-select 1::HUGEINT << 200, '1329227995784915872903807060280344576'::HUGEINT << 50;\n-----\n-0\t0\n+statement error\n+select 1::HUGEINT << 200\n \n-query II\n-SELECT 27::HUGEINT << -1, 100::HUGEINT << '1329227995784915872903807060280344576'::HUGEINT\n-----\n-0\t0\n+statement error\n+SELECT '1329227995784915872903807060280344576'::HUGEINT << 50;\n+\n+statement error\n+SELECT 27::HUGEINT << -1\n+\n+statement error\n+SELECT 100::HUGEINT << '1329227995784915872903807060280344576'::HUGEINT\n \n # right-shift\n query I\n@@ -147,12 +147,8 @@ select 1 >> 170141183460469231731687303715884105727::hugeint;\n ----\n 0\n \n-query I\n+statement error\n select 1::hugeint << 1000;\n-----\n-0\n \n-query I\n+statement error\n select 1 << 170141183460469231731687303715884105727::hugeint;\n-----\n-0\n",
  "problem_statement": "Undefined behavior at bitwise.cpp:148:38 (maybe not a bug)\n#### What happens?\r\n```\r\nduckdb/src/function/scalar/operators/bitwise.cpp:148:38: runtime error: left shift of 1000 by 55 places cannot be represented in type 'long'\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /root/duckdb/src/function/scalar/operators/bitwise.cpp:148:38 in\r\n```\r\n\r\n#### To Reproduce\r\n```sql\r\nSELECT MIN(1000::bigint<<55);\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: linux\r\n - DuckDB Version: v0.3.3-dev1399 7c5ba6c0e\r\n - DuckDB Client: /usr/local/bin/duckdb\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\nUndefined behavior at bitwise.cpp:148:38 (maybe not a bug)\n#### What happens?\r\n```\r\nduckdb/src/function/scalar/operators/bitwise.cpp:148:38: runtime error: left shift of 1000 by 55 places cannot be represented in type 'long'\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /root/duckdb/src/function/scalar/operators/bitwise.cpp:148:38 in\r\n```\r\n\r\n#### To Reproduce\r\n```sql\r\nSELECT MIN(1000::bigint<<55);\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: linux\r\n - DuckDB Version: v0.3.3-dev1399 7c5ba6c0e\r\n - DuckDB Client: /usr/local/bin/duckdb\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "\n",
  "created_at": "2022-04-03T19:38:39Z"
}