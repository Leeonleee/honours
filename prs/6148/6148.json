{
  "repo": "duckdb/duckdb",
  "pull_number": 6148,
  "instance_id": "duckdb__duckdb-6148",
  "issue_numbers": [
    "6136",
    "6136"
  ],
  "base_commit": "ff99a7364e38e36b52bb88250aa573127830c8a7",
  "patch": "diff --git a/src/execution/join_hashtable.cpp b/src/execution/join_hashtable.cpp\nindex f218a690cef1..4873ae35ae98 100644\n--- a/src/execution/join_hashtable.cpp\n+++ b/src/execution/join_hashtable.cpp\n@@ -444,7 +444,6 @@ void ScanStructure::Next(DataChunk &keys, DataChunk &left, DataChunk &result) {\n \tif (finished) {\n \t\treturn;\n \t}\n-\n \tswitch (ht.join_type) {\n \tcase JoinType::INNER:\n \tcase JoinType::RIGHT:\n@@ -823,10 +822,10 @@ void ScanStructure::NextSingleJoin(DataChunk &keys, DataChunk &input, DataChunk\n \tfor (idx_t i = 0; i < ht.build_types.size(); i++) {\n \t\tauto &vector = result.data[input.ColumnCount() + i];\n \t\t// set NULL entries for every entry that was not found\n-\t\tauto &mask = FlatVector::Validity(vector);\n-\t\tmask.SetAllInvalid(input.size());\n-\t\tfor (idx_t j = 0; j < result_count; j++) {\n-\t\t\tmask.SetValid(result_sel.get_index(j));\n+\t\tfor (idx_t j = 0; j < input.size(); j++) {\n+\t\t\tif (!found_match[j]) {\n+\t\t\t\tFlatVector::SetNull(vector, j, true);\n+\t\t\t}\n \t\t}\n \t\t// for the remaining values we fetch the values\n \t\tGatherResult(vector, result_sel, result_sel, result_count, i + ht.condition_types.size());\n",
  "test_patch": "diff --git a/test/sql/subquery/scalar/test_issue_6136.test b/test/sql/subquery/scalar/test_issue_6136.test\nnew file mode 100644\nindex 000000000000..7ba9ddc5cce8\n--- /dev/null\n+++ b/test/sql/subquery/scalar/test_issue_6136.test\n@@ -0,0 +1,48 @@\n+# name: test/sql/subquery/scalar/test_issue_6136.test\n+# description: Issue 6136: Segfault when running query with correlated subqueries\n+# group: [scalar]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table r as select * from values (1, 1, 'a', 'A'), (1, null, 'b', 'B'), (1, 2, 'c', 'C'), (2, null, 'd', 'D') t(ra, rb, x, y);\n+\n+statement ok\n+create table b as select * from values (1, 1, 1), (2, 1, 2), (3, 1, 3), (4, 1, null), (5, 2, 1), (6, 2, null), (7, 99, 99) t(id, ba, bb);\n+\n+\n+statement ok\n+select\n+  (select {'__matches': count(*)} from r where ba = ra and bb = rb group by ra, rb) as ref1,\n+from b;\n+\n+statement ok\n+select\n+  id,\n+  ba,\n+  bb,\n+  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where ba = ra and bb = rb group by ra, rb), {'x': null, 'y': null, '__matches': 0}) as ref1,\n+  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where ba = ra and (bb = rb or rb is null) group by ra, rb order by bb = rb), {'x': null, 'y': null, '__matches': 0}) as ref2,\n+  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where (ba = ra or ra is null) and (bb = rb or rb is null) group by ra, rb order by ba = ra, bb = rb), {'x': null, 'y': null, '__matches': 0}) as ref3,\n+  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where (ba = ra or ra is null) group by ra order by ba = ra), {'x': null, 'y': null, '__matches': 0}) as ref4,\n+from b;\n+\n+# postgres compatible variant\n+query IIIII\n+select\n+  id,\n+  ba,\n+  bb,\n+  coalesce((select ROW(min(x), min(y), count(*)) from r where ba = ra and bb = rb group by ra, rb), ROW(null, null, 0)) as ref1,\n+  coalesce((select ROW(min(x), min(y), count(*)) from r where (ba = ra or ra is null) group by ra order by ba = ra), ROW(null, null, 0)) as ref4\n+from b\n+ORDER BY 1, 2, 3;\n+----\n+1\t1\t1\t{'min(x)': a, 'min(y)': A, 'count_star()': 1}\t{'min(x)': a, 'min(y)': A, 'count_star()': 3}\n+2\t1\t2\t{'min(x)': c, 'min(y)': C, 'count_star()': 1}\t{'min(x)': a, 'min(y)': A, 'count_star()': 3}\n+3\t1\t3\t{'min(x)': NULL, 'min(y)': NULL, 'count_star()': 0}\t{'min(x)': a, 'min(y)': A, 'count_star()': 3}\n+4\t1\tNULL\t{'min(x)': NULL, 'min(y)': NULL, 'count_star()': 0}\t{'min(x)': a, 'min(y)': A, 'count_star()': 3}\n+5\t2\t1\t{'min(x)': NULL, 'min(y)': NULL, 'count_star()': 0}\t{'min(x)': d, 'min(y)': D, 'count_star()': 1}\n+6\t2\tNULL\t{'min(x)': NULL, 'min(y)': NULL, 'count_star()': 0}\t{'min(x)': d, 'min(y)': D, 'count_star()': 1}\n+7\t99\t99\t{'min(x)': NULL, 'min(y)': NULL, 'count_star()': 0}\t{'min(x)': NULL, 'min(y)': NULL, 'count_star()': 0}\n",
  "problem_statement": "Segfault when running query with correlated subqueries\n### What happens?\n\nWhen running the queries below in the DuckDB shell, the DuckDB shell occasionally segfaults. I expect DuckDB to not segfault!\n\n### To Reproduce\n\nSetup\u2014run this once in a DuckDB shell:\r\n```sql\r\ncreate table r as select * from values (1, 1, 'a', 'A'), (1, null, 'b', 'B'), (1, 2, 'c', 'C'), (2, null, 'd', 'D') t(ra, rb, x, y);\r\ncreate table b as select * from values (1, 1, 1), (2, 1, 2), (3, 1, 3), (4, 1, null), (5, 2, 1), (6, 2, null), (7, 99, 99) t(id, ba, bb);\r\n```\r\n\r\nRepeatedly (for me, it happens on the 8th time; I have another query that seems to consistently error the second time it is run)\u2014run this in the DuckDB shell:\r\n```sql\r\nselect\r\n  id,\r\n  ba,\r\n  bb,\r\n  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where ba = ra and bb = rb group by ra, rb), {'x': null, 'y': null, '__matches': 0}) as ref1,\r\n  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where ba = ra and (bb = rb or rb is null) group by ra, rb order by bb = rb), {'x': null, 'y': null, '__matches': 0}) as ref2,\r\n  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where (ba = ra or ra is null) and (bb = rb or rb is null) group by ra, rb order by ba = ra, bb = rb), {'x': null, 'y': null, '__matches': 0}) as ref3,\r\n  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where (ba = ra or ra is null) group by ra order by ba = ra), {'x': null, 'y': null, '__matches': 0}) as ref4,\r\nfrom b;\r\n```\n\n### OS:\n\nOS X, M1\n\n### DuckDB Version:\n\n0.6.1 and master (84fb676e)\n\n### DuckDB Client:\n\nshell\n\n### Full Name:\n\nCarl Jackson\n\n### Affiliation:\n\nWatershed\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nSegfault when running query with correlated subqueries\n### What happens?\n\nWhen running the queries below in the DuckDB shell, the DuckDB shell occasionally segfaults. I expect DuckDB to not segfault!\n\n### To Reproduce\n\nSetup\u2014run this once in a DuckDB shell:\r\n```sql\r\ncreate table r as select * from values (1, 1, 'a', 'A'), (1, null, 'b', 'B'), (1, 2, 'c', 'C'), (2, null, 'd', 'D') t(ra, rb, x, y);\r\ncreate table b as select * from values (1, 1, 1), (2, 1, 2), (3, 1, 3), (4, 1, null), (5, 2, 1), (6, 2, null), (7, 99, 99) t(id, ba, bb);\r\n```\r\n\r\nRepeatedly (for me, it happens on the 8th time; I have another query that seems to consistently error the second time it is run)\u2014run this in the DuckDB shell:\r\n```sql\r\nselect\r\n  id,\r\n  ba,\r\n  bb,\r\n  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where ba = ra and bb = rb group by ra, rb), {'x': null, 'y': null, '__matches': 0}) as ref1,\r\n  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where ba = ra and (bb = rb or rb is null) group by ra, rb order by bb = rb), {'x': null, 'y': null, '__matches': 0}) as ref2,\r\n  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where (ba = ra or ra is null) and (bb = rb or rb is null) group by ra, rb order by ba = ra, bb = rb), {'x': null, 'y': null, '__matches': 0}) as ref3,\r\n  coalesce((select {'x': first(x), 'y': first(y), '__matches': count(*)} from r where (ba = ra or ra is null) group by ra order by ba = ra), {'x': null, 'y': null, '__matches': 0}) as ref4,\r\nfrom b;\r\n```\n\n### OS:\n\nOS X, M1\n\n### DuckDB Version:\n\n0.6.1 and master (84fb676e)\n\n### DuckDB Client:\n\nshell\n\n### Full Name:\n\nCarl Jackson\n\n### Affiliation:\n\nWatershed\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2023-02-08T15:43:04Z"
}