You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
The Leaf Node of ART needs to be shrunk dynamically.
Found in the comment: 

https://github.com/duckdb/duckdb/blob/7dd852e1dd7aa521e76cbf6f756da487e2e1a1cd/src/execution/index/art/leaf.cpp#L27

The leaf node is for the values having the same key. (each prefix byte of the key is the same).
The idea is similar to a C++'s STL `std::multimap`.
However, it is not clear, how many duplicates can exist in a leaf node.
Thus, the leaf node should dynamically grow and shrink.
(The dynamical grow part is a must and is already implemented.)

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/execution/index/art/leaf.cpp]
1: #include "duckdb/execution/index/art/node.hpp"
2: #include "duckdb/execution/index/art/leaf.hpp"
3: 
4: #include <cstring>
5: 
6: namespace duckdb {
7: 
8: Leaf::Leaf(ART &art, unique_ptr<Key> value, row_t row_id) : Node(art, NodeType::NLeaf, 0) {
9: 	this->value = move(value);
10: 	this->capacity = 1;
11: 	this->row_ids = unique_ptr<row_t[]>(new row_t[this->capacity]);
12: 	this->row_ids[0] = row_id;
13: 	this->num_elements = 1;
14: }
15: 
16: void Leaf::Insert(row_t row_id) {
17: 	// Grow array
18: 	if (num_elements == capacity) {
19: 		auto new_row_id = unique_ptr<row_t[]>(new row_t[capacity * 2]);
20: 		memcpy(new_row_id.get(), row_ids.get(), capacity * sizeof(row_t));
21: 		capacity *= 2;
22: 		row_ids = move(new_row_id);
23: 	}
24: 	row_ids[num_elements++] = row_id;
25: }
26: 
27: //! TODO: Maybe shrink array dynamically?
28: void Leaf::Remove(row_t row_id) {
29: 	idx_t entry_offset = INVALID_INDEX;
30: 	for (idx_t i = 0; i < num_elements; i++) {
31: 		if (row_ids[i] == row_id) {
32: 			entry_offset = i;
33: 			break;
34: 		}
35: 	}
36: 	if (entry_offset == INVALID_INDEX) {
37: 		return;
38: 	}
39: 	num_elements--;
40: 	for (idx_t j = entry_offset; j < num_elements; j++) {
41: 		row_ids[j] = row_ids[j + 1];
42: 	}
43: }
44: 
45: } // namespace duckdb
[end of src/execution/index/art/leaf.cpp]
[start of src/execution/index/art/node16.cpp]
1: #include "duckdb/execution/index/art/node4.hpp"
2: #include "duckdb/execution/index/art/node16.hpp"
3: #include "duckdb/execution/index/art/node48.hpp"
4: 
5: #include <cstring>
6: 
7: namespace duckdb {
8: 
9: Node16::Node16(ART &art, size_t compression_length) : Node(art, NodeType::N16, compression_length) {
10: 	memset(key, 16, sizeof(key));
11: }
12: 
13: // TODO : In the future this can be performed using SIMD (#include <emmintrin.h>  x86 SSE intrinsics)
14: idx_t Node16::GetChildPos(uint8_t k) {
15: 	for (idx_t pos = 0; pos < count; pos++) {
16: 		if (key[pos] == k) {
17: 			return pos;
18: 		}
19: 	}
20: 	return Node::GetChildPos(k);
21: }
22: 
23: idx_t Node16::GetChildGreaterEqual(uint8_t k, bool &equal) {
24: 	for (idx_t pos = 0; pos < count; pos++) {
25: 		if (key[pos] >= k) {
26: 			if (key[pos] == k) {
27: 				equal = true;
28: 			} else {
29: 				equal = false;
30: 			}
31: 
32: 			return pos;
33: 		}
34: 	}
35: 	return Node::GetChildGreaterEqual(k, equal);
36: }
37: 
38: idx_t Node16::GetNextPos(idx_t pos) {
39: 	if (pos == INVALID_INDEX) {
40: 		return 0;
41: 	}
42: 	pos++;
43: 	return pos < count ? pos : INVALID_INDEX;
44: }
45: 
46: unique_ptr<Node> *Node16::GetChild(idx_t pos) {
47: 	D_ASSERT(pos < count);
48: 	return &child[pos];
49: }
50: 
51: idx_t Node16::GetMin() {
52: 	return 0;
53: }
54: 
55: void Node16::Insert(ART &art, unique_ptr<Node> &node, uint8_t key_byte, unique_ptr<Node> &child) {
56: 	Node16 *n = static_cast<Node16 *>(node.get());
57: 
58: 	if (n->count < 16) {
59: 		// Insert element
60: 		idx_t pos = 0;
61: 		while (pos < node->count && n->key[pos] < key_byte) {
62: 			pos++;
63: 		}
64: 		if (n->child[pos] != nullptr) {
65: 			for (idx_t i = n->count; i > pos; i--) {
66: 				n->key[i] = n->key[i - 1];
67: 				n->child[i] = move(n->child[i - 1]);
68: 			}
69: 		}
70: 		n->key[pos] = key_byte;
71: 		n->child[pos] = move(child);
72: 		n->count++;
73: 	} else {
74: 		// Grow to Node48
75: 		auto new_node = make_unique<Node48>(art, n->prefix_length);
76: 		for (idx_t i = 0; i < node->count; i++) {
77: 			new_node->child_index[n->key[i]] = i;
78: 			new_node->child[i] = move(n->child[i]);
79: 		}
80: 		CopyPrefix(art, n, new_node.get());
81: 		new_node->count = node->count;
82: 		node = move(new_node);
83: 
84: 		Node48::Insert(art, node, key_byte, child);
85: 	}
86: }
87: 
88: void Node16::Erase(ART &art, unique_ptr<Node> &node, int pos) {
89: 	Node16 *n = static_cast<Node16 *>(node.get());
90: 	// erase the child and decrease the count
91: 	n->child[pos].reset();
92: 	n->count--;
93: 	// potentially move any children backwards
94: 	for (; pos < n->count; pos++) {
95: 		n->key[pos] = n->key[pos + 1];
96: 		n->child[pos] = move(n->child[pos + 1]);
97: 	}
98: 	if (node->count <= 3) {
99: 		// Shrink node
100: 		auto new_node = make_unique<Node4>(art, n->prefix_length);
101: 		for (unsigned i = 0; i < n->count; i++) {
102: 			new_node->key[new_node->count] = n->key[i];
103: 			new_node->child[new_node->count++] = move(n->child[i]);
104: 		}
105: 		CopyPrefix(art, n, new_node.get());
106: 		node = move(new_node);
107: 	}
108: }
109: 
110: } // namespace duckdb
[end of src/execution/index/art/node16.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: