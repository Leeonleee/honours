diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 3e90be215fff..098419da7d5b 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -41,8 +41,6 @@ else()
   target_link_libraries(unittest duckdb_static test_helpers)
 endif()
 
-link_extension_libraries(unittest)
-
 if(${BUILD_TPCH_EXTENSION})
   if(${BUILD_SQLSMITH})
     add_subdirectory(sqlsmith)
diff --git a/test/api/test_tpch_with_relations.cpp b/test/api/test_tpch_with_relations.cpp
index bd0b6f22fed5..cac8207187cb 100644
--- a/test/api/test_tpch_with_relations.cpp
+++ b/test/api/test_tpch_with_relations.cpp
@@ -12,7 +12,6 @@ using namespace std;
 TEST_CASE("Test TPC-H SF0.01 with relations", "[tpch][.]") {
 	unique_ptr<QueryResult> result;
 	DuckDB db(nullptr);
-	db.LoadExtension<TPCHExtension>();
 	Connection con(db);
 	double sf = 0.01;
 
diff --git a/test/sql/storage/CMakeLists.txt b/test/sql/storage/CMakeLists.txt
index bc526671b1ad..bb1195099aab 100644
--- a/test/sql/storage/CMakeLists.txt
+++ b/test/sql/storage/CMakeLists.txt
@@ -7,7 +7,6 @@ add_library_unity(
   test_big_storage.cpp
   test_repeated_checkpoint.cpp
   test_storage.cpp
-  test_readonly.cpp
   test_database_size.cpp)
 set(ALL_OBJECT_FILES
     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_storage>
diff --git a/test/sql/storage/test_readonly.cpp b/test/sql/storage/test_readonly.cpp
deleted file mode 100644
index 1eaeb03699f2..000000000000
--- a/test/sql/storage/test_readonly.cpp
+++ /dev/null
@@ -1,59 +0,0 @@
-#include "catch.hpp"
-#include "duckdb/common/local_file_system.hpp"
-#include "test_helpers.hpp"
-
-using namespace std;
-
-namespace duckdb {
-
-class ReadOnlyFileSystem : public LocalFileSystem {
-	unique_ptr<FileHandle> OpenFile(const string &path, uint8_t flags, FileLockType lock_type,
-	                                FileCompressionType compression, FileOpener *opener) override {
-		if (flags & FileFlags::FILE_FLAGS_WRITE) {
-			throw Exception("RO file system");
-		}
-		return LocalFileSystem::OpenFile(path, flags, lock_type, compression, opener);
-	}
-
-	std::string GetName() const override {
-		return "ReadOnlyFileSystem";
-	}
-};
-
-TEST_CASE("Test read only storage", "[storage]") {
-	unique_ptr<QueryResult> result;
-	auto storage_database = TestCreatePath("storage_test");
-	DeleteDatabase(storage_database);
-
-	{
-		DuckDB db(storage_database);
-		Connection con(db);
-		REQUIRE_NO_FAIL(con.Query("CREATE TABLE test (a INTEGER)"));
-		REQUIRE_NO_FAIL(con.Query("INSERT INTO test VALUES (42)"));
-	}
-	{
-		DBConfig config;
-		config.file_system = make_unique_base<FileSystem, ReadOnlyFileSystem>();
-		config.access_mode = AccessMode::READ_ONLY;
-		config.use_temporary_directory = false;
-		DuckDB db(storage_database, &config);
-		Connection con(db);
-		result = con.Query("SELECT * FROM test ORDER BY a");
-		REQUIRE(CHECK_COLUMN(result, 0, {42}));
-
-		REQUIRE_FAIL(con.Query("INSERT INTO test VALUES (43)"));
-		REQUIRE_FAIL(con.Query("UPDATE test SET a = 43"));
-		REQUIRE_FAIL(con.Query("DROP TABLE test"));
-		// temporary tables
-		REQUIRE_NO_FAIL(con.Query("CREATE TEMPORARY TABLE test2(i INTEGER)"));
-		REQUIRE_NO_FAIL(con.Query("INSERT INTO test2 VALUES (22), (23)"));
-		REQUIRE_NO_FAIL(con.Query("UPDATE test2 SET i=i+1"));
-		REQUIRE_NO_FAIL(con.Query("DELETE FROM test2 WHERE i=23"));
-
-		result = con.Query("SELECT * FROM test2");
-		REQUIRE(CHECK_COLUMN(result, 0, {24}));
-	}
-	DeleteDatabase(storage_database);
-}
-
-} // namespace duckdb
diff --git a/test/sqlite/test_sqllogictest.cpp b/test/sqlite/test_sqllogictest.cpp
index 1dab26bb4828..6f27a1922d15 100644
--- a/test/sqlite/test_sqllogictest.cpp
+++ b/test/sqlite/test_sqllogictest.cpp
@@ -39,7 +39,7 @@
 #include "duckdb/common/crypto/md5.hpp"
 #include "duckdb/parser/parser.hpp"
 
-#include "extension_helper.hpp"
+#include "duckdb/main/extension_helper.hpp"
 
 #include "test_helpers.hpp"
 #include "test_helper_extension.hpp"
@@ -71,6 +71,7 @@ struct SQLLogicTestRunner {
 public:
 	SQLLogicTestRunner(string dbpath) : dbpath(move(dbpath)) {
 		config = GetTestConfig();
+		config->load_extensions = false;
 	}
 	~SQLLogicTestRunner();
 
diff --git a/test/sqlsmith/test_sqlsmith.cpp b/test/sqlsmith/test_sqlsmith.cpp
index 3a1fb808f853..4042829369bf 100644
--- a/test/sqlsmith/test_sqlsmith.cpp
+++ b/test/sqlsmith/test_sqlsmith.cpp
@@ -19,7 +19,6 @@ static void test_runner() {
 
 	unique_ptr<QueryResult> result;
 	DuckDB db(nullptr);
-	db.LoadExtension<TPCHExtension>();
 	Connection con(db);
 
 	con.EnableProfiling();
