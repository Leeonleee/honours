{
  "repo": "duckdb/duckdb",
  "pull_number": 2563,
  "instance_id": "duckdb__duckdb-2563",
  "issue_numbers": [
    "2505"
  ],
  "base_commit": "7b5ddd68186596fb58178a919aeeb31502f1ad48",
  "patch": "diff --git a/.github/workflows/LinuxRelease.yml b/.github/workflows/LinuxRelease.yml\nindex 589c7c22f882..6ddb49c6fd5b 100644\n--- a/.github/workflows/LinuxRelease.yml\n+++ b/.github/workflows/LinuxRelease.yml\n@@ -65,9 +65,6 @@ jobs:\n     - name: Test\n       run: make allunit\n \n-    - name: Symbol Leakage Test\n-      run: python3.7 scripts/exported_symbols_check.py build/release/src/libduckdb*.so\n-\n     - name: Tools Tests\n       run: |\n         python3.7 tools/shell/shell-test.py build/release/duckdb\n@@ -278,8 +275,6 @@ jobs:\n           python3 scripts/run_tests_one_by_one.py build/relassert/test/unittest \"*\"\n \n \n-\n-\n  vector-sizes:\n     name: Vector Sizes\n     runs-on: ubuntu-20.04\n@@ -335,3 +330,24 @@ jobs:\n         path: |\n           duckdb-wasm32-nothreads.zip\n \n+ symbol-leakage:\n+    name: Symbol Leakage\n+    runs-on: ubuntu-20.04\n+    needs: linux-release-64\n+    env:\n+      DISABLE_PARQUET: 1\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+      with:\n+        fetch-depth: 0\n+\n+    - uses: actions/setup-python@v2\n+      with:\n+        python-version: '3.7'\n+\n+    - name: Build\n+      run: make\n+\n+    - name: Symbol Leakage Test\n+      run: python3.7 scripts/exported_symbols_check.py build/release/src/libduckdb*.so\ndiff --git a/.github/workflows/cifuzz.yml b/.github/workflows/cifuzz.yml\nindex dc5999054deb..ba4d6fd84de8 100644\n--- a/.github/workflows/cifuzz.yml\n+++ b/.github/workflows/cifuzz.yml\n@@ -1,5 +1,6 @@\n name: CIFuzz\n on: [pull_request]\n+\n jobs:\n   Fuzzing:\n     runs-on: ubuntu-latest\ndiff --git a/.github/workflows/lcov_exclude b/.github/workflows/lcov_exclude\nindex 2f1ddac5623a..eb33d2e119c0 100644\n--- a/.github/workflows/lcov_exclude\n+++ b/.github/workflows/lcov_exclude\n@@ -16,4 +16,4 @@\n */extension/tpcds/*\n */extension/tpch/*\n */extension/visualizer/*\n-*/extension/extension_helper.hpp\n+src/main/extension_helper.cpp\n\\ No newline at end of file\ndiff --git a/Makefile b/Makefile\nindex 2c5790691bd2..49efd27adb21 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -43,6 +43,9 @@ ifeq (${STATIC_LIBCPP}, 1)\n \tSTATIC_LIBCPP=-DSTATIC_LIBCPP=TRUE\n endif\n EXTENSIONS=-DBUILD_PARQUET_EXTENSION=TRUE\n+ifeq (${DISABLE_PARQUET}, 1)\n+\tEXTENSIONS:=\n+endif\n ifeq (${BUILD_BENCHMARK}, 1)\n \tEXTENSIONS:=${EXTENSIONS} -DBUILD_BENCHMARKS=1\n endif\ndiff --git a/benchmark/CMakeLists.txt b/benchmark/CMakeLists.txt\nindex 3c044a58d9b4..ae43af715bd1 100644\n--- a/benchmark/CMakeLists.txt\n+++ b/benchmark/CMakeLists.txt\n@@ -18,8 +18,6 @@ add_executable(benchmark_runner benchmark_runner.cpp interpreted_benchmark.cpp\n \n target_link_libraries(benchmark_runner duckdb imdb test_helpers)\n \n-link_extension_libraries(benchmark_runner)\n-\n if(${BUILD_TPCE})\n   target_link_libraries(benchmark_runner tpce)\n endif()\ndiff --git a/benchmark/interpreted_benchmark.cpp b/benchmark/interpreted_benchmark.cpp\nindex 0560d6e04d8e..bd2b24bf1f61 100644\n--- a/benchmark/interpreted_benchmark.cpp\n+++ b/benchmark/interpreted_benchmark.cpp\n@@ -5,9 +5,9 @@\n #include <fstream>\n #include <sstream>\n #include \"duckdb/main/query_profiler.hpp\"\n+#include \"duckdb/main/extension_helper.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n-#include \"extension_helper.hpp\"\n \n namespace duckdb {\n \n@@ -32,15 +32,22 @@ static string ParseGroupFromPath(string file) {\n }\n \n struct InterpretedBenchmarkState : public BenchmarkState {\n+\tunique_ptr<DBConfig> benchmark_config;\n \tDuckDB db;\n \tConnection con;\n \tunique_ptr<MaterializedQueryResult> result;\n-\tInterpretedBenchmarkState() : db(nullptr), con(db) {\n+\tInterpretedBenchmarkState() : benchmark_config(GetBenchmarkConfig()), db(nullptr, benchmark_config.get()), con(db) {\n \t\tcon.EnableProfiling();\n \t\tauto &instance = BenchmarkRunner::GetInstance();\n \t\tauto res = con.Query(\"PRAGMA threads=\" + to_string(instance.threads));\n \t\tD_ASSERT(res->success);\n \t}\n+\n+\tunique_ptr<DBConfig> GetBenchmarkConfig() {\n+\t\tauto result = make_unique<DBConfig>();\n+\t\tresult->load_extensions = false;\n+\t\treturn result;\n+\t}\n };\n \n struct BenchmarkFileReader {\ndiff --git a/benchmark/tpch/startup.cpp b/benchmark/tpch/startup.cpp\nindex f0e5cea466d0..ecee4e892b94 100644\n--- a/benchmark/tpch/startup.cpp\n+++ b/benchmark/tpch/startup.cpp\n@@ -13,7 +13,6 @@ using namespace duckdb;\n \t\tDeleteDatabase(db_path);                                                                                       \\\n \t\t{                                                                                                              \\\n \t\t\tDuckDB db(db_path);                                                                                        \\\n-\t\t\tdb.LoadExtension<TPCHExtension>();                                                                         \\\n \t\t\tConnection con(db);                                                                                        \\\n \t\t\tcon.Query(\"CALL dbgen(sf=\" + std::to_string(SF) + \")\");                                                    \\\n \t\t}                                                                                                              \\\n@@ -26,7 +25,6 @@ using namespace duckdb;\n \tvoid RunBenchmark(DuckDBBenchmarkState *state) override {                                                          \\\n \t\tauto config = GetConfig();                                                                                     \\\n \t\tDuckDB db(db_path, config.get());                                                                              \\\n-\t\tdb.LoadExtension<TPCHExtension>();                                                                             \\\n \t\tConnection con(db);                                                                                            \\\n \t\tstate->result = con.Query(QUERY);                                                                              \\\n \t}                                                                                                                  \\\ndiff --git a/extension/extension_helper.hpp b/extension/extension_helper.hpp\ndeleted file mode 100644\nindex 7fcd0248c55c..000000000000\n--- a/extension/extension_helper.hpp\n+++ /dev/null\n@@ -1,129 +0,0 @@\n-//===----------------------------------------------------------------------===//\n-//                         DuckDB\n-//\n-// extension_helper.hpp\n-//\n-//\n-//===----------------------------------------------------------------------===//\n-\n-#pragma once\n-\n-#include <string>\n-\n-#ifdef BUILD_ICU_EXTENSION\n-#include \"icu-extension.hpp\"\n-#endif\n-\n-#ifdef BUILD_PARQUET_EXTENSION\n-#include \"parquet-extension.hpp\"\n-#endif\n-\n-#ifdef BUILD_TPCH_EXTENSION\n-#include \"tpch-extension.hpp\"\n-#endif\n-\n-#ifdef BUILD_TPCDS_EXTENSION\n-#include \"tpcds-extension.hpp\"\n-#endif\n-\n-#ifdef BUILD_FTS_EXTENSION\n-#include \"fts-extension.hpp\"\n-#endif\n-\n-#ifdef BUILD_HTTPFS_EXTENSION\n-#include \"httpfs-extension.hpp\"\n-#endif\n-\n-#ifdef BUILD_VISUALIZER_EXTENSION\n-#include \"visualizer-extension.hpp\"\n-#endif\n-\n-namespace duckdb {\n-class DuckDB;\n-\n-enum class ExtensionLoadResult : uint8_t { LOADED_EXTENSION = 0, EXTENSION_UNKNOWN = 1, NOT_LOADED = 2 };\n-\n-class ExtensionHelper {\n-public:\n-\tstatic void LoadAllExtensions(DuckDB &db) {\n-#ifdef BUILD_ICU_EXTENSION\n-\t\tdb.LoadExtension<ICUExtension>();\n-#endif\n-#ifdef BUILD_PARQUET_EXTENSION\n-\t\tdb.LoadExtension<ParquetExtension>();\n-#endif\n-#ifdef BUILD_TPCH_EXTENSION\n-\t\tdb.LoadExtension<TPCHExtension>();\n-#endif\n-#ifdef BUILD_TPCDS_EXTENSION\n-\t\tdb.LoadExtension<TPCDSExtension>();\n-#endif\n-#ifdef BUILD_FTS_EXTENSION\n-\t\tdb.LoadExtension<FTSExtension>();\n-#endif\n-#ifdef BUILD_HTTPFS_EXTENSION\n-\t\tdb.LoadExtension<HTTPFsExtension>();\n-#endif\n-#ifdef BUILD_VISUALIZER_EXTENSION\n-\t\tdb.LoadExtension<VisualizerExtension>();\n-#endif\n-\t}\n-\n-\tstatic ExtensionLoadResult LoadExtension(DuckDB &db, std::string extension) {\n-\t\tif (extension == \"parquet\") {\n-#ifdef BUILD_PARQUET_EXTENSION\n-\t\t\tdb.LoadExtension<ParquetExtension>();\n-#else\n-\t\t\t// parquet extension required but not build: skip this test\n-\t\t\treturn ExtensionLoadResult::NOT_LOADED;\n-#endif\n-\t\t} else if (extension == \"icu\") {\n-#ifdef BUILD_ICU_EXTENSION\n-\t\t\tdb.LoadExtension<ICUExtension>();\n-#else\n-\t\t\t// icu extension required but not build: skip this test\n-\t\t\treturn ExtensionLoadResult::NOT_LOADED;\n-#endif\n-\t\t} else if (extension == \"tpch\") {\n-#ifdef BUILD_TPCH_EXTENSION\n-\t\t\tdb.LoadExtension<TPCHExtension>();\n-#else\n-\t\t\t// icu extension required but not build: skip this test\n-\t\t\treturn ExtensionLoadResult::NOT_LOADED;\n-#endif\n-\t\t} else if (extension == \"tpcds\") {\n-#ifdef BUILD_TPCDS_EXTENSION\n-\t\t\tdb.LoadExtension<TPCDSExtension>();\n-#else\n-\t\t\t// icu extension required but not build: skip this test\n-\t\t\treturn ExtensionLoadResult::NOT_LOADED;\n-#endif\n-\t\t} else if (extension == \"fts\") {\n-#ifdef BUILD_FTS_EXTENSION\n-\t\t\tdb.LoadExtension<FTSExtension>();\n-#else\n-\t\t\t// fts extension required but not build: skip this test\n-\t\t\treturn ExtensionLoadResult::NOT_LOADED;\n-#endif\n-\t\t} else if (extension == \"httpfs\") {\n-#ifdef BUILD_HTTPFS_EXTENSION\n-\t\t\tdb.LoadExtension<HTTPFsExtension>();\n-#else\n-\t\t\treturn ExtensionLoadResult::NOT_LOADED;\n-#endif\n-\t\t} else if (extension == \"visualizer\") {\n-#ifdef BUILD_VISUALIZER_EXTENSION\n-\t\t\tdb.LoadExtension<VisualizerExtension>();\n-#else\n-\t\t\t// visualizer extension required but not build: skip this test\n-\t\t\treturn ExtensionLoadResult::NOT_LOADED;\n-#endif\n-\t\t} else {\n-\t\t\t// unknown extension\n-\t\t\treturn ExtensionLoadResult::EXTENSION_UNKNOWN;\n-\t\t}\n-\t\treturn ExtensionLoadResult::LOADED_EXTENSION;\n-\t}\n-};\n-\n-} // namespace duckdb\ndiff --git a/extension/fts/CMakeLists.txt b/extension/fts/CMakeLists.txt\nindex 110e749d2127..757cce0290d2 100644\n--- a/extension/fts/CMakeLists.txt\n+++ b/extension/fts/CMakeLists.txt\n@@ -41,3 +41,9 @@ add_library(\n   ../../third_party/snowball/src_c/stem_UTF_8_swedish.cpp\n   ../../third_party/snowball/src_c/stem_UTF_8_tamil.cpp\n   ../../third_party/snowball/src_c/stem_UTF_8_turkish.cpp)\n+\n+install(\n+  TARGETS fts_extension\n+  EXPORT \"${DUCKDB_EXPORT_SET}\"\n+  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n+  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\ndiff --git a/extension/httpfs/CMakeLists.txt b/extension/httpfs/CMakeLists.txt\nindex da129a5f0529..6c0bae69b5e6 100644\n--- a/extension/httpfs/CMakeLists.txt\n+++ b/extension/httpfs/CMakeLists.txt\n@@ -9,3 +9,9 @@ include_directories(include ../.. ../../third_party/httplib\n \n add_library(httpfs_extension STATIC s3fs.cpp httpfs.cpp crypto.cpp\n                                     httpfs-extension.cpp)\n+\n+install(\n+  TARGETS httpfs_extension\n+  EXPORT \"${DUCKDB_EXPORT_SET}\"\n+  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n+  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\ndiff --git a/extension/icu/CMakeLists.txt b/extension/icu/CMakeLists.txt\nindex 5106bdfee553..530b78221ae6 100644\n--- a/extension/icu/CMakeLists.txt\n+++ b/extension/icu/CMakeLists.txt\n@@ -7,3 +7,9 @@ include_directories(include)\n add_library(icu_extension STATIC icu-collate.cpp icu-extension.cpp)\n link_threads(icu_extension)\n disable_target_warnings(icu_extension)\n+\n+install(\n+  TARGETS icu_extension\n+  EXPORT \"${DUCKDB_EXPORT_SET}\"\n+  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n+  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\ndiff --git a/extension/parquet/CMakeLists.txt b/extension/parquet/CMakeLists.txt\nindex 424783b94890..cbf63cf8330b 100644\n--- a/extension/parquet/CMakeLists.txt\n+++ b/extension/parquet/CMakeLists.txt\n@@ -51,6 +51,12 @@ endif()\n \n add_library(parquet_extension STATIC ${PARQUET_EXTENSION_FILES})\n \n+install(\n+  TARGETS parquet_extension\n+  EXPORT \"${DUCKDB_EXPORT_SET}\"\n+  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n+  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n+\n if(NOT CLANG_TIDY)\n   add_executable(parquetcli parquetcli.cpp)\n   target_link_libraries(parquetcli parquet_extension)\ndiff --git a/extension/tpcds/CMakeLists.txt b/extension/tpcds/CMakeLists.txt\nindex 765bf8eaf0f2..a43abbbc4742 100644\n--- a/extension/tpcds/CMakeLists.txt\n+++ b/extension/tpcds/CMakeLists.txt\n@@ -7,4 +7,9 @@ include_directories(dsdgen/include)\n add_subdirectory(dsdgen)\n \n add_library(tpcds_extension STATIC tpcds-extension.cpp ${DSDGEN_OBJECT_FILES})\n-# target_link_libraries(tpcds_extension dsdgen)\n+\n+install(\n+  TARGETS tpcds_extension\n+  EXPORT \"${DUCKDB_EXPORT_SET}\"\n+  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n+  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\ndiff --git a/extension/tpch/CMakeLists.txt b/extension/tpch/CMakeLists.txt\nindex 4c46737c2315..f46af08800fe 100644\n--- a/extension/tpch/CMakeLists.txt\n+++ b/extension/tpch/CMakeLists.txt\n@@ -7,4 +7,9 @@ include_directories(include)\n add_subdirectory(dbgen)\n \n add_library(tpch_extension STATIC tpch-extension.cpp ${DBGEN_OBJECT_FILES})\n-# target_link_libraries(tpch_extension dbgen)\n+\n+install(\n+  TARGETS tpch_extension\n+  EXPORT \"${DUCKDB_EXPORT_SET}\"\n+  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n+  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\ndiff --git a/extension/visualizer/CMakeLists.txt b/extension/visualizer/CMakeLists.txt\nindex 27e869d0ecfe..91b1b5927d9e 100644\n--- a/extension/visualizer/CMakeLists.txt\n+++ b/extension/visualizer/CMakeLists.txt\n@@ -5,3 +5,9 @@ project(VisualizerExtension)\n include_directories(include)\n \n add_library(visualizer_extension STATIC visualizer-extension.cpp)\n+\n+install(\n+  TARGETS visualizer_extension\n+  EXPORT \"${DUCKDB_EXPORT_SET}\"\n+  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n+  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\ndiff --git a/scripts/amalgamation.py b/scripts/amalgamation.py\nindex 9658eebccbf5..552dc6002295 100644\n--- a/scripts/amalgamation.py\n+++ b/scripts/amalgamation.py\n@@ -107,6 +107,8 @@ def get_includes(fpath, text):\n         included_file = x[1]\n         if skip_duckdb_includes and 'duckdb' in included_file:\n             continue\n+        if 'extension_helper.cpp' in fpath and included_file.endswith('-extension.hpp'):\n+            continue\n         include_statements.append(x[0])\n         included_file = os.sep.join(included_file.split('/'))\n         found = False\ndiff --git a/scripts/package_build.py b/scripts/package_build.py\nindex 7a792d0f2bbc..baae62a34016 100644\n--- a/scripts/package_build.py\n+++ b/scripts/package_build.py\n@@ -142,7 +142,7 @@ def copy_file(src, target_dir):\n         amalgamation.copy_if_different(src, target_file)\n \n     # include the main extension helper\n-    include_files += [os.path.join('extension', 'extension_helper.hpp')]\n+    include_files += [os.path.join('src', 'include', 'duckdb', 'main', 'extension_helper.hpp')]\n     # include the separate extensions\n     for ext in extensions:\n         ext_path = os.path.join(scripts_dir, '..', 'extension', ext)\ndiff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex 35f0952ef2d5..752e0d6fd2a7 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -10,23 +10,7 @@ if(NOT MSVC)\n   )\n endif()\n \n-# clang-tidy config from presto-cpp set(CMAKE_CXX_CLANG_TIDY clang-tidy\n-# --checks=*,-abseil-*,-android-*,-cert-err58-cpp,-clang-analyzer-\n-# osx-*,-cppcoreguidelines-avoid-c-arrays,-cppcoreguidelines-avoid-magic-\n-# numbers,-cppcoreguidelines-pro-bounds-array-to-pointer-\n-# decay,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-cppcoreguidelines-pro-\n-# type-reinterpret-cast,-cppcoreguidelines-pro-type-\n-# vararg,-fuchsia-*,-google-*,-hicpp-avoid-c-arrays,-hicpp-deprecated-\n-# headers,-hicpp-no-array-decay,-hicpp-use-equals-default,-hicpp-\n-# vararg,-llvmlibc-*,-llvm-header-guard,-llvm-include-order,-mpi-*,-misc-non-\n-# private-member-variables-in-classes,-misc-no-recursion,-misc-unused-\n-# parameters,-modernize-avoid-c-arrays,-modernize-deprecated-headers,-modernize-\n-# use-nodiscard,-modernize-use-trailing-return-\n-# type,-objc-*,-openmp-*,-readability-avoid-const-params-in-decls,-readability-\n-# convert-member-functions-to-static,-readability-magic-numbers,-zircon-*)\n-\n if(AMALGAMATION_BUILD)\n-\n   if(WIN32)\n     add_definitions(/bigobj)\n   endif()\n@@ -34,11 +18,13 @@ if(AMALGAMATION_BUILD)\n   add_library(duckdb SHARED \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp\")\n   target_link_libraries(duckdb ${CMAKE_DL_LIBS})\n   link_threads(duckdb)\n+  link_extension_libraries(duckdb)\n \n   add_library(duckdb_static STATIC\n               \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp\")\n   target_link_libraries(duckdb_static ${CMAKE_DL_LIBS})\n   link_threads(duckdb_static)\n+  link_extension_libraries(duckdb_static)\n \n   install(FILES \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.hpp\"\n                 \"${PROJECT_SOURCE_DIR}/src/include/duckdb.h\"\n@@ -74,10 +60,12 @@ else()\n   add_library(duckdb SHARED ${ALL_OBJECT_FILES})\n   target_link_libraries(duckdb ${DUCKDB_LINK_LIBS})\n   link_threads(duckdb)\n+  link_extension_libraries(duckdb)\n \n   add_library(duckdb_static STATIC ${ALL_OBJECT_FILES})\n   target_link_libraries(duckdb_static ${DUCKDB_LINK_LIBS})\n   link_threads(duckdb_static)\n+  link_extension_libraries(duckdb_static)\n \n   target_include_directories(\n     duckdb PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\ndiff --git a/src/include/duckdb/main/config.hpp b/src/include/duckdb/main/config.hpp\nindex 352b56fd3499..879d28950dbd 100644\n--- a/src/include/duckdb/main/config.hpp\n+++ b/src/include/duckdb/main/config.hpp\n@@ -73,6 +73,8 @@ struct DBConfig {\n \tidx_t checkpoint_wal_size = 1 << 24;\n \t//! Whether or not to use Direct IO, bypassing operating system buffers\n \tbool use_direct_io = false;\n+\t//! Whether extensions should be loaded on start-up\n+\tbool load_extensions = true;\n \t//! The FileSystem to use, can be overwritten to allow for injecting custom file systems for testing purposes (e.g.\n \t//! RamFS or something similar)\n \tunique_ptr<FileSystem> file_system;\ndiff --git a/src/include/duckdb/main/extension_helper.hpp b/src/include/duckdb/main/extension_helper.hpp\nnew file mode 100644\nindex 000000000000..3d307adf4671\n--- /dev/null\n+++ b/src/include/duckdb/main/extension_helper.hpp\n@@ -0,0 +1,26 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/main/extension_helper.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include <string>\n+#include \"duckdb.hpp\"\n+\n+namespace duckdb {\n+class DuckDB;\n+\n+enum class ExtensionLoadResult : uint8_t { LOADED_EXTENSION = 0, EXTENSION_UNKNOWN = 1, NOT_LOADED = 2 };\n+\n+class ExtensionHelper {\n+public:\n+\tstatic void LoadAllExtensions(DuckDB &db);\n+\n+\tstatic ExtensionLoadResult LoadExtension(DuckDB &db, const std::string &extension);\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/main/CMakeLists.txt b/src/main/CMakeLists.txt\nindex 6689f56cd478..bd440f05965f 100644\n--- a/src/main/CMakeLists.txt\n+++ b/src/main/CMakeLists.txt\n@@ -16,6 +16,7 @@ add_library_unity(\n   config.cpp\n   connection.cpp\n   database.cpp\n+  extension_helper.cpp\n   materialized_query_result.cpp\n   prepared_statement.cpp\n   prepared_statement_data.cpp\n@@ -26,3 +27,5 @@ add_library_unity(\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main>\n     PARENT_SCOPE)\n+\n+add_extension_definitions(duckdb_main)\ndiff --git a/src/main/database.cpp b/src/main/database.cpp\nindex 94428a4240e3..3da805cdd996 100644\n--- a/src/main/database.cpp\n+++ b/src/main/database.cpp\n@@ -9,6 +9,7 @@\n #include \"duckdb/transaction/transaction_manager.hpp\"\n #include \"duckdb/main/connection_manager.hpp\"\n #include \"duckdb/function/compression_function.hpp\"\n+#include \"duckdb/main/extension_helper.hpp\"\n \n #ifndef DUCKDB_NO_THREADS\n #include \"duckdb/common/thread.hpp\"\n@@ -134,6 +135,9 @@ void DatabaseInstance::Initialize(const char *path, DBConfig *new_config) {\n \n DuckDB::DuckDB(const char *path, DBConfig *new_config) : instance(make_shared<DatabaseInstance>()) {\n \tinstance->Initialize(path, new_config);\n+\tif (instance->config.load_extensions) {\n+\t\tExtensionHelper::LoadAllExtensions(*this);\n+\t}\n }\n \n DuckDB::DuckDB(const string &path, DBConfig *config) : DuckDB(path.c_str(), config) {\n@@ -205,6 +209,7 @@ void DatabaseInstance::Configure(DBConfig &new_config) {\n \t} else {\n \t\tconfig.maximum_threads = new_config.maximum_threads;\n \t}\n+\tconfig.load_extensions = new_config.load_extensions;\n \tconfig.force_compression = new_config.force_compression;\n \tconfig.allocator = move(new_config.allocator);\n \tconfig.checkpoint_wal_size = new_config.checkpoint_wal_size;\ndiff --git a/src/main/extension_helper.cpp b/src/main/extension_helper.cpp\nnew file mode 100644\nindex 000000000000..06680ac7aa4d\n--- /dev/null\n+++ b/src/main/extension_helper.cpp\n@@ -0,0 +1,96 @@\n+#include \"duckdb/main/extension_helper.hpp\"\n+\n+#ifdef BUILD_ICU_EXTENSION\n+#include \"icu-extension.hpp\"\n+#endif\n+\n+#ifdef BUILD_PARQUET_EXTENSION\n+#include \"parquet-extension.hpp\"\n+#endif\n+\n+#ifdef BUILD_TPCH_EXTENSION\n+#include \"tpch-extension.hpp\"\n+#endif\n+\n+#ifdef BUILD_TPCDS_EXTENSION\n+#include \"tpcds-extension.hpp\"\n+#endif\n+\n+#ifdef BUILD_FTS_EXTENSION\n+#include \"fts-extension.hpp\"\n+#endif\n+\n+#ifdef BUILD_HTTPFS_EXTENSION\n+#include \"httpfs-extension.hpp\"\n+#endif\n+\n+#ifdef BUILD_VISUALIZER_EXTENSION\n+#include \"visualizer-extension.hpp\"\n+#endif\n+\n+namespace duckdb {\n+\n+void ExtensionHelper::LoadAllExtensions(DuckDB &db) {\n+\tunordered_set<string> extensions {\"parquet\", \"icu\", \"tpch\", \"tpcds\", \"fts\", \"httpfs\", \"visualizer\"};\n+\tfor (auto &ext : extensions) {\n+\t\tLoadExtension(db, ext);\n+\t}\n+}\n+\n+ExtensionLoadResult ExtensionHelper::LoadExtension(DuckDB &db, const std::string &extension) {\n+\tif (extension == \"parquet\") {\n+#ifdef BUILD_PARQUET_EXTENSION\n+\t\tdb.LoadExtension<ParquetExtension>();\n+#else\n+\t\t// parquet extension required but not build: skip this test\n+\t\treturn ExtensionLoadResult::NOT_LOADED;\n+#endif\n+\t} else if (extension == \"icu\") {\n+#ifdef BUILD_ICU_EXTENSION\n+\t\tdb.LoadExtension<ICUExtension>();\n+#else\n+\t\t// icu extension required but not build: skip this test\n+\t\treturn ExtensionLoadResult::NOT_LOADED;\n+#endif\n+\t} else if (extension == \"tpch\") {\n+#ifdef BUILD_TPCH_EXTENSION\n+\t\tdb.LoadExtension<TPCHExtension>();\n+#else\n+\t\t// icu extension required but not build: skip this test\n+\t\treturn ExtensionLoadResult::NOT_LOADED;\n+#endif\n+\t} else if (extension == \"tpcds\") {\n+#ifdef BUILD_TPCDS_EXTENSION\n+\t\tdb.LoadExtension<TPCDSExtension>();\n+#else\n+\t\t// icu extension required but not build: skip this test\n+\t\treturn ExtensionLoadResult::NOT_LOADED;\n+#endif\n+\t} else if (extension == \"fts\") {\n+#ifdef BUILD_FTS_EXTENSION\n+\t\tdb.LoadExtension<FTSExtension>();\n+#else\n+\t\t// fts extension required but not build: skip this test\n+\t\treturn ExtensionLoadResult::NOT_LOADED;\n+#endif\n+\t} else if (extension == \"httpfs\") {\n+#ifdef BUILD_HTTPFS_EXTENSION\n+\t\tdb.LoadExtension<HTTPFsExtension>();\n+#else\n+\t\treturn ExtensionLoadResult::NOT_LOADED;\n+#endif\n+\t} else if (extension == \"visualizer\") {\n+#ifdef BUILD_VISUALIZER_EXTENSION\n+\t\tdb.LoadExtension<VisualizerExtension>();\n+#else\n+\t\t// visualizer extension required but not build: skip this test\n+\t\treturn ExtensionLoadResult::NOT_LOADED;\n+#endif\n+\t} else {\n+\t\t// unknown extension\n+\t\treturn ExtensionLoadResult::EXTENSION_UNKNOWN;\n+\t}\n+\treturn ExtensionLoadResult::LOADED_EXTENSION;\n+}\n+\n+} // namespace duckdb\ndiff --git a/third_party/sqlsmith/duckdb.cc b/third_party/sqlsmith/duckdb.cc\nindex 880c916fcae8..0ff73ee3e49b 100644\n--- a/third_party/sqlsmith/duckdb.cc\n+++ b/third_party/sqlsmith/duckdb.cc\n@@ -18,7 +18,6 @@ static regex e_syntax(\"syntax error at or near .*\");\n duckdb_connection::duckdb_connection(string &conninfo) {\n \t// in-memory database\n \tdatabase = make_unique<DuckDB>(nullptr);\n-\tdatabase->LoadExtension<TPCHExtension>();\n \tconnection = make_unique<Connection>(*database);\n }\n \ndiff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp\nindex db397681685d..41345158c3bb 100644\n--- a/tools/jdbc/src/jni/duckdb_java.cpp\n+++ b/tools/jdbc/src/jni/duckdb_java.cpp\n@@ -2,7 +2,6 @@\n #include \"duckdb.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/main/appender.hpp\"\n-#include \"parquet-extension.hpp\"\n \n using namespace duckdb;\n using namespace std;\n@@ -48,7 +47,6 @@ JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1startup(JNI\n \t}\n \ttry {\n \t\tauto db = new DuckDB(database, &config);\n-\t\tdb->LoadExtension<ParquetExtension>();\n \t\treturn env->NewDirectByteBuffer(db, 0);\n \t} catch (exception &e) {\n \t\tenv->ThrowNew(env->FindClass(\"java/sql/SQLException\"), e.what());\ndiff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex 74df614d741c..cae224ff266c 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -16,8 +16,6 @@\n #include \"duckdb/parser/expression/function_expression.hpp\"\n #include \"duckdb/parser/tableref/table_function_ref.hpp\"\n \n-#include \"extension/extension_helper.hpp\"\n-\n #include \"datetime.h\" // from Python\n \n #include <random>\n@@ -449,7 +447,6 @@ shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Connect(const string &databas\n \t}\n \n \tres->database = make_unique<DuckDB>(database, &config);\n-\tExtensionHelper::LoadAllExtensions(*res->database);\n \tres->connection = make_unique<Connection>(*res->database);\n \n \tPandasScanFunction scan_fun;\ndiff --git a/tools/rest/CMakeLists.txt b/tools/rest/CMakeLists.txt\nindex e02f2701c243..f7c71c6e4092 100644\n--- a/tools/rest/CMakeLists.txt\n+++ b/tools/rest/CMakeLists.txt\n@@ -12,5 +12,3 @@ add_extension_definitions()\n \n target_link_libraries(duckdb_rest_server duckdb_static ${LINK_EXTRA})\n link_threads(duckdb_rest_server)\n-\n-link_extension_libraries(duckdb_rest_server)\ndiff --git a/tools/rest/server.cpp b/tools/rest/server.cpp\nindex 8579025c5b44..9cf2d9aa0e9c 100644\n--- a/tools/rest/server.cpp\n+++ b/tools/rest/server.cpp\n@@ -9,8 +9,6 @@\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n \n-#include \"extension_helper.hpp\"\n-\n // you can set this to enable compression. You will need to link zlib as well.\n // #define CPPHTTPLIB_ZLIB_SUPPORT 1\n #define CPPHTTPLIB_KEEPALIVE_TIMEOUT_USECOND 10000\n@@ -331,7 +329,6 @@ int main(int argc, char **argv) {\n \tconfig.maximum_memory = 10737418240;\n \n \tDuckDB duckdb(dbfile.empty() ? nullptr : dbfile.c_str(), &config);\n-\tExtensionHelper::LoadAllExtensions(duckdb);\n \n \tsvr.Get(\"/query\", [&](const Request &req, Response &resp) {\n \t\tauto q = req.get_param_value(\"q\");\ndiff --git a/tools/rpkg/src/database.cpp b/tools/rpkg/src/database.cpp\nindex fcec6dad152e..fb8c026faa1e 100644\n--- a/tools/rpkg/src/database.cpp\n+++ b/tools/rpkg/src/database.cpp\n@@ -1,6 +1,5 @@\n #include \"rapi.hpp\"\n #include \"duckdb/main/client_context.hpp\"\n-#include \"extension/extension_helper.hpp\"\n #include \"duckdb/parser/parsed_data/create_table_function_info.hpp\"\n \n using namespace duckdb;\n@@ -66,7 +65,6 @@ SEXP RApi::Startup(SEXP dbdirsexp, SEXP readonlysexp, SEXP configsexp) {\n \t\tRf_error(\"duckdb_startup_R: Failed to open database: %s\", e.what());\n \t}\n \tD_ASSERT(wrapper->db);\n-\tExtensionHelper::LoadAllExtensions(*wrapper->db);\n \n \tDataFrameScanFunction scan_fun;\n \tCreateTableFunctionInfo info(scan_fun);\ndiff --git a/tools/sqlite3_api_wrapper/CMakeLists.txt b/tools/sqlite3_api_wrapper/CMakeLists.txt\nindex 49cdc2d122d7..efb6400ea978 100644\n--- a/tools/sqlite3_api_wrapper/CMakeLists.txt\n+++ b/tools/sqlite3_api_wrapper/CMakeLists.txt\n@@ -14,16 +14,12 @@ add_library(sqlite3_api_wrapper_static STATIC sqlite3_api_wrapper.cpp\n target_link_libraries(sqlite3_api_wrapper_static duckdb_static utf8proc)\n link_threads(sqlite3_api_wrapper_static)\n \n-link_extension_libraries(sqlite3_api_wrapper_static)\n-\n if(NOT WIN32)\n   add_library(sqlite3_api_wrapper SHARED sqlite3_api_wrapper.cpp\n                                          ${ALL_OBJECT_FILES})\n   target_link_libraries(sqlite3_api_wrapper duckdb ${DUCKDB_EXTRA_LINK_FLAGS})\n   link_threads(sqlite3_api_wrapper)\n \n-  link_extension_libraries(sqlite3_api_wrapper)\n-\n   include_directories(../../third_party/catch)\n \n   include_directories(test/include)\ndiff --git a/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp b/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp\nindex 7477e467da14..6cf2ac29965b 100644\n--- a/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp\n+++ b/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp\n@@ -20,8 +20,6 @@\n #include <cassert>\n #include <climits>\n \n-#include \"extension_helper.hpp\"\n-\n using namespace duckdb;\n using namespace std;\n \n@@ -96,8 +94,6 @@ int sqlite3_open_v2(const char *filename, /* Database filename (UTF-8) */\n \t\t}\n \t\tpDb->db = make_unique<DuckDB>(filename, &config);\n \t\tpDb->con = make_unique<Connection>(*pDb->db);\n-\n-\t\tExtensionHelper::LoadAllExtensions(*pDb->db);\n \t} catch (std::exception &ex) {\n \t\tif (pDb) {\n \t\t\tpDb->last_error = ex.what();\n",
  "test_patch": "diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt\nindex 3e90be215fff..098419da7d5b 100644\n--- a/test/CMakeLists.txt\n+++ b/test/CMakeLists.txt\n@@ -41,8 +41,6 @@ else()\n   target_link_libraries(unittest duckdb_static test_helpers)\n endif()\n \n-link_extension_libraries(unittest)\n-\n if(${BUILD_TPCH_EXTENSION})\n   if(${BUILD_SQLSMITH})\n     add_subdirectory(sqlsmith)\ndiff --git a/test/api/test_tpch_with_relations.cpp b/test/api/test_tpch_with_relations.cpp\nindex bd0b6f22fed5..cac8207187cb 100644\n--- a/test/api/test_tpch_with_relations.cpp\n+++ b/test/api/test_tpch_with_relations.cpp\n@@ -12,7 +12,6 @@ using namespace std;\n TEST_CASE(\"Test TPC-H SF0.01 with relations\", \"[tpch][.]\") {\n \tunique_ptr<QueryResult> result;\n \tDuckDB db(nullptr);\n-\tdb.LoadExtension<TPCHExtension>();\n \tConnection con(db);\n \tdouble sf = 0.01;\n \ndiff --git a/test/sql/storage/CMakeLists.txt b/test/sql/storage/CMakeLists.txt\nindex bc526671b1ad..bb1195099aab 100644\n--- a/test/sql/storage/CMakeLists.txt\n+++ b/test/sql/storage/CMakeLists.txt\n@@ -7,7 +7,6 @@ add_library_unity(\n   test_big_storage.cpp\n   test_repeated_checkpoint.cpp\n   test_storage.cpp\n-  test_readonly.cpp\n   test_database_size.cpp)\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_storage>\ndiff --git a/test/sql/storage/test_readonly.cpp b/test/sql/storage/test_readonly.cpp\ndeleted file mode 100644\nindex 1eaeb03699f2..000000000000\n--- a/test/sql/storage/test_readonly.cpp\n+++ /dev/null\n@@ -1,59 +0,0 @@\n-#include \"catch.hpp\"\n-#include \"duckdb/common/local_file_system.hpp\"\n-#include \"test_helpers.hpp\"\n-\n-using namespace std;\n-\n-namespace duckdb {\n-\n-class ReadOnlyFileSystem : public LocalFileSystem {\n-\tunique_ptr<FileHandle> OpenFile(const string &path, uint8_t flags, FileLockType lock_type,\n-\t                                FileCompressionType compression, FileOpener *opener) override {\n-\t\tif (flags & FileFlags::FILE_FLAGS_WRITE) {\n-\t\t\tthrow Exception(\"RO file system\");\n-\t\t}\n-\t\treturn LocalFileSystem::OpenFile(path, flags, lock_type, compression, opener);\n-\t}\n-\n-\tstd::string GetName() const override {\n-\t\treturn \"ReadOnlyFileSystem\";\n-\t}\n-};\n-\n-TEST_CASE(\"Test read only storage\", \"[storage]\") {\n-\tunique_ptr<QueryResult> result;\n-\tauto storage_database = TestCreatePath(\"storage_test\");\n-\tDeleteDatabase(storage_database);\n-\n-\t{\n-\t\tDuckDB db(storage_database);\n-\t\tConnection con(db);\n-\t\tREQUIRE_NO_FAIL(con.Query(\"CREATE TABLE test (a INTEGER)\"));\n-\t\tREQUIRE_NO_FAIL(con.Query(\"INSERT INTO test VALUES (42)\"));\n-\t}\n-\t{\n-\t\tDBConfig config;\n-\t\tconfig.file_system = make_unique_base<FileSystem, ReadOnlyFileSystem>();\n-\t\tconfig.access_mode = AccessMode::READ_ONLY;\n-\t\tconfig.use_temporary_directory = false;\n-\t\tDuckDB db(storage_database, &config);\n-\t\tConnection con(db);\n-\t\tresult = con.Query(\"SELECT * FROM test ORDER BY a\");\n-\t\tREQUIRE(CHECK_COLUMN(result, 0, {42}));\n-\n-\t\tREQUIRE_FAIL(con.Query(\"INSERT INTO test VALUES (43)\"));\n-\t\tREQUIRE_FAIL(con.Query(\"UPDATE test SET a = 43\"));\n-\t\tREQUIRE_FAIL(con.Query(\"DROP TABLE test\"));\n-\t\t// temporary tables\n-\t\tREQUIRE_NO_FAIL(con.Query(\"CREATE TEMPORARY TABLE test2(i INTEGER)\"));\n-\t\tREQUIRE_NO_FAIL(con.Query(\"INSERT INTO test2 VALUES (22), (23)\"));\n-\t\tREQUIRE_NO_FAIL(con.Query(\"UPDATE test2 SET i=i+1\"));\n-\t\tREQUIRE_NO_FAIL(con.Query(\"DELETE FROM test2 WHERE i=23\"));\n-\n-\t\tresult = con.Query(\"SELECT * FROM test2\");\n-\t\tREQUIRE(CHECK_COLUMN(result, 0, {24}));\n-\t}\n-\tDeleteDatabase(storage_database);\n-}\n-\n-} // namespace duckdb\ndiff --git a/test/sqlite/test_sqllogictest.cpp b/test/sqlite/test_sqllogictest.cpp\nindex 1dab26bb4828..6f27a1922d15 100644\n--- a/test/sqlite/test_sqllogictest.cpp\n+++ b/test/sqlite/test_sqllogictest.cpp\n@@ -39,7 +39,7 @@\n #include \"duckdb/common/crypto/md5.hpp\"\n #include \"duckdb/parser/parser.hpp\"\n \n-#include \"extension_helper.hpp\"\n+#include \"duckdb/main/extension_helper.hpp\"\n \n #include \"test_helpers.hpp\"\n #include \"test_helper_extension.hpp\"\n@@ -71,6 +71,7 @@ struct SQLLogicTestRunner {\n public:\n \tSQLLogicTestRunner(string dbpath) : dbpath(move(dbpath)) {\n \t\tconfig = GetTestConfig();\n+\t\tconfig->load_extensions = false;\n \t}\n \t~SQLLogicTestRunner();\n \ndiff --git a/test/sqlsmith/test_sqlsmith.cpp b/test/sqlsmith/test_sqlsmith.cpp\nindex 3a1fb808f853..4042829369bf 100644\n--- a/test/sqlsmith/test_sqlsmith.cpp\n+++ b/test/sqlsmith/test_sqlsmith.cpp\n@@ -19,7 +19,6 @@ static void test_runner() {\n \n \tunique_ptr<QueryResult> result;\n \tDuckDB db(nullptr);\n-\tdb.LoadExtension<TPCHExtension>();\n \tConnection con(db);\n \n \tcon.EnableProfiling();\n",
  "problem_statement": "I can't read from a parquet file with C API\nI have csv-file and parquet-file in a same folder and I can SELECT count(*) FROM both with DuckDB client.\r\n```\r\nD select count(*) from 'file.parquet';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 count_star() \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 21754        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select count(*) from 'salary.csv';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 count_star() \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 65           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nBut if I try to same selects via C API the csv-file works nicely but the parquet-file gives the following error message:\r\n`Catalog Error: Table with name file.parquet does not exist!`\r\n\r\nI'm using libduckdb which is built with the following commands from `https://github.com/duckdb/duckdb/archive/refs/tags/v0.3.0.tar.gz`\r\n```\r\ncd build\r\ncmake -DCMAKE_INSTALL_PREFIX=$prefix -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TARGET_TOOLCHAIN} -DCMAKE_BUILD_TYPE=Release -DDISABLE_UNITY=TRUE -DENABLE_SANITIZER=FALSE -DBUILD_UNITTESTS=FALSE ..\r\nmake -j${nproc}\r\nmake install\r\n```\r\n\r\nWhat should I do to get a support for parquet-files for C API?\n",
  "hints_text": "I am looking for the exact same thing and I am pretty desperate because this is going to save me so much time querying Parquet files.  \r\n\r\nI am primarily a C# programmer and I don't have this working yet, so excuse anything I get terribly wrong.  You need to compile with the parquet extensions in there.  Normally you munge all the code into an \"amalgamation file\" before compilation using `scripts/amalgamation.py`.  This script works for me on my Windows machine. If you need the parquet extensions, there is a separate 'scripts/parquet_amalgamation.py' you need to run - this is failing for me.  Looks like the script is grabbing the needed files from the includes in `extension\\parquet\\parquetcli.cpp` but can't find `parquet-amalgamation.hpp`:\r\n\r\n`Could not find include file \"parquet-amalgamation.hpp\", included from file \"extension\\parquet\\parquetcli.cpp`\r\n\r\nI can't find this file yet, but `parquetcli.cpp`  compiles for me so I assume it is pulling it out of a lib or something. I have to stop for the day...\r\n\r\nRef:\r\n#1604 #2176\r\n\nSo the problem with the `parquet-amalgamation.hpp` error message above is that that the `need_to_write_file` method in `amalgamation.py` isn't filtering this out from the includes when run on a Windows box.  So:\r\n\r\n`amalgamation.always_excluded += ['extension/parquet/parquetcli.cpp']`\r\n\r\nShould likely be:\r\n\r\n`amalgamation.always_excluded += [os.path.sep.join('extension/parquet/parquetcli.cpp'.split('/'))]`\nI'm having a go at fixing this.\nThat would be fantastic.",
  "created_at": "2021-11-09T10:24:37Z"
}