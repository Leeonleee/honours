diff --git a/.github/workflows/LinuxRelease.yml b/.github/workflows/LinuxRelease.yml
index 589c7c22f882..6ddb49c6fd5b 100644
--- a/.github/workflows/LinuxRelease.yml
+++ b/.github/workflows/LinuxRelease.yml
@@ -65,9 +65,6 @@ jobs:
     - name: Test
       run: make allunit
 
-    - name: Symbol Leakage Test
-      run: python3.7 scripts/exported_symbols_check.py build/release/src/libduckdb*.so
-
     - name: Tools Tests
       run: |
         python3.7 tools/shell/shell-test.py build/release/duckdb
@@ -278,8 +275,6 @@ jobs:
           python3 scripts/run_tests_one_by_one.py build/relassert/test/unittest "*"
 
 
-
-
  vector-sizes:
     name: Vector Sizes
     runs-on: ubuntu-20.04
@@ -335,3 +330,24 @@ jobs:
         path: |
           duckdb-wasm32-nothreads.zip
 
+ symbol-leakage:
+    name: Symbol Leakage
+    runs-on: ubuntu-20.04
+    needs: linux-release-64
+    env:
+      DISABLE_PARQUET: 1
+
+    steps:
+    - uses: actions/checkout@v2
+      with:
+        fetch-depth: 0
+
+    - uses: actions/setup-python@v2
+      with:
+        python-version: '3.7'
+
+    - name: Build
+      run: make
+
+    - name: Symbol Leakage Test
+      run: python3.7 scripts/exported_symbols_check.py build/release/src/libduckdb*.so
diff --git a/.github/workflows/cifuzz.yml b/.github/workflows/cifuzz.yml
index dc5999054deb..ba4d6fd84de8 100644
--- a/.github/workflows/cifuzz.yml
+++ b/.github/workflows/cifuzz.yml
@@ -1,5 +1,6 @@
 name: CIFuzz
 on: [pull_request]
+
 jobs:
   Fuzzing:
     runs-on: ubuntu-latest
diff --git a/.github/workflows/lcov_exclude b/.github/workflows/lcov_exclude
index 2f1ddac5623a..eb33d2e119c0 100644
--- a/.github/workflows/lcov_exclude
+++ b/.github/workflows/lcov_exclude
@@ -16,4 +16,4 @@
 */extension/tpcds/*
 */extension/tpch/*
 */extension/visualizer/*
-*/extension/extension_helper.hpp
+src/main/extension_helper.cpp
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 2c5790691bd2..49efd27adb21 100644
--- a/Makefile
+++ b/Makefile
@@ -43,6 +43,9 @@ ifeq (${STATIC_LIBCPP}, 1)
 	STATIC_LIBCPP=-DSTATIC_LIBCPP=TRUE
 endif
 EXTENSIONS=-DBUILD_PARQUET_EXTENSION=TRUE
+ifeq (${DISABLE_PARQUET}, 1)
+	EXTENSIONS:=
+endif
 ifeq (${BUILD_BENCHMARK}, 1)
 	EXTENSIONS:=${EXTENSIONS} -DBUILD_BENCHMARKS=1
 endif
diff --git a/benchmark/CMakeLists.txt b/benchmark/CMakeLists.txt
index 3c044a58d9b4..ae43af715bd1 100644
--- a/benchmark/CMakeLists.txt
+++ b/benchmark/CMakeLists.txt
@@ -18,8 +18,6 @@ add_executable(benchmark_runner benchmark_runner.cpp interpreted_benchmark.cpp
 
 target_link_libraries(benchmark_runner duckdb imdb test_helpers)
 
-link_extension_libraries(benchmark_runner)
-
 if(${BUILD_TPCE})
   target_link_libraries(benchmark_runner tpce)
 endif()
diff --git a/benchmark/interpreted_benchmark.cpp b/benchmark/interpreted_benchmark.cpp
index 0560d6e04d8e..bd2b24bf1f61 100644
--- a/benchmark/interpreted_benchmark.cpp
+++ b/benchmark/interpreted_benchmark.cpp
@@ -5,9 +5,9 @@
 #include <fstream>
 #include <sstream>
 #include "duckdb/main/query_profiler.hpp"
+#include "duckdb/main/extension_helper.hpp"
 #include "duckdb/common/string_util.hpp"
 #include "duckdb/main/client_context.hpp"
-#include "extension_helper.hpp"
 
 namespace duckdb {
 
@@ -32,15 +32,22 @@ static string ParseGroupFromPath(string file) {
 }
 
 struct InterpretedBenchmarkState : public BenchmarkState {
+	unique_ptr<DBConfig> benchmark_config;
 	DuckDB db;
 	Connection con;
 	unique_ptr<MaterializedQueryResult> result;
-	InterpretedBenchmarkState() : db(nullptr), con(db) {
+	InterpretedBenchmarkState() : benchmark_config(GetBenchmarkConfig()), db(nullptr, benchmark_config.get()), con(db) {
 		con.EnableProfiling();
 		auto &instance = BenchmarkRunner::GetInstance();
 		auto res = con.Query("PRAGMA threads=" + to_string(instance.threads));
 		D_ASSERT(res->success);
 	}
+
+	unique_ptr<DBConfig> GetBenchmarkConfig() {
+		auto result = make_unique<DBConfig>();
+		result->load_extensions = false;
+		return result;
+	}
 };
 
 struct BenchmarkFileReader {
diff --git a/benchmark/tpch/startup.cpp b/benchmark/tpch/startup.cpp
index f0e5cea466d0..ecee4e892b94 100644
--- a/benchmark/tpch/startup.cpp
+++ b/benchmark/tpch/startup.cpp
@@ -13,7 +13,6 @@ using namespace duckdb;
 		DeleteDatabase(db_path);                                                                                       \
 		{                                                                                                              \
 			DuckDB db(db_path);                                                                                        \
-			db.LoadExtension<TPCHExtension>();                                                                         \
 			Connection con(db);                                                                                        \
 			con.Query("CALL dbgen(sf=" + std::to_string(SF) + ")");                                                    \
 		}                                                                                                              \
@@ -26,7 +25,6 @@ using namespace duckdb;
 	void RunBenchmark(DuckDBBenchmarkState *state) override {                                                          \
 		auto config = GetConfig();                                                                                     \
 		DuckDB db(db_path, config.get());                                                                              \
-		db.LoadExtension<TPCHExtension>();                                                                             \
 		Connection con(db);                                                                                            \
 		state->result = con.Query(QUERY);                                                                              \
 	}                                                                                                                  \
diff --git a/extension/extension_helper.hpp b/extension/extension_helper.hpp
deleted file mode 100644
index 7fcd0248c55c..000000000000
--- a/extension/extension_helper.hpp
+++ /dev/null
@@ -1,129 +0,0 @@
-//===----------------------------------------------------------------------===//
-//                         DuckDB
-//
-// extension_helper.hpp
-//
-//
-//===----------------------------------------------------------------------===//
-
-#pragma once
-
-#include <string>
-
-#ifdef BUILD_ICU_EXTENSION
-#include "icu-extension.hpp"
-#endif
-
-#ifdef BUILD_PARQUET_EXTENSION
-#include "parquet-extension.hpp"
-#endif
-
-#ifdef BUILD_TPCH_EXTENSION
-#include "tpch-extension.hpp"
-#endif
-
-#ifdef BUILD_TPCDS_EXTENSION
-#include "tpcds-extension.hpp"
-#endif
-
-#ifdef BUILD_FTS_EXTENSION
-#include "fts-extension.hpp"
-#endif
-
-#ifdef BUILD_HTTPFS_EXTENSION
-#include "httpfs-extension.hpp"
-#endif
-
-#ifdef BUILD_VISUALIZER_EXTENSION
-#include "visualizer-extension.hpp"
-#endif
-
-namespace duckdb {
-class DuckDB;
-
-enum class ExtensionLoadResult : uint8_t { LOADED_EXTENSION = 0, EXTENSION_UNKNOWN = 1, NOT_LOADED = 2 };
-
-class ExtensionHelper {
-public:
-	static void LoadAllExtensions(DuckDB &db) {
-#ifdef BUILD_ICU_EXTENSION
-		db.LoadExtension<ICUExtension>();
-#endif
-#ifdef BUILD_PARQUET_EXTENSION
-		db.LoadExtension<ParquetExtension>();
-#endif
-#ifdef BUILD_TPCH_EXTENSION
-		db.LoadExtension<TPCHExtension>();
-#endif
-#ifdef BUILD_TPCDS_EXTENSION
-		db.LoadExtension<TPCDSExtension>();
-#endif
-#ifdef BUILD_FTS_EXTENSION
-		db.LoadExtension<FTSExtension>();
-#endif
-#ifdef BUILD_HTTPFS_EXTENSION
-		db.LoadExtension<HTTPFsExtension>();
-#endif
-#ifdef BUILD_VISUALIZER_EXTENSION
-		db.LoadExtension<VisualizerExtension>();
-#endif
-	}
-
-	static ExtensionLoadResult LoadExtension(DuckDB &db, std::string extension) {
-		if (extension == "parquet") {
-#ifdef BUILD_PARQUET_EXTENSION
-			db.LoadExtension<ParquetExtension>();
-#else
-			// parquet extension required but not build: skip this test
-			return ExtensionLoadResult::NOT_LOADED;
-#endif
-		} else if (extension == "icu") {
-#ifdef BUILD_ICU_EXTENSION
-			db.LoadExtension<ICUExtension>();
-#else
-			// icu extension required but not build: skip this test
-			return ExtensionLoadResult::NOT_LOADED;
-#endif
-		} else if (extension == "tpch") {
-#ifdef BUILD_TPCH_EXTENSION
-			db.LoadExtension<TPCHExtension>();
-#else
-			// icu extension required but not build: skip this test
-			return ExtensionLoadResult::NOT_LOADED;
-#endif
-		} else if (extension == "tpcds") {
-#ifdef BUILD_TPCDS_EXTENSION
-			db.LoadExtension<TPCDSExtension>();
-#else
-			// icu extension required but not build: skip this test
-			return ExtensionLoadResult::NOT_LOADED;
-#endif
-		} else if (extension == "fts") {
-#ifdef BUILD_FTS_EXTENSION
-			db.LoadExtension<FTSExtension>();
-#else
-			// fts extension required but not build: skip this test
-			return ExtensionLoadResult::NOT_LOADED;
-#endif
-		} else if (extension == "httpfs") {
-#ifdef BUILD_HTTPFS_EXTENSION
-			db.LoadExtension<HTTPFsExtension>();
-#else
-			return ExtensionLoadResult::NOT_LOADED;
-#endif
-		} else if (extension == "visualizer") {
-#ifdef BUILD_VISUALIZER_EXTENSION
-			db.LoadExtension<VisualizerExtension>();
-#else
-			// visualizer extension required but not build: skip this test
-			return ExtensionLoadResult::NOT_LOADED;
-#endif
-		} else {
-			// unknown extension
-			return ExtensionLoadResult::EXTENSION_UNKNOWN;
-		}
-		return ExtensionLoadResult::LOADED_EXTENSION;
-	}
-};
-
-} // namespace duckdb
diff --git a/extension/fts/CMakeLists.txt b/extension/fts/CMakeLists.txt
index 110e749d2127..757cce0290d2 100644
--- a/extension/fts/CMakeLists.txt
+++ b/extension/fts/CMakeLists.txt
@@ -41,3 +41,9 @@ add_library(
   ../../third_party/snowball/src_c/stem_UTF_8_swedish.cpp
   ../../third_party/snowball/src_c/stem_UTF_8_tamil.cpp
   ../../third_party/snowball/src_c/stem_UTF_8_turkish.cpp)
+
+install(
+  TARGETS fts_extension
+  EXPORT "${DUCKDB_EXPORT_SET}"
+  LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
+  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}")
diff --git a/extension/httpfs/CMakeLists.txt b/extension/httpfs/CMakeLists.txt
index da129a5f0529..6c0bae69b5e6 100644
--- a/extension/httpfs/CMakeLists.txt
+++ b/extension/httpfs/CMakeLists.txt
@@ -9,3 +9,9 @@ include_directories(include ../.. ../../third_party/httplib
 
 add_library(httpfs_extension STATIC s3fs.cpp httpfs.cpp crypto.cpp
                                     httpfs-extension.cpp)
+
+install(
+  TARGETS httpfs_extension
+  EXPORT "${DUCKDB_EXPORT_SET}"
+  LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
+  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}")
diff --git a/extension/icu/CMakeLists.txt b/extension/icu/CMakeLists.txt
index 5106bdfee553..530b78221ae6 100644
--- a/extension/icu/CMakeLists.txt
+++ b/extension/icu/CMakeLists.txt
@@ -7,3 +7,9 @@ include_directories(include)
 add_library(icu_extension STATIC icu-collate.cpp icu-extension.cpp)
 link_threads(icu_extension)
 disable_target_warnings(icu_extension)
+
+install(
+  TARGETS icu_extension
+  EXPORT "${DUCKDB_EXPORT_SET}"
+  LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
+  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}")
diff --git a/extension/parquet/CMakeLists.txt b/extension/parquet/CMakeLists.txt
index 424783b94890..cbf63cf8330b 100644
--- a/extension/parquet/CMakeLists.txt
+++ b/extension/parquet/CMakeLists.txt
@@ -51,6 +51,12 @@ endif()
 
 add_library(parquet_extension STATIC ${PARQUET_EXTENSION_FILES})
 
+install(
+  TARGETS parquet_extension
+  EXPORT "${DUCKDB_EXPORT_SET}"
+  LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
+  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}")
+
 if(NOT CLANG_TIDY)
   add_executable(parquetcli parquetcli.cpp)
   target_link_libraries(parquetcli parquet_extension)
diff --git a/extension/tpcds/CMakeLists.txt b/extension/tpcds/CMakeLists.txt
index 765bf8eaf0f2..a43abbbc4742 100644
--- a/extension/tpcds/CMakeLists.txt
+++ b/extension/tpcds/CMakeLists.txt
@@ -7,4 +7,9 @@ include_directories(dsdgen/include)
 add_subdirectory(dsdgen)
 
 add_library(tpcds_extension STATIC tpcds-extension.cpp ${DSDGEN_OBJECT_FILES})
-# target_link_libraries(tpcds_extension dsdgen)
+
+install(
+  TARGETS tpcds_extension
+  EXPORT "${DUCKDB_EXPORT_SET}"
+  LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
+  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}")
diff --git a/extension/tpch/CMakeLists.txt b/extension/tpch/CMakeLists.txt
index 4c46737c2315..f46af08800fe 100644
--- a/extension/tpch/CMakeLists.txt
+++ b/extension/tpch/CMakeLists.txt
@@ -7,4 +7,9 @@ include_directories(include)
 add_subdirectory(dbgen)
 
 add_library(tpch_extension STATIC tpch-extension.cpp ${DBGEN_OBJECT_FILES})
-# target_link_libraries(tpch_extension dbgen)
+
+install(
+  TARGETS tpch_extension
+  EXPORT "${DUCKDB_EXPORT_SET}"
+  LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
+  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}")
diff --git a/extension/visualizer/CMakeLists.txt b/extension/visualizer/CMakeLists.txt
index 27e869d0ecfe..91b1b5927d9e 100644
--- a/extension/visualizer/CMakeLists.txt
+++ b/extension/visualizer/CMakeLists.txt
@@ -5,3 +5,9 @@ project(VisualizerExtension)
 include_directories(include)
 
 add_library(visualizer_extension STATIC visualizer-extension.cpp)
+
+install(
+  TARGETS visualizer_extension
+  EXPORT "${DUCKDB_EXPORT_SET}"
+  LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
+  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}")
diff --git a/scripts/amalgamation.py b/scripts/amalgamation.py
index 9658eebccbf5..552dc6002295 100644
--- a/scripts/amalgamation.py
+++ b/scripts/amalgamation.py
@@ -107,6 +107,8 @@ def get_includes(fpath, text):
         included_file = x[1]
         if skip_duckdb_includes and 'duckdb' in included_file:
             continue
+        if 'extension_helper.cpp' in fpath and included_file.endswith('-extension.hpp'):
+            continue
         include_statements.append(x[0])
         included_file = os.sep.join(included_file.split('/'))
         found = False
diff --git a/scripts/package_build.py b/scripts/package_build.py
index 7a792d0f2bbc..baae62a34016 100644
--- a/scripts/package_build.py
+++ b/scripts/package_build.py
@@ -142,7 +142,7 @@ def copy_file(src, target_dir):
         amalgamation.copy_if_different(src, target_file)
 
     # include the main extension helper
-    include_files += [os.path.join('extension', 'extension_helper.hpp')]
+    include_files += [os.path.join('src', 'include', 'duckdb', 'main', 'extension_helper.hpp')]
     # include the separate extensions
     for ext in extensions:
         ext_path = os.path.join(scripts_dir, '..', 'extension', ext)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 35f0952ef2d5..752e0d6fd2a7 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -10,23 +10,7 @@ if(NOT MSVC)
   )
 endif()
 
-# clang-tidy config from presto-cpp set(CMAKE_CXX_CLANG_TIDY clang-tidy
-# --checks=*,-abseil-*,-android-*,-cert-err58-cpp,-clang-analyzer-
-# osx-*,-cppcoreguidelines-avoid-c-arrays,-cppcoreguidelines-avoid-magic-
-# numbers,-cppcoreguidelines-pro-bounds-array-to-pointer-
-# decay,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-cppcoreguidelines-pro-
-# type-reinterpret-cast,-cppcoreguidelines-pro-type-
-# vararg,-fuchsia-*,-google-*,-hicpp-avoid-c-arrays,-hicpp-deprecated-
-# headers,-hicpp-no-array-decay,-hicpp-use-equals-default,-hicpp-
-# vararg,-llvmlibc-*,-llvm-header-guard,-llvm-include-order,-mpi-*,-misc-non-
-# private-member-variables-in-classes,-misc-no-recursion,-misc-unused-
-# parameters,-modernize-avoid-c-arrays,-modernize-deprecated-headers,-modernize-
-# use-nodiscard,-modernize-use-trailing-return-
-# type,-objc-*,-openmp-*,-readability-avoid-const-params-in-decls,-readability-
-# convert-member-functions-to-static,-readability-magic-numbers,-zircon-*)
-
 if(AMALGAMATION_BUILD)
-
   if(WIN32)
     add_definitions(/bigobj)
   endif()
@@ -34,11 +18,13 @@ if(AMALGAMATION_BUILD)
   add_library(duckdb SHARED "${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp")
   target_link_libraries(duckdb ${CMAKE_DL_LIBS})
   link_threads(duckdb)
+  link_extension_libraries(duckdb)
 
   add_library(duckdb_static STATIC
               "${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp")
   target_link_libraries(duckdb_static ${CMAKE_DL_LIBS})
   link_threads(duckdb_static)
+  link_extension_libraries(duckdb_static)
 
   install(FILES "${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.hpp"
                 "${PROJECT_SOURCE_DIR}/src/include/duckdb.h"
@@ -74,10 +60,12 @@ else()
   add_library(duckdb SHARED ${ALL_OBJECT_FILES})
   target_link_libraries(duckdb ${DUCKDB_LINK_LIBS})
   link_threads(duckdb)
+  link_extension_libraries(duckdb)
 
   add_library(duckdb_static STATIC ${ALL_OBJECT_FILES})
   target_link_libraries(duckdb_static ${DUCKDB_LINK_LIBS})
   link_threads(duckdb_static)
+  link_extension_libraries(duckdb_static)
 
   target_include_directories(
     duckdb PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
diff --git a/src/include/duckdb/main/config.hpp b/src/include/duckdb/main/config.hpp
index 352b56fd3499..879d28950dbd 100644
--- a/src/include/duckdb/main/config.hpp
+++ b/src/include/duckdb/main/config.hpp
@@ -73,6 +73,8 @@ struct DBConfig {
 	idx_t checkpoint_wal_size = 1 << 24;
 	//! Whether or not to use Direct IO, bypassing operating system buffers
 	bool use_direct_io = false;
+	//! Whether extensions should be loaded on start-up
+	bool load_extensions = true;
 	//! The FileSystem to use, can be overwritten to allow for injecting custom file systems for testing purposes (e.g.
 	//! RamFS or something similar)
 	unique_ptr<FileSystem> file_system;
diff --git a/src/include/duckdb/main/extension_helper.hpp b/src/include/duckdb/main/extension_helper.hpp
new file mode 100644
index 000000000000..3d307adf4671
--- /dev/null
+++ b/src/include/duckdb/main/extension_helper.hpp
@@ -0,0 +1,26 @@
+//===----------------------------------------------------------------------===//
+//                         DuckDB
+//
+// duckdb/main/extension_helper.hpp
+//
+//
+//===----------------------------------------------------------------------===//
+
+#pragma once
+
+#include <string>
+#include "duckdb.hpp"
+
+namespace duckdb {
+class DuckDB;
+
+enum class ExtensionLoadResult : uint8_t { LOADED_EXTENSION = 0, EXTENSION_UNKNOWN = 1, NOT_LOADED = 2 };
+
+class ExtensionHelper {
+public:
+	static void LoadAllExtensions(DuckDB &db);
+
+	static ExtensionLoadResult LoadExtension(DuckDB &db, const std::string &extension);
+};
+
+} // namespace duckdb
diff --git a/src/main/CMakeLists.txt b/src/main/CMakeLists.txt
index 6689f56cd478..bd440f05965f 100644
--- a/src/main/CMakeLists.txt
+++ b/src/main/CMakeLists.txt
@@ -16,6 +16,7 @@ add_library_unity(
   config.cpp
   connection.cpp
   database.cpp
+  extension_helper.cpp
   materialized_query_result.cpp
   prepared_statement.cpp
   prepared_statement_data.cpp
@@ -26,3 +27,5 @@ add_library_unity(
 set(ALL_OBJECT_FILES
     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main>
     PARENT_SCOPE)
+
+add_extension_definitions(duckdb_main)
diff --git a/src/main/database.cpp b/src/main/database.cpp
index 94428a4240e3..3da805cdd996 100644
--- a/src/main/database.cpp
+++ b/src/main/database.cpp
@@ -9,6 +9,7 @@
 #include "duckdb/transaction/transaction_manager.hpp"
 #include "duckdb/main/connection_manager.hpp"
 #include "duckdb/function/compression_function.hpp"
+#include "duckdb/main/extension_helper.hpp"
 
 #ifndef DUCKDB_NO_THREADS
 #include "duckdb/common/thread.hpp"
@@ -134,6 +135,9 @@ void DatabaseInstance::Initialize(const char *path, DBConfig *new_config) {
 
 DuckDB::DuckDB(const char *path, DBConfig *new_config) : instance(make_shared<DatabaseInstance>()) {
 	instance->Initialize(path, new_config);
+	if (instance->config.load_extensions) {
+		ExtensionHelper::LoadAllExtensions(*this);
+	}
 }
 
 DuckDB::DuckDB(const string &path, DBConfig *config) : DuckDB(path.c_str(), config) {
@@ -205,6 +209,7 @@ void DatabaseInstance::Configure(DBConfig &new_config) {
 	} else {
 		config.maximum_threads = new_config.maximum_threads;
 	}
+	config.load_extensions = new_config.load_extensions;
 	config.force_compression = new_config.force_compression;
 	config.allocator = move(new_config.allocator);
 	config.checkpoint_wal_size = new_config.checkpoint_wal_size;
diff --git a/src/main/extension_helper.cpp b/src/main/extension_helper.cpp
new file mode 100644
index 000000000000..06680ac7aa4d
--- /dev/null
+++ b/src/main/extension_helper.cpp
@@ -0,0 +1,96 @@
+#include "duckdb/main/extension_helper.hpp"
+
+#ifdef BUILD_ICU_EXTENSION
+#include "icu-extension.hpp"
+#endif
+
+#ifdef BUILD_PARQUET_EXTENSION
+#include "parquet-extension.hpp"
+#endif
+
+#ifdef BUILD_TPCH_EXTENSION
+#include "tpch-extension.hpp"
+#endif
+
+#ifdef BUILD_TPCDS_EXTENSION
+#include "tpcds-extension.hpp"
+#endif
+
+#ifdef BUILD_FTS_EXTENSION
+#include "fts-extension.hpp"
+#endif
+
+#ifdef BUILD_HTTPFS_EXTENSION
+#include "httpfs-extension.hpp"
+#endif
+
+#ifdef BUILD_VISUALIZER_EXTENSION
+#include "visualizer-extension.hpp"
+#endif
+
+namespace duckdb {
+
+void ExtensionHelper::LoadAllExtensions(DuckDB &db) {
+	unordered_set<string> extensions {"parquet", "icu", "tpch", "tpcds", "fts", "httpfs", "visualizer"};
+	for (auto &ext : extensions) {
+		LoadExtension(db, ext);
+	}
+}
+
+ExtensionLoadResult ExtensionHelper::LoadExtension(DuckDB &db, const std::string &extension) {
+	if (extension == "parquet") {
+#ifdef BUILD_PARQUET_EXTENSION
+		db.LoadExtension<ParquetExtension>();
+#else
+		// parquet extension required but not build: skip this test
+		return ExtensionLoadResult::NOT_LOADED;
+#endif
+	} else if (extension == "icu") {
+#ifdef BUILD_ICU_EXTENSION
+		db.LoadExtension<ICUExtension>();
+#else
+		// icu extension required but not build: skip this test
+		return ExtensionLoadResult::NOT_LOADED;
+#endif
+	} else if (extension == "tpch") {
+#ifdef BUILD_TPCH_EXTENSION
+		db.LoadExtension<TPCHExtension>();
+#else
+		// icu extension required but not build: skip this test
+		return ExtensionLoadResult::NOT_LOADED;
+#endif
+	} else if (extension == "tpcds") {
+#ifdef BUILD_TPCDS_EXTENSION
+		db.LoadExtension<TPCDSExtension>();
+#else
+		// icu extension required but not build: skip this test
+		return ExtensionLoadResult::NOT_LOADED;
+#endif
+	} else if (extension == "fts") {
+#ifdef BUILD_FTS_EXTENSION
+		db.LoadExtension<FTSExtension>();
+#else
+		// fts extension required but not build: skip this test
+		return ExtensionLoadResult::NOT_LOADED;
+#endif
+	} else if (extension == "httpfs") {
+#ifdef BUILD_HTTPFS_EXTENSION
+		db.LoadExtension<HTTPFsExtension>();
+#else
+		return ExtensionLoadResult::NOT_LOADED;
+#endif
+	} else if (extension == "visualizer") {
+#ifdef BUILD_VISUALIZER_EXTENSION
+		db.LoadExtension<VisualizerExtension>();
+#else
+		// visualizer extension required but not build: skip this test
+		return ExtensionLoadResult::NOT_LOADED;
+#endif
+	} else {
+		// unknown extension
+		return ExtensionLoadResult::EXTENSION_UNKNOWN;
+	}
+	return ExtensionLoadResult::LOADED_EXTENSION;
+}
+
+} // namespace duckdb
diff --git a/third_party/sqlsmith/duckdb.cc b/third_party/sqlsmith/duckdb.cc
index 880c916fcae8..0ff73ee3e49b 100644
--- a/third_party/sqlsmith/duckdb.cc
+++ b/third_party/sqlsmith/duckdb.cc
@@ -18,7 +18,6 @@ static regex e_syntax("syntax error at or near .*");
 duckdb_connection::duckdb_connection(string &conninfo) {
 	// in-memory database
 	database = make_unique<DuckDB>(nullptr);
-	database->LoadExtension<TPCHExtension>();
 	connection = make_unique<Connection>(*database);
 }
 
diff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp
index db397681685d..41345158c3bb 100644
--- a/tools/jdbc/src/jni/duckdb_java.cpp
+++ b/tools/jdbc/src/jni/duckdb_java.cpp
@@ -2,7 +2,6 @@
 #include "duckdb.hpp"
 #include "duckdb/main/client_context.hpp"
 #include "duckdb/main/appender.hpp"
-#include "parquet-extension.hpp"
 
 using namespace duckdb;
 using namespace std;
@@ -48,7 +47,6 @@ JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1startup(JNI
 	}
 	try {
 		auto db = new DuckDB(database, &config);
-		db->LoadExtension<ParquetExtension>();
 		return env->NewDirectByteBuffer(db, 0);
 	} catch (exception &e) {
 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
diff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp
index 74df614d741c..cae224ff266c 100644
--- a/tools/pythonpkg/src/pyconnection.cpp
+++ b/tools/pythonpkg/src/pyconnection.cpp
@@ -16,8 +16,6 @@
 #include "duckdb/parser/expression/function_expression.hpp"
 #include "duckdb/parser/tableref/table_function_ref.hpp"
 
-#include "extension/extension_helper.hpp"
-
 #include "datetime.h" // from Python
 
 #include <random>
@@ -449,7 +447,6 @@ shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Connect(const string &databas
 	}
 
 	res->database = make_unique<DuckDB>(database, &config);
-	ExtensionHelper::LoadAllExtensions(*res->database);
 	res->connection = make_unique<Connection>(*res->database);
 
 	PandasScanFunction scan_fun;
diff --git a/tools/rest/CMakeLists.txt b/tools/rest/CMakeLists.txt
index e02f2701c243..f7c71c6e4092 100644
--- a/tools/rest/CMakeLists.txt
+++ b/tools/rest/CMakeLists.txt
@@ -12,5 +12,3 @@ add_extension_definitions()
 
 target_link_libraries(duckdb_rest_server duckdb_static ${LINK_EXTRA})
 link_threads(duckdb_rest_server)
-
-link_extension_libraries(duckdb_rest_server)
diff --git a/tools/rest/server.cpp b/tools/rest/server.cpp
index 8579025c5b44..9cf2d9aa0e9c 100644
--- a/tools/rest/server.cpp
+++ b/tools/rest/server.cpp
@@ -9,8 +9,6 @@
 #include "duckdb/common/string_util.hpp"
 #include "duckdb/main/client_context.hpp"
 
-#include "extension_helper.hpp"
-
 // you can set this to enable compression. You will need to link zlib as well.
 // #define CPPHTTPLIB_ZLIB_SUPPORT 1
 #define CPPHTTPLIB_KEEPALIVE_TIMEOUT_USECOND 10000
@@ -331,7 +329,6 @@ int main(int argc, char **argv) {
 	config.maximum_memory = 10737418240;
 
 	DuckDB duckdb(dbfile.empty() ? nullptr : dbfile.c_str(), &config);
-	ExtensionHelper::LoadAllExtensions(duckdb);
 
 	svr.Get("/query", [&](const Request &req, Response &resp) {
 		auto q = req.get_param_value("q");
diff --git a/tools/rpkg/src/database.cpp b/tools/rpkg/src/database.cpp
index fcec6dad152e..fb8c026faa1e 100644
--- a/tools/rpkg/src/database.cpp
+++ b/tools/rpkg/src/database.cpp
@@ -1,6 +1,5 @@
 #include "rapi.hpp"
 #include "duckdb/main/client_context.hpp"
-#include "extension/extension_helper.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 
 using namespace duckdb;
@@ -66,7 +65,6 @@ SEXP RApi::Startup(SEXP dbdirsexp, SEXP readonlysexp, SEXP configsexp) {
 		Rf_error("duckdb_startup_R: Failed to open database: %s", e.what());
 	}
 	D_ASSERT(wrapper->db);
-	ExtensionHelper::LoadAllExtensions(*wrapper->db);
 
 	DataFrameScanFunction scan_fun;
 	CreateTableFunctionInfo info(scan_fun);
diff --git a/tools/sqlite3_api_wrapper/CMakeLists.txt b/tools/sqlite3_api_wrapper/CMakeLists.txt
index 49cdc2d122d7..efb6400ea978 100644
--- a/tools/sqlite3_api_wrapper/CMakeLists.txt
+++ b/tools/sqlite3_api_wrapper/CMakeLists.txt
@@ -14,16 +14,12 @@ add_library(sqlite3_api_wrapper_static STATIC sqlite3_api_wrapper.cpp
 target_link_libraries(sqlite3_api_wrapper_static duckdb_static utf8proc)
 link_threads(sqlite3_api_wrapper_static)
 
-link_extension_libraries(sqlite3_api_wrapper_static)
-
 if(NOT WIN32)
   add_library(sqlite3_api_wrapper SHARED sqlite3_api_wrapper.cpp
                                          ${ALL_OBJECT_FILES})
   target_link_libraries(sqlite3_api_wrapper duckdb ${DUCKDB_EXTRA_LINK_FLAGS})
   link_threads(sqlite3_api_wrapper)
 
-  link_extension_libraries(sqlite3_api_wrapper)
-
   include_directories(../../third_party/catch)
 
   include_directories(test/include)
diff --git a/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp b/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp
index 7477e467da14..6cf2ac29965b 100644
--- a/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp
+++ b/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp
@@ -20,8 +20,6 @@
 #include <cassert>
 #include <climits>
 
-#include "extension_helper.hpp"
-
 using namespace duckdb;
 using namespace std;
 
@@ -96,8 +94,6 @@ int sqlite3_open_v2(const char *filename, /* Database filename (UTF-8) */
 		}
 		pDb->db = make_unique<DuckDB>(filename, &config);
 		pDb->con = make_unique<Connection>(*pDb->db);
-
-		ExtensionHelper::LoadAllExtensions(*pDb->db);
 	} catch (std::exception &ex) {
 		if (pDb) {
 			pDb->last_error = ex.what();
