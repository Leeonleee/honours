{
  "repo": "duckdb/duckdb",
  "pull_number": 5851,
  "instance_id": "duckdb__duckdb-5851",
  "issue_numbers": [
    "5836",
    "5836"
  ],
  "base_commit": "8fa1b6e78631a8f566b9448cb99d9fe8918ec22b",
  "patch": "diff --git a/src/catalog/catalog.cpp b/src/catalog/catalog.cpp\nindex 6f340b874102..3613513adb23 100644\n--- a/src/catalog/catalog.cpp\n+++ b/src/catalog/catalog.cpp\n@@ -741,7 +741,7 @@ idx_t Catalog::GetCatalogVersion() {\n }\n \n idx_t Catalog::ModifyCatalog() {\n-\treturn GetDatabase().GetDatabaseManager().catalog_version++;\n+\treturn GetDatabase().GetDatabaseManager().ModifyCatalog();\n }\n \n bool Catalog::IsSystemCatalog() const {\ndiff --git a/src/include/duckdb/main/database_manager.hpp b/src/include/duckdb/main/database_manager.hpp\nindex e052b8dbbb55..4611e6051c2d 100644\n--- a/src/include/duckdb/main/database_manager.hpp\n+++ b/src/include/duckdb/main/database_manager.hpp\n@@ -52,6 +52,9 @@ class DatabaseManager {\n \ttransaction_t ActiveQueryNumber() const {\n \t\treturn current_query_number;\n \t}\n+\tidx_t ModifyCatalog() {\n+\t\treturn catalog_version++;\n+\t}\n \n private:\n \t//! The system database is a special database that holds system entries (e.g. functions)\ndiff --git a/src/main/client_data.cpp b/src/main/client_data.cpp\nindex 3cb2d157b640..eb1bc6063b8a 100644\n--- a/src/main/client_data.cpp\n+++ b/src/main/client_data.cpp\n@@ -9,6 +9,7 @@\n #include \"duckdb/common/serializer/buffered_file_writer.hpp\"\n #include \"duckdb/main/attached_database.hpp\"\n #include \"duckdb/main/database.hpp\"\n+#include \"duckdb/main/database_manager.hpp\"\n \n namespace duckdb {\n \n@@ -17,6 +18,7 @@ ClientData::ClientData(ClientContext &context) : catalog_search_path(make_unique\n \tprofiler = make_shared<QueryProfiler>(context);\n \tquery_profiler_history = make_unique<QueryProfilerHistory>();\n \ttemporary_objects = make_shared<AttachedDatabase>(db, AttachedDatabaseType::TEMP_DATABASE);\n+\ttemporary_objects->oid = DatabaseManager::Get(db).ModifyCatalog();\n \trandom_engine = make_unique<RandomEngine>();\n \tfile_opener = make_unique<ClientContextFileOpener>(context);\n \ttemporary_objects->Initialize();\ndiff --git a/src/main/database_manager.cpp b/src/main/database_manager.cpp\nindex ea484ebc5bb8..e04e37c4a4d7 100644\n--- a/src/main/database_manager.cpp\n+++ b/src/main/database_manager.cpp\n@@ -32,6 +32,7 @@ AttachedDatabase *DatabaseManager::GetDatabase(ClientContext &context, const str\n \n void DatabaseManager::AddDatabase(ClientContext &context, unique_ptr<AttachedDatabase> db_instance) {\n \tauto name = db_instance->GetName();\n+\tdb_instance->oid = ModifyCatalog();\n \tDependencyList dependencies;\n \tif (default_database.empty()) {\n \t\tdefault_database = name;\n",
  "test_patch": "diff --git a/test/sql/table_function/database_oid.test b/test/sql/table_function/database_oid.test\nnew file mode 100644\nindex 000000000000..a3a3561d6c47\n--- /dev/null\n+++ b/test/sql/table_function/database_oid.test\n@@ -0,0 +1,16 @@\n+# name: test/sql/table_function/database_oid.test\n+# description: Issue #5836: Test database oid\n+# group: [table_function]\n+\n+require noforcestorage\n+\n+statement ok\n+CREATE TEMP TABLE x (x INT);\n+\n+statement ok\n+CREATE TABLE x (x INT);\n+\n+query I\n+SELECT COUNT(DISTINCT database_oid) FROM duckdb_tables();\n+----\n+2\n",
  "problem_statement": "Databases with same oid\n### What happens?\r\n\r\nThe temp and memory/disk databases share the same database oid, later it makes difficult to distinguish.\r\n\r\n### To Reproduce\r\n\r\nOn a brand new database create these two tables:\r\n\r\n```\r\nCREATE TEMP TABLE x (x INT);\r\nCREATE TABLE x (x INT);\r\n```\r\n \r\nThen do:\r\n```\r\nSELECT database_name, database_oid FROM duckdb_tables();\r\n```\r\n\r\nIt will output:\r\n--------------\r\nmemory  0\r\ntemp       0\r\n\r\n\r\n### OS:\r\n\r\nLinux on x86_64\r\n\r\n### DuckDB Version:\r\n\r\nlatest from sources\r\n\r\n### DuckDB Client:\r\n\r\nShell\r\n\r\n### Full Name:\r\n\r\nPedro Ferreira\r\n\r\n### Affiliation:\r\n\r\nHuawei\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\nDatabases with same oid\n### What happens?\r\n\r\nThe temp and memory/disk databases share the same database oid, later it makes difficult to distinguish.\r\n\r\n### To Reproduce\r\n\r\nOn a brand new database create these two tables:\r\n\r\n```\r\nCREATE TEMP TABLE x (x INT);\r\nCREATE TABLE x (x INT);\r\n```\r\n \r\nThen do:\r\n```\r\nSELECT database_name, database_oid FROM duckdb_tables();\r\n```\r\n\r\nIt will output:\r\n--------------\r\nmemory  0\r\ntemp       0\r\n\r\n\r\n### OS:\r\n\r\nLinux on x86_64\r\n\r\n### DuckDB Version:\r\n\r\nlatest from sources\r\n\r\n### DuckDB Client:\r\n\r\nShell\r\n\r\n### Full Name:\r\n\r\nPedro Ferreira\r\n\r\n### Affiliation:\r\n\r\nHuawei\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2023-01-07T18:52:29Z"
}