diff --git a/test/sql/catalog/function/test_simple_macro.test b/test/sql/catalog/function/test_simple_macro.test
index 0b4be7011361..8345e5060304 100644
--- a/test/sql/catalog/function/test_simple_macro.test
+++ b/test/sql/catalog/function/test_simple_macro.test
@@ -137,6 +137,16 @@ SELECT IFELSE(0,'true','false')
 ----
 false
 
+query T
+SELECT IFELSE(a = 1, 'true', 'false') FROM integers
+----
+true
+
+query T
+SELECT IFELSE(a = 0, 'true', 'false') FROM integers
+----
+false
+
 # incorrect number of arguments
 statement error
 SELECT IFELSE();
@@ -206,10 +216,10 @@ CREATE MACRO star() AS *
 
 # macro's with default arguments
 statement error
-CREATE MACRO conflict(a, a=1) AS a + a
+CREATE MACRO conflict(a, a := 1) AS a + a
 
 statement ok
-CREATE MACRO add_default5(a, b=5) AS a + b
+CREATE MACRO add_default5(a, b := 5) AS a + b
 
 statement error
 SELECT add_default5(3, 6)
@@ -220,23 +230,50 @@ SELECT add_default5(3)
 8
 
 query T
-SELECT add_default5(3, b=6)
+SELECT add_default5(3, b := 6)
 ----
 9
 
 statement error
-SELECT add_default5(b=6, 3)
+SELECT add_default5(b := 6, 3)
 
 statement error
-CREATE MACRO wrong_order(a, b=3, c)
+CREATE MACRO wrong_order(a, b := 3, c)
 
 statement error
-CREATE MACRO wrong_order(a=3, b)
+CREATE MACRO wrong_order(a := 3, b)
 
 # only constant default values are allowed
 statement error
-CREATE MACRO select_plus_floats(a, f=b) AS (SELECT a + f FROM floats)
+CREATE MACRO select_plus_floats(a, f := b) AS (SELECT a + f FROM floats)
 
 # +(FLOAT, VARCHAR) does not work - constant types are checked at create time
 statement error
 CREATE MACRO wrong_type(s='not a float') AS (SELECT b + s FROM floats)
+
+statement error
+CREATE MACRO two_default_params(a := 4, a := 2) AS a + a
+
+statement ok
+CREATE MACRO two_default_params(a := 4, b := 2) AS a + b
+
+query T
+SELECT two_default_params()
+----
+6
+
+query T
+SELECT two_default_params(a := 5)
+----
+7
+
+query T
+SELECT two_default_params(b := 3)
+----
+7
+
+statement error
+SELECT two_default_params(a := 5, a := 3)
+
+statement error
+SELECT two_default_params(b := 5, b := 3)
diff --git a/test/sql/fts/test_indexing.test_slow b/test/sql/fts/test_indexing.test_slow
index 8ca648520036..a50c20a69f7b 100644
--- a/test/sql/fts/test_indexing.test_slow
+++ b/test/sql/fts/test_indexing.test_slow
@@ -167,38 +167,38 @@ EXECUTE fts_query(NULL)
 
 # different order by changing the parameters
 query III
-SELECT id, body, author FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked', k=0.6, b=0.1) AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
+SELECT id, body, author FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked', k := 0.6, b := 0.1) AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
 ----
 doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark
 doc1	 QUÁCKING+QUÁCKING+QUÁCKING	Hannes
 
 # no results for conjunctive query because no document contains both 'mark' and 'laurens
 query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', conjunctive=1) AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
+SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', conjunctive := 1) AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
 ----
 
 # strings 'mark' and 'laurens' are not found in the 'body' field of the table 'documents'
 query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields='body') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
+SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields := 'body') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
 ----
 
 # but they are found in the 'author' field!
 query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields='author') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
+SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields := 'author') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
 ----
 doc2
 doc3
 
 # if we search both the 'author' and 'body' fields then we get the same behaviour as leaving the fields empty
 query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields='body,author') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
+SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields := 'body,author') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
 ----
 doc2
 doc3
 
 # if we don't search any fields, we won't get any results
 query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'hannes mark laurens', fields='') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
+SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'hannes mark laurens', fields := '') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
 ----
 
 # re-index with different stopwords table
diff --git a/test/sql/storage/catalog/test_macro_storage.test b/test/sql/storage/catalog/test_macro_storage.test
index 7505345ae143..0654258161e2 100644
--- a/test/sql/storage/catalog/test_macro_storage.test
+++ b/test/sql/storage/catalog/test_macro_storage.test
@@ -49,7 +49,7 @@ endloop
 
 # create a macro without deleting it this time
 statement ok
-CREATE MACRO plus2(a, b=2) AS a + b
+CREATE MACRO plus2(a, b := 2) AS a + b
 
 loop i 0 2
 
