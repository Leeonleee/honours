{
  "repo": "duckdb/duckdb",
  "pull_number": 6300,
  "instance_id": "duckdb__duckdb-6300",
  "issue_numbers": [
    "6276",
    "6276"
  ],
  "base_commit": "8da10c8e33135130b4a0661acc7fbfacae0be668",
  "patch": "diff --git a/src/include/duckdb/main/client_data.hpp b/src/include/duckdb/main/client_data.hpp\nindex 302a830e2042..e83fadf0c98b 100644\n--- a/src/include/duckdb/main/client_data.hpp\n+++ b/src/include/duckdb/main/client_data.hpp\n@@ -11,7 +11,7 @@\n #include \"duckdb/common/common.hpp\"\n #include \"duckdb/common/enums/output_type.hpp\"\n #include \"duckdb/common/types/value.hpp\"\n-#include \"duckdb/common/unordered_map.hpp\"\n+#include \"duckdb/common/case_insensitive_map.hpp\"\n #include \"duckdb/common/atomic.hpp\"\n \n namespace duckdb {\n@@ -39,7 +39,7 @@ struct ClientData {\n \t//! The set of temporary objects that belong to this client\n \tshared_ptr<AttachedDatabase> temporary_objects;\n \t//! The set of bound prepared statements that belong to this client\n-\tunordered_map<string, shared_ptr<PreparedStatementData>> prepared_statements;\n+\tcase_insensitive_map_t<shared_ptr<PreparedStatementData>> prepared_statements;\n \n \t//! The writer used to log queries (if logging is enabled)\n \tunique_ptr<BufferedFileWriter> log_query_writer;\ndiff --git a/src/parser/transform/expression/transform_case.cpp b/src/parser/transform/expression/transform_case.cpp\nindex 72a03e7e3d75..dc13a5f60ca8 100644\n--- a/src/parser/transform/expression/transform_case.cpp\n+++ b/src/parser/transform/expression/transform_case.cpp\n@@ -9,16 +9,16 @@ unique_ptr<ParsedExpression> Transformer::TransformCase(duckdb_libpgquery::PGCas\n \tD_ASSERT(root);\n \n \tauto case_node = make_unique<CaseExpression>();\n+\tauto root_arg = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(root->arg));\n \tfor (auto cell = root->args->head; cell != nullptr; cell = cell->next) {\n \t\tCaseCheck case_check;\n \n \t\tauto w = reinterpret_cast<duckdb_libpgquery::PGCaseWhen *>(cell->data.ptr_value);\n \t\tauto test_raw = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(w->expr));\n \t\tunique_ptr<ParsedExpression> test;\n-\t\tauto arg = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(root->arg));\n-\t\tif (arg) {\n+\t\tif (root_arg) {\n \t\t\tcase_check.when_expr =\n-\t\t\t    make_unique<ComparisonExpression>(ExpressionType::COMPARE_EQUAL, std::move(arg), std::move(test_raw));\n+\t\t\t    make_unique<ComparisonExpression>(ExpressionType::COMPARE_EQUAL, root_arg->Copy(), std::move(test_raw));\n \t\t} else {\n \t\t\tcase_check.when_expr = std::move(test_raw);\n \t\t}\n",
  "test_patch": "diff --git a/test/sql/prepared/test_issue_6276.test b/test/sql/prepared/test_issue_6276.test\nnew file mode 100644\nindex 000000000000..bcc1b979d7ab\n--- /dev/null\n+++ b/test/sql/prepared/test_issue_6276.test\n@@ -0,0 +1,14 @@\n+# name: test/sql/prepared/test_issue_6276.test\n+# description: Issue 6276: Spurious additional parameter required in prepared statement\n+# group: [prepared]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+PREPARE v1 AS SELECT CASE ? WHEN ? THEN ? WHEN ? THEN ? ELSE ? END AS x\n+\n+query I\n+EXECUTE V1(1, 2, 3, 4, 5, 6);\n+----\n+6\n",
  "problem_statement": "Spurious additional parameter required in prepared statement\n### What happens?\n\nDuckDB claims there's an additional parameter needed for a prepared statement (7) when there are only 6 parameter placeholders present.\n\n### To Reproduce\n\n```\r\nIn [6]: import duckdb\r\n\r\nIn [7]: s = \"SELECT CASE ? WHEN ? THEN ? WHEN ? THEN ? ELSE ? END AS x\"\r\n\r\nIn [8]: con = duckdb.connect()\r\n\r\nIn [9]: params = ('foo', 'f', 'F', 'o', 'O', 'foo')\r\n\r\nIn [10]: con.execute(s, params)\r\n---------------------------------------------------------------------------\r\nInvalidInputException                     Traceback (most recent call last)\r\nCell In[10], line 1\r\n----> 1 con.execute(s, params)\r\n\r\nInvalidInputException: Invalid Input Error: Prepared statement needs 7 parameters, 6 given\r\n\r\nIn [11]: len(params)\r\nOut[11]: 6\r\n\r\nIn [12]: s.count(\"?\")\r\nOut[12]: 6\r\n```\n\n### OS:\n\nNixOS\n\n### DuckDB Version:\n\n0.6.1\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nPhillip Cloud\n\n### Affiliation:\n\nVoltron Data\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nSpurious additional parameter required in prepared statement\n### What happens?\n\nDuckDB claims there's an additional parameter needed for a prepared statement (7) when there are only 6 parameter placeholders present.\n\n### To Reproduce\n\n```\r\nIn [6]: import duckdb\r\n\r\nIn [7]: s = \"SELECT CASE ? WHEN ? THEN ? WHEN ? THEN ? ELSE ? END AS x\"\r\n\r\nIn [8]: con = duckdb.connect()\r\n\r\nIn [9]: params = ('foo', 'f', 'F', 'o', 'O', 'foo')\r\n\r\nIn [10]: con.execute(s, params)\r\n---------------------------------------------------------------------------\r\nInvalidInputException                     Traceback (most recent call last)\r\nCell In[10], line 1\r\n----> 1 con.execute(s, params)\r\n\r\nInvalidInputException: Invalid Input Error: Prepared statement needs 7 parameters, 6 given\r\n\r\nIn [11]: len(params)\r\nOut[11]: 6\r\n\r\nIn [12]: s.count(\"?\")\r\nOut[12]: 6\r\n```\n\n### OS:\n\nNixOS\n\n### DuckDB Version:\n\n0.6.1\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nPhillip Cloud\n\n### Affiliation:\n\nVoltron Data\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "I can reproduce this on `master` using the CLI as well:\r\n\r\n```\r\n\u276f build/release/duckdb\r\nv0.7.1-dev11 14a51626cd\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD prepare s as SELECT CASE ? WHEN ? THEN ? WHEN ? THEN ? ELSE ? END AS x;\r\nD execute s('foo', 'f', 'F', 'o', 'O', 'foo');\r\nError: Binder Error: Parameter/argument count mismatch for prepared statement. Expected 7, got 6\r\n```\nI think the issue may be the ? immediately behind the CASE that's probably duplicated in the binder?\nI can reproduce this on `master` using the CLI as well:\r\n\r\n```\r\n\u276f build/release/duckdb\r\nv0.7.1-dev11 14a51626cd\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD prepare s as SELECT CASE ? WHEN ? THEN ? WHEN ? THEN ? ELSE ? END AS x;\r\nD execute s('foo', 'f', 'F', 'o', 'O', 'foo');\r\nError: Binder Error: Parameter/argument count mismatch for prepared statement. Expected 7, got 6\r\n```\nI think the issue may be the ? immediately behind the CASE that's probably duplicated in the binder?",
  "created_at": "2023-02-15T15:07:07Z"
}