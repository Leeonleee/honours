{
  "repo": "duckdb/duckdb",
  "pull_number": 13308,
  "instance_id": "duckdb__duckdb-13308",
  "issue_numbers": [
    "13237",
    "13237"
  ],
  "base_commit": "bfeac16a915749c7e6e12bd2f8e43c92ce4c2ebb",
  "patch": "diff --git a/tools/shell/shell.c b/tools/shell/shell.c\nindex 4fea104d5734..fa0d95a1a266 100644\n--- a/tools/shell/shell.c\n+++ b/tools/shell/shell.c\n@@ -11493,7 +11493,7 @@ static int shell_callback(\n       }\n       if (strcmp(azArg[0], \"logical_plan\") == 0\n             || strcmp(azArg[0], \"logical_opt\") == 0\n-            || strcmp(azArg[0], \"physical_plan\") == 0) { \n+            || strcmp(azArg[0], \"physical_plan\") == 0) {\n         utf8_printf(p->out, \"\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\");\n         utf8_printf(p->out, \"\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\\n\");\n         if (strcmp(azArg[0], \"logical_plan\") == 0) {\n@@ -11682,7 +11682,6 @@ static int shell_callback(\n         }else if( aiType && aiType[i]==SQLITE_INTEGER ){\n           utf8_printf(p->out,\"%s\", azArg[i]);\n         }else if( aiType && aiType[i]==SQLITE_FLOAT ){\n-          char z[50];\n           double r = sqlite3_column_double(p->pStmt, i);\n           sqlite3_uint64 ur;\n           memcpy(&ur,&r,sizeof(r));\n@@ -11691,8 +11690,7 @@ static int shell_callback(\n           }else if( ur==0xfff0000000000000LL ){\n             raw_printf(p->out, \"-1e999\");\n           }else{\n-            sqlite3_snprintf(50,z,\"%!.20g\", r);\n-            raw_printf(p->out, \"%s\", z);\n+            utf8_printf(p->out,\"%s\", azArg[i]);\n           }\n         }else if( aiType && aiType[i]==SQLITE_BLOB && p->pStmt ){\n           const void *pBlob = sqlite3_column_blob(p->pStmt, i);\n",
  "test_patch": "diff --git a/tools/shell/tests/conftest.py b/tools/shell/tests/conftest.py\nindex 71a7cd50ac24..84dba9b4e37a 100644\n--- a/tools/shell/tests/conftest.py\n+++ b/tools/shell/tests/conftest.py\n@@ -36,6 +36,12 @@ def check_stdout(self, expected: Union[str, List[str], bytes]):\n         assert self.status_code == 0\n         assert expected in self.stdout\n \n+    def check_not_exist(self, not_exist: Union[str, List[str], bytes]):\n+        if isinstance(not_exist, list):\n+            not_exist = '\\n'.join(not_exist)\n+        assert self.status_code == 0\n+        assert not_exist not in self.stdout\n+\n     def check_stderr(self, expected: str):\n         assert expected in self.stderr\n \ndiff --git a/tools/shell/tests/test_shell_basics.py b/tools/shell/tests/test_shell_basics.py\nindex df2a6a9d8c5b..e36edbb582b0 100644\n--- a/tools/shell/tests/test_shell_basics.py\n+++ b/tools/shell/tests/test_shell_basics.py\n@@ -619,10 +619,16 @@ def test_mode_insert(shell):\n     test = (\n         ShellTest(shell)\n         .statement(\".mode insert\")\n-        .statement(\"SELECT NULL, 42, 'fourty-two', 42.0;\")\n+        .statement(\"SELECT NULL, 42, 'fourty-two', 42.0, 3.14, 2.71;\")\n     )\n     result = test.run()\n     result.check_stdout('fourty-two')\n+    result.check_stdout('3.14')\n+    result.check_stdout('2.71')\n+    result.check_not_exist('3.140000')\n+    result.check_not_exist('2.709999')\n+    result.check_not_exist('3.139999')\n+    result.check_not_exist('2.710000')\n \n def test_mode_line(shell):\n     test = (\n",
  "problem_statement": "CLI - incorrect decimal representation in \".mode insert\"\n### What happens?\n\nDecimals are being represented incorrectly in \".mode insert\". It looks like there is an implicit cast to `float`.\n\n### To Reproduce\n\n```\r\ncreate table t (a decimal(38,18));\r\ninsert into t values (3.14), (2.71);\r\n\r\nfrom t;\r\n```\r\n\r\nOutput (decimals are precise):\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502          a           \u2502\r\n\u2502    decimal(38,18)    \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 3.140000000000000000 \u2502\r\n\u2502 2.710000000000000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n\r\n```\r\n.mode insert\r\n\r\nfrom t;\r\n```\r\n\r\nOutput (decimals are imprecise):\r\n```\r\nINSERT INTO \"table\"(a) VALUES(3.1400000000000001243);\r\nINSERT INTO \"table\"(a) VALUES(2.7099999999999999644);\r\n```\r\n\n\n### OS:\n\nmacOS 14.5 (M1)\n\n### DuckDB Version:\n\n1.0.0\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nMilan Opath\n\n### Affiliation:\n\nindependent\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\nCLI - incorrect decimal representation in \".mode insert\"\n### What happens?\n\nDecimals are being represented incorrectly in \".mode insert\". It looks like there is an implicit cast to `float`.\n\n### To Reproduce\n\n```\r\ncreate table t (a decimal(38,18));\r\ninsert into t values (3.14), (2.71);\r\n\r\nfrom t;\r\n```\r\n\r\nOutput (decimals are precise):\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502          a           \u2502\r\n\u2502    decimal(38,18)    \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 3.140000000000000000 \u2502\r\n\u2502 2.710000000000000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n\r\n```\r\n.mode insert\r\n\r\nfrom t;\r\n```\r\n\r\nOutput (decimals are imprecise):\r\n```\r\nINSERT INTO \"table\"(a) VALUES(3.1400000000000001243);\r\nINSERT INTO \"table\"(a) VALUES(2.7099999999999999644);\r\n```\r\n\n\n### OS:\n\nmacOS 14.5 (M1)\n\n### DuckDB Version:\n\n1.0.0\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nMilan Opath\n\n### Affiliation:\n\nindependent\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "@milancio42 thanks, I could reproduce the issue.\n@milancio42 thanks, I could reproduce the issue.",
  "created_at": "2024-08-05T12:14:57Z"
}