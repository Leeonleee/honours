You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
C API - Cannot get named parameter type
### What happens?

When using [named parameters](https://duckdb.org/docs/sql/query_syntax/prepared_statements.html#named-parameters-parameter), `duckdb_param_type` always returns `Invalid`. Works fine for other types of parameters.


### To Reproduce


```c
state = duckdb_open(NULL, &db);
state = duckdb_connect(db, &connection);

state = duckdb_prepare(connection, "CREATE TABLE person (name VARCHAR, age BIGINT);", &preparedStatement);
state = duckdb_execute_prepared(preparedStatement, &result);

state = duckdb_prepare(connection, "INSERT INTO person VALUES ('Alice', 37), ('Ana', 35), ('Bob', 41), ('Bea', 25);", &preparedStatement);
state = duckdb_execute_prepared(preparedStatement, &result);

state = duckdb_prepare(connection, "Select * from person where age=$age;", &preparedStatement);

//paramType is Invalid. Works fine if I use positional or auto-incremented parameters.
auto paramType = duckdb_param_type(preparedStatement, 1);
```

### OS:

Windows 11 x64

### DuckDB Version:

1.1.3

### DuckDB Client:

C Api

### Hardware:

_No response_

### Full Name:

Giorgi Dalakishvili

### Affiliation:

Personal

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation/) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/main/capi/prepared-c.cpp]
1: #include "duckdb/main/capi/capi_internal.hpp"
2: #include "duckdb/main/query_result.hpp"
3: #include "duckdb/main/prepared_statement_data.hpp"
4: #include "duckdb/common/types/decimal.hpp"
5: #include "duckdb/common/uhugeint.hpp"
6: #include "duckdb/common/optional_ptr.hpp"
7: #include "duckdb/common/case_insensitive_map.hpp"
8: 
9: using duckdb::case_insensitive_map_t;
10: using duckdb::Connection;
11: using duckdb::date_t;
12: using duckdb::dtime_t;
13: using duckdb::ErrorData;
14: using duckdb::ExtractStatementsWrapper;
15: using duckdb::hugeint_t;
16: using duckdb::LogicalType;
17: using duckdb::MaterializedQueryResult;
18: using duckdb::optional_ptr;
19: using duckdb::PreparedStatementWrapper;
20: using duckdb::QueryResultType;
21: using duckdb::StringUtil;
22: using duckdb::timestamp_t;
23: using duckdb::uhugeint_t;
24: using duckdb::Value;
25: 
26: idx_t duckdb_extract_statements(duckdb_connection connection, const char *query,
27:                                 duckdb_extracted_statements *out_extracted_statements) {
28: 	if (!connection || !query || !out_extracted_statements) {
29: 		return 0;
30: 	}
31: 	auto wrapper = new ExtractStatementsWrapper();
32: 	Connection *conn = reinterpret_cast<Connection *>(connection);
33: 	try {
34: 		wrapper->statements = conn->ExtractStatements(query);
35: 	} catch (const std::exception &ex) {
36: 		ErrorData error(ex);
37: 		wrapper->error = error.Message();
38: 	}
39: 
40: 	*out_extracted_statements = (duckdb_extracted_statements)wrapper;
41: 	return wrapper->statements.size();
42: }
43: 
44: duckdb_state duckdb_prepare_extracted_statement(duckdb_connection connection,
45:                                                 duckdb_extracted_statements extracted_statements, idx_t index,
46:                                                 duckdb_prepared_statement *out_prepared_statement) {
47: 	Connection *conn = reinterpret_cast<Connection *>(connection);
48: 	auto source_wrapper = (ExtractStatementsWrapper *)extracted_statements;
49: 
50: 	if (!connection || !out_prepared_statement || index >= source_wrapper->statements.size()) {
51: 		return DuckDBError;
52: 	}
53: 	auto wrapper = new PreparedStatementWrapper();
54: 	wrapper->statement = conn->Prepare(std::move(source_wrapper->statements[index]));
55: 
56: 	*out_prepared_statement = (duckdb_prepared_statement)wrapper;
57: 	return wrapper->statement->HasError() ? DuckDBError : DuckDBSuccess;
58: }
59: 
60: const char *duckdb_extract_statements_error(duckdb_extracted_statements extracted_statements) {
61: 	auto wrapper = (ExtractStatementsWrapper *)extracted_statements;
62: 	if (!wrapper || wrapper->error.empty()) {
63: 		return nullptr;
64: 	}
65: 	return wrapper->error.c_str();
66: }
67: 
68: duckdb_state duckdb_prepare(duckdb_connection connection, const char *query,
69:                             duckdb_prepared_statement *out_prepared_statement) {
70: 	if (!connection || !query || !out_prepared_statement) {
71: 		return DuckDBError;
72: 	}
73: 	auto wrapper = new PreparedStatementWrapper();
74: 	Connection *conn = reinterpret_cast<Connection *>(connection);
75: 	wrapper->statement = conn->Prepare(query);
76: 	*out_prepared_statement = (duckdb_prepared_statement)wrapper;
77: 	return !wrapper->statement->HasError() ? DuckDBSuccess : DuckDBError;
78: }
79: 
80: const char *duckdb_prepare_error(duckdb_prepared_statement prepared_statement) {
81: 	auto wrapper = reinterpret_cast<PreparedStatementWrapper *>(prepared_statement);
82: 	if (!wrapper || !wrapper->statement || !wrapper->statement->HasError()) {
83: 		return nullptr;
84: 	}
85: 	return wrapper->statement->error.Message().c_str();
86: }
87: 
88: idx_t duckdb_nparams(duckdb_prepared_statement prepared_statement) {
89: 	auto wrapper = reinterpret_cast<PreparedStatementWrapper *>(prepared_statement);
90: 	if (!wrapper || !wrapper->statement || wrapper->statement->HasError()) {
91: 		return 0;
92: 	}
93: 	return wrapper->statement->named_param_map.size();
94: }
95: 
96: static duckdb::string duckdb_parameter_name_internal(duckdb_prepared_statement prepared_statement, idx_t index) {
97: 	auto wrapper = (PreparedStatementWrapper *)prepared_statement;
98: 	if (!wrapper || !wrapper->statement || wrapper->statement->HasError()) {
99: 		return duckdb::string();
100: 	}
101: 	if (index > wrapper->statement->named_param_map.size()) {
102: 		return duckdb::string();
103: 	}
104: 	for (auto &item : wrapper->statement->named_param_map) {
105: 		auto &identifier = item.first;
106: 		auto &param_idx = item.second;
107: 		if (param_idx == index) {
108: 			// Found the matching parameter
109: 			return identifier;
110: 		}
111: 	}
112: 	// No parameter was found with this index
113: 	return duckdb::string();
114: }
115: 
116: const char *duckdb_parameter_name(duckdb_prepared_statement prepared_statement, idx_t index) {
117: 	auto identifier = duckdb_parameter_name_internal(prepared_statement, index);
118: 	if (identifier == duckdb::string()) {
119: 		return NULL;
120: 	}
121: 	return strdup(identifier.c_str());
122: }
123: 
124: duckdb_type duckdb_param_type(duckdb_prepared_statement prepared_statement, idx_t param_idx) {
125: 	auto logical_type = duckdb_param_logical_type(prepared_statement, param_idx);
126: 	if (!logical_type) {
127: 		return DUCKDB_TYPE_INVALID;
128: 	}
129: 
130: 	auto type = duckdb_get_type_id(logical_type);
131: 
132: 	duckdb_destroy_logical_type(&logical_type);
133: 
134: 	return type;
135: }
136: 
137: duckdb_logical_type duckdb_param_logical_type(duckdb_prepared_statement prepared_statement, idx_t param_idx) {
138: 	auto wrapper = reinterpret_cast<PreparedStatementWrapper *>(prepared_statement);
139: 	if (!wrapper || !wrapper->statement || wrapper->statement->HasError()) {
140: 		return nullptr;
141: 	}
142: 	LogicalType param_type;
143: 	auto identifier = std::to_string(param_idx);
144: 	if (wrapper->statement->data->TryGetType(identifier, param_type)) {
145: 		return reinterpret_cast<duckdb_logical_type>(new LogicalType(param_type));
146: 	}
147: 	// The value_map is gone after executing the prepared statement
148: 	// See if this is the case and we still have a value registered for it
149: 	auto it = wrapper->values.find(identifier);
150: 	if (it != wrapper->values.end()) {
151: 		return reinterpret_cast<duckdb_logical_type>(new LogicalType(it->second.return_type));
152: 	}
153: 	return nullptr;
154: }
155: 
156: duckdb_state duckdb_clear_bindings(duckdb_prepared_statement prepared_statement) {
157: 	auto wrapper = reinterpret_cast<PreparedStatementWrapper *>(prepared_statement);
158: 	if (!wrapper || !wrapper->statement || wrapper->statement->HasError()) {
159: 		return DuckDBError;
160: 	}
161: 	wrapper->values.clear();
162: 	return DuckDBSuccess;
163: }
164: 
165: duckdb_state duckdb_bind_value(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_value val) {
166: 	auto value = reinterpret_cast<Value *>(val);
167: 	auto wrapper = reinterpret_cast<PreparedStatementWrapper *>(prepared_statement);
168: 	if (!wrapper || !wrapper->statement || wrapper->statement->HasError()) {
169: 		return DuckDBError;
170: 	}
171: 	if (param_idx <= 0 || param_idx > wrapper->statement->named_param_map.size()) {
172: 		wrapper->statement->error =
173: 		    duckdb::InvalidInputException("Can not bind to parameter number %d, statement only has %d parameter(s)",
174: 		                                  param_idx, wrapper->statement->named_param_map.size());
175: 		return DuckDBError;
176: 	}
177: 	auto identifier = duckdb_parameter_name_internal(prepared_statement, param_idx);
178: 	wrapper->values[identifier] = duckdb::BoundParameterData(*value);
179: 	return DuckDBSuccess;
180: }
181: 
182: duckdb_state duckdb_bind_parameter_index(duckdb_prepared_statement prepared_statement, idx_t *param_idx_out,
183:                                          const char *name_p) {
184: 	auto wrapper = (PreparedStatementWrapper *)prepared_statement;
185: 	if (!wrapper || !wrapper->statement || wrapper->statement->HasError()) {
186: 		return DuckDBError;
187: 	}
188: 	if (!name_p || !param_idx_out) {
189: 		return DuckDBError;
190: 	}
191: 	auto name = std::string(name_p);
192: 	for (auto &pair : wrapper->statement->named_param_map) {
193: 		if (duckdb::StringUtil::CIEquals(pair.first, name)) {
194: 			*param_idx_out = pair.second;
195: 			return DuckDBSuccess;
196: 		}
197: 	}
198: 	return DuckDBError;
199: }
200: 
201: duckdb_state duckdb_bind_boolean(duckdb_prepared_statement prepared_statement, idx_t param_idx, bool val) {
202: 	auto value = Value::BOOLEAN(val);
203: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
204: }
205: 
206: duckdb_state duckdb_bind_int8(duckdb_prepared_statement prepared_statement, idx_t param_idx, int8_t val) {
207: 	auto value = Value::TINYINT(val);
208: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
209: }
210: 
211: duckdb_state duckdb_bind_int16(duckdb_prepared_statement prepared_statement, idx_t param_idx, int16_t val) {
212: 	auto value = Value::SMALLINT(val);
213: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
214: }
215: 
216: duckdb_state duckdb_bind_int32(duckdb_prepared_statement prepared_statement, idx_t param_idx, int32_t val) {
217: 	auto value = Value::INTEGER(val);
218: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
219: }
220: 
221: duckdb_state duckdb_bind_int64(duckdb_prepared_statement prepared_statement, idx_t param_idx, int64_t val) {
222: 	auto value = Value::BIGINT(val);
223: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
224: }
225: 
226: static hugeint_t duckdb_internal_hugeint(duckdb_hugeint val) {
227: 	hugeint_t internal;
228: 	internal.lower = val.lower;
229: 	internal.upper = val.upper;
230: 	return internal;
231: }
232: 
233: static uhugeint_t duckdb_internal_uhugeint(duckdb_uhugeint val) {
234: 	uhugeint_t internal;
235: 	internal.lower = val.lower;
236: 	internal.upper = val.upper;
237: 	return internal;
238: }
239: 
240: duckdb_state duckdb_bind_hugeint(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_hugeint val) {
241: 	auto value = Value::HUGEINT(duckdb_internal_hugeint(val));
242: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
243: }
244: 
245: duckdb_state duckdb_bind_uhugeint(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_uhugeint val) {
246: 	auto value = Value::UHUGEINT(duckdb_internal_uhugeint(val));
247: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
248: }
249: 
250: duckdb_state duckdb_bind_uint8(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint8_t val) {
251: 	auto value = Value::UTINYINT(val);
252: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
253: }
254: 
255: duckdb_state duckdb_bind_uint16(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint16_t val) {
256: 	auto value = Value::USMALLINT(val);
257: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
258: }
259: 
260: duckdb_state duckdb_bind_uint32(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint32_t val) {
261: 	auto value = Value::UINTEGER(val);
262: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
263: }
264: 
265: duckdb_state duckdb_bind_uint64(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint64_t val) {
266: 	auto value = Value::UBIGINT(val);
267: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
268: }
269: 
270: duckdb_state duckdb_bind_float(duckdb_prepared_statement prepared_statement, idx_t param_idx, float val) {
271: 	auto value = Value::FLOAT(val);
272: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
273: }
274: 
275: duckdb_state duckdb_bind_double(duckdb_prepared_statement prepared_statement, idx_t param_idx, double val) {
276: 	auto value = Value::DOUBLE(val);
277: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
278: }
279: 
280: duckdb_state duckdb_bind_date(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_date val) {
281: 	auto value = Value::DATE(date_t(val.days));
282: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
283: }
284: 
285: duckdb_state duckdb_bind_time(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_time val) {
286: 	auto value = Value::TIME(dtime_t(val.micros));
287: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
288: }
289: 
290: duckdb_state duckdb_bind_timestamp(duckdb_prepared_statement prepared_statement, idx_t param_idx,
291:                                    duckdb_timestamp val) {
292: 	auto value = Value::TIMESTAMP(timestamp_t(val.micros));
293: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
294: }
295: 
296: duckdb_state duckdb_bind_timestamp_tz(duckdb_prepared_statement prepared_statement, idx_t param_idx,
297:                                       duckdb_timestamp val) {
298: 	auto value = Value::TIMESTAMPTZ(duckdb::timestamp_tz_t(val.micros));
299: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
300: }
301: 
302: duckdb_state duckdb_bind_interval(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_interval val) {
303: 	auto value = Value::INTERVAL(val.months, val.days, val.micros);
304: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
305: }
306: 
307: duckdb_state duckdb_bind_varchar(duckdb_prepared_statement prepared_statement, idx_t param_idx, const char *val) {
308: 	try {
309: 		auto value = Value(val);
310: 		return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
311: 	} catch (...) {
312: 		return DuckDBError;
313: 	}
314: }
315: 
316: duckdb_state duckdb_bind_varchar_length(duckdb_prepared_statement prepared_statement, idx_t param_idx, const char *val,
317:                                         idx_t length) {
318: 	try {
319: 		auto value = Value(std::string(val, length));
320: 		return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
321: 	} catch (...) {
322: 		return DuckDBError;
323: 	}
324: }
325: 
326: duckdb_state duckdb_bind_decimal(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_decimal val) {
327: 	auto hugeint_val = duckdb_internal_hugeint(val.value);
328: 	if (val.width > duckdb::Decimal::MAX_WIDTH_INT64) {
329: 		auto value = Value::DECIMAL(hugeint_val, val.width, val.scale);
330: 		return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
331: 	}
332: 	auto value = hugeint_val.lower;
333: 	auto duck_val = Value::DECIMAL((int64_t)value, val.width, val.scale);
334: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&duck_val);
335: }
336: 
337: duckdb_state duckdb_bind_blob(duckdb_prepared_statement prepared_statement, idx_t param_idx, const void *data,
338:                               idx_t length) {
339: 	auto value = Value::BLOB(duckdb::const_data_ptr_cast(data), length);
340: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
341: }
342: 
343: duckdb_state duckdb_bind_null(duckdb_prepared_statement prepared_statement, idx_t param_idx) {
344: 	auto value = Value();
345: 	return duckdb_bind_value(prepared_statement, param_idx, (duckdb_value)&value);
346: }
347: 
348: duckdb_state duckdb_execute_prepared(duckdb_prepared_statement prepared_statement, duckdb_result *out_result) {
349: 	auto wrapper = reinterpret_cast<PreparedStatementWrapper *>(prepared_statement);
350: 	if (!wrapper || !wrapper->statement || wrapper->statement->HasError()) {
351: 		return DuckDBError;
352: 	}
353: 
354: 	duckdb::unique_ptr<duckdb::QueryResult> result;
355: 	try {
356: 		result = wrapper->statement->Execute(wrapper->values, false);
357: 	} catch (...) {
358: 		return DuckDBError;
359: 	}
360: 	return DuckDBTranslateResult(std::move(result), out_result);
361: }
362: 
363: duckdb_state duckdb_execute_prepared_streaming(duckdb_prepared_statement prepared_statement,
364:                                                duckdb_result *out_result) {
365: 	auto wrapper = reinterpret_cast<PreparedStatementWrapper *>(prepared_statement);
366: 	if (!wrapper || !wrapper->statement || wrapper->statement->HasError()) {
367: 		return DuckDBError;
368: 	}
369: 
370: 	auto result = wrapper->statement->Execute(wrapper->values, true);
371: 	return DuckDBTranslateResult(std::move(result), out_result);
372: }
373: 
374: duckdb_statement_type duckdb_prepared_statement_type(duckdb_prepared_statement statement) {
375: 	if (!statement) {
376: 		return DUCKDB_STATEMENT_TYPE_INVALID;
377: 	}
378: 	auto stmt = reinterpret_cast<PreparedStatementWrapper *>(statement);
379: 
380: 	return StatementTypeToC(stmt->statement->GetStatementType());
381: }
382: 
383: template <class T>
384: void duckdb_destroy(void **wrapper) {
385: 	if (!wrapper) {
386: 		return;
387: 	}
388: 
389: 	auto casted = (T *)*wrapper;
390: 	if (casted) {
391: 		delete casted;
392: 	}
393: 	*wrapper = nullptr;
394: }
395: 
396: void duckdb_destroy_extracted(duckdb_extracted_statements *extracted_statements) {
397: 	duckdb_destroy<ExtractStatementsWrapper>(reinterpret_cast<void **>(extracted_statements));
398: }
399: 
400: void duckdb_destroy_prepare(duckdb_prepared_statement *prepared_statement) {
401: 	duckdb_destroy<PreparedStatementWrapper>(reinterpret_cast<void **>(prepared_statement));
402: }
[end of src/main/capi/prepared-c.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: