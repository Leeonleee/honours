{
  "repo": "duckdb/duckdb",
  "pull_number": 14952,
  "instance_id": "duckdb__duckdb-14952",
  "issue_numbers": [
    "14904"
  ],
  "base_commit": "1a3d614f0eec5a2198af8ba4ea06eb9adee9d5f8",
  "patch": "diff --git a/src/main/capi/prepared-c.cpp b/src/main/capi/prepared-c.cpp\nindex 0b8ba116a808..a065f41a5350 100644\n--- a/src/main/capi/prepared-c.cpp\n+++ b/src/main/capi/prepared-c.cpp\n@@ -139,8 +139,14 @@ duckdb_logical_type duckdb_param_logical_type(duckdb_prepared_statement prepared\n \tif (!wrapper || !wrapper->statement || wrapper->statement->HasError()) {\n \t\treturn nullptr;\n \t}\n+\n+\tauto identifier = duckdb_parameter_name_internal(prepared_statement, param_idx);\n+\tif (identifier == duckdb::string()) {\n+\t\treturn nullptr;\n+\t}\n+\n \tLogicalType param_type;\n-\tauto identifier = std::to_string(param_idx);\n+\n \tif (wrapper->statement->data->TryGetType(identifier, param_type)) {\n \t\treturn reinterpret_cast<duckdb_logical_type>(new LogicalType(param_type));\n \t}\n",
  "test_patch": "diff --git a/test/api/capi/test_capi_prepared.cpp b/test/api/capi/test_capi_prepared.cpp\nindex 1f07cdb74f07..bddc23f9d919 100644\n--- a/test/api/capi/test_capi_prepared.cpp\n+++ b/test/api/capi/test_capi_prepared.cpp\n@@ -351,6 +351,13 @@ TEST_CASE(\"Test prepared statements with named parameters in C API\", \"[capi]\") {\n \tstatus = duckdb_bind_parameter_index(stmt, &parameter_index, \"my_val\");\n \tREQUIRE(status == DuckDBSuccess);\n \n+\tREQUIRE(duckdb_param_type(stmt, 1) == DUCKDB_TYPE_BIGINT);\n+\n+\tauto logical_type = duckdb_param_logical_type(stmt, 1);\n+\tREQUIRE(logical_type);\n+\tREQUIRE(duckdb_get_type_id(logical_type) == DUCKDB_TYPE_BIGINT);\n+\tduckdb_destroy_logical_type(&logical_type);\n+\n \tidx_t param_count = duckdb_nparams(stmt);\n \tduckdb::vector<string> names;\n \tfor (idx_t i = 0; i < param_count; i++) {\n",
  "problem_statement": "C API - Cannot get named parameter type\n### What happens?\r\n\r\nWhen using [named parameters](https://duckdb.org/docs/sql/query_syntax/prepared_statements.html#named-parameters-parameter), `duckdb_param_type` always returns `Invalid`. Works fine for other types of parameters.\r\n\r\n\r\n### To Reproduce\r\n\r\n\r\n```c\r\nstate = duckdb_open(NULL, &db);\r\nstate = duckdb_connect(db, &connection);\r\n\r\nstate = duckdb_prepare(connection, \"CREATE TABLE person (name VARCHAR, age BIGINT);\", &preparedStatement);\r\nstate = duckdb_execute_prepared(preparedStatement, &result);\r\n\r\nstate = duckdb_prepare(connection, \"INSERT INTO person VALUES ('Alice', 37), ('Ana', 35), ('Bob', 41), ('Bea', 25);\", &preparedStatement);\r\nstate = duckdb_execute_prepared(preparedStatement, &result);\r\n\r\nstate = duckdb_prepare(connection, \"Select * from person where age=$age;\", &preparedStatement);\r\n\r\n//paramType is Invalid. Works fine if I use positional or auto-incremented parameters.\r\nauto paramType = duckdb_param_type(preparedStatement, 1);\r\n```\r\n\r\n### OS:\r\n\r\nWindows 11 x64\r\n\r\n### DuckDB Version:\r\n\r\n1.1.3\r\n\r\n### DuckDB Client:\r\n\r\nC Api\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nGiorgi Dalakishvili\r\n\r\n### Affiliation:\r\n\r\nPersonal\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "I looked into this a little while ago, and noticed that the code path for `duckdb_param_type` [converts the provided index directly to a string](https://github.com/duckdb/duckdb/blob/448b46937fcafdc789b053536d093ef22b9105b5/src/main/capi/prepared-c.cpp#L143), without using the `named_param_map` as is done [elsewhere](https://github.com/duckdb/duckdb/blob/448b46937fcafdc789b053536d093ef22b9105b5/src/main/capi/prepared-c.cpp#L104). This seems likely to be the problem.",
  "created_at": "2024-11-23T19:35:21Z"
}