diff --git a/test/optimizer/deliminator.test b/test/optimizer/deliminator.test
index 0649337fac6c..a401c35601aa 100644
--- a/test/optimizer/deliminator.test
+++ b/test/optimizer/deliminator.test
@@ -181,22 +181,3 @@ NULL	0
 1	1
 2	1
 3	0
-
-# FTS
-require fts
-
-require no_alternative_verify
-
-statement ok
-CREATE TABLE documents(id VARCHAR, body VARCHAR)
-
-statement ok
-INSERT INTO documents VALUES ('doc1', ' QUÁCKING+QUÁCKING+QUÁCKING'), ('doc2', ' BÁRKING+BÁRKING+BÁRKING+BÁRKING'), ('doc3', ' MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999')
-
-statement ok
-PRAGMA create_fts_index('documents', 'id', 'body', overwrite=1)
-
-query II
-EXPLAIN SELECT score, id, body FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
-logical_opt	<!REGEX>:.*DELIM_JOIN.*
diff --git a/test/sql/fts/issue_12330.test b/test/sql/fts/issue_12330.test
deleted file mode 100644
index 9a68d66f847f..000000000000
--- a/test/sql/fts/issue_12330.test
+++ /dev/null
@@ -1,36 +0,0 @@
-# name: test/sql/fts/issue_12330.test
-# description: Issue 12330: BM25 matching scores seems to be invalid
-# group: [fts]
-
-# issue #7384 and #8141
-
-require fts
-
-require noalternativeverify
-
-statement ok
-CREATE OR REPLACE TABLE documents (
-    id VARCHAR,
-    content VARCHAR
-);
-
-statement ok
-INSERT INTO documents VALUES
-    ('doc1', 'DuckDB database lorem'),
-    ('doc2', 'DuckDB database ipsum'),
-    ('doc3', 'DuckDB database ipsum dolor');
-
-statement ok
-PRAGMA create_fts_index('documents', 'id', 'content');
-
-query I
-SELECT
-    id
-FROM
-    documents
-ORDER BY
-    fts_main_documents.match_bm25(id, 'DuckDB database ipsum') DESC;
-----
-doc2
-doc3
-doc1
diff --git a/test/sql/fts/issue_13866.test b/test/sql/fts/issue_13866.test
deleted file mode 100644
index 6334ebd5a8dc..000000000000
--- a/test/sql/fts/issue_13866.test
+++ /dev/null
@@ -1,13 +0,0 @@
-# name: test/sql/fts/issue_13866.test
-# description: Issue 13866: FTS ignore regex to include single quote
-# group: [fts]
-
-require fts
-
-require noalternativeverify
-
-statement ok
-CREATE TABLE my_table AS SELECT 1 AS CustomerId, 'hans' as CustomerName
-
-statement ok
-PRAGMA create_fts_index(my_table, 'CustomerId', 'CustomerName', ignore='(\\.|[^a-z0-9''])+')
diff --git a/test/sql/fts/test_fts_attach.test b/test/sql/fts/test_fts_attach.test
deleted file mode 100644
index 9d9003674f03..000000000000
--- a/test/sql/fts/test_fts_attach.test
+++ /dev/null
@@ -1,67 +0,0 @@
-# name: test/sql/fts/test_fts_attach.test
-# description: Test FTS and attach
-# group: [fts]
-
-# issue #7384 and #8141
-
-require fts
-
-require skip_reload
-
-require no_alternative_verify
-
-statement ok
-ATTACH '__TEST_DIR__/tester.db' as search_con
-
-statement ok
-CREATE TABLE search_con.main.my_table AS SELECT 1 AS CustomerId, 'hans' as CustomerName
-
-statement ok
-PRAGMA create_fts_index(search_con.main.my_table, 'CustomerId', 'CustomerName')
-
-statement ok
-SELECT search_con.fts_main_my_table.match_bm25(1, 'han')
-
-statement ok
-DETACH search_con
-
-# test reopened #8141
-load __TEST_DIR__/index.db
-
-statement ok
-CREATE TABLE data AS SELECT 0 __index, 0 id, 'lorem ipsum' nl, NULL code;
-
-statement ok
-PRAGMA create_fts_index('data', '__index', '*', overwrite=1);
-
-# test that it works before doing the problematic stuff
-query IIII
-SELECT * FROM data WHERE fts_main_data.match_bm25(__index, 'lorem') IS NOT NULL;
-----
-0	0	lorem ipsum	NULL
-
-statement ok
-ATTACH ':memory:' AS memory;
-
-statement ok
-USE memory;
-
-statement ok
-DETACH "index";
-
-# now attach again
-statement ok
-ATTACH '__TEST_DIR__/index.db' AS db;
-
-statement ok
-USE db;
-
-query T
-SELECT COUNT(*) FROM data;
-----
-1
-
-query IIII
-SELECT * FROM data WHERE fts_main_data.match_bm25(__index, 'lorem') IS NOT NULL;
-----
-0	0	lorem ipsum	NULL
diff --git a/test/sql/fts/test_indexing.test_slow b/test/sql/fts/test_indexing.test_slow
deleted file mode 100644
index e633dd38b95a..000000000000
--- a/test/sql/fts/test_indexing.test_slow
+++ /dev/null
@@ -1,259 +0,0 @@
-# name: test/sql/fts/test_indexing.test_slow
-# description: Full text search indexing
-# group: [fts]
-
-require skip_reload
-
-require fts
-
-require no_alternative_verify
-
-statement ok
-PRAGMA enable_verification
-
-statement error
-PRAGMA drop_fts_index('test')
-----
-
-statement ok
-CREATE SCHEMA fts_main_test
-
-statement ok
-PRAGMA drop_fts_index('test')
-
-statement ok
-CREATE TABLE documents(id VARCHAR, body VARCHAR)
-
-statement ok
-INSERT INTO documents VALUES ('doc1', ' QUÁCKING+QUÁCKING+QUÁCKING'), ('doc2', ' BÁRKING+BÁRKING+BÁRKING+BÁRKING'), ('doc3', ' MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999')
-
-# non-existant parameters should yield an error
-statement error
-PRAGMA create_fts_index('documents', 'id', 'body', nonexistant_param='dummy')
-----
-
-# test different stemmer
-statement ok
-PRAGMA create_fts_index('documents', 'id', 'body', stemmer='turkish')
-
-# cannot overwrite without supplying the 'overwrite' param
-statement error
-PRAGMA create_fts_index('documents', 'id', 'body')
-----
-
-statement ok
-PRAGMA create_fts_index('documents', 'id', 'body', overwrite=true)
-
-# drop and re-create
-statement ok
-PRAGMA drop_fts_index('documents')
-
-statement error
-PRAGMA create_fts_index('documents', 'id', 'body', stopwords='nonexistant_stopwords_table')
-----
-
-statement ok
-PRAGMA create_fts_index('documents', 'id', 'body', stopwords='english')
-
-query III
-SELECT termid, docid, fieldid FROM fts_main_documents.terms
-----
-0	0	0
-0	0	0
-0	0	0
-1	1	0
-1	1	0
-1	1	0
-1	1	0
-2	2	0
-2	2	0
-2	2	0
-2	2	0
-2	2	0
-
-query III
-SELECT name, docid, len FROM fts_main_documents.docs
-----
-doc1	0	3
-doc2	1	4
-doc3	2	5
-
-query III
-SELECT termid, term, df FROM fts_main_documents.dict
-----
-0	quack	1
-1	bark	1
-2	meow	1
-
-query T
-WITH ppterms AS (SELECT stem(unnest(string_split_regex(regexp_replace(lower(strip_accents('QUÁCKED BÁRKED')), '[^a-z]', ' ', 'g'), '\s+')), 'porter') AS term),
-qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term)
-SELECT * FROM qtermids
-----
-0
-1
-
-query II
-WITH ppterms AS (SELECT stem(unnest(string_split_regex(regexp_replace(lower(strip_accents('QUÁCKED BÁRKED')), '[^a-z]', ' ', 'g'), '\s+')), 'porter') AS term),
-qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term),
-qterms AS (SELECT termid, docid FROM fts_main_documents.terms AS terms WHERE termid IN (SELECT qtermids.termid FROM qtermids))
-SELECT * FROM qterms
-----
-0	0
-0	0
-0	0
-1	1
-1	1
-1	1
-1	1
-
-# log((3 - df + 0.5) / (df + 0.5)) -- number of documents = 3
-# (len / 4) -- average document length is 4
-# HAVING COUNT(DISTINCT termid) = 3 -- commented this out because there is no document with all terms present
-query II
-WITH ppterms AS (SELECT stem(unnest(string_split_regex(regexp_replace(lower(strip_accents('QUÁCKED BÁRKED')), '[^a-z]', ' ', 'g'), '\s+')), 'porter') AS term),
-qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term),
-qterms AS (SELECT termid, docid FROM fts_main_documents.terms AS terms WHERE termid IN (SELECT qtermids.termid FROM qtermids)),
-subscores AS (
-SELECT docs.docid, len, term_tf.termid,
-        tf, df, (log((3 - df + 0.5) / (df + 0.5))* ((tf * (1.2 + 1)/(tf + 1.2 * (1 - 0.75 + 0.75 * (len / 4)))))) AS subscore
-FROM (SELECT termid, docid, COUNT(*) AS tf FROM qterms
-    GROUP BY docid, termid) AS term_tf
-    JOIN (SELECT docid FROM qterms
-        GROUP BY docid) -- HAVING COUNT(DISTINCT termid) = 3)
-        AS cdocs ON term_tf.docid = cdocs.docid
-    JOIN fts_main_documents.docs AS docs ON term_tf.docid = docs.docid
-    JOIN fts_main_documents.dict AS dict ON term_tf.termid = dict.termid)
-SELECT name, score FROM (SELECT docid, sum(subscore) AS score
-    FROM subscores GROUP BY docid) AS scores JOIN fts_main_documents.docs AS docs ON
-    scores.docid = docs.docid ORDER BY score DESC LIMIT 1000
-----
-doc2	0.3754363455046031
-doc1	0.36835264087244074
-
-# now test the actual match macro
-query III
-SELECT score, id, body FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
-0.7208701623069375	doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING
-0.7072688384898254	doc1	 QUÁCKING+QUÁCKING+QUÁCKING
-
-# drop and re-create, but index both the 'body' and 'author' column this time
-statement ok
-PRAGMA drop_fts_index('documents')
-
-statement ok
-DROP TABLE documents
-
-statement ok
-CREATE TABLE documents(id VARCHAR, body VARCHAR, author VARCHAR)
-
-statement ok
-INSERT INTO documents VALUES ('doc1', ' QUÁCKING+QUÁCKING+QUÁCKING', 'Hannes'), ('doc2', ' BÁRKING+BÁRKING+BÁRKING+BÁRKING', 'Mark'), ('doc3', ' MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999', 'Laurens')
-
-statement ok
-PRAGMA create_fts_index('main.documents', 'id', 'body', 'author')
-
-# prepared statement for easier use
-statement ok
-PREPARE fts_query AS (WITH scored_docs AS (SELECT *, fts_main_documents.match_bm25(id, ?) AS score FROM documents) SELECT id, body, author FROM scored_docs WHERE score IS NOT NULL ORDER BY score DESC)
-
-query III
-EXECUTE fts_query('hannes')
-----
-doc1	 QUÁCKING+QUÁCKING+QUÁCKING	Hannes
-
-query III
-EXECUTE fts_query('mark laurens')
-----
-doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark
-doc3	 MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999	Laurens
-
-query III
-EXECUTE fts_query(NULL)
-----
-
-# different order by changing the parameters
-query III
-SELECT id, body, author FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked', k := 0.6, b := 0.1) AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
-doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark
-doc1	 QUÁCKING+QUÁCKING+QUÁCKING	Hannes
-
-# no results for conjunctive query because no document contains both 'mark' and 'laurens
-query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', conjunctive := 1) AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
-
-# strings 'mark' and 'laurens' are not found in the 'body' field of the table 'documents'
-query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields := 'body') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
-
-# but they are found in the 'author' field!
-query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields := 'author') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
-doc2
-doc3
-
-# if we search both the 'author' and 'body' fields then we get the same behaviour as leaving the fields empty
-query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields := 'body,author') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
-doc2
-doc3
-
-# if we don't search any fields, we won't get any results
-query I
-SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'hannes mark laurens', fields := '') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
-
-# re-index with different stopwords table
-statement ok
-PRAGMA drop_fts_index('documents')
-
-statement ok
-CREATE TABLE my_stopwords (word VARCHAR)
-
-statement ok
-INSERT INTO my_stopwords VALUES ('quacking')
-
-statement ok
-PRAGMA create_fts_index('documents', 'id', 'body', stopwords='my_stopwords')
-
-# the word 'quacking' is no longer indexed, therefore doc1 is no longer retrieved with this query
-query III
-SELECT id, body, author FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
-doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark
-
-# re-index with a custom whitelist, so that we can retrieve documents by searching on numbers
-statement ok
-PRAGMA drop_fts_index('documents')
-
-statement ok
-PRAGMA create_fts_index('documents', 'id', 'body', ignore='(\\.|[^a-z0-9])+')
-
-query I
-SELECT body FROM (SELECT *, fts_main_documents.match_bm25(id, '999') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
-----
- MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999
-
-# re-index with '*' to index all columns
-statement ok
-PRAGMA drop_fts_index('documents')
-
-statement ok
-PRAGMA create_fts_index('documents', 'id', '*', stopwords='english')
-
-# prepared statement again for easier use
-statement ok
-PREPARE fts_query AS (WITH scored_docs AS (SELECT *, fts_main_documents.match_bm25(id, ?) AS score FROM documents) SELECT id, body, author FROM scored_docs WHERE score IS NOT NULL ORDER BY score DESC)
-
-query III
-EXECUTE fts_query('quacked mark laurens')
-----
-doc1	 QUÁCKING+QUÁCKING+QUÁCKING	Hannes
-doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark
-doc3	 MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999	Laurens
diff --git a/test/sql/fts/test_indexing_and_schema.test b/test/sql/fts/test_indexing_and_schema.test
deleted file mode 100644
index 19f9e43c9878..000000000000
--- a/test/sql/fts/test_indexing_and_schema.test
+++ /dev/null
@@ -1,39 +0,0 @@
-# name: test/sql/fts/test_indexing_and_schema.test
-# description: Refer default schema when the table name doesn't have a qualifier.
-# group: [fts]
-
-require fts
-
-require no_alternative_verify
-
-statement ok
-CREATE SCHEMA test
-
-statement ok
-CREATE TABLE test.documents(id VARCHAR, body VARCHAR)
-
-statement ok
-INSERT INTO test.documents VALUES ('doc1', ' QUÁCKING+QUÁCKING+QUÁCKING'), ('doc2', ' BÁRKING+BÁRKING+BÁRKING+BÁRKING'), ('doc3', ' MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999')
-
-statement error
-PRAGMA create_fts_index('documents', 'id', 'body')
-----
-
-statement ok
-SET SCHEMA='test'
-
-statement ok
-PRAGMA create_fts_index('documents', 'id', 'body')
-
-statement ok
-SET SCHEMA='main'
-
-statement error
-PRAGMA drop_fts_index('documents')
-----
-
-statement ok
-SET SCHEMA='test'
-
-statement ok
-PRAGMA drop_fts_index('documents')
diff --git a/test/sql/fts/test_issue_10254.test b/test/sql/fts/test_issue_10254.test
deleted file mode 100644
index c1afeaf3f6a9..000000000000
--- a/test/sql/fts/test_issue_10254.test
+++ /dev/null
@@ -1,25 +0,0 @@
-# name: test/sql/fts/test_issue_10254.test
-# description: Test issue #10254: FTS not working with stemmer
-# group: [fts]
-
-require fts
-
-require no_alternative_verify
-
-statement ok
-CREATE TABLE data (context VARCHAR, question VARCHAR, id BIGINT)
-
-statement ok
-INSERT INTO data VALUES
-    ('Многоклеточный организм — внесистематическая категория живых организмов, тело которых состоит из многих клеток, большая часть которых (кроме стволовых, например, клеток камбия у растений) дифференцированы, то есть различаются по строению и выполняемым функциям. Следует отличать многоклеточность и колониальность. У колониальных организмов отсутствуют настоящие дифференцированные клетки, а следовательно, и разделение тела на ткани. Граница между многоклеточностью и колониальностью нечёткая. Например, вольвокс часто относят к колониальным организмам, хотя в его колониях есть чёткое деление клеток на генеративные и соматические. Кроме дифференциации клеток, для многоклеточных характерен и более высокий уровень интеграции, чем для колониальных форм. Многоклеточные животные, возможно, появились на Земле 2,1 миллиарда лет назад, вскоре после кислородной революции .', 'У каких организмов отсутствуют настоящие дифференцированные клетки?', 0),
-    ('Многоклеточный организм — внесистематическая категория живых организмов, тело которых состоит из многих клеток, большая часть которых (кроме стволовых, например, клеток камбия у растений) дифференцированы, то есть различаются по строению и выполняемым функциям. Следует отличать многоклеточность и колониальность. У колониальных организмов отсутствуют настоящие дифференцированные клетки, а следовательно, и разделение тела на ткани. Граница между многоклеточностью и колониальностью нечёткая. Например, вольвокс часто относят к колониальным организмам, хотя в его колониях есть чёткое деление клеток на генеративные и соматические. Кроме дифференциации клеток, для многоклеточных характерен и более высокий уровень интеграции, чем для колониальных форм. Многоклеточные животные, возможно, появились на Земле 2,1 миллиарда лет назад, вскоре после кислородной революции .', 'Какие животные появились на Земле 2,1 миллиарда лет назад?', 1),
-    ('Многоклеточный организм — внесистематическая категория живых организмов, тело которых состоит из многих клеток, большая часть которых (кроме стволовых, например, клеток камбия у растений) дифференцированы, то есть различаются по строению и выполняемым функциям. Следует отличать многоклеточность и колониальность. У колониальных организмов отсутствуют настоящие дифференцированные клетки, а следовательно, и разделение тела на ткани. Граница между многоклеточностью и колониальностью нечёткая. Например, вольвокс часто относят к колониальным организмам, хотя в его колониях есть чёткое деление клеток на генеративные и соматические. Кроме дифференциации клеток, для многоклеточных характерен и более высокий уровень интеграции, чем для колониальных форм. Многоклеточные животные, возможно, появились на Земле 2,1 миллиарда лет назад, вскоре после кислородной революции .', 'Когда предположительно появились многоклеточные животные?', 2)
-
-statement ok
-PRAGMA create_fts_index('data', 'id', 'context', 'question', stemmer='russian', overwrite=1);
-
-query I
-SELECT id FROM (SELECT *, fts_main_data.match_bm25(id, 'Какие') AS score FROM data) sq WHERE score IS NOT NULL ORDER BY score DESC;
-----
-0
-1
diff --git a/test/sql/fts/test_issue_10281.test b/test/sql/fts/test_issue_10281.test
deleted file mode 100644
index a62e3b5c93c4..000000000000
--- a/test/sql/fts/test_issue_10281.test
+++ /dev/null
@@ -1,19 +0,0 @@
-# name: test/sql/fts/test_issue_10281.test
-# description: Test issue #10281: Error when trying to create FTS index for column with struct data
-# group: [fts]
-
-require fts
-
-require no_alternative_verify
-
-statement ok
-CREATE OR REPLACE TABLE data AS SELECT {'duck': 42} conversations, 42::bigint _id;
-
-statement ok
-PRAGMA create_fts_index('data', '_id', 'conversations');
-
-# we should be able to retrieve the struct col
-query I
-SELECT _id FROM (SELECT *, fts_main_data.match_bm25(_id, 'duck') AS score FROM data) sq WHERE score IS NOT NULL ORDER BY score DESC;
-----
-42
diff --git a/test/sql/fts/test_issue_5936.test b/test/sql/fts/test_issue_5936.test
deleted file mode 100644
index 1f08477d6a79..000000000000
--- a/test/sql/fts/test_issue_5936.test
+++ /dev/null
@@ -1,18 +0,0 @@
-# name: test/sql/fts/test_issue_5936.test
-# description: Issue #5936 - Confusing "column does not exist" error when using column named "document" with full text search
-# group: [fts]
-
-require skip_reload
-
-require fts
-
-require no_alternative_verify
-
-statement ok
-CREATE TABLE documents(document VARCHAR, url VARCHAR);
-
-statement ok
-INSERT INTO documents VALUES ('hello world', 'https://example.com'), ('foobar', 'https://google.com');
-
-statement ok
-PRAGMA create_fts_index(documents, url, document);
diff --git a/test/sql/fts/test_stemmer.test_slow b/test/sql/fts/test_stemmer.test_slow
deleted file mode 100644
index cf637c0b0d5a..000000000000
--- a/test/sql/fts/test_stemmer.test_slow
+++ /dev/null
@@ -1,73 +0,0 @@
-# name: test/sql/fts/test_stemmer.test_slow
-# description: Full text search stemmer
-# group: [fts]
-
-require fts
-
-statement ok
-PRAGMA enable_verification
-
-query T
-select stem('iiiiiiinformation', 'porter')
-----
-iiiiiiinform
-
-query T
-SELECT stem(NULL, 'porter')
-----
-NULL
-
-query T
-SELECT stem('', 'porter')
-----
-(empty)
-
-query T
-SELECT stem('connection', 'porter')
-----
-connect
-
-query T
-SELECT stem('an', 'porter')
-----
-an
-
-query T
-SELECT stem('🦆', 'porter')
-----
-🦆
-
-query T
-SELECT stem('information information', 'porter')
-----
-information inform
-
-query T
-SELECT stem(concat(repeat('i', 64), 'nformation'), 'porter')
-----
-iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiinform
-
-query T
-SELECT stem('information', 'none')
-----
-information
-
-query T
-SELECT stem('information ', 'porter')
-----
-information 
-
-query T
-select stem(UNNEST(string_split(repeat('information ', 5), ' ')), 'porter')
-----
-inform
-inform
-inform
-inform
-inform
-(empty)
-
-query I
-SELECT stem(UNNEST(string_split(string_agg(range, 'information '), ' ')), 'porter') AS s, mod(range, 100) xx FROM range(50000) GROUP BY xx ORDER BY s
-----
-100000 values hashing to 030f4662a25fbc772e84af37e1cc8177
