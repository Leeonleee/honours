{
  "repo": "duckdb/duckdb",
  "pull_number": 3957,
  "instance_id": "duckdb__duckdb-3957",
  "issue_numbers": [
    "3956"
  ],
  "base_commit": "26d123fdc57273903573c72b1ddafc52f365e378",
  "patch": "diff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp\nindex ee3eada0bdb5..cb5a207fb8c9 100644\n--- a/tools/jdbc/src/jni/duckdb_java.cpp\n+++ b/tools/jdbc/src/jni/duckdb_java.cpp\n@@ -815,16 +815,26 @@ JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1appe\n \n JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1string(JNIEnv *env, jclass,\n                                                                                            jobject appender_ref_buf,\n-                                                                                           jstring value) {\n+                                                                                           jbyteArray value) {\n \ttry {\n \t\tif (env->IsSameObject(value, NULL)) {\n \t\t\tget_appender(env, appender_ref_buf)->Append<std::nullptr_t>(nullptr);\n \t\t\treturn;\n \t\t}\n \n-\t\tauto c_string_value = env->GetStringUTFChars(value, NULL);\n-\t\tget_appender(env, appender_ref_buf)->Append(c_string_value);\n-\t\tenv->ReleaseStringUTFChars(value, c_string_value);\n+\t\tauto string_value = byte_array_to_string(env, value);\n+\t\tget_appender(env, appender_ref_buf)->Append(string_value.c_str());\n+\t} catch (exception &e) {\n+\t\tenv->ThrowNew(J_SQLException, e.what());\n+\t\treturn;\n+\t}\n+}\n+\n+JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1null(JNIEnv *env, jclass,\n+                                                                                         jobject appender_ref_buf) {\n+\ttry {\n+\t\tget_appender(env, appender_ref_buf)->Append<std::nullptr_t>(nullptr);\n+\t\treturn;\n \t} catch (exception &e) {\n \t\tenv->ThrowNew(J_SQLException, e.what());\n \t\treturn;\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBAppender.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBAppender.java\nindex dfe4049eae6e..1fa7efb95cd5 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBAppender.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBAppender.java\n@@ -56,7 +56,11 @@ public void append(double value) throws SQLException {\n     }\n \n     public void append(String value) throws SQLException {\n-        DuckDBNative.duckdb_jdbc_appender_append_string(appender_ref, value);\n+        if (value == null) {\n+            DuckDBNative.duckdb_jdbc_appender_append_null(appender_ref);\n+        } else {\n+            DuckDBNative.duckdb_jdbc_appender_append_string(appender_ref, value.getBytes(StandardCharsets.UTF_8));\n+        }\n     }\n \n     protected void finalize() throws Throwable {\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBNative.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBNative.java\nindex 34cd8e40a67e..f370782b0aad 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBNative.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBNative.java\n@@ -113,6 +113,7 @@ public class DuckDBNative {\n \n \tprotected static native void duckdb_jdbc_appender_append_double(ByteBuffer appender_ref, double value) throws SQLException;\n \n-\tprotected static native void duckdb_jdbc_appender_append_string(ByteBuffer appender_ref, String value) throws SQLException;\n+\tprotected static native void duckdb_jdbc_appender_append_string(ByteBuffer appender_ref, byte[] value) throws SQLException;\n \n+\tprotected static native void duckdb_jdbc_appender_append_null(ByteBuffer appender_ref) throws SQLException;\n }\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex 7032ce95afcc..08959b8bf575 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -1793,6 +1793,30 @@ public static void test_appender_int_string() throws Exception {\n \t\tconn.close();\n \t}\n \n+\tpublic static void test_appender_string_with_emoji() throws Exception {\n+\t\tDuckDBConnection conn = (DuckDBConnection) DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\tStatement stmt = conn.createStatement();\n+\n+\t\tstmt.execute(\"CREATE TABLE data (str_value VARCHAR(10))\");\n+\t\tString expectedValue = \"\u4b54\\uD86D\\uDF7C\ud83d\udd25\\uD83D\\uDE1C\";\n+\t\ttry (DuckDBAppender appender = conn.createAppender(\"main\", \"data\")) {\n+\t\t\tappender.beginRow();\n+\t\t\tappender.append(expectedValue);\n+\t\t\tappender.endRow();\n+\t\t}\n+\n+\t\tResultSet rs = stmt.executeQuery(\"SELECT str_value FROM data\");\n+\t\tassertFalse(rs.isClosed());\n+\t\tassertTrue(rs.next());\n+\n+\t\tString appendedValue = rs.getString(1);\n+\t\tassertEquals(appendedValue, expectedValue);\n+\n+\t\trs.close();\n+\t\tstmt.close();\n+\t\tconn.close();\n+\t}\n+\n \tpublic static void test_appender_table_does_not_exist() throws Exception {\n \t\tDuckDBConnection conn = (DuckDBConnection) DriverManager.getConnection(\"jdbc:duckdb:\");\n \t\tStatement stmt = conn.createStatement();\n@@ -2145,4 +2169,4 @@ public static void main(String[] args) throws Exception {\n \t\t}\n \t\tSystem.out.println(\"OK\");\n \t}\n-}\n\\ No newline at end of file\n+}\n",
  "problem_statement": "[Java] Appender for strings mangles certain UTF-8 strings\n#### What happens?\r\n\r\nThe Java DuckDBAppender will not correctly append all utf-8 strings. It appears as though emoji are the primary culprit, but some of the later utf-8 characters that require also seem to run into issues. \r\n\r\n`\ud86d\udf7c\ud83d\udd25\ud83d\ude1c\u4b54` -> `\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u4b54`\r\n\r\nMy best guess is that this goes through the \"modified UTF-8\" strings from JNI rather than more standard mechanisms. \r\n\r\nIt appears as though this does work correctly in insert and select SQL statements, so I expect the same approach there (JavaString -> ByteArray (in java)-> string (byte_array_to_string)) will likely fix this. \r\n\r\n#### To Reproduce\r\n```\r\npublic static void test_appender_string_with_emoji() throws Exception {\r\n\tDuckDBConnection conn = (DuckDBConnection) DriverManager.getConnection(\"jdbc:duckdb:\");\r\n\tStatement stmt = conn.createStatement();\r\n\tstmt.execute(\"CREATE TABLE data (str_value VARCHAR(10))\");\r\n\tString expectedValue = \"\u4b54\\uD86D\\uDF7C\ud83d\udd25\\uD83D\\uDE1C\";\r\n\ttry (DuckDBAppender appender = conn.createAppender(\"main\", \"data\")) {\r\n\t\tappender.beginRow();\r\n\t\tappender.append(expectedValue);\r\n\t\tappender.endRow();\r\n\t}\r\n\r\n\tResultSet rs = stmt.executeQuery(\"SELECT str_value FROM data\");\r\n\tassertFalse(rs.isClosed());\r\n\tassertTrue(rs.next());\r\n\r\n\tString appendedValue = rs.getString(1);\r\n\tSystem.out.println(appendedValue); // \u4b54\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n\tSystem.out.println(expectedValue); // \u4b54\ud86d\udf7c\ud83d\udd25\ud83d\ude1c\r\n\tassertEquals(appendedValue, expectedValue);\r\n\r\n\trs.close();\r\n\tstmt.close();\r\n\tconn.close();\r\n}\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Mac OSX (apple silicon)\r\n - DuckDB Version: master\r\n - DuckDB Client: Java\r\n\r\n#### Identity Disclosure:\r\n - Full Name: Jonathan Swenson\r\n - Affiliation: Omni\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "",
  "created_at": "2022-06-24T19:39:39Z"
}