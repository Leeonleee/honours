{
  "repo": "duckdb/duckdb",
  "pull_number": 7380,
  "instance_id": "duckdb__duckdb-7380",
  "issue_numbers": [
    "7349"
  ],
  "base_commit": "db5414b6f4d80dcd93d3a607c590b5a3c718c928",
  "patch": "diff --git a/src/transaction/duck_transaction.cpp b/src/transaction/duck_transaction.cpp\nindex 9e2ae977550f..c313e80c42b9 100644\n--- a/src/transaction/duck_transaction.cpp\n+++ b/src/transaction/duck_transaction.cpp\n@@ -138,7 +138,6 @@ string DuckTransaction::Commit(AttachedDatabase &db, transaction_t commit_id, bo\n \t\t}\n \t\treturn string();\n \t} catch (std::exception &ex) {\n-\t\tundo_buffer.RevertCommit(iterator_state, transaction_id);\n \t\treturn ex.what();\n \t}\n }\n",
  "test_patch": "diff --git a/test/sql/index/art/art_issue_7349.test b/test/sql/index/art/art_issue_7349.test\nnew file mode 100644\nindex 000000000000..845f30a23764\n--- /dev/null\n+++ b/test/sql/index/art/art_issue_7349.test\n@@ -0,0 +1,82 @@\n+# name: test/sql/index/art/art_issue_7349.test\n+# description: Test ensuring that we do not rollback twice when throwing an exception during commit\n+# group: [art]\n+\n+# setting up the different tables and the UNIQUE index\n+\n+statement ok\n+CREATE TABLE td(tz VARCHAR(30) NOT NULL);\n+\n+statement ok\n+CREATE UNIQUE INDEX sqlsim0 ON td(tz);\n+\n+statement ok\n+CREATE TABLE tab0(c2 DATE NOT NULL);\n+\n+statement ok\n+CREATE TABLE tab1(c2 DATE NOT NULL);\n+\n+statement ok\n+INSERT INTO td VALUES (date '2008-02-29');\n+\n+# testing different orders of appending values\n+\n+# interleaved (original issue example)\n+\n+statement ok\n+START TRANSACTION;\n+\n+statement ok\n+INSERT INTO td VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO tab0 VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO td VALUES (date '2008-02-29');\n+\n+statement error\n+COMMIT TRANSACTION;\n+----\n+TransactionContext Error: Failed to commit: Constraint Error: PRIMARY KEY or UNIQUE constraint violated: duplicate key \"2008-02-29\"\n+\n+# three tables\n+\n+statement ok\n+START TRANSACTION;\n+\n+statement ok\n+INSERT INTO tab0 VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO td VALUES (date '2008-02-29');\n+\n+statement ok\n+INSERT INTO td VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO tab1 VALUES('2006-12-25');\n+\n+statement error\n+COMMIT TRANSACTION;\n+----\n+TransactionContext Error: Failed to commit: Constraint Error: PRIMARY KEY or UNIQUE constraint violated: duplicate key \"2008-02-29\"\n+\n+# other table first\n+\n+statement ok\n+START TRANSACTION;\n+\n+statement ok\n+INSERT INTO tab0 VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO td VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO td VALUES (date '2008-02-29');\n+\n+statement error\n+COMMIT TRANSACTION;\n+----\n+TransactionContext Error: Failed to commit: Constraint Error: PRIMARY KEY or UNIQUE constraint violated: duplicate key \"2008-02-29\"\n\\ No newline at end of file\n",
  "problem_statement": "DuckDB INTERNAL Error: Interleaved appends: this should no longer happen\n### What happens?\n\nThe DuckDB binary (`/usr/local/bin/duckdb`) throws `INTERNAL Error: Interleaved appends: this should no longer happen`.\n\n### To Reproduce\n\n```sql\r\nCREATE TABLE td(tz VARCHAR(30) NOT NULL);\r\nCREATE UNIQUE INDEX sqlsim0 ON td(tz);\r\nCREATE TABLE tab0(c2 DATE NOT NULL);\r\nINSERT INTO td VALUES (date '2008-02-29');\r\nSTART TRANSACTION;\r\nINSERT INTO td VALUES('2006-12-25');\r\nINSERT INTO tab0 VALUES('2006-12-25');\r\nINSERT INTO td VALUES (date '2008-02-29');\r\nCOMMIT TRANSACTION;\r\n```\n\n### OS:\n\nUbuntu 20.04 64bit\n\n### DuckDB Version:\n\nv0.7.2-dev2867 aa20f17\n\n### DuckDB Client:\n\nBinary (/usr/local/bin/duckdb)\n\n### Full Name:\n\nJingzhou Fu\n\n### Affiliation:\n\nWingtecher Lab of Tsinghua University\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "```sql\r\n# Create the primary table\r\nstatement ok\r\nCREATE TABLE td(tz VARCHAR(30) NOT NULL);\r\n\r\n# Create the constraint we'll be violating\r\nstatement ok\r\nCREATE UNIQUE INDEX sqlsim0 ON td(tz);\r\n\r\n# Create second table to insert into before causing a constraint exception\r\nstatement ok\r\nCREATE TABLE tab0(c2 DATE NOT NULL);\r\n\r\n# Add the unique value\r\nstatement ok\r\nINSERT INTO td VALUES (date '2008-02-29');\r\n\r\nstatement ok\r\nSTART TRANSACTION;\r\n\r\n# Valid insertion into primary table\r\nstatement ok\r\nINSERT INTO td VALUES('2006-12-25');\r\n\r\n# Valid insertion into secondary table\r\nstatement ok\r\nINSERT INTO tab0 VALUES('2006-12-25');\r\n\r\n# Constraint exception, that we won't be aware of until we commit\r\nstatement ok\r\nINSERT INTO td VALUES (date '2008-02-29');\r\n\r\nstatement ok\r\nCOMMIT TRANSACTION;\r\n```\r\n\n`total_rows` = 0, `start_row` = 0, `count` = 1\r\nIf I would have to guess, I'd say the append doesn't get made to the row group collection because of the constraint violation.\r\n\r\n@taniabogatsch You likely have a better grasp of this code, I think the only problem is that we need to either still perform the append to the row group collection so it can be properly reverted - or we need to communicate that it  was never appended so it doesn't need to be reverted\nYes, it might be related to that. But also, it only happens for any order in the transaction that interleaves the appends into the two different tables. If we append into one table first and then the other, it correctly throws the constraint violation... Will have a look.",
  "created_at": "2023-05-05T14:54:49Z"
}