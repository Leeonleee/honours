{
  "repo": "duckdb/duckdb",
  "pull_number": 3961,
  "instance_id": "duckdb__duckdb-3961",
  "issue_numbers": [
    "3960",
    "3960"
  ],
  "base_commit": "40005dbc5a66bca43e7bee6072ad1ca403e90a4c",
  "patch": "diff --git a/src/main/capi/appender-c.cpp b/src/main/capi/appender-c.cpp\nindex 7e8f9db86963..959412f70739 100644\n--- a/src/main/capi/appender-c.cpp\n+++ b/src/main/capi/appender-c.cpp\n@@ -184,7 +184,8 @@ duckdb_state duckdb_append_varchar_length(duckdb_appender appender, const char *\n \treturn duckdb_append_internal<string_t>(appender, string_t(val, length));\n }\n duckdb_state duckdb_append_blob(duckdb_appender appender, const void *data, idx_t length) {\n-\treturn duckdb_append_internal<string_t>(appender, string_t((const char *)data, length));\n+\tauto value = duckdb::Value::BLOB((duckdb::const_data_ptr_t)data, length);\n+\treturn duckdb_append_internal<duckdb::Value>(appender, value);\n }\n \n duckdb_state duckdb_appender_flush(duckdb_appender appender) {\n",
  "test_patch": "diff --git a/test/api/capi/test_capi_appender.cpp b/test/api/capi/test_capi_appender.cpp\nindex 9be96053754b..54f1c35375ed 100644\n--- a/test/api/capi/test_capi_appender.cpp\n+++ b/test/api/capi/test_capi_appender.cpp\n@@ -179,9 +179,9 @@ TEST_CASE(\"Test appender statements in C API\", \"[capi]\") {\n \tdate_struct.month = 9;\n \tdate_struct.day = 3;\n \n-\tauto str = strdup(\"hello world this is my long string\");\n-\tstatus = duckdb_append_blob(tappender, str, strlen(str));\n-\tfree(str);\n+\tchar blob_data[] = \"hello world this\\0is my long string\";\n+\tidx_t blob_len = 34;\n+\tstatus = duckdb_append_blob(tappender, blob_data, blob_len);\n \tREQUIRE(status == DuckDBSuccess);\n \n \tstatus = duckdb_append_date(tappender, duckdb_to_date(date_struct));\n@@ -298,8 +298,8 @@ TEST_CASE(\"Test appender statements in C API\", \"[capi]\") {\n \tREQUIRE(result->Fetch<string>(10, 0) == \"hello\");\n \n \tauto blob = duckdb_value_blob(&result->InternalResult(), 11, 0);\n-\tREQUIRE(blob.size == 34);\n-\tREQUIRE(memcmp(blob.data, \"hello world this is my long string\", 34) == 0);\n+\tREQUIRE(blob.size == blob_len);\n+\tREQUIRE(memcmp(blob.data, blob_data, blob_len) == 0);\n \tduckdb_free(blob.data);\n \tREQUIRE(duckdb_value_int32(&result->InternalResult(), 11, 0) == 0);\n \n",
  "problem_statement": "duckdb_append_blob returns DuckdDBError when blob data includes 0x00 character\n#### What happens?\r\n`duckdb_append_blob` returns `DuckDBError` when data includes NUL (0x00) character in duckdb v0.4.0.\r\n\r\n#### To Reproduce\r\n\r\n```\r\nchar data[3];\r\ndata[0] = 0;\r\ndata[1] = 1;\r\ndata[2] = 2;\r\n\r\nduckdb_append_blob(appender, (void *)data, 3); // => DuckDBError\r\n```\r\n\r\nIn duckdb v0.3.4 duckdb_append_blob does not return DuckDBError.\r\n\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Ubuntu 20.04\r\n - DuckDB Version: 040\r\n \r\n#### Identity Disclosure:\r\n - Full Name: Masaki Suketa\r\n - Affiliation: Private person. Author of  [ruby-duckdb](https://github.com/suketa/ruby-duckdb).\r\n\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Other Platforms**: compile from source on Ubuntu 20.04\r\n\nduckdb_append_blob returns DuckdDBError when blob data includes 0x00 character\n#### What happens?\r\n`duckdb_append_blob` returns `DuckDBError` when data includes NUL (0x00) character in duckdb v0.4.0.\r\n\r\n#### To Reproduce\r\n\r\n```\r\nchar data[3];\r\ndata[0] = 0;\r\ndata[1] = 1;\r\ndata[2] = 2;\r\n\r\nduckdb_append_blob(appender, (void *)data, 3); // => DuckDBError\r\n```\r\n\r\nIn duckdb v0.3.4 duckdb_append_blob does not return DuckDBError.\r\n\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Ubuntu 20.04\r\n - DuckDB Version: 040\r\n \r\n#### Identity Disclosure:\r\n - Full Name: Masaki Suketa\r\n - Affiliation: Private person. Author of  [ruby-duckdb](https://github.com/suketa/ruby-duckdb).\r\n\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Other Platforms**: compile from source on Ubuntu 20.04\r\n\n",
  "hints_text": "\n",
  "created_at": "2022-06-25T08:41:21Z"
}