{
  "repo": "duckdb/duckdb",
  "pull_number": 15255,
  "instance_id": "duckdb__duckdb-15255",
  "issue_numbers": [
    "15012",
    "15012"
  ],
  "base_commit": "bebfb9ddeb96259ce5b53cf23b46bfc6f5c1a342",
  "patch": "diff --git a/src/parser/transform/expression/transform_constant.cpp b/src/parser/transform/expression/transform_constant.cpp\nindex 3583256003e7..c8c76c19b837 100644\n--- a/src/parser/transform/expression/transform_constant.cpp\n+++ b/src/parser/transform/expression/transform_constant.cpp\n@@ -55,6 +55,12 @@ unique_ptr<ConstantExpression> Transformer::TransformValue(duckdb_libpgquery::PG\n \t\t\t\t// successfully cast to bigint: bigint value\n \t\t\t\treturn make_uniq<ConstantExpression>(Value::HUGEINT(hugeint_value));\n \t\t\t}\n+\t\t\tuhugeint_t uhugeint_value;\n+\t\t\t// if that is not successful; try to cast as uhugeint\n+\t\t\tif (TryCast::Operation<string_t, uhugeint_t>(str_val, uhugeint_value)) {\n+\t\t\t\t// successfully cast to bigint: bigint value\n+\t\t\t\treturn make_uniq<ConstantExpression>(Value::UHUGEINT(uhugeint_value));\n+\t\t\t}\n \t\t}\n \t\tidx_t decimal_offset = val.val.str[0] == '-' ? 3 : 2;\n \t\tif (try_cast_as_decimal && decimal_position.IsValid() &&\n",
  "test_patch": "diff --git a/test/sql/types/hugeint/test_hugeint_conversion.test b/test/sql/types/hugeint/test_hugeint_conversion.test\nindex f78f5825fa2a..275cf128eee9 100644\n--- a/test/sql/types/hugeint/test_hugeint_conversion.test\n+++ b/test/sql/types/hugeint/test_hugeint_conversion.test\n@@ -166,7 +166,7 @@ SELECT 1e100::DOUBLE::HUGEINT;\n query TTTTT\n SELECT typeof(10), typeof(10000000000), typeof(170141183460469231731687303715884105727), typeof(170141183460469231731687303715884105728), typeof(170141183460469231731687303715884105728000)\n ----\n-INTEGER\tBIGINT\tHUGEINT\tDOUBLE\tDOUBLE\n+INTEGER\tBIGINT\tHUGEINT\tUHUGEINT\tDOUBLE\n \n # exponents are always double\n query III\ndiff --git a/test/sql/types/uhugeint/test_uhugeint_conversion.test b/test/sql/types/uhugeint/test_uhugeint_conversion.test\nindex 664293ac01c5..7b64365099cd 100644\n--- a/test/sql/types/uhugeint/test_uhugeint_conversion.test\n+++ b/test/sql/types/uhugeint/test_uhugeint_conversion.test\n@@ -155,7 +155,7 @@ Conversion Error\n query TTTTT\n SELECT typeof(10), typeof(10000000000), typeof(170141183460469231731687303715884105727), typeof(170141183460469231731687303715884105728), typeof(170141183460469231731687303715884105728000)\n ----\n-INTEGER\tBIGINT\tHUGEINT\tDOUBLE\tDOUBLE\n+INTEGER\tBIGINT\tHUGEINT\tUHUGEINT\tDOUBLE\n \n # exponents are always double\n query III\ndiff --git a/test/sql/types/uhugeint/uhugeint_literal.test b/test/sql/types/uhugeint/uhugeint_literal.test\nnew file mode 100644\nindex 000000000000..d8738a07b5f1\n--- /dev/null\n+++ b/test/sql/types/uhugeint/uhugeint_literal.test\n@@ -0,0 +1,23 @@\n+# name: test/sql/types/uhugeint/uhugeint_literal.test\n+# description: Test uhugeint literals\n+# group: [uhugeint]\n+\n+query I\n+select 340282366920938463463374607431768211455\n+----\n+340282366920938463463374607431768211455\n+\n+query I\n+select typeof(340282366920938463463374607431768211455)\n+----\n+UHUGEINT\n+\n+query I\n+select 340282366920938463463374607431768211456\n+----\n+340282366920938463463374607431768211456\n+\n+query I\n+select typeof(340282366920938463463374607431768211456)\n+----\n+DOUBLE\n",
  "problem_statement": "literal max uhugeint raises exception\n### What happens?\n\nThe page https://duckdb.org/docs/sql/data_types/numeric\r\ncorrectly states that the max value of a UHUGEINT should be\r\n340282366920938463463374607431768211455\r\n\r\nBut the CLI gets confused:\r\n```\r\nD select 340282366920938463463374607431768211455::UHUGEINT;\r\nConversion Error:\r\nType DOUBLE with value 3.402823669209385e+38 can't be cast because the value is out of range for the destination type UINT128\r\n```\r\nEvidently it first attempts to parse the digit sequence before it gets to the type declaration.\r\n\r\nThe good news is DuckDB correctly handles 2^127 + (2^127 - 1):\r\n \r\nselect 170141183460469231731687303715884105728::UHUGEINT + 170141183460469231731687303715884105727;\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (CAST(1.7014118346046923e+38 AS UHUGEINT) + 170141183460469231731687303715884105727) \u2502\r\n\u2502                                       uint128                                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                                              340282366920938463463374607431768211455 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### To Reproduce\n\nselect 340282366920938463463374607431768211455::UHUGEINT;\n\n### OS:\n\nMacOC\n\n### DuckDB Version:\n\n1.1.4\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nPeter Koppstein\n\n### Affiliation:\n\nPrinceton University\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\nliteral max uhugeint raises exception\n### What happens?\n\nThe page https://duckdb.org/docs/sql/data_types/numeric\r\ncorrectly states that the max value of a UHUGEINT should be\r\n340282366920938463463374607431768211455\r\n\r\nBut the CLI gets confused:\r\n```\r\nD select 340282366920938463463374607431768211455::UHUGEINT;\r\nConversion Error:\r\nType DOUBLE with value 3.402823669209385e+38 can't be cast because the value is out of range for the destination type UINT128\r\n```\r\nEvidently it first attempts to parse the digit sequence before it gets to the type declaration.\r\n\r\nThe good news is DuckDB correctly handles 2^127 + (2^127 - 1):\r\n \r\nselect 170141183460469231731687303715884105728::UHUGEINT + 170141183460469231731687303715884105727;\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (CAST(1.7014118346046923e+38 AS UHUGEINT) + 170141183460469231731687303715884105727) \u2502\r\n\u2502                                       uint128                                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                                              340282366920938463463374607431768211455 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### To Reproduce\n\nselect 340282366920938463463374607431768211455::UHUGEINT;\n\n### OS:\n\nMacOC\n\n### DuckDB Version:\n\n1.1.4\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nPeter Koppstein\n\n### Affiliation:\n\nPrinceton University\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "Casting from string like `select '340282366920938463463374607431768211455'::UHUGEINT;` works around the issue, that I think is that literal -> double -> UHUGEINT is not information preserving. Thanks\nCasting from string like `select '340282366920938463463374607431768211455'::UHUGEINT;` works around the issue, that I think is that literal -> double -> UHUGEINT is not information preserving. Thanks",
  "created_at": "2024-12-10T17:33:58Z"
}