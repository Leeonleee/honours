{
  "repo": "duckdb/duckdb",
  "pull_number": 9337,
  "instance_id": "duckdb__duckdb-9337",
  "issue_numbers": [
    "9329"
  ],
  "base_commit": "0ef2a6faa2ec98b92b4c0e28827c193c32121bd1",
  "patch": "diff --git a/src/optimizer/filter_combiner.cpp b/src/optimizer/filter_combiner.cpp\nindex 34162724b241..776cffe24fe6 100644\n--- a/src/optimizer/filter_combiner.cpp\n+++ b/src/optimizer/filter_combiner.cpp\n@@ -788,23 +788,35 @@ FilterResult FilterCombiner::AddTransitiveFilters(BoundComparisonExpression &com\n \tauto &left_node = GetNode(*comparison.left);\n \treference<Expression> right_node = GetNode(*comparison.right);\n \t// In case with filters like CAST(i) = j and i = 5 we replace the COLUMN_REF i with the constant 5\n-\tif (right_node.get().type == ExpressionType::OPERATOR_CAST) {\n+\tdo {\n+\t\tif (right_node.get().type != ExpressionType::OPERATOR_CAST) {\n+\t\t\tbreak;\n+\t\t}\n \t\tauto &bound_cast_expr = right_node.get().Cast<BoundCastExpression>();\n-\t\tif (bound_cast_expr.child->type == ExpressionType::BOUND_COLUMN_REF) {\n-\t\t\tauto &col_ref = bound_cast_expr.child->Cast<BoundColumnRefExpression>();\n-\t\t\tfor (auto &stored_exp : stored_expressions) {\n-\t\t\t\tif (stored_exp.first.get().type == ExpressionType::BOUND_COLUMN_REF) {\n-\t\t\t\t\tauto &st_col_ref = stored_exp.second->Cast<BoundColumnRefExpression>();\n-\t\t\t\t\tif (st_col_ref.binding == col_ref.binding &&\n-\t\t\t\t\t    bound_cast_expr.return_type == stored_exp.second->return_type) {\n-\t\t\t\t\t\tbound_cast_expr.child = stored_exp.second->Copy();\n-\t\t\t\t\t\tright_node = GetNode(*bound_cast_expr.child);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\tif (bound_cast_expr.child->type != ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\tbreak;\n+\t\t}\n+\t\tauto &col_ref = bound_cast_expr.child->Cast<BoundColumnRefExpression>();\n+\t\tfor (auto &stored_exp : stored_expressions) {\n+\t\t\treference<Expression> expr = stored_exp.first;\n+\t\t\tif (expr.get().type == ExpressionType::OPERATOR_CAST) {\n+\t\t\t\texpr = *(right_node.get().Cast<BoundCastExpression>().child);\n \t\t\t}\n+\t\t\tif (expr.get().type != ExpressionType::BOUND_COLUMN_REF) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tauto &st_col_ref = expr.get().Cast<BoundColumnRefExpression>();\n+\t\t\tif (st_col_ref.binding != col_ref.binding) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tif (bound_cast_expr.return_type != stored_exp.second->return_type) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tbound_cast_expr.child = stored_exp.second->Copy();\n+\t\t\tright_node = GetNode(*bound_cast_expr.child);\n+\t\t\tbreak;\n \t\t}\n-\t}\n+\t} while (false);\n \n \tif (left_node.Equals(right_node)) {\n \t\treturn FilterResult::UNSUPPORTED;\n",
  "test_patch": "diff --git a/test/fuzzer/pedro/signed_and_unsigned_comparison.test b/test/fuzzer/pedro/signed_and_unsigned_comparison.test\nnew file mode 100644\nindex 000000000000..782fd0030a1d\n--- /dev/null\n+++ b/test/fuzzer/pedro/signed_and_unsigned_comparison.test\n@@ -0,0 +1,19 @@\n+# name: test/fuzzer/pedro/signed_and_unsigned_comparison.test\n+# description: Issue #9329: Signed and unsigned integer predicate with wrong result\n+# group: [pedro]\n+\n+statement ok\n+pragma enable_verification;\n+\n+statement ok\n+CREATE TABLE t1 (\n+\tc1 UINT32,\n+\tc2 INT32\n+);\n+\n+statement ok\n+INSERT INTO t1 VALUES (0,0);\n+\n+query I\n+SELECT 1 FROM t1 WHERE t1.c2 = t1.c1 AND t1.c2 < t1.c1;\n+----\n",
  "problem_statement": "Signed and unsigned integer predicate with wrong result\n### What happens?\n\nRun the following queries:\r\n\r\n```\r\nCREATE TABLE t1 (c1 UINT32, c2 INT);\r\nINSERT INTO t1 VALUES (0,0);\r\nSELECT 1 FROM t1 WHERE t1.c2 = t1.c1 AND t1.c2 < t1.c1; --1 row, wrong\r\n```\r\nThe SELECT query returns 1 row when it shouldn't, because while the left side of the predicate is true, the second is false.\n\n### To Reproduce\n\nRun the queries above.\n\n### OS:\n\nLinux\n\n### DuckDB Version:\n\nLatest from sources\n\n### DuckDB Client:\n\nShell\n\n### Full Name:\n\nPedro Ferreira\n\n### Affiliation:\n\nHuawei\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2023-10-13T09:13:19Z"
}