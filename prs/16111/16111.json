{
  "repo": "duckdb/duckdb",
  "pull_number": 16111,
  "instance_id": "duckdb__duckdb-16111",
  "issue_numbers": [
    "16104"
  ],
  "base_commit": "cfafb10bb2863b6f8706af66c8cd6d19c167de51",
  "patch": "diff --git a/src/include/duckdb/optimizer/filter_combiner.hpp b/src/include/duckdb/optimizer/filter_combiner.hpp\nindex 68e22573aae5..979c886930a9 100644\n--- a/src/include/duckdb/optimizer/filter_combiner.hpp\n+++ b/src/include/duckdb/optimizer/filter_combiner.hpp\n@@ -103,8 +103,8 @@ class FilterCombiner {\n \n \texpression_map_t<unique_ptr<Expression>> stored_expressions;\n \texpression_map_t<idx_t> equivalence_set_map;\n-\tunordered_map<idx_t, vector<ExpressionValueInformation>> constant_values;\n-\tunordered_map<idx_t, vector<reference<Expression>>> equivalence_map;\n+\tmap<idx_t, vector<ExpressionValueInformation>> constant_values;\n+\tmap<idx_t, vector<reference<Expression>>> equivalence_map;\n \tidx_t set_index = 0;\n \t//\n \t//\t//! Structures used for OR Filters\n",
  "test_patch": "diff --git a/test/optimizer/pushdown/issue_16104.test b/test/optimizer/pushdown/issue_16104.test\nnew file mode 100644\nindex 000000000000..2a73b1daba42\n--- /dev/null\n+++ b/test/optimizer/pushdown/issue_16104.test\n@@ -0,0 +1,15 @@\n+# name: test/optimizer/pushdown/issue_16104.test\n+# description: Test expressions in filter preserve the order in Push Down\n+# group: [pushdown]\n+\n+statement ok\n+PRAGMA explain_output = OPTIMIZED_ONLY;\n+\n+statement ok\n+WITH random_data AS (\n+    SELECT random() * 2 AS col_double\n+    FROM generate_series(1, 100)\n+)\n+SELECT *\n+FROM random_data\n+WHERE abs(col_double) < 1 AND acos(col_double) > 0;\n\\ No newline at end of file\n",
  "problem_statement": "Filter with an error-throwing function getting incorrectly reordered\n### What happens?\n\nSimple `where abs(col_double) < 1 and acos(col_double) > 0` expressions can throw an error as of 1.2.0 because the filters might get reordered with `acos` being executed first while the `abs` expression is guarding against `acos` errors.\n\n### To Reproduce\n\n```sql\ncopy (select random() * 2 col_double from generate_series(1,100)) to '/tmp/r.parquet';\nselect * from (select * from  '/tmp/r.parquet') where abs(col_double) < 1 and acos(col_double) > 0;\n```\n\nOn 1.1.3:\n```\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      col_double      \u2502\n\u2502        double        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  0.19490873625576743 \u2502\n\u2502   0.9895238863469309 \u2502  \n...\n```\n\nOn 1.2.0:\n```\nInvalid Input Error:\nACOS is undefined outside [-1,1]\n```\n\n### OS:\n\nUbuntu 22.04\n\n### DuckDB Version:\n\n1.2.0\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nMarco Slot\n\n### Affiliation:\n\nCrunchy Data\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n",
  "hints_text": "",
  "created_at": "2025-02-07T09:13:57Z"
}