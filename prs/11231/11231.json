{
  "repo": "duckdb/duckdb",
  "pull_number": 11231,
  "instance_id": "duckdb__duckdb-11231",
  "issue_numbers": [
    "11211",
    "11211"
  ],
  "base_commit": "e43eb9b2ec3c9041e909c76af3862788bdad476c",
  "patch": "diff --git a/src/common/types/bit.cpp b/src/common/types/bit.cpp\nindex 97db477451c4..6f2bd8a0d066 100644\n--- a/src/common/types/bit.cpp\n+++ b/src/common/types/bit.cpp\n@@ -51,6 +51,7 @@ void Bit::Finalize(string_t &str) {\n \tfor (idx_t i = 0; i < idx_t(padding); i++) {\n \t\tBit::SetBitInternal(str, i, 1);\n \t}\n+\tstr.Finalize();\n \tBit::Verify(str);\n }\n \n@@ -145,7 +146,6 @@ void Bit::ToBit(string_t str, string_t &output_str) {\n \t\t*(output++) = byte;\n \t}\n \tBit::Finalize(output_str);\n-\tBit::Verify(output_str);\n }\n \n string Bit::ToBit(string_t str) {\n@@ -287,6 +287,7 @@ idx_t Bit::GetBitInternal(string_t bit_string, idx_t n) {\n \n void Bit::SetBit(string_t &bit_string, idx_t n, idx_t new_value) {\n \tSetBitInternal(bit_string, n + GetBitPadding(bit_string), new_value);\n+\tBit::Finalize(bit_string);\n }\n \n void Bit::SetBitInternal(string_t &bit_string, idx_t n, idx_t new_value) {\n@@ -332,7 +333,6 @@ void Bit::LeftShift(const string_t &bit_string, const idx_t &shift, string_t &re\n \t\t}\n \t}\n \tBit::Finalize(result);\n-\tBit::Verify(result);\n }\n \n void Bit::BitwiseAnd(const string_t &rhs, const string_t &lhs, string_t &result) {\n@@ -348,8 +348,7 @@ void Bit::BitwiseAnd(const string_t &rhs, const string_t &lhs, string_t &result)\n \tfor (idx_t i = 1; i < lhs.GetSize(); i++) {\n \t\tbuf[i] = l_buf[i] & r_buf[i];\n \t}\n-\t// and should preserve padding bits\n-\tBit::Verify(result);\n+\tBit::Finalize(result);\n }\n \n void Bit::BitwiseOr(const string_t &rhs, const string_t &lhs, string_t &result) {\n@@ -365,8 +364,7 @@ void Bit::BitwiseOr(const string_t &rhs, const string_t &lhs, string_t &result)\n \tfor (idx_t i = 1; i < lhs.GetSize(); i++) {\n \t\tbuf[i] = l_buf[i] | r_buf[i];\n \t}\n-\t// or should preserve padding bits\n-\tBit::Verify(result);\n+\tBit::Finalize(result);\n }\n \n void Bit::BitwiseXor(const string_t &rhs, const string_t &lhs, string_t &result) {\n@@ -403,6 +401,8 @@ void Bit::Verify(const string_t &input) {\n \tfor (idx_t i = 0; i < padding; i++) {\n \t\tD_ASSERT(Bit::GetBitInternal(input, i));\n \t}\n+\t// verify bit respects the \"normal\" string_t rules (i.e. null padding for inlined strings, prefix matches)\n+\tinput.VerifyCharacters();\n #endif\n }\n \n",
  "test_patch": "diff --git a/test/sql/types/bit/bit_issue_11211.test b/test/sql/types/bit/bit_issue_11211.test\nnew file mode 100644\nindex 000000000000..3c9775c672d9\n--- /dev/null\n+++ b/test/sql/types/bit/bit_issue_11211.test\n@@ -0,0 +1,28 @@\n+# name: test/sql/types/bit/bit_issue_11211.test\n+# description: Issue #11211 - Incorrect equality comparison for BIT type\n+# group: [bit]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+select ( 2::bit & 2::bit ) = 2::bit as b;\n+----\n+true\n+\n+query I\n+select ( 2::bit & 2::bit ) = 2::bit as b;\n+----\n+true\n+\n+query IIII\n+FROM\n+(\n+  SELECT\n+  ( 2::bit & 2::bit ) AS a,\n+  2::bit AS b,\n+  (a = b) AS '(a = b)',\n+)\n+SELECT a, b, a = b, \"(a = b)\";\n+----\n+00000000000000000000000000000010\t00000000000000000000000000000010\ttrue\ttrue\ndiff --git a/test/sql/types/bit/test_bit_functions.test b/test/sql/types/bit/test_bit_functions.test\nindex 12a3ba9c02ab..0f1b358d72e2 100644\n--- a/test/sql/types/bit/test_bit_functions.test\n+++ b/test/sql/types/bit/test_bit_functions.test\n@@ -129,7 +129,6 @@ SELECT set_bit('011'::BIT, -1, 0)\n ----\n Out of Range Error: bit index -1 out of valid range\n \n-\n # **** BIT_COUNT ****\n query I\n SELECT bit_count('10101'::BIT)\n",
  "problem_statement": "Incorrect equality comparison for BIT type\n### What happens?\r\n\r\nBIT equality comparison is broken (or at least inconsistent, in case I'm missing something).\r\n_Originally posted by @orzom411 in https://github.com/duckdb/duckdb/discussions/10720_\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nFROM\r\n(\r\n  SELECT \r\n  ( 2::bit & 2::bit ) AS a, \r\n  2::bit AS b, \r\n  (a = b) AS '(a = b)',\r\n)\r\nSELECT a, b, a = b, \"(a = b)\";\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502                a                 \u2502                b                 \u2502 (a = b) \u2502 (a = b) \u2502\r\n\u2502               bit                \u2502               bit                \u2502 boolean \u2502 boolean \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 00000000000000000000000000000010 \u2502 00000000000000000000000000000010 \u2502 true    \u2502 false   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n### OS:\r\n\r\nLinux\r\n\r\n### DuckDB Version:\r\n\r\n0.10.1-dev717\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nSoeren Wolfers\r\n\r\n### Affiliation:\r\n\r\nG-Research\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\nIncorrect equality comparison for BIT type\n### What happens?\r\n\r\nBIT equality comparison is broken (or at least inconsistent, in case I'm missing something).\r\n_Originally posted by @orzom411 in https://github.com/duckdb/duckdb/discussions/10720_\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nFROM\r\n(\r\n  SELECT \r\n  ( 2::bit & 2::bit ) AS a, \r\n  2::bit AS b, \r\n  (a = b) AS '(a = b)',\r\n)\r\nSELECT a, b, a = b, \"(a = b)\";\r\n```\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502                a                 \u2502                b                 \u2502 (a = b) \u2502 (a = b) \u2502\r\n\u2502               bit                \u2502               bit                \u2502 boolean \u2502 boolean \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 00000000000000000000000000000010 \u2502 00000000000000000000000000000010 \u2502 true    \u2502 false   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n### OS:\r\n\r\nLinux\r\n\r\n### DuckDB Version:\r\n\r\n0.10.1-dev717\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nSoeren Wolfers\r\n\r\n### Affiliation:\r\n\r\nG-Research\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a nightly build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Hi @soerenwolfers, thanks for opening this issue. I cannot reproduce this on Apple Silicon. Could you please help pin-point the issue by providing additional information:\r\n1) Are you running it on Linux x86 or ARM64?\r\n2) Is the issue deterministic?\nRunning on Linux x86, with both Python 3.8 and 3.12.2 [GCC 9.4.0]. It's deterministic and also happens on duckdb versions 0.10.0 through 0.10.1-dev1244 (can't test earlier than that because the pip installs fails because my gcc setup is borked). Can't reproduce it on shell.duckdb.org either.\r\n```\r\nprocessor\t: 0\r\nvendor_id\t: GenuineIntel\r\ncpu family\t: 6\r\nmodel\t\t: 140\r\nmodel name\t: 11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz\r\nstepping\t: 1\r\nmicrocode\t: 0xa6\r\ncpu MHz\t\t: 2400.000\r\ncache size\t: 8192 KB\r\nphysical id\t: 0\r\nsiblings\t: 8\r\ncore id\t\t: 0\r\ncpu cores\t: 4\r\napicid\t\t: 0\r\ninitial apicid\t: 0\r\nfpu\t\t: yes\r\nfpu_exception\t: yes\r\ncpuid level\t: 27\r\nwp\t\t: yes\r\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l2 invpcid_single cdp_l2 ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb intel_pt avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves split_lock_detect dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp hwp_pkg_req avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq rdpid movdiri movdir64b fsrm avx512_vp2intersect md_clear flush_l1d arch_capabilities\r\nvmx flags\t: vnmi preemption_timer posted_intr invvpid ept_x_only ept_ad ept_1gb flexpriority apicv tsc_offset vtpr mtf vapic ept vpid unrestricted_guest vapic_reg vid ple pml ept_mode_based_exec tsc_scaling\r\nbugs\t\t: spectre_v1 spectre_v2 spec_store_bypass swapgs\r\nbogomips\t: 4838.40\r\nclflush size\t: 64\r\ncache_alignment\t: 64\r\naddress sizes\t: 39 bits physical, 48 bits virtual\r\npower management:\r\n```\nThanks! I could reproduce this on my MacBook when running Ubuntu in Docker, using the vanilla DuckDB CLI client.\nHi @soerenwolfers, thanks for opening this issue. I cannot reproduce this on Apple Silicon. Could you please help pin-point the issue by providing additional information:\r\n1) Are you running it on Linux x86 or ARM64?\r\n2) Is the issue deterministic?\nRunning on Linux x86, with both Python 3.8 and 3.12.2 [GCC 9.4.0]. It's deterministic and also happens on duckdb versions 0.10.0 through 0.10.1-dev1244 (can't test earlier than that because the pip installs fails because my gcc setup is borked). Can't reproduce it on shell.duckdb.org either.\r\n```\r\nprocessor\t: 0\r\nvendor_id\t: GenuineIntel\r\ncpu family\t: 6\r\nmodel\t\t: 140\r\nmodel name\t: 11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz\r\nstepping\t: 1\r\nmicrocode\t: 0xa6\r\ncpu MHz\t\t: 2400.000\r\ncache size\t: 8192 KB\r\nphysical id\t: 0\r\nsiblings\t: 8\r\ncore id\t\t: 0\r\ncpu cores\t: 4\r\napicid\t\t: 0\r\ninitial apicid\t: 0\r\nfpu\t\t: yes\r\nfpu_exception\t: yes\r\ncpuid level\t: 27\r\nwp\t\t: yes\r\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l2 invpcid_single cdp_l2 ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb intel_pt avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves split_lock_detect dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp hwp_pkg_req avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq rdpid movdiri movdir64b fsrm avx512_vp2intersect md_clear flush_l1d arch_capabilities\r\nvmx flags\t: vnmi preemption_timer posted_intr invvpid ept_x_only ept_ad ept_1gb flexpriority apicv tsc_offset vtpr mtf vapic ept vpid unrestricted_guest vapic_reg vid ple pml ept_mode_based_exec tsc_scaling\r\nbugs\t\t: spectre_v1 spectre_v2 spec_store_bypass swapgs\r\nbogomips\t: 4838.40\r\nclflush size\t: 64\r\ncache_alignment\t: 64\r\naddress sizes\t: 39 bits physical, 48 bits virtual\r\npower management:\r\n```\nThanks! I could reproduce this on my MacBook when running Ubuntu in Docker, using the vanilla DuckDB CLI client.",
  "created_at": "2024-03-18T19:25:31Z"
}